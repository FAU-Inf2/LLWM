; ModuleID = '<stdin>'
source_filename = "ld-temp.o"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.infomap = type { i8*, i8* }
%struct.option = type { i8*, i32, i32*, i32 }
%struct.quoting_options = type { i32, i32, [8 x i32], i8*, i8* }
%struct.slotvec = type { i64, i8* }
%struct.file_name = type { i8*, i64, i8* }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.dev_ino, %struct.dev_ino, %struct.dev_ino, [3 x i64] }
%struct.dev_ino = type { i64, i64 }
%struct.__dirstream = type opaque
%struct.dirent = type { i64, i64, i16, i8, [256 x i8] }
%struct.__mbstate_t = type { i32, %union.anon }
%union.anon = type { i32 }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }

@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [39 x i8] c"Try '%s --help' for more information.\0A\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"Usage: %s [OPTION]...\0A\00", align 1
@.str.2 = private unnamed_addr constant [60 x i8] c"Print the full filename of the current working directory.\0A\0A\00", align 1
@stdout = external dso_local global %struct._IO_FILE*, align 8
@.str.3 = private unnamed_addr constant [111 x i8] c"  -L, --logical   use PWD from environment, even if it contains symlinks\0A  -P, --physical  avoid all symlinks\0A\00", align 1
@.str.4 = private unnamed_addr constant [45 x i8] c"      --help     display this help and exit\0A\00", align 1
@.str.5 = private unnamed_addr constant [54 x i8] c"      --version  output version information and exit\0A\00", align 1
@.str.6 = private unnamed_addr constant [44 x i8] c"\0AIf no option is specified, -P is assumed.\0A\00", align 1
@.str.7 = private unnamed_addr constant [191 x i8] c"\0ANOTE: your shell may have its own version of %s, which usually supersedes\0Athe version described here.  Please refer to your shell's documentation\0Afor details about the options it supports.\0A\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"pwd\00", align 1
@__const.emit_ancillary_info.infomap = private unnamed_addr constant [7 x %struct.infomap] [%struct.infomap { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.18, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.19, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i32 0, i32 0) }, %struct.infomap zeroinitializer], align 16
@.str.25 = private unnamed_addr constant [23 x i8] c"\0A%s online help: <%s>\0A\00", align 1
@.str.14 = private unnamed_addr constant [14 x i8] c"GNU coreutils\00", align 1
@.str.26 = private unnamed_addr constant [40 x i8] c"https://www.gnu.org/software/coreutils/\00", align 1
@.str.27 = private unnamed_addr constant [4 x i8] c"en_\00", align 1
@.str.28 = private unnamed_addr constant [71 x i8] c"Report any translation bugs to <https://translationproject.org/team/>\0A\00", align 1
@.str.29 = private unnamed_addr constant [27 x i8] c"Full documentation <%s%s>\0A\00", align 1
@.str.30 = private unnamed_addr constant [51 x i8] c"or available locally via: info '(coreutils) %s%s'\0A\00", align 1
@.str.31 = private unnamed_addr constant [12 x i8] c" invocation\00", align 1
@.str.10 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.17 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.18 = private unnamed_addr constant [16 x i8] c"test invocation\00", align 1
@.str.11 = private unnamed_addr constant [10 x i8] c"coreutils\00", align 1
@.str.19 = private unnamed_addr constant [22 x i8] c"Multi-call invocation\00", align 1
@.str.20 = private unnamed_addr constant [10 x i8] c"sha224sum\00", align 1
@.str.21 = private unnamed_addr constant [15 x i8] c"sha2 utilities\00", align 1
@.str.22 = private unnamed_addr constant [10 x i8] c"sha256sum\00", align 1
@.str.23 = private unnamed_addr constant [10 x i8] c"sha384sum\00", align 1
@.str.24 = private unnamed_addr constant [10 x i8] c"sha512sum\00", align 1
@.str.9 = private unnamed_addr constant [16 x i8] c"POSIXLY_CORRECT\00", align 1
@.str.12 = private unnamed_addr constant [24 x i8] c"/usr/local/share/locale\00", align 1
@.str.13 = private unnamed_addr constant [3 x i8] c"LP\00", align 1
@longopts = internal constant [5 x %struct.option] [%struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.32, i32 0, i32 0), i32 0, i32* null, i32 76 }, %struct.option { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.33, i32 0, i32 0), i32 0, i32* null, i32 80 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.34, i32 0, i32 0), i32 0, i32* null, i32 -130 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.35, i32 0, i32 0), i32 0, i32* null, i32 -131 }, %struct.option zeroinitializer], align 16, !dbg !0
@.str.15 = private unnamed_addr constant [13 x i8] c"Jim Meyering\00", align 1
@optind = external dso_local global i32, align 4
@.str.16 = private unnamed_addr constant [30 x i8] c"ignoring non-option arguments\00", align 1
@.str.39 = private unnamed_addr constant [31 x i8] c"failed to get attributes of %s\00", align 1
@.str.40 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@.str.38 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.41 = private unnamed_addr constant [18 x i8] c"failed to stat %s\00", align 1
@.str.42 = private unnamed_addr constant [3 x i8] c"..\00", align 1
@.str.43 = private unnamed_addr constant [25 x i8] c"cannot open directory %s\00", align 1
@.str.44 = private unnamed_addr constant [22 x i8] c"failed to chdir to %s\00", align 1
@.str.45 = private unnamed_addr constant [21 x i8] c"reading directory %s\00", align 1
@.str.46 = private unnamed_addr constant [57 x i8] c"couldn't find directory entry in %s with matching i-node\00", align 1
@.str.47 = private unnamed_addr constant [4 x i8] c"../\00", align 1
@.str.36 = private unnamed_addr constant [4 x i8] c"PWD\00", align 1
@.str.37 = private unnamed_addr constant [3 x i8] c"/.\00", align 1
@.str.32 = private unnamed_addr constant [8 x i8] c"logical\00", align 1
@.str.33 = private unnamed_addr constant [9 x i8] c"physical\00", align 1
@.str.34 = private unnamed_addr constant [5 x i8] c"help\00", align 1
@.str.35 = private unnamed_addr constant [8 x i8] c"version\00", align 1
@Version = internal global i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.48, i32 0, i32 0), align 8, !dbg !25
@.str.48 = private unnamed_addr constant [5 x i8] c"8.32\00", align 1
@ignore_EPIPE = internal global i8 0, align 1, !dbg !30
@.str.51 = private unnamed_addr constant [12 x i8] c"write error\00", align 1
@file_name = internal global i8* null, align 8, !dbg !35
@.str.1.52 = private unnamed_addr constant [7 x i8] c"%s: %s\00", align 1
@.str.2.53 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@exit_failure = internal global i32 1, align 4, !dbg !39
@.str.58 = private unnamed_addr constant [56 x i8] c"A NULL argv[0] was passed through an exec system call.\0A\00", align 1
@.str.1.59 = private unnamed_addr constant [8 x i8] c"/.libs/\00", align 1
@.str.2.60 = private unnamed_addr constant [4 x i8] c"lt-\00", align 1
@program_invocation_short_name = external dso_local global i8*, align 8
@program_name = internal global i8* null, align 8, !dbg !46
@program_invocation_name = external dso_local global i8*, align 8
@default_quoting_options = internal global %struct.quoting_options zeroinitializer, align 8, !dbg !52
@slotvec = internal global %struct.slotvec* @slotvec0, align 8, !dbg !108
@nslots = internal global i32 1, align 4, !dbg !115
@slotvec0 = internal global %struct.slotvec { i64 256, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i32 0, i32 0) }, align 8, !dbg !117
@slot0 = internal global [256 x i8] zeroinitializer, align 16, !dbg !103
@.str.10.63 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.11.64 = private unnamed_addr constant [2 x i8] c"`\00", align 1
@.str.12.65 = private unnamed_addr constant [2 x i8] c"'\00", align 1
@.str.13.66 = private unnamed_addr constant [6 x i8] c"UTF-8\00", align 1
@.str.14.67 = private unnamed_addr constant [4 x i8] c"\E2\80\98\00", align 1
@.str.15.68 = private unnamed_addr constant [4 x i8] c"\E2\80\99\00", align 1
@.str.16.69 = private unnamed_addr constant [8 x i8] c"GB18030\00", align 1
@.str.17.70 = private unnamed_addr constant [4 x i8] c"\A1\07e\00", align 1
@.str.18.71 = private unnamed_addr constant [3 x i8] c"\A1\AF\00", align 1
@quote_quoting_options = internal global %struct.quoting_options { i32 8, i32 0, [8 x i32] zeroinitializer, i8* null, i8* null }, align 8, !dbg !91
@.str.80 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@.str.81 = private unnamed_addr constant [12 x i8] c"%s (%s) %s\0A\00", align 1
@.str.1.82 = private unnamed_addr constant [7 x i8] c"%s %s\0A\00", align 1
@.str.2.83 = private unnamed_addr constant [4 x i8] c"(C)\00", align 1
@.str.3.84 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.4.85 = private unnamed_addr constant [171 x i8] c"License GPLv3+: GNU GPL version 3 or later <%s>.\0AThis is free software: you are free to change and redistribute it.\0AThere is NO WARRANTY, to the extent permitted by law.\0A\00", align 1
@.str.5.86 = private unnamed_addr constant [34 x i8] c"https://gnu.org/licenses/gpl.html\00", align 1
@.str.6.87 = private unnamed_addr constant [16 x i8] c"Written by %s.\0A\00", align 1
@.str.7.88 = private unnamed_addr constant [23 x i8] c"Written by %s and %s.\0A\00", align 1
@.str.8.89 = private unnamed_addr constant [28 x i8] c"Written by %s, %s, and %s.\0A\00", align 1
@.str.9.90 = private unnamed_addr constant [32 x i8] c"Written by %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.10.91 = private unnamed_addr constant [36 x i8] c"Written by %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.11.92 = private unnamed_addr constant [40 x i8] c"Written by %s, %s, %s,\0A%s, %s, and %s.\0A\00", align 1
@.str.12.93 = private unnamed_addr constant [44 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, and %s.\0A\00", align 1
@.str.13.94 = private unnamed_addr constant [48 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.14.95 = private unnamed_addr constant [52 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.15.96 = private unnamed_addr constant [60 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, %s, and others.\0A\00", align 1
@version_etc_copyright = internal constant [47 x i8] c"Copyright %s %d Free Software Foundation, Inc.\00", align 16, !dbg !119
@.str.1.111 = private unnamed_addr constant [17 x i8] c"memory exhausted\00", align 1
@.str.112 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.123 = private unnamed_addr constant [2 x i8] c"C\00", align 1
@.str.1.124 = private unnamed_addr constant [6 x i8] c"POSIX\00", align 1
@.str.127 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1.128 = private unnamed_addr constant [6 x i8] c"ASCII\00", align 1
@inVal0 = global i32 0
@inVal1 = global i8** null
@.compVal0 = private global [4 x i8] c"-LL\00"
@.compVal1 = private global [1 x i8] zeroinitializer
@.compVal2 = private global [3 x i8] c"-L\00"
@x = common global i32 0
@y = common global i32 0
@x.1 = common global i32 0
@y.2 = common global i32 0
@x.3 = common global i32 0
@y.4 = common global i32 0
@x.5 = common global i32 0
@y.6 = common global i32 0
@x.7 = common global i32 0
@y.8 = common global i32 0
@x.9 = common global i32 0
@y.10 = common global i32 0
@x.11 = common global i32 0
@y.12 = common global i32 0
@x.13 = common global i32 0
@y.14 = common global i32 0
@x.15 = common global i32 0
@y.16 = common global i32 0
@x.17 = common global i32 0
@y.18 = common global i32 0
@x.19 = common global i32 0
@y.20 = common global i32 0
@x.21 = common global i32 0
@y.22 = common global i32 0
@x.23 = common global i32 0
@y.24 = common global i32 0
@x.25 = common global i32 0
@y.26 = common global i32 0
@x.27 = common global i32 0
@y.28 = common global i32 0
@x.29 = common global i32 0
@y.30 = common global i32 0
@x.31 = common global i32 0
@y.32 = common global i32 0
@x.33 = common global i32 0
@y.34 = common global i32 0
@x.35 = common global i32 0
@y.36 = common global i32 0
@x.37 = common global i32 0
@y.38 = common global i32 0
@x.39 = common global i32 0
@y.40 = common global i32 0
@x.41 = common global i32 0
@y.42 = common global i32 0
@x.43 = common global i32 0
@y.44 = common global i32 0
@x.45 = common global i32 0
@y.46 = common global i32 0
@x.47 = common global i32 0
@y.48 = common global i32 0
@x.49 = common global i32 0
@y.50 = common global i32 0
@x.51 = common global i32 0
@y.52 = common global i32 0
@x.53 = common global i32 0
@y.54 = common global i32 0
@x.55 = common global i32 0
@y.56 = common global i32 0
@x.57 = common global i32 0
@y.58 = common global i32 0
@x.59 = common global i32 0
@y.60 = common global i32 0
@x.61 = common global i32 0
@y.62 = common global i32 0
@x.63 = common global i32 0
@y.64 = common global i32 0
@x.65 = common global i32 0
@y.66 = common global i32 0
@x.67 = common global i32 0
@y.68 = common global i32 0
@x.69 = common global i32 0
@y.70 = common global i32 0
@x.71 = common global i32 0
@y.72 = common global i32 0
@x.73 = common global i32 0
@y.74 = common global i32 0
@x.75 = common global i32 0
@y.76 = common global i32 0
@x.77 = common global i32 0
@y.78 = common global i32 0
@x.79 = common global i32 0
@y.80 = common global i32 0
@x.81 = common global i32 0
@y.82 = common global i32 0
@x.83 = common global i32 0
@y.84 = common global i32 0
@x.85 = common global i32 0
@y.86 = common global i32 0
@x.87 = common global i32 0
@y.88 = common global i32 0
@x.89 = common global i32 0
@y.90 = common global i32 0
@x.91 = common global i32 0
@y.92 = common global i32 0
@x.93 = common global i32 0
@y.94 = common global i32 0
@x.95 = common global i32 0
@y.96 = common global i32 0
@x.97 = common global i32 0
@y.98 = common global i32 0
@x.99 = common global i32 0
@y.100 = common global i32 0

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @usage(i32) #0 !dbg !171 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !174, metadata !DIExpression()), !dbg !175
  %3 = load i32, i32* %2, align 4, !dbg !176
  %4 = icmp ne i32 %3, 0, !dbg !178
  br i1 %4, label %5, label %44, !dbg !179

5:                                                ; preds = %1
  %6 = load i32, i32* @x
  %7 = load i32, i32* @y
  %8 = sub i32 %6, 1
  %9 = mul i32 %6, %8
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  %12 = icmp slt i32 %7, 10
  %13 = or i1 %11, %12
  br i1 %13, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %5, %originalBBalteredBB
  %14 = load i32, i32* @x
  %15 = load i32, i32* @y
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %22, !dbg !180

22:                                               ; preds = %originalBBpart2
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !181
  %24 = call i8* @gettext(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0)) #10, !dbg !181
  %25 = load i8*, i8** @program_name, align 8, !dbg !181
  %26 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %23, i8* %24, i8* %25), !dbg !181
  br label %27, !dbg !181

27:                                               ; preds = %22
  %28 = load i32, i32* @x
  %29 = load i32, i32* @y
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %27, %originalBB1alteredBB
  %36 = load i32, i32* @x
  %37 = load i32, i32* @y
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %81, !dbg !181

44:                                               ; preds = %1
  %45 = load i32, i32* @x
  %46 = load i32, i32* @y
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %44, %originalBB6alteredBB
  %53 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0)) #10, !dbg !183
  %54 = load i8*, i8** @program_name, align 8, !dbg !185
  %55 = call i32 (i8*, ...) @printf(i8* %53, i8* %54), !dbg !186
  %56 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.2, i64 0, i64 0)) #10, !dbg !187
  %57 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !187
  %58 = call i32 @fputs_unlocked(i8* %56, %struct._IO_FILE* %57), !dbg !187
  %59 = call i8* @gettext(i8* getelementptr inbounds ([111 x i8], [111 x i8]* @.str.3, i64 0, i64 0)) #10, !dbg !188
  %60 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !188
  %61 = call i32 @fputs_unlocked(i8* %59, %struct._IO_FILE* %60), !dbg !188
  %62 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.4, i64 0, i64 0)) #10, !dbg !189
  %63 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !189
  %64 = call i32 @fputs_unlocked(i8* %62, %struct._IO_FILE* %63), !dbg !189
  %65 = call i8* @gettext(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.5, i64 0, i64 0)) #10, !dbg !190
  %66 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !190
  %67 = call i32 @fputs_unlocked(i8* %65, %struct._IO_FILE* %66), !dbg !190
  %68 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.6, i64 0, i64 0)) #10, !dbg !191
  %69 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !191
  %70 = call i32 @fputs_unlocked(i8* %68, %struct._IO_FILE* %69), !dbg !191
  %71 = call i8* @gettext(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.7, i64 0, i64 0)) #10, !dbg !192
  %72 = call i32 (i8*, ...) @printf(i8* %71, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0)), !dbg !193
  call void @emit_ancillary_info(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0)), !dbg !194
  %73 = load i32, i32* @x
  %74 = load i32, i32* @y
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %81

81:                                               ; preds = %originalBBpart28, %originalBBpart24
  %82 = load i32, i32* @x
  %83 = load i32, i32* @y
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %81, %originalBB10alteredBB
  %90 = load i32, i32* %2, align 4, !dbg !195
  call void @exit(i32 %90) #12, !dbg !196
  %91 = load i32, i32* @x
  %92 = load i32, i32* @y
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  unreachable, !dbg !196

originalBBalteredBB:                              ; preds = %originalBB, %5
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %27
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %44
  %99 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0)) #10, !dbg !183
  %100 = load i8*, i8** @program_name, align 8, !dbg !185
  %101 = call i32 (i8*, ...) @printf(i8* %99, i8* %100), !dbg !186
  %102 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.2, i64 0, i64 0)) #10, !dbg !187
  %103 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !187
  %104 = call i32 @fputs_unlocked(i8* %102, %struct._IO_FILE* %103), !dbg !187
  %105 = call i8* @gettext(i8* getelementptr inbounds ([111 x i8], [111 x i8]* @.str.3, i64 0, i64 0)) #10, !dbg !188
  %106 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !188
  %107 = call i32 @fputs_unlocked(i8* %105, %struct._IO_FILE* %106), !dbg !188
  %108 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.4, i64 0, i64 0)) #10, !dbg !189
  %109 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !189
  %110 = call i32 @fputs_unlocked(i8* %108, %struct._IO_FILE* %109), !dbg !189
  %111 = call i8* @gettext(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.5, i64 0, i64 0)) #10, !dbg !190
  %112 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !190
  %113 = call i32 @fputs_unlocked(i8* %111, %struct._IO_FILE* %112), !dbg !190
  %114 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.6, i64 0, i64 0)) #10, !dbg !191
  %115 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !191
  %116 = call i32 @fputs_unlocked(i8* %114, %struct._IO_FILE* %115), !dbg !191
  %117 = call i8* @gettext(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.7, i64 0, i64 0)) #10, !dbg !192
  %118 = call i32 (i8*, ...) @printf(i8* %117, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0)), !dbg !193
  call void @emit_ancillary_info(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0)), !dbg !194
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %81
  %119 = load i32, i32* %2, align 4, !dbg !195
  call void @exit(i32 %119) #12, !dbg !196
  br label %originalBB10
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare dso_local i8* @gettext(i8*) #2

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #3

declare dso_local i32 @printf(i8*, ...) #3

declare dso_local i32 @fputs_unlocked(i8*, %struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @emit_ancillary_info(i8*) #4 !dbg !197 {
  %2 = load i32, i32* @x.1
  %3 = load i32, i32* @y.2
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  %11 = alloca [7 x %struct.infomap], align 16
  %12 = alloca i8*, align 8
  %13 = alloca %struct.infomap*, align 8
  %14 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !201, metadata !DIExpression()), !dbg !202
  call void @llvm.dbg.declare(metadata [7 x %struct.infomap]* %11, metadata !203, metadata !DIExpression()), !dbg !212
  %15 = bitcast [7 x %struct.infomap]* %11 to i8*, !dbg !212
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %15, i8* align 16 bitcast ([7 x %struct.infomap]* @__const.emit_ancillary_info.infomap to i8*), i64 112, i1 false), !dbg !212
  call void @llvm.dbg.declare(metadata i8** %12, metadata !213, metadata !DIExpression()), !dbg !214
  %16 = load i8*, i8** %10, align 8, !dbg !215
  store i8* %16, i8** %12, align 8, !dbg !214
  call void @llvm.dbg.declare(metadata %struct.infomap** %13, metadata !216, metadata !DIExpression()), !dbg !218
  %17 = getelementptr inbounds [7 x %struct.infomap], [7 x %struct.infomap]* %11, i64 0, i64 0, !dbg !219
  store %struct.infomap* %17, %struct.infomap** %13, align 8, !dbg !218
  %18 = load i32, i32* @x.1
  %19 = load i32, i32* @y.2
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %26, !dbg !220

26:                                               ; preds = %originalBBpart28, %originalBBpart2
  %27 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !221
  %28 = getelementptr inbounds %struct.infomap, %struct.infomap* %27, i32 0, i32 0, !dbg !222
  %29 = load i8*, i8** %28, align 8, !dbg !222
  %30 = icmp ne i8* %29, null, !dbg !221
  br i1 %30, label %31, label %39, !dbg !223

31:                                               ; preds = %26
  %32 = load i8*, i8** %10, align 8, !dbg !224
  %33 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !224
  %34 = getelementptr inbounds %struct.infomap, %struct.infomap* %33, i32 0, i32 0, !dbg !224
  %35 = load i8*, i8** %34, align 8, !dbg !224
  %36 = call i32 @strcmp(i8* %32, i8* %35) #13, !dbg !224
  %37 = icmp eq i32 %36, 0, !dbg !224
  %38 = xor i1 %37, true, !dbg !225
  br label %39

39:                                               ; preds = %31, %26
  %40 = phi i1 [ false, %26 ], [ %38, %31 ], !dbg !226
  %41 = load i32, i32* @x.1
  %42 = load i32, i32* @y.2
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %39, %originalBB1alteredBB
  %49 = load i32, i32* @x.1
  %50 = load i32, i32* @y.2
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %40, label %57, label %76, !dbg !220

57:                                               ; preds = %originalBBpart24
  %58 = load i32, i32* @x.1
  %59 = load i32, i32* @y.2
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %57, %originalBB6alteredBB
  %66 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !227
  %67 = getelementptr inbounds %struct.infomap, %struct.infomap* %66, i32 1, !dbg !227
  store %struct.infomap* %67, %struct.infomap** %13, align 8, !dbg !227
  %68 = load i32, i32* @x.1
  %69 = load i32, i32* @y.2
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %26, !dbg !220, !llvm.loop !228

76:                                               ; preds = %originalBBpart24
  %77 = load i32, i32* @x.1
  %78 = load i32, i32* @y.2
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %76, %originalBB10alteredBB
  %85 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !229
  %86 = getelementptr inbounds %struct.infomap, %struct.infomap* %85, i32 0, i32 1, !dbg !231
  %87 = load i8*, i8** %86, align 8, !dbg !231
  %88 = icmp ne i8* %87, null, !dbg !229
  %89 = load i32, i32* @x.1
  %90 = load i32, i32* @y.2
  %91 = sub i32 %89, 1
  %92 = mul i32 %89, %91
  %93 = urem i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %94, %95
  br i1 %96, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %88, label %97, label %117, !dbg !232

97:                                               ; preds = %originalBBpart212
  %98 = load i32, i32* @x.1
  %99 = load i32, i32* @y.2
  %100 = sub i32 %98, 1
  %101 = mul i32 %98, %100
  %102 = urem i32 %101, 2
  %103 = icmp eq i32 %102, 0
  %104 = icmp slt i32 %99, 10
  %105 = or i1 %103, %104
  br i1 %105, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %97, %originalBB14alteredBB
  %106 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !233
  %107 = getelementptr inbounds %struct.infomap, %struct.infomap* %106, i32 0, i32 1, !dbg !234
  %108 = load i8*, i8** %107, align 8, !dbg !234
  store i8* %108, i8** %12, align 8, !dbg !235
  %109 = load i32, i32* @x.1
  %110 = load i32, i32* @y.2
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %117, !dbg !236

117:                                              ; preds = %originalBBpart216, %originalBBpart212
  %118 = load i32, i32* @x.1
  %119 = load i32, i32* @y.2
  %120 = sub i32 %118, 1
  %121 = mul i32 %118, %120
  %122 = urem i32 %121, 2
  %123 = icmp eq i32 %122, 0
  %124 = icmp slt i32 %119, 10
  %125 = or i1 %123, %124
  br i1 %125, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %117, %originalBB18alteredBB
  %126 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.25, i64 0, i64 0)) #10, !dbg !237
  %127 = call i32 (i8*, ...) @printf(i8* %126, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.26, i64 0, i64 0)), !dbg !238
  call void @llvm.dbg.declare(metadata i8** %14, metadata !239, metadata !DIExpression()), !dbg !240
  %128 = call i8* @setlocale(i32 5, i8* null) #10, !dbg !241
  store i8* %128, i8** %14, align 8, !dbg !240
  %129 = load i8*, i8** %14, align 8, !dbg !242
  %130 = icmp ne i8* %129, null, !dbg !242
  %131 = load i32, i32* @x.1
  %132 = load i32, i32* @y.2
  %133 = sub i32 %131, 1
  %134 = mul i32 %131, %133
  %135 = urem i32 %134, 2
  %136 = icmp eq i32 %135, 0
  %137 = icmp slt i32 %132, 10
  %138 = or i1 %136, %137
  br i1 %138, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %130, label %139, label %179, !dbg !244

139:                                              ; preds = %originalBBpart220
  %140 = load i32, i32* @x.1
  %141 = load i32, i32* @y.2
  %142 = sub i32 %140, 1
  %143 = mul i32 %140, %142
  %144 = urem i32 %143, 2
  %145 = icmp eq i32 %144, 0
  %146 = icmp slt i32 %141, 10
  %147 = or i1 %145, %146
  br i1 %147, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %139, %originalBB22alteredBB
  %148 = load i8*, i8** %14, align 8, !dbg !245
  %149 = call i32 @strncmp(i8* %148, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.27, i64 0, i64 0), i64 3) #13, !dbg !245
  %150 = icmp ne i32 %149, 0, !dbg !245
  %151 = load i32, i32* @x.1
  %152 = load i32, i32* @y.2
  %153 = sub i32 %151, 1
  %154 = mul i32 %151, %153
  %155 = urem i32 %154, 2
  %156 = icmp eq i32 %155, 0
  %157 = icmp slt i32 %152, 10
  %158 = or i1 %156, %157
  br i1 %158, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %150, label %159, label %179, !dbg !246

159:                                              ; preds = %originalBBpart224
  %160 = load i32, i32* @x.1
  %161 = load i32, i32* @y.2
  %162 = sub i32 %160, 1
  %163 = mul i32 %160, %162
  %164 = urem i32 %163, 2
  %165 = icmp eq i32 %164, 0
  %166 = icmp slt i32 %161, 10
  %167 = or i1 %165, %166
  br i1 %167, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %159, %originalBB26alteredBB
  %168 = call i8* @gettext(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.28, i64 0, i64 0)) #10, !dbg !247
  %169 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !247
  %170 = call i32 @fputs_unlocked(i8* %168, %struct._IO_FILE* %169), !dbg !247
  %171 = load i32, i32* @x.1
  %172 = load i32, i32* @y.2
  %173 = sub i32 %171, 1
  %174 = mul i32 %171, %173
  %175 = urem i32 %174, 2
  %176 = icmp eq i32 %175, 0
  %177 = icmp slt i32 %172, 10
  %178 = or i1 %176, %177
  br i1 %178, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %179, !dbg !249

179:                                              ; preds = %originalBBpart228, %originalBBpart224, %originalBBpart220
  %180 = load i32, i32* @x.1
  %181 = load i32, i32* @y.2
  %182 = sub i32 %180, 1
  %183 = mul i32 %180, %182
  %184 = urem i32 %183, 2
  %185 = icmp eq i32 %184, 0
  %186 = icmp slt i32 %181, 10
  %187 = or i1 %185, %186
  br i1 %187, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %179, %originalBB30alteredBB
  %188 = call i8* @gettext(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.29, i64 0, i64 0)) #10, !dbg !250
  %189 = load i8*, i8** %10, align 8, !dbg !251
  %190 = call i32 (i8*, ...) @printf(i8* %188, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.26, i64 0, i64 0), i8* %189), !dbg !252
  %191 = call i8* @gettext(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.30, i64 0, i64 0)) #10, !dbg !253
  %192 = load i8*, i8** %12, align 8, !dbg !254
  %193 = load i8*, i8** %12, align 8, !dbg !255
  %194 = load i8*, i8** %10, align 8, !dbg !256
  %195 = icmp eq i8* %193, %194, !dbg !257
  %196 = zext i1 %195 to i64, !dbg !255
  %197 = select i1 %195, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.31, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0), !dbg !255
  %198 = call i32 (i8*, ...) @printf(i8* %191, i8* %192, i8* %197), !dbg !258
  %199 = load i32, i32* @x.1
  %200 = load i32, i32* @y.2
  %201 = sub i32 %199, 1
  %202 = mul i32 %199, %201
  %203 = urem i32 %202, 2
  %204 = icmp eq i32 %203, 0
  %205 = icmp slt i32 %200, 10
  %206 = or i1 %204, %205
  br i1 %206, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  ret void, !dbg !259

originalBBalteredBB:                              ; preds = %originalBB, %1
  %207 = alloca i8*, align 8
  %208 = alloca [7 x %struct.infomap], align 16
  %209 = alloca i8*, align 8
  %210 = alloca %struct.infomap*, align 8
  %211 = alloca i8*, align 8
  store i8* %0, i8** %207, align 8
  call void @llvm.dbg.declare(metadata i8** %207, metadata !260, metadata !DIExpression()), !dbg !202
  call void @llvm.dbg.declare(metadata [7 x %struct.infomap]* %208, metadata !274, metadata !DIExpression()), !dbg !212
  %212 = bitcast [7 x %struct.infomap]* %208 to i8*, !dbg !212
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %212, i8* align 16 bitcast ([7 x %struct.infomap]* @__const.emit_ancillary_info.infomap to i8*), i64 112, i1 false), !dbg !212
  call void @llvm.dbg.declare(metadata i8** %209, metadata !281, metadata !DIExpression()), !dbg !214
  %213 = load i8*, i8** %207, align 8, !dbg !215
  store i8* %213, i8** %209, align 8, !dbg !214
  call void @llvm.dbg.declare(metadata %struct.infomap** %210, metadata !282, metadata !DIExpression()), !dbg !218
  %214 = getelementptr inbounds [7 x %struct.infomap], [7 x %struct.infomap]* %208, i64 0, i64 0, !dbg !219
  store %struct.infomap* %214, %struct.infomap** %210, align 8, !dbg !218
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %39
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %57
  %215 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !227
  %216 = getelementptr inbounds %struct.infomap, %struct.infomap* %215, i32 1, !dbg !227
  store %struct.infomap* %216, %struct.infomap** %13, align 8, !dbg !227
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %76
  %217 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !229
  %218 = getelementptr inbounds %struct.infomap, %struct.infomap* %217, i32 0, i32 1, !dbg !231
  %219 = load i8*, i8** %218, align 8, !dbg !231
  %220 = icmp ne i8* %219, null, !dbg !229
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %97
  %221 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !233
  %222 = getelementptr inbounds %struct.infomap, %struct.infomap* %221, i32 0, i32 1, !dbg !234
  %223 = load i8*, i8** %222, align 8, !dbg !234
  store i8* %223, i8** %12, align 8, !dbg !235
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %117
  %224 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.25, i64 0, i64 0)) #10, !dbg !237
  %225 = call i32 (i8*, ...) @printf(i8* %224, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.26, i64 0, i64 0)), !dbg !238
  call void @llvm.dbg.declare(metadata !4, metadata !284, metadata !DIExpression()), !dbg !240
  %226 = call i8* @setlocale(i32 5, i8* null) #10, !dbg !241
  store i8* %226, i8** %14, align 8, !dbg !240
  %227 = load i8*, i8** %14, align 8, !dbg !242
  %228 = icmp ne i8* %227, null, !dbg !242
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %139
  %229 = load i8*, i8** %14, align 8, !dbg !245
  %230 = call i32 @strncmp(i8* %229, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.27, i64 0, i64 0), i64 3) #13, !dbg !245
  %231 = icmp ne i32 %230, 0, !dbg !245
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %159
  %232 = call i8* @gettext(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.28, i64 0, i64 0)) #10, !dbg !247
  %233 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !247
  %234 = call i32 @fputs_unlocked(i8* %232, %struct._IO_FILE* %233), !dbg !247
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %179
  %235 = call i8* @gettext(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.29, i64 0, i64 0)) #10, !dbg !250
  %236 = load i8*, i8** %10, align 8, !dbg !251
  %237 = call i32 (i8*, ...) @printf(i8* %235, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.26, i64 0, i64 0), i8* %236), !dbg !252
  %238 = call i8* @gettext(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.30, i64 0, i64 0)) #10, !dbg !253
  %239 = load i8*, i8** %12, align 8, !dbg !254
  %240 = load i8*, i8** %12, align 8, !dbg !255
  %241 = load i8*, i8** %10, align 8, !dbg !256
  %242 = icmp eq i8* %240, %241, !dbg !257
  %243 = zext i1 %242 to i64, !dbg !255
  %244 = select i1 %242, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.31, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0), !dbg !255
  %245 = call i32 (i8*, ...) @printf(i8* %238, i8* %239, i8* %244), !dbg !258
  br label %originalBB30
}

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

; Function Attrs: nounwind readonly
declare dso_local i32 @strcmp(i8*, i8*) #7

; Function Attrs: nounwind
declare dso_local i8* @setlocale(i32, i8*) #2

; Function Attrs: nounwind readonly
declare dso_local i32 @strncmp(i8*, i8*, i64) #7

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32, i8**) #4 !dbg !298 {
  %3 = load i32, i32* @x.3
  %4 = load i32, i32* @y.4
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  store i8** %1, i8*** @inVal1
  store i32 %0, i32* @inVal0
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i8**, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8, align 1
  %16 = alloca i32, align 4
  %17 = alloca %struct.file_name*, align 8
  store i32 0, i32* %11, align 4
  store i32 %0, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !302, metadata !DIExpression()), !dbg !303
  store i8** %1, i8*** %13, align 8
  call void @llvm.dbg.declare(metadata i8*** %13, metadata !304, metadata !DIExpression()), !dbg !305
  call void @llvm.dbg.declare(metadata i8** %14, metadata !306, metadata !DIExpression()), !dbg !307
  call void @llvm.dbg.declare(metadata i8* %15, metadata !308, metadata !DIExpression()), !dbg !309
  %18 = call i8* @getenv(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i64 0, i64 0)) #10, !dbg !310
  %19 = icmp ne i8* %18, null, !dbg !311
  %20 = zext i1 %19 to i8, !dbg !309
  store i8 %20, i8* %15, align 1, !dbg !309
  %21 = load i8**, i8*** %13, align 8, !dbg !312
  %22 = getelementptr inbounds i8*, i8** %21, i64 0, !dbg !312
  %23 = load i8*, i8** %22, align 8, !dbg !312
  call void @set_program_name(i8* %23), !dbg !313
  %24 = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0)) #10, !dbg !314
  %25 = call i8* @bindtextdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.12, i64 0, i64 0)) #10, !dbg !315
  %26 = call i8* @textdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0)) #10, !dbg !316
  %27 = call i32 @atexit(void ()* @close_stdout) #10, !dbg !317
  %28 = load i32, i32* @x.3
  %29 = load i32, i32* @y.4
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %36, !dbg !318

36:                                               ; preds = %originalBBpart263, %originalBBpart2
  call void @llvm.dbg.declare(metadata i32* %16, metadata !319, metadata !DIExpression()), !dbg !321
  %37 = load i32, i32* @x.3
  %38 = load i32, i32* @y.4
  %39 = sub i32 %37, 1
  %40 = mul i32 %37, %39
  %41 = urem i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %38, 10
  %44 = or i1 %42, %43
  br i1 %44, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %36, %originalBB1alteredBB
  %45 = load i32, i32* %12, align 4, !dbg !322
  %46 = load i8**, i8*** %13, align 8, !dbg !323
  %47 = call i32 @getopt_long(i32 %45, i8** %46, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i64 0, i64 0), %struct.option* getelementptr inbounds ([5 x %struct.option], [5 x %struct.option]* @longopts, i64 0, i64 0), i32* null) #10, !dbg !324
  store i32 %47, i32* %16, align 4, !dbg !321
  %48 = load i32, i32* %16, align 4, !dbg !325
  %49 = load i32, i32* @x.3
  %50 = load i32, i32* @y.4
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %57, !dbg !327

57:                                               ; preds = %originalBBpart24
  %58 = load i32, i32* @x.3
  %59 = load i32, i32* @y.4
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %57, %originalBB6alteredBB
  %collatzVar = alloca i32
  %66 = load i32, i32* @x.3
  %67 = load i32, i32* @y.4
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %74

74:                                               ; preds = %originalBBpart28
  %75 = load i32, i32* @inVal0
  %76 = icmp sgt i32 %75, 1
  br i1 %76, label %78, label %77

77:                                               ; preds = %74
  store i32 19, i32* %collatzVar
  br label %78

78:                                               ; preds = %77, %74
  %79 = load i8**, i8*** @inVal1
  %80 = getelementptr inbounds i8*, i8** %79, i64 1
  %81 = load i8*, i8** %80
  %controle = call i32 @controle(i8* %81, i32 -1)
  store i32 %controle, i32* %collatzVar
  br label %82

82:                                               ; preds = %164, %originalBBpart243, %78
  %83 = load i32, i32* @x.3
  %84 = load i32, i32* @y.4
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %82, %originalBB10alteredBB
  %91 = load i32, i32* %collatzVar
  %92 = icmp sgt i32 %91, 1
  %93 = load i32, i32* @x.3
  %94 = load i32, i32* @y.4
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %92, label %101, label %185

101:                                              ; preds = %originalBBpart212
  %102 = load i32, i32* @x.3
  %103 = load i32, i32* @y.4
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %101, %originalBB14alteredBB
  %110 = load i32, i32* %collatzVar
  %111 = srem i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = load i32, i32* @x.3
  %114 = load i32, i32* @y.4
  %115 = sub i32 %113, 1
  %116 = mul i32 %113, %115
  %117 = urem i32 %116, 2
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %118, %119
  br i1 %120, label %originalBBpart220, label %originalBB14alteredBB

originalBBpart220:                                ; preds = %originalBB14
  br i1 %112, label %121, label %124

121:                                              ; preds = %originalBBpart220
  %122 = load i32, i32* %collatzVar
  %123 = sdiv i32 %122, 2
  store i32 %123, i32* %collatzVar
  br label %144

124:                                              ; preds = %originalBBpart220
  %125 = load i32, i32* @x.3
  %126 = load i32, i32* @y.4
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %124, %originalBB22alteredBB
  %133 = load i32, i32* %collatzVar
  %134 = mul i32 %133, 3
  %135 = add i32 %134, 1
  store i32 %135, i32* %collatzVar
  %136 = load i32, i32* @x.3
  %137 = load i32, i32* @y.4
  %138 = sub i32 %136, 1
  %139 = mul i32 %136, %138
  %140 = urem i32 %139, 2
  %141 = icmp eq i32 %140, 0
  %142 = icmp slt i32 %137, 10
  %143 = or i1 %141, %142
  br i1 %143, label %originalBBpart234, label %originalBB22alteredBB

originalBBpart234:                                ; preds = %originalBB22
  br label %144

144:                                              ; preds = %originalBBpart234, %121
  %145 = load i32, i32* @x.3
  %146 = load i32, i32* @y.4
  %147 = sub i32 %145, 1
  %148 = mul i32 %145, %147
  %149 = urem i32 %148, 2
  %150 = icmp eq i32 %149, 0
  %151 = icmp slt i32 %146, 10
  %152 = or i1 %150, %151
  br i1 %152, label %originalBB36, label %originalBB36alteredBB

originalBB36:                                     ; preds = %144, %originalBB36alteredBB
  %153 = load i32, i32* %collatzVar
  %154 = sub i32 %48, %153
  %155 = icmp sgt i32 %154, -3
  %156 = load i32, i32* @x.3
  %157 = load i32, i32* @y.4
  %158 = sub i32 %156, 1
  %159 = mul i32 %156, %158
  %160 = urem i32 %159, 2
  %161 = icmp eq i32 %160, 0
  %162 = icmp slt i32 %157, 10
  %163 = or i1 %161, %162
  br i1 %163, label %originalBBpart243, label %originalBB36alteredBB

originalBBpart243:                                ; preds = %originalBB36
  br i1 %155, label %164, label %82

164:                                              ; preds = %originalBBpart243
  %165 = load i32, i32* %collatzVar
  %166 = add i32 %48, %165
  %167 = icmp slt i32 %166, 1
  br i1 %167, label %168, label %82

168:                                              ; preds = %164
  %169 = load i32, i32* @x.3
  %170 = load i32, i32* @y.4
  %171 = sub i32 %169, 1
  %172 = mul i32 %169, %171
  %173 = urem i32 %172, 2
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %174, %175
  br i1 %176, label %originalBB45, label %originalBB45alteredBB

originalBB45:                                     ; preds = %168, %originalBB45alteredBB
  %177 = load i32, i32* @x.3
  %178 = load i32, i32* @y.4
  %179 = sub i32 %177, 1
  %180 = mul i32 %177, %179
  %181 = urem i32 %180, 2
  %182 = icmp eq i32 %181, 0
  %183 = icmp slt i32 %178, 10
  %184 = or i1 %182, %183
  br i1 %184, label %originalBBpart247, label %originalBB45alteredBB

originalBBpart247:                                ; preds = %originalBB45
  br label %259, !dbg !328

185:                                              ; preds = %originalBBpart212
  %186 = load i32, i32* %16, align 4, !dbg !329
  switch i32 %186, label %225 [
    i32 76, label %187
    i32 80, label %188
    i32 -130, label %205
    i32 -131, label %206
  ], !dbg !330

187:                                              ; preds = %185
  store i8 1, i8* %15, align 1, !dbg !331
  br label %242, !dbg !333

188:                                              ; preds = %185
  %189 = load i32, i32* @x.3
  %190 = load i32, i32* @y.4
  %191 = sub i32 %189, 1
  %192 = mul i32 %189, %191
  %193 = urem i32 %192, 2
  %194 = icmp eq i32 %193, 0
  %195 = icmp slt i32 %190, 10
  %196 = or i1 %194, %195
  br i1 %196, label %originalBB49, label %originalBB49alteredBB

originalBB49:                                     ; preds = %188, %originalBB49alteredBB
  store i8 0, i8* %15, align 1, !dbg !334
  %197 = load i32, i32* @x.3
  %198 = load i32, i32* @y.4
  %199 = sub i32 %197, 1
  %200 = mul i32 %197, %199
  %201 = urem i32 %200, 2
  %202 = icmp eq i32 %201, 0
  %203 = icmp slt i32 %198, 10
  %204 = or i1 %202, %203
  br i1 %204, label %originalBBpart251, label %originalBB49alteredBB

originalBBpart251:                                ; preds = %originalBB49
  br label %242, !dbg !335

205:                                              ; preds = %185
  call void @usage(i32 0) #14, !dbg !336
  unreachable, !dbg !336

206:                                              ; preds = %185
  %207 = load i32, i32* @x.3
  %208 = load i32, i32* @y.4
  %209 = sub i32 %207, 1
  %210 = mul i32 %207, %209
  %211 = urem i32 %210, 2
  %212 = icmp eq i32 %211, 0
  %213 = icmp slt i32 %208, 10
  %214 = or i1 %212, %213
  br i1 %214, label %originalBB53, label %originalBB53alteredBB

originalBB53:                                     ; preds = %206, %originalBB53alteredBB
  %215 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !337
  %216 = load i8*, i8** @Version, align 8, !dbg !337
  call void (%struct._IO_FILE*, i8*, i8*, i8*, ...) @version_etc(%struct._IO_FILE* %215, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.14, i64 0, i64 0), i8* %216, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.15, i64 0, i64 0), i8* null), !dbg !337
  call void @exit(i32 0) #12, !dbg !337
  %217 = load i32, i32* @x.3
  %218 = load i32, i32* @y.4
  %219 = sub i32 %217, 1
  %220 = mul i32 %217, %219
  %221 = urem i32 %220, 2
  %222 = icmp eq i32 %221, 0
  %223 = icmp slt i32 %218, 10
  %224 = or i1 %222, %223
  br i1 %224, label %originalBBpart255, label %originalBB53alteredBB

originalBBpart255:                                ; preds = %originalBB53
  unreachable, !dbg !337

225:                                              ; preds = %185
  %226 = load i32, i32* @x.3
  %227 = load i32, i32* @y.4
  %228 = sub i32 %226, 1
  %229 = mul i32 %226, %228
  %230 = urem i32 %229, 2
  %231 = icmp eq i32 %230, 0
  %232 = icmp slt i32 %227, 10
  %233 = or i1 %231, %232
  br i1 %233, label %originalBB57, label %originalBB57alteredBB

originalBB57:                                     ; preds = %225, %originalBB57alteredBB
  call void @usage(i32 1) #14, !dbg !338
  %234 = load i32, i32* @x.3
  %235 = load i32, i32* @y.4
  %236 = sub i32 %234, 1
  %237 = mul i32 %234, %236
  %238 = urem i32 %237, 2
  %239 = icmp eq i32 %238, 0
  %240 = icmp slt i32 %235, 10
  %241 = or i1 %239, %240
  br i1 %241, label %originalBBpart259, label %originalBB57alteredBB

originalBBpart259:                                ; preds = %originalBB57
  unreachable, !dbg !338

242:                                              ; preds = %originalBBpart251, %187
  %243 = load i32, i32* @x.3
  %244 = load i32, i32* @y.4
  %245 = sub i32 %243, 1
  %246 = mul i32 %243, %245
  %247 = urem i32 %246, 2
  %248 = icmp eq i32 %247, 0
  %249 = icmp slt i32 %244, 10
  %250 = or i1 %248, %249
  br i1 %250, label %originalBB61, label %originalBB61alteredBB

originalBB61:                                     ; preds = %242, %originalBB61alteredBB
  %251 = load i32, i32* @x.3
  %252 = load i32, i32* @y.4
  %253 = sub i32 %251, 1
  %254 = mul i32 %251, %253
  %255 = urem i32 %254, 2
  %256 = icmp eq i32 %255, 0
  %257 = icmp slt i32 %252, 10
  %258 = or i1 %256, %257
  br i1 %258, label %originalBBpart263, label %originalBB61alteredBB

originalBBpart263:                                ; preds = %originalBB61
  br label %36, !dbg !318, !llvm.loop !339

259:                                              ; preds = %originalBBpart247
  %260 = load i32, i32* @x.3
  %261 = load i32, i32* @y.4
  %262 = sub i32 %260, 1
  %263 = mul i32 %260, %262
  %264 = urem i32 %263, 2
  %265 = icmp eq i32 %264, 0
  %266 = icmp slt i32 %261, 10
  %267 = or i1 %265, %266
  br i1 %267, label %originalBB65, label %originalBB65alteredBB

originalBB65:                                     ; preds = %259, %originalBB65alteredBB
  %268 = load i32, i32* @optind, align 4, !dbg !341
  %269 = load i32, i32* %12, align 4, !dbg !343
  %270 = icmp slt i32 %268, %269, !dbg !344
  %271 = load i32, i32* @x.3
  %272 = load i32, i32* @y.4
  %273 = sub i32 %271, 1
  %274 = mul i32 %271, %273
  %275 = urem i32 %274, 2
  %276 = icmp eq i32 %275, 0
  %277 = icmp slt i32 %272, 10
  %278 = or i1 %276, %277
  br i1 %278, label %originalBBpart267, label %originalBB65alteredBB

originalBBpart267:                                ; preds = %originalBB65
  br i1 %270, label %279, label %297, !dbg !345

279:                                              ; preds = %originalBBpart267
  %280 = load i32, i32* @x.3
  %281 = load i32, i32* @y.4
  %282 = sub i32 %280, 1
  %283 = mul i32 %280, %282
  %284 = urem i32 %283, 2
  %285 = icmp eq i32 %284, 0
  %286 = icmp slt i32 %281, 10
  %287 = or i1 %285, %286
  br i1 %287, label %originalBB69, label %originalBB69alteredBB

originalBB69:                                     ; preds = %279, %originalBB69alteredBB
  %288 = call i8* @gettext(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.16, i64 0, i64 0)) #10, !dbg !346
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %288), !dbg !347
  %289 = load i32, i32* @x.3
  %290 = load i32, i32* @y.4
  %291 = sub i32 %289, 1
  %292 = mul i32 %289, %291
  %293 = urem i32 %292, 2
  %294 = icmp eq i32 %293, 0
  %295 = icmp slt i32 %290, 10
  %296 = or i1 %294, %295
  br i1 %296, label %originalBBpart271, label %originalBB69alteredBB

originalBBpart271:                                ; preds = %originalBB69
  br label %297, !dbg !347

297:                                              ; preds = %originalBBpart271, %originalBBpart267
  %298 = load i32, i32* @x.3
  %299 = load i32, i32* @y.4
  %300 = sub i32 %298, 1
  %301 = mul i32 %298, %300
  %302 = urem i32 %301, 2
  %303 = icmp eq i32 %302, 0
  %304 = icmp slt i32 %299, 10
  %305 = or i1 %303, %304
  br i1 %305, label %originalBB73, label %originalBB73alteredBB

originalBB73:                                     ; preds = %297, %originalBB73alteredBB
  %306 = load i8, i8* %15, align 1, !dbg !348
  %307 = trunc i8 %306 to i1, !dbg !348
  %308 = load i32, i32* @x.3
  %309 = load i32, i32* @y.4
  %310 = sub i32 %308, 1
  %311 = mul i32 %308, %310
  %312 = urem i32 %311, 2
  %313 = icmp eq i32 %312, 0
  %314 = icmp slt i32 %309, 10
  %315 = or i1 %313, %314
  br i1 %315, label %originalBBpart275, label %originalBB73alteredBB

originalBBpart275:                                ; preds = %originalBB73
  br i1 %307, label %316, label %372, !dbg !350

316:                                              ; preds = %originalBBpart275
  %317 = load i32, i32* @x.3
  %318 = load i32, i32* @y.4
  %319 = sub i32 %317, 1
  %320 = mul i32 %317, %319
  %321 = urem i32 %320, 2
  %322 = icmp eq i32 %321, 0
  %323 = icmp slt i32 %318, 10
  %324 = or i1 %322, %323
  br i1 %324, label %originalBB77, label %originalBB77alteredBB

originalBB77:                                     ; preds = %316, %originalBB77alteredBB
  %325 = call i8* @logical_getcwd(), !dbg !351
  store i8* %325, i8** %14, align 8, !dbg !353
  %326 = load i8*, i8** %14, align 8, !dbg !354
  %327 = icmp ne i8* %326, null, !dbg !354
  %328 = load i32, i32* @x.3
  %329 = load i32, i32* @y.4
  %330 = sub i32 %328, 1
  %331 = mul i32 %328, %330
  %332 = urem i32 %331, 2
  %333 = icmp eq i32 %332, 0
  %334 = icmp slt i32 %329, 10
  %335 = or i1 %333, %334
  br i1 %335, label %originalBBpart279, label %originalBB77alteredBB

originalBBpart279:                                ; preds = %originalBB77
  br i1 %327, label %336, label %355, !dbg !356

336:                                              ; preds = %originalBBpart279
  %337 = load i32, i32* @x.3
  %338 = load i32, i32* @y.4
  %339 = sub i32 %337, 1
  %340 = mul i32 %337, %339
  %341 = urem i32 %340, 2
  %342 = icmp eq i32 %341, 0
  %343 = icmp slt i32 %338, 10
  %344 = or i1 %342, %343
  br i1 %344, label %originalBB81, label %originalBB81alteredBB

originalBB81:                                     ; preds = %336, %originalBB81alteredBB
  %345 = load i8*, i8** %14, align 8, !dbg !357
  %346 = call i32 @puts(i8* %345), !dbg !359
  store i32 0, i32* %11, align 4, !dbg !360
  %347 = load i32, i32* @x.3
  %348 = load i32, i32* @y.4
  %349 = sub i32 %347, 1
  %350 = mul i32 %347, %349
  %351 = urem i32 %350, 2
  %352 = icmp eq i32 %351, 0
  %353 = icmp slt i32 %348, 10
  %354 = or i1 %352, %353
  br i1 %354, label %originalBBpart283, label %originalBB81alteredBB

originalBBpart283:                                ; preds = %originalBB81
  br label %421, !dbg !360

355:                                              ; preds = %originalBBpart279
  %356 = load i32, i32* @x.3
  %357 = load i32, i32* @y.4
  %358 = sub i32 %356, 1
  %359 = mul i32 %356, %358
  %360 = urem i32 %359, 2
  %361 = icmp eq i32 %360, 0
  %362 = icmp slt i32 %357, 10
  %363 = or i1 %361, %362
  br i1 %363, label %originalBB85, label %originalBB85alteredBB

originalBB85:                                     ; preds = %355, %originalBB85alteredBB
  %364 = load i32, i32* @x.3
  %365 = load i32, i32* @y.4
  %366 = sub i32 %364, 1
  %367 = mul i32 %364, %366
  %368 = urem i32 %367, 2
  %369 = icmp eq i32 %368, 0
  %370 = icmp slt i32 %365, 10
  %371 = or i1 %369, %370
  br i1 %371, label %originalBBpart287, label %originalBB85alteredBB

originalBBpart287:                                ; preds = %originalBB85
  br label %372, !dbg !361

372:                                              ; preds = %originalBBpart287, %originalBBpart275
  %373 = call i8* @xgetcwd(), !dbg !362
  store i8* %373, i8** %14, align 8, !dbg !363
  %374 = load i8*, i8** %14, align 8, !dbg !364
  %375 = icmp ne i8* %374, null, !dbg !366
  br i1 %375, label %376, label %396, !dbg !367

376:                                              ; preds = %372
  %377 = load i32, i32* @x.3
  %378 = load i32, i32* @y.4
  %379 = sub i32 %377, 1
  %380 = mul i32 %377, %379
  %381 = urem i32 %380, 2
  %382 = icmp eq i32 %381, 0
  %383 = icmp slt i32 %378, 10
  %384 = or i1 %382, %383
  br i1 %384, label %originalBB89, label %originalBB89alteredBB

originalBB89:                                     ; preds = %376, %originalBB89alteredBB
  %385 = load i8*, i8** %14, align 8, !dbg !368
  %386 = call i32 @puts(i8* %385), !dbg !370
  %387 = load i8*, i8** %14, align 8, !dbg !371
  call void @free(i8* %387) #10, !dbg !372
  %388 = load i32, i32* @x.3
  %389 = load i32, i32* @y.4
  %390 = sub i32 %388, 1
  %391 = mul i32 %388, %390
  %392 = urem i32 %391, 2
  %393 = icmp eq i32 %392, 0
  %394 = icmp slt i32 %389, 10
  %395 = or i1 %393, %394
  br i1 %395, label %originalBBpart291, label %originalBB89alteredBB

originalBBpart291:                                ; preds = %originalBB89
  br label %420, !dbg !373

396:                                              ; preds = %372
  call void @llvm.dbg.declare(metadata %struct.file_name** %17, metadata !374, metadata !DIExpression()), !dbg !382
  %397 = load i32, i32* @x.3
  %398 = load i32, i32* @y.4
  %399 = sub i32 %397, 1
  %400 = mul i32 %397, %399
  %401 = urem i32 %400, 2
  %402 = icmp eq i32 %401, 0
  %403 = icmp slt i32 %398, 10
  %404 = or i1 %402, %403
  br i1 %404, label %originalBB93, label %originalBB93alteredBB

originalBB93:                                     ; preds = %396, %originalBB93alteredBB
  %405 = call %struct.file_name* @file_name_init(), !dbg !383
  store %struct.file_name* %405, %struct.file_name** %17, align 8, !dbg !382
  %406 = load %struct.file_name*, %struct.file_name** %17, align 8, !dbg !384
  call void @robust_getcwd(%struct.file_name* %406), !dbg !385
  %407 = load %struct.file_name*, %struct.file_name** %17, align 8, !dbg !386
  %408 = getelementptr inbounds %struct.file_name, %struct.file_name* %407, i32 0, i32 2, !dbg !387
  %409 = load i8*, i8** %408, align 8, !dbg !387
  %410 = call i32 @puts(i8* %409), !dbg !388
  %411 = load %struct.file_name*, %struct.file_name** %17, align 8, !dbg !389
  call void @file_name_free(%struct.file_name* %411), !dbg !390
  %412 = load i32, i32* @x.3
  %413 = load i32, i32* @y.4
  %414 = sub i32 %412, 1
  %415 = mul i32 %412, %414
  %416 = urem i32 %415, 2
  %417 = icmp eq i32 %416, 0
  %418 = icmp slt i32 %413, 10
  %419 = or i1 %417, %418
  br i1 %419, label %originalBBpart295, label %originalBB93alteredBB

originalBBpart295:                                ; preds = %originalBB93
  br label %420

420:                                              ; preds = %originalBBpart295, %originalBBpart291
  store i32 0, i32* %11, align 4, !dbg !391
  br label %421, !dbg !391

421:                                              ; preds = %420, %originalBBpart283
  %422 = load i32, i32* @x.3
  %423 = load i32, i32* @y.4
  %424 = sub i32 %422, 1
  %425 = mul i32 %422, %424
  %426 = urem i32 %425, 2
  %427 = icmp eq i32 %426, 0
  %428 = icmp slt i32 %423, 10
  %429 = or i1 %427, %428
  br i1 %429, label %originalBB97, label %originalBB97alteredBB

originalBB97:                                     ; preds = %421, %originalBB97alteredBB
  %430 = load i32, i32* %11, align 4, !dbg !392
  %431 = load i32, i32* @x.3
  %432 = load i32, i32* @y.4
  %433 = sub i32 %431, 1
  %434 = mul i32 %431, %433
  %435 = urem i32 %434, 2
  %436 = icmp eq i32 %435, 0
  %437 = icmp slt i32 %432, 10
  %438 = or i1 %436, %437
  br i1 %438, label %originalBBpart299, label %originalBB97alteredBB

originalBBpart299:                                ; preds = %originalBB97
  ret i32 %430, !dbg !392

originalBBalteredBB:                              ; preds = %originalBB, %2
  store i8** %1, i8*** @inVal1
  store i32 %0, i32* @inVal0
  %439 = alloca i32, align 4
  %440 = alloca i32, align 4
  %441 = alloca i8**, align 8
  %442 = alloca i8*, align 8
  %443 = alloca i8, align 1
  %444 = alloca i32, align 4
  %445 = alloca %struct.file_name*, align 8
  store i32 0, i32* %439, align 4
  store i32 %0, i32* %440, align 4
  call void @llvm.dbg.declare(metadata i32* %440, metadata !393, metadata !DIExpression()), !dbg !303
  store i8** %1, i8*** %441, align 8
  call void @llvm.dbg.declare(metadata i8*** %441, metadata !407, metadata !DIExpression()), !dbg !305
  call void @llvm.dbg.declare(metadata i8** %442, metadata !408, metadata !DIExpression()), !dbg !307
  call void @llvm.dbg.declare(metadata i8* %443, metadata !409, metadata !DIExpression()), !dbg !309
  %446 = call i8* @getenv(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i64 0, i64 0)) #10, !dbg !310
  %447 = icmp ne i8* %446, null, !dbg !311
  %448 = zext i1 %447 to i8, !dbg !309
  store i8 %448, i8* %443, align 1, !dbg !309
  %449 = load i8**, i8*** %441, align 8, !dbg !312
  %450 = getelementptr inbounds i8*, i8** %449, i64 0, !dbg !312
  %451 = load i8*, i8** %450, align 8, !dbg !312
  call void @set_program_name(i8* %451), !dbg !313
  %452 = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0)) #10, !dbg !314
  %453 = call i8* @bindtextdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.12, i64 0, i64 0)) #10, !dbg !315
  %454 = call i8* @textdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0)) #10, !dbg !316
  %455 = call i32 @atexit(void ()* @close_stdout) #10, !dbg !317
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %36
  %456 = load i32, i32* %12, align 4, !dbg !322
  %457 = load i8**, i8*** %13, align 8, !dbg !323
  %458 = call i32 @getopt_long(i32 %456, i8** %457, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i64 0, i64 0), %struct.option* getelementptr inbounds ([5 x %struct.option], [5 x %struct.option]* @longopts, i64 0, i64 0), i32* null) #10, !dbg !324
  store i32 %458, i32* %16, align 4, !dbg !321
  %459 = load i32, i32* %16, align 4, !dbg !325
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %57
  %collatzVaralteredBB = alloca i32
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %82
  %460 = load i32, i32* %collatzVar
  %461 = icmp sgt i32 %460, 1
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %101
  %462 = load i32, i32* %collatzVar
  %_ = sub i32 %462, 2
  %gen = mul i32 %_, 2
  %_15 = shl i32 %462, 2
  %_16 = sub i32 %462, 2
  %gen17 = mul i32 %_16, 2
  %_18 = shl i32 %462, 2
  %463 = srem i32 %462, 2
  %464 = icmp eq i32 %463, 0
  br label %originalBB14

originalBB22alteredBB:                            ; preds = %originalBB22, %124
  %465 = load i32, i32* %collatzVar
  %_23 = shl i32 %465, 3
  %_24 = sub i32 0, %465
  %gen25 = add i32 %_24, 3
  %466 = mul i32 %465, 3
  %_26 = sub i32 %466, 1
  %gen27 = mul i32 %_26, 1
  %_28 = shl i32 %466, 1
  %_29 = sub i32 0, %466
  %gen30 = add i32 %_29, 1
  %_31 = sub i32 0, %466
  %gen32 = add i32 %_31, 1
  %467 = add i32 %466, 1
  store i32 %467, i32* %collatzVar
  br label %originalBB22

originalBB36alteredBB:                            ; preds = %originalBB36, %144
  %468 = load i32, i32* %collatzVar
  %_37 = shl i32 %48, %468
  %_38 = sub i32 0, %48
  %gen39 = add i32 %_38, %468
  %_40 = sub i32 %48, %468
  %gen41 = mul i32 %_40, %468
  %469 = sub i32 %48, %468
  %470 = icmp sgt i32 %469, -3
  br label %originalBB36

originalBB45alteredBB:                            ; preds = %originalBB45, %168
  br label %originalBB45

originalBB49alteredBB:                            ; preds = %originalBB49, %188
  store i8 0, i8* %15, align 1, !dbg !334
  br label %originalBB49

originalBB53alteredBB:                            ; preds = %originalBB53, %206
  %471 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !337
  %472 = load i8*, i8** @Version, align 8, !dbg !337
  call void (%struct._IO_FILE*, i8*, i8*, i8*, ...) @version_etc(%struct._IO_FILE* %471, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.14, i64 0, i64 0), i8* %472, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.15, i64 0, i64 0), i8* null), !dbg !337
  call void @exit(i32 0) #12, !dbg !337
  br label %originalBB53

originalBB57alteredBB:                            ; preds = %originalBB57, %225
  call void @usage(i32 1) #14, !dbg !338
  br label %originalBB57

originalBB61alteredBB:                            ; preds = %originalBB61, %242
  br label %originalBB61

originalBB65alteredBB:                            ; preds = %originalBB65, %259
  %473 = load i32, i32* @optind, align 4, !dbg !341
  %474 = load i32, i32* %12, align 4, !dbg !343
  %475 = icmp slt i32 %473, %474, !dbg !344
  br label %originalBB65

originalBB69alteredBB:                            ; preds = %originalBB69, %279
  %476 = call i8* @gettext(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.16, i64 0, i64 0)) #10, !dbg !346
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %476), !dbg !347
  br label %originalBB69

originalBB73alteredBB:                            ; preds = %originalBB73, %297
  %477 = load i8, i8* %15, align 1, !dbg !348
  %478 = trunc i8 %477 to i1, !dbg !348
  br label %originalBB73

originalBB77alteredBB:                            ; preds = %originalBB77, %316
  %479 = call i8* @logical_getcwd(), !dbg !351
  store i8* %479, i8** %14, align 8, !dbg !353
  %480 = load i8*, i8** %14, align 8, !dbg !354
  %481 = icmp ne i8* %480, null, !dbg !354
  br label %originalBB77

originalBB81alteredBB:                            ; preds = %originalBB81, %336
  %482 = load i8*, i8** %14, align 8, !dbg !357
  %483 = call i32 @puts(i8* %482), !dbg !359
  store i32 0, i32* %11, align 4, !dbg !360
  br label %originalBB81

originalBB85alteredBB:                            ; preds = %originalBB85, %355
  br label %originalBB85

originalBB89alteredBB:                            ; preds = %originalBB89, %376
  %484 = load i8*, i8** %14, align 8, !dbg !368
  %485 = call i32 @puts(i8* %484), !dbg !370
  %486 = load i8*, i8** %14, align 8, !dbg !371
  call void @free(i8* %486) #10, !dbg !372
  br label %originalBB89

originalBB93alteredBB:                            ; preds = %originalBB93, %396
  %487 = call %struct.file_name* @file_name_init(), !dbg !383
  store %struct.file_name* %487, %struct.file_name** %17, align 8, !dbg !382
  %488 = load %struct.file_name*, %struct.file_name** %17, align 8, !dbg !384
  call void @robust_getcwd(%struct.file_name* %488), !dbg !385
  %489 = load %struct.file_name*, %struct.file_name** %17, align 8, !dbg !386
  %490 = getelementptr inbounds %struct.file_name, %struct.file_name* %489, i32 0, i32 2, !dbg !387
  %491 = load i8*, i8** %490, align 8, !dbg !387
  %492 = call i32 @puts(i8* %491), !dbg !388
  %493 = load %struct.file_name*, %struct.file_name** %17, align 8, !dbg !389
  call void @file_name_free(%struct.file_name* %493), !dbg !390
  br label %originalBB93

originalBB97alteredBB:                            ; preds = %originalBB97, %421
  %494 = load i32, i32* %11, align 4, !dbg !392
  br label %originalBB97
}

; Function Attrs: nounwind
declare dso_local i8* @getenv(i8*) #2

; Function Attrs: nounwind
declare dso_local i8* @bindtextdomain(i8*, i8*) #2

; Function Attrs: nounwind
declare dso_local i8* @textdomain(i8*) #2

; Function Attrs: nounwind
declare dso_local i32 @atexit(void ()*) #2

; Function Attrs: nounwind
declare dso_local i32 @getopt_long(i32, i8**, i8*, %struct.option*, i32*) #2

declare dso_local void @error(i32, i32, i8*, ...) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @logical_getcwd() #4 !dbg !410 {
  %1 = alloca i8*, align 8
  %2 = alloca %struct.stat, align 8
  %3 = alloca %struct.stat, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata %struct.stat* %2, metadata !413, metadata !DIExpression()), !dbg !453
  call void @llvm.dbg.declare(metadata %struct.stat* %3, metadata !454, metadata !DIExpression()), !dbg !455
  call void @llvm.dbg.declare(metadata i8** %4, metadata !456, metadata !DIExpression()), !dbg !457
  %6 = call i8* @getenv(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.36, i64 0, i64 0)) #10, !dbg !458
  store i8* %6, i8** %4, align 8, !dbg !457
  call void @llvm.dbg.declare(metadata i8** %5, metadata !459, metadata !DIExpression()), !dbg !460
  %7 = load i8*, i8** %4, align 8, !dbg !461
  %8 = icmp ne i8* %7, null, !dbg !461
  br i1 %8, label %9, label %31, !dbg !463

9:                                                ; preds = %0
  %10 = load i32, i32* @x.5
  %11 = load i32, i32* @y.6
  %12 = sub i32 %10, 1
  %13 = mul i32 %10, %12
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  %16 = icmp slt i32 %11, 10
  %17 = or i1 %15, %16
  br i1 %17, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %9, %originalBBalteredBB
  %18 = load i8*, i8** %4, align 8, !dbg !464
  %19 = getelementptr inbounds i8, i8* %18, i64 0, !dbg !464
  %20 = load i8, i8* %19, align 1, !dbg !464
  %21 = sext i8 %20 to i32, !dbg !464
  %22 = icmp ne i32 %21, 47, !dbg !465
  %23 = load i32, i32* @x.5
  %24 = load i32, i32* @y.6
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %31, label %32, !dbg !466

31:                                               ; preds = %originalBBpart2, %0
  store i8* null, i8** %1, align 8, !dbg !467
  br label %600, !dbg !467

32:                                               ; preds = %originalBBpart2
  %33 = load i8*, i8** %4, align 8, !dbg !468
  store i8* %33, i8** %5, align 8, !dbg !469
  br label %34, !dbg !470

34:                                               ; preds = %originalBBpart228, %32
  %35 = load i32, i32* @x.5
  %36 = load i32, i32* @y.6
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %34, %originalBB1alteredBB
  %43 = load i8*, i8** %5, align 8, !dbg !471
  %44 = call i8* @strstr(i8* %43, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.37, i64 0, i64 0)) #13, !dbg !472
  store i8* %44, i8** %5, align 8, !dbg !473
  %45 = icmp ne i8* %44, null, !dbg !470
  %46 = load i32, i32* @x.5
  %47 = load i32, i32* @y.6
  %48 = sub i32 %46, 1
  %49 = mul i32 %46, %48
  %50 = urem i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %51, %52
  br i1 %53, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %45, label %54, label %182, !dbg !470

54:                                               ; preds = %originalBBpart24
  %55 = load i32, i32* @x.5
  %56 = load i32, i32* @y.6
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %54, %originalBB6alteredBB
  %63 = load i8*, i8** %5, align 8, !dbg !474
  %64 = getelementptr inbounds i8, i8* %63, i64 2, !dbg !474
  %65 = load i8, i8* %64, align 1, !dbg !474
  %66 = icmp ne i8 %65, 0, !dbg !474
  %67 = load i32, i32* @x.5
  %68 = load i32, i32* @y.6
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %66, label %75, label %146, !dbg !477

75:                                               ; preds = %originalBBpart28
  %76 = load i32, i32* @x.5
  %77 = load i32, i32* @y.6
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %75, %originalBB10alteredBB
  %84 = load i8*, i8** %5, align 8, !dbg !478
  %85 = getelementptr inbounds i8, i8* %84, i64 2, !dbg !478
  %86 = load i8, i8* %85, align 1, !dbg !478
  %87 = sext i8 %86 to i32, !dbg !478
  %88 = icmp eq i32 %87, 47, !dbg !479
  %89 = load i32, i32* @x.5
  %90 = load i32, i32* @y.6
  %91 = sub i32 %89, 1
  %92 = mul i32 %89, %91
  %93 = urem i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %94, %95
  br i1 %96, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %88, label %146, label %97, !dbg !480

97:                                               ; preds = %originalBBpart212
  %98 = load i32, i32* @x.5
  %99 = load i32, i32* @y.6
  %100 = sub i32 %98, 1
  %101 = mul i32 %98, %100
  %102 = urem i32 %101, 2
  %103 = icmp eq i32 %102, 0
  %104 = icmp slt i32 %99, 10
  %105 = or i1 %103, %104
  br i1 %105, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %97, %originalBB14alteredBB
  %106 = load i8*, i8** %5, align 8, !dbg !481
  %107 = getelementptr inbounds i8, i8* %106, i64 2, !dbg !481
  %108 = load i8, i8* %107, align 1, !dbg !481
  %109 = sext i8 %108 to i32, !dbg !481
  %110 = icmp eq i32 %109, 46, !dbg !482
  %111 = load i32, i32* @x.5
  %112 = load i32, i32* @y.6
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %110, label %119, label %163, !dbg !483

119:                                              ; preds = %originalBBpart216
  %120 = load i8*, i8** %5, align 8, !dbg !484
  %121 = getelementptr inbounds i8, i8* %120, i64 3, !dbg !484
  %122 = load i8, i8* %121, align 1, !dbg !484
  %123 = icmp ne i8 %122, 0, !dbg !484
  br i1 %123, label %124, label %146, !dbg !485

124:                                              ; preds = %119
  %125 = load i32, i32* @x.5
  %126 = load i32, i32* @y.6
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %124, %originalBB18alteredBB
  %133 = load i8*, i8** %5, align 8, !dbg !486
  %134 = getelementptr inbounds i8, i8* %133, i64 3, !dbg !486
  %135 = load i8, i8* %134, align 1, !dbg !486
  %136 = sext i8 %135 to i32, !dbg !486
  %137 = icmp eq i32 %136, 47, !dbg !487
  %138 = load i32, i32* @x.5
  %139 = load i32, i32* @y.6
  %140 = sub i32 %138, 1
  %141 = mul i32 %138, %140
  %142 = urem i32 %141, 2
  %143 = icmp eq i32 %142, 0
  %144 = icmp slt i32 %139, 10
  %145 = or i1 %143, %144
  br i1 %145, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %137, label %146, label %163, !dbg !488

146:                                              ; preds = %originalBBpart220, %119, %originalBBpart212, %originalBBpart28
  %147 = load i32, i32* @x.5
  %148 = load i32, i32* @y.6
  %149 = sub i32 %147, 1
  %150 = mul i32 %147, %149
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %152, %153
  br i1 %154, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %146, %originalBB22alteredBB
  store i8* null, i8** %1, align 8, !dbg !489
  %155 = load i32, i32* @x.5
  %156 = load i32, i32* @y.6
  %157 = sub i32 %155, 1
  %158 = mul i32 %155, %157
  %159 = urem i32 %158, 2
  %160 = icmp eq i32 %159, 0
  %161 = icmp slt i32 %156, 10
  %162 = or i1 %160, %161
  br i1 %162, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %600, !dbg !489

163:                                              ; preds = %originalBBpart220, %originalBBpart216
  %164 = load i32, i32* @x.5
  %165 = load i32, i32* @y.6
  %166 = sub i32 %164, 1
  %167 = mul i32 %164, %166
  %168 = urem i32 %167, 2
  %169 = icmp eq i32 %168, 0
  %170 = icmp slt i32 %165, 10
  %171 = or i1 %169, %170
  br i1 %171, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %163, %originalBB26alteredBB
  %172 = load i8*, i8** %5, align 8, !dbg !490
  %173 = getelementptr inbounds i8, i8* %172, i32 1, !dbg !490
  store i8* %173, i8** %5, align 8, !dbg !490
  %174 = load i32, i32* @x.5
  %175 = load i32, i32* @y.6
  %176 = sub i32 %174, 1
  %177 = mul i32 %174, %176
  %178 = urem i32 %177, 2
  %179 = icmp eq i32 %178, 0
  %180 = icmp slt i32 %175, 10
  %181 = or i1 %179, %180
  br i1 %181, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %34, !dbg !470, !llvm.loop !491

182:                                              ; preds = %originalBBpart24
  %183 = load i32, i32* @x.5
  %184 = load i32, i32* @y.6
  %185 = sub i32 %183, 1
  %186 = mul i32 %183, %185
  %187 = urem i32 %186, 2
  %188 = icmp eq i32 %187, 0
  %189 = icmp slt i32 %184, 10
  %190 = or i1 %188, %189
  br i1 %190, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %182, %originalBB30alteredBB
  %191 = load i8*, i8** %4, align 8, !dbg !493
  %192 = call i32 @stat(i8* %191, %struct.stat* %2) #10, !dbg !495
  %193 = load i32, i32* @x.5
  %194 = load i32, i32* @y.6
  %195 = sub i32 %193, 1
  %196 = mul i32 %193, %195
  %197 = urem i32 %196, 2
  %198 = icmp eq i32 %197, 0
  %199 = icmp slt i32 %194, 10
  %200 = or i1 %198, %199
  br i1 %200, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %201, !dbg !496

201:                                              ; preds = %originalBBpart232
  %202 = load i32, i32* @x.5
  %203 = load i32, i32* @y.6
  %204 = sub i32 %202, 1
  %205 = mul i32 %202, %204
  %206 = urem i32 %205, 2
  %207 = icmp eq i32 %206, 0
  %208 = icmp slt i32 %203, 10
  %209 = or i1 %207, %208
  br i1 %209, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %201, %originalBB34alteredBB
  %collatzVar1 = alloca i32
  %210 = load i32, i32* @x.5
  %211 = load i32, i32* @y.6
  %212 = sub i32 %210, 1
  %213 = mul i32 %210, %212
  %214 = urem i32 %213, 2
  %215 = icmp eq i32 %214, 0
  %216 = icmp slt i32 %211, 10
  %217 = or i1 %215, %216
  br i1 %217, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %218

218:                                              ; preds = %originalBBpart236
  %219 = load i32, i32* @x.5
  %220 = load i32, i32* @y.6
  %221 = sub i32 %219, 1
  %222 = mul i32 %219, %221
  %223 = urem i32 %222, 2
  %224 = icmp eq i32 %223, 0
  %225 = icmp slt i32 %220, 10
  %226 = or i1 %224, %225
  br i1 %226, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %218, %originalBB38alteredBB
  %227 = load i32, i32* @inVal0
  %228 = icmp sgt i32 %227, 1
  %229 = load i32, i32* @x.5
  %230 = load i32, i32* @y.6
  %231 = sub i32 %229, 1
  %232 = mul i32 %229, %231
  %233 = urem i32 %232, 2
  %234 = icmp eq i32 %233, 0
  %235 = icmp slt i32 %230, 10
  %236 = or i1 %234, %235
  br i1 %236, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br i1 %228, label %254, label %237

237:                                              ; preds = %originalBBpart240
  %238 = load i32, i32* @x.5
  %239 = load i32, i32* @y.6
  %240 = sub i32 %238, 1
  %241 = mul i32 %238, %240
  %242 = urem i32 %241, 2
  %243 = icmp eq i32 %242, 0
  %244 = icmp slt i32 %239, 10
  %245 = or i1 %243, %244
  br i1 %245, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %237, %originalBB42alteredBB
  store i32 54, i32* %collatzVar1
  %246 = load i32, i32* @x.5
  %247 = load i32, i32* @y.6
  %248 = sub i32 %246, 1
  %249 = mul i32 %246, %248
  %250 = urem i32 %249, 2
  %251 = icmp eq i32 %250, 0
  %252 = icmp slt i32 %247, 10
  %253 = or i1 %251, %252
  br i1 %253, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br label %254

254:                                              ; preds = %originalBBpart244, %originalBBpart240
  %255 = load i32, i32* @x.5
  %256 = load i32, i32* @y.6
  %257 = sub i32 %255, 1
  %258 = mul i32 %255, %257
  %259 = urem i32 %258, 2
  %260 = icmp eq i32 %259, 0
  %261 = icmp slt i32 %256, 10
  %262 = or i1 %260, %261
  br i1 %262, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %254, %originalBB46alteredBB
  %263 = load i8**, i8*** @inVal1
  %264 = getelementptr inbounds i8*, i8** %263, i64 1
  %265 = load i8*, i8** %264
  %controle2 = call i32 @controle(i8* %265, i32 0)
  store i32 %controle2, i32* %collatzVar1
  %266 = load i32, i32* @x.5
  %267 = load i32, i32* @y.6
  %268 = sub i32 %266, 1
  %269 = mul i32 %266, %268
  %270 = urem i32 %269, 2
  %271 = icmp eq i32 %270, 0
  %272 = icmp slt i32 %267, 10
  %273 = or i1 %271, %272
  br i1 %273, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br label %274

274:                                              ; preds = %originalBBpart269, %320, %originalBBpart248
  %275 = load i32, i32* %collatzVar1
  %276 = icmp sgt i32 %275, 1
  br i1 %276, label %277, label %583

277:                                              ; preds = %274
  %278 = load i32, i32* @x.5
  %279 = load i32, i32* @y.6
  %280 = sub i32 %278, 1
  %281 = mul i32 %278, %280
  %282 = urem i32 %281, 2
  %283 = icmp eq i32 %282, 0
  %284 = icmp slt i32 %279, 10
  %285 = or i1 %283, %284
  br i1 %285, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %277, %originalBB50alteredBB
  %286 = load i32, i32* %collatzVar1
  %287 = srem i32 %286, 2
  %288 = icmp eq i32 %287, 0
  %289 = load i32, i32* @x.5
  %290 = load i32, i32* @y.6
  %291 = sub i32 %289, 1
  %292 = mul i32 %289, %291
  %293 = urem i32 %292, 2
  %294 = icmp eq i32 %293, 0
  %295 = icmp slt i32 %290, 10
  %296 = or i1 %294, %295
  br i1 %296, label %originalBBpart256, label %originalBB50alteredBB

originalBBpart256:                                ; preds = %originalBB50
  br i1 %288, label %297, label %316

297:                                              ; preds = %originalBBpart256
  %298 = load i32, i32* @x.5
  %299 = load i32, i32* @y.6
  %300 = sub i32 %298, 1
  %301 = mul i32 %298, %300
  %302 = urem i32 %301, 2
  %303 = icmp eq i32 %302, 0
  %304 = icmp slt i32 %299, 10
  %305 = or i1 %303, %304
  br i1 %305, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %297, %originalBB58alteredBB
  %306 = load i32, i32* %collatzVar1
  %307 = sdiv i32 %306, 2
  store i32 %307, i32* %collatzVar1
  %308 = load i32, i32* @x.5
  %309 = load i32, i32* @y.6
  %310 = sub i32 %308, 1
  %311 = mul i32 %308, %310
  %312 = urem i32 %311, 2
  %313 = icmp eq i32 %312, 0
  %314 = icmp slt i32 %309, 10
  %315 = or i1 %313, %314
  br i1 %315, label %originalBBpart260, label %originalBB58alteredBB

originalBBpart260:                                ; preds = %originalBB58
  br label %320

316:                                              ; preds = %originalBBpart256
  %317 = load i32, i32* %collatzVar1
  %318 = mul i32 %317, 3
  %319 = add i32 %318, 1
  store i32 %319, i32* %collatzVar1
  br label %320

320:                                              ; preds = %316, %originalBBpart260
  %321 = load i32, i32* %collatzVar1
  %322 = sub i32 %192, %321
  %323 = icmp sgt i32 %322, -2
  br i1 %323, label %324, label %274

324:                                              ; preds = %320
  %325 = load i32, i32* @x.5
  %326 = load i32, i32* @y.6
  %327 = sub i32 %325, 1
  %328 = mul i32 %325, %327
  %329 = urem i32 %328, 2
  %330 = icmp eq i32 %329, 0
  %331 = icmp slt i32 %326, 10
  %332 = or i1 %330, %331
  br i1 %332, label %originalBB62, label %originalBB62alteredBB

originalBB62:                                     ; preds = %324, %originalBB62alteredBB
  %333 = load i32, i32* %collatzVar1
  %334 = add i32 %192, %333
  %335 = icmp slt i32 %334, 2
  %336 = load i32, i32* @x.5
  %337 = load i32, i32* @y.6
  %338 = sub i32 %336, 1
  %339 = mul i32 %336, %338
  %340 = urem i32 %339, 2
  %341 = icmp eq i32 %340, 0
  %342 = icmp slt i32 %337, 10
  %343 = or i1 %341, %342
  br i1 %343, label %originalBBpart269, label %originalBB62alteredBB

originalBBpart269:                                ; preds = %originalBB62
  br i1 %335, label %344, label %274

344:                                              ; preds = %originalBBpart269
  %345 = load i32, i32* @x.5
  %346 = load i32, i32* @y.6
  %347 = sub i32 %345, 1
  %348 = mul i32 %345, %347
  %349 = urem i32 %348, 2
  %350 = icmp eq i32 %349, 0
  %351 = icmp slt i32 %346, 10
  %352 = or i1 %350, %351
  br i1 %352, label %originalBB71, label %originalBB71alteredBB

originalBB71:                                     ; preds = %344, %originalBB71alteredBB
  %353 = call i32 @stat(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i64 0, i64 0), %struct.stat* %3) #10, !dbg !497
  %354 = load i32, i32* @x.5
  %355 = load i32, i32* @y.6
  %356 = sub i32 %354, 1
  %357 = mul i32 %354, %356
  %358 = urem i32 %357, 2
  %359 = icmp eq i32 %358, 0
  %360 = icmp slt i32 %355, 10
  %361 = or i1 %359, %360
  br i1 %361, label %originalBBpart273, label %originalBB71alteredBB

originalBBpart273:                                ; preds = %originalBB71
  br label %362, !dbg !498

362:                                              ; preds = %originalBBpart273
  %363 = load i32, i32* @x.5
  %364 = load i32, i32* @y.6
  %365 = sub i32 %363, 1
  %366 = mul i32 %363, %365
  %367 = urem i32 %366, 2
  %368 = icmp eq i32 %367, 0
  %369 = icmp slt i32 %364, 10
  %370 = or i1 %368, %369
  br i1 %370, label %originalBB75, label %originalBB75alteredBB

originalBB75:                                     ; preds = %362, %originalBB75alteredBB
  %collatzVar = alloca i32
  %371 = load i32, i32* @x.5
  %372 = load i32, i32* @y.6
  %373 = sub i32 %371, 1
  %374 = mul i32 %371, %373
  %375 = urem i32 %374, 2
  %376 = icmp eq i32 %375, 0
  %377 = icmp slt i32 %372, 10
  %378 = or i1 %376, %377
  br i1 %378, label %originalBBpart277, label %originalBB75alteredBB

originalBBpart277:                                ; preds = %originalBB75
  br label %379

379:                                              ; preds = %originalBBpart277
  %380 = load i32, i32* @inVal0
  %381 = icmp sgt i32 %380, 1
  br i1 %381, label %399, label %382

382:                                              ; preds = %379
  %383 = load i32, i32* @x.5
  %384 = load i32, i32* @y.6
  %385 = sub i32 %383, 1
  %386 = mul i32 %383, %385
  %387 = urem i32 %386, 2
  %388 = icmp eq i32 %387, 0
  %389 = icmp slt i32 %384, 10
  %390 = or i1 %388, %389
  br i1 %390, label %originalBB79, label %originalBB79alteredBB

originalBB79:                                     ; preds = %382, %originalBB79alteredBB
  store i32 51, i32* %collatzVar
  %391 = load i32, i32* @x.5
  %392 = load i32, i32* @y.6
  %393 = sub i32 %391, 1
  %394 = mul i32 %391, %393
  %395 = urem i32 %394, 2
  %396 = icmp eq i32 %395, 0
  %397 = icmp slt i32 %392, 10
  %398 = or i1 %396, %397
  br i1 %398, label %originalBBpart281, label %originalBB79alteredBB

originalBBpart281:                                ; preds = %originalBB79
  br label %399

399:                                              ; preds = %originalBBpart281, %379
  %400 = load i32, i32* @x.5
  %401 = load i32, i32* @y.6
  %402 = sub i32 %400, 1
  %403 = mul i32 %400, %402
  %404 = urem i32 %403, 2
  %405 = icmp eq i32 %404, 0
  %406 = icmp slt i32 %401, 10
  %407 = or i1 %405, %406
  br i1 %407, label %originalBB83, label %originalBB83alteredBB

originalBB83:                                     ; preds = %399, %originalBB83alteredBB
  %408 = load i8**, i8*** @inVal1
  %409 = getelementptr inbounds i8*, i8** %408, i64 1
  %410 = load i8*, i8** %409
  %controle = call i32 @controle(i8* %410, i32 0)
  store i32 %controle, i32* %collatzVar
  %411 = load i32, i32* @x.5
  %412 = load i32, i32* @y.6
  %413 = sub i32 %411, 1
  %414 = mul i32 %411, %413
  %415 = urem i32 %414, 2
  %416 = icmp eq i32 %415, 0
  %417 = icmp slt i32 %412, 10
  %418 = or i1 %416, %417
  br i1 %418, label %originalBBpart285, label %originalBB83alteredBB

originalBBpart285:                                ; preds = %originalBB83
  br label %419

419:                                              ; preds = %originalBBpart2153, %originalBBpart2146, %originalBBpart285
  %420 = load i32, i32* @x.5
  %421 = load i32, i32* @y.6
  %422 = sub i32 %420, 1
  %423 = mul i32 %420, %422
  %424 = urem i32 %423, 2
  %425 = icmp eq i32 %424, 0
  %426 = icmp slt i32 %421, 10
  %427 = or i1 %425, %426
  br i1 %427, label %originalBB87, label %originalBB87alteredBB

originalBB87:                                     ; preds = %419, %originalBB87alteredBB
  %428 = load i32, i32* %collatzVar
  %429 = icmp sgt i32 %428, 1
  %430 = load i32, i32* @x.5
  %431 = load i32, i32* @y.6
  %432 = sub i32 %430, 1
  %433 = mul i32 %430, %432
  %434 = urem i32 %433, 2
  %435 = icmp eq i32 %434, 0
  %436 = icmp slt i32 %431, 10
  %437 = or i1 %435, %436
  br i1 %437, label %originalBBpart289, label %originalBB87alteredBB

originalBBpart289:                                ; preds = %originalBB87
  br i1 %429, label %438, label %583

438:                                              ; preds = %originalBBpart289
  %439 = load i32, i32* @x.5
  %440 = load i32, i32* @y.6
  %441 = sub i32 %439, 1
  %442 = mul i32 %439, %441
  %443 = urem i32 %442, 2
  %444 = icmp eq i32 %443, 0
  %445 = icmp slt i32 %440, 10
  %446 = or i1 %444, %445
  br i1 %446, label %originalBB91, label %originalBB91alteredBB

originalBB91:                                     ; preds = %438, %originalBB91alteredBB
  %447 = load i32, i32* %collatzVar
  %448 = srem i32 %447, 2
  %449 = icmp eq i32 %448, 0
  %450 = load i32, i32* @x.5
  %451 = load i32, i32* @y.6
  %452 = sub i32 %450, 1
  %453 = mul i32 %450, %452
  %454 = urem i32 %453, 2
  %455 = icmp eq i32 %454, 0
  %456 = icmp slt i32 %451, 10
  %457 = or i1 %455, %456
  br i1 %457, label %originalBBpart2100, label %originalBB91alteredBB

originalBBpart2100:                               ; preds = %originalBB91
  br i1 %449, label %458, label %477

458:                                              ; preds = %originalBBpart2100
  %459 = load i32, i32* @x.5
  %460 = load i32, i32* @y.6
  %461 = sub i32 %459, 1
  %462 = mul i32 %459, %461
  %463 = urem i32 %462, 2
  %464 = icmp eq i32 %463, 0
  %465 = icmp slt i32 %460, 10
  %466 = or i1 %464, %465
  br i1 %466, label %originalBB102, label %originalBB102alteredBB

originalBB102:                                    ; preds = %458, %originalBB102alteredBB
  %467 = load i32, i32* %collatzVar
  %468 = sdiv i32 %467, 2
  store i32 %468, i32* %collatzVar
  %469 = load i32, i32* @x.5
  %470 = load i32, i32* @y.6
  %471 = sub i32 %469, 1
  %472 = mul i32 %469, %471
  %473 = urem i32 %472, 2
  %474 = icmp eq i32 %473, 0
  %475 = icmp slt i32 %470, 10
  %476 = or i1 %474, %475
  br i1 %476, label %originalBBpart2113, label %originalBB102alteredBB

originalBBpart2113:                               ; preds = %originalBB102
  br label %497

477:                                              ; preds = %originalBBpart2100
  %478 = load i32, i32* @x.5
  %479 = load i32, i32* @y.6
  %480 = sub i32 %478, 1
  %481 = mul i32 %478, %480
  %482 = urem i32 %481, 2
  %483 = icmp eq i32 %482, 0
  %484 = icmp slt i32 %479, 10
  %485 = or i1 %483, %484
  br i1 %485, label %originalBB115, label %originalBB115alteredBB

originalBB115:                                    ; preds = %477, %originalBB115alteredBB
  %486 = load i32, i32* %collatzVar
  %487 = mul i32 %486, 3
  %488 = add i32 %487, 1
  store i32 %488, i32* %collatzVar
  %489 = load i32, i32* @x.5
  %490 = load i32, i32* @y.6
  %491 = sub i32 %489, 1
  %492 = mul i32 %489, %491
  %493 = urem i32 %492, 2
  %494 = icmp eq i32 %493, 0
  %495 = icmp slt i32 %490, 10
  %496 = or i1 %494, %495
  br i1 %496, label %originalBBpart2133, label %originalBB115alteredBB

originalBBpart2133:                               ; preds = %originalBB115
  br label %497

497:                                              ; preds = %originalBBpart2133, %originalBBpart2113
  %498 = load i32, i32* @x.5
  %499 = load i32, i32* @y.6
  %500 = sub i32 %498, 1
  %501 = mul i32 %498, %500
  %502 = urem i32 %501, 2
  %503 = icmp eq i32 %502, 0
  %504 = icmp slt i32 %499, 10
  %505 = or i1 %503, %504
  br i1 %505, label %originalBB135, label %originalBB135alteredBB

originalBB135:                                    ; preds = %497, %originalBB135alteredBB
  %506 = load i32, i32* %collatzVar
  %507 = sub i32 %353, %506
  %508 = icmp sgt i32 %507, -2
  %509 = load i32, i32* @x.5
  %510 = load i32, i32* @y.6
  %511 = sub i32 %509, 1
  %512 = mul i32 %509, %511
  %513 = urem i32 %512, 2
  %514 = icmp eq i32 %513, 0
  %515 = icmp slt i32 %510, 10
  %516 = or i1 %514, %515
  br i1 %516, label %originalBBpart2146, label %originalBB135alteredBB

originalBBpart2146:                               ; preds = %originalBB135
  br i1 %508, label %517, label %419

517:                                              ; preds = %originalBBpart2146
  %518 = load i32, i32* @x.5
  %519 = load i32, i32* @y.6
  %520 = sub i32 %518, 1
  %521 = mul i32 %518, %520
  %522 = urem i32 %521, 2
  %523 = icmp eq i32 %522, 0
  %524 = icmp slt i32 %519, 10
  %525 = or i1 %523, %524
  br i1 %525, label %originalBB148, label %originalBB148alteredBB

originalBB148:                                    ; preds = %517, %originalBB148alteredBB
  %526 = load i32, i32* %collatzVar
  %527 = add i32 %353, %526
  %528 = icmp slt i32 %527, 2
  %529 = load i32, i32* @x.5
  %530 = load i32, i32* @y.6
  %531 = sub i32 %529, 1
  %532 = mul i32 %529, %531
  %533 = urem i32 %532, 2
  %534 = icmp eq i32 %533, 0
  %535 = icmp slt i32 %530, 10
  %536 = or i1 %534, %535
  br i1 %536, label %originalBBpart2153, label %originalBB148alteredBB

originalBBpart2153:                               ; preds = %originalBB148
  br i1 %528, label %537, label %419

537:                                              ; preds = %originalBBpart2153
  %538 = getelementptr inbounds %struct.stat, %struct.stat* %2, i32 0, i32 1, !dbg !499
  %539 = load i64, i64* %538, align 8, !dbg !499
  %540 = getelementptr inbounds %struct.stat, %struct.stat* %3, i32 0, i32 1, !dbg !499
  %541 = load i64, i64* %540, align 8, !dbg !499
  %542 = icmp eq i64 %539, %541, !dbg !499
  br i1 %542, label %543, label %583, !dbg !499

543:                                              ; preds = %537
  %544 = load i32, i32* @x.5
  %545 = load i32, i32* @y.6
  %546 = sub i32 %544, 1
  %547 = mul i32 %544, %546
  %548 = urem i32 %547, 2
  %549 = icmp eq i32 %548, 0
  %550 = icmp slt i32 %545, 10
  %551 = or i1 %549, %550
  br i1 %551, label %originalBB155, label %originalBB155alteredBB

originalBB155:                                    ; preds = %543, %originalBB155alteredBB
  %552 = getelementptr inbounds %struct.stat, %struct.stat* %2, i32 0, i32 0, !dbg !499
  %553 = load i64, i64* %552, align 8, !dbg !499
  %554 = getelementptr inbounds %struct.stat, %struct.stat* %3, i32 0, i32 0, !dbg !499
  %555 = load i64, i64* %554, align 8, !dbg !499
  %556 = icmp eq i64 %553, %555, !dbg !499
  %557 = load i32, i32* @x.5
  %558 = load i32, i32* @y.6
  %559 = sub i32 %557, 1
  %560 = mul i32 %557, %559
  %561 = urem i32 %560, 2
  %562 = icmp eq i32 %561, 0
  %563 = icmp slt i32 %558, 10
  %564 = or i1 %562, %563
  br i1 %564, label %originalBBpart2157, label %originalBB155alteredBB

originalBBpart2157:                               ; preds = %originalBB155
  br i1 %556, label %565, label %583, !dbg !500

565:                                              ; preds = %originalBBpart2157
  %566 = load i32, i32* @x.5
  %567 = load i32, i32* @y.6
  %568 = sub i32 %566, 1
  %569 = mul i32 %566, %568
  %570 = urem i32 %569, 2
  %571 = icmp eq i32 %570, 0
  %572 = icmp slt i32 %567, 10
  %573 = or i1 %571, %572
  br i1 %573, label %originalBB159, label %originalBB159alteredBB

originalBB159:                                    ; preds = %565, %originalBB159alteredBB
  %574 = load i8*, i8** %4, align 8, !dbg !501
  store i8* %574, i8** %1, align 8, !dbg !502
  %575 = load i32, i32* @x.5
  %576 = load i32, i32* @y.6
  %577 = sub i32 %575, 1
  %578 = mul i32 %575, %577
  %579 = urem i32 %578, 2
  %580 = icmp eq i32 %579, 0
  %581 = icmp slt i32 %576, 10
  %582 = or i1 %580, %581
  br i1 %582, label %originalBBpart2161, label %originalBB159alteredBB

originalBBpart2161:                               ; preds = %originalBB159
  br label %600, !dbg !502

583:                                              ; preds = %originalBBpart2157, %537, %originalBBpart289, %274
  %584 = load i32, i32* @x.5
  %585 = load i32, i32* @y.6
  %586 = sub i32 %584, 1
  %587 = mul i32 %584, %586
  %588 = urem i32 %587, 2
  %589 = icmp eq i32 %588, 0
  %590 = icmp slt i32 %585, 10
  %591 = or i1 %589, %590
  br i1 %591, label %originalBB163, label %originalBB163alteredBB

originalBB163:                                    ; preds = %583, %originalBB163alteredBB
  store i8* null, i8** %1, align 8, !dbg !503
  %592 = load i32, i32* @x.5
  %593 = load i32, i32* @y.6
  %594 = sub i32 %592, 1
  %595 = mul i32 %592, %594
  %596 = urem i32 %595, 2
  %597 = icmp eq i32 %596, 0
  %598 = icmp slt i32 %593, 10
  %599 = or i1 %597, %598
  br i1 %599, label %originalBBpart2165, label %originalBB163alteredBB

originalBBpart2165:                               ; preds = %originalBB163
  br label %600, !dbg !503

600:                                              ; preds = %originalBBpart2165, %originalBBpart2161, %originalBBpart224, %31
  %601 = load i32, i32* @x.5
  %602 = load i32, i32* @y.6
  %603 = sub i32 %601, 1
  %604 = mul i32 %601, %603
  %605 = urem i32 %604, 2
  %606 = icmp eq i32 %605, 0
  %607 = icmp slt i32 %602, 10
  %608 = or i1 %606, %607
  br i1 %608, label %originalBB167, label %originalBB167alteredBB

originalBB167:                                    ; preds = %600, %originalBB167alteredBB
  %609 = load i8*, i8** %1, align 8, !dbg !504
  %610 = load i32, i32* @x.5
  %611 = load i32, i32* @y.6
  %612 = sub i32 %610, 1
  %613 = mul i32 %610, %612
  %614 = urem i32 %613, 2
  %615 = icmp eq i32 %614, 0
  %616 = icmp slt i32 %611, 10
  %617 = or i1 %615, %616
  br i1 %617, label %originalBBpart2169, label %originalBB167alteredBB

originalBBpart2169:                               ; preds = %originalBB167
  ret i8* %609, !dbg !504

originalBBalteredBB:                              ; preds = %originalBB, %9
  %618 = load i8*, i8** %4, align 8, !dbg !464
  %619 = getelementptr inbounds i8, i8* %618, i64 0, !dbg !464
  %620 = load i8, i8* %619, align 1, !dbg !464
  %621 = sext i8 %620 to i32, !dbg !464
  %622 = icmp ne i32 %621, 47, !dbg !465
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %34
  %623 = load i8*, i8** %5, align 8, !dbg !471
  %624 = call i8* @strstr(i8* %623, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.37, i64 0, i64 0)) #13, !dbg !472
  store i8* %624, i8** %5, align 8, !dbg !473
  %625 = icmp ne i8* %624, null, !dbg !470
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %54
  %626 = load i8*, i8** %5, align 8, !dbg !474
  %627 = getelementptr inbounds i8, i8* %626, i64 2, !dbg !474
  %628 = load i8, i8* %627, align 1, !dbg !474
  %629 = icmp ne i8 %628, 0, !dbg !474
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %75
  %630 = load i8*, i8** %5, align 8, !dbg !478
  %631 = getelementptr inbounds i8, i8* %630, i64 2, !dbg !478
  %632 = load i8, i8* %631, align 1, !dbg !478
  %633 = sext i8 %632 to i32, !dbg !478
  %634 = icmp eq i32 %633, 47, !dbg !479
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %97
  %635 = load i8*, i8** %5, align 8, !dbg !481
  %636 = getelementptr inbounds i8, i8* %635, i64 2, !dbg !481
  %637 = load i8, i8* %636, align 1, !dbg !481
  %638 = sext i8 %637 to i32, !dbg !481
  %639 = icmp eq i32 %638, 46, !dbg !482
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %124
  %640 = load i8*, i8** %5, align 8, !dbg !486
  %641 = getelementptr inbounds i8, i8* %640, i64 3, !dbg !486
  %642 = load i8, i8* %641, align 1, !dbg !486
  %643 = sext i8 %642 to i32, !dbg !486
  %644 = icmp eq i32 %643, 47, !dbg !487
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %146
  store i8* null, i8** %1, align 8, !dbg !489
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %163
  %645 = load i8*, i8** %5, align 8, !dbg !490
  %646 = getelementptr inbounds i8, i8* %645, i32 1, !dbg !490
  store i8* %646, i8** %5, align 8, !dbg !490
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %182
  %647 = load i8*, i8** %4, align 8, !dbg !493
  %648 = call i32 @stat(i8* %647, %struct.stat* %2) #10, !dbg !495
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %201
  %collatzVar1alteredBB = alloca i32
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %218
  %649 = load i32, i32* @inVal0
  %650 = icmp sgt i32 %649, 1
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %237
  store i32 54, i32* %collatzVar1
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %254
  %651 = load i8**, i8*** @inVal1
  %652 = getelementptr inbounds i8*, i8** %651, i64 1
  %653 = load i8*, i8** %652
  %controle2alteredBB = call i32 @controle(i8* %653, i32 0)
  store i32 %controle2alteredBB, i32* %collatzVar1
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %277
  %654 = load i32, i32* %collatzVar1
  %_ = sub i32 0, %654
  %gen = add i32 %_, 2
  %_51 = sub i32 %654, 2
  %gen52 = mul i32 %_51, 2
  %_53 = shl i32 %654, 2
  %_54 = shl i32 %654, 2
  %655 = srem i32 %654, 2
  %656 = icmp eq i32 %655, 0
  br label %originalBB50

originalBB58alteredBB:                            ; preds = %originalBB58, %297
  %657 = load i32, i32* %collatzVar1
  %658 = sdiv i32 %657, 2
  store i32 %658, i32* %collatzVar1
  br label %originalBB58

originalBB62alteredBB:                            ; preds = %originalBB62, %324
  %659 = load i32, i32* %collatzVar1
  %_63 = sub i32 %192, %659
  %gen64 = mul i32 %_63, %659
  %_65 = shl i32 %192, %659
  %_66 = sub i32 0, %192
  %gen67 = add i32 %_66, %659
  %660 = add i32 %192, %659
  %661 = icmp slt i32 %660, 2
  br label %originalBB62

originalBB71alteredBB:                            ; preds = %originalBB71, %344
  %662 = call i32 @stat(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i64 0, i64 0), %struct.stat* %3) #10, !dbg !497
  br label %originalBB71

originalBB75alteredBB:                            ; preds = %originalBB75, %362
  %collatzVaralteredBB = alloca i32
  br label %originalBB75

originalBB79alteredBB:                            ; preds = %originalBB79, %382
  store i32 51, i32* %collatzVar
  br label %originalBB79

originalBB83alteredBB:                            ; preds = %originalBB83, %399
  %663 = load i8**, i8*** @inVal1
  %664 = getelementptr inbounds i8*, i8** %663, i64 1
  %665 = load i8*, i8** %664
  %controlealteredBB = call i32 @controle(i8* %665, i32 0)
  store i32 %controlealteredBB, i32* %collatzVar
  br label %originalBB83

originalBB87alteredBB:                            ; preds = %originalBB87, %419
  %666 = load i32, i32* %collatzVar
  %667 = icmp sgt i32 %666, 1
  br label %originalBB87

originalBB91alteredBB:                            ; preds = %originalBB91, %438
  %668 = load i32, i32* %collatzVar
  %_92 = sub i32 0, %668
  %gen93 = add i32 %_92, 2
  %_94 = shl i32 %668, 2
  %_95 = sub i32 %668, 2
  %gen96 = mul i32 %_95, 2
  %_97 = sub i32 %668, 2
  %gen98 = mul i32 %_97, 2
  %669 = srem i32 %668, 2
  %670 = icmp eq i32 %669, 0
  br label %originalBB91

originalBB102alteredBB:                           ; preds = %originalBB102, %458
  %671 = load i32, i32* %collatzVar
  %_103 = sub i32 0, %671
  %gen104 = add i32 %_103, 2
  %_105 = sub i32 0, %671
  %gen106 = add i32 %_105, 2
  %_107 = shl i32 %671, 2
  %_108 = shl i32 %671, 2
  %_109 = sub i32 %671, 2
  %gen110 = mul i32 %_109, 2
  %_111 = shl i32 %671, 2
  %672 = sdiv i32 %671, 2
  store i32 %672, i32* %collatzVar
  br label %originalBB102

originalBB115alteredBB:                           ; preds = %originalBB115, %477
  %673 = load i32, i32* %collatzVar
  %_116 = sub i32 0, %673
  %gen117 = add i32 %_116, 3
  %_118 = shl i32 %673, 3
  %_119 = sub i32 %673, 3
  %gen120 = mul i32 %_119, 3
  %674 = mul i32 %673, 3
  %_121 = sub i32 %674, 1
  %gen122 = mul i32 %_121, 1
  %_123 = sub i32 0, %674
  %gen124 = add i32 %_123, 1
  %_125 = sub i32 0, %674
  %gen126 = add i32 %_125, 1
  %_127 = sub i32 0, %674
  %gen128 = add i32 %_127, 1
  %_129 = shl i32 %674, 1
  %_130 = sub i32 %674, 1
  %gen131 = mul i32 %_130, 1
  %675 = add i32 %674, 1
  store i32 %675, i32* %collatzVar
  br label %originalBB115

originalBB135alteredBB:                           ; preds = %originalBB135, %497
  %676 = load i32, i32* %collatzVar
  %_136 = sub i32 0, %353
  %gen137 = add i32 %_136, %676
  %_138 = sub i32 0, %353
  %gen139 = add i32 %_138, %676
  %_140 = sub i32 %353, %676
  %gen141 = mul i32 %_140, %676
  %_142 = shl i32 %353, %676
  %_143 = sub i32 %353, %676
  %gen144 = mul i32 %_143, %676
  %677 = sub i32 %353, %676
  %678 = icmp sgt i32 %677, -2
  br label %originalBB135

originalBB148alteredBB:                           ; preds = %originalBB148, %517
  %679 = load i32, i32* %collatzVar
  %_149 = sub i32 %353, %679
  %gen150 = mul i32 %_149, %679
  %_151 = shl i32 %353, %679
  %680 = add i32 %353, %679
  %681 = icmp slt i32 %680, 2
  br label %originalBB148

originalBB155alteredBB:                           ; preds = %originalBB155, %543
  %682 = getelementptr inbounds %struct.stat, %struct.stat* %2, i32 0, i32 0, !dbg !499
  %683 = load i64, i64* %682, align 8, !dbg !499
  %684 = getelementptr inbounds %struct.stat, %struct.stat* %3, i32 0, i32 0, !dbg !499
  %685 = load i64, i64* %684, align 8, !dbg !499
  %686 = icmp eq i64 %683, %685, !dbg !499
  br label %originalBB155

originalBB159alteredBB:                           ; preds = %originalBB159, %565
  %687 = load i8*, i8** %4, align 8, !dbg !501
  store i8* %687, i8** %1, align 8, !dbg !502
  br label %originalBB159

originalBB163alteredBB:                           ; preds = %originalBB163, %583
  store i8* null, i8** %1, align 8, !dbg !503
  br label %originalBB163

originalBB167alteredBB:                           ; preds = %originalBB167, %600
  %688 = load i8*, i8** %1, align 8, !dbg !504
  br label %originalBB167
}

declare dso_local i32 @puts(i8*) #3

; Function Attrs: nounwind
declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.file_name* @file_name_init() #4 !dbg !505 {
  %1 = load i32, i32* @x.7
  %2 = load i32, i32* @y.8
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = alloca %struct.file_name*, align 8
  call void @llvm.dbg.declare(metadata %struct.file_name** %9, metadata !508, metadata !DIExpression()), !dbg !509
  %10 = call noalias i8* @xmalloc(i64 24), !dbg !510
  %11 = bitcast i8* %10 to %struct.file_name*, !dbg !510
  store %struct.file_name* %11, %struct.file_name** %9, align 8, !dbg !509
  %12 = load %struct.file_name*, %struct.file_name** %9, align 8, !dbg !511
  %13 = getelementptr inbounds %struct.file_name, %struct.file_name* %12, i32 0, i32 1, !dbg !512
  store i64 8192, i64* %13, align 8, !dbg !513
  %14 = load %struct.file_name*, %struct.file_name** %9, align 8, !dbg !514
  %15 = getelementptr inbounds %struct.file_name, %struct.file_name* %14, i32 0, i32 1, !dbg !515
  %16 = load i64, i64* %15, align 8, !dbg !515
  %17 = call noalias i8* @xmalloc(i64 %16), !dbg !516
  %18 = load %struct.file_name*, %struct.file_name** %9, align 8, !dbg !517
  %19 = getelementptr inbounds %struct.file_name, %struct.file_name* %18, i32 0, i32 0, !dbg !518
  store i8* %17, i8** %19, align 8, !dbg !519
  %20 = load %struct.file_name*, %struct.file_name** %9, align 8, !dbg !520
  %21 = getelementptr inbounds %struct.file_name, %struct.file_name* %20, i32 0, i32 0, !dbg !521
  %22 = load i8*, i8** %21, align 8, !dbg !521
  %23 = load %struct.file_name*, %struct.file_name** %9, align 8, !dbg !522
  %24 = getelementptr inbounds %struct.file_name, %struct.file_name* %23, i32 0, i32 1, !dbg !523
  %25 = load i64, i64* %24, align 8, !dbg !523
  %26 = sub i64 %25, 1, !dbg !524
  %27 = getelementptr inbounds i8, i8* %22, i64 %26, !dbg !525
  %28 = load %struct.file_name*, %struct.file_name** %9, align 8, !dbg !526
  %29 = getelementptr inbounds %struct.file_name, %struct.file_name* %28, i32 0, i32 2, !dbg !527
  store i8* %27, i8** %29, align 8, !dbg !528
  %30 = load %struct.file_name*, %struct.file_name** %9, align 8, !dbg !529
  %31 = getelementptr inbounds %struct.file_name, %struct.file_name* %30, i32 0, i32 2, !dbg !530
  %32 = load i8*, i8** %31, align 8, !dbg !530
  %33 = getelementptr inbounds i8, i8* %32, i64 0, !dbg !529
  store i8 0, i8* %33, align 1, !dbg !531
  %34 = load %struct.file_name*, %struct.file_name** %9, align 8, !dbg !532
  %35 = load i32, i32* @x.7
  %36 = load i32, i32* @y.8
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret %struct.file_name* %34, !dbg !533

originalBBalteredBB:                              ; preds = %originalBB, %0
  %43 = alloca %struct.file_name*, align 8
  call void @llvm.dbg.declare(metadata %struct.file_name** %43, metadata !534, metadata !DIExpression()), !dbg !509
  %44 = call noalias i8* @xmalloc(i64 24), !dbg !510
  %45 = bitcast i8* %44 to %struct.file_name*, !dbg !510
  store %struct.file_name* %45, %struct.file_name** %43, align 8, !dbg !509
  %46 = load %struct.file_name*, %struct.file_name** %43, align 8, !dbg !511
  %47 = getelementptr inbounds %struct.file_name, %struct.file_name* %46, i32 0, i32 1, !dbg !512
  store i64 8192, i64* %47, align 8, !dbg !513
  %48 = load %struct.file_name*, %struct.file_name** %43, align 8, !dbg !514
  %49 = getelementptr inbounds %struct.file_name, %struct.file_name* %48, i32 0, i32 1, !dbg !515
  %50 = load i64, i64* %49, align 8, !dbg !515
  %51 = call noalias i8* @xmalloc(i64 %50), !dbg !516
  %52 = load %struct.file_name*, %struct.file_name** %43, align 8, !dbg !517
  %53 = getelementptr inbounds %struct.file_name, %struct.file_name* %52, i32 0, i32 0, !dbg !518
  store i8* %51, i8** %53, align 8, !dbg !519
  %54 = load %struct.file_name*, %struct.file_name** %43, align 8, !dbg !520
  %55 = getelementptr inbounds %struct.file_name, %struct.file_name* %54, i32 0, i32 0, !dbg !521
  %56 = load i8*, i8** %55, align 8, !dbg !521
  %57 = load %struct.file_name*, %struct.file_name** %43, align 8, !dbg !522
  %58 = getelementptr inbounds %struct.file_name, %struct.file_name* %57, i32 0, i32 1, !dbg !523
  %59 = load i64, i64* %58, align 8, !dbg !523
  %_ = sub i64 0, %59
  %gen = add i64 %_, 1
  %_1 = shl i64 %59, 1
  %_2 = sub i64 0, %59
  %gen3 = add i64 %_2, 1
  %_4 = sub i64 0, %59
  %gen5 = add i64 %_4, 1
  %_6 = sub i64 %59, 1
  %gen7 = mul i64 %_6, 1
  %_8 = sub i64 0, %59
  %gen9 = add i64 %_8, 1
  %_10 = sub i64 %59, 1
  %gen11 = mul i64 %_10, 1
  %60 = sub i64 %59, 1, !dbg !524
  %61 = getelementptr inbounds i8, i8* %56, i64 %60, !dbg !525
  %62 = load %struct.file_name*, %struct.file_name** %43, align 8, !dbg !526
  %63 = getelementptr inbounds %struct.file_name, %struct.file_name* %62, i32 0, i32 2, !dbg !527
  store i8* %61, i8** %63, align 8, !dbg !528
  %64 = load %struct.file_name*, %struct.file_name** %43, align 8, !dbg !529
  %65 = getelementptr inbounds %struct.file_name, %struct.file_name* %64, i32 0, i32 2, !dbg !530
  %66 = load i8*, i8** %65, align 8, !dbg !530
  %67 = getelementptr inbounds i8, i8* %66, i64 0, !dbg !529
  store i8 0, i8* %67, align 1, !dbg !531
  %68 = load %struct.file_name*, %struct.file_name** %43, align 8, !dbg !532
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @robust_getcwd(%struct.file_name*) #4 !dbg !556 {
  %2 = load i32, i32* @x.9
  %3 = load i32, i32* @y.10
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct.file_name*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %struct.dev_ino, align 8
  %13 = alloca %struct.dev_ino*, align 8
  %14 = alloca %struct.stat, align 8
  store %struct.file_name* %0, %struct.file_name** %10, align 8
  call void @llvm.dbg.declare(metadata %struct.file_name** %10, metadata !559, metadata !DIExpression()), !dbg !560
  call void @llvm.dbg.declare(metadata i64* %11, metadata !561, metadata !DIExpression()), !dbg !562
  store i64 1, i64* %11, align 8, !dbg !562
  call void @llvm.dbg.declare(metadata %struct.dev_ino* %12, metadata !563, metadata !DIExpression()), !dbg !572
  call void @llvm.dbg.declare(metadata %struct.dev_ino** %13, metadata !573, metadata !DIExpression()), !dbg !575
  %15 = call %struct.dev_ino* @get_root_dev_ino(%struct.dev_ino* %12), !dbg !576
  store %struct.dev_ino* %15, %struct.dev_ino** %13, align 8, !dbg !575
  call void @llvm.dbg.declare(metadata %struct.stat* %14, metadata !577, metadata !DIExpression()), !dbg !578
  %16 = load %struct.dev_ino*, %struct.dev_ino** %13, align 8, !dbg !579
  %17 = icmp eq %struct.dev_ino* %16, null, !dbg !581
  %18 = load i32, i32* @x.9
  %19 = load i32, i32* @y.10
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %17, label %26, label %47, !dbg !582

26:                                               ; preds = %originalBBpart2
  %27 = load i32, i32* @x.9
  %28 = load i32, i32* @y.10
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %26, %originalBB1alteredBB
  %35 = call i32* @__errno_location() #15, !dbg !583
  %36 = load i32, i32* %35, align 4, !dbg !583
  %37 = call i8* @gettext(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.39, i64 0, i64 0)) #10, !dbg !583
  %38 = call i8* @quotearg_style(i32 4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.40, i64 0, i64 0)), !dbg !583
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %36, i8* %37, i8* %38), !dbg !583
  %39 = load i32, i32* @x.9
  %40 = load i32, i32* @y.10
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  unreachable, !dbg !583

47:                                               ; preds = %originalBBpart2
  %48 = load i32, i32* @x.9
  %49 = load i32, i32* @y.10
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %47, %originalBB6alteredBB
  %56 = call i32 @stat(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i64 0, i64 0), %struct.stat* %14) #10, !dbg !584
  %57 = icmp slt i32 %56, 0, !dbg !586
  %58 = load i32, i32* @x.9
  %59 = load i32, i32* @y.10
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %57, label %66, label %87, !dbg !587

66:                                               ; preds = %originalBBpart28
  %67 = load i32, i32* @x.9
  %68 = load i32, i32* @y.10
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %66, %originalBB10alteredBB
  %75 = call i32* @__errno_location() #15, !dbg !588
  %76 = load i32, i32* %75, align 4, !dbg !588
  %77 = call i8* @gettext(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.41, i64 0, i64 0)) #10, !dbg !588
  %78 = call i8* @quotearg_style(i32 4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i64 0, i64 0)), !dbg !588
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %76, i8* %77, i8* %78), !dbg !588
  %79 = load i32, i32* @x.9
  %80 = load i32, i32* @y.10
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  unreachable, !dbg !588

87:                                               ; preds = %originalBBpart28
  br label %88, !dbg !589

88:                                               ; preds = %originalBBpart224, %87
  %89 = getelementptr inbounds %struct.stat, %struct.stat* %14, i32 0, i32 1, !dbg !590
  %90 = load i64, i64* %89, align 8, !dbg !590
  %91 = load %struct.dev_ino*, %struct.dev_ino** %13, align 8, !dbg !590
  %92 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %91, i32 0, i32 0, !dbg !590
  %93 = load i64, i64* %92, align 8, !dbg !590
  %94 = icmp eq i64 %90, %93, !dbg !590
  br i1 %94, label %95, label %119, !dbg !590

95:                                               ; preds = %88
  %96 = getelementptr inbounds %struct.stat, %struct.stat* %14, i32 0, i32 0, !dbg !590
  %97 = load i64, i64* %96, align 8, !dbg !590
  %98 = load %struct.dev_ino*, %struct.dev_ino** %13, align 8, !dbg !590
  %99 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %98, i32 0, i32 1, !dbg !590
  %100 = load i64, i64* %99, align 8, !dbg !590
  %101 = icmp eq i64 %97, %100, !dbg !590
  br i1 %101, label %102, label %119, !dbg !593

102:                                              ; preds = %95
  %103 = load i32, i32* @x.9
  %104 = load i32, i32* @y.10
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %102, %originalBB14alteredBB
  %111 = load i32, i32* @x.9
  %112 = load i32, i32* @y.10
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %139, !dbg !594

119:                                              ; preds = %95, %88
  %120 = load i32, i32* @x.9
  %121 = load i32, i32* @y.10
  %122 = sub i32 %120, 1
  %123 = mul i32 %120, %122
  %124 = urem i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %125, %126
  br i1 %127, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %119, %originalBB18alteredBB
  %128 = load %struct.file_name*, %struct.file_name** %10, align 8, !dbg !595
  %129 = load i64, i64* %11, align 8, !dbg !596
  %130 = add i64 %129, 1, !dbg !596
  store i64 %130, i64* %11, align 8, !dbg !596
  call void @find_dir_entry(%struct.stat* %14, %struct.file_name* %128, i64 %129), !dbg !597
  %131 = load i32, i32* @x.9
  %132 = load i32, i32* @y.10
  %133 = sub i32 %131, 1
  %134 = mul i32 %131, %133
  %135 = urem i32 %134, 2
  %136 = icmp eq i32 %135, 0
  %137 = icmp slt i32 %132, 10
  %138 = or i1 %136, %137
  br i1 %138, label %originalBBpart224, label %originalBB18alteredBB

originalBBpart224:                                ; preds = %originalBB18
  br label %88, !dbg !589, !llvm.loop !598

139:                                              ; preds = %originalBBpart216
  %140 = load i32, i32* @x.9
  %141 = load i32, i32* @y.10
  %142 = sub i32 %140, 1
  %143 = mul i32 %140, %142
  %144 = urem i32 %143, 2
  %145 = icmp eq i32 %144, 0
  %146 = icmp slt i32 %141, 10
  %147 = or i1 %145, %146
  br i1 %147, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %139, %originalBB26alteredBB
  %148 = load %struct.file_name*, %struct.file_name** %10, align 8, !dbg !600
  %149 = getelementptr inbounds %struct.file_name, %struct.file_name* %148, i32 0, i32 2, !dbg !602
  %150 = load i8*, i8** %149, align 8, !dbg !602
  %151 = getelementptr inbounds i8, i8* %150, i64 0, !dbg !600
  %152 = load i8, i8* %151, align 1, !dbg !600
  %153 = sext i8 %152 to i32, !dbg !600
  %154 = icmp eq i32 %153, 0, !dbg !603
  %155 = load i32, i32* @x.9
  %156 = load i32, i32* @y.10
  %157 = sub i32 %155, 1
  %158 = mul i32 %155, %157
  %159 = urem i32 %158, 2
  %160 = icmp eq i32 %159, 0
  %161 = icmp slt i32 %156, 10
  %162 = or i1 %160, %161
  br i1 %162, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %154, label %163, label %181, !dbg !604

163:                                              ; preds = %originalBBpart228
  %164 = load i32, i32* @x.9
  %165 = load i32, i32* @y.10
  %166 = sub i32 %164, 1
  %167 = mul i32 %164, %166
  %168 = urem i32 %167, 2
  %169 = icmp eq i32 %168, 0
  %170 = icmp slt i32 %165, 10
  %171 = or i1 %169, %170
  br i1 %171, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %163, %originalBB30alteredBB
  %172 = load %struct.file_name*, %struct.file_name** %10, align 8, !dbg !605
  call void @file_name_prepend(%struct.file_name* %172, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0), i64 0), !dbg !606
  %173 = load i32, i32* @x.9
  %174 = load i32, i32* @y.10
  %175 = sub i32 %173, 1
  %176 = mul i32 %173, %175
  %177 = urem i32 %176, 2
  %178 = icmp eq i32 %177, 0
  %179 = icmp slt i32 %174, 10
  %180 = or i1 %178, %179
  br i1 %180, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %181, !dbg !606

181:                                              ; preds = %originalBBpart232, %originalBBpart228
  %182 = load i32, i32* @x.9
  %183 = load i32, i32* @y.10
  %184 = sub i32 %182, 1
  %185 = mul i32 %182, %184
  %186 = urem i32 %185, 2
  %187 = icmp eq i32 %186, 0
  %188 = icmp slt i32 %183, 10
  %189 = or i1 %187, %188
  br i1 %189, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %181, %originalBB34alteredBB
  %190 = load i32, i32* @x.9
  %191 = load i32, i32* @y.10
  %192 = sub i32 %190, 1
  %193 = mul i32 %190, %192
  %194 = urem i32 %193, 2
  %195 = icmp eq i32 %194, 0
  %196 = icmp slt i32 %191, 10
  %197 = or i1 %195, %196
  br i1 %197, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  ret void, !dbg !607

originalBBalteredBB:                              ; preds = %originalBB, %1
  %198 = alloca %struct.file_name*, align 8
  %199 = alloca i64, align 8
  %200 = alloca %struct.dev_ino, align 8
  %201 = alloca %struct.dev_ino*, align 8
  %202 = alloca %struct.stat, align 8
  store %struct.file_name* %0, %struct.file_name** %198, align 8
  call void @llvm.dbg.declare(metadata %struct.file_name** %198, metadata !608, metadata !DIExpression()), !dbg !560
  call void @llvm.dbg.declare(metadata i64* %199, metadata !630, metadata !DIExpression()), !dbg !562
  store i64 1, i64* %199, align 8, !dbg !562
  call void @llvm.dbg.declare(metadata %struct.dev_ino* %200, metadata !631, metadata !DIExpression()), !dbg !572
  call void @llvm.dbg.declare(metadata %struct.dev_ino** %201, metadata !636, metadata !DIExpression()), !dbg !575
  %203 = call %struct.dev_ino* @get_root_dev_ino(%struct.dev_ino* %200), !dbg !576
  store %struct.dev_ino* %203, %struct.dev_ino** %201, align 8, !dbg !575
  call void @llvm.dbg.declare(metadata %struct.stat* %202, metadata !638, metadata !DIExpression()), !dbg !578
  %204 = load %struct.dev_ino*, %struct.dev_ino** %201, align 8, !dbg !579
  %205 = icmp eq %struct.dev_ino* %204, null, !dbg !581
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %26
  %206 = call i32* @__errno_location() #15, !dbg !583
  %207 = load i32, i32* %206, align 4, !dbg !583
  %208 = call i8* @gettext(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.39, i64 0, i64 0)) #10, !dbg !583
  %209 = call i8* @quotearg_style(i32 4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.40, i64 0, i64 0)), !dbg !583
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %207, i8* %208, i8* %209), !dbg !583
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %47
  %210 = call i32 @stat(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i64 0, i64 0), %struct.stat* %14) #10, !dbg !584
  %211 = icmp slt i32 %210, 0, !dbg !586
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %66
  %212 = call i32* @__errno_location() #15, !dbg !588
  %213 = load i32, i32* %212, align 4, !dbg !588
  %214 = call i8* @gettext(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.41, i64 0, i64 0)) #10, !dbg !588
  %215 = call i8* @quotearg_style(i32 4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i64 0, i64 0)), !dbg !588
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %213, i8* %214, i8* %215), !dbg !588
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %102
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %119
  %216 = load %struct.file_name*, %struct.file_name** %10, align 8, !dbg !595
  %217 = load i64, i64* %11, align 8, !dbg !596
  %_ = sub i64 %217, 1
  %gen = mul i64 %_, 1
  %_19 = sub i64 %217, 1
  %gen20 = mul i64 %_19, 1
  %_21 = sub i64 %217, 1
  %gen22 = mul i64 %_21, 1
  %218 = add i64 %217, 1, !dbg !596
  store i64 %218, i64* %11, align 8, !dbg !596
  call void @find_dir_entry(%struct.stat* %14, %struct.file_name* %216, i64 %217), !dbg !597
  br label %originalBB18

originalBB26alteredBB:                            ; preds = %originalBB26, %139
  %219 = load %struct.file_name*, %struct.file_name** %10, align 8, !dbg !600
  %220 = getelementptr inbounds %struct.file_name, %struct.file_name* %219, i32 0, i32 2, !dbg !602
  %221 = load i8*, i8** %220, align 8, !dbg !602
  %222 = getelementptr inbounds i8, i8* %221, i64 0, !dbg !600
  %223 = load i8, i8* %222, align 1, !dbg !600
  %224 = sext i8 %223 to i32, !dbg !600
  %225 = icmp eq i32 %224, 0, !dbg !603
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %163
  %226 = load %struct.file_name*, %struct.file_name** %10, align 8, !dbg !605
  call void @file_name_prepend(%struct.file_name* %226, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0), i64 0), !dbg !606
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %181
  br label %originalBB34
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @file_name_free(%struct.file_name*) #4 !dbg !660 {
  %2 = alloca %struct.file_name*, align 8
  store %struct.file_name* %0, %struct.file_name** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.file_name** %2, metadata !661, metadata !DIExpression()), !dbg !662
  %3 = load %struct.file_name*, %struct.file_name** %2, align 8, !dbg !663
  %4 = getelementptr inbounds %struct.file_name, %struct.file_name* %3, i32 0, i32 0, !dbg !664
  %5 = load i8*, i8** %4, align 8, !dbg !664
  call void @free(i8* %5) #10, !dbg !665
  %6 = load %struct.file_name*, %struct.file_name** %2, align 8, !dbg !666
  %7 = bitcast %struct.file_name* %6 to i8*, !dbg !666
  call void @free(i8* %7) #10, !dbg !667
  ret void, !dbg !668
}

; Function Attrs: nounwind readnone
declare dso_local i32* @__errno_location() #8

; Function Attrs: nounwind
declare dso_local i32 @stat(i8*, %struct.stat*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @find_dir_entry(%struct.stat*, %struct.file_name*, i64) #4 !dbg !669 {
  %4 = load i32, i32* @x.13
  %5 = load i32, i32* @y.14
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca %struct.stat*, align 8
  %13 = alloca %struct.file_name*, align 8
  %14 = alloca i64, align 8
  %15 = alloca %struct.__dirstream*, align 8
  %16 = alloca i32, align 4
  %17 = alloca %struct.stat, align 8
  %18 = alloca i8, align 1
  %19 = alloca i8, align 1
  %20 = alloca %struct.dirent*, align 8
  %21 = alloca %struct.stat, align 8
  %22 = alloca i64, align 8
  %23 = alloca i32, align 4
  store %struct.stat* %0, %struct.stat** %12, align 8
  call void @llvm.dbg.declare(metadata %struct.stat** %12, metadata !673, metadata !DIExpression()), !dbg !674
  store %struct.file_name* %1, %struct.file_name** %13, align 8
  call void @llvm.dbg.declare(metadata %struct.file_name** %13, metadata !675, metadata !DIExpression()), !dbg !676
  store i64 %2, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !677, metadata !DIExpression()), !dbg !678
  call void @llvm.dbg.declare(metadata %struct.__dirstream** %15, metadata !679, metadata !DIExpression()), !dbg !684
  call void @llvm.dbg.declare(metadata i32* %16, metadata !685, metadata !DIExpression()), !dbg !686
  call void @llvm.dbg.declare(metadata %struct.stat* %17, metadata !687, metadata !DIExpression()), !dbg !688
  call void @llvm.dbg.declare(metadata i8* %18, metadata !689, metadata !DIExpression()), !dbg !690
  call void @llvm.dbg.declare(metadata i8* %19, metadata !691, metadata !DIExpression()), !dbg !692
  %24 = call %struct.__dirstream* @opendir(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i64 0, i64 0)), !dbg !693
  store %struct.__dirstream* %24, %struct.__dirstream** %15, align 8, !dbg !694
  %25 = load %struct.__dirstream*, %struct.__dirstream** %15, align 8, !dbg !695
  %26 = icmp eq %struct.__dirstream* %25, null, !dbg !697
  %27 = load i32, i32* @x.13
  %28 = load i32, i32* @y.14
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %26, label %35, label %42, !dbg !698

35:                                               ; preds = %originalBBpart2
  %36 = call i32* @__errno_location() #15, !dbg !699
  %37 = load i32, i32* %36, align 4, !dbg !699
  %38 = call i8* @gettext(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.43, i64 0, i64 0)) #10, !dbg !699
  %39 = load i64, i64* %14, align 8, !dbg !699
  %40 = call i8* @nth_parent(i64 %39), !dbg !699
  %41 = call i8* @quote(i8* %40), !dbg !699
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %37, i8* %38, i8* %41), !dbg !699
  unreachable, !dbg !699

42:                                               ; preds = %originalBBpart2
  %43 = load i32, i32* @x.13
  %44 = load i32, i32* @y.14
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %42, %originalBB1alteredBB
  %51 = load %struct.__dirstream*, %struct.__dirstream** %15, align 8, !dbg !700
  %52 = call i32 @dirfd(%struct.__dirstream* %51) #10, !dbg !701
  store i32 %52, i32* %16, align 4, !dbg !702
  %53 = load i32, i32* %16, align 4, !dbg !703
  %54 = icmp sle i32 0, %53, !dbg !705
  %55 = load i32, i32* @x.13
  %56 = load i32, i32* @y.14
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %54, label %63, label %82, !dbg !706

63:                                               ; preds = %originalBBpart24
  %64 = load i32, i32* @x.13
  %65 = load i32, i32* @y.14
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %63, %originalBB6alteredBB
  %72 = load i32, i32* %16, align 4, !dbg !707
  %73 = call i32 @fchdir(i32 %72) #10, !dbg !708
  %74 = load i32, i32* @x.13
  %75 = load i32, i32* @y.14
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %100, !dbg !706

82:                                               ; preds = %originalBBpart24
  %83 = load i32, i32* @x.13
  %84 = load i32, i32* @y.14
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %82, %originalBB10alteredBB
  %91 = call i32 @chdir(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i64 0, i64 0)) #10, !dbg !709
  %92 = load i32, i32* @x.13
  %93 = load i32, i32* @y.14
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %100, !dbg !706

100:                                              ; preds = %originalBBpart212, %originalBBpart28
  %101 = phi i32 [ %73, %originalBBpart28 ], [ %91, %originalBBpart212 ], !dbg !706
  %102 = load i32, i32* @x.13
  %103 = load i32, i32* @y.14
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %100, %originalBB14alteredBB
  %110 = icmp slt i32 %101, 0, !dbg !710
  %111 = load i32, i32* @x.13
  %112 = load i32, i32* @y.14
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %110, label %119, label %142, !dbg !711

119:                                              ; preds = %originalBBpart216
  %120 = load i32, i32* @x.13
  %121 = load i32, i32* @y.14
  %122 = sub i32 %120, 1
  %123 = mul i32 %120, %122
  %124 = urem i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %125, %126
  br i1 %127, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %119, %originalBB18alteredBB
  %128 = call i32* @__errno_location() #15, !dbg !712
  %129 = load i32, i32* %128, align 4, !dbg !712
  %130 = call i8* @gettext(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.44, i64 0, i64 0)) #10, !dbg !712
  %131 = load i64, i64* %14, align 8, !dbg !712
  %132 = call i8* @nth_parent(i64 %131), !dbg !712
  %133 = call i8* @quote(i8* %132), !dbg !712
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %129, i8* %130, i8* %133), !dbg !712
  %134 = load i32, i32* @x.13
  %135 = load i32, i32* @y.14
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  unreachable, !dbg !712

142:                                              ; preds = %originalBBpart216
  %143 = load i32, i32* @x.13
  %144 = load i32, i32* @y.14
  %145 = sub i32 %143, 1
  %146 = mul i32 %143, %145
  %147 = urem i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %148, %149
  br i1 %150, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %142, %originalBB22alteredBB
  %151 = load i32, i32* %16, align 4, !dbg !713
  %152 = icmp sle i32 0, %151, !dbg !715
  %153 = load i32, i32* @x.13
  %154 = load i32, i32* @y.14
  %155 = sub i32 %153, 1
  %156 = mul i32 %153, %155
  %157 = urem i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = icmp slt i32 %154, 10
  %160 = or i1 %158, %159
  br i1 %160, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %152, label %161, label %180, !dbg !716

161:                                              ; preds = %originalBBpart224
  %162 = load i32, i32* @x.13
  %163 = load i32, i32* @y.14
  %164 = sub i32 %162, 1
  %165 = mul i32 %162, %164
  %166 = urem i32 %165, 2
  %167 = icmp eq i32 %166, 0
  %168 = icmp slt i32 %163, 10
  %169 = or i1 %167, %168
  br i1 %169, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %161, %originalBB26alteredBB
  %170 = load i32, i32* %16, align 4, !dbg !717
  %171 = call i32 @fstat(i32 %170, %struct.stat* %17) #10, !dbg !718
  %172 = load i32, i32* @x.13
  %173 = load i32, i32* @y.14
  %174 = sub i32 %172, 1
  %175 = mul i32 %172, %174
  %176 = urem i32 %175, 2
  %177 = icmp eq i32 %176, 0
  %178 = icmp slt i32 %173, 10
  %179 = or i1 %177, %178
  br i1 %179, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %198, !dbg !716

180:                                              ; preds = %originalBBpart224
  %181 = load i32, i32* @x.13
  %182 = load i32, i32* @y.14
  %183 = sub i32 %181, 1
  %184 = mul i32 %181, %183
  %185 = urem i32 %184, 2
  %186 = icmp eq i32 %185, 0
  %187 = icmp slt i32 %182, 10
  %188 = or i1 %186, %187
  br i1 %188, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %180, %originalBB30alteredBB
  %189 = call i32 @stat(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i64 0, i64 0), %struct.stat* %17) #10, !dbg !719
  %190 = load i32, i32* @x.13
  %191 = load i32, i32* @y.14
  %192 = sub i32 %190, 1
  %193 = mul i32 %190, %192
  %194 = urem i32 %193, 2
  %195 = icmp eq i32 %194, 0
  %196 = icmp slt i32 %191, 10
  %197 = or i1 %195, %196
  br i1 %197, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %198, !dbg !716

198:                                              ; preds = %originalBBpart232, %originalBBpart228
  %199 = phi i32 [ %171, %originalBBpart228 ], [ %189, %originalBBpart232 ], !dbg !716
  %200 = load i32, i32* @x.13
  %201 = load i32, i32* @y.14
  %202 = sub i32 %200, 1
  %203 = mul i32 %200, %202
  %204 = urem i32 %203, 2
  %205 = icmp eq i32 %204, 0
  %206 = icmp slt i32 %201, 10
  %207 = or i1 %205, %206
  br i1 %207, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %198, %originalBB34alteredBB
  %208 = icmp slt i32 %199, 0, !dbg !720
  %209 = load i32, i32* @x.13
  %210 = load i32, i32* @y.14
  %211 = sub i32 %209, 1
  %212 = mul i32 %209, %211
  %213 = urem i32 %212, 2
  %214 = icmp eq i32 %213, 0
  %215 = icmp slt i32 %210, 10
  %216 = or i1 %214, %215
  br i1 %216, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br i1 %208, label %217, label %240, !dbg !721

217:                                              ; preds = %originalBBpart236
  %218 = load i32, i32* @x.13
  %219 = load i32, i32* @y.14
  %220 = sub i32 %218, 1
  %221 = mul i32 %218, %220
  %222 = urem i32 %221, 2
  %223 = icmp eq i32 %222, 0
  %224 = icmp slt i32 %219, 10
  %225 = or i1 %223, %224
  br i1 %225, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %217, %originalBB38alteredBB
  %226 = call i32* @__errno_location() #15, !dbg !722
  %227 = load i32, i32* %226, align 4, !dbg !722
  %228 = call i8* @gettext(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.41, i64 0, i64 0)) #10, !dbg !722
  %229 = load i64, i64* %14, align 8, !dbg !722
  %230 = call i8* @nth_parent(i64 %229), !dbg !722
  %231 = call i8* @quote(i8* %230), !dbg !722
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %227, i8* %228, i8* %231), !dbg !722
  %232 = load i32, i32* @x.13
  %233 = load i32, i32* @y.14
  %234 = sub i32 %232, 1
  %235 = mul i32 %232, %234
  %236 = urem i32 %235, 2
  %237 = icmp eq i32 %236, 0
  %238 = icmp slt i32 %233, 10
  %239 = or i1 %237, %238
  br i1 %239, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  unreachable, !dbg !722

240:                                              ; preds = %originalBBpart236
  %241 = load i32, i32* @x.13
  %242 = load i32, i32* @y.14
  %243 = sub i32 %241, 1
  %244 = mul i32 %241, %243
  %245 = urem i32 %244, 2
  %246 = icmp eq i32 %245, 0
  %247 = icmp slt i32 %242, 10
  %248 = or i1 %246, %247
  br i1 %248, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %240, %originalBB42alteredBB
  %249 = getelementptr inbounds %struct.stat, %struct.stat* %17, i32 0, i32 0, !dbg !723
  %250 = load i64, i64* %249, align 8, !dbg !723
  %251 = load %struct.stat*, %struct.stat** %12, align 8, !dbg !724
  %252 = getelementptr inbounds %struct.stat, %struct.stat* %251, i32 0, i32 0, !dbg !725
  %253 = load i64, i64* %252, align 8, !dbg !725
  %254 = icmp ne i64 %250, %253, !dbg !726
  %255 = zext i1 %254 to i8, !dbg !727
  store i8 %255, i8* %18, align 1, !dbg !727
  store i8 0, i8* %19, align 1, !dbg !728
  %256 = load i32, i32* @x.13
  %257 = load i32, i32* @y.14
  %258 = sub i32 %256, 1
  %259 = mul i32 %256, %258
  %260 = urem i32 %259, 2
  %261 = icmp eq i32 %260, 0
  %262 = icmp slt i32 %257, 10
  %263 = or i1 %261, %262
  br i1 %263, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br label %264, !dbg !729

264:                                              ; preds = %originalBBpart2169, %482, %originalBBpart2145, %originalBBpart244
  call void @llvm.dbg.declare(metadata %struct.dirent** %20, metadata !730, metadata !DIExpression()), !dbg !742
  call void @llvm.dbg.declare(metadata %struct.stat* %21, metadata !743, metadata !DIExpression()), !dbg !744
  call void @llvm.dbg.declare(metadata i64* %22, metadata !745, metadata !DIExpression()), !dbg !746
  %265 = load i32, i32* @x.13
  %266 = load i32, i32* @y.14
  %267 = sub i32 %265, 1
  %268 = mul i32 %265, %267
  %269 = urem i32 %268, 2
  %270 = icmp eq i32 %269, 0
  %271 = icmp slt i32 %266, 10
  %272 = or i1 %270, %271
  br i1 %272, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %264, %originalBB46alteredBB
  %273 = call i32* @__errno_location() #15, !dbg !747
  store i32 0, i32* %273, align 4, !dbg !748
  %274 = load %struct.__dirstream*, %struct.__dirstream** %15, align 8, !dbg !749
  %275 = call %struct.dirent* @readdir_ignoring_dot_and_dotdot(%struct.__dirstream* %274), !dbg !751
  store %struct.dirent* %275, %struct.dirent** %20, align 8, !dbg !752
  %276 = icmp eq %struct.dirent* %275, null, !dbg !753
  %277 = load i32, i32* @x.13
  %278 = load i32, i32* @y.14
  %279 = sub i32 %277, 1
  %280 = mul i32 %277, %279
  %281 = urem i32 %280, 2
  %282 = icmp eq i32 %281, 0
  %283 = icmp slt i32 %278, 10
  %284 = or i1 %282, %283
  br i1 %284, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br i1 %276, label %285, label %377, !dbg !754

285:                                              ; preds = %originalBBpart248
  %286 = load i32, i32* @x.13
  %287 = load i32, i32* @y.14
  %288 = sub i32 %286, 1
  %289 = mul i32 %286, %288
  %290 = urem i32 %289, 2
  %291 = icmp eq i32 %290, 0
  %292 = icmp slt i32 %287, 10
  %293 = or i1 %291, %292
  br i1 %293, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %285, %originalBB50alteredBB
  %294 = call i32* @__errno_location() #15, !dbg !755
  %295 = load i32, i32* %294, align 4, !dbg !755
  %296 = icmp ne i32 %295, 0, !dbg !755
  %297 = load i32, i32* @x.13
  %298 = load i32, i32* @y.14
  %299 = sub i32 %297, 1
  %300 = mul i32 %297, %299
  %301 = urem i32 %300, 2
  %302 = icmp eq i32 %301, 0
  %303 = icmp slt i32 %298, 10
  %304 = or i1 %302, %303
  br i1 %304, label %originalBBpart252, label %originalBB50alteredBB

originalBBpart252:                                ; preds = %originalBB50
  br i1 %296, label %305, label %376, !dbg !758

305:                                              ; preds = %originalBBpart252
  call void @llvm.dbg.declare(metadata i32* %23, metadata !759, metadata !DIExpression()), !dbg !761
  %306 = load i32, i32* @x.13
  %307 = load i32, i32* @y.14
  %308 = sub i32 %306, 1
  %309 = mul i32 %306, %308
  %310 = urem i32 %309, 2
  %311 = icmp eq i32 %310, 0
  %312 = icmp slt i32 %307, 10
  %313 = or i1 %311, %312
  br i1 %313, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %305, %originalBB54alteredBB
  %314 = call i32* @__errno_location() #15, !dbg !762
  %315 = load i32, i32* %314, align 4, !dbg !762
  store i32 %315, i32* %23, align 4, !dbg !761
  %316 = load %struct.__dirstream*, %struct.__dirstream** %15, align 8, !dbg !763
  %317 = call i32 @closedir(%struct.__dirstream* %316), !dbg !764
  %318 = load i32, i32* %23, align 4, !dbg !765
  %319 = call i32* @__errno_location() #15, !dbg !766
  store i32 %318, i32* %319, align 4, !dbg !767
  %320 = add i32 %315, 5
  %321 = add i32 %318, 2
  %322 = mul i32 %315, 4
  %323 = mul i32 %320, %320
  %324 = mul i32 %323, %323
  %325 = mul i32 %321, %321
  %326 = mul i32 %325, %325
  %327 = mul i32 %322, %322
  %328 = mul i32 %327, %327
  %329 = add i32 %324, %326
  %330 = sub i32 %329, %328
  %331 = mul i32 %330, 3
  %332 = add i32 %331, 4
  %333 = icmp eq i32 %332, 4
  %334 = load i32, i32* @x.13
  %335 = load i32, i32* @y.14
  %336 = sub i32 %334, 1
  %337 = mul i32 %334, %336
  %338 = urem i32 %337, 2
  %339 = icmp eq i32 %338, 0
  %340 = icmp slt i32 %335, 10
  %341 = or i1 %339, %340
  br i1 %341, label %originalBBpart2125, label %originalBB54alteredBB

originalBBpart2125:                               ; preds = %originalBB54
  br i1 %333, label %359, label %342

342:                                              ; preds = %originalBBpart2125
  %343 = load i32, i32* @x.13
  %344 = load i32, i32* @y.14
  %345 = sub i32 %343, 1
  %346 = mul i32 %343, %345
  %347 = urem i32 %346, 2
  %348 = icmp eq i32 %347, 0
  %349 = icmp slt i32 %344, 10
  %350 = or i1 %348, %349
  br i1 %350, label %originalBB127, label %originalBB127alteredBB

originalBB127:                                    ; preds = %342, %originalBB127alteredBB
  %351 = load i32, i32* @x.13
  %352 = load i32, i32* @y.14
  %353 = sub i32 %351, 1
  %354 = mul i32 %351, %353
  %355 = urem i32 %354, 2
  %356 = icmp eq i32 %355, 0
  %357 = icmp slt i32 %352, 10
  %358 = or i1 %356, %357
  br i1 %358, label %originalBBpart2129, label %originalBB127alteredBB

originalBBpart2129:                               ; preds = %originalBB127
  ret void

359:                                              ; preds = %originalBBpart2125
  %360 = load i32, i32* @x.13
  %361 = load i32, i32* @y.14
  %362 = sub i32 %360, 1
  %363 = mul i32 %360, %362
  %364 = urem i32 %363, 2
  %365 = icmp eq i32 %364, 0
  %366 = icmp slt i32 %361, 10
  %367 = or i1 %365, %366
  br i1 %367, label %originalBB131, label %originalBB131alteredBB

originalBB131:                                    ; preds = %359, %originalBB131alteredBB
  store %struct.__dirstream* null, %struct.__dirstream** %15, align 8, !dbg !768
  %368 = load i32, i32* @x.13
  %369 = load i32, i32* @y.14
  %370 = sub i32 %368, 1
  %371 = mul i32 %368, %370
  %372 = urem i32 %371, 2
  %373 = icmp eq i32 %372, 0
  %374 = icmp slt i32 %369, 10
  %375 = or i1 %373, %374
  br i1 %375, label %originalBBpart2133, label %originalBB131alteredBB

originalBBpart2133:                               ; preds = %originalBB131
  br label %376, !dbg !769

376:                                              ; preds = %originalBBpart2133, %originalBBpart252
  br label %567, !dbg !770

377:                                              ; preds = %originalBBpart248
  %378 = load i32, i32* @x.13
  %379 = load i32, i32* @y.14
  %380 = sub i32 %378, 1
  %381 = mul i32 %378, %380
  %382 = urem i32 %381, 2
  %383 = icmp eq i32 %382, 0
  %384 = icmp slt i32 %379, 10
  %385 = or i1 %383, %384
  br i1 %385, label %originalBB135, label %originalBB135alteredBB

originalBB135:                                    ; preds = %377, %originalBB135alteredBB
  %386 = load %struct.dirent*, %struct.dirent** %20, align 8, !dbg !771
  %387 = getelementptr inbounds %struct.dirent, %struct.dirent* %386, i32 0, i32 0, !dbg !771
  %388 = load i64, i64* %387, align 8, !dbg !771
  store i64 %388, i64* %22, align 8, !dbg !772
  %389 = load i64, i64* %22, align 8, !dbg !773
  %390 = icmp eq i64 %389, 0, !dbg !775
  %391 = load i32, i32* @x.13
  %392 = load i32, i32* @y.14
  %393 = sub i32 %391, 1
  %394 = mul i32 %391, %393
  %395 = urem i32 %394, 2
  %396 = icmp eq i32 %395, 0
  %397 = icmp slt i32 %392, 10
  %398 = or i1 %396, %397
  br i1 %398, label %originalBBpart2137, label %originalBB135alteredBB

originalBBpart2137:                               ; preds = %originalBB135
  br i1 %390, label %418, label %399, !dbg !776

399:                                              ; preds = %originalBBpart2137
  %400 = load i32, i32* @x.13
  %401 = load i32, i32* @y.14
  %402 = sub i32 %400, 1
  %403 = mul i32 %400, %402
  %404 = urem i32 %403, 2
  %405 = icmp eq i32 %404, 0
  %406 = icmp slt i32 %401, 10
  %407 = or i1 %405, %406
  br i1 %407, label %originalBB139, label %originalBB139alteredBB

originalBB139:                                    ; preds = %399, %originalBB139alteredBB
  %408 = load i8, i8* %18, align 1, !dbg !777
  %409 = trunc i8 %408 to i1, !dbg !777
  %410 = load i32, i32* @x.13
  %411 = load i32, i32* @y.14
  %412 = sub i32 %410, 1
  %413 = mul i32 %410, %412
  %414 = urem i32 %413, 2
  %415 = icmp eq i32 %414, 0
  %416 = icmp slt i32 %411, 10
  %417 = or i1 %415, %416
  br i1 %417, label %originalBBpart2141, label %originalBB139alteredBB

originalBBpart2141:                               ; preds = %originalBB139
  br i1 %409, label %418, label %460, !dbg !778

418:                                              ; preds = %originalBBpart2141, %originalBBpart2137
  %419 = load %struct.dirent*, %struct.dirent** %20, align 8, !dbg !779
  %420 = getelementptr inbounds %struct.dirent, %struct.dirent* %419, i32 0, i32 4, !dbg !782
  %421 = getelementptr inbounds [256 x i8], [256 x i8]* %420, i64 0, i64 0, !dbg !779
  %422 = call i32 @lstat(i8* %421, %struct.stat* %21) #10, !dbg !783
  %423 = icmp slt i32 %422, 0, !dbg !784
  br i1 %423, label %424, label %441, !dbg !785

424:                                              ; preds = %418
  %425 = load i32, i32* @x.13
  %426 = load i32, i32* @y.14
  %427 = sub i32 %425, 1
  %428 = mul i32 %425, %427
  %429 = urem i32 %428, 2
  %430 = icmp eq i32 %429, 0
  %431 = icmp slt i32 %426, 10
  %432 = or i1 %430, %431
  br i1 %432, label %originalBB143, label %originalBB143alteredBB

originalBB143:                                    ; preds = %424, %originalBB143alteredBB
  %433 = load i32, i32* @x.13
  %434 = load i32, i32* @y.14
  %435 = sub i32 %433, 1
  %436 = mul i32 %433, %435
  %437 = urem i32 %436, 2
  %438 = icmp eq i32 %437, 0
  %439 = icmp slt i32 %434, 10
  %440 = or i1 %438, %439
  br i1 %440, label %originalBBpart2145, label %originalBB143alteredBB

originalBBpart2145:                               ; preds = %originalBB143
  br label %264, !dbg !786, !llvm.loop !788

441:                                              ; preds = %418
  %442 = load i32, i32* @x.13
  %443 = load i32, i32* @y.14
  %444 = sub i32 %442, 1
  %445 = mul i32 %442, %444
  %446 = urem i32 %445, 2
  %447 = icmp eq i32 %446, 0
  %448 = icmp slt i32 %443, 10
  %449 = or i1 %447, %448
  br i1 %449, label %originalBB147, label %originalBB147alteredBB

originalBB147:                                    ; preds = %441, %originalBB147alteredBB
  %450 = getelementptr inbounds %struct.stat, %struct.stat* %21, i32 0, i32 1, !dbg !790
  %451 = load i64, i64* %450, align 8, !dbg !790
  store i64 %451, i64* %22, align 8, !dbg !791
  %452 = load i32, i32* @x.13
  %453 = load i32, i32* @y.14
  %454 = sub i32 %452, 1
  %455 = mul i32 %452, %454
  %456 = urem i32 %455, 2
  %457 = icmp eq i32 %456, 0
  %458 = icmp slt i32 %453, 10
  %459 = or i1 %457, %458
  br i1 %459, label %originalBBpart2149, label %originalBB147alteredBB

originalBBpart2149:                               ; preds = %originalBB147
  br label %460, !dbg !792

460:                                              ; preds = %originalBBpart2149, %originalBBpart2141
  %461 = load i32, i32* @x.13
  %462 = load i32, i32* @y.14
  %463 = sub i32 %461, 1
  %464 = mul i32 %461, %463
  %465 = urem i32 %464, 2
  %466 = icmp eq i32 %465, 0
  %467 = icmp slt i32 %462, 10
  %468 = or i1 %466, %467
  br i1 %468, label %originalBB151, label %originalBB151alteredBB

originalBB151:                                    ; preds = %460, %originalBB151alteredBB
  %469 = load i64, i64* %22, align 8, !dbg !793
  %470 = load %struct.stat*, %struct.stat** %12, align 8, !dbg !795
  %471 = getelementptr inbounds %struct.stat, %struct.stat* %470, i32 0, i32 1, !dbg !796
  %472 = load i64, i64* %471, align 8, !dbg !796
  %473 = icmp ne i64 %469, %472, !dbg !797
  %474 = load i32, i32* @x.13
  %475 = load i32, i32* @y.14
  %476 = sub i32 %474, 1
  %477 = mul i32 %474, %476
  %478 = urem i32 %477, 2
  %479 = icmp eq i32 %478, 0
  %480 = icmp slt i32 %475, 10
  %481 = or i1 %479, %480
  br i1 %481, label %originalBBpart2153, label %originalBB151alteredBB

originalBBpart2153:                               ; preds = %originalBB151
  br i1 %473, label %482, label %483, !dbg !798

482:                                              ; preds = %originalBBpart2153
  br label %264, !dbg !799, !llvm.loop !788

483:                                              ; preds = %originalBBpart2153
  %484 = load i32, i32* @x.13
  %485 = load i32, i32* @y.14
  %486 = sub i32 %484, 1
  %487 = mul i32 %484, %486
  %488 = urem i32 %487, 2
  %489 = icmp eq i32 %488, 0
  %490 = icmp slt i32 %485, 10
  %491 = or i1 %489, %490
  br i1 %491, label %originalBB155, label %originalBB155alteredBB

originalBB155:                                    ; preds = %483, %originalBB155alteredBB
  %492 = load i8, i8* %18, align 1, !dbg !800
  %493 = trunc i8 %492 to i1, !dbg !800
  %494 = load i32, i32* @x.13
  %495 = load i32, i32* @y.14
  %496 = sub i32 %494, 1
  %497 = mul i32 %494, %496
  %498 = urem i32 %497, 2
  %499 = icmp eq i32 %498, 0
  %500 = icmp slt i32 %495, 10
  %501 = or i1 %499, %500
  br i1 %501, label %originalBBpart2157, label %originalBB155alteredBB

originalBBpart2157:                               ; preds = %originalBB155
  br i1 %493, label %502, label %525, !dbg !802

502:                                              ; preds = %originalBBpart2157
  %503 = load i32, i32* @x.13
  %504 = load i32, i32* @y.14
  %505 = sub i32 %503, 1
  %506 = mul i32 %503, %505
  %507 = urem i32 %506, 2
  %508 = icmp eq i32 %507, 0
  %509 = icmp slt i32 %504, 10
  %510 = or i1 %508, %509
  br i1 %510, label %originalBB159, label %originalBB159alteredBB

originalBB159:                                    ; preds = %502, %originalBB159alteredBB
  %511 = getelementptr inbounds %struct.stat, %struct.stat* %21, i32 0, i32 0, !dbg !803
  %512 = load i64, i64* %511, align 8, !dbg !803
  %513 = load %struct.stat*, %struct.stat** %12, align 8, !dbg !804
  %514 = getelementptr inbounds %struct.stat, %struct.stat* %513, i32 0, i32 0, !dbg !805
  %515 = load i64, i64* %514, align 8, !dbg !805
  %516 = icmp eq i64 %512, %515, !dbg !806
  %517 = load i32, i32* @x.13
  %518 = load i32, i32* @y.14
  %519 = sub i32 %517, 1
  %520 = mul i32 %517, %519
  %521 = urem i32 %520, 2
  %522 = icmp eq i32 %521, 0
  %523 = icmp slt i32 %518, 10
  %524 = or i1 %522, %523
  br i1 %524, label %originalBBpart2161, label %originalBB159alteredBB

originalBBpart2161:                               ; preds = %originalBB159
  br i1 %516, label %525, label %550, !dbg !807

525:                                              ; preds = %originalBBpart2161, %originalBBpart2157
  %526 = load i32, i32* @x.13
  %527 = load i32, i32* @y.14
  %528 = sub i32 %526, 1
  %529 = mul i32 %526, %528
  %530 = urem i32 %529, 2
  %531 = icmp eq i32 %530, 0
  %532 = icmp slt i32 %527, 10
  %533 = or i1 %531, %532
  br i1 %533, label %originalBB163, label %originalBB163alteredBB

originalBB163:                                    ; preds = %525, %originalBB163alteredBB
  %534 = load %struct.file_name*, %struct.file_name** %13, align 8, !dbg !808
  %535 = load %struct.dirent*, %struct.dirent** %20, align 8, !dbg !810
  %536 = getelementptr inbounds %struct.dirent, %struct.dirent* %535, i32 0, i32 4, !dbg !811
  %537 = getelementptr inbounds [256 x i8], [256 x i8]* %536, i64 0, i64 0, !dbg !810
  %538 = load %struct.dirent*, %struct.dirent** %20, align 8, !dbg !812
  %539 = getelementptr inbounds %struct.dirent, %struct.dirent* %538, i32 0, i32 4, !dbg !812
  %540 = getelementptr inbounds [256 x i8], [256 x i8]* %539, i64 0, i64 0, !dbg !812
  %541 = call i64 @strlen(i8* %540) #13, !dbg !812
  call void @file_name_prepend(%struct.file_name* %534, i8* %537, i64 %541), !dbg !813
  store i8 1, i8* %19, align 1, !dbg !814
  %542 = load i32, i32* @x.13
  %543 = load i32, i32* @y.14
  %544 = sub i32 %542, 1
  %545 = mul i32 %542, %544
  %546 = urem i32 %545, 2
  %547 = icmp eq i32 %546, 0
  %548 = icmp slt i32 %543, 10
  %549 = or i1 %547, %548
  br i1 %549, label %originalBBpart2165, label %originalBB163alteredBB

originalBBpart2165:                               ; preds = %originalBB163
  br label %567, !dbg !815

550:                                              ; preds = %originalBBpart2161
  %551 = load i32, i32* @x.13
  %552 = load i32, i32* @y.14
  %553 = sub i32 %551, 1
  %554 = mul i32 %551, %553
  %555 = urem i32 %554, 2
  %556 = icmp eq i32 %555, 0
  %557 = icmp slt i32 %552, 10
  %558 = or i1 %556, %557
  br i1 %558, label %originalBB167, label %originalBB167alteredBB

originalBB167:                                    ; preds = %550, %originalBB167alteredBB
  %559 = load i32, i32* @x.13
  %560 = load i32, i32* @y.14
  %561 = sub i32 %559, 1
  %562 = mul i32 %559, %561
  %563 = urem i32 %562, 2
  %564 = icmp eq i32 %563, 0
  %565 = icmp slt i32 %560, 10
  %566 = or i1 %564, %565
  br i1 %566, label %originalBBpart2169, label %originalBB167alteredBB

originalBBpart2169:                               ; preds = %originalBB167
  br label %264, !dbg !729, !llvm.loop !788

567:                                              ; preds = %originalBBpart2165, %376
  %568 = load i32, i32* @x.13
  %569 = load i32, i32* @y.14
  %570 = sub i32 %568, 1
  %571 = mul i32 %568, %570
  %572 = urem i32 %571, 2
  %573 = icmp eq i32 %572, 0
  %574 = icmp slt i32 %569, 10
  %575 = or i1 %573, %574
  br i1 %575, label %originalBB171, label %originalBB171alteredBB

originalBB171:                                    ; preds = %567, %originalBB171alteredBB
  %576 = load %struct.__dirstream*, %struct.__dirstream** %15, align 8, !dbg !816
  %577 = icmp eq %struct.__dirstream* %576, null, !dbg !818
  %578 = load i32, i32* @x.13
  %579 = load i32, i32* @y.14
  %580 = sub i32 %578, 1
  %581 = mul i32 %578, %580
  %582 = urem i32 %581, 2
  %583 = icmp eq i32 %582, 0
  %584 = icmp slt i32 %579, 10
  %585 = or i1 %583, %584
  br i1 %585, label %originalBBpart2173, label %originalBB171alteredBB

originalBBpart2173:                               ; preds = %originalBB171
  br i1 %577, label %606, label %586, !dbg !819

586:                                              ; preds = %originalBBpart2173
  %587 = load i32, i32* @x.13
  %588 = load i32, i32* @y.14
  %589 = sub i32 %587, 1
  %590 = mul i32 %587, %589
  %591 = urem i32 %590, 2
  %592 = icmp eq i32 %591, 0
  %593 = icmp slt i32 %588, 10
  %594 = or i1 %592, %593
  br i1 %594, label %originalBB175, label %originalBB175alteredBB

originalBB175:                                    ; preds = %586, %originalBB175alteredBB
  %595 = load %struct.__dirstream*, %struct.__dirstream** %15, align 8, !dbg !820
  %596 = call i32 @closedir(%struct.__dirstream* %595), !dbg !821
  %597 = icmp ne i32 %596, 0, !dbg !822
  %598 = load i32, i32* @x.13
  %599 = load i32, i32* @y.14
  %600 = sub i32 %598, 1
  %601 = mul i32 %598, %600
  %602 = urem i32 %601, 2
  %603 = icmp eq i32 %602, 0
  %604 = icmp slt i32 %599, 10
  %605 = or i1 %603, %604
  br i1 %605, label %originalBBpart2177, label %originalBB175alteredBB

originalBBpart2177:                               ; preds = %originalBB175
  br i1 %597, label %606, label %629, !dbg !823

606:                                              ; preds = %originalBBpart2177, %originalBBpart2173
  %607 = load i32, i32* @x.13
  %608 = load i32, i32* @y.14
  %609 = sub i32 %607, 1
  %610 = mul i32 %607, %609
  %611 = urem i32 %610, 2
  %612 = icmp eq i32 %611, 0
  %613 = icmp slt i32 %608, 10
  %614 = or i1 %612, %613
  br i1 %614, label %originalBB179, label %originalBB179alteredBB

originalBB179:                                    ; preds = %606, %originalBB179alteredBB
  %615 = call i32* @__errno_location() #15, !dbg !824
  %616 = load i32, i32* %615, align 4, !dbg !824
  %617 = call i8* @gettext(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.45, i64 0, i64 0)) #10, !dbg !824
  %618 = load i64, i64* %14, align 8, !dbg !824
  %619 = call i8* @nth_parent(i64 %618), !dbg !824
  %620 = call i8* @quote(i8* %619), !dbg !824
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %616, i8* %617, i8* %620), !dbg !824
  %621 = load i32, i32* @x.13
  %622 = load i32, i32* @y.14
  %623 = sub i32 %621, 1
  %624 = mul i32 %621, %623
  %625 = urem i32 %624, 2
  %626 = icmp eq i32 %625, 0
  %627 = icmp slt i32 %622, 10
  %628 = or i1 %626, %627
  br i1 %628, label %originalBBpart2181, label %originalBB179alteredBB

originalBBpart2181:                               ; preds = %originalBB179
  unreachable, !dbg !824

629:                                              ; preds = %originalBBpart2177
  %630 = load i32, i32* @x.13
  %631 = load i32, i32* @y.14
  %632 = sub i32 %630, 1
  %633 = mul i32 %630, %632
  %634 = urem i32 %633, 2
  %635 = icmp eq i32 %634, 0
  %636 = icmp slt i32 %631, 10
  %637 = or i1 %635, %636
  br i1 %637, label %originalBB183, label %originalBB183alteredBB

originalBB183:                                    ; preds = %629, %originalBB183alteredBB
  %638 = load i8, i8* %19, align 1, !dbg !826
  %639 = trunc i8 %638 to i1, !dbg !826
  %640 = load i32, i32* @x.13
  %641 = load i32, i32* @y.14
  %642 = sub i32 %640, 1
  %643 = mul i32 %640, %642
  %644 = urem i32 %643, 2
  %645 = icmp eq i32 %644, 0
  %646 = icmp slt i32 %641, 10
  %647 = or i1 %645, %646
  br i1 %647, label %originalBBpart2185, label %originalBB183alteredBB

originalBBpart2185:                               ; preds = %originalBB183
  br i1 %639, label %669, label %648, !dbg !828

648:                                              ; preds = %originalBBpart2185
  %649 = load i32, i32* @x.13
  %650 = load i32, i32* @y.14
  %651 = sub i32 %649, 1
  %652 = mul i32 %649, %651
  %653 = urem i32 %652, 2
  %654 = icmp eq i32 %653, 0
  %655 = icmp slt i32 %650, 10
  %656 = or i1 %654, %655
  br i1 %656, label %originalBB187, label %originalBB187alteredBB

originalBB187:                                    ; preds = %648, %originalBB187alteredBB
  %657 = call i8* @gettext(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.46, i64 0, i64 0)) #10, !dbg !829
  %658 = load i64, i64* %14, align 8, !dbg !829
  %659 = call i8* @nth_parent(i64 %658), !dbg !829
  %660 = call i8* @quote(i8* %659), !dbg !829
  call void (i32, i32, i8*, ...) @error(i32 1, i32 0, i8* %657, i8* %660), !dbg !829
  %661 = load i32, i32* @x.13
  %662 = load i32, i32* @y.14
  %663 = sub i32 %661, 1
  %664 = mul i32 %661, %663
  %665 = urem i32 %664, 2
  %666 = icmp eq i32 %665, 0
  %667 = icmp slt i32 %662, 10
  %668 = or i1 %666, %667
  br i1 %668, label %originalBBpart2189, label %originalBB187alteredBB

originalBBpart2189:                               ; preds = %originalBB187
  unreachable, !dbg !829

669:                                              ; preds = %originalBBpart2185
  %670 = load i32, i32* @x.13
  %671 = load i32, i32* @y.14
  %672 = sub i32 %670, 1
  %673 = mul i32 %670, %672
  %674 = urem i32 %673, 2
  %675 = icmp eq i32 %674, 0
  %676 = icmp slt i32 %671, 10
  %677 = or i1 %675, %676
  br i1 %677, label %originalBB191, label %originalBB191alteredBB

originalBB191:                                    ; preds = %669, %originalBB191alteredBB
  %678 = load %struct.stat*, %struct.stat** %12, align 8, !dbg !830
  %679 = bitcast %struct.stat* %678 to i8*, !dbg !831
  %680 = bitcast %struct.stat* %17 to i8*, !dbg !831
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %679, i8* align 8 %680, i64 144, i1 false), !dbg !831
  %681 = load i32, i32* @x.13
  %682 = load i32, i32* @y.14
  %683 = sub i32 %681, 1
  %684 = mul i32 %681, %683
  %685 = urem i32 %684, 2
  %686 = icmp eq i32 %685, 0
  %687 = icmp slt i32 %682, 10
  %688 = or i1 %686, %687
  br i1 %688, label %originalBBpart2193, label %originalBB191alteredBB

originalBBpart2193:                               ; preds = %originalBB191
  ret void, !dbg !832

originalBBalteredBB:                              ; preds = %originalBB, %3
  %689 = alloca %struct.stat*, align 8
  %690 = alloca %struct.file_name*, align 8
  %691 = alloca i64, align 8
  %692 = alloca %struct.__dirstream*, align 8
  %693 = alloca i32, align 4
  %694 = alloca %struct.stat, align 8
  %695 = alloca i8, align 1
  %696 = alloca i8, align 1
  %697 = alloca %struct.dirent*, align 8
  %698 = alloca %struct.stat, align 8
  %699 = alloca i64, align 8
  %700 = alloca i32, align 4
  store %struct.stat* %0, %struct.stat** %689, align 8
  call void @llvm.dbg.declare(metadata %struct.stat** %689, metadata !833, metadata !DIExpression()), !dbg !674
  store %struct.file_name* %1, %struct.file_name** %690, align 8
  call void @llvm.dbg.declare(metadata %struct.file_name** %690, metadata !877, metadata !DIExpression()), !dbg !676
  store i64 %2, i64* %691, align 8
  call void @llvm.dbg.declare(metadata i64* %691, metadata !878, metadata !DIExpression()), !dbg !678
  call void @llvm.dbg.declare(metadata %struct.__dirstream** %692, metadata !879, metadata !DIExpression()), !dbg !684
  call void @llvm.dbg.declare(metadata i32* %693, metadata !880, metadata !DIExpression()), !dbg !686
  call void @llvm.dbg.declare(metadata %struct.stat* %694, metadata !881, metadata !DIExpression()), !dbg !688
  call void @llvm.dbg.declare(metadata i8* %695, metadata !882, metadata !DIExpression()), !dbg !690
  call void @llvm.dbg.declare(metadata i8* %696, metadata !883, metadata !DIExpression()), !dbg !692
  %701 = call %struct.__dirstream* @opendir(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i64 0, i64 0)), !dbg !693
  store %struct.__dirstream* %701, %struct.__dirstream** %692, align 8, !dbg !694
  %702 = load %struct.__dirstream*, %struct.__dirstream** %692, align 8, !dbg !695
  %703 = icmp eq %struct.__dirstream* %702, null, !dbg !697
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %42
  %704 = load %struct.__dirstream*, %struct.__dirstream** %15, align 8, !dbg !700
  %705 = call i32 @dirfd(%struct.__dirstream* %704) #10, !dbg !701
  store i32 %705, i32* %16, align 4, !dbg !702
  %706 = load i32, i32* %16, align 4, !dbg !703
  %707 = icmp sle i32 0, %706, !dbg !705
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %63
  %708 = load i32, i32* %16, align 4, !dbg !707
  %709 = call i32 @fchdir(i32 %708) #10, !dbg !708
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %82
  %710 = call i32 @chdir(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i64 0, i64 0)) #10, !dbg !709
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %100
  %711 = icmp slt i32 %101, 0, !dbg !710
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %119
  %712 = call i32* @__errno_location() #15, !dbg !712
  %713 = load i32, i32* %712, align 4, !dbg !712
  %714 = call i8* @gettext(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.44, i64 0, i64 0)) #10, !dbg !712
  %715 = load i64, i64* %14, align 8, !dbg !712
  %716 = call i8* @nth_parent(i64 %715), !dbg !712
  %717 = call i8* @quote(i8* %716), !dbg !712
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %713, i8* %714, i8* %717), !dbg !712
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %142
  %718 = load i32, i32* %16, align 4, !dbg !713
  %719 = icmp sle i32 0, %718, !dbg !715
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %161
  %720 = load i32, i32* %16, align 4, !dbg !717
  %721 = call i32 @fstat(i32 %720, %struct.stat* %17) #10, !dbg !718
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %180
  %722 = call i32 @stat(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i64 0, i64 0), %struct.stat* %17) #10, !dbg !719
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %198
  %723 = icmp slt i32 %199, 0, !dbg !720
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %217
  %724 = call i32* @__errno_location() #15, !dbg !722
  %725 = load i32, i32* %724, align 4, !dbg !722
  %726 = call i8* @gettext(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.41, i64 0, i64 0)) #10, !dbg !722
  %727 = load i64, i64* %14, align 8, !dbg !722
  %728 = call i8* @nth_parent(i64 %727), !dbg !722
  %729 = call i8* @quote(i8* %728), !dbg !722
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %725, i8* %726, i8* %729), !dbg !722
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %240
  %730 = getelementptr inbounds %struct.stat, %struct.stat* %17, i32 0, i32 0, !dbg !723
  %731 = load i64, i64* %730, align 8, !dbg !723
  %732 = load %struct.stat*, %struct.stat** %12, align 8, !dbg !724
  %733 = getelementptr inbounds %struct.stat, %struct.stat* %732, i32 0, i32 0, !dbg !725
  %734 = load i64, i64* %733, align 8, !dbg !725
  %735 = icmp ne i64 %731, %734, !dbg !726
  %736 = zext i1 %735 to i8, !dbg !727
  store i8 %736, i8* %18, align 1, !dbg !727
  store i8 0, i8* %19, align 1, !dbg !728
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %264
  %737 = call i32* @__errno_location() #15, !dbg !747
  store i32 0, i32* %737, align 4, !dbg !748
  %738 = load %struct.__dirstream*, %struct.__dirstream** %15, align 8, !dbg !749
  %739 = call %struct.dirent* @readdir_ignoring_dot_and_dotdot(%struct.__dirstream* %738), !dbg !751
  store %struct.dirent* %739, %struct.dirent** %20, align 8, !dbg !752
  %740 = icmp eq %struct.dirent* %739, null, !dbg !753
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %285
  %741 = call i32* @__errno_location() #15, !dbg !755
  %742 = load i32, i32* %741, align 4, !dbg !755
  %743 = icmp ne i32 %742, 0, !dbg !755
  br label %originalBB50

originalBB54alteredBB:                            ; preds = %originalBB54, %305
  %744 = call i32* @__errno_location() #15, !dbg !762
  %745 = load i32, i32* %744, align 4, !dbg !762
  store i32 %745, i32* %23, align 4, !dbg !761
  %746 = load %struct.__dirstream*, %struct.__dirstream** %15, align 8, !dbg !763
  %747 = call i32 @closedir(%struct.__dirstream* %746), !dbg !764
  %748 = load i32, i32* %23, align 4, !dbg !765
  %749 = call i32* @__errno_location() #15, !dbg !766
  store i32 %748, i32* %749, align 4, !dbg !767
  %_ = sub i32 %745, 5
  %gen = mul i32 %_, 5
  %_55 = sub i32 %745, 5
  %gen56 = mul i32 %_55, 5
  %_57 = shl i32 %745, 5
  %_58 = sub i32 %745, 5
  %gen59 = mul i32 %_58, 5
  %_60 = sub i32 %745, 5
  %gen61 = mul i32 %_60, 5
  %_62 = sub i32 0, %745
  %gen63 = add i32 %_62, 5
  %750 = add i32 %745, 5
  %_64 = sub i32 %748, 2
  %gen65 = mul i32 %_64, 2
  %_66 = shl i32 %748, 2
  %_67 = sub i32 %748, 2
  %gen68 = mul i32 %_67, 2
  %_69 = shl i32 %748, 2
  %_70 = shl i32 %748, 2
  %751 = add i32 %748, 2
  %_71 = shl i32 %745, 4
  %_72 = sub i32 0, %745
  %gen73 = add i32 %_72, 4
  %_74 = shl i32 %745, 4
  %752 = mul i32 %745, 4
  %_75 = sub i32 %750, %750
  %gen76 = mul i32 %_75, %750
  %_77 = sub i32 0, %750
  %gen78 = add i32 %_77, %750
  %753 = mul i32 %750, %750
  %_79 = shl i32 %753, %753
  %_80 = sub i32 %753, %753
  %gen81 = mul i32 %_80, %753
  %_82 = shl i32 %753, %753
  %_83 = shl i32 %753, %753
  %_84 = shl i32 %753, %753
  %_85 = sub i32 0, %753
  %gen86 = add i32 %_85, %753
  %754 = mul i32 %753, %753
  %_87 = sub i32 %751, %751
  %gen88 = mul i32 %_87, %751
  %755 = mul i32 %751, %751
  %_89 = sub i32 0, %755
  %gen90 = add i32 %_89, %755
  %_91 = sub i32 0, %755
  %gen92 = add i32 %_91, %755
  %_93 = sub i32 0, %755
  %gen94 = add i32 %_93, %755
  %756 = mul i32 %755, %755
  %_95 = shl i32 %752, %752
  %_96 = sub i32 0, %752
  %gen97 = add i32 %_96, %752
  %_98 = sub i32 %752, %752
  %gen99 = mul i32 %_98, %752
  %_100 = shl i32 %752, %752
  %_101 = sub i32 %752, %752
  %gen102 = mul i32 %_101, %752
  %_103 = sub i32 0, %752
  %gen104 = add i32 %_103, %752
  %_105 = shl i32 %752, %752
  %757 = mul i32 %752, %752
  %_106 = shl i32 %757, %757
  %_107 = shl i32 %757, %757
  %_108 = sub i32 0, %757
  %gen109 = add i32 %_108, %757
  %758 = mul i32 %757, %757
  %_110 = shl i32 %754, %756
  %759 = add i32 %754, %756
  %_111 = sub i32 0, %759
  %gen112 = add i32 %_111, %758
  %_113 = sub i32 0, %759
  %gen114 = add i32 %_113, %758
  %760 = sub i32 %759, %758
  %761 = mul i32 %760, 3
  %_115 = shl i32 %761, 4
  %_116 = sub i32 %761, 4
  %gen117 = mul i32 %_116, 4
  %_118 = sub i32 %761, 4
  %gen119 = mul i32 %_118, 4
  %_120 = sub i32 0, %761
  %gen121 = add i32 %_120, 4
  %_122 = shl i32 %761, 4
  %_123 = shl i32 %761, 4
  %762 = add i32 %761, 4
  %763 = icmp eq i32 %762, 4
  br label %originalBB54

originalBB127alteredBB:                           ; preds = %originalBB127, %342
  br label %originalBB127

originalBB131alteredBB:                           ; preds = %originalBB131, %359
  store %struct.__dirstream* null, %struct.__dirstream** %15, align 8, !dbg !768
  br label %originalBB131

originalBB135alteredBB:                           ; preds = %originalBB135, %377
  %764 = load %struct.dirent*, %struct.dirent** %20, align 8, !dbg !771
  %765 = getelementptr inbounds %struct.dirent, %struct.dirent* %764, i32 0, i32 0, !dbg !771
  %766 = load i64, i64* %765, align 8, !dbg !771
  store i64 %766, i64* %22, align 8, !dbg !772
  %767 = load i64, i64* %22, align 8, !dbg !773
  %768 = icmp eq i64 %767, 0, !dbg !775
  br label %originalBB135

originalBB139alteredBB:                           ; preds = %originalBB139, %399
  %769 = load i8, i8* %18, align 1, !dbg !777
  %770 = trunc i8 %769 to i1, !dbg !777
  br label %originalBB139

originalBB143alteredBB:                           ; preds = %originalBB143, %424
  br label %originalBB143

originalBB147alteredBB:                           ; preds = %originalBB147, %441
  %771 = getelementptr inbounds %struct.stat, %struct.stat* %21, i32 0, i32 1, !dbg !790
  %772 = load i64, i64* %771, align 8, !dbg !790
  store i64 %772, i64* %22, align 8, !dbg !791
  br label %originalBB147

originalBB151alteredBB:                           ; preds = %originalBB151, %460
  %773 = load i64, i64* %22, align 8, !dbg !793
  %774 = load %struct.stat*, %struct.stat** %12, align 8, !dbg !795
  %775 = getelementptr inbounds %struct.stat, %struct.stat* %774, i32 0, i32 1, !dbg !796
  %776 = load i64, i64* %775, align 8, !dbg !796
  %777 = icmp ne i64 %773, %776, !dbg !797
  br label %originalBB151

originalBB155alteredBB:                           ; preds = %originalBB155, %483
  %778 = load i8, i8* %18, align 1, !dbg !800
  %779 = trunc i8 %778 to i1, !dbg !800
  br label %originalBB155

originalBB159alteredBB:                           ; preds = %originalBB159, %502
  %780 = getelementptr inbounds %struct.stat, %struct.stat* %21, i32 0, i32 0, !dbg !803
  %781 = load i64, i64* %780, align 8, !dbg !803
  %782 = load %struct.stat*, %struct.stat** %12, align 8, !dbg !804
  %783 = getelementptr inbounds %struct.stat, %struct.stat* %782, i32 0, i32 0, !dbg !805
  %784 = load i64, i64* %783, align 8, !dbg !805
  %785 = icmp eq i64 %781, %784, !dbg !806
  br label %originalBB159

originalBB163alteredBB:                           ; preds = %originalBB163, %525
  %786 = load %struct.file_name*, %struct.file_name** %13, align 8, !dbg !808
  %787 = load %struct.dirent*, %struct.dirent** %20, align 8, !dbg !810
  %788 = getelementptr inbounds %struct.dirent, %struct.dirent* %787, i32 0, i32 4, !dbg !811
  %789 = getelementptr inbounds [256 x i8], [256 x i8]* %788, i64 0, i64 0, !dbg !810
  %790 = load %struct.dirent*, %struct.dirent** %20, align 8, !dbg !812
  %791 = getelementptr inbounds %struct.dirent, %struct.dirent* %790, i32 0, i32 4, !dbg !812
  %792 = getelementptr inbounds [256 x i8], [256 x i8]* %791, i64 0, i64 0, !dbg !812
  %793 = call i64 @strlen(i8* %792) #13, !dbg !812
  call void @file_name_prepend(%struct.file_name* %786, i8* %789, i64 %793), !dbg !813
  store i8 1, i8* %19, align 1, !dbg !814
  br label %originalBB163

originalBB167alteredBB:                           ; preds = %originalBB167, %550
  br label %originalBB167

originalBB171alteredBB:                           ; preds = %originalBB171, %567
  %794 = load %struct.__dirstream*, %struct.__dirstream** %15, align 8, !dbg !816
  %795 = icmp eq %struct.__dirstream* %794, null, !dbg !818
  br label %originalBB171

originalBB175alteredBB:                           ; preds = %originalBB175, %586
  %796 = load %struct.__dirstream*, %struct.__dirstream** %15, align 8, !dbg !820
  %797 = call i32 @closedir(%struct.__dirstream* %796), !dbg !821
  %798 = icmp ne i32 %797, 0, !dbg !822
  br label %originalBB175

originalBB179alteredBB:                           ; preds = %originalBB179, %606
  %799 = call i32* @__errno_location() #15, !dbg !824
  %800 = load i32, i32* %799, align 4, !dbg !824
  %801 = call i8* @gettext(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.45, i64 0, i64 0)) #10, !dbg !824
  %802 = load i64, i64* %14, align 8, !dbg !824
  %803 = call i8* @nth_parent(i64 %802), !dbg !824
  %804 = call i8* @quote(i8* %803), !dbg !824
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %800, i8* %801, i8* %804), !dbg !824
  br label %originalBB179

originalBB183alteredBB:                           ; preds = %originalBB183, %629
  %805 = load i8, i8* %19, align 1, !dbg !826
  %806 = trunc i8 %805 to i1, !dbg !826
  br label %originalBB183

originalBB187alteredBB:                           ; preds = %originalBB187, %648
  %807 = call i8* @gettext(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.46, i64 0, i64 0)) #10, !dbg !829
  %808 = load i64, i64* %14, align 8, !dbg !829
  %809 = call i8* @nth_parent(i64 %808), !dbg !829
  %810 = call i8* @quote(i8* %809), !dbg !829
  call void (i32, i32, i8*, ...) @error(i32 1, i32 0, i8* %807, i8* %810), !dbg !829
  br label %originalBB187

originalBB191alteredBB:                           ; preds = %originalBB191, %669
  %811 = load %struct.stat*, %struct.stat** %12, align 8, !dbg !830
  %812 = bitcast %struct.stat* %811 to i8*, !dbg !831
  %813 = bitcast %struct.stat* %17 to i8*, !dbg !831
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %812, i8* align 8 %813, i64 144, i1 false), !dbg !831
  br label %originalBB191
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @file_name_prepend(%struct.file_name*, i8*, i64) #4 !dbg !884 {
  %4 = load i32, i32* @x.15
  %5 = load i32, i32* @y.16
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca %struct.file_name*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i8*, align 8
  %18 = alloca i64, align 8
  store %struct.file_name* %0, %struct.file_name** %12, align 8
  call void @llvm.dbg.declare(metadata %struct.file_name** %12, metadata !887, metadata !DIExpression()), !dbg !888
  store i8* %1, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !889, metadata !DIExpression()), !dbg !890
  store i64 %2, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !891, metadata !DIExpression()), !dbg !892
  call void @llvm.dbg.declare(metadata i64* %15, metadata !893, metadata !DIExpression()), !dbg !894
  %19 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !895
  %20 = getelementptr inbounds %struct.file_name, %struct.file_name* %19, i32 0, i32 2, !dbg !896
  %21 = load i8*, i8** %20, align 8, !dbg !896
  %22 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !897
  %23 = getelementptr inbounds %struct.file_name, %struct.file_name* %22, i32 0, i32 0, !dbg !898
  %24 = load i8*, i8** %23, align 8, !dbg !898
  %25 = ptrtoint i8* %21 to i64, !dbg !899
  %26 = ptrtoint i8* %24 to i64, !dbg !899
  %27 = sub i64 %25, %26, !dbg !899
  store i64 %27, i64* %15, align 8, !dbg !894
  %28 = load i64, i64* %15, align 8, !dbg !900
  %29 = load i64, i64* %14, align 8, !dbg !902
  %30 = add i64 1, %29, !dbg !903
  %31 = icmp ult i64 %28, %30, !dbg !904
  %32 = load i32, i32* @x.15
  %33 = load i32, i32* @y.16
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %31, label %40, label %98, !dbg !905

40:                                               ; preds = %originalBBpart2
  call void @llvm.dbg.declare(metadata i64* %16, metadata !906, metadata !DIExpression()), !dbg !908
  %41 = load i32, i32* @x.15
  %42 = load i32, i32* @y.16
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBB8, label %originalBB8alteredBB

originalBB8:                                      ; preds = %40, %originalBB8alteredBB
  %49 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !909
  %50 = getelementptr inbounds %struct.file_name, %struct.file_name* %49, i32 0, i32 1, !dbg !910
  %51 = load i64, i64* %50, align 8, !dbg !910
  %52 = add i64 %51, 1, !dbg !911
  %53 = load i64, i64* %14, align 8, !dbg !912
  %54 = add i64 %52, %53, !dbg !913
  store i64 %54, i64* %16, align 8, !dbg !908
  call void @llvm.dbg.declare(metadata i8** %17, metadata !914, metadata !DIExpression()), !dbg !915
  %55 = load i64, i64* %16, align 8, !dbg !916
  %56 = call noalias i8* @xnmalloc(i64 2, i64 %55), !dbg !917
  store i8* %56, i8** %17, align 8, !dbg !915
  call void @llvm.dbg.declare(metadata i64* %18, metadata !918, metadata !DIExpression()), !dbg !919
  %57 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !920
  %58 = getelementptr inbounds %struct.file_name, %struct.file_name* %57, i32 0, i32 1, !dbg !921
  %59 = load i64, i64* %58, align 8, !dbg !921
  %60 = load i64, i64* %15, align 8, !dbg !922
  %61 = sub i64 %59, %60, !dbg !923
  store i64 %61, i64* %18, align 8, !dbg !919
  %62 = load i8*, i8** %17, align 8, !dbg !924
  %63 = load i64, i64* %16, align 8, !dbg !925
  %64 = mul i64 2, %63, !dbg !926
  %65 = getelementptr inbounds i8, i8* %62, i64 %64, !dbg !927
  %66 = load i64, i64* %18, align 8, !dbg !928
  %67 = sub i64 0, %66, !dbg !929
  %68 = getelementptr inbounds i8, i8* %65, i64 %67, !dbg !929
  %69 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !930
  %70 = getelementptr inbounds %struct.file_name, %struct.file_name* %69, i32 0, i32 2, !dbg !931
  store i8* %68, i8** %70, align 8, !dbg !932
  %71 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !933
  %72 = getelementptr inbounds %struct.file_name, %struct.file_name* %71, i32 0, i32 2, !dbg !934
  %73 = load i8*, i8** %72, align 8, !dbg !934
  %74 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !935
  %75 = getelementptr inbounds %struct.file_name, %struct.file_name* %74, i32 0, i32 0, !dbg !936
  %76 = load i8*, i8** %75, align 8, !dbg !936
  %77 = load i64, i64* %15, align 8, !dbg !937
  %78 = getelementptr inbounds i8, i8* %76, i64 %77, !dbg !938
  %79 = load i64, i64* %18, align 8, !dbg !939
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %73, i8* align 1 %78, i64 %79, i1 false), !dbg !940
  %80 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !941
  %81 = getelementptr inbounds %struct.file_name, %struct.file_name* %80, i32 0, i32 0, !dbg !942
  %82 = load i8*, i8** %81, align 8, !dbg !942
  call void @free(i8* %82) #10, !dbg !943
  %83 = load i8*, i8** %17, align 8, !dbg !944
  %84 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !945
  %85 = getelementptr inbounds %struct.file_name, %struct.file_name* %84, i32 0, i32 0, !dbg !946
  store i8* %83, i8** %85, align 8, !dbg !947
  %86 = load i64, i64* %16, align 8, !dbg !948
  %87 = mul i64 2, %86, !dbg !949
  %88 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !950
  %89 = getelementptr inbounds %struct.file_name, %struct.file_name* %88, i32 0, i32 1, !dbg !951
  store i64 %87, i64* %89, align 8, !dbg !952
  %90 = load i32, i32* @x.15
  %91 = load i32, i32* @y.16
  %92 = sub i32 %90, 1
  %93 = mul i32 %90, %92
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %91, 10
  %97 = or i1 %95, %96
  br i1 %97, label %originalBBpart241, label %originalBB8alteredBB

originalBBpart241:                                ; preds = %originalBB8
  br label %98, !dbg !953

98:                                               ; preds = %originalBBpart241, %originalBBpart2
  %99 = load i32, i32* @x.15
  %100 = load i32, i32* @y.16
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBB43, label %originalBB43alteredBB

originalBB43:                                     ; preds = %98, %originalBB43alteredBB
  %107 = load i64, i64* %14, align 8, !dbg !954
  %108 = add i64 1, %107, !dbg !955
  %109 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !956
  %110 = getelementptr inbounds %struct.file_name, %struct.file_name* %109, i32 0, i32 2, !dbg !957
  %111 = load i8*, i8** %110, align 8, !dbg !958
  %112 = sub i64 0, %108, !dbg !958
  %113 = getelementptr inbounds i8, i8* %111, i64 %112, !dbg !958
  store i8* %113, i8** %110, align 8, !dbg !958
  %114 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !959
  %115 = getelementptr inbounds %struct.file_name, %struct.file_name* %114, i32 0, i32 2, !dbg !960
  %116 = load i8*, i8** %115, align 8, !dbg !960
  %117 = getelementptr inbounds i8, i8* %116, i64 0, !dbg !959
  store i8 47, i8* %117, align 1, !dbg !961
  %118 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !962
  %119 = getelementptr inbounds %struct.file_name, %struct.file_name* %118, i32 0, i32 2, !dbg !963
  %120 = load i8*, i8** %119, align 8, !dbg !963
  %121 = getelementptr inbounds i8, i8* %120, i64 1, !dbg !964
  %122 = load i8*, i8** %13, align 8, !dbg !965
  %123 = load i64, i64* %14, align 8, !dbg !966
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %121, i8* align 1 %122, i64 %123, i1 false), !dbg !967
  %124 = load i32, i32* @x.15
  %125 = load i32, i32* @y.16
  %126 = sub i32 %124, 1
  %127 = mul i32 %124, %126
  %128 = urem i32 %127, 2
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %125, 10
  %131 = or i1 %129, %130
  br i1 %131, label %originalBBpart258, label %originalBB43alteredBB

originalBBpart258:                                ; preds = %originalBB43
  ret void, !dbg !968

originalBBalteredBB:                              ; preds = %originalBB, %3
  %132 = alloca %struct.file_name*, align 8
  %133 = alloca i8*, align 8
  %134 = alloca i64, align 8
  %135 = alloca i64, align 8
  %136 = alloca i64, align 8
  %137 = alloca i8*, align 8
  %138 = alloca i64, align 8
  store %struct.file_name* %0, %struct.file_name** %132, align 8
  call void @llvm.dbg.declare(metadata %struct.file_name** %132, metadata !969, metadata !DIExpression()), !dbg !888
  store i8* %1, i8** %133, align 8
  call void @llvm.dbg.declare(metadata i8** %133, metadata !991, metadata !DIExpression()), !dbg !890
  store i64 %2, i64* %134, align 8
  call void @llvm.dbg.declare(metadata i64* %134, metadata !992, metadata !DIExpression()), !dbg !892
  call void @llvm.dbg.declare(metadata i64* %135, metadata !993, metadata !DIExpression()), !dbg !894
  %139 = load %struct.file_name*, %struct.file_name** %132, align 8, !dbg !895
  %140 = getelementptr inbounds %struct.file_name, %struct.file_name* %139, i32 0, i32 2, !dbg !896
  %141 = load i8*, i8** %140, align 8, !dbg !896
  %142 = load %struct.file_name*, %struct.file_name** %132, align 8, !dbg !897
  %143 = getelementptr inbounds %struct.file_name, %struct.file_name* %142, i32 0, i32 0, !dbg !898
  %144 = load i8*, i8** %143, align 8, !dbg !898
  %145 = ptrtoint i8* %141 to i64, !dbg !899
  %146 = ptrtoint i8* %144 to i64, !dbg !899
  %_ = sub i64 0, %145
  %gen = add i64 %_, %146
  %_1 = shl i64 %145, %146
  %147 = sub i64 %145, %146, !dbg !899
  store i64 %147, i64* %135, align 8, !dbg !894
  %148 = load i64, i64* %135, align 8, !dbg !900
  %149 = load i64, i64* %134, align 8, !dbg !902
  %_2 = shl i64 1, %149
  %_3 = shl i64 1, %149
  %_4 = sub i64 0, 1
  %gen5 = add i64 %_4, %149
  %_6 = sub i64 0, 1
  %gen7 = add i64 %_6, %149
  %150 = add i64 1, %149, !dbg !903
  %151 = icmp ult i64 %148, %150, !dbg !904
  br label %originalBB

originalBB8alteredBB:                             ; preds = %originalBB8, %40
  %152 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !909
  %153 = getelementptr inbounds %struct.file_name, %struct.file_name* %152, i32 0, i32 1, !dbg !910
  %154 = load i64, i64* %153, align 8, !dbg !910
  %_9 = sub i64 %154, 1
  %gen10 = mul i64 %_9, 1
  %_11 = shl i64 %154, 1
  %155 = add i64 %154, 1, !dbg !911
  %156 = load i64, i64* %14, align 8, !dbg !912
  %_12 = shl i64 %155, %156
  %_13 = sub i64 0, %155
  %gen14 = add i64 %_13, %156
  %_15 = sub i64 0, %155
  %gen16 = add i64 %_15, %156
  %_17 = sub i64 %155, %156
  %gen18 = mul i64 %_17, %156
  %157 = add i64 %155, %156, !dbg !913
  store i64 %157, i64* %16, align 8, !dbg !908
  call void @llvm.dbg.declare(metadata !4, metadata !994, metadata !DIExpression()), !dbg !915
  %158 = load i64, i64* %16, align 8, !dbg !916
  %159 = call noalias i8* @xnmalloc(i64 2, i64 %158), !dbg !917
  store i8* %159, i8** %17, align 8, !dbg !915
  call void @llvm.dbg.declare(metadata !4, metadata !1018, metadata !DIExpression()), !dbg !919
  %160 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !920
  %161 = getelementptr inbounds %struct.file_name, %struct.file_name* %160, i32 0, i32 1, !dbg !921
  %162 = load i64, i64* %161, align 8, !dbg !921
  %163 = load i64, i64* %15, align 8, !dbg !922
  %_19 = sub i64 0, %162
  %gen20 = add i64 %_19, %163
  %_21 = sub i64 %162, %163
  %gen22 = mul i64 %_21, %163
  %_23 = shl i64 %162, %163
  %_24 = sub i64 %162, %163
  %gen25 = mul i64 %_24, %163
  %_26 = sub i64 %162, %163
  %gen27 = mul i64 %_26, %163
  %_28 = shl i64 %162, %163
  %_29 = sub i64 0, %162
  %gen30 = add i64 %_29, %163
  %_31 = sub i64 0, %162
  %gen32 = add i64 %_31, %163
  %164 = sub i64 %162, %163, !dbg !923
  store i64 %164, i64* %18, align 8, !dbg !919
  %165 = load i8*, i8** %17, align 8, !dbg !924
  %166 = load i64, i64* %16, align 8, !dbg !925
  %_33 = shl i64 2, %166
  %167 = mul i64 2, %166, !dbg !926
  %168 = getelementptr inbounds i8, i8* %165, i64 %167, !dbg !927
  %169 = load i64, i64* %18, align 8, !dbg !928
  %_34 = sub i64 0, 0
  %gen35 = add i64 %_34, %169
  %_36 = shl i64 0, %169
  %_37 = sub i64 0, 0
  %gen38 = add i64 %_37, %169
  %170 = sub i64 0, %169, !dbg !929
  %171 = getelementptr inbounds i8, i8* %168, i64 %170, !dbg !929
  %172 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !930
  %173 = getelementptr inbounds %struct.file_name, %struct.file_name* %172, i32 0, i32 2, !dbg !931
  store i8* %171, i8** %173, align 8, !dbg !932
  %174 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !933
  %175 = getelementptr inbounds %struct.file_name, %struct.file_name* %174, i32 0, i32 2, !dbg !934
  %176 = load i8*, i8** %175, align 8, !dbg !934
  %177 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !935
  %178 = getelementptr inbounds %struct.file_name, %struct.file_name* %177, i32 0, i32 0, !dbg !936
  %179 = load i8*, i8** %178, align 8, !dbg !936
  %180 = load i64, i64* %15, align 8, !dbg !937
  %181 = getelementptr inbounds i8, i8* %179, i64 %180, !dbg !938
  %182 = load i64, i64* %18, align 8, !dbg !939
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %176, i8* align 1 %181, i64 %182, i1 false), !dbg !940
  %183 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !941
  %184 = getelementptr inbounds %struct.file_name, %struct.file_name* %183, i32 0, i32 0, !dbg !942
  %185 = load i8*, i8** %184, align 8, !dbg !942
  call void @free(i8* %185) #10, !dbg !943
  %186 = load i8*, i8** %17, align 8, !dbg !944
  %187 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !945
  %188 = getelementptr inbounds %struct.file_name, %struct.file_name* %187, i32 0, i32 0, !dbg !946
  store i8* %186, i8** %188, align 8, !dbg !947
  %189 = load i64, i64* %16, align 8, !dbg !948
  %_39 = shl i64 2, %189
  %190 = mul i64 2, %189, !dbg !949
  %191 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !950
  %192 = getelementptr inbounds %struct.file_name, %struct.file_name* %191, i32 0, i32 1, !dbg !951
  store i64 %190, i64* %192, align 8, !dbg !952
  br label %originalBB8

originalBB43alteredBB:                            ; preds = %originalBB43, %98
  %193 = load i64, i64* %14, align 8, !dbg !954
  %_44 = sub i64 0, 1
  %gen45 = add i64 %_44, %193
  %_46 = sub i64 1, %193
  %gen47 = mul i64 %_46, %193
  %_48 = sub i64 1, %193
  %gen49 = mul i64 %_48, %193
  %194 = add i64 1, %193, !dbg !955
  %195 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !956
  %196 = getelementptr inbounds %struct.file_name, %struct.file_name* %195, i32 0, i32 2, !dbg !957
  %197 = load i8*, i8** %196, align 8, !dbg !958
  %_50 = sub i64 0, 0
  %gen51 = add i64 %_50, %194
  %_52 = sub i64 0, 0
  %gen53 = add i64 %_52, %194
  %_54 = shl i64 0, %194
  %_55 = sub i64 0, %194
  %gen56 = mul i64 %_55, %194
  %198 = sub i64 0, %194, !dbg !958
  %199 = getelementptr inbounds i8, i8* %197, i64 %198, !dbg !958
  store i8* %199, i8** %196, align 8, !dbg !958
  %200 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !959
  %201 = getelementptr inbounds %struct.file_name, %struct.file_name* %200, i32 0, i32 2, !dbg !960
  %202 = load i8*, i8** %201, align 8, !dbg !960
  %203 = getelementptr inbounds i8, i8* %202, i64 0, !dbg !959
  store i8 47, i8* %203, align 1, !dbg !961
  %204 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !962
  %205 = getelementptr inbounds %struct.file_name, %struct.file_name* %204, i32 0, i32 2, !dbg !963
  %206 = load i8*, i8** %205, align 8, !dbg !963
  %207 = getelementptr inbounds i8, i8* %206, i64 1, !dbg !964
  %208 = load i8*, i8** %13, align 8, !dbg !965
  %209 = load i64, i64* %14, align 8, !dbg !966
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %207, i8* align 1 %208, i64 %209, i1 false), !dbg !967
  br label %originalBB43
}

declare dso_local %struct.__dirstream* @opendir(i8*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @nth_parent(i64) #4 !dbg !1019 {
  %2 = alloca i64, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !1022, metadata !DIExpression()), !dbg !1023
  call void @llvm.dbg.declare(metadata i8** %3, metadata !1024, metadata !DIExpression()), !dbg !1025
  %6 = load i64, i64* %2, align 8, !dbg !1026
  %7 = call noalias i8* @xnmalloc(i64 3, i64 %6), !dbg !1027
  store i8* %7, i8** %3, align 8, !dbg !1025
  call void @llvm.dbg.declare(metadata i8** %4, metadata !1028, metadata !DIExpression()), !dbg !1029
  %8 = load i8*, i8** %3, align 8, !dbg !1030
  store i8* %8, i8** %4, align 8, !dbg !1029
  call void @llvm.dbg.declare(metadata i64* %5, metadata !1031, metadata !DIExpression()), !dbg !1033
  store i64 0, i64* %5, align 8, !dbg !1033
  br label %9, !dbg !1034

9:                                                ; preds = %originalBBpart222, %1
  %10 = load i32, i32* @x.17
  %11 = load i32, i32* @y.18
  %12 = sub i32 %10, 1
  %13 = mul i32 %10, %12
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  %16 = icmp slt i32 %11, 10
  %17 = or i1 %15, %16
  br i1 %17, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %9, %originalBBalteredBB
  %18 = load i64, i64* %5, align 8, !dbg !1035
  %19 = load i64, i64* %2, align 8, !dbg !1037
  %20 = icmp ult i64 %18, %19, !dbg !1038
  %21 = load i32, i32* @x.17
  %22 = load i32, i32* @y.18
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %20, label %29, label %68, !dbg !1039

29:                                               ; preds = %originalBBpart2
  %30 = load i32, i32* @x.17
  %31 = load i32, i32* @y.18
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %29, %originalBB1alteredBB
  %38 = load i8*, i8** %4, align 8, !dbg !1040
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %38, i8* align 1 getelementptr inbounds ([4 x i8], [4 x i8]* @.str.47, i64 0, i64 0), i64 3, i1 false), !dbg !1042
  %39 = load i8*, i8** %4, align 8, !dbg !1043
  %40 = getelementptr inbounds i8, i8* %39, i64 3, !dbg !1043
  store i8* %40, i8** %4, align 8, !dbg !1043
  %41 = load i32, i32* @x.17
  %42 = load i32, i32* @y.18
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %49, !dbg !1044

49:                                               ; preds = %originalBBpart24
  %50 = load i32, i32* @x.17
  %51 = load i32, i32* @y.18
  %52 = sub i32 %50, 1
  %53 = mul i32 %50, %52
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %55, %56
  br i1 %57, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %49, %originalBB6alteredBB
  %58 = load i64, i64* %5, align 8, !dbg !1045
  %59 = add i64 %58, 1, !dbg !1045
  store i64 %59, i64* %5, align 8, !dbg !1045
  %60 = load i32, i32* @x.17
  %61 = load i32, i32* @y.18
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBBpart222, label %originalBB6alteredBB

originalBBpart222:                                ; preds = %originalBB6
  br label %9, !dbg !1046, !llvm.loop !1047

68:                                               ; preds = %originalBBpart2
  %69 = load i32, i32* @x.17
  %70 = load i32, i32* @y.18
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBB24, label %originalBB24alteredBB

originalBB24:                                     ; preds = %68, %originalBB24alteredBB
  %77 = load i8*, i8** %4, align 8, !dbg !1049
  %78 = getelementptr inbounds i8, i8* %77, i64 -1, !dbg !1049
  store i8 0, i8* %78, align 1, !dbg !1050
  %79 = load i8*, i8** %3, align 8, !dbg !1051
  %80 = load i32, i32* @x.17
  %81 = load i32, i32* @y.18
  %82 = sub i32 %80, 1
  %83 = mul i32 %80, %82
  %84 = urem i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = icmp slt i32 %81, 10
  %87 = or i1 %85, %86
  br i1 %87, label %originalBBpart227, label %originalBB24alteredBB

originalBBpart227:                                ; preds = %originalBB24
  ret i8* %79, !dbg !1052

originalBBalteredBB:                              ; preds = %originalBB, %9
  %88 = load i64, i64* %5, align 8, !dbg !1035
  %89 = load i64, i64* %2, align 8, !dbg !1037
  %90 = icmp ult i64 %88, %89, !dbg !1038
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %29
  %91 = load i8*, i8** %4, align 8, !dbg !1040
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %91, i8* align 1 getelementptr inbounds ([4 x i8], [4 x i8]* @.str.47, i64 0, i64 0), i64 3, i1 false), !dbg !1042
  %92 = load i8*, i8** %4, align 8, !dbg !1043
  %93 = getelementptr inbounds i8, i8* %92, i64 3, !dbg !1043
  store i8* %93, i8** %4, align 8, !dbg !1043
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %49
  %94 = load i64, i64* %5, align 8, !dbg !1045
  %_ = shl i64 %94, 1
  %_7 = shl i64 %94, 1
  %_8 = sub i64 %94, 1
  %gen = mul i64 %_8, 1
  %_9 = shl i64 %94, 1
  %_10 = sub i64 %94, 1
  %gen11 = mul i64 %_10, 1
  %_12 = sub i64 0, %94
  %gen13 = add i64 %_12, 1
  %_14 = sub i64 %94, 1
  %gen15 = mul i64 %_14, 1
  %_16 = sub i64 0, %94
  %gen17 = add i64 %_16, 1
  %_18 = sub i64 0, %94
  %gen19 = add i64 %_18, 1
  %_20 = shl i64 %94, 1
  %95 = add i64 %94, 1, !dbg !1045
  store i64 %95, i64* %5, align 8, !dbg !1045
  br label %originalBB6

originalBB24alteredBB:                            ; preds = %originalBB24, %68
  %96 = load i8*, i8** %4, align 8, !dbg !1049
  %97 = getelementptr inbounds i8, i8* %96, i64 -1, !dbg !1049
  store i8 0, i8* %97, align 1, !dbg !1050
  %98 = load i8*, i8** %3, align 8, !dbg !1051
  br label %originalBB24
}

; Function Attrs: nounwind
declare dso_local i32 @dirfd(%struct.__dirstream*) #2

; Function Attrs: nounwind
declare dso_local i32 @fchdir(i32) #2

; Function Attrs: nounwind
declare dso_local i32 @chdir(i8*) #2

; Function Attrs: nounwind
declare dso_local i32 @fstat(i32, %struct.stat*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.dirent* @readdir_ignoring_dot_and_dotdot(%struct.__dirstream*) #4 !dbg !1053 {
  %2 = load i32, i32* @x.19
  %3 = load i32, i32* @y.20
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct.__dirstream*, align 8
  %11 = alloca %struct.dirent*, align 8
  store %struct.__dirstream* %0, %struct.__dirstream** %10, align 8
  call void @llvm.dbg.declare(metadata %struct.__dirstream** %10, metadata !1056, metadata !DIExpression()), !dbg !1057
  %12 = load i32, i32* @x.19
  %13 = load i32, i32* @y.20
  %14 = sub i32 %12, 1
  %15 = mul i32 %12, %14
  %16 = urem i32 %15, 2
  %17 = icmp eq i32 %16, 0
  %18 = icmp slt i32 %13, 10
  %19 = or i1 %17, %18
  br i1 %19, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %20, !dbg !1058

20:                                               ; preds = %originalBBpart216, %originalBBpart2
  call void @llvm.dbg.declare(metadata %struct.dirent** %11, metadata !1059, metadata !DIExpression()), !dbg !1061
  %21 = load i32, i32* @x.19
  %22 = load i32, i32* @y.20
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %20, %originalBB1alteredBB
  %29 = load %struct.__dirstream*, %struct.__dirstream** %10, align 8, !dbg !1062
  %30 = call %struct.dirent* @readdir(%struct.__dirstream* %29), !dbg !1063
  store %struct.dirent* %30, %struct.dirent** %11, align 8, !dbg !1061
  %31 = load %struct.dirent*, %struct.dirent** %11, align 8, !dbg !1064
  %32 = icmp eq %struct.dirent* %31, null, !dbg !1066
  %33 = load i32, i32* @x.19
  %34 = load i32, i32* @y.20
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %32, label %62, label %41, !dbg !1067

41:                                               ; preds = %originalBBpart24
  %42 = load i32, i32* @x.19
  %43 = load i32, i32* @y.20
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %41, %originalBB6alteredBB
  %50 = load %struct.dirent*, %struct.dirent** %11, align 8, !dbg !1068
  %51 = getelementptr inbounds %struct.dirent, %struct.dirent* %50, i32 0, i32 4, !dbg !1069
  %52 = getelementptr inbounds [256 x i8], [256 x i8]* %51, i64 0, i64 0, !dbg !1068
  %53 = call zeroext i1 @dot_or_dotdot(i8* %52), !dbg !1070
  %54 = load i32, i32* @x.19
  %55 = load i32, i32* @y.20
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %53, label %80, label %62, !dbg !1071

62:                                               ; preds = %originalBBpart28, %originalBBpart24
  %63 = load i32, i32* @x.19
  %64 = load i32, i32* @y.20
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %62, %originalBB10alteredBB
  %71 = load %struct.dirent*, %struct.dirent** %11, align 8, !dbg !1072
  %72 = load i32, i32* @x.19
  %73 = load i32, i32* @y.20
  %74 = sub i32 %72, 1
  %75 = mul i32 %72, %74
  %76 = urem i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %77, %78
  br i1 %79, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  ret %struct.dirent* %71, !dbg !1073

80:                                               ; preds = %originalBBpart28
  %81 = load i32, i32* @x.19
  %82 = load i32, i32* @y.20
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %80, %originalBB14alteredBB
  %89 = load i32, i32* @x.19
  %90 = load i32, i32* @y.20
  %91 = sub i32 %89, 1
  %92 = mul i32 %89, %91
  %93 = urem i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %94, %95
  br i1 %96, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %20, !dbg !1058, !llvm.loop !1074

originalBBalteredBB:                              ; preds = %originalBB, %1
  %97 = alloca %struct.__dirstream*, align 8
  %98 = alloca %struct.dirent*, align 8
  store %struct.__dirstream* %0, %struct.__dirstream** %97, align 8
  call void @llvm.dbg.declare(metadata %struct.__dirstream** %97, metadata !1076, metadata !DIExpression()), !dbg !1057
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %20
  %99 = load %struct.__dirstream*, %struct.__dirstream** %10, align 8, !dbg !1062
  %100 = call %struct.dirent* @readdir(%struct.__dirstream* %99), !dbg !1063
  store %struct.dirent* %100, %struct.dirent** %11, align 8, !dbg !1061
  %101 = load %struct.dirent*, %struct.dirent** %11, align 8, !dbg !1064
  %102 = icmp eq %struct.dirent* %101, null, !dbg !1066
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %41
  %103 = load %struct.dirent*, %struct.dirent** %11, align 8, !dbg !1068
  %104 = getelementptr inbounds %struct.dirent, %struct.dirent* %103, i32 0, i32 4, !dbg !1069
  %105 = getelementptr inbounds [256 x i8], [256 x i8]* %104, i64 0, i64 0, !dbg !1068
  %106 = call zeroext i1 @dot_or_dotdot(i8* %105), !dbg !1070
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %62
  %107 = load %struct.dirent*, %struct.dirent** %11, align 8, !dbg !1072
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %80
  br label %originalBB14
}

declare dso_local i32 @closedir(%struct.__dirstream*) #3

; Function Attrs: nounwind
declare dso_local i32 @lstat(i8*, %struct.stat*) #2

; Function Attrs: nounwind readonly
declare dso_local i64 @strlen(i8*) #7

declare dso_local %struct.dirent* @readdir(%struct.__dirstream*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @dot_or_dotdot(i8*) #4 !dbg !1101 {
  %2 = load i32, i32* @x.21
  %3 = load i32, i32* @y.22
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i1, align 1
  %11 = alloca i8*, align 8
  %12 = alloca i8, align 1
  store i8* %0, i8** %11, align 8
  call void @llvm.dbg.declare(metadata i8** %11, metadata !1104, metadata !DIExpression()), !dbg !1105
  %13 = load i8*, i8** %11, align 8, !dbg !1106
  %14 = getelementptr inbounds i8, i8* %13, i64 0, !dbg !1106
  %15 = load i8, i8* %14, align 1, !dbg !1106
  %16 = sext i8 %15 to i32, !dbg !1106
  %17 = icmp eq i32 %16, 46, !dbg !1108
  %18 = load i32, i32* @x.21
  %19 = load i32, i32* @y.22
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %17, label %26, label %94, !dbg !1109

26:                                               ; preds = %originalBBpart2
  call void @llvm.dbg.declare(metadata i8* %12, metadata !1110, metadata !DIExpression()), !dbg !1112
  %27 = load i32, i32* @x.21
  %28 = load i32, i32* @y.22
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %26, %originalBB1alteredBB
  %35 = load i8*, i8** %11, align 8, !dbg !1113
  %36 = load i8*, i8** %11, align 8, !dbg !1114
  %37 = getelementptr inbounds i8, i8* %36, i64 1, !dbg !1114
  %38 = load i8, i8* %37, align 1, !dbg !1114
  %39 = sext i8 %38 to i32, !dbg !1114
  %40 = icmp eq i32 %39, 46, !dbg !1115
  %41 = zext i1 %40 to i32, !dbg !1115
  %42 = add nsw i32 %41, 1, !dbg !1116
  %43 = sext i32 %42 to i64, !dbg !1113
  %44 = getelementptr inbounds i8, i8* %35, i64 %43, !dbg !1113
  %45 = load i8, i8* %44, align 1, !dbg !1113
  store i8 %45, i8* %12, align 1, !dbg !1112
  %46 = load i8, i8* %12, align 1, !dbg !1117
  %47 = icmp ne i8 %46, 0, !dbg !1117
  %48 = load i32, i32* @x.21
  %49 = load i32, i32* @y.22
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %47, label %56, label %76, !dbg !1118

56:                                               ; preds = %originalBBpart24
  %57 = load i32, i32* @x.21
  %58 = load i32, i32* @y.22
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %56, %originalBB6alteredBB
  %65 = load i8, i8* %12, align 1, !dbg !1119
  %66 = sext i8 %65 to i32, !dbg !1119
  %67 = icmp eq i32 %66, 47, !dbg !1119
  %68 = load i32, i32* @x.21
  %69 = load i32, i32* @y.22
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %76, !dbg !1118

76:                                               ; preds = %originalBBpart28, %originalBBpart24
  %77 = phi i1 [ true, %originalBBpart24 ], [ %67, %originalBBpart28 ]
  %78 = load i32, i32* @x.21
  %79 = load i32, i32* @y.22
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %76, %originalBB10alteredBB
  store i1 %77, i1* %10, align 1, !dbg !1120
  %86 = load i32, i32* @x.21
  %87 = load i32, i32* @y.22
  %88 = sub i32 %86, 1
  %89 = mul i32 %86, %88
  %90 = urem i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %91, %92
  br i1 %93, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %111, !dbg !1120

94:                                               ; preds = %originalBBpart2
  %95 = load i32, i32* @x.21
  %96 = load i32, i32* @y.22
  %97 = sub i32 %95, 1
  %98 = mul i32 %95, %97
  %99 = urem i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %96, 10
  %102 = or i1 %100, %101
  br i1 %102, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %94, %originalBB14alteredBB
  store i1 false, i1* %10, align 1, !dbg !1121
  %103 = load i32, i32* @x.21
  %104 = load i32, i32* @y.22
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %111, !dbg !1121

111:                                              ; preds = %originalBBpart216, %originalBBpart212
  %112 = load i32, i32* @x.21
  %113 = load i32, i32* @y.22
  %114 = sub i32 %112, 1
  %115 = mul i32 %112, %114
  %116 = urem i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %113, 10
  %119 = or i1 %117, %118
  br i1 %119, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %111, %originalBB18alteredBB
  %120 = load i1, i1* %10, align 1, !dbg !1122
  %121 = load i32, i32* @x.21
  %122 = load i32, i32* @y.22
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  ret i1 %120, !dbg !1122

originalBBalteredBB:                              ; preds = %originalBB, %1
  %129 = alloca i1, align 1
  %130 = alloca i8*, align 8
  %131 = alloca i8, align 1
  store i8* %0, i8** %130, align 8
  call void @llvm.dbg.declare(metadata i8** %130, metadata !1123, metadata !DIExpression()), !dbg !1105
  %132 = load i8*, i8** %130, align 8, !dbg !1106
  %133 = getelementptr inbounds i8, i8* %132, i64 0, !dbg !1106
  %134 = load i8, i8* %133, align 1, !dbg !1106
  %135 = sext i8 %134 to i32, !dbg !1106
  %136 = icmp eq i32 %135, 46, !dbg !1108
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %26
  %137 = load i8*, i8** %11, align 8, !dbg !1113
  %138 = load i8*, i8** %11, align 8, !dbg !1114
  %139 = getelementptr inbounds i8, i8* %138, i64 1, !dbg !1114
  %140 = load i8, i8* %139, align 1, !dbg !1114
  %141 = sext i8 %140 to i32, !dbg !1114
  %142 = icmp eq i32 %141, 46, !dbg !1115
  %143 = zext i1 %142 to i32, !dbg !1115
  %_ = sub i32 %143, 1
  %gen = mul i32 %_, 1
  %_2 = shl i32 %143, 1
  %144 = add nsw i32 %143, 1, !dbg !1116
  %145 = sext i32 %144 to i64, !dbg !1113
  %146 = getelementptr inbounds i8, i8* %137, i64 %145, !dbg !1113
  %147 = load i8, i8* %146, align 1, !dbg !1113
  store i8 %147, i8* %12, align 1, !dbg !1112
  %148 = load i8, i8* %12, align 1, !dbg !1117
  %149 = icmp ne i8 %148, 0, !dbg !1117
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %56
  %150 = load i8, i8* %12, align 1, !dbg !1119
  %151 = sext i8 %150 to i32, !dbg !1119
  %152 = icmp eq i32 %151, 47, !dbg !1119
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %76
  store i1 %77, i1* %10, align 1, !dbg !1120
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %94
  store i1 false, i1* %10, align 1, !dbg !1121
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %111
  %153 = load i1, i1* %10, align 1, !dbg !1122
  br label %originalBB18
}

; Function Attrs: nounwind readonly
declare dso_local i8* @strstr(i8*, i8*) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal void @close_stdout() #4 !dbg !1137 {
  %1 = load i32, i32* @x.23
  %2 = load i32, i32* @y.24
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = alloca i8*, align 8
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1140
  %11 = call i32 @close_stream(%struct._IO_FILE* %10), !dbg !1142
  %12 = icmp ne i32 %11, 0, !dbg !1143
  %13 = load i32, i32* @x.23
  %14 = load i32, i32* @y.24
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %21, label %108, !dbg !1144

21:                                               ; preds = %originalBBpart2
  %22 = load i8, i8* @ignore_EPIPE, align 1, !dbg !1145
  %23 = trunc i8 %22 to i1, !dbg !1145
  br i1 %23, label %24, label %44, !dbg !1146

24:                                               ; preds = %21
  %25 = load i32, i32* @x.23
  %26 = load i32, i32* @y.24
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %24, %originalBB1alteredBB
  %33 = call i32* @__errno_location() #15, !dbg !1147
  %34 = load i32, i32* %33, align 4, !dbg !1147
  %35 = icmp eq i32 %34, 32, !dbg !1148
  %36 = load i32, i32* @x.23
  %37 = load i32, i32* @y.24
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %35, label %108, label %44, !dbg !1149

44:                                               ; preds = %originalBBpart24, %21
  call void @llvm.dbg.declare(metadata i8** %9, metadata !1150, metadata !DIExpression()), !dbg !1152
  %45 = load i32, i32* @x.23
  %46 = load i32, i32* @y.24
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %44, %originalBB6alteredBB
  %53 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.51, i64 0, i64 0)) #10, !dbg !1153
  store i8* %53, i8** %9, align 8, !dbg !1152
  %54 = load i8*, i8** @file_name, align 8, !dbg !1154
  %55 = icmp ne i8* %54, null, !dbg !1154
  %56 = load i32, i32* @x.23
  %57 = load i32, i32* @y.24
  %58 = sub i32 %56, 1
  %59 = mul i32 %56, %58
  %60 = urem i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %57, 10
  %63 = or i1 %61, %62
  br i1 %63, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %55, label %64, label %86, !dbg !1156

64:                                               ; preds = %originalBBpart28
  %65 = load i32, i32* @x.23
  %66 = load i32, i32* @y.24
  %67 = sub i32 %65, 1
  %68 = mul i32 %65, %67
  %69 = urem i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %70, %71
  br i1 %72, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %64, %originalBB10alteredBB
  %73 = call i32* @__errno_location() #15, !dbg !1157
  %74 = load i32, i32* %73, align 4, !dbg !1157
  %75 = load i8*, i8** @file_name, align 8, !dbg !1158
  %76 = call i8* @quotearg_colon(i8* %75), !dbg !1159
  %77 = load i8*, i8** %9, align 8, !dbg !1160
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %74, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.52, i64 0, i64 0), i8* %76, i8* %77), !dbg !1161
  %78 = load i32, i32* @x.23
  %79 = load i32, i32* @y.24
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %90, !dbg !1161

86:                                               ; preds = %originalBBpart28
  %87 = call i32* @__errno_location() #15, !dbg !1162
  %88 = load i32, i32* %87, align 4, !dbg !1162
  %89 = load i8*, i8** %9, align 8, !dbg !1163
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %88, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.53, i64 0, i64 0), i8* %89), !dbg !1164
  br label %90

90:                                               ; preds = %86, %originalBBpart212
  %91 = load i32, i32* @x.23
  %92 = load i32, i32* @y.24
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %90, %originalBB14alteredBB
  %99 = load volatile i32, i32* @exit_failure, align 4, !dbg !1165
  call void @_exit(i32 %99) #14, !dbg !1166
  %100 = load i32, i32* @x.23
  %101 = load i32, i32* @y.24
  %102 = sub i32 %100, 1
  %103 = mul i32 %100, %102
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %105, %106
  br i1 %107, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  unreachable, !dbg !1166

108:                                              ; preds = %originalBBpart24, %originalBBpart2
  %109 = load i32, i32* @x.23
  %110 = load i32, i32* @y.24
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %108, %originalBB18alteredBB
  %117 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1167
  %118 = call i32 @close_stream(%struct._IO_FILE* %117), !dbg !1169
  %119 = icmp ne i32 %118, 0, !dbg !1170
  %120 = load i32, i32* @x.23
  %121 = load i32, i32* @y.24
  %122 = sub i32 %120, 1
  %123 = mul i32 %120, %122
  %124 = urem i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %125, %126
  br i1 %127, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %119, label %128, label %146, !dbg !1171

128:                                              ; preds = %originalBBpart220
  %129 = load i32, i32* @x.23
  %130 = load i32, i32* @y.24
  %131 = sub i32 %129, 1
  %132 = mul i32 %129, %131
  %133 = urem i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %130, 10
  %136 = or i1 %134, %135
  br i1 %136, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %128, %originalBB22alteredBB
  %137 = load volatile i32, i32* @exit_failure, align 4, !dbg !1172
  call void @_exit(i32 %137) #14, !dbg !1173
  %138 = load i32, i32* @x.23
  %139 = load i32, i32* @y.24
  %140 = sub i32 %138, 1
  %141 = mul i32 %138, %140
  %142 = urem i32 %141, 2
  %143 = icmp eq i32 %142, 0
  %144 = icmp slt i32 %139, 10
  %145 = or i1 %143, %144
  br i1 %145, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  unreachable, !dbg !1173

146:                                              ; preds = %originalBBpart220
  %147 = load i32, i32* @x.23
  %148 = load i32, i32* @y.24
  %149 = sub i32 %147, 1
  %150 = mul i32 %147, %149
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %152, %153
  br i1 %154, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %146, %originalBB26alteredBB
  %155 = load i32, i32* @x.23
  %156 = load i32, i32* @y.24
  %157 = sub i32 %155, 1
  %158 = mul i32 %155, %157
  %159 = urem i32 %158, 2
  %160 = icmp eq i32 %159, 0
  %161 = icmp slt i32 %156, 10
  %162 = or i1 %160, %161
  br i1 %162, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  ret void, !dbg !1174

originalBBalteredBB:                              ; preds = %originalBB, %0
  %163 = alloca i8*, align 8
  %164 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1140
  %165 = call i32 @close_stream(%struct._IO_FILE* %164), !dbg !1142
  %166 = icmp ne i32 %165, 0, !dbg !1143
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %24
  %167 = call i32* @__errno_location() #15, !dbg !1147
  %168 = load i32, i32* %167, align 4, !dbg !1147
  %169 = icmp eq i32 %168, 32, !dbg !1148
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %44
  %170 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.51, i64 0, i64 0)) #10, !dbg !1153
  store i8* %170, i8** %9, align 8, !dbg !1152
  %171 = load i8*, i8** @file_name, align 8, !dbg !1154
  %172 = icmp ne i8* %171, null, !dbg !1154
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %64
  %173 = call i32* @__errno_location() #15, !dbg !1157
  %174 = load i32, i32* %173, align 4, !dbg !1157
  %175 = load i8*, i8** @file_name, align 8, !dbg !1158
  %176 = call i8* @quotearg_colon(i8* %175), !dbg !1159
  %177 = load i8*, i8** %9, align 8, !dbg !1160
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %174, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.52, i64 0, i64 0), i8* %176, i8* %177), !dbg !1161
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %90
  %178 = load volatile i32, i32* @exit_failure, align 4, !dbg !1165
  call void @_exit(i32 %178) #14, !dbg !1166
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %108
  %179 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1167
  %180 = call i32 @close_stream(%struct._IO_FILE* %179), !dbg !1169
  %181 = icmp ne i32 %180, 0, !dbg !1170
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %128
  %182 = load volatile i32, i32* @exit_failure, align 4, !dbg !1172
  call void @_exit(i32 %182) #14, !dbg !1173
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %146
  br label %originalBB26
}

; Function Attrs: noreturn
declare dso_local void @_exit(i32) #9

; Function Attrs: noinline nounwind optnone uwtable
define internal void @set_program_name(i8*) #4 !dbg !1175 {
  %2 = load i32, i32* @x.25
  %3 = load i32, i32* @y.26
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !1176, metadata !DIExpression()), !dbg !1177
  call void @llvm.dbg.declare(metadata i8** %11, metadata !1178, metadata !DIExpression()), !dbg !1179
  call void @llvm.dbg.declare(metadata i8** %12, metadata !1180, metadata !DIExpression()), !dbg !1181
  %13 = load i8*, i8** %10, align 8, !dbg !1182
  %14 = icmp eq i8* %13, null, !dbg !1184
  %15 = load i32, i32* @x.25
  %16 = load i32, i32* @y.26
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %14, label %23, label %42, !dbg !1185

23:                                               ; preds = %originalBBpart2
  %24 = load i32, i32* @x.25
  %25 = load i32, i32* @y.26
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %23, %originalBB1alteredBB
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1186
  %33 = call i32 @fputs(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.58, i64 0, i64 0), %struct._IO_FILE* %32), !dbg !1188
  call void @abort() #12, !dbg !1189
  %34 = load i32, i32* @x.25
  %35 = load i32, i32* @y.26
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  unreachable, !dbg !1189

42:                                               ; preds = %originalBBpart2
  %43 = load i32, i32* @x.25
  %44 = load i32, i32* @y.26
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %42, %originalBB6alteredBB
  %51 = load i8*, i8** %10, align 8, !dbg !1190
  %52 = call i8* @strrchr(i8* %51, i32 47) #13, !dbg !1191
  store i8* %52, i8** %11, align 8, !dbg !1192
  %53 = load i8*, i8** %11, align 8, !dbg !1193
  %54 = icmp ne i8* %53, null, !dbg !1194
  %55 = load i32, i32* @x.25
  %56 = load i32, i32* @y.26
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %54, label %63, label %82, !dbg !1193

63:                                               ; preds = %originalBBpart28
  %64 = load i32, i32* @x.25
  %65 = load i32, i32* @y.26
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %63, %originalBB10alteredBB
  %72 = load i8*, i8** %11, align 8, !dbg !1195
  %73 = getelementptr inbounds i8, i8* %72, i64 1, !dbg !1196
  %74 = load i32, i32* @x.25
  %75 = load i32, i32* @y.26
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %100, !dbg !1193

82:                                               ; preds = %originalBBpart28
  %83 = load i32, i32* @x.25
  %84 = load i32, i32* @y.26
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %82, %originalBB14alteredBB
  %91 = load i8*, i8** %10, align 8, !dbg !1197
  %92 = load i32, i32* @x.25
  %93 = load i32, i32* @y.26
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %100, !dbg !1193

100:                                              ; preds = %originalBBpart216, %originalBBpart212
  %101 = phi i8* [ %73, %originalBBpart212 ], [ %91, %originalBBpart216 ], !dbg !1193
  %102 = load i32, i32* @x.25
  %103 = load i32, i32* @y.26
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %100, %originalBB18alteredBB
  store i8* %101, i8** %12, align 8, !dbg !1198
  %110 = load i8*, i8** %12, align 8, !dbg !1199
  %111 = load i8*, i8** %10, align 8, !dbg !1201
  %112 = ptrtoint i8* %110 to i64, !dbg !1202
  %113 = ptrtoint i8* %111 to i64, !dbg !1202
  %114 = sub i64 %112, %113, !dbg !1202
  %115 = icmp sge i64 %114, 7, !dbg !1203
  %116 = load i32, i32* @x.25
  %117 = load i32, i32* @y.26
  %118 = sub i32 %116, 1
  %119 = mul i32 %116, %118
  %120 = urem i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %117, 10
  %123 = or i1 %121, %122
  br i1 %123, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %115, label %124, label %187, !dbg !1204

124:                                              ; preds = %originalBBpart220
  %125 = load i32, i32* @x.25
  %126 = load i32, i32* @y.26
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %124, %originalBB22alteredBB
  %133 = load i8*, i8** %12, align 8, !dbg !1205
  %134 = getelementptr inbounds i8, i8* %133, i64 -7, !dbg !1206
  %135 = call i32 @strncmp(i8* %134, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1.59, i64 0, i64 0), i64 7) #13, !dbg !1207
  %136 = icmp eq i32 %135, 0, !dbg !1208
  %137 = load i32, i32* @x.25
  %138 = load i32, i32* @y.26
  %139 = sub i32 %137, 1
  %140 = mul i32 %137, %139
  %141 = urem i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %142, %143
  br i1 %144, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %136, label %145, label %187, !dbg !1209

145:                                              ; preds = %originalBBpart224
  %146 = load i8*, i8** %12, align 8, !dbg !1210
  store i8* %146, i8** %10, align 8, !dbg !1212
  %147 = load i8*, i8** %12, align 8, !dbg !1213
  %148 = call i32 @strncmp(i8* %147, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.60, i64 0, i64 0), i64 3) #13, !dbg !1215
  %149 = icmp eq i32 %148, 0, !dbg !1216
  br i1 %149, label %150, label %170, !dbg !1217

150:                                              ; preds = %145
  %151 = load i32, i32* @x.25
  %152 = load i32, i32* @y.26
  %153 = sub i32 %151, 1
  %154 = mul i32 %151, %153
  %155 = urem i32 %154, 2
  %156 = icmp eq i32 %155, 0
  %157 = icmp slt i32 %152, 10
  %158 = or i1 %156, %157
  br i1 %158, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %150, %originalBB26alteredBB
  %159 = load i8*, i8** %12, align 8, !dbg !1218
  %160 = getelementptr inbounds i8, i8* %159, i64 3, !dbg !1220
  store i8* %160, i8** %10, align 8, !dbg !1221
  %161 = load i8*, i8** %10, align 8, !dbg !1222
  store i8* %161, i8** @program_invocation_short_name, align 8, !dbg !1223
  %162 = load i32, i32* @x.25
  %163 = load i32, i32* @y.26
  %164 = sub i32 %162, 1
  %165 = mul i32 %162, %164
  %166 = urem i32 %165, 2
  %167 = icmp eq i32 %166, 0
  %168 = icmp slt i32 %163, 10
  %169 = or i1 %167, %168
  br i1 %169, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %170, !dbg !1224

170:                                              ; preds = %originalBBpart228, %145
  %171 = load i32, i32* @x.25
  %172 = load i32, i32* @y.26
  %173 = sub i32 %171, 1
  %174 = mul i32 %171, %173
  %175 = urem i32 %174, 2
  %176 = icmp eq i32 %175, 0
  %177 = icmp slt i32 %172, 10
  %178 = or i1 %176, %177
  br i1 %178, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %170, %originalBB30alteredBB
  %179 = load i32, i32* @x.25
  %180 = load i32, i32* @y.26
  %181 = sub i32 %179, 1
  %182 = mul i32 %179, %181
  %183 = urem i32 %182, 2
  %184 = icmp eq i32 %183, 0
  %185 = icmp slt i32 %180, 10
  %186 = or i1 %184, %185
  br i1 %186, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %187, !dbg !1225

187:                                              ; preds = %originalBBpart232, %originalBBpart224, %originalBBpart220
  %188 = load i32, i32* @x.25
  %189 = load i32, i32* @y.26
  %190 = sub i32 %188, 1
  %191 = mul i32 %188, %190
  %192 = urem i32 %191, 2
  %193 = icmp eq i32 %192, 0
  %194 = icmp slt i32 %189, 10
  %195 = or i1 %193, %194
  br i1 %195, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %187, %originalBB34alteredBB
  %196 = load i8*, i8** %10, align 8, !dbg !1226
  store i8* %196, i8** @program_name, align 8, !dbg !1227
  %197 = load i8*, i8** %10, align 8, !dbg !1228
  store i8* %197, i8** @program_invocation_name, align 8, !dbg !1229
  %198 = load i32, i32* @x.25
  %199 = load i32, i32* @y.26
  %200 = sub i32 %198, 1
  %201 = mul i32 %198, %200
  %202 = urem i32 %201, 2
  %203 = icmp eq i32 %202, 0
  %204 = icmp slt i32 %199, 10
  %205 = or i1 %203, %204
  br i1 %205, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  ret void, !dbg !1230

originalBBalteredBB:                              ; preds = %originalBB, %1
  %206 = alloca i8*, align 8
  %207 = alloca i8*, align 8
  %208 = alloca i8*, align 8
  store i8* %0, i8** %206, align 8
  call void @llvm.dbg.declare(metadata i8** %206, metadata !1231, metadata !DIExpression()), !dbg !1177
  call void @llvm.dbg.declare(metadata i8** %207, metadata !1237, metadata !DIExpression()), !dbg !1179
  call void @llvm.dbg.declare(metadata i8** %208, metadata !1238, metadata !DIExpression()), !dbg !1181
  %209 = load i8*, i8** %206, align 8, !dbg !1182
  %210 = icmp eq i8* %209, null, !dbg !1184
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %23
  %211 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1186
  %212 = call i32 @fputs(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.58, i64 0, i64 0), %struct._IO_FILE* %211), !dbg !1188
  call void @abort() #12, !dbg !1189
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %42
  %213 = load i8*, i8** %10, align 8, !dbg !1190
  %214 = call i8* @strrchr(i8* %213, i32 47) #13, !dbg !1191
  store i8* %214, i8** %11, align 8, !dbg !1192
  %215 = load i8*, i8** %11, align 8, !dbg !1193
  %216 = icmp ne i8* %215, null, !dbg !1194
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %63
  %217 = load i8*, i8** %11, align 8, !dbg !1195
  %218 = getelementptr inbounds i8, i8* %217, i64 1, !dbg !1196
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %82
  %219 = load i8*, i8** %10, align 8, !dbg !1197
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %100
  store i8* %101, i8** %12, align 8, !dbg !1198
  %220 = load i8*, i8** %12, align 8, !dbg !1199
  %221 = load i8*, i8** %10, align 8, !dbg !1201
  %222 = ptrtoint i8* %220 to i64, !dbg !1202
  %223 = ptrtoint i8* %221 to i64, !dbg !1202
  %_ = shl i64 %222, %223
  %224 = sub i64 %222, %223, !dbg !1202
  %225 = icmp sge i64 %224, 7, !dbg !1203
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %124
  %226 = load i8*, i8** %12, align 8, !dbg !1205
  %227 = getelementptr inbounds i8, i8* %226, i64 -7, !dbg !1206
  %228 = call i32 @strncmp(i8* %227, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1.59, i64 0, i64 0), i64 7) #13, !dbg !1207
  %229 = icmp eq i32 %228, 0, !dbg !1208
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %150
  %230 = load i8*, i8** %12, align 8, !dbg !1218
  %231 = getelementptr inbounds i8, i8* %230, i64 3, !dbg !1220
  store i8* %231, i8** %10, align 8, !dbg !1221
  %232 = load i8*, i8** %10, align 8, !dbg !1222
  store i8* %232, i8** @program_invocation_short_name, align 8, !dbg !1223
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %170
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %187
  %233 = load i8*, i8** %10, align 8, !dbg !1226
  store i8* %233, i8** @program_name, align 8, !dbg !1227
  %234 = load i8*, i8** %10, align 8, !dbg !1228
  store i8* %234, i8** @program_invocation_name, align 8, !dbg !1229
  br label %originalBB34
}

declare dso_local i32 @fputs(i8*, %struct._IO_FILE*) #3

; Function Attrs: noreturn nounwind
declare dso_local void @abort() #5

; Function Attrs: nounwind readonly
declare dso_local i8* @strrchr(i8*, i32) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @set_char_quoting(%struct.quoting_options*, i8 signext, i32) #4 !dbg !1239 {
  %4 = alloca %struct.quoting_options*, align 8
  %5 = alloca i8, align 1
  %6 = alloca i32, align 4
  %7 = alloca i8, align 1
  %8 = alloca i32*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store %struct.quoting_options* %0, %struct.quoting_options** %4, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %4, metadata !1243, metadata !DIExpression()), !dbg !1244
  store i8 %1, i8* %5, align 1
  call void @llvm.dbg.declare(metadata i8* %5, metadata !1245, metadata !DIExpression()), !dbg !1246
  store i32 %2, i32* %6, align 4
  call void @llvm.dbg.declare(metadata i32* %6, metadata !1247, metadata !DIExpression()), !dbg !1248
  call void @llvm.dbg.declare(metadata i8* %7, metadata !1249, metadata !DIExpression()), !dbg !1250
  %11 = load i8, i8* %5, align 1, !dbg !1251
  store i8 %11, i8* %7, align 1, !dbg !1250
  call void @llvm.dbg.declare(metadata i32** %8, metadata !1252, metadata !DIExpression()), !dbg !1254
  %12 = load %struct.quoting_options*, %struct.quoting_options** %4, align 8, !dbg !1255
  %13 = icmp ne %struct.quoting_options* %12, null, !dbg !1255
  br i1 %13, label %14, label %32, !dbg !1255

14:                                               ; preds = %3
  %15 = load i32, i32* @x.27
  %16 = load i32, i32* @y.28
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %14, %originalBBalteredBB
  %23 = load %struct.quoting_options*, %struct.quoting_options** %4, align 8, !dbg !1256
  %24 = load i32, i32* @x.27
  %25 = load i32, i32* @y.28
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %49, !dbg !1255

32:                                               ; preds = %3
  %33 = load i32, i32* @x.27
  %34 = load i32, i32* @y.28
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %32, %originalBB1alteredBB
  %41 = load i32, i32* @x.27
  %42 = load i32, i32* @y.28
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %49, !dbg !1255

49:                                               ; preds = %originalBBpart24, %originalBBpart2
  %50 = phi %struct.quoting_options* [ %23, %originalBBpart2 ], [ @default_quoting_options, %originalBBpart24 ], !dbg !1255
  %51 = load i32, i32* @x.27
  %52 = load i32, i32* @y.28
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %49, %originalBB6alteredBB
  %59 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %50, i32 0, i32 2, !dbg !1257
  %60 = getelementptr inbounds [8 x i32], [8 x i32]* %59, i64 0, i64 0, !dbg !1258
  %61 = load i8, i8* %7, align 1, !dbg !1259
  %62 = zext i8 %61 to i64, !dbg !1259
  %63 = udiv i64 %62, 32, !dbg !1260
  %64 = getelementptr inbounds i32, i32* %60, i64 %63, !dbg !1261
  store i32* %64, i32** %8, align 8, !dbg !1254
  call void @llvm.dbg.declare(metadata i32* %9, metadata !1262, metadata !DIExpression()), !dbg !1263
  %65 = load i8, i8* %7, align 1, !dbg !1264
  %66 = zext i8 %65 to i64, !dbg !1264
  %67 = urem i64 %66, 32, !dbg !1265
  %68 = trunc i64 %67 to i32, !dbg !1264
  store i32 %68, i32* %9, align 4, !dbg !1263
  call void @llvm.dbg.declare(metadata i32* %10, metadata !1266, metadata !DIExpression()), !dbg !1267
  %69 = load i32*, i32** %8, align 8, !dbg !1268
  %70 = load i32, i32* %69, align 4, !dbg !1269
  %71 = load i32, i32* %9, align 4, !dbg !1270
  %72 = lshr i32 %70, %71, !dbg !1271
  %73 = and i32 %72, 1, !dbg !1272
  store i32 %73, i32* %10, align 4, !dbg !1267
  %74 = load i32, i32* %6, align 4, !dbg !1273
  %75 = and i32 %74, 1, !dbg !1274
  %76 = load i32, i32* %10, align 4, !dbg !1275
  %77 = xor i32 %75, %76, !dbg !1276
  %78 = load i32, i32* %9, align 4, !dbg !1277
  %79 = shl i32 %77, %78, !dbg !1278
  %80 = load i32*, i32** %8, align 8, !dbg !1279
  %81 = load i32, i32* %80, align 4, !dbg !1280
  %82 = xor i32 %81, %79, !dbg !1280
  store i32 %82, i32* %80, align 4, !dbg !1280
  %83 = load i32, i32* %10, align 4, !dbg !1281
  %84 = load i32, i32* @x.27
  %85 = load i32, i32* @y.28
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBBpart267, label %originalBB6alteredBB

originalBBpart267:                                ; preds = %originalBB6
  ret i32 %83, !dbg !1282

originalBBalteredBB:                              ; preds = %originalBB, %14
  %92 = load %struct.quoting_options*, %struct.quoting_options** %4, align 8, !dbg !1256
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %32
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %49
  %93 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %50, i32 0, i32 2, !dbg !1257
  %94 = getelementptr inbounds [8 x i32], [8 x i32]* %93, i64 0, i64 0, !dbg !1258
  %95 = load i8, i8* %7, align 1, !dbg !1259
  %96 = zext i8 %95 to i64, !dbg !1259
  %_ = sub i64 0, %96
  %gen = add i64 %_, 32
  %_7 = sub i64 %96, 32
  %gen8 = mul i64 %_7, 32
  %97 = udiv i64 %96, 32, !dbg !1260
  %98 = getelementptr inbounds i32, i32* %94, i64 %97, !dbg !1261
  store i32* %98, i32** %8, align 8, !dbg !1254
  call void @llvm.dbg.declare(metadata !4, metadata !1283, metadata !DIExpression()), !dbg !1263
  %99 = load i8, i8* %7, align 1, !dbg !1264
  %100 = zext i8 %99 to i64, !dbg !1264
  %_9 = sub i64 %100, 32
  %gen10 = mul i64 %_9, 32
  %101 = urem i64 %100, 32, !dbg !1265
  %102 = trunc i64 %101 to i32, !dbg !1264
  store i32 %102, i32* %9, align 4, !dbg !1263
  call void @llvm.dbg.declare(metadata !4, metadata !1318, metadata !DIExpression()), !dbg !1267
  %103 = load i32*, i32** %8, align 8, !dbg !1268
  %104 = load i32, i32* %103, align 4, !dbg !1269
  %105 = load i32, i32* %9, align 4, !dbg !1270
  %_11 = sub i32 %104, %105
  %gen12 = mul i32 %_11, %105
  %_13 = sub i32 0, %104
  %gen14 = add i32 %_13, %105
  %_15 = shl i32 %104, %105
  %_16 = shl i32 %104, %105
  %_17 = sub i32 0, %104
  %gen18 = add i32 %_17, %105
  %_19 = sub i32 %104, %105
  %gen20 = mul i32 %_19, %105
  %106 = lshr i32 %104, %105, !dbg !1271
  %_21 = shl i32 %106, 1
  %_22 = sub i32 %106, 1
  %gen23 = mul i32 %_22, 1
  %_24 = shl i32 %106, 1
  %_25 = sub i32 0, %106
  %gen26 = add i32 %_25, 1
  %_27 = sub i32 %106, 1
  %gen28 = mul i32 %_27, 1
  %_29 = shl i32 %106, 1
  %107 = and i32 %106, 1, !dbg !1272
  store i32 %107, i32* %10, align 4, !dbg !1267
  %108 = load i32, i32* %6, align 4, !dbg !1273
  %_30 = shl i32 %108, 1
  %_31 = shl i32 %108, 1
  %_32 = sub i32 0, %108
  %gen33 = add i32 %_32, 1
  %_34 = sub i32 %108, 1
  %gen35 = mul i32 %_34, 1
  %_36 = shl i32 %108, 1
  %_37 = sub i32 0, %108
  %gen38 = add i32 %_37, 1
  %109 = and i32 %108, 1, !dbg !1274
  %110 = load i32, i32* %10, align 4, !dbg !1275
  %_39 = shl i32 %109, %110
  %_40 = sub i32 0, %109
  %gen41 = add i32 %_40, %110
  %_42 = sub i32 %109, %110
  %gen43 = mul i32 %_42, %110
  %111 = xor i32 %109, %110, !dbg !1276
  %112 = load i32, i32* %9, align 4, !dbg !1277
  %_44 = sub i32 %111, %112
  %gen45 = mul i32 %_44, %112
  %_46 = shl i32 %111, %112
  %_47 = sub i32 %111, %112
  %gen48 = mul i32 %_47, %112
  %_49 = sub i32 0, %111
  %gen50 = add i32 %_49, %112
  %_51 = sub i32 %111, %112
  %gen52 = mul i32 %_51, %112
  %_53 = sub i32 0, %111
  %gen54 = add i32 %_53, %112
  %_55 = shl i32 %111, %112
  %113 = shl i32 %111, %112, !dbg !1278
  %114 = load i32*, i32** %8, align 8, !dbg !1279
  %115 = load i32, i32* %114, align 4, !dbg !1280
  %_56 = sub i32 %115, %113
  %gen57 = mul i32 %_56, %113
  %_58 = sub i32 0, %115
  %gen59 = add i32 %_58, %113
  %_60 = sub i32 0, %115
  %gen61 = add i32 %_60, %113
  %_62 = sub i32 %115, %113
  %gen63 = mul i32 %_62, %113
  %_64 = sub i32 0, %115
  %gen65 = add i32 %_64, %113
  %116 = xor i32 %115, %113, !dbg !1280
  store i32 %116, i32* %114, align 4, !dbg !1280
  %117 = load i32, i32* %10, align 4, !dbg !1281
  br label %originalBB6
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_n_style(i32, i32, i8*) #4 !dbg !1319 {
  %4 = load i32, i32* @x.29
  %5 = load i32, i32* @y.30
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca %struct.quoting_options, align 8
  store i32 %0, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !1322, metadata !DIExpression()), !dbg !1323
  store i32 %1, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !1324, metadata !DIExpression()), !dbg !1325
  store i8* %2, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !1326, metadata !DIExpression()), !dbg !1327
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %15, metadata !1328, metadata !DIExpression()), !dbg !1330
  %16 = load i32, i32* %13, align 4, !dbg !1331
  call void @quoting_options_from_style(%struct.quoting_options* sret %15, i32 %16), !dbg !1332
  %17 = load i32, i32* %12, align 4, !dbg !1333
  %18 = load i8*, i8** %14, align 8, !dbg !1334
  %19 = call i8* @quotearg_n_options(i32 %17, i8* %18, i64 -1, %struct.quoting_options* %15), !dbg !1335
  %20 = load i32, i32* @x.29
  %21 = load i32, i32* @y.30
  %22 = sub i32 %20, 1
  %23 = mul i32 %20, %22
  %24 = urem i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = icmp slt i32 %21, 10
  %27 = or i1 %25, %26
  br i1 %27, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %19, !dbg !1336

originalBBalteredBB:                              ; preds = %originalBB, %3
  %28 = alloca i32, align 4
  %29 = alloca i32, align 4
  %30 = alloca i8*, align 8
  %31 = alloca %struct.quoting_options, align 8
  store i32 %0, i32* %28, align 4
  call void @llvm.dbg.declare(metadata i32* %28, metadata !1337, metadata !DIExpression()), !dbg !1323
  store i32 %1, i32* %29, align 4
  call void @llvm.dbg.declare(metadata i32* %29, metadata !1369, metadata !DIExpression()), !dbg !1325
  store i8* %2, i8** %30, align 8
  call void @llvm.dbg.declare(metadata i8** %30, metadata !1370, metadata !DIExpression()), !dbg !1327
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %31, metadata !1371, metadata !DIExpression()), !dbg !1330
  %32 = load i32, i32* %29, align 4, !dbg !1331
  call void @quoting_options_from_style(%struct.quoting_options* sret %31, i32 %32), !dbg !1332
  %33 = load i32, i32* %28, align 4, !dbg !1333
  %34 = load i8*, i8** %30, align 8, !dbg !1334
  %35 = call i8* @quotearg_n_options(i32 %33, i8* %34, i64 -1, %struct.quoting_options* %31), !dbg !1335
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @quoting_options_from_style(%struct.quoting_options* noalias sret, i32) #4 !dbg !1373 {
  %3 = alloca i32, align 4
  store i32 %1, i32* %3, align 4
  call void @llvm.dbg.declare(metadata i32* %3, metadata !1376, metadata !DIExpression()), !dbg !1377
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %0, metadata !1378, metadata !DIExpression()), !dbg !1379
  %4 = bitcast %struct.quoting_options* %0 to i8*, !dbg !1379
  call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 56, i1 false), !dbg !1379
  %5 = load i32, i32* %3, align 4, !dbg !1380
  %6 = icmp eq i32 %5, 10, !dbg !1382
  br i1 %6, label %7, label %24, !dbg !1383

7:                                                ; preds = %2
  %8 = load i32, i32* @x.31
  %9 = load i32, i32* @y.32
  %10 = sub i32 %8, 1
  %11 = mul i32 %8, %10
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  %14 = icmp slt i32 %9, 10
  %15 = or i1 %13, %14
  br i1 %15, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %7, %originalBBalteredBB
  call void @abort() #12, !dbg !1384
  %16 = load i32, i32* @x.31
  %17 = load i32, i32* @y.32
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  unreachable, !dbg !1384

24:                                               ; preds = %2
  %25 = load i32, i32* %3, align 4, !dbg !1385
  %26 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %0, i32 0, i32 0, !dbg !1386
  store i32 %25, i32* %26, align 8, !dbg !1387
  ret void, !dbg !1388

originalBBalteredBB:                              ; preds = %originalBB, %7
  call void @abort() #12, !dbg !1384
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_n_options(i32, i8*, i64, %struct.quoting_options*) #4 !dbg !1389 {
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %struct.quoting_options*, align 8
  %9 = alloca i32, align 4
  %10 = alloca %struct.slotvec*, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  %13 = alloca i64, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i32, align 4
  %16 = alloca i64, align 8
  store i32 %0, i32* %5, align 4
  call void @llvm.dbg.declare(metadata i32* %5, metadata !1393, metadata !DIExpression()), !dbg !1394
  store i8* %1, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !1395, metadata !DIExpression()), !dbg !1396
  store i64 %2, i64* %7, align 8
  call void @llvm.dbg.declare(metadata i64* %7, metadata !1397, metadata !DIExpression()), !dbg !1398
  store %struct.quoting_options* %3, %struct.quoting_options** %8, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %8, metadata !1399, metadata !DIExpression()), !dbg !1400
  call void @llvm.dbg.declare(metadata i32* %9, metadata !1401, metadata !DIExpression()), !dbg !1402
  %17 = call i32* @__errno_location() #15, !dbg !1403
  %18 = load i32, i32* %17, align 4, !dbg !1403
  store i32 %18, i32* %9, align 4, !dbg !1402
  call void @llvm.dbg.declare(metadata %struct.slotvec** %10, metadata !1404, metadata !DIExpression()), !dbg !1405
  %19 = load %struct.slotvec*, %struct.slotvec** @slotvec, align 8, !dbg !1406
  store %struct.slotvec* %19, %struct.slotvec** %10, align 8, !dbg !1405
  %20 = load i32, i32* %5, align 4, !dbg !1407
  %21 = icmp slt i32 %20, 0, !dbg !1409
  br i1 %21, label %22, label %39, !dbg !1410

22:                                               ; preds = %4
  %23 = load i32, i32* @x.33
  %24 = load i32, i32* @y.34
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %22, %originalBBalteredBB
  call void @abort() #12, !dbg !1411
  %31 = load i32, i32* @x.33
  %32 = load i32, i32* @y.34
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  unreachable, !dbg !1411

39:                                               ; preds = %4
  %40 = load i32, i32* @x.33
  %41 = load i32, i32* @y.34
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %39, %originalBB1alteredBB
  %48 = load i32, i32* @nslots, align 4, !dbg !1412
  %49 = mul i32 %48, 4
  %50 = add i32 %49, 5
  %51 = mul i32 %50, %50
  %52 = sub i32 %51, %50
  %53 = srem i32 %52, 2
  %54 = add i32 %53, 1
  %55 = icmp eq i32 %54, 1
  %56 = load i32, i32* @x.33
  %57 = load i32, i32* @y.34
  %58 = sub i32 %56, 1
  %59 = mul i32 %56, %58
  %60 = urem i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %57, 10
  %63 = or i1 %61, %62
  br i1 %63, label %originalBBpart243, label %originalBB1alteredBB

originalBBpart243:                                ; preds = %originalBB1
  br i1 %55, label %81, label %64

64:                                               ; preds = %originalBBpart243
  %65 = load i32, i32* @x.33
  %66 = load i32, i32* @y.34
  %67 = sub i32 %65, 1
  %68 = mul i32 %65, %67
  %69 = urem i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %70, %71
  br i1 %72, label %originalBB45, label %originalBB45alteredBB

originalBB45:                                     ; preds = %64, %originalBB45alteredBB
  %73 = load i32, i32* @x.33
  %74 = load i32, i32* @y.34
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBBpart247, label %originalBB45alteredBB

originalBBpart247:                                ; preds = %originalBB45
  ret i8* null

81:                                               ; preds = %originalBBpart243
  %82 = load i32, i32* @x.33
  %83 = load i32, i32* @y.34
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBB49, label %originalBB49alteredBB

originalBB49:                                     ; preds = %81, %originalBB49alteredBB
  %90 = load i32, i32* %5, align 4, !dbg !1414
  %91 = icmp sle i32 %48, %90, !dbg !1415
  %92 = load i32, i32* @x.33
  %93 = load i32, i32* @y.34
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBBpart251, label %originalBB49alteredBB

originalBBpart251:                                ; preds = %originalBB49
  br i1 %91, label %100, label %286, !dbg !1416

100:                                              ; preds = %originalBBpart251
  call void @llvm.dbg.declare(metadata i8* %11, metadata !1417, metadata !DIExpression()), !dbg !1419
  %101 = load i32, i32* @x.33
  %102 = load i32, i32* @y.34
  %103 = sub i32 %101, 1
  %104 = mul i32 %101, %103
  %105 = urem i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %102, 10
  %108 = or i1 %106, %107
  br i1 %108, label %originalBB53, label %originalBB53alteredBB

originalBB53:                                     ; preds = %100, %originalBB53alteredBB
  %109 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1420
  %110 = icmp eq %struct.slotvec* %109, @slotvec0, !dbg !1421
  %111 = zext i1 %110 to i8, !dbg !1419
  store i8 %111, i8* %11, align 1, !dbg !1419
  call void @llvm.dbg.declare(metadata i32* %12, metadata !1422, metadata !DIExpression()), !dbg !1423
  store i32 2147483646, i32* %12, align 4, !dbg !1423
  %112 = load i32, i32* %12, align 4, !dbg !1424
  %113 = load i32, i32* %5, align 4, !dbg !1426
  %114 = icmp slt i32 %112, %113, !dbg !1427
  %115 = load i32, i32* @x.33
  %116 = load i32, i32* @y.34
  %117 = sub i32 %115, 1
  %118 = mul i32 %115, %117
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %120, %121
  br i1 %122, label %originalBBpart255, label %originalBB53alteredBB

originalBBpart255:                                ; preds = %originalBB53
  br i1 %114, label %123, label %140, !dbg !1428

123:                                              ; preds = %originalBBpart255
  %124 = load i32, i32* @x.33
  %125 = load i32, i32* @y.34
  %126 = sub i32 %124, 1
  %127 = mul i32 %124, %126
  %128 = urem i32 %127, 2
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %125, 10
  %131 = or i1 %129, %130
  br i1 %131, label %originalBB57, label %originalBB57alteredBB

originalBB57:                                     ; preds = %123, %originalBB57alteredBB
  call void @xalloc_die() #14, !dbg !1429
  %132 = load i32, i32* @x.33
  %133 = load i32, i32* @y.34
  %134 = sub i32 %132, 1
  %135 = mul i32 %132, %134
  %136 = urem i32 %135, 2
  %137 = icmp eq i32 %136, 0
  %138 = icmp slt i32 %133, 10
  %139 = or i1 %137, %138
  br i1 %139, label %originalBBpart259, label %originalBB57alteredBB

originalBBpart259:                                ; preds = %originalBB57
  unreachable, !dbg !1429

140:                                              ; preds = %originalBBpart255
  %141 = load i32, i32* @x.33
  %142 = load i32, i32* @y.34
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBB61, label %originalBB61alteredBB

originalBB61:                                     ; preds = %140, %originalBB61alteredBB
  %149 = load i8, i8* %11, align 1, !dbg !1430
  %150 = trunc i8 %149 to i1, !dbg !1430
  %151 = load i32, i32* @x.33
  %152 = load i32, i32* @y.34
  %153 = sub i32 %151, 1
  %154 = mul i32 %151, %153
  %155 = urem i32 %154, 2
  %156 = icmp eq i32 %155, 0
  %157 = icmp slt i32 %152, 10
  %158 = or i1 %156, %157
  br i1 %158, label %originalBBpart263, label %originalBB61alteredBB

originalBBpart263:                                ; preds = %originalBB61
  br i1 %150, label %159, label %160, !dbg !1430

159:                                              ; preds = %originalBBpart263
  br label %162, !dbg !1430

160:                                              ; preds = %originalBBpart263
  %161 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1431
  br label %162, !dbg !1430

162:                                              ; preds = %160, %159
  %163 = phi %struct.slotvec* [ null, %159 ], [ %161, %160 ], !dbg !1430
  %164 = load i32, i32* @x.33
  %165 = load i32, i32* @y.34
  %166 = sub i32 %164, 1
  %167 = mul i32 %164, %166
  %168 = urem i32 %167, 2
  %169 = icmp eq i32 %168, 0
  %170 = icmp slt i32 %165, 10
  %171 = or i1 %169, %170
  br i1 %171, label %originalBB65, label %originalBB65alteredBB

originalBB65:                                     ; preds = %162, %originalBB65alteredBB
  %172 = bitcast %struct.slotvec* %163 to i8*, !dbg !1430
  %173 = load i32, i32* %5, align 4, !dbg !1432
  %174 = add nsw i32 %173, 1, !dbg !1433
  %175 = sext i32 %174 to i64, !dbg !1434
  %176 = mul i64 %175, 16, !dbg !1435
  %177 = trunc i64 16 to i32
  %178 = add i32 %177, 5
  %179 = trunc i64 16 to i32
  %180 = mul i32 %179, -2
  %181 = add i32 %180, -4
  %182 = mul i32 %178, %178
  %183 = mul i32 %181, %181
  %184 = add i32 %182, %183
  %185 = mul i32 %178, %181
  %186 = mul i32 %185, 2
  %187 = sub i32 %184, %186
  %188 = mul i32 %187, 5
  %189 = add i32 %188, 2
  %190 = icmp eq i32 %189, -3
  %191 = load i32, i32* @x.33
  %192 = load i32, i32* @y.34
  %193 = sub i32 %191, 1
  %194 = mul i32 %191, %193
  %195 = urem i32 %194, 2
  %196 = icmp eq i32 %195, 0
  %197 = icmp slt i32 %192, 10
  %198 = or i1 %196, %197
  br i1 %198, label %originalBBpart2144, label %originalBB65alteredBB

originalBBpart2144:                               ; preds = %originalBB65
  br i1 %190, label %199, label %216

199:                                              ; preds = %originalBBpart2144
  %200 = load i32, i32* @x.33
  %201 = load i32, i32* @y.34
  %202 = sub i32 %200, 1
  %203 = mul i32 %200, %202
  %204 = urem i32 %203, 2
  %205 = icmp eq i32 %204, 0
  %206 = icmp slt i32 %201, 10
  %207 = or i1 %205, %206
  br i1 %207, label %originalBB146, label %originalBB146alteredBB

originalBB146:                                    ; preds = %199, %originalBB146alteredBB
  %208 = load i32, i32* @x.33
  %209 = load i32, i32* @y.34
  %210 = sub i32 %208, 1
  %211 = mul i32 %208, %210
  %212 = urem i32 %211, 2
  %213 = icmp eq i32 %212, 0
  %214 = icmp slt i32 %209, 10
  %215 = or i1 %213, %214
  br i1 %215, label %originalBBpart2148, label %originalBB146alteredBB

originalBBpart2148:                               ; preds = %originalBB146
  ret i8* null

216:                                              ; preds = %originalBBpart2144
  %217 = load i32, i32* @x.33
  %218 = load i32, i32* @y.34
  %219 = sub i32 %217, 1
  %220 = mul i32 %217, %219
  %221 = urem i32 %220, 2
  %222 = icmp eq i32 %221, 0
  %223 = icmp slt i32 %218, 10
  %224 = or i1 %222, %223
  br i1 %224, label %originalBB150, label %originalBB150alteredBB

originalBB150:                                    ; preds = %216, %originalBB150alteredBB
  %225 = call i8* @xrealloc(i8* %172, i64 %176), !dbg !1436
  %226 = bitcast i8* %225 to %struct.slotvec*, !dbg !1436
  store %struct.slotvec* %226, %struct.slotvec** %10, align 8, !dbg !1437
  store %struct.slotvec* %226, %struct.slotvec** @slotvec, align 8, !dbg !1438
  %227 = load i8, i8* %11, align 1, !dbg !1439
  %228 = trunc i8 %227 to i1, !dbg !1439
  %229 = load i32, i32* @x.33
  %230 = load i32, i32* @y.34
  %231 = sub i32 %229, 1
  %232 = mul i32 %229, %231
  %233 = urem i32 %232, 2
  %234 = icmp eq i32 %233, 0
  %235 = icmp slt i32 %230, 10
  %236 = or i1 %234, %235
  br i1 %236, label %originalBBpart2152, label %originalBB150alteredBB

originalBBpart2152:                               ; preds = %originalBB150
  br i1 %228, label %237, label %256, !dbg !1441

237:                                              ; preds = %originalBBpart2152
  %238 = load i32, i32* @x.33
  %239 = load i32, i32* @y.34
  %240 = sub i32 %238, 1
  %241 = mul i32 %238, %240
  %242 = urem i32 %241, 2
  %243 = icmp eq i32 %242, 0
  %244 = icmp slt i32 %239, 10
  %245 = or i1 %243, %244
  br i1 %245, label %originalBB154, label %originalBB154alteredBB

originalBB154:                                    ; preds = %237, %originalBB154alteredBB
  %246 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1442
  %247 = bitcast %struct.slotvec* %246 to i8*, !dbg !1443
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %247, i8* align 8 bitcast (%struct.slotvec* @slotvec0 to i8*), i64 16, i1 false), !dbg !1443
  %248 = load i32, i32* @x.33
  %249 = load i32, i32* @y.34
  %250 = sub i32 %248, 1
  %251 = mul i32 %248, %250
  %252 = urem i32 %251, 2
  %253 = icmp eq i32 %252, 0
  %254 = icmp slt i32 %249, 10
  %255 = or i1 %253, %254
  br i1 %255, label %originalBBpart2156, label %originalBB154alteredBB

originalBBpart2156:                               ; preds = %originalBB154
  br label %256, !dbg !1444

256:                                              ; preds = %originalBBpart2156, %originalBBpart2152
  %257 = load i32, i32* @x.33
  %258 = load i32, i32* @y.34
  %259 = sub i32 %257, 1
  %260 = mul i32 %257, %259
  %261 = urem i32 %260, 2
  %262 = icmp eq i32 %261, 0
  %263 = icmp slt i32 %258, 10
  %264 = or i1 %262, %263
  br i1 %264, label %originalBB158, label %originalBB158alteredBB

originalBB158:                                    ; preds = %256, %originalBB158alteredBB
  %265 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1445
  %266 = load i32, i32* @nslots, align 4, !dbg !1446
  %267 = sext i32 %266 to i64, !dbg !1447
  %268 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %265, i64 %267, !dbg !1447
  %269 = bitcast %struct.slotvec* %268 to i8*, !dbg !1448
  %270 = load i32, i32* %5, align 4, !dbg !1449
  %271 = add nsw i32 %270, 1, !dbg !1450
  %272 = load i32, i32* @nslots, align 4, !dbg !1451
  %273 = sub nsw i32 %271, %272, !dbg !1452
  %274 = sext i32 %273 to i64, !dbg !1453
  %275 = mul i64 %274, 16, !dbg !1454
  call void @llvm.memset.p0i8.i64(i8* align 8 %269, i8 0, i64 %275, i1 false), !dbg !1448
  %276 = load i32, i32* %5, align 4, !dbg !1455
  %277 = add nsw i32 %276, 1, !dbg !1456
  store i32 %277, i32* @nslots, align 4, !dbg !1457
  %278 = load i32, i32* @x.33
  %279 = load i32, i32* @y.34
  %280 = sub i32 %278, 1
  %281 = mul i32 %278, %280
  %282 = urem i32 %281, 2
  %283 = icmp eq i32 %282, 0
  %284 = icmp slt i32 %279, 10
  %285 = or i1 %283, %284
  br i1 %285, label %originalBBpart2190, label %originalBB158alteredBB

originalBBpart2190:                               ; preds = %originalBB158
  br label %286, !dbg !1458

286:                                              ; preds = %originalBBpart2190, %originalBBpart251
  call void @llvm.dbg.declare(metadata i64* %13, metadata !1459, metadata !DIExpression()), !dbg !1461
  %287 = load i32, i32* @x.33
  %288 = load i32, i32* @y.34
  %289 = sub i32 %287, 1
  %290 = mul i32 %287, %289
  %291 = urem i32 %290, 2
  %292 = icmp eq i32 %291, 0
  %293 = icmp slt i32 %288, 10
  %294 = or i1 %292, %293
  br i1 %294, label %originalBB192, label %originalBB192alteredBB

originalBB192:                                    ; preds = %286, %originalBB192alteredBB
  %295 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1462
  %296 = load i32, i32* %5, align 4, !dbg !1463
  %297 = sext i32 %296 to i64, !dbg !1462
  %298 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %295, i64 %297, !dbg !1462
  %299 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %298, i32 0, i32 0, !dbg !1464
  %300 = load i64, i64* %299, align 8, !dbg !1464
  store i64 %300, i64* %13, align 8, !dbg !1461
  call void @llvm.dbg.declare(metadata i8** %14, metadata !1465, metadata !DIExpression()), !dbg !1466
  %301 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1467
  %302 = load i32, i32* %5, align 4, !dbg !1468
  %303 = sext i32 %302 to i64, !dbg !1467
  %304 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %301, i64 %303, !dbg !1467
  %305 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %304, i32 0, i32 1, !dbg !1469
  %306 = load i8*, i8** %305, align 8, !dbg !1469
  store i8* %306, i8** %14, align 8, !dbg !1466
  call void @llvm.dbg.declare(metadata i32* %15, metadata !1470, metadata !DIExpression()), !dbg !1471
  %307 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1472
  %308 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %307, i32 0, i32 1, !dbg !1473
  %309 = load i32, i32* %308, align 4, !dbg !1473
  %310 = or i32 %309, 1, !dbg !1474
  store i32 %310, i32* %15, align 4, !dbg !1471
  call void @llvm.dbg.declare(metadata i64* %16, metadata !1475, metadata !DIExpression()), !dbg !1476
  %311 = load i8*, i8** %14, align 8, !dbg !1477
  %312 = load i64, i64* %13, align 8, !dbg !1478
  %313 = load i8*, i8** %6, align 8, !dbg !1479
  %314 = load i64, i64* %7, align 8, !dbg !1480
  %315 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1481
  %316 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %315, i32 0, i32 0, !dbg !1482
  %317 = load i32, i32* %316, align 8, !dbg !1482
  %318 = load i32, i32* %15, align 4, !dbg !1483
  %319 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1484
  %320 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %319, i32 0, i32 2, !dbg !1485
  %321 = getelementptr inbounds [8 x i32], [8 x i32]* %320, i64 0, i64 0, !dbg !1484
  %322 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1486
  %323 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %322, i32 0, i32 3, !dbg !1487
  %324 = load i8*, i8** %323, align 8, !dbg !1487
  %325 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1488
  %326 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %325, i32 0, i32 4, !dbg !1489
  %327 = load i8*, i8** %326, align 8, !dbg !1489
  %328 = call i64 @quotearg_buffer_restyled(i8* %311, i64 %312, i8* %313, i64 %314, i32 %317, i32 %318, i32* %321, i8* %324, i8* %327), !dbg !1490
  store i64 %328, i64* %16, align 8, !dbg !1476
  %329 = load i64, i64* %13, align 8, !dbg !1491
  %330 = load i64, i64* %16, align 8, !dbg !1493
  %331 = icmp ule i64 %329, %330, !dbg !1494
  %332 = load i32, i32* @x.33
  %333 = load i32, i32* @y.34
  %334 = sub i32 %332, 1
  %335 = mul i32 %332, %334
  %336 = urem i32 %335, 2
  %337 = icmp eq i32 %336, 0
  %338 = icmp slt i32 %333, 10
  %339 = or i1 %337, %338
  br i1 %339, label %originalBBpart2195, label %originalBB192alteredBB

originalBBpart2195:                               ; preds = %originalBB192
  br i1 %331, label %340, label %453, !dbg !1495

340:                                              ; preds = %originalBBpart2195
  %341 = load i32, i32* @x.33
  %342 = load i32, i32* @y.34
  %343 = sub i32 %341, 1
  %344 = mul i32 %341, %343
  %345 = urem i32 %344, 2
  %346 = icmp eq i32 %345, 0
  %347 = icmp slt i32 %342, 10
  %348 = or i1 %346, %347
  br i1 %348, label %originalBB197, label %originalBB197alteredBB

originalBB197:                                    ; preds = %340, %originalBB197alteredBB
  %349 = load i64, i64* %16, align 8, !dbg !1496
  %350 = add i64 %349, 1, !dbg !1498
  store i64 %350, i64* %13, align 8, !dbg !1499
  %351 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1500
  %352 = load i32, i32* %5, align 4, !dbg !1501
  %353 = trunc i64 %350 to i32
  %354 = mul i32 %353, 4
  %355 = add i32 %354, -1
  %356 = mul i32 %355, %355
  %357 = sub i32 %356, %355
  %358 = srem i32 %357, 2
  %359 = mul i32 %358, 3
  %360 = add i32 %359, -2
  %361 = icmp ne i32 %360, -2
  %362 = load i32, i32* @x.33
  %363 = load i32, i32* @y.34
  %364 = sub i32 %362, 1
  %365 = mul i32 %362, %364
  %366 = urem i32 %365, 2
  %367 = icmp eq i32 %366, 0
  %368 = icmp slt i32 %363, 10
  %369 = or i1 %367, %368
  br i1 %369, label %originalBBpart2262, label %originalBB197alteredBB

originalBBpart2262:                               ; preds = %originalBB197
  br i1 %361, label %370, label %387

370:                                              ; preds = %originalBBpart2262
  %371 = load i32, i32* @x.33
  %372 = load i32, i32* @y.34
  %373 = sub i32 %371, 1
  %374 = mul i32 %371, %373
  %375 = urem i32 %374, 2
  %376 = icmp eq i32 %375, 0
  %377 = icmp slt i32 %372, 10
  %378 = or i1 %376, %377
  br i1 %378, label %originalBB264, label %originalBB264alteredBB

originalBB264:                                    ; preds = %370, %originalBB264alteredBB
  %379 = load i32, i32* @x.33
  %380 = load i32, i32* @y.34
  %381 = sub i32 %379, 1
  %382 = mul i32 %379, %381
  %383 = urem i32 %382, 2
  %384 = icmp eq i32 %383, 0
  %385 = icmp slt i32 %380, 10
  %386 = or i1 %384, %385
  br i1 %386, label %originalBBpart2266, label %originalBB264alteredBB

originalBBpart2266:                               ; preds = %originalBB264
  ret i8* null

387:                                              ; preds = %originalBBpart2262
  %388 = load i32, i32* @x.33
  %389 = load i32, i32* @y.34
  %390 = sub i32 %388, 1
  %391 = mul i32 %388, %390
  %392 = urem i32 %391, 2
  %393 = icmp eq i32 %392, 0
  %394 = icmp slt i32 %389, 10
  %395 = or i1 %393, %394
  br i1 %395, label %originalBB268, label %originalBB268alteredBB

originalBB268:                                    ; preds = %387, %originalBB268alteredBB
  %396 = sext i32 %352 to i64, !dbg !1500
  %397 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %351, i64 %396, !dbg !1500
  %398 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %397, i32 0, i32 0, !dbg !1502
  store i64 %350, i64* %398, align 8, !dbg !1503
  %399 = load i8*, i8** %14, align 8, !dbg !1504
  %400 = icmp ne i8* %399, getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0), !dbg !1506
  %401 = load i32, i32* @x.33
  %402 = load i32, i32* @y.34
  %403 = sub i32 %401, 1
  %404 = mul i32 %401, %403
  %405 = urem i32 %404, 2
  %406 = icmp eq i32 %405, 0
  %407 = icmp slt i32 %402, 10
  %408 = or i1 %406, %407
  br i1 %408, label %originalBBpart2270, label %originalBB268alteredBB

originalBBpart2270:                               ; preds = %originalBB268
  br i1 %400, label %409, label %427, !dbg !1507

409:                                              ; preds = %originalBBpart2270
  %410 = load i32, i32* @x.33
  %411 = load i32, i32* @y.34
  %412 = sub i32 %410, 1
  %413 = mul i32 %410, %412
  %414 = urem i32 %413, 2
  %415 = icmp eq i32 %414, 0
  %416 = icmp slt i32 %411, 10
  %417 = or i1 %415, %416
  br i1 %417, label %originalBB272, label %originalBB272alteredBB

originalBB272:                                    ; preds = %409, %originalBB272alteredBB
  %418 = load i8*, i8** %14, align 8, !dbg !1508
  call void @free(i8* %418) #10, !dbg !1509
  %419 = load i32, i32* @x.33
  %420 = load i32, i32* @y.34
  %421 = sub i32 %419, 1
  %422 = mul i32 %419, %421
  %423 = urem i32 %422, 2
  %424 = icmp eq i32 %423, 0
  %425 = icmp slt i32 %420, 10
  %426 = or i1 %424, %425
  br i1 %426, label %originalBBpart2274, label %originalBB272alteredBB

originalBBpart2274:                               ; preds = %originalBB272
  br label %427, !dbg !1509

427:                                              ; preds = %originalBBpart2274, %originalBBpart2270
  %428 = load i64, i64* %13, align 8, !dbg !1510
  %429 = call noalias i8* @xcharalloc(i64 %428), !dbg !1511
  store i8* %429, i8** %14, align 8, !dbg !1512
  %430 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1513
  %431 = load i32, i32* %5, align 4, !dbg !1514
  %432 = sext i32 %431 to i64, !dbg !1513
  %433 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %430, i64 %432, !dbg !1513
  %434 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %433, i32 0, i32 1, !dbg !1515
  store i8* %429, i8** %434, align 8, !dbg !1516
  %435 = load i8*, i8** %14, align 8, !dbg !1517
  %436 = load i64, i64* %13, align 8, !dbg !1518
  %437 = load i8*, i8** %6, align 8, !dbg !1519
  %438 = load i64, i64* %7, align 8, !dbg !1520
  %439 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1521
  %440 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %439, i32 0, i32 0, !dbg !1522
  %441 = load i32, i32* %440, align 8, !dbg !1522
  %442 = load i32, i32* %15, align 4, !dbg !1523
  %443 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1524
  %444 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %443, i32 0, i32 2, !dbg !1525
  %445 = getelementptr inbounds [8 x i32], [8 x i32]* %444, i64 0, i64 0, !dbg !1524
  %446 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1526
  %447 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %446, i32 0, i32 3, !dbg !1527
  %448 = load i8*, i8** %447, align 8, !dbg !1527
  %449 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1528
  %450 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %449, i32 0, i32 4, !dbg !1529
  %451 = load i8*, i8** %450, align 8, !dbg !1529
  %452 = call i64 @quotearg_buffer_restyled(i8* %435, i64 %436, i8* %437, i64 %438, i32 %441, i32 %442, i32* %445, i8* %448, i8* %451), !dbg !1530
  br label %453, !dbg !1531

453:                                              ; preds = %427, %originalBBpart2195
  %454 = load i32, i32* @x.33
  %455 = load i32, i32* @y.34
  %456 = sub i32 %454, 1
  %457 = mul i32 %454, %456
  %458 = urem i32 %457, 2
  %459 = icmp eq i32 %458, 0
  %460 = icmp slt i32 %455, 10
  %461 = or i1 %459, %460
  br i1 %461, label %originalBB276, label %originalBB276alteredBB

originalBB276:                                    ; preds = %453, %originalBB276alteredBB
  %462 = load i32, i32* %9, align 4, !dbg !1532
  %463 = call i32* @__errno_location() #15, !dbg !1533
  store i32 %462, i32* %463, align 4, !dbg !1534
  %464 = mul i32 %462, -3
  %465 = add i32 %464, -1
  %466 = mul i32 %462, 3
  %467 = add i32 %466, -2
  %468 = mul i32 %465, %465
  %469 = mul i32 %467, %467
  %470 = mul i32 %469, 34
  %471 = sub i32 %468, %470
  %472 = add i32 %471, 4
  %473 = icmp ne i32 %472, 4
  %474 = load i32, i32* @x.33
  %475 = load i32, i32* @y.34
  %476 = sub i32 %474, 1
  %477 = mul i32 %474, %476
  %478 = urem i32 %477, 2
  %479 = icmp eq i32 %478, 0
  %480 = icmp slt i32 %475, 10
  %481 = or i1 %479, %480
  br i1 %481, label %originalBBpart2333, label %originalBB276alteredBB

originalBBpart2333:                               ; preds = %originalBB276
  br i1 %473, label %499, label %482

482:                                              ; preds = %originalBBpart2333
  %483 = load i32, i32* @x.33
  %484 = load i32, i32* @y.34
  %485 = sub i32 %483, 1
  %486 = mul i32 %483, %485
  %487 = urem i32 %486, 2
  %488 = icmp eq i32 %487, 0
  %489 = icmp slt i32 %484, 10
  %490 = or i1 %488, %489
  br i1 %490, label %originalBB335, label %originalBB335alteredBB

originalBB335:                                    ; preds = %482, %originalBB335alteredBB
  %491 = load i32, i32* @x.33
  %492 = load i32, i32* @y.34
  %493 = sub i32 %491, 1
  %494 = mul i32 %491, %493
  %495 = urem i32 %494, 2
  %496 = icmp eq i32 %495, 0
  %497 = icmp slt i32 %492, 10
  %498 = or i1 %496, %497
  br i1 %498, label %originalBBpart2337, label %originalBB335alteredBB

originalBBpart2337:                               ; preds = %originalBB335
  ret i8* null

499:                                              ; preds = %originalBBpart2333
  %500 = load i32, i32* @x.33
  %501 = load i32, i32* @y.34
  %502 = sub i32 %500, 1
  %503 = mul i32 %500, %502
  %504 = urem i32 %503, 2
  %505 = icmp eq i32 %504, 0
  %506 = icmp slt i32 %501, 10
  %507 = or i1 %505, %506
  br i1 %507, label %originalBB339, label %originalBB339alteredBB

originalBB339:                                    ; preds = %499, %originalBB339alteredBB
  %508 = load i8*, i8** %14, align 8, !dbg !1535
  %509 = load i32, i32* @x.33
  %510 = load i32, i32* @y.34
  %511 = sub i32 %509, 1
  %512 = mul i32 %509, %511
  %513 = urem i32 %512, 2
  %514 = icmp eq i32 %513, 0
  %515 = icmp slt i32 %510, 10
  %516 = or i1 %514, %515
  br i1 %516, label %originalBBpart2341, label %originalBB339alteredBB

originalBBpart2341:                               ; preds = %originalBB339
  ret i8* %508, !dbg !1536

originalBBalteredBB:                              ; preds = %originalBB, %22
  call void @abort() #12, !dbg !1411
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %39
  %517 = load i32, i32* @nslots, align 4, !dbg !1412
  %_ = shl i32 %517, 4
  %_2 = shl i32 %517, 4
  %518 = mul i32 %517, 4
  %_3 = sub i32 0, %518
  %gen = add i32 %_3, 5
  %_4 = sub i32 %518, 5
  %gen5 = mul i32 %_4, 5
  %_6 = sub i32 %518, 5
  %gen7 = mul i32 %_6, 5
  %519 = add i32 %518, 5
  %_8 = sub i32 %519, %519
  %gen9 = mul i32 %_8, %519
  %_10 = shl i32 %519, %519
  %_11 = sub i32 0, %519
  %gen12 = add i32 %_11, %519
  %_13 = sub i32 0, %519
  %gen14 = add i32 %_13, %519
  %_15 = sub i32 %519, %519
  %gen16 = mul i32 %_15, %519
  %520 = mul i32 %519, %519
  %_17 = sub i32 %520, %519
  %gen18 = mul i32 %_17, %519
  %_19 = sub i32 %520, %519
  %gen20 = mul i32 %_19, %519
  %_21 = sub i32 0, %520
  %gen22 = add i32 %_21, %519
  %_23 = shl i32 %520, %519
  %_24 = sub i32 0, %520
  %gen25 = add i32 %_24, %519
  %_26 = shl i32 %520, %519
  %_27 = sub i32 %520, %519
  %gen28 = mul i32 %_27, %519
  %_29 = sub i32 0, %520
  %gen30 = add i32 %_29, %519
  %521 = sub i32 %520, %519
  %_31 = shl i32 %521, 2
  %_32 = shl i32 %521, 2
  %_33 = sub i32 %521, 2
  %gen34 = mul i32 %_33, 2
  %_35 = sub i32 %521, 2
  %gen36 = mul i32 %_35, 2
  %_37 = sub i32 %521, 2
  %gen38 = mul i32 %_37, 2
  %522 = srem i32 %521, 2
  %_39 = sub i32 %522, 1
  %gen40 = mul i32 %_39, 1
  %_41 = shl i32 %522, 1
  %523 = add i32 %522, 1
  %524 = icmp eq i32 %523, 1
  br label %originalBB1

originalBB45alteredBB:                            ; preds = %originalBB45, %64
  br label %originalBB45

originalBB49alteredBB:                            ; preds = %originalBB49, %81
  %525 = load i32, i32* %5, align 4, !dbg !1414
  %526 = icmp sle i32 %48, %525, !dbg !1415
  br label %originalBB49

originalBB53alteredBB:                            ; preds = %originalBB53, %100
  %527 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1420
  %528 = icmp eq %struct.slotvec* %527, @slotvec0, !dbg !1421
  %529 = zext i1 %528 to i8, !dbg !1419
  store i8 %529, i8* %11, align 1, !dbg !1419
  call void @llvm.dbg.declare(metadata !4, metadata !1537, metadata !DIExpression()), !dbg !1423
  store i32 2147483646, i32* %12, align 4, !dbg !1423
  %530 = load i32, i32* %12, align 4, !dbg !1424
  %531 = load i32, i32* %5, align 4, !dbg !1426
  %532 = icmp slt i32 %530, %531, !dbg !1427
  br label %originalBB53

originalBB57alteredBB:                            ; preds = %originalBB57, %123
  call void @xalloc_die() #14, !dbg !1429
  br label %originalBB57

originalBB61alteredBB:                            ; preds = %originalBB61, %140
  %533 = load i8, i8* %11, align 1, !dbg !1430
  %534 = trunc i8 %533 to i1, !dbg !1430
  br label %originalBB61

originalBB65alteredBB:                            ; preds = %originalBB65, %162
  %535 = bitcast %struct.slotvec* %163 to i8*, !dbg !1430
  %536 = load i32, i32* %5, align 4, !dbg !1432
  %_66 = sub i32 %536, 1
  %gen67 = mul i32 %_66, 1
  %_68 = sub i32 %536, 1
  %gen69 = mul i32 %_68, 1
  %_70 = sub i32 0, %536
  %gen71 = add i32 %_70, 1
  %537 = add nsw i32 %536, 1, !dbg !1433
  %538 = sext i32 %537 to i64, !dbg !1434
  %_72 = sub i64 0, %538
  %gen73 = add i64 %_72, 16
  %_74 = sub i64 0, %538
  %gen75 = add i64 %_74, 16
  %_76 = sub i64 %538, 16
  %gen77 = mul i64 %_76, 16
  %539 = mul i64 %538, 16, !dbg !1435
  %540 = trunc i64 16 to i32
  %_78 = shl i32 %540, 5
  %_79 = shl i32 %540, 5
  %_80 = sub i32 0, %540
  %gen81 = add i32 %_80, 5
  %_82 = shl i32 %540, 5
  %_83 = shl i32 %540, 5
  %541 = add i32 %540, 5
  %542 = trunc i64 16 to i32
  %_84 = sub i32 %542, -2
  %gen85 = mul i32 %_84, -2
  %_86 = sub i32 %542, -2
  %gen87 = mul i32 %_86, -2
  %_88 = sub i32 0, %542
  %gen89 = add i32 %_88, -2
  %_90 = sub i32 0, %542
  %gen91 = add i32 %_90, -2
  %_92 = sub i32 %542, -2
  %gen93 = mul i32 %_92, -2
  %_94 = sub i32 0, %542
  %gen95 = add i32 %_94, -2
  %543 = mul i32 %542, -2
  %_96 = sub i32 0, %543
  %gen97 = add i32 %_96, -4
  %544 = add i32 %543, -4
  %_98 = sub i32 0, %541
  %gen99 = add i32 %_98, %541
  %_100 = sub i32 %541, %541
  %gen101 = mul i32 %_100, %541
  %_102 = sub i32 0, %541
  %gen103 = add i32 %_102, %541
  %_104 = shl i32 %541, %541
  %_105 = shl i32 %541, %541
  %545 = mul i32 %541, %541
  %_106 = sub i32 %544, %544
  %gen107 = mul i32 %_106, %544
  %_108 = sub i32 %544, %544
  %gen109 = mul i32 %_108, %544
  %_110 = shl i32 %544, %544
  %_111 = sub i32 %544, %544
  %gen112 = mul i32 %_111, %544
  %_113 = sub i32 %544, %544
  %gen114 = mul i32 %_113, %544
  %546 = mul i32 %544, %544
  %_115 = sub i32 %545, %546
  %gen116 = mul i32 %_115, %546
  %_117 = shl i32 %545, %546
  %_118 = sub i32 %545, %546
  %gen119 = mul i32 %_118, %546
  %_120 = shl i32 %545, %546
  %_121 = shl i32 %545, %546
  %_122 = sub i32 0, %545
  %gen123 = add i32 %_122, %546
  %547 = add i32 %545, %546
  %_124 = sub i32 0, %541
  %gen125 = add i32 %_124, %544
  %_126 = shl i32 %541, %544
  %_127 = shl i32 %541, %544
  %_128 = sub i32 0, %541
  %gen129 = add i32 %_128, %544
  %548 = mul i32 %541, %544
  %_130 = sub i32 0, %548
  %gen131 = add i32 %_130, 2
  %_132 = sub i32 0, %548
  %gen133 = add i32 %_132, 2
  %_134 = sub i32 0, %548
  %gen135 = add i32 %_134, 2
  %549 = mul i32 %548, 2
  %_136 = sub i32 %547, %549
  %gen137 = mul i32 %_136, %549
  %550 = sub i32 %547, %549
  %_138 = sub i32 %550, 5
  %gen139 = mul i32 %_138, 5
  %_140 = sub i32 %550, 5
  %gen141 = mul i32 %_140, 5
  %551 = mul i32 %550, 5
  %_142 = shl i32 %551, 2
  %552 = add i32 %551, 2
  %553 = icmp eq i32 %552, -3
  br label %originalBB65

originalBB146alteredBB:                           ; preds = %originalBB146, %199
  br label %originalBB146

originalBB150alteredBB:                           ; preds = %originalBB150, %216
  %554 = call i8* @xrealloc(i8* %172, i64 %176), !dbg !1436
  %555 = bitcast i8* %554 to %struct.slotvec*, !dbg !1436
  store %struct.slotvec* %555, %struct.slotvec** %10, align 8, !dbg !1437
  store %struct.slotvec* %555, %struct.slotvec** @slotvec, align 8, !dbg !1438
  %556 = load i8, i8* %11, align 1, !dbg !1439
  %557 = trunc i8 %556 to i1, !dbg !1439
  br label %originalBB150

originalBB154alteredBB:                           ; preds = %originalBB154, %237
  %558 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1442
  %559 = bitcast %struct.slotvec* %558 to i8*, !dbg !1443
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %559, i8* align 8 bitcast (%struct.slotvec* @slotvec0 to i8*), i64 16, i1 false), !dbg !1443
  br label %originalBB154

originalBB158alteredBB:                           ; preds = %originalBB158, %256
  %560 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1445
  %561 = load i32, i32* @nslots, align 4, !dbg !1446
  %562 = sext i32 %561 to i64, !dbg !1447
  %563 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %560, i64 %562, !dbg !1447
  %564 = bitcast %struct.slotvec* %563 to i8*, !dbg !1448
  %565 = load i32, i32* %5, align 4, !dbg !1449
  %_159 = sub i32 0, %565
  %gen160 = add i32 %_159, 1
  %_161 = sub i32 0, %565
  %gen162 = add i32 %_161, 1
  %_163 = sub i32 0, %565
  %gen164 = add i32 %_163, 1
  %_165 = shl i32 %565, 1
  %_166 = sub i32 %565, 1
  %gen167 = mul i32 %_166, 1
  %_168 = sub i32 %565, 1
  %gen169 = mul i32 %_168, 1
  %_170 = shl i32 %565, 1
  %566 = add nsw i32 %565, 1, !dbg !1450
  %567 = load i32, i32* @nslots, align 4, !dbg !1451
  %_171 = shl i32 %566, %567
  %_172 = sub i32 0, %566
  %gen173 = add i32 %_172, %567
  %568 = sub nsw i32 %566, %567, !dbg !1452
  %569 = sext i32 %568 to i64, !dbg !1453
  %_174 = sub i64 %569, 16
  %gen175 = mul i64 %_174, 16
  %_176 = sub i64 %569, 16
  %gen177 = mul i64 %_176, 16
  %_178 = shl i64 %569, 16
  %_179 = shl i64 %569, 16
  %_180 = sub i64 0, %569
  %gen181 = add i64 %_180, 16
  %570 = mul i64 %569, 16, !dbg !1454
  call void @llvm.memset.p0i8.i64(i8* align 8 %564, i8 0, i64 %570, i1 false), !dbg !1448
  %571 = load i32, i32* %5, align 4, !dbg !1455
  %_182 = shl i32 %571, 1
  %_183 = sub i32 0, %571
  %gen184 = add i32 %_183, 1
  %_185 = sub i32 0, %571
  %gen186 = add i32 %_185, 1
  %_187 = shl i32 %571, 1
  %_188 = shl i32 %571, 1
  %572 = add nsw i32 %571, 1, !dbg !1456
  store i32 %572, i32* @nslots, align 4, !dbg !1457
  br label %originalBB158

originalBB192alteredBB:                           ; preds = %originalBB192, %286
  %573 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1462
  %574 = load i32, i32* %5, align 4, !dbg !1463
  %575 = sext i32 %574 to i64, !dbg !1462
  %576 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %573, i64 %575, !dbg !1462
  %577 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %576, i32 0, i32 0, !dbg !1464
  %578 = load i64, i64* %577, align 8, !dbg !1464
  store i64 %578, i64* %13, align 8, !dbg !1461
  call void @llvm.dbg.declare(metadata !4, metadata !1575, metadata !DIExpression()), !dbg !1466
  %579 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1467
  %580 = load i32, i32* %5, align 4, !dbg !1468
  %581 = sext i32 %580 to i64, !dbg !1467
  %582 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %579, i64 %581, !dbg !1467
  %583 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %582, i32 0, i32 1, !dbg !1469
  %584 = load i8*, i8** %583, align 8, !dbg !1469
  store i8* %584, i8** %14, align 8, !dbg !1466
  call void @llvm.dbg.declare(metadata !4, metadata !1612, metadata !DIExpression()), !dbg !1471
  %585 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1472
  %586 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %585, i32 0, i32 1, !dbg !1473
  %587 = load i32, i32* %586, align 4, !dbg !1473
  %_193 = shl i32 %587, 1
  %588 = or i32 %587, 1, !dbg !1474
  store i32 %588, i32* %15, align 4, !dbg !1471
  call void @llvm.dbg.declare(metadata !4, metadata !1613, metadata !DIExpression()), !dbg !1476
  %589 = load i8*, i8** %14, align 8, !dbg !1477
  %590 = load i64, i64* %13, align 8, !dbg !1478
  %591 = load i8*, i8** %6, align 8, !dbg !1479
  %592 = load i64, i64* %7, align 8, !dbg !1480
  %593 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1481
  %594 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %593, i32 0, i32 0, !dbg !1482
  %595 = load i32, i32* %594, align 8, !dbg !1482
  %596 = load i32, i32* %15, align 4, !dbg !1483
  %597 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1484
  %598 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %597, i32 0, i32 2, !dbg !1485
  %599 = getelementptr inbounds [8 x i32], [8 x i32]* %598, i64 0, i64 0, !dbg !1484
  %600 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1486
  %601 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %600, i32 0, i32 3, !dbg !1487
  %602 = load i8*, i8** %601, align 8, !dbg !1487
  %603 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1488
  %604 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %603, i32 0, i32 4, !dbg !1489
  %605 = load i8*, i8** %604, align 8, !dbg !1489
  %606 = call i64 @quotearg_buffer_restyled(i8* %589, i64 %590, i8* %591, i64 %592, i32 %595, i32 %596, i32* %599, i8* %602, i8* %605), !dbg !1490
  store i64 %606, i64* %16, align 8, !dbg !1476
  %607 = load i64, i64* %13, align 8, !dbg !1491
  %608 = load i64, i64* %16, align 8, !dbg !1493
  %609 = icmp ule i64 %607, %608, !dbg !1494
  br label %originalBB192

originalBB197alteredBB:                           ; preds = %originalBB197, %340
  %610 = load i64, i64* %16, align 8, !dbg !1496
  %_198 = shl i64 %610, 1
  %_199 = shl i64 %610, 1
  %_200 = sub i64 0, %610
  %gen201 = add i64 %_200, 1
  %_202 = sub i64 0, %610
  %gen203 = add i64 %_202, 1
  %_204 = shl i64 %610, 1
  %611 = add i64 %610, 1, !dbg !1498
  store i64 %611, i64* %13, align 8, !dbg !1499
  %612 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1500
  %613 = load i32, i32* %5, align 4, !dbg !1501
  %614 = trunc i64 %611 to i32
  %_205 = sub i32 0, %614
  %gen206 = add i32 %_205, 4
  %_207 = sub i32 %614, 4
  %gen208 = mul i32 %_207, 4
  %_209 = sub i32 %614, 4
  %gen210 = mul i32 %_209, 4
  %615 = mul i32 %614, 4
  %_211 = shl i32 %615, -1
  %_212 = sub i32 %615, -1
  %gen213 = mul i32 %_212, -1
  %_214 = sub i32 %615, -1
  %gen215 = mul i32 %_214, -1
  %_216 = sub i32 %615, -1
  %gen217 = mul i32 %_216, -1
  %_218 = sub i32 %615, -1
  %gen219 = mul i32 %_218, -1
  %_220 = sub i32 %615, -1
  %gen221 = mul i32 %_220, -1
  %616 = add i32 %615, -1
  %_222 = sub i32 %616, %616
  %gen223 = mul i32 %_222, %616
  %_224 = sub i32 0, %616
  %gen225 = add i32 %_224, %616
  %_226 = shl i32 %616, %616
  %617 = mul i32 %616, %616
  %_227 = sub i32 %617, %616
  %gen228 = mul i32 %_227, %616
  %_229 = shl i32 %617, %616
  %_230 = sub i32 0, %617
  %gen231 = add i32 %_230, %616
  %_232 = sub i32 %617, %616
  %gen233 = mul i32 %_232, %616
  %_234 = shl i32 %617, %616
  %_235 = sub i32 0, %617
  %gen236 = add i32 %_235, %616
  %618 = sub i32 %617, %616
  %_237 = sub i32 %618, 2
  %gen238 = mul i32 %_237, 2
  %_239 = sub i32 %618, 2
  %gen240 = mul i32 %_239, 2
  %_241 = shl i32 %618, 2
  %_242 = sub i32 0, %618
  %gen243 = add i32 %_242, 2
  %_244 = shl i32 %618, 2
  %_245 = sub i32 %618, 2
  %gen246 = mul i32 %_245, 2
  %619 = srem i32 %618, 2
  %_247 = sub i32 %619, 3
  %gen248 = mul i32 %_247, 3
  %_249 = shl i32 %619, 3
  %_250 = shl i32 %619, 3
  %_251 = sub i32 %619, 3
  %gen252 = mul i32 %_251, 3
  %_253 = shl i32 %619, 3
  %620 = mul i32 %619, 3
  %_254 = sub i32 0, %620
  %gen255 = add i32 %_254, -2
  %_256 = sub i32 0, %620
  %gen257 = add i32 %_256, -2
  %_258 = sub i32 %620, -2
  %gen259 = mul i32 %_258, -2
  %621 = add i32 %620, -2
  %622 = icmp ne i32 %621, -2
  br label %originalBB197

originalBB264alteredBB:                           ; preds = %originalBB264, %370
  br label %originalBB264

originalBB268alteredBB:                           ; preds = %originalBB268, %387
  %623 = sext i32 %352 to i64, !dbg !1500
  %624 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %351, i64 %623, !dbg !1500
  %625 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %624, i32 0, i32 0, !dbg !1502
  store i64 %350, i64* %625, align 8, !dbg !1503
  %626 = load i8*, i8** %14, align 8, !dbg !1504
  %627 = icmp ne i8* %626, getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0), !dbg !1506
  br label %originalBB268

originalBB272alteredBB:                           ; preds = %originalBB272, %409
  %628 = load i8*, i8** %14, align 8, !dbg !1508
  call void @free(i8* %628) #10, !dbg !1509
  br label %originalBB272

originalBB276alteredBB:                           ; preds = %originalBB276, %453
  %629 = load i32, i32* %9, align 4, !dbg !1532
  %630 = call i32* @__errno_location() #15, !dbg !1533
  store i32 %629, i32* %630, align 4, !dbg !1534
  %_277 = sub i32 %629, -3
  %gen278 = mul i32 %_277, -3
  %_279 = shl i32 %629, -3
  %_280 = shl i32 %629, -3
  %_281 = sub i32 0, %629
  %gen282 = add i32 %_281, -3
  %_283 = shl i32 %629, -3
  %631 = mul i32 %629, -3
  %_284 = sub i32 %631, -1
  %gen285 = mul i32 %_284, -1
  %_286 = sub i32 0, %631
  %gen287 = add i32 %_286, -1
  %_288 = sub i32 0, %631
  %gen289 = add i32 %_288, -1
  %_290 = sub i32 0, %631
  %gen291 = add i32 %_290, -1
  %_292 = shl i32 %631, -1
  %632 = add i32 %631, -1
  %_293 = sub i32 0, %629
  %gen294 = add i32 %_293, 3
  %_295 = sub i32 %629, 3
  %gen296 = mul i32 %_295, 3
  %_297 = sub i32 %629, 3
  %gen298 = mul i32 %_297, 3
  %_299 = sub i32 %629, 3
  %gen300 = mul i32 %_299, 3
  %_301 = sub i32 %629, 3
  %gen302 = mul i32 %_301, 3
  %633 = mul i32 %629, 3
  %_303 = sub i32 0, %633
  %gen304 = add i32 %_303, -2
  %_305 = shl i32 %633, -2
  %_306 = sub i32 %633, -2
  %gen307 = mul i32 %_306, -2
  %_308 = sub i32 0, %633
  %gen309 = add i32 %_308, -2
  %_310 = shl i32 %633, -2
  %_311 = shl i32 %633, -2
  %634 = add i32 %633, -2
  %_312 = sub i32 0, %632
  %gen313 = add i32 %_312, %632
  %_314 = sub i32 %632, %632
  %gen315 = mul i32 %_314, %632
  %635 = mul i32 %632, %632
  %_316 = sub i32 %634, %634
  %gen317 = mul i32 %_316, %634
  %636 = mul i32 %634, %634
  %_318 = sub i32 %636, 34
  %gen319 = mul i32 %_318, 34
  %_320 = sub i32 0, %636
  %gen321 = add i32 %_320, 34
  %_322 = sub i32 %636, 34
  %gen323 = mul i32 %_322, 34
  %637 = mul i32 %636, 34
  %_324 = sub i32 0, %635
  %gen325 = add i32 %_324, %637
  %_326 = sub i32 %635, %637
  %gen327 = mul i32 %_326, %637
  %638 = sub i32 %635, %637
  %_328 = shl i32 %638, 4
  %_329 = shl i32 %638, 4
  %_330 = sub i32 0, %638
  %gen331 = add i32 %_330, 4
  %639 = add i32 %638, 4
  %640 = icmp ne i32 %639, 4
  br label %originalBB276

originalBB335alteredBB:                           ; preds = %originalBB335, %482
  br label %originalBB335

originalBB339alteredBB:                           ; preds = %originalBB339, %499
  %641 = load i8*, i8** %14, align 8, !dbg !1535
  br label %originalBB339
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @quotearg_buffer_restyled(i8*, i64, i8*, i64, i32, i32, i32*, i8*, i8*) #4 !dbg !1614 {
  %10 = load i32, i32* @x.35
  %11 = load i32, i32* @y.36
  %12 = sub i32 %10, 1
  %13 = mul i32 %10, %12
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  %16 = icmp slt i32 %11, 10
  %17 = or i1 %15, %16
  br i1 %17, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %9, %originalBBalteredBB
  %18 = alloca i64, align 8
  %19 = alloca i8*, align 8
  %20 = alloca i64, align 8
  %21 = alloca i8*, align 8
  %22 = alloca i64, align 8
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32*, align 8
  %26 = alloca i8*, align 8
  %27 = alloca i8*, align 8
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  %30 = alloca i64, align 8
  %31 = alloca i8*, align 8
  %32 = alloca i64, align 8
  %33 = alloca i8, align 1
  %34 = alloca i8, align 1
  %35 = alloca i8, align 1
  %36 = alloca i8, align 1
  %37 = alloca i8, align 1
  %38 = alloca i8, align 1
  %39 = alloca i8, align 1
  %40 = alloca i8, align 1
  %41 = alloca i8, align 1
  %42 = alloca i8, align 1
  %43 = alloca i8, align 1
  %44 = alloca i64, align 8
  %45 = alloca i8, align 1
  %46 = alloca %struct.__mbstate_t, align 4
  %47 = alloca i32, align 4
  %48 = alloca i64, align 8
  %49 = alloca i64, align 8
  %50 = alloca i64, align 8
  store i8* %0, i8** %19, align 8
  call void @llvm.dbg.declare(metadata i8** %19, metadata !1619, metadata !DIExpression()), !dbg !1620
  store i64 %1, i64* %20, align 8
  call void @llvm.dbg.declare(metadata i64* %20, metadata !1621, metadata !DIExpression()), !dbg !1622
  store i8* %2, i8** %21, align 8
  call void @llvm.dbg.declare(metadata i8** %21, metadata !1623, metadata !DIExpression()), !dbg !1624
  store i64 %3, i64* %22, align 8
  call void @llvm.dbg.declare(metadata i64* %22, metadata !1625, metadata !DIExpression()), !dbg !1626
  store i32 %4, i32* %23, align 4
  call void @llvm.dbg.declare(metadata i32* %23, metadata !1627, metadata !DIExpression()), !dbg !1628
  store i32 %5, i32* %24, align 4
  call void @llvm.dbg.declare(metadata i32* %24, metadata !1629, metadata !DIExpression()), !dbg !1630
  store i32* %6, i32** %25, align 8
  call void @llvm.dbg.declare(metadata i32** %25, metadata !1631, metadata !DIExpression()), !dbg !1632
  store i8* %7, i8** %26, align 8
  call void @llvm.dbg.declare(metadata i8** %26, metadata !1633, metadata !DIExpression()), !dbg !1634
  store i8* %8, i8** %27, align 8
  call void @llvm.dbg.declare(metadata i8** %27, metadata !1635, metadata !DIExpression()), !dbg !1636
  call void @llvm.dbg.declare(metadata i64* %28, metadata !1637, metadata !DIExpression()), !dbg !1638
  call void @llvm.dbg.declare(metadata i64* %29, metadata !1639, metadata !DIExpression()), !dbg !1640
  store i64 0, i64* %29, align 8, !dbg !1640
  call void @llvm.dbg.declare(metadata i64* %30, metadata !1641, metadata !DIExpression()), !dbg !1642
  store i64 0, i64* %30, align 8, !dbg !1642
  call void @llvm.dbg.declare(metadata i8** %31, metadata !1643, metadata !DIExpression()), !dbg !1644
  store i8* null, i8** %31, align 8, !dbg !1644
  call void @llvm.dbg.declare(metadata i64* %32, metadata !1645, metadata !DIExpression()), !dbg !1646
  store i64 0, i64* %32, align 8, !dbg !1646
  call void @llvm.dbg.declare(metadata i8* %33, metadata !1647, metadata !DIExpression()), !dbg !1648
  store i8 0, i8* %33, align 1, !dbg !1648
  call void @llvm.dbg.declare(metadata i8* %34, metadata !1649, metadata !DIExpression()), !dbg !1650
  %51 = call i64 @__ctype_get_mb_cur_max() #10, !dbg !1651
  %52 = icmp eq i64 %51, 1, !dbg !1652
  %53 = zext i1 %52 to i8, !dbg !1650
  store i8 %53, i8* %34, align 1, !dbg !1650
  call void @llvm.dbg.declare(metadata i8* %35, metadata !1653, metadata !DIExpression()), !dbg !1654
  %54 = load i32, i32* %24, align 4, !dbg !1655
  %55 = and i32 %54, 2, !dbg !1656
  %56 = icmp ne i32 %55, 0, !dbg !1657
  %57 = zext i1 %56 to i8, !dbg !1654
  store i8 %57, i8* %35, align 1, !dbg !1654
  call void @llvm.dbg.declare(metadata i8* %36, metadata !1658, metadata !DIExpression()), !dbg !1659
  store i8 0, i8* %36, align 1, !dbg !1659
  call void @llvm.dbg.declare(metadata i8* %37, metadata !1660, metadata !DIExpression()), !dbg !1661
  store i8 0, i8* %37, align 1, !dbg !1661
  call void @llvm.dbg.declare(metadata i8* %38, metadata !1662, metadata !DIExpression()), !dbg !1663
  store i8 1, i8* %38, align 1, !dbg !1663
  %58 = load i32, i32* @x.35
  %59 = load i32, i32* @y.36
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %66, !dbg !1664

66:                                               ; preds = %originalBBpart21771, %originalBBpart2
  call void @llvm.dbg.label(metadata !1665), !dbg !1666
  %67 = load i32, i32* @x.35
  %68 = load i32, i32* @y.36
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB5, label %originalBB5alteredBB

originalBB5:                                      ; preds = %66, %originalBB5alteredBB
  %75 = load i32, i32* %23, align 4, !dbg !1667
  %76 = load i32, i32* @x.35
  %77 = load i32, i32* @y.36
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBBpart27, label %originalBB5alteredBB

originalBBpart27:                                 ; preds = %originalBB5
  switch i32 %75, label %648 [
    i32 6, label %84
    i32 5, label %101
    i32 7, label %230
    i32 8, label %247
    i32 9, label %247
    i32 10, label %247
    i32 3, label %447
    i32 1, label %464
    i32 4, label %481
    i32 2, label %534
    i32 0, label %631
  ], !dbg !1668

84:                                               ; preds = %originalBBpart27
  %85 = load i32, i32* @x.35
  %86 = load i32, i32* @y.36
  %87 = sub i32 %85, 1
  %88 = mul i32 %85, %87
  %89 = urem i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %90, %91
  br i1 %92, label %originalBB9, label %originalBB9alteredBB

originalBB9:                                      ; preds = %84, %originalBB9alteredBB
  store i32 5, i32* %23, align 4, !dbg !1669
  store i8 1, i8* %35, align 1, !dbg !1671
  %93 = load i32, i32* @x.35
  %94 = load i32, i32* @y.36
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBBpart211, label %originalBB9alteredBB

originalBBpart211:                                ; preds = %originalBB9
  br label %101, !dbg !1672

101:                                              ; preds = %originalBBpart211, %originalBBpart27
  %102 = load i32, i32* @x.35
  %103 = load i32, i32* @y.36
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB13, label %originalBB13alteredBB

originalBB13:                                     ; preds = %101, %originalBB13alteredBB
  %110 = load i8, i8* %35, align 1, !dbg !1673
  %111 = trunc i8 %110 to i1, !dbg !1673
  %112 = load i32, i32* @x.35
  %113 = load i32, i32* @y.36
  %114 = sub i32 %112, 1
  %115 = mul i32 %112, %114
  %116 = urem i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %113, 10
  %119 = or i1 %117, %118
  br i1 %119, label %originalBBpart215, label %originalBB13alteredBB

originalBBpart215:                                ; preds = %originalBB13
  br i1 %111, label %213, label %120, !dbg !1675

120:                                              ; preds = %originalBBpart215
  %121 = load i32, i32* @x.35
  %122 = load i32, i32* @y.36
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBB17, label %originalBB17alteredBB

originalBB17:                                     ; preds = %120, %originalBB17alteredBB
  %129 = load i32, i32* @x.35
  %130 = load i32, i32* @y.36
  %131 = sub i32 %129, 1
  %132 = mul i32 %129, %131
  %133 = urem i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %130, 10
  %136 = or i1 %134, %135
  br i1 %136, label %originalBBpart219, label %originalBB17alteredBB

originalBBpart219:                                ; preds = %originalBB17
  br label %137, !dbg !1676

137:                                              ; preds = %originalBBpart219
  %138 = load i32, i32* @x.35
  %139 = load i32, i32* @y.36
  %140 = sub i32 %138, 1
  %141 = mul i32 %138, %140
  %142 = urem i32 %141, 2
  %143 = icmp eq i32 %142, 0
  %144 = icmp slt i32 %139, 10
  %145 = or i1 %143, %144
  br i1 %145, label %originalBB21, label %originalBB21alteredBB

originalBB21:                                     ; preds = %137, %originalBB21alteredBB
  %146 = load i64, i64* %29, align 8, !dbg !1677
  %147 = load i64, i64* %20, align 8, !dbg !1677
  %148 = icmp ult i64 %146, %147, !dbg !1677
  %149 = load i32, i32* @x.35
  %150 = load i32, i32* @y.36
  %151 = sub i32 %149, 1
  %152 = mul i32 %149, %151
  %153 = urem i32 %152, 2
  %154 = icmp eq i32 %153, 0
  %155 = icmp slt i32 %150, 10
  %156 = or i1 %154, %155
  br i1 %156, label %originalBBpart223, label %originalBB21alteredBB

originalBBpart223:                                ; preds = %originalBB21
  br i1 %148, label %157, label %177, !dbg !1680

157:                                              ; preds = %originalBBpart223
  %158 = load i32, i32* @x.35
  %159 = load i32, i32* @y.36
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBB25, label %originalBB25alteredBB

originalBB25:                                     ; preds = %157, %originalBB25alteredBB
  %166 = load i8*, i8** %19, align 8, !dbg !1677
  %167 = load i64, i64* %29, align 8, !dbg !1677
  %168 = getelementptr inbounds i8, i8* %166, i64 %167, !dbg !1677
  store i8 34, i8* %168, align 1, !dbg !1677
  %169 = load i32, i32* @x.35
  %170 = load i32, i32* @y.36
  %171 = sub i32 %169, 1
  %172 = mul i32 %169, %171
  %173 = urem i32 %172, 2
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %174, %175
  br i1 %176, label %originalBBpart227, label %originalBB25alteredBB

originalBBpart227:                                ; preds = %originalBB25
  br label %177, !dbg !1677

177:                                              ; preds = %originalBBpart227, %originalBBpart223
  %178 = load i32, i32* @x.35
  %179 = load i32, i32* @y.36
  %180 = sub i32 %178, 1
  %181 = mul i32 %178, %180
  %182 = urem i32 %181, 2
  %183 = icmp eq i32 %182, 0
  %184 = icmp slt i32 %179, 10
  %185 = or i1 %183, %184
  br i1 %185, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %177, %originalBB29alteredBB
  %186 = load i64, i64* %29, align 8, !dbg !1680
  %187 = add i64 %186, 1, !dbg !1680
  store i64 %187, i64* %29, align 8, !dbg !1680
  %188 = load i32, i32* @x.35
  %189 = load i32, i32* @y.36
  %190 = sub i32 %188, 1
  %191 = mul i32 %188, %190
  %192 = urem i32 %191, 2
  %193 = icmp eq i32 %192, 0
  %194 = icmp slt i32 %189, 10
  %195 = or i1 %193, %194
  br i1 %195, label %originalBBpart236, label %originalBB29alteredBB

originalBBpart236:                                ; preds = %originalBB29
  br label %196, !dbg !1680

196:                                              ; preds = %originalBBpart236
  %197 = load i32, i32* @x.35
  %198 = load i32, i32* @y.36
  %199 = sub i32 %197, 1
  %200 = mul i32 %197, %199
  %201 = urem i32 %200, 2
  %202 = icmp eq i32 %201, 0
  %203 = icmp slt i32 %198, 10
  %204 = or i1 %202, %203
  br i1 %204, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %196, %originalBB38alteredBB
  %205 = load i32, i32* @x.35
  %206 = load i32, i32* @y.36
  %207 = sub i32 %205, 1
  %208 = mul i32 %205, %207
  %209 = urem i32 %208, 2
  %210 = icmp eq i32 %209, 0
  %211 = icmp slt i32 %206, 10
  %212 = or i1 %210, %211
  br i1 %212, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br label %213, !dbg !1680

213:                                              ; preds = %originalBBpart240, %originalBBpart215
  %214 = load i32, i32* @x.35
  %215 = load i32, i32* @y.36
  %216 = sub i32 %214, 1
  %217 = mul i32 %214, %216
  %218 = urem i32 %217, 2
  %219 = icmp eq i32 %218, 0
  %220 = icmp slt i32 %215, 10
  %221 = or i1 %219, %220
  br i1 %221, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %213, %originalBB42alteredBB
  store i8 1, i8* %33, align 1, !dbg !1681
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.63, i64 0, i64 0), i8** %31, align 8, !dbg !1682
  store i64 1, i64* %32, align 8, !dbg !1683
  %222 = load i32, i32* @x.35
  %223 = load i32, i32* @y.36
  %224 = sub i32 %222, 1
  %225 = mul i32 %222, %224
  %226 = urem i32 %225, 2
  %227 = icmp eq i32 %226, 0
  %228 = icmp slt i32 %223, 10
  %229 = or i1 %227, %228
  br i1 %229, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br label %665, !dbg !1684

230:                                              ; preds = %originalBBpart27
  %231 = load i32, i32* @x.35
  %232 = load i32, i32* @y.36
  %233 = sub i32 %231, 1
  %234 = mul i32 %231, %233
  %235 = urem i32 %234, 2
  %236 = icmp eq i32 %235, 0
  %237 = icmp slt i32 %232, 10
  %238 = or i1 %236, %237
  br i1 %238, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %230, %originalBB46alteredBB
  store i8 1, i8* %33, align 1, !dbg !1685
  store i8 0, i8* %35, align 1, !dbg !1686
  %239 = load i32, i32* @x.35
  %240 = load i32, i32* @y.36
  %241 = sub i32 %239, 1
  %242 = mul i32 %239, %241
  %243 = urem i32 %242, 2
  %244 = icmp eq i32 %243, 0
  %245 = icmp slt i32 %240, 10
  %246 = or i1 %244, %245
  br i1 %246, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br label %665, !dbg !1687

247:                                              ; preds = %originalBBpart27, %originalBBpart27, %originalBBpart27
  %248 = load i32, i32* @x.35
  %249 = load i32, i32* @y.36
  %250 = sub i32 %248, 1
  %251 = mul i32 %248, %250
  %252 = urem i32 %251, 2
  %253 = icmp eq i32 %252, 0
  %254 = icmp slt i32 %249, 10
  %255 = or i1 %253, %254
  br i1 %255, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %247, %originalBB50alteredBB
  %256 = load i32, i32* %23, align 4, !dbg !1688
  %257 = icmp ne i32 %256, 10, !dbg !1691
  %258 = load i32, i32* @x.35
  %259 = load i32, i32* @y.36
  %260 = sub i32 %258, 1
  %261 = mul i32 %258, %260
  %262 = urem i32 %261, 2
  %263 = icmp eq i32 %262, 0
  %264 = icmp slt i32 %259, 10
  %265 = or i1 %263, %264
  br i1 %265, label %originalBBpart252, label %originalBB50alteredBB

originalBBpart252:                                ; preds = %originalBB50
  br i1 %257, label %266, label %287, !dbg !1692

266:                                              ; preds = %originalBBpart252
  %267 = load i32, i32* @x.35
  %268 = load i32, i32* @y.36
  %269 = sub i32 %267, 1
  %270 = mul i32 %267, %269
  %271 = urem i32 %270, 2
  %272 = icmp eq i32 %271, 0
  %273 = icmp slt i32 %268, 10
  %274 = or i1 %272, %273
  br i1 %274, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %266, %originalBB54alteredBB
  %275 = load i32, i32* %23, align 4, !dbg !1693
  %276 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.64, i64 0, i64 0), i32 %275), !dbg !1695
  store i8* %276, i8** %26, align 8, !dbg !1696
  %277 = load i32, i32* %23, align 4, !dbg !1697
  %278 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.65, i64 0, i64 0), i32 %277), !dbg !1698
  store i8* %278, i8** %27, align 8, !dbg !1699
  %279 = load i32, i32* @x.35
  %280 = load i32, i32* @y.36
  %281 = sub i32 %279, 1
  %282 = mul i32 %279, %281
  %283 = urem i32 %282, 2
  %284 = icmp eq i32 %283, 0
  %285 = icmp slt i32 %280, 10
  %286 = or i1 %284, %285
  br i1 %286, label %originalBBpart256, label %originalBB54alteredBB

originalBBpart256:                                ; preds = %originalBB54
  br label %287, !dbg !1700

287:                                              ; preds = %originalBBpart256, %originalBBpart252
  %288 = load i32, i32* @x.35
  %289 = load i32, i32* @y.36
  %290 = sub i32 %288, 1
  %291 = mul i32 %288, %290
  %292 = urem i32 %291, 2
  %293 = icmp eq i32 %292, 0
  %294 = icmp slt i32 %289, 10
  %295 = or i1 %293, %294
  br i1 %295, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %287, %originalBB58alteredBB
  %296 = load i8, i8* %35, align 1, !dbg !1701
  %297 = trunc i8 %296 to i1, !dbg !1701
  %298 = load i32, i32* @x.35
  %299 = load i32, i32* @y.36
  %300 = sub i32 %298, 1
  %301 = mul i32 %298, %300
  %302 = urem i32 %301, 2
  %303 = icmp eq i32 %302, 0
  %304 = icmp slt i32 %299, 10
  %305 = or i1 %303, %304
  br i1 %305, label %originalBBpart260, label %originalBB58alteredBB

originalBBpart260:                                ; preds = %originalBB58
  br i1 %297, label %427, label %306, !dbg !1703

306:                                              ; preds = %originalBBpart260
  %307 = load i8*, i8** %26, align 8, !dbg !1704
  store i8* %307, i8** %31, align 8, !dbg !1706
  br label %308, !dbg !1707

308:                                              ; preds = %407, %306
  %309 = load i32, i32* @x.35
  %310 = load i32, i32* @y.36
  %311 = sub i32 %309, 1
  %312 = mul i32 %309, %311
  %313 = urem i32 %312, 2
  %314 = icmp eq i32 %313, 0
  %315 = icmp slt i32 %310, 10
  %316 = or i1 %314, %315
  br i1 %316, label %originalBB62, label %originalBB62alteredBB

originalBB62:                                     ; preds = %308, %originalBB62alteredBB
  %317 = load i8*, i8** %31, align 8, !dbg !1708
  %318 = load i8, i8* %317, align 1, !dbg !1710
  %319 = icmp ne i8 %318, 0, !dbg !1711
  %320 = load i32, i32* @x.35
  %321 = load i32, i32* @y.36
  %322 = sub i32 %320, 1
  %323 = mul i32 %320, %322
  %324 = urem i32 %323, 2
  %325 = icmp eq i32 %324, 0
  %326 = icmp slt i32 %321, 10
  %327 = or i1 %325, %326
  br i1 %327, label %originalBBpart264, label %originalBB62alteredBB

originalBBpart264:                                ; preds = %originalBB62
  br i1 %319, label %328, label %410, !dbg !1711

328:                                              ; preds = %originalBBpart264
  %329 = load i32, i32* @x.35
  %330 = load i32, i32* @y.36
  %331 = sub i32 %329, 1
  %332 = mul i32 %329, %331
  %333 = urem i32 %332, 2
  %334 = icmp eq i32 %333, 0
  %335 = icmp slt i32 %330, 10
  %336 = or i1 %334, %335
  br i1 %336, label %originalBB66, label %originalBB66alteredBB

originalBB66:                                     ; preds = %328, %originalBB66alteredBB
  %337 = load i32, i32* @x.35
  %338 = load i32, i32* @y.36
  %339 = sub i32 %337, 1
  %340 = mul i32 %337, %339
  %341 = urem i32 %340, 2
  %342 = icmp eq i32 %341, 0
  %343 = icmp slt i32 %338, 10
  %344 = or i1 %342, %343
  br i1 %344, label %originalBBpart268, label %originalBB66alteredBB

originalBBpart268:                                ; preds = %originalBB66
  br label %345, !dbg !1712

345:                                              ; preds = %originalBBpart268
  %346 = load i32, i32* @x.35
  %347 = load i32, i32* @y.36
  %348 = sub i32 %346, 1
  %349 = mul i32 %346, %348
  %350 = urem i32 %349, 2
  %351 = icmp eq i32 %350, 0
  %352 = icmp slt i32 %347, 10
  %353 = or i1 %351, %352
  br i1 %353, label %originalBB70, label %originalBB70alteredBB

originalBB70:                                     ; preds = %345, %originalBB70alteredBB
  %354 = load i64, i64* %29, align 8, !dbg !1713
  %355 = load i64, i64* %20, align 8, !dbg !1713
  %356 = icmp ult i64 %354, %355, !dbg !1713
  %357 = load i32, i32* @x.35
  %358 = load i32, i32* @y.36
  %359 = sub i32 %357, 1
  %360 = mul i32 %357, %359
  %361 = urem i32 %360, 2
  %362 = icmp eq i32 %361, 0
  %363 = icmp slt i32 %358, 10
  %364 = or i1 %362, %363
  br i1 %364, label %originalBBpart272, label %originalBB70alteredBB

originalBBpart272:                                ; preds = %originalBB70
  br i1 %356, label %365, label %371, !dbg !1716

365:                                              ; preds = %originalBBpart272
  %366 = load i8*, i8** %31, align 8, !dbg !1713
  %367 = load i8, i8* %366, align 1, !dbg !1713
  %368 = load i8*, i8** %19, align 8, !dbg !1713
  %369 = load i64, i64* %29, align 8, !dbg !1713
  %370 = getelementptr inbounds i8, i8* %368, i64 %369, !dbg !1713
  store i8 %367, i8* %370, align 1, !dbg !1713
  br label %371, !dbg !1713

371:                                              ; preds = %365, %originalBBpart272
  %372 = load i32, i32* @x.35
  %373 = load i32, i32* @y.36
  %374 = sub i32 %372, 1
  %375 = mul i32 %372, %374
  %376 = urem i32 %375, 2
  %377 = icmp eq i32 %376, 0
  %378 = icmp slt i32 %373, 10
  %379 = or i1 %377, %378
  br i1 %379, label %originalBB74, label %originalBB74alteredBB

originalBB74:                                     ; preds = %371, %originalBB74alteredBB
  %380 = load i64, i64* %29, align 8, !dbg !1716
  %381 = add i64 %380, 1, !dbg !1716
  store i64 %381, i64* %29, align 8, !dbg !1716
  %382 = load i32, i32* @x.35
  %383 = load i32, i32* @y.36
  %384 = sub i32 %382, 1
  %385 = mul i32 %382, %384
  %386 = urem i32 %385, 2
  %387 = icmp eq i32 %386, 0
  %388 = icmp slt i32 %383, 10
  %389 = or i1 %387, %388
  br i1 %389, label %originalBBpart289, label %originalBB74alteredBB

originalBBpart289:                                ; preds = %originalBB74
  br label %390, !dbg !1716

390:                                              ; preds = %originalBBpart289
  %391 = load i32, i32* @x.35
  %392 = load i32, i32* @y.36
  %393 = sub i32 %391, 1
  %394 = mul i32 %391, %393
  %395 = urem i32 %394, 2
  %396 = icmp eq i32 %395, 0
  %397 = icmp slt i32 %392, 10
  %398 = or i1 %396, %397
  br i1 %398, label %originalBB91, label %originalBB91alteredBB

originalBB91:                                     ; preds = %390, %originalBB91alteredBB
  %399 = load i32, i32* @x.35
  %400 = load i32, i32* @y.36
  %401 = sub i32 %399, 1
  %402 = mul i32 %399, %401
  %403 = urem i32 %402, 2
  %404 = icmp eq i32 %403, 0
  %405 = icmp slt i32 %400, 10
  %406 = or i1 %404, %405
  br i1 %406, label %originalBBpart293, label %originalBB91alteredBB

originalBBpart293:                                ; preds = %originalBB91
  br label %407, !dbg !1716

407:                                              ; preds = %originalBBpart293
  %408 = load i8*, i8** %31, align 8, !dbg !1717
  %409 = getelementptr inbounds i8, i8* %408, i32 1, !dbg !1717
  store i8* %409, i8** %31, align 8, !dbg !1717
  br label %308, !dbg !1718, !llvm.loop !1719

410:                                              ; preds = %originalBBpart264
  %411 = load i32, i32* @x.35
  %412 = load i32, i32* @y.36
  %413 = sub i32 %411, 1
  %414 = mul i32 %411, %413
  %415 = urem i32 %414, 2
  %416 = icmp eq i32 %415, 0
  %417 = icmp slt i32 %412, 10
  %418 = or i1 %416, %417
  br i1 %418, label %originalBB95, label %originalBB95alteredBB

originalBB95:                                     ; preds = %410, %originalBB95alteredBB
  %419 = load i32, i32* @x.35
  %420 = load i32, i32* @y.36
  %421 = sub i32 %419, 1
  %422 = mul i32 %419, %421
  %423 = urem i32 %422, 2
  %424 = icmp eq i32 %423, 0
  %425 = icmp slt i32 %420, 10
  %426 = or i1 %424, %425
  br i1 %426, label %originalBBpart297, label %originalBB95alteredBB

originalBBpart297:                                ; preds = %originalBB95
  br label %427, !dbg !1720

427:                                              ; preds = %originalBBpart297, %originalBBpart260
  %428 = load i32, i32* @x.35
  %429 = load i32, i32* @y.36
  %430 = sub i32 %428, 1
  %431 = mul i32 %428, %430
  %432 = urem i32 %431, 2
  %433 = icmp eq i32 %432, 0
  %434 = icmp slt i32 %429, 10
  %435 = or i1 %433, %434
  br i1 %435, label %originalBB99, label %originalBB99alteredBB

originalBB99:                                     ; preds = %427, %originalBB99alteredBB
  store i8 1, i8* %33, align 1, !dbg !1721
  %436 = load i8*, i8** %27, align 8, !dbg !1722
  store i8* %436, i8** %31, align 8, !dbg !1723
  %437 = load i8*, i8** %31, align 8, !dbg !1724
  %438 = call i64 @strlen(i8* %437) #13, !dbg !1725
  store i64 %438, i64* %32, align 8, !dbg !1726
  %439 = load i32, i32* @x.35
  %440 = load i32, i32* @y.36
  %441 = sub i32 %439, 1
  %442 = mul i32 %439, %441
  %443 = urem i32 %442, 2
  %444 = icmp eq i32 %443, 0
  %445 = icmp slt i32 %440, 10
  %446 = or i1 %444, %445
  br i1 %446, label %originalBBpart2101, label %originalBB99alteredBB

originalBBpart2101:                               ; preds = %originalBB99
  br label %665, !dbg !1727

447:                                              ; preds = %originalBBpart27
  %448 = load i32, i32* @x.35
  %449 = load i32, i32* @y.36
  %450 = sub i32 %448, 1
  %451 = mul i32 %448, %450
  %452 = urem i32 %451, 2
  %453 = icmp eq i32 %452, 0
  %454 = icmp slt i32 %449, 10
  %455 = or i1 %453, %454
  br i1 %455, label %originalBB103, label %originalBB103alteredBB

originalBB103:                                    ; preds = %447, %originalBB103alteredBB
  store i8 1, i8* %33, align 1, !dbg !1728
  %456 = load i32, i32* @x.35
  %457 = load i32, i32* @y.36
  %458 = sub i32 %456, 1
  %459 = mul i32 %456, %458
  %460 = urem i32 %459, 2
  %461 = icmp eq i32 %460, 0
  %462 = icmp slt i32 %457, 10
  %463 = or i1 %461, %462
  br i1 %463, label %originalBBpart2105, label %originalBB103alteredBB

originalBBpart2105:                               ; preds = %originalBB103
  br label %464, !dbg !1729

464:                                              ; preds = %originalBBpart2105, %originalBBpart27
  %465 = load i32, i32* @x.35
  %466 = load i32, i32* @y.36
  %467 = sub i32 %465, 1
  %468 = mul i32 %465, %467
  %469 = urem i32 %468, 2
  %470 = icmp eq i32 %469, 0
  %471 = icmp slt i32 %466, 10
  %472 = or i1 %470, %471
  br i1 %472, label %originalBB107, label %originalBB107alteredBB

originalBB107:                                    ; preds = %464, %originalBB107alteredBB
  store i8 1, i8* %35, align 1, !dbg !1730
  %473 = load i32, i32* @x.35
  %474 = load i32, i32* @y.36
  %475 = sub i32 %473, 1
  %476 = mul i32 %473, %475
  %477 = urem i32 %476, 2
  %478 = icmp eq i32 %477, 0
  %479 = icmp slt i32 %474, 10
  %480 = or i1 %478, %479
  br i1 %480, label %originalBBpart2109, label %originalBB107alteredBB

originalBBpart2109:                               ; preds = %originalBB107
  br label %481, !dbg !1731

481:                                              ; preds = %originalBBpart2109, %originalBBpart27
  %482 = load i32, i32* @x.35
  %483 = load i32, i32* @y.36
  %484 = sub i32 %482, 1
  %485 = mul i32 %482, %484
  %486 = urem i32 %485, 2
  %487 = icmp eq i32 %486, 0
  %488 = icmp slt i32 %483, 10
  %489 = or i1 %487, %488
  br i1 %489, label %originalBB111, label %originalBB111alteredBB

originalBB111:                                    ; preds = %481, %originalBB111alteredBB
  %490 = load i8, i8* %35, align 1, !dbg !1732
  %491 = trunc i8 %490 to i1, !dbg !1732
  %492 = load i32, i32* @x.35
  %493 = load i32, i32* @y.36
  %494 = sub i32 %492, 1
  %495 = mul i32 %492, %494
  %496 = urem i32 %495, 2
  %497 = icmp eq i32 %496, 0
  %498 = icmp slt i32 %493, 10
  %499 = or i1 %497, %498
  br i1 %499, label %originalBBpart2113, label %originalBB111alteredBB

originalBBpart2113:                               ; preds = %originalBB111
  br i1 %491, label %517, label %500, !dbg !1734

500:                                              ; preds = %originalBBpart2113
  %501 = load i32, i32* @x.35
  %502 = load i32, i32* @y.36
  %503 = sub i32 %501, 1
  %504 = mul i32 %501, %503
  %505 = urem i32 %504, 2
  %506 = icmp eq i32 %505, 0
  %507 = icmp slt i32 %502, 10
  %508 = or i1 %506, %507
  br i1 %508, label %originalBB115, label %originalBB115alteredBB

originalBB115:                                    ; preds = %500, %originalBB115alteredBB
  store i8 1, i8* %33, align 1, !dbg !1735
  %509 = load i32, i32* @x.35
  %510 = load i32, i32* @y.36
  %511 = sub i32 %509, 1
  %512 = mul i32 %509, %511
  %513 = urem i32 %512, 2
  %514 = icmp eq i32 %513, 0
  %515 = icmp slt i32 %510, 10
  %516 = or i1 %514, %515
  br i1 %516, label %originalBBpart2117, label %originalBB115alteredBB

originalBBpart2117:                               ; preds = %originalBB115
  br label %517, !dbg !1736

517:                                              ; preds = %originalBBpart2117, %originalBBpart2113
  %518 = load i32, i32* @x.35
  %519 = load i32, i32* @y.36
  %520 = sub i32 %518, 1
  %521 = mul i32 %518, %520
  %522 = urem i32 %521, 2
  %523 = icmp eq i32 %522, 0
  %524 = icmp slt i32 %519, 10
  %525 = or i1 %523, %524
  br i1 %525, label %originalBB119, label %originalBB119alteredBB

originalBB119:                                    ; preds = %517, %originalBB119alteredBB
  %526 = load i32, i32* @x.35
  %527 = load i32, i32* @y.36
  %528 = sub i32 %526, 1
  %529 = mul i32 %526, %528
  %530 = urem i32 %529, 2
  %531 = icmp eq i32 %530, 0
  %532 = icmp slt i32 %527, 10
  %533 = or i1 %531, %532
  br i1 %533, label %originalBBpart2121, label %originalBB119alteredBB

originalBBpart2121:                               ; preds = %originalBB119
  br label %534, !dbg !1737

534:                                              ; preds = %originalBBpart2121, %originalBBpart27
  %535 = load i32, i32* @x.35
  %536 = load i32, i32* @y.36
  %537 = sub i32 %535, 1
  %538 = mul i32 %535, %537
  %539 = urem i32 %538, 2
  %540 = icmp eq i32 %539, 0
  %541 = icmp slt i32 %536, 10
  %542 = or i1 %540, %541
  br i1 %542, label %originalBB123, label %originalBB123alteredBB

originalBB123:                                    ; preds = %534, %originalBB123alteredBB
  store i32 2, i32* %23, align 4, !dbg !1738
  %543 = load i8, i8* %35, align 1, !dbg !1739
  %544 = trunc i8 %543 to i1, !dbg !1739
  %545 = load i32, i32* @x.35
  %546 = load i32, i32* @y.36
  %547 = sub i32 %545, 1
  %548 = mul i32 %545, %547
  %549 = urem i32 %548, 2
  %550 = icmp eq i32 %549, 0
  %551 = icmp slt i32 %546, 10
  %552 = or i1 %550, %551
  br i1 %552, label %originalBBpart2125, label %originalBB123alteredBB

originalBBpart2125:                               ; preds = %originalBB123
  br i1 %544, label %614, label %553, !dbg !1741

553:                                              ; preds = %originalBBpart2125
  %554 = load i32, i32* @x.35
  %555 = load i32, i32* @y.36
  %556 = sub i32 %554, 1
  %557 = mul i32 %554, %556
  %558 = urem i32 %557, 2
  %559 = icmp eq i32 %558, 0
  %560 = icmp slt i32 %555, 10
  %561 = or i1 %559, %560
  br i1 %561, label %originalBB127, label %originalBB127alteredBB

originalBB127:                                    ; preds = %553, %originalBB127alteredBB
  %562 = load i32, i32* @x.35
  %563 = load i32, i32* @y.36
  %564 = sub i32 %562, 1
  %565 = mul i32 %562, %564
  %566 = urem i32 %565, 2
  %567 = icmp eq i32 %566, 0
  %568 = icmp slt i32 %563, 10
  %569 = or i1 %567, %568
  br i1 %569, label %originalBBpart2129, label %originalBB127alteredBB

originalBBpart2129:                               ; preds = %originalBB127
  br label %570, !dbg !1742

570:                                              ; preds = %originalBBpart2129
  %571 = load i64, i64* %29, align 8, !dbg !1743
  %572 = load i64, i64* %20, align 8, !dbg !1743
  %573 = icmp ult i64 %571, %572, !dbg !1743
  br i1 %573, label %574, label %578, !dbg !1746

574:                                              ; preds = %570
  %575 = load i8*, i8** %19, align 8, !dbg !1743
  %576 = load i64, i64* %29, align 8, !dbg !1743
  %577 = getelementptr inbounds i8, i8* %575, i64 %576, !dbg !1743
  store i8 39, i8* %577, align 1, !dbg !1743
  br label %578, !dbg !1743

578:                                              ; preds = %574, %570
  %579 = load i32, i32* @x.35
  %580 = load i32, i32* @y.36
  %581 = sub i32 %579, 1
  %582 = mul i32 %579, %581
  %583 = urem i32 %582, 2
  %584 = icmp eq i32 %583, 0
  %585 = icmp slt i32 %580, 10
  %586 = or i1 %584, %585
  br i1 %586, label %originalBB131, label %originalBB131alteredBB

originalBB131:                                    ; preds = %578, %originalBB131alteredBB
  %587 = load i64, i64* %29, align 8, !dbg !1746
  %588 = add i64 %587, 1, !dbg !1746
  store i64 %588, i64* %29, align 8, !dbg !1746
  %589 = load i32, i32* @x.35
  %590 = load i32, i32* @y.36
  %591 = sub i32 %589, 1
  %592 = mul i32 %589, %591
  %593 = urem i32 %592, 2
  %594 = icmp eq i32 %593, 0
  %595 = icmp slt i32 %590, 10
  %596 = or i1 %594, %595
  br i1 %596, label %originalBBpart2141, label %originalBB131alteredBB

originalBBpart2141:                               ; preds = %originalBB131
  br label %597, !dbg !1746

597:                                              ; preds = %originalBBpart2141
  %598 = load i32, i32* @x.35
  %599 = load i32, i32* @y.36
  %600 = sub i32 %598, 1
  %601 = mul i32 %598, %600
  %602 = urem i32 %601, 2
  %603 = icmp eq i32 %602, 0
  %604 = icmp slt i32 %599, 10
  %605 = or i1 %603, %604
  br i1 %605, label %originalBB143, label %originalBB143alteredBB

originalBB143:                                    ; preds = %597, %originalBB143alteredBB
  %606 = load i32, i32* @x.35
  %607 = load i32, i32* @y.36
  %608 = sub i32 %606, 1
  %609 = mul i32 %606, %608
  %610 = urem i32 %609, 2
  %611 = icmp eq i32 %610, 0
  %612 = icmp slt i32 %607, 10
  %613 = or i1 %611, %612
  br i1 %613, label %originalBBpart2145, label %originalBB143alteredBB

originalBBpart2145:                               ; preds = %originalBB143
  br label %614, !dbg !1746

614:                                              ; preds = %originalBBpart2145, %originalBBpart2125
  %615 = load i32, i32* @x.35
  %616 = load i32, i32* @y.36
  %617 = sub i32 %615, 1
  %618 = mul i32 %615, %617
  %619 = urem i32 %618, 2
  %620 = icmp eq i32 %619, 0
  %621 = icmp slt i32 %616, 10
  %622 = or i1 %620, %621
  br i1 %622, label %originalBB147, label %originalBB147alteredBB

originalBB147:                                    ; preds = %614, %originalBB147alteredBB
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.65, i64 0, i64 0), i8** %31, align 8, !dbg !1747
  store i64 1, i64* %32, align 8, !dbg !1748
  %623 = load i32, i32* @x.35
  %624 = load i32, i32* @y.36
  %625 = sub i32 %623, 1
  %626 = mul i32 %623, %625
  %627 = urem i32 %626, 2
  %628 = icmp eq i32 %627, 0
  %629 = icmp slt i32 %624, 10
  %630 = or i1 %628, %629
  br i1 %630, label %originalBBpart2149, label %originalBB147alteredBB

originalBBpart2149:                               ; preds = %originalBB147
  br label %665, !dbg !1749

631:                                              ; preds = %originalBBpart27
  %632 = load i32, i32* @x.35
  %633 = load i32, i32* @y.36
  %634 = sub i32 %632, 1
  %635 = mul i32 %632, %634
  %636 = urem i32 %635, 2
  %637 = icmp eq i32 %636, 0
  %638 = icmp slt i32 %633, 10
  %639 = or i1 %637, %638
  br i1 %639, label %originalBB151, label %originalBB151alteredBB

originalBB151:                                    ; preds = %631, %originalBB151alteredBB
  store i8 0, i8* %35, align 1, !dbg !1750
  %640 = load i32, i32* @x.35
  %641 = load i32, i32* @y.36
  %642 = sub i32 %640, 1
  %643 = mul i32 %640, %642
  %644 = urem i32 %643, 2
  %645 = icmp eq i32 %644, 0
  %646 = icmp slt i32 %641, 10
  %647 = or i1 %645, %646
  br i1 %647, label %originalBBpart2153, label %originalBB151alteredBB

originalBBpart2153:                               ; preds = %originalBB151
  br label %665, !dbg !1751

648:                                              ; preds = %originalBBpart27
  %649 = load i32, i32* @x.35
  %650 = load i32, i32* @y.36
  %651 = sub i32 %649, 1
  %652 = mul i32 %649, %651
  %653 = urem i32 %652, 2
  %654 = icmp eq i32 %653, 0
  %655 = icmp slt i32 %650, 10
  %656 = or i1 %654, %655
  br i1 %656, label %originalBB155, label %originalBB155alteredBB

originalBB155:                                    ; preds = %648, %originalBB155alteredBB
  call void @abort() #12, !dbg !1752
  %657 = load i32, i32* @x.35
  %658 = load i32, i32* @y.36
  %659 = sub i32 %657, 1
  %660 = mul i32 %657, %659
  %661 = urem i32 %660, 2
  %662 = icmp eq i32 %661, 0
  %663 = icmp slt i32 %658, 10
  %664 = or i1 %662, %663
  br i1 %664, label %originalBBpart2157, label %originalBB155alteredBB

originalBBpart2157:                               ; preds = %originalBB155
  unreachable, !dbg !1752

665:                                              ; preds = %originalBBpart2153, %originalBBpart2149, %originalBBpart2101, %originalBBpart248, %originalBBpart244
  %666 = load i32, i32* @x.35
  %667 = load i32, i32* @y.36
  %668 = sub i32 %666, 1
  %669 = mul i32 %666, %668
  %670 = urem i32 %669, 2
  %671 = icmp eq i32 %670, 0
  %672 = icmp slt i32 %667, 10
  %673 = or i1 %671, %672
  br i1 %673, label %originalBB159, label %originalBB159alteredBB

originalBB159:                                    ; preds = %665, %originalBB159alteredBB
  store i64 0, i64* %28, align 8, !dbg !1753
  %674 = load i32, i32* @x.35
  %675 = load i32, i32* @y.36
  %676 = sub i32 %674, 1
  %677 = mul i32 %674, %676
  %678 = urem i32 %677, 2
  %679 = icmp eq i32 %678, 0
  %680 = icmp slt i32 %675, 10
  %681 = or i1 %679, %680
  br i1 %681, label %originalBBpart2161, label %originalBB159alteredBB

originalBBpart2161:                               ; preds = %originalBB159
  br label %682, !dbg !1755

682:                                              ; preds = %originalBBpart21731, %originalBBpart2161
  %683 = load i32, i32* @x.35
  %684 = load i32, i32* @y.36
  %685 = sub i32 %683, 1
  %686 = mul i32 %683, %685
  %687 = urem i32 %686, 2
  %688 = icmp eq i32 %687, 0
  %689 = icmp slt i32 %684, 10
  %690 = or i1 %688, %689
  br i1 %690, label %originalBB163, label %originalBB163alteredBB

originalBB163:                                    ; preds = %682, %originalBB163alteredBB
  %691 = load i64, i64* %22, align 8, !dbg !1756
  %692 = icmp eq i64 %691, -1, !dbg !1758
  %693 = load i32, i32* @x.35
  %694 = load i32, i32* @y.36
  %695 = sub i32 %693, 1
  %696 = mul i32 %693, %695
  %697 = urem i32 %696, 2
  %698 = icmp eq i32 %697, 0
  %699 = icmp slt i32 %694, 10
  %700 = or i1 %698, %699
  br i1 %700, label %originalBBpart2165, label %originalBB163alteredBB

originalBBpart2165:                               ; preds = %originalBB163
  br i1 %692, label %701, label %725, !dbg !1756

701:                                              ; preds = %originalBBpart2165
  %702 = load i32, i32* @x.35
  %703 = load i32, i32* @y.36
  %704 = sub i32 %702, 1
  %705 = mul i32 %702, %704
  %706 = urem i32 %705, 2
  %707 = icmp eq i32 %706, 0
  %708 = icmp slt i32 %703, 10
  %709 = or i1 %707, %708
  br i1 %709, label %originalBB167, label %originalBB167alteredBB

originalBB167:                                    ; preds = %701, %originalBB167alteredBB
  %710 = load i8*, i8** %21, align 8, !dbg !1759
  %711 = load i64, i64* %28, align 8, !dbg !1760
  %712 = getelementptr inbounds i8, i8* %710, i64 %711, !dbg !1759
  %713 = load i8, i8* %712, align 1, !dbg !1759
  %714 = sext i8 %713 to i32, !dbg !1759
  %715 = icmp eq i32 %714, 0, !dbg !1761
  %716 = zext i1 %715 to i32, !dbg !1761
  %717 = load i32, i32* @x.35
  %718 = load i32, i32* @y.36
  %719 = sub i32 %717, 1
  %720 = mul i32 %717, %719
  %721 = urem i32 %720, 2
  %722 = icmp eq i32 %721, 0
  %723 = icmp slt i32 %718, 10
  %724 = or i1 %722, %723
  br i1 %724, label %originalBBpart2169, label %originalBB167alteredBB

originalBBpart2169:                               ; preds = %originalBB167
  br label %746, !dbg !1756

725:                                              ; preds = %originalBBpart2165
  %726 = load i32, i32* @x.35
  %727 = load i32, i32* @y.36
  %728 = sub i32 %726, 1
  %729 = mul i32 %726, %728
  %730 = urem i32 %729, 2
  %731 = icmp eq i32 %730, 0
  %732 = icmp slt i32 %727, 10
  %733 = or i1 %731, %732
  br i1 %733, label %originalBB171, label %originalBB171alteredBB

originalBB171:                                    ; preds = %725, %originalBB171alteredBB
  %734 = load i64, i64* %28, align 8, !dbg !1762
  %735 = load i64, i64* %22, align 8, !dbg !1763
  %736 = icmp eq i64 %734, %735, !dbg !1764
  %737 = zext i1 %736 to i32, !dbg !1764
  %738 = load i32, i32* @x.35
  %739 = load i32, i32* @y.36
  %740 = sub i32 %738, 1
  %741 = mul i32 %738, %740
  %742 = urem i32 %741, 2
  %743 = icmp eq i32 %742, 0
  %744 = icmp slt i32 %739, 10
  %745 = or i1 %743, %744
  br i1 %745, label %originalBBpart2173, label %originalBB171alteredBB

originalBBpart2173:                               ; preds = %originalBB171
  br label %746, !dbg !1756

746:                                              ; preds = %originalBBpart2173, %originalBBpart2169
  %747 = phi i32 [ %716, %originalBBpart2169 ], [ %737, %originalBBpart2173 ], !dbg !1756
  %748 = icmp ne i32 %747, 0, !dbg !1765
  %749 = xor i1 %748, true, !dbg !1765
  br i1 %749, label %750, label %5523, !dbg !1766

750:                                              ; preds = %746
  call void @llvm.dbg.declare(metadata i8* %39, metadata !1767, metadata !DIExpression()), !dbg !1769
  call void @llvm.dbg.declare(metadata i8* %40, metadata !1770, metadata !DIExpression()), !dbg !1771
  call void @llvm.dbg.declare(metadata i8* %41, metadata !1772, metadata !DIExpression()), !dbg !1773
  %751 = load i32, i32* @x.35
  %752 = load i32, i32* @y.36
  %753 = sub i32 %751, 1
  %754 = mul i32 %751, %753
  %755 = urem i32 %754, 2
  %756 = icmp eq i32 %755, 0
  %757 = icmp slt i32 %752, 10
  %758 = or i1 %756, %757
  br i1 %758, label %originalBB175, label %originalBB175alteredBB

originalBB175:                                    ; preds = %750, %originalBB175alteredBB
  store i8 0, i8* %41, align 1, !dbg !1773
  call void @llvm.dbg.declare(metadata i8* %42, metadata !1774, metadata !DIExpression()), !dbg !1775
  store i8 0, i8* %42, align 1, !dbg !1775
  call void @llvm.dbg.declare(metadata i8* %43, metadata !1776, metadata !DIExpression()), !dbg !1777
  store i8 0, i8* %43, align 1, !dbg !1777
  %759 = load i8, i8* %33, align 1, !dbg !1778
  %760 = trunc i8 %759 to i1, !dbg !1778
  %761 = load i32, i32* @x.35
  %762 = load i32, i32* @y.36
  %763 = sub i32 %761, 1
  %764 = mul i32 %761, %763
  %765 = urem i32 %764, 2
  %766 = icmp eq i32 %765, 0
  %767 = icmp slt i32 %762, 10
  %768 = or i1 %766, %767
  br i1 %768, label %originalBBpart2177, label %originalBB175alteredBB

originalBBpart2177:                               ; preds = %originalBB175
  br i1 %760, label %769, label %981, !dbg !1780

769:                                              ; preds = %originalBBpart2177
  %770 = load i32, i32* @x.35
  %771 = load i32, i32* @y.36
  %772 = sub i32 %770, 1
  %773 = mul i32 %770, %772
  %774 = urem i32 %773, 2
  %775 = icmp eq i32 %774, 0
  %776 = icmp slt i32 %771, 10
  %777 = or i1 %775, %776
  br i1 %777, label %originalBB179, label %originalBB179alteredBB

originalBB179:                                    ; preds = %769, %originalBB179alteredBB
  %778 = load i32, i32* %23, align 4, !dbg !1781
  %779 = icmp ne i32 %778, 2, !dbg !1782
  %780 = load i32, i32* @x.35
  %781 = load i32, i32* @y.36
  %782 = sub i32 %780, 1
  %783 = mul i32 %780, %782
  %784 = urem i32 %783, 2
  %785 = icmp eq i32 %784, 0
  %786 = icmp slt i32 %781, 10
  %787 = or i1 %785, %786
  br i1 %787, label %originalBBpart2181, label %originalBB179alteredBB

originalBBpart2181:                               ; preds = %originalBB179
  br i1 %779, label %788, label %981, !dbg !1783

788:                                              ; preds = %originalBBpart2181
  %789 = load i32, i32* @x.35
  %790 = load i32, i32* @y.36
  %791 = sub i32 %789, 1
  %792 = mul i32 %789, %791
  %793 = urem i32 %792, 2
  %794 = icmp eq i32 %793, 0
  %795 = icmp slt i32 %790, 10
  %796 = or i1 %794, %795
  br i1 %796, label %originalBB183, label %originalBB183alteredBB

originalBB183:                                    ; preds = %788, %originalBB183alteredBB
  %797 = load i64, i64* %32, align 8, !dbg !1784
  %798 = icmp ne i64 %797, 0, !dbg !1784
  %799 = load i32, i32* @x.35
  %800 = load i32, i32* @y.36
  %801 = sub i32 %799, 1
  %802 = mul i32 %799, %801
  %803 = urem i32 %802, 2
  %804 = icmp eq i32 %803, 0
  %805 = icmp slt i32 %800, 10
  %806 = or i1 %804, %805
  br i1 %806, label %originalBBpart2185, label %originalBB183alteredBB

originalBBpart2185:                               ; preds = %originalBB183
  br i1 %798, label %807, label %981, !dbg !1785

807:                                              ; preds = %originalBBpart2185
  %808 = load i32, i32* @x.35
  %809 = load i32, i32* @y.36
  %810 = sub i32 %808, 1
  %811 = mul i32 %808, %810
  %812 = urem i32 %811, 2
  %813 = icmp eq i32 %812, 0
  %814 = icmp slt i32 %809, 10
  %815 = or i1 %813, %814
  br i1 %815, label %originalBB187, label %originalBB187alteredBB

originalBB187:                                    ; preds = %807, %originalBB187alteredBB
  %816 = load i64, i64* %28, align 8, !dbg !1786
  %817 = load i64, i64* %32, align 8, !dbg !1787
  %818 = add i64 %816, %817, !dbg !1788
  %819 = load i64, i64* %22, align 8, !dbg !1789
  %820 = icmp eq i64 %819, -1, !dbg !1790
  %821 = load i32, i32* @x.35
  %822 = load i32, i32* @y.36
  %823 = sub i32 %821, 1
  %824 = mul i32 %821, %823
  %825 = urem i32 %824, 2
  %826 = icmp eq i32 %825, 0
  %827 = icmp slt i32 %822, 10
  %828 = or i1 %826, %827
  br i1 %828, label %originalBBpart2200, label %originalBB187alteredBB

originalBBpart2200:                               ; preds = %originalBB187
  br i1 %820, label %829, label %867, !dbg !1791

829:                                              ; preds = %originalBBpart2200
  %830 = load i32, i32* @x.35
  %831 = load i32, i32* @y.36
  %832 = sub i32 %830, 1
  %833 = mul i32 %830, %832
  %834 = urem i32 %833, 2
  %835 = icmp eq i32 %834, 0
  %836 = icmp slt i32 %831, 10
  %837 = or i1 %835, %836
  br i1 %837, label %originalBB202, label %originalBB202alteredBB

originalBB202:                                    ; preds = %829, %originalBB202alteredBB
  %838 = load i64, i64* %32, align 8, !dbg !1792
  %839 = icmp ult i64 1, %838, !dbg !1793
  %840 = load i32, i32* @x.35
  %841 = load i32, i32* @y.36
  %842 = sub i32 %840, 1
  %843 = mul i32 %840, %842
  %844 = urem i32 %843, 2
  %845 = icmp eq i32 %844, 0
  %846 = icmp slt i32 %841, 10
  %847 = or i1 %845, %846
  br i1 %847, label %originalBBpart2204, label %originalBB202alteredBB

originalBBpart2204:                               ; preds = %originalBB202
  br i1 %839, label %848, label %867, !dbg !1789

848:                                              ; preds = %originalBBpart2204
  %849 = load i32, i32* @x.35
  %850 = load i32, i32* @y.36
  %851 = sub i32 %849, 1
  %852 = mul i32 %849, %851
  %853 = urem i32 %852, 2
  %854 = icmp eq i32 %853, 0
  %855 = icmp slt i32 %850, 10
  %856 = or i1 %854, %855
  br i1 %856, label %originalBB206, label %originalBB206alteredBB

originalBB206:                                    ; preds = %848, %originalBB206alteredBB
  %857 = load i8*, i8** %21, align 8, !dbg !1794
  %858 = call i64 @strlen(i8* %857) #13, !dbg !1795
  store i64 %858, i64* %22, align 8, !dbg !1796
  %859 = load i32, i32* @x.35
  %860 = load i32, i32* @y.36
  %861 = sub i32 %859, 1
  %862 = mul i32 %859, %861
  %863 = urem i32 %862, 2
  %864 = icmp eq i32 %863, 0
  %865 = icmp slt i32 %860, 10
  %866 = or i1 %864, %865
  br i1 %866, label %originalBBpart2208, label %originalBB206alteredBB

originalBBpart2208:                               ; preds = %originalBB206
  br label %885, !dbg !1789

867:                                              ; preds = %originalBBpart2204, %originalBBpart2200
  %868 = load i32, i32* @x.35
  %869 = load i32, i32* @y.36
  %870 = sub i32 %868, 1
  %871 = mul i32 %868, %870
  %872 = urem i32 %871, 2
  %873 = icmp eq i32 %872, 0
  %874 = icmp slt i32 %869, 10
  %875 = or i1 %873, %874
  br i1 %875, label %originalBB210, label %originalBB210alteredBB

originalBB210:                                    ; preds = %867, %originalBB210alteredBB
  %876 = load i64, i64* %22, align 8, !dbg !1797
  %877 = load i32, i32* @x.35
  %878 = load i32, i32* @y.36
  %879 = sub i32 %877, 1
  %880 = mul i32 %877, %879
  %881 = urem i32 %880, 2
  %882 = icmp eq i32 %881, 0
  %883 = icmp slt i32 %878, 10
  %884 = or i1 %882, %883
  br i1 %884, label %originalBBpart2212, label %originalBB210alteredBB

originalBBpart2212:                               ; preds = %originalBB210
  br label %885, !dbg !1789

885:                                              ; preds = %originalBBpart2212, %originalBBpart2208
  %886 = phi i64 [ %858, %originalBBpart2208 ], [ %876, %originalBBpart2212 ], !dbg !1789
  %887 = load i32, i32* @x.35
  %888 = load i32, i32* @y.36
  %889 = sub i32 %887, 1
  %890 = mul i32 %887, %889
  %891 = urem i32 %890, 2
  %892 = icmp eq i32 %891, 0
  %893 = icmp slt i32 %888, 10
  %894 = or i1 %892, %893
  br i1 %894, label %originalBB214, label %originalBB214alteredBB

originalBB214:                                    ; preds = %885, %originalBB214alteredBB
  %895 = icmp ule i64 %818, %886, !dbg !1798
  %896 = load i32, i32* @x.35
  %897 = load i32, i32* @y.36
  %898 = sub i32 %896, 1
  %899 = mul i32 %896, %898
  %900 = urem i32 %899, 2
  %901 = icmp eq i32 %900, 0
  %902 = icmp slt i32 %897, 10
  %903 = or i1 %901, %902
  br i1 %903, label %originalBBpart2216, label %originalBB214alteredBB

originalBBpart2216:                               ; preds = %originalBB214
  br i1 %895, label %904, label %981, !dbg !1799

904:                                              ; preds = %originalBBpart2216
  %905 = load i32, i32* @x.35
  %906 = load i32, i32* @y.36
  %907 = sub i32 %905, 1
  %908 = mul i32 %905, %907
  %909 = urem i32 %908, 2
  %910 = icmp eq i32 %909, 0
  %911 = icmp slt i32 %906, 10
  %912 = or i1 %910, %911
  br i1 %912, label %originalBB218, label %originalBB218alteredBB

originalBB218:                                    ; preds = %904, %originalBB218alteredBB
  %913 = load i8*, i8** %21, align 8, !dbg !1800
  %914 = load i64, i64* %28, align 8, !dbg !1801
  %915 = getelementptr inbounds i8, i8* %913, i64 %914, !dbg !1802
  %916 = load i8*, i8** %31, align 8, !dbg !1803
  %917 = load i64, i64* %32, align 8, !dbg !1804
  %918 = call i32 @memcmp(i8* %915, i8* %916, i64 %917) #13, !dbg !1805
  %919 = icmp eq i32 %918, 0, !dbg !1806
  %920 = load i32, i32* @x.35
  %921 = load i32, i32* @y.36
  %922 = sub i32 %920, 1
  %923 = mul i32 %920, %922
  %924 = urem i32 %923, 2
  %925 = icmp eq i32 %924, 0
  %926 = icmp slt i32 %921, 10
  %927 = or i1 %925, %926
  br i1 %927, label %originalBBpart2220, label %originalBB218alteredBB

originalBBpart2220:                               ; preds = %originalBB218
  br i1 %919, label %928, label %981, !dbg !1807

928:                                              ; preds = %originalBBpart2220
  %929 = load i32, i32* @x.35
  %930 = load i32, i32* @y.36
  %931 = sub i32 %929, 1
  %932 = mul i32 %929, %931
  %933 = urem i32 %932, 2
  %934 = icmp eq i32 %933, 0
  %935 = icmp slt i32 %930, 10
  %936 = or i1 %934, %935
  br i1 %936, label %originalBB222, label %originalBB222alteredBB

originalBB222:                                    ; preds = %928, %originalBB222alteredBB
  %937 = load i8, i8* %35, align 1, !dbg !1808
  %938 = trunc i8 %937 to i1, !dbg !1808
  %939 = load i32, i32* @x.35
  %940 = load i32, i32* @y.36
  %941 = sub i32 %939, 1
  %942 = mul i32 %939, %941
  %943 = urem i32 %942, 2
  %944 = icmp eq i32 %943, 0
  %945 = icmp slt i32 %940, 10
  %946 = or i1 %944, %945
  br i1 %946, label %originalBBpart2224, label %originalBB222alteredBB

originalBBpart2224:                               ; preds = %originalBB222
  br i1 %938, label %947, label %964, !dbg !1811

947:                                              ; preds = %originalBBpart2224
  %948 = load i32, i32* @x.35
  %949 = load i32, i32* @y.36
  %950 = sub i32 %948, 1
  %951 = mul i32 %948, %950
  %952 = urem i32 %951, 2
  %953 = icmp eq i32 %952, 0
  %954 = icmp slt i32 %949, 10
  %955 = or i1 %953, %954
  br i1 %955, label %originalBB226, label %originalBB226alteredBB

originalBB226:                                    ; preds = %947, %originalBB226alteredBB
  %956 = load i32, i32* @x.35
  %957 = load i32, i32* @y.36
  %958 = sub i32 %956, 1
  %959 = mul i32 %956, %958
  %960 = urem i32 %959, 2
  %961 = icmp eq i32 %960, 0
  %962 = icmp slt i32 %957, 10
  %963 = or i1 %961, %962
  br i1 %963, label %originalBBpart2228, label %originalBB226alteredBB

originalBBpart2228:                               ; preds = %originalBB226
  br label %6021, !dbg !1812

964:                                              ; preds = %originalBBpart2224
  %965 = load i32, i32* @x.35
  %966 = load i32, i32* @y.36
  %967 = sub i32 %965, 1
  %968 = mul i32 %965, %967
  %969 = urem i32 %968, 2
  %970 = icmp eq i32 %969, 0
  %971 = icmp slt i32 %966, 10
  %972 = or i1 %970, %971
  br i1 %972, label %originalBB230, label %originalBB230alteredBB

originalBB230:                                    ; preds = %964, %originalBB230alteredBB
  store i8 1, i8* %41, align 1, !dbg !1813
  %973 = load i32, i32* @x.35
  %974 = load i32, i32* @y.36
  %975 = sub i32 %973, 1
  %976 = mul i32 %973, %975
  %977 = urem i32 %976, 2
  %978 = icmp eq i32 %977, 0
  %979 = icmp slt i32 %974, 10
  %980 = or i1 %978, %979
  br i1 %980, label %originalBBpart2232, label %originalBB230alteredBB

originalBBpart2232:                               ; preds = %originalBB230
  br label %981, !dbg !1814

981:                                              ; preds = %originalBBpart2232, %originalBBpart2220, %originalBBpart2216, %originalBBpart2185, %originalBBpart2181, %originalBBpart2177
  %982 = load i32, i32* @x.35
  %983 = load i32, i32* @y.36
  %984 = sub i32 %982, 1
  %985 = mul i32 %982, %984
  %986 = urem i32 %985, 2
  %987 = icmp eq i32 %986, 0
  %988 = icmp slt i32 %983, 10
  %989 = or i1 %987, %988
  br i1 %989, label %originalBB234, label %originalBB234alteredBB

originalBB234:                                    ; preds = %981, %originalBB234alteredBB
  %990 = load i8*, i8** %21, align 8, !dbg !1815
  %991 = load i64, i64* %28, align 8, !dbg !1816
  %992 = getelementptr inbounds i8, i8* %990, i64 %991, !dbg !1815
  %993 = load i8, i8* %992, align 1, !dbg !1815
  store i8 %993, i8* %39, align 1, !dbg !1817
  %994 = load i8, i8* %39, align 1, !dbg !1818
  %995 = zext i8 %994 to i32, !dbg !1818
  %996 = load i32, i32* @x.35
  %997 = load i32, i32* @y.36
  %998 = sub i32 %996, 1
  %999 = mul i32 %996, %998
  %1000 = urem i32 %999, 2
  %1001 = icmp eq i32 %1000, 0
  %1002 = icmp slt i32 %997, 10
  %1003 = or i1 %1001, %1002
  br i1 %1003, label %originalBBpart2236, label %originalBB234alteredBB

originalBBpart2236:                               ; preds = %originalBB234
  switch i32 %995, label %3102 [
    i32 0, label %1004
    i32 63, label %1657
    i32 7, label %2227
    i32 8, label %2244
    i32 12, label %2261
    i32 10, label %2262
    i32 13, label %2279
    i32 9, label %2296
    i32 11, label %2313
    i32 92, label %2330
    i32 123, label %2604
    i32 125, label %2604
    i32 35, label %2682
    i32 126, label %2682
    i32 32, label %2719
    i32 33, label %2736
    i32 34, label %2736
    i32 36, label %2736
    i32 38, label %2736
    i32 40, label %2736
    i32 41, label %2736
    i32 42, label %2736
    i32 59, label %2736
    i32 60, label %2736
    i32 61, label %2736
    i32 62, label %2736
    i32 91, label %2736
    i32 94, label %2736
    i32 96, label %2736
    i32 124, label %2736
    i32 39, label %2792
    i32 37, label %3101
    i32 43, label %3101
    i32 44, label %3101
    i32 45, label %3101
    i32 46, label %3101
    i32 47, label %3101
    i32 48, label %3101
    i32 49, label %3101
    i32 50, label %3101
    i32 51, label %3101
    i32 52, label %3101
    i32 53, label %3101
    i32 54, label %3101
    i32 55, label %3101
    i32 56, label %3101
    i32 57, label %3101
    i32 58, label %3101
    i32 65, label %3101
    i32 66, label %3101
    i32 67, label %3101
    i32 68, label %3101
    i32 69, label %3101
    i32 70, label %3101
    i32 71, label %3101
    i32 72, label %3101
    i32 73, label %3101
    i32 74, label %3101
    i32 75, label %3101
    i32 76, label %3101
    i32 77, label %3101
    i32 78, label %3101
    i32 79, label %3101
    i32 80, label %3101
    i32 81, label %3101
    i32 82, label %3101
    i32 83, label %3101
    i32 84, label %3101
    i32 85, label %3101
    i32 86, label %3101
    i32 87, label %3101
    i32 88, label %3101
    i32 89, label %3101
    i32 90, label %3101
    i32 93, label %3101
    i32 95, label %3101
    i32 97, label %3101
    i32 98, label %3101
    i32 99, label %3101
    i32 100, label %3101
    i32 101, label %3101
    i32 102, label %3101
    i32 103, label %3101
    i32 104, label %3101
    i32 105, label %3101
    i32 106, label %3101
    i32 107, label %3101
    i32 108, label %3101
    i32 109, label %3101
    i32 110, label %3101
    i32 111, label %3101
    i32 112, label %3101
    i32 113, label %3101
    i32 114, label %3101
    i32 115, label %3101
    i32 116, label %3101
    i32 117, label %3101
    i32 118, label %3101
    i32 119, label %3101
    i32 120, label %3101
    i32 121, label %3101
    i32 122, label %3101
  ], !dbg !1819

1004:                                             ; preds = %originalBBpart2236
  %1005 = load i32, i32* @x.35
  %1006 = load i32, i32* @y.36
  %1007 = sub i32 %1005, 1
  %1008 = mul i32 %1005, %1007
  %1009 = urem i32 %1008, 2
  %1010 = icmp eq i32 %1009, 0
  %1011 = icmp slt i32 %1006, 10
  %1012 = or i1 %1010, %1011
  br i1 %1012, label %originalBB238, label %originalBB238alteredBB

originalBB238:                                    ; preds = %1004, %originalBB238alteredBB
  %1013 = load i8, i8* %33, align 1, !dbg !1820
  %1014 = trunc i8 %1013 to i1, !dbg !1820
  %1015 = load i32, i32* @x.35
  %1016 = load i32, i32* @y.36
  %1017 = sub i32 %1015, 1
  %1018 = mul i32 %1015, %1017
  %1019 = urem i32 %1018, 2
  %1020 = icmp eq i32 %1019, 0
  %1021 = icmp slt i32 %1016, 10
  %1022 = or i1 %1020, %1021
  br i1 %1022, label %originalBBpart2240, label %originalBB238alteredBB

originalBBpart2240:                               ; preds = %originalBB238
  br i1 %1014, label %1023, label %1618, !dbg !1823

1023:                                             ; preds = %originalBBpart2240
  %1024 = load i32, i32* @x.35
  %1025 = load i32, i32* @y.36
  %1026 = sub i32 %1024, 1
  %1027 = mul i32 %1024, %1026
  %1028 = urem i32 %1027, 2
  %1029 = icmp eq i32 %1028, 0
  %1030 = icmp slt i32 %1025, 10
  %1031 = or i1 %1029, %1030
  br i1 %1031, label %originalBB242, label %originalBB242alteredBB

originalBB242:                                    ; preds = %1023, %originalBB242alteredBB
  %1032 = load i32, i32* @x.35
  %1033 = load i32, i32* @y.36
  %1034 = sub i32 %1032, 1
  %1035 = mul i32 %1032, %1034
  %1036 = urem i32 %1035, 2
  %1037 = icmp eq i32 %1036, 0
  %1038 = icmp slt i32 %1033, 10
  %1039 = or i1 %1037, %1038
  br i1 %1039, label %originalBBpart2244, label %originalBB242alteredBB

originalBBpart2244:                               ; preds = %originalBB242
  br label %1040, !dbg !1824

1040:                                             ; preds = %originalBBpart2244
  %1041 = load i8, i8* %35, align 1, !dbg !1826
  %1042 = trunc i8 %1041 to i1, !dbg !1826
  br i1 %1042, label %1043, label %1060, !dbg !1829

1043:                                             ; preds = %1040
  %1044 = load i32, i32* @x.35
  %1045 = load i32, i32* @y.36
  %1046 = sub i32 %1044, 1
  %1047 = mul i32 %1044, %1046
  %1048 = urem i32 %1047, 2
  %1049 = icmp eq i32 %1048, 0
  %1050 = icmp slt i32 %1045, 10
  %1051 = or i1 %1049, %1050
  br i1 %1051, label %originalBB246, label %originalBB246alteredBB

originalBB246:                                    ; preds = %1043, %originalBB246alteredBB
  %1052 = load i32, i32* @x.35
  %1053 = load i32, i32* @y.36
  %1054 = sub i32 %1052, 1
  %1055 = mul i32 %1052, %1054
  %1056 = urem i32 %1055, 2
  %1057 = icmp eq i32 %1056, 0
  %1058 = icmp slt i32 %1053, 10
  %1059 = or i1 %1057, %1058
  br i1 %1059, label %originalBBpart2248, label %originalBB246alteredBB

originalBBpart2248:                               ; preds = %originalBB246
  br label %6021, !dbg !1826

1060:                                             ; preds = %1040
  %1061 = load i32, i32* @x.35
  %1062 = load i32, i32* @y.36
  %1063 = sub i32 %1061, 1
  %1064 = mul i32 %1061, %1063
  %1065 = urem i32 %1064, 2
  %1066 = icmp eq i32 %1065, 0
  %1067 = icmp slt i32 %1062, 10
  %1068 = or i1 %1066, %1067
  br i1 %1068, label %originalBB250, label %originalBB250alteredBB

originalBB250:                                    ; preds = %1060, %originalBB250alteredBB
  store i8 1, i8* %42, align 1, !dbg !1829
  %1069 = load i32, i32* %23, align 4, !dbg !1830
  %1070 = icmp eq i32 %1069, 2, !dbg !1830
  %1071 = load i32, i32* @x.35
  %1072 = load i32, i32* @y.36
  %1073 = sub i32 %1071, 1
  %1074 = mul i32 %1071, %1073
  %1075 = urem i32 %1074, 2
  %1076 = icmp eq i32 %1075, 0
  %1077 = icmp slt i32 %1072, 10
  %1078 = or i1 %1076, %1077
  br i1 %1078, label %originalBBpart2252, label %originalBB250alteredBB

originalBBpart2252:                               ; preds = %originalBB250
  br i1 %1070, label %1079, label %1331, !dbg !1830

1079:                                             ; preds = %originalBBpart2252
  %1080 = load i32, i32* @x.35
  %1081 = load i32, i32* @y.36
  %1082 = sub i32 %1080, 1
  %1083 = mul i32 %1080, %1082
  %1084 = urem i32 %1083, 2
  %1085 = icmp eq i32 %1084, 0
  %1086 = icmp slt i32 %1081, 10
  %1087 = or i1 %1085, %1086
  br i1 %1087, label %originalBB254, label %originalBB254alteredBB

originalBB254:                                    ; preds = %1079, %originalBB254alteredBB
  %1088 = load i8, i8* %36, align 1, !dbg !1830
  %1089 = trunc i8 %1088 to i1, !dbg !1830
  %1090 = load i32, i32* @x.35
  %1091 = load i32, i32* @y.36
  %1092 = sub i32 %1090, 1
  %1093 = mul i32 %1090, %1092
  %1094 = urem i32 %1093, 2
  %1095 = icmp eq i32 %1094, 0
  %1096 = icmp slt i32 %1091, 10
  %1097 = or i1 %1095, %1096
  br i1 %1097, label %originalBBpart2256, label %originalBB254alteredBB

originalBBpart2256:                               ; preds = %originalBB254
  br i1 %1089, label %1331, label %1098, !dbg !1829

1098:                                             ; preds = %originalBBpart2256
  %1099 = load i32, i32* @x.35
  %1100 = load i32, i32* @y.36
  %1101 = sub i32 %1099, 1
  %1102 = mul i32 %1099, %1101
  %1103 = urem i32 %1102, 2
  %1104 = icmp eq i32 %1103, 0
  %1105 = icmp slt i32 %1100, 10
  %1106 = or i1 %1104, %1105
  br i1 %1106, label %originalBB258, label %originalBB258alteredBB

originalBB258:                                    ; preds = %1098, %originalBB258alteredBB
  %1107 = load i32, i32* @x.35
  %1108 = load i32, i32* @y.36
  %1109 = sub i32 %1107, 1
  %1110 = mul i32 %1107, %1109
  %1111 = urem i32 %1110, 2
  %1112 = icmp eq i32 %1111, 0
  %1113 = icmp slt i32 %1108, 10
  %1114 = or i1 %1112, %1113
  br i1 %1114, label %originalBBpart2260, label %originalBB258alteredBB

originalBBpart2260:                               ; preds = %originalBB258
  br label %1115, !dbg !1832

1115:                                             ; preds = %originalBBpart2260
  %1116 = load i32, i32* @x.35
  %1117 = load i32, i32* @y.36
  %1118 = sub i32 %1116, 1
  %1119 = mul i32 %1116, %1118
  %1120 = urem i32 %1119, 2
  %1121 = icmp eq i32 %1120, 0
  %1122 = icmp slt i32 %1117, 10
  %1123 = or i1 %1121, %1122
  br i1 %1123, label %originalBB262, label %originalBB262alteredBB

originalBB262:                                    ; preds = %1115, %originalBB262alteredBB
  %1124 = load i64, i64* %29, align 8, !dbg !1834
  %1125 = load i64, i64* %20, align 8, !dbg !1834
  %1126 = icmp ult i64 %1124, %1125, !dbg !1834
  %1127 = load i32, i32* @x.35
  %1128 = load i32, i32* @y.36
  %1129 = sub i32 %1127, 1
  %1130 = mul i32 %1127, %1129
  %1131 = urem i32 %1130, 2
  %1132 = icmp eq i32 %1131, 0
  %1133 = icmp slt i32 %1128, 10
  %1134 = or i1 %1132, %1133
  br i1 %1134, label %originalBBpart2264, label %originalBB262alteredBB

originalBBpart2264:                               ; preds = %originalBB262
  br i1 %1126, label %1135, label %1155, !dbg !1837

1135:                                             ; preds = %originalBBpart2264
  %1136 = load i32, i32* @x.35
  %1137 = load i32, i32* @y.36
  %1138 = sub i32 %1136, 1
  %1139 = mul i32 %1136, %1138
  %1140 = urem i32 %1139, 2
  %1141 = icmp eq i32 %1140, 0
  %1142 = icmp slt i32 %1137, 10
  %1143 = or i1 %1141, %1142
  br i1 %1143, label %originalBB266, label %originalBB266alteredBB

originalBB266:                                    ; preds = %1135, %originalBB266alteredBB
  %1144 = load i8*, i8** %19, align 8, !dbg !1834
  %1145 = load i64, i64* %29, align 8, !dbg !1834
  %1146 = getelementptr inbounds i8, i8* %1144, i64 %1145, !dbg !1834
  store i8 39, i8* %1146, align 1, !dbg !1834
  %1147 = load i32, i32* @x.35
  %1148 = load i32, i32* @y.36
  %1149 = sub i32 %1147, 1
  %1150 = mul i32 %1147, %1149
  %1151 = urem i32 %1150, 2
  %1152 = icmp eq i32 %1151, 0
  %1153 = icmp slt i32 %1148, 10
  %1154 = or i1 %1152, %1153
  br i1 %1154, label %originalBBpart2268, label %originalBB266alteredBB

originalBBpart2268:                               ; preds = %originalBB266
  br label %1155, !dbg !1834

1155:                                             ; preds = %originalBBpart2268, %originalBBpart2264
  %1156 = load i32, i32* @x.35
  %1157 = load i32, i32* @y.36
  %1158 = sub i32 %1156, 1
  %1159 = mul i32 %1156, %1158
  %1160 = urem i32 %1159, 2
  %1161 = icmp eq i32 %1160, 0
  %1162 = icmp slt i32 %1157, 10
  %1163 = or i1 %1161, %1162
  br i1 %1163, label %originalBB270, label %originalBB270alteredBB

originalBB270:                                    ; preds = %1155, %originalBB270alteredBB
  %1164 = load i64, i64* %29, align 8, !dbg !1837
  %1165 = add i64 %1164, 1, !dbg !1837
  %1166 = trunc i64 1 to i32
  %1167 = mul i32 %1166, -5
  %1168 = add i32 %1167, 3
  %1169 = trunc i64 %1164 to i32
  %1170 = add i32 %1169, 2
  %1171 = trunc i64 %1165 to i32
  %1172 = mul i32 %1171, -2
  %1173 = add i32 %1172, 2
  %1174 = mul i32 %1168, %1168
  %1175 = mul i32 %1174, %1174
  %1176 = mul i32 %1170, %1170
  %1177 = mul i32 %1176, %1176
  %1178 = mul i32 %1173, %1173
  %1179 = mul i32 %1178, %1178
  %1180 = add i32 %1175, %1177
  %1181 = sub i32 %1180, %1179
  %1182 = add i32 %1181, 5
  %1183 = icmp ne i32 %1182, 5
  %1184 = load i32, i32* @x.35
  %1185 = load i32, i32* @y.36
  %1186 = sub i32 %1184, 1
  %1187 = mul i32 %1184, %1186
  %1188 = urem i32 %1187, 2
  %1189 = icmp eq i32 %1188, 0
  %1190 = icmp slt i32 %1185, 10
  %1191 = or i1 %1189, %1190
  br i1 %1191, label %originalBBpart2383, label %originalBB270alteredBB

originalBBpart2383:                               ; preds = %originalBB270
  br i1 %1183, label %1192, label %1209

1192:                                             ; preds = %originalBBpart2383
  %1193 = load i32, i32* @x.35
  %1194 = load i32, i32* @y.36
  %1195 = sub i32 %1193, 1
  %1196 = mul i32 %1193, %1195
  %1197 = urem i32 %1196, 2
  %1198 = icmp eq i32 %1197, 0
  %1199 = icmp slt i32 %1194, 10
  %1200 = or i1 %1198, %1199
  br i1 %1200, label %originalBB385, label %originalBB385alteredBB

originalBB385:                                    ; preds = %1192, %originalBB385alteredBB
  %1201 = load i32, i32* @x.35
  %1202 = load i32, i32* @y.36
  %1203 = sub i32 %1201, 1
  %1204 = mul i32 %1201, %1203
  %1205 = urem i32 %1204, 2
  %1206 = icmp eq i32 %1205, 0
  %1207 = icmp slt i32 %1202, 10
  %1208 = or i1 %1206, %1207
  br i1 %1208, label %originalBBpart2387, label %originalBB385alteredBB

originalBBpart2387:                               ; preds = %originalBB385
  ret i64 0

1209:                                             ; preds = %originalBBpart2383
  %1210 = load i32, i32* @x.35
  %1211 = load i32, i32* @y.36
  %1212 = sub i32 %1210, 1
  %1213 = mul i32 %1210, %1212
  %1214 = urem i32 %1213, 2
  %1215 = icmp eq i32 %1214, 0
  %1216 = icmp slt i32 %1211, 10
  %1217 = or i1 %1215, %1216
  br i1 %1217, label %originalBB389, label %originalBB389alteredBB

originalBB389:                                    ; preds = %1209, %originalBB389alteredBB
  store i64 %1165, i64* %29, align 8, !dbg !1837
  %1218 = load i32, i32* @x.35
  %1219 = load i32, i32* @y.36
  %1220 = sub i32 %1218, 1
  %1221 = mul i32 %1218, %1220
  %1222 = urem i32 %1221, 2
  %1223 = icmp eq i32 %1222, 0
  %1224 = icmp slt i32 %1219, 10
  %1225 = or i1 %1223, %1224
  br i1 %1225, label %originalBBpart2391, label %originalBB389alteredBB

originalBBpart2391:                               ; preds = %originalBB389
  br label %1226, !dbg !1837

1226:                                             ; preds = %originalBBpart2391
  %1227 = load i32, i32* @x.35
  %1228 = load i32, i32* @y.36
  %1229 = sub i32 %1227, 1
  %1230 = mul i32 %1227, %1229
  %1231 = urem i32 %1230, 2
  %1232 = icmp eq i32 %1231, 0
  %1233 = icmp slt i32 %1228, 10
  %1234 = or i1 %1232, %1233
  br i1 %1234, label %originalBB393, label %originalBB393alteredBB

originalBB393:                                    ; preds = %1226, %originalBB393alteredBB
  %1235 = load i32, i32* @x.35
  %1236 = load i32, i32* @y.36
  %1237 = sub i32 %1235, 1
  %1238 = mul i32 %1235, %1237
  %1239 = urem i32 %1238, 2
  %1240 = icmp eq i32 %1239, 0
  %1241 = icmp slt i32 %1236, 10
  %1242 = or i1 %1240, %1241
  br i1 %1242, label %originalBBpart2395, label %originalBB393alteredBB

originalBBpart2395:                               ; preds = %originalBB393
  br label %1243, !dbg !1832

1243:                                             ; preds = %originalBBpart2395
  %1244 = load i64, i64* %29, align 8, !dbg !1838
  %1245 = load i64, i64* %20, align 8, !dbg !1838
  %1246 = icmp ult i64 %1244, %1245, !dbg !1838
  br i1 %1246, label %1247, label %1267, !dbg !1841

1247:                                             ; preds = %1243
  %1248 = load i32, i32* @x.35
  %1249 = load i32, i32* @y.36
  %1250 = sub i32 %1248, 1
  %1251 = mul i32 %1248, %1250
  %1252 = urem i32 %1251, 2
  %1253 = icmp eq i32 %1252, 0
  %1254 = icmp slt i32 %1249, 10
  %1255 = or i1 %1253, %1254
  br i1 %1255, label %originalBB397, label %originalBB397alteredBB

originalBB397:                                    ; preds = %1247, %originalBB397alteredBB
  %1256 = load i8*, i8** %19, align 8, !dbg !1838
  %1257 = load i64, i64* %29, align 8, !dbg !1838
  %1258 = getelementptr inbounds i8, i8* %1256, i64 %1257, !dbg !1838
  store i8 36, i8* %1258, align 1, !dbg !1838
  %1259 = load i32, i32* @x.35
  %1260 = load i32, i32* @y.36
  %1261 = sub i32 %1259, 1
  %1262 = mul i32 %1259, %1261
  %1263 = urem i32 %1262, 2
  %1264 = icmp eq i32 %1263, 0
  %1265 = icmp slt i32 %1260, 10
  %1266 = or i1 %1264, %1265
  br i1 %1266, label %originalBBpart2399, label %originalBB397alteredBB

originalBBpart2399:                               ; preds = %originalBB397
  br label %1267, !dbg !1838

1267:                                             ; preds = %originalBBpart2399, %1243
  %1268 = load i32, i32* @x.35
  %1269 = load i32, i32* @y.36
  %1270 = sub i32 %1268, 1
  %1271 = mul i32 %1268, %1270
  %1272 = urem i32 %1271, 2
  %1273 = icmp eq i32 %1272, 0
  %1274 = icmp slt i32 %1269, 10
  %1275 = or i1 %1273, %1274
  br i1 %1275, label %originalBB401, label %originalBB401alteredBB

originalBB401:                                    ; preds = %1267, %originalBB401alteredBB
  %1276 = load i64, i64* %29, align 8, !dbg !1841
  %1277 = add i64 %1276, 1, !dbg !1841
  store i64 %1277, i64* %29, align 8, !dbg !1841
  %1278 = load i32, i32* @x.35
  %1279 = load i32, i32* @y.36
  %1280 = sub i32 %1278, 1
  %1281 = mul i32 %1278, %1280
  %1282 = urem i32 %1281, 2
  %1283 = icmp eq i32 %1282, 0
  %1284 = icmp slt i32 %1279, 10
  %1285 = or i1 %1283, %1284
  br i1 %1285, label %originalBBpart2407, label %originalBB401alteredBB

originalBBpart2407:                               ; preds = %originalBB401
  br label %1286, !dbg !1841

1286:                                             ; preds = %originalBBpart2407
  %1287 = load i32, i32* @x.35
  %1288 = load i32, i32* @y.36
  %1289 = sub i32 %1287, 1
  %1290 = mul i32 %1287, %1289
  %1291 = urem i32 %1290, 2
  %1292 = icmp eq i32 %1291, 0
  %1293 = icmp slt i32 %1288, 10
  %1294 = or i1 %1292, %1293
  br i1 %1294, label %originalBB409, label %originalBB409alteredBB

originalBB409:                                    ; preds = %1286, %originalBB409alteredBB
  %1295 = load i32, i32* @x.35
  %1296 = load i32, i32* @y.36
  %1297 = sub i32 %1295, 1
  %1298 = mul i32 %1295, %1297
  %1299 = urem i32 %1298, 2
  %1300 = icmp eq i32 %1299, 0
  %1301 = icmp slt i32 %1296, 10
  %1302 = or i1 %1300, %1301
  br i1 %1302, label %originalBBpart2411, label %originalBB409alteredBB

originalBBpart2411:                               ; preds = %originalBB409
  br label %1303, !dbg !1832

1303:                                             ; preds = %originalBBpart2411
  %1304 = load i64, i64* %29, align 8, !dbg !1842
  %1305 = load i64, i64* %20, align 8, !dbg !1842
  %1306 = icmp ult i64 %1304, %1305, !dbg !1842
  br i1 %1306, label %1307, label %1327, !dbg !1845

1307:                                             ; preds = %1303
  %1308 = load i32, i32* @x.35
  %1309 = load i32, i32* @y.36
  %1310 = sub i32 %1308, 1
  %1311 = mul i32 %1308, %1310
  %1312 = urem i32 %1311, 2
  %1313 = icmp eq i32 %1312, 0
  %1314 = icmp slt i32 %1309, 10
  %1315 = or i1 %1313, %1314
  br i1 %1315, label %originalBB413, label %originalBB413alteredBB

originalBB413:                                    ; preds = %1307, %originalBB413alteredBB
  %1316 = load i8*, i8** %19, align 8, !dbg !1842
  %1317 = load i64, i64* %29, align 8, !dbg !1842
  %1318 = getelementptr inbounds i8, i8* %1316, i64 %1317, !dbg !1842
  store i8 39, i8* %1318, align 1, !dbg !1842
  %1319 = load i32, i32* @x.35
  %1320 = load i32, i32* @y.36
  %1321 = sub i32 %1319, 1
  %1322 = mul i32 %1319, %1321
  %1323 = urem i32 %1322, 2
  %1324 = icmp eq i32 %1323, 0
  %1325 = icmp slt i32 %1320, 10
  %1326 = or i1 %1324, %1325
  br i1 %1326, label %originalBBpart2415, label %originalBB413alteredBB

originalBBpart2415:                               ; preds = %originalBB413
  br label %1327, !dbg !1842

1327:                                             ; preds = %originalBBpart2415, %1303
  %1328 = load i64, i64* %29, align 8, !dbg !1845
  %1329 = add i64 %1328, 1, !dbg !1845
  store i64 %1329, i64* %29, align 8, !dbg !1845
  br label %1330, !dbg !1845

1330:                                             ; preds = %1327
  store i8 1, i8* %36, align 1, !dbg !1832
  br label %1331, !dbg !1832

1331:                                             ; preds = %1330, %originalBBpart2256, %originalBBpart2252
  %1332 = load i32, i32* @x.35
  %1333 = load i32, i32* @y.36
  %1334 = sub i32 %1332, 1
  %1335 = mul i32 %1332, %1334
  %1336 = urem i32 %1335, 2
  %1337 = icmp eq i32 %1336, 0
  %1338 = icmp slt i32 %1333, 10
  %1339 = or i1 %1337, %1338
  br i1 %1339, label %originalBB417, label %originalBB417alteredBB

originalBB417:                                    ; preds = %1331, %originalBB417alteredBB
  %1340 = load i32, i32* @x.35
  %1341 = load i32, i32* @y.36
  %1342 = sub i32 %1340, 1
  %1343 = mul i32 %1340, %1342
  %1344 = urem i32 %1343, 2
  %1345 = icmp eq i32 %1344, 0
  %1346 = icmp slt i32 %1341, 10
  %1347 = or i1 %1345, %1346
  br i1 %1347, label %originalBBpart2419, label %originalBB417alteredBB

originalBBpart2419:                               ; preds = %originalBB417
  br label %1348, !dbg !1829

1348:                                             ; preds = %originalBBpart2419
  %1349 = load i32, i32* @x.35
  %1350 = load i32, i32* @y.36
  %1351 = sub i32 %1349, 1
  %1352 = mul i32 %1349, %1351
  %1353 = urem i32 %1352, 2
  %1354 = icmp eq i32 %1353, 0
  %1355 = icmp slt i32 %1350, 10
  %1356 = or i1 %1354, %1355
  br i1 %1356, label %originalBB421, label %originalBB421alteredBB

originalBB421:                                    ; preds = %1348, %originalBB421alteredBB
  %1357 = load i64, i64* %29, align 8, !dbg !1846
  %1358 = load i64, i64* %20, align 8, !dbg !1846
  %1359 = icmp ult i64 %1357, %1358, !dbg !1846
  %1360 = load i32, i32* @x.35
  %1361 = load i32, i32* @y.36
  %1362 = sub i32 %1360, 1
  %1363 = mul i32 %1360, %1362
  %1364 = urem i32 %1363, 2
  %1365 = icmp eq i32 %1364, 0
  %1366 = icmp slt i32 %1361, 10
  %1367 = or i1 %1365, %1366
  br i1 %1367, label %originalBBpart2423, label %originalBB421alteredBB

originalBBpart2423:                               ; preds = %originalBB421
  br i1 %1359, label %1368, label %1372, !dbg !1849

1368:                                             ; preds = %originalBBpart2423
  %1369 = load i8*, i8** %19, align 8, !dbg !1846
  %1370 = load i64, i64* %29, align 8, !dbg !1846
  %1371 = getelementptr inbounds i8, i8* %1369, i64 %1370, !dbg !1846
  store i8 92, i8* %1371, align 1, !dbg !1846
  br label %1372, !dbg !1846

1372:                                             ; preds = %1368, %originalBBpart2423
  %1373 = load i32, i32* @x.35
  %1374 = load i32, i32* @y.36
  %1375 = sub i32 %1373, 1
  %1376 = mul i32 %1373, %1375
  %1377 = urem i32 %1376, 2
  %1378 = icmp eq i32 %1377, 0
  %1379 = icmp slt i32 %1374, 10
  %1380 = or i1 %1378, %1379
  br i1 %1380, label %originalBB425, label %originalBB425alteredBB

originalBB425:                                    ; preds = %1372, %originalBB425alteredBB
  %1381 = load i64, i64* %29, align 8, !dbg !1849
  %1382 = add i64 %1381, 1, !dbg !1849
  store i64 %1382, i64* %29, align 8, !dbg !1849
  %1383 = load i32, i32* @x.35
  %1384 = load i32, i32* @y.36
  %1385 = sub i32 %1383, 1
  %1386 = mul i32 %1383, %1385
  %1387 = urem i32 %1386, 2
  %1388 = icmp eq i32 %1387, 0
  %1389 = icmp slt i32 %1384, 10
  %1390 = or i1 %1388, %1389
  br i1 %1390, label %originalBBpart2431, label %originalBB425alteredBB

originalBBpart2431:                               ; preds = %originalBB425
  br label %1391, !dbg !1849

1391:                                             ; preds = %originalBBpart2431
  %1392 = load i32, i32* @x.35
  %1393 = load i32, i32* @y.36
  %1394 = sub i32 %1392, 1
  %1395 = mul i32 %1392, %1394
  %1396 = urem i32 %1395, 2
  %1397 = icmp eq i32 %1396, 0
  %1398 = icmp slt i32 %1393, 10
  %1399 = or i1 %1397, %1398
  br i1 %1399, label %originalBB433, label %originalBB433alteredBB

originalBB433:                                    ; preds = %1391, %originalBB433alteredBB
  %1400 = load i32, i32* @x.35
  %1401 = load i32, i32* @y.36
  %1402 = sub i32 %1400, 1
  %1403 = mul i32 %1400, %1402
  %1404 = urem i32 %1403, 2
  %1405 = icmp eq i32 %1404, 0
  %1406 = icmp slt i32 %1401, 10
  %1407 = or i1 %1405, %1406
  br i1 %1407, label %originalBBpart2435, label %originalBB433alteredBB

originalBBpart2435:                               ; preds = %originalBB433
  br label %1408, !dbg !1829

1408:                                             ; preds = %originalBBpart2435
  %1409 = load i32, i32* @x.35
  %1410 = load i32, i32* @y.36
  %1411 = sub i32 %1409, 1
  %1412 = mul i32 %1409, %1411
  %1413 = urem i32 %1412, 2
  %1414 = icmp eq i32 %1413, 0
  %1415 = icmp slt i32 %1410, 10
  %1416 = or i1 %1414, %1415
  br i1 %1416, label %originalBB437, label %originalBB437alteredBB

originalBB437:                                    ; preds = %1408, %originalBB437alteredBB
  %1417 = load i32, i32* %23, align 4, !dbg !1850
  %1418 = icmp ne i32 %1417, 2, !dbg !1852
  %1419 = load i32, i32* @x.35
  %1420 = load i32, i32* @y.36
  %1421 = sub i32 %1419, 1
  %1422 = mul i32 %1419, %1421
  %1423 = urem i32 %1422, 2
  %1424 = icmp eq i32 %1423, 0
  %1425 = icmp slt i32 %1420, 10
  %1426 = or i1 %1424, %1425
  br i1 %1426, label %originalBBpart2439, label %originalBB437alteredBB

originalBBpart2439:                               ; preds = %originalBB437
  br i1 %1418, label %1427, label %1601, !dbg !1853

1427:                                             ; preds = %originalBBpart2439
  %1428 = load i32, i32* @x.35
  %1429 = load i32, i32* @y.36
  %1430 = sub i32 %1428, 1
  %1431 = mul i32 %1428, %1430
  %1432 = urem i32 %1431, 2
  %1433 = icmp eq i32 %1432, 0
  %1434 = icmp slt i32 %1429, 10
  %1435 = or i1 %1433, %1434
  br i1 %1435, label %originalBB441, label %originalBB441alteredBB

originalBB441:                                    ; preds = %1427, %originalBB441alteredBB
  %1436 = load i64, i64* %28, align 8, !dbg !1854
  %1437 = add i64 %1436, 1, !dbg !1855
  %1438 = load i64, i64* %22, align 8, !dbg !1856
  %1439 = icmp ult i64 %1437, %1438, !dbg !1857
  %1440 = load i32, i32* @x.35
  %1441 = load i32, i32* @y.36
  %1442 = sub i32 %1440, 1
  %1443 = mul i32 %1440, %1442
  %1444 = urem i32 %1443, 2
  %1445 = icmp eq i32 %1444, 0
  %1446 = icmp slt i32 %1441, 10
  %1447 = or i1 %1445, %1446
  br i1 %1447, label %originalBBpart2456, label %originalBB441alteredBB

originalBBpart2456:                               ; preds = %originalBB441
  br i1 %1439, label %1448, label %1601, !dbg !1858

1448:                                             ; preds = %originalBBpart2456
  %1449 = load i32, i32* @x.35
  %1450 = load i32, i32* @y.36
  %1451 = sub i32 %1449, 1
  %1452 = mul i32 %1449, %1451
  %1453 = urem i32 %1452, 2
  %1454 = icmp eq i32 %1453, 0
  %1455 = icmp slt i32 %1450, 10
  %1456 = or i1 %1454, %1455
  br i1 %1456, label %originalBB458, label %originalBB458alteredBB

originalBB458:                                    ; preds = %1448, %originalBB458alteredBB
  %1457 = load i8*, i8** %21, align 8, !dbg !1859
  %1458 = load i64, i64* %28, align 8, !dbg !1860
  %1459 = add i64 %1458, 1, !dbg !1861
  %1460 = getelementptr inbounds i8, i8* %1457, i64 %1459, !dbg !1859
  %1461 = load i8, i8* %1460, align 1, !dbg !1859
  %1462 = sext i8 %1461 to i32, !dbg !1859
  %1463 = icmp sle i32 48, %1462, !dbg !1862
  %1464 = load i32, i32* @x.35
  %1465 = load i32, i32* @y.36
  %1466 = sub i32 %1464, 1
  %1467 = mul i32 %1464, %1466
  %1468 = urem i32 %1467, 2
  %1469 = icmp eq i32 %1468, 0
  %1470 = icmp slt i32 %1465, 10
  %1471 = or i1 %1469, %1470
  br i1 %1471, label %originalBBpart2462, label %originalBB458alteredBB

originalBBpart2462:                               ; preds = %originalBB458
  br i1 %1463, label %1472, label %1601, !dbg !1863

1472:                                             ; preds = %originalBBpart2462
  %1473 = load i32, i32* @x.35
  %1474 = load i32, i32* @y.36
  %1475 = sub i32 %1473, 1
  %1476 = mul i32 %1473, %1475
  %1477 = urem i32 %1476, 2
  %1478 = icmp eq i32 %1477, 0
  %1479 = icmp slt i32 %1474, 10
  %1480 = or i1 %1478, %1479
  br i1 %1480, label %originalBB464, label %originalBB464alteredBB

originalBB464:                                    ; preds = %1472, %originalBB464alteredBB
  %1481 = load i8*, i8** %21, align 8, !dbg !1864
  %1482 = load i64, i64* %28, align 8, !dbg !1865
  %1483 = add i64 %1482, 1, !dbg !1866
  %1484 = getelementptr inbounds i8, i8* %1481, i64 %1483, !dbg !1864
  %1485 = load i8, i8* %1484, align 1, !dbg !1864
  %1486 = sext i8 %1485 to i32, !dbg !1864
  %1487 = icmp sle i32 %1486, 57, !dbg !1867
  %1488 = load i32, i32* @x.35
  %1489 = load i32, i32* @y.36
  %1490 = sub i32 %1488, 1
  %1491 = mul i32 %1488, %1490
  %1492 = urem i32 %1491, 2
  %1493 = icmp eq i32 %1492, 0
  %1494 = icmp slt i32 %1489, 10
  %1495 = or i1 %1493, %1494
  br i1 %1495, label %originalBBpart2473, label %originalBB464alteredBB

originalBBpart2473:                               ; preds = %originalBB464
  br i1 %1487, label %1496, label %1601, !dbg !1868

1496:                                             ; preds = %originalBBpart2473
  br label %1497, !dbg !1869

1497:                                             ; preds = %1496
  %1498 = load i32, i32* @x.35
  %1499 = load i32, i32* @y.36
  %1500 = sub i32 %1498, 1
  %1501 = mul i32 %1498, %1500
  %1502 = urem i32 %1501, 2
  %1503 = icmp eq i32 %1502, 0
  %1504 = icmp slt i32 %1499, 10
  %1505 = or i1 %1503, %1504
  br i1 %1505, label %originalBB475, label %originalBB475alteredBB

originalBB475:                                    ; preds = %1497, %originalBB475alteredBB
  %1506 = load i64, i64* %29, align 8, !dbg !1871
  %1507 = load i64, i64* %20, align 8, !dbg !1871
  %1508 = icmp ult i64 %1506, %1507, !dbg !1871
  %1509 = load i32, i32* @x.35
  %1510 = load i32, i32* @y.36
  %1511 = sub i32 %1509, 1
  %1512 = mul i32 %1509, %1511
  %1513 = urem i32 %1512, 2
  %1514 = icmp eq i32 %1513, 0
  %1515 = icmp slt i32 %1510, 10
  %1516 = or i1 %1514, %1515
  br i1 %1516, label %originalBBpart2477, label %originalBB475alteredBB

originalBBpart2477:                               ; preds = %originalBB475
  br i1 %1508, label %1517, label %1521, !dbg !1874

1517:                                             ; preds = %originalBBpart2477
  %1518 = load i8*, i8** %19, align 8, !dbg !1871
  %1519 = load i64, i64* %29, align 8, !dbg !1871
  %1520 = getelementptr inbounds i8, i8* %1518, i64 %1519, !dbg !1871
  store i8 48, i8* %1520, align 1, !dbg !1871
  br label %1521, !dbg !1871

1521:                                             ; preds = %1517, %originalBBpart2477
  %1522 = load i64, i64* %29, align 8, !dbg !1874
  %1523 = add i64 %1522, 1, !dbg !1874
  store i64 %1523, i64* %29, align 8, !dbg !1874
  br label %1524, !dbg !1874

1524:                                             ; preds = %1521
  %1525 = load i32, i32* @x.35
  %1526 = load i32, i32* @y.36
  %1527 = sub i32 %1525, 1
  %1528 = mul i32 %1525, %1527
  %1529 = urem i32 %1528, 2
  %1530 = icmp eq i32 %1529, 0
  %1531 = icmp slt i32 %1526, 10
  %1532 = or i1 %1530, %1531
  br i1 %1532, label %originalBB479, label %originalBB479alteredBB

originalBB479:                                    ; preds = %1524, %originalBB479alteredBB
  %1533 = load i32, i32* @x.35
  %1534 = load i32, i32* @y.36
  %1535 = sub i32 %1533, 1
  %1536 = mul i32 %1533, %1535
  %1537 = urem i32 %1536, 2
  %1538 = icmp eq i32 %1537, 0
  %1539 = icmp slt i32 %1534, 10
  %1540 = or i1 %1538, %1539
  br i1 %1540, label %originalBBpart2481, label %originalBB479alteredBB

originalBBpart2481:                               ; preds = %originalBB479
  br label %1541, !dbg !1875

1541:                                             ; preds = %originalBBpart2481
  %1542 = load i32, i32* @x.35
  %1543 = load i32, i32* @y.36
  %1544 = sub i32 %1542, 1
  %1545 = mul i32 %1542, %1544
  %1546 = urem i32 %1545, 2
  %1547 = icmp eq i32 %1546, 0
  %1548 = icmp slt i32 %1543, 10
  %1549 = or i1 %1547, %1548
  br i1 %1549, label %originalBB483, label %originalBB483alteredBB

originalBB483:                                    ; preds = %1541, %originalBB483alteredBB
  %1550 = load i64, i64* %29, align 8, !dbg !1876
  %1551 = load i64, i64* %20, align 8, !dbg !1876
  %1552 = icmp ult i64 %1550, %1551, !dbg !1876
  %1553 = load i32, i32* @x.35
  %1554 = load i32, i32* @y.36
  %1555 = sub i32 %1553, 1
  %1556 = mul i32 %1553, %1555
  %1557 = urem i32 %1556, 2
  %1558 = icmp eq i32 %1557, 0
  %1559 = icmp slt i32 %1554, 10
  %1560 = or i1 %1558, %1559
  br i1 %1560, label %originalBBpart2485, label %originalBB483alteredBB

originalBBpart2485:                               ; preds = %originalBB483
  br i1 %1552, label %1561, label %1581, !dbg !1879

1561:                                             ; preds = %originalBBpart2485
  %1562 = load i32, i32* @x.35
  %1563 = load i32, i32* @y.36
  %1564 = sub i32 %1562, 1
  %1565 = mul i32 %1562, %1564
  %1566 = urem i32 %1565, 2
  %1567 = icmp eq i32 %1566, 0
  %1568 = icmp slt i32 %1563, 10
  %1569 = or i1 %1567, %1568
  br i1 %1569, label %originalBB487, label %originalBB487alteredBB

originalBB487:                                    ; preds = %1561, %originalBB487alteredBB
  %1570 = load i8*, i8** %19, align 8, !dbg !1876
  %1571 = load i64, i64* %29, align 8, !dbg !1876
  %1572 = getelementptr inbounds i8, i8* %1570, i64 %1571, !dbg !1876
  store i8 48, i8* %1572, align 1, !dbg !1876
  %1573 = load i32, i32* @x.35
  %1574 = load i32, i32* @y.36
  %1575 = sub i32 %1573, 1
  %1576 = mul i32 %1573, %1575
  %1577 = urem i32 %1576, 2
  %1578 = icmp eq i32 %1577, 0
  %1579 = icmp slt i32 %1574, 10
  %1580 = or i1 %1578, %1579
  br i1 %1580, label %originalBBpart2489, label %originalBB487alteredBB

originalBBpart2489:                               ; preds = %originalBB487
  br label %1581, !dbg !1876

1581:                                             ; preds = %originalBBpart2489, %originalBBpart2485
  %1582 = load i32, i32* @x.35
  %1583 = load i32, i32* @y.36
  %1584 = sub i32 %1582, 1
  %1585 = mul i32 %1582, %1584
  %1586 = urem i32 %1585, 2
  %1587 = icmp eq i32 %1586, 0
  %1588 = icmp slt i32 %1583, 10
  %1589 = or i1 %1587, %1588
  br i1 %1589, label %originalBB491, label %originalBB491alteredBB

originalBB491:                                    ; preds = %1581, %originalBB491alteredBB
  %1590 = load i64, i64* %29, align 8, !dbg !1879
  %1591 = add i64 %1590, 1, !dbg !1879
  store i64 %1591, i64* %29, align 8, !dbg !1879
  %1592 = load i32, i32* @x.35
  %1593 = load i32, i32* @y.36
  %1594 = sub i32 %1592, 1
  %1595 = mul i32 %1592, %1594
  %1596 = urem i32 %1595, 2
  %1597 = icmp eq i32 %1596, 0
  %1598 = icmp slt i32 %1593, 10
  %1599 = or i1 %1597, %1598
  br i1 %1599, label %originalBBpart2506, label %originalBB491alteredBB

originalBBpart2506:                               ; preds = %originalBB491
  br label %1600, !dbg !1879

1600:                                             ; preds = %originalBBpart2506
  br label %1601, !dbg !1880

1601:                                             ; preds = %1600, %originalBBpart2473, %originalBBpart2462, %originalBBpart2456, %originalBBpart2439
  %1602 = load i32, i32* @x.35
  %1603 = load i32, i32* @y.36
  %1604 = sub i32 %1602, 1
  %1605 = mul i32 %1602, %1604
  %1606 = urem i32 %1605, 2
  %1607 = icmp eq i32 %1606, 0
  %1608 = icmp slt i32 %1603, 10
  %1609 = or i1 %1607, %1608
  br i1 %1609, label %originalBB508, label %originalBB508alteredBB

originalBB508:                                    ; preds = %1601, %originalBB508alteredBB
  store i8 48, i8* %39, align 1, !dbg !1881
  %1610 = load i32, i32* @x.35
  %1611 = load i32, i32* @y.36
  %1612 = sub i32 %1610, 1
  %1613 = mul i32 %1610, %1612
  %1614 = urem i32 %1613, 2
  %1615 = icmp eq i32 %1614, 0
  %1616 = icmp slt i32 %1611, 10
  %1617 = or i1 %1615, %1616
  br i1 %1617, label %originalBBpart2510, label %originalBB508alteredBB

originalBBpart2510:                               ; preds = %originalBB508
  br label %1640, !dbg !1882

1618:                                             ; preds = %originalBBpart2240
  %1619 = load i32, i32* %24, align 4, !dbg !1883
  %1620 = and i32 %1619, 1, !dbg !1885
  %1621 = icmp ne i32 %1620, 0, !dbg !1885
  br i1 %1621, label %1622, label %1639, !dbg !1886

1622:                                             ; preds = %1618
  %1623 = load i32, i32* @x.35
  %1624 = load i32, i32* @y.36
  %1625 = sub i32 %1623, 1
  %1626 = mul i32 %1623, %1625
  %1627 = urem i32 %1626, 2
  %1628 = icmp eq i32 %1627, 0
  %1629 = icmp slt i32 %1624, 10
  %1630 = or i1 %1628, %1629
  br i1 %1630, label %originalBB512, label %originalBB512alteredBB

originalBB512:                                    ; preds = %1622, %originalBB512alteredBB
  %1631 = load i32, i32* @x.35
  %1632 = load i32, i32* @y.36
  %1633 = sub i32 %1631, 1
  %1634 = mul i32 %1631, %1633
  %1635 = urem i32 %1634, 2
  %1636 = icmp eq i32 %1635, 0
  %1637 = icmp slt i32 %1632, 10
  %1638 = or i1 %1636, %1637
  br i1 %1638, label %originalBBpart2514, label %originalBB512alteredBB

originalBBpart2514:                               ; preds = %originalBB512
  br label %5504, !dbg !1887

1639:                                             ; preds = %1618
  br label %1640

1640:                                             ; preds = %1639, %originalBBpart2510
  %1641 = load i32, i32* @x.35
  %1642 = load i32, i32* @y.36
  %1643 = sub i32 %1641, 1
  %1644 = mul i32 %1641, %1643
  %1645 = urem i32 %1644, 2
  %1646 = icmp eq i32 %1645, 0
  %1647 = icmp slt i32 %1642, 10
  %1648 = or i1 %1646, %1647
  br i1 %1648, label %originalBB516, label %originalBB516alteredBB

originalBB516:                                    ; preds = %1640, %originalBB516alteredBB
  %1649 = load i32, i32* @x.35
  %1650 = load i32, i32* @y.36
  %1651 = sub i32 %1649, 1
  %1652 = mul i32 %1649, %1651
  %1653 = urem i32 %1652, 2
  %1654 = icmp eq i32 %1653, 0
  %1655 = icmp slt i32 %1650, 10
  %1656 = or i1 %1654, %1655
  br i1 %1656, label %originalBBpart2518, label %originalBB516alteredBB

originalBBpart2518:                               ; preds = %originalBB516
  br label %4687, !dbg !1888

1657:                                             ; preds = %originalBBpart2236
  %1658 = load i32, i32* %23, align 4, !dbg !1889
  switch i32 %1658, label %2193 [
    i32 2, label %1659
    i32 5, label %1696
  ], !dbg !1890

1659:                                             ; preds = %1657
  %1660 = load i32, i32* @x.35
  %1661 = load i32, i32* @y.36
  %1662 = sub i32 %1660, 1
  %1663 = mul i32 %1660, %1662
  %1664 = urem i32 %1663, 2
  %1665 = icmp eq i32 %1664, 0
  %1666 = icmp slt i32 %1661, 10
  %1667 = or i1 %1665, %1666
  br i1 %1667, label %originalBB520, label %originalBB520alteredBB

originalBB520:                                    ; preds = %1659, %originalBB520alteredBB
  %1668 = load i8, i8* %35, align 1, !dbg !1891
  %1669 = trunc i8 %1668 to i1, !dbg !1891
  %1670 = load i32, i32* @x.35
  %1671 = load i32, i32* @y.36
  %1672 = sub i32 %1670, 1
  %1673 = mul i32 %1670, %1672
  %1674 = urem i32 %1673, 2
  %1675 = icmp eq i32 %1674, 0
  %1676 = icmp slt i32 %1671, 10
  %1677 = or i1 %1675, %1676
  br i1 %1677, label %originalBBpart2522, label %originalBB520alteredBB

originalBBpart2522:                               ; preds = %originalBB520
  br i1 %1669, label %1678, label %1695, !dbg !1894

1678:                                             ; preds = %originalBBpart2522
  %1679 = load i32, i32* @x.35
  %1680 = load i32, i32* @y.36
  %1681 = sub i32 %1679, 1
  %1682 = mul i32 %1679, %1681
  %1683 = urem i32 %1682, 2
  %1684 = icmp eq i32 %1683, 0
  %1685 = icmp slt i32 %1680, 10
  %1686 = or i1 %1684, %1685
  br i1 %1686, label %originalBB524, label %originalBB524alteredBB

originalBB524:                                    ; preds = %1678, %originalBB524alteredBB
  %1687 = load i32, i32* @x.35
  %1688 = load i32, i32* @y.36
  %1689 = sub i32 %1687, 1
  %1690 = mul i32 %1687, %1689
  %1691 = urem i32 %1690, 2
  %1692 = icmp eq i32 %1691, 0
  %1693 = icmp slt i32 %1688, 10
  %1694 = or i1 %1692, %1693
  br i1 %1694, label %originalBBpart2526, label %originalBB524alteredBB

originalBBpart2526:                               ; preds = %originalBB524
  br label %6021, !dbg !1895

1695:                                             ; preds = %originalBBpart2522
  br label %2210, !dbg !1896

1696:                                             ; preds = %1657
  %1697 = load i32, i32* %24, align 4, !dbg !1897
  %1698 = and i32 %1697, 4, !dbg !1899
  %1699 = icmp ne i32 %1698, 0, !dbg !1899
  br i1 %1699, label %1700, label %2176, !dbg !1900

1700:                                             ; preds = %1696
  %1701 = load i64, i64* %28, align 8, !dbg !1901
  %1702 = add i64 %1701, 2, !dbg !1902
  %1703 = load i64, i64* %22, align 8, !dbg !1903
  %1704 = trunc i64 %1703 to i32
  %1705 = mul i32 %1704, -4
  %1706 = trunc i64 2 to i32
  %1707 = mul i32 %1706, 3
  %1708 = add i32 %1707, -5
  %1709 = mul i32 %1705, %1705
  %1710 = mul i32 %1708, %1708
  %1711 = add i32 %1709, %1710
  %1712 = mul i32 %1705, %1708
  %1713 = mul i32 %1712, 2
  %1714 = sub i32 %1711, %1713
  %1715 = mul i32 %1714, -2
  %1716 = add i32 %1715, -4
  %1717 = icmp ne i32 %1716, -2
  br i1 %1717, label %1735, label %1718

1718:                                             ; preds = %1700
  %1719 = load i32, i32* @x.35
  %1720 = load i32, i32* @y.36
  %1721 = sub i32 %1719, 1
  %1722 = mul i32 %1719, %1721
  %1723 = urem i32 %1722, 2
  %1724 = icmp eq i32 %1723, 0
  %1725 = icmp slt i32 %1720, 10
  %1726 = or i1 %1724, %1725
  br i1 %1726, label %originalBB528, label %originalBB528alteredBB

originalBB528:                                    ; preds = %1718, %originalBB528alteredBB
  %1727 = load i32, i32* @x.35
  %1728 = load i32, i32* @y.36
  %1729 = sub i32 %1727, 1
  %1730 = mul i32 %1727, %1729
  %1731 = urem i32 %1730, 2
  %1732 = icmp eq i32 %1731, 0
  %1733 = icmp slt i32 %1728, 10
  %1734 = or i1 %1732, %1733
  br i1 %1734, label %originalBBpart2530, label %originalBB528alteredBB

originalBBpart2530:                               ; preds = %originalBB528
  ret i64 0

1735:                                             ; preds = %1700
  %1736 = load i32, i32* @x.35
  %1737 = load i32, i32* @y.36
  %1738 = sub i32 %1736, 1
  %1739 = mul i32 %1736, %1738
  %1740 = urem i32 %1739, 2
  %1741 = icmp eq i32 %1740, 0
  %1742 = icmp slt i32 %1737, 10
  %1743 = or i1 %1741, %1742
  br i1 %1743, label %originalBB532, label %originalBB532alteredBB

originalBB532:                                    ; preds = %1735, %originalBB532alteredBB
  %1744 = icmp ult i64 %1702, %1703, !dbg !1904
  %1745 = load i32, i32* @x.35
  %1746 = load i32, i32* @y.36
  %1747 = sub i32 %1745, 1
  %1748 = mul i32 %1745, %1747
  %1749 = urem i32 %1748, 2
  %1750 = icmp eq i32 %1749, 0
  %1751 = icmp slt i32 %1746, 10
  %1752 = or i1 %1750, %1751
  br i1 %1752, label %originalBBpart2534, label %originalBB532alteredBB

originalBBpart2534:                               ; preds = %originalBB532
  br i1 %1744, label %1753, label %2176, !dbg !1905

1753:                                             ; preds = %originalBBpart2534
  %1754 = load i32, i32* @x.35
  %1755 = load i32, i32* @y.36
  %1756 = sub i32 %1754, 1
  %1757 = mul i32 %1754, %1756
  %1758 = urem i32 %1757, 2
  %1759 = icmp eq i32 %1758, 0
  %1760 = icmp slt i32 %1755, 10
  %1761 = or i1 %1759, %1760
  br i1 %1761, label %originalBB536, label %originalBB536alteredBB

originalBB536:                                    ; preds = %1753, %originalBB536alteredBB
  %1762 = load i8*, i8** %21, align 8, !dbg !1906
  %1763 = load i64, i64* %28, align 8, !dbg !1907
  %1764 = add i64 %1763, 1, !dbg !1908
  %1765 = trunc i64 1 to i32
  %1766 = mul i32 %1765, 4
  %1767 = add i32 %1766, 3
  %1768 = trunc i64 %1763 to i32
  %1769 = mul i32 %1768, 2
  %1770 = add i32 %1769, 1
  %1771 = mul i32 %1767, %1767
  %1772 = mul i32 %1770, %1770
  %1773 = mul i32 %1772, 34
  %1774 = sub i32 %1771, %1773
  %1775 = mul i32 %1774, -2
  %1776 = add i32 %1775, -2
  %1777 = icmp ne i32 %1776, -4
  %1778 = load i32, i32* @x.35
  %1779 = load i32, i32* @y.36
  %1780 = sub i32 %1778, 1
  %1781 = mul i32 %1778, %1780
  %1782 = urem i32 %1781, 2
  %1783 = icmp eq i32 %1782, 0
  %1784 = icmp slt i32 %1779, 10
  %1785 = or i1 %1783, %1784
  br i1 %1785, label %originalBBpart2641, label %originalBB536alteredBB

originalBBpart2641:                               ; preds = %originalBB536
  br i1 %1777, label %1787, label %1786

1786:                                             ; preds = %originalBBpart2641
  ret i64 0

1787:                                             ; preds = %originalBBpart2641
  %1788 = getelementptr inbounds i8, i8* %1762, i64 %1764, !dbg !1906
  %1789 = load i8, i8* %1788, align 1, !dbg !1906
  %1790 = sext i8 %1789 to i32, !dbg !1906
  %1791 = icmp eq i32 %1790, 63, !dbg !1909
  br i1 %1791, label %1792, label %2176, !dbg !1910

1792:                                             ; preds = %1787
  %1793 = load i32, i32* @x.35
  %1794 = load i32, i32* @y.36
  %1795 = sub i32 %1793, 1
  %1796 = mul i32 %1793, %1795
  %1797 = urem i32 %1796, 2
  %1798 = icmp eq i32 %1797, 0
  %1799 = icmp slt i32 %1794, 10
  %1800 = or i1 %1798, %1799
  br i1 %1800, label %originalBB643, label %originalBB643alteredBB

originalBB643:                                    ; preds = %1792, %originalBB643alteredBB
  %1801 = load i8*, i8** %21, align 8, !dbg !1911
  %1802 = load i64, i64* %28, align 8, !dbg !1912
  %1803 = add i64 %1802, 2, !dbg !1913
  %1804 = getelementptr inbounds i8, i8* %1801, i64 %1803, !dbg !1911
  %1805 = load i8, i8* %1804, align 1, !dbg !1911
  %1806 = sext i8 %1805 to i32, !dbg !1911
  %1807 = load i32, i32* @x.35
  %1808 = load i32, i32* @y.36
  %1809 = sub i32 %1807, 1
  %1810 = mul i32 %1807, %1809
  %1811 = urem i32 %1810, 2
  %1812 = icmp eq i32 %1811, 0
  %1813 = icmp slt i32 %1808, 10
  %1814 = or i1 %1812, %1813
  br i1 %1814, label %originalBBpart2654, label %originalBB643alteredBB

originalBBpart2654:                               ; preds = %originalBB643
  switch i32 %1806, label %2158 [
    i32 33, label %1815
    i32 39, label %1815
    i32 40, label %1815
    i32 41, label %1815
    i32 45, label %1815
    i32 47, label %1815
    i32 60, label %1815
    i32 61, label %1815
    i32 62, label %1815
  ], !dbg !1914

1815:                                             ; preds = %originalBBpart2654, %originalBBpart2654, %originalBBpart2654, %originalBBpart2654, %originalBBpart2654, %originalBBpart2654, %originalBBpart2654, %originalBBpart2654, %originalBBpart2654
  %1816 = load i32, i32* @x.35
  %1817 = load i32, i32* @y.36
  %1818 = sub i32 %1816, 1
  %1819 = mul i32 %1816, %1818
  %1820 = urem i32 %1819, 2
  %1821 = icmp eq i32 %1820, 0
  %1822 = icmp slt i32 %1817, 10
  %1823 = or i1 %1821, %1822
  br i1 %1823, label %originalBB656, label %originalBB656alteredBB

originalBB656:                                    ; preds = %1815, %originalBB656alteredBB
  %1824 = load i8, i8* %35, align 1, !dbg !1915
  %1825 = trunc i8 %1824 to i1, !dbg !1915
  %1826 = load i32, i32* @x.35
  %1827 = load i32, i32* @y.36
  %1828 = sub i32 %1826, 1
  %1829 = mul i32 %1826, %1828
  %1830 = urem i32 %1829, 2
  %1831 = icmp eq i32 %1830, 0
  %1832 = icmp slt i32 %1827, 10
  %1833 = or i1 %1831, %1832
  br i1 %1833, label %originalBBpart2658, label %originalBB656alteredBB

originalBBpart2658:                               ; preds = %originalBB656
  br i1 %1825, label %1834, label %1835, !dbg !1918

1834:                                             ; preds = %originalBBpart2658
  br label %6021, !dbg !1919

1835:                                             ; preds = %originalBBpart2658
  %1836 = load i8*, i8** %21, align 8, !dbg !1920
  %1837 = load i64, i64* %28, align 8, !dbg !1921
  %1838 = add i64 %1837, 2, !dbg !1922
  %1839 = getelementptr inbounds i8, i8* %1836, i64 %1838, !dbg !1920
  %1840 = load i8, i8* %1839, align 1, !dbg !1920
  store i8 %1840, i8* %39, align 1, !dbg !1923
  %1841 = load i64, i64* %28, align 8, !dbg !1924
  %1842 = add i64 %1841, 2, !dbg !1924
  store i64 %1842, i64* %28, align 8, !dbg !1924
  br label %1843, !dbg !1925

1843:                                             ; preds = %1835
  %1844 = load i32, i32* @x.35
  %1845 = load i32, i32* @y.36
  %1846 = sub i32 %1844, 1
  %1847 = mul i32 %1844, %1846
  %1848 = urem i32 %1847, 2
  %1849 = icmp eq i32 %1848, 0
  %1850 = icmp slt i32 %1845, 10
  %1851 = or i1 %1849, %1850
  br i1 %1851, label %originalBB660, label %originalBB660alteredBB

originalBB660:                                    ; preds = %1843, %originalBB660alteredBB
  %1852 = load i64, i64* %29, align 8, !dbg !1926
  %1853 = load i64, i64* %20, align 8, !dbg !1926
  %1854 = icmp ult i64 %1852, %1853, !dbg !1926
  %1855 = load i32, i32* @x.35
  %1856 = load i32, i32* @y.36
  %1857 = sub i32 %1855, 1
  %1858 = mul i32 %1855, %1857
  %1859 = urem i32 %1858, 2
  %1860 = icmp eq i32 %1859, 0
  %1861 = icmp slt i32 %1856, 10
  %1862 = or i1 %1860, %1861
  br i1 %1862, label %originalBBpart2662, label %originalBB660alteredBB

originalBBpart2662:                               ; preds = %originalBB660
  br i1 %1854, label %1863, label %1867, !dbg !1929

1863:                                             ; preds = %originalBBpart2662
  %1864 = load i8*, i8** %19, align 8, !dbg !1926
  %1865 = load i64, i64* %29, align 8, !dbg !1926
  %1866 = getelementptr inbounds i8, i8* %1864, i64 %1865, !dbg !1926
  store i8 63, i8* %1866, align 1, !dbg !1926
  br label %1867, !dbg !1926

1867:                                             ; preds = %1863, %originalBBpart2662
  %1868 = load i32, i32* @x.35
  %1869 = load i32, i32* @y.36
  %1870 = sub i32 %1868, 1
  %1871 = mul i32 %1868, %1870
  %1872 = urem i32 %1871, 2
  %1873 = icmp eq i32 %1872, 0
  %1874 = icmp slt i32 %1869, 10
  %1875 = or i1 %1873, %1874
  br i1 %1875, label %originalBB664, label %originalBB664alteredBB

originalBB664:                                    ; preds = %1867, %originalBB664alteredBB
  %1876 = load i64, i64* %29, align 8, !dbg !1929
  %1877 = add i64 %1876, 1, !dbg !1929
  store i64 %1877, i64* %29, align 8, !dbg !1929
  %1878 = load i32, i32* @x.35
  %1879 = load i32, i32* @y.36
  %1880 = sub i32 %1878, 1
  %1881 = mul i32 %1878, %1880
  %1882 = urem i32 %1881, 2
  %1883 = icmp eq i32 %1882, 0
  %1884 = icmp slt i32 %1879, 10
  %1885 = or i1 %1883, %1884
  br i1 %1885, label %originalBBpart2668, label %originalBB664alteredBB

originalBBpart2668:                               ; preds = %originalBB664
  br label %1886, !dbg !1929

1886:                                             ; preds = %originalBBpart2668
  %1887 = load i32, i32* @x.35
  %1888 = load i32, i32* @y.36
  %1889 = sub i32 %1887, 1
  %1890 = mul i32 %1887, %1889
  %1891 = urem i32 %1890, 2
  %1892 = icmp eq i32 %1891, 0
  %1893 = icmp slt i32 %1888, 10
  %1894 = or i1 %1892, %1893
  br i1 %1894, label %originalBB670, label %originalBB670alteredBB

originalBB670:                                    ; preds = %1886, %originalBB670alteredBB
  %1895 = load i32, i32* @x.35
  %1896 = load i32, i32* @y.36
  %1897 = sub i32 %1895, 1
  %1898 = mul i32 %1895, %1897
  %1899 = urem i32 %1898, 2
  %1900 = icmp eq i32 %1899, 0
  %1901 = icmp slt i32 %1896, 10
  %1902 = or i1 %1900, %1901
  br i1 %1902, label %originalBBpart2672, label %originalBB670alteredBB

originalBBpart2672:                               ; preds = %originalBB670
  br label %1903, !dbg !1930

1903:                                             ; preds = %originalBBpart2672
  %1904 = load i64, i64* %29, align 8, !dbg !1931
  %1905 = load i64, i64* %20, align 8, !dbg !1931
  %1906 = icmp ult i64 %1904, %1905, !dbg !1931
  br i1 %1906, label %1907, label %1927, !dbg !1934

1907:                                             ; preds = %1903
  %1908 = load i32, i32* @x.35
  %1909 = load i32, i32* @y.36
  %1910 = sub i32 %1908, 1
  %1911 = mul i32 %1908, %1910
  %1912 = urem i32 %1911, 2
  %1913 = icmp eq i32 %1912, 0
  %1914 = icmp slt i32 %1909, 10
  %1915 = or i1 %1913, %1914
  br i1 %1915, label %originalBB674, label %originalBB674alteredBB

originalBB674:                                    ; preds = %1907, %originalBB674alteredBB
  %1916 = load i8*, i8** %19, align 8, !dbg !1931
  %1917 = load i64, i64* %29, align 8, !dbg !1931
  %1918 = getelementptr inbounds i8, i8* %1916, i64 %1917, !dbg !1931
  store i8 34, i8* %1918, align 1, !dbg !1931
  %1919 = load i32, i32* @x.35
  %1920 = load i32, i32* @y.36
  %1921 = sub i32 %1919, 1
  %1922 = mul i32 %1919, %1921
  %1923 = urem i32 %1922, 2
  %1924 = icmp eq i32 %1923, 0
  %1925 = icmp slt i32 %1920, 10
  %1926 = or i1 %1924, %1925
  br i1 %1926, label %originalBBpart2676, label %originalBB674alteredBB

originalBBpart2676:                               ; preds = %originalBB674
  br label %1927, !dbg !1931

1927:                                             ; preds = %originalBBpart2676, %1903
  %1928 = load i32, i32* @x.35
  %1929 = load i32, i32* @y.36
  %1930 = sub i32 %1928, 1
  %1931 = mul i32 %1928, %1930
  %1932 = urem i32 %1931, 2
  %1933 = icmp eq i32 %1932, 0
  %1934 = icmp slt i32 %1929, 10
  %1935 = or i1 %1933, %1934
  br i1 %1935, label %originalBB678, label %originalBB678alteredBB

originalBB678:                                    ; preds = %1927, %originalBB678alteredBB
  %1936 = load i64, i64* %29, align 8, !dbg !1934
  %1937 = add i64 %1936, 1, !dbg !1934
  %1938 = trunc i64 1 to i32
  %1939 = mul i32 %1938, -5
  %1940 = add i32 %1939, -5
  %1941 = mul i32 %1940, %1940
  %1942 = sub i32 %1941, %1940
  %1943 = srem i32 %1942, 2
  %1944 = mul i32 %1943, 5
  %1945 = add i32 %1944, 2
  %1946 = icmp eq i32 %1945, 2
  %1947 = load i32, i32* @x.35
  %1948 = load i32, i32* @y.36
  %1949 = sub i32 %1947, 1
  %1950 = mul i32 %1947, %1949
  %1951 = urem i32 %1950, 2
  %1952 = icmp eq i32 %1951, 0
  %1953 = icmp slt i32 %1948, 10
  %1954 = or i1 %1952, %1953
  br i1 %1954, label %originalBBpart2710, label %originalBB678alteredBB

originalBBpart2710:                               ; preds = %originalBB678
  br i1 %1946, label %1972, label %1955

1955:                                             ; preds = %originalBBpart2710
  %1956 = load i32, i32* @x.35
  %1957 = load i32, i32* @y.36
  %1958 = sub i32 %1956, 1
  %1959 = mul i32 %1956, %1958
  %1960 = urem i32 %1959, 2
  %1961 = icmp eq i32 %1960, 0
  %1962 = icmp slt i32 %1957, 10
  %1963 = or i1 %1961, %1962
  br i1 %1963, label %originalBB712, label %originalBB712alteredBB

originalBB712:                                    ; preds = %1955, %originalBB712alteredBB
  %1964 = load i32, i32* @x.35
  %1965 = load i32, i32* @y.36
  %1966 = sub i32 %1964, 1
  %1967 = mul i32 %1964, %1966
  %1968 = urem i32 %1967, 2
  %1969 = icmp eq i32 %1968, 0
  %1970 = icmp slt i32 %1965, 10
  %1971 = or i1 %1969, %1970
  br i1 %1971, label %originalBBpart2714, label %originalBB712alteredBB

originalBBpart2714:                               ; preds = %originalBB712
  ret i64 0

1972:                                             ; preds = %originalBBpart2710
  %1973 = load i32, i32* @x.35
  %1974 = load i32, i32* @y.36
  %1975 = sub i32 %1973, 1
  %1976 = mul i32 %1973, %1975
  %1977 = urem i32 %1976, 2
  %1978 = icmp eq i32 %1977, 0
  %1979 = icmp slt i32 %1974, 10
  %1980 = or i1 %1978, %1979
  br i1 %1980, label %originalBB716, label %originalBB716alteredBB

originalBB716:                                    ; preds = %1972, %originalBB716alteredBB
  store i64 %1937, i64* %29, align 8, !dbg !1934
  %1981 = load i32, i32* @x.35
  %1982 = load i32, i32* @y.36
  %1983 = sub i32 %1981, 1
  %1984 = mul i32 %1981, %1983
  %1985 = urem i32 %1984, 2
  %1986 = icmp eq i32 %1985, 0
  %1987 = icmp slt i32 %1982, 10
  %1988 = or i1 %1986, %1987
  br i1 %1988, label %originalBBpart2718, label %originalBB716alteredBB

originalBBpart2718:                               ; preds = %originalBB716
  br label %1989, !dbg !1934

1989:                                             ; preds = %originalBBpart2718
  %1990 = load i32, i32* @x.35
  %1991 = load i32, i32* @y.36
  %1992 = sub i32 %1990, 1
  %1993 = mul i32 %1990, %1992
  %1994 = urem i32 %1993, 2
  %1995 = icmp eq i32 %1994, 0
  %1996 = icmp slt i32 %1991, 10
  %1997 = or i1 %1995, %1996
  br i1 %1997, label %originalBB720, label %originalBB720alteredBB

originalBB720:                                    ; preds = %1989, %originalBB720alteredBB
  %1998 = load i32, i32* @x.35
  %1999 = load i32, i32* @y.36
  %2000 = sub i32 %1998, 1
  %2001 = mul i32 %1998, %2000
  %2002 = urem i32 %2001, 2
  %2003 = icmp eq i32 %2002, 0
  %2004 = icmp slt i32 %1999, 10
  %2005 = or i1 %2003, %2004
  br i1 %2005, label %originalBBpart2722, label %originalBB720alteredBB

originalBBpart2722:                               ; preds = %originalBB720
  br label %2006, !dbg !1935

2006:                                             ; preds = %originalBBpart2722
  %2007 = load i32, i32* @x.35
  %2008 = load i32, i32* @y.36
  %2009 = sub i32 %2007, 1
  %2010 = mul i32 %2007, %2009
  %2011 = urem i32 %2010, 2
  %2012 = icmp eq i32 %2011, 0
  %2013 = icmp slt i32 %2008, 10
  %2014 = or i1 %2012, %2013
  br i1 %2014, label %originalBB724, label %originalBB724alteredBB

originalBB724:                                    ; preds = %2006, %originalBB724alteredBB
  %2015 = load i64, i64* %29, align 8, !dbg !1936
  %2016 = load i64, i64* %20, align 8, !dbg !1936
  %2017 = icmp ult i64 %2015, %2016, !dbg !1936
  %2018 = load i32, i32* @x.35
  %2019 = load i32, i32* @y.36
  %2020 = sub i32 %2018, 1
  %2021 = mul i32 %2018, %2020
  %2022 = urem i32 %2021, 2
  %2023 = icmp eq i32 %2022, 0
  %2024 = icmp slt i32 %2019, 10
  %2025 = or i1 %2023, %2024
  br i1 %2025, label %originalBBpart2726, label %originalBB724alteredBB

originalBBpart2726:                               ; preds = %originalBB724
  br i1 %2017, label %2026, label %2046, !dbg !1939

2026:                                             ; preds = %originalBBpart2726
  %2027 = load i32, i32* @x.35
  %2028 = load i32, i32* @y.36
  %2029 = sub i32 %2027, 1
  %2030 = mul i32 %2027, %2029
  %2031 = urem i32 %2030, 2
  %2032 = icmp eq i32 %2031, 0
  %2033 = icmp slt i32 %2028, 10
  %2034 = or i1 %2032, %2033
  br i1 %2034, label %originalBB728, label %originalBB728alteredBB

originalBB728:                                    ; preds = %2026, %originalBB728alteredBB
  %2035 = load i8*, i8** %19, align 8, !dbg !1936
  %2036 = load i64, i64* %29, align 8, !dbg !1936
  %2037 = getelementptr inbounds i8, i8* %2035, i64 %2036, !dbg !1936
  store i8 34, i8* %2037, align 1, !dbg !1936
  %2038 = load i32, i32* @x.35
  %2039 = load i32, i32* @y.36
  %2040 = sub i32 %2038, 1
  %2041 = mul i32 %2038, %2040
  %2042 = urem i32 %2041, 2
  %2043 = icmp eq i32 %2042, 0
  %2044 = icmp slt i32 %2039, 10
  %2045 = or i1 %2043, %2044
  br i1 %2045, label %originalBBpart2730, label %originalBB728alteredBB

originalBBpart2730:                               ; preds = %originalBB728
  br label %2046, !dbg !1936

2046:                                             ; preds = %originalBBpart2730, %originalBBpart2726
  %2047 = load i32, i32* @x.35
  %2048 = load i32, i32* @y.36
  %2049 = sub i32 %2047, 1
  %2050 = mul i32 %2047, %2049
  %2051 = urem i32 %2050, 2
  %2052 = icmp eq i32 %2051, 0
  %2053 = icmp slt i32 %2048, 10
  %2054 = or i1 %2052, %2053
  br i1 %2054, label %originalBB732, label %originalBB732alteredBB

originalBB732:                                    ; preds = %2046, %originalBB732alteredBB
  %2055 = load i64, i64* %29, align 8, !dbg !1939
  %2056 = add i64 %2055, 1, !dbg !1939
  store i64 %2056, i64* %29, align 8, !dbg !1939
  %2057 = load i32, i32* @x.35
  %2058 = load i32, i32* @y.36
  %2059 = sub i32 %2057, 1
  %2060 = mul i32 %2057, %2059
  %2061 = urem i32 %2060, 2
  %2062 = icmp eq i32 %2061, 0
  %2063 = icmp slt i32 %2058, 10
  %2064 = or i1 %2062, %2063
  br i1 %2064, label %originalBBpart2735, label %originalBB732alteredBB

originalBBpart2735:                               ; preds = %originalBB732
  br label %2065, !dbg !1939

2065:                                             ; preds = %originalBBpart2735
  %2066 = load i32, i32* @x.35
  %2067 = load i32, i32* @y.36
  %2068 = sub i32 %2066, 1
  %2069 = mul i32 %2066, %2068
  %2070 = urem i32 %2069, 2
  %2071 = icmp eq i32 %2070, 0
  %2072 = icmp slt i32 %2067, 10
  %2073 = or i1 %2071, %2072
  br i1 %2073, label %originalBB737, label %originalBB737alteredBB

originalBB737:                                    ; preds = %2065, %originalBB737alteredBB
  %2074 = load i32, i32* @x.35
  %2075 = load i32, i32* @y.36
  %2076 = sub i32 %2074, 1
  %2077 = mul i32 %2074, %2076
  %2078 = urem i32 %2077, 2
  %2079 = icmp eq i32 %2078, 0
  %2080 = icmp slt i32 %2075, 10
  %2081 = or i1 %2079, %2080
  br i1 %2081, label %originalBBpart2739, label %originalBB737alteredBB

originalBBpart2739:                               ; preds = %originalBB737
  br label %2082, !dbg !1940

2082:                                             ; preds = %originalBBpart2739
  %2083 = load i32, i32* @x.35
  %2084 = load i32, i32* @y.36
  %2085 = sub i32 %2083, 1
  %2086 = mul i32 %2083, %2085
  %2087 = urem i32 %2086, 2
  %2088 = icmp eq i32 %2087, 0
  %2089 = icmp slt i32 %2084, 10
  %2090 = or i1 %2088, %2089
  br i1 %2090, label %originalBB741, label %originalBB741alteredBB

originalBB741:                                    ; preds = %2082, %originalBB741alteredBB
  %2091 = load i64, i64* %29, align 8, !dbg !1941
  %2092 = load i64, i64* %20, align 8, !dbg !1941
  %2093 = icmp ult i64 %2091, %2092, !dbg !1941
  %2094 = load i32, i32* @x.35
  %2095 = load i32, i32* @y.36
  %2096 = sub i32 %2094, 1
  %2097 = mul i32 %2094, %2096
  %2098 = urem i32 %2097, 2
  %2099 = icmp eq i32 %2098, 0
  %2100 = icmp slt i32 %2095, 10
  %2101 = or i1 %2099, %2100
  br i1 %2101, label %originalBBpart2743, label %originalBB741alteredBB

originalBBpart2743:                               ; preds = %originalBB741
  br i1 %2093, label %2102, label %2122, !dbg !1944

2102:                                             ; preds = %originalBBpart2743
  %2103 = load i32, i32* @x.35
  %2104 = load i32, i32* @y.36
  %2105 = sub i32 %2103, 1
  %2106 = mul i32 %2103, %2105
  %2107 = urem i32 %2106, 2
  %2108 = icmp eq i32 %2107, 0
  %2109 = icmp slt i32 %2104, 10
  %2110 = or i1 %2108, %2109
  br i1 %2110, label %originalBB745, label %originalBB745alteredBB

originalBB745:                                    ; preds = %2102, %originalBB745alteredBB
  %2111 = load i8*, i8** %19, align 8, !dbg !1941
  %2112 = load i64, i64* %29, align 8, !dbg !1941
  %2113 = getelementptr inbounds i8, i8* %2111, i64 %2112, !dbg !1941
  store i8 63, i8* %2113, align 1, !dbg !1941
  %2114 = load i32, i32* @x.35
  %2115 = load i32, i32* @y.36
  %2116 = sub i32 %2114, 1
  %2117 = mul i32 %2114, %2116
  %2118 = urem i32 %2117, 2
  %2119 = icmp eq i32 %2118, 0
  %2120 = icmp slt i32 %2115, 10
  %2121 = or i1 %2119, %2120
  br i1 %2121, label %originalBBpart2747, label %originalBB745alteredBB

originalBBpart2747:                               ; preds = %originalBB745
  br label %2122, !dbg !1941

2122:                                             ; preds = %originalBBpart2747, %originalBBpart2743
  %2123 = load i32, i32* @x.35
  %2124 = load i32, i32* @y.36
  %2125 = sub i32 %2123, 1
  %2126 = mul i32 %2123, %2125
  %2127 = urem i32 %2126, 2
  %2128 = icmp eq i32 %2127, 0
  %2129 = icmp slt i32 %2124, 10
  %2130 = or i1 %2128, %2129
  br i1 %2130, label %originalBB749, label %originalBB749alteredBB

originalBB749:                                    ; preds = %2122, %originalBB749alteredBB
  %2131 = load i64, i64* %29, align 8, !dbg !1944
  %2132 = add i64 %2131, 1, !dbg !1944
  store i64 %2132, i64* %29, align 8, !dbg !1944
  %2133 = load i32, i32* @x.35
  %2134 = load i32, i32* @y.36
  %2135 = sub i32 %2133, 1
  %2136 = mul i32 %2133, %2135
  %2137 = urem i32 %2136, 2
  %2138 = icmp eq i32 %2137, 0
  %2139 = icmp slt i32 %2134, 10
  %2140 = or i1 %2138, %2139
  br i1 %2140, label %originalBBpart2753, label %originalBB749alteredBB

originalBBpart2753:                               ; preds = %originalBB749
  br label %2141, !dbg !1944

2141:                                             ; preds = %originalBBpart2753
  %2142 = load i32, i32* @x.35
  %2143 = load i32, i32* @y.36
  %2144 = sub i32 %2142, 1
  %2145 = mul i32 %2142, %2144
  %2146 = urem i32 %2145, 2
  %2147 = icmp eq i32 %2146, 0
  %2148 = icmp slt i32 %2143, 10
  %2149 = or i1 %2147, %2148
  br i1 %2149, label %originalBB755, label %originalBB755alteredBB

originalBB755:                                    ; preds = %2141, %originalBB755alteredBB
  %2150 = load i32, i32* @x.35
  %2151 = load i32, i32* @y.36
  %2152 = sub i32 %2150, 1
  %2153 = mul i32 %2150, %2152
  %2154 = urem i32 %2153, 2
  %2155 = icmp eq i32 %2154, 0
  %2156 = icmp slt i32 %2151, 10
  %2157 = or i1 %2155, %2156
  br i1 %2157, label %originalBBpart2757, label %originalBB755alteredBB

originalBBpart2757:                               ; preds = %originalBB755
  br label %2159, !dbg !1945

2158:                                             ; preds = %originalBBpart2654
  br label %2159, !dbg !1946

2159:                                             ; preds = %2158, %originalBBpart2757
  %2160 = load i32, i32* @x.35
  %2161 = load i32, i32* @y.36
  %2162 = sub i32 %2160, 1
  %2163 = mul i32 %2160, %2162
  %2164 = urem i32 %2163, 2
  %2165 = icmp eq i32 %2164, 0
  %2166 = icmp slt i32 %2161, 10
  %2167 = or i1 %2165, %2166
  br i1 %2167, label %originalBB759, label %originalBB759alteredBB

originalBB759:                                    ; preds = %2159, %originalBB759alteredBB
  %2168 = load i32, i32* @x.35
  %2169 = load i32, i32* @y.36
  %2170 = sub i32 %2168, 1
  %2171 = mul i32 %2168, %2170
  %2172 = urem i32 %2171, 2
  %2173 = icmp eq i32 %2172, 0
  %2174 = icmp slt i32 %2169, 10
  %2175 = or i1 %2173, %2174
  br i1 %2175, label %originalBBpart2761, label %originalBB759alteredBB

originalBBpart2761:                               ; preds = %originalBB759
  br label %2176, !dbg !1947

2176:                                             ; preds = %originalBBpart2761, %1787, %originalBBpart2534, %1696
  %2177 = load i32, i32* @x.35
  %2178 = load i32, i32* @y.36
  %2179 = sub i32 %2177, 1
  %2180 = mul i32 %2177, %2179
  %2181 = urem i32 %2180, 2
  %2182 = icmp eq i32 %2181, 0
  %2183 = icmp slt i32 %2178, 10
  %2184 = or i1 %2182, %2183
  br i1 %2184, label %originalBB763, label %originalBB763alteredBB

originalBB763:                                    ; preds = %2176, %originalBB763alteredBB
  %2185 = load i32, i32* @x.35
  %2186 = load i32, i32* @y.36
  %2187 = sub i32 %2185, 1
  %2188 = mul i32 %2185, %2187
  %2189 = urem i32 %2188, 2
  %2190 = icmp eq i32 %2189, 0
  %2191 = icmp slt i32 %2186, 10
  %2192 = or i1 %2190, %2191
  br i1 %2192, label %originalBBpart2765, label %originalBB763alteredBB

originalBBpart2765:                               ; preds = %originalBB763
  br label %2210, !dbg !1948

2193:                                             ; preds = %1657
  %2194 = load i32, i32* @x.35
  %2195 = load i32, i32* @y.36
  %2196 = sub i32 %2194, 1
  %2197 = mul i32 %2194, %2196
  %2198 = urem i32 %2197, 2
  %2199 = icmp eq i32 %2198, 0
  %2200 = icmp slt i32 %2195, 10
  %2201 = or i1 %2199, %2200
  br i1 %2201, label %originalBB767, label %originalBB767alteredBB

originalBB767:                                    ; preds = %2193, %originalBB767alteredBB
  %2202 = load i32, i32* @x.35
  %2203 = load i32, i32* @y.36
  %2204 = sub i32 %2202, 1
  %2205 = mul i32 %2202, %2204
  %2206 = urem i32 %2205, 2
  %2207 = icmp eq i32 %2206, 0
  %2208 = icmp slt i32 %2203, 10
  %2209 = or i1 %2207, %2208
  br i1 %2209, label %originalBBpart2769, label %originalBB767alteredBB

originalBBpart2769:                               ; preds = %originalBB767
  br label %2210, !dbg !1949

2210:                                             ; preds = %originalBBpart2769, %originalBBpart2765, %1695
  %2211 = load i32, i32* @x.35
  %2212 = load i32, i32* @y.36
  %2213 = sub i32 %2211, 1
  %2214 = mul i32 %2211, %2213
  %2215 = urem i32 %2214, 2
  %2216 = icmp eq i32 %2215, 0
  %2217 = icmp slt i32 %2212, 10
  %2218 = or i1 %2216, %2217
  br i1 %2218, label %originalBB771, label %originalBB771alteredBB

originalBB771:                                    ; preds = %2210, %originalBB771alteredBB
  %2219 = load i32, i32* @x.35
  %2220 = load i32, i32* @y.36
  %2221 = sub i32 %2219, 1
  %2222 = mul i32 %2219, %2221
  %2223 = urem i32 %2222, 2
  %2224 = icmp eq i32 %2223, 0
  %2225 = icmp slt i32 %2220, 10
  %2226 = or i1 %2224, %2225
  br i1 %2226, label %originalBBpart2773, label %originalBB771alteredBB

originalBBpart2773:                               ; preds = %originalBB771
  br label %4687, !dbg !1950

2227:                                             ; preds = %originalBBpart2236
  %2228 = load i32, i32* @x.35
  %2229 = load i32, i32* @y.36
  %2230 = sub i32 %2228, 1
  %2231 = mul i32 %2228, %2230
  %2232 = urem i32 %2231, 2
  %2233 = icmp eq i32 %2232, 0
  %2234 = icmp slt i32 %2229, 10
  %2235 = or i1 %2233, %2234
  br i1 %2235, label %originalBB775, label %originalBB775alteredBB

originalBB775:                                    ; preds = %2227, %originalBB775alteredBB
  store i8 97, i8* %40, align 1, !dbg !1951
  %2236 = load i32, i32* @x.35
  %2237 = load i32, i32* @y.36
  %2238 = sub i32 %2236, 1
  %2239 = mul i32 %2236, %2238
  %2240 = urem i32 %2239, 2
  %2241 = icmp eq i32 %2240, 0
  %2242 = icmp slt i32 %2237, 10
  %2243 = or i1 %2241, %2242
  br i1 %2243, label %originalBBpart2777, label %originalBB775alteredBB

originalBBpart2777:                               ; preds = %originalBB775
  br label %2550, !dbg !1952

2244:                                             ; preds = %originalBBpart2236
  %2245 = load i32, i32* @x.35
  %2246 = load i32, i32* @y.36
  %2247 = sub i32 %2245, 1
  %2248 = mul i32 %2245, %2247
  %2249 = urem i32 %2248, 2
  %2250 = icmp eq i32 %2249, 0
  %2251 = icmp slt i32 %2246, 10
  %2252 = or i1 %2250, %2251
  br i1 %2252, label %originalBB779, label %originalBB779alteredBB

originalBB779:                                    ; preds = %2244, %originalBB779alteredBB
  store i8 98, i8* %40, align 1, !dbg !1953
  %2253 = load i32, i32* @x.35
  %2254 = load i32, i32* @y.36
  %2255 = sub i32 %2253, 1
  %2256 = mul i32 %2253, %2255
  %2257 = urem i32 %2256, 2
  %2258 = icmp eq i32 %2257, 0
  %2259 = icmp slt i32 %2254, 10
  %2260 = or i1 %2258, %2259
  br i1 %2260, label %originalBBpart2781, label %originalBB779alteredBB

originalBBpart2781:                               ; preds = %originalBB779
  br label %2550, !dbg !1954

2261:                                             ; preds = %originalBBpart2236
  store i8 102, i8* %40, align 1, !dbg !1955
  br label %2550, !dbg !1956

2262:                                             ; preds = %originalBBpart2236
  %2263 = load i32, i32* @x.35
  %2264 = load i32, i32* @y.36
  %2265 = sub i32 %2263, 1
  %2266 = mul i32 %2263, %2265
  %2267 = urem i32 %2266, 2
  %2268 = icmp eq i32 %2267, 0
  %2269 = icmp slt i32 %2264, 10
  %2270 = or i1 %2268, %2269
  br i1 %2270, label %originalBB783, label %originalBB783alteredBB

originalBB783:                                    ; preds = %2262, %originalBB783alteredBB
  store i8 110, i8* %40, align 1, !dbg !1957
  %2271 = load i32, i32* @x.35
  %2272 = load i32, i32* @y.36
  %2273 = sub i32 %2271, 1
  %2274 = mul i32 %2271, %2273
  %2275 = urem i32 %2274, 2
  %2276 = icmp eq i32 %2275, 0
  %2277 = icmp slt i32 %2272, 10
  %2278 = or i1 %2276, %2277
  br i1 %2278, label %originalBBpart2785, label %originalBB783alteredBB

originalBBpart2785:                               ; preds = %originalBB783
  br label %2478, !dbg !1958

2279:                                             ; preds = %originalBBpart2236
  %2280 = load i32, i32* @x.35
  %2281 = load i32, i32* @y.36
  %2282 = sub i32 %2280, 1
  %2283 = mul i32 %2280, %2282
  %2284 = urem i32 %2283, 2
  %2285 = icmp eq i32 %2284, 0
  %2286 = icmp slt i32 %2281, 10
  %2287 = or i1 %2285, %2286
  br i1 %2287, label %originalBB787, label %originalBB787alteredBB

originalBB787:                                    ; preds = %2279, %originalBB787alteredBB
  store i8 114, i8* %40, align 1, !dbg !1959
  %2288 = load i32, i32* @x.35
  %2289 = load i32, i32* @y.36
  %2290 = sub i32 %2288, 1
  %2291 = mul i32 %2288, %2290
  %2292 = urem i32 %2291, 2
  %2293 = icmp eq i32 %2292, 0
  %2294 = icmp slt i32 %2289, 10
  %2295 = or i1 %2293, %2294
  br i1 %2295, label %originalBBpart2789, label %originalBB787alteredBB

originalBBpart2789:                               ; preds = %originalBB787
  br label %2478, !dbg !1960

2296:                                             ; preds = %originalBBpart2236
  %2297 = load i32, i32* @x.35
  %2298 = load i32, i32* @y.36
  %2299 = sub i32 %2297, 1
  %2300 = mul i32 %2297, %2299
  %2301 = urem i32 %2300, 2
  %2302 = icmp eq i32 %2301, 0
  %2303 = icmp slt i32 %2298, 10
  %2304 = or i1 %2302, %2303
  br i1 %2304, label %originalBB791, label %originalBB791alteredBB

originalBB791:                                    ; preds = %2296, %originalBB791alteredBB
  store i8 116, i8* %40, align 1, !dbg !1961
  %2305 = load i32, i32* @x.35
  %2306 = load i32, i32* @y.36
  %2307 = sub i32 %2305, 1
  %2308 = mul i32 %2305, %2307
  %2309 = urem i32 %2308, 2
  %2310 = icmp eq i32 %2309, 0
  %2311 = icmp slt i32 %2306, 10
  %2312 = or i1 %2310, %2311
  br i1 %2312, label %originalBBpart2793, label %originalBB791alteredBB

originalBBpart2793:                               ; preds = %originalBB791
  br label %2478, !dbg !1962

2313:                                             ; preds = %originalBBpart2236
  %2314 = load i32, i32* @x.35
  %2315 = load i32, i32* @y.36
  %2316 = sub i32 %2314, 1
  %2317 = mul i32 %2314, %2316
  %2318 = urem i32 %2317, 2
  %2319 = icmp eq i32 %2318, 0
  %2320 = icmp slt i32 %2315, 10
  %2321 = or i1 %2319, %2320
  br i1 %2321, label %originalBB795, label %originalBB795alteredBB

originalBB795:                                    ; preds = %2313, %originalBB795alteredBB
  store i8 118, i8* %40, align 1, !dbg !1963
  %2322 = load i32, i32* @x.35
  %2323 = load i32, i32* @y.36
  %2324 = sub i32 %2322, 1
  %2325 = mul i32 %2322, %2324
  %2326 = urem i32 %2325, 2
  %2327 = icmp eq i32 %2326, 0
  %2328 = icmp slt i32 %2323, 10
  %2329 = or i1 %2327, %2328
  br i1 %2329, label %originalBBpart2797, label %originalBB795alteredBB

originalBBpart2797:                               ; preds = %originalBB795
  br label %2550, !dbg !1964

2330:                                             ; preds = %originalBBpart2236
  %2331 = load i8, i8* %39, align 1, !dbg !1965
  store i8 %2331, i8* %40, align 1, !dbg !1966
  %2332 = load i32, i32* %23, align 4, !dbg !1967
  %2333 = icmp eq i32 %2332, 2, !dbg !1969
  br i1 %2333, label %2334, label %2387, !dbg !1970

2334:                                             ; preds = %2330
  %2335 = load i32, i32* @x.35
  %2336 = load i32, i32* @y.36
  %2337 = sub i32 %2335, 1
  %2338 = mul i32 %2335, %2337
  %2339 = urem i32 %2338, 2
  %2340 = icmp eq i32 %2339, 0
  %2341 = icmp slt i32 %2336, 10
  %2342 = or i1 %2340, %2341
  br i1 %2342, label %originalBB799, label %originalBB799alteredBB

originalBB799:                                    ; preds = %2334, %originalBB799alteredBB
  %2343 = load i8, i8* %35, align 1, !dbg !1971
  %2344 = trunc i8 %2343 to i1, !dbg !1971
  %2345 = load i32, i32* @x.35
  %2346 = load i32, i32* @y.36
  %2347 = sub i32 %2345, 1
  %2348 = mul i32 %2345, %2347
  %2349 = urem i32 %2348, 2
  %2350 = icmp eq i32 %2349, 0
  %2351 = icmp slt i32 %2346, 10
  %2352 = or i1 %2350, %2351
  br i1 %2352, label %originalBBpart2801, label %originalBB799alteredBB

originalBBpart2801:                               ; preds = %originalBB799
  br i1 %2344, label %2353, label %2370, !dbg !1974

2353:                                             ; preds = %originalBBpart2801
  %2354 = load i32, i32* @x.35
  %2355 = load i32, i32* @y.36
  %2356 = sub i32 %2354, 1
  %2357 = mul i32 %2354, %2356
  %2358 = urem i32 %2357, 2
  %2359 = icmp eq i32 %2358, 0
  %2360 = icmp slt i32 %2355, 10
  %2361 = or i1 %2359, %2360
  br i1 %2361, label %originalBB803, label %originalBB803alteredBB

originalBB803:                                    ; preds = %2353, %originalBB803alteredBB
  %2362 = load i32, i32* @x.35
  %2363 = load i32, i32* @y.36
  %2364 = sub i32 %2362, 1
  %2365 = mul i32 %2362, %2364
  %2366 = urem i32 %2365, 2
  %2367 = icmp eq i32 %2366, 0
  %2368 = icmp slt i32 %2363, 10
  %2369 = or i1 %2367, %2368
  br i1 %2369, label %originalBBpart2805, label %originalBB803alteredBB

originalBBpart2805:                               ; preds = %originalBB803
  br label %6021, !dbg !1975

2370:                                             ; preds = %originalBBpart2801
  %2371 = load i32, i32* @x.35
  %2372 = load i32, i32* @y.36
  %2373 = sub i32 %2371, 1
  %2374 = mul i32 %2371, %2373
  %2375 = urem i32 %2374, 2
  %2376 = icmp eq i32 %2375, 0
  %2377 = icmp slt i32 %2372, 10
  %2378 = or i1 %2376, %2377
  br i1 %2378, label %originalBB807, label %originalBB807alteredBB

originalBB807:                                    ; preds = %2370, %originalBB807alteredBB
  %2379 = load i32, i32* @x.35
  %2380 = load i32, i32* @y.36
  %2381 = sub i32 %2379, 1
  %2382 = mul i32 %2379, %2381
  %2383 = urem i32 %2382, 2
  %2384 = icmp eq i32 %2383, 0
  %2385 = icmp slt i32 %2380, 10
  %2386 = or i1 %2384, %2385
  br i1 %2386, label %originalBBpart2809, label %originalBB807alteredBB

originalBBpart2809:                               ; preds = %originalBB807
  br label %5212, !dbg !1976

2387:                                             ; preds = %2330
  %2388 = load i32, i32* @x.35
  %2389 = load i32, i32* @y.36
  %2390 = sub i32 %2388, 1
  %2391 = mul i32 %2388, %2390
  %2392 = urem i32 %2391, 2
  %2393 = icmp eq i32 %2392, 0
  %2394 = icmp slt i32 %2389, 10
  %2395 = or i1 %2393, %2394
  br i1 %2395, label %originalBB811, label %originalBB811alteredBB

originalBB811:                                    ; preds = %2387, %originalBB811alteredBB
  %2396 = load i8, i8* %33, align 1, !dbg !1977
  %2397 = trunc i8 %2396 to i1, !dbg !1977
  %2398 = load i32, i32* @x.35
  %2399 = load i32, i32* @y.36
  %2400 = sub i32 %2398, 1
  %2401 = mul i32 %2398, %2400
  %2402 = urem i32 %2401, 2
  %2403 = icmp eq i32 %2402, 0
  %2404 = icmp slt i32 %2399, 10
  %2405 = or i1 %2403, %2404
  br i1 %2405, label %originalBBpart2813, label %originalBB811alteredBB

originalBBpart2813:                               ; preds = %originalBB811
  br i1 %2397, label %2406, label %2461, !dbg !1979

2406:                                             ; preds = %originalBBpart2813
  %2407 = load i32, i32* @x.35
  %2408 = load i32, i32* @y.36
  %2409 = sub i32 %2407, 1
  %2410 = mul i32 %2407, %2409
  %2411 = urem i32 %2410, 2
  %2412 = icmp eq i32 %2411, 0
  %2413 = icmp slt i32 %2408, 10
  %2414 = or i1 %2412, %2413
  br i1 %2414, label %originalBB815, label %originalBB815alteredBB

originalBB815:                                    ; preds = %2406, %originalBB815alteredBB
  %2415 = load i8, i8* %35, align 1, !dbg !1980
  %2416 = trunc i8 %2415 to i1, !dbg !1980
  %2417 = load i32, i32* @x.35
  %2418 = load i32, i32* @y.36
  %2419 = sub i32 %2417, 1
  %2420 = mul i32 %2417, %2419
  %2421 = urem i32 %2420, 2
  %2422 = icmp eq i32 %2421, 0
  %2423 = icmp slt i32 %2418, 10
  %2424 = or i1 %2422, %2423
  br i1 %2424, label %originalBBpart2817, label %originalBB815alteredBB

originalBBpart2817:                               ; preds = %originalBB815
  br i1 %2416, label %2425, label %2461, !dbg !1981

2425:                                             ; preds = %originalBBpart2817
  %2426 = load i32, i32* @x.35
  %2427 = load i32, i32* @y.36
  %2428 = sub i32 %2426, 1
  %2429 = mul i32 %2426, %2428
  %2430 = urem i32 %2429, 2
  %2431 = icmp eq i32 %2430, 0
  %2432 = icmp slt i32 %2427, 10
  %2433 = or i1 %2431, %2432
  br i1 %2433, label %originalBB819, label %originalBB819alteredBB

originalBB819:                                    ; preds = %2425, %originalBB819alteredBB
  %2434 = load i64, i64* %32, align 8, !dbg !1982
  %2435 = icmp ne i64 %2434, 0, !dbg !1982
  %2436 = load i32, i32* @x.35
  %2437 = load i32, i32* @y.36
  %2438 = sub i32 %2436, 1
  %2439 = mul i32 %2436, %2438
  %2440 = urem i32 %2439, 2
  %2441 = icmp eq i32 %2440, 0
  %2442 = icmp slt i32 %2437, 10
  %2443 = or i1 %2441, %2442
  br i1 %2443, label %originalBBpart2821, label %originalBB819alteredBB

originalBBpart2821:                               ; preds = %originalBB819
  br i1 %2435, label %2444, label %2461, !dbg !1983

2444:                                             ; preds = %originalBBpart2821
  %2445 = load i32, i32* @x.35
  %2446 = load i32, i32* @y.36
  %2447 = sub i32 %2445, 1
  %2448 = mul i32 %2445, %2447
  %2449 = urem i32 %2448, 2
  %2450 = icmp eq i32 %2449, 0
  %2451 = icmp slt i32 %2446, 10
  %2452 = or i1 %2450, %2451
  br i1 %2452, label %originalBB823, label %originalBB823alteredBB

originalBB823:                                    ; preds = %2444, %originalBB823alteredBB
  %2453 = load i32, i32* @x.35
  %2454 = load i32, i32* @y.36
  %2455 = sub i32 %2453, 1
  %2456 = mul i32 %2453, %2455
  %2457 = urem i32 %2456, 2
  %2458 = icmp eq i32 %2457, 0
  %2459 = icmp slt i32 %2454, 10
  %2460 = or i1 %2458, %2459
  br i1 %2460, label %originalBBpart2825, label %originalBB823alteredBB

originalBBpart2825:                               ; preds = %originalBB823
  br label %5212, !dbg !1984

2461:                                             ; preds = %originalBBpart2821, %originalBBpart2817, %originalBBpart2813
  %2462 = load i32, i32* @x.35
  %2463 = load i32, i32* @y.36
  %2464 = sub i32 %2462, 1
  %2465 = mul i32 %2462, %2464
  %2466 = urem i32 %2465, 2
  %2467 = icmp eq i32 %2466, 0
  %2468 = icmp slt i32 %2463, 10
  %2469 = or i1 %2467, %2468
  br i1 %2469, label %originalBB827, label %originalBB827alteredBB

originalBB827:                                    ; preds = %2461, %originalBB827alteredBB
  %2470 = load i32, i32* @x.35
  %2471 = load i32, i32* @y.36
  %2472 = sub i32 %2470, 1
  %2473 = mul i32 %2470, %2472
  %2474 = urem i32 %2473, 2
  %2475 = icmp eq i32 %2474, 0
  %2476 = icmp slt i32 %2471, 10
  %2477 = or i1 %2475, %2476
  br i1 %2477, label %originalBBpart2829, label %originalBB827alteredBB

originalBBpart2829:                               ; preds = %originalBB827
  br label %2478, !dbg !1982

2478:                                             ; preds = %originalBBpart2829, %originalBBpart2793, %originalBBpart2789, %originalBBpart2785
  call void @llvm.dbg.label(metadata !1985), !dbg !1986
  %2479 = load i32, i32* @x.35
  %2480 = load i32, i32* @y.36
  %2481 = sub i32 %2479, 1
  %2482 = mul i32 %2479, %2481
  %2483 = urem i32 %2482, 2
  %2484 = icmp eq i32 %2483, 0
  %2485 = icmp slt i32 %2480, 10
  %2486 = or i1 %2484, %2485
  br i1 %2486, label %originalBB831, label %originalBB831alteredBB

originalBB831:                                    ; preds = %2478, %originalBB831alteredBB
  %2487 = load i32, i32* %23, align 4, !dbg !1987
  %2488 = icmp eq i32 %2487, 2, !dbg !1989
  %2489 = load i32, i32* @x.35
  %2490 = load i32, i32* @y.36
  %2491 = sub i32 %2489, 1
  %2492 = mul i32 %2489, %2491
  %2493 = urem i32 %2492, 2
  %2494 = icmp eq i32 %2493, 0
  %2495 = icmp slt i32 %2490, 10
  %2496 = or i1 %2494, %2495
  br i1 %2496, label %originalBBpart2833, label %originalBB831alteredBB

originalBBpart2833:                               ; preds = %originalBB831
  br i1 %2488, label %2497, label %2533, !dbg !1990

2497:                                             ; preds = %originalBBpart2833
  %2498 = load i32, i32* @x.35
  %2499 = load i32, i32* @y.36
  %2500 = sub i32 %2498, 1
  %2501 = mul i32 %2498, %2500
  %2502 = urem i32 %2501, 2
  %2503 = icmp eq i32 %2502, 0
  %2504 = icmp slt i32 %2499, 10
  %2505 = or i1 %2503, %2504
  br i1 %2505, label %originalBB835, label %originalBB835alteredBB

originalBB835:                                    ; preds = %2497, %originalBB835alteredBB
  %2506 = load i8, i8* %35, align 1, !dbg !1991
  %2507 = trunc i8 %2506 to i1, !dbg !1991
  %2508 = load i32, i32* @x.35
  %2509 = load i32, i32* @y.36
  %2510 = sub i32 %2508, 1
  %2511 = mul i32 %2508, %2510
  %2512 = urem i32 %2511, 2
  %2513 = icmp eq i32 %2512, 0
  %2514 = icmp slt i32 %2509, 10
  %2515 = or i1 %2513, %2514
  br i1 %2515, label %originalBBpart2837, label %originalBB835alteredBB

originalBBpart2837:                               ; preds = %originalBB835
  br i1 %2507, label %2516, label %2533, !dbg !1992

2516:                                             ; preds = %originalBBpart2837
  %2517 = load i32, i32* @x.35
  %2518 = load i32, i32* @y.36
  %2519 = sub i32 %2517, 1
  %2520 = mul i32 %2517, %2519
  %2521 = urem i32 %2520, 2
  %2522 = icmp eq i32 %2521, 0
  %2523 = icmp slt i32 %2518, 10
  %2524 = or i1 %2522, %2523
  br i1 %2524, label %originalBB839, label %originalBB839alteredBB

originalBB839:                                    ; preds = %2516, %originalBB839alteredBB
  %2525 = load i32, i32* @x.35
  %2526 = load i32, i32* @y.36
  %2527 = sub i32 %2525, 1
  %2528 = mul i32 %2525, %2527
  %2529 = urem i32 %2528, 2
  %2530 = icmp eq i32 %2529, 0
  %2531 = icmp slt i32 %2526, 10
  %2532 = or i1 %2530, %2531
  br i1 %2532, label %originalBBpart2841, label %originalBB839alteredBB

originalBBpart2841:                               ; preds = %originalBB839
  br label %6021, !dbg !1993

2533:                                             ; preds = %originalBBpart2837, %originalBBpart2833
  %2534 = load i32, i32* @x.35
  %2535 = load i32, i32* @y.36
  %2536 = sub i32 %2534, 1
  %2537 = mul i32 %2534, %2536
  %2538 = urem i32 %2537, 2
  %2539 = icmp eq i32 %2538, 0
  %2540 = icmp slt i32 %2535, 10
  %2541 = or i1 %2539, %2540
  br i1 %2541, label %originalBB843, label %originalBB843alteredBB

originalBB843:                                    ; preds = %2533, %originalBB843alteredBB
  %2542 = load i32, i32* @x.35
  %2543 = load i32, i32* @y.36
  %2544 = sub i32 %2542, 1
  %2545 = mul i32 %2542, %2544
  %2546 = urem i32 %2545, 2
  %2547 = icmp eq i32 %2546, 0
  %2548 = icmp slt i32 %2543, 10
  %2549 = or i1 %2547, %2548
  br i1 %2549, label %originalBBpart2845, label %originalBB843alteredBB

originalBBpart2845:                               ; preds = %originalBB843
  br label %2550, !dbg !1991

2550:                                             ; preds = %originalBBpart2845, %originalBBpart2797, %2261, %originalBBpart2781, %originalBBpart2777
  call void @llvm.dbg.label(metadata !1994), !dbg !1995
  %2551 = load i32, i32* @x.35
  %2552 = load i32, i32* @y.36
  %2553 = sub i32 %2551, 1
  %2554 = mul i32 %2551, %2553
  %2555 = urem i32 %2554, 2
  %2556 = icmp eq i32 %2555, 0
  %2557 = icmp slt i32 %2552, 10
  %2558 = or i1 %2556, %2557
  br i1 %2558, label %originalBB847, label %originalBB847alteredBB

originalBB847:                                    ; preds = %2550, %originalBB847alteredBB
  %2559 = load i8, i8* %33, align 1, !dbg !1996
  %2560 = trunc i8 %2559 to i1, !dbg !1996
  %2561 = load i32, i32* @x.35
  %2562 = load i32, i32* @y.36
  %2563 = sub i32 %2561, 1
  %2564 = mul i32 %2561, %2563
  %2565 = urem i32 %2564, 2
  %2566 = icmp eq i32 %2565, 0
  %2567 = icmp slt i32 %2562, 10
  %2568 = or i1 %2566, %2567
  br i1 %2568, label %originalBBpart2849, label %originalBB847alteredBB

originalBBpart2849:                               ; preds = %originalBB847
  br i1 %2560, label %2569, label %2587, !dbg !1998

2569:                                             ; preds = %originalBBpart2849
  %2570 = load i32, i32* @x.35
  %2571 = load i32, i32* @y.36
  %2572 = sub i32 %2570, 1
  %2573 = mul i32 %2570, %2572
  %2574 = urem i32 %2573, 2
  %2575 = icmp eq i32 %2574, 0
  %2576 = icmp slt i32 %2571, 10
  %2577 = or i1 %2575, %2576
  br i1 %2577, label %originalBB851, label %originalBB851alteredBB

originalBB851:                                    ; preds = %2569, %originalBB851alteredBB
  %2578 = load i8, i8* %40, align 1, !dbg !1999
  store i8 %2578, i8* %39, align 1, !dbg !2001
  %2579 = load i32, i32* @x.35
  %2580 = load i32, i32* @y.36
  %2581 = sub i32 %2579, 1
  %2582 = mul i32 %2579, %2581
  %2583 = urem i32 %2582, 2
  %2584 = icmp eq i32 %2583, 0
  %2585 = icmp slt i32 %2580, 10
  %2586 = or i1 %2584, %2585
  br i1 %2586, label %originalBBpart2853, label %originalBB851alteredBB

originalBBpart2853:                               ; preds = %originalBB851
  br label %4846, !dbg !2002

2587:                                             ; preds = %originalBBpart2849
  %2588 = load i32, i32* @x.35
  %2589 = load i32, i32* @y.36
  %2590 = sub i32 %2588, 1
  %2591 = mul i32 %2588, %2590
  %2592 = urem i32 %2591, 2
  %2593 = icmp eq i32 %2592, 0
  %2594 = icmp slt i32 %2589, 10
  %2595 = or i1 %2593, %2594
  br i1 %2595, label %originalBB855, label %originalBB855alteredBB

originalBB855:                                    ; preds = %2587, %originalBB855alteredBB
  %2596 = load i32, i32* @x.35
  %2597 = load i32, i32* @y.36
  %2598 = sub i32 %2596, 1
  %2599 = mul i32 %2596, %2598
  %2600 = urem i32 %2599, 2
  %2601 = icmp eq i32 %2600, 0
  %2602 = icmp slt i32 %2597, 10
  %2603 = or i1 %2601, %2602
  br i1 %2603, label %originalBBpart2857, label %originalBB855alteredBB

originalBBpart2857:                               ; preds = %originalBB855
  br label %4687, !dbg !2003

2604:                                             ; preds = %originalBBpart2236, %originalBBpart2236
  %2605 = load i32, i32* @x.35
  %2606 = load i32, i32* @y.36
  %2607 = sub i32 %2605, 1
  %2608 = mul i32 %2605, %2607
  %2609 = urem i32 %2608, 2
  %2610 = icmp eq i32 %2609, 0
  %2611 = icmp slt i32 %2606, 10
  %2612 = or i1 %2610, %2611
  br i1 %2612, label %originalBB859, label %originalBB859alteredBB

originalBB859:                                    ; preds = %2604, %originalBB859alteredBB
  %2613 = load i64, i64* %22, align 8, !dbg !2004
  %2614 = icmp eq i64 %2613, -1, !dbg !2006
  %2615 = load i32, i32* @x.35
  %2616 = load i32, i32* @y.36
  %2617 = sub i32 %2615, 1
  %2618 = mul i32 %2615, %2617
  %2619 = urem i32 %2618, 2
  %2620 = icmp eq i32 %2619, 0
  %2621 = icmp slt i32 %2616, 10
  %2622 = or i1 %2620, %2621
  br i1 %2622, label %originalBBpart2861, label %originalBB859alteredBB

originalBBpart2861:                               ; preds = %originalBB859
  br i1 %2614, label %2623, label %2645, !dbg !2007

2623:                                             ; preds = %originalBBpart2861
  %2624 = load i32, i32* @x.35
  %2625 = load i32, i32* @y.36
  %2626 = sub i32 %2624, 1
  %2627 = mul i32 %2624, %2626
  %2628 = urem i32 %2627, 2
  %2629 = icmp eq i32 %2628, 0
  %2630 = icmp slt i32 %2625, 10
  %2631 = or i1 %2629, %2630
  br i1 %2631, label %originalBB863, label %originalBB863alteredBB

originalBB863:                                    ; preds = %2623, %originalBB863alteredBB
  %2632 = load i8*, i8** %21, align 8, !dbg !2008
  %2633 = getelementptr inbounds i8, i8* %2632, i64 1, !dbg !2008
  %2634 = load i8, i8* %2633, align 1, !dbg !2008
  %2635 = sext i8 %2634 to i32, !dbg !2008
  %2636 = icmp eq i32 %2635, 0, !dbg !2009
  %2637 = load i32, i32* @x.35
  %2638 = load i32, i32* @y.36
  %2639 = sub i32 %2637, 1
  %2640 = mul i32 %2637, %2639
  %2641 = urem i32 %2640, 2
  %2642 = icmp eq i32 %2641, 0
  %2643 = icmp slt i32 %2638, 10
  %2644 = or i1 %2642, %2643
  br i1 %2644, label %originalBBpart2865, label %originalBB863alteredBB

originalBBpart2865:                               ; preds = %originalBB863
  br i1 %2636, label %2665, label %2648, !dbg !2004

2645:                                             ; preds = %originalBBpart2861
  %2646 = load i64, i64* %22, align 8, !dbg !2010
  %2647 = icmp eq i64 %2646, 1, !dbg !2011
  br i1 %2647, label %2665, label %2648, !dbg !2007

2648:                                             ; preds = %2645, %originalBBpart2865
  %2649 = load i32, i32* @x.35
  %2650 = load i32, i32* @y.36
  %2651 = sub i32 %2649, 1
  %2652 = mul i32 %2649, %2651
  %2653 = urem i32 %2652, 2
  %2654 = icmp eq i32 %2653, 0
  %2655 = icmp slt i32 %2650, 10
  %2656 = or i1 %2654, %2655
  br i1 %2656, label %originalBB867, label %originalBB867alteredBB

originalBB867:                                    ; preds = %2648, %originalBB867alteredBB
  %2657 = load i32, i32* @x.35
  %2658 = load i32, i32* @y.36
  %2659 = sub i32 %2657, 1
  %2660 = mul i32 %2657, %2659
  %2661 = urem i32 %2660, 2
  %2662 = icmp eq i32 %2661, 0
  %2663 = icmp slt i32 %2658, 10
  %2664 = or i1 %2662, %2663
  br i1 %2664, label %originalBBpart2869, label %originalBB867alteredBB

originalBBpart2869:                               ; preds = %originalBB867
  br label %4687, !dbg !2012

2665:                                             ; preds = %2645, %originalBBpart2865
  %2666 = load i32, i32* @x.35
  %2667 = load i32, i32* @y.36
  %2668 = sub i32 %2666, 1
  %2669 = mul i32 %2666, %2668
  %2670 = urem i32 %2669, 2
  %2671 = icmp eq i32 %2670, 0
  %2672 = icmp slt i32 %2667, 10
  %2673 = or i1 %2671, %2672
  br i1 %2673, label %originalBB871, label %originalBB871alteredBB

originalBB871:                                    ; preds = %2665, %originalBB871alteredBB
  %2674 = load i32, i32* @x.35
  %2675 = load i32, i32* @y.36
  %2676 = sub i32 %2674, 1
  %2677 = mul i32 %2674, %2676
  %2678 = urem i32 %2677, 2
  %2679 = icmp eq i32 %2678, 0
  %2680 = icmp slt i32 %2675, 10
  %2681 = or i1 %2679, %2680
  br i1 %2681, label %originalBBpart2873, label %originalBB871alteredBB

originalBBpart2873:                               ; preds = %originalBB871
  br label %2682, !dbg !2013

2682:                                             ; preds = %originalBBpart2873, %originalBBpart2236, %originalBBpart2236
  %2683 = load i64, i64* %28, align 8, !dbg !2014
  %2684 = icmp ne i64 %2683, 0, !dbg !2016
  br i1 %2684, label %2685, label %2702, !dbg !2017

2685:                                             ; preds = %2682
  %2686 = load i32, i32* @x.35
  %2687 = load i32, i32* @y.36
  %2688 = sub i32 %2686, 1
  %2689 = mul i32 %2686, %2688
  %2690 = urem i32 %2689, 2
  %2691 = icmp eq i32 %2690, 0
  %2692 = icmp slt i32 %2687, 10
  %2693 = or i1 %2691, %2692
  br i1 %2693, label %originalBB875, label %originalBB875alteredBB

originalBB875:                                    ; preds = %2685, %originalBB875alteredBB
  %2694 = load i32, i32* @x.35
  %2695 = load i32, i32* @y.36
  %2696 = sub i32 %2694, 1
  %2697 = mul i32 %2694, %2696
  %2698 = urem i32 %2697, 2
  %2699 = icmp eq i32 %2698, 0
  %2700 = icmp slt i32 %2695, 10
  %2701 = or i1 %2699, %2700
  br i1 %2701, label %originalBBpart2877, label %originalBB875alteredBB

originalBBpart2877:                               ; preds = %originalBB875
  br label %4687, !dbg !2018

2702:                                             ; preds = %2682
  %2703 = load i32, i32* @x.35
  %2704 = load i32, i32* @y.36
  %2705 = sub i32 %2703, 1
  %2706 = mul i32 %2703, %2705
  %2707 = urem i32 %2706, 2
  %2708 = icmp eq i32 %2707, 0
  %2709 = icmp slt i32 %2704, 10
  %2710 = or i1 %2708, %2709
  br i1 %2710, label %originalBB879, label %originalBB879alteredBB

originalBB879:                                    ; preds = %2702, %originalBB879alteredBB
  %2711 = load i32, i32* @x.35
  %2712 = load i32, i32* @y.36
  %2713 = sub i32 %2711, 1
  %2714 = mul i32 %2711, %2713
  %2715 = urem i32 %2714, 2
  %2716 = icmp eq i32 %2715, 0
  %2717 = icmp slt i32 %2712, 10
  %2718 = or i1 %2716, %2717
  br i1 %2718, label %originalBBpart2881, label %originalBB879alteredBB

originalBBpart2881:                               ; preds = %originalBB879
  br label %2719, !dbg !2019

2719:                                             ; preds = %originalBBpart2881, %originalBBpart2236
  %2720 = load i32, i32* @x.35
  %2721 = load i32, i32* @y.36
  %2722 = sub i32 %2720, 1
  %2723 = mul i32 %2720, %2722
  %2724 = urem i32 %2723, 2
  %2725 = icmp eq i32 %2724, 0
  %2726 = icmp slt i32 %2721, 10
  %2727 = or i1 %2725, %2726
  br i1 %2727, label %originalBB883, label %originalBB883alteredBB

originalBB883:                                    ; preds = %2719, %originalBB883alteredBB
  store i8 1, i8* %43, align 1, !dbg !2020
  %2728 = load i32, i32* @x.35
  %2729 = load i32, i32* @y.36
  %2730 = sub i32 %2728, 1
  %2731 = mul i32 %2728, %2730
  %2732 = urem i32 %2731, 2
  %2733 = icmp eq i32 %2732, 0
  %2734 = icmp slt i32 %2729, 10
  %2735 = or i1 %2733, %2734
  br i1 %2735, label %originalBBpart2885, label %originalBB883alteredBB

originalBBpart2885:                               ; preds = %originalBB883
  br label %2736, !dbg !2021

2736:                                             ; preds = %originalBBpart2885, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236
  %2737 = load i32, i32* @x.35
  %2738 = load i32, i32* @y.36
  %2739 = sub i32 %2737, 1
  %2740 = mul i32 %2737, %2739
  %2741 = urem i32 %2740, 2
  %2742 = icmp eq i32 %2741, 0
  %2743 = icmp slt i32 %2738, 10
  %2744 = or i1 %2742, %2743
  br i1 %2744, label %originalBB887, label %originalBB887alteredBB

originalBB887:                                    ; preds = %2736, %originalBB887alteredBB
  %2745 = load i32, i32* %23, align 4, !dbg !2022
  %2746 = icmp eq i32 %2745, 2, !dbg !2024
  %2747 = load i32, i32* @x.35
  %2748 = load i32, i32* @y.36
  %2749 = sub i32 %2747, 1
  %2750 = mul i32 %2747, %2749
  %2751 = urem i32 %2750, 2
  %2752 = icmp eq i32 %2751, 0
  %2753 = icmp slt i32 %2748, 10
  %2754 = or i1 %2752, %2753
  br i1 %2754, label %originalBBpart2889, label %originalBB887alteredBB

originalBBpart2889:                               ; preds = %originalBB887
  br i1 %2746, label %2755, label %2775, !dbg !2025

2755:                                             ; preds = %originalBBpart2889
  %2756 = load i32, i32* @x.35
  %2757 = load i32, i32* @y.36
  %2758 = sub i32 %2756, 1
  %2759 = mul i32 %2756, %2758
  %2760 = urem i32 %2759, 2
  %2761 = icmp eq i32 %2760, 0
  %2762 = icmp slt i32 %2757, 10
  %2763 = or i1 %2761, %2762
  br i1 %2763, label %originalBB891, label %originalBB891alteredBB

originalBB891:                                    ; preds = %2755, %originalBB891alteredBB
  %2764 = load i8, i8* %35, align 1, !dbg !2026
  %2765 = trunc i8 %2764 to i1, !dbg !2026
  %2766 = load i32, i32* @x.35
  %2767 = load i32, i32* @y.36
  %2768 = sub i32 %2766, 1
  %2769 = mul i32 %2766, %2768
  %2770 = urem i32 %2769, 2
  %2771 = icmp eq i32 %2770, 0
  %2772 = icmp slt i32 %2767, 10
  %2773 = or i1 %2771, %2772
  br i1 %2773, label %originalBBpart2893, label %originalBB891alteredBB

originalBBpart2893:                               ; preds = %originalBB891
  br i1 %2765, label %2774, label %2775, !dbg !2027

2774:                                             ; preds = %originalBBpart2893
  br label %6021, !dbg !2028

2775:                                             ; preds = %originalBBpart2893, %originalBBpart2889
  %2776 = load i32, i32* @x.35
  %2777 = load i32, i32* @y.36
  %2778 = sub i32 %2776, 1
  %2779 = mul i32 %2776, %2778
  %2780 = urem i32 %2779, 2
  %2781 = icmp eq i32 %2780, 0
  %2782 = icmp slt i32 %2777, 10
  %2783 = or i1 %2781, %2782
  br i1 %2783, label %originalBB895, label %originalBB895alteredBB

originalBB895:                                    ; preds = %2775, %originalBB895alteredBB
  %2784 = load i32, i32* @x.35
  %2785 = load i32, i32* @y.36
  %2786 = sub i32 %2784, 1
  %2787 = mul i32 %2784, %2786
  %2788 = urem i32 %2787, 2
  %2789 = icmp eq i32 %2788, 0
  %2790 = icmp slt i32 %2785, 10
  %2791 = or i1 %2789, %2790
  br i1 %2791, label %originalBBpart2897, label %originalBB895alteredBB

originalBBpart2897:                               ; preds = %originalBB895
  br label %4687, !dbg !2029

2792:                                             ; preds = %originalBBpart2236
  %2793 = load i32, i32* @x.35
  %2794 = load i32, i32* @y.36
  %2795 = sub i32 %2793, 1
  %2796 = mul i32 %2793, %2795
  %2797 = urem i32 %2796, 2
  %2798 = icmp eq i32 %2797, 0
  %2799 = icmp slt i32 %2794, 10
  %2800 = or i1 %2798, %2799
  br i1 %2800, label %originalBB899, label %originalBB899alteredBB

originalBB899:                                    ; preds = %2792, %originalBB899alteredBB
  store i8 1, i8* %37, align 1, !dbg !2030
  store i8 1, i8* %43, align 1, !dbg !2031
  %2801 = load i32, i32* %23, align 4, !dbg !2032
  %2802 = icmp eq i32 %2801, 2, !dbg !2034
  %2803 = load i32, i32* @x.35
  %2804 = load i32, i32* @y.36
  %2805 = sub i32 %2803, 1
  %2806 = mul i32 %2803, %2805
  %2807 = urem i32 %2806, 2
  %2808 = icmp eq i32 %2807, 0
  %2809 = icmp slt i32 %2804, 10
  %2810 = or i1 %2808, %2809
  br i1 %2810, label %originalBBpart2901, label %originalBB899alteredBB

originalBBpart2901:                               ; preds = %originalBB899
  br i1 %2802, label %2811, label %3084, !dbg !2035

2811:                                             ; preds = %originalBBpart2901
  %2812 = load i32, i32* @x.35
  %2813 = load i32, i32* @y.36
  %2814 = sub i32 %2812, 1
  %2815 = mul i32 %2812, %2814
  %2816 = urem i32 %2815, 2
  %2817 = icmp eq i32 %2816, 0
  %2818 = icmp slt i32 %2813, 10
  %2819 = or i1 %2817, %2818
  br i1 %2819, label %originalBB903, label %originalBB903alteredBB

originalBB903:                                    ; preds = %2811, %originalBB903alteredBB
  %2820 = load i8, i8* %35, align 1, !dbg !2036
  %2821 = trunc i8 %2820 to i1, !dbg !2036
  %2822 = load i32, i32* @x.35
  %2823 = load i32, i32* @y.36
  %2824 = sub i32 %2822, 1
  %2825 = mul i32 %2822, %2824
  %2826 = urem i32 %2825, 2
  %2827 = icmp eq i32 %2826, 0
  %2828 = icmp slt i32 %2823, 10
  %2829 = or i1 %2827, %2828
  br i1 %2829, label %originalBBpart2905, label %originalBB903alteredBB

originalBBpart2905:                               ; preds = %originalBB903
  br i1 %2821, label %2830, label %2847, !dbg !2039

2830:                                             ; preds = %originalBBpart2905
  %2831 = load i32, i32* @x.35
  %2832 = load i32, i32* @y.36
  %2833 = sub i32 %2831, 1
  %2834 = mul i32 %2831, %2833
  %2835 = urem i32 %2834, 2
  %2836 = icmp eq i32 %2835, 0
  %2837 = icmp slt i32 %2832, 10
  %2838 = or i1 %2836, %2837
  br i1 %2838, label %originalBB907, label %originalBB907alteredBB

originalBB907:                                    ; preds = %2830, %originalBB907alteredBB
  %2839 = load i32, i32* @x.35
  %2840 = load i32, i32* @y.36
  %2841 = sub i32 %2839, 1
  %2842 = mul i32 %2839, %2841
  %2843 = urem i32 %2842, 2
  %2844 = icmp eq i32 %2843, 0
  %2845 = icmp slt i32 %2840, 10
  %2846 = or i1 %2844, %2845
  br i1 %2846, label %originalBBpart2909, label %originalBB907alteredBB

originalBBpart2909:                               ; preds = %originalBB907
  br label %6021, !dbg !2040

2847:                                             ; preds = %originalBBpart2905
  %2848 = load i64, i64* %20, align 8, !dbg !2041
  %2849 = icmp ne i64 %2848, 0, !dbg !2041
  br i1 %2849, label %2850, label %2871, !dbg !2043

2850:                                             ; preds = %2847
  %2851 = load i32, i32* @x.35
  %2852 = load i32, i32* @y.36
  %2853 = sub i32 %2851, 1
  %2854 = mul i32 %2851, %2853
  %2855 = urem i32 %2854, 2
  %2856 = icmp eq i32 %2855, 0
  %2857 = icmp slt i32 %2852, 10
  %2858 = or i1 %2856, %2857
  br i1 %2858, label %originalBB911, label %originalBB911alteredBB

originalBB911:                                    ; preds = %2850, %originalBB911alteredBB
  %2859 = load i64, i64* %30, align 8, !dbg !2044
  %2860 = icmp ne i64 %2859, 0, !dbg !2044
  %2861 = load i32, i32* @x.35
  %2862 = load i32, i32* @y.36
  %2863 = sub i32 %2861, 1
  %2864 = mul i32 %2861, %2863
  %2865 = urem i32 %2864, 2
  %2866 = icmp eq i32 %2865, 0
  %2867 = icmp slt i32 %2862, 10
  %2868 = or i1 %2866, %2867
  br i1 %2868, label %originalBBpart2913, label %originalBB911alteredBB

originalBBpart2913:                               ; preds = %originalBB911
  br i1 %2860, label %2871, label %2869, !dbg !2045

2869:                                             ; preds = %originalBBpart2913
  %2870 = load i64, i64* %20, align 8, !dbg !2046
  store i64 %2870, i64* %30, align 8, !dbg !2048
  store i64 0, i64* %20, align 8, !dbg !2049
  br label %2871, !dbg !2050

2871:                                             ; preds = %2869, %originalBBpart2913, %2847
  %2872 = load i32, i32* @x.35
  %2873 = load i32, i32* @y.36
  %2874 = sub i32 %2872, 1
  %2875 = mul i32 %2872, %2874
  %2876 = urem i32 %2875, 2
  %2877 = icmp eq i32 %2876, 0
  %2878 = icmp slt i32 %2873, 10
  %2879 = or i1 %2877, %2878
  br i1 %2879, label %originalBB915, label %originalBB915alteredBB

originalBB915:                                    ; preds = %2871, %originalBB915alteredBB
  %2880 = load i32, i32* @x.35
  %2881 = load i32, i32* @y.36
  %2882 = sub i32 %2880, 1
  %2883 = mul i32 %2880, %2882
  %2884 = urem i32 %2883, 2
  %2885 = icmp eq i32 %2884, 0
  %2886 = icmp slt i32 %2881, 10
  %2887 = or i1 %2885, %2886
  br i1 %2887, label %originalBBpart2917, label %originalBB915alteredBB

originalBBpart2917:                               ; preds = %originalBB915
  br label %2888, !dbg !2051

2888:                                             ; preds = %originalBBpart2917
  %2889 = load i32, i32* @x.35
  %2890 = load i32, i32* @y.36
  %2891 = sub i32 %2889, 1
  %2892 = mul i32 %2889, %2891
  %2893 = urem i32 %2892, 2
  %2894 = icmp eq i32 %2893, 0
  %2895 = icmp slt i32 %2890, 10
  %2896 = or i1 %2894, %2895
  br i1 %2896, label %originalBB919, label %originalBB919alteredBB

originalBB919:                                    ; preds = %2888, %originalBB919alteredBB
  %2897 = load i64, i64* %29, align 8, !dbg !2052
  %2898 = load i64, i64* %20, align 8, !dbg !2052
  %2899 = icmp ult i64 %2897, %2898, !dbg !2052
  %2900 = load i32, i32* @x.35
  %2901 = load i32, i32* @y.36
  %2902 = sub i32 %2900, 1
  %2903 = mul i32 %2900, %2902
  %2904 = urem i32 %2903, 2
  %2905 = icmp eq i32 %2904, 0
  %2906 = icmp slt i32 %2901, 10
  %2907 = or i1 %2905, %2906
  br i1 %2907, label %originalBBpart2921, label %originalBB919alteredBB

originalBBpart2921:                               ; preds = %originalBB919
  br i1 %2899, label %2908, label %2928, !dbg !2055

2908:                                             ; preds = %originalBBpart2921
  %2909 = load i32, i32* @x.35
  %2910 = load i32, i32* @y.36
  %2911 = sub i32 %2909, 1
  %2912 = mul i32 %2909, %2911
  %2913 = urem i32 %2912, 2
  %2914 = icmp eq i32 %2913, 0
  %2915 = icmp slt i32 %2910, 10
  %2916 = or i1 %2914, %2915
  br i1 %2916, label %originalBB923, label %originalBB923alteredBB

originalBB923:                                    ; preds = %2908, %originalBB923alteredBB
  %2917 = load i8*, i8** %19, align 8, !dbg !2052
  %2918 = load i64, i64* %29, align 8, !dbg !2052
  %2919 = getelementptr inbounds i8, i8* %2917, i64 %2918, !dbg !2052
  store i8 39, i8* %2919, align 1, !dbg !2052
  %2920 = load i32, i32* @x.35
  %2921 = load i32, i32* @y.36
  %2922 = sub i32 %2920, 1
  %2923 = mul i32 %2920, %2922
  %2924 = urem i32 %2923, 2
  %2925 = icmp eq i32 %2924, 0
  %2926 = icmp slt i32 %2921, 10
  %2927 = or i1 %2925, %2926
  br i1 %2927, label %originalBBpart2925, label %originalBB923alteredBB

originalBBpart2925:                               ; preds = %originalBB923
  br label %2928, !dbg !2052

2928:                                             ; preds = %originalBBpart2925, %originalBBpart2921
  %2929 = load i32, i32* @x.35
  %2930 = load i32, i32* @y.36
  %2931 = sub i32 %2929, 1
  %2932 = mul i32 %2929, %2931
  %2933 = urem i32 %2932, 2
  %2934 = icmp eq i32 %2933, 0
  %2935 = icmp slt i32 %2930, 10
  %2936 = or i1 %2934, %2935
  br i1 %2936, label %originalBB927, label %originalBB927alteredBB

originalBB927:                                    ; preds = %2928, %originalBB927alteredBB
  %2937 = load i64, i64* %29, align 8, !dbg !2055
  %2938 = add i64 %2937, 1, !dbg !2055
  store i64 %2938, i64* %29, align 8, !dbg !2055
  %2939 = load i32, i32* @x.35
  %2940 = load i32, i32* @y.36
  %2941 = sub i32 %2939, 1
  %2942 = mul i32 %2939, %2941
  %2943 = urem i32 %2942, 2
  %2944 = icmp eq i32 %2943, 0
  %2945 = icmp slt i32 %2940, 10
  %2946 = or i1 %2944, %2945
  br i1 %2946, label %originalBBpart2931, label %originalBB927alteredBB

originalBBpart2931:                               ; preds = %originalBB927
  br label %2947, !dbg !2055

2947:                                             ; preds = %originalBBpart2931
  br label %2948, !dbg !2056

2948:                                             ; preds = %2947
  %2949 = load i64, i64* %29, align 8, !dbg !2057
  %2950 = load i64, i64* %20, align 8, !dbg !2057
  %2951 = icmp ult i64 %2949, %2950, !dbg !2057
  br i1 %2951, label %2952, label %2972, !dbg !2060

2952:                                             ; preds = %2948
  %2953 = load i32, i32* @x.35
  %2954 = load i32, i32* @y.36
  %2955 = sub i32 %2953, 1
  %2956 = mul i32 %2953, %2955
  %2957 = urem i32 %2956, 2
  %2958 = icmp eq i32 %2957, 0
  %2959 = icmp slt i32 %2954, 10
  %2960 = or i1 %2958, %2959
  br i1 %2960, label %originalBB933, label %originalBB933alteredBB

originalBB933:                                    ; preds = %2952, %originalBB933alteredBB
  %2961 = load i8*, i8** %19, align 8, !dbg !2057
  %2962 = load i64, i64* %29, align 8, !dbg !2057
  %2963 = getelementptr inbounds i8, i8* %2961, i64 %2962, !dbg !2057
  store i8 92, i8* %2963, align 1, !dbg !2057
  %2964 = load i32, i32* @x.35
  %2965 = load i32, i32* @y.36
  %2966 = sub i32 %2964, 1
  %2967 = mul i32 %2964, %2966
  %2968 = urem i32 %2967, 2
  %2969 = icmp eq i32 %2968, 0
  %2970 = icmp slt i32 %2965, 10
  %2971 = or i1 %2969, %2970
  br i1 %2971, label %originalBBpart2935, label %originalBB933alteredBB

originalBBpart2935:                               ; preds = %originalBB933
  br label %2972, !dbg !2057

2972:                                             ; preds = %originalBBpart2935, %2948
  %2973 = load i32, i32* @x.35
  %2974 = load i32, i32* @y.36
  %2975 = sub i32 %2973, 1
  %2976 = mul i32 %2973, %2975
  %2977 = urem i32 %2976, 2
  %2978 = icmp eq i32 %2977, 0
  %2979 = icmp slt i32 %2974, 10
  %2980 = or i1 %2978, %2979
  br i1 %2980, label %originalBB937, label %originalBB937alteredBB

originalBB937:                                    ; preds = %2972, %originalBB937alteredBB
  %2981 = load i64, i64* %29, align 8, !dbg !2060
  %2982 = add i64 %2981, 1, !dbg !2060
  store i64 %2982, i64* %29, align 8, !dbg !2060
  %2983 = load i32, i32* @x.35
  %2984 = load i32, i32* @y.36
  %2985 = sub i32 %2983, 1
  %2986 = mul i32 %2983, %2985
  %2987 = urem i32 %2986, 2
  %2988 = icmp eq i32 %2987, 0
  %2989 = icmp slt i32 %2984, 10
  %2990 = or i1 %2988, %2989
  br i1 %2990, label %originalBBpart2943, label %originalBB937alteredBB

originalBBpart2943:                               ; preds = %originalBB937
  br label %2991, !dbg !2060

2991:                                             ; preds = %originalBBpart2943
  %2992 = load i32, i32* @x.35
  %2993 = load i32, i32* @y.36
  %2994 = sub i32 %2992, 1
  %2995 = mul i32 %2992, %2994
  %2996 = urem i32 %2995, 2
  %2997 = icmp eq i32 %2996, 0
  %2998 = icmp slt i32 %2993, 10
  %2999 = or i1 %2997, %2998
  br i1 %2999, label %originalBB945, label %originalBB945alteredBB

originalBB945:                                    ; preds = %2991, %originalBB945alteredBB
  %3000 = load i32, i32* @x.35
  %3001 = load i32, i32* @y.36
  %3002 = sub i32 %3000, 1
  %3003 = mul i32 %3000, %3002
  %3004 = urem i32 %3003, 2
  %3005 = icmp eq i32 %3004, 0
  %3006 = icmp slt i32 %3001, 10
  %3007 = or i1 %3005, %3006
  br i1 %3007, label %originalBBpart2947, label %originalBB945alteredBB

originalBBpart2947:                               ; preds = %originalBB945
  br label %3008, !dbg !2061

3008:                                             ; preds = %originalBBpart2947
  %3009 = load i32, i32* @x.35
  %3010 = load i32, i32* @y.36
  %3011 = sub i32 %3009, 1
  %3012 = mul i32 %3009, %3011
  %3013 = urem i32 %3012, 2
  %3014 = icmp eq i32 %3013, 0
  %3015 = icmp slt i32 %3010, 10
  %3016 = or i1 %3014, %3015
  br i1 %3016, label %originalBB949, label %originalBB949alteredBB

originalBB949:                                    ; preds = %3008, %originalBB949alteredBB
  %3017 = load i64, i64* %29, align 8, !dbg !2062
  %3018 = load i64, i64* %20, align 8, !dbg !2062
  %3019 = icmp ult i64 %3017, %3018, !dbg !2062
  %3020 = load i32, i32* @x.35
  %3021 = load i32, i32* @y.36
  %3022 = sub i32 %3020, 1
  %3023 = mul i32 %3020, %3022
  %3024 = urem i32 %3023, 2
  %3025 = icmp eq i32 %3024, 0
  %3026 = icmp slt i32 %3021, 10
  %3027 = or i1 %3025, %3026
  br i1 %3027, label %originalBBpart2951, label %originalBB949alteredBB

originalBBpart2951:                               ; preds = %originalBB949
  br i1 %3019, label %3028, label %3048, !dbg !2065

3028:                                             ; preds = %originalBBpart2951
  %3029 = load i32, i32* @x.35
  %3030 = load i32, i32* @y.36
  %3031 = sub i32 %3029, 1
  %3032 = mul i32 %3029, %3031
  %3033 = urem i32 %3032, 2
  %3034 = icmp eq i32 %3033, 0
  %3035 = icmp slt i32 %3030, 10
  %3036 = or i1 %3034, %3035
  br i1 %3036, label %originalBB953, label %originalBB953alteredBB

originalBB953:                                    ; preds = %3028, %originalBB953alteredBB
  %3037 = load i8*, i8** %19, align 8, !dbg !2062
  %3038 = load i64, i64* %29, align 8, !dbg !2062
  %3039 = getelementptr inbounds i8, i8* %3037, i64 %3038, !dbg !2062
  store i8 39, i8* %3039, align 1, !dbg !2062
  %3040 = load i32, i32* @x.35
  %3041 = load i32, i32* @y.36
  %3042 = sub i32 %3040, 1
  %3043 = mul i32 %3040, %3042
  %3044 = urem i32 %3043, 2
  %3045 = icmp eq i32 %3044, 0
  %3046 = icmp slt i32 %3041, 10
  %3047 = or i1 %3045, %3046
  br i1 %3047, label %originalBBpart2955, label %originalBB953alteredBB

originalBBpart2955:                               ; preds = %originalBB953
  br label %3048, !dbg !2062

3048:                                             ; preds = %originalBBpart2955, %originalBBpart2951
  %3049 = load i32, i32* @x.35
  %3050 = load i32, i32* @y.36
  %3051 = sub i32 %3049, 1
  %3052 = mul i32 %3049, %3051
  %3053 = urem i32 %3052, 2
  %3054 = icmp eq i32 %3053, 0
  %3055 = icmp slt i32 %3050, 10
  %3056 = or i1 %3054, %3055
  br i1 %3056, label %originalBB957, label %originalBB957alteredBB

originalBB957:                                    ; preds = %3048, %originalBB957alteredBB
  %3057 = load i64, i64* %29, align 8, !dbg !2065
  %3058 = add i64 %3057, 1, !dbg !2065
  store i64 %3058, i64* %29, align 8, !dbg !2065
  %3059 = load i32, i32* @x.35
  %3060 = load i32, i32* @y.36
  %3061 = sub i32 %3059, 1
  %3062 = mul i32 %3059, %3061
  %3063 = urem i32 %3062, 2
  %3064 = icmp eq i32 %3063, 0
  %3065 = icmp slt i32 %3060, 10
  %3066 = or i1 %3064, %3065
  br i1 %3066, label %originalBBpart2966, label %originalBB957alteredBB

originalBBpart2966:                               ; preds = %originalBB957
  br label %3067, !dbg !2065

3067:                                             ; preds = %originalBBpart2966
  %3068 = load i32, i32* @x.35
  %3069 = load i32, i32* @y.36
  %3070 = sub i32 %3068, 1
  %3071 = mul i32 %3068, %3070
  %3072 = urem i32 %3071, 2
  %3073 = icmp eq i32 %3072, 0
  %3074 = icmp slt i32 %3069, 10
  %3075 = or i1 %3073, %3074
  br i1 %3075, label %originalBB968, label %originalBB968alteredBB

originalBB968:                                    ; preds = %3067, %originalBB968alteredBB
  store i8 0, i8* %36, align 1, !dbg !2066
  %3076 = load i32, i32* @x.35
  %3077 = load i32, i32* @y.36
  %3078 = sub i32 %3076, 1
  %3079 = mul i32 %3076, %3078
  %3080 = urem i32 %3079, 2
  %3081 = icmp eq i32 %3080, 0
  %3082 = icmp slt i32 %3077, 10
  %3083 = or i1 %3081, %3082
  br i1 %3083, label %originalBBpart2970, label %originalBB968alteredBB

originalBBpart2970:                               ; preds = %originalBB968
  br label %3084, !dbg !2067

3084:                                             ; preds = %originalBBpart2970, %originalBBpart2901
  %3085 = load i32, i32* @x.35
  %3086 = load i32, i32* @y.36
  %3087 = sub i32 %3085, 1
  %3088 = mul i32 %3085, %3087
  %3089 = urem i32 %3088, 2
  %3090 = icmp eq i32 %3089, 0
  %3091 = icmp slt i32 %3086, 10
  %3092 = or i1 %3090, %3091
  br i1 %3092, label %originalBB972, label %originalBB972alteredBB

originalBB972:                                    ; preds = %3084, %originalBB972alteredBB
  %3093 = load i32, i32* @x.35
  %3094 = load i32, i32* @y.36
  %3095 = sub i32 %3093, 1
  %3096 = mul i32 %3093, %3095
  %3097 = urem i32 %3096, 2
  %3098 = icmp eq i32 %3097, 0
  %3099 = icmp slt i32 %3094, 10
  %3100 = or i1 %3098, %3099
  br i1 %3100, label %originalBBpart2974, label %originalBB972alteredBB

originalBBpart2974:                               ; preds = %originalBB972
  br label %4687, !dbg !2068

3101:                                             ; preds = %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236, %originalBBpart2236
  store i8 1, i8* %43, align 1, !dbg !2069
  br label %4687, !dbg !2070

3102:                                             ; preds = %originalBBpart2236
  call void @llvm.dbg.declare(metadata i64* %44, metadata !2071, metadata !DIExpression()), !dbg !2073
  call void @llvm.dbg.declare(metadata i8* %45, metadata !2074, metadata !DIExpression()), !dbg !2075
  %3103 = load i8, i8* %34, align 1, !dbg !2076
  %3104 = trunc i8 %3103 to i1, !dbg !2076
  br i1 %3104, label %3105, label %3133, !dbg !2078

3105:                                             ; preds = %3102
  %3106 = load i32, i32* @x.35
  %3107 = load i32, i32* @y.36
  %3108 = sub i32 %3106, 1
  %3109 = mul i32 %3106, %3108
  %3110 = urem i32 %3109, 2
  %3111 = icmp eq i32 %3110, 0
  %3112 = icmp slt i32 %3107, 10
  %3113 = or i1 %3111, %3112
  br i1 %3113, label %originalBB976, label %originalBB976alteredBB

originalBB976:                                    ; preds = %3105, %originalBB976alteredBB
  store i64 1, i64* %44, align 8, !dbg !2079
  %3114 = call i16** @__ctype_b_loc() #15, !dbg !2081
  %3115 = load i16*, i16** %3114, align 8, !dbg !2081
  %3116 = load i8, i8* %39, align 1, !dbg !2081
  %3117 = zext i8 %3116 to i32, !dbg !2081
  %3118 = sext i32 %3117 to i64, !dbg !2081
  %3119 = getelementptr inbounds i16, i16* %3115, i64 %3118, !dbg !2081
  %3120 = load i16, i16* %3119, align 2, !dbg !2081
  %3121 = zext i16 %3120 to i32, !dbg !2081
  %3122 = and i32 %3121, 16384, !dbg !2081
  %3123 = icmp ne i32 %3122, 0, !dbg !2082
  %3124 = zext i1 %3123 to i8, !dbg !2083
  store i8 %3124, i8* %45, align 1, !dbg !2083
  %3125 = load i32, i32* @x.35
  %3126 = load i32, i32* @y.36
  %3127 = sub i32 %3125, 1
  %3128 = mul i32 %3125, %3127
  %3129 = urem i32 %3128, 2
  %3130 = icmp eq i32 %3129, 0
  %3131 = icmp slt i32 %3126, 10
  %3132 = or i1 %3130, %3131
  br i1 %3132, label %originalBBpart2984, label %originalBB976alteredBB

originalBBpart2984:                               ; preds = %originalBB976
  br label %3734, !dbg !2084

3133:                                             ; preds = %3102
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t* %46, metadata !2085, metadata !DIExpression()), !dbg !2102
  %3134 = bitcast %struct.__mbstate_t* %46 to i8*, !dbg !2103
  call void @llvm.memset.p0i8.i64(i8* align 4 %3134, i8 0, i64 8, i1 false), !dbg !2103
  store i64 0, i64* %44, align 8, !dbg !2104
  store i8 1, i8* %45, align 1, !dbg !2105
  %3135 = load i64, i64* %22, align 8, !dbg !2106
  %3136 = trunc i64 %3135 to i32
  %3137 = mul i32 %3136, -2
  %3138 = mul i32 %3137, %3137
  %3139 = sub i32 %3138, %3137
  %3140 = srem i32 %3139, 2
  %3141 = icmp ne i32 %3140, 0
  br i1 %3141, label %3142, label %3143

3142:                                             ; preds = %3133
  ret i64 0

3143:                                             ; preds = %3133
  %3144 = load i32, i32* @x.35
  %3145 = load i32, i32* @y.36
  %3146 = sub i32 %3144, 1
  %3147 = mul i32 %3144, %3146
  %3148 = urem i32 %3147, 2
  %3149 = icmp eq i32 %3148, 0
  %3150 = icmp slt i32 %3145, 10
  %3151 = or i1 %3149, %3150
  br i1 %3151, label %originalBB986, label %originalBB986alteredBB

originalBB986:                                    ; preds = %3143, %originalBB986alteredBB
  %3152 = icmp eq i64 %3135, -1, !dbg !2108
  %3153 = load i32, i32* @x.35
  %3154 = load i32, i32* @y.36
  %3155 = sub i32 %3153, 1
  %3156 = mul i32 %3153, %3155
  %3157 = urem i32 %3156, 2
  %3158 = icmp eq i32 %3157, 0
  %3159 = icmp slt i32 %3154, 10
  %3160 = or i1 %3158, %3159
  br i1 %3160, label %originalBBpart2988, label %originalBB986alteredBB

originalBBpart2988:                               ; preds = %originalBB986
  br i1 %3152, label %3161, label %3180, !dbg !2109

3161:                                             ; preds = %originalBBpart2988
  %3162 = load i32, i32* @x.35
  %3163 = load i32, i32* @y.36
  %3164 = sub i32 %3162, 1
  %3165 = mul i32 %3162, %3164
  %3166 = urem i32 %3165, 2
  %3167 = icmp eq i32 %3166, 0
  %3168 = icmp slt i32 %3163, 10
  %3169 = or i1 %3167, %3168
  br i1 %3169, label %originalBB990, label %originalBB990alteredBB

originalBB990:                                    ; preds = %3161, %originalBB990alteredBB
  %3170 = load i8*, i8** %21, align 8, !dbg !2110
  %3171 = call i64 @strlen(i8* %3170) #13, !dbg !2111
  store i64 %3171, i64* %22, align 8, !dbg !2112
  %3172 = load i32, i32* @x.35
  %3173 = load i32, i32* @y.36
  %3174 = sub i32 %3172, 1
  %3175 = mul i32 %3172, %3174
  %3176 = urem i32 %3175, 2
  %3177 = icmp eq i32 %3176, 0
  %3178 = icmp slt i32 %3173, 10
  %3179 = or i1 %3177, %3178
  br i1 %3179, label %originalBBpart2992, label %originalBB990alteredBB

originalBBpart2992:                               ; preds = %originalBB990
  br label %3180, !dbg !2113

3180:                                             ; preds = %originalBBpart2992, %originalBBpart2988
  %3181 = load i32, i32* @x.35
  %3182 = load i32, i32* @y.36
  %3183 = sub i32 %3181, 1
  %3184 = mul i32 %3181, %3183
  %3185 = urem i32 %3184, 2
  %3186 = icmp eq i32 %3185, 0
  %3187 = icmp slt i32 %3182, 10
  %3188 = or i1 %3186, %3187
  br i1 %3188, label %originalBB994, label %originalBB994alteredBB

originalBB994:                                    ; preds = %3180, %originalBB994alteredBB
  %3189 = load i32, i32* @x.35
  %3190 = load i32, i32* @y.36
  %3191 = sub i32 %3189, 1
  %3192 = mul i32 %3189, %3191
  %3193 = urem i32 %3192, 2
  %3194 = icmp eq i32 %3193, 0
  %3195 = icmp slt i32 %3190, 10
  %3196 = or i1 %3194, %3195
  br i1 %3196, label %originalBBpart2996, label %originalBB994alteredBB

originalBBpart2996:                               ; preds = %originalBB994
  br label %3197, !dbg !2114

3197:                                             ; preds = %originalBBpart21182, %originalBBpart2996
  call void @llvm.dbg.declare(metadata i32* %47, metadata !2115, metadata !DIExpression()), !dbg !2118
  call void @llvm.dbg.declare(metadata i64* %48, metadata !2119, metadata !DIExpression()), !dbg !2120
  %3198 = load i32, i32* @x.35
  %3199 = load i32, i32* @y.36
  %3200 = sub i32 %3198, 1
  %3201 = mul i32 %3198, %3200
  %3202 = urem i32 %3201, 2
  %3203 = icmp eq i32 %3202, 0
  %3204 = icmp slt i32 %3199, 10
  %3205 = or i1 %3203, %3204
  br i1 %3205, label %originalBB998, label %originalBB998alteredBB

originalBB998:                                    ; preds = %3197, %originalBB998alteredBB
  %3206 = load i8*, i8** %21, align 8, !dbg !2121
  %3207 = load i64, i64* %28, align 8, !dbg !2122
  %3208 = load i64, i64* %44, align 8, !dbg !2123
  %3209 = add i64 %3207, %3208, !dbg !2124
  %3210 = getelementptr inbounds i8, i8* %3206, i64 %3209, !dbg !2121
  %3211 = load i64, i64* %22, align 8, !dbg !2125
  %3212 = load i64, i64* %28, align 8, !dbg !2126
  %3213 = load i64, i64* %44, align 8, !dbg !2127
  %3214 = add i64 %3212, %3213, !dbg !2128
  %3215 = sub i64 %3211, %3214, !dbg !2129
  %3216 = call i64 @rpl_mbrtowc(i32* %47, i8* %3210, i64 %3215, %struct.__mbstate_t* %46), !dbg !2130
  store i64 %3216, i64* %48, align 8, !dbg !2120
  %3217 = load i64, i64* %48, align 8, !dbg !2131
  %3218 = icmp eq i64 %3217, 0, !dbg !2133
  %3219 = load i32, i32* @x.35
  %3220 = load i32, i32* @y.36
  %3221 = sub i32 %3219, 1
  %3222 = mul i32 %3219, %3221
  %3223 = urem i32 %3222, 2
  %3224 = icmp eq i32 %3223, 0
  %3225 = icmp slt i32 %3220, 10
  %3226 = or i1 %3224, %3225
  br i1 %3226, label %originalBBpart21023, label %originalBB998alteredBB

originalBBpart21023:                              ; preds = %originalBB998
  br i1 %3218, label %3227, label %3244, !dbg !2134

3227:                                             ; preds = %originalBBpart21023
  %3228 = load i32, i32* @x.35
  %3229 = load i32, i32* @y.36
  %3230 = sub i32 %3228, 1
  %3231 = mul i32 %3228, %3230
  %3232 = urem i32 %3231, 2
  %3233 = icmp eq i32 %3232, 0
  %3234 = icmp slt i32 %3229, 10
  %3235 = or i1 %3233, %3234
  br i1 %3235, label %originalBB1025, label %originalBB1025alteredBB

originalBB1025:                                   ; preds = %3227, %originalBB1025alteredBB
  %3236 = load i32, i32* @x.35
  %3237 = load i32, i32* @y.36
  %3238 = sub i32 %3236, 1
  %3239 = mul i32 %3236, %3238
  %3240 = urem i32 %3239, 2
  %3241 = icmp eq i32 %3240, 0
  %3242 = icmp slt i32 %3237, 10
  %3243 = or i1 %3241, %3242
  br i1 %3243, label %originalBBpart21027, label %originalBB1025alteredBB

originalBBpart21027:                              ; preds = %originalBB1025
  br label %3717, !dbg !2135

3244:                                             ; preds = %originalBBpart21023
  %3245 = load i32, i32* @x.35
  %3246 = load i32, i32* @y.36
  %3247 = sub i32 %3245, 1
  %3248 = mul i32 %3245, %3247
  %3249 = urem i32 %3248, 2
  %3250 = icmp eq i32 %3249, 0
  %3251 = icmp slt i32 %3246, 10
  %3252 = or i1 %3250, %3251
  br i1 %3252, label %originalBB1029, label %originalBB1029alteredBB

originalBB1029:                                   ; preds = %3244, %originalBB1029alteredBB
  %3253 = load i64, i64* %48, align 8, !dbg !2136
  %3254 = icmp eq i64 %3253, -1, !dbg !2138
  %3255 = load i32, i32* @x.35
  %3256 = load i32, i32* @y.36
  %3257 = sub i32 %3255, 1
  %3258 = mul i32 %3255, %3257
  %3259 = urem i32 %3258, 2
  %3260 = icmp eq i32 %3259, 0
  %3261 = icmp slt i32 %3256, 10
  %3262 = or i1 %3260, %3261
  br i1 %3262, label %originalBBpart21031, label %originalBB1029alteredBB

originalBBpart21031:                              ; preds = %originalBB1029
  br i1 %3254, label %3263, label %3280, !dbg !2139

3263:                                             ; preds = %originalBBpart21031
  %3264 = load i32, i32* @x.35
  %3265 = load i32, i32* @y.36
  %3266 = sub i32 %3264, 1
  %3267 = mul i32 %3264, %3266
  %3268 = urem i32 %3267, 2
  %3269 = icmp eq i32 %3268, 0
  %3270 = icmp slt i32 %3265, 10
  %3271 = or i1 %3269, %3270
  br i1 %3271, label %originalBB1033, label %originalBB1033alteredBB

originalBB1033:                                   ; preds = %3263, %originalBB1033alteredBB
  store i8 0, i8* %45, align 1, !dbg !2140
  %3272 = load i32, i32* @x.35
  %3273 = load i32, i32* @y.36
  %3274 = sub i32 %3272, 1
  %3275 = mul i32 %3272, %3274
  %3276 = urem i32 %3275, 2
  %3277 = icmp eq i32 %3276, 0
  %3278 = icmp slt i32 %3273, 10
  %3279 = or i1 %3277, %3278
  br i1 %3279, label %originalBBpart21035, label %originalBB1033alteredBB

originalBBpart21035:                              ; preds = %originalBB1033
  br label %3717, !dbg !2142

3280:                                             ; preds = %originalBBpart21031
  %3281 = load i32, i32* @x.35
  %3282 = load i32, i32* @y.36
  %3283 = sub i32 %3281, 1
  %3284 = mul i32 %3281, %3283
  %3285 = urem i32 %3284, 2
  %3286 = icmp eq i32 %3285, 0
  %3287 = icmp slt i32 %3282, 10
  %3288 = or i1 %3286, %3287
  br i1 %3288, label %originalBB1037, label %originalBB1037alteredBB

originalBB1037:                                   ; preds = %3280, %originalBB1037alteredBB
  %3289 = load i64, i64* %48, align 8, !dbg !2143
  %3290 = icmp eq i64 %3289, -2, !dbg !2145
  %3291 = load i32, i32* @x.35
  %3292 = load i32, i32* @y.36
  %3293 = sub i32 %3291, 1
  %3294 = mul i32 %3291, %3293
  %3295 = urem i32 %3294, 2
  %3296 = icmp eq i32 %3295, 0
  %3297 = icmp slt i32 %3292, 10
  %3298 = or i1 %3296, %3297
  br i1 %3298, label %originalBBpart21039, label %originalBB1037alteredBB

originalBBpart21039:                              ; preds = %originalBB1037
  br i1 %3290, label %3299, label %3417, !dbg !2146

3299:                                             ; preds = %originalBBpart21039
  %3300 = load i32, i32* @x.35
  %3301 = load i32, i32* @y.36
  %3302 = sub i32 %3300, 1
  %3303 = mul i32 %3300, %3302
  %3304 = urem i32 %3303, 2
  %3305 = icmp eq i32 %3304, 0
  %3306 = icmp slt i32 %3301, 10
  %3307 = or i1 %3305, %3306
  br i1 %3307, label %originalBB1041, label %originalBB1041alteredBB

originalBB1041:                                   ; preds = %3299, %originalBB1041alteredBB
  store i8 0, i8* %45, align 1, !dbg !2147
  %3308 = load i32, i32* @x.35
  %3309 = load i32, i32* @y.36
  %3310 = sub i32 %3308, 1
  %3311 = mul i32 %3308, %3310
  %3312 = urem i32 %3311, 2
  %3313 = icmp eq i32 %3312, 0
  %3314 = icmp slt i32 %3309, 10
  %3315 = or i1 %3313, %3314
  br i1 %3315, label %originalBBpart21043, label %originalBB1041alteredBB

originalBBpart21043:                              ; preds = %originalBB1041
  br label %3316, !dbg !2149

3316:                                             ; preds = %originalBBpart21075, %originalBBpart21043
  %3317 = load i32, i32* @x.35
  %3318 = load i32, i32* @y.36
  %3319 = sub i32 %3317, 1
  %3320 = mul i32 %3317, %3319
  %3321 = urem i32 %3320, 2
  %3322 = icmp eq i32 %3321, 0
  %3323 = icmp slt i32 %3318, 10
  %3324 = or i1 %3322, %3323
  br i1 %3324, label %originalBB1045, label %originalBB1045alteredBB

originalBB1045:                                   ; preds = %3316, %originalBB1045alteredBB
  %3325 = load i64, i64* %28, align 8, !dbg !2150
  %3326 = load i64, i64* %44, align 8, !dbg !2151
  %3327 = add i64 %3325, %3326, !dbg !2152
  %3328 = load i64, i64* %22, align 8, !dbg !2153
  %3329 = icmp ult i64 %3327, %3328, !dbg !2154
  %3330 = load i32, i32* @x.35
  %3331 = load i32, i32* @y.36
  %3332 = sub i32 %3330, 1
  %3333 = mul i32 %3330, %3332
  %3334 = urem i32 %3333, 2
  %3335 = icmp eq i32 %3334, 0
  %3336 = icmp slt i32 %3331, 10
  %3337 = or i1 %3335, %3336
  br i1 %3337, label %originalBBpart21059, label %originalBB1045alteredBB

originalBBpart21059:                              ; preds = %originalBB1045
  br i1 %3329, label %3338, label %3363, !dbg !2155

3338:                                             ; preds = %originalBBpart21059
  %3339 = load i32, i32* @x.35
  %3340 = load i32, i32* @y.36
  %3341 = sub i32 %3339, 1
  %3342 = mul i32 %3339, %3341
  %3343 = urem i32 %3342, 2
  %3344 = icmp eq i32 %3343, 0
  %3345 = icmp slt i32 %3340, 10
  %3346 = or i1 %3344, %3345
  br i1 %3346, label %originalBB1061, label %originalBB1061alteredBB

originalBB1061:                                   ; preds = %3338, %originalBB1061alteredBB
  %3347 = load i8*, i8** %21, align 8, !dbg !2156
  %3348 = load i64, i64* %28, align 8, !dbg !2157
  %3349 = load i64, i64* %44, align 8, !dbg !2158
  %3350 = add i64 %3348, %3349, !dbg !2159
  %3351 = getelementptr inbounds i8, i8* %3347, i64 %3350, !dbg !2156
  %3352 = load i8, i8* %3351, align 1, !dbg !2156
  %3353 = sext i8 %3352 to i32, !dbg !2156
  %3354 = icmp ne i32 %3353, 0, !dbg !2155
  %3355 = load i32, i32* @x.35
  %3356 = load i32, i32* @y.36
  %3357 = sub i32 %3355, 1
  %3358 = mul i32 %3355, %3357
  %3359 = urem i32 %3358, 2
  %3360 = icmp eq i32 %3359, 0
  %3361 = icmp slt i32 %3356, 10
  %3362 = or i1 %3360, %3361
  br i1 %3362, label %originalBBpart21063, label %originalBB1061alteredBB

originalBBpart21063:                              ; preds = %originalBB1061
  br label %3363

3363:                                             ; preds = %originalBBpart21063, %originalBBpart21059
  %3364 = phi i1 [ false, %originalBBpart21059 ], [ %3354, %originalBBpart21063 ], !dbg !2160
  %3365 = load i32, i32* @x.35
  %3366 = load i32, i32* @y.36
  %3367 = sub i32 %3365, 1
  %3368 = mul i32 %3365, %3367
  %3369 = urem i32 %3368, 2
  %3370 = icmp eq i32 %3369, 0
  %3371 = icmp slt i32 %3366, 10
  %3372 = or i1 %3370, %3371
  br i1 %3372, label %originalBB1065, label %originalBB1065alteredBB

originalBB1065:                                   ; preds = %3363, %originalBB1065alteredBB
  %3373 = load i32, i32* @x.35
  %3374 = load i32, i32* @y.36
  %3375 = sub i32 %3373, 1
  %3376 = mul i32 %3373, %3375
  %3377 = urem i32 %3376, 2
  %3378 = icmp eq i32 %3377, 0
  %3379 = icmp slt i32 %3374, 10
  %3380 = or i1 %3378, %3379
  br i1 %3380, label %originalBBpart21067, label %originalBB1065alteredBB

originalBBpart21067:                              ; preds = %originalBB1065
  br i1 %3364, label %3381, label %3400, !dbg !2149

3381:                                             ; preds = %originalBBpart21067
  %3382 = load i32, i32* @x.35
  %3383 = load i32, i32* @y.36
  %3384 = sub i32 %3382, 1
  %3385 = mul i32 %3382, %3384
  %3386 = urem i32 %3385, 2
  %3387 = icmp eq i32 %3386, 0
  %3388 = icmp slt i32 %3383, 10
  %3389 = or i1 %3387, %3388
  br i1 %3389, label %originalBB1069, label %originalBB1069alteredBB

originalBB1069:                                   ; preds = %3381, %originalBB1069alteredBB
  %3390 = load i64, i64* %44, align 8, !dbg !2161
  %3391 = add i64 %3390, 1, !dbg !2161
  store i64 %3391, i64* %44, align 8, !dbg !2161
  %3392 = load i32, i32* @x.35
  %3393 = load i32, i32* @y.36
  %3394 = sub i32 %3392, 1
  %3395 = mul i32 %3392, %3394
  %3396 = urem i32 %3395, 2
  %3397 = icmp eq i32 %3396, 0
  %3398 = icmp slt i32 %3393, 10
  %3399 = or i1 %3397, %3398
  br i1 %3399, label %originalBBpart21075, label %originalBB1069alteredBB

originalBBpart21075:                              ; preds = %originalBB1069
  br label %3316, !dbg !2149, !llvm.loop !2162

3400:                                             ; preds = %originalBBpart21067
  %3401 = load i32, i32* @x.35
  %3402 = load i32, i32* @y.36
  %3403 = sub i32 %3401, 1
  %3404 = mul i32 %3401, %3403
  %3405 = urem i32 %3404, 2
  %3406 = icmp eq i32 %3405, 0
  %3407 = icmp slt i32 %3402, 10
  %3408 = or i1 %3406, %3407
  br i1 %3408, label %originalBB1077, label %originalBB1077alteredBB

originalBB1077:                                   ; preds = %3400, %originalBB1077alteredBB
  %3409 = load i32, i32* @x.35
  %3410 = load i32, i32* @y.36
  %3411 = sub i32 %3409, 1
  %3412 = mul i32 %3409, %3411
  %3413 = urem i32 %3412, 2
  %3414 = icmp eq i32 %3413, 0
  %3415 = icmp slt i32 %3410, 10
  %3416 = or i1 %3414, %3415
  br i1 %3416, label %originalBBpart21079, label %originalBB1077alteredBB

originalBBpart21079:                              ; preds = %originalBB1077
  br label %3717, !dbg !2163

3417:                                             ; preds = %originalBBpart21039
  %3418 = load i32, i32* @x.35
  %3419 = load i32, i32* @y.36
  %3420 = sub i32 %3418, 1
  %3421 = mul i32 %3418, %3420
  %3422 = urem i32 %3421, 2
  %3423 = icmp eq i32 %3422, 0
  %3424 = icmp slt i32 %3419, 10
  %3425 = or i1 %3423, %3424
  br i1 %3425, label %originalBB1081, label %originalBB1081alteredBB

originalBB1081:                                   ; preds = %3417, %originalBB1081alteredBB
  %3426 = load i8, i8* %35, align 1, !dbg !2164
  %3427 = trunc i8 %3426 to i1, !dbg !2164
  %3428 = load i32, i32* @x.35
  %3429 = load i32, i32* @y.36
  %3430 = sub i32 %3428, 1
  %3431 = mul i32 %3428, %3430
  %3432 = urem i32 %3431, 2
  %3433 = icmp eq i32 %3432, 0
  %3434 = icmp slt i32 %3429, 10
  %3435 = or i1 %3433, %3434
  br i1 %3435, label %originalBBpart21083, label %originalBB1081alteredBB

originalBBpart21083:                              ; preds = %originalBB1081
  br i1 %3427, label %3436, label %3589, !dbg !2167

3436:                                             ; preds = %originalBBpart21083
  %3437 = load i32, i32* @x.35
  %3438 = load i32, i32* @y.36
  %3439 = sub i32 %3437, 1
  %3440 = mul i32 %3437, %3439
  %3441 = urem i32 %3440, 2
  %3442 = icmp eq i32 %3441, 0
  %3443 = icmp slt i32 %3438, 10
  %3444 = or i1 %3442, %3443
  br i1 %3444, label %originalBB1085, label %originalBB1085alteredBB

originalBB1085:                                   ; preds = %3436, %originalBB1085alteredBB
  %3445 = load i32, i32* %23, align 4, !dbg !2168
  %3446 = icmp eq i32 %3445, 2, !dbg !2169
  %3447 = load i32, i32* @x.35
  %3448 = load i32, i32* @y.36
  %3449 = sub i32 %3447, 1
  %3450 = mul i32 %3447, %3449
  %3451 = urem i32 %3450, 2
  %3452 = icmp eq i32 %3451, 0
  %3453 = icmp slt i32 %3448, 10
  %3454 = or i1 %3452, %3453
  br i1 %3454, label %originalBBpart21087, label %originalBB1085alteredBB

originalBBpart21087:                              ; preds = %originalBB1085
  br i1 %3446, label %3455, label %3589, !dbg !2170

3455:                                             ; preds = %originalBBpart21087
  call void @llvm.dbg.declare(metadata i64* %49, metadata !2171, metadata !DIExpression()), !dbg !2173
  %3456 = load i32, i32* @x.35
  %3457 = load i32, i32* @y.36
  %3458 = sub i32 %3456, 1
  %3459 = mul i32 %3456, %3458
  %3460 = urem i32 %3459, 2
  %3461 = icmp eq i32 %3460, 0
  %3462 = icmp slt i32 %3457, 10
  %3463 = or i1 %3461, %3462
  br i1 %3463, label %originalBB1089, label %originalBB1089alteredBB

originalBB1089:                                   ; preds = %3455, %originalBB1089alteredBB
  store i64 1, i64* %49, align 8, !dbg !2174
  %3464 = load i32, i32* @x.35
  %3465 = load i32, i32* @y.36
  %3466 = sub i32 %3464, 1
  %3467 = mul i32 %3464, %3466
  %3468 = urem i32 %3467, 2
  %3469 = icmp eq i32 %3468, 0
  %3470 = icmp slt i32 %3465, 10
  %3471 = or i1 %3469, %3470
  br i1 %3471, label %originalBBpart21091, label %originalBB1089alteredBB

originalBBpart21091:                              ; preds = %originalBB1089
  br label %3472, !dbg !2176

3472:                                             ; preds = %originalBBpart21135, %originalBBpart21091
  %3473 = load i32, i32* @x.35
  %3474 = load i32, i32* @y.36
  %3475 = sub i32 %3473, 1
  %3476 = mul i32 %3473, %3475
  %3477 = urem i32 %3476, 2
  %3478 = icmp eq i32 %3477, 0
  %3479 = icmp slt i32 %3474, 10
  %3480 = or i1 %3478, %3479
  br i1 %3480, label %originalBB1093, label %originalBB1093alteredBB

originalBB1093:                                   ; preds = %3472, %originalBB1093alteredBB
  %3481 = load i64, i64* %49, align 8, !dbg !2177
  %3482 = load i64, i64* %48, align 8, !dbg !2179
  %3483 = icmp ult i64 %3481, %3482, !dbg !2180
  %3484 = load i32, i32* @x.35
  %3485 = load i32, i32* @y.36
  %3486 = sub i32 %3484, 1
  %3487 = mul i32 %3484, %3486
  %3488 = urem i32 %3487, 2
  %3489 = icmp eq i32 %3488, 0
  %3490 = icmp slt i32 %3485, 10
  %3491 = or i1 %3489, %3490
  br i1 %3491, label %originalBBpart21095, label %originalBB1093alteredBB

originalBBpart21095:                              ; preds = %originalBB1093
  br i1 %3483, label %3492, label %3588, !dbg !2181

3492:                                             ; preds = %originalBBpart21095
  %3493 = load i32, i32* @x.35
  %3494 = load i32, i32* @y.36
  %3495 = sub i32 %3493, 1
  %3496 = mul i32 %3493, %3495
  %3497 = urem i32 %3496, 2
  %3498 = icmp eq i32 %3497, 0
  %3499 = icmp slt i32 %3494, 10
  %3500 = or i1 %3498, %3499
  br i1 %3500, label %originalBB1097, label %originalBB1097alteredBB

originalBB1097:                                   ; preds = %3492, %originalBB1097alteredBB
  %3501 = load i8*, i8** %21, align 8, !dbg !2182
  %3502 = load i64, i64* %28, align 8, !dbg !2183
  %3503 = load i64, i64* %44, align 8, !dbg !2184
  %3504 = add i64 %3502, %3503, !dbg !2185
  %3505 = load i64, i64* %49, align 8, !dbg !2186
  %3506 = add i64 %3504, %3505, !dbg !2187
  %3507 = getelementptr inbounds i8, i8* %3501, i64 %3506, !dbg !2182
  %3508 = load i8, i8* %3507, align 1, !dbg !2182
  %3509 = sext i8 %3508 to i32, !dbg !2182
  %3510 = load i32, i32* @x.35
  %3511 = load i32, i32* @y.36
  %3512 = sub i32 %3510, 1
  %3513 = mul i32 %3510, %3512
  %3514 = urem i32 %3513, 2
  %3515 = icmp eq i32 %3514, 0
  %3516 = icmp slt i32 %3511, 10
  %3517 = or i1 %3515, %3516
  br i1 %3517, label %originalBBpart21110, label %originalBB1097alteredBB

originalBBpart21110:                              ; preds = %originalBB1097
  switch i32 %3509, label %3535 [
    i32 91, label %3518
    i32 92, label %3518
    i32 94, label %3518
    i32 96, label %3518
    i32 124, label %3518
  ], !dbg !2188

3518:                                             ; preds = %originalBBpart21110, %originalBBpart21110, %originalBBpart21110, %originalBBpart21110, %originalBBpart21110
  %3519 = load i32, i32* @x.35
  %3520 = load i32, i32* @y.36
  %3521 = sub i32 %3519, 1
  %3522 = mul i32 %3519, %3521
  %3523 = urem i32 %3522, 2
  %3524 = icmp eq i32 %3523, 0
  %3525 = icmp slt i32 %3520, 10
  %3526 = or i1 %3524, %3525
  br i1 %3526, label %originalBB1112, label %originalBB1112alteredBB

originalBB1112:                                   ; preds = %3518, %originalBB1112alteredBB
  %3527 = load i32, i32* @x.35
  %3528 = load i32, i32* @y.36
  %3529 = sub i32 %3527, 1
  %3530 = mul i32 %3527, %3529
  %3531 = urem i32 %3530, 2
  %3532 = icmp eq i32 %3531, 0
  %3533 = icmp slt i32 %3528, 10
  %3534 = or i1 %3532, %3533
  br i1 %3534, label %originalBBpart21114, label %originalBB1112alteredBB

originalBBpart21114:                              ; preds = %originalBB1112
  br label %6021, !dbg !2189

3535:                                             ; preds = %originalBBpart21110
  %3536 = load i32, i32* @x.35
  %3537 = load i32, i32* @y.36
  %3538 = sub i32 %3536, 1
  %3539 = mul i32 %3536, %3538
  %3540 = urem i32 %3539, 2
  %3541 = icmp eq i32 %3540, 0
  %3542 = icmp slt i32 %3537, 10
  %3543 = or i1 %3541, %3542
  br i1 %3543, label %originalBB1116, label %originalBB1116alteredBB

originalBB1116:                                   ; preds = %3535, %originalBB1116alteredBB
  %3544 = load i32, i32* @x.35
  %3545 = load i32, i32* @y.36
  %3546 = sub i32 %3544, 1
  %3547 = mul i32 %3544, %3546
  %3548 = urem i32 %3547, 2
  %3549 = icmp eq i32 %3548, 0
  %3550 = icmp slt i32 %3545, 10
  %3551 = or i1 %3549, %3550
  br i1 %3551, label %originalBBpart21118, label %originalBB1116alteredBB

originalBBpart21118:                              ; preds = %originalBB1116
  br label %3552, !dbg !2191

3552:                                             ; preds = %originalBBpart21118
  %3553 = load i32, i32* @x.35
  %3554 = load i32, i32* @y.36
  %3555 = sub i32 %3553, 1
  %3556 = mul i32 %3553, %3555
  %3557 = urem i32 %3556, 2
  %3558 = icmp eq i32 %3557, 0
  %3559 = icmp slt i32 %3554, 10
  %3560 = or i1 %3558, %3559
  br i1 %3560, label %originalBB1120, label %originalBB1120alteredBB

originalBB1120:                                   ; preds = %3552, %originalBB1120alteredBB
  %3561 = load i32, i32* @x.35
  %3562 = load i32, i32* @y.36
  %3563 = sub i32 %3561, 1
  %3564 = mul i32 %3561, %3563
  %3565 = urem i32 %3564, 2
  %3566 = icmp eq i32 %3565, 0
  %3567 = icmp slt i32 %3562, 10
  %3568 = or i1 %3566, %3567
  br i1 %3568, label %originalBBpart21122, label %originalBB1120alteredBB

originalBBpart21122:                              ; preds = %originalBB1120
  br label %3569, !dbg !2192

3569:                                             ; preds = %originalBBpart21122
  %3570 = load i32, i32* @x.35
  %3571 = load i32, i32* @y.36
  %3572 = sub i32 %3570, 1
  %3573 = mul i32 %3570, %3572
  %3574 = urem i32 %3573, 2
  %3575 = icmp eq i32 %3574, 0
  %3576 = icmp slt i32 %3571, 10
  %3577 = or i1 %3575, %3576
  br i1 %3577, label %originalBB1124, label %originalBB1124alteredBB

originalBB1124:                                   ; preds = %3569, %originalBB1124alteredBB
  %3578 = load i64, i64* %49, align 8, !dbg !2193
  %3579 = add i64 %3578, 1, !dbg !2193
  store i64 %3579, i64* %49, align 8, !dbg !2193
  %3580 = load i32, i32* @x.35
  %3581 = load i32, i32* @y.36
  %3582 = sub i32 %3580, 1
  %3583 = mul i32 %3580, %3582
  %3584 = urem i32 %3583, 2
  %3585 = icmp eq i32 %3584, 0
  %3586 = icmp slt i32 %3581, 10
  %3587 = or i1 %3585, %3586
  br i1 %3587, label %originalBBpart21135, label %originalBB1124alteredBB

originalBBpart21135:                              ; preds = %originalBB1124
  br label %3472, !dbg !2194, !llvm.loop !2195

3588:                                             ; preds = %originalBBpart21095
  br label %3589, !dbg !2197

3589:                                             ; preds = %3588, %originalBBpart21087, %originalBBpart21083
  %3590 = load i32, i32* @x.35
  %3591 = load i32, i32* @y.36
  %3592 = sub i32 %3590, 1
  %3593 = mul i32 %3590, %3592
  %3594 = urem i32 %3593, 2
  %3595 = icmp eq i32 %3594, 0
  %3596 = icmp slt i32 %3591, 10
  %3597 = or i1 %3595, %3596
  br i1 %3597, label %originalBB1137, label %originalBB1137alteredBB

originalBB1137:                                   ; preds = %3589, %originalBB1137alteredBB
  %3598 = load i32, i32* %47, align 4, !dbg !2198
  %3599 = call i32 @iswprint(i32 %3598) #10, !dbg !2200
  %3600 = icmp ne i32 %3599, 0, !dbg !2200
  %3601 = load i32, i32* @x.35
  %3602 = load i32, i32* @y.36
  %3603 = sub i32 %3601, 1
  %3604 = mul i32 %3601, %3603
  %3605 = urem i32 %3604, 2
  %3606 = icmp eq i32 %3605, 0
  %3607 = icmp slt i32 %3602, 10
  %3608 = or i1 %3606, %3607
  br i1 %3608, label %originalBBpart21139, label %originalBB1137alteredBB

originalBBpart21139:                              ; preds = %originalBB1137
  br i1 %3600, label %3626, label %3609, !dbg !2201

3609:                                             ; preds = %originalBBpart21139
  %3610 = load i32, i32* @x.35
  %3611 = load i32, i32* @y.36
  %3612 = sub i32 %3610, 1
  %3613 = mul i32 %3610, %3612
  %3614 = urem i32 %3613, 2
  %3615 = icmp eq i32 %3614, 0
  %3616 = icmp slt i32 %3611, 10
  %3617 = or i1 %3615, %3616
  br i1 %3617, label %originalBB1141, label %originalBB1141alteredBB

originalBB1141:                                   ; preds = %3609, %originalBB1141alteredBB
  store i8 0, i8* %45, align 1, !dbg !2202
  %3618 = load i32, i32* @x.35
  %3619 = load i32, i32* @y.36
  %3620 = sub i32 %3618, 1
  %3621 = mul i32 %3618, %3620
  %3622 = urem i32 %3621, 2
  %3623 = icmp eq i32 %3622, 0
  %3624 = icmp slt i32 %3619, 10
  %3625 = or i1 %3623, %3624
  br i1 %3625, label %originalBBpart21143, label %originalBB1141alteredBB

originalBBpart21143:                              ; preds = %originalBB1141
  br label %3626, !dbg !2203

3626:                                             ; preds = %originalBBpart21143, %originalBBpart21139
  %3627 = load i32, i32* @x.35
  %3628 = load i32, i32* @y.36
  %3629 = sub i32 %3627, 1
  %3630 = mul i32 %3627, %3629
  %3631 = urem i32 %3630, 2
  %3632 = icmp eq i32 %3631, 0
  %3633 = icmp slt i32 %3628, 10
  %3634 = or i1 %3632, %3633
  br i1 %3634, label %originalBB1145, label %originalBB1145alteredBB

originalBB1145:                                   ; preds = %3626, %originalBB1145alteredBB
  %3635 = load i64, i64* %48, align 8, !dbg !2204
  %3636 = load i64, i64* %44, align 8, !dbg !2205
  %3637 = add i64 %3636, %3635, !dbg !2205
  store i64 %3637, i64* %44, align 8, !dbg !2205
  %3638 = load i32, i32* @x.35
  %3639 = load i32, i32* @y.36
  %3640 = sub i32 %3638, 1
  %3641 = mul i32 %3638, %3640
  %3642 = urem i32 %3641, 2
  %3643 = icmp eq i32 %3642, 0
  %3644 = icmp slt i32 %3639, 10
  %3645 = or i1 %3643, %3644
  br i1 %3645, label %originalBBpart21155, label %originalBB1145alteredBB

originalBBpart21155:                              ; preds = %originalBB1145
  br label %3646

3646:                                             ; preds = %originalBBpart21155
  %3647 = load i32, i32* @x.35
  %3648 = load i32, i32* @y.36
  %3649 = sub i32 %3647, 1
  %3650 = mul i32 %3647, %3649
  %3651 = urem i32 %3650, 2
  %3652 = icmp eq i32 %3651, 0
  %3653 = icmp slt i32 %3648, 10
  %3654 = or i1 %3652, %3653
  br i1 %3654, label %originalBB1157, label %originalBB1157alteredBB

originalBB1157:                                   ; preds = %3646, %originalBB1157alteredBB
  %3655 = load i32, i32* @x.35
  %3656 = load i32, i32* @y.36
  %3657 = sub i32 %3655, 1
  %3658 = mul i32 %3655, %3657
  %3659 = urem i32 %3658, 2
  %3660 = icmp eq i32 %3659, 0
  %3661 = icmp slt i32 %3656, 10
  %3662 = or i1 %3660, %3661
  br i1 %3662, label %originalBBpart21159, label %originalBB1157alteredBB

originalBBpart21159:                              ; preds = %originalBB1157
  br label %3663

3663:                                             ; preds = %originalBBpart21159
  %3664 = load i32, i32* @x.35
  %3665 = load i32, i32* @y.36
  %3666 = sub i32 %3664, 1
  %3667 = mul i32 %3664, %3666
  %3668 = urem i32 %3667, 2
  %3669 = icmp eq i32 %3668, 0
  %3670 = icmp slt i32 %3665, 10
  %3671 = or i1 %3669, %3670
  br i1 %3671, label %originalBB1161, label %originalBB1161alteredBB

originalBB1161:                                   ; preds = %3663, %originalBB1161alteredBB
  %3672 = load i32, i32* @x.35
  %3673 = load i32, i32* @y.36
  %3674 = sub i32 %3672, 1
  %3675 = mul i32 %3672, %3674
  %3676 = urem i32 %3675, 2
  %3677 = icmp eq i32 %3676, 0
  %3678 = icmp slt i32 %3673, 10
  %3679 = or i1 %3677, %3678
  br i1 %3679, label %originalBBpart21163, label %originalBB1161alteredBB

originalBBpart21163:                              ; preds = %originalBB1161
  br label %3680

3680:                                             ; preds = %originalBBpart21163
  %3681 = load i32, i32* @x.35
  %3682 = load i32, i32* @y.36
  %3683 = sub i32 %3681, 1
  %3684 = mul i32 %3681, %3683
  %3685 = urem i32 %3684, 2
  %3686 = icmp eq i32 %3685, 0
  %3687 = icmp slt i32 %3682, 10
  %3688 = or i1 %3686, %3687
  br i1 %3688, label %originalBB1165, label %originalBB1165alteredBB

originalBB1165:                                   ; preds = %3680, %originalBB1165alteredBB
  %3689 = load i32, i32* @x.35
  %3690 = load i32, i32* @y.36
  %3691 = sub i32 %3689, 1
  %3692 = mul i32 %3689, %3691
  %3693 = urem i32 %3692, 2
  %3694 = icmp eq i32 %3693, 0
  %3695 = icmp slt i32 %3690, 10
  %3696 = or i1 %3694, %3695
  br i1 %3696, label %originalBBpart21167, label %originalBB1165alteredBB

originalBBpart21167:                              ; preds = %originalBB1165
  br label %3697, !dbg !2206

3697:                                             ; preds = %originalBBpart21167
  %3698 = load i32, i32* @x.35
  %3699 = load i32, i32* @y.36
  %3700 = sub i32 %3698, 1
  %3701 = mul i32 %3698, %3700
  %3702 = urem i32 %3701, 2
  %3703 = icmp eq i32 %3702, 0
  %3704 = icmp slt i32 %3699, 10
  %3705 = or i1 %3703, %3704
  br i1 %3705, label %originalBB1169, label %originalBB1169alteredBB

originalBB1169:                                   ; preds = %3697, %originalBB1169alteredBB
  %3706 = call i32 @mbsinit(%struct.__mbstate_t* %46) #13, !dbg !2207
  %3707 = icmp ne i32 %3706, 0, !dbg !2208
  %3708 = xor i1 %3707, true, !dbg !2208
  %3709 = load i32, i32* @x.35
  %3710 = load i32, i32* @y.36
  %3711 = sub i32 %3709, 1
  %3712 = mul i32 %3709, %3711
  %3713 = urem i32 %3712, 2
  %3714 = icmp eq i32 %3713, 0
  %3715 = icmp slt i32 %3710, 10
  %3716 = or i1 %3714, %3715
  br i1 %3716, label %originalBBpart21182, label %originalBB1169alteredBB

originalBBpart21182:                              ; preds = %originalBB1169
  br i1 %3708, label %3197, label %3717, !dbg !2206, !llvm.loop !2209

3717:                                             ; preds = %originalBBpart21182, %originalBBpart21079, %originalBBpart21035, %originalBBpart21027
  %3718 = load i32, i32* @x.35
  %3719 = load i32, i32* @y.36
  %3720 = sub i32 %3718, 1
  %3721 = mul i32 %3718, %3720
  %3722 = urem i32 %3721, 2
  %3723 = icmp eq i32 %3722, 0
  %3724 = icmp slt i32 %3719, 10
  %3725 = or i1 %3723, %3724
  br i1 %3725, label %originalBB1184, label %originalBB1184alteredBB

originalBB1184:                                   ; preds = %3717, %originalBB1184alteredBB
  %3726 = load i32, i32* @x.35
  %3727 = load i32, i32* @y.36
  %3728 = sub i32 %3726, 1
  %3729 = mul i32 %3726, %3728
  %3730 = urem i32 %3729, 2
  %3731 = icmp eq i32 %3730, 0
  %3732 = icmp slt i32 %3727, 10
  %3733 = or i1 %3731, %3732
  br i1 %3733, label %originalBBpart21186, label %originalBB1184alteredBB

originalBBpart21186:                              ; preds = %originalBB1184
  br label %3734

3734:                                             ; preds = %originalBBpart21186, %originalBBpart2984
  %3735 = load i8, i8* %45, align 1, !dbg !2211
  %3736 = trunc i8 %3735 to i1, !dbg !2211
  %3737 = zext i1 %3736 to i8, !dbg !2212
  store i8 %3737, i8* %43, align 1, !dbg !2212
  %3738 = load i64, i64* %44, align 8, !dbg !2213
  %3739 = icmp ult i64 1, %3738, !dbg !2215
  br i1 %3739, label %3762, label %3740, !dbg !2216

3740:                                             ; preds = %3734
  %3741 = load i8, i8* %33, align 1, !dbg !2217
  %3742 = trunc i8 %3741 to i1, !dbg !2217
  br i1 %3742, label %3743, label %4670, !dbg !2218

3743:                                             ; preds = %3740
  %3744 = load i32, i32* @x.35
  %3745 = load i32, i32* @y.36
  %3746 = sub i32 %3744, 1
  %3747 = mul i32 %3744, %3746
  %3748 = urem i32 %3747, 2
  %3749 = icmp eq i32 %3748, 0
  %3750 = icmp slt i32 %3745, 10
  %3751 = or i1 %3749, %3750
  br i1 %3751, label %originalBB1188, label %originalBB1188alteredBB

originalBB1188:                                   ; preds = %3743, %originalBB1188alteredBB
  %3752 = load i8, i8* %45, align 1, !dbg !2219
  %3753 = trunc i8 %3752 to i1, !dbg !2219
  %3754 = load i32, i32* @x.35
  %3755 = load i32, i32* @y.36
  %3756 = sub i32 %3754, 1
  %3757 = mul i32 %3754, %3756
  %3758 = urem i32 %3757, 2
  %3759 = icmp eq i32 %3758, 0
  %3760 = icmp slt i32 %3755, 10
  %3761 = or i1 %3759, %3760
  br i1 %3761, label %originalBBpart21190, label %originalBB1188alteredBB

originalBBpart21190:                              ; preds = %originalBB1188
  br i1 %3753, label %4670, label %3762, !dbg !2220

3762:                                             ; preds = %originalBBpart21190, %3734
  call void @llvm.dbg.declare(metadata i64* %50, metadata !2221, metadata !DIExpression()), !dbg !2223
  %3763 = load i32, i32* @x.35
  %3764 = load i32, i32* @y.36
  %3765 = sub i32 %3763, 1
  %3766 = mul i32 %3763, %3765
  %3767 = urem i32 %3766, 2
  %3768 = icmp eq i32 %3767, 0
  %3769 = icmp slt i32 %3764, 10
  %3770 = or i1 %3768, %3769
  br i1 %3770, label %originalBB1192, label %originalBB1192alteredBB

originalBB1192:                                   ; preds = %3762, %originalBB1192alteredBB
  %3771 = load i64, i64* %28, align 8, !dbg !2224
  %3772 = load i64, i64* %44, align 8, !dbg !2225
  %3773 = add i64 %3771, %3772, !dbg !2226
  store i64 %3773, i64* %50, align 8, !dbg !2223
  %3774 = load i32, i32* @x.35
  %3775 = load i32, i32* @y.36
  %3776 = sub i32 %3774, 1
  %3777 = mul i32 %3774, %3776
  %3778 = urem i32 %3777, 2
  %3779 = icmp eq i32 %3778, 0
  %3780 = icmp slt i32 %3775, 10
  %3781 = or i1 %3779, %3780
  br i1 %3781, label %originalBBpart21194, label %originalBB1192alteredBB

originalBBpart21194:                              ; preds = %originalBB1192
  br label %3782, !dbg !2227

3782:                                             ; preds = %4647, %originalBBpart21194
  %3783 = load i32, i32* @x.35
  %3784 = load i32, i32* @y.36
  %3785 = sub i32 %3783, 1
  %3786 = mul i32 %3783, %3785
  %3787 = urem i32 %3786, 2
  %3788 = icmp eq i32 %3787, 0
  %3789 = icmp slt i32 %3784, 10
  %3790 = or i1 %3788, %3789
  br i1 %3790, label %originalBB1196, label %originalBB1196alteredBB

originalBB1196:                                   ; preds = %3782, %originalBB1196alteredBB
  %3791 = load i8, i8* %33, align 1, !dbg !2228
  %3792 = trunc i8 %3791 to i1, !dbg !2228
  %3793 = load i32, i32* @x.35
  %3794 = load i32, i32* @y.36
  %3795 = sub i32 %3793, 1
  %3796 = mul i32 %3793, %3795
  %3797 = urem i32 %3796, 2
  %3798 = icmp eq i32 %3797, 0
  %3799 = icmp slt i32 %3794, 10
  %3800 = or i1 %3798, %3799
  br i1 %3800, label %originalBBpart21198, label %originalBB1196alteredBB

originalBBpart21198:                              ; preds = %originalBB1196
  br i1 %3792, label %3801, label %4338, !dbg !2233

3801:                                             ; preds = %originalBBpart21198
  %3802 = load i32, i32* @x.35
  %3803 = load i32, i32* @y.36
  %3804 = sub i32 %3802, 1
  %3805 = mul i32 %3802, %3804
  %3806 = urem i32 %3805, 2
  %3807 = icmp eq i32 %3806, 0
  %3808 = icmp slt i32 %3803, 10
  %3809 = or i1 %3807, %3808
  br i1 %3809, label %originalBB1200, label %originalBB1200alteredBB

originalBB1200:                                   ; preds = %3801, %originalBB1200alteredBB
  %3810 = load i8, i8* %45, align 1, !dbg !2234
  %3811 = trunc i8 %3810 to i1, !dbg !2234
  %3812 = load i32, i32* @x.35
  %3813 = load i32, i32* @y.36
  %3814 = sub i32 %3812, 1
  %3815 = mul i32 %3812, %3814
  %3816 = urem i32 %3815, 2
  %3817 = icmp eq i32 %3816, 0
  %3818 = icmp slt i32 %3813, 10
  %3819 = or i1 %3817, %3818
  br i1 %3819, label %originalBBpart21202, label %originalBB1200alteredBB

originalBBpart21202:                              ; preds = %originalBB1200
  br i1 %3811, label %4338, label %3820, !dbg !2235

3820:                                             ; preds = %originalBBpart21202
  %3821 = load i32, i32* @x.35
  %3822 = load i32, i32* @y.36
  %3823 = sub i32 %3821, 1
  %3824 = mul i32 %3821, %3823
  %3825 = urem i32 %3824, 2
  %3826 = icmp eq i32 %3825, 0
  %3827 = icmp slt i32 %3822, 10
  %3828 = or i1 %3826, %3827
  br i1 %3828, label %originalBB1204, label %originalBB1204alteredBB

originalBB1204:                                   ; preds = %3820, %originalBB1204alteredBB
  %3829 = load i32, i32* @x.35
  %3830 = load i32, i32* @y.36
  %3831 = sub i32 %3829, 1
  %3832 = mul i32 %3829, %3831
  %3833 = urem i32 %3832, 2
  %3834 = icmp eq i32 %3833, 0
  %3835 = icmp slt i32 %3830, 10
  %3836 = or i1 %3834, %3835
  br i1 %3836, label %originalBBpart21206, label %originalBB1204alteredBB

originalBBpart21206:                              ; preds = %originalBB1204
  br label %3837, !dbg !2236

3837:                                             ; preds = %originalBBpart21206
  %3838 = load i32, i32* @x.35
  %3839 = load i32, i32* @y.36
  %3840 = sub i32 %3838, 1
  %3841 = mul i32 %3838, %3840
  %3842 = urem i32 %3841, 2
  %3843 = icmp eq i32 %3842, 0
  %3844 = icmp slt i32 %3839, 10
  %3845 = or i1 %3843, %3844
  br i1 %3845, label %originalBB1208, label %originalBB1208alteredBB

originalBB1208:                                   ; preds = %3837, %originalBB1208alteredBB
  %3846 = load i8, i8* %35, align 1, !dbg !2238
  %3847 = trunc i8 %3846 to i1, !dbg !2238
  %3848 = load i32, i32* @x.35
  %3849 = load i32, i32* @y.36
  %3850 = sub i32 %3848, 1
  %3851 = mul i32 %3848, %3850
  %3852 = urem i32 %3851, 2
  %3853 = icmp eq i32 %3852, 0
  %3854 = icmp slt i32 %3849, 10
  %3855 = or i1 %3853, %3854
  br i1 %3855, label %originalBBpart21210, label %originalBB1208alteredBB

originalBBpart21210:                              ; preds = %originalBB1208
  br i1 %3847, label %3856, label %3873, !dbg !2241

3856:                                             ; preds = %originalBBpart21210
  %3857 = load i32, i32* @x.35
  %3858 = load i32, i32* @y.36
  %3859 = sub i32 %3857, 1
  %3860 = mul i32 %3857, %3859
  %3861 = urem i32 %3860, 2
  %3862 = icmp eq i32 %3861, 0
  %3863 = icmp slt i32 %3858, 10
  %3864 = or i1 %3862, %3863
  br i1 %3864, label %originalBB1212, label %originalBB1212alteredBB

originalBB1212:                                   ; preds = %3856, %originalBB1212alteredBB
  %3865 = load i32, i32* @x.35
  %3866 = load i32, i32* @y.36
  %3867 = sub i32 %3865, 1
  %3868 = mul i32 %3865, %3867
  %3869 = urem i32 %3868, 2
  %3870 = icmp eq i32 %3869, 0
  %3871 = icmp slt i32 %3866, 10
  %3872 = or i1 %3870, %3871
  br i1 %3872, label %originalBBpart21214, label %originalBB1212alteredBB

originalBBpart21214:                              ; preds = %originalBB1212
  br label %6021, !dbg !2238

3873:                                             ; preds = %originalBBpart21210
  %3874 = load i32, i32* @x.35
  %3875 = load i32, i32* @y.36
  %3876 = sub i32 %3874, 1
  %3877 = mul i32 %3874, %3876
  %3878 = urem i32 %3877, 2
  %3879 = icmp eq i32 %3878, 0
  %3880 = icmp slt i32 %3875, 10
  %3881 = or i1 %3879, %3880
  br i1 %3881, label %originalBB1216, label %originalBB1216alteredBB

originalBB1216:                                   ; preds = %3873, %originalBB1216alteredBB
  store i8 1, i8* %42, align 1, !dbg !2241
  %3882 = load i32, i32* %23, align 4, !dbg !2242
  %3883 = icmp eq i32 %3882, 2, !dbg !2242
  %3884 = load i32, i32* @x.35
  %3885 = load i32, i32* @y.36
  %3886 = sub i32 %3884, 1
  %3887 = mul i32 %3884, %3886
  %3888 = urem i32 %3887, 2
  %3889 = icmp eq i32 %3888, 0
  %3890 = icmp slt i32 %3885, 10
  %3891 = or i1 %3889, %3890
  br i1 %3891, label %originalBBpart21218, label %originalBB1216alteredBB

originalBBpart21218:                              ; preds = %originalBB1216
  br i1 %3883, label %3892, label %4092, !dbg !2242

3892:                                             ; preds = %originalBBpart21218
  %3893 = load i32, i32* @x.35
  %3894 = load i32, i32* @y.36
  %3895 = sub i32 %3893, 1
  %3896 = mul i32 %3893, %3895
  %3897 = urem i32 %3896, 2
  %3898 = icmp eq i32 %3897, 0
  %3899 = icmp slt i32 %3894, 10
  %3900 = or i1 %3898, %3899
  br i1 %3900, label %originalBB1220, label %originalBB1220alteredBB

originalBB1220:                                   ; preds = %3892, %originalBB1220alteredBB
  %3901 = load i8, i8* %36, align 1, !dbg !2242
  %3902 = trunc i8 %3901 to i1, !dbg !2242
  %3903 = load i32, i32* @x.35
  %3904 = load i32, i32* @y.36
  %3905 = sub i32 %3903, 1
  %3906 = mul i32 %3903, %3905
  %3907 = urem i32 %3906, 2
  %3908 = icmp eq i32 %3907, 0
  %3909 = icmp slt i32 %3904, 10
  %3910 = or i1 %3908, %3909
  br i1 %3910, label %originalBBpart21222, label %originalBB1220alteredBB

originalBBpart21222:                              ; preds = %originalBB1220
  br i1 %3902, label %4092, label %3911, !dbg !2241

3911:                                             ; preds = %originalBBpart21222
  br label %3912, !dbg !2244

3912:                                             ; preds = %3911
  %3913 = load i32, i32* @x.35
  %3914 = load i32, i32* @y.36
  %3915 = sub i32 %3913, 1
  %3916 = mul i32 %3913, %3915
  %3917 = urem i32 %3916, 2
  %3918 = icmp eq i32 %3917, 0
  %3919 = icmp slt i32 %3914, 10
  %3920 = or i1 %3918, %3919
  br i1 %3920, label %originalBB1224, label %originalBB1224alteredBB

originalBB1224:                                   ; preds = %3912, %originalBB1224alteredBB
  %3921 = load i64, i64* %29, align 8, !dbg !2246
  %3922 = load i64, i64* %20, align 8, !dbg !2246
  %3923 = icmp ult i64 %3921, %3922, !dbg !2246
  %3924 = load i32, i32* @x.35
  %3925 = load i32, i32* @y.36
  %3926 = sub i32 %3924, 1
  %3927 = mul i32 %3924, %3926
  %3928 = urem i32 %3927, 2
  %3929 = icmp eq i32 %3928, 0
  %3930 = icmp slt i32 %3925, 10
  %3931 = or i1 %3929, %3930
  br i1 %3931, label %originalBBpart21226, label %originalBB1224alteredBB

originalBBpart21226:                              ; preds = %originalBB1224
  br i1 %3923, label %3932, label %3952, !dbg !2249

3932:                                             ; preds = %originalBBpart21226
  %3933 = load i32, i32* @x.35
  %3934 = load i32, i32* @y.36
  %3935 = sub i32 %3933, 1
  %3936 = mul i32 %3933, %3935
  %3937 = urem i32 %3936, 2
  %3938 = icmp eq i32 %3937, 0
  %3939 = icmp slt i32 %3934, 10
  %3940 = or i1 %3938, %3939
  br i1 %3940, label %originalBB1228, label %originalBB1228alteredBB

originalBB1228:                                   ; preds = %3932, %originalBB1228alteredBB
  %3941 = load i8*, i8** %19, align 8, !dbg !2246
  %3942 = load i64, i64* %29, align 8, !dbg !2246
  %3943 = getelementptr inbounds i8, i8* %3941, i64 %3942, !dbg !2246
  store i8 39, i8* %3943, align 1, !dbg !2246
  %3944 = load i32, i32* @x.35
  %3945 = load i32, i32* @y.36
  %3946 = sub i32 %3944, 1
  %3947 = mul i32 %3944, %3946
  %3948 = urem i32 %3947, 2
  %3949 = icmp eq i32 %3948, 0
  %3950 = icmp slt i32 %3945, 10
  %3951 = or i1 %3949, %3950
  br i1 %3951, label %originalBBpart21230, label %originalBB1228alteredBB

originalBBpart21230:                              ; preds = %originalBB1228
  br label %3952, !dbg !2246

3952:                                             ; preds = %originalBBpart21230, %originalBBpart21226
  %3953 = load i32, i32* @x.35
  %3954 = load i32, i32* @y.36
  %3955 = sub i32 %3953, 1
  %3956 = mul i32 %3953, %3955
  %3957 = urem i32 %3956, 2
  %3958 = icmp eq i32 %3957, 0
  %3959 = icmp slt i32 %3954, 10
  %3960 = or i1 %3958, %3959
  br i1 %3960, label %originalBB1232, label %originalBB1232alteredBB

originalBB1232:                                   ; preds = %3952, %originalBB1232alteredBB
  %3961 = load i64, i64* %29, align 8, !dbg !2249
  %3962 = add i64 %3961, 1, !dbg !2249
  store i64 %3962, i64* %29, align 8, !dbg !2249
  %3963 = load i32, i32* @x.35
  %3964 = load i32, i32* @y.36
  %3965 = sub i32 %3963, 1
  %3966 = mul i32 %3963, %3965
  %3967 = urem i32 %3966, 2
  %3968 = icmp eq i32 %3967, 0
  %3969 = icmp slt i32 %3964, 10
  %3970 = or i1 %3968, %3969
  br i1 %3970, label %originalBBpart21245, label %originalBB1232alteredBB

originalBBpart21245:                              ; preds = %originalBB1232
  br label %3971, !dbg !2249

3971:                                             ; preds = %originalBBpart21245
  %3972 = load i32, i32* @x.35
  %3973 = load i32, i32* @y.36
  %3974 = sub i32 %3972, 1
  %3975 = mul i32 %3972, %3974
  %3976 = urem i32 %3975, 2
  %3977 = icmp eq i32 %3976, 0
  %3978 = icmp slt i32 %3973, 10
  %3979 = or i1 %3977, %3978
  br i1 %3979, label %originalBB1247, label %originalBB1247alteredBB

originalBB1247:                                   ; preds = %3971, %originalBB1247alteredBB
  %3980 = load i32, i32* @x.35
  %3981 = load i32, i32* @y.36
  %3982 = sub i32 %3980, 1
  %3983 = mul i32 %3980, %3982
  %3984 = urem i32 %3983, 2
  %3985 = icmp eq i32 %3984, 0
  %3986 = icmp slt i32 %3981, 10
  %3987 = or i1 %3985, %3986
  br i1 %3987, label %originalBBpart21249, label %originalBB1247alteredBB

originalBBpart21249:                              ; preds = %originalBB1247
  br label %3988, !dbg !2244

3988:                                             ; preds = %originalBBpart21249
  %3989 = load i32, i32* @x.35
  %3990 = load i32, i32* @y.36
  %3991 = sub i32 %3989, 1
  %3992 = mul i32 %3989, %3991
  %3993 = urem i32 %3992, 2
  %3994 = icmp eq i32 %3993, 0
  %3995 = icmp slt i32 %3990, 10
  %3996 = or i1 %3994, %3995
  br i1 %3996, label %originalBB1251, label %originalBB1251alteredBB

originalBB1251:                                   ; preds = %3988, %originalBB1251alteredBB
  %3997 = load i64, i64* %29, align 8, !dbg !2250
  %3998 = load i64, i64* %20, align 8, !dbg !2250
  %3999 = icmp ult i64 %3997, %3998, !dbg !2250
  %4000 = load i32, i32* @x.35
  %4001 = load i32, i32* @y.36
  %4002 = sub i32 %4000, 1
  %4003 = mul i32 %4000, %4002
  %4004 = urem i32 %4003, 2
  %4005 = icmp eq i32 %4004, 0
  %4006 = icmp slt i32 %4001, 10
  %4007 = or i1 %4005, %4006
  br i1 %4007, label %originalBBpart21253, label %originalBB1251alteredBB

originalBBpart21253:                              ; preds = %originalBB1251
  br i1 %3999, label %4008, label %4028, !dbg !2253

4008:                                             ; preds = %originalBBpart21253
  %4009 = load i32, i32* @x.35
  %4010 = load i32, i32* @y.36
  %4011 = sub i32 %4009, 1
  %4012 = mul i32 %4009, %4011
  %4013 = urem i32 %4012, 2
  %4014 = icmp eq i32 %4013, 0
  %4015 = icmp slt i32 %4010, 10
  %4016 = or i1 %4014, %4015
  br i1 %4016, label %originalBB1255, label %originalBB1255alteredBB

originalBB1255:                                   ; preds = %4008, %originalBB1255alteredBB
  %4017 = load i8*, i8** %19, align 8, !dbg !2250
  %4018 = load i64, i64* %29, align 8, !dbg !2250
  %4019 = getelementptr inbounds i8, i8* %4017, i64 %4018, !dbg !2250
  store i8 36, i8* %4019, align 1, !dbg !2250
  %4020 = load i32, i32* @x.35
  %4021 = load i32, i32* @y.36
  %4022 = sub i32 %4020, 1
  %4023 = mul i32 %4020, %4022
  %4024 = urem i32 %4023, 2
  %4025 = icmp eq i32 %4024, 0
  %4026 = icmp slt i32 %4021, 10
  %4027 = or i1 %4025, %4026
  br i1 %4027, label %originalBBpart21257, label %originalBB1255alteredBB

originalBBpart21257:                              ; preds = %originalBB1255
  br label %4028, !dbg !2250

4028:                                             ; preds = %originalBBpart21257, %originalBBpart21253
  %4029 = load i32, i32* @x.35
  %4030 = load i32, i32* @y.36
  %4031 = sub i32 %4029, 1
  %4032 = mul i32 %4029, %4031
  %4033 = urem i32 %4032, 2
  %4034 = icmp eq i32 %4033, 0
  %4035 = icmp slt i32 %4030, 10
  %4036 = or i1 %4034, %4035
  br i1 %4036, label %originalBB1259, label %originalBB1259alteredBB

originalBB1259:                                   ; preds = %4028, %originalBB1259alteredBB
  %4037 = load i64, i64* %29, align 8, !dbg !2253
  %4038 = add i64 %4037, 1, !dbg !2253
  store i64 %4038, i64* %29, align 8, !dbg !2253
  %4039 = load i32, i32* @x.35
  %4040 = load i32, i32* @y.36
  %4041 = sub i32 %4039, 1
  %4042 = mul i32 %4039, %4041
  %4043 = urem i32 %4042, 2
  %4044 = icmp eq i32 %4043, 0
  %4045 = icmp slt i32 %4040, 10
  %4046 = or i1 %4044, %4045
  br i1 %4046, label %originalBBpart21266, label %originalBB1259alteredBB

originalBBpart21266:                              ; preds = %originalBB1259
  br label %4047, !dbg !2253

4047:                                             ; preds = %originalBBpart21266
  %4048 = load i32, i32* @x.35
  %4049 = load i32, i32* @y.36
  %4050 = sub i32 %4048, 1
  %4051 = mul i32 %4048, %4050
  %4052 = urem i32 %4051, 2
  %4053 = icmp eq i32 %4052, 0
  %4054 = icmp slt i32 %4049, 10
  %4055 = or i1 %4053, %4054
  br i1 %4055, label %originalBB1268, label %originalBB1268alteredBB

originalBB1268:                                   ; preds = %4047, %originalBB1268alteredBB
  %4056 = load i32, i32* @x.35
  %4057 = load i32, i32* @y.36
  %4058 = sub i32 %4056, 1
  %4059 = mul i32 %4056, %4058
  %4060 = urem i32 %4059, 2
  %4061 = icmp eq i32 %4060, 0
  %4062 = icmp slt i32 %4057, 10
  %4063 = or i1 %4061, %4062
  br i1 %4063, label %originalBBpart21270, label %originalBB1268alteredBB

originalBBpart21270:                              ; preds = %originalBB1268
  br label %4064, !dbg !2244

4064:                                             ; preds = %originalBBpart21270
  %4065 = load i64, i64* %29, align 8, !dbg !2254
  %4066 = load i64, i64* %20, align 8, !dbg !2254
  %4067 = icmp ult i64 %4065, %4066, !dbg !2254
  br i1 %4067, label %4068, label %4072, !dbg !2257

4068:                                             ; preds = %4064
  %4069 = load i8*, i8** %19, align 8, !dbg !2254
  %4070 = load i64, i64* %29, align 8, !dbg !2254
  %4071 = getelementptr inbounds i8, i8* %4069, i64 %4070, !dbg !2254
  store i8 39, i8* %4071, align 1, !dbg !2254
  br label %4072, !dbg !2254

4072:                                             ; preds = %4068, %4064
  %4073 = load i64, i64* %29, align 8, !dbg !2257
  %4074 = add i64 %4073, 1, !dbg !2257
  store i64 %4074, i64* %29, align 8, !dbg !2257
  br label %4075, !dbg !2257

4075:                                             ; preds = %4072
  %4076 = load i32, i32* @x.35
  %4077 = load i32, i32* @y.36
  %4078 = sub i32 %4076, 1
  %4079 = mul i32 %4076, %4078
  %4080 = urem i32 %4079, 2
  %4081 = icmp eq i32 %4080, 0
  %4082 = icmp slt i32 %4077, 10
  %4083 = or i1 %4081, %4082
  br i1 %4083, label %originalBB1272, label %originalBB1272alteredBB

originalBB1272:                                   ; preds = %4075, %originalBB1272alteredBB
  store i8 1, i8* %36, align 1, !dbg !2244
  %4084 = load i32, i32* @x.35
  %4085 = load i32, i32* @y.36
  %4086 = sub i32 %4084, 1
  %4087 = mul i32 %4084, %4086
  %4088 = urem i32 %4087, 2
  %4089 = icmp eq i32 %4088, 0
  %4090 = icmp slt i32 %4085, 10
  %4091 = or i1 %4089, %4090
  br i1 %4091, label %originalBBpart21274, label %originalBB1272alteredBB

originalBBpart21274:                              ; preds = %originalBB1272
  br label %4092, !dbg !2244

4092:                                             ; preds = %originalBBpart21274, %originalBBpart21222, %originalBBpart21218
  %4093 = load i32, i32* @x.35
  %4094 = load i32, i32* @y.36
  %4095 = sub i32 %4093, 1
  %4096 = mul i32 %4093, %4095
  %4097 = urem i32 %4096, 2
  %4098 = icmp eq i32 %4097, 0
  %4099 = icmp slt i32 %4094, 10
  %4100 = or i1 %4098, %4099
  br i1 %4100, label %originalBB1276, label %originalBB1276alteredBB

originalBB1276:                                   ; preds = %4092, %originalBB1276alteredBB
  %4101 = load i32, i32* @x.35
  %4102 = load i32, i32* @y.36
  %4103 = sub i32 %4101, 1
  %4104 = mul i32 %4101, %4103
  %4105 = urem i32 %4104, 2
  %4106 = icmp eq i32 %4105, 0
  %4107 = icmp slt i32 %4102, 10
  %4108 = or i1 %4106, %4107
  br i1 %4108, label %originalBBpart21278, label %originalBB1276alteredBB

originalBBpart21278:                              ; preds = %originalBB1276
  br label %4109, !dbg !2241

4109:                                             ; preds = %originalBBpart21278
  %4110 = load i32, i32* @x.35
  %4111 = load i32, i32* @y.36
  %4112 = sub i32 %4110, 1
  %4113 = mul i32 %4110, %4112
  %4114 = urem i32 %4113, 2
  %4115 = icmp eq i32 %4114, 0
  %4116 = icmp slt i32 %4111, 10
  %4117 = or i1 %4115, %4116
  br i1 %4117, label %originalBB1280, label %originalBB1280alteredBB

originalBB1280:                                   ; preds = %4109, %originalBB1280alteredBB
  %4118 = load i64, i64* %29, align 8, !dbg !2258
  %4119 = load i64, i64* %20, align 8, !dbg !2258
  %4120 = icmp ult i64 %4118, %4119, !dbg !2258
  %4121 = load i32, i32* @x.35
  %4122 = load i32, i32* @y.36
  %4123 = sub i32 %4121, 1
  %4124 = mul i32 %4121, %4123
  %4125 = urem i32 %4124, 2
  %4126 = icmp eq i32 %4125, 0
  %4127 = icmp slt i32 %4122, 10
  %4128 = or i1 %4126, %4127
  br i1 %4128, label %originalBBpart21282, label %originalBB1280alteredBB

originalBBpart21282:                              ; preds = %originalBB1280
  br i1 %4120, label %4129, label %4149, !dbg !2261

4129:                                             ; preds = %originalBBpart21282
  %4130 = load i32, i32* @x.35
  %4131 = load i32, i32* @y.36
  %4132 = sub i32 %4130, 1
  %4133 = mul i32 %4130, %4132
  %4134 = urem i32 %4133, 2
  %4135 = icmp eq i32 %4134, 0
  %4136 = icmp slt i32 %4131, 10
  %4137 = or i1 %4135, %4136
  br i1 %4137, label %originalBB1284, label %originalBB1284alteredBB

originalBB1284:                                   ; preds = %4129, %originalBB1284alteredBB
  %4138 = load i8*, i8** %19, align 8, !dbg !2258
  %4139 = load i64, i64* %29, align 8, !dbg !2258
  %4140 = getelementptr inbounds i8, i8* %4138, i64 %4139, !dbg !2258
  store i8 92, i8* %4140, align 1, !dbg !2258
  %4141 = load i32, i32* @x.35
  %4142 = load i32, i32* @y.36
  %4143 = sub i32 %4141, 1
  %4144 = mul i32 %4141, %4143
  %4145 = urem i32 %4144, 2
  %4146 = icmp eq i32 %4145, 0
  %4147 = icmp slt i32 %4142, 10
  %4148 = or i1 %4146, %4147
  br i1 %4148, label %originalBBpart21286, label %originalBB1284alteredBB

originalBBpart21286:                              ; preds = %originalBB1284
  br label %4149, !dbg !2258

4149:                                             ; preds = %originalBBpart21286, %originalBBpart21282
  %4150 = load i32, i32* @x.35
  %4151 = load i32, i32* @y.36
  %4152 = sub i32 %4150, 1
  %4153 = mul i32 %4150, %4152
  %4154 = urem i32 %4153, 2
  %4155 = icmp eq i32 %4154, 0
  %4156 = icmp slt i32 %4151, 10
  %4157 = or i1 %4155, %4156
  br i1 %4157, label %originalBB1288, label %originalBB1288alteredBB

originalBB1288:                                   ; preds = %4149, %originalBB1288alteredBB
  %4158 = load i64, i64* %29, align 8, !dbg !2261
  %4159 = add i64 %4158, 1, !dbg !2261
  store i64 %4159, i64* %29, align 8, !dbg !2261
  %4160 = load i32, i32* @x.35
  %4161 = load i32, i32* @y.36
  %4162 = sub i32 %4160, 1
  %4163 = mul i32 %4160, %4162
  %4164 = urem i32 %4163, 2
  %4165 = icmp eq i32 %4164, 0
  %4166 = icmp slt i32 %4161, 10
  %4167 = or i1 %4165, %4166
  br i1 %4167, label %originalBBpart21298, label %originalBB1288alteredBB

originalBBpart21298:                              ; preds = %originalBB1288
  br label %4168, !dbg !2261

4168:                                             ; preds = %originalBBpart21298
  %4169 = load i32, i32* @x.35
  %4170 = load i32, i32* @y.36
  %4171 = sub i32 %4169, 1
  %4172 = mul i32 %4169, %4171
  %4173 = urem i32 %4172, 2
  %4174 = icmp eq i32 %4173, 0
  %4175 = icmp slt i32 %4170, 10
  %4176 = or i1 %4174, %4175
  br i1 %4176, label %originalBB1300, label %originalBB1300alteredBB

originalBB1300:                                   ; preds = %4168, %originalBB1300alteredBB
  %4177 = load i32, i32* @x.35
  %4178 = load i32, i32* @y.36
  %4179 = sub i32 %4177, 1
  %4180 = mul i32 %4177, %4179
  %4181 = urem i32 %4180, 2
  %4182 = icmp eq i32 %4181, 0
  %4183 = icmp slt i32 %4178, 10
  %4184 = or i1 %4182, %4183
  br i1 %4184, label %originalBBpart21302, label %originalBB1300alteredBB

originalBBpart21302:                              ; preds = %originalBB1300
  br label %4185, !dbg !2241

4185:                                             ; preds = %originalBBpart21302
  br label %4186, !dbg !2262

4186:                                             ; preds = %4185
  %4187 = load i32, i32* @x.35
  %4188 = load i32, i32* @y.36
  %4189 = sub i32 %4187, 1
  %4190 = mul i32 %4187, %4189
  %4191 = urem i32 %4190, 2
  %4192 = icmp eq i32 %4191, 0
  %4193 = icmp slt i32 %4188, 10
  %4194 = or i1 %4192, %4193
  br i1 %4194, label %originalBB1304, label %originalBB1304alteredBB

originalBB1304:                                   ; preds = %4186, %originalBB1304alteredBB
  %4195 = load i64, i64* %29, align 8, !dbg !2263
  %4196 = load i64, i64* %20, align 8, !dbg !2263
  %4197 = icmp ult i64 %4195, %4196, !dbg !2263
  %4198 = load i32, i32* @x.35
  %4199 = load i32, i32* @y.36
  %4200 = sub i32 %4198, 1
  %4201 = mul i32 %4198, %4200
  %4202 = urem i32 %4201, 2
  %4203 = icmp eq i32 %4202, 0
  %4204 = icmp slt i32 %4199, 10
  %4205 = or i1 %4203, %4204
  br i1 %4205, label %originalBBpart21306, label %originalBB1304alteredBB

originalBBpart21306:                              ; preds = %originalBB1304
  br i1 %4197, label %4206, label %4231, !dbg !2266

4206:                                             ; preds = %originalBBpart21306
  %4207 = load i32, i32* @x.35
  %4208 = load i32, i32* @y.36
  %4209 = sub i32 %4207, 1
  %4210 = mul i32 %4207, %4209
  %4211 = urem i32 %4210, 2
  %4212 = icmp eq i32 %4211, 0
  %4213 = icmp slt i32 %4208, 10
  %4214 = or i1 %4212, %4213
  br i1 %4214, label %originalBB1308, label %originalBB1308alteredBB

originalBB1308:                                   ; preds = %4206, %originalBB1308alteredBB
  %4215 = load i8, i8* %39, align 1, !dbg !2263
  %4216 = zext i8 %4215 to i32, !dbg !2263
  %4217 = ashr i32 %4216, 6, !dbg !2263
  %4218 = add nsw i32 48, %4217, !dbg !2263
  %4219 = trunc i32 %4218 to i8, !dbg !2263
  %4220 = load i8*, i8** %19, align 8, !dbg !2263
  %4221 = load i64, i64* %29, align 8, !dbg !2263
  %4222 = getelementptr inbounds i8, i8* %4220, i64 %4221, !dbg !2263
  store i8 %4219, i8* %4222, align 1, !dbg !2263
  %4223 = load i32, i32* @x.35
  %4224 = load i32, i32* @y.36
  %4225 = sub i32 %4223, 1
  %4226 = mul i32 %4223, %4225
  %4227 = urem i32 %4226, 2
  %4228 = icmp eq i32 %4227, 0
  %4229 = icmp slt i32 %4224, 10
  %4230 = or i1 %4228, %4229
  br i1 %4230, label %originalBBpart21328, label %originalBB1308alteredBB

originalBBpart21328:                              ; preds = %originalBB1308
  br label %4231, !dbg !2263

4231:                                             ; preds = %originalBBpart21328, %originalBBpart21306
  %4232 = load i64, i64* %29, align 8, !dbg !2266
  %4233 = add i64 %4232, 1, !dbg !2266
  store i64 %4233, i64* %29, align 8, !dbg !2266
  br label %4234, !dbg !2266

4234:                                             ; preds = %4231
  %4235 = load i32, i32* @x.35
  %4236 = load i32, i32* @y.36
  %4237 = sub i32 %4235, 1
  %4238 = mul i32 %4235, %4237
  %4239 = urem i32 %4238, 2
  %4240 = icmp eq i32 %4239, 0
  %4241 = icmp slt i32 %4236, 10
  %4242 = or i1 %4240, %4241
  br i1 %4242, label %originalBB1330, label %originalBB1330alteredBB

originalBB1330:                                   ; preds = %4234, %originalBB1330alteredBB
  %4243 = load i32, i32* @x.35
  %4244 = load i32, i32* @y.36
  %4245 = sub i32 %4243, 1
  %4246 = mul i32 %4243, %4245
  %4247 = urem i32 %4246, 2
  %4248 = icmp eq i32 %4247, 0
  %4249 = icmp slt i32 %4244, 10
  %4250 = or i1 %4248, %4249
  br i1 %4250, label %originalBBpart21332, label %originalBB1330alteredBB

originalBBpart21332:                              ; preds = %originalBB1330
  br label %4251, !dbg !2267

4251:                                             ; preds = %originalBBpart21332
  %4252 = load i32, i32* @x.35
  %4253 = load i32, i32* @y.36
  %4254 = sub i32 %4252, 1
  %4255 = mul i32 %4252, %4254
  %4256 = urem i32 %4255, 2
  %4257 = icmp eq i32 %4256, 0
  %4258 = icmp slt i32 %4253, 10
  %4259 = or i1 %4257, %4258
  br i1 %4259, label %originalBB1334, label %originalBB1334alteredBB

originalBB1334:                                   ; preds = %4251, %originalBB1334alteredBB
  %4260 = load i64, i64* %29, align 8, !dbg !2268
  %4261 = load i64, i64* %20, align 8, !dbg !2268
  %4262 = icmp ult i64 %4260, %4261, !dbg !2268
  %4263 = load i32, i32* @x.35
  %4264 = load i32, i32* @y.36
  %4265 = sub i32 %4263, 1
  %4266 = mul i32 %4263, %4265
  %4267 = urem i32 %4266, 2
  %4268 = icmp eq i32 %4267, 0
  %4269 = icmp slt i32 %4264, 10
  %4270 = or i1 %4268, %4269
  br i1 %4270, label %originalBBpart21336, label %originalBB1334alteredBB

originalBBpart21336:                              ; preds = %originalBB1334
  br i1 %4262, label %4271, label %4297, !dbg !2271

4271:                                             ; preds = %originalBBpart21336
  %4272 = load i32, i32* @x.35
  %4273 = load i32, i32* @y.36
  %4274 = sub i32 %4272, 1
  %4275 = mul i32 %4272, %4274
  %4276 = urem i32 %4275, 2
  %4277 = icmp eq i32 %4276, 0
  %4278 = icmp slt i32 %4273, 10
  %4279 = or i1 %4277, %4278
  br i1 %4279, label %originalBB1338, label %originalBB1338alteredBB

originalBB1338:                                   ; preds = %4271, %originalBB1338alteredBB
  %4280 = load i8, i8* %39, align 1, !dbg !2268
  %4281 = zext i8 %4280 to i32, !dbg !2268
  %4282 = ashr i32 %4281, 3, !dbg !2268
  %4283 = and i32 %4282, 7, !dbg !2268
  %4284 = add nsw i32 48, %4283, !dbg !2268
  %4285 = trunc i32 %4284 to i8, !dbg !2268
  %4286 = load i8*, i8** %19, align 8, !dbg !2268
  %4287 = load i64, i64* %29, align 8, !dbg !2268
  %4288 = getelementptr inbounds i8, i8* %4286, i64 %4287, !dbg !2268
  store i8 %4285, i8* %4288, align 1, !dbg !2268
  %4289 = load i32, i32* @x.35
  %4290 = load i32, i32* @y.36
  %4291 = sub i32 %4289, 1
  %4292 = mul i32 %4289, %4291
  %4293 = urem i32 %4292, 2
  %4294 = icmp eq i32 %4293, 0
  %4295 = icmp slt i32 %4290, 10
  %4296 = or i1 %4294, %4295
  br i1 %4296, label %originalBBpart21363, label %originalBB1338alteredBB

originalBBpart21363:                              ; preds = %originalBB1338
  br label %4297, !dbg !2268

4297:                                             ; preds = %originalBBpart21363, %originalBBpart21336
  %4298 = load i32, i32* @x.35
  %4299 = load i32, i32* @y.36
  %4300 = sub i32 %4298, 1
  %4301 = mul i32 %4298, %4300
  %4302 = urem i32 %4301, 2
  %4303 = icmp eq i32 %4302, 0
  %4304 = icmp slt i32 %4299, 10
  %4305 = or i1 %4303, %4304
  br i1 %4305, label %originalBB1365, label %originalBB1365alteredBB

originalBB1365:                                   ; preds = %4297, %originalBB1365alteredBB
  %4306 = load i64, i64* %29, align 8, !dbg !2271
  %4307 = add i64 %4306, 1, !dbg !2271
  store i64 %4307, i64* %29, align 8, !dbg !2271
  %4308 = load i32, i32* @x.35
  %4309 = load i32, i32* @y.36
  %4310 = sub i32 %4308, 1
  %4311 = mul i32 %4308, %4310
  %4312 = urem i32 %4311, 2
  %4313 = icmp eq i32 %4312, 0
  %4314 = icmp slt i32 %4309, 10
  %4315 = or i1 %4313, %4314
  br i1 %4315, label %originalBBpart21378, label %originalBB1365alteredBB

originalBBpart21378:                              ; preds = %originalBB1365
  br label %4316, !dbg !2271

4316:                                             ; preds = %originalBBpart21378
  %4317 = load i32, i32* @x.35
  %4318 = load i32, i32* @y.36
  %4319 = sub i32 %4317, 1
  %4320 = mul i32 %4317, %4319
  %4321 = urem i32 %4320, 2
  %4322 = icmp eq i32 %4321, 0
  %4323 = icmp slt i32 %4318, 10
  %4324 = or i1 %4322, %4323
  br i1 %4324, label %originalBB1380, label %originalBB1380alteredBB

originalBB1380:                                   ; preds = %4316, %originalBB1380alteredBB
  %4325 = load i8, i8* %39, align 1, !dbg !2272
  %4326 = zext i8 %4325 to i32, !dbg !2272
  %4327 = and i32 %4326, 7, !dbg !2273
  %4328 = add nsw i32 48, %4327, !dbg !2274
  %4329 = trunc i32 %4328 to i8, !dbg !2275
  store i8 %4329, i8* %39, align 1, !dbg !2276
  %4330 = load i32, i32* @x.35
  %4331 = load i32, i32* @y.36
  %4332 = sub i32 %4330, 1
  %4333 = mul i32 %4330, %4332
  %4334 = urem i32 %4333, 2
  %4335 = icmp eq i32 %4334, 0
  %4336 = icmp slt i32 %4331, 10
  %4337 = or i1 %4335, %4336
  br i1 %4337, label %originalBBpart21396, label %originalBB1380alteredBB

originalBBpart21396:                              ; preds = %originalBB1380
  br label %4419, !dbg !2277

4338:                                             ; preds = %originalBBpart21202, %originalBBpart21198
  %4339 = load i8, i8* %41, align 1, !dbg !2278
  %4340 = trunc i8 %4339 to i1, !dbg !2278
  br i1 %4340, label %4341, label %4402, !dbg !2280

4341:                                             ; preds = %4338
  br label %4342, !dbg !2281

4342:                                             ; preds = %4341
  %4343 = load i32, i32* @x.35
  %4344 = load i32, i32* @y.36
  %4345 = sub i32 %4343, 1
  %4346 = mul i32 %4343, %4345
  %4347 = urem i32 %4346, 2
  %4348 = icmp eq i32 %4347, 0
  %4349 = icmp slt i32 %4344, 10
  %4350 = or i1 %4348, %4349
  br i1 %4350, label %originalBB1398, label %originalBB1398alteredBB

originalBB1398:                                   ; preds = %4342, %originalBB1398alteredBB
  %4351 = load i64, i64* %29, align 8, !dbg !2283
  %4352 = load i64, i64* %20, align 8, !dbg !2283
  %4353 = icmp ult i64 %4351, %4352, !dbg !2283
  %4354 = load i32, i32* @x.35
  %4355 = load i32, i32* @y.36
  %4356 = sub i32 %4354, 1
  %4357 = mul i32 %4354, %4356
  %4358 = urem i32 %4357, 2
  %4359 = icmp eq i32 %4358, 0
  %4360 = icmp slt i32 %4355, 10
  %4361 = or i1 %4359, %4360
  br i1 %4361, label %originalBBpart21400, label %originalBB1398alteredBB

originalBBpart21400:                              ; preds = %originalBB1398
  br i1 %4353, label %4362, label %4382, !dbg !2286

4362:                                             ; preds = %originalBBpart21400
  %4363 = load i32, i32* @x.35
  %4364 = load i32, i32* @y.36
  %4365 = sub i32 %4363, 1
  %4366 = mul i32 %4363, %4365
  %4367 = urem i32 %4366, 2
  %4368 = icmp eq i32 %4367, 0
  %4369 = icmp slt i32 %4364, 10
  %4370 = or i1 %4368, %4369
  br i1 %4370, label %originalBB1402, label %originalBB1402alteredBB

originalBB1402:                                   ; preds = %4362, %originalBB1402alteredBB
  %4371 = load i8*, i8** %19, align 8, !dbg !2283
  %4372 = load i64, i64* %29, align 8, !dbg !2283
  %4373 = getelementptr inbounds i8, i8* %4371, i64 %4372, !dbg !2283
  store i8 92, i8* %4373, align 1, !dbg !2283
  %4374 = load i32, i32* @x.35
  %4375 = load i32, i32* @y.36
  %4376 = sub i32 %4374, 1
  %4377 = mul i32 %4374, %4376
  %4378 = urem i32 %4377, 2
  %4379 = icmp eq i32 %4378, 0
  %4380 = icmp slt i32 %4375, 10
  %4381 = or i1 %4379, %4380
  br i1 %4381, label %originalBBpart21404, label %originalBB1402alteredBB

originalBBpart21404:                              ; preds = %originalBB1402
  br label %4382, !dbg !2283

4382:                                             ; preds = %originalBBpart21404, %originalBBpart21400
  %4383 = load i32, i32* @x.35
  %4384 = load i32, i32* @y.36
  %4385 = sub i32 %4383, 1
  %4386 = mul i32 %4383, %4385
  %4387 = urem i32 %4386, 2
  %4388 = icmp eq i32 %4387, 0
  %4389 = icmp slt i32 %4384, 10
  %4390 = or i1 %4388, %4389
  br i1 %4390, label %originalBB1406, label %originalBB1406alteredBB

originalBB1406:                                   ; preds = %4382, %originalBB1406alteredBB
  %4391 = load i64, i64* %29, align 8, !dbg !2286
  %4392 = add i64 %4391, 1, !dbg !2286
  store i64 %4392, i64* %29, align 8, !dbg !2286
  %4393 = load i32, i32* @x.35
  %4394 = load i32, i32* @y.36
  %4395 = sub i32 %4393, 1
  %4396 = mul i32 %4393, %4395
  %4397 = urem i32 %4396, 2
  %4398 = icmp eq i32 %4397, 0
  %4399 = icmp slt i32 %4394, 10
  %4400 = or i1 %4398, %4399
  br i1 %4400, label %originalBBpart21420, label %originalBB1406alteredBB

originalBBpart21420:                              ; preds = %originalBB1406
  br label %4401, !dbg !2286

4401:                                             ; preds = %originalBBpart21420
  store i8 0, i8* %41, align 1, !dbg !2287
  br label %4402, !dbg !2288

4402:                                             ; preds = %4401, %4338
  %4403 = load i32, i32* @x.35
  %4404 = load i32, i32* @y.36
  %4405 = sub i32 %4403, 1
  %4406 = mul i32 %4403, %4405
  %4407 = urem i32 %4406, 2
  %4408 = icmp eq i32 %4407, 0
  %4409 = icmp slt i32 %4404, 10
  %4410 = or i1 %4408, %4409
  br i1 %4410, label %originalBB1422, label %originalBB1422alteredBB

originalBB1422:                                   ; preds = %4402, %originalBB1422alteredBB
  %4411 = load i32, i32* @x.35
  %4412 = load i32, i32* @y.36
  %4413 = sub i32 %4411, 1
  %4414 = mul i32 %4411, %4413
  %4415 = urem i32 %4414, 2
  %4416 = icmp eq i32 %4415, 0
  %4417 = icmp slt i32 %4412, 10
  %4418 = or i1 %4416, %4417
  br i1 %4418, label %originalBBpart21424, label %originalBB1422alteredBB

originalBBpart21424:                              ; preds = %originalBB1422
  br label %4419

4419:                                             ; preds = %originalBBpart21424, %originalBBpart21396
  %4420 = load i32, i32* @x.35
  %4421 = load i32, i32* @y.36
  %4422 = sub i32 %4420, 1
  %4423 = mul i32 %4420, %4422
  %4424 = urem i32 %4423, 2
  %4425 = icmp eq i32 %4424, 0
  %4426 = icmp slt i32 %4421, 10
  %4427 = or i1 %4425, %4426
  br i1 %4427, label %originalBB1426, label %originalBB1426alteredBB

originalBB1426:                                   ; preds = %4419, %originalBB1426alteredBB
  %4428 = load i64, i64* %50, align 8, !dbg !2289
  %4429 = load i64, i64* %28, align 8, !dbg !2291
  %4430 = add i64 %4429, 1, !dbg !2292
  %4431 = icmp ule i64 %4428, %4430, !dbg !2293
  %4432 = load i32, i32* @x.35
  %4433 = load i32, i32* @y.36
  %4434 = sub i32 %4432, 1
  %4435 = mul i32 %4432, %4434
  %4436 = urem i32 %4435, 2
  %4437 = icmp eq i32 %4436, 0
  %4438 = icmp slt i32 %4433, 10
  %4439 = or i1 %4437, %4438
  br i1 %4439, label %originalBBpart21434, label %originalBB1426alteredBB

originalBBpart21434:                              ; preds = %originalBB1426
  br i1 %4431, label %4440, label %4457, !dbg !2294

4440:                                             ; preds = %originalBBpart21434
  %4441 = load i32, i32* @x.35
  %4442 = load i32, i32* @y.36
  %4443 = sub i32 %4441, 1
  %4444 = mul i32 %4441, %4443
  %4445 = urem i32 %4444, 2
  %4446 = icmp eq i32 %4445, 0
  %4447 = icmp slt i32 %4442, 10
  %4448 = or i1 %4446, %4447
  br i1 %4448, label %originalBB1436, label %originalBB1436alteredBB

originalBB1436:                                   ; preds = %4440, %originalBB1436alteredBB
  %4449 = load i32, i32* @x.35
  %4450 = load i32, i32* @y.36
  %4451 = sub i32 %4449, 1
  %4452 = mul i32 %4449, %4451
  %4453 = urem i32 %4452, 2
  %4454 = icmp eq i32 %4453, 0
  %4455 = icmp slt i32 %4450, 10
  %4456 = or i1 %4454, %4455
  br i1 %4456, label %originalBBpart21438, label %originalBB1436alteredBB

originalBBpart21438:                              ; preds = %originalBB1436
  br label %4653, !dbg !2295

4457:                                             ; preds = %originalBBpart21434
  br label %4458, !dbg !2296

4458:                                             ; preds = %4457
  %4459 = load i8, i8* %36, align 1, !dbg !2297
  %4460 = trunc i8 %4459 to i1, !dbg !2297
  br i1 %4460, label %4461, label %4569, !dbg !2297

4461:                                             ; preds = %4458
  %4462 = load i8, i8* %42, align 1, !dbg !2297
  %4463 = trunc i8 %4462 to i1, !dbg !2297
  br i1 %4463, label %4569, label %4464, !dbg !2300

4464:                                             ; preds = %4461
  %4465 = load i32, i32* @x.35
  %4466 = load i32, i32* @y.36
  %4467 = sub i32 %4465, 1
  %4468 = mul i32 %4465, %4467
  %4469 = urem i32 %4468, 2
  %4470 = icmp eq i32 %4469, 0
  %4471 = icmp slt i32 %4466, 10
  %4472 = or i1 %4470, %4471
  br i1 %4472, label %originalBB1440, label %originalBB1440alteredBB

originalBB1440:                                   ; preds = %4464, %originalBB1440alteredBB
  %4473 = load i32, i32* @x.35
  %4474 = load i32, i32* @y.36
  %4475 = sub i32 %4473, 1
  %4476 = mul i32 %4473, %4475
  %4477 = urem i32 %4476, 2
  %4478 = icmp eq i32 %4477, 0
  %4479 = icmp slt i32 %4474, 10
  %4480 = or i1 %4478, %4479
  br i1 %4480, label %originalBBpart21442, label %originalBB1440alteredBB

originalBBpart21442:                              ; preds = %originalBB1440
  br label %4481, !dbg !2301

4481:                                             ; preds = %originalBBpart21442
  %4482 = load i32, i32* @x.35
  %4483 = load i32, i32* @y.36
  %4484 = sub i32 %4482, 1
  %4485 = mul i32 %4482, %4484
  %4486 = urem i32 %4485, 2
  %4487 = icmp eq i32 %4486, 0
  %4488 = icmp slt i32 %4483, 10
  %4489 = or i1 %4487, %4488
  br i1 %4489, label %originalBB1444, label %originalBB1444alteredBB

originalBB1444:                                   ; preds = %4481, %originalBB1444alteredBB
  %4490 = load i64, i64* %29, align 8, !dbg !2303
  %4491 = load i64, i64* %20, align 8, !dbg !2303
  %4492 = icmp ult i64 %4490, %4491, !dbg !2303
  %4493 = load i32, i32* @x.35
  %4494 = load i32, i32* @y.36
  %4495 = sub i32 %4493, 1
  %4496 = mul i32 %4493, %4495
  %4497 = urem i32 %4496, 2
  %4498 = icmp eq i32 %4497, 0
  %4499 = icmp slt i32 %4494, 10
  %4500 = or i1 %4498, %4499
  br i1 %4500, label %originalBBpart21446, label %originalBB1444alteredBB

originalBBpart21446:                              ; preds = %originalBB1444
  br i1 %4492, label %4501, label %4505, !dbg !2306

4501:                                             ; preds = %originalBBpart21446
  %4502 = load i8*, i8** %19, align 8, !dbg !2303
  %4503 = load i64, i64* %29, align 8, !dbg !2303
  %4504 = getelementptr inbounds i8, i8* %4502, i64 %4503, !dbg !2303
  store i8 39, i8* %4504, align 1, !dbg !2303
  br label %4505, !dbg !2303

4505:                                             ; preds = %4501, %originalBBpart21446
  %4506 = load i64, i64* %29, align 8, !dbg !2306
  %4507 = add i64 %4506, 1, !dbg !2306
  store i64 %4507, i64* %29, align 8, !dbg !2306
  br label %4508, !dbg !2306

4508:                                             ; preds = %4505
  br label %4509, !dbg !2301

4509:                                             ; preds = %4508
  %4510 = load i32, i32* @x.35
  %4511 = load i32, i32* @y.36
  %4512 = sub i32 %4510, 1
  %4513 = mul i32 %4510, %4512
  %4514 = urem i32 %4513, 2
  %4515 = icmp eq i32 %4514, 0
  %4516 = icmp slt i32 %4511, 10
  %4517 = or i1 %4515, %4516
  br i1 %4517, label %originalBB1448, label %originalBB1448alteredBB

originalBB1448:                                   ; preds = %4509, %originalBB1448alteredBB
  %4518 = load i64, i64* %29, align 8, !dbg !2307
  %4519 = load i64, i64* %20, align 8, !dbg !2307
  %4520 = icmp ult i64 %4518, %4519, !dbg !2307
  %4521 = load i32, i32* @x.35
  %4522 = load i32, i32* @y.36
  %4523 = sub i32 %4521, 1
  %4524 = mul i32 %4521, %4523
  %4525 = urem i32 %4524, 2
  %4526 = icmp eq i32 %4525, 0
  %4527 = icmp slt i32 %4522, 10
  %4528 = or i1 %4526, %4527
  br i1 %4528, label %originalBBpart21450, label %originalBB1448alteredBB

originalBBpart21450:                              ; preds = %originalBB1448
  br i1 %4520, label %4529, label %4549, !dbg !2310

4529:                                             ; preds = %originalBBpart21450
  %4530 = load i32, i32* @x.35
  %4531 = load i32, i32* @y.36
  %4532 = sub i32 %4530, 1
  %4533 = mul i32 %4530, %4532
  %4534 = urem i32 %4533, 2
  %4535 = icmp eq i32 %4534, 0
  %4536 = icmp slt i32 %4531, 10
  %4537 = or i1 %4535, %4536
  br i1 %4537, label %originalBB1452, label %originalBB1452alteredBB

originalBB1452:                                   ; preds = %4529, %originalBB1452alteredBB
  %4538 = load i8*, i8** %19, align 8, !dbg !2307
  %4539 = load i64, i64* %29, align 8, !dbg !2307
  %4540 = getelementptr inbounds i8, i8* %4538, i64 %4539, !dbg !2307
  store i8 39, i8* %4540, align 1, !dbg !2307
  %4541 = load i32, i32* @x.35
  %4542 = load i32, i32* @y.36
  %4543 = sub i32 %4541, 1
  %4544 = mul i32 %4541, %4543
  %4545 = urem i32 %4544, 2
  %4546 = icmp eq i32 %4545, 0
  %4547 = icmp slt i32 %4542, 10
  %4548 = or i1 %4546, %4547
  br i1 %4548, label %originalBBpart21454, label %originalBB1452alteredBB

originalBBpart21454:                              ; preds = %originalBB1452
  br label %4549, !dbg !2307

4549:                                             ; preds = %originalBBpart21454, %originalBBpart21450
  %4550 = load i64, i64* %29, align 8, !dbg !2310
  %4551 = add i64 %4550, 1, !dbg !2310
  store i64 %4551, i64* %29, align 8, !dbg !2310
  br label %4552, !dbg !2310

4552:                                             ; preds = %4549
  %4553 = load i32, i32* @x.35
  %4554 = load i32, i32* @y.36
  %4555 = sub i32 %4553, 1
  %4556 = mul i32 %4553, %4555
  %4557 = urem i32 %4556, 2
  %4558 = icmp eq i32 %4557, 0
  %4559 = icmp slt i32 %4554, 10
  %4560 = or i1 %4558, %4559
  br i1 %4560, label %originalBB1456, label %originalBB1456alteredBB

originalBB1456:                                   ; preds = %4552, %originalBB1456alteredBB
  store i8 0, i8* %36, align 1, !dbg !2301
  %4561 = load i32, i32* @x.35
  %4562 = load i32, i32* @y.36
  %4563 = sub i32 %4561, 1
  %4564 = mul i32 %4561, %4563
  %4565 = urem i32 %4564, 2
  %4566 = icmp eq i32 %4565, 0
  %4567 = icmp slt i32 %4562, 10
  %4568 = or i1 %4566, %4567
  br i1 %4568, label %originalBBpart21458, label %originalBB1456alteredBB

originalBBpart21458:                              ; preds = %originalBB1456
  br label %4569, !dbg !2301

4569:                                             ; preds = %originalBBpart21458, %4461, %4458
  %4570 = load i32, i32* @x.35
  %4571 = load i32, i32* @y.36
  %4572 = sub i32 %4570, 1
  %4573 = mul i32 %4570, %4572
  %4574 = urem i32 %4573, 2
  %4575 = icmp eq i32 %4574, 0
  %4576 = icmp slt i32 %4571, 10
  %4577 = or i1 %4575, %4576
  br i1 %4577, label %originalBB1460, label %originalBB1460alteredBB

originalBB1460:                                   ; preds = %4569, %originalBB1460alteredBB
  %4578 = load i32, i32* @x.35
  %4579 = load i32, i32* @y.36
  %4580 = sub i32 %4578, 1
  %4581 = mul i32 %4578, %4580
  %4582 = urem i32 %4581, 2
  %4583 = icmp eq i32 %4582, 0
  %4584 = icmp slt i32 %4579, 10
  %4585 = or i1 %4583, %4584
  br i1 %4585, label %originalBBpart21462, label %originalBB1460alteredBB

originalBBpart21462:                              ; preds = %originalBB1460
  br label %4586, !dbg !2300

4586:                                             ; preds = %originalBBpart21462
  %4587 = load i32, i32* @x.35
  %4588 = load i32, i32* @y.36
  %4589 = sub i32 %4587, 1
  %4590 = mul i32 %4587, %4589
  %4591 = urem i32 %4590, 2
  %4592 = icmp eq i32 %4591, 0
  %4593 = icmp slt i32 %4588, 10
  %4594 = or i1 %4592, %4593
  br i1 %4594, label %originalBB1464, label %originalBB1464alteredBB

originalBB1464:                                   ; preds = %4586, %originalBB1464alteredBB
  %4595 = load i32, i32* @x.35
  %4596 = load i32, i32* @y.36
  %4597 = sub i32 %4595, 1
  %4598 = mul i32 %4595, %4597
  %4599 = urem i32 %4598, 2
  %4600 = icmp eq i32 %4599, 0
  %4601 = icmp slt i32 %4596, 10
  %4602 = or i1 %4600, %4601
  br i1 %4602, label %originalBBpart21466, label %originalBB1464alteredBB

originalBBpart21466:                              ; preds = %originalBB1464
  br label %4603, !dbg !2311

4603:                                             ; preds = %originalBBpart21466
  %4604 = load i64, i64* %29, align 8, !dbg !2312
  %4605 = load i64, i64* %20, align 8, !dbg !2312
  %4606 = icmp ult i64 %4604, %4605, !dbg !2312
  br i1 %4606, label %4607, label %4628, !dbg !2315

4607:                                             ; preds = %4603
  %4608 = load i32, i32* @x.35
  %4609 = load i32, i32* @y.36
  %4610 = sub i32 %4608, 1
  %4611 = mul i32 %4608, %4610
  %4612 = urem i32 %4611, 2
  %4613 = icmp eq i32 %4612, 0
  %4614 = icmp slt i32 %4609, 10
  %4615 = or i1 %4613, %4614
  br i1 %4615, label %originalBB1468, label %originalBB1468alteredBB

originalBB1468:                                   ; preds = %4607, %originalBB1468alteredBB
  %4616 = load i8, i8* %39, align 1, !dbg !2312
  %4617 = load i8*, i8** %19, align 8, !dbg !2312
  %4618 = load i64, i64* %29, align 8, !dbg !2312
  %4619 = getelementptr inbounds i8, i8* %4617, i64 %4618, !dbg !2312
  store i8 %4616, i8* %4619, align 1, !dbg !2312
  %4620 = load i32, i32* @x.35
  %4621 = load i32, i32* @y.36
  %4622 = sub i32 %4620, 1
  %4623 = mul i32 %4620, %4622
  %4624 = urem i32 %4623, 2
  %4625 = icmp eq i32 %4624, 0
  %4626 = icmp slt i32 %4621, 10
  %4627 = or i1 %4625, %4626
  br i1 %4627, label %originalBBpart21470, label %originalBB1468alteredBB

originalBBpart21470:                              ; preds = %originalBB1468
  br label %4628, !dbg !2312

4628:                                             ; preds = %originalBBpart21470, %4603
  %4629 = load i32, i32* @x.35
  %4630 = load i32, i32* @y.36
  %4631 = sub i32 %4629, 1
  %4632 = mul i32 %4629, %4631
  %4633 = urem i32 %4632, 2
  %4634 = icmp eq i32 %4633, 0
  %4635 = icmp slt i32 %4630, 10
  %4636 = or i1 %4634, %4635
  br i1 %4636, label %originalBB1472, label %originalBB1472alteredBB

originalBB1472:                                   ; preds = %4628, %originalBB1472alteredBB
  %4637 = load i64, i64* %29, align 8, !dbg !2315
  %4638 = add i64 %4637, 1, !dbg !2315
  store i64 %4638, i64* %29, align 8, !dbg !2315
  %4639 = load i32, i32* @x.35
  %4640 = load i32, i32* @y.36
  %4641 = sub i32 %4639, 1
  %4642 = mul i32 %4639, %4641
  %4643 = urem i32 %4642, 2
  %4644 = icmp eq i32 %4643, 0
  %4645 = icmp slt i32 %4640, 10
  %4646 = or i1 %4644, %4645
  br i1 %4646, label %originalBBpart21485, label %originalBB1472alteredBB

originalBBpart21485:                              ; preds = %originalBB1472
  br label %4647, !dbg !2315

4647:                                             ; preds = %originalBBpart21485
  %4648 = load i8*, i8** %21, align 8, !dbg !2316
  %4649 = load i64, i64* %28, align 8, !dbg !2317
  %4650 = add i64 %4649, 1, !dbg !2317
  store i64 %4650, i64* %28, align 8, !dbg !2317
  %4651 = getelementptr inbounds i8, i8* %4648, i64 %4650, !dbg !2316
  %4652 = load i8, i8* %4651, align 1, !dbg !2316
  store i8 %4652, i8* %39, align 1, !dbg !2318
  br label %3782, !dbg !2319, !llvm.loop !2320

4653:                                             ; preds = %originalBBpart21438
  %4654 = load i32, i32* @x.35
  %4655 = load i32, i32* @y.36
  %4656 = sub i32 %4654, 1
  %4657 = mul i32 %4654, %4656
  %4658 = urem i32 %4657, 2
  %4659 = icmp eq i32 %4658, 0
  %4660 = icmp slt i32 %4655, 10
  %4661 = or i1 %4659, %4660
  br i1 %4661, label %originalBB1487, label %originalBB1487alteredBB

originalBB1487:                                   ; preds = %4653, %originalBB1487alteredBB
  %4662 = load i32, i32* @x.35
  %4663 = load i32, i32* @y.36
  %4664 = sub i32 %4662, 1
  %4665 = mul i32 %4662, %4664
  %4666 = urem i32 %4665, 2
  %4667 = icmp eq i32 %4666, 0
  %4668 = icmp slt i32 %4663, 10
  %4669 = or i1 %4667, %4668
  br i1 %4669, label %originalBBpart21489, label %originalBB1487alteredBB

originalBBpart21489:                              ; preds = %originalBB1487
  br label %5212, !dbg !2323

4670:                                             ; preds = %originalBBpart21190, %3740
  %4671 = load i32, i32* @x.35
  %4672 = load i32, i32* @y.36
  %4673 = sub i32 %4671, 1
  %4674 = mul i32 %4671, %4673
  %4675 = urem i32 %4674, 2
  %4676 = icmp eq i32 %4675, 0
  %4677 = icmp slt i32 %4672, 10
  %4678 = or i1 %4676, %4677
  br i1 %4678, label %originalBB1491, label %originalBB1491alteredBB

originalBB1491:                                   ; preds = %4670, %originalBB1491alteredBB
  %4679 = load i32, i32* @x.35
  %4680 = load i32, i32* @y.36
  %4681 = sub i32 %4679, 1
  %4682 = mul i32 %4679, %4681
  %4683 = urem i32 %4682, 2
  %4684 = icmp eq i32 %4683, 0
  %4685 = icmp slt i32 %4680, 10
  %4686 = or i1 %4684, %4685
  br i1 %4686, label %originalBBpart21493, label %originalBB1491alteredBB

originalBBpart21493:                              ; preds = %originalBB1491
  br label %4687, !dbg !2324

4687:                                             ; preds = %originalBBpart21493, %3101, %originalBBpart2974, %originalBBpart2897, %originalBBpart2877, %originalBBpart2869, %originalBBpart2857, %originalBBpart2773, %originalBBpart2518
  %4688 = load i32, i32* @x.35
  %4689 = load i32, i32* @y.36
  %4690 = sub i32 %4688, 1
  %4691 = mul i32 %4688, %4690
  %4692 = urem i32 %4691, 2
  %4693 = icmp eq i32 %4692, 0
  %4694 = icmp slt i32 %4689, 10
  %4695 = or i1 %4693, %4694
  br i1 %4695, label %originalBB1495, label %originalBB1495alteredBB

originalBB1495:                                   ; preds = %4687, %originalBB1495alteredBB
  %4696 = load i8, i8* %33, align 1, !dbg !2325
  %4697 = trunc i8 %4696 to i1, !dbg !2325
  %4698 = load i32, i32* @x.35
  %4699 = load i32, i32* @y.36
  %4700 = sub i32 %4698, 1
  %4701 = mul i32 %4698, %4700
  %4702 = urem i32 %4701, 2
  %4703 = icmp eq i32 %4702, 0
  %4704 = icmp slt i32 %4699, 10
  %4705 = or i1 %4703, %4704
  br i1 %4705, label %originalBBpart21497, label %originalBB1495alteredBB

originalBBpart21497:                              ; preds = %originalBB1495
  br i1 %4697, label %4706, label %4725, !dbg !2327

4706:                                             ; preds = %originalBBpart21497
  %4707 = load i32, i32* @x.35
  %4708 = load i32, i32* @y.36
  %4709 = sub i32 %4707, 1
  %4710 = mul i32 %4707, %4709
  %4711 = urem i32 %4710, 2
  %4712 = icmp eq i32 %4711, 0
  %4713 = icmp slt i32 %4708, 10
  %4714 = or i1 %4712, %4713
  br i1 %4714, label %originalBB1499, label %originalBB1499alteredBB

originalBB1499:                                   ; preds = %4706, %originalBB1499alteredBB
  %4715 = load i32, i32* %23, align 4, !dbg !2328
  %4716 = icmp ne i32 %4715, 2, !dbg !2329
  %4717 = load i32, i32* @x.35
  %4718 = load i32, i32* @y.36
  %4719 = sub i32 %4717, 1
  %4720 = mul i32 %4717, %4719
  %4721 = urem i32 %4720, 2
  %4722 = icmp eq i32 %4721, 0
  %4723 = icmp slt i32 %4718, 10
  %4724 = or i1 %4722, %4723
  br i1 %4724, label %originalBBpart21501, label %originalBB1499alteredBB

originalBBpart21501:                              ; preds = %originalBB1499
  br i1 %4716, label %4744, label %4725, !dbg !2330

4725:                                             ; preds = %originalBBpart21501, %originalBBpart21497
  %4726 = load i32, i32* @x.35
  %4727 = load i32, i32* @y.36
  %4728 = sub i32 %4726, 1
  %4729 = mul i32 %4726, %4728
  %4730 = urem i32 %4729, 2
  %4731 = icmp eq i32 %4730, 0
  %4732 = icmp slt i32 %4727, 10
  %4733 = or i1 %4731, %4732
  br i1 %4733, label %originalBB1503, label %originalBB1503alteredBB

originalBB1503:                                   ; preds = %4725, %originalBB1503alteredBB
  %4734 = load i8, i8* %35, align 1, !dbg !2331
  %4735 = trunc i8 %4734 to i1, !dbg !2331
  %4736 = load i32, i32* @x.35
  %4737 = load i32, i32* @y.36
  %4738 = sub i32 %4736, 1
  %4739 = mul i32 %4736, %4738
  %4740 = urem i32 %4739, 2
  %4741 = icmp eq i32 %4740, 0
  %4742 = icmp slt i32 %4737, 10
  %4743 = or i1 %4741, %4742
  br i1 %4743, label %originalBBpart21505, label %originalBB1503alteredBB

originalBBpart21505:                              ; preds = %originalBB1503
  br i1 %4735, label %4744, label %4793, !dbg !2332

4744:                                             ; preds = %originalBBpart21505, %originalBBpart21501
  %4745 = load i32, i32* @x.35
  %4746 = load i32, i32* @y.36
  %4747 = sub i32 %4745, 1
  %4748 = mul i32 %4745, %4747
  %4749 = urem i32 %4748, 2
  %4750 = icmp eq i32 %4749, 0
  %4751 = icmp slt i32 %4746, 10
  %4752 = or i1 %4750, %4751
  br i1 %4752, label %originalBB1507, label %originalBB1507alteredBB

originalBB1507:                                   ; preds = %4744, %originalBB1507alteredBB
  %4753 = load i32*, i32** %25, align 8, !dbg !2333
  %4754 = icmp ne i32* %4753, null, !dbg !2333
  %4755 = load i32, i32* @x.35
  %4756 = load i32, i32* @y.36
  %4757 = sub i32 %4755, 1
  %4758 = mul i32 %4755, %4757
  %4759 = urem i32 %4758, 2
  %4760 = icmp eq i32 %4759, 0
  %4761 = icmp slt i32 %4756, 10
  %4762 = or i1 %4760, %4761
  br i1 %4762, label %originalBBpart21509, label %originalBB1507alteredBB

originalBBpart21509:                              ; preds = %originalBB1507
  br i1 %4754, label %4763, label %4793, !dbg !2334

4763:                                             ; preds = %originalBBpart21509
  %4764 = load i32, i32* @x.35
  %4765 = load i32, i32* @y.36
  %4766 = sub i32 %4764, 1
  %4767 = mul i32 %4764, %4766
  %4768 = urem i32 %4767, 2
  %4769 = icmp eq i32 %4768, 0
  %4770 = icmp slt i32 %4765, 10
  %4771 = or i1 %4769, %4770
  br i1 %4771, label %originalBB1511, label %originalBB1511alteredBB

originalBB1511:                                   ; preds = %4763, %originalBB1511alteredBB
  %4772 = load i32*, i32** %25, align 8, !dbg !2335
  %4773 = load i8, i8* %39, align 1, !dbg !2336
  %4774 = zext i8 %4773 to i64, !dbg !2336
  %4775 = udiv i64 %4774, 32, !dbg !2337
  %4776 = getelementptr inbounds i32, i32* %4772, i64 %4775, !dbg !2335
  %4777 = load i32, i32* %4776, align 4, !dbg !2335
  %4778 = load i8, i8* %39, align 1, !dbg !2338
  %4779 = zext i8 %4778 to i64, !dbg !2338
  %4780 = urem i64 %4779, 32, !dbg !2339
  %4781 = trunc i64 %4780 to i32, !dbg !2340
  %4782 = lshr i32 %4777, %4781, !dbg !2340
  %4783 = and i32 %4782, 1, !dbg !2341
  %4784 = icmp ne i32 %4783, 0, !dbg !2341
  %4785 = load i32, i32* @x.35
  %4786 = load i32, i32* @y.36
  %4787 = sub i32 %4785, 1
  %4788 = mul i32 %4785, %4787
  %4789 = urem i32 %4788, 2
  %4790 = icmp eq i32 %4789, 0
  %4791 = icmp slt i32 %4786, 10
  %4792 = or i1 %4790, %4791
  br i1 %4792, label %originalBBpart21542, label %originalBB1511alteredBB

originalBBpart21542:                              ; preds = %originalBB1511
  br i1 %4784, label %4829, label %4793, !dbg !2342

4793:                                             ; preds = %originalBBpart21542, %originalBBpart21509, %originalBBpart21505
  %4794 = load i32, i32* @x.35
  %4795 = load i32, i32* @y.36
  %4796 = sub i32 %4794, 1
  %4797 = mul i32 %4794, %4796
  %4798 = urem i32 %4797, 2
  %4799 = icmp eq i32 %4798, 0
  %4800 = icmp slt i32 %4795, 10
  %4801 = or i1 %4799, %4800
  br i1 %4801, label %originalBB1544, label %originalBB1544alteredBB

originalBB1544:                                   ; preds = %4793, %originalBB1544alteredBB
  %4802 = load i8, i8* %41, align 1, !dbg !2343
  %4803 = trunc i8 %4802 to i1, !dbg !2343
  %4804 = load i32, i32* @x.35
  %4805 = load i32, i32* @y.36
  %4806 = sub i32 %4804, 1
  %4807 = mul i32 %4804, %4806
  %4808 = urem i32 %4807, 2
  %4809 = icmp eq i32 %4808, 0
  %4810 = icmp slt i32 %4805, 10
  %4811 = or i1 %4809, %4810
  br i1 %4811, label %originalBBpart21546, label %originalBB1544alteredBB

originalBBpart21546:                              ; preds = %originalBB1544
  br i1 %4803, label %4829, label %4812, !dbg !2344

4812:                                             ; preds = %originalBBpart21546
  %4813 = load i32, i32* @x.35
  %4814 = load i32, i32* @y.36
  %4815 = sub i32 %4813, 1
  %4816 = mul i32 %4813, %4815
  %4817 = urem i32 %4816, 2
  %4818 = icmp eq i32 %4817, 0
  %4819 = icmp slt i32 %4814, 10
  %4820 = or i1 %4818, %4819
  br i1 %4820, label %originalBB1548, label %originalBB1548alteredBB

originalBB1548:                                   ; preds = %4812, %originalBB1548alteredBB
  %4821 = load i32, i32* @x.35
  %4822 = load i32, i32* @y.36
  %4823 = sub i32 %4821, 1
  %4824 = mul i32 %4821, %4823
  %4825 = urem i32 %4824, 2
  %4826 = icmp eq i32 %4825, 0
  %4827 = icmp slt i32 %4822, 10
  %4828 = or i1 %4826, %4827
  br i1 %4828, label %originalBBpart21550, label %originalBB1548alteredBB

originalBBpart21550:                              ; preds = %originalBB1548
  br label %5212, !dbg !2345

4829:                                             ; preds = %originalBBpart21546, %originalBBpart21542
  %4830 = load i32, i32* @x.35
  %4831 = load i32, i32* @y.36
  %4832 = sub i32 %4830, 1
  %4833 = mul i32 %4830, %4832
  %4834 = urem i32 %4833, 2
  %4835 = icmp eq i32 %4834, 0
  %4836 = icmp slt i32 %4831, 10
  %4837 = or i1 %4835, %4836
  br i1 %4837, label %originalBB1552, label %originalBB1552alteredBB

originalBB1552:                                   ; preds = %4829, %originalBB1552alteredBB
  %4838 = load i32, i32* @x.35
  %4839 = load i32, i32* @y.36
  %4840 = sub i32 %4838, 1
  %4841 = mul i32 %4838, %4840
  %4842 = urem i32 %4841, 2
  %4843 = icmp eq i32 %4842, 0
  %4844 = icmp slt i32 %4839, 10
  %4845 = or i1 %4843, %4844
  br i1 %4845, label %originalBBpart21554, label %originalBB1552alteredBB

originalBBpart21554:                              ; preds = %originalBB1552
  br label %4846, !dbg !2343

4846:                                             ; preds = %originalBBpart21554, %originalBBpart2853
  call void @llvm.dbg.label(metadata !2346), !dbg !2347
  %4847 = load i32, i32* @x.35
  %4848 = load i32, i32* @y.36
  %4849 = sub i32 %4847, 1
  %4850 = mul i32 %4847, %4849
  %4851 = urem i32 %4850, 2
  %4852 = icmp eq i32 %4851, 0
  %4853 = icmp slt i32 %4848, 10
  %4854 = or i1 %4852, %4853
  br i1 %4854, label %originalBB1556, label %originalBB1556alteredBB

originalBB1556:                                   ; preds = %4846, %originalBB1556alteredBB
  %4855 = load i32, i32* @x.35
  %4856 = load i32, i32* @y.36
  %4857 = sub i32 %4855, 1
  %4858 = mul i32 %4855, %4857
  %4859 = urem i32 %4858, 2
  %4860 = icmp eq i32 %4859, 0
  %4861 = icmp slt i32 %4856, 10
  %4862 = or i1 %4860, %4861
  br i1 %4862, label %originalBBpart21558, label %originalBB1556alteredBB

originalBBpart21558:                              ; preds = %originalBB1556
  br label %4863, !dbg !2348

4863:                                             ; preds = %originalBBpart21558
  %4864 = load i32, i32* @x.35
  %4865 = load i32, i32* @y.36
  %4866 = sub i32 %4864, 1
  %4867 = mul i32 %4864, %4866
  %4868 = urem i32 %4867, 2
  %4869 = icmp eq i32 %4868, 0
  %4870 = icmp slt i32 %4865, 10
  %4871 = or i1 %4869, %4870
  br i1 %4871, label %originalBB1560, label %originalBB1560alteredBB

originalBB1560:                                   ; preds = %4863, %originalBB1560alteredBB
  %4872 = load i8, i8* %35, align 1, !dbg !2349
  %4873 = trunc i8 %4872 to i1, !dbg !2349
  %4874 = load i32, i32* @x.35
  %4875 = load i32, i32* @y.36
  %4876 = sub i32 %4874, 1
  %4877 = mul i32 %4874, %4876
  %4878 = urem i32 %4877, 2
  %4879 = icmp eq i32 %4878, 0
  %4880 = icmp slt i32 %4875, 10
  %4881 = or i1 %4879, %4880
  br i1 %4881, label %originalBBpart21562, label %originalBB1560alteredBB

originalBBpart21562:                              ; preds = %originalBB1560
  br i1 %4873, label %4882, label %4899, !dbg !2352

4882:                                             ; preds = %originalBBpart21562
  %4883 = load i32, i32* @x.35
  %4884 = load i32, i32* @y.36
  %4885 = sub i32 %4883, 1
  %4886 = mul i32 %4883, %4885
  %4887 = urem i32 %4886, 2
  %4888 = icmp eq i32 %4887, 0
  %4889 = icmp slt i32 %4884, 10
  %4890 = or i1 %4888, %4889
  br i1 %4890, label %originalBB1564, label %originalBB1564alteredBB

originalBB1564:                                   ; preds = %4882, %originalBB1564alteredBB
  %4891 = load i32, i32* @x.35
  %4892 = load i32, i32* @y.36
  %4893 = sub i32 %4891, 1
  %4894 = mul i32 %4891, %4893
  %4895 = urem i32 %4894, 2
  %4896 = icmp eq i32 %4895, 0
  %4897 = icmp slt i32 %4892, 10
  %4898 = or i1 %4896, %4897
  br i1 %4898, label %originalBBpart21566, label %originalBB1564alteredBB

originalBBpart21566:                              ; preds = %originalBB1564
  br label %6021, !dbg !2349

4899:                                             ; preds = %originalBBpart21562
  %4900 = load i32, i32* @x.35
  %4901 = load i32, i32* @y.36
  %4902 = sub i32 %4900, 1
  %4903 = mul i32 %4900, %4902
  %4904 = urem i32 %4903, 2
  %4905 = icmp eq i32 %4904, 0
  %4906 = icmp slt i32 %4901, 10
  %4907 = or i1 %4905, %4906
  br i1 %4907, label %originalBB1568, label %originalBB1568alteredBB

originalBB1568:                                   ; preds = %4899, %originalBB1568alteredBB
  store i8 1, i8* %42, align 1, !dbg !2352
  %4908 = load i32, i32* %23, align 4, !dbg !2353
  %4909 = icmp eq i32 %4908, 2, !dbg !2353
  %4910 = load i32, i32* @x.35
  %4911 = load i32, i32* @y.36
  %4912 = sub i32 %4910, 1
  %4913 = mul i32 %4910, %4912
  %4914 = urem i32 %4913, 2
  %4915 = icmp eq i32 %4914, 0
  %4916 = icmp slt i32 %4911, 10
  %4917 = or i1 %4915, %4916
  br i1 %4917, label %originalBBpart21570, label %originalBB1568alteredBB

originalBBpart21570:                              ; preds = %originalBB1568
  br i1 %4909, label %4918, label %5134, !dbg !2353

4918:                                             ; preds = %originalBBpart21570
  %4919 = load i32, i32* @x.35
  %4920 = load i32, i32* @y.36
  %4921 = sub i32 %4919, 1
  %4922 = mul i32 %4919, %4921
  %4923 = urem i32 %4922, 2
  %4924 = icmp eq i32 %4923, 0
  %4925 = icmp slt i32 %4920, 10
  %4926 = or i1 %4924, %4925
  br i1 %4926, label %originalBB1572, label %originalBB1572alteredBB

originalBB1572:                                   ; preds = %4918, %originalBB1572alteredBB
  %4927 = load i8, i8* %36, align 1, !dbg !2353
  %4928 = trunc i8 %4927 to i1, !dbg !2353
  %4929 = load i32, i32* @x.35
  %4930 = load i32, i32* @y.36
  %4931 = sub i32 %4929, 1
  %4932 = mul i32 %4929, %4931
  %4933 = urem i32 %4932, 2
  %4934 = icmp eq i32 %4933, 0
  %4935 = icmp slt i32 %4930, 10
  %4936 = or i1 %4934, %4935
  br i1 %4936, label %originalBBpart21574, label %originalBB1572alteredBB

originalBBpart21574:                              ; preds = %originalBB1572
  br i1 %4928, label %5134, label %4937, !dbg !2352

4937:                                             ; preds = %originalBBpart21574
  %4938 = load i32, i32* @x.35
  %4939 = load i32, i32* @y.36
  %4940 = sub i32 %4938, 1
  %4941 = mul i32 %4938, %4940
  %4942 = urem i32 %4941, 2
  %4943 = icmp eq i32 %4942, 0
  %4944 = icmp slt i32 %4939, 10
  %4945 = or i1 %4943, %4944
  br i1 %4945, label %originalBB1576, label %originalBB1576alteredBB

originalBB1576:                                   ; preds = %4937, %originalBB1576alteredBB
  %4946 = load i32, i32* @x.35
  %4947 = load i32, i32* @y.36
  %4948 = sub i32 %4946, 1
  %4949 = mul i32 %4946, %4948
  %4950 = urem i32 %4949, 2
  %4951 = icmp eq i32 %4950, 0
  %4952 = icmp slt i32 %4947, 10
  %4953 = or i1 %4951, %4952
  br i1 %4953, label %originalBBpart21578, label %originalBB1576alteredBB

originalBBpart21578:                              ; preds = %originalBB1576
  br label %4954, !dbg !2355

4954:                                             ; preds = %originalBBpart21578
  %4955 = load i32, i32* @x.35
  %4956 = load i32, i32* @y.36
  %4957 = sub i32 %4955, 1
  %4958 = mul i32 %4955, %4957
  %4959 = urem i32 %4958, 2
  %4960 = icmp eq i32 %4959, 0
  %4961 = icmp slt i32 %4956, 10
  %4962 = or i1 %4960, %4961
  br i1 %4962, label %originalBB1580, label %originalBB1580alteredBB

originalBB1580:                                   ; preds = %4954, %originalBB1580alteredBB
  %4963 = load i64, i64* %29, align 8, !dbg !2357
  %4964 = load i64, i64* %20, align 8, !dbg !2357
  %4965 = icmp ult i64 %4963, %4964, !dbg !2357
  %4966 = load i32, i32* @x.35
  %4967 = load i32, i32* @y.36
  %4968 = sub i32 %4966, 1
  %4969 = mul i32 %4966, %4968
  %4970 = urem i32 %4969, 2
  %4971 = icmp eq i32 %4970, 0
  %4972 = icmp slt i32 %4967, 10
  %4973 = or i1 %4971, %4972
  br i1 %4973, label %originalBBpart21582, label %originalBB1580alteredBB

originalBBpart21582:                              ; preds = %originalBB1580
  br i1 %4965, label %4974, label %4994, !dbg !2360

4974:                                             ; preds = %originalBBpart21582
  %4975 = load i32, i32* @x.35
  %4976 = load i32, i32* @y.36
  %4977 = sub i32 %4975, 1
  %4978 = mul i32 %4975, %4977
  %4979 = urem i32 %4978, 2
  %4980 = icmp eq i32 %4979, 0
  %4981 = icmp slt i32 %4976, 10
  %4982 = or i1 %4980, %4981
  br i1 %4982, label %originalBB1584, label %originalBB1584alteredBB

originalBB1584:                                   ; preds = %4974, %originalBB1584alteredBB
  %4983 = load i8*, i8** %19, align 8, !dbg !2357
  %4984 = load i64, i64* %29, align 8, !dbg !2357
  %4985 = getelementptr inbounds i8, i8* %4983, i64 %4984, !dbg !2357
  store i8 39, i8* %4985, align 1, !dbg !2357
  %4986 = load i32, i32* @x.35
  %4987 = load i32, i32* @y.36
  %4988 = sub i32 %4986, 1
  %4989 = mul i32 %4986, %4988
  %4990 = urem i32 %4989, 2
  %4991 = icmp eq i32 %4990, 0
  %4992 = icmp slt i32 %4987, 10
  %4993 = or i1 %4991, %4992
  br i1 %4993, label %originalBBpart21586, label %originalBB1584alteredBB

originalBBpart21586:                              ; preds = %originalBB1584
  br label %4994, !dbg !2357

4994:                                             ; preds = %originalBBpart21586, %originalBBpart21582
  %4995 = load i32, i32* @x.35
  %4996 = load i32, i32* @y.36
  %4997 = sub i32 %4995, 1
  %4998 = mul i32 %4995, %4997
  %4999 = urem i32 %4998, 2
  %5000 = icmp eq i32 %4999, 0
  %5001 = icmp slt i32 %4996, 10
  %5002 = or i1 %5000, %5001
  br i1 %5002, label %originalBB1588, label %originalBB1588alteredBB

originalBB1588:                                   ; preds = %4994, %originalBB1588alteredBB
  %5003 = load i64, i64* %29, align 8, !dbg !2360
  %5004 = add i64 %5003, 1, !dbg !2360
  store i64 %5004, i64* %29, align 8, !dbg !2360
  %5005 = load i32, i32* @x.35
  %5006 = load i32, i32* @y.36
  %5007 = sub i32 %5005, 1
  %5008 = mul i32 %5005, %5007
  %5009 = urem i32 %5008, 2
  %5010 = icmp eq i32 %5009, 0
  %5011 = icmp slt i32 %5006, 10
  %5012 = or i1 %5010, %5011
  br i1 %5012, label %originalBBpart21599, label %originalBB1588alteredBB

originalBBpart21599:                              ; preds = %originalBB1588
  br label %5013, !dbg !2360

5013:                                             ; preds = %originalBBpart21599
  %5014 = load i32, i32* @x.35
  %5015 = load i32, i32* @y.36
  %5016 = sub i32 %5014, 1
  %5017 = mul i32 %5014, %5016
  %5018 = urem i32 %5017, 2
  %5019 = icmp eq i32 %5018, 0
  %5020 = icmp slt i32 %5015, 10
  %5021 = or i1 %5019, %5020
  br i1 %5021, label %originalBB1601, label %originalBB1601alteredBB

originalBB1601:                                   ; preds = %5013, %originalBB1601alteredBB
  %5022 = load i32, i32* @x.35
  %5023 = load i32, i32* @y.36
  %5024 = sub i32 %5022, 1
  %5025 = mul i32 %5022, %5024
  %5026 = urem i32 %5025, 2
  %5027 = icmp eq i32 %5026, 0
  %5028 = icmp slt i32 %5023, 10
  %5029 = or i1 %5027, %5028
  br i1 %5029, label %originalBBpart21603, label %originalBB1601alteredBB

originalBBpart21603:                              ; preds = %originalBB1601
  br label %5030, !dbg !2355

5030:                                             ; preds = %originalBBpart21603
  %5031 = load i32, i32* @x.35
  %5032 = load i32, i32* @y.36
  %5033 = sub i32 %5031, 1
  %5034 = mul i32 %5031, %5033
  %5035 = urem i32 %5034, 2
  %5036 = icmp eq i32 %5035, 0
  %5037 = icmp slt i32 %5032, 10
  %5038 = or i1 %5036, %5037
  br i1 %5038, label %originalBB1605, label %originalBB1605alteredBB

originalBB1605:                                   ; preds = %5030, %originalBB1605alteredBB
  %5039 = load i64, i64* %29, align 8, !dbg !2361
  %5040 = load i64, i64* %20, align 8, !dbg !2361
  %5041 = icmp ult i64 %5039, %5040, !dbg !2361
  %5042 = load i32, i32* @x.35
  %5043 = load i32, i32* @y.36
  %5044 = sub i32 %5042, 1
  %5045 = mul i32 %5042, %5044
  %5046 = urem i32 %5045, 2
  %5047 = icmp eq i32 %5046, 0
  %5048 = icmp slt i32 %5043, 10
  %5049 = or i1 %5047, %5048
  br i1 %5049, label %originalBBpart21607, label %originalBB1605alteredBB

originalBBpart21607:                              ; preds = %originalBB1605
  br i1 %5041, label %5050, label %5070, !dbg !2364

5050:                                             ; preds = %originalBBpart21607
  %5051 = load i32, i32* @x.35
  %5052 = load i32, i32* @y.36
  %5053 = sub i32 %5051, 1
  %5054 = mul i32 %5051, %5053
  %5055 = urem i32 %5054, 2
  %5056 = icmp eq i32 %5055, 0
  %5057 = icmp slt i32 %5052, 10
  %5058 = or i1 %5056, %5057
  br i1 %5058, label %originalBB1609, label %originalBB1609alteredBB

originalBB1609:                                   ; preds = %5050, %originalBB1609alteredBB
  %5059 = load i8*, i8** %19, align 8, !dbg !2361
  %5060 = load i64, i64* %29, align 8, !dbg !2361
  %5061 = getelementptr inbounds i8, i8* %5059, i64 %5060, !dbg !2361
  store i8 36, i8* %5061, align 1, !dbg !2361
  %5062 = load i32, i32* @x.35
  %5063 = load i32, i32* @y.36
  %5064 = sub i32 %5062, 1
  %5065 = mul i32 %5062, %5064
  %5066 = urem i32 %5065, 2
  %5067 = icmp eq i32 %5066, 0
  %5068 = icmp slt i32 %5063, 10
  %5069 = or i1 %5067, %5068
  br i1 %5069, label %originalBBpart21611, label %originalBB1609alteredBB

originalBBpart21611:                              ; preds = %originalBB1609
  br label %5070, !dbg !2361

5070:                                             ; preds = %originalBBpart21611, %originalBBpart21607
  %5071 = load i64, i64* %29, align 8, !dbg !2364
  %5072 = add i64 %5071, 1, !dbg !2364
  store i64 %5072, i64* %29, align 8, !dbg !2364
  br label %5073, !dbg !2364

5073:                                             ; preds = %5070
  br label %5074, !dbg !2355

5074:                                             ; preds = %5073
  %5075 = load i64, i64* %29, align 8, !dbg !2365
  %5076 = load i64, i64* %20, align 8, !dbg !2365
  %5077 = icmp ult i64 %5075, %5076, !dbg !2365
  br i1 %5077, label %5078, label %5098, !dbg !2368

5078:                                             ; preds = %5074
  %5079 = load i32, i32* @x.35
  %5080 = load i32, i32* @y.36
  %5081 = sub i32 %5079, 1
  %5082 = mul i32 %5079, %5081
  %5083 = urem i32 %5082, 2
  %5084 = icmp eq i32 %5083, 0
  %5085 = icmp slt i32 %5080, 10
  %5086 = or i1 %5084, %5085
  br i1 %5086, label %originalBB1613, label %originalBB1613alteredBB

originalBB1613:                                   ; preds = %5078, %originalBB1613alteredBB
  %5087 = load i8*, i8** %19, align 8, !dbg !2365
  %5088 = load i64, i64* %29, align 8, !dbg !2365
  %5089 = getelementptr inbounds i8, i8* %5087, i64 %5088, !dbg !2365
  store i8 39, i8* %5089, align 1, !dbg !2365
  %5090 = load i32, i32* @x.35
  %5091 = load i32, i32* @y.36
  %5092 = sub i32 %5090, 1
  %5093 = mul i32 %5090, %5092
  %5094 = urem i32 %5093, 2
  %5095 = icmp eq i32 %5094, 0
  %5096 = icmp slt i32 %5091, 10
  %5097 = or i1 %5095, %5096
  br i1 %5097, label %originalBBpart21615, label %originalBB1613alteredBB

originalBBpart21615:                              ; preds = %originalBB1613
  br label %5098, !dbg !2365

5098:                                             ; preds = %originalBBpart21615, %5074
  %5099 = load i32, i32* @x.35
  %5100 = load i32, i32* @y.36
  %5101 = sub i32 %5099, 1
  %5102 = mul i32 %5099, %5101
  %5103 = urem i32 %5102, 2
  %5104 = icmp eq i32 %5103, 0
  %5105 = icmp slt i32 %5100, 10
  %5106 = or i1 %5104, %5105
  br i1 %5106, label %originalBB1617, label %originalBB1617alteredBB

originalBB1617:                                   ; preds = %5098, %originalBB1617alteredBB
  %5107 = load i64, i64* %29, align 8, !dbg !2368
  %5108 = add i64 %5107, 1, !dbg !2368
  store i64 %5108, i64* %29, align 8, !dbg !2368
  %5109 = load i32, i32* @x.35
  %5110 = load i32, i32* @y.36
  %5111 = sub i32 %5109, 1
  %5112 = mul i32 %5109, %5111
  %5113 = urem i32 %5112, 2
  %5114 = icmp eq i32 %5113, 0
  %5115 = icmp slt i32 %5110, 10
  %5116 = or i1 %5114, %5115
  br i1 %5116, label %originalBBpart21629, label %originalBB1617alteredBB

originalBBpart21629:                              ; preds = %originalBB1617
  br label %5117, !dbg !2368

5117:                                             ; preds = %originalBBpart21629
  %5118 = load i32, i32* @x.35
  %5119 = load i32, i32* @y.36
  %5120 = sub i32 %5118, 1
  %5121 = mul i32 %5118, %5120
  %5122 = urem i32 %5121, 2
  %5123 = icmp eq i32 %5122, 0
  %5124 = icmp slt i32 %5119, 10
  %5125 = or i1 %5123, %5124
  br i1 %5125, label %originalBB1631, label %originalBB1631alteredBB

originalBB1631:                                   ; preds = %5117, %originalBB1631alteredBB
  store i8 1, i8* %36, align 1, !dbg !2355
  %5126 = load i32, i32* @x.35
  %5127 = load i32, i32* @y.36
  %5128 = sub i32 %5126, 1
  %5129 = mul i32 %5126, %5128
  %5130 = urem i32 %5129, 2
  %5131 = icmp eq i32 %5130, 0
  %5132 = icmp slt i32 %5127, 10
  %5133 = or i1 %5131, %5132
  br i1 %5133, label %originalBBpart21633, label %originalBB1631alteredBB

originalBBpart21633:                              ; preds = %originalBB1631
  br label %5134, !dbg !2355

5134:                                             ; preds = %originalBBpart21633, %originalBBpart21574, %originalBBpart21570
  %5135 = load i32, i32* @x.35
  %5136 = load i32, i32* @y.36
  %5137 = sub i32 %5135, 1
  %5138 = mul i32 %5135, %5137
  %5139 = urem i32 %5138, 2
  %5140 = icmp eq i32 %5139, 0
  %5141 = icmp slt i32 %5136, 10
  %5142 = or i1 %5140, %5141
  br i1 %5142, label %originalBB1635, label %originalBB1635alteredBB

originalBB1635:                                   ; preds = %5134, %originalBB1635alteredBB
  %5143 = load i32, i32* @x.35
  %5144 = load i32, i32* @y.36
  %5145 = sub i32 %5143, 1
  %5146 = mul i32 %5143, %5145
  %5147 = urem i32 %5146, 2
  %5148 = icmp eq i32 %5147, 0
  %5149 = icmp slt i32 %5144, 10
  %5150 = or i1 %5148, %5149
  br i1 %5150, label %originalBBpart21637, label %originalBB1635alteredBB

originalBBpart21637:                              ; preds = %originalBB1635
  br label %5151, !dbg !2352

5151:                                             ; preds = %originalBBpart21637
  %5152 = load i64, i64* %29, align 8, !dbg !2369
  %5153 = load i64, i64* %20, align 8, !dbg !2369
  %5154 = icmp ult i64 %5152, %5153, !dbg !2369
  br i1 %5154, label %5155, label %5175, !dbg !2372

5155:                                             ; preds = %5151
  %5156 = load i32, i32* @x.35
  %5157 = load i32, i32* @y.36
  %5158 = sub i32 %5156, 1
  %5159 = mul i32 %5156, %5158
  %5160 = urem i32 %5159, 2
  %5161 = icmp eq i32 %5160, 0
  %5162 = icmp slt i32 %5157, 10
  %5163 = or i1 %5161, %5162
  br i1 %5163, label %originalBB1639, label %originalBB1639alteredBB

originalBB1639:                                   ; preds = %5155, %originalBB1639alteredBB
  %5164 = load i8*, i8** %19, align 8, !dbg !2369
  %5165 = load i64, i64* %29, align 8, !dbg !2369
  %5166 = getelementptr inbounds i8, i8* %5164, i64 %5165, !dbg !2369
  store i8 92, i8* %5166, align 1, !dbg !2369
  %5167 = load i32, i32* @x.35
  %5168 = load i32, i32* @y.36
  %5169 = sub i32 %5167, 1
  %5170 = mul i32 %5167, %5169
  %5171 = urem i32 %5170, 2
  %5172 = icmp eq i32 %5171, 0
  %5173 = icmp slt i32 %5168, 10
  %5174 = or i1 %5172, %5173
  br i1 %5174, label %originalBBpart21641, label %originalBB1639alteredBB

originalBBpart21641:                              ; preds = %originalBB1639
  br label %5175, !dbg !2369

5175:                                             ; preds = %originalBBpart21641, %5151
  %5176 = load i32, i32* @x.35
  %5177 = load i32, i32* @y.36
  %5178 = sub i32 %5176, 1
  %5179 = mul i32 %5176, %5178
  %5180 = urem i32 %5179, 2
  %5181 = icmp eq i32 %5180, 0
  %5182 = icmp slt i32 %5177, 10
  %5183 = or i1 %5181, %5182
  br i1 %5183, label %originalBB1643, label %originalBB1643alteredBB

originalBB1643:                                   ; preds = %5175, %originalBB1643alteredBB
  %5184 = load i64, i64* %29, align 8, !dbg !2372
  %5185 = add i64 %5184, 1, !dbg !2372
  store i64 %5185, i64* %29, align 8, !dbg !2372
  %5186 = load i32, i32* @x.35
  %5187 = load i32, i32* @y.36
  %5188 = sub i32 %5186, 1
  %5189 = mul i32 %5186, %5188
  %5190 = urem i32 %5189, 2
  %5191 = icmp eq i32 %5190, 0
  %5192 = icmp slt i32 %5187, 10
  %5193 = or i1 %5191, %5192
  br i1 %5193, label %originalBBpart21654, label %originalBB1643alteredBB

originalBBpart21654:                              ; preds = %originalBB1643
  br label %5194, !dbg !2372

5194:                                             ; preds = %originalBBpart21654
  %5195 = load i32, i32* @x.35
  %5196 = load i32, i32* @y.36
  %5197 = sub i32 %5195, 1
  %5198 = mul i32 %5195, %5197
  %5199 = urem i32 %5198, 2
  %5200 = icmp eq i32 %5199, 0
  %5201 = icmp slt i32 %5196, 10
  %5202 = or i1 %5200, %5201
  br i1 %5202, label %originalBB1656, label %originalBB1656alteredBB

originalBB1656:                                   ; preds = %5194, %originalBB1656alteredBB
  %5203 = load i32, i32* @x.35
  %5204 = load i32, i32* @y.36
  %5205 = sub i32 %5203, 1
  %5206 = mul i32 %5203, %5205
  %5207 = urem i32 %5206, 2
  %5208 = icmp eq i32 %5207, 0
  %5209 = icmp slt i32 %5204, 10
  %5210 = or i1 %5208, %5209
  br i1 %5210, label %originalBBpart21658, label %originalBB1656alteredBB

originalBBpart21658:                              ; preds = %originalBB1656
  br label %5211, !dbg !2352

5211:                                             ; preds = %originalBBpart21658
  br label %5212, !dbg !2352

5212:                                             ; preds = %5211, %originalBBpart21550, %originalBBpart21489, %originalBBpart2825, %originalBBpart2809
  call void @llvm.dbg.label(metadata !2373), !dbg !2374
  %5213 = load i32, i32* @x.35
  %5214 = load i32, i32* @y.36
  %5215 = sub i32 %5213, 1
  %5216 = mul i32 %5213, %5215
  %5217 = urem i32 %5216, 2
  %5218 = icmp eq i32 %5217, 0
  %5219 = icmp slt i32 %5214, 10
  %5220 = or i1 %5218, %5219
  br i1 %5220, label %originalBB1660, label %originalBB1660alteredBB

originalBB1660:                                   ; preds = %5212, %originalBB1660alteredBB
  %5221 = load i32, i32* @x.35
  %5222 = load i32, i32* @y.36
  %5223 = sub i32 %5221, 1
  %5224 = mul i32 %5221, %5223
  %5225 = urem i32 %5224, 2
  %5226 = icmp eq i32 %5225, 0
  %5227 = icmp slt i32 %5222, 10
  %5228 = or i1 %5226, %5227
  br i1 %5228, label %originalBBpart21662, label %originalBB1660alteredBB

originalBBpart21662:                              ; preds = %originalBB1660
  br label %5229, !dbg !2375

5229:                                             ; preds = %originalBBpart21662
  %5230 = load i32, i32* @x.35
  %5231 = load i32, i32* @y.36
  %5232 = sub i32 %5230, 1
  %5233 = mul i32 %5230, %5232
  %5234 = urem i32 %5233, 2
  %5235 = icmp eq i32 %5234, 0
  %5236 = icmp slt i32 %5231, 10
  %5237 = or i1 %5235, %5236
  br i1 %5237, label %originalBB1664, label %originalBB1664alteredBB

originalBB1664:                                   ; preds = %5229, %originalBB1664alteredBB
  %5238 = load i8, i8* %36, align 1, !dbg !2376
  %5239 = trunc i8 %5238 to i1, !dbg !2376
  %5240 = load i32, i32* @x.35
  %5241 = load i32, i32* @y.36
  %5242 = sub i32 %5240, 1
  %5243 = mul i32 %5240, %5242
  %5244 = urem i32 %5243, 2
  %5245 = icmp eq i32 %5244, 0
  %5246 = icmp slt i32 %5241, 10
  %5247 = or i1 %5245, %5246
  br i1 %5247, label %originalBBpart21666, label %originalBB1664alteredBB

originalBBpart21666:                              ; preds = %originalBB1664
  br i1 %5239, label %5248, label %5372, !dbg !2376

5248:                                             ; preds = %originalBBpart21666
  %5249 = load i32, i32* @x.35
  %5250 = load i32, i32* @y.36
  %5251 = sub i32 %5249, 1
  %5252 = mul i32 %5249, %5251
  %5253 = urem i32 %5252, 2
  %5254 = icmp eq i32 %5253, 0
  %5255 = icmp slt i32 %5250, 10
  %5256 = or i1 %5254, %5255
  br i1 %5256, label %originalBB1668, label %originalBB1668alteredBB

originalBB1668:                                   ; preds = %5248, %originalBB1668alteredBB
  %5257 = load i8, i8* %42, align 1, !dbg !2376
  %5258 = trunc i8 %5257 to i1, !dbg !2376
  %5259 = load i32, i32* @x.35
  %5260 = load i32, i32* @y.36
  %5261 = sub i32 %5259, 1
  %5262 = mul i32 %5259, %5261
  %5263 = urem i32 %5262, 2
  %5264 = icmp eq i32 %5263, 0
  %5265 = icmp slt i32 %5260, 10
  %5266 = or i1 %5264, %5265
  br i1 %5266, label %originalBBpart21670, label %originalBB1668alteredBB

originalBBpart21670:                              ; preds = %originalBB1668
  br i1 %5258, label %5372, label %5267, !dbg !2379

5267:                                             ; preds = %originalBBpart21670
  br label %5268, !dbg !2380

5268:                                             ; preds = %5267
  %5269 = load i32, i32* @x.35
  %5270 = load i32, i32* @y.36
  %5271 = sub i32 %5269, 1
  %5272 = mul i32 %5269, %5271
  %5273 = urem i32 %5272, 2
  %5274 = icmp eq i32 %5273, 0
  %5275 = icmp slt i32 %5270, 10
  %5276 = or i1 %5274, %5275
  br i1 %5276, label %originalBB1672, label %originalBB1672alteredBB

originalBB1672:                                   ; preds = %5268, %originalBB1672alteredBB
  %5277 = load i64, i64* %29, align 8, !dbg !2382
  %5278 = load i64, i64* %20, align 8, !dbg !2382
  %5279 = icmp ult i64 %5277, %5278, !dbg !2382
  %5280 = load i32, i32* @x.35
  %5281 = load i32, i32* @y.36
  %5282 = sub i32 %5280, 1
  %5283 = mul i32 %5280, %5282
  %5284 = urem i32 %5283, 2
  %5285 = icmp eq i32 %5284, 0
  %5286 = icmp slt i32 %5281, 10
  %5287 = or i1 %5285, %5286
  br i1 %5287, label %originalBBpart21674, label %originalBB1672alteredBB

originalBBpart21674:                              ; preds = %originalBB1672
  br i1 %5279, label %5288, label %5308, !dbg !2385

5288:                                             ; preds = %originalBBpart21674
  %5289 = load i32, i32* @x.35
  %5290 = load i32, i32* @y.36
  %5291 = sub i32 %5289, 1
  %5292 = mul i32 %5289, %5291
  %5293 = urem i32 %5292, 2
  %5294 = icmp eq i32 %5293, 0
  %5295 = icmp slt i32 %5290, 10
  %5296 = or i1 %5294, %5295
  br i1 %5296, label %originalBB1676, label %originalBB1676alteredBB

originalBB1676:                                   ; preds = %5288, %originalBB1676alteredBB
  %5297 = load i8*, i8** %19, align 8, !dbg !2382
  %5298 = load i64, i64* %29, align 8, !dbg !2382
  %5299 = getelementptr inbounds i8, i8* %5297, i64 %5298, !dbg !2382
  store i8 39, i8* %5299, align 1, !dbg !2382
  %5300 = load i32, i32* @x.35
  %5301 = load i32, i32* @y.36
  %5302 = sub i32 %5300, 1
  %5303 = mul i32 %5300, %5302
  %5304 = urem i32 %5303, 2
  %5305 = icmp eq i32 %5304, 0
  %5306 = icmp slt i32 %5301, 10
  %5307 = or i1 %5305, %5306
  br i1 %5307, label %originalBBpart21678, label %originalBB1676alteredBB

originalBBpart21678:                              ; preds = %originalBB1676
  br label %5308, !dbg !2382

5308:                                             ; preds = %originalBBpart21678, %originalBBpart21674
  %5309 = load i64, i64* %29, align 8, !dbg !2385
  %5310 = add i64 %5309, 1, !dbg !2385
  store i64 %5310, i64* %29, align 8, !dbg !2385
  br label %5311, !dbg !2385

5311:                                             ; preds = %5308
  %5312 = load i32, i32* @x.35
  %5313 = load i32, i32* @y.36
  %5314 = sub i32 %5312, 1
  %5315 = mul i32 %5312, %5314
  %5316 = urem i32 %5315, 2
  %5317 = icmp eq i32 %5316, 0
  %5318 = icmp slt i32 %5313, 10
  %5319 = or i1 %5317, %5318
  br i1 %5319, label %originalBB1680, label %originalBB1680alteredBB

originalBB1680:                                   ; preds = %5311, %originalBB1680alteredBB
  %5320 = load i32, i32* @x.35
  %5321 = load i32, i32* @y.36
  %5322 = sub i32 %5320, 1
  %5323 = mul i32 %5320, %5322
  %5324 = urem i32 %5323, 2
  %5325 = icmp eq i32 %5324, 0
  %5326 = icmp slt i32 %5321, 10
  %5327 = or i1 %5325, %5326
  br i1 %5327, label %originalBBpart21682, label %originalBB1680alteredBB

originalBBpart21682:                              ; preds = %originalBB1680
  br label %5328, !dbg !2380

5328:                                             ; preds = %originalBBpart21682
  %5329 = load i64, i64* %29, align 8, !dbg !2386
  %5330 = load i64, i64* %20, align 8, !dbg !2386
  %5331 = icmp ult i64 %5329, %5330, !dbg !2386
  br i1 %5331, label %5332, label %5352, !dbg !2389

5332:                                             ; preds = %5328
  %5333 = load i32, i32* @x.35
  %5334 = load i32, i32* @y.36
  %5335 = sub i32 %5333, 1
  %5336 = mul i32 %5333, %5335
  %5337 = urem i32 %5336, 2
  %5338 = icmp eq i32 %5337, 0
  %5339 = icmp slt i32 %5334, 10
  %5340 = or i1 %5338, %5339
  br i1 %5340, label %originalBB1684, label %originalBB1684alteredBB

originalBB1684:                                   ; preds = %5332, %originalBB1684alteredBB
  %5341 = load i8*, i8** %19, align 8, !dbg !2386
  %5342 = load i64, i64* %29, align 8, !dbg !2386
  %5343 = getelementptr inbounds i8, i8* %5341, i64 %5342, !dbg !2386
  store i8 39, i8* %5343, align 1, !dbg !2386
  %5344 = load i32, i32* @x.35
  %5345 = load i32, i32* @y.36
  %5346 = sub i32 %5344, 1
  %5347 = mul i32 %5344, %5346
  %5348 = urem i32 %5347, 2
  %5349 = icmp eq i32 %5348, 0
  %5350 = icmp slt i32 %5345, 10
  %5351 = or i1 %5349, %5350
  br i1 %5351, label %originalBBpart21686, label %originalBB1684alteredBB

originalBBpart21686:                              ; preds = %originalBB1684
  br label %5352, !dbg !2386

5352:                                             ; preds = %originalBBpart21686, %5328
  %5353 = load i32, i32* @x.35
  %5354 = load i32, i32* @y.36
  %5355 = sub i32 %5353, 1
  %5356 = mul i32 %5353, %5355
  %5357 = urem i32 %5356, 2
  %5358 = icmp eq i32 %5357, 0
  %5359 = icmp slt i32 %5354, 10
  %5360 = or i1 %5358, %5359
  br i1 %5360, label %originalBB1688, label %originalBB1688alteredBB

originalBB1688:                                   ; preds = %5352, %originalBB1688alteredBB
  %5361 = load i64, i64* %29, align 8, !dbg !2389
  %5362 = add i64 %5361, 1, !dbg !2389
  store i64 %5362, i64* %29, align 8, !dbg !2389
  %5363 = load i32, i32* @x.35
  %5364 = load i32, i32* @y.36
  %5365 = sub i32 %5363, 1
  %5366 = mul i32 %5363, %5365
  %5367 = urem i32 %5366, 2
  %5368 = icmp eq i32 %5367, 0
  %5369 = icmp slt i32 %5364, 10
  %5370 = or i1 %5368, %5369
  br i1 %5370, label %originalBBpart21699, label %originalBB1688alteredBB

originalBBpart21699:                              ; preds = %originalBB1688
  br label %5371, !dbg !2389

5371:                                             ; preds = %originalBBpart21699
  store i8 0, i8* %36, align 1, !dbg !2380
  br label %5372, !dbg !2380

5372:                                             ; preds = %5371, %originalBBpart21670, %originalBBpart21666
  br label %5373, !dbg !2379

5373:                                             ; preds = %5372
  br label %5374, !dbg !2390

5374:                                             ; preds = %5373
  %5375 = load i64, i64* %29, align 8, !dbg !2391
  %5376 = load i64, i64* %20, align 8, !dbg !2391
  %5377 = trunc i64 %5375 to i32
  %5378 = mul i32 %5377, -2
  %5379 = add i32 %5378, -2
  %5380 = trunc i64 %5376 to i32
  %5381 = mul i32 %5380, 2
  %5382 = add i32 %5381, 3
  %5383 = mul i32 %5379, %5379
  %5384 = mul i32 %5382, %5382
  %5385 = add i32 %5383, %5384
  %5386 = mul i32 %5379, %5382
  %5387 = mul i32 %5386, 2
  %5388 = sub i32 %5385, %5387
  %5389 = mul i32 %5388, 3
  %5390 = add i32 %5389, -1
  %5391 = icmp eq i32 %5390, -4
  br i1 %5391, label %5392, label %5409

5392:                                             ; preds = %5374
  %5393 = load i32, i32* @x.35
  %5394 = load i32, i32* @y.36
  %5395 = sub i32 %5393, 1
  %5396 = mul i32 %5393, %5395
  %5397 = urem i32 %5396, 2
  %5398 = icmp eq i32 %5397, 0
  %5399 = icmp slt i32 %5394, 10
  %5400 = or i1 %5398, %5399
  br i1 %5400, label %originalBB1701, label %originalBB1701alteredBB

originalBB1701:                                   ; preds = %5392, %originalBB1701alteredBB
  %5401 = load i32, i32* @x.35
  %5402 = load i32, i32* @y.36
  %5403 = sub i32 %5401, 1
  %5404 = mul i32 %5401, %5403
  %5405 = urem i32 %5404, 2
  %5406 = icmp eq i32 %5405, 0
  %5407 = icmp slt i32 %5402, 10
  %5408 = or i1 %5406, %5407
  br i1 %5408, label %originalBBpart21703, label %originalBB1701alteredBB

originalBBpart21703:                              ; preds = %originalBB1701
  ret i64 0

5409:                                             ; preds = %5374
  %5410 = load i32, i32* @x.35
  %5411 = load i32, i32* @y.36
  %5412 = sub i32 %5410, 1
  %5413 = mul i32 %5410, %5412
  %5414 = urem i32 %5413, 2
  %5415 = icmp eq i32 %5414, 0
  %5416 = icmp slt i32 %5411, 10
  %5417 = or i1 %5415, %5416
  br i1 %5417, label %originalBB1705, label %originalBB1705alteredBB

originalBB1705:                                   ; preds = %5409, %originalBB1705alteredBB
  %5418 = icmp ult i64 %5375, %5376, !dbg !2391
  %5419 = load i32, i32* @x.35
  %5420 = load i32, i32* @y.36
  %5421 = sub i32 %5419, 1
  %5422 = mul i32 %5419, %5421
  %5423 = urem i32 %5422, 2
  %5424 = icmp eq i32 %5423, 0
  %5425 = icmp slt i32 %5420, 10
  %5426 = or i1 %5424, %5425
  br i1 %5426, label %originalBBpart21707, label %originalBB1705alteredBB

originalBBpart21707:                              ; preds = %originalBB1705
  br i1 %5418, label %5427, label %5448, !dbg !2394

5427:                                             ; preds = %originalBBpart21707
  %5428 = load i32, i32* @x.35
  %5429 = load i32, i32* @y.36
  %5430 = sub i32 %5428, 1
  %5431 = mul i32 %5428, %5430
  %5432 = urem i32 %5431, 2
  %5433 = icmp eq i32 %5432, 0
  %5434 = icmp slt i32 %5429, 10
  %5435 = or i1 %5433, %5434
  br i1 %5435, label %originalBB1709, label %originalBB1709alteredBB

originalBB1709:                                   ; preds = %5427, %originalBB1709alteredBB
  %5436 = load i8, i8* %39, align 1, !dbg !2391
  %5437 = load i8*, i8** %19, align 8, !dbg !2391
  %5438 = load i64, i64* %29, align 8, !dbg !2391
  %5439 = getelementptr inbounds i8, i8* %5437, i64 %5438, !dbg !2391
  store i8 %5436, i8* %5439, align 1, !dbg !2391
  %5440 = load i32, i32* @x.35
  %5441 = load i32, i32* @y.36
  %5442 = sub i32 %5440, 1
  %5443 = mul i32 %5440, %5442
  %5444 = urem i32 %5443, 2
  %5445 = icmp eq i32 %5444, 0
  %5446 = icmp slt i32 %5441, 10
  %5447 = or i1 %5445, %5446
  br i1 %5447, label %originalBBpart21711, label %originalBB1709alteredBB

originalBBpart21711:                              ; preds = %originalBB1709
  br label %5448, !dbg !2391

5448:                                             ; preds = %originalBBpart21711, %originalBBpart21707
  %5449 = load i64, i64* %29, align 8, !dbg !2394
  %5450 = add i64 %5449, 1, !dbg !2394
  store i64 %5450, i64* %29, align 8, !dbg !2394
  br label %5451, !dbg !2394

5451:                                             ; preds = %5448
  %5452 = load i32, i32* @x.35
  %5453 = load i32, i32* @y.36
  %5454 = sub i32 %5452, 1
  %5455 = mul i32 %5452, %5454
  %5456 = urem i32 %5455, 2
  %5457 = icmp eq i32 %5456, 0
  %5458 = icmp slt i32 %5453, 10
  %5459 = or i1 %5457, %5458
  br i1 %5459, label %originalBB1713, label %originalBB1713alteredBB

originalBB1713:                                   ; preds = %5451, %originalBB1713alteredBB
  %5460 = load i8, i8* %43, align 1, !dbg !2395
  %5461 = trunc i8 %5460 to i1, !dbg !2395
  %5462 = load i32, i32* @x.35
  %5463 = load i32, i32* @y.36
  %5464 = sub i32 %5462, 1
  %5465 = mul i32 %5462, %5464
  %5466 = urem i32 %5465, 2
  %5467 = icmp eq i32 %5466, 0
  %5468 = icmp slt i32 %5463, 10
  %5469 = or i1 %5467, %5468
  br i1 %5469, label %originalBBpart21715, label %originalBB1713alteredBB

originalBBpart21715:                              ; preds = %originalBB1713
  br i1 %5461, label %5487, label %5470, !dbg !2397

5470:                                             ; preds = %originalBBpart21715
  %5471 = load i32, i32* @x.35
  %5472 = load i32, i32* @y.36
  %5473 = sub i32 %5471, 1
  %5474 = mul i32 %5471, %5473
  %5475 = urem i32 %5474, 2
  %5476 = icmp eq i32 %5475, 0
  %5477 = icmp slt i32 %5472, 10
  %5478 = or i1 %5476, %5477
  br i1 %5478, label %originalBB1717, label %originalBB1717alteredBB

originalBB1717:                                   ; preds = %5470, %originalBB1717alteredBB
  store i8 0, i8* %38, align 1, !dbg !2398
  %5479 = load i32, i32* @x.35
  %5480 = load i32, i32* @y.36
  %5481 = sub i32 %5479, 1
  %5482 = mul i32 %5479, %5481
  %5483 = urem i32 %5482, 2
  %5484 = icmp eq i32 %5483, 0
  %5485 = icmp slt i32 %5480, 10
  %5486 = or i1 %5484, %5485
  br i1 %5486, label %originalBBpart21719, label %originalBB1717alteredBB

originalBBpart21719:                              ; preds = %originalBB1717
  br label %5487, !dbg !2399

5487:                                             ; preds = %originalBBpart21719, %originalBBpart21715
  %5488 = load i32, i32* @x.35
  %5489 = load i32, i32* @y.36
  %5490 = sub i32 %5488, 1
  %5491 = mul i32 %5488, %5490
  %5492 = urem i32 %5491, 2
  %5493 = icmp eq i32 %5492, 0
  %5494 = icmp slt i32 %5489, 10
  %5495 = or i1 %5493, %5494
  br i1 %5495, label %originalBB1721, label %originalBB1721alteredBB

originalBB1721:                                   ; preds = %5487, %originalBB1721alteredBB
  %5496 = load i32, i32* @x.35
  %5497 = load i32, i32* @y.36
  %5498 = sub i32 %5496, 1
  %5499 = mul i32 %5496, %5498
  %5500 = urem i32 %5499, 2
  %5501 = icmp eq i32 %5500, 0
  %5502 = icmp slt i32 %5497, 10
  %5503 = or i1 %5501, %5502
  br i1 %5503, label %originalBBpart21723, label %originalBB1721alteredBB

originalBBpart21723:                              ; preds = %originalBB1721
  br label %5504, !dbg !2400

5504:                                             ; preds = %originalBBpart21723, %originalBBpart2514
  %5505 = load i32, i32* @x.35
  %5506 = load i32, i32* @y.36
  %5507 = sub i32 %5505, 1
  %5508 = mul i32 %5505, %5507
  %5509 = urem i32 %5508, 2
  %5510 = icmp eq i32 %5509, 0
  %5511 = icmp slt i32 %5506, 10
  %5512 = or i1 %5510, %5511
  br i1 %5512, label %originalBB1725, label %originalBB1725alteredBB

originalBB1725:                                   ; preds = %5504, %originalBB1725alteredBB
  %5513 = load i64, i64* %28, align 8, !dbg !2401
  %5514 = add i64 %5513, 1, !dbg !2401
  store i64 %5514, i64* %28, align 8, !dbg !2401
  %5515 = load i32, i32* @x.35
  %5516 = load i32, i32* @y.36
  %5517 = sub i32 %5515, 1
  %5518 = mul i32 %5515, %5517
  %5519 = urem i32 %5518, 2
  %5520 = icmp eq i32 %5519, 0
  %5521 = icmp slt i32 %5516, 10
  %5522 = or i1 %5520, %5521
  br i1 %5522, label %originalBBpart21731, label %originalBB1725alteredBB

originalBBpart21731:                              ; preds = %originalBB1725
  br label %682, !dbg !2402, !llvm.loop !2403

5523:                                             ; preds = %746
  %5524 = load i32, i32* @x.35
  %5525 = load i32, i32* @y.36
  %5526 = sub i32 %5524, 1
  %5527 = mul i32 %5524, %5526
  %5528 = urem i32 %5527, 2
  %5529 = icmp eq i32 %5528, 0
  %5530 = icmp slt i32 %5525, 10
  %5531 = or i1 %5529, %5530
  br i1 %5531, label %originalBB1733, label %originalBB1733alteredBB

originalBB1733:                                   ; preds = %5523, %originalBB1733alteredBB
  %5532 = load i64, i64* %29, align 8, !dbg !2405
  %5533 = icmp eq i64 %5532, 0, !dbg !2407
  %5534 = load i32, i32* @x.35
  %5535 = load i32, i32* @y.36
  %5536 = sub i32 %5534, 1
  %5537 = mul i32 %5534, %5536
  %5538 = urem i32 %5537, 2
  %5539 = icmp eq i32 %5538, 0
  %5540 = icmp slt i32 %5535, 10
  %5541 = or i1 %5539, %5540
  br i1 %5541, label %originalBBpart21735, label %originalBB1733alteredBB

originalBBpart21735:                              ; preds = %originalBB1733
  br i1 %5533, label %5542, label %5597, !dbg !2408

5542:                                             ; preds = %originalBBpart21735
  %5543 = load i32, i32* @x.35
  %5544 = load i32, i32* @y.36
  %5545 = sub i32 %5543, 1
  %5546 = mul i32 %5543, %5545
  %5547 = urem i32 %5546, 2
  %5548 = icmp eq i32 %5547, 0
  %5549 = icmp slt i32 %5544, 10
  %5550 = or i1 %5548, %5549
  br i1 %5550, label %originalBB1737, label %originalBB1737alteredBB

originalBB1737:                                   ; preds = %5542, %originalBB1737alteredBB
  %5551 = load i32, i32* %23, align 4, !dbg !2409
  %5552 = icmp eq i32 %5551, 2, !dbg !2410
  %5553 = load i32, i32* @x.35
  %5554 = load i32, i32* @y.36
  %5555 = sub i32 %5553, 1
  %5556 = mul i32 %5553, %5555
  %5557 = urem i32 %5556, 2
  %5558 = icmp eq i32 %5557, 0
  %5559 = icmp slt i32 %5554, 10
  %5560 = or i1 %5558, %5559
  br i1 %5560, label %originalBBpart21739, label %originalBB1737alteredBB

originalBBpart21739:                              ; preds = %originalBB1737
  br i1 %5552, label %5561, label %5597, !dbg !2411

5561:                                             ; preds = %originalBBpart21739
  %5562 = load i32, i32* @x.35
  %5563 = load i32, i32* @y.36
  %5564 = sub i32 %5562, 1
  %5565 = mul i32 %5562, %5564
  %5566 = urem i32 %5565, 2
  %5567 = icmp eq i32 %5566, 0
  %5568 = icmp slt i32 %5563, 10
  %5569 = or i1 %5567, %5568
  br i1 %5569, label %originalBB1741, label %originalBB1741alteredBB

originalBB1741:                                   ; preds = %5561, %originalBB1741alteredBB
  %5570 = load i8, i8* %35, align 1, !dbg !2412
  %5571 = trunc i8 %5570 to i1, !dbg !2412
  %5572 = load i32, i32* @x.35
  %5573 = load i32, i32* @y.36
  %5574 = sub i32 %5572, 1
  %5575 = mul i32 %5572, %5574
  %5576 = urem i32 %5575, 2
  %5577 = icmp eq i32 %5576, 0
  %5578 = icmp slt i32 %5573, 10
  %5579 = or i1 %5577, %5578
  br i1 %5579, label %originalBBpart21743, label %originalBB1741alteredBB

originalBBpart21743:                              ; preds = %originalBB1741
  br i1 %5571, label %5580, label %5597, !dbg !2413

5580:                                             ; preds = %originalBBpart21743
  %5581 = load i32, i32* @x.35
  %5582 = load i32, i32* @y.36
  %5583 = sub i32 %5581, 1
  %5584 = mul i32 %5581, %5583
  %5585 = urem i32 %5584, 2
  %5586 = icmp eq i32 %5585, 0
  %5587 = icmp slt i32 %5582, 10
  %5588 = or i1 %5586, %5587
  br i1 %5588, label %originalBB1745, label %originalBB1745alteredBB

originalBB1745:                                   ; preds = %5580, %originalBB1745alteredBB
  %5589 = load i32, i32* @x.35
  %5590 = load i32, i32* @y.36
  %5591 = sub i32 %5589, 1
  %5592 = mul i32 %5589, %5591
  %5593 = urem i32 %5592, 2
  %5594 = icmp eq i32 %5593, 0
  %5595 = icmp slt i32 %5590, 10
  %5596 = or i1 %5594, %5595
  br i1 %5596, label %originalBBpart21747, label %originalBB1745alteredBB

originalBBpart21747:                              ; preds = %originalBB1745
  br label %6021, !dbg !2414

5597:                                             ; preds = %originalBBpart21743, %originalBBpart21739, %originalBBpart21735
  %5598 = load i32, i32* %23, align 4, !dbg !2415
  %5599 = icmp eq i32 %5598, 2, !dbg !2417
  br i1 %5599, label %5600, label %5757, !dbg !2418

5600:                                             ; preds = %5597
  %5601 = load i32, i32* @x.35
  %5602 = load i32, i32* @y.36
  %5603 = sub i32 %5601, 1
  %5604 = mul i32 %5601, %5603
  %5605 = urem i32 %5604, 2
  %5606 = icmp eq i32 %5605, 0
  %5607 = icmp slt i32 %5602, 10
  %5608 = or i1 %5606, %5607
  br i1 %5608, label %originalBB1749, label %originalBB1749alteredBB

originalBB1749:                                   ; preds = %5600, %originalBB1749alteredBB
  %5609 = load i8, i8* %35, align 1, !dbg !2419
  %5610 = trunc i8 %5609 to i1, !dbg !2419
  %5611 = load i32, i32* @x.35
  %5612 = load i32, i32* @y.36
  %5613 = sub i32 %5611, 1
  %5614 = mul i32 %5611, %5613
  %5615 = urem i32 %5614, 2
  %5616 = icmp eq i32 %5615, 0
  %5617 = icmp slt i32 %5612, 10
  %5618 = or i1 %5616, %5617
  br i1 %5618, label %originalBBpart21751, label %originalBB1749alteredBB

originalBBpart21751:                              ; preds = %originalBB1749
  br i1 %5610, label %5757, label %5619, !dbg !2420

5619:                                             ; preds = %originalBBpart21751
  %5620 = load i32, i32* @x.35
  %5621 = load i32, i32* @y.36
  %5622 = sub i32 %5620, 1
  %5623 = mul i32 %5620, %5622
  %5624 = urem i32 %5623, 2
  %5625 = icmp eq i32 %5624, 0
  %5626 = icmp slt i32 %5621, 10
  %5627 = or i1 %5625, %5626
  br i1 %5627, label %originalBB1753, label %originalBB1753alteredBB

originalBB1753:                                   ; preds = %5619, %originalBB1753alteredBB
  %5628 = load i8, i8* %37, align 1, !dbg !2421
  %5629 = trunc i8 %5628 to i1, !dbg !2421
  %5630 = load i32, i32* @x.35
  %5631 = load i32, i32* @y.36
  %5632 = sub i32 %5630, 1
  %5633 = mul i32 %5630, %5632
  %5634 = urem i32 %5633, 2
  %5635 = icmp eq i32 %5634, 0
  %5636 = icmp slt i32 %5631, 10
  %5637 = or i1 %5635, %5636
  br i1 %5637, label %originalBBpart21755, label %originalBB1753alteredBB

originalBBpart21755:                              ; preds = %originalBB1753
  br i1 %5629, label %5638, label %5757, !dbg !2422

5638:                                             ; preds = %originalBBpart21755
  %5639 = load i32, i32* @x.35
  %5640 = load i32, i32* @y.36
  %5641 = sub i32 %5639, 1
  %5642 = mul i32 %5639, %5641
  %5643 = urem i32 %5642, 2
  %5644 = icmp eq i32 %5643, 0
  %5645 = icmp slt i32 %5640, 10
  %5646 = or i1 %5644, %5645
  br i1 %5646, label %originalBB1757, label %originalBB1757alteredBB

originalBB1757:                                   ; preds = %5638, %originalBB1757alteredBB
  %5647 = load i8, i8* %38, align 1, !dbg !2423
  %5648 = trunc i8 %5647 to i1, !dbg !2423
  %5649 = load i32, i32* @x.35
  %5650 = load i32, i32* @y.36
  %5651 = sub i32 %5649, 1
  %5652 = mul i32 %5649, %5651
  %5653 = urem i32 %5652, 2
  %5654 = icmp eq i32 %5653, 0
  %5655 = icmp slt i32 %5650, 10
  %5656 = or i1 %5654, %5655
  br i1 %5656, label %originalBBpart21759, label %originalBB1757alteredBB

originalBBpart21759:                              ; preds = %originalBB1757
  br i1 %5648, label %5657, label %5683, !dbg !2426

5657:                                             ; preds = %originalBBpart21759
  %5658 = load i32, i32* @x.35
  %5659 = load i32, i32* @y.36
  %5660 = sub i32 %5658, 1
  %5661 = mul i32 %5658, %5660
  %5662 = urem i32 %5661, 2
  %5663 = icmp eq i32 %5662, 0
  %5664 = icmp slt i32 %5659, 10
  %5665 = or i1 %5663, %5664
  br i1 %5665, label %originalBB1761, label %originalBB1761alteredBB

originalBB1761:                                   ; preds = %5657, %originalBB1761alteredBB
  %5666 = load i8*, i8** %19, align 8, !dbg !2427
  %5667 = load i64, i64* %30, align 8, !dbg !2428
  %5668 = load i8*, i8** %21, align 8, !dbg !2429
  %5669 = load i64, i64* %22, align 8, !dbg !2430
  %5670 = load i32, i32* %24, align 4, !dbg !2431
  %5671 = load i32*, i32** %25, align 8, !dbg !2432
  %5672 = load i8*, i8** %26, align 8, !dbg !2433
  %5673 = load i8*, i8** %27, align 8, !dbg !2434
  %5674 = call i64 @quotearg_buffer_restyled(i8* %5666, i64 %5667, i8* %5668, i64 %5669, i32 5, i32 %5670, i32* %5671, i8* %5672, i8* %5673), !dbg !2435
  store i64 %5674, i64* %18, align 8, !dbg !2436
  %5675 = load i32, i32* @x.35
  %5676 = load i32, i32* @y.36
  %5677 = sub i32 %5675, 1
  %5678 = mul i32 %5675, %5677
  %5679 = urem i32 %5678, 2
  %5680 = icmp eq i32 %5679, 0
  %5681 = icmp slt i32 %5676, 10
  %5682 = or i1 %5680, %5681
  br i1 %5682, label %originalBBpart21763, label %originalBB1761alteredBB

originalBBpart21763:                              ; preds = %originalBB1761
  br label %6071, !dbg !2436

5683:                                             ; preds = %originalBBpart21759
  %5684 = load i64, i64* %20, align 8, !dbg !2437
  %5685 = icmp ne i64 %5684, 0, !dbg !2437
  br i1 %5685, label %5723, label %5686, !dbg !2439

5686:                                             ; preds = %5683
  %5687 = load i32, i32* @x.35
  %5688 = load i32, i32* @y.36
  %5689 = sub i32 %5687, 1
  %5690 = mul i32 %5687, %5689
  %5691 = urem i32 %5690, 2
  %5692 = icmp eq i32 %5691, 0
  %5693 = icmp slt i32 %5688, 10
  %5694 = or i1 %5692, %5693
  br i1 %5694, label %originalBB1765, label %originalBB1765alteredBB

originalBB1765:                                   ; preds = %5686, %originalBB1765alteredBB
  %5695 = load i64, i64* %30, align 8, !dbg !2440
  %5696 = icmp ne i64 %5695, 0, !dbg !2440
  %5697 = load i32, i32* @x.35
  %5698 = load i32, i32* @y.36
  %5699 = sub i32 %5697, 1
  %5700 = mul i32 %5697, %5699
  %5701 = urem i32 %5700, 2
  %5702 = icmp eq i32 %5701, 0
  %5703 = icmp slt i32 %5698, 10
  %5704 = or i1 %5702, %5703
  br i1 %5704, label %originalBBpart21767, label %originalBB1765alteredBB

originalBBpart21767:                              ; preds = %originalBB1765
  br i1 %5696, label %5705, label %5723, !dbg !2441

5705:                                             ; preds = %originalBBpart21767
  %5706 = load i32, i32* @x.35
  %5707 = load i32, i32* @y.36
  %5708 = sub i32 %5706, 1
  %5709 = mul i32 %5706, %5708
  %5710 = urem i32 %5709, 2
  %5711 = icmp eq i32 %5710, 0
  %5712 = icmp slt i32 %5707, 10
  %5713 = or i1 %5711, %5712
  br i1 %5713, label %originalBB1769, label %originalBB1769alteredBB

originalBB1769:                                   ; preds = %5705, %originalBB1769alteredBB
  %5714 = load i64, i64* %30, align 8, !dbg !2442
  store i64 %5714, i64* %20, align 8, !dbg !2444
  store i64 0, i64* %29, align 8, !dbg !2445
  %5715 = load i32, i32* @x.35
  %5716 = load i32, i32* @y.36
  %5717 = sub i32 %5715, 1
  %5718 = mul i32 %5715, %5717
  %5719 = urem i32 %5718, 2
  %5720 = icmp eq i32 %5719, 0
  %5721 = icmp slt i32 %5716, 10
  %5722 = or i1 %5720, %5721
  br i1 %5722, label %originalBBpart21771, label %originalBB1769alteredBB

originalBBpart21771:                              ; preds = %originalBB1769
  br label %66, !dbg !2446

5723:                                             ; preds = %originalBBpart21767, %5683
  %5724 = load i32, i32* @x.35
  %5725 = load i32, i32* @y.36
  %5726 = sub i32 %5724, 1
  %5727 = mul i32 %5724, %5726
  %5728 = urem i32 %5727, 2
  %5729 = icmp eq i32 %5728, 0
  %5730 = icmp slt i32 %5725, 10
  %5731 = or i1 %5729, %5730
  br i1 %5731, label %originalBB1773, label %originalBB1773alteredBB

originalBB1773:                                   ; preds = %5723, %originalBB1773alteredBB
  %5732 = load i32, i32* @x.35
  %5733 = load i32, i32* @y.36
  %5734 = sub i32 %5732, 1
  %5735 = mul i32 %5732, %5734
  %5736 = urem i32 %5735, 2
  %5737 = icmp eq i32 %5736, 0
  %5738 = icmp slt i32 %5733, 10
  %5739 = or i1 %5737, %5738
  br i1 %5739, label %originalBBpart21775, label %originalBB1773alteredBB

originalBBpart21775:                              ; preds = %originalBB1773
  br label %5740

5740:                                             ; preds = %originalBBpart21775
  %5741 = load i32, i32* @x.35
  %5742 = load i32, i32* @y.36
  %5743 = sub i32 %5741, 1
  %5744 = mul i32 %5741, %5743
  %5745 = urem i32 %5744, 2
  %5746 = icmp eq i32 %5745, 0
  %5747 = icmp slt i32 %5742, 10
  %5748 = or i1 %5746, %5747
  br i1 %5748, label %originalBB1777, label %originalBB1777alteredBB

originalBB1777:                                   ; preds = %5740, %originalBB1777alteredBB
  %5749 = load i32, i32* @x.35
  %5750 = load i32, i32* @y.36
  %5751 = sub i32 %5749, 1
  %5752 = mul i32 %5749, %5751
  %5753 = urem i32 %5752, 2
  %5754 = icmp eq i32 %5753, 0
  %5755 = icmp slt i32 %5750, 10
  %5756 = or i1 %5754, %5755
  br i1 %5756, label %originalBBpart21779, label %originalBB1777alteredBB

originalBBpart21779:                              ; preds = %originalBB1777
  br label %5757, !dbg !2447

5757:                                             ; preds = %originalBBpart21779, %originalBBpart21755, %originalBBpart21751, %5597
  %5758 = load i32, i32* @x.35
  %5759 = load i32, i32* @y.36
  %5760 = sub i32 %5758, 1
  %5761 = mul i32 %5758, %5760
  %5762 = urem i32 %5761, 2
  %5763 = icmp eq i32 %5762, 0
  %5764 = icmp slt i32 %5759, 10
  %5765 = or i1 %5763, %5764
  br i1 %5765, label %originalBB1781, label %originalBB1781alteredBB

originalBB1781:                                   ; preds = %5757, %originalBB1781alteredBB
  %5766 = load i8*, i8** %31, align 8, !dbg !2448
  %5767 = icmp ne i8* %5766, null, !dbg !2448
  %5768 = load i32, i32* @x.35
  %5769 = load i32, i32* @y.36
  %5770 = sub i32 %5768, 1
  %5771 = mul i32 %5768, %5770
  %5772 = urem i32 %5771, 2
  %5773 = icmp eq i32 %5772, 0
  %5774 = icmp slt i32 %5769, 10
  %5775 = or i1 %5773, %5774
  br i1 %5775, label %originalBBpart21783, label %originalBB1781alteredBB

originalBBpart21783:                              ; preds = %originalBB1781
  br i1 %5767, label %5776, label %5963, !dbg !2450

5776:                                             ; preds = %originalBBpart21783
  %5777 = load i32, i32* @x.35
  %5778 = load i32, i32* @y.36
  %5779 = sub i32 %5777, 1
  %5780 = mul i32 %5777, %5779
  %5781 = urem i32 %5780, 2
  %5782 = icmp eq i32 %5781, 0
  %5783 = icmp slt i32 %5778, 10
  %5784 = or i1 %5782, %5783
  br i1 %5784, label %originalBB1785, label %originalBB1785alteredBB

originalBB1785:                                   ; preds = %5776, %originalBB1785alteredBB
  %5785 = load i8, i8* %35, align 1, !dbg !2451
  %5786 = trunc i8 %5785 to i1, !dbg !2451
  %5787 = load i32, i32* @x.35
  %5788 = load i32, i32* @y.36
  %5789 = sub i32 %5787, 1
  %5790 = mul i32 %5787, %5789
  %5791 = urem i32 %5790, 2
  %5792 = icmp eq i32 %5791, 0
  %5793 = icmp slt i32 %5788, 10
  %5794 = or i1 %5792, %5793
  br i1 %5794, label %originalBBpart21787, label %originalBB1785alteredBB

originalBBpart21787:                              ; preds = %originalBB1785
  br i1 %5786, label %5963, label %5795, !dbg !2452

5795:                                             ; preds = %originalBBpart21787
  %5796 = load i32, i32* @x.35
  %5797 = load i32, i32* @y.36
  %5798 = sub i32 %5796, 1
  %5799 = mul i32 %5796, %5798
  %5800 = urem i32 %5799, 2
  %5801 = icmp eq i32 %5800, 0
  %5802 = icmp slt i32 %5797, 10
  %5803 = or i1 %5801, %5802
  br i1 %5803, label %originalBB1789, label %originalBB1789alteredBB

originalBB1789:                                   ; preds = %5795, %originalBB1789alteredBB
  %5804 = load i32, i32* @x.35
  %5805 = load i32, i32* @y.36
  %5806 = sub i32 %5804, 1
  %5807 = mul i32 %5804, %5806
  %5808 = urem i32 %5807, 2
  %5809 = icmp eq i32 %5808, 0
  %5810 = icmp slt i32 %5805, 10
  %5811 = or i1 %5809, %5810
  br i1 %5811, label %originalBBpart21791, label %originalBB1789alteredBB

originalBBpart21791:                              ; preds = %originalBB1789
  br label %5812, !dbg !2453

5812:                                             ; preds = %originalBBpart21827, %originalBBpart21791
  %5813 = load i32, i32* @x.35
  %5814 = load i32, i32* @y.36
  %5815 = sub i32 %5813, 1
  %5816 = mul i32 %5813, %5815
  %5817 = urem i32 %5816, 2
  %5818 = icmp eq i32 %5817, 0
  %5819 = icmp slt i32 %5814, 10
  %5820 = or i1 %5818, %5819
  br i1 %5820, label %originalBB1793, label %originalBB1793alteredBB

originalBB1793:                                   ; preds = %5812, %originalBB1793alteredBB
  %5821 = load i8*, i8** %31, align 8, !dbg !2454
  %5822 = load i8, i8* %5821, align 1, !dbg !2457
  %5823 = icmp ne i8 %5822, 0, !dbg !2458
  %5824 = load i32, i32* @x.35
  %5825 = load i32, i32* @y.36
  %5826 = sub i32 %5824, 1
  %5827 = mul i32 %5824, %5826
  %5828 = urem i32 %5827, 2
  %5829 = icmp eq i32 %5828, 0
  %5830 = icmp slt i32 %5825, 10
  %5831 = or i1 %5829, %5830
  br i1 %5831, label %originalBBpart21795, label %originalBB1793alteredBB

originalBBpart21795:                              ; preds = %originalBB1793
  br i1 %5823, label %5832, label %5946, !dbg !2458

5832:                                             ; preds = %originalBBpart21795
  %5833 = load i32, i32* @x.35
  %5834 = load i32, i32* @y.36
  %5835 = sub i32 %5833, 1
  %5836 = mul i32 %5833, %5835
  %5837 = urem i32 %5836, 2
  %5838 = icmp eq i32 %5837, 0
  %5839 = icmp slt i32 %5834, 10
  %5840 = or i1 %5838, %5839
  br i1 %5840, label %originalBB1797, label %originalBB1797alteredBB

originalBB1797:                                   ; preds = %5832, %originalBB1797alteredBB
  %5841 = load i32, i32* @x.35
  %5842 = load i32, i32* @y.36
  %5843 = sub i32 %5841, 1
  %5844 = mul i32 %5841, %5843
  %5845 = urem i32 %5844, 2
  %5846 = icmp eq i32 %5845, 0
  %5847 = icmp slt i32 %5842, 10
  %5848 = or i1 %5846, %5847
  br i1 %5848, label %originalBBpart21799, label %originalBB1797alteredBB

originalBBpart21799:                              ; preds = %originalBB1797
  br label %5849, !dbg !2459

5849:                                             ; preds = %originalBBpart21799
  %5850 = load i32, i32* @x.35
  %5851 = load i32, i32* @y.36
  %5852 = sub i32 %5850, 1
  %5853 = mul i32 %5850, %5852
  %5854 = urem i32 %5853, 2
  %5855 = icmp eq i32 %5854, 0
  %5856 = icmp slt i32 %5851, 10
  %5857 = or i1 %5855, %5856
  br i1 %5857, label %originalBB1801, label %originalBB1801alteredBB

originalBB1801:                                   ; preds = %5849, %originalBB1801alteredBB
  %5858 = load i64, i64* %29, align 8, !dbg !2460
  %5859 = load i64, i64* %20, align 8, !dbg !2460
  %5860 = icmp ult i64 %5858, %5859, !dbg !2460
  %5861 = load i32, i32* @x.35
  %5862 = load i32, i32* @y.36
  %5863 = sub i32 %5861, 1
  %5864 = mul i32 %5861, %5863
  %5865 = urem i32 %5864, 2
  %5866 = icmp eq i32 %5865, 0
  %5867 = icmp slt i32 %5862, 10
  %5868 = or i1 %5866, %5867
  br i1 %5868, label %originalBBpart21803, label %originalBB1801alteredBB

originalBBpart21803:                              ; preds = %originalBB1801
  br i1 %5860, label %5869, label %5891, !dbg !2463

5869:                                             ; preds = %originalBBpart21803
  %5870 = load i32, i32* @x.35
  %5871 = load i32, i32* @y.36
  %5872 = sub i32 %5870, 1
  %5873 = mul i32 %5870, %5872
  %5874 = urem i32 %5873, 2
  %5875 = icmp eq i32 %5874, 0
  %5876 = icmp slt i32 %5871, 10
  %5877 = or i1 %5875, %5876
  br i1 %5877, label %originalBB1805, label %originalBB1805alteredBB

originalBB1805:                                   ; preds = %5869, %originalBB1805alteredBB
  %5878 = load i8*, i8** %31, align 8, !dbg !2460
  %5879 = load i8, i8* %5878, align 1, !dbg !2460
  %5880 = load i8*, i8** %19, align 8, !dbg !2460
  %5881 = load i64, i64* %29, align 8, !dbg !2460
  %5882 = getelementptr inbounds i8, i8* %5880, i64 %5881, !dbg !2460
  store i8 %5879, i8* %5882, align 1, !dbg !2460
  %5883 = load i32, i32* @x.35
  %5884 = load i32, i32* @y.36
  %5885 = sub i32 %5883, 1
  %5886 = mul i32 %5883, %5885
  %5887 = urem i32 %5886, 2
  %5888 = icmp eq i32 %5887, 0
  %5889 = icmp slt i32 %5884, 10
  %5890 = or i1 %5888, %5889
  br i1 %5890, label %originalBBpart21807, label %originalBB1805alteredBB

originalBBpart21807:                              ; preds = %originalBB1805
  br label %5891, !dbg !2460

5891:                                             ; preds = %originalBBpart21807, %originalBBpart21803
  %5892 = load i32, i32* @x.35
  %5893 = load i32, i32* @y.36
  %5894 = sub i32 %5892, 1
  %5895 = mul i32 %5892, %5894
  %5896 = urem i32 %5895, 2
  %5897 = icmp eq i32 %5896, 0
  %5898 = icmp slt i32 %5893, 10
  %5899 = or i1 %5897, %5898
  br i1 %5899, label %originalBB1809, label %originalBB1809alteredBB

originalBB1809:                                   ; preds = %5891, %originalBB1809alteredBB
  %5900 = load i64, i64* %29, align 8, !dbg !2463
  %5901 = add i64 %5900, 1, !dbg !2463
  store i64 %5901, i64* %29, align 8, !dbg !2463
  %5902 = load i32, i32* @x.35
  %5903 = load i32, i32* @y.36
  %5904 = sub i32 %5902, 1
  %5905 = mul i32 %5902, %5904
  %5906 = urem i32 %5905, 2
  %5907 = icmp eq i32 %5906, 0
  %5908 = icmp slt i32 %5903, 10
  %5909 = or i1 %5907, %5908
  br i1 %5909, label %originalBBpart21819, label %originalBB1809alteredBB

originalBBpart21819:                              ; preds = %originalBB1809
  br label %5910, !dbg !2463

5910:                                             ; preds = %originalBBpart21819
  %5911 = load i32, i32* @x.35
  %5912 = load i32, i32* @y.36
  %5913 = sub i32 %5911, 1
  %5914 = mul i32 %5911, %5913
  %5915 = urem i32 %5914, 2
  %5916 = icmp eq i32 %5915, 0
  %5917 = icmp slt i32 %5912, 10
  %5918 = or i1 %5916, %5917
  br i1 %5918, label %originalBB1821, label %originalBB1821alteredBB

originalBB1821:                                   ; preds = %5910, %originalBB1821alteredBB
  %5919 = load i32, i32* @x.35
  %5920 = load i32, i32* @y.36
  %5921 = sub i32 %5919, 1
  %5922 = mul i32 %5919, %5921
  %5923 = urem i32 %5922, 2
  %5924 = icmp eq i32 %5923, 0
  %5925 = icmp slt i32 %5920, 10
  %5926 = or i1 %5924, %5925
  br i1 %5926, label %originalBBpart21823, label %originalBB1821alteredBB

originalBBpart21823:                              ; preds = %originalBB1821
  br label %5927, !dbg !2463

5927:                                             ; preds = %originalBBpart21823
  %5928 = load i32, i32* @x.35
  %5929 = load i32, i32* @y.36
  %5930 = sub i32 %5928, 1
  %5931 = mul i32 %5928, %5930
  %5932 = urem i32 %5931, 2
  %5933 = icmp eq i32 %5932, 0
  %5934 = icmp slt i32 %5929, 10
  %5935 = or i1 %5933, %5934
  br i1 %5935, label %originalBB1825, label %originalBB1825alteredBB

originalBB1825:                                   ; preds = %5927, %originalBB1825alteredBB
  %5936 = load i8*, i8** %31, align 8, !dbg !2464
  %5937 = getelementptr inbounds i8, i8* %5936, i32 1, !dbg !2464
  store i8* %5937, i8** %31, align 8, !dbg !2464
  %5938 = load i32, i32* @x.35
  %5939 = load i32, i32* @y.36
  %5940 = sub i32 %5938, 1
  %5941 = mul i32 %5938, %5940
  %5942 = urem i32 %5941, 2
  %5943 = icmp eq i32 %5942, 0
  %5944 = icmp slt i32 %5939, 10
  %5945 = or i1 %5943, %5944
  br i1 %5945, label %originalBBpart21827, label %originalBB1825alteredBB

originalBBpart21827:                              ; preds = %originalBB1825
  br label %5812, !dbg !2465, !llvm.loop !2466

5946:                                             ; preds = %originalBBpart21795
  %5947 = load i32, i32* @x.35
  %5948 = load i32, i32* @y.36
  %5949 = sub i32 %5947, 1
  %5950 = mul i32 %5947, %5949
  %5951 = urem i32 %5950, 2
  %5952 = icmp eq i32 %5951, 0
  %5953 = icmp slt i32 %5948, 10
  %5954 = or i1 %5952, %5953
  br i1 %5954, label %originalBB1829, label %originalBB1829alteredBB

originalBB1829:                                   ; preds = %5946, %originalBB1829alteredBB
  %5955 = load i32, i32* @x.35
  %5956 = load i32, i32* @y.36
  %5957 = sub i32 %5955, 1
  %5958 = mul i32 %5955, %5957
  %5959 = urem i32 %5958, 2
  %5960 = icmp eq i32 %5959, 0
  %5961 = icmp slt i32 %5956, 10
  %5962 = or i1 %5960, %5961
  br i1 %5962, label %originalBBpart21831, label %originalBB1829alteredBB

originalBBpart21831:                              ; preds = %originalBB1829
  br label %5963, !dbg !2467

5963:                                             ; preds = %originalBBpart21831, %originalBBpart21787, %originalBBpart21783
  %5964 = load i32, i32* @x.35
  %5965 = load i32, i32* @y.36
  %5966 = sub i32 %5964, 1
  %5967 = mul i32 %5964, %5966
  %5968 = urem i32 %5967, 2
  %5969 = icmp eq i32 %5968, 0
  %5970 = icmp slt i32 %5965, 10
  %5971 = or i1 %5969, %5970
  br i1 %5971, label %originalBB1833, label %originalBB1833alteredBB

originalBB1833:                                   ; preds = %5963, %originalBB1833alteredBB
  %5972 = load i64, i64* %29, align 8, !dbg !2468
  %5973 = load i64, i64* %20, align 8, !dbg !2470
  %5974 = icmp ult i64 %5972, %5973, !dbg !2471
  %5975 = load i32, i32* @x.35
  %5976 = load i32, i32* @y.36
  %5977 = sub i32 %5975, 1
  %5978 = mul i32 %5975, %5977
  %5979 = urem i32 %5978, 2
  %5980 = icmp eq i32 %5979, 0
  %5981 = icmp slt i32 %5976, 10
  %5982 = or i1 %5980, %5981
  br i1 %5982, label %originalBBpart21835, label %originalBB1833alteredBB

originalBBpart21835:                              ; preds = %originalBB1833
  br i1 %5974, label %5983, label %6003, !dbg !2472

5983:                                             ; preds = %originalBBpart21835
  %5984 = load i32, i32* @x.35
  %5985 = load i32, i32* @y.36
  %5986 = sub i32 %5984, 1
  %5987 = mul i32 %5984, %5986
  %5988 = urem i32 %5987, 2
  %5989 = icmp eq i32 %5988, 0
  %5990 = icmp slt i32 %5985, 10
  %5991 = or i1 %5989, %5990
  br i1 %5991, label %originalBB1837, label %originalBB1837alteredBB

originalBB1837:                                   ; preds = %5983, %originalBB1837alteredBB
  %5992 = load i8*, i8** %19, align 8, !dbg !2473
  %5993 = load i64, i64* %29, align 8, !dbg !2474
  %5994 = getelementptr inbounds i8, i8* %5992, i64 %5993, !dbg !2473
  store i8 0, i8* %5994, align 1, !dbg !2475
  %5995 = load i32, i32* @x.35
  %5996 = load i32, i32* @y.36
  %5997 = sub i32 %5995, 1
  %5998 = mul i32 %5995, %5997
  %5999 = urem i32 %5998, 2
  %6000 = icmp eq i32 %5999, 0
  %6001 = icmp slt i32 %5996, 10
  %6002 = or i1 %6000, %6001
  br i1 %6002, label %originalBBpart21839, label %originalBB1837alteredBB

originalBBpart21839:                              ; preds = %originalBB1837
  br label %6003, !dbg !2473

6003:                                             ; preds = %originalBBpart21839, %originalBBpart21835
  %6004 = load i32, i32* @x.35
  %6005 = load i32, i32* @y.36
  %6006 = sub i32 %6004, 1
  %6007 = mul i32 %6004, %6006
  %6008 = urem i32 %6007, 2
  %6009 = icmp eq i32 %6008, 0
  %6010 = icmp slt i32 %6005, 10
  %6011 = or i1 %6009, %6010
  br i1 %6011, label %originalBB1841, label %originalBB1841alteredBB

originalBB1841:                                   ; preds = %6003, %originalBB1841alteredBB
  %6012 = load i64, i64* %29, align 8, !dbg !2476
  store i64 %6012, i64* %18, align 8, !dbg !2477
  %6013 = load i32, i32* @x.35
  %6014 = load i32, i32* @y.36
  %6015 = sub i32 %6013, 1
  %6016 = mul i32 %6013, %6015
  %6017 = urem i32 %6016, 2
  %6018 = icmp eq i32 %6017, 0
  %6019 = icmp slt i32 %6014, 10
  %6020 = or i1 %6018, %6019
  br i1 %6020, label %originalBBpart21843, label %originalBB1841alteredBB

originalBBpart21843:                              ; preds = %originalBB1841
  br label %6071, !dbg !2477

6021:                                             ; preds = %originalBBpart21747, %originalBBpart21566, %originalBBpart21214, %originalBBpart21114, %originalBBpart2909, %2774, %originalBBpart2841, %originalBBpart2805, %1834, %originalBBpart2526, %originalBBpart2248, %originalBBpart2228
  call void @llvm.dbg.label(metadata !2478), !dbg !2479
  %6022 = load i32, i32* %23, align 4, !dbg !2480
  %6023 = icmp eq i32 %6022, 2, !dbg !2482
  br i1 %6023, label %6024, label %6044, !dbg !2483

6024:                                             ; preds = %6021
  %6025 = load i32, i32* @x.35
  %6026 = load i32, i32* @y.36
  %6027 = sub i32 %6025, 1
  %6028 = mul i32 %6025, %6027
  %6029 = urem i32 %6028, 2
  %6030 = icmp eq i32 %6029, 0
  %6031 = icmp slt i32 %6026, 10
  %6032 = or i1 %6030, %6031
  br i1 %6032, label %originalBB1845, label %originalBB1845alteredBB

originalBB1845:                                   ; preds = %6024, %originalBB1845alteredBB
  %6033 = load i8, i8* %33, align 1, !dbg !2484
  %6034 = trunc i8 %6033 to i1, !dbg !2484
  %6035 = load i32, i32* @x.35
  %6036 = load i32, i32* @y.36
  %6037 = sub i32 %6035, 1
  %6038 = mul i32 %6035, %6037
  %6039 = urem i32 %6038, 2
  %6040 = icmp eq i32 %6039, 0
  %6041 = icmp slt i32 %6036, 10
  %6042 = or i1 %6040, %6041
  br i1 %6042, label %originalBBpart21847, label %originalBB1845alteredBB

originalBBpart21847:                              ; preds = %originalBB1845
  br i1 %6034, label %6043, label %6044, !dbg !2485

6043:                                             ; preds = %originalBBpart21847
  store i32 4, i32* %23, align 4, !dbg !2486
  br label %6044, !dbg !2487

6044:                                             ; preds = %6043, %originalBBpart21847, %6021
  %6045 = load i32, i32* @x.35
  %6046 = load i32, i32* @y.36
  %6047 = sub i32 %6045, 1
  %6048 = mul i32 %6045, %6047
  %6049 = urem i32 %6048, 2
  %6050 = icmp eq i32 %6049, 0
  %6051 = icmp slt i32 %6046, 10
  %6052 = or i1 %6050, %6051
  br i1 %6052, label %originalBB1849, label %originalBB1849alteredBB

originalBB1849:                                   ; preds = %6044, %originalBB1849alteredBB
  %6053 = load i8*, i8** %19, align 8, !dbg !2488
  %6054 = load i64, i64* %20, align 8, !dbg !2489
  %6055 = load i8*, i8** %21, align 8, !dbg !2490
  %6056 = load i64, i64* %22, align 8, !dbg !2491
  %6057 = load i32, i32* %23, align 4, !dbg !2492
  %6058 = load i32, i32* %24, align 4, !dbg !2493
  %6059 = and i32 %6058, -3, !dbg !2494
  %6060 = load i8*, i8** %26, align 8, !dbg !2495
  %6061 = load i8*, i8** %27, align 8, !dbg !2496
  %6062 = call i64 @quotearg_buffer_restyled(i8* %6053, i64 %6054, i8* %6055, i64 %6056, i32 %6057, i32 %6059, i32* null, i8* %6060, i8* %6061), !dbg !2497
  store i64 %6062, i64* %18, align 8, !dbg !2498
  %6063 = load i32, i32* @x.35
  %6064 = load i32, i32* @y.36
  %6065 = sub i32 %6063, 1
  %6066 = mul i32 %6063, %6065
  %6067 = urem i32 %6066, 2
  %6068 = icmp eq i32 %6067, 0
  %6069 = icmp slt i32 %6064, 10
  %6070 = or i1 %6068, %6069
  br i1 %6070, label %originalBBpart21857, label %originalBB1849alteredBB

originalBBpart21857:                              ; preds = %originalBB1849
  br label %6071, !dbg !2498

6071:                                             ; preds = %originalBBpart21857, %originalBBpart21843, %originalBBpart21763
  %6072 = load i32, i32* @x.35
  %6073 = load i32, i32* @y.36
  %6074 = sub i32 %6072, 1
  %6075 = mul i32 %6072, %6074
  %6076 = urem i32 %6075, 2
  %6077 = icmp eq i32 %6076, 0
  %6078 = icmp slt i32 %6073, 10
  %6079 = or i1 %6077, %6078
  br i1 %6079, label %originalBB1859, label %originalBB1859alteredBB

originalBB1859:                                   ; preds = %6071, %originalBB1859alteredBB
  %6080 = load i64, i64* %18, align 8, !dbg !2499
  %6081 = load i32, i32* @x.35
  %6082 = load i32, i32* @y.36
  %6083 = sub i32 %6081, 1
  %6084 = mul i32 %6081, %6083
  %6085 = urem i32 %6084, 2
  %6086 = icmp eq i32 %6085, 0
  %6087 = icmp slt i32 %6082, 10
  %6088 = or i1 %6086, %6087
  br i1 %6088, label %originalBBpart21861, label %originalBB1859alteredBB

originalBBpart21861:                              ; preds = %originalBB1859
  ret i64 %6080, !dbg !2499

originalBBalteredBB:                              ; preds = %originalBB, %9
  %6089 = alloca i64, align 8
  %6090 = alloca i8*, align 8
  %6091 = alloca i64, align 8
  %6092 = alloca i8*, align 8
  %6093 = alloca i64, align 8
  %6094 = alloca i32, align 4
  %6095 = alloca i32, align 4
  %6096 = alloca i32*, align 8
  %6097 = alloca i8*, align 8
  %6098 = alloca i8*, align 8
  %6099 = alloca i64, align 8
  %6100 = alloca i64, align 8
  %6101 = alloca i64, align 8
  %6102 = alloca i8*, align 8
  %6103 = alloca i64, align 8
  %6104 = alloca i8, align 1
  %6105 = alloca i8, align 1
  %6106 = alloca i8, align 1
  %6107 = alloca i8, align 1
  %6108 = alloca i8, align 1
  %6109 = alloca i8, align 1
  %6110 = alloca i8, align 1
  %6111 = alloca i8, align 1
  %6112 = alloca i8, align 1
  %6113 = alloca i8, align 1
  %6114 = alloca i8, align 1
  %6115 = alloca i64, align 8
  %6116 = alloca i8, align 1
  %6117 = alloca %struct.__mbstate_t, align 4
  %6118 = alloca i32, align 4
  %6119 = alloca i64, align 8
  %6120 = alloca i64, align 8
  %6121 = alloca i64, align 8
  store i8* %0, i8** %6090, align 8
  call void @llvm.dbg.declare(metadata i8** %6090, metadata !2500, metadata !DIExpression()), !dbg !1620
  store i64 %1, i64* %6091, align 8
  call void @llvm.dbg.declare(metadata i64* %6091, metadata !2532, metadata !DIExpression()), !dbg !1622
  store i8* %2, i8** %6092, align 8
  call void @llvm.dbg.declare(metadata i8** %6092, metadata !2533, metadata !DIExpression()), !dbg !1624
  store i64 %3, i64* %6093, align 8
  call void @llvm.dbg.declare(metadata i64* %6093, metadata !2534, metadata !DIExpression()), !dbg !1626
  store i32 %4, i32* %6094, align 4
  call void @llvm.dbg.declare(metadata i32* %6094, metadata !2535, metadata !DIExpression()), !dbg !1628
  store i32 %5, i32* %6095, align 4
  call void @llvm.dbg.declare(metadata i32* %6095, metadata !2536, metadata !DIExpression()), !dbg !1630
  store i32* %6, i32** %6096, align 8
  call void @llvm.dbg.declare(metadata i32** %6096, metadata !2537, metadata !DIExpression()), !dbg !1632
  store i8* %7, i8** %6097, align 8
  call void @llvm.dbg.declare(metadata i8** %6097, metadata !2538, metadata !DIExpression()), !dbg !1634
  store i8* %8, i8** %6098, align 8
  call void @llvm.dbg.declare(metadata i8** %6098, metadata !2539, metadata !DIExpression()), !dbg !1636
  call void @llvm.dbg.declare(metadata i64* %6099, metadata !2540, metadata !DIExpression()), !dbg !1638
  call void @llvm.dbg.declare(metadata i64* %6100, metadata !2541, metadata !DIExpression()), !dbg !1640
  store i64 0, i64* %6100, align 8, !dbg !1640
  call void @llvm.dbg.declare(metadata i64* %6101, metadata !2542, metadata !DIExpression()), !dbg !1642
  store i64 0, i64* %6101, align 8, !dbg !1642
  call void @llvm.dbg.declare(metadata i8** %6102, metadata !2543, metadata !DIExpression()), !dbg !1644
  store i8* null, i8** %6102, align 8, !dbg !1644
  call void @llvm.dbg.declare(metadata i64* %6103, metadata !2544, metadata !DIExpression()), !dbg !1646
  store i64 0, i64* %6103, align 8, !dbg !1646
  call void @llvm.dbg.declare(metadata i8* %6104, metadata !2545, metadata !DIExpression()), !dbg !1648
  store i8 0, i8* %6104, align 1, !dbg !1648
  call void @llvm.dbg.declare(metadata i8* %6105, metadata !2546, metadata !DIExpression()), !dbg !1650
  %6122 = call i64 @__ctype_get_mb_cur_max() #10, !dbg !1651
  %6123 = icmp eq i64 %6122, 1, !dbg !1652
  %6124 = zext i1 %6123 to i8, !dbg !1650
  store i8 %6124, i8* %6105, align 1, !dbg !1650
  call void @llvm.dbg.declare(metadata i8* %6106, metadata !2547, metadata !DIExpression()), !dbg !1654
  %6125 = load i32, i32* %6095, align 4, !dbg !1655
  %_ = shl i32 %6125, 2
  %_1 = sub i32 0, %6125
  %gen = add i32 %_1, 2
  %_2 = shl i32 %6125, 2
  %_3 = sub i32 %6125, 2
  %gen4 = mul i32 %_3, 2
  %6126 = and i32 %6125, 2, !dbg !1656
  %6127 = icmp ne i32 %6126, 0, !dbg !1657
  %6128 = zext i1 %6127 to i8, !dbg !1654
  store i8 %6128, i8* %6106, align 1, !dbg !1654
  call void @llvm.dbg.declare(metadata i8* %6107, metadata !2548, metadata !DIExpression()), !dbg !1659
  store i8 0, i8* %6107, align 1, !dbg !1659
  call void @llvm.dbg.declare(metadata i8* %6108, metadata !2549, metadata !DIExpression()), !dbg !1661
  store i8 0, i8* %6108, align 1, !dbg !1661
  call void @llvm.dbg.declare(metadata i8* %6109, metadata !2550, metadata !DIExpression()), !dbg !1663
  store i8 1, i8* %6109, align 1, !dbg !1663
  br label %originalBB

originalBB5alteredBB:                             ; preds = %originalBB5, %66
  %6129 = load i32, i32* %23, align 4, !dbg !1667
  br label %originalBB5

originalBB9alteredBB:                             ; preds = %originalBB9, %84
  store i32 5, i32* %23, align 4, !dbg !1669
  store i8 1, i8* %35, align 1, !dbg !1671
  br label %originalBB9

originalBB13alteredBB:                            ; preds = %originalBB13, %101
  %6130 = load i8, i8* %35, align 1, !dbg !1673
  %6131 = trunc i8 %6130 to i1, !dbg !1673
  br label %originalBB13

originalBB17alteredBB:                            ; preds = %originalBB17, %120
  br label %originalBB17

originalBB21alteredBB:                            ; preds = %originalBB21, %137
  %6132 = load i64, i64* %29, align 8, !dbg !1677
  %6133 = load i64, i64* %20, align 8, !dbg !1677
  %6134 = icmp ult i64 %6132, %6133, !dbg !1677
  br label %originalBB21

originalBB25alteredBB:                            ; preds = %originalBB25, %157
  %6135 = load i8*, i8** %19, align 8, !dbg !1677
  %6136 = load i64, i64* %29, align 8, !dbg !1677
  %6137 = getelementptr inbounds i8, i8* %6135, i64 %6136, !dbg !1677
  store i8 34, i8* %6137, align 1, !dbg !1677
  br label %originalBB25

originalBB29alteredBB:                            ; preds = %originalBB29, %177
  %6138 = load i64, i64* %29, align 8, !dbg !1680
  %_30 = shl i64 %6138, 1
  %_31 = sub i64 0, %6138
  %gen32 = add i64 %_31, 1
  %_33 = shl i64 %6138, 1
  %_34 = shl i64 %6138, 1
  %6139 = add i64 %6138, 1, !dbg !1680
  store i64 %6139, i64* %29, align 8, !dbg !1680
  br label %originalBB29

originalBB38alteredBB:                            ; preds = %originalBB38, %196
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %213
  store i8 1, i8* %33, align 1, !dbg !1681
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.63, i64 0, i64 0), i8** %31, align 8, !dbg !1682
  store i64 1, i64* %32, align 8, !dbg !1683
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %230
  store i8 1, i8* %33, align 1, !dbg !1685
  store i8 0, i8* %35, align 1, !dbg !1686
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %247
  %6140 = load i32, i32* %23, align 4, !dbg !1688
  %6141 = icmp ne i32 %6140, 10, !dbg !1691
  br label %originalBB50

originalBB54alteredBB:                            ; preds = %originalBB54, %266
  %6142 = load i32, i32* %23, align 4, !dbg !1693
  %6143 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.64, i64 0, i64 0), i32 %6142), !dbg !1695
  store i8* %6143, i8** %26, align 8, !dbg !1696
  %6144 = load i32, i32* %23, align 4, !dbg !1697
  %6145 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.65, i64 0, i64 0), i32 %6144), !dbg !1698
  store i8* %6145, i8** %27, align 8, !dbg !1699
  br label %originalBB54

originalBB58alteredBB:                            ; preds = %originalBB58, %287
  %6146 = load i8, i8* %35, align 1, !dbg !1701
  %6147 = trunc i8 %6146 to i1, !dbg !1701
  br label %originalBB58

originalBB62alteredBB:                            ; preds = %originalBB62, %308
  %6148 = load i8*, i8** %31, align 8, !dbg !1708
  %6149 = load i8, i8* %6148, align 1, !dbg !1710
  %6150 = icmp ne i8 %6149, 0, !dbg !1711
  br label %originalBB62

originalBB66alteredBB:                            ; preds = %originalBB66, %328
  br label %originalBB66

originalBB70alteredBB:                            ; preds = %originalBB70, %345
  %6151 = load i64, i64* %29, align 8, !dbg !1713
  %6152 = load i64, i64* %20, align 8, !dbg !1713
  %6153 = icmp ult i64 %6151, %6152, !dbg !1713
  br label %originalBB70

originalBB74alteredBB:                            ; preds = %originalBB74, %371
  %6154 = load i64, i64* %29, align 8, !dbg !1716
  %_75 = sub i64 %6154, 1
  %gen76 = mul i64 %_75, 1
  %_77 = sub i64 0, %6154
  %gen78 = add i64 %_77, 1
  %_79 = sub i64 0, %6154
  %gen80 = add i64 %_79, 1
  %_81 = sub i64 0, %6154
  %gen82 = add i64 %_81, 1
  %_83 = shl i64 %6154, 1
  %_84 = sub i64 %6154, 1
  %gen85 = mul i64 %_84, 1
  %_86 = sub i64 0, %6154
  %gen87 = add i64 %_86, 1
  %6155 = add i64 %6154, 1, !dbg !1716
  store i64 %6155, i64* %29, align 8, !dbg !1716
  br label %originalBB74

originalBB91alteredBB:                            ; preds = %originalBB91, %390
  br label %originalBB91

originalBB95alteredBB:                            ; preds = %originalBB95, %410
  br label %originalBB95

originalBB99alteredBB:                            ; preds = %originalBB99, %427
  store i8 1, i8* %33, align 1, !dbg !1721
  %6156 = load i8*, i8** %27, align 8, !dbg !1722
  store i8* %6156, i8** %31, align 8, !dbg !1723
  %6157 = load i8*, i8** %31, align 8, !dbg !1724
  %6158 = call i64 @strlen(i8* %6157) #13, !dbg !1725
  store i64 %6158, i64* %32, align 8, !dbg !1726
  br label %originalBB99

originalBB103alteredBB:                           ; preds = %originalBB103, %447
  store i8 1, i8* %33, align 1, !dbg !1728
  br label %originalBB103

originalBB107alteredBB:                           ; preds = %originalBB107, %464
  store i8 1, i8* %35, align 1, !dbg !1730
  br label %originalBB107

originalBB111alteredBB:                           ; preds = %originalBB111, %481
  %6159 = load i8, i8* %35, align 1, !dbg !1732
  %6160 = trunc i8 %6159 to i1, !dbg !1732
  br label %originalBB111

originalBB115alteredBB:                           ; preds = %originalBB115, %500
  store i8 1, i8* %33, align 1, !dbg !1735
  br label %originalBB115

originalBB119alteredBB:                           ; preds = %originalBB119, %517
  br label %originalBB119

originalBB123alteredBB:                           ; preds = %originalBB123, %534
  store i32 2, i32* %23, align 4, !dbg !1738
  %6161 = load i8, i8* %35, align 1, !dbg !1739
  %6162 = trunc i8 %6161 to i1, !dbg !1739
  br label %originalBB123

originalBB127alteredBB:                           ; preds = %originalBB127, %553
  br label %originalBB127

originalBB131alteredBB:                           ; preds = %originalBB131, %578
  %6163 = load i64, i64* %29, align 8, !dbg !1746
  %_132 = sub i64 %6163, 1
  %gen133 = mul i64 %_132, 1
  %_134 = sub i64 %6163, 1
  %gen135 = mul i64 %_134, 1
  %_136 = shl i64 %6163, 1
  %_137 = shl i64 %6163, 1
  %_138 = sub i64 0, %6163
  %gen139 = add i64 %_138, 1
  %6164 = add i64 %6163, 1, !dbg !1746
  store i64 %6164, i64* %29, align 8, !dbg !1746
  br label %originalBB131

originalBB143alteredBB:                           ; preds = %originalBB143, %597
  br label %originalBB143

originalBB147alteredBB:                           ; preds = %originalBB147, %614
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.65, i64 0, i64 0), i8** %31, align 8, !dbg !1747
  store i64 1, i64* %32, align 8, !dbg !1748
  br label %originalBB147

originalBB151alteredBB:                           ; preds = %originalBB151, %631
  store i8 0, i8* %35, align 1, !dbg !1750
  br label %originalBB151

originalBB155alteredBB:                           ; preds = %originalBB155, %648
  call void @abort() #12, !dbg !1752
  br label %originalBB155

originalBB159alteredBB:                           ; preds = %originalBB159, %665
  store i64 0, i64* %28, align 8, !dbg !1753
  br label %originalBB159

originalBB163alteredBB:                           ; preds = %originalBB163, %682
  %6165 = load i64, i64* %22, align 8, !dbg !1756
  %6166 = icmp eq i64 %6165, -1, !dbg !1758
  br label %originalBB163

originalBB167alteredBB:                           ; preds = %originalBB167, %701
  %6167 = load i8*, i8** %21, align 8, !dbg !1759
  %6168 = load i64, i64* %28, align 8, !dbg !1760
  %6169 = getelementptr inbounds i8, i8* %6167, i64 %6168, !dbg !1759
  %6170 = load i8, i8* %6169, align 1, !dbg !1759
  %6171 = sext i8 %6170 to i32, !dbg !1759
  %6172 = icmp eq i32 %6171, 0, !dbg !1761
  %6173 = zext i1 %6172 to i32, !dbg !1761
  br label %originalBB167

originalBB171alteredBB:                           ; preds = %originalBB171, %725
  %6174 = load i64, i64* %28, align 8, !dbg !1762
  %6175 = load i64, i64* %22, align 8, !dbg !1763
  %6176 = icmp eq i64 %6174, %6175, !dbg !1764
  %6177 = zext i1 %6176 to i32, !dbg !1764
  br label %originalBB171

originalBB175alteredBB:                           ; preds = %originalBB175, %750
  store i8 0, i8* %41, align 1, !dbg !1773
  call void @llvm.dbg.declare(metadata !4, metadata !2551, metadata !DIExpression()), !dbg !1775
  store i8 0, i8* %42, align 1, !dbg !1775
  call void @llvm.dbg.declare(metadata !4, metadata !2586, metadata !DIExpression()), !dbg !1777
  store i8 0, i8* %43, align 1, !dbg !1777
  %6178 = load i8, i8* %33, align 1, !dbg !1778
  %6179 = trunc i8 %6178 to i1, !dbg !1778
  br label %originalBB175

originalBB179alteredBB:                           ; preds = %originalBB179, %769
  %6180 = load i32, i32* %23, align 4, !dbg !1781
  %6181 = icmp ne i32 %6180, 2, !dbg !1782
  br label %originalBB179

originalBB183alteredBB:                           ; preds = %originalBB183, %788
  %6182 = load i64, i64* %32, align 8, !dbg !1784
  %6183 = icmp ne i64 %6182, 0, !dbg !1784
  br label %originalBB183

originalBB187alteredBB:                           ; preds = %originalBB187, %807
  %6184 = load i64, i64* %28, align 8, !dbg !1786
  %6185 = load i64, i64* %32, align 8, !dbg !1787
  %_188 = sub i64 %6184, %6185
  %gen189 = mul i64 %_188, %6185
  %_190 = shl i64 %6184, %6185
  %_191 = shl i64 %6184, %6185
  %_192 = sub i64 %6184, %6185
  %gen193 = mul i64 %_192, %6185
  %_194 = shl i64 %6184, %6185
  %_195 = sub i64 %6184, %6185
  %gen196 = mul i64 %_195, %6185
  %_197 = sub i64 0, %6184
  %gen198 = add i64 %_197, %6185
  %6186 = add i64 %6184, %6185, !dbg !1788
  %6187 = load i64, i64* %22, align 8, !dbg !1789
  %6188 = icmp eq i64 %6187, -1, !dbg !1790
  br label %originalBB187

originalBB202alteredBB:                           ; preds = %originalBB202, %829
  %6189 = load i64, i64* %32, align 8, !dbg !1792
  %6190 = icmp ult i64 1, %6189, !dbg !1793
  br label %originalBB202

originalBB206alteredBB:                           ; preds = %originalBB206, %848
  %6191 = load i8*, i8** %21, align 8, !dbg !1794
  %6192 = call i64 @strlen(i8* %6191) #13, !dbg !1795
  store i64 %6192, i64* %22, align 8, !dbg !1796
  br label %originalBB206

originalBB210alteredBB:                           ; preds = %originalBB210, %867
  %6193 = load i64, i64* %22, align 8, !dbg !1797
  br label %originalBB210

originalBB214alteredBB:                           ; preds = %originalBB214, %885
  %6194 = icmp ule i64 %818, %886, !dbg !1798
  br label %originalBB214

originalBB218alteredBB:                           ; preds = %originalBB218, %904
  %6195 = load i8*, i8** %21, align 8, !dbg !1800
  %6196 = load i64, i64* %28, align 8, !dbg !1801
  %6197 = getelementptr inbounds i8, i8* %6195, i64 %6196, !dbg !1802
  %6198 = load i8*, i8** %31, align 8, !dbg !1803
  %6199 = load i64, i64* %32, align 8, !dbg !1804
  %6200 = call i32 @memcmp(i8* %6197, i8* %6198, i64 %6199) #13, !dbg !1805
  %6201 = icmp eq i32 %6200, 0, !dbg !1806
  br label %originalBB218

originalBB222alteredBB:                           ; preds = %originalBB222, %928
  %6202 = load i8, i8* %35, align 1, !dbg !1808
  %6203 = trunc i8 %6202 to i1, !dbg !1808
  br label %originalBB222

originalBB226alteredBB:                           ; preds = %originalBB226, %947
  br label %originalBB226

originalBB230alteredBB:                           ; preds = %originalBB230, %964
  store i8 1, i8* %41, align 1, !dbg !1813
  br label %originalBB230

originalBB234alteredBB:                           ; preds = %originalBB234, %981
  %6204 = load i8*, i8** %21, align 8, !dbg !1815
  %6205 = load i64, i64* %28, align 8, !dbg !1816
  %6206 = getelementptr inbounds i8, i8* %6204, i64 %6205, !dbg !1815
  %6207 = load i8, i8* %6206, align 1, !dbg !1815
  store i8 %6207, i8* %39, align 1, !dbg !1817
  %6208 = load i8, i8* %39, align 1, !dbg !1818
  %6209 = zext i8 %6208 to i32, !dbg !1818
  br label %originalBB234

originalBB238alteredBB:                           ; preds = %originalBB238, %1004
  %6210 = load i8, i8* %33, align 1, !dbg !1820
  %6211 = trunc i8 %6210 to i1, !dbg !1820
  br label %originalBB238

originalBB242alteredBB:                           ; preds = %originalBB242, %1023
  br label %originalBB242

originalBB246alteredBB:                           ; preds = %originalBB246, %1043
  br label %originalBB246

originalBB250alteredBB:                           ; preds = %originalBB250, %1060
  store i8 1, i8* %42, align 1, !dbg !1829
  %6212 = load i32, i32* %23, align 4, !dbg !1830
  %6213 = icmp eq i32 %6212, 2, !dbg !1830
  br label %originalBB250

originalBB254alteredBB:                           ; preds = %originalBB254, %1079
  %6214 = load i8, i8* %36, align 1, !dbg !1830
  %6215 = trunc i8 %6214 to i1, !dbg !1830
  br label %originalBB254

originalBB258alteredBB:                           ; preds = %originalBB258, %1098
  br label %originalBB258

originalBB262alteredBB:                           ; preds = %originalBB262, %1115
  %6216 = load i64, i64* %29, align 8, !dbg !1834
  %6217 = load i64, i64* %20, align 8, !dbg !1834
  %6218 = icmp ult i64 %6216, %6217, !dbg !1834
  br label %originalBB262

originalBB266alteredBB:                           ; preds = %originalBB266, %1135
  %6219 = load i8*, i8** %19, align 8, !dbg !1834
  %6220 = load i64, i64* %29, align 8, !dbg !1834
  %6221 = getelementptr inbounds i8, i8* %6219, i64 %6220, !dbg !1834
  store i8 39, i8* %6221, align 1, !dbg !1834
  br label %originalBB266

originalBB270alteredBB:                           ; preds = %originalBB270, %1155
  %6222 = load i64, i64* %29, align 8, !dbg !1837
  %_271 = sub i64 0, %6222
  %gen272 = add i64 %_271, 1
  %_273 = shl i64 %6222, 1
  %_274 = sub i64 0, %6222
  %gen275 = add i64 %_274, 1
  %_276 = shl i64 %6222, 1
  %_277 = sub i64 0, %6222
  %gen278 = add i64 %_277, 1
  %_279 = sub i64 %6222, 1
  %gen280 = mul i64 %_279, 1
  %_281 = sub i64 0, %6222
  %gen282 = add i64 %_281, 1
  %_283 = sub i64 0, %6222
  %gen284 = add i64 %_283, 1
  %6223 = add i64 %6222, 1, !dbg !1837
  %6224 = trunc i64 1 to i32
  %_285 = shl i32 %6224, -5
  %_286 = sub i32 %6224, -5
  %gen287 = mul i32 %_286, -5
  %_288 = shl i32 %6224, -5
  %_289 = sub i32 0, %6224
  %gen290 = add i32 %_289, -5
  %_291 = sub i32 0, %6224
  %gen292 = add i32 %_291, -5
  %6225 = mul i32 %6224, -5
  %6226 = add i32 %6225, 3
  %6227 = trunc i64 %6222 to i32
  %_293 = shl i32 %6227, 2
  %_294 = sub i32 0, %6227
  %gen295 = add i32 %_294, 2
  %_296 = sub i32 %6227, 2
  %gen297 = mul i32 %_296, 2
  %_298 = sub i32 0, %6227
  %gen299 = add i32 %_298, 2
  %_300 = sub i32 %6227, 2
  %gen301 = mul i32 %_300, 2
  %_302 = sub i32 0, %6227
  %gen303 = add i32 %_302, 2
  %6228 = add i32 %6227, 2
  %6229 = trunc i64 %6223 to i32
  %_304 = shl i32 %6229, -2
  %_305 = sub i32 %6229, -2
  %gen306 = mul i32 %_305, -2
  %_307 = sub i32 0, %6229
  %gen308 = add i32 %_307, -2
  %_309 = sub i32 0, %6229
  %gen310 = add i32 %_309, -2
  %_311 = shl i32 %6229, -2
  %6230 = mul i32 %6229, -2
  %_312 = sub i32 0, %6230
  %gen313 = add i32 %_312, 2
  %_314 = sub i32 0, %6230
  %gen315 = add i32 %_314, 2
  %_316 = sub i32 %6230, 2
  %gen317 = mul i32 %_316, 2
  %_318 = shl i32 %6230, 2
  %_319 = sub i32 %6230, 2
  %gen320 = mul i32 %_319, 2
  %_321 = shl i32 %6230, 2
  %_322 = sub i32 %6230, 2
  %gen323 = mul i32 %_322, 2
  %_324 = shl i32 %6230, 2
  %6231 = add i32 %6230, 2
  %_325 = shl i32 %6226, %6226
  %_326 = sub i32 0, %6226
  %gen327 = add i32 %_326, %6226
  %_328 = sub i32 %6226, %6226
  %gen329 = mul i32 %_328, %6226
  %_330 = shl i32 %6226, %6226
  %_331 = shl i32 %6226, %6226
  %_332 = sub i32 %6226, %6226
  %gen333 = mul i32 %_332, %6226
  %_334 = sub i32 %6226, %6226
  %gen335 = mul i32 %_334, %6226
  %6232 = mul i32 %6226, %6226
  %_336 = sub i32 0, %6232
  %gen337 = add i32 %_336, %6232
  %6233 = mul i32 %6232, %6232
  %_338 = sub i32 0, %6228
  %gen339 = add i32 %_338, %6228
  %_340 = shl i32 %6228, %6228
  %_341 = sub i32 0, %6228
  %gen342 = add i32 %_341, %6228
  %_343 = shl i32 %6228, %6228
  %_344 = sub i32 %6228, %6228
  %gen345 = mul i32 %_344, %6228
  %_346 = shl i32 %6228, %6228
  %_347 = shl i32 %6228, %6228
  %6234 = mul i32 %6228, %6228
  %_348 = sub i32 0, %6234
  %gen349 = add i32 %_348, %6234
  %_350 = shl i32 %6234, %6234
  %_351 = shl i32 %6234, %6234
  %_352 = sub i32 0, %6234
  %gen353 = add i32 %_352, %6234
  %6235 = mul i32 %6234, %6234
  %_354 = sub i32 %6231, %6231
  %gen355 = mul i32 %_354, %6231
  %_356 = sub i32 0, %6231
  %gen357 = add i32 %_356, %6231
  %_358 = shl i32 %6231, %6231
  %6236 = mul i32 %6231, %6231
  %_359 = sub i32 %6236, %6236
  %gen360 = mul i32 %_359, %6236
  %_361 = sub i32 0, %6236
  %gen362 = add i32 %_361, %6236
  %_363 = sub i32 %6236, %6236
  %gen364 = mul i32 %_363, %6236
  %_365 = sub i32 %6236, %6236
  %gen366 = mul i32 %_365, %6236
  %_367 = sub i32 0, %6236
  %gen368 = add i32 %_367, %6236
  %6237 = mul i32 %6236, %6236
  %_369 = sub i32 0, %6233
  %gen370 = add i32 %_369, %6235
  %_371 = sub i32 %6233, %6235
  %gen372 = mul i32 %_371, %6235
  %_373 = shl i32 %6233, %6235
  %_374 = sub i32 0, %6233
  %gen375 = add i32 %_374, %6235
  %_376 = sub i32 0, %6233
  %gen377 = add i32 %_376, %6235
  %6238 = add i32 %6233, %6235
  %_378 = sub i32 %6238, %6237
  %gen379 = mul i32 %_378, %6237
  %_380 = sub i32 %6238, %6237
  %gen381 = mul i32 %_380, %6237
  %6239 = sub i32 %6238, %6237
  %6240 = add i32 %6239, 5
  %6241 = icmp ne i32 %6240, 5
  br label %originalBB270

originalBB385alteredBB:                           ; preds = %originalBB385, %1192
  br label %originalBB385

originalBB389alteredBB:                           ; preds = %originalBB389, %1209
  store i64 %1165, i64* %29, align 8, !dbg !1837
  br label %originalBB389

originalBB393alteredBB:                           ; preds = %originalBB393, %1226
  br label %originalBB393

originalBB397alteredBB:                           ; preds = %originalBB397, %1247
  %6242 = load i8*, i8** %19, align 8, !dbg !1838
  %6243 = load i64, i64* %29, align 8, !dbg !1838
  %6244 = getelementptr inbounds i8, i8* %6242, i64 %6243, !dbg !1838
  store i8 36, i8* %6244, align 1, !dbg !1838
  br label %originalBB397

originalBB401alteredBB:                           ; preds = %originalBB401, %1267
  %6245 = load i64, i64* %29, align 8, !dbg !1841
  %_402 = sub i64 %6245, 1
  %gen403 = mul i64 %_402, 1
  %_404 = sub i64 %6245, 1
  %gen405 = mul i64 %_404, 1
  %6246 = add i64 %6245, 1, !dbg !1841
  store i64 %6246, i64* %29, align 8, !dbg !1841
  br label %originalBB401

originalBB409alteredBB:                           ; preds = %originalBB409, %1286
  br label %originalBB409

originalBB413alteredBB:                           ; preds = %originalBB413, %1307
  %6247 = load i8*, i8** %19, align 8, !dbg !1842
  %6248 = load i64, i64* %29, align 8, !dbg !1842
  %6249 = getelementptr inbounds i8, i8* %6247, i64 %6248, !dbg !1842
  store i8 39, i8* %6249, align 1, !dbg !1842
  br label %originalBB413

originalBB417alteredBB:                           ; preds = %originalBB417, %1331
  br label %originalBB417

originalBB421alteredBB:                           ; preds = %originalBB421, %1348
  %6250 = load i64, i64* %29, align 8, !dbg !1846
  %6251 = load i64, i64* %20, align 8, !dbg !1846
  %6252 = icmp ult i64 %6250, %6251, !dbg !1846
  br label %originalBB421

originalBB425alteredBB:                           ; preds = %originalBB425, %1372
  %6253 = load i64, i64* %29, align 8, !dbg !1849
  %_426 = sub i64 0, %6253
  %gen427 = add i64 %_426, 1
  %_428 = sub i64 0, %6253
  %gen429 = add i64 %_428, 1
  %6254 = add i64 %6253, 1, !dbg !1849
  store i64 %6254, i64* %29, align 8, !dbg !1849
  br label %originalBB425

originalBB433alteredBB:                           ; preds = %originalBB433, %1391
  br label %originalBB433

originalBB437alteredBB:                           ; preds = %originalBB437, %1408
  %6255 = load i32, i32* %23, align 4, !dbg !1850
  %6256 = icmp ne i32 %6255, 2, !dbg !1852
  br label %originalBB437

originalBB441alteredBB:                           ; preds = %originalBB441, %1427
  %6257 = load i64, i64* %28, align 8, !dbg !1854
  %_442 = sub i64 %6257, 1
  %gen443 = mul i64 %_442, 1
  %_444 = sub i64 0, %6257
  %gen445 = add i64 %_444, 1
  %_446 = shl i64 %6257, 1
  %_447 = sub i64 0, %6257
  %gen448 = add i64 %_447, 1
  %_449 = sub i64 %6257, 1
  %gen450 = mul i64 %_449, 1
  %_451 = sub i64 0, %6257
  %gen452 = add i64 %_451, 1
  %_453 = sub i64 %6257, 1
  %gen454 = mul i64 %_453, 1
  %6258 = add i64 %6257, 1, !dbg !1855
  %6259 = load i64, i64* %22, align 8, !dbg !1856
  %6260 = icmp ult i64 %6258, %6259, !dbg !1857
  br label %originalBB441

originalBB458alteredBB:                           ; preds = %originalBB458, %1448
  %6261 = load i8*, i8** %21, align 8, !dbg !1859
  %6262 = load i64, i64* %28, align 8, !dbg !1860
  %_459 = sub i64 0, %6262
  %gen460 = add i64 %_459, 1
  %6263 = add i64 %6262, 1, !dbg !1861
  %6264 = getelementptr inbounds i8, i8* %6261, i64 %6263, !dbg !1859
  %6265 = load i8, i8* %6264, align 1, !dbg !1859
  %6266 = sext i8 %6265 to i32, !dbg !1859
  %6267 = icmp sle i32 48, %6266, !dbg !1862
  br label %originalBB458

originalBB464alteredBB:                           ; preds = %originalBB464, %1472
  %6268 = load i8*, i8** %21, align 8, !dbg !1864
  %6269 = load i64, i64* %28, align 8, !dbg !1865
  %_465 = sub i64 %6269, 1
  %gen466 = mul i64 %_465, 1
  %_467 = shl i64 %6269, 1
  %_468 = shl i64 %6269, 1
  %_469 = sub i64 0, %6269
  %gen470 = add i64 %_469, 1
  %_471 = shl i64 %6269, 1
  %6270 = add i64 %6269, 1, !dbg !1866
  %6271 = getelementptr inbounds i8, i8* %6268, i64 %6270, !dbg !1864
  %6272 = load i8, i8* %6271, align 1, !dbg !1864
  %6273 = sext i8 %6272 to i32, !dbg !1864
  %6274 = icmp sle i32 %6273, 57, !dbg !1867
  br label %originalBB464

originalBB475alteredBB:                           ; preds = %originalBB475, %1497
  %6275 = load i64, i64* %29, align 8, !dbg !1871
  %6276 = load i64, i64* %20, align 8, !dbg !1871
  %6277 = icmp ult i64 %6275, %6276, !dbg !1871
  br label %originalBB475

originalBB479alteredBB:                           ; preds = %originalBB479, %1524
  br label %originalBB479

originalBB483alteredBB:                           ; preds = %originalBB483, %1541
  %6278 = load i64, i64* %29, align 8, !dbg !1876
  %6279 = load i64, i64* %20, align 8, !dbg !1876
  %6280 = icmp ult i64 %6278, %6279, !dbg !1876
  br label %originalBB483

originalBB487alteredBB:                           ; preds = %originalBB487, %1561
  %6281 = load i8*, i8** %19, align 8, !dbg !1876
  %6282 = load i64, i64* %29, align 8, !dbg !1876
  %6283 = getelementptr inbounds i8, i8* %6281, i64 %6282, !dbg !1876
  store i8 48, i8* %6283, align 1, !dbg !1876
  br label %originalBB487

originalBB491alteredBB:                           ; preds = %originalBB491, %1581
  %6284 = load i64, i64* %29, align 8, !dbg !1879
  %_492 = sub i64 0, %6284
  %gen493 = add i64 %_492, 1
  %_494 = sub i64 %6284, 1
  %gen495 = mul i64 %_494, 1
  %_496 = sub i64 0, %6284
  %gen497 = add i64 %_496, 1
  %_498 = sub i64 %6284, 1
  %gen499 = mul i64 %_498, 1
  %_500 = sub i64 0, %6284
  %gen501 = add i64 %_500, 1
  %_502 = shl i64 %6284, 1
  %_503 = sub i64 %6284, 1
  %gen504 = mul i64 %_503, 1
  %6285 = add i64 %6284, 1, !dbg !1879
  store i64 %6285, i64* %29, align 8, !dbg !1879
  br label %originalBB491

originalBB508alteredBB:                           ; preds = %originalBB508, %1601
  store i8 48, i8* %39, align 1, !dbg !1881
  br label %originalBB508

originalBB512alteredBB:                           ; preds = %originalBB512, %1622
  br label %originalBB512

originalBB516alteredBB:                           ; preds = %originalBB516, %1640
  br label %originalBB516

originalBB520alteredBB:                           ; preds = %originalBB520, %1659
  %6286 = load i8, i8* %35, align 1, !dbg !1891
  %6287 = trunc i8 %6286 to i1, !dbg !1891
  br label %originalBB520

originalBB524alteredBB:                           ; preds = %originalBB524, %1678
  br label %originalBB524

originalBB528alteredBB:                           ; preds = %originalBB528, %1718
  br label %originalBB528

originalBB532alteredBB:                           ; preds = %originalBB532, %1735
  %6288 = icmp ult i64 %1702, %1703, !dbg !1904
  br label %originalBB532

originalBB536alteredBB:                           ; preds = %originalBB536, %1753
  %6289 = load i8*, i8** %21, align 8, !dbg !1906
  %6290 = load i64, i64* %28, align 8, !dbg !1907
  %_537 = shl i64 %6290, 1
  %_538 = shl i64 %6290, 1
  %_539 = shl i64 %6290, 1
  %_540 = sub i64 0, %6290
  %gen541 = add i64 %_540, 1
  %_542 = shl i64 %6290, 1
  %_543 = sub i64 0, %6290
  %gen544 = add i64 %_543, 1
  %_545 = sub i64 0, %6290
  %gen546 = add i64 %_545, 1
  %_547 = sub i64 %6290, 1
  %gen548 = mul i64 %_547, 1
  %_549 = sub i64 %6290, 1
  %gen550 = mul i64 %_549, 1
  %6291 = add i64 %6290, 1, !dbg !1908
  %6292 = trunc i64 1 to i32
  %_551 = sub i32 %6292, 4
  %gen552 = mul i32 %_551, 4
  %_553 = sub i32 0, %6292
  %gen554 = add i32 %_553, 4
  %_555 = shl i32 %6292, 4
  %_556 = sub i32 %6292, 4
  %gen557 = mul i32 %_556, 4
  %_558 = sub i32 %6292, 4
  %gen559 = mul i32 %_558, 4
  %6293 = mul i32 %6292, 4
  %_560 = shl i32 %6293, 3
  %_561 = shl i32 %6293, 3
  %_562 = sub i32 0, %6293
  %gen563 = add i32 %_562, 3
  %_564 = shl i32 %6293, 3
  %_565 = sub i32 %6293, 3
  %gen566 = mul i32 %_565, 3
  %_567 = sub i32 %6293, 3
  %gen568 = mul i32 %_567, 3
  %6294 = add i32 %6293, 3
  %6295 = trunc i64 %6290 to i32
  %_569 = sub i32 0, %6295
  %gen570 = add i32 %_569, 2
  %_571 = shl i32 %6295, 2
  %_572 = shl i32 %6295, 2
  %_573 = sub i32 %6295, 2
  %gen574 = mul i32 %_573, 2
  %_575 = shl i32 %6295, 2
  %_576 = sub i32 %6295, 2
  %gen577 = mul i32 %_576, 2
  %6296 = mul i32 %6295, 2
  %_578 = sub i32 %6296, 1
  %gen579 = mul i32 %_578, 1
  %_580 = sub i32 0, %6296
  %gen581 = add i32 %_580, 1
  %_582 = sub i32 %6296, 1
  %gen583 = mul i32 %_582, 1
  %_584 = sub i32 0, %6296
  %gen585 = add i32 %_584, 1
  %_586 = sub i32 %6296, 1
  %gen587 = mul i32 %_586, 1
  %_588 = shl i32 %6296, 1
  %6297 = add i32 %6296, 1
  %_589 = shl i32 %6294, %6294
  %_590 = sub i32 0, %6294
  %gen591 = add i32 %_590, %6294
  %_592 = shl i32 %6294, %6294
  %_593 = sub i32 %6294, %6294
  %gen594 = mul i32 %_593, %6294
  %_595 = sub i32 %6294, %6294
  %gen596 = mul i32 %_595, %6294
  %_597 = sub i32 %6294, %6294
  %gen598 = mul i32 %_597, %6294
  %6298 = mul i32 %6294, %6294
  %_599 = sub i32 %6297, %6297
  %gen600 = mul i32 %_599, %6297
  %_601 = sub i32 0, %6297
  %gen602 = add i32 %_601, %6297
  %_603 = sub i32 %6297, %6297
  %gen604 = mul i32 %_603, %6297
  %_605 = sub i32 0, %6297
  %gen606 = add i32 %_605, %6297
  %_607 = sub i32 0, %6297
  %gen608 = add i32 %_607, %6297
  %_609 = sub i32 0, %6297
  %gen610 = add i32 %_609, %6297
  %_611 = sub i32 %6297, %6297
  %gen612 = mul i32 %_611, %6297
  %6299 = mul i32 %6297, %6297
  %_613 = sub i32 %6299, 34
  %gen614 = mul i32 %_613, 34
  %6300 = mul i32 %6299, 34
  %_615 = sub i32 %6298, %6300
  %gen616 = mul i32 %_615, %6300
  %_617 = shl i32 %6298, %6300
  %6301 = sub i32 %6298, %6300
  %_618 = shl i32 %6301, -2
  %_619 = sub i32 0, %6301
  %gen620 = add i32 %_619, -2
  %_621 = shl i32 %6301, -2
  %_622 = shl i32 %6301, -2
  %_623 = shl i32 %6301, -2
  %6302 = mul i32 %6301, -2
  %_624 = sub i32 0, %6302
  %gen625 = add i32 %_624, -2
  %_626 = sub i32 0, %6302
  %gen627 = add i32 %_626, -2
  %_628 = sub i32 0, %6302
  %gen629 = add i32 %_628, -2
  %_630 = sub i32 0, %6302
  %gen631 = add i32 %_630, -2
  %_632 = sub i32 0, %6302
  %gen633 = add i32 %_632, -2
  %_634 = shl i32 %6302, -2
  %_635 = sub i32 0, %6302
  %gen636 = add i32 %_635, -2
  %_637 = shl i32 %6302, -2
  %_638 = sub i32 %6302, -2
  %gen639 = mul i32 %_638, -2
  %6303 = add i32 %6302, -2
  %6304 = icmp ne i32 %6303, -4
  br label %originalBB536

originalBB643alteredBB:                           ; preds = %originalBB643, %1792
  %6305 = load i8*, i8** %21, align 8, !dbg !1911
  %6306 = load i64, i64* %28, align 8, !dbg !1912
  %_644 = sub i64 %6306, 2
  %gen645 = mul i64 %_644, 2
  %_646 = sub i64 0, %6306
  %gen647 = add i64 %_646, 2
  %_648 = sub i64 0, %6306
  %gen649 = add i64 %_648, 2
  %_650 = shl i64 %6306, 2
  %_651 = sub i64 %6306, 2
  %gen652 = mul i64 %_651, 2
  %6307 = add i64 %6306, 2, !dbg !1913
  %6308 = getelementptr inbounds i8, i8* %6305, i64 %6307, !dbg !1911
  %6309 = load i8, i8* %6308, align 1, !dbg !1911
  %6310 = sext i8 %6309 to i32, !dbg !1911
  br label %originalBB643

originalBB656alteredBB:                           ; preds = %originalBB656, %1815
  %6311 = load i8, i8* %35, align 1, !dbg !1915
  %6312 = trunc i8 %6311 to i1, !dbg !1915
  br label %originalBB656

originalBB660alteredBB:                           ; preds = %originalBB660, %1843
  %6313 = load i64, i64* %29, align 8, !dbg !1926
  %6314 = load i64, i64* %20, align 8, !dbg !1926
  %6315 = icmp ult i64 %6313, %6314, !dbg !1926
  br label %originalBB660

originalBB664alteredBB:                           ; preds = %originalBB664, %1867
  %6316 = load i64, i64* %29, align 8, !dbg !1929
  %_665 = sub i64 0, %6316
  %gen666 = add i64 %_665, 1
  %6317 = add i64 %6316, 1, !dbg !1929
  store i64 %6317, i64* %29, align 8, !dbg !1929
  br label %originalBB664

originalBB670alteredBB:                           ; preds = %originalBB670, %1886
  br label %originalBB670

originalBB674alteredBB:                           ; preds = %originalBB674, %1907
  %6318 = load i8*, i8** %19, align 8, !dbg !1931
  %6319 = load i64, i64* %29, align 8, !dbg !1931
  %6320 = getelementptr inbounds i8, i8* %6318, i64 %6319, !dbg !1931
  store i8 34, i8* %6320, align 1, !dbg !1931
  br label %originalBB674

originalBB678alteredBB:                           ; preds = %originalBB678, %1927
  %6321 = load i64, i64* %29, align 8, !dbg !1934
  %_679 = sub i64 0, %6321
  %gen680 = add i64 %_679, 1
  %_681 = sub i64 %6321, 1
  %gen682 = mul i64 %_681, 1
  %_683 = sub i64 %6321, 1
  %gen684 = mul i64 %_683, 1
  %_685 = sub i64 0, %6321
  %gen686 = add i64 %_685, 1
  %_687 = shl i64 %6321, 1
  %6322 = add i64 %6321, 1, !dbg !1934
  %6323 = trunc i64 1 to i32
  %6324 = mul i32 %6323, -5
  %_688 = sub i32 0, %6324
  %gen689 = add i32 %_688, -5
  %_690 = sub i32 %6324, -5
  %gen691 = mul i32 %_690, -5
  %6325 = add i32 %6324, -5
  %_692 = sub i32 0, %6325
  %gen693 = add i32 %_692, %6325
  %6326 = mul i32 %6325, %6325
  %_694 = sub i32 %6326, %6325
  %gen695 = mul i32 %_694, %6325
  %6327 = sub i32 %6326, %6325
  %_696 = sub i32 %6327, 2
  %gen697 = mul i32 %_696, 2
  %_698 = sub i32 0, %6327
  %gen699 = add i32 %_698, 2
  %_700 = sub i32 0, %6327
  %gen701 = add i32 %_700, 2
  %_702 = sub i32 %6327, 2
  %gen703 = mul i32 %_702, 2
  %6328 = srem i32 %6327, 2
  %_704 = sub i32 0, %6328
  %gen705 = add i32 %_704, 5
  %6329 = mul i32 %6328, 5
  %_706 = shl i32 %6329, 2
  %_707 = sub i32 %6329, 2
  %gen708 = mul i32 %_707, 2
  %6330 = add i32 %6329, 2
  %6331 = icmp eq i32 %6330, 2
  br label %originalBB678

originalBB712alteredBB:                           ; preds = %originalBB712, %1955
  br label %originalBB712

originalBB716alteredBB:                           ; preds = %originalBB716, %1972
  store i64 %1937, i64* %29, align 8, !dbg !1934
  br label %originalBB716

originalBB720alteredBB:                           ; preds = %originalBB720, %1989
  br label %originalBB720

originalBB724alteredBB:                           ; preds = %originalBB724, %2006
  %6332 = load i64, i64* %29, align 8, !dbg !1936
  %6333 = load i64, i64* %20, align 8, !dbg !1936
  %6334 = icmp ult i64 %6332, %6333, !dbg !1936
  br label %originalBB724

originalBB728alteredBB:                           ; preds = %originalBB728, %2026
  %6335 = load i8*, i8** %19, align 8, !dbg !1936
  %6336 = load i64, i64* %29, align 8, !dbg !1936
  %6337 = getelementptr inbounds i8, i8* %6335, i64 %6336, !dbg !1936
  store i8 34, i8* %6337, align 1, !dbg !1936
  br label %originalBB728

originalBB732alteredBB:                           ; preds = %originalBB732, %2046
  %6338 = load i64, i64* %29, align 8, !dbg !1939
  %_733 = shl i64 %6338, 1
  %6339 = add i64 %6338, 1, !dbg !1939
  store i64 %6339, i64* %29, align 8, !dbg !1939
  br label %originalBB732

originalBB737alteredBB:                           ; preds = %originalBB737, %2065
  br label %originalBB737

originalBB741alteredBB:                           ; preds = %originalBB741, %2082
  %6340 = load i64, i64* %29, align 8, !dbg !1941
  %6341 = load i64, i64* %20, align 8, !dbg !1941
  %6342 = icmp ult i64 %6340, %6341, !dbg !1941
  br label %originalBB741

originalBB745alteredBB:                           ; preds = %originalBB745, %2102
  %6343 = load i8*, i8** %19, align 8, !dbg !1941
  %6344 = load i64, i64* %29, align 8, !dbg !1941
  %6345 = getelementptr inbounds i8, i8* %6343, i64 %6344, !dbg !1941
  store i8 63, i8* %6345, align 1, !dbg !1941
  br label %originalBB745

originalBB749alteredBB:                           ; preds = %originalBB749, %2122
  %6346 = load i64, i64* %29, align 8, !dbg !1944
  %_750 = sub i64 0, %6346
  %gen751 = add i64 %_750, 1
  %6347 = add i64 %6346, 1, !dbg !1944
  store i64 %6347, i64* %29, align 8, !dbg !1944
  br label %originalBB749

originalBB755alteredBB:                           ; preds = %originalBB755, %2141
  br label %originalBB755

originalBB759alteredBB:                           ; preds = %originalBB759, %2159
  br label %originalBB759

originalBB763alteredBB:                           ; preds = %originalBB763, %2176
  br label %originalBB763

originalBB767alteredBB:                           ; preds = %originalBB767, %2193
  br label %originalBB767

originalBB771alteredBB:                           ; preds = %originalBB771, %2210
  br label %originalBB771

originalBB775alteredBB:                           ; preds = %originalBB775, %2227
  store i8 97, i8* %40, align 1, !dbg !1951
  br label %originalBB775

originalBB779alteredBB:                           ; preds = %originalBB779, %2244
  store i8 98, i8* %40, align 1, !dbg !1953
  br label %originalBB779

originalBB783alteredBB:                           ; preds = %originalBB783, %2262
  store i8 110, i8* %40, align 1, !dbg !1957
  br label %originalBB783

originalBB787alteredBB:                           ; preds = %originalBB787, %2279
  store i8 114, i8* %40, align 1, !dbg !1959
  br label %originalBB787

originalBB791alteredBB:                           ; preds = %originalBB791, %2296
  store i8 116, i8* %40, align 1, !dbg !1961
  br label %originalBB791

originalBB795alteredBB:                           ; preds = %originalBB795, %2313
  store i8 118, i8* %40, align 1, !dbg !1963
  br label %originalBB795

originalBB799alteredBB:                           ; preds = %originalBB799, %2334
  %6348 = load i8, i8* %35, align 1, !dbg !1971
  %6349 = trunc i8 %6348 to i1, !dbg !1971
  br label %originalBB799

originalBB803alteredBB:                           ; preds = %originalBB803, %2353
  br label %originalBB803

originalBB807alteredBB:                           ; preds = %originalBB807, %2370
  br label %originalBB807

originalBB811alteredBB:                           ; preds = %originalBB811, %2387
  %6350 = load i8, i8* %33, align 1, !dbg !1977
  %6351 = trunc i8 %6350 to i1, !dbg !1977
  br label %originalBB811

originalBB815alteredBB:                           ; preds = %originalBB815, %2406
  %6352 = load i8, i8* %35, align 1, !dbg !1980
  %6353 = trunc i8 %6352 to i1, !dbg !1980
  br label %originalBB815

originalBB819alteredBB:                           ; preds = %originalBB819, %2425
  %6354 = load i64, i64* %32, align 8, !dbg !1982
  %6355 = icmp ne i64 %6354, 0, !dbg !1982
  br label %originalBB819

originalBB823alteredBB:                           ; preds = %originalBB823, %2444
  br label %originalBB823

originalBB827alteredBB:                           ; preds = %originalBB827, %2461
  br label %originalBB827

originalBB831alteredBB:                           ; preds = %originalBB831, %2478
  %6356 = load i32, i32* %23, align 4, !dbg !1987
  %6357 = icmp eq i32 %6356, 2, !dbg !1989
  br label %originalBB831

originalBB835alteredBB:                           ; preds = %originalBB835, %2497
  %6358 = load i8, i8* %35, align 1, !dbg !1991
  %6359 = trunc i8 %6358 to i1, !dbg !1991
  br label %originalBB835

originalBB839alteredBB:                           ; preds = %originalBB839, %2516
  br label %originalBB839

originalBB843alteredBB:                           ; preds = %originalBB843, %2533
  br label %originalBB843

originalBB847alteredBB:                           ; preds = %originalBB847, %2550
  %6360 = load i8, i8* %33, align 1, !dbg !1996
  %6361 = trunc i8 %6360 to i1, !dbg !1996
  br label %originalBB847

originalBB851alteredBB:                           ; preds = %originalBB851, %2569
  %6362 = load i8, i8* %40, align 1, !dbg !1999
  store i8 %6362, i8* %39, align 1, !dbg !2001
  br label %originalBB851

originalBB855alteredBB:                           ; preds = %originalBB855, %2587
  br label %originalBB855

originalBB859alteredBB:                           ; preds = %originalBB859, %2604
  %6363 = load i64, i64* %22, align 8, !dbg !2004
  %6364 = icmp eq i64 %6363, -1, !dbg !2006
  br label %originalBB859

originalBB863alteredBB:                           ; preds = %originalBB863, %2623
  %6365 = load i8*, i8** %21, align 8, !dbg !2008
  %6366 = getelementptr inbounds i8, i8* %6365, i64 1, !dbg !2008
  %6367 = load i8, i8* %6366, align 1, !dbg !2008
  %6368 = sext i8 %6367 to i32, !dbg !2008
  %6369 = icmp eq i32 %6368, 0, !dbg !2009
  br label %originalBB863

originalBB867alteredBB:                           ; preds = %originalBB867, %2648
  br label %originalBB867

originalBB871alteredBB:                           ; preds = %originalBB871, %2665
  br label %originalBB871

originalBB875alteredBB:                           ; preds = %originalBB875, %2685
  br label %originalBB875

originalBB879alteredBB:                           ; preds = %originalBB879, %2702
  br label %originalBB879

originalBB883alteredBB:                           ; preds = %originalBB883, %2719
  store i8 1, i8* %43, align 1, !dbg !2020
  br label %originalBB883

originalBB887alteredBB:                           ; preds = %originalBB887, %2736
  %6370 = load i32, i32* %23, align 4, !dbg !2022
  %6371 = icmp eq i32 %6370, 2, !dbg !2024
  br label %originalBB887

originalBB891alteredBB:                           ; preds = %originalBB891, %2755
  %6372 = load i8, i8* %35, align 1, !dbg !2026
  %6373 = trunc i8 %6372 to i1, !dbg !2026
  br label %originalBB891

originalBB895alteredBB:                           ; preds = %originalBB895, %2775
  br label %originalBB895

originalBB899alteredBB:                           ; preds = %originalBB899, %2792
  store i8 1, i8* %37, align 1, !dbg !2030
  store i8 1, i8* %43, align 1, !dbg !2031
  %6374 = load i32, i32* %23, align 4, !dbg !2032
  %6375 = icmp eq i32 %6374, 2, !dbg !2034
  br label %originalBB899

originalBB903alteredBB:                           ; preds = %originalBB903, %2811
  %6376 = load i8, i8* %35, align 1, !dbg !2036
  %6377 = trunc i8 %6376 to i1, !dbg !2036
  br label %originalBB903

originalBB907alteredBB:                           ; preds = %originalBB907, %2830
  br label %originalBB907

originalBB911alteredBB:                           ; preds = %originalBB911, %2850
  %6378 = load i64, i64* %30, align 8, !dbg !2044
  %6379 = icmp ne i64 %6378, 0, !dbg !2044
  br label %originalBB911

originalBB915alteredBB:                           ; preds = %originalBB915, %2871
  br label %originalBB915

originalBB919alteredBB:                           ; preds = %originalBB919, %2888
  %6380 = load i64, i64* %29, align 8, !dbg !2052
  %6381 = load i64, i64* %20, align 8, !dbg !2052
  %6382 = icmp ult i64 %6380, %6381, !dbg !2052
  br label %originalBB919

originalBB923alteredBB:                           ; preds = %originalBB923, %2908
  %6383 = load i8*, i8** %19, align 8, !dbg !2052
  %6384 = load i64, i64* %29, align 8, !dbg !2052
  %6385 = getelementptr inbounds i8, i8* %6383, i64 %6384, !dbg !2052
  store i8 39, i8* %6385, align 1, !dbg !2052
  br label %originalBB923

originalBB927alteredBB:                           ; preds = %originalBB927, %2928
  %6386 = load i64, i64* %29, align 8, !dbg !2055
  %_928 = sub i64 0, %6386
  %gen929 = add i64 %_928, 1
  %6387 = add i64 %6386, 1, !dbg !2055
  store i64 %6387, i64* %29, align 8, !dbg !2055
  br label %originalBB927

originalBB933alteredBB:                           ; preds = %originalBB933, %2952
  %6388 = load i8*, i8** %19, align 8, !dbg !2057
  %6389 = load i64, i64* %29, align 8, !dbg !2057
  %6390 = getelementptr inbounds i8, i8* %6388, i64 %6389, !dbg !2057
  store i8 92, i8* %6390, align 1, !dbg !2057
  br label %originalBB933

originalBB937alteredBB:                           ; preds = %originalBB937, %2972
  %6391 = load i64, i64* %29, align 8, !dbg !2060
  %_938 = sub i64 %6391, 1
  %gen939 = mul i64 %_938, 1
  %_940 = sub i64 %6391, 1
  %gen941 = mul i64 %_940, 1
  %6392 = add i64 %6391, 1, !dbg !2060
  store i64 %6392, i64* %29, align 8, !dbg !2060
  br label %originalBB937

originalBB945alteredBB:                           ; preds = %originalBB945, %2991
  br label %originalBB945

originalBB949alteredBB:                           ; preds = %originalBB949, %3008
  %6393 = load i64, i64* %29, align 8, !dbg !2062
  %6394 = load i64, i64* %20, align 8, !dbg !2062
  %6395 = icmp ult i64 %6393, %6394, !dbg !2062
  br label %originalBB949

originalBB953alteredBB:                           ; preds = %originalBB953, %3028
  %6396 = load i8*, i8** %19, align 8, !dbg !2062
  %6397 = load i64, i64* %29, align 8, !dbg !2062
  %6398 = getelementptr inbounds i8, i8* %6396, i64 %6397, !dbg !2062
  store i8 39, i8* %6398, align 1, !dbg !2062
  br label %originalBB953

originalBB957alteredBB:                           ; preds = %originalBB957, %3048
  %6399 = load i64, i64* %29, align 8, !dbg !2065
  %_958 = sub i64 %6399, 1
  %gen959 = mul i64 %_958, 1
  %_960 = shl i64 %6399, 1
  %_961 = shl i64 %6399, 1
  %_962 = shl i64 %6399, 1
  %_963 = sub i64 0, %6399
  %gen964 = add i64 %_963, 1
  %6400 = add i64 %6399, 1, !dbg !2065
  store i64 %6400, i64* %29, align 8, !dbg !2065
  br label %originalBB957

originalBB968alteredBB:                           ; preds = %originalBB968, %3067
  store i8 0, i8* %36, align 1, !dbg !2066
  br label %originalBB968

originalBB972alteredBB:                           ; preds = %originalBB972, %3084
  br label %originalBB972

originalBB976alteredBB:                           ; preds = %originalBB976, %3105
  store i64 1, i64* %44, align 8, !dbg !2079
  %6401 = call i16** @__ctype_b_loc() #15, !dbg !2081
  %6402 = load i16*, i16** %6401, align 8, !dbg !2081
  %6403 = load i8, i8* %39, align 1, !dbg !2081
  %6404 = zext i8 %6403 to i32, !dbg !2081
  %6405 = sext i32 %6404 to i64, !dbg !2081
  %6406 = getelementptr inbounds i16, i16* %6402, i64 %6405, !dbg !2081
  %6407 = load i16, i16* %6406, align 2, !dbg !2081
  %6408 = zext i16 %6407 to i32, !dbg !2081
  %_977 = sub i32 0, %6408
  %gen978 = add i32 %_977, 16384
  %_979 = sub i32 0, %6408
  %gen980 = add i32 %_979, 16384
  %_981 = sub i32 %6408, 16384
  %gen982 = mul i32 %_981, 16384
  %6409 = and i32 %6408, 16384, !dbg !2081
  %6410 = icmp ne i32 %6409, 0, !dbg !2082
  %6411 = zext i1 %6410 to i8, !dbg !2083
  store i8 %6411, i8* %45, align 1, !dbg !2083
  br label %originalBB976

originalBB986alteredBB:                           ; preds = %originalBB986, %3143
  %6412 = icmp eq i64 %3135, -1, !dbg !2108
  br label %originalBB986

originalBB990alteredBB:                           ; preds = %originalBB990, %3161
  %6413 = load i8*, i8** %21, align 8, !dbg !2110
  %6414 = call i64 @strlen(i8* %6413) #13, !dbg !2111
  store i64 %6414, i64* %22, align 8, !dbg !2112
  br label %originalBB990

originalBB994alteredBB:                           ; preds = %originalBB994, %3180
  br label %originalBB994

originalBB998alteredBB:                           ; preds = %originalBB998, %3197
  %6415 = load i8*, i8** %21, align 8, !dbg !2121
  %6416 = load i64, i64* %28, align 8, !dbg !2122
  %6417 = load i64, i64* %44, align 8, !dbg !2123
  %_999 = sub i64 0, %6416
  %gen1000 = add i64 %_999, %6417
  %_1001 = sub i64 0, %6416
  %gen1002 = add i64 %_1001, %6417
  %_1003 = shl i64 %6416, %6417
  %_1004 = sub i64 0, %6416
  %gen1005 = add i64 %_1004, %6417
  %_1006 = sub i64 0, %6416
  %gen1007 = add i64 %_1006, %6417
  %_1008 = sub i64 0, %6416
  %gen1009 = add i64 %_1008, %6417
  %_1010 = sub i64 0, %6416
  %gen1011 = add i64 %_1010, %6417
  %_1012 = sub i64 0, %6416
  %gen1013 = add i64 %_1012, %6417
  %6418 = add i64 %6416, %6417, !dbg !2124
  %6419 = getelementptr inbounds i8, i8* %6415, i64 %6418, !dbg !2121
  %6420 = load i64, i64* %22, align 8, !dbg !2125
  %6421 = load i64, i64* %28, align 8, !dbg !2126
  %6422 = load i64, i64* %44, align 8, !dbg !2127
  %_1014 = sub i64 0, %6421
  %gen1015 = add i64 %_1014, %6422
  %_1016 = sub i64 0, %6421
  %gen1017 = add i64 %_1016, %6422
  %_1018 = sub i64 0, %6421
  %gen1019 = add i64 %_1018, %6422
  %6423 = add i64 %6421, %6422, !dbg !2128
  %_1020 = sub i64 %6420, %6423
  %gen1021 = mul i64 %_1020, %6423
  %6424 = sub i64 %6420, %6423, !dbg !2129
  %6425 = call i64 @rpl_mbrtowc(i32* %47, i8* %6419, i64 %6424, %struct.__mbstate_t* %46), !dbg !2130
  store i64 %6425, i64* %48, align 8, !dbg !2120
  %6426 = load i64, i64* %48, align 8, !dbg !2131
  %6427 = icmp eq i64 %6426, 0, !dbg !2133
  br label %originalBB998

originalBB1025alteredBB:                          ; preds = %originalBB1025, %3227
  br label %originalBB1025

originalBB1029alteredBB:                          ; preds = %originalBB1029, %3244
  %6428 = load i64, i64* %48, align 8, !dbg !2136
  %6429 = icmp eq i64 %6428, -1, !dbg !2138
  br label %originalBB1029

originalBB1033alteredBB:                          ; preds = %originalBB1033, %3263
  store i8 0, i8* %45, align 1, !dbg !2140
  br label %originalBB1033

originalBB1037alteredBB:                          ; preds = %originalBB1037, %3280
  %6430 = load i64, i64* %48, align 8, !dbg !2143
  %6431 = icmp eq i64 %6430, -2, !dbg !2145
  br label %originalBB1037

originalBB1041alteredBB:                          ; preds = %originalBB1041, %3299
  store i8 0, i8* %45, align 1, !dbg !2147
  br label %originalBB1041

originalBB1045alteredBB:                          ; preds = %originalBB1045, %3316
  %6432 = load i64, i64* %28, align 8, !dbg !2150
  %6433 = load i64, i64* %44, align 8, !dbg !2151
  %_1046 = sub i64 %6432, %6433
  %gen1047 = mul i64 %_1046, %6433
  %_1048 = sub i64 %6432, %6433
  %gen1049 = mul i64 %_1048, %6433
  %_1050 = shl i64 %6432, %6433
  %_1051 = sub i64 %6432, %6433
  %gen1052 = mul i64 %_1051, %6433
  %_1053 = sub i64 %6432, %6433
  %gen1054 = mul i64 %_1053, %6433
  %_1055 = shl i64 %6432, %6433
  %_1056 = sub i64 0, %6432
  %gen1057 = add i64 %_1056, %6433
  %6434 = add i64 %6432, %6433, !dbg !2152
  %6435 = load i64, i64* %22, align 8, !dbg !2153
  %6436 = icmp ult i64 %6434, %6435, !dbg !2154
  br label %originalBB1045

originalBB1061alteredBB:                          ; preds = %originalBB1061, %3338
  %6437 = load i8*, i8** %21, align 8, !dbg !2156
  %6438 = load i64, i64* %28, align 8, !dbg !2157
  %6439 = load i64, i64* %44, align 8, !dbg !2158
  %6440 = add i64 %6438, %6439, !dbg !2159
  %6441 = getelementptr inbounds i8, i8* %6437, i64 %6440, !dbg !2156
  %6442 = load i8, i8* %6441, align 1, !dbg !2156
  %6443 = sext i8 %6442 to i32, !dbg !2156
  %6444 = icmp ne i32 %6443, 0, !dbg !2155
  br label %originalBB1061

originalBB1065alteredBB:                          ; preds = %originalBB1065, %3363
  br label %originalBB1065

originalBB1069alteredBB:                          ; preds = %originalBB1069, %3381
  %6445 = load i64, i64* %44, align 8, !dbg !2161
  %_1070 = sub i64 0, %6445
  %gen1071 = add i64 %_1070, 1
  %_1072 = sub i64 %6445, 1
  %gen1073 = mul i64 %_1072, 1
  %6446 = add i64 %6445, 1, !dbg !2161
  store i64 %6446, i64* %44, align 8, !dbg !2161
  br label %originalBB1069

originalBB1077alteredBB:                          ; preds = %originalBB1077, %3400
  br label %originalBB1077

originalBB1081alteredBB:                          ; preds = %originalBB1081, %3417
  %6447 = load i8, i8* %35, align 1, !dbg !2164
  %6448 = trunc i8 %6447 to i1, !dbg !2164
  br label %originalBB1081

originalBB1085alteredBB:                          ; preds = %originalBB1085, %3436
  %6449 = load i32, i32* %23, align 4, !dbg !2168
  %6450 = icmp eq i32 %6449, 2, !dbg !2169
  br label %originalBB1085

originalBB1089alteredBB:                          ; preds = %originalBB1089, %3455
  store i64 1, i64* %49, align 8, !dbg !2174
  br label %originalBB1089

originalBB1093alteredBB:                          ; preds = %originalBB1093, %3472
  %6451 = load i64, i64* %49, align 8, !dbg !2177
  %6452 = load i64, i64* %48, align 8, !dbg !2179
  %6453 = icmp ult i64 %6451, %6452, !dbg !2180
  br label %originalBB1093

originalBB1097alteredBB:                          ; preds = %originalBB1097, %3492
  %6454 = load i8*, i8** %21, align 8, !dbg !2182
  %6455 = load i64, i64* %28, align 8, !dbg !2183
  %6456 = load i64, i64* %44, align 8, !dbg !2184
  %_1098 = sub i64 0, %6455
  %gen1099 = add i64 %_1098, %6456
  %_1100 = sub i64 0, %6455
  %gen1101 = add i64 %_1100, %6456
  %6457 = add i64 %6455, %6456, !dbg !2185
  %6458 = load i64, i64* %49, align 8, !dbg !2186
  %_1102 = sub i64 0, %6457
  %gen1103 = add i64 %_1102, %6458
  %_1104 = sub i64 0, %6457
  %gen1105 = add i64 %_1104, %6458
  %_1106 = sub i64 %6457, %6458
  %gen1107 = mul i64 %_1106, %6458
  %_1108 = shl i64 %6457, %6458
  %6459 = add i64 %6457, %6458, !dbg !2187
  %6460 = getelementptr inbounds i8, i8* %6454, i64 %6459, !dbg !2182
  %6461 = load i8, i8* %6460, align 1, !dbg !2182
  %6462 = sext i8 %6461 to i32, !dbg !2182
  br label %originalBB1097

originalBB1112alteredBB:                          ; preds = %originalBB1112, %3518
  br label %originalBB1112

originalBB1116alteredBB:                          ; preds = %originalBB1116, %3535
  br label %originalBB1116

originalBB1120alteredBB:                          ; preds = %originalBB1120, %3552
  br label %originalBB1120

originalBB1124alteredBB:                          ; preds = %originalBB1124, %3569
  %6463 = load i64, i64* %49, align 8, !dbg !2193
  %_1125 = sub i64 0, %6463
  %gen1126 = add i64 %_1125, 1
  %_1127 = sub i64 %6463, 1
  %gen1128 = mul i64 %_1127, 1
  %_1129 = shl i64 %6463, 1
  %_1130 = sub i64 0, %6463
  %gen1131 = add i64 %_1130, 1
  %_1132 = sub i64 %6463, 1
  %gen1133 = mul i64 %_1132, 1
  %6464 = add i64 %6463, 1, !dbg !2193
  store i64 %6464, i64* %49, align 8, !dbg !2193
  br label %originalBB1124

originalBB1137alteredBB:                          ; preds = %originalBB1137, %3589
  %6465 = load i32, i32* %47, align 4, !dbg !2198
  %6466 = call i32 @iswprint(i32 %6465) #10, !dbg !2200
  %6467 = icmp ne i32 %6466, 0, !dbg !2200
  br label %originalBB1137

originalBB1141alteredBB:                          ; preds = %originalBB1141, %3609
  store i8 0, i8* %45, align 1, !dbg !2202
  br label %originalBB1141

originalBB1145alteredBB:                          ; preds = %originalBB1145, %3626
  %6468 = load i64, i64* %48, align 8, !dbg !2204
  %6469 = load i64, i64* %44, align 8, !dbg !2205
  %_1146 = sub i64 %6469, %6468
  %gen1147 = mul i64 %_1146, %6468
  %_1148 = sub i64 %6469, %6468
  %gen1149 = mul i64 %_1148, %6468
  %_1150 = shl i64 %6469, %6468
  %_1151 = shl i64 %6469, %6468
  %_1152 = sub i64 %6469, %6468
  %gen1153 = mul i64 %_1152, %6468
  %6470 = add i64 %6469, %6468, !dbg !2205
  store i64 %6470, i64* %44, align 8, !dbg !2205
  br label %originalBB1145

originalBB1157alteredBB:                          ; preds = %originalBB1157, %3646
  br label %originalBB1157

originalBB1161alteredBB:                          ; preds = %originalBB1161, %3663
  br label %originalBB1161

originalBB1165alteredBB:                          ; preds = %originalBB1165, %3680
  br label %originalBB1165

originalBB1169alteredBB:                          ; preds = %originalBB1169, %3697
  %6471 = call i32 @mbsinit(%struct.__mbstate_t* %46) #13, !dbg !2207
  %6472 = icmp ne i32 %6471, 0, !dbg !2208
  %_1170 = shl i1 %6472, true
  %_1171 = sub i1 false, %6472
  %gen1172 = add i1 %_1171, true
  %_1173 = sub i1 false, %6472
  %gen1174 = add i1 %_1173, true
  %_1175 = sub i1 false, %6472
  %gen1176 = add i1 %_1175, true
  %_1177 = sub i1 %6472, true
  %gen1178 = mul i1 %_1177, true
  %_1179 = shl i1 %6472, true
  %_1180 = shl i1 %6472, true
  %6473 = xor i1 %6472, true, !dbg !2208
  br label %originalBB1169

originalBB1184alteredBB:                          ; preds = %originalBB1184, %3717
  br label %originalBB1184

originalBB1188alteredBB:                          ; preds = %originalBB1188, %3743
  %6474 = load i8, i8* %45, align 1, !dbg !2219
  %6475 = trunc i8 %6474 to i1, !dbg !2219
  br label %originalBB1188

originalBB1192alteredBB:                          ; preds = %originalBB1192, %3762
  %6476 = load i64, i64* %28, align 8, !dbg !2224
  %6477 = load i64, i64* %44, align 8, !dbg !2225
  %6478 = add i64 %6476, %6477, !dbg !2226
  store i64 %6478, i64* %50, align 8, !dbg !2223
  br label %originalBB1192

originalBB1196alteredBB:                          ; preds = %originalBB1196, %3782
  %6479 = load i8, i8* %33, align 1, !dbg !2228
  %6480 = trunc i8 %6479 to i1, !dbg !2228
  br label %originalBB1196

originalBB1200alteredBB:                          ; preds = %originalBB1200, %3801
  %6481 = load i8, i8* %45, align 1, !dbg !2234
  %6482 = trunc i8 %6481 to i1, !dbg !2234
  br label %originalBB1200

originalBB1204alteredBB:                          ; preds = %originalBB1204, %3820
  br label %originalBB1204

originalBB1208alteredBB:                          ; preds = %originalBB1208, %3837
  %6483 = load i8, i8* %35, align 1, !dbg !2238
  %6484 = trunc i8 %6483 to i1, !dbg !2238
  br label %originalBB1208

originalBB1212alteredBB:                          ; preds = %originalBB1212, %3856
  br label %originalBB1212

originalBB1216alteredBB:                          ; preds = %originalBB1216, %3873
  store i8 1, i8* %42, align 1, !dbg !2241
  %6485 = load i32, i32* %23, align 4, !dbg !2242
  %6486 = icmp eq i32 %6485, 2, !dbg !2242
  br label %originalBB1216

originalBB1220alteredBB:                          ; preds = %originalBB1220, %3892
  %6487 = load i8, i8* %36, align 1, !dbg !2242
  %6488 = trunc i8 %6487 to i1, !dbg !2242
  br label %originalBB1220

originalBB1224alteredBB:                          ; preds = %originalBB1224, %3912
  %6489 = load i64, i64* %29, align 8, !dbg !2246
  %6490 = load i64, i64* %20, align 8, !dbg !2246
  %6491 = icmp ult i64 %6489, %6490, !dbg !2246
  br label %originalBB1224

originalBB1228alteredBB:                          ; preds = %originalBB1228, %3932
  %6492 = load i8*, i8** %19, align 8, !dbg !2246
  %6493 = load i64, i64* %29, align 8, !dbg !2246
  %6494 = getelementptr inbounds i8, i8* %6492, i64 %6493, !dbg !2246
  store i8 39, i8* %6494, align 1, !dbg !2246
  br label %originalBB1228

originalBB1232alteredBB:                          ; preds = %originalBB1232, %3952
  %6495 = load i64, i64* %29, align 8, !dbg !2249
  %_1233 = sub i64 %6495, 1
  %gen1234 = mul i64 %_1233, 1
  %_1235 = sub i64 %6495, 1
  %gen1236 = mul i64 %_1235, 1
  %_1237 = shl i64 %6495, 1
  %_1238 = sub i64 0, %6495
  %gen1239 = add i64 %_1238, 1
  %_1240 = shl i64 %6495, 1
  %_1241 = sub i64 0, %6495
  %gen1242 = add i64 %_1241, 1
  %_1243 = shl i64 %6495, 1
  %6496 = add i64 %6495, 1, !dbg !2249
  store i64 %6496, i64* %29, align 8, !dbg !2249
  br label %originalBB1232

originalBB1247alteredBB:                          ; preds = %originalBB1247, %3971
  br label %originalBB1247

originalBB1251alteredBB:                          ; preds = %originalBB1251, %3988
  %6497 = load i64, i64* %29, align 8, !dbg !2250
  %6498 = load i64, i64* %20, align 8, !dbg !2250
  %6499 = icmp ult i64 %6497, %6498, !dbg !2250
  br label %originalBB1251

originalBB1255alteredBB:                          ; preds = %originalBB1255, %4008
  %6500 = load i8*, i8** %19, align 8, !dbg !2250
  %6501 = load i64, i64* %29, align 8, !dbg !2250
  %6502 = getelementptr inbounds i8, i8* %6500, i64 %6501, !dbg !2250
  store i8 36, i8* %6502, align 1, !dbg !2250
  br label %originalBB1255

originalBB1259alteredBB:                          ; preds = %originalBB1259, %4028
  %6503 = load i64, i64* %29, align 8, !dbg !2253
  %_1260 = shl i64 %6503, 1
  %_1261 = shl i64 %6503, 1
  %_1262 = shl i64 %6503, 1
  %_1263 = sub i64 %6503, 1
  %gen1264 = mul i64 %_1263, 1
  %6504 = add i64 %6503, 1, !dbg !2253
  store i64 %6504, i64* %29, align 8, !dbg !2253
  br label %originalBB1259

originalBB1268alteredBB:                          ; preds = %originalBB1268, %4047
  br label %originalBB1268

originalBB1272alteredBB:                          ; preds = %originalBB1272, %4075
  store i8 1, i8* %36, align 1, !dbg !2244
  br label %originalBB1272

originalBB1276alteredBB:                          ; preds = %originalBB1276, %4092
  br label %originalBB1276

originalBB1280alteredBB:                          ; preds = %originalBB1280, %4109
  %6505 = load i64, i64* %29, align 8, !dbg !2258
  %6506 = load i64, i64* %20, align 8, !dbg !2258
  %6507 = icmp ult i64 %6505, %6506, !dbg !2258
  br label %originalBB1280

originalBB1284alteredBB:                          ; preds = %originalBB1284, %4129
  %6508 = load i8*, i8** %19, align 8, !dbg !2258
  %6509 = load i64, i64* %29, align 8, !dbg !2258
  %6510 = getelementptr inbounds i8, i8* %6508, i64 %6509, !dbg !2258
  store i8 92, i8* %6510, align 1, !dbg !2258
  br label %originalBB1284

originalBB1288alteredBB:                          ; preds = %originalBB1288, %4149
  %6511 = load i64, i64* %29, align 8, !dbg !2261
  %_1289 = shl i64 %6511, 1
  %_1290 = shl i64 %6511, 1
  %_1291 = shl i64 %6511, 1
  %_1292 = shl i64 %6511, 1
  %_1293 = sub i64 0, %6511
  %gen1294 = add i64 %_1293, 1
  %_1295 = sub i64 0, %6511
  %gen1296 = add i64 %_1295, 1
  %6512 = add i64 %6511, 1, !dbg !2261
  store i64 %6512, i64* %29, align 8, !dbg !2261
  br label %originalBB1288

originalBB1300alteredBB:                          ; preds = %originalBB1300, %4168
  br label %originalBB1300

originalBB1304alteredBB:                          ; preds = %originalBB1304, %4186
  %6513 = load i64, i64* %29, align 8, !dbg !2263
  %6514 = load i64, i64* %20, align 8, !dbg !2263
  %6515 = icmp ult i64 %6513, %6514, !dbg !2263
  br label %originalBB1304

originalBB1308alteredBB:                          ; preds = %originalBB1308, %4206
  %6516 = load i8, i8* %39, align 1, !dbg !2263
  %6517 = zext i8 %6516 to i32, !dbg !2263
  %_1309 = sub i32 0, %6517
  %gen1310 = add i32 %_1309, 6
  %_1311 = sub i32 %6517, 6
  %gen1312 = mul i32 %_1311, 6
  %_1313 = sub i32 %6517, 6
  %gen1314 = mul i32 %_1313, 6
  %_1315 = shl i32 %6517, 6
  %_1316 = sub i32 %6517, 6
  %gen1317 = mul i32 %_1316, 6
  %_1318 = shl i32 %6517, 6
  %_1319 = sub i32 %6517, 6
  %gen1320 = mul i32 %_1319, 6
  %_1321 = sub i32 0, %6517
  %gen1322 = add i32 %_1321, 6
  %6518 = ashr i32 %6517, 6, !dbg !2263
  %_1323 = sub i32 0, 48
  %gen1324 = add i32 %_1323, %6518
  %_1325 = sub i32 48, %6518
  %gen1326 = mul i32 %_1325, %6518
  %6519 = add nsw i32 48, %6518, !dbg !2263
  %6520 = trunc i32 %6519 to i8, !dbg !2263
  %6521 = load i8*, i8** %19, align 8, !dbg !2263
  %6522 = load i64, i64* %29, align 8, !dbg !2263
  %6523 = getelementptr inbounds i8, i8* %6521, i64 %6522, !dbg !2263
  store i8 %6520, i8* %6523, align 1, !dbg !2263
  br label %originalBB1308

originalBB1330alteredBB:                          ; preds = %originalBB1330, %4234
  br label %originalBB1330

originalBB1334alteredBB:                          ; preds = %originalBB1334, %4251
  %6524 = load i64, i64* %29, align 8, !dbg !2268
  %6525 = load i64, i64* %20, align 8, !dbg !2268
  %6526 = icmp ult i64 %6524, %6525, !dbg !2268
  br label %originalBB1334

originalBB1338alteredBB:                          ; preds = %originalBB1338, %4271
  %6527 = load i8, i8* %39, align 1, !dbg !2268
  %6528 = zext i8 %6527 to i32, !dbg !2268
  %_1339 = sub i32 0, %6528
  %gen1340 = add i32 %_1339, 3
  %6529 = ashr i32 %6528, 3, !dbg !2268
  %_1341 = sub i32 %6529, 7
  %gen1342 = mul i32 %_1341, 7
  %_1343 = sub i32 0, %6529
  %gen1344 = add i32 %_1343, 7
  %_1345 = shl i32 %6529, 7
  %_1346 = sub i32 %6529, 7
  %gen1347 = mul i32 %_1346, 7
  %_1348 = sub i32 0, %6529
  %gen1349 = add i32 %_1348, 7
  %_1350 = sub i32 %6529, 7
  %gen1351 = mul i32 %_1350, 7
  %6530 = and i32 %6529, 7, !dbg !2268
  %_1352 = shl i32 48, %6530
  %_1353 = sub i32 48, %6530
  %gen1354 = mul i32 %_1353, %6530
  %_1355 = sub i32 48, %6530
  %gen1356 = mul i32 %_1355, %6530
  %_1357 = sub i32 48, %6530
  %gen1358 = mul i32 %_1357, %6530
  %_1359 = shl i32 48, %6530
  %_1360 = sub i32 0, 48
  %gen1361 = add i32 %_1360, %6530
  %6531 = add nsw i32 48, %6530, !dbg !2268
  %6532 = trunc i32 %6531 to i8, !dbg !2268
  %6533 = load i8*, i8** %19, align 8, !dbg !2268
  %6534 = load i64, i64* %29, align 8, !dbg !2268
  %6535 = getelementptr inbounds i8, i8* %6533, i64 %6534, !dbg !2268
  store i8 %6532, i8* %6535, align 1, !dbg !2268
  br label %originalBB1338

originalBB1365alteredBB:                          ; preds = %originalBB1365, %4297
  %6536 = load i64, i64* %29, align 8, !dbg !2271
  %_1366 = sub i64 %6536, 1
  %gen1367 = mul i64 %_1366, 1
  %_1368 = sub i64 %6536, 1
  %gen1369 = mul i64 %_1368, 1
  %_1370 = sub i64 %6536, 1
  %gen1371 = mul i64 %_1370, 1
  %_1372 = sub i64 0, %6536
  %gen1373 = add i64 %_1372, 1
  %_1374 = shl i64 %6536, 1
  %_1375 = sub i64 %6536, 1
  %gen1376 = mul i64 %_1375, 1
  %6537 = add i64 %6536, 1, !dbg !2271
  store i64 %6537, i64* %29, align 8, !dbg !2271
  br label %originalBB1365

originalBB1380alteredBB:                          ; preds = %originalBB1380, %4316
  %6538 = load i8, i8* %39, align 1, !dbg !2272
  %6539 = zext i8 %6538 to i32, !dbg !2272
  %_1381 = sub i32 %6539, 7
  %gen1382 = mul i32 %_1381, 7
  %_1383 = sub i32 0, %6539
  %gen1384 = add i32 %_1383, 7
  %_1385 = shl i32 %6539, 7
  %_1386 = sub i32 0, %6539
  %gen1387 = add i32 %_1386, 7
  %6540 = and i32 %6539, 7, !dbg !2273
  %_1388 = shl i32 48, %6540
  %_1389 = shl i32 48, %6540
  %_1390 = shl i32 48, %6540
  %_1391 = sub i32 0, 48
  %gen1392 = add i32 %_1391, %6540
  %_1393 = sub i32 48, %6540
  %gen1394 = mul i32 %_1393, %6540
  %6541 = add nsw i32 48, %6540, !dbg !2274
  %6542 = trunc i32 %6541 to i8, !dbg !2275
  store i8 %6542, i8* %39, align 1, !dbg !2276
  br label %originalBB1380

originalBB1398alteredBB:                          ; preds = %originalBB1398, %4342
  %6543 = load i64, i64* %29, align 8, !dbg !2283
  %6544 = load i64, i64* %20, align 8, !dbg !2283
  %6545 = icmp ult i64 %6543, %6544, !dbg !2283
  br label %originalBB1398

originalBB1402alteredBB:                          ; preds = %originalBB1402, %4362
  %6546 = load i8*, i8** %19, align 8, !dbg !2283
  %6547 = load i64, i64* %29, align 8, !dbg !2283
  %6548 = getelementptr inbounds i8, i8* %6546, i64 %6547, !dbg !2283
  store i8 92, i8* %6548, align 1, !dbg !2283
  br label %originalBB1402

originalBB1406alteredBB:                          ; preds = %originalBB1406, %4382
  %6549 = load i64, i64* %29, align 8, !dbg !2286
  %_1407 = sub i64 %6549, 1
  %gen1408 = mul i64 %_1407, 1
  %_1409 = shl i64 %6549, 1
  %_1410 = sub i64 0, %6549
  %gen1411 = add i64 %_1410, 1
  %_1412 = sub i64 0, %6549
  %gen1413 = add i64 %_1412, 1
  %_1414 = shl i64 %6549, 1
  %_1415 = sub i64 0, %6549
  %gen1416 = add i64 %_1415, 1
  %_1417 = sub i64 %6549, 1
  %gen1418 = mul i64 %_1417, 1
  %6550 = add i64 %6549, 1, !dbg !2286
  store i64 %6550, i64* %29, align 8, !dbg !2286
  br label %originalBB1406

originalBB1422alteredBB:                          ; preds = %originalBB1422, %4402
  br label %originalBB1422

originalBB1426alteredBB:                          ; preds = %originalBB1426, %4419
  %6551 = load i64, i64* %50, align 8, !dbg !2289
  %6552 = load i64, i64* %28, align 8, !dbg !2291
  %_1427 = sub i64 0, %6552
  %gen1428 = add i64 %_1427, 1
  %_1429 = sub i64 %6552, 1
  %gen1430 = mul i64 %_1429, 1
  %_1431 = shl i64 %6552, 1
  %_1432 = shl i64 %6552, 1
  %6553 = add i64 %6552, 1, !dbg !2292
  %6554 = icmp ule i64 %6551, %6553, !dbg !2293
  br label %originalBB1426

originalBB1436alteredBB:                          ; preds = %originalBB1436, %4440
  br label %originalBB1436

originalBB1440alteredBB:                          ; preds = %originalBB1440, %4464
  br label %originalBB1440

originalBB1444alteredBB:                          ; preds = %originalBB1444, %4481
  %6555 = load i64, i64* %29, align 8, !dbg !2303
  %6556 = load i64, i64* %20, align 8, !dbg !2303
  %6557 = icmp ult i64 %6555, %6556, !dbg !2303
  br label %originalBB1444

originalBB1448alteredBB:                          ; preds = %originalBB1448, %4509
  %6558 = load i64, i64* %29, align 8, !dbg !2307
  %6559 = load i64, i64* %20, align 8, !dbg !2307
  %6560 = icmp ult i64 %6558, %6559, !dbg !2307
  br label %originalBB1448

originalBB1452alteredBB:                          ; preds = %originalBB1452, %4529
  %6561 = load i8*, i8** %19, align 8, !dbg !2307
  %6562 = load i64, i64* %29, align 8, !dbg !2307
  %6563 = getelementptr inbounds i8, i8* %6561, i64 %6562, !dbg !2307
  store i8 39, i8* %6563, align 1, !dbg !2307
  br label %originalBB1452

originalBB1456alteredBB:                          ; preds = %originalBB1456, %4552
  store i8 0, i8* %36, align 1, !dbg !2301
  br label %originalBB1456

originalBB1460alteredBB:                          ; preds = %originalBB1460, %4569
  br label %originalBB1460

originalBB1464alteredBB:                          ; preds = %originalBB1464, %4586
  br label %originalBB1464

originalBB1468alteredBB:                          ; preds = %originalBB1468, %4607
  %6564 = load i8, i8* %39, align 1, !dbg !2312
  %6565 = load i8*, i8** %19, align 8, !dbg !2312
  %6566 = load i64, i64* %29, align 8, !dbg !2312
  %6567 = getelementptr inbounds i8, i8* %6565, i64 %6566, !dbg !2312
  store i8 %6564, i8* %6567, align 1, !dbg !2312
  br label %originalBB1468

originalBB1472alteredBB:                          ; preds = %originalBB1472, %4628
  %6568 = load i64, i64* %29, align 8, !dbg !2315
  %_1473 = sub i64 %6568, 1
  %gen1474 = mul i64 %_1473, 1
  %_1475 = sub i64 0, %6568
  %gen1476 = add i64 %_1475, 1
  %_1477 = shl i64 %6568, 1
  %_1478 = sub i64 %6568, 1
  %gen1479 = mul i64 %_1478, 1
  %_1480 = sub i64 %6568, 1
  %gen1481 = mul i64 %_1480, 1
  %_1482 = sub i64 %6568, 1
  %gen1483 = mul i64 %_1482, 1
  %6569 = add i64 %6568, 1, !dbg !2315
  store i64 %6569, i64* %29, align 8, !dbg !2315
  br label %originalBB1472

originalBB1487alteredBB:                          ; preds = %originalBB1487, %4653
  br label %originalBB1487

originalBB1491alteredBB:                          ; preds = %originalBB1491, %4670
  br label %originalBB1491

originalBB1495alteredBB:                          ; preds = %originalBB1495, %4687
  %6570 = load i8, i8* %33, align 1, !dbg !2325
  %6571 = trunc i8 %6570 to i1, !dbg !2325
  br label %originalBB1495

originalBB1499alteredBB:                          ; preds = %originalBB1499, %4706
  %6572 = load i32, i32* %23, align 4, !dbg !2328
  %6573 = icmp ne i32 %6572, 2, !dbg !2329
  br label %originalBB1499

originalBB1503alteredBB:                          ; preds = %originalBB1503, %4725
  %6574 = load i8, i8* %35, align 1, !dbg !2331
  %6575 = trunc i8 %6574 to i1, !dbg !2331
  br label %originalBB1503

originalBB1507alteredBB:                          ; preds = %originalBB1507, %4744
  %6576 = load i32*, i32** %25, align 8, !dbg !2333
  %6577 = icmp ne i32* %6576, null, !dbg !2333
  br label %originalBB1507

originalBB1511alteredBB:                          ; preds = %originalBB1511, %4763
  %6578 = load i32*, i32** %25, align 8, !dbg !2335
  %6579 = load i8, i8* %39, align 1, !dbg !2336
  %6580 = zext i8 %6579 to i64, !dbg !2336
  %_1512 = sub i64 %6580, 32
  %gen1513 = mul i64 %_1512, 32
  %_1514 = sub i64 %6580, 32
  %gen1515 = mul i64 %_1514, 32
  %_1516 = sub i64 0, %6580
  %gen1517 = add i64 %_1516, 32
  %_1518 = sub i64 %6580, 32
  %gen1519 = mul i64 %_1518, 32
  %_1520 = shl i64 %6580, 32
  %_1521 = sub i64 %6580, 32
  %gen1522 = mul i64 %_1521, 32
  %_1523 = sub i64 0, %6580
  %gen1524 = add i64 %_1523, 32
  %6581 = udiv i64 %6580, 32, !dbg !2337
  %6582 = getelementptr inbounds i32, i32* %6578, i64 %6581, !dbg !2335
  %6583 = load i32, i32* %6582, align 4, !dbg !2335
  %6584 = load i8, i8* %39, align 1, !dbg !2338
  %6585 = zext i8 %6584 to i64, !dbg !2338
  %_1525 = sub i64 0, %6585
  %gen1526 = add i64 %_1525, 32
  %_1527 = sub i64 %6585, 32
  %gen1528 = mul i64 %_1527, 32
  %_1529 = shl i64 %6585, 32
  %_1530 = sub i64 %6585, 32
  %gen1531 = mul i64 %_1530, 32
  %_1532 = shl i64 %6585, 32
  %6586 = urem i64 %6585, 32, !dbg !2339
  %6587 = trunc i64 %6586 to i32, !dbg !2340
  %_1533 = sub i32 0, %6583
  %gen1534 = add i32 %_1533, %6587
  %_1535 = sub i32 %6583, %6587
  %gen1536 = mul i32 %_1535, %6587
  %_1537 = sub i32 0, %6583
  %gen1538 = add i32 %_1537, %6587
  %_1539 = shl i32 %6583, %6587
  %6588 = lshr i32 %6583, %6587, !dbg !2340
  %_1540 = shl i32 %6588, 1
  %6589 = and i32 %6588, 1, !dbg !2341
  %6590 = icmp ne i32 %6589, 0, !dbg !2341
  br label %originalBB1511

originalBB1544alteredBB:                          ; preds = %originalBB1544, %4793
  %6591 = load i8, i8* %41, align 1, !dbg !2343
  %6592 = trunc i8 %6591 to i1, !dbg !2343
  br label %originalBB1544

originalBB1548alteredBB:                          ; preds = %originalBB1548, %4812
  br label %originalBB1548

originalBB1552alteredBB:                          ; preds = %originalBB1552, %4829
  br label %originalBB1552

originalBB1556alteredBB:                          ; preds = %originalBB1556, %4846
  br label %originalBB1556

originalBB1560alteredBB:                          ; preds = %originalBB1560, %4863
  %6593 = load i8, i8* %35, align 1, !dbg !2349
  %6594 = trunc i8 %6593 to i1, !dbg !2349
  br label %originalBB1560

originalBB1564alteredBB:                          ; preds = %originalBB1564, %4882
  br label %originalBB1564

originalBB1568alteredBB:                          ; preds = %originalBB1568, %4899
  store i8 1, i8* %42, align 1, !dbg !2352
  %6595 = load i32, i32* %23, align 4, !dbg !2353
  %6596 = icmp eq i32 %6595, 2, !dbg !2353
  br label %originalBB1568

originalBB1572alteredBB:                          ; preds = %originalBB1572, %4918
  %6597 = load i8, i8* %36, align 1, !dbg !2353
  %6598 = trunc i8 %6597 to i1, !dbg !2353
  br label %originalBB1572

originalBB1576alteredBB:                          ; preds = %originalBB1576, %4937
  br label %originalBB1576

originalBB1580alteredBB:                          ; preds = %originalBB1580, %4954
  %6599 = load i64, i64* %29, align 8, !dbg !2357
  %6600 = load i64, i64* %20, align 8, !dbg !2357
  %6601 = icmp ult i64 %6599, %6600, !dbg !2357
  br label %originalBB1580

originalBB1584alteredBB:                          ; preds = %originalBB1584, %4974
  %6602 = load i8*, i8** %19, align 8, !dbg !2357
  %6603 = load i64, i64* %29, align 8, !dbg !2357
  %6604 = getelementptr inbounds i8, i8* %6602, i64 %6603, !dbg !2357
  store i8 39, i8* %6604, align 1, !dbg !2357
  br label %originalBB1584

originalBB1588alteredBB:                          ; preds = %originalBB1588, %4994
  %6605 = load i64, i64* %29, align 8, !dbg !2360
  %_1589 = shl i64 %6605, 1
  %_1590 = sub i64 %6605, 1
  %gen1591 = mul i64 %_1590, 1
  %_1592 = sub i64 0, %6605
  %gen1593 = add i64 %_1592, 1
  %_1594 = sub i64 %6605, 1
  %gen1595 = mul i64 %_1594, 1
  %_1596 = shl i64 %6605, 1
  %_1597 = shl i64 %6605, 1
  %6606 = add i64 %6605, 1, !dbg !2360
  store i64 %6606, i64* %29, align 8, !dbg !2360
  br label %originalBB1588

originalBB1601alteredBB:                          ; preds = %originalBB1601, %5013
  br label %originalBB1601

originalBB1605alteredBB:                          ; preds = %originalBB1605, %5030
  %6607 = load i64, i64* %29, align 8, !dbg !2361
  %6608 = load i64, i64* %20, align 8, !dbg !2361
  %6609 = icmp ult i64 %6607, %6608, !dbg !2361
  br label %originalBB1605

originalBB1609alteredBB:                          ; preds = %originalBB1609, %5050
  %6610 = load i8*, i8** %19, align 8, !dbg !2361
  %6611 = load i64, i64* %29, align 8, !dbg !2361
  %6612 = getelementptr inbounds i8, i8* %6610, i64 %6611, !dbg !2361
  store i8 36, i8* %6612, align 1, !dbg !2361
  br label %originalBB1609

originalBB1613alteredBB:                          ; preds = %originalBB1613, %5078
  %6613 = load i8*, i8** %19, align 8, !dbg !2365
  %6614 = load i64, i64* %29, align 8, !dbg !2365
  %6615 = getelementptr inbounds i8, i8* %6613, i64 %6614, !dbg !2365
  store i8 39, i8* %6615, align 1, !dbg !2365
  br label %originalBB1613

originalBB1617alteredBB:                          ; preds = %originalBB1617, %5098
  %6616 = load i64, i64* %29, align 8, !dbg !2368
  %_1618 = shl i64 %6616, 1
  %_1619 = sub i64 %6616, 1
  %gen1620 = mul i64 %_1619, 1
  %_1621 = sub i64 0, %6616
  %gen1622 = add i64 %_1621, 1
  %_1623 = sub i64 0, %6616
  %gen1624 = add i64 %_1623, 1
  %_1625 = sub i64 0, %6616
  %gen1626 = add i64 %_1625, 1
  %_1627 = shl i64 %6616, 1
  %6617 = add i64 %6616, 1, !dbg !2368
  store i64 %6617, i64* %29, align 8, !dbg !2368
  br label %originalBB1617

originalBB1631alteredBB:                          ; preds = %originalBB1631, %5117
  store i8 1, i8* %36, align 1, !dbg !2355
  br label %originalBB1631

originalBB1635alteredBB:                          ; preds = %originalBB1635, %5134
  br label %originalBB1635

originalBB1639alteredBB:                          ; preds = %originalBB1639, %5155
  %6618 = load i8*, i8** %19, align 8, !dbg !2369
  %6619 = load i64, i64* %29, align 8, !dbg !2369
  %6620 = getelementptr inbounds i8, i8* %6618, i64 %6619, !dbg !2369
  store i8 92, i8* %6620, align 1, !dbg !2369
  br label %originalBB1639

originalBB1643alteredBB:                          ; preds = %originalBB1643, %5175
  %6621 = load i64, i64* %29, align 8, !dbg !2372
  %_1644 = sub i64 %6621, 1
  %gen1645 = mul i64 %_1644, 1
  %_1646 = sub i64 %6621, 1
  %gen1647 = mul i64 %_1646, 1
  %_1648 = sub i64 0, %6621
  %gen1649 = add i64 %_1648, 1
  %_1650 = shl i64 %6621, 1
  %_1651 = shl i64 %6621, 1
  %_1652 = shl i64 %6621, 1
  %6622 = add i64 %6621, 1, !dbg !2372
  store i64 %6622, i64* %29, align 8, !dbg !2372
  br label %originalBB1643

originalBB1656alteredBB:                          ; preds = %originalBB1656, %5194
  br label %originalBB1656

originalBB1660alteredBB:                          ; preds = %originalBB1660, %5212
  br label %originalBB1660

originalBB1664alteredBB:                          ; preds = %originalBB1664, %5229
  %6623 = load i8, i8* %36, align 1, !dbg !2376
  %6624 = trunc i8 %6623 to i1, !dbg !2376
  br label %originalBB1664

originalBB1668alteredBB:                          ; preds = %originalBB1668, %5248
  %6625 = load i8, i8* %42, align 1, !dbg !2376
  %6626 = trunc i8 %6625 to i1, !dbg !2376
  br label %originalBB1668

originalBB1672alteredBB:                          ; preds = %originalBB1672, %5268
  %6627 = load i64, i64* %29, align 8, !dbg !2382
  %6628 = load i64, i64* %20, align 8, !dbg !2382
  %6629 = icmp ult i64 %6627, %6628, !dbg !2382
  br label %originalBB1672

originalBB1676alteredBB:                          ; preds = %originalBB1676, %5288
  %6630 = load i8*, i8** %19, align 8, !dbg !2382
  %6631 = load i64, i64* %29, align 8, !dbg !2382
  %6632 = getelementptr inbounds i8, i8* %6630, i64 %6631, !dbg !2382
  store i8 39, i8* %6632, align 1, !dbg !2382
  br label %originalBB1676

originalBB1680alteredBB:                          ; preds = %originalBB1680, %5311
  br label %originalBB1680

originalBB1684alteredBB:                          ; preds = %originalBB1684, %5332
  %6633 = load i8*, i8** %19, align 8, !dbg !2386
  %6634 = load i64, i64* %29, align 8, !dbg !2386
  %6635 = getelementptr inbounds i8, i8* %6633, i64 %6634, !dbg !2386
  store i8 39, i8* %6635, align 1, !dbg !2386
  br label %originalBB1684

originalBB1688alteredBB:                          ; preds = %originalBB1688, %5352
  %6636 = load i64, i64* %29, align 8, !dbg !2389
  %_1689 = sub i64 0, %6636
  %gen1690 = add i64 %_1689, 1
  %_1691 = sub i64 0, %6636
  %gen1692 = add i64 %_1691, 1
  %_1693 = sub i64 0, %6636
  %gen1694 = add i64 %_1693, 1
  %_1695 = sub i64 0, %6636
  %gen1696 = add i64 %_1695, 1
  %_1697 = shl i64 %6636, 1
  %6637 = add i64 %6636, 1, !dbg !2389
  store i64 %6637, i64* %29, align 8, !dbg !2389
  br label %originalBB1688

originalBB1701alteredBB:                          ; preds = %originalBB1701, %5392
  br label %originalBB1701

originalBB1705alteredBB:                          ; preds = %originalBB1705, %5409
  %6638 = icmp ult i64 %5375, %5376, !dbg !2391
  br label %originalBB1705

originalBB1709alteredBB:                          ; preds = %originalBB1709, %5427
  %6639 = load i8, i8* %39, align 1, !dbg !2391
  %6640 = load i8*, i8** %19, align 8, !dbg !2391
  %6641 = load i64, i64* %29, align 8, !dbg !2391
  %6642 = getelementptr inbounds i8, i8* %6640, i64 %6641, !dbg !2391
  store i8 %6639, i8* %6642, align 1, !dbg !2391
  br label %originalBB1709

originalBB1713alteredBB:                          ; preds = %originalBB1713, %5451
  %6643 = load i8, i8* %43, align 1, !dbg !2395
  %6644 = trunc i8 %6643 to i1, !dbg !2395
  br label %originalBB1713

originalBB1717alteredBB:                          ; preds = %originalBB1717, %5470
  store i8 0, i8* %38, align 1, !dbg !2398
  br label %originalBB1717

originalBB1721alteredBB:                          ; preds = %originalBB1721, %5487
  br label %originalBB1721

originalBB1725alteredBB:                          ; preds = %originalBB1725, %5504
  %6645 = load i64, i64* %28, align 8, !dbg !2401
  %_1726 = sub i64 0, %6645
  %gen1727 = add i64 %_1726, 1
  %_1728 = sub i64 %6645, 1
  %gen1729 = mul i64 %_1728, 1
  %6646 = add i64 %6645, 1, !dbg !2401
  store i64 %6646, i64* %28, align 8, !dbg !2401
  br label %originalBB1725

originalBB1733alteredBB:                          ; preds = %originalBB1733, %5523
  %6647 = load i64, i64* %29, align 8, !dbg !2405
  %6648 = icmp eq i64 %6647, 0, !dbg !2407
  br label %originalBB1733

originalBB1737alteredBB:                          ; preds = %originalBB1737, %5542
  %6649 = load i32, i32* %23, align 4, !dbg !2409
  %6650 = icmp eq i32 %6649, 2, !dbg !2410
  br label %originalBB1737

originalBB1741alteredBB:                          ; preds = %originalBB1741, %5561
  %6651 = load i8, i8* %35, align 1, !dbg !2412
  %6652 = trunc i8 %6651 to i1, !dbg !2412
  br label %originalBB1741

originalBB1745alteredBB:                          ; preds = %originalBB1745, %5580
  br label %originalBB1745

originalBB1749alteredBB:                          ; preds = %originalBB1749, %5600
  %6653 = load i8, i8* %35, align 1, !dbg !2419
  %6654 = trunc i8 %6653 to i1, !dbg !2419
  br label %originalBB1749

originalBB1753alteredBB:                          ; preds = %originalBB1753, %5619
  %6655 = load i8, i8* %37, align 1, !dbg !2421
  %6656 = trunc i8 %6655 to i1, !dbg !2421
  br label %originalBB1753

originalBB1757alteredBB:                          ; preds = %originalBB1757, %5638
  %6657 = load i8, i8* %38, align 1, !dbg !2423
  %6658 = trunc i8 %6657 to i1, !dbg !2423
  br label %originalBB1757

originalBB1761alteredBB:                          ; preds = %originalBB1761, %5657
  %6659 = load i8*, i8** %19, align 8, !dbg !2427
  %6660 = load i64, i64* %30, align 8, !dbg !2428
  %6661 = load i8*, i8** %21, align 8, !dbg !2429
  %6662 = load i64, i64* %22, align 8, !dbg !2430
  %6663 = load i32, i32* %24, align 4, !dbg !2431
  %6664 = load i32*, i32** %25, align 8, !dbg !2432
  %6665 = load i8*, i8** %26, align 8, !dbg !2433
  %6666 = load i8*, i8** %27, align 8, !dbg !2434
  %6667 = call i64 @quotearg_buffer_restyled(i8* %6659, i64 %6660, i8* %6661, i64 %6662, i32 5, i32 %6663, i32* %6664, i8* %6665, i8* %6666), !dbg !2435
  store i64 %6667, i64* %18, align 8, !dbg !2436
  br label %originalBB1761

originalBB1765alteredBB:                          ; preds = %originalBB1765, %5686
  %6668 = load i64, i64* %30, align 8, !dbg !2440
  %6669 = icmp ne i64 %6668, 0, !dbg !2440
  br label %originalBB1765

originalBB1769alteredBB:                          ; preds = %originalBB1769, %5705
  %6670 = load i64, i64* %30, align 8, !dbg !2442
  store i64 %6670, i64* %20, align 8, !dbg !2444
  store i64 0, i64* %29, align 8, !dbg !2445
  br label %originalBB1769

originalBB1773alteredBB:                          ; preds = %originalBB1773, %5723
  br label %originalBB1773

originalBB1777alteredBB:                          ; preds = %originalBB1777, %5740
  br label %originalBB1777

originalBB1781alteredBB:                          ; preds = %originalBB1781, %5757
  %6671 = load i8*, i8** %31, align 8, !dbg !2448
  %6672 = icmp ne i8* %6671, null, !dbg !2448
  br label %originalBB1781

originalBB1785alteredBB:                          ; preds = %originalBB1785, %5776
  %6673 = load i8, i8* %35, align 1, !dbg !2451
  %6674 = trunc i8 %6673 to i1, !dbg !2451
  br label %originalBB1785

originalBB1789alteredBB:                          ; preds = %originalBB1789, %5795
  br label %originalBB1789

originalBB1793alteredBB:                          ; preds = %originalBB1793, %5812
  %6675 = load i8*, i8** %31, align 8, !dbg !2454
  %6676 = load i8, i8* %6675, align 1, !dbg !2457
  %6677 = icmp ne i8 %6676, 0, !dbg !2458
  br label %originalBB1793

originalBB1797alteredBB:                          ; preds = %originalBB1797, %5832
  br label %originalBB1797

originalBB1801alteredBB:                          ; preds = %originalBB1801, %5849
  %6678 = load i64, i64* %29, align 8, !dbg !2460
  %6679 = load i64, i64* %20, align 8, !dbg !2460
  %6680 = icmp ult i64 %6678, %6679, !dbg !2460
  br label %originalBB1801

originalBB1805alteredBB:                          ; preds = %originalBB1805, %5869
  %6681 = load i8*, i8** %31, align 8, !dbg !2460
  %6682 = load i8, i8* %6681, align 1, !dbg !2460
  %6683 = load i8*, i8** %19, align 8, !dbg !2460
  %6684 = load i64, i64* %29, align 8, !dbg !2460
  %6685 = getelementptr inbounds i8, i8* %6683, i64 %6684, !dbg !2460
  store i8 %6682, i8* %6685, align 1, !dbg !2460
  br label %originalBB1805

originalBB1809alteredBB:                          ; preds = %originalBB1809, %5891
  %6686 = load i64, i64* %29, align 8, !dbg !2463
  %_1810 = sub i64 %6686, 1
  %gen1811 = mul i64 %_1810, 1
  %_1812 = sub i64 0, %6686
  %gen1813 = add i64 %_1812, 1
  %_1814 = sub i64 %6686, 1
  %gen1815 = mul i64 %_1814, 1
  %_1816 = shl i64 %6686, 1
  %_1817 = shl i64 %6686, 1
  %6687 = add i64 %6686, 1, !dbg !2463
  store i64 %6687, i64* %29, align 8, !dbg !2463
  br label %originalBB1809

originalBB1821alteredBB:                          ; preds = %originalBB1821, %5910
  br label %originalBB1821

originalBB1825alteredBB:                          ; preds = %originalBB1825, %5927
  %6688 = load i8*, i8** %31, align 8, !dbg !2464
  %6689 = getelementptr inbounds i8, i8* %6688, i32 1, !dbg !2464
  store i8* %6689, i8** %31, align 8, !dbg !2464
  br label %originalBB1825

originalBB1829alteredBB:                          ; preds = %originalBB1829, %5946
  br label %originalBB1829

originalBB1833alteredBB:                          ; preds = %originalBB1833, %5963
  %6690 = load i64, i64* %29, align 8, !dbg !2468
  %6691 = load i64, i64* %20, align 8, !dbg !2470
  %6692 = icmp ult i64 %6690, %6691, !dbg !2471
  br label %originalBB1833

originalBB1837alteredBB:                          ; preds = %originalBB1837, %5983
  %6693 = load i8*, i8** %19, align 8, !dbg !2473
  %6694 = load i64, i64* %29, align 8, !dbg !2474
  %6695 = getelementptr inbounds i8, i8* %6693, i64 %6694, !dbg !2473
  store i8 0, i8* %6695, align 1, !dbg !2475
  br label %originalBB1837

originalBB1841alteredBB:                          ; preds = %originalBB1841, %6003
  %6696 = load i64, i64* %29, align 8, !dbg !2476
  store i64 %6696, i64* %18, align 8, !dbg !2477
  br label %originalBB1841

originalBB1845alteredBB:                          ; preds = %originalBB1845, %6024
  %6697 = load i8, i8* %33, align 1, !dbg !2484
  %6698 = trunc i8 %6697 to i1, !dbg !2484
  br label %originalBB1845

originalBB1849alteredBB:                          ; preds = %originalBB1849, %6044
  %6699 = load i8*, i8** %19, align 8, !dbg !2488
  %6700 = load i64, i64* %20, align 8, !dbg !2489
  %6701 = load i8*, i8** %21, align 8, !dbg !2490
  %6702 = load i64, i64* %22, align 8, !dbg !2491
  %6703 = load i32, i32* %23, align 4, !dbg !2492
  %6704 = load i32, i32* %24, align 4, !dbg !2493
  %_1850 = shl i32 %6704, -3
  %_1851 = sub i32 0, %6704
  %gen1852 = add i32 %_1851, -3
  %_1853 = shl i32 %6704, -3
  %_1854 = sub i32 %6704, -3
  %gen1855 = mul i32 %_1854, -3
  %6705 = and i32 %6704, -3, !dbg !2494
  %6706 = load i8*, i8** %26, align 8, !dbg !2495
  %6707 = load i8*, i8** %27, align 8, !dbg !2496
  %6708 = call i64 @quotearg_buffer_restyled(i8* %6699, i64 %6700, i8* %6701, i64 %6702, i32 %6703, i32 %6705, i32* null, i8* %6706, i8* %6707), !dbg !2497
  store i64 %6708, i64* %18, align 8, !dbg !2498
  br label %originalBB1849

originalBB1859alteredBB:                          ; preds = %originalBB1859, %6071
  %6709 = load i64, i64* %18, align 8, !dbg !2499
  br label %originalBB1859
}

; Function Attrs: nounwind
declare dso_local i64 @__ctype_get_mb_cur_max() #2

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @gettext_quote(i8*, i32) #4 !dbg !2587 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !2590, metadata !DIExpression()), !dbg !2591
  store i32 %1, i32* %5, align 4
  call void @llvm.dbg.declare(metadata i32* %5, metadata !2592, metadata !DIExpression()), !dbg !2593
  call void @llvm.dbg.declare(metadata i8** %6, metadata !2594, metadata !DIExpression()), !dbg !2595
  %8 = load i8*, i8** %4, align 8, !dbg !2596
  %9 = call i8* @gettext(i8* %8) #10, !dbg !2596
  store i8* %9, i8** %6, align 8, !dbg !2595
  call void @llvm.dbg.declare(metadata i8** %7, metadata !2597, metadata !DIExpression()), !dbg !2598
  %10 = load i8*, i8** %6, align 8, !dbg !2599
  %11 = load i8*, i8** %4, align 8, !dbg !2601
  %12 = icmp ne i8* %10, %11, !dbg !2602
  br i1 %12, label %13, label %31, !dbg !2603

13:                                               ; preds = %2
  %14 = load i32, i32* @x.37
  %15 = load i32, i32* @y.38
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %13, %originalBBalteredBB
  %22 = load i8*, i8** %6, align 8, !dbg !2604
  store i8* %22, i8** %3, align 8, !dbg !2605
  %23 = load i32, i32* @x.37
  %24 = load i32, i32* @y.38
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %141, !dbg !2605

31:                                               ; preds = %2
  %32 = load i32, i32* @x.37
  %33 = load i32, i32* @y.38
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  %40 = call i8* @locale_charset(), !dbg !2606
  store i8* %40, i8** %7, align 8, !dbg !2607
  %41 = load i8*, i8** %7, align 8, !dbg !2608
  %42 = call i32 @c_strcasecmp(i8* %41, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13.66, i64 0, i64 0)) #13, !dbg !2608
  %43 = icmp eq i32 %42, 0, !dbg !2608
  %44 = load i32, i32* @x.37
  %45 = load i32, i32* @y.38
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %43, label %52, label %76, !dbg !2610

52:                                               ; preds = %originalBBpart24
  %53 = load i32, i32* @x.37
  %54 = load i32, i32* @y.38
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %52, %originalBB6alteredBB
  %61 = load i8*, i8** %4, align 8, !dbg !2611
  %62 = getelementptr inbounds i8, i8* %61, i64 0, !dbg !2611
  %63 = load i8, i8* %62, align 1, !dbg !2611
  %64 = sext i8 %63 to i32, !dbg !2611
  %65 = icmp eq i32 %64, 96, !dbg !2612
  %66 = zext i1 %65 to i64, !dbg !2611
  %67 = select i1 %65, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.67, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.68, i64 0, i64 0), !dbg !2611
  store i8* %67, i8** %3, align 8, !dbg !2613
  %68 = load i32, i32* @x.37
  %69 = load i32, i32* @y.38
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %141, !dbg !2613

76:                                               ; preds = %originalBBpart24
  %77 = load i32, i32* @x.37
  %78 = load i32, i32* @y.38
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %76, %originalBB10alteredBB
  %85 = load i8*, i8** %7, align 8, !dbg !2614
  %86 = call i32 @c_strcasecmp(i8* %85, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16.69, i64 0, i64 0)) #13, !dbg !2614
  %87 = icmp eq i32 %86, 0, !dbg !2614
  %88 = load i32, i32* @x.37
  %89 = load i32, i32* @y.38
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %87, label %96, label %120, !dbg !2616

96:                                               ; preds = %originalBBpart212
  %97 = load i32, i32* @x.37
  %98 = load i32, i32* @y.38
  %99 = sub i32 %97, 1
  %100 = mul i32 %97, %99
  %101 = urem i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %102, %103
  br i1 %104, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %96, %originalBB14alteredBB
  %105 = load i8*, i8** %4, align 8, !dbg !2617
  %106 = getelementptr inbounds i8, i8* %105, i64 0, !dbg !2617
  %107 = load i8, i8* %106, align 1, !dbg !2617
  %108 = sext i8 %107 to i32, !dbg !2617
  %109 = icmp eq i32 %108, 96, !dbg !2618
  %110 = zext i1 %109 to i64, !dbg !2617
  %111 = select i1 %109, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17.70, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.71, i64 0, i64 0), !dbg !2617
  store i8* %111, i8** %3, align 8, !dbg !2619
  %112 = load i32, i32* @x.37
  %113 = load i32, i32* @y.38
  %114 = sub i32 %112, 1
  %115 = mul i32 %112, %114
  %116 = urem i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %113, 10
  %119 = or i1 %117, %118
  br i1 %119, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %141, !dbg !2619

120:                                              ; preds = %originalBBpart212
  %121 = load i32, i32* @x.37
  %122 = load i32, i32* @y.38
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %120, %originalBB18alteredBB
  %129 = load i32, i32* %5, align 4, !dbg !2620
  %130 = icmp eq i32 %129, 9, !dbg !2621
  %131 = zext i1 %130 to i64, !dbg !2620
  %132 = select i1 %130, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.63, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.65, i64 0, i64 0), !dbg !2620
  store i8* %132, i8** %3, align 8, !dbg !2622
  %133 = load i32, i32* @x.37
  %134 = load i32, i32* @y.38
  %135 = sub i32 %133, 1
  %136 = mul i32 %133, %135
  %137 = urem i32 %136, 2
  %138 = icmp eq i32 %137, 0
  %139 = icmp slt i32 %134, 10
  %140 = or i1 %138, %139
  br i1 %140, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %141, !dbg !2622

141:                                              ; preds = %originalBBpart220, %originalBBpart216, %originalBBpart28, %originalBBpart2
  %142 = load i32, i32* @x.37
  %143 = load i32, i32* @y.38
  %144 = sub i32 %142, 1
  %145 = mul i32 %142, %144
  %146 = urem i32 %145, 2
  %147 = icmp eq i32 %146, 0
  %148 = icmp slt i32 %143, 10
  %149 = or i1 %147, %148
  br i1 %149, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %141, %originalBB22alteredBB
  %150 = load i8*, i8** %3, align 8, !dbg !2623
  %151 = load i32, i32* @x.37
  %152 = load i32, i32* @y.38
  %153 = sub i32 %151, 1
  %154 = mul i32 %151, %153
  %155 = urem i32 %154, 2
  %156 = icmp eq i32 %155, 0
  %157 = icmp slt i32 %152, 10
  %158 = or i1 %156, %157
  br i1 %158, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  ret i8* %150, !dbg !2623

originalBBalteredBB:                              ; preds = %originalBB, %13
  %159 = load i8*, i8** %6, align 8, !dbg !2604
  store i8* %159, i8** %3, align 8, !dbg !2605
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  %160 = call i8* @locale_charset(), !dbg !2606
  store i8* %160, i8** %7, align 8, !dbg !2607
  %161 = load i8*, i8** %7, align 8, !dbg !2608
  %162 = call i32 @c_strcasecmp(i8* %161, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13.66, i64 0, i64 0)) #13, !dbg !2608
  %163 = icmp eq i32 %162, 0, !dbg !2608
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %52
  %164 = load i8*, i8** %4, align 8, !dbg !2611
  %165 = getelementptr inbounds i8, i8* %164, i64 0, !dbg !2611
  %166 = load i8, i8* %165, align 1, !dbg !2611
  %167 = sext i8 %166 to i32, !dbg !2611
  %168 = icmp eq i32 %167, 96, !dbg !2612
  %169 = zext i1 %168 to i64, !dbg !2611
  %170 = select i1 %168, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.67, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.68, i64 0, i64 0), !dbg !2611
  store i8* %170, i8** %3, align 8, !dbg !2613
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %76
  %171 = load i8*, i8** %7, align 8, !dbg !2614
  %172 = call i32 @c_strcasecmp(i8* %171, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16.69, i64 0, i64 0)) #13, !dbg !2614
  %173 = icmp eq i32 %172, 0, !dbg !2614
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %96
  %174 = load i8*, i8** %4, align 8, !dbg !2617
  %175 = getelementptr inbounds i8, i8* %174, i64 0, !dbg !2617
  %176 = load i8, i8* %175, align 1, !dbg !2617
  %177 = sext i8 %176 to i32, !dbg !2617
  %178 = icmp eq i32 %177, 96, !dbg !2618
  %179 = zext i1 %178 to i64, !dbg !2617
  %180 = select i1 %178, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17.70, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.71, i64 0, i64 0), !dbg !2617
  store i8* %180, i8** %3, align 8, !dbg !2619
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %120
  %181 = load i32, i32* %5, align 4, !dbg !2620
  %182 = icmp eq i32 %181, 9, !dbg !2621
  %183 = zext i1 %182 to i64, !dbg !2620
  %184 = select i1 %182, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.63, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.65, i64 0, i64 0), !dbg !2620
  store i8* %184, i8** %3, align 8, !dbg !2622
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %141
  %185 = load i8*, i8** %3, align 8, !dbg !2623
  br label %originalBB22
}

; Function Attrs: nounwind readonly
declare dso_local i32 @memcmp(i8*, i8*, i64) #7

; Function Attrs: nounwind readnone
declare dso_local i16** @__ctype_b_loc() #8

; Function Attrs: nounwind
declare dso_local i32 @iswprint(i32) #2

; Function Attrs: nounwind readonly
declare dso_local i32 @mbsinit(%struct.__mbstate_t*) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_style(i32, i8*) #4 !dbg !2624 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  store i32 %0, i32* %3, align 4
  call void @llvm.dbg.declare(metadata i32* %3, metadata !2627, metadata !DIExpression()), !dbg !2628
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !2629, metadata !DIExpression()), !dbg !2630
  %5 = load i32, i32* %3, align 4, !dbg !2631
  %6 = mul i32 %0, -5
  %7 = add i32 %6, -3
  %8 = mul i32 %5, -3
  %9 = add i32 %8, -4
  %10 = mul i32 %5, 3
  %11 = add i32 %10, 1
  %12 = mul i32 %7, %7
  %13 = mul i32 %12, %12
  %14 = mul i32 %9, %9
  %15 = mul i32 %14, %14
  %16 = mul i32 %11, %11
  %17 = mul i32 %16, %16
  %18 = add i32 %13, %15
  %19 = sub i32 %18, %17
  %20 = mul i32 %19, 4
  %21 = add i32 %20, -5
  %22 = icmp eq i32 %21, -5
  br i1 %22, label %24, label %23

23:                                               ; preds = %2
  ret i8* null

24:                                               ; preds = %2
  %25 = load i32, i32* @x.39
  %26 = load i32, i32* @y.40
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %24, %originalBBalteredBB
  %33 = load i8*, i8** %4, align 8, !dbg !2632
  %34 = call i8* @quotearg_n_style(i32 0, i32 %5, i8* %33), !dbg !2633
  %35 = load i32, i32* @x.39
  %36 = load i32, i32* @y.40
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %34, !dbg !2634

originalBBalteredBB:                              ; preds = %originalBB, %24
  %43 = load i8*, i8** %4, align 8, !dbg !2632
  %44 = call i8* @quotearg_n_style(i32 0, i32 %5, i8* %43), !dbg !2633
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_char_mem(i8*, i64, i8 signext) #4 !dbg !2635 {
  %4 = load i32, i32* @x.41
  %5 = load i32, i32* @y.42
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i8, align 1
  %15 = alloca %struct.quoting_options, align 8
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !2638, metadata !DIExpression()), !dbg !2639
  store i64 %1, i64* %13, align 8
  call void @llvm.dbg.declare(metadata i64* %13, metadata !2640, metadata !DIExpression()), !dbg !2641
  store i8 %2, i8* %14, align 1
  call void @llvm.dbg.declare(metadata i8* %14, metadata !2642, metadata !DIExpression()), !dbg !2643
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %15, metadata !2644, metadata !DIExpression()), !dbg !2645
  %16 = bitcast %struct.quoting_options* %15 to i8*, !dbg !2646
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i1 false), !dbg !2646
  %17 = load i8, i8* %14, align 1, !dbg !2647
  %18 = call i32 @set_char_quoting(%struct.quoting_options* %15, i8 signext %17, i32 1), !dbg !2648
  %19 = load i8*, i8** %12, align 8, !dbg !2649
  %20 = load i64, i64* %13, align 8, !dbg !2650
  %21 = call i8* @quotearg_n_options(i32 0, i8* %19, i64 %20, %struct.quoting_options* %15), !dbg !2651
  %22 = load i32, i32* @x.41
  %23 = load i32, i32* @y.42
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %21, !dbg !2652

originalBBalteredBB:                              ; preds = %originalBB, %3
  %30 = alloca i8*, align 8
  %31 = alloca i64, align 8
  %32 = alloca i8, align 1
  %33 = alloca %struct.quoting_options, align 8
  store i8* %0, i8** %30, align 8
  call void @llvm.dbg.declare(metadata i8** %30, metadata !2653, metadata !DIExpression()), !dbg !2639
  store i64 %1, i64* %31, align 8
  call void @llvm.dbg.declare(metadata i64* %31, metadata !2685, metadata !DIExpression()), !dbg !2641
  store i8 %2, i8* %32, align 1
  call void @llvm.dbg.declare(metadata i8* %32, metadata !2686, metadata !DIExpression()), !dbg !2643
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %33, metadata !2687, metadata !DIExpression()), !dbg !2645
  %34 = bitcast %struct.quoting_options* %33 to i8*, !dbg !2646
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %34, i8* align 8 bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i1 false), !dbg !2646
  %35 = load i8, i8* %32, align 1, !dbg !2647
  %36 = call i32 @set_char_quoting(%struct.quoting_options* %33, i8 signext %35, i32 1), !dbg !2648
  %37 = load i8*, i8** %30, align 8, !dbg !2649
  %38 = load i64, i64* %31, align 8, !dbg !2650
  %39 = call i8* @quotearg_n_options(i32 0, i8* %37, i64 %38, %struct.quoting_options* %33), !dbg !2651
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_char(i8*, i8 signext) #4 !dbg !2688 {
  %3 = load i32, i32* @x.43
  %4 = load i32, i32* @y.44
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i8, align 1
  store i8* %0, i8** %11, align 8
  call void @llvm.dbg.declare(metadata i8** %11, metadata !2691, metadata !DIExpression()), !dbg !2692
  store i8 %1, i8* %12, align 1
  call void @llvm.dbg.declare(metadata i8* %12, metadata !2693, metadata !DIExpression()), !dbg !2694
  %13 = load i8*, i8** %11, align 8, !dbg !2695
  %14 = load i8, i8* %12, align 1, !dbg !2696
  %15 = call i8* @quotearg_char_mem(i8* %13, i64 -1, i8 signext %14), !dbg !2697
  %16 = load i32, i32* @x.43
  %17 = load i32, i32* @y.44
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %15, !dbg !2698

originalBBalteredBB:                              ; preds = %originalBB, %2
  %24 = alloca i8*, align 8
  %25 = alloca i8, align 1
  store i8* %0, i8** %24, align 8
  call void @llvm.dbg.declare(metadata i8** %24, metadata !2699, metadata !DIExpression()), !dbg !2692
  store i8 %1, i8* %25, align 1
  call void @llvm.dbg.declare(metadata i8* %25, metadata !2731, metadata !DIExpression()), !dbg !2694
  %26 = load i8*, i8** %24, align 8, !dbg !2695
  %27 = load i8, i8* %25, align 1, !dbg !2696
  %28 = call i8* @quotearg_char_mem(i8* %26, i64 -1, i8 signext %27), !dbg !2697
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_colon(i8*) #4 !dbg !2732 {
  %2 = load i32, i32* @x.45
  %3 = load i32, i32* @y.46
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !2735, metadata !DIExpression()), !dbg !2736
  %11 = load i8*, i8** %10, align 8, !dbg !2737
  %12 = call i8* @quotearg_char(i8* %11, i8 signext 58), !dbg !2738
  %13 = load i32, i32* @x.45
  %14 = load i32, i32* @y.46
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %12, !dbg !2739

originalBBalteredBB:                              ; preds = %originalBB, %1
  %21 = alloca i8*, align 8
  store i8* %0, i8** %21, align 8
  call void @llvm.dbg.declare(metadata i8** %21, metadata !2740, metadata !DIExpression()), !dbg !2736
  %22 = load i8*, i8** %21, align 8, !dbg !2737
  %23 = call i8* @quotearg_char(i8* %22, i8 signext 58), !dbg !2738
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote_n_mem(i32, i8*, i64) #4 !dbg !2772 {
  %4 = load i32, i32* @x.47
  %5 = load i32, i32* @y.48
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  store i32 %0, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !2775, metadata !DIExpression()), !dbg !2776
  store i8* %1, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !2777, metadata !DIExpression()), !dbg !2778
  store i64 %2, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !2779, metadata !DIExpression()), !dbg !2780
  %15 = load i32, i32* %12, align 4, !dbg !2781
  %16 = load i8*, i8** %13, align 8, !dbg !2782
  %17 = load i64, i64* %14, align 8, !dbg !2783
  %18 = call i8* @quotearg_n_options(i32 %15, i8* %16, i64 %17, %struct.quoting_options* @quote_quoting_options), !dbg !2784
  %19 = load i32, i32* @x.47
  %20 = load i32, i32* @y.48
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %18, !dbg !2785

originalBBalteredBB:                              ; preds = %originalBB, %3
  %27 = alloca i32, align 4
  %28 = alloca i8*, align 8
  %29 = alloca i64, align 8
  store i32 %0, i32* %27, align 4
  call void @llvm.dbg.declare(metadata i32* %27, metadata !2786, metadata !DIExpression()), !dbg !2776
  store i8* %1, i8** %28, align 8
  call void @llvm.dbg.declare(metadata i8** %28, metadata !2818, metadata !DIExpression()), !dbg !2778
  store i64 %2, i64* %29, align 8
  call void @llvm.dbg.declare(metadata i64* %29, metadata !2819, metadata !DIExpression()), !dbg !2780
  %30 = load i32, i32* %27, align 4, !dbg !2781
  %31 = load i8*, i8** %28, align 8, !dbg !2782
  %32 = load i64, i64* %29, align 8, !dbg !2783
  %33 = call i8* @quotearg_n_options(i32 %30, i8* %31, i64 %32, %struct.quoting_options* @quote_quoting_options), !dbg !2784
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote_n(i32, i8*) #4 !dbg !2820 {
  %3 = load i32, i32* @x.49
  %4 = load i32, i32* @y.50
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !2823, metadata !DIExpression()), !dbg !2824
  store i8* %1, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !2825, metadata !DIExpression()), !dbg !2826
  %13 = load i32, i32* %11, align 4, !dbg !2827
  %14 = load i8*, i8** %12, align 8, !dbg !2828
  %15 = call i8* @quote_n_mem(i32 %13, i8* %14, i64 -1), !dbg !2829
  %16 = load i32, i32* @x.49
  %17 = load i32, i32* @y.50
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %15, !dbg !2830

originalBBalteredBB:                              ; preds = %originalBB, %2
  %24 = alloca i32, align 4
  %25 = alloca i8*, align 8
  store i32 %0, i32* %24, align 4
  call void @llvm.dbg.declare(metadata i32* %24, metadata !2831, metadata !DIExpression()), !dbg !2824
  store i8* %1, i8** %25, align 8
  call void @llvm.dbg.declare(metadata i8** %25, metadata !2863, metadata !DIExpression()), !dbg !2826
  %26 = load i32, i32* %24, align 4, !dbg !2827
  %27 = load i8*, i8** %25, align 8, !dbg !2828
  %28 = call i8* @quote_n_mem(i32 %26, i8* %27, i64 -1), !dbg !2829
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote(i8*) #4 !dbg !2864 {
  %2 = load i32, i32* @x.51
  %3 = load i32, i32* @y.52
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !2867, metadata !DIExpression()), !dbg !2868
  %11 = load i8*, i8** %10, align 8, !dbg !2869
  %12 = call i8* @quote_n(i32 0, i8* %11), !dbg !2870
  %13 = load i32, i32* @x.51
  %14 = load i32, i32* @y.52
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %12, !dbg !2871

originalBBalteredBB:                              ; preds = %originalBB, %1
  %21 = alloca i8*, align 8
  store i8* %0, i8** %21, align 8
  call void @llvm.dbg.declare(metadata i8** %21, metadata !2872, metadata !DIExpression()), !dbg !2868
  %22 = load i8*, i8** %21, align 8, !dbg !2869
  %23 = call i8* @quote_n(i32 0, i8* %22), !dbg !2870
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.dev_ino* @get_root_dev_ino(%struct.dev_ino*) #4 !dbg !2904 {
  %2 = alloca %struct.dev_ino*, align 8
  %3 = alloca %struct.dev_ino*, align 8
  %4 = alloca %struct.stat, align 8
  store %struct.dev_ino* %0, %struct.dev_ino** %3, align 8
  call void @llvm.dbg.declare(metadata %struct.dev_ino** %3, metadata !2913, metadata !DIExpression()), !dbg !2914
  call void @llvm.dbg.declare(metadata %struct.stat* %4, metadata !2915, metadata !DIExpression()), !dbg !2937
  %5 = call i32 @lstat(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.80, i64 0, i64 0), %struct.stat* %4) #10, !dbg !2938
  %6 = icmp ne i32 %5, 0, !dbg !2938
  br i1 %6, label %7, label %24, !dbg !2940

7:                                                ; preds = %1
  %8 = load i32, i32* @x.53
  %9 = load i32, i32* @y.54
  %10 = sub i32 %8, 1
  %11 = mul i32 %8, %10
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  %14 = icmp slt i32 %9, 10
  %15 = or i1 %13, %14
  br i1 %15, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %7, %originalBBalteredBB
  store %struct.dev_ino* null, %struct.dev_ino** %2, align 8, !dbg !2941
  %16 = load i32, i32* @x.53
  %17 = load i32, i32* @y.54
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %50, !dbg !2941

24:                                               ; preds = %1
  %25 = load i32, i32* @x.53
  %26 = load i32, i32* @y.54
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %24, %originalBB1alteredBB
  %33 = getelementptr inbounds %struct.stat, %struct.stat* %4, i32 0, i32 1, !dbg !2942
  %34 = load i64, i64* %33, align 8, !dbg !2942
  %35 = load %struct.dev_ino*, %struct.dev_ino** %3, align 8, !dbg !2943
  %36 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %35, i32 0, i32 0, !dbg !2944
  store i64 %34, i64* %36, align 8, !dbg !2945
  %37 = getelementptr inbounds %struct.stat, %struct.stat* %4, i32 0, i32 0, !dbg !2946
  %38 = load i64, i64* %37, align 8, !dbg !2946
  %39 = load %struct.dev_ino*, %struct.dev_ino** %3, align 8, !dbg !2947
  %40 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %39, i32 0, i32 1, !dbg !2948
  store i64 %38, i64* %40, align 8, !dbg !2949
  %41 = load %struct.dev_ino*, %struct.dev_ino** %3, align 8, !dbg !2950
  store %struct.dev_ino* %41, %struct.dev_ino** %2, align 8, !dbg !2951
  %42 = load i32, i32* @x.53
  %43 = load i32, i32* @y.54
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %50, !dbg !2951

50:                                               ; preds = %originalBBpart24, %originalBBpart2
  %51 = load i32, i32* @x.53
  %52 = load i32, i32* @y.54
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %50, %originalBB6alteredBB
  %59 = load %struct.dev_ino*, %struct.dev_ino** %2, align 8, !dbg !2952
  %60 = load i32, i32* @x.53
  %61 = load i32, i32* @y.54
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  ret %struct.dev_ino* %59, !dbg !2952

originalBBalteredBB:                              ; preds = %originalBB, %7
  store %struct.dev_ino* null, %struct.dev_ino** %2, align 8, !dbg !2941
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %24
  %68 = getelementptr inbounds %struct.stat, %struct.stat* %4, i32 0, i32 1, !dbg !2942
  %69 = load i64, i64* %68, align 8, !dbg !2942
  %70 = load %struct.dev_ino*, %struct.dev_ino** %3, align 8, !dbg !2943
  %71 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %70, i32 0, i32 0, !dbg !2944
  store i64 %69, i64* %71, align 8, !dbg !2945
  %72 = getelementptr inbounds %struct.stat, %struct.stat* %4, i32 0, i32 0, !dbg !2946
  %73 = load i64, i64* %72, align 8, !dbg !2946
  %74 = load %struct.dev_ino*, %struct.dev_ino** %3, align 8, !dbg !2947
  %75 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %74, i32 0, i32 1, !dbg !2948
  store i64 %73, i64* %75, align 8, !dbg !2949
  %76 = load %struct.dev_ino*, %struct.dev_ino** %3, align 8, !dbg !2950
  store %struct.dev_ino* %76, %struct.dev_ino** %2, align 8, !dbg !2951
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %50
  %77 = load %struct.dev_ino*, %struct.dev_ino** %2, align 8, !dbg !2952
  br label %originalBB6
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc_arn(%struct._IO_FILE*, i8*, i8*, i8*, i8**, i64) #4 !dbg !2953 {
  %7 = load i32, i32* @x.55
  %8 = load i32, i32* @y.56
  %9 = sub i32 %7, 1
  %10 = mul i32 %7, %9
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  %13 = icmp slt i32 %8, 10
  %14 = or i1 %12, %13
  br i1 %14, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %6, %originalBBalteredBB
  %15 = alloca %struct._IO_FILE*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca i8*, align 8
  %19 = alloca i8**, align 8
  %20 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %15, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %15, metadata !3010, metadata !DIExpression()), !dbg !3011
  store i8* %1, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !3012, metadata !DIExpression()), !dbg !3013
  store i8* %2, i8** %17, align 8
  call void @llvm.dbg.declare(metadata i8** %17, metadata !3014, metadata !DIExpression()), !dbg !3015
  store i8* %3, i8** %18, align 8
  call void @llvm.dbg.declare(metadata i8** %18, metadata !3016, metadata !DIExpression()), !dbg !3017
  store i8** %4, i8*** %19, align 8
  call void @llvm.dbg.declare(metadata i8*** %19, metadata !3018, metadata !DIExpression()), !dbg !3019
  store i64 %5, i64* %20, align 8
  call void @llvm.dbg.declare(metadata i64* %20, metadata !3020, metadata !DIExpression()), !dbg !3021
  %21 = load i8*, i8** %16, align 8, !dbg !3022
  %22 = icmp ne i8* %21, null, !dbg !3022
  %23 = load i32, i32* @x.55
  %24 = load i32, i32* @y.56
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %31, label %53, !dbg !3024

31:                                               ; preds = %originalBBpart2
  %32 = load i32, i32* @x.55
  %33 = load i32, i32* @y.56
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3025
  %41 = load i8*, i8** %16, align 8, !dbg !3026
  %42 = load i8*, i8** %17, align 8, !dbg !3027
  %43 = load i8*, i8** %18, align 8, !dbg !3028
  %44 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %40, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.81, i64 0, i64 0), i8* %41, i8* %42, i8* %43), !dbg !3029
  %45 = load i32, i32* @x.55
  %46 = load i32, i32* @y.56
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %74, !dbg !3029

53:                                               ; preds = %originalBBpart2
  %54 = load i32, i32* @x.55
  %55 = load i32, i32* @y.56
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %53, %originalBB6alteredBB
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3030
  %63 = load i8*, i8** %17, align 8, !dbg !3031
  %64 = load i8*, i8** %18, align 8, !dbg !3032
  %65 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %62, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.82, i64 0, i64 0), i8* %63, i8* %64), !dbg !3033
  %66 = load i32, i32* @x.55
  %67 = load i32, i32* @y.56
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %74

74:                                               ; preds = %originalBBpart28, %originalBBpart24
  %75 = load i32, i32* @x.55
  %76 = load i32, i32* @y.56
  %77 = sub i32 %75, 1
  %78 = mul i32 %75, %77
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %80, %81
  br i1 %82, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %74, %originalBB10alteredBB
  %83 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3034
  %84 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.83, i64 0, i64 0)) #10, !dbg !3035
  %85 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %83, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @version_etc_copyright, i64 0, i64 0), i8* %84, i32 2020), !dbg !3036
  %86 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3037
  %87 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.84, i64 0, i64 0), %struct._IO_FILE* %86), !dbg !3037
  %88 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3038
  %89 = call i8* @gettext(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.4.85, i64 0, i64 0)) #10, !dbg !3039
  %90 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %88, i8* %89, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5.86, i64 0, i64 0)), !dbg !3040
  %91 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3041
  %92 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.84, i64 0, i64 0), %struct._IO_FILE* %91), !dbg !3041
  %93 = load i64, i64* %20, align 8, !dbg !3042
  %94 = load i32, i32* @x.55
  %95 = load i32, i32* @y.56
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  switch i64 %93, label %402 [
    i64 0, label %102
    i64 1, label %119
    i64 2, label %142
    i64 3, label %168
    i64 4, label %181
    i64 5, label %213
    i64 6, label %248
    i64 7, label %286
    i64 8, label %327
    i64 9, label %371
  ], !dbg !3043

102:                                              ; preds = %originalBBpart212
  %103 = load i32, i32* @x.55
  %104 = load i32, i32* @y.56
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %102, %originalBB14alteredBB
  %111 = load i32, i32* @x.55
  %112 = load i32, i32* @y.56
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %433, !dbg !3044

119:                                              ; preds = %originalBBpart212
  %120 = load i32, i32* @x.55
  %121 = load i32, i32* @y.56
  %122 = sub i32 %120, 1
  %123 = mul i32 %120, %122
  %124 = urem i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %125, %126
  br i1 %127, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %119, %originalBB18alteredBB
  %128 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3046
  %129 = call i8* @gettext(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.87, i64 0, i64 0)) #10, !dbg !3047
  %130 = load i8**, i8*** %19, align 8, !dbg !3048
  %131 = getelementptr inbounds i8*, i8** %130, i64 0, !dbg !3048
  %132 = load i8*, i8** %131, align 8, !dbg !3048
  %133 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %128, i8* %129, i8* %132), !dbg !3049
  %134 = load i32, i32* @x.55
  %135 = load i32, i32* @y.56
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %433, !dbg !3050

142:                                              ; preds = %originalBBpart212
  %143 = load i32, i32* @x.55
  %144 = load i32, i32* @y.56
  %145 = sub i32 %143, 1
  %146 = mul i32 %143, %145
  %147 = urem i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %148, %149
  br i1 %150, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %142, %originalBB22alteredBB
  %151 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3051
  %152 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7.88, i64 0, i64 0)) #10, !dbg !3052
  %153 = load i8**, i8*** %19, align 8, !dbg !3053
  %154 = getelementptr inbounds i8*, i8** %153, i64 0, !dbg !3053
  %155 = load i8*, i8** %154, align 8, !dbg !3053
  %156 = load i8**, i8*** %19, align 8, !dbg !3054
  %157 = getelementptr inbounds i8*, i8** %156, i64 1, !dbg !3054
  %158 = load i8*, i8** %157, align 8, !dbg !3054
  %159 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %151, i8* %152, i8* %155, i8* %158), !dbg !3055
  %160 = load i32, i32* @x.55
  %161 = load i32, i32* @y.56
  %162 = sub i32 %160, 1
  %163 = mul i32 %160, %162
  %164 = urem i32 %163, 2
  %165 = icmp eq i32 %164, 0
  %166 = icmp slt i32 %161, 10
  %167 = or i1 %165, %166
  br i1 %167, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %433, !dbg !3056

168:                                              ; preds = %originalBBpart212
  %169 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3057
  %170 = call i8* @gettext(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8.89, i64 0, i64 0)) #10, !dbg !3058
  %171 = load i8**, i8*** %19, align 8, !dbg !3059
  %172 = getelementptr inbounds i8*, i8** %171, i64 0, !dbg !3059
  %173 = load i8*, i8** %172, align 8, !dbg !3059
  %174 = load i8**, i8*** %19, align 8, !dbg !3060
  %175 = getelementptr inbounds i8*, i8** %174, i64 1, !dbg !3060
  %176 = load i8*, i8** %175, align 8, !dbg !3060
  %177 = load i8**, i8*** %19, align 8, !dbg !3061
  %178 = getelementptr inbounds i8*, i8** %177, i64 2, !dbg !3061
  %179 = load i8*, i8** %178, align 8, !dbg !3061
  %180 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %169, i8* %170, i8* %173, i8* %176, i8* %179), !dbg !3062
  br label %433, !dbg !3063

181:                                              ; preds = %originalBBpart212
  %182 = load i32, i32* @x.55
  %183 = load i32, i32* @y.56
  %184 = sub i32 %182, 1
  %185 = mul i32 %182, %184
  %186 = urem i32 %185, 2
  %187 = icmp eq i32 %186, 0
  %188 = icmp slt i32 %183, 10
  %189 = or i1 %187, %188
  br i1 %189, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %181, %originalBB26alteredBB
  %190 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3064
  %191 = call i8* @gettext(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.9.90, i64 0, i64 0)) #10, !dbg !3065
  %192 = load i8**, i8*** %19, align 8, !dbg !3066
  %193 = getelementptr inbounds i8*, i8** %192, i64 0, !dbg !3066
  %194 = load i8*, i8** %193, align 8, !dbg !3066
  %195 = load i8**, i8*** %19, align 8, !dbg !3067
  %196 = getelementptr inbounds i8*, i8** %195, i64 1, !dbg !3067
  %197 = load i8*, i8** %196, align 8, !dbg !3067
  %198 = load i8**, i8*** %19, align 8, !dbg !3068
  %199 = getelementptr inbounds i8*, i8** %198, i64 2, !dbg !3068
  %200 = load i8*, i8** %199, align 8, !dbg !3068
  %201 = load i8**, i8*** %19, align 8, !dbg !3069
  %202 = getelementptr inbounds i8*, i8** %201, i64 3, !dbg !3069
  %203 = load i8*, i8** %202, align 8, !dbg !3069
  %204 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %190, i8* %191, i8* %194, i8* %197, i8* %200, i8* %203), !dbg !3070
  %205 = load i32, i32* @x.55
  %206 = load i32, i32* @y.56
  %207 = sub i32 %205, 1
  %208 = mul i32 %205, %207
  %209 = urem i32 %208, 2
  %210 = icmp eq i32 %209, 0
  %211 = icmp slt i32 %206, 10
  %212 = or i1 %210, %211
  br i1 %212, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %433, !dbg !3071

213:                                              ; preds = %originalBBpart212
  %214 = load i32, i32* @x.55
  %215 = load i32, i32* @y.56
  %216 = sub i32 %214, 1
  %217 = mul i32 %214, %216
  %218 = urem i32 %217, 2
  %219 = icmp eq i32 %218, 0
  %220 = icmp slt i32 %215, 10
  %221 = or i1 %219, %220
  br i1 %221, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %213, %originalBB30alteredBB
  %222 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3072
  %223 = call i8* @gettext(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.10.91, i64 0, i64 0)) #10, !dbg !3073
  %224 = load i8**, i8*** %19, align 8, !dbg !3074
  %225 = getelementptr inbounds i8*, i8** %224, i64 0, !dbg !3074
  %226 = load i8*, i8** %225, align 8, !dbg !3074
  %227 = load i8**, i8*** %19, align 8, !dbg !3075
  %228 = getelementptr inbounds i8*, i8** %227, i64 1, !dbg !3075
  %229 = load i8*, i8** %228, align 8, !dbg !3075
  %230 = load i8**, i8*** %19, align 8, !dbg !3076
  %231 = getelementptr inbounds i8*, i8** %230, i64 2, !dbg !3076
  %232 = load i8*, i8** %231, align 8, !dbg !3076
  %233 = load i8**, i8*** %19, align 8, !dbg !3077
  %234 = getelementptr inbounds i8*, i8** %233, i64 3, !dbg !3077
  %235 = load i8*, i8** %234, align 8, !dbg !3077
  %236 = load i8**, i8*** %19, align 8, !dbg !3078
  %237 = getelementptr inbounds i8*, i8** %236, i64 4, !dbg !3078
  %238 = load i8*, i8** %237, align 8, !dbg !3078
  %239 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %222, i8* %223, i8* %226, i8* %229, i8* %232, i8* %235, i8* %238), !dbg !3079
  %240 = load i32, i32* @x.55
  %241 = load i32, i32* @y.56
  %242 = sub i32 %240, 1
  %243 = mul i32 %240, %242
  %244 = urem i32 %243, 2
  %245 = icmp eq i32 %244, 0
  %246 = icmp slt i32 %241, 10
  %247 = or i1 %245, %246
  br i1 %247, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %433, !dbg !3080

248:                                              ; preds = %originalBBpart212
  %249 = load i32, i32* @x.55
  %250 = load i32, i32* @y.56
  %251 = sub i32 %249, 1
  %252 = mul i32 %249, %251
  %253 = urem i32 %252, 2
  %254 = icmp eq i32 %253, 0
  %255 = icmp slt i32 %250, 10
  %256 = or i1 %254, %255
  br i1 %256, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %248, %originalBB34alteredBB
  %257 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3081
  %258 = call i8* @gettext(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11.92, i64 0, i64 0)) #10, !dbg !3082
  %259 = load i8**, i8*** %19, align 8, !dbg !3083
  %260 = getelementptr inbounds i8*, i8** %259, i64 0, !dbg !3083
  %261 = load i8*, i8** %260, align 8, !dbg !3083
  %262 = load i8**, i8*** %19, align 8, !dbg !3084
  %263 = getelementptr inbounds i8*, i8** %262, i64 1, !dbg !3084
  %264 = load i8*, i8** %263, align 8, !dbg !3084
  %265 = load i8**, i8*** %19, align 8, !dbg !3085
  %266 = getelementptr inbounds i8*, i8** %265, i64 2, !dbg !3085
  %267 = load i8*, i8** %266, align 8, !dbg !3085
  %268 = load i8**, i8*** %19, align 8, !dbg !3086
  %269 = getelementptr inbounds i8*, i8** %268, i64 3, !dbg !3086
  %270 = load i8*, i8** %269, align 8, !dbg !3086
  %271 = load i8**, i8*** %19, align 8, !dbg !3087
  %272 = getelementptr inbounds i8*, i8** %271, i64 4, !dbg !3087
  %273 = load i8*, i8** %272, align 8, !dbg !3087
  %274 = load i8**, i8*** %19, align 8, !dbg !3088
  %275 = getelementptr inbounds i8*, i8** %274, i64 5, !dbg !3088
  %276 = load i8*, i8** %275, align 8, !dbg !3088
  %277 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %257, i8* %258, i8* %261, i8* %264, i8* %267, i8* %270, i8* %273, i8* %276), !dbg !3089
  %278 = load i32, i32* @x.55
  %279 = load i32, i32* @y.56
  %280 = sub i32 %278, 1
  %281 = mul i32 %278, %280
  %282 = urem i32 %281, 2
  %283 = icmp eq i32 %282, 0
  %284 = icmp slt i32 %279, 10
  %285 = or i1 %283, %284
  br i1 %285, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %433, !dbg !3090

286:                                              ; preds = %originalBBpart212
  %287 = load i32, i32* @x.55
  %288 = load i32, i32* @y.56
  %289 = sub i32 %287, 1
  %290 = mul i32 %287, %289
  %291 = urem i32 %290, 2
  %292 = icmp eq i32 %291, 0
  %293 = icmp slt i32 %288, 10
  %294 = or i1 %292, %293
  br i1 %294, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %286, %originalBB38alteredBB
  %295 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3091
  %296 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.12.93, i64 0, i64 0)) #10, !dbg !3092
  %297 = load i8**, i8*** %19, align 8, !dbg !3093
  %298 = getelementptr inbounds i8*, i8** %297, i64 0, !dbg !3093
  %299 = load i8*, i8** %298, align 8, !dbg !3093
  %300 = load i8**, i8*** %19, align 8, !dbg !3094
  %301 = getelementptr inbounds i8*, i8** %300, i64 1, !dbg !3094
  %302 = load i8*, i8** %301, align 8, !dbg !3094
  %303 = load i8**, i8*** %19, align 8, !dbg !3095
  %304 = getelementptr inbounds i8*, i8** %303, i64 2, !dbg !3095
  %305 = load i8*, i8** %304, align 8, !dbg !3095
  %306 = load i8**, i8*** %19, align 8, !dbg !3096
  %307 = getelementptr inbounds i8*, i8** %306, i64 3, !dbg !3096
  %308 = load i8*, i8** %307, align 8, !dbg !3096
  %309 = load i8**, i8*** %19, align 8, !dbg !3097
  %310 = getelementptr inbounds i8*, i8** %309, i64 4, !dbg !3097
  %311 = load i8*, i8** %310, align 8, !dbg !3097
  %312 = load i8**, i8*** %19, align 8, !dbg !3098
  %313 = getelementptr inbounds i8*, i8** %312, i64 5, !dbg !3098
  %314 = load i8*, i8** %313, align 8, !dbg !3098
  %315 = load i8**, i8*** %19, align 8, !dbg !3099
  %316 = getelementptr inbounds i8*, i8** %315, i64 6, !dbg !3099
  %317 = load i8*, i8** %316, align 8, !dbg !3099
  %318 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %295, i8* %296, i8* %299, i8* %302, i8* %305, i8* %308, i8* %311, i8* %314, i8* %317), !dbg !3100
  %319 = load i32, i32* @x.55
  %320 = load i32, i32* @y.56
  %321 = sub i32 %319, 1
  %322 = mul i32 %319, %321
  %323 = urem i32 %322, 2
  %324 = icmp eq i32 %323, 0
  %325 = icmp slt i32 %320, 10
  %326 = or i1 %324, %325
  br i1 %326, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br label %433, !dbg !3101

327:                                              ; preds = %originalBBpart212
  %328 = load i32, i32* @x.55
  %329 = load i32, i32* @y.56
  %330 = sub i32 %328, 1
  %331 = mul i32 %328, %330
  %332 = urem i32 %331, 2
  %333 = icmp eq i32 %332, 0
  %334 = icmp slt i32 %329, 10
  %335 = or i1 %333, %334
  br i1 %335, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %327, %originalBB42alteredBB
  %336 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3102
  %337 = call i8* @gettext(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.13.94, i64 0, i64 0)) #10, !dbg !3103
  %338 = load i8**, i8*** %19, align 8, !dbg !3104
  %339 = getelementptr inbounds i8*, i8** %338, i64 0, !dbg !3104
  %340 = load i8*, i8** %339, align 8, !dbg !3104
  %341 = load i8**, i8*** %19, align 8, !dbg !3105
  %342 = getelementptr inbounds i8*, i8** %341, i64 1, !dbg !3105
  %343 = load i8*, i8** %342, align 8, !dbg !3105
  %344 = load i8**, i8*** %19, align 8, !dbg !3106
  %345 = getelementptr inbounds i8*, i8** %344, i64 2, !dbg !3106
  %346 = load i8*, i8** %345, align 8, !dbg !3106
  %347 = load i8**, i8*** %19, align 8, !dbg !3107
  %348 = getelementptr inbounds i8*, i8** %347, i64 3, !dbg !3107
  %349 = load i8*, i8** %348, align 8, !dbg !3107
  %350 = load i8**, i8*** %19, align 8, !dbg !3108
  %351 = getelementptr inbounds i8*, i8** %350, i64 4, !dbg !3108
  %352 = load i8*, i8** %351, align 8, !dbg !3108
  %353 = load i8**, i8*** %19, align 8, !dbg !3109
  %354 = getelementptr inbounds i8*, i8** %353, i64 5, !dbg !3109
  %355 = load i8*, i8** %354, align 8, !dbg !3109
  %356 = load i8**, i8*** %19, align 8, !dbg !3110
  %357 = getelementptr inbounds i8*, i8** %356, i64 6, !dbg !3110
  %358 = load i8*, i8** %357, align 8, !dbg !3110
  %359 = load i8**, i8*** %19, align 8, !dbg !3111
  %360 = getelementptr inbounds i8*, i8** %359, i64 7, !dbg !3111
  %361 = load i8*, i8** %360, align 8, !dbg !3111
  %362 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %336, i8* %337, i8* %340, i8* %343, i8* %346, i8* %349, i8* %352, i8* %355, i8* %358, i8* %361), !dbg !3112
  %363 = load i32, i32* @x.55
  %364 = load i32, i32* @y.56
  %365 = sub i32 %363, 1
  %366 = mul i32 %363, %365
  %367 = urem i32 %366, 2
  %368 = icmp eq i32 %367, 0
  %369 = icmp slt i32 %364, 10
  %370 = or i1 %368, %369
  br i1 %370, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br label %433, !dbg !3113

371:                                              ; preds = %originalBBpart212
  %372 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3114
  %373 = call i8* @gettext(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.14.95, i64 0, i64 0)) #10, !dbg !3115
  %374 = load i8**, i8*** %19, align 8, !dbg !3116
  %375 = getelementptr inbounds i8*, i8** %374, i64 0, !dbg !3116
  %376 = load i8*, i8** %375, align 8, !dbg !3116
  %377 = load i8**, i8*** %19, align 8, !dbg !3117
  %378 = getelementptr inbounds i8*, i8** %377, i64 1, !dbg !3117
  %379 = load i8*, i8** %378, align 8, !dbg !3117
  %380 = load i8**, i8*** %19, align 8, !dbg !3118
  %381 = getelementptr inbounds i8*, i8** %380, i64 2, !dbg !3118
  %382 = load i8*, i8** %381, align 8, !dbg !3118
  %383 = load i8**, i8*** %19, align 8, !dbg !3119
  %384 = getelementptr inbounds i8*, i8** %383, i64 3, !dbg !3119
  %385 = load i8*, i8** %384, align 8, !dbg !3119
  %386 = load i8**, i8*** %19, align 8, !dbg !3120
  %387 = getelementptr inbounds i8*, i8** %386, i64 4, !dbg !3120
  %388 = load i8*, i8** %387, align 8, !dbg !3120
  %389 = load i8**, i8*** %19, align 8, !dbg !3121
  %390 = getelementptr inbounds i8*, i8** %389, i64 5, !dbg !3121
  %391 = load i8*, i8** %390, align 8, !dbg !3121
  %392 = load i8**, i8*** %19, align 8, !dbg !3122
  %393 = getelementptr inbounds i8*, i8** %392, i64 6, !dbg !3122
  %394 = load i8*, i8** %393, align 8, !dbg !3122
  %395 = load i8**, i8*** %19, align 8, !dbg !3123
  %396 = getelementptr inbounds i8*, i8** %395, i64 7, !dbg !3123
  %397 = load i8*, i8** %396, align 8, !dbg !3123
  %398 = load i8**, i8*** %19, align 8, !dbg !3124
  %399 = getelementptr inbounds i8*, i8** %398, i64 8, !dbg !3124
  %400 = load i8*, i8** %399, align 8, !dbg !3124
  %401 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %372, i8* %373, i8* %376, i8* %379, i8* %382, i8* %385, i8* %388, i8* %391, i8* %394, i8* %397, i8* %400), !dbg !3125
  br label %433, !dbg !3126

402:                                              ; preds = %originalBBpart212
  %403 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3127
  %404 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.15.96, i64 0, i64 0)) #10, !dbg !3128
  %405 = load i8**, i8*** %19, align 8, !dbg !3129
  %406 = getelementptr inbounds i8*, i8** %405, i64 0, !dbg !3129
  %407 = load i8*, i8** %406, align 8, !dbg !3129
  %408 = load i8**, i8*** %19, align 8, !dbg !3130
  %409 = getelementptr inbounds i8*, i8** %408, i64 1, !dbg !3130
  %410 = load i8*, i8** %409, align 8, !dbg !3130
  %411 = load i8**, i8*** %19, align 8, !dbg !3131
  %412 = getelementptr inbounds i8*, i8** %411, i64 2, !dbg !3131
  %413 = load i8*, i8** %412, align 8, !dbg !3131
  %414 = load i8**, i8*** %19, align 8, !dbg !3132
  %415 = getelementptr inbounds i8*, i8** %414, i64 3, !dbg !3132
  %416 = load i8*, i8** %415, align 8, !dbg !3132
  %417 = load i8**, i8*** %19, align 8, !dbg !3133
  %418 = getelementptr inbounds i8*, i8** %417, i64 4, !dbg !3133
  %419 = load i8*, i8** %418, align 8, !dbg !3133
  %420 = load i8**, i8*** %19, align 8, !dbg !3134
  %421 = getelementptr inbounds i8*, i8** %420, i64 5, !dbg !3134
  %422 = load i8*, i8** %421, align 8, !dbg !3134
  %423 = load i8**, i8*** %19, align 8, !dbg !3135
  %424 = getelementptr inbounds i8*, i8** %423, i64 6, !dbg !3135
  %425 = load i8*, i8** %424, align 8, !dbg !3135
  %426 = load i8**, i8*** %19, align 8, !dbg !3136
  %427 = getelementptr inbounds i8*, i8** %426, i64 7, !dbg !3136
  %428 = load i8*, i8** %427, align 8, !dbg !3136
  %429 = load i8**, i8*** %19, align 8, !dbg !3137
  %430 = getelementptr inbounds i8*, i8** %429, i64 8, !dbg !3137
  %431 = load i8*, i8** %430, align 8, !dbg !3137
  %432 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %403, i8* %404, i8* %407, i8* %410, i8* %413, i8* %416, i8* %419, i8* %422, i8* %425, i8* %428, i8* %431), !dbg !3138
  br label %433, !dbg !3139

433:                                              ; preds = %402, %371, %originalBBpart244, %originalBBpart240, %originalBBpart236, %originalBBpart232, %originalBBpart228, %168, %originalBBpart224, %originalBBpart220, %originalBBpart216
  ret void, !dbg !3140

originalBBalteredBB:                              ; preds = %originalBB, %6
  %434 = alloca %struct._IO_FILE*, align 8
  %435 = alloca i8*, align 8
  %436 = alloca i8*, align 8
  %437 = alloca i8*, align 8
  %438 = alloca i8**, align 8
  %439 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %434, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %434, metadata !3141, metadata !DIExpression()), !dbg !3011
  store i8* %1, i8** %435, align 8
  call void @llvm.dbg.declare(metadata i8** %435, metadata !3180, metadata !DIExpression()), !dbg !3013
  store i8* %2, i8** %436, align 8
  call void @llvm.dbg.declare(metadata i8** %436, metadata !3181, metadata !DIExpression()), !dbg !3015
  store i8* %3, i8** %437, align 8
  call void @llvm.dbg.declare(metadata i8** %437, metadata !3182, metadata !DIExpression()), !dbg !3017
  store i8** %4, i8*** %438, align 8
  call void @llvm.dbg.declare(metadata i8*** %438, metadata !3183, metadata !DIExpression()), !dbg !3019
  store i64 %5, i64* %439, align 8
  call void @llvm.dbg.declare(metadata i64* %439, metadata !3184, metadata !DIExpression()), !dbg !3021
  %440 = load i8*, i8** %435, align 8, !dbg !3022
  %441 = icmp ne i8* %440, null, !dbg !3022
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  %442 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3025
  %443 = load i8*, i8** %16, align 8, !dbg !3026
  %444 = load i8*, i8** %17, align 8, !dbg !3027
  %445 = load i8*, i8** %18, align 8, !dbg !3028
  %446 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %442, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.81, i64 0, i64 0), i8* %443, i8* %444, i8* %445), !dbg !3029
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %53
  %447 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3030
  %448 = load i8*, i8** %17, align 8, !dbg !3031
  %449 = load i8*, i8** %18, align 8, !dbg !3032
  %450 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %447, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.82, i64 0, i64 0), i8* %448, i8* %449), !dbg !3033
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %74
  %451 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3034
  %452 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.83, i64 0, i64 0)) #10, !dbg !3035
  %453 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %451, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @version_etc_copyright, i64 0, i64 0), i8* %452, i32 2020), !dbg !3036
  %454 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3037
  %455 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.84, i64 0, i64 0), %struct._IO_FILE* %454), !dbg !3037
  %456 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3038
  %457 = call i8* @gettext(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.4.85, i64 0, i64 0)) #10, !dbg !3039
  %458 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %456, i8* %457, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5.86, i64 0, i64 0)), !dbg !3040
  %459 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3041
  %460 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.84, i64 0, i64 0), %struct._IO_FILE* %459), !dbg !3041
  %461 = load i64, i64* %20, align 8, !dbg !3042
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %102
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %119
  %462 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3046
  %463 = call i8* @gettext(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.87, i64 0, i64 0)) #10, !dbg !3047
  %464 = load i8**, i8*** %19, align 8, !dbg !3048
  %465 = getelementptr inbounds i8*, i8** %464, i64 0, !dbg !3048
  %466 = load i8*, i8** %465, align 8, !dbg !3048
  %467 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %462, i8* %463, i8* %466), !dbg !3049
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %142
  %468 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3051
  %469 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7.88, i64 0, i64 0)) #10, !dbg !3052
  %470 = load i8**, i8*** %19, align 8, !dbg !3053
  %471 = getelementptr inbounds i8*, i8** %470, i64 0, !dbg !3053
  %472 = load i8*, i8** %471, align 8, !dbg !3053
  %473 = load i8**, i8*** %19, align 8, !dbg !3054
  %474 = getelementptr inbounds i8*, i8** %473, i64 1, !dbg !3054
  %475 = load i8*, i8** %474, align 8, !dbg !3054
  %476 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %468, i8* %469, i8* %472, i8* %475), !dbg !3055
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %181
  %477 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3064
  %478 = call i8* @gettext(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.9.90, i64 0, i64 0)) #10, !dbg !3065
  %479 = load i8**, i8*** %19, align 8, !dbg !3066
  %480 = getelementptr inbounds i8*, i8** %479, i64 0, !dbg !3066
  %481 = load i8*, i8** %480, align 8, !dbg !3066
  %482 = load i8**, i8*** %19, align 8, !dbg !3067
  %483 = getelementptr inbounds i8*, i8** %482, i64 1, !dbg !3067
  %484 = load i8*, i8** %483, align 8, !dbg !3067
  %485 = load i8**, i8*** %19, align 8, !dbg !3068
  %486 = getelementptr inbounds i8*, i8** %485, i64 2, !dbg !3068
  %487 = load i8*, i8** %486, align 8, !dbg !3068
  %488 = load i8**, i8*** %19, align 8, !dbg !3069
  %489 = getelementptr inbounds i8*, i8** %488, i64 3, !dbg !3069
  %490 = load i8*, i8** %489, align 8, !dbg !3069
  %491 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %477, i8* %478, i8* %481, i8* %484, i8* %487, i8* %490), !dbg !3070
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %213
  %492 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3072
  %493 = call i8* @gettext(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.10.91, i64 0, i64 0)) #10, !dbg !3073
  %494 = load i8**, i8*** %19, align 8, !dbg !3074
  %495 = getelementptr inbounds i8*, i8** %494, i64 0, !dbg !3074
  %496 = load i8*, i8** %495, align 8, !dbg !3074
  %497 = load i8**, i8*** %19, align 8, !dbg !3075
  %498 = getelementptr inbounds i8*, i8** %497, i64 1, !dbg !3075
  %499 = load i8*, i8** %498, align 8, !dbg !3075
  %500 = load i8**, i8*** %19, align 8, !dbg !3076
  %501 = getelementptr inbounds i8*, i8** %500, i64 2, !dbg !3076
  %502 = load i8*, i8** %501, align 8, !dbg !3076
  %503 = load i8**, i8*** %19, align 8, !dbg !3077
  %504 = getelementptr inbounds i8*, i8** %503, i64 3, !dbg !3077
  %505 = load i8*, i8** %504, align 8, !dbg !3077
  %506 = load i8**, i8*** %19, align 8, !dbg !3078
  %507 = getelementptr inbounds i8*, i8** %506, i64 4, !dbg !3078
  %508 = load i8*, i8** %507, align 8, !dbg !3078
  %509 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %492, i8* %493, i8* %496, i8* %499, i8* %502, i8* %505, i8* %508), !dbg !3079
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %248
  %510 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3081
  %511 = call i8* @gettext(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11.92, i64 0, i64 0)) #10, !dbg !3082
  %512 = load i8**, i8*** %19, align 8, !dbg !3083
  %513 = getelementptr inbounds i8*, i8** %512, i64 0, !dbg !3083
  %514 = load i8*, i8** %513, align 8, !dbg !3083
  %515 = load i8**, i8*** %19, align 8, !dbg !3084
  %516 = getelementptr inbounds i8*, i8** %515, i64 1, !dbg !3084
  %517 = load i8*, i8** %516, align 8, !dbg !3084
  %518 = load i8**, i8*** %19, align 8, !dbg !3085
  %519 = getelementptr inbounds i8*, i8** %518, i64 2, !dbg !3085
  %520 = load i8*, i8** %519, align 8, !dbg !3085
  %521 = load i8**, i8*** %19, align 8, !dbg !3086
  %522 = getelementptr inbounds i8*, i8** %521, i64 3, !dbg !3086
  %523 = load i8*, i8** %522, align 8, !dbg !3086
  %524 = load i8**, i8*** %19, align 8, !dbg !3087
  %525 = getelementptr inbounds i8*, i8** %524, i64 4, !dbg !3087
  %526 = load i8*, i8** %525, align 8, !dbg !3087
  %527 = load i8**, i8*** %19, align 8, !dbg !3088
  %528 = getelementptr inbounds i8*, i8** %527, i64 5, !dbg !3088
  %529 = load i8*, i8** %528, align 8, !dbg !3088
  %530 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %510, i8* %511, i8* %514, i8* %517, i8* %520, i8* %523, i8* %526, i8* %529), !dbg !3089
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %286
  %531 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3091
  %532 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.12.93, i64 0, i64 0)) #10, !dbg !3092
  %533 = load i8**, i8*** %19, align 8, !dbg !3093
  %534 = getelementptr inbounds i8*, i8** %533, i64 0, !dbg !3093
  %535 = load i8*, i8** %534, align 8, !dbg !3093
  %536 = load i8**, i8*** %19, align 8, !dbg !3094
  %537 = getelementptr inbounds i8*, i8** %536, i64 1, !dbg !3094
  %538 = load i8*, i8** %537, align 8, !dbg !3094
  %539 = load i8**, i8*** %19, align 8, !dbg !3095
  %540 = getelementptr inbounds i8*, i8** %539, i64 2, !dbg !3095
  %541 = load i8*, i8** %540, align 8, !dbg !3095
  %542 = load i8**, i8*** %19, align 8, !dbg !3096
  %543 = getelementptr inbounds i8*, i8** %542, i64 3, !dbg !3096
  %544 = load i8*, i8** %543, align 8, !dbg !3096
  %545 = load i8**, i8*** %19, align 8, !dbg !3097
  %546 = getelementptr inbounds i8*, i8** %545, i64 4, !dbg !3097
  %547 = load i8*, i8** %546, align 8, !dbg !3097
  %548 = load i8**, i8*** %19, align 8, !dbg !3098
  %549 = getelementptr inbounds i8*, i8** %548, i64 5, !dbg !3098
  %550 = load i8*, i8** %549, align 8, !dbg !3098
  %551 = load i8**, i8*** %19, align 8, !dbg !3099
  %552 = getelementptr inbounds i8*, i8** %551, i64 6, !dbg !3099
  %553 = load i8*, i8** %552, align 8, !dbg !3099
  %554 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %531, i8* %532, i8* %535, i8* %538, i8* %541, i8* %544, i8* %547, i8* %550, i8* %553), !dbg !3100
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %327
  %555 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3102
  %556 = call i8* @gettext(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.13.94, i64 0, i64 0)) #10, !dbg !3103
  %557 = load i8**, i8*** %19, align 8, !dbg !3104
  %558 = getelementptr inbounds i8*, i8** %557, i64 0, !dbg !3104
  %559 = load i8*, i8** %558, align 8, !dbg !3104
  %560 = load i8**, i8*** %19, align 8, !dbg !3105
  %561 = getelementptr inbounds i8*, i8** %560, i64 1, !dbg !3105
  %562 = load i8*, i8** %561, align 8, !dbg !3105
  %563 = load i8**, i8*** %19, align 8, !dbg !3106
  %564 = getelementptr inbounds i8*, i8** %563, i64 2, !dbg !3106
  %565 = load i8*, i8** %564, align 8, !dbg !3106
  %566 = load i8**, i8*** %19, align 8, !dbg !3107
  %567 = getelementptr inbounds i8*, i8** %566, i64 3, !dbg !3107
  %568 = load i8*, i8** %567, align 8, !dbg !3107
  %569 = load i8**, i8*** %19, align 8, !dbg !3108
  %570 = getelementptr inbounds i8*, i8** %569, i64 4, !dbg !3108
  %571 = load i8*, i8** %570, align 8, !dbg !3108
  %572 = load i8**, i8*** %19, align 8, !dbg !3109
  %573 = getelementptr inbounds i8*, i8** %572, i64 5, !dbg !3109
  %574 = load i8*, i8** %573, align 8, !dbg !3109
  %575 = load i8**, i8*** %19, align 8, !dbg !3110
  %576 = getelementptr inbounds i8*, i8** %575, i64 6, !dbg !3110
  %577 = load i8*, i8** %576, align 8, !dbg !3110
  %578 = load i8**, i8*** %19, align 8, !dbg !3111
  %579 = getelementptr inbounds i8*, i8** %578, i64 7, !dbg !3111
  %580 = load i8*, i8** %579, align 8, !dbg !3111
  %581 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %555, i8* %556, i8* %559, i8* %562, i8* %565, i8* %568, i8* %571, i8* %574, i8* %577, i8* %580), !dbg !3112
  br label %originalBB42
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc_va(%struct._IO_FILE*, i8*, i8*, i8*, %struct.__va_list_tag*) #4 !dbg !3185 {
  %6 = load i32, i32* @x.57
  %7 = load i32, i32* @y.58
  %8 = sub i32 %6, 1
  %9 = mul i32 %6, %8
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  %12 = icmp slt i32 %7, 10
  %13 = or i1 %11, %12
  br i1 %13, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %5, %originalBBalteredBB
  %14 = alloca %struct._IO_FILE*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca %struct.__va_list_tag*, align 8
  %19 = alloca i64, align 8
  %20 = alloca [10 x i8*], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %14, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %14, metadata !3195, metadata !DIExpression()), !dbg !3196
  store i8* %1, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !3197, metadata !DIExpression()), !dbg !3198
  store i8* %2, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !3199, metadata !DIExpression()), !dbg !3200
  store i8* %3, i8** %17, align 8
  call void @llvm.dbg.declare(metadata i8** %17, metadata !3201, metadata !DIExpression()), !dbg !3202
  store %struct.__va_list_tag* %4, %struct.__va_list_tag** %18, align 8
  call void @llvm.dbg.declare(metadata %struct.__va_list_tag** %18, metadata !3203, metadata !DIExpression()), !dbg !3204
  call void @llvm.dbg.declare(metadata i64* %19, metadata !3205, metadata !DIExpression()), !dbg !3206
  call void @llvm.dbg.declare(metadata [10 x i8*]* %20, metadata !3207, metadata !DIExpression()), !dbg !3209
  store i64 0, i64* %19, align 8, !dbg !3210
  %21 = load i32, i32* @x.57
  %22 = load i32, i32* @y.58
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %29, !dbg !3212

29:                                               ; preds = %originalBBpart239, %originalBBpart2
  %30 = load i32, i32* @x.57
  %31 = load i32, i32* @y.58
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %29, %originalBB1alteredBB
  %38 = load i64, i64* %19, align 8, !dbg !3213
  %39 = icmp ult i64 %38, 10, !dbg !3215
  %40 = load i32, i32* @x.57
  %41 = load i32, i32* @y.58
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %39, label %48, label %118, !dbg !3216

48:                                               ; preds = %originalBBpart24
  %49 = load i32, i32* @x.57
  %50 = load i32, i32* @y.58
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load %struct.__va_list_tag*, %struct.__va_list_tag** %18, align 8, !dbg !3217
  %58 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 0, !dbg !3217
  %59 = load i32, i32* %58, align 8, !dbg !3217
  %60 = icmp ule i32 %59, 40, !dbg !3217
  %61 = load i32, i32* @x.57
  %62 = load i32, i32* @y.58
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %60, label %69, label %91, !dbg !3217

69:                                               ; preds = %originalBBpart28
  %70 = load i32, i32* @x.57
  %71 = load i32, i32* @y.58
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %69, %originalBB10alteredBB
  %78 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 3, !dbg !3217
  %79 = load i8*, i8** %78, align 8, !dbg !3217
  %80 = getelementptr i8, i8* %79, i32 %59, !dbg !3217
  %81 = bitcast i8* %80 to i8**, !dbg !3217
  %82 = add i32 %59, 8, !dbg !3217
  store i32 %82, i32* %58, align 8, !dbg !3217
  %83 = load i32, i32* @x.57
  %84 = load i32, i32* @y.58
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBBpart218, label %originalBB10alteredBB

originalBBpart218:                                ; preds = %originalBB10
  br label %112, !dbg !3217

91:                                               ; preds = %originalBBpart28
  %92 = load i32, i32* @x.57
  %93 = load i32, i32* @y.58
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBB20, label %originalBB20alteredBB

originalBB20:                                     ; preds = %91, %originalBB20alteredBB
  %100 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 2, !dbg !3217
  %101 = load i8*, i8** %100, align 8, !dbg !3217
  %102 = bitcast i8* %101 to i8**, !dbg !3217
  %103 = getelementptr i8, i8* %101, i32 8, !dbg !3217
  store i8* %103, i8** %100, align 8, !dbg !3217
  %104 = load i32, i32* @x.57
  %105 = load i32, i32* @y.58
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBBpart222, label %originalBB20alteredBB

originalBBpart222:                                ; preds = %originalBB20
  br label %112, !dbg !3217

112:                                              ; preds = %originalBBpart222, %originalBBpart218
  %113 = phi i8** [ %81, %originalBBpart218 ], [ %102, %originalBBpart222 ], !dbg !3217
  %114 = load i8*, i8** %113, align 8, !dbg !3217
  %115 = load i64, i64* %19, align 8, !dbg !3218
  %116 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 %115, !dbg !3219
  store i8* %114, i8** %116, align 8, !dbg !3220
  %117 = icmp ne i8* %114, null, !dbg !3221
  br label %118

118:                                              ; preds = %112, %originalBBpart24
  %119 = phi i1 [ false, %originalBBpart24 ], [ %117, %112 ], !dbg !3222
  br i1 %119, label %120, label %140, !dbg !3223

120:                                              ; preds = %118
  br label %121, !dbg !3223

121:                                              ; preds = %120
  %122 = load i32, i32* @x.57
  %123 = load i32, i32* @y.58
  %124 = sub i32 %122, 1
  %125 = mul i32 %122, %124
  %126 = urem i32 %125, 2
  %127 = icmp eq i32 %126, 0
  %128 = icmp slt i32 %123, 10
  %129 = or i1 %127, %128
  br i1 %129, label %originalBB24, label %originalBB24alteredBB

originalBB24:                                     ; preds = %121, %originalBB24alteredBB
  %130 = load i64, i64* %19, align 8, !dbg !3224
  %131 = add i64 %130, 1, !dbg !3224
  store i64 %131, i64* %19, align 8, !dbg !3224
  %132 = load i32, i32* @x.57
  %133 = load i32, i32* @y.58
  %134 = sub i32 %132, 1
  %135 = mul i32 %132, %134
  %136 = urem i32 %135, 2
  %137 = icmp eq i32 %136, 0
  %138 = icmp slt i32 %133, 10
  %139 = or i1 %137, %138
  br i1 %139, label %originalBBpart239, label %originalBB24alteredBB

originalBBpart239:                                ; preds = %originalBB24
  br label %29, !dbg !3225, !llvm.loop !3226

140:                                              ; preds = %118
  %141 = load %struct._IO_FILE*, %struct._IO_FILE** %14, align 8, !dbg !3228
  %142 = load i8*, i8** %15, align 8, !dbg !3229
  %143 = load i8*, i8** %16, align 8, !dbg !3230
  %144 = load i8*, i8** %17, align 8, !dbg !3231
  %145 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 0, !dbg !3232
  %146 = load i64, i64* %19, align 8, !dbg !3233
  call void @version_etc_arn(%struct._IO_FILE* %141, i8* %142, i8* %143, i8* %144, i8** %145, i64 %146), !dbg !3234
  ret void, !dbg !3235

originalBBalteredBB:                              ; preds = %originalBB, %5
  %147 = alloca %struct._IO_FILE*, align 8
  %148 = alloca i8*, align 8
  %149 = alloca i8*, align 8
  %150 = alloca i8*, align 8
  %151 = alloca %struct.__va_list_tag*, align 8
  %152 = alloca i64, align 8
  %153 = alloca [10 x i8*], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %147, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %147, metadata !3236, metadata !DIExpression()), !dbg !3196
  store i8* %1, i8** %148, align 8
  call void @llvm.dbg.declare(metadata i8** %148, metadata !3282, metadata !DIExpression()), !dbg !3198
  store i8* %2, i8** %149, align 8
  call void @llvm.dbg.declare(metadata i8** %149, metadata !3283, metadata !DIExpression()), !dbg !3200
  store i8* %3, i8** %150, align 8
  call void @llvm.dbg.declare(metadata i8** %150, metadata !3284, metadata !DIExpression()), !dbg !3202
  store %struct.__va_list_tag* %4, %struct.__va_list_tag** %151, align 8
  call void @llvm.dbg.declare(metadata %struct.__va_list_tag** %151, metadata !3285, metadata !DIExpression()), !dbg !3204
  call void @llvm.dbg.declare(metadata i64* %152, metadata !3286, metadata !DIExpression()), !dbg !3206
  call void @llvm.dbg.declare(metadata [10 x i8*]* %153, metadata !3287, metadata !DIExpression()), !dbg !3209
  store i64 0, i64* %152, align 8, !dbg !3210
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %29
  %154 = load i64, i64* %19, align 8, !dbg !3213
  %155 = icmp ult i64 %154, 10, !dbg !3215
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  %156 = load %struct.__va_list_tag*, %struct.__va_list_tag** %18, align 8, !dbg !3217
  %157 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %156, i32 0, i32 0, !dbg !3217
  %158 = load i32, i32* %157, align 8, !dbg !3217
  %159 = icmp ule i32 %158, 40, !dbg !3217
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %69
  %160 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 3, !dbg !3217
  %161 = load i8*, i8** %160, align 8, !dbg !3217
  %162 = getelementptr i8, i8* %161, i32 %59, !dbg !3217
  %163 = bitcast i8* %162 to i8**, !dbg !3217
  %_ = sub i32 %59, 8
  %gen = mul i32 %_, 8
  %_11 = sub i32 0, %59
  %gen12 = add i32 %_11, 8
  %_13 = sub i32 %59, 8
  %gen14 = mul i32 %_13, 8
  %_15 = shl i32 %59, 8
  %_16 = shl i32 %59, 8
  %164 = add i32 %59, 8, !dbg !3217
  store i32 %164, i32* %58, align 8, !dbg !3217
  br label %originalBB10

originalBB20alteredBB:                            ; preds = %originalBB20, %91
  %165 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 2, !dbg !3217
  %166 = load i8*, i8** %165, align 8, !dbg !3217
  %167 = bitcast i8* %166 to i8**, !dbg !3217
  %168 = getelementptr i8, i8* %166, i32 8, !dbg !3217
  store i8* %168, i8** %165, align 8, !dbg !3217
  br label %originalBB20

originalBB24alteredBB:                            ; preds = %originalBB24, %121
  %169 = load i64, i64* %19, align 8, !dbg !3224
  %_25 = sub i64 %169, 1
  %gen26 = mul i64 %_25, 1
  %_27 = sub i64 %169, 1
  %gen28 = mul i64 %_27, 1
  %_29 = shl i64 %169, 1
  %_30 = sub i64 %169, 1
  %gen31 = mul i64 %_30, 1
  %_32 = sub i64 0, %169
  %gen33 = add i64 %_32, 1
  %_34 = shl i64 %169, 1
  %_35 = sub i64 0, %169
  %gen36 = add i64 %_35, 1
  %_37 = shl i64 %169, 1
  %170 = add i64 %169, 1, !dbg !3224
  store i64 %170, i64* %19, align 8, !dbg !3224
  br label %originalBB24
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc(%struct._IO_FILE*, i8*, i8*, i8*, ...) #4 !dbg !3288 {
  %5 = load i32, i32* @x.59
  %6 = load i32, i32* @y.60
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %4, %originalBBalteredBB
  %13 = alloca %struct._IO_FILE*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca [1 x %struct.__va_list_tag], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %13, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %13, metadata !3291, metadata !DIExpression()), !dbg !3292
  store i8* %1, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !3293, metadata !DIExpression()), !dbg !3294
  store i8* %2, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !3295, metadata !DIExpression()), !dbg !3296
  store i8* %3, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !3297, metadata !DIExpression()), !dbg !3298
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %17, metadata !3299, metadata !DIExpression()), !dbg !3306
  %18 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %17, i64 0, i64 0, !dbg !3307
  %19 = bitcast %struct.__va_list_tag* %18 to i8*, !dbg !3307
  call void @llvm.va_start(i8* %19), !dbg !3307
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3308
  %21 = load i8*, i8** %14, align 8, !dbg !3309
  %22 = load i8*, i8** %15, align 8, !dbg !3310
  %23 = load i8*, i8** %16, align 8, !dbg !3311
  %24 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %17, i64 0, i64 0, !dbg !3312
  call void @version_etc_va(%struct._IO_FILE* %20, i8* %21, i8* %22, i8* %23, %struct.__va_list_tag* %24), !dbg !3313
  %25 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %17, i64 0, i64 0, !dbg !3314
  %26 = bitcast %struct.__va_list_tag* %25 to i8*, !dbg !3314
  call void @llvm.va_end(i8* %26), !dbg !3314
  %27 = load i32, i32* @x.59
  %28 = load i32, i32* @y.60
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret void, !dbg !3315

originalBBalteredBB:                              ; preds = %originalBB, %4
  %35 = alloca %struct._IO_FILE*, align 8
  %36 = alloca i8*, align 8
  %37 = alloca i8*, align 8
  %38 = alloca i8*, align 8
  %39 = alloca [1 x %struct.__va_list_tag], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %35, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %35, metadata !3316, metadata !DIExpression()), !dbg !3292
  store i8* %1, i8** %36, align 8
  call void @llvm.dbg.declare(metadata i8** %36, metadata !3355, metadata !DIExpression()), !dbg !3294
  store i8* %2, i8** %37, align 8
  call void @llvm.dbg.declare(metadata i8** %37, metadata !3356, metadata !DIExpression()), !dbg !3296
  store i8* %3, i8** %38, align 8
  call void @llvm.dbg.declare(metadata i8** %38, metadata !3357, metadata !DIExpression()), !dbg !3298
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %39, metadata !3358, metadata !DIExpression()), !dbg !3306
  %40 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %39, i64 0, i64 0, !dbg !3307
  %41 = bitcast %struct.__va_list_tag* %40 to i8*, !dbg !3307
  call void @llvm.va_start(i8* %41), !dbg !3307
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** %35, align 8, !dbg !3308
  %43 = load i8*, i8** %36, align 8, !dbg !3309
  %44 = load i8*, i8** %37, align 8, !dbg !3310
  %45 = load i8*, i8** %38, align 8, !dbg !3311
  %46 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %39, i64 0, i64 0, !dbg !3312
  call void @version_etc_va(%struct._IO_FILE* %42, i8* %43, i8* %44, i8* %45, %struct.__va_list_tag* %46), !dbg !3313
  %47 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %39, i64 0, i64 0, !dbg !3314
  %48 = bitcast %struct.__va_list_tag* %47 to i8*, !dbg !3314
  call void @llvm.va_end(i8* %48), !dbg !3314
  br label %originalBB
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #10

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #10

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xnmalloc(i64, i64) #4 !dbg !3369 {
  %3 = load i32, i32* @x.61
  %4 = load i32, i32* @y.62
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  store i64 %0, i64* %11, align 8
  call void @llvm.dbg.declare(metadata i64* %11, metadata !3373, metadata !DIExpression()), !dbg !3374
  store i64 %1, i64* %12, align 8
  call void @llvm.dbg.declare(metadata i64* %12, metadata !3375, metadata !DIExpression()), !dbg !3376
  %13 = load i64, i64* %12, align 8, !dbg !3377
  %14 = udiv i64 9223372036854775807, %13, !dbg !3377
  %15 = load i64, i64* %11, align 8, !dbg !3377
  %16 = icmp ult i64 %14, %15, !dbg !3377
  %17 = load i32, i32* @x.61
  %18 = load i32, i32* @y.62
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %16, label %25, label %26, !dbg !3379

25:                                               ; preds = %originalBBpart2
  call void @xalloc_die() #14, !dbg !3380
  unreachable, !dbg !3380

26:                                               ; preds = %originalBBpart2
  %27 = load i32, i32* @x.61
  %28 = load i32, i32* @y.62
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBB9, label %originalBB9alteredBB

originalBB9:                                      ; preds = %26, %originalBB9alteredBB
  %35 = load i64, i64* %11, align 8, !dbg !3381
  %36 = load i64, i64* %12, align 8, !dbg !3382
  %37 = mul i64 %35, %36, !dbg !3383
  %38 = call noalias i8* @xmalloc(i64 %37), !dbg !3384
  %39 = load i32, i32* @x.61
  %40 = load i32, i32* @y.62
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart219, label %originalBB9alteredBB

originalBBpart219:                                ; preds = %originalBB9
  ret i8* %38, !dbg !3385

originalBBalteredBB:                              ; preds = %originalBB, %2
  %47 = alloca i64, align 8
  %48 = alloca i64, align 8
  store i64 %0, i64* %47, align 8
  call void @llvm.dbg.declare(metadata i64* %47, metadata !3386, metadata !DIExpression()), !dbg !3374
  store i64 %1, i64* %48, align 8
  call void @llvm.dbg.declare(metadata i64* %48, metadata !3389, metadata !DIExpression()), !dbg !3376
  %49 = load i64, i64* %48, align 8, !dbg !3377
  %_ = sub i64 0, 9223372036854775807
  %gen = add i64 %_, %49
  %_1 = shl i64 9223372036854775807, %49
  %_2 = sub i64 0, 9223372036854775807
  %gen3 = add i64 %_2, %49
  %_4 = sub i64 9223372036854775807, %49
  %gen5 = mul i64 %_4, %49
  %_6 = sub i64 9223372036854775807, %49
  %gen7 = mul i64 %_6, %49
  %_8 = shl i64 9223372036854775807, %49
  %50 = udiv i64 9223372036854775807, %49, !dbg !3377
  %51 = load i64, i64* %47, align 8, !dbg !3377
  %52 = icmp ult i64 %50, %51, !dbg !3377
  br label %originalBB

originalBB9alteredBB:                             ; preds = %originalBB9, %26
  %53 = load i64, i64* %11, align 8, !dbg !3381
  %54 = load i64, i64* %12, align 8, !dbg !3382
  %_10 = shl i64 %53, %54
  %_11 = shl i64 %53, %54
  %_12 = sub i64 0, %53
  %gen13 = add i64 %_12, %54
  %_14 = sub i64 0, %53
  %gen15 = add i64 %_14, %54
  %_16 = sub i64 0, %53
  %gen17 = add i64 %_16, %54
  %55 = mul i64 %53, %54, !dbg !3383
  %56 = call noalias i8* @xmalloc(i64 %55), !dbg !3384
  br label %originalBB9
}

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xmalloc(i64) #4 !dbg !3390 {
  %2 = load i32, i32* @x.63
  %3 = load i32, i32* @y.64
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i64, align 8
  %11 = alloca i8*, align 8
  store i64 %0, i64* %10, align 8
  call void @llvm.dbg.declare(metadata i64* %10, metadata !3394, metadata !DIExpression()), !dbg !3395
  call void @llvm.dbg.declare(metadata i8** %11, metadata !3396, metadata !DIExpression()), !dbg !3397
  %12 = load i64, i64* %10, align 8, !dbg !3398
  %13 = call noalias i8* @malloc(i64 %12) #10, !dbg !3399
  store i8* %13, i8** %11, align 8, !dbg !3397
  %14 = load i8*, i8** %11, align 8, !dbg !3400
  %15 = icmp ne i8* %14, null, !dbg !3400
  %16 = load i32, i32* @x.63
  %17 = load i32, i32* @y.64
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %60, label %24, !dbg !3402

24:                                               ; preds = %originalBBpart2
  %25 = load i32, i32* @x.63
  %26 = load i32, i32* @y.64
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %24, %originalBB1alteredBB
  %33 = load i64, i64* %10, align 8, !dbg !3403
  %34 = icmp ne i64 %33, 0, !dbg !3404
  %35 = load i32, i32* @x.63
  %36 = load i32, i32* @y.64
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %34, label %43, label %60, !dbg !3405

43:                                               ; preds = %originalBBpart24
  %44 = load i32, i32* @x.63
  %45 = load i32, i32* @y.64
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %43, %originalBB6alteredBB
  call void @xalloc_die() #14, !dbg !3406
  %52 = load i32, i32* @x.63
  %53 = load i32, i32* @y.64
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  unreachable, !dbg !3406

60:                                               ; preds = %originalBBpart24, %originalBBpart2
  %61 = load i32, i32* @x.63
  %62 = load i32, i32* @y.64
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %60, %originalBB10alteredBB
  %69 = load i8*, i8** %11, align 8, !dbg !3407
  %70 = load i32, i32* @x.63
  %71 = load i32, i32* @y.64
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  ret i8* %69, !dbg !3408

originalBBalteredBB:                              ; preds = %originalBB, %1
  %78 = alloca i64, align 8
  %79 = alloca i8*, align 8
  store i64 %0, i64* %78, align 8
  call void @llvm.dbg.declare(metadata i64* %78, metadata !3409, metadata !DIExpression()), !dbg !3395
  call void @llvm.dbg.declare(metadata i8** %79, metadata !3412, metadata !DIExpression()), !dbg !3397
  %80 = load i64, i64* %78, align 8, !dbg !3398
  %81 = call noalias i8* @malloc(i64 %80) #10, !dbg !3399
  store i8* %81, i8** %79, align 8, !dbg !3397
  %82 = load i8*, i8** %79, align 8, !dbg !3400
  %83 = icmp ne i8* %82, null, !dbg !3400
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %24
  %84 = load i64, i64* %10, align 8, !dbg !3403
  %85 = icmp ne i64 %84, 0, !dbg !3404
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %43
  call void @xalloc_die() #14, !dbg !3406
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %60
  %86 = load i8*, i8** %11, align 8, !dbg !3407
  br label %originalBB10
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @xrealloc(i8*, i64) #4 !dbg !3413 {
  %3 = load i32, i32* @x.65
  %4 = load i32, i32* @y.66
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !3416, metadata !DIExpression()), !dbg !3417
  store i64 %1, i64* %13, align 8
  call void @llvm.dbg.declare(metadata i64* %13, metadata !3418, metadata !DIExpression()), !dbg !3419
  %14 = load i64, i64* %13, align 8, !dbg !3420
  %15 = icmp ne i64 %14, 0, !dbg !3420
  %16 = load i32, i32* @x.65
  %17 = load i32, i32* @y.66
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %61, label %24, !dbg !3422

24:                                               ; preds = %originalBBpart2
  %25 = load i32, i32* @x.65
  %26 = load i32, i32* @y.66
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %24, %originalBB1alteredBB
  %33 = load i8*, i8** %12, align 8, !dbg !3423
  %34 = icmp ne i8* %33, null, !dbg !3423
  %35 = load i32, i32* @x.65
  %36 = load i32, i32* @y.66
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %34, label %43, label %61, !dbg !3424

43:                                               ; preds = %originalBBpart24
  %44 = load i32, i32* @x.65
  %45 = load i32, i32* @y.66
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %43, %originalBB6alteredBB
  %52 = load i8*, i8** %12, align 8, !dbg !3425
  call void @free(i8* %52) #10, !dbg !3427
  store i8* null, i8** %11, align 8, !dbg !3428
  %53 = load i32, i32* @x.65
  %54 = load i32, i32* @y.66
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %121, !dbg !3428

61:                                               ; preds = %originalBBpart24, %originalBBpart2
  %62 = load i8*, i8** %12, align 8, !dbg !3429
  %63 = load i64, i64* %13, align 8, !dbg !3430
  %64 = call i8* @realloc(i8* %62, i64 %63) #10, !dbg !3431
  store i8* %64, i8** %12, align 8, !dbg !3432
  %65 = load i8*, i8** %12, align 8, !dbg !3433
  %66 = icmp ne i8* %65, null, !dbg !3433
  br i1 %66, label %103, label %67, !dbg !3435

67:                                               ; preds = %61
  %68 = load i32, i32* @x.65
  %69 = load i32, i32* @y.66
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %67, %originalBB10alteredBB
  %76 = load i64, i64* %13, align 8, !dbg !3436
  %77 = icmp ne i64 %76, 0, !dbg !3436
  %78 = load i32, i32* @x.65
  %79 = load i32, i32* @y.66
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %77, label %86, label %103, !dbg !3437

86:                                               ; preds = %originalBBpart212
  %87 = load i32, i32* @x.65
  %88 = load i32, i32* @y.66
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %86, %originalBB14alteredBB
  call void @xalloc_die() #14, !dbg !3438
  %95 = load i32, i32* @x.65
  %96 = load i32, i32* @y.66
  %97 = sub i32 %95, 1
  %98 = mul i32 %95, %97
  %99 = urem i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %96, 10
  %102 = or i1 %100, %101
  br i1 %102, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  unreachable, !dbg !3438

103:                                              ; preds = %originalBBpart212, %61
  %104 = load i32, i32* @x.65
  %105 = load i32, i32* @y.66
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %103, %originalBB18alteredBB
  %112 = load i8*, i8** %12, align 8, !dbg !3439
  store i8* %112, i8** %11, align 8, !dbg !3440
  %113 = load i32, i32* @x.65
  %114 = load i32, i32* @y.66
  %115 = sub i32 %113, 1
  %116 = mul i32 %113, %115
  %117 = urem i32 %116, 2
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %118, %119
  br i1 %120, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %121, !dbg !3440

121:                                              ; preds = %originalBBpart220, %originalBBpart28
  %122 = load i32, i32* @x.65
  %123 = load i32, i32* @y.66
  %124 = sub i32 %122, 1
  %125 = mul i32 %122, %124
  %126 = urem i32 %125, 2
  %127 = icmp eq i32 %126, 0
  %128 = icmp slt i32 %123, 10
  %129 = or i1 %127, %128
  br i1 %129, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %121, %originalBB22alteredBB
  %130 = load i8*, i8** %11, align 8, !dbg !3441
  %131 = load i32, i32* @x.65
  %132 = load i32, i32* @y.66
  %133 = sub i32 %131, 1
  %134 = mul i32 %131, %133
  %135 = urem i32 %134, 2
  %136 = icmp eq i32 %135, 0
  %137 = icmp slt i32 %132, 10
  %138 = or i1 %136, %137
  br i1 %138, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  ret i8* %130, !dbg !3441

originalBBalteredBB:                              ; preds = %originalBB, %2
  %139 = alloca i8*, align 8
  %140 = alloca i8*, align 8
  %141 = alloca i64, align 8
  store i8* %0, i8** %140, align 8
  call void @llvm.dbg.declare(metadata i8** %140, metadata !3442, metadata !DIExpression()), !dbg !3417
  store i64 %1, i64* %141, align 8
  call void @llvm.dbg.declare(metadata i64* %141, metadata !3445, metadata !DIExpression()), !dbg !3419
  %142 = load i64, i64* %141, align 8, !dbg !3420
  %143 = icmp ne i64 %142, 0, !dbg !3420
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %24
  %144 = load i8*, i8** %12, align 8, !dbg !3423
  %145 = icmp ne i8* %144, null, !dbg !3423
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %43
  %146 = load i8*, i8** %12, align 8, !dbg !3425
  call void @free(i8* %146) #10, !dbg !3427
  store i8* null, i8** %11, align 8, !dbg !3428
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %67
  %147 = load i64, i64* %13, align 8, !dbg !3436
  %148 = icmp ne i64 %147, 0, !dbg !3436
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %86
  call void @xalloc_die() #14, !dbg !3438
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %103
  %149 = load i8*, i8** %12, align 8, !dbg !3439
  store i8* %149, i8** %11, align 8, !dbg !3440
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %121
  %150 = load i8*, i8** %11, align 8, !dbg !3441
  br label %originalBB22
}

; Function Attrs: nounwind
declare dso_local i8* @realloc(i8*, i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xcharalloc(i64) #4 !dbg !3446 {
  %2 = load i32, i32* @x.67
  %3 = load i32, i32* @y.68
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i64, align 8
  store i64 %0, i64* %10, align 8
  call void @llvm.dbg.declare(metadata i64* %10, metadata !3447, metadata !DIExpression()), !dbg !3448
  %11 = load i64, i64* %10, align 8, !dbg !3449
  %12 = call noalias i8* @xmalloc(i64 %11), !dbg !3449
  %13 = load i32, i32* @x.67
  %14 = load i32, i32* @y.68
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %12, !dbg !3450

originalBBalteredBB:                              ; preds = %originalBB, %1
  %21 = alloca i64, align 8
  store i64 %0, i64* %21, align 8
  call void @llvm.dbg.declare(metadata i64* %21, metadata !3451, metadata !DIExpression()), !dbg !3448
  %22 = load i64, i64* %21, align 8, !dbg !3449
  %23 = call noalias i8* @xmalloc(i64 %22), !dbg !3449
  br label %originalBB
}

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @xalloc_die() #0 !dbg !3454 {
  %1 = load i32, i32* @x.69
  %2 = load i32, i32* @y.70
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = load volatile i32, i32* @exit_failure, align 4, !dbg !3456
  %10 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.111, i64 0, i64 0)) #10, !dbg !3457
  call void (i32, i32, i8*, ...) @error(i32 %9, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.112, i64 0, i64 0), i8* %10), !dbg !3458
  call void @abort() #12, !dbg !3459
  %11 = load i32, i32* @x.69
  %12 = load i32, i32* @y.70
  %13 = sub i32 %11, 1
  %14 = mul i32 %11, %13
  %15 = urem i32 %14, 2
  %16 = icmp eq i32 %15, 0
  %17 = icmp slt i32 %12, 10
  %18 = or i1 %16, %17
  br i1 %18, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  unreachable, !dbg !3459

originalBBalteredBB:                              ; preds = %originalBB, %0
  %19 = load volatile i32, i32* @exit_failure, align 4, !dbg !3456
  %20 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.111, i64 0, i64 0)) #10, !dbg !3457
  call void (i32, i32, i8*, ...) @error(i32 %19, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.112, i64 0, i64 0), i8* %20), !dbg !3458
  call void @abort() #12, !dbg !3459
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @xgetcwd() #4 !dbg !3460 {
  %1 = load i32, i32* @x.71
  %2 = load i32, i32* @y.72
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %9, metadata !3462, metadata !DIExpression()), !dbg !3463
  %10 = call i8* @getcwd(i8* null, i64 0) #10, !dbg !3464
  store i8* %10, i8** %9, align 8, !dbg !3463
  %11 = load i8*, i8** %9, align 8, !dbg !3465
  %12 = icmp ne i8* %11, null, !dbg !3465
  %13 = load i32, i32* @x.71
  %14 = load i32, i32* @y.72
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %58, label %21, !dbg !3467

21:                                               ; preds = %originalBBpart2
  %22 = load i32, i32* @x.71
  %23 = load i32, i32* @y.72
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  %30 = call i32* @__errno_location() #15, !dbg !3468
  %31 = load i32, i32* %30, align 4, !dbg !3468
  %32 = icmp eq i32 %31, 12, !dbg !3469
  %33 = load i32, i32* @x.71
  %34 = load i32, i32* @y.72
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %32, label %41, label %58, !dbg !3470

41:                                               ; preds = %originalBBpart24
  %42 = load i32, i32* @x.71
  %43 = load i32, i32* @y.72
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %41, %originalBB6alteredBB
  call void @xalloc_die() #14, !dbg !3471
  %50 = load i32, i32* @x.71
  %51 = load i32, i32* @y.72
  %52 = sub i32 %50, 1
  %53 = mul i32 %50, %52
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %55, %56
  br i1 %57, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  unreachable, !dbg !3471

58:                                               ; preds = %originalBBpart24, %originalBBpart2
  %59 = load i32, i32* @x.71
  %60 = load i32, i32* @y.72
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %58, %originalBB10alteredBB
  %67 = load i8*, i8** %9, align 8, !dbg !3472
  %68 = load i32, i32* @x.71
  %69 = load i32, i32* @y.72
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  ret i8* %67, !dbg !3473

originalBBalteredBB:                              ; preds = %originalBB, %0
  %76 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %76, metadata !3474, metadata !DIExpression()), !dbg !3463
  %77 = call i8* @getcwd(i8* null, i64 0) #10, !dbg !3464
  store i8* %77, i8** %76, align 8, !dbg !3463
  %78 = load i8*, i8** %76, align 8, !dbg !3465
  %79 = icmp ne i8* %78, null, !dbg !3465
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  %80 = call i32* @__errno_location() #15, !dbg !3468
  %81 = load i32, i32* %80, align 4, !dbg !3468
  %82 = icmp eq i32 %81, 12, !dbg !3469
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %41
  call void @xalloc_die() #14, !dbg !3471
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %58
  %83 = load i8*, i8** %9, align 8, !dbg !3472
  br label %originalBB10
}

; Function Attrs: nounwind
declare dso_local i8* @getcwd(i8*, i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @rpl_mbrtowc(i32*, i8*, i64, %struct.__mbstate_t*) #4 !dbg !3477 {
  %5 = load i32, i32* @x.73
  %6 = load i32, i32* @y.74
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %4, %originalBBalteredBB
  %13 = alloca i64, align 8
  %14 = alloca i32*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i64, align 8
  %17 = alloca %struct.__mbstate_t*, align 8
  %18 = alloca i64, align 8
  %19 = alloca i32, align 4
  %20 = alloca i8, align 1
  store i32* %0, i32** %14, align 8
  call void @llvm.dbg.declare(metadata i32** %14, metadata !3493, metadata !DIExpression()), !dbg !3494
  store i8* %1, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !3495, metadata !DIExpression()), !dbg !3496
  store i64 %2, i64* %16, align 8
  call void @llvm.dbg.declare(metadata i64* %16, metadata !3497, metadata !DIExpression()), !dbg !3498
  store %struct.__mbstate_t* %3, %struct.__mbstate_t** %17, align 8
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t** %17, metadata !3499, metadata !DIExpression()), !dbg !3500
  call void @llvm.dbg.declare(metadata i64* %18, metadata !3501, metadata !DIExpression()), !dbg !3502
  call void @llvm.dbg.declare(metadata i32* %19, metadata !3503, metadata !DIExpression()), !dbg !3504
  %21 = load i32*, i32** %14, align 8, !dbg !3505
  %22 = icmp ne i32* %21, null, !dbg !3505
  %23 = load i32, i32* @x.73
  %24 = load i32, i32* @y.74
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %48, label %31, !dbg !3507

31:                                               ; preds = %originalBBpart2
  %32 = load i32, i32* @x.73
  %33 = load i32, i32* @y.74
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  store i32* %19, i32** %14, align 8, !dbg !3508
  %40 = load i32, i32* @x.73
  %41 = load i32, i32* @y.74
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %48, !dbg !3509

48:                                               ; preds = %originalBBpart24, %originalBBpart2
  %49 = load i32, i32* @x.73
  %50 = load i32, i32* @y.74
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load i32*, i32** %14, align 8, !dbg !3510
  %58 = load i8*, i8** %15, align 8, !dbg !3511
  %59 = load i64, i64* %16, align 8, !dbg !3512
  %60 = load %struct.__mbstate_t*, %struct.__mbstate_t** %17, align 8, !dbg !3513
  %61 = call i64 @mbrtowc(i32* %57, i8* %58, i64 %59, %struct.__mbstate_t* %60) #10, !dbg !3514
  store i64 %61, i64* %18, align 8, !dbg !3515
  %62 = load i64, i64* %18, align 8, !dbg !3516
  %63 = icmp ule i64 -2, %62, !dbg !3518
  %64 = load i32, i32* @x.73
  %65 = load i32, i32* @y.74
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %63, label %72, label %131, !dbg !3519

72:                                               ; preds = %originalBBpart28
  %73 = load i32, i32* @x.73
  %74 = load i32, i32* @y.74
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %72, %originalBB10alteredBB
  %81 = load i64, i64* %16, align 8, !dbg !3520
  %82 = icmp ne i64 %81, 0, !dbg !3521
  %83 = load i32, i32* @x.73
  %84 = load i32, i32* @y.74
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %82, label %91, label %131, !dbg !3522

91:                                               ; preds = %originalBBpart212
  %92 = load i32, i32* @x.73
  %93 = load i32, i32* @y.74
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %91, %originalBB14alteredBB
  %100 = call zeroext i1 @hard_locale(i32 0), !dbg !3523
  %101 = load i32, i32* @x.73
  %102 = load i32, i32* @y.74
  %103 = sub i32 %101, 1
  %104 = mul i32 %101, %103
  %105 = urem i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %102, 10
  %108 = or i1 %106, %107
  br i1 %108, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %100, label %131, label %109, !dbg !3524

109:                                              ; preds = %originalBBpart216
  call void @llvm.dbg.declare(metadata i8* %20, metadata !3525, metadata !DIExpression()), !dbg !3527
  %110 = load i32, i32* @x.73
  %111 = load i32, i32* @y.74
  %112 = sub i32 %110, 1
  %113 = mul i32 %110, %112
  %114 = urem i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %115, %116
  br i1 %117, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %109, %originalBB18alteredBB
  %118 = load i8*, i8** %15, align 8, !dbg !3528
  %119 = load i8, i8* %118, align 1, !dbg !3529
  store i8 %119, i8* %20, align 1, !dbg !3527
  %120 = load i8, i8* %20, align 1, !dbg !3530
  %121 = zext i8 %120 to i32, !dbg !3530
  %122 = load i32*, i32** %14, align 8, !dbg !3531
  store i32 %121, i32* %122, align 4, !dbg !3532
  store i64 1, i64* %13, align 8, !dbg !3533
  %123 = load i32, i32* @x.73
  %124 = load i32, i32* @y.74
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %149, !dbg !3533

131:                                              ; preds = %originalBBpart216, %originalBBpart212, %originalBBpart28
  %132 = load i32, i32* @x.73
  %133 = load i32, i32* @y.74
  %134 = sub i32 %132, 1
  %135 = mul i32 %132, %134
  %136 = urem i32 %135, 2
  %137 = icmp eq i32 %136, 0
  %138 = icmp slt i32 %133, 10
  %139 = or i1 %137, %138
  br i1 %139, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %131, %originalBB22alteredBB
  %140 = load i64, i64* %18, align 8, !dbg !3534
  store i64 %140, i64* %13, align 8, !dbg !3535
  %141 = load i32, i32* @x.73
  %142 = load i32, i32* @y.74
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %149, !dbg !3535

149:                                              ; preds = %originalBBpart224, %originalBBpart220
  %150 = load i64, i64* %13, align 8, !dbg !3536
  ret i64 %150, !dbg !3536

originalBBalteredBB:                              ; preds = %originalBB, %4
  %151 = alloca i64, align 8
  %152 = alloca i32*, align 8
  %153 = alloca i8*, align 8
  %154 = alloca i64, align 8
  %155 = alloca %struct.__mbstate_t*, align 8
  %156 = alloca i64, align 8
  %157 = alloca i32, align 4
  %158 = alloca i8, align 1
  store i32* %0, i32** %152, align 8
  call void @llvm.dbg.declare(metadata i32** %152, metadata !3537, metadata !DIExpression()), !dbg !3494
  store i8* %1, i8** %153, align 8
  call void @llvm.dbg.declare(metadata i8** %153, metadata !3553, metadata !DIExpression()), !dbg !3496
  store i64 %2, i64* %154, align 8
  call void @llvm.dbg.declare(metadata i64* %154, metadata !3554, metadata !DIExpression()), !dbg !3498
  store %struct.__mbstate_t* %3, %struct.__mbstate_t** %155, align 8
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t** %155, metadata !3555, metadata !DIExpression()), !dbg !3500
  call void @llvm.dbg.declare(metadata i64* %156, metadata !3556, metadata !DIExpression()), !dbg !3502
  call void @llvm.dbg.declare(metadata i32* %157, metadata !3557, metadata !DIExpression()), !dbg !3504
  %159 = load i32*, i32** %152, align 8, !dbg !3505
  %160 = icmp ne i32* %159, null, !dbg !3505
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  store i32* %19, i32** %14, align 8, !dbg !3508
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  %161 = load i32*, i32** %14, align 8, !dbg !3510
  %162 = load i8*, i8** %15, align 8, !dbg !3511
  %163 = load i64, i64* %16, align 8, !dbg !3512
  %164 = load %struct.__mbstate_t*, %struct.__mbstate_t** %17, align 8, !dbg !3513
  %165 = call i64 @mbrtowc(i32* %161, i8* %162, i64 %163, %struct.__mbstate_t* %164) #10, !dbg !3514
  store i64 %165, i64* %18, align 8, !dbg !3515
  %166 = load i64, i64* %18, align 8, !dbg !3516
  %167 = icmp ule i64 -2, %166, !dbg !3518
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %72
  %168 = load i64, i64* %16, align 8, !dbg !3520
  %169 = icmp ne i64 %168, 0, !dbg !3521
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %91
  %170 = call zeroext i1 @hard_locale(i32 0), !dbg !3523
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %109
  %171 = load i8*, i8** %15, align 8, !dbg !3528
  %172 = load i8, i8* %171, align 1, !dbg !3529
  store i8 %172, i8* %20, align 1, !dbg !3527
  %173 = load i8, i8* %20, align 1, !dbg !3530
  %174 = zext i8 %173 to i32, !dbg !3530
  %175 = load i32*, i32** %14, align 8, !dbg !3531
  store i32 %174, i32* %175, align 4, !dbg !3532
  store i64 1, i64* %13, align 8, !dbg !3533
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %131
  %176 = load i64, i64* %18, align 8, !dbg !3534
  store i64 %176, i64* %13, align 8, !dbg !3535
  br label %originalBB22
}

; Function Attrs: nounwind
declare dso_local i64 @mbrtowc(i32*, i8*, i64, %struct.__mbstate_t*) #2

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @c_strcasecmp(i8*, i8*) #11 !dbg !3558 {
  %3 = load i32, i32* @x.75
  %4 = load i32, i32* @y.76
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8, align 1
  %17 = alloca i8, align 1
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !3562, metadata !DIExpression()), !dbg !3563
  store i8* %1, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !3564, metadata !DIExpression()), !dbg !3565
  call void @llvm.dbg.declare(metadata i8** %14, metadata !3566, metadata !DIExpression()), !dbg !3567
  %18 = load i8*, i8** %12, align 8, !dbg !3568
  store i8* %18, i8** %14, align 8, !dbg !3567
  call void @llvm.dbg.declare(metadata i8** %15, metadata !3569, metadata !DIExpression()), !dbg !3570
  %19 = load i8*, i8** %13, align 8, !dbg !3571
  store i8* %19, i8** %15, align 8, !dbg !3570
  call void @llvm.dbg.declare(metadata i8* %16, metadata !3572, metadata !DIExpression()), !dbg !3573
  call void @llvm.dbg.declare(metadata i8* %17, metadata !3574, metadata !DIExpression()), !dbg !3575
  %20 = load i8*, i8** %14, align 8, !dbg !3576
  %21 = load i8*, i8** %15, align 8, !dbg !3578
  %22 = icmp eq i8* %20, %21, !dbg !3579
  %23 = load i32, i32* @x.75
  %24 = load i32, i32* @y.76
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %31, label %48, !dbg !3580

31:                                               ; preds = %originalBBpart2
  %32 = load i32, i32* @x.75
  %33 = load i32, i32* @y.76
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  store i32 0, i32* %11, align 4, !dbg !3581
  %40 = load i32, i32* @x.75
  %41 = load i32, i32* @y.76
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %161, !dbg !3581

48:                                               ; preds = %originalBBpart2
  %49 = load i32, i32* @x.75
  %50 = load i32, i32* @y.76
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load i32, i32* @x.75
  %58 = load i32, i32* @y.76
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %65, !dbg !3582

65:                                               ; preds = %originalBBpart220, %originalBBpart28
  %66 = load i32, i32* @x.75
  %67 = load i32, i32* @y.76
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %65, %originalBB10alteredBB
  %74 = load i8*, i8** %14, align 8, !dbg !3583
  %75 = load i8, i8* %74, align 1, !dbg !3585
  %76 = zext i8 %75 to i32, !dbg !3585
  %77 = call i32 @c_tolower(i32 %76), !dbg !3586
  %78 = trunc i32 %77 to i8, !dbg !3586
  store i8 %78, i8* %16, align 1, !dbg !3587
  %79 = load i8*, i8** %15, align 8, !dbg !3588
  %80 = load i8, i8* %79, align 1, !dbg !3589
  %81 = zext i8 %80 to i32, !dbg !3589
  %82 = call i32 @c_tolower(i32 %81), !dbg !3590
  %83 = trunc i32 %82 to i8, !dbg !3590
  store i8 %83, i8* %17, align 1, !dbg !3591
  %84 = load i8, i8* %16, align 1, !dbg !3592
  %85 = zext i8 %84 to i32, !dbg !3592
  %86 = icmp eq i32 %85, 0, !dbg !3594
  %87 = load i32, i32* @x.75
  %88 = load i32, i32* @y.76
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %86, label %95, label %112, !dbg !3595

95:                                               ; preds = %originalBBpart212
  %96 = load i32, i32* @x.75
  %97 = load i32, i32* @y.76
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %95, %originalBB14alteredBB
  %104 = load i32, i32* @x.75
  %105 = load i32, i32* @y.76
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %139, !dbg !3596

112:                                              ; preds = %originalBBpart212
  %113 = load i8*, i8** %14, align 8, !dbg !3597
  %114 = getelementptr inbounds i8, i8* %113, i32 1, !dbg !3597
  store i8* %114, i8** %14, align 8, !dbg !3597
  %115 = load i8*, i8** %15, align 8, !dbg !3598
  %116 = getelementptr inbounds i8, i8* %115, i32 1, !dbg !3598
  store i8* %116, i8** %15, align 8, !dbg !3598
  br label %117, !dbg !3599

117:                                              ; preds = %112
  %118 = load i32, i32* @x.75
  %119 = load i32, i32* @y.76
  %120 = sub i32 %118, 1
  %121 = mul i32 %118, %120
  %122 = urem i32 %121, 2
  %123 = icmp eq i32 %122, 0
  %124 = icmp slt i32 %119, 10
  %125 = or i1 %123, %124
  br i1 %125, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %117, %originalBB18alteredBB
  %126 = load i8, i8* %16, align 1, !dbg !3600
  %127 = zext i8 %126 to i32, !dbg !3600
  %128 = load i8, i8* %17, align 1, !dbg !3601
  %129 = zext i8 %128 to i32, !dbg !3601
  %130 = icmp eq i32 %127, %129, !dbg !3602
  %131 = load i32, i32* @x.75
  %132 = load i32, i32* @y.76
  %133 = sub i32 %131, 1
  %134 = mul i32 %131, %133
  %135 = urem i32 %134, 2
  %136 = icmp eq i32 %135, 0
  %137 = icmp slt i32 %132, 10
  %138 = or i1 %136, %137
  br i1 %138, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %130, label %65, label %139, !dbg !3599, !llvm.loop !3603

139:                                              ; preds = %originalBBpart220, %originalBBpart216
  %140 = load i32, i32* @x.75
  %141 = load i32, i32* @y.76
  %142 = sub i32 %140, 1
  %143 = mul i32 %140, %142
  %144 = urem i32 %143, 2
  %145 = icmp eq i32 %144, 0
  %146 = icmp slt i32 %141, 10
  %147 = or i1 %145, %146
  br i1 %147, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %139, %originalBB22alteredBB
  %148 = load i8, i8* %16, align 1, !dbg !3605
  %149 = zext i8 %148 to i32, !dbg !3605
  %150 = load i8, i8* %17, align 1, !dbg !3607
  %151 = zext i8 %150 to i32, !dbg !3607
  %152 = sub nsw i32 %149, %151, !dbg !3608
  store i32 %152, i32* %11, align 4, !dbg !3609
  %153 = load i32, i32* @x.75
  %154 = load i32, i32* @y.76
  %155 = sub i32 %153, 1
  %156 = mul i32 %153, %155
  %157 = urem i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = icmp slt i32 %154, 10
  %160 = or i1 %158, %159
  br i1 %160, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %161, !dbg !3609

161:                                              ; preds = %originalBBpart224, %originalBBpart24
  %162 = load i32, i32* @x.75
  %163 = load i32, i32* @y.76
  %164 = sub i32 %162, 1
  %165 = mul i32 %162, %164
  %166 = urem i32 %165, 2
  %167 = icmp eq i32 %166, 0
  %168 = icmp slt i32 %163, 10
  %169 = or i1 %167, %168
  br i1 %169, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %161, %originalBB26alteredBB
  %170 = load i32, i32* %11, align 4, !dbg !3610
  %171 = load i32, i32* @x.75
  %172 = load i32, i32* @y.76
  %173 = sub i32 %171, 1
  %174 = mul i32 %171, %173
  %175 = urem i32 %174, 2
  %176 = icmp eq i32 %175, 0
  %177 = icmp slt i32 %172, 10
  %178 = or i1 %176, %177
  br i1 %178, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  ret i32 %170, !dbg !3610

originalBBalteredBB:                              ; preds = %originalBB, %2
  %179 = alloca i32, align 4
  %180 = alloca i8*, align 8
  %181 = alloca i8*, align 8
  %182 = alloca i8*, align 8
  %183 = alloca i8*, align 8
  %184 = alloca i8, align 1
  %185 = alloca i8, align 1
  store i8* %0, i8** %180, align 8
  call void @llvm.dbg.declare(metadata i8** %180, metadata !3611, metadata !DIExpression()), !dbg !3563
  store i8* %1, i8** %181, align 8
  call void @llvm.dbg.declare(metadata i8** %181, metadata !3614, metadata !DIExpression()), !dbg !3565
  call void @llvm.dbg.declare(metadata i8** %182, metadata !3615, metadata !DIExpression()), !dbg !3567
  %186 = load i8*, i8** %180, align 8, !dbg !3568
  store i8* %186, i8** %182, align 8, !dbg !3567
  call void @llvm.dbg.declare(metadata i8** %183, metadata !3616, metadata !DIExpression()), !dbg !3570
  %187 = load i8*, i8** %181, align 8, !dbg !3571
  store i8* %187, i8** %183, align 8, !dbg !3570
  call void @llvm.dbg.declare(metadata i8* %184, metadata !3617, metadata !DIExpression()), !dbg !3573
  call void @llvm.dbg.declare(metadata i8* %185, metadata !3618, metadata !DIExpression()), !dbg !3575
  %188 = load i8*, i8** %182, align 8, !dbg !3576
  %189 = load i8*, i8** %183, align 8, !dbg !3578
  %190 = icmp eq i8* %188, %189, !dbg !3579
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  store i32 0, i32* %11, align 4, !dbg !3581
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %65
  %191 = load i8*, i8** %14, align 8, !dbg !3583
  %192 = load i8, i8* %191, align 1, !dbg !3585
  %193 = zext i8 %192 to i32, !dbg !3585
  %194 = call i32 @c_tolower(i32 %193), !dbg !3586
  %195 = trunc i32 %194 to i8, !dbg !3586
  store i8 %195, i8* %16, align 1, !dbg !3587
  %196 = load i8*, i8** %15, align 8, !dbg !3588
  %197 = load i8, i8* %196, align 1, !dbg !3589
  %198 = zext i8 %197 to i32, !dbg !3589
  %199 = call i32 @c_tolower(i32 %198), !dbg !3590
  %200 = trunc i32 %199 to i8, !dbg !3590
  store i8 %200, i8* %17, align 1, !dbg !3591
  %201 = load i8, i8* %16, align 1, !dbg !3592
  %202 = zext i8 %201 to i32, !dbg !3592
  %203 = icmp eq i32 %202, 0, !dbg !3594
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %95
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %117
  %204 = load i8, i8* %16, align 1, !dbg !3600
  %205 = zext i8 %204 to i32, !dbg !3600
  %206 = load i8, i8* %17, align 1, !dbg !3601
  %207 = zext i8 %206 to i32, !dbg !3601
  %208 = icmp eq i32 %205, %207, !dbg !3602
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %139
  %209 = load i8, i8* %16, align 1, !dbg !3605
  %210 = zext i8 %209 to i32, !dbg !3605
  %211 = load i8, i8* %17, align 1, !dbg !3607
  %212 = zext i8 %211 to i32, !dbg !3607
  %_ = sub i32 0, %210
  %gen = add i32 %_, %212
  %213 = sub nsw i32 %210, %212, !dbg !3608
  store i32 %213, i32* %11, align 4, !dbg !3609
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %161
  %214 = load i32, i32* %11, align 4, !dbg !3610
  br label %originalBB26
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @close_stream(%struct._IO_FILE*) #4 !dbg !3619 {
  %2 = load i32, i32* @x.77
  %3 = load i32, i32* @y.78
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca %struct._IO_FILE*, align 8
  %12 = alloca i8, align 1
  %13 = alloca i8, align 1
  %14 = alloca i8, align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %11, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %11, metadata !3657, metadata !DIExpression()), !dbg !3658
  call void @llvm.dbg.declare(metadata i8* %12, metadata !3659, metadata !DIExpression()), !dbg !3661
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3662
  %16 = call i64 @__fpending(%struct._IO_FILE* %15) #10, !dbg !3663
  %17 = icmp ne i64 %16, 0, !dbg !3664
  %18 = zext i1 %17 to i8, !dbg !3661
  store i8 %18, i8* %12, align 1, !dbg !3661
  call void @llvm.dbg.declare(metadata i8* %13, metadata !3665, metadata !DIExpression()), !dbg !3666
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3667
  %20 = call i32 @ferror_unlocked(%struct._IO_FILE* %19) #10, !dbg !3667
  %21 = icmp ne i32 %20, 0, !dbg !3668
  %22 = zext i1 %21 to i8, !dbg !3666
  store i8 %22, i8* %13, align 1, !dbg !3666
  call void @llvm.dbg.declare(metadata i8* %14, metadata !3669, metadata !DIExpression()), !dbg !3670
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3671
  %24 = call i32 @rpl_fclose(%struct._IO_FILE* %23), !dbg !3672
  %25 = icmp ne i32 %24, 0, !dbg !3673
  %26 = zext i1 %25 to i8, !dbg !3670
  store i8 %26, i8* %14, align 1, !dbg !3670
  %27 = load i8, i8* %13, align 1, !dbg !3674
  %28 = trunc i8 %27 to i1, !dbg !3674
  %29 = load i32, i32* @x.77
  %30 = load i32, i32* @y.78
  %31 = sub i32 %29, 1
  %32 = mul i32 %29, %31
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %34, %35
  br i1 %36, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %28, label %79, label %37, !dbg !3676

37:                                               ; preds = %originalBBpart2
  %38 = load i8, i8* %14, align 1, !dbg !3677
  %39 = trunc i8 %38 to i1, !dbg !3677
  br i1 %39, label %40, label %133, !dbg !3678

40:                                               ; preds = %37
  %41 = load i32, i32* @x.77
  %42 = load i32, i32* @y.78
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %40, %originalBB1alteredBB
  %49 = load i8, i8* %12, align 1, !dbg !3679
  %50 = trunc i8 %49 to i1, !dbg !3679
  %51 = load i32, i32* @x.77
  %52 = load i32, i32* @y.78
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %50, label %79, label %59, !dbg !3680

59:                                               ; preds = %originalBBpart24
  %60 = load i32, i32* @x.77
  %61 = load i32, i32* @y.78
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %59, %originalBB6alteredBB
  %68 = call i32* @__errno_location() #15, !dbg !3681
  %69 = load i32, i32* %68, align 4, !dbg !3681
  %70 = icmp ne i32 %69, 9, !dbg !3682
  %71 = load i32, i32* @x.77
  %72 = load i32, i32* @y.78
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %70, label %79, label %133, !dbg !3683

79:                                               ; preds = %originalBBpart28, %originalBBpart24, %originalBBpart2
  %80 = load i32, i32* @x.77
  %81 = load i32, i32* @y.78
  %82 = sub i32 %80, 1
  %83 = mul i32 %80, %82
  %84 = urem i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = icmp slt i32 %81, 10
  %87 = or i1 %85, %86
  br i1 %87, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %79, %originalBB10alteredBB
  %88 = load i8, i8* %14, align 1, !dbg !3684
  %89 = trunc i8 %88 to i1, !dbg !3684
  %90 = load i32, i32* @x.77
  %91 = load i32, i32* @y.78
  %92 = sub i32 %90, 1
  %93 = mul i32 %90, %92
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %91, 10
  %97 = or i1 %95, %96
  br i1 %97, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %89, label %116, label %98, !dbg !3687

98:                                               ; preds = %originalBBpart212
  %99 = load i32, i32* @x.77
  %100 = load i32, i32* @y.78
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %98, %originalBB14alteredBB
  %107 = call i32* @__errno_location() #15, !dbg !3688
  store i32 0, i32* %107, align 4, !dbg !3689
  %108 = load i32, i32* @x.77
  %109 = load i32, i32* @y.78
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %116, !dbg !3688

116:                                              ; preds = %originalBBpart216, %originalBBpart212
  %117 = load i32, i32* @x.77
  %118 = load i32, i32* @y.78
  %119 = sub i32 %117, 1
  %120 = mul i32 %117, %119
  %121 = urem i32 %120, 2
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %122, %123
  br i1 %124, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %116, %originalBB18alteredBB
  store i32 -1, i32* %10, align 4, !dbg !3690
  %125 = load i32, i32* @x.77
  %126 = load i32, i32* @y.78
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %150, !dbg !3690

133:                                              ; preds = %originalBBpart28, %37
  %134 = load i32, i32* @x.77
  %135 = load i32, i32* @y.78
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %133, %originalBB22alteredBB
  store i32 0, i32* %10, align 4, !dbg !3691
  %142 = load i32, i32* @x.77
  %143 = load i32, i32* @y.78
  %144 = sub i32 %142, 1
  %145 = mul i32 %142, %144
  %146 = urem i32 %145, 2
  %147 = icmp eq i32 %146, 0
  %148 = icmp slt i32 %143, 10
  %149 = or i1 %147, %148
  br i1 %149, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %150, !dbg !3691

150:                                              ; preds = %originalBBpart224, %originalBBpart220
  %151 = load i32, i32* @x.77
  %152 = load i32, i32* @y.78
  %153 = sub i32 %151, 1
  %154 = mul i32 %151, %153
  %155 = urem i32 %154, 2
  %156 = icmp eq i32 %155, 0
  %157 = icmp slt i32 %152, 10
  %158 = or i1 %156, %157
  br i1 %158, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %150, %originalBB26alteredBB
  %159 = load i32, i32* %10, align 4, !dbg !3692
  %160 = load i32, i32* @x.77
  %161 = load i32, i32* @y.78
  %162 = sub i32 %160, 1
  %163 = mul i32 %160, %162
  %164 = urem i32 %163, 2
  %165 = icmp eq i32 %164, 0
  %166 = icmp slt i32 %161, 10
  %167 = or i1 %165, %166
  br i1 %167, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  ret i32 %159, !dbg !3692

originalBBalteredBB:                              ; preds = %originalBB, %1
  %168 = alloca i32, align 4
  %169 = alloca %struct._IO_FILE*, align 8
  %170 = alloca i8, align 1
  %171 = alloca i8, align 1
  %172 = alloca i8, align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %169, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %169, metadata !3693, metadata !DIExpression()), !dbg !3658
  call void @llvm.dbg.declare(metadata i8* %170, metadata !3732, metadata !DIExpression()), !dbg !3661
  %173 = load %struct._IO_FILE*, %struct._IO_FILE** %169, align 8, !dbg !3662
  %174 = call i64 @__fpending(%struct._IO_FILE* %173) #10, !dbg !3663
  %175 = icmp ne i64 %174, 0, !dbg !3664
  %176 = zext i1 %175 to i8, !dbg !3661
  store i8 %176, i8* %170, align 1, !dbg !3661
  call void @llvm.dbg.declare(metadata i8* %171, metadata !3733, metadata !DIExpression()), !dbg !3666
  %177 = load %struct._IO_FILE*, %struct._IO_FILE** %169, align 8, !dbg !3667
  %178 = call i32 @ferror_unlocked(%struct._IO_FILE* %177) #10, !dbg !3667
  %179 = icmp ne i32 %178, 0, !dbg !3668
  %180 = zext i1 %179 to i8, !dbg !3666
  store i8 %180, i8* %171, align 1, !dbg !3666
  call void @llvm.dbg.declare(metadata i8* %172, metadata !3734, metadata !DIExpression()), !dbg !3670
  %181 = load %struct._IO_FILE*, %struct._IO_FILE** %169, align 8, !dbg !3671
  %182 = call i32 @rpl_fclose(%struct._IO_FILE* %181), !dbg !3672
  %183 = icmp ne i32 %182, 0, !dbg !3673
  %184 = zext i1 %183 to i8, !dbg !3670
  store i8 %184, i8* %172, align 1, !dbg !3670
  %185 = load i8, i8* %171, align 1, !dbg !3674
  %186 = trunc i8 %185 to i1, !dbg !3674
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %40
  %187 = load i8, i8* %12, align 1, !dbg !3679
  %188 = trunc i8 %187 to i1, !dbg !3679
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %59
  %189 = call i32* @__errno_location() #15, !dbg !3681
  %190 = load i32, i32* %189, align 4, !dbg !3681
  %191 = icmp ne i32 %190, 9, !dbg !3682
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %79
  %192 = load i8, i8* %14, align 1, !dbg !3684
  %193 = trunc i8 %192 to i1, !dbg !3684
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %98
  %194 = call i32* @__errno_location() #15, !dbg !3688
  store i32 0, i32* %194, align 4, !dbg !3689
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %116
  store i32 -1, i32* %10, align 4, !dbg !3690
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %133
  store i32 0, i32* %10, align 4, !dbg !3691
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %150
  %195 = load i32, i32* %10, align 4, !dbg !3692
  br label %originalBB26
}

; Function Attrs: nounwind
declare dso_local i64 @__fpending(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare dso_local i32 @ferror_unlocked(%struct._IO_FILE*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @hard_locale(i32) #4 !dbg !3735 {
  %2 = load i32, i32* @x.79
  %3 = load i32, i32* @y.80
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i1, align 1
  %11 = alloca i32, align 4
  %12 = alloca [257 x i8], align 16
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !3739, metadata !DIExpression()), !dbg !3740
  call void @llvm.dbg.declare(metadata [257 x i8]* %12, metadata !3741, metadata !DIExpression()), !dbg !3745
  %13 = load i32, i32* %11, align 4, !dbg !3746
  %14 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !3748
  %15 = call i32 @setlocale_null_r(i32 %13, i8* %14, i64 257), !dbg !3749
  %16 = icmp ne i32 %15, 0, !dbg !3749
  %17 = load i32, i32* @x.79
  %18 = load i32, i32* @y.80
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %16, label %25, label %42, !dbg !3750

25:                                               ; preds = %originalBBpart2
  %26 = load i32, i32* @x.79
  %27 = load i32, i32* @y.80
  %28 = sub i32 %26, 1
  %29 = mul i32 %26, %28
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %31, %32
  br i1 %33, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %25, %originalBB1alteredBB
  store i1 false, i1* %10, align 1, !dbg !3751
  %34 = load i32, i32* @x.79
  %35 = load i32, i32* @y.80
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %101, !dbg !3751

42:                                               ; preds = %originalBBpart2
  %43 = load i32, i32* @x.79
  %44 = load i32, i32* @y.80
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %42, %originalBB6alteredBB
  %51 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !3752
  %52 = call i32 @strcmp(i8* %51, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.123, i64 0, i64 0)) #13, !dbg !3753
  %53 = icmp eq i32 %52, 0, !dbg !3754
  %54 = load i32, i32* @x.79
  %55 = load i32, i32* @y.80
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %53, label %82, label %62, !dbg !3755

62:                                               ; preds = %originalBBpart28
  %63 = load i32, i32* @x.79
  %64 = load i32, i32* @y.80
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %62, %originalBB10alteredBB
  %71 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !3756
  %72 = call i32 @strcmp(i8* %71, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.124, i64 0, i64 0)) #13, !dbg !3757
  %73 = icmp eq i32 %72, 0, !dbg !3758
  %74 = load i32, i32* @x.79
  %75 = load i32, i32* @y.80
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %82, !dbg !3755

82:                                               ; preds = %originalBBpart212, %originalBBpart28
  %83 = phi i1 [ true, %originalBBpart28 ], [ %73, %originalBBpart212 ]
  %84 = load i32, i32* @x.79
  %85 = load i32, i32* @y.80
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %82, %originalBB14alteredBB
  %92 = xor i1 %83, true, !dbg !3759
  store i1 %92, i1* %10, align 1, !dbg !3760
  %93 = load i32, i32* @x.79
  %94 = load i32, i32* @y.80
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBBpart218, label %originalBB14alteredBB

originalBBpart218:                                ; preds = %originalBB14
  br label %101, !dbg !3760

101:                                              ; preds = %originalBBpart218, %originalBBpart24
  %102 = load i32, i32* @x.79
  %103 = load i32, i32* @y.80
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB20, label %originalBB20alteredBB

originalBB20:                                     ; preds = %101, %originalBB20alteredBB
  %110 = load i1, i1* %10, align 1, !dbg !3761
  %111 = load i32, i32* @x.79
  %112 = load i32, i32* @y.80
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBBpart222, label %originalBB20alteredBB

originalBBpart222:                                ; preds = %originalBB20
  ret i1 %110, !dbg !3761

originalBBalteredBB:                              ; preds = %originalBB, %1
  %119 = alloca i1, align 1
  %120 = alloca i32, align 4
  %121 = alloca [257 x i8], align 16
  store i32 %0, i32* %120, align 4
  call void @llvm.dbg.declare(metadata i32* %120, metadata !3762, metadata !DIExpression()), !dbg !3740
  call void @llvm.dbg.declare(metadata [257 x i8]* %121, metadata !3765, metadata !DIExpression()), !dbg !3745
  %122 = load i32, i32* %120, align 4, !dbg !3746
  %123 = getelementptr inbounds [257 x i8], [257 x i8]* %121, i64 0, i64 0, !dbg !3748
  %124 = call i32 @setlocale_null_r(i32 %122, i8* %123, i64 257), !dbg !3749
  %125 = icmp ne i32 %124, 0, !dbg !3749
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %25
  store i1 false, i1* %10, align 1, !dbg !3751
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %42
  %126 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !3752
  %127 = call i32 @strcmp(i8* %126, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.123, i64 0, i64 0)) #13, !dbg !3753
  %128 = icmp eq i32 %127, 0, !dbg !3754
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %62
  %129 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !3756
  %130 = call i32 @strcmp(i8* %129, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.124, i64 0, i64 0)) #13, !dbg !3757
  %131 = icmp eq i32 %130, 0, !dbg !3758
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %82
  %_ = sub i1 false, %83
  %gen = add i1 %_, true
  %_15 = sub i1 %83, true
  %gen16 = mul i1 %_15, true
  %132 = xor i1 %83, true, !dbg !3759
  store i1 %132, i1* %10, align 1, !dbg !3760
  br label %originalBB14

originalBB20alteredBB:                            ; preds = %originalBB20, %101
  %133 = load i1, i1* %10, align 1, !dbg !3761
  br label %originalBB20
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @locale_charset() #4 !dbg !3766 {
  %1 = load i32, i32* @x.81
  %2 = load i32, i32* @y.82
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %9, metadata !3770, metadata !DIExpression()), !dbg !3771
  %10 = call i8* @nl_langinfo(i32 14) #10, !dbg !3772
  store i8* %10, i8** %9, align 8, !dbg !3773
  %11 = load i8*, i8** %9, align 8, !dbg !3774
  %12 = icmp eq i8* %11, null, !dbg !3776
  %13 = load i32, i32* @x.81
  %14 = load i32, i32* @y.82
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %21, label %38, !dbg !3777

21:                                               ; preds = %originalBBpart2
  %22 = load i32, i32* @x.81
  %23 = load i32, i32* @y.82
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.127, i64 0, i64 0), i8** %9, align 8, !dbg !3778
  %30 = load i32, i32* @x.81
  %31 = load i32, i32* @y.82
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %38, !dbg !3779

38:                                               ; preds = %originalBBpart24, %originalBBpart2
  %39 = load i32, i32* @x.81
  %40 = load i32, i32* @y.82
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %38, %originalBB6alteredBB
  %47 = load i8*, i8** %9, align 8, !dbg !3780
  %48 = getelementptr inbounds i8, i8* %47, i64 0, !dbg !3780
  %49 = load i8, i8* %48, align 1, !dbg !3780
  %50 = sext i8 %49 to i32, !dbg !3780
  %51 = icmp eq i32 %50, 0, !dbg !3784
  %52 = load i32, i32* @x.81
  %53 = load i32, i32* @y.82
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %51, label %60, label %77, !dbg !3785

60:                                               ; preds = %originalBBpart28
  %61 = load i32, i32* @x.81
  %62 = load i32, i32* @y.82
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %60, %originalBB10alteredBB
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.128, i64 0, i64 0), i8** %9, align 8, !dbg !3786
  %69 = load i32, i32* @x.81
  %70 = load i32, i32* @y.82
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %77, !dbg !3787

77:                                               ; preds = %originalBBpart212, %originalBBpart28
  %78 = load i32, i32* @x.81
  %79 = load i32, i32* @y.82
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %77, %originalBB14alteredBB
  %86 = load i8*, i8** %9, align 8, !dbg !3788
  %87 = load i32, i32* @x.81
  %88 = load i32, i32* @y.82
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  ret i8* %86, !dbg !3789

originalBBalteredBB:                              ; preds = %originalBB, %0
  %95 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %95, metadata !3790, metadata !DIExpression()), !dbg !3771
  %96 = call i8* @nl_langinfo(i32 14) #10, !dbg !3772
  store i8* %96, i8** %95, align 8, !dbg !3773
  %97 = load i8*, i8** %95, align 8, !dbg !3774
  %98 = icmp eq i8* %97, null, !dbg !3776
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.127, i64 0, i64 0), i8** %9, align 8, !dbg !3778
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %38
  %99 = load i8*, i8** %9, align 8, !dbg !3780
  %100 = getelementptr inbounds i8, i8* %99, i64 0, !dbg !3780
  %101 = load i8, i8* %100, align 1, !dbg !3780
  %102 = sext i8 %101 to i32, !dbg !3780
  %103 = icmp eq i32 %102, 0, !dbg !3784
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %60
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.128, i64 0, i64 0), i8** %9, align 8, !dbg !3786
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %77
  %104 = load i8*, i8** %9, align 8, !dbg !3788
  br label %originalBB14
}

; Function Attrs: nounwind
declare dso_local i8* @nl_langinfo(i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @setlocale_null_r(i32, i8* nonnull, i64) #4 !dbg !3793 {
  %4 = load i32, i32* @x.83
  %5 = load i32, i32* @y.84
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  store i32 %0, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !3797, metadata !DIExpression()), !dbg !3798
  store i8* %1, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !3799, metadata !DIExpression()), !dbg !3800
  store i64 %2, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !3801, metadata !DIExpression()), !dbg !3802
  %15 = load i32, i32* %12, align 4, !dbg !3803
  %16 = load i8*, i8** %13, align 8, !dbg !3804
  %17 = load i64, i64* %14, align 8, !dbg !3805
  %18 = call i32 @setlocale_null_unlocked(i32 %15, i8* %16, i64 %17), !dbg !3806
  %19 = load i32, i32* @x.83
  %20 = load i32, i32* @y.84
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i32 %18, !dbg !3807

originalBBalteredBB:                              ; preds = %originalBB, %3
  %27 = alloca i32, align 4
  %28 = alloca i8*, align 8
  %29 = alloca i64, align 8
  store i32 %0, i32* %27, align 4
  call void @llvm.dbg.declare(metadata i32* %27, metadata !3808, metadata !DIExpression()), !dbg !3798
  store i8* %1, i8** %28, align 8
  call void @llvm.dbg.declare(metadata i8** %28, metadata !3811, metadata !DIExpression()), !dbg !3800
  store i64 %2, i64* %29, align 8
  call void @llvm.dbg.declare(metadata i64* %29, metadata !3812, metadata !DIExpression()), !dbg !3802
  %30 = load i32, i32* %27, align 4, !dbg !3803
  %31 = load i8*, i8** %28, align 8, !dbg !3804
  %32 = load i64, i64* %29, align 8, !dbg !3805
  %33 = call i32 @setlocale_null_unlocked(i32 %30, i8* %31, i64 %32), !dbg !3806
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @setlocale_null_unlocked(i32, i8*, i64) #4 !dbg !3813 {
  %4 = load i32, i32* @x.85
  %5 = load i32, i32* @y.86
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i64, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i64, align 8
  store i32 %0, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !3814, metadata !DIExpression()), !dbg !3815
  store i8* %1, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !3816, metadata !DIExpression()), !dbg !3817
  store i64 %2, i64* %15, align 8
  %18 = mul i32 %0, -3
  %19 = add i32 %18, 4
  %20 = trunc i64 %2 to i32
  %21 = mul i32 %20, -2
  %22 = add i32 %21, 1
  %23 = mul i32 %19, %19
  %24 = mul i32 %22, %22
  %25 = add i32 %23, %24
  %26 = mul i32 %19, %22
  %27 = mul i32 %26, 2
  %28 = sub i32 %25, %27
  %29 = mul i32 %28, -3
  %30 = add i32 %29, -1
  %31 = icmp eq i32 %30, 2
  %32 = load i32, i32* @x.85
  %33 = load i32, i32* @y.86
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %31, label %40, label %41

40:                                               ; preds = %originalBBpart2
  ret i32 0

41:                                               ; preds = %originalBBpart2
  call void @llvm.dbg.declare(metadata i64* %15, metadata !3818, metadata !DIExpression()), !dbg !3819
  call void @llvm.dbg.declare(metadata i8** %16, metadata !3820, metadata !DIExpression()), !dbg !3821
  %42 = load i32, i32* %13, align 4, !dbg !3822
  %43 = call i8* @setlocale_null_androidfix(i32 %42), !dbg !3823
  store i8* %43, i8** %16, align 8, !dbg !3821
  %44 = load i8*, i8** %16, align 8, !dbg !3824
  %45 = icmp eq i8* %44, null, !dbg !3826
  br i1 %45, label %46, label %85, !dbg !3827

46:                                               ; preds = %41
  %47 = load i32, i32* @x.85
  %48 = load i32, i32* @y.86
  %49 = sub i32 %47, 1
  %50 = mul i32 %47, %49
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %52, %53
  br i1 %54, label %originalBB78, label %originalBB78alteredBB

originalBB78:                                     ; preds = %46, %originalBB78alteredBB
  %55 = load i64, i64* %15, align 8, !dbg !3828
  %56 = icmp ugt i64 %55, 0, !dbg !3831
  %57 = load i32, i32* @x.85
  %58 = load i32, i32* @y.86
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBBpart280, label %originalBB78alteredBB

originalBBpart280:                                ; preds = %originalBB78
  br i1 %56, label %65, label %68, !dbg !3832

65:                                               ; preds = %originalBBpart280
  %66 = load i8*, i8** %14, align 8, !dbg !3833
  %67 = getelementptr inbounds i8, i8* %66, i64 0, !dbg !3833
  store i8 0, i8* %67, align 1, !dbg !3834
  br label %68, !dbg !3833

68:                                               ; preds = %65, %originalBBpart280
  %69 = load i32, i32* @x.85
  %70 = load i32, i32* @y.86
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBB82, label %originalBB82alteredBB

originalBB82:                                     ; preds = %68, %originalBB82alteredBB
  store i32 22, i32* %12, align 4, !dbg !3835
  %77 = load i32, i32* @x.85
  %78 = load i32, i32* @y.86
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBBpart284, label %originalBB82alteredBB

originalBBpart284:                                ; preds = %originalBB82
  br label %173, !dbg !3835

85:                                               ; preds = %41
  call void @llvm.dbg.declare(metadata i64* %17, metadata !3836, metadata !DIExpression()), !dbg !3838
  %86 = load i32, i32* @x.85
  %87 = load i32, i32* @y.86
  %88 = sub i32 %86, 1
  %89 = mul i32 %86, %88
  %90 = urem i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %91, %92
  br i1 %93, label %originalBB86, label %originalBB86alteredBB

originalBB86:                                     ; preds = %85, %originalBB86alteredBB
  %94 = load i8*, i8** %16, align 8, !dbg !3839
  %95 = call i64 @strlen(i8* %94) #13, !dbg !3840
  store i64 %95, i64* %17, align 8, !dbg !3838
  %96 = load i64, i64* %17, align 8, !dbg !3841
  %97 = load i64, i64* %15, align 8, !dbg !3843
  %98 = icmp ult i64 %96, %97, !dbg !3844
  %99 = load i32, i32* @x.85
  %100 = load i32, i32* @y.86
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBBpart288, label %originalBB86alteredBB

originalBBpart288:                                ; preds = %originalBB86
  br i1 %98, label %107, label %112, !dbg !3845

107:                                              ; preds = %originalBBpart288
  %108 = load i8*, i8** %14, align 8, !dbg !3846
  %109 = load i8*, i8** %16, align 8, !dbg !3848
  %110 = load i64, i64* %17, align 8, !dbg !3849
  %111 = add i64 %110, 1, !dbg !3850
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %108, i8* align 1 %109, i64 %111, i1 false), !dbg !3851
  store i32 0, i32* %12, align 4, !dbg !3852
  br label %173, !dbg !3852

112:                                              ; preds = %originalBBpart288
  %113 = load i32, i32* @x.85
  %114 = load i32, i32* @y.86
  %115 = sub i32 %113, 1
  %116 = mul i32 %113, %115
  %117 = urem i32 %116, 2
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %118, %119
  br i1 %120, label %originalBB90, label %originalBB90alteredBB

originalBB90:                                     ; preds = %112, %originalBB90alteredBB
  %121 = load i64, i64* %15, align 8, !dbg !3853
  %122 = icmp ugt i64 %121, 0, !dbg !3856
  %123 = load i32, i32* @x.85
  %124 = load i32, i32* @y.86
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %originalBBpart292, label %originalBB90alteredBB

originalBBpart292:                                ; preds = %originalBB90
  br i1 %122, label %131, label %156, !dbg !3857

131:                                              ; preds = %originalBBpart292
  %132 = load i32, i32* @x.85
  %133 = load i32, i32* @y.86
  %134 = sub i32 %132, 1
  %135 = mul i32 %132, %134
  %136 = urem i32 %135, 2
  %137 = icmp eq i32 %136, 0
  %138 = icmp slt i32 %133, 10
  %139 = or i1 %137, %138
  br i1 %139, label %originalBB94, label %originalBB94alteredBB

originalBB94:                                     ; preds = %131, %originalBB94alteredBB
  %140 = load i8*, i8** %14, align 8, !dbg !3858
  %141 = load i8*, i8** %16, align 8, !dbg !3860
  %142 = load i64, i64* %15, align 8, !dbg !3861
  %143 = sub i64 %142, 1, !dbg !3862
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %140, i8* align 1 %141, i64 %143, i1 false), !dbg !3863
  %144 = load i8*, i8** %14, align 8, !dbg !3864
  %145 = load i64, i64* %15, align 8, !dbg !3865
  %146 = sub i64 %145, 1, !dbg !3866
  %147 = getelementptr inbounds i8, i8* %144, i64 %146, !dbg !3864
  store i8 0, i8* %147, align 1, !dbg !3867
  %148 = load i32, i32* @x.85
  %149 = load i32, i32* @y.86
  %150 = sub i32 %148, 1
  %151 = mul i32 %148, %150
  %152 = urem i32 %151, 2
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %153, %154
  br i1 %155, label %originalBBpart2113, label %originalBB94alteredBB

originalBBpart2113:                               ; preds = %originalBB94
  br label %156, !dbg !3868

156:                                              ; preds = %originalBBpart2113, %originalBBpart292
  %157 = load i32, i32* @x.85
  %158 = load i32, i32* @y.86
  %159 = sub i32 %157, 1
  %160 = mul i32 %157, %159
  %161 = urem i32 %160, 2
  %162 = icmp eq i32 %161, 0
  %163 = icmp slt i32 %158, 10
  %164 = or i1 %162, %163
  br i1 %164, label %originalBB115, label %originalBB115alteredBB

originalBB115:                                    ; preds = %156, %originalBB115alteredBB
  store i32 34, i32* %12, align 4, !dbg !3869
  %165 = load i32, i32* @x.85
  %166 = load i32, i32* @y.86
  %167 = sub i32 %165, 1
  %168 = mul i32 %165, %167
  %169 = urem i32 %168, 2
  %170 = icmp eq i32 %169, 0
  %171 = icmp slt i32 %166, 10
  %172 = or i1 %170, %171
  br i1 %172, label %originalBBpart2117, label %originalBB115alteredBB

originalBBpart2117:                               ; preds = %originalBB115
  br label %173, !dbg !3869

173:                                              ; preds = %originalBBpart2117, %107, %originalBBpart284
  %174 = load i32, i32* %12, align 4, !dbg !3870
  ret i32 %174, !dbg !3870

originalBBalteredBB:                              ; preds = %originalBB, %3
  %175 = alloca i32, align 4
  %176 = alloca i32, align 4
  %177 = alloca i8*, align 8
  %178 = alloca i64, align 8
  %179 = alloca i8*, align 8
  %180 = alloca i64, align 8
  store i32 %0, i32* %176, align 4
  call void @llvm.dbg.declare(metadata i32* %176, metadata !3871, metadata !DIExpression()), !dbg !3815
  store i8* %1, i8** %177, align 8
  call void @llvm.dbg.declare(metadata i8** %177, metadata !3874, metadata !DIExpression()), !dbg !3817
  store i64 %2, i64* %178, align 8
  %_ = sub i32 0, %0
  %gen = add i32 %_, -3
  %_1 = sub i32 %0, -3
  %gen2 = mul i32 %_1, -3
  %_3 = sub i32 %0, -3
  %gen4 = mul i32 %_3, -3
  %_5 = sub i32 0, %0
  %gen6 = add i32 %_5, -3
  %_7 = sub i32 0, %0
  %gen8 = add i32 %_7, -3
  %_9 = sub i32 %0, -3
  %gen10 = mul i32 %_9, -3
  %_11 = shl i32 %0, -3
  %_12 = sub i32 0, %0
  %gen13 = add i32 %_12, -3
  %181 = mul i32 %0, -3
  %_14 = shl i32 %181, 4
  %_15 = sub i32 0, %181
  %gen16 = add i32 %_15, 4
  %_17 = sub i32 0, %181
  %gen18 = add i32 %_17, 4
  %_19 = sub i32 0, %181
  %gen20 = add i32 %_19, 4
  %_21 = sub i32 %181, 4
  %gen22 = mul i32 %_21, 4
  %_23 = sub i32 0, %181
  %gen24 = add i32 %_23, 4
  %182 = add i32 %181, 4
  %183 = trunc i64 %2 to i32
  %_25 = shl i32 %183, -2
  %184 = mul i32 %183, -2
  %_26 = shl i32 %184, 1
  %_27 = sub i32 0, %184
  %gen28 = add i32 %_27, 1
  %_29 = sub i32 0, %184
  %gen30 = add i32 %_29, 1
  %_31 = sub i32 %184, 1
  %gen32 = mul i32 %_31, 1
  %_33 = sub i32 %184, 1
  %gen34 = mul i32 %_33, 1
  %185 = add i32 %184, 1
  %_35 = shl i32 %182, %182
  %_36 = sub i32 %182, %182
  %gen37 = mul i32 %_36, %182
  %_38 = sub i32 %182, %182
  %gen39 = mul i32 %_38, %182
  %_40 = sub i32 %182, %182
  %gen41 = mul i32 %_40, %182
  %186 = mul i32 %182, %182
  %_42 = shl i32 %185, %185
  %_43 = sub i32 %185, %185
  %gen44 = mul i32 %_43, %185
  %_45 = sub i32 %185, %185
  %gen46 = mul i32 %_45, %185
  %187 = mul i32 %185, %185
  %_47 = sub i32 %186, %187
  %gen48 = mul i32 %_47, %187
  %188 = add i32 %186, %187
  %_49 = shl i32 %182, %185
  %_50 = sub i32 %182, %185
  %gen51 = mul i32 %_50, %185
  %_52 = sub i32 %182, %185
  %gen53 = mul i32 %_52, %185
  %189 = mul i32 %182, %185
  %_54 = shl i32 %189, 2
  %_55 = shl i32 %189, 2
  %_56 = sub i32 0, %189
  %gen57 = add i32 %_56, 2
  %_58 = shl i32 %189, 2
  %190 = mul i32 %189, 2
  %_59 = sub i32 %188, %190
  %gen60 = mul i32 %_59, %190
  %_61 = sub i32 %188, %190
  %gen62 = mul i32 %_61, %190
  %_63 = sub i32 0, %188
  %gen64 = add i32 %_63, %190
  %_65 = shl i32 %188, %190
  %_66 = sub i32 0, %188
  %gen67 = add i32 %_66, %190
  %_68 = sub i32 0, %188
  %gen69 = add i32 %_68, %190
  %191 = sub i32 %188, %190
  %_70 = sub i32 %191, -3
  %gen71 = mul i32 %_70, -3
  %192 = mul i32 %191, -3
  %_72 = sub i32 %192, -1
  %gen73 = mul i32 %_72, -1
  %_74 = shl i32 %192, -1
  %_75 = shl i32 %192, -1
  %_76 = shl i32 %192, -1
  %_77 = shl i32 %192, -1
  %193 = add i32 %192, -1
  %194 = icmp eq i32 %193, 2
  br label %originalBB

originalBB78alteredBB:                            ; preds = %originalBB78, %46
  %195 = load i64, i64* %15, align 8, !dbg !3828
  %196 = icmp ugt i64 %195, 0, !dbg !3831
  br label %originalBB78

originalBB82alteredBB:                            ; preds = %originalBB82, %68
  store i32 22, i32* %12, align 4, !dbg !3835
  br label %originalBB82

originalBB86alteredBB:                            ; preds = %originalBB86, %85
  %197 = load i8*, i8** %16, align 8, !dbg !3839
  %198 = call i64 @strlen(i8* %197) #13, !dbg !3840
  store i64 %198, i64* %17, align 8, !dbg !3838
  %199 = load i64, i64* %17, align 8, !dbg !3841
  %200 = load i64, i64* %15, align 8, !dbg !3843
  %201 = icmp ult i64 %199, %200, !dbg !3844
  br label %originalBB86

originalBB90alteredBB:                            ; preds = %originalBB90, %112
  %202 = load i64, i64* %15, align 8, !dbg !3853
  %203 = icmp ugt i64 %202, 0, !dbg !3856
  br label %originalBB90

originalBB94alteredBB:                            ; preds = %originalBB94, %131
  %204 = load i8*, i8** %14, align 8, !dbg !3858
  %205 = load i8*, i8** %16, align 8, !dbg !3860
  %206 = load i64, i64* %15, align 8, !dbg !3861
  %_95 = sub i64 0, %206
  %gen96 = add i64 %_95, 1
  %_97 = sub i64 0, %206
  %gen98 = add i64 %_97, 1
  %_99 = sub i64 0, %206
  %gen100 = add i64 %_99, 1
  %_101 = sub i64 0, %206
  %gen102 = add i64 %_101, 1
  %_103 = shl i64 %206, 1
  %207 = sub i64 %206, 1, !dbg !3862
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %204, i8* align 1 %205, i64 %207, i1 false), !dbg !3863
  %208 = load i8*, i8** %14, align 8, !dbg !3864
  %209 = load i64, i64* %15, align 8, !dbg !3865
  %_104 = sub i64 0, %209
  %gen105 = add i64 %_104, 1
  %_106 = sub i64 %209, 1
  %gen107 = mul i64 %_106, 1
  %_108 = sub i64 0, %209
  %gen109 = add i64 %_108, 1
  %_110 = sub i64 0, %209
  %gen111 = add i64 %_110, 1
  %210 = sub i64 %209, 1, !dbg !3866
  %211 = getelementptr inbounds i8, i8* %208, i64 %210, !dbg !3864
  store i8 0, i8* %211, align 1, !dbg !3867
  br label %originalBB94

originalBB115alteredBB:                           ; preds = %originalBB115, %156
  store i32 34, i32* %12, align 4, !dbg !3869
  br label %originalBB115
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @setlocale_null_androidfix(i32) #4 !dbg !3875 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !3878, metadata !DIExpression()), !dbg !3879
  call void @llvm.dbg.declare(metadata i8** %3, metadata !3880, metadata !DIExpression()), !dbg !3881
  %4 = load i32, i32* %2, align 4, !dbg !3882
  %5 = call i8* @setlocale(i32 %4, i8* null) #10, !dbg !3883
  store i8* %5, i8** %3, align 8, !dbg !3881
  %6 = load i8*, i8** %3, align 8, !dbg !3884
  ret i8* %6, !dbg !3885
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fclose(%struct._IO_FILE* nonnull) #4 !dbg !3886 {
  %2 = load i32, i32* @x.89
  %3 = load i32, i32* @y.90
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca %struct._IO_FILE*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %11, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %11, metadata !3924, metadata !DIExpression()), !dbg !3925
  call void @llvm.dbg.declare(metadata i32* %12, metadata !3926, metadata !DIExpression()), !dbg !3927
  store i32 0, i32* %12, align 4, !dbg !3927
  call void @llvm.dbg.declare(metadata i32* %13, metadata !3928, metadata !DIExpression()), !dbg !3929
  call void @llvm.dbg.declare(metadata i32* %14, metadata !3930, metadata !DIExpression()), !dbg !3931
  store i32 0, i32* %14, align 4, !dbg !3931
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3932
  %16 = call i32 @fileno(%struct._IO_FILE* %15) #10, !dbg !3933
  store i32 %16, i32* %13, align 4, !dbg !3934
  %17 = add i32 %16, 1
  %18 = mul i32 %17, %17
  %19 = sub i32 %18, %17
  %20 = srem i32 %19, 2
  %21 = add i32 %20, -1
  %22 = load i32, i32* @x.89
  %23 = load i32, i32* @y.90
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %30

30:                                               ; preds = %originalBBpart2
  %31 = load i32, i32* @x.89
  %32 = load i32, i32* @y.90
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBB24, label %originalBB24alteredBB

originalBB24:                                     ; preds = %30, %originalBB24alteredBB
  %collatzVar = alloca i32
  %39 = load i32, i32* @x.89
  %40 = load i32, i32* @y.90
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart226, label %originalBB24alteredBB

originalBBpart226:                                ; preds = %originalBB24
  br label %47

47:                                               ; preds = %originalBBpart226
  %48 = load i32, i32* @inVal0
  %49 = icmp sgt i32 %48, 1
  br i1 %49, label %67, label %50

50:                                               ; preds = %47
  %51 = load i32, i32* @x.89
  %52 = load i32, i32* @y.90
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBB28, label %originalBB28alteredBB

originalBB28:                                     ; preds = %50, %originalBB28alteredBB
  store i32 94, i32* %collatzVar
  %59 = load i32, i32* @x.89
  %60 = load i32, i32* @y.90
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %originalBBpart230, label %originalBB28alteredBB

originalBBpart230:                                ; preds = %originalBB28
  br label %67

67:                                               ; preds = %originalBBpart230, %47
  %68 = load i8**, i8*** @inVal1
  %69 = getelementptr inbounds i8*, i8** %68, i64 1
  %70 = load i8*, i8** %69
  %controle = call i32 @controle(i8* %70, i32 -1)
  store i32 %controle, i32* %collatzVar
  br label %71

71:                                               ; preds = %originalBBpart283, %originalBBpart275, %67
  %72 = load i32, i32* @x.89
  %73 = load i32, i32* @y.90
  %74 = sub i32 %72, 1
  %75 = mul i32 %72, %74
  %76 = urem i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %77, %78
  br i1 %79, label %originalBB32, label %originalBB32alteredBB

originalBB32:                                     ; preds = %71, %originalBB32alteredBB
  %80 = load i32, i32* %collatzVar
  %81 = icmp sgt i32 %80, 1
  %82 = load i32, i32* @x.89
  %83 = load i32, i32* @y.90
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBBpart234, label %originalBB32alteredBB

originalBBpart234:                                ; preds = %originalBB32
  br i1 %81, label %90, label %173

90:                                               ; preds = %originalBBpart234
  %91 = load i32, i32* %collatzVar
  %92 = srem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %94, label %113

94:                                               ; preds = %90
  %95 = load i32, i32* @x.89
  %96 = load i32, i32* @y.90
  %97 = sub i32 %95, 1
  %98 = mul i32 %95, %97
  %99 = urem i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %96, 10
  %102 = or i1 %100, %101
  br i1 %102, label %originalBB36, label %originalBB36alteredBB

originalBB36:                                     ; preds = %94, %originalBB36alteredBB
  %103 = load i32, i32* %collatzVar
  %104 = sdiv i32 %103, 2
  store i32 %104, i32* %collatzVar
  %105 = load i32, i32* @x.89
  %106 = load i32, i32* @y.90
  %107 = sub i32 %105, 1
  %108 = mul i32 %105, %107
  %109 = urem i32 %108, 2
  %110 = icmp eq i32 %109, 0
  %111 = icmp slt i32 %106, 10
  %112 = or i1 %110, %111
  br i1 %112, label %originalBBpart241, label %originalBB36alteredBB

originalBBpart241:                                ; preds = %originalBB36
  br label %133

113:                                              ; preds = %90
  %114 = load i32, i32* @x.89
  %115 = load i32, i32* @y.90
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBB43, label %originalBB43alteredBB

originalBB43:                                     ; preds = %113, %originalBB43alteredBB
  %122 = load i32, i32* %collatzVar
  %123 = mul i32 %122, 3
  %124 = add i32 %123, 1
  store i32 %124, i32* %collatzVar
  %125 = load i32, i32* @x.89
  %126 = load i32, i32* @y.90
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBBpart261, label %originalBB43alteredBB

originalBBpart261:                                ; preds = %originalBB43
  br label %133

133:                                              ; preds = %originalBBpart261, %originalBBpart241
  %134 = load i32, i32* @x.89
  %135 = load i32, i32* @y.90
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBB63, label %originalBB63alteredBB

originalBB63:                                     ; preds = %133, %originalBB63alteredBB
  %142 = load i32, i32* %collatzVar
  %143 = sub i32 %21, %142
  %144 = icmp sgt i32 %143, -3
  %145 = load i32, i32* @x.89
  %146 = load i32, i32* @y.90
  %147 = sub i32 %145, 1
  %148 = mul i32 %145, %147
  %149 = urem i32 %148, 2
  %150 = icmp eq i32 %149, 0
  %151 = icmp slt i32 %146, 10
  %152 = or i1 %150, %151
  br i1 %152, label %originalBBpart275, label %originalBB63alteredBB

originalBBpart275:                                ; preds = %originalBB63
  br i1 %144, label %153, label %71

153:                                              ; preds = %originalBBpart275
  %154 = load i32, i32* @x.89
  %155 = load i32, i32* @y.90
  %156 = sub i32 %154, 1
  %157 = mul i32 %154, %156
  %158 = urem i32 %157, 2
  %159 = icmp eq i32 %158, 0
  %160 = icmp slt i32 %155, 10
  %161 = or i1 %159, %160
  br i1 %161, label %originalBB77, label %originalBB77alteredBB

originalBB77:                                     ; preds = %153, %originalBB77alteredBB
  %162 = load i32, i32* %collatzVar
  %163 = add i32 %21, %162
  %164 = icmp slt i32 %163, 1
  %165 = load i32, i32* @x.89
  %166 = load i32, i32* @y.90
  %167 = sub i32 %165, 1
  %168 = mul i32 %165, %167
  %169 = urem i32 %168, 2
  %170 = icmp eq i32 %169, 0
  %171 = icmp slt i32 %166, 10
  %172 = or i1 %170, %171
  br i1 %172, label %originalBBpart283, label %originalBB77alteredBB

originalBBpart283:                                ; preds = %originalBB77
  br i1 %164, label %190, label %71

173:                                              ; preds = %originalBBpart234
  %174 = load i32, i32* @x.89
  %175 = load i32, i32* @y.90
  %176 = sub i32 %174, 1
  %177 = mul i32 %174, %176
  %178 = urem i32 %177, 2
  %179 = icmp eq i32 %178, 0
  %180 = icmp slt i32 %175, 10
  %181 = or i1 %179, %180
  br i1 %181, label %originalBB85, label %originalBB85alteredBB

originalBB85:                                     ; preds = %173, %originalBB85alteredBB
  %182 = load i32, i32* @x.89
  %183 = load i32, i32* @y.90
  %184 = sub i32 %182, 1
  %185 = mul i32 %182, %184
  %186 = urem i32 %185, 2
  %187 = icmp eq i32 %186, 0
  %188 = icmp slt i32 %183, 10
  %189 = or i1 %187, %188
  br i1 %189, label %originalBBpart287, label %originalBB85alteredBB

originalBBpart287:                                ; preds = %originalBB85
  ret i32 0

190:                                              ; preds = %originalBBpart283
  %191 = load i32, i32* @x.89
  %192 = load i32, i32* @y.90
  %193 = sub i32 %191, 1
  %194 = mul i32 %191, %193
  %195 = urem i32 %194, 2
  %196 = icmp eq i32 %195, 0
  %197 = icmp slt i32 %192, 10
  %198 = or i1 %196, %197
  br i1 %198, label %originalBB89, label %originalBB89alteredBB

originalBB89:                                     ; preds = %190, %originalBB89alteredBB
  %199 = load i32, i32* %13, align 4, !dbg !3935
  %200 = icmp slt i32 %199, 0, !dbg !3937
  %201 = load i32, i32* @x.89
  %202 = load i32, i32* @y.90
  %203 = sub i32 %201, 1
  %204 = mul i32 %201, %203
  %205 = urem i32 %204, 2
  %206 = icmp eq i32 %205, 0
  %207 = icmp slt i32 %202, 10
  %208 = or i1 %206, %207
  br i1 %208, label %originalBBpart291, label %originalBB89alteredBB

originalBBpart291:                                ; preds = %originalBB89
  br i1 %200, label %209, label %212, !dbg !3938

209:                                              ; preds = %originalBBpart291
  %210 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3939
  %211 = call i32 @fclose(%struct._IO_FILE* %210), !dbg !3940
  store i32 %211, i32* %10, align 4, !dbg !3941
  br label %334, !dbg !3941

212:                                              ; preds = %originalBBpart291
  %213 = load i32, i32* @x.89
  %214 = load i32, i32* @y.90
  %215 = sub i32 %213, 1
  %216 = mul i32 %213, %215
  %217 = urem i32 %216, 2
  %218 = icmp eq i32 %217, 0
  %219 = icmp slt i32 %214, 10
  %220 = or i1 %218, %219
  br i1 %220, label %originalBB93, label %originalBB93alteredBB

originalBB93:                                     ; preds = %212, %originalBB93alteredBB
  %221 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3942
  %222 = call i32 @__freading(%struct._IO_FILE* %221) #10, !dbg !3942
  %223 = icmp ne i32 %222, 0, !dbg !3942
  %224 = load i32, i32* @x.89
  %225 = load i32, i32* @y.90
  %226 = sub i32 %224, 1
  %227 = mul i32 %224, %226
  %228 = urem i32 %227, 2
  %229 = icmp eq i32 %228, 0
  %230 = icmp slt i32 %225, 10
  %231 = or i1 %229, %230
  br i1 %231, label %originalBBpart295, label %originalBB93alteredBB

originalBBpart295:                                ; preds = %originalBB93
  br i1 %223, label %232, label %253, !dbg !3944

232:                                              ; preds = %originalBBpart295
  %233 = load i32, i32* @x.89
  %234 = load i32, i32* @y.90
  %235 = sub i32 %233, 1
  %236 = mul i32 %233, %235
  %237 = urem i32 %236, 2
  %238 = icmp eq i32 %237, 0
  %239 = icmp slt i32 %234, 10
  %240 = or i1 %238, %239
  br i1 %240, label %originalBB97, label %originalBB97alteredBB

originalBB97:                                     ; preds = %232, %originalBB97alteredBB
  %241 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3945
  %242 = call i32 @fileno(%struct._IO_FILE* %241) #10, !dbg !3946
  %243 = call i64 @lseek(i32 %242, i64 0, i32 1) #10, !dbg !3947
  %244 = icmp ne i64 %243, -1, !dbg !3948
  %245 = load i32, i32* @x.89
  %246 = load i32, i32* @y.90
  %247 = sub i32 %245, 1
  %248 = mul i32 %245, %247
  %249 = urem i32 %248, 2
  %250 = icmp eq i32 %249, 0
  %251 = icmp slt i32 %246, 10
  %252 = or i1 %250, %251
  br i1 %252, label %originalBBpart299, label %originalBB97alteredBB

originalBBpart299:                                ; preds = %originalBB97
  br i1 %244, label %253, label %292, !dbg !3949

253:                                              ; preds = %originalBBpart299, %originalBBpart295
  %254 = load i32, i32* @x.89
  %255 = load i32, i32* @y.90
  %256 = sub i32 %254, 1
  %257 = mul i32 %254, %256
  %258 = urem i32 %257, 2
  %259 = icmp eq i32 %258, 0
  %260 = icmp slt i32 %255, 10
  %261 = or i1 %259, %260
  br i1 %261, label %originalBB101, label %originalBB101alteredBB

originalBB101:                                    ; preds = %253, %originalBB101alteredBB
  %262 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3950
  %263 = call i32 @rpl_fflush(%struct._IO_FILE* %262), !dbg !3951
  %264 = icmp ne i32 %263, 0, !dbg !3951
  %265 = load i32, i32* @x.89
  %266 = load i32, i32* @y.90
  %267 = sub i32 %265, 1
  %268 = mul i32 %265, %267
  %269 = urem i32 %268, 2
  %270 = icmp eq i32 %269, 0
  %271 = icmp slt i32 %266, 10
  %272 = or i1 %270, %271
  br i1 %272, label %originalBBpart2103, label %originalBB101alteredBB

originalBBpart2103:                               ; preds = %originalBB101
  br i1 %264, label %273, label %292, !dbg !3952

273:                                              ; preds = %originalBBpart2103
  %274 = load i32, i32* @x.89
  %275 = load i32, i32* @y.90
  %276 = sub i32 %274, 1
  %277 = mul i32 %274, %276
  %278 = urem i32 %277, 2
  %279 = icmp eq i32 %278, 0
  %280 = icmp slt i32 %275, 10
  %281 = or i1 %279, %280
  br i1 %281, label %originalBB105, label %originalBB105alteredBB

originalBB105:                                    ; preds = %273, %originalBB105alteredBB
  %282 = call i32* @__errno_location() #15, !dbg !3953
  %283 = load i32, i32* %282, align 4, !dbg !3953
  store i32 %283, i32* %12, align 4, !dbg !3954
  %284 = load i32, i32* @x.89
  %285 = load i32, i32* @y.90
  %286 = sub i32 %284, 1
  %287 = mul i32 %284, %286
  %288 = urem i32 %287, 2
  %289 = icmp eq i32 %288, 0
  %290 = icmp slt i32 %285, 10
  %291 = or i1 %289, %290
  br i1 %291, label %originalBBpart2107, label %originalBB105alteredBB

originalBBpart2107:                               ; preds = %originalBB105
  br label %292, !dbg !3955

292:                                              ; preds = %originalBBpart2107, %originalBBpart2103, %originalBBpart299
  %293 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3956
  %294 = call i32 @fclose(%struct._IO_FILE* %293), !dbg !3957
  store i32 %294, i32* %14, align 4, !dbg !3958
  %295 = load i32, i32* %12, align 4, !dbg !3959
  %296 = icmp ne i32 %295, 0, !dbg !3961
  br i1 %296, label %297, label %316, !dbg !3962

297:                                              ; preds = %292
  %298 = load i32, i32* @x.89
  %299 = load i32, i32* @y.90
  %300 = sub i32 %298, 1
  %301 = mul i32 %298, %300
  %302 = urem i32 %301, 2
  %303 = icmp eq i32 %302, 0
  %304 = icmp slt i32 %299, 10
  %305 = or i1 %303, %304
  br i1 %305, label %originalBB109, label %originalBB109alteredBB

originalBB109:                                    ; preds = %297, %originalBB109alteredBB
  %306 = load i32, i32* %12, align 4, !dbg !3963
  %307 = call i32* @__errno_location() #15, !dbg !3965
  store i32 %306, i32* %307, align 4, !dbg !3966
  store i32 -1, i32* %14, align 4, !dbg !3967
  %308 = load i32, i32* @x.89
  %309 = load i32, i32* @y.90
  %310 = sub i32 %308, 1
  %311 = mul i32 %308, %310
  %312 = urem i32 %311, 2
  %313 = icmp eq i32 %312, 0
  %314 = icmp slt i32 %309, 10
  %315 = or i1 %313, %314
  br i1 %315, label %originalBBpart2111, label %originalBB109alteredBB

originalBBpart2111:                               ; preds = %originalBB109
  br label %316, !dbg !3968

316:                                              ; preds = %originalBBpart2111, %292
  %317 = load i32, i32* @x.89
  %318 = load i32, i32* @y.90
  %319 = sub i32 %317, 1
  %320 = mul i32 %317, %319
  %321 = urem i32 %320, 2
  %322 = icmp eq i32 %321, 0
  %323 = icmp slt i32 %318, 10
  %324 = or i1 %322, %323
  br i1 %324, label %originalBB113, label %originalBB113alteredBB

originalBB113:                                    ; preds = %316, %originalBB113alteredBB
  %325 = load i32, i32* %14, align 4, !dbg !3969
  store i32 %325, i32* %10, align 4, !dbg !3970
  %326 = load i32, i32* @x.89
  %327 = load i32, i32* @y.90
  %328 = sub i32 %326, 1
  %329 = mul i32 %326, %328
  %330 = urem i32 %329, 2
  %331 = icmp eq i32 %330, 0
  %332 = icmp slt i32 %327, 10
  %333 = or i1 %331, %332
  br i1 %333, label %originalBBpart2115, label %originalBB113alteredBB

originalBBpart2115:                               ; preds = %originalBB113
  br label %334, !dbg !3970

334:                                              ; preds = %originalBBpart2115, %209
  %335 = load i32, i32* @x.89
  %336 = load i32, i32* @y.90
  %337 = sub i32 %335, 1
  %338 = mul i32 %335, %337
  %339 = urem i32 %338, 2
  %340 = icmp eq i32 %339, 0
  %341 = icmp slt i32 %336, 10
  %342 = or i1 %340, %341
  br i1 %342, label %originalBB117, label %originalBB117alteredBB

originalBB117:                                    ; preds = %334, %originalBB117alteredBB
  %343 = load i32, i32* %10, align 4, !dbg !3971
  %344 = load i32, i32* @x.89
  %345 = load i32, i32* @y.90
  %346 = sub i32 %344, 1
  %347 = mul i32 %344, %346
  %348 = urem i32 %347, 2
  %349 = icmp eq i32 %348, 0
  %350 = icmp slt i32 %345, 10
  %351 = or i1 %349, %350
  br i1 %351, label %originalBBpart2119, label %originalBB117alteredBB

originalBBpart2119:                               ; preds = %originalBB117
  ret i32 %343, !dbg !3971

originalBBalteredBB:                              ; preds = %originalBB, %1
  %352 = alloca i32, align 4
  %353 = alloca %struct._IO_FILE*, align 8
  %354 = alloca i32, align 4
  %355 = alloca i32, align 4
  %356 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %353, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %353, metadata !3972, metadata !DIExpression()), !dbg !3925
  call void @llvm.dbg.declare(metadata i32* %354, metadata !4011, metadata !DIExpression()), !dbg !3927
  store i32 0, i32* %354, align 4, !dbg !3927
  call void @llvm.dbg.declare(metadata i32* %355, metadata !4012, metadata !DIExpression()), !dbg !3929
  call void @llvm.dbg.declare(metadata i32* %356, metadata !4013, metadata !DIExpression()), !dbg !3931
  store i32 0, i32* %356, align 4, !dbg !3931
  %357 = load %struct._IO_FILE*, %struct._IO_FILE** %353, align 8, !dbg !3932
  %358 = call i32 @fileno(%struct._IO_FILE* %357) #10, !dbg !3933
  store i32 %358, i32* %355, align 4, !dbg !3934
  %359 = add i32 %358, 1
  %_ = sub i32 %359, %359
  %gen = mul i32 %_, %359
  %_1 = sub i32 0, %359
  %gen2 = add i32 %_1, %359
  %_3 = sub i32 0, %359
  %gen4 = add i32 %_3, %359
  %_5 = sub i32 0, %359
  %gen6 = add i32 %_5, %359
  %_7 = sub i32 0, %359
  %gen8 = add i32 %_7, %359
  %360 = mul i32 %359, %359
  %_9 = sub i32 0, %360
  %gen10 = add i32 %_9, %359
  %_11 = shl i32 %360, %359
  %_12 = sub i32 0, %360
  %gen13 = add i32 %_12, %359
  %_14 = shl i32 %360, %359
  %361 = sub i32 %360, %359
  %_15 = sub i32 %361, 2
  %gen16 = mul i32 %_15, 2
  %_17 = shl i32 %361, 2
  %_18 = sub i32 %361, 2
  %gen19 = mul i32 %_18, 2
  %_20 = sub i32 %361, 2
  %gen21 = mul i32 %_20, 2
  %362 = srem i32 %361, 2
  %_22 = sub i32 0, %362
  %gen23 = add i32 %_22, -1
  %363 = add i32 %362, -1
  br label %originalBB

originalBB24alteredBB:                            ; preds = %originalBB24, %30
  %collatzVaralteredBB = alloca i32
  br label %originalBB24

originalBB28alteredBB:                            ; preds = %originalBB28, %50
  store i32 94, i32* %collatzVar
  br label %originalBB28

originalBB32alteredBB:                            ; preds = %originalBB32, %71
  %364 = load i32, i32* %collatzVar
  %365 = icmp sgt i32 %364, 1
  br label %originalBB32

originalBB36alteredBB:                            ; preds = %originalBB36, %94
  %366 = load i32, i32* %collatzVar
  %_37 = sub i32 0, %366
  %gen38 = add i32 %_37, 2
  %_39 = shl i32 %366, 2
  %367 = sdiv i32 %366, 2
  store i32 %367, i32* %collatzVar
  br label %originalBB36

originalBB43alteredBB:                            ; preds = %originalBB43, %113
  %368 = load i32, i32* %collatzVar
  %_44 = sub i32 %368, 3
  %gen45 = mul i32 %_44, 3
  %_46 = shl i32 %368, 3
  %_47 = sub i32 0, %368
  %gen48 = add i32 %_47, 3
  %_49 = shl i32 %368, 3
  %_50 = sub i32 0, %368
  %gen51 = add i32 %_50, 3
  %_52 = shl i32 %368, 3
  %_53 = shl i32 %368, 3
  %_54 = sub i32 %368, 3
  %gen55 = mul i32 %_54, 3
  %_56 = sub i32 %368, 3
  %gen57 = mul i32 %_56, 3
  %369 = mul i32 %368, 3
  %_58 = sub i32 0, %369
  %gen59 = add i32 %_58, 1
  %370 = add i32 %369, 1
  store i32 %370, i32* %collatzVar
  br label %originalBB43

originalBB63alteredBB:                            ; preds = %originalBB63, %133
  %371 = load i32, i32* %collatzVar
  %_64 = sub i32 0, %21
  %gen65 = add i32 %_64, %371
  %_66 = shl i32 %21, %371
  %_67 = sub i32 %21, %371
  %gen68 = mul i32 %_67, %371
  %_69 = shl i32 %21, %371
  %_70 = sub i32 0, %21
  %gen71 = add i32 %_70, %371
  %_72 = sub i32 0, %21
  %gen73 = add i32 %_72, %371
  %372 = sub i32 %21, %371
  %373 = icmp sgt i32 %372, -3
  br label %originalBB63

originalBB77alteredBB:                            ; preds = %originalBB77, %153
  %374 = load i32, i32* %collatzVar
  %_78 = sub i32 0, %21
  %gen79 = add i32 %_78, %374
  %_80 = sub i32 %21, %374
  %gen81 = mul i32 %_80, %374
  %375 = add i32 %21, %374
  %376 = icmp slt i32 %375, 1
  br label %originalBB77

originalBB85alteredBB:                            ; preds = %originalBB85, %173
  br label %originalBB85

originalBB89alteredBB:                            ; preds = %originalBB89, %190
  %377 = load i32, i32* %13, align 4, !dbg !3935
  %378 = icmp slt i32 %377, 0, !dbg !3937
  br label %originalBB89

originalBB93alteredBB:                            ; preds = %originalBB93, %212
  %379 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3942
  %380 = call i32 @__freading(%struct._IO_FILE* %379) #10, !dbg !3942
  %381 = icmp ne i32 %380, 0, !dbg !3942
  br label %originalBB93

originalBB97alteredBB:                            ; preds = %originalBB97, %232
  %382 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3945
  %383 = call i32 @fileno(%struct._IO_FILE* %382) #10, !dbg !3946
  %384 = call i64 @lseek(i32 %383, i64 0, i32 1) #10, !dbg !3947
  %385 = icmp ne i64 %384, -1, !dbg !3948
  br label %originalBB97

originalBB101alteredBB:                           ; preds = %originalBB101, %253
  %386 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3950
  %387 = call i32 @rpl_fflush(%struct._IO_FILE* %386), !dbg !3951
  %388 = icmp ne i32 %387, 0, !dbg !3951
  br label %originalBB101

originalBB105alteredBB:                           ; preds = %originalBB105, %273
  %389 = call i32* @__errno_location() #15, !dbg !3953
  %390 = load i32, i32* %389, align 4, !dbg !3953
  store i32 %390, i32* %12, align 4, !dbg !3954
  br label %originalBB105

originalBB109alteredBB:                           ; preds = %originalBB109, %297
  %391 = load i32, i32* %12, align 4, !dbg !3963
  %392 = call i32* @__errno_location() #15, !dbg !3965
  store i32 %391, i32* %392, align 4, !dbg !3966
  store i32 -1, i32* %14, align 4, !dbg !3967
  br label %originalBB109

originalBB113alteredBB:                           ; preds = %originalBB113, %316
  %393 = load i32, i32* %14, align 4, !dbg !3969
  store i32 %393, i32* %10, align 4, !dbg !3970
  br label %originalBB113

originalBB117alteredBB:                           ; preds = %originalBB117, %334
  %394 = load i32, i32* %10, align 4, !dbg !3971
  br label %originalBB117
}

; Function Attrs: nounwind
declare dso_local i32 @fileno(%struct._IO_FILE*) #2

declare dso_local i32 @fclose(%struct._IO_FILE*) #3

; Function Attrs: nounwind
declare dso_local i32 @__freading(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare dso_local i64 @lseek(i32, i64, i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fflush(%struct._IO_FILE*) #4 !dbg !4014 {
  %2 = load i32, i32* @x.91
  %3 = load i32, i32* @y.92
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %11, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %11, metadata !4052, metadata !DIExpression()), !dbg !4053
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4054
  %13 = icmp eq %struct._IO_FILE* %12, null, !dbg !4056
  %14 = load i32, i32* @x.91
  %15 = load i32, i32* @y.92
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %13, label %26, label %22, !dbg !4057

22:                                               ; preds = %originalBBpart2
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4058
  %24 = call i32 @__freading(%struct._IO_FILE* %23) #10, !dbg !4058
  %25 = icmp ne i32 %24, 0, !dbg !4058
  br i1 %25, label %29, label %26, !dbg !4059

26:                                               ; preds = %22, %originalBBpart2
  %27 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4060
  %28 = call i32 @fflush(%struct._IO_FILE* %27), !dbg !4061
  store i32 %28, i32* %10, align 4, !dbg !4062
  br label %49, !dbg !4062

29:                                               ; preds = %22
  %30 = load i32, i32* @x.91
  %31 = load i32, i32* @y.92
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %29, %originalBB1alteredBB
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4063
  call void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE* %38), !dbg !4064
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4065
  %40 = call i32 @fflush(%struct._IO_FILE* %39), !dbg !4066
  store i32 %40, i32* %10, align 4, !dbg !4067
  %41 = load i32, i32* @x.91
  %42 = load i32, i32* @y.92
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %49, !dbg !4067

49:                                               ; preds = %originalBBpart24, %26
  %50 = load i32, i32* %10, align 4, !dbg !4068
  ret i32 %50, !dbg !4068

originalBBalteredBB:                              ; preds = %originalBB, %1
  %51 = alloca i32, align 4
  %52 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %52, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %52, metadata !4069, metadata !DIExpression()), !dbg !4053
  %53 = load %struct._IO_FILE*, %struct._IO_FILE** %52, align 8, !dbg !4054
  %54 = icmp eq %struct._IO_FILE* %53, null, !dbg !4056
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %29
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4063
  call void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE* %55), !dbg !4064
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4065
  %57 = call i32 @fflush(%struct._IO_FILE* %56), !dbg !4066
  store i32 %57, i32* %10, align 4, !dbg !4067
  br label %originalBB1
}

declare dso_local i32 @fflush(%struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE*) #4 !dbg !4108 {
  %2 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %2, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %2, metadata !4111, metadata !DIExpression()), !dbg !4112
  %3 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 8, !dbg !4113
  %4 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %3, i32 0, i32 0, !dbg !4115
  %5 = load i32, i32* %4, align 8, !dbg !4115
  %6 = and i32 %5, 256, !dbg !4116
  %7 = icmp ne i32 %6, 0, !dbg !4116
  br i1 %7, label %8, label %27, !dbg !4117

8:                                                ; preds = %1
  %9 = load i32, i32* @x.93
  %10 = load i32, i32* @y.94
  %11 = sub i32 %9, 1
  %12 = mul i32 %9, %11
  %13 = urem i32 %12, 2
  %14 = icmp eq i32 %13, 0
  %15 = icmp slt i32 %10, 10
  %16 = or i1 %14, %15
  br i1 %16, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %8, %originalBBalteredBB
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 8, !dbg !4118
  %18 = call i32 @rpl_fseeko(%struct._IO_FILE* %17, i64 0, i32 1), !dbg !4119
  %19 = load i32, i32* @x.93
  %20 = load i32, i32* @y.94
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %27, !dbg !4119

27:                                               ; preds = %originalBBpart2, %1
  %28 = load i32, i32* @x.93
  %29 = load i32, i32* @y.94
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %27, %originalBB1alteredBB
  %36 = load i32, i32* @x.93
  %37 = load i32, i32* @y.94
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  ret void, !dbg !4120

originalBBalteredBB:                              ; preds = %originalBB, %8
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** %2, align 8, !dbg !4118
  %45 = call i32 @rpl_fseeko(%struct._IO_FILE* %44, i64 0, i32 1), !dbg !4119
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %27
  br label %originalBB1
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fseeko(%struct._IO_FILE* nonnull, i64, i32) #4 !dbg !4121 {
  %4 = load i32, i32* @x.95
  %5 = load i32, i32* @y.96
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca %struct._IO_FILE*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i32, align 4
  %16 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %13, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %13, metadata !4160, metadata !DIExpression()), !dbg !4161
  store i64 %1, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !4162, metadata !DIExpression()), !dbg !4163
  store i32 %2, i32* %15, align 4
  call void @llvm.dbg.declare(metadata i32* %15, metadata !4164, metadata !DIExpression()), !dbg !4165
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4166
  %18 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %17, i32 0, i32 2, !dbg !4168
  %19 = load i8*, i8** %18, align 8, !dbg !4168
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4169
  %21 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %20, i32 0, i32 1, !dbg !4170
  %22 = load i8*, i8** %21, align 8, !dbg !4170
  %23 = icmp eq i8* %19, %22, !dbg !4171
  %24 = load i32, i32* @x.95
  %25 = load i32, i32* @y.96
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %23, label %32, label %174, !dbg !4172

32:                                               ; preds = %originalBBpart2
  %33 = load i32, i32* @x.95
  %34 = load i32, i32* @y.96
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %32, %originalBB1alteredBB
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4173
  %42 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %41, i32 0, i32 5, !dbg !4174
  %43 = load i8*, i8** %42, align 8, !dbg !4174
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4175
  %45 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %44, i32 0, i32 4, !dbg !4176
  %46 = load i8*, i8** %45, align 8, !dbg !4176
  %47 = icmp eq i8* %43, %46, !dbg !4177
  %48 = load i32, i32* @x.95
  %49 = load i32, i32* @y.96
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %47, label %56, label %174, !dbg !4178

56:                                               ; preds = %originalBBpart24
  %57 = load i32, i32* @x.95
  %58 = load i32, i32* @y.96
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %56, %originalBB6alteredBB
  %65 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4179
  %66 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %65, i32 0, i32 9, !dbg !4180
  %67 = load i8*, i8** %66, align 8, !dbg !4180
  %68 = icmp eq i8* %67, null, !dbg !4181
  %69 = load i32, i32* @x.95
  %70 = load i32, i32* @y.96
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %68, label %77, label %174, !dbg !4182

77:                                               ; preds = %originalBBpart28
  call void @llvm.dbg.declare(metadata i64* %16, metadata !4183, metadata !DIExpression()), !dbg !4185
  %78 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4186
  %79 = call i32 @fileno(%struct._IO_FILE* %78) #10, !dbg !4187
  %80 = load i64, i64* %14, align 8, !dbg !4188
  %81 = load i32, i32* %15, align 4, !dbg !4189
  %82 = call i64 @lseek(i32 %79, i64 %80, i32 %81) #10, !dbg !4190
  store i64 %82, i64* %16, align 8, !dbg !4185
  %83 = load i64, i64* %16, align 8, !dbg !4191
  %84 = trunc i64 %83 to i32
  %85 = mul i32 %84, -3
  %86 = add i32 %85, -4
  %87 = trunc i64 %80 to i32
  %88 = mul i32 %87, 2
  %89 = add i32 %88, -5
  %90 = mul i32 %86, %86
  %91 = mul i32 %90, 7
  %92 = sub i32 %91, 1
  %93 = mul i32 %89, %89
  %94 = sub i32 %92, %93
  %95 = mul i32 %94, -2
  %96 = add i32 %95, -1
  %97 = icmp ne i32 %96, -1
  br i1 %97, label %115, label %98

98:                                               ; preds = %77
  %99 = load i32, i32* @x.95
  %100 = load i32, i32* @y.96
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %98, %originalBB10alteredBB
  %107 = load i32, i32* @x.95
  %108 = load i32, i32* @y.96
  %109 = sub i32 %107, 1
  %110 = mul i32 %107, %109
  %111 = urem i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %108, 10
  %114 = or i1 %112, %113
  br i1 %114, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  ret i32 0

115:                                              ; preds = %77
  %116 = load i32, i32* @x.95
  %117 = load i32, i32* @y.96
  %118 = sub i32 %116, 1
  %119 = mul i32 %116, %118
  %120 = urem i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %117, 10
  %123 = or i1 %121, %122
  br i1 %123, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %115, %originalBB14alteredBB
  %124 = icmp eq i64 %83, -1, !dbg !4193
  %125 = load i32, i32* @x.95
  %126 = load i32, i32* @y.96
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %124, label %133, label %150, !dbg !4194

133:                                              ; preds = %originalBBpart216
  %134 = load i32, i32* @x.95
  %135 = load i32, i32* @y.96
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %133, %originalBB18alteredBB
  store i32 -1, i32* %12, align 4, !dbg !4195
  %142 = load i32, i32* @x.95
  %143 = load i32, i32* @y.96
  %144 = sub i32 %142, 1
  %145 = mul i32 %142, %144
  %146 = urem i32 %145, 2
  %147 = icmp eq i32 %146, 0
  %148 = icmp slt i32 %143, 10
  %149 = or i1 %147, %148
  br i1 %149, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %195, !dbg !4195

150:                                              ; preds = %originalBBpart216
  %151 = load i32, i32* @x.95
  %152 = load i32, i32* @y.96
  %153 = sub i32 %151, 1
  %154 = mul i32 %151, %153
  %155 = urem i32 %154, 2
  %156 = icmp eq i32 %155, 0
  %157 = icmp slt i32 %152, 10
  %158 = or i1 %156, %157
  br i1 %158, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %150, %originalBB22alteredBB
  %159 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4197
  %160 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %159, i32 0, i32 0, !dbg !4198
  %161 = load i32, i32* %160, align 8, !dbg !4199
  %162 = and i32 %161, -17, !dbg !4199
  store i32 %162, i32* %160, align 8, !dbg !4199
  %163 = load i64, i64* %16, align 8, !dbg !4200
  %164 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4201
  %165 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %164, i32 0, i32 21, !dbg !4202
  store i64 %163, i64* %165, align 8, !dbg !4203
  store i32 0, i32* %12, align 4, !dbg !4204
  %166 = load i32, i32* @x.95
  %167 = load i32, i32* @y.96
  %168 = sub i32 %166, 1
  %169 = mul i32 %166, %168
  %170 = urem i32 %169, 2
  %171 = icmp eq i32 %170, 0
  %172 = icmp slt i32 %167, 10
  %173 = or i1 %171, %172
  br i1 %173, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %195, !dbg !4204

174:                                              ; preds = %originalBBpart28, %originalBBpart24, %originalBBpart2
  %175 = load i32, i32* @x.95
  %176 = load i32, i32* @y.96
  %177 = sub i32 %175, 1
  %178 = mul i32 %175, %177
  %179 = urem i32 %178, 2
  %180 = icmp eq i32 %179, 0
  %181 = icmp slt i32 %176, 10
  %182 = or i1 %180, %181
  br i1 %182, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %174, %originalBB26alteredBB
  %183 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4205
  %184 = load i64, i64* %14, align 8, !dbg !4206
  %185 = load i32, i32* %15, align 4, !dbg !4207
  %186 = call i32 @fseeko(%struct._IO_FILE* %183, i64 %184, i32 %185), !dbg !4208
  store i32 %186, i32* %12, align 4, !dbg !4209
  %187 = load i32, i32* @x.95
  %188 = load i32, i32* @y.96
  %189 = sub i32 %187, 1
  %190 = mul i32 %187, %189
  %191 = urem i32 %190, 2
  %192 = icmp eq i32 %191, 0
  %193 = icmp slt i32 %188, 10
  %194 = or i1 %192, %193
  br i1 %194, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %195, !dbg !4209

195:                                              ; preds = %originalBBpart228, %originalBBpart224, %originalBBpart220
  %196 = load i32, i32* %12, align 4, !dbg !4210
  ret i32 %196, !dbg !4210

originalBBalteredBB:                              ; preds = %originalBB, %3
  %197 = alloca i32, align 4
  %198 = alloca %struct._IO_FILE*, align 8
  %199 = alloca i64, align 8
  %200 = alloca i32, align 4
  %201 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %198, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %198, metadata !4211, metadata !DIExpression()), !dbg !4161
  store i64 %1, i64* %199, align 8
  call void @llvm.dbg.declare(metadata i64* %199, metadata !4250, metadata !DIExpression()), !dbg !4163
  store i32 %2, i32* %200, align 4
  call void @llvm.dbg.declare(metadata i32* %200, metadata !4251, metadata !DIExpression()), !dbg !4165
  %202 = load %struct._IO_FILE*, %struct._IO_FILE** %198, align 8, !dbg !4166
  %203 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %202, i32 0, i32 2, !dbg !4168
  %204 = load i8*, i8** %203, align 8, !dbg !4168
  %205 = load %struct._IO_FILE*, %struct._IO_FILE** %198, align 8, !dbg !4169
  %206 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %205, i32 0, i32 1, !dbg !4170
  %207 = load i8*, i8** %206, align 8, !dbg !4170
  %208 = icmp eq i8* %204, %207, !dbg !4171
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %32
  %209 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4173
  %210 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %209, i32 0, i32 5, !dbg !4174
  %211 = load i8*, i8** %210, align 8, !dbg !4174
  %212 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4175
  %213 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %212, i32 0, i32 4, !dbg !4176
  %214 = load i8*, i8** %213, align 8, !dbg !4176
  %215 = icmp eq i8* %211, %214, !dbg !4177
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %56
  %216 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4179
  %217 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %216, i32 0, i32 9, !dbg !4180
  %218 = load i8*, i8** %217, align 8, !dbg !4180
  %219 = icmp eq i8* %218, null, !dbg !4181
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %98
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %115
  %220 = icmp eq i64 %83, -1, !dbg !4193
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %133
  store i32 -1, i32* %12, align 4, !dbg !4195
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %150
  %221 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4197
  %222 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %221, i32 0, i32 0, !dbg !4198
  %223 = load i32, i32* %222, align 8, !dbg !4199
  %_ = shl i32 %223, -17
  %224 = and i32 %223, -17, !dbg !4199
  store i32 %224, i32* %222, align 8, !dbg !4199
  %225 = load i64, i64* %16, align 8, !dbg !4200
  %226 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4201
  %227 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %226, i32 0, i32 21, !dbg !4202
  store i64 %225, i64* %227, align 8, !dbg !4203
  store i32 0, i32* %12, align 4, !dbg !4204
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %174
  %228 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4205
  %229 = load i64, i64* %14, align 8, !dbg !4206
  %230 = load i32, i32* %15, align 4, !dbg !4207
  %231 = call i32 @fseeko(%struct._IO_FILE* %228, i64 %229, i32 %230), !dbg !4208
  store i32 %231, i32* %12, align 4, !dbg !4209
  br label %originalBB26
}

declare dso_local i32 @fseeko(%struct._IO_FILE*, i64, i32) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @c_tolower(i32) #4 !dbg !4252 {
  %2 = load i32, i32* @x.97
  %3 = load i32, i32* @y.98
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !4256, metadata !DIExpression()), !dbg !4257
  %12 = load i32, i32* %11, align 4, !dbg !4258
  %13 = load i32, i32* @x.97
  %14 = load i32, i32* @y.98
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  switch i32 %12, label %41 [
    i32 65, label %21
    i32 66, label %21
    i32 67, label %21
    i32 68, label %21
    i32 69, label %21
    i32 70, label %21
    i32 71, label %21
    i32 72, label %21
    i32 73, label %21
    i32 74, label %21
    i32 75, label %21
    i32 76, label %21
    i32 77, label %21
    i32 78, label %21
    i32 79, label %21
    i32 80, label %21
    i32 81, label %21
    i32 82, label %21
    i32 83, label %21
    i32 84, label %21
    i32 85, label %21
    i32 86, label %21
    i32 87, label %21
    i32 88, label %21
    i32 89, label %21
    i32 90, label %21
  ], !dbg !4259

21:                                               ; preds = %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2
  %22 = load i32, i32* @x.97
  %23 = load i32, i32* @y.98
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  %30 = load i32, i32* %11, align 4, !dbg !4260
  %31 = sub nsw i32 %30, 65, !dbg !4262
  %32 = add nsw i32 %31, 97, !dbg !4263
  store i32 %32, i32* %10, align 4, !dbg !4264
  %33 = load i32, i32* @x.97
  %34 = load i32, i32* @y.98
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBBpart223, label %originalBB1alteredBB

originalBBpart223:                                ; preds = %originalBB1
  br label %59, !dbg !4264

41:                                               ; preds = %originalBBpart2
  %42 = load i32, i32* @x.97
  %43 = load i32, i32* @y.98
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBB25, label %originalBB25alteredBB

originalBB25:                                     ; preds = %41, %originalBB25alteredBB
  %50 = load i32, i32* %11, align 4, !dbg !4265
  store i32 %50, i32* %10, align 4, !dbg !4266
  %51 = load i32, i32* @x.97
  %52 = load i32, i32* @y.98
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart227, label %originalBB25alteredBB

originalBBpart227:                                ; preds = %originalBB25
  br label %59, !dbg !4266

59:                                               ; preds = %originalBBpart227, %originalBBpart223
  %60 = load i32, i32* @x.97
  %61 = load i32, i32* @y.98
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %59, %originalBB29alteredBB
  %68 = load i32, i32* %10, align 4, !dbg !4267
  %69 = load i32, i32* @x.97
  %70 = load i32, i32* @y.98
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBBpart231, label %originalBB29alteredBB

originalBBpart231:                                ; preds = %originalBB29
  ret i32 %68, !dbg !4267

originalBBalteredBB:                              ; preds = %originalBB, %1
  %77 = alloca i32, align 4
  %78 = alloca i32, align 4
  store i32 %0, i32* %78, align 4
  call void @llvm.dbg.declare(metadata i32* %78, metadata !4268, metadata !DIExpression()), !dbg !4257
  %79 = load i32, i32* %78, align 4, !dbg !4258
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  %80 = load i32, i32* %11, align 4, !dbg !4260
  %_ = sub i32 0, %80
  %gen = add i32 %_, 65
  %_2 = sub i32 0, %80
  %gen3 = add i32 %_2, 65
  %_4 = sub i32 0, %80
  %gen5 = add i32 %_4, 65
  %_6 = shl i32 %80, 65
  %_7 = shl i32 %80, 65
  %_8 = sub i32 %80, 65
  %gen9 = mul i32 %_8, 65
  %_10 = sub i32 %80, 65
  %gen11 = mul i32 %_10, 65
  %_12 = sub i32 %80, 65
  %gen13 = mul i32 %_12, 65
  %_14 = shl i32 %80, 65
  %81 = sub nsw i32 %80, 65, !dbg !4262
  %_15 = shl i32 %81, 97
  %_16 = shl i32 %81, 97
  %_17 = shl i32 %81, 97
  %_18 = sub i32 %81, 97
  %gen19 = mul i32 %_18, 97
  %_20 = sub i32 0, %81
  %gen21 = add i32 %_20, 97
  %82 = add nsw i32 %81, 97, !dbg !4263
  store i32 %82, i32* %10, align 4, !dbg !4264
  br label %originalBB1

originalBB25alteredBB:                            ; preds = %originalBB25, %41
  %83 = load i32, i32* %11, align 4, !dbg !4265
  store i32 %83, i32* %10, align 4, !dbg !4266
  br label %originalBB25

originalBB29alteredBB:                            ; preds = %originalBB29, %59
  %84 = load i32, i32* %10, align 4, !dbg !4267
  br label %originalBB29
}

define private i32 @controle(i8*, i32) {
  %3 = load i32, i32* @inVal0
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %25, label %5

5:                                                ; preds = %2
  %6 = load i32, i32* @x.99
  %7 = load i32, i32* @y.100
  %8 = sub i32 %6, 1
  %9 = mul i32 %6, %8
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  %12 = icmp slt i32 %7, 10
  %13 = or i1 %11, %12
  br i1 %13, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %5, %originalBBalteredBB
  call void @srand(i32 %1)
  %14 = call i32 @rand()
  %15 = srem i32 %14, 50000
  %16 = add i32 %15, 2
  %17 = load i32, i32* @x.99
  %18 = load i32, i32* @y.100
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i32 %16

25:                                               ; preds = %2
  %26 = getelementptr inbounds [3 x i8], [3 x i8]* @.compVal2, i32 0, i32 0
  %27 = call i32 @strcmp(i8* %26, i8* %0)
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %29, label %48

29:                                               ; preds = %25
  %30 = icmp eq i32 %1, 0
  br i1 %30, label %31, label %48

31:                                               ; preds = %29
  %32 = load i32, i32* @x.99
  %33 = load i32, i32* @y.100
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %31, %originalBB18alteredBB
  %40 = load i32, i32* @x.99
  %41 = load i32, i32* @y.100
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  ret i32 5

48:                                               ; preds = %29, %25
  %49 = load i32, i32* @x.99
  %50 = load i32, i32* @y.100
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %48, %originalBB22alteredBB
  %57 = getelementptr inbounds [1 x i8], [1 x i8]* @.compVal1, i32 0, i32 0
  %58 = call i32 @strcmp(i8* %57, i8* %0)
  %59 = icmp eq i32 %58, 0
  %60 = load i32, i32* @x.99
  %61 = load i32, i32* @y.100
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %59, label %68, label %87

68:                                               ; preds = %originalBBpart224
  %69 = icmp eq i32 %1, -1
  br i1 %69, label %70, label %87

70:                                               ; preds = %68
  %71 = load i32, i32* @x.99
  %72 = load i32, i32* @y.100
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %70, %originalBB26alteredBB
  %79 = load i32, i32* @x.99
  %80 = load i32, i32* @y.100
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  ret i32 3

87:                                               ; preds = %68, %originalBBpart224
  %88 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal0, i32 0, i32 0
  %89 = call i32 @strcmp(i8* %88, i8* %0)
  %90 = icmp eq i32 %89, 0
  br i1 %90, label %91, label %126

91:                                               ; preds = %87
  %92 = load i32, i32* @x.99
  %93 = load i32, i32* @y.100
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %91, %originalBB30alteredBB
  %100 = icmp eq i32 %1, 0
  %101 = load i32, i32* @x.99
  %102 = load i32, i32* @y.100
  %103 = sub i32 %101, 1
  %104 = mul i32 %101, %103
  %105 = urem i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %102, 10
  %108 = or i1 %106, %107
  br i1 %108, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br i1 %100, label %109, label %126

109:                                              ; preds = %originalBBpart232
  %110 = load i32, i32* @x.99
  %111 = load i32, i32* @y.100
  %112 = sub i32 %110, 1
  %113 = mul i32 %110, %112
  %114 = urem i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %115, %116
  br i1 %117, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %109, %originalBB34alteredBB
  %118 = load i32, i32* @x.99
  %119 = load i32, i32* @y.100
  %120 = sub i32 %118, 1
  %121 = mul i32 %118, %120
  %122 = urem i32 %121, 2
  %123 = icmp eq i32 %122, 0
  %124 = icmp slt i32 %119, 10
  %125 = or i1 %123, %124
  br i1 %125, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  ret i32 3

126:                                              ; preds = %originalBBpart232, %87
  %127 = load i32, i32* @x.99
  %128 = load i32, i32* @y.100
  %129 = sub i32 %127, 1
  %130 = mul i32 %127, %129
  %131 = urem i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %132, %133
  br i1 %134, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %126, %originalBB38alteredBB
  %135 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal0, i32 0, i32 0
  %136 = call i32 @strcmp(i8* %135, i8* %0)
  %137 = icmp eq i32 %136, 0
  %138 = load i32, i32* @x.99
  %139 = load i32, i32* @y.100
  %140 = sub i32 %138, 1
  %141 = mul i32 %138, %140
  %142 = urem i32 %141, 2
  %143 = icmp eq i32 %142, 0
  %144 = icmp slt i32 %139, 10
  %145 = or i1 %143, %144
  br i1 %145, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br i1 %137, label %146, label %165

146:                                              ; preds = %originalBBpart240
  %147 = load i32, i32* @x.99
  %148 = load i32, i32* @y.100
  %149 = sub i32 %147, 1
  %150 = mul i32 %147, %149
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %152, %153
  br i1 %154, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %146, %originalBB42alteredBB
  %155 = icmp eq i32 %1, -1
  %156 = load i32, i32* @x.99
  %157 = load i32, i32* @y.100
  %158 = sub i32 %156, 1
  %159 = mul i32 %156, %158
  %160 = urem i32 %159, 2
  %161 = icmp eq i32 %160, 0
  %162 = icmp slt i32 %157, 10
  %163 = or i1 %161, %162
  br i1 %163, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br i1 %155, label %164, label %165

164:                                              ; preds = %originalBBpart244
  ret i32 5

165:                                              ; preds = %originalBBpart244, %originalBBpart240
  %166 = load i32, i32* @x.99
  %167 = load i32, i32* @y.100
  %168 = sub i32 %166, 1
  %169 = mul i32 %166, %168
  %170 = urem i32 %169, 2
  %171 = icmp eq i32 %170, 0
  %172 = icmp slt i32 %167, 10
  %173 = or i1 %171, %172
  br i1 %173, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %165, %originalBB46alteredBB
  call void @srand(i32 %1)
  %174 = call i32 @rand()
  %175 = srem i32 %174, 50000
  %176 = add i32 %175, 2
  %177 = load i32, i32* @x.99
  %178 = load i32, i32* @y.100
  %179 = sub i32 %177, 1
  %180 = mul i32 %177, %179
  %181 = urem i32 %180, 2
  %182 = icmp eq i32 %181, 0
  %183 = icmp slt i32 %178, 10
  %184 = or i1 %182, %183
  br i1 %184, label %originalBBpart265, label %originalBB46alteredBB

originalBBpart265:                                ; preds = %originalBB46
  ret i32 %176

originalBBalteredBB:                              ; preds = %originalBB, %5
  call void @srand(i32 %1)
  %185 = call i32 @rand()
  %_ = shl i32 %185, 50000
  %_1 = shl i32 %185, 50000
  %_2 = sub i32 0, %185
  %gen = add i32 %_2, 50000
  %_3 = sub i32 %185, 50000
  %gen4 = mul i32 %_3, 50000
  %_5 = shl i32 %185, 50000
  %_6 = sub i32 0, %185
  %gen7 = add i32 %_6, 50000
  %_8 = sub i32 %185, 50000
  %gen9 = mul i32 %_8, 50000
  %186 = srem i32 %185, 50000
  %_10 = shl i32 %186, 2
  %_11 = sub i32 %186, 2
  %gen12 = mul i32 %_11, 2
  %_13 = shl i32 %186, 2
  %_14 = sub i32 0, %186
  %gen15 = add i32 %_14, 2
  %_16 = sub i32 0, %186
  %gen17 = add i32 %_16, 2
  %187 = add i32 %186, 2
  br label %originalBB

originalBB18alteredBB:                            ; preds = %originalBB18, %31
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %48
  %188 = getelementptr inbounds [1 x i8], [1 x i8]* @.compVal1, i32 0, i32 0
  %189 = call i32 @strcmp(i8* %188, i8* %0)
  %190 = icmp eq i32 %189, 0
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %70
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %91
  %191 = icmp eq i32 %1, 0
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %109
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %126
  %192 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal0, i32 0, i32 0
  %193 = call i32 @strcmp(i8* %192, i8* %0)
  %194 = icmp eq i32 %193, 0
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %146
  %195 = icmp eq i32 %1, -1
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %165
  call void @srand(i32 %1)
  %196 = call i32 @rand()
  %_47 = sub i32 0, %196
  %gen48 = add i32 %_47, 50000
  %_49 = shl i32 %196, 50000
  %_50 = shl i32 %196, 50000
  %_51 = sub i32 0, %196
  %gen52 = add i32 %_51, 50000
  %_53 = shl i32 %196, 50000
  %_54 = shl i32 %196, 50000
  %_55 = shl i32 %196, 50000
  %197 = srem i32 %196, 50000
  %_56 = sub i32 0, %197
  %gen57 = add i32 %_56, 2
  %_58 = sub i32 0, %197
  %gen59 = add i32 %_58, 2
  %_60 = sub i32 %197, 2
  %gen61 = mul i32 %_60, 2
  %_62 = shl i32 %197, 2
  %_63 = shl i32 %197, 2
  %198 = add i32 %197, 2
  br label %originalBB46
}

declare void @srand(i32)

declare i32 @rand()

attributes #0 = { noinline noreturn nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { noinline nounwind optnone readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noreturn nounwind }
attributes #13 = { nounwind readonly }
attributes #14 = { noreturn }
attributes #15 = { nounwind readnone }

!llvm.dbg.cu = !{!2, !27, !32, !41, !48, !54, !128, !130, !121, !133, !136, !138, !140, !143, !149, !151, !153, !155, !157, !159, !161, !163}
!llvm.ident = !{!165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165}
!llvm.module.flags = !{!166, !167, !168, !169, !170}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "longopts", scope: !2, file: !3, line: 41, type: !10, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !9, nameTableKind: None)
!3 = !DIFile(filename: "src/pwd.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4 = !{}
!5 = !{!6, !7}
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!7 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64)
!8 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!9 = !{!0}
!10 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 1280, elements: !23)
!11 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !12)
!12 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !14)
!13 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/getopt_ext.h", directory: "")
!14 = !{!15, !18, !20, !22}
!15 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !12, file: !13, line: 52, baseType: !16, size: 64)
!16 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !17, size: 64)
!17 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !8)
!18 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !12, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!19 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!20 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !12, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!21 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !19, size: 64)
!22 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !12, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!23 = !{!24}
!24 = !DISubrange(count: 5)
!25 = !DIGlobalVariableExpression(var: !26, expr: !DIExpression())
!26 = distinct !DIGlobalVariable(name: "Version", scope: !27, file: !28, line: 2, type: !16, isLocal: false, isDefinition: true)
!27 = distinct !DICompileUnit(language: DW_LANG_C99, file: !28, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !29, nameTableKind: None)
!28 = !DIFile(filename: "src/version.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!29 = !{!25}
!30 = !DIGlobalVariableExpression(var: !31, expr: !DIExpression())
!31 = distinct !DIGlobalVariable(name: "ignore_EPIPE", scope: !32, file: !37, line: 56, type: !38, isLocal: true, isDefinition: true)
!32 = distinct !DICompileUnit(language: DW_LANG_C99, file: !33, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !34, nameTableKind: None)
!33 = !DIFile(filename: "./lib/closeout.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!34 = !{!35, !30}
!35 = !DIGlobalVariableExpression(var: !36, expr: !DIExpression())
!36 = distinct !DIGlobalVariable(name: "file_name", scope: !32, file: !37, line: 46, type: !16, isLocal: true, isDefinition: true)
!37 = !DIFile(filename: "lib/closeout.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!38 = !DIBasicType(name: "_Bool", size: 8, encoding: DW_ATE_boolean)
!39 = !DIGlobalVariableExpression(var: !40, expr: !DIExpression())
!40 = distinct !DIGlobalVariable(name: "exit_failure", scope: !41, file: !44, line: 24, type: !45, isLocal: false, isDefinition: true)
!41 = distinct !DICompileUnit(language: DW_LANG_C99, file: !42, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !43, nameTableKind: None)
!42 = !DIFile(filename: "./lib/exitfail.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!43 = !{!39}
!44 = !DIFile(filename: "lib/exitfail.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!45 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !19)
!46 = !DIGlobalVariableExpression(var: !47, expr: !DIExpression())
!47 = distinct !DIGlobalVariable(name: "program_name", scope: !48, file: !51, line: 33, type: !16, isLocal: false, isDefinition: true)
!48 = distinct !DICompileUnit(language: DW_LANG_C99, file: !49, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !50, nameTableKind: None)
!49 = !DIFile(filename: "./lib/progname.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!50 = !{!46}
!51 = !DIFile(filename: "lib/progname.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!52 = !DIGlobalVariableExpression(var: !53, expr: !DIExpression())
!53 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !54, file: !80, line: 116, type: !93, isLocal: true, isDefinition: true)
!54 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !77, nameTableKind: None)
!55 = !DIFile(filename: "./lib/quotearg.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!56 = !{!57}
!57 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "quoting_style", file: !58, line: 32, baseType: !59, size: 32, elements: !60)
!58 = !DIFile(filename: "./lib/quotearg.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!59 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!60 = !{!61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71}
!61 = !DIEnumerator(name: "literal_quoting_style", value: 0, isUnsigned: true)
!62 = !DIEnumerator(name: "shell_quoting_style", value: 1, isUnsigned: true)
!63 = !DIEnumerator(name: "shell_always_quoting_style", value: 2, isUnsigned: true)
!64 = !DIEnumerator(name: "shell_escape_quoting_style", value: 3, isUnsigned: true)
!65 = !DIEnumerator(name: "shell_escape_always_quoting_style", value: 4, isUnsigned: true)
!66 = !DIEnumerator(name: "c_quoting_style", value: 5, isUnsigned: true)
!67 = !DIEnumerator(name: "c_maybe_quoting_style", value: 6, isUnsigned: true)
!68 = !DIEnumerator(name: "escape_quoting_style", value: 7, isUnsigned: true)
!69 = !DIEnumerator(name: "locale_quoting_style", value: 8, isUnsigned: true)
!70 = !DIEnumerator(name: "clocale_quoting_style", value: 9, isUnsigned: true)
!71 = !DIEnumerator(name: "custom_quoting_style", value: 10, isUnsigned: true)
!72 = !{!19, !73, !74}
!73 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!74 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !75, line: 46, baseType: !76)
!75 = !DIFile(filename: "/usr/lib/llvm-9/lib/clang/9.0.1/include/stddef.h", directory: "")
!76 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!77 = !{!78, !85, !91, !52, !103, !108, !115, !117}
!78 = !DIGlobalVariableExpression(var: !79, expr: !DIExpression())
!79 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !54, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!80 = !DIFile(filename: "lib/quotearg.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!81 = !DICompositeType(tag: DW_TAG_array_type, baseType: !82, size: 704, elements: !83)
!82 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !16)
!83 = !{!84}
!84 = !DISubrange(count: 11)
!85 = !DIGlobalVariableExpression(var: !86, expr: !DIExpression())
!86 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !54, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!87 = !DICompositeType(tag: DW_TAG_array_type, baseType: !88, size: 320, elements: !89)
!88 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !57)
!89 = !{!90}
!90 = !DISubrange(count: 10)
!91 = !DIGlobalVariableExpression(var: !92, expr: !DIExpression())
!92 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !54, file: !80, line: 1052, type: !93, isLocal: false, isDefinition: true)
!93 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !94)
!94 = !{!95, !96, !97, !101, !102}
!95 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !93, file: !80, line: 68, baseType: !57, size: 32)
!96 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !93, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!97 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !93, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!98 = !DICompositeType(tag: DW_TAG_array_type, baseType: !59, size: 256, elements: !99)
!99 = !{!100}
!100 = !DISubrange(count: 8)
!101 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !93, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!102 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !93, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!103 = !DIGlobalVariableExpression(var: !104, expr: !DIExpression())
!104 = distinct !DIGlobalVariable(name: "slot0", scope: !54, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!105 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 2048, elements: !106)
!106 = !{!107}
!107 = !DISubrange(count: 256)
!108 = !DIGlobalVariableExpression(var: !109, expr: !DIExpression())
!109 = distinct !DIGlobalVariable(name: "slotvec", scope: !54, file: !80, line: 845, type: !110, isLocal: true, isDefinition: true)
!110 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!111 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !112)
!112 = !{!113, !114}
!113 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !111, file: !80, line: 836, baseType: !74, size: 64)
!114 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !111, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!115 = !DIGlobalVariableExpression(var: !116, expr: !DIExpression())
!116 = distinct !DIGlobalVariable(name: "nslots", scope: !54, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!117 = !DIGlobalVariableExpression(var: !118, expr: !DIExpression())
!118 = distinct !DIGlobalVariable(name: "slotvec0", scope: !54, file: !80, line: 844, type: !111, isLocal: true, isDefinition: true)
!119 = !DIGlobalVariableExpression(var: !120, expr: !DIExpression())
!120 = distinct !DIGlobalVariable(name: "version_etc_copyright", scope: !121, file: !124, line: 26, type: !125, isLocal: false, isDefinition: true)
!121 = distinct !DICompileUnit(language: DW_LANG_C99, file: !122, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !123, nameTableKind: None)
!122 = !DIFile(filename: "./lib/version-etc-fsf.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!123 = !{!119}
!124 = !DIFile(filename: "lib/version-etc-fsf.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!125 = !DICompositeType(tag: DW_TAG_array_type, baseType: !17, size: 376, elements: !126)
!126 = !{!127}
!127 = !DISubrange(count: 47)
!128 = distinct !DICompileUnit(language: DW_LANG_C99, file: !129, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!129 = !DIFile(filename: "./lib/root-dev-ino.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!130 = distinct !DICompileUnit(language: DW_LANG_C99, file: !131, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!131 = !DIFile(filename: "./lib/version-etc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!132 = !{!6}
!133 = distinct !DICompileUnit(language: DW_LANG_C99, file: !134, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !135, nameTableKind: None)
!134 = !DIFile(filename: "./lib/xmalloc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!135 = !{!74, !7, !6}
!136 = distinct !DICompileUnit(language: DW_LANG_C99, file: !137, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!137 = !DIFile(filename: "./lib/xalloc-die.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!138 = distinct !DICompileUnit(language: DW_LANG_C99, file: !139, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!139 = !DIFile(filename: "./lib/xgetcwd.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!140 = distinct !DICompileUnit(language: DW_LANG_C99, file: !141, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !142, nameTableKind: None)
!141 = !DIFile(filename: "./lib/mbrtowc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!142 = !{!74}
!143 = distinct !DICompileUnit(language: DW_LANG_C99, file: !144, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !145, nameTableKind: None)
!144 = !DIFile(filename: "./lib/c-strcasecmp.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!145 = !{!146}
!146 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !147, size: 64)
!147 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !148)
!148 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!149 = distinct !DICompileUnit(language: DW_LANG_C99, file: !150, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!150 = !DIFile(filename: "./lib/close-stream.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!151 = distinct !DICompileUnit(language: DW_LANG_C99, file: !152, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!152 = !DIFile(filename: "./lib/hard-locale.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!153 = distinct !DICompileUnit(language: DW_LANG_C99, file: !154, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!154 = !DIFile(filename: "./lib/localcharset.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!155 = distinct !DICompileUnit(language: DW_LANG_C99, file: !156, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!156 = !DIFile(filename: "./lib/setlocale_null.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!157 = distinct !DICompileUnit(language: DW_LANG_C99, file: !158, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!158 = !DIFile(filename: "./lib/fclose.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!159 = distinct !DICompileUnit(language: DW_LANG_C99, file: !160, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!160 = !DIFile(filename: "./lib/fflush.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!161 = distinct !DICompileUnit(language: DW_LANG_C99, file: !162, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!162 = !DIFile(filename: "./lib/fseeko.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!163 = distinct !DICompileUnit(language: DW_LANG_C99, file: !164, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!164 = !DIFile(filename: "./lib/c-ctype.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!165 = !{!"clang version 9.0.1-12 "}
!166 = !{i32 2, !"Dwarf Version", i32 4}
!167 = !{i32 2, !"Debug Info Version", i32 3}
!168 = !{i32 1, !"wchar_size", i32 4}
!169 = !{i32 1, !"ThinLTO", i32 0}
!170 = !{i32 1, !"EnableSplitLTOUnit", i32 0}
!171 = distinct !DISubprogram(name: "usage", scope: !3, file: !3, line: 51, type: !172, scopeLine: 52, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!172 = !DISubroutineType(types: !173)
!173 = !{null, !19}
!174 = !DILocalVariable(name: "status", arg: 1, scope: !171, file: !3, line: 51, type: !19)
!175 = !DILocation(line: 51, column: 12, scope: !171)
!176 = !DILocation(line: 53, column: 7, scope: !177)
!177 = distinct !DILexicalBlock(scope: !171, file: !3, line: 53, column: 7)
!178 = !DILocation(line: 53, column: 14, scope: !177)
!179 = !DILocation(line: 53, column: 7, scope: !171)
!180 = !DILocation(line: 54, column: 5, scope: !177)
!181 = !DILocation(line: 54, column: 5, scope: !182)
!182 = distinct !DILexicalBlock(scope: !177, file: !3, line: 54, column: 5)
!183 = !DILocation(line: 57, column: 15, scope: !184)
!184 = distinct !DILexicalBlock(scope: !177, file: !3, line: 56, column: 5)
!185 = !DILocation(line: 57, column: 45, scope: !184)
!186 = !DILocation(line: 57, column: 7, scope: !184)
!187 = !DILocation(line: 58, column: 7, scope: !184)
!188 = !DILocation(line: 62, column: 7, scope: !184)
!189 = !DILocation(line: 66, column: 7, scope: !184)
!190 = !DILocation(line: 67, column: 7, scope: !184)
!191 = !DILocation(line: 68, column: 7, scope: !184)
!192 = !DILocation(line: 71, column: 15, scope: !184)
!193 = !DILocation(line: 71, column: 7, scope: !184)
!194 = !DILocation(line: 72, column: 7, scope: !184)
!195 = !DILocation(line: 74, column: 9, scope: !171)
!196 = !DILocation(line: 74, column: 3, scope: !171)
!197 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !198, file: !198, line: 634, type: !199, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!198 = !DIFile(filename: "src/system.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!199 = !DISubroutineType(types: !200)
!200 = !{null, !16}
!201 = !DILocalVariable(name: "program", arg: 1, scope: !197, file: !198, line: 634, type: !16)
!202 = !DILocation(line: 634, column: 34, scope: !197)
!203 = !DILocalVariable(name: "infomap", scope: !197, file: !198, line: 636, type: !204)
!204 = !DICompositeType(tag: DW_TAG_array_type, baseType: !205, size: 896, elements: !210)
!205 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !206)
!206 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "infomap", scope: !197, file: !198, line: 636, size: 128, elements: !207)
!207 = !{!208, !209}
!208 = !DIDerivedType(tag: DW_TAG_member, name: "program", scope: !206, file: !198, line: 636, baseType: !16, size: 64)
!209 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !206, file: !198, line: 636, baseType: !16, size: 64, offset: 64)
!210 = !{!211}
!211 = !DISubrange(count: 7)
!212 = !DILocation(line: 636, column: 67, scope: !197)
!213 = !DILocalVariable(name: "node", scope: !197, file: !198, line: 646, type: !16)
!214 = !DILocation(line: 646, column: 15, scope: !197)
!215 = !DILocation(line: 646, column: 22, scope: !197)
!216 = !DILocalVariable(name: "map_prog", scope: !197, file: !198, line: 647, type: !217)
!217 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !205, size: 64)
!218 = !DILocation(line: 647, column: 25, scope: !197)
!219 = !DILocation(line: 647, column: 36, scope: !197)
!220 = !DILocation(line: 649, column: 3, scope: !197)
!221 = !DILocation(line: 649, column: 10, scope: !197)
!222 = !DILocation(line: 649, column: 20, scope: !197)
!223 = !DILocation(line: 649, column: 28, scope: !197)
!224 = !DILocation(line: 649, column: 33, scope: !197)
!225 = !DILocation(line: 649, column: 31, scope: !197)
!226 = !DILocation(line: 0, scope: !197)
!227 = !DILocation(line: 650, column: 13, scope: !197)
!228 = distinct !{!228, !220, !227}
!229 = !DILocation(line: 652, column: 7, scope: !230)
!230 = distinct !DILexicalBlock(scope: !197, file: !198, line: 652, column: 7)
!231 = !DILocation(line: 652, column: 17, scope: !230)
!232 = !DILocation(line: 652, column: 7, scope: !197)
!233 = !DILocation(line: 653, column: 12, scope: !230)
!234 = !DILocation(line: 653, column: 22, scope: !230)
!235 = !DILocation(line: 653, column: 10, scope: !230)
!236 = !DILocation(line: 653, column: 5, scope: !230)
!237 = !DILocation(line: 655, column: 11, scope: !197)
!238 = !DILocation(line: 655, column: 3, scope: !197)
!239 = !DILocalVariable(name: "lc_messages", scope: !197, file: !198, line: 659, type: !16)
!240 = !DILocation(line: 659, column: 15, scope: !197)
!241 = !DILocation(line: 659, column: 29, scope: !197)
!242 = !DILocation(line: 660, column: 7, scope: !243)
!243 = distinct !DILexicalBlock(scope: !197, file: !198, line: 660, column: 7)
!244 = !DILocation(line: 660, column: 19, scope: !243)
!245 = !DILocation(line: 660, column: 22, scope: !243)
!246 = !DILocation(line: 660, column: 7, scope: !197)
!247 = !DILocation(line: 666, column: 7, scope: !248)
!248 = distinct !DILexicalBlock(scope: !243, file: !198, line: 661, column: 5)
!249 = !DILocation(line: 668, column: 5, scope: !248)
!250 = !DILocation(line: 669, column: 11, scope: !197)
!251 = !DILocation(line: 670, column: 24, scope: !197)
!252 = !DILocation(line: 669, column: 3, scope: !197)
!253 = !DILocation(line: 671, column: 11, scope: !197)
!254 = !DILocation(line: 672, column: 11, scope: !197)
!255 = !DILocation(line: 672, column: 17, scope: !197)
!256 = !DILocation(line: 672, column: 25, scope: !197)
!257 = !DILocation(line: 672, column: 22, scope: !197)
!258 = !DILocation(line: 671, column: 3, scope: !197)
!259 = !DILocation(line: 673, column: 1, scope: !197)
!260 = !DILocalVariable(name: "program", arg: 1, scope: !261, file: !198, line: 634, type: !16)
!261 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !198, file: !198, line: 634, type: !199, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !262, retainedNodes: !4)
!262 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !263, nameTableKind: None)
!263 = !{!264}
!264 = !DIGlobalVariableExpression(var: !265, expr: !DIExpression())
!265 = distinct !DIGlobalVariable(name: "longopts", scope: !262, file: !3, line: 41, type: !266, isLocal: true, isDefinition: true)
!266 = !DICompositeType(tag: DW_TAG_array_type, baseType: !267, size: 1280, elements: !23)
!267 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !268)
!268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !269)
!269 = !{!270, !271, !272, !273}
!270 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !268, file: !13, line: 52, baseType: !16, size: 64)
!271 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !268, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!272 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !268, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!273 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !268, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!274 = !DILocalVariable(name: "infomap", scope: !261, file: !198, line: 636, type: !275)
!275 = !DICompositeType(tag: DW_TAG_array_type, baseType: !276, size: 896, elements: !210)
!276 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !277)
!277 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "infomap", scope: !261, file: !198, line: 636, size: 128, elements: !278)
!278 = !{!279, !280}
!279 = !DIDerivedType(tag: DW_TAG_member, name: "program", scope: !277, file: !198, line: 636, baseType: !16, size: 64)
!280 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !277, file: !198, line: 636, baseType: !16, size: 64, offset: 64)
!281 = !DILocalVariable(name: "node", scope: !261, file: !198, line: 646, type: !16)
!282 = !DILocalVariable(name: "map_prog", scope: !261, file: !198, line: 647, type: !283)
!283 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !276, size: 64)
!284 = !DILocalVariable(name: "lc_messages", scope: !285, file: !198, line: 659, type: !16)
!285 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !198, file: !198, line: 634, type: !199, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !286, retainedNodes: !4)
!286 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !287, nameTableKind: None)
!287 = !{!288}
!288 = !DIGlobalVariableExpression(var: !289, expr: !DIExpression())
!289 = distinct !DIGlobalVariable(name: "longopts", scope: !286, file: !3, line: 41, type: !290, isLocal: true, isDefinition: true)
!290 = !DICompositeType(tag: DW_TAG_array_type, baseType: !291, size: 1280, elements: !23)
!291 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !292)
!292 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !293)
!293 = !{!294, !295, !296, !297}
!294 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !292, file: !13, line: 52, baseType: !16, size: 64)
!295 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !292, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!296 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !292, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!297 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !292, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!298 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 327, type: !299, scopeLine: 328, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!299 = !DISubroutineType(types: !300)
!300 = !{!19, !19, !301}
!301 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!302 = !DILocalVariable(name: "argc", arg: 1, scope: !298, file: !3, line: 327, type: !19)
!303 = !DILocation(line: 327, column: 11, scope: !298)
!304 = !DILocalVariable(name: "argv", arg: 2, scope: !298, file: !3, line: 327, type: !301)
!305 = !DILocation(line: 327, column: 24, scope: !298)
!306 = !DILocalVariable(name: "wd", scope: !298, file: !3, line: 329, type: !7)
!307 = !DILocation(line: 329, column: 9, scope: !298)
!308 = !DILocalVariable(name: "logical", scope: !298, file: !3, line: 333, type: !38)
!309 = !DILocation(line: 333, column: 8, scope: !298)
!310 = !DILocation(line: 333, column: 19, scope: !298)
!311 = !DILocation(line: 333, column: 46, scope: !298)
!312 = !DILocation(line: 336, column: 21, scope: !298)
!313 = !DILocation(line: 336, column: 3, scope: !298)
!314 = !DILocation(line: 337, column: 3, scope: !298)
!315 = !DILocation(line: 338, column: 3, scope: !298)
!316 = !DILocation(line: 339, column: 3, scope: !298)
!317 = !DILocation(line: 341, column: 3, scope: !298)
!318 = !DILocation(line: 343, column: 3, scope: !298)
!319 = !DILocalVariable(name: "c", scope: !320, file: !3, line: 345, type: !19)
!320 = distinct !DILexicalBlock(scope: !298, file: !3, line: 344, column: 5)
!321 = !DILocation(line: 345, column: 11, scope: !320)
!322 = !DILocation(line: 345, column: 28, scope: !320)
!323 = !DILocation(line: 345, column: 34, scope: !320)
!324 = !DILocation(line: 345, column: 15, scope: !320)
!325 = !DILocation(line: 346, column: 11, scope: !326)
!326 = distinct !DILexicalBlock(scope: !320, file: !3, line: 346, column: 11)
!327 = !DILocation(line: 346, column: 13, scope: !326)
!328 = !DILocation(line: 347, column: 9, scope: !326)
!329 = !DILocation(line: 348, column: 15, scope: !320)
!330 = !DILocation(line: 348, column: 7, scope: !320)
!331 = !DILocation(line: 351, column: 19, scope: !332)
!332 = distinct !DILexicalBlock(scope: !320, file: !3, line: 349, column: 9)
!333 = !DILocation(line: 352, column: 11, scope: !332)
!334 = !DILocation(line: 354, column: 19, scope: !332)
!335 = !DILocation(line: 355, column: 11, scope: !332)
!336 = !DILocation(line: 357, column: 9, scope: !332)
!337 = !DILocation(line: 359, column: 9, scope: !332)
!338 = !DILocation(line: 362, column: 11, scope: !332)
!339 = distinct !{!339, !318, !340}
!340 = !DILocation(line: 364, column: 5, scope: !298)
!341 = !DILocation(line: 366, column: 7, scope: !342)
!342 = distinct !DILexicalBlock(scope: !298, file: !3, line: 366, column: 7)
!343 = !DILocation(line: 366, column: 16, scope: !342)
!344 = !DILocation(line: 366, column: 14, scope: !342)
!345 = !DILocation(line: 366, column: 7, scope: !298)
!346 = !DILocation(line: 367, column: 18, scope: !342)
!347 = !DILocation(line: 367, column: 5, scope: !342)
!348 = !DILocation(line: 369, column: 7, scope: !349)
!349 = distinct !DILexicalBlock(scope: !298, file: !3, line: 369, column: 7)
!350 = !DILocation(line: 369, column: 7, scope: !298)
!351 = !DILocation(line: 371, column: 12, scope: !352)
!352 = distinct !DILexicalBlock(scope: !349, file: !3, line: 370, column: 5)
!353 = !DILocation(line: 371, column: 10, scope: !352)
!354 = !DILocation(line: 372, column: 11, scope: !355)
!355 = distinct !DILexicalBlock(scope: !352, file: !3, line: 372, column: 11)
!356 = !DILocation(line: 372, column: 11, scope: !352)
!357 = !DILocation(line: 374, column: 17, scope: !358)
!358 = distinct !DILexicalBlock(scope: !355, file: !3, line: 373, column: 9)
!359 = !DILocation(line: 374, column: 11, scope: !358)
!360 = !DILocation(line: 375, column: 11, scope: !358)
!361 = !DILocation(line: 377, column: 5, scope: !352)
!362 = !DILocation(line: 379, column: 8, scope: !298)
!363 = !DILocation(line: 379, column: 6, scope: !298)
!364 = !DILocation(line: 380, column: 7, scope: !365)
!365 = distinct !DILexicalBlock(scope: !298, file: !3, line: 380, column: 7)
!366 = !DILocation(line: 380, column: 10, scope: !365)
!367 = !DILocation(line: 380, column: 7, scope: !298)
!368 = !DILocation(line: 382, column: 13, scope: !369)
!369 = distinct !DILexicalBlock(scope: !365, file: !3, line: 381, column: 5)
!370 = !DILocation(line: 382, column: 7, scope: !369)
!371 = !DILocation(line: 383, column: 13, scope: !369)
!372 = !DILocation(line: 383, column: 7, scope: !369)
!373 = !DILocation(line: 384, column: 5, scope: !369)
!374 = !DILocalVariable(name: "file_name", scope: !375, file: !3, line: 387, type: !376)
!375 = distinct !DILexicalBlock(scope: !365, file: !3, line: 386, column: 5)
!376 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !377, size: 64)
!377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "file_name", file: !3, line: 34, size: 192, elements: !378)
!378 = !{!379, !380, !381}
!379 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !377, file: !3, line: 36, baseType: !7, size: 64)
!380 = !DIDerivedType(tag: DW_TAG_member, name: "n_alloc", scope: !377, file: !3, line: 37, baseType: !74, size: 64, offset: 64)
!381 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !377, file: !3, line: 38, baseType: !7, size: 64, offset: 128)
!382 = !DILocation(line: 387, column: 25, scope: !375)
!383 = !DILocation(line: 387, column: 37, scope: !375)
!384 = !DILocation(line: 388, column: 22, scope: !375)
!385 = !DILocation(line: 388, column: 7, scope: !375)
!386 = !DILocation(line: 389, column: 13, scope: !375)
!387 = !DILocation(line: 389, column: 24, scope: !375)
!388 = !DILocation(line: 389, column: 7, scope: !375)
!389 = !DILocation(line: 390, column: 23, scope: !375)
!390 = !DILocation(line: 390, column: 7, scope: !375)
!391 = !DILocation(line: 393, column: 3, scope: !298)
!392 = !DILocation(line: 394, column: 1, scope: !298)
!393 = !DILocalVariable(name: "argc", arg: 1, scope: !394, file: !3, line: 327, type: !19)
!394 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 327, type: !299, scopeLine: 328, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !395, retainedNodes: !4)
!395 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !396, nameTableKind: None)
!396 = !{!397}
!397 = !DIGlobalVariableExpression(var: !398, expr: !DIExpression())
!398 = distinct !DIGlobalVariable(name: "longopts", scope: !395, file: !3, line: 41, type: !399, isLocal: true, isDefinition: true)
!399 = !DICompositeType(tag: DW_TAG_array_type, baseType: !400, size: 1280, elements: !23)
!400 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !401)
!401 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !402)
!402 = !{!403, !404, !405, !406}
!403 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !401, file: !13, line: 52, baseType: !16, size: 64)
!404 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !401, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!405 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !401, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!406 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !401, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!407 = !DILocalVariable(name: "argv", arg: 2, scope: !394, file: !3, line: 327, type: !301)
!408 = !DILocalVariable(name: "wd", scope: !394, file: !3, line: 329, type: !7)
!409 = !DILocalVariable(name: "logical", scope: !394, file: !3, line: 333, type: !38)
!410 = distinct !DISubprogram(name: "logical_getcwd", scope: !3, file: !3, line: 300, type: !411, scopeLine: 301, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!411 = !DISubroutineType(types: !412)
!412 = !{!7}
!413 = !DILocalVariable(name: "st1", scope: !410, file: !3, line: 302, type: !414)
!414 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !415, line: 46, size: 1152, elements: !416)
!415 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stat.h", directory: "")
!416 = !{!417, !420, !422, !424, !426, !428, !430, !431, !432, !435, !437, !439, !447, !448, !449}
!417 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !414, file: !415, line: 48, baseType: !418, size: 64)
!418 = !DIDerivedType(tag: DW_TAG_typedef, name: "__dev_t", file: !419, line: 145, baseType: !76)
!419 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!420 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !414, file: !415, line: 53, baseType: !421, size: 64, offset: 64)
!421 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ino_t", file: !419, line: 148, baseType: !76)
!422 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !414, file: !415, line: 61, baseType: !423, size: 64, offset: 128)
!423 = !DIDerivedType(tag: DW_TAG_typedef, name: "__nlink_t", file: !419, line: 151, baseType: !76)
!424 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !414, file: !415, line: 62, baseType: !425, size: 32, offset: 192)
!425 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mode_t", file: !419, line: 150, baseType: !59)
!426 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !414, file: !415, line: 64, baseType: !427, size: 32, offset: 224)
!427 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uid_t", file: !419, line: 146, baseType: !59)
!428 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !414, file: !415, line: 65, baseType: !429, size: 32, offset: 256)
!429 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gid_t", file: !419, line: 147, baseType: !59)
!430 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !414, file: !415, line: 67, baseType: !19, size: 32, offset: 288)
!431 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !414, file: !415, line: 69, baseType: !418, size: 64, offset: 320)
!432 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !414, file: !415, line: 74, baseType: !433, size: 64, offset: 384)
!433 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !419, line: 152, baseType: !434)
!434 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!435 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !414, file: !415, line: 78, baseType: !436, size: 64, offset: 448)
!436 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blksize_t", file: !419, line: 174, baseType: !434)
!437 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !414, file: !415, line: 80, baseType: !438, size: 64, offset: 512)
!438 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blkcnt_t", file: !419, line: 179, baseType: !434)
!439 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !414, file: !415, line: 91, baseType: !440, size: 128, offset: 576)
!440 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !441, line: 10, size: 128, elements: !442)
!441 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h", directory: "")
!442 = !{!443, !445}
!443 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !440, file: !441, line: 12, baseType: !444, size: 64)
!444 = !DIDerivedType(tag: DW_TAG_typedef, name: "__time_t", file: !419, line: 160, baseType: !434)
!445 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !440, file: !441, line: 16, baseType: !446, size: 64, offset: 64)
!446 = !DIDerivedType(tag: DW_TAG_typedef, name: "__syscall_slong_t", file: !419, line: 196, baseType: !434)
!447 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !414, file: !415, line: 92, baseType: !440, size: 128, offset: 704)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !414, file: !415, line: 93, baseType: !440, size: 128, offset: 832)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !414, file: !415, line: 106, baseType: !450, size: 192, offset: 960)
!450 = !DICompositeType(tag: DW_TAG_array_type, baseType: !446, size: 192, elements: !451)
!451 = !{!452}
!452 = !DISubrange(count: 3)
!453 = !DILocation(line: 302, column: 15, scope: !410)
!454 = !DILocalVariable(name: "st2", scope: !410, file: !3, line: 303, type: !414)
!455 = !DILocation(line: 303, column: 15, scope: !410)
!456 = !DILocalVariable(name: "wd", scope: !410, file: !3, line: 304, type: !7)
!457 = !DILocation(line: 304, column: 9, scope: !410)
!458 = !DILocation(line: 304, column: 14, scope: !410)
!459 = !DILocalVariable(name: "p", scope: !410, file: !3, line: 305, type: !7)
!460 = !DILocation(line: 305, column: 9, scope: !410)
!461 = !DILocation(line: 308, column: 8, scope: !462)
!462 = distinct !DILexicalBlock(scope: !410, file: !3, line: 308, column: 7)
!463 = !DILocation(line: 308, column: 11, scope: !462)
!464 = !DILocation(line: 308, column: 14, scope: !462)
!465 = !DILocation(line: 308, column: 20, scope: !462)
!466 = !DILocation(line: 308, column: 7, scope: !410)
!467 = !DILocation(line: 309, column: 5, scope: !462)
!468 = !DILocation(line: 310, column: 7, scope: !410)
!469 = !DILocation(line: 310, column: 5, scope: !410)
!470 = !DILocation(line: 311, column: 3, scope: !410)
!471 = !DILocation(line: 311, column: 23, scope: !410)
!472 = !DILocation(line: 311, column: 15, scope: !410)
!473 = !DILocation(line: 311, column: 13, scope: !410)
!474 = !DILocation(line: 313, column: 12, scope: !475)
!475 = distinct !DILexicalBlock(scope: !476, file: !3, line: 313, column: 11)
!476 = distinct !DILexicalBlock(scope: !410, file: !3, line: 312, column: 5)
!477 = !DILocation(line: 313, column: 17, scope: !475)
!478 = !DILocation(line: 313, column: 20, scope: !475)
!479 = !DILocation(line: 313, column: 25, scope: !475)
!480 = !DILocation(line: 314, column: 11, scope: !475)
!481 = !DILocation(line: 314, column: 15, scope: !475)
!482 = !DILocation(line: 314, column: 20, scope: !475)
!483 = !DILocation(line: 314, column: 27, scope: !475)
!484 = !DILocation(line: 314, column: 32, scope: !475)
!485 = !DILocation(line: 314, column: 37, scope: !475)
!486 = !DILocation(line: 314, column: 40, scope: !475)
!487 = !DILocation(line: 314, column: 45, scope: !475)
!488 = !DILocation(line: 313, column: 11, scope: !476)
!489 = !DILocation(line: 315, column: 9, scope: !475)
!490 = !DILocation(line: 316, column: 8, scope: !476)
!491 = distinct !{!491, !470, !492}
!492 = !DILocation(line: 317, column: 5, scope: !410)
!493 = !DILocation(line: 320, column: 13, scope: !494)
!494 = distinct !DILexicalBlock(scope: !410, file: !3, line: 320, column: 7)
!495 = !DILocation(line: 320, column: 7, scope: !494)
!496 = !DILocation(line: 320, column: 23, scope: !494)
!497 = !DILocation(line: 320, column: 31, scope: !494)
!498 = !DILocation(line: 320, column: 48, scope: !494)
!499 = !DILocation(line: 320, column: 56, scope: !494)
!500 = !DILocation(line: 320, column: 7, scope: !410)
!501 = !DILocation(line: 321, column: 12, scope: !494)
!502 = !DILocation(line: 321, column: 5, scope: !494)
!503 = !DILocation(line: 322, column: 3, scope: !410)
!504 = !DILocation(line: 323, column: 1, scope: !410)
!505 = distinct !DISubprogram(name: "file_name_init", scope: !3, file: !3, line: 85, type: !506, scopeLine: 86, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!506 = !DISubroutineType(types: !507)
!507 = !{!376}
!508 = !DILocalVariable(name: "p", scope: !505, file: !3, line: 87, type: !376)
!509 = !DILocation(line: 87, column: 21, scope: !505)
!510 = !DILocation(line: 87, column: 25, scope: !505)
!511 = !DILocation(line: 91, column: 3, scope: !505)
!512 = !DILocation(line: 91, column: 6, scope: !505)
!513 = !DILocation(line: 91, column: 14, scope: !505)
!514 = !DILocation(line: 93, column: 21, scope: !505)
!515 = !DILocation(line: 93, column: 24, scope: !505)
!516 = !DILocation(line: 93, column: 12, scope: !505)
!517 = !DILocation(line: 93, column: 3, scope: !505)
!518 = !DILocation(line: 93, column: 6, scope: !505)
!519 = !DILocation(line: 93, column: 10, scope: !505)
!520 = !DILocation(line: 94, column: 14, scope: !505)
!521 = !DILocation(line: 94, column: 17, scope: !505)
!522 = !DILocation(line: 94, column: 24, scope: !505)
!523 = !DILocation(line: 94, column: 27, scope: !505)
!524 = !DILocation(line: 94, column: 35, scope: !505)
!525 = !DILocation(line: 94, column: 21, scope: !505)
!526 = !DILocation(line: 94, column: 3, scope: !505)
!527 = !DILocation(line: 94, column: 6, scope: !505)
!528 = !DILocation(line: 94, column: 12, scope: !505)
!529 = !DILocation(line: 95, column: 3, scope: !505)
!530 = !DILocation(line: 95, column: 6, scope: !505)
!531 = !DILocation(line: 95, column: 15, scope: !505)
!532 = !DILocation(line: 96, column: 10, scope: !505)
!533 = !DILocation(line: 96, column: 3, scope: !505)
!534 = !DILocalVariable(name: "p", scope: !535, file: !3, line: 87, type: !538)
!535 = distinct !DISubprogram(name: "file_name_init", scope: !3, file: !3, line: 85, type: !536, scopeLine: 86, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !544, retainedNodes: !4)
!536 = !DISubroutineType(types: !537)
!537 = !{!538}
!538 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !539, size: 64)
!539 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "file_name", file: !3, line: 34, size: 192, elements: !540)
!540 = !{!541, !542, !543}
!541 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !539, file: !3, line: 36, baseType: !7, size: 64)
!542 = !DIDerivedType(tag: DW_TAG_member, name: "n_alloc", scope: !539, file: !3, line: 37, baseType: !74, size: 64, offset: 64)
!543 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !539, file: !3, line: 38, baseType: !7, size: 64, offset: 128)
!544 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !545, nameTableKind: None)
!545 = !{!546}
!546 = !DIGlobalVariableExpression(var: !547, expr: !DIExpression())
!547 = distinct !DIGlobalVariable(name: "longopts", scope: !544, file: !3, line: 41, type: !548, isLocal: true, isDefinition: true)
!548 = !DICompositeType(tag: DW_TAG_array_type, baseType: !549, size: 1280, elements: !23)
!549 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !550)
!550 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !551)
!551 = !{!552, !553, !554, !555}
!552 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !550, file: !13, line: 52, baseType: !16, size: 64)
!553 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !550, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!554 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !550, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!555 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !550, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!556 = distinct !DISubprogram(name: "robust_getcwd", scope: !3, file: !3, line: 268, type: !557, scopeLine: 269, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!557 = !DISubroutineType(types: !558)
!558 = !{null, !376}
!559 = !DILocalVariable(name: "file_name", arg: 1, scope: !556, file: !3, line: 268, type: !376)
!560 = !DILocation(line: 268, column: 34, scope: !556)
!561 = !DILocalVariable(name: "height", scope: !556, file: !3, line: 270, type: !74)
!562 = !DILocation(line: 270, column: 10, scope: !556)
!563 = !DILocalVariable(name: "dev_ino_buf", scope: !556, file: !3, line: 271, type: !564)
!564 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dev_ino", file: !565, line: 7, size: 128, elements: !566)
!565 = !DIFile(filename: "./lib/dev-ino.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!566 = !{!567, !570}
!567 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !564, file: !565, line: 9, baseType: !568, size: 64)
!568 = !DIDerivedType(tag: DW_TAG_typedef, name: "ino_t", file: !569, line: 47, baseType: !421)
!569 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/sys/types.h", directory: "")
!570 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !564, file: !565, line: 10, baseType: !571, size: 64, offset: 64)
!571 = !DIDerivedType(tag: DW_TAG_typedef, name: "dev_t", file: !569, line: 59, baseType: !418)
!572 = !DILocation(line: 271, column: 18, scope: !556)
!573 = !DILocalVariable(name: "root_dev_ino", scope: !556, file: !3, line: 272, type: !574)
!574 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !564, size: 64)
!575 = !DILocation(line: 272, column: 19, scope: !556)
!576 = !DILocation(line: 272, column: 34, scope: !556)
!577 = !DILocalVariable(name: "dot_sb", scope: !556, file: !3, line: 273, type: !414)
!578 = !DILocation(line: 273, column: 15, scope: !556)
!579 = !DILocation(line: 275, column: 7, scope: !580)
!580 = distinct !DILexicalBlock(scope: !556, file: !3, line: 275, column: 7)
!581 = !DILocation(line: 275, column: 20, scope: !580)
!582 = !DILocation(line: 275, column: 7, scope: !556)
!583 = !DILocation(line: 276, column: 5, scope: !580)
!584 = !DILocation(line: 279, column: 7, scope: !585)
!585 = distinct !DILexicalBlock(scope: !556, file: !3, line: 279, column: 7)
!586 = !DILocation(line: 279, column: 27, scope: !585)
!587 = !DILocation(line: 279, column: 7, scope: !556)
!588 = !DILocation(line: 280, column: 5, scope: !585)
!589 = !DILocation(line: 282, column: 3, scope: !556)
!590 = !DILocation(line: 285, column: 11, scope: !591)
!591 = distinct !DILexicalBlock(scope: !592, file: !3, line: 285, column: 11)
!592 = distinct !DILexicalBlock(scope: !556, file: !3, line: 283, column: 5)
!593 = !DILocation(line: 285, column: 11, scope: !592)
!594 = !DILocation(line: 286, column: 9, scope: !591)
!595 = !DILocation(line: 288, column: 32, scope: !592)
!596 = !DILocation(line: 288, column: 49, scope: !592)
!597 = !DILocation(line: 288, column: 7, scope: !592)
!598 = distinct !{!598, !589, !599}
!599 = !DILocation(line: 289, column: 5, scope: !556)
!600 = !DILocation(line: 292, column: 7, scope: !601)
!601 = distinct !DILexicalBlock(scope: !556, file: !3, line: 292, column: 7)
!602 = !DILocation(line: 292, column: 18, scope: !601)
!603 = !DILocation(line: 292, column: 27, scope: !601)
!604 = !DILocation(line: 292, column: 7, scope: !556)
!605 = !DILocation(line: 293, column: 24, scope: !601)
!606 = !DILocation(line: 293, column: 5, scope: !601)
!607 = !DILocation(line: 294, column: 1, scope: !556)
!608 = !DILocalVariable(name: "file_name", arg: 1, scope: !609, file: !3, line: 268, type: !612)
!609 = distinct !DISubprogram(name: "robust_getcwd", scope: !3, file: !3, line: 268, type: !610, scopeLine: 269, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !618, retainedNodes: !4)
!610 = !DISubroutineType(types: !611)
!611 = !{null, !612}
!612 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !613, size: 64)
!613 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "file_name", file: !3, line: 34, size: 192, elements: !614)
!614 = !{!615, !616, !617}
!615 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !613, file: !3, line: 36, baseType: !7, size: 64)
!616 = !DIDerivedType(tag: DW_TAG_member, name: "n_alloc", scope: !613, file: !3, line: 37, baseType: !74, size: 64, offset: 64)
!617 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !613, file: !3, line: 38, baseType: !7, size: 64, offset: 128)
!618 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !619, nameTableKind: None)
!619 = !{!620}
!620 = !DIGlobalVariableExpression(var: !621, expr: !DIExpression())
!621 = distinct !DIGlobalVariable(name: "longopts", scope: !618, file: !3, line: 41, type: !622, isLocal: true, isDefinition: true)
!622 = !DICompositeType(tag: DW_TAG_array_type, baseType: !623, size: 1280, elements: !23)
!623 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !624)
!624 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !625)
!625 = !{!626, !627, !628, !629}
!626 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !624, file: !13, line: 52, baseType: !16, size: 64)
!627 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !624, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!628 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !624, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!629 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !624, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!630 = !DILocalVariable(name: "height", scope: !609, file: !3, line: 270, type: !74)
!631 = !DILocalVariable(name: "dev_ino_buf", scope: !609, file: !3, line: 271, type: !632)
!632 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dev_ino", file: !565, line: 7, size: 128, elements: !633)
!633 = !{!634, !635}
!634 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !632, file: !565, line: 9, baseType: !568, size: 64)
!635 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !632, file: !565, line: 10, baseType: !571, size: 64, offset: 64)
!636 = !DILocalVariable(name: "root_dev_ino", scope: !609, file: !3, line: 272, type: !637)
!637 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !632, size: 64)
!638 = !DILocalVariable(name: "dot_sb", scope: !609, file: !3, line: 273, type: !639)
!639 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !415, line: 46, size: 1152, elements: !640)
!640 = !{!641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !657, !658, !659}
!641 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !639, file: !415, line: 48, baseType: !418, size: 64)
!642 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !639, file: !415, line: 53, baseType: !421, size: 64, offset: 64)
!643 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !639, file: !415, line: 61, baseType: !423, size: 64, offset: 128)
!644 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !639, file: !415, line: 62, baseType: !425, size: 32, offset: 192)
!645 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !639, file: !415, line: 64, baseType: !427, size: 32, offset: 224)
!646 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !639, file: !415, line: 65, baseType: !429, size: 32, offset: 256)
!647 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !639, file: !415, line: 67, baseType: !19, size: 32, offset: 288)
!648 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !639, file: !415, line: 69, baseType: !418, size: 64, offset: 320)
!649 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !639, file: !415, line: 74, baseType: !433, size: 64, offset: 384)
!650 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !639, file: !415, line: 78, baseType: !436, size: 64, offset: 448)
!651 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !639, file: !415, line: 80, baseType: !438, size: 64, offset: 512)
!652 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !639, file: !415, line: 91, baseType: !653, size: 128, offset: 576)
!653 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !441, line: 10, size: 128, elements: !654)
!654 = !{!655, !656}
!655 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !653, file: !441, line: 12, baseType: !444, size: 64)
!656 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !653, file: !441, line: 16, baseType: !446, size: 64, offset: 64)
!657 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !639, file: !415, line: 92, baseType: !653, size: 128, offset: 704)
!658 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !639, file: !415, line: 93, baseType: !653, size: 128, offset: 832)
!659 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !639, file: !415, line: 106, baseType: !450, size: 192, offset: 960)
!660 = distinct !DISubprogram(name: "file_name_free", scope: !3, file: !3, line: 78, type: !557, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!661 = !DILocalVariable(name: "p", arg: 1, scope: !660, file: !3, line: 78, type: !376)
!662 = !DILocation(line: 78, column: 35, scope: !660)
!663 = !DILocation(line: 80, column: 9, scope: !660)
!664 = !DILocation(line: 80, column: 12, scope: !660)
!665 = !DILocation(line: 80, column: 3, scope: !660)
!666 = !DILocation(line: 81, column: 9, scope: !660)
!667 = !DILocation(line: 81, column: 3, scope: !660)
!668 = !DILocation(line: 82, column: 1, scope: !660)
!669 = distinct !DISubprogram(name: "find_dir_entry", scope: !3, file: !3, line: 153, type: !670, scopeLine: 155, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!670 = !DISubroutineType(types: !671)
!671 = !{null, !672, !376, !74}
!672 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !414, size: 64)
!673 = !DILocalVariable(name: "dot_sb", arg: 1, scope: !669, file: !3, line: 153, type: !672)
!674 = !DILocation(line: 153, column: 30, scope: !669)
!675 = !DILocalVariable(name: "file_name", arg: 2, scope: !669, file: !3, line: 153, type: !376)
!676 = !DILocation(line: 153, column: 56, scope: !669)
!677 = !DILocalVariable(name: "parent_height", arg: 3, scope: !669, file: !3, line: 154, type: !74)
!678 = !DILocation(line: 154, column: 24, scope: !669)
!679 = !DILocalVariable(name: "dirp", scope: !669, file: !3, line: 156, type: !680)
!680 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !681, size: 64)
!681 = !DIDerivedType(tag: DW_TAG_typedef, name: "DIR", file: !682, line: 127, baseType: !683)
!682 = !DIFile(filename: "/usr/include/dirent.h", directory: "")
!683 = !DICompositeType(tag: DW_TAG_structure_type, name: "__dirstream", file: !682, line: 127, flags: DIFlagFwdDecl)
!684 = !DILocation(line: 156, column: 8, scope: !669)
!685 = !DILocalVariable(name: "fd", scope: !669, file: !3, line: 157, type: !19)
!686 = !DILocation(line: 157, column: 7, scope: !669)
!687 = !DILocalVariable(name: "parent_sb", scope: !669, file: !3, line: 158, type: !414)
!688 = !DILocation(line: 158, column: 15, scope: !669)
!689 = !DILocalVariable(name: "use_lstat", scope: !669, file: !3, line: 159, type: !38)
!690 = !DILocation(line: 159, column: 8, scope: !669)
!691 = !DILocalVariable(name: "found", scope: !669, file: !3, line: 160, type: !38)
!692 = !DILocation(line: 160, column: 8, scope: !669)
!693 = !DILocation(line: 162, column: 10, scope: !669)
!694 = !DILocation(line: 162, column: 8, scope: !669)
!695 = !DILocation(line: 163, column: 7, scope: !696)
!696 = distinct !DILexicalBlock(scope: !669, file: !3, line: 163, column: 7)
!697 = !DILocation(line: 163, column: 12, scope: !696)
!698 = !DILocation(line: 163, column: 7, scope: !669)
!699 = !DILocation(line: 164, column: 5, scope: !696)
!700 = !DILocation(line: 167, column: 15, scope: !669)
!701 = !DILocation(line: 167, column: 8, scope: !669)
!702 = !DILocation(line: 167, column: 6, scope: !669)
!703 = !DILocation(line: 168, column: 13, scope: !704)
!704 = distinct !DILexicalBlock(scope: !669, file: !3, line: 168, column: 7)
!705 = !DILocation(line: 168, column: 10, scope: !704)
!706 = !DILocation(line: 168, column: 8, scope: !704)
!707 = !DILocation(line: 168, column: 26, scope: !704)
!708 = !DILocation(line: 168, column: 18, scope: !704)
!709 = !DILocation(line: 168, column: 32, scope: !704)
!710 = !DILocation(line: 168, column: 46, scope: !704)
!711 = !DILocation(line: 168, column: 7, scope: !669)
!712 = !DILocation(line: 169, column: 5, scope: !704)
!713 = !DILocation(line: 172, column: 13, scope: !714)
!714 = distinct !DILexicalBlock(scope: !669, file: !3, line: 172, column: 7)
!715 = !DILocation(line: 172, column: 10, scope: !714)
!716 = !DILocation(line: 172, column: 8, scope: !714)
!717 = !DILocation(line: 172, column: 25, scope: !714)
!718 = !DILocation(line: 172, column: 18, scope: !714)
!719 = !DILocation(line: 172, column: 43, scope: !714)
!720 = !DILocation(line: 172, column: 67, scope: !714)
!721 = !DILocation(line: 172, column: 7, scope: !669)
!722 = !DILocation(line: 173, column: 5, scope: !714)
!723 = !DILocation(line: 178, column: 26, scope: !669)
!724 = !DILocation(line: 178, column: 36, scope: !669)
!725 = !DILocation(line: 178, column: 44, scope: !669)
!726 = !DILocation(line: 178, column: 33, scope: !669)
!727 = !DILocation(line: 178, column: 13, scope: !669)
!728 = !DILocation(line: 180, column: 9, scope: !669)
!729 = !DILocation(line: 181, column: 3, scope: !669)
!730 = !DILocalVariable(name: "dp", scope: !731, file: !3, line: 183, type: !732)
!731 = distinct !DILexicalBlock(scope: !669, file: !3, line: 182, column: 5)
!732 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !733, size: 64)
!733 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !734)
!734 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dirent", file: !735, line: 22, size: 2240, elements: !736)
!735 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/dirent.h", directory: "")
!736 = !{!737, !738, !739, !740, !741}
!737 = !DIDerivedType(tag: DW_TAG_member, name: "d_ino", scope: !734, file: !735, line: 25, baseType: !421, size: 64)
!738 = !DIDerivedType(tag: DW_TAG_member, name: "d_off", scope: !734, file: !735, line: 26, baseType: !433, size: 64, offset: 64)
!739 = !DIDerivedType(tag: DW_TAG_member, name: "d_reclen", scope: !734, file: !735, line: 31, baseType: !73, size: 16, offset: 128)
!740 = !DIDerivedType(tag: DW_TAG_member, name: "d_type", scope: !734, file: !735, line: 32, baseType: !148, size: 8, offset: 144)
!741 = !DIDerivedType(tag: DW_TAG_member, name: "d_name", scope: !734, file: !735, line: 33, baseType: !105, size: 2048, offset: 152)
!742 = !DILocation(line: 183, column: 28, scope: !731)
!743 = !DILocalVariable(name: "ent_sb", scope: !731, file: !3, line: 184, type: !414)
!744 = !DILocation(line: 184, column: 19, scope: !731)
!745 = !DILocalVariable(name: "ino", scope: !731, file: !3, line: 185, type: !568)
!746 = !DILocation(line: 185, column: 13, scope: !731)
!747 = !DILocation(line: 187, column: 7, scope: !731)
!748 = !DILocation(line: 187, column: 13, scope: !731)
!749 = !DILocation(line: 188, column: 50, scope: !750)
!750 = distinct !DILexicalBlock(scope: !731, file: !3, line: 188, column: 11)
!751 = !DILocation(line: 188, column: 17, scope: !750)
!752 = !DILocation(line: 188, column: 15, scope: !750)
!753 = !DILocation(line: 188, column: 57, scope: !750)
!754 = !DILocation(line: 188, column: 11, scope: !731)
!755 = !DILocation(line: 190, column: 15, scope: !756)
!756 = distinct !DILexicalBlock(scope: !757, file: !3, line: 190, column: 15)
!757 = distinct !DILexicalBlock(scope: !750, file: !3, line: 189, column: 9)
!758 = !DILocation(line: 190, column: 15, scope: !757)
!759 = !DILocalVariable(name: "e", scope: !760, file: !3, line: 193, type: !19)
!760 = distinct !DILexicalBlock(scope: !756, file: !3, line: 191, column: 13)
!761 = !DILocation(line: 193, column: 19, scope: !760)
!762 = !DILocation(line: 193, column: 23, scope: !760)
!763 = !DILocation(line: 194, column: 25, scope: !760)
!764 = !DILocation(line: 194, column: 15, scope: !760)
!765 = !DILocation(line: 195, column: 23, scope: !760)
!766 = !DILocation(line: 195, column: 15, scope: !760)
!767 = !DILocation(line: 195, column: 21, scope: !760)
!768 = !DILocation(line: 198, column: 20, scope: !760)
!769 = !DILocation(line: 199, column: 13, scope: !760)
!770 = !DILocation(line: 200, column: 11, scope: !757)
!771 = !DILocation(line: 203, column: 13, scope: !731)
!772 = !DILocation(line: 203, column: 11, scope: !731)
!773 = !DILocation(line: 205, column: 11, scope: !774)
!774 = distinct !DILexicalBlock(scope: !731, file: !3, line: 205, column: 11)
!775 = !DILocation(line: 205, column: 15, scope: !774)
!776 = !DILocation(line: 205, column: 38, scope: !774)
!777 = !DILocation(line: 205, column: 41, scope: !774)
!778 = !DILocation(line: 205, column: 11, scope: !731)
!779 = !DILocation(line: 207, column: 22, scope: !780)
!780 = distinct !DILexicalBlock(scope: !781, file: !3, line: 207, column: 15)
!781 = distinct !DILexicalBlock(scope: !774, file: !3, line: 206, column: 9)
!782 = !DILocation(line: 207, column: 26, scope: !780)
!783 = !DILocation(line: 207, column: 15, scope: !780)
!784 = !DILocation(line: 207, column: 43, scope: !780)
!785 = !DILocation(line: 207, column: 15, scope: !781)
!786 = !DILocation(line: 210, column: 15, scope: !787)
!787 = distinct !DILexicalBlock(scope: !780, file: !3, line: 208, column: 13)
!788 = distinct !{!788, !729, !789}
!789 = !DILocation(line: 226, column: 5, scope: !669)
!790 = !DILocation(line: 212, column: 24, scope: !781)
!791 = !DILocation(line: 212, column: 15, scope: !781)
!792 = !DILocation(line: 213, column: 9, scope: !781)
!793 = !DILocation(line: 215, column: 11, scope: !794)
!794 = distinct !DILexicalBlock(scope: !731, file: !3, line: 215, column: 11)
!795 = !DILocation(line: 215, column: 18, scope: !794)
!796 = !DILocation(line: 215, column: 26, scope: !794)
!797 = !DILocation(line: 215, column: 15, scope: !794)
!798 = !DILocation(line: 215, column: 11, scope: !731)
!799 = !DILocation(line: 216, column: 9, scope: !794)
!800 = !DILocation(line: 220, column: 14, scope: !801)
!801 = distinct !DILexicalBlock(scope: !731, file: !3, line: 220, column: 12)
!802 = !DILocation(line: 220, column: 24, scope: !801)
!803 = !DILocation(line: 220, column: 34, scope: !801)
!804 = !DILocation(line: 220, column: 44, scope: !801)
!805 = !DILocation(line: 220, column: 52, scope: !801)
!806 = !DILocation(line: 220, column: 41, scope: !801)
!807 = !DILocation(line: 220, column: 12, scope: !731)
!808 = !DILocation(line: 222, column: 30, scope: !809)
!809 = distinct !DILexicalBlock(scope: !801, file: !3, line: 221, column: 9)
!810 = !DILocation(line: 222, column: 41, scope: !809)
!811 = !DILocation(line: 222, column: 45, scope: !809)
!812 = !DILocation(line: 222, column: 53, scope: !809)
!813 = !DILocation(line: 222, column: 11, scope: !809)
!814 = !DILocation(line: 223, column: 17, scope: !809)
!815 = !DILocation(line: 224, column: 11, scope: !809)
!816 = !DILocation(line: 228, column: 7, scope: !817)
!817 = distinct !DILexicalBlock(scope: !669, file: !3, line: 228, column: 7)
!818 = !DILocation(line: 228, column: 12, scope: !817)
!819 = !DILocation(line: 228, column: 20, scope: !817)
!820 = !DILocation(line: 228, column: 33, scope: !817)
!821 = !DILocation(line: 228, column: 23, scope: !817)
!822 = !DILocation(line: 228, column: 39, scope: !817)
!823 = !DILocation(line: 228, column: 7, scope: !669)
!824 = !DILocation(line: 232, column: 7, scope: !825)
!825 = distinct !DILexicalBlock(scope: !817, file: !3, line: 229, column: 5)
!826 = !DILocation(line: 236, column: 10, scope: !827)
!827 = distinct !DILexicalBlock(scope: !669, file: !3, line: 236, column: 8)
!828 = !DILocation(line: 236, column: 8, scope: !669)
!829 = !DILocation(line: 237, column: 5, scope: !827)
!830 = !DILocation(line: 241, column: 4, scope: !669)
!831 = !DILocation(line: 241, column: 13, scope: !669)
!832 = !DILocation(line: 242, column: 1, scope: !669)
!833 = !DILocalVariable(name: "dot_sb", arg: 1, scope: !834, file: !3, line: 153, type: !837)
!834 = distinct !DISubprogram(name: "find_dir_entry", scope: !3, file: !3, line: 153, type: !835, scopeLine: 155, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !865, retainedNodes: !4)
!835 = !DISubroutineType(types: !836)
!836 = !{null, !837, !859, !74}
!837 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !838, size: 64)
!838 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !415, line: 46, size: 1152, elements: !839)
!839 = !{!840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !856, !857, !858}
!840 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !838, file: !415, line: 48, baseType: !418, size: 64)
!841 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !838, file: !415, line: 53, baseType: !421, size: 64, offset: 64)
!842 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !838, file: !415, line: 61, baseType: !423, size: 64, offset: 128)
!843 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !838, file: !415, line: 62, baseType: !425, size: 32, offset: 192)
!844 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !838, file: !415, line: 64, baseType: !427, size: 32, offset: 224)
!845 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !838, file: !415, line: 65, baseType: !429, size: 32, offset: 256)
!846 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !838, file: !415, line: 67, baseType: !19, size: 32, offset: 288)
!847 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !838, file: !415, line: 69, baseType: !418, size: 64, offset: 320)
!848 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !838, file: !415, line: 74, baseType: !433, size: 64, offset: 384)
!849 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !838, file: !415, line: 78, baseType: !436, size: 64, offset: 448)
!850 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !838, file: !415, line: 80, baseType: !438, size: 64, offset: 512)
!851 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !838, file: !415, line: 91, baseType: !852, size: 128, offset: 576)
!852 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !441, line: 10, size: 128, elements: !853)
!853 = !{!854, !855}
!854 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !852, file: !441, line: 12, baseType: !444, size: 64)
!855 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !852, file: !441, line: 16, baseType: !446, size: 64, offset: 64)
!856 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !838, file: !415, line: 92, baseType: !852, size: 128, offset: 704)
!857 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !838, file: !415, line: 93, baseType: !852, size: 128, offset: 832)
!858 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !838, file: !415, line: 106, baseType: !450, size: 192, offset: 960)
!859 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !860, size: 64)
!860 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "file_name", file: !3, line: 34, size: 192, elements: !861)
!861 = !{!862, !863, !864}
!862 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !860, file: !3, line: 36, baseType: !7, size: 64)
!863 = !DIDerivedType(tag: DW_TAG_member, name: "n_alloc", scope: !860, file: !3, line: 37, baseType: !74, size: 64, offset: 64)
!864 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !860, file: !3, line: 38, baseType: !7, size: 64, offset: 128)
!865 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !866, nameTableKind: None)
!866 = !{!867}
!867 = !DIGlobalVariableExpression(var: !868, expr: !DIExpression())
!868 = distinct !DIGlobalVariable(name: "longopts", scope: !865, file: !3, line: 41, type: !869, isLocal: true, isDefinition: true)
!869 = !DICompositeType(tag: DW_TAG_array_type, baseType: !870, size: 1280, elements: !23)
!870 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !871)
!871 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !872)
!872 = !{!873, !874, !875, !876}
!873 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !871, file: !13, line: 52, baseType: !16, size: 64)
!874 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !871, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!875 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !871, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!876 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !871, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!877 = !DILocalVariable(name: "file_name", arg: 2, scope: !834, file: !3, line: 153, type: !859)
!878 = !DILocalVariable(name: "parent_height", arg: 3, scope: !834, file: !3, line: 154, type: !74)
!879 = !DILocalVariable(name: "dirp", scope: !834, file: !3, line: 156, type: !680)
!880 = !DILocalVariable(name: "fd", scope: !834, file: !3, line: 157, type: !19)
!881 = !DILocalVariable(name: "parent_sb", scope: !834, file: !3, line: 158, type: !838)
!882 = !DILocalVariable(name: "use_lstat", scope: !834, file: !3, line: 159, type: !38)
!883 = !DILocalVariable(name: "found", scope: !834, file: !3, line: 160, type: !38)
!884 = distinct !DISubprogram(name: "file_name_prepend", scope: !3, file: !3, line: 101, type: !885, scopeLine: 102, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!885 = !DISubroutineType(types: !886)
!886 = !{null, !376, !16, !74}
!887 = !DILocalVariable(name: "p", arg: 1, scope: !884, file: !3, line: 101, type: !376)
!888 = !DILocation(line: 101, column: 38, scope: !884)
!889 = !DILocalVariable(name: "s", arg: 2, scope: !884, file: !3, line: 101, type: !16)
!890 = !DILocation(line: 101, column: 53, scope: !884)
!891 = !DILocalVariable(name: "s_len", arg: 3, scope: !884, file: !3, line: 101, type: !74)
!892 = !DILocation(line: 101, column: 63, scope: !884)
!893 = !DILocalVariable(name: "n_free", scope: !884, file: !3, line: 103, type: !74)
!894 = !DILocation(line: 103, column: 10, scope: !884)
!895 = !DILocation(line: 103, column: 19, scope: !884)
!896 = !DILocation(line: 103, column: 22, scope: !884)
!897 = !DILocation(line: 103, column: 30, scope: !884)
!898 = !DILocation(line: 103, column: 33, scope: !884)
!899 = !DILocation(line: 103, column: 28, scope: !884)
!900 = !DILocation(line: 104, column: 7, scope: !901)
!901 = distinct !DILexicalBlock(scope: !884, file: !3, line: 104, column: 7)
!902 = !DILocation(line: 104, column: 20, scope: !901)
!903 = !DILocation(line: 104, column: 18, scope: !901)
!904 = !DILocation(line: 104, column: 14, scope: !901)
!905 = !DILocation(line: 104, column: 7, scope: !884)
!906 = !DILocalVariable(name: "half", scope: !907, file: !3, line: 106, type: !74)
!907 = distinct !DILexicalBlock(scope: !901, file: !3, line: 105, column: 5)
!908 = !DILocation(line: 106, column: 14, scope: !907)
!909 = !DILocation(line: 106, column: 21, scope: !907)
!910 = !DILocation(line: 106, column: 24, scope: !907)
!911 = !DILocation(line: 106, column: 32, scope: !907)
!912 = !DILocation(line: 106, column: 38, scope: !907)
!913 = !DILocation(line: 106, column: 36, scope: !907)
!914 = !DILocalVariable(name: "q", scope: !907, file: !3, line: 111, type: !7)
!915 = !DILocation(line: 111, column: 13, scope: !907)
!916 = !DILocation(line: 111, column: 30, scope: !907)
!917 = !DILocation(line: 111, column: 17, scope: !907)
!918 = !DILocalVariable(name: "n_used", scope: !907, file: !3, line: 112, type: !74)
!919 = !DILocation(line: 112, column: 14, scope: !907)
!920 = !DILocation(line: 112, column: 23, scope: !907)
!921 = !DILocation(line: 112, column: 26, scope: !907)
!922 = !DILocation(line: 112, column: 36, scope: !907)
!923 = !DILocation(line: 112, column: 34, scope: !907)
!924 = !DILocation(line: 113, column: 18, scope: !907)
!925 = !DILocation(line: 113, column: 26, scope: !907)
!926 = !DILocation(line: 113, column: 24, scope: !907)
!927 = !DILocation(line: 113, column: 20, scope: !907)
!928 = !DILocation(line: 113, column: 33, scope: !907)
!929 = !DILocation(line: 113, column: 31, scope: !907)
!930 = !DILocation(line: 113, column: 7, scope: !907)
!931 = !DILocation(line: 113, column: 10, scope: !907)
!932 = !DILocation(line: 113, column: 16, scope: !907)
!933 = !DILocation(line: 114, column: 15, scope: !907)
!934 = !DILocation(line: 114, column: 18, scope: !907)
!935 = !DILocation(line: 114, column: 25, scope: !907)
!936 = !DILocation(line: 114, column: 28, scope: !907)
!937 = !DILocation(line: 114, column: 34, scope: !907)
!938 = !DILocation(line: 114, column: 32, scope: !907)
!939 = !DILocation(line: 114, column: 42, scope: !907)
!940 = !DILocation(line: 114, column: 7, scope: !907)
!941 = !DILocation(line: 115, column: 13, scope: !907)
!942 = !DILocation(line: 115, column: 16, scope: !907)
!943 = !DILocation(line: 115, column: 7, scope: !907)
!944 = !DILocation(line: 116, column: 16, scope: !907)
!945 = !DILocation(line: 116, column: 7, scope: !907)
!946 = !DILocation(line: 116, column: 10, scope: !907)
!947 = !DILocation(line: 116, column: 14, scope: !907)
!948 = !DILocation(line: 117, column: 24, scope: !907)
!949 = !DILocation(line: 117, column: 22, scope: !907)
!950 = !DILocation(line: 117, column: 7, scope: !907)
!951 = !DILocation(line: 117, column: 10, scope: !907)
!952 = !DILocation(line: 117, column: 18, scope: !907)
!953 = !DILocation(line: 118, column: 5, scope: !907)
!954 = !DILocation(line: 120, column: 19, scope: !884)
!955 = !DILocation(line: 120, column: 17, scope: !884)
!956 = !DILocation(line: 120, column: 3, scope: !884)
!957 = !DILocation(line: 120, column: 6, scope: !884)
!958 = !DILocation(line: 120, column: 12, scope: !884)
!959 = !DILocation(line: 121, column: 3, scope: !884)
!960 = !DILocation(line: 121, column: 6, scope: !884)
!961 = !DILocation(line: 121, column: 15, scope: !884)
!962 = !DILocation(line: 122, column: 11, scope: !884)
!963 = !DILocation(line: 122, column: 14, scope: !884)
!964 = !DILocation(line: 122, column: 20, scope: !884)
!965 = !DILocation(line: 122, column: 25, scope: !884)
!966 = !DILocation(line: 122, column: 28, scope: !884)
!967 = !DILocation(line: 122, column: 3, scope: !884)
!968 = !DILocation(line: 123, column: 1, scope: !884)
!969 = !DILocalVariable(name: "p", arg: 1, scope: !970, file: !3, line: 101, type: !973)
!970 = distinct !DISubprogram(name: "file_name_prepend", scope: !3, file: !3, line: 101, type: !971, scopeLine: 102, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !979, retainedNodes: !4)
!971 = !DISubroutineType(types: !972)
!972 = !{null, !973, !16, !74}
!973 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !974, size: 64)
!974 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "file_name", file: !3, line: 34, size: 192, elements: !975)
!975 = !{!976, !977, !978}
!976 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !974, file: !3, line: 36, baseType: !7, size: 64)
!977 = !DIDerivedType(tag: DW_TAG_member, name: "n_alloc", scope: !974, file: !3, line: 37, baseType: !74, size: 64, offset: 64)
!978 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !974, file: !3, line: 38, baseType: !7, size: 64, offset: 128)
!979 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !980, nameTableKind: None)
!980 = !{!981}
!981 = !DIGlobalVariableExpression(var: !982, expr: !DIExpression())
!982 = distinct !DIGlobalVariable(name: "longopts", scope: !979, file: !3, line: 41, type: !983, isLocal: true, isDefinition: true)
!983 = !DICompositeType(tag: DW_TAG_array_type, baseType: !984, size: 1280, elements: !23)
!984 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !985)
!985 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !986)
!986 = !{!987, !988, !989, !990}
!987 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !985, file: !13, line: 52, baseType: !16, size: 64)
!988 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !985, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!989 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !985, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!990 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !985, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!991 = !DILocalVariable(name: "s", arg: 2, scope: !970, file: !3, line: 101, type: !16)
!992 = !DILocalVariable(name: "s_len", arg: 3, scope: !970, file: !3, line: 101, type: !74)
!993 = !DILocalVariable(name: "n_free", scope: !970, file: !3, line: 103, type: !74)
!994 = !DILocalVariable(name: "q", scope: !995, file: !3, line: 111, type: !7)
!995 = distinct !DILexicalBlock(scope: !996, file: !3, line: 105, column: 5)
!996 = distinct !DILexicalBlock(scope: !997, file: !3, line: 104, column: 7)
!997 = distinct !DISubprogram(name: "file_name_prepend", scope: !3, file: !3, line: 101, type: !998, scopeLine: 102, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1006, retainedNodes: !4)
!998 = !DISubroutineType(types: !999)
!999 = !{null, !1000, !16, !74}
!1000 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1001, size: 64)
!1001 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "file_name", file: !3, line: 34, size: 192, elements: !1002)
!1002 = !{!1003, !1004, !1005}
!1003 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !1001, file: !3, line: 36, baseType: !7, size: 64)
!1004 = !DIDerivedType(tag: DW_TAG_member, name: "n_alloc", scope: !1001, file: !3, line: 37, baseType: !74, size: 64, offset: 64)
!1005 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !1001, file: !3, line: 38, baseType: !7, size: 64, offset: 128)
!1006 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !1007, nameTableKind: None)
!1007 = !{!1008}
!1008 = !DIGlobalVariableExpression(var: !1009, expr: !DIExpression())
!1009 = distinct !DIGlobalVariable(name: "longopts", scope: !1006, file: !3, line: 41, type: !1010, isLocal: true, isDefinition: true)
!1010 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1011, size: 1280, elements: !23)
!1011 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1012)
!1012 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !1013)
!1013 = !{!1014, !1015, !1016, !1017}
!1014 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1012, file: !13, line: 52, baseType: !16, size: 64)
!1015 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !1012, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!1016 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1012, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!1017 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1012, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!1018 = !DILocalVariable(name: "n_used", scope: !995, file: !3, line: 112, type: !74)
!1019 = distinct !DISubprogram(name: "nth_parent", scope: !3, file: !3, line: 127, type: !1020, scopeLine: 128, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!1020 = !DISubroutineType(types: !1021)
!1021 = !{!7, !74}
!1022 = !DILocalVariable(name: "n", arg: 1, scope: !1019, file: !3, line: 127, type: !74)
!1023 = !DILocation(line: 127, column: 20, scope: !1019)
!1024 = !DILocalVariable(name: "buf", scope: !1019, file: !3, line: 129, type: !7)
!1025 = !DILocation(line: 129, column: 9, scope: !1019)
!1026 = !DILocation(line: 129, column: 28, scope: !1019)
!1027 = !DILocation(line: 129, column: 15, scope: !1019)
!1028 = !DILocalVariable(name: "p", scope: !1019, file: !3, line: 130, type: !7)
!1029 = !DILocation(line: 130, column: 9, scope: !1019)
!1030 = !DILocation(line: 130, column: 13, scope: !1019)
!1031 = !DILocalVariable(name: "i", scope: !1032, file: !3, line: 132, type: !74)
!1032 = distinct !DILexicalBlock(scope: !1019, file: !3, line: 132, column: 3)
!1033 = !DILocation(line: 132, column: 15, scope: !1032)
!1034 = !DILocation(line: 132, column: 8, scope: !1032)
!1035 = !DILocation(line: 132, column: 22, scope: !1036)
!1036 = distinct !DILexicalBlock(scope: !1032, file: !3, line: 132, column: 3)
!1037 = !DILocation(line: 132, column: 26, scope: !1036)
!1038 = !DILocation(line: 132, column: 24, scope: !1036)
!1039 = !DILocation(line: 132, column: 3, scope: !1032)
!1040 = !DILocation(line: 134, column: 15, scope: !1041)
!1041 = distinct !DILexicalBlock(scope: !1036, file: !3, line: 133, column: 5)
!1042 = !DILocation(line: 134, column: 7, scope: !1041)
!1043 = !DILocation(line: 135, column: 9, scope: !1041)
!1044 = !DILocation(line: 136, column: 5, scope: !1041)
!1045 = !DILocation(line: 132, column: 30, scope: !1036)
!1046 = !DILocation(line: 132, column: 3, scope: !1036)
!1047 = distinct !{!1047, !1039, !1048}
!1048 = !DILocation(line: 136, column: 5, scope: !1032)
!1049 = !DILocation(line: 137, column: 3, scope: !1019)
!1050 = !DILocation(line: 137, column: 9, scope: !1019)
!1051 = !DILocation(line: 138, column: 10, scope: !1019)
!1052 = !DILocation(line: 138, column: 3, scope: !1019)
!1053 = distinct !DISubprogram(name: "readdir_ignoring_dot_and_dotdot", scope: !198, file: !198, line: 278, type: !1054, scopeLine: 279, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!1054 = !DISubroutineType(types: !1055)
!1055 = !{!732, !680}
!1056 = !DILocalVariable(name: "dirp", arg: 1, scope: !1053, file: !198, line: 278, type: !680)
!1057 = !DILocation(line: 278, column: 39, scope: !1053)
!1058 = !DILocation(line: 280, column: 3, scope: !1053)
!1059 = !DILocalVariable(name: "dp", scope: !1060, file: !198, line: 282, type: !732)
!1060 = distinct !DILexicalBlock(scope: !1053, file: !198, line: 281, column: 5)
!1061 = !DILocation(line: 282, column: 28, scope: !1060)
!1062 = !DILocation(line: 282, column: 42, scope: !1060)
!1063 = !DILocation(line: 282, column: 33, scope: !1060)
!1064 = !DILocation(line: 283, column: 11, scope: !1065)
!1065 = distinct !DILexicalBlock(scope: !1060, file: !198, line: 283, column: 11)
!1066 = !DILocation(line: 283, column: 14, scope: !1065)
!1067 = !DILocation(line: 283, column: 22, scope: !1065)
!1068 = !DILocation(line: 283, column: 42, scope: !1065)
!1069 = !DILocation(line: 283, column: 46, scope: !1065)
!1070 = !DILocation(line: 283, column: 27, scope: !1065)
!1071 = !DILocation(line: 283, column: 11, scope: !1060)
!1072 = !DILocation(line: 284, column: 16, scope: !1065)
!1073 = !DILocation(line: 284, column: 9, scope: !1065)
!1074 = distinct !{!1074, !1058, !1075}
!1075 = !DILocation(line: 285, column: 5, scope: !1053)
!1076 = !DILocalVariable(name: "dirp", arg: 1, scope: !1077, file: !198, line: 278, type: !680)
!1077 = distinct !DISubprogram(name: "readdir_ignoring_dot_and_dotdot", scope: !198, file: !198, line: 278, type: !1078, scopeLine: 279, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1089, retainedNodes: !4)
!1078 = !DISubroutineType(types: !1079)
!1079 = !{!1080, !680}
!1080 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1081, size: 64)
!1081 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1082)
!1082 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dirent", file: !735, line: 22, size: 2240, elements: !1083)
!1083 = !{!1084, !1085, !1086, !1087, !1088}
!1084 = !DIDerivedType(tag: DW_TAG_member, name: "d_ino", scope: !1082, file: !735, line: 25, baseType: !421, size: 64)
!1085 = !DIDerivedType(tag: DW_TAG_member, name: "d_off", scope: !1082, file: !735, line: 26, baseType: !433, size: 64, offset: 64)
!1086 = !DIDerivedType(tag: DW_TAG_member, name: "d_reclen", scope: !1082, file: !735, line: 31, baseType: !73, size: 16, offset: 128)
!1087 = !DIDerivedType(tag: DW_TAG_member, name: "d_type", scope: !1082, file: !735, line: 32, baseType: !148, size: 8, offset: 144)
!1088 = !DIDerivedType(tag: DW_TAG_member, name: "d_name", scope: !1082, file: !735, line: 33, baseType: !105, size: 2048, offset: 152)
!1089 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !1090, nameTableKind: None)
!1090 = !{!1091}
!1091 = !DIGlobalVariableExpression(var: !1092, expr: !DIExpression())
!1092 = distinct !DIGlobalVariable(name: "longopts", scope: !1089, file: !3, line: 41, type: !1093, isLocal: true, isDefinition: true)
!1093 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1094, size: 1280, elements: !23)
!1094 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1095)
!1095 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !1096)
!1096 = !{!1097, !1098, !1099, !1100}
!1097 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1095, file: !13, line: 52, baseType: !16, size: 64)
!1098 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !1095, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!1099 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1095, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!1100 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1095, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!1101 = distinct !DISubprogram(name: "dot_or_dotdot", scope: !198, file: !198, line: 265, type: !1102, scopeLine: 266, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!1102 = !DISubroutineType(types: !1103)
!1103 = !{!38, !16}
!1104 = !DILocalVariable(name: "file_name", arg: 1, scope: !1101, file: !198, line: 265, type: !16)
!1105 = !DILocation(line: 265, column: 28, scope: !1101)
!1106 = !DILocation(line: 267, column: 7, scope: !1107)
!1107 = distinct !DILexicalBlock(scope: !1101, file: !198, line: 267, column: 7)
!1108 = !DILocation(line: 267, column: 20, scope: !1107)
!1109 = !DILocation(line: 267, column: 7, scope: !1101)
!1110 = !DILocalVariable(name: "sep", scope: !1111, file: !198, line: 269, type: !8)
!1111 = distinct !DILexicalBlock(scope: !1107, file: !198, line: 268, column: 5)
!1112 = !DILocation(line: 269, column: 12, scope: !1111)
!1113 = !DILocation(line: 269, column: 18, scope: !1111)
!1114 = !DILocation(line: 269, column: 29, scope: !1111)
!1115 = !DILocation(line: 269, column: 42, scope: !1111)
!1116 = !DILocation(line: 269, column: 50, scope: !1111)
!1117 = !DILocation(line: 270, column: 17, scope: !1111)
!1118 = !DILocation(line: 270, column: 21, scope: !1111)
!1119 = !DILocation(line: 270, column: 24, scope: !1111)
!1120 = !DILocation(line: 270, column: 7, scope: !1111)
!1121 = !DILocation(line: 273, column: 5, scope: !1107)
!1122 = !DILocation(line: 274, column: 1, scope: !1101)
!1123 = !DILocalVariable(name: "file_name", arg: 1, scope: !1124, file: !198, line: 265, type: !16)
!1124 = distinct !DISubprogram(name: "dot_or_dotdot", scope: !198, file: !198, line: 265, type: !1102, scopeLine: 266, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1125, retainedNodes: !4)
!1125 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !1126, nameTableKind: None)
!1126 = !{!1127}
!1127 = !DIGlobalVariableExpression(var: !1128, expr: !DIExpression())
!1128 = distinct !DIGlobalVariable(name: "longopts", scope: !1125, file: !3, line: 41, type: !1129, isLocal: true, isDefinition: true)
!1129 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1130, size: 1280, elements: !23)
!1130 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1131)
!1131 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !1132)
!1132 = !{!1133, !1134, !1135, !1136}
!1133 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1131, file: !13, line: 52, baseType: !16, size: 64)
!1134 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !1131, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!1135 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1131, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!1136 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1131, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!1137 = distinct !DISubprogram(name: "close_stdout", scope: !37, file: !37, line: 117, type: !1138, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !32, retainedNodes: !4)
!1138 = !DISubroutineType(types: !1139)
!1139 = !{null}
!1140 = !DILocation(line: 119, column: 21, scope: !1141)
!1141 = distinct !DILexicalBlock(scope: !1137, file: !37, line: 119, column: 7)
!1142 = !DILocation(line: 119, column: 7, scope: !1141)
!1143 = !DILocation(line: 119, column: 29, scope: !1141)
!1144 = !DILocation(line: 120, column: 7, scope: !1141)
!1145 = !DILocation(line: 120, column: 12, scope: !1141)
!1146 = !DILocation(line: 120, column: 25, scope: !1141)
!1147 = !DILocation(line: 120, column: 28, scope: !1141)
!1148 = !DILocation(line: 120, column: 34, scope: !1141)
!1149 = !DILocation(line: 119, column: 7, scope: !1137)
!1150 = !DILocalVariable(name: "write_error", scope: !1151, file: !37, line: 122, type: !16)
!1151 = distinct !DILexicalBlock(scope: !1141, file: !37, line: 121, column: 5)
!1152 = !DILocation(line: 122, column: 19, scope: !1151)
!1153 = !DILocation(line: 122, column: 33, scope: !1151)
!1154 = !DILocation(line: 123, column: 11, scope: !1155)
!1155 = distinct !DILexicalBlock(scope: !1151, file: !37, line: 123, column: 11)
!1156 = !DILocation(line: 123, column: 11, scope: !1151)
!1157 = !DILocation(line: 124, column: 19, scope: !1155)
!1158 = !DILocation(line: 124, column: 52, scope: !1155)
!1159 = !DILocation(line: 124, column: 36, scope: !1155)
!1160 = !DILocation(line: 125, column: 16, scope: !1155)
!1161 = !DILocation(line: 124, column: 9, scope: !1155)
!1162 = !DILocation(line: 127, column: 19, scope: !1155)
!1163 = !DILocation(line: 127, column: 32, scope: !1155)
!1164 = !DILocation(line: 127, column: 9, scope: !1155)
!1165 = !DILocation(line: 129, column: 14, scope: !1151)
!1166 = !DILocation(line: 129, column: 7, scope: !1151)
!1167 = !DILocation(line: 134, column: 42, scope: !1168)
!1168 = distinct !DILexicalBlock(scope: !1137, file: !37, line: 134, column: 7)
!1169 = !DILocation(line: 134, column: 28, scope: !1168)
!1170 = !DILocation(line: 134, column: 50, scope: !1168)
!1171 = !DILocation(line: 134, column: 7, scope: !1137)
!1172 = !DILocation(line: 135, column: 12, scope: !1168)
!1173 = !DILocation(line: 135, column: 5, scope: !1168)
!1174 = !DILocation(line: 136, column: 1, scope: !1137)
!1175 = distinct !DISubprogram(name: "set_program_name", scope: !51, file: !51, line: 39, type: !199, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !48, retainedNodes: !4)
!1176 = !DILocalVariable(name: "argv0", arg: 1, scope: !1175, file: !51, line: 39, type: !16)
!1177 = !DILocation(line: 39, column: 31, scope: !1175)
!1178 = !DILocalVariable(name: "slash", scope: !1175, file: !51, line: 46, type: !16)
!1179 = !DILocation(line: 46, column: 15, scope: !1175)
!1180 = !DILocalVariable(name: "base", scope: !1175, file: !51, line: 47, type: !16)
!1181 = !DILocation(line: 47, column: 15, scope: !1175)
!1182 = !DILocation(line: 51, column: 7, scope: !1183)
!1183 = distinct !DILexicalBlock(scope: !1175, file: !51, line: 51, column: 7)
!1184 = !DILocation(line: 51, column: 13, scope: !1183)
!1185 = !DILocation(line: 51, column: 7, scope: !1175)
!1186 = !DILocation(line: 55, column: 14, scope: !1187)
!1187 = distinct !DILexicalBlock(scope: !1183, file: !51, line: 52, column: 5)
!1188 = !DILocation(line: 54, column: 7, scope: !1187)
!1189 = !DILocation(line: 56, column: 7, scope: !1187)
!1190 = !DILocation(line: 59, column: 20, scope: !1175)
!1191 = !DILocation(line: 59, column: 11, scope: !1175)
!1192 = !DILocation(line: 59, column: 9, scope: !1175)
!1193 = !DILocation(line: 60, column: 11, scope: !1175)
!1194 = !DILocation(line: 60, column: 17, scope: !1175)
!1195 = !DILocation(line: 60, column: 27, scope: !1175)
!1196 = !DILocation(line: 60, column: 33, scope: !1175)
!1197 = !DILocation(line: 60, column: 39, scope: !1175)
!1198 = !DILocation(line: 60, column: 8, scope: !1175)
!1199 = !DILocation(line: 61, column: 7, scope: !1200)
!1200 = distinct !DILexicalBlock(scope: !1175, file: !51, line: 61, column: 7)
!1201 = !DILocation(line: 61, column: 14, scope: !1200)
!1202 = !DILocation(line: 61, column: 12, scope: !1200)
!1203 = !DILocation(line: 61, column: 20, scope: !1200)
!1204 = !DILocation(line: 61, column: 25, scope: !1200)
!1205 = !DILocation(line: 61, column: 37, scope: !1200)
!1206 = !DILocation(line: 61, column: 42, scope: !1200)
!1207 = !DILocation(line: 61, column: 28, scope: !1200)
!1208 = !DILocation(line: 61, column: 61, scope: !1200)
!1209 = !DILocation(line: 61, column: 7, scope: !1175)
!1210 = !DILocation(line: 63, column: 15, scope: !1211)
!1211 = distinct !DILexicalBlock(scope: !1200, file: !51, line: 62, column: 5)
!1212 = !DILocation(line: 63, column: 13, scope: !1211)
!1213 = !DILocation(line: 64, column: 20, scope: !1214)
!1214 = distinct !DILexicalBlock(scope: !1211, file: !51, line: 64, column: 11)
!1215 = !DILocation(line: 64, column: 11, scope: !1214)
!1216 = !DILocation(line: 64, column: 36, scope: !1214)
!1217 = !DILocation(line: 64, column: 11, scope: !1211)
!1218 = !DILocation(line: 66, column: 19, scope: !1219)
!1219 = distinct !DILexicalBlock(scope: !1214, file: !51, line: 65, column: 9)
!1220 = !DILocation(line: 66, column: 24, scope: !1219)
!1221 = !DILocation(line: 66, column: 17, scope: !1219)
!1222 = !DILocation(line: 70, column: 52, scope: !1219)
!1223 = !DILocation(line: 70, column: 41, scope: !1219)
!1224 = !DILocation(line: 72, column: 9, scope: !1219)
!1225 = !DILocation(line: 73, column: 5, scope: !1211)
!1226 = !DILocation(line: 84, column: 18, scope: !1175)
!1227 = !DILocation(line: 84, column: 16, scope: !1175)
!1228 = !DILocation(line: 90, column: 38, scope: !1175)
!1229 = !DILocation(line: 90, column: 27, scope: !1175)
!1230 = !DILocation(line: 92, column: 1, scope: !1175)
!1231 = !DILocalVariable(name: "argv0", arg: 1, scope: !1232, file: !51, line: 39, type: !16)
!1232 = distinct !DISubprogram(name: "set_program_name", scope: !51, file: !51, line: 39, type: !199, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1233, retainedNodes: !4)
!1233 = distinct !DICompileUnit(language: DW_LANG_C99, file: !49, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !1234, nameTableKind: None)
!1234 = !{!1235}
!1235 = !DIGlobalVariableExpression(var: !1236, expr: !DIExpression())
!1236 = distinct !DIGlobalVariable(name: "program_name", scope: !1233, file: !51, line: 33, type: !16, isLocal: false, isDefinition: true)
!1237 = !DILocalVariable(name: "slash", scope: !1232, file: !51, line: 46, type: !16)
!1238 = !DILocalVariable(name: "base", scope: !1232, file: !51, line: 47, type: !16)
!1239 = distinct !DISubprogram(name: "set_char_quoting", scope: !80, file: !80, line: 152, type: !1240, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !4)
!1240 = !DISubroutineType(types: !1241)
!1241 = !{!19, !1242, !8, !19}
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !93, size: 64)
!1243 = !DILocalVariable(name: "o", arg: 1, scope: !1239, file: !80, line: 152, type: !1242)
!1244 = !DILocation(line: 152, column: 43, scope: !1239)
!1245 = !DILocalVariable(name: "c", arg: 2, scope: !1239, file: !80, line: 152, type: !8)
!1246 = !DILocation(line: 152, column: 51, scope: !1239)
!1247 = !DILocalVariable(name: "i", arg: 3, scope: !1239, file: !80, line: 152, type: !19)
!1248 = !DILocation(line: 152, column: 58, scope: !1239)
!1249 = !DILocalVariable(name: "uc", scope: !1239, file: !80, line: 154, type: !148)
!1250 = !DILocation(line: 154, column: 17, scope: !1239)
!1251 = !DILocation(line: 154, column: 22, scope: !1239)
!1252 = !DILocalVariable(name: "p", scope: !1239, file: !80, line: 155, type: !1253)
!1253 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !59, size: 64)
!1254 = !DILocation(line: 155, column: 17, scope: !1239)
!1255 = !DILocation(line: 156, column: 6, scope: !1239)
!1256 = !DILocation(line: 156, column: 10, scope: !1239)
!1257 = !DILocation(line: 156, column: 41, scope: !1239)
!1258 = !DILocation(line: 156, column: 5, scope: !1239)
!1259 = !DILocation(line: 156, column: 59, scope: !1239)
!1260 = !DILocation(line: 156, column: 62, scope: !1239)
!1261 = !DILocation(line: 156, column: 57, scope: !1239)
!1262 = !DILocalVariable(name: "shift", scope: !1239, file: !80, line: 157, type: !19)
!1263 = !DILocation(line: 157, column: 7, scope: !1239)
!1264 = !DILocation(line: 157, column: 15, scope: !1239)
!1265 = !DILocation(line: 157, column: 18, scope: !1239)
!1266 = !DILocalVariable(name: "r", scope: !1239, file: !80, line: 158, type: !19)
!1267 = !DILocation(line: 158, column: 7, scope: !1239)
!1268 = !DILocation(line: 158, column: 13, scope: !1239)
!1269 = !DILocation(line: 158, column: 12, scope: !1239)
!1270 = !DILocation(line: 158, column: 18, scope: !1239)
!1271 = !DILocation(line: 158, column: 15, scope: !1239)
!1272 = !DILocation(line: 158, column: 25, scope: !1239)
!1273 = !DILocation(line: 159, column: 11, scope: !1239)
!1274 = !DILocation(line: 159, column: 13, scope: !1239)
!1275 = !DILocation(line: 159, column: 20, scope: !1239)
!1276 = !DILocation(line: 159, column: 18, scope: !1239)
!1277 = !DILocation(line: 159, column: 26, scope: !1239)
!1278 = !DILocation(line: 159, column: 23, scope: !1239)
!1279 = !DILocation(line: 159, column: 4, scope: !1239)
!1280 = !DILocation(line: 159, column: 6, scope: !1239)
!1281 = !DILocation(line: 160, column: 10, scope: !1239)
!1282 = !DILocation(line: 160, column: 3, scope: !1239)
!1283 = !DILocalVariable(name: "shift", scope: !1284, file: !80, line: 157, type: !19)
!1284 = distinct !DISubprogram(name: "set_char_quoting", scope: !80, file: !80, line: 152, type: !1285, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1295, retainedNodes: !4)
!1285 = !DISubroutineType(types: !1286)
!1286 = !{!19, !1287, !8, !19}
!1287 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1288, size: 64)
!1288 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !1289)
!1289 = !{!1290, !1291, !1292, !1293, !1294}
!1290 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1288, file: !80, line: 68, baseType: !57, size: 32)
!1291 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1288, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1288, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!1293 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1288, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!1294 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1288, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!1295 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !1296, nameTableKind: None)
!1296 = !{!1297, !1299, !1301, !1303, !1305, !1307, !1314, !1316}
!1297 = !DIGlobalVariableExpression(var: !1298, expr: !DIExpression())
!1298 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1295, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!1299 = !DIGlobalVariableExpression(var: !1300, expr: !DIExpression())
!1300 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1295, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!1301 = !DIGlobalVariableExpression(var: !1302, expr: !DIExpression())
!1302 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1295, file: !80, line: 1052, type: !1288, isLocal: false, isDefinition: true)
!1303 = !DIGlobalVariableExpression(var: !1304, expr: !DIExpression())
!1304 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1295, file: !80, line: 116, type: !1288, isLocal: true, isDefinition: true)
!1305 = !DIGlobalVariableExpression(var: !1306, expr: !DIExpression())
!1306 = distinct !DIGlobalVariable(name: "slot0", scope: !1295, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!1307 = !DIGlobalVariableExpression(var: !1308, expr: !DIExpression())
!1308 = distinct !DIGlobalVariable(name: "slotvec", scope: !1295, file: !80, line: 845, type: !1309, isLocal: true, isDefinition: true)
!1309 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1310, size: 64)
!1310 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !1311)
!1311 = !{!1312, !1313}
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1310, file: !80, line: 836, baseType: !74, size: 64)
!1313 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1310, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!1314 = !DIGlobalVariableExpression(var: !1315, expr: !DIExpression())
!1315 = distinct !DIGlobalVariable(name: "nslots", scope: !1295, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!1316 = !DIGlobalVariableExpression(var: !1317, expr: !DIExpression())
!1317 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1295, file: !80, line: 844, type: !1310, isLocal: true, isDefinition: true)
!1318 = !DILocalVariable(name: "r", scope: !1284, file: !80, line: 158, type: !19)
!1319 = distinct !DISubprogram(name: "quotearg_n_style", scope: !80, file: !80, line: 955, type: !1320, scopeLine: 956, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !4)
!1320 = !DISubroutineType(types: !1321)
!1321 = !{!7, !19, !57, !16}
!1322 = !DILocalVariable(name: "n", arg: 1, scope: !1319, file: !80, line: 955, type: !19)
!1323 = !DILocation(line: 955, column: 23, scope: !1319)
!1324 = !DILocalVariable(name: "s", arg: 2, scope: !1319, file: !80, line: 955, type: !57)
!1325 = !DILocation(line: 955, column: 45, scope: !1319)
!1326 = !DILocalVariable(name: "arg", arg: 3, scope: !1319, file: !80, line: 955, type: !16)
!1327 = !DILocation(line: 955, column: 60, scope: !1319)
!1328 = !DILocalVariable(name: "o", scope: !1319, file: !80, line: 957, type: !1329)
!1329 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !93)
!1330 = !DILocation(line: 957, column: 32, scope: !1319)
!1331 = !DILocation(line: 957, column: 64, scope: !1319)
!1332 = !DILocation(line: 957, column: 36, scope: !1319)
!1333 = !DILocation(line: 958, column: 30, scope: !1319)
!1334 = !DILocation(line: 958, column: 33, scope: !1319)
!1335 = !DILocation(line: 958, column: 10, scope: !1319)
!1336 = !DILocation(line: 958, column: 3, scope: !1319)
!1337 = !DILocalVariable(name: "n", arg: 1, scope: !1338, file: !80, line: 955, type: !19)
!1338 = distinct !DISubprogram(name: "quotearg_n_style", scope: !80, file: !80, line: 955, type: !1320, scopeLine: 956, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1339, retainedNodes: !4)
!1339 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !1340, nameTableKind: None)
!1340 = !{!1341, !1343, !1345, !1354, !1356, !1358, !1365, !1367}
!1341 = !DIGlobalVariableExpression(var: !1342, expr: !DIExpression())
!1342 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1339, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!1343 = !DIGlobalVariableExpression(var: !1344, expr: !DIExpression())
!1344 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1339, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!1345 = !DIGlobalVariableExpression(var: !1346, expr: !DIExpression())
!1346 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1339, file: !80, line: 1052, type: !1347, isLocal: false, isDefinition: true)
!1347 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !1348)
!1348 = !{!1349, !1350, !1351, !1352, !1353}
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1347, file: !80, line: 68, baseType: !57, size: 32)
!1350 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1347, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!1351 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1347, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1347, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!1353 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1347, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!1354 = !DIGlobalVariableExpression(var: !1355, expr: !DIExpression())
!1355 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1339, file: !80, line: 116, type: !1347, isLocal: true, isDefinition: true)
!1356 = !DIGlobalVariableExpression(var: !1357, expr: !DIExpression())
!1357 = distinct !DIGlobalVariable(name: "slot0", scope: !1339, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!1358 = !DIGlobalVariableExpression(var: !1359, expr: !DIExpression())
!1359 = distinct !DIGlobalVariable(name: "slotvec", scope: !1339, file: !80, line: 845, type: !1360, isLocal: true, isDefinition: true)
!1360 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1361, size: 64)
!1361 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !1362)
!1362 = !{!1363, !1364}
!1363 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1361, file: !80, line: 836, baseType: !74, size: 64)
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1361, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!1365 = !DIGlobalVariableExpression(var: !1366, expr: !DIExpression())
!1366 = distinct !DIGlobalVariable(name: "nslots", scope: !1339, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!1367 = !DIGlobalVariableExpression(var: !1368, expr: !DIExpression())
!1368 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1339, file: !80, line: 844, type: !1361, isLocal: true, isDefinition: true)
!1369 = !DILocalVariable(name: "s", arg: 2, scope: !1338, file: !80, line: 955, type: !57)
!1370 = !DILocalVariable(name: "arg", arg: 3, scope: !1338, file: !80, line: 955, type: !16)
!1371 = !DILocalVariable(name: "o", scope: !1338, file: !80, line: 957, type: !1372)
!1372 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1347)
!1373 = distinct !DISubprogram(name: "quoting_options_from_style", scope: !80, file: !80, line: 193, type: !1374, scopeLine: 194, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !4)
!1374 = !DISubroutineType(types: !1375)
!1375 = !{!93, !57}
!1376 = !DILocalVariable(name: "style", arg: 1, scope: !1373, file: !80, line: 193, type: !57)
!1377 = !DILocation(line: 193, column: 48, scope: !1373)
!1378 = !DILocalVariable(name: "o", scope: !1373, file: !80, line: 195, type: !93)
!1379 = !DILocation(line: 195, column: 26, scope: !1373)
!1380 = !DILocation(line: 196, column: 7, scope: !1381)
!1381 = distinct !DILexicalBlock(scope: !1373, file: !80, line: 196, column: 7)
!1382 = !DILocation(line: 196, column: 13, scope: !1381)
!1383 = !DILocation(line: 196, column: 7, scope: !1373)
!1384 = !DILocation(line: 197, column: 5, scope: !1381)
!1385 = !DILocation(line: 198, column: 13, scope: !1373)
!1386 = !DILocation(line: 198, column: 5, scope: !1373)
!1387 = !DILocation(line: 198, column: 11, scope: !1373)
!1388 = !DILocation(line: 199, column: 3, scope: !1373)
!1389 = distinct !DISubprogram(name: "quotearg_n_options", scope: !80, file: !80, line: 877, type: !1390, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !4)
!1390 = !DISubroutineType(types: !1391)
!1391 = !{!7, !19, !16, !74, !1392}
!1392 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1329, size: 64)
!1393 = !DILocalVariable(name: "n", arg: 1, scope: !1389, file: !80, line: 877, type: !19)
!1394 = !DILocation(line: 877, column: 25, scope: !1389)
!1395 = !DILocalVariable(name: "arg", arg: 2, scope: !1389, file: !80, line: 877, type: !16)
!1396 = !DILocation(line: 877, column: 40, scope: !1389)
!1397 = !DILocalVariable(name: "argsize", arg: 3, scope: !1389, file: !80, line: 877, type: !74)
!1398 = !DILocation(line: 877, column: 52, scope: !1389)
!1399 = !DILocalVariable(name: "options", arg: 4, scope: !1389, file: !80, line: 878, type: !1392)
!1400 = !DILocation(line: 878, column: 51, scope: !1389)
!1401 = !DILocalVariable(name: "e", scope: !1389, file: !80, line: 880, type: !19)
!1402 = !DILocation(line: 880, column: 7, scope: !1389)
!1403 = !DILocation(line: 880, column: 11, scope: !1389)
!1404 = !DILocalVariable(name: "sv", scope: !1389, file: !80, line: 882, type: !110)
!1405 = !DILocation(line: 882, column: 19, scope: !1389)
!1406 = !DILocation(line: 882, column: 24, scope: !1389)
!1407 = !DILocation(line: 884, column: 7, scope: !1408)
!1408 = distinct !DILexicalBlock(scope: !1389, file: !80, line: 884, column: 7)
!1409 = !DILocation(line: 884, column: 9, scope: !1408)
!1410 = !DILocation(line: 884, column: 7, scope: !1389)
!1411 = !DILocation(line: 885, column: 5, scope: !1408)
!1412 = !DILocation(line: 887, column: 7, scope: !1413)
!1413 = distinct !DILexicalBlock(scope: !1389, file: !80, line: 887, column: 7)
!1414 = !DILocation(line: 887, column: 17, scope: !1413)
!1415 = !DILocation(line: 887, column: 14, scope: !1413)
!1416 = !DILocation(line: 887, column: 7, scope: !1389)
!1417 = !DILocalVariable(name: "preallocated", scope: !1418, file: !80, line: 889, type: !38)
!1418 = distinct !DILexicalBlock(scope: !1413, file: !80, line: 888, column: 5)
!1419 = !DILocation(line: 889, column: 12, scope: !1418)
!1420 = !DILocation(line: 889, column: 28, scope: !1418)
!1421 = !DILocation(line: 889, column: 31, scope: !1418)
!1422 = !DILocalVariable(name: "nmax", scope: !1418, file: !80, line: 890, type: !19)
!1423 = !DILocation(line: 890, column: 11, scope: !1418)
!1424 = !DILocation(line: 892, column: 11, scope: !1425)
!1425 = distinct !DILexicalBlock(scope: !1418, file: !80, line: 892, column: 11)
!1426 = !DILocation(line: 892, column: 18, scope: !1425)
!1427 = !DILocation(line: 892, column: 16, scope: !1425)
!1428 = !DILocation(line: 892, column: 11, scope: !1418)
!1429 = !DILocation(line: 893, column: 9, scope: !1425)
!1430 = !DILocation(line: 895, column: 32, scope: !1418)
!1431 = !DILocation(line: 895, column: 54, scope: !1418)
!1432 = !DILocation(line: 895, column: 59, scope: !1418)
!1433 = !DILocation(line: 895, column: 61, scope: !1418)
!1434 = !DILocation(line: 895, column: 58, scope: !1418)
!1435 = !DILocation(line: 895, column: 66, scope: !1418)
!1436 = !DILocation(line: 895, column: 22, scope: !1418)
!1437 = !DILocation(line: 895, column: 20, scope: !1418)
!1438 = !DILocation(line: 895, column: 15, scope: !1418)
!1439 = !DILocation(line: 896, column: 11, scope: !1440)
!1440 = distinct !DILexicalBlock(scope: !1418, file: !80, line: 896, column: 11)
!1441 = !DILocation(line: 896, column: 11, scope: !1418)
!1442 = !DILocation(line: 897, column: 10, scope: !1440)
!1443 = !DILocation(line: 897, column: 15, scope: !1440)
!1444 = !DILocation(line: 897, column: 9, scope: !1440)
!1445 = !DILocation(line: 898, column: 15, scope: !1418)
!1446 = !DILocation(line: 898, column: 20, scope: !1418)
!1447 = !DILocation(line: 898, column: 18, scope: !1418)
!1448 = !DILocation(line: 898, column: 7, scope: !1418)
!1449 = !DILocation(line: 898, column: 32, scope: !1418)
!1450 = !DILocation(line: 898, column: 34, scope: !1418)
!1451 = !DILocation(line: 898, column: 40, scope: !1418)
!1452 = !DILocation(line: 898, column: 38, scope: !1418)
!1453 = !DILocation(line: 898, column: 31, scope: !1418)
!1454 = !DILocation(line: 898, column: 48, scope: !1418)
!1455 = !DILocation(line: 899, column: 16, scope: !1418)
!1456 = !DILocation(line: 899, column: 18, scope: !1418)
!1457 = !DILocation(line: 899, column: 14, scope: !1418)
!1458 = !DILocation(line: 900, column: 5, scope: !1418)
!1459 = !DILocalVariable(name: "size", scope: !1460, file: !80, line: 903, type: !74)
!1460 = distinct !DILexicalBlock(scope: !1389, file: !80, line: 902, column: 3)
!1461 = !DILocation(line: 903, column: 12, scope: !1460)
!1462 = !DILocation(line: 903, column: 19, scope: !1460)
!1463 = !DILocation(line: 903, column: 22, scope: !1460)
!1464 = !DILocation(line: 903, column: 25, scope: !1460)
!1465 = !DILocalVariable(name: "val", scope: !1460, file: !80, line: 904, type: !7)
!1466 = !DILocation(line: 904, column: 11, scope: !1460)
!1467 = !DILocation(line: 904, column: 17, scope: !1460)
!1468 = !DILocation(line: 904, column: 20, scope: !1460)
!1469 = !DILocation(line: 904, column: 23, scope: !1460)
!1470 = !DILocalVariable(name: "flags", scope: !1460, file: !80, line: 906, type: !19)
!1471 = !DILocation(line: 906, column: 9, scope: !1460)
!1472 = !DILocation(line: 906, column: 17, scope: !1460)
!1473 = !DILocation(line: 906, column: 26, scope: !1460)
!1474 = !DILocation(line: 906, column: 32, scope: !1460)
!1475 = !DILocalVariable(name: "qsize", scope: !1460, file: !80, line: 907, type: !74)
!1476 = !DILocation(line: 907, column: 12, scope: !1460)
!1477 = !DILocation(line: 907, column: 46, scope: !1460)
!1478 = !DILocation(line: 907, column: 51, scope: !1460)
!1479 = !DILocation(line: 907, column: 57, scope: !1460)
!1480 = !DILocation(line: 907, column: 62, scope: !1460)
!1481 = !DILocation(line: 908, column: 46, scope: !1460)
!1482 = !DILocation(line: 908, column: 55, scope: !1460)
!1483 = !DILocation(line: 908, column: 62, scope: !1460)
!1484 = !DILocation(line: 909, column: 46, scope: !1460)
!1485 = !DILocation(line: 909, column: 55, scope: !1460)
!1486 = !DILocation(line: 910, column: 46, scope: !1460)
!1487 = !DILocation(line: 910, column: 55, scope: !1460)
!1488 = !DILocation(line: 911, column: 46, scope: !1460)
!1489 = !DILocation(line: 911, column: 55, scope: !1460)
!1490 = !DILocation(line: 907, column: 20, scope: !1460)
!1491 = !DILocation(line: 913, column: 9, scope: !1492)
!1492 = distinct !DILexicalBlock(scope: !1460, file: !80, line: 913, column: 9)
!1493 = !DILocation(line: 913, column: 17, scope: !1492)
!1494 = !DILocation(line: 913, column: 14, scope: !1492)
!1495 = !DILocation(line: 913, column: 9, scope: !1460)
!1496 = !DILocation(line: 915, column: 29, scope: !1497)
!1497 = distinct !DILexicalBlock(scope: !1492, file: !80, line: 914, column: 7)
!1498 = !DILocation(line: 915, column: 35, scope: !1497)
!1499 = !DILocation(line: 915, column: 27, scope: !1497)
!1500 = !DILocation(line: 915, column: 9, scope: !1497)
!1501 = !DILocation(line: 915, column: 12, scope: !1497)
!1502 = !DILocation(line: 915, column: 15, scope: !1497)
!1503 = !DILocation(line: 915, column: 20, scope: !1497)
!1504 = !DILocation(line: 916, column: 13, scope: !1505)
!1505 = distinct !DILexicalBlock(scope: !1497, file: !80, line: 916, column: 13)
!1506 = !DILocation(line: 916, column: 17, scope: !1505)
!1507 = !DILocation(line: 916, column: 13, scope: !1497)
!1508 = !DILocation(line: 917, column: 17, scope: !1505)
!1509 = !DILocation(line: 917, column: 11, scope: !1505)
!1510 = !DILocation(line: 918, column: 39, scope: !1497)
!1511 = !DILocation(line: 918, column: 27, scope: !1497)
!1512 = !DILocation(line: 918, column: 25, scope: !1497)
!1513 = !DILocation(line: 918, column: 9, scope: !1497)
!1514 = !DILocation(line: 918, column: 12, scope: !1497)
!1515 = !DILocation(line: 918, column: 15, scope: !1497)
!1516 = !DILocation(line: 918, column: 19, scope: !1497)
!1517 = !DILocation(line: 919, column: 35, scope: !1497)
!1518 = !DILocation(line: 919, column: 40, scope: !1497)
!1519 = !DILocation(line: 919, column: 46, scope: !1497)
!1520 = !DILocation(line: 919, column: 51, scope: !1497)
!1521 = !DILocation(line: 919, column: 60, scope: !1497)
!1522 = !DILocation(line: 919, column: 69, scope: !1497)
!1523 = !DILocation(line: 920, column: 35, scope: !1497)
!1524 = !DILocation(line: 920, column: 42, scope: !1497)
!1525 = !DILocation(line: 920, column: 51, scope: !1497)
!1526 = !DILocation(line: 921, column: 35, scope: !1497)
!1527 = !DILocation(line: 921, column: 44, scope: !1497)
!1528 = !DILocation(line: 922, column: 35, scope: !1497)
!1529 = !DILocation(line: 922, column: 44, scope: !1497)
!1530 = !DILocation(line: 919, column: 9, scope: !1497)
!1531 = !DILocation(line: 923, column: 7, scope: !1497)
!1532 = !DILocation(line: 925, column: 13, scope: !1460)
!1533 = !DILocation(line: 925, column: 5, scope: !1460)
!1534 = !DILocation(line: 925, column: 11, scope: !1460)
!1535 = !DILocation(line: 926, column: 12, scope: !1460)
!1536 = !DILocation(line: 926, column: 5, scope: !1460)
!1537 = !DILocalVariable(name: "nmax", scope: !1538, file: !80, line: 890, type: !19)
!1538 = distinct !DILexicalBlock(scope: !1539, file: !80, line: 888, column: 5)
!1539 = distinct !DILexicalBlock(scope: !1540, file: !80, line: 887, column: 7)
!1540 = distinct !DISubprogram(name: "quotearg_n_options", scope: !80, file: !80, line: 877, type: !1541, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1552, retainedNodes: !4)
!1541 = !DISubroutineType(types: !1542)
!1542 = !{!7, !19, !16, !74, !1543}
!1543 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1544, size: 64)
!1544 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1545)
!1545 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !1546)
!1546 = !{!1547, !1548, !1549, !1550, !1551}
!1547 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1545, file: !80, line: 68, baseType: !57, size: 32)
!1548 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1545, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1545, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!1550 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1545, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!1551 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1545, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!1552 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !1553, nameTableKind: None)
!1553 = !{!1554, !1556, !1558, !1560, !1562, !1564, !1571, !1573}
!1554 = !DIGlobalVariableExpression(var: !1555, expr: !DIExpression())
!1555 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1552, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!1556 = !DIGlobalVariableExpression(var: !1557, expr: !DIExpression())
!1557 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1552, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!1558 = !DIGlobalVariableExpression(var: !1559, expr: !DIExpression())
!1559 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1552, file: !80, line: 1052, type: !1545, isLocal: false, isDefinition: true)
!1560 = !DIGlobalVariableExpression(var: !1561, expr: !DIExpression())
!1561 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1552, file: !80, line: 116, type: !1545, isLocal: true, isDefinition: true)
!1562 = !DIGlobalVariableExpression(var: !1563, expr: !DIExpression())
!1563 = distinct !DIGlobalVariable(name: "slot0", scope: !1552, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!1564 = !DIGlobalVariableExpression(var: !1565, expr: !DIExpression())
!1565 = distinct !DIGlobalVariable(name: "slotvec", scope: !1552, file: !80, line: 845, type: !1566, isLocal: true, isDefinition: true)
!1566 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1567, size: 64)
!1567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !1568)
!1568 = !{!1569, !1570}
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1567, file: !80, line: 836, baseType: !74, size: 64)
!1570 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1567, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!1571 = !DIGlobalVariableExpression(var: !1572, expr: !DIExpression())
!1572 = distinct !DIGlobalVariable(name: "nslots", scope: !1552, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!1573 = !DIGlobalVariableExpression(var: !1574, expr: !DIExpression())
!1574 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1552, file: !80, line: 844, type: !1567, isLocal: true, isDefinition: true)
!1575 = !DILocalVariable(name: "val", scope: !1576, file: !80, line: 904, type: !7)
!1576 = distinct !DILexicalBlock(scope: !1577, file: !80, line: 902, column: 3)
!1577 = distinct !DISubprogram(name: "quotearg_n_options", scope: !80, file: !80, line: 877, type: !1578, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1589, retainedNodes: !4)
!1578 = !DISubroutineType(types: !1579)
!1579 = !{!7, !19, !16, !74, !1580}
!1580 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1581, size: 64)
!1581 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1582)
!1582 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !1583)
!1583 = !{!1584, !1585, !1586, !1587, !1588}
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1582, file: !80, line: 68, baseType: !57, size: 32)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1582, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1582, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1582, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1582, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!1589 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !1590, nameTableKind: None)
!1590 = !{!1591, !1593, !1595, !1597, !1599, !1601, !1608, !1610}
!1591 = !DIGlobalVariableExpression(var: !1592, expr: !DIExpression())
!1592 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1589, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!1593 = !DIGlobalVariableExpression(var: !1594, expr: !DIExpression())
!1594 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1589, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!1595 = !DIGlobalVariableExpression(var: !1596, expr: !DIExpression())
!1596 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1589, file: !80, line: 1052, type: !1582, isLocal: false, isDefinition: true)
!1597 = !DIGlobalVariableExpression(var: !1598, expr: !DIExpression())
!1598 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1589, file: !80, line: 116, type: !1582, isLocal: true, isDefinition: true)
!1599 = !DIGlobalVariableExpression(var: !1600, expr: !DIExpression())
!1600 = distinct !DIGlobalVariable(name: "slot0", scope: !1589, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!1601 = !DIGlobalVariableExpression(var: !1602, expr: !DIExpression())
!1602 = distinct !DIGlobalVariable(name: "slotvec", scope: !1589, file: !80, line: 845, type: !1603, isLocal: true, isDefinition: true)
!1603 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1604, size: 64)
!1604 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !1605)
!1605 = !{!1606, !1607}
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1604, file: !80, line: 836, baseType: !74, size: 64)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1604, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!1608 = !DIGlobalVariableExpression(var: !1609, expr: !DIExpression())
!1609 = distinct !DIGlobalVariable(name: "nslots", scope: !1589, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!1610 = !DIGlobalVariableExpression(var: !1611, expr: !DIExpression())
!1611 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1589, file: !80, line: 844, type: !1604, isLocal: true, isDefinition: true)
!1612 = !DILocalVariable(name: "flags", scope: !1576, file: !80, line: 906, type: !19)
!1613 = !DILocalVariable(name: "qsize", scope: !1576, file: !80, line: 907, type: !74)
!1614 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !80, file: !80, line: 256, type: !1615, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !4)
!1615 = !DISubroutineType(types: !1616)
!1616 = !{!74, !7, !74, !16, !74, !57, !19, !1617, !16, !16}
!1617 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1618, size: 64)
!1618 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !59)
!1619 = !DILocalVariable(name: "buffer", arg: 1, scope: !1614, file: !80, line: 256, type: !7)
!1620 = !DILocation(line: 256, column: 33, scope: !1614)
!1621 = !DILocalVariable(name: "buffersize", arg: 2, scope: !1614, file: !80, line: 256, type: !74)
!1622 = !DILocation(line: 256, column: 48, scope: !1614)
!1623 = !DILocalVariable(name: "arg", arg: 3, scope: !1614, file: !80, line: 257, type: !16)
!1624 = !DILocation(line: 257, column: 39, scope: !1614)
!1625 = !DILocalVariable(name: "argsize", arg: 4, scope: !1614, file: !80, line: 257, type: !74)
!1626 = !DILocation(line: 257, column: 51, scope: !1614)
!1627 = !DILocalVariable(name: "quoting_style", arg: 5, scope: !1614, file: !80, line: 258, type: !57)
!1628 = !DILocation(line: 258, column: 46, scope: !1614)
!1629 = !DILocalVariable(name: "flags", arg: 6, scope: !1614, file: !80, line: 258, type: !19)
!1630 = !DILocation(line: 258, column: 65, scope: !1614)
!1631 = !DILocalVariable(name: "quote_these_too", arg: 7, scope: !1614, file: !80, line: 259, type: !1617)
!1632 = !DILocation(line: 259, column: 47, scope: !1614)
!1633 = !DILocalVariable(name: "left_quote", arg: 8, scope: !1614, file: !80, line: 260, type: !16)
!1634 = !DILocation(line: 260, column: 39, scope: !1614)
!1635 = !DILocalVariable(name: "right_quote", arg: 9, scope: !1614, file: !80, line: 261, type: !16)
!1636 = !DILocation(line: 261, column: 39, scope: !1614)
!1637 = !DILocalVariable(name: "i", scope: !1614, file: !80, line: 263, type: !74)
!1638 = !DILocation(line: 263, column: 10, scope: !1614)
!1639 = !DILocalVariable(name: "len", scope: !1614, file: !80, line: 264, type: !74)
!1640 = !DILocation(line: 264, column: 10, scope: !1614)
!1641 = !DILocalVariable(name: "orig_buffersize", scope: !1614, file: !80, line: 265, type: !74)
!1642 = !DILocation(line: 265, column: 10, scope: !1614)
!1643 = !DILocalVariable(name: "quote_string", scope: !1614, file: !80, line: 266, type: !16)
!1644 = !DILocation(line: 266, column: 15, scope: !1614)
!1645 = !DILocalVariable(name: "quote_string_len", scope: !1614, file: !80, line: 267, type: !74)
!1646 = !DILocation(line: 267, column: 10, scope: !1614)
!1647 = !DILocalVariable(name: "backslash_escapes", scope: !1614, file: !80, line: 268, type: !38)
!1648 = !DILocation(line: 268, column: 8, scope: !1614)
!1649 = !DILocalVariable(name: "unibyte_locale", scope: !1614, file: !80, line: 269, type: !38)
!1650 = !DILocation(line: 269, column: 8, scope: !1614)
!1651 = !DILocation(line: 269, column: 25, scope: !1614)
!1652 = !DILocation(line: 269, column: 36, scope: !1614)
!1653 = !DILocalVariable(name: "elide_outer_quotes", scope: !1614, file: !80, line: 270, type: !38)
!1654 = !DILocation(line: 270, column: 8, scope: !1614)
!1655 = !DILocation(line: 270, column: 30, scope: !1614)
!1656 = !DILocation(line: 270, column: 36, scope: !1614)
!1657 = !DILocation(line: 270, column: 61, scope: !1614)
!1658 = !DILocalVariable(name: "pending_shell_escape_end", scope: !1614, file: !80, line: 271, type: !38)
!1659 = !DILocation(line: 271, column: 8, scope: !1614)
!1660 = !DILocalVariable(name: "encountered_single_quote", scope: !1614, file: !80, line: 272, type: !38)
!1661 = !DILocation(line: 272, column: 8, scope: !1614)
!1662 = !DILocalVariable(name: "all_c_and_shell_quote_compat", scope: !1614, file: !80, line: 273, type: !38)
!1663 = !DILocation(line: 273, column: 8, scope: !1614)
!1664 = !DILocation(line: 273, column: 3, scope: !1614)
!1665 = !DILabel(scope: !1614, name: "process_input", file: !80, line: 314)
!1666 = !DILocation(line: 314, column: 2, scope: !1614)
!1667 = !DILocation(line: 316, column: 11, scope: !1614)
!1668 = !DILocation(line: 316, column: 3, scope: !1614)
!1669 = !DILocation(line: 319, column: 21, scope: !1670)
!1670 = distinct !DILexicalBlock(scope: !1614, file: !80, line: 317, column: 5)
!1671 = !DILocation(line: 320, column: 26, scope: !1670)
!1672 = !DILocation(line: 321, column: 7, scope: !1670)
!1673 = !DILocation(line: 323, column: 12, scope: !1674)
!1674 = distinct !DILexicalBlock(scope: !1670, file: !80, line: 323, column: 11)
!1675 = !DILocation(line: 323, column: 11, scope: !1670)
!1676 = !DILocation(line: 324, column: 9, scope: !1674)
!1677 = !DILocation(line: 324, column: 9, scope: !1678)
!1678 = distinct !DILexicalBlock(scope: !1679, file: !80, line: 324, column: 9)
!1679 = distinct !DILexicalBlock(scope: !1674, file: !80, line: 324, column: 9)
!1680 = !DILocation(line: 324, column: 9, scope: !1679)
!1681 = !DILocation(line: 325, column: 25, scope: !1670)
!1682 = !DILocation(line: 326, column: 20, scope: !1670)
!1683 = !DILocation(line: 327, column: 24, scope: !1670)
!1684 = !DILocation(line: 328, column: 7, scope: !1670)
!1685 = !DILocation(line: 331, column: 25, scope: !1670)
!1686 = !DILocation(line: 332, column: 26, scope: !1670)
!1687 = !DILocation(line: 333, column: 7, scope: !1670)
!1688 = !DILocation(line: 339, column: 13, scope: !1689)
!1689 = distinct !DILexicalBlock(scope: !1690, file: !80, line: 339, column: 13)
!1690 = distinct !DILexicalBlock(scope: !1670, file: !80, line: 338, column: 7)
!1691 = !DILocation(line: 339, column: 27, scope: !1689)
!1692 = !DILocation(line: 339, column: 13, scope: !1690)
!1693 = !DILocation(line: 362, column: 50, scope: !1694)
!1694 = distinct !DILexicalBlock(scope: !1689, file: !80, line: 340, column: 11)
!1695 = !DILocation(line: 362, column: 26, scope: !1694)
!1696 = !DILocation(line: 362, column: 24, scope: !1694)
!1697 = !DILocation(line: 363, column: 51, scope: !1694)
!1698 = !DILocation(line: 363, column: 27, scope: !1694)
!1699 = !DILocation(line: 363, column: 25, scope: !1694)
!1700 = !DILocation(line: 364, column: 11, scope: !1694)
!1701 = !DILocation(line: 365, column: 14, scope: !1702)
!1702 = distinct !DILexicalBlock(scope: !1690, file: !80, line: 365, column: 13)
!1703 = !DILocation(line: 365, column: 13, scope: !1690)
!1704 = !DILocation(line: 366, column: 31, scope: !1705)
!1705 = distinct !DILexicalBlock(scope: !1702, file: !80, line: 366, column: 11)
!1706 = !DILocation(line: 366, column: 29, scope: !1705)
!1707 = !DILocation(line: 366, column: 16, scope: !1705)
!1708 = !DILocation(line: 366, column: 44, scope: !1709)
!1709 = distinct !DILexicalBlock(scope: !1705, file: !80, line: 366, column: 11)
!1710 = !DILocation(line: 366, column: 43, scope: !1709)
!1711 = !DILocation(line: 366, column: 11, scope: !1705)
!1712 = !DILocation(line: 367, column: 13, scope: !1709)
!1713 = !DILocation(line: 367, column: 13, scope: !1714)
!1714 = distinct !DILexicalBlock(scope: !1715, file: !80, line: 367, column: 13)
!1715 = distinct !DILexicalBlock(scope: !1709, file: !80, line: 367, column: 13)
!1716 = !DILocation(line: 367, column: 13, scope: !1715)
!1717 = !DILocation(line: 366, column: 70, scope: !1709)
!1718 = !DILocation(line: 366, column: 11, scope: !1709)
!1719 = distinct !{!1719, !1711, !1720}
!1720 = !DILocation(line: 367, column: 13, scope: !1705)
!1721 = !DILocation(line: 368, column: 27, scope: !1690)
!1722 = !DILocation(line: 369, column: 24, scope: !1690)
!1723 = !DILocation(line: 369, column: 22, scope: !1690)
!1724 = !DILocation(line: 370, column: 36, scope: !1690)
!1725 = !DILocation(line: 370, column: 28, scope: !1690)
!1726 = !DILocation(line: 370, column: 26, scope: !1690)
!1727 = !DILocation(line: 372, column: 7, scope: !1670)
!1728 = !DILocation(line: 375, column: 25, scope: !1670)
!1729 = !DILocation(line: 376, column: 7, scope: !1670)
!1730 = !DILocation(line: 378, column: 26, scope: !1670)
!1731 = !DILocation(line: 379, column: 7, scope: !1670)
!1732 = !DILocation(line: 381, column: 12, scope: !1733)
!1733 = distinct !DILexicalBlock(scope: !1670, file: !80, line: 381, column: 11)
!1734 = !DILocation(line: 381, column: 11, scope: !1670)
!1735 = !DILocation(line: 382, column: 27, scope: !1733)
!1736 = !DILocation(line: 382, column: 9, scope: !1733)
!1737 = !DILocation(line: 383, column: 7, scope: !1670)
!1738 = !DILocation(line: 385, column: 21, scope: !1670)
!1739 = !DILocation(line: 386, column: 12, scope: !1740)
!1740 = distinct !DILexicalBlock(scope: !1670, file: !80, line: 386, column: 11)
!1741 = !DILocation(line: 386, column: 11, scope: !1670)
!1742 = !DILocation(line: 387, column: 9, scope: !1740)
!1743 = !DILocation(line: 387, column: 9, scope: !1744)
!1744 = distinct !DILexicalBlock(scope: !1745, file: !80, line: 387, column: 9)
!1745 = distinct !DILexicalBlock(scope: !1740, file: !80, line: 387, column: 9)
!1746 = !DILocation(line: 387, column: 9, scope: !1745)
!1747 = !DILocation(line: 388, column: 20, scope: !1670)
!1748 = !DILocation(line: 389, column: 24, scope: !1670)
!1749 = !DILocation(line: 390, column: 7, scope: !1670)
!1750 = !DILocation(line: 393, column: 26, scope: !1670)
!1751 = !DILocation(line: 394, column: 7, scope: !1670)
!1752 = !DILocation(line: 397, column: 7, scope: !1670)
!1753 = !DILocation(line: 400, column: 10, scope: !1754)
!1754 = distinct !DILexicalBlock(scope: !1614, file: !80, line: 400, column: 3)
!1755 = !DILocation(line: 400, column: 8, scope: !1754)
!1756 = !DILocation(line: 400, column: 19, scope: !1757)
!1757 = distinct !DILexicalBlock(scope: !1754, file: !80, line: 400, column: 3)
!1758 = !DILocation(line: 400, column: 27, scope: !1757)
!1759 = !DILocation(line: 400, column: 41, scope: !1757)
!1760 = !DILocation(line: 400, column: 45, scope: !1757)
!1761 = !DILocation(line: 400, column: 48, scope: !1757)
!1762 = !DILocation(line: 400, column: 58, scope: !1757)
!1763 = !DILocation(line: 400, column: 63, scope: !1757)
!1764 = !DILocation(line: 400, column: 60, scope: !1757)
!1765 = !DILocation(line: 400, column: 16, scope: !1757)
!1766 = !DILocation(line: 400, column: 3, scope: !1754)
!1767 = !DILocalVariable(name: "c", scope: !1768, file: !80, line: 402, type: !148)
!1768 = distinct !DILexicalBlock(scope: !1757, file: !80, line: 401, column: 5)
!1769 = !DILocation(line: 402, column: 21, scope: !1768)
!1770 = !DILocalVariable(name: "esc", scope: !1768, file: !80, line: 403, type: !148)
!1771 = !DILocation(line: 403, column: 21, scope: !1768)
!1772 = !DILocalVariable(name: "is_right_quote", scope: !1768, file: !80, line: 404, type: !38)
!1773 = !DILocation(line: 404, column: 12, scope: !1768)
!1774 = !DILocalVariable(name: "escaping", scope: !1768, file: !80, line: 405, type: !38)
!1775 = !DILocation(line: 405, column: 12, scope: !1768)
!1776 = !DILocalVariable(name: "c_and_shell_quote_compat", scope: !1768, file: !80, line: 406, type: !38)
!1777 = !DILocation(line: 406, column: 12, scope: !1768)
!1778 = !DILocation(line: 408, column: 11, scope: !1779)
!1779 = distinct !DILexicalBlock(scope: !1768, file: !80, line: 408, column: 11)
!1780 = !DILocation(line: 409, column: 11, scope: !1779)
!1781 = !DILocation(line: 409, column: 14, scope: !1779)
!1782 = !DILocation(line: 409, column: 28, scope: !1779)
!1783 = !DILocation(line: 410, column: 11, scope: !1779)
!1784 = !DILocation(line: 410, column: 14, scope: !1779)
!1785 = !DILocation(line: 411, column: 11, scope: !1779)
!1786 = !DILocation(line: 411, column: 15, scope: !1779)
!1787 = !DILocation(line: 411, column: 19, scope: !1779)
!1788 = !DILocation(line: 411, column: 17, scope: !1779)
!1789 = !DILocation(line: 412, column: 19, scope: !1779)
!1790 = !DILocation(line: 412, column: 27, scope: !1779)
!1791 = !DILocation(line: 412, column: 39, scope: !1779)
!1792 = !DILocation(line: 412, column: 46, scope: !1779)
!1793 = !DILocation(line: 412, column: 44, scope: !1779)
!1794 = !DILocation(line: 416, column: 40, scope: !1779)
!1795 = !DILocation(line: 416, column: 32, scope: !1779)
!1796 = !DILocation(line: 416, column: 30, scope: !1779)
!1797 = !DILocation(line: 416, column: 48, scope: !1779)
!1798 = !DILocation(line: 412, column: 15, scope: !1779)
!1799 = !DILocation(line: 417, column: 11, scope: !1779)
!1800 = !DILocation(line: 417, column: 22, scope: !1779)
!1801 = !DILocation(line: 417, column: 28, scope: !1779)
!1802 = !DILocation(line: 417, column: 26, scope: !1779)
!1803 = !DILocation(line: 417, column: 31, scope: !1779)
!1804 = !DILocation(line: 417, column: 45, scope: !1779)
!1805 = !DILocation(line: 417, column: 14, scope: !1779)
!1806 = !DILocation(line: 417, column: 63, scope: !1779)
!1807 = !DILocation(line: 408, column: 11, scope: !1768)
!1808 = !DILocation(line: 419, column: 15, scope: !1809)
!1809 = distinct !DILexicalBlock(scope: !1810, file: !80, line: 419, column: 15)
!1810 = distinct !DILexicalBlock(scope: !1779, file: !80, line: 418, column: 9)
!1811 = !DILocation(line: 419, column: 15, scope: !1810)
!1812 = !DILocation(line: 420, column: 13, scope: !1809)
!1813 = !DILocation(line: 421, column: 26, scope: !1810)
!1814 = !DILocation(line: 422, column: 9, scope: !1810)
!1815 = !DILocation(line: 424, column: 11, scope: !1768)
!1816 = !DILocation(line: 424, column: 15, scope: !1768)
!1817 = !DILocation(line: 424, column: 9, scope: !1768)
!1818 = !DILocation(line: 425, column: 15, scope: !1768)
!1819 = !DILocation(line: 425, column: 7, scope: !1768)
!1820 = !DILocation(line: 428, column: 15, scope: !1821)
!1821 = distinct !DILexicalBlock(scope: !1822, file: !80, line: 428, column: 15)
!1822 = distinct !DILexicalBlock(scope: !1768, file: !80, line: 426, column: 9)
!1823 = !DILocation(line: 428, column: 15, scope: !1822)
!1824 = !DILocation(line: 430, column: 15, scope: !1825)
!1825 = distinct !DILexicalBlock(scope: !1821, file: !80, line: 429, column: 13)
!1826 = !DILocation(line: 430, column: 15, scope: !1827)
!1827 = distinct !DILexicalBlock(scope: !1828, file: !80, line: 430, column: 15)
!1828 = distinct !DILexicalBlock(scope: !1825, file: !80, line: 430, column: 15)
!1829 = !DILocation(line: 430, column: 15, scope: !1828)
!1830 = !DILocation(line: 430, column: 15, scope: !1831)
!1831 = distinct !DILexicalBlock(scope: !1828, file: !80, line: 430, column: 15)
!1832 = !DILocation(line: 430, column: 15, scope: !1833)
!1833 = distinct !DILexicalBlock(scope: !1831, file: !80, line: 430, column: 15)
!1834 = !DILocation(line: 430, column: 15, scope: !1835)
!1835 = distinct !DILexicalBlock(scope: !1836, file: !80, line: 430, column: 15)
!1836 = distinct !DILexicalBlock(scope: !1833, file: !80, line: 430, column: 15)
!1837 = !DILocation(line: 430, column: 15, scope: !1836)
!1838 = !DILocation(line: 430, column: 15, scope: !1839)
!1839 = distinct !DILexicalBlock(scope: !1840, file: !80, line: 430, column: 15)
!1840 = distinct !DILexicalBlock(scope: !1833, file: !80, line: 430, column: 15)
!1841 = !DILocation(line: 430, column: 15, scope: !1840)
!1842 = !DILocation(line: 430, column: 15, scope: !1843)
!1843 = distinct !DILexicalBlock(scope: !1844, file: !80, line: 430, column: 15)
!1844 = distinct !DILexicalBlock(scope: !1833, file: !80, line: 430, column: 15)
!1845 = !DILocation(line: 430, column: 15, scope: !1844)
!1846 = !DILocation(line: 430, column: 15, scope: !1847)
!1847 = distinct !DILexicalBlock(scope: !1848, file: !80, line: 430, column: 15)
!1848 = distinct !DILexicalBlock(scope: !1828, file: !80, line: 430, column: 15)
!1849 = !DILocation(line: 430, column: 15, scope: !1848)
!1850 = !DILocation(line: 437, column: 19, scope: !1851)
!1851 = distinct !DILexicalBlock(scope: !1825, file: !80, line: 437, column: 19)
!1852 = !DILocation(line: 437, column: 33, scope: !1851)
!1853 = !DILocation(line: 438, column: 19, scope: !1851)
!1854 = !DILocation(line: 438, column: 22, scope: !1851)
!1855 = !DILocation(line: 438, column: 24, scope: !1851)
!1856 = !DILocation(line: 438, column: 30, scope: !1851)
!1857 = !DILocation(line: 438, column: 28, scope: !1851)
!1858 = !DILocation(line: 438, column: 38, scope: !1851)
!1859 = !DILocation(line: 438, column: 48, scope: !1851)
!1860 = !DILocation(line: 438, column: 52, scope: !1851)
!1861 = !DILocation(line: 438, column: 54, scope: !1851)
!1862 = !DILocation(line: 438, column: 45, scope: !1851)
!1863 = !DILocation(line: 438, column: 59, scope: !1851)
!1864 = !DILocation(line: 438, column: 62, scope: !1851)
!1865 = !DILocation(line: 438, column: 66, scope: !1851)
!1866 = !DILocation(line: 438, column: 68, scope: !1851)
!1867 = !DILocation(line: 438, column: 73, scope: !1851)
!1868 = !DILocation(line: 437, column: 19, scope: !1825)
!1869 = !DILocation(line: 440, column: 19, scope: !1870)
!1870 = distinct !DILexicalBlock(scope: !1851, file: !80, line: 439, column: 17)
!1871 = !DILocation(line: 440, column: 19, scope: !1872)
!1872 = distinct !DILexicalBlock(scope: !1873, file: !80, line: 440, column: 19)
!1873 = distinct !DILexicalBlock(scope: !1870, file: !80, line: 440, column: 19)
!1874 = !DILocation(line: 440, column: 19, scope: !1873)
!1875 = !DILocation(line: 441, column: 19, scope: !1870)
!1876 = !DILocation(line: 441, column: 19, scope: !1877)
!1877 = distinct !DILexicalBlock(scope: !1878, file: !80, line: 441, column: 19)
!1878 = distinct !DILexicalBlock(scope: !1870, file: !80, line: 441, column: 19)
!1879 = !DILocation(line: 441, column: 19, scope: !1878)
!1880 = !DILocation(line: 442, column: 17, scope: !1870)
!1881 = !DILocation(line: 443, column: 17, scope: !1825)
!1882 = !DILocation(line: 448, column: 13, scope: !1825)
!1883 = !DILocation(line: 449, column: 20, scope: !1884)
!1884 = distinct !DILexicalBlock(scope: !1821, file: !80, line: 449, column: 20)
!1885 = !DILocation(line: 449, column: 26, scope: !1884)
!1886 = !DILocation(line: 449, column: 20, scope: !1821)
!1887 = !DILocation(line: 450, column: 13, scope: !1884)
!1888 = !DILocation(line: 451, column: 11, scope: !1822)
!1889 = !DILocation(line: 454, column: 19, scope: !1822)
!1890 = !DILocation(line: 454, column: 11, scope: !1822)
!1891 = !DILocation(line: 457, column: 19, scope: !1892)
!1892 = distinct !DILexicalBlock(scope: !1893, file: !80, line: 457, column: 19)
!1893 = distinct !DILexicalBlock(scope: !1822, file: !80, line: 455, column: 13)
!1894 = !DILocation(line: 457, column: 19, scope: !1893)
!1895 = !DILocation(line: 458, column: 17, scope: !1892)
!1896 = !DILocation(line: 459, column: 15, scope: !1893)
!1897 = !DILocation(line: 462, column: 20, scope: !1898)
!1898 = distinct !DILexicalBlock(scope: !1893, file: !80, line: 462, column: 19)
!1899 = !DILocation(line: 462, column: 26, scope: !1898)
!1900 = !DILocation(line: 463, column: 19, scope: !1898)
!1901 = !DILocation(line: 463, column: 22, scope: !1898)
!1902 = !DILocation(line: 463, column: 24, scope: !1898)
!1903 = !DILocation(line: 463, column: 30, scope: !1898)
!1904 = !DILocation(line: 463, column: 28, scope: !1898)
!1905 = !DILocation(line: 463, column: 38, scope: !1898)
!1906 = !DILocation(line: 463, column: 41, scope: !1898)
!1907 = !DILocation(line: 463, column: 45, scope: !1898)
!1908 = !DILocation(line: 463, column: 47, scope: !1898)
!1909 = !DILocation(line: 463, column: 52, scope: !1898)
!1910 = !DILocation(line: 462, column: 19, scope: !1893)
!1911 = !DILocation(line: 464, column: 25, scope: !1898)
!1912 = !DILocation(line: 464, column: 29, scope: !1898)
!1913 = !DILocation(line: 464, column: 31, scope: !1898)
!1914 = !DILocation(line: 464, column: 17, scope: !1898)
!1915 = !DILocation(line: 471, column: 25, scope: !1916)
!1916 = distinct !DILexicalBlock(scope: !1917, file: !80, line: 471, column: 25)
!1917 = distinct !DILexicalBlock(scope: !1898, file: !80, line: 465, column: 19)
!1918 = !DILocation(line: 471, column: 25, scope: !1917)
!1919 = !DILocation(line: 472, column: 23, scope: !1916)
!1920 = !DILocation(line: 473, column: 25, scope: !1917)
!1921 = !DILocation(line: 473, column: 29, scope: !1917)
!1922 = !DILocation(line: 473, column: 31, scope: !1917)
!1923 = !DILocation(line: 473, column: 23, scope: !1917)
!1924 = !DILocation(line: 474, column: 23, scope: !1917)
!1925 = !DILocation(line: 475, column: 21, scope: !1917)
!1926 = !DILocation(line: 475, column: 21, scope: !1927)
!1927 = distinct !DILexicalBlock(scope: !1928, file: !80, line: 475, column: 21)
!1928 = distinct !DILexicalBlock(scope: !1917, file: !80, line: 475, column: 21)
!1929 = !DILocation(line: 475, column: 21, scope: !1928)
!1930 = !DILocation(line: 476, column: 21, scope: !1917)
!1931 = !DILocation(line: 476, column: 21, scope: !1932)
!1932 = distinct !DILexicalBlock(scope: !1933, file: !80, line: 476, column: 21)
!1933 = distinct !DILexicalBlock(scope: !1917, file: !80, line: 476, column: 21)
!1934 = !DILocation(line: 476, column: 21, scope: !1933)
!1935 = !DILocation(line: 477, column: 21, scope: !1917)
!1936 = !DILocation(line: 477, column: 21, scope: !1937)
!1937 = distinct !DILexicalBlock(scope: !1938, file: !80, line: 477, column: 21)
!1938 = distinct !DILexicalBlock(scope: !1917, file: !80, line: 477, column: 21)
!1939 = !DILocation(line: 477, column: 21, scope: !1938)
!1940 = !DILocation(line: 478, column: 21, scope: !1917)
!1941 = !DILocation(line: 478, column: 21, scope: !1942)
!1942 = distinct !DILexicalBlock(scope: !1943, file: !80, line: 478, column: 21)
!1943 = distinct !DILexicalBlock(scope: !1917, file: !80, line: 478, column: 21)
!1944 = !DILocation(line: 478, column: 21, scope: !1943)
!1945 = !DILocation(line: 479, column: 21, scope: !1917)
!1946 = !DILocation(line: 482, column: 21, scope: !1917)
!1947 = !DILocation(line: 483, column: 19, scope: !1917)
!1948 = !DILocation(line: 484, column: 15, scope: !1893)
!1949 = !DILocation(line: 487, column: 15, scope: !1893)
!1950 = !DILocation(line: 489, column: 11, scope: !1822)
!1951 = !DILocation(line: 491, column: 24, scope: !1822)
!1952 = !DILocation(line: 491, column: 31, scope: !1822)
!1953 = !DILocation(line: 492, column: 24, scope: !1822)
!1954 = !DILocation(line: 492, column: 31, scope: !1822)
!1955 = !DILocation(line: 493, column: 24, scope: !1822)
!1956 = !DILocation(line: 493, column: 31, scope: !1822)
!1957 = !DILocation(line: 494, column: 24, scope: !1822)
!1958 = !DILocation(line: 494, column: 31, scope: !1822)
!1959 = !DILocation(line: 495, column: 24, scope: !1822)
!1960 = !DILocation(line: 495, column: 31, scope: !1822)
!1961 = !DILocation(line: 496, column: 24, scope: !1822)
!1962 = !DILocation(line: 496, column: 31, scope: !1822)
!1963 = !DILocation(line: 497, column: 24, scope: !1822)
!1964 = !DILocation(line: 497, column: 31, scope: !1822)
!1965 = !DILocation(line: 498, column: 26, scope: !1822)
!1966 = !DILocation(line: 498, column: 24, scope: !1822)
!1967 = !DILocation(line: 500, column: 15, scope: !1968)
!1968 = distinct !DILexicalBlock(scope: !1822, file: !80, line: 500, column: 15)
!1969 = !DILocation(line: 500, column: 29, scope: !1968)
!1970 = !DILocation(line: 500, column: 15, scope: !1822)
!1971 = !DILocation(line: 502, column: 19, scope: !1972)
!1972 = distinct !DILexicalBlock(scope: !1973, file: !80, line: 502, column: 19)
!1973 = distinct !DILexicalBlock(scope: !1968, file: !80, line: 501, column: 13)
!1974 = !DILocation(line: 502, column: 19, scope: !1973)
!1975 = !DILocation(line: 503, column: 17, scope: !1972)
!1976 = !DILocation(line: 504, column: 15, scope: !1973)
!1977 = !DILocation(line: 509, column: 15, scope: !1978)
!1978 = distinct !DILexicalBlock(scope: !1822, file: !80, line: 509, column: 15)
!1979 = !DILocation(line: 509, column: 33, scope: !1978)
!1980 = !DILocation(line: 509, column: 36, scope: !1978)
!1981 = !DILocation(line: 509, column: 55, scope: !1978)
!1982 = !DILocation(line: 509, column: 58, scope: !1978)
!1983 = !DILocation(line: 509, column: 15, scope: !1822)
!1984 = !DILocation(line: 510, column: 13, scope: !1978)
!1985 = !DILabel(scope: !1822, name: "c_and_shell_escape", file: !80, line: 512)
!1986 = !DILocation(line: 512, column: 9, scope: !1822)
!1987 = !DILocation(line: 513, column: 15, scope: !1988)
!1988 = distinct !DILexicalBlock(scope: !1822, file: !80, line: 513, column: 15)
!1989 = !DILocation(line: 513, column: 29, scope: !1988)
!1990 = !DILocation(line: 514, column: 15, scope: !1988)
!1991 = !DILocation(line: 514, column: 18, scope: !1988)
!1992 = !DILocation(line: 513, column: 15, scope: !1822)
!1993 = !DILocation(line: 515, column: 13, scope: !1988)
!1994 = !DILabel(scope: !1822, name: "c_escape", file: !80, line: 517)
!1995 = !DILocation(line: 517, column: 9, scope: !1822)
!1996 = !DILocation(line: 518, column: 15, scope: !1997)
!1997 = distinct !DILexicalBlock(scope: !1822, file: !80, line: 518, column: 15)
!1998 = !DILocation(line: 518, column: 15, scope: !1822)
!1999 = !DILocation(line: 520, column: 19, scope: !2000)
!2000 = distinct !DILexicalBlock(scope: !1997, file: !80, line: 519, column: 13)
!2001 = !DILocation(line: 520, column: 17, scope: !2000)
!2002 = !DILocation(line: 521, column: 15, scope: !2000)
!2003 = !DILocation(line: 523, column: 11, scope: !1822)
!2004 = !DILocation(line: 526, column: 18, scope: !2005)
!2005 = distinct !DILexicalBlock(scope: !1822, file: !80, line: 526, column: 15)
!2006 = !DILocation(line: 526, column: 26, scope: !2005)
!2007 = !DILocation(line: 526, column: 15, scope: !1822)
!2008 = !DILocation(line: 526, column: 40, scope: !2005)
!2009 = !DILocation(line: 526, column: 47, scope: !2005)
!2010 = !DILocation(line: 526, column: 57, scope: !2005)
!2011 = !DILocation(line: 526, column: 65, scope: !2005)
!2012 = !DILocation(line: 527, column: 13, scope: !2005)
!2013 = !DILocation(line: 528, column: 11, scope: !1822)
!2014 = !DILocation(line: 530, column: 15, scope: !2015)
!2015 = distinct !DILexicalBlock(scope: !1822, file: !80, line: 530, column: 15)
!2016 = !DILocation(line: 530, column: 17, scope: !2015)
!2017 = !DILocation(line: 530, column: 15, scope: !1822)
!2018 = !DILocation(line: 531, column: 13, scope: !2015)
!2019 = !DILocation(line: 532, column: 11, scope: !1822)
!2020 = !DILocation(line: 534, column: 36, scope: !1822)
!2021 = !DILocation(line: 535, column: 11, scope: !1822)
!2022 = !DILocation(line: 548, column: 15, scope: !2023)
!2023 = distinct !DILexicalBlock(scope: !1822, file: !80, line: 548, column: 15)
!2024 = !DILocation(line: 548, column: 29, scope: !2023)
!2025 = !DILocation(line: 549, column: 15, scope: !2023)
!2026 = !DILocation(line: 549, column: 18, scope: !2023)
!2027 = !DILocation(line: 548, column: 15, scope: !1822)
!2028 = !DILocation(line: 550, column: 13, scope: !2023)
!2029 = !DILocation(line: 551, column: 11, scope: !1822)
!2030 = !DILocation(line: 554, column: 36, scope: !1822)
!2031 = !DILocation(line: 555, column: 36, scope: !1822)
!2032 = !DILocation(line: 556, column: 15, scope: !2033)
!2033 = distinct !DILexicalBlock(scope: !1822, file: !80, line: 556, column: 15)
!2034 = !DILocation(line: 556, column: 29, scope: !2033)
!2035 = !DILocation(line: 556, column: 15, scope: !1822)
!2036 = !DILocation(line: 558, column: 19, scope: !2037)
!2037 = distinct !DILexicalBlock(scope: !2038, file: !80, line: 558, column: 19)
!2038 = distinct !DILexicalBlock(scope: !2033, file: !80, line: 557, column: 13)
!2039 = !DILocation(line: 558, column: 19, scope: !2038)
!2040 = !DILocation(line: 559, column: 17, scope: !2037)
!2041 = !DILocation(line: 561, column: 19, scope: !2042)
!2042 = distinct !DILexicalBlock(scope: !2038, file: !80, line: 561, column: 19)
!2043 = !DILocation(line: 561, column: 30, scope: !2042)
!2044 = !DILocation(line: 561, column: 35, scope: !2042)
!2045 = !DILocation(line: 561, column: 19, scope: !2038)
!2046 = !DILocation(line: 566, column: 37, scope: !2047)
!2047 = distinct !DILexicalBlock(scope: !2042, file: !80, line: 562, column: 17)
!2048 = !DILocation(line: 566, column: 35, scope: !2047)
!2049 = !DILocation(line: 567, column: 30, scope: !2047)
!2050 = !DILocation(line: 568, column: 17, scope: !2047)
!2051 = !DILocation(line: 570, column: 15, scope: !2038)
!2052 = !DILocation(line: 570, column: 15, scope: !2053)
!2053 = distinct !DILexicalBlock(scope: !2054, file: !80, line: 570, column: 15)
!2054 = distinct !DILexicalBlock(scope: !2038, file: !80, line: 570, column: 15)
!2055 = !DILocation(line: 570, column: 15, scope: !2054)
!2056 = !DILocation(line: 571, column: 15, scope: !2038)
!2057 = !DILocation(line: 571, column: 15, scope: !2058)
!2058 = distinct !DILexicalBlock(scope: !2059, file: !80, line: 571, column: 15)
!2059 = distinct !DILexicalBlock(scope: !2038, file: !80, line: 571, column: 15)
!2060 = !DILocation(line: 571, column: 15, scope: !2059)
!2061 = !DILocation(line: 572, column: 15, scope: !2038)
!2062 = !DILocation(line: 572, column: 15, scope: !2063)
!2063 = distinct !DILexicalBlock(scope: !2064, file: !80, line: 572, column: 15)
!2064 = distinct !DILexicalBlock(scope: !2038, file: !80, line: 572, column: 15)
!2065 = !DILocation(line: 572, column: 15, scope: !2064)
!2066 = !DILocation(line: 573, column: 40, scope: !2038)
!2067 = !DILocation(line: 574, column: 13, scope: !2038)
!2068 = !DILocation(line: 575, column: 11, scope: !1822)
!2069 = !DILocation(line: 599, column: 36, scope: !1822)
!2070 = !DILocation(line: 600, column: 11, scope: !1822)
!2071 = !DILocalVariable(name: "m", scope: !2072, file: !80, line: 610, type: !74)
!2072 = distinct !DILexicalBlock(scope: !1822, file: !80, line: 608, column: 11)
!2073 = !DILocation(line: 610, column: 20, scope: !2072)
!2074 = !DILocalVariable(name: "printable", scope: !2072, file: !80, line: 612, type: !38)
!2075 = !DILocation(line: 612, column: 18, scope: !2072)
!2076 = !DILocation(line: 614, column: 17, scope: !2077)
!2077 = distinct !DILexicalBlock(scope: !2072, file: !80, line: 614, column: 17)
!2078 = !DILocation(line: 614, column: 17, scope: !2072)
!2079 = !DILocation(line: 616, column: 19, scope: !2080)
!2080 = distinct !DILexicalBlock(scope: !2077, file: !80, line: 615, column: 15)
!2081 = !DILocation(line: 617, column: 29, scope: !2080)
!2082 = !DILocation(line: 617, column: 41, scope: !2080)
!2083 = !DILocation(line: 617, column: 27, scope: !2080)
!2084 = !DILocation(line: 618, column: 15, scope: !2080)
!2085 = !DILocalVariable(name: "mbstate", scope: !2086, file: !80, line: 621, type: !2087)
!2086 = distinct !DILexicalBlock(scope: !2077, file: !80, line: 620, column: 15)
!2087 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !2088, line: 6, baseType: !2089)
!2088 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "")
!2089 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !2090, line: 21, baseType: !2091)
!2090 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "")
!2091 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2090, line: 13, size: 64, elements: !2092)
!2092 = !{!2093, !2094}
!2093 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !2091, file: !2090, line: 15, baseType: !19, size: 32)
!2094 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !2091, file: !2090, line: 20, baseType: !2095, size: 32, offset: 32)
!2095 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2091, file: !2090, line: 16, size: 32, elements: !2096)
!2096 = !{!2097, !2098}
!2097 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !2095, file: !2090, line: 18, baseType: !59, size: 32)
!2098 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !2095, file: !2090, line: 19, baseType: !2099, size: 32)
!2099 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 32, elements: !2100)
!2100 = !{!2101}
!2101 = !DISubrange(count: 4)
!2102 = !DILocation(line: 621, column: 27, scope: !2086)
!2103 = !DILocation(line: 622, column: 17, scope: !2086)
!2104 = !DILocation(line: 624, column: 19, scope: !2086)
!2105 = !DILocation(line: 625, column: 27, scope: !2086)
!2106 = !DILocation(line: 626, column: 21, scope: !2107)
!2107 = distinct !DILexicalBlock(scope: !2086, file: !80, line: 626, column: 21)
!2108 = !DILocation(line: 626, column: 29, scope: !2107)
!2109 = !DILocation(line: 626, column: 21, scope: !2086)
!2110 = !DILocation(line: 627, column: 37, scope: !2107)
!2111 = !DILocation(line: 627, column: 29, scope: !2107)
!2112 = !DILocation(line: 627, column: 27, scope: !2107)
!2113 = !DILocation(line: 627, column: 19, scope: !2107)
!2114 = !DILocation(line: 629, column: 17, scope: !2086)
!2115 = !DILocalVariable(name: "w", scope: !2116, file: !80, line: 631, type: !2117)
!2116 = distinct !DILexicalBlock(scope: !2086, file: !80, line: 630, column: 19)
!2117 = !DIDerivedType(tag: DW_TAG_typedef, name: "wchar_t", file: !75, line: 74, baseType: !19)
!2118 = !DILocation(line: 631, column: 29, scope: !2116)
!2119 = !DILocalVariable(name: "bytes", scope: !2116, file: !80, line: 632, type: !74)
!2120 = !DILocation(line: 632, column: 28, scope: !2116)
!2121 = !DILocation(line: 632, column: 50, scope: !2116)
!2122 = !DILocation(line: 632, column: 54, scope: !2116)
!2123 = !DILocation(line: 632, column: 58, scope: !2116)
!2124 = !DILocation(line: 632, column: 56, scope: !2116)
!2125 = !DILocation(line: 633, column: 45, scope: !2116)
!2126 = !DILocation(line: 633, column: 56, scope: !2116)
!2127 = !DILocation(line: 633, column: 60, scope: !2116)
!2128 = !DILocation(line: 633, column: 58, scope: !2116)
!2129 = !DILocation(line: 633, column: 53, scope: !2116)
!2130 = !DILocation(line: 632, column: 36, scope: !2116)
!2131 = !DILocation(line: 634, column: 25, scope: !2132)
!2132 = distinct !DILexicalBlock(scope: !2116, file: !80, line: 634, column: 25)
!2133 = !DILocation(line: 634, column: 31, scope: !2132)
!2134 = !DILocation(line: 634, column: 25, scope: !2116)
!2135 = !DILocation(line: 635, column: 23, scope: !2132)
!2136 = !DILocation(line: 636, column: 30, scope: !2137)
!2137 = distinct !DILexicalBlock(scope: !2132, file: !80, line: 636, column: 30)
!2138 = !DILocation(line: 636, column: 36, scope: !2137)
!2139 = !DILocation(line: 636, column: 30, scope: !2132)
!2140 = !DILocation(line: 638, column: 35, scope: !2141)
!2141 = distinct !DILexicalBlock(scope: !2137, file: !80, line: 637, column: 23)
!2142 = !DILocation(line: 639, column: 25, scope: !2141)
!2143 = !DILocation(line: 641, column: 30, scope: !2144)
!2144 = distinct !DILexicalBlock(scope: !2137, file: !80, line: 641, column: 30)
!2145 = !DILocation(line: 641, column: 36, scope: !2144)
!2146 = !DILocation(line: 641, column: 30, scope: !2137)
!2147 = !DILocation(line: 643, column: 35, scope: !2148)
!2148 = distinct !DILexicalBlock(scope: !2144, file: !80, line: 642, column: 23)
!2149 = !DILocation(line: 644, column: 25, scope: !2148)
!2150 = !DILocation(line: 644, column: 32, scope: !2148)
!2151 = !DILocation(line: 644, column: 36, scope: !2148)
!2152 = !DILocation(line: 644, column: 34, scope: !2148)
!2153 = !DILocation(line: 644, column: 40, scope: !2148)
!2154 = !DILocation(line: 644, column: 38, scope: !2148)
!2155 = !DILocation(line: 644, column: 48, scope: !2148)
!2156 = !DILocation(line: 644, column: 51, scope: !2148)
!2157 = !DILocation(line: 644, column: 55, scope: !2148)
!2158 = !DILocation(line: 644, column: 59, scope: !2148)
!2159 = !DILocation(line: 644, column: 57, scope: !2148)
!2160 = !DILocation(line: 0, scope: !2148)
!2161 = !DILocation(line: 645, column: 28, scope: !2148)
!2162 = distinct !{!2162, !2149, !2161}
!2163 = !DILocation(line: 646, column: 25, scope: !2148)
!2164 = !DILocation(line: 654, column: 44, scope: !2165)
!2165 = distinct !DILexicalBlock(scope: !2166, file: !80, line: 654, column: 29)
!2166 = distinct !DILexicalBlock(scope: !2144, file: !80, line: 649, column: 23)
!2167 = !DILocation(line: 655, column: 29, scope: !2165)
!2168 = !DILocation(line: 655, column: 32, scope: !2165)
!2169 = !DILocation(line: 655, column: 46, scope: !2165)
!2170 = !DILocation(line: 654, column: 29, scope: !2166)
!2171 = !DILocalVariable(name: "j", scope: !2172, file: !80, line: 657, type: !74)
!2172 = distinct !DILexicalBlock(scope: !2165, file: !80, line: 656, column: 27)
!2173 = !DILocation(line: 657, column: 36, scope: !2172)
!2174 = !DILocation(line: 658, column: 36, scope: !2175)
!2175 = distinct !DILexicalBlock(scope: !2172, file: !80, line: 658, column: 29)
!2176 = !DILocation(line: 658, column: 34, scope: !2175)
!2177 = !DILocation(line: 658, column: 41, scope: !2178)
!2178 = distinct !DILexicalBlock(scope: !2175, file: !80, line: 658, column: 29)
!2179 = !DILocation(line: 658, column: 45, scope: !2178)
!2180 = !DILocation(line: 658, column: 43, scope: !2178)
!2181 = !DILocation(line: 658, column: 29, scope: !2175)
!2182 = !DILocation(line: 659, column: 39, scope: !2178)
!2183 = !DILocation(line: 659, column: 43, scope: !2178)
!2184 = !DILocation(line: 659, column: 47, scope: !2178)
!2185 = !DILocation(line: 659, column: 45, scope: !2178)
!2186 = !DILocation(line: 659, column: 51, scope: !2178)
!2187 = !DILocation(line: 659, column: 49, scope: !2178)
!2188 = !DILocation(line: 659, column: 31, scope: !2178)
!2189 = !DILocation(line: 663, column: 35, scope: !2190)
!2190 = distinct !DILexicalBlock(scope: !2178, file: !80, line: 660, column: 33)
!2191 = !DILocation(line: 666, column: 35, scope: !2190)
!2192 = !DILocation(line: 667, column: 33, scope: !2190)
!2193 = !DILocation(line: 658, column: 53, scope: !2178)
!2194 = !DILocation(line: 658, column: 29, scope: !2178)
!2195 = distinct !{!2195, !2181, !2196}
!2196 = !DILocation(line: 667, column: 33, scope: !2175)
!2197 = !DILocation(line: 668, column: 27, scope: !2172)
!2198 = !DILocation(line: 670, column: 41, scope: !2199)
!2199 = distinct !DILexicalBlock(scope: !2166, file: !80, line: 670, column: 29)
!2200 = !DILocation(line: 670, column: 31, scope: !2199)
!2201 = !DILocation(line: 670, column: 29, scope: !2166)
!2202 = !DILocation(line: 671, column: 37, scope: !2199)
!2203 = !DILocation(line: 671, column: 27, scope: !2199)
!2204 = !DILocation(line: 672, column: 30, scope: !2166)
!2205 = !DILocation(line: 672, column: 27, scope: !2166)
!2206 = !DILocation(line: 674, column: 19, scope: !2116)
!2207 = !DILocation(line: 675, column: 26, scope: !2086)
!2208 = !DILocation(line: 675, column: 24, scope: !2086)
!2209 = distinct !{!2209, !2114, !2210}
!2210 = !DILocation(line: 675, column: 44, scope: !2086)
!2211 = !DILocation(line: 678, column: 40, scope: !2072)
!2212 = !DILocation(line: 678, column: 38, scope: !2072)
!2213 = !DILocation(line: 680, column: 21, scope: !2214)
!2214 = distinct !DILexicalBlock(scope: !2072, file: !80, line: 680, column: 17)
!2215 = !DILocation(line: 680, column: 19, scope: !2214)
!2216 = !DILocation(line: 680, column: 23, scope: !2214)
!2217 = !DILocation(line: 680, column: 27, scope: !2214)
!2218 = !DILocation(line: 680, column: 45, scope: !2214)
!2219 = !DILocation(line: 680, column: 50, scope: !2214)
!2220 = !DILocation(line: 680, column: 17, scope: !2072)
!2221 = !DILocalVariable(name: "ilim", scope: !2222, file: !80, line: 684, type: !74)
!2222 = distinct !DILexicalBlock(scope: !2214, file: !80, line: 681, column: 15)
!2223 = !DILocation(line: 684, column: 24, scope: !2222)
!2224 = !DILocation(line: 684, column: 31, scope: !2222)
!2225 = !DILocation(line: 684, column: 35, scope: !2222)
!2226 = !DILocation(line: 684, column: 33, scope: !2222)
!2227 = !DILocation(line: 686, column: 17, scope: !2222)
!2228 = !DILocation(line: 688, column: 25, scope: !2229)
!2229 = distinct !DILexicalBlock(scope: !2230, file: !80, line: 688, column: 25)
!2230 = distinct !DILexicalBlock(scope: !2231, file: !80, line: 687, column: 19)
!2231 = distinct !DILexicalBlock(scope: !2232, file: !80, line: 686, column: 17)
!2232 = distinct !DILexicalBlock(scope: !2222, file: !80, line: 686, column: 17)
!2233 = !DILocation(line: 688, column: 43, scope: !2229)
!2234 = !DILocation(line: 688, column: 48, scope: !2229)
!2235 = !DILocation(line: 688, column: 25, scope: !2230)
!2236 = !DILocation(line: 690, column: 25, scope: !2237)
!2237 = distinct !DILexicalBlock(scope: !2229, file: !80, line: 689, column: 23)
!2238 = !DILocation(line: 690, column: 25, scope: !2239)
!2239 = distinct !DILexicalBlock(scope: !2240, file: !80, line: 690, column: 25)
!2240 = distinct !DILexicalBlock(scope: !2237, file: !80, line: 690, column: 25)
!2241 = !DILocation(line: 690, column: 25, scope: !2240)
!2242 = !DILocation(line: 690, column: 25, scope: !2243)
!2243 = distinct !DILexicalBlock(scope: !2240, file: !80, line: 690, column: 25)
!2244 = !DILocation(line: 690, column: 25, scope: !2245)
!2245 = distinct !DILexicalBlock(scope: !2243, file: !80, line: 690, column: 25)
!2246 = !DILocation(line: 690, column: 25, scope: !2247)
!2247 = distinct !DILexicalBlock(scope: !2248, file: !80, line: 690, column: 25)
!2248 = distinct !DILexicalBlock(scope: !2245, file: !80, line: 690, column: 25)
!2249 = !DILocation(line: 690, column: 25, scope: !2248)
!2250 = !DILocation(line: 690, column: 25, scope: !2251)
!2251 = distinct !DILexicalBlock(scope: !2252, file: !80, line: 690, column: 25)
!2252 = distinct !DILexicalBlock(scope: !2245, file: !80, line: 690, column: 25)
!2253 = !DILocation(line: 690, column: 25, scope: !2252)
!2254 = !DILocation(line: 690, column: 25, scope: !2255)
!2255 = distinct !DILexicalBlock(scope: !2256, file: !80, line: 690, column: 25)
!2256 = distinct !DILexicalBlock(scope: !2245, file: !80, line: 690, column: 25)
!2257 = !DILocation(line: 690, column: 25, scope: !2256)
!2258 = !DILocation(line: 690, column: 25, scope: !2259)
!2259 = distinct !DILexicalBlock(scope: !2260, file: !80, line: 690, column: 25)
!2260 = distinct !DILexicalBlock(scope: !2240, file: !80, line: 690, column: 25)
!2261 = !DILocation(line: 690, column: 25, scope: !2260)
!2262 = !DILocation(line: 691, column: 25, scope: !2237)
!2263 = !DILocation(line: 691, column: 25, scope: !2264)
!2264 = distinct !DILexicalBlock(scope: !2265, file: !80, line: 691, column: 25)
!2265 = distinct !DILexicalBlock(scope: !2237, file: !80, line: 691, column: 25)
!2266 = !DILocation(line: 691, column: 25, scope: !2265)
!2267 = !DILocation(line: 692, column: 25, scope: !2237)
!2268 = !DILocation(line: 692, column: 25, scope: !2269)
!2269 = distinct !DILexicalBlock(scope: !2270, file: !80, line: 692, column: 25)
!2270 = distinct !DILexicalBlock(scope: !2237, file: !80, line: 692, column: 25)
!2271 = !DILocation(line: 692, column: 25, scope: !2270)
!2272 = !DILocation(line: 693, column: 36, scope: !2237)
!2273 = !DILocation(line: 693, column: 38, scope: !2237)
!2274 = !DILocation(line: 693, column: 33, scope: !2237)
!2275 = !DILocation(line: 693, column: 29, scope: !2237)
!2276 = !DILocation(line: 693, column: 27, scope: !2237)
!2277 = !DILocation(line: 694, column: 23, scope: !2237)
!2278 = !DILocation(line: 695, column: 30, scope: !2279)
!2279 = distinct !DILexicalBlock(scope: !2229, file: !80, line: 695, column: 30)
!2280 = !DILocation(line: 695, column: 30, scope: !2229)
!2281 = !DILocation(line: 697, column: 25, scope: !2282)
!2282 = distinct !DILexicalBlock(scope: !2279, file: !80, line: 696, column: 23)
!2283 = !DILocation(line: 697, column: 25, scope: !2284)
!2284 = distinct !DILexicalBlock(scope: !2285, file: !80, line: 697, column: 25)
!2285 = distinct !DILexicalBlock(scope: !2282, file: !80, line: 697, column: 25)
!2286 = !DILocation(line: 697, column: 25, scope: !2285)
!2287 = !DILocation(line: 698, column: 40, scope: !2282)
!2288 = !DILocation(line: 699, column: 23, scope: !2282)
!2289 = !DILocation(line: 700, column: 25, scope: !2290)
!2290 = distinct !DILexicalBlock(scope: !2230, file: !80, line: 700, column: 25)
!2291 = !DILocation(line: 700, column: 33, scope: !2290)
!2292 = !DILocation(line: 700, column: 35, scope: !2290)
!2293 = !DILocation(line: 700, column: 30, scope: !2290)
!2294 = !DILocation(line: 700, column: 25, scope: !2230)
!2295 = !DILocation(line: 701, column: 23, scope: !2290)
!2296 = !DILocation(line: 702, column: 21, scope: !2230)
!2297 = !DILocation(line: 702, column: 21, scope: !2298)
!2298 = distinct !DILexicalBlock(scope: !2299, file: !80, line: 702, column: 21)
!2299 = distinct !DILexicalBlock(scope: !2230, file: !80, line: 702, column: 21)
!2300 = !DILocation(line: 702, column: 21, scope: !2299)
!2301 = !DILocation(line: 702, column: 21, scope: !2302)
!2302 = distinct !DILexicalBlock(scope: !2298, file: !80, line: 702, column: 21)
!2303 = !DILocation(line: 702, column: 21, scope: !2304)
!2304 = distinct !DILexicalBlock(scope: !2305, file: !80, line: 702, column: 21)
!2305 = distinct !DILexicalBlock(scope: !2302, file: !80, line: 702, column: 21)
!2306 = !DILocation(line: 702, column: 21, scope: !2305)
!2307 = !DILocation(line: 702, column: 21, scope: !2308)
!2308 = distinct !DILexicalBlock(scope: !2309, file: !80, line: 702, column: 21)
!2309 = distinct !DILexicalBlock(scope: !2302, file: !80, line: 702, column: 21)
!2310 = !DILocation(line: 702, column: 21, scope: !2309)
!2311 = !DILocation(line: 703, column: 21, scope: !2230)
!2312 = !DILocation(line: 703, column: 21, scope: !2313)
!2313 = distinct !DILexicalBlock(scope: !2314, file: !80, line: 703, column: 21)
!2314 = distinct !DILexicalBlock(scope: !2230, file: !80, line: 703, column: 21)
!2315 = !DILocation(line: 703, column: 21, scope: !2314)
!2316 = !DILocation(line: 704, column: 25, scope: !2230)
!2317 = !DILocation(line: 704, column: 29, scope: !2230)
!2318 = !DILocation(line: 704, column: 23, scope: !2230)
!2319 = !DILocation(line: 686, column: 17, scope: !2231)
!2320 = distinct !{!2320, !2321, !2322}
!2321 = !DILocation(line: 686, column: 17, scope: !2232)
!2322 = !DILocation(line: 705, column: 19, scope: !2232)
!2323 = !DILocation(line: 707, column: 17, scope: !2222)
!2324 = !DILocation(line: 710, column: 9, scope: !1822)
!2325 = !DILocation(line: 712, column: 16, scope: !2326)
!2326 = distinct !DILexicalBlock(scope: !1768, file: !80, line: 712, column: 11)
!2327 = !DILocation(line: 712, column: 34, scope: !2326)
!2328 = !DILocation(line: 712, column: 37, scope: !2326)
!2329 = !DILocation(line: 712, column: 51, scope: !2326)
!2330 = !DILocation(line: 713, column: 15, scope: !2326)
!2331 = !DILocation(line: 713, column: 18, scope: !2326)
!2332 = !DILocation(line: 714, column: 14, scope: !2326)
!2333 = !DILocation(line: 714, column: 17, scope: !2326)
!2334 = !DILocation(line: 715, column: 14, scope: !2326)
!2335 = !DILocation(line: 715, column: 17, scope: !2326)
!2336 = !DILocation(line: 715, column: 33, scope: !2326)
!2337 = !DILocation(line: 715, column: 35, scope: !2326)
!2338 = !DILocation(line: 715, column: 51, scope: !2326)
!2339 = !DILocation(line: 715, column: 53, scope: !2326)
!2340 = !DILocation(line: 715, column: 47, scope: !2326)
!2341 = !DILocation(line: 715, column: 65, scope: !2326)
!2342 = !DILocation(line: 716, column: 11, scope: !2326)
!2343 = !DILocation(line: 716, column: 15, scope: !2326)
!2344 = !DILocation(line: 712, column: 11, scope: !1768)
!2345 = !DILocation(line: 717, column: 9, scope: !2326)
!2346 = !DILabel(scope: !1768, name: "store_escape", file: !80, line: 719)
!2347 = !DILocation(line: 719, column: 5, scope: !1768)
!2348 = !DILocation(line: 720, column: 7, scope: !1768)
!2349 = !DILocation(line: 720, column: 7, scope: !2350)
!2350 = distinct !DILexicalBlock(scope: !2351, file: !80, line: 720, column: 7)
!2351 = distinct !DILexicalBlock(scope: !1768, file: !80, line: 720, column: 7)
!2352 = !DILocation(line: 720, column: 7, scope: !2351)
!2353 = !DILocation(line: 720, column: 7, scope: !2354)
!2354 = distinct !DILexicalBlock(scope: !2351, file: !80, line: 720, column: 7)
!2355 = !DILocation(line: 720, column: 7, scope: !2356)
!2356 = distinct !DILexicalBlock(scope: !2354, file: !80, line: 720, column: 7)
!2357 = !DILocation(line: 720, column: 7, scope: !2358)
!2358 = distinct !DILexicalBlock(scope: !2359, file: !80, line: 720, column: 7)
!2359 = distinct !DILexicalBlock(scope: !2356, file: !80, line: 720, column: 7)
!2360 = !DILocation(line: 720, column: 7, scope: !2359)
!2361 = !DILocation(line: 720, column: 7, scope: !2362)
!2362 = distinct !DILexicalBlock(scope: !2363, file: !80, line: 720, column: 7)
!2363 = distinct !DILexicalBlock(scope: !2356, file: !80, line: 720, column: 7)
!2364 = !DILocation(line: 720, column: 7, scope: !2363)
!2365 = !DILocation(line: 720, column: 7, scope: !2366)
!2366 = distinct !DILexicalBlock(scope: !2367, file: !80, line: 720, column: 7)
!2367 = distinct !DILexicalBlock(scope: !2356, file: !80, line: 720, column: 7)
!2368 = !DILocation(line: 720, column: 7, scope: !2367)
!2369 = !DILocation(line: 720, column: 7, scope: !2370)
!2370 = distinct !DILexicalBlock(scope: !2371, file: !80, line: 720, column: 7)
!2371 = distinct !DILexicalBlock(scope: !2351, file: !80, line: 720, column: 7)
!2372 = !DILocation(line: 720, column: 7, scope: !2371)
!2373 = !DILabel(scope: !1768, name: "store_c", file: !80, line: 722)
!2374 = !DILocation(line: 722, column: 5, scope: !1768)
!2375 = !DILocation(line: 723, column: 7, scope: !1768)
!2376 = !DILocation(line: 723, column: 7, scope: !2377)
!2377 = distinct !DILexicalBlock(scope: !2378, file: !80, line: 723, column: 7)
!2378 = distinct !DILexicalBlock(scope: !1768, file: !80, line: 723, column: 7)
!2379 = !DILocation(line: 723, column: 7, scope: !2378)
!2380 = !DILocation(line: 723, column: 7, scope: !2381)
!2381 = distinct !DILexicalBlock(scope: !2377, file: !80, line: 723, column: 7)
!2382 = !DILocation(line: 723, column: 7, scope: !2383)
!2383 = distinct !DILexicalBlock(scope: !2384, file: !80, line: 723, column: 7)
!2384 = distinct !DILexicalBlock(scope: !2381, file: !80, line: 723, column: 7)
!2385 = !DILocation(line: 723, column: 7, scope: !2384)
!2386 = !DILocation(line: 723, column: 7, scope: !2387)
!2387 = distinct !DILexicalBlock(scope: !2388, file: !80, line: 723, column: 7)
!2388 = distinct !DILexicalBlock(scope: !2381, file: !80, line: 723, column: 7)
!2389 = !DILocation(line: 723, column: 7, scope: !2388)
!2390 = !DILocation(line: 724, column: 7, scope: !1768)
!2391 = !DILocation(line: 724, column: 7, scope: !2392)
!2392 = distinct !DILexicalBlock(scope: !2393, file: !80, line: 724, column: 7)
!2393 = distinct !DILexicalBlock(scope: !1768, file: !80, line: 724, column: 7)
!2394 = !DILocation(line: 724, column: 7, scope: !2393)
!2395 = !DILocation(line: 726, column: 13, scope: !2396)
!2396 = distinct !DILexicalBlock(scope: !1768, file: !80, line: 726, column: 11)
!2397 = !DILocation(line: 726, column: 11, scope: !1768)
!2398 = !DILocation(line: 727, column: 38, scope: !2396)
!2399 = !DILocation(line: 727, column: 9, scope: !2396)
!2400 = !DILocation(line: 728, column: 5, scope: !1768)
!2401 = !DILocation(line: 400, column: 75, scope: !1757)
!2402 = !DILocation(line: 400, column: 3, scope: !1757)
!2403 = distinct !{!2403, !1766, !2404}
!2404 = !DILocation(line: 728, column: 5, scope: !1754)
!2405 = !DILocation(line: 730, column: 7, scope: !2406)
!2406 = distinct !DILexicalBlock(scope: !1614, file: !80, line: 730, column: 7)
!2407 = !DILocation(line: 730, column: 11, scope: !2406)
!2408 = !DILocation(line: 730, column: 16, scope: !2406)
!2409 = !DILocation(line: 730, column: 19, scope: !2406)
!2410 = !DILocation(line: 730, column: 33, scope: !2406)
!2411 = !DILocation(line: 731, column: 7, scope: !2406)
!2412 = !DILocation(line: 731, column: 10, scope: !2406)
!2413 = !DILocation(line: 730, column: 7, scope: !1614)
!2414 = !DILocation(line: 732, column: 5, scope: !2406)
!2415 = !DILocation(line: 738, column: 7, scope: !2416)
!2416 = distinct !DILexicalBlock(scope: !1614, file: !80, line: 738, column: 7)
!2417 = !DILocation(line: 738, column: 21, scope: !2416)
!2418 = !DILocation(line: 738, column: 51, scope: !2416)
!2419 = !DILocation(line: 738, column: 56, scope: !2416)
!2420 = !DILocation(line: 739, column: 7, scope: !2416)
!2421 = !DILocation(line: 739, column: 10, scope: !2416)
!2422 = !DILocation(line: 738, column: 7, scope: !1614)
!2423 = !DILocation(line: 741, column: 11, scope: !2424)
!2424 = distinct !DILexicalBlock(scope: !2425, file: !80, line: 741, column: 11)
!2425 = distinct !DILexicalBlock(scope: !2416, file: !80, line: 740, column: 5)
!2426 = !DILocation(line: 741, column: 11, scope: !2425)
!2427 = !DILocation(line: 742, column: 42, scope: !2424)
!2428 = !DILocation(line: 742, column: 50, scope: !2424)
!2429 = !DILocation(line: 742, column: 67, scope: !2424)
!2430 = !DILocation(line: 742, column: 72, scope: !2424)
!2431 = !DILocation(line: 744, column: 42, scope: !2424)
!2432 = !DILocation(line: 744, column: 49, scope: !2424)
!2433 = !DILocation(line: 745, column: 42, scope: !2424)
!2434 = !DILocation(line: 745, column: 54, scope: !2424)
!2435 = !DILocation(line: 742, column: 16, scope: !2424)
!2436 = !DILocation(line: 742, column: 9, scope: !2424)
!2437 = !DILocation(line: 746, column: 18, scope: !2438)
!2438 = distinct !DILexicalBlock(scope: !2424, file: !80, line: 746, column: 16)
!2439 = !DILocation(line: 746, column: 29, scope: !2438)
!2440 = !DILocation(line: 746, column: 32, scope: !2438)
!2441 = !DILocation(line: 746, column: 16, scope: !2424)
!2442 = !DILocation(line: 749, column: 24, scope: !2443)
!2443 = distinct !DILexicalBlock(scope: !2438, file: !80, line: 747, column: 9)
!2444 = !DILocation(line: 749, column: 22, scope: !2443)
!2445 = !DILocation(line: 750, column: 15, scope: !2443)
!2446 = !DILocation(line: 751, column: 11, scope: !2443)
!2447 = !DILocation(line: 753, column: 5, scope: !2425)
!2448 = !DILocation(line: 755, column: 7, scope: !2449)
!2449 = distinct !DILexicalBlock(scope: !1614, file: !80, line: 755, column: 7)
!2450 = !DILocation(line: 755, column: 20, scope: !2449)
!2451 = !DILocation(line: 755, column: 24, scope: !2449)
!2452 = !DILocation(line: 755, column: 7, scope: !1614)
!2453 = !DILocation(line: 756, column: 5, scope: !2449)
!2454 = !DILocation(line: 756, column: 13, scope: !2455)
!2455 = distinct !DILexicalBlock(scope: !2456, file: !80, line: 756, column: 5)
!2456 = distinct !DILexicalBlock(scope: !2449, file: !80, line: 756, column: 5)
!2457 = !DILocation(line: 756, column: 12, scope: !2455)
!2458 = !DILocation(line: 756, column: 5, scope: !2456)
!2459 = !DILocation(line: 757, column: 7, scope: !2455)
!2460 = !DILocation(line: 757, column: 7, scope: !2461)
!2461 = distinct !DILexicalBlock(scope: !2462, file: !80, line: 757, column: 7)
!2462 = distinct !DILexicalBlock(scope: !2455, file: !80, line: 757, column: 7)
!2463 = !DILocation(line: 757, column: 7, scope: !2462)
!2464 = !DILocation(line: 756, column: 39, scope: !2455)
!2465 = !DILocation(line: 756, column: 5, scope: !2455)
!2466 = distinct !{!2466, !2458, !2467}
!2467 = !DILocation(line: 757, column: 7, scope: !2456)
!2468 = !DILocation(line: 759, column: 7, scope: !2469)
!2469 = distinct !DILexicalBlock(scope: !1614, file: !80, line: 759, column: 7)
!2470 = !DILocation(line: 759, column: 13, scope: !2469)
!2471 = !DILocation(line: 759, column: 11, scope: !2469)
!2472 = !DILocation(line: 759, column: 7, scope: !1614)
!2473 = !DILocation(line: 760, column: 5, scope: !2469)
!2474 = !DILocation(line: 760, column: 12, scope: !2469)
!2475 = !DILocation(line: 760, column: 17, scope: !2469)
!2476 = !DILocation(line: 761, column: 10, scope: !1614)
!2477 = !DILocation(line: 761, column: 3, scope: !1614)
!2478 = !DILabel(scope: !1614, name: "force_outer_quoting_style", file: !80, line: 763)
!2479 = !DILocation(line: 763, column: 2, scope: !1614)
!2480 = !DILocation(line: 766, column: 7, scope: !2481)
!2481 = distinct !DILexicalBlock(scope: !1614, file: !80, line: 766, column: 7)
!2482 = !DILocation(line: 766, column: 21, scope: !2481)
!2483 = !DILocation(line: 766, column: 51, scope: !2481)
!2484 = !DILocation(line: 766, column: 54, scope: !2481)
!2485 = !DILocation(line: 766, column: 7, scope: !1614)
!2486 = !DILocation(line: 767, column: 19, scope: !2481)
!2487 = !DILocation(line: 767, column: 5, scope: !2481)
!2488 = !DILocation(line: 768, column: 36, scope: !1614)
!2489 = !DILocation(line: 768, column: 44, scope: !1614)
!2490 = !DILocation(line: 768, column: 56, scope: !1614)
!2491 = !DILocation(line: 768, column: 61, scope: !1614)
!2492 = !DILocation(line: 769, column: 36, scope: !1614)
!2493 = !DILocation(line: 770, column: 36, scope: !1614)
!2494 = !DILocation(line: 770, column: 42, scope: !1614)
!2495 = !DILocation(line: 771, column: 36, scope: !1614)
!2496 = !DILocation(line: 771, column: 48, scope: !1614)
!2497 = !DILocation(line: 768, column: 10, scope: !1614)
!2498 = !DILocation(line: 768, column: 3, scope: !1614)
!2499 = !DILocation(line: 772, column: 1, scope: !1614)
!2500 = !DILocalVariable(name: "buffer", arg: 1, scope: !2501, file: !80, line: 256, type: !7)
!2501 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !80, file: !80, line: 256, type: !1615, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2502, retainedNodes: !4)
!2502 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !2503, nameTableKind: None)
!2503 = !{!2504, !2506, !2508, !2517, !2519, !2521, !2528, !2530}
!2504 = !DIGlobalVariableExpression(var: !2505, expr: !DIExpression())
!2505 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2502, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!2506 = !DIGlobalVariableExpression(var: !2507, expr: !DIExpression())
!2507 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2502, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!2508 = !DIGlobalVariableExpression(var: !2509, expr: !DIExpression())
!2509 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2502, file: !80, line: 1052, type: !2510, isLocal: false, isDefinition: true)
!2510 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !2511)
!2511 = !{!2512, !2513, !2514, !2515, !2516}
!2512 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2510, file: !80, line: 68, baseType: !57, size: 32)
!2513 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2510, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!2514 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2510, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!2515 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2510, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!2516 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2510, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!2517 = !DIGlobalVariableExpression(var: !2518, expr: !DIExpression())
!2518 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2502, file: !80, line: 116, type: !2510, isLocal: true, isDefinition: true)
!2519 = !DIGlobalVariableExpression(var: !2520, expr: !DIExpression())
!2520 = distinct !DIGlobalVariable(name: "slot0", scope: !2502, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!2521 = !DIGlobalVariableExpression(var: !2522, expr: !DIExpression())
!2522 = distinct !DIGlobalVariable(name: "slotvec", scope: !2502, file: !80, line: 845, type: !2523, isLocal: true, isDefinition: true)
!2523 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2524, size: 64)
!2524 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !2525)
!2525 = !{!2526, !2527}
!2526 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2524, file: !80, line: 836, baseType: !74, size: 64)
!2527 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2524, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!2528 = !DIGlobalVariableExpression(var: !2529, expr: !DIExpression())
!2529 = distinct !DIGlobalVariable(name: "nslots", scope: !2502, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!2530 = !DIGlobalVariableExpression(var: !2531, expr: !DIExpression())
!2531 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2502, file: !80, line: 844, type: !2524, isLocal: true, isDefinition: true)
!2532 = !DILocalVariable(name: "buffersize", arg: 2, scope: !2501, file: !80, line: 256, type: !74)
!2533 = !DILocalVariable(name: "arg", arg: 3, scope: !2501, file: !80, line: 257, type: !16)
!2534 = !DILocalVariable(name: "argsize", arg: 4, scope: !2501, file: !80, line: 257, type: !74)
!2535 = !DILocalVariable(name: "quoting_style", arg: 5, scope: !2501, file: !80, line: 258, type: !57)
!2536 = !DILocalVariable(name: "flags", arg: 6, scope: !2501, file: !80, line: 258, type: !19)
!2537 = !DILocalVariable(name: "quote_these_too", arg: 7, scope: !2501, file: !80, line: 259, type: !1617)
!2538 = !DILocalVariable(name: "left_quote", arg: 8, scope: !2501, file: !80, line: 260, type: !16)
!2539 = !DILocalVariable(name: "right_quote", arg: 9, scope: !2501, file: !80, line: 261, type: !16)
!2540 = !DILocalVariable(name: "i", scope: !2501, file: !80, line: 263, type: !74)
!2541 = !DILocalVariable(name: "len", scope: !2501, file: !80, line: 264, type: !74)
!2542 = !DILocalVariable(name: "orig_buffersize", scope: !2501, file: !80, line: 265, type: !74)
!2543 = !DILocalVariable(name: "quote_string", scope: !2501, file: !80, line: 266, type: !16)
!2544 = !DILocalVariable(name: "quote_string_len", scope: !2501, file: !80, line: 267, type: !74)
!2545 = !DILocalVariable(name: "backslash_escapes", scope: !2501, file: !80, line: 268, type: !38)
!2546 = !DILocalVariable(name: "unibyte_locale", scope: !2501, file: !80, line: 269, type: !38)
!2547 = !DILocalVariable(name: "elide_outer_quotes", scope: !2501, file: !80, line: 270, type: !38)
!2548 = !DILocalVariable(name: "pending_shell_escape_end", scope: !2501, file: !80, line: 271, type: !38)
!2549 = !DILocalVariable(name: "encountered_single_quote", scope: !2501, file: !80, line: 272, type: !38)
!2550 = !DILocalVariable(name: "all_c_and_shell_quote_compat", scope: !2501, file: !80, line: 273, type: !38)
!2551 = !DILocalVariable(name: "escaping", scope: !2552, file: !80, line: 405, type: !38)
!2552 = distinct !DILexicalBlock(scope: !2553, file: !80, line: 401, column: 5)
!2553 = distinct !DILexicalBlock(scope: !2554, file: !80, line: 400, column: 3)
!2554 = distinct !DILexicalBlock(scope: !2555, file: !80, line: 400, column: 3)
!2555 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !80, file: !80, line: 256, type: !1615, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2556, retainedNodes: !4)
!2556 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !2557, nameTableKind: None)
!2557 = !{!2558, !2560, !2562, !2571, !2573, !2575, !2582, !2584}
!2558 = !DIGlobalVariableExpression(var: !2559, expr: !DIExpression())
!2559 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2556, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!2560 = !DIGlobalVariableExpression(var: !2561, expr: !DIExpression())
!2561 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2556, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!2562 = !DIGlobalVariableExpression(var: !2563, expr: !DIExpression())
!2563 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2556, file: !80, line: 1052, type: !2564, isLocal: false, isDefinition: true)
!2564 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !2565)
!2565 = !{!2566, !2567, !2568, !2569, !2570}
!2566 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2564, file: !80, line: 68, baseType: !57, size: 32)
!2567 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2564, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!2568 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2564, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!2569 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2564, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!2570 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2564, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!2571 = !DIGlobalVariableExpression(var: !2572, expr: !DIExpression())
!2572 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2556, file: !80, line: 116, type: !2564, isLocal: true, isDefinition: true)
!2573 = !DIGlobalVariableExpression(var: !2574, expr: !DIExpression())
!2574 = distinct !DIGlobalVariable(name: "slot0", scope: !2556, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!2575 = !DIGlobalVariableExpression(var: !2576, expr: !DIExpression())
!2576 = distinct !DIGlobalVariable(name: "slotvec", scope: !2556, file: !80, line: 845, type: !2577, isLocal: true, isDefinition: true)
!2577 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2578, size: 64)
!2578 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !2579)
!2579 = !{!2580, !2581}
!2580 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2578, file: !80, line: 836, baseType: !74, size: 64)
!2581 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2578, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!2582 = !DIGlobalVariableExpression(var: !2583, expr: !DIExpression())
!2583 = distinct !DIGlobalVariable(name: "nslots", scope: !2556, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!2584 = !DIGlobalVariableExpression(var: !2585, expr: !DIExpression())
!2585 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2556, file: !80, line: 844, type: !2578, isLocal: true, isDefinition: true)
!2586 = !DILocalVariable(name: "c_and_shell_quote_compat", scope: !2552, file: !80, line: 406, type: !38)
!2587 = distinct !DISubprogram(name: "gettext_quote", scope: !80, file: !80, line: 207, type: !2588, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !4)
!2588 = !DISubroutineType(types: !2589)
!2589 = !{!16, !16, !57}
!2590 = !DILocalVariable(name: "msgid", arg: 1, scope: !2587, file: !80, line: 207, type: !16)
!2591 = !DILocation(line: 207, column: 28, scope: !2587)
!2592 = !DILocalVariable(name: "s", arg: 2, scope: !2587, file: !80, line: 207, type: !57)
!2593 = !DILocation(line: 207, column: 54, scope: !2587)
!2594 = !DILocalVariable(name: "translation", scope: !2587, file: !80, line: 209, type: !16)
!2595 = !DILocation(line: 209, column: 15, scope: !2587)
!2596 = !DILocation(line: 209, column: 29, scope: !2587)
!2597 = !DILocalVariable(name: "locale_code", scope: !2587, file: !80, line: 210, type: !16)
!2598 = !DILocation(line: 210, column: 15, scope: !2587)
!2599 = !DILocation(line: 212, column: 7, scope: !2600)
!2600 = distinct !DILexicalBlock(scope: !2587, file: !80, line: 212, column: 7)
!2601 = !DILocation(line: 212, column: 22, scope: !2600)
!2602 = !DILocation(line: 212, column: 19, scope: !2600)
!2603 = !DILocation(line: 212, column: 7, scope: !2587)
!2604 = !DILocation(line: 213, column: 12, scope: !2600)
!2605 = !DILocation(line: 213, column: 5, scope: !2600)
!2606 = !DILocation(line: 233, column: 17, scope: !2587)
!2607 = !DILocation(line: 233, column: 15, scope: !2587)
!2608 = !DILocation(line: 234, column: 7, scope: !2609)
!2609 = distinct !DILexicalBlock(scope: !2587, file: !80, line: 234, column: 7)
!2610 = !DILocation(line: 234, column: 7, scope: !2587)
!2611 = !DILocation(line: 235, column: 12, scope: !2609)
!2612 = !DILocation(line: 235, column: 21, scope: !2609)
!2613 = !DILocation(line: 235, column: 5, scope: !2609)
!2614 = !DILocation(line: 236, column: 7, scope: !2615)
!2615 = distinct !DILexicalBlock(scope: !2587, file: !80, line: 236, column: 7)
!2616 = !DILocation(line: 236, column: 7, scope: !2587)
!2617 = !DILocation(line: 237, column: 12, scope: !2615)
!2618 = !DILocation(line: 237, column: 21, scope: !2615)
!2619 = !DILocation(line: 237, column: 5, scope: !2615)
!2620 = !DILocation(line: 239, column: 11, scope: !2587)
!2621 = !DILocation(line: 239, column: 13, scope: !2587)
!2622 = !DILocation(line: 239, column: 3, scope: !2587)
!2623 = !DILocation(line: 240, column: 1, scope: !2587)
!2624 = distinct !DISubprogram(name: "quotearg_style", scope: !80, file: !80, line: 970, type: !2625, scopeLine: 971, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !4)
!2625 = !DISubroutineType(types: !2626)
!2626 = !{!7, !57, !16}
!2627 = !DILocalVariable(name: "s", arg: 1, scope: !2624, file: !80, line: 970, type: !57)
!2628 = !DILocation(line: 970, column: 36, scope: !2624)
!2629 = !DILocalVariable(name: "arg", arg: 2, scope: !2624, file: !80, line: 970, type: !16)
!2630 = !DILocation(line: 970, column: 51, scope: !2624)
!2631 = !DILocation(line: 972, column: 31, scope: !2624)
!2632 = !DILocation(line: 972, column: 34, scope: !2624)
!2633 = !DILocation(line: 972, column: 10, scope: !2624)
!2634 = !DILocation(line: 972, column: 3, scope: !2624)
!2635 = distinct !DISubprogram(name: "quotearg_char_mem", scope: !80, file: !80, line: 982, type: !2636, scopeLine: 983, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !4)
!2636 = !DISubroutineType(types: !2637)
!2637 = !{!7, !16, !74, !8}
!2638 = !DILocalVariable(name: "arg", arg: 1, scope: !2635, file: !80, line: 982, type: !16)
!2639 = !DILocation(line: 982, column: 32, scope: !2635)
!2640 = !DILocalVariable(name: "argsize", arg: 2, scope: !2635, file: !80, line: 982, type: !74)
!2641 = !DILocation(line: 982, column: 44, scope: !2635)
!2642 = !DILocalVariable(name: "ch", arg: 3, scope: !2635, file: !80, line: 982, type: !8)
!2643 = !DILocation(line: 982, column: 58, scope: !2635)
!2644 = !DILocalVariable(name: "options", scope: !2635, file: !80, line: 984, type: !93)
!2645 = !DILocation(line: 984, column: 26, scope: !2635)
!2646 = !DILocation(line: 985, column: 13, scope: !2635)
!2647 = !DILocation(line: 986, column: 31, scope: !2635)
!2648 = !DILocation(line: 986, column: 3, scope: !2635)
!2649 = !DILocation(line: 987, column: 33, scope: !2635)
!2650 = !DILocation(line: 987, column: 38, scope: !2635)
!2651 = !DILocation(line: 987, column: 10, scope: !2635)
!2652 = !DILocation(line: 987, column: 3, scope: !2635)
!2653 = !DILocalVariable(name: "arg", arg: 1, scope: !2654, file: !80, line: 982, type: !16)
!2654 = distinct !DISubprogram(name: "quotearg_char_mem", scope: !80, file: !80, line: 982, type: !2636, scopeLine: 983, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2655, retainedNodes: !4)
!2655 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !2656, nameTableKind: None)
!2656 = !{!2657, !2659, !2661, !2670, !2672, !2674, !2681, !2683}
!2657 = !DIGlobalVariableExpression(var: !2658, expr: !DIExpression())
!2658 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2655, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!2659 = !DIGlobalVariableExpression(var: !2660, expr: !DIExpression())
!2660 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2655, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!2661 = !DIGlobalVariableExpression(var: !2662, expr: !DIExpression())
!2662 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2655, file: !80, line: 1052, type: !2663, isLocal: false, isDefinition: true)
!2663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !2664)
!2664 = !{!2665, !2666, !2667, !2668, !2669}
!2665 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2663, file: !80, line: 68, baseType: !57, size: 32)
!2666 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2663, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!2667 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2663, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!2668 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2663, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!2669 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2663, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!2670 = !DIGlobalVariableExpression(var: !2671, expr: !DIExpression())
!2671 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2655, file: !80, line: 116, type: !2663, isLocal: true, isDefinition: true)
!2672 = !DIGlobalVariableExpression(var: !2673, expr: !DIExpression())
!2673 = distinct !DIGlobalVariable(name: "slot0", scope: !2655, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!2674 = !DIGlobalVariableExpression(var: !2675, expr: !DIExpression())
!2675 = distinct !DIGlobalVariable(name: "slotvec", scope: !2655, file: !80, line: 845, type: !2676, isLocal: true, isDefinition: true)
!2676 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2677, size: 64)
!2677 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !2678)
!2678 = !{!2679, !2680}
!2679 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2677, file: !80, line: 836, baseType: !74, size: 64)
!2680 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2677, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!2681 = !DIGlobalVariableExpression(var: !2682, expr: !DIExpression())
!2682 = distinct !DIGlobalVariable(name: "nslots", scope: !2655, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!2683 = !DIGlobalVariableExpression(var: !2684, expr: !DIExpression())
!2684 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2655, file: !80, line: 844, type: !2677, isLocal: true, isDefinition: true)
!2685 = !DILocalVariable(name: "argsize", arg: 2, scope: !2654, file: !80, line: 982, type: !74)
!2686 = !DILocalVariable(name: "ch", arg: 3, scope: !2654, file: !80, line: 982, type: !8)
!2687 = !DILocalVariable(name: "options", scope: !2654, file: !80, line: 984, type: !2663)
!2688 = distinct !DISubprogram(name: "quotearg_char", scope: !80, file: !80, line: 991, type: !2689, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !4)
!2689 = !DISubroutineType(types: !2690)
!2690 = !{!7, !16, !8}
!2691 = !DILocalVariable(name: "arg", arg: 1, scope: !2688, file: !80, line: 991, type: !16)
!2692 = !DILocation(line: 991, column: 28, scope: !2688)
!2693 = !DILocalVariable(name: "ch", arg: 2, scope: !2688, file: !80, line: 991, type: !8)
!2694 = !DILocation(line: 991, column: 38, scope: !2688)
!2695 = !DILocation(line: 993, column: 29, scope: !2688)
!2696 = !DILocation(line: 993, column: 44, scope: !2688)
!2697 = !DILocation(line: 993, column: 10, scope: !2688)
!2698 = !DILocation(line: 993, column: 3, scope: !2688)
!2699 = !DILocalVariable(name: "arg", arg: 1, scope: !2700, file: !80, line: 991, type: !16)
!2700 = distinct !DISubprogram(name: "quotearg_char", scope: !80, file: !80, line: 991, type: !2689, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2701, retainedNodes: !4)
!2701 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !2702, nameTableKind: None)
!2702 = !{!2703, !2705, !2707, !2716, !2718, !2720, !2727, !2729}
!2703 = !DIGlobalVariableExpression(var: !2704, expr: !DIExpression())
!2704 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2701, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!2705 = !DIGlobalVariableExpression(var: !2706, expr: !DIExpression())
!2706 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2701, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!2707 = !DIGlobalVariableExpression(var: !2708, expr: !DIExpression())
!2708 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2701, file: !80, line: 1052, type: !2709, isLocal: false, isDefinition: true)
!2709 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !2710)
!2710 = !{!2711, !2712, !2713, !2714, !2715}
!2711 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2709, file: !80, line: 68, baseType: !57, size: 32)
!2712 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2709, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!2713 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2709, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!2714 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2709, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!2715 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2709, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!2716 = !DIGlobalVariableExpression(var: !2717, expr: !DIExpression())
!2717 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2701, file: !80, line: 116, type: !2709, isLocal: true, isDefinition: true)
!2718 = !DIGlobalVariableExpression(var: !2719, expr: !DIExpression())
!2719 = distinct !DIGlobalVariable(name: "slot0", scope: !2701, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!2720 = !DIGlobalVariableExpression(var: !2721, expr: !DIExpression())
!2721 = distinct !DIGlobalVariable(name: "slotvec", scope: !2701, file: !80, line: 845, type: !2722, isLocal: true, isDefinition: true)
!2722 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2723, size: 64)
!2723 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !2724)
!2724 = !{!2725, !2726}
!2725 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2723, file: !80, line: 836, baseType: !74, size: 64)
!2726 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2723, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!2727 = !DIGlobalVariableExpression(var: !2728, expr: !DIExpression())
!2728 = distinct !DIGlobalVariable(name: "nslots", scope: !2701, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!2729 = !DIGlobalVariableExpression(var: !2730, expr: !DIExpression())
!2730 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2701, file: !80, line: 844, type: !2723, isLocal: true, isDefinition: true)
!2731 = !DILocalVariable(name: "ch", arg: 2, scope: !2700, file: !80, line: 991, type: !8)
!2732 = distinct !DISubprogram(name: "quotearg_colon", scope: !80, file: !80, line: 997, type: !2733, scopeLine: 998, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !4)
!2733 = !DISubroutineType(types: !2734)
!2734 = !{!7, !16}
!2735 = !DILocalVariable(name: "arg", arg: 1, scope: !2732, file: !80, line: 997, type: !16)
!2736 = !DILocation(line: 997, column: 29, scope: !2732)
!2737 = !DILocation(line: 999, column: 25, scope: !2732)
!2738 = !DILocation(line: 999, column: 10, scope: !2732)
!2739 = !DILocation(line: 999, column: 3, scope: !2732)
!2740 = !DILocalVariable(name: "arg", arg: 1, scope: !2741, file: !80, line: 997, type: !16)
!2741 = distinct !DISubprogram(name: "quotearg_colon", scope: !80, file: !80, line: 997, type: !2733, scopeLine: 998, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2742, retainedNodes: !4)
!2742 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !2743, nameTableKind: None)
!2743 = !{!2744, !2746, !2748, !2757, !2759, !2761, !2768, !2770}
!2744 = !DIGlobalVariableExpression(var: !2745, expr: !DIExpression())
!2745 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2742, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!2746 = !DIGlobalVariableExpression(var: !2747, expr: !DIExpression())
!2747 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2742, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!2748 = !DIGlobalVariableExpression(var: !2749, expr: !DIExpression())
!2749 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2742, file: !80, line: 1052, type: !2750, isLocal: false, isDefinition: true)
!2750 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !2751)
!2751 = !{!2752, !2753, !2754, !2755, !2756}
!2752 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2750, file: !80, line: 68, baseType: !57, size: 32)
!2753 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2750, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!2754 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2750, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!2755 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2750, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!2756 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2750, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!2757 = !DIGlobalVariableExpression(var: !2758, expr: !DIExpression())
!2758 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2742, file: !80, line: 116, type: !2750, isLocal: true, isDefinition: true)
!2759 = !DIGlobalVariableExpression(var: !2760, expr: !DIExpression())
!2760 = distinct !DIGlobalVariable(name: "slot0", scope: !2742, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!2761 = !DIGlobalVariableExpression(var: !2762, expr: !DIExpression())
!2762 = distinct !DIGlobalVariable(name: "slotvec", scope: !2742, file: !80, line: 845, type: !2763, isLocal: true, isDefinition: true)
!2763 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2764, size: 64)
!2764 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !2765)
!2765 = !{!2766, !2767}
!2766 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2764, file: !80, line: 836, baseType: !74, size: 64)
!2767 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2764, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!2768 = !DIGlobalVariableExpression(var: !2769, expr: !DIExpression())
!2769 = distinct !DIGlobalVariable(name: "nslots", scope: !2742, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!2770 = !DIGlobalVariableExpression(var: !2771, expr: !DIExpression())
!2771 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2742, file: !80, line: 844, type: !2764, isLocal: true, isDefinition: true)
!2772 = distinct !DISubprogram(name: "quote_n_mem", scope: !80, file: !80, line: 1061, type: !2773, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !4)
!2773 = !DISubroutineType(types: !2774)
!2774 = !{!16, !19, !16, !74}
!2775 = !DILocalVariable(name: "n", arg: 1, scope: !2772, file: !80, line: 1061, type: !19)
!2776 = !DILocation(line: 1061, column: 18, scope: !2772)
!2777 = !DILocalVariable(name: "arg", arg: 2, scope: !2772, file: !80, line: 1061, type: !16)
!2778 = !DILocation(line: 1061, column: 33, scope: !2772)
!2779 = !DILocalVariable(name: "argsize", arg: 3, scope: !2772, file: !80, line: 1061, type: !74)
!2780 = !DILocation(line: 1061, column: 45, scope: !2772)
!2781 = !DILocation(line: 1063, column: 30, scope: !2772)
!2782 = !DILocation(line: 1063, column: 33, scope: !2772)
!2783 = !DILocation(line: 1063, column: 38, scope: !2772)
!2784 = !DILocation(line: 1063, column: 10, scope: !2772)
!2785 = !DILocation(line: 1063, column: 3, scope: !2772)
!2786 = !DILocalVariable(name: "n", arg: 1, scope: !2787, file: !80, line: 1061, type: !19)
!2787 = distinct !DISubprogram(name: "quote_n_mem", scope: !80, file: !80, line: 1061, type: !2773, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2788, retainedNodes: !4)
!2788 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !2789, nameTableKind: None)
!2789 = !{!2790, !2792, !2794, !2803, !2805, !2807, !2814, !2816}
!2790 = !DIGlobalVariableExpression(var: !2791, expr: !DIExpression())
!2791 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2788, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!2792 = !DIGlobalVariableExpression(var: !2793, expr: !DIExpression())
!2793 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2788, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!2794 = !DIGlobalVariableExpression(var: !2795, expr: !DIExpression())
!2795 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2788, file: !80, line: 1052, type: !2796, isLocal: false, isDefinition: true)
!2796 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !2797)
!2797 = !{!2798, !2799, !2800, !2801, !2802}
!2798 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2796, file: !80, line: 68, baseType: !57, size: 32)
!2799 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2796, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!2800 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2796, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!2801 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2796, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!2802 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2796, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!2803 = !DIGlobalVariableExpression(var: !2804, expr: !DIExpression())
!2804 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2788, file: !80, line: 116, type: !2796, isLocal: true, isDefinition: true)
!2805 = !DIGlobalVariableExpression(var: !2806, expr: !DIExpression())
!2806 = distinct !DIGlobalVariable(name: "slot0", scope: !2788, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!2807 = !DIGlobalVariableExpression(var: !2808, expr: !DIExpression())
!2808 = distinct !DIGlobalVariable(name: "slotvec", scope: !2788, file: !80, line: 845, type: !2809, isLocal: true, isDefinition: true)
!2809 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2810, size: 64)
!2810 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !2811)
!2811 = !{!2812, !2813}
!2812 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2810, file: !80, line: 836, baseType: !74, size: 64)
!2813 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2810, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!2814 = !DIGlobalVariableExpression(var: !2815, expr: !DIExpression())
!2815 = distinct !DIGlobalVariable(name: "nslots", scope: !2788, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!2816 = !DIGlobalVariableExpression(var: !2817, expr: !DIExpression())
!2817 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2788, file: !80, line: 844, type: !2810, isLocal: true, isDefinition: true)
!2818 = !DILocalVariable(name: "arg", arg: 2, scope: !2787, file: !80, line: 1061, type: !16)
!2819 = !DILocalVariable(name: "argsize", arg: 3, scope: !2787, file: !80, line: 1061, type: !74)
!2820 = distinct !DISubprogram(name: "quote_n", scope: !80, file: !80, line: 1073, type: !2821, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !4)
!2821 = !DISubroutineType(types: !2822)
!2822 = !{!16, !19, !16}
!2823 = !DILocalVariable(name: "n", arg: 1, scope: !2820, file: !80, line: 1073, type: !19)
!2824 = !DILocation(line: 1073, column: 14, scope: !2820)
!2825 = !DILocalVariable(name: "arg", arg: 2, scope: !2820, file: !80, line: 1073, type: !16)
!2826 = !DILocation(line: 1073, column: 29, scope: !2820)
!2827 = !DILocation(line: 1075, column: 23, scope: !2820)
!2828 = !DILocation(line: 1075, column: 26, scope: !2820)
!2829 = !DILocation(line: 1075, column: 10, scope: !2820)
!2830 = !DILocation(line: 1075, column: 3, scope: !2820)
!2831 = !DILocalVariable(name: "n", arg: 1, scope: !2832, file: !80, line: 1073, type: !19)
!2832 = distinct !DISubprogram(name: "quote_n", scope: !80, file: !80, line: 1073, type: !2821, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2833, retainedNodes: !4)
!2833 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !2834, nameTableKind: None)
!2834 = !{!2835, !2837, !2839, !2848, !2850, !2852, !2859, !2861}
!2835 = !DIGlobalVariableExpression(var: !2836, expr: !DIExpression())
!2836 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2833, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!2837 = !DIGlobalVariableExpression(var: !2838, expr: !DIExpression())
!2838 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2833, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!2839 = !DIGlobalVariableExpression(var: !2840, expr: !DIExpression())
!2840 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2833, file: !80, line: 1052, type: !2841, isLocal: false, isDefinition: true)
!2841 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !2842)
!2842 = !{!2843, !2844, !2845, !2846, !2847}
!2843 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2841, file: !80, line: 68, baseType: !57, size: 32)
!2844 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2841, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!2845 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2841, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!2846 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2841, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!2847 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2841, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!2848 = !DIGlobalVariableExpression(var: !2849, expr: !DIExpression())
!2849 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2833, file: !80, line: 116, type: !2841, isLocal: true, isDefinition: true)
!2850 = !DIGlobalVariableExpression(var: !2851, expr: !DIExpression())
!2851 = distinct !DIGlobalVariable(name: "slot0", scope: !2833, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!2852 = !DIGlobalVariableExpression(var: !2853, expr: !DIExpression())
!2853 = distinct !DIGlobalVariable(name: "slotvec", scope: !2833, file: !80, line: 845, type: !2854, isLocal: true, isDefinition: true)
!2854 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2855, size: 64)
!2855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !2856)
!2856 = !{!2857, !2858}
!2857 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2855, file: !80, line: 836, baseType: !74, size: 64)
!2858 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2855, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!2859 = !DIGlobalVariableExpression(var: !2860, expr: !DIExpression())
!2860 = distinct !DIGlobalVariable(name: "nslots", scope: !2833, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!2861 = !DIGlobalVariableExpression(var: !2862, expr: !DIExpression())
!2862 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2833, file: !80, line: 844, type: !2855, isLocal: true, isDefinition: true)
!2863 = !DILocalVariable(name: "arg", arg: 2, scope: !2832, file: !80, line: 1073, type: !16)
!2864 = distinct !DISubprogram(name: "quote", scope: !80, file: !80, line: 1079, type: !2865, scopeLine: 1080, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !4)
!2865 = !DISubroutineType(types: !2866)
!2866 = !{!16, !16}
!2867 = !DILocalVariable(name: "arg", arg: 1, scope: !2864, file: !80, line: 1079, type: !16)
!2868 = !DILocation(line: 1079, column: 20, scope: !2864)
!2869 = !DILocation(line: 1081, column: 22, scope: !2864)
!2870 = !DILocation(line: 1081, column: 10, scope: !2864)
!2871 = !DILocation(line: 1081, column: 3, scope: !2864)
!2872 = !DILocalVariable(name: "arg", arg: 1, scope: !2873, file: !80, line: 1079, type: !16)
!2873 = distinct !DISubprogram(name: "quote", scope: !80, file: !80, line: 1079, type: !2865, scopeLine: 1080, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2874, retainedNodes: !4)
!2874 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !2875, nameTableKind: None)
!2875 = !{!2876, !2878, !2880, !2889, !2891, !2893, !2900, !2902}
!2876 = !DIGlobalVariableExpression(var: !2877, expr: !DIExpression())
!2877 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2874, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!2878 = !DIGlobalVariableExpression(var: !2879, expr: !DIExpression())
!2879 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2874, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!2880 = !DIGlobalVariableExpression(var: !2881, expr: !DIExpression())
!2881 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2874, file: !80, line: 1052, type: !2882, isLocal: false, isDefinition: true)
!2882 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !2883)
!2883 = !{!2884, !2885, !2886, !2887, !2888}
!2884 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2882, file: !80, line: 68, baseType: !57, size: 32)
!2885 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2882, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!2886 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2882, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!2887 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2882, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!2888 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2882, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!2889 = !DIGlobalVariableExpression(var: !2890, expr: !DIExpression())
!2890 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2874, file: !80, line: 116, type: !2882, isLocal: true, isDefinition: true)
!2891 = !DIGlobalVariableExpression(var: !2892, expr: !DIExpression())
!2892 = distinct !DIGlobalVariable(name: "slot0", scope: !2874, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!2893 = !DIGlobalVariableExpression(var: !2894, expr: !DIExpression())
!2894 = distinct !DIGlobalVariable(name: "slotvec", scope: !2874, file: !80, line: 845, type: !2895, isLocal: true, isDefinition: true)
!2895 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2896, size: 64)
!2896 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !2897)
!2897 = !{!2898, !2899}
!2898 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2896, file: !80, line: 836, baseType: !74, size: 64)
!2899 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2896, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!2900 = !DIGlobalVariableExpression(var: !2901, expr: !DIExpression())
!2901 = distinct !DIGlobalVariable(name: "nslots", scope: !2874, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!2902 = !DIGlobalVariableExpression(var: !2903, expr: !DIExpression())
!2903 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2874, file: !80, line: 844, type: !2896, isLocal: true, isDefinition: true)
!2904 = distinct !DISubprogram(name: "get_root_dev_ino", scope: !2905, file: !2905, line: 29, type: !2906, scopeLine: 30, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !128, retainedNodes: !4)
!2905 = !DIFile(filename: "lib/root-dev-ino.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2906 = !DISubroutineType(types: !2907)
!2907 = !{!2908, !2908}
!2908 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2909, size: 64)
!2909 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dev_ino", file: !565, line: 7, size: 128, elements: !2910)
!2910 = !{!2911, !2912}
!2911 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !2909, file: !565, line: 9, baseType: !568, size: 64)
!2912 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !2909, file: !565, line: 10, baseType: !571, size: 64, offset: 64)
!2913 = !DILocalVariable(name: "root_d_i", arg: 1, scope: !2904, file: !2905, line: 29, type: !2908)
!2914 = !DILocation(line: 29, column: 35, scope: !2904)
!2915 = !DILocalVariable(name: "statbuf", scope: !2904, file: !2905, line: 31, type: !2916)
!2916 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !415, line: 46, size: 1152, elements: !2917)
!2917 = !{!2918, !2919, !2920, !2921, !2922, !2923, !2924, !2925, !2926, !2927, !2928, !2929, !2934, !2935, !2936}
!2918 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !2916, file: !415, line: 48, baseType: !418, size: 64)
!2919 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !2916, file: !415, line: 53, baseType: !421, size: 64, offset: 64)
!2920 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !2916, file: !415, line: 61, baseType: !423, size: 64, offset: 128)
!2921 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !2916, file: !415, line: 62, baseType: !425, size: 32, offset: 192)
!2922 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !2916, file: !415, line: 64, baseType: !427, size: 32, offset: 224)
!2923 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !2916, file: !415, line: 65, baseType: !429, size: 32, offset: 256)
!2924 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !2916, file: !415, line: 67, baseType: !19, size: 32, offset: 288)
!2925 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !2916, file: !415, line: 69, baseType: !418, size: 64, offset: 320)
!2926 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !2916, file: !415, line: 74, baseType: !433, size: 64, offset: 384)
!2927 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !2916, file: !415, line: 78, baseType: !436, size: 64, offset: 448)
!2928 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !2916, file: !415, line: 80, baseType: !438, size: 64, offset: 512)
!2929 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !2916, file: !415, line: 91, baseType: !2930, size: 128, offset: 576)
!2930 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !441, line: 10, size: 128, elements: !2931)
!2931 = !{!2932, !2933}
!2932 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !2930, file: !441, line: 12, baseType: !444, size: 64)
!2933 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !2930, file: !441, line: 16, baseType: !446, size: 64, offset: 64)
!2934 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !2916, file: !415, line: 92, baseType: !2930, size: 128, offset: 704)
!2935 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !2916, file: !415, line: 93, baseType: !2930, size: 128, offset: 832)
!2936 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !2916, file: !415, line: 106, baseType: !450, size: 192, offset: 960)
!2937 = !DILocation(line: 31, column: 15, scope: !2904)
!2938 = !DILocation(line: 32, column: 7, scope: !2939)
!2939 = distinct !DILexicalBlock(scope: !2904, file: !2905, line: 32, column: 7)
!2940 = !DILocation(line: 32, column: 7, scope: !2904)
!2941 = !DILocation(line: 33, column: 5, scope: !2939)
!2942 = !DILocation(line: 34, column: 30, scope: !2904)
!2943 = !DILocation(line: 34, column: 3, scope: !2904)
!2944 = !DILocation(line: 34, column: 13, scope: !2904)
!2945 = !DILocation(line: 34, column: 20, scope: !2904)
!2946 = !DILocation(line: 35, column: 30, scope: !2904)
!2947 = !DILocation(line: 35, column: 3, scope: !2904)
!2948 = !DILocation(line: 35, column: 13, scope: !2904)
!2949 = !DILocation(line: 35, column: 20, scope: !2904)
!2950 = !DILocation(line: 36, column: 10, scope: !2904)
!2951 = !DILocation(line: 36, column: 3, scope: !2904)
!2952 = !DILocation(line: 37, column: 1, scope: !2904)
!2953 = distinct !DISubprogram(name: "version_etc_arn", scope: !2954, file: !2954, line: 61, type: !2955, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !130, retainedNodes: !4)
!2954 = !DIFile(filename: "lib/version-etc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2955 = !DISubroutineType(types: !2956)
!2956 = !{null, !2957, !16, !16, !16, !3009, !74}
!2957 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2958, size: 64)
!2958 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2959, line: 7, baseType: !2960)
!2959 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!2960 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2961, line: 49, size: 1728, elements: !2962)
!2961 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!2962 = !{!2963, !2964, !2965, !2966, !2967, !2968, !2969, !2970, !2971, !2972, !2973, !2974, !2975, !2978, !2980, !2981, !2982, !2983, !2984, !2986, !2990, !2993, !2995, !2998, !3001, !3002, !3003, !3004, !3005}
!2963 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2960, file: !2961, line: 51, baseType: !19, size: 32)
!2964 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2960, file: !2961, line: 54, baseType: !7, size: 64, offset: 64)
!2965 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2960, file: !2961, line: 55, baseType: !7, size: 64, offset: 128)
!2966 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2960, file: !2961, line: 56, baseType: !7, size: 64, offset: 192)
!2967 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2960, file: !2961, line: 57, baseType: !7, size: 64, offset: 256)
!2968 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2960, file: !2961, line: 58, baseType: !7, size: 64, offset: 320)
!2969 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2960, file: !2961, line: 59, baseType: !7, size: 64, offset: 384)
!2970 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2960, file: !2961, line: 60, baseType: !7, size: 64, offset: 448)
!2971 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2960, file: !2961, line: 61, baseType: !7, size: 64, offset: 512)
!2972 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2960, file: !2961, line: 64, baseType: !7, size: 64, offset: 576)
!2973 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2960, file: !2961, line: 65, baseType: !7, size: 64, offset: 640)
!2974 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2960, file: !2961, line: 66, baseType: !7, size: 64, offset: 704)
!2975 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2960, file: !2961, line: 68, baseType: !2976, size: 64, offset: 768)
!2976 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2977, size: 64)
!2977 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !2961, line: 36, flags: DIFlagFwdDecl)
!2978 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2960, file: !2961, line: 70, baseType: !2979, size: 64, offset: 832)
!2979 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2960, size: 64)
!2980 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2960, file: !2961, line: 72, baseType: !19, size: 32, offset: 896)
!2981 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2960, file: !2961, line: 73, baseType: !19, size: 32, offset: 928)
!2982 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2960, file: !2961, line: 74, baseType: !433, size: 64, offset: 960)
!2983 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2960, file: !2961, line: 77, baseType: !73, size: 16, offset: 1024)
!2984 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2960, file: !2961, line: 78, baseType: !2985, size: 8, offset: 1040)
!2985 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!2986 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2960, file: !2961, line: 79, baseType: !2987, size: 8, offset: 1048)
!2987 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 8, elements: !2988)
!2988 = !{!2989}
!2989 = !DISubrange(count: 1)
!2990 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2960, file: !2961, line: 81, baseType: !2991, size: 64, offset: 1088)
!2991 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2992, size: 64)
!2992 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !2961, line: 43, baseType: null)
!2993 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2960, file: !2961, line: 89, baseType: !2994, size: 64, offset: 1152)
!2994 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !419, line: 153, baseType: !434)
!2995 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2960, file: !2961, line: 91, baseType: !2996, size: 64, offset: 1216)
!2996 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2997, size: 64)
!2997 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !2961, line: 37, flags: DIFlagFwdDecl)
!2998 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2960, file: !2961, line: 92, baseType: !2999, size: 64, offset: 1280)
!2999 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3000, size: 64)
!3000 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !2961, line: 38, flags: DIFlagFwdDecl)
!3001 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2960, file: !2961, line: 93, baseType: !2979, size: 64, offset: 1344)
!3002 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2960, file: !2961, line: 94, baseType: !6, size: 64, offset: 1408)
!3003 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2960, file: !2961, line: 95, baseType: !74, size: 64, offset: 1472)
!3004 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2960, file: !2961, line: 96, baseType: !19, size: 32, offset: 1536)
!3005 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2960, file: !2961, line: 98, baseType: !3006, size: 160, offset: 1568)
!3006 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 160, elements: !3007)
!3007 = !{!3008}
!3008 = !DISubrange(count: 20)
!3009 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!3010 = !DILocalVariable(name: "stream", arg: 1, scope: !2953, file: !2954, line: 61, type: !2957)
!3011 = !DILocation(line: 61, column: 24, scope: !2953)
!3012 = !DILocalVariable(name: "command_name", arg: 2, scope: !2953, file: !2954, line: 62, type: !16)
!3013 = !DILocation(line: 62, column: 30, scope: !2953)
!3014 = !DILocalVariable(name: "package", arg: 3, scope: !2953, file: !2954, line: 62, type: !16)
!3015 = !DILocation(line: 62, column: 56, scope: !2953)
!3016 = !DILocalVariable(name: "version", arg: 4, scope: !2953, file: !2954, line: 63, type: !16)
!3017 = !DILocation(line: 63, column: 30, scope: !2953)
!3018 = !DILocalVariable(name: "authors", arg: 5, scope: !2953, file: !2954, line: 64, type: !3009)
!3019 = !DILocation(line: 64, column: 39, scope: !2953)
!3020 = !DILocalVariable(name: "n_authors", arg: 6, scope: !2953, file: !2954, line: 64, type: !74)
!3021 = !DILocation(line: 64, column: 55, scope: !2953)
!3022 = !DILocation(line: 66, column: 7, scope: !3023)
!3023 = distinct !DILexicalBlock(scope: !2953, file: !2954, line: 66, column: 7)
!3024 = !DILocation(line: 66, column: 7, scope: !2953)
!3025 = !DILocation(line: 67, column: 14, scope: !3023)
!3026 = !DILocation(line: 67, column: 38, scope: !3023)
!3027 = !DILocation(line: 67, column: 52, scope: !3023)
!3028 = !DILocation(line: 67, column: 61, scope: !3023)
!3029 = !DILocation(line: 67, column: 5, scope: !3023)
!3030 = !DILocation(line: 69, column: 14, scope: !3023)
!3031 = !DILocation(line: 69, column: 33, scope: !3023)
!3032 = !DILocation(line: 69, column: 42, scope: !3023)
!3033 = !DILocation(line: 69, column: 5, scope: !3023)
!3034 = !DILocation(line: 83, column: 12, scope: !2953)
!3035 = !DILocation(line: 83, column: 43, scope: !2953)
!3036 = !DILocation(line: 83, column: 3, scope: !2953)
!3037 = !DILocation(line: 85, column: 3, scope: !2953)
!3038 = !DILocation(line: 88, column: 12, scope: !2953)
!3039 = !DILocation(line: 88, column: 20, scope: !2953)
!3040 = !DILocation(line: 88, column: 3, scope: !2953)
!3041 = !DILocation(line: 95, column: 3, scope: !2953)
!3042 = !DILocation(line: 97, column: 11, scope: !2953)
!3043 = !DILocation(line: 97, column: 3, scope: !2953)
!3044 = !DILocation(line: 102, column: 7, scope: !3045)
!3045 = distinct !DILexicalBlock(scope: !2953, file: !2954, line: 98, column: 5)
!3046 = !DILocation(line: 105, column: 16, scope: !3045)
!3047 = !DILocation(line: 105, column: 24, scope: !3045)
!3048 = !DILocation(line: 105, column: 47, scope: !3045)
!3049 = !DILocation(line: 105, column: 7, scope: !3045)
!3050 = !DILocation(line: 106, column: 7, scope: !3045)
!3051 = !DILocation(line: 109, column: 16, scope: !3045)
!3052 = !DILocation(line: 109, column: 24, scope: !3045)
!3053 = !DILocation(line: 109, column: 54, scope: !3045)
!3054 = !DILocation(line: 109, column: 66, scope: !3045)
!3055 = !DILocation(line: 109, column: 7, scope: !3045)
!3056 = !DILocation(line: 110, column: 7, scope: !3045)
!3057 = !DILocation(line: 113, column: 16, scope: !3045)
!3058 = !DILocation(line: 113, column: 24, scope: !3045)
!3059 = !DILocation(line: 114, column: 16, scope: !3045)
!3060 = !DILocation(line: 114, column: 28, scope: !3045)
!3061 = !DILocation(line: 114, column: 40, scope: !3045)
!3062 = !DILocation(line: 113, column: 7, scope: !3045)
!3063 = !DILocation(line: 115, column: 7, scope: !3045)
!3064 = !DILocation(line: 120, column: 16, scope: !3045)
!3065 = !DILocation(line: 120, column: 24, scope: !3045)
!3066 = !DILocation(line: 121, column: 16, scope: !3045)
!3067 = !DILocation(line: 121, column: 28, scope: !3045)
!3068 = !DILocation(line: 121, column: 40, scope: !3045)
!3069 = !DILocation(line: 121, column: 52, scope: !3045)
!3070 = !DILocation(line: 120, column: 7, scope: !3045)
!3071 = !DILocation(line: 122, column: 7, scope: !3045)
!3072 = !DILocation(line: 127, column: 16, scope: !3045)
!3073 = !DILocation(line: 127, column: 24, scope: !3045)
!3074 = !DILocation(line: 128, column: 16, scope: !3045)
!3075 = !DILocation(line: 128, column: 28, scope: !3045)
!3076 = !DILocation(line: 128, column: 40, scope: !3045)
!3077 = !DILocation(line: 128, column: 52, scope: !3045)
!3078 = !DILocation(line: 128, column: 64, scope: !3045)
!3079 = !DILocation(line: 127, column: 7, scope: !3045)
!3080 = !DILocation(line: 129, column: 7, scope: !3045)
!3081 = !DILocation(line: 134, column: 16, scope: !3045)
!3082 = !DILocation(line: 134, column: 24, scope: !3045)
!3083 = !DILocation(line: 135, column: 16, scope: !3045)
!3084 = !DILocation(line: 135, column: 28, scope: !3045)
!3085 = !DILocation(line: 135, column: 40, scope: !3045)
!3086 = !DILocation(line: 135, column: 52, scope: !3045)
!3087 = !DILocation(line: 135, column: 64, scope: !3045)
!3088 = !DILocation(line: 136, column: 16, scope: !3045)
!3089 = !DILocation(line: 134, column: 7, scope: !3045)
!3090 = !DILocation(line: 137, column: 7, scope: !3045)
!3091 = !DILocation(line: 142, column: 16, scope: !3045)
!3092 = !DILocation(line: 142, column: 24, scope: !3045)
!3093 = !DILocation(line: 143, column: 16, scope: !3045)
!3094 = !DILocation(line: 143, column: 28, scope: !3045)
!3095 = !DILocation(line: 143, column: 40, scope: !3045)
!3096 = !DILocation(line: 143, column: 52, scope: !3045)
!3097 = !DILocation(line: 143, column: 64, scope: !3045)
!3098 = !DILocation(line: 144, column: 16, scope: !3045)
!3099 = !DILocation(line: 144, column: 28, scope: !3045)
!3100 = !DILocation(line: 142, column: 7, scope: !3045)
!3101 = !DILocation(line: 145, column: 7, scope: !3045)
!3102 = !DILocation(line: 150, column: 16, scope: !3045)
!3103 = !DILocation(line: 150, column: 24, scope: !3045)
!3104 = !DILocation(line: 152, column: 17, scope: !3045)
!3105 = !DILocation(line: 152, column: 29, scope: !3045)
!3106 = !DILocation(line: 152, column: 41, scope: !3045)
!3107 = !DILocation(line: 152, column: 53, scope: !3045)
!3108 = !DILocation(line: 152, column: 65, scope: !3045)
!3109 = !DILocation(line: 153, column: 17, scope: !3045)
!3110 = !DILocation(line: 153, column: 29, scope: !3045)
!3111 = !DILocation(line: 153, column: 41, scope: !3045)
!3112 = !DILocation(line: 150, column: 7, scope: !3045)
!3113 = !DILocation(line: 154, column: 7, scope: !3045)
!3114 = !DILocation(line: 159, column: 16, scope: !3045)
!3115 = !DILocation(line: 159, column: 24, scope: !3045)
!3116 = !DILocation(line: 161, column: 16, scope: !3045)
!3117 = !DILocation(line: 161, column: 28, scope: !3045)
!3118 = !DILocation(line: 161, column: 40, scope: !3045)
!3119 = !DILocation(line: 161, column: 52, scope: !3045)
!3120 = !DILocation(line: 161, column: 64, scope: !3045)
!3121 = !DILocation(line: 162, column: 16, scope: !3045)
!3122 = !DILocation(line: 162, column: 28, scope: !3045)
!3123 = !DILocation(line: 162, column: 40, scope: !3045)
!3124 = !DILocation(line: 162, column: 52, scope: !3045)
!3125 = !DILocation(line: 159, column: 7, scope: !3045)
!3126 = !DILocation(line: 163, column: 7, scope: !3045)
!3127 = !DILocation(line: 170, column: 16, scope: !3045)
!3128 = !DILocation(line: 170, column: 24, scope: !3045)
!3129 = !DILocation(line: 172, column: 17, scope: !3045)
!3130 = !DILocation(line: 172, column: 29, scope: !3045)
!3131 = !DILocation(line: 172, column: 41, scope: !3045)
!3132 = !DILocation(line: 172, column: 53, scope: !3045)
!3133 = !DILocation(line: 172, column: 65, scope: !3045)
!3134 = !DILocation(line: 173, column: 17, scope: !3045)
!3135 = !DILocation(line: 173, column: 29, scope: !3045)
!3136 = !DILocation(line: 173, column: 41, scope: !3045)
!3137 = !DILocation(line: 173, column: 53, scope: !3045)
!3138 = !DILocation(line: 170, column: 7, scope: !3045)
!3139 = !DILocation(line: 174, column: 7, scope: !3045)
!3140 = !DILocation(line: 176, column: 1, scope: !2953)
!3141 = !DILocalVariable(name: "stream", arg: 1, scope: !3142, file: !2954, line: 61, type: !3145)
!3142 = distinct !DISubprogram(name: "version_etc_arn", scope: !2954, file: !2954, line: 61, type: !3143, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3179, retainedNodes: !4)
!3143 = !DISubroutineType(types: !3144)
!3144 = !{null, !3145, !16, !16, !16, !3009, !74}
!3145 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3146, size: 64)
!3146 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2959, line: 7, baseType: !3147)
!3147 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2961, line: 49, size: 1728, elements: !3148)
!3148 = !{!3149, !3150, !3151, !3152, !3153, !3154, !3155, !3156, !3157, !3158, !3159, !3160, !3161, !3162, !3164, !3165, !3166, !3167, !3168, !3169, !3170, !3171, !3172, !3173, !3174, !3175, !3176, !3177, !3178}
!3149 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3147, file: !2961, line: 51, baseType: !19, size: 32)
!3150 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3147, file: !2961, line: 54, baseType: !7, size: 64, offset: 64)
!3151 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3147, file: !2961, line: 55, baseType: !7, size: 64, offset: 128)
!3152 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3147, file: !2961, line: 56, baseType: !7, size: 64, offset: 192)
!3153 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3147, file: !2961, line: 57, baseType: !7, size: 64, offset: 256)
!3154 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3147, file: !2961, line: 58, baseType: !7, size: 64, offset: 320)
!3155 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3147, file: !2961, line: 59, baseType: !7, size: 64, offset: 384)
!3156 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3147, file: !2961, line: 60, baseType: !7, size: 64, offset: 448)
!3157 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3147, file: !2961, line: 61, baseType: !7, size: 64, offset: 512)
!3158 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3147, file: !2961, line: 64, baseType: !7, size: 64, offset: 576)
!3159 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3147, file: !2961, line: 65, baseType: !7, size: 64, offset: 640)
!3160 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3147, file: !2961, line: 66, baseType: !7, size: 64, offset: 704)
!3161 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3147, file: !2961, line: 68, baseType: !2976, size: 64, offset: 768)
!3162 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3147, file: !2961, line: 70, baseType: !3163, size: 64, offset: 832)
!3163 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3147, size: 64)
!3164 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3147, file: !2961, line: 72, baseType: !19, size: 32, offset: 896)
!3165 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3147, file: !2961, line: 73, baseType: !19, size: 32, offset: 928)
!3166 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3147, file: !2961, line: 74, baseType: !433, size: 64, offset: 960)
!3167 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3147, file: !2961, line: 77, baseType: !73, size: 16, offset: 1024)
!3168 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3147, file: !2961, line: 78, baseType: !2985, size: 8, offset: 1040)
!3169 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3147, file: !2961, line: 79, baseType: !2987, size: 8, offset: 1048)
!3170 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3147, file: !2961, line: 81, baseType: !2991, size: 64, offset: 1088)
!3171 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3147, file: !2961, line: 89, baseType: !2994, size: 64, offset: 1152)
!3172 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3147, file: !2961, line: 91, baseType: !2996, size: 64, offset: 1216)
!3173 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3147, file: !2961, line: 92, baseType: !2999, size: 64, offset: 1280)
!3174 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3147, file: !2961, line: 93, baseType: !3163, size: 64, offset: 1344)
!3175 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3147, file: !2961, line: 94, baseType: !6, size: 64, offset: 1408)
!3176 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3147, file: !2961, line: 95, baseType: !74, size: 64, offset: 1472)
!3177 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3147, file: !2961, line: 96, baseType: !19, size: 32, offset: 1536)
!3178 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3147, file: !2961, line: 98, baseType: !3006, size: 160, offset: 1568)
!3179 = distinct !DICompileUnit(language: DW_LANG_C99, file: !131, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!3180 = !DILocalVariable(name: "command_name", arg: 2, scope: !3142, file: !2954, line: 62, type: !16)
!3181 = !DILocalVariable(name: "package", arg: 3, scope: !3142, file: !2954, line: 62, type: !16)
!3182 = !DILocalVariable(name: "version", arg: 4, scope: !3142, file: !2954, line: 63, type: !16)
!3183 = !DILocalVariable(name: "authors", arg: 5, scope: !3142, file: !2954, line: 64, type: !3009)
!3184 = !DILocalVariable(name: "n_authors", arg: 6, scope: !3142, file: !2954, line: 64, type: !74)
!3185 = distinct !DISubprogram(name: "version_etc_va", scope: !2954, file: !2954, line: 199, type: !3186, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !130, retainedNodes: !4)
!3186 = !DISubroutineType(types: !3187)
!3187 = !{null, !2957, !16, !16, !16, !3188}
!3188 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3189, size: 64)
!3189 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !131, line: 192, size: 192, elements: !3190)
!3190 = !{!3191, !3192, !3193, !3194}
!3191 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !3189, file: !131, line: 192, baseType: !59, size: 32)
!3192 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !3189, file: !131, line: 192, baseType: !59, size: 32, offset: 32)
!3193 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !3189, file: !131, line: 192, baseType: !6, size: 64, offset: 64)
!3194 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !3189, file: !131, line: 192, baseType: !6, size: 64, offset: 128)
!3195 = !DILocalVariable(name: "stream", arg: 1, scope: !3185, file: !2954, line: 199, type: !2957)
!3196 = !DILocation(line: 199, column: 23, scope: !3185)
!3197 = !DILocalVariable(name: "command_name", arg: 2, scope: !3185, file: !2954, line: 200, type: !16)
!3198 = !DILocation(line: 200, column: 29, scope: !3185)
!3199 = !DILocalVariable(name: "package", arg: 3, scope: !3185, file: !2954, line: 200, type: !16)
!3200 = !DILocation(line: 200, column: 55, scope: !3185)
!3201 = !DILocalVariable(name: "version", arg: 4, scope: !3185, file: !2954, line: 201, type: !16)
!3202 = !DILocation(line: 201, column: 29, scope: !3185)
!3203 = !DILocalVariable(name: "authors", arg: 5, scope: !3185, file: !2954, line: 201, type: !3188)
!3204 = !DILocation(line: 201, column: 46, scope: !3185)
!3205 = !DILocalVariable(name: "n_authors", scope: !3185, file: !2954, line: 203, type: !74)
!3206 = !DILocation(line: 203, column: 10, scope: !3185)
!3207 = !DILocalVariable(name: "authtab", scope: !3185, file: !2954, line: 204, type: !3208)
!3208 = !DICompositeType(tag: DW_TAG_array_type, baseType: !16, size: 640, elements: !89)
!3209 = !DILocation(line: 204, column: 15, scope: !3185)
!3210 = !DILocation(line: 206, column: 18, scope: !3211)
!3211 = distinct !DILexicalBlock(scope: !3185, file: !2954, line: 206, column: 3)
!3212 = !DILocation(line: 206, column: 8, scope: !3211)
!3213 = !DILocation(line: 207, column: 8, scope: !3214)
!3214 = distinct !DILexicalBlock(scope: !3211, file: !2954, line: 206, column: 3)
!3215 = !DILocation(line: 207, column: 18, scope: !3214)
!3216 = !DILocation(line: 208, column: 10, scope: !3214)
!3217 = !DILocation(line: 208, column: 35, scope: !3214)
!3218 = !DILocation(line: 208, column: 22, scope: !3214)
!3219 = !DILocation(line: 208, column: 14, scope: !3214)
!3220 = !DILocation(line: 208, column: 33, scope: !3214)
!3221 = !DILocation(line: 208, column: 67, scope: !3214)
!3222 = !DILocation(line: 0, scope: !3214)
!3223 = !DILocation(line: 206, column: 3, scope: !3211)
!3224 = !DILocation(line: 209, column: 17, scope: !3214)
!3225 = !DILocation(line: 206, column: 3, scope: !3214)
!3226 = distinct !{!3226, !3223, !3227}
!3227 = !DILocation(line: 210, column: 5, scope: !3211)
!3228 = !DILocation(line: 211, column: 20, scope: !3185)
!3229 = !DILocation(line: 211, column: 28, scope: !3185)
!3230 = !DILocation(line: 211, column: 42, scope: !3185)
!3231 = !DILocation(line: 211, column: 51, scope: !3185)
!3232 = !DILocation(line: 212, column: 20, scope: !3185)
!3233 = !DILocation(line: 212, column: 29, scope: !3185)
!3234 = !DILocation(line: 211, column: 3, scope: !3185)
!3235 = !DILocation(line: 213, column: 1, scope: !3185)
!3236 = !DILocalVariable(name: "stream", arg: 1, scope: !3237, file: !2954, line: 199, type: !3240)
!3237 = distinct !DISubprogram(name: "version_etc_va", scope: !2954, file: !2954, line: 199, type: !3238, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3281, retainedNodes: !4)
!3238 = !DISubroutineType(types: !3239)
!3239 = !{null, !3240, !16, !16, !16, !3274}
!3240 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3241, size: 64)
!3241 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2959, line: 7, baseType: !3242)
!3242 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2961, line: 49, size: 1728, elements: !3243)
!3243 = !{!3244, !3245, !3246, !3247, !3248, !3249, !3250, !3251, !3252, !3253, !3254, !3255, !3256, !3257, !3259, !3260, !3261, !3262, !3263, !3264, !3265, !3266, !3267, !3268, !3269, !3270, !3271, !3272, !3273}
!3244 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3242, file: !2961, line: 51, baseType: !19, size: 32)
!3245 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3242, file: !2961, line: 54, baseType: !7, size: 64, offset: 64)
!3246 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3242, file: !2961, line: 55, baseType: !7, size: 64, offset: 128)
!3247 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3242, file: !2961, line: 56, baseType: !7, size: 64, offset: 192)
!3248 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3242, file: !2961, line: 57, baseType: !7, size: 64, offset: 256)
!3249 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3242, file: !2961, line: 58, baseType: !7, size: 64, offset: 320)
!3250 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3242, file: !2961, line: 59, baseType: !7, size: 64, offset: 384)
!3251 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3242, file: !2961, line: 60, baseType: !7, size: 64, offset: 448)
!3252 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3242, file: !2961, line: 61, baseType: !7, size: 64, offset: 512)
!3253 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3242, file: !2961, line: 64, baseType: !7, size: 64, offset: 576)
!3254 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3242, file: !2961, line: 65, baseType: !7, size: 64, offset: 640)
!3255 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3242, file: !2961, line: 66, baseType: !7, size: 64, offset: 704)
!3256 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3242, file: !2961, line: 68, baseType: !2976, size: 64, offset: 768)
!3257 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3242, file: !2961, line: 70, baseType: !3258, size: 64, offset: 832)
!3258 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3242, size: 64)
!3259 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3242, file: !2961, line: 72, baseType: !19, size: 32, offset: 896)
!3260 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3242, file: !2961, line: 73, baseType: !19, size: 32, offset: 928)
!3261 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3242, file: !2961, line: 74, baseType: !433, size: 64, offset: 960)
!3262 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3242, file: !2961, line: 77, baseType: !73, size: 16, offset: 1024)
!3263 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3242, file: !2961, line: 78, baseType: !2985, size: 8, offset: 1040)
!3264 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3242, file: !2961, line: 79, baseType: !2987, size: 8, offset: 1048)
!3265 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3242, file: !2961, line: 81, baseType: !2991, size: 64, offset: 1088)
!3266 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3242, file: !2961, line: 89, baseType: !2994, size: 64, offset: 1152)
!3267 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3242, file: !2961, line: 91, baseType: !2996, size: 64, offset: 1216)
!3268 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3242, file: !2961, line: 92, baseType: !2999, size: 64, offset: 1280)
!3269 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3242, file: !2961, line: 93, baseType: !3258, size: 64, offset: 1344)
!3270 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3242, file: !2961, line: 94, baseType: !6, size: 64, offset: 1408)
!3271 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3242, file: !2961, line: 95, baseType: !74, size: 64, offset: 1472)
!3272 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3242, file: !2961, line: 96, baseType: !19, size: 32, offset: 1536)
!3273 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3242, file: !2961, line: 98, baseType: !3006, size: 160, offset: 1568)
!3274 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3275, size: 64)
!3275 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !131, line: 192, size: 192, elements: !3276)
!3276 = !{!3277, !3278, !3279, !3280}
!3277 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !3275, file: !131, line: 192, baseType: !59, size: 32)
!3278 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !3275, file: !131, line: 192, baseType: !59, size: 32, offset: 32)
!3279 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !3275, file: !131, line: 192, baseType: !6, size: 64, offset: 64)
!3280 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !3275, file: !131, line: 192, baseType: !6, size: 64, offset: 128)
!3281 = distinct !DICompileUnit(language: DW_LANG_C99, file: !131, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!3282 = !DILocalVariable(name: "command_name", arg: 2, scope: !3237, file: !2954, line: 200, type: !16)
!3283 = !DILocalVariable(name: "package", arg: 3, scope: !3237, file: !2954, line: 200, type: !16)
!3284 = !DILocalVariable(name: "version", arg: 4, scope: !3237, file: !2954, line: 201, type: !16)
!3285 = !DILocalVariable(name: "authors", arg: 5, scope: !3237, file: !2954, line: 201, type: !3274)
!3286 = !DILocalVariable(name: "n_authors", scope: !3237, file: !2954, line: 203, type: !74)
!3287 = !DILocalVariable(name: "authtab", scope: !3237, file: !2954, line: 204, type: !3208)
!3288 = distinct !DISubprogram(name: "version_etc", scope: !2954, file: !2954, line: 230, type: !3289, scopeLine: 233, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !130, retainedNodes: !4)
!3289 = !DISubroutineType(types: !3290)
!3290 = !{null, !2957, !16, !16, !16, null}
!3291 = !DILocalVariable(name: "stream", arg: 1, scope: !3288, file: !2954, line: 230, type: !2957)
!3292 = !DILocation(line: 230, column: 20, scope: !3288)
!3293 = !DILocalVariable(name: "command_name", arg: 2, scope: !3288, file: !2954, line: 231, type: !16)
!3294 = !DILocation(line: 231, column: 26, scope: !3288)
!3295 = !DILocalVariable(name: "package", arg: 3, scope: !3288, file: !2954, line: 231, type: !16)
!3296 = !DILocation(line: 231, column: 52, scope: !3288)
!3297 = !DILocalVariable(name: "version", arg: 4, scope: !3288, file: !2954, line: 232, type: !16)
!3298 = !DILocation(line: 232, column: 26, scope: !3288)
!3299 = !DILocalVariable(name: "authors", scope: !3288, file: !2954, line: 234, type: !3300)
!3300 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !3301, line: 52, baseType: !3302)
!3301 = !DIFile(filename: "/usr/include/stdio.h", directory: "")
!3302 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !3303, line: 32, baseType: !3304)
!3303 = !DIFile(filename: "/usr/lib/llvm-9/lib/clang/9.0.1/include/stdarg.h", directory: "")
!3304 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !131, line: 234, baseType: !3305)
!3305 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3189, size: 192, elements: !2988)
!3306 = !DILocation(line: 234, column: 11, scope: !3288)
!3307 = !DILocation(line: 236, column: 3, scope: !3288)
!3308 = !DILocation(line: 237, column: 19, scope: !3288)
!3309 = !DILocation(line: 237, column: 27, scope: !3288)
!3310 = !DILocation(line: 237, column: 41, scope: !3288)
!3311 = !DILocation(line: 237, column: 50, scope: !3288)
!3312 = !DILocation(line: 237, column: 59, scope: !3288)
!3313 = !DILocation(line: 237, column: 3, scope: !3288)
!3314 = !DILocation(line: 238, column: 3, scope: !3288)
!3315 = !DILocation(line: 239, column: 1, scope: !3288)
!3316 = !DILocalVariable(name: "stream", arg: 1, scope: !3317, file: !2954, line: 230, type: !3320)
!3317 = distinct !DISubprogram(name: "version_etc", scope: !2954, file: !2954, line: 230, type: !3318, scopeLine: 233, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3354, retainedNodes: !4)
!3318 = !DISubroutineType(types: !3319)
!3319 = !{null, !3320, !16, !16, !16, null}
!3320 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3321, size: 64)
!3321 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2959, line: 7, baseType: !3322)
!3322 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2961, line: 49, size: 1728, elements: !3323)
!3323 = !{!3324, !3325, !3326, !3327, !3328, !3329, !3330, !3331, !3332, !3333, !3334, !3335, !3336, !3337, !3339, !3340, !3341, !3342, !3343, !3344, !3345, !3346, !3347, !3348, !3349, !3350, !3351, !3352, !3353}
!3324 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3322, file: !2961, line: 51, baseType: !19, size: 32)
!3325 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3322, file: !2961, line: 54, baseType: !7, size: 64, offset: 64)
!3326 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3322, file: !2961, line: 55, baseType: !7, size: 64, offset: 128)
!3327 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3322, file: !2961, line: 56, baseType: !7, size: 64, offset: 192)
!3328 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3322, file: !2961, line: 57, baseType: !7, size: 64, offset: 256)
!3329 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3322, file: !2961, line: 58, baseType: !7, size: 64, offset: 320)
!3330 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3322, file: !2961, line: 59, baseType: !7, size: 64, offset: 384)
!3331 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3322, file: !2961, line: 60, baseType: !7, size: 64, offset: 448)
!3332 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3322, file: !2961, line: 61, baseType: !7, size: 64, offset: 512)
!3333 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3322, file: !2961, line: 64, baseType: !7, size: 64, offset: 576)
!3334 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3322, file: !2961, line: 65, baseType: !7, size: 64, offset: 640)
!3335 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3322, file: !2961, line: 66, baseType: !7, size: 64, offset: 704)
!3336 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3322, file: !2961, line: 68, baseType: !2976, size: 64, offset: 768)
!3337 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3322, file: !2961, line: 70, baseType: !3338, size: 64, offset: 832)
!3338 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3322, size: 64)
!3339 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3322, file: !2961, line: 72, baseType: !19, size: 32, offset: 896)
!3340 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3322, file: !2961, line: 73, baseType: !19, size: 32, offset: 928)
!3341 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3322, file: !2961, line: 74, baseType: !433, size: 64, offset: 960)
!3342 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3322, file: !2961, line: 77, baseType: !73, size: 16, offset: 1024)
!3343 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3322, file: !2961, line: 78, baseType: !2985, size: 8, offset: 1040)
!3344 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3322, file: !2961, line: 79, baseType: !2987, size: 8, offset: 1048)
!3345 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3322, file: !2961, line: 81, baseType: !2991, size: 64, offset: 1088)
!3346 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3322, file: !2961, line: 89, baseType: !2994, size: 64, offset: 1152)
!3347 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3322, file: !2961, line: 91, baseType: !2996, size: 64, offset: 1216)
!3348 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3322, file: !2961, line: 92, baseType: !2999, size: 64, offset: 1280)
!3349 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3322, file: !2961, line: 93, baseType: !3338, size: 64, offset: 1344)
!3350 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3322, file: !2961, line: 94, baseType: !6, size: 64, offset: 1408)
!3351 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3322, file: !2961, line: 95, baseType: !74, size: 64, offset: 1472)
!3352 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3322, file: !2961, line: 96, baseType: !19, size: 32, offset: 1536)
!3353 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3322, file: !2961, line: 98, baseType: !3006, size: 160, offset: 1568)
!3354 = distinct !DICompileUnit(language: DW_LANG_C99, file: !131, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!3355 = !DILocalVariable(name: "command_name", arg: 2, scope: !3317, file: !2954, line: 231, type: !16)
!3356 = !DILocalVariable(name: "package", arg: 3, scope: !3317, file: !2954, line: 231, type: !16)
!3357 = !DILocalVariable(name: "version", arg: 4, scope: !3317, file: !2954, line: 232, type: !16)
!3358 = !DILocalVariable(name: "authors", scope: !3317, file: !2954, line: 234, type: !3359)
!3359 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !3301, line: 52, baseType: !3360)
!3360 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !3303, line: 32, baseType: !3361)
!3361 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !131, line: 234, baseType: !3362)
!3362 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3363, size: 192, elements: !2988)
!3363 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !131, line: 192, size: 192, elements: !3364)
!3364 = !{!3365, !3366, !3367, !3368}
!3365 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !3363, file: !131, line: 192, baseType: !59, size: 32)
!3366 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !3363, file: !131, line: 192, baseType: !59, size: 32, offset: 32)
!3367 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !3363, file: !131, line: 192, baseType: !6, size: 64, offset: 64)
!3368 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !3363, file: !131, line: 192, baseType: !6, size: 64, offset: 128)
!3369 = distinct !DISubprogram(name: "xnmalloc", scope: !3370, file: !3370, line: 99, type: !3371, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !133, retainedNodes: !4)
!3370 = !DIFile(filename: "./lib/xalloc.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3371 = !DISubroutineType(types: !3372)
!3372 = !{!6, !74, !74}
!3373 = !DILocalVariable(name: "n", arg: 1, scope: !3369, file: !3370, line: 99, type: !74)
!3374 = !DILocation(line: 99, column: 18, scope: !3369)
!3375 = !DILocalVariable(name: "s", arg: 2, scope: !3369, file: !3370, line: 99, type: !74)
!3376 = !DILocation(line: 99, column: 28, scope: !3369)
!3377 = !DILocation(line: 101, column: 7, scope: !3378)
!3378 = distinct !DILexicalBlock(scope: !3369, file: !3370, line: 101, column: 7)
!3379 = !DILocation(line: 101, column: 7, scope: !3369)
!3380 = !DILocation(line: 102, column: 5, scope: !3378)
!3381 = !DILocation(line: 103, column: 19, scope: !3369)
!3382 = !DILocation(line: 103, column: 23, scope: !3369)
!3383 = !DILocation(line: 103, column: 21, scope: !3369)
!3384 = !DILocation(line: 103, column: 10, scope: !3369)
!3385 = !DILocation(line: 103, column: 3, scope: !3369)
!3386 = !DILocalVariable(name: "n", arg: 1, scope: !3387, file: !3370, line: 99, type: !74)
!3387 = distinct !DISubprogram(name: "xnmalloc", scope: !3370, file: !3370, line: 99, type: !3371, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3388, retainedNodes: !4)
!3388 = distinct !DICompileUnit(language: DW_LANG_C99, file: !134, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !135, nameTableKind: None)
!3389 = !DILocalVariable(name: "s", arg: 2, scope: !3387, file: !3370, line: 99, type: !74)
!3390 = distinct !DISubprogram(name: "xmalloc", scope: !3391, file: !3391, line: 39, type: !3392, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !133, retainedNodes: !4)
!3391 = !DIFile(filename: "lib/xmalloc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3392 = !DISubroutineType(types: !3393)
!3393 = !{!6, !74}
!3394 = !DILocalVariable(name: "n", arg: 1, scope: !3390, file: !3391, line: 39, type: !74)
!3395 = !DILocation(line: 39, column: 17, scope: !3390)
!3396 = !DILocalVariable(name: "p", scope: !3390, file: !3391, line: 41, type: !6)
!3397 = !DILocation(line: 41, column: 9, scope: !3390)
!3398 = !DILocation(line: 41, column: 21, scope: !3390)
!3399 = !DILocation(line: 41, column: 13, scope: !3390)
!3400 = !DILocation(line: 42, column: 8, scope: !3401)
!3401 = distinct !DILexicalBlock(scope: !3390, file: !3391, line: 42, column: 7)
!3402 = !DILocation(line: 42, column: 10, scope: !3401)
!3403 = !DILocation(line: 42, column: 13, scope: !3401)
!3404 = !DILocation(line: 42, column: 15, scope: !3401)
!3405 = !DILocation(line: 42, column: 7, scope: !3390)
!3406 = !DILocation(line: 43, column: 5, scope: !3401)
!3407 = !DILocation(line: 44, column: 10, scope: !3390)
!3408 = !DILocation(line: 44, column: 3, scope: !3390)
!3409 = !DILocalVariable(name: "n", arg: 1, scope: !3410, file: !3391, line: 39, type: !74)
!3410 = distinct !DISubprogram(name: "xmalloc", scope: !3391, file: !3391, line: 39, type: !3392, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3411, retainedNodes: !4)
!3411 = distinct !DICompileUnit(language: DW_LANG_C99, file: !134, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !135, nameTableKind: None)
!3412 = !DILocalVariable(name: "p", scope: !3410, file: !3391, line: 41, type: !6)
!3413 = distinct !DISubprogram(name: "xrealloc", scope: !3391, file: !3391, line: 51, type: !3414, scopeLine: 52, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !133, retainedNodes: !4)
!3414 = !DISubroutineType(types: !3415)
!3415 = !{!6, !6, !74}
!3416 = !DILocalVariable(name: "p", arg: 1, scope: !3413, file: !3391, line: 51, type: !6)
!3417 = !DILocation(line: 51, column: 17, scope: !3413)
!3418 = !DILocalVariable(name: "n", arg: 2, scope: !3413, file: !3391, line: 51, type: !74)
!3419 = !DILocation(line: 51, column: 27, scope: !3413)
!3420 = !DILocation(line: 53, column: 8, scope: !3421)
!3421 = distinct !DILexicalBlock(scope: !3413, file: !3391, line: 53, column: 7)
!3422 = !DILocation(line: 53, column: 10, scope: !3421)
!3423 = !DILocation(line: 53, column: 13, scope: !3421)
!3424 = !DILocation(line: 53, column: 7, scope: !3413)
!3425 = !DILocation(line: 57, column: 13, scope: !3426)
!3426 = distinct !DILexicalBlock(scope: !3421, file: !3391, line: 54, column: 5)
!3427 = !DILocation(line: 57, column: 7, scope: !3426)
!3428 = !DILocation(line: 58, column: 7, scope: !3426)
!3429 = !DILocation(line: 61, column: 16, scope: !3413)
!3430 = !DILocation(line: 61, column: 19, scope: !3413)
!3431 = !DILocation(line: 61, column: 7, scope: !3413)
!3432 = !DILocation(line: 61, column: 5, scope: !3413)
!3433 = !DILocation(line: 62, column: 8, scope: !3434)
!3434 = distinct !DILexicalBlock(scope: !3413, file: !3391, line: 62, column: 7)
!3435 = !DILocation(line: 62, column: 10, scope: !3434)
!3436 = !DILocation(line: 62, column: 13, scope: !3434)
!3437 = !DILocation(line: 62, column: 7, scope: !3413)
!3438 = !DILocation(line: 63, column: 5, scope: !3434)
!3439 = !DILocation(line: 64, column: 10, scope: !3413)
!3440 = !DILocation(line: 64, column: 3, scope: !3413)
!3441 = !DILocation(line: 65, column: 1, scope: !3413)
!3442 = !DILocalVariable(name: "p", arg: 1, scope: !3443, file: !3391, line: 51, type: !6)
!3443 = distinct !DISubprogram(name: "xrealloc", scope: !3391, file: !3391, line: 51, type: !3414, scopeLine: 52, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3444, retainedNodes: !4)
!3444 = distinct !DICompileUnit(language: DW_LANG_C99, file: !134, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !135, nameTableKind: None)
!3445 = !DILocalVariable(name: "n", arg: 2, scope: !3443, file: !3391, line: 51, type: !74)
!3446 = distinct !DISubprogram(name: "xcharalloc", scope: !3370, file: !3370, line: 216, type: !1020, scopeLine: 217, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !133, retainedNodes: !4)
!3447 = !DILocalVariable(name: "n", arg: 1, scope: !3446, file: !3370, line: 216, type: !74)
!3448 = !DILocation(line: 216, column: 20, scope: !3446)
!3449 = !DILocation(line: 218, column: 10, scope: !3446)
!3450 = !DILocation(line: 218, column: 3, scope: !3446)
!3451 = !DILocalVariable(name: "n", arg: 1, scope: !3452, file: !3370, line: 216, type: !74)
!3452 = distinct !DISubprogram(name: "xcharalloc", scope: !3370, file: !3370, line: 216, type: !1020, scopeLine: 217, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3453, retainedNodes: !4)
!3453 = distinct !DICompileUnit(language: DW_LANG_C99, file: !134, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !135, nameTableKind: None)
!3454 = distinct !DISubprogram(name: "xalloc_die", scope: !3455, file: !3455, line: 32, type: !1138, scopeLine: 33, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !136, retainedNodes: !4)
!3455 = !DIFile(filename: "lib/xalloc-die.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3456 = !DILocation(line: 34, column: 10, scope: !3454)
!3457 = !DILocation(line: 34, column: 33, scope: !3454)
!3458 = !DILocation(line: 34, column: 3, scope: !3454)
!3459 = !DILocation(line: 40, column: 3, scope: !3454)
!3460 = distinct !DISubprogram(name: "xgetcwd", scope: !3461, file: !3461, line: 35, type: !411, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !138, retainedNodes: !4)
!3461 = !DIFile(filename: "lib/xgetcwd.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3462 = !DILocalVariable(name: "cwd", scope: !3460, file: !3461, line: 37, type: !7)
!3463 = !DILocation(line: 37, column: 9, scope: !3460)
!3464 = !DILocation(line: 37, column: 15, scope: !3460)
!3465 = !DILocation(line: 38, column: 9, scope: !3466)
!3466 = distinct !DILexicalBlock(scope: !3460, file: !3461, line: 38, column: 7)
!3467 = !DILocation(line: 38, column: 13, scope: !3466)
!3468 = !DILocation(line: 38, column: 16, scope: !3466)
!3469 = !DILocation(line: 38, column: 22, scope: !3466)
!3470 = !DILocation(line: 38, column: 7, scope: !3460)
!3471 = !DILocation(line: 39, column: 5, scope: !3466)
!3472 = !DILocation(line: 40, column: 10, scope: !3460)
!3473 = !DILocation(line: 40, column: 3, scope: !3460)
!3474 = !DILocalVariable(name: "cwd", scope: !3475, file: !3461, line: 37, type: !7)
!3475 = distinct !DISubprogram(name: "xgetcwd", scope: !3461, file: !3461, line: 35, type: !411, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3476, retainedNodes: !4)
!3476 = distinct !DICompileUnit(language: DW_LANG_C99, file: !139, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!3477 = distinct !DISubprogram(name: "rpl_mbrtowc", scope: !3478, file: !3478, line: 86, type: !3479, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !140, retainedNodes: !4)
!3478 = !DIFile(filename: "lib/mbrtowc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3479 = !DISubroutineType(types: !3480)
!3480 = !{!74, !3481, !16, !74, !3482}
!3481 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2117, size: 64)
!3482 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3483, size: 64)
!3483 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !2088, line: 6, baseType: !3484)
!3484 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !2090, line: 21, baseType: !3485)
!3485 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2090, line: 13, size: 64, elements: !3486)
!3486 = !{!3487, !3488}
!3487 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !3485, file: !2090, line: 15, baseType: !19, size: 32)
!3488 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !3485, file: !2090, line: 20, baseType: !3489, size: 32, offset: 32)
!3489 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !3485, file: !2090, line: 16, size: 32, elements: !3490)
!3490 = !{!3491, !3492}
!3491 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !3489, file: !2090, line: 18, baseType: !59, size: 32)
!3492 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !3489, file: !2090, line: 19, baseType: !2099, size: 32)
!3493 = !DILocalVariable(name: "pwc", arg: 1, scope: !3477, file: !3478, line: 86, type: !3481)
!3494 = !DILocation(line: 86, column: 23, scope: !3477)
!3495 = !DILocalVariable(name: "s", arg: 2, scope: !3477, file: !3478, line: 86, type: !16)
!3496 = !DILocation(line: 86, column: 40, scope: !3477)
!3497 = !DILocalVariable(name: "n", arg: 3, scope: !3477, file: !3478, line: 86, type: !74)
!3498 = !DILocation(line: 86, column: 50, scope: !3477)
!3499 = !DILocalVariable(name: "ps", arg: 4, scope: !3477, file: !3478, line: 86, type: !3482)
!3500 = !DILocation(line: 86, column: 64, scope: !3477)
!3501 = !DILocalVariable(name: "ret", scope: !3477, file: !3478, line: 88, type: !74)
!3502 = !DILocation(line: 88, column: 10, scope: !3477)
!3503 = !DILocalVariable(name: "wc", scope: !3477, file: !3478, line: 89, type: !2117)
!3504 = !DILocation(line: 89, column: 11, scope: !3477)
!3505 = !DILocation(line: 105, column: 9, scope: !3506)
!3506 = distinct !DILexicalBlock(scope: !3477, file: !3478, line: 105, column: 7)
!3507 = !DILocation(line: 105, column: 7, scope: !3477)
!3508 = !DILocation(line: 106, column: 9, scope: !3506)
!3509 = !DILocation(line: 106, column: 5, scope: !3506)
!3510 = !DILocation(line: 145, column: 18, scope: !3477)
!3511 = !DILocation(line: 145, column: 23, scope: !3477)
!3512 = !DILocation(line: 145, column: 26, scope: !3477)
!3513 = !DILocation(line: 145, column: 29, scope: !3477)
!3514 = !DILocation(line: 145, column: 9, scope: !3477)
!3515 = !DILocation(line: 145, column: 7, scope: !3477)
!3516 = !DILocation(line: 154, column: 22, scope: !3517)
!3517 = distinct !DILexicalBlock(scope: !3477, file: !3478, line: 154, column: 7)
!3518 = !DILocation(line: 154, column: 19, scope: !3517)
!3519 = !DILocation(line: 154, column: 26, scope: !3517)
!3520 = !DILocation(line: 154, column: 29, scope: !3517)
!3521 = !DILocation(line: 154, column: 31, scope: !3517)
!3522 = !DILocation(line: 154, column: 36, scope: !3517)
!3523 = !DILocation(line: 154, column: 41, scope: !3517)
!3524 = !DILocation(line: 154, column: 7, scope: !3477)
!3525 = !DILocalVariable(name: "uc", scope: !3526, file: !3478, line: 156, type: !148)
!3526 = distinct !DILexicalBlock(scope: !3517, file: !3478, line: 155, column: 5)
!3527 = !DILocation(line: 156, column: 21, scope: !3526)
!3528 = !DILocation(line: 156, column: 27, scope: !3526)
!3529 = !DILocation(line: 156, column: 26, scope: !3526)
!3530 = !DILocation(line: 157, column: 14, scope: !3526)
!3531 = !DILocation(line: 157, column: 8, scope: !3526)
!3532 = !DILocation(line: 157, column: 12, scope: !3526)
!3533 = !DILocation(line: 158, column: 7, scope: !3526)
!3534 = !DILocation(line: 162, column: 10, scope: !3477)
!3535 = !DILocation(line: 162, column: 3, scope: !3477)
!3536 = !DILocation(line: 163, column: 1, scope: !3477)
!3537 = !DILocalVariable(name: "pwc", arg: 1, scope: !3538, file: !3478, line: 86, type: !3481)
!3538 = distinct !DISubprogram(name: "rpl_mbrtowc", scope: !3478, file: !3478, line: 86, type: !3539, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3552, retainedNodes: !4)
!3539 = !DISubroutineType(types: !3540)
!3540 = !{!74, !3481, !16, !74, !3541}
!3541 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3542, size: 64)
!3542 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !2088, line: 6, baseType: !3543)
!3543 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !2090, line: 21, baseType: !3544)
!3544 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2090, line: 13, size: 64, elements: !3545)
!3545 = !{!3546, !3547}
!3546 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !3544, file: !2090, line: 15, baseType: !19, size: 32)
!3547 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !3544, file: !2090, line: 20, baseType: !3548, size: 32, offset: 32)
!3548 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !3544, file: !2090, line: 16, size: 32, elements: !3549)
!3549 = !{!3550, !3551}
!3550 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !3548, file: !2090, line: 18, baseType: !59, size: 32)
!3551 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !3548, file: !2090, line: 19, baseType: !2099, size: 32)
!3552 = distinct !DICompileUnit(language: DW_LANG_C99, file: !141, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !142, nameTableKind: None)
!3553 = !DILocalVariable(name: "s", arg: 2, scope: !3538, file: !3478, line: 86, type: !16)
!3554 = !DILocalVariable(name: "n", arg: 3, scope: !3538, file: !3478, line: 86, type: !74)
!3555 = !DILocalVariable(name: "ps", arg: 4, scope: !3538, file: !3478, line: 86, type: !3541)
!3556 = !DILocalVariable(name: "ret", scope: !3538, file: !3478, line: 88, type: !74)
!3557 = !DILocalVariable(name: "wc", scope: !3538, file: !3478, line: 89, type: !2117)
!3558 = distinct !DISubprogram(name: "c_strcasecmp", scope: !3559, file: !3559, line: 27, type: !3560, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !143, retainedNodes: !4)
!3559 = !DIFile(filename: "lib/c-strcasecmp.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3560 = !DISubroutineType(types: !3561)
!3561 = !{!19, !16, !16}
!3562 = !DILocalVariable(name: "s1", arg: 1, scope: !3558, file: !3559, line: 27, type: !16)
!3563 = !DILocation(line: 27, column: 27, scope: !3558)
!3564 = !DILocalVariable(name: "s2", arg: 2, scope: !3558, file: !3559, line: 27, type: !16)
!3565 = !DILocation(line: 27, column: 43, scope: !3558)
!3566 = !DILocalVariable(name: "p1", scope: !3558, file: !3559, line: 29, type: !146)
!3567 = !DILocation(line: 29, column: 33, scope: !3558)
!3568 = !DILocation(line: 29, column: 62, scope: !3558)
!3569 = !DILocalVariable(name: "p2", scope: !3558, file: !3559, line: 30, type: !146)
!3570 = !DILocation(line: 30, column: 33, scope: !3558)
!3571 = !DILocation(line: 30, column: 62, scope: !3558)
!3572 = !DILocalVariable(name: "c1", scope: !3558, file: !3559, line: 31, type: !148)
!3573 = !DILocation(line: 31, column: 17, scope: !3558)
!3574 = !DILocalVariable(name: "c2", scope: !3558, file: !3559, line: 31, type: !148)
!3575 = !DILocation(line: 31, column: 21, scope: !3558)
!3576 = !DILocation(line: 33, column: 7, scope: !3577)
!3577 = distinct !DILexicalBlock(scope: !3558, file: !3559, line: 33, column: 7)
!3578 = !DILocation(line: 33, column: 13, scope: !3577)
!3579 = !DILocation(line: 33, column: 10, scope: !3577)
!3580 = !DILocation(line: 33, column: 7, scope: !3558)
!3581 = !DILocation(line: 34, column: 5, scope: !3577)
!3582 = !DILocation(line: 36, column: 3, scope: !3558)
!3583 = !DILocation(line: 38, column: 24, scope: !3584)
!3584 = distinct !DILexicalBlock(scope: !3558, file: !3559, line: 37, column: 5)
!3585 = !DILocation(line: 38, column: 23, scope: !3584)
!3586 = !DILocation(line: 38, column: 12, scope: !3584)
!3587 = !DILocation(line: 38, column: 10, scope: !3584)
!3588 = !DILocation(line: 39, column: 24, scope: !3584)
!3589 = !DILocation(line: 39, column: 23, scope: !3584)
!3590 = !DILocation(line: 39, column: 12, scope: !3584)
!3591 = !DILocation(line: 39, column: 10, scope: !3584)
!3592 = !DILocation(line: 41, column: 11, scope: !3593)
!3593 = distinct !DILexicalBlock(scope: !3584, file: !3559, line: 41, column: 11)
!3594 = !DILocation(line: 41, column: 14, scope: !3593)
!3595 = !DILocation(line: 41, column: 11, scope: !3584)
!3596 = !DILocation(line: 42, column: 9, scope: !3593)
!3597 = !DILocation(line: 44, column: 7, scope: !3584)
!3598 = !DILocation(line: 45, column: 7, scope: !3584)
!3599 = !DILocation(line: 46, column: 5, scope: !3584)
!3600 = !DILocation(line: 47, column: 10, scope: !3558)
!3601 = !DILocation(line: 47, column: 16, scope: !3558)
!3602 = !DILocation(line: 47, column: 13, scope: !3558)
!3603 = distinct !{!3603, !3582, !3604}
!3604 = !DILocation(line: 47, column: 18, scope: !3558)
!3605 = !DILocation(line: 50, column: 12, scope: !3606)
!3606 = distinct !DILexicalBlock(scope: !3558, file: !3559, line: 49, column: 7)
!3607 = !DILocation(line: 50, column: 17, scope: !3606)
!3608 = !DILocation(line: 50, column: 15, scope: !3606)
!3609 = !DILocation(line: 50, column: 5, scope: !3606)
!3610 = !DILocation(line: 56, column: 1, scope: !3558)
!3611 = !DILocalVariable(name: "s1", arg: 1, scope: !3612, file: !3559, line: 27, type: !16)
!3612 = distinct !DISubprogram(name: "c_strcasecmp", scope: !3559, file: !3559, line: 27, type: !3560, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3613, retainedNodes: !4)
!3613 = distinct !DICompileUnit(language: DW_LANG_C99, file: !144, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !145, nameTableKind: None)
!3614 = !DILocalVariable(name: "s2", arg: 2, scope: !3612, file: !3559, line: 27, type: !16)
!3615 = !DILocalVariable(name: "p1", scope: !3612, file: !3559, line: 29, type: !146)
!3616 = !DILocalVariable(name: "p2", scope: !3612, file: !3559, line: 30, type: !146)
!3617 = !DILocalVariable(name: "c1", scope: !3612, file: !3559, line: 31, type: !148)
!3618 = !DILocalVariable(name: "c2", scope: !3612, file: !3559, line: 31, type: !148)
!3619 = distinct !DISubprogram(name: "close_stream", scope: !3620, file: !3620, line: 56, type: !3621, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !149, retainedNodes: !4)
!3620 = !DIFile(filename: "lib/close-stream.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3621 = !DISubroutineType(types: !3622)
!3622 = !{!19, !3623}
!3623 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3624, size: 64)
!3624 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2959, line: 7, baseType: !3625)
!3625 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2961, line: 49, size: 1728, elements: !3626)
!3626 = !{!3627, !3628, !3629, !3630, !3631, !3632, !3633, !3634, !3635, !3636, !3637, !3638, !3639, !3640, !3642, !3643, !3644, !3645, !3646, !3647, !3648, !3649, !3650, !3651, !3652, !3653, !3654, !3655, !3656}
!3627 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3625, file: !2961, line: 51, baseType: !19, size: 32)
!3628 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3625, file: !2961, line: 54, baseType: !7, size: 64, offset: 64)
!3629 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3625, file: !2961, line: 55, baseType: !7, size: 64, offset: 128)
!3630 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3625, file: !2961, line: 56, baseType: !7, size: 64, offset: 192)
!3631 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3625, file: !2961, line: 57, baseType: !7, size: 64, offset: 256)
!3632 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3625, file: !2961, line: 58, baseType: !7, size: 64, offset: 320)
!3633 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3625, file: !2961, line: 59, baseType: !7, size: 64, offset: 384)
!3634 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3625, file: !2961, line: 60, baseType: !7, size: 64, offset: 448)
!3635 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3625, file: !2961, line: 61, baseType: !7, size: 64, offset: 512)
!3636 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3625, file: !2961, line: 64, baseType: !7, size: 64, offset: 576)
!3637 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3625, file: !2961, line: 65, baseType: !7, size: 64, offset: 640)
!3638 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3625, file: !2961, line: 66, baseType: !7, size: 64, offset: 704)
!3639 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3625, file: !2961, line: 68, baseType: !2976, size: 64, offset: 768)
!3640 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3625, file: !2961, line: 70, baseType: !3641, size: 64, offset: 832)
!3641 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3625, size: 64)
!3642 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3625, file: !2961, line: 72, baseType: !19, size: 32, offset: 896)
!3643 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3625, file: !2961, line: 73, baseType: !19, size: 32, offset: 928)
!3644 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3625, file: !2961, line: 74, baseType: !433, size: 64, offset: 960)
!3645 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3625, file: !2961, line: 77, baseType: !73, size: 16, offset: 1024)
!3646 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3625, file: !2961, line: 78, baseType: !2985, size: 8, offset: 1040)
!3647 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3625, file: !2961, line: 79, baseType: !2987, size: 8, offset: 1048)
!3648 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3625, file: !2961, line: 81, baseType: !2991, size: 64, offset: 1088)
!3649 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3625, file: !2961, line: 89, baseType: !2994, size: 64, offset: 1152)
!3650 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3625, file: !2961, line: 91, baseType: !2996, size: 64, offset: 1216)
!3651 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3625, file: !2961, line: 92, baseType: !2999, size: 64, offset: 1280)
!3652 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3625, file: !2961, line: 93, baseType: !3641, size: 64, offset: 1344)
!3653 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3625, file: !2961, line: 94, baseType: !6, size: 64, offset: 1408)
!3654 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3625, file: !2961, line: 95, baseType: !74, size: 64, offset: 1472)
!3655 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3625, file: !2961, line: 96, baseType: !19, size: 32, offset: 1536)
!3656 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3625, file: !2961, line: 98, baseType: !3006, size: 160, offset: 1568)
!3657 = !DILocalVariable(name: "stream", arg: 1, scope: !3619, file: !3620, line: 56, type: !3623)
!3658 = !DILocation(line: 56, column: 21, scope: !3619)
!3659 = !DILocalVariable(name: "some_pending", scope: !3619, file: !3620, line: 58, type: !3660)
!3660 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !38)
!3661 = !DILocation(line: 58, column: 14, scope: !3619)
!3662 = !DILocation(line: 58, column: 42, scope: !3619)
!3663 = !DILocation(line: 58, column: 30, scope: !3619)
!3664 = !DILocation(line: 58, column: 50, scope: !3619)
!3665 = !DILocalVariable(name: "prev_fail", scope: !3619, file: !3620, line: 59, type: !3660)
!3666 = !DILocation(line: 59, column: 14, scope: !3619)
!3667 = !DILocation(line: 59, column: 27, scope: !3619)
!3668 = !DILocation(line: 59, column: 43, scope: !3619)
!3669 = !DILocalVariable(name: "fclose_fail", scope: !3619, file: !3620, line: 60, type: !3660)
!3670 = !DILocation(line: 60, column: 14, scope: !3619)
!3671 = !DILocation(line: 60, column: 37, scope: !3619)
!3672 = !DILocation(line: 60, column: 29, scope: !3619)
!3673 = !DILocation(line: 60, column: 45, scope: !3619)
!3674 = !DILocation(line: 70, column: 7, scope: !3675)
!3675 = distinct !DILexicalBlock(scope: !3619, file: !3620, line: 70, column: 7)
!3676 = !DILocation(line: 70, column: 17, scope: !3675)
!3677 = !DILocation(line: 70, column: 21, scope: !3675)
!3678 = !DILocation(line: 70, column: 33, scope: !3675)
!3679 = !DILocation(line: 70, column: 37, scope: !3675)
!3680 = !DILocation(line: 70, column: 50, scope: !3675)
!3681 = !DILocation(line: 70, column: 53, scope: !3675)
!3682 = !DILocation(line: 70, column: 59, scope: !3675)
!3683 = !DILocation(line: 70, column: 7, scope: !3619)
!3684 = !DILocation(line: 72, column: 13, scope: !3685)
!3685 = distinct !DILexicalBlock(scope: !3686, file: !3620, line: 72, column: 11)
!3686 = distinct !DILexicalBlock(scope: !3675, file: !3620, line: 71, column: 5)
!3687 = !DILocation(line: 72, column: 11, scope: !3686)
!3688 = !DILocation(line: 73, column: 9, scope: !3685)
!3689 = !DILocation(line: 73, column: 15, scope: !3685)
!3690 = !DILocation(line: 74, column: 7, scope: !3686)
!3691 = !DILocation(line: 77, column: 3, scope: !3619)
!3692 = !DILocation(line: 78, column: 1, scope: !3619)
!3693 = !DILocalVariable(name: "stream", arg: 1, scope: !3694, file: !3620, line: 56, type: !3697)
!3694 = distinct !DISubprogram(name: "close_stream", scope: !3620, file: !3620, line: 56, type: !3695, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3731, retainedNodes: !4)
!3695 = !DISubroutineType(types: !3696)
!3696 = !{!19, !3697}
!3697 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3698, size: 64)
!3698 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2959, line: 7, baseType: !3699)
!3699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2961, line: 49, size: 1728, elements: !3700)
!3700 = !{!3701, !3702, !3703, !3704, !3705, !3706, !3707, !3708, !3709, !3710, !3711, !3712, !3713, !3714, !3716, !3717, !3718, !3719, !3720, !3721, !3722, !3723, !3724, !3725, !3726, !3727, !3728, !3729, !3730}
!3701 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3699, file: !2961, line: 51, baseType: !19, size: 32)
!3702 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3699, file: !2961, line: 54, baseType: !7, size: 64, offset: 64)
!3703 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3699, file: !2961, line: 55, baseType: !7, size: 64, offset: 128)
!3704 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3699, file: !2961, line: 56, baseType: !7, size: 64, offset: 192)
!3705 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3699, file: !2961, line: 57, baseType: !7, size: 64, offset: 256)
!3706 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3699, file: !2961, line: 58, baseType: !7, size: 64, offset: 320)
!3707 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3699, file: !2961, line: 59, baseType: !7, size: 64, offset: 384)
!3708 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3699, file: !2961, line: 60, baseType: !7, size: 64, offset: 448)
!3709 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3699, file: !2961, line: 61, baseType: !7, size: 64, offset: 512)
!3710 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3699, file: !2961, line: 64, baseType: !7, size: 64, offset: 576)
!3711 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3699, file: !2961, line: 65, baseType: !7, size: 64, offset: 640)
!3712 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3699, file: !2961, line: 66, baseType: !7, size: 64, offset: 704)
!3713 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3699, file: !2961, line: 68, baseType: !2976, size: 64, offset: 768)
!3714 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3699, file: !2961, line: 70, baseType: !3715, size: 64, offset: 832)
!3715 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3699, size: 64)
!3716 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3699, file: !2961, line: 72, baseType: !19, size: 32, offset: 896)
!3717 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3699, file: !2961, line: 73, baseType: !19, size: 32, offset: 928)
!3718 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3699, file: !2961, line: 74, baseType: !433, size: 64, offset: 960)
!3719 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3699, file: !2961, line: 77, baseType: !73, size: 16, offset: 1024)
!3720 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3699, file: !2961, line: 78, baseType: !2985, size: 8, offset: 1040)
!3721 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3699, file: !2961, line: 79, baseType: !2987, size: 8, offset: 1048)
!3722 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3699, file: !2961, line: 81, baseType: !2991, size: 64, offset: 1088)
!3723 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3699, file: !2961, line: 89, baseType: !2994, size: 64, offset: 1152)
!3724 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3699, file: !2961, line: 91, baseType: !2996, size: 64, offset: 1216)
!3725 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3699, file: !2961, line: 92, baseType: !2999, size: 64, offset: 1280)
!3726 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3699, file: !2961, line: 93, baseType: !3715, size: 64, offset: 1344)
!3727 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3699, file: !2961, line: 94, baseType: !6, size: 64, offset: 1408)
!3728 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3699, file: !2961, line: 95, baseType: !74, size: 64, offset: 1472)
!3729 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3699, file: !2961, line: 96, baseType: !19, size: 32, offset: 1536)
!3730 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3699, file: !2961, line: 98, baseType: !3006, size: 160, offset: 1568)
!3731 = distinct !DICompileUnit(language: DW_LANG_C99, file: !150, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!3732 = !DILocalVariable(name: "some_pending", scope: !3694, file: !3620, line: 58, type: !3660)
!3733 = !DILocalVariable(name: "prev_fail", scope: !3694, file: !3620, line: 59, type: !3660)
!3734 = !DILocalVariable(name: "fclose_fail", scope: !3694, file: !3620, line: 60, type: !3660)
!3735 = distinct !DISubprogram(name: "hard_locale", scope: !3736, file: !3736, line: 27, type: !3737, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !151, retainedNodes: !4)
!3736 = !DIFile(filename: "lib/hard-locale.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3737 = !DISubroutineType(types: !3738)
!3738 = !{!38, !19}
!3739 = !DILocalVariable(name: "category", arg: 1, scope: !3735, file: !3736, line: 27, type: !19)
!3740 = !DILocation(line: 27, column: 18, scope: !3735)
!3741 = !DILocalVariable(name: "locale", scope: !3735, file: !3736, line: 29, type: !3742)
!3742 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 2056, elements: !3743)
!3743 = !{!3744}
!3744 = !DISubrange(count: 257)
!3745 = !DILocation(line: 29, column: 8, scope: !3735)
!3746 = !DILocation(line: 31, column: 25, scope: !3747)
!3747 = distinct !DILexicalBlock(scope: !3735, file: !3736, line: 31, column: 7)
!3748 = !DILocation(line: 31, column: 35, scope: !3747)
!3749 = !DILocation(line: 31, column: 7, scope: !3747)
!3750 = !DILocation(line: 31, column: 7, scope: !3735)
!3751 = !DILocation(line: 32, column: 5, scope: !3747)
!3752 = !DILocation(line: 34, column: 20, scope: !3735)
!3753 = !DILocation(line: 34, column: 12, scope: !3735)
!3754 = !DILocation(line: 34, column: 33, scope: !3735)
!3755 = !DILocation(line: 34, column: 38, scope: !3735)
!3756 = !DILocation(line: 34, column: 49, scope: !3735)
!3757 = !DILocation(line: 34, column: 41, scope: !3735)
!3758 = !DILocation(line: 34, column: 66, scope: !3735)
!3759 = !DILocation(line: 34, column: 10, scope: !3735)
!3760 = !DILocation(line: 34, column: 3, scope: !3735)
!3761 = !DILocation(line: 35, column: 1, scope: !3735)
!3762 = !DILocalVariable(name: "category", arg: 1, scope: !3763, file: !3736, line: 27, type: !19)
!3763 = distinct !DISubprogram(name: "hard_locale", scope: !3736, file: !3736, line: 27, type: !3737, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3764, retainedNodes: !4)
!3764 = distinct !DICompileUnit(language: DW_LANG_C99, file: !152, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!3765 = !DILocalVariable(name: "locale", scope: !3763, file: !3736, line: 29, type: !3742)
!3766 = distinct !DISubprogram(name: "locale_charset", scope: !3767, file: !3767, line: 831, type: !3768, scopeLine: 832, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !153, retainedNodes: !4)
!3767 = !DIFile(filename: "lib/localcharset.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3768 = !DISubroutineType(types: !3769)
!3769 = !{!16}
!3770 = !DILocalVariable(name: "codeset", scope: !3766, file: !3767, line: 833, type: !16)
!3771 = !DILocation(line: 833, column: 15, scope: !3766)
!3772 = !DILocation(line: 847, column: 13, scope: !3766)
!3773 = !DILocation(line: 847, column: 11, scope: !3766)
!3774 = !DILocation(line: 911, column: 7, scope: !3775)
!3775 = distinct !DILexicalBlock(scope: !3766, file: !3767, line: 911, column: 7)
!3776 = !DILocation(line: 911, column: 15, scope: !3775)
!3777 = !DILocation(line: 911, column: 7, scope: !3766)
!3778 = !DILocation(line: 913, column: 13, scope: !3775)
!3779 = !DILocation(line: 913, column: 5, scope: !3775)
!3780 = !DILocation(line: 1070, column: 13, scope: !3781)
!3781 = distinct !DILexicalBlock(scope: !3782, file: !3767, line: 1070, column: 13)
!3782 = distinct !DILexicalBlock(scope: !3783, file: !3767, line: 1060, column: 7)
!3783 = distinct !DILexicalBlock(scope: !3766, file: !3767, line: 1019, column: 3)
!3784 = !DILocation(line: 1070, column: 24, scope: !3781)
!3785 = !DILocation(line: 1070, column: 13, scope: !3782)
!3786 = !DILocation(line: 1071, column: 19, scope: !3781)
!3787 = !DILocation(line: 1071, column: 11, scope: !3781)
!3788 = !DILocation(line: 1158, column: 10, scope: !3766)
!3789 = !DILocation(line: 1158, column: 3, scope: !3766)
!3790 = !DILocalVariable(name: "codeset", scope: !3791, file: !3767, line: 833, type: !16)
!3791 = distinct !DISubprogram(name: "locale_charset", scope: !3767, file: !3767, line: 831, type: !3768, scopeLine: 832, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3792, retainedNodes: !4)
!3792 = distinct !DICompileUnit(language: DW_LANG_C99, file: !154, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!3793 = distinct !DISubprogram(name: "setlocale_null_r", scope: !3794, file: !3794, line: 269, type: !3795, scopeLine: 270, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !155, retainedNodes: !4)
!3794 = !DIFile(filename: "lib/setlocale_null.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3795 = !DISubroutineType(types: !3796)
!3796 = !{!19, !19, !7, !74}
!3797 = !DILocalVariable(name: "category", arg: 1, scope: !3793, file: !3794, line: 269, type: !19)
!3798 = !DILocation(line: 269, column: 23, scope: !3793)
!3799 = !DILocalVariable(name: "buf", arg: 2, scope: !3793, file: !3794, line: 269, type: !7)
!3800 = !DILocation(line: 269, column: 39, scope: !3793)
!3801 = !DILocalVariable(name: "bufsize", arg: 3, scope: !3793, file: !3794, line: 269, type: !74)
!3802 = !DILocation(line: 269, column: 51, scope: !3793)
!3803 = !DILocation(line: 274, column: 35, scope: !3793)
!3804 = !DILocation(line: 274, column: 45, scope: !3793)
!3805 = !DILocation(line: 274, column: 50, scope: !3793)
!3806 = !DILocation(line: 274, column: 10, scope: !3793)
!3807 = !DILocation(line: 274, column: 3, scope: !3793)
!3808 = !DILocalVariable(name: "category", arg: 1, scope: !3809, file: !3794, line: 269, type: !19)
!3809 = distinct !DISubprogram(name: "setlocale_null_r", scope: !3794, file: !3794, line: 269, type: !3795, scopeLine: 270, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3810, retainedNodes: !4)
!3810 = distinct !DICompileUnit(language: DW_LANG_C99, file: !156, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!3811 = !DILocalVariable(name: "buf", arg: 2, scope: !3809, file: !3794, line: 269, type: !7)
!3812 = !DILocalVariable(name: "bufsize", arg: 3, scope: !3809, file: !3794, line: 269, type: !74)
!3813 = distinct !DISubprogram(name: "setlocale_null_unlocked", scope: !3794, file: !3794, line: 91, type: !3795, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !155, retainedNodes: !4)
!3814 = !DILocalVariable(name: "category", arg: 1, scope: !3813, file: !3794, line: 91, type: !19)
!3815 = !DILocation(line: 91, column: 30, scope: !3813)
!3816 = !DILocalVariable(name: "buf", arg: 2, scope: !3813, file: !3794, line: 91, type: !7)
!3817 = !DILocation(line: 91, column: 46, scope: !3813)
!3818 = !DILocalVariable(name: "bufsize", arg: 3, scope: !3813, file: !3794, line: 91, type: !74)
!3819 = !DILocation(line: 91, column: 58, scope: !3813)
!3820 = !DILocalVariable(name: "result", scope: !3813, file: !3794, line: 140, type: !16)
!3821 = !DILocation(line: 140, column: 15, scope: !3813)
!3822 = !DILocation(line: 140, column: 51, scope: !3813)
!3823 = !DILocation(line: 140, column: 24, scope: !3813)
!3824 = !DILocation(line: 142, column: 7, scope: !3825)
!3825 = distinct !DILexicalBlock(scope: !3813, file: !3794, line: 142, column: 7)
!3826 = !DILocation(line: 142, column: 14, scope: !3825)
!3827 = !DILocation(line: 142, column: 7, scope: !3813)
!3828 = !DILocation(line: 145, column: 11, scope: !3829)
!3829 = distinct !DILexicalBlock(scope: !3830, file: !3794, line: 145, column: 11)
!3830 = distinct !DILexicalBlock(scope: !3825, file: !3794, line: 143, column: 5)
!3831 = !DILocation(line: 145, column: 19, scope: !3829)
!3832 = !DILocation(line: 145, column: 11, scope: !3830)
!3833 = !DILocation(line: 149, column: 9, scope: !3829)
!3834 = !DILocation(line: 149, column: 16, scope: !3829)
!3835 = !DILocation(line: 150, column: 7, scope: !3830)
!3836 = !DILocalVariable(name: "length", scope: !3837, file: !3794, line: 154, type: !74)
!3837 = distinct !DILexicalBlock(scope: !3825, file: !3794, line: 153, column: 5)
!3838 = !DILocation(line: 154, column: 14, scope: !3837)
!3839 = !DILocation(line: 154, column: 31, scope: !3837)
!3840 = !DILocation(line: 154, column: 23, scope: !3837)
!3841 = !DILocation(line: 155, column: 11, scope: !3842)
!3842 = distinct !DILexicalBlock(scope: !3837, file: !3794, line: 155, column: 11)
!3843 = !DILocation(line: 155, column: 20, scope: !3842)
!3844 = !DILocation(line: 155, column: 18, scope: !3842)
!3845 = !DILocation(line: 155, column: 11, scope: !3837)
!3846 = !DILocation(line: 157, column: 19, scope: !3847)
!3847 = distinct !DILexicalBlock(scope: !3842, file: !3794, line: 156, column: 9)
!3848 = !DILocation(line: 157, column: 24, scope: !3847)
!3849 = !DILocation(line: 157, column: 32, scope: !3847)
!3850 = !DILocation(line: 157, column: 39, scope: !3847)
!3851 = !DILocation(line: 157, column: 11, scope: !3847)
!3852 = !DILocation(line: 158, column: 11, scope: !3847)
!3853 = !DILocation(line: 162, column: 15, scope: !3854)
!3854 = distinct !DILexicalBlock(scope: !3855, file: !3794, line: 162, column: 15)
!3855 = distinct !DILexicalBlock(scope: !3842, file: !3794, line: 161, column: 9)
!3856 = !DILocation(line: 162, column: 23, scope: !3854)
!3857 = !DILocation(line: 162, column: 15, scope: !3855)
!3858 = !DILocation(line: 167, column: 23, scope: !3859)
!3859 = distinct !DILexicalBlock(scope: !3854, file: !3794, line: 163, column: 13)
!3860 = !DILocation(line: 167, column: 28, scope: !3859)
!3861 = !DILocation(line: 167, column: 36, scope: !3859)
!3862 = !DILocation(line: 167, column: 44, scope: !3859)
!3863 = !DILocation(line: 167, column: 15, scope: !3859)
!3864 = !DILocation(line: 168, column: 15, scope: !3859)
!3865 = !DILocation(line: 168, column: 19, scope: !3859)
!3866 = !DILocation(line: 168, column: 27, scope: !3859)
!3867 = !DILocation(line: 168, column: 32, scope: !3859)
!3868 = !DILocation(line: 169, column: 13, scope: !3859)
!3869 = !DILocation(line: 170, column: 11, scope: !3855)
!3870 = !DILocation(line: 174, column: 1, scope: !3813)
!3871 = !DILocalVariable(name: "category", arg: 1, scope: !3872, file: !3794, line: 91, type: !19)
!3872 = distinct !DISubprogram(name: "setlocale_null_unlocked", scope: !3794, file: !3794, line: 91, type: !3795, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3873, retainedNodes: !4)
!3873 = distinct !DICompileUnit(language: DW_LANG_C99, file: !156, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!3874 = !DILocalVariable(name: "buf", arg: 2, scope: !3872, file: !3794, line: 91, type: !7)
!3875 = distinct !DISubprogram(name: "setlocale_null_androidfix", scope: !3794, file: !3794, line: 60, type: !3876, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !155, retainedNodes: !4)
!3876 = !DISubroutineType(types: !3877)
!3877 = !{!16, !19}
!3878 = !DILocalVariable(name: "category", arg: 1, scope: !3875, file: !3794, line: 60, type: !19)
!3879 = !DILocation(line: 60, column: 32, scope: !3875)
!3880 = !DILocalVariable(name: "result", scope: !3875, file: !3794, line: 62, type: !16)
!3881 = !DILocation(line: 62, column: 15, scope: !3875)
!3882 = !DILocation(line: 62, column: 35, scope: !3875)
!3883 = !DILocation(line: 62, column: 24, scope: !3875)
!3884 = !DILocation(line: 87, column: 10, scope: !3875)
!3885 = !DILocation(line: 87, column: 3, scope: !3875)
!3886 = distinct !DISubprogram(name: "rpl_fclose", scope: !3887, file: !3887, line: 58, type: !3888, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !157, retainedNodes: !4)
!3887 = !DIFile(filename: "lib/fclose.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3888 = !DISubroutineType(types: !3889)
!3889 = !{!19, !3890}
!3890 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3891, size: 64)
!3891 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2959, line: 7, baseType: !3892)
!3892 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2961, line: 49, size: 1728, elements: !3893)
!3893 = !{!3894, !3895, !3896, !3897, !3898, !3899, !3900, !3901, !3902, !3903, !3904, !3905, !3906, !3907, !3909, !3910, !3911, !3912, !3913, !3914, !3915, !3916, !3917, !3918, !3919, !3920, !3921, !3922, !3923}
!3894 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3892, file: !2961, line: 51, baseType: !19, size: 32)
!3895 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3892, file: !2961, line: 54, baseType: !7, size: 64, offset: 64)
!3896 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3892, file: !2961, line: 55, baseType: !7, size: 64, offset: 128)
!3897 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3892, file: !2961, line: 56, baseType: !7, size: 64, offset: 192)
!3898 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3892, file: !2961, line: 57, baseType: !7, size: 64, offset: 256)
!3899 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3892, file: !2961, line: 58, baseType: !7, size: 64, offset: 320)
!3900 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3892, file: !2961, line: 59, baseType: !7, size: 64, offset: 384)
!3901 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3892, file: !2961, line: 60, baseType: !7, size: 64, offset: 448)
!3902 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3892, file: !2961, line: 61, baseType: !7, size: 64, offset: 512)
!3903 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3892, file: !2961, line: 64, baseType: !7, size: 64, offset: 576)
!3904 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3892, file: !2961, line: 65, baseType: !7, size: 64, offset: 640)
!3905 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3892, file: !2961, line: 66, baseType: !7, size: 64, offset: 704)
!3906 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3892, file: !2961, line: 68, baseType: !2976, size: 64, offset: 768)
!3907 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3892, file: !2961, line: 70, baseType: !3908, size: 64, offset: 832)
!3908 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3892, size: 64)
!3909 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3892, file: !2961, line: 72, baseType: !19, size: 32, offset: 896)
!3910 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3892, file: !2961, line: 73, baseType: !19, size: 32, offset: 928)
!3911 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3892, file: !2961, line: 74, baseType: !433, size: 64, offset: 960)
!3912 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3892, file: !2961, line: 77, baseType: !73, size: 16, offset: 1024)
!3913 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3892, file: !2961, line: 78, baseType: !2985, size: 8, offset: 1040)
!3914 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3892, file: !2961, line: 79, baseType: !2987, size: 8, offset: 1048)
!3915 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3892, file: !2961, line: 81, baseType: !2991, size: 64, offset: 1088)
!3916 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3892, file: !2961, line: 89, baseType: !2994, size: 64, offset: 1152)
!3917 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3892, file: !2961, line: 91, baseType: !2996, size: 64, offset: 1216)
!3918 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3892, file: !2961, line: 92, baseType: !2999, size: 64, offset: 1280)
!3919 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3892, file: !2961, line: 93, baseType: !3908, size: 64, offset: 1344)
!3920 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3892, file: !2961, line: 94, baseType: !6, size: 64, offset: 1408)
!3921 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3892, file: !2961, line: 95, baseType: !74, size: 64, offset: 1472)
!3922 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3892, file: !2961, line: 96, baseType: !19, size: 32, offset: 1536)
!3923 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3892, file: !2961, line: 98, baseType: !3006, size: 160, offset: 1568)
!3924 = !DILocalVariable(name: "fp", arg: 1, scope: !3886, file: !3887, line: 58, type: !3890)
!3925 = !DILocation(line: 58, column: 19, scope: !3886)
!3926 = !DILocalVariable(name: "saved_errno", scope: !3886, file: !3887, line: 60, type: !19)
!3927 = !DILocation(line: 60, column: 7, scope: !3886)
!3928 = !DILocalVariable(name: "fd", scope: !3886, file: !3887, line: 61, type: !19)
!3929 = !DILocation(line: 61, column: 7, scope: !3886)
!3930 = !DILocalVariable(name: "result", scope: !3886, file: !3887, line: 62, type: !19)
!3931 = !DILocation(line: 62, column: 7, scope: !3886)
!3932 = !DILocation(line: 65, column: 16, scope: !3886)
!3933 = !DILocation(line: 65, column: 8, scope: !3886)
!3934 = !DILocation(line: 65, column: 6, scope: !3886)
!3935 = !DILocation(line: 66, column: 7, scope: !3936)
!3936 = distinct !DILexicalBlock(scope: !3886, file: !3887, line: 66, column: 7)
!3937 = !DILocation(line: 66, column: 10, scope: !3936)
!3938 = !DILocation(line: 66, column: 7, scope: !3886)
!3939 = !DILocation(line: 67, column: 28, scope: !3936)
!3940 = !DILocation(line: 67, column: 12, scope: !3936)
!3941 = !DILocation(line: 67, column: 5, scope: !3936)
!3942 = !DILocation(line: 72, column: 9, scope: !3943)
!3943 = distinct !DILexicalBlock(scope: !3886, file: !3887, line: 72, column: 7)
!3944 = !DILocation(line: 72, column: 23, scope: !3943)
!3945 = !DILocation(line: 72, column: 41, scope: !3943)
!3946 = !DILocation(line: 72, column: 33, scope: !3943)
!3947 = !DILocation(line: 72, column: 26, scope: !3943)
!3948 = !DILocation(line: 72, column: 59, scope: !3943)
!3949 = !DILocation(line: 73, column: 7, scope: !3943)
!3950 = !DILocation(line: 73, column: 18, scope: !3943)
!3951 = !DILocation(line: 73, column: 10, scope: !3943)
!3952 = !DILocation(line: 72, column: 7, scope: !3886)
!3953 = !DILocation(line: 74, column: 19, scope: !3943)
!3954 = !DILocation(line: 74, column: 17, scope: !3943)
!3955 = !DILocation(line: 74, column: 5, scope: !3943)
!3956 = !DILocation(line: 100, column: 28, scope: !3886)
!3957 = !DILocation(line: 100, column: 12, scope: !3886)
!3958 = !DILocation(line: 100, column: 10, scope: !3886)
!3959 = !DILocation(line: 105, column: 7, scope: !3960)
!3960 = distinct !DILexicalBlock(scope: !3886, file: !3887, line: 105, column: 7)
!3961 = !DILocation(line: 105, column: 19, scope: !3960)
!3962 = !DILocation(line: 105, column: 7, scope: !3886)
!3963 = !DILocation(line: 107, column: 15, scope: !3964)
!3964 = distinct !DILexicalBlock(scope: !3960, file: !3887, line: 106, column: 5)
!3965 = !DILocation(line: 107, column: 7, scope: !3964)
!3966 = !DILocation(line: 107, column: 13, scope: !3964)
!3967 = !DILocation(line: 108, column: 14, scope: !3964)
!3968 = !DILocation(line: 109, column: 5, scope: !3964)
!3969 = !DILocation(line: 111, column: 10, scope: !3886)
!3970 = !DILocation(line: 111, column: 3, scope: !3886)
!3971 = !DILocation(line: 112, column: 1, scope: !3886)
!3972 = !DILocalVariable(name: "fp", arg: 1, scope: !3973, file: !3887, line: 58, type: !3976)
!3973 = distinct !DISubprogram(name: "rpl_fclose", scope: !3887, file: !3887, line: 58, type: !3974, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4010, retainedNodes: !4)
!3974 = !DISubroutineType(types: !3975)
!3975 = !{!19, !3976}
!3976 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3977, size: 64)
!3977 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2959, line: 7, baseType: !3978)
!3978 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2961, line: 49, size: 1728, elements: !3979)
!3979 = !{!3980, !3981, !3982, !3983, !3984, !3985, !3986, !3987, !3988, !3989, !3990, !3991, !3992, !3993, !3995, !3996, !3997, !3998, !3999, !4000, !4001, !4002, !4003, !4004, !4005, !4006, !4007, !4008, !4009}
!3980 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3978, file: !2961, line: 51, baseType: !19, size: 32)
!3981 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3978, file: !2961, line: 54, baseType: !7, size: 64, offset: 64)
!3982 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3978, file: !2961, line: 55, baseType: !7, size: 64, offset: 128)
!3983 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3978, file: !2961, line: 56, baseType: !7, size: 64, offset: 192)
!3984 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3978, file: !2961, line: 57, baseType: !7, size: 64, offset: 256)
!3985 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3978, file: !2961, line: 58, baseType: !7, size: 64, offset: 320)
!3986 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3978, file: !2961, line: 59, baseType: !7, size: 64, offset: 384)
!3987 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3978, file: !2961, line: 60, baseType: !7, size: 64, offset: 448)
!3988 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3978, file: !2961, line: 61, baseType: !7, size: 64, offset: 512)
!3989 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3978, file: !2961, line: 64, baseType: !7, size: 64, offset: 576)
!3990 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3978, file: !2961, line: 65, baseType: !7, size: 64, offset: 640)
!3991 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3978, file: !2961, line: 66, baseType: !7, size: 64, offset: 704)
!3992 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3978, file: !2961, line: 68, baseType: !2976, size: 64, offset: 768)
!3993 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3978, file: !2961, line: 70, baseType: !3994, size: 64, offset: 832)
!3994 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3978, size: 64)
!3995 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3978, file: !2961, line: 72, baseType: !19, size: 32, offset: 896)
!3996 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3978, file: !2961, line: 73, baseType: !19, size: 32, offset: 928)
!3997 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3978, file: !2961, line: 74, baseType: !433, size: 64, offset: 960)
!3998 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3978, file: !2961, line: 77, baseType: !73, size: 16, offset: 1024)
!3999 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3978, file: !2961, line: 78, baseType: !2985, size: 8, offset: 1040)
!4000 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3978, file: !2961, line: 79, baseType: !2987, size: 8, offset: 1048)
!4001 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3978, file: !2961, line: 81, baseType: !2991, size: 64, offset: 1088)
!4002 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3978, file: !2961, line: 89, baseType: !2994, size: 64, offset: 1152)
!4003 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3978, file: !2961, line: 91, baseType: !2996, size: 64, offset: 1216)
!4004 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3978, file: !2961, line: 92, baseType: !2999, size: 64, offset: 1280)
!4005 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3978, file: !2961, line: 93, baseType: !3994, size: 64, offset: 1344)
!4006 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3978, file: !2961, line: 94, baseType: !6, size: 64, offset: 1408)
!4007 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3978, file: !2961, line: 95, baseType: !74, size: 64, offset: 1472)
!4008 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3978, file: !2961, line: 96, baseType: !19, size: 32, offset: 1536)
!4009 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3978, file: !2961, line: 98, baseType: !3006, size: 160, offset: 1568)
!4010 = distinct !DICompileUnit(language: DW_LANG_C99, file: !158, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!4011 = !DILocalVariable(name: "saved_errno", scope: !3973, file: !3887, line: 60, type: !19)
!4012 = !DILocalVariable(name: "fd", scope: !3973, file: !3887, line: 61, type: !19)
!4013 = !DILocalVariable(name: "result", scope: !3973, file: !3887, line: 62, type: !19)
!4014 = distinct !DISubprogram(name: "rpl_fflush", scope: !4015, file: !4015, line: 129, type: !4016, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !159, retainedNodes: !4)
!4015 = !DIFile(filename: "lib/fflush.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4016 = !DISubroutineType(types: !4017)
!4017 = !{!19, !4018}
!4018 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4019, size: 64)
!4019 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2959, line: 7, baseType: !4020)
!4020 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2961, line: 49, size: 1728, elements: !4021)
!4021 = !{!4022, !4023, !4024, !4025, !4026, !4027, !4028, !4029, !4030, !4031, !4032, !4033, !4034, !4035, !4037, !4038, !4039, !4040, !4041, !4042, !4043, !4044, !4045, !4046, !4047, !4048, !4049, !4050, !4051}
!4022 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !4020, file: !2961, line: 51, baseType: !19, size: 32)
!4023 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !4020, file: !2961, line: 54, baseType: !7, size: 64, offset: 64)
!4024 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !4020, file: !2961, line: 55, baseType: !7, size: 64, offset: 128)
!4025 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !4020, file: !2961, line: 56, baseType: !7, size: 64, offset: 192)
!4026 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !4020, file: !2961, line: 57, baseType: !7, size: 64, offset: 256)
!4027 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !4020, file: !2961, line: 58, baseType: !7, size: 64, offset: 320)
!4028 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !4020, file: !2961, line: 59, baseType: !7, size: 64, offset: 384)
!4029 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !4020, file: !2961, line: 60, baseType: !7, size: 64, offset: 448)
!4030 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !4020, file: !2961, line: 61, baseType: !7, size: 64, offset: 512)
!4031 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !4020, file: !2961, line: 64, baseType: !7, size: 64, offset: 576)
!4032 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !4020, file: !2961, line: 65, baseType: !7, size: 64, offset: 640)
!4033 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !4020, file: !2961, line: 66, baseType: !7, size: 64, offset: 704)
!4034 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !4020, file: !2961, line: 68, baseType: !2976, size: 64, offset: 768)
!4035 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !4020, file: !2961, line: 70, baseType: !4036, size: 64, offset: 832)
!4036 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4020, size: 64)
!4037 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !4020, file: !2961, line: 72, baseType: !19, size: 32, offset: 896)
!4038 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !4020, file: !2961, line: 73, baseType: !19, size: 32, offset: 928)
!4039 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !4020, file: !2961, line: 74, baseType: !433, size: 64, offset: 960)
!4040 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !4020, file: !2961, line: 77, baseType: !73, size: 16, offset: 1024)
!4041 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !4020, file: !2961, line: 78, baseType: !2985, size: 8, offset: 1040)
!4042 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !4020, file: !2961, line: 79, baseType: !2987, size: 8, offset: 1048)
!4043 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !4020, file: !2961, line: 81, baseType: !2991, size: 64, offset: 1088)
!4044 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !4020, file: !2961, line: 89, baseType: !2994, size: 64, offset: 1152)
!4045 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !4020, file: !2961, line: 91, baseType: !2996, size: 64, offset: 1216)
!4046 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !4020, file: !2961, line: 92, baseType: !2999, size: 64, offset: 1280)
!4047 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !4020, file: !2961, line: 93, baseType: !4036, size: 64, offset: 1344)
!4048 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !4020, file: !2961, line: 94, baseType: !6, size: 64, offset: 1408)
!4049 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !4020, file: !2961, line: 95, baseType: !74, size: 64, offset: 1472)
!4050 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !4020, file: !2961, line: 96, baseType: !19, size: 32, offset: 1536)
!4051 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !4020, file: !2961, line: 98, baseType: !3006, size: 160, offset: 1568)
!4052 = !DILocalVariable(name: "stream", arg: 1, scope: !4014, file: !4015, line: 129, type: !4018)
!4053 = !DILocation(line: 129, column: 19, scope: !4014)
!4054 = !DILocation(line: 150, column: 7, scope: !4055)
!4055 = distinct !DILexicalBlock(scope: !4014, file: !4015, line: 150, column: 7)
!4056 = !DILocation(line: 150, column: 14, scope: !4055)
!4057 = !DILocation(line: 150, column: 22, scope: !4055)
!4058 = !DILocation(line: 150, column: 27, scope: !4055)
!4059 = !DILocation(line: 150, column: 7, scope: !4014)
!4060 = !DILocation(line: 151, column: 20, scope: !4055)
!4061 = !DILocation(line: 151, column: 12, scope: !4055)
!4062 = !DILocation(line: 151, column: 5, scope: !4055)
!4063 = !DILocation(line: 156, column: 44, scope: !4014)
!4064 = !DILocation(line: 156, column: 3, scope: !4014)
!4065 = !DILocation(line: 158, column: 18, scope: !4014)
!4066 = !DILocation(line: 158, column: 10, scope: !4014)
!4067 = !DILocation(line: 158, column: 3, scope: !4014)
!4068 = !DILocation(line: 235, column: 1, scope: !4014)
!4069 = !DILocalVariable(name: "stream", arg: 1, scope: !4070, file: !4015, line: 129, type: !4073)
!4070 = distinct !DISubprogram(name: "rpl_fflush", scope: !4015, file: !4015, line: 129, type: !4071, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4107, retainedNodes: !4)
!4071 = !DISubroutineType(types: !4072)
!4072 = !{!19, !4073}
!4073 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4074, size: 64)
!4074 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2959, line: 7, baseType: !4075)
!4075 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2961, line: 49, size: 1728, elements: !4076)
!4076 = !{!4077, !4078, !4079, !4080, !4081, !4082, !4083, !4084, !4085, !4086, !4087, !4088, !4089, !4090, !4092, !4093, !4094, !4095, !4096, !4097, !4098, !4099, !4100, !4101, !4102, !4103, !4104, !4105, !4106}
!4077 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !4075, file: !2961, line: 51, baseType: !19, size: 32)
!4078 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !4075, file: !2961, line: 54, baseType: !7, size: 64, offset: 64)
!4079 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !4075, file: !2961, line: 55, baseType: !7, size: 64, offset: 128)
!4080 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !4075, file: !2961, line: 56, baseType: !7, size: 64, offset: 192)
!4081 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !4075, file: !2961, line: 57, baseType: !7, size: 64, offset: 256)
!4082 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !4075, file: !2961, line: 58, baseType: !7, size: 64, offset: 320)
!4083 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !4075, file: !2961, line: 59, baseType: !7, size: 64, offset: 384)
!4084 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !4075, file: !2961, line: 60, baseType: !7, size: 64, offset: 448)
!4085 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !4075, file: !2961, line: 61, baseType: !7, size: 64, offset: 512)
!4086 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !4075, file: !2961, line: 64, baseType: !7, size: 64, offset: 576)
!4087 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !4075, file: !2961, line: 65, baseType: !7, size: 64, offset: 640)
!4088 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !4075, file: !2961, line: 66, baseType: !7, size: 64, offset: 704)
!4089 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !4075, file: !2961, line: 68, baseType: !2976, size: 64, offset: 768)
!4090 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !4075, file: !2961, line: 70, baseType: !4091, size: 64, offset: 832)
!4091 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4075, size: 64)
!4092 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !4075, file: !2961, line: 72, baseType: !19, size: 32, offset: 896)
!4093 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !4075, file: !2961, line: 73, baseType: !19, size: 32, offset: 928)
!4094 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !4075, file: !2961, line: 74, baseType: !433, size: 64, offset: 960)
!4095 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !4075, file: !2961, line: 77, baseType: !73, size: 16, offset: 1024)
!4096 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !4075, file: !2961, line: 78, baseType: !2985, size: 8, offset: 1040)
!4097 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !4075, file: !2961, line: 79, baseType: !2987, size: 8, offset: 1048)
!4098 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !4075, file: !2961, line: 81, baseType: !2991, size: 64, offset: 1088)
!4099 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !4075, file: !2961, line: 89, baseType: !2994, size: 64, offset: 1152)
!4100 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !4075, file: !2961, line: 91, baseType: !2996, size: 64, offset: 1216)
!4101 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !4075, file: !2961, line: 92, baseType: !2999, size: 64, offset: 1280)
!4102 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !4075, file: !2961, line: 93, baseType: !4091, size: 64, offset: 1344)
!4103 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !4075, file: !2961, line: 94, baseType: !6, size: 64, offset: 1408)
!4104 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !4075, file: !2961, line: 95, baseType: !74, size: 64, offset: 1472)
!4105 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !4075, file: !2961, line: 96, baseType: !19, size: 32, offset: 1536)
!4106 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !4075, file: !2961, line: 98, baseType: !3006, size: 160, offset: 1568)
!4107 = distinct !DICompileUnit(language: DW_LANG_C99, file: !160, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!4108 = distinct !DISubprogram(name: "clear_ungetc_buffer_preserving_position", scope: !4015, file: !4015, line: 41, type: !4109, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !159, retainedNodes: !4)
!4109 = !DISubroutineType(types: !4110)
!4110 = !{null, !4018}
!4111 = !DILocalVariable(name: "fp", arg: 1, scope: !4108, file: !4015, line: 41, type: !4018)
!4112 = !DILocation(line: 41, column: 48, scope: !4108)
!4113 = !DILocation(line: 43, column: 7, scope: !4114)
!4114 = distinct !DILexicalBlock(scope: !4108, file: !4015, line: 43, column: 7)
!4115 = !DILocation(line: 43, column: 11, scope: !4114)
!4116 = !DILocation(line: 43, column: 18, scope: !4114)
!4117 = !DILocation(line: 43, column: 7, scope: !4108)
!4118 = !DILocation(line: 45, column: 13, scope: !4114)
!4119 = !DILocation(line: 45, column: 5, scope: !4114)
!4120 = !DILocation(line: 46, column: 1, scope: !4108)
!4121 = distinct !DISubprogram(name: "rpl_fseeko", scope: !4122, file: !4122, line: 28, type: !4123, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !161, retainedNodes: !4)
!4122 = !DIFile(filename: "lib/fseeko.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4123 = !DISubroutineType(types: !4124)
!4124 = !{!19, !4125, !4159, !19}
!4125 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4126, size: 64)
!4126 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2959, line: 7, baseType: !4127)
!4127 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2961, line: 49, size: 1728, elements: !4128)
!4128 = !{!4129, !4130, !4131, !4132, !4133, !4134, !4135, !4136, !4137, !4138, !4139, !4140, !4141, !4142, !4144, !4145, !4146, !4147, !4148, !4149, !4150, !4151, !4152, !4153, !4154, !4155, !4156, !4157, !4158}
!4129 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !4127, file: !2961, line: 51, baseType: !19, size: 32)
!4130 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !4127, file: !2961, line: 54, baseType: !7, size: 64, offset: 64)
!4131 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !4127, file: !2961, line: 55, baseType: !7, size: 64, offset: 128)
!4132 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !4127, file: !2961, line: 56, baseType: !7, size: 64, offset: 192)
!4133 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !4127, file: !2961, line: 57, baseType: !7, size: 64, offset: 256)
!4134 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !4127, file: !2961, line: 58, baseType: !7, size: 64, offset: 320)
!4135 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !4127, file: !2961, line: 59, baseType: !7, size: 64, offset: 384)
!4136 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !4127, file: !2961, line: 60, baseType: !7, size: 64, offset: 448)
!4137 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !4127, file: !2961, line: 61, baseType: !7, size: 64, offset: 512)
!4138 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !4127, file: !2961, line: 64, baseType: !7, size: 64, offset: 576)
!4139 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !4127, file: !2961, line: 65, baseType: !7, size: 64, offset: 640)
!4140 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !4127, file: !2961, line: 66, baseType: !7, size: 64, offset: 704)
!4141 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !4127, file: !2961, line: 68, baseType: !2976, size: 64, offset: 768)
!4142 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !4127, file: !2961, line: 70, baseType: !4143, size: 64, offset: 832)
!4143 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4127, size: 64)
!4144 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !4127, file: !2961, line: 72, baseType: !19, size: 32, offset: 896)
!4145 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !4127, file: !2961, line: 73, baseType: !19, size: 32, offset: 928)
!4146 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !4127, file: !2961, line: 74, baseType: !433, size: 64, offset: 960)
!4147 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !4127, file: !2961, line: 77, baseType: !73, size: 16, offset: 1024)
!4148 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !4127, file: !2961, line: 78, baseType: !2985, size: 8, offset: 1040)
!4149 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !4127, file: !2961, line: 79, baseType: !2987, size: 8, offset: 1048)
!4150 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !4127, file: !2961, line: 81, baseType: !2991, size: 64, offset: 1088)
!4151 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !4127, file: !2961, line: 89, baseType: !2994, size: 64, offset: 1152)
!4152 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !4127, file: !2961, line: 91, baseType: !2996, size: 64, offset: 1216)
!4153 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !4127, file: !2961, line: 92, baseType: !2999, size: 64, offset: 1280)
!4154 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !4127, file: !2961, line: 93, baseType: !4143, size: 64, offset: 1344)
!4155 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !4127, file: !2961, line: 94, baseType: !6, size: 64, offset: 1408)
!4156 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !4127, file: !2961, line: 95, baseType: !74, size: 64, offset: 1472)
!4157 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !4127, file: !2961, line: 96, baseType: !19, size: 32, offset: 1536)
!4158 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !4127, file: !2961, line: 98, baseType: !3006, size: 160, offset: 1568)
!4159 = !DIDerivedType(tag: DW_TAG_typedef, name: "off_t", file: !3301, line: 63, baseType: !433)
!4160 = !DILocalVariable(name: "fp", arg: 1, scope: !4121, file: !4122, line: 28, type: !4125)
!4161 = !DILocation(line: 28, column: 15, scope: !4121)
!4162 = !DILocalVariable(name: "offset", arg: 2, scope: !4121, file: !4122, line: 28, type: !4159)
!4163 = !DILocation(line: 28, column: 25, scope: !4121)
!4164 = !DILocalVariable(name: "whence", arg: 3, scope: !4121, file: !4122, line: 28, type: !19)
!4165 = !DILocation(line: 28, column: 37, scope: !4121)
!4166 = !DILocation(line: 52, column: 7, scope: !4167)
!4167 = distinct !DILexicalBlock(scope: !4121, file: !4122, line: 52, column: 7)
!4168 = !DILocation(line: 52, column: 11, scope: !4167)
!4169 = !DILocation(line: 52, column: 27, scope: !4167)
!4170 = !DILocation(line: 52, column: 31, scope: !4167)
!4171 = !DILocation(line: 52, column: 24, scope: !4167)
!4172 = !DILocation(line: 53, column: 7, scope: !4167)
!4173 = !DILocation(line: 53, column: 10, scope: !4167)
!4174 = !DILocation(line: 53, column: 14, scope: !4167)
!4175 = !DILocation(line: 53, column: 31, scope: !4167)
!4176 = !DILocation(line: 53, column: 35, scope: !4167)
!4177 = !DILocation(line: 53, column: 28, scope: !4167)
!4178 = !DILocation(line: 54, column: 7, scope: !4167)
!4179 = !DILocation(line: 54, column: 10, scope: !4167)
!4180 = !DILocation(line: 54, column: 14, scope: !4167)
!4181 = !DILocation(line: 54, column: 28, scope: !4167)
!4182 = !DILocation(line: 52, column: 7, scope: !4121)
!4183 = !DILocalVariable(name: "pos", scope: !4184, file: !4122, line: 117, type: !4159)
!4184 = distinct !DILexicalBlock(scope: !4167, file: !4122, line: 113, column: 5)
!4185 = !DILocation(line: 117, column: 13, scope: !4184)
!4186 = !DILocation(line: 117, column: 34, scope: !4184)
!4187 = !DILocation(line: 117, column: 26, scope: !4184)
!4188 = !DILocation(line: 117, column: 39, scope: !4184)
!4189 = !DILocation(line: 117, column: 47, scope: !4184)
!4190 = !DILocation(line: 117, column: 19, scope: !4184)
!4191 = !DILocation(line: 118, column: 11, scope: !4192)
!4192 = distinct !DILexicalBlock(scope: !4184, file: !4122, line: 118, column: 11)
!4193 = !DILocation(line: 118, column: 15, scope: !4192)
!4194 = !DILocation(line: 118, column: 11, scope: !4184)
!4195 = !DILocation(line: 124, column: 11, scope: !4196)
!4196 = distinct !DILexicalBlock(scope: !4192, file: !4122, line: 119, column: 9)
!4197 = !DILocation(line: 129, column: 7, scope: !4184)
!4198 = !DILocation(line: 129, column: 11, scope: !4184)
!4199 = !DILocation(line: 129, column: 18, scope: !4184)
!4200 = !DILocation(line: 130, column: 21, scope: !4184)
!4201 = !DILocation(line: 130, column: 7, scope: !4184)
!4202 = !DILocation(line: 130, column: 11, scope: !4184)
!4203 = !DILocation(line: 130, column: 19, scope: !4184)
!4204 = !DILocation(line: 161, column: 7, scope: !4184)
!4205 = !DILocation(line: 163, column: 18, scope: !4121)
!4206 = !DILocation(line: 163, column: 22, scope: !4121)
!4207 = !DILocation(line: 163, column: 30, scope: !4121)
!4208 = !DILocation(line: 163, column: 10, scope: !4121)
!4209 = !DILocation(line: 163, column: 3, scope: !4121)
!4210 = !DILocation(line: 164, column: 1, scope: !4121)
!4211 = !DILocalVariable(name: "fp", arg: 1, scope: !4212, file: !4122, line: 28, type: !4215)
!4212 = distinct !DISubprogram(name: "rpl_fseeko", scope: !4122, file: !4122, line: 28, type: !4213, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4249, retainedNodes: !4)
!4213 = !DISubroutineType(types: !4214)
!4214 = !{!19, !4215, !4159, !19}
!4215 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4216, size: 64)
!4216 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2959, line: 7, baseType: !4217)
!4217 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2961, line: 49, size: 1728, elements: !4218)
!4218 = !{!4219, !4220, !4221, !4222, !4223, !4224, !4225, !4226, !4227, !4228, !4229, !4230, !4231, !4232, !4234, !4235, !4236, !4237, !4238, !4239, !4240, !4241, !4242, !4243, !4244, !4245, !4246, !4247, !4248}
!4219 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !4217, file: !2961, line: 51, baseType: !19, size: 32)
!4220 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !4217, file: !2961, line: 54, baseType: !7, size: 64, offset: 64)
!4221 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !4217, file: !2961, line: 55, baseType: !7, size: 64, offset: 128)
!4222 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !4217, file: !2961, line: 56, baseType: !7, size: 64, offset: 192)
!4223 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !4217, file: !2961, line: 57, baseType: !7, size: 64, offset: 256)
!4224 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !4217, file: !2961, line: 58, baseType: !7, size: 64, offset: 320)
!4225 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !4217, file: !2961, line: 59, baseType: !7, size: 64, offset: 384)
!4226 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !4217, file: !2961, line: 60, baseType: !7, size: 64, offset: 448)
!4227 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !4217, file: !2961, line: 61, baseType: !7, size: 64, offset: 512)
!4228 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !4217, file: !2961, line: 64, baseType: !7, size: 64, offset: 576)
!4229 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !4217, file: !2961, line: 65, baseType: !7, size: 64, offset: 640)
!4230 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !4217, file: !2961, line: 66, baseType: !7, size: 64, offset: 704)
!4231 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !4217, file: !2961, line: 68, baseType: !2976, size: 64, offset: 768)
!4232 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !4217, file: !2961, line: 70, baseType: !4233, size: 64, offset: 832)
!4233 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4217, size: 64)
!4234 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !4217, file: !2961, line: 72, baseType: !19, size: 32, offset: 896)
!4235 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !4217, file: !2961, line: 73, baseType: !19, size: 32, offset: 928)
!4236 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !4217, file: !2961, line: 74, baseType: !433, size: 64, offset: 960)
!4237 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !4217, file: !2961, line: 77, baseType: !73, size: 16, offset: 1024)
!4238 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !4217, file: !2961, line: 78, baseType: !2985, size: 8, offset: 1040)
!4239 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !4217, file: !2961, line: 79, baseType: !2987, size: 8, offset: 1048)
!4240 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !4217, file: !2961, line: 81, baseType: !2991, size: 64, offset: 1088)
!4241 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !4217, file: !2961, line: 89, baseType: !2994, size: 64, offset: 1152)
!4242 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !4217, file: !2961, line: 91, baseType: !2996, size: 64, offset: 1216)
!4243 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !4217, file: !2961, line: 92, baseType: !2999, size: 64, offset: 1280)
!4244 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !4217, file: !2961, line: 93, baseType: !4233, size: 64, offset: 1344)
!4245 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !4217, file: !2961, line: 94, baseType: !6, size: 64, offset: 1408)
!4246 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !4217, file: !2961, line: 95, baseType: !74, size: 64, offset: 1472)
!4247 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !4217, file: !2961, line: 96, baseType: !19, size: 32, offset: 1536)
!4248 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !4217, file: !2961, line: 98, baseType: !3006, size: 160, offset: 1568)
!4249 = distinct !DICompileUnit(language: DW_LANG_C99, file: !162, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!4250 = !DILocalVariable(name: "offset", arg: 2, scope: !4212, file: !4122, line: 28, type: !4159)
!4251 = !DILocalVariable(name: "whence", arg: 3, scope: !4212, file: !4122, line: 28, type: !19)
!4252 = distinct !DISubprogram(name: "c_tolower", scope: !4253, file: !4253, line: 337, type: !4254, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !163, retainedNodes: !4)
!4253 = !DIFile(filename: "./lib/c-ctype.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4254 = !DISubroutineType(types: !4255)
!4255 = !{!19, !19}
!4256 = !DILocalVariable(name: "c", arg: 1, scope: !4252, file: !4253, line: 337, type: !19)
!4257 = !DILocation(line: 337, column: 16, scope: !4252)
!4258 = !DILocation(line: 339, column: 11, scope: !4252)
!4259 = !DILocation(line: 339, column: 3, scope: !4252)
!4260 = !DILocation(line: 342, column: 14, scope: !4261)
!4261 = distinct !DILexicalBlock(scope: !4252, file: !4253, line: 340, column: 5)
!4262 = !DILocation(line: 342, column: 16, scope: !4261)
!4263 = !DILocation(line: 342, column: 22, scope: !4261)
!4264 = !DILocation(line: 342, column: 7, scope: !4261)
!4265 = !DILocation(line: 344, column: 14, scope: !4261)
!4266 = !DILocation(line: 344, column: 7, scope: !4261)
!4267 = !DILocation(line: 346, column: 1, scope: !4252)
!4268 = !DILocalVariable(name: "c", arg: 1, scope: !4269, file: !4253, line: 337, type: !19)
!4269 = distinct !DISubprogram(name: "c_tolower", scope: !4253, file: !4253, line: 337, type: !4254, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4270, retainedNodes: !4)
!4270 = distinct !DICompileUnit(language: DW_LANG_C99, file: !164, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
