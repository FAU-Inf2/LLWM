; ModuleID = '<stdin>'
source_filename = "ld-temp.o"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.infomap = type { i8*, i8* }
%struct.option = type { i8*, i32, i32*, i32 }
%struct.quoting_options = type { i32, i32, [8 x i32], i8*, i8* }
%struct.slotvec = type { i64, i8* }
%struct.file_name = type { i8*, i64, i8* }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.dev_ino, %struct.dev_ino, %struct.dev_ino, [3 x i64] }
%struct.dev_ino = type { i64, i64 }
%struct.__dirstream = type opaque
%struct.dirent = type { i64, i64, i16, i8, [256 x i8] }
%struct.__mbstate_t = type { i32, %union.anon }
%union.anon = type { i32 }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }

@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [39 x i8] c"Try '%s --help' for more information.\0A\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"Usage: %s [OPTION]...\0A\00", align 1
@.str.2 = private unnamed_addr constant [60 x i8] c"Print the full filename of the current working directory.\0A\0A\00", align 1
@stdout = external dso_local global %struct._IO_FILE*, align 8
@.str.3 = private unnamed_addr constant [111 x i8] c"  -L, --logical   use PWD from environment, even if it contains symlinks\0A  -P, --physical  avoid all symlinks\0A\00", align 1
@.str.4 = private unnamed_addr constant [45 x i8] c"      --help     display this help and exit\0A\00", align 1
@.str.5 = private unnamed_addr constant [54 x i8] c"      --version  output version information and exit\0A\00", align 1
@.str.6 = private unnamed_addr constant [44 x i8] c"\0AIf no option is specified, -P is assumed.\0A\00", align 1
@.str.7 = private unnamed_addr constant [191 x i8] c"\0ANOTE: your shell may have its own version of %s, which usually supersedes\0Athe version described here.  Please refer to your shell's documentation\0Afor details about the options it supports.\0A\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"pwd\00", align 1
@__const.emit_ancillary_info.infomap = private unnamed_addr constant [7 x %struct.infomap] [%struct.infomap { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.18, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.19, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i32 0, i32 0) }, %struct.infomap zeroinitializer], align 16
@.str.25 = private unnamed_addr constant [23 x i8] c"\0A%s online help: <%s>\0A\00", align 1
@.str.14 = private unnamed_addr constant [14 x i8] c"GNU coreutils\00", align 1
@.str.26 = private unnamed_addr constant [40 x i8] c"https://www.gnu.org/software/coreutils/\00", align 1
@.str.27 = private unnamed_addr constant [4 x i8] c"en_\00", align 1
@.str.28 = private unnamed_addr constant [71 x i8] c"Report any translation bugs to <https://translationproject.org/team/>\0A\00", align 1
@.str.29 = private unnamed_addr constant [27 x i8] c"Full documentation <%s%s>\0A\00", align 1
@.str.30 = private unnamed_addr constant [51 x i8] c"or available locally via: info '(coreutils) %s%s'\0A\00", align 1
@.str.31 = private unnamed_addr constant [12 x i8] c" invocation\00", align 1
@.str.10 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.17 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.18 = private unnamed_addr constant [16 x i8] c"test invocation\00", align 1
@.str.11 = private unnamed_addr constant [10 x i8] c"coreutils\00", align 1
@.str.19 = private unnamed_addr constant [22 x i8] c"Multi-call invocation\00", align 1
@.str.20 = private unnamed_addr constant [10 x i8] c"sha224sum\00", align 1
@.str.21 = private unnamed_addr constant [15 x i8] c"sha2 utilities\00", align 1
@.str.22 = private unnamed_addr constant [10 x i8] c"sha256sum\00", align 1
@.str.23 = private unnamed_addr constant [10 x i8] c"sha384sum\00", align 1
@.str.24 = private unnamed_addr constant [10 x i8] c"sha512sum\00", align 1
@.str.9 = private unnamed_addr constant [16 x i8] c"POSIXLY_CORRECT\00", align 1
@.str.12 = private unnamed_addr constant [24 x i8] c"/usr/local/share/locale\00", align 1
@.str.13 = private unnamed_addr constant [3 x i8] c"LP\00", align 1
@longopts = internal constant [5 x %struct.option] [%struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.32, i32 0, i32 0), i32 0, i32* null, i32 76 }, %struct.option { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.33, i32 0, i32 0), i32 0, i32* null, i32 80 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.34, i32 0, i32 0), i32 0, i32* null, i32 -130 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.35, i32 0, i32 0), i32 0, i32* null, i32 -131 }, %struct.option zeroinitializer], align 16, !dbg !0
@.str.15 = private unnamed_addr constant [13 x i8] c"Jim Meyering\00", align 1
@optind = external dso_local global i32, align 4
@.str.16 = private unnamed_addr constant [30 x i8] c"ignoring non-option arguments\00", align 1
@.str.39 = private unnamed_addr constant [31 x i8] c"failed to get attributes of %s\00", align 1
@.str.40 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@.str.38 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.41 = private unnamed_addr constant [18 x i8] c"failed to stat %s\00", align 1
@.str.42 = private unnamed_addr constant [3 x i8] c"..\00", align 1
@.str.43 = private unnamed_addr constant [25 x i8] c"cannot open directory %s\00", align 1
@.str.44 = private unnamed_addr constant [22 x i8] c"failed to chdir to %s\00", align 1
@.str.45 = private unnamed_addr constant [21 x i8] c"reading directory %s\00", align 1
@.str.46 = private unnamed_addr constant [57 x i8] c"couldn't find directory entry in %s with matching i-node\00", align 1
@.str.47 = private unnamed_addr constant [4 x i8] c"../\00", align 1
@.str.36 = private unnamed_addr constant [4 x i8] c"PWD\00", align 1
@.str.37 = private unnamed_addr constant [3 x i8] c"/.\00", align 1
@.str.32 = private unnamed_addr constant [8 x i8] c"logical\00", align 1
@.str.33 = private unnamed_addr constant [9 x i8] c"physical\00", align 1
@.str.34 = private unnamed_addr constant [5 x i8] c"help\00", align 1
@.str.35 = private unnamed_addr constant [8 x i8] c"version\00", align 1
@Version = internal global i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.48, i32 0, i32 0), align 8, !dbg !25
@.str.48 = private unnamed_addr constant [5 x i8] c"8.32\00", align 1
@ignore_EPIPE = internal global i8 0, align 1, !dbg !30
@.str.51 = private unnamed_addr constant [12 x i8] c"write error\00", align 1
@file_name = internal global i8* null, align 8, !dbg !35
@.str.1.52 = private unnamed_addr constant [7 x i8] c"%s: %s\00", align 1
@.str.2.53 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@exit_failure = internal global i32 1, align 4, !dbg !39
@.str.58 = private unnamed_addr constant [56 x i8] c"A NULL argv[0] was passed through an exec system call.\0A\00", align 1
@.str.1.59 = private unnamed_addr constant [8 x i8] c"/.libs/\00", align 1
@.str.2.60 = private unnamed_addr constant [4 x i8] c"lt-\00", align 1
@program_invocation_short_name = external dso_local global i8*, align 8
@program_name = internal global i8* null, align 8, !dbg !46
@program_invocation_name = external dso_local global i8*, align 8
@default_quoting_options = internal global %struct.quoting_options zeroinitializer, align 8, !dbg !52
@slotvec = internal global %struct.slotvec* @slotvec0, align 8, !dbg !108
@nslots = internal global i32 1, align 4, !dbg !115
@slotvec0 = internal global %struct.slotvec { i64 256, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i32 0, i32 0) }, align 8, !dbg !117
@slot0 = internal global [256 x i8] zeroinitializer, align 16, !dbg !103
@.str.10.63 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.11.64 = private unnamed_addr constant [2 x i8] c"`\00", align 1
@.str.12.65 = private unnamed_addr constant [2 x i8] c"'\00", align 1
@.str.13.66 = private unnamed_addr constant [6 x i8] c"UTF-8\00", align 1
@.str.14.67 = private unnamed_addr constant [4 x i8] c"\E2\80\98\00", align 1
@.str.15.68 = private unnamed_addr constant [4 x i8] c"\E2\80\99\00", align 1
@.str.16.69 = private unnamed_addr constant [8 x i8] c"GB18030\00", align 1
@.str.17.70 = private unnamed_addr constant [4 x i8] c"\A1\07e\00", align 1
@.str.18.71 = private unnamed_addr constant [3 x i8] c"\A1\AF\00", align 1
@quote_quoting_options = internal global %struct.quoting_options { i32 8, i32 0, [8 x i32] zeroinitializer, i8* null, i8* null }, align 8, !dbg !91
@.str.80 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@.str.81 = private unnamed_addr constant [12 x i8] c"%s (%s) %s\0A\00", align 1
@.str.1.82 = private unnamed_addr constant [7 x i8] c"%s %s\0A\00", align 1
@.str.2.83 = private unnamed_addr constant [4 x i8] c"(C)\00", align 1
@.str.3.84 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.4.85 = private unnamed_addr constant [171 x i8] c"License GPLv3+: GNU GPL version 3 or later <%s>.\0AThis is free software: you are free to change and redistribute it.\0AThere is NO WARRANTY, to the extent permitted by law.\0A\00", align 1
@.str.5.86 = private unnamed_addr constant [34 x i8] c"https://gnu.org/licenses/gpl.html\00", align 1
@.str.6.87 = private unnamed_addr constant [16 x i8] c"Written by %s.\0A\00", align 1
@.str.7.88 = private unnamed_addr constant [23 x i8] c"Written by %s and %s.\0A\00", align 1
@.str.8.89 = private unnamed_addr constant [28 x i8] c"Written by %s, %s, and %s.\0A\00", align 1
@.str.9.90 = private unnamed_addr constant [32 x i8] c"Written by %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.10.91 = private unnamed_addr constant [36 x i8] c"Written by %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.11.92 = private unnamed_addr constant [40 x i8] c"Written by %s, %s, %s,\0A%s, %s, and %s.\0A\00", align 1
@.str.12.93 = private unnamed_addr constant [44 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, and %s.\0A\00", align 1
@.str.13.94 = private unnamed_addr constant [48 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.14.95 = private unnamed_addr constant [52 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.15.96 = private unnamed_addr constant [60 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, %s, and others.\0A\00", align 1
@version_etc_copyright = internal constant [47 x i8] c"Copyright %s %d Free Software Foundation, Inc.\00", align 16, !dbg !119
@.str.1.111 = private unnamed_addr constant [17 x i8] c"memory exhausted\00", align 1
@.str.112 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.123 = private unnamed_addr constant [2 x i8] c"C\00", align 1
@.str.1.124 = private unnamed_addr constant [6 x i8] c"POSIX\00", align 1
@.str.127 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1.128 = private unnamed_addr constant [6 x i8] c"ASCII\00", align 1
@inVal0 = global i32 0
@inVal1 = global i8** null
@.compVal0 = private global [4 x i8] c"-LL\00"
@.compVal1 = private global [1 x i8] zeroinitializer
@.compVal2 = private global [3 x i8] c"-L\00"
@x = common global i32 0
@y = common global i32 0
@x.1 = common global i32 0
@y.2 = common global i32 0
@x.3 = common global i32 0
@y.4 = common global i32 0
@x.5 = common global i32 0
@y.6 = common global i32 0
@x.7 = common global i32 0
@y.8 = common global i32 0
@x.9 = common global i32 0
@y.10 = common global i32 0
@x.11 = common global i32 0
@y.12 = common global i32 0
@x.13 = common global i32 0
@y.14 = common global i32 0
@x.15 = common global i32 0
@y.16 = common global i32 0
@x.17 = common global i32 0
@y.18 = common global i32 0
@x.19 = common global i32 0
@y.20 = common global i32 0
@x.21 = common global i32 0
@y.22 = common global i32 0
@x.23 = common global i32 0
@y.24 = common global i32 0
@x.25 = common global i32 0
@y.26 = common global i32 0
@x.27 = common global i32 0
@y.28 = common global i32 0
@x.29 = common global i32 0
@y.30 = common global i32 0
@x.31 = common global i32 0
@y.32 = common global i32 0
@x.33 = common global i32 0
@y.34 = common global i32 0
@x.35 = common global i32 0
@y.36 = common global i32 0
@x.37 = common global i32 0
@y.38 = common global i32 0
@x.39 = common global i32 0
@y.40 = common global i32 0
@x.41 = common global i32 0
@y.42 = common global i32 0
@x.43 = common global i32 0
@y.44 = common global i32 0
@x.45 = common global i32 0
@y.46 = common global i32 0
@x.47 = common global i32 0
@y.48 = common global i32 0
@x.49 = common global i32 0
@y.50 = common global i32 0
@x.51 = common global i32 0
@y.52 = common global i32 0
@x.53 = common global i32 0
@y.54 = common global i32 0
@x.55 = common global i32 0
@y.56 = common global i32 0
@x.57 = common global i32 0
@y.58 = common global i32 0
@x.59 = common global i32 0
@y.60 = common global i32 0
@x.61 = common global i32 0
@y.62 = common global i32 0
@x.63 = common global i32 0
@y.64 = common global i32 0
@x.65 = common global i32 0
@y.66 = common global i32 0
@x.67 = common global i32 0
@y.68 = common global i32 0
@x.69 = common global i32 0
@y.70 = common global i32 0
@x.71 = common global i32 0
@y.72 = common global i32 0
@x.73 = common global i32 0
@y.74 = common global i32 0
@x.75 = common global i32 0
@y.76 = common global i32 0
@x.77 = common global i32 0
@y.78 = common global i32 0
@x.79 = common global i32 0
@y.80 = common global i32 0
@x.81 = common global i32 0
@y.82 = common global i32 0
@x.83 = common global i32 0
@y.84 = common global i32 0
@x.85 = common global i32 0
@y.86 = common global i32 0
@x.87 = common global i32 0
@y.88 = common global i32 0
@x.89 = common global i32 0
@y.90 = common global i32 0
@x.91 = common global i32 0
@y.92 = common global i32 0
@x.93 = common global i32 0
@y.94 = common global i32 0
@x.95 = common global i32 0
@y.96 = common global i32 0
@x.97 = common global i32 0
@y.98 = common global i32 0
@x.99 = common global i32 0
@y.100 = common global i32 0

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @usage(i32) #0 !dbg !171 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !174, metadata !DIExpression()), !dbg !175
  %3 = load i32, i32* %2, align 4, !dbg !176
  %4 = icmp ne i32 %3, 0, !dbg !178
  br i1 %4, label %5, label %44, !dbg !179

5:                                                ; preds = %1
  %6 = load i32, i32* @x
  %7 = load i32, i32* @y
  %8 = sub i32 %6, 1
  %9 = mul i32 %6, %8
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  %12 = icmp slt i32 %7, 10
  %13 = or i1 %11, %12
  br i1 %13, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %5, %originalBBalteredBB
  %14 = load i32, i32* @x
  %15 = load i32, i32* @y
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %22, !dbg !180

22:                                               ; preds = %originalBBpart2
  %23 = load i32, i32* @x
  %24 = load i32, i32* @y
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %22, %originalBB1alteredBB
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !181
  %32 = call i8* @gettext(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0)) #10, !dbg !181
  %33 = load i8*, i8** @program_name, align 8, !dbg !181
  %34 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %31, i8* %32, i8* %33), !dbg !181
  %35 = load i32, i32* @x
  %36 = load i32, i32* @y
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %43, !dbg !181

43:                                               ; preds = %originalBBpart24
  br label %65, !dbg !181

44:                                               ; preds = %1
  %45 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0)) #10, !dbg !183
  %46 = load i8*, i8** @program_name, align 8, !dbg !185
  %47 = call i32 (i8*, ...) @printf(i8* %45, i8* %46), !dbg !186
  %48 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.2, i64 0, i64 0)) #10, !dbg !187
  %49 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !187
  %50 = call i32 @fputs_unlocked(i8* %48, %struct._IO_FILE* %49), !dbg !187
  %51 = call i8* @gettext(i8* getelementptr inbounds ([111 x i8], [111 x i8]* @.str.3, i64 0, i64 0)) #10, !dbg !188
  %52 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !188
  %53 = call i32 @fputs_unlocked(i8* %51, %struct._IO_FILE* %52), !dbg !188
  %54 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.4, i64 0, i64 0)) #10, !dbg !189
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !189
  %56 = call i32 @fputs_unlocked(i8* %54, %struct._IO_FILE* %55), !dbg !189
  %57 = call i8* @gettext(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.5, i64 0, i64 0)) #10, !dbg !190
  %58 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !190
  %59 = call i32 @fputs_unlocked(i8* %57, %struct._IO_FILE* %58), !dbg !190
  %60 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.6, i64 0, i64 0)) #10, !dbg !191
  %61 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !191
  %62 = call i32 @fputs_unlocked(i8* %60, %struct._IO_FILE* %61), !dbg !191
  %63 = call i8* @gettext(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.7, i64 0, i64 0)) #10, !dbg !192
  %64 = call i32 (i8*, ...) @printf(i8* %63, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0)), !dbg !193
  call void @emit_ancillary_info(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0)), !dbg !194
  br label %65

65:                                               ; preds = %44, %43
  %66 = load i32, i32* @x
  %67 = load i32, i32* @y
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %65, %originalBB6alteredBB
  %74 = load i32, i32* %2, align 4, !dbg !195
  call void @exit(i32 %74) #12, !dbg !196
  %75 = load i32, i32* @x
  %76 = load i32, i32* @y
  %77 = sub i32 %75, 1
  %78 = mul i32 %75, %77
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %80, %81
  br i1 %82, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  unreachable, !dbg !196

originalBBalteredBB:                              ; preds = %originalBB, %5
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %22
  %83 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !181
  %84 = call i8* @gettext(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0)) #10, !dbg !181
  %85 = load i8*, i8** @program_name, align 8, !dbg !181
  %86 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %83, i8* %84, i8* %85), !dbg !181
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %65
  %87 = load i32, i32* %2, align 4, !dbg !195
  call void @exit(i32 %87) #12, !dbg !196
  br label %originalBB6
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare dso_local i8* @gettext(i8*) #2

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #3

declare dso_local i32 @printf(i8*, ...) #3

declare dso_local i32 @fputs_unlocked(i8*, %struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @emit_ancillary_info(i8*) #4 !dbg !197 {
  %2 = alloca i8*, align 8
  %3 = alloca [7 x %struct.infomap], align 16
  %4 = alloca i8*, align 8
  %5 = alloca %struct.infomap*, align 8
  %6 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  call void @llvm.dbg.declare(metadata i8** %2, metadata !201, metadata !DIExpression()), !dbg !202
  call void @llvm.dbg.declare(metadata [7 x %struct.infomap]* %3, metadata !203, metadata !DIExpression()), !dbg !212
  %7 = bitcast [7 x %struct.infomap]* %3 to i8*, !dbg !212
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %7, i8* align 16 bitcast ([7 x %struct.infomap]* @__const.emit_ancillary_info.infomap to i8*), i64 112, i1 false), !dbg !212
  call void @llvm.dbg.declare(metadata i8** %4, metadata !213, metadata !DIExpression()), !dbg !214
  %8 = load i8*, i8** %2, align 8, !dbg !215
  store i8* %8, i8** %4, align 8, !dbg !214
  call void @llvm.dbg.declare(metadata %struct.infomap** %5, metadata !216, metadata !DIExpression()), !dbg !218
  %9 = getelementptr inbounds [7 x %struct.infomap], [7 x %struct.infomap]* %3, i64 0, i64 0, !dbg !219
  store %struct.infomap* %9, %struct.infomap** %5, align 8, !dbg !218
  br label %10, !dbg !220

10:                                               ; preds = %41, %1
  %11 = load %struct.infomap*, %struct.infomap** %5, align 8, !dbg !221
  %12 = getelementptr inbounds %struct.infomap, %struct.infomap* %11, i32 0, i32 0, !dbg !222
  %13 = load i8*, i8** %12, align 8, !dbg !222
  %14 = icmp ne i8* %13, null, !dbg !221
  br i1 %14, label %15, label %39, !dbg !223

15:                                               ; preds = %10
  %16 = load i32, i32* @x.1
  %17 = load i32, i32* @y.2
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %15, %originalBBalteredBB
  %24 = load i8*, i8** %2, align 8, !dbg !224
  %25 = load %struct.infomap*, %struct.infomap** %5, align 8, !dbg !224
  %26 = getelementptr inbounds %struct.infomap, %struct.infomap* %25, i32 0, i32 0, !dbg !224
  %27 = load i8*, i8** %26, align 8, !dbg !224
  %28 = call i32 @strcmp(i8* %24, i8* %27) #13, !dbg !224
  %29 = icmp eq i32 %28, 0, !dbg !224
  %30 = xor i1 %29, true, !dbg !225
  %31 = load i32, i32* @x.1
  %32 = load i32, i32* @y.2
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %39

39:                                               ; preds = %originalBBpart2, %10
  %40 = phi i1 [ false, %10 ], [ %30, %originalBBpart2 ], !dbg !226
  br i1 %40, label %41, label %44, !dbg !220

41:                                               ; preds = %39
  %42 = load %struct.infomap*, %struct.infomap** %5, align 8, !dbg !227
  %43 = getelementptr inbounds %struct.infomap, %struct.infomap* %42, i32 1, !dbg !227
  store %struct.infomap* %43, %struct.infomap** %5, align 8, !dbg !227
  br label %10, !dbg !220, !llvm.loop !228

44:                                               ; preds = %39
  %45 = load i32, i32* @x.1
  %46 = load i32, i32* @y.2
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBB4, label %originalBB4alteredBB

originalBB4:                                      ; preds = %44, %originalBB4alteredBB
  %53 = load %struct.infomap*, %struct.infomap** %5, align 8, !dbg !229
  %54 = getelementptr inbounds %struct.infomap, %struct.infomap* %53, i32 0, i32 1, !dbg !231
  %55 = load i8*, i8** %54, align 8, !dbg !231
  %56 = icmp ne i8* %55, null, !dbg !229
  %57 = load i32, i32* @x.1
  %58 = load i32, i32* @y.2
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBBpart26, label %originalBB4alteredBB

originalBBpart26:                                 ; preds = %originalBB4
  br i1 %56, label %65, label %85, !dbg !232

65:                                               ; preds = %originalBBpart26
  %66 = load i32, i32* @x.1
  %67 = load i32, i32* @y.2
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBB8, label %originalBB8alteredBB

originalBB8:                                      ; preds = %65, %originalBB8alteredBB
  %74 = load %struct.infomap*, %struct.infomap** %5, align 8, !dbg !233
  %75 = getelementptr inbounds %struct.infomap, %struct.infomap* %74, i32 0, i32 1, !dbg !234
  %76 = load i8*, i8** %75, align 8, !dbg !234
  store i8* %76, i8** %4, align 8, !dbg !235
  %77 = load i32, i32* @x.1
  %78 = load i32, i32* @y.2
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBBpart210, label %originalBB8alteredBB

originalBBpart210:                                ; preds = %originalBB8
  br label %85, !dbg !236

85:                                               ; preds = %originalBBpart210, %originalBBpart26
  %86 = load i32, i32* @x.1
  %87 = load i32, i32* @y.2
  %88 = sub i32 %86, 1
  %89 = mul i32 %86, %88
  %90 = urem i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %91, %92
  br i1 %93, label %originalBB12, label %originalBB12alteredBB

originalBB12:                                     ; preds = %85, %originalBB12alteredBB
  %94 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.25, i64 0, i64 0)) #10, !dbg !237
  %95 = call i32 (i8*, ...) @printf(i8* %94, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.26, i64 0, i64 0)), !dbg !238
  call void @llvm.dbg.declare(metadata i8** %6, metadata !239, metadata !DIExpression()), !dbg !240
  %96 = call i8* @setlocale(i32 5, i8* null) #10, !dbg !241
  store i8* %96, i8** %6, align 8, !dbg !240
  %97 = load i8*, i8** %6, align 8, !dbg !242
  %98 = icmp ne i8* %97, null, !dbg !242
  %99 = load i32, i32* @x.1
  %100 = load i32, i32* @y.2
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBBpart214, label %originalBB12alteredBB

originalBBpart214:                                ; preds = %originalBB12
  br i1 %98, label %107, label %131, !dbg !244

107:                                              ; preds = %originalBBpart214
  %108 = load i32, i32* @x.1
  %109 = load i32, i32* @y.2
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBB16, label %originalBB16alteredBB

originalBB16:                                     ; preds = %107, %originalBB16alteredBB
  %116 = load i8*, i8** %6, align 8, !dbg !245
  %117 = call i32 @strncmp(i8* %116, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.27, i64 0, i64 0), i64 3) #13, !dbg !245
  %118 = icmp ne i32 %117, 0, !dbg !245
  %119 = load i32, i32* @x.1
  %120 = load i32, i32* @y.2
  %121 = sub i32 %119, 1
  %122 = mul i32 %119, %121
  %123 = urem i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %124, %125
  br i1 %126, label %originalBBpart218, label %originalBB16alteredBB

originalBBpart218:                                ; preds = %originalBB16
  br i1 %118, label %127, label %131, !dbg !246

127:                                              ; preds = %originalBBpart218
  %128 = call i8* @gettext(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.28, i64 0, i64 0)) #10, !dbg !247
  %129 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !247
  %130 = call i32 @fputs_unlocked(i8* %128, %struct._IO_FILE* %129), !dbg !247
  br label %131, !dbg !249

131:                                              ; preds = %127, %originalBBpart218, %originalBBpart214
  %132 = call i8* @gettext(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.29, i64 0, i64 0)) #10, !dbg !250
  %133 = load i8*, i8** %2, align 8, !dbg !251
  %134 = call i32 (i8*, ...) @printf(i8* %132, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.26, i64 0, i64 0), i8* %133), !dbg !252
  %135 = call i8* @gettext(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.30, i64 0, i64 0)) #10, !dbg !253
  %136 = load i8*, i8** %4, align 8, !dbg !254
  %137 = load i8*, i8** %4, align 8, !dbg !255
  %138 = load i8*, i8** %2, align 8, !dbg !256
  %139 = icmp eq i8* %137, %138, !dbg !257
  %140 = zext i1 %139 to i64, !dbg !255
  %141 = select i1 %139, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.31, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0), !dbg !255
  %142 = call i32 (i8*, ...) @printf(i8* %135, i8* %136, i8* %141), !dbg !258
  ret void, !dbg !259

originalBBalteredBB:                              ; preds = %originalBB, %15
  %143 = load i8*, i8** %2, align 8, !dbg !224
  %144 = load %struct.infomap*, %struct.infomap** %5, align 8, !dbg !224
  %145 = getelementptr inbounds %struct.infomap, %struct.infomap* %144, i32 0, i32 0, !dbg !224
  %146 = load i8*, i8** %145, align 8, !dbg !224
  %147 = call i32 @strcmp(i8* %143, i8* %146) #13, !dbg !224
  %148 = icmp eq i32 %147, 0, !dbg !224
  %_ = shl i1 %148, true
  %_1 = sub i1 %148, true
  %gen = mul i1 %_1, true
  %_2 = sub i1 %148, true
  %gen3 = mul i1 %_2, true
  %149 = xor i1 %148, true, !dbg !225
  br label %originalBB

originalBB4alteredBB:                             ; preds = %originalBB4, %44
  %150 = load %struct.infomap*, %struct.infomap** %5, align 8, !dbg !229
  %151 = getelementptr inbounds %struct.infomap, %struct.infomap* %150, i32 0, i32 1, !dbg !231
  %152 = load i8*, i8** %151, align 8, !dbg !231
  %153 = icmp ne i8* %152, null, !dbg !229
  br label %originalBB4

originalBB8alteredBB:                             ; preds = %originalBB8, %65
  %154 = load %struct.infomap*, %struct.infomap** %5, align 8, !dbg !233
  %155 = getelementptr inbounds %struct.infomap, %struct.infomap* %154, i32 0, i32 1, !dbg !234
  %156 = load i8*, i8** %155, align 8, !dbg !234
  store i8* %156, i8** %4, align 8, !dbg !235
  br label %originalBB8

originalBB12alteredBB:                            ; preds = %originalBB12, %85
  %157 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.25, i64 0, i64 0)) #10, !dbg !237
  %158 = call i32 (i8*, ...) @printf(i8* %157, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.26, i64 0, i64 0)), !dbg !238
  call void @llvm.dbg.declare(metadata !4, metadata !260, metadata !DIExpression()), !dbg !240
  %159 = call i8* @setlocale(i32 5, i8* null) #10, !dbg !241
  store i8* %159, i8** %6, align 8, !dbg !240
  %160 = load i8*, i8** %6, align 8, !dbg !242
  %161 = icmp ne i8* %160, null, !dbg !242
  br label %originalBB12

originalBB16alteredBB:                            ; preds = %originalBB16, %107
  %162 = load i8*, i8** %6, align 8, !dbg !245
  %163 = call i32 @strncmp(i8* %162, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.27, i64 0, i64 0), i64 3) #13, !dbg !245
  %164 = icmp ne i32 %163, 0, !dbg !245
  br label %originalBB16
}

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

; Function Attrs: nounwind readonly
declare dso_local i32 @strcmp(i8*, i8*) #7

; Function Attrs: nounwind
declare dso_local i8* @setlocale(i32, i8*) #2

; Function Attrs: nounwind readonly
declare dso_local i32 @strncmp(i8*, i8*, i64) #7

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32, i8**) #4 !dbg !274 {
  store i8** %1, i8*** @inVal1
  store i32 %0, i32* @inVal0
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8, align 1
  %8 = alloca i32, align 4
  %9 = alloca %struct.file_name*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !278, metadata !DIExpression()), !dbg !279
  store i8** %1, i8*** %5, align 8
  call void @llvm.dbg.declare(metadata i8*** %5, metadata !280, metadata !DIExpression()), !dbg !281
  call void @llvm.dbg.declare(metadata i8** %6, metadata !282, metadata !DIExpression()), !dbg !283
  call void @llvm.dbg.declare(metadata i8* %7, metadata !284, metadata !DIExpression()), !dbg !285
  %10 = call i8* @getenv(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i64 0, i64 0)) #10, !dbg !286
  %11 = icmp ne i8* %10, null, !dbg !287
  %12 = zext i1 %11 to i8, !dbg !285
  store i8 %12, i8* %7, align 1, !dbg !285
  %13 = load i8**, i8*** %5, align 8, !dbg !288
  %14 = getelementptr inbounds i8*, i8** %13, i64 0, !dbg !288
  %15 = load i8*, i8** %14, align 8, !dbg !288
  call void @set_program_name(i8* %15), !dbg !289
  %16 = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0)) #10, !dbg !290
  %17 = call i8* @bindtextdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.12, i64 0, i64 0)) #10, !dbg !291
  %18 = call i8* @textdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0)) #10, !dbg !292
  %19 = call i32 @atexit(void ()* @close_stdout) #10, !dbg !293
  br label %20, !dbg !294

20:                                               ; preds = %146, %2
  call void @llvm.dbg.declare(metadata i32* %8, metadata !295, metadata !DIExpression()), !dbg !297
  %21 = load i32, i32* %4, align 4, !dbg !298
  %22 = load i8**, i8*** %5, align 8, !dbg !299
  %23 = call i32 @getopt_long(i32 %21, i8** %22, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i64 0, i64 0), %struct.option* getelementptr inbounds ([5 x %struct.option], [5 x %struct.option]* @longopts, i64 0, i64 0), i32* null) #10, !dbg !300
  store i32 %23, i32* %8, align 4, !dbg !297
  %24 = load i32, i32* %8, align 4, !dbg !301
  br label %25, !dbg !303

25:                                               ; preds = %20
  %collatzVar = alloca i32
  br label %26

26:                                               ; preds = %25
  %27 = load i32, i32* @inVal0
  %28 = icmp sgt i32 %27, 1
  br i1 %28, label %30, label %29

29:                                               ; preds = %26
  store i32 19, i32* %collatzVar
  br label %30

30:                                               ; preds = %29, %26
  %31 = load i8**, i8*** @inVal1
  %32 = getelementptr inbounds i8*, i8** %31, i64 1
  %33 = load i8*, i8** %32
  %controle = call i32 @controle(i8* %33, i32 -1)
  store i32 %controle, i32* %collatzVar
  br label %34

34:                                               ; preds = %originalBBpart220, %80, %30
  %35 = load i32, i32* @x.3
  %36 = load i32, i32* @y.4
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %34, %originalBBalteredBB
  %43 = load i32, i32* %collatzVar
  %44 = icmp sgt i32 %43, 1
  %45 = load i32, i32* @x.3
  %46 = load i32, i32* @y.4
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %44, label %53, label %105

53:                                               ; preds = %originalBBpart2
  %54 = load i32, i32* %collatzVar
  %55 = srem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  br i1 %56, label %57, label %76

57:                                               ; preds = %53
  %58 = load i32, i32* @x.3
  %59 = load i32, i32* @y.4
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %57, %originalBB1alteredBB
  %66 = load i32, i32* %collatzVar
  %67 = sdiv i32 %66, 2
  store i32 %67, i32* %collatzVar
  %68 = load i32, i32* @x.3
  %69 = load i32, i32* @y.4
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBBpart211, label %originalBB1alteredBB

originalBBpart211:                                ; preds = %originalBB1
  br label %80

76:                                               ; preds = %53
  %77 = load i32, i32* %collatzVar
  %78 = mul i32 %77, 3
  %79 = add i32 %78, 1
  store i32 %79, i32* %collatzVar
  br label %80

80:                                               ; preds = %76, %originalBBpart211
  %81 = load i32, i32* %collatzVar
  %82 = sub i32 %24, %81
  %83 = icmp sgt i32 %82, -3
  br i1 %83, label %84, label %34

84:                                               ; preds = %80
  %85 = load i32, i32* @x.3
  %86 = load i32, i32* @y.4
  %87 = sub i32 %85, 1
  %88 = mul i32 %85, %87
  %89 = urem i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %90, %91
  br i1 %92, label %originalBB13, label %originalBB13alteredBB

originalBB13:                                     ; preds = %84, %originalBB13alteredBB
  %93 = load i32, i32* %collatzVar
  %94 = add i32 %24, %93
  %95 = icmp slt i32 %94, 1
  %96 = load i32, i32* @x.3
  %97 = load i32, i32* @y.4
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBBpart220, label %originalBB13alteredBB

originalBBpart220:                                ; preds = %originalBB13
  br i1 %95, label %104, label %34

104:                                              ; preds = %originalBBpart220
  br label %147, !dbg !304

105:                                              ; preds = %originalBBpart2
  %106 = load i32, i32* @x.3
  %107 = load i32, i32* @y.4
  %108 = sub i32 %106, 1
  %109 = mul i32 %106, %108
  %110 = urem i32 %109, 2
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %111, %112
  br i1 %113, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %105, %originalBB22alteredBB
  %114 = load i32, i32* %8, align 4, !dbg !305
  %115 = load i32, i32* @x.3
  %116 = load i32, i32* @y.4
  %117 = sub i32 %115, 1
  %118 = mul i32 %115, %117
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %120, %121
  br i1 %122, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  switch i32 %114, label %145 [
    i32 76, label %123
    i32 80, label %124
    i32 -130, label %125
    i32 -131, label %126
  ], !dbg !306

123:                                              ; preds = %originalBBpart224
  store i8 1, i8* %7, align 1, !dbg !307
  br label %146, !dbg !309

124:                                              ; preds = %originalBBpart224
  store i8 0, i8* %7, align 1, !dbg !310
  br label %146, !dbg !311

125:                                              ; preds = %originalBBpart224
  call void @usage(i32 0) #14, !dbg !312
  unreachable, !dbg !312

126:                                              ; preds = %originalBBpart224
  %127 = load i32, i32* @x.3
  %128 = load i32, i32* @y.4
  %129 = sub i32 %127, 1
  %130 = mul i32 %127, %129
  %131 = urem i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %132, %133
  br i1 %134, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %126, %originalBB26alteredBB
  %135 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !313
  %136 = load i8*, i8** @Version, align 8, !dbg !313
  call void (%struct._IO_FILE*, i8*, i8*, i8*, ...) @version_etc(%struct._IO_FILE* %135, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.14, i64 0, i64 0), i8* %136, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.15, i64 0, i64 0), i8* null), !dbg !313
  call void @exit(i32 0) #12, !dbg !313
  %137 = load i32, i32* @x.3
  %138 = load i32, i32* @y.4
  %139 = sub i32 %137, 1
  %140 = mul i32 %137, %139
  %141 = urem i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %142, %143
  br i1 %144, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  unreachable, !dbg !313

145:                                              ; preds = %originalBBpart224
  call void @usage(i32 1) #14, !dbg !314
  unreachable, !dbg !314

146:                                              ; preds = %124, %123
  br label %20, !dbg !294, !llvm.loop !315

147:                                              ; preds = %104
  %148 = load i32, i32* @x.3
  %149 = load i32, i32* @y.4
  %150 = sub i32 %148, 1
  %151 = mul i32 %148, %150
  %152 = urem i32 %151, 2
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %153, %154
  br i1 %155, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %147, %originalBB30alteredBB
  %156 = load i32, i32* @optind, align 4, !dbg !317
  %157 = load i32, i32* %4, align 4, !dbg !319
  %158 = icmp slt i32 %156, %157, !dbg !320
  %159 = load i32, i32* @x.3
  %160 = load i32, i32* @y.4
  %161 = sub i32 %159, 1
  %162 = mul i32 %159, %161
  %163 = urem i32 %162, 2
  %164 = icmp eq i32 %163, 0
  %165 = icmp slt i32 %160, 10
  %166 = or i1 %164, %165
  br i1 %166, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br i1 %158, label %167, label %185, !dbg !321

167:                                              ; preds = %originalBBpart232
  %168 = load i32, i32* @x.3
  %169 = load i32, i32* @y.4
  %170 = sub i32 %168, 1
  %171 = mul i32 %168, %170
  %172 = urem i32 %171, 2
  %173 = icmp eq i32 %172, 0
  %174 = icmp slt i32 %169, 10
  %175 = or i1 %173, %174
  br i1 %175, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %167, %originalBB34alteredBB
  %176 = call i8* @gettext(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.16, i64 0, i64 0)) #10, !dbg !322
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %176), !dbg !323
  %177 = load i32, i32* @x.3
  %178 = load i32, i32* @y.4
  %179 = sub i32 %177, 1
  %180 = mul i32 %177, %179
  %181 = urem i32 %180, 2
  %182 = icmp eq i32 %181, 0
  %183 = icmp slt i32 %178, 10
  %184 = or i1 %182, %183
  br i1 %184, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %185, !dbg !323

185:                                              ; preds = %originalBBpart236, %originalBBpart232
  %186 = load i8, i8* %7, align 1, !dbg !324
  %187 = trunc i8 %186 to i1, !dbg !324
  br i1 %187, label %188, label %196, !dbg !326

188:                                              ; preds = %185
  %189 = call i8* @logical_getcwd(), !dbg !327
  store i8* %189, i8** %6, align 8, !dbg !329
  %190 = load i8*, i8** %6, align 8, !dbg !330
  %191 = icmp ne i8* %190, null, !dbg !330
  br i1 %191, label %192, label %195, !dbg !332

192:                                              ; preds = %188
  %193 = load i8*, i8** %6, align 8, !dbg !333
  %194 = call i32 @puts(i8* %193), !dbg !335
  store i32 0, i32* %3, align 4, !dbg !336
  br label %261, !dbg !336

195:                                              ; preds = %188
  br label %196, !dbg !337

196:                                              ; preds = %195, %185
  %197 = load i32, i32* @x.3
  %198 = load i32, i32* @y.4
  %199 = sub i32 %197, 1
  %200 = mul i32 %197, %199
  %201 = urem i32 %200, 2
  %202 = icmp eq i32 %201, 0
  %203 = icmp slt i32 %198, 10
  %204 = or i1 %202, %203
  br i1 %204, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %196, %originalBB38alteredBB
  %205 = call i8* @xgetcwd(), !dbg !338
  store i8* %205, i8** %6, align 8, !dbg !339
  %206 = load i8*, i8** %6, align 8, !dbg !340
  %207 = icmp ne i8* %206, null, !dbg !342
  %208 = load i32, i32* @x.3
  %209 = load i32, i32* @y.4
  %210 = sub i32 %208, 1
  %211 = mul i32 %208, %210
  %212 = urem i32 %211, 2
  %213 = icmp eq i32 %212, 0
  %214 = icmp slt i32 %209, 10
  %215 = or i1 %213, %214
  br i1 %215, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br i1 %207, label %216, label %220, !dbg !343

216:                                              ; preds = %originalBBpart240
  %217 = load i8*, i8** %6, align 8, !dbg !344
  %218 = call i32 @puts(i8* %217), !dbg !346
  %219 = load i8*, i8** %6, align 8, !dbg !347
  call void @free(i8* %219) #10, !dbg !348
  br label %244, !dbg !349

220:                                              ; preds = %originalBBpart240
  call void @llvm.dbg.declare(metadata %struct.file_name** %9, metadata !350, metadata !DIExpression()), !dbg !358
  %221 = load i32, i32* @x.3
  %222 = load i32, i32* @y.4
  %223 = sub i32 %221, 1
  %224 = mul i32 %221, %223
  %225 = urem i32 %224, 2
  %226 = icmp eq i32 %225, 0
  %227 = icmp slt i32 %222, 10
  %228 = or i1 %226, %227
  br i1 %228, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %220, %originalBB42alteredBB
  %229 = call %struct.file_name* @file_name_init(), !dbg !359
  store %struct.file_name* %229, %struct.file_name** %9, align 8, !dbg !358
  %230 = load %struct.file_name*, %struct.file_name** %9, align 8, !dbg !360
  call void @robust_getcwd(%struct.file_name* %230), !dbg !361
  %231 = load %struct.file_name*, %struct.file_name** %9, align 8, !dbg !362
  %232 = getelementptr inbounds %struct.file_name, %struct.file_name* %231, i32 0, i32 2, !dbg !363
  %233 = load i8*, i8** %232, align 8, !dbg !363
  %234 = call i32 @puts(i8* %233), !dbg !364
  %235 = load %struct.file_name*, %struct.file_name** %9, align 8, !dbg !365
  call void @file_name_free(%struct.file_name* %235), !dbg !366
  %236 = load i32, i32* @x.3
  %237 = load i32, i32* @y.4
  %238 = sub i32 %236, 1
  %239 = mul i32 %236, %238
  %240 = urem i32 %239, 2
  %241 = icmp eq i32 %240, 0
  %242 = icmp slt i32 %237, 10
  %243 = or i1 %241, %242
  br i1 %243, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br label %244

244:                                              ; preds = %originalBBpart244, %216
  %245 = load i32, i32* @x.3
  %246 = load i32, i32* @y.4
  %247 = sub i32 %245, 1
  %248 = mul i32 %245, %247
  %249 = urem i32 %248, 2
  %250 = icmp eq i32 %249, 0
  %251 = icmp slt i32 %246, 10
  %252 = or i1 %250, %251
  br i1 %252, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %244, %originalBB46alteredBB
  store i32 0, i32* %3, align 4, !dbg !367
  %253 = load i32, i32* @x.3
  %254 = load i32, i32* @y.4
  %255 = sub i32 %253, 1
  %256 = mul i32 %253, %255
  %257 = urem i32 %256, 2
  %258 = icmp eq i32 %257, 0
  %259 = icmp slt i32 %254, 10
  %260 = or i1 %258, %259
  br i1 %260, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br label %261, !dbg !367

261:                                              ; preds = %originalBBpart248, %192
  %262 = load i32, i32* %3, align 4, !dbg !368
  ret i32 %262, !dbg !368

originalBBalteredBB:                              ; preds = %originalBB, %34
  %263 = load i32, i32* %collatzVar
  %264 = icmp sgt i32 %263, 1
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %57
  %265 = load i32, i32* %collatzVar
  %_ = sub i32 %265, 2
  %gen = mul i32 %_, 2
  %_2 = sub i32 0, %265
  %gen3 = add i32 %_2, 2
  %_4 = sub i32 %265, 2
  %gen5 = mul i32 %_4, 2
  %_6 = sub i32 0, %265
  %gen7 = add i32 %_6, 2
  %_8 = sub i32 %265, 2
  %gen9 = mul i32 %_8, 2
  %266 = sdiv i32 %265, 2
  store i32 %266, i32* %collatzVar
  br label %originalBB1

originalBB13alteredBB:                            ; preds = %originalBB13, %84
  %267 = load i32, i32* %collatzVar
  %_14 = sub i32 0, %24
  %gen15 = add i32 %_14, %267
  %_16 = shl i32 %24, %267
  %_17 = sub i32 %24, %267
  %gen18 = mul i32 %_17, %267
  %268 = add i32 %24, %267
  %269 = icmp slt i32 %268, 1
  br label %originalBB13

originalBB22alteredBB:                            ; preds = %originalBB22, %105
  %270 = load i32, i32* %8, align 4, !dbg !305
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %126
  %271 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !313
  %272 = load i8*, i8** @Version, align 8, !dbg !313
  call void (%struct._IO_FILE*, i8*, i8*, i8*, ...) @version_etc(%struct._IO_FILE* %271, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.14, i64 0, i64 0), i8* %272, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.15, i64 0, i64 0), i8* null), !dbg !313
  call void @exit(i32 0) #12, !dbg !313
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %147
  %273 = load i32, i32* @optind, align 4, !dbg !317
  %274 = load i32, i32* %4, align 4, !dbg !319
  %275 = icmp slt i32 %273, %274, !dbg !320
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %167
  %276 = call i8* @gettext(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.16, i64 0, i64 0)) #10, !dbg !322
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %276), !dbg !323
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %196
  %277 = call i8* @xgetcwd(), !dbg !338
  store i8* %277, i8** %6, align 8, !dbg !339
  %278 = load i8*, i8** %6, align 8, !dbg !340
  %279 = icmp ne i8* %278, null, !dbg !342
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %220
  %280 = call %struct.file_name* @file_name_init(), !dbg !359
  store %struct.file_name* %280, %struct.file_name** %9, align 8, !dbg !358
  %281 = load %struct.file_name*, %struct.file_name** %9, align 8, !dbg !360
  call void @robust_getcwd(%struct.file_name* %281), !dbg !361
  %282 = load %struct.file_name*, %struct.file_name** %9, align 8, !dbg !362
  %283 = getelementptr inbounds %struct.file_name, %struct.file_name* %282, i32 0, i32 2, !dbg !363
  %284 = load i8*, i8** %283, align 8, !dbg !363
  %285 = call i32 @puts(i8* %284), !dbg !364
  %286 = load %struct.file_name*, %struct.file_name** %9, align 8, !dbg !365
  call void @file_name_free(%struct.file_name* %286), !dbg !366
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %244
  store i32 0, i32* %3, align 4, !dbg !367
  br label %originalBB46
}

; Function Attrs: nounwind
declare dso_local i8* @getenv(i8*) #2

; Function Attrs: nounwind
declare dso_local i8* @bindtextdomain(i8*, i8*) #2

; Function Attrs: nounwind
declare dso_local i8* @textdomain(i8*) #2

; Function Attrs: nounwind
declare dso_local i32 @atexit(void ()*) #2

; Function Attrs: nounwind
declare dso_local i32 @getopt_long(i32, i8**, i8*, %struct.option*, i32*) #2

declare dso_local void @error(i32, i32, i8*, ...) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @logical_getcwd() #4 !dbg !369 {
  %1 = alloca i8*, align 8
  %2 = alloca %struct.stat, align 8
  %3 = alloca %struct.stat, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata %struct.stat* %2, metadata !372, metadata !DIExpression()), !dbg !412
  call void @llvm.dbg.declare(metadata %struct.stat* %3, metadata !413, metadata !DIExpression()), !dbg !414
  call void @llvm.dbg.declare(metadata i8** %4, metadata !415, metadata !DIExpression()), !dbg !416
  %6 = call i8* @getenv(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.36, i64 0, i64 0)) #10, !dbg !417
  store i8* %6, i8** %4, align 8, !dbg !416
  call void @llvm.dbg.declare(metadata i8** %5, metadata !418, metadata !DIExpression()), !dbg !419
  %7 = load i8*, i8** %4, align 8, !dbg !420
  %8 = icmp ne i8* %7, null, !dbg !420
  br i1 %8, label %9, label %15, !dbg !422

9:                                                ; preds = %0
  %10 = load i8*, i8** %4, align 8, !dbg !423
  %11 = getelementptr inbounds i8, i8* %10, i64 0, !dbg !423
  %12 = load i8, i8* %11, align 1, !dbg !423
  %13 = sext i8 %12 to i32, !dbg !423
  %14 = icmp ne i32 %13, 47, !dbg !424
  br i1 %14, label %15, label %16, !dbg !425

15:                                               ; preds = %9, %0
  store i8* null, i8** %1, align 8, !dbg !426
  br label %408, !dbg !426

16:                                               ; preds = %9
  %17 = load i32, i32* @x.5
  %18 = load i32, i32* @y.6
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %16, %originalBBalteredBB
  %25 = load i8*, i8** %4, align 8, !dbg !427
  store i8* %25, i8** %5, align 8, !dbg !428
  %26 = load i32, i32* @x.5
  %27 = load i32, i32* @y.6
  %28 = sub i32 %26, 1
  %29 = mul i32 %26, %28
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %31, %32
  br i1 %33, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %34, !dbg !429

34:                                               ; preds = %147, %originalBBpart2
  %35 = load i32, i32* @x.5
  %36 = load i32, i32* @y.6
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %34, %originalBB1alteredBB
  %43 = load i8*, i8** %5, align 8, !dbg !430
  %44 = call i8* @strstr(i8* %43, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.37, i64 0, i64 0)) #13, !dbg !431
  store i8* %44, i8** %5, align 8, !dbg !432
  %45 = icmp ne i8* %44, null, !dbg !429
  %46 = load i32, i32* @x.5
  %47 = load i32, i32* @y.6
  %48 = sub i32 %46, 1
  %49 = mul i32 %46, %48
  %50 = urem i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %51, %52
  br i1 %53, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %45, label %54, label %150, !dbg !429

54:                                               ; preds = %originalBBpart24
  %55 = load i8*, i8** %5, align 8, !dbg !433
  %56 = getelementptr inbounds i8, i8* %55, i64 2, !dbg !433
  %57 = load i8, i8* %56, align 1, !dbg !433
  %58 = icmp ne i8 %57, 0, !dbg !433
  br i1 %58, label %59, label %146, !dbg !436

59:                                               ; preds = %54
  %60 = load i32, i32* @x.5
  %61 = load i32, i32* @y.6
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %59, %originalBB6alteredBB
  %68 = load i8*, i8** %5, align 8, !dbg !437
  %69 = getelementptr inbounds i8, i8* %68, i64 2, !dbg !437
  %70 = load i8, i8* %69, align 1, !dbg !437
  %71 = sext i8 %70 to i32, !dbg !437
  %72 = icmp eq i32 %71, 47, !dbg !438
  %73 = load i32, i32* @x.5
  %74 = load i32, i32* @y.6
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %72, label %146, label %81, !dbg !439

81:                                               ; preds = %originalBBpart28
  %82 = load i32, i32* @x.5
  %83 = load i32, i32* @y.6
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %81, %originalBB10alteredBB
  %90 = load i8*, i8** %5, align 8, !dbg !440
  %91 = getelementptr inbounds i8, i8* %90, i64 2, !dbg !440
  %92 = load i8, i8* %91, align 1, !dbg !440
  %93 = sext i8 %92 to i32, !dbg !440
  %94 = icmp eq i32 %93, 46, !dbg !441
  %95 = load i32, i32* @x.5
  %96 = load i32, i32* @y.6
  %97 = sub i32 %95, 1
  %98 = mul i32 %95, %97
  %99 = urem i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %96, 10
  %102 = or i1 %100, %101
  br i1 %102, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %94, label %103, label %147, !dbg !442

103:                                              ; preds = %originalBBpart212
  %104 = load i32, i32* @x.5
  %105 = load i32, i32* @y.6
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %103, %originalBB14alteredBB
  %112 = load i8*, i8** %5, align 8, !dbg !443
  %113 = getelementptr inbounds i8, i8* %112, i64 3, !dbg !443
  %114 = load i8, i8* %113, align 1, !dbg !443
  %115 = icmp ne i8 %114, 0, !dbg !443
  %116 = load i32, i32* @x.5
  %117 = load i32, i32* @y.6
  %118 = sub i32 %116, 1
  %119 = mul i32 %116, %118
  %120 = urem i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %117, 10
  %123 = or i1 %121, %122
  br i1 %123, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %115, label %124, label %146, !dbg !444

124:                                              ; preds = %originalBBpart216
  %125 = load i32, i32* @x.5
  %126 = load i32, i32* @y.6
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %124, %originalBB18alteredBB
  %133 = load i8*, i8** %5, align 8, !dbg !445
  %134 = getelementptr inbounds i8, i8* %133, i64 3, !dbg !445
  %135 = load i8, i8* %134, align 1, !dbg !445
  %136 = sext i8 %135 to i32, !dbg !445
  %137 = icmp eq i32 %136, 47, !dbg !446
  %138 = load i32, i32* @x.5
  %139 = load i32, i32* @y.6
  %140 = sub i32 %138, 1
  %141 = mul i32 %138, %140
  %142 = urem i32 %141, 2
  %143 = icmp eq i32 %142, 0
  %144 = icmp slt i32 %139, 10
  %145 = or i1 %143, %144
  br i1 %145, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %137, label %146, label %147, !dbg !447

146:                                              ; preds = %originalBBpart220, %originalBBpart216, %originalBBpart28, %54
  store i8* null, i8** %1, align 8, !dbg !448
  br label %408, !dbg !448

147:                                              ; preds = %originalBBpart220, %originalBBpart212
  %148 = load i8*, i8** %5, align 8, !dbg !449
  %149 = getelementptr inbounds i8, i8* %148, i32 1, !dbg !449
  store i8* %149, i8** %5, align 8, !dbg !449
  br label %34, !dbg !429, !llvm.loop !450

150:                                              ; preds = %originalBBpart24
  %151 = load i8*, i8** %4, align 8, !dbg !452
  %152 = call i32 @stat(i8* %151, %struct.stat* %2) #10, !dbg !454
  br label %153, !dbg !455

153:                                              ; preds = %150
  %collatzVar1 = alloca i32
  br label %154

154:                                              ; preds = %153
  %155 = load i32, i32* @x.5
  %156 = load i32, i32* @y.6
  %157 = sub i32 %155, 1
  %158 = mul i32 %155, %157
  %159 = urem i32 %158, 2
  %160 = icmp eq i32 %159, 0
  %161 = icmp slt i32 %156, 10
  %162 = or i1 %160, %161
  br i1 %162, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %154, %originalBB22alteredBB
  %163 = load i32, i32* @inVal0
  %164 = icmp sgt i32 %163, 1
  %165 = load i32, i32* @x.5
  %166 = load i32, i32* @y.6
  %167 = sub i32 %165, 1
  %168 = mul i32 %165, %167
  %169 = urem i32 %168, 2
  %170 = icmp eq i32 %169, 0
  %171 = icmp slt i32 %166, 10
  %172 = or i1 %170, %171
  br i1 %172, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %164, label %174, label %173

173:                                              ; preds = %originalBBpart224
  store i32 54, i32* %collatzVar1
  br label %174

174:                                              ; preds = %173, %originalBBpart224
  %175 = load i32, i32* @x.5
  %176 = load i32, i32* @y.6
  %177 = sub i32 %175, 1
  %178 = mul i32 %175, %177
  %179 = urem i32 %178, 2
  %180 = icmp eq i32 %179, 0
  %181 = icmp slt i32 %176, 10
  %182 = or i1 %180, %181
  br i1 %182, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %174, %originalBB26alteredBB
  %183 = load i8**, i8*** @inVal1
  %184 = getelementptr inbounds i8*, i8** %183, i64 1
  %185 = load i8*, i8** %184
  %controle2 = call i32 @controle(i8* %185, i32 0)
  store i32 %controle2, i32* %collatzVar1
  %186 = load i32, i32* @x.5
  %187 = load i32, i32* @y.6
  %188 = sub i32 %186, 1
  %189 = mul i32 %186, %188
  %190 = urem i32 %189, 2
  %191 = icmp eq i32 %190, 0
  %192 = icmp slt i32 %187, 10
  %193 = or i1 %191, %192
  br i1 %193, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %194

194:                                              ; preds = %originalBBpart255, %224, %originalBBpart228
  %195 = load i32, i32* %collatzVar1
  %196 = icmp sgt i32 %195, 1
  br i1 %196, label %197, label %391

197:                                              ; preds = %194
  %198 = load i32, i32* %collatzVar1
  %199 = srem i32 %198, 2
  %200 = icmp eq i32 %199, 0
  br i1 %200, label %201, label %204

201:                                              ; preds = %197
  %202 = load i32, i32* %collatzVar1
  %203 = sdiv i32 %202, 2
  store i32 %203, i32* %collatzVar1
  br label %224

204:                                              ; preds = %197
  %205 = load i32, i32* @x.5
  %206 = load i32, i32* @y.6
  %207 = sub i32 %205, 1
  %208 = mul i32 %205, %207
  %209 = urem i32 %208, 2
  %210 = icmp eq i32 %209, 0
  %211 = icmp slt i32 %206, 10
  %212 = or i1 %210, %211
  br i1 %212, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %204, %originalBB30alteredBB
  %213 = load i32, i32* %collatzVar1
  %214 = mul i32 %213, 3
  %215 = add i32 %214, 1
  store i32 %215, i32* %collatzVar1
  %216 = load i32, i32* @x.5
  %217 = load i32, i32* @y.6
  %218 = sub i32 %216, 1
  %219 = mul i32 %216, %218
  %220 = urem i32 %219, 2
  %221 = icmp eq i32 %220, 0
  %222 = icmp slt i32 %217, 10
  %223 = or i1 %221, %222
  br i1 %223, label %originalBBpart241, label %originalBB30alteredBB

originalBBpart241:                                ; preds = %originalBB30
  br label %224

224:                                              ; preds = %originalBBpart241, %201
  %225 = load i32, i32* %collatzVar1
  %226 = sub i32 %152, %225
  %227 = icmp sgt i32 %226, -2
  br i1 %227, label %228, label %194

228:                                              ; preds = %224
  %229 = load i32, i32* @x.5
  %230 = load i32, i32* @y.6
  %231 = sub i32 %229, 1
  %232 = mul i32 %229, %231
  %233 = urem i32 %232, 2
  %234 = icmp eq i32 %233, 0
  %235 = icmp slt i32 %230, 10
  %236 = or i1 %234, %235
  br i1 %236, label %originalBB43, label %originalBB43alteredBB

originalBB43:                                     ; preds = %228, %originalBB43alteredBB
  %237 = load i32, i32* %collatzVar1
  %238 = add i32 %152, %237
  %239 = icmp slt i32 %238, 2
  %240 = load i32, i32* @x.5
  %241 = load i32, i32* @y.6
  %242 = sub i32 %240, 1
  %243 = mul i32 %240, %242
  %244 = urem i32 %243, 2
  %245 = icmp eq i32 %244, 0
  %246 = icmp slt i32 %241, 10
  %247 = or i1 %245, %246
  br i1 %247, label %originalBBpart255, label %originalBB43alteredBB

originalBBpart255:                                ; preds = %originalBB43
  br i1 %239, label %248, label %194

248:                                              ; preds = %originalBBpart255
  %249 = call i32 @stat(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i64 0, i64 0), %struct.stat* %3) #10, !dbg !456
  br label %250, !dbg !457

250:                                              ; preds = %248
  %251 = load i32, i32* @x.5
  %252 = load i32, i32* @y.6
  %253 = sub i32 %251, 1
  %254 = mul i32 %251, %253
  %255 = urem i32 %254, 2
  %256 = icmp eq i32 %255, 0
  %257 = icmp slt i32 %252, 10
  %258 = or i1 %256, %257
  br i1 %258, label %originalBB57, label %originalBB57alteredBB

originalBB57:                                     ; preds = %250, %originalBB57alteredBB
  %collatzVar = alloca i32
  %259 = load i32, i32* @x.5
  %260 = load i32, i32* @y.6
  %261 = sub i32 %259, 1
  %262 = mul i32 %259, %261
  %263 = urem i32 %262, 2
  %264 = icmp eq i32 %263, 0
  %265 = icmp slt i32 %260, 10
  %266 = or i1 %264, %265
  br i1 %266, label %originalBBpart259, label %originalBB57alteredBB

originalBBpart259:                                ; preds = %originalBB57
  br label %267

267:                                              ; preds = %originalBBpart259
  %268 = load i32, i32* @x.5
  %269 = load i32, i32* @y.6
  %270 = sub i32 %268, 1
  %271 = mul i32 %268, %270
  %272 = urem i32 %271, 2
  %273 = icmp eq i32 %272, 0
  %274 = icmp slt i32 %269, 10
  %275 = or i1 %273, %274
  br i1 %275, label %originalBB61, label %originalBB61alteredBB

originalBB61:                                     ; preds = %267, %originalBB61alteredBB
  %276 = load i32, i32* @inVal0
  %277 = icmp sgt i32 %276, 1
  %278 = load i32, i32* @x.5
  %279 = load i32, i32* @y.6
  %280 = sub i32 %278, 1
  %281 = mul i32 %278, %280
  %282 = urem i32 %281, 2
  %283 = icmp eq i32 %282, 0
  %284 = icmp slt i32 %279, 10
  %285 = or i1 %283, %284
  br i1 %285, label %originalBBpart263, label %originalBB61alteredBB

originalBBpart263:                                ; preds = %originalBB61
  br i1 %277, label %287, label %286

286:                                              ; preds = %originalBBpart263
  store i32 51, i32* %collatzVar
  br label %287

287:                                              ; preds = %286, %originalBBpart263
  %288 = load i8**, i8*** @inVal1
  %289 = getelementptr inbounds i8*, i8** %288, i64 1
  %290 = load i8*, i8** %289
  %controle = call i32 @controle(i8* %290, i32 0)
  store i32 %controle, i32* %collatzVar
  br label %291

291:                                              ; preds = %originalBBpart287, %321, %287
  %292 = load i32, i32* %collatzVar
  %293 = icmp sgt i32 %292, 1
  br i1 %293, label %294, label %391

294:                                              ; preds = %291
  %295 = load i32, i32* %collatzVar
  %296 = srem i32 %295, 2
  %297 = icmp eq i32 %296, 0
  br i1 %297, label %298, label %317

298:                                              ; preds = %294
  %299 = load i32, i32* @x.5
  %300 = load i32, i32* @y.6
  %301 = sub i32 %299, 1
  %302 = mul i32 %299, %301
  %303 = urem i32 %302, 2
  %304 = icmp eq i32 %303, 0
  %305 = icmp slt i32 %300, 10
  %306 = or i1 %304, %305
  br i1 %306, label %originalBB65, label %originalBB65alteredBB

originalBB65:                                     ; preds = %298, %originalBB65alteredBB
  %307 = load i32, i32* %collatzVar
  %308 = sdiv i32 %307, 2
  store i32 %308, i32* %collatzVar
  %309 = load i32, i32* @x.5
  %310 = load i32, i32* @y.6
  %311 = sub i32 %309, 1
  %312 = mul i32 %309, %311
  %313 = urem i32 %312, 2
  %314 = icmp eq i32 %313, 0
  %315 = icmp slt i32 %310, 10
  %316 = or i1 %314, %315
  br i1 %316, label %originalBBpart269, label %originalBB65alteredBB

originalBBpart269:                                ; preds = %originalBB65
  br label %321

317:                                              ; preds = %294
  %318 = load i32, i32* %collatzVar
  %319 = mul i32 %318, 3
  %320 = add i32 %319, 1
  store i32 %320, i32* %collatzVar
  br label %321

321:                                              ; preds = %317, %originalBBpart269
  %322 = load i32, i32* %collatzVar
  %323 = sub i32 %249, %322
  %324 = icmp sgt i32 %323, -2
  br i1 %324, label %325, label %291

325:                                              ; preds = %321
  %326 = load i32, i32* @x.5
  %327 = load i32, i32* @y.6
  %328 = sub i32 %326, 1
  %329 = mul i32 %326, %328
  %330 = urem i32 %329, 2
  %331 = icmp eq i32 %330, 0
  %332 = icmp slt i32 %327, 10
  %333 = or i1 %331, %332
  br i1 %333, label %originalBB71, label %originalBB71alteredBB

originalBB71:                                     ; preds = %325, %originalBB71alteredBB
  %334 = load i32, i32* %collatzVar
  %335 = add i32 %249, %334
  %336 = icmp slt i32 %335, 2
  %337 = load i32, i32* @x.5
  %338 = load i32, i32* @y.6
  %339 = sub i32 %337, 1
  %340 = mul i32 %337, %339
  %341 = urem i32 %340, 2
  %342 = icmp eq i32 %341, 0
  %343 = icmp slt i32 %338, 10
  %344 = or i1 %342, %343
  br i1 %344, label %originalBBpart287, label %originalBB71alteredBB

originalBBpart287:                                ; preds = %originalBB71
  br i1 %336, label %345, label %291

345:                                              ; preds = %originalBBpart287
  %346 = load i32, i32* @x.5
  %347 = load i32, i32* @y.6
  %348 = sub i32 %346, 1
  %349 = mul i32 %346, %348
  %350 = urem i32 %349, 2
  %351 = icmp eq i32 %350, 0
  %352 = icmp slt i32 %347, 10
  %353 = or i1 %351, %352
  br i1 %353, label %originalBB89, label %originalBB89alteredBB

originalBB89:                                     ; preds = %345, %originalBB89alteredBB
  %354 = getelementptr inbounds %struct.stat, %struct.stat* %2, i32 0, i32 1, !dbg !458
  %355 = load i64, i64* %354, align 8, !dbg !458
  %356 = getelementptr inbounds %struct.stat, %struct.stat* %3, i32 0, i32 1, !dbg !458
  %357 = load i64, i64* %356, align 8, !dbg !458
  %358 = icmp eq i64 %355, %357, !dbg !458
  %359 = load i32, i32* @x.5
  %360 = load i32, i32* @y.6
  %361 = sub i32 %359, 1
  %362 = mul i32 %359, %361
  %363 = urem i32 %362, 2
  %364 = icmp eq i32 %363, 0
  %365 = icmp slt i32 %360, 10
  %366 = or i1 %364, %365
  br i1 %366, label %originalBBpart291, label %originalBB89alteredBB

originalBBpart291:                                ; preds = %originalBB89
  br i1 %358, label %367, label %391, !dbg !458

367:                                              ; preds = %originalBBpart291
  %368 = getelementptr inbounds %struct.stat, %struct.stat* %2, i32 0, i32 0, !dbg !458
  %369 = load i64, i64* %368, align 8, !dbg !458
  %370 = getelementptr inbounds %struct.stat, %struct.stat* %3, i32 0, i32 0, !dbg !458
  %371 = load i64, i64* %370, align 8, !dbg !458
  %372 = icmp eq i64 %369, %371, !dbg !458
  br i1 %372, label %373, label %391, !dbg !459

373:                                              ; preds = %367
  %374 = load i32, i32* @x.5
  %375 = load i32, i32* @y.6
  %376 = sub i32 %374, 1
  %377 = mul i32 %374, %376
  %378 = urem i32 %377, 2
  %379 = icmp eq i32 %378, 0
  %380 = icmp slt i32 %375, 10
  %381 = or i1 %379, %380
  br i1 %381, label %originalBB93, label %originalBB93alteredBB

originalBB93:                                     ; preds = %373, %originalBB93alteredBB
  %382 = load i8*, i8** %4, align 8, !dbg !460
  store i8* %382, i8** %1, align 8, !dbg !461
  %383 = load i32, i32* @x.5
  %384 = load i32, i32* @y.6
  %385 = sub i32 %383, 1
  %386 = mul i32 %383, %385
  %387 = urem i32 %386, 2
  %388 = icmp eq i32 %387, 0
  %389 = icmp slt i32 %384, 10
  %390 = or i1 %388, %389
  br i1 %390, label %originalBBpart295, label %originalBB93alteredBB

originalBBpart295:                                ; preds = %originalBB93
  br label %408, !dbg !461

391:                                              ; preds = %367, %originalBBpart291, %291, %194
  %392 = load i32, i32* @x.5
  %393 = load i32, i32* @y.6
  %394 = sub i32 %392, 1
  %395 = mul i32 %392, %394
  %396 = urem i32 %395, 2
  %397 = icmp eq i32 %396, 0
  %398 = icmp slt i32 %393, 10
  %399 = or i1 %397, %398
  br i1 %399, label %originalBB97, label %originalBB97alteredBB

originalBB97:                                     ; preds = %391, %originalBB97alteredBB
  store i8* null, i8** %1, align 8, !dbg !462
  %400 = load i32, i32* @x.5
  %401 = load i32, i32* @y.6
  %402 = sub i32 %400, 1
  %403 = mul i32 %400, %402
  %404 = urem i32 %403, 2
  %405 = icmp eq i32 %404, 0
  %406 = icmp slt i32 %401, 10
  %407 = or i1 %405, %406
  br i1 %407, label %originalBBpart299, label %originalBB97alteredBB

originalBBpart299:                                ; preds = %originalBB97
  br label %408, !dbg !462

408:                                              ; preds = %originalBBpart299, %originalBBpart295, %146, %15
  %409 = load i8*, i8** %1, align 8, !dbg !463
  ret i8* %409, !dbg !463

originalBBalteredBB:                              ; preds = %originalBB, %16
  %410 = load i8*, i8** %4, align 8, !dbg !427
  store i8* %410, i8** %5, align 8, !dbg !428
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %34
  %411 = load i8*, i8** %5, align 8, !dbg !430
  %412 = call i8* @strstr(i8* %411, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.37, i64 0, i64 0)) #13, !dbg !431
  store i8* %412, i8** %5, align 8, !dbg !432
  %413 = icmp ne i8* %412, null, !dbg !429
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %59
  %414 = load i8*, i8** %5, align 8, !dbg !437
  %415 = getelementptr inbounds i8, i8* %414, i64 2, !dbg !437
  %416 = load i8, i8* %415, align 1, !dbg !437
  %417 = sext i8 %416 to i32, !dbg !437
  %418 = icmp eq i32 %417, 47, !dbg !438
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %81
  %419 = load i8*, i8** %5, align 8, !dbg !440
  %420 = getelementptr inbounds i8, i8* %419, i64 2, !dbg !440
  %421 = load i8, i8* %420, align 1, !dbg !440
  %422 = sext i8 %421 to i32, !dbg !440
  %423 = icmp eq i32 %422, 46, !dbg !441
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %103
  %424 = load i8*, i8** %5, align 8, !dbg !443
  %425 = getelementptr inbounds i8, i8* %424, i64 3, !dbg !443
  %426 = load i8, i8* %425, align 1, !dbg !443
  %427 = icmp ne i8 %426, 0, !dbg !443
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %124
  %428 = load i8*, i8** %5, align 8, !dbg !445
  %429 = getelementptr inbounds i8, i8* %428, i64 3, !dbg !445
  %430 = load i8, i8* %429, align 1, !dbg !445
  %431 = sext i8 %430 to i32, !dbg !445
  %432 = icmp eq i32 %431, 47, !dbg !446
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %154
  %433 = load i32, i32* @inVal0
  %434 = icmp sgt i32 %433, 1
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %174
  %435 = load i8**, i8*** @inVal1
  %436 = getelementptr inbounds i8*, i8** %435, i64 1
  %437 = load i8*, i8** %436
  %controle2alteredBB = call i32 @controle(i8* %437, i32 0)
  store i32 %controle2alteredBB, i32* %collatzVar1
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %204
  %438 = load i32, i32* %collatzVar1
  %439 = mul i32 %438, 3
  %_ = shl i32 %439, 1
  %_31 = shl i32 %439, 1
  %_32 = sub i32 0, %439
  %gen = add i32 %_32, 1
  %_33 = sub i32 0, %439
  %gen34 = add i32 %_33, 1
  %_35 = shl i32 %439, 1
  %_36 = sub i32 %439, 1
  %gen37 = mul i32 %_36, 1
  %_38 = sub i32 0, %439
  %gen39 = add i32 %_38, 1
  %440 = add i32 %439, 1
  store i32 %440, i32* %collatzVar1
  br label %originalBB30

originalBB43alteredBB:                            ; preds = %originalBB43, %228
  %441 = load i32, i32* %collatzVar1
  %_44 = shl i32 %152, %441
  %_45 = sub i32 0, %152
  %gen46 = add i32 %_45, %441
  %_47 = sub i32 0, %152
  %gen48 = add i32 %_47, %441
  %_49 = sub i32 %152, %441
  %gen50 = mul i32 %_49, %441
  %_51 = shl i32 %152, %441
  %_52 = sub i32 0, %152
  %gen53 = add i32 %_52, %441
  %442 = add i32 %152, %441
  %443 = icmp slt i32 %442, 2
  br label %originalBB43

originalBB57alteredBB:                            ; preds = %originalBB57, %250
  %collatzVaralteredBB = alloca i32
  br label %originalBB57

originalBB61alteredBB:                            ; preds = %originalBB61, %267
  %444 = load i32, i32* @inVal0
  %445 = icmp sgt i32 %444, 1
  br label %originalBB61

originalBB65alteredBB:                            ; preds = %originalBB65, %298
  %446 = load i32, i32* %collatzVar
  %_66 = sub i32 %446, 2
  %gen67 = mul i32 %_66, 2
  %447 = sdiv i32 %446, 2
  store i32 %447, i32* %collatzVar
  br label %originalBB65

originalBB71alteredBB:                            ; preds = %originalBB71, %325
  %448 = load i32, i32* %collatzVar
  %_72 = sub i32 %249, %448
  %gen73 = mul i32 %_72, %448
  %_74 = shl i32 %249, %448
  %_75 = shl i32 %249, %448
  %_76 = sub i32 0, %249
  %gen77 = add i32 %_76, %448
  %_78 = shl i32 %249, %448
  %_79 = sub i32 0, %249
  %gen80 = add i32 %_79, %448
  %_81 = shl i32 %249, %448
  %_82 = sub i32 %249, %448
  %gen83 = mul i32 %_82, %448
  %_84 = sub i32 0, %249
  %gen85 = add i32 %_84, %448
  %449 = add i32 %249, %448
  %450 = icmp slt i32 %449, 2
  br label %originalBB71

originalBB89alteredBB:                            ; preds = %originalBB89, %345
  %451 = getelementptr inbounds %struct.stat, %struct.stat* %2, i32 0, i32 1, !dbg !458
  %452 = load i64, i64* %451, align 8, !dbg !458
  %453 = getelementptr inbounds %struct.stat, %struct.stat* %3, i32 0, i32 1, !dbg !458
  %454 = load i64, i64* %453, align 8, !dbg !458
  %455 = icmp eq i64 %452, %454, !dbg !458
  br label %originalBB89

originalBB93alteredBB:                            ; preds = %originalBB93, %373
  %456 = load i8*, i8** %4, align 8, !dbg !460
  store i8* %456, i8** %1, align 8, !dbg !461
  br label %originalBB93

originalBB97alteredBB:                            ; preds = %originalBB97, %391
  store i8* null, i8** %1, align 8, !dbg !462
  br label %originalBB97
}

declare dso_local i32 @puts(i8*) #3

; Function Attrs: nounwind
declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.file_name* @file_name_init() #4 !dbg !464 {
  %1 = alloca %struct.file_name*, align 8
  call void @llvm.dbg.declare(metadata %struct.file_name** %1, metadata !467, metadata !DIExpression()), !dbg !468
  %2 = call noalias i8* @xmalloc(i64 24), !dbg !469
  %3 = bitcast i8* %2 to %struct.file_name*, !dbg !469
  store %struct.file_name* %3, %struct.file_name** %1, align 8, !dbg !468
  %4 = load %struct.file_name*, %struct.file_name** %1, align 8, !dbg !470
  %5 = getelementptr inbounds %struct.file_name, %struct.file_name* %4, i32 0, i32 1, !dbg !471
  store i64 8192, i64* %5, align 8, !dbg !472
  %6 = load %struct.file_name*, %struct.file_name** %1, align 8, !dbg !473
  %7 = getelementptr inbounds %struct.file_name, %struct.file_name* %6, i32 0, i32 1, !dbg !474
  %8 = load i64, i64* %7, align 8, !dbg !474
  %9 = call noalias i8* @xmalloc(i64 %8), !dbg !475
  %10 = load %struct.file_name*, %struct.file_name** %1, align 8, !dbg !476
  %11 = getelementptr inbounds %struct.file_name, %struct.file_name* %10, i32 0, i32 0, !dbg !477
  store i8* %9, i8** %11, align 8, !dbg !478
  %12 = load %struct.file_name*, %struct.file_name** %1, align 8, !dbg !479
  %13 = getelementptr inbounds %struct.file_name, %struct.file_name* %12, i32 0, i32 0, !dbg !480
  %14 = load i8*, i8** %13, align 8, !dbg !480
  %15 = load %struct.file_name*, %struct.file_name** %1, align 8, !dbg !481
  %16 = getelementptr inbounds %struct.file_name, %struct.file_name* %15, i32 0, i32 1, !dbg !482
  %17 = load i64, i64* %16, align 8, !dbg !482
  %18 = sub i64 %17, 1, !dbg !483
  %19 = getelementptr inbounds i8, i8* %14, i64 %18, !dbg !484
  %20 = load %struct.file_name*, %struct.file_name** %1, align 8, !dbg !485
  %21 = getelementptr inbounds %struct.file_name, %struct.file_name* %20, i32 0, i32 2, !dbg !486
  store i8* %19, i8** %21, align 8, !dbg !487
  %22 = load %struct.file_name*, %struct.file_name** %1, align 8, !dbg !488
  %23 = getelementptr inbounds %struct.file_name, %struct.file_name* %22, i32 0, i32 2, !dbg !489
  %24 = load i8*, i8** %23, align 8, !dbg !489
  %25 = getelementptr inbounds i8, i8* %24, i64 0, !dbg !488
  store i8 0, i8* %25, align 1, !dbg !490
  %26 = load %struct.file_name*, %struct.file_name** %1, align 8, !dbg !491
  ret %struct.file_name* %26, !dbg !492
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @robust_getcwd(%struct.file_name*) #4 !dbg !493 {
  %2 = alloca %struct.file_name*, align 8
  %3 = alloca i64, align 8
  %4 = alloca %struct.dev_ino, align 8
  %5 = alloca %struct.dev_ino*, align 8
  %6 = alloca %struct.stat, align 8
  store %struct.file_name* %0, %struct.file_name** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.file_name** %2, metadata !496, metadata !DIExpression()), !dbg !497
  call void @llvm.dbg.declare(metadata i64* %3, metadata !498, metadata !DIExpression()), !dbg !499
  store i64 1, i64* %3, align 8, !dbg !499
  call void @llvm.dbg.declare(metadata %struct.dev_ino* %4, metadata !500, metadata !DIExpression()), !dbg !509
  call void @llvm.dbg.declare(metadata %struct.dev_ino** %5, metadata !510, metadata !DIExpression()), !dbg !512
  %7 = call %struct.dev_ino* @get_root_dev_ino(%struct.dev_ino* %4), !dbg !513
  store %struct.dev_ino* %7, %struct.dev_ino** %5, align 8, !dbg !512
  call void @llvm.dbg.declare(metadata %struct.stat* %6, metadata !514, metadata !DIExpression()), !dbg !515
  %8 = load %struct.dev_ino*, %struct.dev_ino** %5, align 8, !dbg !516
  %9 = icmp eq %struct.dev_ino* %8, null, !dbg !518
  br i1 %9, label %10, label %15, !dbg !519

10:                                               ; preds = %1
  %11 = call i32* @__errno_location() #15, !dbg !520
  %12 = load i32, i32* %11, align 4, !dbg !520
  %13 = call i8* @gettext(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.39, i64 0, i64 0)) #10, !dbg !520
  %14 = call i8* @quotearg_style(i32 4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.40, i64 0, i64 0)), !dbg !520
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %12, i8* %13, i8* %14), !dbg !520
  unreachable, !dbg !520

15:                                               ; preds = %1
  %16 = call i32 @stat(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i64 0, i64 0), %struct.stat* %6) #10, !dbg !521
  %17 = icmp slt i32 %16, 0, !dbg !523
  br i1 %17, label %18, label %39, !dbg !524

18:                                               ; preds = %15
  %19 = load i32, i32* @x.9
  %20 = load i32, i32* @y.10
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %18, %originalBBalteredBB
  %27 = call i32* @__errno_location() #15, !dbg !525
  %28 = load i32, i32* %27, align 4, !dbg !525
  %29 = call i8* @gettext(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.41, i64 0, i64 0)) #10, !dbg !525
  %30 = call i8* @quotearg_style(i32 4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i64 0, i64 0)), !dbg !525
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %28, i8* %29, i8* %30), !dbg !525
  %31 = load i32, i32* @x.9
  %32 = load i32, i32* @y.10
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  unreachable, !dbg !525

39:                                               ; preds = %15
  %40 = load i32, i32* @x.9
  %41 = load i32, i32* @y.10
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %39, %originalBB1alteredBB
  %48 = load i32, i32* @x.9
  %49 = load i32, i32* @y.10
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %56, !dbg !526

56:                                               ; preds = %87, %originalBBpart24
  %57 = getelementptr inbounds %struct.stat, %struct.stat* %6, i32 0, i32 1, !dbg !527
  %58 = load i64, i64* %57, align 8, !dbg !527
  %59 = load %struct.dev_ino*, %struct.dev_ino** %5, align 8, !dbg !527
  %60 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %59, i32 0, i32 0, !dbg !527
  %61 = load i64, i64* %60, align 8, !dbg !527
  %62 = icmp eq i64 %58, %61, !dbg !527
  br i1 %62, label %63, label %87, !dbg !527

63:                                               ; preds = %56
  %64 = load i32, i32* @x.9
  %65 = load i32, i32* @y.10
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %63, %originalBB6alteredBB
  %72 = getelementptr inbounds %struct.stat, %struct.stat* %6, i32 0, i32 0, !dbg !527
  %73 = load i64, i64* %72, align 8, !dbg !527
  %74 = load %struct.dev_ino*, %struct.dev_ino** %5, align 8, !dbg !527
  %75 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %74, i32 0, i32 1, !dbg !527
  %76 = load i64, i64* %75, align 8, !dbg !527
  %77 = icmp eq i64 %73, %76, !dbg !527
  %78 = load i32, i32* @x.9
  %79 = load i32, i32* @y.10
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %77, label %86, label %87, !dbg !530

86:                                               ; preds = %originalBBpart28
  br label %91, !dbg !531

87:                                               ; preds = %originalBBpart28, %56
  %88 = load %struct.file_name*, %struct.file_name** %2, align 8, !dbg !532
  %89 = load i64, i64* %3, align 8, !dbg !533
  %90 = add i64 %89, 1, !dbg !533
  store i64 %90, i64* %3, align 8, !dbg !533
  call void @find_dir_entry(%struct.stat* %6, %struct.file_name* %88, i64 %89), !dbg !534
  br label %56, !dbg !526, !llvm.loop !535

91:                                               ; preds = %86
  %92 = load %struct.file_name*, %struct.file_name** %2, align 8, !dbg !537
  %93 = getelementptr inbounds %struct.file_name, %struct.file_name* %92, i32 0, i32 2, !dbg !539
  %94 = load i8*, i8** %93, align 8, !dbg !539
  %95 = getelementptr inbounds i8, i8* %94, i64 0, !dbg !537
  %96 = load i8, i8* %95, align 1, !dbg !537
  %97 = sext i8 %96 to i32, !dbg !537
  %98 = icmp eq i32 %97, 0, !dbg !540
  br i1 %98, label %99, label %101, !dbg !541

99:                                               ; preds = %91
  %100 = load %struct.file_name*, %struct.file_name** %2, align 8, !dbg !542
  call void @file_name_prepend(%struct.file_name* %100, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0), i64 0), !dbg !543
  br label %101, !dbg !543

101:                                              ; preds = %99, %91
  %102 = load i32, i32* @x.9
  %103 = load i32, i32* @y.10
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %101, %originalBB10alteredBB
  %110 = load i32, i32* @x.9
  %111 = load i32, i32* @y.10
  %112 = sub i32 %110, 1
  %113 = mul i32 %110, %112
  %114 = urem i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %115, %116
  br i1 %117, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  ret void, !dbg !544

originalBBalteredBB:                              ; preds = %originalBB, %18
  %118 = call i32* @__errno_location() #15, !dbg !525
  %119 = load i32, i32* %118, align 4, !dbg !525
  %120 = call i8* @gettext(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.41, i64 0, i64 0)) #10, !dbg !525
  %121 = call i8* @quotearg_style(i32 4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i64 0, i64 0)), !dbg !525
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %119, i8* %120, i8* %121), !dbg !525
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %39
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %63
  %122 = getelementptr inbounds %struct.stat, %struct.stat* %6, i32 0, i32 0, !dbg !527
  %123 = load i64, i64* %122, align 8, !dbg !527
  %124 = load %struct.dev_ino*, %struct.dev_ino** %5, align 8, !dbg !527
  %125 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %124, i32 0, i32 1, !dbg !527
  %126 = load i64, i64* %125, align 8, !dbg !527
  %127 = icmp eq i64 %123, %126, !dbg !527
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %101
  br label %originalBB10
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @file_name_free(%struct.file_name*) #4 !dbg !545 {
  %2 = alloca %struct.file_name*, align 8
  store %struct.file_name* %0, %struct.file_name** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.file_name** %2, metadata !546, metadata !DIExpression()), !dbg !547
  %3 = load %struct.file_name*, %struct.file_name** %2, align 8, !dbg !548
  %4 = getelementptr inbounds %struct.file_name, %struct.file_name* %3, i32 0, i32 0, !dbg !549
  %5 = load i8*, i8** %4, align 8, !dbg !549
  call void @free(i8* %5) #10, !dbg !550
  %6 = load %struct.file_name*, %struct.file_name** %2, align 8, !dbg !551
  %7 = bitcast %struct.file_name* %6 to i8*, !dbg !551
  call void @free(i8* %7) #10, !dbg !552
  ret void, !dbg !553
}

; Function Attrs: nounwind readnone
declare dso_local i32* @__errno_location() #8

; Function Attrs: nounwind
declare dso_local i32 @stat(i8*, %struct.stat*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @find_dir_entry(%struct.stat*, %struct.file_name*, i64) #4 !dbg !554 {
  %4 = load i32, i32* @x.13
  %5 = load i32, i32* @y.14
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca %struct.stat*, align 8
  %13 = alloca %struct.file_name*, align 8
  %14 = alloca i64, align 8
  %15 = alloca %struct.__dirstream*, align 8
  %16 = alloca i32, align 4
  %17 = alloca %struct.stat, align 8
  %18 = alloca i8, align 1
  %19 = alloca i8, align 1
  %20 = alloca %struct.dirent*, align 8
  %21 = alloca %struct.stat, align 8
  %22 = alloca i64, align 8
  %23 = alloca i32, align 4
  store %struct.stat* %0, %struct.stat** %12, align 8
  call void @llvm.dbg.declare(metadata %struct.stat** %12, metadata !558, metadata !DIExpression()), !dbg !559
  store %struct.file_name* %1, %struct.file_name** %13, align 8
  call void @llvm.dbg.declare(metadata %struct.file_name** %13, metadata !560, metadata !DIExpression()), !dbg !561
  store i64 %2, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !562, metadata !DIExpression()), !dbg !563
  call void @llvm.dbg.declare(metadata %struct.__dirstream** %15, metadata !564, metadata !DIExpression()), !dbg !569
  call void @llvm.dbg.declare(metadata i32* %16, metadata !570, metadata !DIExpression()), !dbg !571
  call void @llvm.dbg.declare(metadata %struct.stat* %17, metadata !572, metadata !DIExpression()), !dbg !573
  call void @llvm.dbg.declare(metadata i8* %18, metadata !574, metadata !DIExpression()), !dbg !575
  call void @llvm.dbg.declare(metadata i8* %19, metadata !576, metadata !DIExpression()), !dbg !577
  %24 = call %struct.__dirstream* @opendir(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i64 0, i64 0)), !dbg !578
  store %struct.__dirstream* %24, %struct.__dirstream** %15, align 8, !dbg !579
  %25 = load %struct.__dirstream*, %struct.__dirstream** %15, align 8, !dbg !580
  %26 = icmp eq %struct.__dirstream* %25, null, !dbg !582
  %27 = load i32, i32* @x.13
  %28 = load i32, i32* @y.14
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %26, label %35, label %42, !dbg !583

35:                                               ; preds = %originalBBpart2
  %36 = call i32* @__errno_location() #15, !dbg !584
  %37 = load i32, i32* %36, align 4, !dbg !584
  %38 = call i8* @gettext(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.43, i64 0, i64 0)) #10, !dbg !584
  %39 = load i64, i64* %14, align 8, !dbg !584
  %40 = call i8* @nth_parent(i64 %39), !dbg !584
  %41 = call i8* @quote(i8* %40), !dbg !584
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %37, i8* %38, i8* %41), !dbg !584
  unreachable, !dbg !584

42:                                               ; preds = %originalBBpart2
  %43 = load %struct.__dirstream*, %struct.__dirstream** %15, align 8, !dbg !585
  %44 = call i32 @dirfd(%struct.__dirstream* %43) #10, !dbg !586
  store i32 %44, i32* %16, align 4, !dbg !587
  %45 = load i32, i32* %16, align 4, !dbg !588
  %46 = icmp sle i32 0, %45, !dbg !590
  br i1 %46, label %47, label %50, !dbg !591

47:                                               ; preds = %42
  %48 = load i32, i32* %16, align 4, !dbg !592
  %49 = call i32 @fchdir(i32 %48) #10, !dbg !593
  br label %52, !dbg !591

50:                                               ; preds = %42
  %51 = call i32 @chdir(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i64 0, i64 0)) #10, !dbg !594
  br label %52, !dbg !591

52:                                               ; preds = %50, %47
  %53 = phi i32 [ %49, %47 ], [ %51, %50 ], !dbg !591
  %54 = load i32, i32* @x.13
  %55 = load i32, i32* @y.14
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %52, %originalBB1alteredBB
  %62 = icmp slt i32 %53, 0, !dbg !595
  %63 = load i32, i32* @x.13
  %64 = load i32, i32* @y.14
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %62, label %71, label %78, !dbg !596

71:                                               ; preds = %originalBBpart24
  %72 = call i32* @__errno_location() #15, !dbg !597
  %73 = load i32, i32* %72, align 4, !dbg !597
  %74 = call i8* @gettext(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.44, i64 0, i64 0)) #10, !dbg !597
  %75 = load i64, i64* %14, align 8, !dbg !597
  %76 = call i8* @nth_parent(i64 %75), !dbg !597
  %77 = call i8* @quote(i8* %76), !dbg !597
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %73, i8* %74, i8* %77), !dbg !597
  unreachable, !dbg !597

78:                                               ; preds = %originalBBpart24
  %79 = load i32, i32* @x.13
  %80 = load i32, i32* @y.14
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %78, %originalBB6alteredBB
  %87 = load i32, i32* %16, align 4, !dbg !598
  %88 = icmp sle i32 0, %87, !dbg !600
  %89 = load i32, i32* @x.13
  %90 = load i32, i32* @y.14
  %91 = sub i32 %89, 1
  %92 = mul i32 %89, %91
  %93 = urem i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %94, %95
  br i1 %96, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %88, label %97, label %116, !dbg !601

97:                                               ; preds = %originalBBpart28
  %98 = load i32, i32* @x.13
  %99 = load i32, i32* @y.14
  %100 = sub i32 %98, 1
  %101 = mul i32 %98, %100
  %102 = urem i32 %101, 2
  %103 = icmp eq i32 %102, 0
  %104 = icmp slt i32 %99, 10
  %105 = or i1 %103, %104
  br i1 %105, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %97, %originalBB10alteredBB
  %106 = load i32, i32* %16, align 4, !dbg !602
  %107 = call i32 @fstat(i32 %106, %struct.stat* %17) #10, !dbg !603
  %108 = load i32, i32* @x.13
  %109 = load i32, i32* @y.14
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %118, !dbg !601

116:                                              ; preds = %originalBBpart28
  %117 = call i32 @stat(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i64 0, i64 0), %struct.stat* %17) #10, !dbg !604
  br label %118, !dbg !601

118:                                              ; preds = %116, %originalBBpart212
  %119 = phi i32 [ %107, %originalBBpart212 ], [ %117, %116 ], !dbg !601
  %120 = icmp slt i32 %119, 0, !dbg !605
  br i1 %120, label %121, label %128, !dbg !606

121:                                              ; preds = %118
  %122 = call i32* @__errno_location() #15, !dbg !607
  %123 = load i32, i32* %122, align 4, !dbg !607
  %124 = call i8* @gettext(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.41, i64 0, i64 0)) #10, !dbg !607
  %125 = load i64, i64* %14, align 8, !dbg !607
  %126 = call i8* @nth_parent(i64 %125), !dbg !607
  %127 = call i8* @quote(i8* %126), !dbg !607
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %123, i8* %124, i8* %127), !dbg !607
  unreachable, !dbg !607

128:                                              ; preds = %118
  %129 = getelementptr inbounds %struct.stat, %struct.stat* %17, i32 0, i32 0, !dbg !608
  %130 = load i64, i64* %129, align 8, !dbg !608
  %131 = load %struct.stat*, %struct.stat** %12, align 8, !dbg !609
  %132 = getelementptr inbounds %struct.stat, %struct.stat* %131, i32 0, i32 0, !dbg !610
  %133 = load i64, i64* %132, align 8, !dbg !610
  %134 = icmp ne i64 %130, %133, !dbg !611
  %135 = zext i1 %134 to i8, !dbg !612
  store i8 %135, i8* %18, align 1, !dbg !612
  store i8 0, i8* %19, align 1, !dbg !613
  br label %136, !dbg !614

136:                                              ; preds = %390, %originalBBpart2124, %280, %128
  call void @llvm.dbg.declare(metadata %struct.dirent** %20, metadata !615, metadata !DIExpression()), !dbg !627
  call void @llvm.dbg.declare(metadata %struct.stat* %21, metadata !628, metadata !DIExpression()), !dbg !629
  call void @llvm.dbg.declare(metadata i64* %22, metadata !630, metadata !DIExpression()), !dbg !631
  %137 = call i32* @__errno_location() #15, !dbg !632
  store i32 0, i32* %137, align 4, !dbg !633
  %138 = load %struct.__dirstream*, %struct.__dirstream** %15, align 8, !dbg !634
  %139 = call %struct.dirent* @readdir_ignoring_dot_and_dotdot(%struct.__dirstream* %138), !dbg !636
  store %struct.dirent* %139, %struct.dirent** %20, align 8, !dbg !637
  %140 = icmp eq %struct.dirent* %139, null, !dbg !638
  br i1 %140, label %141, label %217, !dbg !639

141:                                              ; preds = %136
  %142 = load i32, i32* @x.13
  %143 = load i32, i32* @y.14
  %144 = sub i32 %142, 1
  %145 = mul i32 %142, %144
  %146 = urem i32 %145, 2
  %147 = icmp eq i32 %146, 0
  %148 = icmp slt i32 %143, 10
  %149 = or i1 %147, %148
  br i1 %149, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %141, %originalBB14alteredBB
  %150 = call i32* @__errno_location() #15, !dbg !640
  %151 = load i32, i32* %150, align 4, !dbg !640
  %152 = icmp ne i32 %151, 0, !dbg !640
  %153 = load i32, i32* @x.13
  %154 = load i32, i32* @y.14
  %155 = sub i32 %153, 1
  %156 = mul i32 %153, %155
  %157 = urem i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = icmp slt i32 %154, 10
  %160 = or i1 %158, %159
  br i1 %160, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %152, label %161, label %216, !dbg !643

161:                                              ; preds = %originalBBpart216
  call void @llvm.dbg.declare(metadata i32* %23, metadata !644, metadata !DIExpression()), !dbg !646
  %162 = load i32, i32* @x.13
  %163 = load i32, i32* @y.14
  %164 = sub i32 %162, 1
  %165 = mul i32 %162, %164
  %166 = urem i32 %165, 2
  %167 = icmp eq i32 %166, 0
  %168 = icmp slt i32 %163, 10
  %169 = or i1 %167, %168
  br i1 %169, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %161, %originalBB18alteredBB
  %170 = call i32* @__errno_location() #15, !dbg !647
  %171 = load i32, i32* %170, align 4, !dbg !647
  store i32 %171, i32* %23, align 4, !dbg !646
  %172 = load %struct.__dirstream*, %struct.__dirstream** %15, align 8, !dbg !648
  %173 = call i32 @closedir(%struct.__dirstream* %172), !dbg !649
  %174 = load i32, i32* %23, align 4, !dbg !650
  %175 = call i32* @__errno_location() #15, !dbg !651
  store i32 %174, i32* %175, align 4, !dbg !652
  %176 = add i32 %171, 5
  %177 = add i32 %174, 2
  %178 = mul i32 %171, 4
  %179 = mul i32 %176, %176
  %180 = mul i32 %179, %179
  %181 = mul i32 %177, %177
  %182 = mul i32 %181, %181
  %183 = mul i32 %178, %178
  %184 = mul i32 %183, %183
  %185 = add i32 %180, %182
  %186 = sub i32 %185, %184
  %187 = mul i32 %186, 3
  %188 = add i32 %187, 4
  %189 = icmp eq i32 %188, 4
  %190 = load i32, i32* @x.13
  %191 = load i32, i32* @y.14
  %192 = sub i32 %190, 1
  %193 = mul i32 %190, %192
  %194 = urem i32 %193, 2
  %195 = icmp eq i32 %194, 0
  %196 = icmp slt i32 %191, 10
  %197 = or i1 %195, %196
  br i1 %197, label %originalBBpart296, label %originalBB18alteredBB

originalBBpart296:                                ; preds = %originalBB18
  br i1 %189, label %215, label %198

198:                                              ; preds = %originalBBpart296
  %199 = load i32, i32* @x.13
  %200 = load i32, i32* @y.14
  %201 = sub i32 %199, 1
  %202 = mul i32 %199, %201
  %203 = urem i32 %202, 2
  %204 = icmp eq i32 %203, 0
  %205 = icmp slt i32 %200, 10
  %206 = or i1 %204, %205
  br i1 %206, label %originalBB98, label %originalBB98alteredBB

originalBB98:                                     ; preds = %198, %originalBB98alteredBB
  %207 = load i32, i32* @x.13
  %208 = load i32, i32* @y.14
  %209 = sub i32 %207, 1
  %210 = mul i32 %207, %209
  %211 = urem i32 %210, 2
  %212 = icmp eq i32 %211, 0
  %213 = icmp slt i32 %208, 10
  %214 = or i1 %212, %213
  br i1 %214, label %originalBBpart2100, label %originalBB98alteredBB

originalBBpart2100:                               ; preds = %originalBB98
  ret void

215:                                              ; preds = %originalBBpart296
  store %struct.__dirstream* null, %struct.__dirstream** %15, align 8, !dbg !653
  br label %216, !dbg !654

216:                                              ; preds = %215, %originalBBpart216
  br label %391, !dbg !655

217:                                              ; preds = %136
  %218 = load i32, i32* @x.13
  %219 = load i32, i32* @y.14
  %220 = sub i32 %218, 1
  %221 = mul i32 %218, %220
  %222 = urem i32 %221, 2
  %223 = icmp eq i32 %222, 0
  %224 = icmp slt i32 %219, 10
  %225 = or i1 %223, %224
  br i1 %225, label %originalBB102, label %originalBB102alteredBB

originalBB102:                                    ; preds = %217, %originalBB102alteredBB
  %226 = load %struct.dirent*, %struct.dirent** %20, align 8, !dbg !656
  %227 = getelementptr inbounds %struct.dirent, %struct.dirent* %226, i32 0, i32 0, !dbg !656
  %228 = load i64, i64* %227, align 8, !dbg !656
  store i64 %228, i64* %22, align 8, !dbg !657
  %229 = load i64, i64* %22, align 8, !dbg !658
  %230 = icmp eq i64 %229, 0, !dbg !660
  %231 = load i32, i32* @x.13
  %232 = load i32, i32* @y.14
  %233 = sub i32 %231, 1
  %234 = mul i32 %231, %233
  %235 = urem i32 %234, 2
  %236 = icmp eq i32 %235, 0
  %237 = icmp slt i32 %232, 10
  %238 = or i1 %236, %237
  br i1 %238, label %originalBBpart2104, label %originalBB102alteredBB

originalBBpart2104:                               ; preds = %originalBB102
  br i1 %230, label %258, label %239, !dbg !661

239:                                              ; preds = %originalBBpart2104
  %240 = load i32, i32* @x.13
  %241 = load i32, i32* @y.14
  %242 = sub i32 %240, 1
  %243 = mul i32 %240, %242
  %244 = urem i32 %243, 2
  %245 = icmp eq i32 %244, 0
  %246 = icmp slt i32 %241, 10
  %247 = or i1 %245, %246
  br i1 %247, label %originalBB106, label %originalBB106alteredBB

originalBB106:                                    ; preds = %239, %originalBB106alteredBB
  %248 = load i8, i8* %18, align 1, !dbg !662
  %249 = trunc i8 %248 to i1, !dbg !662
  %250 = load i32, i32* @x.13
  %251 = load i32, i32* @y.14
  %252 = sub i32 %250, 1
  %253 = mul i32 %250, %252
  %254 = urem i32 %253, 2
  %255 = icmp eq i32 %254, 0
  %256 = icmp slt i32 %251, 10
  %257 = or i1 %255, %256
  br i1 %257, label %originalBBpart2108, label %originalBB106alteredBB

originalBBpart2108:                               ; preds = %originalBB106
  br i1 %249, label %258, label %300, !dbg !663

258:                                              ; preds = %originalBBpart2108, %originalBBpart2104
  %259 = load i32, i32* @x.13
  %260 = load i32, i32* @y.14
  %261 = sub i32 %259, 1
  %262 = mul i32 %259, %261
  %263 = urem i32 %262, 2
  %264 = icmp eq i32 %263, 0
  %265 = icmp slt i32 %260, 10
  %266 = or i1 %264, %265
  br i1 %266, label %originalBB110, label %originalBB110alteredBB

originalBB110:                                    ; preds = %258, %originalBB110alteredBB
  %267 = load %struct.dirent*, %struct.dirent** %20, align 8, !dbg !664
  %268 = getelementptr inbounds %struct.dirent, %struct.dirent* %267, i32 0, i32 4, !dbg !667
  %269 = getelementptr inbounds [256 x i8], [256 x i8]* %268, i64 0, i64 0, !dbg !664
  %270 = call i32 @lstat(i8* %269, %struct.stat* %21) #10, !dbg !668
  %271 = icmp slt i32 %270, 0, !dbg !669
  %272 = load i32, i32* @x.13
  %273 = load i32, i32* @y.14
  %274 = sub i32 %272, 1
  %275 = mul i32 %272, %274
  %276 = urem i32 %275, 2
  %277 = icmp eq i32 %276, 0
  %278 = icmp slt i32 %273, 10
  %279 = or i1 %277, %278
  br i1 %279, label %originalBBpart2112, label %originalBB110alteredBB

originalBBpart2112:                               ; preds = %originalBB110
  br i1 %271, label %280, label %281, !dbg !670

280:                                              ; preds = %originalBBpart2112
  br label %136, !dbg !671, !llvm.loop !673

281:                                              ; preds = %originalBBpart2112
  %282 = load i32, i32* @x.13
  %283 = load i32, i32* @y.14
  %284 = sub i32 %282, 1
  %285 = mul i32 %282, %284
  %286 = urem i32 %285, 2
  %287 = icmp eq i32 %286, 0
  %288 = icmp slt i32 %283, 10
  %289 = or i1 %287, %288
  br i1 %289, label %originalBB114, label %originalBB114alteredBB

originalBB114:                                    ; preds = %281, %originalBB114alteredBB
  %290 = getelementptr inbounds %struct.stat, %struct.stat* %21, i32 0, i32 1, !dbg !675
  %291 = load i64, i64* %290, align 8, !dbg !675
  store i64 %291, i64* %22, align 8, !dbg !676
  %292 = load i32, i32* @x.13
  %293 = load i32, i32* @y.14
  %294 = sub i32 %292, 1
  %295 = mul i32 %292, %294
  %296 = urem i32 %295, 2
  %297 = icmp eq i32 %296, 0
  %298 = icmp slt i32 %293, 10
  %299 = or i1 %297, %298
  br i1 %299, label %originalBBpart2116, label %originalBB114alteredBB

originalBBpart2116:                               ; preds = %originalBB114
  br label %300, !dbg !677

300:                                              ; preds = %originalBBpart2116, %originalBBpart2108
  %301 = load i32, i32* @x.13
  %302 = load i32, i32* @y.14
  %303 = sub i32 %301, 1
  %304 = mul i32 %301, %303
  %305 = urem i32 %304, 2
  %306 = icmp eq i32 %305, 0
  %307 = icmp slt i32 %302, 10
  %308 = or i1 %306, %307
  br i1 %308, label %originalBB118, label %originalBB118alteredBB

originalBB118:                                    ; preds = %300, %originalBB118alteredBB
  %309 = load i64, i64* %22, align 8, !dbg !678
  %310 = load %struct.stat*, %struct.stat** %12, align 8, !dbg !680
  %311 = getelementptr inbounds %struct.stat, %struct.stat* %310, i32 0, i32 1, !dbg !681
  %312 = load i64, i64* %311, align 8, !dbg !681
  %313 = icmp ne i64 %309, %312, !dbg !682
  %314 = load i32, i32* @x.13
  %315 = load i32, i32* @y.14
  %316 = sub i32 %314, 1
  %317 = mul i32 %314, %316
  %318 = urem i32 %317, 2
  %319 = icmp eq i32 %318, 0
  %320 = icmp slt i32 %315, 10
  %321 = or i1 %319, %320
  br i1 %321, label %originalBBpart2120, label %originalBB118alteredBB

originalBBpart2120:                               ; preds = %originalBB118
  br i1 %313, label %322, label %339, !dbg !683

322:                                              ; preds = %originalBBpart2120
  %323 = load i32, i32* @x.13
  %324 = load i32, i32* @y.14
  %325 = sub i32 %323, 1
  %326 = mul i32 %323, %325
  %327 = urem i32 %326, 2
  %328 = icmp eq i32 %327, 0
  %329 = icmp slt i32 %324, 10
  %330 = or i1 %328, %329
  br i1 %330, label %originalBB122, label %originalBB122alteredBB

originalBB122:                                    ; preds = %322, %originalBB122alteredBB
  %331 = load i32, i32* @x.13
  %332 = load i32, i32* @y.14
  %333 = sub i32 %331, 1
  %334 = mul i32 %331, %333
  %335 = urem i32 %334, 2
  %336 = icmp eq i32 %335, 0
  %337 = icmp slt i32 %332, 10
  %338 = or i1 %336, %337
  br i1 %338, label %originalBBpart2124, label %originalBB122alteredBB

originalBBpart2124:                               ; preds = %originalBB122
  br label %136, !dbg !684, !llvm.loop !673

339:                                              ; preds = %originalBBpart2120
  %340 = load i32, i32* @x.13
  %341 = load i32, i32* @y.14
  %342 = sub i32 %340, 1
  %343 = mul i32 %340, %342
  %344 = urem i32 %343, 2
  %345 = icmp eq i32 %344, 0
  %346 = icmp slt i32 %341, 10
  %347 = or i1 %345, %346
  br i1 %347, label %originalBB126, label %originalBB126alteredBB

originalBB126:                                    ; preds = %339, %originalBB126alteredBB
  %348 = load i8, i8* %18, align 1, !dbg !685
  %349 = trunc i8 %348 to i1, !dbg !685
  %350 = load i32, i32* @x.13
  %351 = load i32, i32* @y.14
  %352 = sub i32 %350, 1
  %353 = mul i32 %350, %352
  %354 = urem i32 %353, 2
  %355 = icmp eq i32 %354, 0
  %356 = icmp slt i32 %351, 10
  %357 = or i1 %355, %356
  br i1 %357, label %originalBBpart2128, label %originalBB126alteredBB

originalBBpart2128:                               ; preds = %originalBB126
  br i1 %349, label %358, label %381, !dbg !687

358:                                              ; preds = %originalBBpart2128
  %359 = load i32, i32* @x.13
  %360 = load i32, i32* @y.14
  %361 = sub i32 %359, 1
  %362 = mul i32 %359, %361
  %363 = urem i32 %362, 2
  %364 = icmp eq i32 %363, 0
  %365 = icmp slt i32 %360, 10
  %366 = or i1 %364, %365
  br i1 %366, label %originalBB130, label %originalBB130alteredBB

originalBB130:                                    ; preds = %358, %originalBB130alteredBB
  %367 = getelementptr inbounds %struct.stat, %struct.stat* %21, i32 0, i32 0, !dbg !688
  %368 = load i64, i64* %367, align 8, !dbg !688
  %369 = load %struct.stat*, %struct.stat** %12, align 8, !dbg !689
  %370 = getelementptr inbounds %struct.stat, %struct.stat* %369, i32 0, i32 0, !dbg !690
  %371 = load i64, i64* %370, align 8, !dbg !690
  %372 = icmp eq i64 %368, %371, !dbg !691
  %373 = load i32, i32* @x.13
  %374 = load i32, i32* @y.14
  %375 = sub i32 %373, 1
  %376 = mul i32 %373, %375
  %377 = urem i32 %376, 2
  %378 = icmp eq i32 %377, 0
  %379 = icmp slt i32 %374, 10
  %380 = or i1 %378, %379
  br i1 %380, label %originalBBpart2132, label %originalBB130alteredBB

originalBBpart2132:                               ; preds = %originalBB130
  br i1 %372, label %381, label %390, !dbg !692

381:                                              ; preds = %originalBBpart2132, %originalBBpart2128
  %382 = load %struct.file_name*, %struct.file_name** %13, align 8, !dbg !693
  %383 = load %struct.dirent*, %struct.dirent** %20, align 8, !dbg !695
  %384 = getelementptr inbounds %struct.dirent, %struct.dirent* %383, i32 0, i32 4, !dbg !696
  %385 = getelementptr inbounds [256 x i8], [256 x i8]* %384, i64 0, i64 0, !dbg !695
  %386 = load %struct.dirent*, %struct.dirent** %20, align 8, !dbg !697
  %387 = getelementptr inbounds %struct.dirent, %struct.dirent* %386, i32 0, i32 4, !dbg !697
  %388 = getelementptr inbounds [256 x i8], [256 x i8]* %387, i64 0, i64 0, !dbg !697
  %389 = call i64 @strlen(i8* %388) #13, !dbg !697
  call void @file_name_prepend(%struct.file_name* %382, i8* %385, i64 %389), !dbg !698
  store i8 1, i8* %19, align 1, !dbg !699
  br label %391, !dbg !700

390:                                              ; preds = %originalBBpart2132
  br label %136, !dbg !614, !llvm.loop !673

391:                                              ; preds = %381, %216
  %392 = load i32, i32* @x.13
  %393 = load i32, i32* @y.14
  %394 = sub i32 %392, 1
  %395 = mul i32 %392, %394
  %396 = urem i32 %395, 2
  %397 = icmp eq i32 %396, 0
  %398 = icmp slt i32 %393, 10
  %399 = or i1 %397, %398
  br i1 %399, label %originalBB134, label %originalBB134alteredBB

originalBB134:                                    ; preds = %391, %originalBB134alteredBB
  %400 = load %struct.__dirstream*, %struct.__dirstream** %15, align 8, !dbg !701
  %401 = icmp eq %struct.__dirstream* %400, null, !dbg !703
  %402 = load i32, i32* @x.13
  %403 = load i32, i32* @y.14
  %404 = sub i32 %402, 1
  %405 = mul i32 %402, %404
  %406 = urem i32 %405, 2
  %407 = icmp eq i32 %406, 0
  %408 = icmp slt i32 %403, 10
  %409 = or i1 %407, %408
  br i1 %409, label %originalBBpart2136, label %originalBB134alteredBB

originalBBpart2136:                               ; preds = %originalBB134
  br i1 %401, label %430, label %410, !dbg !704

410:                                              ; preds = %originalBBpart2136
  %411 = load i32, i32* @x.13
  %412 = load i32, i32* @y.14
  %413 = sub i32 %411, 1
  %414 = mul i32 %411, %413
  %415 = urem i32 %414, 2
  %416 = icmp eq i32 %415, 0
  %417 = icmp slt i32 %412, 10
  %418 = or i1 %416, %417
  br i1 %418, label %originalBB138, label %originalBB138alteredBB

originalBB138:                                    ; preds = %410, %originalBB138alteredBB
  %419 = load %struct.__dirstream*, %struct.__dirstream** %15, align 8, !dbg !705
  %420 = call i32 @closedir(%struct.__dirstream* %419), !dbg !706
  %421 = icmp ne i32 %420, 0, !dbg !707
  %422 = load i32, i32* @x.13
  %423 = load i32, i32* @y.14
  %424 = sub i32 %422, 1
  %425 = mul i32 %422, %424
  %426 = urem i32 %425, 2
  %427 = icmp eq i32 %426, 0
  %428 = icmp slt i32 %423, 10
  %429 = or i1 %427, %428
  br i1 %429, label %originalBBpart2140, label %originalBB138alteredBB

originalBBpart2140:                               ; preds = %originalBB138
  br i1 %421, label %430, label %453, !dbg !708

430:                                              ; preds = %originalBBpart2140, %originalBBpart2136
  %431 = load i32, i32* @x.13
  %432 = load i32, i32* @y.14
  %433 = sub i32 %431, 1
  %434 = mul i32 %431, %433
  %435 = urem i32 %434, 2
  %436 = icmp eq i32 %435, 0
  %437 = icmp slt i32 %432, 10
  %438 = or i1 %436, %437
  br i1 %438, label %originalBB142, label %originalBB142alteredBB

originalBB142:                                    ; preds = %430, %originalBB142alteredBB
  %439 = call i32* @__errno_location() #15, !dbg !709
  %440 = load i32, i32* %439, align 4, !dbg !709
  %441 = call i8* @gettext(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.45, i64 0, i64 0)) #10, !dbg !709
  %442 = load i64, i64* %14, align 8, !dbg !709
  %443 = call i8* @nth_parent(i64 %442), !dbg !709
  %444 = call i8* @quote(i8* %443), !dbg !709
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %440, i8* %441, i8* %444), !dbg !709
  %445 = load i32, i32* @x.13
  %446 = load i32, i32* @y.14
  %447 = sub i32 %445, 1
  %448 = mul i32 %445, %447
  %449 = urem i32 %448, 2
  %450 = icmp eq i32 %449, 0
  %451 = icmp slt i32 %446, 10
  %452 = or i1 %450, %451
  br i1 %452, label %originalBBpart2144, label %originalBB142alteredBB

originalBBpart2144:                               ; preds = %originalBB142
  unreachable, !dbg !709

453:                                              ; preds = %originalBBpart2140
  %454 = load i32, i32* @x.13
  %455 = load i32, i32* @y.14
  %456 = sub i32 %454, 1
  %457 = mul i32 %454, %456
  %458 = urem i32 %457, 2
  %459 = icmp eq i32 %458, 0
  %460 = icmp slt i32 %455, 10
  %461 = or i1 %459, %460
  br i1 %461, label %originalBB146, label %originalBB146alteredBB

originalBB146:                                    ; preds = %453, %originalBB146alteredBB
  %462 = load i8, i8* %19, align 1, !dbg !711
  %463 = trunc i8 %462 to i1, !dbg !711
  %464 = load i32, i32* @x.13
  %465 = load i32, i32* @y.14
  %466 = sub i32 %464, 1
  %467 = mul i32 %464, %466
  %468 = urem i32 %467, 2
  %469 = icmp eq i32 %468, 0
  %470 = icmp slt i32 %465, 10
  %471 = or i1 %469, %470
  br i1 %471, label %originalBBpart2148, label %originalBB146alteredBB

originalBBpart2148:                               ; preds = %originalBB146
  br i1 %463, label %493, label %472, !dbg !713

472:                                              ; preds = %originalBBpart2148
  %473 = load i32, i32* @x.13
  %474 = load i32, i32* @y.14
  %475 = sub i32 %473, 1
  %476 = mul i32 %473, %475
  %477 = urem i32 %476, 2
  %478 = icmp eq i32 %477, 0
  %479 = icmp slt i32 %474, 10
  %480 = or i1 %478, %479
  br i1 %480, label %originalBB150, label %originalBB150alteredBB

originalBB150:                                    ; preds = %472, %originalBB150alteredBB
  %481 = call i8* @gettext(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.46, i64 0, i64 0)) #10, !dbg !714
  %482 = load i64, i64* %14, align 8, !dbg !714
  %483 = call i8* @nth_parent(i64 %482), !dbg !714
  %484 = call i8* @quote(i8* %483), !dbg !714
  call void (i32, i32, i8*, ...) @error(i32 1, i32 0, i8* %481, i8* %484), !dbg !714
  %485 = load i32, i32* @x.13
  %486 = load i32, i32* @y.14
  %487 = sub i32 %485, 1
  %488 = mul i32 %485, %487
  %489 = urem i32 %488, 2
  %490 = icmp eq i32 %489, 0
  %491 = icmp slt i32 %486, 10
  %492 = or i1 %490, %491
  br i1 %492, label %originalBBpart2152, label %originalBB150alteredBB

originalBBpart2152:                               ; preds = %originalBB150
  unreachable, !dbg !714

493:                                              ; preds = %originalBBpart2148
  %494 = load i32, i32* @x.13
  %495 = load i32, i32* @y.14
  %496 = sub i32 %494, 1
  %497 = mul i32 %494, %496
  %498 = urem i32 %497, 2
  %499 = icmp eq i32 %498, 0
  %500 = icmp slt i32 %495, 10
  %501 = or i1 %499, %500
  br i1 %501, label %originalBB154, label %originalBB154alteredBB

originalBB154:                                    ; preds = %493, %originalBB154alteredBB
  %502 = load %struct.stat*, %struct.stat** %12, align 8, !dbg !715
  %503 = bitcast %struct.stat* %502 to i8*, !dbg !716
  %504 = bitcast %struct.stat* %17 to i8*, !dbg !716
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %503, i8* align 8 %504, i64 144, i1 false), !dbg !716
  %505 = load i32, i32* @x.13
  %506 = load i32, i32* @y.14
  %507 = sub i32 %505, 1
  %508 = mul i32 %505, %507
  %509 = urem i32 %508, 2
  %510 = icmp eq i32 %509, 0
  %511 = icmp slt i32 %506, 10
  %512 = or i1 %510, %511
  br i1 %512, label %originalBBpart2156, label %originalBB154alteredBB

originalBBpart2156:                               ; preds = %originalBB154
  ret void, !dbg !717

originalBBalteredBB:                              ; preds = %originalBB, %3
  %513 = alloca %struct.stat*, align 8
  %514 = alloca %struct.file_name*, align 8
  %515 = alloca i64, align 8
  %516 = alloca %struct.__dirstream*, align 8
  %517 = alloca i32, align 4
  %518 = alloca %struct.stat, align 8
  %519 = alloca i8, align 1
  %520 = alloca i8, align 1
  %521 = alloca %struct.dirent*, align 8
  %522 = alloca %struct.stat, align 8
  %523 = alloca i64, align 8
  %524 = alloca i32, align 4
  store %struct.stat* %0, %struct.stat** %513, align 8
  call void @llvm.dbg.declare(metadata %struct.stat** %513, metadata !718, metadata !DIExpression()), !dbg !559
  store %struct.file_name* %1, %struct.file_name** %514, align 8
  call void @llvm.dbg.declare(metadata %struct.file_name** %514, metadata !762, metadata !DIExpression()), !dbg !561
  store i64 %2, i64* %515, align 8
  call void @llvm.dbg.declare(metadata i64* %515, metadata !763, metadata !DIExpression()), !dbg !563
  call void @llvm.dbg.declare(metadata %struct.__dirstream** %516, metadata !764, metadata !DIExpression()), !dbg !569
  call void @llvm.dbg.declare(metadata i32* %517, metadata !765, metadata !DIExpression()), !dbg !571
  call void @llvm.dbg.declare(metadata %struct.stat* %518, metadata !766, metadata !DIExpression()), !dbg !573
  call void @llvm.dbg.declare(metadata i8* %519, metadata !767, metadata !DIExpression()), !dbg !575
  call void @llvm.dbg.declare(metadata i8* %520, metadata !768, metadata !DIExpression()), !dbg !577
  %525 = call %struct.__dirstream* @opendir(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i64 0, i64 0)), !dbg !578
  store %struct.__dirstream* %525, %struct.__dirstream** %516, align 8, !dbg !579
  %526 = load %struct.__dirstream*, %struct.__dirstream** %516, align 8, !dbg !580
  %527 = icmp eq %struct.__dirstream* %526, null, !dbg !582
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %52
  %528 = icmp slt i32 %53, 0, !dbg !595
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %78
  %529 = load i32, i32* %16, align 4, !dbg !598
  %530 = icmp sle i32 0, %529, !dbg !600
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %97
  %531 = load i32, i32* %16, align 4, !dbg !602
  %532 = call i32 @fstat(i32 %531, %struct.stat* %17) #10, !dbg !603
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %141
  %533 = call i32* @__errno_location() #15, !dbg !640
  %534 = load i32, i32* %533, align 4, !dbg !640
  %535 = icmp ne i32 %534, 0, !dbg !640
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %161
  %536 = call i32* @__errno_location() #15, !dbg !647
  %537 = load i32, i32* %536, align 4, !dbg !647
  store i32 %537, i32* %23, align 4, !dbg !646
  %538 = load %struct.__dirstream*, %struct.__dirstream** %15, align 8, !dbg !648
  %539 = call i32 @closedir(%struct.__dirstream* %538), !dbg !649
  %540 = load i32, i32* %23, align 4, !dbg !650
  %541 = call i32* @__errno_location() #15, !dbg !651
  store i32 %540, i32* %541, align 4, !dbg !652
  %_ = sub i32 %537, 5
  %gen = mul i32 %_, 5
  %542 = add i32 %537, 5
  %_19 = sub i32 0, %540
  %gen20 = add i32 %_19, 2
  %_21 = sub i32 0, %540
  %gen22 = add i32 %_21, 2
  %_23 = sub i32 0, %540
  %gen24 = add i32 %_23, 2
  %543 = add i32 %540, 2
  %_25 = sub i32 %537, 4
  %gen26 = mul i32 %_25, 4
  %_27 = sub i32 %537, 4
  %gen28 = mul i32 %_27, 4
  %_29 = shl i32 %537, 4
  %_30 = sub i32 0, %537
  %gen31 = add i32 %_30, 4
  %_32 = sub i32 0, %537
  %gen33 = add i32 %_32, 4
  %544 = mul i32 %537, 4
  %_34 = shl i32 %542, %542
  %_35 = sub i32 %542, %542
  %gen36 = mul i32 %_35, %542
  %_37 = sub i32 0, %542
  %gen38 = add i32 %_37, %542
  %_39 = shl i32 %542, %542
  %_40 = sub i32 0, %542
  %gen41 = add i32 %_40, %542
  %_42 = shl i32 %542, %542
  %545 = mul i32 %542, %542
  %_43 = sub i32 %545, %545
  %gen44 = mul i32 %_43, %545
  %_45 = sub i32 0, %545
  %gen46 = add i32 %_45, %545
  %546 = mul i32 %545, %545
  %_47 = sub i32 0, %543
  %gen48 = add i32 %_47, %543
  %_49 = sub i32 0, %543
  %gen50 = add i32 %_49, %543
  %547 = mul i32 %543, %543
  %_51 = shl i32 %547, %547
  %548 = mul i32 %547, %547
  %_52 = shl i32 %544, %544
  %_53 = sub i32 0, %544
  %gen54 = add i32 %_53, %544
  %_55 = sub i32 0, %544
  %gen56 = add i32 %_55, %544
  %_57 = shl i32 %544, %544
  %549 = mul i32 %544, %544
  %_58 = sub i32 %549, %549
  %gen59 = mul i32 %_58, %549
  %_60 = shl i32 %549, %549
  %_61 = sub i32 0, %549
  %gen62 = add i32 %_61, %549
  %550 = mul i32 %549, %549
  %_63 = shl i32 %546, %548
  %_64 = shl i32 %546, %548
  %_65 = shl i32 %546, %548
  %551 = add i32 %546, %548
  %_66 = sub i32 %551, %550
  %gen67 = mul i32 %_66, %550
  %_68 = sub i32 %551, %550
  %gen69 = mul i32 %_68, %550
  %_70 = sub i32 0, %551
  %gen71 = add i32 %_70, %550
  %_72 = shl i32 %551, %550
  %_73 = sub i32 %551, %550
  %gen74 = mul i32 %_73, %550
  %_75 = sub i32 %551, %550
  %gen76 = mul i32 %_75, %550
  %_77 = sub i32 %551, %550
  %gen78 = mul i32 %_77, %550
  %_79 = sub i32 0, %551
  %gen80 = add i32 %_79, %550
  %552 = sub i32 %551, %550
  %_81 = sub i32 0, %552
  %gen82 = add i32 %_81, 3
  %_83 = sub i32 0, %552
  %gen84 = add i32 %_83, 3
  %_85 = sub i32 %552, 3
  %gen86 = mul i32 %_85, 3
  %_87 = sub i32 %552, 3
  %gen88 = mul i32 %_87, 3
  %_89 = sub i32 0, %552
  %gen90 = add i32 %_89, 3
  %_91 = sub i32 0, %552
  %gen92 = add i32 %_91, 3
  %553 = mul i32 %552, 3
  %_93 = sub i32 %553, 4
  %gen94 = mul i32 %_93, 4
  %554 = add i32 %553, 4
  %555 = icmp eq i32 %554, 4
  br label %originalBB18

originalBB98alteredBB:                            ; preds = %originalBB98, %198
  br label %originalBB98

originalBB102alteredBB:                           ; preds = %originalBB102, %217
  %556 = load %struct.dirent*, %struct.dirent** %20, align 8, !dbg !656
  %557 = getelementptr inbounds %struct.dirent, %struct.dirent* %556, i32 0, i32 0, !dbg !656
  %558 = load i64, i64* %557, align 8, !dbg !656
  store i64 %558, i64* %22, align 8, !dbg !657
  %559 = load i64, i64* %22, align 8, !dbg !658
  %560 = icmp eq i64 %559, 0, !dbg !660
  br label %originalBB102

originalBB106alteredBB:                           ; preds = %originalBB106, %239
  %561 = load i8, i8* %18, align 1, !dbg !662
  %562 = trunc i8 %561 to i1, !dbg !662
  br label %originalBB106

originalBB110alteredBB:                           ; preds = %originalBB110, %258
  %563 = load %struct.dirent*, %struct.dirent** %20, align 8, !dbg !664
  %564 = getelementptr inbounds %struct.dirent, %struct.dirent* %563, i32 0, i32 4, !dbg !667
  %565 = getelementptr inbounds [256 x i8], [256 x i8]* %564, i64 0, i64 0, !dbg !664
  %566 = call i32 @lstat(i8* %565, %struct.stat* %21) #10, !dbg !668
  %567 = icmp slt i32 %566, 0, !dbg !669
  br label %originalBB110

originalBB114alteredBB:                           ; preds = %originalBB114, %281
  %568 = getelementptr inbounds %struct.stat, %struct.stat* %21, i32 0, i32 1, !dbg !675
  %569 = load i64, i64* %568, align 8, !dbg !675
  store i64 %569, i64* %22, align 8, !dbg !676
  br label %originalBB114

originalBB118alteredBB:                           ; preds = %originalBB118, %300
  %570 = load i64, i64* %22, align 8, !dbg !678
  %571 = load %struct.stat*, %struct.stat** %12, align 8, !dbg !680
  %572 = getelementptr inbounds %struct.stat, %struct.stat* %571, i32 0, i32 1, !dbg !681
  %573 = load i64, i64* %572, align 8, !dbg !681
  %574 = icmp ne i64 %570, %573, !dbg !682
  br label %originalBB118

originalBB122alteredBB:                           ; preds = %originalBB122, %322
  br label %originalBB122

originalBB126alteredBB:                           ; preds = %originalBB126, %339
  %575 = load i8, i8* %18, align 1, !dbg !685
  %576 = trunc i8 %575 to i1, !dbg !685
  br label %originalBB126

originalBB130alteredBB:                           ; preds = %originalBB130, %358
  %577 = getelementptr inbounds %struct.stat, %struct.stat* %21, i32 0, i32 0, !dbg !688
  %578 = load i64, i64* %577, align 8, !dbg !688
  %579 = load %struct.stat*, %struct.stat** %12, align 8, !dbg !689
  %580 = getelementptr inbounds %struct.stat, %struct.stat* %579, i32 0, i32 0, !dbg !690
  %581 = load i64, i64* %580, align 8, !dbg !690
  %582 = icmp eq i64 %578, %581, !dbg !691
  br label %originalBB130

originalBB134alteredBB:                           ; preds = %originalBB134, %391
  %583 = load %struct.__dirstream*, %struct.__dirstream** %15, align 8, !dbg !701
  %584 = icmp eq %struct.__dirstream* %583, null, !dbg !703
  br label %originalBB134

originalBB138alteredBB:                           ; preds = %originalBB138, %410
  %585 = load %struct.__dirstream*, %struct.__dirstream** %15, align 8, !dbg !705
  %586 = call i32 @closedir(%struct.__dirstream* %585), !dbg !706
  %587 = icmp ne i32 %586, 0, !dbg !707
  br label %originalBB138

originalBB142alteredBB:                           ; preds = %originalBB142, %430
  %588 = call i32* @__errno_location() #15, !dbg !709
  %589 = load i32, i32* %588, align 4, !dbg !709
  %590 = call i8* @gettext(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.45, i64 0, i64 0)) #10, !dbg !709
  %591 = load i64, i64* %14, align 8, !dbg !709
  %592 = call i8* @nth_parent(i64 %591), !dbg !709
  %593 = call i8* @quote(i8* %592), !dbg !709
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %589, i8* %590, i8* %593), !dbg !709
  br label %originalBB142

originalBB146alteredBB:                           ; preds = %originalBB146, %453
  %594 = load i8, i8* %19, align 1, !dbg !711
  %595 = trunc i8 %594 to i1, !dbg !711
  br label %originalBB146

originalBB150alteredBB:                           ; preds = %originalBB150, %472
  %596 = call i8* @gettext(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.46, i64 0, i64 0)) #10, !dbg !714
  %597 = load i64, i64* %14, align 8, !dbg !714
  %598 = call i8* @nth_parent(i64 %597), !dbg !714
  %599 = call i8* @quote(i8* %598), !dbg !714
  call void (i32, i32, i8*, ...) @error(i32 1, i32 0, i8* %596, i8* %599), !dbg !714
  br label %originalBB150

originalBB154alteredBB:                           ; preds = %originalBB154, %493
  %600 = load %struct.stat*, %struct.stat** %12, align 8, !dbg !715
  %601 = bitcast %struct.stat* %600 to i8*, !dbg !716
  %602 = bitcast %struct.stat* %17 to i8*, !dbg !716
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %601, i8* align 8 %602, i64 144, i1 false), !dbg !716
  br label %originalBB154
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @file_name_prepend(%struct.file_name*, i8*, i64) #4 !dbg !769 {
  %4 = alloca %struct.file_name*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i64, align 8
  store %struct.file_name* %0, %struct.file_name** %4, align 8
  call void @llvm.dbg.declare(metadata %struct.file_name** %4, metadata !772, metadata !DIExpression()), !dbg !773
  store i8* %1, i8** %5, align 8
  call void @llvm.dbg.declare(metadata i8** %5, metadata !774, metadata !DIExpression()), !dbg !775
  store i64 %2, i64* %6, align 8
  call void @llvm.dbg.declare(metadata i64* %6, metadata !776, metadata !DIExpression()), !dbg !777
  call void @llvm.dbg.declare(metadata i64* %7, metadata !778, metadata !DIExpression()), !dbg !779
  %11 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !780
  %12 = getelementptr inbounds %struct.file_name, %struct.file_name* %11, i32 0, i32 2, !dbg !781
  %13 = load i8*, i8** %12, align 8, !dbg !781
  %14 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !782
  %15 = getelementptr inbounds %struct.file_name, %struct.file_name* %14, i32 0, i32 0, !dbg !783
  %16 = load i8*, i8** %15, align 8, !dbg !783
  %17 = ptrtoint i8* %13 to i64, !dbg !784
  %18 = ptrtoint i8* %16 to i64, !dbg !784
  %19 = sub i64 %17, %18, !dbg !784
  store i64 %19, i64* %7, align 8, !dbg !779
  %20 = load i64, i64* %7, align 8, !dbg !785
  %21 = load i64, i64* %6, align 8, !dbg !787
  %22 = add i64 1, %21, !dbg !788
  %23 = icmp ult i64 %20, %22, !dbg !789
  br i1 %23, label %24, label %82, !dbg !790

24:                                               ; preds = %3
  call void @llvm.dbg.declare(metadata i64* %8, metadata !791, metadata !DIExpression()), !dbg !793
  %25 = load i32, i32* @x.15
  %26 = load i32, i32* @y.16
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %24, %originalBBalteredBB
  %33 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !794
  %34 = getelementptr inbounds %struct.file_name, %struct.file_name* %33, i32 0, i32 1, !dbg !795
  %35 = load i64, i64* %34, align 8, !dbg !795
  %36 = add i64 %35, 1, !dbg !796
  %37 = load i64, i64* %6, align 8, !dbg !797
  %38 = add i64 %36, %37, !dbg !798
  store i64 %38, i64* %8, align 8, !dbg !793
  call void @llvm.dbg.declare(metadata i8** %9, metadata !799, metadata !DIExpression()), !dbg !800
  %39 = load i64, i64* %8, align 8, !dbg !801
  %40 = call noalias i8* @xnmalloc(i64 2, i64 %39), !dbg !802
  store i8* %40, i8** %9, align 8, !dbg !800
  call void @llvm.dbg.declare(metadata i64* %10, metadata !803, metadata !DIExpression()), !dbg !804
  %41 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !805
  %42 = getelementptr inbounds %struct.file_name, %struct.file_name* %41, i32 0, i32 1, !dbg !806
  %43 = load i64, i64* %42, align 8, !dbg !806
  %44 = load i64, i64* %7, align 8, !dbg !807
  %45 = sub i64 %43, %44, !dbg !808
  store i64 %45, i64* %10, align 8, !dbg !804
  %46 = load i8*, i8** %9, align 8, !dbg !809
  %47 = load i64, i64* %8, align 8, !dbg !810
  %48 = mul i64 2, %47, !dbg !811
  %49 = getelementptr inbounds i8, i8* %46, i64 %48, !dbg !812
  %50 = load i64, i64* %10, align 8, !dbg !813
  %51 = sub i64 0, %50, !dbg !814
  %52 = getelementptr inbounds i8, i8* %49, i64 %51, !dbg !814
  %53 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !815
  %54 = getelementptr inbounds %struct.file_name, %struct.file_name* %53, i32 0, i32 2, !dbg !816
  store i8* %52, i8** %54, align 8, !dbg !817
  %55 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !818
  %56 = getelementptr inbounds %struct.file_name, %struct.file_name* %55, i32 0, i32 2, !dbg !819
  %57 = load i8*, i8** %56, align 8, !dbg !819
  %58 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !820
  %59 = getelementptr inbounds %struct.file_name, %struct.file_name* %58, i32 0, i32 0, !dbg !821
  %60 = load i8*, i8** %59, align 8, !dbg !821
  %61 = load i64, i64* %7, align 8, !dbg !822
  %62 = getelementptr inbounds i8, i8* %60, i64 %61, !dbg !823
  %63 = load i64, i64* %10, align 8, !dbg !824
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %57, i8* align 1 %62, i64 %63, i1 false), !dbg !825
  %64 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !826
  %65 = getelementptr inbounds %struct.file_name, %struct.file_name* %64, i32 0, i32 0, !dbg !827
  %66 = load i8*, i8** %65, align 8, !dbg !827
  call void @free(i8* %66) #10, !dbg !828
  %67 = load i8*, i8** %9, align 8, !dbg !829
  %68 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !830
  %69 = getelementptr inbounds %struct.file_name, %struct.file_name* %68, i32 0, i32 0, !dbg !831
  store i8* %67, i8** %69, align 8, !dbg !832
  %70 = load i64, i64* %8, align 8, !dbg !833
  %71 = mul i64 2, %70, !dbg !834
  %72 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !835
  %73 = getelementptr inbounds %struct.file_name, %struct.file_name* %72, i32 0, i32 1, !dbg !836
  store i64 %71, i64* %73, align 8, !dbg !837
  %74 = load i32, i32* @x.15
  %75 = load i32, i32* @y.16
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %82, !dbg !838

82:                                               ; preds = %originalBBpart2, %3
  %83 = load i32, i32* @x.15
  %84 = load i32, i32* @y.16
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %82, %originalBB29alteredBB
  %91 = load i64, i64* %6, align 8, !dbg !839
  %92 = add i64 1, %91, !dbg !840
  %93 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !841
  %94 = getelementptr inbounds %struct.file_name, %struct.file_name* %93, i32 0, i32 2, !dbg !842
  %95 = load i8*, i8** %94, align 8, !dbg !843
  %96 = sub i64 0, %92, !dbg !843
  %97 = getelementptr inbounds i8, i8* %95, i64 %96, !dbg !843
  store i8* %97, i8** %94, align 8, !dbg !843
  %98 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !844
  %99 = getelementptr inbounds %struct.file_name, %struct.file_name* %98, i32 0, i32 2, !dbg !845
  %100 = load i8*, i8** %99, align 8, !dbg !845
  %101 = getelementptr inbounds i8, i8* %100, i64 0, !dbg !844
  store i8 47, i8* %101, align 1, !dbg !846
  %102 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !847
  %103 = getelementptr inbounds %struct.file_name, %struct.file_name* %102, i32 0, i32 2, !dbg !848
  %104 = load i8*, i8** %103, align 8, !dbg !848
  %105 = getelementptr inbounds i8, i8* %104, i64 1, !dbg !849
  %106 = load i8*, i8** %5, align 8, !dbg !850
  %107 = load i64, i64* %6, align 8, !dbg !851
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %105, i8* align 1 %106, i64 %107, i1 false), !dbg !852
  %108 = load i32, i32* @x.15
  %109 = load i32, i32* @y.16
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBBpart245, label %originalBB29alteredBB

originalBBpart245:                                ; preds = %originalBB29
  ret void, !dbg !853

originalBBalteredBB:                              ; preds = %originalBB, %24
  %116 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !794
  %117 = getelementptr inbounds %struct.file_name, %struct.file_name* %116, i32 0, i32 1, !dbg !795
  %118 = load i64, i64* %117, align 8, !dbg !795
  %_ = shl i64 %118, 1
  %_1 = sub i64 0, %118
  %gen = add i64 %_1, 1
  %_2 = sub i64 %118, 1
  %gen3 = mul i64 %_2, 1
  %119 = add i64 %118, 1, !dbg !796
  %120 = load i64, i64* %6, align 8, !dbg !797
  %_4 = shl i64 %119, %120
  %_5 = sub i64 %119, %120
  %gen6 = mul i64 %_5, %120
  %_7 = shl i64 %119, %120
  %_8 = sub i64 %119, %120
  %gen9 = mul i64 %_8, %120
  %_10 = shl i64 %119, %120
  %121 = add i64 %119, %120, !dbg !798
  store i64 %121, i64* %8, align 8, !dbg !793
  call void @llvm.dbg.declare(metadata !4, metadata !854, metadata !DIExpression()), !dbg !800
  %122 = load i64, i64* %8, align 8, !dbg !801
  %123 = call noalias i8* @xnmalloc(i64 2, i64 %122), !dbg !802
  store i8* %123, i8** %9, align 8, !dbg !800
  call void @llvm.dbg.declare(metadata !4, metadata !878, metadata !DIExpression()), !dbg !804
  %124 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !805
  %125 = getelementptr inbounds %struct.file_name, %struct.file_name* %124, i32 0, i32 1, !dbg !806
  %126 = load i64, i64* %125, align 8, !dbg !806
  %127 = load i64, i64* %7, align 8, !dbg !807
  %_11 = shl i64 %126, %127
  %_12 = sub i64 %126, %127
  %gen13 = mul i64 %_12, %127
  %_14 = shl i64 %126, %127
  %_15 = shl i64 %126, %127
  %_16 = sub i64 0, %126
  %gen17 = add i64 %_16, %127
  %128 = sub i64 %126, %127, !dbg !808
  store i64 %128, i64* %10, align 8, !dbg !804
  %129 = load i8*, i8** %9, align 8, !dbg !809
  %130 = load i64, i64* %8, align 8, !dbg !810
  %_18 = shl i64 2, %130
  %_19 = sub i64 2, %130
  %gen20 = mul i64 %_19, %130
  %_21 = sub i64 0, 2
  %gen22 = add i64 %_21, %130
  %_23 = sub i64 2, %130
  %gen24 = mul i64 %_23, %130
  %131 = mul i64 2, %130, !dbg !811
  %132 = getelementptr inbounds i8, i8* %129, i64 %131, !dbg !812
  %133 = load i64, i64* %10, align 8, !dbg !813
  %134 = sub i64 0, %133, !dbg !814
  %135 = getelementptr inbounds i8, i8* %132, i64 %134, !dbg !814
  %136 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !815
  %137 = getelementptr inbounds %struct.file_name, %struct.file_name* %136, i32 0, i32 2, !dbg !816
  store i8* %135, i8** %137, align 8, !dbg !817
  %138 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !818
  %139 = getelementptr inbounds %struct.file_name, %struct.file_name* %138, i32 0, i32 2, !dbg !819
  %140 = load i8*, i8** %139, align 8, !dbg !819
  %141 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !820
  %142 = getelementptr inbounds %struct.file_name, %struct.file_name* %141, i32 0, i32 0, !dbg !821
  %143 = load i8*, i8** %142, align 8, !dbg !821
  %144 = load i64, i64* %7, align 8, !dbg !822
  %145 = getelementptr inbounds i8, i8* %143, i64 %144, !dbg !823
  %146 = load i64, i64* %10, align 8, !dbg !824
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %140, i8* align 1 %145, i64 %146, i1 false), !dbg !825
  %147 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !826
  %148 = getelementptr inbounds %struct.file_name, %struct.file_name* %147, i32 0, i32 0, !dbg !827
  %149 = load i8*, i8** %148, align 8, !dbg !827
  call void @free(i8* %149) #10, !dbg !828
  %150 = load i8*, i8** %9, align 8, !dbg !829
  %151 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !830
  %152 = getelementptr inbounds %struct.file_name, %struct.file_name* %151, i32 0, i32 0, !dbg !831
  store i8* %150, i8** %152, align 8, !dbg !832
  %153 = load i64, i64* %8, align 8, !dbg !833
  %_25 = sub i64 2, %153
  %gen26 = mul i64 %_25, %153
  %_27 = sub i64 2, %153
  %gen28 = mul i64 %_27, %153
  %154 = mul i64 2, %153, !dbg !834
  %155 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !835
  %156 = getelementptr inbounds %struct.file_name, %struct.file_name* %155, i32 0, i32 1, !dbg !836
  store i64 %154, i64* %156, align 8, !dbg !837
  br label %originalBB

originalBB29alteredBB:                            ; preds = %originalBB29, %82
  %157 = load i64, i64* %6, align 8, !dbg !839
  %_30 = sub i64 0, 1
  %gen31 = add i64 %_30, %157
  %_32 = shl i64 1, %157
  %_33 = shl i64 1, %157
  %_34 = sub i64 0, 1
  %gen35 = add i64 %_34, %157
  %_36 = sub i64 0, 1
  %gen37 = add i64 %_36, %157
  %_38 = shl i64 1, %157
  %158 = add i64 1, %157, !dbg !840
  %159 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !841
  %160 = getelementptr inbounds %struct.file_name, %struct.file_name* %159, i32 0, i32 2, !dbg !842
  %161 = load i8*, i8** %160, align 8, !dbg !843
  %_39 = shl i64 0, %158
  %_40 = sub i64 0, 0
  %gen41 = add i64 %_40, %158
  %_42 = sub i64 0, 0
  %gen43 = add i64 %_42, %158
  %162 = sub i64 0, %158, !dbg !843
  %163 = getelementptr inbounds i8, i8* %161, i64 %162, !dbg !843
  store i8* %163, i8** %160, align 8, !dbg !843
  %164 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !844
  %165 = getelementptr inbounds %struct.file_name, %struct.file_name* %164, i32 0, i32 2, !dbg !845
  %166 = load i8*, i8** %165, align 8, !dbg !845
  %167 = getelementptr inbounds i8, i8* %166, i64 0, !dbg !844
  store i8 47, i8* %167, align 1, !dbg !846
  %168 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !847
  %169 = getelementptr inbounds %struct.file_name, %struct.file_name* %168, i32 0, i32 2, !dbg !848
  %170 = load i8*, i8** %169, align 8, !dbg !848
  %171 = getelementptr inbounds i8, i8* %170, i64 1, !dbg !849
  %172 = load i8*, i8** %5, align 8, !dbg !850
  %173 = load i64, i64* %6, align 8, !dbg !851
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %171, i8* align 1 %172, i64 %173, i1 false), !dbg !852
  br label %originalBB29
}

declare dso_local %struct.__dirstream* @opendir(i8*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @nth_parent(i64) #4 !dbg !879 {
  %2 = load i32, i32* @x.17
  %3 = load i32, i32* @y.18
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i64, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  store i64 %0, i64* %10, align 8
  call void @llvm.dbg.declare(metadata i64* %10, metadata !882, metadata !DIExpression()), !dbg !883
  call void @llvm.dbg.declare(metadata i8** %11, metadata !884, metadata !DIExpression()), !dbg !885
  %14 = load i64, i64* %10, align 8, !dbg !886
  %15 = call noalias i8* @xnmalloc(i64 3, i64 %14), !dbg !887
  store i8* %15, i8** %11, align 8, !dbg !885
  call void @llvm.dbg.declare(metadata i8** %12, metadata !888, metadata !DIExpression()), !dbg !889
  %16 = load i8*, i8** %11, align 8, !dbg !890
  store i8* %16, i8** %12, align 8, !dbg !889
  call void @llvm.dbg.declare(metadata i64* %13, metadata !891, metadata !DIExpression()), !dbg !893
  store i64 0, i64* %13, align 8, !dbg !893
  %17 = load i32, i32* @x.17
  %18 = load i32, i32* @y.18
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %25, !dbg !894

25:                                               ; preds = %originalBBpart29, %originalBBpart2
  %26 = load i64, i64* %13, align 8, !dbg !895
  %27 = load i64, i64* %10, align 8, !dbg !897
  %28 = icmp ult i64 %26, %27, !dbg !898
  br i1 %28, label %29, label %52, !dbg !899

29:                                               ; preds = %25
  %30 = load i8*, i8** %12, align 8, !dbg !900
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %30, i8* align 1 getelementptr inbounds ([4 x i8], [4 x i8]* @.str.47, i64 0, i64 0), i64 3, i1 false), !dbg !902
  %31 = load i8*, i8** %12, align 8, !dbg !903
  %32 = getelementptr inbounds i8, i8* %31, i64 3, !dbg !903
  store i8* %32, i8** %12, align 8, !dbg !903
  br label %33, !dbg !904

33:                                               ; preds = %29
  %34 = load i32, i32* @x.17
  %35 = load i32, i32* @y.18
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %33, %originalBB1alteredBB
  %42 = load i64, i64* %13, align 8, !dbg !905
  %43 = add i64 %42, 1, !dbg !905
  store i64 %43, i64* %13, align 8, !dbg !905
  %44 = load i32, i32* @x.17
  %45 = load i32, i32* @y.18
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBBpart29, label %originalBB1alteredBB

originalBBpart29:                                 ; preds = %originalBB1
  br label %25, !dbg !906, !llvm.loop !907

52:                                               ; preds = %25
  %53 = load i32, i32* @x.17
  %54 = load i32, i32* @y.18
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBB11, label %originalBB11alteredBB

originalBB11:                                     ; preds = %52, %originalBB11alteredBB
  %61 = load i8*, i8** %12, align 8, !dbg !909
  %62 = getelementptr inbounds i8, i8* %61, i64 -1, !dbg !909
  store i8 0, i8* %62, align 1, !dbg !910
  %63 = load i8*, i8** %11, align 8, !dbg !911
  %64 = load i32, i32* @x.17
  %65 = load i32, i32* @y.18
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBBpart213, label %originalBB11alteredBB

originalBBpart213:                                ; preds = %originalBB11
  ret i8* %63, !dbg !912

originalBBalteredBB:                              ; preds = %originalBB, %1
  %72 = alloca i64, align 8
  %73 = alloca i8*, align 8
  %74 = alloca i8*, align 8
  %75 = alloca i64, align 8
  store i64 %0, i64* %72, align 8
  call void @llvm.dbg.declare(metadata i64* %72, metadata !913, metadata !DIExpression()), !dbg !883
  call void @llvm.dbg.declare(metadata i8** %73, metadata !927, metadata !DIExpression()), !dbg !885
  %76 = load i64, i64* %72, align 8, !dbg !886
  %77 = call noalias i8* @xnmalloc(i64 3, i64 %76), !dbg !887
  store i8* %77, i8** %73, align 8, !dbg !885
  call void @llvm.dbg.declare(metadata i8** %74, metadata !928, metadata !DIExpression()), !dbg !889
  %78 = load i8*, i8** %73, align 8, !dbg !890
  store i8* %78, i8** %74, align 8, !dbg !889
  call void @llvm.dbg.declare(metadata i64* %75, metadata !929, metadata !DIExpression()), !dbg !893
  store i64 0, i64* %75, align 8, !dbg !893
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %33
  %79 = load i64, i64* %13, align 8, !dbg !905
  %_ = shl i64 %79, 1
  %_2 = shl i64 %79, 1
  %_3 = shl i64 %79, 1
  %_4 = shl i64 %79, 1
  %_5 = sub i64 0, %79
  %gen = add i64 %_5, 1
  %_6 = sub i64 0, %79
  %gen7 = add i64 %_6, 1
  %80 = add i64 %79, 1, !dbg !905
  store i64 %80, i64* %13, align 8, !dbg !905
  br label %originalBB1

originalBB11alteredBB:                            ; preds = %originalBB11, %52
  %81 = load i8*, i8** %12, align 8, !dbg !909
  %82 = getelementptr inbounds i8, i8* %81, i64 -1, !dbg !909
  store i8 0, i8* %82, align 1, !dbg !910
  %83 = load i8*, i8** %11, align 8, !dbg !911
  br label %originalBB11
}

; Function Attrs: nounwind
declare dso_local i32 @dirfd(%struct.__dirstream*) #2

; Function Attrs: nounwind
declare dso_local i32 @fchdir(i32) #2

; Function Attrs: nounwind
declare dso_local i32 @chdir(i8*) #2

; Function Attrs: nounwind
declare dso_local i32 @fstat(i32, %struct.stat*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.dirent* @readdir_ignoring_dot_and_dotdot(%struct.__dirstream*) #4 !dbg !931 {
  %2 = load i32, i32* @x.19
  %3 = load i32, i32* @y.20
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct.__dirstream*, align 8
  %11 = alloca %struct.dirent*, align 8
  store %struct.__dirstream* %0, %struct.__dirstream** %10, align 8
  call void @llvm.dbg.declare(metadata %struct.__dirstream** %10, metadata !934, metadata !DIExpression()), !dbg !935
  %12 = load i32, i32* @x.19
  %13 = load i32, i32* @y.20
  %14 = sub i32 %12, 1
  %15 = mul i32 %12, %14
  %16 = urem i32 %15, 2
  %17 = icmp eq i32 %16, 0
  %18 = icmp slt i32 %13, 10
  %19 = or i1 %17, %18
  br i1 %19, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %20, !dbg !936

20:                                               ; preds = %originalBBpart24, %originalBBpart2
  call void @llvm.dbg.declare(metadata %struct.dirent** %11, metadata !937, metadata !DIExpression()), !dbg !939
  %21 = load %struct.__dirstream*, %struct.__dirstream** %10, align 8, !dbg !940
  %22 = call %struct.dirent* @readdir(%struct.__dirstream* %21), !dbg !941
  store %struct.dirent* %22, %struct.dirent** %11, align 8, !dbg !939
  %23 = load %struct.dirent*, %struct.dirent** %11, align 8, !dbg !942
  %24 = icmp eq %struct.dirent* %23, null, !dbg !944
  br i1 %24, label %30, label %25, !dbg !945

25:                                               ; preds = %20
  %26 = load %struct.dirent*, %struct.dirent** %11, align 8, !dbg !946
  %27 = getelementptr inbounds %struct.dirent, %struct.dirent* %26, i32 0, i32 4, !dbg !947
  %28 = getelementptr inbounds [256 x i8], [256 x i8]* %27, i64 0, i64 0, !dbg !946
  %29 = call zeroext i1 @dot_or_dotdot(i8* %28), !dbg !948
  br i1 %29, label %32, label %30, !dbg !949

30:                                               ; preds = %25, %20
  %31 = load %struct.dirent*, %struct.dirent** %11, align 8, !dbg !950
  ret %struct.dirent* %31, !dbg !951

32:                                               ; preds = %25
  %33 = load i32, i32* @x.19
  %34 = load i32, i32* @y.20
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %32, %originalBB1alteredBB
  %41 = load i32, i32* @x.19
  %42 = load i32, i32* @y.20
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %20, !dbg !936, !llvm.loop !952

originalBBalteredBB:                              ; preds = %originalBB, %1
  %49 = alloca %struct.__dirstream*, align 8
  %50 = alloca %struct.dirent*, align 8
  store %struct.__dirstream* %0, %struct.__dirstream** %49, align 8
  call void @llvm.dbg.declare(metadata %struct.__dirstream** %49, metadata !954, metadata !DIExpression()), !dbg !935
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %32
  br label %originalBB1
}

declare dso_local i32 @closedir(%struct.__dirstream*) #3

; Function Attrs: nounwind
declare dso_local i32 @lstat(i8*, %struct.stat*) #2

; Function Attrs: nounwind readonly
declare dso_local i64 @strlen(i8*) #7

declare dso_local %struct.dirent* @readdir(%struct.__dirstream*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @dot_or_dotdot(i8*) #4 !dbg !979 {
  %2 = load i32, i32* @x.21
  %3 = load i32, i32* @y.22
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i1, align 1
  %11 = alloca i8*, align 8
  %12 = alloca i8, align 1
  store i8* %0, i8** %11, align 8
  call void @llvm.dbg.declare(metadata i8** %11, metadata !982, metadata !DIExpression()), !dbg !983
  %13 = load i8*, i8** %11, align 8, !dbg !984
  %14 = getelementptr inbounds i8, i8* %13, i64 0, !dbg !984
  %15 = load i8, i8* %14, align 1, !dbg !984
  %16 = sext i8 %15 to i32, !dbg !984
  %17 = icmp eq i32 %16, 46, !dbg !986
  %18 = load i32, i32* @x.21
  %19 = load i32, i32* @y.22
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %17, label %26, label %78, !dbg !987

26:                                               ; preds = %originalBBpart2
  call void @llvm.dbg.declare(metadata i8* %12, metadata !988, metadata !DIExpression()), !dbg !990
  %27 = load i8*, i8** %11, align 8, !dbg !991
  %28 = load i8*, i8** %11, align 8, !dbg !992
  %29 = getelementptr inbounds i8, i8* %28, i64 1, !dbg !992
  %30 = load i8, i8* %29, align 1, !dbg !992
  %31 = sext i8 %30 to i32, !dbg !992
  %32 = icmp eq i32 %31, 46, !dbg !993
  %33 = zext i1 %32 to i32, !dbg !993
  %34 = add nsw i32 %33, 1, !dbg !994
  %35 = sext i32 %34 to i64, !dbg !991
  %36 = getelementptr inbounds i8, i8* %27, i64 %35, !dbg !991
  %37 = load i8, i8* %36, align 1, !dbg !991
  store i8 %37, i8* %12, align 1, !dbg !990
  %38 = load i8, i8* %12, align 1, !dbg !995
  %39 = icmp ne i8 %38, 0, !dbg !995
  br i1 %39, label %40, label %60, !dbg !996

40:                                               ; preds = %26
  %41 = load i32, i32* @x.21
  %42 = load i32, i32* @y.22
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %40, %originalBB1alteredBB
  %49 = load i8, i8* %12, align 1, !dbg !997
  %50 = sext i8 %49 to i32, !dbg !997
  %51 = icmp eq i32 %50, 47, !dbg !997
  %52 = load i32, i32* @x.21
  %53 = load i32, i32* @y.22
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %60, !dbg !996

60:                                               ; preds = %originalBBpart24, %26
  %61 = phi i1 [ true, %26 ], [ %51, %originalBBpart24 ]
  %62 = load i32, i32* @x.21
  %63 = load i32, i32* @y.22
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %60, %originalBB6alteredBB
  store i1 %61, i1* %10, align 1, !dbg !998
  %70 = load i32, i32* @x.21
  %71 = load i32, i32* @y.22
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %95, !dbg !998

78:                                               ; preds = %originalBBpart2
  %79 = load i32, i32* @x.21
  %80 = load i32, i32* @y.22
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %78, %originalBB10alteredBB
  store i1 false, i1* %10, align 1, !dbg !999
  %87 = load i32, i32* @x.21
  %88 = load i32, i32* @y.22
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %95, !dbg !999

95:                                               ; preds = %originalBBpart212, %originalBBpart28
  %96 = load i1, i1* %10, align 1, !dbg !1000
  ret i1 %96, !dbg !1000

originalBBalteredBB:                              ; preds = %originalBB, %1
  %97 = alloca i1, align 1
  %98 = alloca i8*, align 8
  %99 = alloca i8, align 1
  store i8* %0, i8** %98, align 8
  call void @llvm.dbg.declare(metadata i8** %98, metadata !1001, metadata !DIExpression()), !dbg !983
  %100 = load i8*, i8** %98, align 8, !dbg !984
  %101 = getelementptr inbounds i8, i8* %100, i64 0, !dbg !984
  %102 = load i8, i8* %101, align 1, !dbg !984
  %103 = sext i8 %102 to i32, !dbg !984
  %104 = icmp eq i32 %103, 46, !dbg !986
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %40
  %105 = load i8, i8* %12, align 1, !dbg !997
  %106 = sext i8 %105 to i32, !dbg !997
  %107 = icmp eq i32 %106, 47, !dbg !997
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %60
  store i1 %61, i1* %10, align 1, !dbg !998
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %78
  store i1 false, i1* %10, align 1, !dbg !999
  br label %originalBB10
}

; Function Attrs: nounwind readonly
declare dso_local i8* @strstr(i8*, i8*) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal void @close_stdout() #4 !dbg !1015 {
  %1 = alloca i8*, align 8
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1018
  %3 = call i32 @close_stream(%struct._IO_FILE* %2), !dbg !1020
  %4 = icmp ne i32 %3, 0, !dbg !1021
  br i1 %4, label %5, label %60, !dbg !1022

5:                                                ; preds = %0
  %6 = load i8, i8* @ignore_EPIPE, align 1, !dbg !1023
  %7 = trunc i8 %6 to i1, !dbg !1023
  br i1 %7, label %8, label %12, !dbg !1024

8:                                                ; preds = %5
  %9 = call i32* @__errno_location() #15, !dbg !1025
  %10 = load i32, i32* %9, align 4, !dbg !1025
  %11 = icmp eq i32 %10, 32, !dbg !1026
  br i1 %11, label %60, label %12, !dbg !1027

12:                                               ; preds = %8, %5
  call void @llvm.dbg.declare(metadata i8** %1, metadata !1028, metadata !DIExpression()), !dbg !1030
  %13 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.51, i64 0, i64 0)) #10, !dbg !1031
  store i8* %13, i8** %1, align 8, !dbg !1030
  %14 = load i8*, i8** @file_name, align 8, !dbg !1032
  %15 = icmp ne i8* %14, null, !dbg !1032
  br i1 %15, label %16, label %38, !dbg !1034

16:                                               ; preds = %12
  %17 = load i32, i32* @x.23
  %18 = load i32, i32* @y.24
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %16, %originalBBalteredBB
  %25 = call i32* @__errno_location() #15, !dbg !1035
  %26 = load i32, i32* %25, align 4, !dbg !1035
  %27 = load i8*, i8** @file_name, align 8, !dbg !1036
  %28 = call i8* @quotearg_colon(i8* %27), !dbg !1037
  %29 = load i8*, i8** %1, align 8, !dbg !1038
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %26, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.52, i64 0, i64 0), i8* %28, i8* %29), !dbg !1039
  %30 = load i32, i32* @x.23
  %31 = load i32, i32* @y.24
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %42, !dbg !1039

38:                                               ; preds = %12
  %39 = call i32* @__errno_location() #15, !dbg !1040
  %40 = load i32, i32* %39, align 4, !dbg !1040
  %41 = load i8*, i8** %1, align 8, !dbg !1041
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %40, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.53, i64 0, i64 0), i8* %41), !dbg !1042
  br label %42

42:                                               ; preds = %38, %originalBBpart2
  %43 = load i32, i32* @x.23
  %44 = load i32, i32* @y.24
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %42, %originalBB1alteredBB
  %51 = load volatile i32, i32* @exit_failure, align 4, !dbg !1043
  call void @_exit(i32 %51) #14, !dbg !1044
  %52 = load i32, i32* @x.23
  %53 = load i32, i32* @y.24
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  unreachable, !dbg !1044

60:                                               ; preds = %8, %0
  %61 = load i32, i32* @x.23
  %62 = load i32, i32* @y.24
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %60, %originalBB6alteredBB
  %69 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1045
  %70 = call i32 @close_stream(%struct._IO_FILE* %69), !dbg !1047
  %71 = icmp ne i32 %70, 0, !dbg !1048
  %72 = load i32, i32* @x.23
  %73 = load i32, i32* @y.24
  %74 = sub i32 %72, 1
  %75 = mul i32 %72, %74
  %76 = urem i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %77, %78
  br i1 %79, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %71, label %80, label %98, !dbg !1049

80:                                               ; preds = %originalBBpart28
  %81 = load i32, i32* @x.23
  %82 = load i32, i32* @y.24
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %80, %originalBB10alteredBB
  %89 = load volatile i32, i32* @exit_failure, align 4, !dbg !1050
  call void @_exit(i32 %89) #14, !dbg !1051
  %90 = load i32, i32* @x.23
  %91 = load i32, i32* @y.24
  %92 = sub i32 %90, 1
  %93 = mul i32 %90, %92
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %91, 10
  %97 = or i1 %95, %96
  br i1 %97, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  unreachable, !dbg !1051

98:                                               ; preds = %originalBBpart28
  %99 = load i32, i32* @x.23
  %100 = load i32, i32* @y.24
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %98, %originalBB14alteredBB
  %107 = load i32, i32* @x.23
  %108 = load i32, i32* @y.24
  %109 = sub i32 %107, 1
  %110 = mul i32 %107, %109
  %111 = urem i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %108, 10
  %114 = or i1 %112, %113
  br i1 %114, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  ret void, !dbg !1052

originalBBalteredBB:                              ; preds = %originalBB, %16
  %115 = call i32* @__errno_location() #15, !dbg !1035
  %116 = load i32, i32* %115, align 4, !dbg !1035
  %117 = load i8*, i8** @file_name, align 8, !dbg !1036
  %118 = call i8* @quotearg_colon(i8* %117), !dbg !1037
  %119 = load i8*, i8** %1, align 8, !dbg !1038
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %116, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.52, i64 0, i64 0), i8* %118, i8* %119), !dbg !1039
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %42
  %120 = load volatile i32, i32* @exit_failure, align 4, !dbg !1043
  call void @_exit(i32 %120) #14, !dbg !1044
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %60
  %121 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1045
  %122 = call i32 @close_stream(%struct._IO_FILE* %121), !dbg !1047
  %123 = icmp ne i32 %122, 0, !dbg !1048
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %80
  %124 = load volatile i32, i32* @exit_failure, align 4, !dbg !1050
  call void @_exit(i32 %124) #14, !dbg !1051
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %98
  br label %originalBB14
}

; Function Attrs: noreturn
declare dso_local void @_exit(i32) #9

; Function Attrs: noinline nounwind optnone uwtable
define internal void @set_program_name(i8*) #4 !dbg !1053 {
  %2 = load i32, i32* @x.25
  %3 = load i32, i32* @y.26
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !1054, metadata !DIExpression()), !dbg !1055
  call void @llvm.dbg.declare(metadata i8** %11, metadata !1056, metadata !DIExpression()), !dbg !1057
  call void @llvm.dbg.declare(metadata i8** %12, metadata !1058, metadata !DIExpression()), !dbg !1059
  %13 = load i8*, i8** %10, align 8, !dbg !1060
  %14 = icmp eq i8* %13, null, !dbg !1062
  %15 = load i32, i32* @x.25
  %16 = load i32, i32* @y.26
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %14, label %23, label %26, !dbg !1063

23:                                               ; preds = %originalBBpart2
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1064
  %25 = call i32 @fputs(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.58, i64 0, i64 0), %struct._IO_FILE* %24), !dbg !1066
  call void @abort() #12, !dbg !1067
  unreachable, !dbg !1067

26:                                               ; preds = %originalBBpart2
  %27 = load i32, i32* @x.25
  %28 = load i32, i32* @y.26
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %26, %originalBB1alteredBB
  %35 = load i8*, i8** %10, align 8, !dbg !1068
  %36 = call i8* @strrchr(i8* %35, i32 47) #13, !dbg !1069
  store i8* %36, i8** %11, align 8, !dbg !1070
  %37 = load i8*, i8** %11, align 8, !dbg !1071
  %38 = icmp ne i8* %37, null, !dbg !1072
  %39 = load i32, i32* @x.25
  %40 = load i32, i32* @y.26
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %38, label %47, label %50, !dbg !1071

47:                                               ; preds = %originalBBpart24
  %48 = load i8*, i8** %11, align 8, !dbg !1073
  %49 = getelementptr inbounds i8, i8* %48, i64 1, !dbg !1074
  br label %68, !dbg !1071

50:                                               ; preds = %originalBBpart24
  %51 = load i32, i32* @x.25
  %52 = load i32, i32* @y.26
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %50, %originalBB6alteredBB
  %59 = load i8*, i8** %10, align 8, !dbg !1075
  %60 = load i32, i32* @x.25
  %61 = load i32, i32* @y.26
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %68, !dbg !1071

68:                                               ; preds = %originalBBpart28, %47
  %69 = phi i8* [ %49, %47 ], [ %59, %originalBBpart28 ], !dbg !1071
  %70 = load i32, i32* @x.25
  %71 = load i32, i32* @y.26
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %68, %originalBB10alteredBB
  store i8* %69, i8** %12, align 8, !dbg !1076
  %78 = load i8*, i8** %12, align 8, !dbg !1077
  %79 = load i8*, i8** %10, align 8, !dbg !1079
  %80 = ptrtoint i8* %78 to i64, !dbg !1080
  %81 = ptrtoint i8* %79 to i64, !dbg !1080
  %82 = sub i64 %80, %81, !dbg !1080
  %83 = icmp sge i64 %82, 7, !dbg !1081
  %84 = load i32, i32* @x.25
  %85 = load i32, i32* @y.26
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBBpart217, label %originalBB10alteredBB

originalBBpart217:                                ; preds = %originalBB10
  br i1 %83, label %92, label %155, !dbg !1082

92:                                               ; preds = %originalBBpart217
  %93 = load i8*, i8** %12, align 8, !dbg !1083
  %94 = getelementptr inbounds i8, i8* %93, i64 -7, !dbg !1084
  %95 = call i32 @strncmp(i8* %94, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1.59, i64 0, i64 0), i64 7) #13, !dbg !1085
  %96 = icmp eq i32 %95, 0, !dbg !1086
  br i1 %96, label %97, label %155, !dbg !1087

97:                                               ; preds = %92
  %98 = load i32, i32* @x.25
  %99 = load i32, i32* @y.26
  %100 = sub i32 %98, 1
  %101 = mul i32 %98, %100
  %102 = urem i32 %101, 2
  %103 = icmp eq i32 %102, 0
  %104 = icmp slt i32 %99, 10
  %105 = or i1 %103, %104
  br i1 %105, label %originalBB19, label %originalBB19alteredBB

originalBB19:                                     ; preds = %97, %originalBB19alteredBB
  %106 = load i8*, i8** %12, align 8, !dbg !1088
  store i8* %106, i8** %10, align 8, !dbg !1090
  %107 = load i8*, i8** %12, align 8, !dbg !1091
  %108 = call i32 @strncmp(i8* %107, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.60, i64 0, i64 0), i64 3) #13, !dbg !1093
  %109 = icmp eq i32 %108, 0, !dbg !1094
  %110 = load i32, i32* @x.25
  %111 = load i32, i32* @y.26
  %112 = sub i32 %110, 1
  %113 = mul i32 %110, %112
  %114 = urem i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %115, %116
  br i1 %117, label %originalBBpart221, label %originalBB19alteredBB

originalBBpart221:                                ; preds = %originalBB19
  br i1 %109, label %118, label %138, !dbg !1095

118:                                              ; preds = %originalBBpart221
  %119 = load i32, i32* @x.25
  %120 = load i32, i32* @y.26
  %121 = sub i32 %119, 1
  %122 = mul i32 %119, %121
  %123 = urem i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %124, %125
  br i1 %126, label %originalBB23, label %originalBB23alteredBB

originalBB23:                                     ; preds = %118, %originalBB23alteredBB
  %127 = load i8*, i8** %12, align 8, !dbg !1096
  %128 = getelementptr inbounds i8, i8* %127, i64 3, !dbg !1098
  store i8* %128, i8** %10, align 8, !dbg !1099
  %129 = load i8*, i8** %10, align 8, !dbg !1100
  store i8* %129, i8** @program_invocation_short_name, align 8, !dbg !1101
  %130 = load i32, i32* @x.25
  %131 = load i32, i32* @y.26
  %132 = sub i32 %130, 1
  %133 = mul i32 %130, %132
  %134 = urem i32 %133, 2
  %135 = icmp eq i32 %134, 0
  %136 = icmp slt i32 %131, 10
  %137 = or i1 %135, %136
  br i1 %137, label %originalBBpart225, label %originalBB23alteredBB

originalBBpart225:                                ; preds = %originalBB23
  br label %138, !dbg !1102

138:                                              ; preds = %originalBBpart225, %originalBBpart221
  %139 = load i32, i32* @x.25
  %140 = load i32, i32* @y.26
  %141 = sub i32 %139, 1
  %142 = mul i32 %139, %141
  %143 = urem i32 %142, 2
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %144, %145
  br i1 %146, label %originalBB27, label %originalBB27alteredBB

originalBB27:                                     ; preds = %138, %originalBB27alteredBB
  %147 = load i32, i32* @x.25
  %148 = load i32, i32* @y.26
  %149 = sub i32 %147, 1
  %150 = mul i32 %147, %149
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %152, %153
  br i1 %154, label %originalBBpart229, label %originalBB27alteredBB

originalBBpart229:                                ; preds = %originalBB27
  br label %155, !dbg !1103

155:                                              ; preds = %originalBBpart229, %92, %originalBBpart217
  %156 = load i8*, i8** %10, align 8, !dbg !1104
  store i8* %156, i8** @program_name, align 8, !dbg !1105
  %157 = load i8*, i8** %10, align 8, !dbg !1106
  store i8* %157, i8** @program_invocation_name, align 8, !dbg !1107
  ret void, !dbg !1108

originalBBalteredBB:                              ; preds = %originalBB, %1
  %158 = alloca i8*, align 8
  %159 = alloca i8*, align 8
  %160 = alloca i8*, align 8
  store i8* %0, i8** %158, align 8
  call void @llvm.dbg.declare(metadata i8** %158, metadata !1109, metadata !DIExpression()), !dbg !1055
  call void @llvm.dbg.declare(metadata i8** %159, metadata !1115, metadata !DIExpression()), !dbg !1057
  call void @llvm.dbg.declare(metadata i8** %160, metadata !1116, metadata !DIExpression()), !dbg !1059
  %161 = load i8*, i8** %158, align 8, !dbg !1060
  %162 = icmp eq i8* %161, null, !dbg !1062
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %26
  %163 = load i8*, i8** %10, align 8, !dbg !1068
  %164 = call i8* @strrchr(i8* %163, i32 47) #13, !dbg !1069
  store i8* %164, i8** %11, align 8, !dbg !1070
  %165 = load i8*, i8** %11, align 8, !dbg !1071
  %166 = icmp ne i8* %165, null, !dbg !1072
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %50
  %167 = load i8*, i8** %10, align 8, !dbg !1075
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %68
  store i8* %69, i8** %12, align 8, !dbg !1076
  %168 = load i8*, i8** %12, align 8, !dbg !1077
  %169 = load i8*, i8** %10, align 8, !dbg !1079
  %170 = ptrtoint i8* %168 to i64, !dbg !1080
  %171 = ptrtoint i8* %169 to i64, !dbg !1080
  %_ = sub i64 0, %170
  %gen = add i64 %_, %171
  %_11 = sub i64 %170, %171
  %gen12 = mul i64 %_11, %171
  %_13 = sub i64 0, %170
  %gen14 = add i64 %_13, %171
  %_15 = shl i64 %170, %171
  %172 = sub i64 %170, %171, !dbg !1080
  %173 = icmp sge i64 %172, 7, !dbg !1081
  br label %originalBB10

originalBB19alteredBB:                            ; preds = %originalBB19, %97
  %174 = load i8*, i8** %12, align 8, !dbg !1088
  store i8* %174, i8** %10, align 8, !dbg !1090
  %175 = load i8*, i8** %12, align 8, !dbg !1091
  %176 = call i32 @strncmp(i8* %175, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.60, i64 0, i64 0), i64 3) #13, !dbg !1093
  %177 = icmp eq i32 %176, 0, !dbg !1094
  br label %originalBB19

originalBB23alteredBB:                            ; preds = %originalBB23, %118
  %178 = load i8*, i8** %12, align 8, !dbg !1096
  %179 = getelementptr inbounds i8, i8* %178, i64 3, !dbg !1098
  store i8* %179, i8** %10, align 8, !dbg !1099
  %180 = load i8*, i8** %10, align 8, !dbg !1100
  store i8* %180, i8** @program_invocation_short_name, align 8, !dbg !1101
  br label %originalBB23

originalBB27alteredBB:                            ; preds = %originalBB27, %138
  br label %originalBB27
}

declare dso_local i32 @fputs(i8*, %struct._IO_FILE*) #3

; Function Attrs: noreturn nounwind
declare dso_local void @abort() #5

; Function Attrs: nounwind readonly
declare dso_local i8* @strrchr(i8*, i32) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @set_char_quoting(%struct.quoting_options*, i8 signext, i32) #4 !dbg !1117 {
  %4 = load i32, i32* @x.27
  %5 = load i32, i32* @y.28
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca %struct.quoting_options*, align 8
  %13 = alloca i8, align 1
  %14 = alloca i32, align 4
  %15 = alloca i8, align 1
  %16 = alloca i32*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  store %struct.quoting_options* %0, %struct.quoting_options** %12, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %12, metadata !1121, metadata !DIExpression()), !dbg !1122
  store i8 %1, i8* %13, align 1
  call void @llvm.dbg.declare(metadata i8* %13, metadata !1123, metadata !DIExpression()), !dbg !1124
  store i32 %2, i32* %14, align 4
  call void @llvm.dbg.declare(metadata i32* %14, metadata !1125, metadata !DIExpression()), !dbg !1126
  call void @llvm.dbg.declare(metadata i8* %15, metadata !1127, metadata !DIExpression()), !dbg !1128
  %19 = load i8, i8* %13, align 1, !dbg !1129
  store i8 %19, i8* %15, align 1, !dbg !1128
  call void @llvm.dbg.declare(metadata i32** %16, metadata !1130, metadata !DIExpression()), !dbg !1132
  %20 = load %struct.quoting_options*, %struct.quoting_options** %12, align 8, !dbg !1133
  %21 = icmp ne %struct.quoting_options* %20, null, !dbg !1133
  %22 = load i32, i32* @x.27
  %23 = load i32, i32* @y.28
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %21, label %30, label %32, !dbg !1133

30:                                               ; preds = %originalBBpart2
  %31 = load %struct.quoting_options*, %struct.quoting_options** %12, align 8, !dbg !1134
  br label %49, !dbg !1133

32:                                               ; preds = %originalBBpart2
  %33 = load i32, i32* @x.27
  %34 = load i32, i32* @y.28
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %32, %originalBB1alteredBB
  %41 = load i32, i32* @x.27
  %42 = load i32, i32* @y.28
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %49, !dbg !1133

49:                                               ; preds = %originalBBpart24, %30
  %50 = phi %struct.quoting_options* [ %31, %30 ], [ @default_quoting_options, %originalBBpart24 ], !dbg !1133
  %51 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %50, i32 0, i32 2, !dbg !1135
  %52 = getelementptr inbounds [8 x i32], [8 x i32]* %51, i64 0, i64 0, !dbg !1136
  %53 = load i8, i8* %15, align 1, !dbg !1137
  %54 = zext i8 %53 to i64, !dbg !1137
  %55 = udiv i64 %54, 32, !dbg !1138
  %56 = getelementptr inbounds i32, i32* %52, i64 %55, !dbg !1139
  store i32* %56, i32** %16, align 8, !dbg !1132
  call void @llvm.dbg.declare(metadata i32* %17, metadata !1140, metadata !DIExpression()), !dbg !1141
  %57 = load i8, i8* %15, align 1, !dbg !1142
  %58 = zext i8 %57 to i64, !dbg !1142
  %59 = urem i64 %58, 32, !dbg !1143
  %60 = trunc i64 %59 to i32, !dbg !1142
  store i32 %60, i32* %17, align 4, !dbg !1141
  call void @llvm.dbg.declare(metadata i32* %18, metadata !1144, metadata !DIExpression()), !dbg !1145
  %61 = load i32*, i32** %16, align 8, !dbg !1146
  %62 = load i32, i32* %61, align 4, !dbg !1147
  %63 = load i32, i32* %17, align 4, !dbg !1148
  %64 = lshr i32 %62, %63, !dbg !1149
  %65 = and i32 %64, 1, !dbg !1150
  store i32 %65, i32* %18, align 4, !dbg !1145
  %66 = load i32, i32* %14, align 4, !dbg !1151
  %67 = and i32 %66, 1, !dbg !1152
  %68 = load i32, i32* %18, align 4, !dbg !1153
  %69 = xor i32 %67, %68, !dbg !1154
  %70 = load i32, i32* %17, align 4, !dbg !1155
  %71 = shl i32 %69, %70, !dbg !1156
  %72 = load i32*, i32** %16, align 8, !dbg !1157
  %73 = load i32, i32* %72, align 4, !dbg !1158
  %74 = xor i32 %73, %71, !dbg !1158
  store i32 %74, i32* %72, align 4, !dbg !1158
  %75 = load i32, i32* %18, align 4, !dbg !1159
  ret i32 %75, !dbg !1160

originalBBalteredBB:                              ; preds = %originalBB, %3
  %76 = alloca %struct.quoting_options*, align 8
  %77 = alloca i8, align 1
  %78 = alloca i32, align 4
  %79 = alloca i8, align 1
  %80 = alloca i32*, align 8
  %81 = alloca i32, align 4
  %82 = alloca i32, align 4
  store %struct.quoting_options* %0, %struct.quoting_options** %76, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %76, metadata !1161, metadata !DIExpression()), !dbg !1122
  store i8 %1, i8* %77, align 1
  call void @llvm.dbg.declare(metadata i8* %77, metadata !1196, metadata !DIExpression()), !dbg !1124
  store i32 %2, i32* %78, align 4
  call void @llvm.dbg.declare(metadata i32* %78, metadata !1197, metadata !DIExpression()), !dbg !1126
  call void @llvm.dbg.declare(metadata i8* %79, metadata !1198, metadata !DIExpression()), !dbg !1128
  %83 = load i8, i8* %77, align 1, !dbg !1129
  store i8 %83, i8* %79, align 1, !dbg !1128
  call void @llvm.dbg.declare(metadata i32** %80, metadata !1199, metadata !DIExpression()), !dbg !1132
  %84 = load %struct.quoting_options*, %struct.quoting_options** %76, align 8, !dbg !1133
  %85 = icmp ne %struct.quoting_options* %84, null, !dbg !1133
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %32
  br label %originalBB1
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_n_style(i32, i32, i8*) #4 !dbg !1200 {
  %4 = load i32, i32* @x.29
  %5 = load i32, i32* @y.30
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca %struct.quoting_options, align 8
  store i32 %0, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !1203, metadata !DIExpression()), !dbg !1204
  store i32 %1, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !1205, metadata !DIExpression()), !dbg !1206
  store i8* %2, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !1207, metadata !DIExpression()), !dbg !1208
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %15, metadata !1209, metadata !DIExpression()), !dbg !1211
  %16 = load i32, i32* %13, align 4, !dbg !1212
  call void @quoting_options_from_style(%struct.quoting_options* sret %15, i32 %16), !dbg !1213
  %17 = load i32, i32* %12, align 4, !dbg !1214
  %18 = load i8*, i8** %14, align 8, !dbg !1215
  %19 = call i8* @quotearg_n_options(i32 %17, i8* %18, i64 -1, %struct.quoting_options* %15), !dbg !1216
  %20 = load i32, i32* @x.29
  %21 = load i32, i32* @y.30
  %22 = sub i32 %20, 1
  %23 = mul i32 %20, %22
  %24 = urem i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = icmp slt i32 %21, 10
  %27 = or i1 %25, %26
  br i1 %27, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %19, !dbg !1217

originalBBalteredBB:                              ; preds = %originalBB, %3
  %28 = alloca i32, align 4
  %29 = alloca i32, align 4
  %30 = alloca i8*, align 8
  %31 = alloca %struct.quoting_options, align 8
  store i32 %0, i32* %28, align 4
  call void @llvm.dbg.declare(metadata i32* %28, metadata !1218, metadata !DIExpression()), !dbg !1204
  store i32 %1, i32* %29, align 4
  call void @llvm.dbg.declare(metadata i32* %29, metadata !1250, metadata !DIExpression()), !dbg !1206
  store i8* %2, i8** %30, align 8
  call void @llvm.dbg.declare(metadata i8** %30, metadata !1251, metadata !DIExpression()), !dbg !1208
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %31, metadata !1252, metadata !DIExpression()), !dbg !1211
  %32 = load i32, i32* %29, align 4, !dbg !1212
  call void @quoting_options_from_style(%struct.quoting_options* sret %31, i32 %32), !dbg !1213
  %33 = load i32, i32* %28, align 4, !dbg !1214
  %34 = load i8*, i8** %30, align 8, !dbg !1215
  %35 = call i8* @quotearg_n_options(i32 %33, i8* %34, i64 -1, %struct.quoting_options* %31), !dbg !1216
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @quoting_options_from_style(%struct.quoting_options* noalias sret, i32) #4 !dbg !1254 {
  %3 = load i32, i32* @x.31
  %4 = load i32, i32* @y.32
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32, align 4
  store i32 %1, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !1257, metadata !DIExpression()), !dbg !1258
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %0, metadata !1259, metadata !DIExpression()), !dbg !1260
  %12 = bitcast %struct.quoting_options* %0 to i8*, !dbg !1260
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 56, i1 false), !dbg !1260
  %13 = load i32, i32* %11, align 4, !dbg !1261
  %14 = icmp eq i32 %13, 10, !dbg !1263
  %15 = load i32, i32* @x.31
  %16 = load i32, i32* @y.32
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %14, label %23, label %40, !dbg !1264

23:                                               ; preds = %originalBBpart2
  %24 = load i32, i32* @x.31
  %25 = load i32, i32* @y.32
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %23, %originalBB1alteredBB
  call void @abort() #12, !dbg !1265
  %32 = load i32, i32* @x.31
  %33 = load i32, i32* @y.32
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  unreachable, !dbg !1265

40:                                               ; preds = %originalBBpart2
  %41 = load i32, i32* @x.31
  %42 = load i32, i32* @y.32
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %40, %originalBB6alteredBB
  %49 = load i32, i32* %11, align 4, !dbg !1266
  %50 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %0, i32 0, i32 0, !dbg !1267
  store i32 %49, i32* %50, align 8, !dbg !1268
  %51 = load i32, i32* @x.31
  %52 = load i32, i32* @y.32
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  ret void, !dbg !1269

originalBBalteredBB:                              ; preds = %originalBB, %2
  %59 = alloca i32, align 4
  store i32 %1, i32* %59, align 4
  call void @llvm.dbg.declare(metadata i32* %59, metadata !1270, metadata !DIExpression()), !dbg !1258
  call void @llvm.dbg.declare(metadata !4, metadata !1304, metadata !DIExpression()), !dbg !1260
  %60 = bitcast %struct.quoting_options* %0 to i8*, !dbg !1260
  call void @llvm.memset.p0i8.i64(i8* align 8 %60, i8 0, i64 56, i1 false), !dbg !1260
  %61 = load i32, i32* %59, align 4, !dbg !1261
  %62 = icmp eq i32 %61, 10, !dbg !1263
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %23
  call void @abort() #12, !dbg !1265
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %40
  %63 = load i32, i32* %11, align 4, !dbg !1266
  %64 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %0, i32 0, i32 0, !dbg !1267
  store i32 %63, i32* %64, align 8, !dbg !1268
  br label %originalBB6
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_n_options(i32, i8*, i64, %struct.quoting_options*) #4 !dbg !1305 {
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %struct.quoting_options*, align 8
  %9 = alloca i32, align 4
  %10 = alloca %struct.slotvec*, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  %13 = alloca i64, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i32, align 4
  %16 = alloca i64, align 8
  store i32 %0, i32* %5, align 4
  call void @llvm.dbg.declare(metadata i32* %5, metadata !1309, metadata !DIExpression()), !dbg !1310
  store i8* %1, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !1311, metadata !DIExpression()), !dbg !1312
  store i64 %2, i64* %7, align 8
  call void @llvm.dbg.declare(metadata i64* %7, metadata !1313, metadata !DIExpression()), !dbg !1314
  store %struct.quoting_options* %3, %struct.quoting_options** %8, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %8, metadata !1315, metadata !DIExpression()), !dbg !1316
  call void @llvm.dbg.declare(metadata i32* %9, metadata !1317, metadata !DIExpression()), !dbg !1318
  %17 = call i32* @__errno_location() #15, !dbg !1319
  %18 = load i32, i32* %17, align 4, !dbg !1319
  store i32 %18, i32* %9, align 4, !dbg !1318
  call void @llvm.dbg.declare(metadata %struct.slotvec** %10, metadata !1320, metadata !DIExpression()), !dbg !1321
  %19 = load %struct.slotvec*, %struct.slotvec** @slotvec, align 8, !dbg !1322
  store %struct.slotvec* %19, %struct.slotvec** %10, align 8, !dbg !1321
  %20 = load i32, i32* %5, align 4, !dbg !1323
  %21 = icmp slt i32 %20, 0, !dbg !1325
  br i1 %21, label %22, label %23, !dbg !1326

22:                                               ; preds = %4
  call void @abort() #12, !dbg !1327
  unreachable, !dbg !1327

23:                                               ; preds = %4
  %24 = load i32, i32* @x.33
  %25 = load i32, i32* @y.34
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %23, %originalBBalteredBB
  %32 = load i32, i32* @nslots, align 4, !dbg !1328
  %33 = mul i32 %32, 4
  %34 = add i32 %33, 5
  %35 = mul i32 %34, %34
  %36 = sub i32 %35, %34
  %37 = srem i32 %36, 2
  %38 = add i32 %37, 1
  %39 = icmp eq i32 %38, 1
  %40 = load i32, i32* @x.33
  %41 = load i32, i32* @y.34
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %39, label %49, label %48

48:                                               ; preds = %originalBBpart2
  ret i8* null

49:                                               ; preds = %originalBBpart2
  %50 = load i32, i32* @x.33
  %51 = load i32, i32* @y.34
  %52 = sub i32 %50, 1
  %53 = mul i32 %50, %52
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %55, %56
  br i1 %57, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %49, %originalBB26alteredBB
  %58 = load i32, i32* %5, align 4, !dbg !1330
  %59 = icmp sle i32 %32, %58, !dbg !1331
  %60 = load i32, i32* @x.33
  %61 = load i32, i32* @y.34
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %59, label %68, label %222, !dbg !1332

68:                                               ; preds = %originalBBpart228
  call void @llvm.dbg.declare(metadata i8* %11, metadata !1333, metadata !DIExpression()), !dbg !1335
  %69 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1336
  %70 = icmp eq %struct.slotvec* %69, @slotvec0, !dbg !1337
  %71 = zext i1 %70 to i8, !dbg !1335
  store i8 %71, i8* %11, align 1, !dbg !1335
  call void @llvm.dbg.declare(metadata i32* %12, metadata !1338, metadata !DIExpression()), !dbg !1339
  store i32 2147483646, i32* %12, align 4, !dbg !1339
  %72 = load i32, i32* %12, align 4, !dbg !1340
  %73 = load i32, i32* %5, align 4, !dbg !1342
  %74 = icmp slt i32 %72, %73, !dbg !1343
  br i1 %74, label %75, label %76, !dbg !1344

75:                                               ; preds = %68
  call void @xalloc_die() #14, !dbg !1345
  unreachable, !dbg !1345

76:                                               ; preds = %68
  %77 = load i32, i32* @x.33
  %78 = load i32, i32* @y.34
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %76, %originalBB30alteredBB
  %85 = load i8, i8* %11, align 1, !dbg !1346
  %86 = trunc i8 %85 to i1, !dbg !1346
  %87 = load i32, i32* @x.33
  %88 = load i32, i32* @y.34
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br i1 %86, label %95, label %112, !dbg !1346

95:                                               ; preds = %originalBBpart232
  %96 = load i32, i32* @x.33
  %97 = load i32, i32* @y.34
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %95, %originalBB34alteredBB
  %104 = load i32, i32* @x.33
  %105 = load i32, i32* @y.34
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %114, !dbg !1346

112:                                              ; preds = %originalBBpart232
  %113 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1347
  br label %114, !dbg !1346

114:                                              ; preds = %112, %originalBBpart236
  %115 = phi %struct.slotvec* [ null, %originalBBpart236 ], [ %113, %112 ], !dbg !1346
  %116 = bitcast %struct.slotvec* %115 to i8*, !dbg !1346
  %117 = load i32, i32* %5, align 4, !dbg !1348
  %118 = add nsw i32 %117, 1, !dbg !1349
  %119 = sext i32 %118 to i64, !dbg !1350
  %120 = mul i64 %119, 16, !dbg !1351
  %121 = trunc i64 16 to i32
  %122 = add i32 %121, 5
  %123 = trunc i64 16 to i32
  %124 = mul i32 %123, -2
  %125 = add i32 %124, -4
  %126 = mul i32 %122, %122
  %127 = mul i32 %125, %125
  %128 = add i32 %126, %127
  %129 = mul i32 %122, %125
  %130 = mul i32 %129, 2
  %131 = sub i32 %128, %130
  %132 = mul i32 %131, 5
  %133 = add i32 %132, 2
  %134 = icmp eq i32 %133, -3
  br i1 %134, label %135, label %152

135:                                              ; preds = %114
  %136 = load i32, i32* @x.33
  %137 = load i32, i32* @y.34
  %138 = sub i32 %136, 1
  %139 = mul i32 %136, %138
  %140 = urem i32 %139, 2
  %141 = icmp eq i32 %140, 0
  %142 = icmp slt i32 %137, 10
  %143 = or i1 %141, %142
  br i1 %143, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %135, %originalBB38alteredBB
  %144 = load i32, i32* @x.33
  %145 = load i32, i32* @y.34
  %146 = sub i32 %144, 1
  %147 = mul i32 %144, %146
  %148 = urem i32 %147, 2
  %149 = icmp eq i32 %148, 0
  %150 = icmp slt i32 %145, 10
  %151 = or i1 %149, %150
  br i1 %151, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  ret i8* null

152:                                              ; preds = %114
  %153 = load i32, i32* @x.33
  %154 = load i32, i32* @y.34
  %155 = sub i32 %153, 1
  %156 = mul i32 %153, %155
  %157 = urem i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = icmp slt i32 %154, 10
  %160 = or i1 %158, %159
  br i1 %160, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %152, %originalBB42alteredBB
  %161 = call i8* @xrealloc(i8* %116, i64 %120), !dbg !1352
  %162 = bitcast i8* %161 to %struct.slotvec*, !dbg !1352
  store %struct.slotvec* %162, %struct.slotvec** %10, align 8, !dbg !1353
  store %struct.slotvec* %162, %struct.slotvec** @slotvec, align 8, !dbg !1354
  %163 = load i8, i8* %11, align 1, !dbg !1355
  %164 = trunc i8 %163 to i1, !dbg !1355
  %165 = load i32, i32* @x.33
  %166 = load i32, i32* @y.34
  %167 = sub i32 %165, 1
  %168 = mul i32 %165, %167
  %169 = urem i32 %168, 2
  %170 = icmp eq i32 %169, 0
  %171 = icmp slt i32 %166, 10
  %172 = or i1 %170, %171
  br i1 %172, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br i1 %164, label %173, label %192, !dbg !1357

173:                                              ; preds = %originalBBpart244
  %174 = load i32, i32* @x.33
  %175 = load i32, i32* @y.34
  %176 = sub i32 %174, 1
  %177 = mul i32 %174, %176
  %178 = urem i32 %177, 2
  %179 = icmp eq i32 %178, 0
  %180 = icmp slt i32 %175, 10
  %181 = or i1 %179, %180
  br i1 %181, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %173, %originalBB46alteredBB
  %182 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1358
  %183 = bitcast %struct.slotvec* %182 to i8*, !dbg !1359
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %183, i8* align 8 bitcast (%struct.slotvec* @slotvec0 to i8*), i64 16, i1 false), !dbg !1359
  %184 = load i32, i32* @x.33
  %185 = load i32, i32* @y.34
  %186 = sub i32 %184, 1
  %187 = mul i32 %184, %186
  %188 = urem i32 %187, 2
  %189 = icmp eq i32 %188, 0
  %190 = icmp slt i32 %185, 10
  %191 = or i1 %189, %190
  br i1 %191, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br label %192, !dbg !1360

192:                                              ; preds = %originalBBpart248, %originalBBpart244
  %193 = load i32, i32* @x.33
  %194 = load i32, i32* @y.34
  %195 = sub i32 %193, 1
  %196 = mul i32 %193, %195
  %197 = urem i32 %196, 2
  %198 = icmp eq i32 %197, 0
  %199 = icmp slt i32 %194, 10
  %200 = or i1 %198, %199
  br i1 %200, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %192, %originalBB50alteredBB
  %201 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1361
  %202 = load i32, i32* @nslots, align 4, !dbg !1362
  %203 = sext i32 %202 to i64, !dbg !1363
  %204 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %201, i64 %203, !dbg !1363
  %205 = bitcast %struct.slotvec* %204 to i8*, !dbg !1364
  %206 = load i32, i32* %5, align 4, !dbg !1365
  %207 = add nsw i32 %206, 1, !dbg !1366
  %208 = load i32, i32* @nslots, align 4, !dbg !1367
  %209 = sub nsw i32 %207, %208, !dbg !1368
  %210 = sext i32 %209 to i64, !dbg !1369
  %211 = mul i64 %210, 16, !dbg !1370
  call void @llvm.memset.p0i8.i64(i8* align 8 %205, i8 0, i64 %211, i1 false), !dbg !1364
  %212 = load i32, i32* %5, align 4, !dbg !1371
  %213 = add nsw i32 %212, 1, !dbg !1372
  store i32 %213, i32* @nslots, align 4, !dbg !1373
  %214 = load i32, i32* @x.33
  %215 = load i32, i32* @y.34
  %216 = sub i32 %214, 1
  %217 = mul i32 %214, %216
  %218 = urem i32 %217, 2
  %219 = icmp eq i32 %218, 0
  %220 = icmp slt i32 %215, 10
  %221 = or i1 %219, %220
  br i1 %221, label %originalBBpart285, label %originalBB50alteredBB

originalBBpart285:                                ; preds = %originalBB50
  br label %222, !dbg !1374

222:                                              ; preds = %originalBBpart285, %originalBBpart228
  call void @llvm.dbg.declare(metadata i64* %13, metadata !1375, metadata !DIExpression()), !dbg !1377
  %223 = load i32, i32* @x.33
  %224 = load i32, i32* @y.34
  %225 = sub i32 %223, 1
  %226 = mul i32 %223, %225
  %227 = urem i32 %226, 2
  %228 = icmp eq i32 %227, 0
  %229 = icmp slt i32 %224, 10
  %230 = or i1 %228, %229
  br i1 %230, label %originalBB87, label %originalBB87alteredBB

originalBB87:                                     ; preds = %222, %originalBB87alteredBB
  %231 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1378
  %232 = load i32, i32* %5, align 4, !dbg !1379
  %233 = sext i32 %232 to i64, !dbg !1378
  %234 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %231, i64 %233, !dbg !1378
  %235 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %234, i32 0, i32 0, !dbg !1380
  %236 = load i64, i64* %235, align 8, !dbg !1380
  store i64 %236, i64* %13, align 8, !dbg !1377
  call void @llvm.dbg.declare(metadata i8** %14, metadata !1381, metadata !DIExpression()), !dbg !1382
  %237 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1383
  %238 = load i32, i32* %5, align 4, !dbg !1384
  %239 = sext i32 %238 to i64, !dbg !1383
  %240 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %237, i64 %239, !dbg !1383
  %241 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %240, i32 0, i32 1, !dbg !1385
  %242 = load i8*, i8** %241, align 8, !dbg !1385
  store i8* %242, i8** %14, align 8, !dbg !1382
  call void @llvm.dbg.declare(metadata i32* %15, metadata !1386, metadata !DIExpression()), !dbg !1387
  %243 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1388
  %244 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %243, i32 0, i32 1, !dbg !1389
  %245 = load i32, i32* %244, align 4, !dbg !1389
  %246 = or i32 %245, 1, !dbg !1390
  store i32 %246, i32* %15, align 4, !dbg !1387
  call void @llvm.dbg.declare(metadata i64* %16, metadata !1391, metadata !DIExpression()), !dbg !1392
  %247 = load i8*, i8** %14, align 8, !dbg !1393
  %248 = load i64, i64* %13, align 8, !dbg !1394
  %249 = load i8*, i8** %6, align 8, !dbg !1395
  %250 = load i64, i64* %7, align 8, !dbg !1396
  %251 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1397
  %252 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %251, i32 0, i32 0, !dbg !1398
  %253 = load i32, i32* %252, align 8, !dbg !1398
  %254 = load i32, i32* %15, align 4, !dbg !1399
  %255 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1400
  %256 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %255, i32 0, i32 2, !dbg !1401
  %257 = getelementptr inbounds [8 x i32], [8 x i32]* %256, i64 0, i64 0, !dbg !1400
  %258 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1402
  %259 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %258, i32 0, i32 3, !dbg !1403
  %260 = load i8*, i8** %259, align 8, !dbg !1403
  %261 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1404
  %262 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %261, i32 0, i32 4, !dbg !1405
  %263 = load i8*, i8** %262, align 8, !dbg !1405
  %264 = call i64 @quotearg_buffer_restyled(i8* %247, i64 %248, i8* %249, i64 %250, i32 %253, i32 %254, i32* %257, i8* %260, i8* %263), !dbg !1406
  store i64 %264, i64* %16, align 8, !dbg !1392
  %265 = load i64, i64* %13, align 8, !dbg !1407
  %266 = load i64, i64* %16, align 8, !dbg !1409
  %267 = icmp ule i64 %265, %266, !dbg !1410
  %268 = load i32, i32* @x.33
  %269 = load i32, i32* @y.34
  %270 = sub i32 %268, 1
  %271 = mul i32 %268, %270
  %272 = urem i32 %271, 2
  %273 = icmp eq i32 %272, 0
  %274 = icmp slt i32 %269, 10
  %275 = or i1 %273, %274
  br i1 %275, label %originalBBpart2100, label %originalBB87alteredBB

originalBBpart2100:                               ; preds = %originalBB87
  br i1 %267, label %276, label %373, !dbg !1411

276:                                              ; preds = %originalBBpart2100
  %277 = load i32, i32* @x.33
  %278 = load i32, i32* @y.34
  %279 = sub i32 %277, 1
  %280 = mul i32 %277, %279
  %281 = urem i32 %280, 2
  %282 = icmp eq i32 %281, 0
  %283 = icmp slt i32 %278, 10
  %284 = or i1 %282, %283
  br i1 %284, label %originalBB102, label %originalBB102alteredBB

originalBB102:                                    ; preds = %276, %originalBB102alteredBB
  %285 = load i64, i64* %16, align 8, !dbg !1412
  %286 = add i64 %285, 1, !dbg !1414
  store i64 %286, i64* %13, align 8, !dbg !1415
  %287 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1416
  %288 = load i32, i32* %5, align 4, !dbg !1417
  %289 = trunc i64 %286 to i32
  %290 = mul i32 %289, 4
  %291 = add i32 %290, -1
  %292 = mul i32 %291, %291
  %293 = sub i32 %292, %291
  %294 = srem i32 %293, 2
  %295 = mul i32 %294, 3
  %296 = add i32 %295, -2
  %297 = icmp ne i32 %296, -2
  %298 = load i32, i32* @x.33
  %299 = load i32, i32* @y.34
  %300 = sub i32 %298, 1
  %301 = mul i32 %298, %300
  %302 = urem i32 %301, 2
  %303 = icmp eq i32 %302, 0
  %304 = icmp slt i32 %299, 10
  %305 = or i1 %303, %304
  br i1 %305, label %originalBBpart2151, label %originalBB102alteredBB

originalBBpart2151:                               ; preds = %originalBB102
  br i1 %297, label %306, label %307

306:                                              ; preds = %originalBBpart2151
  ret i8* null

307:                                              ; preds = %originalBBpart2151
  %308 = load i32, i32* @x.33
  %309 = load i32, i32* @y.34
  %310 = sub i32 %308, 1
  %311 = mul i32 %308, %310
  %312 = urem i32 %311, 2
  %313 = icmp eq i32 %312, 0
  %314 = icmp slt i32 %309, 10
  %315 = or i1 %313, %314
  br i1 %315, label %originalBB153, label %originalBB153alteredBB

originalBB153:                                    ; preds = %307, %originalBB153alteredBB
  %316 = sext i32 %288 to i64, !dbg !1416
  %317 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %287, i64 %316, !dbg !1416
  %318 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %317, i32 0, i32 0, !dbg !1418
  store i64 %286, i64* %318, align 8, !dbg !1419
  %319 = load i8*, i8** %14, align 8, !dbg !1420
  %320 = icmp ne i8* %319, getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0), !dbg !1422
  %321 = load i32, i32* @x.33
  %322 = load i32, i32* @y.34
  %323 = sub i32 %321, 1
  %324 = mul i32 %321, %323
  %325 = urem i32 %324, 2
  %326 = icmp eq i32 %325, 0
  %327 = icmp slt i32 %322, 10
  %328 = or i1 %326, %327
  br i1 %328, label %originalBBpart2155, label %originalBB153alteredBB

originalBBpart2155:                               ; preds = %originalBB153
  br i1 %320, label %329, label %331, !dbg !1423

329:                                              ; preds = %originalBBpart2155
  %330 = load i8*, i8** %14, align 8, !dbg !1424
  call void @free(i8* %330) #10, !dbg !1425
  br label %331, !dbg !1425

331:                                              ; preds = %329, %originalBBpart2155
  %332 = load i32, i32* @x.33
  %333 = load i32, i32* @y.34
  %334 = sub i32 %332, 1
  %335 = mul i32 %332, %334
  %336 = urem i32 %335, 2
  %337 = icmp eq i32 %336, 0
  %338 = icmp slt i32 %333, 10
  %339 = or i1 %337, %338
  br i1 %339, label %originalBB157, label %originalBB157alteredBB

originalBB157:                                    ; preds = %331, %originalBB157alteredBB
  %340 = load i64, i64* %13, align 8, !dbg !1426
  %341 = call noalias i8* @xcharalloc(i64 %340), !dbg !1427
  store i8* %341, i8** %14, align 8, !dbg !1428
  %342 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1429
  %343 = load i32, i32* %5, align 4, !dbg !1430
  %344 = sext i32 %343 to i64, !dbg !1429
  %345 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %342, i64 %344, !dbg !1429
  %346 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %345, i32 0, i32 1, !dbg !1431
  store i8* %341, i8** %346, align 8, !dbg !1432
  %347 = load i8*, i8** %14, align 8, !dbg !1433
  %348 = load i64, i64* %13, align 8, !dbg !1434
  %349 = load i8*, i8** %6, align 8, !dbg !1435
  %350 = load i64, i64* %7, align 8, !dbg !1436
  %351 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1437
  %352 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %351, i32 0, i32 0, !dbg !1438
  %353 = load i32, i32* %352, align 8, !dbg !1438
  %354 = load i32, i32* %15, align 4, !dbg !1439
  %355 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1440
  %356 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %355, i32 0, i32 2, !dbg !1441
  %357 = getelementptr inbounds [8 x i32], [8 x i32]* %356, i64 0, i64 0, !dbg !1440
  %358 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1442
  %359 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %358, i32 0, i32 3, !dbg !1443
  %360 = load i8*, i8** %359, align 8, !dbg !1443
  %361 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1444
  %362 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %361, i32 0, i32 4, !dbg !1445
  %363 = load i8*, i8** %362, align 8, !dbg !1445
  %364 = call i64 @quotearg_buffer_restyled(i8* %347, i64 %348, i8* %349, i64 %350, i32 %353, i32 %354, i32* %357, i8* %360, i8* %363), !dbg !1446
  %365 = load i32, i32* @x.33
  %366 = load i32, i32* @y.34
  %367 = sub i32 %365, 1
  %368 = mul i32 %365, %367
  %369 = urem i32 %368, 2
  %370 = icmp eq i32 %369, 0
  %371 = icmp slt i32 %366, 10
  %372 = or i1 %370, %371
  br i1 %372, label %originalBBpart2159, label %originalBB157alteredBB

originalBBpart2159:                               ; preds = %originalBB157
  br label %373, !dbg !1447

373:                                              ; preds = %originalBBpart2159, %originalBBpart2100
  %374 = load i32, i32* @x.33
  %375 = load i32, i32* @y.34
  %376 = sub i32 %374, 1
  %377 = mul i32 %374, %376
  %378 = urem i32 %377, 2
  %379 = icmp eq i32 %378, 0
  %380 = icmp slt i32 %375, 10
  %381 = or i1 %379, %380
  br i1 %381, label %originalBB161, label %originalBB161alteredBB

originalBB161:                                    ; preds = %373, %originalBB161alteredBB
  %382 = load i32, i32* %9, align 4, !dbg !1448
  %383 = call i32* @__errno_location() #15, !dbg !1449
  store i32 %382, i32* %383, align 4, !dbg !1450
  %384 = mul i32 %382, -3
  %385 = add i32 %384, -1
  %386 = mul i32 %382, 3
  %387 = add i32 %386, -2
  %388 = mul i32 %385, %385
  %389 = mul i32 %387, %387
  %390 = mul i32 %389, 34
  %391 = sub i32 %388, %390
  %392 = add i32 %391, 4
  %393 = icmp ne i32 %392, 4
  %394 = load i32, i32* @x.33
  %395 = load i32, i32* @y.34
  %396 = sub i32 %394, 1
  %397 = mul i32 %394, %396
  %398 = urem i32 %397, 2
  %399 = icmp eq i32 %398, 0
  %400 = icmp slt i32 %395, 10
  %401 = or i1 %399, %400
  br i1 %401, label %originalBBpart2235, label %originalBB161alteredBB

originalBBpart2235:                               ; preds = %originalBB161
  br i1 %393, label %419, label %402

402:                                              ; preds = %originalBBpart2235
  %403 = load i32, i32* @x.33
  %404 = load i32, i32* @y.34
  %405 = sub i32 %403, 1
  %406 = mul i32 %403, %405
  %407 = urem i32 %406, 2
  %408 = icmp eq i32 %407, 0
  %409 = icmp slt i32 %404, 10
  %410 = or i1 %408, %409
  br i1 %410, label %originalBB237, label %originalBB237alteredBB

originalBB237:                                    ; preds = %402, %originalBB237alteredBB
  %411 = load i32, i32* @x.33
  %412 = load i32, i32* @y.34
  %413 = sub i32 %411, 1
  %414 = mul i32 %411, %413
  %415 = urem i32 %414, 2
  %416 = icmp eq i32 %415, 0
  %417 = icmp slt i32 %412, 10
  %418 = or i1 %416, %417
  br i1 %418, label %originalBBpart2239, label %originalBB237alteredBB

originalBBpart2239:                               ; preds = %originalBB237
  ret i8* null

419:                                              ; preds = %originalBBpart2235
  %420 = load i8*, i8** %14, align 8, !dbg !1451
  ret i8* %420, !dbg !1452

originalBBalteredBB:                              ; preds = %originalBB, %23
  %421 = load i32, i32* @nslots, align 4, !dbg !1328
  %_ = sub i32 0, %421
  %gen = add i32 %_, 4
  %422 = mul i32 %421, 4
  %423 = add i32 %422, 5
  %_1 = sub i32 %423, %423
  %gen2 = mul i32 %_1, %423
  %424 = mul i32 %423, %423
  %_3 = sub i32 %424, %423
  %gen4 = mul i32 %_3, %423
  %_5 = shl i32 %424, %423
  %_6 = shl i32 %424, %423
  %_7 = sub i32 %424, %423
  %gen8 = mul i32 %_7, %423
  %_9 = shl i32 %424, %423
  %_10 = shl i32 %424, %423
  %_11 = shl i32 %424, %423
  %425 = sub i32 %424, %423
  %_12 = sub i32 %425, 2
  %gen13 = mul i32 %_12, 2
  %_14 = shl i32 %425, 2
  %_15 = shl i32 %425, 2
  %_16 = sub i32 0, %425
  %gen17 = add i32 %_16, 2
  %_18 = sub i32 0, %425
  %gen19 = add i32 %_18, 2
  %426 = srem i32 %425, 2
  %_20 = sub i32 %426, 1
  %gen21 = mul i32 %_20, 1
  %_22 = shl i32 %426, 1
  %_23 = sub i32 %426, 1
  %gen24 = mul i32 %_23, 1
  %_25 = shl i32 %426, 1
  %427 = add i32 %426, 1
  %428 = icmp eq i32 %427, 1
  br label %originalBB

originalBB26alteredBB:                            ; preds = %originalBB26, %49
  %429 = load i32, i32* %5, align 4, !dbg !1330
  %430 = icmp sle i32 %32, %429, !dbg !1331
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %76
  %431 = load i8, i8* %11, align 1, !dbg !1346
  %432 = trunc i8 %431 to i1, !dbg !1346
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %95
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %135
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %152
  %433 = call i8* @xrealloc(i8* %116, i64 %120), !dbg !1352
  %434 = bitcast i8* %433 to %struct.slotvec*, !dbg !1352
  store %struct.slotvec* %434, %struct.slotvec** %10, align 8, !dbg !1353
  store %struct.slotvec* %434, %struct.slotvec** @slotvec, align 8, !dbg !1354
  %435 = load i8, i8* %11, align 1, !dbg !1355
  %436 = trunc i8 %435 to i1, !dbg !1355
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %173
  %437 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1358
  %438 = bitcast %struct.slotvec* %437 to i8*, !dbg !1359
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %438, i8* align 8 bitcast (%struct.slotvec* @slotvec0 to i8*), i64 16, i1 false), !dbg !1359
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %192
  %439 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1361
  %440 = load i32, i32* @nslots, align 4, !dbg !1362
  %441 = sext i32 %440 to i64, !dbg !1363
  %442 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %439, i64 %441, !dbg !1363
  %443 = bitcast %struct.slotvec* %442 to i8*, !dbg !1364
  %444 = load i32, i32* %5, align 4, !dbg !1365
  %_51 = sub i32 %444, 1
  %gen52 = mul i32 %_51, 1
  %_53 = shl i32 %444, 1
  %_54 = sub i32 0, %444
  %gen55 = add i32 %_54, 1
  %_56 = sub i32 0, %444
  %gen57 = add i32 %_56, 1
  %_58 = sub i32 %444, 1
  %gen59 = mul i32 %_58, 1
  %_60 = shl i32 %444, 1
  %445 = add nsw i32 %444, 1, !dbg !1366
  %446 = load i32, i32* @nslots, align 4, !dbg !1367
  %_61 = sub i32 %445, %446
  %gen62 = mul i32 %_61, %446
  %_63 = sub i32 %445, %446
  %gen64 = mul i32 %_63, %446
  %_65 = shl i32 %445, %446
  %447 = sub nsw i32 %445, %446, !dbg !1368
  %448 = sext i32 %447 to i64, !dbg !1369
  %_66 = shl i64 %448, 16
  %_67 = shl i64 %448, 16
  %_68 = sub i64 %448, 16
  %gen69 = mul i64 %_68, 16
  %_70 = sub i64 %448, 16
  %gen71 = mul i64 %_70, 16
  %_72 = sub i64 %448, 16
  %gen73 = mul i64 %_72, 16
  %449 = mul i64 %448, 16, !dbg !1370
  call void @llvm.memset.p0i8.i64(i8* align 8 %443, i8 0, i64 %449, i1 false), !dbg !1364
  %450 = load i32, i32* %5, align 4, !dbg !1371
  %_74 = sub i32 0, %450
  %gen75 = add i32 %_74, 1
  %_76 = sub i32 %450, 1
  %gen77 = mul i32 %_76, 1
  %_78 = shl i32 %450, 1
  %_79 = sub i32 0, %450
  %gen80 = add i32 %_79, 1
  %_81 = sub i32 %450, 1
  %gen82 = mul i32 %_81, 1
  %_83 = shl i32 %450, 1
  %451 = add nsw i32 %450, 1, !dbg !1372
  store i32 %451, i32* @nslots, align 4, !dbg !1373
  br label %originalBB50

originalBB87alteredBB:                            ; preds = %originalBB87, %222
  %452 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1378
  %453 = load i32, i32* %5, align 4, !dbg !1379
  %454 = sext i32 %453 to i64, !dbg !1378
  %455 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %452, i64 %454, !dbg !1378
  %456 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %455, i32 0, i32 0, !dbg !1380
  %457 = load i64, i64* %456, align 8, !dbg !1380
  store i64 %457, i64* %13, align 8, !dbg !1377
  call void @llvm.dbg.declare(metadata !4, metadata !1453, metadata !DIExpression()), !dbg !1382
  %458 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1383
  %459 = load i32, i32* %5, align 4, !dbg !1384
  %460 = sext i32 %459 to i64, !dbg !1383
  %461 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %458, i64 %460, !dbg !1383
  %462 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %461, i32 0, i32 1, !dbg !1385
  %463 = load i8*, i8** %462, align 8, !dbg !1385
  store i8* %463, i8** %14, align 8, !dbg !1382
  call void @llvm.dbg.declare(metadata !4, metadata !1490, metadata !DIExpression()), !dbg !1387
  %464 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1388
  %465 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %464, i32 0, i32 1, !dbg !1389
  %466 = load i32, i32* %465, align 4, !dbg !1389
  %_88 = shl i32 %466, 1
  %_89 = sub i32 0, %466
  %gen90 = add i32 %_89, 1
  %_91 = shl i32 %466, 1
  %_92 = sub i32 %466, 1
  %gen93 = mul i32 %_92, 1
  %_94 = sub i32 0, %466
  %gen95 = add i32 %_94, 1
  %_96 = shl i32 %466, 1
  %_97 = sub i32 %466, 1
  %gen98 = mul i32 %_97, 1
  %467 = or i32 %466, 1, !dbg !1390
  store i32 %467, i32* %15, align 4, !dbg !1387
  call void @llvm.dbg.declare(metadata !4, metadata !1491, metadata !DIExpression()), !dbg !1392
  %468 = load i8*, i8** %14, align 8, !dbg !1393
  %469 = load i64, i64* %13, align 8, !dbg !1394
  %470 = load i8*, i8** %6, align 8, !dbg !1395
  %471 = load i64, i64* %7, align 8, !dbg !1396
  %472 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1397
  %473 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %472, i32 0, i32 0, !dbg !1398
  %474 = load i32, i32* %473, align 8, !dbg !1398
  %475 = load i32, i32* %15, align 4, !dbg !1399
  %476 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1400
  %477 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %476, i32 0, i32 2, !dbg !1401
  %478 = getelementptr inbounds [8 x i32], [8 x i32]* %477, i64 0, i64 0, !dbg !1400
  %479 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1402
  %480 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %479, i32 0, i32 3, !dbg !1403
  %481 = load i8*, i8** %480, align 8, !dbg !1403
  %482 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1404
  %483 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %482, i32 0, i32 4, !dbg !1405
  %484 = load i8*, i8** %483, align 8, !dbg !1405
  %485 = call i64 @quotearg_buffer_restyled(i8* %468, i64 %469, i8* %470, i64 %471, i32 %474, i32 %475, i32* %478, i8* %481, i8* %484), !dbg !1406
  store i64 %485, i64* %16, align 8, !dbg !1392
  %486 = load i64, i64* %13, align 8, !dbg !1407
  %487 = load i64, i64* %16, align 8, !dbg !1409
  %488 = icmp ule i64 %486, %487, !dbg !1410
  br label %originalBB87

originalBB102alteredBB:                           ; preds = %originalBB102, %276
  %489 = load i64, i64* %16, align 8, !dbg !1412
  %_103 = sub i64 0, %489
  %gen104 = add i64 %_103, 1
  %_105 = sub i64 %489, 1
  %gen106 = mul i64 %_105, 1
  %_107 = sub i64 %489, 1
  %gen108 = mul i64 %_107, 1
  %_109 = shl i64 %489, 1
  %_110 = sub i64 0, %489
  %gen111 = add i64 %_110, 1
  %490 = add i64 %489, 1, !dbg !1414
  store i64 %490, i64* %13, align 8, !dbg !1415
  %491 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1416
  %492 = load i32, i32* %5, align 4, !dbg !1417
  %493 = trunc i64 %490 to i32
  %_112 = sub i32 %493, 4
  %gen113 = mul i32 %_112, 4
  %_114 = sub i32 0, %493
  %gen115 = add i32 %_114, 4
  %_116 = sub i32 %493, 4
  %gen117 = mul i32 %_116, 4
  %_118 = shl i32 %493, 4
  %494 = mul i32 %493, 4
  %_119 = shl i32 %494, -1
  %_120 = sub i32 %494, -1
  %gen121 = mul i32 %_120, -1
  %_122 = sub i32 %494, -1
  %gen123 = mul i32 %_122, -1
  %495 = add i32 %494, -1
  %_124 = shl i32 %495, %495
  %_125 = shl i32 %495, %495
  %_126 = shl i32 %495, %495
  %_127 = shl i32 %495, %495
  %_128 = sub i32 %495, %495
  %gen129 = mul i32 %_128, %495
  %_130 = sub i32 0, %495
  %gen131 = add i32 %_130, %495
  %496 = mul i32 %495, %495
  %_132 = sub i32 %496, %495
  %gen133 = mul i32 %_132, %495
  %_134 = sub i32 %496, %495
  %gen135 = mul i32 %_134, %495
  %_136 = shl i32 %496, %495
  %_137 = sub i32 0, %496
  %gen138 = add i32 %_137, %495
  %497 = sub i32 %496, %495
  %_139 = shl i32 %497, 2
  %_140 = sub i32 0, %497
  %gen141 = add i32 %_140, 2
  %498 = srem i32 %497, 2
  %_142 = shl i32 %498, 3
  %_143 = shl i32 %498, 3
  %_144 = sub i32 0, %498
  %gen145 = add i32 %_144, 3
  %_146 = sub i32 0, %498
  %gen147 = add i32 %_146, 3
  %499 = mul i32 %498, 3
  %_148 = sub i32 %499, -2
  %gen149 = mul i32 %_148, -2
  %500 = add i32 %499, -2
  %501 = icmp ne i32 %500, -2
  br label %originalBB102

originalBB153alteredBB:                           ; preds = %originalBB153, %307
  %502 = sext i32 %288 to i64, !dbg !1416
  %503 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %287, i64 %502, !dbg !1416
  %504 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %503, i32 0, i32 0, !dbg !1418
  store i64 %286, i64* %504, align 8, !dbg !1419
  %505 = load i8*, i8** %14, align 8, !dbg !1420
  %506 = icmp ne i8* %505, getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0), !dbg !1422
  br label %originalBB153

originalBB157alteredBB:                           ; preds = %originalBB157, %331
  %507 = load i64, i64* %13, align 8, !dbg !1426
  %508 = call noalias i8* @xcharalloc(i64 %507), !dbg !1427
  store i8* %508, i8** %14, align 8, !dbg !1428
  %509 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1429
  %510 = load i32, i32* %5, align 4, !dbg !1430
  %511 = sext i32 %510 to i64, !dbg !1429
  %512 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %509, i64 %511, !dbg !1429
  %513 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %512, i32 0, i32 1, !dbg !1431
  store i8* %508, i8** %513, align 8, !dbg !1432
  %514 = load i8*, i8** %14, align 8, !dbg !1433
  %515 = load i64, i64* %13, align 8, !dbg !1434
  %516 = load i8*, i8** %6, align 8, !dbg !1435
  %517 = load i64, i64* %7, align 8, !dbg !1436
  %518 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1437
  %519 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %518, i32 0, i32 0, !dbg !1438
  %520 = load i32, i32* %519, align 8, !dbg !1438
  %521 = load i32, i32* %15, align 4, !dbg !1439
  %522 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1440
  %523 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %522, i32 0, i32 2, !dbg !1441
  %524 = getelementptr inbounds [8 x i32], [8 x i32]* %523, i64 0, i64 0, !dbg !1440
  %525 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1442
  %526 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %525, i32 0, i32 3, !dbg !1443
  %527 = load i8*, i8** %526, align 8, !dbg !1443
  %528 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1444
  %529 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %528, i32 0, i32 4, !dbg !1445
  %530 = load i8*, i8** %529, align 8, !dbg !1445
  %531 = call i64 @quotearg_buffer_restyled(i8* %514, i64 %515, i8* %516, i64 %517, i32 %520, i32 %521, i32* %524, i8* %527, i8* %530), !dbg !1446
  br label %originalBB157

originalBB161alteredBB:                           ; preds = %originalBB161, %373
  %532 = load i32, i32* %9, align 4, !dbg !1448
  %533 = call i32* @__errno_location() #15, !dbg !1449
  store i32 %532, i32* %533, align 4, !dbg !1450
  %534 = mul i32 %532, -3
  %_162 = sub i32 %534, -1
  %gen163 = mul i32 %_162, -1
  %_164 = sub i32 %534, -1
  %gen165 = mul i32 %_164, -1
  %_166 = sub i32 0, %534
  %gen167 = add i32 %_166, -1
  %_168 = sub i32 0, %534
  %gen169 = add i32 %_168, -1
  %_170 = shl i32 %534, -1
  %_171 = sub i32 0, %534
  %gen172 = add i32 %_171, -1
  %535 = add i32 %534, -1
  %_173 = sub i32 %532, 3
  %gen174 = mul i32 %_173, 3
  %_175 = sub i32 0, %532
  %gen176 = add i32 %_175, 3
  %536 = mul i32 %532, 3
  %_177 = shl i32 %536, -2
  %_178 = sub i32 %536, -2
  %gen179 = mul i32 %_178, -2
  %_180 = sub i32 0, %536
  %gen181 = add i32 %_180, -2
  %_182 = sub i32 %536, -2
  %gen183 = mul i32 %_182, -2
  %_184 = sub i32 %536, -2
  %gen185 = mul i32 %_184, -2
  %_186 = sub i32 0, %536
  %gen187 = add i32 %_186, -2
  %537 = add i32 %536, -2
  %_188 = shl i32 %535, %535
  %_189 = sub i32 %535, %535
  %gen190 = mul i32 %_189, %535
  %_191 = shl i32 %535, %535
  %_192 = sub i32 %535, %535
  %gen193 = mul i32 %_192, %535
  %_194 = shl i32 %535, %535
  %_195 = sub i32 %535, %535
  %gen196 = mul i32 %_195, %535
  %538 = mul i32 %535, %535
  %_197 = sub i32 %537, %537
  %gen198 = mul i32 %_197, %537
  %_199 = sub i32 %537, %537
  %gen200 = mul i32 %_199, %537
  %_201 = sub i32 0, %537
  %gen202 = add i32 %_201, %537
  %_203 = sub i32 %537, %537
  %gen204 = mul i32 %_203, %537
  %539 = mul i32 %537, %537
  %_205 = sub i32 %539, 34
  %gen206 = mul i32 %_205, 34
  %_207 = sub i32 0, %539
  %gen208 = add i32 %_207, 34
  %_209 = shl i32 %539, 34
  %_210 = sub i32 0, %539
  %gen211 = add i32 %_210, 34
  %_212 = sub i32 0, %539
  %gen213 = add i32 %_212, 34
  %540 = mul i32 %539, 34
  %_214 = shl i32 %538, %540
  %_215 = sub i32 %538, %540
  %gen216 = mul i32 %_215, %540
  %_217 = sub i32 %538, %540
  %gen218 = mul i32 %_217, %540
  %_219 = sub i32 0, %538
  %gen220 = add i32 %_219, %540
  %_221 = sub i32 %538, %540
  %gen222 = mul i32 %_221, %540
  %541 = sub i32 %538, %540
  %_223 = shl i32 %541, 4
  %_224 = sub i32 0, %541
  %gen225 = add i32 %_224, 4
  %_226 = sub i32 0, %541
  %gen227 = add i32 %_226, 4
  %_228 = sub i32 0, %541
  %gen229 = add i32 %_228, 4
  %_230 = shl i32 %541, 4
  %_231 = shl i32 %541, 4
  %_232 = sub i32 %541, 4
  %gen233 = mul i32 %_232, 4
  %542 = add i32 %541, 4
  %543 = icmp ne i32 %542, 4
  br label %originalBB161

originalBB237alteredBB:                           ; preds = %originalBB237, %402
  br label %originalBB237
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @quotearg_buffer_restyled(i8*, i64, i8*, i64, i32, i32, i32*, i8*, i8*) #4 !dbg !1492 {
  %10 = load i32, i32* @x.35
  %11 = load i32, i32* @y.36
  %12 = sub i32 %10, 1
  %13 = mul i32 %10, %12
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  %16 = icmp slt i32 %11, 10
  %17 = or i1 %15, %16
  br i1 %17, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %9, %originalBBalteredBB
  %18 = alloca i64, align 8
  %19 = alloca i8*, align 8
  %20 = alloca i64, align 8
  %21 = alloca i8*, align 8
  %22 = alloca i64, align 8
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32*, align 8
  %26 = alloca i8*, align 8
  %27 = alloca i8*, align 8
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  %30 = alloca i64, align 8
  %31 = alloca i8*, align 8
  %32 = alloca i64, align 8
  %33 = alloca i8, align 1
  %34 = alloca i8, align 1
  %35 = alloca i8, align 1
  %36 = alloca i8, align 1
  %37 = alloca i8, align 1
  %38 = alloca i8, align 1
  %39 = alloca i8, align 1
  %40 = alloca i8, align 1
  %41 = alloca i8, align 1
  %42 = alloca i8, align 1
  %43 = alloca i8, align 1
  %44 = alloca i64, align 8
  %45 = alloca i8, align 1
  %46 = alloca %struct.__mbstate_t, align 4
  %47 = alloca i32, align 4
  %48 = alloca i64, align 8
  %49 = alloca i64, align 8
  %50 = alloca i64, align 8
  store i8* %0, i8** %19, align 8
  call void @llvm.dbg.declare(metadata i8** %19, metadata !1497, metadata !DIExpression()), !dbg !1498
  store i64 %1, i64* %20, align 8
  call void @llvm.dbg.declare(metadata i64* %20, metadata !1499, metadata !DIExpression()), !dbg !1500
  store i8* %2, i8** %21, align 8
  call void @llvm.dbg.declare(metadata i8** %21, metadata !1501, metadata !DIExpression()), !dbg !1502
  store i64 %3, i64* %22, align 8
  call void @llvm.dbg.declare(metadata i64* %22, metadata !1503, metadata !DIExpression()), !dbg !1504
  store i32 %4, i32* %23, align 4
  call void @llvm.dbg.declare(metadata i32* %23, metadata !1505, metadata !DIExpression()), !dbg !1506
  store i32 %5, i32* %24, align 4
  call void @llvm.dbg.declare(metadata i32* %24, metadata !1507, metadata !DIExpression()), !dbg !1508
  store i32* %6, i32** %25, align 8
  call void @llvm.dbg.declare(metadata i32** %25, metadata !1509, metadata !DIExpression()), !dbg !1510
  store i8* %7, i8** %26, align 8
  call void @llvm.dbg.declare(metadata i8** %26, metadata !1511, metadata !DIExpression()), !dbg !1512
  store i8* %8, i8** %27, align 8
  call void @llvm.dbg.declare(metadata i8** %27, metadata !1513, metadata !DIExpression()), !dbg !1514
  call void @llvm.dbg.declare(metadata i64* %28, metadata !1515, metadata !DIExpression()), !dbg !1516
  call void @llvm.dbg.declare(metadata i64* %29, metadata !1517, metadata !DIExpression()), !dbg !1518
  store i64 0, i64* %29, align 8, !dbg !1518
  call void @llvm.dbg.declare(metadata i64* %30, metadata !1519, metadata !DIExpression()), !dbg !1520
  store i64 0, i64* %30, align 8, !dbg !1520
  call void @llvm.dbg.declare(metadata i8** %31, metadata !1521, metadata !DIExpression()), !dbg !1522
  store i8* null, i8** %31, align 8, !dbg !1522
  call void @llvm.dbg.declare(metadata i64* %32, metadata !1523, metadata !DIExpression()), !dbg !1524
  store i64 0, i64* %32, align 8, !dbg !1524
  call void @llvm.dbg.declare(metadata i8* %33, metadata !1525, metadata !DIExpression()), !dbg !1526
  store i8 0, i8* %33, align 1, !dbg !1526
  call void @llvm.dbg.declare(metadata i8* %34, metadata !1527, metadata !DIExpression()), !dbg !1528
  %51 = call i64 @__ctype_get_mb_cur_max() #10, !dbg !1529
  %52 = icmp eq i64 %51, 1, !dbg !1530
  %53 = zext i1 %52 to i8, !dbg !1528
  store i8 %53, i8* %34, align 1, !dbg !1528
  call void @llvm.dbg.declare(metadata i8* %35, metadata !1531, metadata !DIExpression()), !dbg !1532
  %54 = load i32, i32* %24, align 4, !dbg !1533
  %55 = and i32 %54, 2, !dbg !1534
  %56 = icmp ne i32 %55, 0, !dbg !1535
  %57 = zext i1 %56 to i8, !dbg !1532
  store i8 %57, i8* %35, align 1, !dbg !1532
  call void @llvm.dbg.declare(metadata i8* %36, metadata !1536, metadata !DIExpression()), !dbg !1537
  store i8 0, i8* %36, align 1, !dbg !1537
  call void @llvm.dbg.declare(metadata i8* %37, metadata !1538, metadata !DIExpression()), !dbg !1539
  store i8 0, i8* %37, align 1, !dbg !1539
  call void @llvm.dbg.declare(metadata i8* %38, metadata !1540, metadata !DIExpression()), !dbg !1541
  store i8 1, i8* %38, align 1, !dbg !1541
  %58 = load i32, i32* @x.35
  %59 = load i32, i32* @y.36
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %66, !dbg !1542

66:                                               ; preds = %originalBBpart21096, %originalBBpart2
  call void @llvm.dbg.label(metadata !1543), !dbg !1544
  %67 = load i32, i32* @x.35
  %68 = load i32, i32* @y.36
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB8, label %originalBB8alteredBB

originalBB8:                                      ; preds = %66, %originalBB8alteredBB
  %75 = load i32, i32* %23, align 4, !dbg !1545
  %76 = load i32, i32* @x.35
  %77 = load i32, i32* @y.36
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBBpart210, label %originalBB8alteredBB

originalBBpart210:                                ; preds = %originalBB8
  switch i32 %75, label %392 [
    i32 6, label %84
    i32 5, label %101
    i32 7, label %166
    i32 8, label %183
    i32 9, label %183
    i32 10, label %183
    i32 3, label %287
    i32 1, label %288
    i32 4, label %289
    i32 2, label %310
    i32 0, label %375
  ], !dbg !1546

84:                                               ; preds = %originalBBpart210
  %85 = load i32, i32* @x.35
  %86 = load i32, i32* @y.36
  %87 = sub i32 %85, 1
  %88 = mul i32 %85, %87
  %89 = urem i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %90, %91
  br i1 %92, label %originalBB12, label %originalBB12alteredBB

originalBB12:                                     ; preds = %84, %originalBB12alteredBB
  store i32 5, i32* %23, align 4, !dbg !1547
  store i8 1, i8* %35, align 1, !dbg !1549
  %93 = load i32, i32* @x.35
  %94 = load i32, i32* @y.36
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBBpart214, label %originalBB12alteredBB

originalBBpart214:                                ; preds = %originalBB12
  br label %101, !dbg !1550

101:                                              ; preds = %originalBBpart214, %originalBBpart210
  %102 = load i8, i8* %35, align 1, !dbg !1551
  %103 = trunc i8 %102 to i1, !dbg !1551
  br i1 %103, label %149, label %104, !dbg !1553

104:                                              ; preds = %101
  br label %105, !dbg !1554

105:                                              ; preds = %104
  %106 = load i32, i32* @x.35
  %107 = load i32, i32* @y.36
  %108 = sub i32 %106, 1
  %109 = mul i32 %106, %108
  %110 = urem i32 %109, 2
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %111, %112
  br i1 %113, label %originalBB16, label %originalBB16alteredBB

originalBB16:                                     ; preds = %105, %originalBB16alteredBB
  %114 = load i64, i64* %29, align 8, !dbg !1555
  %115 = load i64, i64* %20, align 8, !dbg !1555
  %116 = icmp ult i64 %114, %115, !dbg !1555
  %117 = load i32, i32* @x.35
  %118 = load i32, i32* @y.36
  %119 = sub i32 %117, 1
  %120 = mul i32 %117, %119
  %121 = urem i32 %120, 2
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %122, %123
  br i1 %124, label %originalBBpart218, label %originalBB16alteredBB

originalBBpart218:                                ; preds = %originalBB16
  br i1 %116, label %125, label %129, !dbg !1558

125:                                              ; preds = %originalBBpart218
  %126 = load i8*, i8** %19, align 8, !dbg !1555
  %127 = load i64, i64* %29, align 8, !dbg !1555
  %128 = getelementptr inbounds i8, i8* %126, i64 %127, !dbg !1555
  store i8 34, i8* %128, align 1, !dbg !1555
  br label %129, !dbg !1555

129:                                              ; preds = %125, %originalBBpart218
  %130 = load i32, i32* @x.35
  %131 = load i32, i32* @y.36
  %132 = sub i32 %130, 1
  %133 = mul i32 %130, %132
  %134 = urem i32 %133, 2
  %135 = icmp eq i32 %134, 0
  %136 = icmp slt i32 %131, 10
  %137 = or i1 %135, %136
  br i1 %137, label %originalBB20, label %originalBB20alteredBB

originalBB20:                                     ; preds = %129, %originalBB20alteredBB
  %138 = load i64, i64* %29, align 8, !dbg !1558
  %139 = add i64 %138, 1, !dbg !1558
  store i64 %139, i64* %29, align 8, !dbg !1558
  %140 = load i32, i32* @x.35
  %141 = load i32, i32* @y.36
  %142 = sub i32 %140, 1
  %143 = mul i32 %140, %142
  %144 = urem i32 %143, 2
  %145 = icmp eq i32 %144, 0
  %146 = icmp slt i32 %141, 10
  %147 = or i1 %145, %146
  br i1 %147, label %originalBBpart222, label %originalBB20alteredBB

originalBBpart222:                                ; preds = %originalBB20
  br label %148, !dbg !1558

148:                                              ; preds = %originalBBpart222
  br label %149, !dbg !1558

149:                                              ; preds = %148, %101
  %150 = load i32, i32* @x.35
  %151 = load i32, i32* @y.36
  %152 = sub i32 %150, 1
  %153 = mul i32 %150, %152
  %154 = urem i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %155, %156
  br i1 %157, label %originalBB24, label %originalBB24alteredBB

originalBB24:                                     ; preds = %149, %originalBB24alteredBB
  store i8 1, i8* %33, align 1, !dbg !1559
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.63, i64 0, i64 0), i8** %31, align 8, !dbg !1560
  store i64 1, i64* %32, align 8, !dbg !1561
  %158 = load i32, i32* @x.35
  %159 = load i32, i32* @y.36
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBBpart226, label %originalBB24alteredBB

originalBBpart226:                                ; preds = %originalBB24
  br label %393, !dbg !1562

166:                                              ; preds = %originalBBpart210
  %167 = load i32, i32* @x.35
  %168 = load i32, i32* @y.36
  %169 = sub i32 %167, 1
  %170 = mul i32 %167, %169
  %171 = urem i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %172, %173
  br i1 %174, label %originalBB28, label %originalBB28alteredBB

originalBB28:                                     ; preds = %166, %originalBB28alteredBB
  store i8 1, i8* %33, align 1, !dbg !1563
  store i8 0, i8* %35, align 1, !dbg !1564
  %175 = load i32, i32* @x.35
  %176 = load i32, i32* @y.36
  %177 = sub i32 %175, 1
  %178 = mul i32 %175, %177
  %179 = urem i32 %178, 2
  %180 = icmp eq i32 %179, 0
  %181 = icmp slt i32 %176, 10
  %182 = or i1 %180, %181
  br i1 %182, label %originalBBpart230, label %originalBB28alteredBB

originalBBpart230:                                ; preds = %originalBB28
  br label %393, !dbg !1565

183:                                              ; preds = %originalBBpart210, %originalBBpart210, %originalBBpart210
  %184 = load i32, i32* @x.35
  %185 = load i32, i32* @y.36
  %186 = sub i32 %184, 1
  %187 = mul i32 %184, %186
  %188 = urem i32 %187, 2
  %189 = icmp eq i32 %188, 0
  %190 = icmp slt i32 %185, 10
  %191 = or i1 %189, %190
  br i1 %191, label %originalBB32, label %originalBB32alteredBB

originalBB32:                                     ; preds = %183, %originalBB32alteredBB
  %192 = load i32, i32* %23, align 4, !dbg !1566
  %193 = icmp ne i32 %192, 10, !dbg !1569
  %194 = load i32, i32* @x.35
  %195 = load i32, i32* @y.36
  %196 = sub i32 %194, 1
  %197 = mul i32 %194, %196
  %198 = urem i32 %197, 2
  %199 = icmp eq i32 %198, 0
  %200 = icmp slt i32 %195, 10
  %201 = or i1 %199, %200
  br i1 %201, label %originalBBpart234, label %originalBB32alteredBB

originalBBpart234:                                ; preds = %originalBB32
  br i1 %193, label %202, label %207, !dbg !1570

202:                                              ; preds = %originalBBpart234
  %203 = load i32, i32* %23, align 4, !dbg !1571
  %204 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.64, i64 0, i64 0), i32 %203), !dbg !1573
  store i8* %204, i8** %26, align 8, !dbg !1574
  %205 = load i32, i32* %23, align 4, !dbg !1575
  %206 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.65, i64 0, i64 0), i32 %205), !dbg !1576
  store i8* %206, i8** %27, align 8, !dbg !1577
  br label %207, !dbg !1578

207:                                              ; preds = %202, %originalBBpart234
  %208 = load i8, i8* %35, align 1, !dbg !1579
  %209 = trunc i8 %208 to i1, !dbg !1579
  br i1 %209, label %283, label %210, !dbg !1581

210:                                              ; preds = %207
  %211 = load i8*, i8** %26, align 8, !dbg !1582
  store i8* %211, i8** %31, align 8, !dbg !1584
  br label %212, !dbg !1585

212:                                              ; preds = %263, %210
  %213 = load i8*, i8** %31, align 8, !dbg !1586
  %214 = load i8, i8* %213, align 1, !dbg !1588
  %215 = icmp ne i8 %214, 0, !dbg !1589
  br i1 %215, label %216, label %266, !dbg !1589

216:                                              ; preds = %212
  br label %217, !dbg !1590

217:                                              ; preds = %216
  %218 = load i32, i32* @x.35
  %219 = load i32, i32* @y.36
  %220 = sub i32 %218, 1
  %221 = mul i32 %218, %220
  %222 = urem i32 %221, 2
  %223 = icmp eq i32 %222, 0
  %224 = icmp slt i32 %219, 10
  %225 = or i1 %223, %224
  br i1 %225, label %originalBB36, label %originalBB36alteredBB

originalBB36:                                     ; preds = %217, %originalBB36alteredBB
  %226 = load i64, i64* %29, align 8, !dbg !1591
  %227 = load i64, i64* %20, align 8, !dbg !1591
  %228 = icmp ult i64 %226, %227, !dbg !1591
  %229 = load i32, i32* @x.35
  %230 = load i32, i32* @y.36
  %231 = sub i32 %229, 1
  %232 = mul i32 %229, %231
  %233 = urem i32 %232, 2
  %234 = icmp eq i32 %233, 0
  %235 = icmp slt i32 %230, 10
  %236 = or i1 %234, %235
  br i1 %236, label %originalBBpart238, label %originalBB36alteredBB

originalBBpart238:                                ; preds = %originalBB36
  br i1 %228, label %237, label %259, !dbg !1594

237:                                              ; preds = %originalBBpart238
  %238 = load i32, i32* @x.35
  %239 = load i32, i32* @y.36
  %240 = sub i32 %238, 1
  %241 = mul i32 %238, %240
  %242 = urem i32 %241, 2
  %243 = icmp eq i32 %242, 0
  %244 = icmp slt i32 %239, 10
  %245 = or i1 %243, %244
  br i1 %245, label %originalBB40, label %originalBB40alteredBB

originalBB40:                                     ; preds = %237, %originalBB40alteredBB
  %246 = load i8*, i8** %31, align 8, !dbg !1591
  %247 = load i8, i8* %246, align 1, !dbg !1591
  %248 = load i8*, i8** %19, align 8, !dbg !1591
  %249 = load i64, i64* %29, align 8, !dbg !1591
  %250 = getelementptr inbounds i8, i8* %248, i64 %249, !dbg !1591
  store i8 %247, i8* %250, align 1, !dbg !1591
  %251 = load i32, i32* @x.35
  %252 = load i32, i32* @y.36
  %253 = sub i32 %251, 1
  %254 = mul i32 %251, %253
  %255 = urem i32 %254, 2
  %256 = icmp eq i32 %255, 0
  %257 = icmp slt i32 %252, 10
  %258 = or i1 %256, %257
  br i1 %258, label %originalBBpart242, label %originalBB40alteredBB

originalBBpart242:                                ; preds = %originalBB40
  br label %259, !dbg !1591

259:                                              ; preds = %originalBBpart242, %originalBBpart238
  %260 = load i64, i64* %29, align 8, !dbg !1594
  %261 = add i64 %260, 1, !dbg !1594
  store i64 %261, i64* %29, align 8, !dbg !1594
  br label %262, !dbg !1594

262:                                              ; preds = %259
  br label %263, !dbg !1594

263:                                              ; preds = %262
  %264 = load i8*, i8** %31, align 8, !dbg !1595
  %265 = getelementptr inbounds i8, i8* %264, i32 1, !dbg !1595
  store i8* %265, i8** %31, align 8, !dbg !1595
  br label %212, !dbg !1596, !llvm.loop !1597

266:                                              ; preds = %212
  %267 = load i32, i32* @x.35
  %268 = load i32, i32* @y.36
  %269 = sub i32 %267, 1
  %270 = mul i32 %267, %269
  %271 = urem i32 %270, 2
  %272 = icmp eq i32 %271, 0
  %273 = icmp slt i32 %268, 10
  %274 = or i1 %272, %273
  br i1 %274, label %originalBB44, label %originalBB44alteredBB

originalBB44:                                     ; preds = %266, %originalBB44alteredBB
  %275 = load i32, i32* @x.35
  %276 = load i32, i32* @y.36
  %277 = sub i32 %275, 1
  %278 = mul i32 %275, %277
  %279 = urem i32 %278, 2
  %280 = icmp eq i32 %279, 0
  %281 = icmp slt i32 %276, 10
  %282 = or i1 %280, %281
  br i1 %282, label %originalBBpart246, label %originalBB44alteredBB

originalBBpart246:                                ; preds = %originalBB44
  br label %283, !dbg !1598

283:                                              ; preds = %originalBBpart246, %207
  store i8 1, i8* %33, align 1, !dbg !1599
  %284 = load i8*, i8** %27, align 8, !dbg !1600
  store i8* %284, i8** %31, align 8, !dbg !1601
  %285 = load i8*, i8** %31, align 8, !dbg !1602
  %286 = call i64 @strlen(i8* %285) #13, !dbg !1603
  store i64 %286, i64* %32, align 8, !dbg !1604
  br label %393, !dbg !1605

287:                                              ; preds = %originalBBpart210
  store i8 1, i8* %33, align 1, !dbg !1606
  br label %288, !dbg !1607

288:                                              ; preds = %287, %originalBBpart210
  store i8 1, i8* %35, align 1, !dbg !1608
  br label %289, !dbg !1609

289:                                              ; preds = %288, %originalBBpart210
  %290 = load i8, i8* %35, align 1, !dbg !1610
  %291 = trunc i8 %290 to i1, !dbg !1610
  br i1 %291, label %309, label %292, !dbg !1612

292:                                              ; preds = %289
  %293 = load i32, i32* @x.35
  %294 = load i32, i32* @y.36
  %295 = sub i32 %293, 1
  %296 = mul i32 %293, %295
  %297 = urem i32 %296, 2
  %298 = icmp eq i32 %297, 0
  %299 = icmp slt i32 %294, 10
  %300 = or i1 %298, %299
  br i1 %300, label %originalBB48, label %originalBB48alteredBB

originalBB48:                                     ; preds = %292, %originalBB48alteredBB
  store i8 1, i8* %33, align 1, !dbg !1613
  %301 = load i32, i32* @x.35
  %302 = load i32, i32* @y.36
  %303 = sub i32 %301, 1
  %304 = mul i32 %301, %303
  %305 = urem i32 %304, 2
  %306 = icmp eq i32 %305, 0
  %307 = icmp slt i32 %302, 10
  %308 = or i1 %306, %307
  br i1 %308, label %originalBBpart250, label %originalBB48alteredBB

originalBBpart250:                                ; preds = %originalBB48
  br label %309, !dbg !1614

309:                                              ; preds = %originalBBpart250, %289
  br label %310, !dbg !1615

310:                                              ; preds = %309, %originalBBpart210
  store i32 2, i32* %23, align 4, !dbg !1616
  %311 = load i8, i8* %35, align 1, !dbg !1617
  %312 = trunc i8 %311 to i1, !dbg !1617
  br i1 %312, label %374, label %313, !dbg !1619

313:                                              ; preds = %310
  br label %314, !dbg !1620

314:                                              ; preds = %313
  %315 = load i32, i32* @x.35
  %316 = load i32, i32* @y.36
  %317 = sub i32 %315, 1
  %318 = mul i32 %315, %317
  %319 = urem i32 %318, 2
  %320 = icmp eq i32 %319, 0
  %321 = icmp slt i32 %316, 10
  %322 = or i1 %320, %321
  br i1 %322, label %originalBB52, label %originalBB52alteredBB

originalBB52:                                     ; preds = %314, %originalBB52alteredBB
  %323 = load i64, i64* %29, align 8, !dbg !1621
  %324 = load i64, i64* %20, align 8, !dbg !1621
  %325 = icmp ult i64 %323, %324, !dbg !1621
  %326 = load i32, i32* @x.35
  %327 = load i32, i32* @y.36
  %328 = sub i32 %326, 1
  %329 = mul i32 %326, %328
  %330 = urem i32 %329, 2
  %331 = icmp eq i32 %330, 0
  %332 = icmp slt i32 %327, 10
  %333 = or i1 %331, %332
  br i1 %333, label %originalBBpart254, label %originalBB52alteredBB

originalBBpart254:                                ; preds = %originalBB52
  br i1 %325, label %334, label %354, !dbg !1624

334:                                              ; preds = %originalBBpart254
  %335 = load i32, i32* @x.35
  %336 = load i32, i32* @y.36
  %337 = sub i32 %335, 1
  %338 = mul i32 %335, %337
  %339 = urem i32 %338, 2
  %340 = icmp eq i32 %339, 0
  %341 = icmp slt i32 %336, 10
  %342 = or i1 %340, %341
  br i1 %342, label %originalBB56, label %originalBB56alteredBB

originalBB56:                                     ; preds = %334, %originalBB56alteredBB
  %343 = load i8*, i8** %19, align 8, !dbg !1621
  %344 = load i64, i64* %29, align 8, !dbg !1621
  %345 = getelementptr inbounds i8, i8* %343, i64 %344, !dbg !1621
  store i8 39, i8* %345, align 1, !dbg !1621
  %346 = load i32, i32* @x.35
  %347 = load i32, i32* @y.36
  %348 = sub i32 %346, 1
  %349 = mul i32 %346, %348
  %350 = urem i32 %349, 2
  %351 = icmp eq i32 %350, 0
  %352 = icmp slt i32 %347, 10
  %353 = or i1 %351, %352
  br i1 %353, label %originalBBpart258, label %originalBB56alteredBB

originalBBpart258:                                ; preds = %originalBB56
  br label %354, !dbg !1621

354:                                              ; preds = %originalBBpart258, %originalBBpart254
  %355 = load i64, i64* %29, align 8, !dbg !1624
  %356 = add i64 %355, 1, !dbg !1624
  store i64 %356, i64* %29, align 8, !dbg !1624
  br label %357, !dbg !1624

357:                                              ; preds = %354
  %358 = load i32, i32* @x.35
  %359 = load i32, i32* @y.36
  %360 = sub i32 %358, 1
  %361 = mul i32 %358, %360
  %362 = urem i32 %361, 2
  %363 = icmp eq i32 %362, 0
  %364 = icmp slt i32 %359, 10
  %365 = or i1 %363, %364
  br i1 %365, label %originalBB60, label %originalBB60alteredBB

originalBB60:                                     ; preds = %357, %originalBB60alteredBB
  %366 = load i32, i32* @x.35
  %367 = load i32, i32* @y.36
  %368 = sub i32 %366, 1
  %369 = mul i32 %366, %368
  %370 = urem i32 %369, 2
  %371 = icmp eq i32 %370, 0
  %372 = icmp slt i32 %367, 10
  %373 = or i1 %371, %372
  br i1 %373, label %originalBBpart262, label %originalBB60alteredBB

originalBBpart262:                                ; preds = %originalBB60
  br label %374, !dbg !1624

374:                                              ; preds = %originalBBpart262, %310
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.65, i64 0, i64 0), i8** %31, align 8, !dbg !1625
  store i64 1, i64* %32, align 8, !dbg !1626
  br label %393, !dbg !1627

375:                                              ; preds = %originalBBpart210
  %376 = load i32, i32* @x.35
  %377 = load i32, i32* @y.36
  %378 = sub i32 %376, 1
  %379 = mul i32 %376, %378
  %380 = urem i32 %379, 2
  %381 = icmp eq i32 %380, 0
  %382 = icmp slt i32 %377, 10
  %383 = or i1 %381, %382
  br i1 %383, label %originalBB64, label %originalBB64alteredBB

originalBB64:                                     ; preds = %375, %originalBB64alteredBB
  store i8 0, i8* %35, align 1, !dbg !1628
  %384 = load i32, i32* @x.35
  %385 = load i32, i32* @y.36
  %386 = sub i32 %384, 1
  %387 = mul i32 %384, %386
  %388 = urem i32 %387, 2
  %389 = icmp eq i32 %388, 0
  %390 = icmp slt i32 %385, 10
  %391 = or i1 %389, %390
  br i1 %391, label %originalBBpart266, label %originalBB64alteredBB

originalBBpart266:                                ; preds = %originalBB64
  br label %393, !dbg !1629

392:                                              ; preds = %originalBBpart210
  call void @abort() #12, !dbg !1630
  unreachable, !dbg !1630

393:                                              ; preds = %originalBBpart266, %374, %283, %originalBBpart230, %originalBBpart226
  %394 = load i32, i32* @x.35
  %395 = load i32, i32* @y.36
  %396 = sub i32 %394, 1
  %397 = mul i32 %394, %396
  %398 = urem i32 %397, 2
  %399 = icmp eq i32 %398, 0
  %400 = icmp slt i32 %395, 10
  %401 = or i1 %399, %400
  br i1 %401, label %originalBB68, label %originalBB68alteredBB

originalBB68:                                     ; preds = %393, %originalBB68alteredBB
  store i64 0, i64* %28, align 8, !dbg !1631
  %402 = load i32, i32* @x.35
  %403 = load i32, i32* @y.36
  %404 = sub i32 %402, 1
  %405 = mul i32 %402, %404
  %406 = urem i32 %405, 2
  %407 = icmp eq i32 %406, 0
  %408 = icmp slt i32 %403, 10
  %409 = or i1 %407, %408
  br i1 %409, label %originalBBpart270, label %originalBB68alteredBB

originalBBpart270:                                ; preds = %originalBB68
  br label %410, !dbg !1633

410:                                              ; preds = %originalBBpart21068, %originalBBpart270
  %411 = load i64, i64* %22, align 8, !dbg !1634
  %412 = icmp eq i64 %411, -1, !dbg !1636
  br i1 %412, label %413, label %421, !dbg !1634

413:                                              ; preds = %410
  %414 = load i8*, i8** %21, align 8, !dbg !1637
  %415 = load i64, i64* %28, align 8, !dbg !1638
  %416 = getelementptr inbounds i8, i8* %414, i64 %415, !dbg !1637
  %417 = load i8, i8* %416, align 1, !dbg !1637
  %418 = sext i8 %417 to i32, !dbg !1637
  %419 = icmp eq i32 %418, 0, !dbg !1639
  %420 = zext i1 %419 to i32, !dbg !1639
  br label %442, !dbg !1634

421:                                              ; preds = %410
  %422 = load i32, i32* @x.35
  %423 = load i32, i32* @y.36
  %424 = sub i32 %422, 1
  %425 = mul i32 %422, %424
  %426 = urem i32 %425, 2
  %427 = icmp eq i32 %426, 0
  %428 = icmp slt i32 %423, 10
  %429 = or i1 %427, %428
  br i1 %429, label %originalBB72, label %originalBB72alteredBB

originalBB72:                                     ; preds = %421, %originalBB72alteredBB
  %430 = load i64, i64* %28, align 8, !dbg !1640
  %431 = load i64, i64* %22, align 8, !dbg !1641
  %432 = icmp eq i64 %430, %431, !dbg !1642
  %433 = zext i1 %432 to i32, !dbg !1642
  %434 = load i32, i32* @x.35
  %435 = load i32, i32* @y.36
  %436 = sub i32 %434, 1
  %437 = mul i32 %434, %436
  %438 = urem i32 %437, 2
  %439 = icmp eq i32 %438, 0
  %440 = icmp slt i32 %435, 10
  %441 = or i1 %439, %440
  br i1 %441, label %originalBBpart274, label %originalBB72alteredBB

originalBBpart274:                                ; preds = %originalBB72
  br label %442, !dbg !1634

442:                                              ; preds = %originalBBpart274, %413
  %443 = phi i32 [ %420, %413 ], [ %433, %originalBBpart274 ], !dbg !1634
  %444 = load i32, i32* @x.35
  %445 = load i32, i32* @y.36
  %446 = sub i32 %444, 1
  %447 = mul i32 %444, %446
  %448 = urem i32 %447, 2
  %449 = icmp eq i32 %448, 0
  %450 = icmp slt i32 %445, 10
  %451 = or i1 %449, %450
  br i1 %451, label %originalBB76, label %originalBB76alteredBB

originalBB76:                                     ; preds = %442, %originalBB76alteredBB
  %452 = icmp ne i32 %443, 0, !dbg !1643
  %453 = xor i1 %452, true, !dbg !1643
  %454 = load i32, i32* @x.35
  %455 = load i32, i32* @y.36
  %456 = sub i32 %454, 1
  %457 = mul i32 %454, %456
  %458 = urem i32 %457, 2
  %459 = icmp eq i32 %458, 0
  %460 = icmp slt i32 %455, 10
  %461 = or i1 %459, %460
  br i1 %461, label %originalBBpart289, label %originalBB76alteredBB

originalBBpart289:                                ; preds = %originalBB76
  br i1 %453, label %462, label %3907, !dbg !1644

462:                                              ; preds = %originalBBpart289
  call void @llvm.dbg.declare(metadata i8* %39, metadata !1645, metadata !DIExpression()), !dbg !1647
  call void @llvm.dbg.declare(metadata i8* %40, metadata !1648, metadata !DIExpression()), !dbg !1649
  call void @llvm.dbg.declare(metadata i8* %41, metadata !1650, metadata !DIExpression()), !dbg !1651
  store i8 0, i8* %41, align 1, !dbg !1651
  call void @llvm.dbg.declare(metadata i8* %42, metadata !1652, metadata !DIExpression()), !dbg !1653
  store i8 0, i8* %42, align 1, !dbg !1653
  call void @llvm.dbg.declare(metadata i8* %43, metadata !1654, metadata !DIExpression()), !dbg !1655
  store i8 0, i8* %43, align 1, !dbg !1655
  %463 = load i8, i8* %33, align 1, !dbg !1656
  %464 = trunc i8 %463 to i1, !dbg !1656
  br i1 %464, label %465, label %597, !dbg !1658

465:                                              ; preds = %462
  %466 = load i32, i32* %23, align 4, !dbg !1659
  %467 = icmp ne i32 %466, 2, !dbg !1660
  br i1 %467, label %468, label %597, !dbg !1661

468:                                              ; preds = %465
  %469 = load i64, i64* %32, align 8, !dbg !1662
  %470 = icmp ne i64 %469, 0, !dbg !1662
  br i1 %470, label %471, label %597, !dbg !1663

471:                                              ; preds = %468
  %472 = load i64, i64* %28, align 8, !dbg !1664
  %473 = load i64, i64* %32, align 8, !dbg !1665
  %474 = add i64 %472, %473, !dbg !1666
  %475 = load i64, i64* %22, align 8, !dbg !1667
  %476 = icmp eq i64 %475, -1, !dbg !1668
  br i1 %476, label %477, label %499, !dbg !1669

477:                                              ; preds = %471
  %478 = load i64, i64* %32, align 8, !dbg !1670
  %479 = icmp ult i64 1, %478, !dbg !1671
  br i1 %479, label %480, label %499, !dbg !1667

480:                                              ; preds = %477
  %481 = load i32, i32* @x.35
  %482 = load i32, i32* @y.36
  %483 = sub i32 %481, 1
  %484 = mul i32 %481, %483
  %485 = urem i32 %484, 2
  %486 = icmp eq i32 %485, 0
  %487 = icmp slt i32 %482, 10
  %488 = or i1 %486, %487
  br i1 %488, label %originalBB91, label %originalBB91alteredBB

originalBB91:                                     ; preds = %480, %originalBB91alteredBB
  %489 = load i8*, i8** %21, align 8, !dbg !1672
  %490 = call i64 @strlen(i8* %489) #13, !dbg !1673
  store i64 %490, i64* %22, align 8, !dbg !1674
  %491 = load i32, i32* @x.35
  %492 = load i32, i32* @y.36
  %493 = sub i32 %491, 1
  %494 = mul i32 %491, %493
  %495 = urem i32 %494, 2
  %496 = icmp eq i32 %495, 0
  %497 = icmp slt i32 %492, 10
  %498 = or i1 %496, %497
  br i1 %498, label %originalBBpart293, label %originalBB91alteredBB

originalBBpart293:                                ; preds = %originalBB91
  br label %501, !dbg !1667

499:                                              ; preds = %477, %471
  %500 = load i64, i64* %22, align 8, !dbg !1675
  br label %501, !dbg !1667

501:                                              ; preds = %499, %originalBBpart293
  %502 = phi i64 [ %490, %originalBBpart293 ], [ %500, %499 ], !dbg !1667
  %503 = load i32, i32* @x.35
  %504 = load i32, i32* @y.36
  %505 = sub i32 %503, 1
  %506 = mul i32 %503, %505
  %507 = urem i32 %506, 2
  %508 = icmp eq i32 %507, 0
  %509 = icmp slt i32 %504, 10
  %510 = or i1 %508, %509
  br i1 %510, label %originalBB95, label %originalBB95alteredBB

originalBB95:                                     ; preds = %501, %originalBB95alteredBB
  %511 = icmp ule i64 %474, %502, !dbg !1676
  %512 = load i32, i32* @x.35
  %513 = load i32, i32* @y.36
  %514 = sub i32 %512, 1
  %515 = mul i32 %512, %514
  %516 = urem i32 %515, 2
  %517 = icmp eq i32 %516, 0
  %518 = icmp slt i32 %513, 10
  %519 = or i1 %517, %518
  br i1 %519, label %originalBBpart297, label %originalBB95alteredBB

originalBBpart297:                                ; preds = %originalBB95
  br i1 %511, label %520, label %597, !dbg !1677

520:                                              ; preds = %originalBBpart297
  %521 = load i32, i32* @x.35
  %522 = load i32, i32* @y.36
  %523 = sub i32 %521, 1
  %524 = mul i32 %521, %523
  %525 = urem i32 %524, 2
  %526 = icmp eq i32 %525, 0
  %527 = icmp slt i32 %522, 10
  %528 = or i1 %526, %527
  br i1 %528, label %originalBB99, label %originalBB99alteredBB

originalBB99:                                     ; preds = %520, %originalBB99alteredBB
  %529 = load i8*, i8** %21, align 8, !dbg !1678
  %530 = load i64, i64* %28, align 8, !dbg !1679
  %531 = getelementptr inbounds i8, i8* %529, i64 %530, !dbg !1680
  %532 = load i8*, i8** %31, align 8, !dbg !1681
  %533 = load i64, i64* %32, align 8, !dbg !1682
  %534 = call i32 @memcmp(i8* %531, i8* %532, i64 %533) #13, !dbg !1683
  %535 = icmp eq i32 %534, 0, !dbg !1684
  %536 = load i32, i32* @x.35
  %537 = load i32, i32* @y.36
  %538 = sub i32 %536, 1
  %539 = mul i32 %536, %538
  %540 = urem i32 %539, 2
  %541 = icmp eq i32 %540, 0
  %542 = icmp slt i32 %537, 10
  %543 = or i1 %541, %542
  br i1 %543, label %originalBBpart2101, label %originalBB99alteredBB

originalBBpart2101:                               ; preds = %originalBB99
  br i1 %535, label %544, label %597, !dbg !1685

544:                                              ; preds = %originalBBpart2101
  %545 = load i32, i32* @x.35
  %546 = load i32, i32* @y.36
  %547 = sub i32 %545, 1
  %548 = mul i32 %545, %547
  %549 = urem i32 %548, 2
  %550 = icmp eq i32 %549, 0
  %551 = icmp slt i32 %546, 10
  %552 = or i1 %550, %551
  br i1 %552, label %originalBB103, label %originalBB103alteredBB

originalBB103:                                    ; preds = %544, %originalBB103alteredBB
  %553 = load i8, i8* %35, align 1, !dbg !1686
  %554 = trunc i8 %553 to i1, !dbg !1686
  %555 = load i32, i32* @x.35
  %556 = load i32, i32* @y.36
  %557 = sub i32 %555, 1
  %558 = mul i32 %555, %557
  %559 = urem i32 %558, 2
  %560 = icmp eq i32 %559, 0
  %561 = icmp slt i32 %556, 10
  %562 = or i1 %560, %561
  br i1 %562, label %originalBBpart2105, label %originalBB103alteredBB

originalBBpart2105:                               ; preds = %originalBB103
  br i1 %554, label %563, label %580, !dbg !1689

563:                                              ; preds = %originalBBpart2105
  %564 = load i32, i32* @x.35
  %565 = load i32, i32* @y.36
  %566 = sub i32 %564, 1
  %567 = mul i32 %564, %566
  %568 = urem i32 %567, 2
  %569 = icmp eq i32 %568, 0
  %570 = icmp slt i32 %565, 10
  %571 = or i1 %569, %570
  br i1 %571, label %originalBB107, label %originalBB107alteredBB

originalBB107:                                    ; preds = %563, %originalBB107alteredBB
  %572 = load i32, i32* @x.35
  %573 = load i32, i32* @y.36
  %574 = sub i32 %572, 1
  %575 = mul i32 %572, %574
  %576 = urem i32 %575, 2
  %577 = icmp eq i32 %576, 0
  %578 = icmp slt i32 %573, 10
  %579 = or i1 %577, %578
  br i1 %579, label %originalBBpart2109, label %originalBB107alteredBB

originalBBpart2109:                               ; preds = %originalBB107
  br label %4197, !dbg !1690

580:                                              ; preds = %originalBBpart2105
  %581 = load i32, i32* @x.35
  %582 = load i32, i32* @y.36
  %583 = sub i32 %581, 1
  %584 = mul i32 %581, %583
  %585 = urem i32 %584, 2
  %586 = icmp eq i32 %585, 0
  %587 = icmp slt i32 %582, 10
  %588 = or i1 %586, %587
  br i1 %588, label %originalBB111, label %originalBB111alteredBB

originalBB111:                                    ; preds = %580, %originalBB111alteredBB
  store i8 1, i8* %41, align 1, !dbg !1691
  %589 = load i32, i32* @x.35
  %590 = load i32, i32* @y.36
  %591 = sub i32 %589, 1
  %592 = mul i32 %589, %591
  %593 = urem i32 %592, 2
  %594 = icmp eq i32 %593, 0
  %595 = icmp slt i32 %590, 10
  %596 = or i1 %594, %595
  br i1 %596, label %originalBBpart2113, label %originalBB111alteredBB

originalBBpart2113:                               ; preds = %originalBB111
  br label %597, !dbg !1692

597:                                              ; preds = %originalBBpart2113, %originalBBpart2101, %originalBBpart297, %468, %465, %462
  %598 = load i32, i32* @x.35
  %599 = load i32, i32* @y.36
  %600 = sub i32 %598, 1
  %601 = mul i32 %598, %600
  %602 = urem i32 %601, 2
  %603 = icmp eq i32 %602, 0
  %604 = icmp slt i32 %599, 10
  %605 = or i1 %603, %604
  br i1 %605, label %originalBB115, label %originalBB115alteredBB

originalBB115:                                    ; preds = %597, %originalBB115alteredBB
  %606 = load i8*, i8** %21, align 8, !dbg !1693
  %607 = load i64, i64* %28, align 8, !dbg !1694
  %608 = getelementptr inbounds i8, i8* %606, i64 %607, !dbg !1693
  %609 = load i8, i8* %608, align 1, !dbg !1693
  store i8 %609, i8* %39, align 1, !dbg !1695
  %610 = load i8, i8* %39, align 1, !dbg !1696
  %611 = zext i8 %610 to i32, !dbg !1696
  %612 = load i32, i32* @x.35
  %613 = load i32, i32* @y.36
  %614 = sub i32 %612, 1
  %615 = mul i32 %612, %614
  %616 = urem i32 %615, 2
  %617 = icmp eq i32 %616, 0
  %618 = icmp slt i32 %613, 10
  %619 = or i1 %617, %618
  br i1 %619, label %originalBBpart2117, label %originalBB115alteredBB

originalBBpart2117:                               ; preds = %originalBB115
  switch i32 %611, label %2094 [
    i32 0, label %620
    i32 63, label %1097
    i32 7, label %1427
    i32 8, label %1444
    i32 12, label %1461
    i32 10, label %1462
    i32 13, label %1463
    i32 9, label %1480
    i32 11, label %1497
    i32 92, label %1514
    i32 123, label %1708
    i32 125, label %1708
    i32 35, label %1770
    i32 126, label %1770
    i32 32, label %1791
    i32 33, label %1808
    i32 34, label %1808
    i32 36, label %1808
    i32 38, label %1808
    i32 40, label %1808
    i32 41, label %1808
    i32 42, label %1808
    i32 59, label %1808
    i32 60, label %1808
    i32 61, label %1808
    i32 62, label %1808
    i32 91, label %1808
    i32 94, label %1808
    i32 96, label %1808
    i32 124, label %1808
    i32 39, label %1848
    i32 37, label %2093
    i32 43, label %2093
    i32 44, label %2093
    i32 45, label %2093
    i32 46, label %2093
    i32 47, label %2093
    i32 48, label %2093
    i32 49, label %2093
    i32 50, label %2093
    i32 51, label %2093
    i32 52, label %2093
    i32 53, label %2093
    i32 54, label %2093
    i32 55, label %2093
    i32 56, label %2093
    i32 57, label %2093
    i32 58, label %2093
    i32 65, label %2093
    i32 66, label %2093
    i32 67, label %2093
    i32 68, label %2093
    i32 69, label %2093
    i32 70, label %2093
    i32 71, label %2093
    i32 72, label %2093
    i32 73, label %2093
    i32 74, label %2093
    i32 75, label %2093
    i32 76, label %2093
    i32 77, label %2093
    i32 78, label %2093
    i32 79, label %2093
    i32 80, label %2093
    i32 81, label %2093
    i32 82, label %2093
    i32 83, label %2093
    i32 84, label %2093
    i32 85, label %2093
    i32 86, label %2093
    i32 87, label %2093
    i32 88, label %2093
    i32 89, label %2093
    i32 90, label %2093
    i32 93, label %2093
    i32 95, label %2093
    i32 97, label %2093
    i32 98, label %2093
    i32 99, label %2093
    i32 100, label %2093
    i32 101, label %2093
    i32 102, label %2093
    i32 103, label %2093
    i32 104, label %2093
    i32 105, label %2093
    i32 106, label %2093
    i32 107, label %2093
    i32 108, label %2093
    i32 109, label %2093
    i32 110, label %2093
    i32 111, label %2093
    i32 112, label %2093
    i32 113, label %2093
    i32 114, label %2093
    i32 115, label %2093
    i32 116, label %2093
    i32 117, label %2093
    i32 118, label %2093
    i32 119, label %2093
    i32 120, label %2093
    i32 121, label %2093
    i32 122, label %2093
  ], !dbg !1697

620:                                              ; preds = %originalBBpart2117
  %621 = load i8, i8* %33, align 1, !dbg !1698
  %622 = trunc i8 %621 to i1, !dbg !1698
  br i1 %622, label %623, label %1026, !dbg !1701

623:                                              ; preds = %620
  %624 = load i32, i32* @x.35
  %625 = load i32, i32* @y.36
  %626 = sub i32 %624, 1
  %627 = mul i32 %624, %626
  %628 = urem i32 %627, 2
  %629 = icmp eq i32 %628, 0
  %630 = icmp slt i32 %625, 10
  %631 = or i1 %629, %630
  br i1 %631, label %originalBB119, label %originalBB119alteredBB

originalBB119:                                    ; preds = %623, %originalBB119alteredBB
  %632 = load i32, i32* @x.35
  %633 = load i32, i32* @y.36
  %634 = sub i32 %632, 1
  %635 = mul i32 %632, %634
  %636 = urem i32 %635, 2
  %637 = icmp eq i32 %636, 0
  %638 = icmp slt i32 %633, 10
  %639 = or i1 %637, %638
  br i1 %639, label %originalBBpart2121, label %originalBB119alteredBB

originalBBpart2121:                               ; preds = %originalBB119
  br label %640, !dbg !1702

640:                                              ; preds = %originalBBpart2121
  %641 = load i8, i8* %35, align 1, !dbg !1704
  %642 = trunc i8 %641 to i1, !dbg !1704
  br i1 %642, label %643, label %660, !dbg !1707

643:                                              ; preds = %640
  %644 = load i32, i32* @x.35
  %645 = load i32, i32* @y.36
  %646 = sub i32 %644, 1
  %647 = mul i32 %644, %646
  %648 = urem i32 %647, 2
  %649 = icmp eq i32 %648, 0
  %650 = icmp slt i32 %645, 10
  %651 = or i1 %649, %650
  br i1 %651, label %originalBB123, label %originalBB123alteredBB

originalBB123:                                    ; preds = %643, %originalBB123alteredBB
  %652 = load i32, i32* @x.35
  %653 = load i32, i32* @y.36
  %654 = sub i32 %652, 1
  %655 = mul i32 %652, %654
  %656 = urem i32 %655, 2
  %657 = icmp eq i32 %656, 0
  %658 = icmp slt i32 %653, 10
  %659 = or i1 %657, %658
  br i1 %659, label %originalBBpart2125, label %originalBB123alteredBB

originalBBpart2125:                               ; preds = %originalBB123
  br label %4197, !dbg !1704

660:                                              ; preds = %640
  store i8 1, i8* %42, align 1, !dbg !1707
  %661 = load i32, i32* %23, align 4, !dbg !1708
  %662 = icmp eq i32 %661, 2, !dbg !1708
  br i1 %662, label %663, label %851, !dbg !1708

663:                                              ; preds = %660
  %664 = load i32, i32* @x.35
  %665 = load i32, i32* @y.36
  %666 = sub i32 %664, 1
  %667 = mul i32 %664, %666
  %668 = urem i32 %667, 2
  %669 = icmp eq i32 %668, 0
  %670 = icmp slt i32 %665, 10
  %671 = or i1 %669, %670
  br i1 %671, label %originalBB127, label %originalBB127alteredBB

originalBB127:                                    ; preds = %663, %originalBB127alteredBB
  %672 = load i8, i8* %36, align 1, !dbg !1708
  %673 = trunc i8 %672 to i1, !dbg !1708
  %674 = load i32, i32* @x.35
  %675 = load i32, i32* @y.36
  %676 = sub i32 %674, 1
  %677 = mul i32 %674, %676
  %678 = urem i32 %677, 2
  %679 = icmp eq i32 %678, 0
  %680 = icmp slt i32 %675, 10
  %681 = or i1 %679, %680
  br i1 %681, label %originalBBpart2129, label %originalBB127alteredBB

originalBBpart2129:                               ; preds = %originalBB127
  br i1 %673, label %851, label %682, !dbg !1707

682:                                              ; preds = %originalBBpart2129
  %683 = load i32, i32* @x.35
  %684 = load i32, i32* @y.36
  %685 = sub i32 %683, 1
  %686 = mul i32 %683, %685
  %687 = urem i32 %686, 2
  %688 = icmp eq i32 %687, 0
  %689 = icmp slt i32 %684, 10
  %690 = or i1 %688, %689
  br i1 %690, label %originalBB131, label %originalBB131alteredBB

originalBB131:                                    ; preds = %682, %originalBB131alteredBB
  %691 = load i32, i32* @x.35
  %692 = load i32, i32* @y.36
  %693 = sub i32 %691, 1
  %694 = mul i32 %691, %693
  %695 = urem i32 %694, 2
  %696 = icmp eq i32 %695, 0
  %697 = icmp slt i32 %692, 10
  %698 = or i1 %696, %697
  br i1 %698, label %originalBBpart2133, label %originalBB131alteredBB

originalBBpart2133:                               ; preds = %originalBB131
  br label %699, !dbg !1710

699:                                              ; preds = %originalBBpart2133
  %700 = load i64, i64* %29, align 8, !dbg !1712
  %701 = load i64, i64* %20, align 8, !dbg !1712
  %702 = icmp ult i64 %700, %701, !dbg !1712
  br i1 %702, label %703, label %707, !dbg !1715

703:                                              ; preds = %699
  %704 = load i8*, i8** %19, align 8, !dbg !1712
  %705 = load i64, i64* %29, align 8, !dbg !1712
  %706 = getelementptr inbounds i8, i8* %704, i64 %705, !dbg !1712
  store i8 39, i8* %706, align 1, !dbg !1712
  br label %707, !dbg !1712

707:                                              ; preds = %703, %699
  %708 = load i64, i64* %29, align 8, !dbg !1715
  %709 = add i64 %708, 1, !dbg !1715
  %710 = trunc i64 1 to i32
  %711 = mul i32 %710, -5
  %712 = add i32 %711, 3
  %713 = trunc i64 %708 to i32
  %714 = add i32 %713, 2
  %715 = trunc i64 %709 to i32
  %716 = mul i32 %715, -2
  %717 = add i32 %716, 2
  %718 = mul i32 %712, %712
  %719 = mul i32 %718, %718
  %720 = mul i32 %714, %714
  %721 = mul i32 %720, %720
  %722 = mul i32 %717, %717
  %723 = mul i32 %722, %722
  %724 = add i32 %719, %721
  %725 = sub i32 %724, %723
  %726 = add i32 %725, 5
  %727 = icmp ne i32 %726, 5
  br i1 %727, label %728, label %745

728:                                              ; preds = %707
  %729 = load i32, i32* @x.35
  %730 = load i32, i32* @y.36
  %731 = sub i32 %729, 1
  %732 = mul i32 %729, %731
  %733 = urem i32 %732, 2
  %734 = icmp eq i32 %733, 0
  %735 = icmp slt i32 %730, 10
  %736 = or i1 %734, %735
  br i1 %736, label %originalBB135, label %originalBB135alteredBB

originalBB135:                                    ; preds = %728, %originalBB135alteredBB
  %737 = load i32, i32* @x.35
  %738 = load i32, i32* @y.36
  %739 = sub i32 %737, 1
  %740 = mul i32 %737, %739
  %741 = urem i32 %740, 2
  %742 = icmp eq i32 %741, 0
  %743 = icmp slt i32 %738, 10
  %744 = or i1 %742, %743
  br i1 %744, label %originalBBpart2137, label %originalBB135alteredBB

originalBBpart2137:                               ; preds = %originalBB135
  ret i64 0

745:                                              ; preds = %707
  %746 = load i32, i32* @x.35
  %747 = load i32, i32* @y.36
  %748 = sub i32 %746, 1
  %749 = mul i32 %746, %748
  %750 = urem i32 %749, 2
  %751 = icmp eq i32 %750, 0
  %752 = icmp slt i32 %747, 10
  %753 = or i1 %751, %752
  br i1 %753, label %originalBB139, label %originalBB139alteredBB

originalBB139:                                    ; preds = %745, %originalBB139alteredBB
  store i64 %709, i64* %29, align 8, !dbg !1715
  %754 = load i32, i32* @x.35
  %755 = load i32, i32* @y.36
  %756 = sub i32 %754, 1
  %757 = mul i32 %754, %756
  %758 = urem i32 %757, 2
  %759 = icmp eq i32 %758, 0
  %760 = icmp slt i32 %755, 10
  %761 = or i1 %759, %760
  br i1 %761, label %originalBBpart2141, label %originalBB139alteredBB

originalBBpart2141:                               ; preds = %originalBB139
  br label %762, !dbg !1715

762:                                              ; preds = %originalBBpart2141
  br label %763, !dbg !1710

763:                                              ; preds = %762
  %764 = load i32, i32* @x.35
  %765 = load i32, i32* @y.36
  %766 = sub i32 %764, 1
  %767 = mul i32 %764, %766
  %768 = urem i32 %767, 2
  %769 = icmp eq i32 %768, 0
  %770 = icmp slt i32 %765, 10
  %771 = or i1 %769, %770
  br i1 %771, label %originalBB143, label %originalBB143alteredBB

originalBB143:                                    ; preds = %763, %originalBB143alteredBB
  %772 = load i64, i64* %29, align 8, !dbg !1716
  %773 = load i64, i64* %20, align 8, !dbg !1716
  %774 = icmp ult i64 %772, %773, !dbg !1716
  %775 = load i32, i32* @x.35
  %776 = load i32, i32* @y.36
  %777 = sub i32 %775, 1
  %778 = mul i32 %775, %777
  %779 = urem i32 %778, 2
  %780 = icmp eq i32 %779, 0
  %781 = icmp slt i32 %776, 10
  %782 = or i1 %780, %781
  br i1 %782, label %originalBBpart2145, label %originalBB143alteredBB

originalBBpart2145:                               ; preds = %originalBB143
  br i1 %774, label %783, label %787, !dbg !1719

783:                                              ; preds = %originalBBpart2145
  %784 = load i8*, i8** %19, align 8, !dbg !1716
  %785 = load i64, i64* %29, align 8, !dbg !1716
  %786 = getelementptr inbounds i8, i8* %784, i64 %785, !dbg !1716
  store i8 36, i8* %786, align 1, !dbg !1716
  br label %787, !dbg !1716

787:                                              ; preds = %783, %originalBBpart2145
  %788 = load i32, i32* @x.35
  %789 = load i32, i32* @y.36
  %790 = sub i32 %788, 1
  %791 = mul i32 %788, %790
  %792 = urem i32 %791, 2
  %793 = icmp eq i32 %792, 0
  %794 = icmp slt i32 %789, 10
  %795 = or i1 %793, %794
  br i1 %795, label %originalBB147, label %originalBB147alteredBB

originalBB147:                                    ; preds = %787, %originalBB147alteredBB
  %796 = load i64, i64* %29, align 8, !dbg !1719
  %797 = add i64 %796, 1, !dbg !1719
  store i64 %797, i64* %29, align 8, !dbg !1719
  %798 = load i32, i32* @x.35
  %799 = load i32, i32* @y.36
  %800 = sub i32 %798, 1
  %801 = mul i32 %798, %800
  %802 = urem i32 %801, 2
  %803 = icmp eq i32 %802, 0
  %804 = icmp slt i32 %799, 10
  %805 = or i1 %803, %804
  br i1 %805, label %originalBBpart2163, label %originalBB147alteredBB

originalBBpart2163:                               ; preds = %originalBB147
  br label %806, !dbg !1719

806:                                              ; preds = %originalBBpart2163
  br label %807, !dbg !1710

807:                                              ; preds = %806
  %808 = load i32, i32* @x.35
  %809 = load i32, i32* @y.36
  %810 = sub i32 %808, 1
  %811 = mul i32 %808, %810
  %812 = urem i32 %811, 2
  %813 = icmp eq i32 %812, 0
  %814 = icmp slt i32 %809, 10
  %815 = or i1 %813, %814
  br i1 %815, label %originalBB165, label %originalBB165alteredBB

originalBB165:                                    ; preds = %807, %originalBB165alteredBB
  %816 = load i64, i64* %29, align 8, !dbg !1720
  %817 = load i64, i64* %20, align 8, !dbg !1720
  %818 = icmp ult i64 %816, %817, !dbg !1720
  %819 = load i32, i32* @x.35
  %820 = load i32, i32* @y.36
  %821 = sub i32 %819, 1
  %822 = mul i32 %819, %821
  %823 = urem i32 %822, 2
  %824 = icmp eq i32 %823, 0
  %825 = icmp slt i32 %820, 10
  %826 = or i1 %824, %825
  br i1 %826, label %originalBBpart2167, label %originalBB165alteredBB

originalBBpart2167:                               ; preds = %originalBB165
  br i1 %818, label %827, label %847, !dbg !1723

827:                                              ; preds = %originalBBpart2167
  %828 = load i32, i32* @x.35
  %829 = load i32, i32* @y.36
  %830 = sub i32 %828, 1
  %831 = mul i32 %828, %830
  %832 = urem i32 %831, 2
  %833 = icmp eq i32 %832, 0
  %834 = icmp slt i32 %829, 10
  %835 = or i1 %833, %834
  br i1 %835, label %originalBB169, label %originalBB169alteredBB

originalBB169:                                    ; preds = %827, %originalBB169alteredBB
  %836 = load i8*, i8** %19, align 8, !dbg !1720
  %837 = load i64, i64* %29, align 8, !dbg !1720
  %838 = getelementptr inbounds i8, i8* %836, i64 %837, !dbg !1720
  store i8 39, i8* %838, align 1, !dbg !1720
  %839 = load i32, i32* @x.35
  %840 = load i32, i32* @y.36
  %841 = sub i32 %839, 1
  %842 = mul i32 %839, %841
  %843 = urem i32 %842, 2
  %844 = icmp eq i32 %843, 0
  %845 = icmp slt i32 %840, 10
  %846 = or i1 %844, %845
  br i1 %846, label %originalBBpart2171, label %originalBB169alteredBB

originalBBpart2171:                               ; preds = %originalBB169
  br label %847, !dbg !1720

847:                                              ; preds = %originalBBpart2171, %originalBBpart2167
  %848 = load i64, i64* %29, align 8, !dbg !1723
  %849 = add i64 %848, 1, !dbg !1723
  store i64 %849, i64* %29, align 8, !dbg !1723
  br label %850, !dbg !1723

850:                                              ; preds = %847
  store i8 1, i8* %36, align 1, !dbg !1710
  br label %851, !dbg !1710

851:                                              ; preds = %850, %originalBBpart2129, %660
  %852 = load i32, i32* @x.35
  %853 = load i32, i32* @y.36
  %854 = sub i32 %852, 1
  %855 = mul i32 %852, %854
  %856 = urem i32 %855, 2
  %857 = icmp eq i32 %856, 0
  %858 = icmp slt i32 %853, 10
  %859 = or i1 %857, %858
  br i1 %859, label %originalBB173, label %originalBB173alteredBB

originalBB173:                                    ; preds = %851, %originalBB173alteredBB
  %860 = load i32, i32* @x.35
  %861 = load i32, i32* @y.36
  %862 = sub i32 %860, 1
  %863 = mul i32 %860, %862
  %864 = urem i32 %863, 2
  %865 = icmp eq i32 %864, 0
  %866 = icmp slt i32 %861, 10
  %867 = or i1 %865, %866
  br i1 %867, label %originalBBpart2175, label %originalBB173alteredBB

originalBBpart2175:                               ; preds = %originalBB173
  br label %868, !dbg !1707

868:                                              ; preds = %originalBBpart2175
  %869 = load i64, i64* %29, align 8, !dbg !1724
  %870 = load i64, i64* %20, align 8, !dbg !1724
  %871 = icmp ult i64 %869, %870, !dbg !1724
  br i1 %871, label %872, label %892, !dbg !1727

872:                                              ; preds = %868
  %873 = load i32, i32* @x.35
  %874 = load i32, i32* @y.36
  %875 = sub i32 %873, 1
  %876 = mul i32 %873, %875
  %877 = urem i32 %876, 2
  %878 = icmp eq i32 %877, 0
  %879 = icmp slt i32 %874, 10
  %880 = or i1 %878, %879
  br i1 %880, label %originalBB177, label %originalBB177alteredBB

originalBB177:                                    ; preds = %872, %originalBB177alteredBB
  %881 = load i8*, i8** %19, align 8, !dbg !1724
  %882 = load i64, i64* %29, align 8, !dbg !1724
  %883 = getelementptr inbounds i8, i8* %881, i64 %882, !dbg !1724
  store i8 92, i8* %883, align 1, !dbg !1724
  %884 = load i32, i32* @x.35
  %885 = load i32, i32* @y.36
  %886 = sub i32 %884, 1
  %887 = mul i32 %884, %886
  %888 = urem i32 %887, 2
  %889 = icmp eq i32 %888, 0
  %890 = icmp slt i32 %885, 10
  %891 = or i1 %889, %890
  br i1 %891, label %originalBBpart2179, label %originalBB177alteredBB

originalBBpart2179:                               ; preds = %originalBB177
  br label %892, !dbg !1724

892:                                              ; preds = %originalBBpart2179, %868
  %893 = load i32, i32* @x.35
  %894 = load i32, i32* @y.36
  %895 = sub i32 %893, 1
  %896 = mul i32 %893, %895
  %897 = urem i32 %896, 2
  %898 = icmp eq i32 %897, 0
  %899 = icmp slt i32 %894, 10
  %900 = or i1 %898, %899
  br i1 %900, label %originalBB181, label %originalBB181alteredBB

originalBB181:                                    ; preds = %892, %originalBB181alteredBB
  %901 = load i64, i64* %29, align 8, !dbg !1727
  %902 = add i64 %901, 1, !dbg !1727
  store i64 %902, i64* %29, align 8, !dbg !1727
  %903 = load i32, i32* @x.35
  %904 = load i32, i32* @y.36
  %905 = sub i32 %903, 1
  %906 = mul i32 %903, %905
  %907 = urem i32 %906, 2
  %908 = icmp eq i32 %907, 0
  %909 = icmp slt i32 %904, 10
  %910 = or i1 %908, %909
  br i1 %910, label %originalBBpart2194, label %originalBB181alteredBB

originalBBpart2194:                               ; preds = %originalBB181
  br label %911, !dbg !1727

911:                                              ; preds = %originalBBpart2194
  br label %912, !dbg !1707

912:                                              ; preds = %911
  %913 = load i32, i32* %23, align 4, !dbg !1728
  %914 = icmp ne i32 %913, 2, !dbg !1730
  br i1 %914, label %915, label %1025, !dbg !1731

915:                                              ; preds = %912
  %916 = load i32, i32* @x.35
  %917 = load i32, i32* @y.36
  %918 = sub i32 %916, 1
  %919 = mul i32 %916, %918
  %920 = urem i32 %919, 2
  %921 = icmp eq i32 %920, 0
  %922 = icmp slt i32 %917, 10
  %923 = or i1 %921, %922
  br i1 %923, label %originalBB196, label %originalBB196alteredBB

originalBB196:                                    ; preds = %915, %originalBB196alteredBB
  %924 = load i64, i64* %28, align 8, !dbg !1732
  %925 = add i64 %924, 1, !dbg !1733
  %926 = load i64, i64* %22, align 8, !dbg !1734
  %927 = icmp ult i64 %925, %926, !dbg !1735
  %928 = load i32, i32* @x.35
  %929 = load i32, i32* @y.36
  %930 = sub i32 %928, 1
  %931 = mul i32 %928, %930
  %932 = urem i32 %931, 2
  %933 = icmp eq i32 %932, 0
  %934 = icmp slt i32 %929, 10
  %935 = or i1 %933, %934
  br i1 %935, label %originalBBpart2208, label %originalBB196alteredBB

originalBBpart2208:                               ; preds = %originalBB196
  br i1 %927, label %936, label %1025, !dbg !1736

936:                                              ; preds = %originalBBpart2208
  %937 = load i8*, i8** %21, align 8, !dbg !1737
  %938 = load i64, i64* %28, align 8, !dbg !1738
  %939 = add i64 %938, 1, !dbg !1739
  %940 = getelementptr inbounds i8, i8* %937, i64 %939, !dbg !1737
  %941 = load i8, i8* %940, align 1, !dbg !1737
  %942 = sext i8 %941 to i32, !dbg !1737
  %943 = icmp sle i32 48, %942, !dbg !1740
  br i1 %943, label %944, label %1025, !dbg !1741

944:                                              ; preds = %936
  %945 = load i8*, i8** %21, align 8, !dbg !1742
  %946 = load i64, i64* %28, align 8, !dbg !1743
  %947 = add i64 %946, 1, !dbg !1744
  %948 = getelementptr inbounds i8, i8* %945, i64 %947, !dbg !1742
  %949 = load i8, i8* %948, align 1, !dbg !1742
  %950 = sext i8 %949 to i32, !dbg !1742
  %951 = icmp sle i32 %950, 57, !dbg !1745
  br i1 %951, label %952, label %1025, !dbg !1746

952:                                              ; preds = %944
  %953 = load i32, i32* @x.35
  %954 = load i32, i32* @y.36
  %955 = sub i32 %953, 1
  %956 = mul i32 %953, %955
  %957 = urem i32 %956, 2
  %958 = icmp eq i32 %957, 0
  %959 = icmp slt i32 %954, 10
  %960 = or i1 %958, %959
  br i1 %960, label %originalBB210, label %originalBB210alteredBB

originalBB210:                                    ; preds = %952, %originalBB210alteredBB
  %961 = load i32, i32* @x.35
  %962 = load i32, i32* @y.36
  %963 = sub i32 %961, 1
  %964 = mul i32 %961, %963
  %965 = urem i32 %964, 2
  %966 = icmp eq i32 %965, 0
  %967 = icmp slt i32 %962, 10
  %968 = or i1 %966, %967
  br i1 %968, label %originalBBpart2213, label %originalBB210alteredBB

originalBBpart2213:                               ; preds = %originalBB210
  br label %969, !dbg !1747

969:                                              ; preds = %originalBBpart2213
  %970 = load i64, i64* %29, align 8, !dbg !1749
  %971 = load i64, i64* %20, align 8, !dbg !1749
  %972 = icmp ult i64 %970, %971, !dbg !1749
  br i1 %972, label %973, label %977, !dbg !1752

973:                                              ; preds = %969
  %974 = load i8*, i8** %19, align 8, !dbg !1749
  %975 = load i64, i64* %29, align 8, !dbg !1749
  %976 = getelementptr inbounds i8, i8* %974, i64 %975, !dbg !1749
  store i8 48, i8* %976, align 1, !dbg !1749
  br label %977, !dbg !1749

977:                                              ; preds = %973, %969
  %978 = load i32, i32* @x.35
  %979 = load i32, i32* @y.36
  %980 = sub i32 %978, 1
  %981 = mul i32 %978, %980
  %982 = urem i32 %981, 2
  %983 = icmp eq i32 %982, 0
  %984 = icmp slt i32 %979, 10
  %985 = or i1 %983, %984
  br i1 %985, label %originalBB215, label %originalBB215alteredBB

originalBB215:                                    ; preds = %977, %originalBB215alteredBB
  %986 = load i64, i64* %29, align 8, !dbg !1752
  %987 = add i64 %986, 1, !dbg !1752
  store i64 %987, i64* %29, align 8, !dbg !1752
  %988 = load i32, i32* @x.35
  %989 = load i32, i32* @y.36
  %990 = sub i32 %988, 1
  %991 = mul i32 %988, %990
  %992 = urem i32 %991, 2
  %993 = icmp eq i32 %992, 0
  %994 = icmp slt i32 %989, 10
  %995 = or i1 %993, %994
  br i1 %995, label %originalBBpart2225, label %originalBB215alteredBB

originalBBpart2225:                               ; preds = %originalBB215
  br label %996, !dbg !1752

996:                                              ; preds = %originalBBpart2225
  %997 = load i32, i32* @x.35
  %998 = load i32, i32* @y.36
  %999 = sub i32 %997, 1
  %1000 = mul i32 %997, %999
  %1001 = urem i32 %1000, 2
  %1002 = icmp eq i32 %1001, 0
  %1003 = icmp slt i32 %998, 10
  %1004 = or i1 %1002, %1003
  br i1 %1004, label %originalBB227, label %originalBB227alteredBB

originalBB227:                                    ; preds = %996, %originalBB227alteredBB
  %1005 = load i32, i32* @x.35
  %1006 = load i32, i32* @y.36
  %1007 = sub i32 %1005, 1
  %1008 = mul i32 %1005, %1007
  %1009 = urem i32 %1008, 2
  %1010 = icmp eq i32 %1009, 0
  %1011 = icmp slt i32 %1006, 10
  %1012 = or i1 %1010, %1011
  br i1 %1012, label %originalBBpart2229, label %originalBB227alteredBB

originalBBpart2229:                               ; preds = %originalBB227
  br label %1013, !dbg !1753

1013:                                             ; preds = %originalBBpart2229
  %1014 = load i64, i64* %29, align 8, !dbg !1754
  %1015 = load i64, i64* %20, align 8, !dbg !1754
  %1016 = icmp ult i64 %1014, %1015, !dbg !1754
  br i1 %1016, label %1017, label %1021, !dbg !1757

1017:                                             ; preds = %1013
  %1018 = load i8*, i8** %19, align 8, !dbg !1754
  %1019 = load i64, i64* %29, align 8, !dbg !1754
  %1020 = getelementptr inbounds i8, i8* %1018, i64 %1019, !dbg !1754
  store i8 48, i8* %1020, align 1, !dbg !1754
  br label %1021, !dbg !1754

1021:                                             ; preds = %1017, %1013
  %1022 = load i64, i64* %29, align 8, !dbg !1757
  %1023 = add i64 %1022, 1, !dbg !1757
  store i64 %1023, i64* %29, align 8, !dbg !1757
  br label %1024, !dbg !1757

1024:                                             ; preds = %1021
  br label %1025, !dbg !1758

1025:                                             ; preds = %1024, %944, %936, %originalBBpart2208, %912
  store i8 48, i8* %39, align 1, !dbg !1759
  br label %1080, !dbg !1760

1026:                                             ; preds = %620
  %1027 = load i32, i32* @x.35
  %1028 = load i32, i32* @y.36
  %1029 = sub i32 %1027, 1
  %1030 = mul i32 %1027, %1029
  %1031 = urem i32 %1030, 2
  %1032 = icmp eq i32 %1031, 0
  %1033 = icmp slt i32 %1028, 10
  %1034 = or i1 %1032, %1033
  br i1 %1034, label %originalBB231, label %originalBB231alteredBB

originalBB231:                                    ; preds = %1026, %originalBB231alteredBB
  %1035 = load i32, i32* %24, align 4, !dbg !1761
  %1036 = and i32 %1035, 1, !dbg !1763
  %1037 = icmp ne i32 %1036, 0, !dbg !1763
  %1038 = load i32, i32* @x.35
  %1039 = load i32, i32* @y.36
  %1040 = sub i32 %1038, 1
  %1041 = mul i32 %1038, %1040
  %1042 = urem i32 %1041, 2
  %1043 = icmp eq i32 %1042, 0
  %1044 = icmp slt i32 %1039, 10
  %1045 = or i1 %1043, %1044
  br i1 %1045, label %originalBBpart2245, label %originalBB231alteredBB

originalBBpart2245:                               ; preds = %originalBB231
  br i1 %1037, label %1046, label %1063, !dbg !1764

1046:                                             ; preds = %originalBBpart2245
  %1047 = load i32, i32* @x.35
  %1048 = load i32, i32* @y.36
  %1049 = sub i32 %1047, 1
  %1050 = mul i32 %1047, %1049
  %1051 = urem i32 %1050, 2
  %1052 = icmp eq i32 %1051, 0
  %1053 = icmp slt i32 %1048, 10
  %1054 = or i1 %1052, %1053
  br i1 %1054, label %originalBB247, label %originalBB247alteredBB

originalBB247:                                    ; preds = %1046, %originalBB247alteredBB
  %1055 = load i32, i32* @x.35
  %1056 = load i32, i32* @y.36
  %1057 = sub i32 %1055, 1
  %1058 = mul i32 %1055, %1057
  %1059 = urem i32 %1058, 2
  %1060 = icmp eq i32 %1059, 0
  %1061 = icmp slt i32 %1056, 10
  %1062 = or i1 %1060, %1061
  br i1 %1062, label %originalBBpart2249, label %originalBB247alteredBB

originalBBpart2249:                               ; preds = %originalBB247
  br label %3888, !dbg !1765

1063:                                             ; preds = %originalBBpart2245
  %1064 = load i32, i32* @x.35
  %1065 = load i32, i32* @y.36
  %1066 = sub i32 %1064, 1
  %1067 = mul i32 %1064, %1066
  %1068 = urem i32 %1067, 2
  %1069 = icmp eq i32 %1068, 0
  %1070 = icmp slt i32 %1065, 10
  %1071 = or i1 %1069, %1070
  br i1 %1071, label %originalBB251, label %originalBB251alteredBB

originalBB251:                                    ; preds = %1063, %originalBB251alteredBB
  %1072 = load i32, i32* @x.35
  %1073 = load i32, i32* @y.36
  %1074 = sub i32 %1072, 1
  %1075 = mul i32 %1072, %1074
  %1076 = urem i32 %1075, 2
  %1077 = icmp eq i32 %1076, 0
  %1078 = icmp slt i32 %1073, 10
  %1079 = or i1 %1077, %1078
  br i1 %1079, label %originalBBpart2253, label %originalBB251alteredBB

originalBBpart2253:                               ; preds = %originalBB251
  br label %1080

1080:                                             ; preds = %originalBBpart2253, %1025
  %1081 = load i32, i32* @x.35
  %1082 = load i32, i32* @y.36
  %1083 = sub i32 %1081, 1
  %1084 = mul i32 %1081, %1083
  %1085 = urem i32 %1084, 2
  %1086 = icmp eq i32 %1085, 0
  %1087 = icmp slt i32 %1082, 10
  %1088 = or i1 %1086, %1087
  br i1 %1088, label %originalBB255, label %originalBB255alteredBB

originalBB255:                                    ; preds = %1080, %originalBB255alteredBB
  %1089 = load i32, i32* @x.35
  %1090 = load i32, i32* @y.36
  %1091 = sub i32 %1089, 1
  %1092 = mul i32 %1089, %1091
  %1093 = urem i32 %1092, 2
  %1094 = icmp eq i32 %1093, 0
  %1095 = icmp slt i32 %1090, 10
  %1096 = or i1 %1094, %1095
  br i1 %1096, label %originalBBpart2257, label %originalBB255alteredBB

originalBBpart2257:                               ; preds = %originalBB255
  br label %3359, !dbg !1766

1097:                                             ; preds = %originalBBpart2117
  %1098 = load i32, i32* %23, align 4, !dbg !1767
  switch i32 %1098, label %1409 [
    i32 2, label %1099
    i32 5, label %1120
  ], !dbg !1768

1099:                                             ; preds = %1097
  %1100 = load i32, i32* @x.35
  %1101 = load i32, i32* @y.36
  %1102 = sub i32 %1100, 1
  %1103 = mul i32 %1100, %1102
  %1104 = urem i32 %1103, 2
  %1105 = icmp eq i32 %1104, 0
  %1106 = icmp slt i32 %1101, 10
  %1107 = or i1 %1105, %1106
  br i1 %1107, label %originalBB259, label %originalBB259alteredBB

originalBB259:                                    ; preds = %1099, %originalBB259alteredBB
  %1108 = load i8, i8* %35, align 1, !dbg !1769
  %1109 = trunc i8 %1108 to i1, !dbg !1769
  %1110 = load i32, i32* @x.35
  %1111 = load i32, i32* @y.36
  %1112 = sub i32 %1110, 1
  %1113 = mul i32 %1110, %1112
  %1114 = urem i32 %1113, 2
  %1115 = icmp eq i32 %1114, 0
  %1116 = icmp slt i32 %1111, 10
  %1117 = or i1 %1115, %1116
  br i1 %1117, label %originalBBpart2261, label %originalBB259alteredBB

originalBBpart2261:                               ; preds = %originalBB259
  br i1 %1109, label %1118, label %1119, !dbg !1772

1118:                                             ; preds = %originalBBpart2261
  br label %4197, !dbg !1773

1119:                                             ; preds = %originalBBpart2261
  br label %1410, !dbg !1774

1120:                                             ; preds = %1097
  %1121 = load i32, i32* %24, align 4, !dbg !1775
  %1122 = and i32 %1121, 4, !dbg !1777
  %1123 = icmp ne i32 %1122, 0, !dbg !1777
  br i1 %1123, label %1124, label %1392, !dbg !1778

1124:                                             ; preds = %1120
  %1125 = load i64, i64* %28, align 8, !dbg !1779
  %1126 = add i64 %1125, 2, !dbg !1780
  %1127 = load i64, i64* %22, align 8, !dbg !1781
  %1128 = trunc i64 %1127 to i32
  %1129 = mul i32 %1128, -4
  %1130 = trunc i64 2 to i32
  %1131 = mul i32 %1130, 3
  %1132 = add i32 %1131, -5
  %1133 = mul i32 %1129, %1129
  %1134 = mul i32 %1132, %1132
  %1135 = add i32 %1133, %1134
  %1136 = mul i32 %1129, %1132
  %1137 = mul i32 %1136, 2
  %1138 = sub i32 %1135, %1137
  %1139 = mul i32 %1138, -2
  %1140 = add i32 %1139, -4
  %1141 = icmp ne i32 %1140, -2
  br i1 %1141, label %1159, label %1142

1142:                                             ; preds = %1124
  %1143 = load i32, i32* @x.35
  %1144 = load i32, i32* @y.36
  %1145 = sub i32 %1143, 1
  %1146 = mul i32 %1143, %1145
  %1147 = urem i32 %1146, 2
  %1148 = icmp eq i32 %1147, 0
  %1149 = icmp slt i32 %1144, 10
  %1150 = or i1 %1148, %1149
  br i1 %1150, label %originalBB263, label %originalBB263alteredBB

originalBB263:                                    ; preds = %1142, %originalBB263alteredBB
  %1151 = load i32, i32* @x.35
  %1152 = load i32, i32* @y.36
  %1153 = sub i32 %1151, 1
  %1154 = mul i32 %1151, %1153
  %1155 = urem i32 %1154, 2
  %1156 = icmp eq i32 %1155, 0
  %1157 = icmp slt i32 %1152, 10
  %1158 = or i1 %1156, %1157
  br i1 %1158, label %originalBBpart2265, label %originalBB263alteredBB

originalBBpart2265:                               ; preds = %originalBB263
  ret i64 0

1159:                                             ; preds = %1124
  %1160 = icmp ult i64 %1126, %1127, !dbg !1782
  br i1 %1160, label %1161, label %1392, !dbg !1783

1161:                                             ; preds = %1159
  %1162 = load i8*, i8** %21, align 8, !dbg !1784
  %1163 = load i64, i64* %28, align 8, !dbg !1785
  %1164 = add i64 %1163, 1, !dbg !1786
  %1165 = trunc i64 1 to i32
  %1166 = mul i32 %1165, 4
  %1167 = add i32 %1166, 3
  %1168 = trunc i64 %1163 to i32
  %1169 = mul i32 %1168, 2
  %1170 = add i32 %1169, 1
  %1171 = mul i32 %1167, %1167
  %1172 = mul i32 %1170, %1170
  %1173 = mul i32 %1172, 34
  %1174 = sub i32 %1171, %1173
  %1175 = mul i32 %1174, -2
  %1176 = add i32 %1175, -2
  %1177 = icmp ne i32 %1176, -4
  br i1 %1177, label %1195, label %1178

1178:                                             ; preds = %1161
  %1179 = load i32, i32* @x.35
  %1180 = load i32, i32* @y.36
  %1181 = sub i32 %1179, 1
  %1182 = mul i32 %1179, %1181
  %1183 = urem i32 %1182, 2
  %1184 = icmp eq i32 %1183, 0
  %1185 = icmp slt i32 %1180, 10
  %1186 = or i1 %1184, %1185
  br i1 %1186, label %originalBB267, label %originalBB267alteredBB

originalBB267:                                    ; preds = %1178, %originalBB267alteredBB
  %1187 = load i32, i32* @x.35
  %1188 = load i32, i32* @y.36
  %1189 = sub i32 %1187, 1
  %1190 = mul i32 %1187, %1189
  %1191 = urem i32 %1190, 2
  %1192 = icmp eq i32 %1191, 0
  %1193 = icmp slt i32 %1188, 10
  %1194 = or i1 %1192, %1193
  br i1 %1194, label %originalBBpart2269, label %originalBB267alteredBB

originalBBpart2269:                               ; preds = %originalBB267
  ret i64 0

1195:                                             ; preds = %1161
  %1196 = load i32, i32* @x.35
  %1197 = load i32, i32* @y.36
  %1198 = sub i32 %1196, 1
  %1199 = mul i32 %1196, %1198
  %1200 = urem i32 %1199, 2
  %1201 = icmp eq i32 %1200, 0
  %1202 = icmp slt i32 %1197, 10
  %1203 = or i1 %1201, %1202
  br i1 %1203, label %originalBB271, label %originalBB271alteredBB

originalBB271:                                    ; preds = %1195, %originalBB271alteredBB
  %1204 = getelementptr inbounds i8, i8* %1162, i64 %1164, !dbg !1784
  %1205 = load i8, i8* %1204, align 1, !dbg !1784
  %1206 = sext i8 %1205 to i32, !dbg !1784
  %1207 = icmp eq i32 %1206, 63, !dbg !1787
  %1208 = load i32, i32* @x.35
  %1209 = load i32, i32* @y.36
  %1210 = sub i32 %1208, 1
  %1211 = mul i32 %1208, %1210
  %1212 = urem i32 %1211, 2
  %1213 = icmp eq i32 %1212, 0
  %1214 = icmp slt i32 %1209, 10
  %1215 = or i1 %1213, %1214
  br i1 %1215, label %originalBBpart2273, label %originalBB271alteredBB

originalBBpart2273:                               ; preds = %originalBB271
  br i1 %1207, label %1216, label %1392, !dbg !1788

1216:                                             ; preds = %originalBBpart2273
  %1217 = load i8*, i8** %21, align 8, !dbg !1789
  %1218 = load i64, i64* %28, align 8, !dbg !1790
  %1219 = add i64 %1218, 2, !dbg !1791
  %1220 = getelementptr inbounds i8, i8* %1217, i64 %1219, !dbg !1789
  %1221 = load i8, i8* %1220, align 1, !dbg !1789
  %1222 = sext i8 %1221 to i32, !dbg !1789
  switch i32 %1222, label %1374 [
    i32 33, label %1223
    i32 39, label %1223
    i32 40, label %1223
    i32 41, label %1223
    i32 45, label %1223
    i32 47, label %1223
    i32 60, label %1223
    i32 61, label %1223
    i32 62, label %1223
  ], !dbg !1792

1223:                                             ; preds = %1216, %1216, %1216, %1216, %1216, %1216, %1216, %1216, %1216
  %1224 = load i8, i8* %35, align 1, !dbg !1793
  %1225 = trunc i8 %1224 to i1, !dbg !1793
  br i1 %1225, label %1226, label %1227, !dbg !1796

1226:                                             ; preds = %1223
  br label %4197, !dbg !1797

1227:                                             ; preds = %1223
  %1228 = load i32, i32* @x.35
  %1229 = load i32, i32* @y.36
  %1230 = sub i32 %1228, 1
  %1231 = mul i32 %1228, %1230
  %1232 = urem i32 %1231, 2
  %1233 = icmp eq i32 %1232, 0
  %1234 = icmp slt i32 %1229, 10
  %1235 = or i1 %1233, %1234
  br i1 %1235, label %originalBB275, label %originalBB275alteredBB

originalBB275:                                    ; preds = %1227, %originalBB275alteredBB
  %1236 = load i8*, i8** %21, align 8, !dbg !1798
  %1237 = load i64, i64* %28, align 8, !dbg !1799
  %1238 = add i64 %1237, 2, !dbg !1800
  %1239 = getelementptr inbounds i8, i8* %1236, i64 %1238, !dbg !1798
  %1240 = load i8, i8* %1239, align 1, !dbg !1798
  store i8 %1240, i8* %39, align 1, !dbg !1801
  %1241 = load i64, i64* %28, align 8, !dbg !1802
  %1242 = add i64 %1241, 2, !dbg !1802
  store i64 %1242, i64* %28, align 8, !dbg !1802
  %1243 = load i32, i32* @x.35
  %1244 = load i32, i32* @y.36
  %1245 = sub i32 %1243, 1
  %1246 = mul i32 %1243, %1245
  %1247 = urem i32 %1246, 2
  %1248 = icmp eq i32 %1247, 0
  %1249 = icmp slt i32 %1244, 10
  %1250 = or i1 %1248, %1249
  br i1 %1250, label %originalBBpart2293, label %originalBB275alteredBB

originalBBpart2293:                               ; preds = %originalBB275
  br label %1251, !dbg !1803

1251:                                             ; preds = %originalBBpart2293
  %1252 = load i64, i64* %29, align 8, !dbg !1804
  %1253 = load i64, i64* %20, align 8, !dbg !1804
  %1254 = icmp ult i64 %1252, %1253, !dbg !1804
  br i1 %1254, label %1255, label %1259, !dbg !1807

1255:                                             ; preds = %1251
  %1256 = load i8*, i8** %19, align 8, !dbg !1804
  %1257 = load i64, i64* %29, align 8, !dbg !1804
  %1258 = getelementptr inbounds i8, i8* %1256, i64 %1257, !dbg !1804
  store i8 63, i8* %1258, align 1, !dbg !1804
  br label %1259, !dbg !1804

1259:                                             ; preds = %1255, %1251
  %1260 = load i64, i64* %29, align 8, !dbg !1807
  %1261 = add i64 %1260, 1, !dbg !1807
  store i64 %1261, i64* %29, align 8, !dbg !1807
  br label %1262, !dbg !1807

1262:                                             ; preds = %1259
  br label %1263, !dbg !1808

1263:                                             ; preds = %1262
  %1264 = load i64, i64* %29, align 8, !dbg !1809
  %1265 = load i64, i64* %20, align 8, !dbg !1809
  %1266 = icmp ult i64 %1264, %1265, !dbg !1809
  br i1 %1266, label %1267, label %1271, !dbg !1812

1267:                                             ; preds = %1263
  %1268 = load i8*, i8** %19, align 8, !dbg !1809
  %1269 = load i64, i64* %29, align 8, !dbg !1809
  %1270 = getelementptr inbounds i8, i8* %1268, i64 %1269, !dbg !1809
  store i8 34, i8* %1270, align 1, !dbg !1809
  br label %1271, !dbg !1809

1271:                                             ; preds = %1267, %1263
  %1272 = load i64, i64* %29, align 8, !dbg !1812
  %1273 = add i64 %1272, 1, !dbg !1812
  %1274 = trunc i64 1 to i32
  %1275 = mul i32 %1274, -5
  %1276 = add i32 %1275, -5
  %1277 = mul i32 %1276, %1276
  %1278 = sub i32 %1277, %1276
  %1279 = srem i32 %1278, 2
  %1280 = mul i32 %1279, 5
  %1281 = add i32 %1280, 2
  %1282 = icmp eq i32 %1281, 2
  br i1 %1282, label %1300, label %1283

1283:                                             ; preds = %1271
  %1284 = load i32, i32* @x.35
  %1285 = load i32, i32* @y.36
  %1286 = sub i32 %1284, 1
  %1287 = mul i32 %1284, %1286
  %1288 = urem i32 %1287, 2
  %1289 = icmp eq i32 %1288, 0
  %1290 = icmp slt i32 %1285, 10
  %1291 = or i1 %1289, %1290
  br i1 %1291, label %originalBB295, label %originalBB295alteredBB

originalBB295:                                    ; preds = %1283, %originalBB295alteredBB
  %1292 = load i32, i32* @x.35
  %1293 = load i32, i32* @y.36
  %1294 = sub i32 %1292, 1
  %1295 = mul i32 %1292, %1294
  %1296 = urem i32 %1295, 2
  %1297 = icmp eq i32 %1296, 0
  %1298 = icmp slt i32 %1293, 10
  %1299 = or i1 %1297, %1298
  br i1 %1299, label %originalBBpart2297, label %originalBB295alteredBB

originalBBpart2297:                               ; preds = %originalBB295
  ret i64 0

1300:                                             ; preds = %1271
  store i64 %1273, i64* %29, align 8, !dbg !1812
  br label %1301, !dbg !1812

1301:                                             ; preds = %1300
  br label %1302, !dbg !1813

1302:                                             ; preds = %1301
  %1303 = load i32, i32* @x.35
  %1304 = load i32, i32* @y.36
  %1305 = sub i32 %1303, 1
  %1306 = mul i32 %1303, %1305
  %1307 = urem i32 %1306, 2
  %1308 = icmp eq i32 %1307, 0
  %1309 = icmp slt i32 %1304, 10
  %1310 = or i1 %1308, %1309
  br i1 %1310, label %originalBB299, label %originalBB299alteredBB

originalBB299:                                    ; preds = %1302, %originalBB299alteredBB
  %1311 = load i64, i64* %29, align 8, !dbg !1814
  %1312 = load i64, i64* %20, align 8, !dbg !1814
  %1313 = icmp ult i64 %1311, %1312, !dbg !1814
  %1314 = load i32, i32* @x.35
  %1315 = load i32, i32* @y.36
  %1316 = sub i32 %1314, 1
  %1317 = mul i32 %1314, %1316
  %1318 = urem i32 %1317, 2
  %1319 = icmp eq i32 %1318, 0
  %1320 = icmp slt i32 %1315, 10
  %1321 = or i1 %1319, %1320
  br i1 %1321, label %originalBBpart2301, label %originalBB299alteredBB

originalBBpart2301:                               ; preds = %originalBB299
  br i1 %1313, label %1322, label %1326, !dbg !1817

1322:                                             ; preds = %originalBBpart2301
  %1323 = load i8*, i8** %19, align 8, !dbg !1814
  %1324 = load i64, i64* %29, align 8, !dbg !1814
  %1325 = getelementptr inbounds i8, i8* %1323, i64 %1324, !dbg !1814
  store i8 34, i8* %1325, align 1, !dbg !1814
  br label %1326, !dbg !1814

1326:                                             ; preds = %1322, %originalBBpart2301
  %1327 = load i32, i32* @x.35
  %1328 = load i32, i32* @y.36
  %1329 = sub i32 %1327, 1
  %1330 = mul i32 %1327, %1329
  %1331 = urem i32 %1330, 2
  %1332 = icmp eq i32 %1331, 0
  %1333 = icmp slt i32 %1328, 10
  %1334 = or i1 %1332, %1333
  br i1 %1334, label %originalBB303, label %originalBB303alteredBB

originalBB303:                                    ; preds = %1326, %originalBB303alteredBB
  %1335 = load i64, i64* %29, align 8, !dbg !1817
  %1336 = add i64 %1335, 1, !dbg !1817
  store i64 %1336, i64* %29, align 8, !dbg !1817
  %1337 = load i32, i32* @x.35
  %1338 = load i32, i32* @y.36
  %1339 = sub i32 %1337, 1
  %1340 = mul i32 %1337, %1339
  %1341 = urem i32 %1340, 2
  %1342 = icmp eq i32 %1341, 0
  %1343 = icmp slt i32 %1338, 10
  %1344 = or i1 %1342, %1343
  br i1 %1344, label %originalBBpart2314, label %originalBB303alteredBB

originalBBpart2314:                               ; preds = %originalBB303
  br label %1345, !dbg !1817

1345:                                             ; preds = %originalBBpart2314
  br label %1346, !dbg !1818

1346:                                             ; preds = %1345
  %1347 = load i64, i64* %29, align 8, !dbg !1819
  %1348 = load i64, i64* %20, align 8, !dbg !1819
  %1349 = icmp ult i64 %1347, %1348, !dbg !1819
  br i1 %1349, label %1350, label %1354, !dbg !1822

1350:                                             ; preds = %1346
  %1351 = load i8*, i8** %19, align 8, !dbg !1819
  %1352 = load i64, i64* %29, align 8, !dbg !1819
  %1353 = getelementptr inbounds i8, i8* %1351, i64 %1352, !dbg !1819
  store i8 63, i8* %1353, align 1, !dbg !1819
  br label %1354, !dbg !1819

1354:                                             ; preds = %1350, %1346
  %1355 = load i64, i64* %29, align 8, !dbg !1822
  %1356 = add i64 %1355, 1, !dbg !1822
  store i64 %1356, i64* %29, align 8, !dbg !1822
  br label %1357, !dbg !1822

1357:                                             ; preds = %1354
  %1358 = load i32, i32* @x.35
  %1359 = load i32, i32* @y.36
  %1360 = sub i32 %1358, 1
  %1361 = mul i32 %1358, %1360
  %1362 = urem i32 %1361, 2
  %1363 = icmp eq i32 %1362, 0
  %1364 = icmp slt i32 %1359, 10
  %1365 = or i1 %1363, %1364
  br i1 %1365, label %originalBB316, label %originalBB316alteredBB

originalBB316:                                    ; preds = %1357, %originalBB316alteredBB
  %1366 = load i32, i32* @x.35
  %1367 = load i32, i32* @y.36
  %1368 = sub i32 %1366, 1
  %1369 = mul i32 %1366, %1368
  %1370 = urem i32 %1369, 2
  %1371 = icmp eq i32 %1370, 0
  %1372 = icmp slt i32 %1367, 10
  %1373 = or i1 %1371, %1372
  br i1 %1373, label %originalBBpart2318, label %originalBB316alteredBB

originalBBpart2318:                               ; preds = %originalBB316
  br label %1391, !dbg !1823

1374:                                             ; preds = %1216
  %1375 = load i32, i32* @x.35
  %1376 = load i32, i32* @y.36
  %1377 = sub i32 %1375, 1
  %1378 = mul i32 %1375, %1377
  %1379 = urem i32 %1378, 2
  %1380 = icmp eq i32 %1379, 0
  %1381 = icmp slt i32 %1376, 10
  %1382 = or i1 %1380, %1381
  br i1 %1382, label %originalBB320, label %originalBB320alteredBB

originalBB320:                                    ; preds = %1374, %originalBB320alteredBB
  %1383 = load i32, i32* @x.35
  %1384 = load i32, i32* @y.36
  %1385 = sub i32 %1383, 1
  %1386 = mul i32 %1383, %1385
  %1387 = urem i32 %1386, 2
  %1388 = icmp eq i32 %1387, 0
  %1389 = icmp slt i32 %1384, 10
  %1390 = or i1 %1388, %1389
  br i1 %1390, label %originalBBpart2322, label %originalBB320alteredBB

originalBBpart2322:                               ; preds = %originalBB320
  br label %1391, !dbg !1824

1391:                                             ; preds = %originalBBpart2322, %originalBBpart2318
  br label %1392, !dbg !1825

1392:                                             ; preds = %1391, %originalBBpart2273, %1159, %1120
  %1393 = load i32, i32* @x.35
  %1394 = load i32, i32* @y.36
  %1395 = sub i32 %1393, 1
  %1396 = mul i32 %1393, %1395
  %1397 = urem i32 %1396, 2
  %1398 = icmp eq i32 %1397, 0
  %1399 = icmp slt i32 %1394, 10
  %1400 = or i1 %1398, %1399
  br i1 %1400, label %originalBB324, label %originalBB324alteredBB

originalBB324:                                    ; preds = %1392, %originalBB324alteredBB
  %1401 = load i32, i32* @x.35
  %1402 = load i32, i32* @y.36
  %1403 = sub i32 %1401, 1
  %1404 = mul i32 %1401, %1403
  %1405 = urem i32 %1404, 2
  %1406 = icmp eq i32 %1405, 0
  %1407 = icmp slt i32 %1402, 10
  %1408 = or i1 %1406, %1407
  br i1 %1408, label %originalBBpart2326, label %originalBB324alteredBB

originalBBpart2326:                               ; preds = %originalBB324
  br label %1410, !dbg !1826

1409:                                             ; preds = %1097
  br label %1410, !dbg !1827

1410:                                             ; preds = %1409, %originalBBpart2326, %1119
  %1411 = load i32, i32* @x.35
  %1412 = load i32, i32* @y.36
  %1413 = sub i32 %1411, 1
  %1414 = mul i32 %1411, %1413
  %1415 = urem i32 %1414, 2
  %1416 = icmp eq i32 %1415, 0
  %1417 = icmp slt i32 %1412, 10
  %1418 = or i1 %1416, %1417
  br i1 %1418, label %originalBB328, label %originalBB328alteredBB

originalBB328:                                    ; preds = %1410, %originalBB328alteredBB
  %1419 = load i32, i32* @x.35
  %1420 = load i32, i32* @y.36
  %1421 = sub i32 %1419, 1
  %1422 = mul i32 %1419, %1421
  %1423 = urem i32 %1422, 2
  %1424 = icmp eq i32 %1423, 0
  %1425 = icmp slt i32 %1420, 10
  %1426 = or i1 %1424, %1425
  br i1 %1426, label %originalBBpart2330, label %originalBB328alteredBB

originalBBpart2330:                               ; preds = %originalBB328
  br label %3359, !dbg !1828

1427:                                             ; preds = %originalBBpart2117
  %1428 = load i32, i32* @x.35
  %1429 = load i32, i32* @y.36
  %1430 = sub i32 %1428, 1
  %1431 = mul i32 %1428, %1430
  %1432 = urem i32 %1431, 2
  %1433 = icmp eq i32 %1432, 0
  %1434 = icmp slt i32 %1429, 10
  %1435 = or i1 %1433, %1434
  br i1 %1435, label %originalBB332, label %originalBB332alteredBB

originalBB332:                                    ; preds = %1427, %originalBB332alteredBB
  store i8 97, i8* %40, align 1, !dbg !1829
  %1436 = load i32, i32* @x.35
  %1437 = load i32, i32* @y.36
  %1438 = sub i32 %1436, 1
  %1439 = mul i32 %1436, %1438
  %1440 = urem i32 %1439, 2
  %1441 = icmp eq i32 %1440, 0
  %1442 = icmp slt i32 %1437, 10
  %1443 = or i1 %1441, %1442
  br i1 %1443, label %originalBBpart2334, label %originalBB332alteredBB

originalBBpart2334:                               ; preds = %originalBB332
  br label %1686, !dbg !1830

1444:                                             ; preds = %originalBBpart2117
  %1445 = load i32, i32* @x.35
  %1446 = load i32, i32* @y.36
  %1447 = sub i32 %1445, 1
  %1448 = mul i32 %1445, %1447
  %1449 = urem i32 %1448, 2
  %1450 = icmp eq i32 %1449, 0
  %1451 = icmp slt i32 %1446, 10
  %1452 = or i1 %1450, %1451
  br i1 %1452, label %originalBB336, label %originalBB336alteredBB

originalBB336:                                    ; preds = %1444, %originalBB336alteredBB
  store i8 98, i8* %40, align 1, !dbg !1831
  %1453 = load i32, i32* @x.35
  %1454 = load i32, i32* @y.36
  %1455 = sub i32 %1453, 1
  %1456 = mul i32 %1453, %1455
  %1457 = urem i32 %1456, 2
  %1458 = icmp eq i32 %1457, 0
  %1459 = icmp slt i32 %1454, 10
  %1460 = or i1 %1458, %1459
  br i1 %1460, label %originalBBpart2338, label %originalBB336alteredBB

originalBBpart2338:                               ; preds = %originalBB336
  br label %1686, !dbg !1832

1461:                                             ; preds = %originalBBpart2117
  store i8 102, i8* %40, align 1, !dbg !1833
  br label %1686, !dbg !1834

1462:                                             ; preds = %originalBBpart2117
  store i8 110, i8* %40, align 1, !dbg !1835
  br label %1630, !dbg !1836

1463:                                             ; preds = %originalBBpart2117
  %1464 = load i32, i32* @x.35
  %1465 = load i32, i32* @y.36
  %1466 = sub i32 %1464, 1
  %1467 = mul i32 %1464, %1466
  %1468 = urem i32 %1467, 2
  %1469 = icmp eq i32 %1468, 0
  %1470 = icmp slt i32 %1465, 10
  %1471 = or i1 %1469, %1470
  br i1 %1471, label %originalBB340, label %originalBB340alteredBB

originalBB340:                                    ; preds = %1463, %originalBB340alteredBB
  store i8 114, i8* %40, align 1, !dbg !1837
  %1472 = load i32, i32* @x.35
  %1473 = load i32, i32* @y.36
  %1474 = sub i32 %1472, 1
  %1475 = mul i32 %1472, %1474
  %1476 = urem i32 %1475, 2
  %1477 = icmp eq i32 %1476, 0
  %1478 = icmp slt i32 %1473, 10
  %1479 = or i1 %1477, %1478
  br i1 %1479, label %originalBBpart2342, label %originalBB340alteredBB

originalBBpart2342:                               ; preds = %originalBB340
  br label %1630, !dbg !1838

1480:                                             ; preds = %originalBBpart2117
  %1481 = load i32, i32* @x.35
  %1482 = load i32, i32* @y.36
  %1483 = sub i32 %1481, 1
  %1484 = mul i32 %1481, %1483
  %1485 = urem i32 %1484, 2
  %1486 = icmp eq i32 %1485, 0
  %1487 = icmp slt i32 %1482, 10
  %1488 = or i1 %1486, %1487
  br i1 %1488, label %originalBB344, label %originalBB344alteredBB

originalBB344:                                    ; preds = %1480, %originalBB344alteredBB
  store i8 116, i8* %40, align 1, !dbg !1839
  %1489 = load i32, i32* @x.35
  %1490 = load i32, i32* @y.36
  %1491 = sub i32 %1489, 1
  %1492 = mul i32 %1489, %1491
  %1493 = urem i32 %1492, 2
  %1494 = icmp eq i32 %1493, 0
  %1495 = icmp slt i32 %1490, 10
  %1496 = or i1 %1494, %1495
  br i1 %1496, label %originalBBpart2346, label %originalBB344alteredBB

originalBBpart2346:                               ; preds = %originalBB344
  br label %1630, !dbg !1840

1497:                                             ; preds = %originalBBpart2117
  %1498 = load i32, i32* @x.35
  %1499 = load i32, i32* @y.36
  %1500 = sub i32 %1498, 1
  %1501 = mul i32 %1498, %1500
  %1502 = urem i32 %1501, 2
  %1503 = icmp eq i32 %1502, 0
  %1504 = icmp slt i32 %1499, 10
  %1505 = or i1 %1503, %1504
  br i1 %1505, label %originalBB348, label %originalBB348alteredBB

originalBB348:                                    ; preds = %1497, %originalBB348alteredBB
  store i8 118, i8* %40, align 1, !dbg !1841
  %1506 = load i32, i32* @x.35
  %1507 = load i32, i32* @y.36
  %1508 = sub i32 %1506, 1
  %1509 = mul i32 %1506, %1508
  %1510 = urem i32 %1509, 2
  %1511 = icmp eq i32 %1510, 0
  %1512 = icmp slt i32 %1507, 10
  %1513 = or i1 %1511, %1512
  br i1 %1513, label %originalBBpart2350, label %originalBB348alteredBB

originalBBpart2350:                               ; preds = %originalBB348
  br label %1686, !dbg !1842

1514:                                             ; preds = %originalBBpart2117
  %1515 = load i8, i8* %39, align 1, !dbg !1843
  store i8 %1515, i8* %40, align 1, !dbg !1844
  %1516 = load i32, i32* %23, align 4, !dbg !1845
  %1517 = icmp eq i32 %1516, 2, !dbg !1847
  br i1 %1517, label %1518, label %1555, !dbg !1848

1518:                                             ; preds = %1514
  %1519 = load i32, i32* @x.35
  %1520 = load i32, i32* @y.36
  %1521 = sub i32 %1519, 1
  %1522 = mul i32 %1519, %1521
  %1523 = urem i32 %1522, 2
  %1524 = icmp eq i32 %1523, 0
  %1525 = icmp slt i32 %1520, 10
  %1526 = or i1 %1524, %1525
  br i1 %1526, label %originalBB352, label %originalBB352alteredBB

originalBB352:                                    ; preds = %1518, %originalBB352alteredBB
  %1527 = load i8, i8* %35, align 1, !dbg !1849
  %1528 = trunc i8 %1527 to i1, !dbg !1849
  %1529 = load i32, i32* @x.35
  %1530 = load i32, i32* @y.36
  %1531 = sub i32 %1529, 1
  %1532 = mul i32 %1529, %1531
  %1533 = urem i32 %1532, 2
  %1534 = icmp eq i32 %1533, 0
  %1535 = icmp slt i32 %1530, 10
  %1536 = or i1 %1534, %1535
  br i1 %1536, label %originalBBpart2354, label %originalBB352alteredBB

originalBBpart2354:                               ; preds = %originalBB352
  br i1 %1528, label %1537, label %1554, !dbg !1852

1537:                                             ; preds = %originalBBpart2354
  %1538 = load i32, i32* @x.35
  %1539 = load i32, i32* @y.36
  %1540 = sub i32 %1538, 1
  %1541 = mul i32 %1538, %1540
  %1542 = urem i32 %1541, 2
  %1543 = icmp eq i32 %1542, 0
  %1544 = icmp slt i32 %1539, 10
  %1545 = or i1 %1543, %1544
  br i1 %1545, label %originalBB356, label %originalBB356alteredBB

originalBB356:                                    ; preds = %1537, %originalBB356alteredBB
  %1546 = load i32, i32* @x.35
  %1547 = load i32, i32* @y.36
  %1548 = sub i32 %1546, 1
  %1549 = mul i32 %1546, %1548
  %1550 = urem i32 %1549, 2
  %1551 = icmp eq i32 %1550, 0
  %1552 = icmp slt i32 %1547, 10
  %1553 = or i1 %1551, %1552
  br i1 %1553, label %originalBBpart2358, label %originalBB356alteredBB

originalBBpart2358:                               ; preds = %originalBB356
  br label %4197, !dbg !1853

1554:                                             ; preds = %originalBBpart2354
  br label %3628, !dbg !1854

1555:                                             ; preds = %1514
  %1556 = load i8, i8* %33, align 1, !dbg !1855
  %1557 = trunc i8 %1556 to i1, !dbg !1855
  br i1 %1557, label %1558, label %1613, !dbg !1857

1558:                                             ; preds = %1555
  %1559 = load i32, i32* @x.35
  %1560 = load i32, i32* @y.36
  %1561 = sub i32 %1559, 1
  %1562 = mul i32 %1559, %1561
  %1563 = urem i32 %1562, 2
  %1564 = icmp eq i32 %1563, 0
  %1565 = icmp slt i32 %1560, 10
  %1566 = or i1 %1564, %1565
  br i1 %1566, label %originalBB360, label %originalBB360alteredBB

originalBB360:                                    ; preds = %1558, %originalBB360alteredBB
  %1567 = load i8, i8* %35, align 1, !dbg !1858
  %1568 = trunc i8 %1567 to i1, !dbg !1858
  %1569 = load i32, i32* @x.35
  %1570 = load i32, i32* @y.36
  %1571 = sub i32 %1569, 1
  %1572 = mul i32 %1569, %1571
  %1573 = urem i32 %1572, 2
  %1574 = icmp eq i32 %1573, 0
  %1575 = icmp slt i32 %1570, 10
  %1576 = or i1 %1574, %1575
  br i1 %1576, label %originalBBpart2362, label %originalBB360alteredBB

originalBBpart2362:                               ; preds = %originalBB360
  br i1 %1568, label %1577, label %1613, !dbg !1859

1577:                                             ; preds = %originalBBpart2362
  %1578 = load i32, i32* @x.35
  %1579 = load i32, i32* @y.36
  %1580 = sub i32 %1578, 1
  %1581 = mul i32 %1578, %1580
  %1582 = urem i32 %1581, 2
  %1583 = icmp eq i32 %1582, 0
  %1584 = icmp slt i32 %1579, 10
  %1585 = or i1 %1583, %1584
  br i1 %1585, label %originalBB364, label %originalBB364alteredBB

originalBB364:                                    ; preds = %1577, %originalBB364alteredBB
  %1586 = load i64, i64* %32, align 8, !dbg !1860
  %1587 = icmp ne i64 %1586, 0, !dbg !1860
  %1588 = load i32, i32* @x.35
  %1589 = load i32, i32* @y.36
  %1590 = sub i32 %1588, 1
  %1591 = mul i32 %1588, %1590
  %1592 = urem i32 %1591, 2
  %1593 = icmp eq i32 %1592, 0
  %1594 = icmp slt i32 %1589, 10
  %1595 = or i1 %1593, %1594
  br i1 %1595, label %originalBBpart2366, label %originalBB364alteredBB

originalBBpart2366:                               ; preds = %originalBB364
  br i1 %1587, label %1596, label %1613, !dbg !1861

1596:                                             ; preds = %originalBBpart2366
  %1597 = load i32, i32* @x.35
  %1598 = load i32, i32* @y.36
  %1599 = sub i32 %1597, 1
  %1600 = mul i32 %1597, %1599
  %1601 = urem i32 %1600, 2
  %1602 = icmp eq i32 %1601, 0
  %1603 = icmp slt i32 %1598, 10
  %1604 = or i1 %1602, %1603
  br i1 %1604, label %originalBB368, label %originalBB368alteredBB

originalBB368:                                    ; preds = %1596, %originalBB368alteredBB
  %1605 = load i32, i32* @x.35
  %1606 = load i32, i32* @y.36
  %1607 = sub i32 %1605, 1
  %1608 = mul i32 %1605, %1607
  %1609 = urem i32 %1608, 2
  %1610 = icmp eq i32 %1609, 0
  %1611 = icmp slt i32 %1606, 10
  %1612 = or i1 %1610, %1611
  br i1 %1612, label %originalBBpart2370, label %originalBB368alteredBB

originalBBpart2370:                               ; preds = %originalBB368
  br label %3628, !dbg !1862

1613:                                             ; preds = %originalBBpart2366, %originalBBpart2362, %1555
  %1614 = load i32, i32* @x.35
  %1615 = load i32, i32* @y.36
  %1616 = sub i32 %1614, 1
  %1617 = mul i32 %1614, %1616
  %1618 = urem i32 %1617, 2
  %1619 = icmp eq i32 %1618, 0
  %1620 = icmp slt i32 %1615, 10
  %1621 = or i1 %1619, %1620
  br i1 %1621, label %originalBB372, label %originalBB372alteredBB

originalBB372:                                    ; preds = %1613, %originalBB372alteredBB
  %1622 = load i32, i32* @x.35
  %1623 = load i32, i32* @y.36
  %1624 = sub i32 %1622, 1
  %1625 = mul i32 %1622, %1624
  %1626 = urem i32 %1625, 2
  %1627 = icmp eq i32 %1626, 0
  %1628 = icmp slt i32 %1623, 10
  %1629 = or i1 %1627, %1628
  br i1 %1629, label %originalBBpart2374, label %originalBB372alteredBB

originalBBpart2374:                               ; preds = %originalBB372
  br label %1630, !dbg !1860

1630:                                             ; preds = %originalBBpart2374, %originalBBpart2346, %originalBBpart2342, %1462
  call void @llvm.dbg.label(metadata !1863), !dbg !1864
  %1631 = load i32, i32* @x.35
  %1632 = load i32, i32* @y.36
  %1633 = sub i32 %1631, 1
  %1634 = mul i32 %1631, %1633
  %1635 = urem i32 %1634, 2
  %1636 = icmp eq i32 %1635, 0
  %1637 = icmp slt i32 %1632, 10
  %1638 = or i1 %1636, %1637
  br i1 %1638, label %originalBB376, label %originalBB376alteredBB

originalBB376:                                    ; preds = %1630, %originalBB376alteredBB
  %1639 = load i32, i32* %23, align 4, !dbg !1865
  %1640 = icmp eq i32 %1639, 2, !dbg !1867
  %1641 = load i32, i32* @x.35
  %1642 = load i32, i32* @y.36
  %1643 = sub i32 %1641, 1
  %1644 = mul i32 %1641, %1643
  %1645 = urem i32 %1644, 2
  %1646 = icmp eq i32 %1645, 0
  %1647 = icmp slt i32 %1642, 10
  %1648 = or i1 %1646, %1647
  br i1 %1648, label %originalBBpart2378, label %originalBB376alteredBB

originalBBpart2378:                               ; preds = %originalBB376
  br i1 %1640, label %1649, label %1669, !dbg !1868

1649:                                             ; preds = %originalBBpart2378
  %1650 = load i8, i8* %35, align 1, !dbg !1869
  %1651 = trunc i8 %1650 to i1, !dbg !1869
  br i1 %1651, label %1652, label %1669, !dbg !1870

1652:                                             ; preds = %1649
  %1653 = load i32, i32* @x.35
  %1654 = load i32, i32* @y.36
  %1655 = sub i32 %1653, 1
  %1656 = mul i32 %1653, %1655
  %1657 = urem i32 %1656, 2
  %1658 = icmp eq i32 %1657, 0
  %1659 = icmp slt i32 %1654, 10
  %1660 = or i1 %1658, %1659
  br i1 %1660, label %originalBB380, label %originalBB380alteredBB

originalBB380:                                    ; preds = %1652, %originalBB380alteredBB
  %1661 = load i32, i32* @x.35
  %1662 = load i32, i32* @y.36
  %1663 = sub i32 %1661, 1
  %1664 = mul i32 %1661, %1663
  %1665 = urem i32 %1664, 2
  %1666 = icmp eq i32 %1665, 0
  %1667 = icmp slt i32 %1662, 10
  %1668 = or i1 %1666, %1667
  br i1 %1668, label %originalBBpart2382, label %originalBB380alteredBB

originalBBpart2382:                               ; preds = %originalBB380
  br label %4197, !dbg !1871

1669:                                             ; preds = %1649, %originalBBpart2378
  %1670 = load i32, i32* @x.35
  %1671 = load i32, i32* @y.36
  %1672 = sub i32 %1670, 1
  %1673 = mul i32 %1670, %1672
  %1674 = urem i32 %1673, 2
  %1675 = icmp eq i32 %1674, 0
  %1676 = icmp slt i32 %1671, 10
  %1677 = or i1 %1675, %1676
  br i1 %1677, label %originalBB384, label %originalBB384alteredBB

originalBB384:                                    ; preds = %1669, %originalBB384alteredBB
  %1678 = load i32, i32* @x.35
  %1679 = load i32, i32* @y.36
  %1680 = sub i32 %1678, 1
  %1681 = mul i32 %1678, %1680
  %1682 = urem i32 %1681, 2
  %1683 = icmp eq i32 %1682, 0
  %1684 = icmp slt i32 %1679, 10
  %1685 = or i1 %1683, %1684
  br i1 %1685, label %originalBBpart2386, label %originalBB384alteredBB

originalBBpart2386:                               ; preds = %originalBB384
  br label %1686, !dbg !1869

1686:                                             ; preds = %originalBBpart2386, %originalBBpart2350, %1461, %originalBBpart2338, %originalBBpart2334
  call void @llvm.dbg.label(metadata !1872), !dbg !1873
  %1687 = load i8, i8* %33, align 1, !dbg !1874
  %1688 = trunc i8 %1687 to i1, !dbg !1874
  br i1 %1688, label %1689, label %1691, !dbg !1876

1689:                                             ; preds = %1686
  %1690 = load i8, i8* %40, align 1, !dbg !1877
  store i8 %1690, i8* %39, align 1, !dbg !1879
  br label %3454, !dbg !1880

1691:                                             ; preds = %1686
  %1692 = load i32, i32* @x.35
  %1693 = load i32, i32* @y.36
  %1694 = sub i32 %1692, 1
  %1695 = mul i32 %1692, %1694
  %1696 = urem i32 %1695, 2
  %1697 = icmp eq i32 %1696, 0
  %1698 = icmp slt i32 %1693, 10
  %1699 = or i1 %1697, %1698
  br i1 %1699, label %originalBB388, label %originalBB388alteredBB

originalBB388:                                    ; preds = %1691, %originalBB388alteredBB
  %1700 = load i32, i32* @x.35
  %1701 = load i32, i32* @y.36
  %1702 = sub i32 %1700, 1
  %1703 = mul i32 %1700, %1702
  %1704 = urem i32 %1703, 2
  %1705 = icmp eq i32 %1704, 0
  %1706 = icmp slt i32 %1701, 10
  %1707 = or i1 %1705, %1706
  br i1 %1707, label %originalBBpart2390, label %originalBB388alteredBB

originalBBpart2390:                               ; preds = %originalBB388
  br label %3359, !dbg !1881

1708:                                             ; preds = %originalBBpart2117, %originalBBpart2117
  %1709 = load i32, i32* @x.35
  %1710 = load i32, i32* @y.36
  %1711 = sub i32 %1709, 1
  %1712 = mul i32 %1709, %1711
  %1713 = urem i32 %1712, 2
  %1714 = icmp eq i32 %1713, 0
  %1715 = icmp slt i32 %1710, 10
  %1716 = or i1 %1714, %1715
  br i1 %1716, label %originalBB392, label %originalBB392alteredBB

originalBB392:                                    ; preds = %1708, %originalBB392alteredBB
  %1717 = load i64, i64* %22, align 8, !dbg !1882
  %1718 = icmp eq i64 %1717, -1, !dbg !1884
  %1719 = load i32, i32* @x.35
  %1720 = load i32, i32* @y.36
  %1721 = sub i32 %1719, 1
  %1722 = mul i32 %1719, %1721
  %1723 = urem i32 %1722, 2
  %1724 = icmp eq i32 %1723, 0
  %1725 = icmp slt i32 %1720, 10
  %1726 = or i1 %1724, %1725
  br i1 %1726, label %originalBBpart2394, label %originalBB392alteredBB

originalBBpart2394:                               ; preds = %originalBB392
  br i1 %1718, label %1727, label %1733, !dbg !1885

1727:                                             ; preds = %originalBBpart2394
  %1728 = load i8*, i8** %21, align 8, !dbg !1886
  %1729 = getelementptr inbounds i8, i8* %1728, i64 1, !dbg !1886
  %1730 = load i8, i8* %1729, align 1, !dbg !1886
  %1731 = sext i8 %1730 to i32, !dbg !1886
  %1732 = icmp eq i32 %1731, 0, !dbg !1887
  br i1 %1732, label %1753, label %1752, !dbg !1882

1733:                                             ; preds = %originalBBpart2394
  %1734 = load i32, i32* @x.35
  %1735 = load i32, i32* @y.36
  %1736 = sub i32 %1734, 1
  %1737 = mul i32 %1734, %1736
  %1738 = urem i32 %1737, 2
  %1739 = icmp eq i32 %1738, 0
  %1740 = icmp slt i32 %1735, 10
  %1741 = or i1 %1739, %1740
  br i1 %1741, label %originalBB396, label %originalBB396alteredBB

originalBB396:                                    ; preds = %1733, %originalBB396alteredBB
  %1742 = load i64, i64* %22, align 8, !dbg !1888
  %1743 = icmp eq i64 %1742, 1, !dbg !1889
  %1744 = load i32, i32* @x.35
  %1745 = load i32, i32* @y.36
  %1746 = sub i32 %1744, 1
  %1747 = mul i32 %1744, %1746
  %1748 = urem i32 %1747, 2
  %1749 = icmp eq i32 %1748, 0
  %1750 = icmp slt i32 %1745, 10
  %1751 = or i1 %1749, %1750
  br i1 %1751, label %originalBBpart2398, label %originalBB396alteredBB

originalBBpart2398:                               ; preds = %originalBB396
  br i1 %1743, label %1753, label %1752, !dbg !1885

1752:                                             ; preds = %originalBBpart2398, %1727
  br label %3359, !dbg !1890

1753:                                             ; preds = %originalBBpart2398, %1727
  %1754 = load i32, i32* @x.35
  %1755 = load i32, i32* @y.36
  %1756 = sub i32 %1754, 1
  %1757 = mul i32 %1754, %1756
  %1758 = urem i32 %1757, 2
  %1759 = icmp eq i32 %1758, 0
  %1760 = icmp slt i32 %1755, 10
  %1761 = or i1 %1759, %1760
  br i1 %1761, label %originalBB400, label %originalBB400alteredBB

originalBB400:                                    ; preds = %1753, %originalBB400alteredBB
  %1762 = load i32, i32* @x.35
  %1763 = load i32, i32* @y.36
  %1764 = sub i32 %1762, 1
  %1765 = mul i32 %1762, %1764
  %1766 = urem i32 %1765, 2
  %1767 = icmp eq i32 %1766, 0
  %1768 = icmp slt i32 %1763, 10
  %1769 = or i1 %1767, %1768
  br i1 %1769, label %originalBBpart2402, label %originalBB400alteredBB

originalBBpart2402:                               ; preds = %originalBB400
  br label %1770, !dbg !1891

1770:                                             ; preds = %originalBBpart2402, %originalBBpart2117, %originalBBpart2117
  %1771 = load i64, i64* %28, align 8, !dbg !1892
  %1772 = icmp ne i64 %1771, 0, !dbg !1894
  br i1 %1772, label %1773, label %1774, !dbg !1895

1773:                                             ; preds = %1770
  br label %3359, !dbg !1896

1774:                                             ; preds = %1770
  %1775 = load i32, i32* @x.35
  %1776 = load i32, i32* @y.36
  %1777 = sub i32 %1775, 1
  %1778 = mul i32 %1775, %1777
  %1779 = urem i32 %1778, 2
  %1780 = icmp eq i32 %1779, 0
  %1781 = icmp slt i32 %1776, 10
  %1782 = or i1 %1780, %1781
  br i1 %1782, label %originalBB404, label %originalBB404alteredBB

originalBB404:                                    ; preds = %1774, %originalBB404alteredBB
  %1783 = load i32, i32* @x.35
  %1784 = load i32, i32* @y.36
  %1785 = sub i32 %1783, 1
  %1786 = mul i32 %1783, %1785
  %1787 = urem i32 %1786, 2
  %1788 = icmp eq i32 %1787, 0
  %1789 = icmp slt i32 %1784, 10
  %1790 = or i1 %1788, %1789
  br i1 %1790, label %originalBBpart2406, label %originalBB404alteredBB

originalBBpart2406:                               ; preds = %originalBB404
  br label %1791, !dbg !1897

1791:                                             ; preds = %originalBBpart2406, %originalBBpart2117
  %1792 = load i32, i32* @x.35
  %1793 = load i32, i32* @y.36
  %1794 = sub i32 %1792, 1
  %1795 = mul i32 %1792, %1794
  %1796 = urem i32 %1795, 2
  %1797 = icmp eq i32 %1796, 0
  %1798 = icmp slt i32 %1793, 10
  %1799 = or i1 %1797, %1798
  br i1 %1799, label %originalBB408, label %originalBB408alteredBB

originalBB408:                                    ; preds = %1791, %originalBB408alteredBB
  store i8 1, i8* %43, align 1, !dbg !1898
  %1800 = load i32, i32* @x.35
  %1801 = load i32, i32* @y.36
  %1802 = sub i32 %1800, 1
  %1803 = mul i32 %1800, %1802
  %1804 = urem i32 %1803, 2
  %1805 = icmp eq i32 %1804, 0
  %1806 = icmp slt i32 %1801, 10
  %1807 = or i1 %1805, %1806
  br i1 %1807, label %originalBBpart2410, label %originalBB408alteredBB

originalBBpart2410:                               ; preds = %originalBB408
  br label %1808, !dbg !1899

1808:                                             ; preds = %originalBBpart2410, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117
  %1809 = load i32, i32* @x.35
  %1810 = load i32, i32* @y.36
  %1811 = sub i32 %1809, 1
  %1812 = mul i32 %1809, %1811
  %1813 = urem i32 %1812, 2
  %1814 = icmp eq i32 %1813, 0
  %1815 = icmp slt i32 %1810, 10
  %1816 = or i1 %1814, %1815
  br i1 %1816, label %originalBB412, label %originalBB412alteredBB

originalBB412:                                    ; preds = %1808, %originalBB412alteredBB
  %1817 = load i32, i32* %23, align 4, !dbg !1900
  %1818 = icmp eq i32 %1817, 2, !dbg !1902
  %1819 = load i32, i32* @x.35
  %1820 = load i32, i32* @y.36
  %1821 = sub i32 %1819, 1
  %1822 = mul i32 %1819, %1821
  %1823 = urem i32 %1822, 2
  %1824 = icmp eq i32 %1823, 0
  %1825 = icmp slt i32 %1820, 10
  %1826 = or i1 %1824, %1825
  br i1 %1826, label %originalBBpart2414, label %originalBB412alteredBB

originalBBpart2414:                               ; preds = %originalBB412
  br i1 %1818, label %1827, label %1831, !dbg !1903

1827:                                             ; preds = %originalBBpart2414
  %1828 = load i8, i8* %35, align 1, !dbg !1904
  %1829 = trunc i8 %1828 to i1, !dbg !1904
  br i1 %1829, label %1830, label %1831, !dbg !1905

1830:                                             ; preds = %1827
  br label %4197, !dbg !1906

1831:                                             ; preds = %1827, %originalBBpart2414
  %1832 = load i32, i32* @x.35
  %1833 = load i32, i32* @y.36
  %1834 = sub i32 %1832, 1
  %1835 = mul i32 %1832, %1834
  %1836 = urem i32 %1835, 2
  %1837 = icmp eq i32 %1836, 0
  %1838 = icmp slt i32 %1833, 10
  %1839 = or i1 %1837, %1838
  br i1 %1839, label %originalBB416, label %originalBB416alteredBB

originalBB416:                                    ; preds = %1831, %originalBB416alteredBB
  %1840 = load i32, i32* @x.35
  %1841 = load i32, i32* @y.36
  %1842 = sub i32 %1840, 1
  %1843 = mul i32 %1840, %1842
  %1844 = urem i32 %1843, 2
  %1845 = icmp eq i32 %1844, 0
  %1846 = icmp slt i32 %1841, 10
  %1847 = or i1 %1845, %1846
  br i1 %1847, label %originalBBpart2418, label %originalBB416alteredBB

originalBBpart2418:                               ; preds = %originalBB416
  br label %3359, !dbg !1907

1848:                                             ; preds = %originalBBpart2117
  store i8 1, i8* %37, align 1, !dbg !1908
  store i8 1, i8* %43, align 1, !dbg !1909
  %1849 = load i32, i32* %23, align 4, !dbg !1910
  %1850 = icmp eq i32 %1849, 2, !dbg !1912
  br i1 %1850, label %1851, label %2076, !dbg !1913

1851:                                             ; preds = %1848
  %1852 = load i32, i32* @x.35
  %1853 = load i32, i32* @y.36
  %1854 = sub i32 %1852, 1
  %1855 = mul i32 %1852, %1854
  %1856 = urem i32 %1855, 2
  %1857 = icmp eq i32 %1856, 0
  %1858 = icmp slt i32 %1853, 10
  %1859 = or i1 %1857, %1858
  br i1 %1859, label %originalBB420, label %originalBB420alteredBB

originalBB420:                                    ; preds = %1851, %originalBB420alteredBB
  %1860 = load i8, i8* %35, align 1, !dbg !1914
  %1861 = trunc i8 %1860 to i1, !dbg !1914
  %1862 = load i32, i32* @x.35
  %1863 = load i32, i32* @y.36
  %1864 = sub i32 %1862, 1
  %1865 = mul i32 %1862, %1864
  %1866 = urem i32 %1865, 2
  %1867 = icmp eq i32 %1866, 0
  %1868 = icmp slt i32 %1863, 10
  %1869 = or i1 %1867, %1868
  br i1 %1869, label %originalBBpart2422, label %originalBB420alteredBB

originalBBpart2422:                               ; preds = %originalBB420
  br i1 %1861, label %1870, label %1871, !dbg !1917

1870:                                             ; preds = %originalBBpart2422
  br label %4197, !dbg !1918

1871:                                             ; preds = %originalBBpart2422
  %1872 = load i32, i32* @x.35
  %1873 = load i32, i32* @y.36
  %1874 = sub i32 %1872, 1
  %1875 = mul i32 %1872, %1874
  %1876 = urem i32 %1875, 2
  %1877 = icmp eq i32 %1876, 0
  %1878 = icmp slt i32 %1873, 10
  %1879 = or i1 %1877, %1878
  br i1 %1879, label %originalBB424, label %originalBB424alteredBB

originalBB424:                                    ; preds = %1871, %originalBB424alteredBB
  %1880 = load i64, i64* %20, align 8, !dbg !1919
  %1881 = icmp ne i64 %1880, 0, !dbg !1919
  %1882 = load i32, i32* @x.35
  %1883 = load i32, i32* @y.36
  %1884 = sub i32 %1882, 1
  %1885 = mul i32 %1882, %1884
  %1886 = urem i32 %1885, 2
  %1887 = icmp eq i32 %1886, 0
  %1888 = icmp slt i32 %1883, 10
  %1889 = or i1 %1887, %1888
  br i1 %1889, label %originalBBpart2426, label %originalBB424alteredBB

originalBBpart2426:                               ; preds = %originalBB424
  br i1 %1881, label %1890, label %1911, !dbg !1921

1890:                                             ; preds = %originalBBpart2426
  %1891 = load i64, i64* %30, align 8, !dbg !1922
  %1892 = icmp ne i64 %1891, 0, !dbg !1922
  br i1 %1892, label %1911, label %1893, !dbg !1923

1893:                                             ; preds = %1890
  %1894 = load i32, i32* @x.35
  %1895 = load i32, i32* @y.36
  %1896 = sub i32 %1894, 1
  %1897 = mul i32 %1894, %1896
  %1898 = urem i32 %1897, 2
  %1899 = icmp eq i32 %1898, 0
  %1900 = icmp slt i32 %1895, 10
  %1901 = or i1 %1899, %1900
  br i1 %1901, label %originalBB428, label %originalBB428alteredBB

originalBB428:                                    ; preds = %1893, %originalBB428alteredBB
  %1902 = load i64, i64* %20, align 8, !dbg !1924
  store i64 %1902, i64* %30, align 8, !dbg !1926
  store i64 0, i64* %20, align 8, !dbg !1927
  %1903 = load i32, i32* @x.35
  %1904 = load i32, i32* @y.36
  %1905 = sub i32 %1903, 1
  %1906 = mul i32 %1903, %1905
  %1907 = urem i32 %1906, 2
  %1908 = icmp eq i32 %1907, 0
  %1909 = icmp slt i32 %1904, 10
  %1910 = or i1 %1908, %1909
  br i1 %1910, label %originalBBpart2430, label %originalBB428alteredBB

originalBBpart2430:                               ; preds = %originalBB428
  br label %1911, !dbg !1928

1911:                                             ; preds = %originalBBpart2430, %1890, %originalBBpart2426
  %1912 = load i32, i32* @x.35
  %1913 = load i32, i32* @y.36
  %1914 = sub i32 %1912, 1
  %1915 = mul i32 %1912, %1914
  %1916 = urem i32 %1915, 2
  %1917 = icmp eq i32 %1916, 0
  %1918 = icmp slt i32 %1913, 10
  %1919 = or i1 %1917, %1918
  br i1 %1919, label %originalBB432, label %originalBB432alteredBB

originalBB432:                                    ; preds = %1911, %originalBB432alteredBB
  %1920 = load i32, i32* @x.35
  %1921 = load i32, i32* @y.36
  %1922 = sub i32 %1920, 1
  %1923 = mul i32 %1920, %1922
  %1924 = urem i32 %1923, 2
  %1925 = icmp eq i32 %1924, 0
  %1926 = icmp slt i32 %1921, 10
  %1927 = or i1 %1925, %1926
  br i1 %1927, label %originalBBpart2434, label %originalBB432alteredBB

originalBBpart2434:                               ; preds = %originalBB432
  br label %1928, !dbg !1929

1928:                                             ; preds = %originalBBpart2434
  %1929 = load i64, i64* %29, align 8, !dbg !1930
  %1930 = load i64, i64* %20, align 8, !dbg !1930
  %1931 = icmp ult i64 %1929, %1930, !dbg !1930
  br i1 %1931, label %1932, label %1936, !dbg !1933

1932:                                             ; preds = %1928
  %1933 = load i8*, i8** %19, align 8, !dbg !1930
  %1934 = load i64, i64* %29, align 8, !dbg !1930
  %1935 = getelementptr inbounds i8, i8* %1933, i64 %1934, !dbg !1930
  store i8 39, i8* %1935, align 1, !dbg !1930
  br label %1936, !dbg !1930

1936:                                             ; preds = %1932, %1928
  %1937 = load i64, i64* %29, align 8, !dbg !1933
  %1938 = add i64 %1937, 1, !dbg !1933
  store i64 %1938, i64* %29, align 8, !dbg !1933
  br label %1939, !dbg !1933

1939:                                             ; preds = %1936
  %1940 = load i32, i32* @x.35
  %1941 = load i32, i32* @y.36
  %1942 = sub i32 %1940, 1
  %1943 = mul i32 %1940, %1942
  %1944 = urem i32 %1943, 2
  %1945 = icmp eq i32 %1944, 0
  %1946 = icmp slt i32 %1941, 10
  %1947 = or i1 %1945, %1946
  br i1 %1947, label %originalBB436, label %originalBB436alteredBB

originalBB436:                                    ; preds = %1939, %originalBB436alteredBB
  %1948 = load i32, i32* @x.35
  %1949 = load i32, i32* @y.36
  %1950 = sub i32 %1948, 1
  %1951 = mul i32 %1948, %1950
  %1952 = urem i32 %1951, 2
  %1953 = icmp eq i32 %1952, 0
  %1954 = icmp slt i32 %1949, 10
  %1955 = or i1 %1953, %1954
  br i1 %1955, label %originalBBpart2438, label %originalBB436alteredBB

originalBBpart2438:                               ; preds = %originalBB436
  br label %1956, !dbg !1934

1956:                                             ; preds = %originalBBpart2438
  %1957 = load i32, i32* @x.35
  %1958 = load i32, i32* @y.36
  %1959 = sub i32 %1957, 1
  %1960 = mul i32 %1957, %1959
  %1961 = urem i32 %1960, 2
  %1962 = icmp eq i32 %1961, 0
  %1963 = icmp slt i32 %1958, 10
  %1964 = or i1 %1962, %1963
  br i1 %1964, label %originalBB440, label %originalBB440alteredBB

originalBB440:                                    ; preds = %1956, %originalBB440alteredBB
  %1965 = load i64, i64* %29, align 8, !dbg !1935
  %1966 = load i64, i64* %20, align 8, !dbg !1935
  %1967 = icmp ult i64 %1965, %1966, !dbg !1935
  %1968 = load i32, i32* @x.35
  %1969 = load i32, i32* @y.36
  %1970 = sub i32 %1968, 1
  %1971 = mul i32 %1968, %1970
  %1972 = urem i32 %1971, 2
  %1973 = icmp eq i32 %1972, 0
  %1974 = icmp slt i32 %1969, 10
  %1975 = or i1 %1973, %1974
  br i1 %1975, label %originalBBpart2442, label %originalBB440alteredBB

originalBBpart2442:                               ; preds = %originalBB440
  br i1 %1967, label %1976, label %1996, !dbg !1938

1976:                                             ; preds = %originalBBpart2442
  %1977 = load i32, i32* @x.35
  %1978 = load i32, i32* @y.36
  %1979 = sub i32 %1977, 1
  %1980 = mul i32 %1977, %1979
  %1981 = urem i32 %1980, 2
  %1982 = icmp eq i32 %1981, 0
  %1983 = icmp slt i32 %1978, 10
  %1984 = or i1 %1982, %1983
  br i1 %1984, label %originalBB444, label %originalBB444alteredBB

originalBB444:                                    ; preds = %1976, %originalBB444alteredBB
  %1985 = load i8*, i8** %19, align 8, !dbg !1935
  %1986 = load i64, i64* %29, align 8, !dbg !1935
  %1987 = getelementptr inbounds i8, i8* %1985, i64 %1986, !dbg !1935
  store i8 92, i8* %1987, align 1, !dbg !1935
  %1988 = load i32, i32* @x.35
  %1989 = load i32, i32* @y.36
  %1990 = sub i32 %1988, 1
  %1991 = mul i32 %1988, %1990
  %1992 = urem i32 %1991, 2
  %1993 = icmp eq i32 %1992, 0
  %1994 = icmp slt i32 %1989, 10
  %1995 = or i1 %1993, %1994
  br i1 %1995, label %originalBBpart2446, label %originalBB444alteredBB

originalBBpart2446:                               ; preds = %originalBB444
  br label %1996, !dbg !1935

1996:                                             ; preds = %originalBBpart2446, %originalBBpart2442
  %1997 = load i64, i64* %29, align 8, !dbg !1938
  %1998 = add i64 %1997, 1, !dbg !1938
  store i64 %1998, i64* %29, align 8, !dbg !1938
  br label %1999, !dbg !1938

1999:                                             ; preds = %1996
  br label %2000, !dbg !1939

2000:                                             ; preds = %1999
  %2001 = load i32, i32* @x.35
  %2002 = load i32, i32* @y.36
  %2003 = sub i32 %2001, 1
  %2004 = mul i32 %2001, %2003
  %2005 = urem i32 %2004, 2
  %2006 = icmp eq i32 %2005, 0
  %2007 = icmp slt i32 %2002, 10
  %2008 = or i1 %2006, %2007
  br i1 %2008, label %originalBB448, label %originalBB448alteredBB

originalBB448:                                    ; preds = %2000, %originalBB448alteredBB
  %2009 = load i64, i64* %29, align 8, !dbg !1940
  %2010 = load i64, i64* %20, align 8, !dbg !1940
  %2011 = icmp ult i64 %2009, %2010, !dbg !1940
  %2012 = load i32, i32* @x.35
  %2013 = load i32, i32* @y.36
  %2014 = sub i32 %2012, 1
  %2015 = mul i32 %2012, %2014
  %2016 = urem i32 %2015, 2
  %2017 = icmp eq i32 %2016, 0
  %2018 = icmp slt i32 %2013, 10
  %2019 = or i1 %2017, %2018
  br i1 %2019, label %originalBBpart2450, label %originalBB448alteredBB

originalBBpart2450:                               ; preds = %originalBB448
  br i1 %2011, label %2020, label %2040, !dbg !1943

2020:                                             ; preds = %originalBBpart2450
  %2021 = load i32, i32* @x.35
  %2022 = load i32, i32* @y.36
  %2023 = sub i32 %2021, 1
  %2024 = mul i32 %2021, %2023
  %2025 = urem i32 %2024, 2
  %2026 = icmp eq i32 %2025, 0
  %2027 = icmp slt i32 %2022, 10
  %2028 = or i1 %2026, %2027
  br i1 %2028, label %originalBB452, label %originalBB452alteredBB

originalBB452:                                    ; preds = %2020, %originalBB452alteredBB
  %2029 = load i8*, i8** %19, align 8, !dbg !1940
  %2030 = load i64, i64* %29, align 8, !dbg !1940
  %2031 = getelementptr inbounds i8, i8* %2029, i64 %2030, !dbg !1940
  store i8 39, i8* %2031, align 1, !dbg !1940
  %2032 = load i32, i32* @x.35
  %2033 = load i32, i32* @y.36
  %2034 = sub i32 %2032, 1
  %2035 = mul i32 %2032, %2034
  %2036 = urem i32 %2035, 2
  %2037 = icmp eq i32 %2036, 0
  %2038 = icmp slt i32 %2033, 10
  %2039 = or i1 %2037, %2038
  br i1 %2039, label %originalBBpart2454, label %originalBB452alteredBB

originalBBpart2454:                               ; preds = %originalBB452
  br label %2040, !dbg !1940

2040:                                             ; preds = %originalBBpart2454, %originalBBpart2450
  %2041 = load i32, i32* @x.35
  %2042 = load i32, i32* @y.36
  %2043 = sub i32 %2041, 1
  %2044 = mul i32 %2041, %2043
  %2045 = urem i32 %2044, 2
  %2046 = icmp eq i32 %2045, 0
  %2047 = icmp slt i32 %2042, 10
  %2048 = or i1 %2046, %2047
  br i1 %2048, label %originalBB456, label %originalBB456alteredBB

originalBB456:                                    ; preds = %2040, %originalBB456alteredBB
  %2049 = load i64, i64* %29, align 8, !dbg !1943
  %2050 = add i64 %2049, 1, !dbg !1943
  store i64 %2050, i64* %29, align 8, !dbg !1943
  %2051 = load i32, i32* @x.35
  %2052 = load i32, i32* @y.36
  %2053 = sub i32 %2051, 1
  %2054 = mul i32 %2051, %2053
  %2055 = urem i32 %2054, 2
  %2056 = icmp eq i32 %2055, 0
  %2057 = icmp slt i32 %2052, 10
  %2058 = or i1 %2056, %2057
  br i1 %2058, label %originalBBpart2462, label %originalBB456alteredBB

originalBBpart2462:                               ; preds = %originalBB456
  br label %2059, !dbg !1943

2059:                                             ; preds = %originalBBpart2462
  %2060 = load i32, i32* @x.35
  %2061 = load i32, i32* @y.36
  %2062 = sub i32 %2060, 1
  %2063 = mul i32 %2060, %2062
  %2064 = urem i32 %2063, 2
  %2065 = icmp eq i32 %2064, 0
  %2066 = icmp slt i32 %2061, 10
  %2067 = or i1 %2065, %2066
  br i1 %2067, label %originalBB464, label %originalBB464alteredBB

originalBB464:                                    ; preds = %2059, %originalBB464alteredBB
  store i8 0, i8* %36, align 1, !dbg !1944
  %2068 = load i32, i32* @x.35
  %2069 = load i32, i32* @y.36
  %2070 = sub i32 %2068, 1
  %2071 = mul i32 %2068, %2070
  %2072 = urem i32 %2071, 2
  %2073 = icmp eq i32 %2072, 0
  %2074 = icmp slt i32 %2069, 10
  %2075 = or i1 %2073, %2074
  br i1 %2075, label %originalBBpart2466, label %originalBB464alteredBB

originalBBpart2466:                               ; preds = %originalBB464
  br label %2076, !dbg !1945

2076:                                             ; preds = %originalBBpart2466, %1848
  %2077 = load i32, i32* @x.35
  %2078 = load i32, i32* @y.36
  %2079 = sub i32 %2077, 1
  %2080 = mul i32 %2077, %2079
  %2081 = urem i32 %2080, 2
  %2082 = icmp eq i32 %2081, 0
  %2083 = icmp slt i32 %2078, 10
  %2084 = or i1 %2082, %2083
  br i1 %2084, label %originalBB468, label %originalBB468alteredBB

originalBB468:                                    ; preds = %2076, %originalBB468alteredBB
  %2085 = load i32, i32* @x.35
  %2086 = load i32, i32* @y.36
  %2087 = sub i32 %2085, 1
  %2088 = mul i32 %2085, %2087
  %2089 = urem i32 %2088, 2
  %2090 = icmp eq i32 %2089, 0
  %2091 = icmp slt i32 %2086, 10
  %2092 = or i1 %2090, %2091
  br i1 %2092, label %originalBBpart2470, label %originalBB468alteredBB

originalBBpart2470:                               ; preds = %originalBB468
  br label %3359, !dbg !1946

2093:                                             ; preds = %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117, %originalBBpart2117
  store i8 1, i8* %43, align 1, !dbg !1947
  br label %3359, !dbg !1948

2094:                                             ; preds = %originalBBpart2117
  call void @llvm.dbg.declare(metadata i64* %44, metadata !1949, metadata !DIExpression()), !dbg !1951
  call void @llvm.dbg.declare(metadata i8* %45, metadata !1952, metadata !DIExpression()), !dbg !1953
  %2095 = load i32, i32* @x.35
  %2096 = load i32, i32* @y.36
  %2097 = sub i32 %2095, 1
  %2098 = mul i32 %2095, %2097
  %2099 = urem i32 %2098, 2
  %2100 = icmp eq i32 %2099, 0
  %2101 = icmp slt i32 %2096, 10
  %2102 = or i1 %2100, %2101
  br i1 %2102, label %originalBB472, label %originalBB472alteredBB

originalBB472:                                    ; preds = %2094, %originalBB472alteredBB
  %2103 = load i8, i8* %34, align 1, !dbg !1954
  %2104 = trunc i8 %2103 to i1, !dbg !1954
  %2105 = load i32, i32* @x.35
  %2106 = load i32, i32* @y.36
  %2107 = sub i32 %2105, 1
  %2108 = mul i32 %2105, %2107
  %2109 = urem i32 %2108, 2
  %2110 = icmp eq i32 %2109, 0
  %2111 = icmp slt i32 %2106, 10
  %2112 = or i1 %2110, %2111
  br i1 %2112, label %originalBBpart2474, label %originalBB472alteredBB

originalBBpart2474:                               ; preds = %originalBB472
  br i1 %2104, label %2113, label %2125, !dbg !1956

2113:                                             ; preds = %originalBBpart2474
  store i64 1, i64* %44, align 8, !dbg !1957
  %2114 = call i16** @__ctype_b_loc() #15, !dbg !1959
  %2115 = load i16*, i16** %2114, align 8, !dbg !1959
  %2116 = load i8, i8* %39, align 1, !dbg !1959
  %2117 = zext i8 %2116 to i32, !dbg !1959
  %2118 = sext i32 %2117 to i64, !dbg !1959
  %2119 = getelementptr inbounds i16, i16* %2115, i64 %2118, !dbg !1959
  %2120 = load i16, i16* %2119, align 2, !dbg !1959
  %2121 = zext i16 %2120 to i32, !dbg !1959
  %2122 = and i32 %2121, 16384, !dbg !1959
  %2123 = icmp ne i32 %2122, 0, !dbg !1960
  %2124 = zext i1 %2123 to i8, !dbg !1961
  store i8 %2124, i8* %45, align 1, !dbg !1961
  br label %2502, !dbg !1962

2125:                                             ; preds = %originalBBpart2474
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t* %46, metadata !1963, metadata !DIExpression()), !dbg !1980
  %2126 = load i32, i32* @x.35
  %2127 = load i32, i32* @y.36
  %2128 = sub i32 %2126, 1
  %2129 = mul i32 %2126, %2128
  %2130 = urem i32 %2129, 2
  %2131 = icmp eq i32 %2130, 0
  %2132 = icmp slt i32 %2127, 10
  %2133 = or i1 %2131, %2132
  br i1 %2133, label %originalBB476, label %originalBB476alteredBB

originalBB476:                                    ; preds = %2125, %originalBB476alteredBB
  %2134 = bitcast %struct.__mbstate_t* %46 to i8*, !dbg !1981
  call void @llvm.memset.p0i8.i64(i8* align 4 %2134, i8 0, i64 8, i1 false), !dbg !1981
  store i64 0, i64* %44, align 8, !dbg !1982
  store i8 1, i8* %45, align 1, !dbg !1983
  %2135 = load i64, i64* %22, align 8, !dbg !1984
  %2136 = trunc i64 %2135 to i32
  %2137 = mul i32 %2136, -2
  %2138 = mul i32 %2137, %2137
  %2139 = sub i32 %2138, %2137
  %2140 = srem i32 %2139, 2
  %2141 = icmp ne i32 %2140, 0
  %2142 = load i32, i32* @x.35
  %2143 = load i32, i32* @y.36
  %2144 = sub i32 %2142, 1
  %2145 = mul i32 %2142, %2144
  %2146 = urem i32 %2145, 2
  %2147 = icmp eq i32 %2146, 0
  %2148 = icmp slt i32 %2143, 10
  %2149 = or i1 %2147, %2148
  br i1 %2149, label %originalBBpart2517, label %originalBB476alteredBB

originalBBpart2517:                               ; preds = %originalBB476
  br i1 %2141, label %2150, label %2167

2150:                                             ; preds = %originalBBpart2517
  %2151 = load i32, i32* @x.35
  %2152 = load i32, i32* @y.36
  %2153 = sub i32 %2151, 1
  %2154 = mul i32 %2151, %2153
  %2155 = urem i32 %2154, 2
  %2156 = icmp eq i32 %2155, 0
  %2157 = icmp slt i32 %2152, 10
  %2158 = or i1 %2156, %2157
  br i1 %2158, label %originalBB519, label %originalBB519alteredBB

originalBB519:                                    ; preds = %2150, %originalBB519alteredBB
  %2159 = load i32, i32* @x.35
  %2160 = load i32, i32* @y.36
  %2161 = sub i32 %2159, 1
  %2162 = mul i32 %2159, %2161
  %2163 = urem i32 %2162, 2
  %2164 = icmp eq i32 %2163, 0
  %2165 = icmp slt i32 %2160, 10
  %2166 = or i1 %2164, %2165
  br i1 %2166, label %originalBBpart2521, label %originalBB519alteredBB

originalBBpart2521:                               ; preds = %originalBB519
  ret i64 0

2167:                                             ; preds = %originalBBpart2517
  %2168 = icmp eq i64 %2135, -1, !dbg !1986
  br i1 %2168, label %2169, label %2188, !dbg !1987

2169:                                             ; preds = %2167
  %2170 = load i32, i32* @x.35
  %2171 = load i32, i32* @y.36
  %2172 = sub i32 %2170, 1
  %2173 = mul i32 %2170, %2172
  %2174 = urem i32 %2173, 2
  %2175 = icmp eq i32 %2174, 0
  %2176 = icmp slt i32 %2171, 10
  %2177 = or i1 %2175, %2176
  br i1 %2177, label %originalBB523, label %originalBB523alteredBB

originalBB523:                                    ; preds = %2169, %originalBB523alteredBB
  %2178 = load i8*, i8** %21, align 8, !dbg !1988
  %2179 = call i64 @strlen(i8* %2178) #13, !dbg !1989
  store i64 %2179, i64* %22, align 8, !dbg !1990
  %2180 = load i32, i32* @x.35
  %2181 = load i32, i32* @y.36
  %2182 = sub i32 %2180, 1
  %2183 = mul i32 %2180, %2182
  %2184 = urem i32 %2183, 2
  %2185 = icmp eq i32 %2184, 0
  %2186 = icmp slt i32 %2181, 10
  %2187 = or i1 %2185, %2186
  br i1 %2187, label %originalBBpart2525, label %originalBB523alteredBB

originalBBpart2525:                               ; preds = %originalBB523
  br label %2188, !dbg !1991

2188:                                             ; preds = %originalBBpart2525, %2167
  br label %2189, !dbg !1992

2189:                                             ; preds = %originalBBpart2624, %2188
  call void @llvm.dbg.declare(metadata i32* %47, metadata !1993, metadata !DIExpression()), !dbg !1996
  call void @llvm.dbg.declare(metadata i64* %48, metadata !1997, metadata !DIExpression()), !dbg !1998
  %2190 = load i32, i32* @x.35
  %2191 = load i32, i32* @y.36
  %2192 = sub i32 %2190, 1
  %2193 = mul i32 %2190, %2192
  %2194 = urem i32 %2193, 2
  %2195 = icmp eq i32 %2194, 0
  %2196 = icmp slt i32 %2191, 10
  %2197 = or i1 %2195, %2196
  br i1 %2197, label %originalBB527, label %originalBB527alteredBB

originalBB527:                                    ; preds = %2189, %originalBB527alteredBB
  %2198 = load i8*, i8** %21, align 8, !dbg !1999
  %2199 = load i64, i64* %28, align 8, !dbg !2000
  %2200 = load i64, i64* %44, align 8, !dbg !2001
  %2201 = add i64 %2199, %2200, !dbg !2002
  %2202 = getelementptr inbounds i8, i8* %2198, i64 %2201, !dbg !1999
  %2203 = load i64, i64* %22, align 8, !dbg !2003
  %2204 = load i64, i64* %28, align 8, !dbg !2004
  %2205 = load i64, i64* %44, align 8, !dbg !2005
  %2206 = add i64 %2204, %2205, !dbg !2006
  %2207 = sub i64 %2203, %2206, !dbg !2007
  %2208 = call i64 @rpl_mbrtowc(i32* %47, i8* %2202, i64 %2207, %struct.__mbstate_t* %46), !dbg !2008
  store i64 %2208, i64* %48, align 8, !dbg !1998
  %2209 = load i64, i64* %48, align 8, !dbg !2009
  %2210 = icmp eq i64 %2209, 0, !dbg !2011
  %2211 = load i32, i32* @x.35
  %2212 = load i32, i32* @y.36
  %2213 = sub i32 %2211, 1
  %2214 = mul i32 %2211, %2213
  %2215 = urem i32 %2214, 2
  %2216 = icmp eq i32 %2215, 0
  %2217 = icmp slt i32 %2212, 10
  %2218 = or i1 %2216, %2217
  br i1 %2218, label %originalBBpart2545, label %originalBB527alteredBB

originalBBpart2545:                               ; preds = %originalBB527
  br i1 %2210, label %2219, label %2236, !dbg !2012

2219:                                             ; preds = %originalBBpart2545
  %2220 = load i32, i32* @x.35
  %2221 = load i32, i32* @y.36
  %2222 = sub i32 %2220, 1
  %2223 = mul i32 %2220, %2222
  %2224 = urem i32 %2223, 2
  %2225 = icmp eq i32 %2224, 0
  %2226 = icmp slt i32 %2221, 10
  %2227 = or i1 %2225, %2226
  br i1 %2227, label %originalBB547, label %originalBB547alteredBB

originalBB547:                                    ; preds = %2219, %originalBB547alteredBB
  %2228 = load i32, i32* @x.35
  %2229 = load i32, i32* @y.36
  %2230 = sub i32 %2228, 1
  %2231 = mul i32 %2228, %2230
  %2232 = urem i32 %2231, 2
  %2233 = icmp eq i32 %2232, 0
  %2234 = icmp slt i32 %2229, 10
  %2235 = or i1 %2233, %2234
  br i1 %2235, label %originalBBpart2549, label %originalBB547alteredBB

originalBBpart2549:                               ; preds = %originalBB547
  br label %2501, !dbg !2013

2236:                                             ; preds = %originalBBpart2545
  %2237 = load i64, i64* %48, align 8, !dbg !2014
  %2238 = icmp eq i64 %2237, -1, !dbg !2016
  br i1 %2238, label %2239, label %2240, !dbg !2017

2239:                                             ; preds = %2236
  store i8 0, i8* %45, align 1, !dbg !2018
  br label %2501, !dbg !2020

2240:                                             ; preds = %2236
  %2241 = load i32, i32* @x.35
  %2242 = load i32, i32* @y.36
  %2243 = sub i32 %2241, 1
  %2244 = mul i32 %2241, %2243
  %2245 = urem i32 %2244, 2
  %2246 = icmp eq i32 %2245, 0
  %2247 = icmp slt i32 %2242, 10
  %2248 = or i1 %2246, %2247
  br i1 %2248, label %originalBB551, label %originalBB551alteredBB

originalBB551:                                    ; preds = %2240, %originalBB551alteredBB
  %2249 = load i64, i64* %48, align 8, !dbg !2021
  %2250 = icmp eq i64 %2249, -2, !dbg !2023
  %2251 = load i32, i32* @x.35
  %2252 = load i32, i32* @y.36
  %2253 = sub i32 %2251, 1
  %2254 = mul i32 %2251, %2253
  %2255 = urem i32 %2254, 2
  %2256 = icmp eq i32 %2255, 0
  %2257 = icmp slt i32 %2252, 10
  %2258 = or i1 %2256, %2257
  br i1 %2258, label %originalBBpart2553, label %originalBB551alteredBB

originalBBpart2553:                               ; preds = %originalBB551
  br i1 %2250, label %2259, label %2297, !dbg !2024

2259:                                             ; preds = %originalBBpart2553
  %2260 = load i32, i32* @x.35
  %2261 = load i32, i32* @y.36
  %2262 = sub i32 %2260, 1
  %2263 = mul i32 %2260, %2262
  %2264 = urem i32 %2263, 2
  %2265 = icmp eq i32 %2264, 0
  %2266 = icmp slt i32 %2261, 10
  %2267 = or i1 %2265, %2266
  br i1 %2267, label %originalBB555, label %originalBB555alteredBB

originalBB555:                                    ; preds = %2259, %originalBB555alteredBB
  store i8 0, i8* %45, align 1, !dbg !2025
  %2268 = load i32, i32* @x.35
  %2269 = load i32, i32* @y.36
  %2270 = sub i32 %2268, 1
  %2271 = mul i32 %2268, %2270
  %2272 = urem i32 %2271, 2
  %2273 = icmp eq i32 %2272, 0
  %2274 = icmp slt i32 %2269, 10
  %2275 = or i1 %2273, %2274
  br i1 %2275, label %originalBBpart2557, label %originalBB555alteredBB

originalBBpart2557:                               ; preds = %originalBB555
  br label %2276, !dbg !2027

2276:                                             ; preds = %2293, %originalBBpart2557
  %2277 = load i64, i64* %28, align 8, !dbg !2028
  %2278 = load i64, i64* %44, align 8, !dbg !2029
  %2279 = add i64 %2277, %2278, !dbg !2030
  %2280 = load i64, i64* %22, align 8, !dbg !2031
  %2281 = icmp ult i64 %2279, %2280, !dbg !2032
  br i1 %2281, label %2282, label %2291, !dbg !2033

2282:                                             ; preds = %2276
  %2283 = load i8*, i8** %21, align 8, !dbg !2034
  %2284 = load i64, i64* %28, align 8, !dbg !2035
  %2285 = load i64, i64* %44, align 8, !dbg !2036
  %2286 = add i64 %2284, %2285, !dbg !2037
  %2287 = getelementptr inbounds i8, i8* %2283, i64 %2286, !dbg !2034
  %2288 = load i8, i8* %2287, align 1, !dbg !2034
  %2289 = sext i8 %2288 to i32, !dbg !2034
  %2290 = icmp ne i32 %2289, 0, !dbg !2033
  br label %2291

2291:                                             ; preds = %2282, %2276
  %2292 = phi i1 [ false, %2276 ], [ %2290, %2282 ], !dbg !2038
  br i1 %2292, label %2293, label %2296, !dbg !2027

2293:                                             ; preds = %2291
  %2294 = load i64, i64* %44, align 8, !dbg !2039
  %2295 = add i64 %2294, 1, !dbg !2039
  store i64 %2295, i64* %44, align 8, !dbg !2039
  br label %2276, !dbg !2027, !llvm.loop !2040

2296:                                             ; preds = %2291
  br label %2501, !dbg !2041

2297:                                             ; preds = %originalBBpart2553
  %2298 = load i8, i8* %35, align 1, !dbg !2042
  %2299 = trunc i8 %2298 to i1, !dbg !2042
  br i1 %2299, label %2300, label %2437, !dbg !2045

2300:                                             ; preds = %2297
  %2301 = load i32, i32* @x.35
  %2302 = load i32, i32* @y.36
  %2303 = sub i32 %2301, 1
  %2304 = mul i32 %2301, %2303
  %2305 = urem i32 %2304, 2
  %2306 = icmp eq i32 %2305, 0
  %2307 = icmp slt i32 %2302, 10
  %2308 = or i1 %2306, %2307
  br i1 %2308, label %originalBB559, label %originalBB559alteredBB

originalBB559:                                    ; preds = %2300, %originalBB559alteredBB
  %2309 = load i32, i32* %23, align 4, !dbg !2046
  %2310 = icmp eq i32 %2309, 2, !dbg !2047
  %2311 = load i32, i32* @x.35
  %2312 = load i32, i32* @y.36
  %2313 = sub i32 %2311, 1
  %2314 = mul i32 %2311, %2313
  %2315 = urem i32 %2314, 2
  %2316 = icmp eq i32 %2315, 0
  %2317 = icmp slt i32 %2312, 10
  %2318 = or i1 %2316, %2317
  br i1 %2318, label %originalBBpart2561, label %originalBB559alteredBB

originalBBpart2561:                               ; preds = %originalBB559
  br i1 %2310, label %2319, label %2437, !dbg !2048

2319:                                             ; preds = %originalBBpart2561
  call void @llvm.dbg.declare(metadata i64* %49, metadata !2049, metadata !DIExpression()), !dbg !2051
  %2320 = load i32, i32* @x.35
  %2321 = load i32, i32* @y.36
  %2322 = sub i32 %2320, 1
  %2323 = mul i32 %2320, %2322
  %2324 = urem i32 %2323, 2
  %2325 = icmp eq i32 %2324, 0
  %2326 = icmp slt i32 %2321, 10
  %2327 = or i1 %2325, %2326
  br i1 %2327, label %originalBB563, label %originalBB563alteredBB

originalBB563:                                    ; preds = %2319, %originalBB563alteredBB
  store i64 1, i64* %49, align 8, !dbg !2052
  %2328 = load i32, i32* @x.35
  %2329 = load i32, i32* @y.36
  %2330 = sub i32 %2328, 1
  %2331 = mul i32 %2328, %2330
  %2332 = urem i32 %2331, 2
  %2333 = icmp eq i32 %2332, 0
  %2334 = icmp slt i32 %2329, 10
  %2335 = or i1 %2333, %2334
  br i1 %2335, label %originalBBpart2565, label %originalBB563alteredBB

originalBBpart2565:                               ; preds = %originalBB563
  br label %2336, !dbg !2054

2336:                                             ; preds = %originalBBpart2596, %originalBBpart2565
  %2337 = load i32, i32* @x.35
  %2338 = load i32, i32* @y.36
  %2339 = sub i32 %2337, 1
  %2340 = mul i32 %2337, %2339
  %2341 = urem i32 %2340, 2
  %2342 = icmp eq i32 %2341, 0
  %2343 = icmp slt i32 %2338, 10
  %2344 = or i1 %2342, %2343
  br i1 %2344, label %originalBB567, label %originalBB567alteredBB

originalBB567:                                    ; preds = %2336, %originalBB567alteredBB
  %2345 = load i64, i64* %49, align 8, !dbg !2055
  %2346 = load i64, i64* %48, align 8, !dbg !2057
  %2347 = icmp ult i64 %2345, %2346, !dbg !2058
  %2348 = load i32, i32* @x.35
  %2349 = load i32, i32* @y.36
  %2350 = sub i32 %2348, 1
  %2351 = mul i32 %2348, %2350
  %2352 = urem i32 %2351, 2
  %2353 = icmp eq i32 %2352, 0
  %2354 = icmp slt i32 %2349, 10
  %2355 = or i1 %2353, %2354
  br i1 %2355, label %originalBBpart2569, label %originalBB567alteredBB

originalBBpart2569:                               ; preds = %originalBB567
  br i1 %2347, label %2356, label %2436, !dbg !2059

2356:                                             ; preds = %originalBBpart2569
  %2357 = load i8*, i8** %21, align 8, !dbg !2060
  %2358 = load i64, i64* %28, align 8, !dbg !2061
  %2359 = load i64, i64* %44, align 8, !dbg !2062
  %2360 = add i64 %2358, %2359, !dbg !2063
  %2361 = load i64, i64* %49, align 8, !dbg !2064
  %2362 = add i64 %2360, %2361, !dbg !2065
  %2363 = getelementptr inbounds i8, i8* %2357, i64 %2362, !dbg !2060
  %2364 = load i8, i8* %2363, align 1, !dbg !2060
  %2365 = sext i8 %2364 to i32, !dbg !2060
  switch i32 %2365, label %2383 [
    i32 91, label %2366
    i32 92, label %2366
    i32 94, label %2366
    i32 96, label %2366
    i32 124, label %2366
  ], !dbg !2066

2366:                                             ; preds = %2356, %2356, %2356, %2356, %2356
  %2367 = load i32, i32* @x.35
  %2368 = load i32, i32* @y.36
  %2369 = sub i32 %2367, 1
  %2370 = mul i32 %2367, %2369
  %2371 = urem i32 %2370, 2
  %2372 = icmp eq i32 %2371, 0
  %2373 = icmp slt i32 %2368, 10
  %2374 = or i1 %2372, %2373
  br i1 %2374, label %originalBB571, label %originalBB571alteredBB

originalBB571:                                    ; preds = %2366, %originalBB571alteredBB
  %2375 = load i32, i32* @x.35
  %2376 = load i32, i32* @y.36
  %2377 = sub i32 %2375, 1
  %2378 = mul i32 %2375, %2377
  %2379 = urem i32 %2378, 2
  %2380 = icmp eq i32 %2379, 0
  %2381 = icmp slt i32 %2376, 10
  %2382 = or i1 %2380, %2381
  br i1 %2382, label %originalBBpart2573, label %originalBB571alteredBB

originalBBpart2573:                               ; preds = %originalBB571
  br label %4197, !dbg !2067

2383:                                             ; preds = %2356
  %2384 = load i32, i32* @x.35
  %2385 = load i32, i32* @y.36
  %2386 = sub i32 %2384, 1
  %2387 = mul i32 %2384, %2386
  %2388 = urem i32 %2387, 2
  %2389 = icmp eq i32 %2388, 0
  %2390 = icmp slt i32 %2385, 10
  %2391 = or i1 %2389, %2390
  br i1 %2391, label %originalBB575, label %originalBB575alteredBB

originalBB575:                                    ; preds = %2383, %originalBB575alteredBB
  %2392 = load i32, i32* @x.35
  %2393 = load i32, i32* @y.36
  %2394 = sub i32 %2392, 1
  %2395 = mul i32 %2392, %2394
  %2396 = urem i32 %2395, 2
  %2397 = icmp eq i32 %2396, 0
  %2398 = icmp slt i32 %2393, 10
  %2399 = or i1 %2397, %2398
  br i1 %2399, label %originalBBpart2577, label %originalBB575alteredBB

originalBBpart2577:                               ; preds = %originalBB575
  br label %2400, !dbg !2069

2400:                                             ; preds = %originalBBpart2577
  %2401 = load i32, i32* @x.35
  %2402 = load i32, i32* @y.36
  %2403 = sub i32 %2401, 1
  %2404 = mul i32 %2401, %2403
  %2405 = urem i32 %2404, 2
  %2406 = icmp eq i32 %2405, 0
  %2407 = icmp slt i32 %2402, 10
  %2408 = or i1 %2406, %2407
  br i1 %2408, label %originalBB579, label %originalBB579alteredBB

originalBB579:                                    ; preds = %2400, %originalBB579alteredBB
  %2409 = load i32, i32* @x.35
  %2410 = load i32, i32* @y.36
  %2411 = sub i32 %2409, 1
  %2412 = mul i32 %2409, %2411
  %2413 = urem i32 %2412, 2
  %2414 = icmp eq i32 %2413, 0
  %2415 = icmp slt i32 %2410, 10
  %2416 = or i1 %2414, %2415
  br i1 %2416, label %originalBBpart2581, label %originalBB579alteredBB

originalBBpart2581:                               ; preds = %originalBB579
  br label %2417, !dbg !2070

2417:                                             ; preds = %originalBBpart2581
  %2418 = load i32, i32* @x.35
  %2419 = load i32, i32* @y.36
  %2420 = sub i32 %2418, 1
  %2421 = mul i32 %2418, %2420
  %2422 = urem i32 %2421, 2
  %2423 = icmp eq i32 %2422, 0
  %2424 = icmp slt i32 %2419, 10
  %2425 = or i1 %2423, %2424
  br i1 %2425, label %originalBB583, label %originalBB583alteredBB

originalBB583:                                    ; preds = %2417, %originalBB583alteredBB
  %2426 = load i64, i64* %49, align 8, !dbg !2071
  %2427 = add i64 %2426, 1, !dbg !2071
  store i64 %2427, i64* %49, align 8, !dbg !2071
  %2428 = load i32, i32* @x.35
  %2429 = load i32, i32* @y.36
  %2430 = sub i32 %2428, 1
  %2431 = mul i32 %2428, %2430
  %2432 = urem i32 %2431, 2
  %2433 = icmp eq i32 %2432, 0
  %2434 = icmp slt i32 %2429, 10
  %2435 = or i1 %2433, %2434
  br i1 %2435, label %originalBBpart2596, label %originalBB583alteredBB

originalBBpart2596:                               ; preds = %originalBB583
  br label %2336, !dbg !2072, !llvm.loop !2073

2436:                                             ; preds = %originalBBpart2569
  br label %2437, !dbg !2075

2437:                                             ; preds = %2436, %originalBBpart2561, %2297
  %2438 = load i32, i32* %47, align 4, !dbg !2076
  %2439 = call i32 @iswprint(i32 %2438) #10, !dbg !2078
  %2440 = icmp ne i32 %2439, 0, !dbg !2078
  br i1 %2440, label %2458, label %2441, !dbg !2079

2441:                                             ; preds = %2437
  %2442 = load i32, i32* @x.35
  %2443 = load i32, i32* @y.36
  %2444 = sub i32 %2442, 1
  %2445 = mul i32 %2442, %2444
  %2446 = urem i32 %2445, 2
  %2447 = icmp eq i32 %2446, 0
  %2448 = icmp slt i32 %2443, 10
  %2449 = or i1 %2447, %2448
  br i1 %2449, label %originalBB598, label %originalBB598alteredBB

originalBB598:                                    ; preds = %2441, %originalBB598alteredBB
  store i8 0, i8* %45, align 1, !dbg !2080
  %2450 = load i32, i32* @x.35
  %2451 = load i32, i32* @y.36
  %2452 = sub i32 %2450, 1
  %2453 = mul i32 %2450, %2452
  %2454 = urem i32 %2453, 2
  %2455 = icmp eq i32 %2454, 0
  %2456 = icmp slt i32 %2451, 10
  %2457 = or i1 %2455, %2456
  br i1 %2457, label %originalBBpart2600, label %originalBB598alteredBB

originalBBpart2600:                               ; preds = %originalBB598
  br label %2458, !dbg !2081

2458:                                             ; preds = %originalBBpart2600, %2437
  %2459 = load i64, i64* %48, align 8, !dbg !2082
  %2460 = load i64, i64* %44, align 8, !dbg !2083
  %2461 = add i64 %2460, %2459, !dbg !2083
  store i64 %2461, i64* %44, align 8, !dbg !2083
  br label %2462

2462:                                             ; preds = %2458
  %2463 = load i32, i32* @x.35
  %2464 = load i32, i32* @y.36
  %2465 = sub i32 %2463, 1
  %2466 = mul i32 %2463, %2465
  %2467 = urem i32 %2466, 2
  %2468 = icmp eq i32 %2467, 0
  %2469 = icmp slt i32 %2464, 10
  %2470 = or i1 %2468, %2469
  br i1 %2470, label %originalBB602, label %originalBB602alteredBB

originalBB602:                                    ; preds = %2462, %originalBB602alteredBB
  %2471 = load i32, i32* @x.35
  %2472 = load i32, i32* @y.36
  %2473 = sub i32 %2471, 1
  %2474 = mul i32 %2471, %2473
  %2475 = urem i32 %2474, 2
  %2476 = icmp eq i32 %2475, 0
  %2477 = icmp slt i32 %2472, 10
  %2478 = or i1 %2476, %2477
  br i1 %2478, label %originalBBpart2604, label %originalBB602alteredBB

originalBBpart2604:                               ; preds = %originalBB602
  br label %2479

2479:                                             ; preds = %originalBBpart2604
  br label %2480

2480:                                             ; preds = %2479
  br label %2481, !dbg !2084

2481:                                             ; preds = %2480
  %2482 = load i32, i32* @x.35
  %2483 = load i32, i32* @y.36
  %2484 = sub i32 %2482, 1
  %2485 = mul i32 %2482, %2484
  %2486 = urem i32 %2485, 2
  %2487 = icmp eq i32 %2486, 0
  %2488 = icmp slt i32 %2483, 10
  %2489 = or i1 %2487, %2488
  br i1 %2489, label %originalBB606, label %originalBB606alteredBB

originalBB606:                                    ; preds = %2481, %originalBB606alteredBB
  %2490 = call i32 @mbsinit(%struct.__mbstate_t* %46) #13, !dbg !2085
  %2491 = icmp ne i32 %2490, 0, !dbg !2086
  %2492 = xor i1 %2491, true, !dbg !2086
  %2493 = load i32, i32* @x.35
  %2494 = load i32, i32* @y.36
  %2495 = sub i32 %2493, 1
  %2496 = mul i32 %2493, %2495
  %2497 = urem i32 %2496, 2
  %2498 = icmp eq i32 %2497, 0
  %2499 = icmp slt i32 %2494, 10
  %2500 = or i1 %2498, %2499
  br i1 %2500, label %originalBBpart2624, label %originalBB606alteredBB

originalBBpart2624:                               ; preds = %originalBB606
  br i1 %2492, label %2189, label %2501, !dbg !2084, !llvm.loop !2087

2501:                                             ; preds = %originalBBpart2624, %2296, %2239, %originalBBpart2549
  br label %2502

2502:                                             ; preds = %2501, %2113
  %2503 = load i8, i8* %45, align 1, !dbg !2089
  %2504 = trunc i8 %2503 to i1, !dbg !2089
  %2505 = zext i1 %2504 to i8, !dbg !2090
  store i8 %2505, i8* %43, align 1, !dbg !2090
  %2506 = load i64, i64* %44, align 8, !dbg !2091
  %2507 = icmp ult i64 1, %2506, !dbg !2093
  br i1 %2507, label %2546, label %2508, !dbg !2094

2508:                                             ; preds = %2502
  %2509 = load i32, i32* @x.35
  %2510 = load i32, i32* @y.36
  %2511 = sub i32 %2509, 1
  %2512 = mul i32 %2509, %2511
  %2513 = urem i32 %2512, 2
  %2514 = icmp eq i32 %2513, 0
  %2515 = icmp slt i32 %2510, 10
  %2516 = or i1 %2514, %2515
  br i1 %2516, label %originalBB626, label %originalBB626alteredBB

originalBB626:                                    ; preds = %2508, %originalBB626alteredBB
  %2517 = load i8, i8* %33, align 1, !dbg !2095
  %2518 = trunc i8 %2517 to i1, !dbg !2095
  %2519 = load i32, i32* @x.35
  %2520 = load i32, i32* @y.36
  %2521 = sub i32 %2519, 1
  %2522 = mul i32 %2519, %2521
  %2523 = urem i32 %2522, 2
  %2524 = icmp eq i32 %2523, 0
  %2525 = icmp slt i32 %2520, 10
  %2526 = or i1 %2524, %2525
  br i1 %2526, label %originalBBpart2628, label %originalBB626alteredBB

originalBBpart2628:                               ; preds = %originalBB626
  br i1 %2518, label %2527, label %3342, !dbg !2096

2527:                                             ; preds = %originalBBpart2628
  %2528 = load i32, i32* @x.35
  %2529 = load i32, i32* @y.36
  %2530 = sub i32 %2528, 1
  %2531 = mul i32 %2528, %2530
  %2532 = urem i32 %2531, 2
  %2533 = icmp eq i32 %2532, 0
  %2534 = icmp slt i32 %2529, 10
  %2535 = or i1 %2533, %2534
  br i1 %2535, label %originalBB630, label %originalBB630alteredBB

originalBB630:                                    ; preds = %2527, %originalBB630alteredBB
  %2536 = load i8, i8* %45, align 1, !dbg !2097
  %2537 = trunc i8 %2536 to i1, !dbg !2097
  %2538 = load i32, i32* @x.35
  %2539 = load i32, i32* @y.36
  %2540 = sub i32 %2538, 1
  %2541 = mul i32 %2538, %2540
  %2542 = urem i32 %2541, 2
  %2543 = icmp eq i32 %2542, 0
  %2544 = icmp slt i32 %2539, 10
  %2545 = or i1 %2543, %2544
  br i1 %2545, label %originalBBpart2632, label %originalBB630alteredBB

originalBBpart2632:                               ; preds = %originalBB630
  br i1 %2537, label %3342, label %2546, !dbg !2098

2546:                                             ; preds = %originalBBpart2632, %2502
  call void @llvm.dbg.declare(metadata i64* %50, metadata !2099, metadata !DIExpression()), !dbg !2101
  %2547 = load i64, i64* %28, align 8, !dbg !2102
  %2548 = load i64, i64* %44, align 8, !dbg !2103
  %2549 = add i64 %2547, %2548, !dbg !2104
  store i64 %2549, i64* %50, align 8, !dbg !2101
  br label %2550, !dbg !2105

2550:                                             ; preds = %3319, %2546
  %2551 = load i32, i32* @x.35
  %2552 = load i32, i32* @y.36
  %2553 = sub i32 %2551, 1
  %2554 = mul i32 %2551, %2553
  %2555 = urem i32 %2554, 2
  %2556 = icmp eq i32 %2555, 0
  %2557 = icmp slt i32 %2552, 10
  %2558 = or i1 %2556, %2557
  br i1 %2558, label %originalBB634, label %originalBB634alteredBB

originalBB634:                                    ; preds = %2550, %originalBB634alteredBB
  %2559 = load i8, i8* %33, align 1, !dbg !2106
  %2560 = trunc i8 %2559 to i1, !dbg !2106
  %2561 = load i32, i32* @x.35
  %2562 = load i32, i32* @y.36
  %2563 = sub i32 %2561, 1
  %2564 = mul i32 %2561, %2563
  %2565 = urem i32 %2564, 2
  %2566 = icmp eq i32 %2565, 0
  %2567 = icmp slt i32 %2562, 10
  %2568 = or i1 %2566, %2567
  br i1 %2568, label %originalBBpart2636, label %originalBB634alteredBB

originalBBpart2636:                               ; preds = %originalBB634
  br i1 %2560, label %2569, label %3042, !dbg !2111

2569:                                             ; preds = %originalBBpart2636
  %2570 = load i32, i32* @x.35
  %2571 = load i32, i32* @y.36
  %2572 = sub i32 %2570, 1
  %2573 = mul i32 %2570, %2572
  %2574 = urem i32 %2573, 2
  %2575 = icmp eq i32 %2574, 0
  %2576 = icmp slt i32 %2571, 10
  %2577 = or i1 %2575, %2576
  br i1 %2577, label %originalBB638, label %originalBB638alteredBB

originalBB638:                                    ; preds = %2569, %originalBB638alteredBB
  %2578 = load i8, i8* %45, align 1, !dbg !2112
  %2579 = trunc i8 %2578 to i1, !dbg !2112
  %2580 = load i32, i32* @x.35
  %2581 = load i32, i32* @y.36
  %2582 = sub i32 %2580, 1
  %2583 = mul i32 %2580, %2582
  %2584 = urem i32 %2583, 2
  %2585 = icmp eq i32 %2584, 0
  %2586 = icmp slt i32 %2581, 10
  %2587 = or i1 %2585, %2586
  br i1 %2587, label %originalBBpart2640, label %originalBB638alteredBB

originalBBpart2640:                               ; preds = %originalBB638
  br i1 %2579, label %3042, label %2588, !dbg !2113

2588:                                             ; preds = %originalBBpart2640
  %2589 = load i32, i32* @x.35
  %2590 = load i32, i32* @y.36
  %2591 = sub i32 %2589, 1
  %2592 = mul i32 %2589, %2591
  %2593 = urem i32 %2592, 2
  %2594 = icmp eq i32 %2593, 0
  %2595 = icmp slt i32 %2590, 10
  %2596 = or i1 %2594, %2595
  br i1 %2596, label %originalBB642, label %originalBB642alteredBB

originalBB642:                                    ; preds = %2588, %originalBB642alteredBB
  %2597 = load i32, i32* @x.35
  %2598 = load i32, i32* @y.36
  %2599 = sub i32 %2597, 1
  %2600 = mul i32 %2597, %2599
  %2601 = urem i32 %2600, 2
  %2602 = icmp eq i32 %2601, 0
  %2603 = icmp slt i32 %2598, 10
  %2604 = or i1 %2602, %2603
  br i1 %2604, label %originalBBpart2644, label %originalBB642alteredBB

originalBBpart2644:                               ; preds = %originalBB642
  br label %2605, !dbg !2114

2605:                                             ; preds = %originalBBpart2644
  %2606 = load i32, i32* @x.35
  %2607 = load i32, i32* @y.36
  %2608 = sub i32 %2606, 1
  %2609 = mul i32 %2606, %2608
  %2610 = urem i32 %2609, 2
  %2611 = icmp eq i32 %2610, 0
  %2612 = icmp slt i32 %2607, 10
  %2613 = or i1 %2611, %2612
  br i1 %2613, label %originalBB646, label %originalBB646alteredBB

originalBB646:                                    ; preds = %2605, %originalBB646alteredBB
  %2614 = load i8, i8* %35, align 1, !dbg !2116
  %2615 = trunc i8 %2614 to i1, !dbg !2116
  %2616 = load i32, i32* @x.35
  %2617 = load i32, i32* @y.36
  %2618 = sub i32 %2616, 1
  %2619 = mul i32 %2616, %2618
  %2620 = urem i32 %2619, 2
  %2621 = icmp eq i32 %2620, 0
  %2622 = icmp slt i32 %2617, 10
  %2623 = or i1 %2621, %2622
  br i1 %2623, label %originalBBpart2648, label %originalBB646alteredBB

originalBBpart2648:                               ; preds = %originalBB646
  br i1 %2615, label %2624, label %2641, !dbg !2119

2624:                                             ; preds = %originalBBpart2648
  %2625 = load i32, i32* @x.35
  %2626 = load i32, i32* @y.36
  %2627 = sub i32 %2625, 1
  %2628 = mul i32 %2625, %2627
  %2629 = urem i32 %2628, 2
  %2630 = icmp eq i32 %2629, 0
  %2631 = icmp slt i32 %2626, 10
  %2632 = or i1 %2630, %2631
  br i1 %2632, label %originalBB650, label %originalBB650alteredBB

originalBB650:                                    ; preds = %2624, %originalBB650alteredBB
  %2633 = load i32, i32* @x.35
  %2634 = load i32, i32* @y.36
  %2635 = sub i32 %2633, 1
  %2636 = mul i32 %2633, %2635
  %2637 = urem i32 %2636, 2
  %2638 = icmp eq i32 %2637, 0
  %2639 = icmp slt i32 %2634, 10
  %2640 = or i1 %2638, %2639
  br i1 %2640, label %originalBBpart2652, label %originalBB650alteredBB

originalBBpart2652:                               ; preds = %originalBB650
  br label %4197, !dbg !2116

2641:                                             ; preds = %originalBBpart2648
  %2642 = load i32, i32* @x.35
  %2643 = load i32, i32* @y.36
  %2644 = sub i32 %2642, 1
  %2645 = mul i32 %2642, %2644
  %2646 = urem i32 %2645, 2
  %2647 = icmp eq i32 %2646, 0
  %2648 = icmp slt i32 %2643, 10
  %2649 = or i1 %2647, %2648
  br i1 %2649, label %originalBB654, label %originalBB654alteredBB

originalBB654:                                    ; preds = %2641, %originalBB654alteredBB
  store i8 1, i8* %42, align 1, !dbg !2119
  %2650 = load i32, i32* %23, align 4, !dbg !2120
  %2651 = icmp eq i32 %2650, 2, !dbg !2120
  %2652 = load i32, i32* @x.35
  %2653 = load i32, i32* @y.36
  %2654 = sub i32 %2652, 1
  %2655 = mul i32 %2652, %2654
  %2656 = urem i32 %2655, 2
  %2657 = icmp eq i32 %2656, 0
  %2658 = icmp slt i32 %2653, 10
  %2659 = or i1 %2657, %2658
  br i1 %2659, label %originalBBpart2656, label %originalBB654alteredBB

originalBBpart2656:                               ; preds = %originalBB654
  br i1 %2651, label %2660, label %2844, !dbg !2120

2660:                                             ; preds = %originalBBpart2656
  %2661 = load i32, i32* @x.35
  %2662 = load i32, i32* @y.36
  %2663 = sub i32 %2661, 1
  %2664 = mul i32 %2661, %2663
  %2665 = urem i32 %2664, 2
  %2666 = icmp eq i32 %2665, 0
  %2667 = icmp slt i32 %2662, 10
  %2668 = or i1 %2666, %2667
  br i1 %2668, label %originalBB658, label %originalBB658alteredBB

originalBB658:                                    ; preds = %2660, %originalBB658alteredBB
  %2669 = load i8, i8* %36, align 1, !dbg !2120
  %2670 = trunc i8 %2669 to i1, !dbg !2120
  %2671 = load i32, i32* @x.35
  %2672 = load i32, i32* @y.36
  %2673 = sub i32 %2671, 1
  %2674 = mul i32 %2671, %2673
  %2675 = urem i32 %2674, 2
  %2676 = icmp eq i32 %2675, 0
  %2677 = icmp slt i32 %2672, 10
  %2678 = or i1 %2676, %2677
  br i1 %2678, label %originalBBpart2660, label %originalBB658alteredBB

originalBBpart2660:                               ; preds = %originalBB658
  br i1 %2670, label %2844, label %2679, !dbg !2119

2679:                                             ; preds = %originalBBpart2660
  %2680 = load i32, i32* @x.35
  %2681 = load i32, i32* @y.36
  %2682 = sub i32 %2680, 1
  %2683 = mul i32 %2680, %2682
  %2684 = urem i32 %2683, 2
  %2685 = icmp eq i32 %2684, 0
  %2686 = icmp slt i32 %2681, 10
  %2687 = or i1 %2685, %2686
  br i1 %2687, label %originalBB662, label %originalBB662alteredBB

originalBB662:                                    ; preds = %2679, %originalBB662alteredBB
  %2688 = load i32, i32* @x.35
  %2689 = load i32, i32* @y.36
  %2690 = sub i32 %2688, 1
  %2691 = mul i32 %2688, %2690
  %2692 = urem i32 %2691, 2
  %2693 = icmp eq i32 %2692, 0
  %2694 = icmp slt i32 %2689, 10
  %2695 = or i1 %2693, %2694
  br i1 %2695, label %originalBBpart2664, label %originalBB662alteredBB

originalBBpart2664:                               ; preds = %originalBB662
  br label %2696, !dbg !2122

2696:                                             ; preds = %originalBBpart2664
  %2697 = load i64, i64* %29, align 8, !dbg !2124
  %2698 = load i64, i64* %20, align 8, !dbg !2124
  %2699 = icmp ult i64 %2697, %2698, !dbg !2124
  br i1 %2699, label %2700, label %2704, !dbg !2127

2700:                                             ; preds = %2696
  %2701 = load i8*, i8** %19, align 8, !dbg !2124
  %2702 = load i64, i64* %29, align 8, !dbg !2124
  %2703 = getelementptr inbounds i8, i8* %2701, i64 %2702, !dbg !2124
  store i8 39, i8* %2703, align 1, !dbg !2124
  br label %2704, !dbg !2124

2704:                                             ; preds = %2700, %2696
  %2705 = load i32, i32* @x.35
  %2706 = load i32, i32* @y.36
  %2707 = sub i32 %2705, 1
  %2708 = mul i32 %2705, %2707
  %2709 = urem i32 %2708, 2
  %2710 = icmp eq i32 %2709, 0
  %2711 = icmp slt i32 %2706, 10
  %2712 = or i1 %2710, %2711
  br i1 %2712, label %originalBB666, label %originalBB666alteredBB

originalBB666:                                    ; preds = %2704, %originalBB666alteredBB
  %2713 = load i64, i64* %29, align 8, !dbg !2127
  %2714 = add i64 %2713, 1, !dbg !2127
  store i64 %2714, i64* %29, align 8, !dbg !2127
  %2715 = load i32, i32* @x.35
  %2716 = load i32, i32* @y.36
  %2717 = sub i32 %2715, 1
  %2718 = mul i32 %2715, %2717
  %2719 = urem i32 %2718, 2
  %2720 = icmp eq i32 %2719, 0
  %2721 = icmp slt i32 %2716, 10
  %2722 = or i1 %2720, %2721
  br i1 %2722, label %originalBBpart2679, label %originalBB666alteredBB

originalBBpart2679:                               ; preds = %originalBB666
  br label %2723, !dbg !2127

2723:                                             ; preds = %originalBBpart2679
  %2724 = load i32, i32* @x.35
  %2725 = load i32, i32* @y.36
  %2726 = sub i32 %2724, 1
  %2727 = mul i32 %2724, %2726
  %2728 = urem i32 %2727, 2
  %2729 = icmp eq i32 %2728, 0
  %2730 = icmp slt i32 %2725, 10
  %2731 = or i1 %2729, %2730
  br i1 %2731, label %originalBB681, label %originalBB681alteredBB

originalBB681:                                    ; preds = %2723, %originalBB681alteredBB
  %2732 = load i32, i32* @x.35
  %2733 = load i32, i32* @y.36
  %2734 = sub i32 %2732, 1
  %2735 = mul i32 %2732, %2734
  %2736 = urem i32 %2735, 2
  %2737 = icmp eq i32 %2736, 0
  %2738 = icmp slt i32 %2733, 10
  %2739 = or i1 %2737, %2738
  br i1 %2739, label %originalBBpart2683, label %originalBB681alteredBB

originalBBpart2683:                               ; preds = %originalBB681
  br label %2740, !dbg !2122

2740:                                             ; preds = %originalBBpart2683
  %2741 = load i32, i32* @x.35
  %2742 = load i32, i32* @y.36
  %2743 = sub i32 %2741, 1
  %2744 = mul i32 %2741, %2743
  %2745 = urem i32 %2744, 2
  %2746 = icmp eq i32 %2745, 0
  %2747 = icmp slt i32 %2742, 10
  %2748 = or i1 %2746, %2747
  br i1 %2748, label %originalBB685, label %originalBB685alteredBB

originalBB685:                                    ; preds = %2740, %originalBB685alteredBB
  %2749 = load i64, i64* %29, align 8, !dbg !2128
  %2750 = load i64, i64* %20, align 8, !dbg !2128
  %2751 = icmp ult i64 %2749, %2750, !dbg !2128
  %2752 = load i32, i32* @x.35
  %2753 = load i32, i32* @y.36
  %2754 = sub i32 %2752, 1
  %2755 = mul i32 %2752, %2754
  %2756 = urem i32 %2755, 2
  %2757 = icmp eq i32 %2756, 0
  %2758 = icmp slt i32 %2753, 10
  %2759 = or i1 %2757, %2758
  br i1 %2759, label %originalBBpart2687, label %originalBB685alteredBB

originalBBpart2687:                               ; preds = %originalBB685
  br i1 %2751, label %2760, label %2780, !dbg !2131

2760:                                             ; preds = %originalBBpart2687
  %2761 = load i32, i32* @x.35
  %2762 = load i32, i32* @y.36
  %2763 = sub i32 %2761, 1
  %2764 = mul i32 %2761, %2763
  %2765 = urem i32 %2764, 2
  %2766 = icmp eq i32 %2765, 0
  %2767 = icmp slt i32 %2762, 10
  %2768 = or i1 %2766, %2767
  br i1 %2768, label %originalBB689, label %originalBB689alteredBB

originalBB689:                                    ; preds = %2760, %originalBB689alteredBB
  %2769 = load i8*, i8** %19, align 8, !dbg !2128
  %2770 = load i64, i64* %29, align 8, !dbg !2128
  %2771 = getelementptr inbounds i8, i8* %2769, i64 %2770, !dbg !2128
  store i8 36, i8* %2771, align 1, !dbg !2128
  %2772 = load i32, i32* @x.35
  %2773 = load i32, i32* @y.36
  %2774 = sub i32 %2772, 1
  %2775 = mul i32 %2772, %2774
  %2776 = urem i32 %2775, 2
  %2777 = icmp eq i32 %2776, 0
  %2778 = icmp slt i32 %2773, 10
  %2779 = or i1 %2777, %2778
  br i1 %2779, label %originalBBpart2691, label %originalBB689alteredBB

originalBBpart2691:                               ; preds = %originalBB689
  br label %2780, !dbg !2128

2780:                                             ; preds = %originalBBpart2691, %originalBBpart2687
  %2781 = load i64, i64* %29, align 8, !dbg !2131
  %2782 = add i64 %2781, 1, !dbg !2131
  store i64 %2782, i64* %29, align 8, !dbg !2131
  br label %2783, !dbg !2131

2783:                                             ; preds = %2780
  %2784 = load i32, i32* @x.35
  %2785 = load i32, i32* @y.36
  %2786 = sub i32 %2784, 1
  %2787 = mul i32 %2784, %2786
  %2788 = urem i32 %2787, 2
  %2789 = icmp eq i32 %2788, 0
  %2790 = icmp slt i32 %2785, 10
  %2791 = or i1 %2789, %2790
  br i1 %2791, label %originalBB693, label %originalBB693alteredBB

originalBB693:                                    ; preds = %2783, %originalBB693alteredBB
  %2792 = load i32, i32* @x.35
  %2793 = load i32, i32* @y.36
  %2794 = sub i32 %2792, 1
  %2795 = mul i32 %2792, %2794
  %2796 = urem i32 %2795, 2
  %2797 = icmp eq i32 %2796, 0
  %2798 = icmp slt i32 %2793, 10
  %2799 = or i1 %2797, %2798
  br i1 %2799, label %originalBBpart2695, label %originalBB693alteredBB

originalBBpart2695:                               ; preds = %originalBB693
  br label %2800, !dbg !2122

2800:                                             ; preds = %originalBBpart2695
  %2801 = load i32, i32* @x.35
  %2802 = load i32, i32* @y.36
  %2803 = sub i32 %2801, 1
  %2804 = mul i32 %2801, %2803
  %2805 = urem i32 %2804, 2
  %2806 = icmp eq i32 %2805, 0
  %2807 = icmp slt i32 %2802, 10
  %2808 = or i1 %2806, %2807
  br i1 %2808, label %originalBB697, label %originalBB697alteredBB

originalBB697:                                    ; preds = %2800, %originalBB697alteredBB
  %2809 = load i64, i64* %29, align 8, !dbg !2132
  %2810 = load i64, i64* %20, align 8, !dbg !2132
  %2811 = icmp ult i64 %2809, %2810, !dbg !2132
  %2812 = load i32, i32* @x.35
  %2813 = load i32, i32* @y.36
  %2814 = sub i32 %2812, 1
  %2815 = mul i32 %2812, %2814
  %2816 = urem i32 %2815, 2
  %2817 = icmp eq i32 %2816, 0
  %2818 = icmp slt i32 %2813, 10
  %2819 = or i1 %2817, %2818
  br i1 %2819, label %originalBBpart2699, label %originalBB697alteredBB

originalBBpart2699:                               ; preds = %originalBB697
  br i1 %2811, label %2820, label %2824, !dbg !2135

2820:                                             ; preds = %originalBBpart2699
  %2821 = load i8*, i8** %19, align 8, !dbg !2132
  %2822 = load i64, i64* %29, align 8, !dbg !2132
  %2823 = getelementptr inbounds i8, i8* %2821, i64 %2822, !dbg !2132
  store i8 39, i8* %2823, align 1, !dbg !2132
  br label %2824, !dbg !2132

2824:                                             ; preds = %2820, %originalBBpart2699
  %2825 = load i64, i64* %29, align 8, !dbg !2135
  %2826 = add i64 %2825, 1, !dbg !2135
  store i64 %2826, i64* %29, align 8, !dbg !2135
  br label %2827, !dbg !2135

2827:                                             ; preds = %2824
  %2828 = load i32, i32* @x.35
  %2829 = load i32, i32* @y.36
  %2830 = sub i32 %2828, 1
  %2831 = mul i32 %2828, %2830
  %2832 = urem i32 %2831, 2
  %2833 = icmp eq i32 %2832, 0
  %2834 = icmp slt i32 %2829, 10
  %2835 = or i1 %2833, %2834
  br i1 %2835, label %originalBB701, label %originalBB701alteredBB

originalBB701:                                    ; preds = %2827, %originalBB701alteredBB
  store i8 1, i8* %36, align 1, !dbg !2122
  %2836 = load i32, i32* @x.35
  %2837 = load i32, i32* @y.36
  %2838 = sub i32 %2836, 1
  %2839 = mul i32 %2836, %2838
  %2840 = urem i32 %2839, 2
  %2841 = icmp eq i32 %2840, 0
  %2842 = icmp slt i32 %2837, 10
  %2843 = or i1 %2841, %2842
  br i1 %2843, label %originalBBpart2703, label %originalBB701alteredBB

originalBBpart2703:                               ; preds = %originalBB701
  br label %2844, !dbg !2122

2844:                                             ; preds = %originalBBpart2703, %originalBBpart2660, %originalBBpart2656
  %2845 = load i32, i32* @x.35
  %2846 = load i32, i32* @y.36
  %2847 = sub i32 %2845, 1
  %2848 = mul i32 %2845, %2847
  %2849 = urem i32 %2848, 2
  %2850 = icmp eq i32 %2849, 0
  %2851 = icmp slt i32 %2846, 10
  %2852 = or i1 %2850, %2851
  br i1 %2852, label %originalBB705, label %originalBB705alteredBB

originalBB705:                                    ; preds = %2844, %originalBB705alteredBB
  %2853 = load i32, i32* @x.35
  %2854 = load i32, i32* @y.36
  %2855 = sub i32 %2853, 1
  %2856 = mul i32 %2853, %2855
  %2857 = urem i32 %2856, 2
  %2858 = icmp eq i32 %2857, 0
  %2859 = icmp slt i32 %2854, 10
  %2860 = or i1 %2858, %2859
  br i1 %2860, label %originalBBpart2707, label %originalBB705alteredBB

originalBBpart2707:                               ; preds = %originalBB705
  br label %2861, !dbg !2119

2861:                                             ; preds = %originalBBpart2707
  %2862 = load i32, i32* @x.35
  %2863 = load i32, i32* @y.36
  %2864 = sub i32 %2862, 1
  %2865 = mul i32 %2862, %2864
  %2866 = urem i32 %2865, 2
  %2867 = icmp eq i32 %2866, 0
  %2868 = icmp slt i32 %2863, 10
  %2869 = or i1 %2867, %2868
  br i1 %2869, label %originalBB709, label %originalBB709alteredBB

originalBB709:                                    ; preds = %2861, %originalBB709alteredBB
  %2870 = load i64, i64* %29, align 8, !dbg !2136
  %2871 = load i64, i64* %20, align 8, !dbg !2136
  %2872 = icmp ult i64 %2870, %2871, !dbg !2136
  %2873 = load i32, i32* @x.35
  %2874 = load i32, i32* @y.36
  %2875 = sub i32 %2873, 1
  %2876 = mul i32 %2873, %2875
  %2877 = urem i32 %2876, 2
  %2878 = icmp eq i32 %2877, 0
  %2879 = icmp slt i32 %2874, 10
  %2880 = or i1 %2878, %2879
  br i1 %2880, label %originalBBpart2711, label %originalBB709alteredBB

originalBBpart2711:                               ; preds = %originalBB709
  br i1 %2872, label %2881, label %2901, !dbg !2139

2881:                                             ; preds = %originalBBpart2711
  %2882 = load i32, i32* @x.35
  %2883 = load i32, i32* @y.36
  %2884 = sub i32 %2882, 1
  %2885 = mul i32 %2882, %2884
  %2886 = urem i32 %2885, 2
  %2887 = icmp eq i32 %2886, 0
  %2888 = icmp slt i32 %2883, 10
  %2889 = or i1 %2887, %2888
  br i1 %2889, label %originalBB713, label %originalBB713alteredBB

originalBB713:                                    ; preds = %2881, %originalBB713alteredBB
  %2890 = load i8*, i8** %19, align 8, !dbg !2136
  %2891 = load i64, i64* %29, align 8, !dbg !2136
  %2892 = getelementptr inbounds i8, i8* %2890, i64 %2891, !dbg !2136
  store i8 92, i8* %2892, align 1, !dbg !2136
  %2893 = load i32, i32* @x.35
  %2894 = load i32, i32* @y.36
  %2895 = sub i32 %2893, 1
  %2896 = mul i32 %2893, %2895
  %2897 = urem i32 %2896, 2
  %2898 = icmp eq i32 %2897, 0
  %2899 = icmp slt i32 %2894, 10
  %2900 = or i1 %2898, %2899
  br i1 %2900, label %originalBBpart2715, label %originalBB713alteredBB

originalBBpart2715:                               ; preds = %originalBB713
  br label %2901, !dbg !2136

2901:                                             ; preds = %originalBBpart2715, %originalBBpart2711
  %2902 = load i32, i32* @x.35
  %2903 = load i32, i32* @y.36
  %2904 = sub i32 %2902, 1
  %2905 = mul i32 %2902, %2904
  %2906 = urem i32 %2905, 2
  %2907 = icmp eq i32 %2906, 0
  %2908 = icmp slt i32 %2903, 10
  %2909 = or i1 %2907, %2908
  br i1 %2909, label %originalBB717, label %originalBB717alteredBB

originalBB717:                                    ; preds = %2901, %originalBB717alteredBB
  %2910 = load i64, i64* %29, align 8, !dbg !2139
  %2911 = add i64 %2910, 1, !dbg !2139
  store i64 %2911, i64* %29, align 8, !dbg !2139
  %2912 = load i32, i32* @x.35
  %2913 = load i32, i32* @y.36
  %2914 = sub i32 %2912, 1
  %2915 = mul i32 %2912, %2914
  %2916 = urem i32 %2915, 2
  %2917 = icmp eq i32 %2916, 0
  %2918 = icmp slt i32 %2913, 10
  %2919 = or i1 %2917, %2918
  br i1 %2919, label %originalBBpart2724, label %originalBB717alteredBB

originalBBpart2724:                               ; preds = %originalBB717
  br label %2920, !dbg !2139

2920:                                             ; preds = %originalBBpart2724
  br label %2921, !dbg !2119

2921:                                             ; preds = %2920
  %2922 = load i32, i32* @x.35
  %2923 = load i32, i32* @y.36
  %2924 = sub i32 %2922, 1
  %2925 = mul i32 %2922, %2924
  %2926 = urem i32 %2925, 2
  %2927 = icmp eq i32 %2926, 0
  %2928 = icmp slt i32 %2923, 10
  %2929 = or i1 %2927, %2928
  br i1 %2929, label %originalBB726, label %originalBB726alteredBB

originalBB726:                                    ; preds = %2921, %originalBB726alteredBB
  %2930 = load i32, i32* @x.35
  %2931 = load i32, i32* @y.36
  %2932 = sub i32 %2930, 1
  %2933 = mul i32 %2930, %2932
  %2934 = urem i32 %2933, 2
  %2935 = icmp eq i32 %2934, 0
  %2936 = icmp slt i32 %2931, 10
  %2937 = or i1 %2935, %2936
  br i1 %2937, label %originalBBpart2728, label %originalBB726alteredBB

originalBBpart2728:                               ; preds = %originalBB726
  br label %2938, !dbg !2140

2938:                                             ; preds = %originalBBpart2728
  %2939 = load i32, i32* @x.35
  %2940 = load i32, i32* @y.36
  %2941 = sub i32 %2939, 1
  %2942 = mul i32 %2939, %2941
  %2943 = urem i32 %2942, 2
  %2944 = icmp eq i32 %2943, 0
  %2945 = icmp slt i32 %2940, 10
  %2946 = or i1 %2944, %2945
  br i1 %2946, label %originalBB730, label %originalBB730alteredBB

originalBB730:                                    ; preds = %2938, %originalBB730alteredBB
  %2947 = load i64, i64* %29, align 8, !dbg !2141
  %2948 = load i64, i64* %20, align 8, !dbg !2141
  %2949 = icmp ult i64 %2947, %2948, !dbg !2141
  %2950 = load i32, i32* @x.35
  %2951 = load i32, i32* @y.36
  %2952 = sub i32 %2950, 1
  %2953 = mul i32 %2950, %2952
  %2954 = urem i32 %2953, 2
  %2955 = icmp eq i32 %2954, 0
  %2956 = icmp slt i32 %2951, 10
  %2957 = or i1 %2955, %2956
  br i1 %2957, label %originalBBpart2732, label %originalBB730alteredBB

originalBBpart2732:                               ; preds = %originalBB730
  br i1 %2949, label %2958, label %2983, !dbg !2144

2958:                                             ; preds = %originalBBpart2732
  %2959 = load i32, i32* @x.35
  %2960 = load i32, i32* @y.36
  %2961 = sub i32 %2959, 1
  %2962 = mul i32 %2959, %2961
  %2963 = urem i32 %2962, 2
  %2964 = icmp eq i32 %2963, 0
  %2965 = icmp slt i32 %2960, 10
  %2966 = or i1 %2964, %2965
  br i1 %2966, label %originalBB734, label %originalBB734alteredBB

originalBB734:                                    ; preds = %2958, %originalBB734alteredBB
  %2967 = load i8, i8* %39, align 1, !dbg !2141
  %2968 = zext i8 %2967 to i32, !dbg !2141
  %2969 = ashr i32 %2968, 6, !dbg !2141
  %2970 = add nsw i32 48, %2969, !dbg !2141
  %2971 = trunc i32 %2970 to i8, !dbg !2141
  %2972 = load i8*, i8** %19, align 8, !dbg !2141
  %2973 = load i64, i64* %29, align 8, !dbg !2141
  %2974 = getelementptr inbounds i8, i8* %2972, i64 %2973, !dbg !2141
  store i8 %2971, i8* %2974, align 1, !dbg !2141
  %2975 = load i32, i32* @x.35
  %2976 = load i32, i32* @y.36
  %2977 = sub i32 %2975, 1
  %2978 = mul i32 %2975, %2977
  %2979 = urem i32 %2978, 2
  %2980 = icmp eq i32 %2979, 0
  %2981 = icmp slt i32 %2976, 10
  %2982 = or i1 %2980, %2981
  br i1 %2982, label %originalBBpart2749, label %originalBB734alteredBB

originalBBpart2749:                               ; preds = %originalBB734
  br label %2983, !dbg !2141

2983:                                             ; preds = %originalBBpart2749, %originalBBpart2732
  %2984 = load i64, i64* %29, align 8, !dbg !2144
  %2985 = add i64 %2984, 1, !dbg !2144
  store i64 %2985, i64* %29, align 8, !dbg !2144
  br label %2986, !dbg !2144

2986:                                             ; preds = %2983
  %2987 = load i32, i32* @x.35
  %2988 = load i32, i32* @y.36
  %2989 = sub i32 %2987, 1
  %2990 = mul i32 %2987, %2989
  %2991 = urem i32 %2990, 2
  %2992 = icmp eq i32 %2991, 0
  %2993 = icmp slt i32 %2988, 10
  %2994 = or i1 %2992, %2993
  br i1 %2994, label %originalBB751, label %originalBB751alteredBB

originalBB751:                                    ; preds = %2986, %originalBB751alteredBB
  %2995 = load i32, i32* @x.35
  %2996 = load i32, i32* @y.36
  %2997 = sub i32 %2995, 1
  %2998 = mul i32 %2995, %2997
  %2999 = urem i32 %2998, 2
  %3000 = icmp eq i32 %2999, 0
  %3001 = icmp slt i32 %2996, 10
  %3002 = or i1 %3000, %3001
  br i1 %3002, label %originalBBpart2753, label %originalBB751alteredBB

originalBBpart2753:                               ; preds = %originalBB751
  br label %3003, !dbg !2145

3003:                                             ; preds = %originalBBpart2753
  %3004 = load i64, i64* %29, align 8, !dbg !2146
  %3005 = load i64, i64* %20, align 8, !dbg !2146
  %3006 = icmp ult i64 %3004, %3005, !dbg !2146
  br i1 %3006, label %3007, label %3017, !dbg !2149

3007:                                             ; preds = %3003
  %3008 = load i8, i8* %39, align 1, !dbg !2146
  %3009 = zext i8 %3008 to i32, !dbg !2146
  %3010 = ashr i32 %3009, 3, !dbg !2146
  %3011 = and i32 %3010, 7, !dbg !2146
  %3012 = add nsw i32 48, %3011, !dbg !2146
  %3013 = trunc i32 %3012 to i8, !dbg !2146
  %3014 = load i8*, i8** %19, align 8, !dbg !2146
  %3015 = load i64, i64* %29, align 8, !dbg !2146
  %3016 = getelementptr inbounds i8, i8* %3014, i64 %3015, !dbg !2146
  store i8 %3013, i8* %3016, align 1, !dbg !2146
  br label %3017, !dbg !2146

3017:                                             ; preds = %3007, %3003
  %3018 = load i64, i64* %29, align 8, !dbg !2149
  %3019 = add i64 %3018, 1, !dbg !2149
  store i64 %3019, i64* %29, align 8, !dbg !2149
  br label %3020, !dbg !2149

3020:                                             ; preds = %3017
  %3021 = load i32, i32* @x.35
  %3022 = load i32, i32* @y.36
  %3023 = sub i32 %3021, 1
  %3024 = mul i32 %3021, %3023
  %3025 = urem i32 %3024, 2
  %3026 = icmp eq i32 %3025, 0
  %3027 = icmp slt i32 %3022, 10
  %3028 = or i1 %3026, %3027
  br i1 %3028, label %originalBB755, label %originalBB755alteredBB

originalBB755:                                    ; preds = %3020, %originalBB755alteredBB
  %3029 = load i8, i8* %39, align 1, !dbg !2150
  %3030 = zext i8 %3029 to i32, !dbg !2150
  %3031 = and i32 %3030, 7, !dbg !2151
  %3032 = add nsw i32 48, %3031, !dbg !2152
  %3033 = trunc i32 %3032 to i8, !dbg !2153
  store i8 %3033, i8* %39, align 1, !dbg !2154
  %3034 = load i32, i32* @x.35
  %3035 = load i32, i32* @y.36
  %3036 = sub i32 %3034, 1
  %3037 = mul i32 %3034, %3036
  %3038 = urem i32 %3037, 2
  %3039 = icmp eq i32 %3038, 0
  %3040 = icmp slt i32 %3035, 10
  %3041 = or i1 %3039, %3040
  br i1 %3041, label %originalBBpart2770, label %originalBB755alteredBB

originalBBpart2770:                               ; preds = %originalBB755
  br label %3091, !dbg !2155

3042:                                             ; preds = %originalBBpart2640, %originalBBpart2636
  %3043 = load i8, i8* %41, align 1, !dbg !2156
  %3044 = trunc i8 %3043 to i1, !dbg !2156
  br i1 %3044, label %3045, label %3090, !dbg !2158

3045:                                             ; preds = %3042
  %3046 = load i32, i32* @x.35
  %3047 = load i32, i32* @y.36
  %3048 = sub i32 %3046, 1
  %3049 = mul i32 %3046, %3048
  %3050 = urem i32 %3049, 2
  %3051 = icmp eq i32 %3050, 0
  %3052 = icmp slt i32 %3047, 10
  %3053 = or i1 %3051, %3052
  br i1 %3053, label %originalBB772, label %originalBB772alteredBB

originalBB772:                                    ; preds = %3045, %originalBB772alteredBB
  %3054 = load i32, i32* @x.35
  %3055 = load i32, i32* @y.36
  %3056 = sub i32 %3054, 1
  %3057 = mul i32 %3054, %3056
  %3058 = urem i32 %3057, 2
  %3059 = icmp eq i32 %3058, 0
  %3060 = icmp slt i32 %3055, 10
  %3061 = or i1 %3059, %3060
  br i1 %3061, label %originalBBpart2774, label %originalBB772alteredBB

originalBBpart2774:                               ; preds = %originalBB772
  br label %3062, !dbg !2159

3062:                                             ; preds = %originalBBpart2774
  %3063 = load i64, i64* %29, align 8, !dbg !2161
  %3064 = load i64, i64* %20, align 8, !dbg !2161
  %3065 = icmp ult i64 %3063, %3064, !dbg !2161
  br i1 %3065, label %3066, label %3086, !dbg !2164

3066:                                             ; preds = %3062
  %3067 = load i32, i32* @x.35
  %3068 = load i32, i32* @y.36
  %3069 = sub i32 %3067, 1
  %3070 = mul i32 %3067, %3069
  %3071 = urem i32 %3070, 2
  %3072 = icmp eq i32 %3071, 0
  %3073 = icmp slt i32 %3068, 10
  %3074 = or i1 %3072, %3073
  br i1 %3074, label %originalBB776, label %originalBB776alteredBB

originalBB776:                                    ; preds = %3066, %originalBB776alteredBB
  %3075 = load i8*, i8** %19, align 8, !dbg !2161
  %3076 = load i64, i64* %29, align 8, !dbg !2161
  %3077 = getelementptr inbounds i8, i8* %3075, i64 %3076, !dbg !2161
  store i8 92, i8* %3077, align 1, !dbg !2161
  %3078 = load i32, i32* @x.35
  %3079 = load i32, i32* @y.36
  %3080 = sub i32 %3078, 1
  %3081 = mul i32 %3078, %3080
  %3082 = urem i32 %3081, 2
  %3083 = icmp eq i32 %3082, 0
  %3084 = icmp slt i32 %3079, 10
  %3085 = or i1 %3083, %3084
  br i1 %3085, label %originalBBpart2778, label %originalBB776alteredBB

originalBBpart2778:                               ; preds = %originalBB776
  br label %3086, !dbg !2161

3086:                                             ; preds = %originalBBpart2778, %3062
  %3087 = load i64, i64* %29, align 8, !dbg !2164
  %3088 = add i64 %3087, 1, !dbg !2164
  store i64 %3088, i64* %29, align 8, !dbg !2164
  br label %3089, !dbg !2164

3089:                                             ; preds = %3086
  store i8 0, i8* %41, align 1, !dbg !2165
  br label %3090, !dbg !2166

3090:                                             ; preds = %3089, %3042
  br label %3091

3091:                                             ; preds = %3090, %originalBBpart2770
  %3092 = load i32, i32* @x.35
  %3093 = load i32, i32* @y.36
  %3094 = sub i32 %3092, 1
  %3095 = mul i32 %3092, %3094
  %3096 = urem i32 %3095, 2
  %3097 = icmp eq i32 %3096, 0
  %3098 = icmp slt i32 %3093, 10
  %3099 = or i1 %3097, %3098
  br i1 %3099, label %originalBB780, label %originalBB780alteredBB

originalBB780:                                    ; preds = %3091, %originalBB780alteredBB
  %3100 = load i64, i64* %50, align 8, !dbg !2167
  %3101 = load i64, i64* %28, align 8, !dbg !2169
  %3102 = add i64 %3101, 1, !dbg !2170
  %3103 = icmp ule i64 %3100, %3102, !dbg !2171
  %3104 = load i32, i32* @x.35
  %3105 = load i32, i32* @y.36
  %3106 = sub i32 %3104, 1
  %3107 = mul i32 %3104, %3106
  %3108 = urem i32 %3107, 2
  %3109 = icmp eq i32 %3108, 0
  %3110 = icmp slt i32 %3105, 10
  %3111 = or i1 %3109, %3110
  br i1 %3111, label %originalBBpart2794, label %originalBB780alteredBB

originalBBpart2794:                               ; preds = %originalBB780
  br i1 %3103, label %3112, label %3129, !dbg !2172

3112:                                             ; preds = %originalBBpart2794
  %3113 = load i32, i32* @x.35
  %3114 = load i32, i32* @y.36
  %3115 = sub i32 %3113, 1
  %3116 = mul i32 %3113, %3115
  %3117 = urem i32 %3116, 2
  %3118 = icmp eq i32 %3117, 0
  %3119 = icmp slt i32 %3114, 10
  %3120 = or i1 %3118, %3119
  br i1 %3120, label %originalBB796, label %originalBB796alteredBB

originalBB796:                                    ; preds = %3112, %originalBB796alteredBB
  %3121 = load i32, i32* @x.35
  %3122 = load i32, i32* @y.36
  %3123 = sub i32 %3121, 1
  %3124 = mul i32 %3121, %3123
  %3125 = urem i32 %3124, 2
  %3126 = icmp eq i32 %3125, 0
  %3127 = icmp slt i32 %3122, 10
  %3128 = or i1 %3126, %3127
  br i1 %3128, label %originalBBpart2798, label %originalBB796alteredBB

originalBBpart2798:                               ; preds = %originalBB796
  br label %3325, !dbg !2173

3129:                                             ; preds = %originalBBpart2794
  br label %3130, !dbg !2174

3130:                                             ; preds = %3129
  %3131 = load i32, i32* @x.35
  %3132 = load i32, i32* @y.36
  %3133 = sub i32 %3131, 1
  %3134 = mul i32 %3131, %3133
  %3135 = urem i32 %3134, 2
  %3136 = icmp eq i32 %3135, 0
  %3137 = icmp slt i32 %3132, 10
  %3138 = or i1 %3136, %3137
  br i1 %3138, label %originalBB800, label %originalBB800alteredBB

originalBB800:                                    ; preds = %3130, %originalBB800alteredBB
  %3139 = load i8, i8* %36, align 1, !dbg !2175
  %3140 = trunc i8 %3139 to i1, !dbg !2175
  %3141 = load i32, i32* @x.35
  %3142 = load i32, i32* @y.36
  %3143 = sub i32 %3141, 1
  %3144 = mul i32 %3141, %3143
  %3145 = urem i32 %3144, 2
  %3146 = icmp eq i32 %3145, 0
  %3147 = icmp slt i32 %3142, 10
  %3148 = or i1 %3146, %3147
  br i1 %3148, label %originalBBpart2802, label %originalBB800alteredBB

originalBBpart2802:                               ; preds = %originalBB800
  br i1 %3140, label %3149, label %3289, !dbg !2175

3149:                                             ; preds = %originalBBpart2802
  %3150 = load i32, i32* @x.35
  %3151 = load i32, i32* @y.36
  %3152 = sub i32 %3150, 1
  %3153 = mul i32 %3150, %3152
  %3154 = urem i32 %3153, 2
  %3155 = icmp eq i32 %3154, 0
  %3156 = icmp slt i32 %3151, 10
  %3157 = or i1 %3155, %3156
  br i1 %3157, label %originalBB804, label %originalBB804alteredBB

originalBB804:                                    ; preds = %3149, %originalBB804alteredBB
  %3158 = load i8, i8* %42, align 1, !dbg !2175
  %3159 = trunc i8 %3158 to i1, !dbg !2175
  %3160 = load i32, i32* @x.35
  %3161 = load i32, i32* @y.36
  %3162 = sub i32 %3160, 1
  %3163 = mul i32 %3160, %3162
  %3164 = urem i32 %3163, 2
  %3165 = icmp eq i32 %3164, 0
  %3166 = icmp slt i32 %3161, 10
  %3167 = or i1 %3165, %3166
  br i1 %3167, label %originalBBpart2806, label %originalBB804alteredBB

originalBBpart2806:                               ; preds = %originalBB804
  br i1 %3159, label %3289, label %3168, !dbg !2178

3168:                                             ; preds = %originalBBpart2806
  %3169 = load i32, i32* @x.35
  %3170 = load i32, i32* @y.36
  %3171 = sub i32 %3169, 1
  %3172 = mul i32 %3169, %3171
  %3173 = urem i32 %3172, 2
  %3174 = icmp eq i32 %3173, 0
  %3175 = icmp slt i32 %3170, 10
  %3176 = or i1 %3174, %3175
  br i1 %3176, label %originalBB808, label %originalBB808alteredBB

originalBB808:                                    ; preds = %3168, %originalBB808alteredBB
  %3177 = load i32, i32* @x.35
  %3178 = load i32, i32* @y.36
  %3179 = sub i32 %3177, 1
  %3180 = mul i32 %3177, %3179
  %3181 = urem i32 %3180, 2
  %3182 = icmp eq i32 %3181, 0
  %3183 = icmp slt i32 %3178, 10
  %3184 = or i1 %3182, %3183
  br i1 %3184, label %originalBBpart2810, label %originalBB808alteredBB

originalBBpart2810:                               ; preds = %originalBB808
  br label %3185, !dbg !2179

3185:                                             ; preds = %originalBBpart2810
  %3186 = load i32, i32* @x.35
  %3187 = load i32, i32* @y.36
  %3188 = sub i32 %3186, 1
  %3189 = mul i32 %3186, %3188
  %3190 = urem i32 %3189, 2
  %3191 = icmp eq i32 %3190, 0
  %3192 = icmp slt i32 %3187, 10
  %3193 = or i1 %3191, %3192
  br i1 %3193, label %originalBB812, label %originalBB812alteredBB

originalBB812:                                    ; preds = %3185, %originalBB812alteredBB
  %3194 = load i64, i64* %29, align 8, !dbg !2181
  %3195 = load i64, i64* %20, align 8, !dbg !2181
  %3196 = icmp ult i64 %3194, %3195, !dbg !2181
  %3197 = load i32, i32* @x.35
  %3198 = load i32, i32* @y.36
  %3199 = sub i32 %3197, 1
  %3200 = mul i32 %3197, %3199
  %3201 = urem i32 %3200, 2
  %3202 = icmp eq i32 %3201, 0
  %3203 = icmp slt i32 %3198, 10
  %3204 = or i1 %3202, %3203
  br i1 %3204, label %originalBBpart2814, label %originalBB812alteredBB

originalBBpart2814:                               ; preds = %originalBB812
  br i1 %3196, label %3205, label %3225, !dbg !2184

3205:                                             ; preds = %originalBBpart2814
  %3206 = load i32, i32* @x.35
  %3207 = load i32, i32* @y.36
  %3208 = sub i32 %3206, 1
  %3209 = mul i32 %3206, %3208
  %3210 = urem i32 %3209, 2
  %3211 = icmp eq i32 %3210, 0
  %3212 = icmp slt i32 %3207, 10
  %3213 = or i1 %3211, %3212
  br i1 %3213, label %originalBB816, label %originalBB816alteredBB

originalBB816:                                    ; preds = %3205, %originalBB816alteredBB
  %3214 = load i8*, i8** %19, align 8, !dbg !2181
  %3215 = load i64, i64* %29, align 8, !dbg !2181
  %3216 = getelementptr inbounds i8, i8* %3214, i64 %3215, !dbg !2181
  store i8 39, i8* %3216, align 1, !dbg !2181
  %3217 = load i32, i32* @x.35
  %3218 = load i32, i32* @y.36
  %3219 = sub i32 %3217, 1
  %3220 = mul i32 %3217, %3219
  %3221 = urem i32 %3220, 2
  %3222 = icmp eq i32 %3221, 0
  %3223 = icmp slt i32 %3218, 10
  %3224 = or i1 %3222, %3223
  br i1 %3224, label %originalBBpart2818, label %originalBB816alteredBB

originalBBpart2818:                               ; preds = %originalBB816
  br label %3225, !dbg !2181

3225:                                             ; preds = %originalBBpart2818, %originalBBpart2814
  %3226 = load i32, i32* @x.35
  %3227 = load i32, i32* @y.36
  %3228 = sub i32 %3226, 1
  %3229 = mul i32 %3226, %3228
  %3230 = urem i32 %3229, 2
  %3231 = icmp eq i32 %3230, 0
  %3232 = icmp slt i32 %3227, 10
  %3233 = or i1 %3231, %3232
  br i1 %3233, label %originalBB820, label %originalBB820alteredBB

originalBB820:                                    ; preds = %3225, %originalBB820alteredBB
  %3234 = load i64, i64* %29, align 8, !dbg !2184
  %3235 = add i64 %3234, 1, !dbg !2184
  store i64 %3235, i64* %29, align 8, !dbg !2184
  %3236 = load i32, i32* @x.35
  %3237 = load i32, i32* @y.36
  %3238 = sub i32 %3236, 1
  %3239 = mul i32 %3236, %3238
  %3240 = urem i32 %3239, 2
  %3241 = icmp eq i32 %3240, 0
  %3242 = icmp slt i32 %3237, 10
  %3243 = or i1 %3241, %3242
  br i1 %3243, label %originalBBpart2829, label %originalBB820alteredBB

originalBBpart2829:                               ; preds = %originalBB820
  br label %3244, !dbg !2184

3244:                                             ; preds = %originalBBpart2829
  br label %3245, !dbg !2179

3245:                                             ; preds = %3244
  %3246 = load i32, i32* @x.35
  %3247 = load i32, i32* @y.36
  %3248 = sub i32 %3246, 1
  %3249 = mul i32 %3246, %3248
  %3250 = urem i32 %3249, 2
  %3251 = icmp eq i32 %3250, 0
  %3252 = icmp slt i32 %3247, 10
  %3253 = or i1 %3251, %3252
  br i1 %3253, label %originalBB831, label %originalBB831alteredBB

originalBB831:                                    ; preds = %3245, %originalBB831alteredBB
  %3254 = load i64, i64* %29, align 8, !dbg !2185
  %3255 = load i64, i64* %20, align 8, !dbg !2185
  %3256 = icmp ult i64 %3254, %3255, !dbg !2185
  %3257 = load i32, i32* @x.35
  %3258 = load i32, i32* @y.36
  %3259 = sub i32 %3257, 1
  %3260 = mul i32 %3257, %3259
  %3261 = urem i32 %3260, 2
  %3262 = icmp eq i32 %3261, 0
  %3263 = icmp slt i32 %3258, 10
  %3264 = or i1 %3262, %3263
  br i1 %3264, label %originalBBpart2833, label %originalBB831alteredBB

originalBBpart2833:                               ; preds = %originalBB831
  br i1 %3256, label %3265, label %3269, !dbg !2188

3265:                                             ; preds = %originalBBpart2833
  %3266 = load i8*, i8** %19, align 8, !dbg !2185
  %3267 = load i64, i64* %29, align 8, !dbg !2185
  %3268 = getelementptr inbounds i8, i8* %3266, i64 %3267, !dbg !2185
  store i8 39, i8* %3268, align 1, !dbg !2185
  br label %3269, !dbg !2185

3269:                                             ; preds = %3265, %originalBBpart2833
  %3270 = load i64, i64* %29, align 8, !dbg !2188
  %3271 = add i64 %3270, 1, !dbg !2188
  store i64 %3271, i64* %29, align 8, !dbg !2188
  br label %3272, !dbg !2188

3272:                                             ; preds = %3269
  %3273 = load i32, i32* @x.35
  %3274 = load i32, i32* @y.36
  %3275 = sub i32 %3273, 1
  %3276 = mul i32 %3273, %3275
  %3277 = urem i32 %3276, 2
  %3278 = icmp eq i32 %3277, 0
  %3279 = icmp slt i32 %3274, 10
  %3280 = or i1 %3278, %3279
  br i1 %3280, label %originalBB835, label %originalBB835alteredBB

originalBB835:                                    ; preds = %3272, %originalBB835alteredBB
  store i8 0, i8* %36, align 1, !dbg !2179
  %3281 = load i32, i32* @x.35
  %3282 = load i32, i32* @y.36
  %3283 = sub i32 %3281, 1
  %3284 = mul i32 %3281, %3283
  %3285 = urem i32 %3284, 2
  %3286 = icmp eq i32 %3285, 0
  %3287 = icmp slt i32 %3282, 10
  %3288 = or i1 %3286, %3287
  br i1 %3288, label %originalBBpart2837, label %originalBB835alteredBB

originalBBpart2837:                               ; preds = %originalBB835
  br label %3289, !dbg !2179

3289:                                             ; preds = %originalBBpart2837, %originalBBpart2806, %originalBBpart2802
  br label %3290, !dbg !2178

3290:                                             ; preds = %3289
  br label %3291, !dbg !2189

3291:                                             ; preds = %3290
  %3292 = load i64, i64* %29, align 8, !dbg !2190
  %3293 = load i64, i64* %20, align 8, !dbg !2190
  %3294 = icmp ult i64 %3292, %3293, !dbg !2190
  br i1 %3294, label %3295, label %3300, !dbg !2193

3295:                                             ; preds = %3291
  %3296 = load i8, i8* %39, align 1, !dbg !2190
  %3297 = load i8*, i8** %19, align 8, !dbg !2190
  %3298 = load i64, i64* %29, align 8, !dbg !2190
  %3299 = getelementptr inbounds i8, i8* %3297, i64 %3298, !dbg !2190
  store i8 %3296, i8* %3299, align 1, !dbg !2190
  br label %3300, !dbg !2190

3300:                                             ; preds = %3295, %3291
  %3301 = load i32, i32* @x.35
  %3302 = load i32, i32* @y.36
  %3303 = sub i32 %3301, 1
  %3304 = mul i32 %3301, %3303
  %3305 = urem i32 %3304, 2
  %3306 = icmp eq i32 %3305, 0
  %3307 = icmp slt i32 %3302, 10
  %3308 = or i1 %3306, %3307
  br i1 %3308, label %originalBB839, label %originalBB839alteredBB

originalBB839:                                    ; preds = %3300, %originalBB839alteredBB
  %3309 = load i64, i64* %29, align 8, !dbg !2193
  %3310 = add i64 %3309, 1, !dbg !2193
  store i64 %3310, i64* %29, align 8, !dbg !2193
  %3311 = load i32, i32* @x.35
  %3312 = load i32, i32* @y.36
  %3313 = sub i32 %3311, 1
  %3314 = mul i32 %3311, %3313
  %3315 = urem i32 %3314, 2
  %3316 = icmp eq i32 %3315, 0
  %3317 = icmp slt i32 %3312, 10
  %3318 = or i1 %3316, %3317
  br i1 %3318, label %originalBBpart2852, label %originalBB839alteredBB

originalBBpart2852:                               ; preds = %originalBB839
  br label %3319, !dbg !2193

3319:                                             ; preds = %originalBBpart2852
  %3320 = load i8*, i8** %21, align 8, !dbg !2194
  %3321 = load i64, i64* %28, align 8, !dbg !2195
  %3322 = add i64 %3321, 1, !dbg !2195
  store i64 %3322, i64* %28, align 8, !dbg !2195
  %3323 = getelementptr inbounds i8, i8* %3320, i64 %3322, !dbg !2194
  %3324 = load i8, i8* %3323, align 1, !dbg !2194
  store i8 %3324, i8* %39, align 1, !dbg !2196
  br label %2550, !dbg !2197, !llvm.loop !2198

3325:                                             ; preds = %originalBBpart2798
  %3326 = load i32, i32* @x.35
  %3327 = load i32, i32* @y.36
  %3328 = sub i32 %3326, 1
  %3329 = mul i32 %3326, %3328
  %3330 = urem i32 %3329, 2
  %3331 = icmp eq i32 %3330, 0
  %3332 = icmp slt i32 %3327, 10
  %3333 = or i1 %3331, %3332
  br i1 %3333, label %originalBB854, label %originalBB854alteredBB

originalBB854:                                    ; preds = %3325, %originalBB854alteredBB
  %3334 = load i32, i32* @x.35
  %3335 = load i32, i32* @y.36
  %3336 = sub i32 %3334, 1
  %3337 = mul i32 %3334, %3336
  %3338 = urem i32 %3337, 2
  %3339 = icmp eq i32 %3338, 0
  %3340 = icmp slt i32 %3335, 10
  %3341 = or i1 %3339, %3340
  br i1 %3341, label %originalBBpart2856, label %originalBB854alteredBB

originalBBpart2856:                               ; preds = %originalBB854
  br label %3628, !dbg !2201

3342:                                             ; preds = %originalBBpart2632, %originalBBpart2628
  %3343 = load i32, i32* @x.35
  %3344 = load i32, i32* @y.36
  %3345 = sub i32 %3343, 1
  %3346 = mul i32 %3343, %3345
  %3347 = urem i32 %3346, 2
  %3348 = icmp eq i32 %3347, 0
  %3349 = icmp slt i32 %3344, 10
  %3350 = or i1 %3348, %3349
  br i1 %3350, label %originalBB858, label %originalBB858alteredBB

originalBB858:                                    ; preds = %3342, %originalBB858alteredBB
  %3351 = load i32, i32* @x.35
  %3352 = load i32, i32* @y.36
  %3353 = sub i32 %3351, 1
  %3354 = mul i32 %3351, %3353
  %3355 = urem i32 %3354, 2
  %3356 = icmp eq i32 %3355, 0
  %3357 = icmp slt i32 %3352, 10
  %3358 = or i1 %3356, %3357
  br i1 %3358, label %originalBBpart2860, label %originalBB858alteredBB

originalBBpart2860:                               ; preds = %originalBB858
  br label %3359, !dbg !2202

3359:                                             ; preds = %originalBBpart2860, %2093, %originalBBpart2470, %originalBBpart2418, %1773, %1752, %originalBBpart2390, %originalBBpart2330, %originalBBpart2257
  %3360 = load i32, i32* @x.35
  %3361 = load i32, i32* @y.36
  %3362 = sub i32 %3360, 1
  %3363 = mul i32 %3360, %3362
  %3364 = urem i32 %3363, 2
  %3365 = icmp eq i32 %3364, 0
  %3366 = icmp slt i32 %3361, 10
  %3367 = or i1 %3365, %3366
  br i1 %3367, label %originalBB862, label %originalBB862alteredBB

originalBB862:                                    ; preds = %3359, %originalBB862alteredBB
  %3368 = load i8, i8* %33, align 1, !dbg !2203
  %3369 = trunc i8 %3368 to i1, !dbg !2203
  %3370 = load i32, i32* @x.35
  %3371 = load i32, i32* @y.36
  %3372 = sub i32 %3370, 1
  %3373 = mul i32 %3370, %3372
  %3374 = urem i32 %3373, 2
  %3375 = icmp eq i32 %3374, 0
  %3376 = icmp slt i32 %3371, 10
  %3377 = or i1 %3375, %3376
  br i1 %3377, label %originalBBpart2864, label %originalBB862alteredBB

originalBBpart2864:                               ; preds = %originalBB862
  br i1 %3369, label %3378, label %3381, !dbg !2205

3378:                                             ; preds = %originalBBpart2864
  %3379 = load i32, i32* %23, align 4, !dbg !2206
  %3380 = icmp ne i32 %3379, 2, !dbg !2207
  br i1 %3380, label %3400, label %3381, !dbg !2208

3381:                                             ; preds = %3378, %originalBBpart2864
  %3382 = load i32, i32* @x.35
  %3383 = load i32, i32* @y.36
  %3384 = sub i32 %3382, 1
  %3385 = mul i32 %3382, %3384
  %3386 = urem i32 %3385, 2
  %3387 = icmp eq i32 %3386, 0
  %3388 = icmp slt i32 %3383, 10
  %3389 = or i1 %3387, %3388
  br i1 %3389, label %originalBB866, label %originalBB866alteredBB

originalBB866:                                    ; preds = %3381, %originalBB866alteredBB
  %3390 = load i8, i8* %35, align 1, !dbg !2209
  %3391 = trunc i8 %3390 to i1, !dbg !2209
  %3392 = load i32, i32* @x.35
  %3393 = load i32, i32* @y.36
  %3394 = sub i32 %3392, 1
  %3395 = mul i32 %3392, %3394
  %3396 = urem i32 %3395, 2
  %3397 = icmp eq i32 %3396, 0
  %3398 = icmp slt i32 %3393, 10
  %3399 = or i1 %3397, %3398
  br i1 %3399, label %originalBBpart2868, label %originalBB866alteredBB

originalBBpart2868:                               ; preds = %originalBB866
  br i1 %3391, label %3400, label %3417, !dbg !2210

3400:                                             ; preds = %originalBBpart2868, %3378
  %3401 = load i32*, i32** %25, align 8, !dbg !2211
  %3402 = icmp ne i32* %3401, null, !dbg !2211
  br i1 %3402, label %3403, label %3417, !dbg !2212

3403:                                             ; preds = %3400
  %3404 = load i32*, i32** %25, align 8, !dbg !2213
  %3405 = load i8, i8* %39, align 1, !dbg !2214
  %3406 = zext i8 %3405 to i64, !dbg !2214
  %3407 = udiv i64 %3406, 32, !dbg !2215
  %3408 = getelementptr inbounds i32, i32* %3404, i64 %3407, !dbg !2213
  %3409 = load i32, i32* %3408, align 4, !dbg !2213
  %3410 = load i8, i8* %39, align 1, !dbg !2216
  %3411 = zext i8 %3410 to i64, !dbg !2216
  %3412 = urem i64 %3411, 32, !dbg !2217
  %3413 = trunc i64 %3412 to i32, !dbg !2218
  %3414 = lshr i32 %3409, %3413, !dbg !2218
  %3415 = and i32 %3414, 1, !dbg !2219
  %3416 = icmp ne i32 %3415, 0, !dbg !2219
  br i1 %3416, label %3437, label %3417, !dbg !2220

3417:                                             ; preds = %3403, %3400, %originalBBpart2868
  %3418 = load i32, i32* @x.35
  %3419 = load i32, i32* @y.36
  %3420 = sub i32 %3418, 1
  %3421 = mul i32 %3418, %3420
  %3422 = urem i32 %3421, 2
  %3423 = icmp eq i32 %3422, 0
  %3424 = icmp slt i32 %3419, 10
  %3425 = or i1 %3423, %3424
  br i1 %3425, label %originalBB870, label %originalBB870alteredBB

originalBB870:                                    ; preds = %3417, %originalBB870alteredBB
  %3426 = load i8, i8* %41, align 1, !dbg !2221
  %3427 = trunc i8 %3426 to i1, !dbg !2221
  %3428 = load i32, i32* @x.35
  %3429 = load i32, i32* @y.36
  %3430 = sub i32 %3428, 1
  %3431 = mul i32 %3428, %3430
  %3432 = urem i32 %3431, 2
  %3433 = icmp eq i32 %3432, 0
  %3434 = icmp slt i32 %3429, 10
  %3435 = or i1 %3433, %3434
  br i1 %3435, label %originalBBpart2872, label %originalBB870alteredBB

originalBBpart2872:                               ; preds = %originalBB870
  br i1 %3427, label %3437, label %3436, !dbg !2222

3436:                                             ; preds = %originalBBpart2872
  br label %3628, !dbg !2223

3437:                                             ; preds = %originalBBpart2872, %3403
  %3438 = load i32, i32* @x.35
  %3439 = load i32, i32* @y.36
  %3440 = sub i32 %3438, 1
  %3441 = mul i32 %3438, %3440
  %3442 = urem i32 %3441, 2
  %3443 = icmp eq i32 %3442, 0
  %3444 = icmp slt i32 %3439, 10
  %3445 = or i1 %3443, %3444
  br i1 %3445, label %originalBB874, label %originalBB874alteredBB

originalBB874:                                    ; preds = %3437, %originalBB874alteredBB
  %3446 = load i32, i32* @x.35
  %3447 = load i32, i32* @y.36
  %3448 = sub i32 %3446, 1
  %3449 = mul i32 %3446, %3448
  %3450 = urem i32 %3449, 2
  %3451 = icmp eq i32 %3450, 0
  %3452 = icmp slt i32 %3447, 10
  %3453 = or i1 %3451, %3452
  br i1 %3453, label %originalBBpart2876, label %originalBB874alteredBB

originalBBpart2876:                               ; preds = %originalBB874
  br label %3454, !dbg !2221

3454:                                             ; preds = %originalBBpart2876, %1689
  call void @llvm.dbg.label(metadata !2224), !dbg !2225
  br label %3455, !dbg !2226

3455:                                             ; preds = %3454
  %3456 = load i8, i8* %35, align 1, !dbg !2227
  %3457 = trunc i8 %3456 to i1, !dbg !2227
  br i1 %3457, label %3458, label %3459, !dbg !2230

3458:                                             ; preds = %3455
  br label %4197, !dbg !2227

3459:                                             ; preds = %3455
  store i8 1, i8* %42, align 1, !dbg !2230
  %3460 = load i32, i32* %23, align 4, !dbg !2231
  %3461 = icmp eq i32 %3460, 2, !dbg !2231
  br i1 %3461, label %3462, label %3614, !dbg !2231

3462:                                             ; preds = %3459
  %3463 = load i8, i8* %36, align 1, !dbg !2231
  %3464 = trunc i8 %3463 to i1, !dbg !2231
  br i1 %3464, label %3614, label %3465, !dbg !2230

3465:                                             ; preds = %3462
  %3466 = load i32, i32* @x.35
  %3467 = load i32, i32* @y.36
  %3468 = sub i32 %3466, 1
  %3469 = mul i32 %3466, %3468
  %3470 = urem i32 %3469, 2
  %3471 = icmp eq i32 %3470, 0
  %3472 = icmp slt i32 %3467, 10
  %3473 = or i1 %3471, %3472
  br i1 %3473, label %originalBB878, label %originalBB878alteredBB

originalBB878:                                    ; preds = %3465, %originalBB878alteredBB
  %3474 = load i32, i32* @x.35
  %3475 = load i32, i32* @y.36
  %3476 = sub i32 %3474, 1
  %3477 = mul i32 %3474, %3476
  %3478 = urem i32 %3477, 2
  %3479 = icmp eq i32 %3478, 0
  %3480 = icmp slt i32 %3475, 10
  %3481 = or i1 %3479, %3480
  br i1 %3481, label %originalBBpart2880, label %originalBB878alteredBB

originalBBpart2880:                               ; preds = %originalBB878
  br label %3482, !dbg !2233

3482:                                             ; preds = %originalBBpart2880
  %3483 = load i32, i32* @x.35
  %3484 = load i32, i32* @y.36
  %3485 = sub i32 %3483, 1
  %3486 = mul i32 %3483, %3485
  %3487 = urem i32 %3486, 2
  %3488 = icmp eq i32 %3487, 0
  %3489 = icmp slt i32 %3484, 10
  %3490 = or i1 %3488, %3489
  br i1 %3490, label %originalBB882, label %originalBB882alteredBB

originalBB882:                                    ; preds = %3482, %originalBB882alteredBB
  %3491 = load i64, i64* %29, align 8, !dbg !2235
  %3492 = load i64, i64* %20, align 8, !dbg !2235
  %3493 = icmp ult i64 %3491, %3492, !dbg !2235
  %3494 = load i32, i32* @x.35
  %3495 = load i32, i32* @y.36
  %3496 = sub i32 %3494, 1
  %3497 = mul i32 %3494, %3496
  %3498 = urem i32 %3497, 2
  %3499 = icmp eq i32 %3498, 0
  %3500 = icmp slt i32 %3495, 10
  %3501 = or i1 %3499, %3500
  br i1 %3501, label %originalBBpart2884, label %originalBB882alteredBB

originalBBpart2884:                               ; preds = %originalBB882
  br i1 %3493, label %3502, label %3522, !dbg !2238

3502:                                             ; preds = %originalBBpart2884
  %3503 = load i32, i32* @x.35
  %3504 = load i32, i32* @y.36
  %3505 = sub i32 %3503, 1
  %3506 = mul i32 %3503, %3505
  %3507 = urem i32 %3506, 2
  %3508 = icmp eq i32 %3507, 0
  %3509 = icmp slt i32 %3504, 10
  %3510 = or i1 %3508, %3509
  br i1 %3510, label %originalBB886, label %originalBB886alteredBB

originalBB886:                                    ; preds = %3502, %originalBB886alteredBB
  %3511 = load i8*, i8** %19, align 8, !dbg !2235
  %3512 = load i64, i64* %29, align 8, !dbg !2235
  %3513 = getelementptr inbounds i8, i8* %3511, i64 %3512, !dbg !2235
  store i8 39, i8* %3513, align 1, !dbg !2235
  %3514 = load i32, i32* @x.35
  %3515 = load i32, i32* @y.36
  %3516 = sub i32 %3514, 1
  %3517 = mul i32 %3514, %3516
  %3518 = urem i32 %3517, 2
  %3519 = icmp eq i32 %3518, 0
  %3520 = icmp slt i32 %3515, 10
  %3521 = or i1 %3519, %3520
  br i1 %3521, label %originalBBpart2888, label %originalBB886alteredBB

originalBBpart2888:                               ; preds = %originalBB886
  br label %3522, !dbg !2235

3522:                                             ; preds = %originalBBpart2888, %originalBBpart2884
  %3523 = load i64, i64* %29, align 8, !dbg !2238
  %3524 = add i64 %3523, 1, !dbg !2238
  store i64 %3524, i64* %29, align 8, !dbg !2238
  br label %3525, !dbg !2238

3525:                                             ; preds = %3522
  %3526 = load i32, i32* @x.35
  %3527 = load i32, i32* @y.36
  %3528 = sub i32 %3526, 1
  %3529 = mul i32 %3526, %3528
  %3530 = urem i32 %3529, 2
  %3531 = icmp eq i32 %3530, 0
  %3532 = icmp slt i32 %3527, 10
  %3533 = or i1 %3531, %3532
  br i1 %3533, label %originalBB890, label %originalBB890alteredBB

originalBB890:                                    ; preds = %3525, %originalBB890alteredBB
  %3534 = load i32, i32* @x.35
  %3535 = load i32, i32* @y.36
  %3536 = sub i32 %3534, 1
  %3537 = mul i32 %3534, %3536
  %3538 = urem i32 %3537, 2
  %3539 = icmp eq i32 %3538, 0
  %3540 = icmp slt i32 %3535, 10
  %3541 = or i1 %3539, %3540
  br i1 %3541, label %originalBBpart2892, label %originalBB890alteredBB

originalBBpart2892:                               ; preds = %originalBB890
  br label %3542, !dbg !2233

3542:                                             ; preds = %originalBBpart2892
  %3543 = load i64, i64* %29, align 8, !dbg !2239
  %3544 = load i64, i64* %20, align 8, !dbg !2239
  %3545 = icmp ult i64 %3543, %3544, !dbg !2239
  br i1 %3545, label %3546, label %3566, !dbg !2242

3546:                                             ; preds = %3542
  %3547 = load i32, i32* @x.35
  %3548 = load i32, i32* @y.36
  %3549 = sub i32 %3547, 1
  %3550 = mul i32 %3547, %3549
  %3551 = urem i32 %3550, 2
  %3552 = icmp eq i32 %3551, 0
  %3553 = icmp slt i32 %3548, 10
  %3554 = or i1 %3552, %3553
  br i1 %3554, label %originalBB894, label %originalBB894alteredBB

originalBB894:                                    ; preds = %3546, %originalBB894alteredBB
  %3555 = load i8*, i8** %19, align 8, !dbg !2239
  %3556 = load i64, i64* %29, align 8, !dbg !2239
  %3557 = getelementptr inbounds i8, i8* %3555, i64 %3556, !dbg !2239
  store i8 36, i8* %3557, align 1, !dbg !2239
  %3558 = load i32, i32* @x.35
  %3559 = load i32, i32* @y.36
  %3560 = sub i32 %3558, 1
  %3561 = mul i32 %3558, %3560
  %3562 = urem i32 %3561, 2
  %3563 = icmp eq i32 %3562, 0
  %3564 = icmp slt i32 %3559, 10
  %3565 = or i1 %3563, %3564
  br i1 %3565, label %originalBBpart2896, label %originalBB894alteredBB

originalBBpart2896:                               ; preds = %originalBB894
  br label %3566, !dbg !2239

3566:                                             ; preds = %originalBBpart2896, %3542
  %3567 = load i64, i64* %29, align 8, !dbg !2242
  %3568 = add i64 %3567, 1, !dbg !2242
  store i64 %3568, i64* %29, align 8, !dbg !2242
  br label %3569, !dbg !2242

3569:                                             ; preds = %3566
  %3570 = load i32, i32* @x.35
  %3571 = load i32, i32* @y.36
  %3572 = sub i32 %3570, 1
  %3573 = mul i32 %3570, %3572
  %3574 = urem i32 %3573, 2
  %3575 = icmp eq i32 %3574, 0
  %3576 = icmp slt i32 %3571, 10
  %3577 = or i1 %3575, %3576
  br i1 %3577, label %originalBB898, label %originalBB898alteredBB

originalBB898:                                    ; preds = %3569, %originalBB898alteredBB
  %3578 = load i32, i32* @x.35
  %3579 = load i32, i32* @y.36
  %3580 = sub i32 %3578, 1
  %3581 = mul i32 %3578, %3580
  %3582 = urem i32 %3581, 2
  %3583 = icmp eq i32 %3582, 0
  %3584 = icmp slt i32 %3579, 10
  %3585 = or i1 %3583, %3584
  br i1 %3585, label %originalBBpart2900, label %originalBB898alteredBB

originalBBpart2900:                               ; preds = %originalBB898
  br label %3586, !dbg !2233

3586:                                             ; preds = %originalBBpart2900
  %3587 = load i64, i64* %29, align 8, !dbg !2243
  %3588 = load i64, i64* %20, align 8, !dbg !2243
  %3589 = icmp ult i64 %3587, %3588, !dbg !2243
  br i1 %3589, label %3590, label %3594, !dbg !2246

3590:                                             ; preds = %3586
  %3591 = load i8*, i8** %19, align 8, !dbg !2243
  %3592 = load i64, i64* %29, align 8, !dbg !2243
  %3593 = getelementptr inbounds i8, i8* %3591, i64 %3592, !dbg !2243
  store i8 39, i8* %3593, align 1, !dbg !2243
  br label %3594, !dbg !2243

3594:                                             ; preds = %3590, %3586
  %3595 = load i32, i32* @x.35
  %3596 = load i32, i32* @y.36
  %3597 = sub i32 %3595, 1
  %3598 = mul i32 %3595, %3597
  %3599 = urem i32 %3598, 2
  %3600 = icmp eq i32 %3599, 0
  %3601 = icmp slt i32 %3596, 10
  %3602 = or i1 %3600, %3601
  br i1 %3602, label %originalBB902, label %originalBB902alteredBB

originalBB902:                                    ; preds = %3594, %originalBB902alteredBB
  %3603 = load i64, i64* %29, align 8, !dbg !2246
  %3604 = add i64 %3603, 1, !dbg !2246
  store i64 %3604, i64* %29, align 8, !dbg !2246
  %3605 = load i32, i32* @x.35
  %3606 = load i32, i32* @y.36
  %3607 = sub i32 %3605, 1
  %3608 = mul i32 %3605, %3607
  %3609 = urem i32 %3608, 2
  %3610 = icmp eq i32 %3609, 0
  %3611 = icmp slt i32 %3606, 10
  %3612 = or i1 %3610, %3611
  br i1 %3612, label %originalBBpart2919, label %originalBB902alteredBB

originalBBpart2919:                               ; preds = %originalBB902
  br label %3613, !dbg !2246

3613:                                             ; preds = %originalBBpart2919
  store i8 1, i8* %36, align 1, !dbg !2233
  br label %3614, !dbg !2233

3614:                                             ; preds = %3613, %3462, %3459
  br label %3615, !dbg !2230

3615:                                             ; preds = %3614
  %3616 = load i64, i64* %29, align 8, !dbg !2247
  %3617 = load i64, i64* %20, align 8, !dbg !2247
  %3618 = icmp ult i64 %3616, %3617, !dbg !2247
  br i1 %3618, label %3619, label %3623, !dbg !2250

3619:                                             ; preds = %3615
  %3620 = load i8*, i8** %19, align 8, !dbg !2247
  %3621 = load i64, i64* %29, align 8, !dbg !2247
  %3622 = getelementptr inbounds i8, i8* %3620, i64 %3621, !dbg !2247
  store i8 92, i8* %3622, align 1, !dbg !2247
  br label %3623, !dbg !2247

3623:                                             ; preds = %3619, %3615
  %3624 = load i64, i64* %29, align 8, !dbg !2250
  %3625 = add i64 %3624, 1, !dbg !2250
  store i64 %3625, i64* %29, align 8, !dbg !2250
  br label %3626, !dbg !2250

3626:                                             ; preds = %3623
  br label %3627, !dbg !2230

3627:                                             ; preds = %3626
  br label %3628, !dbg !2230

3628:                                             ; preds = %3627, %3436, %originalBBpart2856, %originalBBpart2370, %1554
  call void @llvm.dbg.label(metadata !2251), !dbg !2252
  %3629 = load i32, i32* @x.35
  %3630 = load i32, i32* @y.36
  %3631 = sub i32 %3629, 1
  %3632 = mul i32 %3629, %3631
  %3633 = urem i32 %3632, 2
  %3634 = icmp eq i32 %3633, 0
  %3635 = icmp slt i32 %3630, 10
  %3636 = or i1 %3634, %3635
  br i1 %3636, label %originalBB921, label %originalBB921alteredBB

originalBB921:                                    ; preds = %3628, %originalBB921alteredBB
  %3637 = load i32, i32* @x.35
  %3638 = load i32, i32* @y.36
  %3639 = sub i32 %3637, 1
  %3640 = mul i32 %3637, %3639
  %3641 = urem i32 %3640, 2
  %3642 = icmp eq i32 %3641, 0
  %3643 = icmp slt i32 %3638, 10
  %3644 = or i1 %3642, %3643
  br i1 %3644, label %originalBBpart2923, label %originalBB921alteredBB

originalBBpart2923:                               ; preds = %originalBB921
  br label %3645, !dbg !2253

3645:                                             ; preds = %originalBBpart2923
  %3646 = load i8, i8* %36, align 1, !dbg !2254
  %3647 = trunc i8 %3646 to i1, !dbg !2254
  br i1 %3647, label %3648, label %3756, !dbg !2254

3648:                                             ; preds = %3645
  %3649 = load i8, i8* %42, align 1, !dbg !2254
  %3650 = trunc i8 %3649 to i1, !dbg !2254
  br i1 %3650, label %3756, label %3651, !dbg !2257

3651:                                             ; preds = %3648
  br label %3652, !dbg !2258

3652:                                             ; preds = %3651
  %3653 = load i32, i32* @x.35
  %3654 = load i32, i32* @y.36
  %3655 = sub i32 %3653, 1
  %3656 = mul i32 %3653, %3655
  %3657 = urem i32 %3656, 2
  %3658 = icmp eq i32 %3657, 0
  %3659 = icmp slt i32 %3654, 10
  %3660 = or i1 %3658, %3659
  br i1 %3660, label %originalBB925, label %originalBB925alteredBB

originalBB925:                                    ; preds = %3652, %originalBB925alteredBB
  %3661 = load i64, i64* %29, align 8, !dbg !2260
  %3662 = load i64, i64* %20, align 8, !dbg !2260
  %3663 = icmp ult i64 %3661, %3662, !dbg !2260
  %3664 = load i32, i32* @x.35
  %3665 = load i32, i32* @y.36
  %3666 = sub i32 %3664, 1
  %3667 = mul i32 %3664, %3666
  %3668 = urem i32 %3667, 2
  %3669 = icmp eq i32 %3668, 0
  %3670 = icmp slt i32 %3665, 10
  %3671 = or i1 %3669, %3670
  br i1 %3671, label %originalBBpart2927, label %originalBB925alteredBB

originalBBpart2927:                               ; preds = %originalBB925
  br i1 %3663, label %3672, label %3676, !dbg !2263

3672:                                             ; preds = %originalBBpart2927
  %3673 = load i8*, i8** %19, align 8, !dbg !2260
  %3674 = load i64, i64* %29, align 8, !dbg !2260
  %3675 = getelementptr inbounds i8, i8* %3673, i64 %3674, !dbg !2260
  store i8 39, i8* %3675, align 1, !dbg !2260
  br label %3676, !dbg !2260

3676:                                             ; preds = %3672, %originalBBpart2927
  %3677 = load i32, i32* @x.35
  %3678 = load i32, i32* @y.36
  %3679 = sub i32 %3677, 1
  %3680 = mul i32 %3677, %3679
  %3681 = urem i32 %3680, 2
  %3682 = icmp eq i32 %3681, 0
  %3683 = icmp slt i32 %3678, 10
  %3684 = or i1 %3682, %3683
  br i1 %3684, label %originalBB929, label %originalBB929alteredBB

originalBB929:                                    ; preds = %3676, %originalBB929alteredBB
  %3685 = load i64, i64* %29, align 8, !dbg !2263
  %3686 = add i64 %3685, 1, !dbg !2263
  store i64 %3686, i64* %29, align 8, !dbg !2263
  %3687 = load i32, i32* @x.35
  %3688 = load i32, i32* @y.36
  %3689 = sub i32 %3687, 1
  %3690 = mul i32 %3687, %3689
  %3691 = urem i32 %3690, 2
  %3692 = icmp eq i32 %3691, 0
  %3693 = icmp slt i32 %3688, 10
  %3694 = or i1 %3692, %3693
  br i1 %3694, label %originalBBpart2939, label %originalBB929alteredBB

originalBBpart2939:                               ; preds = %originalBB929
  br label %3695, !dbg !2263

3695:                                             ; preds = %originalBBpart2939
  br label %3696, !dbg !2258

3696:                                             ; preds = %3695
  %3697 = load i64, i64* %29, align 8, !dbg !2264
  %3698 = load i64, i64* %20, align 8, !dbg !2264
  %3699 = icmp ult i64 %3697, %3698, !dbg !2264
  br i1 %3699, label %3700, label %3720, !dbg !2267

3700:                                             ; preds = %3696
  %3701 = load i32, i32* @x.35
  %3702 = load i32, i32* @y.36
  %3703 = sub i32 %3701, 1
  %3704 = mul i32 %3701, %3703
  %3705 = urem i32 %3704, 2
  %3706 = icmp eq i32 %3705, 0
  %3707 = icmp slt i32 %3702, 10
  %3708 = or i1 %3706, %3707
  br i1 %3708, label %originalBB941, label %originalBB941alteredBB

originalBB941:                                    ; preds = %3700, %originalBB941alteredBB
  %3709 = load i8*, i8** %19, align 8, !dbg !2264
  %3710 = load i64, i64* %29, align 8, !dbg !2264
  %3711 = getelementptr inbounds i8, i8* %3709, i64 %3710, !dbg !2264
  store i8 39, i8* %3711, align 1, !dbg !2264
  %3712 = load i32, i32* @x.35
  %3713 = load i32, i32* @y.36
  %3714 = sub i32 %3712, 1
  %3715 = mul i32 %3712, %3714
  %3716 = urem i32 %3715, 2
  %3717 = icmp eq i32 %3716, 0
  %3718 = icmp slt i32 %3713, 10
  %3719 = or i1 %3717, %3718
  br i1 %3719, label %originalBBpart2943, label %originalBB941alteredBB

originalBBpart2943:                               ; preds = %originalBB941
  br label %3720, !dbg !2264

3720:                                             ; preds = %originalBBpart2943, %3696
  %3721 = load i32, i32* @x.35
  %3722 = load i32, i32* @y.36
  %3723 = sub i32 %3721, 1
  %3724 = mul i32 %3721, %3723
  %3725 = urem i32 %3724, 2
  %3726 = icmp eq i32 %3725, 0
  %3727 = icmp slt i32 %3722, 10
  %3728 = or i1 %3726, %3727
  br i1 %3728, label %originalBB945, label %originalBB945alteredBB

originalBB945:                                    ; preds = %3720, %originalBB945alteredBB
  %3729 = load i64, i64* %29, align 8, !dbg !2267
  %3730 = add i64 %3729, 1, !dbg !2267
  store i64 %3730, i64* %29, align 8, !dbg !2267
  %3731 = load i32, i32* @x.35
  %3732 = load i32, i32* @y.36
  %3733 = sub i32 %3731, 1
  %3734 = mul i32 %3731, %3733
  %3735 = urem i32 %3734, 2
  %3736 = icmp eq i32 %3735, 0
  %3737 = icmp slt i32 %3732, 10
  %3738 = or i1 %3736, %3737
  br i1 %3738, label %originalBBpart2960, label %originalBB945alteredBB

originalBBpart2960:                               ; preds = %originalBB945
  br label %3739, !dbg !2267

3739:                                             ; preds = %originalBBpart2960
  %3740 = load i32, i32* @x.35
  %3741 = load i32, i32* @y.36
  %3742 = sub i32 %3740, 1
  %3743 = mul i32 %3740, %3742
  %3744 = urem i32 %3743, 2
  %3745 = icmp eq i32 %3744, 0
  %3746 = icmp slt i32 %3741, 10
  %3747 = or i1 %3745, %3746
  br i1 %3747, label %originalBB962, label %originalBB962alteredBB

originalBB962:                                    ; preds = %3739, %originalBB962alteredBB
  store i8 0, i8* %36, align 1, !dbg !2258
  %3748 = load i32, i32* @x.35
  %3749 = load i32, i32* @y.36
  %3750 = sub i32 %3748, 1
  %3751 = mul i32 %3748, %3750
  %3752 = urem i32 %3751, 2
  %3753 = icmp eq i32 %3752, 0
  %3754 = icmp slt i32 %3749, 10
  %3755 = or i1 %3753, %3754
  br i1 %3755, label %originalBBpart2964, label %originalBB962alteredBB

originalBBpart2964:                               ; preds = %originalBB962
  br label %3756, !dbg !2258

3756:                                             ; preds = %originalBBpart2964, %3648, %3645
  %3757 = load i32, i32* @x.35
  %3758 = load i32, i32* @y.36
  %3759 = sub i32 %3757, 1
  %3760 = mul i32 %3757, %3759
  %3761 = urem i32 %3760, 2
  %3762 = icmp eq i32 %3761, 0
  %3763 = icmp slt i32 %3758, 10
  %3764 = or i1 %3762, %3763
  br i1 %3764, label %originalBB966, label %originalBB966alteredBB

originalBB966:                                    ; preds = %3756, %originalBB966alteredBB
  %3765 = load i32, i32* @x.35
  %3766 = load i32, i32* @y.36
  %3767 = sub i32 %3765, 1
  %3768 = mul i32 %3765, %3767
  %3769 = urem i32 %3768, 2
  %3770 = icmp eq i32 %3769, 0
  %3771 = icmp slt i32 %3766, 10
  %3772 = or i1 %3770, %3771
  br i1 %3772, label %originalBBpart2968, label %originalBB966alteredBB

originalBBpart2968:                               ; preds = %originalBB966
  br label %3773, !dbg !2257

3773:                                             ; preds = %originalBBpart2968
  %3774 = load i32, i32* @x.35
  %3775 = load i32, i32* @y.36
  %3776 = sub i32 %3774, 1
  %3777 = mul i32 %3774, %3776
  %3778 = urem i32 %3777, 2
  %3779 = icmp eq i32 %3778, 0
  %3780 = icmp slt i32 %3775, 10
  %3781 = or i1 %3779, %3780
  br i1 %3781, label %originalBB970, label %originalBB970alteredBB

originalBB970:                                    ; preds = %3773, %originalBB970alteredBB
  %3782 = load i32, i32* @x.35
  %3783 = load i32, i32* @y.36
  %3784 = sub i32 %3782, 1
  %3785 = mul i32 %3782, %3784
  %3786 = urem i32 %3785, 2
  %3787 = icmp eq i32 %3786, 0
  %3788 = icmp slt i32 %3783, 10
  %3789 = or i1 %3787, %3788
  br i1 %3789, label %originalBBpart2972, label %originalBB970alteredBB

originalBBpart2972:                               ; preds = %originalBB970
  br label %3790, !dbg !2268

3790:                                             ; preds = %originalBBpart2972
  %3791 = load i32, i32* @x.35
  %3792 = load i32, i32* @y.36
  %3793 = sub i32 %3791, 1
  %3794 = mul i32 %3791, %3793
  %3795 = urem i32 %3794, 2
  %3796 = icmp eq i32 %3795, 0
  %3797 = icmp slt i32 %3792, 10
  %3798 = or i1 %3796, %3797
  br i1 %3798, label %originalBB974, label %originalBB974alteredBB

originalBB974:                                    ; preds = %3790, %originalBB974alteredBB
  %3799 = load i64, i64* %29, align 8, !dbg !2269
  %3800 = load i64, i64* %20, align 8, !dbg !2269
  %3801 = trunc i64 %3799 to i32
  %3802 = mul i32 %3801, -2
  %3803 = add i32 %3802, -2
  %3804 = trunc i64 %3800 to i32
  %3805 = mul i32 %3804, 2
  %3806 = add i32 %3805, 3
  %3807 = mul i32 %3803, %3803
  %3808 = mul i32 %3806, %3806
  %3809 = add i32 %3807, %3808
  %3810 = mul i32 %3803, %3806
  %3811 = mul i32 %3810, 2
  %3812 = sub i32 %3809, %3811
  %3813 = mul i32 %3812, 3
  %3814 = add i32 %3813, -1
  %3815 = icmp eq i32 %3814, -4
  %3816 = load i32, i32* @x.35
  %3817 = load i32, i32* @y.36
  %3818 = sub i32 %3816, 1
  %3819 = mul i32 %3816, %3818
  %3820 = urem i32 %3819, 2
  %3821 = icmp eq i32 %3820, 0
  %3822 = icmp slt i32 %3817, 10
  %3823 = or i1 %3821, %3822
  br i1 %3823, label %originalBBpart21050, label %originalBB974alteredBB

originalBBpart21050:                              ; preds = %originalBB974
  br i1 %3815, label %3824, label %3841

3824:                                             ; preds = %originalBBpart21050
  %3825 = load i32, i32* @x.35
  %3826 = load i32, i32* @y.36
  %3827 = sub i32 %3825, 1
  %3828 = mul i32 %3825, %3827
  %3829 = urem i32 %3828, 2
  %3830 = icmp eq i32 %3829, 0
  %3831 = icmp slt i32 %3826, 10
  %3832 = or i1 %3830, %3831
  br i1 %3832, label %originalBB1052, label %originalBB1052alteredBB

originalBB1052:                                   ; preds = %3824, %originalBB1052alteredBB
  %3833 = load i32, i32* @x.35
  %3834 = load i32, i32* @y.36
  %3835 = sub i32 %3833, 1
  %3836 = mul i32 %3833, %3835
  %3837 = urem i32 %3836, 2
  %3838 = icmp eq i32 %3837, 0
  %3839 = icmp slt i32 %3834, 10
  %3840 = or i1 %3838, %3839
  br i1 %3840, label %originalBBpart21054, label %originalBB1052alteredBB

originalBBpart21054:                              ; preds = %originalBB1052
  ret i64 0

3841:                                             ; preds = %originalBBpart21050
  %3842 = load i32, i32* @x.35
  %3843 = load i32, i32* @y.36
  %3844 = sub i32 %3842, 1
  %3845 = mul i32 %3842, %3844
  %3846 = urem i32 %3845, 2
  %3847 = icmp eq i32 %3846, 0
  %3848 = icmp slt i32 %3843, 10
  %3849 = or i1 %3847, %3848
  br i1 %3849, label %originalBB1056, label %originalBB1056alteredBB

originalBB1056:                                   ; preds = %3841, %originalBB1056alteredBB
  %3850 = icmp ult i64 %3799, %3800, !dbg !2269
  %3851 = load i32, i32* @x.35
  %3852 = load i32, i32* @y.36
  %3853 = sub i32 %3851, 1
  %3854 = mul i32 %3851, %3853
  %3855 = urem i32 %3854, 2
  %3856 = icmp eq i32 %3855, 0
  %3857 = icmp slt i32 %3852, 10
  %3858 = or i1 %3856, %3857
  br i1 %3858, label %originalBBpart21058, label %originalBB1056alteredBB

originalBBpart21058:                              ; preds = %originalBB1056
  br i1 %3850, label %3859, label %3864, !dbg !2272

3859:                                             ; preds = %originalBBpart21058
  %3860 = load i8, i8* %39, align 1, !dbg !2269
  %3861 = load i8*, i8** %19, align 8, !dbg !2269
  %3862 = load i64, i64* %29, align 8, !dbg !2269
  %3863 = getelementptr inbounds i8, i8* %3861, i64 %3862, !dbg !2269
  store i8 %3860, i8* %3863, align 1, !dbg !2269
  br label %3864, !dbg !2269

3864:                                             ; preds = %3859, %originalBBpart21058
  %3865 = load i64, i64* %29, align 8, !dbg !2272
  %3866 = add i64 %3865, 1, !dbg !2272
  store i64 %3866, i64* %29, align 8, !dbg !2272
  br label %3867, !dbg !2272

3867:                                             ; preds = %3864
  %3868 = load i8, i8* %43, align 1, !dbg !2273
  %3869 = trunc i8 %3868 to i1, !dbg !2273
  br i1 %3869, label %3887, label %3870, !dbg !2275

3870:                                             ; preds = %3867
  %3871 = load i32, i32* @x.35
  %3872 = load i32, i32* @y.36
  %3873 = sub i32 %3871, 1
  %3874 = mul i32 %3871, %3873
  %3875 = urem i32 %3874, 2
  %3876 = icmp eq i32 %3875, 0
  %3877 = icmp slt i32 %3872, 10
  %3878 = or i1 %3876, %3877
  br i1 %3878, label %originalBB1060, label %originalBB1060alteredBB

originalBB1060:                                   ; preds = %3870, %originalBB1060alteredBB
  store i8 0, i8* %38, align 1, !dbg !2276
  %3879 = load i32, i32* @x.35
  %3880 = load i32, i32* @y.36
  %3881 = sub i32 %3879, 1
  %3882 = mul i32 %3879, %3881
  %3883 = urem i32 %3882, 2
  %3884 = icmp eq i32 %3883, 0
  %3885 = icmp slt i32 %3880, 10
  %3886 = or i1 %3884, %3885
  br i1 %3886, label %originalBBpart21062, label %originalBB1060alteredBB

originalBBpart21062:                              ; preds = %originalBB1060
  br label %3887, !dbg !2277

3887:                                             ; preds = %originalBBpart21062, %3867
  br label %3888, !dbg !2278

3888:                                             ; preds = %3887, %originalBBpart2249
  %3889 = load i32, i32* @x.35
  %3890 = load i32, i32* @y.36
  %3891 = sub i32 %3889, 1
  %3892 = mul i32 %3889, %3891
  %3893 = urem i32 %3892, 2
  %3894 = icmp eq i32 %3893, 0
  %3895 = icmp slt i32 %3890, 10
  %3896 = or i1 %3894, %3895
  br i1 %3896, label %originalBB1064, label %originalBB1064alteredBB

originalBB1064:                                   ; preds = %3888, %originalBB1064alteredBB
  %3897 = load i64, i64* %28, align 8, !dbg !2279
  %3898 = add i64 %3897, 1, !dbg !2279
  store i64 %3898, i64* %28, align 8, !dbg !2279
  %3899 = load i32, i32* @x.35
  %3900 = load i32, i32* @y.36
  %3901 = sub i32 %3899, 1
  %3902 = mul i32 %3899, %3901
  %3903 = urem i32 %3902, 2
  %3904 = icmp eq i32 %3903, 0
  %3905 = icmp slt i32 %3900, 10
  %3906 = or i1 %3904, %3905
  br i1 %3906, label %originalBBpart21068, label %originalBB1064alteredBB

originalBBpart21068:                              ; preds = %originalBB1064
  br label %410, !dbg !2280, !llvm.loop !2281

3907:                                             ; preds = %originalBBpart289
  %3908 = load i32, i32* @x.35
  %3909 = load i32, i32* @y.36
  %3910 = sub i32 %3908, 1
  %3911 = mul i32 %3908, %3910
  %3912 = urem i32 %3911, 2
  %3913 = icmp eq i32 %3912, 0
  %3914 = icmp slt i32 %3909, 10
  %3915 = or i1 %3913, %3914
  br i1 %3915, label %originalBB1070, label %originalBB1070alteredBB

originalBB1070:                                   ; preds = %3907, %originalBB1070alteredBB
  %3916 = load i64, i64* %29, align 8, !dbg !2283
  %3917 = icmp eq i64 %3916, 0, !dbg !2285
  %3918 = load i32, i32* @x.35
  %3919 = load i32, i32* @y.36
  %3920 = sub i32 %3918, 1
  %3921 = mul i32 %3918, %3920
  %3922 = urem i32 %3921, 2
  %3923 = icmp eq i32 %3922, 0
  %3924 = icmp slt i32 %3919, 10
  %3925 = or i1 %3923, %3924
  br i1 %3925, label %originalBBpart21072, label %originalBB1070alteredBB

originalBBpart21072:                              ; preds = %originalBB1070
  br i1 %3917, label %3926, label %3965, !dbg !2286

3926:                                             ; preds = %originalBBpart21072
  %3927 = load i32, i32* @x.35
  %3928 = load i32, i32* @y.36
  %3929 = sub i32 %3927, 1
  %3930 = mul i32 %3927, %3929
  %3931 = urem i32 %3930, 2
  %3932 = icmp eq i32 %3931, 0
  %3933 = icmp slt i32 %3928, 10
  %3934 = or i1 %3932, %3933
  br i1 %3934, label %originalBB1074, label %originalBB1074alteredBB

originalBB1074:                                   ; preds = %3926, %originalBB1074alteredBB
  %3935 = load i32, i32* %23, align 4, !dbg !2287
  %3936 = icmp eq i32 %3935, 2, !dbg !2288
  %3937 = load i32, i32* @x.35
  %3938 = load i32, i32* @y.36
  %3939 = sub i32 %3937, 1
  %3940 = mul i32 %3937, %3939
  %3941 = urem i32 %3940, 2
  %3942 = icmp eq i32 %3941, 0
  %3943 = icmp slt i32 %3938, 10
  %3944 = or i1 %3942, %3943
  br i1 %3944, label %originalBBpart21076, label %originalBB1074alteredBB

originalBBpart21076:                              ; preds = %originalBB1074
  br i1 %3936, label %3945, label %3965, !dbg !2289

3945:                                             ; preds = %originalBBpart21076
  %3946 = load i8, i8* %35, align 1, !dbg !2290
  %3947 = trunc i8 %3946 to i1, !dbg !2290
  br i1 %3947, label %3948, label %3965, !dbg !2291

3948:                                             ; preds = %3945
  %3949 = load i32, i32* @x.35
  %3950 = load i32, i32* @y.36
  %3951 = sub i32 %3949, 1
  %3952 = mul i32 %3949, %3951
  %3953 = urem i32 %3952, 2
  %3954 = icmp eq i32 %3953, 0
  %3955 = icmp slt i32 %3950, 10
  %3956 = or i1 %3954, %3955
  br i1 %3956, label %originalBB1078, label %originalBB1078alteredBB

originalBB1078:                                   ; preds = %3948, %originalBB1078alteredBB
  %3957 = load i32, i32* @x.35
  %3958 = load i32, i32* @y.36
  %3959 = sub i32 %3957, 1
  %3960 = mul i32 %3957, %3959
  %3961 = urem i32 %3960, 2
  %3962 = icmp eq i32 %3961, 0
  %3963 = icmp slt i32 %3958, 10
  %3964 = or i1 %3962, %3963
  br i1 %3964, label %originalBBpart21080, label %originalBB1078alteredBB

originalBBpart21080:                              ; preds = %originalBB1078
  br label %4197, !dbg !2292

3965:                                             ; preds = %3945, %originalBBpart21076, %originalBBpart21072
  %3966 = load i32, i32* @x.35
  %3967 = load i32, i32* @y.36
  %3968 = sub i32 %3966, 1
  %3969 = mul i32 %3966, %3968
  %3970 = urem i32 %3969, 2
  %3971 = icmp eq i32 %3970, 0
  %3972 = icmp slt i32 %3967, 10
  %3973 = or i1 %3971, %3972
  br i1 %3973, label %originalBB1082, label %originalBB1082alteredBB

originalBB1082:                                   ; preds = %3965, %originalBB1082alteredBB
  %3974 = load i32, i32* %23, align 4, !dbg !2293
  %3975 = icmp eq i32 %3974, 2, !dbg !2295
  %3976 = load i32, i32* @x.35
  %3977 = load i32, i32* @y.36
  %3978 = sub i32 %3976, 1
  %3979 = mul i32 %3976, %3978
  %3980 = urem i32 %3979, 2
  %3981 = icmp eq i32 %3980, 0
  %3982 = icmp slt i32 %3977, 10
  %3983 = or i1 %3981, %3982
  br i1 %3983, label %originalBBpart21084, label %originalBB1082alteredBB

originalBBpart21084:                              ; preds = %originalBB1082
  br i1 %3975, label %3984, label %4061, !dbg !2296

3984:                                             ; preds = %originalBBpart21084
  %3985 = load i8, i8* %35, align 1, !dbg !2297
  %3986 = trunc i8 %3985 to i1, !dbg !2297
  br i1 %3986, label %4061, label %3987, !dbg !2298

3987:                                             ; preds = %3984
  %3988 = load i8, i8* %37, align 1, !dbg !2299
  %3989 = trunc i8 %3988 to i1, !dbg !2299
  br i1 %3989, label %3990, label %4061, !dbg !2300

3990:                                             ; preds = %3987
  %3991 = load i8, i8* %38, align 1, !dbg !2301
  %3992 = trunc i8 %3991 to i1, !dbg !2301
  br i1 %3992, label %3993, label %4003, !dbg !2304

3993:                                             ; preds = %3990
  %3994 = load i8*, i8** %19, align 8, !dbg !2305
  %3995 = load i64, i64* %30, align 8, !dbg !2306
  %3996 = load i8*, i8** %21, align 8, !dbg !2307
  %3997 = load i64, i64* %22, align 8, !dbg !2308
  %3998 = load i32, i32* %24, align 4, !dbg !2309
  %3999 = load i32*, i32** %25, align 8, !dbg !2310
  %4000 = load i8*, i8** %26, align 8, !dbg !2311
  %4001 = load i8*, i8** %27, align 8, !dbg !2312
  %4002 = call i64 @quotearg_buffer_restyled(i8* %3994, i64 %3995, i8* %3996, i64 %3997, i32 5, i32 %3998, i32* %3999, i8* %4000, i8* %4001), !dbg !2313
  store i64 %4002, i64* %18, align 8, !dbg !2314
  br label %4263, !dbg !2314

4003:                                             ; preds = %3990
  %4004 = load i32, i32* @x.35
  %4005 = load i32, i32* @y.36
  %4006 = sub i32 %4004, 1
  %4007 = mul i32 %4004, %4006
  %4008 = urem i32 %4007, 2
  %4009 = icmp eq i32 %4008, 0
  %4010 = icmp slt i32 %4005, 10
  %4011 = or i1 %4009, %4010
  br i1 %4011, label %originalBB1086, label %originalBB1086alteredBB

originalBB1086:                                   ; preds = %4003, %originalBB1086alteredBB
  %4012 = load i64, i64* %20, align 8, !dbg !2315
  %4013 = icmp ne i64 %4012, 0, !dbg !2315
  %4014 = load i32, i32* @x.35
  %4015 = load i32, i32* @y.36
  %4016 = sub i32 %4014, 1
  %4017 = mul i32 %4014, %4016
  %4018 = urem i32 %4017, 2
  %4019 = icmp eq i32 %4018, 0
  %4020 = icmp slt i32 %4015, 10
  %4021 = or i1 %4019, %4020
  br i1 %4021, label %originalBBpart21088, label %originalBB1086alteredBB

originalBBpart21088:                              ; preds = %originalBB1086
  br i1 %4013, label %4059, label %4022, !dbg !2317

4022:                                             ; preds = %originalBBpart21088
  %4023 = load i32, i32* @x.35
  %4024 = load i32, i32* @y.36
  %4025 = sub i32 %4023, 1
  %4026 = mul i32 %4023, %4025
  %4027 = urem i32 %4026, 2
  %4028 = icmp eq i32 %4027, 0
  %4029 = icmp slt i32 %4024, 10
  %4030 = or i1 %4028, %4029
  br i1 %4030, label %originalBB1090, label %originalBB1090alteredBB

originalBB1090:                                   ; preds = %4022, %originalBB1090alteredBB
  %4031 = load i64, i64* %30, align 8, !dbg !2318
  %4032 = icmp ne i64 %4031, 0, !dbg !2318
  %4033 = load i32, i32* @x.35
  %4034 = load i32, i32* @y.36
  %4035 = sub i32 %4033, 1
  %4036 = mul i32 %4033, %4035
  %4037 = urem i32 %4036, 2
  %4038 = icmp eq i32 %4037, 0
  %4039 = icmp slt i32 %4034, 10
  %4040 = or i1 %4038, %4039
  br i1 %4040, label %originalBBpart21092, label %originalBB1090alteredBB

originalBBpart21092:                              ; preds = %originalBB1090
  br i1 %4032, label %4041, label %4059, !dbg !2319

4041:                                             ; preds = %originalBBpart21092
  %4042 = load i32, i32* @x.35
  %4043 = load i32, i32* @y.36
  %4044 = sub i32 %4042, 1
  %4045 = mul i32 %4042, %4044
  %4046 = urem i32 %4045, 2
  %4047 = icmp eq i32 %4046, 0
  %4048 = icmp slt i32 %4043, 10
  %4049 = or i1 %4047, %4048
  br i1 %4049, label %originalBB1094, label %originalBB1094alteredBB

originalBB1094:                                   ; preds = %4041, %originalBB1094alteredBB
  %4050 = load i64, i64* %30, align 8, !dbg !2320
  store i64 %4050, i64* %20, align 8, !dbg !2322
  store i64 0, i64* %29, align 8, !dbg !2323
  %4051 = load i32, i32* @x.35
  %4052 = load i32, i32* @y.36
  %4053 = sub i32 %4051, 1
  %4054 = mul i32 %4051, %4053
  %4055 = urem i32 %4054, 2
  %4056 = icmp eq i32 %4055, 0
  %4057 = icmp slt i32 %4052, 10
  %4058 = or i1 %4056, %4057
  br i1 %4058, label %originalBBpart21096, label %originalBB1094alteredBB

originalBBpart21096:                              ; preds = %originalBB1094
  br label %66, !dbg !2324

4059:                                             ; preds = %originalBBpart21092, %originalBBpart21088
  br label %4060

4060:                                             ; preds = %4059
  br label %4061, !dbg !2325

4061:                                             ; preds = %4060, %3987, %3984, %originalBBpart21084
  %4062 = load i8*, i8** %31, align 8, !dbg !2326
  %4063 = icmp ne i8* %4062, null, !dbg !2326
  br i1 %4063, label %4064, label %4187, !dbg !2328

4064:                                             ; preds = %4061
  %4065 = load i8, i8* %35, align 1, !dbg !2329
  %4066 = trunc i8 %4065 to i1, !dbg !2329
  br i1 %4066, label %4187, label %4067, !dbg !2330

4067:                                             ; preds = %4064
  %4068 = load i32, i32* @x.35
  %4069 = load i32, i32* @y.36
  %4070 = sub i32 %4068, 1
  %4071 = mul i32 %4068, %4070
  %4072 = urem i32 %4071, 2
  %4073 = icmp eq i32 %4072, 0
  %4074 = icmp slt i32 %4069, 10
  %4075 = or i1 %4073, %4074
  br i1 %4075, label %originalBB1098, label %originalBB1098alteredBB

originalBB1098:                                   ; preds = %4067, %originalBB1098alteredBB
  %4076 = load i32, i32* @x.35
  %4077 = load i32, i32* @y.36
  %4078 = sub i32 %4076, 1
  %4079 = mul i32 %4076, %4078
  %4080 = urem i32 %4079, 2
  %4081 = icmp eq i32 %4080, 0
  %4082 = icmp slt i32 %4077, 10
  %4083 = or i1 %4081, %4082
  br i1 %4083, label %originalBBpart21100, label %originalBB1098alteredBB

originalBBpart21100:                              ; preds = %originalBB1098
  br label %4084, !dbg !2331

4084:                                             ; preds = %originalBBpart21132, %originalBBpart21100
  %4085 = load i32, i32* @x.35
  %4086 = load i32, i32* @y.36
  %4087 = sub i32 %4085, 1
  %4088 = mul i32 %4085, %4087
  %4089 = urem i32 %4088, 2
  %4090 = icmp eq i32 %4089, 0
  %4091 = icmp slt i32 %4086, 10
  %4092 = or i1 %4090, %4091
  br i1 %4092, label %originalBB1102, label %originalBB1102alteredBB

originalBB1102:                                   ; preds = %4084, %originalBB1102alteredBB
  %4093 = load i8*, i8** %31, align 8, !dbg !2332
  %4094 = load i8, i8* %4093, align 1, !dbg !2335
  %4095 = icmp ne i8 %4094, 0, !dbg !2336
  %4096 = load i32, i32* @x.35
  %4097 = load i32, i32* @y.36
  %4098 = sub i32 %4096, 1
  %4099 = mul i32 %4096, %4098
  %4100 = urem i32 %4099, 2
  %4101 = icmp eq i32 %4100, 0
  %4102 = icmp slt i32 %4097, 10
  %4103 = or i1 %4101, %4102
  br i1 %4103, label %originalBBpart21104, label %originalBB1102alteredBB

originalBBpart21104:                              ; preds = %originalBB1102
  br i1 %4095, label %4104, label %4186, !dbg !2336

4104:                                             ; preds = %originalBBpart21104
  %4105 = load i32, i32* @x.35
  %4106 = load i32, i32* @y.36
  %4107 = sub i32 %4105, 1
  %4108 = mul i32 %4105, %4107
  %4109 = urem i32 %4108, 2
  %4110 = icmp eq i32 %4109, 0
  %4111 = icmp slt i32 %4106, 10
  %4112 = or i1 %4110, %4111
  br i1 %4112, label %originalBB1106, label %originalBB1106alteredBB

originalBB1106:                                   ; preds = %4104, %originalBB1106alteredBB
  %4113 = load i32, i32* @x.35
  %4114 = load i32, i32* @y.36
  %4115 = sub i32 %4113, 1
  %4116 = mul i32 %4113, %4115
  %4117 = urem i32 %4116, 2
  %4118 = icmp eq i32 %4117, 0
  %4119 = icmp slt i32 %4114, 10
  %4120 = or i1 %4118, %4119
  br i1 %4120, label %originalBBpart21108, label %originalBB1106alteredBB

originalBBpart21108:                              ; preds = %originalBB1106
  br label %4121, !dbg !2337

4121:                                             ; preds = %originalBBpart21108
  %4122 = load i64, i64* %29, align 8, !dbg !2338
  %4123 = load i64, i64* %20, align 8, !dbg !2338
  %4124 = icmp ult i64 %4122, %4123, !dbg !2338
  br i1 %4124, label %4125, label %4131, !dbg !2341

4125:                                             ; preds = %4121
  %4126 = load i8*, i8** %31, align 8, !dbg !2338
  %4127 = load i8, i8* %4126, align 1, !dbg !2338
  %4128 = load i8*, i8** %19, align 8, !dbg !2338
  %4129 = load i64, i64* %29, align 8, !dbg !2338
  %4130 = getelementptr inbounds i8, i8* %4128, i64 %4129, !dbg !2338
  store i8 %4127, i8* %4130, align 1, !dbg !2338
  br label %4131, !dbg !2338

4131:                                             ; preds = %4125, %4121
  %4132 = load i32, i32* @x.35
  %4133 = load i32, i32* @y.36
  %4134 = sub i32 %4132, 1
  %4135 = mul i32 %4132, %4134
  %4136 = urem i32 %4135, 2
  %4137 = icmp eq i32 %4136, 0
  %4138 = icmp slt i32 %4133, 10
  %4139 = or i1 %4137, %4138
  br i1 %4139, label %originalBB1110, label %originalBB1110alteredBB

originalBB1110:                                   ; preds = %4131, %originalBB1110alteredBB
  %4140 = load i64, i64* %29, align 8, !dbg !2341
  %4141 = add i64 %4140, 1, !dbg !2341
  store i64 %4141, i64* %29, align 8, !dbg !2341
  %4142 = load i32, i32* @x.35
  %4143 = load i32, i32* @y.36
  %4144 = sub i32 %4142, 1
  %4145 = mul i32 %4142, %4144
  %4146 = urem i32 %4145, 2
  %4147 = icmp eq i32 %4146, 0
  %4148 = icmp slt i32 %4143, 10
  %4149 = or i1 %4147, %4148
  br i1 %4149, label %originalBBpart21124, label %originalBB1110alteredBB

originalBBpart21124:                              ; preds = %originalBB1110
  br label %4150, !dbg !2341

4150:                                             ; preds = %originalBBpart21124
  %4151 = load i32, i32* @x.35
  %4152 = load i32, i32* @y.36
  %4153 = sub i32 %4151, 1
  %4154 = mul i32 %4151, %4153
  %4155 = urem i32 %4154, 2
  %4156 = icmp eq i32 %4155, 0
  %4157 = icmp slt i32 %4152, 10
  %4158 = or i1 %4156, %4157
  br i1 %4158, label %originalBB1126, label %originalBB1126alteredBB

originalBB1126:                                   ; preds = %4150, %originalBB1126alteredBB
  %4159 = load i32, i32* @x.35
  %4160 = load i32, i32* @y.36
  %4161 = sub i32 %4159, 1
  %4162 = mul i32 %4159, %4161
  %4163 = urem i32 %4162, 2
  %4164 = icmp eq i32 %4163, 0
  %4165 = icmp slt i32 %4160, 10
  %4166 = or i1 %4164, %4165
  br i1 %4166, label %originalBBpart21128, label %originalBB1126alteredBB

originalBBpart21128:                              ; preds = %originalBB1126
  br label %4167, !dbg !2341

4167:                                             ; preds = %originalBBpart21128
  %4168 = load i32, i32* @x.35
  %4169 = load i32, i32* @y.36
  %4170 = sub i32 %4168, 1
  %4171 = mul i32 %4168, %4170
  %4172 = urem i32 %4171, 2
  %4173 = icmp eq i32 %4172, 0
  %4174 = icmp slt i32 %4169, 10
  %4175 = or i1 %4173, %4174
  br i1 %4175, label %originalBB1130, label %originalBB1130alteredBB

originalBB1130:                                   ; preds = %4167, %originalBB1130alteredBB
  %4176 = load i8*, i8** %31, align 8, !dbg !2342
  %4177 = getelementptr inbounds i8, i8* %4176, i32 1, !dbg !2342
  store i8* %4177, i8** %31, align 8, !dbg !2342
  %4178 = load i32, i32* @x.35
  %4179 = load i32, i32* @y.36
  %4180 = sub i32 %4178, 1
  %4181 = mul i32 %4178, %4180
  %4182 = urem i32 %4181, 2
  %4183 = icmp eq i32 %4182, 0
  %4184 = icmp slt i32 %4179, 10
  %4185 = or i1 %4183, %4184
  br i1 %4185, label %originalBBpart21132, label %originalBB1130alteredBB

originalBBpart21132:                              ; preds = %originalBB1130
  br label %4084, !dbg !2343, !llvm.loop !2344

4186:                                             ; preds = %originalBBpart21104
  br label %4187, !dbg !2345

4187:                                             ; preds = %4186, %4064, %4061
  %4188 = load i64, i64* %29, align 8, !dbg !2346
  %4189 = load i64, i64* %20, align 8, !dbg !2348
  %4190 = icmp ult i64 %4188, %4189, !dbg !2349
  br i1 %4190, label %4191, label %4195, !dbg !2350

4191:                                             ; preds = %4187
  %4192 = load i8*, i8** %19, align 8, !dbg !2351
  %4193 = load i64, i64* %29, align 8, !dbg !2352
  %4194 = getelementptr inbounds i8, i8* %4192, i64 %4193, !dbg !2351
  store i8 0, i8* %4194, align 1, !dbg !2353
  br label %4195, !dbg !2351

4195:                                             ; preds = %4191, %4187
  %4196 = load i64, i64* %29, align 8, !dbg !2354
  store i64 %4196, i64* %18, align 8, !dbg !2355
  br label %4263, !dbg !2355

4197:                                             ; preds = %originalBBpart21080, %3458, %originalBBpart2652, %originalBBpart2573, %1870, %1830, %originalBBpart2382, %originalBBpart2358, %1226, %1118, %originalBBpart2125, %originalBBpart2109
  call void @llvm.dbg.label(metadata !2356), !dbg !2357
  %4198 = load i32, i32* @x.35
  %4199 = load i32, i32* @y.36
  %4200 = sub i32 %4198, 1
  %4201 = mul i32 %4198, %4200
  %4202 = urem i32 %4201, 2
  %4203 = icmp eq i32 %4202, 0
  %4204 = icmp slt i32 %4199, 10
  %4205 = or i1 %4203, %4204
  br i1 %4205, label %originalBB1134, label %originalBB1134alteredBB

originalBB1134:                                   ; preds = %4197, %originalBB1134alteredBB
  %4206 = load i32, i32* %23, align 4, !dbg !2358
  %4207 = icmp eq i32 %4206, 2, !dbg !2360
  %4208 = load i32, i32* @x.35
  %4209 = load i32, i32* @y.36
  %4210 = sub i32 %4208, 1
  %4211 = mul i32 %4208, %4210
  %4212 = urem i32 %4211, 2
  %4213 = icmp eq i32 %4212, 0
  %4214 = icmp slt i32 %4209, 10
  %4215 = or i1 %4213, %4214
  br i1 %4215, label %originalBBpart21136, label %originalBB1134alteredBB

originalBBpart21136:                              ; preds = %originalBB1134
  br i1 %4207, label %4216, label %4236, !dbg !2361

4216:                                             ; preds = %originalBBpart21136
  %4217 = load i32, i32* @x.35
  %4218 = load i32, i32* @y.36
  %4219 = sub i32 %4217, 1
  %4220 = mul i32 %4217, %4219
  %4221 = urem i32 %4220, 2
  %4222 = icmp eq i32 %4221, 0
  %4223 = icmp slt i32 %4218, 10
  %4224 = or i1 %4222, %4223
  br i1 %4224, label %originalBB1138, label %originalBB1138alteredBB

originalBB1138:                                   ; preds = %4216, %originalBB1138alteredBB
  %4225 = load i8, i8* %33, align 1, !dbg !2362
  %4226 = trunc i8 %4225 to i1, !dbg !2362
  %4227 = load i32, i32* @x.35
  %4228 = load i32, i32* @y.36
  %4229 = sub i32 %4227, 1
  %4230 = mul i32 %4227, %4229
  %4231 = urem i32 %4230, 2
  %4232 = icmp eq i32 %4231, 0
  %4233 = icmp slt i32 %4228, 10
  %4234 = or i1 %4232, %4233
  br i1 %4234, label %originalBBpart21140, label %originalBB1138alteredBB

originalBBpart21140:                              ; preds = %originalBB1138
  br i1 %4226, label %4235, label %4236, !dbg !2363

4235:                                             ; preds = %originalBBpart21140
  store i32 4, i32* %23, align 4, !dbg !2364
  br label %4236, !dbg !2365

4236:                                             ; preds = %4235, %originalBBpart21140, %originalBBpart21136
  %4237 = load i32, i32* @x.35
  %4238 = load i32, i32* @y.36
  %4239 = sub i32 %4237, 1
  %4240 = mul i32 %4237, %4239
  %4241 = urem i32 %4240, 2
  %4242 = icmp eq i32 %4241, 0
  %4243 = icmp slt i32 %4238, 10
  %4244 = or i1 %4242, %4243
  br i1 %4244, label %originalBB1142, label %originalBB1142alteredBB

originalBB1142:                                   ; preds = %4236, %originalBB1142alteredBB
  %4245 = load i8*, i8** %19, align 8, !dbg !2366
  %4246 = load i64, i64* %20, align 8, !dbg !2367
  %4247 = load i8*, i8** %21, align 8, !dbg !2368
  %4248 = load i64, i64* %22, align 8, !dbg !2369
  %4249 = load i32, i32* %23, align 4, !dbg !2370
  %4250 = load i32, i32* %24, align 4, !dbg !2371
  %4251 = and i32 %4250, -3, !dbg !2372
  %4252 = load i8*, i8** %26, align 8, !dbg !2373
  %4253 = load i8*, i8** %27, align 8, !dbg !2374
  %4254 = call i64 @quotearg_buffer_restyled(i8* %4245, i64 %4246, i8* %4247, i64 %4248, i32 %4249, i32 %4251, i32* null, i8* %4252, i8* %4253), !dbg !2375
  store i64 %4254, i64* %18, align 8, !dbg !2376
  %4255 = load i32, i32* @x.35
  %4256 = load i32, i32* @y.36
  %4257 = sub i32 %4255, 1
  %4258 = mul i32 %4255, %4257
  %4259 = urem i32 %4258, 2
  %4260 = icmp eq i32 %4259, 0
  %4261 = icmp slt i32 %4256, 10
  %4262 = or i1 %4260, %4261
  br i1 %4262, label %originalBBpart21153, label %originalBB1142alteredBB

originalBBpart21153:                              ; preds = %originalBB1142
  br label %4263, !dbg !2376

4263:                                             ; preds = %originalBBpart21153, %4195, %3993
  %4264 = load i64, i64* %18, align 8, !dbg !2377
  ret i64 %4264, !dbg !2377

originalBBalteredBB:                              ; preds = %originalBB, %9
  %4265 = alloca i64, align 8
  %4266 = alloca i8*, align 8
  %4267 = alloca i64, align 8
  %4268 = alloca i8*, align 8
  %4269 = alloca i64, align 8
  %4270 = alloca i32, align 4
  %4271 = alloca i32, align 4
  %4272 = alloca i32*, align 8
  %4273 = alloca i8*, align 8
  %4274 = alloca i8*, align 8
  %4275 = alloca i64, align 8
  %4276 = alloca i64, align 8
  %4277 = alloca i64, align 8
  %4278 = alloca i8*, align 8
  %4279 = alloca i64, align 8
  %4280 = alloca i8, align 1
  %4281 = alloca i8, align 1
  %4282 = alloca i8, align 1
  %4283 = alloca i8, align 1
  %4284 = alloca i8, align 1
  %4285 = alloca i8, align 1
  %4286 = alloca i8, align 1
  %4287 = alloca i8, align 1
  %4288 = alloca i8, align 1
  %4289 = alloca i8, align 1
  %4290 = alloca i8, align 1
  %4291 = alloca i64, align 8
  %4292 = alloca i8, align 1
  %4293 = alloca %struct.__mbstate_t, align 4
  %4294 = alloca i32, align 4
  %4295 = alloca i64, align 8
  %4296 = alloca i64, align 8
  %4297 = alloca i64, align 8
  store i8* %0, i8** %4266, align 8
  call void @llvm.dbg.declare(metadata i8** %4266, metadata !2378, metadata !DIExpression()), !dbg !1498
  store i64 %1, i64* %4267, align 8
  call void @llvm.dbg.declare(metadata i64* %4267, metadata !2410, metadata !DIExpression()), !dbg !1500
  store i8* %2, i8** %4268, align 8
  call void @llvm.dbg.declare(metadata i8** %4268, metadata !2411, metadata !DIExpression()), !dbg !1502
  store i64 %3, i64* %4269, align 8
  call void @llvm.dbg.declare(metadata i64* %4269, metadata !2412, metadata !DIExpression()), !dbg !1504
  store i32 %4, i32* %4270, align 4
  call void @llvm.dbg.declare(metadata i32* %4270, metadata !2413, metadata !DIExpression()), !dbg !1506
  store i32 %5, i32* %4271, align 4
  call void @llvm.dbg.declare(metadata i32* %4271, metadata !2414, metadata !DIExpression()), !dbg !1508
  store i32* %6, i32** %4272, align 8
  call void @llvm.dbg.declare(metadata i32** %4272, metadata !2415, metadata !DIExpression()), !dbg !1510
  store i8* %7, i8** %4273, align 8
  call void @llvm.dbg.declare(metadata i8** %4273, metadata !2416, metadata !DIExpression()), !dbg !1512
  store i8* %8, i8** %4274, align 8
  call void @llvm.dbg.declare(metadata i8** %4274, metadata !2417, metadata !DIExpression()), !dbg !1514
  call void @llvm.dbg.declare(metadata i64* %4275, metadata !2418, metadata !DIExpression()), !dbg !1516
  call void @llvm.dbg.declare(metadata i64* %4276, metadata !2419, metadata !DIExpression()), !dbg !1518
  store i64 0, i64* %4276, align 8, !dbg !1518
  call void @llvm.dbg.declare(metadata i64* %4277, metadata !2420, metadata !DIExpression()), !dbg !1520
  store i64 0, i64* %4277, align 8, !dbg !1520
  call void @llvm.dbg.declare(metadata i8** %4278, metadata !2421, metadata !DIExpression()), !dbg !1522
  store i8* null, i8** %4278, align 8, !dbg !1522
  call void @llvm.dbg.declare(metadata i64* %4279, metadata !2422, metadata !DIExpression()), !dbg !1524
  store i64 0, i64* %4279, align 8, !dbg !1524
  call void @llvm.dbg.declare(metadata i8* %4280, metadata !2423, metadata !DIExpression()), !dbg !1526
  store i8 0, i8* %4280, align 1, !dbg !1526
  call void @llvm.dbg.declare(metadata i8* %4281, metadata !2424, metadata !DIExpression()), !dbg !1528
  %4298 = call i64 @__ctype_get_mb_cur_max() #10, !dbg !1529
  %4299 = icmp eq i64 %4298, 1, !dbg !1530
  %4300 = zext i1 %4299 to i8, !dbg !1528
  store i8 %4300, i8* %4281, align 1, !dbg !1528
  call void @llvm.dbg.declare(metadata i8* %4282, metadata !2425, metadata !DIExpression()), !dbg !1532
  %4301 = load i32, i32* %4271, align 4, !dbg !1533
  %_ = sub i32 %4301, 2
  %gen = mul i32 %_, 2
  %_1 = sub i32 %4301, 2
  %gen2 = mul i32 %_1, 2
  %_3 = sub i32 %4301, 2
  %gen4 = mul i32 %_3, 2
  %_5 = shl i32 %4301, 2
  %_6 = sub i32 %4301, 2
  %gen7 = mul i32 %_6, 2
  %4302 = and i32 %4301, 2, !dbg !1534
  %4303 = icmp ne i32 %4302, 0, !dbg !1535
  %4304 = zext i1 %4303 to i8, !dbg !1532
  store i8 %4304, i8* %4282, align 1, !dbg !1532
  call void @llvm.dbg.declare(metadata i8* %4283, metadata !2426, metadata !DIExpression()), !dbg !1537
  store i8 0, i8* %4283, align 1, !dbg !1537
  call void @llvm.dbg.declare(metadata i8* %4284, metadata !2427, metadata !DIExpression()), !dbg !1539
  store i8 0, i8* %4284, align 1, !dbg !1539
  call void @llvm.dbg.declare(metadata i8* %4285, metadata !2428, metadata !DIExpression()), !dbg !1541
  store i8 1, i8* %4285, align 1, !dbg !1541
  br label %originalBB

originalBB8alteredBB:                             ; preds = %originalBB8, %66
  %4305 = load i32, i32* %23, align 4, !dbg !1545
  br label %originalBB8

originalBB12alteredBB:                            ; preds = %originalBB12, %84
  store i32 5, i32* %23, align 4, !dbg !1547
  store i8 1, i8* %35, align 1, !dbg !1549
  br label %originalBB12

originalBB16alteredBB:                            ; preds = %originalBB16, %105
  %4306 = load i64, i64* %29, align 8, !dbg !1555
  %4307 = load i64, i64* %20, align 8, !dbg !1555
  %4308 = icmp ult i64 %4306, %4307, !dbg !1555
  br label %originalBB16

originalBB20alteredBB:                            ; preds = %originalBB20, %129
  %4309 = load i64, i64* %29, align 8, !dbg !1558
  %4310 = add i64 %4309, 1, !dbg !1558
  store i64 %4310, i64* %29, align 8, !dbg !1558
  br label %originalBB20

originalBB24alteredBB:                            ; preds = %originalBB24, %149
  store i8 1, i8* %33, align 1, !dbg !1559
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.63, i64 0, i64 0), i8** %31, align 8, !dbg !1560
  store i64 1, i64* %32, align 8, !dbg !1561
  br label %originalBB24

originalBB28alteredBB:                            ; preds = %originalBB28, %166
  store i8 1, i8* %33, align 1, !dbg !1563
  store i8 0, i8* %35, align 1, !dbg !1564
  br label %originalBB28

originalBB32alteredBB:                            ; preds = %originalBB32, %183
  %4311 = load i32, i32* %23, align 4, !dbg !1566
  %4312 = icmp ne i32 %4311, 10, !dbg !1569
  br label %originalBB32

originalBB36alteredBB:                            ; preds = %originalBB36, %217
  %4313 = load i64, i64* %29, align 8, !dbg !1591
  %4314 = load i64, i64* %20, align 8, !dbg !1591
  %4315 = icmp ult i64 %4313, %4314, !dbg !1591
  br label %originalBB36

originalBB40alteredBB:                            ; preds = %originalBB40, %237
  %4316 = load i8*, i8** %31, align 8, !dbg !1591
  %4317 = load i8, i8* %4316, align 1, !dbg !1591
  %4318 = load i8*, i8** %19, align 8, !dbg !1591
  %4319 = load i64, i64* %29, align 8, !dbg !1591
  %4320 = getelementptr inbounds i8, i8* %4318, i64 %4319, !dbg !1591
  store i8 %4317, i8* %4320, align 1, !dbg !1591
  br label %originalBB40

originalBB44alteredBB:                            ; preds = %originalBB44, %266
  br label %originalBB44

originalBB48alteredBB:                            ; preds = %originalBB48, %292
  store i8 1, i8* %33, align 1, !dbg !1613
  br label %originalBB48

originalBB52alteredBB:                            ; preds = %originalBB52, %314
  %4321 = load i64, i64* %29, align 8, !dbg !1621
  %4322 = load i64, i64* %20, align 8, !dbg !1621
  %4323 = icmp ult i64 %4321, %4322, !dbg !1621
  br label %originalBB52

originalBB56alteredBB:                            ; preds = %originalBB56, %334
  %4324 = load i8*, i8** %19, align 8, !dbg !1621
  %4325 = load i64, i64* %29, align 8, !dbg !1621
  %4326 = getelementptr inbounds i8, i8* %4324, i64 %4325, !dbg !1621
  store i8 39, i8* %4326, align 1, !dbg !1621
  br label %originalBB56

originalBB60alteredBB:                            ; preds = %originalBB60, %357
  br label %originalBB60

originalBB64alteredBB:                            ; preds = %originalBB64, %375
  store i8 0, i8* %35, align 1, !dbg !1628
  br label %originalBB64

originalBB68alteredBB:                            ; preds = %originalBB68, %393
  store i64 0, i64* %28, align 8, !dbg !1631
  br label %originalBB68

originalBB72alteredBB:                            ; preds = %originalBB72, %421
  %4327 = load i64, i64* %28, align 8, !dbg !1640
  %4328 = load i64, i64* %22, align 8, !dbg !1641
  %4329 = icmp eq i64 %4327, %4328, !dbg !1642
  %4330 = zext i1 %4329 to i32, !dbg !1642
  br label %originalBB72

originalBB76alteredBB:                            ; preds = %originalBB76, %442
  %4331 = icmp ne i32 %443, 0, !dbg !1643
  %_77 = shl i1 %4331, true
  %_78 = sub i1 %4331, true
  %gen79 = mul i1 %_78, true
  %_80 = sub i1 false, %4331
  %gen81 = add i1 %_80, true
  %_82 = sub i1 %4331, true
  %gen83 = mul i1 %_82, true
  %_84 = sub i1 %4331, true
  %gen85 = mul i1 %_84, true
  %_86 = sub i1 false, %4331
  %gen87 = add i1 %_86, true
  %4332 = xor i1 %4331, true, !dbg !1643
  br label %originalBB76

originalBB91alteredBB:                            ; preds = %originalBB91, %480
  %4333 = load i8*, i8** %21, align 8, !dbg !1672
  %4334 = call i64 @strlen(i8* %4333) #13, !dbg !1673
  store i64 %4334, i64* %22, align 8, !dbg !1674
  br label %originalBB91

originalBB95alteredBB:                            ; preds = %originalBB95, %501
  %4335 = icmp ule i64 %474, %502, !dbg !1676
  br label %originalBB95

originalBB99alteredBB:                            ; preds = %originalBB99, %520
  %4336 = load i8*, i8** %21, align 8, !dbg !1678
  %4337 = load i64, i64* %28, align 8, !dbg !1679
  %4338 = getelementptr inbounds i8, i8* %4336, i64 %4337, !dbg !1680
  %4339 = load i8*, i8** %31, align 8, !dbg !1681
  %4340 = load i64, i64* %32, align 8, !dbg !1682
  %4341 = call i32 @memcmp(i8* %4338, i8* %4339, i64 %4340) #13, !dbg !1683
  %4342 = icmp eq i32 %4341, 0, !dbg !1684
  br label %originalBB99

originalBB103alteredBB:                           ; preds = %originalBB103, %544
  %4343 = load i8, i8* %35, align 1, !dbg !1686
  %4344 = trunc i8 %4343 to i1, !dbg !1686
  br label %originalBB103

originalBB107alteredBB:                           ; preds = %originalBB107, %563
  br label %originalBB107

originalBB111alteredBB:                           ; preds = %originalBB111, %580
  store i8 1, i8* %41, align 1, !dbg !1691
  br label %originalBB111

originalBB115alteredBB:                           ; preds = %originalBB115, %597
  %4345 = load i8*, i8** %21, align 8, !dbg !1693
  %4346 = load i64, i64* %28, align 8, !dbg !1694
  %4347 = getelementptr inbounds i8, i8* %4345, i64 %4346, !dbg !1693
  %4348 = load i8, i8* %4347, align 1, !dbg !1693
  store i8 %4348, i8* %39, align 1, !dbg !1695
  %4349 = load i8, i8* %39, align 1, !dbg !1696
  %4350 = zext i8 %4349 to i32, !dbg !1696
  br label %originalBB115

originalBB119alteredBB:                           ; preds = %originalBB119, %623
  br label %originalBB119

originalBB123alteredBB:                           ; preds = %originalBB123, %643
  br label %originalBB123

originalBB127alteredBB:                           ; preds = %originalBB127, %663
  %4351 = load i8, i8* %36, align 1, !dbg !1708
  %4352 = trunc i8 %4351 to i1, !dbg !1708
  br label %originalBB127

originalBB131alteredBB:                           ; preds = %originalBB131, %682
  br label %originalBB131

originalBB135alteredBB:                           ; preds = %originalBB135, %728
  br label %originalBB135

originalBB139alteredBB:                           ; preds = %originalBB139, %745
  store i64 %709, i64* %29, align 8, !dbg !1715
  br label %originalBB139

originalBB143alteredBB:                           ; preds = %originalBB143, %763
  %4353 = load i64, i64* %29, align 8, !dbg !1716
  %4354 = load i64, i64* %20, align 8, !dbg !1716
  %4355 = icmp ult i64 %4353, %4354, !dbg !1716
  br label %originalBB143

originalBB147alteredBB:                           ; preds = %originalBB147, %787
  %4356 = load i64, i64* %29, align 8, !dbg !1719
  %_148 = shl i64 %4356, 1
  %_149 = sub i64 %4356, 1
  %gen150 = mul i64 %_149, 1
  %_151 = shl i64 %4356, 1
  %_152 = sub i64 0, %4356
  %gen153 = add i64 %_152, 1
  %_154 = sub i64 0, %4356
  %gen155 = add i64 %_154, 1
  %_156 = shl i64 %4356, 1
  %_157 = sub i64 %4356, 1
  %gen158 = mul i64 %_157, 1
  %_159 = sub i64 0, %4356
  %gen160 = add i64 %_159, 1
  %_161 = shl i64 %4356, 1
  %4357 = add i64 %4356, 1, !dbg !1719
  store i64 %4357, i64* %29, align 8, !dbg !1719
  br label %originalBB147

originalBB165alteredBB:                           ; preds = %originalBB165, %807
  %4358 = load i64, i64* %29, align 8, !dbg !1720
  %4359 = load i64, i64* %20, align 8, !dbg !1720
  %4360 = icmp ult i64 %4358, %4359, !dbg !1720
  br label %originalBB165

originalBB169alteredBB:                           ; preds = %originalBB169, %827
  %4361 = load i8*, i8** %19, align 8, !dbg !1720
  %4362 = load i64, i64* %29, align 8, !dbg !1720
  %4363 = getelementptr inbounds i8, i8* %4361, i64 %4362, !dbg !1720
  store i8 39, i8* %4363, align 1, !dbg !1720
  br label %originalBB169

originalBB173alteredBB:                           ; preds = %originalBB173, %851
  br label %originalBB173

originalBB177alteredBB:                           ; preds = %originalBB177, %872
  %4364 = load i8*, i8** %19, align 8, !dbg !1724
  %4365 = load i64, i64* %29, align 8, !dbg !1724
  %4366 = getelementptr inbounds i8, i8* %4364, i64 %4365, !dbg !1724
  store i8 92, i8* %4366, align 1, !dbg !1724
  br label %originalBB177

originalBB181alteredBB:                           ; preds = %originalBB181, %892
  %4367 = load i64, i64* %29, align 8, !dbg !1727
  %_182 = sub i64 %4367, 1
  %gen183 = mul i64 %_182, 1
  %_184 = sub i64 0, %4367
  %gen185 = add i64 %_184, 1
  %_186 = shl i64 %4367, 1
  %_187 = sub i64 0, %4367
  %gen188 = add i64 %_187, 1
  %_189 = shl i64 %4367, 1
  %_190 = sub i64 %4367, 1
  %gen191 = mul i64 %_190, 1
  %_192 = shl i64 %4367, 1
  %4368 = add i64 %4367, 1, !dbg !1727
  store i64 %4368, i64* %29, align 8, !dbg !1727
  br label %originalBB181

originalBB196alteredBB:                           ; preds = %originalBB196, %915
  %4369 = load i64, i64* %28, align 8, !dbg !1732
  %_197 = shl i64 %4369, 1
  %_198 = shl i64 %4369, 1
  %_199 = shl i64 %4369, 1
  %_200 = sub i64 0, %4369
  %gen201 = add i64 %_200, 1
  %_202 = sub i64 0, %4369
  %gen203 = add i64 %_202, 1
  %_204 = shl i64 %4369, 1
  %_205 = sub i64 0, %4369
  %gen206 = add i64 %_205, 1
  %4370 = add i64 %4369, 1, !dbg !1733
  %4371 = load i64, i64* %22, align 8, !dbg !1734
  %4372 = icmp ult i64 %4370, %4371, !dbg !1735
  br label %originalBB196

originalBB210alteredBB:                           ; preds = %originalBB210, %952
  br label %originalBB210

originalBB215alteredBB:                           ; preds = %originalBB215, %977
  %4373 = load i64, i64* %29, align 8, !dbg !1752
  %_216 = sub i64 0, %4373
  %gen217 = add i64 %_216, 1
  %_218 = sub i64 %4373, 1
  %gen219 = mul i64 %_218, 1
  %_220 = sub i64 0, %4373
  %gen221 = add i64 %_220, 1
  %_222 = shl i64 %4373, 1
  %_223 = shl i64 %4373, 1
  %4374 = add i64 %4373, 1, !dbg !1752
  store i64 %4374, i64* %29, align 8, !dbg !1752
  br label %originalBB215

originalBB227alteredBB:                           ; preds = %originalBB227, %996
  br label %originalBB227

originalBB231alteredBB:                           ; preds = %originalBB231, %1026
  %4375 = load i32, i32* %24, align 4, !dbg !1761
  %_232 = sub i32 %4375, 1
  %gen233 = mul i32 %_232, 1
  %_234 = shl i32 %4375, 1
  %_235 = shl i32 %4375, 1
  %_236 = shl i32 %4375, 1
  %_237 = sub i32 0, %4375
  %gen238 = add i32 %_237, 1
  %_239 = shl i32 %4375, 1
  %_240 = sub i32 %4375, 1
  %gen241 = mul i32 %_240, 1
  %_242 = shl i32 %4375, 1
  %4376 = and i32 %4375, 1, !dbg !1763
  %4377 = icmp ne i32 %4376, 0, !dbg !1763
  br label %originalBB231

originalBB247alteredBB:                           ; preds = %originalBB247, %1046
  br label %originalBB247

originalBB251alteredBB:                           ; preds = %originalBB251, %1063
  br label %originalBB251

originalBB255alteredBB:                           ; preds = %originalBB255, %1080
  br label %originalBB255

originalBB259alteredBB:                           ; preds = %originalBB259, %1099
  %4378 = load i8, i8* %35, align 1, !dbg !1769
  %4379 = trunc i8 %4378 to i1, !dbg !1769
  br label %originalBB259

originalBB263alteredBB:                           ; preds = %originalBB263, %1142
  br label %originalBB263

originalBB267alteredBB:                           ; preds = %originalBB267, %1178
  br label %originalBB267

originalBB271alteredBB:                           ; preds = %originalBB271, %1195
  %4380 = getelementptr inbounds i8, i8* %1162, i64 %1164, !dbg !1784
  %4381 = load i8, i8* %4380, align 1, !dbg !1784
  %4382 = sext i8 %4381 to i32, !dbg !1784
  %4383 = icmp eq i32 %4382, 63, !dbg !1787
  br label %originalBB271

originalBB275alteredBB:                           ; preds = %originalBB275, %1227
  %4384 = load i8*, i8** %21, align 8, !dbg !1798
  %4385 = load i64, i64* %28, align 8, !dbg !1799
  %_276 = sub i64 0, %4385
  %gen277 = add i64 %_276, 2
  %_278 = shl i64 %4385, 2
  %_279 = sub i64 0, %4385
  %gen280 = add i64 %_279, 2
  %_281 = sub i64 %4385, 2
  %gen282 = mul i64 %_281, 2
  %_283 = sub i64 %4385, 2
  %gen284 = mul i64 %_283, 2
  %_285 = shl i64 %4385, 2
  %_286 = sub i64 %4385, 2
  %gen287 = mul i64 %_286, 2
  %_288 = shl i64 %4385, 2
  %4386 = add i64 %4385, 2, !dbg !1800
  %4387 = getelementptr inbounds i8, i8* %4384, i64 %4386, !dbg !1798
  %4388 = load i8, i8* %4387, align 1, !dbg !1798
  store i8 %4388, i8* %39, align 1, !dbg !1801
  %4389 = load i64, i64* %28, align 8, !dbg !1802
  %_289 = sub i64 %4389, 2
  %gen290 = mul i64 %_289, 2
  %_291 = shl i64 %4389, 2
  %4390 = add i64 %4389, 2, !dbg !1802
  store i64 %4390, i64* %28, align 8, !dbg !1802
  br label %originalBB275

originalBB295alteredBB:                           ; preds = %originalBB295, %1283
  br label %originalBB295

originalBB299alteredBB:                           ; preds = %originalBB299, %1302
  %4391 = load i64, i64* %29, align 8, !dbg !1814
  %4392 = load i64, i64* %20, align 8, !dbg !1814
  %4393 = icmp ult i64 %4391, %4392, !dbg !1814
  br label %originalBB299

originalBB303alteredBB:                           ; preds = %originalBB303, %1326
  %4394 = load i64, i64* %29, align 8, !dbg !1817
  %_304 = sub i64 %4394, 1
  %gen305 = mul i64 %_304, 1
  %_306 = shl i64 %4394, 1
  %_307 = sub i64 0, %4394
  %gen308 = add i64 %_307, 1
  %_309 = sub i64 0, %4394
  %gen310 = add i64 %_309, 1
  %_311 = sub i64 0, %4394
  %gen312 = add i64 %_311, 1
  %4395 = add i64 %4394, 1, !dbg !1817
  store i64 %4395, i64* %29, align 8, !dbg !1817
  br label %originalBB303

originalBB316alteredBB:                           ; preds = %originalBB316, %1357
  br label %originalBB316

originalBB320alteredBB:                           ; preds = %originalBB320, %1374
  br label %originalBB320

originalBB324alteredBB:                           ; preds = %originalBB324, %1392
  br label %originalBB324

originalBB328alteredBB:                           ; preds = %originalBB328, %1410
  br label %originalBB328

originalBB332alteredBB:                           ; preds = %originalBB332, %1427
  store i8 97, i8* %40, align 1, !dbg !1829
  br label %originalBB332

originalBB336alteredBB:                           ; preds = %originalBB336, %1444
  store i8 98, i8* %40, align 1, !dbg !1831
  br label %originalBB336

originalBB340alteredBB:                           ; preds = %originalBB340, %1463
  store i8 114, i8* %40, align 1, !dbg !1837
  br label %originalBB340

originalBB344alteredBB:                           ; preds = %originalBB344, %1480
  store i8 116, i8* %40, align 1, !dbg !1839
  br label %originalBB344

originalBB348alteredBB:                           ; preds = %originalBB348, %1497
  store i8 118, i8* %40, align 1, !dbg !1841
  br label %originalBB348

originalBB352alteredBB:                           ; preds = %originalBB352, %1518
  %4396 = load i8, i8* %35, align 1, !dbg !1849
  %4397 = trunc i8 %4396 to i1, !dbg !1849
  br label %originalBB352

originalBB356alteredBB:                           ; preds = %originalBB356, %1537
  br label %originalBB356

originalBB360alteredBB:                           ; preds = %originalBB360, %1558
  %4398 = load i8, i8* %35, align 1, !dbg !1858
  %4399 = trunc i8 %4398 to i1, !dbg !1858
  br label %originalBB360

originalBB364alteredBB:                           ; preds = %originalBB364, %1577
  %4400 = load i64, i64* %32, align 8, !dbg !1860
  %4401 = icmp ne i64 %4400, 0, !dbg !1860
  br label %originalBB364

originalBB368alteredBB:                           ; preds = %originalBB368, %1596
  br label %originalBB368

originalBB372alteredBB:                           ; preds = %originalBB372, %1613
  br label %originalBB372

originalBB376alteredBB:                           ; preds = %originalBB376, %1630
  %4402 = load i32, i32* %23, align 4, !dbg !1865
  %4403 = icmp eq i32 %4402, 2, !dbg !1867
  br label %originalBB376

originalBB380alteredBB:                           ; preds = %originalBB380, %1652
  br label %originalBB380

originalBB384alteredBB:                           ; preds = %originalBB384, %1669
  br label %originalBB384

originalBB388alteredBB:                           ; preds = %originalBB388, %1691
  br label %originalBB388

originalBB392alteredBB:                           ; preds = %originalBB392, %1708
  %4404 = load i64, i64* %22, align 8, !dbg !1882
  %4405 = icmp eq i64 %4404, -1, !dbg !1884
  br label %originalBB392

originalBB396alteredBB:                           ; preds = %originalBB396, %1733
  %4406 = load i64, i64* %22, align 8, !dbg !1888
  %4407 = icmp eq i64 %4406, 1, !dbg !1889
  br label %originalBB396

originalBB400alteredBB:                           ; preds = %originalBB400, %1753
  br label %originalBB400

originalBB404alteredBB:                           ; preds = %originalBB404, %1774
  br label %originalBB404

originalBB408alteredBB:                           ; preds = %originalBB408, %1791
  store i8 1, i8* %43, align 1, !dbg !1898
  br label %originalBB408

originalBB412alteredBB:                           ; preds = %originalBB412, %1808
  %4408 = load i32, i32* %23, align 4, !dbg !1900
  %4409 = icmp eq i32 %4408, 2, !dbg !1902
  br label %originalBB412

originalBB416alteredBB:                           ; preds = %originalBB416, %1831
  br label %originalBB416

originalBB420alteredBB:                           ; preds = %originalBB420, %1851
  %4410 = load i8, i8* %35, align 1, !dbg !1914
  %4411 = trunc i8 %4410 to i1, !dbg !1914
  br label %originalBB420

originalBB424alteredBB:                           ; preds = %originalBB424, %1871
  %4412 = load i64, i64* %20, align 8, !dbg !1919
  %4413 = icmp ne i64 %4412, 0, !dbg !1919
  br label %originalBB424

originalBB428alteredBB:                           ; preds = %originalBB428, %1893
  %4414 = load i64, i64* %20, align 8, !dbg !1924
  store i64 %4414, i64* %30, align 8, !dbg !1926
  store i64 0, i64* %20, align 8, !dbg !1927
  br label %originalBB428

originalBB432alteredBB:                           ; preds = %originalBB432, %1911
  br label %originalBB432

originalBB436alteredBB:                           ; preds = %originalBB436, %1939
  br label %originalBB436

originalBB440alteredBB:                           ; preds = %originalBB440, %1956
  %4415 = load i64, i64* %29, align 8, !dbg !1935
  %4416 = load i64, i64* %20, align 8, !dbg !1935
  %4417 = icmp ult i64 %4415, %4416, !dbg !1935
  br label %originalBB440

originalBB444alteredBB:                           ; preds = %originalBB444, %1976
  %4418 = load i8*, i8** %19, align 8, !dbg !1935
  %4419 = load i64, i64* %29, align 8, !dbg !1935
  %4420 = getelementptr inbounds i8, i8* %4418, i64 %4419, !dbg !1935
  store i8 92, i8* %4420, align 1, !dbg !1935
  br label %originalBB444

originalBB448alteredBB:                           ; preds = %originalBB448, %2000
  %4421 = load i64, i64* %29, align 8, !dbg !1940
  %4422 = load i64, i64* %20, align 8, !dbg !1940
  %4423 = icmp ult i64 %4421, %4422, !dbg !1940
  br label %originalBB448

originalBB452alteredBB:                           ; preds = %originalBB452, %2020
  %4424 = load i8*, i8** %19, align 8, !dbg !1940
  %4425 = load i64, i64* %29, align 8, !dbg !1940
  %4426 = getelementptr inbounds i8, i8* %4424, i64 %4425, !dbg !1940
  store i8 39, i8* %4426, align 1, !dbg !1940
  br label %originalBB452

originalBB456alteredBB:                           ; preds = %originalBB456, %2040
  %4427 = load i64, i64* %29, align 8, !dbg !1943
  %_457 = shl i64 %4427, 1
  %_458 = shl i64 %4427, 1
  %_459 = sub i64 0, %4427
  %gen460 = add i64 %_459, 1
  %4428 = add i64 %4427, 1, !dbg !1943
  store i64 %4428, i64* %29, align 8, !dbg !1943
  br label %originalBB456

originalBB464alteredBB:                           ; preds = %originalBB464, %2059
  store i8 0, i8* %36, align 1, !dbg !1944
  br label %originalBB464

originalBB468alteredBB:                           ; preds = %originalBB468, %2076
  br label %originalBB468

originalBB472alteredBB:                           ; preds = %originalBB472, %2094
  %4429 = load i8, i8* %34, align 1, !dbg !1954
  %4430 = trunc i8 %4429 to i1, !dbg !1954
  br label %originalBB472

originalBB476alteredBB:                           ; preds = %originalBB476, %2125
  %4431 = bitcast %struct.__mbstate_t* %46 to i8*, !dbg !1981
  call void @llvm.memset.p0i8.i64(i8* align 4 %4431, i8 0, i64 8, i1 false), !dbg !1981
  store i64 0, i64* %44, align 8, !dbg !1982
  store i8 1, i8* %45, align 1, !dbg !1983
  %4432 = load i64, i64* %22, align 8, !dbg !1984
  %4433 = trunc i64 %4432 to i32
  %_477 = shl i32 %4433, -2
  %_478 = sub i32 0, %4433
  %gen479 = add i32 %_478, -2
  %_480 = sub i32 0, %4433
  %gen481 = add i32 %_480, -2
  %_482 = sub i32 %4433, -2
  %gen483 = mul i32 %_482, -2
  %_484 = sub i32 %4433, -2
  %gen485 = mul i32 %_484, -2
  %_486 = sub i32 %4433, -2
  %gen487 = mul i32 %_486, -2
  %_488 = shl i32 %4433, -2
  %_489 = sub i32 0, %4433
  %gen490 = add i32 %_489, -2
  %_491 = sub i32 0, %4433
  %gen492 = add i32 %_491, -2
  %4434 = mul i32 %4433, -2
  %_493 = sub i32 %4434, %4434
  %gen494 = mul i32 %_493, %4434
  %_495 = sub i32 0, %4434
  %gen496 = add i32 %_495, %4434
  %_497 = sub i32 0, %4434
  %gen498 = add i32 %_497, %4434
  %_499 = sub i32 %4434, %4434
  %gen500 = mul i32 %_499, %4434
  %4435 = mul i32 %4434, %4434
  %_501 = shl i32 %4435, %4434
  %4436 = sub i32 %4435, %4434
  %_502 = sub i32 %4436, 2
  %gen503 = mul i32 %_502, 2
  %_504 = sub i32 %4436, 2
  %gen505 = mul i32 %_504, 2
  %_506 = sub i32 %4436, 2
  %gen507 = mul i32 %_506, 2
  %_508 = shl i32 %4436, 2
  %_509 = sub i32 0, %4436
  %gen510 = add i32 %_509, 2
  %_511 = shl i32 %4436, 2
  %_512 = sub i32 0, %4436
  %gen513 = add i32 %_512, 2
  %_514 = sub i32 %4436, 2
  %gen515 = mul i32 %_514, 2
  %4437 = srem i32 %4436, 2
  %4438 = icmp ne i32 %4437, 0
  br label %originalBB476

originalBB519alteredBB:                           ; preds = %originalBB519, %2150
  br label %originalBB519

originalBB523alteredBB:                           ; preds = %originalBB523, %2169
  %4439 = load i8*, i8** %21, align 8, !dbg !1988
  %4440 = call i64 @strlen(i8* %4439) #13, !dbg !1989
  store i64 %4440, i64* %22, align 8, !dbg !1990
  br label %originalBB523

originalBB527alteredBB:                           ; preds = %originalBB527, %2189
  %4441 = load i8*, i8** %21, align 8, !dbg !1999
  %4442 = load i64, i64* %28, align 8, !dbg !2000
  %4443 = load i64, i64* %44, align 8, !dbg !2001
  %_528 = shl i64 %4442, %4443
  %_529 = sub i64 0, %4442
  %gen530 = add i64 %_529, %4443
  %4444 = add i64 %4442, %4443, !dbg !2002
  %4445 = getelementptr inbounds i8, i8* %4441, i64 %4444, !dbg !1999
  %4446 = load i64, i64* %22, align 8, !dbg !2003
  %4447 = load i64, i64* %28, align 8, !dbg !2004
  %4448 = load i64, i64* %44, align 8, !dbg !2005
  %_531 = sub i64 %4447, %4448
  %gen532 = mul i64 %_531, %4448
  %_533 = shl i64 %4447, %4448
  %_534 = sub i64 0, %4447
  %gen535 = add i64 %_534, %4448
  %_536 = shl i64 %4447, %4448
  %_537 = shl i64 %4447, %4448
  %_538 = shl i64 %4447, %4448
  %_539 = shl i64 %4447, %4448
  %_540 = shl i64 %4447, %4448
  %4449 = add i64 %4447, %4448, !dbg !2006
  %_541 = shl i64 %4446, %4449
  %_542 = sub i64 0, %4446
  %gen543 = add i64 %_542, %4449
  %4450 = sub i64 %4446, %4449, !dbg !2007
  %4451 = call i64 @rpl_mbrtowc(i32* %47, i8* %4445, i64 %4450, %struct.__mbstate_t* %46), !dbg !2008
  store i64 %4451, i64* %48, align 8, !dbg !1998
  %4452 = load i64, i64* %48, align 8, !dbg !2009
  %4453 = icmp eq i64 %4452, 0, !dbg !2011
  br label %originalBB527

originalBB547alteredBB:                           ; preds = %originalBB547, %2219
  br label %originalBB547

originalBB551alteredBB:                           ; preds = %originalBB551, %2240
  %4454 = load i64, i64* %48, align 8, !dbg !2021
  %4455 = icmp eq i64 %4454, -2, !dbg !2023
  br label %originalBB551

originalBB555alteredBB:                           ; preds = %originalBB555, %2259
  store i8 0, i8* %45, align 1, !dbg !2025
  br label %originalBB555

originalBB559alteredBB:                           ; preds = %originalBB559, %2300
  %4456 = load i32, i32* %23, align 4, !dbg !2046
  %4457 = icmp eq i32 %4456, 2, !dbg !2047
  br label %originalBB559

originalBB563alteredBB:                           ; preds = %originalBB563, %2319
  store i64 1, i64* %49, align 8, !dbg !2052
  br label %originalBB563

originalBB567alteredBB:                           ; preds = %originalBB567, %2336
  %4458 = load i64, i64* %49, align 8, !dbg !2055
  %4459 = load i64, i64* %48, align 8, !dbg !2057
  %4460 = icmp ult i64 %4458, %4459, !dbg !2058
  br label %originalBB567

originalBB571alteredBB:                           ; preds = %originalBB571, %2366
  br label %originalBB571

originalBB575alteredBB:                           ; preds = %originalBB575, %2383
  br label %originalBB575

originalBB579alteredBB:                           ; preds = %originalBB579, %2400
  br label %originalBB579

originalBB583alteredBB:                           ; preds = %originalBB583, %2417
  %4461 = load i64, i64* %49, align 8, !dbg !2071
  %_584 = shl i64 %4461, 1
  %_585 = shl i64 %4461, 1
  %_586 = shl i64 %4461, 1
  %_587 = shl i64 %4461, 1
  %_588 = sub i64 %4461, 1
  %gen589 = mul i64 %_588, 1
  %_590 = shl i64 %4461, 1
  %_591 = sub i64 0, %4461
  %gen592 = add i64 %_591, 1
  %_593 = sub i64 0, %4461
  %gen594 = add i64 %_593, 1
  %4462 = add i64 %4461, 1, !dbg !2071
  store i64 %4462, i64* %49, align 8, !dbg !2071
  br label %originalBB583

originalBB598alteredBB:                           ; preds = %originalBB598, %2441
  store i8 0, i8* %45, align 1, !dbg !2080
  br label %originalBB598

originalBB602alteredBB:                           ; preds = %originalBB602, %2462
  br label %originalBB602

originalBB606alteredBB:                           ; preds = %originalBB606, %2481
  %4463 = call i32 @mbsinit(%struct.__mbstate_t* %46) #13, !dbg !2085
  %4464 = icmp ne i32 %4463, 0, !dbg !2086
  %_607 = sub i1 false, %4464
  %gen608 = add i1 %_607, true
  %_609 = sub i1 %4464, true
  %gen610 = mul i1 %_609, true
  %_611 = sub i1 %4464, true
  %gen612 = mul i1 %_611, true
  %_613 = sub i1 false, %4464
  %gen614 = add i1 %_613, true
  %_615 = sub i1 false, %4464
  %gen616 = add i1 %_615, true
  %_617 = sub i1 false, %4464
  %gen618 = add i1 %_617, true
  %_619 = sub i1 %4464, true
  %gen620 = mul i1 %_619, true
  %_621 = sub i1 %4464, true
  %gen622 = mul i1 %_621, true
  %4465 = xor i1 %4464, true, !dbg !2086
  br label %originalBB606

originalBB626alteredBB:                           ; preds = %originalBB626, %2508
  %4466 = load i8, i8* %33, align 1, !dbg !2095
  %4467 = trunc i8 %4466 to i1, !dbg !2095
  br label %originalBB626

originalBB630alteredBB:                           ; preds = %originalBB630, %2527
  %4468 = load i8, i8* %45, align 1, !dbg !2097
  %4469 = trunc i8 %4468 to i1, !dbg !2097
  br label %originalBB630

originalBB634alteredBB:                           ; preds = %originalBB634, %2550
  %4470 = load i8, i8* %33, align 1, !dbg !2106
  %4471 = trunc i8 %4470 to i1, !dbg !2106
  br label %originalBB634

originalBB638alteredBB:                           ; preds = %originalBB638, %2569
  %4472 = load i8, i8* %45, align 1, !dbg !2112
  %4473 = trunc i8 %4472 to i1, !dbg !2112
  br label %originalBB638

originalBB642alteredBB:                           ; preds = %originalBB642, %2588
  br label %originalBB642

originalBB646alteredBB:                           ; preds = %originalBB646, %2605
  %4474 = load i8, i8* %35, align 1, !dbg !2116
  %4475 = trunc i8 %4474 to i1, !dbg !2116
  br label %originalBB646

originalBB650alteredBB:                           ; preds = %originalBB650, %2624
  br label %originalBB650

originalBB654alteredBB:                           ; preds = %originalBB654, %2641
  store i8 1, i8* %42, align 1, !dbg !2119
  %4476 = load i32, i32* %23, align 4, !dbg !2120
  %4477 = icmp eq i32 %4476, 2, !dbg !2120
  br label %originalBB654

originalBB658alteredBB:                           ; preds = %originalBB658, %2660
  %4478 = load i8, i8* %36, align 1, !dbg !2120
  %4479 = trunc i8 %4478 to i1, !dbg !2120
  br label %originalBB658

originalBB662alteredBB:                           ; preds = %originalBB662, %2679
  br label %originalBB662

originalBB666alteredBB:                           ; preds = %originalBB666, %2704
  %4480 = load i64, i64* %29, align 8, !dbg !2127
  %_667 = sub i64 0, %4480
  %gen668 = add i64 %_667, 1
  %_669 = sub i64 0, %4480
  %gen670 = add i64 %_669, 1
  %_671 = sub i64 0, %4480
  %gen672 = add i64 %_671, 1
  %_673 = shl i64 %4480, 1
  %_674 = sub i64 %4480, 1
  %gen675 = mul i64 %_674, 1
  %_676 = sub i64 0, %4480
  %gen677 = add i64 %_676, 1
  %4481 = add i64 %4480, 1, !dbg !2127
  store i64 %4481, i64* %29, align 8, !dbg !2127
  br label %originalBB666

originalBB681alteredBB:                           ; preds = %originalBB681, %2723
  br label %originalBB681

originalBB685alteredBB:                           ; preds = %originalBB685, %2740
  %4482 = load i64, i64* %29, align 8, !dbg !2128
  %4483 = load i64, i64* %20, align 8, !dbg !2128
  %4484 = icmp ult i64 %4482, %4483, !dbg !2128
  br label %originalBB685

originalBB689alteredBB:                           ; preds = %originalBB689, %2760
  %4485 = load i8*, i8** %19, align 8, !dbg !2128
  %4486 = load i64, i64* %29, align 8, !dbg !2128
  %4487 = getelementptr inbounds i8, i8* %4485, i64 %4486, !dbg !2128
  store i8 36, i8* %4487, align 1, !dbg !2128
  br label %originalBB689

originalBB693alteredBB:                           ; preds = %originalBB693, %2783
  br label %originalBB693

originalBB697alteredBB:                           ; preds = %originalBB697, %2800
  %4488 = load i64, i64* %29, align 8, !dbg !2132
  %4489 = load i64, i64* %20, align 8, !dbg !2132
  %4490 = icmp ult i64 %4488, %4489, !dbg !2132
  br label %originalBB697

originalBB701alteredBB:                           ; preds = %originalBB701, %2827
  store i8 1, i8* %36, align 1, !dbg !2122
  br label %originalBB701

originalBB705alteredBB:                           ; preds = %originalBB705, %2844
  br label %originalBB705

originalBB709alteredBB:                           ; preds = %originalBB709, %2861
  %4491 = load i64, i64* %29, align 8, !dbg !2136
  %4492 = load i64, i64* %20, align 8, !dbg !2136
  %4493 = icmp ult i64 %4491, %4492, !dbg !2136
  br label %originalBB709

originalBB713alteredBB:                           ; preds = %originalBB713, %2881
  %4494 = load i8*, i8** %19, align 8, !dbg !2136
  %4495 = load i64, i64* %29, align 8, !dbg !2136
  %4496 = getelementptr inbounds i8, i8* %4494, i64 %4495, !dbg !2136
  store i8 92, i8* %4496, align 1, !dbg !2136
  br label %originalBB713

originalBB717alteredBB:                           ; preds = %originalBB717, %2901
  %4497 = load i64, i64* %29, align 8, !dbg !2139
  %_718 = sub i64 0, %4497
  %gen719 = add i64 %_718, 1
  %_720 = shl i64 %4497, 1
  %_721 = shl i64 %4497, 1
  %_722 = shl i64 %4497, 1
  %4498 = add i64 %4497, 1, !dbg !2139
  store i64 %4498, i64* %29, align 8, !dbg !2139
  br label %originalBB717

originalBB726alteredBB:                           ; preds = %originalBB726, %2921
  br label %originalBB726

originalBB730alteredBB:                           ; preds = %originalBB730, %2938
  %4499 = load i64, i64* %29, align 8, !dbg !2141
  %4500 = load i64, i64* %20, align 8, !dbg !2141
  %4501 = icmp ult i64 %4499, %4500, !dbg !2141
  br label %originalBB730

originalBB734alteredBB:                           ; preds = %originalBB734, %2958
  %4502 = load i8, i8* %39, align 1, !dbg !2141
  %4503 = zext i8 %4502 to i32, !dbg !2141
  %_735 = shl i32 %4503, 6
  %_736 = sub i32 0, %4503
  %gen737 = add i32 %_736, 6
  %_738 = sub i32 0, %4503
  %gen739 = add i32 %_738, 6
  %4504 = ashr i32 %4503, 6, !dbg !2141
  %_740 = sub i32 0, 48
  %gen741 = add i32 %_740, %4504
  %_742 = shl i32 48, %4504
  %_743 = sub i32 0, 48
  %gen744 = add i32 %_743, %4504
  %_745 = shl i32 48, %4504
  %_746 = shl i32 48, %4504
  %_747 = shl i32 48, %4504
  %4505 = add nsw i32 48, %4504, !dbg !2141
  %4506 = trunc i32 %4505 to i8, !dbg !2141
  %4507 = load i8*, i8** %19, align 8, !dbg !2141
  %4508 = load i64, i64* %29, align 8, !dbg !2141
  %4509 = getelementptr inbounds i8, i8* %4507, i64 %4508, !dbg !2141
  store i8 %4506, i8* %4509, align 1, !dbg !2141
  br label %originalBB734

originalBB751alteredBB:                           ; preds = %originalBB751, %2986
  br label %originalBB751

originalBB755alteredBB:                           ; preds = %originalBB755, %3020
  %4510 = load i8, i8* %39, align 1, !dbg !2150
  %4511 = zext i8 %4510 to i32, !dbg !2150
  %_756 = sub i32 %4511, 7
  %gen757 = mul i32 %_756, 7
  %_758 = shl i32 %4511, 7
  %_759 = shl i32 %4511, 7
  %_760 = shl i32 %4511, 7
  %_761 = sub i32 0, %4511
  %gen762 = add i32 %_761, 7
  %_763 = shl i32 %4511, 7
  %_764 = shl i32 %4511, 7
  %4512 = and i32 %4511, 7, !dbg !2151
  %_765 = sub i32 48, %4512
  %gen766 = mul i32 %_765, %4512
  %_767 = sub i32 48, %4512
  %gen768 = mul i32 %_767, %4512
  %4513 = add nsw i32 48, %4512, !dbg !2152
  %4514 = trunc i32 %4513 to i8, !dbg !2153
  store i8 %4514, i8* %39, align 1, !dbg !2154
  br label %originalBB755

originalBB772alteredBB:                           ; preds = %originalBB772, %3045
  br label %originalBB772

originalBB776alteredBB:                           ; preds = %originalBB776, %3066
  %4515 = load i8*, i8** %19, align 8, !dbg !2161
  %4516 = load i64, i64* %29, align 8, !dbg !2161
  %4517 = getelementptr inbounds i8, i8* %4515, i64 %4516, !dbg !2161
  store i8 92, i8* %4517, align 1, !dbg !2161
  br label %originalBB776

originalBB780alteredBB:                           ; preds = %originalBB780, %3091
  %4518 = load i64, i64* %50, align 8, !dbg !2167
  %4519 = load i64, i64* %28, align 8, !dbg !2169
  %_781 = sub i64 0, %4519
  %gen782 = add i64 %_781, 1
  %_783 = sub i64 0, %4519
  %gen784 = add i64 %_783, 1
  %_785 = sub i64 %4519, 1
  %gen786 = mul i64 %_785, 1
  %_787 = sub i64 0, %4519
  %gen788 = add i64 %_787, 1
  %_789 = shl i64 %4519, 1
  %_790 = shl i64 %4519, 1
  %_791 = sub i64 %4519, 1
  %gen792 = mul i64 %_791, 1
  %4520 = add i64 %4519, 1, !dbg !2170
  %4521 = icmp ule i64 %4518, %4520, !dbg !2171
  br label %originalBB780

originalBB796alteredBB:                           ; preds = %originalBB796, %3112
  br label %originalBB796

originalBB800alteredBB:                           ; preds = %originalBB800, %3130
  %4522 = load i8, i8* %36, align 1, !dbg !2175
  %4523 = trunc i8 %4522 to i1, !dbg !2175
  br label %originalBB800

originalBB804alteredBB:                           ; preds = %originalBB804, %3149
  %4524 = load i8, i8* %42, align 1, !dbg !2175
  %4525 = trunc i8 %4524 to i1, !dbg !2175
  br label %originalBB804

originalBB808alteredBB:                           ; preds = %originalBB808, %3168
  br label %originalBB808

originalBB812alteredBB:                           ; preds = %originalBB812, %3185
  %4526 = load i64, i64* %29, align 8, !dbg !2181
  %4527 = load i64, i64* %20, align 8, !dbg !2181
  %4528 = icmp ult i64 %4526, %4527, !dbg !2181
  br label %originalBB812

originalBB816alteredBB:                           ; preds = %originalBB816, %3205
  %4529 = load i8*, i8** %19, align 8, !dbg !2181
  %4530 = load i64, i64* %29, align 8, !dbg !2181
  %4531 = getelementptr inbounds i8, i8* %4529, i64 %4530, !dbg !2181
  store i8 39, i8* %4531, align 1, !dbg !2181
  br label %originalBB816

originalBB820alteredBB:                           ; preds = %originalBB820, %3225
  %4532 = load i64, i64* %29, align 8, !dbg !2184
  %_821 = shl i64 %4532, 1
  %_822 = sub i64 0, %4532
  %gen823 = add i64 %_822, 1
  %_824 = sub i64 %4532, 1
  %gen825 = mul i64 %_824, 1
  %_826 = sub i64 0, %4532
  %gen827 = add i64 %_826, 1
  %4533 = add i64 %4532, 1, !dbg !2184
  store i64 %4533, i64* %29, align 8, !dbg !2184
  br label %originalBB820

originalBB831alteredBB:                           ; preds = %originalBB831, %3245
  %4534 = load i64, i64* %29, align 8, !dbg !2185
  %4535 = load i64, i64* %20, align 8, !dbg !2185
  %4536 = icmp ult i64 %4534, %4535, !dbg !2185
  br label %originalBB831

originalBB835alteredBB:                           ; preds = %originalBB835, %3272
  store i8 0, i8* %36, align 1, !dbg !2179
  br label %originalBB835

originalBB839alteredBB:                           ; preds = %originalBB839, %3300
  %4537 = load i64, i64* %29, align 8, !dbg !2193
  %_840 = sub i64 %4537, 1
  %gen841 = mul i64 %_840, 1
  %_842 = shl i64 %4537, 1
  %_843 = sub i64 0, %4537
  %gen844 = add i64 %_843, 1
  %_845 = sub i64 %4537, 1
  %gen846 = mul i64 %_845, 1
  %_847 = sub i64 %4537, 1
  %gen848 = mul i64 %_847, 1
  %_849 = sub i64 0, %4537
  %gen850 = add i64 %_849, 1
  %4538 = add i64 %4537, 1, !dbg !2193
  store i64 %4538, i64* %29, align 8, !dbg !2193
  br label %originalBB839

originalBB854alteredBB:                           ; preds = %originalBB854, %3325
  br label %originalBB854

originalBB858alteredBB:                           ; preds = %originalBB858, %3342
  br label %originalBB858

originalBB862alteredBB:                           ; preds = %originalBB862, %3359
  %4539 = load i8, i8* %33, align 1, !dbg !2203
  %4540 = trunc i8 %4539 to i1, !dbg !2203
  br label %originalBB862

originalBB866alteredBB:                           ; preds = %originalBB866, %3381
  %4541 = load i8, i8* %35, align 1, !dbg !2209
  %4542 = trunc i8 %4541 to i1, !dbg !2209
  br label %originalBB866

originalBB870alteredBB:                           ; preds = %originalBB870, %3417
  %4543 = load i8, i8* %41, align 1, !dbg !2221
  %4544 = trunc i8 %4543 to i1, !dbg !2221
  br label %originalBB870

originalBB874alteredBB:                           ; preds = %originalBB874, %3437
  br label %originalBB874

originalBB878alteredBB:                           ; preds = %originalBB878, %3465
  br label %originalBB878

originalBB882alteredBB:                           ; preds = %originalBB882, %3482
  %4545 = load i64, i64* %29, align 8, !dbg !2235
  %4546 = load i64, i64* %20, align 8, !dbg !2235
  %4547 = icmp ult i64 %4545, %4546, !dbg !2235
  br label %originalBB882

originalBB886alteredBB:                           ; preds = %originalBB886, %3502
  %4548 = load i8*, i8** %19, align 8, !dbg !2235
  %4549 = load i64, i64* %29, align 8, !dbg !2235
  %4550 = getelementptr inbounds i8, i8* %4548, i64 %4549, !dbg !2235
  store i8 39, i8* %4550, align 1, !dbg !2235
  br label %originalBB886

originalBB890alteredBB:                           ; preds = %originalBB890, %3525
  br label %originalBB890

originalBB894alteredBB:                           ; preds = %originalBB894, %3546
  %4551 = load i8*, i8** %19, align 8, !dbg !2239
  %4552 = load i64, i64* %29, align 8, !dbg !2239
  %4553 = getelementptr inbounds i8, i8* %4551, i64 %4552, !dbg !2239
  store i8 36, i8* %4553, align 1, !dbg !2239
  br label %originalBB894

originalBB898alteredBB:                           ; preds = %originalBB898, %3569
  br label %originalBB898

originalBB902alteredBB:                           ; preds = %originalBB902, %3594
  %4554 = load i64, i64* %29, align 8, !dbg !2246
  %_903 = shl i64 %4554, 1
  %_904 = sub i64 0, %4554
  %gen905 = add i64 %_904, 1
  %_906 = sub i64 %4554, 1
  %gen907 = mul i64 %_906, 1
  %_908 = sub i64 0, %4554
  %gen909 = add i64 %_908, 1
  %_910 = shl i64 %4554, 1
  %_911 = sub i64 %4554, 1
  %gen912 = mul i64 %_911, 1
  %_913 = sub i64 0, %4554
  %gen914 = add i64 %_913, 1
  %_915 = sub i64 0, %4554
  %gen916 = add i64 %_915, 1
  %_917 = shl i64 %4554, 1
  %4555 = add i64 %4554, 1, !dbg !2246
  store i64 %4555, i64* %29, align 8, !dbg !2246
  br label %originalBB902

originalBB921alteredBB:                           ; preds = %originalBB921, %3628
  br label %originalBB921

originalBB925alteredBB:                           ; preds = %originalBB925, %3652
  %4556 = load i64, i64* %29, align 8, !dbg !2260
  %4557 = load i64, i64* %20, align 8, !dbg !2260
  %4558 = icmp ult i64 %4556, %4557, !dbg !2260
  br label %originalBB925

originalBB929alteredBB:                           ; preds = %originalBB929, %3676
  %4559 = load i64, i64* %29, align 8, !dbg !2263
  %_930 = sub i64 %4559, 1
  %gen931 = mul i64 %_930, 1
  %_932 = sub i64 0, %4559
  %gen933 = add i64 %_932, 1
  %_934 = sub i64 %4559, 1
  %gen935 = mul i64 %_934, 1
  %_936 = sub i64 %4559, 1
  %gen937 = mul i64 %_936, 1
  %4560 = add i64 %4559, 1, !dbg !2263
  store i64 %4560, i64* %29, align 8, !dbg !2263
  br label %originalBB929

originalBB941alteredBB:                           ; preds = %originalBB941, %3700
  %4561 = load i8*, i8** %19, align 8, !dbg !2264
  %4562 = load i64, i64* %29, align 8, !dbg !2264
  %4563 = getelementptr inbounds i8, i8* %4561, i64 %4562, !dbg !2264
  store i8 39, i8* %4563, align 1, !dbg !2264
  br label %originalBB941

originalBB945alteredBB:                           ; preds = %originalBB945, %3720
  %4564 = load i64, i64* %29, align 8, !dbg !2267
  %_946 = sub i64 %4564, 1
  %gen947 = mul i64 %_946, 1
  %_948 = sub i64 %4564, 1
  %gen949 = mul i64 %_948, 1
  %_950 = sub i64 0, %4564
  %gen951 = add i64 %_950, 1
  %_952 = sub i64 0, %4564
  %gen953 = add i64 %_952, 1
  %_954 = sub i64 %4564, 1
  %gen955 = mul i64 %_954, 1
  %_956 = sub i64 %4564, 1
  %gen957 = mul i64 %_956, 1
  %_958 = shl i64 %4564, 1
  %4565 = add i64 %4564, 1, !dbg !2267
  store i64 %4565, i64* %29, align 8, !dbg !2267
  br label %originalBB945

originalBB962alteredBB:                           ; preds = %originalBB962, %3739
  store i8 0, i8* %36, align 1, !dbg !2258
  br label %originalBB962

originalBB966alteredBB:                           ; preds = %originalBB966, %3756
  br label %originalBB966

originalBB970alteredBB:                           ; preds = %originalBB970, %3773
  br label %originalBB970

originalBB974alteredBB:                           ; preds = %originalBB974, %3790
  %4566 = load i64, i64* %29, align 8, !dbg !2269
  %4567 = load i64, i64* %20, align 8, !dbg !2269
  %4568 = trunc i64 %4566 to i32
  %_975 = shl i32 %4568, -2
  %_976 = sub i32 0, %4568
  %gen977 = add i32 %_976, -2
  %_978 = sub i32 %4568, -2
  %gen979 = mul i32 %_978, -2
  %_980 = shl i32 %4568, -2
  %_981 = sub i32 %4568, -2
  %gen982 = mul i32 %_981, -2
  %4569 = mul i32 %4568, -2
  %_983 = sub i32 %4569, -2
  %gen984 = mul i32 %_983, -2
  %_985 = sub i32 0, %4569
  %gen986 = add i32 %_985, -2
  %_987 = shl i32 %4569, -2
  %4570 = add i32 %4569, -2
  %4571 = trunc i64 %4567 to i32
  %4572 = mul i32 %4571, 2
  %_988 = shl i32 %4572, 3
  %_989 = shl i32 %4572, 3
  %_990 = sub i32 %4572, 3
  %gen991 = mul i32 %_990, 3
  %_992 = shl i32 %4572, 3
  %_993 = shl i32 %4572, 3
  %_994 = shl i32 %4572, 3
  %_995 = shl i32 %4572, 3
  %4573 = add i32 %4572, 3
  %_996 = sub i32 %4570, %4570
  %gen997 = mul i32 %_996, %4570
  %_998 = sub i32 %4570, %4570
  %gen999 = mul i32 %_998, %4570
  %_1000 = sub i32 %4570, %4570
  %gen1001 = mul i32 %_1000, %4570
  %_1002 = sub i32 0, %4570
  %gen1003 = add i32 %_1002, %4570
  %_1004 = sub i32 0, %4570
  %gen1005 = add i32 %_1004, %4570
  %_1006 = sub i32 0, %4570
  %gen1007 = add i32 %_1006, %4570
  %4574 = mul i32 %4570, %4570
  %_1008 = shl i32 %4573, %4573
  %4575 = mul i32 %4573, %4573
  %_1009 = sub i32 0, %4574
  %gen1010 = add i32 %_1009, %4575
  %_1011 = shl i32 %4574, %4575
  %4576 = add i32 %4574, %4575
  %_1012 = shl i32 %4570, %4573
  %_1013 = sub i32 %4570, %4573
  %gen1014 = mul i32 %_1013, %4573
  %_1015 = shl i32 %4570, %4573
  %4577 = mul i32 %4570, %4573
  %_1016 = sub i32 0, %4577
  %gen1017 = add i32 %_1016, 2
  %_1018 = sub i32 0, %4577
  %gen1019 = add i32 %_1018, 2
  %_1020 = sub i32 0, %4577
  %gen1021 = add i32 %_1020, 2
  %_1022 = shl i32 %4577, 2
  %4578 = mul i32 %4577, 2
  %_1023 = sub i32 %4576, %4578
  %gen1024 = mul i32 %_1023, %4578
  %_1025 = shl i32 %4576, %4578
  %_1026 = sub i32 %4576, %4578
  %gen1027 = mul i32 %_1026, %4578
  %_1028 = sub i32 %4576, %4578
  %gen1029 = mul i32 %_1028, %4578
  %_1030 = shl i32 %4576, %4578
  %_1031 = sub i32 %4576, %4578
  %gen1032 = mul i32 %_1031, %4578
  %_1033 = sub i32 0, %4576
  %gen1034 = add i32 %_1033, %4578
  %4579 = sub i32 %4576, %4578
  %_1035 = sub i32 %4579, 3
  %gen1036 = mul i32 %_1035, 3
  %_1037 = sub i32 0, %4579
  %gen1038 = add i32 %_1037, 3
  %_1039 = sub i32 %4579, 3
  %gen1040 = mul i32 %_1039, 3
  %4580 = mul i32 %4579, 3
  %_1041 = shl i32 %4580, -1
  %_1042 = shl i32 %4580, -1
  %_1043 = sub i32 0, %4580
  %gen1044 = add i32 %_1043, -1
  %_1045 = sub i32 0, %4580
  %gen1046 = add i32 %_1045, -1
  %_1047 = sub i32 0, %4580
  %gen1048 = add i32 %_1047, -1
  %4581 = add i32 %4580, -1
  %4582 = icmp eq i32 %4581, -4
  br label %originalBB974

originalBB1052alteredBB:                          ; preds = %originalBB1052, %3824
  br label %originalBB1052

originalBB1056alteredBB:                          ; preds = %originalBB1056, %3841
  %4583 = icmp ult i64 %3799, %3800, !dbg !2269
  br label %originalBB1056

originalBB1060alteredBB:                          ; preds = %originalBB1060, %3870
  store i8 0, i8* %38, align 1, !dbg !2276
  br label %originalBB1060

originalBB1064alteredBB:                          ; preds = %originalBB1064, %3888
  %4584 = load i64, i64* %28, align 8, !dbg !2279
  %_1065 = sub i64 %4584, 1
  %gen1066 = mul i64 %_1065, 1
  %4585 = add i64 %4584, 1, !dbg !2279
  store i64 %4585, i64* %28, align 8, !dbg !2279
  br label %originalBB1064

originalBB1070alteredBB:                          ; preds = %originalBB1070, %3907
  %4586 = load i64, i64* %29, align 8, !dbg !2283
  %4587 = icmp eq i64 %4586, 0, !dbg !2285
  br label %originalBB1070

originalBB1074alteredBB:                          ; preds = %originalBB1074, %3926
  %4588 = load i32, i32* %23, align 4, !dbg !2287
  %4589 = icmp eq i32 %4588, 2, !dbg !2288
  br label %originalBB1074

originalBB1078alteredBB:                          ; preds = %originalBB1078, %3948
  br label %originalBB1078

originalBB1082alteredBB:                          ; preds = %originalBB1082, %3965
  %4590 = load i32, i32* %23, align 4, !dbg !2293
  %4591 = icmp eq i32 %4590, 2, !dbg !2295
  br label %originalBB1082

originalBB1086alteredBB:                          ; preds = %originalBB1086, %4003
  %4592 = load i64, i64* %20, align 8, !dbg !2315
  %4593 = icmp ne i64 %4592, 0, !dbg !2315
  br label %originalBB1086

originalBB1090alteredBB:                          ; preds = %originalBB1090, %4022
  %4594 = load i64, i64* %30, align 8, !dbg !2318
  %4595 = icmp ne i64 %4594, 0, !dbg !2318
  br label %originalBB1090

originalBB1094alteredBB:                          ; preds = %originalBB1094, %4041
  %4596 = load i64, i64* %30, align 8, !dbg !2320
  store i64 %4596, i64* %20, align 8, !dbg !2322
  store i64 0, i64* %29, align 8, !dbg !2323
  br label %originalBB1094

originalBB1098alteredBB:                          ; preds = %originalBB1098, %4067
  br label %originalBB1098

originalBB1102alteredBB:                          ; preds = %originalBB1102, %4084
  %4597 = load i8*, i8** %31, align 8, !dbg !2332
  %4598 = load i8, i8* %4597, align 1, !dbg !2335
  %4599 = icmp ne i8 %4598, 0, !dbg !2336
  br label %originalBB1102

originalBB1106alteredBB:                          ; preds = %originalBB1106, %4104
  br label %originalBB1106

originalBB1110alteredBB:                          ; preds = %originalBB1110, %4131
  %4600 = load i64, i64* %29, align 8, !dbg !2341
  %_1111 = sub i64 0, %4600
  %gen1112 = add i64 %_1111, 1
  %_1113 = sub i64 0, %4600
  %gen1114 = add i64 %_1113, 1
  %_1115 = shl i64 %4600, 1
  %_1116 = shl i64 %4600, 1
  %_1117 = sub i64 %4600, 1
  %gen1118 = mul i64 %_1117, 1
  %_1119 = sub i64 %4600, 1
  %gen1120 = mul i64 %_1119, 1
  %_1121 = sub i64 %4600, 1
  %gen1122 = mul i64 %_1121, 1
  %4601 = add i64 %4600, 1, !dbg !2341
  store i64 %4601, i64* %29, align 8, !dbg !2341
  br label %originalBB1110

originalBB1126alteredBB:                          ; preds = %originalBB1126, %4150
  br label %originalBB1126

originalBB1130alteredBB:                          ; preds = %originalBB1130, %4167
  %4602 = load i8*, i8** %31, align 8, !dbg !2342
  %4603 = getelementptr inbounds i8, i8* %4602, i32 1, !dbg !2342
  store i8* %4603, i8** %31, align 8, !dbg !2342
  br label %originalBB1130

originalBB1134alteredBB:                          ; preds = %originalBB1134, %4197
  %4604 = load i32, i32* %23, align 4, !dbg !2358
  %4605 = icmp eq i32 %4604, 2, !dbg !2360
  br label %originalBB1134

originalBB1138alteredBB:                          ; preds = %originalBB1138, %4216
  %4606 = load i8, i8* %33, align 1, !dbg !2362
  %4607 = trunc i8 %4606 to i1, !dbg !2362
  br label %originalBB1138

originalBB1142alteredBB:                          ; preds = %originalBB1142, %4236
  %4608 = load i8*, i8** %19, align 8, !dbg !2366
  %4609 = load i64, i64* %20, align 8, !dbg !2367
  %4610 = load i8*, i8** %21, align 8, !dbg !2368
  %4611 = load i64, i64* %22, align 8, !dbg !2369
  %4612 = load i32, i32* %23, align 4, !dbg !2370
  %4613 = load i32, i32* %24, align 4, !dbg !2371
  %_1143 = sub i32 %4613, -3
  %gen1144 = mul i32 %_1143, -3
  %_1145 = shl i32 %4613, -3
  %_1146 = shl i32 %4613, -3
  %_1147 = shl i32 %4613, -3
  %_1148 = sub i32 0, %4613
  %gen1149 = add i32 %_1148, -3
  %_1150 = sub i32 %4613, -3
  %gen1151 = mul i32 %_1150, -3
  %4614 = and i32 %4613, -3, !dbg !2372
  %4615 = load i8*, i8** %26, align 8, !dbg !2373
  %4616 = load i8*, i8** %27, align 8, !dbg !2374
  %4617 = call i64 @quotearg_buffer_restyled(i8* %4608, i64 %4609, i8* %4610, i64 %4611, i32 %4612, i32 %4614, i32* null, i8* %4615, i8* %4616), !dbg !2375
  store i64 %4617, i64* %18, align 8, !dbg !2376
  br label %originalBB1142
}

; Function Attrs: nounwind
declare dso_local i64 @__ctype_get_mb_cur_max() #2

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @gettext_quote(i8*, i32) #4 !dbg !2429 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !2432, metadata !DIExpression()), !dbg !2433
  store i32 %1, i32* %5, align 4
  call void @llvm.dbg.declare(metadata i32* %5, metadata !2434, metadata !DIExpression()), !dbg !2435
  call void @llvm.dbg.declare(metadata i8** %6, metadata !2436, metadata !DIExpression()), !dbg !2437
  %8 = load i8*, i8** %4, align 8, !dbg !2438
  %9 = call i8* @gettext(i8* %8) #10, !dbg !2438
  store i8* %9, i8** %6, align 8, !dbg !2437
  call void @llvm.dbg.declare(metadata i8** %7, metadata !2439, metadata !DIExpression()), !dbg !2440
  %10 = load i8*, i8** %6, align 8, !dbg !2441
  %11 = load i8*, i8** %4, align 8, !dbg !2443
  %12 = icmp ne i8* %10, %11, !dbg !2444
  br i1 %12, label %13, label %31, !dbg !2445

13:                                               ; preds = %2
  %14 = load i32, i32* @x.37
  %15 = load i32, i32* @y.38
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %13, %originalBBalteredBB
  %22 = load i8*, i8** %6, align 8, !dbg !2446
  store i8* %22, i8** %3, align 8, !dbg !2447
  %23 = load i32, i32* @x.37
  %24 = load i32, i32* @y.38
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %93, !dbg !2447

31:                                               ; preds = %2
  %32 = call i8* @locale_charset(), !dbg !2448
  store i8* %32, i8** %7, align 8, !dbg !2449
  %33 = load i8*, i8** %7, align 8, !dbg !2450
  %34 = call i32 @c_strcasecmp(i8* %33, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13.66, i64 0, i64 0)) #13, !dbg !2450
  %35 = icmp eq i32 %34, 0, !dbg !2450
  br i1 %35, label %36, label %60, !dbg !2452

36:                                               ; preds = %31
  %37 = load i32, i32* @x.37
  %38 = load i32, i32* @y.38
  %39 = sub i32 %37, 1
  %40 = mul i32 %37, %39
  %41 = urem i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %38, 10
  %44 = or i1 %42, %43
  br i1 %44, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %36, %originalBB1alteredBB
  %45 = load i8*, i8** %4, align 8, !dbg !2453
  %46 = getelementptr inbounds i8, i8* %45, i64 0, !dbg !2453
  %47 = load i8, i8* %46, align 1, !dbg !2453
  %48 = sext i8 %47 to i32, !dbg !2453
  %49 = icmp eq i32 %48, 96, !dbg !2454
  %50 = zext i1 %49 to i64, !dbg !2453
  %51 = select i1 %49, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.67, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.68, i64 0, i64 0), !dbg !2453
  store i8* %51, i8** %3, align 8, !dbg !2455
  %52 = load i32, i32* @x.37
  %53 = load i32, i32* @y.38
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %93, !dbg !2455

60:                                               ; preds = %31
  %61 = load i8*, i8** %7, align 8, !dbg !2456
  %62 = call i32 @c_strcasecmp(i8* %61, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16.69, i64 0, i64 0)) #13, !dbg !2456
  %63 = icmp eq i32 %62, 0, !dbg !2456
  br i1 %63, label %64, label %88, !dbg !2458

64:                                               ; preds = %60
  %65 = load i32, i32* @x.37
  %66 = load i32, i32* @y.38
  %67 = sub i32 %65, 1
  %68 = mul i32 %65, %67
  %69 = urem i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %70, %71
  br i1 %72, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %64, %originalBB6alteredBB
  %73 = load i8*, i8** %4, align 8, !dbg !2459
  %74 = getelementptr inbounds i8, i8* %73, i64 0, !dbg !2459
  %75 = load i8, i8* %74, align 1, !dbg !2459
  %76 = sext i8 %75 to i32, !dbg !2459
  %77 = icmp eq i32 %76, 96, !dbg !2460
  %78 = zext i1 %77 to i64, !dbg !2459
  %79 = select i1 %77, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17.70, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.71, i64 0, i64 0), !dbg !2459
  store i8* %79, i8** %3, align 8, !dbg !2461
  %80 = load i32, i32* @x.37
  %81 = load i32, i32* @y.38
  %82 = sub i32 %80, 1
  %83 = mul i32 %80, %82
  %84 = urem i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = icmp slt i32 %81, 10
  %87 = or i1 %85, %86
  br i1 %87, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %93, !dbg !2461

88:                                               ; preds = %60
  %89 = load i32, i32* %5, align 4, !dbg !2462
  %90 = icmp eq i32 %89, 9, !dbg !2463
  %91 = zext i1 %90 to i64, !dbg !2462
  %92 = select i1 %90, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.63, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.65, i64 0, i64 0), !dbg !2462
  store i8* %92, i8** %3, align 8, !dbg !2464
  br label %93, !dbg !2464

93:                                               ; preds = %88, %originalBBpart28, %originalBBpart24, %originalBBpart2
  %94 = load i32, i32* @x.37
  %95 = load i32, i32* @y.38
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %93, %originalBB10alteredBB
  %102 = load i8*, i8** %3, align 8, !dbg !2465
  %103 = load i32, i32* @x.37
  %104 = load i32, i32* @y.38
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  ret i8* %102, !dbg !2465

originalBBalteredBB:                              ; preds = %originalBB, %13
  %111 = load i8*, i8** %6, align 8, !dbg !2446
  store i8* %111, i8** %3, align 8, !dbg !2447
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %36
  %112 = load i8*, i8** %4, align 8, !dbg !2453
  %113 = getelementptr inbounds i8, i8* %112, i64 0, !dbg !2453
  %114 = load i8, i8* %113, align 1, !dbg !2453
  %115 = sext i8 %114 to i32, !dbg !2453
  %116 = icmp eq i32 %115, 96, !dbg !2454
  %117 = zext i1 %116 to i64, !dbg !2453
  %118 = select i1 %116, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.67, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.68, i64 0, i64 0), !dbg !2453
  store i8* %118, i8** %3, align 8, !dbg !2455
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %64
  %119 = load i8*, i8** %4, align 8, !dbg !2459
  %120 = getelementptr inbounds i8, i8* %119, i64 0, !dbg !2459
  %121 = load i8, i8* %120, align 1, !dbg !2459
  %122 = sext i8 %121 to i32, !dbg !2459
  %123 = icmp eq i32 %122, 96, !dbg !2460
  %124 = zext i1 %123 to i64, !dbg !2459
  %125 = select i1 %123, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17.70, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.71, i64 0, i64 0), !dbg !2459
  store i8* %125, i8** %3, align 8, !dbg !2461
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %93
  %126 = load i8*, i8** %3, align 8, !dbg !2465
  br label %originalBB10
}

; Function Attrs: nounwind readonly
declare dso_local i32 @memcmp(i8*, i8*, i64) #7

; Function Attrs: nounwind readnone
declare dso_local i16** @__ctype_b_loc() #8

; Function Attrs: nounwind
declare dso_local i32 @iswprint(i32) #2

; Function Attrs: nounwind readonly
declare dso_local i32 @mbsinit(%struct.__mbstate_t*) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_style(i32, i8*) #4 !dbg !2466 {
  %3 = load i32, i32* @x.39
  %4 = load i32, i32* @y.40
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !2469, metadata !DIExpression()), !dbg !2470
  store i8* %1, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !2471, metadata !DIExpression()), !dbg !2472
  %13 = load i32, i32* %11, align 4, !dbg !2473
  %14 = mul i32 %0, -5
  %15 = add i32 %14, -3
  %16 = mul i32 %13, -3
  %17 = add i32 %16, -4
  %18 = mul i32 %13, 3
  %19 = add i32 %18, 1
  %20 = mul i32 %15, %15
  %21 = mul i32 %20, %20
  %22 = mul i32 %17, %17
  %23 = mul i32 %22, %22
  %24 = mul i32 %19, %19
  %25 = mul i32 %24, %24
  %26 = add i32 %21, %23
  %27 = sub i32 %26, %25
  %28 = mul i32 %27, 4
  %29 = add i32 %28, -5
  %30 = icmp eq i32 %29, -5
  %31 = load i32, i32* @x.39
  %32 = load i32, i32* @y.40
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %30, label %56, label %39

39:                                               ; preds = %originalBBpart2
  %40 = load i32, i32* @x.39
  %41 = load i32, i32* @y.40
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBB135, label %originalBB135alteredBB

originalBB135:                                    ; preds = %39, %originalBB135alteredBB
  %48 = load i32, i32* @x.39
  %49 = load i32, i32* @y.40
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBBpart2137, label %originalBB135alteredBB

originalBBpart2137:                               ; preds = %originalBB135
  ret i8* null

56:                                               ; preds = %originalBBpart2
  %57 = load i32, i32* @x.39
  %58 = load i32, i32* @y.40
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBB139, label %originalBB139alteredBB

originalBB139:                                    ; preds = %56, %originalBB139alteredBB
  %65 = load i8*, i8** %12, align 8, !dbg !2474
  %66 = call i8* @quotearg_n_style(i32 0, i32 %13, i8* %65), !dbg !2475
  %67 = load i32, i32* @x.39
  %68 = load i32, i32* @y.40
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBBpart2141, label %originalBB139alteredBB

originalBBpart2141:                               ; preds = %originalBB139
  ret i8* %66, !dbg !2476

originalBBalteredBB:                              ; preds = %originalBB, %2
  %75 = alloca i32, align 4
  %76 = alloca i8*, align 8
  store i32 %0, i32* %75, align 4
  call void @llvm.dbg.declare(metadata i32* %75, metadata !2477, metadata !DIExpression()), !dbg !2470
  store i8* %1, i8** %76, align 8
  call void @llvm.dbg.declare(metadata i8** %76, metadata !2509, metadata !DIExpression()), !dbg !2472
  %77 = load i32, i32* %75, align 4, !dbg !2473
  %_ = sub i32 0, %0
  %gen = add i32 %_, -5
  %_1 = sub i32 %0, -5
  %gen2 = mul i32 %_1, -5
  %_3 = sub i32 %0, -5
  %gen4 = mul i32 %_3, -5
  %_5 = sub i32 %0, -5
  %gen6 = mul i32 %_5, -5
  %_7 = sub i32 0, %0
  %gen8 = add i32 %_7, -5
  %78 = mul i32 %0, -5
  %_9 = sub i32 %78, -3
  %gen10 = mul i32 %_9, -3
  %_11 = shl i32 %78, -3
  %_12 = shl i32 %78, -3
  %_13 = sub i32 %78, -3
  %gen14 = mul i32 %_13, -3
  %79 = add i32 %78, -3
  %_15 = sub i32 0, %77
  %gen16 = add i32 %_15, -3
  %_17 = sub i32 0, %77
  %gen18 = add i32 %_17, -3
  %_19 = sub i32 %77, -3
  %gen20 = mul i32 %_19, -3
  %_21 = sub i32 %77, -3
  %gen22 = mul i32 %_21, -3
  %80 = mul i32 %77, -3
  %_23 = sub i32 0, %80
  %gen24 = add i32 %_23, -4
  %_25 = sub i32 0, %80
  %gen26 = add i32 %_25, -4
  %_27 = shl i32 %80, -4
  %_28 = sub i32 0, %80
  %gen29 = add i32 %_28, -4
  %_30 = sub i32 %80, -4
  %gen31 = mul i32 %_30, -4
  %_32 = sub i32 0, %80
  %gen33 = add i32 %_32, -4
  %_34 = sub i32 %80, -4
  %gen35 = mul i32 %_34, -4
  %81 = add i32 %80, -4
  %_36 = shl i32 %77, 3
  %82 = mul i32 %77, 3
  %_37 = sub i32 0, %82
  %gen38 = add i32 %_37, 1
  %_39 = shl i32 %82, 1
  %_40 = sub i32 %82, 1
  %gen41 = mul i32 %_40, 1
  %_42 = sub i32 0, %82
  %gen43 = add i32 %_42, 1
  %83 = add i32 %82, 1
  %_44 = sub i32 0, %79
  %gen45 = add i32 %_44, %79
  %_46 = sub i32 %79, %79
  %gen47 = mul i32 %_46, %79
  %_48 = sub i32 %79, %79
  %gen49 = mul i32 %_48, %79
  %_50 = sub i32 %79, %79
  %gen51 = mul i32 %_50, %79
  %84 = mul i32 %79, %79
  %_52 = sub i32 0, %84
  %gen53 = add i32 %_52, %84
  %_54 = sub i32 %84, %84
  %gen55 = mul i32 %_54, %84
  %_56 = sub i32 0, %84
  %gen57 = add i32 %_56, %84
  %_58 = sub i32 0, %84
  %gen59 = add i32 %_58, %84
  %_60 = sub i32 0, %84
  %gen61 = add i32 %_60, %84
  %85 = mul i32 %84, %84
  %_62 = shl i32 %81, %81
  %_63 = sub i32 0, %81
  %gen64 = add i32 %_63, %81
  %_65 = sub i32 0, %81
  %gen66 = add i32 %_65, %81
  %_67 = sub i32 %81, %81
  %gen68 = mul i32 %_67, %81
  %_69 = shl i32 %81, %81
  %86 = mul i32 %81, %81
  %_70 = sub i32 0, %86
  %gen71 = add i32 %_70, %86
  %_72 = shl i32 %86, %86
  %_73 = sub i32 0, %86
  %gen74 = add i32 %_73, %86
  %_75 = sub i32 %86, %86
  %gen76 = mul i32 %_75, %86
  %_77 = sub i32 0, %86
  %gen78 = add i32 %_77, %86
  %_79 = sub i32 0, %86
  %gen80 = add i32 %_79, %86
  %_81 = sub i32 0, %86
  %gen82 = add i32 %_81, %86
  %87 = mul i32 %86, %86
  %_83 = shl i32 %83, %83
  %_84 = sub i32 %83, %83
  %gen85 = mul i32 %_84, %83
  %_86 = sub i32 %83, %83
  %gen87 = mul i32 %_86, %83
  %_88 = shl i32 %83, %83
  %_89 = shl i32 %83, %83
  %_90 = sub i32 %83, %83
  %gen91 = mul i32 %_90, %83
  %_92 = shl i32 %83, %83
  %88 = mul i32 %83, %83
  %_93 = sub i32 %88, %88
  %gen94 = mul i32 %_93, %88
  %_95 = sub i32 %88, %88
  %gen96 = mul i32 %_95, %88
  %_97 = shl i32 %88, %88
  %_98 = shl i32 %88, %88
  %_99 = shl i32 %88, %88
  %89 = mul i32 %88, %88
  %_100 = sub i32 0, %85
  %gen101 = add i32 %_100, %87
  %_102 = shl i32 %85, %87
  %_103 = sub i32 0, %85
  %gen104 = add i32 %_103, %87
  %_105 = sub i32 0, %85
  %gen106 = add i32 %_105, %87
  %_107 = sub i32 %85, %87
  %gen108 = mul i32 %_107, %87
  %_109 = shl i32 %85, %87
  %_110 = shl i32 %85, %87
  %90 = add i32 %85, %87
  %_111 = sub i32 %90, %89
  %gen112 = mul i32 %_111, %89
  %_113 = sub i32 %90, %89
  %gen114 = mul i32 %_113, %89
  %_115 = shl i32 %90, %89
  %_116 = shl i32 %90, %89
  %_117 = sub i32 %90, %89
  %gen118 = mul i32 %_117, %89
  %91 = sub i32 %90, %89
  %_119 = shl i32 %91, 4
  %_120 = shl i32 %91, 4
  %_121 = shl i32 %91, 4
  %_122 = shl i32 %91, 4
  %92 = mul i32 %91, 4
  %_123 = shl i32 %92, -5
  %_124 = shl i32 %92, -5
  %_125 = sub i32 %92, -5
  %gen126 = mul i32 %_125, -5
  %_127 = sub i32 %92, -5
  %gen128 = mul i32 %_127, -5
  %_129 = sub i32 %92, -5
  %gen130 = mul i32 %_129, -5
  %_131 = sub i32 %92, -5
  %gen132 = mul i32 %_131, -5
  %_133 = sub i32 %92, -5
  %gen134 = mul i32 %_133, -5
  %93 = add i32 %92, -5
  %94 = icmp eq i32 %93, -5
  br label %originalBB

originalBB135alteredBB:                           ; preds = %originalBB135, %39
  br label %originalBB135

originalBB139alteredBB:                           ; preds = %originalBB139, %56
  %95 = load i8*, i8** %12, align 8, !dbg !2474
  %96 = call i8* @quotearg_n_style(i32 0, i32 %13, i8* %95), !dbg !2475
  br label %originalBB139
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_char_mem(i8*, i64, i8 signext) #4 !dbg !2510 {
  %4 = load i32, i32* @x.41
  %5 = load i32, i32* @y.42
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i8, align 1
  %15 = alloca %struct.quoting_options, align 8
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !2513, metadata !DIExpression()), !dbg !2514
  store i64 %1, i64* %13, align 8
  call void @llvm.dbg.declare(metadata i64* %13, metadata !2515, metadata !DIExpression()), !dbg !2516
  store i8 %2, i8* %14, align 1
  call void @llvm.dbg.declare(metadata i8* %14, metadata !2517, metadata !DIExpression()), !dbg !2518
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %15, metadata !2519, metadata !DIExpression()), !dbg !2520
  %16 = bitcast %struct.quoting_options* %15 to i8*, !dbg !2521
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i1 false), !dbg !2521
  %17 = load i8, i8* %14, align 1, !dbg !2522
  %18 = call i32 @set_char_quoting(%struct.quoting_options* %15, i8 signext %17, i32 1), !dbg !2523
  %19 = load i8*, i8** %12, align 8, !dbg !2524
  %20 = load i64, i64* %13, align 8, !dbg !2525
  %21 = call i8* @quotearg_n_options(i32 0, i8* %19, i64 %20, %struct.quoting_options* %15), !dbg !2526
  %22 = load i32, i32* @x.41
  %23 = load i32, i32* @y.42
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %21, !dbg !2527

originalBBalteredBB:                              ; preds = %originalBB, %3
  %30 = alloca i8*, align 8
  %31 = alloca i64, align 8
  %32 = alloca i8, align 1
  %33 = alloca %struct.quoting_options, align 8
  store i8* %0, i8** %30, align 8
  call void @llvm.dbg.declare(metadata i8** %30, metadata !2528, metadata !DIExpression()), !dbg !2514
  store i64 %1, i64* %31, align 8
  call void @llvm.dbg.declare(metadata i64* %31, metadata !2560, metadata !DIExpression()), !dbg !2516
  store i8 %2, i8* %32, align 1
  call void @llvm.dbg.declare(metadata i8* %32, metadata !2561, metadata !DIExpression()), !dbg !2518
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %33, metadata !2562, metadata !DIExpression()), !dbg !2520
  %34 = bitcast %struct.quoting_options* %33 to i8*, !dbg !2521
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %34, i8* align 8 bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i1 false), !dbg !2521
  %35 = load i8, i8* %32, align 1, !dbg !2522
  %36 = call i32 @set_char_quoting(%struct.quoting_options* %33, i8 signext %35, i32 1), !dbg !2523
  %37 = load i8*, i8** %30, align 8, !dbg !2524
  %38 = load i64, i64* %31, align 8, !dbg !2525
  %39 = call i8* @quotearg_n_options(i32 0, i8* %37, i64 %38, %struct.quoting_options* %33), !dbg !2526
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_char(i8*, i8 signext) #4 !dbg !2563 {
  %3 = alloca i8*, align 8
  %4 = alloca i8, align 1
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !2566, metadata !DIExpression()), !dbg !2567
  store i8 %1, i8* %4, align 1
  call void @llvm.dbg.declare(metadata i8* %4, metadata !2568, metadata !DIExpression()), !dbg !2569
  %5 = load i8*, i8** %3, align 8, !dbg !2570
  %6 = load i8, i8* %4, align 1, !dbg !2571
  %7 = call i8* @quotearg_char_mem(i8* %5, i64 -1, i8 signext %6), !dbg !2572
  ret i8* %7, !dbg !2573
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_colon(i8*) #4 !dbg !2574 {
  %2 = load i32, i32* @x.45
  %3 = load i32, i32* @y.46
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !2577, metadata !DIExpression()), !dbg !2578
  %11 = load i8*, i8** %10, align 8, !dbg !2579
  %12 = call i8* @quotearg_char(i8* %11, i8 signext 58), !dbg !2580
  %13 = load i32, i32* @x.45
  %14 = load i32, i32* @y.46
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %12, !dbg !2581

originalBBalteredBB:                              ; preds = %originalBB, %1
  %21 = alloca i8*, align 8
  store i8* %0, i8** %21, align 8
  call void @llvm.dbg.declare(metadata i8** %21, metadata !2582, metadata !DIExpression()), !dbg !2578
  %22 = load i8*, i8** %21, align 8, !dbg !2579
  %23 = call i8* @quotearg_char(i8* %22, i8 signext 58), !dbg !2580
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote_n_mem(i32, i8*, i64) #4 !dbg !2614 {
  %4 = load i32, i32* @x.47
  %5 = load i32, i32* @y.48
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  store i32 %0, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !2617, metadata !DIExpression()), !dbg !2618
  store i8* %1, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !2619, metadata !DIExpression()), !dbg !2620
  store i64 %2, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !2621, metadata !DIExpression()), !dbg !2622
  %15 = load i32, i32* %12, align 4, !dbg !2623
  %16 = load i8*, i8** %13, align 8, !dbg !2624
  %17 = load i64, i64* %14, align 8, !dbg !2625
  %18 = call i8* @quotearg_n_options(i32 %15, i8* %16, i64 %17, %struct.quoting_options* @quote_quoting_options), !dbg !2626
  %19 = load i32, i32* @x.47
  %20 = load i32, i32* @y.48
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %18, !dbg !2627

originalBBalteredBB:                              ; preds = %originalBB, %3
  %27 = alloca i32, align 4
  %28 = alloca i8*, align 8
  %29 = alloca i64, align 8
  store i32 %0, i32* %27, align 4
  call void @llvm.dbg.declare(metadata i32* %27, metadata !2628, metadata !DIExpression()), !dbg !2618
  store i8* %1, i8** %28, align 8
  call void @llvm.dbg.declare(metadata i8** %28, metadata !2660, metadata !DIExpression()), !dbg !2620
  store i64 %2, i64* %29, align 8
  call void @llvm.dbg.declare(metadata i64* %29, metadata !2661, metadata !DIExpression()), !dbg !2622
  %30 = load i32, i32* %27, align 4, !dbg !2623
  %31 = load i8*, i8** %28, align 8, !dbg !2624
  %32 = load i64, i64* %29, align 8, !dbg !2625
  %33 = call i8* @quotearg_n_options(i32 %30, i8* %31, i64 %32, %struct.quoting_options* @quote_quoting_options), !dbg !2626
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote_n(i32, i8*) #4 !dbg !2662 {
  %3 = load i32, i32* @x.49
  %4 = load i32, i32* @y.50
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !2665, metadata !DIExpression()), !dbg !2666
  store i8* %1, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !2667, metadata !DIExpression()), !dbg !2668
  %13 = load i32, i32* %11, align 4, !dbg !2669
  %14 = load i8*, i8** %12, align 8, !dbg !2670
  %15 = call i8* @quote_n_mem(i32 %13, i8* %14, i64 -1), !dbg !2671
  %16 = load i32, i32* @x.49
  %17 = load i32, i32* @y.50
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %15, !dbg !2672

originalBBalteredBB:                              ; preds = %originalBB, %2
  %24 = alloca i32, align 4
  %25 = alloca i8*, align 8
  store i32 %0, i32* %24, align 4
  call void @llvm.dbg.declare(metadata i32* %24, metadata !2673, metadata !DIExpression()), !dbg !2666
  store i8* %1, i8** %25, align 8
  call void @llvm.dbg.declare(metadata i8** %25, metadata !2705, metadata !DIExpression()), !dbg !2668
  %26 = load i32, i32* %24, align 4, !dbg !2669
  %27 = load i8*, i8** %25, align 8, !dbg !2670
  %28 = call i8* @quote_n_mem(i32 %26, i8* %27, i64 -1), !dbg !2671
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote(i8*) #4 !dbg !2706 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  call void @llvm.dbg.declare(metadata i8** %2, metadata !2709, metadata !DIExpression()), !dbg !2710
  %3 = load i8*, i8** %2, align 8, !dbg !2711
  %4 = call i8* @quote_n(i32 0, i8* %3), !dbg !2712
  ret i8* %4, !dbg !2713
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.dev_ino* @get_root_dev_ino(%struct.dev_ino*) #4 !dbg !2714 {
  %2 = load i32, i32* @x.53
  %3 = load i32, i32* @y.54
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct.dev_ino*, align 8
  %11 = alloca %struct.dev_ino*, align 8
  %12 = alloca %struct.stat, align 8
  store %struct.dev_ino* %0, %struct.dev_ino** %11, align 8
  call void @llvm.dbg.declare(metadata %struct.dev_ino** %11, metadata !2723, metadata !DIExpression()), !dbg !2724
  call void @llvm.dbg.declare(metadata %struct.stat* %12, metadata !2725, metadata !DIExpression()), !dbg !2747
  %13 = call i32 @lstat(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.80, i64 0, i64 0), %struct.stat* %12) #10, !dbg !2748
  %14 = icmp ne i32 %13, 0, !dbg !2748
  %15 = load i32, i32* @x.53
  %16 = load i32, i32* @y.54
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %14, label %23, label %40, !dbg !2750

23:                                               ; preds = %originalBBpart2
  %24 = load i32, i32* @x.53
  %25 = load i32, i32* @y.54
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %23, %originalBB1alteredBB
  store %struct.dev_ino* null, %struct.dev_ino** %10, align 8, !dbg !2751
  %32 = load i32, i32* @x.53
  %33 = load i32, i32* @y.54
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %66, !dbg !2751

40:                                               ; preds = %originalBBpart2
  %41 = load i32, i32* @x.53
  %42 = load i32, i32* @y.54
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %40, %originalBB6alteredBB
  %49 = getelementptr inbounds %struct.stat, %struct.stat* %12, i32 0, i32 1, !dbg !2752
  %50 = load i64, i64* %49, align 8, !dbg !2752
  %51 = load %struct.dev_ino*, %struct.dev_ino** %11, align 8, !dbg !2753
  %52 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %51, i32 0, i32 0, !dbg !2754
  store i64 %50, i64* %52, align 8, !dbg !2755
  %53 = getelementptr inbounds %struct.stat, %struct.stat* %12, i32 0, i32 0, !dbg !2756
  %54 = load i64, i64* %53, align 8, !dbg !2756
  %55 = load %struct.dev_ino*, %struct.dev_ino** %11, align 8, !dbg !2757
  %56 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %55, i32 0, i32 1, !dbg !2758
  store i64 %54, i64* %56, align 8, !dbg !2759
  %57 = load %struct.dev_ino*, %struct.dev_ino** %11, align 8, !dbg !2760
  store %struct.dev_ino* %57, %struct.dev_ino** %10, align 8, !dbg !2761
  %58 = load i32, i32* @x.53
  %59 = load i32, i32* @y.54
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %66, !dbg !2761

66:                                               ; preds = %originalBBpart28, %originalBBpart24
  %67 = load %struct.dev_ino*, %struct.dev_ino** %10, align 8, !dbg !2762
  ret %struct.dev_ino* %67, !dbg !2762

originalBBalteredBB:                              ; preds = %originalBB, %1
  %68 = alloca %struct.dev_ino*, align 8
  %69 = alloca %struct.dev_ino*, align 8
  %70 = alloca %struct.stat, align 8
  store %struct.dev_ino* %0, %struct.dev_ino** %69, align 8
  call void @llvm.dbg.declare(metadata %struct.dev_ino** %69, metadata !2763, metadata !DIExpression()), !dbg !2724
  call void @llvm.dbg.declare(metadata %struct.stat* %70, metadata !2773, metadata !DIExpression()), !dbg !2747
  %71 = call i32 @lstat(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.80, i64 0, i64 0), %struct.stat* %70) #10, !dbg !2748
  %72 = icmp ne i32 %71, 0, !dbg !2748
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %23
  store %struct.dev_ino* null, %struct.dev_ino** %10, align 8, !dbg !2751
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %40
  %73 = getelementptr inbounds %struct.stat, %struct.stat* %12, i32 0, i32 1, !dbg !2752
  %74 = load i64, i64* %73, align 8, !dbg !2752
  %75 = load %struct.dev_ino*, %struct.dev_ino** %11, align 8, !dbg !2753
  %76 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %75, i32 0, i32 0, !dbg !2754
  store i64 %74, i64* %76, align 8, !dbg !2755
  %77 = getelementptr inbounds %struct.stat, %struct.stat* %12, i32 0, i32 0, !dbg !2756
  %78 = load i64, i64* %77, align 8, !dbg !2756
  %79 = load %struct.dev_ino*, %struct.dev_ino** %11, align 8, !dbg !2757
  %80 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %79, i32 0, i32 1, !dbg !2758
  store i64 %78, i64* %80, align 8, !dbg !2759
  %81 = load %struct.dev_ino*, %struct.dev_ino** %11, align 8, !dbg !2760
  store %struct.dev_ino* %81, %struct.dev_ino** %10, align 8, !dbg !2761
  br label %originalBB6
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc_arn(%struct._IO_FILE*, i8*, i8*, i8*, i8**, i64) #4 !dbg !2795 {
  %7 = load i32, i32* @x.55
  %8 = load i32, i32* @y.56
  %9 = sub i32 %7, 1
  %10 = mul i32 %7, %9
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  %13 = icmp slt i32 %8, 10
  %14 = or i1 %12, %13
  br i1 %14, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %6, %originalBBalteredBB
  %15 = alloca %struct._IO_FILE*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca i8*, align 8
  %19 = alloca i8**, align 8
  %20 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %15, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %15, metadata !2852, metadata !DIExpression()), !dbg !2853
  store i8* %1, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !2854, metadata !DIExpression()), !dbg !2855
  store i8* %2, i8** %17, align 8
  call void @llvm.dbg.declare(metadata i8** %17, metadata !2856, metadata !DIExpression()), !dbg !2857
  store i8* %3, i8** %18, align 8
  call void @llvm.dbg.declare(metadata i8** %18, metadata !2858, metadata !DIExpression()), !dbg !2859
  store i8** %4, i8*** %19, align 8
  call void @llvm.dbg.declare(metadata i8*** %19, metadata !2860, metadata !DIExpression()), !dbg !2861
  store i64 %5, i64* %20, align 8
  call void @llvm.dbg.declare(metadata i64* %20, metadata !2862, metadata !DIExpression()), !dbg !2863
  %21 = load i8*, i8** %16, align 8, !dbg !2864
  %22 = icmp ne i8* %21, null, !dbg !2864
  %23 = load i32, i32* @x.55
  %24 = load i32, i32* @y.56
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %31, label %53, !dbg !2866

31:                                               ; preds = %originalBBpart2
  %32 = load i32, i32* @x.55
  %33 = load i32, i32* @y.56
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2867
  %41 = load i8*, i8** %16, align 8, !dbg !2868
  %42 = load i8*, i8** %17, align 8, !dbg !2869
  %43 = load i8*, i8** %18, align 8, !dbg !2870
  %44 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %40, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.81, i64 0, i64 0), i8* %41, i8* %42, i8* %43), !dbg !2871
  %45 = load i32, i32* @x.55
  %46 = load i32, i32* @y.56
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %74, !dbg !2871

53:                                               ; preds = %originalBBpart2
  %54 = load i32, i32* @x.55
  %55 = load i32, i32* @y.56
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %53, %originalBB6alteredBB
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2872
  %63 = load i8*, i8** %17, align 8, !dbg !2873
  %64 = load i8*, i8** %18, align 8, !dbg !2874
  %65 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %62, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.82, i64 0, i64 0), i8* %63, i8* %64), !dbg !2875
  %66 = load i32, i32* @x.55
  %67 = load i32, i32* @y.56
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %74

74:                                               ; preds = %originalBBpart28, %originalBBpart24
  %75 = load i32, i32* @x.55
  %76 = load i32, i32* @y.56
  %77 = sub i32 %75, 1
  %78 = mul i32 %75, %77
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %80, %81
  br i1 %82, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %74, %originalBB10alteredBB
  %83 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2876
  %84 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.83, i64 0, i64 0)) #10, !dbg !2877
  %85 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %83, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @version_etc_copyright, i64 0, i64 0), i8* %84, i32 2020), !dbg !2878
  %86 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2879
  %87 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.84, i64 0, i64 0), %struct._IO_FILE* %86), !dbg !2879
  %88 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2880
  %89 = call i8* @gettext(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.4.85, i64 0, i64 0)) #10, !dbg !2881
  %90 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %88, i8* %89, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5.86, i64 0, i64 0)), !dbg !2882
  %91 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2883
  %92 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.84, i64 0, i64 0), %struct._IO_FILE* %91), !dbg !2883
  %93 = load i64, i64* %20, align 8, !dbg !2884
  %94 = load i32, i32* @x.55
  %95 = load i32, i32* @y.56
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  switch i64 %93, label %354 [
    i64 0, label %102
    i64 1, label %103
    i64 2, label %126
    i64 3, label %136
    i64 4, label %165
    i64 5, label %181
    i64 6, label %216
    i64 7, label %254
    i64 8, label %279
    i64 9, label %307
  ], !dbg !2885

102:                                              ; preds = %originalBBpart212
  br label %401, !dbg !2886

103:                                              ; preds = %originalBBpart212
  %104 = load i32, i32* @x.55
  %105 = load i32, i32* @y.56
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %103, %originalBB14alteredBB
  %112 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2888
  %113 = call i8* @gettext(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.87, i64 0, i64 0)) #10, !dbg !2889
  %114 = load i8**, i8*** %19, align 8, !dbg !2890
  %115 = getelementptr inbounds i8*, i8** %114, i64 0, !dbg !2890
  %116 = load i8*, i8** %115, align 8, !dbg !2890
  %117 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %112, i8* %113, i8* %116), !dbg !2891
  %118 = load i32, i32* @x.55
  %119 = load i32, i32* @y.56
  %120 = sub i32 %118, 1
  %121 = mul i32 %118, %120
  %122 = urem i32 %121, 2
  %123 = icmp eq i32 %122, 0
  %124 = icmp slt i32 %119, 10
  %125 = or i1 %123, %124
  br i1 %125, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %401, !dbg !2892

126:                                              ; preds = %originalBBpart212
  %127 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2893
  %128 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7.88, i64 0, i64 0)) #10, !dbg !2894
  %129 = load i8**, i8*** %19, align 8, !dbg !2895
  %130 = getelementptr inbounds i8*, i8** %129, i64 0, !dbg !2895
  %131 = load i8*, i8** %130, align 8, !dbg !2895
  %132 = load i8**, i8*** %19, align 8, !dbg !2896
  %133 = getelementptr inbounds i8*, i8** %132, i64 1, !dbg !2896
  %134 = load i8*, i8** %133, align 8, !dbg !2896
  %135 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %127, i8* %128, i8* %131, i8* %134), !dbg !2897
  br label %401, !dbg !2898

136:                                              ; preds = %originalBBpart212
  %137 = load i32, i32* @x.55
  %138 = load i32, i32* @y.56
  %139 = sub i32 %137, 1
  %140 = mul i32 %137, %139
  %141 = urem i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %142, %143
  br i1 %144, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %136, %originalBB18alteredBB
  %145 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2899
  %146 = call i8* @gettext(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8.89, i64 0, i64 0)) #10, !dbg !2900
  %147 = load i8**, i8*** %19, align 8, !dbg !2901
  %148 = getelementptr inbounds i8*, i8** %147, i64 0, !dbg !2901
  %149 = load i8*, i8** %148, align 8, !dbg !2901
  %150 = load i8**, i8*** %19, align 8, !dbg !2902
  %151 = getelementptr inbounds i8*, i8** %150, i64 1, !dbg !2902
  %152 = load i8*, i8** %151, align 8, !dbg !2902
  %153 = load i8**, i8*** %19, align 8, !dbg !2903
  %154 = getelementptr inbounds i8*, i8** %153, i64 2, !dbg !2903
  %155 = load i8*, i8** %154, align 8, !dbg !2903
  %156 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %145, i8* %146, i8* %149, i8* %152, i8* %155), !dbg !2904
  %157 = load i32, i32* @x.55
  %158 = load i32, i32* @y.56
  %159 = sub i32 %157, 1
  %160 = mul i32 %157, %159
  %161 = urem i32 %160, 2
  %162 = icmp eq i32 %161, 0
  %163 = icmp slt i32 %158, 10
  %164 = or i1 %162, %163
  br i1 %164, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %401, !dbg !2905

165:                                              ; preds = %originalBBpart212
  %166 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2906
  %167 = call i8* @gettext(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.9.90, i64 0, i64 0)) #10, !dbg !2907
  %168 = load i8**, i8*** %19, align 8, !dbg !2908
  %169 = getelementptr inbounds i8*, i8** %168, i64 0, !dbg !2908
  %170 = load i8*, i8** %169, align 8, !dbg !2908
  %171 = load i8**, i8*** %19, align 8, !dbg !2909
  %172 = getelementptr inbounds i8*, i8** %171, i64 1, !dbg !2909
  %173 = load i8*, i8** %172, align 8, !dbg !2909
  %174 = load i8**, i8*** %19, align 8, !dbg !2910
  %175 = getelementptr inbounds i8*, i8** %174, i64 2, !dbg !2910
  %176 = load i8*, i8** %175, align 8, !dbg !2910
  %177 = load i8**, i8*** %19, align 8, !dbg !2911
  %178 = getelementptr inbounds i8*, i8** %177, i64 3, !dbg !2911
  %179 = load i8*, i8** %178, align 8, !dbg !2911
  %180 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %166, i8* %167, i8* %170, i8* %173, i8* %176, i8* %179), !dbg !2912
  br label %401, !dbg !2913

181:                                              ; preds = %originalBBpart212
  %182 = load i32, i32* @x.55
  %183 = load i32, i32* @y.56
  %184 = sub i32 %182, 1
  %185 = mul i32 %182, %184
  %186 = urem i32 %185, 2
  %187 = icmp eq i32 %186, 0
  %188 = icmp slt i32 %183, 10
  %189 = or i1 %187, %188
  br i1 %189, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %181, %originalBB22alteredBB
  %190 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2914
  %191 = call i8* @gettext(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.10.91, i64 0, i64 0)) #10, !dbg !2915
  %192 = load i8**, i8*** %19, align 8, !dbg !2916
  %193 = getelementptr inbounds i8*, i8** %192, i64 0, !dbg !2916
  %194 = load i8*, i8** %193, align 8, !dbg !2916
  %195 = load i8**, i8*** %19, align 8, !dbg !2917
  %196 = getelementptr inbounds i8*, i8** %195, i64 1, !dbg !2917
  %197 = load i8*, i8** %196, align 8, !dbg !2917
  %198 = load i8**, i8*** %19, align 8, !dbg !2918
  %199 = getelementptr inbounds i8*, i8** %198, i64 2, !dbg !2918
  %200 = load i8*, i8** %199, align 8, !dbg !2918
  %201 = load i8**, i8*** %19, align 8, !dbg !2919
  %202 = getelementptr inbounds i8*, i8** %201, i64 3, !dbg !2919
  %203 = load i8*, i8** %202, align 8, !dbg !2919
  %204 = load i8**, i8*** %19, align 8, !dbg !2920
  %205 = getelementptr inbounds i8*, i8** %204, i64 4, !dbg !2920
  %206 = load i8*, i8** %205, align 8, !dbg !2920
  %207 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %190, i8* %191, i8* %194, i8* %197, i8* %200, i8* %203, i8* %206), !dbg !2921
  %208 = load i32, i32* @x.55
  %209 = load i32, i32* @y.56
  %210 = sub i32 %208, 1
  %211 = mul i32 %208, %210
  %212 = urem i32 %211, 2
  %213 = icmp eq i32 %212, 0
  %214 = icmp slt i32 %209, 10
  %215 = or i1 %213, %214
  br i1 %215, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %401, !dbg !2922

216:                                              ; preds = %originalBBpart212
  %217 = load i32, i32* @x.55
  %218 = load i32, i32* @y.56
  %219 = sub i32 %217, 1
  %220 = mul i32 %217, %219
  %221 = urem i32 %220, 2
  %222 = icmp eq i32 %221, 0
  %223 = icmp slt i32 %218, 10
  %224 = or i1 %222, %223
  br i1 %224, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %216, %originalBB26alteredBB
  %225 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2923
  %226 = call i8* @gettext(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11.92, i64 0, i64 0)) #10, !dbg !2924
  %227 = load i8**, i8*** %19, align 8, !dbg !2925
  %228 = getelementptr inbounds i8*, i8** %227, i64 0, !dbg !2925
  %229 = load i8*, i8** %228, align 8, !dbg !2925
  %230 = load i8**, i8*** %19, align 8, !dbg !2926
  %231 = getelementptr inbounds i8*, i8** %230, i64 1, !dbg !2926
  %232 = load i8*, i8** %231, align 8, !dbg !2926
  %233 = load i8**, i8*** %19, align 8, !dbg !2927
  %234 = getelementptr inbounds i8*, i8** %233, i64 2, !dbg !2927
  %235 = load i8*, i8** %234, align 8, !dbg !2927
  %236 = load i8**, i8*** %19, align 8, !dbg !2928
  %237 = getelementptr inbounds i8*, i8** %236, i64 3, !dbg !2928
  %238 = load i8*, i8** %237, align 8, !dbg !2928
  %239 = load i8**, i8*** %19, align 8, !dbg !2929
  %240 = getelementptr inbounds i8*, i8** %239, i64 4, !dbg !2929
  %241 = load i8*, i8** %240, align 8, !dbg !2929
  %242 = load i8**, i8*** %19, align 8, !dbg !2930
  %243 = getelementptr inbounds i8*, i8** %242, i64 5, !dbg !2930
  %244 = load i8*, i8** %243, align 8, !dbg !2930
  %245 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %225, i8* %226, i8* %229, i8* %232, i8* %235, i8* %238, i8* %241, i8* %244), !dbg !2931
  %246 = load i32, i32* @x.55
  %247 = load i32, i32* @y.56
  %248 = sub i32 %246, 1
  %249 = mul i32 %246, %248
  %250 = urem i32 %249, 2
  %251 = icmp eq i32 %250, 0
  %252 = icmp slt i32 %247, 10
  %253 = or i1 %251, %252
  br i1 %253, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %401, !dbg !2932

254:                                              ; preds = %originalBBpart212
  %255 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2933
  %256 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.12.93, i64 0, i64 0)) #10, !dbg !2934
  %257 = load i8**, i8*** %19, align 8, !dbg !2935
  %258 = getelementptr inbounds i8*, i8** %257, i64 0, !dbg !2935
  %259 = load i8*, i8** %258, align 8, !dbg !2935
  %260 = load i8**, i8*** %19, align 8, !dbg !2936
  %261 = getelementptr inbounds i8*, i8** %260, i64 1, !dbg !2936
  %262 = load i8*, i8** %261, align 8, !dbg !2936
  %263 = load i8**, i8*** %19, align 8, !dbg !2937
  %264 = getelementptr inbounds i8*, i8** %263, i64 2, !dbg !2937
  %265 = load i8*, i8** %264, align 8, !dbg !2937
  %266 = load i8**, i8*** %19, align 8, !dbg !2938
  %267 = getelementptr inbounds i8*, i8** %266, i64 3, !dbg !2938
  %268 = load i8*, i8** %267, align 8, !dbg !2938
  %269 = load i8**, i8*** %19, align 8, !dbg !2939
  %270 = getelementptr inbounds i8*, i8** %269, i64 4, !dbg !2939
  %271 = load i8*, i8** %270, align 8, !dbg !2939
  %272 = load i8**, i8*** %19, align 8, !dbg !2940
  %273 = getelementptr inbounds i8*, i8** %272, i64 5, !dbg !2940
  %274 = load i8*, i8** %273, align 8, !dbg !2940
  %275 = load i8**, i8*** %19, align 8, !dbg !2941
  %276 = getelementptr inbounds i8*, i8** %275, i64 6, !dbg !2941
  %277 = load i8*, i8** %276, align 8, !dbg !2941
  %278 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %255, i8* %256, i8* %259, i8* %262, i8* %265, i8* %268, i8* %271, i8* %274, i8* %277), !dbg !2942
  br label %401, !dbg !2943

279:                                              ; preds = %originalBBpart212
  %280 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2944
  %281 = call i8* @gettext(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.13.94, i64 0, i64 0)) #10, !dbg !2945
  %282 = load i8**, i8*** %19, align 8, !dbg !2946
  %283 = getelementptr inbounds i8*, i8** %282, i64 0, !dbg !2946
  %284 = load i8*, i8** %283, align 8, !dbg !2946
  %285 = load i8**, i8*** %19, align 8, !dbg !2947
  %286 = getelementptr inbounds i8*, i8** %285, i64 1, !dbg !2947
  %287 = load i8*, i8** %286, align 8, !dbg !2947
  %288 = load i8**, i8*** %19, align 8, !dbg !2948
  %289 = getelementptr inbounds i8*, i8** %288, i64 2, !dbg !2948
  %290 = load i8*, i8** %289, align 8, !dbg !2948
  %291 = load i8**, i8*** %19, align 8, !dbg !2949
  %292 = getelementptr inbounds i8*, i8** %291, i64 3, !dbg !2949
  %293 = load i8*, i8** %292, align 8, !dbg !2949
  %294 = load i8**, i8*** %19, align 8, !dbg !2950
  %295 = getelementptr inbounds i8*, i8** %294, i64 4, !dbg !2950
  %296 = load i8*, i8** %295, align 8, !dbg !2950
  %297 = load i8**, i8*** %19, align 8, !dbg !2951
  %298 = getelementptr inbounds i8*, i8** %297, i64 5, !dbg !2951
  %299 = load i8*, i8** %298, align 8, !dbg !2951
  %300 = load i8**, i8*** %19, align 8, !dbg !2952
  %301 = getelementptr inbounds i8*, i8** %300, i64 6, !dbg !2952
  %302 = load i8*, i8** %301, align 8, !dbg !2952
  %303 = load i8**, i8*** %19, align 8, !dbg !2953
  %304 = getelementptr inbounds i8*, i8** %303, i64 7, !dbg !2953
  %305 = load i8*, i8** %304, align 8, !dbg !2953
  %306 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %280, i8* %281, i8* %284, i8* %287, i8* %290, i8* %293, i8* %296, i8* %299, i8* %302, i8* %305), !dbg !2954
  br label %401, !dbg !2955

307:                                              ; preds = %originalBBpart212
  %308 = load i32, i32* @x.55
  %309 = load i32, i32* @y.56
  %310 = sub i32 %308, 1
  %311 = mul i32 %308, %310
  %312 = urem i32 %311, 2
  %313 = icmp eq i32 %312, 0
  %314 = icmp slt i32 %309, 10
  %315 = or i1 %313, %314
  br i1 %315, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %307, %originalBB30alteredBB
  %316 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2956
  %317 = call i8* @gettext(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.14.95, i64 0, i64 0)) #10, !dbg !2957
  %318 = load i8**, i8*** %19, align 8, !dbg !2958
  %319 = getelementptr inbounds i8*, i8** %318, i64 0, !dbg !2958
  %320 = load i8*, i8** %319, align 8, !dbg !2958
  %321 = load i8**, i8*** %19, align 8, !dbg !2959
  %322 = getelementptr inbounds i8*, i8** %321, i64 1, !dbg !2959
  %323 = load i8*, i8** %322, align 8, !dbg !2959
  %324 = load i8**, i8*** %19, align 8, !dbg !2960
  %325 = getelementptr inbounds i8*, i8** %324, i64 2, !dbg !2960
  %326 = load i8*, i8** %325, align 8, !dbg !2960
  %327 = load i8**, i8*** %19, align 8, !dbg !2961
  %328 = getelementptr inbounds i8*, i8** %327, i64 3, !dbg !2961
  %329 = load i8*, i8** %328, align 8, !dbg !2961
  %330 = load i8**, i8*** %19, align 8, !dbg !2962
  %331 = getelementptr inbounds i8*, i8** %330, i64 4, !dbg !2962
  %332 = load i8*, i8** %331, align 8, !dbg !2962
  %333 = load i8**, i8*** %19, align 8, !dbg !2963
  %334 = getelementptr inbounds i8*, i8** %333, i64 5, !dbg !2963
  %335 = load i8*, i8** %334, align 8, !dbg !2963
  %336 = load i8**, i8*** %19, align 8, !dbg !2964
  %337 = getelementptr inbounds i8*, i8** %336, i64 6, !dbg !2964
  %338 = load i8*, i8** %337, align 8, !dbg !2964
  %339 = load i8**, i8*** %19, align 8, !dbg !2965
  %340 = getelementptr inbounds i8*, i8** %339, i64 7, !dbg !2965
  %341 = load i8*, i8** %340, align 8, !dbg !2965
  %342 = load i8**, i8*** %19, align 8, !dbg !2966
  %343 = getelementptr inbounds i8*, i8** %342, i64 8, !dbg !2966
  %344 = load i8*, i8** %343, align 8, !dbg !2966
  %345 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %316, i8* %317, i8* %320, i8* %323, i8* %326, i8* %329, i8* %332, i8* %335, i8* %338, i8* %341, i8* %344), !dbg !2967
  %346 = load i32, i32* @x.55
  %347 = load i32, i32* @y.56
  %348 = sub i32 %346, 1
  %349 = mul i32 %346, %348
  %350 = urem i32 %349, 2
  %351 = icmp eq i32 %350, 0
  %352 = icmp slt i32 %347, 10
  %353 = or i1 %351, %352
  br i1 %353, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %401, !dbg !2968

354:                                              ; preds = %originalBBpart212
  %355 = load i32, i32* @x.55
  %356 = load i32, i32* @y.56
  %357 = sub i32 %355, 1
  %358 = mul i32 %355, %357
  %359 = urem i32 %358, 2
  %360 = icmp eq i32 %359, 0
  %361 = icmp slt i32 %356, 10
  %362 = or i1 %360, %361
  br i1 %362, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %354, %originalBB34alteredBB
  %363 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2969
  %364 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.15.96, i64 0, i64 0)) #10, !dbg !2970
  %365 = load i8**, i8*** %19, align 8, !dbg !2971
  %366 = getelementptr inbounds i8*, i8** %365, i64 0, !dbg !2971
  %367 = load i8*, i8** %366, align 8, !dbg !2971
  %368 = load i8**, i8*** %19, align 8, !dbg !2972
  %369 = getelementptr inbounds i8*, i8** %368, i64 1, !dbg !2972
  %370 = load i8*, i8** %369, align 8, !dbg !2972
  %371 = load i8**, i8*** %19, align 8, !dbg !2973
  %372 = getelementptr inbounds i8*, i8** %371, i64 2, !dbg !2973
  %373 = load i8*, i8** %372, align 8, !dbg !2973
  %374 = load i8**, i8*** %19, align 8, !dbg !2974
  %375 = getelementptr inbounds i8*, i8** %374, i64 3, !dbg !2974
  %376 = load i8*, i8** %375, align 8, !dbg !2974
  %377 = load i8**, i8*** %19, align 8, !dbg !2975
  %378 = getelementptr inbounds i8*, i8** %377, i64 4, !dbg !2975
  %379 = load i8*, i8** %378, align 8, !dbg !2975
  %380 = load i8**, i8*** %19, align 8, !dbg !2976
  %381 = getelementptr inbounds i8*, i8** %380, i64 5, !dbg !2976
  %382 = load i8*, i8** %381, align 8, !dbg !2976
  %383 = load i8**, i8*** %19, align 8, !dbg !2977
  %384 = getelementptr inbounds i8*, i8** %383, i64 6, !dbg !2977
  %385 = load i8*, i8** %384, align 8, !dbg !2977
  %386 = load i8**, i8*** %19, align 8, !dbg !2978
  %387 = getelementptr inbounds i8*, i8** %386, i64 7, !dbg !2978
  %388 = load i8*, i8** %387, align 8, !dbg !2978
  %389 = load i8**, i8*** %19, align 8, !dbg !2979
  %390 = getelementptr inbounds i8*, i8** %389, i64 8, !dbg !2979
  %391 = load i8*, i8** %390, align 8, !dbg !2979
  %392 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %363, i8* %364, i8* %367, i8* %370, i8* %373, i8* %376, i8* %379, i8* %382, i8* %385, i8* %388, i8* %391), !dbg !2980
  %393 = load i32, i32* @x.55
  %394 = load i32, i32* @y.56
  %395 = sub i32 %393, 1
  %396 = mul i32 %393, %395
  %397 = urem i32 %396, 2
  %398 = icmp eq i32 %397, 0
  %399 = icmp slt i32 %394, 10
  %400 = or i1 %398, %399
  br i1 %400, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %401, !dbg !2981

401:                                              ; preds = %originalBBpart236, %originalBBpart232, %279, %254, %originalBBpart228, %originalBBpart224, %165, %originalBBpart220, %126, %originalBBpart216, %102
  ret void, !dbg !2982

originalBBalteredBB:                              ; preds = %originalBB, %6
  %402 = alloca %struct._IO_FILE*, align 8
  %403 = alloca i8*, align 8
  %404 = alloca i8*, align 8
  %405 = alloca i8*, align 8
  %406 = alloca i8**, align 8
  %407 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %402, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %402, metadata !2983, metadata !DIExpression()), !dbg !2853
  store i8* %1, i8** %403, align 8
  call void @llvm.dbg.declare(metadata i8** %403, metadata !3022, metadata !DIExpression()), !dbg !2855
  store i8* %2, i8** %404, align 8
  call void @llvm.dbg.declare(metadata i8** %404, metadata !3023, metadata !DIExpression()), !dbg !2857
  store i8* %3, i8** %405, align 8
  call void @llvm.dbg.declare(metadata i8** %405, metadata !3024, metadata !DIExpression()), !dbg !2859
  store i8** %4, i8*** %406, align 8
  call void @llvm.dbg.declare(metadata i8*** %406, metadata !3025, metadata !DIExpression()), !dbg !2861
  store i64 %5, i64* %407, align 8
  call void @llvm.dbg.declare(metadata i64* %407, metadata !3026, metadata !DIExpression()), !dbg !2863
  %408 = load i8*, i8** %403, align 8, !dbg !2864
  %409 = icmp ne i8* %408, null, !dbg !2864
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  %410 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2867
  %411 = load i8*, i8** %16, align 8, !dbg !2868
  %412 = load i8*, i8** %17, align 8, !dbg !2869
  %413 = load i8*, i8** %18, align 8, !dbg !2870
  %414 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %410, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.81, i64 0, i64 0), i8* %411, i8* %412, i8* %413), !dbg !2871
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %53
  %415 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2872
  %416 = load i8*, i8** %17, align 8, !dbg !2873
  %417 = load i8*, i8** %18, align 8, !dbg !2874
  %418 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %415, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.82, i64 0, i64 0), i8* %416, i8* %417), !dbg !2875
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %74
  %419 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2876
  %420 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.83, i64 0, i64 0)) #10, !dbg !2877
  %421 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %419, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @version_etc_copyright, i64 0, i64 0), i8* %420, i32 2020), !dbg !2878
  %422 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2879
  %423 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.84, i64 0, i64 0), %struct._IO_FILE* %422), !dbg !2879
  %424 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2880
  %425 = call i8* @gettext(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.4.85, i64 0, i64 0)) #10, !dbg !2881
  %426 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %424, i8* %425, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5.86, i64 0, i64 0)), !dbg !2882
  %427 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2883
  %428 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.84, i64 0, i64 0), %struct._IO_FILE* %427), !dbg !2883
  %429 = load i64, i64* %20, align 8, !dbg !2884
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %103
  %430 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2888
  %431 = call i8* @gettext(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.87, i64 0, i64 0)) #10, !dbg !2889
  %432 = load i8**, i8*** %19, align 8, !dbg !2890
  %433 = getelementptr inbounds i8*, i8** %432, i64 0, !dbg !2890
  %434 = load i8*, i8** %433, align 8, !dbg !2890
  %435 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %430, i8* %431, i8* %434), !dbg !2891
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %136
  %436 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2899
  %437 = call i8* @gettext(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8.89, i64 0, i64 0)) #10, !dbg !2900
  %438 = load i8**, i8*** %19, align 8, !dbg !2901
  %439 = getelementptr inbounds i8*, i8** %438, i64 0, !dbg !2901
  %440 = load i8*, i8** %439, align 8, !dbg !2901
  %441 = load i8**, i8*** %19, align 8, !dbg !2902
  %442 = getelementptr inbounds i8*, i8** %441, i64 1, !dbg !2902
  %443 = load i8*, i8** %442, align 8, !dbg !2902
  %444 = load i8**, i8*** %19, align 8, !dbg !2903
  %445 = getelementptr inbounds i8*, i8** %444, i64 2, !dbg !2903
  %446 = load i8*, i8** %445, align 8, !dbg !2903
  %447 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %436, i8* %437, i8* %440, i8* %443, i8* %446), !dbg !2904
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %181
  %448 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2914
  %449 = call i8* @gettext(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.10.91, i64 0, i64 0)) #10, !dbg !2915
  %450 = load i8**, i8*** %19, align 8, !dbg !2916
  %451 = getelementptr inbounds i8*, i8** %450, i64 0, !dbg !2916
  %452 = load i8*, i8** %451, align 8, !dbg !2916
  %453 = load i8**, i8*** %19, align 8, !dbg !2917
  %454 = getelementptr inbounds i8*, i8** %453, i64 1, !dbg !2917
  %455 = load i8*, i8** %454, align 8, !dbg !2917
  %456 = load i8**, i8*** %19, align 8, !dbg !2918
  %457 = getelementptr inbounds i8*, i8** %456, i64 2, !dbg !2918
  %458 = load i8*, i8** %457, align 8, !dbg !2918
  %459 = load i8**, i8*** %19, align 8, !dbg !2919
  %460 = getelementptr inbounds i8*, i8** %459, i64 3, !dbg !2919
  %461 = load i8*, i8** %460, align 8, !dbg !2919
  %462 = load i8**, i8*** %19, align 8, !dbg !2920
  %463 = getelementptr inbounds i8*, i8** %462, i64 4, !dbg !2920
  %464 = load i8*, i8** %463, align 8, !dbg !2920
  %465 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %448, i8* %449, i8* %452, i8* %455, i8* %458, i8* %461, i8* %464), !dbg !2921
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %216
  %466 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2923
  %467 = call i8* @gettext(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11.92, i64 0, i64 0)) #10, !dbg !2924
  %468 = load i8**, i8*** %19, align 8, !dbg !2925
  %469 = getelementptr inbounds i8*, i8** %468, i64 0, !dbg !2925
  %470 = load i8*, i8** %469, align 8, !dbg !2925
  %471 = load i8**, i8*** %19, align 8, !dbg !2926
  %472 = getelementptr inbounds i8*, i8** %471, i64 1, !dbg !2926
  %473 = load i8*, i8** %472, align 8, !dbg !2926
  %474 = load i8**, i8*** %19, align 8, !dbg !2927
  %475 = getelementptr inbounds i8*, i8** %474, i64 2, !dbg !2927
  %476 = load i8*, i8** %475, align 8, !dbg !2927
  %477 = load i8**, i8*** %19, align 8, !dbg !2928
  %478 = getelementptr inbounds i8*, i8** %477, i64 3, !dbg !2928
  %479 = load i8*, i8** %478, align 8, !dbg !2928
  %480 = load i8**, i8*** %19, align 8, !dbg !2929
  %481 = getelementptr inbounds i8*, i8** %480, i64 4, !dbg !2929
  %482 = load i8*, i8** %481, align 8, !dbg !2929
  %483 = load i8**, i8*** %19, align 8, !dbg !2930
  %484 = getelementptr inbounds i8*, i8** %483, i64 5, !dbg !2930
  %485 = load i8*, i8** %484, align 8, !dbg !2930
  %486 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %466, i8* %467, i8* %470, i8* %473, i8* %476, i8* %479, i8* %482, i8* %485), !dbg !2931
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %307
  %487 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2956
  %488 = call i8* @gettext(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.14.95, i64 0, i64 0)) #10, !dbg !2957
  %489 = load i8**, i8*** %19, align 8, !dbg !2958
  %490 = getelementptr inbounds i8*, i8** %489, i64 0, !dbg !2958
  %491 = load i8*, i8** %490, align 8, !dbg !2958
  %492 = load i8**, i8*** %19, align 8, !dbg !2959
  %493 = getelementptr inbounds i8*, i8** %492, i64 1, !dbg !2959
  %494 = load i8*, i8** %493, align 8, !dbg !2959
  %495 = load i8**, i8*** %19, align 8, !dbg !2960
  %496 = getelementptr inbounds i8*, i8** %495, i64 2, !dbg !2960
  %497 = load i8*, i8** %496, align 8, !dbg !2960
  %498 = load i8**, i8*** %19, align 8, !dbg !2961
  %499 = getelementptr inbounds i8*, i8** %498, i64 3, !dbg !2961
  %500 = load i8*, i8** %499, align 8, !dbg !2961
  %501 = load i8**, i8*** %19, align 8, !dbg !2962
  %502 = getelementptr inbounds i8*, i8** %501, i64 4, !dbg !2962
  %503 = load i8*, i8** %502, align 8, !dbg !2962
  %504 = load i8**, i8*** %19, align 8, !dbg !2963
  %505 = getelementptr inbounds i8*, i8** %504, i64 5, !dbg !2963
  %506 = load i8*, i8** %505, align 8, !dbg !2963
  %507 = load i8**, i8*** %19, align 8, !dbg !2964
  %508 = getelementptr inbounds i8*, i8** %507, i64 6, !dbg !2964
  %509 = load i8*, i8** %508, align 8, !dbg !2964
  %510 = load i8**, i8*** %19, align 8, !dbg !2965
  %511 = getelementptr inbounds i8*, i8** %510, i64 7, !dbg !2965
  %512 = load i8*, i8** %511, align 8, !dbg !2965
  %513 = load i8**, i8*** %19, align 8, !dbg !2966
  %514 = getelementptr inbounds i8*, i8** %513, i64 8, !dbg !2966
  %515 = load i8*, i8** %514, align 8, !dbg !2966
  %516 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %487, i8* %488, i8* %491, i8* %494, i8* %497, i8* %500, i8* %503, i8* %506, i8* %509, i8* %512, i8* %515), !dbg !2967
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %354
  %517 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2969
  %518 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.15.96, i64 0, i64 0)) #10, !dbg !2970
  %519 = load i8**, i8*** %19, align 8, !dbg !2971
  %520 = getelementptr inbounds i8*, i8** %519, i64 0, !dbg !2971
  %521 = load i8*, i8** %520, align 8, !dbg !2971
  %522 = load i8**, i8*** %19, align 8, !dbg !2972
  %523 = getelementptr inbounds i8*, i8** %522, i64 1, !dbg !2972
  %524 = load i8*, i8** %523, align 8, !dbg !2972
  %525 = load i8**, i8*** %19, align 8, !dbg !2973
  %526 = getelementptr inbounds i8*, i8** %525, i64 2, !dbg !2973
  %527 = load i8*, i8** %526, align 8, !dbg !2973
  %528 = load i8**, i8*** %19, align 8, !dbg !2974
  %529 = getelementptr inbounds i8*, i8** %528, i64 3, !dbg !2974
  %530 = load i8*, i8** %529, align 8, !dbg !2974
  %531 = load i8**, i8*** %19, align 8, !dbg !2975
  %532 = getelementptr inbounds i8*, i8** %531, i64 4, !dbg !2975
  %533 = load i8*, i8** %532, align 8, !dbg !2975
  %534 = load i8**, i8*** %19, align 8, !dbg !2976
  %535 = getelementptr inbounds i8*, i8** %534, i64 5, !dbg !2976
  %536 = load i8*, i8** %535, align 8, !dbg !2976
  %537 = load i8**, i8*** %19, align 8, !dbg !2977
  %538 = getelementptr inbounds i8*, i8** %537, i64 6, !dbg !2977
  %539 = load i8*, i8** %538, align 8, !dbg !2977
  %540 = load i8**, i8*** %19, align 8, !dbg !2978
  %541 = getelementptr inbounds i8*, i8** %540, i64 7, !dbg !2978
  %542 = load i8*, i8** %541, align 8, !dbg !2978
  %543 = load i8**, i8*** %19, align 8, !dbg !2979
  %544 = getelementptr inbounds i8*, i8** %543, i64 8, !dbg !2979
  %545 = load i8*, i8** %544, align 8, !dbg !2979
  %546 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %517, i8* %518, i8* %521, i8* %524, i8* %527, i8* %530, i8* %533, i8* %536, i8* %539, i8* %542, i8* %545), !dbg !2980
  br label %originalBB34
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc_va(%struct._IO_FILE*, i8*, i8*, i8*, %struct.__va_list_tag*) #4 !dbg !3027 {
  %6 = load i32, i32* @x.57
  %7 = load i32, i32* @y.58
  %8 = sub i32 %6, 1
  %9 = mul i32 %6, %8
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  %12 = icmp slt i32 %7, 10
  %13 = or i1 %11, %12
  br i1 %13, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %5, %originalBBalteredBB
  %14 = alloca %struct._IO_FILE*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca %struct.__va_list_tag*, align 8
  %19 = alloca i64, align 8
  %20 = alloca [10 x i8*], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %14, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %14, metadata !3037, metadata !DIExpression()), !dbg !3038
  store i8* %1, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !3039, metadata !DIExpression()), !dbg !3040
  store i8* %2, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !3041, metadata !DIExpression()), !dbg !3042
  store i8* %3, i8** %17, align 8
  call void @llvm.dbg.declare(metadata i8** %17, metadata !3043, metadata !DIExpression()), !dbg !3044
  store %struct.__va_list_tag* %4, %struct.__va_list_tag** %18, align 8
  call void @llvm.dbg.declare(metadata %struct.__va_list_tag** %18, metadata !3045, metadata !DIExpression()), !dbg !3046
  call void @llvm.dbg.declare(metadata i64* %19, metadata !3047, metadata !DIExpression()), !dbg !3048
  call void @llvm.dbg.declare(metadata [10 x i8*]* %20, metadata !3049, metadata !DIExpression()), !dbg !3051
  store i64 0, i64* %19, align 8, !dbg !3052
  %21 = load i32, i32* @x.57
  %22 = load i32, i32* @y.58
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %29, !dbg !3054

29:                                               ; preds = %137, %originalBBpart2
  %30 = load i32, i32* @x.57
  %31 = load i32, i32* @y.58
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %29, %originalBB1alteredBB
  %38 = load i64, i64* %19, align 8, !dbg !3055
  %39 = icmp ult i64 %38, 10, !dbg !3057
  %40 = load i32, i32* @x.57
  %41 = load i32, i32* @y.58
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %39, label %48, label %102, !dbg !3058

48:                                               ; preds = %originalBBpart24
  %49 = load %struct.__va_list_tag*, %struct.__va_list_tag** %18, align 8, !dbg !3059
  %50 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %49, i32 0, i32 0, !dbg !3059
  %51 = load i32, i32* %50, align 8, !dbg !3059
  %52 = icmp ule i32 %51, 40, !dbg !3059
  br i1 %52, label %53, label %59, !dbg !3059

53:                                               ; preds = %48
  %54 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %49, i32 0, i32 3, !dbg !3059
  %55 = load i8*, i8** %54, align 8, !dbg !3059
  %56 = getelementptr i8, i8* %55, i32 %51, !dbg !3059
  %57 = bitcast i8* %56 to i8**, !dbg !3059
  %58 = add i32 %51, 8, !dbg !3059
  store i32 %58, i32* %50, align 8, !dbg !3059
  br label %80, !dbg !3059

59:                                               ; preds = %48
  %60 = load i32, i32* @x.57
  %61 = load i32, i32* @y.58
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %59, %originalBB6alteredBB
  %68 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %49, i32 0, i32 2, !dbg !3059
  %69 = load i8*, i8** %68, align 8, !dbg !3059
  %70 = bitcast i8* %69 to i8**, !dbg !3059
  %71 = getelementptr i8, i8* %69, i32 8, !dbg !3059
  store i8* %71, i8** %68, align 8, !dbg !3059
  %72 = load i32, i32* @x.57
  %73 = load i32, i32* @y.58
  %74 = sub i32 %72, 1
  %75 = mul i32 %72, %74
  %76 = urem i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %77, %78
  br i1 %79, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %80, !dbg !3059

80:                                               ; preds = %originalBBpart28, %53
  %81 = phi i8** [ %57, %53 ], [ %70, %originalBBpart28 ], !dbg !3059
  %82 = load i32, i32* @x.57
  %83 = load i32, i32* @y.58
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %80, %originalBB10alteredBB
  %90 = load i8*, i8** %81, align 8, !dbg !3059
  %91 = load i64, i64* %19, align 8, !dbg !3060
  %92 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 %91, !dbg !3061
  store i8* %90, i8** %92, align 8, !dbg !3062
  %93 = icmp ne i8* %90, null, !dbg !3063
  %94 = load i32, i32* @x.57
  %95 = load i32, i32* @y.58
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %102

102:                                              ; preds = %originalBBpart212, %originalBBpart24
  %103 = phi i1 [ false, %originalBBpart24 ], [ %93, %originalBBpart212 ], !dbg !3064
  %104 = load i32, i32* @x.57
  %105 = load i32, i32* @y.58
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %102, %originalBB14alteredBB
  %112 = load i32, i32* @x.57
  %113 = load i32, i32* @y.58
  %114 = sub i32 %112, 1
  %115 = mul i32 %112, %114
  %116 = urem i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %113, 10
  %119 = or i1 %117, %118
  br i1 %119, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %103, label %120, label %140, !dbg !3065

120:                                              ; preds = %originalBBpart216
  %121 = load i32, i32* @x.57
  %122 = load i32, i32* @y.58
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %120, %originalBB18alteredBB
  %129 = load i32, i32* @x.57
  %130 = load i32, i32* @y.58
  %131 = sub i32 %129, 1
  %132 = mul i32 %129, %131
  %133 = urem i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %130, 10
  %136 = or i1 %134, %135
  br i1 %136, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %137, !dbg !3065

137:                                              ; preds = %originalBBpart220
  %138 = load i64, i64* %19, align 8, !dbg !3066
  %139 = add i64 %138, 1, !dbg !3066
  store i64 %139, i64* %19, align 8, !dbg !3066
  br label %29, !dbg !3067, !llvm.loop !3068

140:                                              ; preds = %originalBBpart216
  %141 = load i32, i32* @x.57
  %142 = load i32, i32* @y.58
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %140, %originalBB22alteredBB
  %149 = load %struct._IO_FILE*, %struct._IO_FILE** %14, align 8, !dbg !3070
  %150 = load i8*, i8** %15, align 8, !dbg !3071
  %151 = load i8*, i8** %16, align 8, !dbg !3072
  %152 = load i8*, i8** %17, align 8, !dbg !3073
  %153 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 0, !dbg !3074
  %154 = load i64, i64* %19, align 8, !dbg !3075
  call void @version_etc_arn(%struct._IO_FILE* %149, i8* %150, i8* %151, i8* %152, i8** %153, i64 %154), !dbg !3076
  %155 = load i32, i32* @x.57
  %156 = load i32, i32* @y.58
  %157 = sub i32 %155, 1
  %158 = mul i32 %155, %157
  %159 = urem i32 %158, 2
  %160 = icmp eq i32 %159, 0
  %161 = icmp slt i32 %156, 10
  %162 = or i1 %160, %161
  br i1 %162, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  ret void, !dbg !3077

originalBBalteredBB:                              ; preds = %originalBB, %5
  %163 = alloca %struct._IO_FILE*, align 8
  %164 = alloca i8*, align 8
  %165 = alloca i8*, align 8
  %166 = alloca i8*, align 8
  %167 = alloca %struct.__va_list_tag*, align 8
  %168 = alloca i64, align 8
  %169 = alloca [10 x i8*], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %163, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %163, metadata !3078, metadata !DIExpression()), !dbg !3038
  store i8* %1, i8** %164, align 8
  call void @llvm.dbg.declare(metadata i8** %164, metadata !3124, metadata !DIExpression()), !dbg !3040
  store i8* %2, i8** %165, align 8
  call void @llvm.dbg.declare(metadata i8** %165, metadata !3125, metadata !DIExpression()), !dbg !3042
  store i8* %3, i8** %166, align 8
  call void @llvm.dbg.declare(metadata i8** %166, metadata !3126, metadata !DIExpression()), !dbg !3044
  store %struct.__va_list_tag* %4, %struct.__va_list_tag** %167, align 8
  call void @llvm.dbg.declare(metadata %struct.__va_list_tag** %167, metadata !3127, metadata !DIExpression()), !dbg !3046
  call void @llvm.dbg.declare(metadata i64* %168, metadata !3128, metadata !DIExpression()), !dbg !3048
  call void @llvm.dbg.declare(metadata [10 x i8*]* %169, metadata !3129, metadata !DIExpression()), !dbg !3051
  store i64 0, i64* %168, align 8, !dbg !3052
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %29
  %170 = load i64, i64* %19, align 8, !dbg !3055
  %171 = icmp ult i64 %170, 10, !dbg !3057
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %59
  %172 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %49, i32 0, i32 2, !dbg !3059
  %173 = load i8*, i8** %172, align 8, !dbg !3059
  %174 = bitcast i8* %173 to i8**, !dbg !3059
  %175 = getelementptr i8, i8* %173, i32 8, !dbg !3059
  store i8* %175, i8** %172, align 8, !dbg !3059
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %80
  %176 = load i8*, i8** %81, align 8, !dbg !3059
  %177 = load i64, i64* %19, align 8, !dbg !3060
  %178 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 %177, !dbg !3061
  store i8* %176, i8** %178, align 8, !dbg !3062
  %179 = icmp ne i8* %176, null, !dbg !3063
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %102
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %120
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %140
  %180 = load %struct._IO_FILE*, %struct._IO_FILE** %14, align 8, !dbg !3070
  %181 = load i8*, i8** %15, align 8, !dbg !3071
  %182 = load i8*, i8** %16, align 8, !dbg !3072
  %183 = load i8*, i8** %17, align 8, !dbg !3073
  %184 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 0, !dbg !3074
  %185 = load i64, i64* %19, align 8, !dbg !3075
  call void @version_etc_arn(%struct._IO_FILE* %180, i8* %181, i8* %182, i8* %183, i8** %184, i64 %185), !dbg !3076
  br label %originalBB22
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc(%struct._IO_FILE*, i8*, i8*, i8*, ...) #4 !dbg !3130 {
  %5 = alloca %struct._IO_FILE*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca [1 x %struct.__va_list_tag], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %5, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %5, metadata !3133, metadata !DIExpression()), !dbg !3134
  store i8* %1, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !3135, metadata !DIExpression()), !dbg !3136
  store i8* %2, i8** %7, align 8
  call void @llvm.dbg.declare(metadata i8** %7, metadata !3137, metadata !DIExpression()), !dbg !3138
  store i8* %3, i8** %8, align 8
  call void @llvm.dbg.declare(metadata i8** %8, metadata !3139, metadata !DIExpression()), !dbg !3140
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %9, metadata !3141, metadata !DIExpression()), !dbg !3148
  %10 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %9, i64 0, i64 0, !dbg !3149
  %11 = bitcast %struct.__va_list_tag* %10 to i8*, !dbg !3149
  call void @llvm.va_start(i8* %11), !dbg !3149
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !3150
  %13 = load i8*, i8** %6, align 8, !dbg !3151
  %14 = load i8*, i8** %7, align 8, !dbg !3152
  %15 = load i8*, i8** %8, align 8, !dbg !3153
  %16 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %9, i64 0, i64 0, !dbg !3154
  call void @version_etc_va(%struct._IO_FILE* %12, i8* %13, i8* %14, i8* %15, %struct.__va_list_tag* %16), !dbg !3155
  %17 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %9, i64 0, i64 0, !dbg !3156
  %18 = bitcast %struct.__va_list_tag* %17 to i8*, !dbg !3156
  call void @llvm.va_end(i8* %18), !dbg !3156
  ret void, !dbg !3157
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #10

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #10

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xnmalloc(i64, i64) #4 !dbg !3158 {
  %3 = load i32, i32* @x.61
  %4 = load i32, i32* @y.62
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  store i64 %0, i64* %11, align 8
  call void @llvm.dbg.declare(metadata i64* %11, metadata !3162, metadata !DIExpression()), !dbg !3163
  store i64 %1, i64* %12, align 8
  call void @llvm.dbg.declare(metadata i64* %12, metadata !3164, metadata !DIExpression()), !dbg !3165
  %13 = load i64, i64* %12, align 8, !dbg !3166
  %14 = udiv i64 9223372036854775807, %13, !dbg !3166
  %15 = load i64, i64* %11, align 8, !dbg !3166
  %16 = icmp ult i64 %14, %15, !dbg !3166
  %17 = load i32, i32* @x.61
  %18 = load i32, i32* @y.62
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %16, label %25, label %26, !dbg !3168

25:                                               ; preds = %originalBBpart2
  call void @xalloc_die() #14, !dbg !3169
  unreachable, !dbg !3169

26:                                               ; preds = %originalBBpart2
  %27 = load i64, i64* %11, align 8, !dbg !3170
  %28 = load i64, i64* %12, align 8, !dbg !3171
  %29 = mul i64 %27, %28, !dbg !3172
  %30 = call noalias i8* @xmalloc(i64 %29), !dbg !3173
  ret i8* %30, !dbg !3174

originalBBalteredBB:                              ; preds = %originalBB, %2
  %31 = alloca i64, align 8
  %32 = alloca i64, align 8
  store i64 %0, i64* %31, align 8
  call void @llvm.dbg.declare(metadata i64* %31, metadata !3175, metadata !DIExpression()), !dbg !3163
  store i64 %1, i64* %32, align 8
  call void @llvm.dbg.declare(metadata i64* %32, metadata !3178, metadata !DIExpression()), !dbg !3165
  %33 = load i64, i64* %32, align 8, !dbg !3166
  %_ = shl i64 9223372036854775807, %33
  %_1 = sub i64 9223372036854775807, %33
  %gen = mul i64 %_1, %33
  %_2 = shl i64 9223372036854775807, %33
  %_3 = sub i64 0, 9223372036854775807
  %gen4 = add i64 %_3, %33
  %_5 = shl i64 9223372036854775807, %33
  %34 = udiv i64 9223372036854775807, %33, !dbg !3166
  %35 = load i64, i64* %31, align 8, !dbg !3166
  %36 = icmp ult i64 %34, %35, !dbg !3166
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xmalloc(i64) #4 !dbg !3179 {
  %2 = load i32, i32* @x.63
  %3 = load i32, i32* @y.64
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i64, align 8
  %11 = alloca i8*, align 8
  store i64 %0, i64* %10, align 8
  call void @llvm.dbg.declare(metadata i64* %10, metadata !3183, metadata !DIExpression()), !dbg !3184
  call void @llvm.dbg.declare(metadata i8** %11, metadata !3185, metadata !DIExpression()), !dbg !3186
  %12 = load i64, i64* %10, align 8, !dbg !3187
  %13 = call noalias i8* @malloc(i64 %12) #10, !dbg !3188
  store i8* %13, i8** %11, align 8, !dbg !3186
  %14 = load i8*, i8** %11, align 8, !dbg !3189
  %15 = icmp ne i8* %14, null, !dbg !3189
  %16 = load i32, i32* @x.63
  %17 = load i32, i32* @y.64
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %44, label %24, !dbg !3191

24:                                               ; preds = %originalBBpart2
  %25 = load i32, i32* @x.63
  %26 = load i32, i32* @y.64
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %24, %originalBB1alteredBB
  %33 = load i64, i64* %10, align 8, !dbg !3192
  %34 = icmp ne i64 %33, 0, !dbg !3193
  %35 = load i32, i32* @x.63
  %36 = load i32, i32* @y.64
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %34, label %43, label %44, !dbg !3194

43:                                               ; preds = %originalBBpart24
  call void @xalloc_die() #14, !dbg !3195
  unreachable, !dbg !3195

44:                                               ; preds = %originalBBpart24, %originalBBpart2
  %45 = load i32, i32* @x.63
  %46 = load i32, i32* @y.64
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %44, %originalBB6alteredBB
  %53 = load i8*, i8** %11, align 8, !dbg !3196
  %54 = load i32, i32* @x.63
  %55 = load i32, i32* @y.64
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  ret i8* %53, !dbg !3197

originalBBalteredBB:                              ; preds = %originalBB, %1
  %62 = alloca i64, align 8
  %63 = alloca i8*, align 8
  store i64 %0, i64* %62, align 8
  call void @llvm.dbg.declare(metadata i64* %62, metadata !3198, metadata !DIExpression()), !dbg !3184
  call void @llvm.dbg.declare(metadata i8** %63, metadata !3201, metadata !DIExpression()), !dbg !3186
  %64 = load i64, i64* %62, align 8, !dbg !3187
  %65 = call noalias i8* @malloc(i64 %64) #10, !dbg !3188
  store i8* %65, i8** %63, align 8, !dbg !3186
  %66 = load i8*, i8** %63, align 8, !dbg !3189
  %67 = icmp ne i8* %66, null, !dbg !3189
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %24
  %68 = load i64, i64* %10, align 8, !dbg !3192
  %69 = icmp ne i64 %68, 0, !dbg !3193
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %44
  %70 = load i8*, i8** %11, align 8, !dbg !3196
  br label %originalBB6
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @xrealloc(i8*, i64) #4 !dbg !3202 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !3205, metadata !DIExpression()), !dbg !3206
  store i64 %1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata i64* %5, metadata !3207, metadata !DIExpression()), !dbg !3208
  %6 = load i64, i64* %5, align 8, !dbg !3209
  %7 = icmp ne i64 %6, 0, !dbg !3209
  br i1 %7, label %29, label %8, !dbg !3211

8:                                                ; preds = %2
  %9 = load i8*, i8** %4, align 8, !dbg !3212
  %10 = icmp ne i8* %9, null, !dbg !3212
  br i1 %10, label %11, label %29, !dbg !3213

11:                                               ; preds = %8
  %12 = load i32, i32* @x.65
  %13 = load i32, i32* @y.66
  %14 = sub i32 %12, 1
  %15 = mul i32 %12, %14
  %16 = urem i32 %15, 2
  %17 = icmp eq i32 %16, 0
  %18 = icmp slt i32 %13, 10
  %19 = or i1 %17, %18
  br i1 %19, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %11, %originalBBalteredBB
  %20 = load i8*, i8** %4, align 8, !dbg !3214
  call void @free(i8* %20) #10, !dbg !3216
  store i8* null, i8** %3, align 8, !dbg !3217
  %21 = load i32, i32* @x.65
  %22 = load i32, i32* @y.66
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %89, !dbg !3217

29:                                               ; preds = %8, %2
  %30 = load i32, i32* @x.65
  %31 = load i32, i32* @y.66
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %29, %originalBB1alteredBB
  %38 = load i8*, i8** %4, align 8, !dbg !3218
  %39 = load i64, i64* %5, align 8, !dbg !3219
  %40 = call i8* @realloc(i8* %38, i64 %39) #10, !dbg !3220
  store i8* %40, i8** %4, align 8, !dbg !3221
  %41 = load i8*, i8** %4, align 8, !dbg !3222
  %42 = icmp ne i8* %41, null, !dbg !3222
  %43 = load i32, i32* @x.65
  %44 = load i32, i32* @y.66
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %42, label %87, label %51, !dbg !3224

51:                                               ; preds = %originalBBpart24
  %52 = load i32, i32* @x.65
  %53 = load i32, i32* @y.66
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %51, %originalBB6alteredBB
  %60 = load i64, i64* %5, align 8, !dbg !3225
  %61 = icmp ne i64 %60, 0, !dbg !3225
  %62 = load i32, i32* @x.65
  %63 = load i32, i32* @y.66
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %61, label %70, label %87, !dbg !3226

70:                                               ; preds = %originalBBpart28
  %71 = load i32, i32* @x.65
  %72 = load i32, i32* @y.66
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %70, %originalBB10alteredBB
  call void @xalloc_die() #14, !dbg !3227
  %79 = load i32, i32* @x.65
  %80 = load i32, i32* @y.66
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  unreachable, !dbg !3227

87:                                               ; preds = %originalBBpart28, %originalBBpart24
  %88 = load i8*, i8** %4, align 8, !dbg !3228
  store i8* %88, i8** %3, align 8, !dbg !3229
  br label %89, !dbg !3229

89:                                               ; preds = %87, %originalBBpart2
  %90 = load i32, i32* @x.65
  %91 = load i32, i32* @y.66
  %92 = sub i32 %90, 1
  %93 = mul i32 %90, %92
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %91, 10
  %97 = or i1 %95, %96
  br i1 %97, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %89, %originalBB14alteredBB
  %98 = load i8*, i8** %3, align 8, !dbg !3230
  %99 = load i32, i32* @x.65
  %100 = load i32, i32* @y.66
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  ret i8* %98, !dbg !3230

originalBBalteredBB:                              ; preds = %originalBB, %11
  %107 = load i8*, i8** %4, align 8, !dbg !3214
  call void @free(i8* %107) #10, !dbg !3216
  store i8* null, i8** %3, align 8, !dbg !3217
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %29
  %108 = load i8*, i8** %4, align 8, !dbg !3218
  %109 = load i64, i64* %5, align 8, !dbg !3219
  %110 = call i8* @realloc(i8* %108, i64 %109) #10, !dbg !3220
  store i8* %110, i8** %4, align 8, !dbg !3221
  %111 = load i8*, i8** %4, align 8, !dbg !3222
  %112 = icmp ne i8* %111, null, !dbg !3222
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %51
  %113 = load i64, i64* %5, align 8, !dbg !3225
  %114 = icmp ne i64 %113, 0, !dbg !3225
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %70
  call void @xalloc_die() #14, !dbg !3227
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %89
  %115 = load i8*, i8** %3, align 8, !dbg !3230
  br label %originalBB14
}

; Function Attrs: nounwind
declare dso_local i8* @realloc(i8*, i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xcharalloc(i64) #4 !dbg !3231 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !3232, metadata !DIExpression()), !dbg !3233
  %3 = load i64, i64* %2, align 8, !dbg !3234
  %4 = call noalias i8* @xmalloc(i64 %3), !dbg !3234
  ret i8* %4, !dbg !3235
}

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @xalloc_die() #0 !dbg !3236 {
  %1 = load i32, i32* @x.69
  %2 = load i32, i32* @y.70
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = load volatile i32, i32* @exit_failure, align 4, !dbg !3238
  %10 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.111, i64 0, i64 0)) #10, !dbg !3239
  call void (i32, i32, i8*, ...) @error(i32 %9, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.112, i64 0, i64 0), i8* %10), !dbg !3240
  call void @abort() #12, !dbg !3241
  %11 = load i32, i32* @x.69
  %12 = load i32, i32* @y.70
  %13 = sub i32 %11, 1
  %14 = mul i32 %11, %13
  %15 = urem i32 %14, 2
  %16 = icmp eq i32 %15, 0
  %17 = icmp slt i32 %12, 10
  %18 = or i1 %16, %17
  br i1 %18, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  unreachable, !dbg !3241

originalBBalteredBB:                              ; preds = %originalBB, %0
  %19 = load volatile i32, i32* @exit_failure, align 4, !dbg !3238
  %20 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.111, i64 0, i64 0)) #10, !dbg !3239
  call void (i32, i32, i8*, ...) @error(i32 %19, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.112, i64 0, i64 0), i8* %20), !dbg !3240
  call void @abort() #12, !dbg !3241
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @xgetcwd() #4 !dbg !3242 {
  %1 = load i32, i32* @x.71
  %2 = load i32, i32* @y.72
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %9, metadata !3244, metadata !DIExpression()), !dbg !3245
  %10 = call i8* @getcwd(i8* null, i64 0) #10, !dbg !3246
  store i8* %10, i8** %9, align 8, !dbg !3245
  %11 = load i8*, i8** %9, align 8, !dbg !3247
  %12 = icmp ne i8* %11, null, !dbg !3247
  %13 = load i32, i32* @x.71
  %14 = load i32, i32* @y.72
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %58, label %21, !dbg !3249

21:                                               ; preds = %originalBBpart2
  %22 = load i32, i32* @x.71
  %23 = load i32, i32* @y.72
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  %30 = call i32* @__errno_location() #15, !dbg !3250
  %31 = load i32, i32* %30, align 4, !dbg !3250
  %32 = icmp eq i32 %31, 12, !dbg !3251
  %33 = load i32, i32* @x.71
  %34 = load i32, i32* @y.72
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %32, label %41, label %58, !dbg !3252

41:                                               ; preds = %originalBBpart24
  %42 = load i32, i32* @x.71
  %43 = load i32, i32* @y.72
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %41, %originalBB6alteredBB
  call void @xalloc_die() #14, !dbg !3253
  %50 = load i32, i32* @x.71
  %51 = load i32, i32* @y.72
  %52 = sub i32 %50, 1
  %53 = mul i32 %50, %52
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %55, %56
  br i1 %57, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  unreachable, !dbg !3253

58:                                               ; preds = %originalBBpart24, %originalBBpart2
  %59 = load i32, i32* @x.71
  %60 = load i32, i32* @y.72
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %58, %originalBB10alteredBB
  %67 = load i8*, i8** %9, align 8, !dbg !3254
  %68 = load i32, i32* @x.71
  %69 = load i32, i32* @y.72
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  ret i8* %67, !dbg !3255

originalBBalteredBB:                              ; preds = %originalBB, %0
  %76 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %76, metadata !3256, metadata !DIExpression()), !dbg !3245
  %77 = call i8* @getcwd(i8* null, i64 0) #10, !dbg !3246
  store i8* %77, i8** %76, align 8, !dbg !3245
  %78 = load i8*, i8** %76, align 8, !dbg !3247
  %79 = icmp ne i8* %78, null, !dbg !3247
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  %80 = call i32* @__errno_location() #15, !dbg !3250
  %81 = load i32, i32* %80, align 4, !dbg !3250
  %82 = icmp eq i32 %81, 12, !dbg !3251
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %41
  call void @xalloc_die() #14, !dbg !3253
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %58
  %83 = load i8*, i8** %9, align 8, !dbg !3254
  br label %originalBB10
}

; Function Attrs: nounwind
declare dso_local i8* @getcwd(i8*, i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @rpl_mbrtowc(i32*, i8*, i64, %struct.__mbstate_t*) #4 !dbg !3259 {
  %5 = alloca i64, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %struct.__mbstate_t*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = alloca i8, align 1
  store i32* %0, i32** %6, align 8
  call void @llvm.dbg.declare(metadata i32** %6, metadata !3275, metadata !DIExpression()), !dbg !3276
  store i8* %1, i8** %7, align 8
  call void @llvm.dbg.declare(metadata i8** %7, metadata !3277, metadata !DIExpression()), !dbg !3278
  store i64 %2, i64* %8, align 8
  call void @llvm.dbg.declare(metadata i64* %8, metadata !3279, metadata !DIExpression()), !dbg !3280
  store %struct.__mbstate_t* %3, %struct.__mbstate_t** %9, align 8
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t** %9, metadata !3281, metadata !DIExpression()), !dbg !3282
  call void @llvm.dbg.declare(metadata i64* %10, metadata !3283, metadata !DIExpression()), !dbg !3284
  call void @llvm.dbg.declare(metadata i32* %11, metadata !3285, metadata !DIExpression()), !dbg !3286
  %13 = load i32*, i32** %6, align 8, !dbg !3287
  %14 = icmp ne i32* %13, null, !dbg !3287
  br i1 %14, label %32, label %15, !dbg !3289

15:                                               ; preds = %4
  %16 = load i32, i32* @x.73
  %17 = load i32, i32* @y.74
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %15, %originalBBalteredBB
  store i32* %11, i32** %6, align 8, !dbg !3290
  %24 = load i32, i32* @x.73
  %25 = load i32, i32* @y.74
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %32, !dbg !3291

32:                                               ; preds = %originalBBpart2, %4
  %33 = load i32, i32* @x.73
  %34 = load i32, i32* @y.74
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %32, %originalBB1alteredBB
  %41 = load i32*, i32** %6, align 8, !dbg !3292
  %42 = load i8*, i8** %7, align 8, !dbg !3293
  %43 = load i64, i64* %8, align 8, !dbg !3294
  %44 = load %struct.__mbstate_t*, %struct.__mbstate_t** %9, align 8, !dbg !3295
  %45 = call i64 @mbrtowc(i32* %41, i8* %42, i64 %43, %struct.__mbstate_t* %44) #10, !dbg !3296
  store i64 %45, i64* %10, align 8, !dbg !3297
  %46 = load i64, i64* %10, align 8, !dbg !3298
  %47 = icmp ule i64 -2, %46, !dbg !3300
  %48 = load i32, i32* @x.73
  %49 = load i32, i32* @y.74
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %47, label %56, label %99, !dbg !3301

56:                                               ; preds = %originalBBpart24
  %57 = load i32, i32* @x.73
  %58 = load i32, i32* @y.74
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %56, %originalBB6alteredBB
  %65 = load i64, i64* %8, align 8, !dbg !3302
  %66 = icmp ne i64 %65, 0, !dbg !3303
  %67 = load i32, i32* @x.73
  %68 = load i32, i32* @y.74
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %66, label %75, label %99, !dbg !3304

75:                                               ; preds = %originalBBpart28
  %76 = call zeroext i1 @hard_locale(i32 0), !dbg !3305
  br i1 %76, label %99, label %77, !dbg !3306

77:                                               ; preds = %75
  call void @llvm.dbg.declare(metadata i8* %12, metadata !3307, metadata !DIExpression()), !dbg !3309
  %78 = load i32, i32* @x.73
  %79 = load i32, i32* @y.74
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %77, %originalBB10alteredBB
  %86 = load i8*, i8** %7, align 8, !dbg !3310
  %87 = load i8, i8* %86, align 1, !dbg !3311
  store i8 %87, i8* %12, align 1, !dbg !3309
  %88 = load i8, i8* %12, align 1, !dbg !3312
  %89 = zext i8 %88 to i32, !dbg !3312
  %90 = load i32*, i32** %6, align 8, !dbg !3313
  store i32 %89, i32* %90, align 4, !dbg !3314
  store i64 1, i64* %5, align 8, !dbg !3315
  %91 = load i32, i32* @x.73
  %92 = load i32, i32* @y.74
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %101, !dbg !3315

99:                                               ; preds = %75, %originalBBpart28, %originalBBpart24
  %100 = load i64, i64* %10, align 8, !dbg !3316
  store i64 %100, i64* %5, align 8, !dbg !3317
  br label %101, !dbg !3317

101:                                              ; preds = %99, %originalBBpart212
  %102 = load i32, i32* @x.73
  %103 = load i32, i32* @y.74
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %101, %originalBB14alteredBB
  %110 = load i64, i64* %5, align 8, !dbg !3318
  %111 = load i32, i32* @x.73
  %112 = load i32, i32* @y.74
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  ret i64 %110, !dbg !3318

originalBBalteredBB:                              ; preds = %originalBB, %15
  store i32* %11, i32** %6, align 8, !dbg !3290
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %32
  %119 = load i32*, i32** %6, align 8, !dbg !3292
  %120 = load i8*, i8** %7, align 8, !dbg !3293
  %121 = load i64, i64* %8, align 8, !dbg !3294
  %122 = load %struct.__mbstate_t*, %struct.__mbstate_t** %9, align 8, !dbg !3295
  %123 = call i64 @mbrtowc(i32* %119, i8* %120, i64 %121, %struct.__mbstate_t* %122) #10, !dbg !3296
  store i64 %123, i64* %10, align 8, !dbg !3297
  %124 = load i64, i64* %10, align 8, !dbg !3298
  %125 = icmp ule i64 -2, %124, !dbg !3300
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %56
  %126 = load i64, i64* %8, align 8, !dbg !3302
  %127 = icmp ne i64 %126, 0, !dbg !3303
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %77
  %128 = load i8*, i8** %7, align 8, !dbg !3310
  %129 = load i8, i8* %128, align 1, !dbg !3311
  store i8 %129, i8* %12, align 1, !dbg !3309
  %130 = load i8, i8* %12, align 1, !dbg !3312
  %131 = zext i8 %130 to i32, !dbg !3312
  %132 = load i32*, i32** %6, align 8, !dbg !3313
  store i32 %131, i32* %132, align 4, !dbg !3314
  store i64 1, i64* %5, align 8, !dbg !3315
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %101
  %133 = load i64, i64* %5, align 8, !dbg !3318
  br label %originalBB14
}

; Function Attrs: nounwind
declare dso_local i64 @mbrtowc(i32*, i8*, i64, %struct.__mbstate_t*) #2

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @c_strcasecmp(i8*, i8*) #11 !dbg !3319 {
  %3 = load i32, i32* @x.75
  %4 = load i32, i32* @y.76
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8, align 1
  %17 = alloca i8, align 1
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !3323, metadata !DIExpression()), !dbg !3324
  store i8* %1, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !3325, metadata !DIExpression()), !dbg !3326
  call void @llvm.dbg.declare(metadata i8** %14, metadata !3327, metadata !DIExpression()), !dbg !3328
  %18 = load i8*, i8** %12, align 8, !dbg !3329
  store i8* %18, i8** %14, align 8, !dbg !3328
  call void @llvm.dbg.declare(metadata i8** %15, metadata !3330, metadata !DIExpression()), !dbg !3331
  %19 = load i8*, i8** %13, align 8, !dbg !3332
  store i8* %19, i8** %15, align 8, !dbg !3331
  call void @llvm.dbg.declare(metadata i8* %16, metadata !3333, metadata !DIExpression()), !dbg !3334
  call void @llvm.dbg.declare(metadata i8* %17, metadata !3335, metadata !DIExpression()), !dbg !3336
  %20 = load i8*, i8** %14, align 8, !dbg !3337
  %21 = load i8*, i8** %15, align 8, !dbg !3339
  %22 = icmp eq i8* %20, %21, !dbg !3340
  %23 = load i32, i32* @x.75
  %24 = load i32, i32* @y.76
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %31, label %48, !dbg !3341

31:                                               ; preds = %originalBBpart2
  %32 = load i32, i32* @x.75
  %33 = load i32, i32* @y.76
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  store i32 0, i32* %11, align 4, !dbg !3342
  %40 = load i32, i32* @x.75
  %41 = load i32, i32* @y.76
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %97, !dbg !3342

48:                                               ; preds = %originalBBpart2
  br label %49, !dbg !3343

49:                                               ; preds = %originalBBpart28, %48
  %50 = load i8*, i8** %14, align 8, !dbg !3344
  %51 = load i8, i8* %50, align 1, !dbg !3346
  %52 = zext i8 %51 to i32, !dbg !3346
  %53 = call i32 @c_tolower(i32 %52), !dbg !3347
  %54 = trunc i32 %53 to i8, !dbg !3347
  store i8 %54, i8* %16, align 1, !dbg !3348
  %55 = load i8*, i8** %15, align 8, !dbg !3349
  %56 = load i8, i8* %55, align 1, !dbg !3350
  %57 = zext i8 %56 to i32, !dbg !3350
  %58 = call i32 @c_tolower(i32 %57), !dbg !3351
  %59 = trunc i32 %58 to i8, !dbg !3351
  store i8 %59, i8* %17, align 1, !dbg !3352
  %60 = load i8, i8* %16, align 1, !dbg !3353
  %61 = zext i8 %60 to i32, !dbg !3353
  %62 = icmp eq i32 %61, 0, !dbg !3355
  br i1 %62, label %63, label %64, !dbg !3356

63:                                               ; preds = %49
  br label %91, !dbg !3357

64:                                               ; preds = %49
  %65 = load i8*, i8** %14, align 8, !dbg !3358
  %66 = getelementptr inbounds i8, i8* %65, i32 1, !dbg !3358
  store i8* %66, i8** %14, align 8, !dbg !3358
  %67 = load i8*, i8** %15, align 8, !dbg !3359
  %68 = getelementptr inbounds i8, i8* %67, i32 1, !dbg !3359
  store i8* %68, i8** %15, align 8, !dbg !3359
  br label %69, !dbg !3360

69:                                               ; preds = %64
  %70 = load i32, i32* @x.75
  %71 = load i32, i32* @y.76
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %69, %originalBB6alteredBB
  %78 = load i8, i8* %16, align 1, !dbg !3361
  %79 = zext i8 %78 to i32, !dbg !3361
  %80 = load i8, i8* %17, align 1, !dbg !3362
  %81 = zext i8 %80 to i32, !dbg !3362
  %82 = icmp eq i32 %79, %81, !dbg !3363
  %83 = load i32, i32* @x.75
  %84 = load i32, i32* @y.76
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %82, label %49, label %91, !dbg !3360, !llvm.loop !3364

91:                                               ; preds = %originalBBpart28, %63
  %92 = load i8, i8* %16, align 1, !dbg !3366
  %93 = zext i8 %92 to i32, !dbg !3366
  %94 = load i8, i8* %17, align 1, !dbg !3368
  %95 = zext i8 %94 to i32, !dbg !3368
  %96 = sub nsw i32 %93, %95, !dbg !3369
  store i32 %96, i32* %11, align 4, !dbg !3370
  br label %97, !dbg !3370

97:                                               ; preds = %91, %originalBBpart24
  %98 = load i32, i32* @x.75
  %99 = load i32, i32* @y.76
  %100 = sub i32 %98, 1
  %101 = mul i32 %98, %100
  %102 = urem i32 %101, 2
  %103 = icmp eq i32 %102, 0
  %104 = icmp slt i32 %99, 10
  %105 = or i1 %103, %104
  br i1 %105, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %97, %originalBB10alteredBB
  %106 = load i32, i32* %11, align 4, !dbg !3371
  %107 = load i32, i32* @x.75
  %108 = load i32, i32* @y.76
  %109 = sub i32 %107, 1
  %110 = mul i32 %107, %109
  %111 = urem i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %108, 10
  %114 = or i1 %112, %113
  br i1 %114, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  ret i32 %106, !dbg !3371

originalBBalteredBB:                              ; preds = %originalBB, %2
  %115 = alloca i32, align 4
  %116 = alloca i8*, align 8
  %117 = alloca i8*, align 8
  %118 = alloca i8*, align 8
  %119 = alloca i8*, align 8
  %120 = alloca i8, align 1
  %121 = alloca i8, align 1
  store i8* %0, i8** %116, align 8
  call void @llvm.dbg.declare(metadata i8** %116, metadata !3372, metadata !DIExpression()), !dbg !3324
  store i8* %1, i8** %117, align 8
  call void @llvm.dbg.declare(metadata i8** %117, metadata !3375, metadata !DIExpression()), !dbg !3326
  call void @llvm.dbg.declare(metadata i8** %118, metadata !3376, metadata !DIExpression()), !dbg !3328
  %122 = load i8*, i8** %116, align 8, !dbg !3329
  store i8* %122, i8** %118, align 8, !dbg !3328
  call void @llvm.dbg.declare(metadata i8** %119, metadata !3377, metadata !DIExpression()), !dbg !3331
  %123 = load i8*, i8** %117, align 8, !dbg !3332
  store i8* %123, i8** %119, align 8, !dbg !3331
  call void @llvm.dbg.declare(metadata i8* %120, metadata !3378, metadata !DIExpression()), !dbg !3334
  call void @llvm.dbg.declare(metadata i8* %121, metadata !3379, metadata !DIExpression()), !dbg !3336
  %124 = load i8*, i8** %118, align 8, !dbg !3337
  %125 = load i8*, i8** %119, align 8, !dbg !3339
  %126 = icmp eq i8* %124, %125, !dbg !3340
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  store i32 0, i32* %11, align 4, !dbg !3342
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %69
  %127 = load i8, i8* %16, align 1, !dbg !3361
  %128 = zext i8 %127 to i32, !dbg !3361
  %129 = load i8, i8* %17, align 1, !dbg !3362
  %130 = zext i8 %129 to i32, !dbg !3362
  %131 = icmp eq i32 %128, %130, !dbg !3363
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %97
  %132 = load i32, i32* %11, align 4, !dbg !3371
  br label %originalBB10
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @close_stream(%struct._IO_FILE*) #4 !dbg !3380 {
  %2 = load i32, i32* @x.77
  %3 = load i32, i32* @y.78
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca %struct._IO_FILE*, align 8
  %12 = alloca i8, align 1
  %13 = alloca i8, align 1
  %14 = alloca i8, align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %11, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %11, metadata !3418, metadata !DIExpression()), !dbg !3419
  call void @llvm.dbg.declare(metadata i8* %12, metadata !3420, metadata !DIExpression()), !dbg !3422
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3423
  %16 = call i64 @__fpending(%struct._IO_FILE* %15) #10, !dbg !3424
  %17 = icmp ne i64 %16, 0, !dbg !3425
  %18 = zext i1 %17 to i8, !dbg !3422
  store i8 %18, i8* %12, align 1, !dbg !3422
  call void @llvm.dbg.declare(metadata i8* %13, metadata !3426, metadata !DIExpression()), !dbg !3427
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3428
  %20 = call i32 @ferror_unlocked(%struct._IO_FILE* %19) #10, !dbg !3428
  %21 = icmp ne i32 %20, 0, !dbg !3429
  %22 = zext i1 %21 to i8, !dbg !3427
  store i8 %22, i8* %13, align 1, !dbg !3427
  call void @llvm.dbg.declare(metadata i8* %14, metadata !3430, metadata !DIExpression()), !dbg !3431
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3432
  %24 = call i32 @rpl_fclose(%struct._IO_FILE* %23), !dbg !3433
  %25 = icmp ne i32 %24, 0, !dbg !3434
  %26 = zext i1 %25 to i8, !dbg !3431
  store i8 %26, i8* %14, align 1, !dbg !3431
  %27 = load i8, i8* %13, align 1, !dbg !3435
  %28 = trunc i8 %27 to i1, !dbg !3435
  %29 = load i32, i32* @x.77
  %30 = load i32, i32* @y.78
  %31 = sub i32 %29, 1
  %32 = mul i32 %29, %31
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %34, %35
  br i1 %36, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %28, label %95, label %37, !dbg !3437

37:                                               ; preds = %originalBBpart2
  %38 = load i32, i32* @x.77
  %39 = load i32, i32* @y.78
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %37, %originalBB1alteredBB
  %46 = load i8, i8* %14, align 1, !dbg !3438
  %47 = trunc i8 %46 to i1, !dbg !3438
  %48 = load i32, i32* @x.77
  %49 = load i32, i32* @y.78
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %47, label %56, label %117, !dbg !3439

56:                                               ; preds = %originalBBpart24
  %57 = load i32, i32* @x.77
  %58 = load i32, i32* @y.78
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %56, %originalBB6alteredBB
  %65 = load i8, i8* %12, align 1, !dbg !3440
  %66 = trunc i8 %65 to i1, !dbg !3440
  %67 = load i32, i32* @x.77
  %68 = load i32, i32* @y.78
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %66, label %95, label %75, !dbg !3441

75:                                               ; preds = %originalBBpart28
  %76 = load i32, i32* @x.77
  %77 = load i32, i32* @y.78
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %75, %originalBB10alteredBB
  %84 = call i32* @__errno_location() #15, !dbg !3442
  %85 = load i32, i32* %84, align 4, !dbg !3442
  %86 = icmp ne i32 %85, 9, !dbg !3443
  %87 = load i32, i32* @x.77
  %88 = load i32, i32* @y.78
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %86, label %95, label %117, !dbg !3444

95:                                               ; preds = %originalBBpart212, %originalBBpart28, %originalBBpart2
  %96 = load i8, i8* %14, align 1, !dbg !3445
  %97 = trunc i8 %96 to i1, !dbg !3445
  br i1 %97, label %100, label %98, !dbg !3448

98:                                               ; preds = %95
  %99 = call i32* @__errno_location() #15, !dbg !3449
  store i32 0, i32* %99, align 4, !dbg !3450
  br label %100, !dbg !3449

100:                                              ; preds = %98, %95
  %101 = load i32, i32* @x.77
  %102 = load i32, i32* @y.78
  %103 = sub i32 %101, 1
  %104 = mul i32 %101, %103
  %105 = urem i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %102, 10
  %108 = or i1 %106, %107
  br i1 %108, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %100, %originalBB14alteredBB
  store i32 -1, i32* %10, align 4, !dbg !3451
  %109 = load i32, i32* @x.77
  %110 = load i32, i32* @y.78
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %134, !dbg !3451

117:                                              ; preds = %originalBBpart212, %originalBBpart24
  %118 = load i32, i32* @x.77
  %119 = load i32, i32* @y.78
  %120 = sub i32 %118, 1
  %121 = mul i32 %118, %120
  %122 = urem i32 %121, 2
  %123 = icmp eq i32 %122, 0
  %124 = icmp slt i32 %119, 10
  %125 = or i1 %123, %124
  br i1 %125, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %117, %originalBB18alteredBB
  store i32 0, i32* %10, align 4, !dbg !3452
  %126 = load i32, i32* @x.77
  %127 = load i32, i32* @y.78
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %134, !dbg !3452

134:                                              ; preds = %originalBBpart220, %originalBBpart216
  %135 = load i32, i32* %10, align 4, !dbg !3453
  ret i32 %135, !dbg !3453

originalBBalteredBB:                              ; preds = %originalBB, %1
  %136 = alloca i32, align 4
  %137 = alloca %struct._IO_FILE*, align 8
  %138 = alloca i8, align 1
  %139 = alloca i8, align 1
  %140 = alloca i8, align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %137, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %137, metadata !3454, metadata !DIExpression()), !dbg !3419
  call void @llvm.dbg.declare(metadata i8* %138, metadata !3493, metadata !DIExpression()), !dbg !3422
  %141 = load %struct._IO_FILE*, %struct._IO_FILE** %137, align 8, !dbg !3423
  %142 = call i64 @__fpending(%struct._IO_FILE* %141) #10, !dbg !3424
  %143 = icmp ne i64 %142, 0, !dbg !3425
  %144 = zext i1 %143 to i8, !dbg !3422
  store i8 %144, i8* %138, align 1, !dbg !3422
  call void @llvm.dbg.declare(metadata i8* %139, metadata !3494, metadata !DIExpression()), !dbg !3427
  %145 = load %struct._IO_FILE*, %struct._IO_FILE** %137, align 8, !dbg !3428
  %146 = call i32 @ferror_unlocked(%struct._IO_FILE* %145) #10, !dbg !3428
  %147 = icmp ne i32 %146, 0, !dbg !3429
  %148 = zext i1 %147 to i8, !dbg !3427
  store i8 %148, i8* %139, align 1, !dbg !3427
  call void @llvm.dbg.declare(metadata i8* %140, metadata !3495, metadata !DIExpression()), !dbg !3431
  %149 = load %struct._IO_FILE*, %struct._IO_FILE** %137, align 8, !dbg !3432
  %150 = call i32 @rpl_fclose(%struct._IO_FILE* %149), !dbg !3433
  %151 = icmp ne i32 %150, 0, !dbg !3434
  %152 = zext i1 %151 to i8, !dbg !3431
  store i8 %152, i8* %140, align 1, !dbg !3431
  %153 = load i8, i8* %139, align 1, !dbg !3435
  %154 = trunc i8 %153 to i1, !dbg !3435
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %37
  %155 = load i8, i8* %14, align 1, !dbg !3438
  %156 = trunc i8 %155 to i1, !dbg !3438
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %56
  %157 = load i8, i8* %12, align 1, !dbg !3440
  %158 = trunc i8 %157 to i1, !dbg !3440
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %75
  %159 = call i32* @__errno_location() #15, !dbg !3442
  %160 = load i32, i32* %159, align 4, !dbg !3442
  %161 = icmp ne i32 %160, 9, !dbg !3443
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %100
  store i32 -1, i32* %10, align 4, !dbg !3451
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %117
  store i32 0, i32* %10, align 4, !dbg !3452
  br label %originalBB18
}

; Function Attrs: nounwind
declare dso_local i64 @__fpending(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare dso_local i32 @ferror_unlocked(%struct._IO_FILE*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @hard_locale(i32) #4 !dbg !3496 {
  %2 = alloca i1, align 1
  %3 = alloca i32, align 4
  %4 = alloca [257 x i8], align 16
  store i32 %0, i32* %3, align 4
  call void @llvm.dbg.declare(metadata i32* %3, metadata !3500, metadata !DIExpression()), !dbg !3501
  call void @llvm.dbg.declare(metadata [257 x i8]* %4, metadata !3502, metadata !DIExpression()), !dbg !3506
  %5 = load i32, i32* %3, align 4, !dbg !3507
  %6 = getelementptr inbounds [257 x i8], [257 x i8]* %4, i64 0, i64 0, !dbg !3509
  %7 = call i32 @setlocale_null_r(i32 %5, i8* %6, i64 257), !dbg !3510
  %8 = icmp ne i32 %7, 0, !dbg !3510
  br i1 %8, label %9, label %26, !dbg !3511

9:                                                ; preds = %1
  %10 = load i32, i32* @x.79
  %11 = load i32, i32* @y.80
  %12 = sub i32 %10, 1
  %13 = mul i32 %10, %12
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  %16 = icmp slt i32 %11, 10
  %17 = or i1 %15, %16
  br i1 %17, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %9, %originalBBalteredBB
  store i1 false, i1* %2, align 1, !dbg !3512
  %18 = load i32, i32* @x.79
  %19 = load i32, i32* @y.80
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %37, !dbg !3512

26:                                               ; preds = %1
  %27 = getelementptr inbounds [257 x i8], [257 x i8]* %4, i64 0, i64 0, !dbg !3513
  %28 = call i32 @strcmp(i8* %27, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.123, i64 0, i64 0)) #13, !dbg !3514
  %29 = icmp eq i32 %28, 0, !dbg !3515
  br i1 %29, label %34, label %30, !dbg !3516

30:                                               ; preds = %26
  %31 = getelementptr inbounds [257 x i8], [257 x i8]* %4, i64 0, i64 0, !dbg !3517
  %32 = call i32 @strcmp(i8* %31, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.124, i64 0, i64 0)) #13, !dbg !3518
  %33 = icmp eq i32 %32, 0, !dbg !3519
  br label %34, !dbg !3516

34:                                               ; preds = %30, %26
  %35 = phi i1 [ true, %26 ], [ %33, %30 ]
  %36 = xor i1 %35, true, !dbg !3520
  store i1 %36, i1* %2, align 1, !dbg !3521
  br label %37, !dbg !3521

37:                                               ; preds = %34, %originalBBpart2
  %38 = load i32, i32* @x.79
  %39 = load i32, i32* @y.80
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %37, %originalBB1alteredBB
  %46 = load i1, i1* %2, align 1, !dbg !3522
  %47 = load i32, i32* @x.79
  %48 = load i32, i32* @y.80
  %49 = sub i32 %47, 1
  %50 = mul i32 %47, %49
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %52, %53
  br i1 %54, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  ret i1 %46, !dbg !3522

originalBBalteredBB:                              ; preds = %originalBB, %9
  store i1 false, i1* %2, align 1, !dbg !3512
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %37
  %55 = load i1, i1* %2, align 1, !dbg !3522
  br label %originalBB1
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @locale_charset() #4 !dbg !3523 {
  %1 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %1, metadata !3527, metadata !DIExpression()), !dbg !3528
  %2 = call i8* @nl_langinfo(i32 14) #10, !dbg !3529
  store i8* %2, i8** %1, align 8, !dbg !3530
  %3 = load i8*, i8** %1, align 8, !dbg !3531
  %4 = icmp eq i8* %3, null, !dbg !3533
  br i1 %4, label %5, label %6, !dbg !3534

5:                                                ; preds = %0
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.127, i64 0, i64 0), i8** %1, align 8, !dbg !3535
  br label %6, !dbg !3536

6:                                                ; preds = %5, %0
  %7 = load i8*, i8** %1, align 8, !dbg !3537
  %8 = getelementptr inbounds i8, i8* %7, i64 0, !dbg !3537
  %9 = load i8, i8* %8, align 1, !dbg !3537
  %10 = sext i8 %9 to i32, !dbg !3537
  %11 = icmp eq i32 %10, 0, !dbg !3541
  br i1 %11, label %12, label %13, !dbg !3542

12:                                               ; preds = %6
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.128, i64 0, i64 0), i8** %1, align 8, !dbg !3543
  br label %13, !dbg !3544

13:                                               ; preds = %12, %6
  %14 = load i8*, i8** %1, align 8, !dbg !3545
  ret i8* %14, !dbg !3546
}

; Function Attrs: nounwind
declare dso_local i8* @nl_langinfo(i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @setlocale_null_r(i32, i8* nonnull, i64) #4 !dbg !3547 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  store i32 %0, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !3551, metadata !DIExpression()), !dbg !3552
  store i8* %1, i8** %5, align 8
  call void @llvm.dbg.declare(metadata i8** %5, metadata !3553, metadata !DIExpression()), !dbg !3554
  store i64 %2, i64* %6, align 8
  call void @llvm.dbg.declare(metadata i64* %6, metadata !3555, metadata !DIExpression()), !dbg !3556
  %7 = load i32, i32* %4, align 4, !dbg !3557
  %8 = load i8*, i8** %5, align 8, !dbg !3558
  %9 = load i64, i64* %6, align 8, !dbg !3559
  %10 = call i32 @setlocale_null_unlocked(i32 %7, i8* %8, i64 %9), !dbg !3560
  ret i32 %10, !dbg !3561
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @setlocale_null_unlocked(i32, i8*, i64) #4 !dbg !3562 {
  %4 = load i32, i32* @x.85
  %5 = load i32, i32* @y.86
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i64, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i64, align 8
  store i32 %0, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !3563, metadata !DIExpression()), !dbg !3564
  store i8* %1, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !3565, metadata !DIExpression()), !dbg !3566
  store i64 %2, i64* %15, align 8
  %18 = mul i32 %0, -3
  %19 = add i32 %18, 4
  %20 = trunc i64 %2 to i32
  %21 = mul i32 %20, -2
  %22 = add i32 %21, 1
  %23 = mul i32 %19, %19
  %24 = mul i32 %22, %22
  %25 = add i32 %23, %24
  %26 = mul i32 %19, %22
  %27 = mul i32 %26, 2
  %28 = sub i32 %25, %27
  %29 = mul i32 %28, -3
  %30 = add i32 %29, -1
  %31 = icmp eq i32 %30, 2
  %32 = load i32, i32* @x.85
  %33 = load i32, i32* @y.86
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %31, label %40, label %57

40:                                               ; preds = %originalBBpart2
  %41 = load i32, i32* @x.85
  %42 = load i32, i32* @y.86
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBB77, label %originalBB77alteredBB

originalBB77:                                     ; preds = %40, %originalBB77alteredBB
  %49 = load i32, i32* @x.85
  %50 = load i32, i32* @y.86
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBBpart279, label %originalBB77alteredBB

originalBBpart279:                                ; preds = %originalBB77
  ret i32 0

57:                                               ; preds = %originalBBpart2
  call void @llvm.dbg.declare(metadata i64* %15, metadata !3567, metadata !DIExpression()), !dbg !3568
  call void @llvm.dbg.declare(metadata i8** %16, metadata !3569, metadata !DIExpression()), !dbg !3570
  %58 = load i32, i32* @x.85
  %59 = load i32, i32* @y.86
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBB81, label %originalBB81alteredBB

originalBB81:                                     ; preds = %57, %originalBB81alteredBB
  %66 = load i32, i32* %13, align 4, !dbg !3571
  %67 = call i8* @setlocale_null_androidfix(i32 %66), !dbg !3572
  store i8* %67, i8** %16, align 8, !dbg !3570
  %68 = load i8*, i8** %16, align 8, !dbg !3573
  %69 = icmp eq i8* %68, null, !dbg !3575
  %70 = load i32, i32* @x.85
  %71 = load i32, i32* @y.86
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBBpart283, label %originalBB81alteredBB

originalBBpart283:                                ; preds = %originalBB81
  br i1 %69, label %78, label %117, !dbg !3576

78:                                               ; preds = %originalBBpart283
  %79 = load i32, i32* @x.85
  %80 = load i32, i32* @y.86
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %originalBB85, label %originalBB85alteredBB

originalBB85:                                     ; preds = %78, %originalBB85alteredBB
  %87 = load i64, i64* %15, align 8, !dbg !3577
  %88 = icmp ugt i64 %87, 0, !dbg !3580
  %89 = load i32, i32* @x.85
  %90 = load i32, i32* @y.86
  %91 = sub i32 %89, 1
  %92 = mul i32 %89, %91
  %93 = urem i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %94, %95
  br i1 %96, label %originalBBpart287, label %originalBB85alteredBB

originalBBpart287:                                ; preds = %originalBB85
  br i1 %88, label %97, label %116, !dbg !3581

97:                                               ; preds = %originalBBpart287
  %98 = load i32, i32* @x.85
  %99 = load i32, i32* @y.86
  %100 = sub i32 %98, 1
  %101 = mul i32 %98, %100
  %102 = urem i32 %101, 2
  %103 = icmp eq i32 %102, 0
  %104 = icmp slt i32 %99, 10
  %105 = or i1 %103, %104
  br i1 %105, label %originalBB89, label %originalBB89alteredBB

originalBB89:                                     ; preds = %97, %originalBB89alteredBB
  %106 = load i8*, i8** %14, align 8, !dbg !3582
  %107 = getelementptr inbounds i8, i8* %106, i64 0, !dbg !3582
  store i8 0, i8* %107, align 1, !dbg !3583
  %108 = load i32, i32* @x.85
  %109 = load i32, i32* @y.86
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBBpart291, label %originalBB89alteredBB

originalBBpart291:                                ; preds = %originalBB89
  br label %116, !dbg !3582

116:                                              ; preds = %originalBBpart291, %originalBBpart287
  store i32 22, i32* %12, align 4, !dbg !3584
  br label %189, !dbg !3584

117:                                              ; preds = %originalBBpart283
  call void @llvm.dbg.declare(metadata i64* %17, metadata !3585, metadata !DIExpression()), !dbg !3587
  %118 = load i8*, i8** %16, align 8, !dbg !3588
  %119 = call i64 @strlen(i8* %118) #13, !dbg !3589
  store i64 %119, i64* %17, align 8, !dbg !3587
  %120 = load i64, i64* %17, align 8, !dbg !3590
  %121 = load i64, i64* %15, align 8, !dbg !3592
  %122 = icmp ult i64 %120, %121, !dbg !3593
  br i1 %122, label %123, label %144, !dbg !3594

123:                                              ; preds = %117
  %124 = load i32, i32* @x.85
  %125 = load i32, i32* @y.86
  %126 = sub i32 %124, 1
  %127 = mul i32 %124, %126
  %128 = urem i32 %127, 2
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %125, 10
  %131 = or i1 %129, %130
  br i1 %131, label %originalBB93, label %originalBB93alteredBB

originalBB93:                                     ; preds = %123, %originalBB93alteredBB
  %132 = load i8*, i8** %14, align 8, !dbg !3595
  %133 = load i8*, i8** %16, align 8, !dbg !3597
  %134 = load i64, i64* %17, align 8, !dbg !3598
  %135 = add i64 %134, 1, !dbg !3599
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %132, i8* align 1 %133, i64 %135, i1 false), !dbg !3600
  store i32 0, i32* %12, align 4, !dbg !3601
  %136 = load i32, i32* @x.85
  %137 = load i32, i32* @y.86
  %138 = sub i32 %136, 1
  %139 = mul i32 %136, %138
  %140 = urem i32 %139, 2
  %141 = icmp eq i32 %140, 0
  %142 = icmp slt i32 %137, 10
  %143 = or i1 %141, %142
  br i1 %143, label %originalBBpart2102, label %originalBB93alteredBB

originalBBpart2102:                               ; preds = %originalBB93
  br label %189, !dbg !3601

144:                                              ; preds = %117
  %145 = load i32, i32* @x.85
  %146 = load i32, i32* @y.86
  %147 = sub i32 %145, 1
  %148 = mul i32 %145, %147
  %149 = urem i32 %148, 2
  %150 = icmp eq i32 %149, 0
  %151 = icmp slt i32 %146, 10
  %152 = or i1 %150, %151
  br i1 %152, label %originalBB104, label %originalBB104alteredBB

originalBB104:                                    ; preds = %144, %originalBB104alteredBB
  %153 = load i64, i64* %15, align 8, !dbg !3602
  %154 = icmp ugt i64 %153, 0, !dbg !3605
  %155 = load i32, i32* @x.85
  %156 = load i32, i32* @y.86
  %157 = sub i32 %155, 1
  %158 = mul i32 %155, %157
  %159 = urem i32 %158, 2
  %160 = icmp eq i32 %159, 0
  %161 = icmp slt i32 %156, 10
  %162 = or i1 %160, %161
  br i1 %162, label %originalBBpart2106, label %originalBB104alteredBB

originalBBpart2106:                               ; preds = %originalBB104
  br i1 %154, label %163, label %172, !dbg !3606

163:                                              ; preds = %originalBBpart2106
  %164 = load i8*, i8** %14, align 8, !dbg !3607
  %165 = load i8*, i8** %16, align 8, !dbg !3609
  %166 = load i64, i64* %15, align 8, !dbg !3610
  %167 = sub i64 %166, 1, !dbg !3611
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %164, i8* align 1 %165, i64 %167, i1 false), !dbg !3612
  %168 = load i8*, i8** %14, align 8, !dbg !3613
  %169 = load i64, i64* %15, align 8, !dbg !3614
  %170 = sub i64 %169, 1, !dbg !3615
  %171 = getelementptr inbounds i8, i8* %168, i64 %170, !dbg !3613
  store i8 0, i8* %171, align 1, !dbg !3616
  br label %172, !dbg !3617

172:                                              ; preds = %163, %originalBBpart2106
  %173 = load i32, i32* @x.85
  %174 = load i32, i32* @y.86
  %175 = sub i32 %173, 1
  %176 = mul i32 %173, %175
  %177 = urem i32 %176, 2
  %178 = icmp eq i32 %177, 0
  %179 = icmp slt i32 %174, 10
  %180 = or i1 %178, %179
  br i1 %180, label %originalBB108, label %originalBB108alteredBB

originalBB108:                                    ; preds = %172, %originalBB108alteredBB
  store i32 34, i32* %12, align 4, !dbg !3618
  %181 = load i32, i32* @x.85
  %182 = load i32, i32* @y.86
  %183 = sub i32 %181, 1
  %184 = mul i32 %181, %183
  %185 = urem i32 %184, 2
  %186 = icmp eq i32 %185, 0
  %187 = icmp slt i32 %182, 10
  %188 = or i1 %186, %187
  br i1 %188, label %originalBBpart2110, label %originalBB108alteredBB

originalBBpart2110:                               ; preds = %originalBB108
  br label %189, !dbg !3618

189:                                              ; preds = %originalBBpart2110, %originalBBpart2102, %116
  %190 = load i32, i32* @x.85
  %191 = load i32, i32* @y.86
  %192 = sub i32 %190, 1
  %193 = mul i32 %190, %192
  %194 = urem i32 %193, 2
  %195 = icmp eq i32 %194, 0
  %196 = icmp slt i32 %191, 10
  %197 = or i1 %195, %196
  br i1 %197, label %originalBB112, label %originalBB112alteredBB

originalBB112:                                    ; preds = %189, %originalBB112alteredBB
  %198 = load i32, i32* %12, align 4, !dbg !3619
  %199 = load i32, i32* @x.85
  %200 = load i32, i32* @y.86
  %201 = sub i32 %199, 1
  %202 = mul i32 %199, %201
  %203 = urem i32 %202, 2
  %204 = icmp eq i32 %203, 0
  %205 = icmp slt i32 %200, 10
  %206 = or i1 %204, %205
  br i1 %206, label %originalBBpart2114, label %originalBB112alteredBB

originalBBpart2114:                               ; preds = %originalBB112
  ret i32 %198, !dbg !3619

originalBBalteredBB:                              ; preds = %originalBB, %3
  %207 = alloca i32, align 4
  %208 = alloca i32, align 4
  %209 = alloca i8*, align 8
  %210 = alloca i64, align 8
  %211 = alloca i8*, align 8
  %212 = alloca i64, align 8
  store i32 %0, i32* %208, align 4
  call void @llvm.dbg.declare(metadata i32* %208, metadata !3620, metadata !DIExpression()), !dbg !3564
  store i8* %1, i8** %209, align 8
  call void @llvm.dbg.declare(metadata i8** %209, metadata !3623, metadata !DIExpression()), !dbg !3566
  store i64 %2, i64* %210, align 8
  %_ = sub i32 %0, -3
  %gen = mul i32 %_, -3
  %_1 = sub i32 %0, -3
  %gen2 = mul i32 %_1, -3
  %_3 = sub i32 %0, -3
  %gen4 = mul i32 %_3, -3
  %_5 = shl i32 %0, -3
  %_6 = sub i32 0, %0
  %gen7 = add i32 %_6, -3
  %_8 = sub i32 0, %0
  %gen9 = add i32 %_8, -3
  %_10 = sub i32 0, %0
  %gen11 = add i32 %_10, -3
  %213 = mul i32 %0, -3
  %_12 = sub i32 %213, 4
  %gen13 = mul i32 %_12, 4
  %_14 = sub i32 %213, 4
  %gen15 = mul i32 %_14, 4
  %214 = add i32 %213, 4
  %215 = trunc i64 %2 to i32
  %216 = mul i32 %215, -2
  %_16 = sub i32 0, %216
  %gen17 = add i32 %_16, 1
  %_18 = sub i32 %216, 1
  %gen19 = mul i32 %_18, 1
  %217 = add i32 %216, 1
  %_20 = sub i32 0, %214
  %gen21 = add i32 %_20, %214
  %_22 = sub i32 %214, %214
  %gen23 = mul i32 %_22, %214
  %_24 = sub i32 0, %214
  %gen25 = add i32 %_24, %214
  %218 = mul i32 %214, %214
  %_26 = sub i32 %217, %217
  %gen27 = mul i32 %_26, %217
  %_28 = sub i32 0, %217
  %gen29 = add i32 %_28, %217
  %219 = mul i32 %217, %217
  %_30 = sub i32 %218, %219
  %gen31 = mul i32 %_30, %219
  %_32 = shl i32 %218, %219
  %220 = add i32 %218, %219
  %_33 = shl i32 %214, %217
  %_34 = sub i32 %214, %217
  %gen35 = mul i32 %_34, %217
  %_36 = sub i32 %214, %217
  %gen37 = mul i32 %_36, %217
  %_38 = sub i32 %214, %217
  %gen39 = mul i32 %_38, %217
  %_40 = sub i32 %214, %217
  %gen41 = mul i32 %_40, %217
  %_42 = sub i32 %214, %217
  %gen43 = mul i32 %_42, %217
  %221 = mul i32 %214, %217
  %_44 = shl i32 %221, 2
  %_45 = sub i32 %221, 2
  %gen46 = mul i32 %_45, 2
  %222 = mul i32 %221, 2
  %_47 = sub i32 0, %220
  %gen48 = add i32 %_47, %222
  %_49 = sub i32 0, %220
  %gen50 = add i32 %_49, %222
  %_51 = sub i32 0, %220
  %gen52 = add i32 %_51, %222
  %_53 = shl i32 %220, %222
  %_54 = sub i32 0, %220
  %gen55 = add i32 %_54, %222
  %_56 = shl i32 %220, %222
  %_57 = sub i32 0, %220
  %gen58 = add i32 %_57, %222
  %223 = sub i32 %220, %222
  %_59 = sub i32 0, %223
  %gen60 = add i32 %_59, -3
  %_61 = sub i32 0, %223
  %gen62 = add i32 %_61, -3
  %_63 = shl i32 %223, -3
  %_64 = sub i32 %223, -3
  %gen65 = mul i32 %_64, -3
  %_66 = shl i32 %223, -3
  %_67 = shl i32 %223, -3
  %_68 = sub i32 %223, -3
  %gen69 = mul i32 %_68, -3
  %224 = mul i32 %223, -3
  %_70 = sub i32 %224, -1
  %gen71 = mul i32 %_70, -1
  %_72 = sub i32 0, %224
  %gen73 = add i32 %_72, -1
  %_74 = shl i32 %224, -1
  %_75 = sub i32 %224, -1
  %gen76 = mul i32 %_75, -1
  %225 = add i32 %224, -1
  %226 = icmp eq i32 %225, 2
  br label %originalBB

originalBB77alteredBB:                            ; preds = %originalBB77, %40
  br label %originalBB77

originalBB81alteredBB:                            ; preds = %originalBB81, %57
  %227 = load i32, i32* %13, align 4, !dbg !3571
  %228 = call i8* @setlocale_null_androidfix(i32 %227), !dbg !3572
  store i8* %228, i8** %16, align 8, !dbg !3570
  %229 = load i8*, i8** %16, align 8, !dbg !3573
  %230 = icmp eq i8* %229, null, !dbg !3575
  br label %originalBB81

originalBB85alteredBB:                            ; preds = %originalBB85, %78
  %231 = load i64, i64* %15, align 8, !dbg !3577
  %232 = icmp ugt i64 %231, 0, !dbg !3580
  br label %originalBB85

originalBB89alteredBB:                            ; preds = %originalBB89, %97
  %233 = load i8*, i8** %14, align 8, !dbg !3582
  %234 = getelementptr inbounds i8, i8* %233, i64 0, !dbg !3582
  store i8 0, i8* %234, align 1, !dbg !3583
  br label %originalBB89

originalBB93alteredBB:                            ; preds = %originalBB93, %123
  %235 = load i8*, i8** %14, align 8, !dbg !3595
  %236 = load i8*, i8** %16, align 8, !dbg !3597
  %237 = load i64, i64* %17, align 8, !dbg !3598
  %_94 = sub i64 0, %237
  %gen95 = add i64 %_94, 1
  %_96 = sub i64 0, %237
  %gen97 = add i64 %_96, 1
  %_98 = shl i64 %237, 1
  %_99 = sub i64 0, %237
  %gen100 = add i64 %_99, 1
  %238 = add i64 %237, 1, !dbg !3599
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %235, i8* align 1 %236, i64 %238, i1 false), !dbg !3600
  store i32 0, i32* %12, align 4, !dbg !3601
  br label %originalBB93

originalBB104alteredBB:                           ; preds = %originalBB104, %144
  %239 = load i64, i64* %15, align 8, !dbg !3602
  %240 = icmp ugt i64 %239, 0, !dbg !3605
  br label %originalBB104

originalBB108alteredBB:                           ; preds = %originalBB108, %172
  store i32 34, i32* %12, align 4, !dbg !3618
  br label %originalBB108

originalBB112alteredBB:                           ; preds = %originalBB112, %189
  %241 = load i32, i32* %12, align 4, !dbg !3619
  br label %originalBB112
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @setlocale_null_androidfix(i32) #4 !dbg !3624 {
  %2 = load i32, i32* @x.87
  %3 = load i32, i32* @y.88
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  store i32 %0, i32* %10, align 4
  call void @llvm.dbg.declare(metadata i32* %10, metadata !3627, metadata !DIExpression()), !dbg !3628
  call void @llvm.dbg.declare(metadata i8** %11, metadata !3629, metadata !DIExpression()), !dbg !3630
  %12 = load i32, i32* %10, align 4, !dbg !3631
  %13 = call i8* @setlocale(i32 %12, i8* null) #10, !dbg !3632
  store i8* %13, i8** %11, align 8, !dbg !3630
  %14 = load i8*, i8** %11, align 8, !dbg !3633
  %15 = load i32, i32* @x.87
  %16 = load i32, i32* @y.88
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %14, !dbg !3634

originalBBalteredBB:                              ; preds = %originalBB, %1
  %23 = alloca i32, align 4
  %24 = alloca i8*, align 8
  store i32 %0, i32* %23, align 4
  call void @llvm.dbg.declare(metadata i32* %23, metadata !3635, metadata !DIExpression()), !dbg !3628
  call void @llvm.dbg.declare(metadata i8** %24, metadata !3638, metadata !DIExpression()), !dbg !3630
  %25 = load i32, i32* %23, align 4, !dbg !3631
  %26 = call i8* @setlocale(i32 %25, i8* null) #10, !dbg !3632
  store i8* %26, i8** %24, align 8, !dbg !3630
  %27 = load i8*, i8** %24, align 8, !dbg !3633
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fclose(%struct._IO_FILE* nonnull) #4 !dbg !3639 {
  %2 = alloca i32, align 4
  %3 = alloca %struct._IO_FILE*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %3, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %3, metadata !3677, metadata !DIExpression()), !dbg !3678
  call void @llvm.dbg.declare(metadata i32* %4, metadata !3679, metadata !DIExpression()), !dbg !3680
  store i32 0, i32* %4, align 4, !dbg !3680
  call void @llvm.dbg.declare(metadata i32* %5, metadata !3681, metadata !DIExpression()), !dbg !3682
  call void @llvm.dbg.declare(metadata i32* %6, metadata !3683, metadata !DIExpression()), !dbg !3684
  store i32 0, i32* %6, align 4, !dbg !3684
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !3685
  %8 = call i32 @fileno(%struct._IO_FILE* %7) #10, !dbg !3686
  store i32 %8, i32* %5, align 4, !dbg !3687
  %9 = add i32 %8, 1
  %10 = mul i32 %9, %9
  %11 = sub i32 %10, %9
  %12 = srem i32 %11, 2
  %13 = add i32 %12, -1
  br label %14

14:                                               ; preds = %1
  %15 = load i32, i32* @x.89
  %16 = load i32, i32* @y.90
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %14, %originalBBalteredBB
  %collatzVar = alloca i32
  %23 = load i32, i32* @x.89
  %24 = load i32, i32* @y.90
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %31

31:                                               ; preds = %originalBBpart2
  %32 = load i32, i32* @inVal0
  %33 = icmp sgt i32 %32, 1
  br i1 %33, label %35, label %34

34:                                               ; preds = %31
  store i32 94, i32* %collatzVar
  br label %35

35:                                               ; preds = %34, %31
  %36 = load i8**, i8*** @inVal1
  %37 = getelementptr inbounds i8*, i8** %36, i64 1
  %38 = load i8*, i8** %37
  %controle = call i32 @controle(i8* %38, i32 -1)
  store i32 %controle, i32* %collatzVar
  br label %39

39:                                               ; preds = %89, %originalBBpart224, %35
  %40 = load i32, i32* %collatzVar
  %41 = icmp sgt i32 %40, 1
  br i1 %41, label %42, label %93

42:                                               ; preds = %39
  %43 = load i32, i32* %collatzVar
  %44 = srem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  br i1 %45, label %46, label %49

46:                                               ; preds = %42
  %47 = load i32, i32* %collatzVar
  %48 = sdiv i32 %47, 2
  store i32 %48, i32* %collatzVar
  br label %69

49:                                               ; preds = %42
  %50 = load i32, i32* @x.89
  %51 = load i32, i32* @y.90
  %52 = sub i32 %50, 1
  %53 = mul i32 %50, %52
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %55, %56
  br i1 %57, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %49, %originalBB1alteredBB
  %58 = load i32, i32* %collatzVar
  %59 = mul i32 %58, 3
  %60 = add i32 %59, 1
  store i32 %60, i32* %collatzVar
  %61 = load i32, i32* @x.89
  %62 = load i32, i32* @y.90
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBBpart218, label %originalBB1alteredBB

originalBBpart218:                                ; preds = %originalBB1
  br label %69

69:                                               ; preds = %originalBBpart218, %46
  %70 = load i32, i32* @x.89
  %71 = load i32, i32* @y.90
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBB20, label %originalBB20alteredBB

originalBB20:                                     ; preds = %69, %originalBB20alteredBB
  %78 = load i32, i32* %collatzVar
  %79 = sub i32 %13, %78
  %80 = icmp sgt i32 %79, -3
  %81 = load i32, i32* @x.89
  %82 = load i32, i32* @y.90
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBBpart224, label %originalBB20alteredBB

originalBBpart224:                                ; preds = %originalBB20
  br i1 %80, label %89, label %39

89:                                               ; preds = %originalBBpart224
  %90 = load i32, i32* %collatzVar
  %91 = add i32 %13, %90
  %92 = icmp slt i32 %91, 1
  br i1 %92, label %110, label %39

93:                                               ; preds = %39
  %94 = load i32, i32* @x.89
  %95 = load i32, i32* @y.90
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %93, %originalBB26alteredBB
  %102 = load i32, i32* @x.89
  %103 = load i32, i32* @y.90
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  ret i32 0

110:                                              ; preds = %89
  %111 = load i32, i32* %5, align 4, !dbg !3688
  %112 = icmp slt i32 %111, 0, !dbg !3690
  br i1 %112, label %113, label %116, !dbg !3691

113:                                              ; preds = %110
  %114 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !3692
  %115 = call i32 @fclose(%struct._IO_FILE* %114), !dbg !3693
  store i32 %115, i32* %2, align 4, !dbg !3694
  br label %190, !dbg !3694

116:                                              ; preds = %110
  %117 = load i32, i32* @x.89
  %118 = load i32, i32* @y.90
  %119 = sub i32 %117, 1
  %120 = mul i32 %117, %119
  %121 = urem i32 %120, 2
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %122, %123
  br i1 %124, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %116, %originalBB30alteredBB
  %125 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !3695
  %126 = call i32 @__freading(%struct._IO_FILE* %125) #10, !dbg !3695
  %127 = icmp ne i32 %126, 0, !dbg !3695
  %128 = load i32, i32* @x.89
  %129 = load i32, i32* @y.90
  %130 = sub i32 %128, 1
  %131 = mul i32 %128, %130
  %132 = urem i32 %131, 2
  %133 = icmp eq i32 %132, 0
  %134 = icmp slt i32 %129, 10
  %135 = or i1 %133, %134
  br i1 %135, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br i1 %127, label %136, label %141, !dbg !3697

136:                                              ; preds = %originalBBpart232
  %137 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !3698
  %138 = call i32 @fileno(%struct._IO_FILE* %137) #10, !dbg !3699
  %139 = call i64 @lseek(i32 %138, i64 0, i32 1) #10, !dbg !3700
  %140 = icmp ne i64 %139, -1, !dbg !3701
  br i1 %140, label %141, label %164, !dbg !3702

141:                                              ; preds = %136, %originalBBpart232
  %142 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !3703
  %143 = call i32 @rpl_fflush(%struct._IO_FILE* %142), !dbg !3704
  %144 = icmp ne i32 %143, 0, !dbg !3704
  br i1 %144, label %145, label %164, !dbg !3705

145:                                              ; preds = %141
  %146 = load i32, i32* @x.89
  %147 = load i32, i32* @y.90
  %148 = sub i32 %146, 1
  %149 = mul i32 %146, %148
  %150 = urem i32 %149, 2
  %151 = icmp eq i32 %150, 0
  %152 = icmp slt i32 %147, 10
  %153 = or i1 %151, %152
  br i1 %153, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %145, %originalBB34alteredBB
  %154 = call i32* @__errno_location() #15, !dbg !3706
  %155 = load i32, i32* %154, align 4, !dbg !3706
  store i32 %155, i32* %4, align 4, !dbg !3707
  %156 = load i32, i32* @x.89
  %157 = load i32, i32* @y.90
  %158 = sub i32 %156, 1
  %159 = mul i32 %156, %158
  %160 = urem i32 %159, 2
  %161 = icmp eq i32 %160, 0
  %162 = icmp slt i32 %157, 10
  %163 = or i1 %161, %162
  br i1 %163, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %164, !dbg !3708

164:                                              ; preds = %originalBBpart236, %141, %136
  %165 = load i32, i32* @x.89
  %166 = load i32, i32* @y.90
  %167 = sub i32 %165, 1
  %168 = mul i32 %165, %167
  %169 = urem i32 %168, 2
  %170 = icmp eq i32 %169, 0
  %171 = icmp slt i32 %166, 10
  %172 = or i1 %170, %171
  br i1 %172, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %164, %originalBB38alteredBB
  %173 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !3709
  %174 = call i32 @fclose(%struct._IO_FILE* %173), !dbg !3710
  store i32 %174, i32* %6, align 4, !dbg !3711
  %175 = load i32, i32* %4, align 4, !dbg !3712
  %176 = icmp ne i32 %175, 0, !dbg !3714
  %177 = load i32, i32* @x.89
  %178 = load i32, i32* @y.90
  %179 = sub i32 %177, 1
  %180 = mul i32 %177, %179
  %181 = urem i32 %180, 2
  %182 = icmp eq i32 %181, 0
  %183 = icmp slt i32 %178, 10
  %184 = or i1 %182, %183
  br i1 %184, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br i1 %176, label %185, label %188, !dbg !3715

185:                                              ; preds = %originalBBpart240
  %186 = load i32, i32* %4, align 4, !dbg !3716
  %187 = call i32* @__errno_location() #15, !dbg !3718
  store i32 %186, i32* %187, align 4, !dbg !3719
  store i32 -1, i32* %6, align 4, !dbg !3720
  br label %188, !dbg !3721

188:                                              ; preds = %185, %originalBBpart240
  %189 = load i32, i32* %6, align 4, !dbg !3722
  store i32 %189, i32* %2, align 4, !dbg !3723
  br label %190, !dbg !3723

190:                                              ; preds = %188, %113
  %191 = load i32, i32* @x.89
  %192 = load i32, i32* @y.90
  %193 = sub i32 %191, 1
  %194 = mul i32 %191, %193
  %195 = urem i32 %194, 2
  %196 = icmp eq i32 %195, 0
  %197 = icmp slt i32 %192, 10
  %198 = or i1 %196, %197
  br i1 %198, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %190, %originalBB42alteredBB
  %199 = load i32, i32* %2, align 4, !dbg !3724
  %200 = load i32, i32* @x.89
  %201 = load i32, i32* @y.90
  %202 = sub i32 %200, 1
  %203 = mul i32 %200, %202
  %204 = urem i32 %203, 2
  %205 = icmp eq i32 %204, 0
  %206 = icmp slt i32 %201, 10
  %207 = or i1 %205, %206
  br i1 %207, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  ret i32 %199, !dbg !3724

originalBBalteredBB:                              ; preds = %originalBB, %14
  %collatzVaralteredBB = alloca i32
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %49
  %208 = load i32, i32* %collatzVar
  %_ = sub i32 %208, 3
  %gen = mul i32 %_, 3
  %_2 = sub i32 0, %208
  %gen3 = add i32 %_2, 3
  %_4 = sub i32 %208, 3
  %gen5 = mul i32 %_4, 3
  %_6 = sub i32 %208, 3
  %gen7 = mul i32 %_6, 3
  %_8 = sub i32 0, %208
  %gen9 = add i32 %_8, 3
  %_10 = shl i32 %208, 3
  %_11 = sub i32 %208, 3
  %gen12 = mul i32 %_11, 3
  %209 = mul i32 %208, 3
  %_13 = sub i32 0, %209
  %gen14 = add i32 %_13, 1
  %_15 = sub i32 0, %209
  %gen16 = add i32 %_15, 1
  %210 = add i32 %209, 1
  store i32 %210, i32* %collatzVar
  br label %originalBB1

originalBB20alteredBB:                            ; preds = %originalBB20, %69
  %211 = load i32, i32* %collatzVar
  %_21 = sub i32 %13, %211
  %gen22 = mul i32 %_21, %211
  %212 = sub i32 %13, %211
  %213 = icmp sgt i32 %212, -3
  br label %originalBB20

originalBB26alteredBB:                            ; preds = %originalBB26, %93
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %116
  %214 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !3695
  %215 = call i32 @__freading(%struct._IO_FILE* %214) #10, !dbg !3695
  %216 = icmp ne i32 %215, 0, !dbg !3695
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %145
  %217 = call i32* @__errno_location() #15, !dbg !3706
  %218 = load i32, i32* %217, align 4, !dbg !3706
  store i32 %218, i32* %4, align 4, !dbg !3707
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %164
  %219 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !3709
  %220 = call i32 @fclose(%struct._IO_FILE* %219), !dbg !3710
  store i32 %220, i32* %6, align 4, !dbg !3711
  %221 = load i32, i32* %4, align 4, !dbg !3712
  %222 = icmp ne i32 %221, 0, !dbg !3714
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %190
  %223 = load i32, i32* %2, align 4, !dbg !3724
  br label %originalBB42
}

; Function Attrs: nounwind
declare dso_local i32 @fileno(%struct._IO_FILE*) #2

declare dso_local i32 @fclose(%struct._IO_FILE*) #3

; Function Attrs: nounwind
declare dso_local i32 @__freading(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare dso_local i64 @lseek(i32, i64, i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fflush(%struct._IO_FILE*) #4 !dbg !3725 {
  %2 = alloca i32, align 4
  %3 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %3, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %3, metadata !3763, metadata !DIExpression()), !dbg !3764
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !3765
  %5 = icmp eq %struct._IO_FILE* %4, null, !dbg !3767
  br i1 %5, label %10, label %6, !dbg !3768

6:                                                ; preds = %1
  %7 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !3769
  %8 = call i32 @__freading(%struct._IO_FILE* %7) #10, !dbg !3769
  %9 = icmp ne i32 %8, 0, !dbg !3769
  br i1 %9, label %29, label %10, !dbg !3770

10:                                               ; preds = %6, %1
  %11 = load i32, i32* @x.91
  %12 = load i32, i32* @y.92
  %13 = sub i32 %11, 1
  %14 = mul i32 %11, %13
  %15 = urem i32 %14, 2
  %16 = icmp eq i32 %15, 0
  %17 = icmp slt i32 %12, 10
  %18 = or i1 %16, %17
  br i1 %18, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %10, %originalBBalteredBB
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !3771
  %20 = call i32 @fflush(%struct._IO_FILE* %19), !dbg !3772
  store i32 %20, i32* %2, align 4, !dbg !3773
  %21 = load i32, i32* @x.91
  %22 = load i32, i32* @y.92
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %49, !dbg !3773

29:                                               ; preds = %6
  %30 = load i32, i32* @x.91
  %31 = load i32, i32* @y.92
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %29, %originalBB1alteredBB
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !3774
  call void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE* %38), !dbg !3775
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !3776
  %40 = call i32 @fflush(%struct._IO_FILE* %39), !dbg !3777
  store i32 %40, i32* %2, align 4, !dbg !3778
  %41 = load i32, i32* @x.91
  %42 = load i32, i32* @y.92
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %49, !dbg !3778

49:                                               ; preds = %originalBBpart24, %originalBBpart2
  %50 = load i32, i32* @x.91
  %51 = load i32, i32* @y.92
  %52 = sub i32 %50, 1
  %53 = mul i32 %50, %52
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %55, %56
  br i1 %57, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %49, %originalBB6alteredBB
  %58 = load i32, i32* %2, align 4, !dbg !3779
  %59 = load i32, i32* @x.91
  %60 = load i32, i32* @y.92
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  ret i32 %58, !dbg !3779

originalBBalteredBB:                              ; preds = %originalBB, %10
  %67 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !3771
  %68 = call i32 @fflush(%struct._IO_FILE* %67), !dbg !3772
  store i32 %68, i32* %2, align 4, !dbg !3773
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %29
  %69 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !3774
  call void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE* %69), !dbg !3775
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** %3, align 8, !dbg !3776
  %71 = call i32 @fflush(%struct._IO_FILE* %70), !dbg !3777
  store i32 %71, i32* %2, align 4, !dbg !3778
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %49
  %72 = load i32, i32* %2, align 4, !dbg !3779
  br label %originalBB6
}

declare dso_local i32 @fflush(%struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE*) #4 !dbg !3780 {
  %2 = load i32, i32* @x.93
  %3 = load i32, i32* @y.94
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %10, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %10, metadata !3783, metadata !DIExpression()), !dbg !3784
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %10, align 8, !dbg !3785
  %12 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %11, i32 0, i32 0, !dbg !3787
  %13 = load i32, i32* %12, align 8, !dbg !3787
  %14 = and i32 %13, 256, !dbg !3788
  %15 = icmp ne i32 %14, 0, !dbg !3788
  %16 = load i32, i32* @x.93
  %17 = load i32, i32* @y.94
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %24, label %27, !dbg !3789

24:                                               ; preds = %originalBBpart2
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** %10, align 8, !dbg !3790
  %26 = call i32 @rpl_fseeko(%struct._IO_FILE* %25, i64 0, i32 1), !dbg !3791
  br label %27, !dbg !3791

27:                                               ; preds = %24, %originalBBpart2
  %28 = load i32, i32* @x.93
  %29 = load i32, i32* @y.94
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBB5, label %originalBB5alteredBB

originalBB5:                                      ; preds = %27, %originalBB5alteredBB
  %36 = load i32, i32* @x.93
  %37 = load i32, i32* @y.94
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBBpart27, label %originalBB5alteredBB

originalBBpart27:                                 ; preds = %originalBB5
  ret void, !dbg !3792

originalBBalteredBB:                              ; preds = %originalBB, %1
  %44 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %44, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %44, metadata !3793, metadata !DIExpression()), !dbg !3784
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** %44, align 8, !dbg !3785
  %46 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %45, i32 0, i32 0, !dbg !3787
  %47 = load i32, i32* %46, align 8, !dbg !3787
  %_ = sub i32 0, %47
  %gen = add i32 %_, 256
  %_1 = sub i32 %47, 256
  %gen2 = mul i32 %_1, 256
  %_3 = sub i32 0, %47
  %gen4 = add i32 %_3, 256
  %48 = and i32 %47, 256, !dbg !3788
  %49 = icmp ne i32 %48, 0, !dbg !3788
  br label %originalBB

originalBB5alteredBB:                             ; preds = %originalBB5, %27
  br label %originalBB5
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fseeko(%struct._IO_FILE* nonnull, i64, i32) #4 !dbg !3832 {
  %4 = load i32, i32* @x.95
  %5 = load i32, i32* @y.96
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca %struct._IO_FILE*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i32, align 4
  %16 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %13, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %13, metadata !3871, metadata !DIExpression()), !dbg !3872
  store i64 %1, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !3873, metadata !DIExpression()), !dbg !3874
  store i32 %2, i32* %15, align 4
  call void @llvm.dbg.declare(metadata i32* %15, metadata !3875, metadata !DIExpression()), !dbg !3876
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3877
  %18 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %17, i32 0, i32 2, !dbg !3879
  %19 = load i8*, i8** %18, align 8, !dbg !3879
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3880
  %21 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %20, i32 0, i32 1, !dbg !3881
  %22 = load i8*, i8** %21, align 8, !dbg !3881
  %23 = icmp eq i8* %19, %22, !dbg !3882
  %24 = load i32, i32* @x.95
  %25 = load i32, i32* @y.96
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %23, label %32, label %94, !dbg !3883

32:                                               ; preds = %originalBBpart2
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3884
  %34 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %33, i32 0, i32 5, !dbg !3885
  %35 = load i8*, i8** %34, align 8, !dbg !3885
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3886
  %37 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %36, i32 0, i32 4, !dbg !3887
  %38 = load i8*, i8** %37, align 8, !dbg !3887
  %39 = icmp eq i8* %35, %38, !dbg !3888
  br i1 %39, label %40, label %94, !dbg !3889

40:                                               ; preds = %32
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3890
  %42 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %41, i32 0, i32 9, !dbg !3891
  %43 = load i8*, i8** %42, align 8, !dbg !3891
  %44 = icmp eq i8* %43, null, !dbg !3892
  br i1 %44, label %45, label %94, !dbg !3893

45:                                               ; preds = %40
  call void @llvm.dbg.declare(metadata i64* %16, metadata !3894, metadata !DIExpression()), !dbg !3896
  %46 = load i32, i32* @x.95
  %47 = load i32, i32* @y.96
  %48 = sub i32 %46, 1
  %49 = mul i32 %46, %48
  %50 = urem i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %51, %52
  br i1 %53, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %45, %originalBB1alteredBB
  %54 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3897
  %55 = call i32 @fileno(%struct._IO_FILE* %54) #10, !dbg !3898
  %56 = load i64, i64* %14, align 8, !dbg !3899
  %57 = load i32, i32* %15, align 4, !dbg !3900
  %58 = call i64 @lseek(i32 %55, i64 %56, i32 %57) #10, !dbg !3901
  store i64 %58, i64* %16, align 8, !dbg !3896
  %59 = load i64, i64* %16, align 8, !dbg !3902
  %60 = trunc i64 %59 to i32
  %61 = mul i32 %60, -3
  %62 = add i32 %61, -4
  %63 = trunc i64 %56 to i32
  %64 = mul i32 %63, 2
  %65 = add i32 %64, -5
  %66 = mul i32 %62, %62
  %67 = mul i32 %66, 7
  %68 = sub i32 %67, 1
  %69 = mul i32 %65, %65
  %70 = sub i32 %68, %69
  %71 = mul i32 %70, -2
  %72 = add i32 %71, -1
  %73 = icmp ne i32 %72, -1
  %74 = load i32, i32* @x.95
  %75 = load i32, i32* @y.96
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBBpart274, label %originalBB1alteredBB

originalBBpart274:                                ; preds = %originalBB1
  br i1 %73, label %83, label %82

82:                                               ; preds = %originalBBpart274
  ret i32 0

83:                                               ; preds = %originalBBpart274
  %84 = icmp eq i64 %59, -1, !dbg !3904
  br i1 %84, label %85, label %86, !dbg !3905

85:                                               ; preds = %83
  store i32 -1, i32* %12, align 4, !dbg !3906
  br label %99, !dbg !3906

86:                                               ; preds = %83
  %87 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3908
  %88 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %87, i32 0, i32 0, !dbg !3909
  %89 = load i32, i32* %88, align 8, !dbg !3910
  %90 = and i32 %89, -17, !dbg !3910
  store i32 %90, i32* %88, align 8, !dbg !3910
  %91 = load i64, i64* %16, align 8, !dbg !3911
  %92 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3912
  %93 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %92, i32 0, i32 21, !dbg !3913
  store i64 %91, i64* %93, align 8, !dbg !3914
  store i32 0, i32* %12, align 4, !dbg !3915
  br label %99, !dbg !3915

94:                                               ; preds = %40, %32, %originalBBpart2
  %95 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3916
  %96 = load i64, i64* %14, align 8, !dbg !3917
  %97 = load i32, i32* %15, align 4, !dbg !3918
  %98 = call i32 @fseeko(%struct._IO_FILE* %95, i64 %96, i32 %97), !dbg !3919
  store i32 %98, i32* %12, align 4, !dbg !3920
  br label %99, !dbg !3920

99:                                               ; preds = %94, %86, %85
  %100 = load i32, i32* %12, align 4, !dbg !3921
  ret i32 %100, !dbg !3921

originalBBalteredBB:                              ; preds = %originalBB, %3
  %101 = alloca i32, align 4
  %102 = alloca %struct._IO_FILE*, align 8
  %103 = alloca i64, align 8
  %104 = alloca i32, align 4
  %105 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %102, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %102, metadata !3922, metadata !DIExpression()), !dbg !3872
  store i64 %1, i64* %103, align 8
  call void @llvm.dbg.declare(metadata i64* %103, metadata !3961, metadata !DIExpression()), !dbg !3874
  store i32 %2, i32* %104, align 4
  call void @llvm.dbg.declare(metadata i32* %104, metadata !3962, metadata !DIExpression()), !dbg !3876
  %106 = load %struct._IO_FILE*, %struct._IO_FILE** %102, align 8, !dbg !3877
  %107 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %106, i32 0, i32 2, !dbg !3879
  %108 = load i8*, i8** %107, align 8, !dbg !3879
  %109 = load %struct._IO_FILE*, %struct._IO_FILE** %102, align 8, !dbg !3880
  %110 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %109, i32 0, i32 1, !dbg !3881
  %111 = load i8*, i8** %110, align 8, !dbg !3881
  %112 = icmp eq i8* %108, %111, !dbg !3882
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %45
  %113 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3897
  %114 = call i32 @fileno(%struct._IO_FILE* %113) #10, !dbg !3898
  %115 = load i64, i64* %14, align 8, !dbg !3899
  %116 = load i32, i32* %15, align 4, !dbg !3900
  %117 = call i64 @lseek(i32 %114, i64 %115, i32 %116) #10, !dbg !3901
  store i64 %117, i64* %16, align 8, !dbg !3896
  %118 = load i64, i64* %16, align 8, !dbg !3902
  %119 = trunc i64 %118 to i32
  %_ = sub i32 0, %119
  %gen = add i32 %_, -3
  %120 = mul i32 %119, -3
  %_2 = sub i32 0, %120
  %gen3 = add i32 %_2, -4
  %_4 = sub i32 %120, -4
  %gen5 = mul i32 %_4, -4
  %121 = add i32 %120, -4
  %122 = trunc i64 %115 to i32
  %_6 = sub i32 0, %122
  %gen7 = add i32 %_6, 2
  %_8 = shl i32 %122, 2
  %_9 = sub i32 0, %122
  %gen10 = add i32 %_9, 2
  %123 = mul i32 %122, 2
  %_11 = shl i32 %123, -5
  %_12 = sub i32 0, %123
  %gen13 = add i32 %_12, -5
  %_14 = shl i32 %123, -5
  %_15 = sub i32 0, %123
  %gen16 = add i32 %_15, -5
  %_17 = sub i32 %123, -5
  %gen18 = mul i32 %_17, -5
  %_19 = sub i32 0, %123
  %gen20 = add i32 %_19, -5
  %_21 = sub i32 0, %123
  %gen22 = add i32 %_21, -5
  %124 = add i32 %123, -5
  %_23 = shl i32 %121, %121
  %_24 = sub i32 0, %121
  %gen25 = add i32 %_24, %121
  %125 = mul i32 %121, %121
  %_26 = shl i32 %125, 7
  %_27 = shl i32 %125, 7
  %_28 = sub i32 0, %125
  %gen29 = add i32 %_28, 7
  %126 = mul i32 %125, 7
  %_30 = sub i32 %126, 1
  %gen31 = mul i32 %_30, 1
  %_32 = sub i32 %126, 1
  %gen33 = mul i32 %_32, 1
  %_34 = sub i32 0, %126
  %gen35 = add i32 %_34, 1
  %_36 = sub i32 0, %126
  %gen37 = add i32 %_36, 1
  %127 = sub i32 %126, 1
  %_38 = sub i32 %124, %124
  %gen39 = mul i32 %_38, %124
  %_40 = shl i32 %124, %124
  %_41 = sub i32 0, %124
  %gen42 = add i32 %_41, %124
  %_43 = shl i32 %124, %124
  %_44 = shl i32 %124, %124
  %_45 = shl i32 %124, %124
  %_46 = sub i32 0, %124
  %gen47 = add i32 %_46, %124
  %_48 = shl i32 %124, %124
  %128 = mul i32 %124, %124
  %_49 = sub i32 0, %127
  %gen50 = add i32 %_49, %128
  %_51 = sub i32 %127, %128
  %gen52 = mul i32 %_51, %128
  %_53 = sub i32 %127, %128
  %gen54 = mul i32 %_53, %128
  %_55 = shl i32 %127, %128
  %_56 = shl i32 %127, %128
  %_57 = sub i32 %127, %128
  %gen58 = mul i32 %_57, %128
  %129 = sub i32 %127, %128
  %_59 = sub i32 %129, -2
  %gen60 = mul i32 %_59, -2
  %_61 = shl i32 %129, -2
  %130 = mul i32 %129, -2
  %_62 = shl i32 %130, -1
  %_63 = sub i32 %130, -1
  %gen64 = mul i32 %_63, -1
  %_65 = sub i32 0, %130
  %gen66 = add i32 %_65, -1
  %_67 = sub i32 %130, -1
  %gen68 = mul i32 %_67, -1
  %_69 = sub i32 0, %130
  %gen70 = add i32 %_69, -1
  %_71 = sub i32 0, %130
  %gen72 = add i32 %_71, -1
  %131 = add i32 %130, -1
  %132 = icmp ne i32 %131, -1
  br label %originalBB1
}

declare dso_local i32 @fseeko(%struct._IO_FILE*, i64, i32) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @c_tolower(i32) #4 !dbg !3963 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  call void @llvm.dbg.declare(metadata i32* %3, metadata !3967, metadata !DIExpression()), !dbg !3968
  %4 = load i32, i32* %3, align 4, !dbg !3969
  switch i32 %4, label %9 [
    i32 65, label %5
    i32 66, label %5
    i32 67, label %5
    i32 68, label %5
    i32 69, label %5
    i32 70, label %5
    i32 71, label %5
    i32 72, label %5
    i32 73, label %5
    i32 74, label %5
    i32 75, label %5
    i32 76, label %5
    i32 77, label %5
    i32 78, label %5
    i32 79, label %5
    i32 80, label %5
    i32 81, label %5
    i32 82, label %5
    i32 83, label %5
    i32 84, label %5
    i32 85, label %5
    i32 86, label %5
    i32 87, label %5
    i32 88, label %5
    i32 89, label %5
    i32 90, label %5
  ], !dbg !3970

5:                                                ; preds = %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1, %1
  %6 = load i32, i32* %3, align 4, !dbg !3971
  %7 = sub nsw i32 %6, 65, !dbg !3973
  %8 = add nsw i32 %7, 97, !dbg !3974
  store i32 %8, i32* %2, align 4, !dbg !3975
  br label %27, !dbg !3975

9:                                                ; preds = %1
  %10 = load i32, i32* @x.97
  %11 = load i32, i32* @y.98
  %12 = sub i32 %10, 1
  %13 = mul i32 %10, %12
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  %16 = icmp slt i32 %11, 10
  %17 = or i1 %15, %16
  br i1 %17, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %9, %originalBBalteredBB
  %18 = load i32, i32* %3, align 4, !dbg !3976
  store i32 %18, i32* %2, align 4, !dbg !3977
  %19 = load i32, i32* @x.97
  %20 = load i32, i32* @y.98
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %27, !dbg !3977

27:                                               ; preds = %originalBBpart2, %5
  %28 = load i32, i32* @x.97
  %29 = load i32, i32* @y.98
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %27, %originalBB1alteredBB
  %36 = load i32, i32* %2, align 4, !dbg !3978
  %37 = load i32, i32* @x.97
  %38 = load i32, i32* @y.98
  %39 = sub i32 %37, 1
  %40 = mul i32 %37, %39
  %41 = urem i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %38, 10
  %44 = or i1 %42, %43
  br i1 %44, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  ret i32 %36, !dbg !3978

originalBBalteredBB:                              ; preds = %originalBB, %9
  %45 = load i32, i32* %3, align 4, !dbg !3976
  store i32 %45, i32* %2, align 4, !dbg !3977
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %27
  %46 = load i32, i32* %2, align 4, !dbg !3978
  br label %originalBB1
}

define private i32 @controle(i8*, i32) {
  %3 = load i32, i32* @inVal0
  %4 = icmp sgt i32 %3, 0
  br i1 %4, label %9, label %5

5:                                                ; preds = %2
  call void @srand(i32 %1)
  %6 = call i32 @rand()
  %7 = srem i32 %6, 50000
  %8 = add i32 %7, 2
  ret i32 %8

9:                                                ; preds = %2
  %10 = load i32, i32* @x.99
  %11 = load i32, i32* @y.100
  %12 = sub i32 %10, 1
  %13 = mul i32 %10, %12
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  %16 = icmp slt i32 %11, 10
  %17 = or i1 %15, %16
  br i1 %17, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %9, %originalBBalteredBB
  %18 = getelementptr inbounds [3 x i8], [3 x i8]* @.compVal2, i32 0, i32 0
  %19 = call i32 @strcmp(i8* %18, i8* %0)
  %20 = icmp eq i32 %19, 0
  %21 = load i32, i32* @x.99
  %22 = load i32, i32* @y.100
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %20, label %29, label %48

29:                                               ; preds = %originalBBpart2
  %30 = icmp eq i32 %1, 0
  br i1 %30, label %31, label %48

31:                                               ; preds = %29
  %32 = load i32, i32* @x.99
  %33 = load i32, i32* @y.100
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  %40 = load i32, i32* @x.99
  %41 = load i32, i32* @y.100
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  ret i32 5

48:                                               ; preds = %29, %originalBBpart2
  %49 = load i32, i32* @x.99
  %50 = load i32, i32* @y.100
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = getelementptr inbounds [1 x i8], [1 x i8]* @.compVal1, i32 0, i32 0
  %58 = call i32 @strcmp(i8* %57, i8* %0)
  %59 = icmp eq i32 %58, 0
  %60 = load i32, i32* @x.99
  %61 = load i32, i32* @y.100
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %59, label %68, label %87

68:                                               ; preds = %originalBBpart28
  %69 = load i32, i32* @x.99
  %70 = load i32, i32* @y.100
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %68, %originalBB10alteredBB
  %77 = icmp eq i32 %1, -1
  %78 = load i32, i32* @x.99
  %79 = load i32, i32* @y.100
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %77, label %86, label %87

86:                                               ; preds = %originalBBpart212
  ret i32 3

87:                                               ; preds = %originalBBpart212, %originalBBpart28
  %88 = load i32, i32* @x.99
  %89 = load i32, i32* @y.100
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %87, %originalBB14alteredBB
  %96 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal0, i32 0, i32 0
  %97 = call i32 @strcmp(i8* %96, i8* %0)
  %98 = icmp eq i32 %97, 0
  %99 = load i32, i32* @x.99
  %100 = load i32, i32* @y.100
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %98, label %107, label %142

107:                                              ; preds = %originalBBpart216
  %108 = load i32, i32* @x.99
  %109 = load i32, i32* @y.100
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %107, %originalBB18alteredBB
  %116 = icmp eq i32 %1, 0
  %117 = load i32, i32* @x.99
  %118 = load i32, i32* @y.100
  %119 = sub i32 %117, 1
  %120 = mul i32 %117, %119
  %121 = urem i32 %120, 2
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %122, %123
  br i1 %124, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %116, label %125, label %142

125:                                              ; preds = %originalBBpart220
  %126 = load i32, i32* @x.99
  %127 = load i32, i32* @y.100
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %125, %originalBB22alteredBB
  %134 = load i32, i32* @x.99
  %135 = load i32, i32* @y.100
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  ret i32 3

142:                                              ; preds = %originalBBpart220, %originalBBpart216
  %143 = load i32, i32* @x.99
  %144 = load i32, i32* @y.100
  %145 = sub i32 %143, 1
  %146 = mul i32 %143, %145
  %147 = urem i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %148, %149
  br i1 %150, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %142, %originalBB26alteredBB
  %151 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal0, i32 0, i32 0
  %152 = call i32 @strcmp(i8* %151, i8* %0)
  %153 = icmp eq i32 %152, 0
  %154 = load i32, i32* @x.99
  %155 = load i32, i32* @y.100
  %156 = sub i32 %154, 1
  %157 = mul i32 %154, %156
  %158 = urem i32 %157, 2
  %159 = icmp eq i32 %158, 0
  %160 = icmp slt i32 %155, 10
  %161 = or i1 %159, %160
  br i1 %161, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %153, label %162, label %181

162:                                              ; preds = %originalBBpart228
  %163 = icmp eq i32 %1, -1
  br i1 %163, label %164, label %181

164:                                              ; preds = %162
  %165 = load i32, i32* @x.99
  %166 = load i32, i32* @y.100
  %167 = sub i32 %165, 1
  %168 = mul i32 %165, %167
  %169 = urem i32 %168, 2
  %170 = icmp eq i32 %169, 0
  %171 = icmp slt i32 %166, 10
  %172 = or i1 %170, %171
  br i1 %172, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %164, %originalBB30alteredBB
  %173 = load i32, i32* @x.99
  %174 = load i32, i32* @y.100
  %175 = sub i32 %173, 1
  %176 = mul i32 %173, %175
  %177 = urem i32 %176, 2
  %178 = icmp eq i32 %177, 0
  %179 = icmp slt i32 %174, 10
  %180 = or i1 %178, %179
  br i1 %180, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  ret i32 5

181:                                              ; preds = %162, %originalBBpart228
  call void @srand(i32 %1)
  %182 = call i32 @rand()
  %183 = srem i32 %182, 50000
  %184 = add i32 %183, 2
  ret i32 %184

originalBBalteredBB:                              ; preds = %originalBB, %9
  %185 = getelementptr inbounds [3 x i8], [3 x i8]* @.compVal2, i32 0, i32 0
  %186 = call i32 @strcmp(i8* %185, i8* %0)
  %187 = icmp eq i32 %186, 0
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  %188 = getelementptr inbounds [1 x i8], [1 x i8]* @.compVal1, i32 0, i32 0
  %189 = call i32 @strcmp(i8* %188, i8* %0)
  %190 = icmp eq i32 %189, 0
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %68
  %191 = icmp eq i32 %1, -1
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %87
  %192 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal0, i32 0, i32 0
  %193 = call i32 @strcmp(i8* %192, i8* %0)
  %194 = icmp eq i32 %193, 0
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %107
  %195 = icmp eq i32 %1, 0
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %125
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %142
  %196 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal0, i32 0, i32 0
  %197 = call i32 @strcmp(i8* %196, i8* %0)
  %198 = icmp eq i32 %197, 0
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %164
  br label %originalBB30
}

declare void @srand(i32)

declare i32 @rand()

attributes #0 = { noinline noreturn nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { noinline nounwind optnone readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noreturn nounwind }
attributes #13 = { nounwind readonly }
attributes #14 = { noreturn }
attributes #15 = { nounwind readnone }

!llvm.dbg.cu = !{!2, !27, !32, !41, !48, !54, !128, !130, !121, !133, !136, !138, !140, !143, !149, !151, !153, !155, !157, !159, !161, !163}
!llvm.ident = !{!165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165}
!llvm.module.flags = !{!166, !167, !168, !169, !170}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "longopts", scope: !2, file: !3, line: 41, type: !10, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !9, nameTableKind: None)
!3 = !DIFile(filename: "src/pwd.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4 = !{}
!5 = !{!6, !7}
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!7 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64)
!8 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!9 = !{!0}
!10 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 1280, elements: !23)
!11 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !12)
!12 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !14)
!13 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/getopt_ext.h", directory: "")
!14 = !{!15, !18, !20, !22}
!15 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !12, file: !13, line: 52, baseType: !16, size: 64)
!16 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !17, size: 64)
!17 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !8)
!18 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !12, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!19 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!20 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !12, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!21 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !19, size: 64)
!22 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !12, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!23 = !{!24}
!24 = !DISubrange(count: 5)
!25 = !DIGlobalVariableExpression(var: !26, expr: !DIExpression())
!26 = distinct !DIGlobalVariable(name: "Version", scope: !27, file: !28, line: 2, type: !16, isLocal: false, isDefinition: true)
!27 = distinct !DICompileUnit(language: DW_LANG_C99, file: !28, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !29, nameTableKind: None)
!28 = !DIFile(filename: "src/version.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!29 = !{!25}
!30 = !DIGlobalVariableExpression(var: !31, expr: !DIExpression())
!31 = distinct !DIGlobalVariable(name: "ignore_EPIPE", scope: !32, file: !37, line: 56, type: !38, isLocal: true, isDefinition: true)
!32 = distinct !DICompileUnit(language: DW_LANG_C99, file: !33, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !34, nameTableKind: None)
!33 = !DIFile(filename: "./lib/closeout.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!34 = !{!35, !30}
!35 = !DIGlobalVariableExpression(var: !36, expr: !DIExpression())
!36 = distinct !DIGlobalVariable(name: "file_name", scope: !32, file: !37, line: 46, type: !16, isLocal: true, isDefinition: true)
!37 = !DIFile(filename: "lib/closeout.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!38 = !DIBasicType(name: "_Bool", size: 8, encoding: DW_ATE_boolean)
!39 = !DIGlobalVariableExpression(var: !40, expr: !DIExpression())
!40 = distinct !DIGlobalVariable(name: "exit_failure", scope: !41, file: !44, line: 24, type: !45, isLocal: false, isDefinition: true)
!41 = distinct !DICompileUnit(language: DW_LANG_C99, file: !42, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !43, nameTableKind: None)
!42 = !DIFile(filename: "./lib/exitfail.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!43 = !{!39}
!44 = !DIFile(filename: "lib/exitfail.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!45 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !19)
!46 = !DIGlobalVariableExpression(var: !47, expr: !DIExpression())
!47 = distinct !DIGlobalVariable(name: "program_name", scope: !48, file: !51, line: 33, type: !16, isLocal: false, isDefinition: true)
!48 = distinct !DICompileUnit(language: DW_LANG_C99, file: !49, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !50, nameTableKind: None)
!49 = !DIFile(filename: "./lib/progname.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!50 = !{!46}
!51 = !DIFile(filename: "lib/progname.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!52 = !DIGlobalVariableExpression(var: !53, expr: !DIExpression())
!53 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !54, file: !80, line: 116, type: !93, isLocal: true, isDefinition: true)
!54 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !77, nameTableKind: None)
!55 = !DIFile(filename: "./lib/quotearg.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!56 = !{!57}
!57 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "quoting_style", file: !58, line: 32, baseType: !59, size: 32, elements: !60)
!58 = !DIFile(filename: "./lib/quotearg.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!59 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!60 = !{!61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71}
!61 = !DIEnumerator(name: "literal_quoting_style", value: 0, isUnsigned: true)
!62 = !DIEnumerator(name: "shell_quoting_style", value: 1, isUnsigned: true)
!63 = !DIEnumerator(name: "shell_always_quoting_style", value: 2, isUnsigned: true)
!64 = !DIEnumerator(name: "shell_escape_quoting_style", value: 3, isUnsigned: true)
!65 = !DIEnumerator(name: "shell_escape_always_quoting_style", value: 4, isUnsigned: true)
!66 = !DIEnumerator(name: "c_quoting_style", value: 5, isUnsigned: true)
!67 = !DIEnumerator(name: "c_maybe_quoting_style", value: 6, isUnsigned: true)
!68 = !DIEnumerator(name: "escape_quoting_style", value: 7, isUnsigned: true)
!69 = !DIEnumerator(name: "locale_quoting_style", value: 8, isUnsigned: true)
!70 = !DIEnumerator(name: "clocale_quoting_style", value: 9, isUnsigned: true)
!71 = !DIEnumerator(name: "custom_quoting_style", value: 10, isUnsigned: true)
!72 = !{!19, !73, !74}
!73 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!74 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !75, line: 46, baseType: !76)
!75 = !DIFile(filename: "/usr/lib/llvm-9/lib/clang/9.0.1/include/stddef.h", directory: "")
!76 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!77 = !{!78, !85, !91, !52, !103, !108, !115, !117}
!78 = !DIGlobalVariableExpression(var: !79, expr: !DIExpression())
!79 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !54, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!80 = !DIFile(filename: "lib/quotearg.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!81 = !DICompositeType(tag: DW_TAG_array_type, baseType: !82, size: 704, elements: !83)
!82 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !16)
!83 = !{!84}
!84 = !DISubrange(count: 11)
!85 = !DIGlobalVariableExpression(var: !86, expr: !DIExpression())
!86 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !54, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!87 = !DICompositeType(tag: DW_TAG_array_type, baseType: !88, size: 320, elements: !89)
!88 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !57)
!89 = !{!90}
!90 = !DISubrange(count: 10)
!91 = !DIGlobalVariableExpression(var: !92, expr: !DIExpression())
!92 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !54, file: !80, line: 1052, type: !93, isLocal: false, isDefinition: true)
!93 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !94)
!94 = !{!95, !96, !97, !101, !102}
!95 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !93, file: !80, line: 68, baseType: !57, size: 32)
!96 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !93, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!97 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !93, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!98 = !DICompositeType(tag: DW_TAG_array_type, baseType: !59, size: 256, elements: !99)
!99 = !{!100}
!100 = !DISubrange(count: 8)
!101 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !93, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!102 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !93, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!103 = !DIGlobalVariableExpression(var: !104, expr: !DIExpression())
!104 = distinct !DIGlobalVariable(name: "slot0", scope: !54, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!105 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 2048, elements: !106)
!106 = !{!107}
!107 = !DISubrange(count: 256)
!108 = !DIGlobalVariableExpression(var: !109, expr: !DIExpression())
!109 = distinct !DIGlobalVariable(name: "slotvec", scope: !54, file: !80, line: 845, type: !110, isLocal: true, isDefinition: true)
!110 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!111 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !112)
!112 = !{!113, !114}
!113 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !111, file: !80, line: 836, baseType: !74, size: 64)
!114 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !111, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!115 = !DIGlobalVariableExpression(var: !116, expr: !DIExpression())
!116 = distinct !DIGlobalVariable(name: "nslots", scope: !54, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!117 = !DIGlobalVariableExpression(var: !118, expr: !DIExpression())
!118 = distinct !DIGlobalVariable(name: "slotvec0", scope: !54, file: !80, line: 844, type: !111, isLocal: true, isDefinition: true)
!119 = !DIGlobalVariableExpression(var: !120, expr: !DIExpression())
!120 = distinct !DIGlobalVariable(name: "version_etc_copyright", scope: !121, file: !124, line: 26, type: !125, isLocal: false, isDefinition: true)
!121 = distinct !DICompileUnit(language: DW_LANG_C99, file: !122, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !123, nameTableKind: None)
!122 = !DIFile(filename: "./lib/version-etc-fsf.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!123 = !{!119}
!124 = !DIFile(filename: "lib/version-etc-fsf.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!125 = !DICompositeType(tag: DW_TAG_array_type, baseType: !17, size: 376, elements: !126)
!126 = !{!127}
!127 = !DISubrange(count: 47)
!128 = distinct !DICompileUnit(language: DW_LANG_C99, file: !129, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!129 = !DIFile(filename: "./lib/root-dev-ino.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!130 = distinct !DICompileUnit(language: DW_LANG_C99, file: !131, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!131 = !DIFile(filename: "./lib/version-etc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!132 = !{!6}
!133 = distinct !DICompileUnit(language: DW_LANG_C99, file: !134, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !135, nameTableKind: None)
!134 = !DIFile(filename: "./lib/xmalloc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!135 = !{!74, !7, !6}
!136 = distinct !DICompileUnit(language: DW_LANG_C99, file: !137, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!137 = !DIFile(filename: "./lib/xalloc-die.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!138 = distinct !DICompileUnit(language: DW_LANG_C99, file: !139, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!139 = !DIFile(filename: "./lib/xgetcwd.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!140 = distinct !DICompileUnit(language: DW_LANG_C99, file: !141, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !142, nameTableKind: None)
!141 = !DIFile(filename: "./lib/mbrtowc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!142 = !{!74}
!143 = distinct !DICompileUnit(language: DW_LANG_C99, file: !144, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !145, nameTableKind: None)
!144 = !DIFile(filename: "./lib/c-strcasecmp.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!145 = !{!146}
!146 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !147, size: 64)
!147 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !148)
!148 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!149 = distinct !DICompileUnit(language: DW_LANG_C99, file: !150, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!150 = !DIFile(filename: "./lib/close-stream.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!151 = distinct !DICompileUnit(language: DW_LANG_C99, file: !152, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!152 = !DIFile(filename: "./lib/hard-locale.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!153 = distinct !DICompileUnit(language: DW_LANG_C99, file: !154, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!154 = !DIFile(filename: "./lib/localcharset.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!155 = distinct !DICompileUnit(language: DW_LANG_C99, file: !156, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!156 = !DIFile(filename: "./lib/setlocale_null.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!157 = distinct !DICompileUnit(language: DW_LANG_C99, file: !158, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!158 = !DIFile(filename: "./lib/fclose.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!159 = distinct !DICompileUnit(language: DW_LANG_C99, file: !160, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!160 = !DIFile(filename: "./lib/fflush.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!161 = distinct !DICompileUnit(language: DW_LANG_C99, file: !162, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!162 = !DIFile(filename: "./lib/fseeko.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!163 = distinct !DICompileUnit(language: DW_LANG_C99, file: !164, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!164 = !DIFile(filename: "./lib/c-ctype.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!165 = !{!"clang version 9.0.1-12 "}
!166 = !{i32 2, !"Dwarf Version", i32 4}
!167 = !{i32 2, !"Debug Info Version", i32 3}
!168 = !{i32 1, !"wchar_size", i32 4}
!169 = !{i32 1, !"ThinLTO", i32 0}
!170 = !{i32 1, !"EnableSplitLTOUnit", i32 0}
!171 = distinct !DISubprogram(name: "usage", scope: !3, file: !3, line: 51, type: !172, scopeLine: 52, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!172 = !DISubroutineType(types: !173)
!173 = !{null, !19}
!174 = !DILocalVariable(name: "status", arg: 1, scope: !171, file: !3, line: 51, type: !19)
!175 = !DILocation(line: 51, column: 12, scope: !171)
!176 = !DILocation(line: 53, column: 7, scope: !177)
!177 = distinct !DILexicalBlock(scope: !171, file: !3, line: 53, column: 7)
!178 = !DILocation(line: 53, column: 14, scope: !177)
!179 = !DILocation(line: 53, column: 7, scope: !171)
!180 = !DILocation(line: 54, column: 5, scope: !177)
!181 = !DILocation(line: 54, column: 5, scope: !182)
!182 = distinct !DILexicalBlock(scope: !177, file: !3, line: 54, column: 5)
!183 = !DILocation(line: 57, column: 15, scope: !184)
!184 = distinct !DILexicalBlock(scope: !177, file: !3, line: 56, column: 5)
!185 = !DILocation(line: 57, column: 45, scope: !184)
!186 = !DILocation(line: 57, column: 7, scope: !184)
!187 = !DILocation(line: 58, column: 7, scope: !184)
!188 = !DILocation(line: 62, column: 7, scope: !184)
!189 = !DILocation(line: 66, column: 7, scope: !184)
!190 = !DILocation(line: 67, column: 7, scope: !184)
!191 = !DILocation(line: 68, column: 7, scope: !184)
!192 = !DILocation(line: 71, column: 15, scope: !184)
!193 = !DILocation(line: 71, column: 7, scope: !184)
!194 = !DILocation(line: 72, column: 7, scope: !184)
!195 = !DILocation(line: 74, column: 9, scope: !171)
!196 = !DILocation(line: 74, column: 3, scope: !171)
!197 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !198, file: !198, line: 634, type: !199, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!198 = !DIFile(filename: "src/system.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!199 = !DISubroutineType(types: !200)
!200 = !{null, !16}
!201 = !DILocalVariable(name: "program", arg: 1, scope: !197, file: !198, line: 634, type: !16)
!202 = !DILocation(line: 634, column: 34, scope: !197)
!203 = !DILocalVariable(name: "infomap", scope: !197, file: !198, line: 636, type: !204)
!204 = !DICompositeType(tag: DW_TAG_array_type, baseType: !205, size: 896, elements: !210)
!205 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !206)
!206 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "infomap", scope: !197, file: !198, line: 636, size: 128, elements: !207)
!207 = !{!208, !209}
!208 = !DIDerivedType(tag: DW_TAG_member, name: "program", scope: !206, file: !198, line: 636, baseType: !16, size: 64)
!209 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !206, file: !198, line: 636, baseType: !16, size: 64, offset: 64)
!210 = !{!211}
!211 = !DISubrange(count: 7)
!212 = !DILocation(line: 636, column: 67, scope: !197)
!213 = !DILocalVariable(name: "node", scope: !197, file: !198, line: 646, type: !16)
!214 = !DILocation(line: 646, column: 15, scope: !197)
!215 = !DILocation(line: 646, column: 22, scope: !197)
!216 = !DILocalVariable(name: "map_prog", scope: !197, file: !198, line: 647, type: !217)
!217 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !205, size: 64)
!218 = !DILocation(line: 647, column: 25, scope: !197)
!219 = !DILocation(line: 647, column: 36, scope: !197)
!220 = !DILocation(line: 649, column: 3, scope: !197)
!221 = !DILocation(line: 649, column: 10, scope: !197)
!222 = !DILocation(line: 649, column: 20, scope: !197)
!223 = !DILocation(line: 649, column: 28, scope: !197)
!224 = !DILocation(line: 649, column: 33, scope: !197)
!225 = !DILocation(line: 649, column: 31, scope: !197)
!226 = !DILocation(line: 0, scope: !197)
!227 = !DILocation(line: 650, column: 13, scope: !197)
!228 = distinct !{!228, !220, !227}
!229 = !DILocation(line: 652, column: 7, scope: !230)
!230 = distinct !DILexicalBlock(scope: !197, file: !198, line: 652, column: 7)
!231 = !DILocation(line: 652, column: 17, scope: !230)
!232 = !DILocation(line: 652, column: 7, scope: !197)
!233 = !DILocation(line: 653, column: 12, scope: !230)
!234 = !DILocation(line: 653, column: 22, scope: !230)
!235 = !DILocation(line: 653, column: 10, scope: !230)
!236 = !DILocation(line: 653, column: 5, scope: !230)
!237 = !DILocation(line: 655, column: 11, scope: !197)
!238 = !DILocation(line: 655, column: 3, scope: !197)
!239 = !DILocalVariable(name: "lc_messages", scope: !197, file: !198, line: 659, type: !16)
!240 = !DILocation(line: 659, column: 15, scope: !197)
!241 = !DILocation(line: 659, column: 29, scope: !197)
!242 = !DILocation(line: 660, column: 7, scope: !243)
!243 = distinct !DILexicalBlock(scope: !197, file: !198, line: 660, column: 7)
!244 = !DILocation(line: 660, column: 19, scope: !243)
!245 = !DILocation(line: 660, column: 22, scope: !243)
!246 = !DILocation(line: 660, column: 7, scope: !197)
!247 = !DILocation(line: 666, column: 7, scope: !248)
!248 = distinct !DILexicalBlock(scope: !243, file: !198, line: 661, column: 5)
!249 = !DILocation(line: 668, column: 5, scope: !248)
!250 = !DILocation(line: 669, column: 11, scope: !197)
!251 = !DILocation(line: 670, column: 24, scope: !197)
!252 = !DILocation(line: 669, column: 3, scope: !197)
!253 = !DILocation(line: 671, column: 11, scope: !197)
!254 = !DILocation(line: 672, column: 11, scope: !197)
!255 = !DILocation(line: 672, column: 17, scope: !197)
!256 = !DILocation(line: 672, column: 25, scope: !197)
!257 = !DILocation(line: 672, column: 22, scope: !197)
!258 = !DILocation(line: 671, column: 3, scope: !197)
!259 = !DILocation(line: 673, column: 1, scope: !197)
!260 = !DILocalVariable(name: "lc_messages", scope: !261, file: !198, line: 659, type: !16)
!261 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !198, file: !198, line: 634, type: !199, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !262, retainedNodes: !4)
!262 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !263, nameTableKind: None)
!263 = !{!264}
!264 = !DIGlobalVariableExpression(var: !265, expr: !DIExpression())
!265 = distinct !DIGlobalVariable(name: "longopts", scope: !262, file: !3, line: 41, type: !266, isLocal: true, isDefinition: true)
!266 = !DICompositeType(tag: DW_TAG_array_type, baseType: !267, size: 1280, elements: !23)
!267 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !268)
!268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !269)
!269 = !{!270, !271, !272, !273}
!270 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !268, file: !13, line: 52, baseType: !16, size: 64)
!271 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !268, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!272 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !268, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!273 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !268, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!274 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 327, type: !275, scopeLine: 328, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!275 = !DISubroutineType(types: !276)
!276 = !{!19, !19, !277}
!277 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!278 = !DILocalVariable(name: "argc", arg: 1, scope: !274, file: !3, line: 327, type: !19)
!279 = !DILocation(line: 327, column: 11, scope: !274)
!280 = !DILocalVariable(name: "argv", arg: 2, scope: !274, file: !3, line: 327, type: !277)
!281 = !DILocation(line: 327, column: 24, scope: !274)
!282 = !DILocalVariable(name: "wd", scope: !274, file: !3, line: 329, type: !7)
!283 = !DILocation(line: 329, column: 9, scope: !274)
!284 = !DILocalVariable(name: "logical", scope: !274, file: !3, line: 333, type: !38)
!285 = !DILocation(line: 333, column: 8, scope: !274)
!286 = !DILocation(line: 333, column: 19, scope: !274)
!287 = !DILocation(line: 333, column: 46, scope: !274)
!288 = !DILocation(line: 336, column: 21, scope: !274)
!289 = !DILocation(line: 336, column: 3, scope: !274)
!290 = !DILocation(line: 337, column: 3, scope: !274)
!291 = !DILocation(line: 338, column: 3, scope: !274)
!292 = !DILocation(line: 339, column: 3, scope: !274)
!293 = !DILocation(line: 341, column: 3, scope: !274)
!294 = !DILocation(line: 343, column: 3, scope: !274)
!295 = !DILocalVariable(name: "c", scope: !296, file: !3, line: 345, type: !19)
!296 = distinct !DILexicalBlock(scope: !274, file: !3, line: 344, column: 5)
!297 = !DILocation(line: 345, column: 11, scope: !296)
!298 = !DILocation(line: 345, column: 28, scope: !296)
!299 = !DILocation(line: 345, column: 34, scope: !296)
!300 = !DILocation(line: 345, column: 15, scope: !296)
!301 = !DILocation(line: 346, column: 11, scope: !302)
!302 = distinct !DILexicalBlock(scope: !296, file: !3, line: 346, column: 11)
!303 = !DILocation(line: 346, column: 13, scope: !302)
!304 = !DILocation(line: 347, column: 9, scope: !302)
!305 = !DILocation(line: 348, column: 15, scope: !296)
!306 = !DILocation(line: 348, column: 7, scope: !296)
!307 = !DILocation(line: 351, column: 19, scope: !308)
!308 = distinct !DILexicalBlock(scope: !296, file: !3, line: 349, column: 9)
!309 = !DILocation(line: 352, column: 11, scope: !308)
!310 = !DILocation(line: 354, column: 19, scope: !308)
!311 = !DILocation(line: 355, column: 11, scope: !308)
!312 = !DILocation(line: 357, column: 9, scope: !308)
!313 = !DILocation(line: 359, column: 9, scope: !308)
!314 = !DILocation(line: 362, column: 11, scope: !308)
!315 = distinct !{!315, !294, !316}
!316 = !DILocation(line: 364, column: 5, scope: !274)
!317 = !DILocation(line: 366, column: 7, scope: !318)
!318 = distinct !DILexicalBlock(scope: !274, file: !3, line: 366, column: 7)
!319 = !DILocation(line: 366, column: 16, scope: !318)
!320 = !DILocation(line: 366, column: 14, scope: !318)
!321 = !DILocation(line: 366, column: 7, scope: !274)
!322 = !DILocation(line: 367, column: 18, scope: !318)
!323 = !DILocation(line: 367, column: 5, scope: !318)
!324 = !DILocation(line: 369, column: 7, scope: !325)
!325 = distinct !DILexicalBlock(scope: !274, file: !3, line: 369, column: 7)
!326 = !DILocation(line: 369, column: 7, scope: !274)
!327 = !DILocation(line: 371, column: 12, scope: !328)
!328 = distinct !DILexicalBlock(scope: !325, file: !3, line: 370, column: 5)
!329 = !DILocation(line: 371, column: 10, scope: !328)
!330 = !DILocation(line: 372, column: 11, scope: !331)
!331 = distinct !DILexicalBlock(scope: !328, file: !3, line: 372, column: 11)
!332 = !DILocation(line: 372, column: 11, scope: !328)
!333 = !DILocation(line: 374, column: 17, scope: !334)
!334 = distinct !DILexicalBlock(scope: !331, file: !3, line: 373, column: 9)
!335 = !DILocation(line: 374, column: 11, scope: !334)
!336 = !DILocation(line: 375, column: 11, scope: !334)
!337 = !DILocation(line: 377, column: 5, scope: !328)
!338 = !DILocation(line: 379, column: 8, scope: !274)
!339 = !DILocation(line: 379, column: 6, scope: !274)
!340 = !DILocation(line: 380, column: 7, scope: !341)
!341 = distinct !DILexicalBlock(scope: !274, file: !3, line: 380, column: 7)
!342 = !DILocation(line: 380, column: 10, scope: !341)
!343 = !DILocation(line: 380, column: 7, scope: !274)
!344 = !DILocation(line: 382, column: 13, scope: !345)
!345 = distinct !DILexicalBlock(scope: !341, file: !3, line: 381, column: 5)
!346 = !DILocation(line: 382, column: 7, scope: !345)
!347 = !DILocation(line: 383, column: 13, scope: !345)
!348 = !DILocation(line: 383, column: 7, scope: !345)
!349 = !DILocation(line: 384, column: 5, scope: !345)
!350 = !DILocalVariable(name: "file_name", scope: !351, file: !3, line: 387, type: !352)
!351 = distinct !DILexicalBlock(scope: !341, file: !3, line: 386, column: 5)
!352 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !353, size: 64)
!353 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "file_name", file: !3, line: 34, size: 192, elements: !354)
!354 = !{!355, !356, !357}
!355 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !353, file: !3, line: 36, baseType: !7, size: 64)
!356 = !DIDerivedType(tag: DW_TAG_member, name: "n_alloc", scope: !353, file: !3, line: 37, baseType: !74, size: 64, offset: 64)
!357 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !353, file: !3, line: 38, baseType: !7, size: 64, offset: 128)
!358 = !DILocation(line: 387, column: 25, scope: !351)
!359 = !DILocation(line: 387, column: 37, scope: !351)
!360 = !DILocation(line: 388, column: 22, scope: !351)
!361 = !DILocation(line: 388, column: 7, scope: !351)
!362 = !DILocation(line: 389, column: 13, scope: !351)
!363 = !DILocation(line: 389, column: 24, scope: !351)
!364 = !DILocation(line: 389, column: 7, scope: !351)
!365 = !DILocation(line: 390, column: 23, scope: !351)
!366 = !DILocation(line: 390, column: 7, scope: !351)
!367 = !DILocation(line: 393, column: 3, scope: !274)
!368 = !DILocation(line: 394, column: 1, scope: !274)
!369 = distinct !DISubprogram(name: "logical_getcwd", scope: !3, file: !3, line: 300, type: !370, scopeLine: 301, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!370 = !DISubroutineType(types: !371)
!371 = !{!7}
!372 = !DILocalVariable(name: "st1", scope: !369, file: !3, line: 302, type: !373)
!373 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !374, line: 46, size: 1152, elements: !375)
!374 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stat.h", directory: "")
!375 = !{!376, !379, !381, !383, !385, !387, !389, !390, !391, !394, !396, !398, !406, !407, !408}
!376 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !373, file: !374, line: 48, baseType: !377, size: 64)
!377 = !DIDerivedType(tag: DW_TAG_typedef, name: "__dev_t", file: !378, line: 145, baseType: !76)
!378 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!379 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !373, file: !374, line: 53, baseType: !380, size: 64, offset: 64)
!380 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ino_t", file: !378, line: 148, baseType: !76)
!381 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !373, file: !374, line: 61, baseType: !382, size: 64, offset: 128)
!382 = !DIDerivedType(tag: DW_TAG_typedef, name: "__nlink_t", file: !378, line: 151, baseType: !76)
!383 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !373, file: !374, line: 62, baseType: !384, size: 32, offset: 192)
!384 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mode_t", file: !378, line: 150, baseType: !59)
!385 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !373, file: !374, line: 64, baseType: !386, size: 32, offset: 224)
!386 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uid_t", file: !378, line: 146, baseType: !59)
!387 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !373, file: !374, line: 65, baseType: !388, size: 32, offset: 256)
!388 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gid_t", file: !378, line: 147, baseType: !59)
!389 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !373, file: !374, line: 67, baseType: !19, size: 32, offset: 288)
!390 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !373, file: !374, line: 69, baseType: !377, size: 64, offset: 320)
!391 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !373, file: !374, line: 74, baseType: !392, size: 64, offset: 384)
!392 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !378, line: 152, baseType: !393)
!393 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!394 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !373, file: !374, line: 78, baseType: !395, size: 64, offset: 448)
!395 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blksize_t", file: !378, line: 174, baseType: !393)
!396 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !373, file: !374, line: 80, baseType: !397, size: 64, offset: 512)
!397 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blkcnt_t", file: !378, line: 179, baseType: !393)
!398 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !373, file: !374, line: 91, baseType: !399, size: 128, offset: 576)
!399 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !400, line: 10, size: 128, elements: !401)
!400 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h", directory: "")
!401 = !{!402, !404}
!402 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !399, file: !400, line: 12, baseType: !403, size: 64)
!403 = !DIDerivedType(tag: DW_TAG_typedef, name: "__time_t", file: !378, line: 160, baseType: !393)
!404 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !399, file: !400, line: 16, baseType: !405, size: 64, offset: 64)
!405 = !DIDerivedType(tag: DW_TAG_typedef, name: "__syscall_slong_t", file: !378, line: 196, baseType: !393)
!406 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !373, file: !374, line: 92, baseType: !399, size: 128, offset: 704)
!407 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !373, file: !374, line: 93, baseType: !399, size: 128, offset: 832)
!408 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !373, file: !374, line: 106, baseType: !409, size: 192, offset: 960)
!409 = !DICompositeType(tag: DW_TAG_array_type, baseType: !405, size: 192, elements: !410)
!410 = !{!411}
!411 = !DISubrange(count: 3)
!412 = !DILocation(line: 302, column: 15, scope: !369)
!413 = !DILocalVariable(name: "st2", scope: !369, file: !3, line: 303, type: !373)
!414 = !DILocation(line: 303, column: 15, scope: !369)
!415 = !DILocalVariable(name: "wd", scope: !369, file: !3, line: 304, type: !7)
!416 = !DILocation(line: 304, column: 9, scope: !369)
!417 = !DILocation(line: 304, column: 14, scope: !369)
!418 = !DILocalVariable(name: "p", scope: !369, file: !3, line: 305, type: !7)
!419 = !DILocation(line: 305, column: 9, scope: !369)
!420 = !DILocation(line: 308, column: 8, scope: !421)
!421 = distinct !DILexicalBlock(scope: !369, file: !3, line: 308, column: 7)
!422 = !DILocation(line: 308, column: 11, scope: !421)
!423 = !DILocation(line: 308, column: 14, scope: !421)
!424 = !DILocation(line: 308, column: 20, scope: !421)
!425 = !DILocation(line: 308, column: 7, scope: !369)
!426 = !DILocation(line: 309, column: 5, scope: !421)
!427 = !DILocation(line: 310, column: 7, scope: !369)
!428 = !DILocation(line: 310, column: 5, scope: !369)
!429 = !DILocation(line: 311, column: 3, scope: !369)
!430 = !DILocation(line: 311, column: 23, scope: !369)
!431 = !DILocation(line: 311, column: 15, scope: !369)
!432 = !DILocation(line: 311, column: 13, scope: !369)
!433 = !DILocation(line: 313, column: 12, scope: !434)
!434 = distinct !DILexicalBlock(scope: !435, file: !3, line: 313, column: 11)
!435 = distinct !DILexicalBlock(scope: !369, file: !3, line: 312, column: 5)
!436 = !DILocation(line: 313, column: 17, scope: !434)
!437 = !DILocation(line: 313, column: 20, scope: !434)
!438 = !DILocation(line: 313, column: 25, scope: !434)
!439 = !DILocation(line: 314, column: 11, scope: !434)
!440 = !DILocation(line: 314, column: 15, scope: !434)
!441 = !DILocation(line: 314, column: 20, scope: !434)
!442 = !DILocation(line: 314, column: 27, scope: !434)
!443 = !DILocation(line: 314, column: 32, scope: !434)
!444 = !DILocation(line: 314, column: 37, scope: !434)
!445 = !DILocation(line: 314, column: 40, scope: !434)
!446 = !DILocation(line: 314, column: 45, scope: !434)
!447 = !DILocation(line: 313, column: 11, scope: !435)
!448 = !DILocation(line: 315, column: 9, scope: !434)
!449 = !DILocation(line: 316, column: 8, scope: !435)
!450 = distinct !{!450, !429, !451}
!451 = !DILocation(line: 317, column: 5, scope: !369)
!452 = !DILocation(line: 320, column: 13, scope: !453)
!453 = distinct !DILexicalBlock(scope: !369, file: !3, line: 320, column: 7)
!454 = !DILocation(line: 320, column: 7, scope: !453)
!455 = !DILocation(line: 320, column: 23, scope: !453)
!456 = !DILocation(line: 320, column: 31, scope: !453)
!457 = !DILocation(line: 320, column: 48, scope: !453)
!458 = !DILocation(line: 320, column: 56, scope: !453)
!459 = !DILocation(line: 320, column: 7, scope: !369)
!460 = !DILocation(line: 321, column: 12, scope: !453)
!461 = !DILocation(line: 321, column: 5, scope: !453)
!462 = !DILocation(line: 322, column: 3, scope: !369)
!463 = !DILocation(line: 323, column: 1, scope: !369)
!464 = distinct !DISubprogram(name: "file_name_init", scope: !3, file: !3, line: 85, type: !465, scopeLine: 86, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!465 = !DISubroutineType(types: !466)
!466 = !{!352}
!467 = !DILocalVariable(name: "p", scope: !464, file: !3, line: 87, type: !352)
!468 = !DILocation(line: 87, column: 21, scope: !464)
!469 = !DILocation(line: 87, column: 25, scope: !464)
!470 = !DILocation(line: 91, column: 3, scope: !464)
!471 = !DILocation(line: 91, column: 6, scope: !464)
!472 = !DILocation(line: 91, column: 14, scope: !464)
!473 = !DILocation(line: 93, column: 21, scope: !464)
!474 = !DILocation(line: 93, column: 24, scope: !464)
!475 = !DILocation(line: 93, column: 12, scope: !464)
!476 = !DILocation(line: 93, column: 3, scope: !464)
!477 = !DILocation(line: 93, column: 6, scope: !464)
!478 = !DILocation(line: 93, column: 10, scope: !464)
!479 = !DILocation(line: 94, column: 14, scope: !464)
!480 = !DILocation(line: 94, column: 17, scope: !464)
!481 = !DILocation(line: 94, column: 24, scope: !464)
!482 = !DILocation(line: 94, column: 27, scope: !464)
!483 = !DILocation(line: 94, column: 35, scope: !464)
!484 = !DILocation(line: 94, column: 21, scope: !464)
!485 = !DILocation(line: 94, column: 3, scope: !464)
!486 = !DILocation(line: 94, column: 6, scope: !464)
!487 = !DILocation(line: 94, column: 12, scope: !464)
!488 = !DILocation(line: 95, column: 3, scope: !464)
!489 = !DILocation(line: 95, column: 6, scope: !464)
!490 = !DILocation(line: 95, column: 15, scope: !464)
!491 = !DILocation(line: 96, column: 10, scope: !464)
!492 = !DILocation(line: 96, column: 3, scope: !464)
!493 = distinct !DISubprogram(name: "robust_getcwd", scope: !3, file: !3, line: 268, type: !494, scopeLine: 269, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!494 = !DISubroutineType(types: !495)
!495 = !{null, !352}
!496 = !DILocalVariable(name: "file_name", arg: 1, scope: !493, file: !3, line: 268, type: !352)
!497 = !DILocation(line: 268, column: 34, scope: !493)
!498 = !DILocalVariable(name: "height", scope: !493, file: !3, line: 270, type: !74)
!499 = !DILocation(line: 270, column: 10, scope: !493)
!500 = !DILocalVariable(name: "dev_ino_buf", scope: !493, file: !3, line: 271, type: !501)
!501 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dev_ino", file: !502, line: 7, size: 128, elements: !503)
!502 = !DIFile(filename: "./lib/dev-ino.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!503 = !{!504, !507}
!504 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !501, file: !502, line: 9, baseType: !505, size: 64)
!505 = !DIDerivedType(tag: DW_TAG_typedef, name: "ino_t", file: !506, line: 47, baseType: !380)
!506 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/sys/types.h", directory: "")
!507 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !501, file: !502, line: 10, baseType: !508, size: 64, offset: 64)
!508 = !DIDerivedType(tag: DW_TAG_typedef, name: "dev_t", file: !506, line: 59, baseType: !377)
!509 = !DILocation(line: 271, column: 18, scope: !493)
!510 = !DILocalVariable(name: "root_dev_ino", scope: !493, file: !3, line: 272, type: !511)
!511 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !501, size: 64)
!512 = !DILocation(line: 272, column: 19, scope: !493)
!513 = !DILocation(line: 272, column: 34, scope: !493)
!514 = !DILocalVariable(name: "dot_sb", scope: !493, file: !3, line: 273, type: !373)
!515 = !DILocation(line: 273, column: 15, scope: !493)
!516 = !DILocation(line: 275, column: 7, scope: !517)
!517 = distinct !DILexicalBlock(scope: !493, file: !3, line: 275, column: 7)
!518 = !DILocation(line: 275, column: 20, scope: !517)
!519 = !DILocation(line: 275, column: 7, scope: !493)
!520 = !DILocation(line: 276, column: 5, scope: !517)
!521 = !DILocation(line: 279, column: 7, scope: !522)
!522 = distinct !DILexicalBlock(scope: !493, file: !3, line: 279, column: 7)
!523 = !DILocation(line: 279, column: 27, scope: !522)
!524 = !DILocation(line: 279, column: 7, scope: !493)
!525 = !DILocation(line: 280, column: 5, scope: !522)
!526 = !DILocation(line: 282, column: 3, scope: !493)
!527 = !DILocation(line: 285, column: 11, scope: !528)
!528 = distinct !DILexicalBlock(scope: !529, file: !3, line: 285, column: 11)
!529 = distinct !DILexicalBlock(scope: !493, file: !3, line: 283, column: 5)
!530 = !DILocation(line: 285, column: 11, scope: !529)
!531 = !DILocation(line: 286, column: 9, scope: !528)
!532 = !DILocation(line: 288, column: 32, scope: !529)
!533 = !DILocation(line: 288, column: 49, scope: !529)
!534 = !DILocation(line: 288, column: 7, scope: !529)
!535 = distinct !{!535, !526, !536}
!536 = !DILocation(line: 289, column: 5, scope: !493)
!537 = !DILocation(line: 292, column: 7, scope: !538)
!538 = distinct !DILexicalBlock(scope: !493, file: !3, line: 292, column: 7)
!539 = !DILocation(line: 292, column: 18, scope: !538)
!540 = !DILocation(line: 292, column: 27, scope: !538)
!541 = !DILocation(line: 292, column: 7, scope: !493)
!542 = !DILocation(line: 293, column: 24, scope: !538)
!543 = !DILocation(line: 293, column: 5, scope: !538)
!544 = !DILocation(line: 294, column: 1, scope: !493)
!545 = distinct !DISubprogram(name: "file_name_free", scope: !3, file: !3, line: 78, type: !494, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!546 = !DILocalVariable(name: "p", arg: 1, scope: !545, file: !3, line: 78, type: !352)
!547 = !DILocation(line: 78, column: 35, scope: !545)
!548 = !DILocation(line: 80, column: 9, scope: !545)
!549 = !DILocation(line: 80, column: 12, scope: !545)
!550 = !DILocation(line: 80, column: 3, scope: !545)
!551 = !DILocation(line: 81, column: 9, scope: !545)
!552 = !DILocation(line: 81, column: 3, scope: !545)
!553 = !DILocation(line: 82, column: 1, scope: !545)
!554 = distinct !DISubprogram(name: "find_dir_entry", scope: !3, file: !3, line: 153, type: !555, scopeLine: 155, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!555 = !DISubroutineType(types: !556)
!556 = !{null, !557, !352, !74}
!557 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !373, size: 64)
!558 = !DILocalVariable(name: "dot_sb", arg: 1, scope: !554, file: !3, line: 153, type: !557)
!559 = !DILocation(line: 153, column: 30, scope: !554)
!560 = !DILocalVariable(name: "file_name", arg: 2, scope: !554, file: !3, line: 153, type: !352)
!561 = !DILocation(line: 153, column: 56, scope: !554)
!562 = !DILocalVariable(name: "parent_height", arg: 3, scope: !554, file: !3, line: 154, type: !74)
!563 = !DILocation(line: 154, column: 24, scope: !554)
!564 = !DILocalVariable(name: "dirp", scope: !554, file: !3, line: 156, type: !565)
!565 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !566, size: 64)
!566 = !DIDerivedType(tag: DW_TAG_typedef, name: "DIR", file: !567, line: 127, baseType: !568)
!567 = !DIFile(filename: "/usr/include/dirent.h", directory: "")
!568 = !DICompositeType(tag: DW_TAG_structure_type, name: "__dirstream", file: !567, line: 127, flags: DIFlagFwdDecl)
!569 = !DILocation(line: 156, column: 8, scope: !554)
!570 = !DILocalVariable(name: "fd", scope: !554, file: !3, line: 157, type: !19)
!571 = !DILocation(line: 157, column: 7, scope: !554)
!572 = !DILocalVariable(name: "parent_sb", scope: !554, file: !3, line: 158, type: !373)
!573 = !DILocation(line: 158, column: 15, scope: !554)
!574 = !DILocalVariable(name: "use_lstat", scope: !554, file: !3, line: 159, type: !38)
!575 = !DILocation(line: 159, column: 8, scope: !554)
!576 = !DILocalVariable(name: "found", scope: !554, file: !3, line: 160, type: !38)
!577 = !DILocation(line: 160, column: 8, scope: !554)
!578 = !DILocation(line: 162, column: 10, scope: !554)
!579 = !DILocation(line: 162, column: 8, scope: !554)
!580 = !DILocation(line: 163, column: 7, scope: !581)
!581 = distinct !DILexicalBlock(scope: !554, file: !3, line: 163, column: 7)
!582 = !DILocation(line: 163, column: 12, scope: !581)
!583 = !DILocation(line: 163, column: 7, scope: !554)
!584 = !DILocation(line: 164, column: 5, scope: !581)
!585 = !DILocation(line: 167, column: 15, scope: !554)
!586 = !DILocation(line: 167, column: 8, scope: !554)
!587 = !DILocation(line: 167, column: 6, scope: !554)
!588 = !DILocation(line: 168, column: 13, scope: !589)
!589 = distinct !DILexicalBlock(scope: !554, file: !3, line: 168, column: 7)
!590 = !DILocation(line: 168, column: 10, scope: !589)
!591 = !DILocation(line: 168, column: 8, scope: !589)
!592 = !DILocation(line: 168, column: 26, scope: !589)
!593 = !DILocation(line: 168, column: 18, scope: !589)
!594 = !DILocation(line: 168, column: 32, scope: !589)
!595 = !DILocation(line: 168, column: 46, scope: !589)
!596 = !DILocation(line: 168, column: 7, scope: !554)
!597 = !DILocation(line: 169, column: 5, scope: !589)
!598 = !DILocation(line: 172, column: 13, scope: !599)
!599 = distinct !DILexicalBlock(scope: !554, file: !3, line: 172, column: 7)
!600 = !DILocation(line: 172, column: 10, scope: !599)
!601 = !DILocation(line: 172, column: 8, scope: !599)
!602 = !DILocation(line: 172, column: 25, scope: !599)
!603 = !DILocation(line: 172, column: 18, scope: !599)
!604 = !DILocation(line: 172, column: 43, scope: !599)
!605 = !DILocation(line: 172, column: 67, scope: !599)
!606 = !DILocation(line: 172, column: 7, scope: !554)
!607 = !DILocation(line: 173, column: 5, scope: !599)
!608 = !DILocation(line: 178, column: 26, scope: !554)
!609 = !DILocation(line: 178, column: 36, scope: !554)
!610 = !DILocation(line: 178, column: 44, scope: !554)
!611 = !DILocation(line: 178, column: 33, scope: !554)
!612 = !DILocation(line: 178, column: 13, scope: !554)
!613 = !DILocation(line: 180, column: 9, scope: !554)
!614 = !DILocation(line: 181, column: 3, scope: !554)
!615 = !DILocalVariable(name: "dp", scope: !616, file: !3, line: 183, type: !617)
!616 = distinct !DILexicalBlock(scope: !554, file: !3, line: 182, column: 5)
!617 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !618, size: 64)
!618 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !619)
!619 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dirent", file: !620, line: 22, size: 2240, elements: !621)
!620 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/dirent.h", directory: "")
!621 = !{!622, !623, !624, !625, !626}
!622 = !DIDerivedType(tag: DW_TAG_member, name: "d_ino", scope: !619, file: !620, line: 25, baseType: !380, size: 64)
!623 = !DIDerivedType(tag: DW_TAG_member, name: "d_off", scope: !619, file: !620, line: 26, baseType: !392, size: 64, offset: 64)
!624 = !DIDerivedType(tag: DW_TAG_member, name: "d_reclen", scope: !619, file: !620, line: 31, baseType: !73, size: 16, offset: 128)
!625 = !DIDerivedType(tag: DW_TAG_member, name: "d_type", scope: !619, file: !620, line: 32, baseType: !148, size: 8, offset: 144)
!626 = !DIDerivedType(tag: DW_TAG_member, name: "d_name", scope: !619, file: !620, line: 33, baseType: !105, size: 2048, offset: 152)
!627 = !DILocation(line: 183, column: 28, scope: !616)
!628 = !DILocalVariable(name: "ent_sb", scope: !616, file: !3, line: 184, type: !373)
!629 = !DILocation(line: 184, column: 19, scope: !616)
!630 = !DILocalVariable(name: "ino", scope: !616, file: !3, line: 185, type: !505)
!631 = !DILocation(line: 185, column: 13, scope: !616)
!632 = !DILocation(line: 187, column: 7, scope: !616)
!633 = !DILocation(line: 187, column: 13, scope: !616)
!634 = !DILocation(line: 188, column: 50, scope: !635)
!635 = distinct !DILexicalBlock(scope: !616, file: !3, line: 188, column: 11)
!636 = !DILocation(line: 188, column: 17, scope: !635)
!637 = !DILocation(line: 188, column: 15, scope: !635)
!638 = !DILocation(line: 188, column: 57, scope: !635)
!639 = !DILocation(line: 188, column: 11, scope: !616)
!640 = !DILocation(line: 190, column: 15, scope: !641)
!641 = distinct !DILexicalBlock(scope: !642, file: !3, line: 190, column: 15)
!642 = distinct !DILexicalBlock(scope: !635, file: !3, line: 189, column: 9)
!643 = !DILocation(line: 190, column: 15, scope: !642)
!644 = !DILocalVariable(name: "e", scope: !645, file: !3, line: 193, type: !19)
!645 = distinct !DILexicalBlock(scope: !641, file: !3, line: 191, column: 13)
!646 = !DILocation(line: 193, column: 19, scope: !645)
!647 = !DILocation(line: 193, column: 23, scope: !645)
!648 = !DILocation(line: 194, column: 25, scope: !645)
!649 = !DILocation(line: 194, column: 15, scope: !645)
!650 = !DILocation(line: 195, column: 23, scope: !645)
!651 = !DILocation(line: 195, column: 15, scope: !645)
!652 = !DILocation(line: 195, column: 21, scope: !645)
!653 = !DILocation(line: 198, column: 20, scope: !645)
!654 = !DILocation(line: 199, column: 13, scope: !645)
!655 = !DILocation(line: 200, column: 11, scope: !642)
!656 = !DILocation(line: 203, column: 13, scope: !616)
!657 = !DILocation(line: 203, column: 11, scope: !616)
!658 = !DILocation(line: 205, column: 11, scope: !659)
!659 = distinct !DILexicalBlock(scope: !616, file: !3, line: 205, column: 11)
!660 = !DILocation(line: 205, column: 15, scope: !659)
!661 = !DILocation(line: 205, column: 38, scope: !659)
!662 = !DILocation(line: 205, column: 41, scope: !659)
!663 = !DILocation(line: 205, column: 11, scope: !616)
!664 = !DILocation(line: 207, column: 22, scope: !665)
!665 = distinct !DILexicalBlock(scope: !666, file: !3, line: 207, column: 15)
!666 = distinct !DILexicalBlock(scope: !659, file: !3, line: 206, column: 9)
!667 = !DILocation(line: 207, column: 26, scope: !665)
!668 = !DILocation(line: 207, column: 15, scope: !665)
!669 = !DILocation(line: 207, column: 43, scope: !665)
!670 = !DILocation(line: 207, column: 15, scope: !666)
!671 = !DILocation(line: 210, column: 15, scope: !672)
!672 = distinct !DILexicalBlock(scope: !665, file: !3, line: 208, column: 13)
!673 = distinct !{!673, !614, !674}
!674 = !DILocation(line: 226, column: 5, scope: !554)
!675 = !DILocation(line: 212, column: 24, scope: !666)
!676 = !DILocation(line: 212, column: 15, scope: !666)
!677 = !DILocation(line: 213, column: 9, scope: !666)
!678 = !DILocation(line: 215, column: 11, scope: !679)
!679 = distinct !DILexicalBlock(scope: !616, file: !3, line: 215, column: 11)
!680 = !DILocation(line: 215, column: 18, scope: !679)
!681 = !DILocation(line: 215, column: 26, scope: !679)
!682 = !DILocation(line: 215, column: 15, scope: !679)
!683 = !DILocation(line: 215, column: 11, scope: !616)
!684 = !DILocation(line: 216, column: 9, scope: !679)
!685 = !DILocation(line: 220, column: 14, scope: !686)
!686 = distinct !DILexicalBlock(scope: !616, file: !3, line: 220, column: 12)
!687 = !DILocation(line: 220, column: 24, scope: !686)
!688 = !DILocation(line: 220, column: 34, scope: !686)
!689 = !DILocation(line: 220, column: 44, scope: !686)
!690 = !DILocation(line: 220, column: 52, scope: !686)
!691 = !DILocation(line: 220, column: 41, scope: !686)
!692 = !DILocation(line: 220, column: 12, scope: !616)
!693 = !DILocation(line: 222, column: 30, scope: !694)
!694 = distinct !DILexicalBlock(scope: !686, file: !3, line: 221, column: 9)
!695 = !DILocation(line: 222, column: 41, scope: !694)
!696 = !DILocation(line: 222, column: 45, scope: !694)
!697 = !DILocation(line: 222, column: 53, scope: !694)
!698 = !DILocation(line: 222, column: 11, scope: !694)
!699 = !DILocation(line: 223, column: 17, scope: !694)
!700 = !DILocation(line: 224, column: 11, scope: !694)
!701 = !DILocation(line: 228, column: 7, scope: !702)
!702 = distinct !DILexicalBlock(scope: !554, file: !3, line: 228, column: 7)
!703 = !DILocation(line: 228, column: 12, scope: !702)
!704 = !DILocation(line: 228, column: 20, scope: !702)
!705 = !DILocation(line: 228, column: 33, scope: !702)
!706 = !DILocation(line: 228, column: 23, scope: !702)
!707 = !DILocation(line: 228, column: 39, scope: !702)
!708 = !DILocation(line: 228, column: 7, scope: !554)
!709 = !DILocation(line: 232, column: 7, scope: !710)
!710 = distinct !DILexicalBlock(scope: !702, file: !3, line: 229, column: 5)
!711 = !DILocation(line: 236, column: 10, scope: !712)
!712 = distinct !DILexicalBlock(scope: !554, file: !3, line: 236, column: 8)
!713 = !DILocation(line: 236, column: 8, scope: !554)
!714 = !DILocation(line: 237, column: 5, scope: !712)
!715 = !DILocation(line: 241, column: 4, scope: !554)
!716 = !DILocation(line: 241, column: 13, scope: !554)
!717 = !DILocation(line: 242, column: 1, scope: !554)
!718 = !DILocalVariable(name: "dot_sb", arg: 1, scope: !719, file: !3, line: 153, type: !722)
!719 = distinct !DISubprogram(name: "find_dir_entry", scope: !3, file: !3, line: 153, type: !720, scopeLine: 155, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !750, retainedNodes: !4)
!720 = !DISubroutineType(types: !721)
!721 = !{null, !722, !744, !74}
!722 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !723, size: 64)
!723 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !374, line: 46, size: 1152, elements: !724)
!724 = !{!725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !741, !742, !743}
!725 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !723, file: !374, line: 48, baseType: !377, size: 64)
!726 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !723, file: !374, line: 53, baseType: !380, size: 64, offset: 64)
!727 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !723, file: !374, line: 61, baseType: !382, size: 64, offset: 128)
!728 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !723, file: !374, line: 62, baseType: !384, size: 32, offset: 192)
!729 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !723, file: !374, line: 64, baseType: !386, size: 32, offset: 224)
!730 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !723, file: !374, line: 65, baseType: !388, size: 32, offset: 256)
!731 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !723, file: !374, line: 67, baseType: !19, size: 32, offset: 288)
!732 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !723, file: !374, line: 69, baseType: !377, size: 64, offset: 320)
!733 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !723, file: !374, line: 74, baseType: !392, size: 64, offset: 384)
!734 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !723, file: !374, line: 78, baseType: !395, size: 64, offset: 448)
!735 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !723, file: !374, line: 80, baseType: !397, size: 64, offset: 512)
!736 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !723, file: !374, line: 91, baseType: !737, size: 128, offset: 576)
!737 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !400, line: 10, size: 128, elements: !738)
!738 = !{!739, !740}
!739 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !737, file: !400, line: 12, baseType: !403, size: 64)
!740 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !737, file: !400, line: 16, baseType: !405, size: 64, offset: 64)
!741 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !723, file: !374, line: 92, baseType: !737, size: 128, offset: 704)
!742 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !723, file: !374, line: 93, baseType: !737, size: 128, offset: 832)
!743 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !723, file: !374, line: 106, baseType: !409, size: 192, offset: 960)
!744 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !745, size: 64)
!745 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "file_name", file: !3, line: 34, size: 192, elements: !746)
!746 = !{!747, !748, !749}
!747 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !745, file: !3, line: 36, baseType: !7, size: 64)
!748 = !DIDerivedType(tag: DW_TAG_member, name: "n_alloc", scope: !745, file: !3, line: 37, baseType: !74, size: 64, offset: 64)
!749 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !745, file: !3, line: 38, baseType: !7, size: 64, offset: 128)
!750 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !751, nameTableKind: None)
!751 = !{!752}
!752 = !DIGlobalVariableExpression(var: !753, expr: !DIExpression())
!753 = distinct !DIGlobalVariable(name: "longopts", scope: !750, file: !3, line: 41, type: !754, isLocal: true, isDefinition: true)
!754 = !DICompositeType(tag: DW_TAG_array_type, baseType: !755, size: 1280, elements: !23)
!755 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !756)
!756 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !757)
!757 = !{!758, !759, !760, !761}
!758 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !756, file: !13, line: 52, baseType: !16, size: 64)
!759 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !756, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!760 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !756, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!761 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !756, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!762 = !DILocalVariable(name: "file_name", arg: 2, scope: !719, file: !3, line: 153, type: !744)
!763 = !DILocalVariable(name: "parent_height", arg: 3, scope: !719, file: !3, line: 154, type: !74)
!764 = !DILocalVariable(name: "dirp", scope: !719, file: !3, line: 156, type: !565)
!765 = !DILocalVariable(name: "fd", scope: !719, file: !3, line: 157, type: !19)
!766 = !DILocalVariable(name: "parent_sb", scope: !719, file: !3, line: 158, type: !723)
!767 = !DILocalVariable(name: "use_lstat", scope: !719, file: !3, line: 159, type: !38)
!768 = !DILocalVariable(name: "found", scope: !719, file: !3, line: 160, type: !38)
!769 = distinct !DISubprogram(name: "file_name_prepend", scope: !3, file: !3, line: 101, type: !770, scopeLine: 102, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!770 = !DISubroutineType(types: !771)
!771 = !{null, !352, !16, !74}
!772 = !DILocalVariable(name: "p", arg: 1, scope: !769, file: !3, line: 101, type: !352)
!773 = !DILocation(line: 101, column: 38, scope: !769)
!774 = !DILocalVariable(name: "s", arg: 2, scope: !769, file: !3, line: 101, type: !16)
!775 = !DILocation(line: 101, column: 53, scope: !769)
!776 = !DILocalVariable(name: "s_len", arg: 3, scope: !769, file: !3, line: 101, type: !74)
!777 = !DILocation(line: 101, column: 63, scope: !769)
!778 = !DILocalVariable(name: "n_free", scope: !769, file: !3, line: 103, type: !74)
!779 = !DILocation(line: 103, column: 10, scope: !769)
!780 = !DILocation(line: 103, column: 19, scope: !769)
!781 = !DILocation(line: 103, column: 22, scope: !769)
!782 = !DILocation(line: 103, column: 30, scope: !769)
!783 = !DILocation(line: 103, column: 33, scope: !769)
!784 = !DILocation(line: 103, column: 28, scope: !769)
!785 = !DILocation(line: 104, column: 7, scope: !786)
!786 = distinct !DILexicalBlock(scope: !769, file: !3, line: 104, column: 7)
!787 = !DILocation(line: 104, column: 20, scope: !786)
!788 = !DILocation(line: 104, column: 18, scope: !786)
!789 = !DILocation(line: 104, column: 14, scope: !786)
!790 = !DILocation(line: 104, column: 7, scope: !769)
!791 = !DILocalVariable(name: "half", scope: !792, file: !3, line: 106, type: !74)
!792 = distinct !DILexicalBlock(scope: !786, file: !3, line: 105, column: 5)
!793 = !DILocation(line: 106, column: 14, scope: !792)
!794 = !DILocation(line: 106, column: 21, scope: !792)
!795 = !DILocation(line: 106, column: 24, scope: !792)
!796 = !DILocation(line: 106, column: 32, scope: !792)
!797 = !DILocation(line: 106, column: 38, scope: !792)
!798 = !DILocation(line: 106, column: 36, scope: !792)
!799 = !DILocalVariable(name: "q", scope: !792, file: !3, line: 111, type: !7)
!800 = !DILocation(line: 111, column: 13, scope: !792)
!801 = !DILocation(line: 111, column: 30, scope: !792)
!802 = !DILocation(line: 111, column: 17, scope: !792)
!803 = !DILocalVariable(name: "n_used", scope: !792, file: !3, line: 112, type: !74)
!804 = !DILocation(line: 112, column: 14, scope: !792)
!805 = !DILocation(line: 112, column: 23, scope: !792)
!806 = !DILocation(line: 112, column: 26, scope: !792)
!807 = !DILocation(line: 112, column: 36, scope: !792)
!808 = !DILocation(line: 112, column: 34, scope: !792)
!809 = !DILocation(line: 113, column: 18, scope: !792)
!810 = !DILocation(line: 113, column: 26, scope: !792)
!811 = !DILocation(line: 113, column: 24, scope: !792)
!812 = !DILocation(line: 113, column: 20, scope: !792)
!813 = !DILocation(line: 113, column: 33, scope: !792)
!814 = !DILocation(line: 113, column: 31, scope: !792)
!815 = !DILocation(line: 113, column: 7, scope: !792)
!816 = !DILocation(line: 113, column: 10, scope: !792)
!817 = !DILocation(line: 113, column: 16, scope: !792)
!818 = !DILocation(line: 114, column: 15, scope: !792)
!819 = !DILocation(line: 114, column: 18, scope: !792)
!820 = !DILocation(line: 114, column: 25, scope: !792)
!821 = !DILocation(line: 114, column: 28, scope: !792)
!822 = !DILocation(line: 114, column: 34, scope: !792)
!823 = !DILocation(line: 114, column: 32, scope: !792)
!824 = !DILocation(line: 114, column: 42, scope: !792)
!825 = !DILocation(line: 114, column: 7, scope: !792)
!826 = !DILocation(line: 115, column: 13, scope: !792)
!827 = !DILocation(line: 115, column: 16, scope: !792)
!828 = !DILocation(line: 115, column: 7, scope: !792)
!829 = !DILocation(line: 116, column: 16, scope: !792)
!830 = !DILocation(line: 116, column: 7, scope: !792)
!831 = !DILocation(line: 116, column: 10, scope: !792)
!832 = !DILocation(line: 116, column: 14, scope: !792)
!833 = !DILocation(line: 117, column: 24, scope: !792)
!834 = !DILocation(line: 117, column: 22, scope: !792)
!835 = !DILocation(line: 117, column: 7, scope: !792)
!836 = !DILocation(line: 117, column: 10, scope: !792)
!837 = !DILocation(line: 117, column: 18, scope: !792)
!838 = !DILocation(line: 118, column: 5, scope: !792)
!839 = !DILocation(line: 120, column: 19, scope: !769)
!840 = !DILocation(line: 120, column: 17, scope: !769)
!841 = !DILocation(line: 120, column: 3, scope: !769)
!842 = !DILocation(line: 120, column: 6, scope: !769)
!843 = !DILocation(line: 120, column: 12, scope: !769)
!844 = !DILocation(line: 121, column: 3, scope: !769)
!845 = !DILocation(line: 121, column: 6, scope: !769)
!846 = !DILocation(line: 121, column: 15, scope: !769)
!847 = !DILocation(line: 122, column: 11, scope: !769)
!848 = !DILocation(line: 122, column: 14, scope: !769)
!849 = !DILocation(line: 122, column: 20, scope: !769)
!850 = !DILocation(line: 122, column: 25, scope: !769)
!851 = !DILocation(line: 122, column: 28, scope: !769)
!852 = !DILocation(line: 122, column: 3, scope: !769)
!853 = !DILocation(line: 123, column: 1, scope: !769)
!854 = !DILocalVariable(name: "q", scope: !855, file: !3, line: 111, type: !7)
!855 = distinct !DILexicalBlock(scope: !856, file: !3, line: 105, column: 5)
!856 = distinct !DILexicalBlock(scope: !857, file: !3, line: 104, column: 7)
!857 = distinct !DISubprogram(name: "file_name_prepend", scope: !3, file: !3, line: 101, type: !858, scopeLine: 102, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !866, retainedNodes: !4)
!858 = !DISubroutineType(types: !859)
!859 = !{null, !860, !16, !74}
!860 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !861, size: 64)
!861 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "file_name", file: !3, line: 34, size: 192, elements: !862)
!862 = !{!863, !864, !865}
!863 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !861, file: !3, line: 36, baseType: !7, size: 64)
!864 = !DIDerivedType(tag: DW_TAG_member, name: "n_alloc", scope: !861, file: !3, line: 37, baseType: !74, size: 64, offset: 64)
!865 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !861, file: !3, line: 38, baseType: !7, size: 64, offset: 128)
!866 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !867, nameTableKind: None)
!867 = !{!868}
!868 = !DIGlobalVariableExpression(var: !869, expr: !DIExpression())
!869 = distinct !DIGlobalVariable(name: "longopts", scope: !866, file: !3, line: 41, type: !870, isLocal: true, isDefinition: true)
!870 = !DICompositeType(tag: DW_TAG_array_type, baseType: !871, size: 1280, elements: !23)
!871 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !872)
!872 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !873)
!873 = !{!874, !875, !876, !877}
!874 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !872, file: !13, line: 52, baseType: !16, size: 64)
!875 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !872, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!876 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !872, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!877 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !872, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!878 = !DILocalVariable(name: "n_used", scope: !855, file: !3, line: 112, type: !74)
!879 = distinct !DISubprogram(name: "nth_parent", scope: !3, file: !3, line: 127, type: !880, scopeLine: 128, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!880 = !DISubroutineType(types: !881)
!881 = !{!7, !74}
!882 = !DILocalVariable(name: "n", arg: 1, scope: !879, file: !3, line: 127, type: !74)
!883 = !DILocation(line: 127, column: 20, scope: !879)
!884 = !DILocalVariable(name: "buf", scope: !879, file: !3, line: 129, type: !7)
!885 = !DILocation(line: 129, column: 9, scope: !879)
!886 = !DILocation(line: 129, column: 28, scope: !879)
!887 = !DILocation(line: 129, column: 15, scope: !879)
!888 = !DILocalVariable(name: "p", scope: !879, file: !3, line: 130, type: !7)
!889 = !DILocation(line: 130, column: 9, scope: !879)
!890 = !DILocation(line: 130, column: 13, scope: !879)
!891 = !DILocalVariable(name: "i", scope: !892, file: !3, line: 132, type: !74)
!892 = distinct !DILexicalBlock(scope: !879, file: !3, line: 132, column: 3)
!893 = !DILocation(line: 132, column: 15, scope: !892)
!894 = !DILocation(line: 132, column: 8, scope: !892)
!895 = !DILocation(line: 132, column: 22, scope: !896)
!896 = distinct !DILexicalBlock(scope: !892, file: !3, line: 132, column: 3)
!897 = !DILocation(line: 132, column: 26, scope: !896)
!898 = !DILocation(line: 132, column: 24, scope: !896)
!899 = !DILocation(line: 132, column: 3, scope: !892)
!900 = !DILocation(line: 134, column: 15, scope: !901)
!901 = distinct !DILexicalBlock(scope: !896, file: !3, line: 133, column: 5)
!902 = !DILocation(line: 134, column: 7, scope: !901)
!903 = !DILocation(line: 135, column: 9, scope: !901)
!904 = !DILocation(line: 136, column: 5, scope: !901)
!905 = !DILocation(line: 132, column: 30, scope: !896)
!906 = !DILocation(line: 132, column: 3, scope: !896)
!907 = distinct !{!907, !899, !908}
!908 = !DILocation(line: 136, column: 5, scope: !892)
!909 = !DILocation(line: 137, column: 3, scope: !879)
!910 = !DILocation(line: 137, column: 9, scope: !879)
!911 = !DILocation(line: 138, column: 10, scope: !879)
!912 = !DILocation(line: 138, column: 3, scope: !879)
!913 = !DILocalVariable(name: "n", arg: 1, scope: !914, file: !3, line: 127, type: !74)
!914 = distinct !DISubprogram(name: "nth_parent", scope: !3, file: !3, line: 127, type: !880, scopeLine: 128, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !915, retainedNodes: !4)
!915 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !916, nameTableKind: None)
!916 = !{!917}
!917 = !DIGlobalVariableExpression(var: !918, expr: !DIExpression())
!918 = distinct !DIGlobalVariable(name: "longopts", scope: !915, file: !3, line: 41, type: !919, isLocal: true, isDefinition: true)
!919 = !DICompositeType(tag: DW_TAG_array_type, baseType: !920, size: 1280, elements: !23)
!920 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !921)
!921 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !922)
!922 = !{!923, !924, !925, !926}
!923 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !921, file: !13, line: 52, baseType: !16, size: 64)
!924 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !921, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!925 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !921, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!926 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !921, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!927 = !DILocalVariable(name: "buf", scope: !914, file: !3, line: 129, type: !7)
!928 = !DILocalVariable(name: "p", scope: !914, file: !3, line: 130, type: !7)
!929 = !DILocalVariable(name: "i", scope: !930, file: !3, line: 132, type: !74)
!930 = distinct !DILexicalBlock(scope: !914, file: !3, line: 132, column: 3)
!931 = distinct !DISubprogram(name: "readdir_ignoring_dot_and_dotdot", scope: !198, file: !198, line: 278, type: !932, scopeLine: 279, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!932 = !DISubroutineType(types: !933)
!933 = !{!617, !565}
!934 = !DILocalVariable(name: "dirp", arg: 1, scope: !931, file: !198, line: 278, type: !565)
!935 = !DILocation(line: 278, column: 39, scope: !931)
!936 = !DILocation(line: 280, column: 3, scope: !931)
!937 = !DILocalVariable(name: "dp", scope: !938, file: !198, line: 282, type: !617)
!938 = distinct !DILexicalBlock(scope: !931, file: !198, line: 281, column: 5)
!939 = !DILocation(line: 282, column: 28, scope: !938)
!940 = !DILocation(line: 282, column: 42, scope: !938)
!941 = !DILocation(line: 282, column: 33, scope: !938)
!942 = !DILocation(line: 283, column: 11, scope: !943)
!943 = distinct !DILexicalBlock(scope: !938, file: !198, line: 283, column: 11)
!944 = !DILocation(line: 283, column: 14, scope: !943)
!945 = !DILocation(line: 283, column: 22, scope: !943)
!946 = !DILocation(line: 283, column: 42, scope: !943)
!947 = !DILocation(line: 283, column: 46, scope: !943)
!948 = !DILocation(line: 283, column: 27, scope: !943)
!949 = !DILocation(line: 283, column: 11, scope: !938)
!950 = !DILocation(line: 284, column: 16, scope: !943)
!951 = !DILocation(line: 284, column: 9, scope: !943)
!952 = distinct !{!952, !936, !953}
!953 = !DILocation(line: 285, column: 5, scope: !931)
!954 = !DILocalVariable(name: "dirp", arg: 1, scope: !955, file: !198, line: 278, type: !565)
!955 = distinct !DISubprogram(name: "readdir_ignoring_dot_and_dotdot", scope: !198, file: !198, line: 278, type: !956, scopeLine: 279, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !967, retainedNodes: !4)
!956 = !DISubroutineType(types: !957)
!957 = !{!958, !565}
!958 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !959, size: 64)
!959 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !960)
!960 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dirent", file: !620, line: 22, size: 2240, elements: !961)
!961 = !{!962, !963, !964, !965, !966}
!962 = !DIDerivedType(tag: DW_TAG_member, name: "d_ino", scope: !960, file: !620, line: 25, baseType: !380, size: 64)
!963 = !DIDerivedType(tag: DW_TAG_member, name: "d_off", scope: !960, file: !620, line: 26, baseType: !392, size: 64, offset: 64)
!964 = !DIDerivedType(tag: DW_TAG_member, name: "d_reclen", scope: !960, file: !620, line: 31, baseType: !73, size: 16, offset: 128)
!965 = !DIDerivedType(tag: DW_TAG_member, name: "d_type", scope: !960, file: !620, line: 32, baseType: !148, size: 8, offset: 144)
!966 = !DIDerivedType(tag: DW_TAG_member, name: "d_name", scope: !960, file: !620, line: 33, baseType: !105, size: 2048, offset: 152)
!967 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !968, nameTableKind: None)
!968 = !{!969}
!969 = !DIGlobalVariableExpression(var: !970, expr: !DIExpression())
!970 = distinct !DIGlobalVariable(name: "longopts", scope: !967, file: !3, line: 41, type: !971, isLocal: true, isDefinition: true)
!971 = !DICompositeType(tag: DW_TAG_array_type, baseType: !972, size: 1280, elements: !23)
!972 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !973)
!973 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !974)
!974 = !{!975, !976, !977, !978}
!975 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !973, file: !13, line: 52, baseType: !16, size: 64)
!976 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !973, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!977 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !973, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!978 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !973, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!979 = distinct !DISubprogram(name: "dot_or_dotdot", scope: !198, file: !198, line: 265, type: !980, scopeLine: 266, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!980 = !DISubroutineType(types: !981)
!981 = !{!38, !16}
!982 = !DILocalVariable(name: "file_name", arg: 1, scope: !979, file: !198, line: 265, type: !16)
!983 = !DILocation(line: 265, column: 28, scope: !979)
!984 = !DILocation(line: 267, column: 7, scope: !985)
!985 = distinct !DILexicalBlock(scope: !979, file: !198, line: 267, column: 7)
!986 = !DILocation(line: 267, column: 20, scope: !985)
!987 = !DILocation(line: 267, column: 7, scope: !979)
!988 = !DILocalVariable(name: "sep", scope: !989, file: !198, line: 269, type: !8)
!989 = distinct !DILexicalBlock(scope: !985, file: !198, line: 268, column: 5)
!990 = !DILocation(line: 269, column: 12, scope: !989)
!991 = !DILocation(line: 269, column: 18, scope: !989)
!992 = !DILocation(line: 269, column: 29, scope: !989)
!993 = !DILocation(line: 269, column: 42, scope: !989)
!994 = !DILocation(line: 269, column: 50, scope: !989)
!995 = !DILocation(line: 270, column: 17, scope: !989)
!996 = !DILocation(line: 270, column: 21, scope: !989)
!997 = !DILocation(line: 270, column: 24, scope: !989)
!998 = !DILocation(line: 270, column: 7, scope: !989)
!999 = !DILocation(line: 273, column: 5, scope: !985)
!1000 = !DILocation(line: 274, column: 1, scope: !979)
!1001 = !DILocalVariable(name: "file_name", arg: 1, scope: !1002, file: !198, line: 265, type: !16)
!1002 = distinct !DISubprogram(name: "dot_or_dotdot", scope: !198, file: !198, line: 265, type: !980, scopeLine: 266, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1003, retainedNodes: !4)
!1003 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !1004, nameTableKind: None)
!1004 = !{!1005}
!1005 = !DIGlobalVariableExpression(var: !1006, expr: !DIExpression())
!1006 = distinct !DIGlobalVariable(name: "longopts", scope: !1003, file: !3, line: 41, type: !1007, isLocal: true, isDefinition: true)
!1007 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1008, size: 1280, elements: !23)
!1008 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1009)
!1009 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !1010)
!1010 = !{!1011, !1012, !1013, !1014}
!1011 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1009, file: !13, line: 52, baseType: !16, size: 64)
!1012 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !1009, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!1013 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1009, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!1014 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1009, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!1015 = distinct !DISubprogram(name: "close_stdout", scope: !37, file: !37, line: 117, type: !1016, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !32, retainedNodes: !4)
!1016 = !DISubroutineType(types: !1017)
!1017 = !{null}
!1018 = !DILocation(line: 119, column: 21, scope: !1019)
!1019 = distinct !DILexicalBlock(scope: !1015, file: !37, line: 119, column: 7)
!1020 = !DILocation(line: 119, column: 7, scope: !1019)
!1021 = !DILocation(line: 119, column: 29, scope: !1019)
!1022 = !DILocation(line: 120, column: 7, scope: !1019)
!1023 = !DILocation(line: 120, column: 12, scope: !1019)
!1024 = !DILocation(line: 120, column: 25, scope: !1019)
!1025 = !DILocation(line: 120, column: 28, scope: !1019)
!1026 = !DILocation(line: 120, column: 34, scope: !1019)
!1027 = !DILocation(line: 119, column: 7, scope: !1015)
!1028 = !DILocalVariable(name: "write_error", scope: !1029, file: !37, line: 122, type: !16)
!1029 = distinct !DILexicalBlock(scope: !1019, file: !37, line: 121, column: 5)
!1030 = !DILocation(line: 122, column: 19, scope: !1029)
!1031 = !DILocation(line: 122, column: 33, scope: !1029)
!1032 = !DILocation(line: 123, column: 11, scope: !1033)
!1033 = distinct !DILexicalBlock(scope: !1029, file: !37, line: 123, column: 11)
!1034 = !DILocation(line: 123, column: 11, scope: !1029)
!1035 = !DILocation(line: 124, column: 19, scope: !1033)
!1036 = !DILocation(line: 124, column: 52, scope: !1033)
!1037 = !DILocation(line: 124, column: 36, scope: !1033)
!1038 = !DILocation(line: 125, column: 16, scope: !1033)
!1039 = !DILocation(line: 124, column: 9, scope: !1033)
!1040 = !DILocation(line: 127, column: 19, scope: !1033)
!1041 = !DILocation(line: 127, column: 32, scope: !1033)
!1042 = !DILocation(line: 127, column: 9, scope: !1033)
!1043 = !DILocation(line: 129, column: 14, scope: !1029)
!1044 = !DILocation(line: 129, column: 7, scope: !1029)
!1045 = !DILocation(line: 134, column: 42, scope: !1046)
!1046 = distinct !DILexicalBlock(scope: !1015, file: !37, line: 134, column: 7)
!1047 = !DILocation(line: 134, column: 28, scope: !1046)
!1048 = !DILocation(line: 134, column: 50, scope: !1046)
!1049 = !DILocation(line: 134, column: 7, scope: !1015)
!1050 = !DILocation(line: 135, column: 12, scope: !1046)
!1051 = !DILocation(line: 135, column: 5, scope: !1046)
!1052 = !DILocation(line: 136, column: 1, scope: !1015)
!1053 = distinct !DISubprogram(name: "set_program_name", scope: !51, file: !51, line: 39, type: !199, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !48, retainedNodes: !4)
!1054 = !DILocalVariable(name: "argv0", arg: 1, scope: !1053, file: !51, line: 39, type: !16)
!1055 = !DILocation(line: 39, column: 31, scope: !1053)
!1056 = !DILocalVariable(name: "slash", scope: !1053, file: !51, line: 46, type: !16)
!1057 = !DILocation(line: 46, column: 15, scope: !1053)
!1058 = !DILocalVariable(name: "base", scope: !1053, file: !51, line: 47, type: !16)
!1059 = !DILocation(line: 47, column: 15, scope: !1053)
!1060 = !DILocation(line: 51, column: 7, scope: !1061)
!1061 = distinct !DILexicalBlock(scope: !1053, file: !51, line: 51, column: 7)
!1062 = !DILocation(line: 51, column: 13, scope: !1061)
!1063 = !DILocation(line: 51, column: 7, scope: !1053)
!1064 = !DILocation(line: 55, column: 14, scope: !1065)
!1065 = distinct !DILexicalBlock(scope: !1061, file: !51, line: 52, column: 5)
!1066 = !DILocation(line: 54, column: 7, scope: !1065)
!1067 = !DILocation(line: 56, column: 7, scope: !1065)
!1068 = !DILocation(line: 59, column: 20, scope: !1053)
!1069 = !DILocation(line: 59, column: 11, scope: !1053)
!1070 = !DILocation(line: 59, column: 9, scope: !1053)
!1071 = !DILocation(line: 60, column: 11, scope: !1053)
!1072 = !DILocation(line: 60, column: 17, scope: !1053)
!1073 = !DILocation(line: 60, column: 27, scope: !1053)
!1074 = !DILocation(line: 60, column: 33, scope: !1053)
!1075 = !DILocation(line: 60, column: 39, scope: !1053)
!1076 = !DILocation(line: 60, column: 8, scope: !1053)
!1077 = !DILocation(line: 61, column: 7, scope: !1078)
!1078 = distinct !DILexicalBlock(scope: !1053, file: !51, line: 61, column: 7)
!1079 = !DILocation(line: 61, column: 14, scope: !1078)
!1080 = !DILocation(line: 61, column: 12, scope: !1078)
!1081 = !DILocation(line: 61, column: 20, scope: !1078)
!1082 = !DILocation(line: 61, column: 25, scope: !1078)
!1083 = !DILocation(line: 61, column: 37, scope: !1078)
!1084 = !DILocation(line: 61, column: 42, scope: !1078)
!1085 = !DILocation(line: 61, column: 28, scope: !1078)
!1086 = !DILocation(line: 61, column: 61, scope: !1078)
!1087 = !DILocation(line: 61, column: 7, scope: !1053)
!1088 = !DILocation(line: 63, column: 15, scope: !1089)
!1089 = distinct !DILexicalBlock(scope: !1078, file: !51, line: 62, column: 5)
!1090 = !DILocation(line: 63, column: 13, scope: !1089)
!1091 = !DILocation(line: 64, column: 20, scope: !1092)
!1092 = distinct !DILexicalBlock(scope: !1089, file: !51, line: 64, column: 11)
!1093 = !DILocation(line: 64, column: 11, scope: !1092)
!1094 = !DILocation(line: 64, column: 36, scope: !1092)
!1095 = !DILocation(line: 64, column: 11, scope: !1089)
!1096 = !DILocation(line: 66, column: 19, scope: !1097)
!1097 = distinct !DILexicalBlock(scope: !1092, file: !51, line: 65, column: 9)
!1098 = !DILocation(line: 66, column: 24, scope: !1097)
!1099 = !DILocation(line: 66, column: 17, scope: !1097)
!1100 = !DILocation(line: 70, column: 52, scope: !1097)
!1101 = !DILocation(line: 70, column: 41, scope: !1097)
!1102 = !DILocation(line: 72, column: 9, scope: !1097)
!1103 = !DILocation(line: 73, column: 5, scope: !1089)
!1104 = !DILocation(line: 84, column: 18, scope: !1053)
!1105 = !DILocation(line: 84, column: 16, scope: !1053)
!1106 = !DILocation(line: 90, column: 38, scope: !1053)
!1107 = !DILocation(line: 90, column: 27, scope: !1053)
!1108 = !DILocation(line: 92, column: 1, scope: !1053)
!1109 = !DILocalVariable(name: "argv0", arg: 1, scope: !1110, file: !51, line: 39, type: !16)
!1110 = distinct !DISubprogram(name: "set_program_name", scope: !51, file: !51, line: 39, type: !199, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1111, retainedNodes: !4)
!1111 = distinct !DICompileUnit(language: DW_LANG_C99, file: !49, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !1112, nameTableKind: None)
!1112 = !{!1113}
!1113 = !DIGlobalVariableExpression(var: !1114, expr: !DIExpression())
!1114 = distinct !DIGlobalVariable(name: "program_name", scope: !1111, file: !51, line: 33, type: !16, isLocal: false, isDefinition: true)
!1115 = !DILocalVariable(name: "slash", scope: !1110, file: !51, line: 46, type: !16)
!1116 = !DILocalVariable(name: "base", scope: !1110, file: !51, line: 47, type: !16)
!1117 = distinct !DISubprogram(name: "set_char_quoting", scope: !80, file: !80, line: 152, type: !1118, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !4)
!1118 = !DISubroutineType(types: !1119)
!1119 = !{!19, !1120, !8, !19}
!1120 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !93, size: 64)
!1121 = !DILocalVariable(name: "o", arg: 1, scope: !1117, file: !80, line: 152, type: !1120)
!1122 = !DILocation(line: 152, column: 43, scope: !1117)
!1123 = !DILocalVariable(name: "c", arg: 2, scope: !1117, file: !80, line: 152, type: !8)
!1124 = !DILocation(line: 152, column: 51, scope: !1117)
!1125 = !DILocalVariable(name: "i", arg: 3, scope: !1117, file: !80, line: 152, type: !19)
!1126 = !DILocation(line: 152, column: 58, scope: !1117)
!1127 = !DILocalVariable(name: "uc", scope: !1117, file: !80, line: 154, type: !148)
!1128 = !DILocation(line: 154, column: 17, scope: !1117)
!1129 = !DILocation(line: 154, column: 22, scope: !1117)
!1130 = !DILocalVariable(name: "p", scope: !1117, file: !80, line: 155, type: !1131)
!1131 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !59, size: 64)
!1132 = !DILocation(line: 155, column: 17, scope: !1117)
!1133 = !DILocation(line: 156, column: 6, scope: !1117)
!1134 = !DILocation(line: 156, column: 10, scope: !1117)
!1135 = !DILocation(line: 156, column: 41, scope: !1117)
!1136 = !DILocation(line: 156, column: 5, scope: !1117)
!1137 = !DILocation(line: 156, column: 59, scope: !1117)
!1138 = !DILocation(line: 156, column: 62, scope: !1117)
!1139 = !DILocation(line: 156, column: 57, scope: !1117)
!1140 = !DILocalVariable(name: "shift", scope: !1117, file: !80, line: 157, type: !19)
!1141 = !DILocation(line: 157, column: 7, scope: !1117)
!1142 = !DILocation(line: 157, column: 15, scope: !1117)
!1143 = !DILocation(line: 157, column: 18, scope: !1117)
!1144 = !DILocalVariable(name: "r", scope: !1117, file: !80, line: 158, type: !19)
!1145 = !DILocation(line: 158, column: 7, scope: !1117)
!1146 = !DILocation(line: 158, column: 13, scope: !1117)
!1147 = !DILocation(line: 158, column: 12, scope: !1117)
!1148 = !DILocation(line: 158, column: 18, scope: !1117)
!1149 = !DILocation(line: 158, column: 15, scope: !1117)
!1150 = !DILocation(line: 158, column: 25, scope: !1117)
!1151 = !DILocation(line: 159, column: 11, scope: !1117)
!1152 = !DILocation(line: 159, column: 13, scope: !1117)
!1153 = !DILocation(line: 159, column: 20, scope: !1117)
!1154 = !DILocation(line: 159, column: 18, scope: !1117)
!1155 = !DILocation(line: 159, column: 26, scope: !1117)
!1156 = !DILocation(line: 159, column: 23, scope: !1117)
!1157 = !DILocation(line: 159, column: 4, scope: !1117)
!1158 = !DILocation(line: 159, column: 6, scope: !1117)
!1159 = !DILocation(line: 160, column: 10, scope: !1117)
!1160 = !DILocation(line: 160, column: 3, scope: !1117)
!1161 = !DILocalVariable(name: "o", arg: 1, scope: !1162, file: !80, line: 152, type: !1165)
!1162 = distinct !DISubprogram(name: "set_char_quoting", scope: !80, file: !80, line: 152, type: !1163, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1173, retainedNodes: !4)
!1163 = !DISubroutineType(types: !1164)
!1164 = !{!19, !1165, !8, !19}
!1165 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1166, size: 64)
!1166 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !1167)
!1167 = !{!1168, !1169, !1170, !1171, !1172}
!1168 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1166, file: !80, line: 68, baseType: !57, size: 32)
!1169 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1166, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!1170 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1166, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!1171 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1166, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!1172 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1166, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!1173 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !1174, nameTableKind: None)
!1174 = !{!1175, !1177, !1179, !1181, !1183, !1185, !1192, !1194}
!1175 = !DIGlobalVariableExpression(var: !1176, expr: !DIExpression())
!1176 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1173, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!1177 = !DIGlobalVariableExpression(var: !1178, expr: !DIExpression())
!1178 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1173, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!1179 = !DIGlobalVariableExpression(var: !1180, expr: !DIExpression())
!1180 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1173, file: !80, line: 1052, type: !1166, isLocal: false, isDefinition: true)
!1181 = !DIGlobalVariableExpression(var: !1182, expr: !DIExpression())
!1182 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1173, file: !80, line: 116, type: !1166, isLocal: true, isDefinition: true)
!1183 = !DIGlobalVariableExpression(var: !1184, expr: !DIExpression())
!1184 = distinct !DIGlobalVariable(name: "slot0", scope: !1173, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!1185 = !DIGlobalVariableExpression(var: !1186, expr: !DIExpression())
!1186 = distinct !DIGlobalVariable(name: "slotvec", scope: !1173, file: !80, line: 845, type: !1187, isLocal: true, isDefinition: true)
!1187 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1188, size: 64)
!1188 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !1189)
!1189 = !{!1190, !1191}
!1190 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1188, file: !80, line: 836, baseType: !74, size: 64)
!1191 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1188, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!1192 = !DIGlobalVariableExpression(var: !1193, expr: !DIExpression())
!1193 = distinct !DIGlobalVariable(name: "nslots", scope: !1173, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!1194 = !DIGlobalVariableExpression(var: !1195, expr: !DIExpression())
!1195 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1173, file: !80, line: 844, type: !1188, isLocal: true, isDefinition: true)
!1196 = !DILocalVariable(name: "c", arg: 2, scope: !1162, file: !80, line: 152, type: !8)
!1197 = !DILocalVariable(name: "i", arg: 3, scope: !1162, file: !80, line: 152, type: !19)
!1198 = !DILocalVariable(name: "uc", scope: !1162, file: !80, line: 154, type: !148)
!1199 = !DILocalVariable(name: "p", scope: !1162, file: !80, line: 155, type: !1131)
!1200 = distinct !DISubprogram(name: "quotearg_n_style", scope: !80, file: !80, line: 955, type: !1201, scopeLine: 956, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !4)
!1201 = !DISubroutineType(types: !1202)
!1202 = !{!7, !19, !57, !16}
!1203 = !DILocalVariable(name: "n", arg: 1, scope: !1200, file: !80, line: 955, type: !19)
!1204 = !DILocation(line: 955, column: 23, scope: !1200)
!1205 = !DILocalVariable(name: "s", arg: 2, scope: !1200, file: !80, line: 955, type: !57)
!1206 = !DILocation(line: 955, column: 45, scope: !1200)
!1207 = !DILocalVariable(name: "arg", arg: 3, scope: !1200, file: !80, line: 955, type: !16)
!1208 = !DILocation(line: 955, column: 60, scope: !1200)
!1209 = !DILocalVariable(name: "o", scope: !1200, file: !80, line: 957, type: !1210)
!1210 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !93)
!1211 = !DILocation(line: 957, column: 32, scope: !1200)
!1212 = !DILocation(line: 957, column: 64, scope: !1200)
!1213 = !DILocation(line: 957, column: 36, scope: !1200)
!1214 = !DILocation(line: 958, column: 30, scope: !1200)
!1215 = !DILocation(line: 958, column: 33, scope: !1200)
!1216 = !DILocation(line: 958, column: 10, scope: !1200)
!1217 = !DILocation(line: 958, column: 3, scope: !1200)
!1218 = !DILocalVariable(name: "n", arg: 1, scope: !1219, file: !80, line: 955, type: !19)
!1219 = distinct !DISubprogram(name: "quotearg_n_style", scope: !80, file: !80, line: 955, type: !1201, scopeLine: 956, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1220, retainedNodes: !4)
!1220 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !1221, nameTableKind: None)
!1221 = !{!1222, !1224, !1226, !1235, !1237, !1239, !1246, !1248}
!1222 = !DIGlobalVariableExpression(var: !1223, expr: !DIExpression())
!1223 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1220, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!1224 = !DIGlobalVariableExpression(var: !1225, expr: !DIExpression())
!1225 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1220, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!1226 = !DIGlobalVariableExpression(var: !1227, expr: !DIExpression())
!1227 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1220, file: !80, line: 1052, type: !1228, isLocal: false, isDefinition: true)
!1228 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !1229)
!1229 = !{!1230, !1231, !1232, !1233, !1234}
!1230 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1228, file: !80, line: 68, baseType: !57, size: 32)
!1231 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1228, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!1232 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1228, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!1233 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1228, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!1234 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1228, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!1235 = !DIGlobalVariableExpression(var: !1236, expr: !DIExpression())
!1236 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1220, file: !80, line: 116, type: !1228, isLocal: true, isDefinition: true)
!1237 = !DIGlobalVariableExpression(var: !1238, expr: !DIExpression())
!1238 = distinct !DIGlobalVariable(name: "slot0", scope: !1220, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!1239 = !DIGlobalVariableExpression(var: !1240, expr: !DIExpression())
!1240 = distinct !DIGlobalVariable(name: "slotvec", scope: !1220, file: !80, line: 845, type: !1241, isLocal: true, isDefinition: true)
!1241 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1242, size: 64)
!1242 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !1243)
!1243 = !{!1244, !1245}
!1244 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1242, file: !80, line: 836, baseType: !74, size: 64)
!1245 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1242, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!1246 = !DIGlobalVariableExpression(var: !1247, expr: !DIExpression())
!1247 = distinct !DIGlobalVariable(name: "nslots", scope: !1220, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!1248 = !DIGlobalVariableExpression(var: !1249, expr: !DIExpression())
!1249 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1220, file: !80, line: 844, type: !1242, isLocal: true, isDefinition: true)
!1250 = !DILocalVariable(name: "s", arg: 2, scope: !1219, file: !80, line: 955, type: !57)
!1251 = !DILocalVariable(name: "arg", arg: 3, scope: !1219, file: !80, line: 955, type: !16)
!1252 = !DILocalVariable(name: "o", scope: !1219, file: !80, line: 957, type: !1253)
!1253 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1228)
!1254 = distinct !DISubprogram(name: "quoting_options_from_style", scope: !80, file: !80, line: 193, type: !1255, scopeLine: 194, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !4)
!1255 = !DISubroutineType(types: !1256)
!1256 = !{!93, !57}
!1257 = !DILocalVariable(name: "style", arg: 1, scope: !1254, file: !80, line: 193, type: !57)
!1258 = !DILocation(line: 193, column: 48, scope: !1254)
!1259 = !DILocalVariable(name: "o", scope: !1254, file: !80, line: 195, type: !93)
!1260 = !DILocation(line: 195, column: 26, scope: !1254)
!1261 = !DILocation(line: 196, column: 7, scope: !1262)
!1262 = distinct !DILexicalBlock(scope: !1254, file: !80, line: 196, column: 7)
!1263 = !DILocation(line: 196, column: 13, scope: !1262)
!1264 = !DILocation(line: 196, column: 7, scope: !1254)
!1265 = !DILocation(line: 197, column: 5, scope: !1262)
!1266 = !DILocation(line: 198, column: 13, scope: !1254)
!1267 = !DILocation(line: 198, column: 5, scope: !1254)
!1268 = !DILocation(line: 198, column: 11, scope: !1254)
!1269 = !DILocation(line: 199, column: 3, scope: !1254)
!1270 = !DILocalVariable(name: "style", arg: 1, scope: !1271, file: !80, line: 193, type: !57)
!1271 = distinct !DISubprogram(name: "quoting_options_from_style", scope: !80, file: !80, line: 193, type: !1272, scopeLine: 194, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1281, retainedNodes: !4)
!1272 = !DISubroutineType(types: !1273)
!1273 = !{!1274, !57}
!1274 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !1275)
!1275 = !{!1276, !1277, !1278, !1279, !1280}
!1276 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1274, file: !80, line: 68, baseType: !57, size: 32)
!1277 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1274, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!1278 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1274, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1274, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1274, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!1281 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !1282, nameTableKind: None)
!1282 = !{!1283, !1285, !1287, !1289, !1291, !1293, !1300, !1302}
!1283 = !DIGlobalVariableExpression(var: !1284, expr: !DIExpression())
!1284 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1281, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!1285 = !DIGlobalVariableExpression(var: !1286, expr: !DIExpression())
!1286 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1281, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!1287 = !DIGlobalVariableExpression(var: !1288, expr: !DIExpression())
!1288 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1281, file: !80, line: 1052, type: !1274, isLocal: false, isDefinition: true)
!1289 = !DIGlobalVariableExpression(var: !1290, expr: !DIExpression())
!1290 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1281, file: !80, line: 116, type: !1274, isLocal: true, isDefinition: true)
!1291 = !DIGlobalVariableExpression(var: !1292, expr: !DIExpression())
!1292 = distinct !DIGlobalVariable(name: "slot0", scope: !1281, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!1293 = !DIGlobalVariableExpression(var: !1294, expr: !DIExpression())
!1294 = distinct !DIGlobalVariable(name: "slotvec", scope: !1281, file: !80, line: 845, type: !1295, isLocal: true, isDefinition: true)
!1295 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1296, size: 64)
!1296 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !1297)
!1297 = !{!1298, !1299}
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1296, file: !80, line: 836, baseType: !74, size: 64)
!1299 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1296, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!1300 = !DIGlobalVariableExpression(var: !1301, expr: !DIExpression())
!1301 = distinct !DIGlobalVariable(name: "nslots", scope: !1281, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!1302 = !DIGlobalVariableExpression(var: !1303, expr: !DIExpression())
!1303 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1281, file: !80, line: 844, type: !1296, isLocal: true, isDefinition: true)
!1304 = !DILocalVariable(name: "o", scope: !1271, file: !80, line: 195, type: !1274)
!1305 = distinct !DISubprogram(name: "quotearg_n_options", scope: !80, file: !80, line: 877, type: !1306, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !4)
!1306 = !DISubroutineType(types: !1307)
!1307 = !{!7, !19, !16, !74, !1308}
!1308 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1210, size: 64)
!1309 = !DILocalVariable(name: "n", arg: 1, scope: !1305, file: !80, line: 877, type: !19)
!1310 = !DILocation(line: 877, column: 25, scope: !1305)
!1311 = !DILocalVariable(name: "arg", arg: 2, scope: !1305, file: !80, line: 877, type: !16)
!1312 = !DILocation(line: 877, column: 40, scope: !1305)
!1313 = !DILocalVariable(name: "argsize", arg: 3, scope: !1305, file: !80, line: 877, type: !74)
!1314 = !DILocation(line: 877, column: 52, scope: !1305)
!1315 = !DILocalVariable(name: "options", arg: 4, scope: !1305, file: !80, line: 878, type: !1308)
!1316 = !DILocation(line: 878, column: 51, scope: !1305)
!1317 = !DILocalVariable(name: "e", scope: !1305, file: !80, line: 880, type: !19)
!1318 = !DILocation(line: 880, column: 7, scope: !1305)
!1319 = !DILocation(line: 880, column: 11, scope: !1305)
!1320 = !DILocalVariable(name: "sv", scope: !1305, file: !80, line: 882, type: !110)
!1321 = !DILocation(line: 882, column: 19, scope: !1305)
!1322 = !DILocation(line: 882, column: 24, scope: !1305)
!1323 = !DILocation(line: 884, column: 7, scope: !1324)
!1324 = distinct !DILexicalBlock(scope: !1305, file: !80, line: 884, column: 7)
!1325 = !DILocation(line: 884, column: 9, scope: !1324)
!1326 = !DILocation(line: 884, column: 7, scope: !1305)
!1327 = !DILocation(line: 885, column: 5, scope: !1324)
!1328 = !DILocation(line: 887, column: 7, scope: !1329)
!1329 = distinct !DILexicalBlock(scope: !1305, file: !80, line: 887, column: 7)
!1330 = !DILocation(line: 887, column: 17, scope: !1329)
!1331 = !DILocation(line: 887, column: 14, scope: !1329)
!1332 = !DILocation(line: 887, column: 7, scope: !1305)
!1333 = !DILocalVariable(name: "preallocated", scope: !1334, file: !80, line: 889, type: !38)
!1334 = distinct !DILexicalBlock(scope: !1329, file: !80, line: 888, column: 5)
!1335 = !DILocation(line: 889, column: 12, scope: !1334)
!1336 = !DILocation(line: 889, column: 28, scope: !1334)
!1337 = !DILocation(line: 889, column: 31, scope: !1334)
!1338 = !DILocalVariable(name: "nmax", scope: !1334, file: !80, line: 890, type: !19)
!1339 = !DILocation(line: 890, column: 11, scope: !1334)
!1340 = !DILocation(line: 892, column: 11, scope: !1341)
!1341 = distinct !DILexicalBlock(scope: !1334, file: !80, line: 892, column: 11)
!1342 = !DILocation(line: 892, column: 18, scope: !1341)
!1343 = !DILocation(line: 892, column: 16, scope: !1341)
!1344 = !DILocation(line: 892, column: 11, scope: !1334)
!1345 = !DILocation(line: 893, column: 9, scope: !1341)
!1346 = !DILocation(line: 895, column: 32, scope: !1334)
!1347 = !DILocation(line: 895, column: 54, scope: !1334)
!1348 = !DILocation(line: 895, column: 59, scope: !1334)
!1349 = !DILocation(line: 895, column: 61, scope: !1334)
!1350 = !DILocation(line: 895, column: 58, scope: !1334)
!1351 = !DILocation(line: 895, column: 66, scope: !1334)
!1352 = !DILocation(line: 895, column: 22, scope: !1334)
!1353 = !DILocation(line: 895, column: 20, scope: !1334)
!1354 = !DILocation(line: 895, column: 15, scope: !1334)
!1355 = !DILocation(line: 896, column: 11, scope: !1356)
!1356 = distinct !DILexicalBlock(scope: !1334, file: !80, line: 896, column: 11)
!1357 = !DILocation(line: 896, column: 11, scope: !1334)
!1358 = !DILocation(line: 897, column: 10, scope: !1356)
!1359 = !DILocation(line: 897, column: 15, scope: !1356)
!1360 = !DILocation(line: 897, column: 9, scope: !1356)
!1361 = !DILocation(line: 898, column: 15, scope: !1334)
!1362 = !DILocation(line: 898, column: 20, scope: !1334)
!1363 = !DILocation(line: 898, column: 18, scope: !1334)
!1364 = !DILocation(line: 898, column: 7, scope: !1334)
!1365 = !DILocation(line: 898, column: 32, scope: !1334)
!1366 = !DILocation(line: 898, column: 34, scope: !1334)
!1367 = !DILocation(line: 898, column: 40, scope: !1334)
!1368 = !DILocation(line: 898, column: 38, scope: !1334)
!1369 = !DILocation(line: 898, column: 31, scope: !1334)
!1370 = !DILocation(line: 898, column: 48, scope: !1334)
!1371 = !DILocation(line: 899, column: 16, scope: !1334)
!1372 = !DILocation(line: 899, column: 18, scope: !1334)
!1373 = !DILocation(line: 899, column: 14, scope: !1334)
!1374 = !DILocation(line: 900, column: 5, scope: !1334)
!1375 = !DILocalVariable(name: "size", scope: !1376, file: !80, line: 903, type: !74)
!1376 = distinct !DILexicalBlock(scope: !1305, file: !80, line: 902, column: 3)
!1377 = !DILocation(line: 903, column: 12, scope: !1376)
!1378 = !DILocation(line: 903, column: 19, scope: !1376)
!1379 = !DILocation(line: 903, column: 22, scope: !1376)
!1380 = !DILocation(line: 903, column: 25, scope: !1376)
!1381 = !DILocalVariable(name: "val", scope: !1376, file: !80, line: 904, type: !7)
!1382 = !DILocation(line: 904, column: 11, scope: !1376)
!1383 = !DILocation(line: 904, column: 17, scope: !1376)
!1384 = !DILocation(line: 904, column: 20, scope: !1376)
!1385 = !DILocation(line: 904, column: 23, scope: !1376)
!1386 = !DILocalVariable(name: "flags", scope: !1376, file: !80, line: 906, type: !19)
!1387 = !DILocation(line: 906, column: 9, scope: !1376)
!1388 = !DILocation(line: 906, column: 17, scope: !1376)
!1389 = !DILocation(line: 906, column: 26, scope: !1376)
!1390 = !DILocation(line: 906, column: 32, scope: !1376)
!1391 = !DILocalVariable(name: "qsize", scope: !1376, file: !80, line: 907, type: !74)
!1392 = !DILocation(line: 907, column: 12, scope: !1376)
!1393 = !DILocation(line: 907, column: 46, scope: !1376)
!1394 = !DILocation(line: 907, column: 51, scope: !1376)
!1395 = !DILocation(line: 907, column: 57, scope: !1376)
!1396 = !DILocation(line: 907, column: 62, scope: !1376)
!1397 = !DILocation(line: 908, column: 46, scope: !1376)
!1398 = !DILocation(line: 908, column: 55, scope: !1376)
!1399 = !DILocation(line: 908, column: 62, scope: !1376)
!1400 = !DILocation(line: 909, column: 46, scope: !1376)
!1401 = !DILocation(line: 909, column: 55, scope: !1376)
!1402 = !DILocation(line: 910, column: 46, scope: !1376)
!1403 = !DILocation(line: 910, column: 55, scope: !1376)
!1404 = !DILocation(line: 911, column: 46, scope: !1376)
!1405 = !DILocation(line: 911, column: 55, scope: !1376)
!1406 = !DILocation(line: 907, column: 20, scope: !1376)
!1407 = !DILocation(line: 913, column: 9, scope: !1408)
!1408 = distinct !DILexicalBlock(scope: !1376, file: !80, line: 913, column: 9)
!1409 = !DILocation(line: 913, column: 17, scope: !1408)
!1410 = !DILocation(line: 913, column: 14, scope: !1408)
!1411 = !DILocation(line: 913, column: 9, scope: !1376)
!1412 = !DILocation(line: 915, column: 29, scope: !1413)
!1413 = distinct !DILexicalBlock(scope: !1408, file: !80, line: 914, column: 7)
!1414 = !DILocation(line: 915, column: 35, scope: !1413)
!1415 = !DILocation(line: 915, column: 27, scope: !1413)
!1416 = !DILocation(line: 915, column: 9, scope: !1413)
!1417 = !DILocation(line: 915, column: 12, scope: !1413)
!1418 = !DILocation(line: 915, column: 15, scope: !1413)
!1419 = !DILocation(line: 915, column: 20, scope: !1413)
!1420 = !DILocation(line: 916, column: 13, scope: !1421)
!1421 = distinct !DILexicalBlock(scope: !1413, file: !80, line: 916, column: 13)
!1422 = !DILocation(line: 916, column: 17, scope: !1421)
!1423 = !DILocation(line: 916, column: 13, scope: !1413)
!1424 = !DILocation(line: 917, column: 17, scope: !1421)
!1425 = !DILocation(line: 917, column: 11, scope: !1421)
!1426 = !DILocation(line: 918, column: 39, scope: !1413)
!1427 = !DILocation(line: 918, column: 27, scope: !1413)
!1428 = !DILocation(line: 918, column: 25, scope: !1413)
!1429 = !DILocation(line: 918, column: 9, scope: !1413)
!1430 = !DILocation(line: 918, column: 12, scope: !1413)
!1431 = !DILocation(line: 918, column: 15, scope: !1413)
!1432 = !DILocation(line: 918, column: 19, scope: !1413)
!1433 = !DILocation(line: 919, column: 35, scope: !1413)
!1434 = !DILocation(line: 919, column: 40, scope: !1413)
!1435 = !DILocation(line: 919, column: 46, scope: !1413)
!1436 = !DILocation(line: 919, column: 51, scope: !1413)
!1437 = !DILocation(line: 919, column: 60, scope: !1413)
!1438 = !DILocation(line: 919, column: 69, scope: !1413)
!1439 = !DILocation(line: 920, column: 35, scope: !1413)
!1440 = !DILocation(line: 920, column: 42, scope: !1413)
!1441 = !DILocation(line: 920, column: 51, scope: !1413)
!1442 = !DILocation(line: 921, column: 35, scope: !1413)
!1443 = !DILocation(line: 921, column: 44, scope: !1413)
!1444 = !DILocation(line: 922, column: 35, scope: !1413)
!1445 = !DILocation(line: 922, column: 44, scope: !1413)
!1446 = !DILocation(line: 919, column: 9, scope: !1413)
!1447 = !DILocation(line: 923, column: 7, scope: !1413)
!1448 = !DILocation(line: 925, column: 13, scope: !1376)
!1449 = !DILocation(line: 925, column: 5, scope: !1376)
!1450 = !DILocation(line: 925, column: 11, scope: !1376)
!1451 = !DILocation(line: 926, column: 12, scope: !1376)
!1452 = !DILocation(line: 926, column: 5, scope: !1376)
!1453 = !DILocalVariable(name: "val", scope: !1454, file: !80, line: 904, type: !7)
!1454 = distinct !DILexicalBlock(scope: !1455, file: !80, line: 902, column: 3)
!1455 = distinct !DISubprogram(name: "quotearg_n_options", scope: !80, file: !80, line: 877, type: !1456, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1467, retainedNodes: !4)
!1456 = !DISubroutineType(types: !1457)
!1457 = !{!7, !19, !16, !74, !1458}
!1458 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1459, size: 64)
!1459 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1460)
!1460 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !1461)
!1461 = !{!1462, !1463, !1464, !1465, !1466}
!1462 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1460, file: !80, line: 68, baseType: !57, size: 32)
!1463 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1460, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1460, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!1465 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1460, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1460, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!1467 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !1468, nameTableKind: None)
!1468 = !{!1469, !1471, !1473, !1475, !1477, !1479, !1486, !1488}
!1469 = !DIGlobalVariableExpression(var: !1470, expr: !DIExpression())
!1470 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1467, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!1471 = !DIGlobalVariableExpression(var: !1472, expr: !DIExpression())
!1472 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1467, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!1473 = !DIGlobalVariableExpression(var: !1474, expr: !DIExpression())
!1474 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1467, file: !80, line: 1052, type: !1460, isLocal: false, isDefinition: true)
!1475 = !DIGlobalVariableExpression(var: !1476, expr: !DIExpression())
!1476 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1467, file: !80, line: 116, type: !1460, isLocal: true, isDefinition: true)
!1477 = !DIGlobalVariableExpression(var: !1478, expr: !DIExpression())
!1478 = distinct !DIGlobalVariable(name: "slot0", scope: !1467, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!1479 = !DIGlobalVariableExpression(var: !1480, expr: !DIExpression())
!1480 = distinct !DIGlobalVariable(name: "slotvec", scope: !1467, file: !80, line: 845, type: !1481, isLocal: true, isDefinition: true)
!1481 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1482, size: 64)
!1482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !1483)
!1483 = !{!1484, !1485}
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1482, file: !80, line: 836, baseType: !74, size: 64)
!1485 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1482, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!1486 = !DIGlobalVariableExpression(var: !1487, expr: !DIExpression())
!1487 = distinct !DIGlobalVariable(name: "nslots", scope: !1467, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!1488 = !DIGlobalVariableExpression(var: !1489, expr: !DIExpression())
!1489 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1467, file: !80, line: 844, type: !1482, isLocal: true, isDefinition: true)
!1490 = !DILocalVariable(name: "flags", scope: !1454, file: !80, line: 906, type: !19)
!1491 = !DILocalVariable(name: "qsize", scope: !1454, file: !80, line: 907, type: !74)
!1492 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !80, file: !80, line: 256, type: !1493, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !4)
!1493 = !DISubroutineType(types: !1494)
!1494 = !{!74, !7, !74, !16, !74, !57, !19, !1495, !16, !16}
!1495 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1496, size: 64)
!1496 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !59)
!1497 = !DILocalVariable(name: "buffer", arg: 1, scope: !1492, file: !80, line: 256, type: !7)
!1498 = !DILocation(line: 256, column: 33, scope: !1492)
!1499 = !DILocalVariable(name: "buffersize", arg: 2, scope: !1492, file: !80, line: 256, type: !74)
!1500 = !DILocation(line: 256, column: 48, scope: !1492)
!1501 = !DILocalVariable(name: "arg", arg: 3, scope: !1492, file: !80, line: 257, type: !16)
!1502 = !DILocation(line: 257, column: 39, scope: !1492)
!1503 = !DILocalVariable(name: "argsize", arg: 4, scope: !1492, file: !80, line: 257, type: !74)
!1504 = !DILocation(line: 257, column: 51, scope: !1492)
!1505 = !DILocalVariable(name: "quoting_style", arg: 5, scope: !1492, file: !80, line: 258, type: !57)
!1506 = !DILocation(line: 258, column: 46, scope: !1492)
!1507 = !DILocalVariable(name: "flags", arg: 6, scope: !1492, file: !80, line: 258, type: !19)
!1508 = !DILocation(line: 258, column: 65, scope: !1492)
!1509 = !DILocalVariable(name: "quote_these_too", arg: 7, scope: !1492, file: !80, line: 259, type: !1495)
!1510 = !DILocation(line: 259, column: 47, scope: !1492)
!1511 = !DILocalVariable(name: "left_quote", arg: 8, scope: !1492, file: !80, line: 260, type: !16)
!1512 = !DILocation(line: 260, column: 39, scope: !1492)
!1513 = !DILocalVariable(name: "right_quote", arg: 9, scope: !1492, file: !80, line: 261, type: !16)
!1514 = !DILocation(line: 261, column: 39, scope: !1492)
!1515 = !DILocalVariable(name: "i", scope: !1492, file: !80, line: 263, type: !74)
!1516 = !DILocation(line: 263, column: 10, scope: !1492)
!1517 = !DILocalVariable(name: "len", scope: !1492, file: !80, line: 264, type: !74)
!1518 = !DILocation(line: 264, column: 10, scope: !1492)
!1519 = !DILocalVariable(name: "orig_buffersize", scope: !1492, file: !80, line: 265, type: !74)
!1520 = !DILocation(line: 265, column: 10, scope: !1492)
!1521 = !DILocalVariable(name: "quote_string", scope: !1492, file: !80, line: 266, type: !16)
!1522 = !DILocation(line: 266, column: 15, scope: !1492)
!1523 = !DILocalVariable(name: "quote_string_len", scope: !1492, file: !80, line: 267, type: !74)
!1524 = !DILocation(line: 267, column: 10, scope: !1492)
!1525 = !DILocalVariable(name: "backslash_escapes", scope: !1492, file: !80, line: 268, type: !38)
!1526 = !DILocation(line: 268, column: 8, scope: !1492)
!1527 = !DILocalVariable(name: "unibyte_locale", scope: !1492, file: !80, line: 269, type: !38)
!1528 = !DILocation(line: 269, column: 8, scope: !1492)
!1529 = !DILocation(line: 269, column: 25, scope: !1492)
!1530 = !DILocation(line: 269, column: 36, scope: !1492)
!1531 = !DILocalVariable(name: "elide_outer_quotes", scope: !1492, file: !80, line: 270, type: !38)
!1532 = !DILocation(line: 270, column: 8, scope: !1492)
!1533 = !DILocation(line: 270, column: 30, scope: !1492)
!1534 = !DILocation(line: 270, column: 36, scope: !1492)
!1535 = !DILocation(line: 270, column: 61, scope: !1492)
!1536 = !DILocalVariable(name: "pending_shell_escape_end", scope: !1492, file: !80, line: 271, type: !38)
!1537 = !DILocation(line: 271, column: 8, scope: !1492)
!1538 = !DILocalVariable(name: "encountered_single_quote", scope: !1492, file: !80, line: 272, type: !38)
!1539 = !DILocation(line: 272, column: 8, scope: !1492)
!1540 = !DILocalVariable(name: "all_c_and_shell_quote_compat", scope: !1492, file: !80, line: 273, type: !38)
!1541 = !DILocation(line: 273, column: 8, scope: !1492)
!1542 = !DILocation(line: 273, column: 3, scope: !1492)
!1543 = !DILabel(scope: !1492, name: "process_input", file: !80, line: 314)
!1544 = !DILocation(line: 314, column: 2, scope: !1492)
!1545 = !DILocation(line: 316, column: 11, scope: !1492)
!1546 = !DILocation(line: 316, column: 3, scope: !1492)
!1547 = !DILocation(line: 319, column: 21, scope: !1548)
!1548 = distinct !DILexicalBlock(scope: !1492, file: !80, line: 317, column: 5)
!1549 = !DILocation(line: 320, column: 26, scope: !1548)
!1550 = !DILocation(line: 321, column: 7, scope: !1548)
!1551 = !DILocation(line: 323, column: 12, scope: !1552)
!1552 = distinct !DILexicalBlock(scope: !1548, file: !80, line: 323, column: 11)
!1553 = !DILocation(line: 323, column: 11, scope: !1548)
!1554 = !DILocation(line: 324, column: 9, scope: !1552)
!1555 = !DILocation(line: 324, column: 9, scope: !1556)
!1556 = distinct !DILexicalBlock(scope: !1557, file: !80, line: 324, column: 9)
!1557 = distinct !DILexicalBlock(scope: !1552, file: !80, line: 324, column: 9)
!1558 = !DILocation(line: 324, column: 9, scope: !1557)
!1559 = !DILocation(line: 325, column: 25, scope: !1548)
!1560 = !DILocation(line: 326, column: 20, scope: !1548)
!1561 = !DILocation(line: 327, column: 24, scope: !1548)
!1562 = !DILocation(line: 328, column: 7, scope: !1548)
!1563 = !DILocation(line: 331, column: 25, scope: !1548)
!1564 = !DILocation(line: 332, column: 26, scope: !1548)
!1565 = !DILocation(line: 333, column: 7, scope: !1548)
!1566 = !DILocation(line: 339, column: 13, scope: !1567)
!1567 = distinct !DILexicalBlock(scope: !1568, file: !80, line: 339, column: 13)
!1568 = distinct !DILexicalBlock(scope: !1548, file: !80, line: 338, column: 7)
!1569 = !DILocation(line: 339, column: 27, scope: !1567)
!1570 = !DILocation(line: 339, column: 13, scope: !1568)
!1571 = !DILocation(line: 362, column: 50, scope: !1572)
!1572 = distinct !DILexicalBlock(scope: !1567, file: !80, line: 340, column: 11)
!1573 = !DILocation(line: 362, column: 26, scope: !1572)
!1574 = !DILocation(line: 362, column: 24, scope: !1572)
!1575 = !DILocation(line: 363, column: 51, scope: !1572)
!1576 = !DILocation(line: 363, column: 27, scope: !1572)
!1577 = !DILocation(line: 363, column: 25, scope: !1572)
!1578 = !DILocation(line: 364, column: 11, scope: !1572)
!1579 = !DILocation(line: 365, column: 14, scope: !1580)
!1580 = distinct !DILexicalBlock(scope: !1568, file: !80, line: 365, column: 13)
!1581 = !DILocation(line: 365, column: 13, scope: !1568)
!1582 = !DILocation(line: 366, column: 31, scope: !1583)
!1583 = distinct !DILexicalBlock(scope: !1580, file: !80, line: 366, column: 11)
!1584 = !DILocation(line: 366, column: 29, scope: !1583)
!1585 = !DILocation(line: 366, column: 16, scope: !1583)
!1586 = !DILocation(line: 366, column: 44, scope: !1587)
!1587 = distinct !DILexicalBlock(scope: !1583, file: !80, line: 366, column: 11)
!1588 = !DILocation(line: 366, column: 43, scope: !1587)
!1589 = !DILocation(line: 366, column: 11, scope: !1583)
!1590 = !DILocation(line: 367, column: 13, scope: !1587)
!1591 = !DILocation(line: 367, column: 13, scope: !1592)
!1592 = distinct !DILexicalBlock(scope: !1593, file: !80, line: 367, column: 13)
!1593 = distinct !DILexicalBlock(scope: !1587, file: !80, line: 367, column: 13)
!1594 = !DILocation(line: 367, column: 13, scope: !1593)
!1595 = !DILocation(line: 366, column: 70, scope: !1587)
!1596 = !DILocation(line: 366, column: 11, scope: !1587)
!1597 = distinct !{!1597, !1589, !1598}
!1598 = !DILocation(line: 367, column: 13, scope: !1583)
!1599 = !DILocation(line: 368, column: 27, scope: !1568)
!1600 = !DILocation(line: 369, column: 24, scope: !1568)
!1601 = !DILocation(line: 369, column: 22, scope: !1568)
!1602 = !DILocation(line: 370, column: 36, scope: !1568)
!1603 = !DILocation(line: 370, column: 28, scope: !1568)
!1604 = !DILocation(line: 370, column: 26, scope: !1568)
!1605 = !DILocation(line: 372, column: 7, scope: !1548)
!1606 = !DILocation(line: 375, column: 25, scope: !1548)
!1607 = !DILocation(line: 376, column: 7, scope: !1548)
!1608 = !DILocation(line: 378, column: 26, scope: !1548)
!1609 = !DILocation(line: 379, column: 7, scope: !1548)
!1610 = !DILocation(line: 381, column: 12, scope: !1611)
!1611 = distinct !DILexicalBlock(scope: !1548, file: !80, line: 381, column: 11)
!1612 = !DILocation(line: 381, column: 11, scope: !1548)
!1613 = !DILocation(line: 382, column: 27, scope: !1611)
!1614 = !DILocation(line: 382, column: 9, scope: !1611)
!1615 = !DILocation(line: 383, column: 7, scope: !1548)
!1616 = !DILocation(line: 385, column: 21, scope: !1548)
!1617 = !DILocation(line: 386, column: 12, scope: !1618)
!1618 = distinct !DILexicalBlock(scope: !1548, file: !80, line: 386, column: 11)
!1619 = !DILocation(line: 386, column: 11, scope: !1548)
!1620 = !DILocation(line: 387, column: 9, scope: !1618)
!1621 = !DILocation(line: 387, column: 9, scope: !1622)
!1622 = distinct !DILexicalBlock(scope: !1623, file: !80, line: 387, column: 9)
!1623 = distinct !DILexicalBlock(scope: !1618, file: !80, line: 387, column: 9)
!1624 = !DILocation(line: 387, column: 9, scope: !1623)
!1625 = !DILocation(line: 388, column: 20, scope: !1548)
!1626 = !DILocation(line: 389, column: 24, scope: !1548)
!1627 = !DILocation(line: 390, column: 7, scope: !1548)
!1628 = !DILocation(line: 393, column: 26, scope: !1548)
!1629 = !DILocation(line: 394, column: 7, scope: !1548)
!1630 = !DILocation(line: 397, column: 7, scope: !1548)
!1631 = !DILocation(line: 400, column: 10, scope: !1632)
!1632 = distinct !DILexicalBlock(scope: !1492, file: !80, line: 400, column: 3)
!1633 = !DILocation(line: 400, column: 8, scope: !1632)
!1634 = !DILocation(line: 400, column: 19, scope: !1635)
!1635 = distinct !DILexicalBlock(scope: !1632, file: !80, line: 400, column: 3)
!1636 = !DILocation(line: 400, column: 27, scope: !1635)
!1637 = !DILocation(line: 400, column: 41, scope: !1635)
!1638 = !DILocation(line: 400, column: 45, scope: !1635)
!1639 = !DILocation(line: 400, column: 48, scope: !1635)
!1640 = !DILocation(line: 400, column: 58, scope: !1635)
!1641 = !DILocation(line: 400, column: 63, scope: !1635)
!1642 = !DILocation(line: 400, column: 60, scope: !1635)
!1643 = !DILocation(line: 400, column: 16, scope: !1635)
!1644 = !DILocation(line: 400, column: 3, scope: !1632)
!1645 = !DILocalVariable(name: "c", scope: !1646, file: !80, line: 402, type: !148)
!1646 = distinct !DILexicalBlock(scope: !1635, file: !80, line: 401, column: 5)
!1647 = !DILocation(line: 402, column: 21, scope: !1646)
!1648 = !DILocalVariable(name: "esc", scope: !1646, file: !80, line: 403, type: !148)
!1649 = !DILocation(line: 403, column: 21, scope: !1646)
!1650 = !DILocalVariable(name: "is_right_quote", scope: !1646, file: !80, line: 404, type: !38)
!1651 = !DILocation(line: 404, column: 12, scope: !1646)
!1652 = !DILocalVariable(name: "escaping", scope: !1646, file: !80, line: 405, type: !38)
!1653 = !DILocation(line: 405, column: 12, scope: !1646)
!1654 = !DILocalVariable(name: "c_and_shell_quote_compat", scope: !1646, file: !80, line: 406, type: !38)
!1655 = !DILocation(line: 406, column: 12, scope: !1646)
!1656 = !DILocation(line: 408, column: 11, scope: !1657)
!1657 = distinct !DILexicalBlock(scope: !1646, file: !80, line: 408, column: 11)
!1658 = !DILocation(line: 409, column: 11, scope: !1657)
!1659 = !DILocation(line: 409, column: 14, scope: !1657)
!1660 = !DILocation(line: 409, column: 28, scope: !1657)
!1661 = !DILocation(line: 410, column: 11, scope: !1657)
!1662 = !DILocation(line: 410, column: 14, scope: !1657)
!1663 = !DILocation(line: 411, column: 11, scope: !1657)
!1664 = !DILocation(line: 411, column: 15, scope: !1657)
!1665 = !DILocation(line: 411, column: 19, scope: !1657)
!1666 = !DILocation(line: 411, column: 17, scope: !1657)
!1667 = !DILocation(line: 412, column: 19, scope: !1657)
!1668 = !DILocation(line: 412, column: 27, scope: !1657)
!1669 = !DILocation(line: 412, column: 39, scope: !1657)
!1670 = !DILocation(line: 412, column: 46, scope: !1657)
!1671 = !DILocation(line: 412, column: 44, scope: !1657)
!1672 = !DILocation(line: 416, column: 40, scope: !1657)
!1673 = !DILocation(line: 416, column: 32, scope: !1657)
!1674 = !DILocation(line: 416, column: 30, scope: !1657)
!1675 = !DILocation(line: 416, column: 48, scope: !1657)
!1676 = !DILocation(line: 412, column: 15, scope: !1657)
!1677 = !DILocation(line: 417, column: 11, scope: !1657)
!1678 = !DILocation(line: 417, column: 22, scope: !1657)
!1679 = !DILocation(line: 417, column: 28, scope: !1657)
!1680 = !DILocation(line: 417, column: 26, scope: !1657)
!1681 = !DILocation(line: 417, column: 31, scope: !1657)
!1682 = !DILocation(line: 417, column: 45, scope: !1657)
!1683 = !DILocation(line: 417, column: 14, scope: !1657)
!1684 = !DILocation(line: 417, column: 63, scope: !1657)
!1685 = !DILocation(line: 408, column: 11, scope: !1646)
!1686 = !DILocation(line: 419, column: 15, scope: !1687)
!1687 = distinct !DILexicalBlock(scope: !1688, file: !80, line: 419, column: 15)
!1688 = distinct !DILexicalBlock(scope: !1657, file: !80, line: 418, column: 9)
!1689 = !DILocation(line: 419, column: 15, scope: !1688)
!1690 = !DILocation(line: 420, column: 13, scope: !1687)
!1691 = !DILocation(line: 421, column: 26, scope: !1688)
!1692 = !DILocation(line: 422, column: 9, scope: !1688)
!1693 = !DILocation(line: 424, column: 11, scope: !1646)
!1694 = !DILocation(line: 424, column: 15, scope: !1646)
!1695 = !DILocation(line: 424, column: 9, scope: !1646)
!1696 = !DILocation(line: 425, column: 15, scope: !1646)
!1697 = !DILocation(line: 425, column: 7, scope: !1646)
!1698 = !DILocation(line: 428, column: 15, scope: !1699)
!1699 = distinct !DILexicalBlock(scope: !1700, file: !80, line: 428, column: 15)
!1700 = distinct !DILexicalBlock(scope: !1646, file: !80, line: 426, column: 9)
!1701 = !DILocation(line: 428, column: 15, scope: !1700)
!1702 = !DILocation(line: 430, column: 15, scope: !1703)
!1703 = distinct !DILexicalBlock(scope: !1699, file: !80, line: 429, column: 13)
!1704 = !DILocation(line: 430, column: 15, scope: !1705)
!1705 = distinct !DILexicalBlock(scope: !1706, file: !80, line: 430, column: 15)
!1706 = distinct !DILexicalBlock(scope: !1703, file: !80, line: 430, column: 15)
!1707 = !DILocation(line: 430, column: 15, scope: !1706)
!1708 = !DILocation(line: 430, column: 15, scope: !1709)
!1709 = distinct !DILexicalBlock(scope: !1706, file: !80, line: 430, column: 15)
!1710 = !DILocation(line: 430, column: 15, scope: !1711)
!1711 = distinct !DILexicalBlock(scope: !1709, file: !80, line: 430, column: 15)
!1712 = !DILocation(line: 430, column: 15, scope: !1713)
!1713 = distinct !DILexicalBlock(scope: !1714, file: !80, line: 430, column: 15)
!1714 = distinct !DILexicalBlock(scope: !1711, file: !80, line: 430, column: 15)
!1715 = !DILocation(line: 430, column: 15, scope: !1714)
!1716 = !DILocation(line: 430, column: 15, scope: !1717)
!1717 = distinct !DILexicalBlock(scope: !1718, file: !80, line: 430, column: 15)
!1718 = distinct !DILexicalBlock(scope: !1711, file: !80, line: 430, column: 15)
!1719 = !DILocation(line: 430, column: 15, scope: !1718)
!1720 = !DILocation(line: 430, column: 15, scope: !1721)
!1721 = distinct !DILexicalBlock(scope: !1722, file: !80, line: 430, column: 15)
!1722 = distinct !DILexicalBlock(scope: !1711, file: !80, line: 430, column: 15)
!1723 = !DILocation(line: 430, column: 15, scope: !1722)
!1724 = !DILocation(line: 430, column: 15, scope: !1725)
!1725 = distinct !DILexicalBlock(scope: !1726, file: !80, line: 430, column: 15)
!1726 = distinct !DILexicalBlock(scope: !1706, file: !80, line: 430, column: 15)
!1727 = !DILocation(line: 430, column: 15, scope: !1726)
!1728 = !DILocation(line: 437, column: 19, scope: !1729)
!1729 = distinct !DILexicalBlock(scope: !1703, file: !80, line: 437, column: 19)
!1730 = !DILocation(line: 437, column: 33, scope: !1729)
!1731 = !DILocation(line: 438, column: 19, scope: !1729)
!1732 = !DILocation(line: 438, column: 22, scope: !1729)
!1733 = !DILocation(line: 438, column: 24, scope: !1729)
!1734 = !DILocation(line: 438, column: 30, scope: !1729)
!1735 = !DILocation(line: 438, column: 28, scope: !1729)
!1736 = !DILocation(line: 438, column: 38, scope: !1729)
!1737 = !DILocation(line: 438, column: 48, scope: !1729)
!1738 = !DILocation(line: 438, column: 52, scope: !1729)
!1739 = !DILocation(line: 438, column: 54, scope: !1729)
!1740 = !DILocation(line: 438, column: 45, scope: !1729)
!1741 = !DILocation(line: 438, column: 59, scope: !1729)
!1742 = !DILocation(line: 438, column: 62, scope: !1729)
!1743 = !DILocation(line: 438, column: 66, scope: !1729)
!1744 = !DILocation(line: 438, column: 68, scope: !1729)
!1745 = !DILocation(line: 438, column: 73, scope: !1729)
!1746 = !DILocation(line: 437, column: 19, scope: !1703)
!1747 = !DILocation(line: 440, column: 19, scope: !1748)
!1748 = distinct !DILexicalBlock(scope: !1729, file: !80, line: 439, column: 17)
!1749 = !DILocation(line: 440, column: 19, scope: !1750)
!1750 = distinct !DILexicalBlock(scope: !1751, file: !80, line: 440, column: 19)
!1751 = distinct !DILexicalBlock(scope: !1748, file: !80, line: 440, column: 19)
!1752 = !DILocation(line: 440, column: 19, scope: !1751)
!1753 = !DILocation(line: 441, column: 19, scope: !1748)
!1754 = !DILocation(line: 441, column: 19, scope: !1755)
!1755 = distinct !DILexicalBlock(scope: !1756, file: !80, line: 441, column: 19)
!1756 = distinct !DILexicalBlock(scope: !1748, file: !80, line: 441, column: 19)
!1757 = !DILocation(line: 441, column: 19, scope: !1756)
!1758 = !DILocation(line: 442, column: 17, scope: !1748)
!1759 = !DILocation(line: 443, column: 17, scope: !1703)
!1760 = !DILocation(line: 448, column: 13, scope: !1703)
!1761 = !DILocation(line: 449, column: 20, scope: !1762)
!1762 = distinct !DILexicalBlock(scope: !1699, file: !80, line: 449, column: 20)
!1763 = !DILocation(line: 449, column: 26, scope: !1762)
!1764 = !DILocation(line: 449, column: 20, scope: !1699)
!1765 = !DILocation(line: 450, column: 13, scope: !1762)
!1766 = !DILocation(line: 451, column: 11, scope: !1700)
!1767 = !DILocation(line: 454, column: 19, scope: !1700)
!1768 = !DILocation(line: 454, column: 11, scope: !1700)
!1769 = !DILocation(line: 457, column: 19, scope: !1770)
!1770 = distinct !DILexicalBlock(scope: !1771, file: !80, line: 457, column: 19)
!1771 = distinct !DILexicalBlock(scope: !1700, file: !80, line: 455, column: 13)
!1772 = !DILocation(line: 457, column: 19, scope: !1771)
!1773 = !DILocation(line: 458, column: 17, scope: !1770)
!1774 = !DILocation(line: 459, column: 15, scope: !1771)
!1775 = !DILocation(line: 462, column: 20, scope: !1776)
!1776 = distinct !DILexicalBlock(scope: !1771, file: !80, line: 462, column: 19)
!1777 = !DILocation(line: 462, column: 26, scope: !1776)
!1778 = !DILocation(line: 463, column: 19, scope: !1776)
!1779 = !DILocation(line: 463, column: 22, scope: !1776)
!1780 = !DILocation(line: 463, column: 24, scope: !1776)
!1781 = !DILocation(line: 463, column: 30, scope: !1776)
!1782 = !DILocation(line: 463, column: 28, scope: !1776)
!1783 = !DILocation(line: 463, column: 38, scope: !1776)
!1784 = !DILocation(line: 463, column: 41, scope: !1776)
!1785 = !DILocation(line: 463, column: 45, scope: !1776)
!1786 = !DILocation(line: 463, column: 47, scope: !1776)
!1787 = !DILocation(line: 463, column: 52, scope: !1776)
!1788 = !DILocation(line: 462, column: 19, scope: !1771)
!1789 = !DILocation(line: 464, column: 25, scope: !1776)
!1790 = !DILocation(line: 464, column: 29, scope: !1776)
!1791 = !DILocation(line: 464, column: 31, scope: !1776)
!1792 = !DILocation(line: 464, column: 17, scope: !1776)
!1793 = !DILocation(line: 471, column: 25, scope: !1794)
!1794 = distinct !DILexicalBlock(scope: !1795, file: !80, line: 471, column: 25)
!1795 = distinct !DILexicalBlock(scope: !1776, file: !80, line: 465, column: 19)
!1796 = !DILocation(line: 471, column: 25, scope: !1795)
!1797 = !DILocation(line: 472, column: 23, scope: !1794)
!1798 = !DILocation(line: 473, column: 25, scope: !1795)
!1799 = !DILocation(line: 473, column: 29, scope: !1795)
!1800 = !DILocation(line: 473, column: 31, scope: !1795)
!1801 = !DILocation(line: 473, column: 23, scope: !1795)
!1802 = !DILocation(line: 474, column: 23, scope: !1795)
!1803 = !DILocation(line: 475, column: 21, scope: !1795)
!1804 = !DILocation(line: 475, column: 21, scope: !1805)
!1805 = distinct !DILexicalBlock(scope: !1806, file: !80, line: 475, column: 21)
!1806 = distinct !DILexicalBlock(scope: !1795, file: !80, line: 475, column: 21)
!1807 = !DILocation(line: 475, column: 21, scope: !1806)
!1808 = !DILocation(line: 476, column: 21, scope: !1795)
!1809 = !DILocation(line: 476, column: 21, scope: !1810)
!1810 = distinct !DILexicalBlock(scope: !1811, file: !80, line: 476, column: 21)
!1811 = distinct !DILexicalBlock(scope: !1795, file: !80, line: 476, column: 21)
!1812 = !DILocation(line: 476, column: 21, scope: !1811)
!1813 = !DILocation(line: 477, column: 21, scope: !1795)
!1814 = !DILocation(line: 477, column: 21, scope: !1815)
!1815 = distinct !DILexicalBlock(scope: !1816, file: !80, line: 477, column: 21)
!1816 = distinct !DILexicalBlock(scope: !1795, file: !80, line: 477, column: 21)
!1817 = !DILocation(line: 477, column: 21, scope: !1816)
!1818 = !DILocation(line: 478, column: 21, scope: !1795)
!1819 = !DILocation(line: 478, column: 21, scope: !1820)
!1820 = distinct !DILexicalBlock(scope: !1821, file: !80, line: 478, column: 21)
!1821 = distinct !DILexicalBlock(scope: !1795, file: !80, line: 478, column: 21)
!1822 = !DILocation(line: 478, column: 21, scope: !1821)
!1823 = !DILocation(line: 479, column: 21, scope: !1795)
!1824 = !DILocation(line: 482, column: 21, scope: !1795)
!1825 = !DILocation(line: 483, column: 19, scope: !1795)
!1826 = !DILocation(line: 484, column: 15, scope: !1771)
!1827 = !DILocation(line: 487, column: 15, scope: !1771)
!1828 = !DILocation(line: 489, column: 11, scope: !1700)
!1829 = !DILocation(line: 491, column: 24, scope: !1700)
!1830 = !DILocation(line: 491, column: 31, scope: !1700)
!1831 = !DILocation(line: 492, column: 24, scope: !1700)
!1832 = !DILocation(line: 492, column: 31, scope: !1700)
!1833 = !DILocation(line: 493, column: 24, scope: !1700)
!1834 = !DILocation(line: 493, column: 31, scope: !1700)
!1835 = !DILocation(line: 494, column: 24, scope: !1700)
!1836 = !DILocation(line: 494, column: 31, scope: !1700)
!1837 = !DILocation(line: 495, column: 24, scope: !1700)
!1838 = !DILocation(line: 495, column: 31, scope: !1700)
!1839 = !DILocation(line: 496, column: 24, scope: !1700)
!1840 = !DILocation(line: 496, column: 31, scope: !1700)
!1841 = !DILocation(line: 497, column: 24, scope: !1700)
!1842 = !DILocation(line: 497, column: 31, scope: !1700)
!1843 = !DILocation(line: 498, column: 26, scope: !1700)
!1844 = !DILocation(line: 498, column: 24, scope: !1700)
!1845 = !DILocation(line: 500, column: 15, scope: !1846)
!1846 = distinct !DILexicalBlock(scope: !1700, file: !80, line: 500, column: 15)
!1847 = !DILocation(line: 500, column: 29, scope: !1846)
!1848 = !DILocation(line: 500, column: 15, scope: !1700)
!1849 = !DILocation(line: 502, column: 19, scope: !1850)
!1850 = distinct !DILexicalBlock(scope: !1851, file: !80, line: 502, column: 19)
!1851 = distinct !DILexicalBlock(scope: !1846, file: !80, line: 501, column: 13)
!1852 = !DILocation(line: 502, column: 19, scope: !1851)
!1853 = !DILocation(line: 503, column: 17, scope: !1850)
!1854 = !DILocation(line: 504, column: 15, scope: !1851)
!1855 = !DILocation(line: 509, column: 15, scope: !1856)
!1856 = distinct !DILexicalBlock(scope: !1700, file: !80, line: 509, column: 15)
!1857 = !DILocation(line: 509, column: 33, scope: !1856)
!1858 = !DILocation(line: 509, column: 36, scope: !1856)
!1859 = !DILocation(line: 509, column: 55, scope: !1856)
!1860 = !DILocation(line: 509, column: 58, scope: !1856)
!1861 = !DILocation(line: 509, column: 15, scope: !1700)
!1862 = !DILocation(line: 510, column: 13, scope: !1856)
!1863 = !DILabel(scope: !1700, name: "c_and_shell_escape", file: !80, line: 512)
!1864 = !DILocation(line: 512, column: 9, scope: !1700)
!1865 = !DILocation(line: 513, column: 15, scope: !1866)
!1866 = distinct !DILexicalBlock(scope: !1700, file: !80, line: 513, column: 15)
!1867 = !DILocation(line: 513, column: 29, scope: !1866)
!1868 = !DILocation(line: 514, column: 15, scope: !1866)
!1869 = !DILocation(line: 514, column: 18, scope: !1866)
!1870 = !DILocation(line: 513, column: 15, scope: !1700)
!1871 = !DILocation(line: 515, column: 13, scope: !1866)
!1872 = !DILabel(scope: !1700, name: "c_escape", file: !80, line: 517)
!1873 = !DILocation(line: 517, column: 9, scope: !1700)
!1874 = !DILocation(line: 518, column: 15, scope: !1875)
!1875 = distinct !DILexicalBlock(scope: !1700, file: !80, line: 518, column: 15)
!1876 = !DILocation(line: 518, column: 15, scope: !1700)
!1877 = !DILocation(line: 520, column: 19, scope: !1878)
!1878 = distinct !DILexicalBlock(scope: !1875, file: !80, line: 519, column: 13)
!1879 = !DILocation(line: 520, column: 17, scope: !1878)
!1880 = !DILocation(line: 521, column: 15, scope: !1878)
!1881 = !DILocation(line: 523, column: 11, scope: !1700)
!1882 = !DILocation(line: 526, column: 18, scope: !1883)
!1883 = distinct !DILexicalBlock(scope: !1700, file: !80, line: 526, column: 15)
!1884 = !DILocation(line: 526, column: 26, scope: !1883)
!1885 = !DILocation(line: 526, column: 15, scope: !1700)
!1886 = !DILocation(line: 526, column: 40, scope: !1883)
!1887 = !DILocation(line: 526, column: 47, scope: !1883)
!1888 = !DILocation(line: 526, column: 57, scope: !1883)
!1889 = !DILocation(line: 526, column: 65, scope: !1883)
!1890 = !DILocation(line: 527, column: 13, scope: !1883)
!1891 = !DILocation(line: 528, column: 11, scope: !1700)
!1892 = !DILocation(line: 530, column: 15, scope: !1893)
!1893 = distinct !DILexicalBlock(scope: !1700, file: !80, line: 530, column: 15)
!1894 = !DILocation(line: 530, column: 17, scope: !1893)
!1895 = !DILocation(line: 530, column: 15, scope: !1700)
!1896 = !DILocation(line: 531, column: 13, scope: !1893)
!1897 = !DILocation(line: 532, column: 11, scope: !1700)
!1898 = !DILocation(line: 534, column: 36, scope: !1700)
!1899 = !DILocation(line: 535, column: 11, scope: !1700)
!1900 = !DILocation(line: 548, column: 15, scope: !1901)
!1901 = distinct !DILexicalBlock(scope: !1700, file: !80, line: 548, column: 15)
!1902 = !DILocation(line: 548, column: 29, scope: !1901)
!1903 = !DILocation(line: 549, column: 15, scope: !1901)
!1904 = !DILocation(line: 549, column: 18, scope: !1901)
!1905 = !DILocation(line: 548, column: 15, scope: !1700)
!1906 = !DILocation(line: 550, column: 13, scope: !1901)
!1907 = !DILocation(line: 551, column: 11, scope: !1700)
!1908 = !DILocation(line: 554, column: 36, scope: !1700)
!1909 = !DILocation(line: 555, column: 36, scope: !1700)
!1910 = !DILocation(line: 556, column: 15, scope: !1911)
!1911 = distinct !DILexicalBlock(scope: !1700, file: !80, line: 556, column: 15)
!1912 = !DILocation(line: 556, column: 29, scope: !1911)
!1913 = !DILocation(line: 556, column: 15, scope: !1700)
!1914 = !DILocation(line: 558, column: 19, scope: !1915)
!1915 = distinct !DILexicalBlock(scope: !1916, file: !80, line: 558, column: 19)
!1916 = distinct !DILexicalBlock(scope: !1911, file: !80, line: 557, column: 13)
!1917 = !DILocation(line: 558, column: 19, scope: !1916)
!1918 = !DILocation(line: 559, column: 17, scope: !1915)
!1919 = !DILocation(line: 561, column: 19, scope: !1920)
!1920 = distinct !DILexicalBlock(scope: !1916, file: !80, line: 561, column: 19)
!1921 = !DILocation(line: 561, column: 30, scope: !1920)
!1922 = !DILocation(line: 561, column: 35, scope: !1920)
!1923 = !DILocation(line: 561, column: 19, scope: !1916)
!1924 = !DILocation(line: 566, column: 37, scope: !1925)
!1925 = distinct !DILexicalBlock(scope: !1920, file: !80, line: 562, column: 17)
!1926 = !DILocation(line: 566, column: 35, scope: !1925)
!1927 = !DILocation(line: 567, column: 30, scope: !1925)
!1928 = !DILocation(line: 568, column: 17, scope: !1925)
!1929 = !DILocation(line: 570, column: 15, scope: !1916)
!1930 = !DILocation(line: 570, column: 15, scope: !1931)
!1931 = distinct !DILexicalBlock(scope: !1932, file: !80, line: 570, column: 15)
!1932 = distinct !DILexicalBlock(scope: !1916, file: !80, line: 570, column: 15)
!1933 = !DILocation(line: 570, column: 15, scope: !1932)
!1934 = !DILocation(line: 571, column: 15, scope: !1916)
!1935 = !DILocation(line: 571, column: 15, scope: !1936)
!1936 = distinct !DILexicalBlock(scope: !1937, file: !80, line: 571, column: 15)
!1937 = distinct !DILexicalBlock(scope: !1916, file: !80, line: 571, column: 15)
!1938 = !DILocation(line: 571, column: 15, scope: !1937)
!1939 = !DILocation(line: 572, column: 15, scope: !1916)
!1940 = !DILocation(line: 572, column: 15, scope: !1941)
!1941 = distinct !DILexicalBlock(scope: !1942, file: !80, line: 572, column: 15)
!1942 = distinct !DILexicalBlock(scope: !1916, file: !80, line: 572, column: 15)
!1943 = !DILocation(line: 572, column: 15, scope: !1942)
!1944 = !DILocation(line: 573, column: 40, scope: !1916)
!1945 = !DILocation(line: 574, column: 13, scope: !1916)
!1946 = !DILocation(line: 575, column: 11, scope: !1700)
!1947 = !DILocation(line: 599, column: 36, scope: !1700)
!1948 = !DILocation(line: 600, column: 11, scope: !1700)
!1949 = !DILocalVariable(name: "m", scope: !1950, file: !80, line: 610, type: !74)
!1950 = distinct !DILexicalBlock(scope: !1700, file: !80, line: 608, column: 11)
!1951 = !DILocation(line: 610, column: 20, scope: !1950)
!1952 = !DILocalVariable(name: "printable", scope: !1950, file: !80, line: 612, type: !38)
!1953 = !DILocation(line: 612, column: 18, scope: !1950)
!1954 = !DILocation(line: 614, column: 17, scope: !1955)
!1955 = distinct !DILexicalBlock(scope: !1950, file: !80, line: 614, column: 17)
!1956 = !DILocation(line: 614, column: 17, scope: !1950)
!1957 = !DILocation(line: 616, column: 19, scope: !1958)
!1958 = distinct !DILexicalBlock(scope: !1955, file: !80, line: 615, column: 15)
!1959 = !DILocation(line: 617, column: 29, scope: !1958)
!1960 = !DILocation(line: 617, column: 41, scope: !1958)
!1961 = !DILocation(line: 617, column: 27, scope: !1958)
!1962 = !DILocation(line: 618, column: 15, scope: !1958)
!1963 = !DILocalVariable(name: "mbstate", scope: !1964, file: !80, line: 621, type: !1965)
!1964 = distinct !DILexicalBlock(scope: !1955, file: !80, line: 620, column: 15)
!1965 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !1966, line: 6, baseType: !1967)
!1966 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "")
!1967 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !1968, line: 21, baseType: !1969)
!1968 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "")
!1969 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1968, line: 13, size: 64, elements: !1970)
!1970 = !{!1971, !1972}
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !1969, file: !1968, line: 15, baseType: !19, size: 32)
!1972 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !1969, file: !1968, line: 20, baseType: !1973, size: 32, offset: 32)
!1973 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1969, file: !1968, line: 16, size: 32, elements: !1974)
!1974 = !{!1975, !1976}
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !1973, file: !1968, line: 18, baseType: !59, size: 32)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !1973, file: !1968, line: 19, baseType: !1977, size: 32)
!1977 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 32, elements: !1978)
!1978 = !{!1979}
!1979 = !DISubrange(count: 4)
!1980 = !DILocation(line: 621, column: 27, scope: !1964)
!1981 = !DILocation(line: 622, column: 17, scope: !1964)
!1982 = !DILocation(line: 624, column: 19, scope: !1964)
!1983 = !DILocation(line: 625, column: 27, scope: !1964)
!1984 = !DILocation(line: 626, column: 21, scope: !1985)
!1985 = distinct !DILexicalBlock(scope: !1964, file: !80, line: 626, column: 21)
!1986 = !DILocation(line: 626, column: 29, scope: !1985)
!1987 = !DILocation(line: 626, column: 21, scope: !1964)
!1988 = !DILocation(line: 627, column: 37, scope: !1985)
!1989 = !DILocation(line: 627, column: 29, scope: !1985)
!1990 = !DILocation(line: 627, column: 27, scope: !1985)
!1991 = !DILocation(line: 627, column: 19, scope: !1985)
!1992 = !DILocation(line: 629, column: 17, scope: !1964)
!1993 = !DILocalVariable(name: "w", scope: !1994, file: !80, line: 631, type: !1995)
!1994 = distinct !DILexicalBlock(scope: !1964, file: !80, line: 630, column: 19)
!1995 = !DIDerivedType(tag: DW_TAG_typedef, name: "wchar_t", file: !75, line: 74, baseType: !19)
!1996 = !DILocation(line: 631, column: 29, scope: !1994)
!1997 = !DILocalVariable(name: "bytes", scope: !1994, file: !80, line: 632, type: !74)
!1998 = !DILocation(line: 632, column: 28, scope: !1994)
!1999 = !DILocation(line: 632, column: 50, scope: !1994)
!2000 = !DILocation(line: 632, column: 54, scope: !1994)
!2001 = !DILocation(line: 632, column: 58, scope: !1994)
!2002 = !DILocation(line: 632, column: 56, scope: !1994)
!2003 = !DILocation(line: 633, column: 45, scope: !1994)
!2004 = !DILocation(line: 633, column: 56, scope: !1994)
!2005 = !DILocation(line: 633, column: 60, scope: !1994)
!2006 = !DILocation(line: 633, column: 58, scope: !1994)
!2007 = !DILocation(line: 633, column: 53, scope: !1994)
!2008 = !DILocation(line: 632, column: 36, scope: !1994)
!2009 = !DILocation(line: 634, column: 25, scope: !2010)
!2010 = distinct !DILexicalBlock(scope: !1994, file: !80, line: 634, column: 25)
!2011 = !DILocation(line: 634, column: 31, scope: !2010)
!2012 = !DILocation(line: 634, column: 25, scope: !1994)
!2013 = !DILocation(line: 635, column: 23, scope: !2010)
!2014 = !DILocation(line: 636, column: 30, scope: !2015)
!2015 = distinct !DILexicalBlock(scope: !2010, file: !80, line: 636, column: 30)
!2016 = !DILocation(line: 636, column: 36, scope: !2015)
!2017 = !DILocation(line: 636, column: 30, scope: !2010)
!2018 = !DILocation(line: 638, column: 35, scope: !2019)
!2019 = distinct !DILexicalBlock(scope: !2015, file: !80, line: 637, column: 23)
!2020 = !DILocation(line: 639, column: 25, scope: !2019)
!2021 = !DILocation(line: 641, column: 30, scope: !2022)
!2022 = distinct !DILexicalBlock(scope: !2015, file: !80, line: 641, column: 30)
!2023 = !DILocation(line: 641, column: 36, scope: !2022)
!2024 = !DILocation(line: 641, column: 30, scope: !2015)
!2025 = !DILocation(line: 643, column: 35, scope: !2026)
!2026 = distinct !DILexicalBlock(scope: !2022, file: !80, line: 642, column: 23)
!2027 = !DILocation(line: 644, column: 25, scope: !2026)
!2028 = !DILocation(line: 644, column: 32, scope: !2026)
!2029 = !DILocation(line: 644, column: 36, scope: !2026)
!2030 = !DILocation(line: 644, column: 34, scope: !2026)
!2031 = !DILocation(line: 644, column: 40, scope: !2026)
!2032 = !DILocation(line: 644, column: 38, scope: !2026)
!2033 = !DILocation(line: 644, column: 48, scope: !2026)
!2034 = !DILocation(line: 644, column: 51, scope: !2026)
!2035 = !DILocation(line: 644, column: 55, scope: !2026)
!2036 = !DILocation(line: 644, column: 59, scope: !2026)
!2037 = !DILocation(line: 644, column: 57, scope: !2026)
!2038 = !DILocation(line: 0, scope: !2026)
!2039 = !DILocation(line: 645, column: 28, scope: !2026)
!2040 = distinct !{!2040, !2027, !2039}
!2041 = !DILocation(line: 646, column: 25, scope: !2026)
!2042 = !DILocation(line: 654, column: 44, scope: !2043)
!2043 = distinct !DILexicalBlock(scope: !2044, file: !80, line: 654, column: 29)
!2044 = distinct !DILexicalBlock(scope: !2022, file: !80, line: 649, column: 23)
!2045 = !DILocation(line: 655, column: 29, scope: !2043)
!2046 = !DILocation(line: 655, column: 32, scope: !2043)
!2047 = !DILocation(line: 655, column: 46, scope: !2043)
!2048 = !DILocation(line: 654, column: 29, scope: !2044)
!2049 = !DILocalVariable(name: "j", scope: !2050, file: !80, line: 657, type: !74)
!2050 = distinct !DILexicalBlock(scope: !2043, file: !80, line: 656, column: 27)
!2051 = !DILocation(line: 657, column: 36, scope: !2050)
!2052 = !DILocation(line: 658, column: 36, scope: !2053)
!2053 = distinct !DILexicalBlock(scope: !2050, file: !80, line: 658, column: 29)
!2054 = !DILocation(line: 658, column: 34, scope: !2053)
!2055 = !DILocation(line: 658, column: 41, scope: !2056)
!2056 = distinct !DILexicalBlock(scope: !2053, file: !80, line: 658, column: 29)
!2057 = !DILocation(line: 658, column: 45, scope: !2056)
!2058 = !DILocation(line: 658, column: 43, scope: !2056)
!2059 = !DILocation(line: 658, column: 29, scope: !2053)
!2060 = !DILocation(line: 659, column: 39, scope: !2056)
!2061 = !DILocation(line: 659, column: 43, scope: !2056)
!2062 = !DILocation(line: 659, column: 47, scope: !2056)
!2063 = !DILocation(line: 659, column: 45, scope: !2056)
!2064 = !DILocation(line: 659, column: 51, scope: !2056)
!2065 = !DILocation(line: 659, column: 49, scope: !2056)
!2066 = !DILocation(line: 659, column: 31, scope: !2056)
!2067 = !DILocation(line: 663, column: 35, scope: !2068)
!2068 = distinct !DILexicalBlock(scope: !2056, file: !80, line: 660, column: 33)
!2069 = !DILocation(line: 666, column: 35, scope: !2068)
!2070 = !DILocation(line: 667, column: 33, scope: !2068)
!2071 = !DILocation(line: 658, column: 53, scope: !2056)
!2072 = !DILocation(line: 658, column: 29, scope: !2056)
!2073 = distinct !{!2073, !2059, !2074}
!2074 = !DILocation(line: 667, column: 33, scope: !2053)
!2075 = !DILocation(line: 668, column: 27, scope: !2050)
!2076 = !DILocation(line: 670, column: 41, scope: !2077)
!2077 = distinct !DILexicalBlock(scope: !2044, file: !80, line: 670, column: 29)
!2078 = !DILocation(line: 670, column: 31, scope: !2077)
!2079 = !DILocation(line: 670, column: 29, scope: !2044)
!2080 = !DILocation(line: 671, column: 37, scope: !2077)
!2081 = !DILocation(line: 671, column: 27, scope: !2077)
!2082 = !DILocation(line: 672, column: 30, scope: !2044)
!2083 = !DILocation(line: 672, column: 27, scope: !2044)
!2084 = !DILocation(line: 674, column: 19, scope: !1994)
!2085 = !DILocation(line: 675, column: 26, scope: !1964)
!2086 = !DILocation(line: 675, column: 24, scope: !1964)
!2087 = distinct !{!2087, !1992, !2088}
!2088 = !DILocation(line: 675, column: 44, scope: !1964)
!2089 = !DILocation(line: 678, column: 40, scope: !1950)
!2090 = !DILocation(line: 678, column: 38, scope: !1950)
!2091 = !DILocation(line: 680, column: 21, scope: !2092)
!2092 = distinct !DILexicalBlock(scope: !1950, file: !80, line: 680, column: 17)
!2093 = !DILocation(line: 680, column: 19, scope: !2092)
!2094 = !DILocation(line: 680, column: 23, scope: !2092)
!2095 = !DILocation(line: 680, column: 27, scope: !2092)
!2096 = !DILocation(line: 680, column: 45, scope: !2092)
!2097 = !DILocation(line: 680, column: 50, scope: !2092)
!2098 = !DILocation(line: 680, column: 17, scope: !1950)
!2099 = !DILocalVariable(name: "ilim", scope: !2100, file: !80, line: 684, type: !74)
!2100 = distinct !DILexicalBlock(scope: !2092, file: !80, line: 681, column: 15)
!2101 = !DILocation(line: 684, column: 24, scope: !2100)
!2102 = !DILocation(line: 684, column: 31, scope: !2100)
!2103 = !DILocation(line: 684, column: 35, scope: !2100)
!2104 = !DILocation(line: 684, column: 33, scope: !2100)
!2105 = !DILocation(line: 686, column: 17, scope: !2100)
!2106 = !DILocation(line: 688, column: 25, scope: !2107)
!2107 = distinct !DILexicalBlock(scope: !2108, file: !80, line: 688, column: 25)
!2108 = distinct !DILexicalBlock(scope: !2109, file: !80, line: 687, column: 19)
!2109 = distinct !DILexicalBlock(scope: !2110, file: !80, line: 686, column: 17)
!2110 = distinct !DILexicalBlock(scope: !2100, file: !80, line: 686, column: 17)
!2111 = !DILocation(line: 688, column: 43, scope: !2107)
!2112 = !DILocation(line: 688, column: 48, scope: !2107)
!2113 = !DILocation(line: 688, column: 25, scope: !2108)
!2114 = !DILocation(line: 690, column: 25, scope: !2115)
!2115 = distinct !DILexicalBlock(scope: !2107, file: !80, line: 689, column: 23)
!2116 = !DILocation(line: 690, column: 25, scope: !2117)
!2117 = distinct !DILexicalBlock(scope: !2118, file: !80, line: 690, column: 25)
!2118 = distinct !DILexicalBlock(scope: !2115, file: !80, line: 690, column: 25)
!2119 = !DILocation(line: 690, column: 25, scope: !2118)
!2120 = !DILocation(line: 690, column: 25, scope: !2121)
!2121 = distinct !DILexicalBlock(scope: !2118, file: !80, line: 690, column: 25)
!2122 = !DILocation(line: 690, column: 25, scope: !2123)
!2123 = distinct !DILexicalBlock(scope: !2121, file: !80, line: 690, column: 25)
!2124 = !DILocation(line: 690, column: 25, scope: !2125)
!2125 = distinct !DILexicalBlock(scope: !2126, file: !80, line: 690, column: 25)
!2126 = distinct !DILexicalBlock(scope: !2123, file: !80, line: 690, column: 25)
!2127 = !DILocation(line: 690, column: 25, scope: !2126)
!2128 = !DILocation(line: 690, column: 25, scope: !2129)
!2129 = distinct !DILexicalBlock(scope: !2130, file: !80, line: 690, column: 25)
!2130 = distinct !DILexicalBlock(scope: !2123, file: !80, line: 690, column: 25)
!2131 = !DILocation(line: 690, column: 25, scope: !2130)
!2132 = !DILocation(line: 690, column: 25, scope: !2133)
!2133 = distinct !DILexicalBlock(scope: !2134, file: !80, line: 690, column: 25)
!2134 = distinct !DILexicalBlock(scope: !2123, file: !80, line: 690, column: 25)
!2135 = !DILocation(line: 690, column: 25, scope: !2134)
!2136 = !DILocation(line: 690, column: 25, scope: !2137)
!2137 = distinct !DILexicalBlock(scope: !2138, file: !80, line: 690, column: 25)
!2138 = distinct !DILexicalBlock(scope: !2118, file: !80, line: 690, column: 25)
!2139 = !DILocation(line: 690, column: 25, scope: !2138)
!2140 = !DILocation(line: 691, column: 25, scope: !2115)
!2141 = !DILocation(line: 691, column: 25, scope: !2142)
!2142 = distinct !DILexicalBlock(scope: !2143, file: !80, line: 691, column: 25)
!2143 = distinct !DILexicalBlock(scope: !2115, file: !80, line: 691, column: 25)
!2144 = !DILocation(line: 691, column: 25, scope: !2143)
!2145 = !DILocation(line: 692, column: 25, scope: !2115)
!2146 = !DILocation(line: 692, column: 25, scope: !2147)
!2147 = distinct !DILexicalBlock(scope: !2148, file: !80, line: 692, column: 25)
!2148 = distinct !DILexicalBlock(scope: !2115, file: !80, line: 692, column: 25)
!2149 = !DILocation(line: 692, column: 25, scope: !2148)
!2150 = !DILocation(line: 693, column: 36, scope: !2115)
!2151 = !DILocation(line: 693, column: 38, scope: !2115)
!2152 = !DILocation(line: 693, column: 33, scope: !2115)
!2153 = !DILocation(line: 693, column: 29, scope: !2115)
!2154 = !DILocation(line: 693, column: 27, scope: !2115)
!2155 = !DILocation(line: 694, column: 23, scope: !2115)
!2156 = !DILocation(line: 695, column: 30, scope: !2157)
!2157 = distinct !DILexicalBlock(scope: !2107, file: !80, line: 695, column: 30)
!2158 = !DILocation(line: 695, column: 30, scope: !2107)
!2159 = !DILocation(line: 697, column: 25, scope: !2160)
!2160 = distinct !DILexicalBlock(scope: !2157, file: !80, line: 696, column: 23)
!2161 = !DILocation(line: 697, column: 25, scope: !2162)
!2162 = distinct !DILexicalBlock(scope: !2163, file: !80, line: 697, column: 25)
!2163 = distinct !DILexicalBlock(scope: !2160, file: !80, line: 697, column: 25)
!2164 = !DILocation(line: 697, column: 25, scope: !2163)
!2165 = !DILocation(line: 698, column: 40, scope: !2160)
!2166 = !DILocation(line: 699, column: 23, scope: !2160)
!2167 = !DILocation(line: 700, column: 25, scope: !2168)
!2168 = distinct !DILexicalBlock(scope: !2108, file: !80, line: 700, column: 25)
!2169 = !DILocation(line: 700, column: 33, scope: !2168)
!2170 = !DILocation(line: 700, column: 35, scope: !2168)
!2171 = !DILocation(line: 700, column: 30, scope: !2168)
!2172 = !DILocation(line: 700, column: 25, scope: !2108)
!2173 = !DILocation(line: 701, column: 23, scope: !2168)
!2174 = !DILocation(line: 702, column: 21, scope: !2108)
!2175 = !DILocation(line: 702, column: 21, scope: !2176)
!2176 = distinct !DILexicalBlock(scope: !2177, file: !80, line: 702, column: 21)
!2177 = distinct !DILexicalBlock(scope: !2108, file: !80, line: 702, column: 21)
!2178 = !DILocation(line: 702, column: 21, scope: !2177)
!2179 = !DILocation(line: 702, column: 21, scope: !2180)
!2180 = distinct !DILexicalBlock(scope: !2176, file: !80, line: 702, column: 21)
!2181 = !DILocation(line: 702, column: 21, scope: !2182)
!2182 = distinct !DILexicalBlock(scope: !2183, file: !80, line: 702, column: 21)
!2183 = distinct !DILexicalBlock(scope: !2180, file: !80, line: 702, column: 21)
!2184 = !DILocation(line: 702, column: 21, scope: !2183)
!2185 = !DILocation(line: 702, column: 21, scope: !2186)
!2186 = distinct !DILexicalBlock(scope: !2187, file: !80, line: 702, column: 21)
!2187 = distinct !DILexicalBlock(scope: !2180, file: !80, line: 702, column: 21)
!2188 = !DILocation(line: 702, column: 21, scope: !2187)
!2189 = !DILocation(line: 703, column: 21, scope: !2108)
!2190 = !DILocation(line: 703, column: 21, scope: !2191)
!2191 = distinct !DILexicalBlock(scope: !2192, file: !80, line: 703, column: 21)
!2192 = distinct !DILexicalBlock(scope: !2108, file: !80, line: 703, column: 21)
!2193 = !DILocation(line: 703, column: 21, scope: !2192)
!2194 = !DILocation(line: 704, column: 25, scope: !2108)
!2195 = !DILocation(line: 704, column: 29, scope: !2108)
!2196 = !DILocation(line: 704, column: 23, scope: !2108)
!2197 = !DILocation(line: 686, column: 17, scope: !2109)
!2198 = distinct !{!2198, !2199, !2200}
!2199 = !DILocation(line: 686, column: 17, scope: !2110)
!2200 = !DILocation(line: 705, column: 19, scope: !2110)
!2201 = !DILocation(line: 707, column: 17, scope: !2100)
!2202 = !DILocation(line: 710, column: 9, scope: !1700)
!2203 = !DILocation(line: 712, column: 16, scope: !2204)
!2204 = distinct !DILexicalBlock(scope: !1646, file: !80, line: 712, column: 11)
!2205 = !DILocation(line: 712, column: 34, scope: !2204)
!2206 = !DILocation(line: 712, column: 37, scope: !2204)
!2207 = !DILocation(line: 712, column: 51, scope: !2204)
!2208 = !DILocation(line: 713, column: 15, scope: !2204)
!2209 = !DILocation(line: 713, column: 18, scope: !2204)
!2210 = !DILocation(line: 714, column: 14, scope: !2204)
!2211 = !DILocation(line: 714, column: 17, scope: !2204)
!2212 = !DILocation(line: 715, column: 14, scope: !2204)
!2213 = !DILocation(line: 715, column: 17, scope: !2204)
!2214 = !DILocation(line: 715, column: 33, scope: !2204)
!2215 = !DILocation(line: 715, column: 35, scope: !2204)
!2216 = !DILocation(line: 715, column: 51, scope: !2204)
!2217 = !DILocation(line: 715, column: 53, scope: !2204)
!2218 = !DILocation(line: 715, column: 47, scope: !2204)
!2219 = !DILocation(line: 715, column: 65, scope: !2204)
!2220 = !DILocation(line: 716, column: 11, scope: !2204)
!2221 = !DILocation(line: 716, column: 15, scope: !2204)
!2222 = !DILocation(line: 712, column: 11, scope: !1646)
!2223 = !DILocation(line: 717, column: 9, scope: !2204)
!2224 = !DILabel(scope: !1646, name: "store_escape", file: !80, line: 719)
!2225 = !DILocation(line: 719, column: 5, scope: !1646)
!2226 = !DILocation(line: 720, column: 7, scope: !1646)
!2227 = !DILocation(line: 720, column: 7, scope: !2228)
!2228 = distinct !DILexicalBlock(scope: !2229, file: !80, line: 720, column: 7)
!2229 = distinct !DILexicalBlock(scope: !1646, file: !80, line: 720, column: 7)
!2230 = !DILocation(line: 720, column: 7, scope: !2229)
!2231 = !DILocation(line: 720, column: 7, scope: !2232)
!2232 = distinct !DILexicalBlock(scope: !2229, file: !80, line: 720, column: 7)
!2233 = !DILocation(line: 720, column: 7, scope: !2234)
!2234 = distinct !DILexicalBlock(scope: !2232, file: !80, line: 720, column: 7)
!2235 = !DILocation(line: 720, column: 7, scope: !2236)
!2236 = distinct !DILexicalBlock(scope: !2237, file: !80, line: 720, column: 7)
!2237 = distinct !DILexicalBlock(scope: !2234, file: !80, line: 720, column: 7)
!2238 = !DILocation(line: 720, column: 7, scope: !2237)
!2239 = !DILocation(line: 720, column: 7, scope: !2240)
!2240 = distinct !DILexicalBlock(scope: !2241, file: !80, line: 720, column: 7)
!2241 = distinct !DILexicalBlock(scope: !2234, file: !80, line: 720, column: 7)
!2242 = !DILocation(line: 720, column: 7, scope: !2241)
!2243 = !DILocation(line: 720, column: 7, scope: !2244)
!2244 = distinct !DILexicalBlock(scope: !2245, file: !80, line: 720, column: 7)
!2245 = distinct !DILexicalBlock(scope: !2234, file: !80, line: 720, column: 7)
!2246 = !DILocation(line: 720, column: 7, scope: !2245)
!2247 = !DILocation(line: 720, column: 7, scope: !2248)
!2248 = distinct !DILexicalBlock(scope: !2249, file: !80, line: 720, column: 7)
!2249 = distinct !DILexicalBlock(scope: !2229, file: !80, line: 720, column: 7)
!2250 = !DILocation(line: 720, column: 7, scope: !2249)
!2251 = !DILabel(scope: !1646, name: "store_c", file: !80, line: 722)
!2252 = !DILocation(line: 722, column: 5, scope: !1646)
!2253 = !DILocation(line: 723, column: 7, scope: !1646)
!2254 = !DILocation(line: 723, column: 7, scope: !2255)
!2255 = distinct !DILexicalBlock(scope: !2256, file: !80, line: 723, column: 7)
!2256 = distinct !DILexicalBlock(scope: !1646, file: !80, line: 723, column: 7)
!2257 = !DILocation(line: 723, column: 7, scope: !2256)
!2258 = !DILocation(line: 723, column: 7, scope: !2259)
!2259 = distinct !DILexicalBlock(scope: !2255, file: !80, line: 723, column: 7)
!2260 = !DILocation(line: 723, column: 7, scope: !2261)
!2261 = distinct !DILexicalBlock(scope: !2262, file: !80, line: 723, column: 7)
!2262 = distinct !DILexicalBlock(scope: !2259, file: !80, line: 723, column: 7)
!2263 = !DILocation(line: 723, column: 7, scope: !2262)
!2264 = !DILocation(line: 723, column: 7, scope: !2265)
!2265 = distinct !DILexicalBlock(scope: !2266, file: !80, line: 723, column: 7)
!2266 = distinct !DILexicalBlock(scope: !2259, file: !80, line: 723, column: 7)
!2267 = !DILocation(line: 723, column: 7, scope: !2266)
!2268 = !DILocation(line: 724, column: 7, scope: !1646)
!2269 = !DILocation(line: 724, column: 7, scope: !2270)
!2270 = distinct !DILexicalBlock(scope: !2271, file: !80, line: 724, column: 7)
!2271 = distinct !DILexicalBlock(scope: !1646, file: !80, line: 724, column: 7)
!2272 = !DILocation(line: 724, column: 7, scope: !2271)
!2273 = !DILocation(line: 726, column: 13, scope: !2274)
!2274 = distinct !DILexicalBlock(scope: !1646, file: !80, line: 726, column: 11)
!2275 = !DILocation(line: 726, column: 11, scope: !1646)
!2276 = !DILocation(line: 727, column: 38, scope: !2274)
!2277 = !DILocation(line: 727, column: 9, scope: !2274)
!2278 = !DILocation(line: 728, column: 5, scope: !1646)
!2279 = !DILocation(line: 400, column: 75, scope: !1635)
!2280 = !DILocation(line: 400, column: 3, scope: !1635)
!2281 = distinct !{!2281, !1644, !2282}
!2282 = !DILocation(line: 728, column: 5, scope: !1632)
!2283 = !DILocation(line: 730, column: 7, scope: !2284)
!2284 = distinct !DILexicalBlock(scope: !1492, file: !80, line: 730, column: 7)
!2285 = !DILocation(line: 730, column: 11, scope: !2284)
!2286 = !DILocation(line: 730, column: 16, scope: !2284)
!2287 = !DILocation(line: 730, column: 19, scope: !2284)
!2288 = !DILocation(line: 730, column: 33, scope: !2284)
!2289 = !DILocation(line: 731, column: 7, scope: !2284)
!2290 = !DILocation(line: 731, column: 10, scope: !2284)
!2291 = !DILocation(line: 730, column: 7, scope: !1492)
!2292 = !DILocation(line: 732, column: 5, scope: !2284)
!2293 = !DILocation(line: 738, column: 7, scope: !2294)
!2294 = distinct !DILexicalBlock(scope: !1492, file: !80, line: 738, column: 7)
!2295 = !DILocation(line: 738, column: 21, scope: !2294)
!2296 = !DILocation(line: 738, column: 51, scope: !2294)
!2297 = !DILocation(line: 738, column: 56, scope: !2294)
!2298 = !DILocation(line: 739, column: 7, scope: !2294)
!2299 = !DILocation(line: 739, column: 10, scope: !2294)
!2300 = !DILocation(line: 738, column: 7, scope: !1492)
!2301 = !DILocation(line: 741, column: 11, scope: !2302)
!2302 = distinct !DILexicalBlock(scope: !2303, file: !80, line: 741, column: 11)
!2303 = distinct !DILexicalBlock(scope: !2294, file: !80, line: 740, column: 5)
!2304 = !DILocation(line: 741, column: 11, scope: !2303)
!2305 = !DILocation(line: 742, column: 42, scope: !2302)
!2306 = !DILocation(line: 742, column: 50, scope: !2302)
!2307 = !DILocation(line: 742, column: 67, scope: !2302)
!2308 = !DILocation(line: 742, column: 72, scope: !2302)
!2309 = !DILocation(line: 744, column: 42, scope: !2302)
!2310 = !DILocation(line: 744, column: 49, scope: !2302)
!2311 = !DILocation(line: 745, column: 42, scope: !2302)
!2312 = !DILocation(line: 745, column: 54, scope: !2302)
!2313 = !DILocation(line: 742, column: 16, scope: !2302)
!2314 = !DILocation(line: 742, column: 9, scope: !2302)
!2315 = !DILocation(line: 746, column: 18, scope: !2316)
!2316 = distinct !DILexicalBlock(scope: !2302, file: !80, line: 746, column: 16)
!2317 = !DILocation(line: 746, column: 29, scope: !2316)
!2318 = !DILocation(line: 746, column: 32, scope: !2316)
!2319 = !DILocation(line: 746, column: 16, scope: !2302)
!2320 = !DILocation(line: 749, column: 24, scope: !2321)
!2321 = distinct !DILexicalBlock(scope: !2316, file: !80, line: 747, column: 9)
!2322 = !DILocation(line: 749, column: 22, scope: !2321)
!2323 = !DILocation(line: 750, column: 15, scope: !2321)
!2324 = !DILocation(line: 751, column: 11, scope: !2321)
!2325 = !DILocation(line: 753, column: 5, scope: !2303)
!2326 = !DILocation(line: 755, column: 7, scope: !2327)
!2327 = distinct !DILexicalBlock(scope: !1492, file: !80, line: 755, column: 7)
!2328 = !DILocation(line: 755, column: 20, scope: !2327)
!2329 = !DILocation(line: 755, column: 24, scope: !2327)
!2330 = !DILocation(line: 755, column: 7, scope: !1492)
!2331 = !DILocation(line: 756, column: 5, scope: !2327)
!2332 = !DILocation(line: 756, column: 13, scope: !2333)
!2333 = distinct !DILexicalBlock(scope: !2334, file: !80, line: 756, column: 5)
!2334 = distinct !DILexicalBlock(scope: !2327, file: !80, line: 756, column: 5)
!2335 = !DILocation(line: 756, column: 12, scope: !2333)
!2336 = !DILocation(line: 756, column: 5, scope: !2334)
!2337 = !DILocation(line: 757, column: 7, scope: !2333)
!2338 = !DILocation(line: 757, column: 7, scope: !2339)
!2339 = distinct !DILexicalBlock(scope: !2340, file: !80, line: 757, column: 7)
!2340 = distinct !DILexicalBlock(scope: !2333, file: !80, line: 757, column: 7)
!2341 = !DILocation(line: 757, column: 7, scope: !2340)
!2342 = !DILocation(line: 756, column: 39, scope: !2333)
!2343 = !DILocation(line: 756, column: 5, scope: !2333)
!2344 = distinct !{!2344, !2336, !2345}
!2345 = !DILocation(line: 757, column: 7, scope: !2334)
!2346 = !DILocation(line: 759, column: 7, scope: !2347)
!2347 = distinct !DILexicalBlock(scope: !1492, file: !80, line: 759, column: 7)
!2348 = !DILocation(line: 759, column: 13, scope: !2347)
!2349 = !DILocation(line: 759, column: 11, scope: !2347)
!2350 = !DILocation(line: 759, column: 7, scope: !1492)
!2351 = !DILocation(line: 760, column: 5, scope: !2347)
!2352 = !DILocation(line: 760, column: 12, scope: !2347)
!2353 = !DILocation(line: 760, column: 17, scope: !2347)
!2354 = !DILocation(line: 761, column: 10, scope: !1492)
!2355 = !DILocation(line: 761, column: 3, scope: !1492)
!2356 = !DILabel(scope: !1492, name: "force_outer_quoting_style", file: !80, line: 763)
!2357 = !DILocation(line: 763, column: 2, scope: !1492)
!2358 = !DILocation(line: 766, column: 7, scope: !2359)
!2359 = distinct !DILexicalBlock(scope: !1492, file: !80, line: 766, column: 7)
!2360 = !DILocation(line: 766, column: 21, scope: !2359)
!2361 = !DILocation(line: 766, column: 51, scope: !2359)
!2362 = !DILocation(line: 766, column: 54, scope: !2359)
!2363 = !DILocation(line: 766, column: 7, scope: !1492)
!2364 = !DILocation(line: 767, column: 19, scope: !2359)
!2365 = !DILocation(line: 767, column: 5, scope: !2359)
!2366 = !DILocation(line: 768, column: 36, scope: !1492)
!2367 = !DILocation(line: 768, column: 44, scope: !1492)
!2368 = !DILocation(line: 768, column: 56, scope: !1492)
!2369 = !DILocation(line: 768, column: 61, scope: !1492)
!2370 = !DILocation(line: 769, column: 36, scope: !1492)
!2371 = !DILocation(line: 770, column: 36, scope: !1492)
!2372 = !DILocation(line: 770, column: 42, scope: !1492)
!2373 = !DILocation(line: 771, column: 36, scope: !1492)
!2374 = !DILocation(line: 771, column: 48, scope: !1492)
!2375 = !DILocation(line: 768, column: 10, scope: !1492)
!2376 = !DILocation(line: 768, column: 3, scope: !1492)
!2377 = !DILocation(line: 772, column: 1, scope: !1492)
!2378 = !DILocalVariable(name: "buffer", arg: 1, scope: !2379, file: !80, line: 256, type: !7)
!2379 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !80, file: !80, line: 256, type: !1493, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2380, retainedNodes: !4)
!2380 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !2381, nameTableKind: None)
!2381 = !{!2382, !2384, !2386, !2395, !2397, !2399, !2406, !2408}
!2382 = !DIGlobalVariableExpression(var: !2383, expr: !DIExpression())
!2383 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2380, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!2384 = !DIGlobalVariableExpression(var: !2385, expr: !DIExpression())
!2385 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2380, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!2386 = !DIGlobalVariableExpression(var: !2387, expr: !DIExpression())
!2387 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2380, file: !80, line: 1052, type: !2388, isLocal: false, isDefinition: true)
!2388 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !2389)
!2389 = !{!2390, !2391, !2392, !2393, !2394}
!2390 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2388, file: !80, line: 68, baseType: !57, size: 32)
!2391 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2388, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!2392 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2388, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!2393 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2388, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!2394 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2388, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!2395 = !DIGlobalVariableExpression(var: !2396, expr: !DIExpression())
!2396 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2380, file: !80, line: 116, type: !2388, isLocal: true, isDefinition: true)
!2397 = !DIGlobalVariableExpression(var: !2398, expr: !DIExpression())
!2398 = distinct !DIGlobalVariable(name: "slot0", scope: !2380, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!2399 = !DIGlobalVariableExpression(var: !2400, expr: !DIExpression())
!2400 = distinct !DIGlobalVariable(name: "slotvec", scope: !2380, file: !80, line: 845, type: !2401, isLocal: true, isDefinition: true)
!2401 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2402, size: 64)
!2402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !2403)
!2403 = !{!2404, !2405}
!2404 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2402, file: !80, line: 836, baseType: !74, size: 64)
!2405 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2402, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!2406 = !DIGlobalVariableExpression(var: !2407, expr: !DIExpression())
!2407 = distinct !DIGlobalVariable(name: "nslots", scope: !2380, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!2408 = !DIGlobalVariableExpression(var: !2409, expr: !DIExpression())
!2409 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2380, file: !80, line: 844, type: !2402, isLocal: true, isDefinition: true)
!2410 = !DILocalVariable(name: "buffersize", arg: 2, scope: !2379, file: !80, line: 256, type: !74)
!2411 = !DILocalVariable(name: "arg", arg: 3, scope: !2379, file: !80, line: 257, type: !16)
!2412 = !DILocalVariable(name: "argsize", arg: 4, scope: !2379, file: !80, line: 257, type: !74)
!2413 = !DILocalVariable(name: "quoting_style", arg: 5, scope: !2379, file: !80, line: 258, type: !57)
!2414 = !DILocalVariable(name: "flags", arg: 6, scope: !2379, file: !80, line: 258, type: !19)
!2415 = !DILocalVariable(name: "quote_these_too", arg: 7, scope: !2379, file: !80, line: 259, type: !1495)
!2416 = !DILocalVariable(name: "left_quote", arg: 8, scope: !2379, file: !80, line: 260, type: !16)
!2417 = !DILocalVariable(name: "right_quote", arg: 9, scope: !2379, file: !80, line: 261, type: !16)
!2418 = !DILocalVariable(name: "i", scope: !2379, file: !80, line: 263, type: !74)
!2419 = !DILocalVariable(name: "len", scope: !2379, file: !80, line: 264, type: !74)
!2420 = !DILocalVariable(name: "orig_buffersize", scope: !2379, file: !80, line: 265, type: !74)
!2421 = !DILocalVariable(name: "quote_string", scope: !2379, file: !80, line: 266, type: !16)
!2422 = !DILocalVariable(name: "quote_string_len", scope: !2379, file: !80, line: 267, type: !74)
!2423 = !DILocalVariable(name: "backslash_escapes", scope: !2379, file: !80, line: 268, type: !38)
!2424 = !DILocalVariable(name: "unibyte_locale", scope: !2379, file: !80, line: 269, type: !38)
!2425 = !DILocalVariable(name: "elide_outer_quotes", scope: !2379, file: !80, line: 270, type: !38)
!2426 = !DILocalVariable(name: "pending_shell_escape_end", scope: !2379, file: !80, line: 271, type: !38)
!2427 = !DILocalVariable(name: "encountered_single_quote", scope: !2379, file: !80, line: 272, type: !38)
!2428 = !DILocalVariable(name: "all_c_and_shell_quote_compat", scope: !2379, file: !80, line: 273, type: !38)
!2429 = distinct !DISubprogram(name: "gettext_quote", scope: !80, file: !80, line: 207, type: !2430, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !4)
!2430 = !DISubroutineType(types: !2431)
!2431 = !{!16, !16, !57}
!2432 = !DILocalVariable(name: "msgid", arg: 1, scope: !2429, file: !80, line: 207, type: !16)
!2433 = !DILocation(line: 207, column: 28, scope: !2429)
!2434 = !DILocalVariable(name: "s", arg: 2, scope: !2429, file: !80, line: 207, type: !57)
!2435 = !DILocation(line: 207, column: 54, scope: !2429)
!2436 = !DILocalVariable(name: "translation", scope: !2429, file: !80, line: 209, type: !16)
!2437 = !DILocation(line: 209, column: 15, scope: !2429)
!2438 = !DILocation(line: 209, column: 29, scope: !2429)
!2439 = !DILocalVariable(name: "locale_code", scope: !2429, file: !80, line: 210, type: !16)
!2440 = !DILocation(line: 210, column: 15, scope: !2429)
!2441 = !DILocation(line: 212, column: 7, scope: !2442)
!2442 = distinct !DILexicalBlock(scope: !2429, file: !80, line: 212, column: 7)
!2443 = !DILocation(line: 212, column: 22, scope: !2442)
!2444 = !DILocation(line: 212, column: 19, scope: !2442)
!2445 = !DILocation(line: 212, column: 7, scope: !2429)
!2446 = !DILocation(line: 213, column: 12, scope: !2442)
!2447 = !DILocation(line: 213, column: 5, scope: !2442)
!2448 = !DILocation(line: 233, column: 17, scope: !2429)
!2449 = !DILocation(line: 233, column: 15, scope: !2429)
!2450 = !DILocation(line: 234, column: 7, scope: !2451)
!2451 = distinct !DILexicalBlock(scope: !2429, file: !80, line: 234, column: 7)
!2452 = !DILocation(line: 234, column: 7, scope: !2429)
!2453 = !DILocation(line: 235, column: 12, scope: !2451)
!2454 = !DILocation(line: 235, column: 21, scope: !2451)
!2455 = !DILocation(line: 235, column: 5, scope: !2451)
!2456 = !DILocation(line: 236, column: 7, scope: !2457)
!2457 = distinct !DILexicalBlock(scope: !2429, file: !80, line: 236, column: 7)
!2458 = !DILocation(line: 236, column: 7, scope: !2429)
!2459 = !DILocation(line: 237, column: 12, scope: !2457)
!2460 = !DILocation(line: 237, column: 21, scope: !2457)
!2461 = !DILocation(line: 237, column: 5, scope: !2457)
!2462 = !DILocation(line: 239, column: 11, scope: !2429)
!2463 = !DILocation(line: 239, column: 13, scope: !2429)
!2464 = !DILocation(line: 239, column: 3, scope: !2429)
!2465 = !DILocation(line: 240, column: 1, scope: !2429)
!2466 = distinct !DISubprogram(name: "quotearg_style", scope: !80, file: !80, line: 970, type: !2467, scopeLine: 971, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !4)
!2467 = !DISubroutineType(types: !2468)
!2468 = !{!7, !57, !16}
!2469 = !DILocalVariable(name: "s", arg: 1, scope: !2466, file: !80, line: 970, type: !57)
!2470 = !DILocation(line: 970, column: 36, scope: !2466)
!2471 = !DILocalVariable(name: "arg", arg: 2, scope: !2466, file: !80, line: 970, type: !16)
!2472 = !DILocation(line: 970, column: 51, scope: !2466)
!2473 = !DILocation(line: 972, column: 31, scope: !2466)
!2474 = !DILocation(line: 972, column: 34, scope: !2466)
!2475 = !DILocation(line: 972, column: 10, scope: !2466)
!2476 = !DILocation(line: 972, column: 3, scope: !2466)
!2477 = !DILocalVariable(name: "s", arg: 1, scope: !2478, file: !80, line: 970, type: !57)
!2478 = distinct !DISubprogram(name: "quotearg_style", scope: !80, file: !80, line: 970, type: !2467, scopeLine: 971, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2479, retainedNodes: !4)
!2479 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !2480, nameTableKind: None)
!2480 = !{!2481, !2483, !2485, !2494, !2496, !2498, !2505, !2507}
!2481 = !DIGlobalVariableExpression(var: !2482, expr: !DIExpression())
!2482 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2479, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!2483 = !DIGlobalVariableExpression(var: !2484, expr: !DIExpression())
!2484 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2479, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!2485 = !DIGlobalVariableExpression(var: !2486, expr: !DIExpression())
!2486 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2479, file: !80, line: 1052, type: !2487, isLocal: false, isDefinition: true)
!2487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !2488)
!2488 = !{!2489, !2490, !2491, !2492, !2493}
!2489 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2487, file: !80, line: 68, baseType: !57, size: 32)
!2490 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2487, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!2491 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2487, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!2492 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2487, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!2493 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2487, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!2494 = !DIGlobalVariableExpression(var: !2495, expr: !DIExpression())
!2495 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2479, file: !80, line: 116, type: !2487, isLocal: true, isDefinition: true)
!2496 = !DIGlobalVariableExpression(var: !2497, expr: !DIExpression())
!2497 = distinct !DIGlobalVariable(name: "slot0", scope: !2479, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!2498 = !DIGlobalVariableExpression(var: !2499, expr: !DIExpression())
!2499 = distinct !DIGlobalVariable(name: "slotvec", scope: !2479, file: !80, line: 845, type: !2500, isLocal: true, isDefinition: true)
!2500 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2501, size: 64)
!2501 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !2502)
!2502 = !{!2503, !2504}
!2503 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2501, file: !80, line: 836, baseType: !74, size: 64)
!2504 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2501, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!2505 = !DIGlobalVariableExpression(var: !2506, expr: !DIExpression())
!2506 = distinct !DIGlobalVariable(name: "nslots", scope: !2479, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!2507 = !DIGlobalVariableExpression(var: !2508, expr: !DIExpression())
!2508 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2479, file: !80, line: 844, type: !2501, isLocal: true, isDefinition: true)
!2509 = !DILocalVariable(name: "arg", arg: 2, scope: !2478, file: !80, line: 970, type: !16)
!2510 = distinct !DISubprogram(name: "quotearg_char_mem", scope: !80, file: !80, line: 982, type: !2511, scopeLine: 983, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !4)
!2511 = !DISubroutineType(types: !2512)
!2512 = !{!7, !16, !74, !8}
!2513 = !DILocalVariable(name: "arg", arg: 1, scope: !2510, file: !80, line: 982, type: !16)
!2514 = !DILocation(line: 982, column: 32, scope: !2510)
!2515 = !DILocalVariable(name: "argsize", arg: 2, scope: !2510, file: !80, line: 982, type: !74)
!2516 = !DILocation(line: 982, column: 44, scope: !2510)
!2517 = !DILocalVariable(name: "ch", arg: 3, scope: !2510, file: !80, line: 982, type: !8)
!2518 = !DILocation(line: 982, column: 58, scope: !2510)
!2519 = !DILocalVariable(name: "options", scope: !2510, file: !80, line: 984, type: !93)
!2520 = !DILocation(line: 984, column: 26, scope: !2510)
!2521 = !DILocation(line: 985, column: 13, scope: !2510)
!2522 = !DILocation(line: 986, column: 31, scope: !2510)
!2523 = !DILocation(line: 986, column: 3, scope: !2510)
!2524 = !DILocation(line: 987, column: 33, scope: !2510)
!2525 = !DILocation(line: 987, column: 38, scope: !2510)
!2526 = !DILocation(line: 987, column: 10, scope: !2510)
!2527 = !DILocation(line: 987, column: 3, scope: !2510)
!2528 = !DILocalVariable(name: "arg", arg: 1, scope: !2529, file: !80, line: 982, type: !16)
!2529 = distinct !DISubprogram(name: "quotearg_char_mem", scope: !80, file: !80, line: 982, type: !2511, scopeLine: 983, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2530, retainedNodes: !4)
!2530 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !2531, nameTableKind: None)
!2531 = !{!2532, !2534, !2536, !2545, !2547, !2549, !2556, !2558}
!2532 = !DIGlobalVariableExpression(var: !2533, expr: !DIExpression())
!2533 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2530, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!2534 = !DIGlobalVariableExpression(var: !2535, expr: !DIExpression())
!2535 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2530, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!2536 = !DIGlobalVariableExpression(var: !2537, expr: !DIExpression())
!2537 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2530, file: !80, line: 1052, type: !2538, isLocal: false, isDefinition: true)
!2538 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !2539)
!2539 = !{!2540, !2541, !2542, !2543, !2544}
!2540 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2538, file: !80, line: 68, baseType: !57, size: 32)
!2541 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2538, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!2542 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2538, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!2543 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2538, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!2544 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2538, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!2545 = !DIGlobalVariableExpression(var: !2546, expr: !DIExpression())
!2546 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2530, file: !80, line: 116, type: !2538, isLocal: true, isDefinition: true)
!2547 = !DIGlobalVariableExpression(var: !2548, expr: !DIExpression())
!2548 = distinct !DIGlobalVariable(name: "slot0", scope: !2530, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!2549 = !DIGlobalVariableExpression(var: !2550, expr: !DIExpression())
!2550 = distinct !DIGlobalVariable(name: "slotvec", scope: !2530, file: !80, line: 845, type: !2551, isLocal: true, isDefinition: true)
!2551 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2552, size: 64)
!2552 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !2553)
!2553 = !{!2554, !2555}
!2554 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2552, file: !80, line: 836, baseType: !74, size: 64)
!2555 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2552, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!2556 = !DIGlobalVariableExpression(var: !2557, expr: !DIExpression())
!2557 = distinct !DIGlobalVariable(name: "nslots", scope: !2530, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!2558 = !DIGlobalVariableExpression(var: !2559, expr: !DIExpression())
!2559 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2530, file: !80, line: 844, type: !2552, isLocal: true, isDefinition: true)
!2560 = !DILocalVariable(name: "argsize", arg: 2, scope: !2529, file: !80, line: 982, type: !74)
!2561 = !DILocalVariable(name: "ch", arg: 3, scope: !2529, file: !80, line: 982, type: !8)
!2562 = !DILocalVariable(name: "options", scope: !2529, file: !80, line: 984, type: !2538)
!2563 = distinct !DISubprogram(name: "quotearg_char", scope: !80, file: !80, line: 991, type: !2564, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !4)
!2564 = !DISubroutineType(types: !2565)
!2565 = !{!7, !16, !8}
!2566 = !DILocalVariable(name: "arg", arg: 1, scope: !2563, file: !80, line: 991, type: !16)
!2567 = !DILocation(line: 991, column: 28, scope: !2563)
!2568 = !DILocalVariable(name: "ch", arg: 2, scope: !2563, file: !80, line: 991, type: !8)
!2569 = !DILocation(line: 991, column: 38, scope: !2563)
!2570 = !DILocation(line: 993, column: 29, scope: !2563)
!2571 = !DILocation(line: 993, column: 44, scope: !2563)
!2572 = !DILocation(line: 993, column: 10, scope: !2563)
!2573 = !DILocation(line: 993, column: 3, scope: !2563)
!2574 = distinct !DISubprogram(name: "quotearg_colon", scope: !80, file: !80, line: 997, type: !2575, scopeLine: 998, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !4)
!2575 = !DISubroutineType(types: !2576)
!2576 = !{!7, !16}
!2577 = !DILocalVariable(name: "arg", arg: 1, scope: !2574, file: !80, line: 997, type: !16)
!2578 = !DILocation(line: 997, column: 29, scope: !2574)
!2579 = !DILocation(line: 999, column: 25, scope: !2574)
!2580 = !DILocation(line: 999, column: 10, scope: !2574)
!2581 = !DILocation(line: 999, column: 3, scope: !2574)
!2582 = !DILocalVariable(name: "arg", arg: 1, scope: !2583, file: !80, line: 997, type: !16)
!2583 = distinct !DISubprogram(name: "quotearg_colon", scope: !80, file: !80, line: 997, type: !2575, scopeLine: 998, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2584, retainedNodes: !4)
!2584 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !2585, nameTableKind: None)
!2585 = !{!2586, !2588, !2590, !2599, !2601, !2603, !2610, !2612}
!2586 = !DIGlobalVariableExpression(var: !2587, expr: !DIExpression())
!2587 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2584, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!2588 = !DIGlobalVariableExpression(var: !2589, expr: !DIExpression())
!2589 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2584, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!2590 = !DIGlobalVariableExpression(var: !2591, expr: !DIExpression())
!2591 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2584, file: !80, line: 1052, type: !2592, isLocal: false, isDefinition: true)
!2592 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !2593)
!2593 = !{!2594, !2595, !2596, !2597, !2598}
!2594 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2592, file: !80, line: 68, baseType: !57, size: 32)
!2595 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2592, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!2596 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2592, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!2597 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2592, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!2598 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2592, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!2599 = !DIGlobalVariableExpression(var: !2600, expr: !DIExpression())
!2600 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2584, file: !80, line: 116, type: !2592, isLocal: true, isDefinition: true)
!2601 = !DIGlobalVariableExpression(var: !2602, expr: !DIExpression())
!2602 = distinct !DIGlobalVariable(name: "slot0", scope: !2584, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!2603 = !DIGlobalVariableExpression(var: !2604, expr: !DIExpression())
!2604 = distinct !DIGlobalVariable(name: "slotvec", scope: !2584, file: !80, line: 845, type: !2605, isLocal: true, isDefinition: true)
!2605 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2606, size: 64)
!2606 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !2607)
!2607 = !{!2608, !2609}
!2608 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2606, file: !80, line: 836, baseType: !74, size: 64)
!2609 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2606, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!2610 = !DIGlobalVariableExpression(var: !2611, expr: !DIExpression())
!2611 = distinct !DIGlobalVariable(name: "nslots", scope: !2584, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!2612 = !DIGlobalVariableExpression(var: !2613, expr: !DIExpression())
!2613 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2584, file: !80, line: 844, type: !2606, isLocal: true, isDefinition: true)
!2614 = distinct !DISubprogram(name: "quote_n_mem", scope: !80, file: !80, line: 1061, type: !2615, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !4)
!2615 = !DISubroutineType(types: !2616)
!2616 = !{!16, !19, !16, !74}
!2617 = !DILocalVariable(name: "n", arg: 1, scope: !2614, file: !80, line: 1061, type: !19)
!2618 = !DILocation(line: 1061, column: 18, scope: !2614)
!2619 = !DILocalVariable(name: "arg", arg: 2, scope: !2614, file: !80, line: 1061, type: !16)
!2620 = !DILocation(line: 1061, column: 33, scope: !2614)
!2621 = !DILocalVariable(name: "argsize", arg: 3, scope: !2614, file: !80, line: 1061, type: !74)
!2622 = !DILocation(line: 1061, column: 45, scope: !2614)
!2623 = !DILocation(line: 1063, column: 30, scope: !2614)
!2624 = !DILocation(line: 1063, column: 33, scope: !2614)
!2625 = !DILocation(line: 1063, column: 38, scope: !2614)
!2626 = !DILocation(line: 1063, column: 10, scope: !2614)
!2627 = !DILocation(line: 1063, column: 3, scope: !2614)
!2628 = !DILocalVariable(name: "n", arg: 1, scope: !2629, file: !80, line: 1061, type: !19)
!2629 = distinct !DISubprogram(name: "quote_n_mem", scope: !80, file: !80, line: 1061, type: !2615, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2630, retainedNodes: !4)
!2630 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !2631, nameTableKind: None)
!2631 = !{!2632, !2634, !2636, !2645, !2647, !2649, !2656, !2658}
!2632 = !DIGlobalVariableExpression(var: !2633, expr: !DIExpression())
!2633 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2630, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!2634 = !DIGlobalVariableExpression(var: !2635, expr: !DIExpression())
!2635 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2630, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!2636 = !DIGlobalVariableExpression(var: !2637, expr: !DIExpression())
!2637 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2630, file: !80, line: 1052, type: !2638, isLocal: false, isDefinition: true)
!2638 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !2639)
!2639 = !{!2640, !2641, !2642, !2643, !2644}
!2640 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2638, file: !80, line: 68, baseType: !57, size: 32)
!2641 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2638, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!2642 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2638, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!2643 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2638, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!2644 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2638, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!2645 = !DIGlobalVariableExpression(var: !2646, expr: !DIExpression())
!2646 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2630, file: !80, line: 116, type: !2638, isLocal: true, isDefinition: true)
!2647 = !DIGlobalVariableExpression(var: !2648, expr: !DIExpression())
!2648 = distinct !DIGlobalVariable(name: "slot0", scope: !2630, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!2649 = !DIGlobalVariableExpression(var: !2650, expr: !DIExpression())
!2650 = distinct !DIGlobalVariable(name: "slotvec", scope: !2630, file: !80, line: 845, type: !2651, isLocal: true, isDefinition: true)
!2651 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2652, size: 64)
!2652 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !2653)
!2653 = !{!2654, !2655}
!2654 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2652, file: !80, line: 836, baseType: !74, size: 64)
!2655 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2652, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!2656 = !DIGlobalVariableExpression(var: !2657, expr: !DIExpression())
!2657 = distinct !DIGlobalVariable(name: "nslots", scope: !2630, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!2658 = !DIGlobalVariableExpression(var: !2659, expr: !DIExpression())
!2659 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2630, file: !80, line: 844, type: !2652, isLocal: true, isDefinition: true)
!2660 = !DILocalVariable(name: "arg", arg: 2, scope: !2629, file: !80, line: 1061, type: !16)
!2661 = !DILocalVariable(name: "argsize", arg: 3, scope: !2629, file: !80, line: 1061, type: !74)
!2662 = distinct !DISubprogram(name: "quote_n", scope: !80, file: !80, line: 1073, type: !2663, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !4)
!2663 = !DISubroutineType(types: !2664)
!2664 = !{!16, !19, !16}
!2665 = !DILocalVariable(name: "n", arg: 1, scope: !2662, file: !80, line: 1073, type: !19)
!2666 = !DILocation(line: 1073, column: 14, scope: !2662)
!2667 = !DILocalVariable(name: "arg", arg: 2, scope: !2662, file: !80, line: 1073, type: !16)
!2668 = !DILocation(line: 1073, column: 29, scope: !2662)
!2669 = !DILocation(line: 1075, column: 23, scope: !2662)
!2670 = !DILocation(line: 1075, column: 26, scope: !2662)
!2671 = !DILocation(line: 1075, column: 10, scope: !2662)
!2672 = !DILocation(line: 1075, column: 3, scope: !2662)
!2673 = !DILocalVariable(name: "n", arg: 1, scope: !2674, file: !80, line: 1073, type: !19)
!2674 = distinct !DISubprogram(name: "quote_n", scope: !80, file: !80, line: 1073, type: !2663, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2675, retainedNodes: !4)
!2675 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !2676, nameTableKind: None)
!2676 = !{!2677, !2679, !2681, !2690, !2692, !2694, !2701, !2703}
!2677 = !DIGlobalVariableExpression(var: !2678, expr: !DIExpression())
!2678 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2675, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!2679 = !DIGlobalVariableExpression(var: !2680, expr: !DIExpression())
!2680 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2675, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!2681 = !DIGlobalVariableExpression(var: !2682, expr: !DIExpression())
!2682 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2675, file: !80, line: 1052, type: !2683, isLocal: false, isDefinition: true)
!2683 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !2684)
!2684 = !{!2685, !2686, !2687, !2688, !2689}
!2685 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2683, file: !80, line: 68, baseType: !57, size: 32)
!2686 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2683, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!2687 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2683, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!2688 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2683, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!2689 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2683, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!2690 = !DIGlobalVariableExpression(var: !2691, expr: !DIExpression())
!2691 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2675, file: !80, line: 116, type: !2683, isLocal: true, isDefinition: true)
!2692 = !DIGlobalVariableExpression(var: !2693, expr: !DIExpression())
!2693 = distinct !DIGlobalVariable(name: "slot0", scope: !2675, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!2694 = !DIGlobalVariableExpression(var: !2695, expr: !DIExpression())
!2695 = distinct !DIGlobalVariable(name: "slotvec", scope: !2675, file: !80, line: 845, type: !2696, isLocal: true, isDefinition: true)
!2696 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2697, size: 64)
!2697 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !2698)
!2698 = !{!2699, !2700}
!2699 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2697, file: !80, line: 836, baseType: !74, size: 64)
!2700 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2697, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!2701 = !DIGlobalVariableExpression(var: !2702, expr: !DIExpression())
!2702 = distinct !DIGlobalVariable(name: "nslots", scope: !2675, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!2703 = !DIGlobalVariableExpression(var: !2704, expr: !DIExpression())
!2704 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2675, file: !80, line: 844, type: !2697, isLocal: true, isDefinition: true)
!2705 = !DILocalVariable(name: "arg", arg: 2, scope: !2674, file: !80, line: 1073, type: !16)
!2706 = distinct !DISubprogram(name: "quote", scope: !80, file: !80, line: 1079, type: !2707, scopeLine: 1080, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !4)
!2707 = !DISubroutineType(types: !2708)
!2708 = !{!16, !16}
!2709 = !DILocalVariable(name: "arg", arg: 1, scope: !2706, file: !80, line: 1079, type: !16)
!2710 = !DILocation(line: 1079, column: 20, scope: !2706)
!2711 = !DILocation(line: 1081, column: 22, scope: !2706)
!2712 = !DILocation(line: 1081, column: 10, scope: !2706)
!2713 = !DILocation(line: 1081, column: 3, scope: !2706)
!2714 = distinct !DISubprogram(name: "get_root_dev_ino", scope: !2715, file: !2715, line: 29, type: !2716, scopeLine: 30, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !128, retainedNodes: !4)
!2715 = !DIFile(filename: "lib/root-dev-ino.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2716 = !DISubroutineType(types: !2717)
!2717 = !{!2718, !2718}
!2718 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2719, size: 64)
!2719 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dev_ino", file: !502, line: 7, size: 128, elements: !2720)
!2720 = !{!2721, !2722}
!2721 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !2719, file: !502, line: 9, baseType: !505, size: 64)
!2722 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !2719, file: !502, line: 10, baseType: !508, size: 64, offset: 64)
!2723 = !DILocalVariable(name: "root_d_i", arg: 1, scope: !2714, file: !2715, line: 29, type: !2718)
!2724 = !DILocation(line: 29, column: 35, scope: !2714)
!2725 = !DILocalVariable(name: "statbuf", scope: !2714, file: !2715, line: 31, type: !2726)
!2726 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !374, line: 46, size: 1152, elements: !2727)
!2727 = !{!2728, !2729, !2730, !2731, !2732, !2733, !2734, !2735, !2736, !2737, !2738, !2739, !2744, !2745, !2746}
!2728 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !2726, file: !374, line: 48, baseType: !377, size: 64)
!2729 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !2726, file: !374, line: 53, baseType: !380, size: 64, offset: 64)
!2730 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !2726, file: !374, line: 61, baseType: !382, size: 64, offset: 128)
!2731 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !2726, file: !374, line: 62, baseType: !384, size: 32, offset: 192)
!2732 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !2726, file: !374, line: 64, baseType: !386, size: 32, offset: 224)
!2733 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !2726, file: !374, line: 65, baseType: !388, size: 32, offset: 256)
!2734 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !2726, file: !374, line: 67, baseType: !19, size: 32, offset: 288)
!2735 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !2726, file: !374, line: 69, baseType: !377, size: 64, offset: 320)
!2736 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !2726, file: !374, line: 74, baseType: !392, size: 64, offset: 384)
!2737 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !2726, file: !374, line: 78, baseType: !395, size: 64, offset: 448)
!2738 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !2726, file: !374, line: 80, baseType: !397, size: 64, offset: 512)
!2739 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !2726, file: !374, line: 91, baseType: !2740, size: 128, offset: 576)
!2740 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !400, line: 10, size: 128, elements: !2741)
!2741 = !{!2742, !2743}
!2742 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !2740, file: !400, line: 12, baseType: !403, size: 64)
!2743 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !2740, file: !400, line: 16, baseType: !405, size: 64, offset: 64)
!2744 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !2726, file: !374, line: 92, baseType: !2740, size: 128, offset: 704)
!2745 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !2726, file: !374, line: 93, baseType: !2740, size: 128, offset: 832)
!2746 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !2726, file: !374, line: 106, baseType: !409, size: 192, offset: 960)
!2747 = !DILocation(line: 31, column: 15, scope: !2714)
!2748 = !DILocation(line: 32, column: 7, scope: !2749)
!2749 = distinct !DILexicalBlock(scope: !2714, file: !2715, line: 32, column: 7)
!2750 = !DILocation(line: 32, column: 7, scope: !2714)
!2751 = !DILocation(line: 33, column: 5, scope: !2749)
!2752 = !DILocation(line: 34, column: 30, scope: !2714)
!2753 = !DILocation(line: 34, column: 3, scope: !2714)
!2754 = !DILocation(line: 34, column: 13, scope: !2714)
!2755 = !DILocation(line: 34, column: 20, scope: !2714)
!2756 = !DILocation(line: 35, column: 30, scope: !2714)
!2757 = !DILocation(line: 35, column: 3, scope: !2714)
!2758 = !DILocation(line: 35, column: 13, scope: !2714)
!2759 = !DILocation(line: 35, column: 20, scope: !2714)
!2760 = !DILocation(line: 36, column: 10, scope: !2714)
!2761 = !DILocation(line: 36, column: 3, scope: !2714)
!2762 = !DILocation(line: 37, column: 1, scope: !2714)
!2763 = !DILocalVariable(name: "root_d_i", arg: 1, scope: !2764, file: !2715, line: 29, type: !2767)
!2764 = distinct !DISubprogram(name: "get_root_dev_ino", scope: !2715, file: !2715, line: 29, type: !2765, scopeLine: 30, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2772, retainedNodes: !4)
!2765 = !DISubroutineType(types: !2766)
!2766 = !{!2767, !2767}
!2767 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2768, size: 64)
!2768 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dev_ino", file: !502, line: 7, size: 128, elements: !2769)
!2769 = !{!2770, !2771}
!2770 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !2768, file: !502, line: 9, baseType: !505, size: 64)
!2771 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !2768, file: !502, line: 10, baseType: !508, size: 64, offset: 64)
!2772 = distinct !DICompileUnit(language: DW_LANG_C99, file: !129, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!2773 = !DILocalVariable(name: "statbuf", scope: !2764, file: !2715, line: 31, type: !2774)
!2774 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !374, line: 46, size: 1152, elements: !2775)
!2775 = !{!2776, !2777, !2778, !2779, !2780, !2781, !2782, !2783, !2784, !2785, !2786, !2787, !2792, !2793, !2794}
!2776 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !2774, file: !374, line: 48, baseType: !377, size: 64)
!2777 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !2774, file: !374, line: 53, baseType: !380, size: 64, offset: 64)
!2778 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !2774, file: !374, line: 61, baseType: !382, size: 64, offset: 128)
!2779 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !2774, file: !374, line: 62, baseType: !384, size: 32, offset: 192)
!2780 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !2774, file: !374, line: 64, baseType: !386, size: 32, offset: 224)
!2781 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !2774, file: !374, line: 65, baseType: !388, size: 32, offset: 256)
!2782 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !2774, file: !374, line: 67, baseType: !19, size: 32, offset: 288)
!2783 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !2774, file: !374, line: 69, baseType: !377, size: 64, offset: 320)
!2784 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !2774, file: !374, line: 74, baseType: !392, size: 64, offset: 384)
!2785 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !2774, file: !374, line: 78, baseType: !395, size: 64, offset: 448)
!2786 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !2774, file: !374, line: 80, baseType: !397, size: 64, offset: 512)
!2787 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !2774, file: !374, line: 91, baseType: !2788, size: 128, offset: 576)
!2788 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !400, line: 10, size: 128, elements: !2789)
!2789 = !{!2790, !2791}
!2790 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !2788, file: !400, line: 12, baseType: !403, size: 64)
!2791 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !2788, file: !400, line: 16, baseType: !405, size: 64, offset: 64)
!2792 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !2774, file: !374, line: 92, baseType: !2788, size: 128, offset: 704)
!2793 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !2774, file: !374, line: 93, baseType: !2788, size: 128, offset: 832)
!2794 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !2774, file: !374, line: 106, baseType: !409, size: 192, offset: 960)
!2795 = distinct !DISubprogram(name: "version_etc_arn", scope: !2796, file: !2796, line: 61, type: !2797, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !130, retainedNodes: !4)
!2796 = !DIFile(filename: "lib/version-etc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2797 = !DISubroutineType(types: !2798)
!2798 = !{null, !2799, !16, !16, !16, !2851, !74}
!2799 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2800, size: 64)
!2800 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2801, line: 7, baseType: !2802)
!2801 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!2802 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2803, line: 49, size: 1728, elements: !2804)
!2803 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!2804 = !{!2805, !2806, !2807, !2808, !2809, !2810, !2811, !2812, !2813, !2814, !2815, !2816, !2817, !2820, !2822, !2823, !2824, !2825, !2826, !2828, !2832, !2835, !2837, !2840, !2843, !2844, !2845, !2846, !2847}
!2805 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2802, file: !2803, line: 51, baseType: !19, size: 32)
!2806 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2802, file: !2803, line: 54, baseType: !7, size: 64, offset: 64)
!2807 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2802, file: !2803, line: 55, baseType: !7, size: 64, offset: 128)
!2808 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2802, file: !2803, line: 56, baseType: !7, size: 64, offset: 192)
!2809 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2802, file: !2803, line: 57, baseType: !7, size: 64, offset: 256)
!2810 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2802, file: !2803, line: 58, baseType: !7, size: 64, offset: 320)
!2811 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2802, file: !2803, line: 59, baseType: !7, size: 64, offset: 384)
!2812 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2802, file: !2803, line: 60, baseType: !7, size: 64, offset: 448)
!2813 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2802, file: !2803, line: 61, baseType: !7, size: 64, offset: 512)
!2814 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2802, file: !2803, line: 64, baseType: !7, size: 64, offset: 576)
!2815 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2802, file: !2803, line: 65, baseType: !7, size: 64, offset: 640)
!2816 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2802, file: !2803, line: 66, baseType: !7, size: 64, offset: 704)
!2817 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2802, file: !2803, line: 68, baseType: !2818, size: 64, offset: 768)
!2818 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2819, size: 64)
!2819 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !2803, line: 36, flags: DIFlagFwdDecl)
!2820 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2802, file: !2803, line: 70, baseType: !2821, size: 64, offset: 832)
!2821 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2802, size: 64)
!2822 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2802, file: !2803, line: 72, baseType: !19, size: 32, offset: 896)
!2823 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2802, file: !2803, line: 73, baseType: !19, size: 32, offset: 928)
!2824 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2802, file: !2803, line: 74, baseType: !392, size: 64, offset: 960)
!2825 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2802, file: !2803, line: 77, baseType: !73, size: 16, offset: 1024)
!2826 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2802, file: !2803, line: 78, baseType: !2827, size: 8, offset: 1040)
!2827 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!2828 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2802, file: !2803, line: 79, baseType: !2829, size: 8, offset: 1048)
!2829 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 8, elements: !2830)
!2830 = !{!2831}
!2831 = !DISubrange(count: 1)
!2832 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2802, file: !2803, line: 81, baseType: !2833, size: 64, offset: 1088)
!2833 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2834, size: 64)
!2834 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !2803, line: 43, baseType: null)
!2835 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2802, file: !2803, line: 89, baseType: !2836, size: 64, offset: 1152)
!2836 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !378, line: 153, baseType: !393)
!2837 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2802, file: !2803, line: 91, baseType: !2838, size: 64, offset: 1216)
!2838 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2839, size: 64)
!2839 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !2803, line: 37, flags: DIFlagFwdDecl)
!2840 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2802, file: !2803, line: 92, baseType: !2841, size: 64, offset: 1280)
!2841 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2842, size: 64)
!2842 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !2803, line: 38, flags: DIFlagFwdDecl)
!2843 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2802, file: !2803, line: 93, baseType: !2821, size: 64, offset: 1344)
!2844 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2802, file: !2803, line: 94, baseType: !6, size: 64, offset: 1408)
!2845 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2802, file: !2803, line: 95, baseType: !74, size: 64, offset: 1472)
!2846 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2802, file: !2803, line: 96, baseType: !19, size: 32, offset: 1536)
!2847 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2802, file: !2803, line: 98, baseType: !2848, size: 160, offset: 1568)
!2848 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 160, elements: !2849)
!2849 = !{!2850}
!2850 = !DISubrange(count: 20)
!2851 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!2852 = !DILocalVariable(name: "stream", arg: 1, scope: !2795, file: !2796, line: 61, type: !2799)
!2853 = !DILocation(line: 61, column: 24, scope: !2795)
!2854 = !DILocalVariable(name: "command_name", arg: 2, scope: !2795, file: !2796, line: 62, type: !16)
!2855 = !DILocation(line: 62, column: 30, scope: !2795)
!2856 = !DILocalVariable(name: "package", arg: 3, scope: !2795, file: !2796, line: 62, type: !16)
!2857 = !DILocation(line: 62, column: 56, scope: !2795)
!2858 = !DILocalVariable(name: "version", arg: 4, scope: !2795, file: !2796, line: 63, type: !16)
!2859 = !DILocation(line: 63, column: 30, scope: !2795)
!2860 = !DILocalVariable(name: "authors", arg: 5, scope: !2795, file: !2796, line: 64, type: !2851)
!2861 = !DILocation(line: 64, column: 39, scope: !2795)
!2862 = !DILocalVariable(name: "n_authors", arg: 6, scope: !2795, file: !2796, line: 64, type: !74)
!2863 = !DILocation(line: 64, column: 55, scope: !2795)
!2864 = !DILocation(line: 66, column: 7, scope: !2865)
!2865 = distinct !DILexicalBlock(scope: !2795, file: !2796, line: 66, column: 7)
!2866 = !DILocation(line: 66, column: 7, scope: !2795)
!2867 = !DILocation(line: 67, column: 14, scope: !2865)
!2868 = !DILocation(line: 67, column: 38, scope: !2865)
!2869 = !DILocation(line: 67, column: 52, scope: !2865)
!2870 = !DILocation(line: 67, column: 61, scope: !2865)
!2871 = !DILocation(line: 67, column: 5, scope: !2865)
!2872 = !DILocation(line: 69, column: 14, scope: !2865)
!2873 = !DILocation(line: 69, column: 33, scope: !2865)
!2874 = !DILocation(line: 69, column: 42, scope: !2865)
!2875 = !DILocation(line: 69, column: 5, scope: !2865)
!2876 = !DILocation(line: 83, column: 12, scope: !2795)
!2877 = !DILocation(line: 83, column: 43, scope: !2795)
!2878 = !DILocation(line: 83, column: 3, scope: !2795)
!2879 = !DILocation(line: 85, column: 3, scope: !2795)
!2880 = !DILocation(line: 88, column: 12, scope: !2795)
!2881 = !DILocation(line: 88, column: 20, scope: !2795)
!2882 = !DILocation(line: 88, column: 3, scope: !2795)
!2883 = !DILocation(line: 95, column: 3, scope: !2795)
!2884 = !DILocation(line: 97, column: 11, scope: !2795)
!2885 = !DILocation(line: 97, column: 3, scope: !2795)
!2886 = !DILocation(line: 102, column: 7, scope: !2887)
!2887 = distinct !DILexicalBlock(scope: !2795, file: !2796, line: 98, column: 5)
!2888 = !DILocation(line: 105, column: 16, scope: !2887)
!2889 = !DILocation(line: 105, column: 24, scope: !2887)
!2890 = !DILocation(line: 105, column: 47, scope: !2887)
!2891 = !DILocation(line: 105, column: 7, scope: !2887)
!2892 = !DILocation(line: 106, column: 7, scope: !2887)
!2893 = !DILocation(line: 109, column: 16, scope: !2887)
!2894 = !DILocation(line: 109, column: 24, scope: !2887)
!2895 = !DILocation(line: 109, column: 54, scope: !2887)
!2896 = !DILocation(line: 109, column: 66, scope: !2887)
!2897 = !DILocation(line: 109, column: 7, scope: !2887)
!2898 = !DILocation(line: 110, column: 7, scope: !2887)
!2899 = !DILocation(line: 113, column: 16, scope: !2887)
!2900 = !DILocation(line: 113, column: 24, scope: !2887)
!2901 = !DILocation(line: 114, column: 16, scope: !2887)
!2902 = !DILocation(line: 114, column: 28, scope: !2887)
!2903 = !DILocation(line: 114, column: 40, scope: !2887)
!2904 = !DILocation(line: 113, column: 7, scope: !2887)
!2905 = !DILocation(line: 115, column: 7, scope: !2887)
!2906 = !DILocation(line: 120, column: 16, scope: !2887)
!2907 = !DILocation(line: 120, column: 24, scope: !2887)
!2908 = !DILocation(line: 121, column: 16, scope: !2887)
!2909 = !DILocation(line: 121, column: 28, scope: !2887)
!2910 = !DILocation(line: 121, column: 40, scope: !2887)
!2911 = !DILocation(line: 121, column: 52, scope: !2887)
!2912 = !DILocation(line: 120, column: 7, scope: !2887)
!2913 = !DILocation(line: 122, column: 7, scope: !2887)
!2914 = !DILocation(line: 127, column: 16, scope: !2887)
!2915 = !DILocation(line: 127, column: 24, scope: !2887)
!2916 = !DILocation(line: 128, column: 16, scope: !2887)
!2917 = !DILocation(line: 128, column: 28, scope: !2887)
!2918 = !DILocation(line: 128, column: 40, scope: !2887)
!2919 = !DILocation(line: 128, column: 52, scope: !2887)
!2920 = !DILocation(line: 128, column: 64, scope: !2887)
!2921 = !DILocation(line: 127, column: 7, scope: !2887)
!2922 = !DILocation(line: 129, column: 7, scope: !2887)
!2923 = !DILocation(line: 134, column: 16, scope: !2887)
!2924 = !DILocation(line: 134, column: 24, scope: !2887)
!2925 = !DILocation(line: 135, column: 16, scope: !2887)
!2926 = !DILocation(line: 135, column: 28, scope: !2887)
!2927 = !DILocation(line: 135, column: 40, scope: !2887)
!2928 = !DILocation(line: 135, column: 52, scope: !2887)
!2929 = !DILocation(line: 135, column: 64, scope: !2887)
!2930 = !DILocation(line: 136, column: 16, scope: !2887)
!2931 = !DILocation(line: 134, column: 7, scope: !2887)
!2932 = !DILocation(line: 137, column: 7, scope: !2887)
!2933 = !DILocation(line: 142, column: 16, scope: !2887)
!2934 = !DILocation(line: 142, column: 24, scope: !2887)
!2935 = !DILocation(line: 143, column: 16, scope: !2887)
!2936 = !DILocation(line: 143, column: 28, scope: !2887)
!2937 = !DILocation(line: 143, column: 40, scope: !2887)
!2938 = !DILocation(line: 143, column: 52, scope: !2887)
!2939 = !DILocation(line: 143, column: 64, scope: !2887)
!2940 = !DILocation(line: 144, column: 16, scope: !2887)
!2941 = !DILocation(line: 144, column: 28, scope: !2887)
!2942 = !DILocation(line: 142, column: 7, scope: !2887)
!2943 = !DILocation(line: 145, column: 7, scope: !2887)
!2944 = !DILocation(line: 150, column: 16, scope: !2887)
!2945 = !DILocation(line: 150, column: 24, scope: !2887)
!2946 = !DILocation(line: 152, column: 17, scope: !2887)
!2947 = !DILocation(line: 152, column: 29, scope: !2887)
!2948 = !DILocation(line: 152, column: 41, scope: !2887)
!2949 = !DILocation(line: 152, column: 53, scope: !2887)
!2950 = !DILocation(line: 152, column: 65, scope: !2887)
!2951 = !DILocation(line: 153, column: 17, scope: !2887)
!2952 = !DILocation(line: 153, column: 29, scope: !2887)
!2953 = !DILocation(line: 153, column: 41, scope: !2887)
!2954 = !DILocation(line: 150, column: 7, scope: !2887)
!2955 = !DILocation(line: 154, column: 7, scope: !2887)
!2956 = !DILocation(line: 159, column: 16, scope: !2887)
!2957 = !DILocation(line: 159, column: 24, scope: !2887)
!2958 = !DILocation(line: 161, column: 16, scope: !2887)
!2959 = !DILocation(line: 161, column: 28, scope: !2887)
!2960 = !DILocation(line: 161, column: 40, scope: !2887)
!2961 = !DILocation(line: 161, column: 52, scope: !2887)
!2962 = !DILocation(line: 161, column: 64, scope: !2887)
!2963 = !DILocation(line: 162, column: 16, scope: !2887)
!2964 = !DILocation(line: 162, column: 28, scope: !2887)
!2965 = !DILocation(line: 162, column: 40, scope: !2887)
!2966 = !DILocation(line: 162, column: 52, scope: !2887)
!2967 = !DILocation(line: 159, column: 7, scope: !2887)
!2968 = !DILocation(line: 163, column: 7, scope: !2887)
!2969 = !DILocation(line: 170, column: 16, scope: !2887)
!2970 = !DILocation(line: 170, column: 24, scope: !2887)
!2971 = !DILocation(line: 172, column: 17, scope: !2887)
!2972 = !DILocation(line: 172, column: 29, scope: !2887)
!2973 = !DILocation(line: 172, column: 41, scope: !2887)
!2974 = !DILocation(line: 172, column: 53, scope: !2887)
!2975 = !DILocation(line: 172, column: 65, scope: !2887)
!2976 = !DILocation(line: 173, column: 17, scope: !2887)
!2977 = !DILocation(line: 173, column: 29, scope: !2887)
!2978 = !DILocation(line: 173, column: 41, scope: !2887)
!2979 = !DILocation(line: 173, column: 53, scope: !2887)
!2980 = !DILocation(line: 170, column: 7, scope: !2887)
!2981 = !DILocation(line: 174, column: 7, scope: !2887)
!2982 = !DILocation(line: 176, column: 1, scope: !2795)
!2983 = !DILocalVariable(name: "stream", arg: 1, scope: !2984, file: !2796, line: 61, type: !2987)
!2984 = distinct !DISubprogram(name: "version_etc_arn", scope: !2796, file: !2796, line: 61, type: !2985, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3021, retainedNodes: !4)
!2985 = !DISubroutineType(types: !2986)
!2986 = !{null, !2987, !16, !16, !16, !2851, !74}
!2987 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2988, size: 64)
!2988 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2801, line: 7, baseType: !2989)
!2989 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2803, line: 49, size: 1728, elements: !2990)
!2990 = !{!2991, !2992, !2993, !2994, !2995, !2996, !2997, !2998, !2999, !3000, !3001, !3002, !3003, !3004, !3006, !3007, !3008, !3009, !3010, !3011, !3012, !3013, !3014, !3015, !3016, !3017, !3018, !3019, !3020}
!2991 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2989, file: !2803, line: 51, baseType: !19, size: 32)
!2992 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2989, file: !2803, line: 54, baseType: !7, size: 64, offset: 64)
!2993 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2989, file: !2803, line: 55, baseType: !7, size: 64, offset: 128)
!2994 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2989, file: !2803, line: 56, baseType: !7, size: 64, offset: 192)
!2995 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2989, file: !2803, line: 57, baseType: !7, size: 64, offset: 256)
!2996 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2989, file: !2803, line: 58, baseType: !7, size: 64, offset: 320)
!2997 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2989, file: !2803, line: 59, baseType: !7, size: 64, offset: 384)
!2998 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2989, file: !2803, line: 60, baseType: !7, size: 64, offset: 448)
!2999 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2989, file: !2803, line: 61, baseType: !7, size: 64, offset: 512)
!3000 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2989, file: !2803, line: 64, baseType: !7, size: 64, offset: 576)
!3001 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2989, file: !2803, line: 65, baseType: !7, size: 64, offset: 640)
!3002 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2989, file: !2803, line: 66, baseType: !7, size: 64, offset: 704)
!3003 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2989, file: !2803, line: 68, baseType: !2818, size: 64, offset: 768)
!3004 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2989, file: !2803, line: 70, baseType: !3005, size: 64, offset: 832)
!3005 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2989, size: 64)
!3006 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2989, file: !2803, line: 72, baseType: !19, size: 32, offset: 896)
!3007 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2989, file: !2803, line: 73, baseType: !19, size: 32, offset: 928)
!3008 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2989, file: !2803, line: 74, baseType: !392, size: 64, offset: 960)
!3009 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2989, file: !2803, line: 77, baseType: !73, size: 16, offset: 1024)
!3010 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2989, file: !2803, line: 78, baseType: !2827, size: 8, offset: 1040)
!3011 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2989, file: !2803, line: 79, baseType: !2829, size: 8, offset: 1048)
!3012 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2989, file: !2803, line: 81, baseType: !2833, size: 64, offset: 1088)
!3013 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2989, file: !2803, line: 89, baseType: !2836, size: 64, offset: 1152)
!3014 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2989, file: !2803, line: 91, baseType: !2838, size: 64, offset: 1216)
!3015 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2989, file: !2803, line: 92, baseType: !2841, size: 64, offset: 1280)
!3016 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2989, file: !2803, line: 93, baseType: !3005, size: 64, offset: 1344)
!3017 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2989, file: !2803, line: 94, baseType: !6, size: 64, offset: 1408)
!3018 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2989, file: !2803, line: 95, baseType: !74, size: 64, offset: 1472)
!3019 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2989, file: !2803, line: 96, baseType: !19, size: 32, offset: 1536)
!3020 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2989, file: !2803, line: 98, baseType: !2848, size: 160, offset: 1568)
!3021 = distinct !DICompileUnit(language: DW_LANG_C99, file: !131, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!3022 = !DILocalVariable(name: "command_name", arg: 2, scope: !2984, file: !2796, line: 62, type: !16)
!3023 = !DILocalVariable(name: "package", arg: 3, scope: !2984, file: !2796, line: 62, type: !16)
!3024 = !DILocalVariable(name: "version", arg: 4, scope: !2984, file: !2796, line: 63, type: !16)
!3025 = !DILocalVariable(name: "authors", arg: 5, scope: !2984, file: !2796, line: 64, type: !2851)
!3026 = !DILocalVariable(name: "n_authors", arg: 6, scope: !2984, file: !2796, line: 64, type: !74)
!3027 = distinct !DISubprogram(name: "version_etc_va", scope: !2796, file: !2796, line: 199, type: !3028, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !130, retainedNodes: !4)
!3028 = !DISubroutineType(types: !3029)
!3029 = !{null, !2799, !16, !16, !16, !3030}
!3030 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3031, size: 64)
!3031 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !131, line: 192, size: 192, elements: !3032)
!3032 = !{!3033, !3034, !3035, !3036}
!3033 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !3031, file: !131, line: 192, baseType: !59, size: 32)
!3034 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !3031, file: !131, line: 192, baseType: !59, size: 32, offset: 32)
!3035 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !3031, file: !131, line: 192, baseType: !6, size: 64, offset: 64)
!3036 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !3031, file: !131, line: 192, baseType: !6, size: 64, offset: 128)
!3037 = !DILocalVariable(name: "stream", arg: 1, scope: !3027, file: !2796, line: 199, type: !2799)
!3038 = !DILocation(line: 199, column: 23, scope: !3027)
!3039 = !DILocalVariable(name: "command_name", arg: 2, scope: !3027, file: !2796, line: 200, type: !16)
!3040 = !DILocation(line: 200, column: 29, scope: !3027)
!3041 = !DILocalVariable(name: "package", arg: 3, scope: !3027, file: !2796, line: 200, type: !16)
!3042 = !DILocation(line: 200, column: 55, scope: !3027)
!3043 = !DILocalVariable(name: "version", arg: 4, scope: !3027, file: !2796, line: 201, type: !16)
!3044 = !DILocation(line: 201, column: 29, scope: !3027)
!3045 = !DILocalVariable(name: "authors", arg: 5, scope: !3027, file: !2796, line: 201, type: !3030)
!3046 = !DILocation(line: 201, column: 46, scope: !3027)
!3047 = !DILocalVariable(name: "n_authors", scope: !3027, file: !2796, line: 203, type: !74)
!3048 = !DILocation(line: 203, column: 10, scope: !3027)
!3049 = !DILocalVariable(name: "authtab", scope: !3027, file: !2796, line: 204, type: !3050)
!3050 = !DICompositeType(tag: DW_TAG_array_type, baseType: !16, size: 640, elements: !89)
!3051 = !DILocation(line: 204, column: 15, scope: !3027)
!3052 = !DILocation(line: 206, column: 18, scope: !3053)
!3053 = distinct !DILexicalBlock(scope: !3027, file: !2796, line: 206, column: 3)
!3054 = !DILocation(line: 206, column: 8, scope: !3053)
!3055 = !DILocation(line: 207, column: 8, scope: !3056)
!3056 = distinct !DILexicalBlock(scope: !3053, file: !2796, line: 206, column: 3)
!3057 = !DILocation(line: 207, column: 18, scope: !3056)
!3058 = !DILocation(line: 208, column: 10, scope: !3056)
!3059 = !DILocation(line: 208, column: 35, scope: !3056)
!3060 = !DILocation(line: 208, column: 22, scope: !3056)
!3061 = !DILocation(line: 208, column: 14, scope: !3056)
!3062 = !DILocation(line: 208, column: 33, scope: !3056)
!3063 = !DILocation(line: 208, column: 67, scope: !3056)
!3064 = !DILocation(line: 0, scope: !3056)
!3065 = !DILocation(line: 206, column: 3, scope: !3053)
!3066 = !DILocation(line: 209, column: 17, scope: !3056)
!3067 = !DILocation(line: 206, column: 3, scope: !3056)
!3068 = distinct !{!3068, !3065, !3069}
!3069 = !DILocation(line: 210, column: 5, scope: !3053)
!3070 = !DILocation(line: 211, column: 20, scope: !3027)
!3071 = !DILocation(line: 211, column: 28, scope: !3027)
!3072 = !DILocation(line: 211, column: 42, scope: !3027)
!3073 = !DILocation(line: 211, column: 51, scope: !3027)
!3074 = !DILocation(line: 212, column: 20, scope: !3027)
!3075 = !DILocation(line: 212, column: 29, scope: !3027)
!3076 = !DILocation(line: 211, column: 3, scope: !3027)
!3077 = !DILocation(line: 213, column: 1, scope: !3027)
!3078 = !DILocalVariable(name: "stream", arg: 1, scope: !3079, file: !2796, line: 199, type: !3082)
!3079 = distinct !DISubprogram(name: "version_etc_va", scope: !2796, file: !2796, line: 199, type: !3080, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3123, retainedNodes: !4)
!3080 = !DISubroutineType(types: !3081)
!3081 = !{null, !3082, !16, !16, !16, !3116}
!3082 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3083, size: 64)
!3083 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2801, line: 7, baseType: !3084)
!3084 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2803, line: 49, size: 1728, elements: !3085)
!3085 = !{!3086, !3087, !3088, !3089, !3090, !3091, !3092, !3093, !3094, !3095, !3096, !3097, !3098, !3099, !3101, !3102, !3103, !3104, !3105, !3106, !3107, !3108, !3109, !3110, !3111, !3112, !3113, !3114, !3115}
!3086 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3084, file: !2803, line: 51, baseType: !19, size: 32)
!3087 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3084, file: !2803, line: 54, baseType: !7, size: 64, offset: 64)
!3088 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3084, file: !2803, line: 55, baseType: !7, size: 64, offset: 128)
!3089 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3084, file: !2803, line: 56, baseType: !7, size: 64, offset: 192)
!3090 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3084, file: !2803, line: 57, baseType: !7, size: 64, offset: 256)
!3091 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3084, file: !2803, line: 58, baseType: !7, size: 64, offset: 320)
!3092 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3084, file: !2803, line: 59, baseType: !7, size: 64, offset: 384)
!3093 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3084, file: !2803, line: 60, baseType: !7, size: 64, offset: 448)
!3094 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3084, file: !2803, line: 61, baseType: !7, size: 64, offset: 512)
!3095 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3084, file: !2803, line: 64, baseType: !7, size: 64, offset: 576)
!3096 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3084, file: !2803, line: 65, baseType: !7, size: 64, offset: 640)
!3097 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3084, file: !2803, line: 66, baseType: !7, size: 64, offset: 704)
!3098 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3084, file: !2803, line: 68, baseType: !2818, size: 64, offset: 768)
!3099 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3084, file: !2803, line: 70, baseType: !3100, size: 64, offset: 832)
!3100 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3084, size: 64)
!3101 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3084, file: !2803, line: 72, baseType: !19, size: 32, offset: 896)
!3102 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3084, file: !2803, line: 73, baseType: !19, size: 32, offset: 928)
!3103 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3084, file: !2803, line: 74, baseType: !392, size: 64, offset: 960)
!3104 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3084, file: !2803, line: 77, baseType: !73, size: 16, offset: 1024)
!3105 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3084, file: !2803, line: 78, baseType: !2827, size: 8, offset: 1040)
!3106 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3084, file: !2803, line: 79, baseType: !2829, size: 8, offset: 1048)
!3107 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3084, file: !2803, line: 81, baseType: !2833, size: 64, offset: 1088)
!3108 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3084, file: !2803, line: 89, baseType: !2836, size: 64, offset: 1152)
!3109 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3084, file: !2803, line: 91, baseType: !2838, size: 64, offset: 1216)
!3110 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3084, file: !2803, line: 92, baseType: !2841, size: 64, offset: 1280)
!3111 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3084, file: !2803, line: 93, baseType: !3100, size: 64, offset: 1344)
!3112 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3084, file: !2803, line: 94, baseType: !6, size: 64, offset: 1408)
!3113 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3084, file: !2803, line: 95, baseType: !74, size: 64, offset: 1472)
!3114 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3084, file: !2803, line: 96, baseType: !19, size: 32, offset: 1536)
!3115 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3084, file: !2803, line: 98, baseType: !2848, size: 160, offset: 1568)
!3116 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3117, size: 64)
!3117 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !131, line: 192, size: 192, elements: !3118)
!3118 = !{!3119, !3120, !3121, !3122}
!3119 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !3117, file: !131, line: 192, baseType: !59, size: 32)
!3120 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !3117, file: !131, line: 192, baseType: !59, size: 32, offset: 32)
!3121 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !3117, file: !131, line: 192, baseType: !6, size: 64, offset: 64)
!3122 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !3117, file: !131, line: 192, baseType: !6, size: 64, offset: 128)
!3123 = distinct !DICompileUnit(language: DW_LANG_C99, file: !131, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!3124 = !DILocalVariable(name: "command_name", arg: 2, scope: !3079, file: !2796, line: 200, type: !16)
!3125 = !DILocalVariable(name: "package", arg: 3, scope: !3079, file: !2796, line: 200, type: !16)
!3126 = !DILocalVariable(name: "version", arg: 4, scope: !3079, file: !2796, line: 201, type: !16)
!3127 = !DILocalVariable(name: "authors", arg: 5, scope: !3079, file: !2796, line: 201, type: !3116)
!3128 = !DILocalVariable(name: "n_authors", scope: !3079, file: !2796, line: 203, type: !74)
!3129 = !DILocalVariable(name: "authtab", scope: !3079, file: !2796, line: 204, type: !3050)
!3130 = distinct !DISubprogram(name: "version_etc", scope: !2796, file: !2796, line: 230, type: !3131, scopeLine: 233, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !130, retainedNodes: !4)
!3131 = !DISubroutineType(types: !3132)
!3132 = !{null, !2799, !16, !16, !16, null}
!3133 = !DILocalVariable(name: "stream", arg: 1, scope: !3130, file: !2796, line: 230, type: !2799)
!3134 = !DILocation(line: 230, column: 20, scope: !3130)
!3135 = !DILocalVariable(name: "command_name", arg: 2, scope: !3130, file: !2796, line: 231, type: !16)
!3136 = !DILocation(line: 231, column: 26, scope: !3130)
!3137 = !DILocalVariable(name: "package", arg: 3, scope: !3130, file: !2796, line: 231, type: !16)
!3138 = !DILocation(line: 231, column: 52, scope: !3130)
!3139 = !DILocalVariable(name: "version", arg: 4, scope: !3130, file: !2796, line: 232, type: !16)
!3140 = !DILocation(line: 232, column: 26, scope: !3130)
!3141 = !DILocalVariable(name: "authors", scope: !3130, file: !2796, line: 234, type: !3142)
!3142 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !3143, line: 52, baseType: !3144)
!3143 = !DIFile(filename: "/usr/include/stdio.h", directory: "")
!3144 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !3145, line: 32, baseType: !3146)
!3145 = !DIFile(filename: "/usr/lib/llvm-9/lib/clang/9.0.1/include/stdarg.h", directory: "")
!3146 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !131, line: 234, baseType: !3147)
!3147 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3031, size: 192, elements: !2830)
!3148 = !DILocation(line: 234, column: 11, scope: !3130)
!3149 = !DILocation(line: 236, column: 3, scope: !3130)
!3150 = !DILocation(line: 237, column: 19, scope: !3130)
!3151 = !DILocation(line: 237, column: 27, scope: !3130)
!3152 = !DILocation(line: 237, column: 41, scope: !3130)
!3153 = !DILocation(line: 237, column: 50, scope: !3130)
!3154 = !DILocation(line: 237, column: 59, scope: !3130)
!3155 = !DILocation(line: 237, column: 3, scope: !3130)
!3156 = !DILocation(line: 238, column: 3, scope: !3130)
!3157 = !DILocation(line: 239, column: 1, scope: !3130)
!3158 = distinct !DISubprogram(name: "xnmalloc", scope: !3159, file: !3159, line: 99, type: !3160, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !133, retainedNodes: !4)
!3159 = !DIFile(filename: "./lib/xalloc.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3160 = !DISubroutineType(types: !3161)
!3161 = !{!6, !74, !74}
!3162 = !DILocalVariable(name: "n", arg: 1, scope: !3158, file: !3159, line: 99, type: !74)
!3163 = !DILocation(line: 99, column: 18, scope: !3158)
!3164 = !DILocalVariable(name: "s", arg: 2, scope: !3158, file: !3159, line: 99, type: !74)
!3165 = !DILocation(line: 99, column: 28, scope: !3158)
!3166 = !DILocation(line: 101, column: 7, scope: !3167)
!3167 = distinct !DILexicalBlock(scope: !3158, file: !3159, line: 101, column: 7)
!3168 = !DILocation(line: 101, column: 7, scope: !3158)
!3169 = !DILocation(line: 102, column: 5, scope: !3167)
!3170 = !DILocation(line: 103, column: 19, scope: !3158)
!3171 = !DILocation(line: 103, column: 23, scope: !3158)
!3172 = !DILocation(line: 103, column: 21, scope: !3158)
!3173 = !DILocation(line: 103, column: 10, scope: !3158)
!3174 = !DILocation(line: 103, column: 3, scope: !3158)
!3175 = !DILocalVariable(name: "n", arg: 1, scope: !3176, file: !3159, line: 99, type: !74)
!3176 = distinct !DISubprogram(name: "xnmalloc", scope: !3159, file: !3159, line: 99, type: !3160, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3177, retainedNodes: !4)
!3177 = distinct !DICompileUnit(language: DW_LANG_C99, file: !134, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !135, nameTableKind: None)
!3178 = !DILocalVariable(name: "s", arg: 2, scope: !3176, file: !3159, line: 99, type: !74)
!3179 = distinct !DISubprogram(name: "xmalloc", scope: !3180, file: !3180, line: 39, type: !3181, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !133, retainedNodes: !4)
!3180 = !DIFile(filename: "lib/xmalloc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3181 = !DISubroutineType(types: !3182)
!3182 = !{!6, !74}
!3183 = !DILocalVariable(name: "n", arg: 1, scope: !3179, file: !3180, line: 39, type: !74)
!3184 = !DILocation(line: 39, column: 17, scope: !3179)
!3185 = !DILocalVariable(name: "p", scope: !3179, file: !3180, line: 41, type: !6)
!3186 = !DILocation(line: 41, column: 9, scope: !3179)
!3187 = !DILocation(line: 41, column: 21, scope: !3179)
!3188 = !DILocation(line: 41, column: 13, scope: !3179)
!3189 = !DILocation(line: 42, column: 8, scope: !3190)
!3190 = distinct !DILexicalBlock(scope: !3179, file: !3180, line: 42, column: 7)
!3191 = !DILocation(line: 42, column: 10, scope: !3190)
!3192 = !DILocation(line: 42, column: 13, scope: !3190)
!3193 = !DILocation(line: 42, column: 15, scope: !3190)
!3194 = !DILocation(line: 42, column: 7, scope: !3179)
!3195 = !DILocation(line: 43, column: 5, scope: !3190)
!3196 = !DILocation(line: 44, column: 10, scope: !3179)
!3197 = !DILocation(line: 44, column: 3, scope: !3179)
!3198 = !DILocalVariable(name: "n", arg: 1, scope: !3199, file: !3180, line: 39, type: !74)
!3199 = distinct !DISubprogram(name: "xmalloc", scope: !3180, file: !3180, line: 39, type: !3181, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3200, retainedNodes: !4)
!3200 = distinct !DICompileUnit(language: DW_LANG_C99, file: !134, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !135, nameTableKind: None)
!3201 = !DILocalVariable(name: "p", scope: !3199, file: !3180, line: 41, type: !6)
!3202 = distinct !DISubprogram(name: "xrealloc", scope: !3180, file: !3180, line: 51, type: !3203, scopeLine: 52, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !133, retainedNodes: !4)
!3203 = !DISubroutineType(types: !3204)
!3204 = !{!6, !6, !74}
!3205 = !DILocalVariable(name: "p", arg: 1, scope: !3202, file: !3180, line: 51, type: !6)
!3206 = !DILocation(line: 51, column: 17, scope: !3202)
!3207 = !DILocalVariable(name: "n", arg: 2, scope: !3202, file: !3180, line: 51, type: !74)
!3208 = !DILocation(line: 51, column: 27, scope: !3202)
!3209 = !DILocation(line: 53, column: 8, scope: !3210)
!3210 = distinct !DILexicalBlock(scope: !3202, file: !3180, line: 53, column: 7)
!3211 = !DILocation(line: 53, column: 10, scope: !3210)
!3212 = !DILocation(line: 53, column: 13, scope: !3210)
!3213 = !DILocation(line: 53, column: 7, scope: !3202)
!3214 = !DILocation(line: 57, column: 13, scope: !3215)
!3215 = distinct !DILexicalBlock(scope: !3210, file: !3180, line: 54, column: 5)
!3216 = !DILocation(line: 57, column: 7, scope: !3215)
!3217 = !DILocation(line: 58, column: 7, scope: !3215)
!3218 = !DILocation(line: 61, column: 16, scope: !3202)
!3219 = !DILocation(line: 61, column: 19, scope: !3202)
!3220 = !DILocation(line: 61, column: 7, scope: !3202)
!3221 = !DILocation(line: 61, column: 5, scope: !3202)
!3222 = !DILocation(line: 62, column: 8, scope: !3223)
!3223 = distinct !DILexicalBlock(scope: !3202, file: !3180, line: 62, column: 7)
!3224 = !DILocation(line: 62, column: 10, scope: !3223)
!3225 = !DILocation(line: 62, column: 13, scope: !3223)
!3226 = !DILocation(line: 62, column: 7, scope: !3202)
!3227 = !DILocation(line: 63, column: 5, scope: !3223)
!3228 = !DILocation(line: 64, column: 10, scope: !3202)
!3229 = !DILocation(line: 64, column: 3, scope: !3202)
!3230 = !DILocation(line: 65, column: 1, scope: !3202)
!3231 = distinct !DISubprogram(name: "xcharalloc", scope: !3159, file: !3159, line: 216, type: !880, scopeLine: 217, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !133, retainedNodes: !4)
!3232 = !DILocalVariable(name: "n", arg: 1, scope: !3231, file: !3159, line: 216, type: !74)
!3233 = !DILocation(line: 216, column: 20, scope: !3231)
!3234 = !DILocation(line: 218, column: 10, scope: !3231)
!3235 = !DILocation(line: 218, column: 3, scope: !3231)
!3236 = distinct !DISubprogram(name: "xalloc_die", scope: !3237, file: !3237, line: 32, type: !1016, scopeLine: 33, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !136, retainedNodes: !4)
!3237 = !DIFile(filename: "lib/xalloc-die.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3238 = !DILocation(line: 34, column: 10, scope: !3236)
!3239 = !DILocation(line: 34, column: 33, scope: !3236)
!3240 = !DILocation(line: 34, column: 3, scope: !3236)
!3241 = !DILocation(line: 40, column: 3, scope: !3236)
!3242 = distinct !DISubprogram(name: "xgetcwd", scope: !3243, file: !3243, line: 35, type: !370, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !138, retainedNodes: !4)
!3243 = !DIFile(filename: "lib/xgetcwd.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3244 = !DILocalVariable(name: "cwd", scope: !3242, file: !3243, line: 37, type: !7)
!3245 = !DILocation(line: 37, column: 9, scope: !3242)
!3246 = !DILocation(line: 37, column: 15, scope: !3242)
!3247 = !DILocation(line: 38, column: 9, scope: !3248)
!3248 = distinct !DILexicalBlock(scope: !3242, file: !3243, line: 38, column: 7)
!3249 = !DILocation(line: 38, column: 13, scope: !3248)
!3250 = !DILocation(line: 38, column: 16, scope: !3248)
!3251 = !DILocation(line: 38, column: 22, scope: !3248)
!3252 = !DILocation(line: 38, column: 7, scope: !3242)
!3253 = !DILocation(line: 39, column: 5, scope: !3248)
!3254 = !DILocation(line: 40, column: 10, scope: !3242)
!3255 = !DILocation(line: 40, column: 3, scope: !3242)
!3256 = !DILocalVariable(name: "cwd", scope: !3257, file: !3243, line: 37, type: !7)
!3257 = distinct !DISubprogram(name: "xgetcwd", scope: !3243, file: !3243, line: 35, type: !370, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3258, retainedNodes: !4)
!3258 = distinct !DICompileUnit(language: DW_LANG_C99, file: !139, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!3259 = distinct !DISubprogram(name: "rpl_mbrtowc", scope: !3260, file: !3260, line: 86, type: !3261, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !140, retainedNodes: !4)
!3260 = !DIFile(filename: "lib/mbrtowc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3261 = !DISubroutineType(types: !3262)
!3262 = !{!74, !3263, !16, !74, !3264}
!3263 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1995, size: 64)
!3264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3265, size: 64)
!3265 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !1966, line: 6, baseType: !3266)
!3266 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !1968, line: 21, baseType: !3267)
!3267 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1968, line: 13, size: 64, elements: !3268)
!3268 = !{!3269, !3270}
!3269 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !3267, file: !1968, line: 15, baseType: !19, size: 32)
!3270 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !3267, file: !1968, line: 20, baseType: !3271, size: 32, offset: 32)
!3271 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !3267, file: !1968, line: 16, size: 32, elements: !3272)
!3272 = !{!3273, !3274}
!3273 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !3271, file: !1968, line: 18, baseType: !59, size: 32)
!3274 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !3271, file: !1968, line: 19, baseType: !1977, size: 32)
!3275 = !DILocalVariable(name: "pwc", arg: 1, scope: !3259, file: !3260, line: 86, type: !3263)
!3276 = !DILocation(line: 86, column: 23, scope: !3259)
!3277 = !DILocalVariable(name: "s", arg: 2, scope: !3259, file: !3260, line: 86, type: !16)
!3278 = !DILocation(line: 86, column: 40, scope: !3259)
!3279 = !DILocalVariable(name: "n", arg: 3, scope: !3259, file: !3260, line: 86, type: !74)
!3280 = !DILocation(line: 86, column: 50, scope: !3259)
!3281 = !DILocalVariable(name: "ps", arg: 4, scope: !3259, file: !3260, line: 86, type: !3264)
!3282 = !DILocation(line: 86, column: 64, scope: !3259)
!3283 = !DILocalVariable(name: "ret", scope: !3259, file: !3260, line: 88, type: !74)
!3284 = !DILocation(line: 88, column: 10, scope: !3259)
!3285 = !DILocalVariable(name: "wc", scope: !3259, file: !3260, line: 89, type: !1995)
!3286 = !DILocation(line: 89, column: 11, scope: !3259)
!3287 = !DILocation(line: 105, column: 9, scope: !3288)
!3288 = distinct !DILexicalBlock(scope: !3259, file: !3260, line: 105, column: 7)
!3289 = !DILocation(line: 105, column: 7, scope: !3259)
!3290 = !DILocation(line: 106, column: 9, scope: !3288)
!3291 = !DILocation(line: 106, column: 5, scope: !3288)
!3292 = !DILocation(line: 145, column: 18, scope: !3259)
!3293 = !DILocation(line: 145, column: 23, scope: !3259)
!3294 = !DILocation(line: 145, column: 26, scope: !3259)
!3295 = !DILocation(line: 145, column: 29, scope: !3259)
!3296 = !DILocation(line: 145, column: 9, scope: !3259)
!3297 = !DILocation(line: 145, column: 7, scope: !3259)
!3298 = !DILocation(line: 154, column: 22, scope: !3299)
!3299 = distinct !DILexicalBlock(scope: !3259, file: !3260, line: 154, column: 7)
!3300 = !DILocation(line: 154, column: 19, scope: !3299)
!3301 = !DILocation(line: 154, column: 26, scope: !3299)
!3302 = !DILocation(line: 154, column: 29, scope: !3299)
!3303 = !DILocation(line: 154, column: 31, scope: !3299)
!3304 = !DILocation(line: 154, column: 36, scope: !3299)
!3305 = !DILocation(line: 154, column: 41, scope: !3299)
!3306 = !DILocation(line: 154, column: 7, scope: !3259)
!3307 = !DILocalVariable(name: "uc", scope: !3308, file: !3260, line: 156, type: !148)
!3308 = distinct !DILexicalBlock(scope: !3299, file: !3260, line: 155, column: 5)
!3309 = !DILocation(line: 156, column: 21, scope: !3308)
!3310 = !DILocation(line: 156, column: 27, scope: !3308)
!3311 = !DILocation(line: 156, column: 26, scope: !3308)
!3312 = !DILocation(line: 157, column: 14, scope: !3308)
!3313 = !DILocation(line: 157, column: 8, scope: !3308)
!3314 = !DILocation(line: 157, column: 12, scope: !3308)
!3315 = !DILocation(line: 158, column: 7, scope: !3308)
!3316 = !DILocation(line: 162, column: 10, scope: !3259)
!3317 = !DILocation(line: 162, column: 3, scope: !3259)
!3318 = !DILocation(line: 163, column: 1, scope: !3259)
!3319 = distinct !DISubprogram(name: "c_strcasecmp", scope: !3320, file: !3320, line: 27, type: !3321, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !143, retainedNodes: !4)
!3320 = !DIFile(filename: "lib/c-strcasecmp.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3321 = !DISubroutineType(types: !3322)
!3322 = !{!19, !16, !16}
!3323 = !DILocalVariable(name: "s1", arg: 1, scope: !3319, file: !3320, line: 27, type: !16)
!3324 = !DILocation(line: 27, column: 27, scope: !3319)
!3325 = !DILocalVariable(name: "s2", arg: 2, scope: !3319, file: !3320, line: 27, type: !16)
!3326 = !DILocation(line: 27, column: 43, scope: !3319)
!3327 = !DILocalVariable(name: "p1", scope: !3319, file: !3320, line: 29, type: !146)
!3328 = !DILocation(line: 29, column: 33, scope: !3319)
!3329 = !DILocation(line: 29, column: 62, scope: !3319)
!3330 = !DILocalVariable(name: "p2", scope: !3319, file: !3320, line: 30, type: !146)
!3331 = !DILocation(line: 30, column: 33, scope: !3319)
!3332 = !DILocation(line: 30, column: 62, scope: !3319)
!3333 = !DILocalVariable(name: "c1", scope: !3319, file: !3320, line: 31, type: !148)
!3334 = !DILocation(line: 31, column: 17, scope: !3319)
!3335 = !DILocalVariable(name: "c2", scope: !3319, file: !3320, line: 31, type: !148)
!3336 = !DILocation(line: 31, column: 21, scope: !3319)
!3337 = !DILocation(line: 33, column: 7, scope: !3338)
!3338 = distinct !DILexicalBlock(scope: !3319, file: !3320, line: 33, column: 7)
!3339 = !DILocation(line: 33, column: 13, scope: !3338)
!3340 = !DILocation(line: 33, column: 10, scope: !3338)
!3341 = !DILocation(line: 33, column: 7, scope: !3319)
!3342 = !DILocation(line: 34, column: 5, scope: !3338)
!3343 = !DILocation(line: 36, column: 3, scope: !3319)
!3344 = !DILocation(line: 38, column: 24, scope: !3345)
!3345 = distinct !DILexicalBlock(scope: !3319, file: !3320, line: 37, column: 5)
!3346 = !DILocation(line: 38, column: 23, scope: !3345)
!3347 = !DILocation(line: 38, column: 12, scope: !3345)
!3348 = !DILocation(line: 38, column: 10, scope: !3345)
!3349 = !DILocation(line: 39, column: 24, scope: !3345)
!3350 = !DILocation(line: 39, column: 23, scope: !3345)
!3351 = !DILocation(line: 39, column: 12, scope: !3345)
!3352 = !DILocation(line: 39, column: 10, scope: !3345)
!3353 = !DILocation(line: 41, column: 11, scope: !3354)
!3354 = distinct !DILexicalBlock(scope: !3345, file: !3320, line: 41, column: 11)
!3355 = !DILocation(line: 41, column: 14, scope: !3354)
!3356 = !DILocation(line: 41, column: 11, scope: !3345)
!3357 = !DILocation(line: 42, column: 9, scope: !3354)
!3358 = !DILocation(line: 44, column: 7, scope: !3345)
!3359 = !DILocation(line: 45, column: 7, scope: !3345)
!3360 = !DILocation(line: 46, column: 5, scope: !3345)
!3361 = !DILocation(line: 47, column: 10, scope: !3319)
!3362 = !DILocation(line: 47, column: 16, scope: !3319)
!3363 = !DILocation(line: 47, column: 13, scope: !3319)
!3364 = distinct !{!3364, !3343, !3365}
!3365 = !DILocation(line: 47, column: 18, scope: !3319)
!3366 = !DILocation(line: 50, column: 12, scope: !3367)
!3367 = distinct !DILexicalBlock(scope: !3319, file: !3320, line: 49, column: 7)
!3368 = !DILocation(line: 50, column: 17, scope: !3367)
!3369 = !DILocation(line: 50, column: 15, scope: !3367)
!3370 = !DILocation(line: 50, column: 5, scope: !3367)
!3371 = !DILocation(line: 56, column: 1, scope: !3319)
!3372 = !DILocalVariable(name: "s1", arg: 1, scope: !3373, file: !3320, line: 27, type: !16)
!3373 = distinct !DISubprogram(name: "c_strcasecmp", scope: !3320, file: !3320, line: 27, type: !3321, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3374, retainedNodes: !4)
!3374 = distinct !DICompileUnit(language: DW_LANG_C99, file: !144, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !145, nameTableKind: None)
!3375 = !DILocalVariable(name: "s2", arg: 2, scope: !3373, file: !3320, line: 27, type: !16)
!3376 = !DILocalVariable(name: "p1", scope: !3373, file: !3320, line: 29, type: !146)
!3377 = !DILocalVariable(name: "p2", scope: !3373, file: !3320, line: 30, type: !146)
!3378 = !DILocalVariable(name: "c1", scope: !3373, file: !3320, line: 31, type: !148)
!3379 = !DILocalVariable(name: "c2", scope: !3373, file: !3320, line: 31, type: !148)
!3380 = distinct !DISubprogram(name: "close_stream", scope: !3381, file: !3381, line: 56, type: !3382, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !149, retainedNodes: !4)
!3381 = !DIFile(filename: "lib/close-stream.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3382 = !DISubroutineType(types: !3383)
!3383 = !{!19, !3384}
!3384 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3385, size: 64)
!3385 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2801, line: 7, baseType: !3386)
!3386 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2803, line: 49, size: 1728, elements: !3387)
!3387 = !{!3388, !3389, !3390, !3391, !3392, !3393, !3394, !3395, !3396, !3397, !3398, !3399, !3400, !3401, !3403, !3404, !3405, !3406, !3407, !3408, !3409, !3410, !3411, !3412, !3413, !3414, !3415, !3416, !3417}
!3388 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3386, file: !2803, line: 51, baseType: !19, size: 32)
!3389 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3386, file: !2803, line: 54, baseType: !7, size: 64, offset: 64)
!3390 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3386, file: !2803, line: 55, baseType: !7, size: 64, offset: 128)
!3391 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3386, file: !2803, line: 56, baseType: !7, size: 64, offset: 192)
!3392 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3386, file: !2803, line: 57, baseType: !7, size: 64, offset: 256)
!3393 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3386, file: !2803, line: 58, baseType: !7, size: 64, offset: 320)
!3394 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3386, file: !2803, line: 59, baseType: !7, size: 64, offset: 384)
!3395 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3386, file: !2803, line: 60, baseType: !7, size: 64, offset: 448)
!3396 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3386, file: !2803, line: 61, baseType: !7, size: 64, offset: 512)
!3397 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3386, file: !2803, line: 64, baseType: !7, size: 64, offset: 576)
!3398 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3386, file: !2803, line: 65, baseType: !7, size: 64, offset: 640)
!3399 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3386, file: !2803, line: 66, baseType: !7, size: 64, offset: 704)
!3400 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3386, file: !2803, line: 68, baseType: !2818, size: 64, offset: 768)
!3401 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3386, file: !2803, line: 70, baseType: !3402, size: 64, offset: 832)
!3402 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3386, size: 64)
!3403 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3386, file: !2803, line: 72, baseType: !19, size: 32, offset: 896)
!3404 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3386, file: !2803, line: 73, baseType: !19, size: 32, offset: 928)
!3405 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3386, file: !2803, line: 74, baseType: !392, size: 64, offset: 960)
!3406 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3386, file: !2803, line: 77, baseType: !73, size: 16, offset: 1024)
!3407 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3386, file: !2803, line: 78, baseType: !2827, size: 8, offset: 1040)
!3408 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3386, file: !2803, line: 79, baseType: !2829, size: 8, offset: 1048)
!3409 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3386, file: !2803, line: 81, baseType: !2833, size: 64, offset: 1088)
!3410 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3386, file: !2803, line: 89, baseType: !2836, size: 64, offset: 1152)
!3411 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3386, file: !2803, line: 91, baseType: !2838, size: 64, offset: 1216)
!3412 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3386, file: !2803, line: 92, baseType: !2841, size: 64, offset: 1280)
!3413 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3386, file: !2803, line: 93, baseType: !3402, size: 64, offset: 1344)
!3414 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3386, file: !2803, line: 94, baseType: !6, size: 64, offset: 1408)
!3415 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3386, file: !2803, line: 95, baseType: !74, size: 64, offset: 1472)
!3416 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3386, file: !2803, line: 96, baseType: !19, size: 32, offset: 1536)
!3417 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3386, file: !2803, line: 98, baseType: !2848, size: 160, offset: 1568)
!3418 = !DILocalVariable(name: "stream", arg: 1, scope: !3380, file: !3381, line: 56, type: !3384)
!3419 = !DILocation(line: 56, column: 21, scope: !3380)
!3420 = !DILocalVariable(name: "some_pending", scope: !3380, file: !3381, line: 58, type: !3421)
!3421 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !38)
!3422 = !DILocation(line: 58, column: 14, scope: !3380)
!3423 = !DILocation(line: 58, column: 42, scope: !3380)
!3424 = !DILocation(line: 58, column: 30, scope: !3380)
!3425 = !DILocation(line: 58, column: 50, scope: !3380)
!3426 = !DILocalVariable(name: "prev_fail", scope: !3380, file: !3381, line: 59, type: !3421)
!3427 = !DILocation(line: 59, column: 14, scope: !3380)
!3428 = !DILocation(line: 59, column: 27, scope: !3380)
!3429 = !DILocation(line: 59, column: 43, scope: !3380)
!3430 = !DILocalVariable(name: "fclose_fail", scope: !3380, file: !3381, line: 60, type: !3421)
!3431 = !DILocation(line: 60, column: 14, scope: !3380)
!3432 = !DILocation(line: 60, column: 37, scope: !3380)
!3433 = !DILocation(line: 60, column: 29, scope: !3380)
!3434 = !DILocation(line: 60, column: 45, scope: !3380)
!3435 = !DILocation(line: 70, column: 7, scope: !3436)
!3436 = distinct !DILexicalBlock(scope: !3380, file: !3381, line: 70, column: 7)
!3437 = !DILocation(line: 70, column: 17, scope: !3436)
!3438 = !DILocation(line: 70, column: 21, scope: !3436)
!3439 = !DILocation(line: 70, column: 33, scope: !3436)
!3440 = !DILocation(line: 70, column: 37, scope: !3436)
!3441 = !DILocation(line: 70, column: 50, scope: !3436)
!3442 = !DILocation(line: 70, column: 53, scope: !3436)
!3443 = !DILocation(line: 70, column: 59, scope: !3436)
!3444 = !DILocation(line: 70, column: 7, scope: !3380)
!3445 = !DILocation(line: 72, column: 13, scope: !3446)
!3446 = distinct !DILexicalBlock(scope: !3447, file: !3381, line: 72, column: 11)
!3447 = distinct !DILexicalBlock(scope: !3436, file: !3381, line: 71, column: 5)
!3448 = !DILocation(line: 72, column: 11, scope: !3447)
!3449 = !DILocation(line: 73, column: 9, scope: !3446)
!3450 = !DILocation(line: 73, column: 15, scope: !3446)
!3451 = !DILocation(line: 74, column: 7, scope: !3447)
!3452 = !DILocation(line: 77, column: 3, scope: !3380)
!3453 = !DILocation(line: 78, column: 1, scope: !3380)
!3454 = !DILocalVariable(name: "stream", arg: 1, scope: !3455, file: !3381, line: 56, type: !3458)
!3455 = distinct !DISubprogram(name: "close_stream", scope: !3381, file: !3381, line: 56, type: !3456, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3492, retainedNodes: !4)
!3456 = !DISubroutineType(types: !3457)
!3457 = !{!19, !3458}
!3458 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3459, size: 64)
!3459 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2801, line: 7, baseType: !3460)
!3460 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2803, line: 49, size: 1728, elements: !3461)
!3461 = !{!3462, !3463, !3464, !3465, !3466, !3467, !3468, !3469, !3470, !3471, !3472, !3473, !3474, !3475, !3477, !3478, !3479, !3480, !3481, !3482, !3483, !3484, !3485, !3486, !3487, !3488, !3489, !3490, !3491}
!3462 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3460, file: !2803, line: 51, baseType: !19, size: 32)
!3463 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3460, file: !2803, line: 54, baseType: !7, size: 64, offset: 64)
!3464 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3460, file: !2803, line: 55, baseType: !7, size: 64, offset: 128)
!3465 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3460, file: !2803, line: 56, baseType: !7, size: 64, offset: 192)
!3466 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3460, file: !2803, line: 57, baseType: !7, size: 64, offset: 256)
!3467 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3460, file: !2803, line: 58, baseType: !7, size: 64, offset: 320)
!3468 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3460, file: !2803, line: 59, baseType: !7, size: 64, offset: 384)
!3469 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3460, file: !2803, line: 60, baseType: !7, size: 64, offset: 448)
!3470 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3460, file: !2803, line: 61, baseType: !7, size: 64, offset: 512)
!3471 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3460, file: !2803, line: 64, baseType: !7, size: 64, offset: 576)
!3472 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3460, file: !2803, line: 65, baseType: !7, size: 64, offset: 640)
!3473 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3460, file: !2803, line: 66, baseType: !7, size: 64, offset: 704)
!3474 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3460, file: !2803, line: 68, baseType: !2818, size: 64, offset: 768)
!3475 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3460, file: !2803, line: 70, baseType: !3476, size: 64, offset: 832)
!3476 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3460, size: 64)
!3477 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3460, file: !2803, line: 72, baseType: !19, size: 32, offset: 896)
!3478 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3460, file: !2803, line: 73, baseType: !19, size: 32, offset: 928)
!3479 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3460, file: !2803, line: 74, baseType: !392, size: 64, offset: 960)
!3480 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3460, file: !2803, line: 77, baseType: !73, size: 16, offset: 1024)
!3481 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3460, file: !2803, line: 78, baseType: !2827, size: 8, offset: 1040)
!3482 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3460, file: !2803, line: 79, baseType: !2829, size: 8, offset: 1048)
!3483 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3460, file: !2803, line: 81, baseType: !2833, size: 64, offset: 1088)
!3484 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3460, file: !2803, line: 89, baseType: !2836, size: 64, offset: 1152)
!3485 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3460, file: !2803, line: 91, baseType: !2838, size: 64, offset: 1216)
!3486 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3460, file: !2803, line: 92, baseType: !2841, size: 64, offset: 1280)
!3487 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3460, file: !2803, line: 93, baseType: !3476, size: 64, offset: 1344)
!3488 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3460, file: !2803, line: 94, baseType: !6, size: 64, offset: 1408)
!3489 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3460, file: !2803, line: 95, baseType: !74, size: 64, offset: 1472)
!3490 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3460, file: !2803, line: 96, baseType: !19, size: 32, offset: 1536)
!3491 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3460, file: !2803, line: 98, baseType: !2848, size: 160, offset: 1568)
!3492 = distinct !DICompileUnit(language: DW_LANG_C99, file: !150, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!3493 = !DILocalVariable(name: "some_pending", scope: !3455, file: !3381, line: 58, type: !3421)
!3494 = !DILocalVariable(name: "prev_fail", scope: !3455, file: !3381, line: 59, type: !3421)
!3495 = !DILocalVariable(name: "fclose_fail", scope: !3455, file: !3381, line: 60, type: !3421)
!3496 = distinct !DISubprogram(name: "hard_locale", scope: !3497, file: !3497, line: 27, type: !3498, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !151, retainedNodes: !4)
!3497 = !DIFile(filename: "lib/hard-locale.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3498 = !DISubroutineType(types: !3499)
!3499 = !{!38, !19}
!3500 = !DILocalVariable(name: "category", arg: 1, scope: !3496, file: !3497, line: 27, type: !19)
!3501 = !DILocation(line: 27, column: 18, scope: !3496)
!3502 = !DILocalVariable(name: "locale", scope: !3496, file: !3497, line: 29, type: !3503)
!3503 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 2056, elements: !3504)
!3504 = !{!3505}
!3505 = !DISubrange(count: 257)
!3506 = !DILocation(line: 29, column: 8, scope: !3496)
!3507 = !DILocation(line: 31, column: 25, scope: !3508)
!3508 = distinct !DILexicalBlock(scope: !3496, file: !3497, line: 31, column: 7)
!3509 = !DILocation(line: 31, column: 35, scope: !3508)
!3510 = !DILocation(line: 31, column: 7, scope: !3508)
!3511 = !DILocation(line: 31, column: 7, scope: !3496)
!3512 = !DILocation(line: 32, column: 5, scope: !3508)
!3513 = !DILocation(line: 34, column: 20, scope: !3496)
!3514 = !DILocation(line: 34, column: 12, scope: !3496)
!3515 = !DILocation(line: 34, column: 33, scope: !3496)
!3516 = !DILocation(line: 34, column: 38, scope: !3496)
!3517 = !DILocation(line: 34, column: 49, scope: !3496)
!3518 = !DILocation(line: 34, column: 41, scope: !3496)
!3519 = !DILocation(line: 34, column: 66, scope: !3496)
!3520 = !DILocation(line: 34, column: 10, scope: !3496)
!3521 = !DILocation(line: 34, column: 3, scope: !3496)
!3522 = !DILocation(line: 35, column: 1, scope: !3496)
!3523 = distinct !DISubprogram(name: "locale_charset", scope: !3524, file: !3524, line: 831, type: !3525, scopeLine: 832, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !153, retainedNodes: !4)
!3524 = !DIFile(filename: "lib/localcharset.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3525 = !DISubroutineType(types: !3526)
!3526 = !{!16}
!3527 = !DILocalVariable(name: "codeset", scope: !3523, file: !3524, line: 833, type: !16)
!3528 = !DILocation(line: 833, column: 15, scope: !3523)
!3529 = !DILocation(line: 847, column: 13, scope: !3523)
!3530 = !DILocation(line: 847, column: 11, scope: !3523)
!3531 = !DILocation(line: 911, column: 7, scope: !3532)
!3532 = distinct !DILexicalBlock(scope: !3523, file: !3524, line: 911, column: 7)
!3533 = !DILocation(line: 911, column: 15, scope: !3532)
!3534 = !DILocation(line: 911, column: 7, scope: !3523)
!3535 = !DILocation(line: 913, column: 13, scope: !3532)
!3536 = !DILocation(line: 913, column: 5, scope: !3532)
!3537 = !DILocation(line: 1070, column: 13, scope: !3538)
!3538 = distinct !DILexicalBlock(scope: !3539, file: !3524, line: 1070, column: 13)
!3539 = distinct !DILexicalBlock(scope: !3540, file: !3524, line: 1060, column: 7)
!3540 = distinct !DILexicalBlock(scope: !3523, file: !3524, line: 1019, column: 3)
!3541 = !DILocation(line: 1070, column: 24, scope: !3538)
!3542 = !DILocation(line: 1070, column: 13, scope: !3539)
!3543 = !DILocation(line: 1071, column: 19, scope: !3538)
!3544 = !DILocation(line: 1071, column: 11, scope: !3538)
!3545 = !DILocation(line: 1158, column: 10, scope: !3523)
!3546 = !DILocation(line: 1158, column: 3, scope: !3523)
!3547 = distinct !DISubprogram(name: "setlocale_null_r", scope: !3548, file: !3548, line: 269, type: !3549, scopeLine: 270, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !155, retainedNodes: !4)
!3548 = !DIFile(filename: "lib/setlocale_null.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3549 = !DISubroutineType(types: !3550)
!3550 = !{!19, !19, !7, !74}
!3551 = !DILocalVariable(name: "category", arg: 1, scope: !3547, file: !3548, line: 269, type: !19)
!3552 = !DILocation(line: 269, column: 23, scope: !3547)
!3553 = !DILocalVariable(name: "buf", arg: 2, scope: !3547, file: !3548, line: 269, type: !7)
!3554 = !DILocation(line: 269, column: 39, scope: !3547)
!3555 = !DILocalVariable(name: "bufsize", arg: 3, scope: !3547, file: !3548, line: 269, type: !74)
!3556 = !DILocation(line: 269, column: 51, scope: !3547)
!3557 = !DILocation(line: 274, column: 35, scope: !3547)
!3558 = !DILocation(line: 274, column: 45, scope: !3547)
!3559 = !DILocation(line: 274, column: 50, scope: !3547)
!3560 = !DILocation(line: 274, column: 10, scope: !3547)
!3561 = !DILocation(line: 274, column: 3, scope: !3547)
!3562 = distinct !DISubprogram(name: "setlocale_null_unlocked", scope: !3548, file: !3548, line: 91, type: !3549, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !155, retainedNodes: !4)
!3563 = !DILocalVariable(name: "category", arg: 1, scope: !3562, file: !3548, line: 91, type: !19)
!3564 = !DILocation(line: 91, column: 30, scope: !3562)
!3565 = !DILocalVariable(name: "buf", arg: 2, scope: !3562, file: !3548, line: 91, type: !7)
!3566 = !DILocation(line: 91, column: 46, scope: !3562)
!3567 = !DILocalVariable(name: "bufsize", arg: 3, scope: !3562, file: !3548, line: 91, type: !74)
!3568 = !DILocation(line: 91, column: 58, scope: !3562)
!3569 = !DILocalVariable(name: "result", scope: !3562, file: !3548, line: 140, type: !16)
!3570 = !DILocation(line: 140, column: 15, scope: !3562)
!3571 = !DILocation(line: 140, column: 51, scope: !3562)
!3572 = !DILocation(line: 140, column: 24, scope: !3562)
!3573 = !DILocation(line: 142, column: 7, scope: !3574)
!3574 = distinct !DILexicalBlock(scope: !3562, file: !3548, line: 142, column: 7)
!3575 = !DILocation(line: 142, column: 14, scope: !3574)
!3576 = !DILocation(line: 142, column: 7, scope: !3562)
!3577 = !DILocation(line: 145, column: 11, scope: !3578)
!3578 = distinct !DILexicalBlock(scope: !3579, file: !3548, line: 145, column: 11)
!3579 = distinct !DILexicalBlock(scope: !3574, file: !3548, line: 143, column: 5)
!3580 = !DILocation(line: 145, column: 19, scope: !3578)
!3581 = !DILocation(line: 145, column: 11, scope: !3579)
!3582 = !DILocation(line: 149, column: 9, scope: !3578)
!3583 = !DILocation(line: 149, column: 16, scope: !3578)
!3584 = !DILocation(line: 150, column: 7, scope: !3579)
!3585 = !DILocalVariable(name: "length", scope: !3586, file: !3548, line: 154, type: !74)
!3586 = distinct !DILexicalBlock(scope: !3574, file: !3548, line: 153, column: 5)
!3587 = !DILocation(line: 154, column: 14, scope: !3586)
!3588 = !DILocation(line: 154, column: 31, scope: !3586)
!3589 = !DILocation(line: 154, column: 23, scope: !3586)
!3590 = !DILocation(line: 155, column: 11, scope: !3591)
!3591 = distinct !DILexicalBlock(scope: !3586, file: !3548, line: 155, column: 11)
!3592 = !DILocation(line: 155, column: 20, scope: !3591)
!3593 = !DILocation(line: 155, column: 18, scope: !3591)
!3594 = !DILocation(line: 155, column: 11, scope: !3586)
!3595 = !DILocation(line: 157, column: 19, scope: !3596)
!3596 = distinct !DILexicalBlock(scope: !3591, file: !3548, line: 156, column: 9)
!3597 = !DILocation(line: 157, column: 24, scope: !3596)
!3598 = !DILocation(line: 157, column: 32, scope: !3596)
!3599 = !DILocation(line: 157, column: 39, scope: !3596)
!3600 = !DILocation(line: 157, column: 11, scope: !3596)
!3601 = !DILocation(line: 158, column: 11, scope: !3596)
!3602 = !DILocation(line: 162, column: 15, scope: !3603)
!3603 = distinct !DILexicalBlock(scope: !3604, file: !3548, line: 162, column: 15)
!3604 = distinct !DILexicalBlock(scope: !3591, file: !3548, line: 161, column: 9)
!3605 = !DILocation(line: 162, column: 23, scope: !3603)
!3606 = !DILocation(line: 162, column: 15, scope: !3604)
!3607 = !DILocation(line: 167, column: 23, scope: !3608)
!3608 = distinct !DILexicalBlock(scope: !3603, file: !3548, line: 163, column: 13)
!3609 = !DILocation(line: 167, column: 28, scope: !3608)
!3610 = !DILocation(line: 167, column: 36, scope: !3608)
!3611 = !DILocation(line: 167, column: 44, scope: !3608)
!3612 = !DILocation(line: 167, column: 15, scope: !3608)
!3613 = !DILocation(line: 168, column: 15, scope: !3608)
!3614 = !DILocation(line: 168, column: 19, scope: !3608)
!3615 = !DILocation(line: 168, column: 27, scope: !3608)
!3616 = !DILocation(line: 168, column: 32, scope: !3608)
!3617 = !DILocation(line: 169, column: 13, scope: !3608)
!3618 = !DILocation(line: 170, column: 11, scope: !3604)
!3619 = !DILocation(line: 174, column: 1, scope: !3562)
!3620 = !DILocalVariable(name: "category", arg: 1, scope: !3621, file: !3548, line: 91, type: !19)
!3621 = distinct !DISubprogram(name: "setlocale_null_unlocked", scope: !3548, file: !3548, line: 91, type: !3549, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3622, retainedNodes: !4)
!3622 = distinct !DICompileUnit(language: DW_LANG_C99, file: !156, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!3623 = !DILocalVariable(name: "buf", arg: 2, scope: !3621, file: !3548, line: 91, type: !7)
!3624 = distinct !DISubprogram(name: "setlocale_null_androidfix", scope: !3548, file: !3548, line: 60, type: !3625, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !155, retainedNodes: !4)
!3625 = !DISubroutineType(types: !3626)
!3626 = !{!16, !19}
!3627 = !DILocalVariable(name: "category", arg: 1, scope: !3624, file: !3548, line: 60, type: !19)
!3628 = !DILocation(line: 60, column: 32, scope: !3624)
!3629 = !DILocalVariable(name: "result", scope: !3624, file: !3548, line: 62, type: !16)
!3630 = !DILocation(line: 62, column: 15, scope: !3624)
!3631 = !DILocation(line: 62, column: 35, scope: !3624)
!3632 = !DILocation(line: 62, column: 24, scope: !3624)
!3633 = !DILocation(line: 87, column: 10, scope: !3624)
!3634 = !DILocation(line: 87, column: 3, scope: !3624)
!3635 = !DILocalVariable(name: "category", arg: 1, scope: !3636, file: !3548, line: 60, type: !19)
!3636 = distinct !DISubprogram(name: "setlocale_null_androidfix", scope: !3548, file: !3548, line: 60, type: !3625, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3637, retainedNodes: !4)
!3637 = distinct !DICompileUnit(language: DW_LANG_C99, file: !156, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!3638 = !DILocalVariable(name: "result", scope: !3636, file: !3548, line: 62, type: !16)
!3639 = distinct !DISubprogram(name: "rpl_fclose", scope: !3640, file: !3640, line: 58, type: !3641, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !157, retainedNodes: !4)
!3640 = !DIFile(filename: "lib/fclose.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3641 = !DISubroutineType(types: !3642)
!3642 = !{!19, !3643}
!3643 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3644, size: 64)
!3644 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2801, line: 7, baseType: !3645)
!3645 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2803, line: 49, size: 1728, elements: !3646)
!3646 = !{!3647, !3648, !3649, !3650, !3651, !3652, !3653, !3654, !3655, !3656, !3657, !3658, !3659, !3660, !3662, !3663, !3664, !3665, !3666, !3667, !3668, !3669, !3670, !3671, !3672, !3673, !3674, !3675, !3676}
!3647 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3645, file: !2803, line: 51, baseType: !19, size: 32)
!3648 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3645, file: !2803, line: 54, baseType: !7, size: 64, offset: 64)
!3649 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3645, file: !2803, line: 55, baseType: !7, size: 64, offset: 128)
!3650 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3645, file: !2803, line: 56, baseType: !7, size: 64, offset: 192)
!3651 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3645, file: !2803, line: 57, baseType: !7, size: 64, offset: 256)
!3652 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3645, file: !2803, line: 58, baseType: !7, size: 64, offset: 320)
!3653 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3645, file: !2803, line: 59, baseType: !7, size: 64, offset: 384)
!3654 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3645, file: !2803, line: 60, baseType: !7, size: 64, offset: 448)
!3655 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3645, file: !2803, line: 61, baseType: !7, size: 64, offset: 512)
!3656 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3645, file: !2803, line: 64, baseType: !7, size: 64, offset: 576)
!3657 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3645, file: !2803, line: 65, baseType: !7, size: 64, offset: 640)
!3658 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3645, file: !2803, line: 66, baseType: !7, size: 64, offset: 704)
!3659 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3645, file: !2803, line: 68, baseType: !2818, size: 64, offset: 768)
!3660 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3645, file: !2803, line: 70, baseType: !3661, size: 64, offset: 832)
!3661 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3645, size: 64)
!3662 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3645, file: !2803, line: 72, baseType: !19, size: 32, offset: 896)
!3663 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3645, file: !2803, line: 73, baseType: !19, size: 32, offset: 928)
!3664 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3645, file: !2803, line: 74, baseType: !392, size: 64, offset: 960)
!3665 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3645, file: !2803, line: 77, baseType: !73, size: 16, offset: 1024)
!3666 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3645, file: !2803, line: 78, baseType: !2827, size: 8, offset: 1040)
!3667 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3645, file: !2803, line: 79, baseType: !2829, size: 8, offset: 1048)
!3668 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3645, file: !2803, line: 81, baseType: !2833, size: 64, offset: 1088)
!3669 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3645, file: !2803, line: 89, baseType: !2836, size: 64, offset: 1152)
!3670 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3645, file: !2803, line: 91, baseType: !2838, size: 64, offset: 1216)
!3671 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3645, file: !2803, line: 92, baseType: !2841, size: 64, offset: 1280)
!3672 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3645, file: !2803, line: 93, baseType: !3661, size: 64, offset: 1344)
!3673 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3645, file: !2803, line: 94, baseType: !6, size: 64, offset: 1408)
!3674 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3645, file: !2803, line: 95, baseType: !74, size: 64, offset: 1472)
!3675 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3645, file: !2803, line: 96, baseType: !19, size: 32, offset: 1536)
!3676 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3645, file: !2803, line: 98, baseType: !2848, size: 160, offset: 1568)
!3677 = !DILocalVariable(name: "fp", arg: 1, scope: !3639, file: !3640, line: 58, type: !3643)
!3678 = !DILocation(line: 58, column: 19, scope: !3639)
!3679 = !DILocalVariable(name: "saved_errno", scope: !3639, file: !3640, line: 60, type: !19)
!3680 = !DILocation(line: 60, column: 7, scope: !3639)
!3681 = !DILocalVariable(name: "fd", scope: !3639, file: !3640, line: 61, type: !19)
!3682 = !DILocation(line: 61, column: 7, scope: !3639)
!3683 = !DILocalVariable(name: "result", scope: !3639, file: !3640, line: 62, type: !19)
!3684 = !DILocation(line: 62, column: 7, scope: !3639)
!3685 = !DILocation(line: 65, column: 16, scope: !3639)
!3686 = !DILocation(line: 65, column: 8, scope: !3639)
!3687 = !DILocation(line: 65, column: 6, scope: !3639)
!3688 = !DILocation(line: 66, column: 7, scope: !3689)
!3689 = distinct !DILexicalBlock(scope: !3639, file: !3640, line: 66, column: 7)
!3690 = !DILocation(line: 66, column: 10, scope: !3689)
!3691 = !DILocation(line: 66, column: 7, scope: !3639)
!3692 = !DILocation(line: 67, column: 28, scope: !3689)
!3693 = !DILocation(line: 67, column: 12, scope: !3689)
!3694 = !DILocation(line: 67, column: 5, scope: !3689)
!3695 = !DILocation(line: 72, column: 9, scope: !3696)
!3696 = distinct !DILexicalBlock(scope: !3639, file: !3640, line: 72, column: 7)
!3697 = !DILocation(line: 72, column: 23, scope: !3696)
!3698 = !DILocation(line: 72, column: 41, scope: !3696)
!3699 = !DILocation(line: 72, column: 33, scope: !3696)
!3700 = !DILocation(line: 72, column: 26, scope: !3696)
!3701 = !DILocation(line: 72, column: 59, scope: !3696)
!3702 = !DILocation(line: 73, column: 7, scope: !3696)
!3703 = !DILocation(line: 73, column: 18, scope: !3696)
!3704 = !DILocation(line: 73, column: 10, scope: !3696)
!3705 = !DILocation(line: 72, column: 7, scope: !3639)
!3706 = !DILocation(line: 74, column: 19, scope: !3696)
!3707 = !DILocation(line: 74, column: 17, scope: !3696)
!3708 = !DILocation(line: 74, column: 5, scope: !3696)
!3709 = !DILocation(line: 100, column: 28, scope: !3639)
!3710 = !DILocation(line: 100, column: 12, scope: !3639)
!3711 = !DILocation(line: 100, column: 10, scope: !3639)
!3712 = !DILocation(line: 105, column: 7, scope: !3713)
!3713 = distinct !DILexicalBlock(scope: !3639, file: !3640, line: 105, column: 7)
!3714 = !DILocation(line: 105, column: 19, scope: !3713)
!3715 = !DILocation(line: 105, column: 7, scope: !3639)
!3716 = !DILocation(line: 107, column: 15, scope: !3717)
!3717 = distinct !DILexicalBlock(scope: !3713, file: !3640, line: 106, column: 5)
!3718 = !DILocation(line: 107, column: 7, scope: !3717)
!3719 = !DILocation(line: 107, column: 13, scope: !3717)
!3720 = !DILocation(line: 108, column: 14, scope: !3717)
!3721 = !DILocation(line: 109, column: 5, scope: !3717)
!3722 = !DILocation(line: 111, column: 10, scope: !3639)
!3723 = !DILocation(line: 111, column: 3, scope: !3639)
!3724 = !DILocation(line: 112, column: 1, scope: !3639)
!3725 = distinct !DISubprogram(name: "rpl_fflush", scope: !3726, file: !3726, line: 129, type: !3727, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !159, retainedNodes: !4)
!3726 = !DIFile(filename: "lib/fflush.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3727 = !DISubroutineType(types: !3728)
!3728 = !{!19, !3729}
!3729 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3730, size: 64)
!3730 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2801, line: 7, baseType: !3731)
!3731 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2803, line: 49, size: 1728, elements: !3732)
!3732 = !{!3733, !3734, !3735, !3736, !3737, !3738, !3739, !3740, !3741, !3742, !3743, !3744, !3745, !3746, !3748, !3749, !3750, !3751, !3752, !3753, !3754, !3755, !3756, !3757, !3758, !3759, !3760, !3761, !3762}
!3733 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3731, file: !2803, line: 51, baseType: !19, size: 32)
!3734 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3731, file: !2803, line: 54, baseType: !7, size: 64, offset: 64)
!3735 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3731, file: !2803, line: 55, baseType: !7, size: 64, offset: 128)
!3736 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3731, file: !2803, line: 56, baseType: !7, size: 64, offset: 192)
!3737 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3731, file: !2803, line: 57, baseType: !7, size: 64, offset: 256)
!3738 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3731, file: !2803, line: 58, baseType: !7, size: 64, offset: 320)
!3739 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3731, file: !2803, line: 59, baseType: !7, size: 64, offset: 384)
!3740 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3731, file: !2803, line: 60, baseType: !7, size: 64, offset: 448)
!3741 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3731, file: !2803, line: 61, baseType: !7, size: 64, offset: 512)
!3742 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3731, file: !2803, line: 64, baseType: !7, size: 64, offset: 576)
!3743 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3731, file: !2803, line: 65, baseType: !7, size: 64, offset: 640)
!3744 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3731, file: !2803, line: 66, baseType: !7, size: 64, offset: 704)
!3745 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3731, file: !2803, line: 68, baseType: !2818, size: 64, offset: 768)
!3746 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3731, file: !2803, line: 70, baseType: !3747, size: 64, offset: 832)
!3747 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3731, size: 64)
!3748 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3731, file: !2803, line: 72, baseType: !19, size: 32, offset: 896)
!3749 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3731, file: !2803, line: 73, baseType: !19, size: 32, offset: 928)
!3750 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3731, file: !2803, line: 74, baseType: !392, size: 64, offset: 960)
!3751 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3731, file: !2803, line: 77, baseType: !73, size: 16, offset: 1024)
!3752 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3731, file: !2803, line: 78, baseType: !2827, size: 8, offset: 1040)
!3753 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3731, file: !2803, line: 79, baseType: !2829, size: 8, offset: 1048)
!3754 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3731, file: !2803, line: 81, baseType: !2833, size: 64, offset: 1088)
!3755 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3731, file: !2803, line: 89, baseType: !2836, size: 64, offset: 1152)
!3756 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3731, file: !2803, line: 91, baseType: !2838, size: 64, offset: 1216)
!3757 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3731, file: !2803, line: 92, baseType: !2841, size: 64, offset: 1280)
!3758 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3731, file: !2803, line: 93, baseType: !3747, size: 64, offset: 1344)
!3759 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3731, file: !2803, line: 94, baseType: !6, size: 64, offset: 1408)
!3760 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3731, file: !2803, line: 95, baseType: !74, size: 64, offset: 1472)
!3761 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3731, file: !2803, line: 96, baseType: !19, size: 32, offset: 1536)
!3762 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3731, file: !2803, line: 98, baseType: !2848, size: 160, offset: 1568)
!3763 = !DILocalVariable(name: "stream", arg: 1, scope: !3725, file: !3726, line: 129, type: !3729)
!3764 = !DILocation(line: 129, column: 19, scope: !3725)
!3765 = !DILocation(line: 150, column: 7, scope: !3766)
!3766 = distinct !DILexicalBlock(scope: !3725, file: !3726, line: 150, column: 7)
!3767 = !DILocation(line: 150, column: 14, scope: !3766)
!3768 = !DILocation(line: 150, column: 22, scope: !3766)
!3769 = !DILocation(line: 150, column: 27, scope: !3766)
!3770 = !DILocation(line: 150, column: 7, scope: !3725)
!3771 = !DILocation(line: 151, column: 20, scope: !3766)
!3772 = !DILocation(line: 151, column: 12, scope: !3766)
!3773 = !DILocation(line: 151, column: 5, scope: !3766)
!3774 = !DILocation(line: 156, column: 44, scope: !3725)
!3775 = !DILocation(line: 156, column: 3, scope: !3725)
!3776 = !DILocation(line: 158, column: 18, scope: !3725)
!3777 = !DILocation(line: 158, column: 10, scope: !3725)
!3778 = !DILocation(line: 158, column: 3, scope: !3725)
!3779 = !DILocation(line: 235, column: 1, scope: !3725)
!3780 = distinct !DISubprogram(name: "clear_ungetc_buffer_preserving_position", scope: !3726, file: !3726, line: 41, type: !3781, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !159, retainedNodes: !4)
!3781 = !DISubroutineType(types: !3782)
!3782 = !{null, !3729}
!3783 = !DILocalVariable(name: "fp", arg: 1, scope: !3780, file: !3726, line: 41, type: !3729)
!3784 = !DILocation(line: 41, column: 48, scope: !3780)
!3785 = !DILocation(line: 43, column: 7, scope: !3786)
!3786 = distinct !DILexicalBlock(scope: !3780, file: !3726, line: 43, column: 7)
!3787 = !DILocation(line: 43, column: 11, scope: !3786)
!3788 = !DILocation(line: 43, column: 18, scope: !3786)
!3789 = !DILocation(line: 43, column: 7, scope: !3780)
!3790 = !DILocation(line: 45, column: 13, scope: !3786)
!3791 = !DILocation(line: 45, column: 5, scope: !3786)
!3792 = !DILocation(line: 46, column: 1, scope: !3780)
!3793 = !DILocalVariable(name: "fp", arg: 1, scope: !3794, file: !3726, line: 41, type: !3797)
!3794 = distinct !DISubprogram(name: "clear_ungetc_buffer_preserving_position", scope: !3726, file: !3726, line: 41, type: !3795, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3831, retainedNodes: !4)
!3795 = !DISubroutineType(types: !3796)
!3796 = !{null, !3797}
!3797 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3798, size: 64)
!3798 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2801, line: 7, baseType: !3799)
!3799 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2803, line: 49, size: 1728, elements: !3800)
!3800 = !{!3801, !3802, !3803, !3804, !3805, !3806, !3807, !3808, !3809, !3810, !3811, !3812, !3813, !3814, !3816, !3817, !3818, !3819, !3820, !3821, !3822, !3823, !3824, !3825, !3826, !3827, !3828, !3829, !3830}
!3801 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3799, file: !2803, line: 51, baseType: !19, size: 32)
!3802 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3799, file: !2803, line: 54, baseType: !7, size: 64, offset: 64)
!3803 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3799, file: !2803, line: 55, baseType: !7, size: 64, offset: 128)
!3804 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3799, file: !2803, line: 56, baseType: !7, size: 64, offset: 192)
!3805 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3799, file: !2803, line: 57, baseType: !7, size: 64, offset: 256)
!3806 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3799, file: !2803, line: 58, baseType: !7, size: 64, offset: 320)
!3807 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3799, file: !2803, line: 59, baseType: !7, size: 64, offset: 384)
!3808 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3799, file: !2803, line: 60, baseType: !7, size: 64, offset: 448)
!3809 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3799, file: !2803, line: 61, baseType: !7, size: 64, offset: 512)
!3810 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3799, file: !2803, line: 64, baseType: !7, size: 64, offset: 576)
!3811 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3799, file: !2803, line: 65, baseType: !7, size: 64, offset: 640)
!3812 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3799, file: !2803, line: 66, baseType: !7, size: 64, offset: 704)
!3813 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3799, file: !2803, line: 68, baseType: !2818, size: 64, offset: 768)
!3814 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3799, file: !2803, line: 70, baseType: !3815, size: 64, offset: 832)
!3815 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3799, size: 64)
!3816 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3799, file: !2803, line: 72, baseType: !19, size: 32, offset: 896)
!3817 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3799, file: !2803, line: 73, baseType: !19, size: 32, offset: 928)
!3818 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3799, file: !2803, line: 74, baseType: !392, size: 64, offset: 960)
!3819 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3799, file: !2803, line: 77, baseType: !73, size: 16, offset: 1024)
!3820 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3799, file: !2803, line: 78, baseType: !2827, size: 8, offset: 1040)
!3821 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3799, file: !2803, line: 79, baseType: !2829, size: 8, offset: 1048)
!3822 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3799, file: !2803, line: 81, baseType: !2833, size: 64, offset: 1088)
!3823 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3799, file: !2803, line: 89, baseType: !2836, size: 64, offset: 1152)
!3824 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3799, file: !2803, line: 91, baseType: !2838, size: 64, offset: 1216)
!3825 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3799, file: !2803, line: 92, baseType: !2841, size: 64, offset: 1280)
!3826 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3799, file: !2803, line: 93, baseType: !3815, size: 64, offset: 1344)
!3827 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3799, file: !2803, line: 94, baseType: !6, size: 64, offset: 1408)
!3828 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3799, file: !2803, line: 95, baseType: !74, size: 64, offset: 1472)
!3829 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3799, file: !2803, line: 96, baseType: !19, size: 32, offset: 1536)
!3830 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3799, file: !2803, line: 98, baseType: !2848, size: 160, offset: 1568)
!3831 = distinct !DICompileUnit(language: DW_LANG_C99, file: !160, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!3832 = distinct !DISubprogram(name: "rpl_fseeko", scope: !3833, file: !3833, line: 28, type: !3834, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !161, retainedNodes: !4)
!3833 = !DIFile(filename: "lib/fseeko.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3834 = !DISubroutineType(types: !3835)
!3835 = !{!19, !3836, !3870, !19}
!3836 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3837, size: 64)
!3837 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2801, line: 7, baseType: !3838)
!3838 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2803, line: 49, size: 1728, elements: !3839)
!3839 = !{!3840, !3841, !3842, !3843, !3844, !3845, !3846, !3847, !3848, !3849, !3850, !3851, !3852, !3853, !3855, !3856, !3857, !3858, !3859, !3860, !3861, !3862, !3863, !3864, !3865, !3866, !3867, !3868, !3869}
!3840 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3838, file: !2803, line: 51, baseType: !19, size: 32)
!3841 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3838, file: !2803, line: 54, baseType: !7, size: 64, offset: 64)
!3842 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3838, file: !2803, line: 55, baseType: !7, size: 64, offset: 128)
!3843 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3838, file: !2803, line: 56, baseType: !7, size: 64, offset: 192)
!3844 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3838, file: !2803, line: 57, baseType: !7, size: 64, offset: 256)
!3845 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3838, file: !2803, line: 58, baseType: !7, size: 64, offset: 320)
!3846 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3838, file: !2803, line: 59, baseType: !7, size: 64, offset: 384)
!3847 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3838, file: !2803, line: 60, baseType: !7, size: 64, offset: 448)
!3848 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3838, file: !2803, line: 61, baseType: !7, size: 64, offset: 512)
!3849 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3838, file: !2803, line: 64, baseType: !7, size: 64, offset: 576)
!3850 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3838, file: !2803, line: 65, baseType: !7, size: 64, offset: 640)
!3851 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3838, file: !2803, line: 66, baseType: !7, size: 64, offset: 704)
!3852 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3838, file: !2803, line: 68, baseType: !2818, size: 64, offset: 768)
!3853 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3838, file: !2803, line: 70, baseType: !3854, size: 64, offset: 832)
!3854 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3838, size: 64)
!3855 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3838, file: !2803, line: 72, baseType: !19, size: 32, offset: 896)
!3856 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3838, file: !2803, line: 73, baseType: !19, size: 32, offset: 928)
!3857 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3838, file: !2803, line: 74, baseType: !392, size: 64, offset: 960)
!3858 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3838, file: !2803, line: 77, baseType: !73, size: 16, offset: 1024)
!3859 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3838, file: !2803, line: 78, baseType: !2827, size: 8, offset: 1040)
!3860 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3838, file: !2803, line: 79, baseType: !2829, size: 8, offset: 1048)
!3861 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3838, file: !2803, line: 81, baseType: !2833, size: 64, offset: 1088)
!3862 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3838, file: !2803, line: 89, baseType: !2836, size: 64, offset: 1152)
!3863 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3838, file: !2803, line: 91, baseType: !2838, size: 64, offset: 1216)
!3864 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3838, file: !2803, line: 92, baseType: !2841, size: 64, offset: 1280)
!3865 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3838, file: !2803, line: 93, baseType: !3854, size: 64, offset: 1344)
!3866 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3838, file: !2803, line: 94, baseType: !6, size: 64, offset: 1408)
!3867 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3838, file: !2803, line: 95, baseType: !74, size: 64, offset: 1472)
!3868 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3838, file: !2803, line: 96, baseType: !19, size: 32, offset: 1536)
!3869 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3838, file: !2803, line: 98, baseType: !2848, size: 160, offset: 1568)
!3870 = !DIDerivedType(tag: DW_TAG_typedef, name: "off_t", file: !3143, line: 63, baseType: !392)
!3871 = !DILocalVariable(name: "fp", arg: 1, scope: !3832, file: !3833, line: 28, type: !3836)
!3872 = !DILocation(line: 28, column: 15, scope: !3832)
!3873 = !DILocalVariable(name: "offset", arg: 2, scope: !3832, file: !3833, line: 28, type: !3870)
!3874 = !DILocation(line: 28, column: 25, scope: !3832)
!3875 = !DILocalVariable(name: "whence", arg: 3, scope: !3832, file: !3833, line: 28, type: !19)
!3876 = !DILocation(line: 28, column: 37, scope: !3832)
!3877 = !DILocation(line: 52, column: 7, scope: !3878)
!3878 = distinct !DILexicalBlock(scope: !3832, file: !3833, line: 52, column: 7)
!3879 = !DILocation(line: 52, column: 11, scope: !3878)
!3880 = !DILocation(line: 52, column: 27, scope: !3878)
!3881 = !DILocation(line: 52, column: 31, scope: !3878)
!3882 = !DILocation(line: 52, column: 24, scope: !3878)
!3883 = !DILocation(line: 53, column: 7, scope: !3878)
!3884 = !DILocation(line: 53, column: 10, scope: !3878)
!3885 = !DILocation(line: 53, column: 14, scope: !3878)
!3886 = !DILocation(line: 53, column: 31, scope: !3878)
!3887 = !DILocation(line: 53, column: 35, scope: !3878)
!3888 = !DILocation(line: 53, column: 28, scope: !3878)
!3889 = !DILocation(line: 54, column: 7, scope: !3878)
!3890 = !DILocation(line: 54, column: 10, scope: !3878)
!3891 = !DILocation(line: 54, column: 14, scope: !3878)
!3892 = !DILocation(line: 54, column: 28, scope: !3878)
!3893 = !DILocation(line: 52, column: 7, scope: !3832)
!3894 = !DILocalVariable(name: "pos", scope: !3895, file: !3833, line: 117, type: !3870)
!3895 = distinct !DILexicalBlock(scope: !3878, file: !3833, line: 113, column: 5)
!3896 = !DILocation(line: 117, column: 13, scope: !3895)
!3897 = !DILocation(line: 117, column: 34, scope: !3895)
!3898 = !DILocation(line: 117, column: 26, scope: !3895)
!3899 = !DILocation(line: 117, column: 39, scope: !3895)
!3900 = !DILocation(line: 117, column: 47, scope: !3895)
!3901 = !DILocation(line: 117, column: 19, scope: !3895)
!3902 = !DILocation(line: 118, column: 11, scope: !3903)
!3903 = distinct !DILexicalBlock(scope: !3895, file: !3833, line: 118, column: 11)
!3904 = !DILocation(line: 118, column: 15, scope: !3903)
!3905 = !DILocation(line: 118, column: 11, scope: !3895)
!3906 = !DILocation(line: 124, column: 11, scope: !3907)
!3907 = distinct !DILexicalBlock(scope: !3903, file: !3833, line: 119, column: 9)
!3908 = !DILocation(line: 129, column: 7, scope: !3895)
!3909 = !DILocation(line: 129, column: 11, scope: !3895)
!3910 = !DILocation(line: 129, column: 18, scope: !3895)
!3911 = !DILocation(line: 130, column: 21, scope: !3895)
!3912 = !DILocation(line: 130, column: 7, scope: !3895)
!3913 = !DILocation(line: 130, column: 11, scope: !3895)
!3914 = !DILocation(line: 130, column: 19, scope: !3895)
!3915 = !DILocation(line: 161, column: 7, scope: !3895)
!3916 = !DILocation(line: 163, column: 18, scope: !3832)
!3917 = !DILocation(line: 163, column: 22, scope: !3832)
!3918 = !DILocation(line: 163, column: 30, scope: !3832)
!3919 = !DILocation(line: 163, column: 10, scope: !3832)
!3920 = !DILocation(line: 163, column: 3, scope: !3832)
!3921 = !DILocation(line: 164, column: 1, scope: !3832)
!3922 = !DILocalVariable(name: "fp", arg: 1, scope: !3923, file: !3833, line: 28, type: !3926)
!3923 = distinct !DISubprogram(name: "rpl_fseeko", scope: !3833, file: !3833, line: 28, type: !3924, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3960, retainedNodes: !4)
!3924 = !DISubroutineType(types: !3925)
!3925 = !{!19, !3926, !3870, !19}
!3926 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3927, size: 64)
!3927 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2801, line: 7, baseType: !3928)
!3928 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2803, line: 49, size: 1728, elements: !3929)
!3929 = !{!3930, !3931, !3932, !3933, !3934, !3935, !3936, !3937, !3938, !3939, !3940, !3941, !3942, !3943, !3945, !3946, !3947, !3948, !3949, !3950, !3951, !3952, !3953, !3954, !3955, !3956, !3957, !3958, !3959}
!3930 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3928, file: !2803, line: 51, baseType: !19, size: 32)
!3931 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3928, file: !2803, line: 54, baseType: !7, size: 64, offset: 64)
!3932 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3928, file: !2803, line: 55, baseType: !7, size: 64, offset: 128)
!3933 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3928, file: !2803, line: 56, baseType: !7, size: 64, offset: 192)
!3934 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3928, file: !2803, line: 57, baseType: !7, size: 64, offset: 256)
!3935 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3928, file: !2803, line: 58, baseType: !7, size: 64, offset: 320)
!3936 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3928, file: !2803, line: 59, baseType: !7, size: 64, offset: 384)
!3937 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3928, file: !2803, line: 60, baseType: !7, size: 64, offset: 448)
!3938 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3928, file: !2803, line: 61, baseType: !7, size: 64, offset: 512)
!3939 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3928, file: !2803, line: 64, baseType: !7, size: 64, offset: 576)
!3940 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3928, file: !2803, line: 65, baseType: !7, size: 64, offset: 640)
!3941 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3928, file: !2803, line: 66, baseType: !7, size: 64, offset: 704)
!3942 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3928, file: !2803, line: 68, baseType: !2818, size: 64, offset: 768)
!3943 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3928, file: !2803, line: 70, baseType: !3944, size: 64, offset: 832)
!3944 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3928, size: 64)
!3945 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3928, file: !2803, line: 72, baseType: !19, size: 32, offset: 896)
!3946 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3928, file: !2803, line: 73, baseType: !19, size: 32, offset: 928)
!3947 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3928, file: !2803, line: 74, baseType: !392, size: 64, offset: 960)
!3948 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3928, file: !2803, line: 77, baseType: !73, size: 16, offset: 1024)
!3949 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3928, file: !2803, line: 78, baseType: !2827, size: 8, offset: 1040)
!3950 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3928, file: !2803, line: 79, baseType: !2829, size: 8, offset: 1048)
!3951 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3928, file: !2803, line: 81, baseType: !2833, size: 64, offset: 1088)
!3952 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3928, file: !2803, line: 89, baseType: !2836, size: 64, offset: 1152)
!3953 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3928, file: !2803, line: 91, baseType: !2838, size: 64, offset: 1216)
!3954 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3928, file: !2803, line: 92, baseType: !2841, size: 64, offset: 1280)
!3955 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3928, file: !2803, line: 93, baseType: !3944, size: 64, offset: 1344)
!3956 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3928, file: !2803, line: 94, baseType: !6, size: 64, offset: 1408)
!3957 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3928, file: !2803, line: 95, baseType: !74, size: 64, offset: 1472)
!3958 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3928, file: !2803, line: 96, baseType: !19, size: 32, offset: 1536)
!3959 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3928, file: !2803, line: 98, baseType: !2848, size: 160, offset: 1568)
!3960 = distinct !DICompileUnit(language: DW_LANG_C99, file: !162, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!3961 = !DILocalVariable(name: "offset", arg: 2, scope: !3923, file: !3833, line: 28, type: !3870)
!3962 = !DILocalVariable(name: "whence", arg: 3, scope: !3923, file: !3833, line: 28, type: !19)
!3963 = distinct !DISubprogram(name: "c_tolower", scope: !3964, file: !3964, line: 337, type: !3965, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !163, retainedNodes: !4)
!3964 = !DIFile(filename: "./lib/c-ctype.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3965 = !DISubroutineType(types: !3966)
!3966 = !{!19, !19}
!3967 = !DILocalVariable(name: "c", arg: 1, scope: !3963, file: !3964, line: 337, type: !19)
!3968 = !DILocation(line: 337, column: 16, scope: !3963)
!3969 = !DILocation(line: 339, column: 11, scope: !3963)
!3970 = !DILocation(line: 339, column: 3, scope: !3963)
!3971 = !DILocation(line: 342, column: 14, scope: !3972)
!3972 = distinct !DILexicalBlock(scope: !3963, file: !3964, line: 340, column: 5)
!3973 = !DILocation(line: 342, column: 16, scope: !3972)
!3974 = !DILocation(line: 342, column: 22, scope: !3972)
!3975 = !DILocation(line: 342, column: 7, scope: !3972)
!3976 = !DILocation(line: 344, column: 14, scope: !3972)
!3977 = !DILocation(line: 344, column: 7, scope: !3972)
!3978 = !DILocation(line: 346, column: 1, scope: !3963)
