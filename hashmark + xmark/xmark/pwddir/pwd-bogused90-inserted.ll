; ModuleID = '<stdin>'
source_filename = "ld-temp.o"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.infomap = type { i8*, i8* }
%struct.option = type { i8*, i32, i32*, i32 }
%struct.quoting_options = type { i32, i32, [8 x i32], i8*, i8* }
%struct.slotvec = type { i64, i8* }
%struct.file_name = type { i8*, i64, i8* }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.dev_ino, %struct.dev_ino, %struct.dev_ino, [3 x i64] }
%struct.dev_ino = type { i64, i64 }
%struct.__dirstream = type opaque
%struct.dirent = type { i64, i64, i16, i8, [256 x i8] }
%struct.__mbstate_t = type { i32, %union.anon }
%union.anon = type { i32 }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }

@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [39 x i8] c"Try '%s --help' for more information.\0A\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"Usage: %s [OPTION]...\0A\00", align 1
@.str.2 = private unnamed_addr constant [60 x i8] c"Print the full filename of the current working directory.\0A\0A\00", align 1
@stdout = external dso_local global %struct._IO_FILE*, align 8
@.str.3 = private unnamed_addr constant [111 x i8] c"  -L, --logical   use PWD from environment, even if it contains symlinks\0A  -P, --physical  avoid all symlinks\0A\00", align 1
@.str.4 = private unnamed_addr constant [45 x i8] c"      --help     display this help and exit\0A\00", align 1
@.str.5 = private unnamed_addr constant [54 x i8] c"      --version  output version information and exit\0A\00", align 1
@.str.6 = private unnamed_addr constant [44 x i8] c"\0AIf no option is specified, -P is assumed.\0A\00", align 1
@.str.7 = private unnamed_addr constant [191 x i8] c"\0ANOTE: your shell may have its own version of %s, which usually supersedes\0Athe version described here.  Please refer to your shell's documentation\0Afor details about the options it supports.\0A\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"pwd\00", align 1
@__const.emit_ancillary_info.infomap = private unnamed_addr constant [7 x %struct.infomap] [%struct.infomap { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.18, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.19, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i32 0, i32 0) }, %struct.infomap zeroinitializer], align 16
@.str.25 = private unnamed_addr constant [23 x i8] c"\0A%s online help: <%s>\0A\00", align 1
@.str.14 = private unnamed_addr constant [14 x i8] c"GNU coreutils\00", align 1
@.str.26 = private unnamed_addr constant [40 x i8] c"https://www.gnu.org/software/coreutils/\00", align 1
@.str.27 = private unnamed_addr constant [4 x i8] c"en_\00", align 1
@.str.28 = private unnamed_addr constant [71 x i8] c"Report any translation bugs to <https://translationproject.org/team/>\0A\00", align 1
@.str.29 = private unnamed_addr constant [27 x i8] c"Full documentation <%s%s>\0A\00", align 1
@.str.30 = private unnamed_addr constant [51 x i8] c"or available locally via: info '(coreutils) %s%s'\0A\00", align 1
@.str.31 = private unnamed_addr constant [12 x i8] c" invocation\00", align 1
@.str.10 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.17 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.18 = private unnamed_addr constant [16 x i8] c"test invocation\00", align 1
@.str.11 = private unnamed_addr constant [10 x i8] c"coreutils\00", align 1
@.str.19 = private unnamed_addr constant [22 x i8] c"Multi-call invocation\00", align 1
@.str.20 = private unnamed_addr constant [10 x i8] c"sha224sum\00", align 1
@.str.21 = private unnamed_addr constant [15 x i8] c"sha2 utilities\00", align 1
@.str.22 = private unnamed_addr constant [10 x i8] c"sha256sum\00", align 1
@.str.23 = private unnamed_addr constant [10 x i8] c"sha384sum\00", align 1
@.str.24 = private unnamed_addr constant [10 x i8] c"sha512sum\00", align 1
@.str.9 = private unnamed_addr constant [16 x i8] c"POSIXLY_CORRECT\00", align 1
@.str.12 = private unnamed_addr constant [24 x i8] c"/usr/local/share/locale\00", align 1
@.str.13 = private unnamed_addr constant [3 x i8] c"LP\00", align 1
@longopts = internal constant [5 x %struct.option] [%struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.32, i32 0, i32 0), i32 0, i32* null, i32 76 }, %struct.option { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.33, i32 0, i32 0), i32 0, i32* null, i32 80 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.34, i32 0, i32 0), i32 0, i32* null, i32 -130 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.35, i32 0, i32 0), i32 0, i32* null, i32 -131 }, %struct.option zeroinitializer], align 16, !dbg !0
@.str.15 = private unnamed_addr constant [13 x i8] c"Jim Meyering\00", align 1
@optind = external dso_local global i32, align 4
@.str.16 = private unnamed_addr constant [30 x i8] c"ignoring non-option arguments\00", align 1
@.str.39 = private unnamed_addr constant [31 x i8] c"failed to get attributes of %s\00", align 1
@.str.40 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@.str.38 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.41 = private unnamed_addr constant [18 x i8] c"failed to stat %s\00", align 1
@.str.42 = private unnamed_addr constant [3 x i8] c"..\00", align 1
@.str.43 = private unnamed_addr constant [25 x i8] c"cannot open directory %s\00", align 1
@.str.44 = private unnamed_addr constant [22 x i8] c"failed to chdir to %s\00", align 1
@.str.45 = private unnamed_addr constant [21 x i8] c"reading directory %s\00", align 1
@.str.46 = private unnamed_addr constant [57 x i8] c"couldn't find directory entry in %s with matching i-node\00", align 1
@.str.47 = private unnamed_addr constant [4 x i8] c"../\00", align 1
@.str.36 = private unnamed_addr constant [4 x i8] c"PWD\00", align 1
@.str.37 = private unnamed_addr constant [3 x i8] c"/.\00", align 1
@.str.32 = private unnamed_addr constant [8 x i8] c"logical\00", align 1
@.str.33 = private unnamed_addr constant [9 x i8] c"physical\00", align 1
@.str.34 = private unnamed_addr constant [5 x i8] c"help\00", align 1
@.str.35 = private unnamed_addr constant [8 x i8] c"version\00", align 1
@Version = internal global i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.48, i32 0, i32 0), align 8, !dbg !25
@.str.48 = private unnamed_addr constant [5 x i8] c"8.32\00", align 1
@ignore_EPIPE = internal global i8 0, align 1, !dbg !30
@.str.51 = private unnamed_addr constant [12 x i8] c"write error\00", align 1
@file_name = internal global i8* null, align 8, !dbg !35
@.str.1.52 = private unnamed_addr constant [7 x i8] c"%s: %s\00", align 1
@.str.2.53 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@exit_failure = internal global i32 1, align 4, !dbg !39
@.str.58 = private unnamed_addr constant [56 x i8] c"A NULL argv[0] was passed through an exec system call.\0A\00", align 1
@.str.1.59 = private unnamed_addr constant [8 x i8] c"/.libs/\00", align 1
@.str.2.60 = private unnamed_addr constant [4 x i8] c"lt-\00", align 1
@program_invocation_short_name = external dso_local global i8*, align 8
@program_name = internal global i8* null, align 8, !dbg !46
@program_invocation_name = external dso_local global i8*, align 8
@default_quoting_options = internal global %struct.quoting_options zeroinitializer, align 8, !dbg !52
@slotvec = internal global %struct.slotvec* @slotvec0, align 8, !dbg !108
@nslots = internal global i32 1, align 4, !dbg !115
@slotvec0 = internal global %struct.slotvec { i64 256, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i32 0, i32 0) }, align 8, !dbg !117
@slot0 = internal global [256 x i8] zeroinitializer, align 16, !dbg !103
@.str.10.63 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.11.64 = private unnamed_addr constant [2 x i8] c"`\00", align 1
@.str.12.65 = private unnamed_addr constant [2 x i8] c"'\00", align 1
@.str.13.66 = private unnamed_addr constant [6 x i8] c"UTF-8\00", align 1
@.str.14.67 = private unnamed_addr constant [4 x i8] c"\E2\80\98\00", align 1
@.str.15.68 = private unnamed_addr constant [4 x i8] c"\E2\80\99\00", align 1
@.str.16.69 = private unnamed_addr constant [8 x i8] c"GB18030\00", align 1
@.str.17.70 = private unnamed_addr constant [4 x i8] c"\A1\07e\00", align 1
@.str.18.71 = private unnamed_addr constant [3 x i8] c"\A1\AF\00", align 1
@quote_quoting_options = internal global %struct.quoting_options { i32 8, i32 0, [8 x i32] zeroinitializer, i8* null, i8* null }, align 8, !dbg !91
@.str.80 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@.str.81 = private unnamed_addr constant [12 x i8] c"%s (%s) %s\0A\00", align 1
@.str.1.82 = private unnamed_addr constant [7 x i8] c"%s %s\0A\00", align 1
@.str.2.83 = private unnamed_addr constant [4 x i8] c"(C)\00", align 1
@.str.3.84 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.4.85 = private unnamed_addr constant [171 x i8] c"License GPLv3+: GNU GPL version 3 or later <%s>.\0AThis is free software: you are free to change and redistribute it.\0AThere is NO WARRANTY, to the extent permitted by law.\0A\00", align 1
@.str.5.86 = private unnamed_addr constant [34 x i8] c"https://gnu.org/licenses/gpl.html\00", align 1
@.str.6.87 = private unnamed_addr constant [16 x i8] c"Written by %s.\0A\00", align 1
@.str.7.88 = private unnamed_addr constant [23 x i8] c"Written by %s and %s.\0A\00", align 1
@.str.8.89 = private unnamed_addr constant [28 x i8] c"Written by %s, %s, and %s.\0A\00", align 1
@.str.9.90 = private unnamed_addr constant [32 x i8] c"Written by %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.10.91 = private unnamed_addr constant [36 x i8] c"Written by %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.11.92 = private unnamed_addr constant [40 x i8] c"Written by %s, %s, %s,\0A%s, %s, and %s.\0A\00", align 1
@.str.12.93 = private unnamed_addr constant [44 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, and %s.\0A\00", align 1
@.str.13.94 = private unnamed_addr constant [48 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.14.95 = private unnamed_addr constant [52 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.15.96 = private unnamed_addr constant [60 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, %s, and others.\0A\00", align 1
@version_etc_copyright = internal constant [47 x i8] c"Copyright %s %d Free Software Foundation, Inc.\00", align 16, !dbg !119
@.str.1.111 = private unnamed_addr constant [17 x i8] c"memory exhausted\00", align 1
@.str.112 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.123 = private unnamed_addr constant [2 x i8] c"C\00", align 1
@.str.1.124 = private unnamed_addr constant [6 x i8] c"POSIX\00", align 1
@.str.127 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1.128 = private unnamed_addr constant [6 x i8] c"ASCII\00", align 1
@inVal0 = global i32 0
@inVal1 = global i8** null
@.compVal0 = private global [4 x i8] c"-LL\00"
@.compVal1 = private global [1 x i8] zeroinitializer
@.compVal2 = private global [3 x i8] c"-L\00"
@x = common global i32 0
@y = common global i32 0
@x.1 = common global i32 0
@y.2 = common global i32 0
@x.3 = common global i32 0
@y.4 = common global i32 0
@x.5 = common global i32 0
@y.6 = common global i32 0
@x.7 = common global i32 0
@y.8 = common global i32 0
@x.9 = common global i32 0
@y.10 = common global i32 0
@x.11 = common global i32 0
@y.12 = common global i32 0
@x.13 = common global i32 0
@y.14 = common global i32 0
@x.15 = common global i32 0
@y.16 = common global i32 0
@x.17 = common global i32 0
@y.18 = common global i32 0
@x.19 = common global i32 0
@y.20 = common global i32 0
@x.21 = common global i32 0
@y.22 = common global i32 0
@x.23 = common global i32 0
@y.24 = common global i32 0
@x.25 = common global i32 0
@y.26 = common global i32 0
@x.27 = common global i32 0
@y.28 = common global i32 0
@x.29 = common global i32 0
@y.30 = common global i32 0
@x.31 = common global i32 0
@y.32 = common global i32 0
@x.33 = common global i32 0
@y.34 = common global i32 0
@x.35 = common global i32 0
@y.36 = common global i32 0
@x.37 = common global i32 0
@y.38 = common global i32 0
@x.39 = common global i32 0
@y.40 = common global i32 0
@x.41 = common global i32 0
@y.42 = common global i32 0
@x.43 = common global i32 0
@y.44 = common global i32 0
@x.45 = common global i32 0
@y.46 = common global i32 0
@x.47 = common global i32 0
@y.48 = common global i32 0
@x.49 = common global i32 0
@y.50 = common global i32 0
@x.51 = common global i32 0
@y.52 = common global i32 0
@x.53 = common global i32 0
@y.54 = common global i32 0
@x.55 = common global i32 0
@y.56 = common global i32 0
@x.57 = common global i32 0
@y.58 = common global i32 0
@x.59 = common global i32 0
@y.60 = common global i32 0
@x.61 = common global i32 0
@y.62 = common global i32 0
@x.63 = common global i32 0
@y.64 = common global i32 0
@x.65 = common global i32 0
@y.66 = common global i32 0
@x.67 = common global i32 0
@y.68 = common global i32 0
@x.69 = common global i32 0
@y.70 = common global i32 0
@x.71 = common global i32 0
@y.72 = common global i32 0
@x.73 = common global i32 0
@y.74 = common global i32 0
@x.75 = common global i32 0
@y.76 = common global i32 0
@x.77 = common global i32 0
@y.78 = common global i32 0
@x.79 = common global i32 0
@y.80 = common global i32 0
@x.81 = common global i32 0
@y.82 = common global i32 0
@x.83 = common global i32 0
@y.84 = common global i32 0
@x.85 = common global i32 0
@y.86 = common global i32 0
@x.87 = common global i32 0
@y.88 = common global i32 0
@x.89 = common global i32 0
@y.90 = common global i32 0
@x.91 = common global i32 0
@y.92 = common global i32 0
@x.93 = common global i32 0
@y.94 = common global i32 0
@x.95 = common global i32 0
@y.96 = common global i32 0
@x.97 = common global i32 0
@y.98 = common global i32 0
@x.99 = common global i32 0
@y.100 = common global i32 0

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @usage(i32) #0 !dbg !171 {
  %2 = load i32, i32* @x
  %3 = load i32, i32* @y
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  store i32 %0, i32* %10, align 4
  call void @llvm.dbg.declare(metadata i32* %10, metadata !174, metadata !DIExpression()), !dbg !175
  %11 = load i32, i32* %10, align 4, !dbg !176
  %12 = icmp ne i32 %11, 0, !dbg !178
  %13 = load i32, i32* @x
  %14 = load i32, i32* @y
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %21, label %76, !dbg !179

21:                                               ; preds = %originalBBpart2
  %22 = load i32, i32* @x
  %23 = load i32, i32* @y
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  %30 = load i32, i32* @x
  %31 = load i32, i32* @y
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %38, !dbg !180

38:                                               ; preds = %originalBBpart24
  %39 = load i32, i32* @x
  %40 = load i32, i32* @y
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %38, %originalBB6alteredBB
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !181
  %48 = call i8* @gettext(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0)) #10, !dbg !181
  %49 = load i8*, i8** @program_name, align 8, !dbg !181
  %50 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %47, i8* %48, i8* %49), !dbg !181
  %51 = load i32, i32* @x
  %52 = load i32, i32* @y
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %59, !dbg !181

59:                                               ; preds = %originalBBpart28
  %60 = load i32, i32* @x
  %61 = load i32, i32* @y
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %59, %originalBB10alteredBB
  %68 = load i32, i32* @x
  %69 = load i32, i32* @y
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %97, !dbg !181

76:                                               ; preds = %originalBBpart2
  %77 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0)) #10, !dbg !183
  %78 = load i8*, i8** @program_name, align 8, !dbg !185
  %79 = call i32 (i8*, ...) @printf(i8* %77, i8* %78), !dbg !186
  %80 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.2, i64 0, i64 0)) #10, !dbg !187
  %81 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !187
  %82 = call i32 @fputs_unlocked(i8* %80, %struct._IO_FILE* %81), !dbg !187
  %83 = call i8* @gettext(i8* getelementptr inbounds ([111 x i8], [111 x i8]* @.str.3, i64 0, i64 0)) #10, !dbg !188
  %84 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !188
  %85 = call i32 @fputs_unlocked(i8* %83, %struct._IO_FILE* %84), !dbg !188
  %86 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.4, i64 0, i64 0)) #10, !dbg !189
  %87 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !189
  %88 = call i32 @fputs_unlocked(i8* %86, %struct._IO_FILE* %87), !dbg !189
  %89 = call i8* @gettext(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.5, i64 0, i64 0)) #10, !dbg !190
  %90 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !190
  %91 = call i32 @fputs_unlocked(i8* %89, %struct._IO_FILE* %90), !dbg !190
  %92 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.6, i64 0, i64 0)) #10, !dbg !191
  %93 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !191
  %94 = call i32 @fputs_unlocked(i8* %92, %struct._IO_FILE* %93), !dbg !191
  %95 = call i8* @gettext(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.7, i64 0, i64 0)) #10, !dbg !192
  %96 = call i32 (i8*, ...) @printf(i8* %95, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0)), !dbg !193
  call void @emit_ancillary_info(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0)), !dbg !194
  br label %97

97:                                               ; preds = %76, %originalBBpart212
  %98 = load i32, i32* @x
  %99 = load i32, i32* @y
  %100 = sub i32 %98, 1
  %101 = mul i32 %98, %100
  %102 = urem i32 %101, 2
  %103 = icmp eq i32 %102, 0
  %104 = icmp slt i32 %99, 10
  %105 = or i1 %103, %104
  br i1 %105, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %97, %originalBB14alteredBB
  %106 = load i32, i32* %10, align 4, !dbg !195
  call void @exit(i32 %106) #12, !dbg !196
  %107 = load i32, i32* @x
  %108 = load i32, i32* @y
  %109 = sub i32 %107, 1
  %110 = mul i32 %107, %109
  %111 = urem i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %108, 10
  %114 = or i1 %112, %113
  br i1 %114, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  unreachable, !dbg !196

originalBBalteredBB:                              ; preds = %originalBB, %1
  %115 = alloca i32, align 4
  store i32 %0, i32* %115, align 4
  call void @llvm.dbg.declare(metadata i32* %115, metadata !197, metadata !DIExpression()), !dbg !175
  %116 = load i32, i32* %115, align 4, !dbg !176
  %117 = icmp ne i32 %116, 0, !dbg !178
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %38
  %118 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !181
  %119 = call i8* @gettext(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0)) #10, !dbg !181
  %120 = load i8*, i8** @program_name, align 8, !dbg !181
  %121 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %118, i8* %119, i8* %120), !dbg !181
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %59
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %97
  %122 = load i32, i32* %10, align 4, !dbg !195
  call void @exit(i32 %122) #12, !dbg !196
  br label %originalBB14
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare dso_local i8* @gettext(i8*) #2

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #3

declare dso_local i32 @printf(i8*, ...) #3

declare dso_local i32 @fputs_unlocked(i8*, %struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @emit_ancillary_info(i8*) #4 !dbg !211 {
  %2 = load i32, i32* @x.1
  %3 = load i32, i32* @y.2
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  %11 = alloca [7 x %struct.infomap], align 16
  %12 = alloca i8*, align 8
  %13 = alloca %struct.infomap*, align 8
  %14 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !215, metadata !DIExpression()), !dbg !216
  call void @llvm.dbg.declare(metadata [7 x %struct.infomap]* %11, metadata !217, metadata !DIExpression()), !dbg !226
  %15 = bitcast [7 x %struct.infomap]* %11 to i8*, !dbg !226
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %15, i8* align 16 bitcast ([7 x %struct.infomap]* @__const.emit_ancillary_info.infomap to i8*), i64 112, i1 false), !dbg !226
  call void @llvm.dbg.declare(metadata i8** %12, metadata !227, metadata !DIExpression()), !dbg !228
  %16 = load i8*, i8** %10, align 8, !dbg !229
  store i8* %16, i8** %12, align 8, !dbg !228
  call void @llvm.dbg.declare(metadata %struct.infomap** %13, metadata !230, metadata !DIExpression()), !dbg !232
  %17 = getelementptr inbounds [7 x %struct.infomap], [7 x %struct.infomap]* %11, i64 0, i64 0, !dbg !233
  store %struct.infomap* %17, %struct.infomap** %13, align 8, !dbg !232
  %18 = load i32, i32* @x.1
  %19 = load i32, i32* @y.2
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %26, !dbg !234

26:                                               ; preds = %originalBBpart221, %originalBBpart2
  %27 = load i32, i32* @x.1
  %28 = load i32, i32* @y.2
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %26, %originalBB1alteredBB
  %35 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !235
  %36 = getelementptr inbounds %struct.infomap, %struct.infomap* %35, i32 0, i32 0, !dbg !236
  %37 = load i8*, i8** %36, align 8, !dbg !236
  %38 = icmp ne i8* %37, null, !dbg !235
  %39 = load i32, i32* @x.1
  %40 = load i32, i32* @y.2
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %38, label %47, label %71, !dbg !237

47:                                               ; preds = %originalBBpart24
  %48 = load i32, i32* @x.1
  %49 = load i32, i32* @y.2
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %47, %originalBB6alteredBB
  %56 = load i8*, i8** %10, align 8, !dbg !238
  %57 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !238
  %58 = getelementptr inbounds %struct.infomap, %struct.infomap* %57, i32 0, i32 0, !dbg !238
  %59 = load i8*, i8** %58, align 8, !dbg !238
  %60 = call i32 @strcmp(i8* %56, i8* %59) #13, !dbg !238
  %61 = icmp eq i32 %60, 0, !dbg !238
  %62 = xor i1 %61, true, !dbg !239
  %63 = load i32, i32* @x.1
  %64 = load i32, i32* @y.2
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBBpart217, label %originalBB6alteredBB

originalBBpart217:                                ; preds = %originalBB6
  br label %71

71:                                               ; preds = %originalBBpart217, %originalBBpart24
  %72 = phi i1 [ false, %originalBBpart24 ], [ %62, %originalBBpart217 ], !dbg !240
  br i1 %72, label %73, label %92, !dbg !234

73:                                               ; preds = %71
  %74 = load i32, i32* @x.1
  %75 = load i32, i32* @y.2
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBB19, label %originalBB19alteredBB

originalBB19:                                     ; preds = %73, %originalBB19alteredBB
  %82 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !241
  %83 = getelementptr inbounds %struct.infomap, %struct.infomap* %82, i32 1, !dbg !241
  store %struct.infomap* %83, %struct.infomap** %13, align 8, !dbg !241
  %84 = load i32, i32* @x.1
  %85 = load i32, i32* @y.2
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBBpart221, label %originalBB19alteredBB

originalBBpart221:                                ; preds = %originalBB19
  br label %26, !dbg !234, !llvm.loop !242

92:                                               ; preds = %71
  %93 = load i32, i32* @x.1
  %94 = load i32, i32* @y.2
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBB23, label %originalBB23alteredBB

originalBB23:                                     ; preds = %92, %originalBB23alteredBB
  %101 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !243
  %102 = getelementptr inbounds %struct.infomap, %struct.infomap* %101, i32 0, i32 1, !dbg !245
  %103 = load i8*, i8** %102, align 8, !dbg !245
  %104 = icmp ne i8* %103, null, !dbg !243
  %105 = load i32, i32* @x.1
  %106 = load i32, i32* @y.2
  %107 = sub i32 %105, 1
  %108 = mul i32 %105, %107
  %109 = urem i32 %108, 2
  %110 = icmp eq i32 %109, 0
  %111 = icmp slt i32 %106, 10
  %112 = or i1 %110, %111
  br i1 %112, label %originalBBpart225, label %originalBB23alteredBB

originalBBpart225:                                ; preds = %originalBB23
  br i1 %104, label %113, label %133, !dbg !246

113:                                              ; preds = %originalBBpart225
  %114 = load i32, i32* @x.1
  %115 = load i32, i32* @y.2
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBB27, label %originalBB27alteredBB

originalBB27:                                     ; preds = %113, %originalBB27alteredBB
  %122 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !247
  %123 = getelementptr inbounds %struct.infomap, %struct.infomap* %122, i32 0, i32 1, !dbg !248
  %124 = load i8*, i8** %123, align 8, !dbg !248
  store i8* %124, i8** %12, align 8, !dbg !249
  %125 = load i32, i32* @x.1
  %126 = load i32, i32* @y.2
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBBpart229, label %originalBB27alteredBB

originalBBpart229:                                ; preds = %originalBB27
  br label %133, !dbg !250

133:                                              ; preds = %originalBBpart229, %originalBBpart225
  %134 = load i32, i32* @x.1
  %135 = load i32, i32* @y.2
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBB31, label %originalBB31alteredBB

originalBB31:                                     ; preds = %133, %originalBB31alteredBB
  %142 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.25, i64 0, i64 0)) #10, !dbg !251
  %143 = call i32 (i8*, ...) @printf(i8* %142, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.26, i64 0, i64 0)), !dbg !252
  call void @llvm.dbg.declare(metadata i8** %14, metadata !253, metadata !DIExpression()), !dbg !254
  %144 = call i8* @setlocale(i32 5, i8* null) #10, !dbg !255
  store i8* %144, i8** %14, align 8, !dbg !254
  %145 = load i8*, i8** %14, align 8, !dbg !256
  %146 = icmp ne i8* %145, null, !dbg !256
  %147 = load i32, i32* @x.1
  %148 = load i32, i32* @y.2
  %149 = sub i32 %147, 1
  %150 = mul i32 %147, %149
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %152, %153
  br i1 %154, label %originalBBpart233, label %originalBB31alteredBB

originalBBpart233:                                ; preds = %originalBB31
  br i1 %146, label %155, label %195, !dbg !258

155:                                              ; preds = %originalBBpart233
  %156 = load i32, i32* @x.1
  %157 = load i32, i32* @y.2
  %158 = sub i32 %156, 1
  %159 = mul i32 %156, %158
  %160 = urem i32 %159, 2
  %161 = icmp eq i32 %160, 0
  %162 = icmp slt i32 %157, 10
  %163 = or i1 %161, %162
  br i1 %163, label %originalBB35, label %originalBB35alteredBB

originalBB35:                                     ; preds = %155, %originalBB35alteredBB
  %164 = load i8*, i8** %14, align 8, !dbg !259
  %165 = call i32 @strncmp(i8* %164, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.27, i64 0, i64 0), i64 3) #13, !dbg !259
  %166 = icmp ne i32 %165, 0, !dbg !259
  %167 = load i32, i32* @x.1
  %168 = load i32, i32* @y.2
  %169 = sub i32 %167, 1
  %170 = mul i32 %167, %169
  %171 = urem i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %172, %173
  br i1 %174, label %originalBBpart237, label %originalBB35alteredBB

originalBBpart237:                                ; preds = %originalBB35
  br i1 %166, label %175, label %195, !dbg !260

175:                                              ; preds = %originalBBpart237
  %176 = load i32, i32* @x.1
  %177 = load i32, i32* @y.2
  %178 = sub i32 %176, 1
  %179 = mul i32 %176, %178
  %180 = urem i32 %179, 2
  %181 = icmp eq i32 %180, 0
  %182 = icmp slt i32 %177, 10
  %183 = or i1 %181, %182
  br i1 %183, label %originalBB39, label %originalBB39alteredBB

originalBB39:                                     ; preds = %175, %originalBB39alteredBB
  %184 = call i8* @gettext(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.28, i64 0, i64 0)) #10, !dbg !261
  %185 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !261
  %186 = call i32 @fputs_unlocked(i8* %184, %struct._IO_FILE* %185), !dbg !261
  %187 = load i32, i32* @x.1
  %188 = load i32, i32* @y.2
  %189 = sub i32 %187, 1
  %190 = mul i32 %187, %189
  %191 = urem i32 %190, 2
  %192 = icmp eq i32 %191, 0
  %193 = icmp slt i32 %188, 10
  %194 = or i1 %192, %193
  br i1 %194, label %originalBBpart241, label %originalBB39alteredBB

originalBBpart241:                                ; preds = %originalBB39
  br label %195, !dbg !263

195:                                              ; preds = %originalBBpart241, %originalBBpart237, %originalBBpart233
  %196 = load i32, i32* @x.1
  %197 = load i32, i32* @y.2
  %198 = sub i32 %196, 1
  %199 = mul i32 %196, %198
  %200 = urem i32 %199, 2
  %201 = icmp eq i32 %200, 0
  %202 = icmp slt i32 %197, 10
  %203 = or i1 %201, %202
  br i1 %203, label %originalBB43, label %originalBB43alteredBB

originalBB43:                                     ; preds = %195, %originalBB43alteredBB
  %204 = call i8* @gettext(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.29, i64 0, i64 0)) #10, !dbg !264
  %205 = load i8*, i8** %10, align 8, !dbg !265
  %206 = call i32 (i8*, ...) @printf(i8* %204, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.26, i64 0, i64 0), i8* %205), !dbg !266
  %207 = call i8* @gettext(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.30, i64 0, i64 0)) #10, !dbg !267
  %208 = load i8*, i8** %12, align 8, !dbg !268
  %209 = load i8*, i8** %12, align 8, !dbg !269
  %210 = load i8*, i8** %10, align 8, !dbg !270
  %211 = icmp eq i8* %209, %210, !dbg !271
  %212 = zext i1 %211 to i64, !dbg !269
  %213 = select i1 %211, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.31, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0), !dbg !269
  %214 = call i32 (i8*, ...) @printf(i8* %207, i8* %208, i8* %213), !dbg !272
  %215 = load i32, i32* @x.1
  %216 = load i32, i32* @y.2
  %217 = sub i32 %215, 1
  %218 = mul i32 %215, %217
  %219 = urem i32 %218, 2
  %220 = icmp eq i32 %219, 0
  %221 = icmp slt i32 %216, 10
  %222 = or i1 %220, %221
  br i1 %222, label %originalBBpart245, label %originalBB43alteredBB

originalBBpart245:                                ; preds = %originalBB43
  ret void, !dbg !273

originalBBalteredBB:                              ; preds = %originalBB, %1
  %223 = alloca i8*, align 8
  %224 = alloca [7 x %struct.infomap], align 16
  %225 = alloca i8*, align 8
  %226 = alloca %struct.infomap*, align 8
  %227 = alloca i8*, align 8
  store i8* %0, i8** %223, align 8
  call void @llvm.dbg.declare(metadata i8** %223, metadata !274, metadata !DIExpression()), !dbg !216
  call void @llvm.dbg.declare(metadata [7 x %struct.infomap]* %224, metadata !288, metadata !DIExpression()), !dbg !226
  %228 = bitcast [7 x %struct.infomap]* %224 to i8*, !dbg !226
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %228, i8* align 16 bitcast ([7 x %struct.infomap]* @__const.emit_ancillary_info.infomap to i8*), i64 112, i1 false), !dbg !226
  call void @llvm.dbg.declare(metadata i8** %225, metadata !295, metadata !DIExpression()), !dbg !228
  %229 = load i8*, i8** %223, align 8, !dbg !229
  store i8* %229, i8** %225, align 8, !dbg !228
  call void @llvm.dbg.declare(metadata %struct.infomap** %226, metadata !296, metadata !DIExpression()), !dbg !232
  %230 = getelementptr inbounds [7 x %struct.infomap], [7 x %struct.infomap]* %224, i64 0, i64 0, !dbg !233
  store %struct.infomap* %230, %struct.infomap** %226, align 8, !dbg !232
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %26
  %231 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !235
  %232 = getelementptr inbounds %struct.infomap, %struct.infomap* %231, i32 0, i32 0, !dbg !236
  %233 = load i8*, i8** %232, align 8, !dbg !236
  %234 = icmp ne i8* %233, null, !dbg !235
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %47
  %235 = load i8*, i8** %10, align 8, !dbg !238
  %236 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !238
  %237 = getelementptr inbounds %struct.infomap, %struct.infomap* %236, i32 0, i32 0, !dbg !238
  %238 = load i8*, i8** %237, align 8, !dbg !238
  %239 = call i32 @strcmp(i8* %235, i8* %238) #13, !dbg !238
  %240 = icmp eq i32 %239, 0, !dbg !238
  %_ = sub i1 false, %240
  %gen = add i1 %_, true
  %_7 = shl i1 %240, true
  %_8 = sub i1 false, %240
  %gen9 = add i1 %_8, true
  %_10 = sub i1 %240, true
  %gen11 = mul i1 %_10, true
  %_12 = sub i1 %240, true
  %gen13 = mul i1 %_12, true
  %_14 = sub i1 false, %240
  %gen15 = add i1 %_14, true
  %241 = xor i1 %240, true, !dbg !239
  br label %originalBB6

originalBB19alteredBB:                            ; preds = %originalBB19, %73
  %242 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !241
  %243 = getelementptr inbounds %struct.infomap, %struct.infomap* %242, i32 1, !dbg !241
  store %struct.infomap* %243, %struct.infomap** %13, align 8, !dbg !241
  br label %originalBB19

originalBB23alteredBB:                            ; preds = %originalBB23, %92
  %244 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !243
  %245 = getelementptr inbounds %struct.infomap, %struct.infomap* %244, i32 0, i32 1, !dbg !245
  %246 = load i8*, i8** %245, align 8, !dbg !245
  %247 = icmp ne i8* %246, null, !dbg !243
  br label %originalBB23

originalBB27alteredBB:                            ; preds = %originalBB27, %113
  %248 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !247
  %249 = getelementptr inbounds %struct.infomap, %struct.infomap* %248, i32 0, i32 1, !dbg !248
  %250 = load i8*, i8** %249, align 8, !dbg !248
  store i8* %250, i8** %12, align 8, !dbg !249
  br label %originalBB27

originalBB31alteredBB:                            ; preds = %originalBB31, %133
  %251 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.25, i64 0, i64 0)) #10, !dbg !251
  %252 = call i32 (i8*, ...) @printf(i8* %251, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.26, i64 0, i64 0)), !dbg !252
  call void @llvm.dbg.declare(metadata !4, metadata !298, metadata !DIExpression()), !dbg !254
  %253 = call i8* @setlocale(i32 5, i8* null) #10, !dbg !255
  store i8* %253, i8** %14, align 8, !dbg !254
  %254 = load i8*, i8** %14, align 8, !dbg !256
  %255 = icmp ne i8* %254, null, !dbg !256
  br label %originalBB31

originalBB35alteredBB:                            ; preds = %originalBB35, %155
  %256 = load i8*, i8** %14, align 8, !dbg !259
  %257 = call i32 @strncmp(i8* %256, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.27, i64 0, i64 0), i64 3) #13, !dbg !259
  %258 = icmp ne i32 %257, 0, !dbg !259
  br label %originalBB35

originalBB39alteredBB:                            ; preds = %originalBB39, %175
  %259 = call i8* @gettext(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.28, i64 0, i64 0)) #10, !dbg !261
  %260 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !261
  %261 = call i32 @fputs_unlocked(i8* %259, %struct._IO_FILE* %260), !dbg !261
  br label %originalBB39

originalBB43alteredBB:                            ; preds = %originalBB43, %195
  %262 = call i8* @gettext(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.29, i64 0, i64 0)) #10, !dbg !264
  %263 = load i8*, i8** %10, align 8, !dbg !265
  %264 = call i32 (i8*, ...) @printf(i8* %262, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.26, i64 0, i64 0), i8* %263), !dbg !266
  %265 = call i8* @gettext(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.30, i64 0, i64 0)) #10, !dbg !267
  %266 = load i8*, i8** %12, align 8, !dbg !268
  %267 = load i8*, i8** %12, align 8, !dbg !269
  %268 = load i8*, i8** %10, align 8, !dbg !270
  %269 = icmp eq i8* %267, %268, !dbg !271
  %270 = zext i1 %269 to i64, !dbg !269
  %271 = select i1 %269, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.31, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0), !dbg !269
  %272 = call i32 (i8*, ...) @printf(i8* %265, i8* %266, i8* %271), !dbg !272
  br label %originalBB43
}

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

; Function Attrs: nounwind readonly
declare dso_local i32 @strcmp(i8*, i8*) #7

; Function Attrs: nounwind
declare dso_local i8* @setlocale(i32, i8*) #2

; Function Attrs: nounwind readonly
declare dso_local i32 @strncmp(i8*, i8*, i64) #7

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32, i8**) #4 !dbg !312 {
  %3 = load i32, i32* @x.3
  %4 = load i32, i32* @y.4
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  store i8** %1, i8*** @inVal1
  store i32 %0, i32* @inVal0
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i8**, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8, align 1
  %16 = alloca i32, align 4
  %17 = alloca %struct.file_name*, align 8
  store i32 0, i32* %11, align 4
  store i32 %0, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !316, metadata !DIExpression()), !dbg !317
  store i8** %1, i8*** %13, align 8
  call void @llvm.dbg.declare(metadata i8*** %13, metadata !318, metadata !DIExpression()), !dbg !319
  call void @llvm.dbg.declare(metadata i8** %14, metadata !320, metadata !DIExpression()), !dbg !321
  call void @llvm.dbg.declare(metadata i8* %15, metadata !322, metadata !DIExpression()), !dbg !323
  %18 = call i8* @getenv(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i64 0, i64 0)) #10, !dbg !324
  %19 = icmp ne i8* %18, null, !dbg !325
  %20 = zext i1 %19 to i8, !dbg !323
  store i8 %20, i8* %15, align 1, !dbg !323
  %21 = load i8**, i8*** %13, align 8, !dbg !326
  %22 = getelementptr inbounds i8*, i8** %21, i64 0, !dbg !326
  %23 = load i8*, i8** %22, align 8, !dbg !326
  call void @set_program_name(i8* %23), !dbg !327
  %24 = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0)) #10, !dbg !328
  %25 = call i8* @bindtextdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.12, i64 0, i64 0)) #10, !dbg !329
  %26 = call i8* @textdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0)) #10, !dbg !330
  %27 = call i32 @atexit(void ()* @close_stdout) #10, !dbg !331
  %28 = load i32, i32* @x.3
  %29 = load i32, i32* @y.4
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %36, !dbg !332

36:                                               ; preds = %originalBBpart2102, %originalBBpart2
  call void @llvm.dbg.declare(metadata i32* %16, metadata !333, metadata !DIExpression()), !dbg !335
  %37 = load i32, i32* @x.3
  %38 = load i32, i32* @y.4
  %39 = sub i32 %37, 1
  %40 = mul i32 %37, %39
  %41 = urem i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %38, 10
  %44 = or i1 %42, %43
  br i1 %44, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %36, %originalBB1alteredBB
  %45 = load i32, i32* %12, align 4, !dbg !336
  %46 = load i8**, i8*** %13, align 8, !dbg !337
  %47 = call i32 @getopt_long(i32 %45, i8** %46, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i64 0, i64 0), %struct.option* getelementptr inbounds ([5 x %struct.option], [5 x %struct.option]* @longopts, i64 0, i64 0), i32* null) #10, !dbg !338
  store i32 %47, i32* %16, align 4, !dbg !335
  %48 = load i32, i32* %16, align 4, !dbg !339
  %49 = load i32, i32* @x.3
  %50 = load i32, i32* @y.4
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %57, !dbg !341

57:                                               ; preds = %originalBBpart24
  %collatzVar = alloca i32
  br label %58

58:                                               ; preds = %57
  %59 = load i32, i32* @x.3
  %60 = load i32, i32* @y.4
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %58, %originalBB6alteredBB
  %67 = load i32, i32* @inVal0
  %68 = icmp sgt i32 %67, 1
  %69 = load i32, i32* @x.3
  %70 = load i32, i32* @y.4
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %68, label %94, label %77

77:                                               ; preds = %originalBBpart28
  %78 = load i32, i32* @x.3
  %79 = load i32, i32* @y.4
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %77, %originalBB10alteredBB
  store i32 19, i32* %collatzVar
  %86 = load i32, i32* @x.3
  %87 = load i32, i32* @y.4
  %88 = sub i32 %86, 1
  %89 = mul i32 %86, %88
  %90 = urem i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %91, %92
  br i1 %93, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %94

94:                                               ; preds = %originalBBpart212, %originalBBpart28
  %95 = load i8**, i8*** @inVal1
  %96 = getelementptr inbounds i8*, i8** %95, i64 1
  %97 = load i8*, i8** %96
  %controle = call i32 @controle(i8* %97, i32 -1)
  store i32 %controle, i32* %collatzVar
  br label %98

98:                                               ; preds = %originalBBpart278, %originalBBpart267, %94
  %99 = load i32, i32* @x.3
  %100 = load i32, i32* @y.4
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %98, %originalBB14alteredBB
  %107 = load i32, i32* %collatzVar
  %108 = icmp sgt i32 %107, 1
  %109 = load i32, i32* @x.3
  %110 = load i32, i32* @y.4
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %108, label %117, label %233

117:                                              ; preds = %originalBBpart216
  %118 = load i32, i32* @x.3
  %119 = load i32, i32* @y.4
  %120 = sub i32 %118, 1
  %121 = mul i32 %118, %120
  %122 = urem i32 %121, 2
  %123 = icmp eq i32 %122, 0
  %124 = icmp slt i32 %119, 10
  %125 = or i1 %123, %124
  br i1 %125, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %117, %originalBB18alteredBB
  %126 = load i32, i32* %collatzVar
  %127 = srem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = load i32, i32* @x.3
  %130 = load i32, i32* @y.4
  %131 = sub i32 %129, 1
  %132 = mul i32 %129, %131
  %133 = urem i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %130, 10
  %136 = or i1 %134, %135
  br i1 %136, label %originalBBpart229, label %originalBB18alteredBB

originalBBpart229:                                ; preds = %originalBB18
  br i1 %128, label %137, label %156

137:                                              ; preds = %originalBBpart229
  %138 = load i32, i32* @x.3
  %139 = load i32, i32* @y.4
  %140 = sub i32 %138, 1
  %141 = mul i32 %138, %140
  %142 = urem i32 %141, 2
  %143 = icmp eq i32 %142, 0
  %144 = icmp slt i32 %139, 10
  %145 = or i1 %143, %144
  br i1 %145, label %originalBB31, label %originalBB31alteredBB

originalBB31:                                     ; preds = %137, %originalBB31alteredBB
  %146 = load i32, i32* %collatzVar
  %147 = sdiv i32 %146, 2
  store i32 %147, i32* %collatzVar
  %148 = load i32, i32* @x.3
  %149 = load i32, i32* @y.4
  %150 = sub i32 %148, 1
  %151 = mul i32 %148, %150
  %152 = urem i32 %151, 2
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %153, %154
  br i1 %155, label %originalBBpart240, label %originalBB31alteredBB

originalBBpart240:                                ; preds = %originalBB31
  br label %176

156:                                              ; preds = %originalBBpart229
  %157 = load i32, i32* @x.3
  %158 = load i32, i32* @y.4
  %159 = sub i32 %157, 1
  %160 = mul i32 %157, %159
  %161 = urem i32 %160, 2
  %162 = icmp eq i32 %161, 0
  %163 = icmp slt i32 %158, 10
  %164 = or i1 %162, %163
  br i1 %164, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %156, %originalBB42alteredBB
  %165 = load i32, i32* %collatzVar
  %166 = mul i32 %165, 3
  %167 = add i32 %166, 1
  store i32 %167, i32* %collatzVar
  %168 = load i32, i32* @x.3
  %169 = load i32, i32* @y.4
  %170 = sub i32 %168, 1
  %171 = mul i32 %168, %170
  %172 = urem i32 %171, 2
  %173 = icmp eq i32 %172, 0
  %174 = icmp slt i32 %169, 10
  %175 = or i1 %173, %174
  br i1 %175, label %originalBBpart252, label %originalBB42alteredBB

originalBBpart252:                                ; preds = %originalBB42
  br label %176

176:                                              ; preds = %originalBBpart252, %originalBBpart240
  %177 = load i32, i32* @x.3
  %178 = load i32, i32* @y.4
  %179 = sub i32 %177, 1
  %180 = mul i32 %177, %179
  %181 = urem i32 %180, 2
  %182 = icmp eq i32 %181, 0
  %183 = icmp slt i32 %178, 10
  %184 = or i1 %182, %183
  br i1 %184, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %176, %originalBB54alteredBB
  %185 = load i32, i32* %collatzVar
  %186 = sub i32 %48, %185
  %187 = icmp sgt i32 %186, -3
  %188 = load i32, i32* @x.3
  %189 = load i32, i32* @y.4
  %190 = sub i32 %188, 1
  %191 = mul i32 %188, %190
  %192 = urem i32 %191, 2
  %193 = icmp eq i32 %192, 0
  %194 = icmp slt i32 %189, 10
  %195 = or i1 %193, %194
  br i1 %195, label %originalBBpart267, label %originalBB54alteredBB

originalBBpart267:                                ; preds = %originalBB54
  br i1 %187, label %196, label %98

196:                                              ; preds = %originalBBpart267
  %197 = load i32, i32* @x.3
  %198 = load i32, i32* @y.4
  %199 = sub i32 %197, 1
  %200 = mul i32 %197, %199
  %201 = urem i32 %200, 2
  %202 = icmp eq i32 %201, 0
  %203 = icmp slt i32 %198, 10
  %204 = or i1 %202, %203
  br i1 %204, label %originalBB69, label %originalBB69alteredBB

originalBB69:                                     ; preds = %196, %originalBB69alteredBB
  %205 = load i32, i32* %collatzVar
  %206 = add i32 %48, %205
  %207 = icmp slt i32 %206, 1
  %208 = load i32, i32* @x.3
  %209 = load i32, i32* @y.4
  %210 = sub i32 %208, 1
  %211 = mul i32 %208, %210
  %212 = urem i32 %211, 2
  %213 = icmp eq i32 %212, 0
  %214 = icmp slt i32 %209, 10
  %215 = or i1 %213, %214
  br i1 %215, label %originalBBpart278, label %originalBB69alteredBB

originalBBpart278:                                ; preds = %originalBB69
  br i1 %207, label %216, label %98

216:                                              ; preds = %originalBBpart278
  %217 = load i32, i32* @x.3
  %218 = load i32, i32* @y.4
  %219 = sub i32 %217, 1
  %220 = mul i32 %217, %219
  %221 = urem i32 %220, 2
  %222 = icmp eq i32 %221, 0
  %223 = icmp slt i32 %218, 10
  %224 = or i1 %222, %223
  br i1 %224, label %originalBB80, label %originalBB80alteredBB

originalBB80:                                     ; preds = %216, %originalBB80alteredBB
  %225 = load i32, i32* @x.3
  %226 = load i32, i32* @y.4
  %227 = sub i32 %225, 1
  %228 = mul i32 %225, %227
  %229 = urem i32 %228, 2
  %230 = icmp eq i32 %229, 0
  %231 = icmp slt i32 %226, 10
  %232 = or i1 %230, %231
  br i1 %232, label %originalBBpart282, label %originalBB80alteredBB

originalBBpart282:                                ; preds = %originalBB80
  br label %323, !dbg !342

233:                                              ; preds = %originalBBpart216
  %234 = load i32, i32* %16, align 4, !dbg !343
  switch i32 %234, label %289 [
    i32 76, label %235
    i32 80, label %236
    i32 -130, label %253
    i32 -131, label %270
  ], !dbg !344

235:                                              ; preds = %233
  store i8 1, i8* %15, align 1, !dbg !345
  br label %306, !dbg !347

236:                                              ; preds = %233
  %237 = load i32, i32* @x.3
  %238 = load i32, i32* @y.4
  %239 = sub i32 %237, 1
  %240 = mul i32 %237, %239
  %241 = urem i32 %240, 2
  %242 = icmp eq i32 %241, 0
  %243 = icmp slt i32 %238, 10
  %244 = or i1 %242, %243
  br i1 %244, label %originalBB84, label %originalBB84alteredBB

originalBB84:                                     ; preds = %236, %originalBB84alteredBB
  store i8 0, i8* %15, align 1, !dbg !348
  %245 = load i32, i32* @x.3
  %246 = load i32, i32* @y.4
  %247 = sub i32 %245, 1
  %248 = mul i32 %245, %247
  %249 = urem i32 %248, 2
  %250 = icmp eq i32 %249, 0
  %251 = icmp slt i32 %246, 10
  %252 = or i1 %250, %251
  br i1 %252, label %originalBBpart286, label %originalBB84alteredBB

originalBBpart286:                                ; preds = %originalBB84
  br label %306, !dbg !349

253:                                              ; preds = %233
  %254 = load i32, i32* @x.3
  %255 = load i32, i32* @y.4
  %256 = sub i32 %254, 1
  %257 = mul i32 %254, %256
  %258 = urem i32 %257, 2
  %259 = icmp eq i32 %258, 0
  %260 = icmp slt i32 %255, 10
  %261 = or i1 %259, %260
  br i1 %261, label %originalBB88, label %originalBB88alteredBB

originalBB88:                                     ; preds = %253, %originalBB88alteredBB
  call void @usage(i32 0) #14, !dbg !350
  %262 = load i32, i32* @x.3
  %263 = load i32, i32* @y.4
  %264 = sub i32 %262, 1
  %265 = mul i32 %262, %264
  %266 = urem i32 %265, 2
  %267 = icmp eq i32 %266, 0
  %268 = icmp slt i32 %263, 10
  %269 = or i1 %267, %268
  br i1 %269, label %originalBBpart290, label %originalBB88alteredBB

originalBBpart290:                                ; preds = %originalBB88
  unreachable, !dbg !350

270:                                              ; preds = %233
  %271 = load i32, i32* @x.3
  %272 = load i32, i32* @y.4
  %273 = sub i32 %271, 1
  %274 = mul i32 %271, %273
  %275 = urem i32 %274, 2
  %276 = icmp eq i32 %275, 0
  %277 = icmp slt i32 %272, 10
  %278 = or i1 %276, %277
  br i1 %278, label %originalBB92, label %originalBB92alteredBB

originalBB92:                                     ; preds = %270, %originalBB92alteredBB
  %279 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !351
  %280 = load i8*, i8** @Version, align 8, !dbg !351
  call void (%struct._IO_FILE*, i8*, i8*, i8*, ...) @version_etc(%struct._IO_FILE* %279, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.14, i64 0, i64 0), i8* %280, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.15, i64 0, i64 0), i8* null), !dbg !351
  call void @exit(i32 0) #12, !dbg !351
  %281 = load i32, i32* @x.3
  %282 = load i32, i32* @y.4
  %283 = sub i32 %281, 1
  %284 = mul i32 %281, %283
  %285 = urem i32 %284, 2
  %286 = icmp eq i32 %285, 0
  %287 = icmp slt i32 %282, 10
  %288 = or i1 %286, %287
  br i1 %288, label %originalBBpart294, label %originalBB92alteredBB

originalBBpart294:                                ; preds = %originalBB92
  unreachable, !dbg !351

289:                                              ; preds = %233
  %290 = load i32, i32* @x.3
  %291 = load i32, i32* @y.4
  %292 = sub i32 %290, 1
  %293 = mul i32 %290, %292
  %294 = urem i32 %293, 2
  %295 = icmp eq i32 %294, 0
  %296 = icmp slt i32 %291, 10
  %297 = or i1 %295, %296
  br i1 %297, label %originalBB96, label %originalBB96alteredBB

originalBB96:                                     ; preds = %289, %originalBB96alteredBB
  call void @usage(i32 1) #14, !dbg !352
  %298 = load i32, i32* @x.3
  %299 = load i32, i32* @y.4
  %300 = sub i32 %298, 1
  %301 = mul i32 %298, %300
  %302 = urem i32 %301, 2
  %303 = icmp eq i32 %302, 0
  %304 = icmp slt i32 %299, 10
  %305 = or i1 %303, %304
  br i1 %305, label %originalBBpart298, label %originalBB96alteredBB

originalBBpart298:                                ; preds = %originalBB96
  unreachable, !dbg !352

306:                                              ; preds = %originalBBpart286, %235
  %307 = load i32, i32* @x.3
  %308 = load i32, i32* @y.4
  %309 = sub i32 %307, 1
  %310 = mul i32 %307, %309
  %311 = urem i32 %310, 2
  %312 = icmp eq i32 %311, 0
  %313 = icmp slt i32 %308, 10
  %314 = or i1 %312, %313
  br i1 %314, label %originalBB100, label %originalBB100alteredBB

originalBB100:                                    ; preds = %306, %originalBB100alteredBB
  %315 = load i32, i32* @x.3
  %316 = load i32, i32* @y.4
  %317 = sub i32 %315, 1
  %318 = mul i32 %315, %317
  %319 = urem i32 %318, 2
  %320 = icmp eq i32 %319, 0
  %321 = icmp slt i32 %316, 10
  %322 = or i1 %320, %321
  br i1 %322, label %originalBBpart2102, label %originalBB100alteredBB

originalBBpart2102:                               ; preds = %originalBB100
  br label %36, !dbg !332, !llvm.loop !353

323:                                              ; preds = %originalBBpart282
  %324 = load i32, i32* @x.3
  %325 = load i32, i32* @y.4
  %326 = sub i32 %324, 1
  %327 = mul i32 %324, %326
  %328 = urem i32 %327, 2
  %329 = icmp eq i32 %328, 0
  %330 = icmp slt i32 %325, 10
  %331 = or i1 %329, %330
  br i1 %331, label %originalBB104, label %originalBB104alteredBB

originalBB104:                                    ; preds = %323, %originalBB104alteredBB
  %332 = load i32, i32* @optind, align 4, !dbg !355
  %333 = load i32, i32* %12, align 4, !dbg !357
  %334 = icmp slt i32 %332, %333, !dbg !358
  %335 = load i32, i32* @x.3
  %336 = load i32, i32* @y.4
  %337 = sub i32 %335, 1
  %338 = mul i32 %335, %337
  %339 = urem i32 %338, 2
  %340 = icmp eq i32 %339, 0
  %341 = icmp slt i32 %336, 10
  %342 = or i1 %340, %341
  br i1 %342, label %originalBBpart2106, label %originalBB104alteredBB

originalBBpart2106:                               ; preds = %originalBB104
  br i1 %334, label %343, label %345, !dbg !359

343:                                              ; preds = %originalBBpart2106
  %344 = call i8* @gettext(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.16, i64 0, i64 0)) #10, !dbg !360
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %344), !dbg !361
  br label %345, !dbg !361

345:                                              ; preds = %343, %originalBBpart2106
  %346 = load i32, i32* @x.3
  %347 = load i32, i32* @y.4
  %348 = sub i32 %346, 1
  %349 = mul i32 %346, %348
  %350 = urem i32 %349, 2
  %351 = icmp eq i32 %350, 0
  %352 = icmp slt i32 %347, 10
  %353 = or i1 %351, %352
  br i1 %353, label %originalBB108, label %originalBB108alteredBB

originalBB108:                                    ; preds = %345, %originalBB108alteredBB
  %354 = load i8, i8* %15, align 1, !dbg !362
  %355 = trunc i8 %354 to i1, !dbg !362
  %356 = load i32, i32* @x.3
  %357 = load i32, i32* @y.4
  %358 = sub i32 %356, 1
  %359 = mul i32 %356, %358
  %360 = urem i32 %359, 2
  %361 = icmp eq i32 %360, 0
  %362 = icmp slt i32 %357, 10
  %363 = or i1 %361, %362
  br i1 %363, label %originalBBpart2110, label %originalBB108alteredBB

originalBBpart2110:                               ; preds = %originalBB108
  br i1 %355, label %364, label %420, !dbg !364

364:                                              ; preds = %originalBBpart2110
  %365 = load i32, i32* @x.3
  %366 = load i32, i32* @y.4
  %367 = sub i32 %365, 1
  %368 = mul i32 %365, %367
  %369 = urem i32 %368, 2
  %370 = icmp eq i32 %369, 0
  %371 = icmp slt i32 %366, 10
  %372 = or i1 %370, %371
  br i1 %372, label %originalBB112, label %originalBB112alteredBB

originalBB112:                                    ; preds = %364, %originalBB112alteredBB
  %373 = call i8* @logical_getcwd(), !dbg !365
  store i8* %373, i8** %14, align 8, !dbg !367
  %374 = load i8*, i8** %14, align 8, !dbg !368
  %375 = icmp ne i8* %374, null, !dbg !368
  %376 = load i32, i32* @x.3
  %377 = load i32, i32* @y.4
  %378 = sub i32 %376, 1
  %379 = mul i32 %376, %378
  %380 = urem i32 %379, 2
  %381 = icmp eq i32 %380, 0
  %382 = icmp slt i32 %377, 10
  %383 = or i1 %381, %382
  br i1 %383, label %originalBBpart2114, label %originalBB112alteredBB

originalBBpart2114:                               ; preds = %originalBB112
  br i1 %375, label %384, label %403, !dbg !370

384:                                              ; preds = %originalBBpart2114
  %385 = load i32, i32* @x.3
  %386 = load i32, i32* @y.4
  %387 = sub i32 %385, 1
  %388 = mul i32 %385, %387
  %389 = urem i32 %388, 2
  %390 = icmp eq i32 %389, 0
  %391 = icmp slt i32 %386, 10
  %392 = or i1 %390, %391
  br i1 %392, label %originalBB116, label %originalBB116alteredBB

originalBB116:                                    ; preds = %384, %originalBB116alteredBB
  %393 = load i8*, i8** %14, align 8, !dbg !371
  %394 = call i32 @puts(i8* %393), !dbg !373
  store i32 0, i32* %11, align 4, !dbg !374
  %395 = load i32, i32* @x.3
  %396 = load i32, i32* @y.4
  %397 = sub i32 %395, 1
  %398 = mul i32 %395, %397
  %399 = urem i32 %398, 2
  %400 = icmp eq i32 %399, 0
  %401 = icmp slt i32 %396, 10
  %402 = or i1 %400, %401
  br i1 %402, label %originalBBpart2118, label %originalBB116alteredBB

originalBBpart2118:                               ; preds = %originalBB116
  br label %501, !dbg !374

403:                                              ; preds = %originalBBpart2114
  %404 = load i32, i32* @x.3
  %405 = load i32, i32* @y.4
  %406 = sub i32 %404, 1
  %407 = mul i32 %404, %406
  %408 = urem i32 %407, 2
  %409 = icmp eq i32 %408, 0
  %410 = icmp slt i32 %405, 10
  %411 = or i1 %409, %410
  br i1 %411, label %originalBB120, label %originalBB120alteredBB

originalBB120:                                    ; preds = %403, %originalBB120alteredBB
  %412 = load i32, i32* @x.3
  %413 = load i32, i32* @y.4
  %414 = sub i32 %412, 1
  %415 = mul i32 %412, %414
  %416 = urem i32 %415, 2
  %417 = icmp eq i32 %416, 0
  %418 = icmp slt i32 %413, 10
  %419 = or i1 %417, %418
  br i1 %419, label %originalBBpart2122, label %originalBB120alteredBB

originalBBpart2122:                               ; preds = %originalBB120
  br label %420, !dbg !375

420:                                              ; preds = %originalBBpart2122, %originalBBpart2110
  %421 = load i32, i32* @x.3
  %422 = load i32, i32* @y.4
  %423 = sub i32 %421, 1
  %424 = mul i32 %421, %423
  %425 = urem i32 %424, 2
  %426 = icmp eq i32 %425, 0
  %427 = icmp slt i32 %422, 10
  %428 = or i1 %426, %427
  br i1 %428, label %originalBB124, label %originalBB124alteredBB

originalBB124:                                    ; preds = %420, %originalBB124alteredBB
  %429 = call i8* @xgetcwd(), !dbg !376
  store i8* %429, i8** %14, align 8, !dbg !377
  %430 = load i8*, i8** %14, align 8, !dbg !378
  %431 = icmp ne i8* %430, null, !dbg !380
  %432 = load i32, i32* @x.3
  %433 = load i32, i32* @y.4
  %434 = sub i32 %432, 1
  %435 = mul i32 %432, %434
  %436 = urem i32 %435, 2
  %437 = icmp eq i32 %436, 0
  %438 = icmp slt i32 %433, 10
  %439 = or i1 %437, %438
  br i1 %439, label %originalBBpart2126, label %originalBB124alteredBB

originalBBpart2126:                               ; preds = %originalBB124
  br i1 %431, label %440, label %460, !dbg !381

440:                                              ; preds = %originalBBpart2126
  %441 = load i32, i32* @x.3
  %442 = load i32, i32* @y.4
  %443 = sub i32 %441, 1
  %444 = mul i32 %441, %443
  %445 = urem i32 %444, 2
  %446 = icmp eq i32 %445, 0
  %447 = icmp slt i32 %442, 10
  %448 = or i1 %446, %447
  br i1 %448, label %originalBB128, label %originalBB128alteredBB

originalBB128:                                    ; preds = %440, %originalBB128alteredBB
  %449 = load i8*, i8** %14, align 8, !dbg !382
  %450 = call i32 @puts(i8* %449), !dbg !384
  %451 = load i8*, i8** %14, align 8, !dbg !385
  call void @free(i8* %451) #10, !dbg !386
  %452 = load i32, i32* @x.3
  %453 = load i32, i32* @y.4
  %454 = sub i32 %452, 1
  %455 = mul i32 %452, %454
  %456 = urem i32 %455, 2
  %457 = icmp eq i32 %456, 0
  %458 = icmp slt i32 %453, 10
  %459 = or i1 %457, %458
  br i1 %459, label %originalBBpart2130, label %originalBB128alteredBB

originalBBpart2130:                               ; preds = %originalBB128
  br label %484, !dbg !387

460:                                              ; preds = %originalBBpart2126
  call void @llvm.dbg.declare(metadata %struct.file_name** %17, metadata !388, metadata !DIExpression()), !dbg !396
  %461 = load i32, i32* @x.3
  %462 = load i32, i32* @y.4
  %463 = sub i32 %461, 1
  %464 = mul i32 %461, %463
  %465 = urem i32 %464, 2
  %466 = icmp eq i32 %465, 0
  %467 = icmp slt i32 %462, 10
  %468 = or i1 %466, %467
  br i1 %468, label %originalBB132, label %originalBB132alteredBB

originalBB132:                                    ; preds = %460, %originalBB132alteredBB
  %469 = call %struct.file_name* @file_name_init(), !dbg !397
  store %struct.file_name* %469, %struct.file_name** %17, align 8, !dbg !396
  %470 = load %struct.file_name*, %struct.file_name** %17, align 8, !dbg !398
  call void @robust_getcwd(%struct.file_name* %470), !dbg !399
  %471 = load %struct.file_name*, %struct.file_name** %17, align 8, !dbg !400
  %472 = getelementptr inbounds %struct.file_name, %struct.file_name* %471, i32 0, i32 2, !dbg !401
  %473 = load i8*, i8** %472, align 8, !dbg !401
  %474 = call i32 @puts(i8* %473), !dbg !402
  %475 = load %struct.file_name*, %struct.file_name** %17, align 8, !dbg !403
  call void @file_name_free(%struct.file_name* %475), !dbg !404
  %476 = load i32, i32* @x.3
  %477 = load i32, i32* @y.4
  %478 = sub i32 %476, 1
  %479 = mul i32 %476, %478
  %480 = urem i32 %479, 2
  %481 = icmp eq i32 %480, 0
  %482 = icmp slt i32 %477, 10
  %483 = or i1 %481, %482
  br i1 %483, label %originalBBpart2134, label %originalBB132alteredBB

originalBBpart2134:                               ; preds = %originalBB132
  br label %484

484:                                              ; preds = %originalBBpart2134, %originalBBpart2130
  %485 = load i32, i32* @x.3
  %486 = load i32, i32* @y.4
  %487 = sub i32 %485, 1
  %488 = mul i32 %485, %487
  %489 = urem i32 %488, 2
  %490 = icmp eq i32 %489, 0
  %491 = icmp slt i32 %486, 10
  %492 = or i1 %490, %491
  br i1 %492, label %originalBB136, label %originalBB136alteredBB

originalBB136:                                    ; preds = %484, %originalBB136alteredBB
  store i32 0, i32* %11, align 4, !dbg !405
  %493 = load i32, i32* @x.3
  %494 = load i32, i32* @y.4
  %495 = sub i32 %493, 1
  %496 = mul i32 %493, %495
  %497 = urem i32 %496, 2
  %498 = icmp eq i32 %497, 0
  %499 = icmp slt i32 %494, 10
  %500 = or i1 %498, %499
  br i1 %500, label %originalBBpart2138, label %originalBB136alteredBB

originalBBpart2138:                               ; preds = %originalBB136
  br label %501, !dbg !405

501:                                              ; preds = %originalBBpart2138, %originalBBpart2118
  %502 = load i32, i32* @x.3
  %503 = load i32, i32* @y.4
  %504 = sub i32 %502, 1
  %505 = mul i32 %502, %504
  %506 = urem i32 %505, 2
  %507 = icmp eq i32 %506, 0
  %508 = icmp slt i32 %503, 10
  %509 = or i1 %507, %508
  br i1 %509, label %originalBB140, label %originalBB140alteredBB

originalBB140:                                    ; preds = %501, %originalBB140alteredBB
  %510 = load i32, i32* %11, align 4, !dbg !406
  %511 = load i32, i32* @x.3
  %512 = load i32, i32* @y.4
  %513 = sub i32 %511, 1
  %514 = mul i32 %511, %513
  %515 = urem i32 %514, 2
  %516 = icmp eq i32 %515, 0
  %517 = icmp slt i32 %512, 10
  %518 = or i1 %516, %517
  br i1 %518, label %originalBBpart2142, label %originalBB140alteredBB

originalBBpart2142:                               ; preds = %originalBB140
  ret i32 %510, !dbg !406

originalBBalteredBB:                              ; preds = %originalBB, %2
  store i8** %1, i8*** @inVal1
  store i32 %0, i32* @inVal0
  %519 = alloca i32, align 4
  %520 = alloca i32, align 4
  %521 = alloca i8**, align 8
  %522 = alloca i8*, align 8
  %523 = alloca i8, align 1
  %524 = alloca i32, align 4
  %525 = alloca %struct.file_name*, align 8
  store i32 0, i32* %519, align 4
  store i32 %0, i32* %520, align 4
  call void @llvm.dbg.declare(metadata i32* %520, metadata !407, metadata !DIExpression()), !dbg !317
  store i8** %1, i8*** %521, align 8
  call void @llvm.dbg.declare(metadata i8*** %521, metadata !421, metadata !DIExpression()), !dbg !319
  call void @llvm.dbg.declare(metadata i8** %522, metadata !422, metadata !DIExpression()), !dbg !321
  call void @llvm.dbg.declare(metadata i8* %523, metadata !423, metadata !DIExpression()), !dbg !323
  %526 = call i8* @getenv(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i64 0, i64 0)) #10, !dbg !324
  %527 = icmp ne i8* %526, null, !dbg !325
  %528 = zext i1 %527 to i8, !dbg !323
  store i8 %528, i8* %523, align 1, !dbg !323
  %529 = load i8**, i8*** %521, align 8, !dbg !326
  %530 = getelementptr inbounds i8*, i8** %529, i64 0, !dbg !326
  %531 = load i8*, i8** %530, align 8, !dbg !326
  call void @set_program_name(i8* %531), !dbg !327
  %532 = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0)) #10, !dbg !328
  %533 = call i8* @bindtextdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.12, i64 0, i64 0)) #10, !dbg !329
  %534 = call i8* @textdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0)) #10, !dbg !330
  %535 = call i32 @atexit(void ()* @close_stdout) #10, !dbg !331
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %36
  %536 = load i32, i32* %12, align 4, !dbg !336
  %537 = load i8**, i8*** %13, align 8, !dbg !337
  %538 = call i32 @getopt_long(i32 %536, i8** %537, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i64 0, i64 0), %struct.option* getelementptr inbounds ([5 x %struct.option], [5 x %struct.option]* @longopts, i64 0, i64 0), i32* null) #10, !dbg !338
  store i32 %538, i32* %16, align 4, !dbg !335
  %539 = load i32, i32* %16, align 4, !dbg !339
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %58
  %540 = load i32, i32* @inVal0
  %541 = icmp sgt i32 %540, 1
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %77
  store i32 19, i32* %collatzVar
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %98
  %542 = load i32, i32* %collatzVar
  %543 = icmp sgt i32 %542, 1
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %117
  %544 = load i32, i32* %collatzVar
  %_ = sub i32 %544, 2
  %gen = mul i32 %_, 2
  %_19 = sub i32 0, %544
  %gen20 = add i32 %_19, 2
  %_21 = shl i32 %544, 2
  %_22 = shl i32 %544, 2
  %_23 = shl i32 %544, 2
  %_24 = sub i32 %544, 2
  %gen25 = mul i32 %_24, 2
  %_26 = sub i32 0, %544
  %gen27 = add i32 %_26, 2
  %545 = srem i32 %544, 2
  %546 = icmp eq i32 %545, 0
  br label %originalBB18

originalBB31alteredBB:                            ; preds = %originalBB31, %137
  %547 = load i32, i32* %collatzVar
  %_32 = sub i32 %547, 2
  %gen33 = mul i32 %_32, 2
  %_34 = sub i32 0, %547
  %gen35 = add i32 %_34, 2
  %_36 = sub i32 0, %547
  %gen37 = add i32 %_36, 2
  %_38 = shl i32 %547, 2
  %548 = sdiv i32 %547, 2
  store i32 %548, i32* %collatzVar
  br label %originalBB31

originalBB42alteredBB:                            ; preds = %originalBB42, %156
  %549 = load i32, i32* %collatzVar
  %_43 = shl i32 %549, 3
  %_44 = sub i32 %549, 3
  %gen45 = mul i32 %_44, 3
  %_46 = sub i32 %549, 3
  %gen47 = mul i32 %_46, 3
  %550 = mul i32 %549, 3
  %_48 = sub i32 %550, 1
  %gen49 = mul i32 %_48, 1
  %_50 = shl i32 %550, 1
  %551 = add i32 %550, 1
  store i32 %551, i32* %collatzVar
  br label %originalBB42

originalBB54alteredBB:                            ; preds = %originalBB54, %176
  %552 = load i32, i32* %collatzVar
  %_55 = shl i32 %48, %552
  %_56 = sub i32 %48, %552
  %gen57 = mul i32 %_56, %552
  %_58 = shl i32 %48, %552
  %_59 = sub i32 0, %48
  %gen60 = add i32 %_59, %552
  %_61 = sub i32 %48, %552
  %gen62 = mul i32 %_61, %552
  %_63 = sub i32 0, %48
  %gen64 = add i32 %_63, %552
  %_65 = shl i32 %48, %552
  %553 = sub i32 %48, %552
  %554 = icmp sgt i32 %553, -3
  br label %originalBB54

originalBB69alteredBB:                            ; preds = %originalBB69, %196
  %555 = load i32, i32* %collatzVar
  %_70 = sub i32 0, %48
  %gen71 = add i32 %_70, %555
  %_72 = sub i32 %48, %555
  %gen73 = mul i32 %_72, %555
  %_74 = shl i32 %48, %555
  %_75 = sub i32 %48, %555
  %gen76 = mul i32 %_75, %555
  %556 = add i32 %48, %555
  %557 = icmp slt i32 %556, 1
  br label %originalBB69

originalBB80alteredBB:                            ; preds = %originalBB80, %216
  br label %originalBB80

originalBB84alteredBB:                            ; preds = %originalBB84, %236
  store i8 0, i8* %15, align 1, !dbg !348
  br label %originalBB84

originalBB88alteredBB:                            ; preds = %originalBB88, %253
  call void @usage(i32 0) #14, !dbg !350
  br label %originalBB88

originalBB92alteredBB:                            ; preds = %originalBB92, %270
  %558 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !351
  %559 = load i8*, i8** @Version, align 8, !dbg !351
  call void (%struct._IO_FILE*, i8*, i8*, i8*, ...) @version_etc(%struct._IO_FILE* %558, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.14, i64 0, i64 0), i8* %559, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.15, i64 0, i64 0), i8* null), !dbg !351
  call void @exit(i32 0) #12, !dbg !351
  br label %originalBB92

originalBB96alteredBB:                            ; preds = %originalBB96, %289
  call void @usage(i32 1) #14, !dbg !352
  br label %originalBB96

originalBB100alteredBB:                           ; preds = %originalBB100, %306
  br label %originalBB100

originalBB104alteredBB:                           ; preds = %originalBB104, %323
  %560 = load i32, i32* @optind, align 4, !dbg !355
  %561 = load i32, i32* %12, align 4, !dbg !357
  %562 = icmp slt i32 %560, %561, !dbg !358
  br label %originalBB104

originalBB108alteredBB:                           ; preds = %originalBB108, %345
  %563 = load i8, i8* %15, align 1, !dbg !362
  %564 = trunc i8 %563 to i1, !dbg !362
  br label %originalBB108

originalBB112alteredBB:                           ; preds = %originalBB112, %364
  %565 = call i8* @logical_getcwd(), !dbg !365
  store i8* %565, i8** %14, align 8, !dbg !367
  %566 = load i8*, i8** %14, align 8, !dbg !368
  %567 = icmp ne i8* %566, null, !dbg !368
  br label %originalBB112

originalBB116alteredBB:                           ; preds = %originalBB116, %384
  %568 = load i8*, i8** %14, align 8, !dbg !371
  %569 = call i32 @puts(i8* %568), !dbg !373
  store i32 0, i32* %11, align 4, !dbg !374
  br label %originalBB116

originalBB120alteredBB:                           ; preds = %originalBB120, %403
  br label %originalBB120

originalBB124alteredBB:                           ; preds = %originalBB124, %420
  %570 = call i8* @xgetcwd(), !dbg !376
  store i8* %570, i8** %14, align 8, !dbg !377
  %571 = load i8*, i8** %14, align 8, !dbg !378
  %572 = icmp ne i8* %571, null, !dbg !380
  br label %originalBB124

originalBB128alteredBB:                           ; preds = %originalBB128, %440
  %573 = load i8*, i8** %14, align 8, !dbg !382
  %574 = call i32 @puts(i8* %573), !dbg !384
  %575 = load i8*, i8** %14, align 8, !dbg !385
  call void @free(i8* %575) #10, !dbg !386
  br label %originalBB128

originalBB132alteredBB:                           ; preds = %originalBB132, %460
  %576 = call %struct.file_name* @file_name_init(), !dbg !397
  store %struct.file_name* %576, %struct.file_name** %17, align 8, !dbg !396
  %577 = load %struct.file_name*, %struct.file_name** %17, align 8, !dbg !398
  call void @robust_getcwd(%struct.file_name* %577), !dbg !399
  %578 = load %struct.file_name*, %struct.file_name** %17, align 8, !dbg !400
  %579 = getelementptr inbounds %struct.file_name, %struct.file_name* %578, i32 0, i32 2, !dbg !401
  %580 = load i8*, i8** %579, align 8, !dbg !401
  %581 = call i32 @puts(i8* %580), !dbg !402
  %582 = load %struct.file_name*, %struct.file_name** %17, align 8, !dbg !403
  call void @file_name_free(%struct.file_name* %582), !dbg !404
  br label %originalBB132

originalBB136alteredBB:                           ; preds = %originalBB136, %484
  store i32 0, i32* %11, align 4, !dbg !405
  br label %originalBB136

originalBB140alteredBB:                           ; preds = %originalBB140, %501
  %583 = load i32, i32* %11, align 4, !dbg !406
  br label %originalBB140
}

; Function Attrs: nounwind
declare dso_local i8* @getenv(i8*) #2

; Function Attrs: nounwind
declare dso_local i8* @bindtextdomain(i8*, i8*) #2

; Function Attrs: nounwind
declare dso_local i8* @textdomain(i8*) #2

; Function Attrs: nounwind
declare dso_local i32 @atexit(void ()*) #2

; Function Attrs: nounwind
declare dso_local i32 @getopt_long(i32, i8**, i8*, %struct.option*, i32*) #2

declare dso_local void @error(i32, i32, i8*, ...) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @logical_getcwd() #4 !dbg !424 {
  %1 = load i32, i32* @x.5
  %2 = load i32, i32* @y.6
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = alloca i8*, align 8
  %10 = alloca %struct.stat, align 8
  %11 = alloca %struct.stat, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata %struct.stat* %10, metadata !427, metadata !DIExpression()), !dbg !467
  call void @llvm.dbg.declare(metadata %struct.stat* %11, metadata !468, metadata !DIExpression()), !dbg !469
  call void @llvm.dbg.declare(metadata i8** %12, metadata !470, metadata !DIExpression()), !dbg !471
  %14 = call i8* @getenv(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.36, i64 0, i64 0)) #10, !dbg !472
  store i8* %14, i8** %12, align 8, !dbg !471
  call void @llvm.dbg.declare(metadata i8** %13, metadata !473, metadata !DIExpression()), !dbg !474
  %15 = load i8*, i8** %12, align 8, !dbg !475
  %16 = icmp ne i8* %15, null, !dbg !475
  %17 = load i32, i32* @x.5
  %18 = load i32, i32* @y.6
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %16, label %25, label %47, !dbg !477

25:                                               ; preds = %originalBBpart2
  %26 = load i32, i32* @x.5
  %27 = load i32, i32* @y.6
  %28 = sub i32 %26, 1
  %29 = mul i32 %26, %28
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %31, %32
  br i1 %33, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %25, %originalBB1alteredBB
  %34 = load i8*, i8** %12, align 8, !dbg !478
  %35 = getelementptr inbounds i8, i8* %34, i64 0, !dbg !478
  %36 = load i8, i8* %35, align 1, !dbg !478
  %37 = sext i8 %36 to i32, !dbg !478
  %38 = icmp ne i32 %37, 47, !dbg !479
  %39 = load i32, i32* @x.5
  %40 = load i32, i32* @y.6
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %38, label %47, label %64, !dbg !480

47:                                               ; preds = %originalBBpart24, %originalBBpart2
  %48 = load i32, i32* @x.5
  %49 = load i32, i32* @y.6
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %47, %originalBB6alteredBB
  store i8* null, i8** %9, align 8, !dbg !481
  %56 = load i32, i32* @x.5
  %57 = load i32, i32* @y.6
  %58 = sub i32 %56, 1
  %59 = mul i32 %56, %58
  %60 = urem i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %57, 10
  %63 = or i1 %61, %62
  br i1 %63, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %680, !dbg !481

64:                                               ; preds = %originalBBpart24
  %65 = load i32, i32* @x.5
  %66 = load i32, i32* @y.6
  %67 = sub i32 %65, 1
  %68 = mul i32 %65, %67
  %69 = urem i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %70, %71
  br i1 %72, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %64, %originalBB10alteredBB
  %73 = load i8*, i8** %12, align 8, !dbg !482
  store i8* %73, i8** %13, align 8, !dbg !483
  %74 = load i32, i32* @x.5
  %75 = load i32, i32* @y.6
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %82, !dbg !484

82:                                               ; preds = %originalBBpart244, %originalBBpart212
  %83 = load i32, i32* @x.5
  %84 = load i32, i32* @y.6
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %82, %originalBB14alteredBB
  %91 = load i8*, i8** %13, align 8, !dbg !485
  %92 = call i8* @strstr(i8* %91, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.37, i64 0, i64 0)) #13, !dbg !486
  store i8* %92, i8** %13, align 8, !dbg !487
  %93 = icmp ne i8* %92, null, !dbg !484
  %94 = load i32, i32* @x.5
  %95 = load i32, i32* @y.6
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %93, label %102, label %246, !dbg !484

102:                                              ; preds = %originalBBpart216
  %103 = load i32, i32* @x.5
  %104 = load i32, i32* @y.6
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %102, %originalBB18alteredBB
  %111 = load i8*, i8** %13, align 8, !dbg !488
  %112 = getelementptr inbounds i8, i8* %111, i64 2, !dbg !488
  %113 = load i8, i8* %112, align 1, !dbg !488
  %114 = icmp ne i8 %113, 0, !dbg !488
  %115 = load i32, i32* @x.5
  %116 = load i32, i32* @y.6
  %117 = sub i32 %115, 1
  %118 = mul i32 %115, %117
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %120, %121
  br i1 %122, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %114, label %123, label %210, !dbg !491

123:                                              ; preds = %originalBBpart220
  %124 = load i32, i32* @x.5
  %125 = load i32, i32* @y.6
  %126 = sub i32 %124, 1
  %127 = mul i32 %124, %126
  %128 = urem i32 %127, 2
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %125, 10
  %131 = or i1 %129, %130
  br i1 %131, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %123, %originalBB22alteredBB
  %132 = load i8*, i8** %13, align 8, !dbg !492
  %133 = getelementptr inbounds i8, i8* %132, i64 2, !dbg !492
  %134 = load i8, i8* %133, align 1, !dbg !492
  %135 = sext i8 %134 to i32, !dbg !492
  %136 = icmp eq i32 %135, 47, !dbg !493
  %137 = load i32, i32* @x.5
  %138 = load i32, i32* @y.6
  %139 = sub i32 %137, 1
  %140 = mul i32 %137, %139
  %141 = urem i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %142, %143
  br i1 %144, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %136, label %210, label %145, !dbg !494

145:                                              ; preds = %originalBBpart224
  %146 = load i32, i32* @x.5
  %147 = load i32, i32* @y.6
  %148 = sub i32 %146, 1
  %149 = mul i32 %146, %148
  %150 = urem i32 %149, 2
  %151 = icmp eq i32 %150, 0
  %152 = icmp slt i32 %147, 10
  %153 = or i1 %151, %152
  br i1 %153, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %145, %originalBB26alteredBB
  %154 = load i8*, i8** %13, align 8, !dbg !495
  %155 = getelementptr inbounds i8, i8* %154, i64 2, !dbg !495
  %156 = load i8, i8* %155, align 1, !dbg !495
  %157 = sext i8 %156 to i32, !dbg !495
  %158 = icmp eq i32 %157, 46, !dbg !496
  %159 = load i32, i32* @x.5
  %160 = load i32, i32* @y.6
  %161 = sub i32 %159, 1
  %162 = mul i32 %159, %161
  %163 = urem i32 %162, 2
  %164 = icmp eq i32 %163, 0
  %165 = icmp slt i32 %160, 10
  %166 = or i1 %164, %165
  br i1 %166, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %158, label %167, label %227, !dbg !497

167:                                              ; preds = %originalBBpart228
  %168 = load i32, i32* @x.5
  %169 = load i32, i32* @y.6
  %170 = sub i32 %168, 1
  %171 = mul i32 %168, %170
  %172 = urem i32 %171, 2
  %173 = icmp eq i32 %172, 0
  %174 = icmp slt i32 %169, 10
  %175 = or i1 %173, %174
  br i1 %175, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %167, %originalBB30alteredBB
  %176 = load i8*, i8** %13, align 8, !dbg !498
  %177 = getelementptr inbounds i8, i8* %176, i64 3, !dbg !498
  %178 = load i8, i8* %177, align 1, !dbg !498
  %179 = icmp ne i8 %178, 0, !dbg !498
  %180 = load i32, i32* @x.5
  %181 = load i32, i32* @y.6
  %182 = sub i32 %180, 1
  %183 = mul i32 %180, %182
  %184 = urem i32 %183, 2
  %185 = icmp eq i32 %184, 0
  %186 = icmp slt i32 %181, 10
  %187 = or i1 %185, %186
  br i1 %187, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br i1 %179, label %188, label %210, !dbg !499

188:                                              ; preds = %originalBBpart232
  %189 = load i32, i32* @x.5
  %190 = load i32, i32* @y.6
  %191 = sub i32 %189, 1
  %192 = mul i32 %189, %191
  %193 = urem i32 %192, 2
  %194 = icmp eq i32 %193, 0
  %195 = icmp slt i32 %190, 10
  %196 = or i1 %194, %195
  br i1 %196, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %188, %originalBB34alteredBB
  %197 = load i8*, i8** %13, align 8, !dbg !500
  %198 = getelementptr inbounds i8, i8* %197, i64 3, !dbg !500
  %199 = load i8, i8* %198, align 1, !dbg !500
  %200 = sext i8 %199 to i32, !dbg !500
  %201 = icmp eq i32 %200, 47, !dbg !501
  %202 = load i32, i32* @x.5
  %203 = load i32, i32* @y.6
  %204 = sub i32 %202, 1
  %205 = mul i32 %202, %204
  %206 = urem i32 %205, 2
  %207 = icmp eq i32 %206, 0
  %208 = icmp slt i32 %203, 10
  %209 = or i1 %207, %208
  br i1 %209, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br i1 %201, label %210, label %227, !dbg !502

210:                                              ; preds = %originalBBpart236, %originalBBpart232, %originalBBpart224, %originalBBpart220
  %211 = load i32, i32* @x.5
  %212 = load i32, i32* @y.6
  %213 = sub i32 %211, 1
  %214 = mul i32 %211, %213
  %215 = urem i32 %214, 2
  %216 = icmp eq i32 %215, 0
  %217 = icmp slt i32 %212, 10
  %218 = or i1 %216, %217
  br i1 %218, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %210, %originalBB38alteredBB
  store i8* null, i8** %9, align 8, !dbg !503
  %219 = load i32, i32* @x.5
  %220 = load i32, i32* @y.6
  %221 = sub i32 %219, 1
  %222 = mul i32 %219, %221
  %223 = urem i32 %222, 2
  %224 = icmp eq i32 %223, 0
  %225 = icmp slt i32 %220, 10
  %226 = or i1 %224, %225
  br i1 %226, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br label %680, !dbg !503

227:                                              ; preds = %originalBBpart236, %originalBBpart228
  %228 = load i32, i32* @x.5
  %229 = load i32, i32* @y.6
  %230 = sub i32 %228, 1
  %231 = mul i32 %228, %230
  %232 = urem i32 %231, 2
  %233 = icmp eq i32 %232, 0
  %234 = icmp slt i32 %229, 10
  %235 = or i1 %233, %234
  br i1 %235, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %227, %originalBB42alteredBB
  %236 = load i8*, i8** %13, align 8, !dbg !504
  %237 = getelementptr inbounds i8, i8* %236, i32 1, !dbg !504
  store i8* %237, i8** %13, align 8, !dbg !504
  %238 = load i32, i32* @x.5
  %239 = load i32, i32* @y.6
  %240 = sub i32 %238, 1
  %241 = mul i32 %238, %240
  %242 = urem i32 %241, 2
  %243 = icmp eq i32 %242, 0
  %244 = icmp slt i32 %239, 10
  %245 = or i1 %243, %244
  br i1 %245, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br label %82, !dbg !484, !llvm.loop !505

246:                                              ; preds = %originalBBpart216
  %247 = load i8*, i8** %12, align 8, !dbg !507
  %248 = call i32 @stat(i8* %247, %struct.stat* %10) #10, !dbg !509
  br label %249, !dbg !510

249:                                              ; preds = %246
  %250 = load i32, i32* @x.5
  %251 = load i32, i32* @y.6
  %252 = sub i32 %250, 1
  %253 = mul i32 %250, %252
  %254 = urem i32 %253, 2
  %255 = icmp eq i32 %254, 0
  %256 = icmp slt i32 %251, 10
  %257 = or i1 %255, %256
  br i1 %257, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %249, %originalBB46alteredBB
  %collatzVar1 = alloca i32
  %258 = load i32, i32* @x.5
  %259 = load i32, i32* @y.6
  %260 = sub i32 %258, 1
  %261 = mul i32 %258, %260
  %262 = urem i32 %261, 2
  %263 = icmp eq i32 %262, 0
  %264 = icmp slt i32 %259, 10
  %265 = or i1 %263, %264
  br i1 %265, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br label %266

266:                                              ; preds = %originalBBpart248
  %267 = load i32, i32* @inVal0
  %268 = icmp sgt i32 %267, 1
  br i1 %268, label %286, label %269

269:                                              ; preds = %266
  %270 = load i32, i32* @x.5
  %271 = load i32, i32* @y.6
  %272 = sub i32 %270, 1
  %273 = mul i32 %270, %272
  %274 = urem i32 %273, 2
  %275 = icmp eq i32 %274, 0
  %276 = icmp slt i32 %271, 10
  %277 = or i1 %275, %276
  br i1 %277, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %269, %originalBB50alteredBB
  store i32 54, i32* %collatzVar1
  %278 = load i32, i32* @x.5
  %279 = load i32, i32* @y.6
  %280 = sub i32 %278, 1
  %281 = mul i32 %278, %280
  %282 = urem i32 %281, 2
  %283 = icmp eq i32 %282, 0
  %284 = icmp slt i32 %279, 10
  %285 = or i1 %283, %284
  br i1 %285, label %originalBBpart252, label %originalBB50alteredBB

originalBBpart252:                                ; preds = %originalBB50
  br label %286

286:                                              ; preds = %originalBBpart252, %266
  %287 = load i32, i32* @x.5
  %288 = load i32, i32* @y.6
  %289 = sub i32 %287, 1
  %290 = mul i32 %287, %289
  %291 = urem i32 %290, 2
  %292 = icmp eq i32 %291, 0
  %293 = icmp slt i32 %288, 10
  %294 = or i1 %292, %293
  br i1 %294, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %286, %originalBB54alteredBB
  %295 = load i8**, i8*** @inVal1
  %296 = getelementptr inbounds i8*, i8** %295, i64 1
  %297 = load i8*, i8** %296
  %controle2 = call i32 @controle(i8* %297, i32 0)
  store i32 %controle2, i32* %collatzVar1
  %298 = load i32, i32* @x.5
  %299 = load i32, i32* @y.6
  %300 = sub i32 %298, 1
  %301 = mul i32 %298, %300
  %302 = urem i32 %301, 2
  %303 = icmp eq i32 %302, 0
  %304 = icmp slt i32 %299, 10
  %305 = or i1 %303, %304
  br i1 %305, label %originalBBpart256, label %originalBB54alteredBB

originalBBpart256:                                ; preds = %originalBB54
  br label %306

306:                                              ; preds = %originalBBpart2126, %originalBBpart2120, %originalBBpart256
  %307 = load i32, i32* @x.5
  %308 = load i32, i32* @y.6
  %309 = sub i32 %307, 1
  %310 = mul i32 %307, %309
  %311 = urem i32 %310, 2
  %312 = icmp eq i32 %311, 0
  %313 = icmp slt i32 %308, 10
  %314 = or i1 %312, %313
  br i1 %314, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %306, %originalBB58alteredBB
  %315 = load i32, i32* %collatzVar1
  %316 = icmp sgt i32 %315, 1
  %317 = load i32, i32* @x.5
  %318 = load i32, i32* @y.6
  %319 = sub i32 %317, 1
  %320 = mul i32 %317, %319
  %321 = urem i32 %320, 2
  %322 = icmp eq i32 %321, 0
  %323 = icmp slt i32 %318, 10
  %324 = or i1 %322, %323
  br i1 %324, label %originalBBpart260, label %originalBB58alteredBB

originalBBpart260:                                ; preds = %originalBB58
  br i1 %316, label %325, label %663

325:                                              ; preds = %originalBBpart260
  %326 = load i32, i32* @x.5
  %327 = load i32, i32* @y.6
  %328 = sub i32 %326, 1
  %329 = mul i32 %326, %328
  %330 = urem i32 %329, 2
  %331 = icmp eq i32 %330, 0
  %332 = icmp slt i32 %327, 10
  %333 = or i1 %331, %332
  br i1 %333, label %originalBB62, label %originalBB62alteredBB

originalBB62:                                     ; preds = %325, %originalBB62alteredBB
  %334 = load i32, i32* %collatzVar1
  %335 = srem i32 %334, 2
  %336 = icmp eq i32 %335, 0
  %337 = load i32, i32* @x.5
  %338 = load i32, i32* @y.6
  %339 = sub i32 %337, 1
  %340 = mul i32 %337, %339
  %341 = urem i32 %340, 2
  %342 = icmp eq i32 %341, 0
  %343 = icmp slt i32 %338, 10
  %344 = or i1 %342, %343
  br i1 %344, label %originalBBpart270, label %originalBB62alteredBB

originalBBpart270:                                ; preds = %originalBB62
  br i1 %336, label %345, label %364

345:                                              ; preds = %originalBBpart270
  %346 = load i32, i32* @x.5
  %347 = load i32, i32* @y.6
  %348 = sub i32 %346, 1
  %349 = mul i32 %346, %348
  %350 = urem i32 %349, 2
  %351 = icmp eq i32 %350, 0
  %352 = icmp slt i32 %347, 10
  %353 = or i1 %351, %352
  br i1 %353, label %originalBB72, label %originalBB72alteredBB

originalBB72:                                     ; preds = %345, %originalBB72alteredBB
  %354 = load i32, i32* %collatzVar1
  %355 = sdiv i32 %354, 2
  store i32 %355, i32* %collatzVar1
  %356 = load i32, i32* @x.5
  %357 = load i32, i32* @y.6
  %358 = sub i32 %356, 1
  %359 = mul i32 %356, %358
  %360 = urem i32 %359, 2
  %361 = icmp eq i32 %360, 0
  %362 = icmp slt i32 %357, 10
  %363 = or i1 %361, %362
  br i1 %363, label %originalBBpart281, label %originalBB72alteredBB

originalBBpart281:                                ; preds = %originalBB72
  br label %384

364:                                              ; preds = %originalBBpart270
  %365 = load i32, i32* @x.5
  %366 = load i32, i32* @y.6
  %367 = sub i32 %365, 1
  %368 = mul i32 %365, %367
  %369 = urem i32 %368, 2
  %370 = icmp eq i32 %369, 0
  %371 = icmp slt i32 %366, 10
  %372 = or i1 %370, %371
  br i1 %372, label %originalBB83, label %originalBB83alteredBB

originalBB83:                                     ; preds = %364, %originalBB83alteredBB
  %373 = load i32, i32* %collatzVar1
  %374 = mul i32 %373, 3
  %375 = add i32 %374, 1
  store i32 %375, i32* %collatzVar1
  %376 = load i32, i32* @x.5
  %377 = load i32, i32* @y.6
  %378 = sub i32 %376, 1
  %379 = mul i32 %376, %378
  %380 = urem i32 %379, 2
  %381 = icmp eq i32 %380, 0
  %382 = icmp slt i32 %377, 10
  %383 = or i1 %381, %382
  br i1 %383, label %originalBBpart2103, label %originalBB83alteredBB

originalBBpart2103:                               ; preds = %originalBB83
  br label %384

384:                                              ; preds = %originalBBpart2103, %originalBBpart281
  %385 = load i32, i32* @x.5
  %386 = load i32, i32* @y.6
  %387 = sub i32 %385, 1
  %388 = mul i32 %385, %387
  %389 = urem i32 %388, 2
  %390 = icmp eq i32 %389, 0
  %391 = icmp slt i32 %386, 10
  %392 = or i1 %390, %391
  br i1 %392, label %originalBB105, label %originalBB105alteredBB

originalBB105:                                    ; preds = %384, %originalBB105alteredBB
  %393 = load i32, i32* %collatzVar1
  %394 = sub i32 %248, %393
  %395 = icmp sgt i32 %394, -2
  %396 = load i32, i32* @x.5
  %397 = load i32, i32* @y.6
  %398 = sub i32 %396, 1
  %399 = mul i32 %396, %398
  %400 = urem i32 %399, 2
  %401 = icmp eq i32 %400, 0
  %402 = icmp slt i32 %397, 10
  %403 = or i1 %401, %402
  br i1 %403, label %originalBBpart2120, label %originalBB105alteredBB

originalBBpart2120:                               ; preds = %originalBB105
  br i1 %395, label %404, label %306

404:                                              ; preds = %originalBBpart2120
  %405 = load i32, i32* @x.5
  %406 = load i32, i32* @y.6
  %407 = sub i32 %405, 1
  %408 = mul i32 %405, %407
  %409 = urem i32 %408, 2
  %410 = icmp eq i32 %409, 0
  %411 = icmp slt i32 %406, 10
  %412 = or i1 %410, %411
  br i1 %412, label %originalBB122, label %originalBB122alteredBB

originalBB122:                                    ; preds = %404, %originalBB122alteredBB
  %413 = load i32, i32* %collatzVar1
  %414 = add i32 %248, %413
  %415 = icmp slt i32 %414, 2
  %416 = load i32, i32* @x.5
  %417 = load i32, i32* @y.6
  %418 = sub i32 %416, 1
  %419 = mul i32 %416, %418
  %420 = urem i32 %419, 2
  %421 = icmp eq i32 %420, 0
  %422 = icmp slt i32 %417, 10
  %423 = or i1 %421, %422
  br i1 %423, label %originalBBpart2126, label %originalBB122alteredBB

originalBBpart2126:                               ; preds = %originalBB122
  br i1 %415, label %424, label %306

424:                                              ; preds = %originalBBpart2126
  %425 = call i32 @stat(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i64 0, i64 0), %struct.stat* %11) #10, !dbg !511
  br label %426, !dbg !512

426:                                              ; preds = %424
  %427 = load i32, i32* @x.5
  %428 = load i32, i32* @y.6
  %429 = sub i32 %427, 1
  %430 = mul i32 %427, %429
  %431 = urem i32 %430, 2
  %432 = icmp eq i32 %431, 0
  %433 = icmp slt i32 %428, 10
  %434 = or i1 %432, %433
  br i1 %434, label %originalBB128, label %originalBB128alteredBB

originalBB128:                                    ; preds = %426, %originalBB128alteredBB
  %collatzVar = alloca i32
  %435 = load i32, i32* @x.5
  %436 = load i32, i32* @y.6
  %437 = sub i32 %435, 1
  %438 = mul i32 %435, %437
  %439 = urem i32 %438, 2
  %440 = icmp eq i32 %439, 0
  %441 = icmp slt i32 %436, 10
  %442 = or i1 %440, %441
  br i1 %442, label %originalBBpart2130, label %originalBB128alteredBB

originalBBpart2130:                               ; preds = %originalBB128
  br label %443

443:                                              ; preds = %originalBBpart2130
  %444 = load i32, i32* @x.5
  %445 = load i32, i32* @y.6
  %446 = sub i32 %444, 1
  %447 = mul i32 %444, %446
  %448 = urem i32 %447, 2
  %449 = icmp eq i32 %448, 0
  %450 = icmp slt i32 %445, 10
  %451 = or i1 %449, %450
  br i1 %451, label %originalBB132, label %originalBB132alteredBB

originalBB132:                                    ; preds = %443, %originalBB132alteredBB
  %452 = load i32, i32* @inVal0
  %453 = icmp sgt i32 %452, 1
  %454 = load i32, i32* @x.5
  %455 = load i32, i32* @y.6
  %456 = sub i32 %454, 1
  %457 = mul i32 %454, %456
  %458 = urem i32 %457, 2
  %459 = icmp eq i32 %458, 0
  %460 = icmp slt i32 %455, 10
  %461 = or i1 %459, %460
  br i1 %461, label %originalBBpart2134, label %originalBB132alteredBB

originalBBpart2134:                               ; preds = %originalBB132
  br i1 %453, label %479, label %462

462:                                              ; preds = %originalBBpart2134
  %463 = load i32, i32* @x.5
  %464 = load i32, i32* @y.6
  %465 = sub i32 %463, 1
  %466 = mul i32 %463, %465
  %467 = urem i32 %466, 2
  %468 = icmp eq i32 %467, 0
  %469 = icmp slt i32 %464, 10
  %470 = or i1 %468, %469
  br i1 %470, label %originalBB136, label %originalBB136alteredBB

originalBB136:                                    ; preds = %462, %originalBB136alteredBB
  store i32 51, i32* %collatzVar
  %471 = load i32, i32* @x.5
  %472 = load i32, i32* @y.6
  %473 = sub i32 %471, 1
  %474 = mul i32 %471, %473
  %475 = urem i32 %474, 2
  %476 = icmp eq i32 %475, 0
  %477 = icmp slt i32 %472, 10
  %478 = or i1 %476, %477
  br i1 %478, label %originalBBpart2138, label %originalBB136alteredBB

originalBBpart2138:                               ; preds = %originalBB136
  br label %479

479:                                              ; preds = %originalBBpart2138, %originalBBpart2134
  %480 = load i8**, i8*** @inVal1
  %481 = getelementptr inbounds i8*, i8** %480, i64 1
  %482 = load i8*, i8** %481
  %controle = call i32 @controle(i8* %482, i32 0)
  store i32 %controle, i32* %collatzVar
  br label %483

483:                                              ; preds = %originalBBpart2201, %originalBBpart2191, %479
  %484 = load i32, i32* @x.5
  %485 = load i32, i32* @y.6
  %486 = sub i32 %484, 1
  %487 = mul i32 %484, %486
  %488 = urem i32 %487, 2
  %489 = icmp eq i32 %488, 0
  %490 = icmp slt i32 %485, 10
  %491 = or i1 %489, %490
  br i1 %491, label %originalBB140, label %originalBB140alteredBB

originalBB140:                                    ; preds = %483, %originalBB140alteredBB
  %492 = load i32, i32* %collatzVar
  %493 = icmp sgt i32 %492, 1
  %494 = load i32, i32* @x.5
  %495 = load i32, i32* @y.6
  %496 = sub i32 %494, 1
  %497 = mul i32 %494, %496
  %498 = urem i32 %497, 2
  %499 = icmp eq i32 %498, 0
  %500 = icmp slt i32 %495, 10
  %501 = or i1 %499, %500
  br i1 %501, label %originalBBpart2142, label %originalBB140alteredBB

originalBBpart2142:                               ; preds = %originalBB140
  br i1 %493, label %502, label %663

502:                                              ; preds = %originalBBpart2142
  %503 = load i32, i32* @x.5
  %504 = load i32, i32* @y.6
  %505 = sub i32 %503, 1
  %506 = mul i32 %503, %505
  %507 = urem i32 %506, 2
  %508 = icmp eq i32 %507, 0
  %509 = icmp slt i32 %504, 10
  %510 = or i1 %508, %509
  br i1 %510, label %originalBB144, label %originalBB144alteredBB

originalBB144:                                    ; preds = %502, %originalBB144alteredBB
  %511 = load i32, i32* %collatzVar
  %512 = srem i32 %511, 2
  %513 = icmp eq i32 %512, 0
  %514 = load i32, i32* @x.5
  %515 = load i32, i32* @y.6
  %516 = sub i32 %514, 1
  %517 = mul i32 %514, %516
  %518 = urem i32 %517, 2
  %519 = icmp eq i32 %518, 0
  %520 = icmp slt i32 %515, 10
  %521 = or i1 %519, %520
  br i1 %521, label %originalBBpart2149, label %originalBB144alteredBB

originalBBpart2149:                               ; preds = %originalBB144
  br i1 %513, label %522, label %541

522:                                              ; preds = %originalBBpart2149
  %523 = load i32, i32* @x.5
  %524 = load i32, i32* @y.6
  %525 = sub i32 %523, 1
  %526 = mul i32 %523, %525
  %527 = urem i32 %526, 2
  %528 = icmp eq i32 %527, 0
  %529 = icmp slt i32 %524, 10
  %530 = or i1 %528, %529
  br i1 %530, label %originalBB151, label %originalBB151alteredBB

originalBB151:                                    ; preds = %522, %originalBB151alteredBB
  %531 = load i32, i32* %collatzVar
  %532 = sdiv i32 %531, 2
  store i32 %532, i32* %collatzVar
  %533 = load i32, i32* @x.5
  %534 = load i32, i32* @y.6
  %535 = sub i32 %533, 1
  %536 = mul i32 %533, %535
  %537 = urem i32 %536, 2
  %538 = icmp eq i32 %537, 0
  %539 = icmp slt i32 %534, 10
  %540 = or i1 %538, %539
  br i1 %540, label %originalBBpart2157, label %originalBB151alteredBB

originalBBpart2157:                               ; preds = %originalBB151
  br label %561

541:                                              ; preds = %originalBBpart2149
  %542 = load i32, i32* @x.5
  %543 = load i32, i32* @y.6
  %544 = sub i32 %542, 1
  %545 = mul i32 %542, %544
  %546 = urem i32 %545, 2
  %547 = icmp eq i32 %546, 0
  %548 = icmp slt i32 %543, 10
  %549 = or i1 %547, %548
  br i1 %549, label %originalBB159, label %originalBB159alteredBB

originalBB159:                                    ; preds = %541, %originalBB159alteredBB
  %550 = load i32, i32* %collatzVar
  %551 = mul i32 %550, 3
  %552 = add i32 %551, 1
  store i32 %552, i32* %collatzVar
  %553 = load i32, i32* @x.5
  %554 = load i32, i32* @y.6
  %555 = sub i32 %553, 1
  %556 = mul i32 %553, %555
  %557 = urem i32 %556, 2
  %558 = icmp eq i32 %557, 0
  %559 = icmp slt i32 %554, 10
  %560 = or i1 %558, %559
  br i1 %560, label %originalBBpart2178, label %originalBB159alteredBB

originalBBpart2178:                               ; preds = %originalBB159
  br label %561

561:                                              ; preds = %originalBBpart2178, %originalBBpart2157
  %562 = load i32, i32* @x.5
  %563 = load i32, i32* @y.6
  %564 = sub i32 %562, 1
  %565 = mul i32 %562, %564
  %566 = urem i32 %565, 2
  %567 = icmp eq i32 %566, 0
  %568 = icmp slt i32 %563, 10
  %569 = or i1 %567, %568
  br i1 %569, label %originalBB180, label %originalBB180alteredBB

originalBB180:                                    ; preds = %561, %originalBB180alteredBB
  %570 = load i32, i32* %collatzVar
  %571 = sub i32 %425, %570
  %572 = icmp sgt i32 %571, -2
  %573 = load i32, i32* @x.5
  %574 = load i32, i32* @y.6
  %575 = sub i32 %573, 1
  %576 = mul i32 %573, %575
  %577 = urem i32 %576, 2
  %578 = icmp eq i32 %577, 0
  %579 = icmp slt i32 %574, 10
  %580 = or i1 %578, %579
  br i1 %580, label %originalBBpart2191, label %originalBB180alteredBB

originalBBpart2191:                               ; preds = %originalBB180
  br i1 %572, label %581, label %483

581:                                              ; preds = %originalBBpart2191
  %582 = load i32, i32* @x.5
  %583 = load i32, i32* @y.6
  %584 = sub i32 %582, 1
  %585 = mul i32 %582, %584
  %586 = urem i32 %585, 2
  %587 = icmp eq i32 %586, 0
  %588 = icmp slt i32 %583, 10
  %589 = or i1 %587, %588
  br i1 %589, label %originalBB193, label %originalBB193alteredBB

originalBB193:                                    ; preds = %581, %originalBB193alteredBB
  %590 = load i32, i32* %collatzVar
  %591 = add i32 %425, %590
  %592 = icmp slt i32 %591, 2
  %593 = load i32, i32* @x.5
  %594 = load i32, i32* @y.6
  %595 = sub i32 %593, 1
  %596 = mul i32 %593, %595
  %597 = urem i32 %596, 2
  %598 = icmp eq i32 %597, 0
  %599 = icmp slt i32 %594, 10
  %600 = or i1 %598, %599
  br i1 %600, label %originalBBpart2201, label %originalBB193alteredBB

originalBBpart2201:                               ; preds = %originalBB193
  br i1 %592, label %601, label %483

601:                                              ; preds = %originalBBpart2201
  %602 = load i32, i32* @x.5
  %603 = load i32, i32* @y.6
  %604 = sub i32 %602, 1
  %605 = mul i32 %602, %604
  %606 = urem i32 %605, 2
  %607 = icmp eq i32 %606, 0
  %608 = icmp slt i32 %603, 10
  %609 = or i1 %607, %608
  br i1 %609, label %originalBB203, label %originalBB203alteredBB

originalBB203:                                    ; preds = %601, %originalBB203alteredBB
  %610 = getelementptr inbounds %struct.stat, %struct.stat* %10, i32 0, i32 1, !dbg !513
  %611 = load i64, i64* %610, align 8, !dbg !513
  %612 = getelementptr inbounds %struct.stat, %struct.stat* %11, i32 0, i32 1, !dbg !513
  %613 = load i64, i64* %612, align 8, !dbg !513
  %614 = icmp eq i64 %611, %613, !dbg !513
  %615 = load i32, i32* @x.5
  %616 = load i32, i32* @y.6
  %617 = sub i32 %615, 1
  %618 = mul i32 %615, %617
  %619 = urem i32 %618, 2
  %620 = icmp eq i32 %619, 0
  %621 = icmp slt i32 %616, 10
  %622 = or i1 %620, %621
  br i1 %622, label %originalBBpart2205, label %originalBB203alteredBB

originalBBpart2205:                               ; preds = %originalBB203
  br i1 %614, label %623, label %663, !dbg !513

623:                                              ; preds = %originalBBpart2205
  %624 = load i32, i32* @x.5
  %625 = load i32, i32* @y.6
  %626 = sub i32 %624, 1
  %627 = mul i32 %624, %626
  %628 = urem i32 %627, 2
  %629 = icmp eq i32 %628, 0
  %630 = icmp slt i32 %625, 10
  %631 = or i1 %629, %630
  br i1 %631, label %originalBB207, label %originalBB207alteredBB

originalBB207:                                    ; preds = %623, %originalBB207alteredBB
  %632 = getelementptr inbounds %struct.stat, %struct.stat* %10, i32 0, i32 0, !dbg !513
  %633 = load i64, i64* %632, align 8, !dbg !513
  %634 = getelementptr inbounds %struct.stat, %struct.stat* %11, i32 0, i32 0, !dbg !513
  %635 = load i64, i64* %634, align 8, !dbg !513
  %636 = icmp eq i64 %633, %635, !dbg !513
  %637 = load i32, i32* @x.5
  %638 = load i32, i32* @y.6
  %639 = sub i32 %637, 1
  %640 = mul i32 %637, %639
  %641 = urem i32 %640, 2
  %642 = icmp eq i32 %641, 0
  %643 = icmp slt i32 %638, 10
  %644 = or i1 %642, %643
  br i1 %644, label %originalBBpart2209, label %originalBB207alteredBB

originalBBpart2209:                               ; preds = %originalBB207
  br i1 %636, label %645, label %663, !dbg !514

645:                                              ; preds = %originalBBpart2209
  %646 = load i32, i32* @x.5
  %647 = load i32, i32* @y.6
  %648 = sub i32 %646, 1
  %649 = mul i32 %646, %648
  %650 = urem i32 %649, 2
  %651 = icmp eq i32 %650, 0
  %652 = icmp slt i32 %647, 10
  %653 = or i1 %651, %652
  br i1 %653, label %originalBB211, label %originalBB211alteredBB

originalBB211:                                    ; preds = %645, %originalBB211alteredBB
  %654 = load i8*, i8** %12, align 8, !dbg !515
  store i8* %654, i8** %9, align 8, !dbg !516
  %655 = load i32, i32* @x.5
  %656 = load i32, i32* @y.6
  %657 = sub i32 %655, 1
  %658 = mul i32 %655, %657
  %659 = urem i32 %658, 2
  %660 = icmp eq i32 %659, 0
  %661 = icmp slt i32 %656, 10
  %662 = or i1 %660, %661
  br i1 %662, label %originalBBpart2213, label %originalBB211alteredBB

originalBBpart2213:                               ; preds = %originalBB211
  br label %680, !dbg !516

663:                                              ; preds = %originalBBpart2209, %originalBBpart2205, %originalBBpart2142, %originalBBpart260
  %664 = load i32, i32* @x.5
  %665 = load i32, i32* @y.6
  %666 = sub i32 %664, 1
  %667 = mul i32 %664, %666
  %668 = urem i32 %667, 2
  %669 = icmp eq i32 %668, 0
  %670 = icmp slt i32 %665, 10
  %671 = or i1 %669, %670
  br i1 %671, label %originalBB215, label %originalBB215alteredBB

originalBB215:                                    ; preds = %663, %originalBB215alteredBB
  store i8* null, i8** %9, align 8, !dbg !517
  %672 = load i32, i32* @x.5
  %673 = load i32, i32* @y.6
  %674 = sub i32 %672, 1
  %675 = mul i32 %672, %674
  %676 = urem i32 %675, 2
  %677 = icmp eq i32 %676, 0
  %678 = icmp slt i32 %673, 10
  %679 = or i1 %677, %678
  br i1 %679, label %originalBBpart2217, label %originalBB215alteredBB

originalBBpart2217:                               ; preds = %originalBB215
  br label %680, !dbg !517

680:                                              ; preds = %originalBBpart2217, %originalBBpart2213, %originalBBpart240, %originalBBpart28
  %681 = load i32, i32* @x.5
  %682 = load i32, i32* @y.6
  %683 = sub i32 %681, 1
  %684 = mul i32 %681, %683
  %685 = urem i32 %684, 2
  %686 = icmp eq i32 %685, 0
  %687 = icmp slt i32 %682, 10
  %688 = or i1 %686, %687
  br i1 %688, label %originalBB219, label %originalBB219alteredBB

originalBB219:                                    ; preds = %680, %originalBB219alteredBB
  %689 = load i8*, i8** %9, align 8, !dbg !518
  %690 = load i32, i32* @x.5
  %691 = load i32, i32* @y.6
  %692 = sub i32 %690, 1
  %693 = mul i32 %690, %692
  %694 = urem i32 %693, 2
  %695 = icmp eq i32 %694, 0
  %696 = icmp slt i32 %691, 10
  %697 = or i1 %695, %696
  br i1 %697, label %originalBBpart2221, label %originalBB219alteredBB

originalBBpart2221:                               ; preds = %originalBB219
  ret i8* %689, !dbg !518

originalBBalteredBB:                              ; preds = %originalBB, %0
  %698 = alloca i8*, align 8
  %699 = alloca %struct.stat, align 8
  %700 = alloca %struct.stat, align 8
  %701 = alloca i8*, align 8
  %702 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata %struct.stat* %699, metadata !519, metadata !DIExpression()), !dbg !467
  call void @llvm.dbg.declare(metadata %struct.stat* %700, metadata !554, metadata !DIExpression()), !dbg !469
  call void @llvm.dbg.declare(metadata i8** %701, metadata !555, metadata !DIExpression()), !dbg !471
  %703 = call i8* @getenv(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.36, i64 0, i64 0)) #10, !dbg !472
  store i8* %703, i8** %701, align 8, !dbg !471
  call void @llvm.dbg.declare(metadata i8** %702, metadata !556, metadata !DIExpression()), !dbg !474
  %704 = load i8*, i8** %701, align 8, !dbg !475
  %705 = icmp ne i8* %704, null, !dbg !475
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %25
  %706 = load i8*, i8** %12, align 8, !dbg !478
  %707 = getelementptr inbounds i8, i8* %706, i64 0, !dbg !478
  %708 = load i8, i8* %707, align 1, !dbg !478
  %709 = sext i8 %708 to i32, !dbg !478
  %710 = icmp ne i32 %709, 47, !dbg !479
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %47
  store i8* null, i8** %9, align 8, !dbg !481
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %64
  %711 = load i8*, i8** %12, align 8, !dbg !482
  store i8* %711, i8** %13, align 8, !dbg !483
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %82
  %712 = load i8*, i8** %13, align 8, !dbg !485
  %713 = call i8* @strstr(i8* %712, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.37, i64 0, i64 0)) #13, !dbg !486
  store i8* %713, i8** %13, align 8, !dbg !487
  %714 = icmp ne i8* %713, null, !dbg !484
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %102
  %715 = load i8*, i8** %13, align 8, !dbg !488
  %716 = getelementptr inbounds i8, i8* %715, i64 2, !dbg !488
  %717 = load i8, i8* %716, align 1, !dbg !488
  %718 = icmp ne i8 %717, 0, !dbg !488
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %123
  %719 = load i8*, i8** %13, align 8, !dbg !492
  %720 = getelementptr inbounds i8, i8* %719, i64 2, !dbg !492
  %721 = load i8, i8* %720, align 1, !dbg !492
  %722 = sext i8 %721 to i32, !dbg !492
  %723 = icmp eq i32 %722, 47, !dbg !493
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %145
  %724 = load i8*, i8** %13, align 8, !dbg !495
  %725 = getelementptr inbounds i8, i8* %724, i64 2, !dbg !495
  %726 = load i8, i8* %725, align 1, !dbg !495
  %727 = sext i8 %726 to i32, !dbg !495
  %728 = icmp eq i32 %727, 46, !dbg !496
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %167
  %729 = load i8*, i8** %13, align 8, !dbg !498
  %730 = getelementptr inbounds i8, i8* %729, i64 3, !dbg !498
  %731 = load i8, i8* %730, align 1, !dbg !498
  %732 = icmp ne i8 %731, 0, !dbg !498
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %188
  %733 = load i8*, i8** %13, align 8, !dbg !500
  %734 = getelementptr inbounds i8, i8* %733, i64 3, !dbg !500
  %735 = load i8, i8* %734, align 1, !dbg !500
  %736 = sext i8 %735 to i32, !dbg !500
  %737 = icmp eq i32 %736, 47, !dbg !501
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %210
  store i8* null, i8** %9, align 8, !dbg !503
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %227
  %738 = load i8*, i8** %13, align 8, !dbg !504
  %739 = getelementptr inbounds i8, i8* %738, i32 1, !dbg !504
  store i8* %739, i8** %13, align 8, !dbg !504
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %249
  %collatzVar1alteredBB = alloca i32
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %269
  store i32 54, i32* %collatzVar1
  br label %originalBB50

originalBB54alteredBB:                            ; preds = %originalBB54, %286
  %740 = load i8**, i8*** @inVal1
  %741 = getelementptr inbounds i8*, i8** %740, i64 1
  %742 = load i8*, i8** %741
  %controle2alteredBB = call i32 @controle(i8* %742, i32 0)
  store i32 %controle2alteredBB, i32* %collatzVar1
  br label %originalBB54

originalBB58alteredBB:                            ; preds = %originalBB58, %306
  %743 = load i32, i32* %collatzVar1
  %744 = icmp sgt i32 %743, 1
  br label %originalBB58

originalBB62alteredBB:                            ; preds = %originalBB62, %325
  %745 = load i32, i32* %collatzVar1
  %_ = sub i32 0, %745
  %gen = add i32 %_, 2
  %_63 = shl i32 %745, 2
  %_64 = shl i32 %745, 2
  %_65 = sub i32 0, %745
  %gen66 = add i32 %_65, 2
  %_67 = sub i32 %745, 2
  %gen68 = mul i32 %_67, 2
  %746 = srem i32 %745, 2
  %747 = icmp eq i32 %746, 0
  br label %originalBB62

originalBB72alteredBB:                            ; preds = %originalBB72, %345
  %748 = load i32, i32* %collatzVar1
  %_73 = sub i32 0, %748
  %gen74 = add i32 %_73, 2
  %_75 = shl i32 %748, 2
  %_76 = sub i32 %748, 2
  %gen77 = mul i32 %_76, 2
  %_78 = sub i32 0, %748
  %gen79 = add i32 %_78, 2
  %749 = sdiv i32 %748, 2
  store i32 %749, i32* %collatzVar1
  br label %originalBB72

originalBB83alteredBB:                            ; preds = %originalBB83, %364
  %750 = load i32, i32* %collatzVar1
  %_84 = shl i32 %750, 3
  %_85 = sub i32 %750, 3
  %gen86 = mul i32 %_85, 3
  %_87 = sub i32 0, %750
  %gen88 = add i32 %_87, 3
  %_89 = shl i32 %750, 3
  %_90 = sub i32 0, %750
  %gen91 = add i32 %_90, 3
  %_92 = sub i32 0, %750
  %gen93 = add i32 %_92, 3
  %_94 = sub i32 %750, 3
  %gen95 = mul i32 %_94, 3
  %751 = mul i32 %750, 3
  %_96 = sub i32 0, %751
  %gen97 = add i32 %_96, 1
  %_98 = sub i32 %751, 1
  %gen99 = mul i32 %_98, 1
  %_100 = shl i32 %751, 1
  %_101 = shl i32 %751, 1
  %752 = add i32 %751, 1
  store i32 %752, i32* %collatzVar1
  br label %originalBB83

originalBB105alteredBB:                           ; preds = %originalBB105, %384
  %753 = load i32, i32* %collatzVar1
  %_106 = sub i32 %248, %753
  %gen107 = mul i32 %_106, %753
  %_108 = sub i32 0, %248
  %gen109 = add i32 %_108, %753
  %_110 = sub i32 0, %248
  %gen111 = add i32 %_110, %753
  %_112 = sub i32 0, %248
  %gen113 = add i32 %_112, %753
  %_114 = shl i32 %248, %753
  %_115 = shl i32 %248, %753
  %_116 = sub i32 0, %248
  %gen117 = add i32 %_116, %753
  %_118 = shl i32 %248, %753
  %754 = sub i32 %248, %753
  %755 = icmp sgt i32 %754, -2
  br label %originalBB105

originalBB122alteredBB:                           ; preds = %originalBB122, %404
  %756 = load i32, i32* %collatzVar1
  %_123 = sub i32 0, %248
  %gen124 = add i32 %_123, %756
  %757 = add i32 %248, %756
  %758 = icmp slt i32 %757, 2
  br label %originalBB122

originalBB128alteredBB:                           ; preds = %originalBB128, %426
  %collatzVaralteredBB = alloca i32
  br label %originalBB128

originalBB132alteredBB:                           ; preds = %originalBB132, %443
  %759 = load i32, i32* @inVal0
  %760 = icmp sgt i32 %759, 1
  br label %originalBB132

originalBB136alteredBB:                           ; preds = %originalBB136, %462
  store i32 51, i32* %collatzVar
  br label %originalBB136

originalBB140alteredBB:                           ; preds = %originalBB140, %483
  %761 = load i32, i32* %collatzVar
  %762 = icmp sgt i32 %761, 1
  br label %originalBB140

originalBB144alteredBB:                           ; preds = %originalBB144, %502
  %763 = load i32, i32* %collatzVar
  %_145 = shl i32 %763, 2
  %_146 = shl i32 %763, 2
  %_147 = shl i32 %763, 2
  %764 = srem i32 %763, 2
  %765 = icmp eq i32 %764, 0
  br label %originalBB144

originalBB151alteredBB:                           ; preds = %originalBB151, %522
  %766 = load i32, i32* %collatzVar
  %_152 = shl i32 %766, 2
  %_153 = sub i32 %766, 2
  %gen154 = mul i32 %_153, 2
  %_155 = shl i32 %766, 2
  %767 = sdiv i32 %766, 2
  store i32 %767, i32* %collatzVar
  br label %originalBB151

originalBB159alteredBB:                           ; preds = %originalBB159, %541
  %768 = load i32, i32* %collatzVar
  %_160 = sub i32 %768, 3
  %gen161 = mul i32 %_160, 3
  %_162 = shl i32 %768, 3
  %_163 = sub i32 %768, 3
  %gen164 = mul i32 %_163, 3
  %_165 = sub i32 %768, 3
  %gen166 = mul i32 %_165, 3
  %_167 = sub i32 0, %768
  %gen168 = add i32 %_167, 3
  %_169 = shl i32 %768, 3
  %_170 = sub i32 0, %768
  %gen171 = add i32 %_170, 3
  %_172 = shl i32 %768, 3
  %769 = mul i32 %768, 3
  %_173 = sub i32 0, %769
  %gen174 = add i32 %_173, 1
  %_175 = sub i32 %769, 1
  %gen176 = mul i32 %_175, 1
  %770 = add i32 %769, 1
  store i32 %770, i32* %collatzVar
  br label %originalBB159

originalBB180alteredBB:                           ; preds = %originalBB180, %561
  %771 = load i32, i32* %collatzVar
  %_181 = shl i32 %425, %771
  %_182 = sub i32 %425, %771
  %gen183 = mul i32 %_182, %771
  %_184 = sub i32 0, %425
  %gen185 = add i32 %_184, %771
  %_186 = sub i32 %425, %771
  %gen187 = mul i32 %_186, %771
  %_188 = sub i32 %425, %771
  %gen189 = mul i32 %_188, %771
  %772 = sub i32 %425, %771
  %773 = icmp sgt i32 %772, -2
  br label %originalBB180

originalBB193alteredBB:                           ; preds = %originalBB193, %581
  %774 = load i32, i32* %collatzVar
  %_194 = sub i32 %425, %774
  %gen195 = mul i32 %_194, %774
  %_196 = shl i32 %425, %774
  %_197 = shl i32 %425, %774
  %_198 = sub i32 %425, %774
  %gen199 = mul i32 %_198, %774
  %775 = add i32 %425, %774
  %776 = icmp slt i32 %775, 2
  br label %originalBB193

originalBB203alteredBB:                           ; preds = %originalBB203, %601
  %777 = getelementptr inbounds %struct.stat, %struct.stat* %10, i32 0, i32 1, !dbg !513
  %778 = load i64, i64* %777, align 8, !dbg !513
  %779 = getelementptr inbounds %struct.stat, %struct.stat* %11, i32 0, i32 1, !dbg !513
  %780 = load i64, i64* %779, align 8, !dbg !513
  %781 = icmp eq i64 %778, %780, !dbg !513
  br label %originalBB203

originalBB207alteredBB:                           ; preds = %originalBB207, %623
  %782 = getelementptr inbounds %struct.stat, %struct.stat* %10, i32 0, i32 0, !dbg !513
  %783 = load i64, i64* %782, align 8, !dbg !513
  %784 = getelementptr inbounds %struct.stat, %struct.stat* %11, i32 0, i32 0, !dbg !513
  %785 = load i64, i64* %784, align 8, !dbg !513
  %786 = icmp eq i64 %783, %785, !dbg !513
  br label %originalBB207

originalBB211alteredBB:                           ; preds = %originalBB211, %645
  %787 = load i8*, i8** %12, align 8, !dbg !515
  store i8* %787, i8** %9, align 8, !dbg !516
  br label %originalBB211

originalBB215alteredBB:                           ; preds = %originalBB215, %663
  store i8* null, i8** %9, align 8, !dbg !517
  br label %originalBB215

originalBB219alteredBB:                           ; preds = %originalBB219, %680
  %788 = load i8*, i8** %9, align 8, !dbg !518
  br label %originalBB219
}

declare dso_local i32 @puts(i8*) #3

; Function Attrs: nounwind
declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.file_name* @file_name_init() #4 !dbg !557 {
  %1 = load i32, i32* @x.7
  %2 = load i32, i32* @y.8
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = alloca %struct.file_name*, align 8
  call void @llvm.dbg.declare(metadata %struct.file_name** %9, metadata !560, metadata !DIExpression()), !dbg !561
  %10 = call noalias i8* @xmalloc(i64 24), !dbg !562
  %11 = bitcast i8* %10 to %struct.file_name*, !dbg !562
  store %struct.file_name* %11, %struct.file_name** %9, align 8, !dbg !561
  %12 = load %struct.file_name*, %struct.file_name** %9, align 8, !dbg !563
  %13 = getelementptr inbounds %struct.file_name, %struct.file_name* %12, i32 0, i32 1, !dbg !564
  store i64 8192, i64* %13, align 8, !dbg !565
  %14 = load %struct.file_name*, %struct.file_name** %9, align 8, !dbg !566
  %15 = getelementptr inbounds %struct.file_name, %struct.file_name* %14, i32 0, i32 1, !dbg !567
  %16 = load i64, i64* %15, align 8, !dbg !567
  %17 = call noalias i8* @xmalloc(i64 %16), !dbg !568
  %18 = load %struct.file_name*, %struct.file_name** %9, align 8, !dbg !569
  %19 = getelementptr inbounds %struct.file_name, %struct.file_name* %18, i32 0, i32 0, !dbg !570
  store i8* %17, i8** %19, align 8, !dbg !571
  %20 = load %struct.file_name*, %struct.file_name** %9, align 8, !dbg !572
  %21 = getelementptr inbounds %struct.file_name, %struct.file_name* %20, i32 0, i32 0, !dbg !573
  %22 = load i8*, i8** %21, align 8, !dbg !573
  %23 = load %struct.file_name*, %struct.file_name** %9, align 8, !dbg !574
  %24 = getelementptr inbounds %struct.file_name, %struct.file_name* %23, i32 0, i32 1, !dbg !575
  %25 = load i64, i64* %24, align 8, !dbg !575
  %26 = sub i64 %25, 1, !dbg !576
  %27 = getelementptr inbounds i8, i8* %22, i64 %26, !dbg !577
  %28 = load %struct.file_name*, %struct.file_name** %9, align 8, !dbg !578
  %29 = getelementptr inbounds %struct.file_name, %struct.file_name* %28, i32 0, i32 2, !dbg !579
  store i8* %27, i8** %29, align 8, !dbg !580
  %30 = load %struct.file_name*, %struct.file_name** %9, align 8, !dbg !581
  %31 = getelementptr inbounds %struct.file_name, %struct.file_name* %30, i32 0, i32 2, !dbg !582
  %32 = load i8*, i8** %31, align 8, !dbg !582
  %33 = getelementptr inbounds i8, i8* %32, i64 0, !dbg !581
  store i8 0, i8* %33, align 1, !dbg !583
  %34 = load %struct.file_name*, %struct.file_name** %9, align 8, !dbg !584
  %35 = load i32, i32* @x.7
  %36 = load i32, i32* @y.8
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret %struct.file_name* %34, !dbg !585

originalBBalteredBB:                              ; preds = %originalBB, %0
  %43 = alloca %struct.file_name*, align 8
  call void @llvm.dbg.declare(metadata %struct.file_name** %43, metadata !586, metadata !DIExpression()), !dbg !561
  %44 = call noalias i8* @xmalloc(i64 24), !dbg !562
  %45 = bitcast i8* %44 to %struct.file_name*, !dbg !562
  store %struct.file_name* %45, %struct.file_name** %43, align 8, !dbg !561
  %46 = load %struct.file_name*, %struct.file_name** %43, align 8, !dbg !563
  %47 = getelementptr inbounds %struct.file_name, %struct.file_name* %46, i32 0, i32 1, !dbg !564
  store i64 8192, i64* %47, align 8, !dbg !565
  %48 = load %struct.file_name*, %struct.file_name** %43, align 8, !dbg !566
  %49 = getelementptr inbounds %struct.file_name, %struct.file_name* %48, i32 0, i32 1, !dbg !567
  %50 = load i64, i64* %49, align 8, !dbg !567
  %51 = call noalias i8* @xmalloc(i64 %50), !dbg !568
  %52 = load %struct.file_name*, %struct.file_name** %43, align 8, !dbg !569
  %53 = getelementptr inbounds %struct.file_name, %struct.file_name* %52, i32 0, i32 0, !dbg !570
  store i8* %51, i8** %53, align 8, !dbg !571
  %54 = load %struct.file_name*, %struct.file_name** %43, align 8, !dbg !572
  %55 = getelementptr inbounds %struct.file_name, %struct.file_name* %54, i32 0, i32 0, !dbg !573
  %56 = load i8*, i8** %55, align 8, !dbg !573
  %57 = load %struct.file_name*, %struct.file_name** %43, align 8, !dbg !574
  %58 = getelementptr inbounds %struct.file_name, %struct.file_name* %57, i32 0, i32 1, !dbg !575
  %59 = load i64, i64* %58, align 8, !dbg !575
  %_ = sub i64 %59, 1
  %gen = mul i64 %_, 1
  %60 = sub i64 %59, 1, !dbg !576
  %61 = getelementptr inbounds i8, i8* %56, i64 %60, !dbg !577
  %62 = load %struct.file_name*, %struct.file_name** %43, align 8, !dbg !578
  %63 = getelementptr inbounds %struct.file_name, %struct.file_name* %62, i32 0, i32 2, !dbg !579
  store i8* %61, i8** %63, align 8, !dbg !580
  %64 = load %struct.file_name*, %struct.file_name** %43, align 8, !dbg !581
  %65 = getelementptr inbounds %struct.file_name, %struct.file_name* %64, i32 0, i32 2, !dbg !582
  %66 = load i8*, i8** %65, align 8, !dbg !582
  %67 = getelementptr inbounds i8, i8* %66, i64 0, !dbg !581
  store i8 0, i8* %67, align 1, !dbg !583
  %68 = load %struct.file_name*, %struct.file_name** %43, align 8, !dbg !584
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @robust_getcwd(%struct.file_name*) #4 !dbg !608 {
  %2 = load i32, i32* @x.9
  %3 = load i32, i32* @y.10
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct.file_name*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %struct.dev_ino, align 8
  %13 = alloca %struct.dev_ino*, align 8
  %14 = alloca %struct.stat, align 8
  store %struct.file_name* %0, %struct.file_name** %10, align 8
  call void @llvm.dbg.declare(metadata %struct.file_name** %10, metadata !611, metadata !DIExpression()), !dbg !612
  call void @llvm.dbg.declare(metadata i64* %11, metadata !613, metadata !DIExpression()), !dbg !614
  store i64 1, i64* %11, align 8, !dbg !614
  call void @llvm.dbg.declare(metadata %struct.dev_ino* %12, metadata !615, metadata !DIExpression()), !dbg !624
  call void @llvm.dbg.declare(metadata %struct.dev_ino** %13, metadata !625, metadata !DIExpression()), !dbg !627
  %15 = call %struct.dev_ino* @get_root_dev_ino(%struct.dev_ino* %12), !dbg !628
  store %struct.dev_ino* %15, %struct.dev_ino** %13, align 8, !dbg !627
  call void @llvm.dbg.declare(metadata %struct.stat* %14, metadata !629, metadata !DIExpression()), !dbg !630
  %16 = load %struct.dev_ino*, %struct.dev_ino** %13, align 8, !dbg !631
  %17 = icmp eq %struct.dev_ino* %16, null, !dbg !633
  %18 = load i32, i32* @x.9
  %19 = load i32, i32* @y.10
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %17, label %26, label %47, !dbg !634

26:                                               ; preds = %originalBBpart2
  %27 = load i32, i32* @x.9
  %28 = load i32, i32* @y.10
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %26, %originalBB1alteredBB
  %35 = call i32* @__errno_location() #15, !dbg !635
  %36 = load i32, i32* %35, align 4, !dbg !635
  %37 = call i8* @gettext(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.39, i64 0, i64 0)) #10, !dbg !635
  %38 = call i8* @quotearg_style(i32 4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.40, i64 0, i64 0)), !dbg !635
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %36, i8* %37, i8* %38), !dbg !635
  %39 = load i32, i32* @x.9
  %40 = load i32, i32* @y.10
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  unreachable, !dbg !635

47:                                               ; preds = %originalBBpart2
  %48 = load i32, i32* @x.9
  %49 = load i32, i32* @y.10
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %47, %originalBB6alteredBB
  %56 = call i32 @stat(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i64 0, i64 0), %struct.stat* %14) #10, !dbg !636
  %57 = icmp slt i32 %56, 0, !dbg !638
  %58 = load i32, i32* @x.9
  %59 = load i32, i32* @y.10
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %57, label %66, label %87, !dbg !639

66:                                               ; preds = %originalBBpart28
  %67 = load i32, i32* @x.9
  %68 = load i32, i32* @y.10
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %66, %originalBB10alteredBB
  %75 = call i32* @__errno_location() #15, !dbg !640
  %76 = load i32, i32* %75, align 4, !dbg !640
  %77 = call i8* @gettext(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.41, i64 0, i64 0)) #10, !dbg !640
  %78 = call i8* @quotearg_style(i32 4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i64 0, i64 0)), !dbg !640
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %76, i8* %77, i8* %78), !dbg !640
  %79 = load i32, i32* @x.9
  %80 = load i32, i32* @y.10
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  unreachable, !dbg !640

87:                                               ; preds = %originalBBpart28
  %88 = load i32, i32* @x.9
  %89 = load i32, i32* @y.10
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %87, %originalBB14alteredBB
  %96 = load i32, i32* @x.9
  %97 = load i32, i32* @y.10
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %104, !dbg !641

104:                                              ; preds = %originalBBpart237, %originalBBpart216
  %105 = load i32, i32* @x.9
  %106 = load i32, i32* @y.10
  %107 = sub i32 %105, 1
  %108 = mul i32 %105, %107
  %109 = urem i32 %108, 2
  %110 = icmp eq i32 %109, 0
  %111 = icmp slt i32 %106, 10
  %112 = or i1 %110, %111
  br i1 %112, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %104, %originalBB18alteredBB
  %113 = getelementptr inbounds %struct.stat, %struct.stat* %14, i32 0, i32 1, !dbg !642
  %114 = load i64, i64* %113, align 8, !dbg !642
  %115 = load %struct.dev_ino*, %struct.dev_ino** %13, align 8, !dbg !642
  %116 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %115, i32 0, i32 0, !dbg !642
  %117 = load i64, i64* %116, align 8, !dbg !642
  %118 = icmp eq i64 %114, %117, !dbg !642
  %119 = load i32, i32* @x.9
  %120 = load i32, i32* @y.10
  %121 = sub i32 %119, 1
  %122 = mul i32 %119, %121
  %123 = urem i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %124, %125
  br i1 %126, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %118, label %127, label %167, !dbg !642

127:                                              ; preds = %originalBBpart220
  %128 = load i32, i32* @x.9
  %129 = load i32, i32* @y.10
  %130 = sub i32 %128, 1
  %131 = mul i32 %128, %130
  %132 = urem i32 %131, 2
  %133 = icmp eq i32 %132, 0
  %134 = icmp slt i32 %129, 10
  %135 = or i1 %133, %134
  br i1 %135, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %127, %originalBB22alteredBB
  %136 = getelementptr inbounds %struct.stat, %struct.stat* %14, i32 0, i32 0, !dbg !642
  %137 = load i64, i64* %136, align 8, !dbg !642
  %138 = load %struct.dev_ino*, %struct.dev_ino** %13, align 8, !dbg !642
  %139 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %138, i32 0, i32 1, !dbg !642
  %140 = load i64, i64* %139, align 8, !dbg !642
  %141 = icmp eq i64 %137, %140, !dbg !642
  %142 = load i32, i32* @x.9
  %143 = load i32, i32* @y.10
  %144 = sub i32 %142, 1
  %145 = mul i32 %142, %144
  %146 = urem i32 %145, 2
  %147 = icmp eq i32 %146, 0
  %148 = icmp slt i32 %143, 10
  %149 = or i1 %147, %148
  br i1 %149, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %141, label %150, label %167, !dbg !645

150:                                              ; preds = %originalBBpart224
  %151 = load i32, i32* @x.9
  %152 = load i32, i32* @y.10
  %153 = sub i32 %151, 1
  %154 = mul i32 %151, %153
  %155 = urem i32 %154, 2
  %156 = icmp eq i32 %155, 0
  %157 = icmp slt i32 %152, 10
  %158 = or i1 %156, %157
  br i1 %158, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %150, %originalBB26alteredBB
  %159 = load i32, i32* @x.9
  %160 = load i32, i32* @y.10
  %161 = sub i32 %159, 1
  %162 = mul i32 %159, %161
  %163 = urem i32 %162, 2
  %164 = icmp eq i32 %163, 0
  %165 = icmp slt i32 %160, 10
  %166 = or i1 %164, %165
  br i1 %166, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %187, !dbg !646

167:                                              ; preds = %originalBBpart224, %originalBBpart220
  %168 = load i32, i32* @x.9
  %169 = load i32, i32* @y.10
  %170 = sub i32 %168, 1
  %171 = mul i32 %168, %170
  %172 = urem i32 %171, 2
  %173 = icmp eq i32 %172, 0
  %174 = icmp slt i32 %169, 10
  %175 = or i1 %173, %174
  br i1 %175, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %167, %originalBB30alteredBB
  %176 = load %struct.file_name*, %struct.file_name** %10, align 8, !dbg !647
  %177 = load i64, i64* %11, align 8, !dbg !648
  %178 = add i64 %177, 1, !dbg !648
  store i64 %178, i64* %11, align 8, !dbg !648
  call void @find_dir_entry(%struct.stat* %14, %struct.file_name* %176, i64 %177), !dbg !649
  %179 = load i32, i32* @x.9
  %180 = load i32, i32* @y.10
  %181 = sub i32 %179, 1
  %182 = mul i32 %179, %181
  %183 = urem i32 %182, 2
  %184 = icmp eq i32 %183, 0
  %185 = icmp slt i32 %180, 10
  %186 = or i1 %184, %185
  br i1 %186, label %originalBBpart237, label %originalBB30alteredBB

originalBBpart237:                                ; preds = %originalBB30
  br label %104, !dbg !641, !llvm.loop !650

187:                                              ; preds = %originalBBpart228
  %188 = load i32, i32* @x.9
  %189 = load i32, i32* @y.10
  %190 = sub i32 %188, 1
  %191 = mul i32 %188, %190
  %192 = urem i32 %191, 2
  %193 = icmp eq i32 %192, 0
  %194 = icmp slt i32 %189, 10
  %195 = or i1 %193, %194
  br i1 %195, label %originalBB39, label %originalBB39alteredBB

originalBB39:                                     ; preds = %187, %originalBB39alteredBB
  %196 = load %struct.file_name*, %struct.file_name** %10, align 8, !dbg !652
  %197 = getelementptr inbounds %struct.file_name, %struct.file_name* %196, i32 0, i32 2, !dbg !654
  %198 = load i8*, i8** %197, align 8, !dbg !654
  %199 = getelementptr inbounds i8, i8* %198, i64 0, !dbg !652
  %200 = load i8, i8* %199, align 1, !dbg !652
  %201 = sext i8 %200 to i32, !dbg !652
  %202 = icmp eq i32 %201, 0, !dbg !655
  %203 = load i32, i32* @x.9
  %204 = load i32, i32* @y.10
  %205 = sub i32 %203, 1
  %206 = mul i32 %203, %205
  %207 = urem i32 %206, 2
  %208 = icmp eq i32 %207, 0
  %209 = icmp slt i32 %204, 10
  %210 = or i1 %208, %209
  br i1 %210, label %originalBBpart241, label %originalBB39alteredBB

originalBBpart241:                                ; preds = %originalBB39
  br i1 %202, label %211, label %229, !dbg !656

211:                                              ; preds = %originalBBpart241
  %212 = load i32, i32* @x.9
  %213 = load i32, i32* @y.10
  %214 = sub i32 %212, 1
  %215 = mul i32 %212, %214
  %216 = urem i32 %215, 2
  %217 = icmp eq i32 %216, 0
  %218 = icmp slt i32 %213, 10
  %219 = or i1 %217, %218
  br i1 %219, label %originalBB43, label %originalBB43alteredBB

originalBB43:                                     ; preds = %211, %originalBB43alteredBB
  %220 = load %struct.file_name*, %struct.file_name** %10, align 8, !dbg !657
  call void @file_name_prepend(%struct.file_name* %220, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0), i64 0), !dbg !658
  %221 = load i32, i32* @x.9
  %222 = load i32, i32* @y.10
  %223 = sub i32 %221, 1
  %224 = mul i32 %221, %223
  %225 = urem i32 %224, 2
  %226 = icmp eq i32 %225, 0
  %227 = icmp slt i32 %222, 10
  %228 = or i1 %226, %227
  br i1 %228, label %originalBBpart245, label %originalBB43alteredBB

originalBBpart245:                                ; preds = %originalBB43
  br label %229, !dbg !658

229:                                              ; preds = %originalBBpart245, %originalBBpart241
  %230 = load i32, i32* @x.9
  %231 = load i32, i32* @y.10
  %232 = sub i32 %230, 1
  %233 = mul i32 %230, %232
  %234 = urem i32 %233, 2
  %235 = icmp eq i32 %234, 0
  %236 = icmp slt i32 %231, 10
  %237 = or i1 %235, %236
  br i1 %237, label %originalBB47, label %originalBB47alteredBB

originalBB47:                                     ; preds = %229, %originalBB47alteredBB
  %238 = load i32, i32* @x.9
  %239 = load i32, i32* @y.10
  %240 = sub i32 %238, 1
  %241 = mul i32 %238, %240
  %242 = urem i32 %241, 2
  %243 = icmp eq i32 %242, 0
  %244 = icmp slt i32 %239, 10
  %245 = or i1 %243, %244
  br i1 %245, label %originalBBpart249, label %originalBB47alteredBB

originalBBpart249:                                ; preds = %originalBB47
  ret void, !dbg !659

originalBBalteredBB:                              ; preds = %originalBB, %1
  %246 = alloca %struct.file_name*, align 8
  %247 = alloca i64, align 8
  %248 = alloca %struct.dev_ino, align 8
  %249 = alloca %struct.dev_ino*, align 8
  %250 = alloca %struct.stat, align 8
  store %struct.file_name* %0, %struct.file_name** %246, align 8
  call void @llvm.dbg.declare(metadata %struct.file_name** %246, metadata !660, metadata !DIExpression()), !dbg !612
  call void @llvm.dbg.declare(metadata i64* %247, metadata !682, metadata !DIExpression()), !dbg !614
  store i64 1, i64* %247, align 8, !dbg !614
  call void @llvm.dbg.declare(metadata %struct.dev_ino* %248, metadata !683, metadata !DIExpression()), !dbg !624
  call void @llvm.dbg.declare(metadata %struct.dev_ino** %249, metadata !688, metadata !DIExpression()), !dbg !627
  %251 = call %struct.dev_ino* @get_root_dev_ino(%struct.dev_ino* %248), !dbg !628
  store %struct.dev_ino* %251, %struct.dev_ino** %249, align 8, !dbg !627
  call void @llvm.dbg.declare(metadata %struct.stat* %250, metadata !690, metadata !DIExpression()), !dbg !630
  %252 = load %struct.dev_ino*, %struct.dev_ino** %249, align 8, !dbg !631
  %253 = icmp eq %struct.dev_ino* %252, null, !dbg !633
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %26
  %254 = call i32* @__errno_location() #15, !dbg !635
  %255 = load i32, i32* %254, align 4, !dbg !635
  %256 = call i8* @gettext(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.39, i64 0, i64 0)) #10, !dbg !635
  %257 = call i8* @quotearg_style(i32 4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.40, i64 0, i64 0)), !dbg !635
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %255, i8* %256, i8* %257), !dbg !635
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %47
  %258 = call i32 @stat(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i64 0, i64 0), %struct.stat* %14) #10, !dbg !636
  %259 = icmp slt i32 %258, 0, !dbg !638
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %66
  %260 = call i32* @__errno_location() #15, !dbg !640
  %261 = load i32, i32* %260, align 4, !dbg !640
  %262 = call i8* @gettext(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.41, i64 0, i64 0)) #10, !dbg !640
  %263 = call i8* @quotearg_style(i32 4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i64 0, i64 0)), !dbg !640
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %261, i8* %262, i8* %263), !dbg !640
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %87
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %104
  %264 = getelementptr inbounds %struct.stat, %struct.stat* %14, i32 0, i32 1, !dbg !642
  %265 = load i64, i64* %264, align 8, !dbg !642
  %266 = load %struct.dev_ino*, %struct.dev_ino** %13, align 8, !dbg !642
  %267 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %266, i32 0, i32 0, !dbg !642
  %268 = load i64, i64* %267, align 8, !dbg !642
  %269 = icmp eq i64 %265, %268, !dbg !642
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %127
  %270 = getelementptr inbounds %struct.stat, %struct.stat* %14, i32 0, i32 0, !dbg !642
  %271 = load i64, i64* %270, align 8, !dbg !642
  %272 = load %struct.dev_ino*, %struct.dev_ino** %13, align 8, !dbg !642
  %273 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %272, i32 0, i32 1, !dbg !642
  %274 = load i64, i64* %273, align 8, !dbg !642
  %275 = icmp eq i64 %271, %274, !dbg !642
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %150
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %167
  %276 = load %struct.file_name*, %struct.file_name** %10, align 8, !dbg !647
  %277 = load i64, i64* %11, align 8, !dbg !648
  %_ = sub i64 0, %277
  %gen = add i64 %_, 1
  %_31 = sub i64 %277, 1
  %gen32 = mul i64 %_31, 1
  %_33 = shl i64 %277, 1
  %_34 = sub i64 %277, 1
  %gen35 = mul i64 %_34, 1
  %278 = add i64 %277, 1, !dbg !648
  store i64 %278, i64* %11, align 8, !dbg !648
  call void @find_dir_entry(%struct.stat* %14, %struct.file_name* %276, i64 %277), !dbg !649
  br label %originalBB30

originalBB39alteredBB:                            ; preds = %originalBB39, %187
  %279 = load %struct.file_name*, %struct.file_name** %10, align 8, !dbg !652
  %280 = getelementptr inbounds %struct.file_name, %struct.file_name* %279, i32 0, i32 2, !dbg !654
  %281 = load i8*, i8** %280, align 8, !dbg !654
  %282 = getelementptr inbounds i8, i8* %281, i64 0, !dbg !652
  %283 = load i8, i8* %282, align 1, !dbg !652
  %284 = sext i8 %283 to i32, !dbg !652
  %285 = icmp eq i32 %284, 0, !dbg !655
  br label %originalBB39

originalBB43alteredBB:                            ; preds = %originalBB43, %211
  %286 = load %struct.file_name*, %struct.file_name** %10, align 8, !dbg !657
  call void @file_name_prepend(%struct.file_name* %286, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0), i64 0), !dbg !658
  br label %originalBB43

originalBB47alteredBB:                            ; preds = %originalBB47, %229
  br label %originalBB47
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @file_name_free(%struct.file_name*) #4 !dbg !712 {
  %2 = load i32, i32* @x.11
  %3 = load i32, i32* @y.12
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct.file_name*, align 8
  store %struct.file_name* %0, %struct.file_name** %10, align 8
  call void @llvm.dbg.declare(metadata %struct.file_name** %10, metadata !713, metadata !DIExpression()), !dbg !714
  %11 = load %struct.file_name*, %struct.file_name** %10, align 8, !dbg !715
  %12 = getelementptr inbounds %struct.file_name, %struct.file_name* %11, i32 0, i32 0, !dbg !716
  %13 = load i8*, i8** %12, align 8, !dbg !716
  call void @free(i8* %13) #10, !dbg !717
  %14 = load %struct.file_name*, %struct.file_name** %10, align 8, !dbg !718
  %15 = bitcast %struct.file_name* %14 to i8*, !dbg !718
  call void @free(i8* %15) #10, !dbg !719
  %16 = load i32, i32* @x.11
  %17 = load i32, i32* @y.12
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret void, !dbg !720

originalBBalteredBB:                              ; preds = %originalBB, %1
  %24 = alloca %struct.file_name*, align 8
  store %struct.file_name* %0, %struct.file_name** %24, align 8
  call void @llvm.dbg.declare(metadata %struct.file_name** %24, metadata !721, metadata !DIExpression()), !dbg !714
  %25 = load %struct.file_name*, %struct.file_name** %24, align 8, !dbg !715
  %26 = getelementptr inbounds %struct.file_name, %struct.file_name* %25, i32 0, i32 0, !dbg !716
  %27 = load i8*, i8** %26, align 8, !dbg !716
  call void @free(i8* %27) #10, !dbg !717
  %28 = load %struct.file_name*, %struct.file_name** %24, align 8, !dbg !718
  %29 = bitcast %struct.file_name* %28 to i8*, !dbg !718
  call void @free(i8* %29) #10, !dbg !719
  br label %originalBB
}

; Function Attrs: nounwind readnone
declare dso_local i32* @__errno_location() #8

; Function Attrs: nounwind
declare dso_local i32 @stat(i8*, %struct.stat*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @find_dir_entry(%struct.stat*, %struct.file_name*, i64) #4 !dbg !743 {
  %4 = load i32, i32* @x.13
  %5 = load i32, i32* @y.14
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca %struct.stat*, align 8
  %13 = alloca %struct.file_name*, align 8
  %14 = alloca i64, align 8
  %15 = alloca %struct.__dirstream*, align 8
  %16 = alloca i32, align 4
  %17 = alloca %struct.stat, align 8
  %18 = alloca i8, align 1
  %19 = alloca i8, align 1
  %20 = alloca %struct.dirent*, align 8
  %21 = alloca %struct.stat, align 8
  %22 = alloca i64, align 8
  %23 = alloca i32, align 4
  store %struct.stat* %0, %struct.stat** %12, align 8
  call void @llvm.dbg.declare(metadata %struct.stat** %12, metadata !747, metadata !DIExpression()), !dbg !748
  store %struct.file_name* %1, %struct.file_name** %13, align 8
  call void @llvm.dbg.declare(metadata %struct.file_name** %13, metadata !749, metadata !DIExpression()), !dbg !750
  store i64 %2, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !751, metadata !DIExpression()), !dbg !752
  call void @llvm.dbg.declare(metadata %struct.__dirstream** %15, metadata !753, metadata !DIExpression()), !dbg !758
  call void @llvm.dbg.declare(metadata i32* %16, metadata !759, metadata !DIExpression()), !dbg !760
  call void @llvm.dbg.declare(metadata %struct.stat* %17, metadata !761, metadata !DIExpression()), !dbg !762
  call void @llvm.dbg.declare(metadata i8* %18, metadata !763, metadata !DIExpression()), !dbg !764
  call void @llvm.dbg.declare(metadata i8* %19, metadata !765, metadata !DIExpression()), !dbg !766
  %24 = call %struct.__dirstream* @opendir(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i64 0, i64 0)), !dbg !767
  store %struct.__dirstream* %24, %struct.__dirstream** %15, align 8, !dbg !768
  %25 = load %struct.__dirstream*, %struct.__dirstream** %15, align 8, !dbg !769
  %26 = icmp eq %struct.__dirstream* %25, null, !dbg !771
  %27 = load i32, i32* @x.13
  %28 = load i32, i32* @y.14
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %26, label %35, label %58, !dbg !772

35:                                               ; preds = %originalBBpart2
  %36 = load i32, i32* @x.13
  %37 = load i32, i32* @y.14
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %35, %originalBB1alteredBB
  %44 = call i32* @__errno_location() #15, !dbg !773
  %45 = load i32, i32* %44, align 4, !dbg !773
  %46 = call i8* @gettext(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.43, i64 0, i64 0)) #10, !dbg !773
  %47 = load i64, i64* %14, align 8, !dbg !773
  %48 = call i8* @nth_parent(i64 %47), !dbg !773
  %49 = call i8* @quote(i8* %48), !dbg !773
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %45, i8* %46, i8* %49), !dbg !773
  %50 = load i32, i32* @x.13
  %51 = load i32, i32* @y.14
  %52 = sub i32 %50, 1
  %53 = mul i32 %50, %52
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %55, %56
  br i1 %57, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  unreachable, !dbg !773

58:                                               ; preds = %originalBBpart2
  %59 = load i32, i32* @x.13
  %60 = load i32, i32* @y.14
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %58, %originalBB6alteredBB
  %67 = load %struct.__dirstream*, %struct.__dirstream** %15, align 8, !dbg !774
  %68 = call i32 @dirfd(%struct.__dirstream* %67) #10, !dbg !775
  store i32 %68, i32* %16, align 4, !dbg !776
  %69 = load i32, i32* %16, align 4, !dbg !777
  %70 = icmp sle i32 0, %69, !dbg !779
  %71 = load i32, i32* @x.13
  %72 = load i32, i32* @y.14
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %70, label %79, label %98, !dbg !780

79:                                               ; preds = %originalBBpart28
  %80 = load i32, i32* @x.13
  %81 = load i32, i32* @y.14
  %82 = sub i32 %80, 1
  %83 = mul i32 %80, %82
  %84 = urem i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = icmp slt i32 %81, 10
  %87 = or i1 %85, %86
  br i1 %87, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %79, %originalBB10alteredBB
  %88 = load i32, i32* %16, align 4, !dbg !781
  %89 = call i32 @fchdir(i32 %88) #10, !dbg !782
  %90 = load i32, i32* @x.13
  %91 = load i32, i32* @y.14
  %92 = sub i32 %90, 1
  %93 = mul i32 %90, %92
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %91, 10
  %97 = or i1 %95, %96
  br i1 %97, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %116, !dbg !780

98:                                               ; preds = %originalBBpart28
  %99 = load i32, i32* @x.13
  %100 = load i32, i32* @y.14
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %98, %originalBB14alteredBB
  %107 = call i32 @chdir(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i64 0, i64 0)) #10, !dbg !783
  %108 = load i32, i32* @x.13
  %109 = load i32, i32* @y.14
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %116, !dbg !780

116:                                              ; preds = %originalBBpart216, %originalBBpart212
  %117 = phi i32 [ %89, %originalBBpart212 ], [ %107, %originalBBpart216 ], !dbg !780
  %118 = load i32, i32* @x.13
  %119 = load i32, i32* @y.14
  %120 = sub i32 %118, 1
  %121 = mul i32 %118, %120
  %122 = urem i32 %121, 2
  %123 = icmp eq i32 %122, 0
  %124 = icmp slt i32 %119, 10
  %125 = or i1 %123, %124
  br i1 %125, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %116, %originalBB18alteredBB
  %126 = icmp slt i32 %117, 0, !dbg !784
  %127 = load i32, i32* @x.13
  %128 = load i32, i32* @y.14
  %129 = sub i32 %127, 1
  %130 = mul i32 %127, %129
  %131 = urem i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %132, %133
  br i1 %134, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %126, label %135, label %158, !dbg !785

135:                                              ; preds = %originalBBpart220
  %136 = load i32, i32* @x.13
  %137 = load i32, i32* @y.14
  %138 = sub i32 %136, 1
  %139 = mul i32 %136, %138
  %140 = urem i32 %139, 2
  %141 = icmp eq i32 %140, 0
  %142 = icmp slt i32 %137, 10
  %143 = or i1 %141, %142
  br i1 %143, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %135, %originalBB22alteredBB
  %144 = call i32* @__errno_location() #15, !dbg !786
  %145 = load i32, i32* %144, align 4, !dbg !786
  %146 = call i8* @gettext(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.44, i64 0, i64 0)) #10, !dbg !786
  %147 = load i64, i64* %14, align 8, !dbg !786
  %148 = call i8* @nth_parent(i64 %147), !dbg !786
  %149 = call i8* @quote(i8* %148), !dbg !786
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %145, i8* %146, i8* %149), !dbg !786
  %150 = load i32, i32* @x.13
  %151 = load i32, i32* @y.14
  %152 = sub i32 %150, 1
  %153 = mul i32 %150, %152
  %154 = urem i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %155, %156
  br i1 %157, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  unreachable, !dbg !786

158:                                              ; preds = %originalBBpart220
  %159 = load i32, i32* @x.13
  %160 = load i32, i32* @y.14
  %161 = sub i32 %159, 1
  %162 = mul i32 %159, %161
  %163 = urem i32 %162, 2
  %164 = icmp eq i32 %163, 0
  %165 = icmp slt i32 %160, 10
  %166 = or i1 %164, %165
  br i1 %166, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %158, %originalBB26alteredBB
  %167 = load i32, i32* %16, align 4, !dbg !787
  %168 = icmp sle i32 0, %167, !dbg !789
  %169 = load i32, i32* @x.13
  %170 = load i32, i32* @y.14
  %171 = sub i32 %169, 1
  %172 = mul i32 %169, %171
  %173 = urem i32 %172, 2
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %174, %175
  br i1 %176, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %168, label %177, label %196, !dbg !790

177:                                              ; preds = %originalBBpart228
  %178 = load i32, i32* @x.13
  %179 = load i32, i32* @y.14
  %180 = sub i32 %178, 1
  %181 = mul i32 %178, %180
  %182 = urem i32 %181, 2
  %183 = icmp eq i32 %182, 0
  %184 = icmp slt i32 %179, 10
  %185 = or i1 %183, %184
  br i1 %185, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %177, %originalBB30alteredBB
  %186 = load i32, i32* %16, align 4, !dbg !791
  %187 = call i32 @fstat(i32 %186, %struct.stat* %17) #10, !dbg !792
  %188 = load i32, i32* @x.13
  %189 = load i32, i32* @y.14
  %190 = sub i32 %188, 1
  %191 = mul i32 %188, %190
  %192 = urem i32 %191, 2
  %193 = icmp eq i32 %192, 0
  %194 = icmp slt i32 %189, 10
  %195 = or i1 %193, %194
  br i1 %195, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %214, !dbg !790

196:                                              ; preds = %originalBBpart228
  %197 = load i32, i32* @x.13
  %198 = load i32, i32* @y.14
  %199 = sub i32 %197, 1
  %200 = mul i32 %197, %199
  %201 = urem i32 %200, 2
  %202 = icmp eq i32 %201, 0
  %203 = icmp slt i32 %198, 10
  %204 = or i1 %202, %203
  br i1 %204, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %196, %originalBB34alteredBB
  %205 = call i32 @stat(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i64 0, i64 0), %struct.stat* %17) #10, !dbg !793
  %206 = load i32, i32* @x.13
  %207 = load i32, i32* @y.14
  %208 = sub i32 %206, 1
  %209 = mul i32 %206, %208
  %210 = urem i32 %209, 2
  %211 = icmp eq i32 %210, 0
  %212 = icmp slt i32 %207, 10
  %213 = or i1 %211, %212
  br i1 %213, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %214, !dbg !790

214:                                              ; preds = %originalBBpart236, %originalBBpart232
  %215 = phi i32 [ %187, %originalBBpart232 ], [ %205, %originalBBpart236 ], !dbg !790
  %216 = load i32, i32* @x.13
  %217 = load i32, i32* @y.14
  %218 = sub i32 %216, 1
  %219 = mul i32 %216, %218
  %220 = urem i32 %219, 2
  %221 = icmp eq i32 %220, 0
  %222 = icmp slt i32 %217, 10
  %223 = or i1 %221, %222
  br i1 %223, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %214, %originalBB38alteredBB
  %224 = icmp slt i32 %215, 0, !dbg !794
  %225 = load i32, i32* @x.13
  %226 = load i32, i32* @y.14
  %227 = sub i32 %225, 1
  %228 = mul i32 %225, %227
  %229 = urem i32 %228, 2
  %230 = icmp eq i32 %229, 0
  %231 = icmp slt i32 %226, 10
  %232 = or i1 %230, %231
  br i1 %232, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br i1 %224, label %233, label %256, !dbg !795

233:                                              ; preds = %originalBBpart240
  %234 = load i32, i32* @x.13
  %235 = load i32, i32* @y.14
  %236 = sub i32 %234, 1
  %237 = mul i32 %234, %236
  %238 = urem i32 %237, 2
  %239 = icmp eq i32 %238, 0
  %240 = icmp slt i32 %235, 10
  %241 = or i1 %239, %240
  br i1 %241, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %233, %originalBB42alteredBB
  %242 = call i32* @__errno_location() #15, !dbg !796
  %243 = load i32, i32* %242, align 4, !dbg !796
  %244 = call i8* @gettext(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.41, i64 0, i64 0)) #10, !dbg !796
  %245 = load i64, i64* %14, align 8, !dbg !796
  %246 = call i8* @nth_parent(i64 %245), !dbg !796
  %247 = call i8* @quote(i8* %246), !dbg !796
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %243, i8* %244, i8* %247), !dbg !796
  %248 = load i32, i32* @x.13
  %249 = load i32, i32* @y.14
  %250 = sub i32 %248, 1
  %251 = mul i32 %248, %250
  %252 = urem i32 %251, 2
  %253 = icmp eq i32 %252, 0
  %254 = icmp slt i32 %249, 10
  %255 = or i1 %253, %254
  br i1 %255, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  unreachable, !dbg !796

256:                                              ; preds = %originalBBpart240
  %257 = load i32, i32* @x.13
  %258 = load i32, i32* @y.14
  %259 = sub i32 %257, 1
  %260 = mul i32 %257, %259
  %261 = urem i32 %260, 2
  %262 = icmp eq i32 %261, 0
  %263 = icmp slt i32 %258, 10
  %264 = or i1 %262, %263
  br i1 %264, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %256, %originalBB46alteredBB
  %265 = getelementptr inbounds %struct.stat, %struct.stat* %17, i32 0, i32 0, !dbg !797
  %266 = load i64, i64* %265, align 8, !dbg !797
  %267 = load %struct.stat*, %struct.stat** %12, align 8, !dbg !798
  %268 = getelementptr inbounds %struct.stat, %struct.stat* %267, i32 0, i32 0, !dbg !799
  %269 = load i64, i64* %268, align 8, !dbg !799
  %270 = icmp ne i64 %266, %269, !dbg !800
  %271 = zext i1 %270 to i8, !dbg !801
  store i8 %271, i8* %18, align 1, !dbg !801
  store i8 0, i8* %19, align 1, !dbg !802
  %272 = load i32, i32* @x.13
  %273 = load i32, i32* @y.14
  %274 = sub i32 %272, 1
  %275 = mul i32 %272, %274
  %276 = urem i32 %275, 2
  %277 = icmp eq i32 %276, 0
  %278 = icmp slt i32 %273, 10
  %279 = or i1 %277, %278
  br i1 %279, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br label %280, !dbg !803

280:                                              ; preds = %614, %originalBBpart2144, %originalBBpart2132, %originalBBpart248
  call void @llvm.dbg.declare(metadata %struct.dirent** %20, metadata !804, metadata !DIExpression()), !dbg !816
  call void @llvm.dbg.declare(metadata %struct.stat* %21, metadata !817, metadata !DIExpression()), !dbg !818
  call void @llvm.dbg.declare(metadata i64* %22, metadata !819, metadata !DIExpression()), !dbg !820
  %281 = load i32, i32* @x.13
  %282 = load i32, i32* @y.14
  %283 = sub i32 %281, 1
  %284 = mul i32 %281, %283
  %285 = urem i32 %284, 2
  %286 = icmp eq i32 %285, 0
  %287 = icmp slt i32 %282, 10
  %288 = or i1 %286, %287
  br i1 %288, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %280, %originalBB50alteredBB
  %289 = call i32* @__errno_location() #15, !dbg !821
  store i32 0, i32* %289, align 4, !dbg !822
  %290 = load %struct.__dirstream*, %struct.__dirstream** %15, align 8, !dbg !823
  %291 = call %struct.dirent* @readdir_ignoring_dot_and_dotdot(%struct.__dirstream* %290), !dbg !825
  store %struct.dirent* %291, %struct.dirent** %20, align 8, !dbg !826
  %292 = icmp eq %struct.dirent* %291, null, !dbg !827
  %293 = load i32, i32* @x.13
  %294 = load i32, i32* @y.14
  %295 = sub i32 %293, 1
  %296 = mul i32 %293, %295
  %297 = urem i32 %296, 2
  %298 = icmp eq i32 %297, 0
  %299 = icmp slt i32 %294, 10
  %300 = or i1 %298, %299
  br i1 %300, label %originalBBpart252, label %originalBB50alteredBB

originalBBpart252:                                ; preds = %originalBB50
  br i1 %292, label %301, label %409, !dbg !828

301:                                              ; preds = %originalBBpart252
  %302 = load i32, i32* @x.13
  %303 = load i32, i32* @y.14
  %304 = sub i32 %302, 1
  %305 = mul i32 %302, %304
  %306 = urem i32 %305, 2
  %307 = icmp eq i32 %306, 0
  %308 = icmp slt i32 %303, 10
  %309 = or i1 %307, %308
  br i1 %309, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %301, %originalBB54alteredBB
  %310 = call i32* @__errno_location() #15, !dbg !829
  %311 = load i32, i32* %310, align 4, !dbg !829
  %312 = icmp ne i32 %311, 0, !dbg !829
  %313 = load i32, i32* @x.13
  %314 = load i32, i32* @y.14
  %315 = sub i32 %313, 1
  %316 = mul i32 %313, %315
  %317 = urem i32 %316, 2
  %318 = icmp eq i32 %317, 0
  %319 = icmp slt i32 %314, 10
  %320 = or i1 %318, %319
  br i1 %320, label %originalBBpart256, label %originalBB54alteredBB

originalBBpart256:                                ; preds = %originalBB54
  br i1 %312, label %321, label %392, !dbg !832

321:                                              ; preds = %originalBBpart256
  call void @llvm.dbg.declare(metadata i32* %23, metadata !833, metadata !DIExpression()), !dbg !835
  %322 = load i32, i32* @x.13
  %323 = load i32, i32* @y.14
  %324 = sub i32 %322, 1
  %325 = mul i32 %322, %324
  %326 = urem i32 %325, 2
  %327 = icmp eq i32 %326, 0
  %328 = icmp slt i32 %323, 10
  %329 = or i1 %327, %328
  br i1 %329, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %321, %originalBB58alteredBB
  %330 = call i32* @__errno_location() #15, !dbg !836
  %331 = load i32, i32* %330, align 4, !dbg !836
  store i32 %331, i32* %23, align 4, !dbg !835
  %332 = load %struct.__dirstream*, %struct.__dirstream** %15, align 8, !dbg !837
  %333 = call i32 @closedir(%struct.__dirstream* %332), !dbg !838
  %334 = load i32, i32* %23, align 4, !dbg !839
  %335 = call i32* @__errno_location() #15, !dbg !840
  store i32 %334, i32* %335, align 4, !dbg !841
  %336 = add i32 %331, 5
  %337 = add i32 %334, 2
  %338 = mul i32 %331, 4
  %339 = mul i32 %336, %336
  %340 = mul i32 %339, %339
  %341 = mul i32 %337, %337
  %342 = mul i32 %341, %341
  %343 = mul i32 %338, %338
  %344 = mul i32 %343, %343
  %345 = add i32 %340, %342
  %346 = sub i32 %345, %344
  %347 = mul i32 %346, 3
  %348 = add i32 %347, 4
  %349 = icmp eq i32 %348, 4
  %350 = load i32, i32* @x.13
  %351 = load i32, i32* @y.14
  %352 = sub i32 %350, 1
  %353 = mul i32 %350, %352
  %354 = urem i32 %353, 2
  %355 = icmp eq i32 %354, 0
  %356 = icmp slt i32 %351, 10
  %357 = or i1 %355, %356
  br i1 %357, label %originalBBpart2104, label %originalBB58alteredBB

originalBBpart2104:                               ; preds = %originalBB58
  br i1 %349, label %375, label %358

358:                                              ; preds = %originalBBpart2104
  %359 = load i32, i32* @x.13
  %360 = load i32, i32* @y.14
  %361 = sub i32 %359, 1
  %362 = mul i32 %359, %361
  %363 = urem i32 %362, 2
  %364 = icmp eq i32 %363, 0
  %365 = icmp slt i32 %360, 10
  %366 = or i1 %364, %365
  br i1 %366, label %originalBB106, label %originalBB106alteredBB

originalBB106:                                    ; preds = %358, %originalBB106alteredBB
  %367 = load i32, i32* @x.13
  %368 = load i32, i32* @y.14
  %369 = sub i32 %367, 1
  %370 = mul i32 %367, %369
  %371 = urem i32 %370, 2
  %372 = icmp eq i32 %371, 0
  %373 = icmp slt i32 %368, 10
  %374 = or i1 %372, %373
  br i1 %374, label %originalBBpart2108, label %originalBB106alteredBB

originalBBpart2108:                               ; preds = %originalBB106
  ret void

375:                                              ; preds = %originalBBpart2104
  %376 = load i32, i32* @x.13
  %377 = load i32, i32* @y.14
  %378 = sub i32 %376, 1
  %379 = mul i32 %376, %378
  %380 = urem i32 %379, 2
  %381 = icmp eq i32 %380, 0
  %382 = icmp slt i32 %377, 10
  %383 = or i1 %381, %382
  br i1 %383, label %originalBB110, label %originalBB110alteredBB

originalBB110:                                    ; preds = %375, %originalBB110alteredBB
  store %struct.__dirstream* null, %struct.__dirstream** %15, align 8, !dbg !842
  %384 = load i32, i32* @x.13
  %385 = load i32, i32* @y.14
  %386 = sub i32 %384, 1
  %387 = mul i32 %384, %386
  %388 = urem i32 %387, 2
  %389 = icmp eq i32 %388, 0
  %390 = icmp slt i32 %385, 10
  %391 = or i1 %389, %390
  br i1 %391, label %originalBBpart2112, label %originalBB110alteredBB

originalBBpart2112:                               ; preds = %originalBB110
  br label %392, !dbg !843

392:                                              ; preds = %originalBBpart2112, %originalBBpart256
  %393 = load i32, i32* @x.13
  %394 = load i32, i32* @y.14
  %395 = sub i32 %393, 1
  %396 = mul i32 %393, %395
  %397 = urem i32 %396, 2
  %398 = icmp eq i32 %397, 0
  %399 = icmp slt i32 %394, 10
  %400 = or i1 %398, %399
  br i1 %400, label %originalBB114, label %originalBB114alteredBB

originalBB114:                                    ; preds = %392, %originalBB114alteredBB
  %401 = load i32, i32* @x.13
  %402 = load i32, i32* @y.14
  %403 = sub i32 %401, 1
  %404 = mul i32 %401, %403
  %405 = urem i32 %404, 2
  %406 = icmp eq i32 %405, 0
  %407 = icmp slt i32 %402, 10
  %408 = or i1 %406, %407
  br i1 %408, label %originalBBpart2116, label %originalBB114alteredBB

originalBBpart2116:                               ; preds = %originalBB114
  br label %615, !dbg !844

409:                                              ; preds = %originalBBpart252
  %410 = load i32, i32* @x.13
  %411 = load i32, i32* @y.14
  %412 = sub i32 %410, 1
  %413 = mul i32 %410, %412
  %414 = urem i32 %413, 2
  %415 = icmp eq i32 %414, 0
  %416 = icmp slt i32 %411, 10
  %417 = or i1 %415, %416
  br i1 %417, label %originalBB118, label %originalBB118alteredBB

originalBB118:                                    ; preds = %409, %originalBB118alteredBB
  %418 = load %struct.dirent*, %struct.dirent** %20, align 8, !dbg !845
  %419 = getelementptr inbounds %struct.dirent, %struct.dirent* %418, i32 0, i32 0, !dbg !845
  %420 = load i64, i64* %419, align 8, !dbg !845
  store i64 %420, i64* %22, align 8, !dbg !846
  %421 = load i64, i64* %22, align 8, !dbg !847
  %422 = icmp eq i64 %421, 0, !dbg !849
  %423 = load i32, i32* @x.13
  %424 = load i32, i32* @y.14
  %425 = sub i32 %423, 1
  %426 = mul i32 %423, %425
  %427 = urem i32 %426, 2
  %428 = icmp eq i32 %427, 0
  %429 = icmp slt i32 %424, 10
  %430 = or i1 %428, %429
  br i1 %430, label %originalBBpart2120, label %originalBB118alteredBB

originalBBpart2120:                               ; preds = %originalBB118
  br i1 %422, label %450, label %431, !dbg !850

431:                                              ; preds = %originalBBpart2120
  %432 = load i32, i32* @x.13
  %433 = load i32, i32* @y.14
  %434 = sub i32 %432, 1
  %435 = mul i32 %432, %434
  %436 = urem i32 %435, 2
  %437 = icmp eq i32 %436, 0
  %438 = icmp slt i32 %433, 10
  %439 = or i1 %437, %438
  br i1 %439, label %originalBB122, label %originalBB122alteredBB

originalBB122:                                    ; preds = %431, %originalBB122alteredBB
  %440 = load i8, i8* %18, align 1, !dbg !851
  %441 = trunc i8 %440 to i1, !dbg !851
  %442 = load i32, i32* @x.13
  %443 = load i32, i32* @y.14
  %444 = sub i32 %442, 1
  %445 = mul i32 %442, %444
  %446 = urem i32 %445, 2
  %447 = icmp eq i32 %446, 0
  %448 = icmp slt i32 %443, 10
  %449 = or i1 %447, %448
  br i1 %449, label %originalBBpart2124, label %originalBB122alteredBB

originalBBpart2124:                               ; preds = %originalBB122
  br i1 %441, label %450, label %508, !dbg !852

450:                                              ; preds = %originalBBpart2124, %originalBBpart2120
  %451 = load i32, i32* @x.13
  %452 = load i32, i32* @y.14
  %453 = sub i32 %451, 1
  %454 = mul i32 %451, %453
  %455 = urem i32 %454, 2
  %456 = icmp eq i32 %455, 0
  %457 = icmp slt i32 %452, 10
  %458 = or i1 %456, %457
  br i1 %458, label %originalBB126, label %originalBB126alteredBB

originalBB126:                                    ; preds = %450, %originalBB126alteredBB
  %459 = load %struct.dirent*, %struct.dirent** %20, align 8, !dbg !853
  %460 = getelementptr inbounds %struct.dirent, %struct.dirent* %459, i32 0, i32 4, !dbg !856
  %461 = getelementptr inbounds [256 x i8], [256 x i8]* %460, i64 0, i64 0, !dbg !853
  %462 = call i32 @lstat(i8* %461, %struct.stat* %21) #10, !dbg !857
  %463 = icmp slt i32 %462, 0, !dbg !858
  %464 = load i32, i32* @x.13
  %465 = load i32, i32* @y.14
  %466 = sub i32 %464, 1
  %467 = mul i32 %464, %466
  %468 = urem i32 %467, 2
  %469 = icmp eq i32 %468, 0
  %470 = icmp slt i32 %465, 10
  %471 = or i1 %469, %470
  br i1 %471, label %originalBBpart2128, label %originalBB126alteredBB

originalBBpart2128:                               ; preds = %originalBB126
  br i1 %463, label %472, label %489, !dbg !859

472:                                              ; preds = %originalBBpart2128
  %473 = load i32, i32* @x.13
  %474 = load i32, i32* @y.14
  %475 = sub i32 %473, 1
  %476 = mul i32 %473, %475
  %477 = urem i32 %476, 2
  %478 = icmp eq i32 %477, 0
  %479 = icmp slt i32 %474, 10
  %480 = or i1 %478, %479
  br i1 %480, label %originalBB130, label %originalBB130alteredBB

originalBB130:                                    ; preds = %472, %originalBB130alteredBB
  %481 = load i32, i32* @x.13
  %482 = load i32, i32* @y.14
  %483 = sub i32 %481, 1
  %484 = mul i32 %481, %483
  %485 = urem i32 %484, 2
  %486 = icmp eq i32 %485, 0
  %487 = icmp slt i32 %482, 10
  %488 = or i1 %486, %487
  br i1 %488, label %originalBBpart2132, label %originalBB130alteredBB

originalBBpart2132:                               ; preds = %originalBB130
  br label %280, !dbg !860, !llvm.loop !862

489:                                              ; preds = %originalBBpart2128
  %490 = load i32, i32* @x.13
  %491 = load i32, i32* @y.14
  %492 = sub i32 %490, 1
  %493 = mul i32 %490, %492
  %494 = urem i32 %493, 2
  %495 = icmp eq i32 %494, 0
  %496 = icmp slt i32 %491, 10
  %497 = or i1 %495, %496
  br i1 %497, label %originalBB134, label %originalBB134alteredBB

originalBB134:                                    ; preds = %489, %originalBB134alteredBB
  %498 = getelementptr inbounds %struct.stat, %struct.stat* %21, i32 0, i32 1, !dbg !864
  %499 = load i64, i64* %498, align 8, !dbg !864
  store i64 %499, i64* %22, align 8, !dbg !865
  %500 = load i32, i32* @x.13
  %501 = load i32, i32* @y.14
  %502 = sub i32 %500, 1
  %503 = mul i32 %500, %502
  %504 = urem i32 %503, 2
  %505 = icmp eq i32 %504, 0
  %506 = icmp slt i32 %501, 10
  %507 = or i1 %505, %506
  br i1 %507, label %originalBBpart2136, label %originalBB134alteredBB

originalBBpart2136:                               ; preds = %originalBB134
  br label %508, !dbg !866

508:                                              ; preds = %originalBBpart2136, %originalBBpart2124
  %509 = load i32, i32* @x.13
  %510 = load i32, i32* @y.14
  %511 = sub i32 %509, 1
  %512 = mul i32 %509, %511
  %513 = urem i32 %512, 2
  %514 = icmp eq i32 %513, 0
  %515 = icmp slt i32 %510, 10
  %516 = or i1 %514, %515
  br i1 %516, label %originalBB138, label %originalBB138alteredBB

originalBB138:                                    ; preds = %508, %originalBB138alteredBB
  %517 = load i64, i64* %22, align 8, !dbg !867
  %518 = load %struct.stat*, %struct.stat** %12, align 8, !dbg !869
  %519 = getelementptr inbounds %struct.stat, %struct.stat* %518, i32 0, i32 1, !dbg !870
  %520 = load i64, i64* %519, align 8, !dbg !870
  %521 = icmp ne i64 %517, %520, !dbg !871
  %522 = load i32, i32* @x.13
  %523 = load i32, i32* @y.14
  %524 = sub i32 %522, 1
  %525 = mul i32 %522, %524
  %526 = urem i32 %525, 2
  %527 = icmp eq i32 %526, 0
  %528 = icmp slt i32 %523, 10
  %529 = or i1 %527, %528
  br i1 %529, label %originalBBpart2140, label %originalBB138alteredBB

originalBBpart2140:                               ; preds = %originalBB138
  br i1 %521, label %530, label %547, !dbg !872

530:                                              ; preds = %originalBBpart2140
  %531 = load i32, i32* @x.13
  %532 = load i32, i32* @y.14
  %533 = sub i32 %531, 1
  %534 = mul i32 %531, %533
  %535 = urem i32 %534, 2
  %536 = icmp eq i32 %535, 0
  %537 = icmp slt i32 %532, 10
  %538 = or i1 %536, %537
  br i1 %538, label %originalBB142, label %originalBB142alteredBB

originalBB142:                                    ; preds = %530, %originalBB142alteredBB
  %539 = load i32, i32* @x.13
  %540 = load i32, i32* @y.14
  %541 = sub i32 %539, 1
  %542 = mul i32 %539, %541
  %543 = urem i32 %542, 2
  %544 = icmp eq i32 %543, 0
  %545 = icmp slt i32 %540, 10
  %546 = or i1 %544, %545
  br i1 %546, label %originalBBpart2144, label %originalBB142alteredBB

originalBBpart2144:                               ; preds = %originalBB142
  br label %280, !dbg !873, !llvm.loop !862

547:                                              ; preds = %originalBBpart2140
  %548 = load i32, i32* @x.13
  %549 = load i32, i32* @y.14
  %550 = sub i32 %548, 1
  %551 = mul i32 %548, %550
  %552 = urem i32 %551, 2
  %553 = icmp eq i32 %552, 0
  %554 = icmp slt i32 %549, 10
  %555 = or i1 %553, %554
  br i1 %555, label %originalBB146, label %originalBB146alteredBB

originalBB146:                                    ; preds = %547, %originalBB146alteredBB
  %556 = load i8, i8* %18, align 1, !dbg !874
  %557 = trunc i8 %556 to i1, !dbg !874
  %558 = load i32, i32* @x.13
  %559 = load i32, i32* @y.14
  %560 = sub i32 %558, 1
  %561 = mul i32 %558, %560
  %562 = urem i32 %561, 2
  %563 = icmp eq i32 %562, 0
  %564 = icmp slt i32 %559, 10
  %565 = or i1 %563, %564
  br i1 %565, label %originalBBpart2148, label %originalBB146alteredBB

originalBBpart2148:                               ; preds = %originalBB146
  br i1 %557, label %566, label %589, !dbg !876

566:                                              ; preds = %originalBBpart2148
  %567 = load i32, i32* @x.13
  %568 = load i32, i32* @y.14
  %569 = sub i32 %567, 1
  %570 = mul i32 %567, %569
  %571 = urem i32 %570, 2
  %572 = icmp eq i32 %571, 0
  %573 = icmp slt i32 %568, 10
  %574 = or i1 %572, %573
  br i1 %574, label %originalBB150, label %originalBB150alteredBB

originalBB150:                                    ; preds = %566, %originalBB150alteredBB
  %575 = getelementptr inbounds %struct.stat, %struct.stat* %21, i32 0, i32 0, !dbg !877
  %576 = load i64, i64* %575, align 8, !dbg !877
  %577 = load %struct.stat*, %struct.stat** %12, align 8, !dbg !878
  %578 = getelementptr inbounds %struct.stat, %struct.stat* %577, i32 0, i32 0, !dbg !879
  %579 = load i64, i64* %578, align 8, !dbg !879
  %580 = icmp eq i64 %576, %579, !dbg !880
  %581 = load i32, i32* @x.13
  %582 = load i32, i32* @y.14
  %583 = sub i32 %581, 1
  %584 = mul i32 %581, %583
  %585 = urem i32 %584, 2
  %586 = icmp eq i32 %585, 0
  %587 = icmp slt i32 %582, 10
  %588 = or i1 %586, %587
  br i1 %588, label %originalBBpart2152, label %originalBB150alteredBB

originalBBpart2152:                               ; preds = %originalBB150
  br i1 %580, label %589, label %614, !dbg !881

589:                                              ; preds = %originalBBpart2152, %originalBBpart2148
  %590 = load i32, i32* @x.13
  %591 = load i32, i32* @y.14
  %592 = sub i32 %590, 1
  %593 = mul i32 %590, %592
  %594 = urem i32 %593, 2
  %595 = icmp eq i32 %594, 0
  %596 = icmp slt i32 %591, 10
  %597 = or i1 %595, %596
  br i1 %597, label %originalBB154, label %originalBB154alteredBB

originalBB154:                                    ; preds = %589, %originalBB154alteredBB
  %598 = load %struct.file_name*, %struct.file_name** %13, align 8, !dbg !882
  %599 = load %struct.dirent*, %struct.dirent** %20, align 8, !dbg !884
  %600 = getelementptr inbounds %struct.dirent, %struct.dirent* %599, i32 0, i32 4, !dbg !885
  %601 = getelementptr inbounds [256 x i8], [256 x i8]* %600, i64 0, i64 0, !dbg !884
  %602 = load %struct.dirent*, %struct.dirent** %20, align 8, !dbg !886
  %603 = getelementptr inbounds %struct.dirent, %struct.dirent* %602, i32 0, i32 4, !dbg !886
  %604 = getelementptr inbounds [256 x i8], [256 x i8]* %603, i64 0, i64 0, !dbg !886
  %605 = call i64 @strlen(i8* %604) #13, !dbg !886
  call void @file_name_prepend(%struct.file_name* %598, i8* %601, i64 %605), !dbg !887
  store i8 1, i8* %19, align 1, !dbg !888
  %606 = load i32, i32* @x.13
  %607 = load i32, i32* @y.14
  %608 = sub i32 %606, 1
  %609 = mul i32 %606, %608
  %610 = urem i32 %609, 2
  %611 = icmp eq i32 %610, 0
  %612 = icmp slt i32 %607, 10
  %613 = or i1 %611, %612
  br i1 %613, label %originalBBpart2156, label %originalBB154alteredBB

originalBBpart2156:                               ; preds = %originalBB154
  br label %615, !dbg !889

614:                                              ; preds = %originalBBpart2152
  br label %280, !dbg !803, !llvm.loop !862

615:                                              ; preds = %originalBBpart2156, %originalBBpart2116
  %616 = load i32, i32* @x.13
  %617 = load i32, i32* @y.14
  %618 = sub i32 %616, 1
  %619 = mul i32 %616, %618
  %620 = urem i32 %619, 2
  %621 = icmp eq i32 %620, 0
  %622 = icmp slt i32 %617, 10
  %623 = or i1 %621, %622
  br i1 %623, label %originalBB158, label %originalBB158alteredBB

originalBB158:                                    ; preds = %615, %originalBB158alteredBB
  %624 = load %struct.__dirstream*, %struct.__dirstream** %15, align 8, !dbg !890
  %625 = icmp eq %struct.__dirstream* %624, null, !dbg !892
  %626 = load i32, i32* @x.13
  %627 = load i32, i32* @y.14
  %628 = sub i32 %626, 1
  %629 = mul i32 %626, %628
  %630 = urem i32 %629, 2
  %631 = icmp eq i32 %630, 0
  %632 = icmp slt i32 %627, 10
  %633 = or i1 %631, %632
  br i1 %633, label %originalBBpart2160, label %originalBB158alteredBB

originalBBpart2160:                               ; preds = %originalBB158
  br i1 %625, label %638, label %634, !dbg !893

634:                                              ; preds = %originalBBpart2160
  %635 = load %struct.__dirstream*, %struct.__dirstream** %15, align 8, !dbg !894
  %636 = call i32 @closedir(%struct.__dirstream* %635), !dbg !895
  %637 = icmp ne i32 %636, 0, !dbg !896
  br i1 %637, label %638, label %661, !dbg !897

638:                                              ; preds = %634, %originalBBpart2160
  %639 = load i32, i32* @x.13
  %640 = load i32, i32* @y.14
  %641 = sub i32 %639, 1
  %642 = mul i32 %639, %641
  %643 = urem i32 %642, 2
  %644 = icmp eq i32 %643, 0
  %645 = icmp slt i32 %640, 10
  %646 = or i1 %644, %645
  br i1 %646, label %originalBB162, label %originalBB162alteredBB

originalBB162:                                    ; preds = %638, %originalBB162alteredBB
  %647 = call i32* @__errno_location() #15, !dbg !898
  %648 = load i32, i32* %647, align 4, !dbg !898
  %649 = call i8* @gettext(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.45, i64 0, i64 0)) #10, !dbg !898
  %650 = load i64, i64* %14, align 8, !dbg !898
  %651 = call i8* @nth_parent(i64 %650), !dbg !898
  %652 = call i8* @quote(i8* %651), !dbg !898
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %648, i8* %649, i8* %652), !dbg !898
  %653 = load i32, i32* @x.13
  %654 = load i32, i32* @y.14
  %655 = sub i32 %653, 1
  %656 = mul i32 %653, %655
  %657 = urem i32 %656, 2
  %658 = icmp eq i32 %657, 0
  %659 = icmp slt i32 %654, 10
  %660 = or i1 %658, %659
  br i1 %660, label %originalBBpart2164, label %originalBB162alteredBB

originalBBpart2164:                               ; preds = %originalBB162
  unreachable, !dbg !898

661:                                              ; preds = %634
  %662 = load i32, i32* @x.13
  %663 = load i32, i32* @y.14
  %664 = sub i32 %662, 1
  %665 = mul i32 %662, %664
  %666 = urem i32 %665, 2
  %667 = icmp eq i32 %666, 0
  %668 = icmp slt i32 %663, 10
  %669 = or i1 %667, %668
  br i1 %669, label %originalBB166, label %originalBB166alteredBB

originalBB166:                                    ; preds = %661, %originalBB166alteredBB
  %670 = load i8, i8* %19, align 1, !dbg !900
  %671 = trunc i8 %670 to i1, !dbg !900
  %672 = load i32, i32* @x.13
  %673 = load i32, i32* @y.14
  %674 = sub i32 %672, 1
  %675 = mul i32 %672, %674
  %676 = urem i32 %675, 2
  %677 = icmp eq i32 %676, 0
  %678 = icmp slt i32 %673, 10
  %679 = or i1 %677, %678
  br i1 %679, label %originalBBpart2168, label %originalBB166alteredBB

originalBBpart2168:                               ; preds = %originalBB166
  br i1 %671, label %701, label %680, !dbg !902

680:                                              ; preds = %originalBBpart2168
  %681 = load i32, i32* @x.13
  %682 = load i32, i32* @y.14
  %683 = sub i32 %681, 1
  %684 = mul i32 %681, %683
  %685 = urem i32 %684, 2
  %686 = icmp eq i32 %685, 0
  %687 = icmp slt i32 %682, 10
  %688 = or i1 %686, %687
  br i1 %688, label %originalBB170, label %originalBB170alteredBB

originalBB170:                                    ; preds = %680, %originalBB170alteredBB
  %689 = call i8* @gettext(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.46, i64 0, i64 0)) #10, !dbg !903
  %690 = load i64, i64* %14, align 8, !dbg !903
  %691 = call i8* @nth_parent(i64 %690), !dbg !903
  %692 = call i8* @quote(i8* %691), !dbg !903
  call void (i32, i32, i8*, ...) @error(i32 1, i32 0, i8* %689, i8* %692), !dbg !903
  %693 = load i32, i32* @x.13
  %694 = load i32, i32* @y.14
  %695 = sub i32 %693, 1
  %696 = mul i32 %693, %695
  %697 = urem i32 %696, 2
  %698 = icmp eq i32 %697, 0
  %699 = icmp slt i32 %694, 10
  %700 = or i1 %698, %699
  br i1 %700, label %originalBBpart2172, label %originalBB170alteredBB

originalBBpart2172:                               ; preds = %originalBB170
  unreachable, !dbg !903

701:                                              ; preds = %originalBBpart2168
  %702 = load i32, i32* @x.13
  %703 = load i32, i32* @y.14
  %704 = sub i32 %702, 1
  %705 = mul i32 %702, %704
  %706 = urem i32 %705, 2
  %707 = icmp eq i32 %706, 0
  %708 = icmp slt i32 %703, 10
  %709 = or i1 %707, %708
  br i1 %709, label %originalBB174, label %originalBB174alteredBB

originalBB174:                                    ; preds = %701, %originalBB174alteredBB
  %710 = load %struct.stat*, %struct.stat** %12, align 8, !dbg !904
  %711 = bitcast %struct.stat* %710 to i8*, !dbg !905
  %712 = bitcast %struct.stat* %17 to i8*, !dbg !905
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %711, i8* align 8 %712, i64 144, i1 false), !dbg !905
  %713 = load i32, i32* @x.13
  %714 = load i32, i32* @y.14
  %715 = sub i32 %713, 1
  %716 = mul i32 %713, %715
  %717 = urem i32 %716, 2
  %718 = icmp eq i32 %717, 0
  %719 = icmp slt i32 %714, 10
  %720 = or i1 %718, %719
  br i1 %720, label %originalBBpart2176, label %originalBB174alteredBB

originalBBpart2176:                               ; preds = %originalBB174
  ret void, !dbg !906

originalBBalteredBB:                              ; preds = %originalBB, %3
  %721 = alloca %struct.stat*, align 8
  %722 = alloca %struct.file_name*, align 8
  %723 = alloca i64, align 8
  %724 = alloca %struct.__dirstream*, align 8
  %725 = alloca i32, align 4
  %726 = alloca %struct.stat, align 8
  %727 = alloca i8, align 1
  %728 = alloca i8, align 1
  %729 = alloca %struct.dirent*, align 8
  %730 = alloca %struct.stat, align 8
  %731 = alloca i64, align 8
  %732 = alloca i32, align 4
  store %struct.stat* %0, %struct.stat** %721, align 8
  call void @llvm.dbg.declare(metadata %struct.stat** %721, metadata !907, metadata !DIExpression()), !dbg !748
  store %struct.file_name* %1, %struct.file_name** %722, align 8
  call void @llvm.dbg.declare(metadata %struct.file_name** %722, metadata !951, metadata !DIExpression()), !dbg !750
  store i64 %2, i64* %723, align 8
  call void @llvm.dbg.declare(metadata i64* %723, metadata !952, metadata !DIExpression()), !dbg !752
  call void @llvm.dbg.declare(metadata %struct.__dirstream** %724, metadata !953, metadata !DIExpression()), !dbg !758
  call void @llvm.dbg.declare(metadata i32* %725, metadata !954, metadata !DIExpression()), !dbg !760
  call void @llvm.dbg.declare(metadata %struct.stat* %726, metadata !955, metadata !DIExpression()), !dbg !762
  call void @llvm.dbg.declare(metadata i8* %727, metadata !956, metadata !DIExpression()), !dbg !764
  call void @llvm.dbg.declare(metadata i8* %728, metadata !957, metadata !DIExpression()), !dbg !766
  %733 = call %struct.__dirstream* @opendir(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i64 0, i64 0)), !dbg !767
  store %struct.__dirstream* %733, %struct.__dirstream** %724, align 8, !dbg !768
  %734 = load %struct.__dirstream*, %struct.__dirstream** %724, align 8, !dbg !769
  %735 = icmp eq %struct.__dirstream* %734, null, !dbg !771
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %35
  %736 = call i32* @__errno_location() #15, !dbg !773
  %737 = load i32, i32* %736, align 4, !dbg !773
  %738 = call i8* @gettext(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.43, i64 0, i64 0)) #10, !dbg !773
  %739 = load i64, i64* %14, align 8, !dbg !773
  %740 = call i8* @nth_parent(i64 %739), !dbg !773
  %741 = call i8* @quote(i8* %740), !dbg !773
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %737, i8* %738, i8* %741), !dbg !773
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %58
  %742 = load %struct.__dirstream*, %struct.__dirstream** %15, align 8, !dbg !774
  %743 = call i32 @dirfd(%struct.__dirstream* %742) #10, !dbg !775
  store i32 %743, i32* %16, align 4, !dbg !776
  %744 = load i32, i32* %16, align 4, !dbg !777
  %745 = icmp sle i32 0, %744, !dbg !779
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %79
  %746 = load i32, i32* %16, align 4, !dbg !781
  %747 = call i32 @fchdir(i32 %746) #10, !dbg !782
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %98
  %748 = call i32 @chdir(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i64 0, i64 0)) #10, !dbg !783
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %116
  %749 = icmp slt i32 %117, 0, !dbg !784
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %135
  %750 = call i32* @__errno_location() #15, !dbg !786
  %751 = load i32, i32* %750, align 4, !dbg !786
  %752 = call i8* @gettext(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.44, i64 0, i64 0)) #10, !dbg !786
  %753 = load i64, i64* %14, align 8, !dbg !786
  %754 = call i8* @nth_parent(i64 %753), !dbg !786
  %755 = call i8* @quote(i8* %754), !dbg !786
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %751, i8* %752, i8* %755), !dbg !786
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %158
  %756 = load i32, i32* %16, align 4, !dbg !787
  %757 = icmp sle i32 0, %756, !dbg !789
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %177
  %758 = load i32, i32* %16, align 4, !dbg !791
  %759 = call i32 @fstat(i32 %758, %struct.stat* %17) #10, !dbg !792
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %196
  %760 = call i32 @stat(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i64 0, i64 0), %struct.stat* %17) #10, !dbg !793
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %214
  %761 = icmp slt i32 %215, 0, !dbg !794
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %233
  %762 = call i32* @__errno_location() #15, !dbg !796
  %763 = load i32, i32* %762, align 4, !dbg !796
  %764 = call i8* @gettext(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.41, i64 0, i64 0)) #10, !dbg !796
  %765 = load i64, i64* %14, align 8, !dbg !796
  %766 = call i8* @nth_parent(i64 %765), !dbg !796
  %767 = call i8* @quote(i8* %766), !dbg !796
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %763, i8* %764, i8* %767), !dbg !796
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %256
  %768 = getelementptr inbounds %struct.stat, %struct.stat* %17, i32 0, i32 0, !dbg !797
  %769 = load i64, i64* %768, align 8, !dbg !797
  %770 = load %struct.stat*, %struct.stat** %12, align 8, !dbg !798
  %771 = getelementptr inbounds %struct.stat, %struct.stat* %770, i32 0, i32 0, !dbg !799
  %772 = load i64, i64* %771, align 8, !dbg !799
  %773 = icmp ne i64 %769, %772, !dbg !800
  %774 = zext i1 %773 to i8, !dbg !801
  store i8 %774, i8* %18, align 1, !dbg !801
  store i8 0, i8* %19, align 1, !dbg !802
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %280
  %775 = call i32* @__errno_location() #15, !dbg !821
  store i32 0, i32* %775, align 4, !dbg !822
  %776 = load %struct.__dirstream*, %struct.__dirstream** %15, align 8, !dbg !823
  %777 = call %struct.dirent* @readdir_ignoring_dot_and_dotdot(%struct.__dirstream* %776), !dbg !825
  store %struct.dirent* %777, %struct.dirent** %20, align 8, !dbg !826
  %778 = icmp eq %struct.dirent* %777, null, !dbg !827
  br label %originalBB50

originalBB54alteredBB:                            ; preds = %originalBB54, %301
  %779 = call i32* @__errno_location() #15, !dbg !829
  %780 = load i32, i32* %779, align 4, !dbg !829
  %781 = icmp ne i32 %780, 0, !dbg !829
  br label %originalBB54

originalBB58alteredBB:                            ; preds = %originalBB58, %321
  %782 = call i32* @__errno_location() #15, !dbg !836
  %783 = load i32, i32* %782, align 4, !dbg !836
  store i32 %783, i32* %23, align 4, !dbg !835
  %784 = load %struct.__dirstream*, %struct.__dirstream** %15, align 8, !dbg !837
  %785 = call i32 @closedir(%struct.__dirstream* %784), !dbg !838
  %786 = load i32, i32* %23, align 4, !dbg !839
  %787 = call i32* @__errno_location() #15, !dbg !840
  store i32 %786, i32* %787, align 4, !dbg !841
  %_ = sub i32 %783, 5
  %gen = mul i32 %_, 5
  %_59 = sub i32 %783, 5
  %gen60 = mul i32 %_59, 5
  %788 = add i32 %783, 5
  %_61 = shl i32 %786, 2
  %789 = add i32 %786, 2
  %_62 = sub i32 %783, 4
  %gen63 = mul i32 %_62, 4
  %_64 = sub i32 0, %783
  %gen65 = add i32 %_64, 4
  %790 = mul i32 %783, 4
  %_66 = shl i32 %788, %788
  %791 = mul i32 %788, %788
  %_67 = sub i32 %791, %791
  %gen68 = mul i32 %_67, %791
  %792 = mul i32 %791, %791
  %_69 = shl i32 %789, %789
  %793 = mul i32 %789, %789
  %_70 = sub i32 0, %793
  %gen71 = add i32 %_70, %793
  %_72 = sub i32 0, %793
  %gen73 = add i32 %_72, %793
  %794 = mul i32 %793, %793
  %_74 = sub i32 0, %790
  %gen75 = add i32 %_74, %790
  %_76 = sub i32 0, %790
  %gen77 = add i32 %_76, %790
  %_78 = sub i32 0, %790
  %gen79 = add i32 %_78, %790
  %_80 = shl i32 %790, %790
  %_81 = shl i32 %790, %790
  %795 = mul i32 %790, %790
  %_82 = sub i32 %795, %795
  %gen83 = mul i32 %_82, %795
  %796 = mul i32 %795, %795
  %_84 = sub i32 0, %792
  %gen85 = add i32 %_84, %794
  %_86 = shl i32 %792, %794
  %_87 = shl i32 %792, %794
  %_88 = shl i32 %792, %794
  %_89 = shl i32 %792, %794
  %_90 = sub i32 0, %792
  %gen91 = add i32 %_90, %794
  %_92 = sub i32 %792, %794
  %gen93 = mul i32 %_92, %794
  %_94 = shl i32 %792, %794
  %_95 = sub i32 %792, %794
  %gen96 = mul i32 %_95, %794
  %_97 = shl i32 %792, %794
  %797 = add i32 %792, %794
  %_98 = shl i32 %797, %796
  %_99 = sub i32 0, %797
  %gen100 = add i32 %_99, %796
  %798 = sub i32 %797, %796
  %_101 = shl i32 %798, 3
  %799 = mul i32 %798, 3
  %_102 = shl i32 %799, 4
  %800 = add i32 %799, 4
  %801 = icmp eq i32 %800, 4
  br label %originalBB58

originalBB106alteredBB:                           ; preds = %originalBB106, %358
  br label %originalBB106

originalBB110alteredBB:                           ; preds = %originalBB110, %375
  store %struct.__dirstream* null, %struct.__dirstream** %15, align 8, !dbg !842
  br label %originalBB110

originalBB114alteredBB:                           ; preds = %originalBB114, %392
  br label %originalBB114

originalBB118alteredBB:                           ; preds = %originalBB118, %409
  %802 = load %struct.dirent*, %struct.dirent** %20, align 8, !dbg !845
  %803 = getelementptr inbounds %struct.dirent, %struct.dirent* %802, i32 0, i32 0, !dbg !845
  %804 = load i64, i64* %803, align 8, !dbg !845
  store i64 %804, i64* %22, align 8, !dbg !846
  %805 = load i64, i64* %22, align 8, !dbg !847
  %806 = icmp eq i64 %805, 0, !dbg !849
  br label %originalBB118

originalBB122alteredBB:                           ; preds = %originalBB122, %431
  %807 = load i8, i8* %18, align 1, !dbg !851
  %808 = trunc i8 %807 to i1, !dbg !851
  br label %originalBB122

originalBB126alteredBB:                           ; preds = %originalBB126, %450
  %809 = load %struct.dirent*, %struct.dirent** %20, align 8, !dbg !853
  %810 = getelementptr inbounds %struct.dirent, %struct.dirent* %809, i32 0, i32 4, !dbg !856
  %811 = getelementptr inbounds [256 x i8], [256 x i8]* %810, i64 0, i64 0, !dbg !853
  %812 = call i32 @lstat(i8* %811, %struct.stat* %21) #10, !dbg !857
  %813 = icmp slt i32 %812, 0, !dbg !858
  br label %originalBB126

originalBB130alteredBB:                           ; preds = %originalBB130, %472
  br label %originalBB130

originalBB134alteredBB:                           ; preds = %originalBB134, %489
  %814 = getelementptr inbounds %struct.stat, %struct.stat* %21, i32 0, i32 1, !dbg !864
  %815 = load i64, i64* %814, align 8, !dbg !864
  store i64 %815, i64* %22, align 8, !dbg !865
  br label %originalBB134

originalBB138alteredBB:                           ; preds = %originalBB138, %508
  %816 = load i64, i64* %22, align 8, !dbg !867
  %817 = load %struct.stat*, %struct.stat** %12, align 8, !dbg !869
  %818 = getelementptr inbounds %struct.stat, %struct.stat* %817, i32 0, i32 1, !dbg !870
  %819 = load i64, i64* %818, align 8, !dbg !870
  %820 = icmp ne i64 %816, %819, !dbg !871
  br label %originalBB138

originalBB142alteredBB:                           ; preds = %originalBB142, %530
  br label %originalBB142

originalBB146alteredBB:                           ; preds = %originalBB146, %547
  %821 = load i8, i8* %18, align 1, !dbg !874
  %822 = trunc i8 %821 to i1, !dbg !874
  br label %originalBB146

originalBB150alteredBB:                           ; preds = %originalBB150, %566
  %823 = getelementptr inbounds %struct.stat, %struct.stat* %21, i32 0, i32 0, !dbg !877
  %824 = load i64, i64* %823, align 8, !dbg !877
  %825 = load %struct.stat*, %struct.stat** %12, align 8, !dbg !878
  %826 = getelementptr inbounds %struct.stat, %struct.stat* %825, i32 0, i32 0, !dbg !879
  %827 = load i64, i64* %826, align 8, !dbg !879
  %828 = icmp eq i64 %824, %827, !dbg !880
  br label %originalBB150

originalBB154alteredBB:                           ; preds = %originalBB154, %589
  %829 = load %struct.file_name*, %struct.file_name** %13, align 8, !dbg !882
  %830 = load %struct.dirent*, %struct.dirent** %20, align 8, !dbg !884
  %831 = getelementptr inbounds %struct.dirent, %struct.dirent* %830, i32 0, i32 4, !dbg !885
  %832 = getelementptr inbounds [256 x i8], [256 x i8]* %831, i64 0, i64 0, !dbg !884
  %833 = load %struct.dirent*, %struct.dirent** %20, align 8, !dbg !886
  %834 = getelementptr inbounds %struct.dirent, %struct.dirent* %833, i32 0, i32 4, !dbg !886
  %835 = getelementptr inbounds [256 x i8], [256 x i8]* %834, i64 0, i64 0, !dbg !886
  %836 = call i64 @strlen(i8* %835) #13, !dbg !886
  call void @file_name_prepend(%struct.file_name* %829, i8* %832, i64 %836), !dbg !887
  store i8 1, i8* %19, align 1, !dbg !888
  br label %originalBB154

originalBB158alteredBB:                           ; preds = %originalBB158, %615
  %837 = load %struct.__dirstream*, %struct.__dirstream** %15, align 8, !dbg !890
  %838 = icmp eq %struct.__dirstream* %837, null, !dbg !892
  br label %originalBB158

originalBB162alteredBB:                           ; preds = %originalBB162, %638
  %839 = call i32* @__errno_location() #15, !dbg !898
  %840 = load i32, i32* %839, align 4, !dbg !898
  %841 = call i8* @gettext(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.45, i64 0, i64 0)) #10, !dbg !898
  %842 = load i64, i64* %14, align 8, !dbg !898
  %843 = call i8* @nth_parent(i64 %842), !dbg !898
  %844 = call i8* @quote(i8* %843), !dbg !898
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %840, i8* %841, i8* %844), !dbg !898
  br label %originalBB162

originalBB166alteredBB:                           ; preds = %originalBB166, %661
  %845 = load i8, i8* %19, align 1, !dbg !900
  %846 = trunc i8 %845 to i1, !dbg !900
  br label %originalBB166

originalBB170alteredBB:                           ; preds = %originalBB170, %680
  %847 = call i8* @gettext(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.46, i64 0, i64 0)) #10, !dbg !903
  %848 = load i64, i64* %14, align 8, !dbg !903
  %849 = call i8* @nth_parent(i64 %848), !dbg !903
  %850 = call i8* @quote(i8* %849), !dbg !903
  call void (i32, i32, i8*, ...) @error(i32 1, i32 0, i8* %847, i8* %850), !dbg !903
  br label %originalBB170

originalBB174alteredBB:                           ; preds = %originalBB174, %701
  %851 = load %struct.stat*, %struct.stat** %12, align 8, !dbg !904
  %852 = bitcast %struct.stat* %851 to i8*, !dbg !905
  %853 = bitcast %struct.stat* %17 to i8*, !dbg !905
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %852, i8* align 8 %853, i64 144, i1 false), !dbg !905
  br label %originalBB174
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @file_name_prepend(%struct.file_name*, i8*, i64) #4 !dbg !958 {
  %4 = load i32, i32* @x.15
  %5 = load i32, i32* @y.16
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca %struct.file_name*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i8*, align 8
  %18 = alloca i64, align 8
  store %struct.file_name* %0, %struct.file_name** %12, align 8
  call void @llvm.dbg.declare(metadata %struct.file_name** %12, metadata !961, metadata !DIExpression()), !dbg !962
  store i8* %1, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !963, metadata !DIExpression()), !dbg !964
  store i64 %2, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !965, metadata !DIExpression()), !dbg !966
  call void @llvm.dbg.declare(metadata i64* %15, metadata !967, metadata !DIExpression()), !dbg !968
  %19 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !969
  %20 = getelementptr inbounds %struct.file_name, %struct.file_name* %19, i32 0, i32 2, !dbg !970
  %21 = load i8*, i8** %20, align 8, !dbg !970
  %22 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !971
  %23 = getelementptr inbounds %struct.file_name, %struct.file_name* %22, i32 0, i32 0, !dbg !972
  %24 = load i8*, i8** %23, align 8, !dbg !972
  %25 = ptrtoint i8* %21 to i64, !dbg !973
  %26 = ptrtoint i8* %24 to i64, !dbg !973
  %27 = sub i64 %25, %26, !dbg !973
  store i64 %27, i64* %15, align 8, !dbg !968
  %28 = load i64, i64* %15, align 8, !dbg !974
  %29 = load i64, i64* %14, align 8, !dbg !976
  %30 = add i64 1, %29, !dbg !977
  %31 = icmp ult i64 %28, %30, !dbg !978
  %32 = load i32, i32* @x.15
  %33 = load i32, i32* @y.16
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %31, label %40, label %98, !dbg !979

40:                                               ; preds = %originalBBpart2
  call void @llvm.dbg.declare(metadata i64* %16, metadata !980, metadata !DIExpression()), !dbg !982
  %41 = load i32, i32* @x.15
  %42 = load i32, i32* @y.16
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %40, %originalBB6alteredBB
  %49 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !983
  %50 = getelementptr inbounds %struct.file_name, %struct.file_name* %49, i32 0, i32 1, !dbg !984
  %51 = load i64, i64* %50, align 8, !dbg !984
  %52 = add i64 %51, 1, !dbg !985
  %53 = load i64, i64* %14, align 8, !dbg !986
  %54 = add i64 %52, %53, !dbg !987
  store i64 %54, i64* %16, align 8, !dbg !982
  call void @llvm.dbg.declare(metadata i8** %17, metadata !988, metadata !DIExpression()), !dbg !989
  %55 = load i64, i64* %16, align 8, !dbg !990
  %56 = call noalias i8* @xnmalloc(i64 2, i64 %55), !dbg !991
  store i8* %56, i8** %17, align 8, !dbg !989
  call void @llvm.dbg.declare(metadata i64* %18, metadata !992, metadata !DIExpression()), !dbg !993
  %57 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !994
  %58 = getelementptr inbounds %struct.file_name, %struct.file_name* %57, i32 0, i32 1, !dbg !995
  %59 = load i64, i64* %58, align 8, !dbg !995
  %60 = load i64, i64* %15, align 8, !dbg !996
  %61 = sub i64 %59, %60, !dbg !997
  store i64 %61, i64* %18, align 8, !dbg !993
  %62 = load i8*, i8** %17, align 8, !dbg !998
  %63 = load i64, i64* %16, align 8, !dbg !999
  %64 = mul i64 2, %63, !dbg !1000
  %65 = getelementptr inbounds i8, i8* %62, i64 %64, !dbg !1001
  %66 = load i64, i64* %18, align 8, !dbg !1002
  %67 = sub i64 0, %66, !dbg !1003
  %68 = getelementptr inbounds i8, i8* %65, i64 %67, !dbg !1003
  %69 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !1004
  %70 = getelementptr inbounds %struct.file_name, %struct.file_name* %69, i32 0, i32 2, !dbg !1005
  store i8* %68, i8** %70, align 8, !dbg !1006
  %71 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !1007
  %72 = getelementptr inbounds %struct.file_name, %struct.file_name* %71, i32 0, i32 2, !dbg !1008
  %73 = load i8*, i8** %72, align 8, !dbg !1008
  %74 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !1009
  %75 = getelementptr inbounds %struct.file_name, %struct.file_name* %74, i32 0, i32 0, !dbg !1010
  %76 = load i8*, i8** %75, align 8, !dbg !1010
  %77 = load i64, i64* %15, align 8, !dbg !1011
  %78 = getelementptr inbounds i8, i8* %76, i64 %77, !dbg !1012
  %79 = load i64, i64* %18, align 8, !dbg !1013
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %73, i8* align 1 %78, i64 %79, i1 false), !dbg !1014
  %80 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !1015
  %81 = getelementptr inbounds %struct.file_name, %struct.file_name* %80, i32 0, i32 0, !dbg !1016
  %82 = load i8*, i8** %81, align 8, !dbg !1016
  call void @free(i8* %82) #10, !dbg !1017
  %83 = load i8*, i8** %17, align 8, !dbg !1018
  %84 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !1019
  %85 = getelementptr inbounds %struct.file_name, %struct.file_name* %84, i32 0, i32 0, !dbg !1020
  store i8* %83, i8** %85, align 8, !dbg !1021
  %86 = load i64, i64* %16, align 8, !dbg !1022
  %87 = mul i64 2, %86, !dbg !1023
  %88 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !1024
  %89 = getelementptr inbounds %struct.file_name, %struct.file_name* %88, i32 0, i32 1, !dbg !1025
  store i64 %87, i64* %89, align 8, !dbg !1026
  %90 = load i32, i32* @x.15
  %91 = load i32, i32* @y.16
  %92 = sub i32 %90, 1
  %93 = mul i32 %90, %92
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %91, 10
  %97 = or i1 %95, %96
  br i1 %97, label %originalBBpart239, label %originalBB6alteredBB

originalBBpart239:                                ; preds = %originalBB6
  br label %98, !dbg !1027

98:                                               ; preds = %originalBBpart239, %originalBBpart2
  %99 = load i32, i32* @x.15
  %100 = load i32, i32* @y.16
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBB41, label %originalBB41alteredBB

originalBB41:                                     ; preds = %98, %originalBB41alteredBB
  %107 = load i64, i64* %14, align 8, !dbg !1028
  %108 = add i64 1, %107, !dbg !1029
  %109 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !1030
  %110 = getelementptr inbounds %struct.file_name, %struct.file_name* %109, i32 0, i32 2, !dbg !1031
  %111 = load i8*, i8** %110, align 8, !dbg !1032
  %112 = sub i64 0, %108, !dbg !1032
  %113 = getelementptr inbounds i8, i8* %111, i64 %112, !dbg !1032
  store i8* %113, i8** %110, align 8, !dbg !1032
  %114 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !1033
  %115 = getelementptr inbounds %struct.file_name, %struct.file_name* %114, i32 0, i32 2, !dbg !1034
  %116 = load i8*, i8** %115, align 8, !dbg !1034
  %117 = getelementptr inbounds i8, i8* %116, i64 0, !dbg !1033
  store i8 47, i8* %117, align 1, !dbg !1035
  %118 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !1036
  %119 = getelementptr inbounds %struct.file_name, %struct.file_name* %118, i32 0, i32 2, !dbg !1037
  %120 = load i8*, i8** %119, align 8, !dbg !1037
  %121 = getelementptr inbounds i8, i8* %120, i64 1, !dbg !1038
  %122 = load i8*, i8** %13, align 8, !dbg !1039
  %123 = load i64, i64* %14, align 8, !dbg !1040
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %121, i8* align 1 %122, i64 %123, i1 false), !dbg !1041
  %124 = load i32, i32* @x.15
  %125 = load i32, i32* @y.16
  %126 = sub i32 %124, 1
  %127 = mul i32 %124, %126
  %128 = urem i32 %127, 2
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %125, 10
  %131 = or i1 %129, %130
  br i1 %131, label %originalBBpart257, label %originalBB41alteredBB

originalBBpart257:                                ; preds = %originalBB41
  ret void, !dbg !1042

originalBBalteredBB:                              ; preds = %originalBB, %3
  %132 = alloca %struct.file_name*, align 8
  %133 = alloca i8*, align 8
  %134 = alloca i64, align 8
  %135 = alloca i64, align 8
  %136 = alloca i64, align 8
  %137 = alloca i8*, align 8
  %138 = alloca i64, align 8
  store %struct.file_name* %0, %struct.file_name** %132, align 8
  call void @llvm.dbg.declare(metadata %struct.file_name** %132, metadata !1043, metadata !DIExpression()), !dbg !962
  store i8* %1, i8** %133, align 8
  call void @llvm.dbg.declare(metadata i8** %133, metadata !1065, metadata !DIExpression()), !dbg !964
  store i64 %2, i64* %134, align 8
  call void @llvm.dbg.declare(metadata i64* %134, metadata !1066, metadata !DIExpression()), !dbg !966
  call void @llvm.dbg.declare(metadata i64* %135, metadata !1067, metadata !DIExpression()), !dbg !968
  %139 = load %struct.file_name*, %struct.file_name** %132, align 8, !dbg !969
  %140 = getelementptr inbounds %struct.file_name, %struct.file_name* %139, i32 0, i32 2, !dbg !970
  %141 = load i8*, i8** %140, align 8, !dbg !970
  %142 = load %struct.file_name*, %struct.file_name** %132, align 8, !dbg !971
  %143 = getelementptr inbounds %struct.file_name, %struct.file_name* %142, i32 0, i32 0, !dbg !972
  %144 = load i8*, i8** %143, align 8, !dbg !972
  %145 = ptrtoint i8* %141 to i64, !dbg !973
  %146 = ptrtoint i8* %144 to i64, !dbg !973
  %_ = shl i64 %145, %146
  %_1 = sub i64 0, %145
  %gen = add i64 %_1, %146
  %147 = sub i64 %145, %146, !dbg !973
  store i64 %147, i64* %135, align 8, !dbg !968
  %148 = load i64, i64* %135, align 8, !dbg !974
  %149 = load i64, i64* %134, align 8, !dbg !976
  %_2 = sub i64 1, %149
  %gen3 = mul i64 %_2, %149
  %_4 = sub i64 0, 1
  %gen5 = add i64 %_4, %149
  %150 = add i64 1, %149, !dbg !977
  %151 = icmp ult i64 %148, %150, !dbg !978
  br label %originalBB

originalBB6alteredBB:                             ; preds = %originalBB6, %40
  %152 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !983
  %153 = getelementptr inbounds %struct.file_name, %struct.file_name* %152, i32 0, i32 1, !dbg !984
  %154 = load i64, i64* %153, align 8, !dbg !984
  %_7 = shl i64 %154, 1
  %_8 = sub i64 0, %154
  %gen9 = add i64 %_8, 1
  %_10 = sub i64 %154, 1
  %gen11 = mul i64 %_10, 1
  %_12 = sub i64 %154, 1
  %gen13 = mul i64 %_12, 1
  %155 = add i64 %154, 1, !dbg !985
  %156 = load i64, i64* %14, align 8, !dbg !986
  %_14 = sub i64 %155, %156
  %gen15 = mul i64 %_14, %156
  %157 = add i64 %155, %156, !dbg !987
  store i64 %157, i64* %16, align 8, !dbg !982
  call void @llvm.dbg.declare(metadata !4, metadata !1068, metadata !DIExpression()), !dbg !989
  %158 = load i64, i64* %16, align 8, !dbg !990
  %159 = call noalias i8* @xnmalloc(i64 2, i64 %158), !dbg !991
  store i8* %159, i8** %17, align 8, !dbg !989
  call void @llvm.dbg.declare(metadata !4, metadata !1092, metadata !DIExpression()), !dbg !993
  %160 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !994
  %161 = getelementptr inbounds %struct.file_name, %struct.file_name* %160, i32 0, i32 1, !dbg !995
  %162 = load i64, i64* %161, align 8, !dbg !995
  %163 = load i64, i64* %15, align 8, !dbg !996
  %164 = sub i64 %162, %163, !dbg !997
  store i64 %164, i64* %18, align 8, !dbg !993
  %165 = load i8*, i8** %17, align 8, !dbg !998
  %166 = load i64, i64* %16, align 8, !dbg !999
  %_16 = sub i64 0, 2
  %gen17 = add i64 %_16, %166
  %_18 = shl i64 2, %166
  %_19 = shl i64 2, %166
  %167 = mul i64 2, %166, !dbg !1000
  %168 = getelementptr inbounds i8, i8* %165, i64 %167, !dbg !1001
  %169 = load i64, i64* %18, align 8, !dbg !1002
  %_20 = sub i64 0, 0
  %gen21 = add i64 %_20, %169
  %_22 = sub i64 0, 0
  %gen23 = add i64 %_22, %169
  %_24 = shl i64 0, %169
  %_25 = shl i64 0, %169
  %_26 = sub i64 0, %169
  %gen27 = mul i64 %_26, %169
  %170 = sub i64 0, %169, !dbg !1003
  %171 = getelementptr inbounds i8, i8* %168, i64 %170, !dbg !1003
  %172 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !1004
  %173 = getelementptr inbounds %struct.file_name, %struct.file_name* %172, i32 0, i32 2, !dbg !1005
  store i8* %171, i8** %173, align 8, !dbg !1006
  %174 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !1007
  %175 = getelementptr inbounds %struct.file_name, %struct.file_name* %174, i32 0, i32 2, !dbg !1008
  %176 = load i8*, i8** %175, align 8, !dbg !1008
  %177 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !1009
  %178 = getelementptr inbounds %struct.file_name, %struct.file_name* %177, i32 0, i32 0, !dbg !1010
  %179 = load i8*, i8** %178, align 8, !dbg !1010
  %180 = load i64, i64* %15, align 8, !dbg !1011
  %181 = getelementptr inbounds i8, i8* %179, i64 %180, !dbg !1012
  %182 = load i64, i64* %18, align 8, !dbg !1013
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %176, i8* align 1 %181, i64 %182, i1 false), !dbg !1014
  %183 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !1015
  %184 = getelementptr inbounds %struct.file_name, %struct.file_name* %183, i32 0, i32 0, !dbg !1016
  %185 = load i8*, i8** %184, align 8, !dbg !1016
  call void @free(i8* %185) #10, !dbg !1017
  %186 = load i8*, i8** %17, align 8, !dbg !1018
  %187 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !1019
  %188 = getelementptr inbounds %struct.file_name, %struct.file_name* %187, i32 0, i32 0, !dbg !1020
  store i8* %186, i8** %188, align 8, !dbg !1021
  %189 = load i64, i64* %16, align 8, !dbg !1022
  %_28 = sub i64 2, %189
  %gen29 = mul i64 %_28, %189
  %_30 = sub i64 0, 2
  %gen31 = add i64 %_30, %189
  %_32 = sub i64 0, 2
  %gen33 = add i64 %_32, %189
  %_34 = sub i64 2, %189
  %gen35 = mul i64 %_34, %189
  %_36 = sub i64 0, 2
  %gen37 = add i64 %_36, %189
  %190 = mul i64 2, %189, !dbg !1023
  %191 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !1024
  %192 = getelementptr inbounds %struct.file_name, %struct.file_name* %191, i32 0, i32 1, !dbg !1025
  store i64 %190, i64* %192, align 8, !dbg !1026
  br label %originalBB6

originalBB41alteredBB:                            ; preds = %originalBB41, %98
  %193 = load i64, i64* %14, align 8, !dbg !1028
  %_42 = sub i64 0, 1
  %gen43 = add i64 %_42, %193
  %_44 = shl i64 1, %193
  %_45 = sub i64 1, %193
  %gen46 = mul i64 %_45, %193
  %194 = add i64 1, %193, !dbg !1029
  %195 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !1030
  %196 = getelementptr inbounds %struct.file_name, %struct.file_name* %195, i32 0, i32 2, !dbg !1031
  %197 = load i8*, i8** %196, align 8, !dbg !1032
  %_47 = shl i64 0, %194
  %_48 = sub i64 0, %194
  %gen49 = mul i64 %_48, %194
  %_50 = shl i64 0, %194
  %_51 = sub i64 0, %194
  %gen52 = mul i64 %_51, %194
  %_53 = sub i64 0, %194
  %gen54 = mul i64 %_53, %194
  %_55 = shl i64 0, %194
  %198 = sub i64 0, %194, !dbg !1032
  %199 = getelementptr inbounds i8, i8* %197, i64 %198, !dbg !1032
  store i8* %199, i8** %196, align 8, !dbg !1032
  %200 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !1033
  %201 = getelementptr inbounds %struct.file_name, %struct.file_name* %200, i32 0, i32 2, !dbg !1034
  %202 = load i8*, i8** %201, align 8, !dbg !1034
  %203 = getelementptr inbounds i8, i8* %202, i64 0, !dbg !1033
  store i8 47, i8* %203, align 1, !dbg !1035
  %204 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !1036
  %205 = getelementptr inbounds %struct.file_name, %struct.file_name* %204, i32 0, i32 2, !dbg !1037
  %206 = load i8*, i8** %205, align 8, !dbg !1037
  %207 = getelementptr inbounds i8, i8* %206, i64 1, !dbg !1038
  %208 = load i8*, i8** %13, align 8, !dbg !1039
  %209 = load i64, i64* %14, align 8, !dbg !1040
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %207, i8* align 1 %208, i64 %209, i1 false), !dbg !1041
  br label %originalBB41
}

declare dso_local %struct.__dirstream* @opendir(i8*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @nth_parent(i64) #4 !dbg !1093 {
  %2 = load i32, i32* @x.17
  %3 = load i32, i32* @y.18
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i64, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  store i64 %0, i64* %10, align 8
  call void @llvm.dbg.declare(metadata i64* %10, metadata !1096, metadata !DIExpression()), !dbg !1097
  call void @llvm.dbg.declare(metadata i8** %11, metadata !1098, metadata !DIExpression()), !dbg !1099
  %14 = load i64, i64* %10, align 8, !dbg !1100
  %15 = call noalias i8* @xnmalloc(i64 3, i64 %14), !dbg !1101
  store i8* %15, i8** %11, align 8, !dbg !1099
  call void @llvm.dbg.declare(metadata i8** %12, metadata !1102, metadata !DIExpression()), !dbg !1103
  %16 = load i8*, i8** %11, align 8, !dbg !1104
  store i8* %16, i8** %12, align 8, !dbg !1103
  call void @llvm.dbg.declare(metadata i64* %13, metadata !1105, metadata !DIExpression()), !dbg !1107
  store i64 0, i64* %13, align 8, !dbg !1107
  %17 = load i32, i32* @x.17
  %18 = load i32, i32* @y.18
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %25, !dbg !1108

25:                                               ; preds = %originalBBpart212, %originalBBpart2
  %26 = load i32, i32* @x.17
  %27 = load i32, i32* @y.18
  %28 = sub i32 %26, 1
  %29 = mul i32 %26, %28
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %31, %32
  br i1 %33, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %25, %originalBB1alteredBB
  %34 = load i64, i64* %13, align 8, !dbg !1109
  %35 = load i64, i64* %10, align 8, !dbg !1111
  %36 = icmp ult i64 %34, %35, !dbg !1112
  %37 = load i32, i32* @x.17
  %38 = load i32, i32* @y.18
  %39 = sub i32 %37, 1
  %40 = mul i32 %37, %39
  %41 = urem i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %38, 10
  %44 = or i1 %42, %43
  br i1 %44, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %36, label %45, label %84, !dbg !1113

45:                                               ; preds = %originalBBpart24
  %46 = load i32, i32* @x.17
  %47 = load i32, i32* @y.18
  %48 = sub i32 %46, 1
  %49 = mul i32 %46, %48
  %50 = urem i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %51, %52
  br i1 %53, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %45, %originalBB6alteredBB
  %54 = load i8*, i8** %12, align 8, !dbg !1114
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %54, i8* align 1 getelementptr inbounds ([4 x i8], [4 x i8]* @.str.47, i64 0, i64 0), i64 3, i1 false), !dbg !1116
  %55 = load i8*, i8** %12, align 8, !dbg !1117
  %56 = getelementptr inbounds i8, i8* %55, i64 3, !dbg !1117
  store i8* %56, i8** %12, align 8, !dbg !1117
  %57 = load i32, i32* @x.17
  %58 = load i32, i32* @y.18
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %65, !dbg !1118

65:                                               ; preds = %originalBBpart28
  %66 = load i32, i32* @x.17
  %67 = load i32, i32* @y.18
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %65, %originalBB10alteredBB
  %74 = load i64, i64* %13, align 8, !dbg !1119
  %75 = add i64 %74, 1, !dbg !1119
  store i64 %75, i64* %13, align 8, !dbg !1119
  %76 = load i32, i32* @x.17
  %77 = load i32, i32* @y.18
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %25, !dbg !1120, !llvm.loop !1121

84:                                               ; preds = %originalBBpart24
  %85 = load i32, i32* @x.17
  %86 = load i32, i32* @y.18
  %87 = sub i32 %85, 1
  %88 = mul i32 %85, %87
  %89 = urem i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %90, %91
  br i1 %92, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %84, %originalBB14alteredBB
  %93 = load i8*, i8** %12, align 8, !dbg !1123
  %94 = getelementptr inbounds i8, i8* %93, i64 -1, !dbg !1123
  store i8 0, i8* %94, align 1, !dbg !1124
  %95 = load i8*, i8** %11, align 8, !dbg !1125
  %96 = load i32, i32* @x.17
  %97 = load i32, i32* @y.18
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  ret i8* %95, !dbg !1126

originalBBalteredBB:                              ; preds = %originalBB, %1
  %104 = alloca i64, align 8
  %105 = alloca i8*, align 8
  %106 = alloca i8*, align 8
  %107 = alloca i64, align 8
  store i64 %0, i64* %104, align 8
  call void @llvm.dbg.declare(metadata i64* %104, metadata !1127, metadata !DIExpression()), !dbg !1097
  call void @llvm.dbg.declare(metadata i8** %105, metadata !1141, metadata !DIExpression()), !dbg !1099
  %108 = load i64, i64* %104, align 8, !dbg !1100
  %109 = call noalias i8* @xnmalloc(i64 3, i64 %108), !dbg !1101
  store i8* %109, i8** %105, align 8, !dbg !1099
  call void @llvm.dbg.declare(metadata i8** %106, metadata !1142, metadata !DIExpression()), !dbg !1103
  %110 = load i8*, i8** %105, align 8, !dbg !1104
  store i8* %110, i8** %106, align 8, !dbg !1103
  call void @llvm.dbg.declare(metadata i64* %107, metadata !1143, metadata !DIExpression()), !dbg !1107
  store i64 0, i64* %107, align 8, !dbg !1107
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %25
  %111 = load i64, i64* %13, align 8, !dbg !1109
  %112 = load i64, i64* %10, align 8, !dbg !1111
  %113 = icmp ult i64 %111, %112, !dbg !1112
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %45
  %114 = load i8*, i8** %12, align 8, !dbg !1114
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %114, i8* align 1 getelementptr inbounds ([4 x i8], [4 x i8]* @.str.47, i64 0, i64 0), i64 3, i1 false), !dbg !1116
  %115 = load i8*, i8** %12, align 8, !dbg !1117
  %116 = getelementptr inbounds i8, i8* %115, i64 3, !dbg !1117
  store i8* %116, i8** %12, align 8, !dbg !1117
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %65
  %117 = load i64, i64* %13, align 8, !dbg !1119
  %_ = sub i64 %117, 1
  %gen = mul i64 %_, 1
  %118 = add i64 %117, 1, !dbg !1119
  store i64 %118, i64* %13, align 8, !dbg !1119
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %84
  %119 = load i8*, i8** %12, align 8, !dbg !1123
  %120 = getelementptr inbounds i8, i8* %119, i64 -1, !dbg !1123
  store i8 0, i8* %120, align 1, !dbg !1124
  %121 = load i8*, i8** %11, align 8, !dbg !1125
  br label %originalBB14
}

; Function Attrs: nounwind
declare dso_local i32 @dirfd(%struct.__dirstream*) #2

; Function Attrs: nounwind
declare dso_local i32 @fchdir(i32) #2

; Function Attrs: nounwind
declare dso_local i32 @chdir(i8*) #2

; Function Attrs: nounwind
declare dso_local i32 @fstat(i32, %struct.stat*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.dirent* @readdir_ignoring_dot_and_dotdot(%struct.__dirstream*) #4 !dbg !1145 {
  %2 = load i32, i32* @x.19
  %3 = load i32, i32* @y.20
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct.__dirstream*, align 8
  %11 = alloca %struct.dirent*, align 8
  store %struct.__dirstream* %0, %struct.__dirstream** %10, align 8
  call void @llvm.dbg.declare(metadata %struct.__dirstream** %10, metadata !1148, metadata !DIExpression()), !dbg !1149
  %12 = load i32, i32* @x.19
  %13 = load i32, i32* @y.20
  %14 = sub i32 %12, 1
  %15 = mul i32 %12, %14
  %16 = urem i32 %15, 2
  %17 = icmp eq i32 %16, 0
  %18 = icmp slt i32 %13, 10
  %19 = or i1 %17, %18
  br i1 %19, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %20, !dbg !1150

20:                                               ; preds = %originalBBpart212, %originalBBpart2
  call void @llvm.dbg.declare(metadata %struct.dirent** %11, metadata !1151, metadata !DIExpression()), !dbg !1153
  %21 = load i32, i32* @x.19
  %22 = load i32, i32* @y.20
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %20, %originalBB1alteredBB
  %29 = load %struct.__dirstream*, %struct.__dirstream** %10, align 8, !dbg !1154
  %30 = call %struct.dirent* @readdir(%struct.__dirstream* %29), !dbg !1155
  store %struct.dirent* %30, %struct.dirent** %11, align 8, !dbg !1153
  %31 = load %struct.dirent*, %struct.dirent** %11, align 8, !dbg !1156
  %32 = icmp eq %struct.dirent* %31, null, !dbg !1158
  %33 = load i32, i32* @x.19
  %34 = load i32, i32* @y.20
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %32, label %62, label %41, !dbg !1159

41:                                               ; preds = %originalBBpart24
  %42 = load i32, i32* @x.19
  %43 = load i32, i32* @y.20
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %41, %originalBB6alteredBB
  %50 = load %struct.dirent*, %struct.dirent** %11, align 8, !dbg !1160
  %51 = getelementptr inbounds %struct.dirent, %struct.dirent* %50, i32 0, i32 4, !dbg !1161
  %52 = getelementptr inbounds [256 x i8], [256 x i8]* %51, i64 0, i64 0, !dbg !1160
  %53 = call zeroext i1 @dot_or_dotdot(i8* %52), !dbg !1162
  %54 = load i32, i32* @x.19
  %55 = load i32, i32* @y.20
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %53, label %64, label %62, !dbg !1163

62:                                               ; preds = %originalBBpart28, %originalBBpart24
  %63 = load %struct.dirent*, %struct.dirent** %11, align 8, !dbg !1164
  ret %struct.dirent* %63, !dbg !1165

64:                                               ; preds = %originalBBpart28
  %65 = load i32, i32* @x.19
  %66 = load i32, i32* @y.20
  %67 = sub i32 %65, 1
  %68 = mul i32 %65, %67
  %69 = urem i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %70, %71
  br i1 %72, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %64, %originalBB10alteredBB
  %73 = load i32, i32* @x.19
  %74 = load i32, i32* @y.20
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %20, !dbg !1150, !llvm.loop !1166

originalBBalteredBB:                              ; preds = %originalBB, %1
  %81 = alloca %struct.__dirstream*, align 8
  %82 = alloca %struct.dirent*, align 8
  store %struct.__dirstream* %0, %struct.__dirstream** %81, align 8
  call void @llvm.dbg.declare(metadata %struct.__dirstream** %81, metadata !1168, metadata !DIExpression()), !dbg !1149
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %20
  %83 = load %struct.__dirstream*, %struct.__dirstream** %10, align 8, !dbg !1154
  %84 = call %struct.dirent* @readdir(%struct.__dirstream* %83), !dbg !1155
  store %struct.dirent* %84, %struct.dirent** %11, align 8, !dbg !1153
  %85 = load %struct.dirent*, %struct.dirent** %11, align 8, !dbg !1156
  %86 = icmp eq %struct.dirent* %85, null, !dbg !1158
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %41
  %87 = load %struct.dirent*, %struct.dirent** %11, align 8, !dbg !1160
  %88 = getelementptr inbounds %struct.dirent, %struct.dirent* %87, i32 0, i32 4, !dbg !1161
  %89 = getelementptr inbounds [256 x i8], [256 x i8]* %88, i64 0, i64 0, !dbg !1160
  %90 = call zeroext i1 @dot_or_dotdot(i8* %89), !dbg !1162
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %64
  br label %originalBB10
}

declare dso_local i32 @closedir(%struct.__dirstream*) #3

; Function Attrs: nounwind
declare dso_local i32 @lstat(i8*, %struct.stat*) #2

; Function Attrs: nounwind readonly
declare dso_local i64 @strlen(i8*) #7

declare dso_local %struct.dirent* @readdir(%struct.__dirstream*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @dot_or_dotdot(i8*) #4 !dbg !1193 {
  %2 = load i32, i32* @x.21
  %3 = load i32, i32* @y.22
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i1, align 1
  %11 = alloca i8*, align 8
  %12 = alloca i8, align 1
  store i8* %0, i8** %11, align 8
  call void @llvm.dbg.declare(metadata i8** %11, metadata !1196, metadata !DIExpression()), !dbg !1197
  %13 = load i8*, i8** %11, align 8, !dbg !1198
  %14 = getelementptr inbounds i8, i8* %13, i64 0, !dbg !1198
  %15 = load i8, i8* %14, align 1, !dbg !1198
  %16 = sext i8 %15 to i32, !dbg !1198
  %17 = icmp eq i32 %16, 46, !dbg !1200
  %18 = load i32, i32* @x.21
  %19 = load i32, i32* @y.22
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %17, label %26, label %78, !dbg !1201

26:                                               ; preds = %originalBBpart2
  call void @llvm.dbg.declare(metadata i8* %12, metadata !1202, metadata !DIExpression()), !dbg !1204
  %27 = load i32, i32* @x.21
  %28 = load i32, i32* @y.22
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %26, %originalBB1alteredBB
  %35 = load i8*, i8** %11, align 8, !dbg !1205
  %36 = load i8*, i8** %11, align 8, !dbg !1206
  %37 = getelementptr inbounds i8, i8* %36, i64 1, !dbg !1206
  %38 = load i8, i8* %37, align 1, !dbg !1206
  %39 = sext i8 %38 to i32, !dbg !1206
  %40 = icmp eq i32 %39, 46, !dbg !1207
  %41 = zext i1 %40 to i32, !dbg !1207
  %42 = add nsw i32 %41, 1, !dbg !1208
  %43 = sext i32 %42 to i64, !dbg !1205
  %44 = getelementptr inbounds i8, i8* %35, i64 %43, !dbg !1205
  %45 = load i8, i8* %44, align 1, !dbg !1205
  store i8 %45, i8* %12, align 1, !dbg !1204
  %46 = load i8, i8* %12, align 1, !dbg !1209
  %47 = icmp ne i8 %46, 0, !dbg !1209
  %48 = load i32, i32* @x.21
  %49 = load i32, i32* @y.22
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBBpart29, label %originalBB1alteredBB

originalBBpart29:                                 ; preds = %originalBB1
  br i1 %47, label %56, label %60, !dbg !1210

56:                                               ; preds = %originalBBpart29
  %57 = load i8, i8* %12, align 1, !dbg !1211
  %58 = sext i8 %57 to i32, !dbg !1211
  %59 = icmp eq i32 %58, 47, !dbg !1211
  br label %60, !dbg !1210

60:                                               ; preds = %56, %originalBBpart29
  %61 = phi i1 [ true, %originalBBpart29 ], [ %59, %56 ]
  %62 = load i32, i32* @x.21
  %63 = load i32, i32* @y.22
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBB11, label %originalBB11alteredBB

originalBB11:                                     ; preds = %60, %originalBB11alteredBB
  store i1 %61, i1* %10, align 1, !dbg !1212
  %70 = load i32, i32* @x.21
  %71 = load i32, i32* @y.22
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBBpart213, label %originalBB11alteredBB

originalBBpart213:                                ; preds = %originalBB11
  br label %95, !dbg !1212

78:                                               ; preds = %originalBBpart2
  %79 = load i32, i32* @x.21
  %80 = load i32, i32* @y.22
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %originalBB15, label %originalBB15alteredBB

originalBB15:                                     ; preds = %78, %originalBB15alteredBB
  store i1 false, i1* %10, align 1, !dbg !1213
  %87 = load i32, i32* @x.21
  %88 = load i32, i32* @y.22
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBBpart217, label %originalBB15alteredBB

originalBBpart217:                                ; preds = %originalBB15
  br label %95, !dbg !1213

95:                                               ; preds = %originalBBpart217, %originalBBpart213
  %96 = load i32, i32* @x.21
  %97 = load i32, i32* @y.22
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBB19, label %originalBB19alteredBB

originalBB19:                                     ; preds = %95, %originalBB19alteredBB
  %104 = load i1, i1* %10, align 1, !dbg !1214
  %105 = load i32, i32* @x.21
  %106 = load i32, i32* @y.22
  %107 = sub i32 %105, 1
  %108 = mul i32 %105, %107
  %109 = urem i32 %108, 2
  %110 = icmp eq i32 %109, 0
  %111 = icmp slt i32 %106, 10
  %112 = or i1 %110, %111
  br i1 %112, label %originalBBpart221, label %originalBB19alteredBB

originalBBpart221:                                ; preds = %originalBB19
  ret i1 %104, !dbg !1214

originalBBalteredBB:                              ; preds = %originalBB, %1
  %113 = alloca i1, align 1
  %114 = alloca i8*, align 8
  %115 = alloca i8, align 1
  store i8* %0, i8** %114, align 8
  call void @llvm.dbg.declare(metadata i8** %114, metadata !1215, metadata !DIExpression()), !dbg !1197
  %116 = load i8*, i8** %114, align 8, !dbg !1198
  %117 = getelementptr inbounds i8, i8* %116, i64 0, !dbg !1198
  %118 = load i8, i8* %117, align 1, !dbg !1198
  %119 = sext i8 %118 to i32, !dbg !1198
  %120 = icmp eq i32 %119, 46, !dbg !1200
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %26
  %121 = load i8*, i8** %11, align 8, !dbg !1205
  %122 = load i8*, i8** %11, align 8, !dbg !1206
  %123 = getelementptr inbounds i8, i8* %122, i64 1, !dbg !1206
  %124 = load i8, i8* %123, align 1, !dbg !1206
  %125 = sext i8 %124 to i32, !dbg !1206
  %126 = icmp eq i32 %125, 46, !dbg !1207
  %127 = zext i1 %126 to i32, !dbg !1207
  %_ = sub i32 0, %127
  %gen = add i32 %_, 1
  %_2 = sub i32 0, %127
  %gen3 = add i32 %_2, 1
  %_4 = sub i32 0, %127
  %gen5 = add i32 %_4, 1
  %_6 = sub i32 %127, 1
  %gen7 = mul i32 %_6, 1
  %128 = add nsw i32 %127, 1, !dbg !1208
  %129 = sext i32 %128 to i64, !dbg !1205
  %130 = getelementptr inbounds i8, i8* %121, i64 %129, !dbg !1205
  %131 = load i8, i8* %130, align 1, !dbg !1205
  store i8 %131, i8* %12, align 1, !dbg !1204
  %132 = load i8, i8* %12, align 1, !dbg !1209
  %133 = icmp ne i8 %132, 0, !dbg !1209
  br label %originalBB1

originalBB11alteredBB:                            ; preds = %originalBB11, %60
  store i1 %61, i1* %10, align 1, !dbg !1212
  br label %originalBB11

originalBB15alteredBB:                            ; preds = %originalBB15, %78
  store i1 false, i1* %10, align 1, !dbg !1213
  br label %originalBB15

originalBB19alteredBB:                            ; preds = %originalBB19, %95
  %134 = load i1, i1* %10, align 1, !dbg !1214
  br label %originalBB19
}

; Function Attrs: nounwind readonly
declare dso_local i8* @strstr(i8*, i8*) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal void @close_stdout() #4 !dbg !1229 {
  %1 = load i32, i32* @x.23
  %2 = load i32, i32* @y.24
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = alloca i8*, align 8
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1232
  %11 = call i32 @close_stream(%struct._IO_FILE* %10), !dbg !1234
  %12 = icmp ne i32 %11, 0, !dbg !1235
  %13 = load i32, i32* @x.23
  %14 = load i32, i32* @y.24
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %21, label %140, !dbg !1236

21:                                               ; preds = %originalBBpart2
  %22 = load i32, i32* @x.23
  %23 = load i32, i32* @y.24
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  %30 = load i8, i8* @ignore_EPIPE, align 1, !dbg !1237
  %31 = trunc i8 %30 to i1, !dbg !1237
  %32 = load i32, i32* @x.23
  %33 = load i32, i32* @y.24
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %31, label %40, label %60, !dbg !1238

40:                                               ; preds = %originalBBpart24
  %41 = load i32, i32* @x.23
  %42 = load i32, i32* @y.24
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %40, %originalBB6alteredBB
  %49 = call i32* @__errno_location() #15, !dbg !1239
  %50 = load i32, i32* %49, align 4, !dbg !1239
  %51 = icmp eq i32 %50, 32, !dbg !1240
  %52 = load i32, i32* @x.23
  %53 = load i32, i32* @y.24
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %51, label %140, label %60, !dbg !1241

60:                                               ; preds = %originalBBpart28, %originalBBpart24
  call void @llvm.dbg.declare(metadata i8** %9, metadata !1242, metadata !DIExpression()), !dbg !1244
  %61 = load i32, i32* @x.23
  %62 = load i32, i32* @y.24
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %60, %originalBB10alteredBB
  %69 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.51, i64 0, i64 0)) #10, !dbg !1245
  store i8* %69, i8** %9, align 8, !dbg !1244
  %70 = load i8*, i8** @file_name, align 8, !dbg !1246
  %71 = icmp ne i8* %70, null, !dbg !1246
  %72 = load i32, i32* @x.23
  %73 = load i32, i32* @y.24
  %74 = sub i32 %72, 1
  %75 = mul i32 %72, %74
  %76 = urem i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %77, %78
  br i1 %79, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %71, label %80, label %102, !dbg !1248

80:                                               ; preds = %originalBBpart212
  %81 = load i32, i32* @x.23
  %82 = load i32, i32* @y.24
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %80, %originalBB14alteredBB
  %89 = call i32* @__errno_location() #15, !dbg !1249
  %90 = load i32, i32* %89, align 4, !dbg !1249
  %91 = load i8*, i8** @file_name, align 8, !dbg !1250
  %92 = call i8* @quotearg_colon(i8* %91), !dbg !1251
  %93 = load i8*, i8** %9, align 8, !dbg !1252
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %90, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.52, i64 0, i64 0), i8* %92, i8* %93), !dbg !1253
  %94 = load i32, i32* @x.23
  %95 = load i32, i32* @y.24
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %122, !dbg !1253

102:                                              ; preds = %originalBBpart212
  %103 = load i32, i32* @x.23
  %104 = load i32, i32* @y.24
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %102, %originalBB18alteredBB
  %111 = call i32* @__errno_location() #15, !dbg !1254
  %112 = load i32, i32* %111, align 4, !dbg !1254
  %113 = load i8*, i8** %9, align 8, !dbg !1255
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %112, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.53, i64 0, i64 0), i8* %113), !dbg !1256
  %114 = load i32, i32* @x.23
  %115 = load i32, i32* @y.24
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %122

122:                                              ; preds = %originalBBpart220, %originalBBpart216
  %123 = load i32, i32* @x.23
  %124 = load i32, i32* @y.24
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %122, %originalBB22alteredBB
  %131 = load volatile i32, i32* @exit_failure, align 4, !dbg !1257
  call void @_exit(i32 %131) #14, !dbg !1258
  %132 = load i32, i32* @x.23
  %133 = load i32, i32* @y.24
  %134 = sub i32 %132, 1
  %135 = mul i32 %132, %134
  %136 = urem i32 %135, 2
  %137 = icmp eq i32 %136, 0
  %138 = icmp slt i32 %133, 10
  %139 = or i1 %137, %138
  br i1 %139, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  unreachable, !dbg !1258

140:                                              ; preds = %originalBBpart28, %originalBBpart2
  %141 = load i32, i32* @x.23
  %142 = load i32, i32* @y.24
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %140, %originalBB26alteredBB
  %149 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1259
  %150 = call i32 @close_stream(%struct._IO_FILE* %149), !dbg !1261
  %151 = icmp ne i32 %150, 0, !dbg !1262
  %152 = load i32, i32* @x.23
  %153 = load i32, i32* @y.24
  %154 = sub i32 %152, 1
  %155 = mul i32 %152, %154
  %156 = urem i32 %155, 2
  %157 = icmp eq i32 %156, 0
  %158 = icmp slt i32 %153, 10
  %159 = or i1 %157, %158
  br i1 %159, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %151, label %160, label %178, !dbg !1263

160:                                              ; preds = %originalBBpart228
  %161 = load i32, i32* @x.23
  %162 = load i32, i32* @y.24
  %163 = sub i32 %161, 1
  %164 = mul i32 %161, %163
  %165 = urem i32 %164, 2
  %166 = icmp eq i32 %165, 0
  %167 = icmp slt i32 %162, 10
  %168 = or i1 %166, %167
  br i1 %168, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %160, %originalBB30alteredBB
  %169 = load volatile i32, i32* @exit_failure, align 4, !dbg !1264
  call void @_exit(i32 %169) #14, !dbg !1265
  %170 = load i32, i32* @x.23
  %171 = load i32, i32* @y.24
  %172 = sub i32 %170, 1
  %173 = mul i32 %170, %172
  %174 = urem i32 %173, 2
  %175 = icmp eq i32 %174, 0
  %176 = icmp slt i32 %171, 10
  %177 = or i1 %175, %176
  br i1 %177, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  unreachable, !dbg !1265

178:                                              ; preds = %originalBBpart228
  %179 = load i32, i32* @x.23
  %180 = load i32, i32* @y.24
  %181 = sub i32 %179, 1
  %182 = mul i32 %179, %181
  %183 = urem i32 %182, 2
  %184 = icmp eq i32 %183, 0
  %185 = icmp slt i32 %180, 10
  %186 = or i1 %184, %185
  br i1 %186, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %178, %originalBB34alteredBB
  %187 = load i32, i32* @x.23
  %188 = load i32, i32* @y.24
  %189 = sub i32 %187, 1
  %190 = mul i32 %187, %189
  %191 = urem i32 %190, 2
  %192 = icmp eq i32 %191, 0
  %193 = icmp slt i32 %188, 10
  %194 = or i1 %192, %193
  br i1 %194, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  ret void, !dbg !1266

originalBBalteredBB:                              ; preds = %originalBB, %0
  %195 = alloca i8*, align 8
  %196 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1232
  %197 = call i32 @close_stream(%struct._IO_FILE* %196), !dbg !1234
  %198 = icmp ne i32 %197, 0, !dbg !1235
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  %199 = load i8, i8* @ignore_EPIPE, align 1, !dbg !1237
  %200 = trunc i8 %199 to i1, !dbg !1237
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %40
  %201 = call i32* @__errno_location() #15, !dbg !1239
  %202 = load i32, i32* %201, align 4, !dbg !1239
  %203 = icmp eq i32 %202, 32, !dbg !1240
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %60
  %204 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.51, i64 0, i64 0)) #10, !dbg !1245
  store i8* %204, i8** %9, align 8, !dbg !1244
  %205 = load i8*, i8** @file_name, align 8, !dbg !1246
  %206 = icmp ne i8* %205, null, !dbg !1246
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %80
  %207 = call i32* @__errno_location() #15, !dbg !1249
  %208 = load i32, i32* %207, align 4, !dbg !1249
  %209 = load i8*, i8** @file_name, align 8, !dbg !1250
  %210 = call i8* @quotearg_colon(i8* %209), !dbg !1251
  %211 = load i8*, i8** %9, align 8, !dbg !1252
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %208, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.52, i64 0, i64 0), i8* %210, i8* %211), !dbg !1253
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %102
  %212 = call i32* @__errno_location() #15, !dbg !1254
  %213 = load i32, i32* %212, align 4, !dbg !1254
  %214 = load i8*, i8** %9, align 8, !dbg !1255
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %213, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.53, i64 0, i64 0), i8* %214), !dbg !1256
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %122
  %215 = load volatile i32, i32* @exit_failure, align 4, !dbg !1257
  call void @_exit(i32 %215) #14, !dbg !1258
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %140
  %216 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1259
  %217 = call i32 @close_stream(%struct._IO_FILE* %216), !dbg !1261
  %218 = icmp ne i32 %217, 0, !dbg !1262
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %160
  %219 = load volatile i32, i32* @exit_failure, align 4, !dbg !1264
  call void @_exit(i32 %219) #14, !dbg !1265
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %178
  br label %originalBB34
}

; Function Attrs: noreturn
declare dso_local void @_exit(i32) #9

; Function Attrs: noinline nounwind optnone uwtable
define internal void @set_program_name(i8*) #4 !dbg !1267 {
  %2 = load i32, i32* @x.25
  %3 = load i32, i32* @y.26
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !1268, metadata !DIExpression()), !dbg !1269
  call void @llvm.dbg.declare(metadata i8** %11, metadata !1270, metadata !DIExpression()), !dbg !1271
  call void @llvm.dbg.declare(metadata i8** %12, metadata !1272, metadata !DIExpression()), !dbg !1273
  %13 = load i8*, i8** %10, align 8, !dbg !1274
  %14 = icmp eq i8* %13, null, !dbg !1276
  %15 = load i32, i32* @x.25
  %16 = load i32, i32* @y.26
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %14, label %23, label %42, !dbg !1277

23:                                               ; preds = %originalBBpart2
  %24 = load i32, i32* @x.25
  %25 = load i32, i32* @y.26
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %23, %originalBB1alteredBB
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1278
  %33 = call i32 @fputs(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.58, i64 0, i64 0), %struct._IO_FILE* %32), !dbg !1280
  call void @abort() #12, !dbg !1281
  %34 = load i32, i32* @x.25
  %35 = load i32, i32* @y.26
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  unreachable, !dbg !1281

42:                                               ; preds = %originalBBpart2
  %43 = load i32, i32* @x.25
  %44 = load i32, i32* @y.26
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %42, %originalBB6alteredBB
  %51 = load i8*, i8** %10, align 8, !dbg !1282
  %52 = call i8* @strrchr(i8* %51, i32 47) #13, !dbg !1283
  store i8* %52, i8** %11, align 8, !dbg !1284
  %53 = load i8*, i8** %11, align 8, !dbg !1285
  %54 = icmp ne i8* %53, null, !dbg !1286
  %55 = load i32, i32* @x.25
  %56 = load i32, i32* @y.26
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %54, label %63, label %82, !dbg !1285

63:                                               ; preds = %originalBBpart28
  %64 = load i32, i32* @x.25
  %65 = load i32, i32* @y.26
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %63, %originalBB10alteredBB
  %72 = load i8*, i8** %11, align 8, !dbg !1287
  %73 = getelementptr inbounds i8, i8* %72, i64 1, !dbg !1288
  %74 = load i32, i32* @x.25
  %75 = load i32, i32* @y.26
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %100, !dbg !1285

82:                                               ; preds = %originalBBpart28
  %83 = load i32, i32* @x.25
  %84 = load i32, i32* @y.26
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %82, %originalBB14alteredBB
  %91 = load i8*, i8** %10, align 8, !dbg !1289
  %92 = load i32, i32* @x.25
  %93 = load i32, i32* @y.26
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %100, !dbg !1285

100:                                              ; preds = %originalBBpart216, %originalBBpart212
  %101 = phi i8* [ %73, %originalBBpart212 ], [ %91, %originalBBpart216 ], !dbg !1285
  %102 = load i32, i32* @x.25
  %103 = load i32, i32* @y.26
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %100, %originalBB18alteredBB
  store i8* %101, i8** %12, align 8, !dbg !1290
  %110 = load i8*, i8** %12, align 8, !dbg !1291
  %111 = load i8*, i8** %10, align 8, !dbg !1293
  %112 = ptrtoint i8* %110 to i64, !dbg !1294
  %113 = ptrtoint i8* %111 to i64, !dbg !1294
  %114 = sub i64 %112, %113, !dbg !1294
  %115 = icmp sge i64 %114, 7, !dbg !1295
  %116 = load i32, i32* @x.25
  %117 = load i32, i32* @y.26
  %118 = sub i32 %116, 1
  %119 = mul i32 %116, %118
  %120 = urem i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %117, 10
  %123 = or i1 %121, %122
  br i1 %123, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %115, label %124, label %187, !dbg !1296

124:                                              ; preds = %originalBBpart220
  %125 = load i32, i32* @x.25
  %126 = load i32, i32* @y.26
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %124, %originalBB22alteredBB
  %133 = load i8*, i8** %12, align 8, !dbg !1297
  %134 = getelementptr inbounds i8, i8* %133, i64 -7, !dbg !1298
  %135 = call i32 @strncmp(i8* %134, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1.59, i64 0, i64 0), i64 7) #13, !dbg !1299
  %136 = icmp eq i32 %135, 0, !dbg !1300
  %137 = load i32, i32* @x.25
  %138 = load i32, i32* @y.26
  %139 = sub i32 %137, 1
  %140 = mul i32 %137, %139
  %141 = urem i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %142, %143
  br i1 %144, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %136, label %145, label %187, !dbg !1301

145:                                              ; preds = %originalBBpart224
  %146 = load i32, i32* @x.25
  %147 = load i32, i32* @y.26
  %148 = sub i32 %146, 1
  %149 = mul i32 %146, %148
  %150 = urem i32 %149, 2
  %151 = icmp eq i32 %150, 0
  %152 = icmp slt i32 %147, 10
  %153 = or i1 %151, %152
  br i1 %153, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %145, %originalBB26alteredBB
  %154 = load i8*, i8** %12, align 8, !dbg !1302
  store i8* %154, i8** %10, align 8, !dbg !1304
  %155 = load i8*, i8** %12, align 8, !dbg !1305
  %156 = call i32 @strncmp(i8* %155, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.60, i64 0, i64 0), i64 3) #13, !dbg !1307
  %157 = icmp eq i32 %156, 0, !dbg !1308
  %158 = load i32, i32* @x.25
  %159 = load i32, i32* @y.26
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %157, label %166, label %170, !dbg !1309

166:                                              ; preds = %originalBBpart228
  %167 = load i8*, i8** %12, align 8, !dbg !1310
  %168 = getelementptr inbounds i8, i8* %167, i64 3, !dbg !1312
  store i8* %168, i8** %10, align 8, !dbg !1313
  %169 = load i8*, i8** %10, align 8, !dbg !1314
  store i8* %169, i8** @program_invocation_short_name, align 8, !dbg !1315
  br label %170, !dbg !1316

170:                                              ; preds = %166, %originalBBpart228
  %171 = load i32, i32* @x.25
  %172 = load i32, i32* @y.26
  %173 = sub i32 %171, 1
  %174 = mul i32 %171, %173
  %175 = urem i32 %174, 2
  %176 = icmp eq i32 %175, 0
  %177 = icmp slt i32 %172, 10
  %178 = or i1 %176, %177
  br i1 %178, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %170, %originalBB30alteredBB
  %179 = load i32, i32* @x.25
  %180 = load i32, i32* @y.26
  %181 = sub i32 %179, 1
  %182 = mul i32 %179, %181
  %183 = urem i32 %182, 2
  %184 = icmp eq i32 %183, 0
  %185 = icmp slt i32 %180, 10
  %186 = or i1 %184, %185
  br i1 %186, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %187, !dbg !1317

187:                                              ; preds = %originalBBpart232, %originalBBpart224, %originalBBpart220
  %188 = load i32, i32* @x.25
  %189 = load i32, i32* @y.26
  %190 = sub i32 %188, 1
  %191 = mul i32 %188, %190
  %192 = urem i32 %191, 2
  %193 = icmp eq i32 %192, 0
  %194 = icmp slt i32 %189, 10
  %195 = or i1 %193, %194
  br i1 %195, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %187, %originalBB34alteredBB
  %196 = load i8*, i8** %10, align 8, !dbg !1318
  store i8* %196, i8** @program_name, align 8, !dbg !1319
  %197 = load i8*, i8** %10, align 8, !dbg !1320
  store i8* %197, i8** @program_invocation_name, align 8, !dbg !1321
  %198 = load i32, i32* @x.25
  %199 = load i32, i32* @y.26
  %200 = sub i32 %198, 1
  %201 = mul i32 %198, %200
  %202 = urem i32 %201, 2
  %203 = icmp eq i32 %202, 0
  %204 = icmp slt i32 %199, 10
  %205 = or i1 %203, %204
  br i1 %205, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  ret void, !dbg !1322

originalBBalteredBB:                              ; preds = %originalBB, %1
  %206 = alloca i8*, align 8
  %207 = alloca i8*, align 8
  %208 = alloca i8*, align 8
  store i8* %0, i8** %206, align 8
  call void @llvm.dbg.declare(metadata i8** %206, metadata !1323, metadata !DIExpression()), !dbg !1269
  call void @llvm.dbg.declare(metadata i8** %207, metadata !1329, metadata !DIExpression()), !dbg !1271
  call void @llvm.dbg.declare(metadata i8** %208, metadata !1330, metadata !DIExpression()), !dbg !1273
  %209 = load i8*, i8** %206, align 8, !dbg !1274
  %210 = icmp eq i8* %209, null, !dbg !1276
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %23
  %211 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1278
  %212 = call i32 @fputs(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.58, i64 0, i64 0), %struct._IO_FILE* %211), !dbg !1280
  call void @abort() #12, !dbg !1281
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %42
  %213 = load i8*, i8** %10, align 8, !dbg !1282
  %214 = call i8* @strrchr(i8* %213, i32 47) #13, !dbg !1283
  store i8* %214, i8** %11, align 8, !dbg !1284
  %215 = load i8*, i8** %11, align 8, !dbg !1285
  %216 = icmp ne i8* %215, null, !dbg !1286
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %63
  %217 = load i8*, i8** %11, align 8, !dbg !1287
  %218 = getelementptr inbounds i8, i8* %217, i64 1, !dbg !1288
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %82
  %219 = load i8*, i8** %10, align 8, !dbg !1289
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %100
  store i8* %101, i8** %12, align 8, !dbg !1290
  %220 = load i8*, i8** %12, align 8, !dbg !1291
  %221 = load i8*, i8** %10, align 8, !dbg !1293
  %222 = ptrtoint i8* %220 to i64, !dbg !1294
  %223 = ptrtoint i8* %221 to i64, !dbg !1294
  %_ = sub i64 %222, %223
  %gen = mul i64 %_, %223
  %224 = sub i64 %222, %223, !dbg !1294
  %225 = icmp sge i64 %224, 7, !dbg !1295
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %124
  %226 = load i8*, i8** %12, align 8, !dbg !1297
  %227 = getelementptr inbounds i8, i8* %226, i64 -7, !dbg !1298
  %228 = call i32 @strncmp(i8* %227, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1.59, i64 0, i64 0), i64 7) #13, !dbg !1299
  %229 = icmp eq i32 %228, 0, !dbg !1300
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %145
  %230 = load i8*, i8** %12, align 8, !dbg !1302
  store i8* %230, i8** %10, align 8, !dbg !1304
  %231 = load i8*, i8** %12, align 8, !dbg !1305
  %232 = call i32 @strncmp(i8* %231, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.60, i64 0, i64 0), i64 3) #13, !dbg !1307
  %233 = icmp eq i32 %232, 0, !dbg !1308
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %170
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %187
  %234 = load i8*, i8** %10, align 8, !dbg !1318
  store i8* %234, i8** @program_name, align 8, !dbg !1319
  %235 = load i8*, i8** %10, align 8, !dbg !1320
  store i8* %235, i8** @program_invocation_name, align 8, !dbg !1321
  br label %originalBB34
}

declare dso_local i32 @fputs(i8*, %struct._IO_FILE*) #3

; Function Attrs: noreturn nounwind
declare dso_local void @abort() #5

; Function Attrs: nounwind readonly
declare dso_local i8* @strrchr(i8*, i32) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @set_char_quoting(%struct.quoting_options*, i8 signext, i32) #4 !dbg !1331 {
  %4 = load i32, i32* @x.27
  %5 = load i32, i32* @y.28
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca %struct.quoting_options*, align 8
  %13 = alloca i8, align 1
  %14 = alloca i32, align 4
  %15 = alloca i8, align 1
  %16 = alloca i32*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  store %struct.quoting_options* %0, %struct.quoting_options** %12, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %12, metadata !1335, metadata !DIExpression()), !dbg !1336
  store i8 %1, i8* %13, align 1
  call void @llvm.dbg.declare(metadata i8* %13, metadata !1337, metadata !DIExpression()), !dbg !1338
  store i32 %2, i32* %14, align 4
  call void @llvm.dbg.declare(metadata i32* %14, metadata !1339, metadata !DIExpression()), !dbg !1340
  call void @llvm.dbg.declare(metadata i8* %15, metadata !1341, metadata !DIExpression()), !dbg !1342
  %19 = load i8, i8* %13, align 1, !dbg !1343
  store i8 %19, i8* %15, align 1, !dbg !1342
  call void @llvm.dbg.declare(metadata i32** %16, metadata !1344, metadata !DIExpression()), !dbg !1346
  %20 = load %struct.quoting_options*, %struct.quoting_options** %12, align 8, !dbg !1347
  %21 = icmp ne %struct.quoting_options* %20, null, !dbg !1347
  %22 = load i32, i32* @x.27
  %23 = load i32, i32* @y.28
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %21, label %30, label %48, !dbg !1347

30:                                               ; preds = %originalBBpart2
  %31 = load i32, i32* @x.27
  %32 = load i32, i32* @y.28
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %30, %originalBB1alteredBB
  %39 = load %struct.quoting_options*, %struct.quoting_options** %12, align 8, !dbg !1348
  %40 = load i32, i32* @x.27
  %41 = load i32, i32* @y.28
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %65, !dbg !1347

48:                                               ; preds = %originalBBpart2
  %49 = load i32, i32* @x.27
  %50 = load i32, i32* @y.28
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load i32, i32* @x.27
  %58 = load i32, i32* @y.28
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %65, !dbg !1347

65:                                               ; preds = %originalBBpart28, %originalBBpart24
  %66 = phi %struct.quoting_options* [ %39, %originalBBpart24 ], [ @default_quoting_options, %originalBBpart28 ], !dbg !1347
  %67 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %66, i32 0, i32 2, !dbg !1349
  %68 = getelementptr inbounds [8 x i32], [8 x i32]* %67, i64 0, i64 0, !dbg !1350
  %69 = load i8, i8* %15, align 1, !dbg !1351
  %70 = zext i8 %69 to i64, !dbg !1351
  %71 = udiv i64 %70, 32, !dbg !1352
  %72 = getelementptr inbounds i32, i32* %68, i64 %71, !dbg !1353
  store i32* %72, i32** %16, align 8, !dbg !1346
  call void @llvm.dbg.declare(metadata i32* %17, metadata !1354, metadata !DIExpression()), !dbg !1355
  %73 = load i8, i8* %15, align 1, !dbg !1356
  %74 = zext i8 %73 to i64, !dbg !1356
  %75 = urem i64 %74, 32, !dbg !1357
  %76 = trunc i64 %75 to i32, !dbg !1356
  store i32 %76, i32* %17, align 4, !dbg !1355
  call void @llvm.dbg.declare(metadata i32* %18, metadata !1358, metadata !DIExpression()), !dbg !1359
  %77 = load i32*, i32** %16, align 8, !dbg !1360
  %78 = load i32, i32* %77, align 4, !dbg !1361
  %79 = load i32, i32* %17, align 4, !dbg !1362
  %80 = lshr i32 %78, %79, !dbg !1363
  %81 = and i32 %80, 1, !dbg !1364
  store i32 %81, i32* %18, align 4, !dbg !1359
  %82 = load i32, i32* %14, align 4, !dbg !1365
  %83 = and i32 %82, 1, !dbg !1366
  %84 = load i32, i32* %18, align 4, !dbg !1367
  %85 = xor i32 %83, %84, !dbg !1368
  %86 = load i32, i32* %17, align 4, !dbg !1369
  %87 = shl i32 %85, %86, !dbg !1370
  %88 = load i32*, i32** %16, align 8, !dbg !1371
  %89 = load i32, i32* %88, align 4, !dbg !1372
  %90 = xor i32 %89, %87, !dbg !1372
  store i32 %90, i32* %88, align 4, !dbg !1372
  %91 = load i32, i32* %18, align 4, !dbg !1373
  ret i32 %91, !dbg !1374

originalBBalteredBB:                              ; preds = %originalBB, %3
  %92 = alloca %struct.quoting_options*, align 8
  %93 = alloca i8, align 1
  %94 = alloca i32, align 4
  %95 = alloca i8, align 1
  %96 = alloca i32*, align 8
  %97 = alloca i32, align 4
  %98 = alloca i32, align 4
  store %struct.quoting_options* %0, %struct.quoting_options** %92, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %92, metadata !1375, metadata !DIExpression()), !dbg !1336
  store i8 %1, i8* %93, align 1
  call void @llvm.dbg.declare(metadata i8* %93, metadata !1410, metadata !DIExpression()), !dbg !1338
  store i32 %2, i32* %94, align 4
  call void @llvm.dbg.declare(metadata i32* %94, metadata !1411, metadata !DIExpression()), !dbg !1340
  call void @llvm.dbg.declare(metadata i8* %95, metadata !1412, metadata !DIExpression()), !dbg !1342
  %99 = load i8, i8* %93, align 1, !dbg !1343
  store i8 %99, i8* %95, align 1, !dbg !1342
  call void @llvm.dbg.declare(metadata i32** %96, metadata !1413, metadata !DIExpression()), !dbg !1346
  %100 = load %struct.quoting_options*, %struct.quoting_options** %92, align 8, !dbg !1347
  %101 = icmp ne %struct.quoting_options* %100, null, !dbg !1347
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %30
  %102 = load %struct.quoting_options*, %struct.quoting_options** %12, align 8, !dbg !1348
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  br label %originalBB6
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_n_style(i32, i32, i8*) #4 !dbg !1414 {
  %4 = load i32, i32* @x.29
  %5 = load i32, i32* @y.30
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca %struct.quoting_options, align 8
  store i32 %0, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !1417, metadata !DIExpression()), !dbg !1418
  store i32 %1, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !1419, metadata !DIExpression()), !dbg !1420
  store i8* %2, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !1421, metadata !DIExpression()), !dbg !1422
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %15, metadata !1423, metadata !DIExpression()), !dbg !1425
  %16 = load i32, i32* %13, align 4, !dbg !1426
  call void @quoting_options_from_style(%struct.quoting_options* sret %15, i32 %16), !dbg !1427
  %17 = load i32, i32* %12, align 4, !dbg !1428
  %18 = load i8*, i8** %14, align 8, !dbg !1429
  %19 = call i8* @quotearg_n_options(i32 %17, i8* %18, i64 -1, %struct.quoting_options* %15), !dbg !1430
  %20 = load i32, i32* @x.29
  %21 = load i32, i32* @y.30
  %22 = sub i32 %20, 1
  %23 = mul i32 %20, %22
  %24 = urem i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = icmp slt i32 %21, 10
  %27 = or i1 %25, %26
  br i1 %27, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %19, !dbg !1431

originalBBalteredBB:                              ; preds = %originalBB, %3
  %28 = alloca i32, align 4
  %29 = alloca i32, align 4
  %30 = alloca i8*, align 8
  %31 = alloca %struct.quoting_options, align 8
  store i32 %0, i32* %28, align 4
  call void @llvm.dbg.declare(metadata i32* %28, metadata !1432, metadata !DIExpression()), !dbg !1418
  store i32 %1, i32* %29, align 4
  call void @llvm.dbg.declare(metadata i32* %29, metadata !1464, metadata !DIExpression()), !dbg !1420
  store i8* %2, i8** %30, align 8
  call void @llvm.dbg.declare(metadata i8** %30, metadata !1465, metadata !DIExpression()), !dbg !1422
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %31, metadata !1466, metadata !DIExpression()), !dbg !1425
  %32 = load i32, i32* %29, align 4, !dbg !1426
  call void @quoting_options_from_style(%struct.quoting_options* sret %31, i32 %32), !dbg !1427
  %33 = load i32, i32* %28, align 4, !dbg !1428
  %34 = load i8*, i8** %30, align 8, !dbg !1429
  %35 = call i8* @quotearg_n_options(i32 %33, i8* %34, i64 -1, %struct.quoting_options* %31), !dbg !1430
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @quoting_options_from_style(%struct.quoting_options* noalias sret, i32) #4 !dbg !1468 {
  %3 = load i32, i32* @x.31
  %4 = load i32, i32* @y.32
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32, align 4
  store i32 %1, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !1471, metadata !DIExpression()), !dbg !1472
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %0, metadata !1473, metadata !DIExpression()), !dbg !1474
  %12 = bitcast %struct.quoting_options* %0 to i8*, !dbg !1474
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 56, i1 false), !dbg !1474
  %13 = load i32, i32* %11, align 4, !dbg !1475
  %14 = icmp eq i32 %13, 10, !dbg !1477
  %15 = load i32, i32* @x.31
  %16 = load i32, i32* @y.32
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %14, label %23, label %40, !dbg !1478

23:                                               ; preds = %originalBBpart2
  %24 = load i32, i32* @x.31
  %25 = load i32, i32* @y.32
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %23, %originalBB1alteredBB
  call void @abort() #12, !dbg !1479
  %32 = load i32, i32* @x.31
  %33 = load i32, i32* @y.32
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  unreachable, !dbg !1479

40:                                               ; preds = %originalBBpart2
  %41 = load i32, i32* @x.31
  %42 = load i32, i32* @y.32
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %40, %originalBB6alteredBB
  %49 = load i32, i32* %11, align 4, !dbg !1480
  %50 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %0, i32 0, i32 0, !dbg !1481
  store i32 %49, i32* %50, align 8, !dbg !1482
  %51 = load i32, i32* @x.31
  %52 = load i32, i32* @y.32
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  ret void, !dbg !1483

originalBBalteredBB:                              ; preds = %originalBB, %2
  %59 = alloca i32, align 4
  store i32 %1, i32* %59, align 4
  call void @llvm.dbg.declare(metadata i32* %59, metadata !1484, metadata !DIExpression()), !dbg !1472
  call void @llvm.dbg.declare(metadata !4, metadata !1518, metadata !DIExpression()), !dbg !1474
  %60 = bitcast %struct.quoting_options* %0 to i8*, !dbg !1474
  call void @llvm.memset.p0i8.i64(i8* align 8 %60, i8 0, i64 56, i1 false), !dbg !1474
  %61 = load i32, i32* %59, align 4, !dbg !1475
  %62 = icmp eq i32 %61, 10, !dbg !1477
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %23
  call void @abort() #12, !dbg !1479
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %40
  %63 = load i32, i32* %11, align 4, !dbg !1480
  %64 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %0, i32 0, i32 0, !dbg !1481
  store i32 %63, i32* %64, align 8, !dbg !1482
  br label %originalBB6
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_n_options(i32, i8*, i64, %struct.quoting_options*) #4 !dbg !1519 {
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %struct.quoting_options*, align 8
  %9 = alloca i32, align 4
  %10 = alloca %struct.slotvec*, align 8
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  %13 = alloca i64, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i32, align 4
  %16 = alloca i64, align 8
  store i32 %0, i32* %5, align 4
  call void @llvm.dbg.declare(metadata i32* %5, metadata !1523, metadata !DIExpression()), !dbg !1524
  store i8* %1, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !1525, metadata !DIExpression()), !dbg !1526
  store i64 %2, i64* %7, align 8
  call void @llvm.dbg.declare(metadata i64* %7, metadata !1527, metadata !DIExpression()), !dbg !1528
  store %struct.quoting_options* %3, %struct.quoting_options** %8, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %8, metadata !1529, metadata !DIExpression()), !dbg !1530
  call void @llvm.dbg.declare(metadata i32* %9, metadata !1531, metadata !DIExpression()), !dbg !1532
  %17 = call i32* @__errno_location() #15, !dbg !1533
  %18 = load i32, i32* %17, align 4, !dbg !1533
  store i32 %18, i32* %9, align 4, !dbg !1532
  call void @llvm.dbg.declare(metadata %struct.slotvec** %10, metadata !1534, metadata !DIExpression()), !dbg !1535
  %19 = load %struct.slotvec*, %struct.slotvec** @slotvec, align 8, !dbg !1536
  store %struct.slotvec* %19, %struct.slotvec** %10, align 8, !dbg !1535
  %20 = load i32, i32* %5, align 4, !dbg !1537
  %21 = icmp slt i32 %20, 0, !dbg !1539
  br i1 %21, label %22, label %39, !dbg !1540

22:                                               ; preds = %4
  %23 = load i32, i32* @x.33
  %24 = load i32, i32* @y.34
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %22, %originalBBalteredBB
  call void @abort() #12, !dbg !1541
  %31 = load i32, i32* @x.33
  %32 = load i32, i32* @y.34
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  unreachable, !dbg !1541

39:                                               ; preds = %4
  %40 = load i32, i32* @x.33
  %41 = load i32, i32* @y.34
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %39, %originalBB1alteredBB
  %48 = load i32, i32* @nslots, align 4, !dbg !1542
  %49 = mul i32 %48, 4
  %50 = add i32 %49, 5
  %51 = mul i32 %50, %50
  %52 = sub i32 %51, %50
  %53 = srem i32 %52, 2
  %54 = add i32 %53, 1
  %55 = icmp eq i32 %54, 1
  %56 = load i32, i32* @x.33
  %57 = load i32, i32* @y.34
  %58 = sub i32 %56, 1
  %59 = mul i32 %56, %58
  %60 = urem i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %57, 10
  %63 = or i1 %61, %62
  br i1 %63, label %originalBBpart261, label %originalBB1alteredBB

originalBBpart261:                                ; preds = %originalBB1
  br i1 %55, label %81, label %64

64:                                               ; preds = %originalBBpart261
  %65 = load i32, i32* @x.33
  %66 = load i32, i32* @y.34
  %67 = sub i32 %65, 1
  %68 = mul i32 %65, %67
  %69 = urem i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %70, %71
  br i1 %72, label %originalBB63, label %originalBB63alteredBB

originalBB63:                                     ; preds = %64, %originalBB63alteredBB
  %73 = load i32, i32* @x.33
  %74 = load i32, i32* @y.34
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBBpart265, label %originalBB63alteredBB

originalBBpart265:                                ; preds = %originalBB63
  ret i8* null

81:                                               ; preds = %originalBBpart261
  %82 = load i32, i32* @x.33
  %83 = load i32, i32* @y.34
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBB67, label %originalBB67alteredBB

originalBB67:                                     ; preds = %81, %originalBB67alteredBB
  %90 = load i32, i32* %5, align 4, !dbg !1544
  %91 = icmp sle i32 %48, %90, !dbg !1545
  %92 = load i32, i32* @x.33
  %93 = load i32, i32* @y.34
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBBpart269, label %originalBB67alteredBB

originalBBpart269:                                ; preds = %originalBB67
  br i1 %91, label %100, label %318, !dbg !1546

100:                                              ; preds = %originalBBpart269
  call void @llvm.dbg.declare(metadata i8* %11, metadata !1547, metadata !DIExpression()), !dbg !1549
  %101 = load i32, i32* @x.33
  %102 = load i32, i32* @y.34
  %103 = sub i32 %101, 1
  %104 = mul i32 %101, %103
  %105 = urem i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %102, 10
  %108 = or i1 %106, %107
  br i1 %108, label %originalBB71, label %originalBB71alteredBB

originalBB71:                                     ; preds = %100, %originalBB71alteredBB
  %109 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1550
  %110 = icmp eq %struct.slotvec* %109, @slotvec0, !dbg !1551
  %111 = zext i1 %110 to i8, !dbg !1549
  store i8 %111, i8* %11, align 1, !dbg !1549
  call void @llvm.dbg.declare(metadata i32* %12, metadata !1552, metadata !DIExpression()), !dbg !1553
  store i32 2147483646, i32* %12, align 4, !dbg !1553
  %112 = load i32, i32* %12, align 4, !dbg !1554
  %113 = load i32, i32* %5, align 4, !dbg !1556
  %114 = icmp slt i32 %112, %113, !dbg !1557
  %115 = load i32, i32* @x.33
  %116 = load i32, i32* @y.34
  %117 = sub i32 %115, 1
  %118 = mul i32 %115, %117
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %120, %121
  br i1 %122, label %originalBBpart273, label %originalBB71alteredBB

originalBBpart273:                                ; preds = %originalBB71
  br i1 %114, label %123, label %140, !dbg !1558

123:                                              ; preds = %originalBBpart273
  %124 = load i32, i32* @x.33
  %125 = load i32, i32* @y.34
  %126 = sub i32 %124, 1
  %127 = mul i32 %124, %126
  %128 = urem i32 %127, 2
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %125, 10
  %131 = or i1 %129, %130
  br i1 %131, label %originalBB75, label %originalBB75alteredBB

originalBB75:                                     ; preds = %123, %originalBB75alteredBB
  call void @xalloc_die() #14, !dbg !1559
  %132 = load i32, i32* @x.33
  %133 = load i32, i32* @y.34
  %134 = sub i32 %132, 1
  %135 = mul i32 %132, %134
  %136 = urem i32 %135, 2
  %137 = icmp eq i32 %136, 0
  %138 = icmp slt i32 %133, 10
  %139 = or i1 %137, %138
  br i1 %139, label %originalBBpart277, label %originalBB75alteredBB

originalBBpart277:                                ; preds = %originalBB75
  unreachable, !dbg !1559

140:                                              ; preds = %originalBBpart273
  %141 = load i32, i32* @x.33
  %142 = load i32, i32* @y.34
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBB79, label %originalBB79alteredBB

originalBB79:                                     ; preds = %140, %originalBB79alteredBB
  %149 = load i8, i8* %11, align 1, !dbg !1560
  %150 = trunc i8 %149 to i1, !dbg !1560
  %151 = load i32, i32* @x.33
  %152 = load i32, i32* @y.34
  %153 = sub i32 %151, 1
  %154 = mul i32 %151, %153
  %155 = urem i32 %154, 2
  %156 = icmp eq i32 %155, 0
  %157 = icmp slt i32 %152, 10
  %158 = or i1 %156, %157
  br i1 %158, label %originalBBpart281, label %originalBB79alteredBB

originalBBpart281:                                ; preds = %originalBB79
  br i1 %150, label %159, label %176, !dbg !1560

159:                                              ; preds = %originalBBpart281
  %160 = load i32, i32* @x.33
  %161 = load i32, i32* @y.34
  %162 = sub i32 %160, 1
  %163 = mul i32 %160, %162
  %164 = urem i32 %163, 2
  %165 = icmp eq i32 %164, 0
  %166 = icmp slt i32 %161, 10
  %167 = or i1 %165, %166
  br i1 %167, label %originalBB83, label %originalBB83alteredBB

originalBB83:                                     ; preds = %159, %originalBB83alteredBB
  %168 = load i32, i32* @x.33
  %169 = load i32, i32* @y.34
  %170 = sub i32 %168, 1
  %171 = mul i32 %168, %170
  %172 = urem i32 %171, 2
  %173 = icmp eq i32 %172, 0
  %174 = icmp slt i32 %169, 10
  %175 = or i1 %173, %174
  br i1 %175, label %originalBBpart285, label %originalBB83alteredBB

originalBBpart285:                                ; preds = %originalBB83
  br label %194, !dbg !1560

176:                                              ; preds = %originalBBpart281
  %177 = load i32, i32* @x.33
  %178 = load i32, i32* @y.34
  %179 = sub i32 %177, 1
  %180 = mul i32 %177, %179
  %181 = urem i32 %180, 2
  %182 = icmp eq i32 %181, 0
  %183 = icmp slt i32 %178, 10
  %184 = or i1 %182, %183
  br i1 %184, label %originalBB87, label %originalBB87alteredBB

originalBB87:                                     ; preds = %176, %originalBB87alteredBB
  %185 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1561
  %186 = load i32, i32* @x.33
  %187 = load i32, i32* @y.34
  %188 = sub i32 %186, 1
  %189 = mul i32 %186, %188
  %190 = urem i32 %189, 2
  %191 = icmp eq i32 %190, 0
  %192 = icmp slt i32 %187, 10
  %193 = or i1 %191, %192
  br i1 %193, label %originalBBpart289, label %originalBB87alteredBB

originalBBpart289:                                ; preds = %originalBB87
  br label %194, !dbg !1560

194:                                              ; preds = %originalBBpart289, %originalBBpart285
  %195 = phi %struct.slotvec* [ null, %originalBBpart285 ], [ %185, %originalBBpart289 ], !dbg !1560
  %196 = load i32, i32* @x.33
  %197 = load i32, i32* @y.34
  %198 = sub i32 %196, 1
  %199 = mul i32 %196, %198
  %200 = urem i32 %199, 2
  %201 = icmp eq i32 %200, 0
  %202 = icmp slt i32 %197, 10
  %203 = or i1 %201, %202
  br i1 %203, label %originalBB91, label %originalBB91alteredBB

originalBB91:                                     ; preds = %194, %originalBB91alteredBB
  %204 = bitcast %struct.slotvec* %195 to i8*, !dbg !1560
  %205 = load i32, i32* %5, align 4, !dbg !1562
  %206 = add nsw i32 %205, 1, !dbg !1563
  %207 = sext i32 %206 to i64, !dbg !1564
  %208 = mul i64 %207, 16, !dbg !1565
  %209 = trunc i64 16 to i32
  %210 = add i32 %209, 5
  %211 = trunc i64 16 to i32
  %212 = mul i32 %211, -2
  %213 = add i32 %212, -4
  %214 = mul i32 %210, %210
  %215 = mul i32 %213, %213
  %216 = add i32 %214, %215
  %217 = mul i32 %210, %213
  %218 = mul i32 %217, 2
  %219 = sub i32 %216, %218
  %220 = mul i32 %219, 5
  %221 = add i32 %220, 2
  %222 = icmp eq i32 %221, -3
  %223 = load i32, i32* @x.33
  %224 = load i32, i32* @y.34
  %225 = sub i32 %223, 1
  %226 = mul i32 %223, %225
  %227 = urem i32 %226, 2
  %228 = icmp eq i32 %227, 0
  %229 = icmp slt i32 %224, 10
  %230 = or i1 %228, %229
  br i1 %230, label %originalBBpart2155, label %originalBB91alteredBB

originalBBpart2155:                               ; preds = %originalBB91
  br i1 %222, label %231, label %248

231:                                              ; preds = %originalBBpart2155
  %232 = load i32, i32* @x.33
  %233 = load i32, i32* @y.34
  %234 = sub i32 %232, 1
  %235 = mul i32 %232, %234
  %236 = urem i32 %235, 2
  %237 = icmp eq i32 %236, 0
  %238 = icmp slt i32 %233, 10
  %239 = or i1 %237, %238
  br i1 %239, label %originalBB157, label %originalBB157alteredBB

originalBB157:                                    ; preds = %231, %originalBB157alteredBB
  %240 = load i32, i32* @x.33
  %241 = load i32, i32* @y.34
  %242 = sub i32 %240, 1
  %243 = mul i32 %240, %242
  %244 = urem i32 %243, 2
  %245 = icmp eq i32 %244, 0
  %246 = icmp slt i32 %241, 10
  %247 = or i1 %245, %246
  br i1 %247, label %originalBBpart2159, label %originalBB157alteredBB

originalBBpart2159:                               ; preds = %originalBB157
  ret i8* null

248:                                              ; preds = %originalBBpart2155
  %249 = load i32, i32* @x.33
  %250 = load i32, i32* @y.34
  %251 = sub i32 %249, 1
  %252 = mul i32 %249, %251
  %253 = urem i32 %252, 2
  %254 = icmp eq i32 %253, 0
  %255 = icmp slt i32 %250, 10
  %256 = or i1 %254, %255
  br i1 %256, label %originalBB161, label %originalBB161alteredBB

originalBB161:                                    ; preds = %248, %originalBB161alteredBB
  %257 = call i8* @xrealloc(i8* %204, i64 %208), !dbg !1566
  %258 = bitcast i8* %257 to %struct.slotvec*, !dbg !1566
  store %struct.slotvec* %258, %struct.slotvec** %10, align 8, !dbg !1567
  store %struct.slotvec* %258, %struct.slotvec** @slotvec, align 8, !dbg !1568
  %259 = load i8, i8* %11, align 1, !dbg !1569
  %260 = trunc i8 %259 to i1, !dbg !1569
  %261 = load i32, i32* @x.33
  %262 = load i32, i32* @y.34
  %263 = sub i32 %261, 1
  %264 = mul i32 %261, %263
  %265 = urem i32 %264, 2
  %266 = icmp eq i32 %265, 0
  %267 = icmp slt i32 %262, 10
  %268 = or i1 %266, %267
  br i1 %268, label %originalBBpart2163, label %originalBB161alteredBB

originalBBpart2163:                               ; preds = %originalBB161
  br i1 %260, label %269, label %288, !dbg !1571

269:                                              ; preds = %originalBBpart2163
  %270 = load i32, i32* @x.33
  %271 = load i32, i32* @y.34
  %272 = sub i32 %270, 1
  %273 = mul i32 %270, %272
  %274 = urem i32 %273, 2
  %275 = icmp eq i32 %274, 0
  %276 = icmp slt i32 %271, 10
  %277 = or i1 %275, %276
  br i1 %277, label %originalBB165, label %originalBB165alteredBB

originalBB165:                                    ; preds = %269, %originalBB165alteredBB
  %278 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1572
  %279 = bitcast %struct.slotvec* %278 to i8*, !dbg !1573
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %279, i8* align 8 bitcast (%struct.slotvec* @slotvec0 to i8*), i64 16, i1 false), !dbg !1573
  %280 = load i32, i32* @x.33
  %281 = load i32, i32* @y.34
  %282 = sub i32 %280, 1
  %283 = mul i32 %280, %282
  %284 = urem i32 %283, 2
  %285 = icmp eq i32 %284, 0
  %286 = icmp slt i32 %281, 10
  %287 = or i1 %285, %286
  br i1 %287, label %originalBBpart2167, label %originalBB165alteredBB

originalBBpart2167:                               ; preds = %originalBB165
  br label %288, !dbg !1574

288:                                              ; preds = %originalBBpart2167, %originalBBpart2163
  %289 = load i32, i32* @x.33
  %290 = load i32, i32* @y.34
  %291 = sub i32 %289, 1
  %292 = mul i32 %289, %291
  %293 = urem i32 %292, 2
  %294 = icmp eq i32 %293, 0
  %295 = icmp slt i32 %290, 10
  %296 = or i1 %294, %295
  br i1 %296, label %originalBB169, label %originalBB169alteredBB

originalBB169:                                    ; preds = %288, %originalBB169alteredBB
  %297 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1575
  %298 = load i32, i32* @nslots, align 4, !dbg !1576
  %299 = sext i32 %298 to i64, !dbg !1577
  %300 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %297, i64 %299, !dbg !1577
  %301 = bitcast %struct.slotvec* %300 to i8*, !dbg !1578
  %302 = load i32, i32* %5, align 4, !dbg !1579
  %303 = add nsw i32 %302, 1, !dbg !1580
  %304 = load i32, i32* @nslots, align 4, !dbg !1581
  %305 = sub nsw i32 %303, %304, !dbg !1582
  %306 = sext i32 %305 to i64, !dbg !1583
  %307 = mul i64 %306, 16, !dbg !1584
  call void @llvm.memset.p0i8.i64(i8* align 8 %301, i8 0, i64 %307, i1 false), !dbg !1578
  %308 = load i32, i32* %5, align 4, !dbg !1585
  %309 = add nsw i32 %308, 1, !dbg !1586
  store i32 %309, i32* @nslots, align 4, !dbg !1587
  %310 = load i32, i32* @x.33
  %311 = load i32, i32* @y.34
  %312 = sub i32 %310, 1
  %313 = mul i32 %310, %312
  %314 = urem i32 %313, 2
  %315 = icmp eq i32 %314, 0
  %316 = icmp slt i32 %311, 10
  %317 = or i1 %315, %316
  br i1 %317, label %originalBBpart2216, label %originalBB169alteredBB

originalBBpart2216:                               ; preds = %originalBB169
  br label %318, !dbg !1588

318:                                              ; preds = %originalBBpart2216, %originalBBpart269
  call void @llvm.dbg.declare(metadata i64* %13, metadata !1589, metadata !DIExpression()), !dbg !1591
  %319 = load i32, i32* @x.33
  %320 = load i32, i32* @y.34
  %321 = sub i32 %319, 1
  %322 = mul i32 %319, %321
  %323 = urem i32 %322, 2
  %324 = icmp eq i32 %323, 0
  %325 = icmp slt i32 %320, 10
  %326 = or i1 %324, %325
  br i1 %326, label %originalBB218, label %originalBB218alteredBB

originalBB218:                                    ; preds = %318, %originalBB218alteredBB
  %327 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1592
  %328 = load i32, i32* %5, align 4, !dbg !1593
  %329 = sext i32 %328 to i64, !dbg !1592
  %330 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %327, i64 %329, !dbg !1592
  %331 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %330, i32 0, i32 0, !dbg !1594
  %332 = load i64, i64* %331, align 8, !dbg !1594
  store i64 %332, i64* %13, align 8, !dbg !1591
  call void @llvm.dbg.declare(metadata i8** %14, metadata !1595, metadata !DIExpression()), !dbg !1596
  %333 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1597
  %334 = load i32, i32* %5, align 4, !dbg !1598
  %335 = sext i32 %334 to i64, !dbg !1597
  %336 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %333, i64 %335, !dbg !1597
  %337 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %336, i32 0, i32 1, !dbg !1599
  %338 = load i8*, i8** %337, align 8, !dbg !1599
  store i8* %338, i8** %14, align 8, !dbg !1596
  call void @llvm.dbg.declare(metadata i32* %15, metadata !1600, metadata !DIExpression()), !dbg !1601
  %339 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1602
  %340 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %339, i32 0, i32 1, !dbg !1603
  %341 = load i32, i32* %340, align 4, !dbg !1603
  %342 = or i32 %341, 1, !dbg !1604
  store i32 %342, i32* %15, align 4, !dbg !1601
  call void @llvm.dbg.declare(metadata i64* %16, metadata !1605, metadata !DIExpression()), !dbg !1606
  %343 = load i8*, i8** %14, align 8, !dbg !1607
  %344 = load i64, i64* %13, align 8, !dbg !1608
  %345 = load i8*, i8** %6, align 8, !dbg !1609
  %346 = load i64, i64* %7, align 8, !dbg !1610
  %347 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1611
  %348 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %347, i32 0, i32 0, !dbg !1612
  %349 = load i32, i32* %348, align 8, !dbg !1612
  %350 = load i32, i32* %15, align 4, !dbg !1613
  %351 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1614
  %352 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %351, i32 0, i32 2, !dbg !1615
  %353 = getelementptr inbounds [8 x i32], [8 x i32]* %352, i64 0, i64 0, !dbg !1614
  %354 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1616
  %355 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %354, i32 0, i32 3, !dbg !1617
  %356 = load i8*, i8** %355, align 8, !dbg !1617
  %357 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1618
  %358 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %357, i32 0, i32 4, !dbg !1619
  %359 = load i8*, i8** %358, align 8, !dbg !1619
  %360 = call i64 @quotearg_buffer_restyled(i8* %343, i64 %344, i8* %345, i64 %346, i32 %349, i32 %350, i32* %353, i8* %356, i8* %359), !dbg !1620
  store i64 %360, i64* %16, align 8, !dbg !1606
  %361 = load i64, i64* %13, align 8, !dbg !1621
  %362 = load i64, i64* %16, align 8, !dbg !1623
  %363 = icmp ule i64 %361, %362, !dbg !1624
  %364 = load i32, i32* @x.33
  %365 = load i32, i32* @y.34
  %366 = sub i32 %364, 1
  %367 = mul i32 %364, %366
  %368 = urem i32 %367, 2
  %369 = icmp eq i32 %368, 0
  %370 = icmp slt i32 %365, 10
  %371 = or i1 %369, %370
  br i1 %371, label %originalBBpart2228, label %originalBB218alteredBB

originalBBpart2228:                               ; preds = %originalBB218
  br i1 %363, label %372, label %501, !dbg !1625

372:                                              ; preds = %originalBBpart2228
  %373 = load i32, i32* @x.33
  %374 = load i32, i32* @y.34
  %375 = sub i32 %373, 1
  %376 = mul i32 %373, %375
  %377 = urem i32 %376, 2
  %378 = icmp eq i32 %377, 0
  %379 = icmp slt i32 %374, 10
  %380 = or i1 %378, %379
  br i1 %380, label %originalBB230, label %originalBB230alteredBB

originalBB230:                                    ; preds = %372, %originalBB230alteredBB
  %381 = load i64, i64* %16, align 8, !dbg !1626
  %382 = add i64 %381, 1, !dbg !1628
  store i64 %382, i64* %13, align 8, !dbg !1629
  %383 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1630
  %384 = load i32, i32* %5, align 4, !dbg !1631
  %385 = trunc i64 %382 to i32
  %386 = mul i32 %385, 4
  %387 = add i32 %386, -1
  %388 = mul i32 %387, %387
  %389 = sub i32 %388, %387
  %390 = srem i32 %389, 2
  %391 = mul i32 %390, 3
  %392 = add i32 %391, -2
  %393 = icmp ne i32 %392, -2
  %394 = load i32, i32* @x.33
  %395 = load i32, i32* @y.34
  %396 = sub i32 %394, 1
  %397 = mul i32 %394, %396
  %398 = urem i32 %397, 2
  %399 = icmp eq i32 %398, 0
  %400 = icmp slt i32 %395, 10
  %401 = or i1 %399, %400
  br i1 %401, label %originalBBpart2273, label %originalBB230alteredBB

originalBBpart2273:                               ; preds = %originalBB230
  br i1 %393, label %402, label %419

402:                                              ; preds = %originalBBpart2273
  %403 = load i32, i32* @x.33
  %404 = load i32, i32* @y.34
  %405 = sub i32 %403, 1
  %406 = mul i32 %403, %405
  %407 = urem i32 %406, 2
  %408 = icmp eq i32 %407, 0
  %409 = icmp slt i32 %404, 10
  %410 = or i1 %408, %409
  br i1 %410, label %originalBB275, label %originalBB275alteredBB

originalBB275:                                    ; preds = %402, %originalBB275alteredBB
  %411 = load i32, i32* @x.33
  %412 = load i32, i32* @y.34
  %413 = sub i32 %411, 1
  %414 = mul i32 %411, %413
  %415 = urem i32 %414, 2
  %416 = icmp eq i32 %415, 0
  %417 = icmp slt i32 %412, 10
  %418 = or i1 %416, %417
  br i1 %418, label %originalBBpart2277, label %originalBB275alteredBB

originalBBpart2277:                               ; preds = %originalBB275
  ret i8* null

419:                                              ; preds = %originalBBpart2273
  %420 = load i32, i32* @x.33
  %421 = load i32, i32* @y.34
  %422 = sub i32 %420, 1
  %423 = mul i32 %420, %422
  %424 = urem i32 %423, 2
  %425 = icmp eq i32 %424, 0
  %426 = icmp slt i32 %421, 10
  %427 = or i1 %425, %426
  br i1 %427, label %originalBB279, label %originalBB279alteredBB

originalBB279:                                    ; preds = %419, %originalBB279alteredBB
  %428 = sext i32 %384 to i64, !dbg !1630
  %429 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %383, i64 %428, !dbg !1630
  %430 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %429, i32 0, i32 0, !dbg !1632
  store i64 %382, i64* %430, align 8, !dbg !1633
  %431 = load i8*, i8** %14, align 8, !dbg !1634
  %432 = icmp ne i8* %431, getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0), !dbg !1636
  %433 = load i32, i32* @x.33
  %434 = load i32, i32* @y.34
  %435 = sub i32 %433, 1
  %436 = mul i32 %433, %435
  %437 = urem i32 %436, 2
  %438 = icmp eq i32 %437, 0
  %439 = icmp slt i32 %434, 10
  %440 = or i1 %438, %439
  br i1 %440, label %originalBBpart2281, label %originalBB279alteredBB

originalBBpart2281:                               ; preds = %originalBB279
  br i1 %432, label %441, label %459, !dbg !1637

441:                                              ; preds = %originalBBpart2281
  %442 = load i32, i32* @x.33
  %443 = load i32, i32* @y.34
  %444 = sub i32 %442, 1
  %445 = mul i32 %442, %444
  %446 = urem i32 %445, 2
  %447 = icmp eq i32 %446, 0
  %448 = icmp slt i32 %443, 10
  %449 = or i1 %447, %448
  br i1 %449, label %originalBB283, label %originalBB283alteredBB

originalBB283:                                    ; preds = %441, %originalBB283alteredBB
  %450 = load i8*, i8** %14, align 8, !dbg !1638
  call void @free(i8* %450) #10, !dbg !1639
  %451 = load i32, i32* @x.33
  %452 = load i32, i32* @y.34
  %453 = sub i32 %451, 1
  %454 = mul i32 %451, %453
  %455 = urem i32 %454, 2
  %456 = icmp eq i32 %455, 0
  %457 = icmp slt i32 %452, 10
  %458 = or i1 %456, %457
  br i1 %458, label %originalBBpart2285, label %originalBB283alteredBB

originalBBpart2285:                               ; preds = %originalBB283
  br label %459, !dbg !1639

459:                                              ; preds = %originalBBpart2285, %originalBBpart2281
  %460 = load i32, i32* @x.33
  %461 = load i32, i32* @y.34
  %462 = sub i32 %460, 1
  %463 = mul i32 %460, %462
  %464 = urem i32 %463, 2
  %465 = icmp eq i32 %464, 0
  %466 = icmp slt i32 %461, 10
  %467 = or i1 %465, %466
  br i1 %467, label %originalBB287, label %originalBB287alteredBB

originalBB287:                                    ; preds = %459, %originalBB287alteredBB
  %468 = load i64, i64* %13, align 8, !dbg !1640
  %469 = call noalias i8* @xcharalloc(i64 %468), !dbg !1641
  store i8* %469, i8** %14, align 8, !dbg !1642
  %470 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1643
  %471 = load i32, i32* %5, align 4, !dbg !1644
  %472 = sext i32 %471 to i64, !dbg !1643
  %473 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %470, i64 %472, !dbg !1643
  %474 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %473, i32 0, i32 1, !dbg !1645
  store i8* %469, i8** %474, align 8, !dbg !1646
  %475 = load i8*, i8** %14, align 8, !dbg !1647
  %476 = load i64, i64* %13, align 8, !dbg !1648
  %477 = load i8*, i8** %6, align 8, !dbg !1649
  %478 = load i64, i64* %7, align 8, !dbg !1650
  %479 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1651
  %480 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %479, i32 0, i32 0, !dbg !1652
  %481 = load i32, i32* %480, align 8, !dbg !1652
  %482 = load i32, i32* %15, align 4, !dbg !1653
  %483 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1654
  %484 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %483, i32 0, i32 2, !dbg !1655
  %485 = getelementptr inbounds [8 x i32], [8 x i32]* %484, i64 0, i64 0, !dbg !1654
  %486 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1656
  %487 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %486, i32 0, i32 3, !dbg !1657
  %488 = load i8*, i8** %487, align 8, !dbg !1657
  %489 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1658
  %490 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %489, i32 0, i32 4, !dbg !1659
  %491 = load i8*, i8** %490, align 8, !dbg !1659
  %492 = call i64 @quotearg_buffer_restyled(i8* %475, i64 %476, i8* %477, i64 %478, i32 %481, i32 %482, i32* %485, i8* %488, i8* %491), !dbg !1660
  %493 = load i32, i32* @x.33
  %494 = load i32, i32* @y.34
  %495 = sub i32 %493, 1
  %496 = mul i32 %493, %495
  %497 = urem i32 %496, 2
  %498 = icmp eq i32 %497, 0
  %499 = icmp slt i32 %494, 10
  %500 = or i1 %498, %499
  br i1 %500, label %originalBBpart2289, label %originalBB287alteredBB

originalBBpart2289:                               ; preds = %originalBB287
  br label %501, !dbg !1661

501:                                              ; preds = %originalBBpart2289, %originalBBpart2228
  %502 = load i32, i32* @x.33
  %503 = load i32, i32* @y.34
  %504 = sub i32 %502, 1
  %505 = mul i32 %502, %504
  %506 = urem i32 %505, 2
  %507 = icmp eq i32 %506, 0
  %508 = icmp slt i32 %503, 10
  %509 = or i1 %507, %508
  br i1 %509, label %originalBB291, label %originalBB291alteredBB

originalBB291:                                    ; preds = %501, %originalBB291alteredBB
  %510 = load i32, i32* %9, align 4, !dbg !1662
  %511 = call i32* @__errno_location() #15, !dbg !1663
  store i32 %510, i32* %511, align 4, !dbg !1664
  %512 = mul i32 %510, -3
  %513 = add i32 %512, -1
  %514 = mul i32 %510, 3
  %515 = add i32 %514, -2
  %516 = mul i32 %513, %513
  %517 = mul i32 %515, %515
  %518 = mul i32 %517, 34
  %519 = sub i32 %516, %518
  %520 = add i32 %519, 4
  %521 = icmp ne i32 %520, 4
  %522 = load i32, i32* @x.33
  %523 = load i32, i32* @y.34
  %524 = sub i32 %522, 1
  %525 = mul i32 %522, %524
  %526 = urem i32 %525, 2
  %527 = icmp eq i32 %526, 0
  %528 = icmp slt i32 %523, 10
  %529 = or i1 %527, %528
  br i1 %529, label %originalBBpart2351, label %originalBB291alteredBB

originalBBpart2351:                               ; preds = %originalBB291
  br i1 %521, label %531, label %530

530:                                              ; preds = %originalBBpart2351
  ret i8* null

531:                                              ; preds = %originalBBpart2351
  %532 = load i32, i32* @x.33
  %533 = load i32, i32* @y.34
  %534 = sub i32 %532, 1
  %535 = mul i32 %532, %534
  %536 = urem i32 %535, 2
  %537 = icmp eq i32 %536, 0
  %538 = icmp slt i32 %533, 10
  %539 = or i1 %537, %538
  br i1 %539, label %originalBB353, label %originalBB353alteredBB

originalBB353:                                    ; preds = %531, %originalBB353alteredBB
  %540 = load i8*, i8** %14, align 8, !dbg !1665
  %541 = load i32, i32* @x.33
  %542 = load i32, i32* @y.34
  %543 = sub i32 %541, 1
  %544 = mul i32 %541, %543
  %545 = urem i32 %544, 2
  %546 = icmp eq i32 %545, 0
  %547 = icmp slt i32 %542, 10
  %548 = or i1 %546, %547
  br i1 %548, label %originalBBpart2355, label %originalBB353alteredBB

originalBBpart2355:                               ; preds = %originalBB353
  ret i8* %540, !dbg !1666

originalBBalteredBB:                              ; preds = %originalBB, %22
  call void @abort() #12, !dbg !1541
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %39
  %549 = load i32, i32* @nslots, align 4, !dbg !1542
  %_ = shl i32 %549, 4
  %_2 = sub i32 0, %549
  %gen = add i32 %_2, 4
  %_3 = shl i32 %549, 4
  %550 = mul i32 %549, 4
  %_4 = shl i32 %550, 5
  %_5 = sub i32 0, %550
  %gen6 = add i32 %_5, 5
  %_7 = shl i32 %550, 5
  %_8 = sub i32 %550, 5
  %gen9 = mul i32 %_8, 5
  %_10 = sub i32 0, %550
  %gen11 = add i32 %_10, 5
  %_12 = sub i32 %550, 5
  %gen13 = mul i32 %_12, 5
  %_14 = shl i32 %550, 5
  %551 = add i32 %550, 5
  %_15 = sub i32 %551, %551
  %gen16 = mul i32 %_15, %551
  %_17 = sub i32 %551, %551
  %gen18 = mul i32 %_17, %551
  %_19 = shl i32 %551, %551
  %_20 = sub i32 0, %551
  %gen21 = add i32 %_20, %551
  %_22 = sub i32 %551, %551
  %gen23 = mul i32 %_22, %551
  %_24 = sub i32 0, %551
  %gen25 = add i32 %_24, %551
  %_26 = sub i32 %551, %551
  %gen27 = mul i32 %_26, %551
  %_28 = shl i32 %551, %551
  %552 = mul i32 %551, %551
  %_29 = sub i32 0, %552
  %gen30 = add i32 %_29, %551
  %_31 = sub i32 %552, %551
  %gen32 = mul i32 %_31, %551
  %_33 = sub i32 0, %552
  %gen34 = add i32 %_33, %551
  %_35 = shl i32 %552, %551
  %_36 = sub i32 %552, %551
  %gen37 = mul i32 %_36, %551
  %_38 = sub i32 %552, %551
  %gen39 = mul i32 %_38, %551
  %_40 = sub i32 %552, %551
  %gen41 = mul i32 %_40, %551
  %_42 = sub i32 %552, %551
  %gen43 = mul i32 %_42, %551
  %553 = sub i32 %552, %551
  %_44 = shl i32 %553, 2
  %_45 = shl i32 %553, 2
  %_46 = sub i32 %553, 2
  %gen47 = mul i32 %_46, 2
  %_48 = sub i32 0, %553
  %gen49 = add i32 %_48, 2
  %_50 = sub i32 %553, 2
  %gen51 = mul i32 %_50, 2
  %_52 = sub i32 %553, 2
  %gen53 = mul i32 %_52, 2
  %_54 = sub i32 %553, 2
  %gen55 = mul i32 %_54, 2
  %554 = srem i32 %553, 2
  %_56 = sub i32 0, %554
  %gen57 = add i32 %_56, 1
  %_58 = shl i32 %554, 1
  %_59 = shl i32 %554, 1
  %555 = add i32 %554, 1
  %556 = icmp eq i32 %555, 1
  br label %originalBB1

originalBB63alteredBB:                            ; preds = %originalBB63, %64
  br label %originalBB63

originalBB67alteredBB:                            ; preds = %originalBB67, %81
  %557 = load i32, i32* %5, align 4, !dbg !1544
  %558 = icmp sle i32 %48, %557, !dbg !1545
  br label %originalBB67

originalBB71alteredBB:                            ; preds = %originalBB71, %100
  %559 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1550
  %560 = icmp eq %struct.slotvec* %559, @slotvec0, !dbg !1551
  %561 = zext i1 %560 to i8, !dbg !1549
  store i8 %561, i8* %11, align 1, !dbg !1549
  call void @llvm.dbg.declare(metadata !4, metadata !1667, metadata !DIExpression()), !dbg !1553
  store i32 2147483646, i32* %12, align 4, !dbg !1553
  %562 = load i32, i32* %12, align 4, !dbg !1554
  %563 = load i32, i32* %5, align 4, !dbg !1556
  %564 = icmp slt i32 %562, %563, !dbg !1557
  br label %originalBB71

originalBB75alteredBB:                            ; preds = %originalBB75, %123
  call void @xalloc_die() #14, !dbg !1559
  br label %originalBB75

originalBB79alteredBB:                            ; preds = %originalBB79, %140
  %565 = load i8, i8* %11, align 1, !dbg !1560
  %566 = trunc i8 %565 to i1, !dbg !1560
  br label %originalBB79

originalBB83alteredBB:                            ; preds = %originalBB83, %159
  br label %originalBB83

originalBB87alteredBB:                            ; preds = %originalBB87, %176
  %567 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1561
  br label %originalBB87

originalBB91alteredBB:                            ; preds = %originalBB91, %194
  %568 = bitcast %struct.slotvec* %195 to i8*, !dbg !1560
  %569 = load i32, i32* %5, align 4, !dbg !1562
  %_92 = shl i32 %569, 1
  %570 = add nsw i32 %569, 1, !dbg !1563
  %571 = sext i32 %570 to i64, !dbg !1564
  %_93 = shl i64 %571, 16
  %572 = mul i64 %571, 16, !dbg !1565
  %573 = trunc i64 16 to i32
  %_94 = shl i32 %573, 5
  %_95 = sub i32 0, %573
  %gen96 = add i32 %_95, 5
  %_97 = sub i32 %573, 5
  %gen98 = mul i32 %_97, 5
  %_99 = sub i32 %573, 5
  %gen100 = mul i32 %_99, 5
  %_101 = shl i32 %573, 5
  %_102 = sub i32 0, %573
  %gen103 = add i32 %_102, 5
  %574 = add i32 %573, 5
  %575 = trunc i64 16 to i32
  %_104 = sub i32 0, %575
  %gen105 = add i32 %_104, -2
  %_106 = sub i32 0, %575
  %gen107 = add i32 %_106, -2
  %_108 = shl i32 %575, -2
  %_109 = shl i32 %575, -2
  %576 = mul i32 %575, -2
  %_110 = sub i32 0, %576
  %gen111 = add i32 %_110, -4
  %_112 = sub i32 %576, -4
  %gen113 = mul i32 %_112, -4
  %577 = add i32 %576, -4
  %_114 = sub i32 %574, %574
  %gen115 = mul i32 %_114, %574
  %_116 = sub i32 %574, %574
  %gen117 = mul i32 %_116, %574
  %_118 = shl i32 %574, %574
  %_119 = shl i32 %574, %574
  %578 = mul i32 %574, %574
  %_120 = sub i32 0, %577
  %gen121 = add i32 %_120, %577
  %579 = mul i32 %577, %577
  %_122 = sub i32 0, %578
  %gen123 = add i32 %_122, %579
  %_124 = shl i32 %578, %579
  %580 = add i32 %578, %579
  %_125 = sub i32 %574, %577
  %gen126 = mul i32 %_125, %577
  %_127 = sub i32 0, %574
  %gen128 = add i32 %_127, %577
  %_129 = shl i32 %574, %577
  %_130 = sub i32 0, %574
  %gen131 = add i32 %_130, %577
  %_132 = shl i32 %574, %577
  %_133 = sub i32 %574, %577
  %gen134 = mul i32 %_133, %577
  %_135 = shl i32 %574, %577
  %581 = mul i32 %574, %577
  %_136 = shl i32 %581, 2
  %_137 = shl i32 %581, 2
  %_138 = sub i32 %581, 2
  %gen139 = mul i32 %_138, 2
  %_140 = shl i32 %581, 2
  %582 = mul i32 %581, 2
  %_141 = sub i32 0, %580
  %gen142 = add i32 %_141, %582
  %_143 = sub i32 %580, %582
  %gen144 = mul i32 %_143, %582
  %583 = sub i32 %580, %582
  %584 = mul i32 %583, 5
  %_145 = sub i32 0, %584
  %gen146 = add i32 %_145, 2
  %_147 = sub i32 0, %584
  %gen148 = add i32 %_147, 2
  %_149 = sub i32 %584, 2
  %gen150 = mul i32 %_149, 2
  %_151 = sub i32 %584, 2
  %gen152 = mul i32 %_151, 2
  %_153 = shl i32 %584, 2
  %585 = add i32 %584, 2
  %586 = icmp eq i32 %585, -3
  br label %originalBB91

originalBB157alteredBB:                           ; preds = %originalBB157, %231
  br label %originalBB157

originalBB161alteredBB:                           ; preds = %originalBB161, %248
  %587 = call i8* @xrealloc(i8* %204, i64 %208), !dbg !1566
  %588 = bitcast i8* %587 to %struct.slotvec*, !dbg !1566
  store %struct.slotvec* %588, %struct.slotvec** %10, align 8, !dbg !1567
  store %struct.slotvec* %588, %struct.slotvec** @slotvec, align 8, !dbg !1568
  %589 = load i8, i8* %11, align 1, !dbg !1569
  %590 = trunc i8 %589 to i1, !dbg !1569
  br label %originalBB161

originalBB165alteredBB:                           ; preds = %originalBB165, %269
  %591 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1572
  %592 = bitcast %struct.slotvec* %591 to i8*, !dbg !1573
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %592, i8* align 8 bitcast (%struct.slotvec* @slotvec0 to i8*), i64 16, i1 false), !dbg !1573
  br label %originalBB165

originalBB169alteredBB:                           ; preds = %originalBB169, %288
  %593 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1575
  %594 = load i32, i32* @nslots, align 4, !dbg !1576
  %595 = sext i32 %594 to i64, !dbg !1577
  %596 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %593, i64 %595, !dbg !1577
  %597 = bitcast %struct.slotvec* %596 to i8*, !dbg !1578
  %598 = load i32, i32* %5, align 4, !dbg !1579
  %_170 = sub i32 %598, 1
  %gen171 = mul i32 %_170, 1
  %_172 = sub i32 0, %598
  %gen173 = add i32 %_172, 1
  %_174 = sub i32 %598, 1
  %gen175 = mul i32 %_174, 1
  %_176 = sub i32 0, %598
  %gen177 = add i32 %_176, 1
  %599 = add nsw i32 %598, 1, !dbg !1580
  %600 = load i32, i32* @nslots, align 4, !dbg !1581
  %_178 = sub i32 %599, %600
  %gen179 = mul i32 %_178, %600
  %_180 = sub i32 0, %599
  %gen181 = add i32 %_180, %600
  %_182 = sub i32 0, %599
  %gen183 = add i32 %_182, %600
  %_184 = shl i32 %599, %600
  %_185 = sub i32 0, %599
  %gen186 = add i32 %_185, %600
  %_187 = sub i32 0, %599
  %gen188 = add i32 %_187, %600
  %_189 = sub i32 %599, %600
  %gen190 = mul i32 %_189, %600
  %601 = sub nsw i32 %599, %600, !dbg !1582
  %602 = sext i32 %601 to i64, !dbg !1583
  %_191 = shl i64 %602, 16
  %_192 = sub i64 %602, 16
  %gen193 = mul i64 %_192, 16
  %_194 = shl i64 %602, 16
  %_195 = sub i64 0, %602
  %gen196 = add i64 %_195, 16
  %_197 = sub i64 %602, 16
  %gen198 = mul i64 %_197, 16
  %_199 = sub i64 %602, 16
  %gen200 = mul i64 %_199, 16
  %_201 = sub i64 %602, 16
  %gen202 = mul i64 %_201, 16
  %603 = mul i64 %602, 16, !dbg !1584
  call void @llvm.memset.p0i8.i64(i8* align 8 %597, i8 0, i64 %603, i1 false), !dbg !1578
  %604 = load i32, i32* %5, align 4, !dbg !1585
  %_203 = sub i32 0, %604
  %gen204 = add i32 %_203, 1
  %_205 = sub i32 %604, 1
  %gen206 = mul i32 %_205, 1
  %_207 = shl i32 %604, 1
  %_208 = sub i32 %604, 1
  %gen209 = mul i32 %_208, 1
  %_210 = shl i32 %604, 1
  %_211 = sub i32 0, %604
  %gen212 = add i32 %_211, 1
  %_213 = sub i32 0, %604
  %gen214 = add i32 %_213, 1
  %605 = add nsw i32 %604, 1, !dbg !1586
  store i32 %605, i32* @nslots, align 4, !dbg !1587
  br label %originalBB169

originalBB218alteredBB:                           ; preds = %originalBB218, %318
  %606 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1592
  %607 = load i32, i32* %5, align 4, !dbg !1593
  %608 = sext i32 %607 to i64, !dbg !1592
  %609 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %606, i64 %608, !dbg !1592
  %610 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %609, i32 0, i32 0, !dbg !1594
  %611 = load i64, i64* %610, align 8, !dbg !1594
  store i64 %611, i64* %13, align 8, !dbg !1591
  call void @llvm.dbg.declare(metadata !4, metadata !1705, metadata !DIExpression()), !dbg !1596
  %612 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1597
  %613 = load i32, i32* %5, align 4, !dbg !1598
  %614 = sext i32 %613 to i64, !dbg !1597
  %615 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %612, i64 %614, !dbg !1597
  %616 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %615, i32 0, i32 1, !dbg !1599
  %617 = load i8*, i8** %616, align 8, !dbg !1599
  store i8* %617, i8** %14, align 8, !dbg !1596
  call void @llvm.dbg.declare(metadata !4, metadata !1742, metadata !DIExpression()), !dbg !1601
  %618 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1602
  %619 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %618, i32 0, i32 1, !dbg !1603
  %620 = load i32, i32* %619, align 4, !dbg !1603
  %_219 = shl i32 %620, 1
  %_220 = shl i32 %620, 1
  %_221 = sub i32 %620, 1
  %gen222 = mul i32 %_221, 1
  %_223 = sub i32 %620, 1
  %gen224 = mul i32 %_223, 1
  %_225 = sub i32 %620, 1
  %gen226 = mul i32 %_225, 1
  %621 = or i32 %620, 1, !dbg !1604
  store i32 %621, i32* %15, align 4, !dbg !1601
  call void @llvm.dbg.declare(metadata !4, metadata !1743, metadata !DIExpression()), !dbg !1606
  %622 = load i8*, i8** %14, align 8, !dbg !1607
  %623 = load i64, i64* %13, align 8, !dbg !1608
  %624 = load i8*, i8** %6, align 8, !dbg !1609
  %625 = load i64, i64* %7, align 8, !dbg !1610
  %626 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1611
  %627 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %626, i32 0, i32 0, !dbg !1612
  %628 = load i32, i32* %627, align 8, !dbg !1612
  %629 = load i32, i32* %15, align 4, !dbg !1613
  %630 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1614
  %631 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %630, i32 0, i32 2, !dbg !1615
  %632 = getelementptr inbounds [8 x i32], [8 x i32]* %631, i64 0, i64 0, !dbg !1614
  %633 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1616
  %634 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %633, i32 0, i32 3, !dbg !1617
  %635 = load i8*, i8** %634, align 8, !dbg !1617
  %636 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1618
  %637 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %636, i32 0, i32 4, !dbg !1619
  %638 = load i8*, i8** %637, align 8, !dbg !1619
  %639 = call i64 @quotearg_buffer_restyled(i8* %622, i64 %623, i8* %624, i64 %625, i32 %628, i32 %629, i32* %632, i8* %635, i8* %638), !dbg !1620
  store i64 %639, i64* %16, align 8, !dbg !1606
  %640 = load i64, i64* %13, align 8, !dbg !1621
  %641 = load i64, i64* %16, align 8, !dbg !1623
  %642 = icmp ule i64 %640, %641, !dbg !1624
  br label %originalBB218

originalBB230alteredBB:                           ; preds = %originalBB230, %372
  %643 = load i64, i64* %16, align 8, !dbg !1626
  %_231 = sub i64 0, %643
  %gen232 = add i64 %_231, 1
  %644 = add i64 %643, 1, !dbg !1628
  store i64 %644, i64* %13, align 8, !dbg !1629
  %645 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1630
  %646 = load i32, i32* %5, align 4, !dbg !1631
  %647 = trunc i64 %644 to i32
  %_233 = sub i32 0, %647
  %gen234 = add i32 %_233, 4
  %_235 = sub i32 %647, 4
  %gen236 = mul i32 %_235, 4
  %_237 = sub i32 %647, 4
  %gen238 = mul i32 %_237, 4
  %_239 = sub i32 %647, 4
  %gen240 = mul i32 %_239, 4
  %_241 = shl i32 %647, 4
  %648 = mul i32 %647, 4
  %_242 = shl i32 %648, -1
  %649 = add i32 %648, -1
  %_243 = sub i32 %649, %649
  %gen244 = mul i32 %_243, %649
  %_245 = shl i32 %649, %649
  %650 = mul i32 %649, %649
  %_246 = sub i32 %650, %649
  %gen247 = mul i32 %_246, %649
  %_248 = shl i32 %650, %649
  %_249 = sub i32 0, %650
  %gen250 = add i32 %_249, %649
  %_251 = sub i32 %650, %649
  %gen252 = mul i32 %_251, %649
  %_253 = sub i32 0, %650
  %gen254 = add i32 %_253, %649
  %651 = sub i32 %650, %649
  %_255 = sub i32 0, %651
  %gen256 = add i32 %_255, 2
  %_257 = sub i32 0, %651
  %gen258 = add i32 %_257, 2
  %_259 = sub i32 0, %651
  %gen260 = add i32 %_259, 2
  %_261 = shl i32 %651, 2
  %_262 = sub i32 0, %651
  %gen263 = add i32 %_262, 2
  %652 = srem i32 %651, 2
  %_264 = shl i32 %652, 3
  %_265 = sub i32 %652, 3
  %gen266 = mul i32 %_265, 3
  %_267 = sub i32 0, %652
  %gen268 = add i32 %_267, 3
  %653 = mul i32 %652, 3
  %_269 = sub i32 %653, -2
  %gen270 = mul i32 %_269, -2
  %_271 = shl i32 %653, -2
  %654 = add i32 %653, -2
  %655 = icmp ne i32 %654, -2
  br label %originalBB230

originalBB275alteredBB:                           ; preds = %originalBB275, %402
  br label %originalBB275

originalBB279alteredBB:                           ; preds = %originalBB279, %419
  %656 = sext i32 %384 to i64, !dbg !1630
  %657 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %383, i64 %656, !dbg !1630
  %658 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %657, i32 0, i32 0, !dbg !1632
  store i64 %382, i64* %658, align 8, !dbg !1633
  %659 = load i8*, i8** %14, align 8, !dbg !1634
  %660 = icmp ne i8* %659, getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0), !dbg !1636
  br label %originalBB279

originalBB283alteredBB:                           ; preds = %originalBB283, %441
  %661 = load i8*, i8** %14, align 8, !dbg !1638
  call void @free(i8* %661) #10, !dbg !1639
  br label %originalBB283

originalBB287alteredBB:                           ; preds = %originalBB287, %459
  %662 = load i64, i64* %13, align 8, !dbg !1640
  %663 = call noalias i8* @xcharalloc(i64 %662), !dbg !1641
  store i8* %663, i8** %14, align 8, !dbg !1642
  %664 = load %struct.slotvec*, %struct.slotvec** %10, align 8, !dbg !1643
  %665 = load i32, i32* %5, align 4, !dbg !1644
  %666 = sext i32 %665 to i64, !dbg !1643
  %667 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %664, i64 %666, !dbg !1643
  %668 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %667, i32 0, i32 1, !dbg !1645
  store i8* %663, i8** %668, align 8, !dbg !1646
  %669 = load i8*, i8** %14, align 8, !dbg !1647
  %670 = load i64, i64* %13, align 8, !dbg !1648
  %671 = load i8*, i8** %6, align 8, !dbg !1649
  %672 = load i64, i64* %7, align 8, !dbg !1650
  %673 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1651
  %674 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %673, i32 0, i32 0, !dbg !1652
  %675 = load i32, i32* %674, align 8, !dbg !1652
  %676 = load i32, i32* %15, align 4, !dbg !1653
  %677 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1654
  %678 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %677, i32 0, i32 2, !dbg !1655
  %679 = getelementptr inbounds [8 x i32], [8 x i32]* %678, i64 0, i64 0, !dbg !1654
  %680 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1656
  %681 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %680, i32 0, i32 3, !dbg !1657
  %682 = load i8*, i8** %681, align 8, !dbg !1657
  %683 = load %struct.quoting_options*, %struct.quoting_options** %8, align 8, !dbg !1658
  %684 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %683, i32 0, i32 4, !dbg !1659
  %685 = load i8*, i8** %684, align 8, !dbg !1659
  %686 = call i64 @quotearg_buffer_restyled(i8* %669, i64 %670, i8* %671, i64 %672, i32 %675, i32 %676, i32* %679, i8* %682, i8* %685), !dbg !1660
  br label %originalBB287

originalBB291alteredBB:                           ; preds = %originalBB291, %501
  %687 = load i32, i32* %9, align 4, !dbg !1662
  %688 = call i32* @__errno_location() #15, !dbg !1663
  store i32 %687, i32* %688, align 4, !dbg !1664
  %_292 = shl i32 %687, -3
  %_293 = shl i32 %687, -3
  %_294 = sub i32 0, %687
  %gen295 = add i32 %_294, -3
  %_296 = sub i32 0, %687
  %gen297 = add i32 %_296, -3
  %_298 = shl i32 %687, -3
  %689 = mul i32 %687, -3
  %_299 = shl i32 %689, -1
  %_300 = sub i32 %689, -1
  %gen301 = mul i32 %_300, -1
  %_302 = shl i32 %689, -1
  %690 = add i32 %689, -1
  %_303 = sub i32 0, %687
  %gen304 = add i32 %_303, 3
  %_305 = sub i32 %687, 3
  %gen306 = mul i32 %_305, 3
  %_307 = sub i32 0, %687
  %gen308 = add i32 %_307, 3
  %_309 = sub i32 %687, 3
  %gen310 = mul i32 %_309, 3
  %_311 = sub i32 %687, 3
  %gen312 = mul i32 %_311, 3
  %691 = mul i32 %687, 3
  %_313 = sub i32 %691, -2
  %gen314 = mul i32 %_313, -2
  %_315 = sub i32 %691, -2
  %gen316 = mul i32 %_315, -2
  %_317 = shl i32 %691, -2
  %_318 = sub i32 0, %691
  %gen319 = add i32 %_318, -2
  %_320 = sub i32 %691, -2
  %gen321 = mul i32 %_320, -2
  %692 = add i32 %691, -2
  %_322 = sub i32 0, %690
  %gen323 = add i32 %_322, %690
  %_324 = sub i32 0, %690
  %gen325 = add i32 %_324, %690
  %_326 = shl i32 %690, %690
  %_327 = sub i32 0, %690
  %gen328 = add i32 %_327, %690
  %_329 = shl i32 %690, %690
  %_330 = sub i32 %690, %690
  %gen331 = mul i32 %_330, %690
  %693 = mul i32 %690, %690
  %_332 = sub i32 %692, %692
  %gen333 = mul i32 %_332, %692
  %_334 = shl i32 %692, %692
  %_335 = shl i32 %692, %692
  %_336 = sub i32 0, %692
  %gen337 = add i32 %_336, %692
  %_338 = sub i32 0, %692
  %gen339 = add i32 %_338, %692
  %694 = mul i32 %692, %692
  %_340 = shl i32 %694, 34
  %695 = mul i32 %694, 34
  %_341 = shl i32 %693, %695
  %696 = sub i32 %693, %695
  %_342 = sub i32 0, %696
  %gen343 = add i32 %_342, 4
  %_344 = sub i32 %696, 4
  %gen345 = mul i32 %_344, 4
  %_346 = sub i32 %696, 4
  %gen347 = mul i32 %_346, 4
  %_348 = sub i32 0, %696
  %gen349 = add i32 %_348, 4
  %697 = add i32 %696, 4
  %698 = icmp ne i32 %697, 4
  br label %originalBB291

originalBB353alteredBB:                           ; preds = %originalBB353, %531
  %699 = load i8*, i8** %14, align 8, !dbg !1665
  br label %originalBB353
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @quotearg_buffer_restyled(i8*, i64, i8*, i64, i32, i32, i32*, i8*, i8*) #4 !dbg !1744 {
  %10 = load i32, i32* @x.35
  %11 = load i32, i32* @y.36
  %12 = sub i32 %10, 1
  %13 = mul i32 %10, %12
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  %16 = icmp slt i32 %11, 10
  %17 = or i1 %15, %16
  br i1 %17, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %9, %originalBBalteredBB
  %18 = alloca i64, align 8
  %19 = alloca i8*, align 8
  %20 = alloca i64, align 8
  %21 = alloca i8*, align 8
  %22 = alloca i64, align 8
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32*, align 8
  %26 = alloca i8*, align 8
  %27 = alloca i8*, align 8
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  %30 = alloca i64, align 8
  %31 = alloca i8*, align 8
  %32 = alloca i64, align 8
  %33 = alloca i8, align 1
  %34 = alloca i8, align 1
  %35 = alloca i8, align 1
  %36 = alloca i8, align 1
  %37 = alloca i8, align 1
  %38 = alloca i8, align 1
  %39 = alloca i8, align 1
  %40 = alloca i8, align 1
  %41 = alloca i8, align 1
  %42 = alloca i8, align 1
  %43 = alloca i8, align 1
  %44 = alloca i64, align 8
  %45 = alloca i8, align 1
  %46 = alloca %struct.__mbstate_t, align 4
  %47 = alloca i32, align 4
  %48 = alloca i64, align 8
  %49 = alloca i64, align 8
  %50 = alloca i64, align 8
  store i8* %0, i8** %19, align 8
  call void @llvm.dbg.declare(metadata i8** %19, metadata !1749, metadata !DIExpression()), !dbg !1750
  store i64 %1, i64* %20, align 8
  call void @llvm.dbg.declare(metadata i64* %20, metadata !1751, metadata !DIExpression()), !dbg !1752
  store i8* %2, i8** %21, align 8
  call void @llvm.dbg.declare(metadata i8** %21, metadata !1753, metadata !DIExpression()), !dbg !1754
  store i64 %3, i64* %22, align 8
  call void @llvm.dbg.declare(metadata i64* %22, metadata !1755, metadata !DIExpression()), !dbg !1756
  store i32 %4, i32* %23, align 4
  call void @llvm.dbg.declare(metadata i32* %23, metadata !1757, metadata !DIExpression()), !dbg !1758
  store i32 %5, i32* %24, align 4
  call void @llvm.dbg.declare(metadata i32* %24, metadata !1759, metadata !DIExpression()), !dbg !1760
  store i32* %6, i32** %25, align 8
  call void @llvm.dbg.declare(metadata i32** %25, metadata !1761, metadata !DIExpression()), !dbg !1762
  store i8* %7, i8** %26, align 8
  call void @llvm.dbg.declare(metadata i8** %26, metadata !1763, metadata !DIExpression()), !dbg !1764
  store i8* %8, i8** %27, align 8
  call void @llvm.dbg.declare(metadata i8** %27, metadata !1765, metadata !DIExpression()), !dbg !1766
  call void @llvm.dbg.declare(metadata i64* %28, metadata !1767, metadata !DIExpression()), !dbg !1768
  call void @llvm.dbg.declare(metadata i64* %29, metadata !1769, metadata !DIExpression()), !dbg !1770
  store i64 0, i64* %29, align 8, !dbg !1770
  call void @llvm.dbg.declare(metadata i64* %30, metadata !1771, metadata !DIExpression()), !dbg !1772
  store i64 0, i64* %30, align 8, !dbg !1772
  call void @llvm.dbg.declare(metadata i8** %31, metadata !1773, metadata !DIExpression()), !dbg !1774
  store i8* null, i8** %31, align 8, !dbg !1774
  call void @llvm.dbg.declare(metadata i64* %32, metadata !1775, metadata !DIExpression()), !dbg !1776
  store i64 0, i64* %32, align 8, !dbg !1776
  call void @llvm.dbg.declare(metadata i8* %33, metadata !1777, metadata !DIExpression()), !dbg !1778
  store i8 0, i8* %33, align 1, !dbg !1778
  call void @llvm.dbg.declare(metadata i8* %34, metadata !1779, metadata !DIExpression()), !dbg !1780
  %51 = call i64 @__ctype_get_mb_cur_max() #10, !dbg !1781
  %52 = icmp eq i64 %51, 1, !dbg !1782
  %53 = zext i1 %52 to i8, !dbg !1780
  store i8 %53, i8* %34, align 1, !dbg !1780
  call void @llvm.dbg.declare(metadata i8* %35, metadata !1783, metadata !DIExpression()), !dbg !1784
  %54 = load i32, i32* %24, align 4, !dbg !1785
  %55 = and i32 %54, 2, !dbg !1786
  %56 = icmp ne i32 %55, 0, !dbg !1787
  %57 = zext i1 %56 to i8, !dbg !1784
  store i8 %57, i8* %35, align 1, !dbg !1784
  call void @llvm.dbg.declare(metadata i8* %36, metadata !1788, metadata !DIExpression()), !dbg !1789
  store i8 0, i8* %36, align 1, !dbg !1789
  call void @llvm.dbg.declare(metadata i8* %37, metadata !1790, metadata !DIExpression()), !dbg !1791
  store i8 0, i8* %37, align 1, !dbg !1791
  call void @llvm.dbg.declare(metadata i8* %38, metadata !1792, metadata !DIExpression()), !dbg !1793
  store i8 1, i8* %38, align 1, !dbg !1793
  %58 = load i32, i32* @x.35
  %59 = load i32, i32* @y.36
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %66, !dbg !1794

66:                                               ; preds = %originalBBpart22214, %originalBBpart2
  call void @llvm.dbg.label(metadata !1795), !dbg !1796
  %67 = load i32, i32* @x.35
  %68 = load i32, i32* @y.36
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %66, %originalBB10alteredBB
  %75 = load i32, i32* %23, align 4, !dbg !1797
  %76 = load i32, i32* @x.35
  %77 = load i32, i32* @y.36
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  switch i32 %75, label %696 [
    i32 6, label %84
    i32 5, label %101
    i32 7, label %230
    i32 8, label %247
    i32 9, label %247
    i32 10, label %247
    i32 3, label %479
    i32 1, label %496
    i32 4, label %513
    i32 2, label %566
    i32 0, label %679
  ], !dbg !1798

84:                                               ; preds = %originalBBpart212
  %85 = load i32, i32* @x.35
  %86 = load i32, i32* @y.36
  %87 = sub i32 %85, 1
  %88 = mul i32 %85, %87
  %89 = urem i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %90, %91
  br i1 %92, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %84, %originalBB14alteredBB
  store i32 5, i32* %23, align 4, !dbg !1799
  store i8 1, i8* %35, align 1, !dbg !1801
  %93 = load i32, i32* @x.35
  %94 = load i32, i32* @y.36
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %101, !dbg !1802

101:                                              ; preds = %originalBBpart216, %originalBBpart212
  %102 = load i32, i32* @x.35
  %103 = load i32, i32* @y.36
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %101, %originalBB18alteredBB
  %110 = load i8, i8* %35, align 1, !dbg !1803
  %111 = trunc i8 %110 to i1, !dbg !1803
  %112 = load i32, i32* @x.35
  %113 = load i32, i32* @y.36
  %114 = sub i32 %112, 1
  %115 = mul i32 %112, %114
  %116 = urem i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %113, 10
  %119 = or i1 %117, %118
  br i1 %119, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %111, label %213, label %120, !dbg !1805

120:                                              ; preds = %originalBBpart220
  %121 = load i32, i32* @x.35
  %122 = load i32, i32* @y.36
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %120, %originalBB22alteredBB
  %129 = load i32, i32* @x.35
  %130 = load i32, i32* @y.36
  %131 = sub i32 %129, 1
  %132 = mul i32 %129, %131
  %133 = urem i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %130, 10
  %136 = or i1 %134, %135
  br i1 %136, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %137, !dbg !1806

137:                                              ; preds = %originalBBpart224
  %138 = load i32, i32* @x.35
  %139 = load i32, i32* @y.36
  %140 = sub i32 %138, 1
  %141 = mul i32 %138, %140
  %142 = urem i32 %141, 2
  %143 = icmp eq i32 %142, 0
  %144 = icmp slt i32 %139, 10
  %145 = or i1 %143, %144
  br i1 %145, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %137, %originalBB26alteredBB
  %146 = load i64, i64* %29, align 8, !dbg !1807
  %147 = load i64, i64* %20, align 8, !dbg !1807
  %148 = icmp ult i64 %146, %147, !dbg !1807
  %149 = load i32, i32* @x.35
  %150 = load i32, i32* @y.36
  %151 = sub i32 %149, 1
  %152 = mul i32 %149, %151
  %153 = urem i32 %152, 2
  %154 = icmp eq i32 %153, 0
  %155 = icmp slt i32 %150, 10
  %156 = or i1 %154, %155
  br i1 %156, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %148, label %157, label %177, !dbg !1810

157:                                              ; preds = %originalBBpart228
  %158 = load i32, i32* @x.35
  %159 = load i32, i32* @y.36
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %157, %originalBB30alteredBB
  %166 = load i8*, i8** %19, align 8, !dbg !1807
  %167 = load i64, i64* %29, align 8, !dbg !1807
  %168 = getelementptr inbounds i8, i8* %166, i64 %167, !dbg !1807
  store i8 34, i8* %168, align 1, !dbg !1807
  %169 = load i32, i32* @x.35
  %170 = load i32, i32* @y.36
  %171 = sub i32 %169, 1
  %172 = mul i32 %169, %171
  %173 = urem i32 %172, 2
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %174, %175
  br i1 %176, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %177, !dbg !1807

177:                                              ; preds = %originalBBpart232, %originalBBpart228
  %178 = load i32, i32* @x.35
  %179 = load i32, i32* @y.36
  %180 = sub i32 %178, 1
  %181 = mul i32 %178, %180
  %182 = urem i32 %181, 2
  %183 = icmp eq i32 %182, 0
  %184 = icmp slt i32 %179, 10
  %185 = or i1 %183, %184
  br i1 %185, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %177, %originalBB34alteredBB
  %186 = load i64, i64* %29, align 8, !dbg !1810
  %187 = add i64 %186, 1, !dbg !1810
  store i64 %187, i64* %29, align 8, !dbg !1810
  %188 = load i32, i32* @x.35
  %189 = load i32, i32* @y.36
  %190 = sub i32 %188, 1
  %191 = mul i32 %188, %190
  %192 = urem i32 %191, 2
  %193 = icmp eq i32 %192, 0
  %194 = icmp slt i32 %189, 10
  %195 = or i1 %193, %194
  br i1 %195, label %originalBBpart244, label %originalBB34alteredBB

originalBBpart244:                                ; preds = %originalBB34
  br label %196, !dbg !1810

196:                                              ; preds = %originalBBpart244
  %197 = load i32, i32* @x.35
  %198 = load i32, i32* @y.36
  %199 = sub i32 %197, 1
  %200 = mul i32 %197, %199
  %201 = urem i32 %200, 2
  %202 = icmp eq i32 %201, 0
  %203 = icmp slt i32 %198, 10
  %204 = or i1 %202, %203
  br i1 %204, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %196, %originalBB46alteredBB
  %205 = load i32, i32* @x.35
  %206 = load i32, i32* @y.36
  %207 = sub i32 %205, 1
  %208 = mul i32 %205, %207
  %209 = urem i32 %208, 2
  %210 = icmp eq i32 %209, 0
  %211 = icmp slt i32 %206, 10
  %212 = or i1 %210, %211
  br i1 %212, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br label %213, !dbg !1810

213:                                              ; preds = %originalBBpart248, %originalBBpart220
  %214 = load i32, i32* @x.35
  %215 = load i32, i32* @y.36
  %216 = sub i32 %214, 1
  %217 = mul i32 %214, %216
  %218 = urem i32 %217, 2
  %219 = icmp eq i32 %218, 0
  %220 = icmp slt i32 %215, 10
  %221 = or i1 %219, %220
  br i1 %221, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %213, %originalBB50alteredBB
  store i8 1, i8* %33, align 1, !dbg !1811
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.63, i64 0, i64 0), i8** %31, align 8, !dbg !1812
  store i64 1, i64* %32, align 8, !dbg !1813
  %222 = load i32, i32* @x.35
  %223 = load i32, i32* @y.36
  %224 = sub i32 %222, 1
  %225 = mul i32 %222, %224
  %226 = urem i32 %225, 2
  %227 = icmp eq i32 %226, 0
  %228 = icmp slt i32 %223, 10
  %229 = or i1 %227, %228
  br i1 %229, label %originalBBpart252, label %originalBB50alteredBB

originalBBpart252:                                ; preds = %originalBB50
  br label %713, !dbg !1814

230:                                              ; preds = %originalBBpart212
  %231 = load i32, i32* @x.35
  %232 = load i32, i32* @y.36
  %233 = sub i32 %231, 1
  %234 = mul i32 %231, %233
  %235 = urem i32 %234, 2
  %236 = icmp eq i32 %235, 0
  %237 = icmp slt i32 %232, 10
  %238 = or i1 %236, %237
  br i1 %238, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %230, %originalBB54alteredBB
  store i8 1, i8* %33, align 1, !dbg !1815
  store i8 0, i8* %35, align 1, !dbg !1816
  %239 = load i32, i32* @x.35
  %240 = load i32, i32* @y.36
  %241 = sub i32 %239, 1
  %242 = mul i32 %239, %241
  %243 = urem i32 %242, 2
  %244 = icmp eq i32 %243, 0
  %245 = icmp slt i32 %240, 10
  %246 = or i1 %244, %245
  br i1 %246, label %originalBBpart256, label %originalBB54alteredBB

originalBBpart256:                                ; preds = %originalBB54
  br label %713, !dbg !1817

247:                                              ; preds = %originalBBpart212, %originalBBpart212, %originalBBpart212
  %248 = load i32, i32* @x.35
  %249 = load i32, i32* @y.36
  %250 = sub i32 %248, 1
  %251 = mul i32 %248, %250
  %252 = urem i32 %251, 2
  %253 = icmp eq i32 %252, 0
  %254 = icmp slt i32 %249, 10
  %255 = or i1 %253, %254
  br i1 %255, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %247, %originalBB58alteredBB
  %256 = load i32, i32* %23, align 4, !dbg !1818
  %257 = icmp ne i32 %256, 10, !dbg !1821
  %258 = load i32, i32* @x.35
  %259 = load i32, i32* @y.36
  %260 = sub i32 %258, 1
  %261 = mul i32 %258, %260
  %262 = urem i32 %261, 2
  %263 = icmp eq i32 %262, 0
  %264 = icmp slt i32 %259, 10
  %265 = or i1 %263, %264
  br i1 %265, label %originalBBpart260, label %originalBB58alteredBB

originalBBpart260:                                ; preds = %originalBB58
  br i1 %257, label %266, label %287, !dbg !1822

266:                                              ; preds = %originalBBpart260
  %267 = load i32, i32* @x.35
  %268 = load i32, i32* @y.36
  %269 = sub i32 %267, 1
  %270 = mul i32 %267, %269
  %271 = urem i32 %270, 2
  %272 = icmp eq i32 %271, 0
  %273 = icmp slt i32 %268, 10
  %274 = or i1 %272, %273
  br i1 %274, label %originalBB62, label %originalBB62alteredBB

originalBB62:                                     ; preds = %266, %originalBB62alteredBB
  %275 = load i32, i32* %23, align 4, !dbg !1823
  %276 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.64, i64 0, i64 0), i32 %275), !dbg !1825
  store i8* %276, i8** %26, align 8, !dbg !1826
  %277 = load i32, i32* %23, align 4, !dbg !1827
  %278 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.65, i64 0, i64 0), i32 %277), !dbg !1828
  store i8* %278, i8** %27, align 8, !dbg !1829
  %279 = load i32, i32* @x.35
  %280 = load i32, i32* @y.36
  %281 = sub i32 %279, 1
  %282 = mul i32 %279, %281
  %283 = urem i32 %282, 2
  %284 = icmp eq i32 %283, 0
  %285 = icmp slt i32 %280, 10
  %286 = or i1 %284, %285
  br i1 %286, label %originalBBpart264, label %originalBB62alteredBB

originalBBpart264:                                ; preds = %originalBB62
  br label %287, !dbg !1830

287:                                              ; preds = %originalBBpart264, %originalBBpart260
  %288 = load i32, i32* @x.35
  %289 = load i32, i32* @y.36
  %290 = sub i32 %288, 1
  %291 = mul i32 %288, %290
  %292 = urem i32 %291, 2
  %293 = icmp eq i32 %292, 0
  %294 = icmp slt i32 %289, 10
  %295 = or i1 %293, %294
  br i1 %295, label %originalBB66, label %originalBB66alteredBB

originalBB66:                                     ; preds = %287, %originalBB66alteredBB
  %296 = load i8, i8* %35, align 1, !dbg !1831
  %297 = trunc i8 %296 to i1, !dbg !1831
  %298 = load i32, i32* @x.35
  %299 = load i32, i32* @y.36
  %300 = sub i32 %298, 1
  %301 = mul i32 %298, %300
  %302 = urem i32 %301, 2
  %303 = icmp eq i32 %302, 0
  %304 = icmp slt i32 %299, 10
  %305 = or i1 %303, %304
  br i1 %305, label %originalBBpart268, label %originalBB66alteredBB

originalBBpart268:                                ; preds = %originalBB66
  br i1 %297, label %459, label %306, !dbg !1833

306:                                              ; preds = %originalBBpart268
  %307 = load i32, i32* @x.35
  %308 = load i32, i32* @y.36
  %309 = sub i32 %307, 1
  %310 = mul i32 %307, %309
  %311 = urem i32 %310, 2
  %312 = icmp eq i32 %311, 0
  %313 = icmp slt i32 %308, 10
  %314 = or i1 %312, %313
  br i1 %314, label %originalBB70, label %originalBB70alteredBB

originalBB70:                                     ; preds = %306, %originalBB70alteredBB
  %315 = load i8*, i8** %26, align 8, !dbg !1834
  store i8* %315, i8** %31, align 8, !dbg !1836
  %316 = load i32, i32* @x.35
  %317 = load i32, i32* @y.36
  %318 = sub i32 %316, 1
  %319 = mul i32 %316, %318
  %320 = urem i32 %319, 2
  %321 = icmp eq i32 %320, 0
  %322 = icmp slt i32 %317, 10
  %323 = or i1 %321, %322
  br i1 %323, label %originalBBpart272, label %originalBB70alteredBB

originalBBpart272:                                ; preds = %originalBB70
  br label %324, !dbg !1837

324:                                              ; preds = %439, %originalBBpart272
  %325 = load i32, i32* @x.35
  %326 = load i32, i32* @y.36
  %327 = sub i32 %325, 1
  %328 = mul i32 %325, %327
  %329 = urem i32 %328, 2
  %330 = icmp eq i32 %329, 0
  %331 = icmp slt i32 %326, 10
  %332 = or i1 %330, %331
  br i1 %332, label %originalBB74, label %originalBB74alteredBB

originalBB74:                                     ; preds = %324, %originalBB74alteredBB
  %333 = load i8*, i8** %31, align 8, !dbg !1838
  %334 = load i8, i8* %333, align 1, !dbg !1840
  %335 = icmp ne i8 %334, 0, !dbg !1841
  %336 = load i32, i32* @x.35
  %337 = load i32, i32* @y.36
  %338 = sub i32 %336, 1
  %339 = mul i32 %336, %338
  %340 = urem i32 %339, 2
  %341 = icmp eq i32 %340, 0
  %342 = icmp slt i32 %337, 10
  %343 = or i1 %341, %342
  br i1 %343, label %originalBBpart276, label %originalBB74alteredBB

originalBBpart276:                                ; preds = %originalBB74
  br i1 %335, label %344, label %442, !dbg !1841

344:                                              ; preds = %originalBBpart276
  %345 = load i32, i32* @x.35
  %346 = load i32, i32* @y.36
  %347 = sub i32 %345, 1
  %348 = mul i32 %345, %347
  %349 = urem i32 %348, 2
  %350 = icmp eq i32 %349, 0
  %351 = icmp slt i32 %346, 10
  %352 = or i1 %350, %351
  br i1 %352, label %originalBB78, label %originalBB78alteredBB

originalBB78:                                     ; preds = %344, %originalBB78alteredBB
  %353 = load i32, i32* @x.35
  %354 = load i32, i32* @y.36
  %355 = sub i32 %353, 1
  %356 = mul i32 %353, %355
  %357 = urem i32 %356, 2
  %358 = icmp eq i32 %357, 0
  %359 = icmp slt i32 %354, 10
  %360 = or i1 %358, %359
  br i1 %360, label %originalBBpart280, label %originalBB78alteredBB

originalBBpart280:                                ; preds = %originalBB78
  br label %361, !dbg !1842

361:                                              ; preds = %originalBBpart280
  %362 = load i32, i32* @x.35
  %363 = load i32, i32* @y.36
  %364 = sub i32 %362, 1
  %365 = mul i32 %362, %364
  %366 = urem i32 %365, 2
  %367 = icmp eq i32 %366, 0
  %368 = icmp slt i32 %363, 10
  %369 = or i1 %367, %368
  br i1 %369, label %originalBB82, label %originalBB82alteredBB

originalBB82:                                     ; preds = %361, %originalBB82alteredBB
  %370 = load i64, i64* %29, align 8, !dbg !1843
  %371 = load i64, i64* %20, align 8, !dbg !1843
  %372 = icmp ult i64 %370, %371, !dbg !1843
  %373 = load i32, i32* @x.35
  %374 = load i32, i32* @y.36
  %375 = sub i32 %373, 1
  %376 = mul i32 %373, %375
  %377 = urem i32 %376, 2
  %378 = icmp eq i32 %377, 0
  %379 = icmp slt i32 %374, 10
  %380 = or i1 %378, %379
  br i1 %380, label %originalBBpart284, label %originalBB82alteredBB

originalBBpart284:                                ; preds = %originalBB82
  br i1 %372, label %381, label %403, !dbg !1846

381:                                              ; preds = %originalBBpart284
  %382 = load i32, i32* @x.35
  %383 = load i32, i32* @y.36
  %384 = sub i32 %382, 1
  %385 = mul i32 %382, %384
  %386 = urem i32 %385, 2
  %387 = icmp eq i32 %386, 0
  %388 = icmp slt i32 %383, 10
  %389 = or i1 %387, %388
  br i1 %389, label %originalBB86, label %originalBB86alteredBB

originalBB86:                                     ; preds = %381, %originalBB86alteredBB
  %390 = load i8*, i8** %31, align 8, !dbg !1843
  %391 = load i8, i8* %390, align 1, !dbg !1843
  %392 = load i8*, i8** %19, align 8, !dbg !1843
  %393 = load i64, i64* %29, align 8, !dbg !1843
  %394 = getelementptr inbounds i8, i8* %392, i64 %393, !dbg !1843
  store i8 %391, i8* %394, align 1, !dbg !1843
  %395 = load i32, i32* @x.35
  %396 = load i32, i32* @y.36
  %397 = sub i32 %395, 1
  %398 = mul i32 %395, %397
  %399 = urem i32 %398, 2
  %400 = icmp eq i32 %399, 0
  %401 = icmp slt i32 %396, 10
  %402 = or i1 %400, %401
  br i1 %402, label %originalBBpart288, label %originalBB86alteredBB

originalBBpart288:                                ; preds = %originalBB86
  br label %403, !dbg !1843

403:                                              ; preds = %originalBBpart288, %originalBBpart284
  %404 = load i32, i32* @x.35
  %405 = load i32, i32* @y.36
  %406 = sub i32 %404, 1
  %407 = mul i32 %404, %406
  %408 = urem i32 %407, 2
  %409 = icmp eq i32 %408, 0
  %410 = icmp slt i32 %405, 10
  %411 = or i1 %409, %410
  br i1 %411, label %originalBB90, label %originalBB90alteredBB

originalBB90:                                     ; preds = %403, %originalBB90alteredBB
  %412 = load i64, i64* %29, align 8, !dbg !1846
  %413 = add i64 %412, 1, !dbg !1846
  store i64 %413, i64* %29, align 8, !dbg !1846
  %414 = load i32, i32* @x.35
  %415 = load i32, i32* @y.36
  %416 = sub i32 %414, 1
  %417 = mul i32 %414, %416
  %418 = urem i32 %417, 2
  %419 = icmp eq i32 %418, 0
  %420 = icmp slt i32 %415, 10
  %421 = or i1 %419, %420
  br i1 %421, label %originalBBpart296, label %originalBB90alteredBB

originalBBpart296:                                ; preds = %originalBB90
  br label %422, !dbg !1846

422:                                              ; preds = %originalBBpart296
  %423 = load i32, i32* @x.35
  %424 = load i32, i32* @y.36
  %425 = sub i32 %423, 1
  %426 = mul i32 %423, %425
  %427 = urem i32 %426, 2
  %428 = icmp eq i32 %427, 0
  %429 = icmp slt i32 %424, 10
  %430 = or i1 %428, %429
  br i1 %430, label %originalBB98, label %originalBB98alteredBB

originalBB98:                                     ; preds = %422, %originalBB98alteredBB
  %431 = load i32, i32* @x.35
  %432 = load i32, i32* @y.36
  %433 = sub i32 %431, 1
  %434 = mul i32 %431, %433
  %435 = urem i32 %434, 2
  %436 = icmp eq i32 %435, 0
  %437 = icmp slt i32 %432, 10
  %438 = or i1 %436, %437
  br i1 %438, label %originalBBpart2100, label %originalBB98alteredBB

originalBBpart2100:                               ; preds = %originalBB98
  br label %439, !dbg !1846

439:                                              ; preds = %originalBBpart2100
  %440 = load i8*, i8** %31, align 8, !dbg !1847
  %441 = getelementptr inbounds i8, i8* %440, i32 1, !dbg !1847
  store i8* %441, i8** %31, align 8, !dbg !1847
  br label %324, !dbg !1848, !llvm.loop !1849

442:                                              ; preds = %originalBBpart276
  %443 = load i32, i32* @x.35
  %444 = load i32, i32* @y.36
  %445 = sub i32 %443, 1
  %446 = mul i32 %443, %445
  %447 = urem i32 %446, 2
  %448 = icmp eq i32 %447, 0
  %449 = icmp slt i32 %444, 10
  %450 = or i1 %448, %449
  br i1 %450, label %originalBB102, label %originalBB102alteredBB

originalBB102:                                    ; preds = %442, %originalBB102alteredBB
  %451 = load i32, i32* @x.35
  %452 = load i32, i32* @y.36
  %453 = sub i32 %451, 1
  %454 = mul i32 %451, %453
  %455 = urem i32 %454, 2
  %456 = icmp eq i32 %455, 0
  %457 = icmp slt i32 %452, 10
  %458 = or i1 %456, %457
  br i1 %458, label %originalBBpart2104, label %originalBB102alteredBB

originalBBpart2104:                               ; preds = %originalBB102
  br label %459, !dbg !1850

459:                                              ; preds = %originalBBpart2104, %originalBBpart268
  %460 = load i32, i32* @x.35
  %461 = load i32, i32* @y.36
  %462 = sub i32 %460, 1
  %463 = mul i32 %460, %462
  %464 = urem i32 %463, 2
  %465 = icmp eq i32 %464, 0
  %466 = icmp slt i32 %461, 10
  %467 = or i1 %465, %466
  br i1 %467, label %originalBB106, label %originalBB106alteredBB

originalBB106:                                    ; preds = %459, %originalBB106alteredBB
  store i8 1, i8* %33, align 1, !dbg !1851
  %468 = load i8*, i8** %27, align 8, !dbg !1852
  store i8* %468, i8** %31, align 8, !dbg !1853
  %469 = load i8*, i8** %31, align 8, !dbg !1854
  %470 = call i64 @strlen(i8* %469) #13, !dbg !1855
  store i64 %470, i64* %32, align 8, !dbg !1856
  %471 = load i32, i32* @x.35
  %472 = load i32, i32* @y.36
  %473 = sub i32 %471, 1
  %474 = mul i32 %471, %473
  %475 = urem i32 %474, 2
  %476 = icmp eq i32 %475, 0
  %477 = icmp slt i32 %472, 10
  %478 = or i1 %476, %477
  br i1 %478, label %originalBBpart2108, label %originalBB106alteredBB

originalBBpart2108:                               ; preds = %originalBB106
  br label %713, !dbg !1857

479:                                              ; preds = %originalBBpart212
  %480 = load i32, i32* @x.35
  %481 = load i32, i32* @y.36
  %482 = sub i32 %480, 1
  %483 = mul i32 %480, %482
  %484 = urem i32 %483, 2
  %485 = icmp eq i32 %484, 0
  %486 = icmp slt i32 %481, 10
  %487 = or i1 %485, %486
  br i1 %487, label %originalBB110, label %originalBB110alteredBB

originalBB110:                                    ; preds = %479, %originalBB110alteredBB
  store i8 1, i8* %33, align 1, !dbg !1858
  %488 = load i32, i32* @x.35
  %489 = load i32, i32* @y.36
  %490 = sub i32 %488, 1
  %491 = mul i32 %488, %490
  %492 = urem i32 %491, 2
  %493 = icmp eq i32 %492, 0
  %494 = icmp slt i32 %489, 10
  %495 = or i1 %493, %494
  br i1 %495, label %originalBBpart2112, label %originalBB110alteredBB

originalBBpart2112:                               ; preds = %originalBB110
  br label %496, !dbg !1859

496:                                              ; preds = %originalBBpart2112, %originalBBpart212
  %497 = load i32, i32* @x.35
  %498 = load i32, i32* @y.36
  %499 = sub i32 %497, 1
  %500 = mul i32 %497, %499
  %501 = urem i32 %500, 2
  %502 = icmp eq i32 %501, 0
  %503 = icmp slt i32 %498, 10
  %504 = or i1 %502, %503
  br i1 %504, label %originalBB114, label %originalBB114alteredBB

originalBB114:                                    ; preds = %496, %originalBB114alteredBB
  store i8 1, i8* %35, align 1, !dbg !1860
  %505 = load i32, i32* @x.35
  %506 = load i32, i32* @y.36
  %507 = sub i32 %505, 1
  %508 = mul i32 %505, %507
  %509 = urem i32 %508, 2
  %510 = icmp eq i32 %509, 0
  %511 = icmp slt i32 %506, 10
  %512 = or i1 %510, %511
  br i1 %512, label %originalBBpart2116, label %originalBB114alteredBB

originalBBpart2116:                               ; preds = %originalBB114
  br label %513, !dbg !1861

513:                                              ; preds = %originalBBpart2116, %originalBBpart212
  %514 = load i32, i32* @x.35
  %515 = load i32, i32* @y.36
  %516 = sub i32 %514, 1
  %517 = mul i32 %514, %516
  %518 = urem i32 %517, 2
  %519 = icmp eq i32 %518, 0
  %520 = icmp slt i32 %515, 10
  %521 = or i1 %519, %520
  br i1 %521, label %originalBB118, label %originalBB118alteredBB

originalBB118:                                    ; preds = %513, %originalBB118alteredBB
  %522 = load i8, i8* %35, align 1, !dbg !1862
  %523 = trunc i8 %522 to i1, !dbg !1862
  %524 = load i32, i32* @x.35
  %525 = load i32, i32* @y.36
  %526 = sub i32 %524, 1
  %527 = mul i32 %524, %526
  %528 = urem i32 %527, 2
  %529 = icmp eq i32 %528, 0
  %530 = icmp slt i32 %525, 10
  %531 = or i1 %529, %530
  br i1 %531, label %originalBBpart2120, label %originalBB118alteredBB

originalBBpart2120:                               ; preds = %originalBB118
  br i1 %523, label %549, label %532, !dbg !1864

532:                                              ; preds = %originalBBpart2120
  %533 = load i32, i32* @x.35
  %534 = load i32, i32* @y.36
  %535 = sub i32 %533, 1
  %536 = mul i32 %533, %535
  %537 = urem i32 %536, 2
  %538 = icmp eq i32 %537, 0
  %539 = icmp slt i32 %534, 10
  %540 = or i1 %538, %539
  br i1 %540, label %originalBB122, label %originalBB122alteredBB

originalBB122:                                    ; preds = %532, %originalBB122alteredBB
  store i8 1, i8* %33, align 1, !dbg !1865
  %541 = load i32, i32* @x.35
  %542 = load i32, i32* @y.36
  %543 = sub i32 %541, 1
  %544 = mul i32 %541, %543
  %545 = urem i32 %544, 2
  %546 = icmp eq i32 %545, 0
  %547 = icmp slt i32 %542, 10
  %548 = or i1 %546, %547
  br i1 %548, label %originalBBpart2124, label %originalBB122alteredBB

originalBBpart2124:                               ; preds = %originalBB122
  br label %549, !dbg !1866

549:                                              ; preds = %originalBBpart2124, %originalBBpart2120
  %550 = load i32, i32* @x.35
  %551 = load i32, i32* @y.36
  %552 = sub i32 %550, 1
  %553 = mul i32 %550, %552
  %554 = urem i32 %553, 2
  %555 = icmp eq i32 %554, 0
  %556 = icmp slt i32 %551, 10
  %557 = or i1 %555, %556
  br i1 %557, label %originalBB126, label %originalBB126alteredBB

originalBB126:                                    ; preds = %549, %originalBB126alteredBB
  %558 = load i32, i32* @x.35
  %559 = load i32, i32* @y.36
  %560 = sub i32 %558, 1
  %561 = mul i32 %558, %560
  %562 = urem i32 %561, 2
  %563 = icmp eq i32 %562, 0
  %564 = icmp slt i32 %559, 10
  %565 = or i1 %563, %564
  br i1 %565, label %originalBBpart2128, label %originalBB126alteredBB

originalBBpart2128:                               ; preds = %originalBB126
  br label %566, !dbg !1867

566:                                              ; preds = %originalBBpart2128, %originalBBpart212
  %567 = load i32, i32* @x.35
  %568 = load i32, i32* @y.36
  %569 = sub i32 %567, 1
  %570 = mul i32 %567, %569
  %571 = urem i32 %570, 2
  %572 = icmp eq i32 %571, 0
  %573 = icmp slt i32 %568, 10
  %574 = or i1 %572, %573
  br i1 %574, label %originalBB130, label %originalBB130alteredBB

originalBB130:                                    ; preds = %566, %originalBB130alteredBB
  store i32 2, i32* %23, align 4, !dbg !1868
  %575 = load i8, i8* %35, align 1, !dbg !1869
  %576 = trunc i8 %575 to i1, !dbg !1869
  %577 = load i32, i32* @x.35
  %578 = load i32, i32* @y.36
  %579 = sub i32 %577, 1
  %580 = mul i32 %577, %579
  %581 = urem i32 %580, 2
  %582 = icmp eq i32 %581, 0
  %583 = icmp slt i32 %578, 10
  %584 = or i1 %582, %583
  br i1 %584, label %originalBBpart2132, label %originalBB130alteredBB

originalBBpart2132:                               ; preds = %originalBB130
  br i1 %576, label %662, label %585, !dbg !1871

585:                                              ; preds = %originalBBpart2132
  %586 = load i32, i32* @x.35
  %587 = load i32, i32* @y.36
  %588 = sub i32 %586, 1
  %589 = mul i32 %586, %588
  %590 = urem i32 %589, 2
  %591 = icmp eq i32 %590, 0
  %592 = icmp slt i32 %587, 10
  %593 = or i1 %591, %592
  br i1 %593, label %originalBB134, label %originalBB134alteredBB

originalBB134:                                    ; preds = %585, %originalBB134alteredBB
  %594 = load i32, i32* @x.35
  %595 = load i32, i32* @y.36
  %596 = sub i32 %594, 1
  %597 = mul i32 %594, %596
  %598 = urem i32 %597, 2
  %599 = icmp eq i32 %598, 0
  %600 = icmp slt i32 %595, 10
  %601 = or i1 %599, %600
  br i1 %601, label %originalBBpart2136, label %originalBB134alteredBB

originalBBpart2136:                               ; preds = %originalBB134
  br label %602, !dbg !1872

602:                                              ; preds = %originalBBpart2136
  %603 = load i64, i64* %29, align 8, !dbg !1873
  %604 = load i64, i64* %20, align 8, !dbg !1873
  %605 = icmp ult i64 %603, %604, !dbg !1873
  br i1 %605, label %606, label %626, !dbg !1876

606:                                              ; preds = %602
  %607 = load i32, i32* @x.35
  %608 = load i32, i32* @y.36
  %609 = sub i32 %607, 1
  %610 = mul i32 %607, %609
  %611 = urem i32 %610, 2
  %612 = icmp eq i32 %611, 0
  %613 = icmp slt i32 %608, 10
  %614 = or i1 %612, %613
  br i1 %614, label %originalBB138, label %originalBB138alteredBB

originalBB138:                                    ; preds = %606, %originalBB138alteredBB
  %615 = load i8*, i8** %19, align 8, !dbg !1873
  %616 = load i64, i64* %29, align 8, !dbg !1873
  %617 = getelementptr inbounds i8, i8* %615, i64 %616, !dbg !1873
  store i8 39, i8* %617, align 1, !dbg !1873
  %618 = load i32, i32* @x.35
  %619 = load i32, i32* @y.36
  %620 = sub i32 %618, 1
  %621 = mul i32 %618, %620
  %622 = urem i32 %621, 2
  %623 = icmp eq i32 %622, 0
  %624 = icmp slt i32 %619, 10
  %625 = or i1 %623, %624
  br i1 %625, label %originalBBpart2140, label %originalBB138alteredBB

originalBBpart2140:                               ; preds = %originalBB138
  br label %626, !dbg !1873

626:                                              ; preds = %originalBBpart2140, %602
  %627 = load i32, i32* @x.35
  %628 = load i32, i32* @y.36
  %629 = sub i32 %627, 1
  %630 = mul i32 %627, %629
  %631 = urem i32 %630, 2
  %632 = icmp eq i32 %631, 0
  %633 = icmp slt i32 %628, 10
  %634 = or i1 %632, %633
  br i1 %634, label %originalBB142, label %originalBB142alteredBB

originalBB142:                                    ; preds = %626, %originalBB142alteredBB
  %635 = load i64, i64* %29, align 8, !dbg !1876
  %636 = add i64 %635, 1, !dbg !1876
  store i64 %636, i64* %29, align 8, !dbg !1876
  %637 = load i32, i32* @x.35
  %638 = load i32, i32* @y.36
  %639 = sub i32 %637, 1
  %640 = mul i32 %637, %639
  %641 = urem i32 %640, 2
  %642 = icmp eq i32 %641, 0
  %643 = icmp slt i32 %638, 10
  %644 = or i1 %642, %643
  br i1 %644, label %originalBBpart2147, label %originalBB142alteredBB

originalBBpart2147:                               ; preds = %originalBB142
  br label %645, !dbg !1876

645:                                              ; preds = %originalBBpart2147
  %646 = load i32, i32* @x.35
  %647 = load i32, i32* @y.36
  %648 = sub i32 %646, 1
  %649 = mul i32 %646, %648
  %650 = urem i32 %649, 2
  %651 = icmp eq i32 %650, 0
  %652 = icmp slt i32 %647, 10
  %653 = or i1 %651, %652
  br i1 %653, label %originalBB149, label %originalBB149alteredBB

originalBB149:                                    ; preds = %645, %originalBB149alteredBB
  %654 = load i32, i32* @x.35
  %655 = load i32, i32* @y.36
  %656 = sub i32 %654, 1
  %657 = mul i32 %654, %656
  %658 = urem i32 %657, 2
  %659 = icmp eq i32 %658, 0
  %660 = icmp slt i32 %655, 10
  %661 = or i1 %659, %660
  br i1 %661, label %originalBBpart2151, label %originalBB149alteredBB

originalBBpart2151:                               ; preds = %originalBB149
  br label %662, !dbg !1876

662:                                              ; preds = %originalBBpart2151, %originalBBpart2132
  %663 = load i32, i32* @x.35
  %664 = load i32, i32* @y.36
  %665 = sub i32 %663, 1
  %666 = mul i32 %663, %665
  %667 = urem i32 %666, 2
  %668 = icmp eq i32 %667, 0
  %669 = icmp slt i32 %664, 10
  %670 = or i1 %668, %669
  br i1 %670, label %originalBB153, label %originalBB153alteredBB

originalBB153:                                    ; preds = %662, %originalBB153alteredBB
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.65, i64 0, i64 0), i8** %31, align 8, !dbg !1877
  store i64 1, i64* %32, align 8, !dbg !1878
  %671 = load i32, i32* @x.35
  %672 = load i32, i32* @y.36
  %673 = sub i32 %671, 1
  %674 = mul i32 %671, %673
  %675 = urem i32 %674, 2
  %676 = icmp eq i32 %675, 0
  %677 = icmp slt i32 %672, 10
  %678 = or i1 %676, %677
  br i1 %678, label %originalBBpart2155, label %originalBB153alteredBB

originalBBpart2155:                               ; preds = %originalBB153
  br label %713, !dbg !1879

679:                                              ; preds = %originalBBpart212
  %680 = load i32, i32* @x.35
  %681 = load i32, i32* @y.36
  %682 = sub i32 %680, 1
  %683 = mul i32 %680, %682
  %684 = urem i32 %683, 2
  %685 = icmp eq i32 %684, 0
  %686 = icmp slt i32 %681, 10
  %687 = or i1 %685, %686
  br i1 %687, label %originalBB157, label %originalBB157alteredBB

originalBB157:                                    ; preds = %679, %originalBB157alteredBB
  store i8 0, i8* %35, align 1, !dbg !1880
  %688 = load i32, i32* @x.35
  %689 = load i32, i32* @y.36
  %690 = sub i32 %688, 1
  %691 = mul i32 %688, %690
  %692 = urem i32 %691, 2
  %693 = icmp eq i32 %692, 0
  %694 = icmp slt i32 %689, 10
  %695 = or i1 %693, %694
  br i1 %695, label %originalBBpart2159, label %originalBB157alteredBB

originalBBpart2159:                               ; preds = %originalBB157
  br label %713, !dbg !1881

696:                                              ; preds = %originalBBpart212
  %697 = load i32, i32* @x.35
  %698 = load i32, i32* @y.36
  %699 = sub i32 %697, 1
  %700 = mul i32 %697, %699
  %701 = urem i32 %700, 2
  %702 = icmp eq i32 %701, 0
  %703 = icmp slt i32 %698, 10
  %704 = or i1 %702, %703
  br i1 %704, label %originalBB161, label %originalBB161alteredBB

originalBB161:                                    ; preds = %696, %originalBB161alteredBB
  call void @abort() #12, !dbg !1882
  %705 = load i32, i32* @x.35
  %706 = load i32, i32* @y.36
  %707 = sub i32 %705, 1
  %708 = mul i32 %705, %707
  %709 = urem i32 %708, 2
  %710 = icmp eq i32 %709, 0
  %711 = icmp slt i32 %706, 10
  %712 = or i1 %710, %711
  br i1 %712, label %originalBBpart2163, label %originalBB161alteredBB

originalBBpart2163:                               ; preds = %originalBB161
  unreachable, !dbg !1882

713:                                              ; preds = %originalBBpart2159, %originalBBpart2155, %originalBBpart2108, %originalBBpart256, %originalBBpart252
  %714 = load i32, i32* @x.35
  %715 = load i32, i32* @y.36
  %716 = sub i32 %714, 1
  %717 = mul i32 %714, %716
  %718 = urem i32 %717, 2
  %719 = icmp eq i32 %718, 0
  %720 = icmp slt i32 %715, 10
  %721 = or i1 %719, %720
  br i1 %721, label %originalBB165, label %originalBB165alteredBB

originalBB165:                                    ; preds = %713, %originalBB165alteredBB
  store i64 0, i64* %28, align 8, !dbg !1883
  %722 = load i32, i32* @x.35
  %723 = load i32, i32* @y.36
  %724 = sub i32 %722, 1
  %725 = mul i32 %722, %724
  %726 = urem i32 %725, 2
  %727 = icmp eq i32 %726, 0
  %728 = icmp slt i32 %723, 10
  %729 = or i1 %727, %728
  br i1 %729, label %originalBBpart2167, label %originalBB165alteredBB

originalBBpart2167:                               ; preds = %originalBB165
  br label %730, !dbg !1885

730:                                              ; preds = %originalBBpart22170, %originalBBpart2167
  %731 = load i32, i32* @x.35
  %732 = load i32, i32* @y.36
  %733 = sub i32 %731, 1
  %734 = mul i32 %731, %733
  %735 = urem i32 %734, 2
  %736 = icmp eq i32 %735, 0
  %737 = icmp slt i32 %732, 10
  %738 = or i1 %736, %737
  br i1 %738, label %originalBB169, label %originalBB169alteredBB

originalBB169:                                    ; preds = %730, %originalBB169alteredBB
  %739 = load i64, i64* %22, align 8, !dbg !1886
  %740 = icmp eq i64 %739, -1, !dbg !1888
  %741 = load i32, i32* @x.35
  %742 = load i32, i32* @y.36
  %743 = sub i32 %741, 1
  %744 = mul i32 %741, %743
  %745 = urem i32 %744, 2
  %746 = icmp eq i32 %745, 0
  %747 = icmp slt i32 %742, 10
  %748 = or i1 %746, %747
  br i1 %748, label %originalBBpart2171, label %originalBB169alteredBB

originalBBpart2171:                               ; preds = %originalBB169
  br i1 %740, label %749, label %773, !dbg !1886

749:                                              ; preds = %originalBBpart2171
  %750 = load i32, i32* @x.35
  %751 = load i32, i32* @y.36
  %752 = sub i32 %750, 1
  %753 = mul i32 %750, %752
  %754 = urem i32 %753, 2
  %755 = icmp eq i32 %754, 0
  %756 = icmp slt i32 %751, 10
  %757 = or i1 %755, %756
  br i1 %757, label %originalBB173, label %originalBB173alteredBB

originalBB173:                                    ; preds = %749, %originalBB173alteredBB
  %758 = load i8*, i8** %21, align 8, !dbg !1889
  %759 = load i64, i64* %28, align 8, !dbg !1890
  %760 = getelementptr inbounds i8, i8* %758, i64 %759, !dbg !1889
  %761 = load i8, i8* %760, align 1, !dbg !1889
  %762 = sext i8 %761 to i32, !dbg !1889
  %763 = icmp eq i32 %762, 0, !dbg !1891
  %764 = zext i1 %763 to i32, !dbg !1891
  %765 = load i32, i32* @x.35
  %766 = load i32, i32* @y.36
  %767 = sub i32 %765, 1
  %768 = mul i32 %765, %767
  %769 = urem i32 %768, 2
  %770 = icmp eq i32 %769, 0
  %771 = icmp slt i32 %766, 10
  %772 = or i1 %770, %771
  br i1 %772, label %originalBBpart2175, label %originalBB173alteredBB

originalBBpart2175:                               ; preds = %originalBB173
  br label %794, !dbg !1886

773:                                              ; preds = %originalBBpart2171
  %774 = load i32, i32* @x.35
  %775 = load i32, i32* @y.36
  %776 = sub i32 %774, 1
  %777 = mul i32 %774, %776
  %778 = urem i32 %777, 2
  %779 = icmp eq i32 %778, 0
  %780 = icmp slt i32 %775, 10
  %781 = or i1 %779, %780
  br i1 %781, label %originalBB177, label %originalBB177alteredBB

originalBB177:                                    ; preds = %773, %originalBB177alteredBB
  %782 = load i64, i64* %28, align 8, !dbg !1892
  %783 = load i64, i64* %22, align 8, !dbg !1893
  %784 = icmp eq i64 %782, %783, !dbg !1894
  %785 = zext i1 %784 to i32, !dbg !1894
  %786 = load i32, i32* @x.35
  %787 = load i32, i32* @y.36
  %788 = sub i32 %786, 1
  %789 = mul i32 %786, %788
  %790 = urem i32 %789, 2
  %791 = icmp eq i32 %790, 0
  %792 = icmp slt i32 %787, 10
  %793 = or i1 %791, %792
  br i1 %793, label %originalBBpart2179, label %originalBB177alteredBB

originalBBpart2179:                               ; preds = %originalBB177
  br label %794, !dbg !1886

794:                                              ; preds = %originalBBpart2179, %originalBBpart2175
  %795 = phi i32 [ %764, %originalBBpart2175 ], [ %785, %originalBBpart2179 ], !dbg !1886
  %796 = load i32, i32* @x.35
  %797 = load i32, i32* @y.36
  %798 = sub i32 %796, 1
  %799 = mul i32 %796, %798
  %800 = urem i32 %799, 2
  %801 = icmp eq i32 %800, 0
  %802 = icmp slt i32 %797, 10
  %803 = or i1 %801, %802
  br i1 %803, label %originalBB181, label %originalBB181alteredBB

originalBB181:                                    ; preds = %794, %originalBB181alteredBB
  %804 = icmp ne i32 %795, 0, !dbg !1895
  %805 = xor i1 %804, true, !dbg !1895
  %806 = load i32, i32* @x.35
  %807 = load i32, i32* @y.36
  %808 = sub i32 %806, 1
  %809 = mul i32 %806, %808
  %810 = urem i32 %809, 2
  %811 = icmp eq i32 %810, 0
  %812 = icmp slt i32 %807, 10
  %813 = or i1 %811, %812
  br i1 %813, label %originalBBpart2197, label %originalBB181alteredBB

originalBBpart2197:                               ; preds = %originalBB181
  br i1 %805, label %814, label %6227, !dbg !1896

814:                                              ; preds = %originalBBpart2197
  call void @llvm.dbg.declare(metadata i8* %39, metadata !1897, metadata !DIExpression()), !dbg !1899
  call void @llvm.dbg.declare(metadata i8* %40, metadata !1900, metadata !DIExpression()), !dbg !1901
  call void @llvm.dbg.declare(metadata i8* %41, metadata !1902, metadata !DIExpression()), !dbg !1903
  %815 = load i32, i32* @x.35
  %816 = load i32, i32* @y.36
  %817 = sub i32 %815, 1
  %818 = mul i32 %815, %817
  %819 = urem i32 %818, 2
  %820 = icmp eq i32 %819, 0
  %821 = icmp slt i32 %816, 10
  %822 = or i1 %820, %821
  br i1 %822, label %originalBB199, label %originalBB199alteredBB

originalBB199:                                    ; preds = %814, %originalBB199alteredBB
  store i8 0, i8* %41, align 1, !dbg !1903
  call void @llvm.dbg.declare(metadata i8* %42, metadata !1904, metadata !DIExpression()), !dbg !1905
  store i8 0, i8* %42, align 1, !dbg !1905
  call void @llvm.dbg.declare(metadata i8* %43, metadata !1906, metadata !DIExpression()), !dbg !1907
  store i8 0, i8* %43, align 1, !dbg !1907
  %823 = load i8, i8* %33, align 1, !dbg !1908
  %824 = trunc i8 %823 to i1, !dbg !1908
  %825 = load i32, i32* @x.35
  %826 = load i32, i32* @y.36
  %827 = sub i32 %825, 1
  %828 = mul i32 %825, %827
  %829 = urem i32 %828, 2
  %830 = icmp eq i32 %829, 0
  %831 = icmp slt i32 %826, 10
  %832 = or i1 %830, %831
  br i1 %832, label %originalBBpart2201, label %originalBB199alteredBB

originalBBpart2201:                               ; preds = %originalBB199
  br i1 %824, label %833, label %1045, !dbg !1910

833:                                              ; preds = %originalBBpart2201
  %834 = load i32, i32* @x.35
  %835 = load i32, i32* @y.36
  %836 = sub i32 %834, 1
  %837 = mul i32 %834, %836
  %838 = urem i32 %837, 2
  %839 = icmp eq i32 %838, 0
  %840 = icmp slt i32 %835, 10
  %841 = or i1 %839, %840
  br i1 %841, label %originalBB203, label %originalBB203alteredBB

originalBB203:                                    ; preds = %833, %originalBB203alteredBB
  %842 = load i32, i32* %23, align 4, !dbg !1911
  %843 = icmp ne i32 %842, 2, !dbg !1912
  %844 = load i32, i32* @x.35
  %845 = load i32, i32* @y.36
  %846 = sub i32 %844, 1
  %847 = mul i32 %844, %846
  %848 = urem i32 %847, 2
  %849 = icmp eq i32 %848, 0
  %850 = icmp slt i32 %845, 10
  %851 = or i1 %849, %850
  br i1 %851, label %originalBBpart2205, label %originalBB203alteredBB

originalBBpart2205:                               ; preds = %originalBB203
  br i1 %843, label %852, label %1045, !dbg !1913

852:                                              ; preds = %originalBBpart2205
  %853 = load i32, i32* @x.35
  %854 = load i32, i32* @y.36
  %855 = sub i32 %853, 1
  %856 = mul i32 %853, %855
  %857 = urem i32 %856, 2
  %858 = icmp eq i32 %857, 0
  %859 = icmp slt i32 %854, 10
  %860 = or i1 %858, %859
  br i1 %860, label %originalBB207, label %originalBB207alteredBB

originalBB207:                                    ; preds = %852, %originalBB207alteredBB
  %861 = load i64, i64* %32, align 8, !dbg !1914
  %862 = icmp ne i64 %861, 0, !dbg !1914
  %863 = load i32, i32* @x.35
  %864 = load i32, i32* @y.36
  %865 = sub i32 %863, 1
  %866 = mul i32 %863, %865
  %867 = urem i32 %866, 2
  %868 = icmp eq i32 %867, 0
  %869 = icmp slt i32 %864, 10
  %870 = or i1 %868, %869
  br i1 %870, label %originalBBpart2209, label %originalBB207alteredBB

originalBBpart2209:                               ; preds = %originalBB207
  br i1 %862, label %871, label %1045, !dbg !1915

871:                                              ; preds = %originalBBpart2209
  %872 = load i32, i32* @x.35
  %873 = load i32, i32* @y.36
  %874 = sub i32 %872, 1
  %875 = mul i32 %872, %874
  %876 = urem i32 %875, 2
  %877 = icmp eq i32 %876, 0
  %878 = icmp slt i32 %873, 10
  %879 = or i1 %877, %878
  br i1 %879, label %originalBB211, label %originalBB211alteredBB

originalBB211:                                    ; preds = %871, %originalBB211alteredBB
  %880 = load i64, i64* %28, align 8, !dbg !1916
  %881 = load i64, i64* %32, align 8, !dbg !1917
  %882 = add i64 %880, %881, !dbg !1918
  %883 = load i64, i64* %22, align 8, !dbg !1919
  %884 = icmp eq i64 %883, -1, !dbg !1920
  %885 = load i32, i32* @x.35
  %886 = load i32, i32* @y.36
  %887 = sub i32 %885, 1
  %888 = mul i32 %885, %887
  %889 = urem i32 %888, 2
  %890 = icmp eq i32 %889, 0
  %891 = icmp slt i32 %886, 10
  %892 = or i1 %890, %891
  br i1 %892, label %originalBBpart2219, label %originalBB211alteredBB

originalBBpart2219:                               ; preds = %originalBB211
  br i1 %884, label %893, label %931, !dbg !1921

893:                                              ; preds = %originalBBpart2219
  %894 = load i32, i32* @x.35
  %895 = load i32, i32* @y.36
  %896 = sub i32 %894, 1
  %897 = mul i32 %894, %896
  %898 = urem i32 %897, 2
  %899 = icmp eq i32 %898, 0
  %900 = icmp slt i32 %895, 10
  %901 = or i1 %899, %900
  br i1 %901, label %originalBB221, label %originalBB221alteredBB

originalBB221:                                    ; preds = %893, %originalBB221alteredBB
  %902 = load i64, i64* %32, align 8, !dbg !1922
  %903 = icmp ult i64 1, %902, !dbg !1923
  %904 = load i32, i32* @x.35
  %905 = load i32, i32* @y.36
  %906 = sub i32 %904, 1
  %907 = mul i32 %904, %906
  %908 = urem i32 %907, 2
  %909 = icmp eq i32 %908, 0
  %910 = icmp slt i32 %905, 10
  %911 = or i1 %909, %910
  br i1 %911, label %originalBBpart2223, label %originalBB221alteredBB

originalBBpart2223:                               ; preds = %originalBB221
  br i1 %903, label %912, label %931, !dbg !1919

912:                                              ; preds = %originalBBpart2223
  %913 = load i32, i32* @x.35
  %914 = load i32, i32* @y.36
  %915 = sub i32 %913, 1
  %916 = mul i32 %913, %915
  %917 = urem i32 %916, 2
  %918 = icmp eq i32 %917, 0
  %919 = icmp slt i32 %914, 10
  %920 = or i1 %918, %919
  br i1 %920, label %originalBB225, label %originalBB225alteredBB

originalBB225:                                    ; preds = %912, %originalBB225alteredBB
  %921 = load i8*, i8** %21, align 8, !dbg !1924
  %922 = call i64 @strlen(i8* %921) #13, !dbg !1925
  store i64 %922, i64* %22, align 8, !dbg !1926
  %923 = load i32, i32* @x.35
  %924 = load i32, i32* @y.36
  %925 = sub i32 %923, 1
  %926 = mul i32 %923, %925
  %927 = urem i32 %926, 2
  %928 = icmp eq i32 %927, 0
  %929 = icmp slt i32 %924, 10
  %930 = or i1 %928, %929
  br i1 %930, label %originalBBpart2227, label %originalBB225alteredBB

originalBBpart2227:                               ; preds = %originalBB225
  br label %949, !dbg !1919

931:                                              ; preds = %originalBBpart2223, %originalBBpart2219
  %932 = load i32, i32* @x.35
  %933 = load i32, i32* @y.36
  %934 = sub i32 %932, 1
  %935 = mul i32 %932, %934
  %936 = urem i32 %935, 2
  %937 = icmp eq i32 %936, 0
  %938 = icmp slt i32 %933, 10
  %939 = or i1 %937, %938
  br i1 %939, label %originalBB229, label %originalBB229alteredBB

originalBB229:                                    ; preds = %931, %originalBB229alteredBB
  %940 = load i64, i64* %22, align 8, !dbg !1927
  %941 = load i32, i32* @x.35
  %942 = load i32, i32* @y.36
  %943 = sub i32 %941, 1
  %944 = mul i32 %941, %943
  %945 = urem i32 %944, 2
  %946 = icmp eq i32 %945, 0
  %947 = icmp slt i32 %942, 10
  %948 = or i1 %946, %947
  br i1 %948, label %originalBBpart2231, label %originalBB229alteredBB

originalBBpart2231:                               ; preds = %originalBB229
  br label %949, !dbg !1919

949:                                              ; preds = %originalBBpart2231, %originalBBpart2227
  %950 = phi i64 [ %922, %originalBBpart2227 ], [ %940, %originalBBpart2231 ], !dbg !1919
  %951 = load i32, i32* @x.35
  %952 = load i32, i32* @y.36
  %953 = sub i32 %951, 1
  %954 = mul i32 %951, %953
  %955 = urem i32 %954, 2
  %956 = icmp eq i32 %955, 0
  %957 = icmp slt i32 %952, 10
  %958 = or i1 %956, %957
  br i1 %958, label %originalBB233, label %originalBB233alteredBB

originalBB233:                                    ; preds = %949, %originalBB233alteredBB
  %959 = icmp ule i64 %882, %950, !dbg !1928
  %960 = load i32, i32* @x.35
  %961 = load i32, i32* @y.36
  %962 = sub i32 %960, 1
  %963 = mul i32 %960, %962
  %964 = urem i32 %963, 2
  %965 = icmp eq i32 %964, 0
  %966 = icmp slt i32 %961, 10
  %967 = or i1 %965, %966
  br i1 %967, label %originalBBpart2235, label %originalBB233alteredBB

originalBBpart2235:                               ; preds = %originalBB233
  br i1 %959, label %968, label %1045, !dbg !1929

968:                                              ; preds = %originalBBpart2235
  %969 = load i32, i32* @x.35
  %970 = load i32, i32* @y.36
  %971 = sub i32 %969, 1
  %972 = mul i32 %969, %971
  %973 = urem i32 %972, 2
  %974 = icmp eq i32 %973, 0
  %975 = icmp slt i32 %970, 10
  %976 = or i1 %974, %975
  br i1 %976, label %originalBB237, label %originalBB237alteredBB

originalBB237:                                    ; preds = %968, %originalBB237alteredBB
  %977 = load i8*, i8** %21, align 8, !dbg !1930
  %978 = load i64, i64* %28, align 8, !dbg !1931
  %979 = getelementptr inbounds i8, i8* %977, i64 %978, !dbg !1932
  %980 = load i8*, i8** %31, align 8, !dbg !1933
  %981 = load i64, i64* %32, align 8, !dbg !1934
  %982 = call i32 @memcmp(i8* %979, i8* %980, i64 %981) #13, !dbg !1935
  %983 = icmp eq i32 %982, 0, !dbg !1936
  %984 = load i32, i32* @x.35
  %985 = load i32, i32* @y.36
  %986 = sub i32 %984, 1
  %987 = mul i32 %984, %986
  %988 = urem i32 %987, 2
  %989 = icmp eq i32 %988, 0
  %990 = icmp slt i32 %985, 10
  %991 = or i1 %989, %990
  br i1 %991, label %originalBBpart2239, label %originalBB237alteredBB

originalBBpart2239:                               ; preds = %originalBB237
  br i1 %983, label %992, label %1045, !dbg !1937

992:                                              ; preds = %originalBBpart2239
  %993 = load i32, i32* @x.35
  %994 = load i32, i32* @y.36
  %995 = sub i32 %993, 1
  %996 = mul i32 %993, %995
  %997 = urem i32 %996, 2
  %998 = icmp eq i32 %997, 0
  %999 = icmp slt i32 %994, 10
  %1000 = or i1 %998, %999
  br i1 %1000, label %originalBB241, label %originalBB241alteredBB

originalBB241:                                    ; preds = %992, %originalBB241alteredBB
  %1001 = load i8, i8* %35, align 1, !dbg !1938
  %1002 = trunc i8 %1001 to i1, !dbg !1938
  %1003 = load i32, i32* @x.35
  %1004 = load i32, i32* @y.36
  %1005 = sub i32 %1003, 1
  %1006 = mul i32 %1003, %1005
  %1007 = urem i32 %1006, 2
  %1008 = icmp eq i32 %1007, 0
  %1009 = icmp slt i32 %1004, 10
  %1010 = or i1 %1008, %1009
  br i1 %1010, label %originalBBpart2243, label %originalBB241alteredBB

originalBBpart2243:                               ; preds = %originalBB241
  br i1 %1002, label %1011, label %1028, !dbg !1941

1011:                                             ; preds = %originalBBpart2243
  %1012 = load i32, i32* @x.35
  %1013 = load i32, i32* @y.36
  %1014 = sub i32 %1012, 1
  %1015 = mul i32 %1012, %1014
  %1016 = urem i32 %1015, 2
  %1017 = icmp eq i32 %1016, 0
  %1018 = icmp slt i32 %1013, 10
  %1019 = or i1 %1017, %1018
  br i1 %1019, label %originalBB245, label %originalBB245alteredBB

originalBB245:                                    ; preds = %1011, %originalBB245alteredBB
  %1020 = load i32, i32* @x.35
  %1021 = load i32, i32* @y.36
  %1022 = sub i32 %1020, 1
  %1023 = mul i32 %1020, %1022
  %1024 = urem i32 %1023, 2
  %1025 = icmp eq i32 %1024, 0
  %1026 = icmp slt i32 %1021, 10
  %1027 = or i1 %1025, %1026
  br i1 %1027, label %originalBBpart2247, label %originalBB245alteredBB

originalBBpart2247:                               ; preds = %originalBB245
  br label %6709, !dbg !1942

1028:                                             ; preds = %originalBBpart2243
  %1029 = load i32, i32* @x.35
  %1030 = load i32, i32* @y.36
  %1031 = sub i32 %1029, 1
  %1032 = mul i32 %1029, %1031
  %1033 = urem i32 %1032, 2
  %1034 = icmp eq i32 %1033, 0
  %1035 = icmp slt i32 %1030, 10
  %1036 = or i1 %1034, %1035
  br i1 %1036, label %originalBB249, label %originalBB249alteredBB

originalBB249:                                    ; preds = %1028, %originalBB249alteredBB
  store i8 1, i8* %41, align 1, !dbg !1943
  %1037 = load i32, i32* @x.35
  %1038 = load i32, i32* @y.36
  %1039 = sub i32 %1037, 1
  %1040 = mul i32 %1037, %1039
  %1041 = urem i32 %1040, 2
  %1042 = icmp eq i32 %1041, 0
  %1043 = icmp slt i32 %1038, 10
  %1044 = or i1 %1042, %1043
  br i1 %1044, label %originalBBpart2251, label %originalBB249alteredBB

originalBBpart2251:                               ; preds = %originalBB249
  br label %1045, !dbg !1944

1045:                                             ; preds = %originalBBpart2251, %originalBBpart2239, %originalBBpart2235, %originalBBpart2209, %originalBBpart2205, %originalBBpart2201
  %1046 = load i32, i32* @x.35
  %1047 = load i32, i32* @y.36
  %1048 = sub i32 %1046, 1
  %1049 = mul i32 %1046, %1048
  %1050 = urem i32 %1049, 2
  %1051 = icmp eq i32 %1050, 0
  %1052 = icmp slt i32 %1047, 10
  %1053 = or i1 %1051, %1052
  br i1 %1053, label %originalBB253, label %originalBB253alteredBB

originalBB253:                                    ; preds = %1045, %originalBB253alteredBB
  %1054 = load i8*, i8** %21, align 8, !dbg !1945
  %1055 = load i64, i64* %28, align 8, !dbg !1946
  %1056 = getelementptr inbounds i8, i8* %1054, i64 %1055, !dbg !1945
  %1057 = load i8, i8* %1056, align 1, !dbg !1945
  store i8 %1057, i8* %39, align 1, !dbg !1947
  %1058 = load i8, i8* %39, align 1, !dbg !1948
  %1059 = zext i8 %1058 to i32, !dbg !1948
  %1060 = load i32, i32* @x.35
  %1061 = load i32, i32* @y.36
  %1062 = sub i32 %1060, 1
  %1063 = mul i32 %1060, %1062
  %1064 = urem i32 %1063, 2
  %1065 = icmp eq i32 %1064, 0
  %1066 = icmp slt i32 %1061, 10
  %1067 = or i1 %1065, %1066
  br i1 %1067, label %originalBBpart2255, label %originalBB253alteredBB

originalBBpart2255:                               ; preds = %originalBB253
  switch i32 %1059, label %3486 [
    i32 0, label %1068
    i32 63, label %1833
    i32 7, label %2531
    i32 8, label %2548
    i32 12, label %2565
    i32 10, label %2582
    i32 13, label %2599
    i32 9, label %2616
    i32 11, label %2633
    i32 92, label %2650
    i32 123, label %2876
    i32 125, label %2876
    i32 35, label %2954
    i32 126, label %2954
    i32 32, label %3007
    i32 33, label %3024
    i32 34, label %3024
    i32 36, label %3024
    i32 38, label %3024
    i32 40, label %3024
    i32 41, label %3024
    i32 42, label %3024
    i32 59, label %3024
    i32 60, label %3024
    i32 61, label %3024
    i32 62, label %3024
    i32 91, label %3024
    i32 94, label %3024
    i32 96, label %3024
    i32 124, label %3024
    i32 39, label %3096
    i32 37, label %3469
    i32 43, label %3469
    i32 44, label %3469
    i32 45, label %3469
    i32 46, label %3469
    i32 47, label %3469
    i32 48, label %3469
    i32 49, label %3469
    i32 50, label %3469
    i32 51, label %3469
    i32 52, label %3469
    i32 53, label %3469
    i32 54, label %3469
    i32 55, label %3469
    i32 56, label %3469
    i32 57, label %3469
    i32 58, label %3469
    i32 65, label %3469
    i32 66, label %3469
    i32 67, label %3469
    i32 68, label %3469
    i32 69, label %3469
    i32 70, label %3469
    i32 71, label %3469
    i32 72, label %3469
    i32 73, label %3469
    i32 74, label %3469
    i32 75, label %3469
    i32 76, label %3469
    i32 77, label %3469
    i32 78, label %3469
    i32 79, label %3469
    i32 80, label %3469
    i32 81, label %3469
    i32 82, label %3469
    i32 83, label %3469
    i32 84, label %3469
    i32 85, label %3469
    i32 86, label %3469
    i32 87, label %3469
    i32 88, label %3469
    i32 89, label %3469
    i32 90, label %3469
    i32 93, label %3469
    i32 95, label %3469
    i32 97, label %3469
    i32 98, label %3469
    i32 99, label %3469
    i32 100, label %3469
    i32 101, label %3469
    i32 102, label %3469
    i32 103, label %3469
    i32 104, label %3469
    i32 105, label %3469
    i32 106, label %3469
    i32 107, label %3469
    i32 108, label %3469
    i32 109, label %3469
    i32 110, label %3469
    i32 111, label %3469
    i32 112, label %3469
    i32 113, label %3469
    i32 114, label %3469
    i32 115, label %3469
    i32 116, label %3469
    i32 117, label %3469
    i32 118, label %3469
    i32 119, label %3469
    i32 120, label %3469
    i32 121, label %3469
    i32 122, label %3469
  ], !dbg !1949

1068:                                             ; preds = %originalBBpart2255
  %1069 = load i32, i32* @x.35
  %1070 = load i32, i32* @y.36
  %1071 = sub i32 %1069, 1
  %1072 = mul i32 %1069, %1071
  %1073 = urem i32 %1072, 2
  %1074 = icmp eq i32 %1073, 0
  %1075 = icmp slt i32 %1070, 10
  %1076 = or i1 %1074, %1075
  br i1 %1076, label %originalBB257, label %originalBB257alteredBB

originalBB257:                                    ; preds = %1068, %originalBB257alteredBB
  %1077 = load i8, i8* %33, align 1, !dbg !1950
  %1078 = trunc i8 %1077 to i1, !dbg !1950
  %1079 = load i32, i32* @x.35
  %1080 = load i32, i32* @y.36
  %1081 = sub i32 %1079, 1
  %1082 = mul i32 %1079, %1081
  %1083 = urem i32 %1082, 2
  %1084 = icmp eq i32 %1083, 0
  %1085 = icmp slt i32 %1080, 10
  %1086 = or i1 %1084, %1085
  br i1 %1086, label %originalBBpart2259, label %originalBB257alteredBB

originalBBpart2259:                               ; preds = %originalBB257
  br i1 %1078, label %1087, label %1778, !dbg !1953

1087:                                             ; preds = %originalBBpart2259
  %1088 = load i32, i32* @x.35
  %1089 = load i32, i32* @y.36
  %1090 = sub i32 %1088, 1
  %1091 = mul i32 %1088, %1090
  %1092 = urem i32 %1091, 2
  %1093 = icmp eq i32 %1092, 0
  %1094 = icmp slt i32 %1089, 10
  %1095 = or i1 %1093, %1094
  br i1 %1095, label %originalBB261, label %originalBB261alteredBB

originalBB261:                                    ; preds = %1087, %originalBB261alteredBB
  %1096 = load i32, i32* @x.35
  %1097 = load i32, i32* @y.36
  %1098 = sub i32 %1096, 1
  %1099 = mul i32 %1096, %1098
  %1100 = urem i32 %1099, 2
  %1101 = icmp eq i32 %1100, 0
  %1102 = icmp slt i32 %1097, 10
  %1103 = or i1 %1101, %1102
  br i1 %1103, label %originalBBpart2263, label %originalBB261alteredBB

originalBBpart2263:                               ; preds = %originalBB261
  br label %1104, !dbg !1954

1104:                                             ; preds = %originalBBpart2263
  %1105 = load i32, i32* @x.35
  %1106 = load i32, i32* @y.36
  %1107 = sub i32 %1105, 1
  %1108 = mul i32 %1105, %1107
  %1109 = urem i32 %1108, 2
  %1110 = icmp eq i32 %1109, 0
  %1111 = icmp slt i32 %1106, 10
  %1112 = or i1 %1110, %1111
  br i1 %1112, label %originalBB265, label %originalBB265alteredBB

originalBB265:                                    ; preds = %1104, %originalBB265alteredBB
  %1113 = load i8, i8* %35, align 1, !dbg !1956
  %1114 = trunc i8 %1113 to i1, !dbg !1956
  %1115 = load i32, i32* @x.35
  %1116 = load i32, i32* @y.36
  %1117 = sub i32 %1115, 1
  %1118 = mul i32 %1115, %1117
  %1119 = urem i32 %1118, 2
  %1120 = icmp eq i32 %1119, 0
  %1121 = icmp slt i32 %1116, 10
  %1122 = or i1 %1120, %1121
  br i1 %1122, label %originalBBpart2267, label %originalBB265alteredBB

originalBBpart2267:                               ; preds = %originalBB265
  br i1 %1114, label %1123, label %1140, !dbg !1959

1123:                                             ; preds = %originalBBpart2267
  %1124 = load i32, i32* @x.35
  %1125 = load i32, i32* @y.36
  %1126 = sub i32 %1124, 1
  %1127 = mul i32 %1124, %1126
  %1128 = urem i32 %1127, 2
  %1129 = icmp eq i32 %1128, 0
  %1130 = icmp slt i32 %1125, 10
  %1131 = or i1 %1129, %1130
  br i1 %1131, label %originalBB269, label %originalBB269alteredBB

originalBB269:                                    ; preds = %1123, %originalBB269alteredBB
  %1132 = load i32, i32* @x.35
  %1133 = load i32, i32* @y.36
  %1134 = sub i32 %1132, 1
  %1135 = mul i32 %1132, %1134
  %1136 = urem i32 %1135, 2
  %1137 = icmp eq i32 %1136, 0
  %1138 = icmp slt i32 %1133, 10
  %1139 = or i1 %1137, %1138
  br i1 %1139, label %originalBBpart2271, label %originalBB269alteredBB

originalBBpart2271:                               ; preds = %originalBB269
  br label %6709, !dbg !1956

1140:                                             ; preds = %originalBBpart2267
  %1141 = load i32, i32* @x.35
  %1142 = load i32, i32* @y.36
  %1143 = sub i32 %1141, 1
  %1144 = mul i32 %1141, %1143
  %1145 = urem i32 %1144, 2
  %1146 = icmp eq i32 %1145, 0
  %1147 = icmp slt i32 %1142, 10
  %1148 = or i1 %1146, %1147
  br i1 %1148, label %originalBB273, label %originalBB273alteredBB

originalBB273:                                    ; preds = %1140, %originalBB273alteredBB
  store i8 1, i8* %42, align 1, !dbg !1959
  %1149 = load i32, i32* %23, align 4, !dbg !1960
  %1150 = icmp eq i32 %1149, 2, !dbg !1960
  %1151 = load i32, i32* @x.35
  %1152 = load i32, i32* @y.36
  %1153 = sub i32 %1151, 1
  %1154 = mul i32 %1151, %1153
  %1155 = urem i32 %1154, 2
  %1156 = icmp eq i32 %1155, 0
  %1157 = icmp slt i32 %1152, 10
  %1158 = or i1 %1156, %1157
  br i1 %1158, label %originalBBpart2275, label %originalBB273alteredBB

originalBBpart2275:                               ; preds = %originalBB273
  br i1 %1150, label %1159, label %1459, !dbg !1960

1159:                                             ; preds = %originalBBpart2275
  %1160 = load i32, i32* @x.35
  %1161 = load i32, i32* @y.36
  %1162 = sub i32 %1160, 1
  %1163 = mul i32 %1160, %1162
  %1164 = urem i32 %1163, 2
  %1165 = icmp eq i32 %1164, 0
  %1166 = icmp slt i32 %1161, 10
  %1167 = or i1 %1165, %1166
  br i1 %1167, label %originalBB277, label %originalBB277alteredBB

originalBB277:                                    ; preds = %1159, %originalBB277alteredBB
  %1168 = load i8, i8* %36, align 1, !dbg !1960
  %1169 = trunc i8 %1168 to i1, !dbg !1960
  %1170 = load i32, i32* @x.35
  %1171 = load i32, i32* @y.36
  %1172 = sub i32 %1170, 1
  %1173 = mul i32 %1170, %1172
  %1174 = urem i32 %1173, 2
  %1175 = icmp eq i32 %1174, 0
  %1176 = icmp slt i32 %1171, 10
  %1177 = or i1 %1175, %1176
  br i1 %1177, label %originalBBpart2279, label %originalBB277alteredBB

originalBBpart2279:                               ; preds = %originalBB277
  br i1 %1169, label %1459, label %1178, !dbg !1959

1178:                                             ; preds = %originalBBpart2279
  %1179 = load i32, i32* @x.35
  %1180 = load i32, i32* @y.36
  %1181 = sub i32 %1179, 1
  %1182 = mul i32 %1179, %1181
  %1183 = urem i32 %1182, 2
  %1184 = icmp eq i32 %1183, 0
  %1185 = icmp slt i32 %1180, 10
  %1186 = or i1 %1184, %1185
  br i1 %1186, label %originalBB281, label %originalBB281alteredBB

originalBB281:                                    ; preds = %1178, %originalBB281alteredBB
  %1187 = load i32, i32* @x.35
  %1188 = load i32, i32* @y.36
  %1189 = sub i32 %1187, 1
  %1190 = mul i32 %1187, %1189
  %1191 = urem i32 %1190, 2
  %1192 = icmp eq i32 %1191, 0
  %1193 = icmp slt i32 %1188, 10
  %1194 = or i1 %1192, %1193
  br i1 %1194, label %originalBBpart2283, label %originalBB281alteredBB

originalBBpart2283:                               ; preds = %originalBB281
  br label %1195, !dbg !1962

1195:                                             ; preds = %originalBBpart2283
  %1196 = load i32, i32* @x.35
  %1197 = load i32, i32* @y.36
  %1198 = sub i32 %1196, 1
  %1199 = mul i32 %1196, %1198
  %1200 = urem i32 %1199, 2
  %1201 = icmp eq i32 %1200, 0
  %1202 = icmp slt i32 %1197, 10
  %1203 = or i1 %1201, %1202
  br i1 %1203, label %originalBB285, label %originalBB285alteredBB

originalBB285:                                    ; preds = %1195, %originalBB285alteredBB
  %1204 = load i64, i64* %29, align 8, !dbg !1964
  %1205 = load i64, i64* %20, align 8, !dbg !1964
  %1206 = icmp ult i64 %1204, %1205, !dbg !1964
  %1207 = load i32, i32* @x.35
  %1208 = load i32, i32* @y.36
  %1209 = sub i32 %1207, 1
  %1210 = mul i32 %1207, %1209
  %1211 = urem i32 %1210, 2
  %1212 = icmp eq i32 %1211, 0
  %1213 = icmp slt i32 %1208, 10
  %1214 = or i1 %1212, %1213
  br i1 %1214, label %originalBBpart2287, label %originalBB285alteredBB

originalBBpart2287:                               ; preds = %originalBB285
  br i1 %1206, label %1215, label %1235, !dbg !1967

1215:                                             ; preds = %originalBBpart2287
  %1216 = load i32, i32* @x.35
  %1217 = load i32, i32* @y.36
  %1218 = sub i32 %1216, 1
  %1219 = mul i32 %1216, %1218
  %1220 = urem i32 %1219, 2
  %1221 = icmp eq i32 %1220, 0
  %1222 = icmp slt i32 %1217, 10
  %1223 = or i1 %1221, %1222
  br i1 %1223, label %originalBB289, label %originalBB289alteredBB

originalBB289:                                    ; preds = %1215, %originalBB289alteredBB
  %1224 = load i8*, i8** %19, align 8, !dbg !1964
  %1225 = load i64, i64* %29, align 8, !dbg !1964
  %1226 = getelementptr inbounds i8, i8* %1224, i64 %1225, !dbg !1964
  store i8 39, i8* %1226, align 1, !dbg !1964
  %1227 = load i32, i32* @x.35
  %1228 = load i32, i32* @y.36
  %1229 = sub i32 %1227, 1
  %1230 = mul i32 %1227, %1229
  %1231 = urem i32 %1230, 2
  %1232 = icmp eq i32 %1231, 0
  %1233 = icmp slt i32 %1228, 10
  %1234 = or i1 %1232, %1233
  br i1 %1234, label %originalBBpart2291, label %originalBB289alteredBB

originalBBpart2291:                               ; preds = %originalBB289
  br label %1235, !dbg !1964

1235:                                             ; preds = %originalBBpart2291, %originalBBpart2287
  %1236 = load i32, i32* @x.35
  %1237 = load i32, i32* @y.36
  %1238 = sub i32 %1236, 1
  %1239 = mul i32 %1236, %1238
  %1240 = urem i32 %1239, 2
  %1241 = icmp eq i32 %1240, 0
  %1242 = icmp slt i32 %1237, 10
  %1243 = or i1 %1241, %1242
  br i1 %1243, label %originalBB293, label %originalBB293alteredBB

originalBB293:                                    ; preds = %1235, %originalBB293alteredBB
  %1244 = load i64, i64* %29, align 8, !dbg !1967
  %1245 = add i64 %1244, 1, !dbg !1967
  %1246 = trunc i64 1 to i32
  %1247 = mul i32 %1246, -5
  %1248 = add i32 %1247, 3
  %1249 = trunc i64 %1244 to i32
  %1250 = add i32 %1249, 2
  %1251 = trunc i64 %1245 to i32
  %1252 = mul i32 %1251, -2
  %1253 = add i32 %1252, 2
  %1254 = mul i32 %1248, %1248
  %1255 = mul i32 %1254, %1254
  %1256 = mul i32 %1250, %1250
  %1257 = mul i32 %1256, %1256
  %1258 = mul i32 %1253, %1253
  %1259 = mul i32 %1258, %1258
  %1260 = add i32 %1255, %1257
  %1261 = sub i32 %1260, %1259
  %1262 = add i32 %1261, 5
  %1263 = icmp ne i32 %1262, 5
  %1264 = load i32, i32* @x.35
  %1265 = load i32, i32* @y.36
  %1266 = sub i32 %1264, 1
  %1267 = mul i32 %1264, %1266
  %1268 = urem i32 %1267, 2
  %1269 = icmp eq i32 %1268, 0
  %1270 = icmp slt i32 %1265, 10
  %1271 = or i1 %1269, %1270
  br i1 %1271, label %originalBBpart2417, label %originalBB293alteredBB

originalBBpart2417:                               ; preds = %originalBB293
  br i1 %1263, label %1272, label %1289

1272:                                             ; preds = %originalBBpart2417
  %1273 = load i32, i32* @x.35
  %1274 = load i32, i32* @y.36
  %1275 = sub i32 %1273, 1
  %1276 = mul i32 %1273, %1275
  %1277 = urem i32 %1276, 2
  %1278 = icmp eq i32 %1277, 0
  %1279 = icmp slt i32 %1274, 10
  %1280 = or i1 %1278, %1279
  br i1 %1280, label %originalBB419, label %originalBB419alteredBB

originalBB419:                                    ; preds = %1272, %originalBB419alteredBB
  %1281 = load i32, i32* @x.35
  %1282 = load i32, i32* @y.36
  %1283 = sub i32 %1281, 1
  %1284 = mul i32 %1281, %1283
  %1285 = urem i32 %1284, 2
  %1286 = icmp eq i32 %1285, 0
  %1287 = icmp slt i32 %1282, 10
  %1288 = or i1 %1286, %1287
  br i1 %1288, label %originalBBpart2421, label %originalBB419alteredBB

originalBBpart2421:                               ; preds = %originalBB419
  ret i64 0

1289:                                             ; preds = %originalBBpart2417
  %1290 = load i32, i32* @x.35
  %1291 = load i32, i32* @y.36
  %1292 = sub i32 %1290, 1
  %1293 = mul i32 %1290, %1292
  %1294 = urem i32 %1293, 2
  %1295 = icmp eq i32 %1294, 0
  %1296 = icmp slt i32 %1291, 10
  %1297 = or i1 %1295, %1296
  br i1 %1297, label %originalBB423, label %originalBB423alteredBB

originalBB423:                                    ; preds = %1289, %originalBB423alteredBB
  store i64 %1245, i64* %29, align 8, !dbg !1967
  %1298 = load i32, i32* @x.35
  %1299 = load i32, i32* @y.36
  %1300 = sub i32 %1298, 1
  %1301 = mul i32 %1298, %1300
  %1302 = urem i32 %1301, 2
  %1303 = icmp eq i32 %1302, 0
  %1304 = icmp slt i32 %1299, 10
  %1305 = or i1 %1303, %1304
  br i1 %1305, label %originalBBpart2425, label %originalBB423alteredBB

originalBBpart2425:                               ; preds = %originalBB423
  br label %1306, !dbg !1967

1306:                                             ; preds = %originalBBpart2425
  %1307 = load i32, i32* @x.35
  %1308 = load i32, i32* @y.36
  %1309 = sub i32 %1307, 1
  %1310 = mul i32 %1307, %1309
  %1311 = urem i32 %1310, 2
  %1312 = icmp eq i32 %1311, 0
  %1313 = icmp slt i32 %1308, 10
  %1314 = or i1 %1312, %1313
  br i1 %1314, label %originalBB427, label %originalBB427alteredBB

originalBB427:                                    ; preds = %1306, %originalBB427alteredBB
  %1315 = load i32, i32* @x.35
  %1316 = load i32, i32* @y.36
  %1317 = sub i32 %1315, 1
  %1318 = mul i32 %1315, %1317
  %1319 = urem i32 %1318, 2
  %1320 = icmp eq i32 %1319, 0
  %1321 = icmp slt i32 %1316, 10
  %1322 = or i1 %1320, %1321
  br i1 %1322, label %originalBBpart2429, label %originalBB427alteredBB

originalBBpart2429:                               ; preds = %originalBB427
  br label %1323, !dbg !1962

1323:                                             ; preds = %originalBBpart2429
  %1324 = load i64, i64* %29, align 8, !dbg !1968
  %1325 = load i64, i64* %20, align 8, !dbg !1968
  %1326 = icmp ult i64 %1324, %1325, !dbg !1968
  br i1 %1326, label %1327, label %1347, !dbg !1971

1327:                                             ; preds = %1323
  %1328 = load i32, i32* @x.35
  %1329 = load i32, i32* @y.36
  %1330 = sub i32 %1328, 1
  %1331 = mul i32 %1328, %1330
  %1332 = urem i32 %1331, 2
  %1333 = icmp eq i32 %1332, 0
  %1334 = icmp slt i32 %1329, 10
  %1335 = or i1 %1333, %1334
  br i1 %1335, label %originalBB431, label %originalBB431alteredBB

originalBB431:                                    ; preds = %1327, %originalBB431alteredBB
  %1336 = load i8*, i8** %19, align 8, !dbg !1968
  %1337 = load i64, i64* %29, align 8, !dbg !1968
  %1338 = getelementptr inbounds i8, i8* %1336, i64 %1337, !dbg !1968
  store i8 36, i8* %1338, align 1, !dbg !1968
  %1339 = load i32, i32* @x.35
  %1340 = load i32, i32* @y.36
  %1341 = sub i32 %1339, 1
  %1342 = mul i32 %1339, %1341
  %1343 = urem i32 %1342, 2
  %1344 = icmp eq i32 %1343, 0
  %1345 = icmp slt i32 %1340, 10
  %1346 = or i1 %1344, %1345
  br i1 %1346, label %originalBBpart2433, label %originalBB431alteredBB

originalBBpart2433:                               ; preds = %originalBB431
  br label %1347, !dbg !1968

1347:                                             ; preds = %originalBBpart2433, %1323
  %1348 = load i32, i32* @x.35
  %1349 = load i32, i32* @y.36
  %1350 = sub i32 %1348, 1
  %1351 = mul i32 %1348, %1350
  %1352 = urem i32 %1351, 2
  %1353 = icmp eq i32 %1352, 0
  %1354 = icmp slt i32 %1349, 10
  %1355 = or i1 %1353, %1354
  br i1 %1355, label %originalBB435, label %originalBB435alteredBB

originalBB435:                                    ; preds = %1347, %originalBB435alteredBB
  %1356 = load i64, i64* %29, align 8, !dbg !1971
  %1357 = add i64 %1356, 1, !dbg !1971
  store i64 %1357, i64* %29, align 8, !dbg !1971
  %1358 = load i32, i32* @x.35
  %1359 = load i32, i32* @y.36
  %1360 = sub i32 %1358, 1
  %1361 = mul i32 %1358, %1360
  %1362 = urem i32 %1361, 2
  %1363 = icmp eq i32 %1362, 0
  %1364 = icmp slt i32 %1359, 10
  %1365 = or i1 %1363, %1364
  br i1 %1365, label %originalBBpart2444, label %originalBB435alteredBB

originalBBpart2444:                               ; preds = %originalBB435
  br label %1366, !dbg !1971

1366:                                             ; preds = %originalBBpart2444
  %1367 = load i32, i32* @x.35
  %1368 = load i32, i32* @y.36
  %1369 = sub i32 %1367, 1
  %1370 = mul i32 %1367, %1369
  %1371 = urem i32 %1370, 2
  %1372 = icmp eq i32 %1371, 0
  %1373 = icmp slt i32 %1368, 10
  %1374 = or i1 %1372, %1373
  br i1 %1374, label %originalBB446, label %originalBB446alteredBB

originalBB446:                                    ; preds = %1366, %originalBB446alteredBB
  %1375 = load i32, i32* @x.35
  %1376 = load i32, i32* @y.36
  %1377 = sub i32 %1375, 1
  %1378 = mul i32 %1375, %1377
  %1379 = urem i32 %1378, 2
  %1380 = icmp eq i32 %1379, 0
  %1381 = icmp slt i32 %1376, 10
  %1382 = or i1 %1380, %1381
  br i1 %1382, label %originalBBpart2448, label %originalBB446alteredBB

originalBBpart2448:                               ; preds = %originalBB446
  br label %1383, !dbg !1962

1383:                                             ; preds = %originalBBpart2448
  %1384 = load i32, i32* @x.35
  %1385 = load i32, i32* @y.36
  %1386 = sub i32 %1384, 1
  %1387 = mul i32 %1384, %1386
  %1388 = urem i32 %1387, 2
  %1389 = icmp eq i32 %1388, 0
  %1390 = icmp slt i32 %1385, 10
  %1391 = or i1 %1389, %1390
  br i1 %1391, label %originalBB450, label %originalBB450alteredBB

originalBB450:                                    ; preds = %1383, %originalBB450alteredBB
  %1392 = load i64, i64* %29, align 8, !dbg !1972
  %1393 = load i64, i64* %20, align 8, !dbg !1972
  %1394 = icmp ult i64 %1392, %1393, !dbg !1972
  %1395 = load i32, i32* @x.35
  %1396 = load i32, i32* @y.36
  %1397 = sub i32 %1395, 1
  %1398 = mul i32 %1395, %1397
  %1399 = urem i32 %1398, 2
  %1400 = icmp eq i32 %1399, 0
  %1401 = icmp slt i32 %1396, 10
  %1402 = or i1 %1400, %1401
  br i1 %1402, label %originalBBpart2452, label %originalBB450alteredBB

originalBBpart2452:                               ; preds = %originalBB450
  br i1 %1394, label %1403, label %1423, !dbg !1975

1403:                                             ; preds = %originalBBpart2452
  %1404 = load i32, i32* @x.35
  %1405 = load i32, i32* @y.36
  %1406 = sub i32 %1404, 1
  %1407 = mul i32 %1404, %1406
  %1408 = urem i32 %1407, 2
  %1409 = icmp eq i32 %1408, 0
  %1410 = icmp slt i32 %1405, 10
  %1411 = or i1 %1409, %1410
  br i1 %1411, label %originalBB454, label %originalBB454alteredBB

originalBB454:                                    ; preds = %1403, %originalBB454alteredBB
  %1412 = load i8*, i8** %19, align 8, !dbg !1972
  %1413 = load i64, i64* %29, align 8, !dbg !1972
  %1414 = getelementptr inbounds i8, i8* %1412, i64 %1413, !dbg !1972
  store i8 39, i8* %1414, align 1, !dbg !1972
  %1415 = load i32, i32* @x.35
  %1416 = load i32, i32* @y.36
  %1417 = sub i32 %1415, 1
  %1418 = mul i32 %1415, %1417
  %1419 = urem i32 %1418, 2
  %1420 = icmp eq i32 %1419, 0
  %1421 = icmp slt i32 %1416, 10
  %1422 = or i1 %1420, %1421
  br i1 %1422, label %originalBBpart2456, label %originalBB454alteredBB

originalBBpart2456:                               ; preds = %originalBB454
  br label %1423, !dbg !1972

1423:                                             ; preds = %originalBBpart2456, %originalBBpart2452
  %1424 = load i32, i32* @x.35
  %1425 = load i32, i32* @y.36
  %1426 = sub i32 %1424, 1
  %1427 = mul i32 %1424, %1426
  %1428 = urem i32 %1427, 2
  %1429 = icmp eq i32 %1428, 0
  %1430 = icmp slt i32 %1425, 10
  %1431 = or i1 %1429, %1430
  br i1 %1431, label %originalBB458, label %originalBB458alteredBB

originalBB458:                                    ; preds = %1423, %originalBB458alteredBB
  %1432 = load i64, i64* %29, align 8, !dbg !1975
  %1433 = add i64 %1432, 1, !dbg !1975
  store i64 %1433, i64* %29, align 8, !dbg !1975
  %1434 = load i32, i32* @x.35
  %1435 = load i32, i32* @y.36
  %1436 = sub i32 %1434, 1
  %1437 = mul i32 %1434, %1436
  %1438 = urem i32 %1437, 2
  %1439 = icmp eq i32 %1438, 0
  %1440 = icmp slt i32 %1435, 10
  %1441 = or i1 %1439, %1440
  br i1 %1441, label %originalBBpart2469, label %originalBB458alteredBB

originalBBpart2469:                               ; preds = %originalBB458
  br label %1442, !dbg !1975

1442:                                             ; preds = %originalBBpart2469
  %1443 = load i32, i32* @x.35
  %1444 = load i32, i32* @y.36
  %1445 = sub i32 %1443, 1
  %1446 = mul i32 %1443, %1445
  %1447 = urem i32 %1446, 2
  %1448 = icmp eq i32 %1447, 0
  %1449 = icmp slt i32 %1444, 10
  %1450 = or i1 %1448, %1449
  br i1 %1450, label %originalBB471, label %originalBB471alteredBB

originalBB471:                                    ; preds = %1442, %originalBB471alteredBB
  store i8 1, i8* %36, align 1, !dbg !1962
  %1451 = load i32, i32* @x.35
  %1452 = load i32, i32* @y.36
  %1453 = sub i32 %1451, 1
  %1454 = mul i32 %1451, %1453
  %1455 = urem i32 %1454, 2
  %1456 = icmp eq i32 %1455, 0
  %1457 = icmp slt i32 %1452, 10
  %1458 = or i1 %1456, %1457
  br i1 %1458, label %originalBBpart2473, label %originalBB471alteredBB

originalBBpart2473:                               ; preds = %originalBB471
  br label %1459, !dbg !1962

1459:                                             ; preds = %originalBBpart2473, %originalBBpart2279, %originalBBpart2275
  br label %1460, !dbg !1959

1460:                                             ; preds = %1459
  %1461 = load i32, i32* @x.35
  %1462 = load i32, i32* @y.36
  %1463 = sub i32 %1461, 1
  %1464 = mul i32 %1461, %1463
  %1465 = urem i32 %1464, 2
  %1466 = icmp eq i32 %1465, 0
  %1467 = icmp slt i32 %1462, 10
  %1468 = or i1 %1466, %1467
  br i1 %1468, label %originalBB475, label %originalBB475alteredBB

originalBB475:                                    ; preds = %1460, %originalBB475alteredBB
  %1469 = load i64, i64* %29, align 8, !dbg !1976
  %1470 = load i64, i64* %20, align 8, !dbg !1976
  %1471 = icmp ult i64 %1469, %1470, !dbg !1976
  %1472 = load i32, i32* @x.35
  %1473 = load i32, i32* @y.36
  %1474 = sub i32 %1472, 1
  %1475 = mul i32 %1472, %1474
  %1476 = urem i32 %1475, 2
  %1477 = icmp eq i32 %1476, 0
  %1478 = icmp slt i32 %1473, 10
  %1479 = or i1 %1477, %1478
  br i1 %1479, label %originalBBpart2477, label %originalBB475alteredBB

originalBBpart2477:                               ; preds = %originalBB475
  br i1 %1471, label %1480, label %1500, !dbg !1979

1480:                                             ; preds = %originalBBpart2477
  %1481 = load i32, i32* @x.35
  %1482 = load i32, i32* @y.36
  %1483 = sub i32 %1481, 1
  %1484 = mul i32 %1481, %1483
  %1485 = urem i32 %1484, 2
  %1486 = icmp eq i32 %1485, 0
  %1487 = icmp slt i32 %1482, 10
  %1488 = or i1 %1486, %1487
  br i1 %1488, label %originalBB479, label %originalBB479alteredBB

originalBB479:                                    ; preds = %1480, %originalBB479alteredBB
  %1489 = load i8*, i8** %19, align 8, !dbg !1976
  %1490 = load i64, i64* %29, align 8, !dbg !1976
  %1491 = getelementptr inbounds i8, i8* %1489, i64 %1490, !dbg !1976
  store i8 92, i8* %1491, align 1, !dbg !1976
  %1492 = load i32, i32* @x.35
  %1493 = load i32, i32* @y.36
  %1494 = sub i32 %1492, 1
  %1495 = mul i32 %1492, %1494
  %1496 = urem i32 %1495, 2
  %1497 = icmp eq i32 %1496, 0
  %1498 = icmp slt i32 %1493, 10
  %1499 = or i1 %1497, %1498
  br i1 %1499, label %originalBBpart2481, label %originalBB479alteredBB

originalBBpart2481:                               ; preds = %originalBB479
  br label %1500, !dbg !1976

1500:                                             ; preds = %originalBBpart2481, %originalBBpart2477
  %1501 = load i32, i32* @x.35
  %1502 = load i32, i32* @y.36
  %1503 = sub i32 %1501, 1
  %1504 = mul i32 %1501, %1503
  %1505 = urem i32 %1504, 2
  %1506 = icmp eq i32 %1505, 0
  %1507 = icmp slt i32 %1502, 10
  %1508 = or i1 %1506, %1507
  br i1 %1508, label %originalBB483, label %originalBB483alteredBB

originalBB483:                                    ; preds = %1500, %originalBB483alteredBB
  %1509 = load i64, i64* %29, align 8, !dbg !1979
  %1510 = add i64 %1509, 1, !dbg !1979
  store i64 %1510, i64* %29, align 8, !dbg !1979
  %1511 = load i32, i32* @x.35
  %1512 = load i32, i32* @y.36
  %1513 = sub i32 %1511, 1
  %1514 = mul i32 %1511, %1513
  %1515 = urem i32 %1514, 2
  %1516 = icmp eq i32 %1515, 0
  %1517 = icmp slt i32 %1512, 10
  %1518 = or i1 %1516, %1517
  br i1 %1518, label %originalBBpart2486, label %originalBB483alteredBB

originalBBpart2486:                               ; preds = %originalBB483
  br label %1519, !dbg !1979

1519:                                             ; preds = %originalBBpart2486
  %1520 = load i32, i32* @x.35
  %1521 = load i32, i32* @y.36
  %1522 = sub i32 %1520, 1
  %1523 = mul i32 %1520, %1522
  %1524 = urem i32 %1523, 2
  %1525 = icmp eq i32 %1524, 0
  %1526 = icmp slt i32 %1521, 10
  %1527 = or i1 %1525, %1526
  br i1 %1527, label %originalBB488, label %originalBB488alteredBB

originalBB488:                                    ; preds = %1519, %originalBB488alteredBB
  %1528 = load i32, i32* @x.35
  %1529 = load i32, i32* @y.36
  %1530 = sub i32 %1528, 1
  %1531 = mul i32 %1528, %1530
  %1532 = urem i32 %1531, 2
  %1533 = icmp eq i32 %1532, 0
  %1534 = icmp slt i32 %1529, 10
  %1535 = or i1 %1533, %1534
  br i1 %1535, label %originalBBpart2490, label %originalBB488alteredBB

originalBBpart2490:                               ; preds = %originalBB488
  br label %1536, !dbg !1959

1536:                                             ; preds = %originalBBpart2490
  %1537 = load i32, i32* @x.35
  %1538 = load i32, i32* @y.36
  %1539 = sub i32 %1537, 1
  %1540 = mul i32 %1537, %1539
  %1541 = urem i32 %1540, 2
  %1542 = icmp eq i32 %1541, 0
  %1543 = icmp slt i32 %1538, 10
  %1544 = or i1 %1542, %1543
  br i1 %1544, label %originalBB492, label %originalBB492alteredBB

originalBB492:                                    ; preds = %1536, %originalBB492alteredBB
  %1545 = load i32, i32* %23, align 4, !dbg !1980
  %1546 = icmp ne i32 %1545, 2, !dbg !1982
  %1547 = load i32, i32* @x.35
  %1548 = load i32, i32* @y.36
  %1549 = sub i32 %1547, 1
  %1550 = mul i32 %1547, %1549
  %1551 = urem i32 %1550, 2
  %1552 = icmp eq i32 %1551, 0
  %1553 = icmp slt i32 %1548, 10
  %1554 = or i1 %1552, %1553
  br i1 %1554, label %originalBBpart2494, label %originalBB492alteredBB

originalBBpart2494:                               ; preds = %originalBB492
  br i1 %1546, label %1555, label %1761, !dbg !1983

1555:                                             ; preds = %originalBBpart2494
  %1556 = load i32, i32* @x.35
  %1557 = load i32, i32* @y.36
  %1558 = sub i32 %1556, 1
  %1559 = mul i32 %1556, %1558
  %1560 = urem i32 %1559, 2
  %1561 = icmp eq i32 %1560, 0
  %1562 = icmp slt i32 %1557, 10
  %1563 = or i1 %1561, %1562
  br i1 %1563, label %originalBB496, label %originalBB496alteredBB

originalBB496:                                    ; preds = %1555, %originalBB496alteredBB
  %1564 = load i64, i64* %28, align 8, !dbg !1984
  %1565 = add i64 %1564, 1, !dbg !1985
  %1566 = load i64, i64* %22, align 8, !dbg !1986
  %1567 = icmp ult i64 %1565, %1566, !dbg !1987
  %1568 = load i32, i32* @x.35
  %1569 = load i32, i32* @y.36
  %1570 = sub i32 %1568, 1
  %1571 = mul i32 %1568, %1570
  %1572 = urem i32 %1571, 2
  %1573 = icmp eq i32 %1572, 0
  %1574 = icmp slt i32 %1569, 10
  %1575 = or i1 %1573, %1574
  br i1 %1575, label %originalBBpart2498, label %originalBB496alteredBB

originalBBpart2498:                               ; preds = %originalBB496
  br i1 %1567, label %1576, label %1761, !dbg !1988

1576:                                             ; preds = %originalBBpart2498
  %1577 = load i32, i32* @x.35
  %1578 = load i32, i32* @y.36
  %1579 = sub i32 %1577, 1
  %1580 = mul i32 %1577, %1579
  %1581 = urem i32 %1580, 2
  %1582 = icmp eq i32 %1581, 0
  %1583 = icmp slt i32 %1578, 10
  %1584 = or i1 %1582, %1583
  br i1 %1584, label %originalBB500, label %originalBB500alteredBB

originalBB500:                                    ; preds = %1576, %originalBB500alteredBB
  %1585 = load i8*, i8** %21, align 8, !dbg !1989
  %1586 = load i64, i64* %28, align 8, !dbg !1990
  %1587 = add i64 %1586, 1, !dbg !1991
  %1588 = getelementptr inbounds i8, i8* %1585, i64 %1587, !dbg !1989
  %1589 = load i8, i8* %1588, align 1, !dbg !1989
  %1590 = sext i8 %1589 to i32, !dbg !1989
  %1591 = icmp sle i32 48, %1590, !dbg !1992
  %1592 = load i32, i32* @x.35
  %1593 = load i32, i32* @y.36
  %1594 = sub i32 %1592, 1
  %1595 = mul i32 %1592, %1594
  %1596 = urem i32 %1595, 2
  %1597 = icmp eq i32 %1596, 0
  %1598 = icmp slt i32 %1593, 10
  %1599 = or i1 %1597, %1598
  br i1 %1599, label %originalBBpart2513, label %originalBB500alteredBB

originalBBpart2513:                               ; preds = %originalBB500
  br i1 %1591, label %1600, label %1761, !dbg !1993

1600:                                             ; preds = %originalBBpart2513
  %1601 = load i32, i32* @x.35
  %1602 = load i32, i32* @y.36
  %1603 = sub i32 %1601, 1
  %1604 = mul i32 %1601, %1603
  %1605 = urem i32 %1604, 2
  %1606 = icmp eq i32 %1605, 0
  %1607 = icmp slt i32 %1602, 10
  %1608 = or i1 %1606, %1607
  br i1 %1608, label %originalBB515, label %originalBB515alteredBB

originalBB515:                                    ; preds = %1600, %originalBB515alteredBB
  %1609 = load i8*, i8** %21, align 8, !dbg !1994
  %1610 = load i64, i64* %28, align 8, !dbg !1995
  %1611 = add i64 %1610, 1, !dbg !1996
  %1612 = getelementptr inbounds i8, i8* %1609, i64 %1611, !dbg !1994
  %1613 = load i8, i8* %1612, align 1, !dbg !1994
  %1614 = sext i8 %1613 to i32, !dbg !1994
  %1615 = icmp sle i32 %1614, 57, !dbg !1997
  %1616 = load i32, i32* @x.35
  %1617 = load i32, i32* @y.36
  %1618 = sub i32 %1616, 1
  %1619 = mul i32 %1616, %1618
  %1620 = urem i32 %1619, 2
  %1621 = icmp eq i32 %1620, 0
  %1622 = icmp slt i32 %1617, 10
  %1623 = or i1 %1621, %1622
  br i1 %1623, label %originalBBpart2530, label %originalBB515alteredBB

originalBBpart2530:                               ; preds = %originalBB515
  br i1 %1615, label %1624, label %1761, !dbg !1998

1624:                                             ; preds = %originalBBpart2530
  %1625 = load i32, i32* @x.35
  %1626 = load i32, i32* @y.36
  %1627 = sub i32 %1625, 1
  %1628 = mul i32 %1625, %1627
  %1629 = urem i32 %1628, 2
  %1630 = icmp eq i32 %1629, 0
  %1631 = icmp slt i32 %1626, 10
  %1632 = or i1 %1630, %1631
  br i1 %1632, label %originalBB532, label %originalBB532alteredBB

originalBB532:                                    ; preds = %1624, %originalBB532alteredBB
  %1633 = load i32, i32* @x.35
  %1634 = load i32, i32* @y.36
  %1635 = sub i32 %1633, 1
  %1636 = mul i32 %1633, %1635
  %1637 = urem i32 %1636, 2
  %1638 = icmp eq i32 %1637, 0
  %1639 = icmp slt i32 %1634, 10
  %1640 = or i1 %1638, %1639
  br i1 %1640, label %originalBBpart2534, label %originalBB532alteredBB

originalBBpart2534:                               ; preds = %originalBB532
  br label %1641, !dbg !1999

1641:                                             ; preds = %originalBBpart2534
  %1642 = load i64, i64* %29, align 8, !dbg !2001
  %1643 = load i64, i64* %20, align 8, !dbg !2001
  %1644 = icmp ult i64 %1642, %1643, !dbg !2001
  br i1 %1644, label %1645, label %1665, !dbg !2004

1645:                                             ; preds = %1641
  %1646 = load i32, i32* @x.35
  %1647 = load i32, i32* @y.36
  %1648 = sub i32 %1646, 1
  %1649 = mul i32 %1646, %1648
  %1650 = urem i32 %1649, 2
  %1651 = icmp eq i32 %1650, 0
  %1652 = icmp slt i32 %1647, 10
  %1653 = or i1 %1651, %1652
  br i1 %1653, label %originalBB536, label %originalBB536alteredBB

originalBB536:                                    ; preds = %1645, %originalBB536alteredBB
  %1654 = load i8*, i8** %19, align 8, !dbg !2001
  %1655 = load i64, i64* %29, align 8, !dbg !2001
  %1656 = getelementptr inbounds i8, i8* %1654, i64 %1655, !dbg !2001
  store i8 48, i8* %1656, align 1, !dbg !2001
  %1657 = load i32, i32* @x.35
  %1658 = load i32, i32* @y.36
  %1659 = sub i32 %1657, 1
  %1660 = mul i32 %1657, %1659
  %1661 = urem i32 %1660, 2
  %1662 = icmp eq i32 %1661, 0
  %1663 = icmp slt i32 %1658, 10
  %1664 = or i1 %1662, %1663
  br i1 %1664, label %originalBBpart2538, label %originalBB536alteredBB

originalBBpart2538:                               ; preds = %originalBB536
  br label %1665, !dbg !2001

1665:                                             ; preds = %originalBBpart2538, %1641
  %1666 = load i32, i32* @x.35
  %1667 = load i32, i32* @y.36
  %1668 = sub i32 %1666, 1
  %1669 = mul i32 %1666, %1668
  %1670 = urem i32 %1669, 2
  %1671 = icmp eq i32 %1670, 0
  %1672 = icmp slt i32 %1667, 10
  %1673 = or i1 %1671, %1672
  br i1 %1673, label %originalBB540, label %originalBB540alteredBB

originalBB540:                                    ; preds = %1665, %originalBB540alteredBB
  %1674 = load i64, i64* %29, align 8, !dbg !2004
  %1675 = add i64 %1674, 1, !dbg !2004
  store i64 %1675, i64* %29, align 8, !dbg !2004
  %1676 = load i32, i32* @x.35
  %1677 = load i32, i32* @y.36
  %1678 = sub i32 %1676, 1
  %1679 = mul i32 %1676, %1678
  %1680 = urem i32 %1679, 2
  %1681 = icmp eq i32 %1680, 0
  %1682 = icmp slt i32 %1677, 10
  %1683 = or i1 %1681, %1682
  br i1 %1683, label %originalBBpart2550, label %originalBB540alteredBB

originalBBpart2550:                               ; preds = %originalBB540
  br label %1684, !dbg !2004

1684:                                             ; preds = %originalBBpart2550
  %1685 = load i32, i32* @x.35
  %1686 = load i32, i32* @y.36
  %1687 = sub i32 %1685, 1
  %1688 = mul i32 %1685, %1687
  %1689 = urem i32 %1688, 2
  %1690 = icmp eq i32 %1689, 0
  %1691 = icmp slt i32 %1686, 10
  %1692 = or i1 %1690, %1691
  br i1 %1692, label %originalBB552, label %originalBB552alteredBB

originalBB552:                                    ; preds = %1684, %originalBB552alteredBB
  %1693 = load i32, i32* @x.35
  %1694 = load i32, i32* @y.36
  %1695 = sub i32 %1693, 1
  %1696 = mul i32 %1693, %1695
  %1697 = urem i32 %1696, 2
  %1698 = icmp eq i32 %1697, 0
  %1699 = icmp slt i32 %1694, 10
  %1700 = or i1 %1698, %1699
  br i1 %1700, label %originalBBpart2554, label %originalBB552alteredBB

originalBBpart2554:                               ; preds = %originalBB552
  br label %1701, !dbg !2005

1701:                                             ; preds = %originalBBpart2554
  %1702 = load i64, i64* %29, align 8, !dbg !2006
  %1703 = load i64, i64* %20, align 8, !dbg !2006
  %1704 = icmp ult i64 %1702, %1703, !dbg !2006
  br i1 %1704, label %1705, label %1725, !dbg !2009

1705:                                             ; preds = %1701
  %1706 = load i32, i32* @x.35
  %1707 = load i32, i32* @y.36
  %1708 = sub i32 %1706, 1
  %1709 = mul i32 %1706, %1708
  %1710 = urem i32 %1709, 2
  %1711 = icmp eq i32 %1710, 0
  %1712 = icmp slt i32 %1707, 10
  %1713 = or i1 %1711, %1712
  br i1 %1713, label %originalBB556, label %originalBB556alteredBB

originalBB556:                                    ; preds = %1705, %originalBB556alteredBB
  %1714 = load i8*, i8** %19, align 8, !dbg !2006
  %1715 = load i64, i64* %29, align 8, !dbg !2006
  %1716 = getelementptr inbounds i8, i8* %1714, i64 %1715, !dbg !2006
  store i8 48, i8* %1716, align 1, !dbg !2006
  %1717 = load i32, i32* @x.35
  %1718 = load i32, i32* @y.36
  %1719 = sub i32 %1717, 1
  %1720 = mul i32 %1717, %1719
  %1721 = urem i32 %1720, 2
  %1722 = icmp eq i32 %1721, 0
  %1723 = icmp slt i32 %1718, 10
  %1724 = or i1 %1722, %1723
  br i1 %1724, label %originalBBpart2558, label %originalBB556alteredBB

originalBBpart2558:                               ; preds = %originalBB556
  br label %1725, !dbg !2006

1725:                                             ; preds = %originalBBpart2558, %1701
  %1726 = load i32, i32* @x.35
  %1727 = load i32, i32* @y.36
  %1728 = sub i32 %1726, 1
  %1729 = mul i32 %1726, %1728
  %1730 = urem i32 %1729, 2
  %1731 = icmp eq i32 %1730, 0
  %1732 = icmp slt i32 %1727, 10
  %1733 = or i1 %1731, %1732
  br i1 %1733, label %originalBB560, label %originalBB560alteredBB

originalBB560:                                    ; preds = %1725, %originalBB560alteredBB
  %1734 = load i64, i64* %29, align 8, !dbg !2009
  %1735 = add i64 %1734, 1, !dbg !2009
  store i64 %1735, i64* %29, align 8, !dbg !2009
  %1736 = load i32, i32* @x.35
  %1737 = load i32, i32* @y.36
  %1738 = sub i32 %1736, 1
  %1739 = mul i32 %1736, %1738
  %1740 = urem i32 %1739, 2
  %1741 = icmp eq i32 %1740, 0
  %1742 = icmp slt i32 %1737, 10
  %1743 = or i1 %1741, %1742
  br i1 %1743, label %originalBBpart2567, label %originalBB560alteredBB

originalBBpart2567:                               ; preds = %originalBB560
  br label %1744, !dbg !2009

1744:                                             ; preds = %originalBBpart2567
  %1745 = load i32, i32* @x.35
  %1746 = load i32, i32* @y.36
  %1747 = sub i32 %1745, 1
  %1748 = mul i32 %1745, %1747
  %1749 = urem i32 %1748, 2
  %1750 = icmp eq i32 %1749, 0
  %1751 = icmp slt i32 %1746, 10
  %1752 = or i1 %1750, %1751
  br i1 %1752, label %originalBB569, label %originalBB569alteredBB

originalBB569:                                    ; preds = %1744, %originalBB569alteredBB
  %1753 = load i32, i32* @x.35
  %1754 = load i32, i32* @y.36
  %1755 = sub i32 %1753, 1
  %1756 = mul i32 %1753, %1755
  %1757 = urem i32 %1756, 2
  %1758 = icmp eq i32 %1757, 0
  %1759 = icmp slt i32 %1754, 10
  %1760 = or i1 %1758, %1759
  br i1 %1760, label %originalBBpart2571, label %originalBB569alteredBB

originalBBpart2571:                               ; preds = %originalBB569
  br label %1761, !dbg !2010

1761:                                             ; preds = %originalBBpart2571, %originalBBpart2530, %originalBBpart2513, %originalBBpart2498, %originalBBpart2494
  %1762 = load i32, i32* @x.35
  %1763 = load i32, i32* @y.36
  %1764 = sub i32 %1762, 1
  %1765 = mul i32 %1762, %1764
  %1766 = urem i32 %1765, 2
  %1767 = icmp eq i32 %1766, 0
  %1768 = icmp slt i32 %1763, 10
  %1769 = or i1 %1767, %1768
  br i1 %1769, label %originalBB573, label %originalBB573alteredBB

originalBB573:                                    ; preds = %1761, %originalBB573alteredBB
  store i8 48, i8* %39, align 1, !dbg !2011
  %1770 = load i32, i32* @x.35
  %1771 = load i32, i32* @y.36
  %1772 = sub i32 %1770, 1
  %1773 = mul i32 %1770, %1772
  %1774 = urem i32 %1773, 2
  %1775 = icmp eq i32 %1774, 0
  %1776 = icmp slt i32 %1771, 10
  %1777 = or i1 %1775, %1776
  br i1 %1777, label %originalBBpart2575, label %originalBB573alteredBB

originalBBpart2575:                               ; preds = %originalBB573
  br label %1816, !dbg !2012

1778:                                             ; preds = %originalBBpart2259
  %1779 = load i32, i32* @x.35
  %1780 = load i32, i32* @y.36
  %1781 = sub i32 %1779, 1
  %1782 = mul i32 %1779, %1781
  %1783 = urem i32 %1782, 2
  %1784 = icmp eq i32 %1783, 0
  %1785 = icmp slt i32 %1780, 10
  %1786 = or i1 %1784, %1785
  br i1 %1786, label %originalBB577, label %originalBB577alteredBB

originalBB577:                                    ; preds = %1778, %originalBB577alteredBB
  %1787 = load i32, i32* %24, align 4, !dbg !2013
  %1788 = and i32 %1787, 1, !dbg !2015
  %1789 = icmp ne i32 %1788, 0, !dbg !2015
  %1790 = load i32, i32* @x.35
  %1791 = load i32, i32* @y.36
  %1792 = sub i32 %1790, 1
  %1793 = mul i32 %1790, %1792
  %1794 = urem i32 %1793, 2
  %1795 = icmp eq i32 %1794, 0
  %1796 = icmp slt i32 %1791, 10
  %1797 = or i1 %1795, %1796
  br i1 %1797, label %originalBBpart2586, label %originalBB577alteredBB

originalBBpart2586:                               ; preds = %originalBB577
  br i1 %1789, label %1798, label %1815, !dbg !2016

1798:                                             ; preds = %originalBBpart2586
  %1799 = load i32, i32* @x.35
  %1800 = load i32, i32* @y.36
  %1801 = sub i32 %1799, 1
  %1802 = mul i32 %1799, %1801
  %1803 = urem i32 %1802, 2
  %1804 = icmp eq i32 %1803, 0
  %1805 = icmp slt i32 %1800, 10
  %1806 = or i1 %1804, %1805
  br i1 %1806, label %originalBB588, label %originalBB588alteredBB

originalBB588:                                    ; preds = %1798, %originalBB588alteredBB
  %1807 = load i32, i32* @x.35
  %1808 = load i32, i32* @y.36
  %1809 = sub i32 %1807, 1
  %1810 = mul i32 %1807, %1809
  %1811 = urem i32 %1810, 2
  %1812 = icmp eq i32 %1811, 0
  %1813 = icmp slt i32 %1808, 10
  %1814 = or i1 %1812, %1813
  br i1 %1814, label %originalBBpart2590, label %originalBB588alteredBB

originalBBpart2590:                               ; preds = %originalBB588
  br label %6208, !dbg !2017

1815:                                             ; preds = %originalBBpart2586
  br label %1816

1816:                                             ; preds = %1815, %originalBBpart2575
  %1817 = load i32, i32* @x.35
  %1818 = load i32, i32* @y.36
  %1819 = sub i32 %1817, 1
  %1820 = mul i32 %1817, %1819
  %1821 = urem i32 %1820, 2
  %1822 = icmp eq i32 %1821, 0
  %1823 = icmp slt i32 %1818, 10
  %1824 = or i1 %1822, %1823
  br i1 %1824, label %originalBB592, label %originalBB592alteredBB

originalBB592:                                    ; preds = %1816, %originalBB592alteredBB
  %1825 = load i32, i32* @x.35
  %1826 = load i32, i32* @y.36
  %1827 = sub i32 %1825, 1
  %1828 = mul i32 %1825, %1827
  %1829 = urem i32 %1828, 2
  %1830 = icmp eq i32 %1829, 0
  %1831 = icmp slt i32 %1826, 10
  %1832 = or i1 %1830, %1831
  br i1 %1832, label %originalBBpart2594, label %originalBB592alteredBB

originalBBpart2594:                               ; preds = %originalBB592
  br label %5247, !dbg !2018

1833:                                             ; preds = %originalBBpart2255
  %1834 = load i32, i32* @x.35
  %1835 = load i32, i32* @y.36
  %1836 = sub i32 %1834, 1
  %1837 = mul i32 %1834, %1836
  %1838 = urem i32 %1837, 2
  %1839 = icmp eq i32 %1838, 0
  %1840 = icmp slt i32 %1835, 10
  %1841 = or i1 %1839, %1840
  br i1 %1841, label %originalBB596, label %originalBB596alteredBB

originalBB596:                                    ; preds = %1833, %originalBB596alteredBB
  %1842 = load i32, i32* %23, align 4, !dbg !2019
  %1843 = load i32, i32* @x.35
  %1844 = load i32, i32* @y.36
  %1845 = sub i32 %1843, 1
  %1846 = mul i32 %1843, %1845
  %1847 = urem i32 %1846, 2
  %1848 = icmp eq i32 %1847, 0
  %1849 = icmp slt i32 %1844, 10
  %1850 = or i1 %1848, %1849
  br i1 %1850, label %originalBBpart2598, label %originalBB596alteredBB

originalBBpart2598:                               ; preds = %originalBB596
  switch i32 %1842, label %2497 [
    i32 2, label %1851
    i32 5, label %1904
  ], !dbg !2020

1851:                                             ; preds = %originalBBpart2598
  %1852 = load i32, i32* @x.35
  %1853 = load i32, i32* @y.36
  %1854 = sub i32 %1852, 1
  %1855 = mul i32 %1852, %1854
  %1856 = urem i32 %1855, 2
  %1857 = icmp eq i32 %1856, 0
  %1858 = icmp slt i32 %1853, 10
  %1859 = or i1 %1857, %1858
  br i1 %1859, label %originalBB600, label %originalBB600alteredBB

originalBB600:                                    ; preds = %1851, %originalBB600alteredBB
  %1860 = load i8, i8* %35, align 1, !dbg !2021
  %1861 = trunc i8 %1860 to i1, !dbg !2021
  %1862 = load i32, i32* @x.35
  %1863 = load i32, i32* @y.36
  %1864 = sub i32 %1862, 1
  %1865 = mul i32 %1862, %1864
  %1866 = urem i32 %1865, 2
  %1867 = icmp eq i32 %1866, 0
  %1868 = icmp slt i32 %1863, 10
  %1869 = or i1 %1867, %1868
  br i1 %1869, label %originalBBpart2602, label %originalBB600alteredBB

originalBBpart2602:                               ; preds = %originalBB600
  br i1 %1861, label %1870, label %1887, !dbg !2024

1870:                                             ; preds = %originalBBpart2602
  %1871 = load i32, i32* @x.35
  %1872 = load i32, i32* @y.36
  %1873 = sub i32 %1871, 1
  %1874 = mul i32 %1871, %1873
  %1875 = urem i32 %1874, 2
  %1876 = icmp eq i32 %1875, 0
  %1877 = icmp slt i32 %1872, 10
  %1878 = or i1 %1876, %1877
  br i1 %1878, label %originalBB604, label %originalBB604alteredBB

originalBB604:                                    ; preds = %1870, %originalBB604alteredBB
  %1879 = load i32, i32* @x.35
  %1880 = load i32, i32* @y.36
  %1881 = sub i32 %1879, 1
  %1882 = mul i32 %1879, %1881
  %1883 = urem i32 %1882, 2
  %1884 = icmp eq i32 %1883, 0
  %1885 = icmp slt i32 %1880, 10
  %1886 = or i1 %1884, %1885
  br i1 %1886, label %originalBBpart2606, label %originalBB604alteredBB

originalBBpart2606:                               ; preds = %originalBB604
  br label %6709, !dbg !2025

1887:                                             ; preds = %originalBBpart2602
  %1888 = load i32, i32* @x.35
  %1889 = load i32, i32* @y.36
  %1890 = sub i32 %1888, 1
  %1891 = mul i32 %1888, %1890
  %1892 = urem i32 %1891, 2
  %1893 = icmp eq i32 %1892, 0
  %1894 = icmp slt i32 %1889, 10
  %1895 = or i1 %1893, %1894
  br i1 %1895, label %originalBB608, label %originalBB608alteredBB

originalBB608:                                    ; preds = %1887, %originalBB608alteredBB
  %1896 = load i32, i32* @x.35
  %1897 = load i32, i32* @y.36
  %1898 = sub i32 %1896, 1
  %1899 = mul i32 %1896, %1898
  %1900 = urem i32 %1899, 2
  %1901 = icmp eq i32 %1900, 0
  %1902 = icmp slt i32 %1897, 10
  %1903 = or i1 %1901, %1902
  br i1 %1903, label %originalBBpart2610, label %originalBB608alteredBB

originalBBpart2610:                               ; preds = %originalBB608
  br label %2514, !dbg !2026

1904:                                             ; preds = %originalBBpart2598
  %1905 = load i32, i32* @x.35
  %1906 = load i32, i32* @y.36
  %1907 = sub i32 %1905, 1
  %1908 = mul i32 %1905, %1907
  %1909 = urem i32 %1908, 2
  %1910 = icmp eq i32 %1909, 0
  %1911 = icmp slt i32 %1906, 10
  %1912 = or i1 %1910, %1911
  br i1 %1912, label %originalBB612, label %originalBB612alteredBB

originalBB612:                                    ; preds = %1904, %originalBB612alteredBB
  %1913 = load i32, i32* %24, align 4, !dbg !2027
  %1914 = and i32 %1913, 4, !dbg !2029
  %1915 = icmp ne i32 %1914, 0, !dbg !2029
  %1916 = load i32, i32* @x.35
  %1917 = load i32, i32* @y.36
  %1918 = sub i32 %1916, 1
  %1919 = mul i32 %1916, %1918
  %1920 = urem i32 %1919, 2
  %1921 = icmp eq i32 %1920, 0
  %1922 = icmp slt i32 %1917, 10
  %1923 = or i1 %1921, %1922
  br i1 %1923, label %originalBBpart2618, label %originalBB612alteredBB

originalBBpart2618:                               ; preds = %originalBB612
  br i1 %1915, label %1924, label %2480, !dbg !2030

1924:                                             ; preds = %originalBBpart2618
  %1925 = load i32, i32* @x.35
  %1926 = load i32, i32* @y.36
  %1927 = sub i32 %1925, 1
  %1928 = mul i32 %1925, %1927
  %1929 = urem i32 %1928, 2
  %1930 = icmp eq i32 %1929, 0
  %1931 = icmp slt i32 %1926, 10
  %1932 = or i1 %1930, %1931
  br i1 %1932, label %originalBB620, label %originalBB620alteredBB

originalBB620:                                    ; preds = %1924, %originalBB620alteredBB
  %1933 = load i64, i64* %28, align 8, !dbg !2031
  %1934 = add i64 %1933, 2, !dbg !2032
  %1935 = load i64, i64* %22, align 8, !dbg !2033
  %1936 = trunc i64 %1935 to i32
  %1937 = mul i32 %1936, -4
  %1938 = trunc i64 2 to i32
  %1939 = mul i32 %1938, 3
  %1940 = add i32 %1939, -5
  %1941 = mul i32 %1937, %1937
  %1942 = mul i32 %1940, %1940
  %1943 = add i32 %1941, %1942
  %1944 = mul i32 %1937, %1940
  %1945 = mul i32 %1944, 2
  %1946 = sub i32 %1943, %1945
  %1947 = mul i32 %1946, -2
  %1948 = add i32 %1947, -4
  %1949 = icmp ne i32 %1948, -2
  %1950 = load i32, i32* @x.35
  %1951 = load i32, i32* @y.36
  %1952 = sub i32 %1950, 1
  %1953 = mul i32 %1950, %1952
  %1954 = urem i32 %1953, 2
  %1955 = icmp eq i32 %1954, 0
  %1956 = icmp slt i32 %1951, 10
  %1957 = or i1 %1955, %1956
  br i1 %1957, label %originalBBpart2705, label %originalBB620alteredBB

originalBBpart2705:                               ; preds = %originalBB620
  br i1 %1949, label %1975, label %1958

1958:                                             ; preds = %originalBBpart2705
  %1959 = load i32, i32* @x.35
  %1960 = load i32, i32* @y.36
  %1961 = sub i32 %1959, 1
  %1962 = mul i32 %1959, %1961
  %1963 = urem i32 %1962, 2
  %1964 = icmp eq i32 %1963, 0
  %1965 = icmp slt i32 %1960, 10
  %1966 = or i1 %1964, %1965
  br i1 %1966, label %originalBB707, label %originalBB707alteredBB

originalBB707:                                    ; preds = %1958, %originalBB707alteredBB
  %1967 = load i32, i32* @x.35
  %1968 = load i32, i32* @y.36
  %1969 = sub i32 %1967, 1
  %1970 = mul i32 %1967, %1969
  %1971 = urem i32 %1970, 2
  %1972 = icmp eq i32 %1971, 0
  %1973 = icmp slt i32 %1968, 10
  %1974 = or i1 %1972, %1973
  br i1 %1974, label %originalBBpart2709, label %originalBB707alteredBB

originalBBpart2709:                               ; preds = %originalBB707
  ret i64 0

1975:                                             ; preds = %originalBBpart2705
  %1976 = icmp ult i64 %1934, %1935, !dbg !2034
  br i1 %1976, label %1977, label %2480, !dbg !2035

1977:                                             ; preds = %1975
  %1978 = load i32, i32* @x.35
  %1979 = load i32, i32* @y.36
  %1980 = sub i32 %1978, 1
  %1981 = mul i32 %1978, %1980
  %1982 = urem i32 %1981, 2
  %1983 = icmp eq i32 %1982, 0
  %1984 = icmp slt i32 %1979, 10
  %1985 = or i1 %1983, %1984
  br i1 %1985, label %originalBB711, label %originalBB711alteredBB

originalBB711:                                    ; preds = %1977, %originalBB711alteredBB
  %1986 = load i8*, i8** %21, align 8, !dbg !2036
  %1987 = load i64, i64* %28, align 8, !dbg !2037
  %1988 = add i64 %1987, 1, !dbg !2038
  %1989 = trunc i64 1 to i32
  %1990 = mul i32 %1989, 4
  %1991 = add i32 %1990, 3
  %1992 = trunc i64 %1987 to i32
  %1993 = mul i32 %1992, 2
  %1994 = add i32 %1993, 1
  %1995 = mul i32 %1991, %1991
  %1996 = mul i32 %1994, %1994
  %1997 = mul i32 %1996, 34
  %1998 = sub i32 %1995, %1997
  %1999 = mul i32 %1998, -2
  %2000 = add i32 %1999, -2
  %2001 = icmp ne i32 %2000, -4
  %2002 = load i32, i32* @x.35
  %2003 = load i32, i32* @y.36
  %2004 = sub i32 %2002, 1
  %2005 = mul i32 %2002, %2004
  %2006 = urem i32 %2005, 2
  %2007 = icmp eq i32 %2006, 0
  %2008 = icmp slt i32 %2003, 10
  %2009 = or i1 %2007, %2008
  br i1 %2009, label %originalBBpart2786, label %originalBB711alteredBB

originalBBpart2786:                               ; preds = %originalBB711
  br i1 %2001, label %2027, label %2010

2010:                                             ; preds = %originalBBpart2786
  %2011 = load i32, i32* @x.35
  %2012 = load i32, i32* @y.36
  %2013 = sub i32 %2011, 1
  %2014 = mul i32 %2011, %2013
  %2015 = urem i32 %2014, 2
  %2016 = icmp eq i32 %2015, 0
  %2017 = icmp slt i32 %2012, 10
  %2018 = or i1 %2016, %2017
  br i1 %2018, label %originalBB788, label %originalBB788alteredBB

originalBB788:                                    ; preds = %2010, %originalBB788alteredBB
  %2019 = load i32, i32* @x.35
  %2020 = load i32, i32* @y.36
  %2021 = sub i32 %2019, 1
  %2022 = mul i32 %2019, %2021
  %2023 = urem i32 %2022, 2
  %2024 = icmp eq i32 %2023, 0
  %2025 = icmp slt i32 %2020, 10
  %2026 = or i1 %2024, %2025
  br i1 %2026, label %originalBBpart2790, label %originalBB788alteredBB

originalBBpart2790:                               ; preds = %originalBB788
  ret i64 0

2027:                                             ; preds = %originalBBpart2786
  %2028 = load i32, i32* @x.35
  %2029 = load i32, i32* @y.36
  %2030 = sub i32 %2028, 1
  %2031 = mul i32 %2028, %2030
  %2032 = urem i32 %2031, 2
  %2033 = icmp eq i32 %2032, 0
  %2034 = icmp slt i32 %2029, 10
  %2035 = or i1 %2033, %2034
  br i1 %2035, label %originalBB792, label %originalBB792alteredBB

originalBB792:                                    ; preds = %2027, %originalBB792alteredBB
  %2036 = getelementptr inbounds i8, i8* %1986, i64 %1988, !dbg !2036
  %2037 = load i8, i8* %2036, align 1, !dbg !2036
  %2038 = sext i8 %2037 to i32, !dbg !2036
  %2039 = icmp eq i32 %2038, 63, !dbg !2039
  %2040 = load i32, i32* @x.35
  %2041 = load i32, i32* @y.36
  %2042 = sub i32 %2040, 1
  %2043 = mul i32 %2040, %2042
  %2044 = urem i32 %2043, 2
  %2045 = icmp eq i32 %2044, 0
  %2046 = icmp slt i32 %2041, 10
  %2047 = or i1 %2045, %2046
  br i1 %2047, label %originalBBpart2794, label %originalBB792alteredBB

originalBBpart2794:                               ; preds = %originalBB792
  br i1 %2039, label %2048, label %2480, !dbg !2040

2048:                                             ; preds = %originalBBpart2794
  %2049 = load i32, i32* @x.35
  %2050 = load i32, i32* @y.36
  %2051 = sub i32 %2049, 1
  %2052 = mul i32 %2049, %2051
  %2053 = urem i32 %2052, 2
  %2054 = icmp eq i32 %2053, 0
  %2055 = icmp slt i32 %2050, 10
  %2056 = or i1 %2054, %2055
  br i1 %2056, label %originalBB796, label %originalBB796alteredBB

originalBB796:                                    ; preds = %2048, %originalBB796alteredBB
  %2057 = load i8*, i8** %21, align 8, !dbg !2041
  %2058 = load i64, i64* %28, align 8, !dbg !2042
  %2059 = add i64 %2058, 2, !dbg !2043
  %2060 = getelementptr inbounds i8, i8* %2057, i64 %2059, !dbg !2041
  %2061 = load i8, i8* %2060, align 1, !dbg !2041
  %2062 = sext i8 %2061 to i32, !dbg !2041
  %2063 = load i32, i32* @x.35
  %2064 = load i32, i32* @y.36
  %2065 = sub i32 %2063, 1
  %2066 = mul i32 %2063, %2065
  %2067 = urem i32 %2066, 2
  %2068 = icmp eq i32 %2067, 0
  %2069 = icmp slt i32 %2064, 10
  %2070 = or i1 %2068, %2069
  br i1 %2070, label %originalBBpart2803, label %originalBB796alteredBB

originalBBpart2803:                               ; preds = %originalBB796
  switch i32 %2062, label %2446 [
    i32 33, label %2071
    i32 39, label %2071
    i32 40, label %2071
    i32 41, label %2071
    i32 45, label %2071
    i32 47, label %2071
    i32 60, label %2071
    i32 61, label %2071
    i32 62, label %2071
  ], !dbg !2044

2071:                                             ; preds = %originalBBpart2803, %originalBBpart2803, %originalBBpart2803, %originalBBpart2803, %originalBBpart2803, %originalBBpart2803, %originalBBpart2803, %originalBBpart2803, %originalBBpart2803
  %2072 = load i32, i32* @x.35
  %2073 = load i32, i32* @y.36
  %2074 = sub i32 %2072, 1
  %2075 = mul i32 %2072, %2074
  %2076 = urem i32 %2075, 2
  %2077 = icmp eq i32 %2076, 0
  %2078 = icmp slt i32 %2073, 10
  %2079 = or i1 %2077, %2078
  br i1 %2079, label %originalBB805, label %originalBB805alteredBB

originalBB805:                                    ; preds = %2071, %originalBB805alteredBB
  %2080 = load i8, i8* %35, align 1, !dbg !2045
  %2081 = trunc i8 %2080 to i1, !dbg !2045
  %2082 = load i32, i32* @x.35
  %2083 = load i32, i32* @y.36
  %2084 = sub i32 %2082, 1
  %2085 = mul i32 %2082, %2084
  %2086 = urem i32 %2085, 2
  %2087 = icmp eq i32 %2086, 0
  %2088 = icmp slt i32 %2083, 10
  %2089 = or i1 %2087, %2088
  br i1 %2089, label %originalBBpart2807, label %originalBB805alteredBB

originalBBpart2807:                               ; preds = %originalBB805
  br i1 %2081, label %2090, label %2107, !dbg !2048

2090:                                             ; preds = %originalBBpart2807
  %2091 = load i32, i32* @x.35
  %2092 = load i32, i32* @y.36
  %2093 = sub i32 %2091, 1
  %2094 = mul i32 %2091, %2093
  %2095 = urem i32 %2094, 2
  %2096 = icmp eq i32 %2095, 0
  %2097 = icmp slt i32 %2092, 10
  %2098 = or i1 %2096, %2097
  br i1 %2098, label %originalBB809, label %originalBB809alteredBB

originalBB809:                                    ; preds = %2090, %originalBB809alteredBB
  %2099 = load i32, i32* @x.35
  %2100 = load i32, i32* @y.36
  %2101 = sub i32 %2099, 1
  %2102 = mul i32 %2099, %2101
  %2103 = urem i32 %2102, 2
  %2104 = icmp eq i32 %2103, 0
  %2105 = icmp slt i32 %2100, 10
  %2106 = or i1 %2104, %2105
  br i1 %2106, label %originalBBpart2811, label %originalBB809alteredBB

originalBBpart2811:                               ; preds = %originalBB809
  br label %6709, !dbg !2049

2107:                                             ; preds = %originalBBpart2807
  %2108 = load i32, i32* @x.35
  %2109 = load i32, i32* @y.36
  %2110 = sub i32 %2108, 1
  %2111 = mul i32 %2108, %2110
  %2112 = urem i32 %2111, 2
  %2113 = icmp eq i32 %2112, 0
  %2114 = icmp slt i32 %2109, 10
  %2115 = or i1 %2113, %2114
  br i1 %2115, label %originalBB813, label %originalBB813alteredBB

originalBB813:                                    ; preds = %2107, %originalBB813alteredBB
  %2116 = load i8*, i8** %21, align 8, !dbg !2050
  %2117 = load i64, i64* %28, align 8, !dbg !2051
  %2118 = add i64 %2117, 2, !dbg !2052
  %2119 = getelementptr inbounds i8, i8* %2116, i64 %2118, !dbg !2050
  %2120 = load i8, i8* %2119, align 1, !dbg !2050
  store i8 %2120, i8* %39, align 1, !dbg !2053
  %2121 = load i64, i64* %28, align 8, !dbg !2054
  %2122 = add i64 %2121, 2, !dbg !2054
  store i64 %2122, i64* %28, align 8, !dbg !2054
  %2123 = load i32, i32* @x.35
  %2124 = load i32, i32* @y.36
  %2125 = sub i32 %2123, 1
  %2126 = mul i32 %2123, %2125
  %2127 = urem i32 %2126, 2
  %2128 = icmp eq i32 %2127, 0
  %2129 = icmp slt i32 %2124, 10
  %2130 = or i1 %2128, %2129
  br i1 %2130, label %originalBBpart2819, label %originalBB813alteredBB

originalBBpart2819:                               ; preds = %originalBB813
  br label %2131, !dbg !2055

2131:                                             ; preds = %originalBBpart2819
  %2132 = load i64, i64* %29, align 8, !dbg !2056
  %2133 = load i64, i64* %20, align 8, !dbg !2056
  %2134 = icmp ult i64 %2132, %2133, !dbg !2056
  br i1 %2134, label %2135, label %2155, !dbg !2059

2135:                                             ; preds = %2131
  %2136 = load i32, i32* @x.35
  %2137 = load i32, i32* @y.36
  %2138 = sub i32 %2136, 1
  %2139 = mul i32 %2136, %2138
  %2140 = urem i32 %2139, 2
  %2141 = icmp eq i32 %2140, 0
  %2142 = icmp slt i32 %2137, 10
  %2143 = or i1 %2141, %2142
  br i1 %2143, label %originalBB821, label %originalBB821alteredBB

originalBB821:                                    ; preds = %2135, %originalBB821alteredBB
  %2144 = load i8*, i8** %19, align 8, !dbg !2056
  %2145 = load i64, i64* %29, align 8, !dbg !2056
  %2146 = getelementptr inbounds i8, i8* %2144, i64 %2145, !dbg !2056
  store i8 63, i8* %2146, align 1, !dbg !2056
  %2147 = load i32, i32* @x.35
  %2148 = load i32, i32* @y.36
  %2149 = sub i32 %2147, 1
  %2150 = mul i32 %2147, %2149
  %2151 = urem i32 %2150, 2
  %2152 = icmp eq i32 %2151, 0
  %2153 = icmp slt i32 %2148, 10
  %2154 = or i1 %2152, %2153
  br i1 %2154, label %originalBBpart2823, label %originalBB821alteredBB

originalBBpart2823:                               ; preds = %originalBB821
  br label %2155, !dbg !2056

2155:                                             ; preds = %originalBBpart2823, %2131
  %2156 = load i32, i32* @x.35
  %2157 = load i32, i32* @y.36
  %2158 = sub i32 %2156, 1
  %2159 = mul i32 %2156, %2158
  %2160 = urem i32 %2159, 2
  %2161 = icmp eq i32 %2160, 0
  %2162 = icmp slt i32 %2157, 10
  %2163 = or i1 %2161, %2162
  br i1 %2163, label %originalBB825, label %originalBB825alteredBB

originalBB825:                                    ; preds = %2155, %originalBB825alteredBB
  %2164 = load i64, i64* %29, align 8, !dbg !2059
  %2165 = add i64 %2164, 1, !dbg !2059
  store i64 %2165, i64* %29, align 8, !dbg !2059
  %2166 = load i32, i32* @x.35
  %2167 = load i32, i32* @y.36
  %2168 = sub i32 %2166, 1
  %2169 = mul i32 %2166, %2168
  %2170 = urem i32 %2169, 2
  %2171 = icmp eq i32 %2170, 0
  %2172 = icmp slt i32 %2167, 10
  %2173 = or i1 %2171, %2172
  br i1 %2173, label %originalBBpart2836, label %originalBB825alteredBB

originalBBpart2836:                               ; preds = %originalBB825
  br label %2174, !dbg !2059

2174:                                             ; preds = %originalBBpart2836
  %2175 = load i32, i32* @x.35
  %2176 = load i32, i32* @y.36
  %2177 = sub i32 %2175, 1
  %2178 = mul i32 %2175, %2177
  %2179 = urem i32 %2178, 2
  %2180 = icmp eq i32 %2179, 0
  %2181 = icmp slt i32 %2176, 10
  %2182 = or i1 %2180, %2181
  br i1 %2182, label %originalBB838, label %originalBB838alteredBB

originalBB838:                                    ; preds = %2174, %originalBB838alteredBB
  %2183 = load i32, i32* @x.35
  %2184 = load i32, i32* @y.36
  %2185 = sub i32 %2183, 1
  %2186 = mul i32 %2183, %2185
  %2187 = urem i32 %2186, 2
  %2188 = icmp eq i32 %2187, 0
  %2189 = icmp slt i32 %2184, 10
  %2190 = or i1 %2188, %2189
  br i1 %2190, label %originalBBpart2840, label %originalBB838alteredBB

originalBBpart2840:                               ; preds = %originalBB838
  br label %2191, !dbg !2060

2191:                                             ; preds = %originalBBpart2840
  %2192 = load i32, i32* @x.35
  %2193 = load i32, i32* @y.36
  %2194 = sub i32 %2192, 1
  %2195 = mul i32 %2192, %2194
  %2196 = urem i32 %2195, 2
  %2197 = icmp eq i32 %2196, 0
  %2198 = icmp slt i32 %2193, 10
  %2199 = or i1 %2197, %2198
  br i1 %2199, label %originalBB842, label %originalBB842alteredBB

originalBB842:                                    ; preds = %2191, %originalBB842alteredBB
  %2200 = load i64, i64* %29, align 8, !dbg !2061
  %2201 = load i64, i64* %20, align 8, !dbg !2061
  %2202 = icmp ult i64 %2200, %2201, !dbg !2061
  %2203 = load i32, i32* @x.35
  %2204 = load i32, i32* @y.36
  %2205 = sub i32 %2203, 1
  %2206 = mul i32 %2203, %2205
  %2207 = urem i32 %2206, 2
  %2208 = icmp eq i32 %2207, 0
  %2209 = icmp slt i32 %2204, 10
  %2210 = or i1 %2208, %2209
  br i1 %2210, label %originalBBpart2844, label %originalBB842alteredBB

originalBBpart2844:                               ; preds = %originalBB842
  br i1 %2202, label %2211, label %2231, !dbg !2064

2211:                                             ; preds = %originalBBpart2844
  %2212 = load i32, i32* @x.35
  %2213 = load i32, i32* @y.36
  %2214 = sub i32 %2212, 1
  %2215 = mul i32 %2212, %2214
  %2216 = urem i32 %2215, 2
  %2217 = icmp eq i32 %2216, 0
  %2218 = icmp slt i32 %2213, 10
  %2219 = or i1 %2217, %2218
  br i1 %2219, label %originalBB846, label %originalBB846alteredBB

originalBB846:                                    ; preds = %2211, %originalBB846alteredBB
  %2220 = load i8*, i8** %19, align 8, !dbg !2061
  %2221 = load i64, i64* %29, align 8, !dbg !2061
  %2222 = getelementptr inbounds i8, i8* %2220, i64 %2221, !dbg !2061
  store i8 34, i8* %2222, align 1, !dbg !2061
  %2223 = load i32, i32* @x.35
  %2224 = load i32, i32* @y.36
  %2225 = sub i32 %2223, 1
  %2226 = mul i32 %2223, %2225
  %2227 = urem i32 %2226, 2
  %2228 = icmp eq i32 %2227, 0
  %2229 = icmp slt i32 %2224, 10
  %2230 = or i1 %2228, %2229
  br i1 %2230, label %originalBBpart2848, label %originalBB846alteredBB

originalBBpart2848:                               ; preds = %originalBB846
  br label %2231, !dbg !2061

2231:                                             ; preds = %originalBBpart2848, %originalBBpart2844
  %2232 = load i32, i32* @x.35
  %2233 = load i32, i32* @y.36
  %2234 = sub i32 %2232, 1
  %2235 = mul i32 %2232, %2234
  %2236 = urem i32 %2235, 2
  %2237 = icmp eq i32 %2236, 0
  %2238 = icmp slt i32 %2233, 10
  %2239 = or i1 %2237, %2238
  br i1 %2239, label %originalBB850, label %originalBB850alteredBB

originalBB850:                                    ; preds = %2231, %originalBB850alteredBB
  %2240 = load i64, i64* %29, align 8, !dbg !2064
  %2241 = add i64 %2240, 1, !dbg !2064
  %2242 = trunc i64 1 to i32
  %2243 = mul i32 %2242, -5
  %2244 = add i32 %2243, -5
  %2245 = mul i32 %2244, %2244
  %2246 = sub i32 %2245, %2244
  %2247 = srem i32 %2246, 2
  %2248 = mul i32 %2247, 5
  %2249 = add i32 %2248, 2
  %2250 = icmp eq i32 %2249, 2
  %2251 = load i32, i32* @x.35
  %2252 = load i32, i32* @y.36
  %2253 = sub i32 %2251, 1
  %2254 = mul i32 %2251, %2253
  %2255 = urem i32 %2254, 2
  %2256 = icmp eq i32 %2255, 0
  %2257 = icmp slt i32 %2252, 10
  %2258 = or i1 %2256, %2257
  br i1 %2258, label %originalBBpart2906, label %originalBB850alteredBB

originalBBpart2906:                               ; preds = %originalBB850
  br i1 %2250, label %2276, label %2259

2259:                                             ; preds = %originalBBpart2906
  %2260 = load i32, i32* @x.35
  %2261 = load i32, i32* @y.36
  %2262 = sub i32 %2260, 1
  %2263 = mul i32 %2260, %2262
  %2264 = urem i32 %2263, 2
  %2265 = icmp eq i32 %2264, 0
  %2266 = icmp slt i32 %2261, 10
  %2267 = or i1 %2265, %2266
  br i1 %2267, label %originalBB908, label %originalBB908alteredBB

originalBB908:                                    ; preds = %2259, %originalBB908alteredBB
  %2268 = load i32, i32* @x.35
  %2269 = load i32, i32* @y.36
  %2270 = sub i32 %2268, 1
  %2271 = mul i32 %2268, %2270
  %2272 = urem i32 %2271, 2
  %2273 = icmp eq i32 %2272, 0
  %2274 = icmp slt i32 %2269, 10
  %2275 = or i1 %2273, %2274
  br i1 %2275, label %originalBBpart2910, label %originalBB908alteredBB

originalBBpart2910:                               ; preds = %originalBB908
  ret i64 0

2276:                                             ; preds = %originalBBpart2906
  %2277 = load i32, i32* @x.35
  %2278 = load i32, i32* @y.36
  %2279 = sub i32 %2277, 1
  %2280 = mul i32 %2277, %2279
  %2281 = urem i32 %2280, 2
  %2282 = icmp eq i32 %2281, 0
  %2283 = icmp slt i32 %2278, 10
  %2284 = or i1 %2282, %2283
  br i1 %2284, label %originalBB912, label %originalBB912alteredBB

originalBB912:                                    ; preds = %2276, %originalBB912alteredBB
  store i64 %2241, i64* %29, align 8, !dbg !2064
  %2285 = load i32, i32* @x.35
  %2286 = load i32, i32* @y.36
  %2287 = sub i32 %2285, 1
  %2288 = mul i32 %2285, %2287
  %2289 = urem i32 %2288, 2
  %2290 = icmp eq i32 %2289, 0
  %2291 = icmp slt i32 %2286, 10
  %2292 = or i1 %2290, %2291
  br i1 %2292, label %originalBBpart2914, label %originalBB912alteredBB

originalBBpart2914:                               ; preds = %originalBB912
  br label %2293, !dbg !2064

2293:                                             ; preds = %originalBBpart2914
  %2294 = load i32, i32* @x.35
  %2295 = load i32, i32* @y.36
  %2296 = sub i32 %2294, 1
  %2297 = mul i32 %2294, %2296
  %2298 = urem i32 %2297, 2
  %2299 = icmp eq i32 %2298, 0
  %2300 = icmp slt i32 %2295, 10
  %2301 = or i1 %2299, %2300
  br i1 %2301, label %originalBB916, label %originalBB916alteredBB

originalBB916:                                    ; preds = %2293, %originalBB916alteredBB
  %2302 = load i32, i32* @x.35
  %2303 = load i32, i32* @y.36
  %2304 = sub i32 %2302, 1
  %2305 = mul i32 %2302, %2304
  %2306 = urem i32 %2305, 2
  %2307 = icmp eq i32 %2306, 0
  %2308 = icmp slt i32 %2303, 10
  %2309 = or i1 %2307, %2308
  br i1 %2309, label %originalBBpart2918, label %originalBB916alteredBB

originalBBpart2918:                               ; preds = %originalBB916
  br label %2310, !dbg !2065

2310:                                             ; preds = %originalBBpart2918
  %2311 = load i32, i32* @x.35
  %2312 = load i32, i32* @y.36
  %2313 = sub i32 %2311, 1
  %2314 = mul i32 %2311, %2313
  %2315 = urem i32 %2314, 2
  %2316 = icmp eq i32 %2315, 0
  %2317 = icmp slt i32 %2312, 10
  %2318 = or i1 %2316, %2317
  br i1 %2318, label %originalBB920, label %originalBB920alteredBB

originalBB920:                                    ; preds = %2310, %originalBB920alteredBB
  %2319 = load i64, i64* %29, align 8, !dbg !2066
  %2320 = load i64, i64* %20, align 8, !dbg !2066
  %2321 = icmp ult i64 %2319, %2320, !dbg !2066
  %2322 = load i32, i32* @x.35
  %2323 = load i32, i32* @y.36
  %2324 = sub i32 %2322, 1
  %2325 = mul i32 %2322, %2324
  %2326 = urem i32 %2325, 2
  %2327 = icmp eq i32 %2326, 0
  %2328 = icmp slt i32 %2323, 10
  %2329 = or i1 %2327, %2328
  br i1 %2329, label %originalBBpart2922, label %originalBB920alteredBB

originalBBpart2922:                               ; preds = %originalBB920
  br i1 %2321, label %2330, label %2350, !dbg !2069

2330:                                             ; preds = %originalBBpart2922
  %2331 = load i32, i32* @x.35
  %2332 = load i32, i32* @y.36
  %2333 = sub i32 %2331, 1
  %2334 = mul i32 %2331, %2333
  %2335 = urem i32 %2334, 2
  %2336 = icmp eq i32 %2335, 0
  %2337 = icmp slt i32 %2332, 10
  %2338 = or i1 %2336, %2337
  br i1 %2338, label %originalBB924, label %originalBB924alteredBB

originalBB924:                                    ; preds = %2330, %originalBB924alteredBB
  %2339 = load i8*, i8** %19, align 8, !dbg !2066
  %2340 = load i64, i64* %29, align 8, !dbg !2066
  %2341 = getelementptr inbounds i8, i8* %2339, i64 %2340, !dbg !2066
  store i8 34, i8* %2341, align 1, !dbg !2066
  %2342 = load i32, i32* @x.35
  %2343 = load i32, i32* @y.36
  %2344 = sub i32 %2342, 1
  %2345 = mul i32 %2342, %2344
  %2346 = urem i32 %2345, 2
  %2347 = icmp eq i32 %2346, 0
  %2348 = icmp slt i32 %2343, 10
  %2349 = or i1 %2347, %2348
  br i1 %2349, label %originalBBpart2926, label %originalBB924alteredBB

originalBBpart2926:                               ; preds = %originalBB924
  br label %2350, !dbg !2066

2350:                                             ; preds = %originalBBpart2926, %originalBBpart2922
  %2351 = load i32, i32* @x.35
  %2352 = load i32, i32* @y.36
  %2353 = sub i32 %2351, 1
  %2354 = mul i32 %2351, %2353
  %2355 = urem i32 %2354, 2
  %2356 = icmp eq i32 %2355, 0
  %2357 = icmp slt i32 %2352, 10
  %2358 = or i1 %2356, %2357
  br i1 %2358, label %originalBB928, label %originalBB928alteredBB

originalBB928:                                    ; preds = %2350, %originalBB928alteredBB
  %2359 = load i64, i64* %29, align 8, !dbg !2069
  %2360 = add i64 %2359, 1, !dbg !2069
  store i64 %2360, i64* %29, align 8, !dbg !2069
  %2361 = load i32, i32* @x.35
  %2362 = load i32, i32* @y.36
  %2363 = sub i32 %2361, 1
  %2364 = mul i32 %2361, %2363
  %2365 = urem i32 %2364, 2
  %2366 = icmp eq i32 %2365, 0
  %2367 = icmp slt i32 %2362, 10
  %2368 = or i1 %2366, %2367
  br i1 %2368, label %originalBBpart2937, label %originalBB928alteredBB

originalBBpart2937:                               ; preds = %originalBB928
  br label %2369, !dbg !2069

2369:                                             ; preds = %originalBBpart2937
  br label %2370, !dbg !2070

2370:                                             ; preds = %2369
  %2371 = load i32, i32* @x.35
  %2372 = load i32, i32* @y.36
  %2373 = sub i32 %2371, 1
  %2374 = mul i32 %2371, %2373
  %2375 = urem i32 %2374, 2
  %2376 = icmp eq i32 %2375, 0
  %2377 = icmp slt i32 %2372, 10
  %2378 = or i1 %2376, %2377
  br i1 %2378, label %originalBB939, label %originalBB939alteredBB

originalBB939:                                    ; preds = %2370, %originalBB939alteredBB
  %2379 = load i64, i64* %29, align 8, !dbg !2071
  %2380 = load i64, i64* %20, align 8, !dbg !2071
  %2381 = icmp ult i64 %2379, %2380, !dbg !2071
  %2382 = load i32, i32* @x.35
  %2383 = load i32, i32* @y.36
  %2384 = sub i32 %2382, 1
  %2385 = mul i32 %2382, %2384
  %2386 = urem i32 %2385, 2
  %2387 = icmp eq i32 %2386, 0
  %2388 = icmp slt i32 %2383, 10
  %2389 = or i1 %2387, %2388
  br i1 %2389, label %originalBBpart2941, label %originalBB939alteredBB

originalBBpart2941:                               ; preds = %originalBB939
  br i1 %2381, label %2390, label %2410, !dbg !2074

2390:                                             ; preds = %originalBBpart2941
  %2391 = load i32, i32* @x.35
  %2392 = load i32, i32* @y.36
  %2393 = sub i32 %2391, 1
  %2394 = mul i32 %2391, %2393
  %2395 = urem i32 %2394, 2
  %2396 = icmp eq i32 %2395, 0
  %2397 = icmp slt i32 %2392, 10
  %2398 = or i1 %2396, %2397
  br i1 %2398, label %originalBB943, label %originalBB943alteredBB

originalBB943:                                    ; preds = %2390, %originalBB943alteredBB
  %2399 = load i8*, i8** %19, align 8, !dbg !2071
  %2400 = load i64, i64* %29, align 8, !dbg !2071
  %2401 = getelementptr inbounds i8, i8* %2399, i64 %2400, !dbg !2071
  store i8 63, i8* %2401, align 1, !dbg !2071
  %2402 = load i32, i32* @x.35
  %2403 = load i32, i32* @y.36
  %2404 = sub i32 %2402, 1
  %2405 = mul i32 %2402, %2404
  %2406 = urem i32 %2405, 2
  %2407 = icmp eq i32 %2406, 0
  %2408 = icmp slt i32 %2403, 10
  %2409 = or i1 %2407, %2408
  br i1 %2409, label %originalBBpart2945, label %originalBB943alteredBB

originalBBpart2945:                               ; preds = %originalBB943
  br label %2410, !dbg !2071

2410:                                             ; preds = %originalBBpart2945, %originalBBpart2941
  %2411 = load i32, i32* @x.35
  %2412 = load i32, i32* @y.36
  %2413 = sub i32 %2411, 1
  %2414 = mul i32 %2411, %2413
  %2415 = urem i32 %2414, 2
  %2416 = icmp eq i32 %2415, 0
  %2417 = icmp slt i32 %2412, 10
  %2418 = or i1 %2416, %2417
  br i1 %2418, label %originalBB947, label %originalBB947alteredBB

originalBB947:                                    ; preds = %2410, %originalBB947alteredBB
  %2419 = load i64, i64* %29, align 8, !dbg !2074
  %2420 = add i64 %2419, 1, !dbg !2074
  store i64 %2420, i64* %29, align 8, !dbg !2074
  %2421 = load i32, i32* @x.35
  %2422 = load i32, i32* @y.36
  %2423 = sub i32 %2421, 1
  %2424 = mul i32 %2421, %2423
  %2425 = urem i32 %2424, 2
  %2426 = icmp eq i32 %2425, 0
  %2427 = icmp slt i32 %2422, 10
  %2428 = or i1 %2426, %2427
  br i1 %2428, label %originalBBpart2950, label %originalBB947alteredBB

originalBBpart2950:                               ; preds = %originalBB947
  br label %2429, !dbg !2074

2429:                                             ; preds = %originalBBpart2950
  %2430 = load i32, i32* @x.35
  %2431 = load i32, i32* @y.36
  %2432 = sub i32 %2430, 1
  %2433 = mul i32 %2430, %2432
  %2434 = urem i32 %2433, 2
  %2435 = icmp eq i32 %2434, 0
  %2436 = icmp slt i32 %2431, 10
  %2437 = or i1 %2435, %2436
  br i1 %2437, label %originalBB952, label %originalBB952alteredBB

originalBB952:                                    ; preds = %2429, %originalBB952alteredBB
  %2438 = load i32, i32* @x.35
  %2439 = load i32, i32* @y.36
  %2440 = sub i32 %2438, 1
  %2441 = mul i32 %2438, %2440
  %2442 = urem i32 %2441, 2
  %2443 = icmp eq i32 %2442, 0
  %2444 = icmp slt i32 %2439, 10
  %2445 = or i1 %2443, %2444
  br i1 %2445, label %originalBBpart2954, label %originalBB952alteredBB

originalBBpart2954:                               ; preds = %originalBB952
  br label %2463, !dbg !2075

2446:                                             ; preds = %originalBBpart2803
  %2447 = load i32, i32* @x.35
  %2448 = load i32, i32* @y.36
  %2449 = sub i32 %2447, 1
  %2450 = mul i32 %2447, %2449
  %2451 = urem i32 %2450, 2
  %2452 = icmp eq i32 %2451, 0
  %2453 = icmp slt i32 %2448, 10
  %2454 = or i1 %2452, %2453
  br i1 %2454, label %originalBB956, label %originalBB956alteredBB

originalBB956:                                    ; preds = %2446, %originalBB956alteredBB
  %2455 = load i32, i32* @x.35
  %2456 = load i32, i32* @y.36
  %2457 = sub i32 %2455, 1
  %2458 = mul i32 %2455, %2457
  %2459 = urem i32 %2458, 2
  %2460 = icmp eq i32 %2459, 0
  %2461 = icmp slt i32 %2456, 10
  %2462 = or i1 %2460, %2461
  br i1 %2462, label %originalBBpart2958, label %originalBB956alteredBB

originalBBpart2958:                               ; preds = %originalBB956
  br label %2463, !dbg !2076

2463:                                             ; preds = %originalBBpart2958, %originalBBpart2954
  %2464 = load i32, i32* @x.35
  %2465 = load i32, i32* @y.36
  %2466 = sub i32 %2464, 1
  %2467 = mul i32 %2464, %2466
  %2468 = urem i32 %2467, 2
  %2469 = icmp eq i32 %2468, 0
  %2470 = icmp slt i32 %2465, 10
  %2471 = or i1 %2469, %2470
  br i1 %2471, label %originalBB960, label %originalBB960alteredBB

originalBB960:                                    ; preds = %2463, %originalBB960alteredBB
  %2472 = load i32, i32* @x.35
  %2473 = load i32, i32* @y.36
  %2474 = sub i32 %2472, 1
  %2475 = mul i32 %2472, %2474
  %2476 = urem i32 %2475, 2
  %2477 = icmp eq i32 %2476, 0
  %2478 = icmp slt i32 %2473, 10
  %2479 = or i1 %2477, %2478
  br i1 %2479, label %originalBBpart2962, label %originalBB960alteredBB

originalBBpart2962:                               ; preds = %originalBB960
  br label %2480, !dbg !2077

2480:                                             ; preds = %originalBBpart2962, %originalBBpart2794, %1975, %originalBBpart2618
  %2481 = load i32, i32* @x.35
  %2482 = load i32, i32* @y.36
  %2483 = sub i32 %2481, 1
  %2484 = mul i32 %2481, %2483
  %2485 = urem i32 %2484, 2
  %2486 = icmp eq i32 %2485, 0
  %2487 = icmp slt i32 %2482, 10
  %2488 = or i1 %2486, %2487
  br i1 %2488, label %originalBB964, label %originalBB964alteredBB

originalBB964:                                    ; preds = %2480, %originalBB964alteredBB
  %2489 = load i32, i32* @x.35
  %2490 = load i32, i32* @y.36
  %2491 = sub i32 %2489, 1
  %2492 = mul i32 %2489, %2491
  %2493 = urem i32 %2492, 2
  %2494 = icmp eq i32 %2493, 0
  %2495 = icmp slt i32 %2490, 10
  %2496 = or i1 %2494, %2495
  br i1 %2496, label %originalBBpart2966, label %originalBB964alteredBB

originalBBpart2966:                               ; preds = %originalBB964
  br label %2514, !dbg !2078

2497:                                             ; preds = %originalBBpart2598
  %2498 = load i32, i32* @x.35
  %2499 = load i32, i32* @y.36
  %2500 = sub i32 %2498, 1
  %2501 = mul i32 %2498, %2500
  %2502 = urem i32 %2501, 2
  %2503 = icmp eq i32 %2502, 0
  %2504 = icmp slt i32 %2499, 10
  %2505 = or i1 %2503, %2504
  br i1 %2505, label %originalBB968, label %originalBB968alteredBB

originalBB968:                                    ; preds = %2497, %originalBB968alteredBB
  %2506 = load i32, i32* @x.35
  %2507 = load i32, i32* @y.36
  %2508 = sub i32 %2506, 1
  %2509 = mul i32 %2506, %2508
  %2510 = urem i32 %2509, 2
  %2511 = icmp eq i32 %2510, 0
  %2512 = icmp slt i32 %2507, 10
  %2513 = or i1 %2511, %2512
  br i1 %2513, label %originalBBpart2970, label %originalBB968alteredBB

originalBBpart2970:                               ; preds = %originalBB968
  br label %2514, !dbg !2079

2514:                                             ; preds = %originalBBpart2970, %originalBBpart2966, %originalBBpart2610
  %2515 = load i32, i32* @x.35
  %2516 = load i32, i32* @y.36
  %2517 = sub i32 %2515, 1
  %2518 = mul i32 %2515, %2517
  %2519 = urem i32 %2518, 2
  %2520 = icmp eq i32 %2519, 0
  %2521 = icmp slt i32 %2516, 10
  %2522 = or i1 %2520, %2521
  br i1 %2522, label %originalBB972, label %originalBB972alteredBB

originalBB972:                                    ; preds = %2514, %originalBB972alteredBB
  %2523 = load i32, i32* @x.35
  %2524 = load i32, i32* @y.36
  %2525 = sub i32 %2523, 1
  %2526 = mul i32 %2523, %2525
  %2527 = urem i32 %2526, 2
  %2528 = icmp eq i32 %2527, 0
  %2529 = icmp slt i32 %2524, 10
  %2530 = or i1 %2528, %2529
  br i1 %2530, label %originalBBpart2974, label %originalBB972alteredBB

originalBBpart2974:                               ; preds = %originalBB972
  br label %5247, !dbg !2080

2531:                                             ; preds = %originalBBpart2255
  %2532 = load i32, i32* @x.35
  %2533 = load i32, i32* @y.36
  %2534 = sub i32 %2532, 1
  %2535 = mul i32 %2532, %2534
  %2536 = urem i32 %2535, 2
  %2537 = icmp eq i32 %2536, 0
  %2538 = icmp slt i32 %2533, 10
  %2539 = or i1 %2537, %2538
  br i1 %2539, label %originalBB976, label %originalBB976alteredBB

originalBB976:                                    ; preds = %2531, %originalBB976alteredBB
  store i8 97, i8* %40, align 1, !dbg !2081
  %2540 = load i32, i32* @x.35
  %2541 = load i32, i32* @y.36
  %2542 = sub i32 %2540, 1
  %2543 = mul i32 %2540, %2542
  %2544 = urem i32 %2543, 2
  %2545 = icmp eq i32 %2544, 0
  %2546 = icmp slt i32 %2541, 10
  %2547 = or i1 %2545, %2546
  br i1 %2547, label %originalBBpart2978, label %originalBB976alteredBB

originalBBpart2978:                               ; preds = %originalBB976
  br label %2838, !dbg !2082

2548:                                             ; preds = %originalBBpart2255
  %2549 = load i32, i32* @x.35
  %2550 = load i32, i32* @y.36
  %2551 = sub i32 %2549, 1
  %2552 = mul i32 %2549, %2551
  %2553 = urem i32 %2552, 2
  %2554 = icmp eq i32 %2553, 0
  %2555 = icmp slt i32 %2550, 10
  %2556 = or i1 %2554, %2555
  br i1 %2556, label %originalBB980, label %originalBB980alteredBB

originalBB980:                                    ; preds = %2548, %originalBB980alteredBB
  store i8 98, i8* %40, align 1, !dbg !2083
  %2557 = load i32, i32* @x.35
  %2558 = load i32, i32* @y.36
  %2559 = sub i32 %2557, 1
  %2560 = mul i32 %2557, %2559
  %2561 = urem i32 %2560, 2
  %2562 = icmp eq i32 %2561, 0
  %2563 = icmp slt i32 %2558, 10
  %2564 = or i1 %2562, %2563
  br i1 %2564, label %originalBBpart2982, label %originalBB980alteredBB

originalBBpart2982:                               ; preds = %originalBB980
  br label %2838, !dbg !2084

2565:                                             ; preds = %originalBBpart2255
  %2566 = load i32, i32* @x.35
  %2567 = load i32, i32* @y.36
  %2568 = sub i32 %2566, 1
  %2569 = mul i32 %2566, %2568
  %2570 = urem i32 %2569, 2
  %2571 = icmp eq i32 %2570, 0
  %2572 = icmp slt i32 %2567, 10
  %2573 = or i1 %2571, %2572
  br i1 %2573, label %originalBB984, label %originalBB984alteredBB

originalBB984:                                    ; preds = %2565, %originalBB984alteredBB
  store i8 102, i8* %40, align 1, !dbg !2085
  %2574 = load i32, i32* @x.35
  %2575 = load i32, i32* @y.36
  %2576 = sub i32 %2574, 1
  %2577 = mul i32 %2574, %2576
  %2578 = urem i32 %2577, 2
  %2579 = icmp eq i32 %2578, 0
  %2580 = icmp slt i32 %2575, 10
  %2581 = or i1 %2579, %2580
  br i1 %2581, label %originalBBpart2986, label %originalBB984alteredBB

originalBBpart2986:                               ; preds = %originalBB984
  br label %2838, !dbg !2086

2582:                                             ; preds = %originalBBpart2255
  %2583 = load i32, i32* @x.35
  %2584 = load i32, i32* @y.36
  %2585 = sub i32 %2583, 1
  %2586 = mul i32 %2583, %2585
  %2587 = urem i32 %2586, 2
  %2588 = icmp eq i32 %2587, 0
  %2589 = icmp slt i32 %2584, 10
  %2590 = or i1 %2588, %2589
  br i1 %2590, label %originalBB988, label %originalBB988alteredBB

originalBB988:                                    ; preds = %2582, %originalBB988alteredBB
  store i8 110, i8* %40, align 1, !dbg !2087
  %2591 = load i32, i32* @x.35
  %2592 = load i32, i32* @y.36
  %2593 = sub i32 %2591, 1
  %2594 = mul i32 %2591, %2593
  %2595 = urem i32 %2594, 2
  %2596 = icmp eq i32 %2595, 0
  %2597 = icmp slt i32 %2592, 10
  %2598 = or i1 %2596, %2597
  br i1 %2598, label %originalBBpart2990, label %originalBB988alteredBB

originalBBpart2990:                               ; preds = %originalBB988
  br label %2782, !dbg !2088

2599:                                             ; preds = %originalBBpart2255
  %2600 = load i32, i32* @x.35
  %2601 = load i32, i32* @y.36
  %2602 = sub i32 %2600, 1
  %2603 = mul i32 %2600, %2602
  %2604 = urem i32 %2603, 2
  %2605 = icmp eq i32 %2604, 0
  %2606 = icmp slt i32 %2601, 10
  %2607 = or i1 %2605, %2606
  br i1 %2607, label %originalBB992, label %originalBB992alteredBB

originalBB992:                                    ; preds = %2599, %originalBB992alteredBB
  store i8 114, i8* %40, align 1, !dbg !2089
  %2608 = load i32, i32* @x.35
  %2609 = load i32, i32* @y.36
  %2610 = sub i32 %2608, 1
  %2611 = mul i32 %2608, %2610
  %2612 = urem i32 %2611, 2
  %2613 = icmp eq i32 %2612, 0
  %2614 = icmp slt i32 %2609, 10
  %2615 = or i1 %2613, %2614
  br i1 %2615, label %originalBBpart2994, label %originalBB992alteredBB

originalBBpart2994:                               ; preds = %originalBB992
  br label %2782, !dbg !2090

2616:                                             ; preds = %originalBBpart2255
  %2617 = load i32, i32* @x.35
  %2618 = load i32, i32* @y.36
  %2619 = sub i32 %2617, 1
  %2620 = mul i32 %2617, %2619
  %2621 = urem i32 %2620, 2
  %2622 = icmp eq i32 %2621, 0
  %2623 = icmp slt i32 %2618, 10
  %2624 = or i1 %2622, %2623
  br i1 %2624, label %originalBB996, label %originalBB996alteredBB

originalBB996:                                    ; preds = %2616, %originalBB996alteredBB
  store i8 116, i8* %40, align 1, !dbg !2091
  %2625 = load i32, i32* @x.35
  %2626 = load i32, i32* @y.36
  %2627 = sub i32 %2625, 1
  %2628 = mul i32 %2625, %2627
  %2629 = urem i32 %2628, 2
  %2630 = icmp eq i32 %2629, 0
  %2631 = icmp slt i32 %2626, 10
  %2632 = or i1 %2630, %2631
  br i1 %2632, label %originalBBpart2998, label %originalBB996alteredBB

originalBBpart2998:                               ; preds = %originalBB996
  br label %2782, !dbg !2092

2633:                                             ; preds = %originalBBpart2255
  %2634 = load i32, i32* @x.35
  %2635 = load i32, i32* @y.36
  %2636 = sub i32 %2634, 1
  %2637 = mul i32 %2634, %2636
  %2638 = urem i32 %2637, 2
  %2639 = icmp eq i32 %2638, 0
  %2640 = icmp slt i32 %2635, 10
  %2641 = or i1 %2639, %2640
  br i1 %2641, label %originalBB1000, label %originalBB1000alteredBB

originalBB1000:                                   ; preds = %2633, %originalBB1000alteredBB
  store i8 118, i8* %40, align 1, !dbg !2093
  %2642 = load i32, i32* @x.35
  %2643 = load i32, i32* @y.36
  %2644 = sub i32 %2642, 1
  %2645 = mul i32 %2642, %2644
  %2646 = urem i32 %2645, 2
  %2647 = icmp eq i32 %2646, 0
  %2648 = icmp slt i32 %2643, 10
  %2649 = or i1 %2647, %2648
  br i1 %2649, label %originalBBpart21002, label %originalBB1000alteredBB

originalBBpart21002:                              ; preds = %originalBB1000
  br label %2838, !dbg !2094

2650:                                             ; preds = %originalBBpart2255
  %2651 = load i32, i32* @x.35
  %2652 = load i32, i32* @y.36
  %2653 = sub i32 %2651, 1
  %2654 = mul i32 %2651, %2653
  %2655 = urem i32 %2654, 2
  %2656 = icmp eq i32 %2655, 0
  %2657 = icmp slt i32 %2652, 10
  %2658 = or i1 %2656, %2657
  br i1 %2658, label %originalBB1004, label %originalBB1004alteredBB

originalBB1004:                                   ; preds = %2650, %originalBB1004alteredBB
  %2659 = load i8, i8* %39, align 1, !dbg !2095
  store i8 %2659, i8* %40, align 1, !dbg !2096
  %2660 = load i32, i32* %23, align 4, !dbg !2097
  %2661 = icmp eq i32 %2660, 2, !dbg !2099
  %2662 = load i32, i32* @x.35
  %2663 = load i32, i32* @y.36
  %2664 = sub i32 %2662, 1
  %2665 = mul i32 %2662, %2664
  %2666 = urem i32 %2665, 2
  %2667 = icmp eq i32 %2666, 0
  %2668 = icmp slt i32 %2663, 10
  %2669 = or i1 %2667, %2668
  br i1 %2669, label %originalBBpart21006, label %originalBB1004alteredBB

originalBBpart21006:                              ; preds = %originalBB1004
  br i1 %2661, label %2670, label %2707, !dbg !2100

2670:                                             ; preds = %originalBBpart21006
  %2671 = load i32, i32* @x.35
  %2672 = load i32, i32* @y.36
  %2673 = sub i32 %2671, 1
  %2674 = mul i32 %2671, %2673
  %2675 = urem i32 %2674, 2
  %2676 = icmp eq i32 %2675, 0
  %2677 = icmp slt i32 %2672, 10
  %2678 = or i1 %2676, %2677
  br i1 %2678, label %originalBB1008, label %originalBB1008alteredBB

originalBB1008:                                   ; preds = %2670, %originalBB1008alteredBB
  %2679 = load i8, i8* %35, align 1, !dbg !2101
  %2680 = trunc i8 %2679 to i1, !dbg !2101
  %2681 = load i32, i32* @x.35
  %2682 = load i32, i32* @y.36
  %2683 = sub i32 %2681, 1
  %2684 = mul i32 %2681, %2683
  %2685 = urem i32 %2684, 2
  %2686 = icmp eq i32 %2685, 0
  %2687 = icmp slt i32 %2682, 10
  %2688 = or i1 %2686, %2687
  br i1 %2688, label %originalBBpart21010, label %originalBB1008alteredBB

originalBBpart21010:                              ; preds = %originalBB1008
  br i1 %2680, label %2689, label %2706, !dbg !2104

2689:                                             ; preds = %originalBBpart21010
  %2690 = load i32, i32* @x.35
  %2691 = load i32, i32* @y.36
  %2692 = sub i32 %2690, 1
  %2693 = mul i32 %2690, %2692
  %2694 = urem i32 %2693, 2
  %2695 = icmp eq i32 %2694, 0
  %2696 = icmp slt i32 %2691, 10
  %2697 = or i1 %2695, %2696
  br i1 %2697, label %originalBB1012, label %originalBB1012alteredBB

originalBB1012:                                   ; preds = %2689, %originalBB1012alteredBB
  %2698 = load i32, i32* @x.35
  %2699 = load i32, i32* @y.36
  %2700 = sub i32 %2698, 1
  %2701 = mul i32 %2698, %2700
  %2702 = urem i32 %2701, 2
  %2703 = icmp eq i32 %2702, 0
  %2704 = icmp slt i32 %2699, 10
  %2705 = or i1 %2703, %2704
  br i1 %2705, label %originalBBpart21014, label %originalBB1012alteredBB

originalBBpart21014:                              ; preds = %originalBB1012
  br label %6709, !dbg !2105

2706:                                             ; preds = %originalBBpart21010
  br label %5804, !dbg !2106

2707:                                             ; preds = %originalBBpart21006
  %2708 = load i32, i32* @x.35
  %2709 = load i32, i32* @y.36
  %2710 = sub i32 %2708, 1
  %2711 = mul i32 %2708, %2710
  %2712 = urem i32 %2711, 2
  %2713 = icmp eq i32 %2712, 0
  %2714 = icmp slt i32 %2709, 10
  %2715 = or i1 %2713, %2714
  br i1 %2715, label %originalBB1016, label %originalBB1016alteredBB

originalBB1016:                                   ; preds = %2707, %originalBB1016alteredBB
  %2716 = load i8, i8* %33, align 1, !dbg !2107
  %2717 = trunc i8 %2716 to i1, !dbg !2107
  %2718 = load i32, i32* @x.35
  %2719 = load i32, i32* @y.36
  %2720 = sub i32 %2718, 1
  %2721 = mul i32 %2718, %2720
  %2722 = urem i32 %2721, 2
  %2723 = icmp eq i32 %2722, 0
  %2724 = icmp slt i32 %2719, 10
  %2725 = or i1 %2723, %2724
  br i1 %2725, label %originalBBpart21018, label %originalBB1016alteredBB

originalBBpart21018:                              ; preds = %originalBB1016
  br i1 %2717, label %2726, label %2765, !dbg !2109

2726:                                             ; preds = %originalBBpart21018
  %2727 = load i32, i32* @x.35
  %2728 = load i32, i32* @y.36
  %2729 = sub i32 %2727, 1
  %2730 = mul i32 %2727, %2729
  %2731 = urem i32 %2730, 2
  %2732 = icmp eq i32 %2731, 0
  %2733 = icmp slt i32 %2728, 10
  %2734 = or i1 %2732, %2733
  br i1 %2734, label %originalBB1020, label %originalBB1020alteredBB

originalBB1020:                                   ; preds = %2726, %originalBB1020alteredBB
  %2735 = load i8, i8* %35, align 1, !dbg !2110
  %2736 = trunc i8 %2735 to i1, !dbg !2110
  %2737 = load i32, i32* @x.35
  %2738 = load i32, i32* @y.36
  %2739 = sub i32 %2737, 1
  %2740 = mul i32 %2737, %2739
  %2741 = urem i32 %2740, 2
  %2742 = icmp eq i32 %2741, 0
  %2743 = icmp slt i32 %2738, 10
  %2744 = or i1 %2742, %2743
  br i1 %2744, label %originalBBpart21022, label %originalBB1020alteredBB

originalBBpart21022:                              ; preds = %originalBB1020
  br i1 %2736, label %2745, label %2765, !dbg !2111

2745:                                             ; preds = %originalBBpart21022
  %2746 = load i64, i64* %32, align 8, !dbg !2112
  %2747 = icmp ne i64 %2746, 0, !dbg !2112
  br i1 %2747, label %2748, label %2765, !dbg !2113

2748:                                             ; preds = %2745
  %2749 = load i32, i32* @x.35
  %2750 = load i32, i32* @y.36
  %2751 = sub i32 %2749, 1
  %2752 = mul i32 %2749, %2751
  %2753 = urem i32 %2752, 2
  %2754 = icmp eq i32 %2753, 0
  %2755 = icmp slt i32 %2750, 10
  %2756 = or i1 %2754, %2755
  br i1 %2756, label %originalBB1024, label %originalBB1024alteredBB

originalBB1024:                                   ; preds = %2748, %originalBB1024alteredBB
  %2757 = load i32, i32* @x.35
  %2758 = load i32, i32* @y.36
  %2759 = sub i32 %2757, 1
  %2760 = mul i32 %2757, %2759
  %2761 = urem i32 %2760, 2
  %2762 = icmp eq i32 %2761, 0
  %2763 = icmp slt i32 %2758, 10
  %2764 = or i1 %2762, %2763
  br i1 %2764, label %originalBBpart21026, label %originalBB1024alteredBB

originalBBpart21026:                              ; preds = %originalBB1024
  br label %5804, !dbg !2114

2765:                                             ; preds = %2745, %originalBBpart21022, %originalBBpart21018
  %2766 = load i32, i32* @x.35
  %2767 = load i32, i32* @y.36
  %2768 = sub i32 %2766, 1
  %2769 = mul i32 %2766, %2768
  %2770 = urem i32 %2769, 2
  %2771 = icmp eq i32 %2770, 0
  %2772 = icmp slt i32 %2767, 10
  %2773 = or i1 %2771, %2772
  br i1 %2773, label %originalBB1028, label %originalBB1028alteredBB

originalBB1028:                                   ; preds = %2765, %originalBB1028alteredBB
  %2774 = load i32, i32* @x.35
  %2775 = load i32, i32* @y.36
  %2776 = sub i32 %2774, 1
  %2777 = mul i32 %2774, %2776
  %2778 = urem i32 %2777, 2
  %2779 = icmp eq i32 %2778, 0
  %2780 = icmp slt i32 %2775, 10
  %2781 = or i1 %2779, %2780
  br i1 %2781, label %originalBBpart21030, label %originalBB1028alteredBB

originalBBpart21030:                              ; preds = %originalBB1028
  br label %2782, !dbg !2112

2782:                                             ; preds = %originalBBpart21030, %originalBBpart2998, %originalBBpart2994, %originalBBpart2990
  call void @llvm.dbg.label(metadata !2115), !dbg !2116
  %2783 = load i32, i32* %23, align 4, !dbg !2117
  %2784 = icmp eq i32 %2783, 2, !dbg !2119
  br i1 %2784, label %2785, label %2821, !dbg !2120

2785:                                             ; preds = %2782
  %2786 = load i32, i32* @x.35
  %2787 = load i32, i32* @y.36
  %2788 = sub i32 %2786, 1
  %2789 = mul i32 %2786, %2788
  %2790 = urem i32 %2789, 2
  %2791 = icmp eq i32 %2790, 0
  %2792 = icmp slt i32 %2787, 10
  %2793 = or i1 %2791, %2792
  br i1 %2793, label %originalBB1032, label %originalBB1032alteredBB

originalBB1032:                                   ; preds = %2785, %originalBB1032alteredBB
  %2794 = load i8, i8* %35, align 1, !dbg !2121
  %2795 = trunc i8 %2794 to i1, !dbg !2121
  %2796 = load i32, i32* @x.35
  %2797 = load i32, i32* @y.36
  %2798 = sub i32 %2796, 1
  %2799 = mul i32 %2796, %2798
  %2800 = urem i32 %2799, 2
  %2801 = icmp eq i32 %2800, 0
  %2802 = icmp slt i32 %2797, 10
  %2803 = or i1 %2801, %2802
  br i1 %2803, label %originalBBpart21034, label %originalBB1032alteredBB

originalBBpart21034:                              ; preds = %originalBB1032
  br i1 %2795, label %2804, label %2821, !dbg !2122

2804:                                             ; preds = %originalBBpart21034
  %2805 = load i32, i32* @x.35
  %2806 = load i32, i32* @y.36
  %2807 = sub i32 %2805, 1
  %2808 = mul i32 %2805, %2807
  %2809 = urem i32 %2808, 2
  %2810 = icmp eq i32 %2809, 0
  %2811 = icmp slt i32 %2806, 10
  %2812 = or i1 %2810, %2811
  br i1 %2812, label %originalBB1036, label %originalBB1036alteredBB

originalBB1036:                                   ; preds = %2804, %originalBB1036alteredBB
  %2813 = load i32, i32* @x.35
  %2814 = load i32, i32* @y.36
  %2815 = sub i32 %2813, 1
  %2816 = mul i32 %2813, %2815
  %2817 = urem i32 %2816, 2
  %2818 = icmp eq i32 %2817, 0
  %2819 = icmp slt i32 %2814, 10
  %2820 = or i1 %2818, %2819
  br i1 %2820, label %originalBBpart21038, label %originalBB1036alteredBB

originalBBpart21038:                              ; preds = %originalBB1036
  br label %6709, !dbg !2123

2821:                                             ; preds = %originalBBpart21034, %2782
  %2822 = load i32, i32* @x.35
  %2823 = load i32, i32* @y.36
  %2824 = sub i32 %2822, 1
  %2825 = mul i32 %2822, %2824
  %2826 = urem i32 %2825, 2
  %2827 = icmp eq i32 %2826, 0
  %2828 = icmp slt i32 %2823, 10
  %2829 = or i1 %2827, %2828
  br i1 %2829, label %originalBB1040, label %originalBB1040alteredBB

originalBB1040:                                   ; preds = %2821, %originalBB1040alteredBB
  %2830 = load i32, i32* @x.35
  %2831 = load i32, i32* @y.36
  %2832 = sub i32 %2830, 1
  %2833 = mul i32 %2830, %2832
  %2834 = urem i32 %2833, 2
  %2835 = icmp eq i32 %2834, 0
  %2836 = icmp slt i32 %2831, 10
  %2837 = or i1 %2835, %2836
  br i1 %2837, label %originalBBpart21042, label %originalBB1040alteredBB

originalBBpart21042:                              ; preds = %originalBB1040
  br label %2838, !dbg !2121

2838:                                             ; preds = %originalBBpart21042, %originalBBpart21002, %originalBBpart2986, %originalBBpart2982, %originalBBpart2978
  call void @llvm.dbg.label(metadata !2124), !dbg !2125
  %2839 = load i32, i32* @x.35
  %2840 = load i32, i32* @y.36
  %2841 = sub i32 %2839, 1
  %2842 = mul i32 %2839, %2841
  %2843 = urem i32 %2842, 2
  %2844 = icmp eq i32 %2843, 0
  %2845 = icmp slt i32 %2840, 10
  %2846 = or i1 %2844, %2845
  br i1 %2846, label %originalBB1044, label %originalBB1044alteredBB

originalBB1044:                                   ; preds = %2838, %originalBB1044alteredBB
  %2847 = load i8, i8* %33, align 1, !dbg !2126
  %2848 = trunc i8 %2847 to i1, !dbg !2126
  %2849 = load i32, i32* @x.35
  %2850 = load i32, i32* @y.36
  %2851 = sub i32 %2849, 1
  %2852 = mul i32 %2849, %2851
  %2853 = urem i32 %2852, 2
  %2854 = icmp eq i32 %2853, 0
  %2855 = icmp slt i32 %2850, 10
  %2856 = or i1 %2854, %2855
  br i1 %2856, label %originalBBpart21046, label %originalBB1044alteredBB

originalBBpart21046:                              ; preds = %originalBB1044
  br i1 %2848, label %2857, label %2859, !dbg !2128

2857:                                             ; preds = %originalBBpart21046
  %2858 = load i8, i8* %40, align 1, !dbg !2129
  store i8 %2858, i8* %39, align 1, !dbg !2131
  br label %5374, !dbg !2132

2859:                                             ; preds = %originalBBpart21046
  %2860 = load i32, i32* @x.35
  %2861 = load i32, i32* @y.36
  %2862 = sub i32 %2860, 1
  %2863 = mul i32 %2860, %2862
  %2864 = urem i32 %2863, 2
  %2865 = icmp eq i32 %2864, 0
  %2866 = icmp slt i32 %2861, 10
  %2867 = or i1 %2865, %2866
  br i1 %2867, label %originalBB1048, label %originalBB1048alteredBB

originalBB1048:                                   ; preds = %2859, %originalBB1048alteredBB
  %2868 = load i32, i32* @x.35
  %2869 = load i32, i32* @y.36
  %2870 = sub i32 %2868, 1
  %2871 = mul i32 %2868, %2870
  %2872 = urem i32 %2871, 2
  %2873 = icmp eq i32 %2872, 0
  %2874 = icmp slt i32 %2869, 10
  %2875 = or i1 %2873, %2874
  br i1 %2875, label %originalBBpart21050, label %originalBB1048alteredBB

originalBBpart21050:                              ; preds = %originalBB1048
  br label %5247, !dbg !2133

2876:                                             ; preds = %originalBBpart2255, %originalBBpart2255
  %2877 = load i64, i64* %22, align 8, !dbg !2134
  %2878 = icmp eq i64 %2877, -1, !dbg !2136
  br i1 %2878, label %2879, label %2901, !dbg !2137

2879:                                             ; preds = %2876
  %2880 = load i32, i32* @x.35
  %2881 = load i32, i32* @y.36
  %2882 = sub i32 %2880, 1
  %2883 = mul i32 %2880, %2882
  %2884 = urem i32 %2883, 2
  %2885 = icmp eq i32 %2884, 0
  %2886 = icmp slt i32 %2881, 10
  %2887 = or i1 %2885, %2886
  br i1 %2887, label %originalBB1052, label %originalBB1052alteredBB

originalBB1052:                                   ; preds = %2879, %originalBB1052alteredBB
  %2888 = load i8*, i8** %21, align 8, !dbg !2138
  %2889 = getelementptr inbounds i8, i8* %2888, i64 1, !dbg !2138
  %2890 = load i8, i8* %2889, align 1, !dbg !2138
  %2891 = sext i8 %2890 to i32, !dbg !2138
  %2892 = icmp eq i32 %2891, 0, !dbg !2139
  %2893 = load i32, i32* @x.35
  %2894 = load i32, i32* @y.36
  %2895 = sub i32 %2893, 1
  %2896 = mul i32 %2893, %2895
  %2897 = urem i32 %2896, 2
  %2898 = icmp eq i32 %2897, 0
  %2899 = icmp slt i32 %2894, 10
  %2900 = or i1 %2898, %2899
  br i1 %2900, label %originalBBpart21054, label %originalBB1052alteredBB

originalBBpart21054:                              ; preds = %originalBB1052
  br i1 %2892, label %2937, label %2920, !dbg !2134

2901:                                             ; preds = %2876
  %2902 = load i32, i32* @x.35
  %2903 = load i32, i32* @y.36
  %2904 = sub i32 %2902, 1
  %2905 = mul i32 %2902, %2904
  %2906 = urem i32 %2905, 2
  %2907 = icmp eq i32 %2906, 0
  %2908 = icmp slt i32 %2903, 10
  %2909 = or i1 %2907, %2908
  br i1 %2909, label %originalBB1056, label %originalBB1056alteredBB

originalBB1056:                                   ; preds = %2901, %originalBB1056alteredBB
  %2910 = load i64, i64* %22, align 8, !dbg !2140
  %2911 = icmp eq i64 %2910, 1, !dbg !2141
  %2912 = load i32, i32* @x.35
  %2913 = load i32, i32* @y.36
  %2914 = sub i32 %2912, 1
  %2915 = mul i32 %2912, %2914
  %2916 = urem i32 %2915, 2
  %2917 = icmp eq i32 %2916, 0
  %2918 = icmp slt i32 %2913, 10
  %2919 = or i1 %2917, %2918
  br i1 %2919, label %originalBBpart21058, label %originalBB1056alteredBB

originalBBpart21058:                              ; preds = %originalBB1056
  br i1 %2911, label %2937, label %2920, !dbg !2137

2920:                                             ; preds = %originalBBpart21058, %originalBBpart21054
  %2921 = load i32, i32* @x.35
  %2922 = load i32, i32* @y.36
  %2923 = sub i32 %2921, 1
  %2924 = mul i32 %2921, %2923
  %2925 = urem i32 %2924, 2
  %2926 = icmp eq i32 %2925, 0
  %2927 = icmp slt i32 %2922, 10
  %2928 = or i1 %2926, %2927
  br i1 %2928, label %originalBB1060, label %originalBB1060alteredBB

originalBB1060:                                   ; preds = %2920, %originalBB1060alteredBB
  %2929 = load i32, i32* @x.35
  %2930 = load i32, i32* @y.36
  %2931 = sub i32 %2929, 1
  %2932 = mul i32 %2929, %2931
  %2933 = urem i32 %2932, 2
  %2934 = icmp eq i32 %2933, 0
  %2935 = icmp slt i32 %2930, 10
  %2936 = or i1 %2934, %2935
  br i1 %2936, label %originalBBpart21062, label %originalBB1060alteredBB

originalBBpart21062:                              ; preds = %originalBB1060
  br label %5247, !dbg !2142

2937:                                             ; preds = %originalBBpart21058, %originalBBpart21054
  %2938 = load i32, i32* @x.35
  %2939 = load i32, i32* @y.36
  %2940 = sub i32 %2938, 1
  %2941 = mul i32 %2938, %2940
  %2942 = urem i32 %2941, 2
  %2943 = icmp eq i32 %2942, 0
  %2944 = icmp slt i32 %2939, 10
  %2945 = or i1 %2943, %2944
  br i1 %2945, label %originalBB1064, label %originalBB1064alteredBB

originalBB1064:                                   ; preds = %2937, %originalBB1064alteredBB
  %2946 = load i32, i32* @x.35
  %2947 = load i32, i32* @y.36
  %2948 = sub i32 %2946, 1
  %2949 = mul i32 %2946, %2948
  %2950 = urem i32 %2949, 2
  %2951 = icmp eq i32 %2950, 0
  %2952 = icmp slt i32 %2947, 10
  %2953 = or i1 %2951, %2952
  br i1 %2953, label %originalBBpart21066, label %originalBB1064alteredBB

originalBBpart21066:                              ; preds = %originalBB1064
  br label %2954, !dbg !2143

2954:                                             ; preds = %originalBBpart21066, %originalBBpart2255, %originalBBpart2255
  %2955 = load i32, i32* @x.35
  %2956 = load i32, i32* @y.36
  %2957 = sub i32 %2955, 1
  %2958 = mul i32 %2955, %2957
  %2959 = urem i32 %2958, 2
  %2960 = icmp eq i32 %2959, 0
  %2961 = icmp slt i32 %2956, 10
  %2962 = or i1 %2960, %2961
  br i1 %2962, label %originalBB1068, label %originalBB1068alteredBB

originalBB1068:                                   ; preds = %2954, %originalBB1068alteredBB
  %2963 = load i64, i64* %28, align 8, !dbg !2144
  %2964 = icmp ne i64 %2963, 0, !dbg !2146
  %2965 = load i32, i32* @x.35
  %2966 = load i32, i32* @y.36
  %2967 = sub i32 %2965, 1
  %2968 = mul i32 %2965, %2967
  %2969 = urem i32 %2968, 2
  %2970 = icmp eq i32 %2969, 0
  %2971 = icmp slt i32 %2966, 10
  %2972 = or i1 %2970, %2971
  br i1 %2972, label %originalBBpart21070, label %originalBB1068alteredBB

originalBBpart21070:                              ; preds = %originalBB1068
  br i1 %2964, label %2973, label %2990, !dbg !2147

2973:                                             ; preds = %originalBBpart21070
  %2974 = load i32, i32* @x.35
  %2975 = load i32, i32* @y.36
  %2976 = sub i32 %2974, 1
  %2977 = mul i32 %2974, %2976
  %2978 = urem i32 %2977, 2
  %2979 = icmp eq i32 %2978, 0
  %2980 = icmp slt i32 %2975, 10
  %2981 = or i1 %2979, %2980
  br i1 %2981, label %originalBB1072, label %originalBB1072alteredBB

originalBB1072:                                   ; preds = %2973, %originalBB1072alteredBB
  %2982 = load i32, i32* @x.35
  %2983 = load i32, i32* @y.36
  %2984 = sub i32 %2982, 1
  %2985 = mul i32 %2982, %2984
  %2986 = urem i32 %2985, 2
  %2987 = icmp eq i32 %2986, 0
  %2988 = icmp slt i32 %2983, 10
  %2989 = or i1 %2987, %2988
  br i1 %2989, label %originalBBpart21074, label %originalBB1072alteredBB

originalBBpart21074:                              ; preds = %originalBB1072
  br label %5247, !dbg !2148

2990:                                             ; preds = %originalBBpart21070
  %2991 = load i32, i32* @x.35
  %2992 = load i32, i32* @y.36
  %2993 = sub i32 %2991, 1
  %2994 = mul i32 %2991, %2993
  %2995 = urem i32 %2994, 2
  %2996 = icmp eq i32 %2995, 0
  %2997 = icmp slt i32 %2992, 10
  %2998 = or i1 %2996, %2997
  br i1 %2998, label %originalBB1076, label %originalBB1076alteredBB

originalBB1076:                                   ; preds = %2990, %originalBB1076alteredBB
  %2999 = load i32, i32* @x.35
  %3000 = load i32, i32* @y.36
  %3001 = sub i32 %2999, 1
  %3002 = mul i32 %2999, %3001
  %3003 = urem i32 %3002, 2
  %3004 = icmp eq i32 %3003, 0
  %3005 = icmp slt i32 %3000, 10
  %3006 = or i1 %3004, %3005
  br i1 %3006, label %originalBBpart21078, label %originalBB1076alteredBB

originalBBpart21078:                              ; preds = %originalBB1076
  br label %3007, !dbg !2149

3007:                                             ; preds = %originalBBpart21078, %originalBBpart2255
  %3008 = load i32, i32* @x.35
  %3009 = load i32, i32* @y.36
  %3010 = sub i32 %3008, 1
  %3011 = mul i32 %3008, %3010
  %3012 = urem i32 %3011, 2
  %3013 = icmp eq i32 %3012, 0
  %3014 = icmp slt i32 %3009, 10
  %3015 = or i1 %3013, %3014
  br i1 %3015, label %originalBB1080, label %originalBB1080alteredBB

originalBB1080:                                   ; preds = %3007, %originalBB1080alteredBB
  store i8 1, i8* %43, align 1, !dbg !2150
  %3016 = load i32, i32* @x.35
  %3017 = load i32, i32* @y.36
  %3018 = sub i32 %3016, 1
  %3019 = mul i32 %3016, %3018
  %3020 = urem i32 %3019, 2
  %3021 = icmp eq i32 %3020, 0
  %3022 = icmp slt i32 %3017, 10
  %3023 = or i1 %3021, %3022
  br i1 %3023, label %originalBBpart21082, label %originalBB1080alteredBB

originalBBpart21082:                              ; preds = %originalBB1080
  br label %3024, !dbg !2151

3024:                                             ; preds = %originalBBpart21082, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255
  %3025 = load i32, i32* @x.35
  %3026 = load i32, i32* @y.36
  %3027 = sub i32 %3025, 1
  %3028 = mul i32 %3025, %3027
  %3029 = urem i32 %3028, 2
  %3030 = icmp eq i32 %3029, 0
  %3031 = icmp slt i32 %3026, 10
  %3032 = or i1 %3030, %3031
  br i1 %3032, label %originalBB1084, label %originalBB1084alteredBB

originalBB1084:                                   ; preds = %3024, %originalBB1084alteredBB
  %3033 = load i32, i32* %23, align 4, !dbg !2152
  %3034 = icmp eq i32 %3033, 2, !dbg !2154
  %3035 = load i32, i32* @x.35
  %3036 = load i32, i32* @y.36
  %3037 = sub i32 %3035, 1
  %3038 = mul i32 %3035, %3037
  %3039 = urem i32 %3038, 2
  %3040 = icmp eq i32 %3039, 0
  %3041 = icmp slt i32 %3036, 10
  %3042 = or i1 %3040, %3041
  br i1 %3042, label %originalBBpart21086, label %originalBB1084alteredBB

originalBBpart21086:                              ; preds = %originalBB1084
  br i1 %3034, label %3043, label %3079, !dbg !2155

3043:                                             ; preds = %originalBBpart21086
  %3044 = load i32, i32* @x.35
  %3045 = load i32, i32* @y.36
  %3046 = sub i32 %3044, 1
  %3047 = mul i32 %3044, %3046
  %3048 = urem i32 %3047, 2
  %3049 = icmp eq i32 %3048, 0
  %3050 = icmp slt i32 %3045, 10
  %3051 = or i1 %3049, %3050
  br i1 %3051, label %originalBB1088, label %originalBB1088alteredBB

originalBB1088:                                   ; preds = %3043, %originalBB1088alteredBB
  %3052 = load i8, i8* %35, align 1, !dbg !2156
  %3053 = trunc i8 %3052 to i1, !dbg !2156
  %3054 = load i32, i32* @x.35
  %3055 = load i32, i32* @y.36
  %3056 = sub i32 %3054, 1
  %3057 = mul i32 %3054, %3056
  %3058 = urem i32 %3057, 2
  %3059 = icmp eq i32 %3058, 0
  %3060 = icmp slt i32 %3055, 10
  %3061 = or i1 %3059, %3060
  br i1 %3061, label %originalBBpart21090, label %originalBB1088alteredBB

originalBBpart21090:                              ; preds = %originalBB1088
  br i1 %3053, label %3062, label %3079, !dbg !2157

3062:                                             ; preds = %originalBBpart21090
  %3063 = load i32, i32* @x.35
  %3064 = load i32, i32* @y.36
  %3065 = sub i32 %3063, 1
  %3066 = mul i32 %3063, %3065
  %3067 = urem i32 %3066, 2
  %3068 = icmp eq i32 %3067, 0
  %3069 = icmp slt i32 %3064, 10
  %3070 = or i1 %3068, %3069
  br i1 %3070, label %originalBB1092, label %originalBB1092alteredBB

originalBB1092:                                   ; preds = %3062, %originalBB1092alteredBB
  %3071 = load i32, i32* @x.35
  %3072 = load i32, i32* @y.36
  %3073 = sub i32 %3071, 1
  %3074 = mul i32 %3071, %3073
  %3075 = urem i32 %3074, 2
  %3076 = icmp eq i32 %3075, 0
  %3077 = icmp slt i32 %3072, 10
  %3078 = or i1 %3076, %3077
  br i1 %3078, label %originalBBpart21094, label %originalBB1092alteredBB

originalBBpart21094:                              ; preds = %originalBB1092
  br label %6709, !dbg !2158

3079:                                             ; preds = %originalBBpart21090, %originalBBpart21086
  %3080 = load i32, i32* @x.35
  %3081 = load i32, i32* @y.36
  %3082 = sub i32 %3080, 1
  %3083 = mul i32 %3080, %3082
  %3084 = urem i32 %3083, 2
  %3085 = icmp eq i32 %3084, 0
  %3086 = icmp slt i32 %3081, 10
  %3087 = or i1 %3085, %3086
  br i1 %3087, label %originalBB1096, label %originalBB1096alteredBB

originalBB1096:                                   ; preds = %3079, %originalBB1096alteredBB
  %3088 = load i32, i32* @x.35
  %3089 = load i32, i32* @y.36
  %3090 = sub i32 %3088, 1
  %3091 = mul i32 %3088, %3090
  %3092 = urem i32 %3091, 2
  %3093 = icmp eq i32 %3092, 0
  %3094 = icmp slt i32 %3089, 10
  %3095 = or i1 %3093, %3094
  br i1 %3095, label %originalBBpart21098, label %originalBB1096alteredBB

originalBBpart21098:                              ; preds = %originalBB1096
  br label %5247, !dbg !2159

3096:                                             ; preds = %originalBBpart2255
  %3097 = load i32, i32* @x.35
  %3098 = load i32, i32* @y.36
  %3099 = sub i32 %3097, 1
  %3100 = mul i32 %3097, %3099
  %3101 = urem i32 %3100, 2
  %3102 = icmp eq i32 %3101, 0
  %3103 = icmp slt i32 %3098, 10
  %3104 = or i1 %3102, %3103
  br i1 %3104, label %originalBB1100, label %originalBB1100alteredBB

originalBB1100:                                   ; preds = %3096, %originalBB1100alteredBB
  store i8 1, i8* %37, align 1, !dbg !2160
  store i8 1, i8* %43, align 1, !dbg !2161
  %3105 = load i32, i32* %23, align 4, !dbg !2162
  %3106 = icmp eq i32 %3105, 2, !dbg !2164
  %3107 = load i32, i32* @x.35
  %3108 = load i32, i32* @y.36
  %3109 = sub i32 %3107, 1
  %3110 = mul i32 %3107, %3109
  %3111 = urem i32 %3110, 2
  %3112 = icmp eq i32 %3111, 0
  %3113 = icmp slt i32 %3108, 10
  %3114 = or i1 %3112, %3113
  br i1 %3114, label %originalBBpart21102, label %originalBB1100alteredBB

originalBBpart21102:                              ; preds = %originalBB1100
  br i1 %3106, label %3115, label %3452, !dbg !2165

3115:                                             ; preds = %originalBBpart21102
  %3116 = load i32, i32* @x.35
  %3117 = load i32, i32* @y.36
  %3118 = sub i32 %3116, 1
  %3119 = mul i32 %3116, %3118
  %3120 = urem i32 %3119, 2
  %3121 = icmp eq i32 %3120, 0
  %3122 = icmp slt i32 %3117, 10
  %3123 = or i1 %3121, %3122
  br i1 %3123, label %originalBB1104, label %originalBB1104alteredBB

originalBB1104:                                   ; preds = %3115, %originalBB1104alteredBB
  %3124 = load i8, i8* %35, align 1, !dbg !2166
  %3125 = trunc i8 %3124 to i1, !dbg !2166
  %3126 = load i32, i32* @x.35
  %3127 = load i32, i32* @y.36
  %3128 = sub i32 %3126, 1
  %3129 = mul i32 %3126, %3128
  %3130 = urem i32 %3129, 2
  %3131 = icmp eq i32 %3130, 0
  %3132 = icmp slt i32 %3127, 10
  %3133 = or i1 %3131, %3132
  br i1 %3133, label %originalBBpart21106, label %originalBB1104alteredBB

originalBBpart21106:                              ; preds = %originalBB1104
  br i1 %3125, label %3134, label %3151, !dbg !2169

3134:                                             ; preds = %originalBBpart21106
  %3135 = load i32, i32* @x.35
  %3136 = load i32, i32* @y.36
  %3137 = sub i32 %3135, 1
  %3138 = mul i32 %3135, %3137
  %3139 = urem i32 %3138, 2
  %3140 = icmp eq i32 %3139, 0
  %3141 = icmp slt i32 %3136, 10
  %3142 = or i1 %3140, %3141
  br i1 %3142, label %originalBB1108, label %originalBB1108alteredBB

originalBB1108:                                   ; preds = %3134, %originalBB1108alteredBB
  %3143 = load i32, i32* @x.35
  %3144 = load i32, i32* @y.36
  %3145 = sub i32 %3143, 1
  %3146 = mul i32 %3143, %3145
  %3147 = urem i32 %3146, 2
  %3148 = icmp eq i32 %3147, 0
  %3149 = icmp slt i32 %3144, 10
  %3150 = or i1 %3148, %3149
  br i1 %3150, label %originalBBpart21110, label %originalBB1108alteredBB

originalBBpart21110:                              ; preds = %originalBB1108
  br label %6709, !dbg !2170

3151:                                             ; preds = %originalBBpart21106
  %3152 = load i32, i32* @x.35
  %3153 = load i32, i32* @y.36
  %3154 = sub i32 %3152, 1
  %3155 = mul i32 %3152, %3154
  %3156 = urem i32 %3155, 2
  %3157 = icmp eq i32 %3156, 0
  %3158 = icmp slt i32 %3153, 10
  %3159 = or i1 %3157, %3158
  br i1 %3159, label %originalBB1112, label %originalBB1112alteredBB

originalBB1112:                                   ; preds = %3151, %originalBB1112alteredBB
  %3160 = load i64, i64* %20, align 8, !dbg !2171
  %3161 = icmp ne i64 %3160, 0, !dbg !2171
  %3162 = load i32, i32* @x.35
  %3163 = load i32, i32* @y.36
  %3164 = sub i32 %3162, 1
  %3165 = mul i32 %3162, %3164
  %3166 = urem i32 %3165, 2
  %3167 = icmp eq i32 %3166, 0
  %3168 = icmp slt i32 %3163, 10
  %3169 = or i1 %3167, %3168
  br i1 %3169, label %originalBBpart21114, label %originalBB1112alteredBB

originalBBpart21114:                              ; preds = %originalBB1112
  br i1 %3161, label %3170, label %3207, !dbg !2173

3170:                                             ; preds = %originalBBpart21114
  %3171 = load i32, i32* @x.35
  %3172 = load i32, i32* @y.36
  %3173 = sub i32 %3171, 1
  %3174 = mul i32 %3171, %3173
  %3175 = urem i32 %3174, 2
  %3176 = icmp eq i32 %3175, 0
  %3177 = icmp slt i32 %3172, 10
  %3178 = or i1 %3176, %3177
  br i1 %3178, label %originalBB1116, label %originalBB1116alteredBB

originalBB1116:                                   ; preds = %3170, %originalBB1116alteredBB
  %3179 = load i64, i64* %30, align 8, !dbg !2174
  %3180 = icmp ne i64 %3179, 0, !dbg !2174
  %3181 = load i32, i32* @x.35
  %3182 = load i32, i32* @y.36
  %3183 = sub i32 %3181, 1
  %3184 = mul i32 %3181, %3183
  %3185 = urem i32 %3184, 2
  %3186 = icmp eq i32 %3185, 0
  %3187 = icmp slt i32 %3182, 10
  %3188 = or i1 %3186, %3187
  br i1 %3188, label %originalBBpart21118, label %originalBB1116alteredBB

originalBBpart21118:                              ; preds = %originalBB1116
  br i1 %3180, label %3207, label %3189, !dbg !2175

3189:                                             ; preds = %originalBBpart21118
  %3190 = load i32, i32* @x.35
  %3191 = load i32, i32* @y.36
  %3192 = sub i32 %3190, 1
  %3193 = mul i32 %3190, %3192
  %3194 = urem i32 %3193, 2
  %3195 = icmp eq i32 %3194, 0
  %3196 = icmp slt i32 %3191, 10
  %3197 = or i1 %3195, %3196
  br i1 %3197, label %originalBB1120, label %originalBB1120alteredBB

originalBB1120:                                   ; preds = %3189, %originalBB1120alteredBB
  %3198 = load i64, i64* %20, align 8, !dbg !2176
  store i64 %3198, i64* %30, align 8, !dbg !2178
  store i64 0, i64* %20, align 8, !dbg !2179
  %3199 = load i32, i32* @x.35
  %3200 = load i32, i32* @y.36
  %3201 = sub i32 %3199, 1
  %3202 = mul i32 %3199, %3201
  %3203 = urem i32 %3202, 2
  %3204 = icmp eq i32 %3203, 0
  %3205 = icmp slt i32 %3200, 10
  %3206 = or i1 %3204, %3205
  br i1 %3206, label %originalBBpart21122, label %originalBB1120alteredBB

originalBBpart21122:                              ; preds = %originalBB1120
  br label %3207, !dbg !2180

3207:                                             ; preds = %originalBBpart21122, %originalBBpart21118, %originalBBpart21114
  %3208 = load i32, i32* @x.35
  %3209 = load i32, i32* @y.36
  %3210 = sub i32 %3208, 1
  %3211 = mul i32 %3208, %3210
  %3212 = urem i32 %3211, 2
  %3213 = icmp eq i32 %3212, 0
  %3214 = icmp slt i32 %3209, 10
  %3215 = or i1 %3213, %3214
  br i1 %3215, label %originalBB1124, label %originalBB1124alteredBB

originalBB1124:                                   ; preds = %3207, %originalBB1124alteredBB
  %3216 = load i32, i32* @x.35
  %3217 = load i32, i32* @y.36
  %3218 = sub i32 %3216, 1
  %3219 = mul i32 %3216, %3218
  %3220 = urem i32 %3219, 2
  %3221 = icmp eq i32 %3220, 0
  %3222 = icmp slt i32 %3217, 10
  %3223 = or i1 %3221, %3222
  br i1 %3223, label %originalBBpart21126, label %originalBB1124alteredBB

originalBBpart21126:                              ; preds = %originalBB1124
  br label %3224, !dbg !2181

3224:                                             ; preds = %originalBBpart21126
  %3225 = load i32, i32* @x.35
  %3226 = load i32, i32* @y.36
  %3227 = sub i32 %3225, 1
  %3228 = mul i32 %3225, %3227
  %3229 = urem i32 %3228, 2
  %3230 = icmp eq i32 %3229, 0
  %3231 = icmp slt i32 %3226, 10
  %3232 = or i1 %3230, %3231
  br i1 %3232, label %originalBB1128, label %originalBB1128alteredBB

originalBB1128:                                   ; preds = %3224, %originalBB1128alteredBB
  %3233 = load i64, i64* %29, align 8, !dbg !2182
  %3234 = load i64, i64* %20, align 8, !dbg !2182
  %3235 = icmp ult i64 %3233, %3234, !dbg !2182
  %3236 = load i32, i32* @x.35
  %3237 = load i32, i32* @y.36
  %3238 = sub i32 %3236, 1
  %3239 = mul i32 %3236, %3238
  %3240 = urem i32 %3239, 2
  %3241 = icmp eq i32 %3240, 0
  %3242 = icmp slt i32 %3237, 10
  %3243 = or i1 %3241, %3242
  br i1 %3243, label %originalBBpart21130, label %originalBB1128alteredBB

originalBBpart21130:                              ; preds = %originalBB1128
  br i1 %3235, label %3244, label %3264, !dbg !2185

3244:                                             ; preds = %originalBBpart21130
  %3245 = load i32, i32* @x.35
  %3246 = load i32, i32* @y.36
  %3247 = sub i32 %3245, 1
  %3248 = mul i32 %3245, %3247
  %3249 = urem i32 %3248, 2
  %3250 = icmp eq i32 %3249, 0
  %3251 = icmp slt i32 %3246, 10
  %3252 = or i1 %3250, %3251
  br i1 %3252, label %originalBB1132, label %originalBB1132alteredBB

originalBB1132:                                   ; preds = %3244, %originalBB1132alteredBB
  %3253 = load i8*, i8** %19, align 8, !dbg !2182
  %3254 = load i64, i64* %29, align 8, !dbg !2182
  %3255 = getelementptr inbounds i8, i8* %3253, i64 %3254, !dbg !2182
  store i8 39, i8* %3255, align 1, !dbg !2182
  %3256 = load i32, i32* @x.35
  %3257 = load i32, i32* @y.36
  %3258 = sub i32 %3256, 1
  %3259 = mul i32 %3256, %3258
  %3260 = urem i32 %3259, 2
  %3261 = icmp eq i32 %3260, 0
  %3262 = icmp slt i32 %3257, 10
  %3263 = or i1 %3261, %3262
  br i1 %3263, label %originalBBpart21134, label %originalBB1132alteredBB

originalBBpart21134:                              ; preds = %originalBB1132
  br label %3264, !dbg !2182

3264:                                             ; preds = %originalBBpart21134, %originalBBpart21130
  %3265 = load i32, i32* @x.35
  %3266 = load i32, i32* @y.36
  %3267 = sub i32 %3265, 1
  %3268 = mul i32 %3265, %3267
  %3269 = urem i32 %3268, 2
  %3270 = icmp eq i32 %3269, 0
  %3271 = icmp slt i32 %3266, 10
  %3272 = or i1 %3270, %3271
  br i1 %3272, label %originalBB1136, label %originalBB1136alteredBB

originalBB1136:                                   ; preds = %3264, %originalBB1136alteredBB
  %3273 = load i64, i64* %29, align 8, !dbg !2185
  %3274 = add i64 %3273, 1, !dbg !2185
  store i64 %3274, i64* %29, align 8, !dbg !2185
  %3275 = load i32, i32* @x.35
  %3276 = load i32, i32* @y.36
  %3277 = sub i32 %3275, 1
  %3278 = mul i32 %3275, %3277
  %3279 = urem i32 %3278, 2
  %3280 = icmp eq i32 %3279, 0
  %3281 = icmp slt i32 %3276, 10
  %3282 = or i1 %3280, %3281
  br i1 %3282, label %originalBBpart21142, label %originalBB1136alteredBB

originalBBpart21142:                              ; preds = %originalBB1136
  br label %3283, !dbg !2185

3283:                                             ; preds = %originalBBpart21142
  %3284 = load i32, i32* @x.35
  %3285 = load i32, i32* @y.36
  %3286 = sub i32 %3284, 1
  %3287 = mul i32 %3284, %3286
  %3288 = urem i32 %3287, 2
  %3289 = icmp eq i32 %3288, 0
  %3290 = icmp slt i32 %3285, 10
  %3291 = or i1 %3289, %3290
  br i1 %3291, label %originalBB1144, label %originalBB1144alteredBB

originalBB1144:                                   ; preds = %3283, %originalBB1144alteredBB
  %3292 = load i32, i32* @x.35
  %3293 = load i32, i32* @y.36
  %3294 = sub i32 %3292, 1
  %3295 = mul i32 %3292, %3294
  %3296 = urem i32 %3295, 2
  %3297 = icmp eq i32 %3296, 0
  %3298 = icmp slt i32 %3293, 10
  %3299 = or i1 %3297, %3298
  br i1 %3299, label %originalBBpart21146, label %originalBB1144alteredBB

originalBBpart21146:                              ; preds = %originalBB1144
  br label %3300, !dbg !2186

3300:                                             ; preds = %originalBBpart21146
  %3301 = load i32, i32* @x.35
  %3302 = load i32, i32* @y.36
  %3303 = sub i32 %3301, 1
  %3304 = mul i32 %3301, %3303
  %3305 = urem i32 %3304, 2
  %3306 = icmp eq i32 %3305, 0
  %3307 = icmp slt i32 %3302, 10
  %3308 = or i1 %3306, %3307
  br i1 %3308, label %originalBB1148, label %originalBB1148alteredBB

originalBB1148:                                   ; preds = %3300, %originalBB1148alteredBB
  %3309 = load i64, i64* %29, align 8, !dbg !2187
  %3310 = load i64, i64* %20, align 8, !dbg !2187
  %3311 = icmp ult i64 %3309, %3310, !dbg !2187
  %3312 = load i32, i32* @x.35
  %3313 = load i32, i32* @y.36
  %3314 = sub i32 %3312, 1
  %3315 = mul i32 %3312, %3314
  %3316 = urem i32 %3315, 2
  %3317 = icmp eq i32 %3316, 0
  %3318 = icmp slt i32 %3313, 10
  %3319 = or i1 %3317, %3318
  br i1 %3319, label %originalBBpart21150, label %originalBB1148alteredBB

originalBBpart21150:                              ; preds = %originalBB1148
  br i1 %3311, label %3320, label %3340, !dbg !2190

3320:                                             ; preds = %originalBBpart21150
  %3321 = load i32, i32* @x.35
  %3322 = load i32, i32* @y.36
  %3323 = sub i32 %3321, 1
  %3324 = mul i32 %3321, %3323
  %3325 = urem i32 %3324, 2
  %3326 = icmp eq i32 %3325, 0
  %3327 = icmp slt i32 %3322, 10
  %3328 = or i1 %3326, %3327
  br i1 %3328, label %originalBB1152, label %originalBB1152alteredBB

originalBB1152:                                   ; preds = %3320, %originalBB1152alteredBB
  %3329 = load i8*, i8** %19, align 8, !dbg !2187
  %3330 = load i64, i64* %29, align 8, !dbg !2187
  %3331 = getelementptr inbounds i8, i8* %3329, i64 %3330, !dbg !2187
  store i8 92, i8* %3331, align 1, !dbg !2187
  %3332 = load i32, i32* @x.35
  %3333 = load i32, i32* @y.36
  %3334 = sub i32 %3332, 1
  %3335 = mul i32 %3332, %3334
  %3336 = urem i32 %3335, 2
  %3337 = icmp eq i32 %3336, 0
  %3338 = icmp slt i32 %3333, 10
  %3339 = or i1 %3337, %3338
  br i1 %3339, label %originalBBpart21154, label %originalBB1152alteredBB

originalBBpart21154:                              ; preds = %originalBB1152
  br label %3340, !dbg !2187

3340:                                             ; preds = %originalBBpart21154, %originalBBpart21150
  %3341 = load i32, i32* @x.35
  %3342 = load i32, i32* @y.36
  %3343 = sub i32 %3341, 1
  %3344 = mul i32 %3341, %3343
  %3345 = urem i32 %3344, 2
  %3346 = icmp eq i32 %3345, 0
  %3347 = icmp slt i32 %3342, 10
  %3348 = or i1 %3346, %3347
  br i1 %3348, label %originalBB1156, label %originalBB1156alteredBB

originalBB1156:                                   ; preds = %3340, %originalBB1156alteredBB
  %3349 = load i64, i64* %29, align 8, !dbg !2190
  %3350 = add i64 %3349, 1, !dbg !2190
  store i64 %3350, i64* %29, align 8, !dbg !2190
  %3351 = load i32, i32* @x.35
  %3352 = load i32, i32* @y.36
  %3353 = sub i32 %3351, 1
  %3354 = mul i32 %3351, %3353
  %3355 = urem i32 %3354, 2
  %3356 = icmp eq i32 %3355, 0
  %3357 = icmp slt i32 %3352, 10
  %3358 = or i1 %3356, %3357
  br i1 %3358, label %originalBBpart21167, label %originalBB1156alteredBB

originalBBpart21167:                              ; preds = %originalBB1156
  br label %3359, !dbg !2190

3359:                                             ; preds = %originalBBpart21167
  %3360 = load i32, i32* @x.35
  %3361 = load i32, i32* @y.36
  %3362 = sub i32 %3360, 1
  %3363 = mul i32 %3360, %3362
  %3364 = urem i32 %3363, 2
  %3365 = icmp eq i32 %3364, 0
  %3366 = icmp slt i32 %3361, 10
  %3367 = or i1 %3365, %3366
  br i1 %3367, label %originalBB1169, label %originalBB1169alteredBB

originalBB1169:                                   ; preds = %3359, %originalBB1169alteredBB
  %3368 = load i32, i32* @x.35
  %3369 = load i32, i32* @y.36
  %3370 = sub i32 %3368, 1
  %3371 = mul i32 %3368, %3370
  %3372 = urem i32 %3371, 2
  %3373 = icmp eq i32 %3372, 0
  %3374 = icmp slt i32 %3369, 10
  %3375 = or i1 %3373, %3374
  br i1 %3375, label %originalBBpart21171, label %originalBB1169alteredBB

originalBBpart21171:                              ; preds = %originalBB1169
  br label %3376, !dbg !2191

3376:                                             ; preds = %originalBBpart21171
  %3377 = load i32, i32* @x.35
  %3378 = load i32, i32* @y.36
  %3379 = sub i32 %3377, 1
  %3380 = mul i32 %3377, %3379
  %3381 = urem i32 %3380, 2
  %3382 = icmp eq i32 %3381, 0
  %3383 = icmp slt i32 %3378, 10
  %3384 = or i1 %3382, %3383
  br i1 %3384, label %originalBB1173, label %originalBB1173alteredBB

originalBB1173:                                   ; preds = %3376, %originalBB1173alteredBB
  %3385 = load i64, i64* %29, align 8, !dbg !2192
  %3386 = load i64, i64* %20, align 8, !dbg !2192
  %3387 = icmp ult i64 %3385, %3386, !dbg !2192
  %3388 = load i32, i32* @x.35
  %3389 = load i32, i32* @y.36
  %3390 = sub i32 %3388, 1
  %3391 = mul i32 %3388, %3390
  %3392 = urem i32 %3391, 2
  %3393 = icmp eq i32 %3392, 0
  %3394 = icmp slt i32 %3389, 10
  %3395 = or i1 %3393, %3394
  br i1 %3395, label %originalBBpart21175, label %originalBB1173alteredBB

originalBBpart21175:                              ; preds = %originalBB1173
  br i1 %3387, label %3396, label %3416, !dbg !2195

3396:                                             ; preds = %originalBBpart21175
  %3397 = load i32, i32* @x.35
  %3398 = load i32, i32* @y.36
  %3399 = sub i32 %3397, 1
  %3400 = mul i32 %3397, %3399
  %3401 = urem i32 %3400, 2
  %3402 = icmp eq i32 %3401, 0
  %3403 = icmp slt i32 %3398, 10
  %3404 = or i1 %3402, %3403
  br i1 %3404, label %originalBB1177, label %originalBB1177alteredBB

originalBB1177:                                   ; preds = %3396, %originalBB1177alteredBB
  %3405 = load i8*, i8** %19, align 8, !dbg !2192
  %3406 = load i64, i64* %29, align 8, !dbg !2192
  %3407 = getelementptr inbounds i8, i8* %3405, i64 %3406, !dbg !2192
  store i8 39, i8* %3407, align 1, !dbg !2192
  %3408 = load i32, i32* @x.35
  %3409 = load i32, i32* @y.36
  %3410 = sub i32 %3408, 1
  %3411 = mul i32 %3408, %3410
  %3412 = urem i32 %3411, 2
  %3413 = icmp eq i32 %3412, 0
  %3414 = icmp slt i32 %3409, 10
  %3415 = or i1 %3413, %3414
  br i1 %3415, label %originalBBpart21179, label %originalBB1177alteredBB

originalBBpart21179:                              ; preds = %originalBB1177
  br label %3416, !dbg !2192

3416:                                             ; preds = %originalBBpart21179, %originalBBpart21175
  %3417 = load i32, i32* @x.35
  %3418 = load i32, i32* @y.36
  %3419 = sub i32 %3417, 1
  %3420 = mul i32 %3417, %3419
  %3421 = urem i32 %3420, 2
  %3422 = icmp eq i32 %3421, 0
  %3423 = icmp slt i32 %3418, 10
  %3424 = or i1 %3422, %3423
  br i1 %3424, label %originalBB1181, label %originalBB1181alteredBB

originalBB1181:                                   ; preds = %3416, %originalBB1181alteredBB
  %3425 = load i64, i64* %29, align 8, !dbg !2195
  %3426 = add i64 %3425, 1, !dbg !2195
  store i64 %3426, i64* %29, align 8, !dbg !2195
  %3427 = load i32, i32* @x.35
  %3428 = load i32, i32* @y.36
  %3429 = sub i32 %3427, 1
  %3430 = mul i32 %3427, %3429
  %3431 = urem i32 %3430, 2
  %3432 = icmp eq i32 %3431, 0
  %3433 = icmp slt i32 %3428, 10
  %3434 = or i1 %3432, %3433
  br i1 %3434, label %originalBBpart21186, label %originalBB1181alteredBB

originalBBpart21186:                              ; preds = %originalBB1181
  br label %3435, !dbg !2195

3435:                                             ; preds = %originalBBpart21186
  %3436 = load i32, i32* @x.35
  %3437 = load i32, i32* @y.36
  %3438 = sub i32 %3436, 1
  %3439 = mul i32 %3436, %3438
  %3440 = urem i32 %3439, 2
  %3441 = icmp eq i32 %3440, 0
  %3442 = icmp slt i32 %3437, 10
  %3443 = or i1 %3441, %3442
  br i1 %3443, label %originalBB1188, label %originalBB1188alteredBB

originalBB1188:                                   ; preds = %3435, %originalBB1188alteredBB
  store i8 0, i8* %36, align 1, !dbg !2196
  %3444 = load i32, i32* @x.35
  %3445 = load i32, i32* @y.36
  %3446 = sub i32 %3444, 1
  %3447 = mul i32 %3444, %3446
  %3448 = urem i32 %3447, 2
  %3449 = icmp eq i32 %3448, 0
  %3450 = icmp slt i32 %3445, 10
  %3451 = or i1 %3449, %3450
  br i1 %3451, label %originalBBpart21190, label %originalBB1188alteredBB

originalBBpart21190:                              ; preds = %originalBB1188
  br label %3452, !dbg !2197

3452:                                             ; preds = %originalBBpart21190, %originalBBpart21102
  %3453 = load i32, i32* @x.35
  %3454 = load i32, i32* @y.36
  %3455 = sub i32 %3453, 1
  %3456 = mul i32 %3453, %3455
  %3457 = urem i32 %3456, 2
  %3458 = icmp eq i32 %3457, 0
  %3459 = icmp slt i32 %3454, 10
  %3460 = or i1 %3458, %3459
  br i1 %3460, label %originalBB1192, label %originalBB1192alteredBB

originalBB1192:                                   ; preds = %3452, %originalBB1192alteredBB
  %3461 = load i32, i32* @x.35
  %3462 = load i32, i32* @y.36
  %3463 = sub i32 %3461, 1
  %3464 = mul i32 %3461, %3463
  %3465 = urem i32 %3464, 2
  %3466 = icmp eq i32 %3465, 0
  %3467 = icmp slt i32 %3462, 10
  %3468 = or i1 %3466, %3467
  br i1 %3468, label %originalBBpart21194, label %originalBB1192alteredBB

originalBBpart21194:                              ; preds = %originalBB1192
  br label %5247, !dbg !2198

3469:                                             ; preds = %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255, %originalBBpart2255
  %3470 = load i32, i32* @x.35
  %3471 = load i32, i32* @y.36
  %3472 = sub i32 %3470, 1
  %3473 = mul i32 %3470, %3472
  %3474 = urem i32 %3473, 2
  %3475 = icmp eq i32 %3474, 0
  %3476 = icmp slt i32 %3471, 10
  %3477 = or i1 %3475, %3476
  br i1 %3477, label %originalBB1196, label %originalBB1196alteredBB

originalBB1196:                                   ; preds = %3469, %originalBB1196alteredBB
  store i8 1, i8* %43, align 1, !dbg !2199
  %3478 = load i32, i32* @x.35
  %3479 = load i32, i32* @y.36
  %3480 = sub i32 %3478, 1
  %3481 = mul i32 %3478, %3480
  %3482 = urem i32 %3481, 2
  %3483 = icmp eq i32 %3482, 0
  %3484 = icmp slt i32 %3479, 10
  %3485 = or i1 %3483, %3484
  br i1 %3485, label %originalBBpart21198, label %originalBB1196alteredBB

originalBBpart21198:                              ; preds = %originalBB1196
  br label %5247, !dbg !2200

3486:                                             ; preds = %originalBBpart2255
  call void @llvm.dbg.declare(metadata i64* %44, metadata !2201, metadata !DIExpression()), !dbg !2203
  call void @llvm.dbg.declare(metadata i8* %45, metadata !2204, metadata !DIExpression()), !dbg !2205
  %3487 = load i32, i32* @x.35
  %3488 = load i32, i32* @y.36
  %3489 = sub i32 %3487, 1
  %3490 = mul i32 %3487, %3489
  %3491 = urem i32 %3490, 2
  %3492 = icmp eq i32 %3491, 0
  %3493 = icmp slt i32 %3488, 10
  %3494 = or i1 %3492, %3493
  br i1 %3494, label %originalBB1200, label %originalBB1200alteredBB

originalBB1200:                                   ; preds = %3486, %originalBB1200alteredBB
  %3495 = load i8, i8* %34, align 1, !dbg !2206
  %3496 = trunc i8 %3495 to i1, !dbg !2206
  %3497 = load i32, i32* @x.35
  %3498 = load i32, i32* @y.36
  %3499 = sub i32 %3497, 1
  %3500 = mul i32 %3497, %3499
  %3501 = urem i32 %3500, 2
  %3502 = icmp eq i32 %3501, 0
  %3503 = icmp slt i32 %3498, 10
  %3504 = or i1 %3502, %3503
  br i1 %3504, label %originalBBpart21202, label %originalBB1200alteredBB

originalBBpart21202:                              ; preds = %originalBB1200
  br i1 %3496, label %3505, label %3533, !dbg !2208

3505:                                             ; preds = %originalBBpart21202
  %3506 = load i32, i32* @x.35
  %3507 = load i32, i32* @y.36
  %3508 = sub i32 %3506, 1
  %3509 = mul i32 %3506, %3508
  %3510 = urem i32 %3509, 2
  %3511 = icmp eq i32 %3510, 0
  %3512 = icmp slt i32 %3507, 10
  %3513 = or i1 %3511, %3512
  br i1 %3513, label %originalBB1204, label %originalBB1204alteredBB

originalBB1204:                                   ; preds = %3505, %originalBB1204alteredBB
  store i64 1, i64* %44, align 8, !dbg !2209
  %3514 = call i16** @__ctype_b_loc() #15, !dbg !2211
  %3515 = load i16*, i16** %3514, align 8, !dbg !2211
  %3516 = load i8, i8* %39, align 1, !dbg !2211
  %3517 = zext i8 %3516 to i32, !dbg !2211
  %3518 = sext i32 %3517 to i64, !dbg !2211
  %3519 = getelementptr inbounds i16, i16* %3515, i64 %3518, !dbg !2211
  %3520 = load i16, i16* %3519, align 2, !dbg !2211
  %3521 = zext i16 %3520 to i32, !dbg !2211
  %3522 = and i32 %3521, 16384, !dbg !2211
  %3523 = icmp ne i32 %3522, 0, !dbg !2212
  %3524 = zext i1 %3523 to i8, !dbg !2213
  store i8 %3524, i8* %45, align 1, !dbg !2213
  %3525 = load i32, i32* @x.35
  %3526 = load i32, i32* @y.36
  %3527 = sub i32 %3525, 1
  %3528 = mul i32 %3525, %3527
  %3529 = urem i32 %3528, 2
  %3530 = icmp eq i32 %3529, 0
  %3531 = icmp slt i32 %3526, 10
  %3532 = or i1 %3530, %3531
  br i1 %3532, label %originalBBpart21216, label %originalBB1204alteredBB

originalBBpart21216:                              ; preds = %originalBB1204
  br label %4086, !dbg !2214

3533:                                             ; preds = %originalBBpart21202
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t* %46, metadata !2215, metadata !DIExpression()), !dbg !2232
  %3534 = load i32, i32* @x.35
  %3535 = load i32, i32* @y.36
  %3536 = sub i32 %3534, 1
  %3537 = mul i32 %3534, %3536
  %3538 = urem i32 %3537, 2
  %3539 = icmp eq i32 %3538, 0
  %3540 = icmp slt i32 %3535, 10
  %3541 = or i1 %3539, %3540
  br i1 %3541, label %originalBB1218, label %originalBB1218alteredBB

originalBB1218:                                   ; preds = %3533, %originalBB1218alteredBB
  %3542 = bitcast %struct.__mbstate_t* %46 to i8*, !dbg !2233
  call void @llvm.memset.p0i8.i64(i8* align 4 %3542, i8 0, i64 8, i1 false), !dbg !2233
  store i64 0, i64* %44, align 8, !dbg !2234
  store i8 1, i8* %45, align 1, !dbg !2235
  %3543 = load i64, i64* %22, align 8, !dbg !2236
  %3544 = trunc i64 %3543 to i32
  %3545 = mul i32 %3544, -2
  %3546 = mul i32 %3545, %3545
  %3547 = sub i32 %3546, %3545
  %3548 = srem i32 %3547, 2
  %3549 = icmp ne i32 %3548, 0
  %3550 = load i32, i32* @x.35
  %3551 = load i32, i32* @y.36
  %3552 = sub i32 %3550, 1
  %3553 = mul i32 %3550, %3552
  %3554 = urem i32 %3553, 2
  %3555 = icmp eq i32 %3554, 0
  %3556 = icmp slt i32 %3551, 10
  %3557 = or i1 %3555, %3556
  br i1 %3557, label %originalBBpart21251, label %originalBB1218alteredBB

originalBBpart21251:                              ; preds = %originalBB1218
  br i1 %3549, label %3558, label %3575

3558:                                             ; preds = %originalBBpart21251
  %3559 = load i32, i32* @x.35
  %3560 = load i32, i32* @y.36
  %3561 = sub i32 %3559, 1
  %3562 = mul i32 %3559, %3561
  %3563 = urem i32 %3562, 2
  %3564 = icmp eq i32 %3563, 0
  %3565 = icmp slt i32 %3560, 10
  %3566 = or i1 %3564, %3565
  br i1 %3566, label %originalBB1253, label %originalBB1253alteredBB

originalBB1253:                                   ; preds = %3558, %originalBB1253alteredBB
  %3567 = load i32, i32* @x.35
  %3568 = load i32, i32* @y.36
  %3569 = sub i32 %3567, 1
  %3570 = mul i32 %3567, %3569
  %3571 = urem i32 %3570, 2
  %3572 = icmp eq i32 %3571, 0
  %3573 = icmp slt i32 %3568, 10
  %3574 = or i1 %3572, %3573
  br i1 %3574, label %originalBBpart21255, label %originalBB1253alteredBB

originalBBpart21255:                              ; preds = %originalBB1253
  ret i64 0

3575:                                             ; preds = %originalBBpart21251
  %3576 = load i32, i32* @x.35
  %3577 = load i32, i32* @y.36
  %3578 = sub i32 %3576, 1
  %3579 = mul i32 %3576, %3578
  %3580 = urem i32 %3579, 2
  %3581 = icmp eq i32 %3580, 0
  %3582 = icmp slt i32 %3577, 10
  %3583 = or i1 %3581, %3582
  br i1 %3583, label %originalBB1257, label %originalBB1257alteredBB

originalBB1257:                                   ; preds = %3575, %originalBB1257alteredBB
  %3584 = icmp eq i64 %3543, -1, !dbg !2238
  %3585 = load i32, i32* @x.35
  %3586 = load i32, i32* @y.36
  %3587 = sub i32 %3585, 1
  %3588 = mul i32 %3585, %3587
  %3589 = urem i32 %3588, 2
  %3590 = icmp eq i32 %3589, 0
  %3591 = icmp slt i32 %3586, 10
  %3592 = or i1 %3590, %3591
  br i1 %3592, label %originalBBpart21259, label %originalBB1257alteredBB

originalBBpart21259:                              ; preds = %originalBB1257
  br i1 %3584, label %3593, label %3612, !dbg !2239

3593:                                             ; preds = %originalBBpart21259
  %3594 = load i32, i32* @x.35
  %3595 = load i32, i32* @y.36
  %3596 = sub i32 %3594, 1
  %3597 = mul i32 %3594, %3596
  %3598 = urem i32 %3597, 2
  %3599 = icmp eq i32 %3598, 0
  %3600 = icmp slt i32 %3595, 10
  %3601 = or i1 %3599, %3600
  br i1 %3601, label %originalBB1261, label %originalBB1261alteredBB

originalBB1261:                                   ; preds = %3593, %originalBB1261alteredBB
  %3602 = load i8*, i8** %21, align 8, !dbg !2240
  %3603 = call i64 @strlen(i8* %3602) #13, !dbg !2241
  store i64 %3603, i64* %22, align 8, !dbg !2242
  %3604 = load i32, i32* @x.35
  %3605 = load i32, i32* @y.36
  %3606 = sub i32 %3604, 1
  %3607 = mul i32 %3604, %3606
  %3608 = urem i32 %3607, 2
  %3609 = icmp eq i32 %3608, 0
  %3610 = icmp slt i32 %3605, 10
  %3611 = or i1 %3609, %3610
  br i1 %3611, label %originalBBpart21263, label %originalBB1261alteredBB

originalBBpart21263:                              ; preds = %originalBB1261
  br label %3612, !dbg !2243

3612:                                             ; preds = %originalBBpart21263, %originalBBpart21259
  %3613 = load i32, i32* @x.35
  %3614 = load i32, i32* @y.36
  %3615 = sub i32 %3613, 1
  %3616 = mul i32 %3613, %3615
  %3617 = urem i32 %3616, 2
  %3618 = icmp eq i32 %3617, 0
  %3619 = icmp slt i32 %3614, 10
  %3620 = or i1 %3618, %3619
  br i1 %3620, label %originalBB1265, label %originalBB1265alteredBB

originalBB1265:                                   ; preds = %3612, %originalBB1265alteredBB
  %3621 = load i32, i32* @x.35
  %3622 = load i32, i32* @y.36
  %3623 = sub i32 %3621, 1
  %3624 = mul i32 %3621, %3623
  %3625 = urem i32 %3624, 2
  %3626 = icmp eq i32 %3625, 0
  %3627 = icmp slt i32 %3622, 10
  %3628 = or i1 %3626, %3627
  br i1 %3628, label %originalBBpart21267, label %originalBB1265alteredBB

originalBBpart21267:                              ; preds = %originalBB1265
  br label %3629, !dbg !2244

3629:                                             ; preds = %originalBBpart21397, %originalBBpart21267
  call void @llvm.dbg.declare(metadata i32* %47, metadata !2245, metadata !DIExpression()), !dbg !2248
  call void @llvm.dbg.declare(metadata i64* %48, metadata !2249, metadata !DIExpression()), !dbg !2250
  %3630 = load i32, i32* @x.35
  %3631 = load i32, i32* @y.36
  %3632 = sub i32 %3630, 1
  %3633 = mul i32 %3630, %3632
  %3634 = urem i32 %3633, 2
  %3635 = icmp eq i32 %3634, 0
  %3636 = icmp slt i32 %3631, 10
  %3637 = or i1 %3635, %3636
  br i1 %3637, label %originalBB1269, label %originalBB1269alteredBB

originalBB1269:                                   ; preds = %3629, %originalBB1269alteredBB
  %3638 = load i8*, i8** %21, align 8, !dbg !2251
  %3639 = load i64, i64* %28, align 8, !dbg !2252
  %3640 = load i64, i64* %44, align 8, !dbg !2253
  %3641 = add i64 %3639, %3640, !dbg !2254
  %3642 = getelementptr inbounds i8, i8* %3638, i64 %3641, !dbg !2251
  %3643 = load i64, i64* %22, align 8, !dbg !2255
  %3644 = load i64, i64* %28, align 8, !dbg !2256
  %3645 = load i64, i64* %44, align 8, !dbg !2257
  %3646 = add i64 %3644, %3645, !dbg !2258
  %3647 = sub i64 %3643, %3646, !dbg !2259
  %3648 = call i64 @rpl_mbrtowc(i32* %47, i8* %3642, i64 %3647, %struct.__mbstate_t* %46), !dbg !2260
  store i64 %3648, i64* %48, align 8, !dbg !2250
  %3649 = load i64, i64* %48, align 8, !dbg !2261
  %3650 = icmp eq i64 %3649, 0, !dbg !2263
  %3651 = load i32, i32* @x.35
  %3652 = load i32, i32* @y.36
  %3653 = sub i32 %3651, 1
  %3654 = mul i32 %3651, %3653
  %3655 = urem i32 %3654, 2
  %3656 = icmp eq i32 %3655, 0
  %3657 = icmp slt i32 %3652, 10
  %3658 = or i1 %3656, %3657
  br i1 %3658, label %originalBBpart21284, label %originalBB1269alteredBB

originalBBpart21284:                              ; preds = %originalBB1269
  br i1 %3650, label %3659, label %3676, !dbg !2264

3659:                                             ; preds = %originalBBpart21284
  %3660 = load i32, i32* @x.35
  %3661 = load i32, i32* @y.36
  %3662 = sub i32 %3660, 1
  %3663 = mul i32 %3660, %3662
  %3664 = urem i32 %3663, 2
  %3665 = icmp eq i32 %3664, 0
  %3666 = icmp slt i32 %3661, 10
  %3667 = or i1 %3665, %3666
  br i1 %3667, label %originalBB1286, label %originalBB1286alteredBB

originalBB1286:                                   ; preds = %3659, %originalBB1286alteredBB
  %3668 = load i32, i32* @x.35
  %3669 = load i32, i32* @y.36
  %3670 = sub i32 %3668, 1
  %3671 = mul i32 %3668, %3670
  %3672 = urem i32 %3671, 2
  %3673 = icmp eq i32 %3672, 0
  %3674 = icmp slt i32 %3669, 10
  %3675 = or i1 %3673, %3674
  br i1 %3675, label %originalBBpart21288, label %originalBB1286alteredBB

originalBBpart21288:                              ; preds = %originalBB1286
  br label %4069, !dbg !2265

3676:                                             ; preds = %originalBBpart21284
  %3677 = load i64, i64* %48, align 8, !dbg !2266
  %3678 = icmp eq i64 %3677, -1, !dbg !2268
  br i1 %3678, label %3679, label %3680, !dbg !2269

3679:                                             ; preds = %3676
  store i8 0, i8* %45, align 1, !dbg !2270
  br label %4069, !dbg !2272

3680:                                             ; preds = %3676
  %3681 = load i32, i32* @x.35
  %3682 = load i32, i32* @y.36
  %3683 = sub i32 %3681, 1
  %3684 = mul i32 %3681, %3683
  %3685 = urem i32 %3684, 2
  %3686 = icmp eq i32 %3685, 0
  %3687 = icmp slt i32 %3682, 10
  %3688 = or i1 %3686, %3687
  br i1 %3688, label %originalBB1290, label %originalBB1290alteredBB

originalBB1290:                                   ; preds = %3680, %originalBB1290alteredBB
  %3689 = load i64, i64* %48, align 8, !dbg !2273
  %3690 = icmp eq i64 %3689, -2, !dbg !2275
  %3691 = load i32, i32* @x.35
  %3692 = load i32, i32* @y.36
  %3693 = sub i32 %3691, 1
  %3694 = mul i32 %3691, %3693
  %3695 = urem i32 %3694, 2
  %3696 = icmp eq i32 %3695, 0
  %3697 = icmp slt i32 %3692, 10
  %3698 = or i1 %3696, %3697
  br i1 %3698, label %originalBBpart21292, label %originalBB1290alteredBB

originalBBpart21292:                              ; preds = %originalBB1290
  br i1 %3690, label %3699, label %3801, !dbg !2276

3699:                                             ; preds = %originalBBpart21292
  store i8 0, i8* %45, align 1, !dbg !2277
  br label %3700, !dbg !2279

3700:                                             ; preds = %originalBBpart21321, %3699
  %3701 = load i32, i32* @x.35
  %3702 = load i32, i32* @y.36
  %3703 = sub i32 %3701, 1
  %3704 = mul i32 %3701, %3703
  %3705 = urem i32 %3704, 2
  %3706 = icmp eq i32 %3705, 0
  %3707 = icmp slt i32 %3702, 10
  %3708 = or i1 %3706, %3707
  br i1 %3708, label %originalBB1294, label %originalBB1294alteredBB

originalBB1294:                                   ; preds = %3700, %originalBB1294alteredBB
  %3709 = load i64, i64* %28, align 8, !dbg !2280
  %3710 = load i64, i64* %44, align 8, !dbg !2281
  %3711 = add i64 %3709, %3710, !dbg !2282
  %3712 = load i64, i64* %22, align 8, !dbg !2283
  %3713 = icmp ult i64 %3711, %3712, !dbg !2284
  %3714 = load i32, i32* @x.35
  %3715 = load i32, i32* @y.36
  %3716 = sub i32 %3714, 1
  %3717 = mul i32 %3714, %3716
  %3718 = urem i32 %3717, 2
  %3719 = icmp eq i32 %3718, 0
  %3720 = icmp slt i32 %3715, 10
  %3721 = or i1 %3719, %3720
  br i1 %3721, label %originalBBpart21301, label %originalBB1294alteredBB

originalBBpart21301:                              ; preds = %originalBB1294
  br i1 %3713, label %3722, label %3747, !dbg !2285

3722:                                             ; preds = %originalBBpart21301
  %3723 = load i32, i32* @x.35
  %3724 = load i32, i32* @y.36
  %3725 = sub i32 %3723, 1
  %3726 = mul i32 %3723, %3725
  %3727 = urem i32 %3726, 2
  %3728 = icmp eq i32 %3727, 0
  %3729 = icmp slt i32 %3724, 10
  %3730 = or i1 %3728, %3729
  br i1 %3730, label %originalBB1303, label %originalBB1303alteredBB

originalBB1303:                                   ; preds = %3722, %originalBB1303alteredBB
  %3731 = load i8*, i8** %21, align 8, !dbg !2286
  %3732 = load i64, i64* %28, align 8, !dbg !2287
  %3733 = load i64, i64* %44, align 8, !dbg !2288
  %3734 = add i64 %3732, %3733, !dbg !2289
  %3735 = getelementptr inbounds i8, i8* %3731, i64 %3734, !dbg !2286
  %3736 = load i8, i8* %3735, align 1, !dbg !2286
  %3737 = sext i8 %3736 to i32, !dbg !2286
  %3738 = icmp ne i32 %3737, 0, !dbg !2285
  %3739 = load i32, i32* @x.35
  %3740 = load i32, i32* @y.36
  %3741 = sub i32 %3739, 1
  %3742 = mul i32 %3739, %3741
  %3743 = urem i32 %3742, 2
  %3744 = icmp eq i32 %3743, 0
  %3745 = icmp slt i32 %3740, 10
  %3746 = or i1 %3744, %3745
  br i1 %3746, label %originalBBpart21305, label %originalBB1303alteredBB

originalBBpart21305:                              ; preds = %originalBB1303
  br label %3747

3747:                                             ; preds = %originalBBpart21305, %originalBBpart21301
  %3748 = phi i1 [ false, %originalBBpart21301 ], [ %3738, %originalBBpart21305 ], !dbg !2290
  %3749 = load i32, i32* @x.35
  %3750 = load i32, i32* @y.36
  %3751 = sub i32 %3749, 1
  %3752 = mul i32 %3749, %3751
  %3753 = urem i32 %3752, 2
  %3754 = icmp eq i32 %3753, 0
  %3755 = icmp slt i32 %3750, 10
  %3756 = or i1 %3754, %3755
  br i1 %3756, label %originalBB1307, label %originalBB1307alteredBB

originalBB1307:                                   ; preds = %3747, %originalBB1307alteredBB
  %3757 = load i32, i32* @x.35
  %3758 = load i32, i32* @y.36
  %3759 = sub i32 %3757, 1
  %3760 = mul i32 %3757, %3759
  %3761 = urem i32 %3760, 2
  %3762 = icmp eq i32 %3761, 0
  %3763 = icmp slt i32 %3758, 10
  %3764 = or i1 %3762, %3763
  br i1 %3764, label %originalBBpart21309, label %originalBB1307alteredBB

originalBBpart21309:                              ; preds = %originalBB1307
  br i1 %3748, label %3765, label %3784, !dbg !2279

3765:                                             ; preds = %originalBBpart21309
  %3766 = load i32, i32* @x.35
  %3767 = load i32, i32* @y.36
  %3768 = sub i32 %3766, 1
  %3769 = mul i32 %3766, %3768
  %3770 = urem i32 %3769, 2
  %3771 = icmp eq i32 %3770, 0
  %3772 = icmp slt i32 %3767, 10
  %3773 = or i1 %3771, %3772
  br i1 %3773, label %originalBB1311, label %originalBB1311alteredBB

originalBB1311:                                   ; preds = %3765, %originalBB1311alteredBB
  %3774 = load i64, i64* %44, align 8, !dbg !2291
  %3775 = add i64 %3774, 1, !dbg !2291
  store i64 %3775, i64* %44, align 8, !dbg !2291
  %3776 = load i32, i32* @x.35
  %3777 = load i32, i32* @y.36
  %3778 = sub i32 %3776, 1
  %3779 = mul i32 %3776, %3778
  %3780 = urem i32 %3779, 2
  %3781 = icmp eq i32 %3780, 0
  %3782 = icmp slt i32 %3777, 10
  %3783 = or i1 %3781, %3782
  br i1 %3783, label %originalBBpart21321, label %originalBB1311alteredBB

originalBBpart21321:                              ; preds = %originalBB1311
  br label %3700, !dbg !2279, !llvm.loop !2292

3784:                                             ; preds = %originalBBpart21309
  %3785 = load i32, i32* @x.35
  %3786 = load i32, i32* @y.36
  %3787 = sub i32 %3785, 1
  %3788 = mul i32 %3785, %3787
  %3789 = urem i32 %3788, 2
  %3790 = icmp eq i32 %3789, 0
  %3791 = icmp slt i32 %3786, 10
  %3792 = or i1 %3790, %3791
  br i1 %3792, label %originalBB1323, label %originalBB1323alteredBB

originalBB1323:                                   ; preds = %3784, %originalBB1323alteredBB
  %3793 = load i32, i32* @x.35
  %3794 = load i32, i32* @y.36
  %3795 = sub i32 %3793, 1
  %3796 = mul i32 %3793, %3795
  %3797 = urem i32 %3796, 2
  %3798 = icmp eq i32 %3797, 0
  %3799 = icmp slt i32 %3794, 10
  %3800 = or i1 %3798, %3799
  br i1 %3800, label %originalBBpart21325, label %originalBB1323alteredBB

originalBBpart21325:                              ; preds = %originalBB1323
  br label %4069, !dbg !2293

3801:                                             ; preds = %originalBBpart21292
  %3802 = load i32, i32* @x.35
  %3803 = load i32, i32* @y.36
  %3804 = sub i32 %3802, 1
  %3805 = mul i32 %3802, %3804
  %3806 = urem i32 %3805, 2
  %3807 = icmp eq i32 %3806, 0
  %3808 = icmp slt i32 %3803, 10
  %3809 = or i1 %3807, %3808
  br i1 %3809, label %originalBB1327, label %originalBB1327alteredBB

originalBB1327:                                   ; preds = %3801, %originalBB1327alteredBB
  %3810 = load i8, i8* %35, align 1, !dbg !2294
  %3811 = trunc i8 %3810 to i1, !dbg !2294
  %3812 = load i32, i32* @x.35
  %3813 = load i32, i32* @y.36
  %3814 = sub i32 %3812, 1
  %3815 = mul i32 %3812, %3814
  %3816 = urem i32 %3815, 2
  %3817 = icmp eq i32 %3816, 0
  %3818 = icmp slt i32 %3813, 10
  %3819 = or i1 %3817, %3818
  br i1 %3819, label %originalBBpart21329, label %originalBB1327alteredBB

originalBBpart21329:                              ; preds = %originalBB1327
  br i1 %3811, label %3820, label %3941, !dbg !2297

3820:                                             ; preds = %originalBBpart21329
  %3821 = load i32, i32* %23, align 4, !dbg !2298
  %3822 = icmp eq i32 %3821, 2, !dbg !2299
  br i1 %3822, label %3823, label %3941, !dbg !2300

3823:                                             ; preds = %3820
  call void @llvm.dbg.declare(metadata i64* %49, metadata !2301, metadata !DIExpression()), !dbg !2303
  %3824 = load i32, i32* @x.35
  %3825 = load i32, i32* @y.36
  %3826 = sub i32 %3824, 1
  %3827 = mul i32 %3824, %3826
  %3828 = urem i32 %3827, 2
  %3829 = icmp eq i32 %3828, 0
  %3830 = icmp slt i32 %3825, 10
  %3831 = or i1 %3829, %3830
  br i1 %3831, label %originalBB1331, label %originalBB1331alteredBB

originalBB1331:                                   ; preds = %3823, %originalBB1331alteredBB
  store i64 1, i64* %49, align 8, !dbg !2304
  %3832 = load i32, i32* @x.35
  %3833 = load i32, i32* @y.36
  %3834 = sub i32 %3832, 1
  %3835 = mul i32 %3832, %3834
  %3836 = urem i32 %3835, 2
  %3837 = icmp eq i32 %3836, 0
  %3838 = icmp slt i32 %3833, 10
  %3839 = or i1 %3837, %3838
  br i1 %3839, label %originalBBpart21333, label %originalBB1331alteredBB

originalBBpart21333:                              ; preds = %originalBB1331
  br label %3840, !dbg !2306

3840:                                             ; preds = %originalBBpart21356, %originalBBpart21333
  %3841 = load i32, i32* @x.35
  %3842 = load i32, i32* @y.36
  %3843 = sub i32 %3841, 1
  %3844 = mul i32 %3841, %3843
  %3845 = urem i32 %3844, 2
  %3846 = icmp eq i32 %3845, 0
  %3847 = icmp slt i32 %3842, 10
  %3848 = or i1 %3846, %3847
  br i1 %3848, label %originalBB1335, label %originalBB1335alteredBB

originalBB1335:                                   ; preds = %3840, %originalBB1335alteredBB
  %3849 = load i64, i64* %49, align 8, !dbg !2307
  %3850 = load i64, i64* %48, align 8, !dbg !2309
  %3851 = icmp ult i64 %3849, %3850, !dbg !2310
  %3852 = load i32, i32* @x.35
  %3853 = load i32, i32* @y.36
  %3854 = sub i32 %3852, 1
  %3855 = mul i32 %3852, %3854
  %3856 = urem i32 %3855, 2
  %3857 = icmp eq i32 %3856, 0
  %3858 = icmp slt i32 %3853, 10
  %3859 = or i1 %3857, %3858
  br i1 %3859, label %originalBBpart21337, label %originalBB1335alteredBB

originalBBpart21337:                              ; preds = %originalBB1335
  br i1 %3851, label %3860, label %3924, !dbg !2311

3860:                                             ; preds = %originalBBpart21337
  %3861 = load i8*, i8** %21, align 8, !dbg !2312
  %3862 = load i64, i64* %28, align 8, !dbg !2313
  %3863 = load i64, i64* %44, align 8, !dbg !2314
  %3864 = add i64 %3862, %3863, !dbg !2315
  %3865 = load i64, i64* %49, align 8, !dbg !2316
  %3866 = add i64 %3864, %3865, !dbg !2317
  %3867 = getelementptr inbounds i8, i8* %3861, i64 %3866, !dbg !2312
  %3868 = load i8, i8* %3867, align 1, !dbg !2312
  %3869 = sext i8 %3868 to i32, !dbg !2312
  switch i32 %3869, label %3887 [
    i32 91, label %3870
    i32 92, label %3870
    i32 94, label %3870
    i32 96, label %3870
    i32 124, label %3870
  ], !dbg !2318

3870:                                             ; preds = %3860, %3860, %3860, %3860, %3860
  %3871 = load i32, i32* @x.35
  %3872 = load i32, i32* @y.36
  %3873 = sub i32 %3871, 1
  %3874 = mul i32 %3871, %3873
  %3875 = urem i32 %3874, 2
  %3876 = icmp eq i32 %3875, 0
  %3877 = icmp slt i32 %3872, 10
  %3878 = or i1 %3876, %3877
  br i1 %3878, label %originalBB1339, label %originalBB1339alteredBB

originalBB1339:                                   ; preds = %3870, %originalBB1339alteredBB
  %3879 = load i32, i32* @x.35
  %3880 = load i32, i32* @y.36
  %3881 = sub i32 %3879, 1
  %3882 = mul i32 %3879, %3881
  %3883 = urem i32 %3882, 2
  %3884 = icmp eq i32 %3883, 0
  %3885 = icmp slt i32 %3880, 10
  %3886 = or i1 %3884, %3885
  br i1 %3886, label %originalBBpart21341, label %originalBB1339alteredBB

originalBBpart21341:                              ; preds = %originalBB1339
  br label %6709, !dbg !2319

3887:                                             ; preds = %3860
  br label %3888, !dbg !2321

3888:                                             ; preds = %3887
  %3889 = load i32, i32* @x.35
  %3890 = load i32, i32* @y.36
  %3891 = sub i32 %3889, 1
  %3892 = mul i32 %3889, %3891
  %3893 = urem i32 %3892, 2
  %3894 = icmp eq i32 %3893, 0
  %3895 = icmp slt i32 %3890, 10
  %3896 = or i1 %3894, %3895
  br i1 %3896, label %originalBB1343, label %originalBB1343alteredBB

originalBB1343:                                   ; preds = %3888, %originalBB1343alteredBB
  %3897 = load i32, i32* @x.35
  %3898 = load i32, i32* @y.36
  %3899 = sub i32 %3897, 1
  %3900 = mul i32 %3897, %3899
  %3901 = urem i32 %3900, 2
  %3902 = icmp eq i32 %3901, 0
  %3903 = icmp slt i32 %3898, 10
  %3904 = or i1 %3902, %3903
  br i1 %3904, label %originalBBpart21345, label %originalBB1343alteredBB

originalBBpart21345:                              ; preds = %originalBB1343
  br label %3905, !dbg !2322

3905:                                             ; preds = %originalBBpart21345
  %3906 = load i32, i32* @x.35
  %3907 = load i32, i32* @y.36
  %3908 = sub i32 %3906, 1
  %3909 = mul i32 %3906, %3908
  %3910 = urem i32 %3909, 2
  %3911 = icmp eq i32 %3910, 0
  %3912 = icmp slt i32 %3907, 10
  %3913 = or i1 %3911, %3912
  br i1 %3913, label %originalBB1347, label %originalBB1347alteredBB

originalBB1347:                                   ; preds = %3905, %originalBB1347alteredBB
  %3914 = load i64, i64* %49, align 8, !dbg !2323
  %3915 = add i64 %3914, 1, !dbg !2323
  store i64 %3915, i64* %49, align 8, !dbg !2323
  %3916 = load i32, i32* @x.35
  %3917 = load i32, i32* @y.36
  %3918 = sub i32 %3916, 1
  %3919 = mul i32 %3916, %3918
  %3920 = urem i32 %3919, 2
  %3921 = icmp eq i32 %3920, 0
  %3922 = icmp slt i32 %3917, 10
  %3923 = or i1 %3921, %3922
  br i1 %3923, label %originalBBpart21356, label %originalBB1347alteredBB

originalBBpart21356:                              ; preds = %originalBB1347
  br label %3840, !dbg !2324, !llvm.loop !2325

3924:                                             ; preds = %originalBBpart21337
  %3925 = load i32, i32* @x.35
  %3926 = load i32, i32* @y.36
  %3927 = sub i32 %3925, 1
  %3928 = mul i32 %3925, %3927
  %3929 = urem i32 %3928, 2
  %3930 = icmp eq i32 %3929, 0
  %3931 = icmp slt i32 %3926, 10
  %3932 = or i1 %3930, %3931
  br i1 %3932, label %originalBB1358, label %originalBB1358alteredBB

originalBB1358:                                   ; preds = %3924, %originalBB1358alteredBB
  %3933 = load i32, i32* @x.35
  %3934 = load i32, i32* @y.36
  %3935 = sub i32 %3933, 1
  %3936 = mul i32 %3933, %3935
  %3937 = urem i32 %3936, 2
  %3938 = icmp eq i32 %3937, 0
  %3939 = icmp slt i32 %3934, 10
  %3940 = or i1 %3938, %3939
  br i1 %3940, label %originalBBpart21360, label %originalBB1358alteredBB

originalBBpart21360:                              ; preds = %originalBB1358
  br label %3941, !dbg !2327

3941:                                             ; preds = %originalBBpart21360, %3820, %originalBBpart21329
  %3942 = load i32, i32* @x.35
  %3943 = load i32, i32* @y.36
  %3944 = sub i32 %3942, 1
  %3945 = mul i32 %3942, %3944
  %3946 = urem i32 %3945, 2
  %3947 = icmp eq i32 %3946, 0
  %3948 = icmp slt i32 %3943, 10
  %3949 = or i1 %3947, %3948
  br i1 %3949, label %originalBB1362, label %originalBB1362alteredBB

originalBB1362:                                   ; preds = %3941, %originalBB1362alteredBB
  %3950 = load i32, i32* %47, align 4, !dbg !2328
  %3951 = call i32 @iswprint(i32 %3950) #10, !dbg !2330
  %3952 = icmp ne i32 %3951, 0, !dbg !2330
  %3953 = load i32, i32* @x.35
  %3954 = load i32, i32* @y.36
  %3955 = sub i32 %3953, 1
  %3956 = mul i32 %3953, %3955
  %3957 = urem i32 %3956, 2
  %3958 = icmp eq i32 %3957, 0
  %3959 = icmp slt i32 %3954, 10
  %3960 = or i1 %3958, %3959
  br i1 %3960, label %originalBBpart21364, label %originalBB1362alteredBB

originalBBpart21364:                              ; preds = %originalBB1362
  br i1 %3952, label %3978, label %3961, !dbg !2331

3961:                                             ; preds = %originalBBpart21364
  %3962 = load i32, i32* @x.35
  %3963 = load i32, i32* @y.36
  %3964 = sub i32 %3962, 1
  %3965 = mul i32 %3962, %3964
  %3966 = urem i32 %3965, 2
  %3967 = icmp eq i32 %3966, 0
  %3968 = icmp slt i32 %3963, 10
  %3969 = or i1 %3967, %3968
  br i1 %3969, label %originalBB1366, label %originalBB1366alteredBB

originalBB1366:                                   ; preds = %3961, %originalBB1366alteredBB
  store i8 0, i8* %45, align 1, !dbg !2332
  %3970 = load i32, i32* @x.35
  %3971 = load i32, i32* @y.36
  %3972 = sub i32 %3970, 1
  %3973 = mul i32 %3970, %3972
  %3974 = urem i32 %3973, 2
  %3975 = icmp eq i32 %3974, 0
  %3976 = icmp slt i32 %3971, 10
  %3977 = or i1 %3975, %3976
  br i1 %3977, label %originalBBpart21368, label %originalBB1366alteredBB

originalBBpart21368:                              ; preds = %originalBB1366
  br label %3978, !dbg !2333

3978:                                             ; preds = %originalBBpart21368, %originalBBpart21364
  %3979 = load i32, i32* @x.35
  %3980 = load i32, i32* @y.36
  %3981 = sub i32 %3979, 1
  %3982 = mul i32 %3979, %3981
  %3983 = urem i32 %3982, 2
  %3984 = icmp eq i32 %3983, 0
  %3985 = icmp slt i32 %3980, 10
  %3986 = or i1 %3984, %3985
  br i1 %3986, label %originalBB1370, label %originalBB1370alteredBB

originalBB1370:                                   ; preds = %3978, %originalBB1370alteredBB
  %3987 = load i64, i64* %48, align 8, !dbg !2334
  %3988 = load i64, i64* %44, align 8, !dbg !2335
  %3989 = add i64 %3988, %3987, !dbg !2335
  store i64 %3989, i64* %44, align 8, !dbg !2335
  %3990 = load i32, i32* @x.35
  %3991 = load i32, i32* @y.36
  %3992 = sub i32 %3990, 1
  %3993 = mul i32 %3990, %3992
  %3994 = urem i32 %3993, 2
  %3995 = icmp eq i32 %3994, 0
  %3996 = icmp slt i32 %3991, 10
  %3997 = or i1 %3995, %3996
  br i1 %3997, label %originalBBpart21376, label %originalBB1370alteredBB

originalBBpart21376:                              ; preds = %originalBB1370
  br label %3998

3998:                                             ; preds = %originalBBpart21376
  %3999 = load i32, i32* @x.35
  %4000 = load i32, i32* @y.36
  %4001 = sub i32 %3999, 1
  %4002 = mul i32 %3999, %4001
  %4003 = urem i32 %4002, 2
  %4004 = icmp eq i32 %4003, 0
  %4005 = icmp slt i32 %4000, 10
  %4006 = or i1 %4004, %4005
  br i1 %4006, label %originalBB1378, label %originalBB1378alteredBB

originalBB1378:                                   ; preds = %3998, %originalBB1378alteredBB
  %4007 = load i32, i32* @x.35
  %4008 = load i32, i32* @y.36
  %4009 = sub i32 %4007, 1
  %4010 = mul i32 %4007, %4009
  %4011 = urem i32 %4010, 2
  %4012 = icmp eq i32 %4011, 0
  %4013 = icmp slt i32 %4008, 10
  %4014 = or i1 %4012, %4013
  br i1 %4014, label %originalBBpart21380, label %originalBB1378alteredBB

originalBBpart21380:                              ; preds = %originalBB1378
  br label %4015

4015:                                             ; preds = %originalBBpart21380
  %4016 = load i32, i32* @x.35
  %4017 = load i32, i32* @y.36
  %4018 = sub i32 %4016, 1
  %4019 = mul i32 %4016, %4018
  %4020 = urem i32 %4019, 2
  %4021 = icmp eq i32 %4020, 0
  %4022 = icmp slt i32 %4017, 10
  %4023 = or i1 %4021, %4022
  br i1 %4023, label %originalBB1382, label %originalBB1382alteredBB

originalBB1382:                                   ; preds = %4015, %originalBB1382alteredBB
  %4024 = load i32, i32* @x.35
  %4025 = load i32, i32* @y.36
  %4026 = sub i32 %4024, 1
  %4027 = mul i32 %4024, %4026
  %4028 = urem i32 %4027, 2
  %4029 = icmp eq i32 %4028, 0
  %4030 = icmp slt i32 %4025, 10
  %4031 = or i1 %4029, %4030
  br i1 %4031, label %originalBBpart21384, label %originalBB1382alteredBB

originalBBpart21384:                              ; preds = %originalBB1382
  br label %4032

4032:                                             ; preds = %originalBBpart21384
  %4033 = load i32, i32* @x.35
  %4034 = load i32, i32* @y.36
  %4035 = sub i32 %4033, 1
  %4036 = mul i32 %4033, %4035
  %4037 = urem i32 %4036, 2
  %4038 = icmp eq i32 %4037, 0
  %4039 = icmp slt i32 %4034, 10
  %4040 = or i1 %4038, %4039
  br i1 %4040, label %originalBB1386, label %originalBB1386alteredBB

originalBB1386:                                   ; preds = %4032, %originalBB1386alteredBB
  %4041 = load i32, i32* @x.35
  %4042 = load i32, i32* @y.36
  %4043 = sub i32 %4041, 1
  %4044 = mul i32 %4041, %4043
  %4045 = urem i32 %4044, 2
  %4046 = icmp eq i32 %4045, 0
  %4047 = icmp slt i32 %4042, 10
  %4048 = or i1 %4046, %4047
  br i1 %4048, label %originalBBpart21388, label %originalBB1386alteredBB

originalBBpart21388:                              ; preds = %originalBB1386
  br label %4049, !dbg !2336

4049:                                             ; preds = %originalBBpart21388
  %4050 = load i32, i32* @x.35
  %4051 = load i32, i32* @y.36
  %4052 = sub i32 %4050, 1
  %4053 = mul i32 %4050, %4052
  %4054 = urem i32 %4053, 2
  %4055 = icmp eq i32 %4054, 0
  %4056 = icmp slt i32 %4051, 10
  %4057 = or i1 %4055, %4056
  br i1 %4057, label %originalBB1390, label %originalBB1390alteredBB

originalBB1390:                                   ; preds = %4049, %originalBB1390alteredBB
  %4058 = call i32 @mbsinit(%struct.__mbstate_t* %46) #13, !dbg !2337
  %4059 = icmp ne i32 %4058, 0, !dbg !2338
  %4060 = xor i1 %4059, true, !dbg !2338
  %4061 = load i32, i32* @x.35
  %4062 = load i32, i32* @y.36
  %4063 = sub i32 %4061, 1
  %4064 = mul i32 %4061, %4063
  %4065 = urem i32 %4064, 2
  %4066 = icmp eq i32 %4065, 0
  %4067 = icmp slt i32 %4062, 10
  %4068 = or i1 %4066, %4067
  br i1 %4068, label %originalBBpart21397, label %originalBB1390alteredBB

originalBBpart21397:                              ; preds = %originalBB1390
  br i1 %4060, label %3629, label %4069, !dbg !2336, !llvm.loop !2339

4069:                                             ; preds = %originalBBpart21397, %originalBBpart21325, %3679, %originalBBpart21288
  %4070 = load i32, i32* @x.35
  %4071 = load i32, i32* @y.36
  %4072 = sub i32 %4070, 1
  %4073 = mul i32 %4070, %4072
  %4074 = urem i32 %4073, 2
  %4075 = icmp eq i32 %4074, 0
  %4076 = icmp slt i32 %4071, 10
  %4077 = or i1 %4075, %4076
  br i1 %4077, label %originalBB1399, label %originalBB1399alteredBB

originalBB1399:                                   ; preds = %4069, %originalBB1399alteredBB
  %4078 = load i32, i32* @x.35
  %4079 = load i32, i32* @y.36
  %4080 = sub i32 %4078, 1
  %4081 = mul i32 %4078, %4080
  %4082 = urem i32 %4081, 2
  %4083 = icmp eq i32 %4082, 0
  %4084 = icmp slt i32 %4079, 10
  %4085 = or i1 %4083, %4084
  br i1 %4085, label %originalBBpart21401, label %originalBB1399alteredBB

originalBBpart21401:                              ; preds = %originalBB1399
  br label %4086

4086:                                             ; preds = %originalBBpart21401, %originalBBpart21216
  %4087 = load i32, i32* @x.35
  %4088 = load i32, i32* @y.36
  %4089 = sub i32 %4087, 1
  %4090 = mul i32 %4087, %4089
  %4091 = urem i32 %4090, 2
  %4092 = icmp eq i32 %4091, 0
  %4093 = icmp slt i32 %4088, 10
  %4094 = or i1 %4092, %4093
  br i1 %4094, label %originalBB1403, label %originalBB1403alteredBB

originalBB1403:                                   ; preds = %4086, %originalBB1403alteredBB
  %4095 = load i8, i8* %45, align 1, !dbg !2341
  %4096 = trunc i8 %4095 to i1, !dbg !2341
  %4097 = zext i1 %4096 to i8, !dbg !2342
  store i8 %4097, i8* %43, align 1, !dbg !2342
  %4098 = load i64, i64* %44, align 8, !dbg !2343
  %4099 = icmp ult i64 1, %4098, !dbg !2345
  %4100 = load i32, i32* @x.35
  %4101 = load i32, i32* @y.36
  %4102 = sub i32 %4100, 1
  %4103 = mul i32 %4100, %4102
  %4104 = urem i32 %4103, 2
  %4105 = icmp eq i32 %4104, 0
  %4106 = icmp slt i32 %4101, 10
  %4107 = or i1 %4105, %4106
  br i1 %4107, label %originalBBpart21405, label %originalBB1403alteredBB

originalBBpart21405:                              ; preds = %originalBB1403
  br i1 %4099, label %4114, label %4108, !dbg !2346

4108:                                             ; preds = %originalBBpart21405
  %4109 = load i8, i8* %33, align 1, !dbg !2347
  %4110 = trunc i8 %4109 to i1, !dbg !2347
  br i1 %4110, label %4111, label %5230, !dbg !2348

4111:                                             ; preds = %4108
  %4112 = load i8, i8* %45, align 1, !dbg !2349
  %4113 = trunc i8 %4112 to i1, !dbg !2349
  br i1 %4113, label %5230, label %4114, !dbg !2350

4114:                                             ; preds = %4111, %originalBBpart21405
  call void @llvm.dbg.declare(metadata i64* %50, metadata !2351, metadata !DIExpression()), !dbg !2353
  %4115 = load i32, i32* @x.35
  %4116 = load i32, i32* @y.36
  %4117 = sub i32 %4115, 1
  %4118 = mul i32 %4115, %4117
  %4119 = urem i32 %4118, 2
  %4120 = icmp eq i32 %4119, 0
  %4121 = icmp slt i32 %4116, 10
  %4122 = or i1 %4120, %4121
  br i1 %4122, label %originalBB1407, label %originalBB1407alteredBB

originalBB1407:                                   ; preds = %4114, %originalBB1407alteredBB
  %4123 = load i64, i64* %28, align 8, !dbg !2354
  %4124 = load i64, i64* %44, align 8, !dbg !2355
  %4125 = add i64 %4123, %4124, !dbg !2356
  store i64 %4125, i64* %50, align 8, !dbg !2353
  %4126 = load i32, i32* @x.35
  %4127 = load i32, i32* @y.36
  %4128 = sub i32 %4126, 1
  %4129 = mul i32 %4126, %4128
  %4130 = urem i32 %4129, 2
  %4131 = icmp eq i32 %4130, 0
  %4132 = icmp slt i32 %4127, 10
  %4133 = or i1 %4131, %4132
  br i1 %4133, label %originalBBpart21422, label %originalBB1407alteredBB

originalBBpart21422:                              ; preds = %originalBB1407
  br label %4134, !dbg !2357

4134:                                             ; preds = %originalBBpart21789, %originalBBpart21422
  %4135 = load i8, i8* %33, align 1, !dbg !2358
  %4136 = trunc i8 %4135 to i1, !dbg !2358
  br i1 %4136, label %4137, label %4738, !dbg !2363

4137:                                             ; preds = %4134
  %4138 = load i32, i32* @x.35
  %4139 = load i32, i32* @y.36
  %4140 = sub i32 %4138, 1
  %4141 = mul i32 %4138, %4140
  %4142 = urem i32 %4141, 2
  %4143 = icmp eq i32 %4142, 0
  %4144 = icmp slt i32 %4139, 10
  %4145 = or i1 %4143, %4144
  br i1 %4145, label %originalBB1424, label %originalBB1424alteredBB

originalBB1424:                                   ; preds = %4137, %originalBB1424alteredBB
  %4146 = load i8, i8* %45, align 1, !dbg !2364
  %4147 = trunc i8 %4146 to i1, !dbg !2364
  %4148 = load i32, i32* @x.35
  %4149 = load i32, i32* @y.36
  %4150 = sub i32 %4148, 1
  %4151 = mul i32 %4148, %4150
  %4152 = urem i32 %4151, 2
  %4153 = icmp eq i32 %4152, 0
  %4154 = icmp slt i32 %4149, 10
  %4155 = or i1 %4153, %4154
  br i1 %4155, label %originalBBpart21426, label %originalBB1424alteredBB

originalBBpart21426:                              ; preds = %originalBB1424
  br i1 %4147, label %4738, label %4156, !dbg !2365

4156:                                             ; preds = %originalBBpart21426
  %4157 = load i32, i32* @x.35
  %4158 = load i32, i32* @y.36
  %4159 = sub i32 %4157, 1
  %4160 = mul i32 %4157, %4159
  %4161 = urem i32 %4160, 2
  %4162 = icmp eq i32 %4161, 0
  %4163 = icmp slt i32 %4158, 10
  %4164 = or i1 %4162, %4163
  br i1 %4164, label %originalBB1428, label %originalBB1428alteredBB

originalBB1428:                                   ; preds = %4156, %originalBB1428alteredBB
  %4165 = load i32, i32* @x.35
  %4166 = load i32, i32* @y.36
  %4167 = sub i32 %4165, 1
  %4168 = mul i32 %4165, %4167
  %4169 = urem i32 %4168, 2
  %4170 = icmp eq i32 %4169, 0
  %4171 = icmp slt i32 %4166, 10
  %4172 = or i1 %4170, %4171
  br i1 %4172, label %originalBBpart21430, label %originalBB1428alteredBB

originalBBpart21430:                              ; preds = %originalBB1428
  br label %4173, !dbg !2366

4173:                                             ; preds = %originalBBpart21430
  %4174 = load i32, i32* @x.35
  %4175 = load i32, i32* @y.36
  %4176 = sub i32 %4174, 1
  %4177 = mul i32 %4174, %4176
  %4178 = urem i32 %4177, 2
  %4179 = icmp eq i32 %4178, 0
  %4180 = icmp slt i32 %4175, 10
  %4181 = or i1 %4179, %4180
  br i1 %4181, label %originalBB1432, label %originalBB1432alteredBB

originalBB1432:                                   ; preds = %4173, %originalBB1432alteredBB
  %4182 = load i8, i8* %35, align 1, !dbg !2368
  %4183 = trunc i8 %4182 to i1, !dbg !2368
  %4184 = load i32, i32* @x.35
  %4185 = load i32, i32* @y.36
  %4186 = sub i32 %4184, 1
  %4187 = mul i32 %4184, %4186
  %4188 = urem i32 %4187, 2
  %4189 = icmp eq i32 %4188, 0
  %4190 = icmp slt i32 %4185, 10
  %4191 = or i1 %4189, %4190
  br i1 %4191, label %originalBBpart21434, label %originalBB1432alteredBB

originalBBpart21434:                              ; preds = %originalBB1432
  br i1 %4183, label %4192, label %4209, !dbg !2371

4192:                                             ; preds = %originalBBpart21434
  %4193 = load i32, i32* @x.35
  %4194 = load i32, i32* @y.36
  %4195 = sub i32 %4193, 1
  %4196 = mul i32 %4193, %4195
  %4197 = urem i32 %4196, 2
  %4198 = icmp eq i32 %4197, 0
  %4199 = icmp slt i32 %4194, 10
  %4200 = or i1 %4198, %4199
  br i1 %4200, label %originalBB1436, label %originalBB1436alteredBB

originalBB1436:                                   ; preds = %4192, %originalBB1436alteredBB
  %4201 = load i32, i32* @x.35
  %4202 = load i32, i32* @y.36
  %4203 = sub i32 %4201, 1
  %4204 = mul i32 %4201, %4203
  %4205 = urem i32 %4204, 2
  %4206 = icmp eq i32 %4205, 0
  %4207 = icmp slt i32 %4202, 10
  %4208 = or i1 %4206, %4207
  br i1 %4208, label %originalBBpart21438, label %originalBB1436alteredBB

originalBBpart21438:                              ; preds = %originalBB1436
  br label %6709, !dbg !2368

4209:                                             ; preds = %originalBBpart21434
  %4210 = load i32, i32* @x.35
  %4211 = load i32, i32* @y.36
  %4212 = sub i32 %4210, 1
  %4213 = mul i32 %4210, %4212
  %4214 = urem i32 %4213, 2
  %4215 = icmp eq i32 %4214, 0
  %4216 = icmp slt i32 %4211, 10
  %4217 = or i1 %4215, %4216
  br i1 %4217, label %originalBB1440, label %originalBB1440alteredBB

originalBB1440:                                   ; preds = %4209, %originalBB1440alteredBB
  store i8 1, i8* %42, align 1, !dbg !2371
  %4218 = load i32, i32* %23, align 4, !dbg !2372
  %4219 = icmp eq i32 %4218, 2, !dbg !2372
  %4220 = load i32, i32* @x.35
  %4221 = load i32, i32* @y.36
  %4222 = sub i32 %4220, 1
  %4223 = mul i32 %4220, %4222
  %4224 = urem i32 %4223, 2
  %4225 = icmp eq i32 %4224, 0
  %4226 = icmp slt i32 %4221, 10
  %4227 = or i1 %4225, %4226
  br i1 %4227, label %originalBBpart21442, label %originalBB1440alteredBB

originalBBpart21442:                              ; preds = %originalBB1440
  br i1 %4219, label %4228, label %4476, !dbg !2372

4228:                                             ; preds = %originalBBpart21442
  %4229 = load i32, i32* @x.35
  %4230 = load i32, i32* @y.36
  %4231 = sub i32 %4229, 1
  %4232 = mul i32 %4229, %4231
  %4233 = urem i32 %4232, 2
  %4234 = icmp eq i32 %4233, 0
  %4235 = icmp slt i32 %4230, 10
  %4236 = or i1 %4234, %4235
  br i1 %4236, label %originalBB1444, label %originalBB1444alteredBB

originalBB1444:                                   ; preds = %4228, %originalBB1444alteredBB
  %4237 = load i8, i8* %36, align 1, !dbg !2372
  %4238 = trunc i8 %4237 to i1, !dbg !2372
  %4239 = load i32, i32* @x.35
  %4240 = load i32, i32* @y.36
  %4241 = sub i32 %4239, 1
  %4242 = mul i32 %4239, %4241
  %4243 = urem i32 %4242, 2
  %4244 = icmp eq i32 %4243, 0
  %4245 = icmp slt i32 %4240, 10
  %4246 = or i1 %4244, %4245
  br i1 %4246, label %originalBBpart21446, label %originalBB1444alteredBB

originalBBpart21446:                              ; preds = %originalBB1444
  br i1 %4238, label %4476, label %4247, !dbg !2371

4247:                                             ; preds = %originalBBpart21446
  %4248 = load i32, i32* @x.35
  %4249 = load i32, i32* @y.36
  %4250 = sub i32 %4248, 1
  %4251 = mul i32 %4248, %4250
  %4252 = urem i32 %4251, 2
  %4253 = icmp eq i32 %4252, 0
  %4254 = icmp slt i32 %4249, 10
  %4255 = or i1 %4253, %4254
  br i1 %4255, label %originalBB1448, label %originalBB1448alteredBB

originalBB1448:                                   ; preds = %4247, %originalBB1448alteredBB
  %4256 = load i32, i32* @x.35
  %4257 = load i32, i32* @y.36
  %4258 = sub i32 %4256, 1
  %4259 = mul i32 %4256, %4258
  %4260 = urem i32 %4259, 2
  %4261 = icmp eq i32 %4260, 0
  %4262 = icmp slt i32 %4257, 10
  %4263 = or i1 %4261, %4262
  br i1 %4263, label %originalBBpart21450, label %originalBB1448alteredBB

originalBBpart21450:                              ; preds = %originalBB1448
  br label %4264, !dbg !2374

4264:                                             ; preds = %originalBBpart21450
  %4265 = load i32, i32* @x.35
  %4266 = load i32, i32* @y.36
  %4267 = sub i32 %4265, 1
  %4268 = mul i32 %4265, %4267
  %4269 = urem i32 %4268, 2
  %4270 = icmp eq i32 %4269, 0
  %4271 = icmp slt i32 %4266, 10
  %4272 = or i1 %4270, %4271
  br i1 %4272, label %originalBB1452, label %originalBB1452alteredBB

originalBB1452:                                   ; preds = %4264, %originalBB1452alteredBB
  %4273 = load i64, i64* %29, align 8, !dbg !2376
  %4274 = load i64, i64* %20, align 8, !dbg !2376
  %4275 = icmp ult i64 %4273, %4274, !dbg !2376
  %4276 = load i32, i32* @x.35
  %4277 = load i32, i32* @y.36
  %4278 = sub i32 %4276, 1
  %4279 = mul i32 %4276, %4278
  %4280 = urem i32 %4279, 2
  %4281 = icmp eq i32 %4280, 0
  %4282 = icmp slt i32 %4277, 10
  %4283 = or i1 %4281, %4282
  br i1 %4283, label %originalBBpart21454, label %originalBB1452alteredBB

originalBBpart21454:                              ; preds = %originalBB1452
  br i1 %4275, label %4284, label %4304, !dbg !2379

4284:                                             ; preds = %originalBBpart21454
  %4285 = load i32, i32* @x.35
  %4286 = load i32, i32* @y.36
  %4287 = sub i32 %4285, 1
  %4288 = mul i32 %4285, %4287
  %4289 = urem i32 %4288, 2
  %4290 = icmp eq i32 %4289, 0
  %4291 = icmp slt i32 %4286, 10
  %4292 = or i1 %4290, %4291
  br i1 %4292, label %originalBB1456, label %originalBB1456alteredBB

originalBB1456:                                   ; preds = %4284, %originalBB1456alteredBB
  %4293 = load i8*, i8** %19, align 8, !dbg !2376
  %4294 = load i64, i64* %29, align 8, !dbg !2376
  %4295 = getelementptr inbounds i8, i8* %4293, i64 %4294, !dbg !2376
  store i8 39, i8* %4295, align 1, !dbg !2376
  %4296 = load i32, i32* @x.35
  %4297 = load i32, i32* @y.36
  %4298 = sub i32 %4296, 1
  %4299 = mul i32 %4296, %4298
  %4300 = urem i32 %4299, 2
  %4301 = icmp eq i32 %4300, 0
  %4302 = icmp slt i32 %4297, 10
  %4303 = or i1 %4301, %4302
  br i1 %4303, label %originalBBpart21458, label %originalBB1456alteredBB

originalBBpart21458:                              ; preds = %originalBB1456
  br label %4304, !dbg !2376

4304:                                             ; preds = %originalBBpart21458, %originalBBpart21454
  %4305 = load i32, i32* @x.35
  %4306 = load i32, i32* @y.36
  %4307 = sub i32 %4305, 1
  %4308 = mul i32 %4305, %4307
  %4309 = urem i32 %4308, 2
  %4310 = icmp eq i32 %4309, 0
  %4311 = icmp slt i32 %4306, 10
  %4312 = or i1 %4310, %4311
  br i1 %4312, label %originalBB1460, label %originalBB1460alteredBB

originalBB1460:                                   ; preds = %4304, %originalBB1460alteredBB
  %4313 = load i64, i64* %29, align 8, !dbg !2379
  %4314 = add i64 %4313, 1, !dbg !2379
  store i64 %4314, i64* %29, align 8, !dbg !2379
  %4315 = load i32, i32* @x.35
  %4316 = load i32, i32* @y.36
  %4317 = sub i32 %4315, 1
  %4318 = mul i32 %4315, %4317
  %4319 = urem i32 %4318, 2
  %4320 = icmp eq i32 %4319, 0
  %4321 = icmp slt i32 %4316, 10
  %4322 = or i1 %4320, %4321
  br i1 %4322, label %originalBBpart21471, label %originalBB1460alteredBB

originalBBpart21471:                              ; preds = %originalBB1460
  br label %4323, !dbg !2379

4323:                                             ; preds = %originalBBpart21471
  %4324 = load i32, i32* @x.35
  %4325 = load i32, i32* @y.36
  %4326 = sub i32 %4324, 1
  %4327 = mul i32 %4324, %4326
  %4328 = urem i32 %4327, 2
  %4329 = icmp eq i32 %4328, 0
  %4330 = icmp slt i32 %4325, 10
  %4331 = or i1 %4329, %4330
  br i1 %4331, label %originalBB1473, label %originalBB1473alteredBB

originalBB1473:                                   ; preds = %4323, %originalBB1473alteredBB
  %4332 = load i32, i32* @x.35
  %4333 = load i32, i32* @y.36
  %4334 = sub i32 %4332, 1
  %4335 = mul i32 %4332, %4334
  %4336 = urem i32 %4335, 2
  %4337 = icmp eq i32 %4336, 0
  %4338 = icmp slt i32 %4333, 10
  %4339 = or i1 %4337, %4338
  br i1 %4339, label %originalBBpart21475, label %originalBB1473alteredBB

originalBBpart21475:                              ; preds = %originalBB1473
  br label %4340, !dbg !2374

4340:                                             ; preds = %originalBBpart21475
  %4341 = load i32, i32* @x.35
  %4342 = load i32, i32* @y.36
  %4343 = sub i32 %4341, 1
  %4344 = mul i32 %4341, %4343
  %4345 = urem i32 %4344, 2
  %4346 = icmp eq i32 %4345, 0
  %4347 = icmp slt i32 %4342, 10
  %4348 = or i1 %4346, %4347
  br i1 %4348, label %originalBB1477, label %originalBB1477alteredBB

originalBB1477:                                   ; preds = %4340, %originalBB1477alteredBB
  %4349 = load i64, i64* %29, align 8, !dbg !2380
  %4350 = load i64, i64* %20, align 8, !dbg !2380
  %4351 = icmp ult i64 %4349, %4350, !dbg !2380
  %4352 = load i32, i32* @x.35
  %4353 = load i32, i32* @y.36
  %4354 = sub i32 %4352, 1
  %4355 = mul i32 %4352, %4354
  %4356 = urem i32 %4355, 2
  %4357 = icmp eq i32 %4356, 0
  %4358 = icmp slt i32 %4353, 10
  %4359 = or i1 %4357, %4358
  br i1 %4359, label %originalBBpart21479, label %originalBB1477alteredBB

originalBBpart21479:                              ; preds = %originalBB1477
  br i1 %4351, label %4360, label %4380, !dbg !2383

4360:                                             ; preds = %originalBBpart21479
  %4361 = load i32, i32* @x.35
  %4362 = load i32, i32* @y.36
  %4363 = sub i32 %4361, 1
  %4364 = mul i32 %4361, %4363
  %4365 = urem i32 %4364, 2
  %4366 = icmp eq i32 %4365, 0
  %4367 = icmp slt i32 %4362, 10
  %4368 = or i1 %4366, %4367
  br i1 %4368, label %originalBB1481, label %originalBB1481alteredBB

originalBB1481:                                   ; preds = %4360, %originalBB1481alteredBB
  %4369 = load i8*, i8** %19, align 8, !dbg !2380
  %4370 = load i64, i64* %29, align 8, !dbg !2380
  %4371 = getelementptr inbounds i8, i8* %4369, i64 %4370, !dbg !2380
  store i8 36, i8* %4371, align 1, !dbg !2380
  %4372 = load i32, i32* @x.35
  %4373 = load i32, i32* @y.36
  %4374 = sub i32 %4372, 1
  %4375 = mul i32 %4372, %4374
  %4376 = urem i32 %4375, 2
  %4377 = icmp eq i32 %4376, 0
  %4378 = icmp slt i32 %4373, 10
  %4379 = or i1 %4377, %4378
  br i1 %4379, label %originalBBpart21483, label %originalBB1481alteredBB

originalBBpart21483:                              ; preds = %originalBB1481
  br label %4380, !dbg !2380

4380:                                             ; preds = %originalBBpart21483, %originalBBpart21479
  %4381 = load i32, i32* @x.35
  %4382 = load i32, i32* @y.36
  %4383 = sub i32 %4381, 1
  %4384 = mul i32 %4381, %4383
  %4385 = urem i32 %4384, 2
  %4386 = icmp eq i32 %4385, 0
  %4387 = icmp slt i32 %4382, 10
  %4388 = or i1 %4386, %4387
  br i1 %4388, label %originalBB1485, label %originalBB1485alteredBB

originalBB1485:                                   ; preds = %4380, %originalBB1485alteredBB
  %4389 = load i64, i64* %29, align 8, !dbg !2383
  %4390 = add i64 %4389, 1, !dbg !2383
  store i64 %4390, i64* %29, align 8, !dbg !2383
  %4391 = load i32, i32* @x.35
  %4392 = load i32, i32* @y.36
  %4393 = sub i32 %4391, 1
  %4394 = mul i32 %4391, %4393
  %4395 = urem i32 %4394, 2
  %4396 = icmp eq i32 %4395, 0
  %4397 = icmp slt i32 %4392, 10
  %4398 = or i1 %4396, %4397
  br i1 %4398, label %originalBBpart21500, label %originalBB1485alteredBB

originalBBpart21500:                              ; preds = %originalBB1485
  br label %4399, !dbg !2383

4399:                                             ; preds = %originalBBpart21500
  %4400 = load i32, i32* @x.35
  %4401 = load i32, i32* @y.36
  %4402 = sub i32 %4400, 1
  %4403 = mul i32 %4400, %4402
  %4404 = urem i32 %4403, 2
  %4405 = icmp eq i32 %4404, 0
  %4406 = icmp slt i32 %4401, 10
  %4407 = or i1 %4405, %4406
  br i1 %4407, label %originalBB1502, label %originalBB1502alteredBB

originalBB1502:                                   ; preds = %4399, %originalBB1502alteredBB
  %4408 = load i32, i32* @x.35
  %4409 = load i32, i32* @y.36
  %4410 = sub i32 %4408, 1
  %4411 = mul i32 %4408, %4410
  %4412 = urem i32 %4411, 2
  %4413 = icmp eq i32 %4412, 0
  %4414 = icmp slt i32 %4409, 10
  %4415 = or i1 %4413, %4414
  br i1 %4415, label %originalBBpart21504, label %originalBB1502alteredBB

originalBBpart21504:                              ; preds = %originalBB1502
  br label %4416, !dbg !2374

4416:                                             ; preds = %originalBBpart21504
  %4417 = load i32, i32* @x.35
  %4418 = load i32, i32* @y.36
  %4419 = sub i32 %4417, 1
  %4420 = mul i32 %4417, %4419
  %4421 = urem i32 %4420, 2
  %4422 = icmp eq i32 %4421, 0
  %4423 = icmp slt i32 %4418, 10
  %4424 = or i1 %4422, %4423
  br i1 %4424, label %originalBB1506, label %originalBB1506alteredBB

originalBB1506:                                   ; preds = %4416, %originalBB1506alteredBB
  %4425 = load i64, i64* %29, align 8, !dbg !2384
  %4426 = load i64, i64* %20, align 8, !dbg !2384
  %4427 = icmp ult i64 %4425, %4426, !dbg !2384
  %4428 = load i32, i32* @x.35
  %4429 = load i32, i32* @y.36
  %4430 = sub i32 %4428, 1
  %4431 = mul i32 %4428, %4430
  %4432 = urem i32 %4431, 2
  %4433 = icmp eq i32 %4432, 0
  %4434 = icmp slt i32 %4429, 10
  %4435 = or i1 %4433, %4434
  br i1 %4435, label %originalBBpart21508, label %originalBB1506alteredBB

originalBBpart21508:                              ; preds = %originalBB1506
  br i1 %4427, label %4436, label %4456, !dbg !2387

4436:                                             ; preds = %originalBBpart21508
  %4437 = load i32, i32* @x.35
  %4438 = load i32, i32* @y.36
  %4439 = sub i32 %4437, 1
  %4440 = mul i32 %4437, %4439
  %4441 = urem i32 %4440, 2
  %4442 = icmp eq i32 %4441, 0
  %4443 = icmp slt i32 %4438, 10
  %4444 = or i1 %4442, %4443
  br i1 %4444, label %originalBB1510, label %originalBB1510alteredBB

originalBB1510:                                   ; preds = %4436, %originalBB1510alteredBB
  %4445 = load i8*, i8** %19, align 8, !dbg !2384
  %4446 = load i64, i64* %29, align 8, !dbg !2384
  %4447 = getelementptr inbounds i8, i8* %4445, i64 %4446, !dbg !2384
  store i8 39, i8* %4447, align 1, !dbg !2384
  %4448 = load i32, i32* @x.35
  %4449 = load i32, i32* @y.36
  %4450 = sub i32 %4448, 1
  %4451 = mul i32 %4448, %4450
  %4452 = urem i32 %4451, 2
  %4453 = icmp eq i32 %4452, 0
  %4454 = icmp slt i32 %4449, 10
  %4455 = or i1 %4453, %4454
  br i1 %4455, label %originalBBpart21512, label %originalBB1510alteredBB

originalBBpart21512:                              ; preds = %originalBB1510
  br label %4456, !dbg !2384

4456:                                             ; preds = %originalBBpart21512, %originalBBpart21508
  %4457 = load i64, i64* %29, align 8, !dbg !2387
  %4458 = add i64 %4457, 1, !dbg !2387
  store i64 %4458, i64* %29, align 8, !dbg !2387
  br label %4459, !dbg !2387

4459:                                             ; preds = %4456
  %4460 = load i32, i32* @x.35
  %4461 = load i32, i32* @y.36
  %4462 = sub i32 %4460, 1
  %4463 = mul i32 %4460, %4462
  %4464 = urem i32 %4463, 2
  %4465 = icmp eq i32 %4464, 0
  %4466 = icmp slt i32 %4461, 10
  %4467 = or i1 %4465, %4466
  br i1 %4467, label %originalBB1514, label %originalBB1514alteredBB

originalBB1514:                                   ; preds = %4459, %originalBB1514alteredBB
  store i8 1, i8* %36, align 1, !dbg !2374
  %4468 = load i32, i32* @x.35
  %4469 = load i32, i32* @y.36
  %4470 = sub i32 %4468, 1
  %4471 = mul i32 %4468, %4470
  %4472 = urem i32 %4471, 2
  %4473 = icmp eq i32 %4472, 0
  %4474 = icmp slt i32 %4469, 10
  %4475 = or i1 %4473, %4474
  br i1 %4475, label %originalBBpart21516, label %originalBB1514alteredBB

originalBBpart21516:                              ; preds = %originalBB1514
  br label %4476, !dbg !2374

4476:                                             ; preds = %originalBBpart21516, %originalBBpart21446, %originalBBpart21442
  %4477 = load i32, i32* @x.35
  %4478 = load i32, i32* @y.36
  %4479 = sub i32 %4477, 1
  %4480 = mul i32 %4477, %4479
  %4481 = urem i32 %4480, 2
  %4482 = icmp eq i32 %4481, 0
  %4483 = icmp slt i32 %4478, 10
  %4484 = or i1 %4482, %4483
  br i1 %4484, label %originalBB1518, label %originalBB1518alteredBB

originalBB1518:                                   ; preds = %4476, %originalBB1518alteredBB
  %4485 = load i32, i32* @x.35
  %4486 = load i32, i32* @y.36
  %4487 = sub i32 %4485, 1
  %4488 = mul i32 %4485, %4487
  %4489 = urem i32 %4488, 2
  %4490 = icmp eq i32 %4489, 0
  %4491 = icmp slt i32 %4486, 10
  %4492 = or i1 %4490, %4491
  br i1 %4492, label %originalBBpart21520, label %originalBB1518alteredBB

originalBBpart21520:                              ; preds = %originalBB1518
  br label %4493, !dbg !2371

4493:                                             ; preds = %originalBBpart21520
  %4494 = load i32, i32* @x.35
  %4495 = load i32, i32* @y.36
  %4496 = sub i32 %4494, 1
  %4497 = mul i32 %4494, %4496
  %4498 = urem i32 %4497, 2
  %4499 = icmp eq i32 %4498, 0
  %4500 = icmp slt i32 %4495, 10
  %4501 = or i1 %4499, %4500
  br i1 %4501, label %originalBB1522, label %originalBB1522alteredBB

originalBB1522:                                   ; preds = %4493, %originalBB1522alteredBB
  %4502 = load i64, i64* %29, align 8, !dbg !2388
  %4503 = load i64, i64* %20, align 8, !dbg !2388
  %4504 = icmp ult i64 %4502, %4503, !dbg !2388
  %4505 = load i32, i32* @x.35
  %4506 = load i32, i32* @y.36
  %4507 = sub i32 %4505, 1
  %4508 = mul i32 %4505, %4507
  %4509 = urem i32 %4508, 2
  %4510 = icmp eq i32 %4509, 0
  %4511 = icmp slt i32 %4506, 10
  %4512 = or i1 %4510, %4511
  br i1 %4512, label %originalBBpart21524, label %originalBB1522alteredBB

originalBBpart21524:                              ; preds = %originalBB1522
  br i1 %4504, label %4513, label %4533, !dbg !2391

4513:                                             ; preds = %originalBBpart21524
  %4514 = load i32, i32* @x.35
  %4515 = load i32, i32* @y.36
  %4516 = sub i32 %4514, 1
  %4517 = mul i32 %4514, %4516
  %4518 = urem i32 %4517, 2
  %4519 = icmp eq i32 %4518, 0
  %4520 = icmp slt i32 %4515, 10
  %4521 = or i1 %4519, %4520
  br i1 %4521, label %originalBB1526, label %originalBB1526alteredBB

originalBB1526:                                   ; preds = %4513, %originalBB1526alteredBB
  %4522 = load i8*, i8** %19, align 8, !dbg !2388
  %4523 = load i64, i64* %29, align 8, !dbg !2388
  %4524 = getelementptr inbounds i8, i8* %4522, i64 %4523, !dbg !2388
  store i8 92, i8* %4524, align 1, !dbg !2388
  %4525 = load i32, i32* @x.35
  %4526 = load i32, i32* @y.36
  %4527 = sub i32 %4525, 1
  %4528 = mul i32 %4525, %4527
  %4529 = urem i32 %4528, 2
  %4530 = icmp eq i32 %4529, 0
  %4531 = icmp slt i32 %4526, 10
  %4532 = or i1 %4530, %4531
  br i1 %4532, label %originalBBpart21528, label %originalBB1526alteredBB

originalBBpart21528:                              ; preds = %originalBB1526
  br label %4533, !dbg !2388

4533:                                             ; preds = %originalBBpart21528, %originalBBpart21524
  %4534 = load i32, i32* @x.35
  %4535 = load i32, i32* @y.36
  %4536 = sub i32 %4534, 1
  %4537 = mul i32 %4534, %4536
  %4538 = urem i32 %4537, 2
  %4539 = icmp eq i32 %4538, 0
  %4540 = icmp slt i32 %4535, 10
  %4541 = or i1 %4539, %4540
  br i1 %4541, label %originalBB1530, label %originalBB1530alteredBB

originalBB1530:                                   ; preds = %4533, %originalBB1530alteredBB
  %4542 = load i64, i64* %29, align 8, !dbg !2391
  %4543 = add i64 %4542, 1, !dbg !2391
  store i64 %4543, i64* %29, align 8, !dbg !2391
  %4544 = load i32, i32* @x.35
  %4545 = load i32, i32* @y.36
  %4546 = sub i32 %4544, 1
  %4547 = mul i32 %4544, %4546
  %4548 = urem i32 %4547, 2
  %4549 = icmp eq i32 %4548, 0
  %4550 = icmp slt i32 %4545, 10
  %4551 = or i1 %4549, %4550
  br i1 %4551, label %originalBBpart21542, label %originalBB1530alteredBB

originalBBpart21542:                              ; preds = %originalBB1530
  br label %4552, !dbg !2391

4552:                                             ; preds = %originalBBpart21542
  %4553 = load i32, i32* @x.35
  %4554 = load i32, i32* @y.36
  %4555 = sub i32 %4553, 1
  %4556 = mul i32 %4553, %4555
  %4557 = urem i32 %4556, 2
  %4558 = icmp eq i32 %4557, 0
  %4559 = icmp slt i32 %4554, 10
  %4560 = or i1 %4558, %4559
  br i1 %4560, label %originalBB1544, label %originalBB1544alteredBB

originalBB1544:                                   ; preds = %4552, %originalBB1544alteredBB
  %4561 = load i32, i32* @x.35
  %4562 = load i32, i32* @y.36
  %4563 = sub i32 %4561, 1
  %4564 = mul i32 %4561, %4563
  %4565 = urem i32 %4564, 2
  %4566 = icmp eq i32 %4565, 0
  %4567 = icmp slt i32 %4562, 10
  %4568 = or i1 %4566, %4567
  br i1 %4568, label %originalBBpart21546, label %originalBB1544alteredBB

originalBBpart21546:                              ; preds = %originalBB1544
  br label %4569, !dbg !2371

4569:                                             ; preds = %originalBBpart21546
  %4570 = load i32, i32* @x.35
  %4571 = load i32, i32* @y.36
  %4572 = sub i32 %4570, 1
  %4573 = mul i32 %4570, %4572
  %4574 = urem i32 %4573, 2
  %4575 = icmp eq i32 %4574, 0
  %4576 = icmp slt i32 %4571, 10
  %4577 = or i1 %4575, %4576
  br i1 %4577, label %originalBB1548, label %originalBB1548alteredBB

originalBB1548:                                   ; preds = %4569, %originalBB1548alteredBB
  %4578 = load i32, i32* @x.35
  %4579 = load i32, i32* @y.36
  %4580 = sub i32 %4578, 1
  %4581 = mul i32 %4578, %4580
  %4582 = urem i32 %4581, 2
  %4583 = icmp eq i32 %4582, 0
  %4584 = icmp slt i32 %4579, 10
  %4585 = or i1 %4583, %4584
  br i1 %4585, label %originalBBpart21550, label %originalBB1548alteredBB

originalBBpart21550:                              ; preds = %originalBB1548
  br label %4586, !dbg !2392

4586:                                             ; preds = %originalBBpart21550
  %4587 = load i32, i32* @x.35
  %4588 = load i32, i32* @y.36
  %4589 = sub i32 %4587, 1
  %4590 = mul i32 %4587, %4589
  %4591 = urem i32 %4590, 2
  %4592 = icmp eq i32 %4591, 0
  %4593 = icmp slt i32 %4588, 10
  %4594 = or i1 %4592, %4593
  br i1 %4594, label %originalBB1552, label %originalBB1552alteredBB

originalBB1552:                                   ; preds = %4586, %originalBB1552alteredBB
  %4595 = load i64, i64* %29, align 8, !dbg !2393
  %4596 = load i64, i64* %20, align 8, !dbg !2393
  %4597 = icmp ult i64 %4595, %4596, !dbg !2393
  %4598 = load i32, i32* @x.35
  %4599 = load i32, i32* @y.36
  %4600 = sub i32 %4598, 1
  %4601 = mul i32 %4598, %4600
  %4602 = urem i32 %4601, 2
  %4603 = icmp eq i32 %4602, 0
  %4604 = icmp slt i32 %4599, 10
  %4605 = or i1 %4603, %4604
  br i1 %4605, label %originalBBpart21554, label %originalBB1552alteredBB

originalBBpart21554:                              ; preds = %originalBB1552
  br i1 %4597, label %4606, label %4631, !dbg !2396

4606:                                             ; preds = %originalBBpart21554
  %4607 = load i32, i32* @x.35
  %4608 = load i32, i32* @y.36
  %4609 = sub i32 %4607, 1
  %4610 = mul i32 %4607, %4609
  %4611 = urem i32 %4610, 2
  %4612 = icmp eq i32 %4611, 0
  %4613 = icmp slt i32 %4608, 10
  %4614 = or i1 %4612, %4613
  br i1 %4614, label %originalBB1556, label %originalBB1556alteredBB

originalBB1556:                                   ; preds = %4606, %originalBB1556alteredBB
  %4615 = load i8, i8* %39, align 1, !dbg !2393
  %4616 = zext i8 %4615 to i32, !dbg !2393
  %4617 = ashr i32 %4616, 6, !dbg !2393
  %4618 = add nsw i32 48, %4617, !dbg !2393
  %4619 = trunc i32 %4618 to i8, !dbg !2393
  %4620 = load i8*, i8** %19, align 8, !dbg !2393
  %4621 = load i64, i64* %29, align 8, !dbg !2393
  %4622 = getelementptr inbounds i8, i8* %4620, i64 %4621, !dbg !2393
  store i8 %4619, i8* %4622, align 1, !dbg !2393
  %4623 = load i32, i32* @x.35
  %4624 = load i32, i32* @y.36
  %4625 = sub i32 %4623, 1
  %4626 = mul i32 %4623, %4625
  %4627 = urem i32 %4626, 2
  %4628 = icmp eq i32 %4627, 0
  %4629 = icmp slt i32 %4624, 10
  %4630 = or i1 %4628, %4629
  br i1 %4630, label %originalBBpart21582, label %originalBB1556alteredBB

originalBBpart21582:                              ; preds = %originalBB1556
  br label %4631, !dbg !2393

4631:                                             ; preds = %originalBBpart21582, %originalBBpart21554
  %4632 = load i32, i32* @x.35
  %4633 = load i32, i32* @y.36
  %4634 = sub i32 %4632, 1
  %4635 = mul i32 %4632, %4634
  %4636 = urem i32 %4635, 2
  %4637 = icmp eq i32 %4636, 0
  %4638 = icmp slt i32 %4633, 10
  %4639 = or i1 %4637, %4638
  br i1 %4639, label %originalBB1584, label %originalBB1584alteredBB

originalBB1584:                                   ; preds = %4631, %originalBB1584alteredBB
  %4640 = load i64, i64* %29, align 8, !dbg !2396
  %4641 = add i64 %4640, 1, !dbg !2396
  store i64 %4641, i64* %29, align 8, !dbg !2396
  %4642 = load i32, i32* @x.35
  %4643 = load i32, i32* @y.36
  %4644 = sub i32 %4642, 1
  %4645 = mul i32 %4642, %4644
  %4646 = urem i32 %4645, 2
  %4647 = icmp eq i32 %4646, 0
  %4648 = icmp slt i32 %4643, 10
  %4649 = or i1 %4647, %4648
  br i1 %4649, label %originalBBpart21591, label %originalBB1584alteredBB

originalBBpart21591:                              ; preds = %originalBB1584
  br label %4650, !dbg !2396

4650:                                             ; preds = %originalBBpart21591
  %4651 = load i32, i32* @x.35
  %4652 = load i32, i32* @y.36
  %4653 = sub i32 %4651, 1
  %4654 = mul i32 %4651, %4653
  %4655 = urem i32 %4654, 2
  %4656 = icmp eq i32 %4655, 0
  %4657 = icmp slt i32 %4652, 10
  %4658 = or i1 %4656, %4657
  br i1 %4658, label %originalBB1593, label %originalBB1593alteredBB

originalBB1593:                                   ; preds = %4650, %originalBB1593alteredBB
  %4659 = load i32, i32* @x.35
  %4660 = load i32, i32* @y.36
  %4661 = sub i32 %4659, 1
  %4662 = mul i32 %4659, %4661
  %4663 = urem i32 %4662, 2
  %4664 = icmp eq i32 %4663, 0
  %4665 = icmp slt i32 %4660, 10
  %4666 = or i1 %4664, %4665
  br i1 %4666, label %originalBBpart21595, label %originalBB1593alteredBB

originalBBpart21595:                              ; preds = %originalBB1593
  br label %4667, !dbg !2397

4667:                                             ; preds = %originalBBpart21595
  %4668 = load i64, i64* %29, align 8, !dbg !2398
  %4669 = load i64, i64* %20, align 8, !dbg !2398
  %4670 = icmp ult i64 %4668, %4669, !dbg !2398
  br i1 %4670, label %4671, label %4697, !dbg !2401

4671:                                             ; preds = %4667
  %4672 = load i32, i32* @x.35
  %4673 = load i32, i32* @y.36
  %4674 = sub i32 %4672, 1
  %4675 = mul i32 %4672, %4674
  %4676 = urem i32 %4675, 2
  %4677 = icmp eq i32 %4676, 0
  %4678 = icmp slt i32 %4673, 10
  %4679 = or i1 %4677, %4678
  br i1 %4679, label %originalBB1597, label %originalBB1597alteredBB

originalBB1597:                                   ; preds = %4671, %originalBB1597alteredBB
  %4680 = load i8, i8* %39, align 1, !dbg !2398
  %4681 = zext i8 %4680 to i32, !dbg !2398
  %4682 = ashr i32 %4681, 3, !dbg !2398
  %4683 = and i32 %4682, 7, !dbg !2398
  %4684 = add nsw i32 48, %4683, !dbg !2398
  %4685 = trunc i32 %4684 to i8, !dbg !2398
  %4686 = load i8*, i8** %19, align 8, !dbg !2398
  %4687 = load i64, i64* %29, align 8, !dbg !2398
  %4688 = getelementptr inbounds i8, i8* %4686, i64 %4687, !dbg !2398
  store i8 %4685, i8* %4688, align 1, !dbg !2398
  %4689 = load i32, i32* @x.35
  %4690 = load i32, i32* @y.36
  %4691 = sub i32 %4689, 1
  %4692 = mul i32 %4689, %4691
  %4693 = urem i32 %4692, 2
  %4694 = icmp eq i32 %4693, 0
  %4695 = icmp slt i32 %4690, 10
  %4696 = or i1 %4694, %4695
  br i1 %4696, label %originalBBpart21630, label %originalBB1597alteredBB

originalBBpart21630:                              ; preds = %originalBB1597
  br label %4697, !dbg !2398

4697:                                             ; preds = %originalBBpart21630, %4667
  %4698 = load i32, i32* @x.35
  %4699 = load i32, i32* @y.36
  %4700 = sub i32 %4698, 1
  %4701 = mul i32 %4698, %4700
  %4702 = urem i32 %4701, 2
  %4703 = icmp eq i32 %4702, 0
  %4704 = icmp slt i32 %4699, 10
  %4705 = or i1 %4703, %4704
  br i1 %4705, label %originalBB1632, label %originalBB1632alteredBB

originalBB1632:                                   ; preds = %4697, %originalBB1632alteredBB
  %4706 = load i64, i64* %29, align 8, !dbg !2401
  %4707 = add i64 %4706, 1, !dbg !2401
  store i64 %4707, i64* %29, align 8, !dbg !2401
  %4708 = load i32, i32* @x.35
  %4709 = load i32, i32* @y.36
  %4710 = sub i32 %4708, 1
  %4711 = mul i32 %4708, %4710
  %4712 = urem i32 %4711, 2
  %4713 = icmp eq i32 %4712, 0
  %4714 = icmp slt i32 %4709, 10
  %4715 = or i1 %4713, %4714
  br i1 %4715, label %originalBBpart21645, label %originalBB1632alteredBB

originalBBpart21645:                              ; preds = %originalBB1632
  br label %4716, !dbg !2401

4716:                                             ; preds = %originalBBpart21645
  %4717 = load i32, i32* @x.35
  %4718 = load i32, i32* @y.36
  %4719 = sub i32 %4717, 1
  %4720 = mul i32 %4717, %4719
  %4721 = urem i32 %4720, 2
  %4722 = icmp eq i32 %4721, 0
  %4723 = icmp slt i32 %4718, 10
  %4724 = or i1 %4722, %4723
  br i1 %4724, label %originalBB1647, label %originalBB1647alteredBB

originalBB1647:                                   ; preds = %4716, %originalBB1647alteredBB
  %4725 = load i8, i8* %39, align 1, !dbg !2402
  %4726 = zext i8 %4725 to i32, !dbg !2402
  %4727 = and i32 %4726, 7, !dbg !2403
  %4728 = add nsw i32 48, %4727, !dbg !2404
  %4729 = trunc i32 %4728 to i8, !dbg !2405
  store i8 %4729, i8* %39, align 1, !dbg !2406
  %4730 = load i32, i32* @x.35
  %4731 = load i32, i32* @y.36
  %4732 = sub i32 %4730, 1
  %4733 = mul i32 %4730, %4732
  %4734 = urem i32 %4733, 2
  %4735 = icmp eq i32 %4734, 0
  %4736 = icmp slt i32 %4731, 10
  %4737 = or i1 %4735, %4736
  br i1 %4737, label %originalBBpart21661, label %originalBB1647alteredBB

originalBBpart21661:                              ; preds = %originalBB1647
  br label %4851, !dbg !2407

4738:                                             ; preds = %originalBBpart21426, %4134
  %4739 = load i8, i8* %41, align 1, !dbg !2408
  %4740 = trunc i8 %4739 to i1, !dbg !2408
  br i1 %4740, label %4741, label %4834, !dbg !2410

4741:                                             ; preds = %4738
  %4742 = load i32, i32* @x.35
  %4743 = load i32, i32* @y.36
  %4744 = sub i32 %4742, 1
  %4745 = mul i32 %4742, %4744
  %4746 = urem i32 %4745, 2
  %4747 = icmp eq i32 %4746, 0
  %4748 = icmp slt i32 %4743, 10
  %4749 = or i1 %4747, %4748
  br i1 %4749, label %originalBB1663, label %originalBB1663alteredBB

originalBB1663:                                   ; preds = %4741, %originalBB1663alteredBB
  %4750 = load i32, i32* @x.35
  %4751 = load i32, i32* @y.36
  %4752 = sub i32 %4750, 1
  %4753 = mul i32 %4750, %4752
  %4754 = urem i32 %4753, 2
  %4755 = icmp eq i32 %4754, 0
  %4756 = icmp slt i32 %4751, 10
  %4757 = or i1 %4755, %4756
  br i1 %4757, label %originalBBpart21665, label %originalBB1663alteredBB

originalBBpart21665:                              ; preds = %originalBB1663
  br label %4758, !dbg !2411

4758:                                             ; preds = %originalBBpart21665
  %4759 = load i32, i32* @x.35
  %4760 = load i32, i32* @y.36
  %4761 = sub i32 %4759, 1
  %4762 = mul i32 %4759, %4761
  %4763 = urem i32 %4762, 2
  %4764 = icmp eq i32 %4763, 0
  %4765 = icmp slt i32 %4760, 10
  %4766 = or i1 %4764, %4765
  br i1 %4766, label %originalBB1667, label %originalBB1667alteredBB

originalBB1667:                                   ; preds = %4758, %originalBB1667alteredBB
  %4767 = load i64, i64* %29, align 8, !dbg !2413
  %4768 = load i64, i64* %20, align 8, !dbg !2413
  %4769 = icmp ult i64 %4767, %4768, !dbg !2413
  %4770 = load i32, i32* @x.35
  %4771 = load i32, i32* @y.36
  %4772 = sub i32 %4770, 1
  %4773 = mul i32 %4770, %4772
  %4774 = urem i32 %4773, 2
  %4775 = icmp eq i32 %4774, 0
  %4776 = icmp slt i32 %4771, 10
  %4777 = or i1 %4775, %4776
  br i1 %4777, label %originalBBpart21669, label %originalBB1667alteredBB

originalBBpart21669:                              ; preds = %originalBB1667
  br i1 %4769, label %4778, label %4798, !dbg !2416

4778:                                             ; preds = %originalBBpart21669
  %4779 = load i32, i32* @x.35
  %4780 = load i32, i32* @y.36
  %4781 = sub i32 %4779, 1
  %4782 = mul i32 %4779, %4781
  %4783 = urem i32 %4782, 2
  %4784 = icmp eq i32 %4783, 0
  %4785 = icmp slt i32 %4780, 10
  %4786 = or i1 %4784, %4785
  br i1 %4786, label %originalBB1671, label %originalBB1671alteredBB

originalBB1671:                                   ; preds = %4778, %originalBB1671alteredBB
  %4787 = load i8*, i8** %19, align 8, !dbg !2413
  %4788 = load i64, i64* %29, align 8, !dbg !2413
  %4789 = getelementptr inbounds i8, i8* %4787, i64 %4788, !dbg !2413
  store i8 92, i8* %4789, align 1, !dbg !2413
  %4790 = load i32, i32* @x.35
  %4791 = load i32, i32* @y.36
  %4792 = sub i32 %4790, 1
  %4793 = mul i32 %4790, %4792
  %4794 = urem i32 %4793, 2
  %4795 = icmp eq i32 %4794, 0
  %4796 = icmp slt i32 %4791, 10
  %4797 = or i1 %4795, %4796
  br i1 %4797, label %originalBBpart21673, label %originalBB1671alteredBB

originalBBpart21673:                              ; preds = %originalBB1671
  br label %4798, !dbg !2413

4798:                                             ; preds = %originalBBpart21673, %originalBBpart21669
  %4799 = load i32, i32* @x.35
  %4800 = load i32, i32* @y.36
  %4801 = sub i32 %4799, 1
  %4802 = mul i32 %4799, %4801
  %4803 = urem i32 %4802, 2
  %4804 = icmp eq i32 %4803, 0
  %4805 = icmp slt i32 %4800, 10
  %4806 = or i1 %4804, %4805
  br i1 %4806, label %originalBB1675, label %originalBB1675alteredBB

originalBB1675:                                   ; preds = %4798, %originalBB1675alteredBB
  %4807 = load i64, i64* %29, align 8, !dbg !2416
  %4808 = add i64 %4807, 1, !dbg !2416
  store i64 %4808, i64* %29, align 8, !dbg !2416
  %4809 = load i32, i32* @x.35
  %4810 = load i32, i32* @y.36
  %4811 = sub i32 %4809, 1
  %4812 = mul i32 %4809, %4811
  %4813 = urem i32 %4812, 2
  %4814 = icmp eq i32 %4813, 0
  %4815 = icmp slt i32 %4810, 10
  %4816 = or i1 %4814, %4815
  br i1 %4816, label %originalBBpart21679, label %originalBB1675alteredBB

originalBBpart21679:                              ; preds = %originalBB1675
  br label %4817, !dbg !2416

4817:                                             ; preds = %originalBBpart21679
  %4818 = load i32, i32* @x.35
  %4819 = load i32, i32* @y.36
  %4820 = sub i32 %4818, 1
  %4821 = mul i32 %4818, %4820
  %4822 = urem i32 %4821, 2
  %4823 = icmp eq i32 %4822, 0
  %4824 = icmp slt i32 %4819, 10
  %4825 = or i1 %4823, %4824
  br i1 %4825, label %originalBB1681, label %originalBB1681alteredBB

originalBB1681:                                   ; preds = %4817, %originalBB1681alteredBB
  store i8 0, i8* %41, align 1, !dbg !2417
  %4826 = load i32, i32* @x.35
  %4827 = load i32, i32* @y.36
  %4828 = sub i32 %4826, 1
  %4829 = mul i32 %4826, %4828
  %4830 = urem i32 %4829, 2
  %4831 = icmp eq i32 %4830, 0
  %4832 = icmp slt i32 %4827, 10
  %4833 = or i1 %4831, %4832
  br i1 %4833, label %originalBBpart21683, label %originalBB1681alteredBB

originalBBpart21683:                              ; preds = %originalBB1681
  br label %4834, !dbg !2418

4834:                                             ; preds = %originalBBpart21683, %4738
  %4835 = load i32, i32* @x.35
  %4836 = load i32, i32* @y.36
  %4837 = sub i32 %4835, 1
  %4838 = mul i32 %4835, %4837
  %4839 = urem i32 %4838, 2
  %4840 = icmp eq i32 %4839, 0
  %4841 = icmp slt i32 %4836, 10
  %4842 = or i1 %4840, %4841
  br i1 %4842, label %originalBB1685, label %originalBB1685alteredBB

originalBB1685:                                   ; preds = %4834, %originalBB1685alteredBB
  %4843 = load i32, i32* @x.35
  %4844 = load i32, i32* @y.36
  %4845 = sub i32 %4843, 1
  %4846 = mul i32 %4843, %4845
  %4847 = urem i32 %4846, 2
  %4848 = icmp eq i32 %4847, 0
  %4849 = icmp slt i32 %4844, 10
  %4850 = or i1 %4848, %4849
  br i1 %4850, label %originalBBpart21687, label %originalBB1685alteredBB

originalBBpart21687:                              ; preds = %originalBB1685
  br label %4851

4851:                                             ; preds = %originalBBpart21687, %originalBBpart21661
  %4852 = load i32, i32* @x.35
  %4853 = load i32, i32* @y.36
  %4854 = sub i32 %4852, 1
  %4855 = mul i32 %4852, %4854
  %4856 = urem i32 %4855, 2
  %4857 = icmp eq i32 %4856, 0
  %4858 = icmp slt i32 %4853, 10
  %4859 = or i1 %4857, %4858
  br i1 %4859, label %originalBB1689, label %originalBB1689alteredBB

originalBB1689:                                   ; preds = %4851, %originalBB1689alteredBB
  %4860 = load i64, i64* %50, align 8, !dbg !2419
  %4861 = load i64, i64* %28, align 8, !dbg !2421
  %4862 = add i64 %4861, 1, !dbg !2422
  %4863 = icmp ule i64 %4860, %4862, !dbg !2423
  %4864 = load i32, i32* @x.35
  %4865 = load i32, i32* @y.36
  %4866 = sub i32 %4864, 1
  %4867 = mul i32 %4864, %4866
  %4868 = urem i32 %4867, 2
  %4869 = icmp eq i32 %4868, 0
  %4870 = icmp slt i32 %4865, 10
  %4871 = or i1 %4869, %4870
  br i1 %4871, label %originalBBpart21693, label %originalBB1689alteredBB

originalBBpart21693:                              ; preds = %originalBB1689
  br i1 %4863, label %4872, label %4889, !dbg !2424

4872:                                             ; preds = %originalBBpart21693
  %4873 = load i32, i32* @x.35
  %4874 = load i32, i32* @y.36
  %4875 = sub i32 %4873, 1
  %4876 = mul i32 %4873, %4875
  %4877 = urem i32 %4876, 2
  %4878 = icmp eq i32 %4877, 0
  %4879 = icmp slt i32 %4874, 10
  %4880 = or i1 %4878, %4879
  br i1 %4880, label %originalBB1695, label %originalBB1695alteredBB

originalBB1695:                                   ; preds = %4872, %originalBB1695alteredBB
  %4881 = load i32, i32* @x.35
  %4882 = load i32, i32* @y.36
  %4883 = sub i32 %4881, 1
  %4884 = mul i32 %4881, %4883
  %4885 = urem i32 %4884, 2
  %4886 = icmp eq i32 %4885, 0
  %4887 = icmp slt i32 %4882, 10
  %4888 = or i1 %4886, %4887
  br i1 %4888, label %originalBBpart21697, label %originalBB1695alteredBB

originalBBpart21697:                              ; preds = %originalBB1695
  br label %5213, !dbg !2425

4889:                                             ; preds = %originalBBpart21693
  %4890 = load i32, i32* @x.35
  %4891 = load i32, i32* @y.36
  %4892 = sub i32 %4890, 1
  %4893 = mul i32 %4890, %4892
  %4894 = urem i32 %4893, 2
  %4895 = icmp eq i32 %4894, 0
  %4896 = icmp slt i32 %4891, 10
  %4897 = or i1 %4895, %4896
  br i1 %4897, label %originalBB1699, label %originalBB1699alteredBB

originalBB1699:                                   ; preds = %4889, %originalBB1699alteredBB
  %4898 = load i32, i32* @x.35
  %4899 = load i32, i32* @y.36
  %4900 = sub i32 %4898, 1
  %4901 = mul i32 %4898, %4900
  %4902 = urem i32 %4901, 2
  %4903 = icmp eq i32 %4902, 0
  %4904 = icmp slt i32 %4899, 10
  %4905 = or i1 %4903, %4904
  br i1 %4905, label %originalBBpart21701, label %originalBB1699alteredBB

originalBBpart21701:                              ; preds = %originalBB1699
  br label %4906, !dbg !2426

4906:                                             ; preds = %originalBBpart21701
  %4907 = load i32, i32* @x.35
  %4908 = load i32, i32* @y.36
  %4909 = sub i32 %4907, 1
  %4910 = mul i32 %4907, %4909
  %4911 = urem i32 %4910, 2
  %4912 = icmp eq i32 %4911, 0
  %4913 = icmp slt i32 %4908, 10
  %4914 = or i1 %4912, %4913
  br i1 %4914, label %originalBB1703, label %originalBB1703alteredBB

originalBB1703:                                   ; preds = %4906, %originalBB1703alteredBB
  %4915 = load i8, i8* %36, align 1, !dbg !2427
  %4916 = trunc i8 %4915 to i1, !dbg !2427
  %4917 = load i32, i32* @x.35
  %4918 = load i32, i32* @y.36
  %4919 = sub i32 %4917, 1
  %4920 = mul i32 %4917, %4919
  %4921 = urem i32 %4920, 2
  %4922 = icmp eq i32 %4921, 0
  %4923 = icmp slt i32 %4918, 10
  %4924 = or i1 %4922, %4923
  br i1 %4924, label %originalBBpart21705, label %originalBB1703alteredBB

originalBBpart21705:                              ; preds = %originalBB1703
  br i1 %4916, label %4925, label %5097, !dbg !2427

4925:                                             ; preds = %originalBBpart21705
  %4926 = load i32, i32* @x.35
  %4927 = load i32, i32* @y.36
  %4928 = sub i32 %4926, 1
  %4929 = mul i32 %4926, %4928
  %4930 = urem i32 %4929, 2
  %4931 = icmp eq i32 %4930, 0
  %4932 = icmp slt i32 %4927, 10
  %4933 = or i1 %4931, %4932
  br i1 %4933, label %originalBB1707, label %originalBB1707alteredBB

originalBB1707:                                   ; preds = %4925, %originalBB1707alteredBB
  %4934 = load i8, i8* %42, align 1, !dbg !2427
  %4935 = trunc i8 %4934 to i1, !dbg !2427
  %4936 = load i32, i32* @x.35
  %4937 = load i32, i32* @y.36
  %4938 = sub i32 %4936, 1
  %4939 = mul i32 %4936, %4938
  %4940 = urem i32 %4939, 2
  %4941 = icmp eq i32 %4940, 0
  %4942 = icmp slt i32 %4937, 10
  %4943 = or i1 %4941, %4942
  br i1 %4943, label %originalBBpart21709, label %originalBB1707alteredBB

originalBBpart21709:                              ; preds = %originalBB1707
  br i1 %4935, label %5097, label %4944, !dbg !2430

4944:                                             ; preds = %originalBBpart21709
  %4945 = load i32, i32* @x.35
  %4946 = load i32, i32* @y.36
  %4947 = sub i32 %4945, 1
  %4948 = mul i32 %4945, %4947
  %4949 = urem i32 %4948, 2
  %4950 = icmp eq i32 %4949, 0
  %4951 = icmp slt i32 %4946, 10
  %4952 = or i1 %4950, %4951
  br i1 %4952, label %originalBB1711, label %originalBB1711alteredBB

originalBB1711:                                   ; preds = %4944, %originalBB1711alteredBB
  %4953 = load i32, i32* @x.35
  %4954 = load i32, i32* @y.36
  %4955 = sub i32 %4953, 1
  %4956 = mul i32 %4953, %4955
  %4957 = urem i32 %4956, 2
  %4958 = icmp eq i32 %4957, 0
  %4959 = icmp slt i32 %4954, 10
  %4960 = or i1 %4958, %4959
  br i1 %4960, label %originalBBpart21713, label %originalBB1711alteredBB

originalBBpart21713:                              ; preds = %originalBB1711
  br label %4961, !dbg !2431

4961:                                             ; preds = %originalBBpart21713
  %4962 = load i32, i32* @x.35
  %4963 = load i32, i32* @y.36
  %4964 = sub i32 %4962, 1
  %4965 = mul i32 %4962, %4964
  %4966 = urem i32 %4965, 2
  %4967 = icmp eq i32 %4966, 0
  %4968 = icmp slt i32 %4963, 10
  %4969 = or i1 %4967, %4968
  br i1 %4969, label %originalBB1715, label %originalBB1715alteredBB

originalBB1715:                                   ; preds = %4961, %originalBB1715alteredBB
  %4970 = load i64, i64* %29, align 8, !dbg !2433
  %4971 = load i64, i64* %20, align 8, !dbg !2433
  %4972 = icmp ult i64 %4970, %4971, !dbg !2433
  %4973 = load i32, i32* @x.35
  %4974 = load i32, i32* @y.36
  %4975 = sub i32 %4973, 1
  %4976 = mul i32 %4973, %4975
  %4977 = urem i32 %4976, 2
  %4978 = icmp eq i32 %4977, 0
  %4979 = icmp slt i32 %4974, 10
  %4980 = or i1 %4978, %4979
  br i1 %4980, label %originalBBpart21717, label %originalBB1715alteredBB

originalBBpart21717:                              ; preds = %originalBB1715
  br i1 %4972, label %4981, label %5001, !dbg !2436

4981:                                             ; preds = %originalBBpart21717
  %4982 = load i32, i32* @x.35
  %4983 = load i32, i32* @y.36
  %4984 = sub i32 %4982, 1
  %4985 = mul i32 %4982, %4984
  %4986 = urem i32 %4985, 2
  %4987 = icmp eq i32 %4986, 0
  %4988 = icmp slt i32 %4983, 10
  %4989 = or i1 %4987, %4988
  br i1 %4989, label %originalBB1719, label %originalBB1719alteredBB

originalBB1719:                                   ; preds = %4981, %originalBB1719alteredBB
  %4990 = load i8*, i8** %19, align 8, !dbg !2433
  %4991 = load i64, i64* %29, align 8, !dbg !2433
  %4992 = getelementptr inbounds i8, i8* %4990, i64 %4991, !dbg !2433
  store i8 39, i8* %4992, align 1, !dbg !2433
  %4993 = load i32, i32* @x.35
  %4994 = load i32, i32* @y.36
  %4995 = sub i32 %4993, 1
  %4996 = mul i32 %4993, %4995
  %4997 = urem i32 %4996, 2
  %4998 = icmp eq i32 %4997, 0
  %4999 = icmp slt i32 %4994, 10
  %5000 = or i1 %4998, %4999
  br i1 %5000, label %originalBBpart21721, label %originalBB1719alteredBB

originalBBpart21721:                              ; preds = %originalBB1719
  br label %5001, !dbg !2433

5001:                                             ; preds = %originalBBpart21721, %originalBBpart21717
  %5002 = load i64, i64* %29, align 8, !dbg !2436
  %5003 = add i64 %5002, 1, !dbg !2436
  store i64 %5003, i64* %29, align 8, !dbg !2436
  br label %5004, !dbg !2436

5004:                                             ; preds = %5001
  %5005 = load i32, i32* @x.35
  %5006 = load i32, i32* @y.36
  %5007 = sub i32 %5005, 1
  %5008 = mul i32 %5005, %5007
  %5009 = urem i32 %5008, 2
  %5010 = icmp eq i32 %5009, 0
  %5011 = icmp slt i32 %5006, 10
  %5012 = or i1 %5010, %5011
  br i1 %5012, label %originalBB1723, label %originalBB1723alteredBB

originalBB1723:                                   ; preds = %5004, %originalBB1723alteredBB
  %5013 = load i32, i32* @x.35
  %5014 = load i32, i32* @y.36
  %5015 = sub i32 %5013, 1
  %5016 = mul i32 %5013, %5015
  %5017 = urem i32 %5016, 2
  %5018 = icmp eq i32 %5017, 0
  %5019 = icmp slt i32 %5014, 10
  %5020 = or i1 %5018, %5019
  br i1 %5020, label %originalBBpart21725, label %originalBB1723alteredBB

originalBBpart21725:                              ; preds = %originalBB1723
  br label %5021, !dbg !2431

5021:                                             ; preds = %originalBBpart21725
  %5022 = load i32, i32* @x.35
  %5023 = load i32, i32* @y.36
  %5024 = sub i32 %5022, 1
  %5025 = mul i32 %5022, %5024
  %5026 = urem i32 %5025, 2
  %5027 = icmp eq i32 %5026, 0
  %5028 = icmp slt i32 %5023, 10
  %5029 = or i1 %5027, %5028
  br i1 %5029, label %originalBB1727, label %originalBB1727alteredBB

originalBB1727:                                   ; preds = %5021, %originalBB1727alteredBB
  %5030 = load i64, i64* %29, align 8, !dbg !2437
  %5031 = load i64, i64* %20, align 8, !dbg !2437
  %5032 = icmp ult i64 %5030, %5031, !dbg !2437
  %5033 = load i32, i32* @x.35
  %5034 = load i32, i32* @y.36
  %5035 = sub i32 %5033, 1
  %5036 = mul i32 %5033, %5035
  %5037 = urem i32 %5036, 2
  %5038 = icmp eq i32 %5037, 0
  %5039 = icmp slt i32 %5034, 10
  %5040 = or i1 %5038, %5039
  br i1 %5040, label %originalBBpart21729, label %originalBB1727alteredBB

originalBBpart21729:                              ; preds = %originalBB1727
  br i1 %5032, label %5041, label %5061, !dbg !2440

5041:                                             ; preds = %originalBBpart21729
  %5042 = load i32, i32* @x.35
  %5043 = load i32, i32* @y.36
  %5044 = sub i32 %5042, 1
  %5045 = mul i32 %5042, %5044
  %5046 = urem i32 %5045, 2
  %5047 = icmp eq i32 %5046, 0
  %5048 = icmp slt i32 %5043, 10
  %5049 = or i1 %5047, %5048
  br i1 %5049, label %originalBB1731, label %originalBB1731alteredBB

originalBB1731:                                   ; preds = %5041, %originalBB1731alteredBB
  %5050 = load i8*, i8** %19, align 8, !dbg !2437
  %5051 = load i64, i64* %29, align 8, !dbg !2437
  %5052 = getelementptr inbounds i8, i8* %5050, i64 %5051, !dbg !2437
  store i8 39, i8* %5052, align 1, !dbg !2437
  %5053 = load i32, i32* @x.35
  %5054 = load i32, i32* @y.36
  %5055 = sub i32 %5053, 1
  %5056 = mul i32 %5053, %5055
  %5057 = urem i32 %5056, 2
  %5058 = icmp eq i32 %5057, 0
  %5059 = icmp slt i32 %5054, 10
  %5060 = or i1 %5058, %5059
  br i1 %5060, label %originalBBpart21733, label %originalBB1731alteredBB

originalBBpart21733:                              ; preds = %originalBB1731
  br label %5061, !dbg !2437

5061:                                             ; preds = %originalBBpart21733, %originalBBpart21729
  %5062 = load i32, i32* @x.35
  %5063 = load i32, i32* @y.36
  %5064 = sub i32 %5062, 1
  %5065 = mul i32 %5062, %5064
  %5066 = urem i32 %5065, 2
  %5067 = icmp eq i32 %5066, 0
  %5068 = icmp slt i32 %5063, 10
  %5069 = or i1 %5067, %5068
  br i1 %5069, label %originalBB1735, label %originalBB1735alteredBB

originalBB1735:                                   ; preds = %5061, %originalBB1735alteredBB
  %5070 = load i64, i64* %29, align 8, !dbg !2440
  %5071 = add i64 %5070, 1, !dbg !2440
  store i64 %5071, i64* %29, align 8, !dbg !2440
  %5072 = load i32, i32* @x.35
  %5073 = load i32, i32* @y.36
  %5074 = sub i32 %5072, 1
  %5075 = mul i32 %5072, %5074
  %5076 = urem i32 %5075, 2
  %5077 = icmp eq i32 %5076, 0
  %5078 = icmp slt i32 %5073, 10
  %5079 = or i1 %5077, %5078
  br i1 %5079, label %originalBBpart21747, label %originalBB1735alteredBB

originalBBpart21747:                              ; preds = %originalBB1735
  br label %5080, !dbg !2440

5080:                                             ; preds = %originalBBpart21747
  %5081 = load i32, i32* @x.35
  %5082 = load i32, i32* @y.36
  %5083 = sub i32 %5081, 1
  %5084 = mul i32 %5081, %5083
  %5085 = urem i32 %5084, 2
  %5086 = icmp eq i32 %5085, 0
  %5087 = icmp slt i32 %5082, 10
  %5088 = or i1 %5086, %5087
  br i1 %5088, label %originalBB1749, label %originalBB1749alteredBB

originalBB1749:                                   ; preds = %5080, %originalBB1749alteredBB
  store i8 0, i8* %36, align 1, !dbg !2431
  %5089 = load i32, i32* @x.35
  %5090 = load i32, i32* @y.36
  %5091 = sub i32 %5089, 1
  %5092 = mul i32 %5089, %5091
  %5093 = urem i32 %5092, 2
  %5094 = icmp eq i32 %5093, 0
  %5095 = icmp slt i32 %5090, 10
  %5096 = or i1 %5094, %5095
  br i1 %5096, label %originalBBpart21751, label %originalBB1749alteredBB

originalBBpart21751:                              ; preds = %originalBB1749
  br label %5097, !dbg !2431

5097:                                             ; preds = %originalBBpart21751, %originalBBpart21709, %originalBBpart21705
  %5098 = load i32, i32* @x.35
  %5099 = load i32, i32* @y.36
  %5100 = sub i32 %5098, 1
  %5101 = mul i32 %5098, %5100
  %5102 = urem i32 %5101, 2
  %5103 = icmp eq i32 %5102, 0
  %5104 = icmp slt i32 %5099, 10
  %5105 = or i1 %5103, %5104
  br i1 %5105, label %originalBB1753, label %originalBB1753alteredBB

originalBB1753:                                   ; preds = %5097, %originalBB1753alteredBB
  %5106 = load i32, i32* @x.35
  %5107 = load i32, i32* @y.36
  %5108 = sub i32 %5106, 1
  %5109 = mul i32 %5106, %5108
  %5110 = urem i32 %5109, 2
  %5111 = icmp eq i32 %5110, 0
  %5112 = icmp slt i32 %5107, 10
  %5113 = or i1 %5111, %5112
  br i1 %5113, label %originalBBpart21755, label %originalBB1753alteredBB

originalBBpart21755:                              ; preds = %originalBB1753
  br label %5114, !dbg !2430

5114:                                             ; preds = %originalBBpart21755
  %5115 = load i32, i32* @x.35
  %5116 = load i32, i32* @y.36
  %5117 = sub i32 %5115, 1
  %5118 = mul i32 %5115, %5117
  %5119 = urem i32 %5118, 2
  %5120 = icmp eq i32 %5119, 0
  %5121 = icmp slt i32 %5116, 10
  %5122 = or i1 %5120, %5121
  br i1 %5122, label %originalBB1757, label %originalBB1757alteredBB

originalBB1757:                                   ; preds = %5114, %originalBB1757alteredBB
  %5123 = load i32, i32* @x.35
  %5124 = load i32, i32* @y.36
  %5125 = sub i32 %5123, 1
  %5126 = mul i32 %5123, %5125
  %5127 = urem i32 %5126, 2
  %5128 = icmp eq i32 %5127, 0
  %5129 = icmp slt i32 %5124, 10
  %5130 = or i1 %5128, %5129
  br i1 %5130, label %originalBBpart21759, label %originalBB1757alteredBB

originalBBpart21759:                              ; preds = %originalBB1757
  br label %5131, !dbg !2441

5131:                                             ; preds = %originalBBpart21759
  %5132 = load i32, i32* @x.35
  %5133 = load i32, i32* @y.36
  %5134 = sub i32 %5132, 1
  %5135 = mul i32 %5132, %5134
  %5136 = urem i32 %5135, 2
  %5137 = icmp eq i32 %5136, 0
  %5138 = icmp slt i32 %5133, 10
  %5139 = or i1 %5137, %5138
  br i1 %5139, label %originalBB1761, label %originalBB1761alteredBB

originalBB1761:                                   ; preds = %5131, %originalBB1761alteredBB
  %5140 = load i64, i64* %29, align 8, !dbg !2442
  %5141 = load i64, i64* %20, align 8, !dbg !2442
  %5142 = icmp ult i64 %5140, %5141, !dbg !2442
  %5143 = load i32, i32* @x.35
  %5144 = load i32, i32* @y.36
  %5145 = sub i32 %5143, 1
  %5146 = mul i32 %5143, %5145
  %5147 = urem i32 %5146, 2
  %5148 = icmp eq i32 %5147, 0
  %5149 = icmp slt i32 %5144, 10
  %5150 = or i1 %5148, %5149
  br i1 %5150, label %originalBBpart21763, label %originalBB1761alteredBB

originalBBpart21763:                              ; preds = %originalBB1761
  br i1 %5142, label %5151, label %5172, !dbg !2445

5151:                                             ; preds = %originalBBpart21763
  %5152 = load i32, i32* @x.35
  %5153 = load i32, i32* @y.36
  %5154 = sub i32 %5152, 1
  %5155 = mul i32 %5152, %5154
  %5156 = urem i32 %5155, 2
  %5157 = icmp eq i32 %5156, 0
  %5158 = icmp slt i32 %5153, 10
  %5159 = or i1 %5157, %5158
  br i1 %5159, label %originalBB1765, label %originalBB1765alteredBB

originalBB1765:                                   ; preds = %5151, %originalBB1765alteredBB
  %5160 = load i8, i8* %39, align 1, !dbg !2442
  %5161 = load i8*, i8** %19, align 8, !dbg !2442
  %5162 = load i64, i64* %29, align 8, !dbg !2442
  %5163 = getelementptr inbounds i8, i8* %5161, i64 %5162, !dbg !2442
  store i8 %5160, i8* %5163, align 1, !dbg !2442
  %5164 = load i32, i32* @x.35
  %5165 = load i32, i32* @y.36
  %5166 = sub i32 %5164, 1
  %5167 = mul i32 %5164, %5166
  %5168 = urem i32 %5167, 2
  %5169 = icmp eq i32 %5168, 0
  %5170 = icmp slt i32 %5165, 10
  %5171 = or i1 %5169, %5170
  br i1 %5171, label %originalBBpart21767, label %originalBB1765alteredBB

originalBBpart21767:                              ; preds = %originalBB1765
  br label %5172, !dbg !2442

5172:                                             ; preds = %originalBBpart21767, %originalBBpart21763
  %5173 = load i32, i32* @x.35
  %5174 = load i32, i32* @y.36
  %5175 = sub i32 %5173, 1
  %5176 = mul i32 %5173, %5175
  %5177 = urem i32 %5176, 2
  %5178 = icmp eq i32 %5177, 0
  %5179 = icmp slt i32 %5174, 10
  %5180 = or i1 %5178, %5179
  br i1 %5180, label %originalBB1769, label %originalBB1769alteredBB

originalBB1769:                                   ; preds = %5172, %originalBB1769alteredBB
  %5181 = load i64, i64* %29, align 8, !dbg !2445
  %5182 = add i64 %5181, 1, !dbg !2445
  store i64 %5182, i64* %29, align 8, !dbg !2445
  %5183 = load i32, i32* @x.35
  %5184 = load i32, i32* @y.36
  %5185 = sub i32 %5183, 1
  %5186 = mul i32 %5183, %5185
  %5187 = urem i32 %5186, 2
  %5188 = icmp eq i32 %5187, 0
  %5189 = icmp slt i32 %5184, 10
  %5190 = or i1 %5188, %5189
  br i1 %5190, label %originalBBpart21772, label %originalBB1769alteredBB

originalBBpart21772:                              ; preds = %originalBB1769
  br label %5191, !dbg !2445

5191:                                             ; preds = %originalBBpart21772
  %5192 = load i32, i32* @x.35
  %5193 = load i32, i32* @y.36
  %5194 = sub i32 %5192, 1
  %5195 = mul i32 %5192, %5194
  %5196 = urem i32 %5195, 2
  %5197 = icmp eq i32 %5196, 0
  %5198 = icmp slt i32 %5193, 10
  %5199 = or i1 %5197, %5198
  br i1 %5199, label %originalBB1774, label %originalBB1774alteredBB

originalBB1774:                                   ; preds = %5191, %originalBB1774alteredBB
  %5200 = load i8*, i8** %21, align 8, !dbg !2446
  %5201 = load i64, i64* %28, align 8, !dbg !2447
  %5202 = add i64 %5201, 1, !dbg !2447
  store i64 %5202, i64* %28, align 8, !dbg !2447
  %5203 = getelementptr inbounds i8, i8* %5200, i64 %5202, !dbg !2446
  %5204 = load i8, i8* %5203, align 1, !dbg !2446
  store i8 %5204, i8* %39, align 1, !dbg !2448
  %5205 = load i32, i32* @x.35
  %5206 = load i32, i32* @y.36
  %5207 = sub i32 %5205, 1
  %5208 = mul i32 %5205, %5207
  %5209 = urem i32 %5208, 2
  %5210 = icmp eq i32 %5209, 0
  %5211 = icmp slt i32 %5206, 10
  %5212 = or i1 %5210, %5211
  br i1 %5212, label %originalBBpart21789, label %originalBB1774alteredBB

originalBBpart21789:                              ; preds = %originalBB1774
  br label %4134, !dbg !2449, !llvm.loop !2450

5213:                                             ; preds = %originalBBpart21697
  %5214 = load i32, i32* @x.35
  %5215 = load i32, i32* @y.36
  %5216 = sub i32 %5214, 1
  %5217 = mul i32 %5214, %5216
  %5218 = urem i32 %5217, 2
  %5219 = icmp eq i32 %5218, 0
  %5220 = icmp slt i32 %5215, 10
  %5221 = or i1 %5219, %5220
  br i1 %5221, label %originalBB1791, label %originalBB1791alteredBB

originalBB1791:                                   ; preds = %5213, %originalBB1791alteredBB
  %5222 = load i32, i32* @x.35
  %5223 = load i32, i32* @y.36
  %5224 = sub i32 %5222, 1
  %5225 = mul i32 %5222, %5224
  %5226 = urem i32 %5225, 2
  %5227 = icmp eq i32 %5226, 0
  %5228 = icmp slt i32 %5223, 10
  %5229 = or i1 %5227, %5228
  br i1 %5229, label %originalBBpart21793, label %originalBB1791alteredBB

originalBBpart21793:                              ; preds = %originalBB1791
  br label %5804, !dbg !2453

5230:                                             ; preds = %4111, %4108
  %5231 = load i32, i32* @x.35
  %5232 = load i32, i32* @y.36
  %5233 = sub i32 %5231, 1
  %5234 = mul i32 %5231, %5233
  %5235 = urem i32 %5234, 2
  %5236 = icmp eq i32 %5235, 0
  %5237 = icmp slt i32 %5232, 10
  %5238 = or i1 %5236, %5237
  br i1 %5238, label %originalBB1795, label %originalBB1795alteredBB

originalBB1795:                                   ; preds = %5230, %originalBB1795alteredBB
  %5239 = load i32, i32* @x.35
  %5240 = load i32, i32* @y.36
  %5241 = sub i32 %5239, 1
  %5242 = mul i32 %5239, %5241
  %5243 = urem i32 %5242, 2
  %5244 = icmp eq i32 %5243, 0
  %5245 = icmp slt i32 %5240, 10
  %5246 = or i1 %5244, %5245
  br i1 %5246, label %originalBBpart21797, label %originalBB1795alteredBB

originalBBpart21797:                              ; preds = %originalBB1795
  br label %5247, !dbg !2454

5247:                                             ; preds = %originalBBpart21797, %originalBBpart21198, %originalBBpart21194, %originalBBpart21098, %originalBBpart21074, %originalBBpart21062, %originalBBpart21050, %originalBBpart2974, %originalBBpart2594
  %5248 = load i32, i32* @x.35
  %5249 = load i32, i32* @y.36
  %5250 = sub i32 %5248, 1
  %5251 = mul i32 %5248, %5250
  %5252 = urem i32 %5251, 2
  %5253 = icmp eq i32 %5252, 0
  %5254 = icmp slt i32 %5249, 10
  %5255 = or i1 %5253, %5254
  br i1 %5255, label %originalBB1799, label %originalBB1799alteredBB

originalBB1799:                                   ; preds = %5247, %originalBB1799alteredBB
  %5256 = load i8, i8* %33, align 1, !dbg !2455
  %5257 = trunc i8 %5256 to i1, !dbg !2455
  %5258 = load i32, i32* @x.35
  %5259 = load i32, i32* @y.36
  %5260 = sub i32 %5258, 1
  %5261 = mul i32 %5258, %5260
  %5262 = urem i32 %5261, 2
  %5263 = icmp eq i32 %5262, 0
  %5264 = icmp slt i32 %5259, 10
  %5265 = or i1 %5263, %5264
  br i1 %5265, label %originalBBpart21801, label %originalBB1799alteredBB

originalBBpart21801:                              ; preds = %originalBB1799
  br i1 %5257, label %5266, label %5285, !dbg !2457

5266:                                             ; preds = %originalBBpart21801
  %5267 = load i32, i32* @x.35
  %5268 = load i32, i32* @y.36
  %5269 = sub i32 %5267, 1
  %5270 = mul i32 %5267, %5269
  %5271 = urem i32 %5270, 2
  %5272 = icmp eq i32 %5271, 0
  %5273 = icmp slt i32 %5268, 10
  %5274 = or i1 %5272, %5273
  br i1 %5274, label %originalBB1803, label %originalBB1803alteredBB

originalBB1803:                                   ; preds = %5266, %originalBB1803alteredBB
  %5275 = load i32, i32* %23, align 4, !dbg !2458
  %5276 = icmp ne i32 %5275, 2, !dbg !2459
  %5277 = load i32, i32* @x.35
  %5278 = load i32, i32* @y.36
  %5279 = sub i32 %5277, 1
  %5280 = mul i32 %5277, %5279
  %5281 = urem i32 %5280, 2
  %5282 = icmp eq i32 %5281, 0
  %5283 = icmp slt i32 %5278, 10
  %5284 = or i1 %5282, %5283
  br i1 %5284, label %originalBBpart21805, label %originalBB1803alteredBB

originalBBpart21805:                              ; preds = %originalBB1803
  br i1 %5276, label %5304, label %5285, !dbg !2460

5285:                                             ; preds = %originalBBpart21805, %originalBBpart21801
  %5286 = load i32, i32* @x.35
  %5287 = load i32, i32* @y.36
  %5288 = sub i32 %5286, 1
  %5289 = mul i32 %5286, %5288
  %5290 = urem i32 %5289, 2
  %5291 = icmp eq i32 %5290, 0
  %5292 = icmp slt i32 %5287, 10
  %5293 = or i1 %5291, %5292
  br i1 %5293, label %originalBB1807, label %originalBB1807alteredBB

originalBB1807:                                   ; preds = %5285, %originalBB1807alteredBB
  %5294 = load i8, i8* %35, align 1, !dbg !2461
  %5295 = trunc i8 %5294 to i1, !dbg !2461
  %5296 = load i32, i32* @x.35
  %5297 = load i32, i32* @y.36
  %5298 = sub i32 %5296, 1
  %5299 = mul i32 %5296, %5298
  %5300 = urem i32 %5299, 2
  %5301 = icmp eq i32 %5300, 0
  %5302 = icmp slt i32 %5297, 10
  %5303 = or i1 %5301, %5302
  br i1 %5303, label %originalBBpart21809, label %originalBB1807alteredBB

originalBBpart21809:                              ; preds = %originalBB1807
  br i1 %5295, label %5304, label %5337, !dbg !2462

5304:                                             ; preds = %originalBBpart21809, %originalBBpart21805
  %5305 = load i32*, i32** %25, align 8, !dbg !2463
  %5306 = icmp ne i32* %5305, null, !dbg !2463
  br i1 %5306, label %5307, label %5337, !dbg !2464

5307:                                             ; preds = %5304
  %5308 = load i32, i32* @x.35
  %5309 = load i32, i32* @y.36
  %5310 = sub i32 %5308, 1
  %5311 = mul i32 %5308, %5310
  %5312 = urem i32 %5311, 2
  %5313 = icmp eq i32 %5312, 0
  %5314 = icmp slt i32 %5309, 10
  %5315 = or i1 %5313, %5314
  br i1 %5315, label %originalBB1811, label %originalBB1811alteredBB

originalBB1811:                                   ; preds = %5307, %originalBB1811alteredBB
  %5316 = load i32*, i32** %25, align 8, !dbg !2465
  %5317 = load i8, i8* %39, align 1, !dbg !2466
  %5318 = zext i8 %5317 to i64, !dbg !2466
  %5319 = udiv i64 %5318, 32, !dbg !2467
  %5320 = getelementptr inbounds i32, i32* %5316, i64 %5319, !dbg !2465
  %5321 = load i32, i32* %5320, align 4, !dbg !2465
  %5322 = load i8, i8* %39, align 1, !dbg !2468
  %5323 = zext i8 %5322 to i64, !dbg !2468
  %5324 = urem i64 %5323, 32, !dbg !2469
  %5325 = trunc i64 %5324 to i32, !dbg !2470
  %5326 = lshr i32 %5321, %5325, !dbg !2470
  %5327 = and i32 %5326, 1, !dbg !2471
  %5328 = icmp ne i32 %5327, 0, !dbg !2471
  %5329 = load i32, i32* @x.35
  %5330 = load i32, i32* @y.36
  %5331 = sub i32 %5329, 1
  %5332 = mul i32 %5329, %5331
  %5333 = urem i32 %5332, 2
  %5334 = icmp eq i32 %5333, 0
  %5335 = icmp slt i32 %5330, 10
  %5336 = or i1 %5334, %5335
  br i1 %5336, label %originalBBpart21852, label %originalBB1811alteredBB

originalBBpart21852:                              ; preds = %originalBB1811
  br i1 %5328, label %5357, label %5337, !dbg !2472

5337:                                             ; preds = %originalBBpart21852, %5304, %originalBBpart21809
  %5338 = load i8, i8* %41, align 1, !dbg !2473
  %5339 = trunc i8 %5338 to i1, !dbg !2473
  br i1 %5339, label %5357, label %5340, !dbg !2474

5340:                                             ; preds = %5337
  %5341 = load i32, i32* @x.35
  %5342 = load i32, i32* @y.36
  %5343 = sub i32 %5341, 1
  %5344 = mul i32 %5341, %5343
  %5345 = urem i32 %5344, 2
  %5346 = icmp eq i32 %5345, 0
  %5347 = icmp slt i32 %5342, 10
  %5348 = or i1 %5346, %5347
  br i1 %5348, label %originalBB1854, label %originalBB1854alteredBB

originalBB1854:                                   ; preds = %5340, %originalBB1854alteredBB
  %5349 = load i32, i32* @x.35
  %5350 = load i32, i32* @y.36
  %5351 = sub i32 %5349, 1
  %5352 = mul i32 %5349, %5351
  %5353 = urem i32 %5352, 2
  %5354 = icmp eq i32 %5353, 0
  %5355 = icmp slt i32 %5350, 10
  %5356 = or i1 %5354, %5355
  br i1 %5356, label %originalBBpart21856, label %originalBB1854alteredBB

originalBBpart21856:                              ; preds = %originalBB1854
  br label %5804, !dbg !2475

5357:                                             ; preds = %5337, %originalBBpart21852
  %5358 = load i32, i32* @x.35
  %5359 = load i32, i32* @y.36
  %5360 = sub i32 %5358, 1
  %5361 = mul i32 %5358, %5360
  %5362 = urem i32 %5361, 2
  %5363 = icmp eq i32 %5362, 0
  %5364 = icmp slt i32 %5359, 10
  %5365 = or i1 %5363, %5364
  br i1 %5365, label %originalBB1858, label %originalBB1858alteredBB

originalBB1858:                                   ; preds = %5357, %originalBB1858alteredBB
  %5366 = load i32, i32* @x.35
  %5367 = load i32, i32* @y.36
  %5368 = sub i32 %5366, 1
  %5369 = mul i32 %5366, %5368
  %5370 = urem i32 %5369, 2
  %5371 = icmp eq i32 %5370, 0
  %5372 = icmp slt i32 %5367, 10
  %5373 = or i1 %5371, %5372
  br i1 %5373, label %originalBBpart21860, label %originalBB1858alteredBB

originalBBpart21860:                              ; preds = %originalBB1858
  br label %5374, !dbg !2473

5374:                                             ; preds = %originalBBpart21860, %2857
  call void @llvm.dbg.label(metadata !2476), !dbg !2477
  %5375 = load i32, i32* @x.35
  %5376 = load i32, i32* @y.36
  %5377 = sub i32 %5375, 1
  %5378 = mul i32 %5375, %5377
  %5379 = urem i32 %5378, 2
  %5380 = icmp eq i32 %5379, 0
  %5381 = icmp slt i32 %5376, 10
  %5382 = or i1 %5380, %5381
  br i1 %5382, label %originalBB1862, label %originalBB1862alteredBB

originalBB1862:                                   ; preds = %5374, %originalBB1862alteredBB
  %5383 = load i32, i32* @x.35
  %5384 = load i32, i32* @y.36
  %5385 = sub i32 %5383, 1
  %5386 = mul i32 %5383, %5385
  %5387 = urem i32 %5386, 2
  %5388 = icmp eq i32 %5387, 0
  %5389 = icmp slt i32 %5384, 10
  %5390 = or i1 %5388, %5389
  br i1 %5390, label %originalBBpart21864, label %originalBB1862alteredBB

originalBBpart21864:                              ; preds = %originalBB1862
  br label %5391, !dbg !2478

5391:                                             ; preds = %originalBBpart21864
  %5392 = load i32, i32* @x.35
  %5393 = load i32, i32* @y.36
  %5394 = sub i32 %5392, 1
  %5395 = mul i32 %5392, %5394
  %5396 = urem i32 %5395, 2
  %5397 = icmp eq i32 %5396, 0
  %5398 = icmp slt i32 %5393, 10
  %5399 = or i1 %5397, %5398
  br i1 %5399, label %originalBB1866, label %originalBB1866alteredBB

originalBB1866:                                   ; preds = %5391, %originalBB1866alteredBB
  %5400 = load i8, i8* %35, align 1, !dbg !2479
  %5401 = trunc i8 %5400 to i1, !dbg !2479
  %5402 = load i32, i32* @x.35
  %5403 = load i32, i32* @y.36
  %5404 = sub i32 %5402, 1
  %5405 = mul i32 %5402, %5404
  %5406 = urem i32 %5405, 2
  %5407 = icmp eq i32 %5406, 0
  %5408 = icmp slt i32 %5403, 10
  %5409 = or i1 %5407, %5408
  br i1 %5409, label %originalBBpart21868, label %originalBB1866alteredBB

originalBBpart21868:                              ; preds = %originalBB1866
  br i1 %5401, label %5410, label %5427, !dbg !2482

5410:                                             ; preds = %originalBBpart21868
  %5411 = load i32, i32* @x.35
  %5412 = load i32, i32* @y.36
  %5413 = sub i32 %5411, 1
  %5414 = mul i32 %5411, %5413
  %5415 = urem i32 %5414, 2
  %5416 = icmp eq i32 %5415, 0
  %5417 = icmp slt i32 %5412, 10
  %5418 = or i1 %5416, %5417
  br i1 %5418, label %originalBB1870, label %originalBB1870alteredBB

originalBB1870:                                   ; preds = %5410, %originalBB1870alteredBB
  %5419 = load i32, i32* @x.35
  %5420 = load i32, i32* @y.36
  %5421 = sub i32 %5419, 1
  %5422 = mul i32 %5419, %5421
  %5423 = urem i32 %5422, 2
  %5424 = icmp eq i32 %5423, 0
  %5425 = icmp slt i32 %5420, 10
  %5426 = or i1 %5424, %5425
  br i1 %5426, label %originalBBpart21872, label %originalBB1870alteredBB

originalBBpart21872:                              ; preds = %originalBB1870
  br label %6709, !dbg !2479

5427:                                             ; preds = %originalBBpart21868
  %5428 = load i32, i32* @x.35
  %5429 = load i32, i32* @y.36
  %5430 = sub i32 %5428, 1
  %5431 = mul i32 %5428, %5430
  %5432 = urem i32 %5431, 2
  %5433 = icmp eq i32 %5432, 0
  %5434 = icmp slt i32 %5429, 10
  %5435 = or i1 %5433, %5434
  br i1 %5435, label %originalBB1874, label %originalBB1874alteredBB

originalBB1874:                                   ; preds = %5427, %originalBB1874alteredBB
  store i8 1, i8* %42, align 1, !dbg !2482
  %5436 = load i32, i32* %23, align 4, !dbg !2483
  %5437 = icmp eq i32 %5436, 2, !dbg !2483
  %5438 = load i32, i32* @x.35
  %5439 = load i32, i32* @y.36
  %5440 = sub i32 %5438, 1
  %5441 = mul i32 %5438, %5440
  %5442 = urem i32 %5441, 2
  %5443 = icmp eq i32 %5442, 0
  %5444 = icmp slt i32 %5439, 10
  %5445 = or i1 %5443, %5444
  br i1 %5445, label %originalBBpart21876, label %originalBB1874alteredBB

originalBBpart21876:                              ; preds = %originalBB1874
  br i1 %5437, label %5446, label %5710, !dbg !2483

5446:                                             ; preds = %originalBBpart21876
  %5447 = load i32, i32* @x.35
  %5448 = load i32, i32* @y.36
  %5449 = sub i32 %5447, 1
  %5450 = mul i32 %5447, %5449
  %5451 = urem i32 %5450, 2
  %5452 = icmp eq i32 %5451, 0
  %5453 = icmp slt i32 %5448, 10
  %5454 = or i1 %5452, %5453
  br i1 %5454, label %originalBB1878, label %originalBB1878alteredBB

originalBB1878:                                   ; preds = %5446, %originalBB1878alteredBB
  %5455 = load i8, i8* %36, align 1, !dbg !2483
  %5456 = trunc i8 %5455 to i1, !dbg !2483
  %5457 = load i32, i32* @x.35
  %5458 = load i32, i32* @y.36
  %5459 = sub i32 %5457, 1
  %5460 = mul i32 %5457, %5459
  %5461 = urem i32 %5460, 2
  %5462 = icmp eq i32 %5461, 0
  %5463 = icmp slt i32 %5458, 10
  %5464 = or i1 %5462, %5463
  br i1 %5464, label %originalBBpart21880, label %originalBB1878alteredBB

originalBBpart21880:                              ; preds = %originalBB1878
  br i1 %5456, label %5710, label %5465, !dbg !2482

5465:                                             ; preds = %originalBBpart21880
  %5466 = load i32, i32* @x.35
  %5467 = load i32, i32* @y.36
  %5468 = sub i32 %5466, 1
  %5469 = mul i32 %5466, %5468
  %5470 = urem i32 %5469, 2
  %5471 = icmp eq i32 %5470, 0
  %5472 = icmp slt i32 %5467, 10
  %5473 = or i1 %5471, %5472
  br i1 %5473, label %originalBB1882, label %originalBB1882alteredBB

originalBB1882:                                   ; preds = %5465, %originalBB1882alteredBB
  %5474 = load i32, i32* @x.35
  %5475 = load i32, i32* @y.36
  %5476 = sub i32 %5474, 1
  %5477 = mul i32 %5474, %5476
  %5478 = urem i32 %5477, 2
  %5479 = icmp eq i32 %5478, 0
  %5480 = icmp slt i32 %5475, 10
  %5481 = or i1 %5479, %5480
  br i1 %5481, label %originalBBpart21884, label %originalBB1882alteredBB

originalBBpart21884:                              ; preds = %originalBB1882
  br label %5482, !dbg !2485

5482:                                             ; preds = %originalBBpart21884
  %5483 = load i32, i32* @x.35
  %5484 = load i32, i32* @y.36
  %5485 = sub i32 %5483, 1
  %5486 = mul i32 %5483, %5485
  %5487 = urem i32 %5486, 2
  %5488 = icmp eq i32 %5487, 0
  %5489 = icmp slt i32 %5484, 10
  %5490 = or i1 %5488, %5489
  br i1 %5490, label %originalBB1886, label %originalBB1886alteredBB

originalBB1886:                                   ; preds = %5482, %originalBB1886alteredBB
  %5491 = load i64, i64* %29, align 8, !dbg !2487
  %5492 = load i64, i64* %20, align 8, !dbg !2487
  %5493 = icmp ult i64 %5491, %5492, !dbg !2487
  %5494 = load i32, i32* @x.35
  %5495 = load i32, i32* @y.36
  %5496 = sub i32 %5494, 1
  %5497 = mul i32 %5494, %5496
  %5498 = urem i32 %5497, 2
  %5499 = icmp eq i32 %5498, 0
  %5500 = icmp slt i32 %5495, 10
  %5501 = or i1 %5499, %5500
  br i1 %5501, label %originalBBpart21888, label %originalBB1886alteredBB

originalBBpart21888:                              ; preds = %originalBB1886
  br i1 %5493, label %5502, label %5522, !dbg !2490

5502:                                             ; preds = %originalBBpart21888
  %5503 = load i32, i32* @x.35
  %5504 = load i32, i32* @y.36
  %5505 = sub i32 %5503, 1
  %5506 = mul i32 %5503, %5505
  %5507 = urem i32 %5506, 2
  %5508 = icmp eq i32 %5507, 0
  %5509 = icmp slt i32 %5504, 10
  %5510 = or i1 %5508, %5509
  br i1 %5510, label %originalBB1890, label %originalBB1890alteredBB

originalBB1890:                                   ; preds = %5502, %originalBB1890alteredBB
  %5511 = load i8*, i8** %19, align 8, !dbg !2487
  %5512 = load i64, i64* %29, align 8, !dbg !2487
  %5513 = getelementptr inbounds i8, i8* %5511, i64 %5512, !dbg !2487
  store i8 39, i8* %5513, align 1, !dbg !2487
  %5514 = load i32, i32* @x.35
  %5515 = load i32, i32* @y.36
  %5516 = sub i32 %5514, 1
  %5517 = mul i32 %5514, %5516
  %5518 = urem i32 %5517, 2
  %5519 = icmp eq i32 %5518, 0
  %5520 = icmp slt i32 %5515, 10
  %5521 = or i1 %5519, %5520
  br i1 %5521, label %originalBBpart21892, label %originalBB1890alteredBB

originalBBpart21892:                              ; preds = %originalBB1890
  br label %5522, !dbg !2487

5522:                                             ; preds = %originalBBpart21892, %originalBBpart21888
  %5523 = load i32, i32* @x.35
  %5524 = load i32, i32* @y.36
  %5525 = sub i32 %5523, 1
  %5526 = mul i32 %5523, %5525
  %5527 = urem i32 %5526, 2
  %5528 = icmp eq i32 %5527, 0
  %5529 = icmp slt i32 %5524, 10
  %5530 = or i1 %5528, %5529
  br i1 %5530, label %originalBB1894, label %originalBB1894alteredBB

originalBB1894:                                   ; preds = %5522, %originalBB1894alteredBB
  %5531 = load i64, i64* %29, align 8, !dbg !2490
  %5532 = add i64 %5531, 1, !dbg !2490
  store i64 %5532, i64* %29, align 8, !dbg !2490
  %5533 = load i32, i32* @x.35
  %5534 = load i32, i32* @y.36
  %5535 = sub i32 %5533, 1
  %5536 = mul i32 %5533, %5535
  %5537 = urem i32 %5536, 2
  %5538 = icmp eq i32 %5537, 0
  %5539 = icmp slt i32 %5534, 10
  %5540 = or i1 %5538, %5539
  br i1 %5540, label %originalBBpart21904, label %originalBB1894alteredBB

originalBBpart21904:                              ; preds = %originalBB1894
  br label %5541, !dbg !2490

5541:                                             ; preds = %originalBBpart21904
  %5542 = load i32, i32* @x.35
  %5543 = load i32, i32* @y.36
  %5544 = sub i32 %5542, 1
  %5545 = mul i32 %5542, %5544
  %5546 = urem i32 %5545, 2
  %5547 = icmp eq i32 %5546, 0
  %5548 = icmp slt i32 %5543, 10
  %5549 = or i1 %5547, %5548
  br i1 %5549, label %originalBB1906, label %originalBB1906alteredBB

originalBB1906:                                   ; preds = %5541, %originalBB1906alteredBB
  %5550 = load i32, i32* @x.35
  %5551 = load i32, i32* @y.36
  %5552 = sub i32 %5550, 1
  %5553 = mul i32 %5550, %5552
  %5554 = urem i32 %5553, 2
  %5555 = icmp eq i32 %5554, 0
  %5556 = icmp slt i32 %5551, 10
  %5557 = or i1 %5555, %5556
  br i1 %5557, label %originalBBpart21908, label %originalBB1906alteredBB

originalBBpart21908:                              ; preds = %originalBB1906
  br label %5558, !dbg !2485

5558:                                             ; preds = %originalBBpart21908
  %5559 = load i32, i32* @x.35
  %5560 = load i32, i32* @y.36
  %5561 = sub i32 %5559, 1
  %5562 = mul i32 %5559, %5561
  %5563 = urem i32 %5562, 2
  %5564 = icmp eq i32 %5563, 0
  %5565 = icmp slt i32 %5560, 10
  %5566 = or i1 %5564, %5565
  br i1 %5566, label %originalBB1910, label %originalBB1910alteredBB

originalBB1910:                                   ; preds = %5558, %originalBB1910alteredBB
  %5567 = load i64, i64* %29, align 8, !dbg !2491
  %5568 = load i64, i64* %20, align 8, !dbg !2491
  %5569 = icmp ult i64 %5567, %5568, !dbg !2491
  %5570 = load i32, i32* @x.35
  %5571 = load i32, i32* @y.36
  %5572 = sub i32 %5570, 1
  %5573 = mul i32 %5570, %5572
  %5574 = urem i32 %5573, 2
  %5575 = icmp eq i32 %5574, 0
  %5576 = icmp slt i32 %5571, 10
  %5577 = or i1 %5575, %5576
  br i1 %5577, label %originalBBpart21912, label %originalBB1910alteredBB

originalBBpart21912:                              ; preds = %originalBB1910
  br i1 %5569, label %5578, label %5598, !dbg !2494

5578:                                             ; preds = %originalBBpart21912
  %5579 = load i32, i32* @x.35
  %5580 = load i32, i32* @y.36
  %5581 = sub i32 %5579, 1
  %5582 = mul i32 %5579, %5581
  %5583 = urem i32 %5582, 2
  %5584 = icmp eq i32 %5583, 0
  %5585 = icmp slt i32 %5580, 10
  %5586 = or i1 %5584, %5585
  br i1 %5586, label %originalBB1914, label %originalBB1914alteredBB

originalBB1914:                                   ; preds = %5578, %originalBB1914alteredBB
  %5587 = load i8*, i8** %19, align 8, !dbg !2491
  %5588 = load i64, i64* %29, align 8, !dbg !2491
  %5589 = getelementptr inbounds i8, i8* %5587, i64 %5588, !dbg !2491
  store i8 36, i8* %5589, align 1, !dbg !2491
  %5590 = load i32, i32* @x.35
  %5591 = load i32, i32* @y.36
  %5592 = sub i32 %5590, 1
  %5593 = mul i32 %5590, %5592
  %5594 = urem i32 %5593, 2
  %5595 = icmp eq i32 %5594, 0
  %5596 = icmp slt i32 %5591, 10
  %5597 = or i1 %5595, %5596
  br i1 %5597, label %originalBBpart21916, label %originalBB1914alteredBB

originalBBpart21916:                              ; preds = %originalBB1914
  br label %5598, !dbg !2491

5598:                                             ; preds = %originalBBpart21916, %originalBBpart21912
  %5599 = load i32, i32* @x.35
  %5600 = load i32, i32* @y.36
  %5601 = sub i32 %5599, 1
  %5602 = mul i32 %5599, %5601
  %5603 = urem i32 %5602, 2
  %5604 = icmp eq i32 %5603, 0
  %5605 = icmp slt i32 %5600, 10
  %5606 = or i1 %5604, %5605
  br i1 %5606, label %originalBB1918, label %originalBB1918alteredBB

originalBB1918:                                   ; preds = %5598, %originalBB1918alteredBB
  %5607 = load i64, i64* %29, align 8, !dbg !2494
  %5608 = add i64 %5607, 1, !dbg !2494
  store i64 %5608, i64* %29, align 8, !dbg !2494
  %5609 = load i32, i32* @x.35
  %5610 = load i32, i32* @y.36
  %5611 = sub i32 %5609, 1
  %5612 = mul i32 %5609, %5611
  %5613 = urem i32 %5612, 2
  %5614 = icmp eq i32 %5613, 0
  %5615 = icmp slt i32 %5610, 10
  %5616 = or i1 %5614, %5615
  br i1 %5616, label %originalBBpart21924, label %originalBB1918alteredBB

originalBBpart21924:                              ; preds = %originalBB1918
  br label %5617, !dbg !2494

5617:                                             ; preds = %originalBBpart21924
  %5618 = load i32, i32* @x.35
  %5619 = load i32, i32* @y.36
  %5620 = sub i32 %5618, 1
  %5621 = mul i32 %5618, %5620
  %5622 = urem i32 %5621, 2
  %5623 = icmp eq i32 %5622, 0
  %5624 = icmp slt i32 %5619, 10
  %5625 = or i1 %5623, %5624
  br i1 %5625, label %originalBB1926, label %originalBB1926alteredBB

originalBB1926:                                   ; preds = %5617, %originalBB1926alteredBB
  %5626 = load i32, i32* @x.35
  %5627 = load i32, i32* @y.36
  %5628 = sub i32 %5626, 1
  %5629 = mul i32 %5626, %5628
  %5630 = urem i32 %5629, 2
  %5631 = icmp eq i32 %5630, 0
  %5632 = icmp slt i32 %5627, 10
  %5633 = or i1 %5631, %5632
  br i1 %5633, label %originalBBpart21928, label %originalBB1926alteredBB

originalBBpart21928:                              ; preds = %originalBB1926
  br label %5634, !dbg !2485

5634:                                             ; preds = %originalBBpart21928
  %5635 = load i32, i32* @x.35
  %5636 = load i32, i32* @y.36
  %5637 = sub i32 %5635, 1
  %5638 = mul i32 %5635, %5637
  %5639 = urem i32 %5638, 2
  %5640 = icmp eq i32 %5639, 0
  %5641 = icmp slt i32 %5636, 10
  %5642 = or i1 %5640, %5641
  br i1 %5642, label %originalBB1930, label %originalBB1930alteredBB

originalBB1930:                                   ; preds = %5634, %originalBB1930alteredBB
  %5643 = load i64, i64* %29, align 8, !dbg !2495
  %5644 = load i64, i64* %20, align 8, !dbg !2495
  %5645 = icmp ult i64 %5643, %5644, !dbg !2495
  %5646 = load i32, i32* @x.35
  %5647 = load i32, i32* @y.36
  %5648 = sub i32 %5646, 1
  %5649 = mul i32 %5646, %5648
  %5650 = urem i32 %5649, 2
  %5651 = icmp eq i32 %5650, 0
  %5652 = icmp slt i32 %5647, 10
  %5653 = or i1 %5651, %5652
  br i1 %5653, label %originalBBpart21932, label %originalBB1930alteredBB

originalBBpart21932:                              ; preds = %originalBB1930
  br i1 %5645, label %5654, label %5674, !dbg !2498

5654:                                             ; preds = %originalBBpart21932
  %5655 = load i32, i32* @x.35
  %5656 = load i32, i32* @y.36
  %5657 = sub i32 %5655, 1
  %5658 = mul i32 %5655, %5657
  %5659 = urem i32 %5658, 2
  %5660 = icmp eq i32 %5659, 0
  %5661 = icmp slt i32 %5656, 10
  %5662 = or i1 %5660, %5661
  br i1 %5662, label %originalBB1934, label %originalBB1934alteredBB

originalBB1934:                                   ; preds = %5654, %originalBB1934alteredBB
  %5663 = load i8*, i8** %19, align 8, !dbg !2495
  %5664 = load i64, i64* %29, align 8, !dbg !2495
  %5665 = getelementptr inbounds i8, i8* %5663, i64 %5664, !dbg !2495
  store i8 39, i8* %5665, align 1, !dbg !2495
  %5666 = load i32, i32* @x.35
  %5667 = load i32, i32* @y.36
  %5668 = sub i32 %5666, 1
  %5669 = mul i32 %5666, %5668
  %5670 = urem i32 %5669, 2
  %5671 = icmp eq i32 %5670, 0
  %5672 = icmp slt i32 %5667, 10
  %5673 = or i1 %5671, %5672
  br i1 %5673, label %originalBBpart21936, label %originalBB1934alteredBB

originalBBpart21936:                              ; preds = %originalBB1934
  br label %5674, !dbg !2495

5674:                                             ; preds = %originalBBpart21936, %originalBBpart21932
  %5675 = load i32, i32* @x.35
  %5676 = load i32, i32* @y.36
  %5677 = sub i32 %5675, 1
  %5678 = mul i32 %5675, %5677
  %5679 = urem i32 %5678, 2
  %5680 = icmp eq i32 %5679, 0
  %5681 = icmp slt i32 %5676, 10
  %5682 = or i1 %5680, %5681
  br i1 %5682, label %originalBB1938, label %originalBB1938alteredBB

originalBB1938:                                   ; preds = %5674, %originalBB1938alteredBB
  %5683 = load i64, i64* %29, align 8, !dbg !2498
  %5684 = add i64 %5683, 1, !dbg !2498
  store i64 %5684, i64* %29, align 8, !dbg !2498
  %5685 = load i32, i32* @x.35
  %5686 = load i32, i32* @y.36
  %5687 = sub i32 %5685, 1
  %5688 = mul i32 %5685, %5687
  %5689 = urem i32 %5688, 2
  %5690 = icmp eq i32 %5689, 0
  %5691 = icmp slt i32 %5686, 10
  %5692 = or i1 %5690, %5691
  br i1 %5692, label %originalBBpart21951, label %originalBB1938alteredBB

originalBBpart21951:                              ; preds = %originalBB1938
  br label %5693, !dbg !2498

5693:                                             ; preds = %originalBBpart21951
  %5694 = load i32, i32* @x.35
  %5695 = load i32, i32* @y.36
  %5696 = sub i32 %5694, 1
  %5697 = mul i32 %5694, %5696
  %5698 = urem i32 %5697, 2
  %5699 = icmp eq i32 %5698, 0
  %5700 = icmp slt i32 %5695, 10
  %5701 = or i1 %5699, %5700
  br i1 %5701, label %originalBB1953, label %originalBB1953alteredBB

originalBB1953:                                   ; preds = %5693, %originalBB1953alteredBB
  store i8 1, i8* %36, align 1, !dbg !2485
  %5702 = load i32, i32* @x.35
  %5703 = load i32, i32* @y.36
  %5704 = sub i32 %5702, 1
  %5705 = mul i32 %5702, %5704
  %5706 = urem i32 %5705, 2
  %5707 = icmp eq i32 %5706, 0
  %5708 = icmp slt i32 %5703, 10
  %5709 = or i1 %5707, %5708
  br i1 %5709, label %originalBBpart21955, label %originalBB1953alteredBB

originalBBpart21955:                              ; preds = %originalBB1953
  br label %5710, !dbg !2485

5710:                                             ; preds = %originalBBpart21955, %originalBBpart21880, %originalBBpart21876
  %5711 = load i32, i32* @x.35
  %5712 = load i32, i32* @y.36
  %5713 = sub i32 %5711, 1
  %5714 = mul i32 %5711, %5713
  %5715 = urem i32 %5714, 2
  %5716 = icmp eq i32 %5715, 0
  %5717 = icmp slt i32 %5712, 10
  %5718 = or i1 %5716, %5717
  br i1 %5718, label %originalBB1957, label %originalBB1957alteredBB

originalBB1957:                                   ; preds = %5710, %originalBB1957alteredBB
  %5719 = load i32, i32* @x.35
  %5720 = load i32, i32* @y.36
  %5721 = sub i32 %5719, 1
  %5722 = mul i32 %5719, %5721
  %5723 = urem i32 %5722, 2
  %5724 = icmp eq i32 %5723, 0
  %5725 = icmp slt i32 %5720, 10
  %5726 = or i1 %5724, %5725
  br i1 %5726, label %originalBBpart21959, label %originalBB1957alteredBB

originalBBpart21959:                              ; preds = %originalBB1957
  br label %5727, !dbg !2482

5727:                                             ; preds = %originalBBpart21959
  %5728 = load i32, i32* @x.35
  %5729 = load i32, i32* @y.36
  %5730 = sub i32 %5728, 1
  %5731 = mul i32 %5728, %5730
  %5732 = urem i32 %5731, 2
  %5733 = icmp eq i32 %5732, 0
  %5734 = icmp slt i32 %5729, 10
  %5735 = or i1 %5733, %5734
  br i1 %5735, label %originalBB1961, label %originalBB1961alteredBB

originalBB1961:                                   ; preds = %5727, %originalBB1961alteredBB
  %5736 = load i64, i64* %29, align 8, !dbg !2499
  %5737 = load i64, i64* %20, align 8, !dbg !2499
  %5738 = icmp ult i64 %5736, %5737, !dbg !2499
  %5739 = load i32, i32* @x.35
  %5740 = load i32, i32* @y.36
  %5741 = sub i32 %5739, 1
  %5742 = mul i32 %5739, %5741
  %5743 = urem i32 %5742, 2
  %5744 = icmp eq i32 %5743, 0
  %5745 = icmp slt i32 %5740, 10
  %5746 = or i1 %5744, %5745
  br i1 %5746, label %originalBBpart21963, label %originalBB1961alteredBB

originalBBpart21963:                              ; preds = %originalBB1961
  br i1 %5738, label %5747, label %5767, !dbg !2502

5747:                                             ; preds = %originalBBpart21963
  %5748 = load i32, i32* @x.35
  %5749 = load i32, i32* @y.36
  %5750 = sub i32 %5748, 1
  %5751 = mul i32 %5748, %5750
  %5752 = urem i32 %5751, 2
  %5753 = icmp eq i32 %5752, 0
  %5754 = icmp slt i32 %5749, 10
  %5755 = or i1 %5753, %5754
  br i1 %5755, label %originalBB1965, label %originalBB1965alteredBB

originalBB1965:                                   ; preds = %5747, %originalBB1965alteredBB
  %5756 = load i8*, i8** %19, align 8, !dbg !2499
  %5757 = load i64, i64* %29, align 8, !dbg !2499
  %5758 = getelementptr inbounds i8, i8* %5756, i64 %5757, !dbg !2499
  store i8 92, i8* %5758, align 1, !dbg !2499
  %5759 = load i32, i32* @x.35
  %5760 = load i32, i32* @y.36
  %5761 = sub i32 %5759, 1
  %5762 = mul i32 %5759, %5761
  %5763 = urem i32 %5762, 2
  %5764 = icmp eq i32 %5763, 0
  %5765 = icmp slt i32 %5760, 10
  %5766 = or i1 %5764, %5765
  br i1 %5766, label %originalBBpart21967, label %originalBB1965alteredBB

originalBBpart21967:                              ; preds = %originalBB1965
  br label %5767, !dbg !2499

5767:                                             ; preds = %originalBBpart21967, %originalBBpart21963
  %5768 = load i64, i64* %29, align 8, !dbg !2502
  %5769 = add i64 %5768, 1, !dbg !2502
  store i64 %5769, i64* %29, align 8, !dbg !2502
  br label %5770, !dbg !2502

5770:                                             ; preds = %5767
  %5771 = load i32, i32* @x.35
  %5772 = load i32, i32* @y.36
  %5773 = sub i32 %5771, 1
  %5774 = mul i32 %5771, %5773
  %5775 = urem i32 %5774, 2
  %5776 = icmp eq i32 %5775, 0
  %5777 = icmp slt i32 %5772, 10
  %5778 = or i1 %5776, %5777
  br i1 %5778, label %originalBB1969, label %originalBB1969alteredBB

originalBB1969:                                   ; preds = %5770, %originalBB1969alteredBB
  %5779 = load i32, i32* @x.35
  %5780 = load i32, i32* @y.36
  %5781 = sub i32 %5779, 1
  %5782 = mul i32 %5779, %5781
  %5783 = urem i32 %5782, 2
  %5784 = icmp eq i32 %5783, 0
  %5785 = icmp slt i32 %5780, 10
  %5786 = or i1 %5784, %5785
  br i1 %5786, label %originalBBpart21971, label %originalBB1969alteredBB

originalBBpart21971:                              ; preds = %originalBB1969
  br label %5787, !dbg !2482

5787:                                             ; preds = %originalBBpart21971
  %5788 = load i32, i32* @x.35
  %5789 = load i32, i32* @y.36
  %5790 = sub i32 %5788, 1
  %5791 = mul i32 %5788, %5790
  %5792 = urem i32 %5791, 2
  %5793 = icmp eq i32 %5792, 0
  %5794 = icmp slt i32 %5789, 10
  %5795 = or i1 %5793, %5794
  br i1 %5795, label %originalBB1973, label %originalBB1973alteredBB

originalBB1973:                                   ; preds = %5787, %originalBB1973alteredBB
  %5796 = load i32, i32* @x.35
  %5797 = load i32, i32* @y.36
  %5798 = sub i32 %5796, 1
  %5799 = mul i32 %5796, %5798
  %5800 = urem i32 %5799, 2
  %5801 = icmp eq i32 %5800, 0
  %5802 = icmp slt i32 %5797, 10
  %5803 = or i1 %5801, %5802
  br i1 %5803, label %originalBBpart21975, label %originalBB1973alteredBB

originalBBpart21975:                              ; preds = %originalBB1973
  br label %5804, !dbg !2482

5804:                                             ; preds = %originalBBpart21975, %originalBBpart21856, %originalBBpart21793, %originalBBpart21026, %2706
  call void @llvm.dbg.label(metadata !2503), !dbg !2504
  %5805 = load i32, i32* @x.35
  %5806 = load i32, i32* @y.36
  %5807 = sub i32 %5805, 1
  %5808 = mul i32 %5805, %5807
  %5809 = urem i32 %5808, 2
  %5810 = icmp eq i32 %5809, 0
  %5811 = icmp slt i32 %5806, 10
  %5812 = or i1 %5810, %5811
  br i1 %5812, label %originalBB1977, label %originalBB1977alteredBB

originalBB1977:                                   ; preds = %5804, %originalBB1977alteredBB
  %5813 = load i32, i32* @x.35
  %5814 = load i32, i32* @y.36
  %5815 = sub i32 %5813, 1
  %5816 = mul i32 %5813, %5815
  %5817 = urem i32 %5816, 2
  %5818 = icmp eq i32 %5817, 0
  %5819 = icmp slt i32 %5814, 10
  %5820 = or i1 %5818, %5819
  br i1 %5820, label %originalBBpart21979, label %originalBB1977alteredBB

originalBBpart21979:                              ; preds = %originalBB1977
  br label %5821, !dbg !2505

5821:                                             ; preds = %originalBBpart21979
  %5822 = load i32, i32* @x.35
  %5823 = load i32, i32* @y.36
  %5824 = sub i32 %5822, 1
  %5825 = mul i32 %5822, %5824
  %5826 = urem i32 %5825, 2
  %5827 = icmp eq i32 %5826, 0
  %5828 = icmp slt i32 %5823, 10
  %5829 = or i1 %5827, %5828
  br i1 %5829, label %originalBB1981, label %originalBB1981alteredBB

originalBB1981:                                   ; preds = %5821, %originalBB1981alteredBB
  %5830 = load i8, i8* %36, align 1, !dbg !2506
  %5831 = trunc i8 %5830 to i1, !dbg !2506
  %5832 = load i32, i32* @x.35
  %5833 = load i32, i32* @y.36
  %5834 = sub i32 %5832, 1
  %5835 = mul i32 %5832, %5834
  %5836 = urem i32 %5835, 2
  %5837 = icmp eq i32 %5836, 0
  %5838 = icmp slt i32 %5833, 10
  %5839 = or i1 %5837, %5838
  br i1 %5839, label %originalBBpart21983, label %originalBB1981alteredBB

originalBBpart21983:                              ; preds = %originalBB1981
  br i1 %5831, label %5840, label %6012, !dbg !2506

5840:                                             ; preds = %originalBBpart21983
  %5841 = load i32, i32* @x.35
  %5842 = load i32, i32* @y.36
  %5843 = sub i32 %5841, 1
  %5844 = mul i32 %5841, %5843
  %5845 = urem i32 %5844, 2
  %5846 = icmp eq i32 %5845, 0
  %5847 = icmp slt i32 %5842, 10
  %5848 = or i1 %5846, %5847
  br i1 %5848, label %originalBB1985, label %originalBB1985alteredBB

originalBB1985:                                   ; preds = %5840, %originalBB1985alteredBB
  %5849 = load i8, i8* %42, align 1, !dbg !2506
  %5850 = trunc i8 %5849 to i1, !dbg !2506
  %5851 = load i32, i32* @x.35
  %5852 = load i32, i32* @y.36
  %5853 = sub i32 %5851, 1
  %5854 = mul i32 %5851, %5853
  %5855 = urem i32 %5854, 2
  %5856 = icmp eq i32 %5855, 0
  %5857 = icmp slt i32 %5852, 10
  %5858 = or i1 %5856, %5857
  br i1 %5858, label %originalBBpart21987, label %originalBB1985alteredBB

originalBBpart21987:                              ; preds = %originalBB1985
  br i1 %5850, label %6012, label %5859, !dbg !2509

5859:                                             ; preds = %originalBBpart21987
  %5860 = load i32, i32* @x.35
  %5861 = load i32, i32* @y.36
  %5862 = sub i32 %5860, 1
  %5863 = mul i32 %5860, %5862
  %5864 = urem i32 %5863, 2
  %5865 = icmp eq i32 %5864, 0
  %5866 = icmp slt i32 %5861, 10
  %5867 = or i1 %5865, %5866
  br i1 %5867, label %originalBB1989, label %originalBB1989alteredBB

originalBB1989:                                   ; preds = %5859, %originalBB1989alteredBB
  %5868 = load i32, i32* @x.35
  %5869 = load i32, i32* @y.36
  %5870 = sub i32 %5868, 1
  %5871 = mul i32 %5868, %5870
  %5872 = urem i32 %5871, 2
  %5873 = icmp eq i32 %5872, 0
  %5874 = icmp slt i32 %5869, 10
  %5875 = or i1 %5873, %5874
  br i1 %5875, label %originalBBpart21991, label %originalBB1989alteredBB

originalBBpart21991:                              ; preds = %originalBB1989
  br label %5876, !dbg !2510

5876:                                             ; preds = %originalBBpart21991
  %5877 = load i32, i32* @x.35
  %5878 = load i32, i32* @y.36
  %5879 = sub i32 %5877, 1
  %5880 = mul i32 %5877, %5879
  %5881 = urem i32 %5880, 2
  %5882 = icmp eq i32 %5881, 0
  %5883 = icmp slt i32 %5878, 10
  %5884 = or i1 %5882, %5883
  br i1 %5884, label %originalBB1993, label %originalBB1993alteredBB

originalBB1993:                                   ; preds = %5876, %originalBB1993alteredBB
  %5885 = load i64, i64* %29, align 8, !dbg !2512
  %5886 = load i64, i64* %20, align 8, !dbg !2512
  %5887 = icmp ult i64 %5885, %5886, !dbg !2512
  %5888 = load i32, i32* @x.35
  %5889 = load i32, i32* @y.36
  %5890 = sub i32 %5888, 1
  %5891 = mul i32 %5888, %5890
  %5892 = urem i32 %5891, 2
  %5893 = icmp eq i32 %5892, 0
  %5894 = icmp slt i32 %5889, 10
  %5895 = or i1 %5893, %5894
  br i1 %5895, label %originalBBpart21995, label %originalBB1993alteredBB

originalBBpart21995:                              ; preds = %originalBB1993
  br i1 %5887, label %5896, label %5916, !dbg !2515

5896:                                             ; preds = %originalBBpart21995
  %5897 = load i32, i32* @x.35
  %5898 = load i32, i32* @y.36
  %5899 = sub i32 %5897, 1
  %5900 = mul i32 %5897, %5899
  %5901 = urem i32 %5900, 2
  %5902 = icmp eq i32 %5901, 0
  %5903 = icmp slt i32 %5898, 10
  %5904 = or i1 %5902, %5903
  br i1 %5904, label %originalBB1997, label %originalBB1997alteredBB

originalBB1997:                                   ; preds = %5896, %originalBB1997alteredBB
  %5905 = load i8*, i8** %19, align 8, !dbg !2512
  %5906 = load i64, i64* %29, align 8, !dbg !2512
  %5907 = getelementptr inbounds i8, i8* %5905, i64 %5906, !dbg !2512
  store i8 39, i8* %5907, align 1, !dbg !2512
  %5908 = load i32, i32* @x.35
  %5909 = load i32, i32* @y.36
  %5910 = sub i32 %5908, 1
  %5911 = mul i32 %5908, %5910
  %5912 = urem i32 %5911, 2
  %5913 = icmp eq i32 %5912, 0
  %5914 = icmp slt i32 %5909, 10
  %5915 = or i1 %5913, %5914
  br i1 %5915, label %originalBBpart21999, label %originalBB1997alteredBB

originalBBpart21999:                              ; preds = %originalBB1997
  br label %5916, !dbg !2512

5916:                                             ; preds = %originalBBpart21999, %originalBBpart21995
  %5917 = load i64, i64* %29, align 8, !dbg !2515
  %5918 = add i64 %5917, 1, !dbg !2515
  store i64 %5918, i64* %29, align 8, !dbg !2515
  br label %5919, !dbg !2515

5919:                                             ; preds = %5916
  %5920 = load i32, i32* @x.35
  %5921 = load i32, i32* @y.36
  %5922 = sub i32 %5920, 1
  %5923 = mul i32 %5920, %5922
  %5924 = urem i32 %5923, 2
  %5925 = icmp eq i32 %5924, 0
  %5926 = icmp slt i32 %5921, 10
  %5927 = or i1 %5925, %5926
  br i1 %5927, label %originalBB2001, label %originalBB2001alteredBB

originalBB2001:                                   ; preds = %5919, %originalBB2001alteredBB
  %5928 = load i32, i32* @x.35
  %5929 = load i32, i32* @y.36
  %5930 = sub i32 %5928, 1
  %5931 = mul i32 %5928, %5930
  %5932 = urem i32 %5931, 2
  %5933 = icmp eq i32 %5932, 0
  %5934 = icmp slt i32 %5929, 10
  %5935 = or i1 %5933, %5934
  br i1 %5935, label %originalBBpart22003, label %originalBB2001alteredBB

originalBBpart22003:                              ; preds = %originalBB2001
  br label %5936, !dbg !2510

5936:                                             ; preds = %originalBBpart22003
  %5937 = load i32, i32* @x.35
  %5938 = load i32, i32* @y.36
  %5939 = sub i32 %5937, 1
  %5940 = mul i32 %5937, %5939
  %5941 = urem i32 %5940, 2
  %5942 = icmp eq i32 %5941, 0
  %5943 = icmp slt i32 %5938, 10
  %5944 = or i1 %5942, %5943
  br i1 %5944, label %originalBB2005, label %originalBB2005alteredBB

originalBB2005:                                   ; preds = %5936, %originalBB2005alteredBB
  %5945 = load i64, i64* %29, align 8, !dbg !2516
  %5946 = load i64, i64* %20, align 8, !dbg !2516
  %5947 = icmp ult i64 %5945, %5946, !dbg !2516
  %5948 = load i32, i32* @x.35
  %5949 = load i32, i32* @y.36
  %5950 = sub i32 %5948, 1
  %5951 = mul i32 %5948, %5950
  %5952 = urem i32 %5951, 2
  %5953 = icmp eq i32 %5952, 0
  %5954 = icmp slt i32 %5949, 10
  %5955 = or i1 %5953, %5954
  br i1 %5955, label %originalBBpart22007, label %originalBB2005alteredBB

originalBBpart22007:                              ; preds = %originalBB2005
  br i1 %5947, label %5956, label %5976, !dbg !2519

5956:                                             ; preds = %originalBBpart22007
  %5957 = load i32, i32* @x.35
  %5958 = load i32, i32* @y.36
  %5959 = sub i32 %5957, 1
  %5960 = mul i32 %5957, %5959
  %5961 = urem i32 %5960, 2
  %5962 = icmp eq i32 %5961, 0
  %5963 = icmp slt i32 %5958, 10
  %5964 = or i1 %5962, %5963
  br i1 %5964, label %originalBB2009, label %originalBB2009alteredBB

originalBB2009:                                   ; preds = %5956, %originalBB2009alteredBB
  %5965 = load i8*, i8** %19, align 8, !dbg !2516
  %5966 = load i64, i64* %29, align 8, !dbg !2516
  %5967 = getelementptr inbounds i8, i8* %5965, i64 %5966, !dbg !2516
  store i8 39, i8* %5967, align 1, !dbg !2516
  %5968 = load i32, i32* @x.35
  %5969 = load i32, i32* @y.36
  %5970 = sub i32 %5968, 1
  %5971 = mul i32 %5968, %5970
  %5972 = urem i32 %5971, 2
  %5973 = icmp eq i32 %5972, 0
  %5974 = icmp slt i32 %5969, 10
  %5975 = or i1 %5973, %5974
  br i1 %5975, label %originalBBpart22011, label %originalBB2009alteredBB

originalBBpart22011:                              ; preds = %originalBB2009
  br label %5976, !dbg !2516

5976:                                             ; preds = %originalBBpart22011, %originalBBpart22007
  %5977 = load i32, i32* @x.35
  %5978 = load i32, i32* @y.36
  %5979 = sub i32 %5977, 1
  %5980 = mul i32 %5977, %5979
  %5981 = urem i32 %5980, 2
  %5982 = icmp eq i32 %5981, 0
  %5983 = icmp slt i32 %5978, 10
  %5984 = or i1 %5982, %5983
  br i1 %5984, label %originalBB2013, label %originalBB2013alteredBB

originalBB2013:                                   ; preds = %5976, %originalBB2013alteredBB
  %5985 = load i64, i64* %29, align 8, !dbg !2519
  %5986 = add i64 %5985, 1, !dbg !2519
  store i64 %5986, i64* %29, align 8, !dbg !2519
  %5987 = load i32, i32* @x.35
  %5988 = load i32, i32* @y.36
  %5989 = sub i32 %5987, 1
  %5990 = mul i32 %5987, %5989
  %5991 = urem i32 %5990, 2
  %5992 = icmp eq i32 %5991, 0
  %5993 = icmp slt i32 %5988, 10
  %5994 = or i1 %5992, %5993
  br i1 %5994, label %originalBBpart22025, label %originalBB2013alteredBB

originalBBpart22025:                              ; preds = %originalBB2013
  br label %5995, !dbg !2519

5995:                                             ; preds = %originalBBpart22025
  %5996 = load i32, i32* @x.35
  %5997 = load i32, i32* @y.36
  %5998 = sub i32 %5996, 1
  %5999 = mul i32 %5996, %5998
  %6000 = urem i32 %5999, 2
  %6001 = icmp eq i32 %6000, 0
  %6002 = icmp slt i32 %5997, 10
  %6003 = or i1 %6001, %6002
  br i1 %6003, label %originalBB2027, label %originalBB2027alteredBB

originalBB2027:                                   ; preds = %5995, %originalBB2027alteredBB
  store i8 0, i8* %36, align 1, !dbg !2510
  %6004 = load i32, i32* @x.35
  %6005 = load i32, i32* @y.36
  %6006 = sub i32 %6004, 1
  %6007 = mul i32 %6004, %6006
  %6008 = urem i32 %6007, 2
  %6009 = icmp eq i32 %6008, 0
  %6010 = icmp slt i32 %6005, 10
  %6011 = or i1 %6009, %6010
  br i1 %6011, label %originalBBpart22029, label %originalBB2027alteredBB

originalBBpart22029:                              ; preds = %originalBB2027
  br label %6012, !dbg !2510

6012:                                             ; preds = %originalBBpart22029, %originalBBpart21987, %originalBBpart21983
  %6013 = load i32, i32* @x.35
  %6014 = load i32, i32* @y.36
  %6015 = sub i32 %6013, 1
  %6016 = mul i32 %6013, %6015
  %6017 = urem i32 %6016, 2
  %6018 = icmp eq i32 %6017, 0
  %6019 = icmp slt i32 %6014, 10
  %6020 = or i1 %6018, %6019
  br i1 %6020, label %originalBB2031, label %originalBB2031alteredBB

originalBB2031:                                   ; preds = %6012, %originalBB2031alteredBB
  %6021 = load i32, i32* @x.35
  %6022 = load i32, i32* @y.36
  %6023 = sub i32 %6021, 1
  %6024 = mul i32 %6021, %6023
  %6025 = urem i32 %6024, 2
  %6026 = icmp eq i32 %6025, 0
  %6027 = icmp slt i32 %6022, 10
  %6028 = or i1 %6026, %6027
  br i1 %6028, label %originalBBpart22033, label %originalBB2031alteredBB

originalBBpart22033:                              ; preds = %originalBB2031
  br label %6029, !dbg !2509

6029:                                             ; preds = %originalBBpart22033
  %6030 = load i32, i32* @x.35
  %6031 = load i32, i32* @y.36
  %6032 = sub i32 %6030, 1
  %6033 = mul i32 %6030, %6032
  %6034 = urem i32 %6033, 2
  %6035 = icmp eq i32 %6034, 0
  %6036 = icmp slt i32 %6031, 10
  %6037 = or i1 %6035, %6036
  br i1 %6037, label %originalBB2035, label %originalBB2035alteredBB

originalBB2035:                                   ; preds = %6029, %originalBB2035alteredBB
  %6038 = load i32, i32* @x.35
  %6039 = load i32, i32* @y.36
  %6040 = sub i32 %6038, 1
  %6041 = mul i32 %6038, %6040
  %6042 = urem i32 %6041, 2
  %6043 = icmp eq i32 %6042, 0
  %6044 = icmp slt i32 %6039, 10
  %6045 = or i1 %6043, %6044
  br i1 %6045, label %originalBBpart22037, label %originalBB2035alteredBB

originalBBpart22037:                              ; preds = %originalBB2035
  br label %6046, !dbg !2520

6046:                                             ; preds = %originalBBpart22037
  %6047 = load i32, i32* @x.35
  %6048 = load i32, i32* @y.36
  %6049 = sub i32 %6047, 1
  %6050 = mul i32 %6047, %6049
  %6051 = urem i32 %6050, 2
  %6052 = icmp eq i32 %6051, 0
  %6053 = icmp slt i32 %6048, 10
  %6054 = or i1 %6052, %6053
  br i1 %6054, label %originalBB2039, label %originalBB2039alteredBB

originalBB2039:                                   ; preds = %6046, %originalBB2039alteredBB
  %6055 = load i64, i64* %29, align 8, !dbg !2521
  %6056 = load i64, i64* %20, align 8, !dbg !2521
  %6057 = trunc i64 %6055 to i32
  %6058 = mul i32 %6057, -2
  %6059 = add i32 %6058, -2
  %6060 = trunc i64 %6056 to i32
  %6061 = mul i32 %6060, 2
  %6062 = add i32 %6061, 3
  %6063 = mul i32 %6059, %6059
  %6064 = mul i32 %6062, %6062
  %6065 = add i32 %6063, %6064
  %6066 = mul i32 %6059, %6062
  %6067 = mul i32 %6066, 2
  %6068 = sub i32 %6065, %6067
  %6069 = mul i32 %6068, 3
  %6070 = add i32 %6069, -1
  %6071 = icmp eq i32 %6070, -4
  %6072 = load i32, i32* @x.35
  %6073 = load i32, i32* @y.36
  %6074 = sub i32 %6072, 1
  %6075 = mul i32 %6072, %6074
  %6076 = urem i32 %6075, 2
  %6077 = icmp eq i32 %6076, 0
  %6078 = icmp slt i32 %6073, 10
  %6079 = or i1 %6077, %6078
  br i1 %6079, label %originalBBpart22132, label %originalBB2039alteredBB

originalBBpart22132:                              ; preds = %originalBB2039
  br i1 %6071, label %6080, label %6097

6080:                                             ; preds = %originalBBpart22132
  %6081 = load i32, i32* @x.35
  %6082 = load i32, i32* @y.36
  %6083 = sub i32 %6081, 1
  %6084 = mul i32 %6081, %6083
  %6085 = urem i32 %6084, 2
  %6086 = icmp eq i32 %6085, 0
  %6087 = icmp slt i32 %6082, 10
  %6088 = or i1 %6086, %6087
  br i1 %6088, label %originalBB2134, label %originalBB2134alteredBB

originalBB2134:                                   ; preds = %6080, %originalBB2134alteredBB
  %6089 = load i32, i32* @x.35
  %6090 = load i32, i32* @y.36
  %6091 = sub i32 %6089, 1
  %6092 = mul i32 %6089, %6091
  %6093 = urem i32 %6092, 2
  %6094 = icmp eq i32 %6093, 0
  %6095 = icmp slt i32 %6090, 10
  %6096 = or i1 %6094, %6095
  br i1 %6096, label %originalBBpart22136, label %originalBB2134alteredBB

originalBBpart22136:                              ; preds = %originalBB2134
  ret i64 0

6097:                                             ; preds = %originalBBpart22132
  %6098 = load i32, i32* @x.35
  %6099 = load i32, i32* @y.36
  %6100 = sub i32 %6098, 1
  %6101 = mul i32 %6098, %6100
  %6102 = urem i32 %6101, 2
  %6103 = icmp eq i32 %6102, 0
  %6104 = icmp slt i32 %6099, 10
  %6105 = or i1 %6103, %6104
  br i1 %6105, label %originalBB2138, label %originalBB2138alteredBB

originalBB2138:                                   ; preds = %6097, %originalBB2138alteredBB
  %6106 = icmp ult i64 %6055, %6056, !dbg !2521
  %6107 = load i32, i32* @x.35
  %6108 = load i32, i32* @y.36
  %6109 = sub i32 %6107, 1
  %6110 = mul i32 %6107, %6109
  %6111 = urem i32 %6110, 2
  %6112 = icmp eq i32 %6111, 0
  %6113 = icmp slt i32 %6108, 10
  %6114 = or i1 %6112, %6113
  br i1 %6114, label %originalBBpart22140, label %originalBB2138alteredBB

originalBBpart22140:                              ; preds = %originalBB2138
  br i1 %6106, label %6115, label %6136, !dbg !2524

6115:                                             ; preds = %originalBBpart22140
  %6116 = load i32, i32* @x.35
  %6117 = load i32, i32* @y.36
  %6118 = sub i32 %6116, 1
  %6119 = mul i32 %6116, %6118
  %6120 = urem i32 %6119, 2
  %6121 = icmp eq i32 %6120, 0
  %6122 = icmp slt i32 %6117, 10
  %6123 = or i1 %6121, %6122
  br i1 %6123, label %originalBB2142, label %originalBB2142alteredBB

originalBB2142:                                   ; preds = %6115, %originalBB2142alteredBB
  %6124 = load i8, i8* %39, align 1, !dbg !2521
  %6125 = load i8*, i8** %19, align 8, !dbg !2521
  %6126 = load i64, i64* %29, align 8, !dbg !2521
  %6127 = getelementptr inbounds i8, i8* %6125, i64 %6126, !dbg !2521
  store i8 %6124, i8* %6127, align 1, !dbg !2521
  %6128 = load i32, i32* @x.35
  %6129 = load i32, i32* @y.36
  %6130 = sub i32 %6128, 1
  %6131 = mul i32 %6128, %6130
  %6132 = urem i32 %6131, 2
  %6133 = icmp eq i32 %6132, 0
  %6134 = icmp slt i32 %6129, 10
  %6135 = or i1 %6133, %6134
  br i1 %6135, label %originalBBpart22144, label %originalBB2142alteredBB

originalBBpart22144:                              ; preds = %originalBB2142
  br label %6136, !dbg !2521

6136:                                             ; preds = %originalBBpart22144, %originalBBpart22140
  %6137 = load i32, i32* @x.35
  %6138 = load i32, i32* @y.36
  %6139 = sub i32 %6137, 1
  %6140 = mul i32 %6137, %6139
  %6141 = urem i32 %6140, 2
  %6142 = icmp eq i32 %6141, 0
  %6143 = icmp slt i32 %6138, 10
  %6144 = or i1 %6142, %6143
  br i1 %6144, label %originalBB2146, label %originalBB2146alteredBB

originalBB2146:                                   ; preds = %6136, %originalBB2146alteredBB
  %6145 = load i64, i64* %29, align 8, !dbg !2524
  %6146 = add i64 %6145, 1, !dbg !2524
  store i64 %6146, i64* %29, align 8, !dbg !2524
  %6147 = load i32, i32* @x.35
  %6148 = load i32, i32* @y.36
  %6149 = sub i32 %6147, 1
  %6150 = mul i32 %6147, %6149
  %6151 = urem i32 %6150, 2
  %6152 = icmp eq i32 %6151, 0
  %6153 = icmp slt i32 %6148, 10
  %6154 = or i1 %6152, %6153
  br i1 %6154, label %originalBBpart22148, label %originalBB2146alteredBB

originalBBpart22148:                              ; preds = %originalBB2146
  br label %6155, !dbg !2524

6155:                                             ; preds = %originalBBpart22148
  %6156 = load i32, i32* @x.35
  %6157 = load i32, i32* @y.36
  %6158 = sub i32 %6156, 1
  %6159 = mul i32 %6156, %6158
  %6160 = urem i32 %6159, 2
  %6161 = icmp eq i32 %6160, 0
  %6162 = icmp slt i32 %6157, 10
  %6163 = or i1 %6161, %6162
  br i1 %6163, label %originalBB2150, label %originalBB2150alteredBB

originalBB2150:                                   ; preds = %6155, %originalBB2150alteredBB
  %6164 = load i8, i8* %43, align 1, !dbg !2525
  %6165 = trunc i8 %6164 to i1, !dbg !2525
  %6166 = load i32, i32* @x.35
  %6167 = load i32, i32* @y.36
  %6168 = sub i32 %6166, 1
  %6169 = mul i32 %6166, %6168
  %6170 = urem i32 %6169, 2
  %6171 = icmp eq i32 %6170, 0
  %6172 = icmp slt i32 %6167, 10
  %6173 = or i1 %6171, %6172
  br i1 %6173, label %originalBBpart22152, label %originalBB2150alteredBB

originalBBpart22152:                              ; preds = %originalBB2150
  br i1 %6165, label %6191, label %6174, !dbg !2527

6174:                                             ; preds = %originalBBpart22152
  %6175 = load i32, i32* @x.35
  %6176 = load i32, i32* @y.36
  %6177 = sub i32 %6175, 1
  %6178 = mul i32 %6175, %6177
  %6179 = urem i32 %6178, 2
  %6180 = icmp eq i32 %6179, 0
  %6181 = icmp slt i32 %6176, 10
  %6182 = or i1 %6180, %6181
  br i1 %6182, label %originalBB2154, label %originalBB2154alteredBB

originalBB2154:                                   ; preds = %6174, %originalBB2154alteredBB
  store i8 0, i8* %38, align 1, !dbg !2528
  %6183 = load i32, i32* @x.35
  %6184 = load i32, i32* @y.36
  %6185 = sub i32 %6183, 1
  %6186 = mul i32 %6183, %6185
  %6187 = urem i32 %6186, 2
  %6188 = icmp eq i32 %6187, 0
  %6189 = icmp slt i32 %6184, 10
  %6190 = or i1 %6188, %6189
  br i1 %6190, label %originalBBpart22156, label %originalBB2154alteredBB

originalBBpart22156:                              ; preds = %originalBB2154
  br label %6191, !dbg !2529

6191:                                             ; preds = %originalBBpart22156, %originalBBpart22152
  %6192 = load i32, i32* @x.35
  %6193 = load i32, i32* @y.36
  %6194 = sub i32 %6192, 1
  %6195 = mul i32 %6192, %6194
  %6196 = urem i32 %6195, 2
  %6197 = icmp eq i32 %6196, 0
  %6198 = icmp slt i32 %6193, 10
  %6199 = or i1 %6197, %6198
  br i1 %6199, label %originalBB2158, label %originalBB2158alteredBB

originalBB2158:                                   ; preds = %6191, %originalBB2158alteredBB
  %6200 = load i32, i32* @x.35
  %6201 = load i32, i32* @y.36
  %6202 = sub i32 %6200, 1
  %6203 = mul i32 %6200, %6202
  %6204 = urem i32 %6203, 2
  %6205 = icmp eq i32 %6204, 0
  %6206 = icmp slt i32 %6201, 10
  %6207 = or i1 %6205, %6206
  br i1 %6207, label %originalBBpart22160, label %originalBB2158alteredBB

originalBBpart22160:                              ; preds = %originalBB2158
  br label %6208, !dbg !2530

6208:                                             ; preds = %originalBBpart22160, %originalBBpart2590
  %6209 = load i32, i32* @x.35
  %6210 = load i32, i32* @y.36
  %6211 = sub i32 %6209, 1
  %6212 = mul i32 %6209, %6211
  %6213 = urem i32 %6212, 2
  %6214 = icmp eq i32 %6213, 0
  %6215 = icmp slt i32 %6210, 10
  %6216 = or i1 %6214, %6215
  br i1 %6216, label %originalBB2162, label %originalBB2162alteredBB

originalBB2162:                                   ; preds = %6208, %originalBB2162alteredBB
  %6217 = load i64, i64* %28, align 8, !dbg !2531
  %6218 = add i64 %6217, 1, !dbg !2531
  store i64 %6218, i64* %28, align 8, !dbg !2531
  %6219 = load i32, i32* @x.35
  %6220 = load i32, i32* @y.36
  %6221 = sub i32 %6219, 1
  %6222 = mul i32 %6219, %6221
  %6223 = urem i32 %6222, 2
  %6224 = icmp eq i32 %6223, 0
  %6225 = icmp slt i32 %6220, 10
  %6226 = or i1 %6224, %6225
  br i1 %6226, label %originalBBpart22170, label %originalBB2162alteredBB

originalBBpart22170:                              ; preds = %originalBB2162
  br label %730, !dbg !2532, !llvm.loop !2533

6227:                                             ; preds = %originalBBpart2197
  %6228 = load i64, i64* %29, align 8, !dbg !2535
  %6229 = icmp eq i64 %6228, 0, !dbg !2537
  br i1 %6229, label %6230, label %6285, !dbg !2538

6230:                                             ; preds = %6227
  %6231 = load i32, i32* @x.35
  %6232 = load i32, i32* @y.36
  %6233 = sub i32 %6231, 1
  %6234 = mul i32 %6231, %6233
  %6235 = urem i32 %6234, 2
  %6236 = icmp eq i32 %6235, 0
  %6237 = icmp slt i32 %6232, 10
  %6238 = or i1 %6236, %6237
  br i1 %6238, label %originalBB2172, label %originalBB2172alteredBB

originalBB2172:                                   ; preds = %6230, %originalBB2172alteredBB
  %6239 = load i32, i32* %23, align 4, !dbg !2539
  %6240 = icmp eq i32 %6239, 2, !dbg !2540
  %6241 = load i32, i32* @x.35
  %6242 = load i32, i32* @y.36
  %6243 = sub i32 %6241, 1
  %6244 = mul i32 %6241, %6243
  %6245 = urem i32 %6244, 2
  %6246 = icmp eq i32 %6245, 0
  %6247 = icmp slt i32 %6242, 10
  %6248 = or i1 %6246, %6247
  br i1 %6248, label %originalBBpart22174, label %originalBB2172alteredBB

originalBBpart22174:                              ; preds = %originalBB2172
  br i1 %6240, label %6249, label %6285, !dbg !2541

6249:                                             ; preds = %originalBBpart22174
  %6250 = load i32, i32* @x.35
  %6251 = load i32, i32* @y.36
  %6252 = sub i32 %6250, 1
  %6253 = mul i32 %6250, %6252
  %6254 = urem i32 %6253, 2
  %6255 = icmp eq i32 %6254, 0
  %6256 = icmp slt i32 %6251, 10
  %6257 = or i1 %6255, %6256
  br i1 %6257, label %originalBB2176, label %originalBB2176alteredBB

originalBB2176:                                   ; preds = %6249, %originalBB2176alteredBB
  %6258 = load i8, i8* %35, align 1, !dbg !2542
  %6259 = trunc i8 %6258 to i1, !dbg !2542
  %6260 = load i32, i32* @x.35
  %6261 = load i32, i32* @y.36
  %6262 = sub i32 %6260, 1
  %6263 = mul i32 %6260, %6262
  %6264 = urem i32 %6263, 2
  %6265 = icmp eq i32 %6264, 0
  %6266 = icmp slt i32 %6261, 10
  %6267 = or i1 %6265, %6266
  br i1 %6267, label %originalBBpart22178, label %originalBB2176alteredBB

originalBBpart22178:                              ; preds = %originalBB2176
  br i1 %6259, label %6268, label %6285, !dbg !2543

6268:                                             ; preds = %originalBBpart22178
  %6269 = load i32, i32* @x.35
  %6270 = load i32, i32* @y.36
  %6271 = sub i32 %6269, 1
  %6272 = mul i32 %6269, %6271
  %6273 = urem i32 %6272, 2
  %6274 = icmp eq i32 %6273, 0
  %6275 = icmp slt i32 %6270, 10
  %6276 = or i1 %6274, %6275
  br i1 %6276, label %originalBB2180, label %originalBB2180alteredBB

originalBB2180:                                   ; preds = %6268, %originalBB2180alteredBB
  %6277 = load i32, i32* @x.35
  %6278 = load i32, i32* @y.36
  %6279 = sub i32 %6277, 1
  %6280 = mul i32 %6277, %6279
  %6281 = urem i32 %6280, 2
  %6282 = icmp eq i32 %6281, 0
  %6283 = icmp slt i32 %6278, 10
  %6284 = or i1 %6282, %6283
  br i1 %6284, label %originalBBpart22182, label %originalBB2180alteredBB

originalBBpart22182:                              ; preds = %originalBB2180
  br label %6709, !dbg !2544

6285:                                             ; preds = %originalBBpart22178, %originalBBpart22174, %6227
  %6286 = load i32, i32* @x.35
  %6287 = load i32, i32* @y.36
  %6288 = sub i32 %6286, 1
  %6289 = mul i32 %6286, %6288
  %6290 = urem i32 %6289, 2
  %6291 = icmp eq i32 %6290, 0
  %6292 = icmp slt i32 %6287, 10
  %6293 = or i1 %6291, %6292
  br i1 %6293, label %originalBB2184, label %originalBB2184alteredBB

originalBB2184:                                   ; preds = %6285, %originalBB2184alteredBB
  %6294 = load i32, i32* %23, align 4, !dbg !2545
  %6295 = icmp eq i32 %6294, 2, !dbg !2547
  %6296 = load i32, i32* @x.35
  %6297 = load i32, i32* @y.36
  %6298 = sub i32 %6296, 1
  %6299 = mul i32 %6296, %6298
  %6300 = urem i32 %6299, 2
  %6301 = icmp eq i32 %6300, 0
  %6302 = icmp slt i32 %6297, 10
  %6303 = or i1 %6301, %6302
  br i1 %6303, label %originalBBpart22186, label %originalBB2184alteredBB

originalBBpart22186:                              ; preds = %originalBB2184
  br i1 %6295, label %6304, label %6477, !dbg !2548

6304:                                             ; preds = %originalBBpart22186
  %6305 = load i32, i32* @x.35
  %6306 = load i32, i32* @y.36
  %6307 = sub i32 %6305, 1
  %6308 = mul i32 %6305, %6307
  %6309 = urem i32 %6308, 2
  %6310 = icmp eq i32 %6309, 0
  %6311 = icmp slt i32 %6306, 10
  %6312 = or i1 %6310, %6311
  br i1 %6312, label %originalBB2188, label %originalBB2188alteredBB

originalBB2188:                                   ; preds = %6304, %originalBB2188alteredBB
  %6313 = load i8, i8* %35, align 1, !dbg !2549
  %6314 = trunc i8 %6313 to i1, !dbg !2549
  %6315 = load i32, i32* @x.35
  %6316 = load i32, i32* @y.36
  %6317 = sub i32 %6315, 1
  %6318 = mul i32 %6315, %6317
  %6319 = urem i32 %6318, 2
  %6320 = icmp eq i32 %6319, 0
  %6321 = icmp slt i32 %6316, 10
  %6322 = or i1 %6320, %6321
  br i1 %6322, label %originalBBpart22190, label %originalBB2188alteredBB

originalBBpart22190:                              ; preds = %originalBB2188
  br i1 %6314, label %6477, label %6323, !dbg !2550

6323:                                             ; preds = %originalBBpart22190
  %6324 = load i32, i32* @x.35
  %6325 = load i32, i32* @y.36
  %6326 = sub i32 %6324, 1
  %6327 = mul i32 %6324, %6326
  %6328 = urem i32 %6327, 2
  %6329 = icmp eq i32 %6328, 0
  %6330 = icmp slt i32 %6325, 10
  %6331 = or i1 %6329, %6330
  br i1 %6331, label %originalBB2192, label %originalBB2192alteredBB

originalBB2192:                                   ; preds = %6323, %originalBB2192alteredBB
  %6332 = load i8, i8* %37, align 1, !dbg !2551
  %6333 = trunc i8 %6332 to i1, !dbg !2551
  %6334 = load i32, i32* @x.35
  %6335 = load i32, i32* @y.36
  %6336 = sub i32 %6334, 1
  %6337 = mul i32 %6334, %6336
  %6338 = urem i32 %6337, 2
  %6339 = icmp eq i32 %6338, 0
  %6340 = icmp slt i32 %6335, 10
  %6341 = or i1 %6339, %6340
  br i1 %6341, label %originalBBpart22194, label %originalBB2192alteredBB

originalBBpart22194:                              ; preds = %originalBB2192
  br i1 %6333, label %6342, label %6477, !dbg !2552

6342:                                             ; preds = %originalBBpart22194
  %6343 = load i32, i32* @x.35
  %6344 = load i32, i32* @y.36
  %6345 = sub i32 %6343, 1
  %6346 = mul i32 %6343, %6345
  %6347 = urem i32 %6346, 2
  %6348 = icmp eq i32 %6347, 0
  %6349 = icmp slt i32 %6344, 10
  %6350 = or i1 %6348, %6349
  br i1 %6350, label %originalBB2196, label %originalBB2196alteredBB

originalBB2196:                                   ; preds = %6342, %originalBB2196alteredBB
  %6351 = load i8, i8* %38, align 1, !dbg !2553
  %6352 = trunc i8 %6351 to i1, !dbg !2553
  %6353 = load i32, i32* @x.35
  %6354 = load i32, i32* @y.36
  %6355 = sub i32 %6353, 1
  %6356 = mul i32 %6353, %6355
  %6357 = urem i32 %6356, 2
  %6358 = icmp eq i32 %6357, 0
  %6359 = icmp slt i32 %6354, 10
  %6360 = or i1 %6358, %6359
  br i1 %6360, label %originalBBpart22198, label %originalBB2196alteredBB

originalBBpart22198:                              ; preds = %originalBB2196
  br i1 %6352, label %6361, label %6387, !dbg !2556

6361:                                             ; preds = %originalBBpart22198
  %6362 = load i32, i32* @x.35
  %6363 = load i32, i32* @y.36
  %6364 = sub i32 %6362, 1
  %6365 = mul i32 %6362, %6364
  %6366 = urem i32 %6365, 2
  %6367 = icmp eq i32 %6366, 0
  %6368 = icmp slt i32 %6363, 10
  %6369 = or i1 %6367, %6368
  br i1 %6369, label %originalBB2200, label %originalBB2200alteredBB

originalBB2200:                                   ; preds = %6361, %originalBB2200alteredBB
  %6370 = load i8*, i8** %19, align 8, !dbg !2557
  %6371 = load i64, i64* %30, align 8, !dbg !2558
  %6372 = load i8*, i8** %21, align 8, !dbg !2559
  %6373 = load i64, i64* %22, align 8, !dbg !2560
  %6374 = load i32, i32* %24, align 4, !dbg !2561
  %6375 = load i32*, i32** %25, align 8, !dbg !2562
  %6376 = load i8*, i8** %26, align 8, !dbg !2563
  %6377 = load i8*, i8** %27, align 8, !dbg !2564
  %6378 = call i64 @quotearg_buffer_restyled(i8* %6370, i64 %6371, i8* %6372, i64 %6373, i32 5, i32 %6374, i32* %6375, i8* %6376, i8* %6377), !dbg !2565
  store i64 %6378, i64* %18, align 8, !dbg !2566
  %6379 = load i32, i32* @x.35
  %6380 = load i32, i32* @y.36
  %6381 = sub i32 %6379, 1
  %6382 = mul i32 %6379, %6381
  %6383 = urem i32 %6382, 2
  %6384 = icmp eq i32 %6383, 0
  %6385 = icmp slt i32 %6380, 10
  %6386 = or i1 %6384, %6385
  br i1 %6386, label %originalBBpart22202, label %originalBB2200alteredBB

originalBBpart22202:                              ; preds = %originalBB2200
  br label %6791, !dbg !2566

6387:                                             ; preds = %originalBBpart22198
  %6388 = load i32, i32* @x.35
  %6389 = load i32, i32* @y.36
  %6390 = sub i32 %6388, 1
  %6391 = mul i32 %6388, %6390
  %6392 = urem i32 %6391, 2
  %6393 = icmp eq i32 %6392, 0
  %6394 = icmp slt i32 %6389, 10
  %6395 = or i1 %6393, %6394
  br i1 %6395, label %originalBB2204, label %originalBB2204alteredBB

originalBB2204:                                   ; preds = %6387, %originalBB2204alteredBB
  %6396 = load i64, i64* %20, align 8, !dbg !2567
  %6397 = icmp ne i64 %6396, 0, !dbg !2567
  %6398 = load i32, i32* @x.35
  %6399 = load i32, i32* @y.36
  %6400 = sub i32 %6398, 1
  %6401 = mul i32 %6398, %6400
  %6402 = urem i32 %6401, 2
  %6403 = icmp eq i32 %6402, 0
  %6404 = icmp slt i32 %6399, 10
  %6405 = or i1 %6403, %6404
  br i1 %6405, label %originalBBpart22206, label %originalBB2204alteredBB

originalBBpart22206:                              ; preds = %originalBB2204
  br i1 %6397, label %6443, label %6406, !dbg !2569

6406:                                             ; preds = %originalBBpart22206
  %6407 = load i32, i32* @x.35
  %6408 = load i32, i32* @y.36
  %6409 = sub i32 %6407, 1
  %6410 = mul i32 %6407, %6409
  %6411 = urem i32 %6410, 2
  %6412 = icmp eq i32 %6411, 0
  %6413 = icmp slt i32 %6408, 10
  %6414 = or i1 %6412, %6413
  br i1 %6414, label %originalBB2208, label %originalBB2208alteredBB

originalBB2208:                                   ; preds = %6406, %originalBB2208alteredBB
  %6415 = load i64, i64* %30, align 8, !dbg !2570
  %6416 = icmp ne i64 %6415, 0, !dbg !2570
  %6417 = load i32, i32* @x.35
  %6418 = load i32, i32* @y.36
  %6419 = sub i32 %6417, 1
  %6420 = mul i32 %6417, %6419
  %6421 = urem i32 %6420, 2
  %6422 = icmp eq i32 %6421, 0
  %6423 = icmp slt i32 %6418, 10
  %6424 = or i1 %6422, %6423
  br i1 %6424, label %originalBBpart22210, label %originalBB2208alteredBB

originalBBpart22210:                              ; preds = %originalBB2208
  br i1 %6416, label %6425, label %6443, !dbg !2571

6425:                                             ; preds = %originalBBpart22210
  %6426 = load i32, i32* @x.35
  %6427 = load i32, i32* @y.36
  %6428 = sub i32 %6426, 1
  %6429 = mul i32 %6426, %6428
  %6430 = urem i32 %6429, 2
  %6431 = icmp eq i32 %6430, 0
  %6432 = icmp slt i32 %6427, 10
  %6433 = or i1 %6431, %6432
  br i1 %6433, label %originalBB2212, label %originalBB2212alteredBB

originalBB2212:                                   ; preds = %6425, %originalBB2212alteredBB
  %6434 = load i64, i64* %30, align 8, !dbg !2572
  store i64 %6434, i64* %20, align 8, !dbg !2574
  store i64 0, i64* %29, align 8, !dbg !2575
  %6435 = load i32, i32* @x.35
  %6436 = load i32, i32* @y.36
  %6437 = sub i32 %6435, 1
  %6438 = mul i32 %6435, %6437
  %6439 = urem i32 %6438, 2
  %6440 = icmp eq i32 %6439, 0
  %6441 = icmp slt i32 %6436, 10
  %6442 = or i1 %6440, %6441
  br i1 %6442, label %originalBBpart22214, label %originalBB2212alteredBB

originalBBpart22214:                              ; preds = %originalBB2212
  br label %66, !dbg !2576

6443:                                             ; preds = %originalBBpart22210, %originalBBpart22206
  %6444 = load i32, i32* @x.35
  %6445 = load i32, i32* @y.36
  %6446 = sub i32 %6444, 1
  %6447 = mul i32 %6444, %6446
  %6448 = urem i32 %6447, 2
  %6449 = icmp eq i32 %6448, 0
  %6450 = icmp slt i32 %6445, 10
  %6451 = or i1 %6449, %6450
  br i1 %6451, label %originalBB2216, label %originalBB2216alteredBB

originalBB2216:                                   ; preds = %6443, %originalBB2216alteredBB
  %6452 = load i32, i32* @x.35
  %6453 = load i32, i32* @y.36
  %6454 = sub i32 %6452, 1
  %6455 = mul i32 %6452, %6454
  %6456 = urem i32 %6455, 2
  %6457 = icmp eq i32 %6456, 0
  %6458 = icmp slt i32 %6453, 10
  %6459 = or i1 %6457, %6458
  br i1 %6459, label %originalBBpart22218, label %originalBB2216alteredBB

originalBBpart22218:                              ; preds = %originalBB2216
  br label %6460

6460:                                             ; preds = %originalBBpart22218
  %6461 = load i32, i32* @x.35
  %6462 = load i32, i32* @y.36
  %6463 = sub i32 %6461, 1
  %6464 = mul i32 %6461, %6463
  %6465 = urem i32 %6464, 2
  %6466 = icmp eq i32 %6465, 0
  %6467 = icmp slt i32 %6462, 10
  %6468 = or i1 %6466, %6467
  br i1 %6468, label %originalBB2220, label %originalBB2220alteredBB

originalBB2220:                                   ; preds = %6460, %originalBB2220alteredBB
  %6469 = load i32, i32* @x.35
  %6470 = load i32, i32* @y.36
  %6471 = sub i32 %6469, 1
  %6472 = mul i32 %6469, %6471
  %6473 = urem i32 %6472, 2
  %6474 = icmp eq i32 %6473, 0
  %6475 = icmp slt i32 %6470, 10
  %6476 = or i1 %6474, %6475
  br i1 %6476, label %originalBBpart22222, label %originalBB2220alteredBB

originalBBpart22222:                              ; preds = %originalBB2220
  br label %6477, !dbg !2577

6477:                                             ; preds = %originalBBpart22222, %originalBBpart22194, %originalBBpart22190, %originalBBpart22186
  %6478 = load i32, i32* @x.35
  %6479 = load i32, i32* @y.36
  %6480 = sub i32 %6478, 1
  %6481 = mul i32 %6478, %6480
  %6482 = urem i32 %6481, 2
  %6483 = icmp eq i32 %6482, 0
  %6484 = icmp slt i32 %6479, 10
  %6485 = or i1 %6483, %6484
  br i1 %6485, label %originalBB2224, label %originalBB2224alteredBB

originalBB2224:                                   ; preds = %6477, %originalBB2224alteredBB
  %6486 = load i8*, i8** %31, align 8, !dbg !2578
  %6487 = icmp ne i8* %6486, null, !dbg !2578
  %6488 = load i32, i32* @x.35
  %6489 = load i32, i32* @y.36
  %6490 = sub i32 %6488, 1
  %6491 = mul i32 %6488, %6490
  %6492 = urem i32 %6491, 2
  %6493 = icmp eq i32 %6492, 0
  %6494 = icmp slt i32 %6489, 10
  %6495 = or i1 %6493, %6494
  br i1 %6495, label %originalBBpart22226, label %originalBB2224alteredBB

originalBBpart22226:                              ; preds = %originalBB2224
  br i1 %6487, label %6496, label %6651, !dbg !2580

6496:                                             ; preds = %originalBBpart22226
  %6497 = load i32, i32* @x.35
  %6498 = load i32, i32* @y.36
  %6499 = sub i32 %6497, 1
  %6500 = mul i32 %6497, %6499
  %6501 = urem i32 %6500, 2
  %6502 = icmp eq i32 %6501, 0
  %6503 = icmp slt i32 %6498, 10
  %6504 = or i1 %6502, %6503
  br i1 %6504, label %originalBB2228, label %originalBB2228alteredBB

originalBB2228:                                   ; preds = %6496, %originalBB2228alteredBB
  %6505 = load i8, i8* %35, align 1, !dbg !2581
  %6506 = trunc i8 %6505 to i1, !dbg !2581
  %6507 = load i32, i32* @x.35
  %6508 = load i32, i32* @y.36
  %6509 = sub i32 %6507, 1
  %6510 = mul i32 %6507, %6509
  %6511 = urem i32 %6510, 2
  %6512 = icmp eq i32 %6511, 0
  %6513 = icmp slt i32 %6508, 10
  %6514 = or i1 %6512, %6513
  br i1 %6514, label %originalBBpart22230, label %originalBB2228alteredBB

originalBBpart22230:                              ; preds = %originalBB2228
  br i1 %6506, label %6651, label %6515, !dbg !2582

6515:                                             ; preds = %originalBBpart22230
  %6516 = load i32, i32* @x.35
  %6517 = load i32, i32* @y.36
  %6518 = sub i32 %6516, 1
  %6519 = mul i32 %6516, %6518
  %6520 = urem i32 %6519, 2
  %6521 = icmp eq i32 %6520, 0
  %6522 = icmp slt i32 %6517, 10
  %6523 = or i1 %6521, %6522
  br i1 %6523, label %originalBB2232, label %originalBB2232alteredBB

originalBB2232:                                   ; preds = %6515, %originalBB2232alteredBB
  %6524 = load i32, i32* @x.35
  %6525 = load i32, i32* @y.36
  %6526 = sub i32 %6524, 1
  %6527 = mul i32 %6524, %6526
  %6528 = urem i32 %6527, 2
  %6529 = icmp eq i32 %6528, 0
  %6530 = icmp slt i32 %6525, 10
  %6531 = or i1 %6529, %6530
  br i1 %6531, label %originalBBpart22234, label %originalBB2232alteredBB

originalBBpart22234:                              ; preds = %originalBB2232
  br label %6532, !dbg !2583

6532:                                             ; preds = %originalBBpart22266, %originalBBpart22234
  %6533 = load i32, i32* @x.35
  %6534 = load i32, i32* @y.36
  %6535 = sub i32 %6533, 1
  %6536 = mul i32 %6533, %6535
  %6537 = urem i32 %6536, 2
  %6538 = icmp eq i32 %6537, 0
  %6539 = icmp slt i32 %6534, 10
  %6540 = or i1 %6538, %6539
  br i1 %6540, label %originalBB2236, label %originalBB2236alteredBB

originalBB2236:                                   ; preds = %6532, %originalBB2236alteredBB
  %6541 = load i8*, i8** %31, align 8, !dbg !2584
  %6542 = load i8, i8* %6541, align 1, !dbg !2587
  %6543 = icmp ne i8 %6542, 0, !dbg !2588
  %6544 = load i32, i32* @x.35
  %6545 = load i32, i32* @y.36
  %6546 = sub i32 %6544, 1
  %6547 = mul i32 %6544, %6546
  %6548 = urem i32 %6547, 2
  %6549 = icmp eq i32 %6548, 0
  %6550 = icmp slt i32 %6545, 10
  %6551 = or i1 %6549, %6550
  br i1 %6551, label %originalBBpart22238, label %originalBB2236alteredBB

originalBBpart22238:                              ; preds = %originalBB2236
  br i1 %6543, label %6552, label %6634, !dbg !2588

6552:                                             ; preds = %originalBBpart22238
  br label %6553, !dbg !2589

6553:                                             ; preds = %6552
  %6554 = load i64, i64* %29, align 8, !dbg !2590
  %6555 = load i64, i64* %20, align 8, !dbg !2590
  %6556 = icmp ult i64 %6554, %6555, !dbg !2590
  br i1 %6556, label %6557, label %6579, !dbg !2593

6557:                                             ; preds = %6553
  %6558 = load i32, i32* @x.35
  %6559 = load i32, i32* @y.36
  %6560 = sub i32 %6558, 1
  %6561 = mul i32 %6558, %6560
  %6562 = urem i32 %6561, 2
  %6563 = icmp eq i32 %6562, 0
  %6564 = icmp slt i32 %6559, 10
  %6565 = or i1 %6563, %6564
  br i1 %6565, label %originalBB2240, label %originalBB2240alteredBB

originalBB2240:                                   ; preds = %6557, %originalBB2240alteredBB
  %6566 = load i8*, i8** %31, align 8, !dbg !2590
  %6567 = load i8, i8* %6566, align 1, !dbg !2590
  %6568 = load i8*, i8** %19, align 8, !dbg !2590
  %6569 = load i64, i64* %29, align 8, !dbg !2590
  %6570 = getelementptr inbounds i8, i8* %6568, i64 %6569, !dbg !2590
  store i8 %6567, i8* %6570, align 1, !dbg !2590
  %6571 = load i32, i32* @x.35
  %6572 = load i32, i32* @y.36
  %6573 = sub i32 %6571, 1
  %6574 = mul i32 %6571, %6573
  %6575 = urem i32 %6574, 2
  %6576 = icmp eq i32 %6575, 0
  %6577 = icmp slt i32 %6572, 10
  %6578 = or i1 %6576, %6577
  br i1 %6578, label %originalBBpart22242, label %originalBB2240alteredBB

originalBBpart22242:                              ; preds = %originalBB2240
  br label %6579, !dbg !2590

6579:                                             ; preds = %originalBBpart22242, %6553
  %6580 = load i32, i32* @x.35
  %6581 = load i32, i32* @y.36
  %6582 = sub i32 %6580, 1
  %6583 = mul i32 %6580, %6582
  %6584 = urem i32 %6583, 2
  %6585 = icmp eq i32 %6584, 0
  %6586 = icmp slt i32 %6581, 10
  %6587 = or i1 %6585, %6586
  br i1 %6587, label %originalBB2244, label %originalBB2244alteredBB

originalBB2244:                                   ; preds = %6579, %originalBB2244alteredBB
  %6588 = load i64, i64* %29, align 8, !dbg !2593
  %6589 = add i64 %6588, 1, !dbg !2593
  store i64 %6589, i64* %29, align 8, !dbg !2593
  %6590 = load i32, i32* @x.35
  %6591 = load i32, i32* @y.36
  %6592 = sub i32 %6590, 1
  %6593 = mul i32 %6590, %6592
  %6594 = urem i32 %6593, 2
  %6595 = icmp eq i32 %6594, 0
  %6596 = icmp slt i32 %6591, 10
  %6597 = or i1 %6595, %6596
  br i1 %6597, label %originalBBpart22258, label %originalBB2244alteredBB

originalBBpart22258:                              ; preds = %originalBB2244
  br label %6598, !dbg !2593

6598:                                             ; preds = %originalBBpart22258
  %6599 = load i32, i32* @x.35
  %6600 = load i32, i32* @y.36
  %6601 = sub i32 %6599, 1
  %6602 = mul i32 %6599, %6601
  %6603 = urem i32 %6602, 2
  %6604 = icmp eq i32 %6603, 0
  %6605 = icmp slt i32 %6600, 10
  %6606 = or i1 %6604, %6605
  br i1 %6606, label %originalBB2260, label %originalBB2260alteredBB

originalBB2260:                                   ; preds = %6598, %originalBB2260alteredBB
  %6607 = load i32, i32* @x.35
  %6608 = load i32, i32* @y.36
  %6609 = sub i32 %6607, 1
  %6610 = mul i32 %6607, %6609
  %6611 = urem i32 %6610, 2
  %6612 = icmp eq i32 %6611, 0
  %6613 = icmp slt i32 %6608, 10
  %6614 = or i1 %6612, %6613
  br i1 %6614, label %originalBBpart22262, label %originalBB2260alteredBB

originalBBpart22262:                              ; preds = %originalBB2260
  br label %6615, !dbg !2593

6615:                                             ; preds = %originalBBpart22262
  %6616 = load i32, i32* @x.35
  %6617 = load i32, i32* @y.36
  %6618 = sub i32 %6616, 1
  %6619 = mul i32 %6616, %6618
  %6620 = urem i32 %6619, 2
  %6621 = icmp eq i32 %6620, 0
  %6622 = icmp slt i32 %6617, 10
  %6623 = or i1 %6621, %6622
  br i1 %6623, label %originalBB2264, label %originalBB2264alteredBB

originalBB2264:                                   ; preds = %6615, %originalBB2264alteredBB
  %6624 = load i8*, i8** %31, align 8, !dbg !2594
  %6625 = getelementptr inbounds i8, i8* %6624, i32 1, !dbg !2594
  store i8* %6625, i8** %31, align 8, !dbg !2594
  %6626 = load i32, i32* @x.35
  %6627 = load i32, i32* @y.36
  %6628 = sub i32 %6626, 1
  %6629 = mul i32 %6626, %6628
  %6630 = urem i32 %6629, 2
  %6631 = icmp eq i32 %6630, 0
  %6632 = icmp slt i32 %6627, 10
  %6633 = or i1 %6631, %6632
  br i1 %6633, label %originalBBpart22266, label %originalBB2264alteredBB

originalBBpart22266:                              ; preds = %originalBB2264
  br label %6532, !dbg !2595, !llvm.loop !2596

6634:                                             ; preds = %originalBBpart22238
  %6635 = load i32, i32* @x.35
  %6636 = load i32, i32* @y.36
  %6637 = sub i32 %6635, 1
  %6638 = mul i32 %6635, %6637
  %6639 = urem i32 %6638, 2
  %6640 = icmp eq i32 %6639, 0
  %6641 = icmp slt i32 %6636, 10
  %6642 = or i1 %6640, %6641
  br i1 %6642, label %originalBB2268, label %originalBB2268alteredBB

originalBB2268:                                   ; preds = %6634, %originalBB2268alteredBB
  %6643 = load i32, i32* @x.35
  %6644 = load i32, i32* @y.36
  %6645 = sub i32 %6643, 1
  %6646 = mul i32 %6643, %6645
  %6647 = urem i32 %6646, 2
  %6648 = icmp eq i32 %6647, 0
  %6649 = icmp slt i32 %6644, 10
  %6650 = or i1 %6648, %6649
  br i1 %6650, label %originalBBpart22270, label %originalBB2268alteredBB

originalBBpart22270:                              ; preds = %originalBB2268
  br label %6651, !dbg !2597

6651:                                             ; preds = %originalBBpart22270, %originalBBpart22230, %originalBBpart22226
  %6652 = load i32, i32* @x.35
  %6653 = load i32, i32* @y.36
  %6654 = sub i32 %6652, 1
  %6655 = mul i32 %6652, %6654
  %6656 = urem i32 %6655, 2
  %6657 = icmp eq i32 %6656, 0
  %6658 = icmp slt i32 %6653, 10
  %6659 = or i1 %6657, %6658
  br i1 %6659, label %originalBB2272, label %originalBB2272alteredBB

originalBB2272:                                   ; preds = %6651, %originalBB2272alteredBB
  %6660 = load i64, i64* %29, align 8, !dbg !2598
  %6661 = load i64, i64* %20, align 8, !dbg !2600
  %6662 = icmp ult i64 %6660, %6661, !dbg !2601
  %6663 = load i32, i32* @x.35
  %6664 = load i32, i32* @y.36
  %6665 = sub i32 %6663, 1
  %6666 = mul i32 %6663, %6665
  %6667 = urem i32 %6666, 2
  %6668 = icmp eq i32 %6667, 0
  %6669 = icmp slt i32 %6664, 10
  %6670 = or i1 %6668, %6669
  br i1 %6670, label %originalBBpart22274, label %originalBB2272alteredBB

originalBBpart22274:                              ; preds = %originalBB2272
  br i1 %6662, label %6671, label %6691, !dbg !2602

6671:                                             ; preds = %originalBBpart22274
  %6672 = load i32, i32* @x.35
  %6673 = load i32, i32* @y.36
  %6674 = sub i32 %6672, 1
  %6675 = mul i32 %6672, %6674
  %6676 = urem i32 %6675, 2
  %6677 = icmp eq i32 %6676, 0
  %6678 = icmp slt i32 %6673, 10
  %6679 = or i1 %6677, %6678
  br i1 %6679, label %originalBB2276, label %originalBB2276alteredBB

originalBB2276:                                   ; preds = %6671, %originalBB2276alteredBB
  %6680 = load i8*, i8** %19, align 8, !dbg !2603
  %6681 = load i64, i64* %29, align 8, !dbg !2604
  %6682 = getelementptr inbounds i8, i8* %6680, i64 %6681, !dbg !2603
  store i8 0, i8* %6682, align 1, !dbg !2605
  %6683 = load i32, i32* @x.35
  %6684 = load i32, i32* @y.36
  %6685 = sub i32 %6683, 1
  %6686 = mul i32 %6683, %6685
  %6687 = urem i32 %6686, 2
  %6688 = icmp eq i32 %6687, 0
  %6689 = icmp slt i32 %6684, 10
  %6690 = or i1 %6688, %6689
  br i1 %6690, label %originalBBpart22278, label %originalBB2276alteredBB

originalBBpart22278:                              ; preds = %originalBB2276
  br label %6691, !dbg !2603

6691:                                             ; preds = %originalBBpart22278, %originalBBpart22274
  %6692 = load i32, i32* @x.35
  %6693 = load i32, i32* @y.36
  %6694 = sub i32 %6692, 1
  %6695 = mul i32 %6692, %6694
  %6696 = urem i32 %6695, 2
  %6697 = icmp eq i32 %6696, 0
  %6698 = icmp slt i32 %6693, 10
  %6699 = or i1 %6697, %6698
  br i1 %6699, label %originalBB2280, label %originalBB2280alteredBB

originalBB2280:                                   ; preds = %6691, %originalBB2280alteredBB
  %6700 = load i64, i64* %29, align 8, !dbg !2606
  store i64 %6700, i64* %18, align 8, !dbg !2607
  %6701 = load i32, i32* @x.35
  %6702 = load i32, i32* @y.36
  %6703 = sub i32 %6701, 1
  %6704 = mul i32 %6701, %6703
  %6705 = urem i32 %6704, 2
  %6706 = icmp eq i32 %6705, 0
  %6707 = icmp slt i32 %6702, 10
  %6708 = or i1 %6706, %6707
  br i1 %6708, label %originalBBpart22282, label %originalBB2280alteredBB

originalBBpart22282:                              ; preds = %originalBB2280
  br label %6791, !dbg !2607

6709:                                             ; preds = %originalBBpart22182, %originalBBpart21872, %originalBBpart21438, %originalBBpart21341, %originalBBpart21110, %originalBBpart21094, %originalBBpart21038, %originalBBpart21014, %originalBBpart2811, %originalBBpart2606, %originalBBpart2271, %originalBBpart2247
  call void @llvm.dbg.label(metadata !2608), !dbg !2609
  %6710 = load i32, i32* @x.35
  %6711 = load i32, i32* @y.36
  %6712 = sub i32 %6710, 1
  %6713 = mul i32 %6710, %6712
  %6714 = urem i32 %6713, 2
  %6715 = icmp eq i32 %6714, 0
  %6716 = icmp slt i32 %6711, 10
  %6717 = or i1 %6715, %6716
  br i1 %6717, label %originalBB2284, label %originalBB2284alteredBB

originalBB2284:                                   ; preds = %6709, %originalBB2284alteredBB
  %6718 = load i32, i32* %23, align 4, !dbg !2610
  %6719 = icmp eq i32 %6718, 2, !dbg !2612
  %6720 = load i32, i32* @x.35
  %6721 = load i32, i32* @y.36
  %6722 = sub i32 %6720, 1
  %6723 = mul i32 %6720, %6722
  %6724 = urem i32 %6723, 2
  %6725 = icmp eq i32 %6724, 0
  %6726 = icmp slt i32 %6721, 10
  %6727 = or i1 %6725, %6726
  br i1 %6727, label %originalBBpart22286, label %originalBB2284alteredBB

originalBBpart22286:                              ; preds = %originalBB2284
  br i1 %6719, label %6728, label %6764, !dbg !2613

6728:                                             ; preds = %originalBBpart22286
  %6729 = load i32, i32* @x.35
  %6730 = load i32, i32* @y.36
  %6731 = sub i32 %6729, 1
  %6732 = mul i32 %6729, %6731
  %6733 = urem i32 %6732, 2
  %6734 = icmp eq i32 %6733, 0
  %6735 = icmp slt i32 %6730, 10
  %6736 = or i1 %6734, %6735
  br i1 %6736, label %originalBB2288, label %originalBB2288alteredBB

originalBB2288:                                   ; preds = %6728, %originalBB2288alteredBB
  %6737 = load i8, i8* %33, align 1, !dbg !2614
  %6738 = trunc i8 %6737 to i1, !dbg !2614
  %6739 = load i32, i32* @x.35
  %6740 = load i32, i32* @y.36
  %6741 = sub i32 %6739, 1
  %6742 = mul i32 %6739, %6741
  %6743 = urem i32 %6742, 2
  %6744 = icmp eq i32 %6743, 0
  %6745 = icmp slt i32 %6740, 10
  %6746 = or i1 %6744, %6745
  br i1 %6746, label %originalBBpart22290, label %originalBB2288alteredBB

originalBBpart22290:                              ; preds = %originalBB2288
  br i1 %6738, label %6747, label %6764, !dbg !2615

6747:                                             ; preds = %originalBBpart22290
  %6748 = load i32, i32* @x.35
  %6749 = load i32, i32* @y.36
  %6750 = sub i32 %6748, 1
  %6751 = mul i32 %6748, %6750
  %6752 = urem i32 %6751, 2
  %6753 = icmp eq i32 %6752, 0
  %6754 = icmp slt i32 %6749, 10
  %6755 = or i1 %6753, %6754
  br i1 %6755, label %originalBB2292, label %originalBB2292alteredBB

originalBB2292:                                   ; preds = %6747, %originalBB2292alteredBB
  store i32 4, i32* %23, align 4, !dbg !2616
  %6756 = load i32, i32* @x.35
  %6757 = load i32, i32* @y.36
  %6758 = sub i32 %6756, 1
  %6759 = mul i32 %6756, %6758
  %6760 = urem i32 %6759, 2
  %6761 = icmp eq i32 %6760, 0
  %6762 = icmp slt i32 %6757, 10
  %6763 = or i1 %6761, %6762
  br i1 %6763, label %originalBBpart22294, label %originalBB2292alteredBB

originalBBpart22294:                              ; preds = %originalBB2292
  br label %6764, !dbg !2617

6764:                                             ; preds = %originalBBpart22294, %originalBBpart22290, %originalBBpart22286
  %6765 = load i32, i32* @x.35
  %6766 = load i32, i32* @y.36
  %6767 = sub i32 %6765, 1
  %6768 = mul i32 %6765, %6767
  %6769 = urem i32 %6768, 2
  %6770 = icmp eq i32 %6769, 0
  %6771 = icmp slt i32 %6766, 10
  %6772 = or i1 %6770, %6771
  br i1 %6772, label %originalBB2296, label %originalBB2296alteredBB

originalBB2296:                                   ; preds = %6764, %originalBB2296alteredBB
  %6773 = load i8*, i8** %19, align 8, !dbg !2618
  %6774 = load i64, i64* %20, align 8, !dbg !2619
  %6775 = load i8*, i8** %21, align 8, !dbg !2620
  %6776 = load i64, i64* %22, align 8, !dbg !2621
  %6777 = load i32, i32* %23, align 4, !dbg !2622
  %6778 = load i32, i32* %24, align 4, !dbg !2623
  %6779 = and i32 %6778, -3, !dbg !2624
  %6780 = load i8*, i8** %26, align 8, !dbg !2625
  %6781 = load i8*, i8** %27, align 8, !dbg !2626
  %6782 = call i64 @quotearg_buffer_restyled(i8* %6773, i64 %6774, i8* %6775, i64 %6776, i32 %6777, i32 %6779, i32* null, i8* %6780, i8* %6781), !dbg !2627
  store i64 %6782, i64* %18, align 8, !dbg !2628
  %6783 = load i32, i32* @x.35
  %6784 = load i32, i32* @y.36
  %6785 = sub i32 %6783, 1
  %6786 = mul i32 %6783, %6785
  %6787 = urem i32 %6786, 2
  %6788 = icmp eq i32 %6787, 0
  %6789 = icmp slt i32 %6784, 10
  %6790 = or i1 %6788, %6789
  br i1 %6790, label %originalBBpart22305, label %originalBB2296alteredBB

originalBBpart22305:                              ; preds = %originalBB2296
  br label %6791, !dbg !2628

6791:                                             ; preds = %originalBBpart22305, %originalBBpart22282, %originalBBpart22202
  %6792 = load i64, i64* %18, align 8, !dbg !2629
  ret i64 %6792, !dbg !2629

originalBBalteredBB:                              ; preds = %originalBB, %9
  %6793 = alloca i64, align 8
  %6794 = alloca i8*, align 8
  %6795 = alloca i64, align 8
  %6796 = alloca i8*, align 8
  %6797 = alloca i64, align 8
  %6798 = alloca i32, align 4
  %6799 = alloca i32, align 4
  %6800 = alloca i32*, align 8
  %6801 = alloca i8*, align 8
  %6802 = alloca i8*, align 8
  %6803 = alloca i64, align 8
  %6804 = alloca i64, align 8
  %6805 = alloca i64, align 8
  %6806 = alloca i8*, align 8
  %6807 = alloca i64, align 8
  %6808 = alloca i8, align 1
  %6809 = alloca i8, align 1
  %6810 = alloca i8, align 1
  %6811 = alloca i8, align 1
  %6812 = alloca i8, align 1
  %6813 = alloca i8, align 1
  %6814 = alloca i8, align 1
  %6815 = alloca i8, align 1
  %6816 = alloca i8, align 1
  %6817 = alloca i8, align 1
  %6818 = alloca i8, align 1
  %6819 = alloca i64, align 8
  %6820 = alloca i8, align 1
  %6821 = alloca %struct.__mbstate_t, align 4
  %6822 = alloca i32, align 4
  %6823 = alloca i64, align 8
  %6824 = alloca i64, align 8
  %6825 = alloca i64, align 8
  store i8* %0, i8** %6794, align 8
  call void @llvm.dbg.declare(metadata i8** %6794, metadata !2630, metadata !DIExpression()), !dbg !1750
  store i64 %1, i64* %6795, align 8
  call void @llvm.dbg.declare(metadata i64* %6795, metadata !2662, metadata !DIExpression()), !dbg !1752
  store i8* %2, i8** %6796, align 8
  call void @llvm.dbg.declare(metadata i8** %6796, metadata !2663, metadata !DIExpression()), !dbg !1754
  store i64 %3, i64* %6797, align 8
  call void @llvm.dbg.declare(metadata i64* %6797, metadata !2664, metadata !DIExpression()), !dbg !1756
  store i32 %4, i32* %6798, align 4
  call void @llvm.dbg.declare(metadata i32* %6798, metadata !2665, metadata !DIExpression()), !dbg !1758
  store i32 %5, i32* %6799, align 4
  call void @llvm.dbg.declare(metadata i32* %6799, metadata !2666, metadata !DIExpression()), !dbg !1760
  store i32* %6, i32** %6800, align 8
  call void @llvm.dbg.declare(metadata i32** %6800, metadata !2667, metadata !DIExpression()), !dbg !1762
  store i8* %7, i8** %6801, align 8
  call void @llvm.dbg.declare(metadata i8** %6801, metadata !2668, metadata !DIExpression()), !dbg !1764
  store i8* %8, i8** %6802, align 8
  call void @llvm.dbg.declare(metadata i8** %6802, metadata !2669, metadata !DIExpression()), !dbg !1766
  call void @llvm.dbg.declare(metadata i64* %6803, metadata !2670, metadata !DIExpression()), !dbg !1768
  call void @llvm.dbg.declare(metadata i64* %6804, metadata !2671, metadata !DIExpression()), !dbg !1770
  store i64 0, i64* %6804, align 8, !dbg !1770
  call void @llvm.dbg.declare(metadata i64* %6805, metadata !2672, metadata !DIExpression()), !dbg !1772
  store i64 0, i64* %6805, align 8, !dbg !1772
  call void @llvm.dbg.declare(metadata i8** %6806, metadata !2673, metadata !DIExpression()), !dbg !1774
  store i8* null, i8** %6806, align 8, !dbg !1774
  call void @llvm.dbg.declare(metadata i64* %6807, metadata !2674, metadata !DIExpression()), !dbg !1776
  store i64 0, i64* %6807, align 8, !dbg !1776
  call void @llvm.dbg.declare(metadata i8* %6808, metadata !2675, metadata !DIExpression()), !dbg !1778
  store i8 0, i8* %6808, align 1, !dbg !1778
  call void @llvm.dbg.declare(metadata i8* %6809, metadata !2676, metadata !DIExpression()), !dbg !1780
  %6826 = call i64 @__ctype_get_mb_cur_max() #10, !dbg !1781
  %6827 = icmp eq i64 %6826, 1, !dbg !1782
  %6828 = zext i1 %6827 to i8, !dbg !1780
  store i8 %6828, i8* %6809, align 1, !dbg !1780
  call void @llvm.dbg.declare(metadata i8* %6810, metadata !2677, metadata !DIExpression()), !dbg !1784
  %6829 = load i32, i32* %6799, align 4, !dbg !1785
  %_ = sub i32 0, %6829
  %gen = add i32 %_, 2
  %_1 = sub i32 0, %6829
  %gen2 = add i32 %_1, 2
  %_3 = sub i32 %6829, 2
  %gen4 = mul i32 %_3, 2
  %_5 = shl i32 %6829, 2
  %_6 = sub i32 %6829, 2
  %gen7 = mul i32 %_6, 2
  %_8 = sub i32 %6829, 2
  %gen9 = mul i32 %_8, 2
  %6830 = and i32 %6829, 2, !dbg !1786
  %6831 = icmp ne i32 %6830, 0, !dbg !1787
  %6832 = zext i1 %6831 to i8, !dbg !1784
  store i8 %6832, i8* %6810, align 1, !dbg !1784
  call void @llvm.dbg.declare(metadata i8* %6811, metadata !2678, metadata !DIExpression()), !dbg !1789
  store i8 0, i8* %6811, align 1, !dbg !1789
  call void @llvm.dbg.declare(metadata i8* %6812, metadata !2679, metadata !DIExpression()), !dbg !1791
  store i8 0, i8* %6812, align 1, !dbg !1791
  call void @llvm.dbg.declare(metadata i8* %6813, metadata !2680, metadata !DIExpression()), !dbg !1793
  store i8 1, i8* %6813, align 1, !dbg !1793
  br label %originalBB

originalBB10alteredBB:                            ; preds = %originalBB10, %66
  %6833 = load i32, i32* %23, align 4, !dbg !1797
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %84
  store i32 5, i32* %23, align 4, !dbg !1799
  store i8 1, i8* %35, align 1, !dbg !1801
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %101
  %6834 = load i8, i8* %35, align 1, !dbg !1803
  %6835 = trunc i8 %6834 to i1, !dbg !1803
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %120
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %137
  %6836 = load i64, i64* %29, align 8, !dbg !1807
  %6837 = load i64, i64* %20, align 8, !dbg !1807
  %6838 = icmp ult i64 %6836, %6837, !dbg !1807
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %157
  %6839 = load i8*, i8** %19, align 8, !dbg !1807
  %6840 = load i64, i64* %29, align 8, !dbg !1807
  %6841 = getelementptr inbounds i8, i8* %6839, i64 %6840, !dbg !1807
  store i8 34, i8* %6841, align 1, !dbg !1807
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %177
  %6842 = load i64, i64* %29, align 8, !dbg !1810
  %_35 = shl i64 %6842, 1
  %_36 = sub i64 0, %6842
  %gen37 = add i64 %_36, 1
  %_38 = sub i64 0, %6842
  %gen39 = add i64 %_38, 1
  %_40 = shl i64 %6842, 1
  %_41 = shl i64 %6842, 1
  %_42 = shl i64 %6842, 1
  %6843 = add i64 %6842, 1, !dbg !1810
  store i64 %6843, i64* %29, align 8, !dbg !1810
  br label %originalBB34

originalBB46alteredBB:                            ; preds = %originalBB46, %196
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %213
  store i8 1, i8* %33, align 1, !dbg !1811
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.63, i64 0, i64 0), i8** %31, align 8, !dbg !1812
  store i64 1, i64* %32, align 8, !dbg !1813
  br label %originalBB50

originalBB54alteredBB:                            ; preds = %originalBB54, %230
  store i8 1, i8* %33, align 1, !dbg !1815
  store i8 0, i8* %35, align 1, !dbg !1816
  br label %originalBB54

originalBB58alteredBB:                            ; preds = %originalBB58, %247
  %6844 = load i32, i32* %23, align 4, !dbg !1818
  %6845 = icmp ne i32 %6844, 10, !dbg !1821
  br label %originalBB58

originalBB62alteredBB:                            ; preds = %originalBB62, %266
  %6846 = load i32, i32* %23, align 4, !dbg !1823
  %6847 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.64, i64 0, i64 0), i32 %6846), !dbg !1825
  store i8* %6847, i8** %26, align 8, !dbg !1826
  %6848 = load i32, i32* %23, align 4, !dbg !1827
  %6849 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.65, i64 0, i64 0), i32 %6848), !dbg !1828
  store i8* %6849, i8** %27, align 8, !dbg !1829
  br label %originalBB62

originalBB66alteredBB:                            ; preds = %originalBB66, %287
  %6850 = load i8, i8* %35, align 1, !dbg !1831
  %6851 = trunc i8 %6850 to i1, !dbg !1831
  br label %originalBB66

originalBB70alteredBB:                            ; preds = %originalBB70, %306
  %6852 = load i8*, i8** %26, align 8, !dbg !1834
  store i8* %6852, i8** %31, align 8, !dbg !1836
  br label %originalBB70

originalBB74alteredBB:                            ; preds = %originalBB74, %324
  %6853 = load i8*, i8** %31, align 8, !dbg !1838
  %6854 = load i8, i8* %6853, align 1, !dbg !1840
  %6855 = icmp ne i8 %6854, 0, !dbg !1841
  br label %originalBB74

originalBB78alteredBB:                            ; preds = %originalBB78, %344
  br label %originalBB78

originalBB82alteredBB:                            ; preds = %originalBB82, %361
  %6856 = load i64, i64* %29, align 8, !dbg !1843
  %6857 = load i64, i64* %20, align 8, !dbg !1843
  %6858 = icmp ult i64 %6856, %6857, !dbg !1843
  br label %originalBB82

originalBB86alteredBB:                            ; preds = %originalBB86, %381
  %6859 = load i8*, i8** %31, align 8, !dbg !1843
  %6860 = load i8, i8* %6859, align 1, !dbg !1843
  %6861 = load i8*, i8** %19, align 8, !dbg !1843
  %6862 = load i64, i64* %29, align 8, !dbg !1843
  %6863 = getelementptr inbounds i8, i8* %6861, i64 %6862, !dbg !1843
  store i8 %6860, i8* %6863, align 1, !dbg !1843
  br label %originalBB86

originalBB90alteredBB:                            ; preds = %originalBB90, %403
  %6864 = load i64, i64* %29, align 8, !dbg !1846
  %_91 = sub i64 0, %6864
  %gen92 = add i64 %_91, 1
  %_93 = shl i64 %6864, 1
  %_94 = shl i64 %6864, 1
  %6865 = add i64 %6864, 1, !dbg !1846
  store i64 %6865, i64* %29, align 8, !dbg !1846
  br label %originalBB90

originalBB98alteredBB:                            ; preds = %originalBB98, %422
  br label %originalBB98

originalBB102alteredBB:                           ; preds = %originalBB102, %442
  br label %originalBB102

originalBB106alteredBB:                           ; preds = %originalBB106, %459
  store i8 1, i8* %33, align 1, !dbg !1851
  %6866 = load i8*, i8** %27, align 8, !dbg !1852
  store i8* %6866, i8** %31, align 8, !dbg !1853
  %6867 = load i8*, i8** %31, align 8, !dbg !1854
  %6868 = call i64 @strlen(i8* %6867) #13, !dbg !1855
  store i64 %6868, i64* %32, align 8, !dbg !1856
  br label %originalBB106

originalBB110alteredBB:                           ; preds = %originalBB110, %479
  store i8 1, i8* %33, align 1, !dbg !1858
  br label %originalBB110

originalBB114alteredBB:                           ; preds = %originalBB114, %496
  store i8 1, i8* %35, align 1, !dbg !1860
  br label %originalBB114

originalBB118alteredBB:                           ; preds = %originalBB118, %513
  %6869 = load i8, i8* %35, align 1, !dbg !1862
  %6870 = trunc i8 %6869 to i1, !dbg !1862
  br label %originalBB118

originalBB122alteredBB:                           ; preds = %originalBB122, %532
  store i8 1, i8* %33, align 1, !dbg !1865
  br label %originalBB122

originalBB126alteredBB:                           ; preds = %originalBB126, %549
  br label %originalBB126

originalBB130alteredBB:                           ; preds = %originalBB130, %566
  store i32 2, i32* %23, align 4, !dbg !1868
  %6871 = load i8, i8* %35, align 1, !dbg !1869
  %6872 = trunc i8 %6871 to i1, !dbg !1869
  br label %originalBB130

originalBB134alteredBB:                           ; preds = %originalBB134, %585
  br label %originalBB134

originalBB138alteredBB:                           ; preds = %originalBB138, %606
  %6873 = load i8*, i8** %19, align 8, !dbg !1873
  %6874 = load i64, i64* %29, align 8, !dbg !1873
  %6875 = getelementptr inbounds i8, i8* %6873, i64 %6874, !dbg !1873
  store i8 39, i8* %6875, align 1, !dbg !1873
  br label %originalBB138

originalBB142alteredBB:                           ; preds = %originalBB142, %626
  %6876 = load i64, i64* %29, align 8, !dbg !1876
  %_143 = sub i64 0, %6876
  %gen144 = add i64 %_143, 1
  %_145 = shl i64 %6876, 1
  %6877 = add i64 %6876, 1, !dbg !1876
  store i64 %6877, i64* %29, align 8, !dbg !1876
  br label %originalBB142

originalBB149alteredBB:                           ; preds = %originalBB149, %645
  br label %originalBB149

originalBB153alteredBB:                           ; preds = %originalBB153, %662
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.65, i64 0, i64 0), i8** %31, align 8, !dbg !1877
  store i64 1, i64* %32, align 8, !dbg !1878
  br label %originalBB153

originalBB157alteredBB:                           ; preds = %originalBB157, %679
  store i8 0, i8* %35, align 1, !dbg !1880
  br label %originalBB157

originalBB161alteredBB:                           ; preds = %originalBB161, %696
  call void @abort() #12, !dbg !1882
  br label %originalBB161

originalBB165alteredBB:                           ; preds = %originalBB165, %713
  store i64 0, i64* %28, align 8, !dbg !1883
  br label %originalBB165

originalBB169alteredBB:                           ; preds = %originalBB169, %730
  %6878 = load i64, i64* %22, align 8, !dbg !1886
  %6879 = icmp eq i64 %6878, -1, !dbg !1888
  br label %originalBB169

originalBB173alteredBB:                           ; preds = %originalBB173, %749
  %6880 = load i8*, i8** %21, align 8, !dbg !1889
  %6881 = load i64, i64* %28, align 8, !dbg !1890
  %6882 = getelementptr inbounds i8, i8* %6880, i64 %6881, !dbg !1889
  %6883 = load i8, i8* %6882, align 1, !dbg !1889
  %6884 = sext i8 %6883 to i32, !dbg !1889
  %6885 = icmp eq i32 %6884, 0, !dbg !1891
  %6886 = zext i1 %6885 to i32, !dbg !1891
  br label %originalBB173

originalBB177alteredBB:                           ; preds = %originalBB177, %773
  %6887 = load i64, i64* %28, align 8, !dbg !1892
  %6888 = load i64, i64* %22, align 8, !dbg !1893
  %6889 = icmp eq i64 %6887, %6888, !dbg !1894
  %6890 = zext i1 %6889 to i32, !dbg !1894
  br label %originalBB177

originalBB181alteredBB:                           ; preds = %originalBB181, %794
  %6891 = icmp ne i32 %795, 0, !dbg !1895
  %_182 = sub i1 %6891, true
  %gen183 = mul i1 %_182, true
  %_184 = sub i1 false, %6891
  %gen185 = add i1 %_184, true
  %_186 = shl i1 %6891, true
  %_187 = shl i1 %6891, true
  %_188 = sub i1 false, %6891
  %gen189 = add i1 %_188, true
  %_190 = sub i1 %6891, true
  %gen191 = mul i1 %_190, true
  %_192 = sub i1 %6891, true
  %gen193 = mul i1 %_192, true
  %_194 = shl i1 %6891, true
  %_195 = shl i1 %6891, true
  %6892 = xor i1 %6891, true, !dbg !1895
  br label %originalBB181

originalBB199alteredBB:                           ; preds = %originalBB199, %814
  store i8 0, i8* %41, align 1, !dbg !1903
  call void @llvm.dbg.declare(metadata !4, metadata !2681, metadata !DIExpression()), !dbg !1905
  store i8 0, i8* %42, align 1, !dbg !1905
  call void @llvm.dbg.declare(metadata !4, metadata !2716, metadata !DIExpression()), !dbg !1907
  store i8 0, i8* %43, align 1, !dbg !1907
  %6893 = load i8, i8* %33, align 1, !dbg !1908
  %6894 = trunc i8 %6893 to i1, !dbg !1908
  br label %originalBB199

originalBB203alteredBB:                           ; preds = %originalBB203, %833
  %6895 = load i32, i32* %23, align 4, !dbg !1911
  %6896 = icmp ne i32 %6895, 2, !dbg !1912
  br label %originalBB203

originalBB207alteredBB:                           ; preds = %originalBB207, %852
  %6897 = load i64, i64* %32, align 8, !dbg !1914
  %6898 = icmp ne i64 %6897, 0, !dbg !1914
  br label %originalBB207

originalBB211alteredBB:                           ; preds = %originalBB211, %871
  %6899 = load i64, i64* %28, align 8, !dbg !1916
  %6900 = load i64, i64* %32, align 8, !dbg !1917
  %_212 = shl i64 %6899, %6900
  %_213 = sub i64 %6899, %6900
  %gen214 = mul i64 %_213, %6900
  %_215 = sub i64 0, %6899
  %gen216 = add i64 %_215, %6900
  %_217 = shl i64 %6899, %6900
  %6901 = add i64 %6899, %6900, !dbg !1918
  %6902 = load i64, i64* %22, align 8, !dbg !1919
  %6903 = icmp eq i64 %6902, -1, !dbg !1920
  br label %originalBB211

originalBB221alteredBB:                           ; preds = %originalBB221, %893
  %6904 = load i64, i64* %32, align 8, !dbg !1922
  %6905 = icmp ult i64 1, %6904, !dbg !1923
  br label %originalBB221

originalBB225alteredBB:                           ; preds = %originalBB225, %912
  %6906 = load i8*, i8** %21, align 8, !dbg !1924
  %6907 = call i64 @strlen(i8* %6906) #13, !dbg !1925
  store i64 %6907, i64* %22, align 8, !dbg !1926
  br label %originalBB225

originalBB229alteredBB:                           ; preds = %originalBB229, %931
  %6908 = load i64, i64* %22, align 8, !dbg !1927
  br label %originalBB229

originalBB233alteredBB:                           ; preds = %originalBB233, %949
  %6909 = icmp ule i64 %882, %950, !dbg !1928
  br label %originalBB233

originalBB237alteredBB:                           ; preds = %originalBB237, %968
  %6910 = load i8*, i8** %21, align 8, !dbg !1930
  %6911 = load i64, i64* %28, align 8, !dbg !1931
  %6912 = getelementptr inbounds i8, i8* %6910, i64 %6911, !dbg !1932
  %6913 = load i8*, i8** %31, align 8, !dbg !1933
  %6914 = load i64, i64* %32, align 8, !dbg !1934
  %6915 = call i32 @memcmp(i8* %6912, i8* %6913, i64 %6914) #13, !dbg !1935
  %6916 = icmp eq i32 %6915, 0, !dbg !1936
  br label %originalBB237

originalBB241alteredBB:                           ; preds = %originalBB241, %992
  %6917 = load i8, i8* %35, align 1, !dbg !1938
  %6918 = trunc i8 %6917 to i1, !dbg !1938
  br label %originalBB241

originalBB245alteredBB:                           ; preds = %originalBB245, %1011
  br label %originalBB245

originalBB249alteredBB:                           ; preds = %originalBB249, %1028
  store i8 1, i8* %41, align 1, !dbg !1943
  br label %originalBB249

originalBB253alteredBB:                           ; preds = %originalBB253, %1045
  %6919 = load i8*, i8** %21, align 8, !dbg !1945
  %6920 = load i64, i64* %28, align 8, !dbg !1946
  %6921 = getelementptr inbounds i8, i8* %6919, i64 %6920, !dbg !1945
  %6922 = load i8, i8* %6921, align 1, !dbg !1945
  store i8 %6922, i8* %39, align 1, !dbg !1947
  %6923 = load i8, i8* %39, align 1, !dbg !1948
  %6924 = zext i8 %6923 to i32, !dbg !1948
  br label %originalBB253

originalBB257alteredBB:                           ; preds = %originalBB257, %1068
  %6925 = load i8, i8* %33, align 1, !dbg !1950
  %6926 = trunc i8 %6925 to i1, !dbg !1950
  br label %originalBB257

originalBB261alteredBB:                           ; preds = %originalBB261, %1087
  br label %originalBB261

originalBB265alteredBB:                           ; preds = %originalBB265, %1104
  %6927 = load i8, i8* %35, align 1, !dbg !1956
  %6928 = trunc i8 %6927 to i1, !dbg !1956
  br label %originalBB265

originalBB269alteredBB:                           ; preds = %originalBB269, %1123
  br label %originalBB269

originalBB273alteredBB:                           ; preds = %originalBB273, %1140
  store i8 1, i8* %42, align 1, !dbg !1959
  %6929 = load i32, i32* %23, align 4, !dbg !1960
  %6930 = icmp eq i32 %6929, 2, !dbg !1960
  br label %originalBB273

originalBB277alteredBB:                           ; preds = %originalBB277, %1159
  %6931 = load i8, i8* %36, align 1, !dbg !1960
  %6932 = trunc i8 %6931 to i1, !dbg !1960
  br label %originalBB277

originalBB281alteredBB:                           ; preds = %originalBB281, %1178
  br label %originalBB281

originalBB285alteredBB:                           ; preds = %originalBB285, %1195
  %6933 = load i64, i64* %29, align 8, !dbg !1964
  %6934 = load i64, i64* %20, align 8, !dbg !1964
  %6935 = icmp ult i64 %6933, %6934, !dbg !1964
  br label %originalBB285

originalBB289alteredBB:                           ; preds = %originalBB289, %1215
  %6936 = load i8*, i8** %19, align 8, !dbg !1964
  %6937 = load i64, i64* %29, align 8, !dbg !1964
  %6938 = getelementptr inbounds i8, i8* %6936, i64 %6937, !dbg !1964
  store i8 39, i8* %6938, align 1, !dbg !1964
  br label %originalBB289

originalBB293alteredBB:                           ; preds = %originalBB293, %1235
  %6939 = load i64, i64* %29, align 8, !dbg !1967
  %_294 = sub i64 0, %6939
  %gen295 = add i64 %_294, 1
  %_296 = sub i64 0, %6939
  %gen297 = add i64 %_296, 1
  %_298 = shl i64 %6939, 1
  %_299 = sub i64 0, %6939
  %gen300 = add i64 %_299, 1
  %6940 = add i64 %6939, 1, !dbg !1967
  %6941 = trunc i64 1 to i32
  %_301 = sub i32 %6941, -5
  %gen302 = mul i32 %_301, -5
  %_303 = sub i32 %6941, -5
  %gen304 = mul i32 %_303, -5
  %_305 = sub i32 0, %6941
  %gen306 = add i32 %_305, -5
  %_307 = shl i32 %6941, -5
  %_308 = shl i32 %6941, -5
  %6942 = mul i32 %6941, -5
  %_309 = shl i32 %6942, 3
  %_310 = sub i32 0, %6942
  %gen311 = add i32 %_310, 3
  %_312 = shl i32 %6942, 3
  %_313 = sub i32 %6942, 3
  %gen314 = mul i32 %_313, 3
  %_315 = sub i32 0, %6942
  %gen316 = add i32 %_315, 3
  %6943 = add i32 %6942, 3
  %6944 = trunc i64 %6939 to i32
  %_317 = sub i32 0, %6944
  %gen318 = add i32 %_317, 2
  %_319 = sub i32 0, %6944
  %gen320 = add i32 %_319, 2
  %_321 = sub i32 0, %6944
  %gen322 = add i32 %_321, 2
  %_323 = sub i32 %6944, 2
  %gen324 = mul i32 %_323, 2
  %_325 = shl i32 %6944, 2
  %_326 = shl i32 %6944, 2
  %_327 = sub i32 %6944, 2
  %gen328 = mul i32 %_327, 2
  %_329 = sub i32 %6944, 2
  %gen330 = mul i32 %_329, 2
  %_331 = sub i32 %6944, 2
  %gen332 = mul i32 %_331, 2
  %_333 = sub i32 0, %6944
  %gen334 = add i32 %_333, 2
  %6945 = add i32 %6944, 2
  %6946 = trunc i64 %6940 to i32
  %_335 = sub i32 0, %6946
  %gen336 = add i32 %_335, -2
  %_337 = sub i32 %6946, -2
  %gen338 = mul i32 %_337, -2
  %_339 = sub i32 %6946, -2
  %gen340 = mul i32 %_339, -2
  %_341 = sub i32 0, %6946
  %gen342 = add i32 %_341, -2
  %_343 = shl i32 %6946, -2
  %_344 = sub i32 0, %6946
  %gen345 = add i32 %_344, -2
  %6947 = mul i32 %6946, -2
  %_346 = sub i32 %6947, 2
  %gen347 = mul i32 %_346, 2
  %_348 = sub i32 %6947, 2
  %gen349 = mul i32 %_348, 2
  %6948 = add i32 %6947, 2
  %_350 = sub i32 0, %6943
  %gen351 = add i32 %_350, %6943
  %_352 = shl i32 %6943, %6943
  %_353 = sub i32 0, %6943
  %gen354 = add i32 %_353, %6943
  %6949 = mul i32 %6943, %6943
  %_355 = sub i32 0, %6949
  %gen356 = add i32 %_355, %6949
  %_357 = shl i32 %6949, %6949
  %6950 = mul i32 %6949, %6949
  %_358 = sub i32 %6945, %6945
  %gen359 = mul i32 %_358, %6945
  %_360 = sub i32 0, %6945
  %gen361 = add i32 %_360, %6945
  %6951 = mul i32 %6945, %6945
  %_362 = sub i32 0, %6951
  %gen363 = add i32 %_362, %6951
  %_364 = sub i32 0, %6951
  %gen365 = add i32 %_364, %6951
  %_366 = sub i32 %6951, %6951
  %gen367 = mul i32 %_366, %6951
  %_368 = sub i32 0, %6951
  %gen369 = add i32 %_368, %6951
  %_370 = shl i32 %6951, %6951
  %_371 = shl i32 %6951, %6951
  %_372 = sub i32 0, %6951
  %gen373 = add i32 %_372, %6951
  %6952 = mul i32 %6951, %6951
  %_374 = sub i32 0, %6948
  %gen375 = add i32 %_374, %6948
  %_376 = sub i32 0, %6948
  %gen377 = add i32 %_376, %6948
  %6953 = mul i32 %6948, %6948
  %_378 = sub i32 %6953, %6953
  %gen379 = mul i32 %_378, %6953
  %_380 = sub i32 %6953, %6953
  %gen381 = mul i32 %_380, %6953
  %_382 = sub i32 0, %6953
  %gen383 = add i32 %_382, %6953
  %6954 = mul i32 %6953, %6953
  %_384 = shl i32 %6950, %6952
  %_385 = sub i32 0, %6950
  %gen386 = add i32 %_385, %6952
  %_387 = sub i32 %6950, %6952
  %gen388 = mul i32 %_387, %6952
  %_389 = shl i32 %6950, %6952
  %6955 = add i32 %6950, %6952
  %_390 = sub i32 %6955, %6954
  %gen391 = mul i32 %_390, %6954
  %_392 = sub i32 %6955, %6954
  %gen393 = mul i32 %_392, %6954
  %_394 = shl i32 %6955, %6954
  %_395 = sub i32 0, %6955
  %gen396 = add i32 %_395, %6954
  %_397 = shl i32 %6955, %6954
  %_398 = sub i32 %6955, %6954
  %gen399 = mul i32 %_398, %6954
  %_400 = sub i32 %6955, %6954
  %gen401 = mul i32 %_400, %6954
  %_402 = sub i32 %6955, %6954
  %gen403 = mul i32 %_402, %6954
  %6956 = sub i32 %6955, %6954
  %_404 = shl i32 %6956, 5
  %_405 = shl i32 %6956, 5
  %_406 = sub i32 0, %6956
  %gen407 = add i32 %_406, 5
  %_408 = sub i32 %6956, 5
  %gen409 = mul i32 %_408, 5
  %_410 = sub i32 0, %6956
  %gen411 = add i32 %_410, 5
  %_412 = sub i32 0, %6956
  %gen413 = add i32 %_412, 5
  %_414 = sub i32 0, %6956
  %gen415 = add i32 %_414, 5
  %6957 = add i32 %6956, 5
  %6958 = icmp ne i32 %6957, 5
  br label %originalBB293

originalBB419alteredBB:                           ; preds = %originalBB419, %1272
  br label %originalBB419

originalBB423alteredBB:                           ; preds = %originalBB423, %1289
  store i64 %1245, i64* %29, align 8, !dbg !1967
  br label %originalBB423

originalBB427alteredBB:                           ; preds = %originalBB427, %1306
  br label %originalBB427

originalBB431alteredBB:                           ; preds = %originalBB431, %1327
  %6959 = load i8*, i8** %19, align 8, !dbg !1968
  %6960 = load i64, i64* %29, align 8, !dbg !1968
  %6961 = getelementptr inbounds i8, i8* %6959, i64 %6960, !dbg !1968
  store i8 36, i8* %6961, align 1, !dbg !1968
  br label %originalBB431

originalBB435alteredBB:                           ; preds = %originalBB435, %1347
  %6962 = load i64, i64* %29, align 8, !dbg !1971
  %_436 = shl i64 %6962, 1
  %_437 = shl i64 %6962, 1
  %_438 = sub i64 0, %6962
  %gen439 = add i64 %_438, 1
  %_440 = shl i64 %6962, 1
  %_441 = sub i64 %6962, 1
  %gen442 = mul i64 %_441, 1
  %6963 = add i64 %6962, 1, !dbg !1971
  store i64 %6963, i64* %29, align 8, !dbg !1971
  br label %originalBB435

originalBB446alteredBB:                           ; preds = %originalBB446, %1366
  br label %originalBB446

originalBB450alteredBB:                           ; preds = %originalBB450, %1383
  %6964 = load i64, i64* %29, align 8, !dbg !1972
  %6965 = load i64, i64* %20, align 8, !dbg !1972
  %6966 = icmp ult i64 %6964, %6965, !dbg !1972
  br label %originalBB450

originalBB454alteredBB:                           ; preds = %originalBB454, %1403
  %6967 = load i8*, i8** %19, align 8, !dbg !1972
  %6968 = load i64, i64* %29, align 8, !dbg !1972
  %6969 = getelementptr inbounds i8, i8* %6967, i64 %6968, !dbg !1972
  store i8 39, i8* %6969, align 1, !dbg !1972
  br label %originalBB454

originalBB458alteredBB:                           ; preds = %originalBB458, %1423
  %6970 = load i64, i64* %29, align 8, !dbg !1975
  %_459 = sub i64 %6970, 1
  %gen460 = mul i64 %_459, 1
  %_461 = sub i64 0, %6970
  %gen462 = add i64 %_461, 1
  %_463 = shl i64 %6970, 1
  %_464 = sub i64 %6970, 1
  %gen465 = mul i64 %_464, 1
  %_466 = sub i64 %6970, 1
  %gen467 = mul i64 %_466, 1
  %6971 = add i64 %6970, 1, !dbg !1975
  store i64 %6971, i64* %29, align 8, !dbg !1975
  br label %originalBB458

originalBB471alteredBB:                           ; preds = %originalBB471, %1442
  store i8 1, i8* %36, align 1, !dbg !1962
  br label %originalBB471

originalBB475alteredBB:                           ; preds = %originalBB475, %1460
  %6972 = load i64, i64* %29, align 8, !dbg !1976
  %6973 = load i64, i64* %20, align 8, !dbg !1976
  %6974 = icmp ult i64 %6972, %6973, !dbg !1976
  br label %originalBB475

originalBB479alteredBB:                           ; preds = %originalBB479, %1480
  %6975 = load i8*, i8** %19, align 8, !dbg !1976
  %6976 = load i64, i64* %29, align 8, !dbg !1976
  %6977 = getelementptr inbounds i8, i8* %6975, i64 %6976, !dbg !1976
  store i8 92, i8* %6977, align 1, !dbg !1976
  br label %originalBB479

originalBB483alteredBB:                           ; preds = %originalBB483, %1500
  %6978 = load i64, i64* %29, align 8, !dbg !1979
  %_484 = shl i64 %6978, 1
  %6979 = add i64 %6978, 1, !dbg !1979
  store i64 %6979, i64* %29, align 8, !dbg !1979
  br label %originalBB483

originalBB488alteredBB:                           ; preds = %originalBB488, %1519
  br label %originalBB488

originalBB492alteredBB:                           ; preds = %originalBB492, %1536
  %6980 = load i32, i32* %23, align 4, !dbg !1980
  %6981 = icmp ne i32 %6980, 2, !dbg !1982
  br label %originalBB492

originalBB496alteredBB:                           ; preds = %originalBB496, %1555
  %6982 = load i64, i64* %28, align 8, !dbg !1984
  %6983 = add i64 %6982, 1, !dbg !1985
  %6984 = load i64, i64* %22, align 8, !dbg !1986
  %6985 = icmp ult i64 %6983, %6984, !dbg !1987
  br label %originalBB496

originalBB500alteredBB:                           ; preds = %originalBB500, %1576
  %6986 = load i8*, i8** %21, align 8, !dbg !1989
  %6987 = load i64, i64* %28, align 8, !dbg !1990
  %_501 = sub i64 %6987, 1
  %gen502 = mul i64 %_501, 1
  %_503 = sub i64 %6987, 1
  %gen504 = mul i64 %_503, 1
  %_505 = sub i64 %6987, 1
  %gen506 = mul i64 %_505, 1
  %_507 = shl i64 %6987, 1
  %_508 = sub i64 %6987, 1
  %gen509 = mul i64 %_508, 1
  %_510 = sub i64 0, %6987
  %gen511 = add i64 %_510, 1
  %6988 = add i64 %6987, 1, !dbg !1991
  %6989 = getelementptr inbounds i8, i8* %6986, i64 %6988, !dbg !1989
  %6990 = load i8, i8* %6989, align 1, !dbg !1989
  %6991 = sext i8 %6990 to i32, !dbg !1989
  %6992 = icmp sle i32 48, %6991, !dbg !1992
  br label %originalBB500

originalBB515alteredBB:                           ; preds = %originalBB515, %1600
  %6993 = load i8*, i8** %21, align 8, !dbg !1994
  %6994 = load i64, i64* %28, align 8, !dbg !1995
  %_516 = sub i64 %6994, 1
  %gen517 = mul i64 %_516, 1
  %_518 = sub i64 %6994, 1
  %gen519 = mul i64 %_518, 1
  %_520 = shl i64 %6994, 1
  %_521 = sub i64 0, %6994
  %gen522 = add i64 %_521, 1
  %_523 = sub i64 0, %6994
  %gen524 = add i64 %_523, 1
  %_525 = sub i64 %6994, 1
  %gen526 = mul i64 %_525, 1
  %_527 = sub i64 %6994, 1
  %gen528 = mul i64 %_527, 1
  %6995 = add i64 %6994, 1, !dbg !1996
  %6996 = getelementptr inbounds i8, i8* %6993, i64 %6995, !dbg !1994
  %6997 = load i8, i8* %6996, align 1, !dbg !1994
  %6998 = sext i8 %6997 to i32, !dbg !1994
  %6999 = icmp sle i32 %6998, 57, !dbg !1997
  br label %originalBB515

originalBB532alteredBB:                           ; preds = %originalBB532, %1624
  br label %originalBB532

originalBB536alteredBB:                           ; preds = %originalBB536, %1645
  %7000 = load i8*, i8** %19, align 8, !dbg !2001
  %7001 = load i64, i64* %29, align 8, !dbg !2001
  %7002 = getelementptr inbounds i8, i8* %7000, i64 %7001, !dbg !2001
  store i8 48, i8* %7002, align 1, !dbg !2001
  br label %originalBB536

originalBB540alteredBB:                           ; preds = %originalBB540, %1665
  %7003 = load i64, i64* %29, align 8, !dbg !2004
  %_541 = sub i64 0, %7003
  %gen542 = add i64 %_541, 1
  %_543 = sub i64 0, %7003
  %gen544 = add i64 %_543, 1
  %_545 = sub i64 %7003, 1
  %gen546 = mul i64 %_545, 1
  %_547 = sub i64 %7003, 1
  %gen548 = mul i64 %_547, 1
  %7004 = add i64 %7003, 1, !dbg !2004
  store i64 %7004, i64* %29, align 8, !dbg !2004
  br label %originalBB540

originalBB552alteredBB:                           ; preds = %originalBB552, %1684
  br label %originalBB552

originalBB556alteredBB:                           ; preds = %originalBB556, %1705
  %7005 = load i8*, i8** %19, align 8, !dbg !2006
  %7006 = load i64, i64* %29, align 8, !dbg !2006
  %7007 = getelementptr inbounds i8, i8* %7005, i64 %7006, !dbg !2006
  store i8 48, i8* %7007, align 1, !dbg !2006
  br label %originalBB556

originalBB560alteredBB:                           ; preds = %originalBB560, %1725
  %7008 = load i64, i64* %29, align 8, !dbg !2009
  %_561 = sub i64 %7008, 1
  %gen562 = mul i64 %_561, 1
  %_563 = sub i64 0, %7008
  %gen564 = add i64 %_563, 1
  %_565 = shl i64 %7008, 1
  %7009 = add i64 %7008, 1, !dbg !2009
  store i64 %7009, i64* %29, align 8, !dbg !2009
  br label %originalBB560

originalBB569alteredBB:                           ; preds = %originalBB569, %1744
  br label %originalBB569

originalBB573alteredBB:                           ; preds = %originalBB573, %1761
  store i8 48, i8* %39, align 1, !dbg !2011
  br label %originalBB573

originalBB577alteredBB:                           ; preds = %originalBB577, %1778
  %7010 = load i32, i32* %24, align 4, !dbg !2013
  %_578 = sub i32 %7010, 1
  %gen579 = mul i32 %_578, 1
  %_580 = sub i32 %7010, 1
  %gen581 = mul i32 %_580, 1
  %_582 = sub i32 %7010, 1
  %gen583 = mul i32 %_582, 1
  %_584 = shl i32 %7010, 1
  %7011 = and i32 %7010, 1, !dbg !2015
  %7012 = icmp ne i32 %7011, 0, !dbg !2015
  br label %originalBB577

originalBB588alteredBB:                           ; preds = %originalBB588, %1798
  br label %originalBB588

originalBB592alteredBB:                           ; preds = %originalBB592, %1816
  br label %originalBB592

originalBB596alteredBB:                           ; preds = %originalBB596, %1833
  %7013 = load i32, i32* %23, align 4, !dbg !2019
  br label %originalBB596

originalBB600alteredBB:                           ; preds = %originalBB600, %1851
  %7014 = load i8, i8* %35, align 1, !dbg !2021
  %7015 = trunc i8 %7014 to i1, !dbg !2021
  br label %originalBB600

originalBB604alteredBB:                           ; preds = %originalBB604, %1870
  br label %originalBB604

originalBB608alteredBB:                           ; preds = %originalBB608, %1887
  br label %originalBB608

originalBB612alteredBB:                           ; preds = %originalBB612, %1904
  %7016 = load i32, i32* %24, align 4, !dbg !2027
  %_613 = sub i32 %7016, 4
  %gen614 = mul i32 %_613, 4
  %_615 = sub i32 %7016, 4
  %gen616 = mul i32 %_615, 4
  %7017 = and i32 %7016, 4, !dbg !2029
  %7018 = icmp ne i32 %7017, 0, !dbg !2029
  br label %originalBB612

originalBB620alteredBB:                           ; preds = %originalBB620, %1924
  %7019 = load i64, i64* %28, align 8, !dbg !2031
  %_621 = shl i64 %7019, 2
  %_622 = sub i64 0, %7019
  %gen623 = add i64 %_622, 2
  %_624 = sub i64 %7019, 2
  %gen625 = mul i64 %_624, 2
  %_626 = shl i64 %7019, 2
  %_627 = sub i64 0, %7019
  %gen628 = add i64 %_627, 2
  %_629 = sub i64 0, %7019
  %gen630 = add i64 %_629, 2
  %7020 = add i64 %7019, 2, !dbg !2032
  %7021 = load i64, i64* %22, align 8, !dbg !2033
  %7022 = trunc i64 %7021 to i32
  %_631 = sub i32 %7022, -4
  %gen632 = mul i32 %_631, -4
  %_633 = sub i32 0, %7022
  %gen634 = add i32 %_633, -4
  %7023 = mul i32 %7022, -4
  %7024 = trunc i64 2 to i32
  %_635 = sub i32 0, %7024
  %gen636 = add i32 %_635, 3
  %7025 = mul i32 %7024, 3
  %_637 = sub i32 0, %7025
  %gen638 = add i32 %_637, -5
  %_639 = shl i32 %7025, -5
  %_640 = sub i32 %7025, -5
  %gen641 = mul i32 %_640, -5
  %_642 = shl i32 %7025, -5
  %7026 = add i32 %7025, -5
  %_643 = shl i32 %7023, %7023
  %_644 = shl i32 %7023, %7023
  %_645 = shl i32 %7023, %7023
  %_646 = sub i32 %7023, %7023
  %gen647 = mul i32 %_646, %7023
  %7027 = mul i32 %7023, %7023
  %_648 = sub i32 %7026, %7026
  %gen649 = mul i32 %_648, %7026
  %_650 = shl i32 %7026, %7026
  %_651 = shl i32 %7026, %7026
  %_652 = sub i32 0, %7026
  %gen653 = add i32 %_652, %7026
  %7028 = mul i32 %7026, %7026
  %_654 = shl i32 %7027, %7028
  %_655 = sub i32 %7027, %7028
  %gen656 = mul i32 %_655, %7028
  %_657 = sub i32 0, %7027
  %gen658 = add i32 %_657, %7028
  %7029 = add i32 %7027, %7028
  %_659 = sub i32 0, %7023
  %gen660 = add i32 %_659, %7026
  %_661 = shl i32 %7023, %7026
  %_662 = sub i32 %7023, %7026
  %gen663 = mul i32 %_662, %7026
  %_664 = sub i32 0, %7023
  %gen665 = add i32 %_664, %7026
  %_666 = sub i32 0, %7023
  %gen667 = add i32 %_666, %7026
  %_668 = sub i32 0, %7023
  %gen669 = add i32 %_668, %7026
  %_670 = sub i32 0, %7023
  %gen671 = add i32 %_670, %7026
  %_672 = sub i32 0, %7023
  %gen673 = add i32 %_672, %7026
  %7030 = mul i32 %7023, %7026
  %_674 = shl i32 %7030, 2
  %_675 = sub i32 %7030, 2
  %gen676 = mul i32 %_675, 2
  %_677 = sub i32 0, %7030
  %gen678 = add i32 %_677, 2
  %7031 = mul i32 %7030, 2
  %_679 = sub i32 %7029, %7031
  %gen680 = mul i32 %_679, %7031
  %_681 = sub i32 %7029, %7031
  %gen682 = mul i32 %_681, %7031
  %_683 = sub i32 %7029, %7031
  %gen684 = mul i32 %_683, %7031
  %_685 = shl i32 %7029, %7031
  %_686 = sub i32 %7029, %7031
  %gen687 = mul i32 %_686, %7031
  %_688 = shl i32 %7029, %7031
  %_689 = sub i32 %7029, %7031
  %gen690 = mul i32 %_689, %7031
  %7032 = sub i32 %7029, %7031
  %_691 = shl i32 %7032, -2
  %_692 = sub i32 %7032, -2
  %gen693 = mul i32 %_692, -2
  %7033 = mul i32 %7032, -2
  %_694 = shl i32 %7033, -4
  %_695 = sub i32 0, %7033
  %gen696 = add i32 %_695, -4
  %_697 = sub i32 %7033, -4
  %gen698 = mul i32 %_697, -4
  %_699 = sub i32 0, %7033
  %gen700 = add i32 %_699, -4
  %_701 = sub i32 %7033, -4
  %gen702 = mul i32 %_701, -4
  %_703 = shl i32 %7033, -4
  %7034 = add i32 %7033, -4
  %7035 = icmp ne i32 %7034, -2
  br label %originalBB620

originalBB707alteredBB:                           ; preds = %originalBB707, %1958
  br label %originalBB707

originalBB711alteredBB:                           ; preds = %originalBB711, %1977
  %7036 = load i8*, i8** %21, align 8, !dbg !2036
  %7037 = load i64, i64* %28, align 8, !dbg !2037
  %_712 = shl i64 %7037, 1
  %7038 = add i64 %7037, 1, !dbg !2038
  %7039 = trunc i64 1 to i32
  %_713 = sub i32 0, %7039
  %gen714 = add i32 %_713, 4
  %_715 = shl i32 %7039, 4
  %_716 = sub i32 0, %7039
  %gen717 = add i32 %_716, 4
  %_718 = sub i32 0, %7039
  %gen719 = add i32 %_718, 4
  %_720 = sub i32 %7039, 4
  %gen721 = mul i32 %_720, 4
  %_722 = sub i32 %7039, 4
  %gen723 = mul i32 %_722, 4
  %_724 = sub i32 %7039, 4
  %gen725 = mul i32 %_724, 4
  %7040 = mul i32 %7039, 4
  %_726 = sub i32 %7040, 3
  %gen727 = mul i32 %_726, 3
  %_728 = sub i32 0, %7040
  %gen729 = add i32 %_728, 3
  %7041 = add i32 %7040, 3
  %7042 = trunc i64 %7037 to i32
  %_730 = sub i32 %7042, 2
  %gen731 = mul i32 %_730, 2
  %_732 = sub i32 %7042, 2
  %gen733 = mul i32 %_732, 2
  %_734 = sub i32 %7042, 2
  %gen735 = mul i32 %_734, 2
  %_736 = shl i32 %7042, 2
  %_737 = sub i32 %7042, 2
  %gen738 = mul i32 %_737, 2
  %_739 = sub i32 0, %7042
  %gen740 = add i32 %_739, 2
  %_741 = shl i32 %7042, 2
  %7043 = mul i32 %7042, 2
  %_742 = shl i32 %7043, 1
  %_743 = sub i32 0, %7043
  %gen744 = add i32 %_743, 1
  %_745 = sub i32 0, %7043
  %gen746 = add i32 %_745, 1
  %_747 = sub i32 0, %7043
  %gen748 = add i32 %_747, 1
  %_749 = sub i32 %7043, 1
  %gen750 = mul i32 %_749, 1
  %7044 = add i32 %7043, 1
  %_751 = shl i32 %7041, %7041
  %_752 = sub i32 0, %7041
  %gen753 = add i32 %_752, %7041
  %_754 = shl i32 %7041, %7041
  %7045 = mul i32 %7041, %7041
  %_755 = sub i32 %7044, %7044
  %gen756 = mul i32 %_755, %7044
  %7046 = mul i32 %7044, %7044
  %_757 = sub i32 0, %7046
  %gen758 = add i32 %_757, 34
  %_759 = shl i32 %7046, 34
  %_760 = shl i32 %7046, 34
  %_761 = shl i32 %7046, 34
  %_762 = sub i32 0, %7046
  %gen763 = add i32 %_762, 34
  %_764 = shl i32 %7046, 34
  %_765 = sub i32 0, %7046
  %gen766 = add i32 %_765, 34
  %_767 = sub i32 0, %7046
  %gen768 = add i32 %_767, 34
  %7047 = mul i32 %7046, 34
  %_769 = sub i32 0, %7045
  %gen770 = add i32 %_769, %7047
  %7048 = sub i32 %7045, %7047
  %_771 = shl i32 %7048, -2
  %_772 = sub i32 0, %7048
  %gen773 = add i32 %_772, -2
  %_774 = shl i32 %7048, -2
  %7049 = mul i32 %7048, -2
  %_775 = sub i32 %7049, -2
  %gen776 = mul i32 %_775, -2
  %_777 = sub i32 0, %7049
  %gen778 = add i32 %_777, -2
  %_779 = sub i32 %7049, -2
  %gen780 = mul i32 %_779, -2
  %_781 = sub i32 0, %7049
  %gen782 = add i32 %_781, -2
  %_783 = sub i32 0, %7049
  %gen784 = add i32 %_783, -2
  %7050 = add i32 %7049, -2
  %7051 = icmp ne i32 %7050, -4
  br label %originalBB711

originalBB788alteredBB:                           ; preds = %originalBB788, %2010
  br label %originalBB788

originalBB792alteredBB:                           ; preds = %originalBB792, %2027
  %7052 = getelementptr inbounds i8, i8* %1986, i64 %1988, !dbg !2036
  %7053 = load i8, i8* %7052, align 1, !dbg !2036
  %7054 = sext i8 %7053 to i32, !dbg !2036
  %7055 = icmp eq i32 %7054, 63, !dbg !2039
  br label %originalBB792

originalBB796alteredBB:                           ; preds = %originalBB796, %2048
  %7056 = load i8*, i8** %21, align 8, !dbg !2041
  %7057 = load i64, i64* %28, align 8, !dbg !2042
  %_797 = sub i64 %7057, 2
  %gen798 = mul i64 %_797, 2
  %_799 = shl i64 %7057, 2
  %_800 = sub i64 0, %7057
  %gen801 = add i64 %_800, 2
  %7058 = add i64 %7057, 2, !dbg !2043
  %7059 = getelementptr inbounds i8, i8* %7056, i64 %7058, !dbg !2041
  %7060 = load i8, i8* %7059, align 1, !dbg !2041
  %7061 = sext i8 %7060 to i32, !dbg !2041
  br label %originalBB796

originalBB805alteredBB:                           ; preds = %originalBB805, %2071
  %7062 = load i8, i8* %35, align 1, !dbg !2045
  %7063 = trunc i8 %7062 to i1, !dbg !2045
  br label %originalBB805

originalBB809alteredBB:                           ; preds = %originalBB809, %2090
  br label %originalBB809

originalBB813alteredBB:                           ; preds = %originalBB813, %2107
  %7064 = load i8*, i8** %21, align 8, !dbg !2050
  %7065 = load i64, i64* %28, align 8, !dbg !2051
  %_814 = shl i64 %7065, 2
  %_815 = shl i64 %7065, 2
  %7066 = add i64 %7065, 2, !dbg !2052
  %7067 = getelementptr inbounds i8, i8* %7064, i64 %7066, !dbg !2050
  %7068 = load i8, i8* %7067, align 1, !dbg !2050
  store i8 %7068, i8* %39, align 1, !dbg !2053
  %7069 = load i64, i64* %28, align 8, !dbg !2054
  %_816 = sub i64 0, %7069
  %gen817 = add i64 %_816, 2
  %7070 = add i64 %7069, 2, !dbg !2054
  store i64 %7070, i64* %28, align 8, !dbg !2054
  br label %originalBB813

originalBB821alteredBB:                           ; preds = %originalBB821, %2135
  %7071 = load i8*, i8** %19, align 8, !dbg !2056
  %7072 = load i64, i64* %29, align 8, !dbg !2056
  %7073 = getelementptr inbounds i8, i8* %7071, i64 %7072, !dbg !2056
  store i8 63, i8* %7073, align 1, !dbg !2056
  br label %originalBB821

originalBB825alteredBB:                           ; preds = %originalBB825, %2155
  %7074 = load i64, i64* %29, align 8, !dbg !2059
  %_826 = shl i64 %7074, 1
  %_827 = sub i64 0, %7074
  %gen828 = add i64 %_827, 1
  %_829 = sub i64 %7074, 1
  %gen830 = mul i64 %_829, 1
  %_831 = sub i64 0, %7074
  %gen832 = add i64 %_831, 1
  %_833 = sub i64 0, %7074
  %gen834 = add i64 %_833, 1
  %7075 = add i64 %7074, 1, !dbg !2059
  store i64 %7075, i64* %29, align 8, !dbg !2059
  br label %originalBB825

originalBB838alteredBB:                           ; preds = %originalBB838, %2174
  br label %originalBB838

originalBB842alteredBB:                           ; preds = %originalBB842, %2191
  %7076 = load i64, i64* %29, align 8, !dbg !2061
  %7077 = load i64, i64* %20, align 8, !dbg !2061
  %7078 = icmp ult i64 %7076, %7077, !dbg !2061
  br label %originalBB842

originalBB846alteredBB:                           ; preds = %originalBB846, %2211
  %7079 = load i8*, i8** %19, align 8, !dbg !2061
  %7080 = load i64, i64* %29, align 8, !dbg !2061
  %7081 = getelementptr inbounds i8, i8* %7079, i64 %7080, !dbg !2061
  store i8 34, i8* %7081, align 1, !dbg !2061
  br label %originalBB846

originalBB850alteredBB:                           ; preds = %originalBB850, %2231
  %7082 = load i64, i64* %29, align 8, !dbg !2064
  %_851 = shl i64 %7082, 1
  %_852 = sub i64 %7082, 1
  %gen853 = mul i64 %_852, 1
  %7083 = add i64 %7082, 1, !dbg !2064
  %7084 = trunc i64 1 to i32
  %_854 = sub i32 0, %7084
  %gen855 = add i32 %_854, -5
  %_856 = sub i32 %7084, -5
  %gen857 = mul i32 %_856, -5
  %_858 = sub i32 %7084, -5
  %gen859 = mul i32 %_858, -5
  %_860 = shl i32 %7084, -5
  %_861 = sub i32 %7084, -5
  %gen862 = mul i32 %_861, -5
  %7085 = mul i32 %7084, -5
  %_863 = sub i32 %7085, -5
  %gen864 = mul i32 %_863, -5
  %_865 = sub i32 0, %7085
  %gen866 = add i32 %_865, -5
  %_867 = sub i32 0, %7085
  %gen868 = add i32 %_867, -5
  %_869 = sub i32 0, %7085
  %gen870 = add i32 %_869, -5
  %_871 = shl i32 %7085, -5
  %_872 = shl i32 %7085, -5
  %_873 = sub i32 0, %7085
  %gen874 = add i32 %_873, -5
  %_875 = sub i32 0, %7085
  %gen876 = add i32 %_875, -5
  %7086 = add i32 %7085, -5
  %_877 = shl i32 %7086, %7086
  %_878 = sub i32 %7086, %7086
  %gen879 = mul i32 %_878, %7086
  %_880 = sub i32 %7086, %7086
  %gen881 = mul i32 %_880, %7086
  %_882 = shl i32 %7086, %7086
  %_883 = sub i32 %7086, %7086
  %gen884 = mul i32 %_883, %7086
  %7087 = mul i32 %7086, %7086
  %_885 = sub i32 0, %7087
  %gen886 = add i32 %_885, %7086
  %_887 = shl i32 %7087, %7086
  %_888 = sub i32 %7087, %7086
  %gen889 = mul i32 %_888, %7086
  %7088 = sub i32 %7087, %7086
  %_890 = sub i32 %7088, 2
  %gen891 = mul i32 %_890, 2
  %_892 = sub i32 %7088, 2
  %gen893 = mul i32 %_892, 2
  %7089 = srem i32 %7088, 2
  %_894 = sub i32 %7089, 5
  %gen895 = mul i32 %_894, 5
  %7090 = mul i32 %7089, 5
  %_896 = shl i32 %7090, 2
  %_897 = sub i32 %7090, 2
  %gen898 = mul i32 %_897, 2
  %_899 = sub i32 0, %7090
  %gen900 = add i32 %_899, 2
  %_901 = sub i32 %7090, 2
  %gen902 = mul i32 %_901, 2
  %_903 = shl i32 %7090, 2
  %_904 = shl i32 %7090, 2
  %7091 = add i32 %7090, 2
  %7092 = icmp eq i32 %7091, 2
  br label %originalBB850

originalBB908alteredBB:                           ; preds = %originalBB908, %2259
  br label %originalBB908

originalBB912alteredBB:                           ; preds = %originalBB912, %2276
  store i64 %2241, i64* %29, align 8, !dbg !2064
  br label %originalBB912

originalBB916alteredBB:                           ; preds = %originalBB916, %2293
  br label %originalBB916

originalBB920alteredBB:                           ; preds = %originalBB920, %2310
  %7093 = load i64, i64* %29, align 8, !dbg !2066
  %7094 = load i64, i64* %20, align 8, !dbg !2066
  %7095 = icmp ult i64 %7093, %7094, !dbg !2066
  br label %originalBB920

originalBB924alteredBB:                           ; preds = %originalBB924, %2330
  %7096 = load i8*, i8** %19, align 8, !dbg !2066
  %7097 = load i64, i64* %29, align 8, !dbg !2066
  %7098 = getelementptr inbounds i8, i8* %7096, i64 %7097, !dbg !2066
  store i8 34, i8* %7098, align 1, !dbg !2066
  br label %originalBB924

originalBB928alteredBB:                           ; preds = %originalBB928, %2350
  %7099 = load i64, i64* %29, align 8, !dbg !2069
  %_929 = sub i64 0, %7099
  %gen930 = add i64 %_929, 1
  %_931 = shl i64 %7099, 1
  %_932 = sub i64 0, %7099
  %gen933 = add i64 %_932, 1
  %_934 = sub i64 %7099, 1
  %gen935 = mul i64 %_934, 1
  %7100 = add i64 %7099, 1, !dbg !2069
  store i64 %7100, i64* %29, align 8, !dbg !2069
  br label %originalBB928

originalBB939alteredBB:                           ; preds = %originalBB939, %2370
  %7101 = load i64, i64* %29, align 8, !dbg !2071
  %7102 = load i64, i64* %20, align 8, !dbg !2071
  %7103 = icmp ult i64 %7101, %7102, !dbg !2071
  br label %originalBB939

originalBB943alteredBB:                           ; preds = %originalBB943, %2390
  %7104 = load i8*, i8** %19, align 8, !dbg !2071
  %7105 = load i64, i64* %29, align 8, !dbg !2071
  %7106 = getelementptr inbounds i8, i8* %7104, i64 %7105, !dbg !2071
  store i8 63, i8* %7106, align 1, !dbg !2071
  br label %originalBB943

originalBB947alteredBB:                           ; preds = %originalBB947, %2410
  %7107 = load i64, i64* %29, align 8, !dbg !2074
  %_948 = shl i64 %7107, 1
  %7108 = add i64 %7107, 1, !dbg !2074
  store i64 %7108, i64* %29, align 8, !dbg !2074
  br label %originalBB947

originalBB952alteredBB:                           ; preds = %originalBB952, %2429
  br label %originalBB952

originalBB956alteredBB:                           ; preds = %originalBB956, %2446
  br label %originalBB956

originalBB960alteredBB:                           ; preds = %originalBB960, %2463
  br label %originalBB960

originalBB964alteredBB:                           ; preds = %originalBB964, %2480
  br label %originalBB964

originalBB968alteredBB:                           ; preds = %originalBB968, %2497
  br label %originalBB968

originalBB972alteredBB:                           ; preds = %originalBB972, %2514
  br label %originalBB972

originalBB976alteredBB:                           ; preds = %originalBB976, %2531
  store i8 97, i8* %40, align 1, !dbg !2081
  br label %originalBB976

originalBB980alteredBB:                           ; preds = %originalBB980, %2548
  store i8 98, i8* %40, align 1, !dbg !2083
  br label %originalBB980

originalBB984alteredBB:                           ; preds = %originalBB984, %2565
  store i8 102, i8* %40, align 1, !dbg !2085
  br label %originalBB984

originalBB988alteredBB:                           ; preds = %originalBB988, %2582
  store i8 110, i8* %40, align 1, !dbg !2087
  br label %originalBB988

originalBB992alteredBB:                           ; preds = %originalBB992, %2599
  store i8 114, i8* %40, align 1, !dbg !2089
  br label %originalBB992

originalBB996alteredBB:                           ; preds = %originalBB996, %2616
  store i8 116, i8* %40, align 1, !dbg !2091
  br label %originalBB996

originalBB1000alteredBB:                          ; preds = %originalBB1000, %2633
  store i8 118, i8* %40, align 1, !dbg !2093
  br label %originalBB1000

originalBB1004alteredBB:                          ; preds = %originalBB1004, %2650
  %7109 = load i8, i8* %39, align 1, !dbg !2095
  store i8 %7109, i8* %40, align 1, !dbg !2096
  %7110 = load i32, i32* %23, align 4, !dbg !2097
  %7111 = icmp eq i32 %7110, 2, !dbg !2099
  br label %originalBB1004

originalBB1008alteredBB:                          ; preds = %originalBB1008, %2670
  %7112 = load i8, i8* %35, align 1, !dbg !2101
  %7113 = trunc i8 %7112 to i1, !dbg !2101
  br label %originalBB1008

originalBB1012alteredBB:                          ; preds = %originalBB1012, %2689
  br label %originalBB1012

originalBB1016alteredBB:                          ; preds = %originalBB1016, %2707
  %7114 = load i8, i8* %33, align 1, !dbg !2107
  %7115 = trunc i8 %7114 to i1, !dbg !2107
  br label %originalBB1016

originalBB1020alteredBB:                          ; preds = %originalBB1020, %2726
  %7116 = load i8, i8* %35, align 1, !dbg !2110
  %7117 = trunc i8 %7116 to i1, !dbg !2110
  br label %originalBB1020

originalBB1024alteredBB:                          ; preds = %originalBB1024, %2748
  br label %originalBB1024

originalBB1028alteredBB:                          ; preds = %originalBB1028, %2765
  br label %originalBB1028

originalBB1032alteredBB:                          ; preds = %originalBB1032, %2785
  %7118 = load i8, i8* %35, align 1, !dbg !2121
  %7119 = trunc i8 %7118 to i1, !dbg !2121
  br label %originalBB1032

originalBB1036alteredBB:                          ; preds = %originalBB1036, %2804
  br label %originalBB1036

originalBB1040alteredBB:                          ; preds = %originalBB1040, %2821
  br label %originalBB1040

originalBB1044alteredBB:                          ; preds = %originalBB1044, %2838
  %7120 = load i8, i8* %33, align 1, !dbg !2126
  %7121 = trunc i8 %7120 to i1, !dbg !2126
  br label %originalBB1044

originalBB1048alteredBB:                          ; preds = %originalBB1048, %2859
  br label %originalBB1048

originalBB1052alteredBB:                          ; preds = %originalBB1052, %2879
  %7122 = load i8*, i8** %21, align 8, !dbg !2138
  %7123 = getelementptr inbounds i8, i8* %7122, i64 1, !dbg !2138
  %7124 = load i8, i8* %7123, align 1, !dbg !2138
  %7125 = sext i8 %7124 to i32, !dbg !2138
  %7126 = icmp eq i32 %7125, 0, !dbg !2139
  br label %originalBB1052

originalBB1056alteredBB:                          ; preds = %originalBB1056, %2901
  %7127 = load i64, i64* %22, align 8, !dbg !2140
  %7128 = icmp eq i64 %7127, 1, !dbg !2141
  br label %originalBB1056

originalBB1060alteredBB:                          ; preds = %originalBB1060, %2920
  br label %originalBB1060

originalBB1064alteredBB:                          ; preds = %originalBB1064, %2937
  br label %originalBB1064

originalBB1068alteredBB:                          ; preds = %originalBB1068, %2954
  %7129 = load i64, i64* %28, align 8, !dbg !2144
  %7130 = icmp ne i64 %7129, 0, !dbg !2146
  br label %originalBB1068

originalBB1072alteredBB:                          ; preds = %originalBB1072, %2973
  br label %originalBB1072

originalBB1076alteredBB:                          ; preds = %originalBB1076, %2990
  br label %originalBB1076

originalBB1080alteredBB:                          ; preds = %originalBB1080, %3007
  store i8 1, i8* %43, align 1, !dbg !2150
  br label %originalBB1080

originalBB1084alteredBB:                          ; preds = %originalBB1084, %3024
  %7131 = load i32, i32* %23, align 4, !dbg !2152
  %7132 = icmp eq i32 %7131, 2, !dbg !2154
  br label %originalBB1084

originalBB1088alteredBB:                          ; preds = %originalBB1088, %3043
  %7133 = load i8, i8* %35, align 1, !dbg !2156
  %7134 = trunc i8 %7133 to i1, !dbg !2156
  br label %originalBB1088

originalBB1092alteredBB:                          ; preds = %originalBB1092, %3062
  br label %originalBB1092

originalBB1096alteredBB:                          ; preds = %originalBB1096, %3079
  br label %originalBB1096

originalBB1100alteredBB:                          ; preds = %originalBB1100, %3096
  store i8 1, i8* %37, align 1, !dbg !2160
  store i8 1, i8* %43, align 1, !dbg !2161
  %7135 = load i32, i32* %23, align 4, !dbg !2162
  %7136 = icmp eq i32 %7135, 2, !dbg !2164
  br label %originalBB1100

originalBB1104alteredBB:                          ; preds = %originalBB1104, %3115
  %7137 = load i8, i8* %35, align 1, !dbg !2166
  %7138 = trunc i8 %7137 to i1, !dbg !2166
  br label %originalBB1104

originalBB1108alteredBB:                          ; preds = %originalBB1108, %3134
  br label %originalBB1108

originalBB1112alteredBB:                          ; preds = %originalBB1112, %3151
  %7139 = load i64, i64* %20, align 8, !dbg !2171
  %7140 = icmp ne i64 %7139, 0, !dbg !2171
  br label %originalBB1112

originalBB1116alteredBB:                          ; preds = %originalBB1116, %3170
  %7141 = load i64, i64* %30, align 8, !dbg !2174
  %7142 = icmp ne i64 %7141, 0, !dbg !2174
  br label %originalBB1116

originalBB1120alteredBB:                          ; preds = %originalBB1120, %3189
  %7143 = load i64, i64* %20, align 8, !dbg !2176
  store i64 %7143, i64* %30, align 8, !dbg !2178
  store i64 0, i64* %20, align 8, !dbg !2179
  br label %originalBB1120

originalBB1124alteredBB:                          ; preds = %originalBB1124, %3207
  br label %originalBB1124

originalBB1128alteredBB:                          ; preds = %originalBB1128, %3224
  %7144 = load i64, i64* %29, align 8, !dbg !2182
  %7145 = load i64, i64* %20, align 8, !dbg !2182
  %7146 = icmp ult i64 %7144, %7145, !dbg !2182
  br label %originalBB1128

originalBB1132alteredBB:                          ; preds = %originalBB1132, %3244
  %7147 = load i8*, i8** %19, align 8, !dbg !2182
  %7148 = load i64, i64* %29, align 8, !dbg !2182
  %7149 = getelementptr inbounds i8, i8* %7147, i64 %7148, !dbg !2182
  store i8 39, i8* %7149, align 1, !dbg !2182
  br label %originalBB1132

originalBB1136alteredBB:                          ; preds = %originalBB1136, %3264
  %7150 = load i64, i64* %29, align 8, !dbg !2185
  %_1137 = sub i64 %7150, 1
  %gen1138 = mul i64 %_1137, 1
  %_1139 = sub i64 %7150, 1
  %gen1140 = mul i64 %_1139, 1
  %7151 = add i64 %7150, 1, !dbg !2185
  store i64 %7151, i64* %29, align 8, !dbg !2185
  br label %originalBB1136

originalBB1144alteredBB:                          ; preds = %originalBB1144, %3283
  br label %originalBB1144

originalBB1148alteredBB:                          ; preds = %originalBB1148, %3300
  %7152 = load i64, i64* %29, align 8, !dbg !2187
  %7153 = load i64, i64* %20, align 8, !dbg !2187
  %7154 = icmp ult i64 %7152, %7153, !dbg !2187
  br label %originalBB1148

originalBB1152alteredBB:                          ; preds = %originalBB1152, %3320
  %7155 = load i8*, i8** %19, align 8, !dbg !2187
  %7156 = load i64, i64* %29, align 8, !dbg !2187
  %7157 = getelementptr inbounds i8, i8* %7155, i64 %7156, !dbg !2187
  store i8 92, i8* %7157, align 1, !dbg !2187
  br label %originalBB1152

originalBB1156alteredBB:                          ; preds = %originalBB1156, %3340
  %7158 = load i64, i64* %29, align 8, !dbg !2190
  %_1157 = sub i64 0, %7158
  %gen1158 = add i64 %_1157, 1
  %_1159 = shl i64 %7158, 1
  %_1160 = sub i64 %7158, 1
  %gen1161 = mul i64 %_1160, 1
  %_1162 = shl i64 %7158, 1
  %_1163 = shl i64 %7158, 1
  %_1164 = sub i64 %7158, 1
  %gen1165 = mul i64 %_1164, 1
  %7159 = add i64 %7158, 1, !dbg !2190
  store i64 %7159, i64* %29, align 8, !dbg !2190
  br label %originalBB1156

originalBB1169alteredBB:                          ; preds = %originalBB1169, %3359
  br label %originalBB1169

originalBB1173alteredBB:                          ; preds = %originalBB1173, %3376
  %7160 = load i64, i64* %29, align 8, !dbg !2192
  %7161 = load i64, i64* %20, align 8, !dbg !2192
  %7162 = icmp ult i64 %7160, %7161, !dbg !2192
  br label %originalBB1173

originalBB1177alteredBB:                          ; preds = %originalBB1177, %3396
  %7163 = load i8*, i8** %19, align 8, !dbg !2192
  %7164 = load i64, i64* %29, align 8, !dbg !2192
  %7165 = getelementptr inbounds i8, i8* %7163, i64 %7164, !dbg !2192
  store i8 39, i8* %7165, align 1, !dbg !2192
  br label %originalBB1177

originalBB1181alteredBB:                          ; preds = %originalBB1181, %3416
  %7166 = load i64, i64* %29, align 8, !dbg !2195
  %_1182 = sub i64 %7166, 1
  %gen1183 = mul i64 %_1182, 1
  %_1184 = shl i64 %7166, 1
  %7167 = add i64 %7166, 1, !dbg !2195
  store i64 %7167, i64* %29, align 8, !dbg !2195
  br label %originalBB1181

originalBB1188alteredBB:                          ; preds = %originalBB1188, %3435
  store i8 0, i8* %36, align 1, !dbg !2196
  br label %originalBB1188

originalBB1192alteredBB:                          ; preds = %originalBB1192, %3452
  br label %originalBB1192

originalBB1196alteredBB:                          ; preds = %originalBB1196, %3469
  store i8 1, i8* %43, align 1, !dbg !2199
  br label %originalBB1196

originalBB1200alteredBB:                          ; preds = %originalBB1200, %3486
  %7168 = load i8, i8* %34, align 1, !dbg !2206
  %7169 = trunc i8 %7168 to i1, !dbg !2206
  br label %originalBB1200

originalBB1204alteredBB:                          ; preds = %originalBB1204, %3505
  store i64 1, i64* %44, align 8, !dbg !2209
  %7170 = call i16** @__ctype_b_loc() #15, !dbg !2211
  %7171 = load i16*, i16** %7170, align 8, !dbg !2211
  %7172 = load i8, i8* %39, align 1, !dbg !2211
  %7173 = zext i8 %7172 to i32, !dbg !2211
  %7174 = sext i32 %7173 to i64, !dbg !2211
  %7175 = getelementptr inbounds i16, i16* %7171, i64 %7174, !dbg !2211
  %7176 = load i16, i16* %7175, align 2, !dbg !2211
  %7177 = zext i16 %7176 to i32, !dbg !2211
  %_1205 = shl i32 %7177, 16384
  %_1206 = shl i32 %7177, 16384
  %_1207 = sub i32 0, %7177
  %gen1208 = add i32 %_1207, 16384
  %_1209 = shl i32 %7177, 16384
  %_1210 = sub i32 0, %7177
  %gen1211 = add i32 %_1210, 16384
  %_1212 = shl i32 %7177, 16384
  %_1213 = shl i32 %7177, 16384
  %_1214 = shl i32 %7177, 16384
  %7178 = and i32 %7177, 16384, !dbg !2211
  %7179 = icmp ne i32 %7178, 0, !dbg !2212
  %7180 = zext i1 %7179 to i8, !dbg !2213
  store i8 %7180, i8* %45, align 1, !dbg !2213
  br label %originalBB1204

originalBB1218alteredBB:                          ; preds = %originalBB1218, %3533
  %7181 = bitcast %struct.__mbstate_t* %46 to i8*, !dbg !2233
  call void @llvm.memset.p0i8.i64(i8* align 4 %7181, i8 0, i64 8, i1 false), !dbg !2233
  store i64 0, i64* %44, align 8, !dbg !2234
  store i8 1, i8* %45, align 1, !dbg !2235
  %7182 = load i64, i64* %22, align 8, !dbg !2236
  %7183 = trunc i64 %7182 to i32
  %_1219 = sub i32 %7183, -2
  %gen1220 = mul i32 %_1219, -2
  %_1221 = sub i32 %7183, -2
  %gen1222 = mul i32 %_1221, -2
  %_1223 = shl i32 %7183, -2
  %_1224 = shl i32 %7183, -2
  %_1225 = sub i32 %7183, -2
  %gen1226 = mul i32 %_1225, -2
  %_1227 = shl i32 %7183, -2
  %7184 = mul i32 %7183, -2
  %_1228 = sub i32 %7184, %7184
  %gen1229 = mul i32 %_1228, %7184
  %_1230 = shl i32 %7184, %7184
  %_1231 = shl i32 %7184, %7184
  %7185 = mul i32 %7184, %7184
  %_1232 = sub i32 0, %7185
  %gen1233 = add i32 %_1232, %7184
  %_1234 = sub i32 %7185, %7184
  %gen1235 = mul i32 %_1234, %7184
  %_1236 = sub i32 0, %7185
  %gen1237 = add i32 %_1236, %7184
  %_1238 = sub i32 0, %7185
  %gen1239 = add i32 %_1238, %7184
  %7186 = sub i32 %7185, %7184
  %_1240 = sub i32 0, %7186
  %gen1241 = add i32 %_1240, 2
  %_1242 = shl i32 %7186, 2
  %_1243 = sub i32 0, %7186
  %gen1244 = add i32 %_1243, 2
  %_1245 = shl i32 %7186, 2
  %_1246 = sub i32 %7186, 2
  %gen1247 = mul i32 %_1246, 2
  %_1248 = sub i32 %7186, 2
  %gen1249 = mul i32 %_1248, 2
  %7187 = srem i32 %7186, 2
  %7188 = icmp ne i32 %7187, 0
  br label %originalBB1218

originalBB1253alteredBB:                          ; preds = %originalBB1253, %3558
  br label %originalBB1253

originalBB1257alteredBB:                          ; preds = %originalBB1257, %3575
  %7189 = icmp eq i64 %3543, -1, !dbg !2238
  br label %originalBB1257

originalBB1261alteredBB:                          ; preds = %originalBB1261, %3593
  %7190 = load i8*, i8** %21, align 8, !dbg !2240
  %7191 = call i64 @strlen(i8* %7190) #13, !dbg !2241
  store i64 %7191, i64* %22, align 8, !dbg !2242
  br label %originalBB1261

originalBB1265alteredBB:                          ; preds = %originalBB1265, %3612
  br label %originalBB1265

originalBB1269alteredBB:                          ; preds = %originalBB1269, %3629
  %7192 = load i8*, i8** %21, align 8, !dbg !2251
  %7193 = load i64, i64* %28, align 8, !dbg !2252
  %7194 = load i64, i64* %44, align 8, !dbg !2253
  %_1270 = shl i64 %7193, %7194
  %_1271 = shl i64 %7193, %7194
  %_1272 = shl i64 %7193, %7194
  %7195 = add i64 %7193, %7194, !dbg !2254
  %7196 = getelementptr inbounds i8, i8* %7192, i64 %7195, !dbg !2251
  %7197 = load i64, i64* %22, align 8, !dbg !2255
  %7198 = load i64, i64* %28, align 8, !dbg !2256
  %7199 = load i64, i64* %44, align 8, !dbg !2257
  %_1273 = sub i64 %7198, %7199
  %gen1274 = mul i64 %_1273, %7199
  %_1275 = sub i64 0, %7198
  %gen1276 = add i64 %_1275, %7199
  %_1277 = sub i64 0, %7198
  %gen1278 = add i64 %_1277, %7199
  %_1279 = sub i64 %7198, %7199
  %gen1280 = mul i64 %_1279, %7199
  %_1281 = shl i64 %7198, %7199
  %7200 = add i64 %7198, %7199, !dbg !2258
  %_1282 = shl i64 %7197, %7200
  %7201 = sub i64 %7197, %7200, !dbg !2259
  %7202 = call i64 @rpl_mbrtowc(i32* %47, i8* %7196, i64 %7201, %struct.__mbstate_t* %46), !dbg !2260
  store i64 %7202, i64* %48, align 8, !dbg !2250
  %7203 = load i64, i64* %48, align 8, !dbg !2261
  %7204 = icmp eq i64 %7203, 0, !dbg !2263
  br label %originalBB1269

originalBB1286alteredBB:                          ; preds = %originalBB1286, %3659
  br label %originalBB1286

originalBB1290alteredBB:                          ; preds = %originalBB1290, %3680
  %7205 = load i64, i64* %48, align 8, !dbg !2273
  %7206 = icmp eq i64 %7205, -2, !dbg !2275
  br label %originalBB1290

originalBB1294alteredBB:                          ; preds = %originalBB1294, %3700
  %7207 = load i64, i64* %28, align 8, !dbg !2280
  %7208 = load i64, i64* %44, align 8, !dbg !2281
  %_1295 = sub i64 0, %7207
  %gen1296 = add i64 %_1295, %7208
  %_1297 = shl i64 %7207, %7208
  %_1298 = sub i64 0, %7207
  %gen1299 = add i64 %_1298, %7208
  %7209 = add i64 %7207, %7208, !dbg !2282
  %7210 = load i64, i64* %22, align 8, !dbg !2283
  %7211 = icmp ult i64 %7209, %7210, !dbg !2284
  br label %originalBB1294

originalBB1303alteredBB:                          ; preds = %originalBB1303, %3722
  %7212 = load i8*, i8** %21, align 8, !dbg !2286
  %7213 = load i64, i64* %28, align 8, !dbg !2287
  %7214 = load i64, i64* %44, align 8, !dbg !2288
  %7215 = add i64 %7213, %7214, !dbg !2289
  %7216 = getelementptr inbounds i8, i8* %7212, i64 %7215, !dbg !2286
  %7217 = load i8, i8* %7216, align 1, !dbg !2286
  %7218 = sext i8 %7217 to i32, !dbg !2286
  %7219 = icmp ne i32 %7218, 0, !dbg !2285
  br label %originalBB1303

originalBB1307alteredBB:                          ; preds = %originalBB1307, %3747
  br label %originalBB1307

originalBB1311alteredBB:                          ; preds = %originalBB1311, %3765
  %7220 = load i64, i64* %44, align 8, !dbg !2291
  %_1312 = sub i64 %7220, 1
  %gen1313 = mul i64 %_1312, 1
  %_1314 = sub i64 %7220, 1
  %gen1315 = mul i64 %_1314, 1
  %_1316 = sub i64 0, %7220
  %gen1317 = add i64 %_1316, 1
  %_1318 = shl i64 %7220, 1
  %_1319 = shl i64 %7220, 1
  %7221 = add i64 %7220, 1, !dbg !2291
  store i64 %7221, i64* %44, align 8, !dbg !2291
  br label %originalBB1311

originalBB1323alteredBB:                          ; preds = %originalBB1323, %3784
  br label %originalBB1323

originalBB1327alteredBB:                          ; preds = %originalBB1327, %3801
  %7222 = load i8, i8* %35, align 1, !dbg !2294
  %7223 = trunc i8 %7222 to i1, !dbg !2294
  br label %originalBB1327

originalBB1331alteredBB:                          ; preds = %originalBB1331, %3823
  store i64 1, i64* %49, align 8, !dbg !2304
  br label %originalBB1331

originalBB1335alteredBB:                          ; preds = %originalBB1335, %3840
  %7224 = load i64, i64* %49, align 8, !dbg !2307
  %7225 = load i64, i64* %48, align 8, !dbg !2309
  %7226 = icmp ult i64 %7224, %7225, !dbg !2310
  br label %originalBB1335

originalBB1339alteredBB:                          ; preds = %originalBB1339, %3870
  br label %originalBB1339

originalBB1343alteredBB:                          ; preds = %originalBB1343, %3888
  br label %originalBB1343

originalBB1347alteredBB:                          ; preds = %originalBB1347, %3905
  %7227 = load i64, i64* %49, align 8, !dbg !2323
  %_1348 = shl i64 %7227, 1
  %_1349 = sub i64 %7227, 1
  %gen1350 = mul i64 %_1349, 1
  %_1351 = sub i64 %7227, 1
  %gen1352 = mul i64 %_1351, 1
  %_1353 = sub i64 0, %7227
  %gen1354 = add i64 %_1353, 1
  %7228 = add i64 %7227, 1, !dbg !2323
  store i64 %7228, i64* %49, align 8, !dbg !2323
  br label %originalBB1347

originalBB1358alteredBB:                          ; preds = %originalBB1358, %3924
  br label %originalBB1358

originalBB1362alteredBB:                          ; preds = %originalBB1362, %3941
  %7229 = load i32, i32* %47, align 4, !dbg !2328
  %7230 = call i32 @iswprint(i32 %7229) #10, !dbg !2330
  %7231 = icmp ne i32 %7230, 0, !dbg !2330
  br label %originalBB1362

originalBB1366alteredBB:                          ; preds = %originalBB1366, %3961
  store i8 0, i8* %45, align 1, !dbg !2332
  br label %originalBB1366

originalBB1370alteredBB:                          ; preds = %originalBB1370, %3978
  %7232 = load i64, i64* %48, align 8, !dbg !2334
  %7233 = load i64, i64* %44, align 8, !dbg !2335
  %_1371 = sub i64 0, %7233
  %gen1372 = add i64 %_1371, %7232
  %_1373 = shl i64 %7233, %7232
  %_1374 = shl i64 %7233, %7232
  %7234 = add i64 %7233, %7232, !dbg !2335
  store i64 %7234, i64* %44, align 8, !dbg !2335
  br label %originalBB1370

originalBB1378alteredBB:                          ; preds = %originalBB1378, %3998
  br label %originalBB1378

originalBB1382alteredBB:                          ; preds = %originalBB1382, %4015
  br label %originalBB1382

originalBB1386alteredBB:                          ; preds = %originalBB1386, %4032
  br label %originalBB1386

originalBB1390alteredBB:                          ; preds = %originalBB1390, %4049
  %7235 = call i32 @mbsinit(%struct.__mbstate_t* %46) #13, !dbg !2337
  %7236 = icmp ne i32 %7235, 0, !dbg !2338
  %_1391 = shl i1 %7236, true
  %_1392 = sub i1 %7236, true
  %gen1393 = mul i1 %_1392, true
  %_1394 = shl i1 %7236, true
  %_1395 = shl i1 %7236, true
  %7237 = xor i1 %7236, true, !dbg !2338
  br label %originalBB1390

originalBB1399alteredBB:                          ; preds = %originalBB1399, %4069
  br label %originalBB1399

originalBB1403alteredBB:                          ; preds = %originalBB1403, %4086
  %7238 = load i8, i8* %45, align 1, !dbg !2341
  %7239 = trunc i8 %7238 to i1, !dbg !2341
  %7240 = zext i1 %7239 to i8, !dbg !2342
  store i8 %7240, i8* %43, align 1, !dbg !2342
  %7241 = load i64, i64* %44, align 8, !dbg !2343
  %7242 = icmp ult i64 1, %7241, !dbg !2345
  br label %originalBB1403

originalBB1407alteredBB:                          ; preds = %originalBB1407, %4114
  %7243 = load i64, i64* %28, align 8, !dbg !2354
  %7244 = load i64, i64* %44, align 8, !dbg !2355
  %_1408 = sub i64 0, %7243
  %gen1409 = add i64 %_1408, %7244
  %_1410 = sub i64 0, %7243
  %gen1411 = add i64 %_1410, %7244
  %_1412 = shl i64 %7243, %7244
  %_1413 = sub i64 0, %7243
  %gen1414 = add i64 %_1413, %7244
  %_1415 = shl i64 %7243, %7244
  %_1416 = shl i64 %7243, %7244
  %_1417 = sub i64 %7243, %7244
  %gen1418 = mul i64 %_1417, %7244
  %_1419 = sub i64 0, %7243
  %gen1420 = add i64 %_1419, %7244
  %7245 = add i64 %7243, %7244, !dbg !2356
  store i64 %7245, i64* %50, align 8, !dbg !2353
  br label %originalBB1407

originalBB1424alteredBB:                          ; preds = %originalBB1424, %4137
  %7246 = load i8, i8* %45, align 1, !dbg !2364
  %7247 = trunc i8 %7246 to i1, !dbg !2364
  br label %originalBB1424

originalBB1428alteredBB:                          ; preds = %originalBB1428, %4156
  br label %originalBB1428

originalBB1432alteredBB:                          ; preds = %originalBB1432, %4173
  %7248 = load i8, i8* %35, align 1, !dbg !2368
  %7249 = trunc i8 %7248 to i1, !dbg !2368
  br label %originalBB1432

originalBB1436alteredBB:                          ; preds = %originalBB1436, %4192
  br label %originalBB1436

originalBB1440alteredBB:                          ; preds = %originalBB1440, %4209
  store i8 1, i8* %42, align 1, !dbg !2371
  %7250 = load i32, i32* %23, align 4, !dbg !2372
  %7251 = icmp eq i32 %7250, 2, !dbg !2372
  br label %originalBB1440

originalBB1444alteredBB:                          ; preds = %originalBB1444, %4228
  %7252 = load i8, i8* %36, align 1, !dbg !2372
  %7253 = trunc i8 %7252 to i1, !dbg !2372
  br label %originalBB1444

originalBB1448alteredBB:                          ; preds = %originalBB1448, %4247
  br label %originalBB1448

originalBB1452alteredBB:                          ; preds = %originalBB1452, %4264
  %7254 = load i64, i64* %29, align 8, !dbg !2376
  %7255 = load i64, i64* %20, align 8, !dbg !2376
  %7256 = icmp ult i64 %7254, %7255, !dbg !2376
  br label %originalBB1452

originalBB1456alteredBB:                          ; preds = %originalBB1456, %4284
  %7257 = load i8*, i8** %19, align 8, !dbg !2376
  %7258 = load i64, i64* %29, align 8, !dbg !2376
  %7259 = getelementptr inbounds i8, i8* %7257, i64 %7258, !dbg !2376
  store i8 39, i8* %7259, align 1, !dbg !2376
  br label %originalBB1456

originalBB1460alteredBB:                          ; preds = %originalBB1460, %4304
  %7260 = load i64, i64* %29, align 8, !dbg !2379
  %_1461 = sub i64 0, %7260
  %gen1462 = add i64 %_1461, 1
  %_1463 = sub i64 %7260, 1
  %gen1464 = mul i64 %_1463, 1
  %_1465 = shl i64 %7260, 1
  %_1466 = sub i64 0, %7260
  %gen1467 = add i64 %_1466, 1
  %_1468 = sub i64 0, %7260
  %gen1469 = add i64 %_1468, 1
  %7261 = add i64 %7260, 1, !dbg !2379
  store i64 %7261, i64* %29, align 8, !dbg !2379
  br label %originalBB1460

originalBB1473alteredBB:                          ; preds = %originalBB1473, %4323
  br label %originalBB1473

originalBB1477alteredBB:                          ; preds = %originalBB1477, %4340
  %7262 = load i64, i64* %29, align 8, !dbg !2380
  %7263 = load i64, i64* %20, align 8, !dbg !2380
  %7264 = icmp ult i64 %7262, %7263, !dbg !2380
  br label %originalBB1477

originalBB1481alteredBB:                          ; preds = %originalBB1481, %4360
  %7265 = load i8*, i8** %19, align 8, !dbg !2380
  %7266 = load i64, i64* %29, align 8, !dbg !2380
  %7267 = getelementptr inbounds i8, i8* %7265, i64 %7266, !dbg !2380
  store i8 36, i8* %7267, align 1, !dbg !2380
  br label %originalBB1481

originalBB1485alteredBB:                          ; preds = %originalBB1485, %4380
  %7268 = load i64, i64* %29, align 8, !dbg !2383
  %_1486 = sub i64 %7268, 1
  %gen1487 = mul i64 %_1486, 1
  %_1488 = sub i64 %7268, 1
  %gen1489 = mul i64 %_1488, 1
  %_1490 = sub i64 0, %7268
  %gen1491 = add i64 %_1490, 1
  %_1492 = sub i64 %7268, 1
  %gen1493 = mul i64 %_1492, 1
  %_1494 = sub i64 0, %7268
  %gen1495 = add i64 %_1494, 1
  %_1496 = sub i64 0, %7268
  %gen1497 = add i64 %_1496, 1
  %_1498 = shl i64 %7268, 1
  %7269 = add i64 %7268, 1, !dbg !2383
  store i64 %7269, i64* %29, align 8, !dbg !2383
  br label %originalBB1485

originalBB1502alteredBB:                          ; preds = %originalBB1502, %4399
  br label %originalBB1502

originalBB1506alteredBB:                          ; preds = %originalBB1506, %4416
  %7270 = load i64, i64* %29, align 8, !dbg !2384
  %7271 = load i64, i64* %20, align 8, !dbg !2384
  %7272 = icmp ult i64 %7270, %7271, !dbg !2384
  br label %originalBB1506

originalBB1510alteredBB:                          ; preds = %originalBB1510, %4436
  %7273 = load i8*, i8** %19, align 8, !dbg !2384
  %7274 = load i64, i64* %29, align 8, !dbg !2384
  %7275 = getelementptr inbounds i8, i8* %7273, i64 %7274, !dbg !2384
  store i8 39, i8* %7275, align 1, !dbg !2384
  br label %originalBB1510

originalBB1514alteredBB:                          ; preds = %originalBB1514, %4459
  store i8 1, i8* %36, align 1, !dbg !2374
  br label %originalBB1514

originalBB1518alteredBB:                          ; preds = %originalBB1518, %4476
  br label %originalBB1518

originalBB1522alteredBB:                          ; preds = %originalBB1522, %4493
  %7276 = load i64, i64* %29, align 8, !dbg !2388
  %7277 = load i64, i64* %20, align 8, !dbg !2388
  %7278 = icmp ult i64 %7276, %7277, !dbg !2388
  br label %originalBB1522

originalBB1526alteredBB:                          ; preds = %originalBB1526, %4513
  %7279 = load i8*, i8** %19, align 8, !dbg !2388
  %7280 = load i64, i64* %29, align 8, !dbg !2388
  %7281 = getelementptr inbounds i8, i8* %7279, i64 %7280, !dbg !2388
  store i8 92, i8* %7281, align 1, !dbg !2388
  br label %originalBB1526

originalBB1530alteredBB:                          ; preds = %originalBB1530, %4533
  %7282 = load i64, i64* %29, align 8, !dbg !2391
  %_1531 = sub i64 0, %7282
  %gen1532 = add i64 %_1531, 1
  %_1533 = sub i64 %7282, 1
  %gen1534 = mul i64 %_1533, 1
  %_1535 = sub i64 0, %7282
  %gen1536 = add i64 %_1535, 1
  %_1537 = shl i64 %7282, 1
  %_1538 = shl i64 %7282, 1
  %_1539 = sub i64 %7282, 1
  %gen1540 = mul i64 %_1539, 1
  %7283 = add i64 %7282, 1, !dbg !2391
  store i64 %7283, i64* %29, align 8, !dbg !2391
  br label %originalBB1530

originalBB1544alteredBB:                          ; preds = %originalBB1544, %4552
  br label %originalBB1544

originalBB1548alteredBB:                          ; preds = %originalBB1548, %4569
  br label %originalBB1548

originalBB1552alteredBB:                          ; preds = %originalBB1552, %4586
  %7284 = load i64, i64* %29, align 8, !dbg !2393
  %7285 = load i64, i64* %20, align 8, !dbg !2393
  %7286 = icmp ult i64 %7284, %7285, !dbg !2393
  br label %originalBB1552

originalBB1556alteredBB:                          ; preds = %originalBB1556, %4606
  %7287 = load i8, i8* %39, align 1, !dbg !2393
  %7288 = zext i8 %7287 to i32, !dbg !2393
  %_1557 = sub i32 0, %7288
  %gen1558 = add i32 %_1557, 6
  %_1559 = shl i32 %7288, 6
  %_1560 = shl i32 %7288, 6
  %_1561 = sub i32 0, %7288
  %gen1562 = add i32 %_1561, 6
  %_1563 = sub i32 %7288, 6
  %gen1564 = mul i32 %_1563, 6
  %_1565 = sub i32 %7288, 6
  %gen1566 = mul i32 %_1565, 6
  %_1567 = sub i32 %7288, 6
  %gen1568 = mul i32 %_1567, 6
  %_1569 = shl i32 %7288, 6
  %_1570 = sub i32 %7288, 6
  %gen1571 = mul i32 %_1570, 6
  %7289 = ashr i32 %7288, 6, !dbg !2393
  %_1572 = sub i32 48, %7289
  %gen1573 = mul i32 %_1572, %7289
  %_1574 = shl i32 48, %7289
  %_1575 = sub i32 48, %7289
  %gen1576 = mul i32 %_1575, %7289
  %_1577 = sub i32 0, 48
  %gen1578 = add i32 %_1577, %7289
  %_1579 = sub i32 0, 48
  %gen1580 = add i32 %_1579, %7289
  %7290 = add nsw i32 48, %7289, !dbg !2393
  %7291 = trunc i32 %7290 to i8, !dbg !2393
  %7292 = load i8*, i8** %19, align 8, !dbg !2393
  %7293 = load i64, i64* %29, align 8, !dbg !2393
  %7294 = getelementptr inbounds i8, i8* %7292, i64 %7293, !dbg !2393
  store i8 %7291, i8* %7294, align 1, !dbg !2393
  br label %originalBB1556

originalBB1584alteredBB:                          ; preds = %originalBB1584, %4631
  %7295 = load i64, i64* %29, align 8, !dbg !2396
  %_1585 = shl i64 %7295, 1
  %_1586 = sub i64 %7295, 1
  %gen1587 = mul i64 %_1586, 1
  %_1588 = sub i64 %7295, 1
  %gen1589 = mul i64 %_1588, 1
  %7296 = add i64 %7295, 1, !dbg !2396
  store i64 %7296, i64* %29, align 8, !dbg !2396
  br label %originalBB1584

originalBB1593alteredBB:                          ; preds = %originalBB1593, %4650
  br label %originalBB1593

originalBB1597alteredBB:                          ; preds = %originalBB1597, %4671
  %7297 = load i8, i8* %39, align 1, !dbg !2398
  %7298 = zext i8 %7297 to i32, !dbg !2398
  %_1598 = sub i32 %7298, 3
  %gen1599 = mul i32 %_1598, 3
  %_1600 = sub i32 %7298, 3
  %gen1601 = mul i32 %_1600, 3
  %_1602 = sub i32 %7298, 3
  %gen1603 = mul i32 %_1602, 3
  %7299 = ashr i32 %7298, 3, !dbg !2398
  %_1604 = sub i32 0, %7299
  %gen1605 = add i32 %_1604, 7
  %_1606 = sub i32 %7299, 7
  %gen1607 = mul i32 %_1606, 7
  %_1608 = sub i32 0, %7299
  %gen1609 = add i32 %_1608, 7
  %_1610 = sub i32 %7299, 7
  %gen1611 = mul i32 %_1610, 7
  %_1612 = sub i32 0, %7299
  %gen1613 = add i32 %_1612, 7
  %_1614 = sub i32 0, %7299
  %gen1615 = add i32 %_1614, 7
  %7300 = and i32 %7299, 7, !dbg !2398
  %_1616 = sub i32 48, %7300
  %gen1617 = mul i32 %_1616, %7300
  %_1618 = sub i32 48, %7300
  %gen1619 = mul i32 %_1618, %7300
  %_1620 = sub i32 0, 48
  %gen1621 = add i32 %_1620, %7300
  %_1622 = sub i32 0, 48
  %gen1623 = add i32 %_1622, %7300
  %_1624 = shl i32 48, %7300
  %_1625 = sub i32 48, %7300
  %gen1626 = mul i32 %_1625, %7300
  %_1627 = sub i32 0, 48
  %gen1628 = add i32 %_1627, %7300
  %7301 = add nsw i32 48, %7300, !dbg !2398
  %7302 = trunc i32 %7301 to i8, !dbg !2398
  %7303 = load i8*, i8** %19, align 8, !dbg !2398
  %7304 = load i64, i64* %29, align 8, !dbg !2398
  %7305 = getelementptr inbounds i8, i8* %7303, i64 %7304, !dbg !2398
  store i8 %7302, i8* %7305, align 1, !dbg !2398
  br label %originalBB1597

originalBB1632alteredBB:                          ; preds = %originalBB1632, %4697
  %7306 = load i64, i64* %29, align 8, !dbg !2401
  %_1633 = sub i64 0, %7306
  %gen1634 = add i64 %_1633, 1
  %_1635 = shl i64 %7306, 1
  %_1636 = sub i64 0, %7306
  %gen1637 = add i64 %_1636, 1
  %_1638 = sub i64 0, %7306
  %gen1639 = add i64 %_1638, 1
  %_1640 = sub i64 0, %7306
  %gen1641 = add i64 %_1640, 1
  %_1642 = sub i64 0, %7306
  %gen1643 = add i64 %_1642, 1
  %7307 = add i64 %7306, 1, !dbg !2401
  store i64 %7307, i64* %29, align 8, !dbg !2401
  br label %originalBB1632

originalBB1647alteredBB:                          ; preds = %originalBB1647, %4716
  %7308 = load i8, i8* %39, align 1, !dbg !2402
  %7309 = zext i8 %7308 to i32, !dbg !2402
  %7310 = and i32 %7309, 7, !dbg !2403
  %_1648 = sub i32 0, 48
  %gen1649 = add i32 %_1648, %7310
  %_1650 = sub i32 0, 48
  %gen1651 = add i32 %_1650, %7310
  %_1652 = sub i32 0, 48
  %gen1653 = add i32 %_1652, %7310
  %_1654 = shl i32 48, %7310
  %_1655 = sub i32 0, 48
  %gen1656 = add i32 %_1655, %7310
  %_1657 = sub i32 0, 48
  %gen1658 = add i32 %_1657, %7310
  %_1659 = shl i32 48, %7310
  %7311 = add nsw i32 48, %7310, !dbg !2404
  %7312 = trunc i32 %7311 to i8, !dbg !2405
  store i8 %7312, i8* %39, align 1, !dbg !2406
  br label %originalBB1647

originalBB1663alteredBB:                          ; preds = %originalBB1663, %4741
  br label %originalBB1663

originalBB1667alteredBB:                          ; preds = %originalBB1667, %4758
  %7313 = load i64, i64* %29, align 8, !dbg !2413
  %7314 = load i64, i64* %20, align 8, !dbg !2413
  %7315 = icmp ult i64 %7313, %7314, !dbg !2413
  br label %originalBB1667

originalBB1671alteredBB:                          ; preds = %originalBB1671, %4778
  %7316 = load i8*, i8** %19, align 8, !dbg !2413
  %7317 = load i64, i64* %29, align 8, !dbg !2413
  %7318 = getelementptr inbounds i8, i8* %7316, i64 %7317, !dbg !2413
  store i8 92, i8* %7318, align 1, !dbg !2413
  br label %originalBB1671

originalBB1675alteredBB:                          ; preds = %originalBB1675, %4798
  %7319 = load i64, i64* %29, align 8, !dbg !2416
  %_1676 = sub i64 %7319, 1
  %gen1677 = mul i64 %_1676, 1
  %7320 = add i64 %7319, 1, !dbg !2416
  store i64 %7320, i64* %29, align 8, !dbg !2416
  br label %originalBB1675

originalBB1681alteredBB:                          ; preds = %originalBB1681, %4817
  store i8 0, i8* %41, align 1, !dbg !2417
  br label %originalBB1681

originalBB1685alteredBB:                          ; preds = %originalBB1685, %4834
  br label %originalBB1685

originalBB1689alteredBB:                          ; preds = %originalBB1689, %4851
  %7321 = load i64, i64* %50, align 8, !dbg !2419
  %7322 = load i64, i64* %28, align 8, !dbg !2421
  %_1690 = sub i64 %7322, 1
  %gen1691 = mul i64 %_1690, 1
  %7323 = add i64 %7322, 1, !dbg !2422
  %7324 = icmp ule i64 %7321, %7323, !dbg !2423
  br label %originalBB1689

originalBB1695alteredBB:                          ; preds = %originalBB1695, %4872
  br label %originalBB1695

originalBB1699alteredBB:                          ; preds = %originalBB1699, %4889
  br label %originalBB1699

originalBB1703alteredBB:                          ; preds = %originalBB1703, %4906
  %7325 = load i8, i8* %36, align 1, !dbg !2427
  %7326 = trunc i8 %7325 to i1, !dbg !2427
  br label %originalBB1703

originalBB1707alteredBB:                          ; preds = %originalBB1707, %4925
  %7327 = load i8, i8* %42, align 1, !dbg !2427
  %7328 = trunc i8 %7327 to i1, !dbg !2427
  br label %originalBB1707

originalBB1711alteredBB:                          ; preds = %originalBB1711, %4944
  br label %originalBB1711

originalBB1715alteredBB:                          ; preds = %originalBB1715, %4961
  %7329 = load i64, i64* %29, align 8, !dbg !2433
  %7330 = load i64, i64* %20, align 8, !dbg !2433
  %7331 = icmp ult i64 %7329, %7330, !dbg !2433
  br label %originalBB1715

originalBB1719alteredBB:                          ; preds = %originalBB1719, %4981
  %7332 = load i8*, i8** %19, align 8, !dbg !2433
  %7333 = load i64, i64* %29, align 8, !dbg !2433
  %7334 = getelementptr inbounds i8, i8* %7332, i64 %7333, !dbg !2433
  store i8 39, i8* %7334, align 1, !dbg !2433
  br label %originalBB1719

originalBB1723alteredBB:                          ; preds = %originalBB1723, %5004
  br label %originalBB1723

originalBB1727alteredBB:                          ; preds = %originalBB1727, %5021
  %7335 = load i64, i64* %29, align 8, !dbg !2437
  %7336 = load i64, i64* %20, align 8, !dbg !2437
  %7337 = icmp ult i64 %7335, %7336, !dbg !2437
  br label %originalBB1727

originalBB1731alteredBB:                          ; preds = %originalBB1731, %5041
  %7338 = load i8*, i8** %19, align 8, !dbg !2437
  %7339 = load i64, i64* %29, align 8, !dbg !2437
  %7340 = getelementptr inbounds i8, i8* %7338, i64 %7339, !dbg !2437
  store i8 39, i8* %7340, align 1, !dbg !2437
  br label %originalBB1731

originalBB1735alteredBB:                          ; preds = %originalBB1735, %5061
  %7341 = load i64, i64* %29, align 8, !dbg !2440
  %_1736 = sub i64 0, %7341
  %gen1737 = add i64 %_1736, 1
  %_1738 = sub i64 0, %7341
  %gen1739 = add i64 %_1738, 1
  %_1740 = sub i64 %7341, 1
  %gen1741 = mul i64 %_1740, 1
  %_1742 = sub i64 0, %7341
  %gen1743 = add i64 %_1742, 1
  %_1744 = sub i64 %7341, 1
  %gen1745 = mul i64 %_1744, 1
  %7342 = add i64 %7341, 1, !dbg !2440
  store i64 %7342, i64* %29, align 8, !dbg !2440
  br label %originalBB1735

originalBB1749alteredBB:                          ; preds = %originalBB1749, %5080
  store i8 0, i8* %36, align 1, !dbg !2431
  br label %originalBB1749

originalBB1753alteredBB:                          ; preds = %originalBB1753, %5097
  br label %originalBB1753

originalBB1757alteredBB:                          ; preds = %originalBB1757, %5114
  br label %originalBB1757

originalBB1761alteredBB:                          ; preds = %originalBB1761, %5131
  %7343 = load i64, i64* %29, align 8, !dbg !2442
  %7344 = load i64, i64* %20, align 8, !dbg !2442
  %7345 = icmp ult i64 %7343, %7344, !dbg !2442
  br label %originalBB1761

originalBB1765alteredBB:                          ; preds = %originalBB1765, %5151
  %7346 = load i8, i8* %39, align 1, !dbg !2442
  %7347 = load i8*, i8** %19, align 8, !dbg !2442
  %7348 = load i64, i64* %29, align 8, !dbg !2442
  %7349 = getelementptr inbounds i8, i8* %7347, i64 %7348, !dbg !2442
  store i8 %7346, i8* %7349, align 1, !dbg !2442
  br label %originalBB1765

originalBB1769alteredBB:                          ; preds = %originalBB1769, %5172
  %7350 = load i64, i64* %29, align 8, !dbg !2445
  %_1770 = shl i64 %7350, 1
  %7351 = add i64 %7350, 1, !dbg !2445
  store i64 %7351, i64* %29, align 8, !dbg !2445
  br label %originalBB1769

originalBB1774alteredBB:                          ; preds = %originalBB1774, %5191
  %7352 = load i8*, i8** %21, align 8, !dbg !2446
  %7353 = load i64, i64* %28, align 8, !dbg !2447
  %_1775 = shl i64 %7353, 1
  %_1776 = sub i64 0, %7353
  %gen1777 = add i64 %_1776, 1
  %_1778 = sub i64 0, %7353
  %gen1779 = add i64 %_1778, 1
  %_1780 = sub i64 %7353, 1
  %gen1781 = mul i64 %_1780, 1
  %_1782 = sub i64 %7353, 1
  %gen1783 = mul i64 %_1782, 1
  %_1784 = shl i64 %7353, 1
  %_1785 = sub i64 %7353, 1
  %gen1786 = mul i64 %_1785, 1
  %_1787 = shl i64 %7353, 1
  %7354 = add i64 %7353, 1, !dbg !2447
  store i64 %7354, i64* %28, align 8, !dbg !2447
  %7355 = getelementptr inbounds i8, i8* %7352, i64 %7354, !dbg !2446
  %7356 = load i8, i8* %7355, align 1, !dbg !2446
  store i8 %7356, i8* %39, align 1, !dbg !2448
  br label %originalBB1774

originalBB1791alteredBB:                          ; preds = %originalBB1791, %5213
  br label %originalBB1791

originalBB1795alteredBB:                          ; preds = %originalBB1795, %5230
  br label %originalBB1795

originalBB1799alteredBB:                          ; preds = %originalBB1799, %5247
  %7357 = load i8, i8* %33, align 1, !dbg !2455
  %7358 = trunc i8 %7357 to i1, !dbg !2455
  br label %originalBB1799

originalBB1803alteredBB:                          ; preds = %originalBB1803, %5266
  %7359 = load i32, i32* %23, align 4, !dbg !2458
  %7360 = icmp ne i32 %7359, 2, !dbg !2459
  br label %originalBB1803

originalBB1807alteredBB:                          ; preds = %originalBB1807, %5285
  %7361 = load i8, i8* %35, align 1, !dbg !2461
  %7362 = trunc i8 %7361 to i1, !dbg !2461
  br label %originalBB1807

originalBB1811alteredBB:                          ; preds = %originalBB1811, %5307
  %7363 = load i32*, i32** %25, align 8, !dbg !2465
  %7364 = load i8, i8* %39, align 1, !dbg !2466
  %7365 = zext i8 %7364 to i64, !dbg !2466
  %_1812 = shl i64 %7365, 32
  %_1813 = sub i64 %7365, 32
  %gen1814 = mul i64 %_1813, 32
  %_1815 = shl i64 %7365, 32
  %_1816 = sub i64 %7365, 32
  %gen1817 = mul i64 %_1816, 32
  %_1818 = shl i64 %7365, 32
  %7366 = udiv i64 %7365, 32, !dbg !2467
  %7367 = getelementptr inbounds i32, i32* %7363, i64 %7366, !dbg !2465
  %7368 = load i32, i32* %7367, align 4, !dbg !2465
  %7369 = load i8, i8* %39, align 1, !dbg !2468
  %7370 = zext i8 %7369 to i64, !dbg !2468
  %_1819 = sub i64 0, %7370
  %gen1820 = add i64 %_1819, 32
  %_1821 = sub i64 0, %7370
  %gen1822 = add i64 %_1821, 32
  %_1823 = shl i64 %7370, 32
  %_1824 = sub i64 %7370, 32
  %gen1825 = mul i64 %_1824, 32
  %_1826 = sub i64 %7370, 32
  %gen1827 = mul i64 %_1826, 32
  %_1828 = shl i64 %7370, 32
  %_1829 = shl i64 %7370, 32
  %7371 = urem i64 %7370, 32, !dbg !2469
  %7372 = trunc i64 %7371 to i32, !dbg !2470
  %_1830 = sub i32 %7368, %7372
  %gen1831 = mul i32 %_1830, %7372
  %_1832 = sub i32 0, %7368
  %gen1833 = add i32 %_1832, %7372
  %_1834 = sub i32 0, %7368
  %gen1835 = add i32 %_1834, %7372
  %_1836 = shl i32 %7368, %7372
  %_1837 = sub i32 0, %7368
  %gen1838 = add i32 %_1837, %7372
  %_1839 = sub i32 %7368, %7372
  %gen1840 = mul i32 %_1839, %7372
  %_1841 = shl i32 %7368, %7372
  %_1842 = sub i32 0, %7368
  %gen1843 = add i32 %_1842, %7372
  %_1844 = shl i32 %7368, %7372
  %7373 = lshr i32 %7368, %7372, !dbg !2470
  %_1845 = shl i32 %7373, 1
  %_1846 = sub i32 0, %7373
  %gen1847 = add i32 %_1846, 1
  %_1848 = sub i32 0, %7373
  %gen1849 = add i32 %_1848, 1
  %_1850 = shl i32 %7373, 1
  %7374 = and i32 %7373, 1, !dbg !2471
  %7375 = icmp ne i32 %7374, 0, !dbg !2471
  br label %originalBB1811

originalBB1854alteredBB:                          ; preds = %originalBB1854, %5340
  br label %originalBB1854

originalBB1858alteredBB:                          ; preds = %originalBB1858, %5357
  br label %originalBB1858

originalBB1862alteredBB:                          ; preds = %originalBB1862, %5374
  br label %originalBB1862

originalBB1866alteredBB:                          ; preds = %originalBB1866, %5391
  %7376 = load i8, i8* %35, align 1, !dbg !2479
  %7377 = trunc i8 %7376 to i1, !dbg !2479
  br label %originalBB1866

originalBB1870alteredBB:                          ; preds = %originalBB1870, %5410
  br label %originalBB1870

originalBB1874alteredBB:                          ; preds = %originalBB1874, %5427
  store i8 1, i8* %42, align 1, !dbg !2482
  %7378 = load i32, i32* %23, align 4, !dbg !2483
  %7379 = icmp eq i32 %7378, 2, !dbg !2483
  br label %originalBB1874

originalBB1878alteredBB:                          ; preds = %originalBB1878, %5446
  %7380 = load i8, i8* %36, align 1, !dbg !2483
  %7381 = trunc i8 %7380 to i1, !dbg !2483
  br label %originalBB1878

originalBB1882alteredBB:                          ; preds = %originalBB1882, %5465
  br label %originalBB1882

originalBB1886alteredBB:                          ; preds = %originalBB1886, %5482
  %7382 = load i64, i64* %29, align 8, !dbg !2487
  %7383 = load i64, i64* %20, align 8, !dbg !2487
  %7384 = icmp ult i64 %7382, %7383, !dbg !2487
  br label %originalBB1886

originalBB1890alteredBB:                          ; preds = %originalBB1890, %5502
  %7385 = load i8*, i8** %19, align 8, !dbg !2487
  %7386 = load i64, i64* %29, align 8, !dbg !2487
  %7387 = getelementptr inbounds i8, i8* %7385, i64 %7386, !dbg !2487
  store i8 39, i8* %7387, align 1, !dbg !2487
  br label %originalBB1890

originalBB1894alteredBB:                          ; preds = %originalBB1894, %5522
  %7388 = load i64, i64* %29, align 8, !dbg !2490
  %_1895 = shl i64 %7388, 1
  %_1896 = sub i64 0, %7388
  %gen1897 = add i64 %_1896, 1
  %_1898 = sub i64 %7388, 1
  %gen1899 = mul i64 %_1898, 1
  %_1900 = shl i64 %7388, 1
  %_1901 = sub i64 0, %7388
  %gen1902 = add i64 %_1901, 1
  %7389 = add i64 %7388, 1, !dbg !2490
  store i64 %7389, i64* %29, align 8, !dbg !2490
  br label %originalBB1894

originalBB1906alteredBB:                          ; preds = %originalBB1906, %5541
  br label %originalBB1906

originalBB1910alteredBB:                          ; preds = %originalBB1910, %5558
  %7390 = load i64, i64* %29, align 8, !dbg !2491
  %7391 = load i64, i64* %20, align 8, !dbg !2491
  %7392 = icmp ult i64 %7390, %7391, !dbg !2491
  br label %originalBB1910

originalBB1914alteredBB:                          ; preds = %originalBB1914, %5578
  %7393 = load i8*, i8** %19, align 8, !dbg !2491
  %7394 = load i64, i64* %29, align 8, !dbg !2491
  %7395 = getelementptr inbounds i8, i8* %7393, i64 %7394, !dbg !2491
  store i8 36, i8* %7395, align 1, !dbg !2491
  br label %originalBB1914

originalBB1918alteredBB:                          ; preds = %originalBB1918, %5598
  %7396 = load i64, i64* %29, align 8, !dbg !2494
  %_1919 = shl i64 %7396, 1
  %_1920 = sub i64 0, %7396
  %gen1921 = add i64 %_1920, 1
  %_1922 = shl i64 %7396, 1
  %7397 = add i64 %7396, 1, !dbg !2494
  store i64 %7397, i64* %29, align 8, !dbg !2494
  br label %originalBB1918

originalBB1926alteredBB:                          ; preds = %originalBB1926, %5617
  br label %originalBB1926

originalBB1930alteredBB:                          ; preds = %originalBB1930, %5634
  %7398 = load i64, i64* %29, align 8, !dbg !2495
  %7399 = load i64, i64* %20, align 8, !dbg !2495
  %7400 = icmp ult i64 %7398, %7399, !dbg !2495
  br label %originalBB1930

originalBB1934alteredBB:                          ; preds = %originalBB1934, %5654
  %7401 = load i8*, i8** %19, align 8, !dbg !2495
  %7402 = load i64, i64* %29, align 8, !dbg !2495
  %7403 = getelementptr inbounds i8, i8* %7401, i64 %7402, !dbg !2495
  store i8 39, i8* %7403, align 1, !dbg !2495
  br label %originalBB1934

originalBB1938alteredBB:                          ; preds = %originalBB1938, %5674
  %7404 = load i64, i64* %29, align 8, !dbg !2498
  %_1939 = sub i64 %7404, 1
  %gen1940 = mul i64 %_1939, 1
  %_1941 = sub i64 %7404, 1
  %gen1942 = mul i64 %_1941, 1
  %_1943 = sub i64 0, %7404
  %gen1944 = add i64 %_1943, 1
  %_1945 = shl i64 %7404, 1
  %_1946 = sub i64 0, %7404
  %gen1947 = add i64 %_1946, 1
  %_1948 = sub i64 %7404, 1
  %gen1949 = mul i64 %_1948, 1
  %7405 = add i64 %7404, 1, !dbg !2498
  store i64 %7405, i64* %29, align 8, !dbg !2498
  br label %originalBB1938

originalBB1953alteredBB:                          ; preds = %originalBB1953, %5693
  store i8 1, i8* %36, align 1, !dbg !2485
  br label %originalBB1953

originalBB1957alteredBB:                          ; preds = %originalBB1957, %5710
  br label %originalBB1957

originalBB1961alteredBB:                          ; preds = %originalBB1961, %5727
  %7406 = load i64, i64* %29, align 8, !dbg !2499
  %7407 = load i64, i64* %20, align 8, !dbg !2499
  %7408 = icmp ult i64 %7406, %7407, !dbg !2499
  br label %originalBB1961

originalBB1965alteredBB:                          ; preds = %originalBB1965, %5747
  %7409 = load i8*, i8** %19, align 8, !dbg !2499
  %7410 = load i64, i64* %29, align 8, !dbg !2499
  %7411 = getelementptr inbounds i8, i8* %7409, i64 %7410, !dbg !2499
  store i8 92, i8* %7411, align 1, !dbg !2499
  br label %originalBB1965

originalBB1969alteredBB:                          ; preds = %originalBB1969, %5770
  br label %originalBB1969

originalBB1973alteredBB:                          ; preds = %originalBB1973, %5787
  br label %originalBB1973

originalBB1977alteredBB:                          ; preds = %originalBB1977, %5804
  br label %originalBB1977

originalBB1981alteredBB:                          ; preds = %originalBB1981, %5821
  %7412 = load i8, i8* %36, align 1, !dbg !2506
  %7413 = trunc i8 %7412 to i1, !dbg !2506
  br label %originalBB1981

originalBB1985alteredBB:                          ; preds = %originalBB1985, %5840
  %7414 = load i8, i8* %42, align 1, !dbg !2506
  %7415 = trunc i8 %7414 to i1, !dbg !2506
  br label %originalBB1985

originalBB1989alteredBB:                          ; preds = %originalBB1989, %5859
  br label %originalBB1989

originalBB1993alteredBB:                          ; preds = %originalBB1993, %5876
  %7416 = load i64, i64* %29, align 8, !dbg !2512
  %7417 = load i64, i64* %20, align 8, !dbg !2512
  %7418 = icmp ult i64 %7416, %7417, !dbg !2512
  br label %originalBB1993

originalBB1997alteredBB:                          ; preds = %originalBB1997, %5896
  %7419 = load i8*, i8** %19, align 8, !dbg !2512
  %7420 = load i64, i64* %29, align 8, !dbg !2512
  %7421 = getelementptr inbounds i8, i8* %7419, i64 %7420, !dbg !2512
  store i8 39, i8* %7421, align 1, !dbg !2512
  br label %originalBB1997

originalBB2001alteredBB:                          ; preds = %originalBB2001, %5919
  br label %originalBB2001

originalBB2005alteredBB:                          ; preds = %originalBB2005, %5936
  %7422 = load i64, i64* %29, align 8, !dbg !2516
  %7423 = load i64, i64* %20, align 8, !dbg !2516
  %7424 = icmp ult i64 %7422, %7423, !dbg !2516
  br label %originalBB2005

originalBB2009alteredBB:                          ; preds = %originalBB2009, %5956
  %7425 = load i8*, i8** %19, align 8, !dbg !2516
  %7426 = load i64, i64* %29, align 8, !dbg !2516
  %7427 = getelementptr inbounds i8, i8* %7425, i64 %7426, !dbg !2516
  store i8 39, i8* %7427, align 1, !dbg !2516
  br label %originalBB2009

originalBB2013alteredBB:                          ; preds = %originalBB2013, %5976
  %7428 = load i64, i64* %29, align 8, !dbg !2519
  %_2014 = sub i64 0, %7428
  %gen2015 = add i64 %_2014, 1
  %_2016 = sub i64 %7428, 1
  %gen2017 = mul i64 %_2016, 1
  %_2018 = sub i64 0, %7428
  %gen2019 = add i64 %_2018, 1
  %_2020 = shl i64 %7428, 1
  %_2021 = sub i64 0, %7428
  %gen2022 = add i64 %_2021, 1
  %_2023 = shl i64 %7428, 1
  %7429 = add i64 %7428, 1, !dbg !2519
  store i64 %7429, i64* %29, align 8, !dbg !2519
  br label %originalBB2013

originalBB2027alteredBB:                          ; preds = %originalBB2027, %5995
  store i8 0, i8* %36, align 1, !dbg !2510
  br label %originalBB2027

originalBB2031alteredBB:                          ; preds = %originalBB2031, %6012
  br label %originalBB2031

originalBB2035alteredBB:                          ; preds = %originalBB2035, %6029
  br label %originalBB2035

originalBB2039alteredBB:                          ; preds = %originalBB2039, %6046
  %7430 = load i64, i64* %29, align 8, !dbg !2521
  %7431 = load i64, i64* %20, align 8, !dbg !2521
  %7432 = trunc i64 %7430 to i32
  %_2040 = sub i32 %7432, -2
  %gen2041 = mul i32 %_2040, -2
  %_2042 = sub i32 %7432, -2
  %gen2043 = mul i32 %_2042, -2
  %_2044 = sub i32 %7432, -2
  %gen2045 = mul i32 %_2044, -2
  %_2046 = sub i32 0, %7432
  %gen2047 = add i32 %_2046, -2
  %_2048 = shl i32 %7432, -2
  %_2049 = sub i32 0, %7432
  %gen2050 = add i32 %_2049, -2
  %7433 = mul i32 %7432, -2
  %_2051 = sub i32 %7433, -2
  %gen2052 = mul i32 %_2051, -2
  %_2053 = sub i32 0, %7433
  %gen2054 = add i32 %_2053, -2
  %_2055 = sub i32 0, %7433
  %gen2056 = add i32 %_2055, -2
  %_2057 = sub i32 0, %7433
  %gen2058 = add i32 %_2057, -2
  %_2059 = sub i32 0, %7433
  %gen2060 = add i32 %_2059, -2
  %_2061 = shl i32 %7433, -2
  %_2062 = sub i32 %7433, -2
  %gen2063 = mul i32 %_2062, -2
  %7434 = add i32 %7433, -2
  %7435 = trunc i64 %7431 to i32
  %_2064 = sub i32 0, %7435
  %gen2065 = add i32 %_2064, 2
  %_2066 = sub i32 %7435, 2
  %gen2067 = mul i32 %_2066, 2
  %_2068 = sub i32 0, %7435
  %gen2069 = add i32 %_2068, 2
  %_2070 = sub i32 %7435, 2
  %gen2071 = mul i32 %_2070, 2
  %_2072 = sub i32 %7435, 2
  %gen2073 = mul i32 %_2072, 2
  %7436 = mul i32 %7435, 2
  %_2074 = shl i32 %7436, 3
  %7437 = add i32 %7436, 3
  %_2075 = sub i32 %7434, %7434
  %gen2076 = mul i32 %_2075, %7434
  %_2077 = shl i32 %7434, %7434
  %_2078 = sub i32 0, %7434
  %gen2079 = add i32 %_2078, %7434
  %7438 = mul i32 %7434, %7434
  %_2080 = shl i32 %7437, %7437
  %_2081 = shl i32 %7437, %7437
  %_2082 = sub i32 %7437, %7437
  %gen2083 = mul i32 %_2082, %7437
  %_2084 = sub i32 %7437, %7437
  %gen2085 = mul i32 %_2084, %7437
  %_2086 = shl i32 %7437, %7437
  %_2087 = shl i32 %7437, %7437
  %_2088 = sub i32 0, %7437
  %gen2089 = add i32 %_2088, %7437
  %7439 = mul i32 %7437, %7437
  %_2090 = sub i32 %7438, %7439
  %gen2091 = mul i32 %_2090, %7439
  %7440 = add i32 %7438, %7439
  %_2092 = sub i32 %7434, %7437
  %gen2093 = mul i32 %_2092, %7437
  %_2094 = sub i32 %7434, %7437
  %gen2095 = mul i32 %_2094, %7437
  %_2096 = sub i32 %7434, %7437
  %gen2097 = mul i32 %_2096, %7437
  %_2098 = shl i32 %7434, %7437
  %_2099 = sub i32 0, %7434
  %gen2100 = add i32 %_2099, %7437
  %7441 = mul i32 %7434, %7437
  %_2101 = sub i32 0, %7441
  %gen2102 = add i32 %_2101, 2
  %_2103 = shl i32 %7441, 2
  %_2104 = sub i32 0, %7441
  %gen2105 = add i32 %_2104, 2
  %_2106 = shl i32 %7441, 2
  %7442 = mul i32 %7441, 2
  %7443 = sub i32 %7440, %7442
  %_2107 = sub i32 0, %7443
  %gen2108 = add i32 %_2107, 3
  %_2109 = sub i32 %7443, 3
  %gen2110 = mul i32 %_2109, 3
  %_2111 = sub i32 0, %7443
  %gen2112 = add i32 %_2111, 3
  %_2113 = shl i32 %7443, 3
  %_2114 = shl i32 %7443, 3
  %_2115 = sub i32 0, %7443
  %gen2116 = add i32 %_2115, 3
  %_2117 = shl i32 %7443, 3
  %_2118 = sub i32 0, %7443
  %gen2119 = add i32 %_2118, 3
  %7444 = mul i32 %7443, 3
  %_2120 = sub i32 0, %7444
  %gen2121 = add i32 %_2120, -1
  %_2122 = shl i32 %7444, -1
  %_2123 = sub i32 0, %7444
  %gen2124 = add i32 %_2123, -1
  %_2125 = shl i32 %7444, -1
  %_2126 = shl i32 %7444, -1
  %_2127 = sub i32 %7444, -1
  %gen2128 = mul i32 %_2127, -1
  %_2129 = sub i32 %7444, -1
  %gen2130 = mul i32 %_2129, -1
  %7445 = add i32 %7444, -1
  %7446 = icmp eq i32 %7445, -4
  br label %originalBB2039

originalBB2134alteredBB:                          ; preds = %originalBB2134, %6080
  br label %originalBB2134

originalBB2138alteredBB:                          ; preds = %originalBB2138, %6097
  %7447 = icmp ult i64 %6055, %6056, !dbg !2521
  br label %originalBB2138

originalBB2142alteredBB:                          ; preds = %originalBB2142, %6115
  %7448 = load i8, i8* %39, align 1, !dbg !2521
  %7449 = load i8*, i8** %19, align 8, !dbg !2521
  %7450 = load i64, i64* %29, align 8, !dbg !2521
  %7451 = getelementptr inbounds i8, i8* %7449, i64 %7450, !dbg !2521
  store i8 %7448, i8* %7451, align 1, !dbg !2521
  br label %originalBB2142

originalBB2146alteredBB:                          ; preds = %originalBB2146, %6136
  %7452 = load i64, i64* %29, align 8, !dbg !2524
  %7453 = add i64 %7452, 1, !dbg !2524
  store i64 %7453, i64* %29, align 8, !dbg !2524
  br label %originalBB2146

originalBB2150alteredBB:                          ; preds = %originalBB2150, %6155
  %7454 = load i8, i8* %43, align 1, !dbg !2525
  %7455 = trunc i8 %7454 to i1, !dbg !2525
  br label %originalBB2150

originalBB2154alteredBB:                          ; preds = %originalBB2154, %6174
  store i8 0, i8* %38, align 1, !dbg !2528
  br label %originalBB2154

originalBB2158alteredBB:                          ; preds = %originalBB2158, %6191
  br label %originalBB2158

originalBB2162alteredBB:                          ; preds = %originalBB2162, %6208
  %7456 = load i64, i64* %28, align 8, !dbg !2531
  %_2163 = sub i64 %7456, 1
  %gen2164 = mul i64 %_2163, 1
  %_2165 = sub i64 %7456, 1
  %gen2166 = mul i64 %_2165, 1
  %_2167 = sub i64 %7456, 1
  %gen2168 = mul i64 %_2167, 1
  %7457 = add i64 %7456, 1, !dbg !2531
  store i64 %7457, i64* %28, align 8, !dbg !2531
  br label %originalBB2162

originalBB2172alteredBB:                          ; preds = %originalBB2172, %6230
  %7458 = load i32, i32* %23, align 4, !dbg !2539
  %7459 = icmp eq i32 %7458, 2, !dbg !2540
  br label %originalBB2172

originalBB2176alteredBB:                          ; preds = %originalBB2176, %6249
  %7460 = load i8, i8* %35, align 1, !dbg !2542
  %7461 = trunc i8 %7460 to i1, !dbg !2542
  br label %originalBB2176

originalBB2180alteredBB:                          ; preds = %originalBB2180, %6268
  br label %originalBB2180

originalBB2184alteredBB:                          ; preds = %originalBB2184, %6285
  %7462 = load i32, i32* %23, align 4, !dbg !2545
  %7463 = icmp eq i32 %7462, 2, !dbg !2547
  br label %originalBB2184

originalBB2188alteredBB:                          ; preds = %originalBB2188, %6304
  %7464 = load i8, i8* %35, align 1, !dbg !2549
  %7465 = trunc i8 %7464 to i1, !dbg !2549
  br label %originalBB2188

originalBB2192alteredBB:                          ; preds = %originalBB2192, %6323
  %7466 = load i8, i8* %37, align 1, !dbg !2551
  %7467 = trunc i8 %7466 to i1, !dbg !2551
  br label %originalBB2192

originalBB2196alteredBB:                          ; preds = %originalBB2196, %6342
  %7468 = load i8, i8* %38, align 1, !dbg !2553
  %7469 = trunc i8 %7468 to i1, !dbg !2553
  br label %originalBB2196

originalBB2200alteredBB:                          ; preds = %originalBB2200, %6361
  %7470 = load i8*, i8** %19, align 8, !dbg !2557
  %7471 = load i64, i64* %30, align 8, !dbg !2558
  %7472 = load i8*, i8** %21, align 8, !dbg !2559
  %7473 = load i64, i64* %22, align 8, !dbg !2560
  %7474 = load i32, i32* %24, align 4, !dbg !2561
  %7475 = load i32*, i32** %25, align 8, !dbg !2562
  %7476 = load i8*, i8** %26, align 8, !dbg !2563
  %7477 = load i8*, i8** %27, align 8, !dbg !2564
  %7478 = call i64 @quotearg_buffer_restyled(i8* %7470, i64 %7471, i8* %7472, i64 %7473, i32 5, i32 %7474, i32* %7475, i8* %7476, i8* %7477), !dbg !2565
  store i64 %7478, i64* %18, align 8, !dbg !2566
  br label %originalBB2200

originalBB2204alteredBB:                          ; preds = %originalBB2204, %6387
  %7479 = load i64, i64* %20, align 8, !dbg !2567
  %7480 = icmp ne i64 %7479, 0, !dbg !2567
  br label %originalBB2204

originalBB2208alteredBB:                          ; preds = %originalBB2208, %6406
  %7481 = load i64, i64* %30, align 8, !dbg !2570
  %7482 = icmp ne i64 %7481, 0, !dbg !2570
  br label %originalBB2208

originalBB2212alteredBB:                          ; preds = %originalBB2212, %6425
  %7483 = load i64, i64* %30, align 8, !dbg !2572
  store i64 %7483, i64* %20, align 8, !dbg !2574
  store i64 0, i64* %29, align 8, !dbg !2575
  br label %originalBB2212

originalBB2216alteredBB:                          ; preds = %originalBB2216, %6443
  br label %originalBB2216

originalBB2220alteredBB:                          ; preds = %originalBB2220, %6460
  br label %originalBB2220

originalBB2224alteredBB:                          ; preds = %originalBB2224, %6477
  %7484 = load i8*, i8** %31, align 8, !dbg !2578
  %7485 = icmp ne i8* %7484, null, !dbg !2578
  br label %originalBB2224

originalBB2228alteredBB:                          ; preds = %originalBB2228, %6496
  %7486 = load i8, i8* %35, align 1, !dbg !2581
  %7487 = trunc i8 %7486 to i1, !dbg !2581
  br label %originalBB2228

originalBB2232alteredBB:                          ; preds = %originalBB2232, %6515
  br label %originalBB2232

originalBB2236alteredBB:                          ; preds = %originalBB2236, %6532
  %7488 = load i8*, i8** %31, align 8, !dbg !2584
  %7489 = load i8, i8* %7488, align 1, !dbg !2587
  %7490 = icmp ne i8 %7489, 0, !dbg !2588
  br label %originalBB2236

originalBB2240alteredBB:                          ; preds = %originalBB2240, %6557
  %7491 = load i8*, i8** %31, align 8, !dbg !2590
  %7492 = load i8, i8* %7491, align 1, !dbg !2590
  %7493 = load i8*, i8** %19, align 8, !dbg !2590
  %7494 = load i64, i64* %29, align 8, !dbg !2590
  %7495 = getelementptr inbounds i8, i8* %7493, i64 %7494, !dbg !2590
  store i8 %7492, i8* %7495, align 1, !dbg !2590
  br label %originalBB2240

originalBB2244alteredBB:                          ; preds = %originalBB2244, %6579
  %7496 = load i64, i64* %29, align 8, !dbg !2593
  %_2245 = sub i64 0, %7496
  %gen2246 = add i64 %_2245, 1
  %_2247 = sub i64 0, %7496
  %gen2248 = add i64 %_2247, 1
  %_2249 = shl i64 %7496, 1
  %_2250 = sub i64 %7496, 1
  %gen2251 = mul i64 %_2250, 1
  %_2252 = sub i64 %7496, 1
  %gen2253 = mul i64 %_2252, 1
  %_2254 = sub i64 0, %7496
  %gen2255 = add i64 %_2254, 1
  %_2256 = shl i64 %7496, 1
  %7497 = add i64 %7496, 1, !dbg !2593
  store i64 %7497, i64* %29, align 8, !dbg !2593
  br label %originalBB2244

originalBB2260alteredBB:                          ; preds = %originalBB2260, %6598
  br label %originalBB2260

originalBB2264alteredBB:                          ; preds = %originalBB2264, %6615
  %7498 = load i8*, i8** %31, align 8, !dbg !2594
  %7499 = getelementptr inbounds i8, i8* %7498, i32 1, !dbg !2594
  store i8* %7499, i8** %31, align 8, !dbg !2594
  br label %originalBB2264

originalBB2268alteredBB:                          ; preds = %originalBB2268, %6634
  br label %originalBB2268

originalBB2272alteredBB:                          ; preds = %originalBB2272, %6651
  %7500 = load i64, i64* %29, align 8, !dbg !2598
  %7501 = load i64, i64* %20, align 8, !dbg !2600
  %7502 = icmp ult i64 %7500, %7501, !dbg !2601
  br label %originalBB2272

originalBB2276alteredBB:                          ; preds = %originalBB2276, %6671
  %7503 = load i8*, i8** %19, align 8, !dbg !2603
  %7504 = load i64, i64* %29, align 8, !dbg !2604
  %7505 = getelementptr inbounds i8, i8* %7503, i64 %7504, !dbg !2603
  store i8 0, i8* %7505, align 1, !dbg !2605
  br label %originalBB2276

originalBB2280alteredBB:                          ; preds = %originalBB2280, %6691
  %7506 = load i64, i64* %29, align 8, !dbg !2606
  store i64 %7506, i64* %18, align 8, !dbg !2607
  br label %originalBB2280

originalBB2284alteredBB:                          ; preds = %originalBB2284, %6709
  %7507 = load i32, i32* %23, align 4, !dbg !2610
  %7508 = icmp eq i32 %7507, 2, !dbg !2612
  br label %originalBB2284

originalBB2288alteredBB:                          ; preds = %originalBB2288, %6728
  %7509 = load i8, i8* %33, align 1, !dbg !2614
  %7510 = trunc i8 %7509 to i1, !dbg !2614
  br label %originalBB2288

originalBB2292alteredBB:                          ; preds = %originalBB2292, %6747
  store i32 4, i32* %23, align 4, !dbg !2616
  br label %originalBB2292

originalBB2296alteredBB:                          ; preds = %originalBB2296, %6764
  %7511 = load i8*, i8** %19, align 8, !dbg !2618
  %7512 = load i64, i64* %20, align 8, !dbg !2619
  %7513 = load i8*, i8** %21, align 8, !dbg !2620
  %7514 = load i64, i64* %22, align 8, !dbg !2621
  %7515 = load i32, i32* %23, align 4, !dbg !2622
  %7516 = load i32, i32* %24, align 4, !dbg !2623
  %_2297 = shl i32 %7516, -3
  %_2298 = sub i32 %7516, -3
  %gen2299 = mul i32 %_2298, -3
  %_2300 = sub i32 0, %7516
  %gen2301 = add i32 %_2300, -3
  %_2302 = sub i32 0, %7516
  %gen2303 = add i32 %_2302, -3
  %7517 = and i32 %7516, -3, !dbg !2624
  %7518 = load i8*, i8** %26, align 8, !dbg !2625
  %7519 = load i8*, i8** %27, align 8, !dbg !2626
  %7520 = call i64 @quotearg_buffer_restyled(i8* %7511, i64 %7512, i8* %7513, i64 %7514, i32 %7515, i32 %7517, i32* null, i8* %7518, i8* %7519), !dbg !2627
  store i64 %7520, i64* %18, align 8, !dbg !2628
  br label %originalBB2296
}

; Function Attrs: nounwind
declare dso_local i64 @__ctype_get_mb_cur_max() #2

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @gettext_quote(i8*, i32) #4 !dbg !2717 {
  %3 = load i32, i32* @x.37
  %4 = load i32, i32* @y.38
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !2720, metadata !DIExpression()), !dbg !2721
  store i32 %1, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !2722, metadata !DIExpression()), !dbg !2723
  call void @llvm.dbg.declare(metadata i8** %14, metadata !2724, metadata !DIExpression()), !dbg !2725
  %16 = load i8*, i8** %12, align 8, !dbg !2726
  %17 = call i8* @gettext(i8* %16) #10, !dbg !2726
  store i8* %17, i8** %14, align 8, !dbg !2725
  call void @llvm.dbg.declare(metadata i8** %15, metadata !2727, metadata !DIExpression()), !dbg !2728
  %18 = load i8*, i8** %14, align 8, !dbg !2729
  %19 = load i8*, i8** %12, align 8, !dbg !2731
  %20 = icmp ne i8* %18, %19, !dbg !2732
  %21 = load i32, i32* @x.37
  %22 = load i32, i32* @y.38
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %20, label %29, label %47, !dbg !2733

29:                                               ; preds = %originalBBpart2
  %30 = load i32, i32* @x.37
  %31 = load i32, i32* @y.38
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %29, %originalBB1alteredBB
  %38 = load i8*, i8** %14, align 8, !dbg !2734
  store i8* %38, i8** %11, align 8, !dbg !2735
  %39 = load i32, i32* @x.37
  %40 = load i32, i32* @y.38
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %141, !dbg !2735

47:                                               ; preds = %originalBBpart2
  %48 = load i32, i32* @x.37
  %49 = load i32, i32* @y.38
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %47, %originalBB6alteredBB
  %56 = call i8* @locale_charset(), !dbg !2736
  store i8* %56, i8** %15, align 8, !dbg !2737
  %57 = load i8*, i8** %15, align 8, !dbg !2738
  %58 = call i32 @c_strcasecmp(i8* %57, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13.66, i64 0, i64 0)) #13, !dbg !2738
  %59 = icmp eq i32 %58, 0, !dbg !2738
  %60 = load i32, i32* @x.37
  %61 = load i32, i32* @y.38
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %59, label %68, label %92, !dbg !2740

68:                                               ; preds = %originalBBpart28
  %69 = load i32, i32* @x.37
  %70 = load i32, i32* @y.38
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %68, %originalBB10alteredBB
  %77 = load i8*, i8** %12, align 8, !dbg !2741
  %78 = getelementptr inbounds i8, i8* %77, i64 0, !dbg !2741
  %79 = load i8, i8* %78, align 1, !dbg !2741
  %80 = sext i8 %79 to i32, !dbg !2741
  %81 = icmp eq i32 %80, 96, !dbg !2742
  %82 = zext i1 %81 to i64, !dbg !2741
  %83 = select i1 %81, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.67, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.68, i64 0, i64 0), !dbg !2741
  store i8* %83, i8** %11, align 8, !dbg !2743
  %84 = load i32, i32* @x.37
  %85 = load i32, i32* @y.38
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %141, !dbg !2743

92:                                               ; preds = %originalBBpart28
  %93 = load i32, i32* @x.37
  %94 = load i32, i32* @y.38
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %92, %originalBB14alteredBB
  %101 = load i8*, i8** %15, align 8, !dbg !2744
  %102 = call i32 @c_strcasecmp(i8* %101, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16.69, i64 0, i64 0)) #13, !dbg !2744
  %103 = icmp eq i32 %102, 0, !dbg !2744
  %104 = load i32, i32* @x.37
  %105 = load i32, i32* @y.38
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %103, label %112, label %120, !dbg !2746

112:                                              ; preds = %originalBBpart216
  %113 = load i8*, i8** %12, align 8, !dbg !2747
  %114 = getelementptr inbounds i8, i8* %113, i64 0, !dbg !2747
  %115 = load i8, i8* %114, align 1, !dbg !2747
  %116 = sext i8 %115 to i32, !dbg !2747
  %117 = icmp eq i32 %116, 96, !dbg !2748
  %118 = zext i1 %117 to i64, !dbg !2747
  %119 = select i1 %117, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17.70, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.71, i64 0, i64 0), !dbg !2747
  store i8* %119, i8** %11, align 8, !dbg !2749
  br label %141, !dbg !2749

120:                                              ; preds = %originalBBpart216
  %121 = load i32, i32* @x.37
  %122 = load i32, i32* @y.38
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %120, %originalBB18alteredBB
  %129 = load i32, i32* %13, align 4, !dbg !2750
  %130 = icmp eq i32 %129, 9, !dbg !2751
  %131 = zext i1 %130 to i64, !dbg !2750
  %132 = select i1 %130, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.63, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.65, i64 0, i64 0), !dbg !2750
  store i8* %132, i8** %11, align 8, !dbg !2752
  %133 = load i32, i32* @x.37
  %134 = load i32, i32* @y.38
  %135 = sub i32 %133, 1
  %136 = mul i32 %133, %135
  %137 = urem i32 %136, 2
  %138 = icmp eq i32 %137, 0
  %139 = icmp slt i32 %134, 10
  %140 = or i1 %138, %139
  br i1 %140, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %141, !dbg !2752

141:                                              ; preds = %originalBBpart220, %112, %originalBBpart212, %originalBBpart24
  %142 = load i32, i32* @x.37
  %143 = load i32, i32* @y.38
  %144 = sub i32 %142, 1
  %145 = mul i32 %142, %144
  %146 = urem i32 %145, 2
  %147 = icmp eq i32 %146, 0
  %148 = icmp slt i32 %143, 10
  %149 = or i1 %147, %148
  br i1 %149, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %141, %originalBB22alteredBB
  %150 = load i8*, i8** %11, align 8, !dbg !2753
  %151 = load i32, i32* @x.37
  %152 = load i32, i32* @y.38
  %153 = sub i32 %151, 1
  %154 = mul i32 %151, %153
  %155 = urem i32 %154, 2
  %156 = icmp eq i32 %155, 0
  %157 = icmp slt i32 %152, 10
  %158 = or i1 %156, %157
  br i1 %158, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  ret i8* %150, !dbg !2753

originalBBalteredBB:                              ; preds = %originalBB, %2
  %159 = alloca i8*, align 8
  %160 = alloca i8*, align 8
  %161 = alloca i32, align 4
  %162 = alloca i8*, align 8
  %163 = alloca i8*, align 8
  store i8* %0, i8** %160, align 8
  call void @llvm.dbg.declare(metadata i8** %160, metadata !2754, metadata !DIExpression()), !dbg !2721
  store i32 %1, i32* %161, align 4
  call void @llvm.dbg.declare(metadata i32* %161, metadata !2786, metadata !DIExpression()), !dbg !2723
  call void @llvm.dbg.declare(metadata i8** %162, metadata !2787, metadata !DIExpression()), !dbg !2725
  %164 = load i8*, i8** %160, align 8, !dbg !2726
  %165 = call i8* @gettext(i8* %164) #10, !dbg !2726
  store i8* %165, i8** %162, align 8, !dbg !2725
  call void @llvm.dbg.declare(metadata i8** %163, metadata !2788, metadata !DIExpression()), !dbg !2728
  %166 = load i8*, i8** %162, align 8, !dbg !2729
  %167 = load i8*, i8** %160, align 8, !dbg !2731
  %168 = icmp ne i8* %166, %167, !dbg !2732
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %29
  %169 = load i8*, i8** %14, align 8, !dbg !2734
  store i8* %169, i8** %11, align 8, !dbg !2735
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %47
  %170 = call i8* @locale_charset(), !dbg !2736
  store i8* %170, i8** %15, align 8, !dbg !2737
  %171 = load i8*, i8** %15, align 8, !dbg !2738
  %172 = call i32 @c_strcasecmp(i8* %171, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13.66, i64 0, i64 0)) #13, !dbg !2738
  %173 = icmp eq i32 %172, 0, !dbg !2738
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %68
  %174 = load i8*, i8** %12, align 8, !dbg !2741
  %175 = getelementptr inbounds i8, i8* %174, i64 0, !dbg !2741
  %176 = load i8, i8* %175, align 1, !dbg !2741
  %177 = sext i8 %176 to i32, !dbg !2741
  %178 = icmp eq i32 %177, 96, !dbg !2742
  %179 = zext i1 %178 to i64, !dbg !2741
  %180 = select i1 %178, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.67, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.68, i64 0, i64 0), !dbg !2741
  store i8* %180, i8** %11, align 8, !dbg !2743
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %92
  %181 = load i8*, i8** %15, align 8, !dbg !2744
  %182 = call i32 @c_strcasecmp(i8* %181, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16.69, i64 0, i64 0)) #13, !dbg !2744
  %183 = icmp eq i32 %182, 0, !dbg !2744
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %120
  %184 = load i32, i32* %13, align 4, !dbg !2750
  %185 = icmp eq i32 %184, 9, !dbg !2751
  %186 = zext i1 %185 to i64, !dbg !2750
  %187 = select i1 %185, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.63, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.65, i64 0, i64 0), !dbg !2750
  store i8* %187, i8** %11, align 8, !dbg !2752
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %141
  %188 = load i8*, i8** %11, align 8, !dbg !2753
  br label %originalBB22
}

; Function Attrs: nounwind readonly
declare dso_local i32 @memcmp(i8*, i8*, i64) #7

; Function Attrs: nounwind readnone
declare dso_local i16** @__ctype_b_loc() #8

; Function Attrs: nounwind
declare dso_local i32 @iswprint(i32) #2

; Function Attrs: nounwind readonly
declare dso_local i32 @mbsinit(%struct.__mbstate_t*) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_style(i32, i8*) #4 !dbg !2789 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  store i32 %0, i32* %3, align 4
  call void @llvm.dbg.declare(metadata i32* %3, metadata !2792, metadata !DIExpression()), !dbg !2793
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !2794, metadata !DIExpression()), !dbg !2795
  %5 = load i32, i32* %3, align 4, !dbg !2796
  %6 = mul i32 %0, -5
  %7 = add i32 %6, -3
  %8 = mul i32 %5, -3
  %9 = add i32 %8, -4
  %10 = mul i32 %5, 3
  %11 = add i32 %10, 1
  %12 = mul i32 %7, %7
  %13 = mul i32 %12, %12
  %14 = mul i32 %9, %9
  %15 = mul i32 %14, %14
  %16 = mul i32 %11, %11
  %17 = mul i32 %16, %16
  %18 = add i32 %13, %15
  %19 = sub i32 %18, %17
  %20 = mul i32 %19, 4
  %21 = add i32 %20, -5
  %22 = icmp eq i32 %21, -5
  br i1 %22, label %40, label %23

23:                                               ; preds = %2
  %24 = load i32, i32* @x.39
  %25 = load i32, i32* @y.40
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %23, %originalBBalteredBB
  %32 = load i32, i32* @x.39
  %33 = load i32, i32* @y.40
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* null

40:                                               ; preds = %2
  %41 = load i32, i32* @x.39
  %42 = load i32, i32* @y.40
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %40, %originalBB1alteredBB
  %49 = load i8*, i8** %4, align 8, !dbg !2797
  %50 = call i8* @quotearg_n_style(i32 0, i32 %5, i8* %49), !dbg !2798
  %51 = load i32, i32* @x.39
  %52 = load i32, i32* @y.40
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  ret i8* %50, !dbg !2799

originalBBalteredBB:                              ; preds = %originalBB, %23
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %40
  %59 = load i8*, i8** %4, align 8, !dbg !2797
  %60 = call i8* @quotearg_n_style(i32 0, i32 %5, i8* %59), !dbg !2798
  br label %originalBB1
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_char_mem(i8*, i64, i8 signext) #4 !dbg !2800 {
  %4 = load i32, i32* @x.41
  %5 = load i32, i32* @y.42
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i8, align 1
  %15 = alloca %struct.quoting_options, align 8
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !2803, metadata !DIExpression()), !dbg !2804
  store i64 %1, i64* %13, align 8
  call void @llvm.dbg.declare(metadata i64* %13, metadata !2805, metadata !DIExpression()), !dbg !2806
  store i8 %2, i8* %14, align 1
  call void @llvm.dbg.declare(metadata i8* %14, metadata !2807, metadata !DIExpression()), !dbg !2808
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %15, metadata !2809, metadata !DIExpression()), !dbg !2810
  %16 = bitcast %struct.quoting_options* %15 to i8*, !dbg !2811
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i1 false), !dbg !2811
  %17 = load i8, i8* %14, align 1, !dbg !2812
  %18 = call i32 @set_char_quoting(%struct.quoting_options* %15, i8 signext %17, i32 1), !dbg !2813
  %19 = load i8*, i8** %12, align 8, !dbg !2814
  %20 = load i64, i64* %13, align 8, !dbg !2815
  %21 = call i8* @quotearg_n_options(i32 0, i8* %19, i64 %20, %struct.quoting_options* %15), !dbg !2816
  %22 = load i32, i32* @x.41
  %23 = load i32, i32* @y.42
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %21, !dbg !2817

originalBBalteredBB:                              ; preds = %originalBB, %3
  %30 = alloca i8*, align 8
  %31 = alloca i64, align 8
  %32 = alloca i8, align 1
  %33 = alloca %struct.quoting_options, align 8
  store i8* %0, i8** %30, align 8
  call void @llvm.dbg.declare(metadata i8** %30, metadata !2818, metadata !DIExpression()), !dbg !2804
  store i64 %1, i64* %31, align 8
  call void @llvm.dbg.declare(metadata i64* %31, metadata !2850, metadata !DIExpression()), !dbg !2806
  store i8 %2, i8* %32, align 1
  call void @llvm.dbg.declare(metadata i8* %32, metadata !2851, metadata !DIExpression()), !dbg !2808
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %33, metadata !2852, metadata !DIExpression()), !dbg !2810
  %34 = bitcast %struct.quoting_options* %33 to i8*, !dbg !2811
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %34, i8* align 8 bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i1 false), !dbg !2811
  %35 = load i8, i8* %32, align 1, !dbg !2812
  %36 = call i32 @set_char_quoting(%struct.quoting_options* %33, i8 signext %35, i32 1), !dbg !2813
  %37 = load i8*, i8** %30, align 8, !dbg !2814
  %38 = load i64, i64* %31, align 8, !dbg !2815
  %39 = call i8* @quotearg_n_options(i32 0, i8* %37, i64 %38, %struct.quoting_options* %33), !dbg !2816
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_char(i8*, i8 signext) #4 !dbg !2853 {
  %3 = load i32, i32* @x.43
  %4 = load i32, i32* @y.44
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i8, align 1
  store i8* %0, i8** %11, align 8
  call void @llvm.dbg.declare(metadata i8** %11, metadata !2856, metadata !DIExpression()), !dbg !2857
  store i8 %1, i8* %12, align 1
  call void @llvm.dbg.declare(metadata i8* %12, metadata !2858, metadata !DIExpression()), !dbg !2859
  %13 = load i8*, i8** %11, align 8, !dbg !2860
  %14 = load i8, i8* %12, align 1, !dbg !2861
  %15 = call i8* @quotearg_char_mem(i8* %13, i64 -1, i8 signext %14), !dbg !2862
  %16 = load i32, i32* @x.43
  %17 = load i32, i32* @y.44
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %15, !dbg !2863

originalBBalteredBB:                              ; preds = %originalBB, %2
  %24 = alloca i8*, align 8
  %25 = alloca i8, align 1
  store i8* %0, i8** %24, align 8
  call void @llvm.dbg.declare(metadata i8** %24, metadata !2864, metadata !DIExpression()), !dbg !2857
  store i8 %1, i8* %25, align 1
  call void @llvm.dbg.declare(metadata i8* %25, metadata !2896, metadata !DIExpression()), !dbg !2859
  %26 = load i8*, i8** %24, align 8, !dbg !2860
  %27 = load i8, i8* %25, align 1, !dbg !2861
  %28 = call i8* @quotearg_char_mem(i8* %26, i64 -1, i8 signext %27), !dbg !2862
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_colon(i8*) #4 !dbg !2897 {
  %2 = load i32, i32* @x.45
  %3 = load i32, i32* @y.46
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !2900, metadata !DIExpression()), !dbg !2901
  %11 = load i8*, i8** %10, align 8, !dbg !2902
  %12 = call i8* @quotearg_char(i8* %11, i8 signext 58), !dbg !2903
  %13 = load i32, i32* @x.45
  %14 = load i32, i32* @y.46
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %12, !dbg !2904

originalBBalteredBB:                              ; preds = %originalBB, %1
  %21 = alloca i8*, align 8
  store i8* %0, i8** %21, align 8
  call void @llvm.dbg.declare(metadata i8** %21, metadata !2905, metadata !DIExpression()), !dbg !2901
  %22 = load i8*, i8** %21, align 8, !dbg !2902
  %23 = call i8* @quotearg_char(i8* %22, i8 signext 58), !dbg !2903
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote_n_mem(i32, i8*, i64) #4 !dbg !2937 {
  %4 = load i32, i32* @x.47
  %5 = load i32, i32* @y.48
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  store i32 %0, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !2940, metadata !DIExpression()), !dbg !2941
  store i8* %1, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !2942, metadata !DIExpression()), !dbg !2943
  store i64 %2, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !2944, metadata !DIExpression()), !dbg !2945
  %15 = load i32, i32* %12, align 4, !dbg !2946
  %16 = load i8*, i8** %13, align 8, !dbg !2947
  %17 = load i64, i64* %14, align 8, !dbg !2948
  %18 = call i8* @quotearg_n_options(i32 %15, i8* %16, i64 %17, %struct.quoting_options* @quote_quoting_options), !dbg !2949
  %19 = load i32, i32* @x.47
  %20 = load i32, i32* @y.48
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %18, !dbg !2950

originalBBalteredBB:                              ; preds = %originalBB, %3
  %27 = alloca i32, align 4
  %28 = alloca i8*, align 8
  %29 = alloca i64, align 8
  store i32 %0, i32* %27, align 4
  call void @llvm.dbg.declare(metadata i32* %27, metadata !2951, metadata !DIExpression()), !dbg !2941
  store i8* %1, i8** %28, align 8
  call void @llvm.dbg.declare(metadata i8** %28, metadata !2983, metadata !DIExpression()), !dbg !2943
  store i64 %2, i64* %29, align 8
  call void @llvm.dbg.declare(metadata i64* %29, metadata !2984, metadata !DIExpression()), !dbg !2945
  %30 = load i32, i32* %27, align 4, !dbg !2946
  %31 = load i8*, i8** %28, align 8, !dbg !2947
  %32 = load i64, i64* %29, align 8, !dbg !2948
  %33 = call i8* @quotearg_n_options(i32 %30, i8* %31, i64 %32, %struct.quoting_options* @quote_quoting_options), !dbg !2949
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote_n(i32, i8*) #4 !dbg !2985 {
  %3 = load i32, i32* @x.49
  %4 = load i32, i32* @y.50
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !2988, metadata !DIExpression()), !dbg !2989
  store i8* %1, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !2990, metadata !DIExpression()), !dbg !2991
  %13 = load i32, i32* %11, align 4, !dbg !2992
  %14 = load i8*, i8** %12, align 8, !dbg !2993
  %15 = call i8* @quote_n_mem(i32 %13, i8* %14, i64 -1), !dbg !2994
  %16 = load i32, i32* @x.49
  %17 = load i32, i32* @y.50
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %15, !dbg !2995

originalBBalteredBB:                              ; preds = %originalBB, %2
  %24 = alloca i32, align 4
  %25 = alloca i8*, align 8
  store i32 %0, i32* %24, align 4
  call void @llvm.dbg.declare(metadata i32* %24, metadata !2996, metadata !DIExpression()), !dbg !2989
  store i8* %1, i8** %25, align 8
  call void @llvm.dbg.declare(metadata i8** %25, metadata !3028, metadata !DIExpression()), !dbg !2991
  %26 = load i32, i32* %24, align 4, !dbg !2992
  %27 = load i8*, i8** %25, align 8, !dbg !2993
  %28 = call i8* @quote_n_mem(i32 %26, i8* %27, i64 -1), !dbg !2994
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote(i8*) #4 !dbg !3029 {
  %2 = load i32, i32* @x.51
  %3 = load i32, i32* @y.52
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !3032, metadata !DIExpression()), !dbg !3033
  %11 = load i8*, i8** %10, align 8, !dbg !3034
  %12 = call i8* @quote_n(i32 0, i8* %11), !dbg !3035
  %13 = load i32, i32* @x.51
  %14 = load i32, i32* @y.52
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %12, !dbg !3036

originalBBalteredBB:                              ; preds = %originalBB, %1
  %21 = alloca i8*, align 8
  store i8* %0, i8** %21, align 8
  call void @llvm.dbg.declare(metadata i8** %21, metadata !3037, metadata !DIExpression()), !dbg !3033
  %22 = load i8*, i8** %21, align 8, !dbg !3034
  %23 = call i8* @quote_n(i32 0, i8* %22), !dbg !3035
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.dev_ino* @get_root_dev_ino(%struct.dev_ino*) #4 !dbg !3069 {
  %2 = load i32, i32* @x.53
  %3 = load i32, i32* @y.54
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct.dev_ino*, align 8
  %11 = alloca %struct.dev_ino*, align 8
  %12 = alloca %struct.stat, align 8
  store %struct.dev_ino* %0, %struct.dev_ino** %11, align 8
  call void @llvm.dbg.declare(metadata %struct.dev_ino** %11, metadata !3078, metadata !DIExpression()), !dbg !3079
  call void @llvm.dbg.declare(metadata %struct.stat* %12, metadata !3080, metadata !DIExpression()), !dbg !3102
  %13 = call i32 @lstat(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.80, i64 0, i64 0), %struct.stat* %12) #10, !dbg !3103
  %14 = icmp ne i32 %13, 0, !dbg !3103
  %15 = load i32, i32* @x.53
  %16 = load i32, i32* @y.54
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %14, label %23, label %40, !dbg !3105

23:                                               ; preds = %originalBBpart2
  %24 = load i32, i32* @x.53
  %25 = load i32, i32* @y.54
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %23, %originalBB1alteredBB
  store %struct.dev_ino* null, %struct.dev_ino** %10, align 8, !dbg !3106
  %32 = load i32, i32* @x.53
  %33 = load i32, i32* @y.54
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %66, !dbg !3106

40:                                               ; preds = %originalBBpart2
  %41 = load i32, i32* @x.53
  %42 = load i32, i32* @y.54
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %40, %originalBB6alteredBB
  %49 = getelementptr inbounds %struct.stat, %struct.stat* %12, i32 0, i32 1, !dbg !3107
  %50 = load i64, i64* %49, align 8, !dbg !3107
  %51 = load %struct.dev_ino*, %struct.dev_ino** %11, align 8, !dbg !3108
  %52 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %51, i32 0, i32 0, !dbg !3109
  store i64 %50, i64* %52, align 8, !dbg !3110
  %53 = getelementptr inbounds %struct.stat, %struct.stat* %12, i32 0, i32 0, !dbg !3111
  %54 = load i64, i64* %53, align 8, !dbg !3111
  %55 = load %struct.dev_ino*, %struct.dev_ino** %11, align 8, !dbg !3112
  %56 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %55, i32 0, i32 1, !dbg !3113
  store i64 %54, i64* %56, align 8, !dbg !3114
  %57 = load %struct.dev_ino*, %struct.dev_ino** %11, align 8, !dbg !3115
  store %struct.dev_ino* %57, %struct.dev_ino** %10, align 8, !dbg !3116
  %58 = load i32, i32* @x.53
  %59 = load i32, i32* @y.54
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %66, !dbg !3116

66:                                               ; preds = %originalBBpart28, %originalBBpart24
  %67 = load i32, i32* @x.53
  %68 = load i32, i32* @y.54
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %66, %originalBB10alteredBB
  %75 = load %struct.dev_ino*, %struct.dev_ino** %10, align 8, !dbg !3117
  %76 = load i32, i32* @x.53
  %77 = load i32, i32* @y.54
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  ret %struct.dev_ino* %75, !dbg !3117

originalBBalteredBB:                              ; preds = %originalBB, %1
  %84 = alloca %struct.dev_ino*, align 8
  %85 = alloca %struct.dev_ino*, align 8
  %86 = alloca %struct.stat, align 8
  store %struct.dev_ino* %0, %struct.dev_ino** %85, align 8
  call void @llvm.dbg.declare(metadata %struct.dev_ino** %85, metadata !3118, metadata !DIExpression()), !dbg !3079
  call void @llvm.dbg.declare(metadata %struct.stat* %86, metadata !3128, metadata !DIExpression()), !dbg !3102
  %87 = call i32 @lstat(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.80, i64 0, i64 0), %struct.stat* %86) #10, !dbg !3103
  %88 = icmp ne i32 %87, 0, !dbg !3103
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %23
  store %struct.dev_ino* null, %struct.dev_ino** %10, align 8, !dbg !3106
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %40
  %89 = getelementptr inbounds %struct.stat, %struct.stat* %12, i32 0, i32 1, !dbg !3107
  %90 = load i64, i64* %89, align 8, !dbg !3107
  %91 = load %struct.dev_ino*, %struct.dev_ino** %11, align 8, !dbg !3108
  %92 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %91, i32 0, i32 0, !dbg !3109
  store i64 %90, i64* %92, align 8, !dbg !3110
  %93 = getelementptr inbounds %struct.stat, %struct.stat* %12, i32 0, i32 0, !dbg !3111
  %94 = load i64, i64* %93, align 8, !dbg !3111
  %95 = load %struct.dev_ino*, %struct.dev_ino** %11, align 8, !dbg !3112
  %96 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %95, i32 0, i32 1, !dbg !3113
  store i64 %94, i64* %96, align 8, !dbg !3114
  %97 = load %struct.dev_ino*, %struct.dev_ino** %11, align 8, !dbg !3115
  store %struct.dev_ino* %97, %struct.dev_ino** %10, align 8, !dbg !3116
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %66
  %98 = load %struct.dev_ino*, %struct.dev_ino** %10, align 8, !dbg !3117
  br label %originalBB10
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc_arn(%struct._IO_FILE*, i8*, i8*, i8*, i8**, i64) #4 !dbg !3150 {
  %7 = load i32, i32* @x.55
  %8 = load i32, i32* @y.56
  %9 = sub i32 %7, 1
  %10 = mul i32 %7, %9
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  %13 = icmp slt i32 %8, 10
  %14 = or i1 %12, %13
  br i1 %14, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %6, %originalBBalteredBB
  %15 = alloca %struct._IO_FILE*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca i8*, align 8
  %19 = alloca i8**, align 8
  %20 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %15, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %15, metadata !3207, metadata !DIExpression()), !dbg !3208
  store i8* %1, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !3209, metadata !DIExpression()), !dbg !3210
  store i8* %2, i8** %17, align 8
  call void @llvm.dbg.declare(metadata i8** %17, metadata !3211, metadata !DIExpression()), !dbg !3212
  store i8* %3, i8** %18, align 8
  call void @llvm.dbg.declare(metadata i8** %18, metadata !3213, metadata !DIExpression()), !dbg !3214
  store i8** %4, i8*** %19, align 8
  call void @llvm.dbg.declare(metadata i8*** %19, metadata !3215, metadata !DIExpression()), !dbg !3216
  store i64 %5, i64* %20, align 8
  call void @llvm.dbg.declare(metadata i64* %20, metadata !3217, metadata !DIExpression()), !dbg !3218
  %21 = load i8*, i8** %16, align 8, !dbg !3219
  %22 = icmp ne i8* %21, null, !dbg !3219
  %23 = load i32, i32* @x.55
  %24 = load i32, i32* @y.56
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %31, label %53, !dbg !3221

31:                                               ; preds = %originalBBpart2
  %32 = load i32, i32* @x.55
  %33 = load i32, i32* @y.56
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3222
  %41 = load i8*, i8** %16, align 8, !dbg !3223
  %42 = load i8*, i8** %17, align 8, !dbg !3224
  %43 = load i8*, i8** %18, align 8, !dbg !3225
  %44 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %40, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.81, i64 0, i64 0), i8* %41, i8* %42, i8* %43), !dbg !3226
  %45 = load i32, i32* @x.55
  %46 = load i32, i32* @y.56
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %74, !dbg !3226

53:                                               ; preds = %originalBBpart2
  %54 = load i32, i32* @x.55
  %55 = load i32, i32* @y.56
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %53, %originalBB6alteredBB
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3227
  %63 = load i8*, i8** %17, align 8, !dbg !3228
  %64 = load i8*, i8** %18, align 8, !dbg !3229
  %65 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %62, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.82, i64 0, i64 0), i8* %63, i8* %64), !dbg !3230
  %66 = load i32, i32* @x.55
  %67 = load i32, i32* @y.56
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %74

74:                                               ; preds = %originalBBpart28, %originalBBpart24
  %75 = load i32, i32* @x.55
  %76 = load i32, i32* @y.56
  %77 = sub i32 %75, 1
  %78 = mul i32 %75, %77
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %80, %81
  br i1 %82, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %74, %originalBB10alteredBB
  %83 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3231
  %84 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.83, i64 0, i64 0)) #10, !dbg !3232
  %85 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %83, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @version_etc_copyright, i64 0, i64 0), i8* %84, i32 2020), !dbg !3233
  %86 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3234
  %87 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.84, i64 0, i64 0), %struct._IO_FILE* %86), !dbg !3234
  %88 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3235
  %89 = call i8* @gettext(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.4.85, i64 0, i64 0)) #10, !dbg !3236
  %90 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %88, i8* %89, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5.86, i64 0, i64 0)), !dbg !3237
  %91 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3238
  %92 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.84, i64 0, i64 0), %struct._IO_FILE* %91), !dbg !3238
  %93 = load i64, i64* %20, align 8, !dbg !3239
  %94 = load i32, i32* @x.55
  %95 = load i32, i32* @y.56
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  switch i64 %93, label %402 [
    i64 0, label %102
    i64 1, label %119
    i64 2, label %126
    i64 3, label %152
    i64 4, label %181
    i64 5, label %213
    i64 6, label %248
    i64 7, label %286
    i64 8, label %327
    i64 9, label %371
  ], !dbg !3240

102:                                              ; preds = %originalBBpart212
  %103 = load i32, i32* @x.55
  %104 = load i32, i32* @y.56
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %102, %originalBB14alteredBB
  %111 = load i32, i32* @x.55
  %112 = load i32, i32* @y.56
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %449, !dbg !3241

119:                                              ; preds = %originalBBpart212
  %120 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3243
  %121 = call i8* @gettext(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.87, i64 0, i64 0)) #10, !dbg !3244
  %122 = load i8**, i8*** %19, align 8, !dbg !3245
  %123 = getelementptr inbounds i8*, i8** %122, i64 0, !dbg !3245
  %124 = load i8*, i8** %123, align 8, !dbg !3245
  %125 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %120, i8* %121, i8* %124), !dbg !3246
  br label %449, !dbg !3247

126:                                              ; preds = %originalBBpart212
  %127 = load i32, i32* @x.55
  %128 = load i32, i32* @y.56
  %129 = sub i32 %127, 1
  %130 = mul i32 %127, %129
  %131 = urem i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %132, %133
  br i1 %134, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %126, %originalBB18alteredBB
  %135 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3248
  %136 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7.88, i64 0, i64 0)) #10, !dbg !3249
  %137 = load i8**, i8*** %19, align 8, !dbg !3250
  %138 = getelementptr inbounds i8*, i8** %137, i64 0, !dbg !3250
  %139 = load i8*, i8** %138, align 8, !dbg !3250
  %140 = load i8**, i8*** %19, align 8, !dbg !3251
  %141 = getelementptr inbounds i8*, i8** %140, i64 1, !dbg !3251
  %142 = load i8*, i8** %141, align 8, !dbg !3251
  %143 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %135, i8* %136, i8* %139, i8* %142), !dbg !3252
  %144 = load i32, i32* @x.55
  %145 = load i32, i32* @y.56
  %146 = sub i32 %144, 1
  %147 = mul i32 %144, %146
  %148 = urem i32 %147, 2
  %149 = icmp eq i32 %148, 0
  %150 = icmp slt i32 %145, 10
  %151 = or i1 %149, %150
  br i1 %151, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %449, !dbg !3253

152:                                              ; preds = %originalBBpart212
  %153 = load i32, i32* @x.55
  %154 = load i32, i32* @y.56
  %155 = sub i32 %153, 1
  %156 = mul i32 %153, %155
  %157 = urem i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = icmp slt i32 %154, 10
  %160 = or i1 %158, %159
  br i1 %160, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %152, %originalBB22alteredBB
  %161 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3254
  %162 = call i8* @gettext(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8.89, i64 0, i64 0)) #10, !dbg !3255
  %163 = load i8**, i8*** %19, align 8, !dbg !3256
  %164 = getelementptr inbounds i8*, i8** %163, i64 0, !dbg !3256
  %165 = load i8*, i8** %164, align 8, !dbg !3256
  %166 = load i8**, i8*** %19, align 8, !dbg !3257
  %167 = getelementptr inbounds i8*, i8** %166, i64 1, !dbg !3257
  %168 = load i8*, i8** %167, align 8, !dbg !3257
  %169 = load i8**, i8*** %19, align 8, !dbg !3258
  %170 = getelementptr inbounds i8*, i8** %169, i64 2, !dbg !3258
  %171 = load i8*, i8** %170, align 8, !dbg !3258
  %172 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %161, i8* %162, i8* %165, i8* %168, i8* %171), !dbg !3259
  %173 = load i32, i32* @x.55
  %174 = load i32, i32* @y.56
  %175 = sub i32 %173, 1
  %176 = mul i32 %173, %175
  %177 = urem i32 %176, 2
  %178 = icmp eq i32 %177, 0
  %179 = icmp slt i32 %174, 10
  %180 = or i1 %178, %179
  br i1 %180, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %449, !dbg !3260

181:                                              ; preds = %originalBBpart212
  %182 = load i32, i32* @x.55
  %183 = load i32, i32* @y.56
  %184 = sub i32 %182, 1
  %185 = mul i32 %182, %184
  %186 = urem i32 %185, 2
  %187 = icmp eq i32 %186, 0
  %188 = icmp slt i32 %183, 10
  %189 = or i1 %187, %188
  br i1 %189, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %181, %originalBB26alteredBB
  %190 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3261
  %191 = call i8* @gettext(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.9.90, i64 0, i64 0)) #10, !dbg !3262
  %192 = load i8**, i8*** %19, align 8, !dbg !3263
  %193 = getelementptr inbounds i8*, i8** %192, i64 0, !dbg !3263
  %194 = load i8*, i8** %193, align 8, !dbg !3263
  %195 = load i8**, i8*** %19, align 8, !dbg !3264
  %196 = getelementptr inbounds i8*, i8** %195, i64 1, !dbg !3264
  %197 = load i8*, i8** %196, align 8, !dbg !3264
  %198 = load i8**, i8*** %19, align 8, !dbg !3265
  %199 = getelementptr inbounds i8*, i8** %198, i64 2, !dbg !3265
  %200 = load i8*, i8** %199, align 8, !dbg !3265
  %201 = load i8**, i8*** %19, align 8, !dbg !3266
  %202 = getelementptr inbounds i8*, i8** %201, i64 3, !dbg !3266
  %203 = load i8*, i8** %202, align 8, !dbg !3266
  %204 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %190, i8* %191, i8* %194, i8* %197, i8* %200, i8* %203), !dbg !3267
  %205 = load i32, i32* @x.55
  %206 = load i32, i32* @y.56
  %207 = sub i32 %205, 1
  %208 = mul i32 %205, %207
  %209 = urem i32 %208, 2
  %210 = icmp eq i32 %209, 0
  %211 = icmp slt i32 %206, 10
  %212 = or i1 %210, %211
  br i1 %212, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %449, !dbg !3268

213:                                              ; preds = %originalBBpart212
  %214 = load i32, i32* @x.55
  %215 = load i32, i32* @y.56
  %216 = sub i32 %214, 1
  %217 = mul i32 %214, %216
  %218 = urem i32 %217, 2
  %219 = icmp eq i32 %218, 0
  %220 = icmp slt i32 %215, 10
  %221 = or i1 %219, %220
  br i1 %221, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %213, %originalBB30alteredBB
  %222 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3269
  %223 = call i8* @gettext(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.10.91, i64 0, i64 0)) #10, !dbg !3270
  %224 = load i8**, i8*** %19, align 8, !dbg !3271
  %225 = getelementptr inbounds i8*, i8** %224, i64 0, !dbg !3271
  %226 = load i8*, i8** %225, align 8, !dbg !3271
  %227 = load i8**, i8*** %19, align 8, !dbg !3272
  %228 = getelementptr inbounds i8*, i8** %227, i64 1, !dbg !3272
  %229 = load i8*, i8** %228, align 8, !dbg !3272
  %230 = load i8**, i8*** %19, align 8, !dbg !3273
  %231 = getelementptr inbounds i8*, i8** %230, i64 2, !dbg !3273
  %232 = load i8*, i8** %231, align 8, !dbg !3273
  %233 = load i8**, i8*** %19, align 8, !dbg !3274
  %234 = getelementptr inbounds i8*, i8** %233, i64 3, !dbg !3274
  %235 = load i8*, i8** %234, align 8, !dbg !3274
  %236 = load i8**, i8*** %19, align 8, !dbg !3275
  %237 = getelementptr inbounds i8*, i8** %236, i64 4, !dbg !3275
  %238 = load i8*, i8** %237, align 8, !dbg !3275
  %239 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %222, i8* %223, i8* %226, i8* %229, i8* %232, i8* %235, i8* %238), !dbg !3276
  %240 = load i32, i32* @x.55
  %241 = load i32, i32* @y.56
  %242 = sub i32 %240, 1
  %243 = mul i32 %240, %242
  %244 = urem i32 %243, 2
  %245 = icmp eq i32 %244, 0
  %246 = icmp slt i32 %241, 10
  %247 = or i1 %245, %246
  br i1 %247, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %449, !dbg !3277

248:                                              ; preds = %originalBBpart212
  %249 = load i32, i32* @x.55
  %250 = load i32, i32* @y.56
  %251 = sub i32 %249, 1
  %252 = mul i32 %249, %251
  %253 = urem i32 %252, 2
  %254 = icmp eq i32 %253, 0
  %255 = icmp slt i32 %250, 10
  %256 = or i1 %254, %255
  br i1 %256, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %248, %originalBB34alteredBB
  %257 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3278
  %258 = call i8* @gettext(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11.92, i64 0, i64 0)) #10, !dbg !3279
  %259 = load i8**, i8*** %19, align 8, !dbg !3280
  %260 = getelementptr inbounds i8*, i8** %259, i64 0, !dbg !3280
  %261 = load i8*, i8** %260, align 8, !dbg !3280
  %262 = load i8**, i8*** %19, align 8, !dbg !3281
  %263 = getelementptr inbounds i8*, i8** %262, i64 1, !dbg !3281
  %264 = load i8*, i8** %263, align 8, !dbg !3281
  %265 = load i8**, i8*** %19, align 8, !dbg !3282
  %266 = getelementptr inbounds i8*, i8** %265, i64 2, !dbg !3282
  %267 = load i8*, i8** %266, align 8, !dbg !3282
  %268 = load i8**, i8*** %19, align 8, !dbg !3283
  %269 = getelementptr inbounds i8*, i8** %268, i64 3, !dbg !3283
  %270 = load i8*, i8** %269, align 8, !dbg !3283
  %271 = load i8**, i8*** %19, align 8, !dbg !3284
  %272 = getelementptr inbounds i8*, i8** %271, i64 4, !dbg !3284
  %273 = load i8*, i8** %272, align 8, !dbg !3284
  %274 = load i8**, i8*** %19, align 8, !dbg !3285
  %275 = getelementptr inbounds i8*, i8** %274, i64 5, !dbg !3285
  %276 = load i8*, i8** %275, align 8, !dbg !3285
  %277 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %257, i8* %258, i8* %261, i8* %264, i8* %267, i8* %270, i8* %273, i8* %276), !dbg !3286
  %278 = load i32, i32* @x.55
  %279 = load i32, i32* @y.56
  %280 = sub i32 %278, 1
  %281 = mul i32 %278, %280
  %282 = urem i32 %281, 2
  %283 = icmp eq i32 %282, 0
  %284 = icmp slt i32 %279, 10
  %285 = or i1 %283, %284
  br i1 %285, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %449, !dbg !3287

286:                                              ; preds = %originalBBpart212
  %287 = load i32, i32* @x.55
  %288 = load i32, i32* @y.56
  %289 = sub i32 %287, 1
  %290 = mul i32 %287, %289
  %291 = urem i32 %290, 2
  %292 = icmp eq i32 %291, 0
  %293 = icmp slt i32 %288, 10
  %294 = or i1 %292, %293
  br i1 %294, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %286, %originalBB38alteredBB
  %295 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3288
  %296 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.12.93, i64 0, i64 0)) #10, !dbg !3289
  %297 = load i8**, i8*** %19, align 8, !dbg !3290
  %298 = getelementptr inbounds i8*, i8** %297, i64 0, !dbg !3290
  %299 = load i8*, i8** %298, align 8, !dbg !3290
  %300 = load i8**, i8*** %19, align 8, !dbg !3291
  %301 = getelementptr inbounds i8*, i8** %300, i64 1, !dbg !3291
  %302 = load i8*, i8** %301, align 8, !dbg !3291
  %303 = load i8**, i8*** %19, align 8, !dbg !3292
  %304 = getelementptr inbounds i8*, i8** %303, i64 2, !dbg !3292
  %305 = load i8*, i8** %304, align 8, !dbg !3292
  %306 = load i8**, i8*** %19, align 8, !dbg !3293
  %307 = getelementptr inbounds i8*, i8** %306, i64 3, !dbg !3293
  %308 = load i8*, i8** %307, align 8, !dbg !3293
  %309 = load i8**, i8*** %19, align 8, !dbg !3294
  %310 = getelementptr inbounds i8*, i8** %309, i64 4, !dbg !3294
  %311 = load i8*, i8** %310, align 8, !dbg !3294
  %312 = load i8**, i8*** %19, align 8, !dbg !3295
  %313 = getelementptr inbounds i8*, i8** %312, i64 5, !dbg !3295
  %314 = load i8*, i8** %313, align 8, !dbg !3295
  %315 = load i8**, i8*** %19, align 8, !dbg !3296
  %316 = getelementptr inbounds i8*, i8** %315, i64 6, !dbg !3296
  %317 = load i8*, i8** %316, align 8, !dbg !3296
  %318 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %295, i8* %296, i8* %299, i8* %302, i8* %305, i8* %308, i8* %311, i8* %314, i8* %317), !dbg !3297
  %319 = load i32, i32* @x.55
  %320 = load i32, i32* @y.56
  %321 = sub i32 %319, 1
  %322 = mul i32 %319, %321
  %323 = urem i32 %322, 2
  %324 = icmp eq i32 %323, 0
  %325 = icmp slt i32 %320, 10
  %326 = or i1 %324, %325
  br i1 %326, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br label %449, !dbg !3298

327:                                              ; preds = %originalBBpart212
  %328 = load i32, i32* @x.55
  %329 = load i32, i32* @y.56
  %330 = sub i32 %328, 1
  %331 = mul i32 %328, %330
  %332 = urem i32 %331, 2
  %333 = icmp eq i32 %332, 0
  %334 = icmp slt i32 %329, 10
  %335 = or i1 %333, %334
  br i1 %335, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %327, %originalBB42alteredBB
  %336 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3299
  %337 = call i8* @gettext(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.13.94, i64 0, i64 0)) #10, !dbg !3300
  %338 = load i8**, i8*** %19, align 8, !dbg !3301
  %339 = getelementptr inbounds i8*, i8** %338, i64 0, !dbg !3301
  %340 = load i8*, i8** %339, align 8, !dbg !3301
  %341 = load i8**, i8*** %19, align 8, !dbg !3302
  %342 = getelementptr inbounds i8*, i8** %341, i64 1, !dbg !3302
  %343 = load i8*, i8** %342, align 8, !dbg !3302
  %344 = load i8**, i8*** %19, align 8, !dbg !3303
  %345 = getelementptr inbounds i8*, i8** %344, i64 2, !dbg !3303
  %346 = load i8*, i8** %345, align 8, !dbg !3303
  %347 = load i8**, i8*** %19, align 8, !dbg !3304
  %348 = getelementptr inbounds i8*, i8** %347, i64 3, !dbg !3304
  %349 = load i8*, i8** %348, align 8, !dbg !3304
  %350 = load i8**, i8*** %19, align 8, !dbg !3305
  %351 = getelementptr inbounds i8*, i8** %350, i64 4, !dbg !3305
  %352 = load i8*, i8** %351, align 8, !dbg !3305
  %353 = load i8**, i8*** %19, align 8, !dbg !3306
  %354 = getelementptr inbounds i8*, i8** %353, i64 5, !dbg !3306
  %355 = load i8*, i8** %354, align 8, !dbg !3306
  %356 = load i8**, i8*** %19, align 8, !dbg !3307
  %357 = getelementptr inbounds i8*, i8** %356, i64 6, !dbg !3307
  %358 = load i8*, i8** %357, align 8, !dbg !3307
  %359 = load i8**, i8*** %19, align 8, !dbg !3308
  %360 = getelementptr inbounds i8*, i8** %359, i64 7, !dbg !3308
  %361 = load i8*, i8** %360, align 8, !dbg !3308
  %362 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %336, i8* %337, i8* %340, i8* %343, i8* %346, i8* %349, i8* %352, i8* %355, i8* %358, i8* %361), !dbg !3309
  %363 = load i32, i32* @x.55
  %364 = load i32, i32* @y.56
  %365 = sub i32 %363, 1
  %366 = mul i32 %363, %365
  %367 = urem i32 %366, 2
  %368 = icmp eq i32 %367, 0
  %369 = icmp slt i32 %364, 10
  %370 = or i1 %368, %369
  br i1 %370, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br label %449, !dbg !3310

371:                                              ; preds = %originalBBpart212
  %372 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3311
  %373 = call i8* @gettext(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.14.95, i64 0, i64 0)) #10, !dbg !3312
  %374 = load i8**, i8*** %19, align 8, !dbg !3313
  %375 = getelementptr inbounds i8*, i8** %374, i64 0, !dbg !3313
  %376 = load i8*, i8** %375, align 8, !dbg !3313
  %377 = load i8**, i8*** %19, align 8, !dbg !3314
  %378 = getelementptr inbounds i8*, i8** %377, i64 1, !dbg !3314
  %379 = load i8*, i8** %378, align 8, !dbg !3314
  %380 = load i8**, i8*** %19, align 8, !dbg !3315
  %381 = getelementptr inbounds i8*, i8** %380, i64 2, !dbg !3315
  %382 = load i8*, i8** %381, align 8, !dbg !3315
  %383 = load i8**, i8*** %19, align 8, !dbg !3316
  %384 = getelementptr inbounds i8*, i8** %383, i64 3, !dbg !3316
  %385 = load i8*, i8** %384, align 8, !dbg !3316
  %386 = load i8**, i8*** %19, align 8, !dbg !3317
  %387 = getelementptr inbounds i8*, i8** %386, i64 4, !dbg !3317
  %388 = load i8*, i8** %387, align 8, !dbg !3317
  %389 = load i8**, i8*** %19, align 8, !dbg !3318
  %390 = getelementptr inbounds i8*, i8** %389, i64 5, !dbg !3318
  %391 = load i8*, i8** %390, align 8, !dbg !3318
  %392 = load i8**, i8*** %19, align 8, !dbg !3319
  %393 = getelementptr inbounds i8*, i8** %392, i64 6, !dbg !3319
  %394 = load i8*, i8** %393, align 8, !dbg !3319
  %395 = load i8**, i8*** %19, align 8, !dbg !3320
  %396 = getelementptr inbounds i8*, i8** %395, i64 7, !dbg !3320
  %397 = load i8*, i8** %396, align 8, !dbg !3320
  %398 = load i8**, i8*** %19, align 8, !dbg !3321
  %399 = getelementptr inbounds i8*, i8** %398, i64 8, !dbg !3321
  %400 = load i8*, i8** %399, align 8, !dbg !3321
  %401 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %372, i8* %373, i8* %376, i8* %379, i8* %382, i8* %385, i8* %388, i8* %391, i8* %394, i8* %397, i8* %400), !dbg !3322
  br label %449, !dbg !3323

402:                                              ; preds = %originalBBpart212
  %403 = load i32, i32* @x.55
  %404 = load i32, i32* @y.56
  %405 = sub i32 %403, 1
  %406 = mul i32 %403, %405
  %407 = urem i32 %406, 2
  %408 = icmp eq i32 %407, 0
  %409 = icmp slt i32 %404, 10
  %410 = or i1 %408, %409
  br i1 %410, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %402, %originalBB46alteredBB
  %411 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3324
  %412 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.15.96, i64 0, i64 0)) #10, !dbg !3325
  %413 = load i8**, i8*** %19, align 8, !dbg !3326
  %414 = getelementptr inbounds i8*, i8** %413, i64 0, !dbg !3326
  %415 = load i8*, i8** %414, align 8, !dbg !3326
  %416 = load i8**, i8*** %19, align 8, !dbg !3327
  %417 = getelementptr inbounds i8*, i8** %416, i64 1, !dbg !3327
  %418 = load i8*, i8** %417, align 8, !dbg !3327
  %419 = load i8**, i8*** %19, align 8, !dbg !3328
  %420 = getelementptr inbounds i8*, i8** %419, i64 2, !dbg !3328
  %421 = load i8*, i8** %420, align 8, !dbg !3328
  %422 = load i8**, i8*** %19, align 8, !dbg !3329
  %423 = getelementptr inbounds i8*, i8** %422, i64 3, !dbg !3329
  %424 = load i8*, i8** %423, align 8, !dbg !3329
  %425 = load i8**, i8*** %19, align 8, !dbg !3330
  %426 = getelementptr inbounds i8*, i8** %425, i64 4, !dbg !3330
  %427 = load i8*, i8** %426, align 8, !dbg !3330
  %428 = load i8**, i8*** %19, align 8, !dbg !3331
  %429 = getelementptr inbounds i8*, i8** %428, i64 5, !dbg !3331
  %430 = load i8*, i8** %429, align 8, !dbg !3331
  %431 = load i8**, i8*** %19, align 8, !dbg !3332
  %432 = getelementptr inbounds i8*, i8** %431, i64 6, !dbg !3332
  %433 = load i8*, i8** %432, align 8, !dbg !3332
  %434 = load i8**, i8*** %19, align 8, !dbg !3333
  %435 = getelementptr inbounds i8*, i8** %434, i64 7, !dbg !3333
  %436 = load i8*, i8** %435, align 8, !dbg !3333
  %437 = load i8**, i8*** %19, align 8, !dbg !3334
  %438 = getelementptr inbounds i8*, i8** %437, i64 8, !dbg !3334
  %439 = load i8*, i8** %438, align 8, !dbg !3334
  %440 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %411, i8* %412, i8* %415, i8* %418, i8* %421, i8* %424, i8* %427, i8* %430, i8* %433, i8* %436, i8* %439), !dbg !3335
  %441 = load i32, i32* @x.55
  %442 = load i32, i32* @y.56
  %443 = sub i32 %441, 1
  %444 = mul i32 %441, %443
  %445 = urem i32 %444, 2
  %446 = icmp eq i32 %445, 0
  %447 = icmp slt i32 %442, 10
  %448 = or i1 %446, %447
  br i1 %448, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br label %449, !dbg !3336

449:                                              ; preds = %originalBBpart248, %371, %originalBBpart244, %originalBBpart240, %originalBBpart236, %originalBBpart232, %originalBBpart228, %originalBBpart224, %originalBBpart220, %119, %originalBBpart216
  %450 = load i32, i32* @x.55
  %451 = load i32, i32* @y.56
  %452 = sub i32 %450, 1
  %453 = mul i32 %450, %452
  %454 = urem i32 %453, 2
  %455 = icmp eq i32 %454, 0
  %456 = icmp slt i32 %451, 10
  %457 = or i1 %455, %456
  br i1 %457, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %449, %originalBB50alteredBB
  %458 = load i32, i32* @x.55
  %459 = load i32, i32* @y.56
  %460 = sub i32 %458, 1
  %461 = mul i32 %458, %460
  %462 = urem i32 %461, 2
  %463 = icmp eq i32 %462, 0
  %464 = icmp slt i32 %459, 10
  %465 = or i1 %463, %464
  br i1 %465, label %originalBBpart252, label %originalBB50alteredBB

originalBBpart252:                                ; preds = %originalBB50
  ret void, !dbg !3337

originalBBalteredBB:                              ; preds = %originalBB, %6
  %466 = alloca %struct._IO_FILE*, align 8
  %467 = alloca i8*, align 8
  %468 = alloca i8*, align 8
  %469 = alloca i8*, align 8
  %470 = alloca i8**, align 8
  %471 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %466, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %466, metadata !3338, metadata !DIExpression()), !dbg !3208
  store i8* %1, i8** %467, align 8
  call void @llvm.dbg.declare(metadata i8** %467, metadata !3377, metadata !DIExpression()), !dbg !3210
  store i8* %2, i8** %468, align 8
  call void @llvm.dbg.declare(metadata i8** %468, metadata !3378, metadata !DIExpression()), !dbg !3212
  store i8* %3, i8** %469, align 8
  call void @llvm.dbg.declare(metadata i8** %469, metadata !3379, metadata !DIExpression()), !dbg !3214
  store i8** %4, i8*** %470, align 8
  call void @llvm.dbg.declare(metadata i8*** %470, metadata !3380, metadata !DIExpression()), !dbg !3216
  store i64 %5, i64* %471, align 8
  call void @llvm.dbg.declare(metadata i64* %471, metadata !3381, metadata !DIExpression()), !dbg !3218
  %472 = load i8*, i8** %467, align 8, !dbg !3219
  %473 = icmp ne i8* %472, null, !dbg !3219
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  %474 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3222
  %475 = load i8*, i8** %16, align 8, !dbg !3223
  %476 = load i8*, i8** %17, align 8, !dbg !3224
  %477 = load i8*, i8** %18, align 8, !dbg !3225
  %478 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %474, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.81, i64 0, i64 0), i8* %475, i8* %476, i8* %477), !dbg !3226
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %53
  %479 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3227
  %480 = load i8*, i8** %17, align 8, !dbg !3228
  %481 = load i8*, i8** %18, align 8, !dbg !3229
  %482 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %479, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.82, i64 0, i64 0), i8* %480, i8* %481), !dbg !3230
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %74
  %483 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3231
  %484 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.83, i64 0, i64 0)) #10, !dbg !3232
  %485 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %483, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @version_etc_copyright, i64 0, i64 0), i8* %484, i32 2020), !dbg !3233
  %486 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3234
  %487 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.84, i64 0, i64 0), %struct._IO_FILE* %486), !dbg !3234
  %488 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3235
  %489 = call i8* @gettext(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.4.85, i64 0, i64 0)) #10, !dbg !3236
  %490 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %488, i8* %489, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5.86, i64 0, i64 0)), !dbg !3237
  %491 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3238
  %492 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.84, i64 0, i64 0), %struct._IO_FILE* %491), !dbg !3238
  %493 = load i64, i64* %20, align 8, !dbg !3239
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %102
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %126
  %494 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3248
  %495 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7.88, i64 0, i64 0)) #10, !dbg !3249
  %496 = load i8**, i8*** %19, align 8, !dbg !3250
  %497 = getelementptr inbounds i8*, i8** %496, i64 0, !dbg !3250
  %498 = load i8*, i8** %497, align 8, !dbg !3250
  %499 = load i8**, i8*** %19, align 8, !dbg !3251
  %500 = getelementptr inbounds i8*, i8** %499, i64 1, !dbg !3251
  %501 = load i8*, i8** %500, align 8, !dbg !3251
  %502 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %494, i8* %495, i8* %498, i8* %501), !dbg !3252
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %152
  %503 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3254
  %504 = call i8* @gettext(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8.89, i64 0, i64 0)) #10, !dbg !3255
  %505 = load i8**, i8*** %19, align 8, !dbg !3256
  %506 = getelementptr inbounds i8*, i8** %505, i64 0, !dbg !3256
  %507 = load i8*, i8** %506, align 8, !dbg !3256
  %508 = load i8**, i8*** %19, align 8, !dbg !3257
  %509 = getelementptr inbounds i8*, i8** %508, i64 1, !dbg !3257
  %510 = load i8*, i8** %509, align 8, !dbg !3257
  %511 = load i8**, i8*** %19, align 8, !dbg !3258
  %512 = getelementptr inbounds i8*, i8** %511, i64 2, !dbg !3258
  %513 = load i8*, i8** %512, align 8, !dbg !3258
  %514 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %503, i8* %504, i8* %507, i8* %510, i8* %513), !dbg !3259
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %181
  %515 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3261
  %516 = call i8* @gettext(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.9.90, i64 0, i64 0)) #10, !dbg !3262
  %517 = load i8**, i8*** %19, align 8, !dbg !3263
  %518 = getelementptr inbounds i8*, i8** %517, i64 0, !dbg !3263
  %519 = load i8*, i8** %518, align 8, !dbg !3263
  %520 = load i8**, i8*** %19, align 8, !dbg !3264
  %521 = getelementptr inbounds i8*, i8** %520, i64 1, !dbg !3264
  %522 = load i8*, i8** %521, align 8, !dbg !3264
  %523 = load i8**, i8*** %19, align 8, !dbg !3265
  %524 = getelementptr inbounds i8*, i8** %523, i64 2, !dbg !3265
  %525 = load i8*, i8** %524, align 8, !dbg !3265
  %526 = load i8**, i8*** %19, align 8, !dbg !3266
  %527 = getelementptr inbounds i8*, i8** %526, i64 3, !dbg !3266
  %528 = load i8*, i8** %527, align 8, !dbg !3266
  %529 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %515, i8* %516, i8* %519, i8* %522, i8* %525, i8* %528), !dbg !3267
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %213
  %530 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3269
  %531 = call i8* @gettext(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.10.91, i64 0, i64 0)) #10, !dbg !3270
  %532 = load i8**, i8*** %19, align 8, !dbg !3271
  %533 = getelementptr inbounds i8*, i8** %532, i64 0, !dbg !3271
  %534 = load i8*, i8** %533, align 8, !dbg !3271
  %535 = load i8**, i8*** %19, align 8, !dbg !3272
  %536 = getelementptr inbounds i8*, i8** %535, i64 1, !dbg !3272
  %537 = load i8*, i8** %536, align 8, !dbg !3272
  %538 = load i8**, i8*** %19, align 8, !dbg !3273
  %539 = getelementptr inbounds i8*, i8** %538, i64 2, !dbg !3273
  %540 = load i8*, i8** %539, align 8, !dbg !3273
  %541 = load i8**, i8*** %19, align 8, !dbg !3274
  %542 = getelementptr inbounds i8*, i8** %541, i64 3, !dbg !3274
  %543 = load i8*, i8** %542, align 8, !dbg !3274
  %544 = load i8**, i8*** %19, align 8, !dbg !3275
  %545 = getelementptr inbounds i8*, i8** %544, i64 4, !dbg !3275
  %546 = load i8*, i8** %545, align 8, !dbg !3275
  %547 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %530, i8* %531, i8* %534, i8* %537, i8* %540, i8* %543, i8* %546), !dbg !3276
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %248
  %548 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3278
  %549 = call i8* @gettext(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11.92, i64 0, i64 0)) #10, !dbg !3279
  %550 = load i8**, i8*** %19, align 8, !dbg !3280
  %551 = getelementptr inbounds i8*, i8** %550, i64 0, !dbg !3280
  %552 = load i8*, i8** %551, align 8, !dbg !3280
  %553 = load i8**, i8*** %19, align 8, !dbg !3281
  %554 = getelementptr inbounds i8*, i8** %553, i64 1, !dbg !3281
  %555 = load i8*, i8** %554, align 8, !dbg !3281
  %556 = load i8**, i8*** %19, align 8, !dbg !3282
  %557 = getelementptr inbounds i8*, i8** %556, i64 2, !dbg !3282
  %558 = load i8*, i8** %557, align 8, !dbg !3282
  %559 = load i8**, i8*** %19, align 8, !dbg !3283
  %560 = getelementptr inbounds i8*, i8** %559, i64 3, !dbg !3283
  %561 = load i8*, i8** %560, align 8, !dbg !3283
  %562 = load i8**, i8*** %19, align 8, !dbg !3284
  %563 = getelementptr inbounds i8*, i8** %562, i64 4, !dbg !3284
  %564 = load i8*, i8** %563, align 8, !dbg !3284
  %565 = load i8**, i8*** %19, align 8, !dbg !3285
  %566 = getelementptr inbounds i8*, i8** %565, i64 5, !dbg !3285
  %567 = load i8*, i8** %566, align 8, !dbg !3285
  %568 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %548, i8* %549, i8* %552, i8* %555, i8* %558, i8* %561, i8* %564, i8* %567), !dbg !3286
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %286
  %569 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3288
  %570 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.12.93, i64 0, i64 0)) #10, !dbg !3289
  %571 = load i8**, i8*** %19, align 8, !dbg !3290
  %572 = getelementptr inbounds i8*, i8** %571, i64 0, !dbg !3290
  %573 = load i8*, i8** %572, align 8, !dbg !3290
  %574 = load i8**, i8*** %19, align 8, !dbg !3291
  %575 = getelementptr inbounds i8*, i8** %574, i64 1, !dbg !3291
  %576 = load i8*, i8** %575, align 8, !dbg !3291
  %577 = load i8**, i8*** %19, align 8, !dbg !3292
  %578 = getelementptr inbounds i8*, i8** %577, i64 2, !dbg !3292
  %579 = load i8*, i8** %578, align 8, !dbg !3292
  %580 = load i8**, i8*** %19, align 8, !dbg !3293
  %581 = getelementptr inbounds i8*, i8** %580, i64 3, !dbg !3293
  %582 = load i8*, i8** %581, align 8, !dbg !3293
  %583 = load i8**, i8*** %19, align 8, !dbg !3294
  %584 = getelementptr inbounds i8*, i8** %583, i64 4, !dbg !3294
  %585 = load i8*, i8** %584, align 8, !dbg !3294
  %586 = load i8**, i8*** %19, align 8, !dbg !3295
  %587 = getelementptr inbounds i8*, i8** %586, i64 5, !dbg !3295
  %588 = load i8*, i8** %587, align 8, !dbg !3295
  %589 = load i8**, i8*** %19, align 8, !dbg !3296
  %590 = getelementptr inbounds i8*, i8** %589, i64 6, !dbg !3296
  %591 = load i8*, i8** %590, align 8, !dbg !3296
  %592 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %569, i8* %570, i8* %573, i8* %576, i8* %579, i8* %582, i8* %585, i8* %588, i8* %591), !dbg !3297
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %327
  %593 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3299
  %594 = call i8* @gettext(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.13.94, i64 0, i64 0)) #10, !dbg !3300
  %595 = load i8**, i8*** %19, align 8, !dbg !3301
  %596 = getelementptr inbounds i8*, i8** %595, i64 0, !dbg !3301
  %597 = load i8*, i8** %596, align 8, !dbg !3301
  %598 = load i8**, i8*** %19, align 8, !dbg !3302
  %599 = getelementptr inbounds i8*, i8** %598, i64 1, !dbg !3302
  %600 = load i8*, i8** %599, align 8, !dbg !3302
  %601 = load i8**, i8*** %19, align 8, !dbg !3303
  %602 = getelementptr inbounds i8*, i8** %601, i64 2, !dbg !3303
  %603 = load i8*, i8** %602, align 8, !dbg !3303
  %604 = load i8**, i8*** %19, align 8, !dbg !3304
  %605 = getelementptr inbounds i8*, i8** %604, i64 3, !dbg !3304
  %606 = load i8*, i8** %605, align 8, !dbg !3304
  %607 = load i8**, i8*** %19, align 8, !dbg !3305
  %608 = getelementptr inbounds i8*, i8** %607, i64 4, !dbg !3305
  %609 = load i8*, i8** %608, align 8, !dbg !3305
  %610 = load i8**, i8*** %19, align 8, !dbg !3306
  %611 = getelementptr inbounds i8*, i8** %610, i64 5, !dbg !3306
  %612 = load i8*, i8** %611, align 8, !dbg !3306
  %613 = load i8**, i8*** %19, align 8, !dbg !3307
  %614 = getelementptr inbounds i8*, i8** %613, i64 6, !dbg !3307
  %615 = load i8*, i8** %614, align 8, !dbg !3307
  %616 = load i8**, i8*** %19, align 8, !dbg !3308
  %617 = getelementptr inbounds i8*, i8** %616, i64 7, !dbg !3308
  %618 = load i8*, i8** %617, align 8, !dbg !3308
  %619 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %593, i8* %594, i8* %597, i8* %600, i8* %603, i8* %606, i8* %609, i8* %612, i8* %615, i8* %618), !dbg !3309
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %402
  %620 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3324
  %621 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.15.96, i64 0, i64 0)) #10, !dbg !3325
  %622 = load i8**, i8*** %19, align 8, !dbg !3326
  %623 = getelementptr inbounds i8*, i8** %622, i64 0, !dbg !3326
  %624 = load i8*, i8** %623, align 8, !dbg !3326
  %625 = load i8**, i8*** %19, align 8, !dbg !3327
  %626 = getelementptr inbounds i8*, i8** %625, i64 1, !dbg !3327
  %627 = load i8*, i8** %626, align 8, !dbg !3327
  %628 = load i8**, i8*** %19, align 8, !dbg !3328
  %629 = getelementptr inbounds i8*, i8** %628, i64 2, !dbg !3328
  %630 = load i8*, i8** %629, align 8, !dbg !3328
  %631 = load i8**, i8*** %19, align 8, !dbg !3329
  %632 = getelementptr inbounds i8*, i8** %631, i64 3, !dbg !3329
  %633 = load i8*, i8** %632, align 8, !dbg !3329
  %634 = load i8**, i8*** %19, align 8, !dbg !3330
  %635 = getelementptr inbounds i8*, i8** %634, i64 4, !dbg !3330
  %636 = load i8*, i8** %635, align 8, !dbg !3330
  %637 = load i8**, i8*** %19, align 8, !dbg !3331
  %638 = getelementptr inbounds i8*, i8** %637, i64 5, !dbg !3331
  %639 = load i8*, i8** %638, align 8, !dbg !3331
  %640 = load i8**, i8*** %19, align 8, !dbg !3332
  %641 = getelementptr inbounds i8*, i8** %640, i64 6, !dbg !3332
  %642 = load i8*, i8** %641, align 8, !dbg !3332
  %643 = load i8**, i8*** %19, align 8, !dbg !3333
  %644 = getelementptr inbounds i8*, i8** %643, i64 7, !dbg !3333
  %645 = load i8*, i8** %644, align 8, !dbg !3333
  %646 = load i8**, i8*** %19, align 8, !dbg !3334
  %647 = getelementptr inbounds i8*, i8** %646, i64 8, !dbg !3334
  %648 = load i8*, i8** %647, align 8, !dbg !3334
  %649 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %620, i8* %621, i8* %624, i8* %627, i8* %630, i8* %633, i8* %636, i8* %639, i8* %642, i8* %645, i8* %648), !dbg !3335
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %449
  br label %originalBB50
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc_va(%struct._IO_FILE*, i8*, i8*, i8*, %struct.__va_list_tag*) #4 !dbg !3382 {
  %6 = load i32, i32* @x.57
  %7 = load i32, i32* @y.58
  %8 = sub i32 %6, 1
  %9 = mul i32 %6, %8
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  %12 = icmp slt i32 %7, 10
  %13 = or i1 %11, %12
  br i1 %13, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %5, %originalBBalteredBB
  %14 = alloca %struct._IO_FILE*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca %struct.__va_list_tag*, align 8
  %19 = alloca i64, align 8
  %20 = alloca [10 x i8*], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %14, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %14, metadata !3392, metadata !DIExpression()), !dbg !3393
  store i8* %1, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !3394, metadata !DIExpression()), !dbg !3395
  store i8* %2, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !3396, metadata !DIExpression()), !dbg !3397
  store i8* %3, i8** %17, align 8
  call void @llvm.dbg.declare(metadata i8** %17, metadata !3398, metadata !DIExpression()), !dbg !3399
  store %struct.__va_list_tag* %4, %struct.__va_list_tag** %18, align 8
  call void @llvm.dbg.declare(metadata %struct.__va_list_tag** %18, metadata !3400, metadata !DIExpression()), !dbg !3401
  call void @llvm.dbg.declare(metadata i64* %19, metadata !3402, metadata !DIExpression()), !dbg !3403
  call void @llvm.dbg.declare(metadata [10 x i8*]* %20, metadata !3404, metadata !DIExpression()), !dbg !3406
  store i64 0, i64* %19, align 8, !dbg !3407
  %21 = load i32, i32* @x.57
  %22 = load i32, i32* @y.58
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %29, !dbg !3409

29:                                               ; preds = %originalBBpart225, %originalBBpart2
  %30 = load i32, i32* @x.57
  %31 = load i32, i32* @y.58
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %29, %originalBB1alteredBB
  %38 = load i64, i64* %19, align 8, !dbg !3410
  %39 = icmp ult i64 %38, 10, !dbg !3412
  %40 = load i32, i32* @x.57
  %41 = load i32, i32* @y.58
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %39, label %48, label %102, !dbg !3413

48:                                               ; preds = %originalBBpart24
  %49 = load i32, i32* @x.57
  %50 = load i32, i32* @y.58
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load %struct.__va_list_tag*, %struct.__va_list_tag** %18, align 8, !dbg !3414
  %58 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 0, !dbg !3414
  %59 = load i32, i32* %58, align 8, !dbg !3414
  %60 = icmp ule i32 %59, 40, !dbg !3414
  %61 = load i32, i32* @x.57
  %62 = load i32, i32* @y.58
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %60, label %69, label %75, !dbg !3414

69:                                               ; preds = %originalBBpart28
  %70 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 3, !dbg !3414
  %71 = load i8*, i8** %70, align 8, !dbg !3414
  %72 = getelementptr i8, i8* %71, i32 %59, !dbg !3414
  %73 = bitcast i8* %72 to i8**, !dbg !3414
  %74 = add i32 %59, 8, !dbg !3414
  store i32 %74, i32* %58, align 8, !dbg !3414
  br label %80, !dbg !3414

75:                                               ; preds = %originalBBpart28
  %76 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 2, !dbg !3414
  %77 = load i8*, i8** %76, align 8, !dbg !3414
  %78 = bitcast i8* %77 to i8**, !dbg !3414
  %79 = getelementptr i8, i8* %77, i32 8, !dbg !3414
  store i8* %79, i8** %76, align 8, !dbg !3414
  br label %80, !dbg !3414

80:                                               ; preds = %75, %69
  %81 = phi i8** [ %73, %69 ], [ %78, %75 ], !dbg !3414
  %82 = load i32, i32* @x.57
  %83 = load i32, i32* @y.58
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %80, %originalBB10alteredBB
  %90 = load i8*, i8** %81, align 8, !dbg !3414
  %91 = load i64, i64* %19, align 8, !dbg !3415
  %92 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 %91, !dbg !3416
  store i8* %90, i8** %92, align 8, !dbg !3417
  %93 = icmp ne i8* %90, null, !dbg !3418
  %94 = load i32, i32* @x.57
  %95 = load i32, i32* @y.58
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %102

102:                                              ; preds = %originalBBpart212, %originalBBpart24
  %103 = phi i1 [ false, %originalBBpart24 ], [ %93, %originalBBpart212 ], !dbg !3419
  %104 = load i32, i32* @x.57
  %105 = load i32, i32* @y.58
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %102, %originalBB14alteredBB
  %112 = load i32, i32* @x.57
  %113 = load i32, i32* @y.58
  %114 = sub i32 %112, 1
  %115 = mul i32 %112, %114
  %116 = urem i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %113, 10
  %119 = or i1 %117, %118
  br i1 %119, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %103, label %120, label %140, !dbg !3420

120:                                              ; preds = %originalBBpart216
  br label %121, !dbg !3420

121:                                              ; preds = %120
  %122 = load i32, i32* @x.57
  %123 = load i32, i32* @y.58
  %124 = sub i32 %122, 1
  %125 = mul i32 %122, %124
  %126 = urem i32 %125, 2
  %127 = icmp eq i32 %126, 0
  %128 = icmp slt i32 %123, 10
  %129 = or i1 %127, %128
  br i1 %129, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %121, %originalBB18alteredBB
  %130 = load i64, i64* %19, align 8, !dbg !3421
  %131 = add i64 %130, 1, !dbg !3421
  store i64 %131, i64* %19, align 8, !dbg !3421
  %132 = load i32, i32* @x.57
  %133 = load i32, i32* @y.58
  %134 = sub i32 %132, 1
  %135 = mul i32 %132, %134
  %136 = urem i32 %135, 2
  %137 = icmp eq i32 %136, 0
  %138 = icmp slt i32 %133, 10
  %139 = or i1 %137, %138
  br i1 %139, label %originalBBpart225, label %originalBB18alteredBB

originalBBpart225:                                ; preds = %originalBB18
  br label %29, !dbg !3422, !llvm.loop !3423

140:                                              ; preds = %originalBBpart216
  %141 = load i32, i32* @x.57
  %142 = load i32, i32* @y.58
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBB27, label %originalBB27alteredBB

originalBB27:                                     ; preds = %140, %originalBB27alteredBB
  %149 = load %struct._IO_FILE*, %struct._IO_FILE** %14, align 8, !dbg !3425
  %150 = load i8*, i8** %15, align 8, !dbg !3426
  %151 = load i8*, i8** %16, align 8, !dbg !3427
  %152 = load i8*, i8** %17, align 8, !dbg !3428
  %153 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 0, !dbg !3429
  %154 = load i64, i64* %19, align 8, !dbg !3430
  call void @version_etc_arn(%struct._IO_FILE* %149, i8* %150, i8* %151, i8* %152, i8** %153, i64 %154), !dbg !3431
  %155 = load i32, i32* @x.57
  %156 = load i32, i32* @y.58
  %157 = sub i32 %155, 1
  %158 = mul i32 %155, %157
  %159 = urem i32 %158, 2
  %160 = icmp eq i32 %159, 0
  %161 = icmp slt i32 %156, 10
  %162 = or i1 %160, %161
  br i1 %162, label %originalBBpart229, label %originalBB27alteredBB

originalBBpart229:                                ; preds = %originalBB27
  ret void, !dbg !3432

originalBBalteredBB:                              ; preds = %originalBB, %5
  %163 = alloca %struct._IO_FILE*, align 8
  %164 = alloca i8*, align 8
  %165 = alloca i8*, align 8
  %166 = alloca i8*, align 8
  %167 = alloca %struct.__va_list_tag*, align 8
  %168 = alloca i64, align 8
  %169 = alloca [10 x i8*], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %163, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %163, metadata !3433, metadata !DIExpression()), !dbg !3393
  store i8* %1, i8** %164, align 8
  call void @llvm.dbg.declare(metadata i8** %164, metadata !3479, metadata !DIExpression()), !dbg !3395
  store i8* %2, i8** %165, align 8
  call void @llvm.dbg.declare(metadata i8** %165, metadata !3480, metadata !DIExpression()), !dbg !3397
  store i8* %3, i8** %166, align 8
  call void @llvm.dbg.declare(metadata i8** %166, metadata !3481, metadata !DIExpression()), !dbg !3399
  store %struct.__va_list_tag* %4, %struct.__va_list_tag** %167, align 8
  call void @llvm.dbg.declare(metadata %struct.__va_list_tag** %167, metadata !3482, metadata !DIExpression()), !dbg !3401
  call void @llvm.dbg.declare(metadata i64* %168, metadata !3483, metadata !DIExpression()), !dbg !3403
  call void @llvm.dbg.declare(metadata [10 x i8*]* %169, metadata !3484, metadata !DIExpression()), !dbg !3406
  store i64 0, i64* %168, align 8, !dbg !3407
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %29
  %170 = load i64, i64* %19, align 8, !dbg !3410
  %171 = icmp ult i64 %170, 10, !dbg !3412
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  %172 = load %struct.__va_list_tag*, %struct.__va_list_tag** %18, align 8, !dbg !3414
  %173 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %172, i32 0, i32 0, !dbg !3414
  %174 = load i32, i32* %173, align 8, !dbg !3414
  %175 = icmp ule i32 %174, 40, !dbg !3414
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %80
  %176 = load i8*, i8** %81, align 8, !dbg !3414
  %177 = load i64, i64* %19, align 8, !dbg !3415
  %178 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 %177, !dbg !3416
  store i8* %176, i8** %178, align 8, !dbg !3417
  %179 = icmp ne i8* %176, null, !dbg !3418
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %102
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %121
  %180 = load i64, i64* %19, align 8, !dbg !3421
  %_ = shl i64 %180, 1
  %_19 = sub i64 0, %180
  %gen = add i64 %_19, 1
  %_20 = sub i64 %180, 1
  %gen21 = mul i64 %_20, 1
  %_22 = sub i64 %180, 1
  %gen23 = mul i64 %_22, 1
  %181 = add i64 %180, 1, !dbg !3421
  store i64 %181, i64* %19, align 8, !dbg !3421
  br label %originalBB18

originalBB27alteredBB:                            ; preds = %originalBB27, %140
  %182 = load %struct._IO_FILE*, %struct._IO_FILE** %14, align 8, !dbg !3425
  %183 = load i8*, i8** %15, align 8, !dbg !3426
  %184 = load i8*, i8** %16, align 8, !dbg !3427
  %185 = load i8*, i8** %17, align 8, !dbg !3428
  %186 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 0, !dbg !3429
  %187 = load i64, i64* %19, align 8, !dbg !3430
  call void @version_etc_arn(%struct._IO_FILE* %182, i8* %183, i8* %184, i8* %185, i8** %186, i64 %187), !dbg !3431
  br label %originalBB27
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc(%struct._IO_FILE*, i8*, i8*, i8*, ...) #4 !dbg !3485 {
  %5 = load i32, i32* @x.59
  %6 = load i32, i32* @y.60
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %4, %originalBBalteredBB
  %13 = alloca %struct._IO_FILE*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca [1 x %struct.__va_list_tag], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %13, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %13, metadata !3488, metadata !DIExpression()), !dbg !3489
  store i8* %1, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !3490, metadata !DIExpression()), !dbg !3491
  store i8* %2, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !3492, metadata !DIExpression()), !dbg !3493
  store i8* %3, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !3494, metadata !DIExpression()), !dbg !3495
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %17, metadata !3496, metadata !DIExpression()), !dbg !3503
  %18 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %17, i64 0, i64 0, !dbg !3504
  %19 = bitcast %struct.__va_list_tag* %18 to i8*, !dbg !3504
  call void @llvm.va_start(i8* %19), !dbg !3504
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3505
  %21 = load i8*, i8** %14, align 8, !dbg !3506
  %22 = load i8*, i8** %15, align 8, !dbg !3507
  %23 = load i8*, i8** %16, align 8, !dbg !3508
  %24 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %17, i64 0, i64 0, !dbg !3509
  call void @version_etc_va(%struct._IO_FILE* %20, i8* %21, i8* %22, i8* %23, %struct.__va_list_tag* %24), !dbg !3510
  %25 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %17, i64 0, i64 0, !dbg !3511
  %26 = bitcast %struct.__va_list_tag* %25 to i8*, !dbg !3511
  call void @llvm.va_end(i8* %26), !dbg !3511
  %27 = load i32, i32* @x.59
  %28 = load i32, i32* @y.60
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret void, !dbg !3512

originalBBalteredBB:                              ; preds = %originalBB, %4
  %35 = alloca %struct._IO_FILE*, align 8
  %36 = alloca i8*, align 8
  %37 = alloca i8*, align 8
  %38 = alloca i8*, align 8
  %39 = alloca [1 x %struct.__va_list_tag], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %35, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %35, metadata !3513, metadata !DIExpression()), !dbg !3489
  store i8* %1, i8** %36, align 8
  call void @llvm.dbg.declare(metadata i8** %36, metadata !3552, metadata !DIExpression()), !dbg !3491
  store i8* %2, i8** %37, align 8
  call void @llvm.dbg.declare(metadata i8** %37, metadata !3553, metadata !DIExpression()), !dbg !3493
  store i8* %3, i8** %38, align 8
  call void @llvm.dbg.declare(metadata i8** %38, metadata !3554, metadata !DIExpression()), !dbg !3495
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %39, metadata !3555, metadata !DIExpression()), !dbg !3503
  %40 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %39, i64 0, i64 0, !dbg !3504
  %41 = bitcast %struct.__va_list_tag* %40 to i8*, !dbg !3504
  call void @llvm.va_start(i8* %41), !dbg !3504
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** %35, align 8, !dbg !3505
  %43 = load i8*, i8** %36, align 8, !dbg !3506
  %44 = load i8*, i8** %37, align 8, !dbg !3507
  %45 = load i8*, i8** %38, align 8, !dbg !3508
  %46 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %39, i64 0, i64 0, !dbg !3509
  call void @version_etc_va(%struct._IO_FILE* %42, i8* %43, i8* %44, i8* %45, %struct.__va_list_tag* %46), !dbg !3510
  %47 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %39, i64 0, i64 0, !dbg !3511
  %48 = bitcast %struct.__va_list_tag* %47 to i8*, !dbg !3511
  call void @llvm.va_end(i8* %48), !dbg !3511
  br label %originalBB
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #10

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #10

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xnmalloc(i64, i64) #4 !dbg !3566 {
  %3 = load i32, i32* @x.61
  %4 = load i32, i32* @y.62
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  store i64 %0, i64* %11, align 8
  call void @llvm.dbg.declare(metadata i64* %11, metadata !3570, metadata !DIExpression()), !dbg !3571
  store i64 %1, i64* %12, align 8
  call void @llvm.dbg.declare(metadata i64* %12, metadata !3572, metadata !DIExpression()), !dbg !3573
  %13 = load i64, i64* %12, align 8, !dbg !3574
  %14 = udiv i64 9223372036854775807, %13, !dbg !3574
  %15 = load i64, i64* %11, align 8, !dbg !3574
  %16 = icmp ult i64 %14, %15, !dbg !3574
  %17 = load i32, i32* @x.61
  %18 = load i32, i32* @y.62
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %16, label %25, label %26, !dbg !3576

25:                                               ; preds = %originalBBpart2
  call void @xalloc_die() #14, !dbg !3577
  unreachable, !dbg !3577

26:                                               ; preds = %originalBBpart2
  %27 = load i32, i32* @x.61
  %28 = load i32, i32* @y.62
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBB9, label %originalBB9alteredBB

originalBB9:                                      ; preds = %26, %originalBB9alteredBB
  %35 = load i64, i64* %11, align 8, !dbg !3578
  %36 = load i64, i64* %12, align 8, !dbg !3579
  %37 = mul i64 %35, %36, !dbg !3580
  %38 = call noalias i8* @xmalloc(i64 %37), !dbg !3581
  %39 = load i32, i32* @x.61
  %40 = load i32, i32* @y.62
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart223, label %originalBB9alteredBB

originalBBpart223:                                ; preds = %originalBB9
  ret i8* %38, !dbg !3582

originalBBalteredBB:                              ; preds = %originalBB, %2
  %47 = alloca i64, align 8
  %48 = alloca i64, align 8
  store i64 %0, i64* %47, align 8
  call void @llvm.dbg.declare(metadata i64* %47, metadata !3583, metadata !DIExpression()), !dbg !3571
  store i64 %1, i64* %48, align 8
  call void @llvm.dbg.declare(metadata i64* %48, metadata !3586, metadata !DIExpression()), !dbg !3573
  %49 = load i64, i64* %48, align 8, !dbg !3574
  %_ = sub i64 9223372036854775807, %49
  %gen = mul i64 %_, %49
  %_1 = shl i64 9223372036854775807, %49
  %_2 = shl i64 9223372036854775807, %49
  %_3 = sub i64 9223372036854775807, %49
  %gen4 = mul i64 %_3, %49
  %_5 = sub i64 9223372036854775807, %49
  %gen6 = mul i64 %_5, %49
  %_7 = shl i64 9223372036854775807, %49
  %_8 = shl i64 9223372036854775807, %49
  %50 = udiv i64 9223372036854775807, %49, !dbg !3574
  %51 = load i64, i64* %47, align 8, !dbg !3574
  %52 = icmp ult i64 %50, %51, !dbg !3574
  br label %originalBB

originalBB9alteredBB:                             ; preds = %originalBB9, %26
  %53 = load i64, i64* %11, align 8, !dbg !3578
  %54 = load i64, i64* %12, align 8, !dbg !3579
  %_10 = sub i64 0, %53
  %gen11 = add i64 %_10, %54
  %_12 = shl i64 %53, %54
  %_13 = sub i64 0, %53
  %gen14 = add i64 %_13, %54
  %_15 = shl i64 %53, %54
  %_16 = sub i64 0, %53
  %gen17 = add i64 %_16, %54
  %_18 = shl i64 %53, %54
  %_19 = shl i64 %53, %54
  %_20 = sub i64 %53, %54
  %gen21 = mul i64 %_20, %54
  %55 = mul i64 %53, %54, !dbg !3580
  %56 = call noalias i8* @xmalloc(i64 %55), !dbg !3581
  br label %originalBB9
}

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xmalloc(i64) #4 !dbg !3587 {
  %2 = load i32, i32* @x.63
  %3 = load i32, i32* @y.64
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i64, align 8
  %11 = alloca i8*, align 8
  store i64 %0, i64* %10, align 8
  call void @llvm.dbg.declare(metadata i64* %10, metadata !3591, metadata !DIExpression()), !dbg !3592
  call void @llvm.dbg.declare(metadata i8** %11, metadata !3593, metadata !DIExpression()), !dbg !3594
  %12 = load i64, i64* %10, align 8, !dbg !3595
  %13 = call noalias i8* @malloc(i64 %12) #10, !dbg !3596
  store i8* %13, i8** %11, align 8, !dbg !3594
  %14 = load i8*, i8** %11, align 8, !dbg !3597
  %15 = icmp ne i8* %14, null, !dbg !3597
  %16 = load i32, i32* @x.63
  %17 = load i32, i32* @y.64
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %60, label %24, !dbg !3599

24:                                               ; preds = %originalBBpart2
  %25 = load i32, i32* @x.63
  %26 = load i32, i32* @y.64
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %24, %originalBB1alteredBB
  %33 = load i64, i64* %10, align 8, !dbg !3600
  %34 = icmp ne i64 %33, 0, !dbg !3601
  %35 = load i32, i32* @x.63
  %36 = load i32, i32* @y.64
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %34, label %43, label %60, !dbg !3602

43:                                               ; preds = %originalBBpart24
  %44 = load i32, i32* @x.63
  %45 = load i32, i32* @y.64
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %43, %originalBB6alteredBB
  call void @xalloc_die() #14, !dbg !3603
  %52 = load i32, i32* @x.63
  %53 = load i32, i32* @y.64
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  unreachable, !dbg !3603

60:                                               ; preds = %originalBBpart24, %originalBBpart2
  %61 = load i32, i32* @x.63
  %62 = load i32, i32* @y.64
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %60, %originalBB10alteredBB
  %69 = load i8*, i8** %11, align 8, !dbg !3604
  %70 = load i32, i32* @x.63
  %71 = load i32, i32* @y.64
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  ret i8* %69, !dbg !3605

originalBBalteredBB:                              ; preds = %originalBB, %1
  %78 = alloca i64, align 8
  %79 = alloca i8*, align 8
  store i64 %0, i64* %78, align 8
  call void @llvm.dbg.declare(metadata i64* %78, metadata !3606, metadata !DIExpression()), !dbg !3592
  call void @llvm.dbg.declare(metadata i8** %79, metadata !3609, metadata !DIExpression()), !dbg !3594
  %80 = load i64, i64* %78, align 8, !dbg !3595
  %81 = call noalias i8* @malloc(i64 %80) #10, !dbg !3596
  store i8* %81, i8** %79, align 8, !dbg !3594
  %82 = load i8*, i8** %79, align 8, !dbg !3597
  %83 = icmp ne i8* %82, null, !dbg !3597
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %24
  %84 = load i64, i64* %10, align 8, !dbg !3600
  %85 = icmp ne i64 %84, 0, !dbg !3601
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %43
  call void @xalloc_die() #14, !dbg !3603
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %60
  %86 = load i8*, i8** %11, align 8, !dbg !3604
  br label %originalBB10
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @xrealloc(i8*, i64) #4 !dbg !3610 {
  %3 = load i32, i32* @x.65
  %4 = load i32, i32* @y.66
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !3613, metadata !DIExpression()), !dbg !3614
  store i64 %1, i64* %13, align 8
  call void @llvm.dbg.declare(metadata i64* %13, metadata !3615, metadata !DIExpression()), !dbg !3616
  %14 = load i64, i64* %13, align 8, !dbg !3617
  %15 = icmp ne i64 %14, 0, !dbg !3617
  %16 = load i32, i32* @x.65
  %17 = load i32, i32* @y.66
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %61, label %24, !dbg !3619

24:                                               ; preds = %originalBBpart2
  %25 = load i32, i32* @x.65
  %26 = load i32, i32* @y.66
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %24, %originalBB1alteredBB
  %33 = load i8*, i8** %12, align 8, !dbg !3620
  %34 = icmp ne i8* %33, null, !dbg !3620
  %35 = load i32, i32* @x.65
  %36 = load i32, i32* @y.66
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %34, label %43, label %61, !dbg !3621

43:                                               ; preds = %originalBBpart24
  %44 = load i32, i32* @x.65
  %45 = load i32, i32* @y.66
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %43, %originalBB6alteredBB
  %52 = load i8*, i8** %12, align 8, !dbg !3622
  call void @free(i8* %52) #10, !dbg !3624
  store i8* null, i8** %11, align 8, !dbg !3625
  %53 = load i32, i32* @x.65
  %54 = load i32, i32* @y.66
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %137, !dbg !3625

61:                                               ; preds = %originalBBpart24, %originalBBpart2
  %62 = load i32, i32* @x.65
  %63 = load i32, i32* @y.66
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %61, %originalBB10alteredBB
  %70 = load i8*, i8** %12, align 8, !dbg !3626
  %71 = load i64, i64* %13, align 8, !dbg !3627
  %72 = call i8* @realloc(i8* %70, i64 %71) #10, !dbg !3628
  store i8* %72, i8** %12, align 8, !dbg !3629
  %73 = load i8*, i8** %12, align 8, !dbg !3630
  %74 = icmp ne i8* %73, null, !dbg !3630
  %75 = load i32, i32* @x.65
  %76 = load i32, i32* @y.66
  %77 = sub i32 %75, 1
  %78 = mul i32 %75, %77
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %80, %81
  br i1 %82, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %74, label %119, label %83, !dbg !3632

83:                                               ; preds = %originalBBpart212
  %84 = load i32, i32* @x.65
  %85 = load i32, i32* @y.66
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %83, %originalBB14alteredBB
  %92 = load i64, i64* %13, align 8, !dbg !3633
  %93 = icmp ne i64 %92, 0, !dbg !3633
  %94 = load i32, i32* @x.65
  %95 = load i32, i32* @y.66
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %93, label %102, label %119, !dbg !3634

102:                                              ; preds = %originalBBpart216
  %103 = load i32, i32* @x.65
  %104 = load i32, i32* @y.66
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %102, %originalBB18alteredBB
  call void @xalloc_die() #14, !dbg !3635
  %111 = load i32, i32* @x.65
  %112 = load i32, i32* @y.66
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  unreachable, !dbg !3635

119:                                              ; preds = %originalBBpart216, %originalBBpart212
  %120 = load i32, i32* @x.65
  %121 = load i32, i32* @y.66
  %122 = sub i32 %120, 1
  %123 = mul i32 %120, %122
  %124 = urem i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %125, %126
  br i1 %127, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %119, %originalBB22alteredBB
  %128 = load i8*, i8** %12, align 8, !dbg !3636
  store i8* %128, i8** %11, align 8, !dbg !3637
  %129 = load i32, i32* @x.65
  %130 = load i32, i32* @y.66
  %131 = sub i32 %129, 1
  %132 = mul i32 %129, %131
  %133 = urem i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %130, 10
  %136 = or i1 %134, %135
  br i1 %136, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %137, !dbg !3637

137:                                              ; preds = %originalBBpart224, %originalBBpart28
  %138 = load i32, i32* @x.65
  %139 = load i32, i32* @y.66
  %140 = sub i32 %138, 1
  %141 = mul i32 %138, %140
  %142 = urem i32 %141, 2
  %143 = icmp eq i32 %142, 0
  %144 = icmp slt i32 %139, 10
  %145 = or i1 %143, %144
  br i1 %145, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %137, %originalBB26alteredBB
  %146 = load i8*, i8** %11, align 8, !dbg !3638
  %147 = load i32, i32* @x.65
  %148 = load i32, i32* @y.66
  %149 = sub i32 %147, 1
  %150 = mul i32 %147, %149
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %152, %153
  br i1 %154, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  ret i8* %146, !dbg !3638

originalBBalteredBB:                              ; preds = %originalBB, %2
  %155 = alloca i8*, align 8
  %156 = alloca i8*, align 8
  %157 = alloca i64, align 8
  store i8* %0, i8** %156, align 8
  call void @llvm.dbg.declare(metadata i8** %156, metadata !3639, metadata !DIExpression()), !dbg !3614
  store i64 %1, i64* %157, align 8
  call void @llvm.dbg.declare(metadata i64* %157, metadata !3642, metadata !DIExpression()), !dbg !3616
  %158 = load i64, i64* %157, align 8, !dbg !3617
  %159 = icmp ne i64 %158, 0, !dbg !3617
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %24
  %160 = load i8*, i8** %12, align 8, !dbg !3620
  %161 = icmp ne i8* %160, null, !dbg !3620
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %43
  %162 = load i8*, i8** %12, align 8, !dbg !3622
  call void @free(i8* %162) #10, !dbg !3624
  store i8* null, i8** %11, align 8, !dbg !3625
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %61
  %163 = load i8*, i8** %12, align 8, !dbg !3626
  %164 = load i64, i64* %13, align 8, !dbg !3627
  %165 = call i8* @realloc(i8* %163, i64 %164) #10, !dbg !3628
  store i8* %165, i8** %12, align 8, !dbg !3629
  %166 = load i8*, i8** %12, align 8, !dbg !3630
  %167 = icmp ne i8* %166, null, !dbg !3630
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %83
  %168 = load i64, i64* %13, align 8, !dbg !3633
  %169 = icmp ne i64 %168, 0, !dbg !3633
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %102
  call void @xalloc_die() #14, !dbg !3635
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %119
  %170 = load i8*, i8** %12, align 8, !dbg !3636
  store i8* %170, i8** %11, align 8, !dbg !3637
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %137
  %171 = load i8*, i8** %11, align 8, !dbg !3638
  br label %originalBB26
}

; Function Attrs: nounwind
declare dso_local i8* @realloc(i8*, i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xcharalloc(i64) #4 !dbg !3643 {
  %2 = load i32, i32* @x.67
  %3 = load i32, i32* @y.68
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i64, align 8
  store i64 %0, i64* %10, align 8
  call void @llvm.dbg.declare(metadata i64* %10, metadata !3644, metadata !DIExpression()), !dbg !3645
  %11 = load i64, i64* %10, align 8, !dbg !3646
  %12 = call noalias i8* @xmalloc(i64 %11), !dbg !3646
  %13 = load i32, i32* @x.67
  %14 = load i32, i32* @y.68
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %12, !dbg !3647

originalBBalteredBB:                              ; preds = %originalBB, %1
  %21 = alloca i64, align 8
  store i64 %0, i64* %21, align 8
  call void @llvm.dbg.declare(metadata i64* %21, metadata !3648, metadata !DIExpression()), !dbg !3645
  %22 = load i64, i64* %21, align 8, !dbg !3646
  %23 = call noalias i8* @xmalloc(i64 %22), !dbg !3646
  br label %originalBB
}

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @xalloc_die() #0 !dbg !3651 {
  %1 = load i32, i32* @x.69
  %2 = load i32, i32* @y.70
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = load volatile i32, i32* @exit_failure, align 4, !dbg !3653
  %10 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.111, i64 0, i64 0)) #10, !dbg !3654
  call void (i32, i32, i8*, ...) @error(i32 %9, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.112, i64 0, i64 0), i8* %10), !dbg !3655
  call void @abort() #12, !dbg !3656
  %11 = load i32, i32* @x.69
  %12 = load i32, i32* @y.70
  %13 = sub i32 %11, 1
  %14 = mul i32 %11, %13
  %15 = urem i32 %14, 2
  %16 = icmp eq i32 %15, 0
  %17 = icmp slt i32 %12, 10
  %18 = or i1 %16, %17
  br i1 %18, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  unreachable, !dbg !3656

originalBBalteredBB:                              ; preds = %originalBB, %0
  %19 = load volatile i32, i32* @exit_failure, align 4, !dbg !3653
  %20 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.111, i64 0, i64 0)) #10, !dbg !3654
  call void (i32, i32, i8*, ...) @error(i32 %19, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.112, i64 0, i64 0), i8* %20), !dbg !3655
  call void @abort() #12, !dbg !3656
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @xgetcwd() #4 !dbg !3657 {
  %1 = load i32, i32* @x.71
  %2 = load i32, i32* @y.72
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %9, metadata !3659, metadata !DIExpression()), !dbg !3660
  %10 = call i8* @getcwd(i8* null, i64 0) #10, !dbg !3661
  store i8* %10, i8** %9, align 8, !dbg !3660
  %11 = load i8*, i8** %9, align 8, !dbg !3662
  %12 = icmp ne i8* %11, null, !dbg !3662
  %13 = load i32, i32* @x.71
  %14 = load i32, i32* @y.72
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %42, label %21, !dbg !3664

21:                                               ; preds = %originalBBpart2
  %22 = call i32* @__errno_location() #15, !dbg !3665
  %23 = load i32, i32* %22, align 4, !dbg !3665
  %24 = icmp eq i32 %23, 12, !dbg !3666
  br i1 %24, label %25, label %42, !dbg !3667

25:                                               ; preds = %21
  %26 = load i32, i32* @x.71
  %27 = load i32, i32* @y.72
  %28 = sub i32 %26, 1
  %29 = mul i32 %26, %28
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %31, %32
  br i1 %33, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %25, %originalBB1alteredBB
  call void @xalloc_die() #14, !dbg !3668
  %34 = load i32, i32* @x.71
  %35 = load i32, i32* @y.72
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  unreachable, !dbg !3668

42:                                               ; preds = %21, %originalBBpart2
  %43 = load i32, i32* @x.71
  %44 = load i32, i32* @y.72
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %42, %originalBB6alteredBB
  %51 = load i8*, i8** %9, align 8, !dbg !3669
  %52 = load i32, i32* @x.71
  %53 = load i32, i32* @y.72
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  ret i8* %51, !dbg !3670

originalBBalteredBB:                              ; preds = %originalBB, %0
  %60 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %60, metadata !3671, metadata !DIExpression()), !dbg !3660
  %61 = call i8* @getcwd(i8* null, i64 0) #10, !dbg !3661
  store i8* %61, i8** %60, align 8, !dbg !3660
  %62 = load i8*, i8** %60, align 8, !dbg !3662
  %63 = icmp ne i8* %62, null, !dbg !3662
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %25
  call void @xalloc_die() #14, !dbg !3668
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %42
  %64 = load i8*, i8** %9, align 8, !dbg !3669
  br label %originalBB6
}

; Function Attrs: nounwind
declare dso_local i8* @getcwd(i8*, i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @rpl_mbrtowc(i32*, i8*, i64, %struct.__mbstate_t*) #4 !dbg !3674 {
  %5 = load i32, i32* @x.73
  %6 = load i32, i32* @y.74
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %4, %originalBBalteredBB
  %13 = alloca i64, align 8
  %14 = alloca i32*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i64, align 8
  %17 = alloca %struct.__mbstate_t*, align 8
  %18 = alloca i64, align 8
  %19 = alloca i32, align 4
  %20 = alloca i8, align 1
  store i32* %0, i32** %14, align 8
  call void @llvm.dbg.declare(metadata i32** %14, metadata !3690, metadata !DIExpression()), !dbg !3691
  store i8* %1, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !3692, metadata !DIExpression()), !dbg !3693
  store i64 %2, i64* %16, align 8
  call void @llvm.dbg.declare(metadata i64* %16, metadata !3694, metadata !DIExpression()), !dbg !3695
  store %struct.__mbstate_t* %3, %struct.__mbstate_t** %17, align 8
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t** %17, metadata !3696, metadata !DIExpression()), !dbg !3697
  call void @llvm.dbg.declare(metadata i64* %18, metadata !3698, metadata !DIExpression()), !dbg !3699
  call void @llvm.dbg.declare(metadata i32* %19, metadata !3700, metadata !DIExpression()), !dbg !3701
  %21 = load i32*, i32** %14, align 8, !dbg !3702
  %22 = icmp ne i32* %21, null, !dbg !3702
  %23 = load i32, i32* @x.73
  %24 = load i32, i32* @y.74
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %48, label %31, !dbg !3704

31:                                               ; preds = %originalBBpart2
  %32 = load i32, i32* @x.73
  %33 = load i32, i32* @y.74
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  store i32* %19, i32** %14, align 8, !dbg !3705
  %40 = load i32, i32* @x.73
  %41 = load i32, i32* @y.74
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %48, !dbg !3706

48:                                               ; preds = %originalBBpart24, %originalBBpart2
  %49 = load i32, i32* @x.73
  %50 = load i32, i32* @y.74
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load i32*, i32** %14, align 8, !dbg !3707
  %58 = load i8*, i8** %15, align 8, !dbg !3708
  %59 = load i64, i64* %16, align 8, !dbg !3709
  %60 = load %struct.__mbstate_t*, %struct.__mbstate_t** %17, align 8, !dbg !3710
  %61 = call i64 @mbrtowc(i32* %57, i8* %58, i64 %59, %struct.__mbstate_t* %60) #10, !dbg !3711
  store i64 %61, i64* %18, align 8, !dbg !3712
  %62 = load i64, i64* %18, align 8, !dbg !3713
  %63 = icmp ule i64 -2, %62, !dbg !3715
  %64 = load i32, i32* @x.73
  %65 = load i32, i32* @y.74
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %63, label %72, label %131, !dbg !3716

72:                                               ; preds = %originalBBpart28
  %73 = load i32, i32* @x.73
  %74 = load i32, i32* @y.74
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %72, %originalBB10alteredBB
  %81 = load i64, i64* %16, align 8, !dbg !3717
  %82 = icmp ne i64 %81, 0, !dbg !3718
  %83 = load i32, i32* @x.73
  %84 = load i32, i32* @y.74
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %82, label %91, label %131, !dbg !3719

91:                                               ; preds = %originalBBpart212
  %92 = load i32, i32* @x.73
  %93 = load i32, i32* @y.74
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %91, %originalBB14alteredBB
  %100 = call zeroext i1 @hard_locale(i32 0), !dbg !3720
  %101 = load i32, i32* @x.73
  %102 = load i32, i32* @y.74
  %103 = sub i32 %101, 1
  %104 = mul i32 %101, %103
  %105 = urem i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %102, 10
  %108 = or i1 %106, %107
  br i1 %108, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %100, label %131, label %109, !dbg !3721

109:                                              ; preds = %originalBBpart216
  call void @llvm.dbg.declare(metadata i8* %20, metadata !3722, metadata !DIExpression()), !dbg !3724
  %110 = load i32, i32* @x.73
  %111 = load i32, i32* @y.74
  %112 = sub i32 %110, 1
  %113 = mul i32 %110, %112
  %114 = urem i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %115, %116
  br i1 %117, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %109, %originalBB18alteredBB
  %118 = load i8*, i8** %15, align 8, !dbg !3725
  %119 = load i8, i8* %118, align 1, !dbg !3726
  store i8 %119, i8* %20, align 1, !dbg !3724
  %120 = load i8, i8* %20, align 1, !dbg !3727
  %121 = zext i8 %120 to i32, !dbg !3727
  %122 = load i32*, i32** %14, align 8, !dbg !3728
  store i32 %121, i32* %122, align 4, !dbg !3729
  store i64 1, i64* %13, align 8, !dbg !3730
  %123 = load i32, i32* @x.73
  %124 = load i32, i32* @y.74
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %149, !dbg !3730

131:                                              ; preds = %originalBBpart216, %originalBBpart212, %originalBBpart28
  %132 = load i32, i32* @x.73
  %133 = load i32, i32* @y.74
  %134 = sub i32 %132, 1
  %135 = mul i32 %132, %134
  %136 = urem i32 %135, 2
  %137 = icmp eq i32 %136, 0
  %138 = icmp slt i32 %133, 10
  %139 = or i1 %137, %138
  br i1 %139, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %131, %originalBB22alteredBB
  %140 = load i64, i64* %18, align 8, !dbg !3731
  store i64 %140, i64* %13, align 8, !dbg !3732
  %141 = load i32, i32* @x.73
  %142 = load i32, i32* @y.74
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %149, !dbg !3732

149:                                              ; preds = %originalBBpart224, %originalBBpart220
  %150 = load i32, i32* @x.73
  %151 = load i32, i32* @y.74
  %152 = sub i32 %150, 1
  %153 = mul i32 %150, %152
  %154 = urem i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %155, %156
  br i1 %157, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %149, %originalBB26alteredBB
  %158 = load i64, i64* %13, align 8, !dbg !3733
  %159 = load i32, i32* @x.73
  %160 = load i32, i32* @y.74
  %161 = sub i32 %159, 1
  %162 = mul i32 %159, %161
  %163 = urem i32 %162, 2
  %164 = icmp eq i32 %163, 0
  %165 = icmp slt i32 %160, 10
  %166 = or i1 %164, %165
  br i1 %166, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  ret i64 %158, !dbg !3733

originalBBalteredBB:                              ; preds = %originalBB, %4
  %167 = alloca i64, align 8
  %168 = alloca i32*, align 8
  %169 = alloca i8*, align 8
  %170 = alloca i64, align 8
  %171 = alloca %struct.__mbstate_t*, align 8
  %172 = alloca i64, align 8
  %173 = alloca i32, align 4
  %174 = alloca i8, align 1
  store i32* %0, i32** %168, align 8
  call void @llvm.dbg.declare(metadata i32** %168, metadata !3734, metadata !DIExpression()), !dbg !3691
  store i8* %1, i8** %169, align 8
  call void @llvm.dbg.declare(metadata i8** %169, metadata !3750, metadata !DIExpression()), !dbg !3693
  store i64 %2, i64* %170, align 8
  call void @llvm.dbg.declare(metadata i64* %170, metadata !3751, metadata !DIExpression()), !dbg !3695
  store %struct.__mbstate_t* %3, %struct.__mbstate_t** %171, align 8
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t** %171, metadata !3752, metadata !DIExpression()), !dbg !3697
  call void @llvm.dbg.declare(metadata i64* %172, metadata !3753, metadata !DIExpression()), !dbg !3699
  call void @llvm.dbg.declare(metadata i32* %173, metadata !3754, metadata !DIExpression()), !dbg !3701
  %175 = load i32*, i32** %168, align 8, !dbg !3702
  %176 = icmp ne i32* %175, null, !dbg !3702
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  store i32* %19, i32** %14, align 8, !dbg !3705
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  %177 = load i32*, i32** %14, align 8, !dbg !3707
  %178 = load i8*, i8** %15, align 8, !dbg !3708
  %179 = load i64, i64* %16, align 8, !dbg !3709
  %180 = load %struct.__mbstate_t*, %struct.__mbstate_t** %17, align 8, !dbg !3710
  %181 = call i64 @mbrtowc(i32* %177, i8* %178, i64 %179, %struct.__mbstate_t* %180) #10, !dbg !3711
  store i64 %181, i64* %18, align 8, !dbg !3712
  %182 = load i64, i64* %18, align 8, !dbg !3713
  %183 = icmp ule i64 -2, %182, !dbg !3715
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %72
  %184 = load i64, i64* %16, align 8, !dbg !3717
  %185 = icmp ne i64 %184, 0, !dbg !3718
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %91
  %186 = call zeroext i1 @hard_locale(i32 0), !dbg !3720
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %109
  %187 = load i8*, i8** %15, align 8, !dbg !3725
  %188 = load i8, i8* %187, align 1, !dbg !3726
  store i8 %188, i8* %20, align 1, !dbg !3724
  %189 = load i8, i8* %20, align 1, !dbg !3727
  %190 = zext i8 %189 to i32, !dbg !3727
  %191 = load i32*, i32** %14, align 8, !dbg !3728
  store i32 %190, i32* %191, align 4, !dbg !3729
  store i64 1, i64* %13, align 8, !dbg !3730
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %131
  %192 = load i64, i64* %18, align 8, !dbg !3731
  store i64 %192, i64* %13, align 8, !dbg !3732
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %149
  %193 = load i64, i64* %13, align 8, !dbg !3733
  br label %originalBB26
}

; Function Attrs: nounwind
declare dso_local i64 @mbrtowc(i32*, i8*, i64, %struct.__mbstate_t*) #2

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @c_strcasecmp(i8*, i8*) #11 !dbg !3755 {
  %3 = load i32, i32* @x.75
  %4 = load i32, i32* @y.76
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8, align 1
  %17 = alloca i8, align 1
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !3759, metadata !DIExpression()), !dbg !3760
  store i8* %1, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !3761, metadata !DIExpression()), !dbg !3762
  call void @llvm.dbg.declare(metadata i8** %14, metadata !3763, metadata !DIExpression()), !dbg !3764
  %18 = load i8*, i8** %12, align 8, !dbg !3765
  store i8* %18, i8** %14, align 8, !dbg !3764
  call void @llvm.dbg.declare(metadata i8** %15, metadata !3766, metadata !DIExpression()), !dbg !3767
  %19 = load i8*, i8** %13, align 8, !dbg !3768
  store i8* %19, i8** %15, align 8, !dbg !3767
  call void @llvm.dbg.declare(metadata i8* %16, metadata !3769, metadata !DIExpression()), !dbg !3770
  call void @llvm.dbg.declare(metadata i8* %17, metadata !3771, metadata !DIExpression()), !dbg !3772
  %20 = load i8*, i8** %14, align 8, !dbg !3773
  %21 = load i8*, i8** %15, align 8, !dbg !3775
  %22 = icmp eq i8* %20, %21, !dbg !3776
  %23 = load i32, i32* @x.75
  %24 = load i32, i32* @y.76
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %31, label %48, !dbg !3777

31:                                               ; preds = %originalBBpart2
  %32 = load i32, i32* @x.75
  %33 = load i32, i32* @y.76
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  store i32 0, i32* %11, align 4, !dbg !3778
  %40 = load i32, i32* @x.75
  %41 = load i32, i32* @y.76
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %161, !dbg !3778

48:                                               ; preds = %originalBBpart2
  %49 = load i32, i32* @x.75
  %50 = load i32, i32* @y.76
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load i32, i32* @x.75
  %58 = load i32, i32* @y.76
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %65, !dbg !3779

65:                                               ; preds = %originalBBpart224, %originalBBpart28
  %66 = load i32, i32* @x.75
  %67 = load i32, i32* @y.76
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %65, %originalBB10alteredBB
  %74 = load i8*, i8** %14, align 8, !dbg !3780
  %75 = load i8, i8* %74, align 1, !dbg !3782
  %76 = zext i8 %75 to i32, !dbg !3782
  %77 = call i32 @c_tolower(i32 %76), !dbg !3783
  %78 = trunc i32 %77 to i8, !dbg !3783
  store i8 %78, i8* %16, align 1, !dbg !3784
  %79 = load i8*, i8** %15, align 8, !dbg !3785
  %80 = load i8, i8* %79, align 1, !dbg !3786
  %81 = zext i8 %80 to i32, !dbg !3786
  %82 = call i32 @c_tolower(i32 %81), !dbg !3787
  %83 = trunc i32 %82 to i8, !dbg !3787
  store i8 %83, i8* %17, align 1, !dbg !3788
  %84 = load i8, i8* %16, align 1, !dbg !3789
  %85 = zext i8 %84 to i32, !dbg !3789
  %86 = icmp eq i32 %85, 0, !dbg !3791
  %87 = load i32, i32* @x.75
  %88 = load i32, i32* @y.76
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %86, label %95, label %112, !dbg !3792

95:                                               ; preds = %originalBBpart212
  %96 = load i32, i32* @x.75
  %97 = load i32, i32* @y.76
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %95, %originalBB14alteredBB
  %104 = load i32, i32* @x.75
  %105 = load i32, i32* @y.76
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %155, !dbg !3793

112:                                              ; preds = %originalBBpart212
  %113 = load i32, i32* @x.75
  %114 = load i32, i32* @y.76
  %115 = sub i32 %113, 1
  %116 = mul i32 %113, %115
  %117 = urem i32 %116, 2
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %118, %119
  br i1 %120, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %112, %originalBB18alteredBB
  %121 = load i8*, i8** %14, align 8, !dbg !3794
  %122 = getelementptr inbounds i8, i8* %121, i32 1, !dbg !3794
  store i8* %122, i8** %14, align 8, !dbg !3794
  %123 = load i8*, i8** %15, align 8, !dbg !3795
  %124 = getelementptr inbounds i8, i8* %123, i32 1, !dbg !3795
  store i8* %124, i8** %15, align 8, !dbg !3795
  %125 = load i32, i32* @x.75
  %126 = load i32, i32* @y.76
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %133, !dbg !3796

133:                                              ; preds = %originalBBpart220
  %134 = load i32, i32* @x.75
  %135 = load i32, i32* @y.76
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %133, %originalBB22alteredBB
  %142 = load i8, i8* %16, align 1, !dbg !3797
  %143 = zext i8 %142 to i32, !dbg !3797
  %144 = load i8, i8* %17, align 1, !dbg !3798
  %145 = zext i8 %144 to i32, !dbg !3798
  %146 = icmp eq i32 %143, %145, !dbg !3799
  %147 = load i32, i32* @x.75
  %148 = load i32, i32* @y.76
  %149 = sub i32 %147, 1
  %150 = mul i32 %147, %149
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %152, %153
  br i1 %154, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %146, label %65, label %155, !dbg !3796, !llvm.loop !3800

155:                                              ; preds = %originalBBpart224, %originalBBpart216
  %156 = load i8, i8* %16, align 1, !dbg !3802
  %157 = zext i8 %156 to i32, !dbg !3802
  %158 = load i8, i8* %17, align 1, !dbg !3804
  %159 = zext i8 %158 to i32, !dbg !3804
  %160 = sub nsw i32 %157, %159, !dbg !3805
  store i32 %160, i32* %11, align 4, !dbg !3806
  br label %161, !dbg !3806

161:                                              ; preds = %155, %originalBBpart24
  %162 = load i32, i32* @x.75
  %163 = load i32, i32* @y.76
  %164 = sub i32 %162, 1
  %165 = mul i32 %162, %164
  %166 = urem i32 %165, 2
  %167 = icmp eq i32 %166, 0
  %168 = icmp slt i32 %163, 10
  %169 = or i1 %167, %168
  br i1 %169, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %161, %originalBB26alteredBB
  %170 = load i32, i32* %11, align 4, !dbg !3807
  %171 = load i32, i32* @x.75
  %172 = load i32, i32* @y.76
  %173 = sub i32 %171, 1
  %174 = mul i32 %171, %173
  %175 = urem i32 %174, 2
  %176 = icmp eq i32 %175, 0
  %177 = icmp slt i32 %172, 10
  %178 = or i1 %176, %177
  br i1 %178, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  ret i32 %170, !dbg !3807

originalBBalteredBB:                              ; preds = %originalBB, %2
  %179 = alloca i32, align 4
  %180 = alloca i8*, align 8
  %181 = alloca i8*, align 8
  %182 = alloca i8*, align 8
  %183 = alloca i8*, align 8
  %184 = alloca i8, align 1
  %185 = alloca i8, align 1
  store i8* %0, i8** %180, align 8
  call void @llvm.dbg.declare(metadata i8** %180, metadata !3808, metadata !DIExpression()), !dbg !3760
  store i8* %1, i8** %181, align 8
  call void @llvm.dbg.declare(metadata i8** %181, metadata !3811, metadata !DIExpression()), !dbg !3762
  call void @llvm.dbg.declare(metadata i8** %182, metadata !3812, metadata !DIExpression()), !dbg !3764
  %186 = load i8*, i8** %180, align 8, !dbg !3765
  store i8* %186, i8** %182, align 8, !dbg !3764
  call void @llvm.dbg.declare(metadata i8** %183, metadata !3813, metadata !DIExpression()), !dbg !3767
  %187 = load i8*, i8** %181, align 8, !dbg !3768
  store i8* %187, i8** %183, align 8, !dbg !3767
  call void @llvm.dbg.declare(metadata i8* %184, metadata !3814, metadata !DIExpression()), !dbg !3770
  call void @llvm.dbg.declare(metadata i8* %185, metadata !3815, metadata !DIExpression()), !dbg !3772
  %188 = load i8*, i8** %182, align 8, !dbg !3773
  %189 = load i8*, i8** %183, align 8, !dbg !3775
  %190 = icmp eq i8* %188, %189, !dbg !3776
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  store i32 0, i32* %11, align 4, !dbg !3778
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %65
  %191 = load i8*, i8** %14, align 8, !dbg !3780
  %192 = load i8, i8* %191, align 1, !dbg !3782
  %193 = zext i8 %192 to i32, !dbg !3782
  %194 = call i32 @c_tolower(i32 %193), !dbg !3783
  %195 = trunc i32 %194 to i8, !dbg !3783
  store i8 %195, i8* %16, align 1, !dbg !3784
  %196 = load i8*, i8** %15, align 8, !dbg !3785
  %197 = load i8, i8* %196, align 1, !dbg !3786
  %198 = zext i8 %197 to i32, !dbg !3786
  %199 = call i32 @c_tolower(i32 %198), !dbg !3787
  %200 = trunc i32 %199 to i8, !dbg !3787
  store i8 %200, i8* %17, align 1, !dbg !3788
  %201 = load i8, i8* %16, align 1, !dbg !3789
  %202 = zext i8 %201 to i32, !dbg !3789
  %203 = icmp eq i32 %202, 0, !dbg !3791
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %95
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %112
  %204 = load i8*, i8** %14, align 8, !dbg !3794
  %205 = getelementptr inbounds i8, i8* %204, i32 1, !dbg !3794
  store i8* %205, i8** %14, align 8, !dbg !3794
  %206 = load i8*, i8** %15, align 8, !dbg !3795
  %207 = getelementptr inbounds i8, i8* %206, i32 1, !dbg !3795
  store i8* %207, i8** %15, align 8, !dbg !3795
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %133
  %208 = load i8, i8* %16, align 1, !dbg !3797
  %209 = zext i8 %208 to i32, !dbg !3797
  %210 = load i8, i8* %17, align 1, !dbg !3798
  %211 = zext i8 %210 to i32, !dbg !3798
  %212 = icmp eq i32 %209, %211, !dbg !3799
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %161
  %213 = load i32, i32* %11, align 4, !dbg !3807
  br label %originalBB26
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @close_stream(%struct._IO_FILE*) #4 !dbg !3816 {
  %2 = load i32, i32* @x.77
  %3 = load i32, i32* @y.78
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca %struct._IO_FILE*, align 8
  %12 = alloca i8, align 1
  %13 = alloca i8, align 1
  %14 = alloca i8, align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %11, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %11, metadata !3854, metadata !DIExpression()), !dbg !3855
  call void @llvm.dbg.declare(metadata i8* %12, metadata !3856, metadata !DIExpression()), !dbg !3858
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3859
  %16 = call i64 @__fpending(%struct._IO_FILE* %15) #10, !dbg !3860
  %17 = icmp ne i64 %16, 0, !dbg !3861
  %18 = zext i1 %17 to i8, !dbg !3858
  store i8 %18, i8* %12, align 1, !dbg !3858
  call void @llvm.dbg.declare(metadata i8* %13, metadata !3862, metadata !DIExpression()), !dbg !3863
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3864
  %20 = call i32 @ferror_unlocked(%struct._IO_FILE* %19) #10, !dbg !3864
  %21 = icmp ne i32 %20, 0, !dbg !3865
  %22 = zext i1 %21 to i8, !dbg !3863
  store i8 %22, i8* %13, align 1, !dbg !3863
  call void @llvm.dbg.declare(metadata i8* %14, metadata !3866, metadata !DIExpression()), !dbg !3867
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3868
  %24 = call i32 @rpl_fclose(%struct._IO_FILE* %23), !dbg !3869
  %25 = icmp ne i32 %24, 0, !dbg !3870
  %26 = zext i1 %25 to i8, !dbg !3867
  store i8 %26, i8* %14, align 1, !dbg !3867
  %27 = load i8, i8* %13, align 1, !dbg !3871
  %28 = trunc i8 %27 to i1, !dbg !3871
  %29 = load i32, i32* @x.77
  %30 = load i32, i32* @y.78
  %31 = sub i32 %29, 1
  %32 = mul i32 %29, %31
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %34, %35
  br i1 %36, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %28, label %79, label %37, !dbg !3873

37:                                               ; preds = %originalBBpart2
  %38 = load i8, i8* %14, align 1, !dbg !3874
  %39 = trunc i8 %38 to i1, !dbg !3874
  br i1 %39, label %40, label %133, !dbg !3875

40:                                               ; preds = %37
  %41 = load i32, i32* @x.77
  %42 = load i32, i32* @y.78
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %40, %originalBB1alteredBB
  %49 = load i8, i8* %12, align 1, !dbg !3876
  %50 = trunc i8 %49 to i1, !dbg !3876
  %51 = load i32, i32* @x.77
  %52 = load i32, i32* @y.78
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %50, label %79, label %59, !dbg !3877

59:                                               ; preds = %originalBBpart24
  %60 = load i32, i32* @x.77
  %61 = load i32, i32* @y.78
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %59, %originalBB6alteredBB
  %68 = call i32* @__errno_location() #15, !dbg !3878
  %69 = load i32, i32* %68, align 4, !dbg !3878
  %70 = icmp ne i32 %69, 9, !dbg !3879
  %71 = load i32, i32* @x.77
  %72 = load i32, i32* @y.78
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %70, label %79, label %133, !dbg !3880

79:                                               ; preds = %originalBBpart28, %originalBBpart24, %originalBBpart2
  %80 = load i32, i32* @x.77
  %81 = load i32, i32* @y.78
  %82 = sub i32 %80, 1
  %83 = mul i32 %80, %82
  %84 = urem i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = icmp slt i32 %81, 10
  %87 = or i1 %85, %86
  br i1 %87, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %79, %originalBB10alteredBB
  %88 = load i8, i8* %14, align 1, !dbg !3881
  %89 = trunc i8 %88 to i1, !dbg !3881
  %90 = load i32, i32* @x.77
  %91 = load i32, i32* @y.78
  %92 = sub i32 %90, 1
  %93 = mul i32 %90, %92
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %91, 10
  %97 = or i1 %95, %96
  br i1 %97, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %89, label %116, label %98, !dbg !3884

98:                                               ; preds = %originalBBpart212
  %99 = load i32, i32* @x.77
  %100 = load i32, i32* @y.78
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %98, %originalBB14alteredBB
  %107 = call i32* @__errno_location() #15, !dbg !3885
  store i32 0, i32* %107, align 4, !dbg !3886
  %108 = load i32, i32* @x.77
  %109 = load i32, i32* @y.78
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %116, !dbg !3885

116:                                              ; preds = %originalBBpart216, %originalBBpart212
  %117 = load i32, i32* @x.77
  %118 = load i32, i32* @y.78
  %119 = sub i32 %117, 1
  %120 = mul i32 %117, %119
  %121 = urem i32 %120, 2
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %122, %123
  br i1 %124, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %116, %originalBB18alteredBB
  store i32 -1, i32* %10, align 4, !dbg !3887
  %125 = load i32, i32* @x.77
  %126 = load i32, i32* @y.78
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %150, !dbg !3887

133:                                              ; preds = %originalBBpart28, %37
  %134 = load i32, i32* @x.77
  %135 = load i32, i32* @y.78
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %133, %originalBB22alteredBB
  store i32 0, i32* %10, align 4, !dbg !3888
  %142 = load i32, i32* @x.77
  %143 = load i32, i32* @y.78
  %144 = sub i32 %142, 1
  %145 = mul i32 %142, %144
  %146 = urem i32 %145, 2
  %147 = icmp eq i32 %146, 0
  %148 = icmp slt i32 %143, 10
  %149 = or i1 %147, %148
  br i1 %149, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %150, !dbg !3888

150:                                              ; preds = %originalBBpart224, %originalBBpart220
  %151 = load i32, i32* @x.77
  %152 = load i32, i32* @y.78
  %153 = sub i32 %151, 1
  %154 = mul i32 %151, %153
  %155 = urem i32 %154, 2
  %156 = icmp eq i32 %155, 0
  %157 = icmp slt i32 %152, 10
  %158 = or i1 %156, %157
  br i1 %158, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %150, %originalBB26alteredBB
  %159 = load i32, i32* %10, align 4, !dbg !3889
  %160 = load i32, i32* @x.77
  %161 = load i32, i32* @y.78
  %162 = sub i32 %160, 1
  %163 = mul i32 %160, %162
  %164 = urem i32 %163, 2
  %165 = icmp eq i32 %164, 0
  %166 = icmp slt i32 %161, 10
  %167 = or i1 %165, %166
  br i1 %167, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  ret i32 %159, !dbg !3889

originalBBalteredBB:                              ; preds = %originalBB, %1
  %168 = alloca i32, align 4
  %169 = alloca %struct._IO_FILE*, align 8
  %170 = alloca i8, align 1
  %171 = alloca i8, align 1
  %172 = alloca i8, align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %169, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %169, metadata !3890, metadata !DIExpression()), !dbg !3855
  call void @llvm.dbg.declare(metadata i8* %170, metadata !3929, metadata !DIExpression()), !dbg !3858
  %173 = load %struct._IO_FILE*, %struct._IO_FILE** %169, align 8, !dbg !3859
  %174 = call i64 @__fpending(%struct._IO_FILE* %173) #10, !dbg !3860
  %175 = icmp ne i64 %174, 0, !dbg !3861
  %176 = zext i1 %175 to i8, !dbg !3858
  store i8 %176, i8* %170, align 1, !dbg !3858
  call void @llvm.dbg.declare(metadata i8* %171, metadata !3930, metadata !DIExpression()), !dbg !3863
  %177 = load %struct._IO_FILE*, %struct._IO_FILE** %169, align 8, !dbg !3864
  %178 = call i32 @ferror_unlocked(%struct._IO_FILE* %177) #10, !dbg !3864
  %179 = icmp ne i32 %178, 0, !dbg !3865
  %180 = zext i1 %179 to i8, !dbg !3863
  store i8 %180, i8* %171, align 1, !dbg !3863
  call void @llvm.dbg.declare(metadata i8* %172, metadata !3931, metadata !DIExpression()), !dbg !3867
  %181 = load %struct._IO_FILE*, %struct._IO_FILE** %169, align 8, !dbg !3868
  %182 = call i32 @rpl_fclose(%struct._IO_FILE* %181), !dbg !3869
  %183 = icmp ne i32 %182, 0, !dbg !3870
  %184 = zext i1 %183 to i8, !dbg !3867
  store i8 %184, i8* %172, align 1, !dbg !3867
  %185 = load i8, i8* %171, align 1, !dbg !3871
  %186 = trunc i8 %185 to i1, !dbg !3871
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %40
  %187 = load i8, i8* %12, align 1, !dbg !3876
  %188 = trunc i8 %187 to i1, !dbg !3876
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %59
  %189 = call i32* @__errno_location() #15, !dbg !3878
  %190 = load i32, i32* %189, align 4, !dbg !3878
  %191 = icmp ne i32 %190, 9, !dbg !3879
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %79
  %192 = load i8, i8* %14, align 1, !dbg !3881
  %193 = trunc i8 %192 to i1, !dbg !3881
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %98
  %194 = call i32* @__errno_location() #15, !dbg !3885
  store i32 0, i32* %194, align 4, !dbg !3886
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %116
  store i32 -1, i32* %10, align 4, !dbg !3887
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %133
  store i32 0, i32* %10, align 4, !dbg !3888
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %150
  %195 = load i32, i32* %10, align 4, !dbg !3889
  br label %originalBB26
}

; Function Attrs: nounwind
declare dso_local i64 @__fpending(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare dso_local i32 @ferror_unlocked(%struct._IO_FILE*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @hard_locale(i32) #4 !dbg !3932 {
  %2 = alloca i1, align 1
  %3 = alloca i32, align 4
  %4 = alloca [257 x i8], align 16
  store i32 %0, i32* %3, align 4
  call void @llvm.dbg.declare(metadata i32* %3, metadata !3936, metadata !DIExpression()), !dbg !3937
  call void @llvm.dbg.declare(metadata [257 x i8]* %4, metadata !3938, metadata !DIExpression()), !dbg !3942
  %5 = load i32, i32* %3, align 4, !dbg !3943
  %6 = getelementptr inbounds [257 x i8], [257 x i8]* %4, i64 0, i64 0, !dbg !3945
  %7 = call i32 @setlocale_null_r(i32 %5, i8* %6, i64 257), !dbg !3946
  %8 = icmp ne i32 %7, 0, !dbg !3946
  br i1 %8, label %9, label %26, !dbg !3947

9:                                                ; preds = %1
  %10 = load i32, i32* @x.79
  %11 = load i32, i32* @y.80
  %12 = sub i32 %10, 1
  %13 = mul i32 %10, %12
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  %16 = icmp slt i32 %11, 10
  %17 = or i1 %15, %16
  br i1 %17, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %9, %originalBBalteredBB
  store i1 false, i1* %2, align 1, !dbg !3948
  %18 = load i32, i32* @x.79
  %19 = load i32, i32* @y.80
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %85, !dbg !3948

26:                                               ; preds = %1
  %27 = load i32, i32* @x.79
  %28 = load i32, i32* @y.80
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %26, %originalBB1alteredBB
  %35 = getelementptr inbounds [257 x i8], [257 x i8]* %4, i64 0, i64 0, !dbg !3949
  %36 = call i32 @strcmp(i8* %35, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.123, i64 0, i64 0)) #13, !dbg !3950
  %37 = icmp eq i32 %36, 0, !dbg !3951
  %38 = load i32, i32* @x.79
  %39 = load i32, i32* @y.80
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %37, label %66, label %46, !dbg !3952

46:                                               ; preds = %originalBBpart24
  %47 = load i32, i32* @x.79
  %48 = load i32, i32* @y.80
  %49 = sub i32 %47, 1
  %50 = mul i32 %47, %49
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %52, %53
  br i1 %54, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %46, %originalBB6alteredBB
  %55 = getelementptr inbounds [257 x i8], [257 x i8]* %4, i64 0, i64 0, !dbg !3953
  %56 = call i32 @strcmp(i8* %55, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.124, i64 0, i64 0)) #13, !dbg !3954
  %57 = icmp eq i32 %56, 0, !dbg !3955
  %58 = load i32, i32* @x.79
  %59 = load i32, i32* @y.80
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %66, !dbg !3952

66:                                               ; preds = %originalBBpart28, %originalBBpart24
  %67 = phi i1 [ true, %originalBBpart24 ], [ %57, %originalBBpart28 ]
  %68 = load i32, i32* @x.79
  %69 = load i32, i32* @y.80
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %66, %originalBB10alteredBB
  %76 = xor i1 %67, true, !dbg !3956
  store i1 %76, i1* %2, align 1, !dbg !3957
  %77 = load i32, i32* @x.79
  %78 = load i32, i32* @y.80
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBBpart223, label %originalBB10alteredBB

originalBBpart223:                                ; preds = %originalBB10
  br label %85, !dbg !3957

85:                                               ; preds = %originalBBpart223, %originalBBpart2
  %86 = load i32, i32* @x.79
  %87 = load i32, i32* @y.80
  %88 = sub i32 %86, 1
  %89 = mul i32 %86, %88
  %90 = urem i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %91, %92
  br i1 %93, label %originalBB25, label %originalBB25alteredBB

originalBB25:                                     ; preds = %85, %originalBB25alteredBB
  %94 = load i1, i1* %2, align 1, !dbg !3958
  %95 = load i32, i32* @x.79
  %96 = load i32, i32* @y.80
  %97 = sub i32 %95, 1
  %98 = mul i32 %95, %97
  %99 = urem i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %96, 10
  %102 = or i1 %100, %101
  br i1 %102, label %originalBBpart227, label %originalBB25alteredBB

originalBBpart227:                                ; preds = %originalBB25
  ret i1 %94, !dbg !3958

originalBBalteredBB:                              ; preds = %originalBB, %9
  store i1 false, i1* %2, align 1, !dbg !3948
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %26
  %103 = getelementptr inbounds [257 x i8], [257 x i8]* %4, i64 0, i64 0, !dbg !3949
  %104 = call i32 @strcmp(i8* %103, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.123, i64 0, i64 0)) #13, !dbg !3950
  %105 = icmp eq i32 %104, 0, !dbg !3951
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %46
  %106 = getelementptr inbounds [257 x i8], [257 x i8]* %4, i64 0, i64 0, !dbg !3953
  %107 = call i32 @strcmp(i8* %106, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.124, i64 0, i64 0)) #13, !dbg !3954
  %108 = icmp eq i32 %107, 0, !dbg !3955
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %66
  %_ = sub i1 %67, true
  %gen = mul i1 %_, true
  %_11 = sub i1 false, %67
  %gen12 = add i1 %_11, true
  %_13 = sub i1 %67, true
  %gen14 = mul i1 %_13, true
  %_15 = sub i1 %67, true
  %gen16 = mul i1 %_15, true
  %_17 = sub i1 false, %67
  %gen18 = add i1 %_17, true
  %_19 = sub i1 %67, true
  %gen20 = mul i1 %_19, true
  %_21 = shl i1 %67, true
  %109 = xor i1 %67, true, !dbg !3956
  store i1 %109, i1* %2, align 1, !dbg !3957
  br label %originalBB10

originalBB25alteredBB:                            ; preds = %originalBB25, %85
  %110 = load i1, i1* %2, align 1, !dbg !3958
  br label %originalBB25
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @locale_charset() #4 !dbg !3959 {
  %1 = load i32, i32* @x.81
  %2 = load i32, i32* @y.82
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %9, metadata !3963, metadata !DIExpression()), !dbg !3964
  %10 = call i8* @nl_langinfo(i32 14) #10, !dbg !3965
  store i8* %10, i8** %9, align 8, !dbg !3966
  %11 = load i8*, i8** %9, align 8, !dbg !3967
  %12 = icmp eq i8* %11, null, !dbg !3969
  %13 = load i32, i32* @x.81
  %14 = load i32, i32* @y.82
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %21, label %22, !dbg !3970

21:                                               ; preds = %originalBBpart2
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.127, i64 0, i64 0), i8** %9, align 8, !dbg !3971
  br label %22, !dbg !3972

22:                                               ; preds = %21, %originalBBpart2
  %23 = load i32, i32* @x.81
  %24 = load i32, i32* @y.82
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %22, %originalBB1alteredBB
  %31 = load i8*, i8** %9, align 8, !dbg !3973
  %32 = getelementptr inbounds i8, i8* %31, i64 0, !dbg !3973
  %33 = load i8, i8* %32, align 1, !dbg !3973
  %34 = sext i8 %33 to i32, !dbg !3973
  %35 = icmp eq i32 %34, 0, !dbg !3977
  %36 = load i32, i32* @x.81
  %37 = load i32, i32* @y.82
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %35, label %44, label %61, !dbg !3978

44:                                               ; preds = %originalBBpart24
  %45 = load i32, i32* @x.81
  %46 = load i32, i32* @y.82
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %44, %originalBB6alteredBB
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.128, i64 0, i64 0), i8** %9, align 8, !dbg !3979
  %53 = load i32, i32* @x.81
  %54 = load i32, i32* @y.82
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %61, !dbg !3980

61:                                               ; preds = %originalBBpart28, %originalBBpart24
  %62 = load i32, i32* @x.81
  %63 = load i32, i32* @y.82
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %61, %originalBB10alteredBB
  %70 = load i8*, i8** %9, align 8, !dbg !3981
  %71 = load i32, i32* @x.81
  %72 = load i32, i32* @y.82
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  ret i8* %70, !dbg !3982

originalBBalteredBB:                              ; preds = %originalBB, %0
  %79 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %79, metadata !3983, metadata !DIExpression()), !dbg !3964
  %80 = call i8* @nl_langinfo(i32 14) #10, !dbg !3965
  store i8* %80, i8** %79, align 8, !dbg !3966
  %81 = load i8*, i8** %79, align 8, !dbg !3967
  %82 = icmp eq i8* %81, null, !dbg !3969
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %22
  %83 = load i8*, i8** %9, align 8, !dbg !3973
  %84 = getelementptr inbounds i8, i8* %83, i64 0, !dbg !3973
  %85 = load i8, i8* %84, align 1, !dbg !3973
  %86 = sext i8 %85 to i32, !dbg !3973
  %87 = icmp eq i32 %86, 0, !dbg !3977
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %44
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.128, i64 0, i64 0), i8** %9, align 8, !dbg !3979
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %61
  %88 = load i8*, i8** %9, align 8, !dbg !3981
  br label %originalBB10
}

; Function Attrs: nounwind
declare dso_local i8* @nl_langinfo(i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @setlocale_null_r(i32, i8* nonnull, i64) #4 !dbg !3986 {
  %4 = load i32, i32* @x.83
  %5 = load i32, i32* @y.84
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  store i32 %0, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !3990, metadata !DIExpression()), !dbg !3991
  store i8* %1, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !3992, metadata !DIExpression()), !dbg !3993
  store i64 %2, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !3994, metadata !DIExpression()), !dbg !3995
  %15 = load i32, i32* %12, align 4, !dbg !3996
  %16 = load i8*, i8** %13, align 8, !dbg !3997
  %17 = load i64, i64* %14, align 8, !dbg !3998
  %18 = call i32 @setlocale_null_unlocked(i32 %15, i8* %16, i64 %17), !dbg !3999
  %19 = load i32, i32* @x.83
  %20 = load i32, i32* @y.84
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i32 %18, !dbg !4000

originalBBalteredBB:                              ; preds = %originalBB, %3
  %27 = alloca i32, align 4
  %28 = alloca i8*, align 8
  %29 = alloca i64, align 8
  store i32 %0, i32* %27, align 4
  call void @llvm.dbg.declare(metadata i32* %27, metadata !4001, metadata !DIExpression()), !dbg !3991
  store i8* %1, i8** %28, align 8
  call void @llvm.dbg.declare(metadata i8** %28, metadata !4004, metadata !DIExpression()), !dbg !3993
  store i64 %2, i64* %29, align 8
  call void @llvm.dbg.declare(metadata i64* %29, metadata !4005, metadata !DIExpression()), !dbg !3995
  %30 = load i32, i32* %27, align 4, !dbg !3996
  %31 = load i8*, i8** %28, align 8, !dbg !3997
  %32 = load i64, i64* %29, align 8, !dbg !3998
  %33 = call i32 @setlocale_null_unlocked(i32 %30, i8* %31, i64 %32), !dbg !3999
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @setlocale_null_unlocked(i32, i8*, i64) #4 !dbg !4006 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  store i32 %0, i32* %5, align 4
  call void @llvm.dbg.declare(metadata i32* %5, metadata !4007, metadata !DIExpression()), !dbg !4008
  store i8* %1, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !4009, metadata !DIExpression()), !dbg !4010
  store i64 %2, i64* %7, align 8
  %10 = mul i32 %0, -3
  %11 = add i32 %10, 4
  %12 = trunc i64 %2 to i32
  %13 = mul i32 %12, -2
  %14 = add i32 %13, 1
  %15 = mul i32 %11, %11
  %16 = mul i32 %14, %14
  %17 = add i32 %15, %16
  %18 = mul i32 %11, %14
  %19 = mul i32 %18, 2
  %20 = sub i32 %17, %19
  %21 = mul i32 %20, -3
  %22 = add i32 %21, -1
  %23 = icmp eq i32 %22, 2
  br i1 %23, label %24, label %41

24:                                               ; preds = %3
  %25 = load i32, i32* @x.85
  %26 = load i32, i32* @y.86
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %24, %originalBBalteredBB
  %33 = load i32, i32* @x.85
  %34 = load i32, i32* @y.86
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i32 0

41:                                               ; preds = %3
  call void @llvm.dbg.declare(metadata i64* %7, metadata !4011, metadata !DIExpression()), !dbg !4012
  call void @llvm.dbg.declare(metadata i8** %8, metadata !4013, metadata !DIExpression()), !dbg !4014
  %42 = load i32, i32* @x.85
  %43 = load i32, i32* @y.86
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %41, %originalBB1alteredBB
  %50 = load i32, i32* %5, align 4, !dbg !4015
  %51 = call i8* @setlocale_null_androidfix(i32 %50), !dbg !4016
  store i8* %51, i8** %8, align 8, !dbg !4014
  %52 = load i8*, i8** %8, align 8, !dbg !4017
  %53 = icmp eq i8* %52, null, !dbg !4019
  %54 = load i32, i32* @x.85
  %55 = load i32, i32* @y.86
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %53, label %62, label %117, !dbg !4020

62:                                               ; preds = %originalBBpart24
  %63 = load i32, i32* @x.85
  %64 = load i32, i32* @y.86
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %62, %originalBB6alteredBB
  %71 = load i64, i64* %7, align 8, !dbg !4021
  %72 = icmp ugt i64 %71, 0, !dbg !4024
  %73 = load i32, i32* @x.85
  %74 = load i32, i32* @y.86
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %72, label %81, label %100, !dbg !4025

81:                                               ; preds = %originalBBpart28
  %82 = load i32, i32* @x.85
  %83 = load i32, i32* @y.86
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %81, %originalBB10alteredBB
  %90 = load i8*, i8** %6, align 8, !dbg !4026
  %91 = getelementptr inbounds i8, i8* %90, i64 0, !dbg !4026
  store i8 0, i8* %91, align 1, !dbg !4027
  %92 = load i32, i32* @x.85
  %93 = load i32, i32* @y.86
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %100, !dbg !4026

100:                                              ; preds = %originalBBpart212, %originalBBpart28
  %101 = load i32, i32* @x.85
  %102 = load i32, i32* @y.86
  %103 = sub i32 %101, 1
  %104 = mul i32 %101, %103
  %105 = urem i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %102, 10
  %108 = or i1 %106, %107
  br i1 %108, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %100, %originalBB14alteredBB
  store i32 22, i32* %4, align 4, !dbg !4028
  %109 = load i32, i32* @x.85
  %110 = load i32, i32* @y.86
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %221, !dbg !4028

117:                                              ; preds = %originalBBpart24
  call void @llvm.dbg.declare(metadata i64* %9, metadata !4029, metadata !DIExpression()), !dbg !4031
  %118 = load i32, i32* @x.85
  %119 = load i32, i32* @y.86
  %120 = sub i32 %118, 1
  %121 = mul i32 %118, %120
  %122 = urem i32 %121, 2
  %123 = icmp eq i32 %122, 0
  %124 = icmp slt i32 %119, 10
  %125 = or i1 %123, %124
  br i1 %125, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %117, %originalBB18alteredBB
  %126 = load i8*, i8** %8, align 8, !dbg !4032
  %127 = call i64 @strlen(i8* %126) #13, !dbg !4033
  store i64 %127, i64* %9, align 8, !dbg !4031
  %128 = load i64, i64* %9, align 8, !dbg !4034
  %129 = load i64, i64* %7, align 8, !dbg !4036
  %130 = icmp ult i64 %128, %129, !dbg !4037
  %131 = load i32, i32* @x.85
  %132 = load i32, i32* @y.86
  %133 = sub i32 %131, 1
  %134 = mul i32 %131, %133
  %135 = urem i32 %134, 2
  %136 = icmp eq i32 %135, 0
  %137 = icmp slt i32 %132, 10
  %138 = or i1 %136, %137
  br i1 %138, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %130, label %139, label %160, !dbg !4038

139:                                              ; preds = %originalBBpart220
  %140 = load i32, i32* @x.85
  %141 = load i32, i32* @y.86
  %142 = sub i32 %140, 1
  %143 = mul i32 %140, %142
  %144 = urem i32 %143, 2
  %145 = icmp eq i32 %144, 0
  %146 = icmp slt i32 %141, 10
  %147 = or i1 %145, %146
  br i1 %147, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %139, %originalBB22alteredBB
  %148 = load i8*, i8** %6, align 8, !dbg !4039
  %149 = load i8*, i8** %8, align 8, !dbg !4041
  %150 = load i64, i64* %9, align 8, !dbg !4042
  %151 = add i64 %150, 1, !dbg !4043
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %148, i8* align 1 %149, i64 %151, i1 false), !dbg !4044
  store i32 0, i32* %4, align 4, !dbg !4045
  %152 = load i32, i32* @x.85
  %153 = load i32, i32* @y.86
  %154 = sub i32 %152, 1
  %155 = mul i32 %152, %154
  %156 = urem i32 %155, 2
  %157 = icmp eq i32 %156, 0
  %158 = icmp slt i32 %153, 10
  %159 = or i1 %157, %158
  br i1 %159, label %originalBBpart227, label %originalBB22alteredBB

originalBBpart227:                                ; preds = %originalBB22
  br label %221, !dbg !4045

160:                                              ; preds = %originalBBpart220
  %161 = load i32, i32* @x.85
  %162 = load i32, i32* @y.86
  %163 = sub i32 %161, 1
  %164 = mul i32 %161, %163
  %165 = urem i32 %164, 2
  %166 = icmp eq i32 %165, 0
  %167 = icmp slt i32 %162, 10
  %168 = or i1 %166, %167
  br i1 %168, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %160, %originalBB29alteredBB
  %169 = load i64, i64* %7, align 8, !dbg !4046
  %170 = icmp ugt i64 %169, 0, !dbg !4049
  %171 = load i32, i32* @x.85
  %172 = load i32, i32* @y.86
  %173 = sub i32 %171, 1
  %174 = mul i32 %171, %173
  %175 = urem i32 %174, 2
  %176 = icmp eq i32 %175, 0
  %177 = icmp slt i32 %172, 10
  %178 = or i1 %176, %177
  br i1 %178, label %originalBBpart231, label %originalBB29alteredBB

originalBBpart231:                                ; preds = %originalBB29
  br i1 %170, label %179, label %204, !dbg !4050

179:                                              ; preds = %originalBBpart231
  %180 = load i32, i32* @x.85
  %181 = load i32, i32* @y.86
  %182 = sub i32 %180, 1
  %183 = mul i32 %180, %182
  %184 = urem i32 %183, 2
  %185 = icmp eq i32 %184, 0
  %186 = icmp slt i32 %181, 10
  %187 = or i1 %185, %186
  br i1 %187, label %originalBB33, label %originalBB33alteredBB

originalBB33:                                     ; preds = %179, %originalBB33alteredBB
  %188 = load i8*, i8** %6, align 8, !dbg !4051
  %189 = load i8*, i8** %8, align 8, !dbg !4053
  %190 = load i64, i64* %7, align 8, !dbg !4054
  %191 = sub i64 %190, 1, !dbg !4055
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %188, i8* align 1 %189, i64 %191, i1 false), !dbg !4056
  %192 = load i8*, i8** %6, align 8, !dbg !4057
  %193 = load i64, i64* %7, align 8, !dbg !4058
  %194 = sub i64 %193, 1, !dbg !4059
  %195 = getelementptr inbounds i8, i8* %192, i64 %194, !dbg !4057
  store i8 0, i8* %195, align 1, !dbg !4060
  %196 = load i32, i32* @x.85
  %197 = load i32, i32* @y.86
  %198 = sub i32 %196, 1
  %199 = mul i32 %196, %198
  %200 = urem i32 %199, 2
  %201 = icmp eq i32 %200, 0
  %202 = icmp slt i32 %197, 10
  %203 = or i1 %201, %202
  br i1 %203, label %originalBBpart245, label %originalBB33alteredBB

originalBBpart245:                                ; preds = %originalBB33
  br label %204, !dbg !4061

204:                                              ; preds = %originalBBpart245, %originalBBpart231
  %205 = load i32, i32* @x.85
  %206 = load i32, i32* @y.86
  %207 = sub i32 %205, 1
  %208 = mul i32 %205, %207
  %209 = urem i32 %208, 2
  %210 = icmp eq i32 %209, 0
  %211 = icmp slt i32 %206, 10
  %212 = or i1 %210, %211
  br i1 %212, label %originalBB47, label %originalBB47alteredBB

originalBB47:                                     ; preds = %204, %originalBB47alteredBB
  store i32 34, i32* %4, align 4, !dbg !4062
  %213 = load i32, i32* @x.85
  %214 = load i32, i32* @y.86
  %215 = sub i32 %213, 1
  %216 = mul i32 %213, %215
  %217 = urem i32 %216, 2
  %218 = icmp eq i32 %217, 0
  %219 = icmp slt i32 %214, 10
  %220 = or i1 %218, %219
  br i1 %220, label %originalBBpart249, label %originalBB47alteredBB

originalBBpart249:                                ; preds = %originalBB47
  br label %221, !dbg !4062

221:                                              ; preds = %originalBBpart249, %originalBBpart227, %originalBBpart216
  %222 = load i32, i32* @x.85
  %223 = load i32, i32* @y.86
  %224 = sub i32 %222, 1
  %225 = mul i32 %222, %224
  %226 = urem i32 %225, 2
  %227 = icmp eq i32 %226, 0
  %228 = icmp slt i32 %223, 10
  %229 = or i1 %227, %228
  br i1 %229, label %originalBB51, label %originalBB51alteredBB

originalBB51:                                     ; preds = %221, %originalBB51alteredBB
  %230 = load i32, i32* %4, align 4, !dbg !4063
  %231 = load i32, i32* @x.85
  %232 = load i32, i32* @y.86
  %233 = sub i32 %231, 1
  %234 = mul i32 %231, %233
  %235 = urem i32 %234, 2
  %236 = icmp eq i32 %235, 0
  %237 = icmp slt i32 %232, 10
  %238 = or i1 %236, %237
  br i1 %238, label %originalBBpart253, label %originalBB51alteredBB

originalBBpart253:                                ; preds = %originalBB51
  ret i32 %230, !dbg !4063

originalBBalteredBB:                              ; preds = %originalBB, %24
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %41
  %239 = load i32, i32* %5, align 4, !dbg !4015
  %240 = call i8* @setlocale_null_androidfix(i32 %239), !dbg !4016
  store i8* %240, i8** %8, align 8, !dbg !4014
  %241 = load i8*, i8** %8, align 8, !dbg !4017
  %242 = icmp eq i8* %241, null, !dbg !4019
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %62
  %243 = load i64, i64* %7, align 8, !dbg !4021
  %244 = icmp ugt i64 %243, 0, !dbg !4024
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %81
  %245 = load i8*, i8** %6, align 8, !dbg !4026
  %246 = getelementptr inbounds i8, i8* %245, i64 0, !dbg !4026
  store i8 0, i8* %246, align 1, !dbg !4027
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %100
  store i32 22, i32* %4, align 4, !dbg !4028
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %117
  %247 = load i8*, i8** %8, align 8, !dbg !4032
  %248 = call i64 @strlen(i8* %247) #13, !dbg !4033
  store i64 %248, i64* %9, align 8, !dbg !4031
  %249 = load i64, i64* %9, align 8, !dbg !4034
  %250 = load i64, i64* %7, align 8, !dbg !4036
  %251 = icmp ult i64 %249, %250, !dbg !4037
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %139
  %252 = load i8*, i8** %6, align 8, !dbg !4039
  %253 = load i8*, i8** %8, align 8, !dbg !4041
  %254 = load i64, i64* %9, align 8, !dbg !4042
  %_ = shl i64 %254, 1
  %_23 = sub i64 0, %254
  %gen = add i64 %_23, 1
  %_24 = sub i64 %254, 1
  %gen25 = mul i64 %_24, 1
  %255 = add i64 %254, 1, !dbg !4043
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %252, i8* align 1 %253, i64 %255, i1 false), !dbg !4044
  store i32 0, i32* %4, align 4, !dbg !4045
  br label %originalBB22

originalBB29alteredBB:                            ; preds = %originalBB29, %160
  %256 = load i64, i64* %7, align 8, !dbg !4046
  %257 = icmp ugt i64 %256, 0, !dbg !4049
  br label %originalBB29

originalBB33alteredBB:                            ; preds = %originalBB33, %179
  %258 = load i8*, i8** %6, align 8, !dbg !4051
  %259 = load i8*, i8** %8, align 8, !dbg !4053
  %260 = load i64, i64* %7, align 8, !dbg !4054
  %_34 = shl i64 %260, 1
  %_35 = sub i64 %260, 1
  %gen36 = mul i64 %_35, 1
  %_37 = shl i64 %260, 1
  %_38 = sub i64 %260, 1
  %gen39 = mul i64 %_38, 1
  %_40 = sub i64 %260, 1
  %gen41 = mul i64 %_40, 1
  %261 = sub i64 %260, 1, !dbg !4055
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %258, i8* align 1 %259, i64 %261, i1 false), !dbg !4056
  %262 = load i8*, i8** %6, align 8, !dbg !4057
  %263 = load i64, i64* %7, align 8, !dbg !4058
  %_42 = sub i64 %263, 1
  %gen43 = mul i64 %_42, 1
  %264 = sub i64 %263, 1, !dbg !4059
  %265 = getelementptr inbounds i8, i8* %262, i64 %264, !dbg !4057
  store i8 0, i8* %265, align 1, !dbg !4060
  br label %originalBB33

originalBB47alteredBB:                            ; preds = %originalBB47, %204
  store i32 34, i32* %4, align 4, !dbg !4062
  br label %originalBB47

originalBB51alteredBB:                            ; preds = %originalBB51, %221
  %266 = load i32, i32* %4, align 4, !dbg !4063
  br label %originalBB51
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @setlocale_null_androidfix(i32) #4 !dbg !4064 {
  %2 = load i32, i32* @x.87
  %3 = load i32, i32* @y.88
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  store i32 %0, i32* %10, align 4
  call void @llvm.dbg.declare(metadata i32* %10, metadata !4067, metadata !DIExpression()), !dbg !4068
  call void @llvm.dbg.declare(metadata i8** %11, metadata !4069, metadata !DIExpression()), !dbg !4070
  %12 = load i32, i32* %10, align 4, !dbg !4071
  %13 = call i8* @setlocale(i32 %12, i8* null) #10, !dbg !4072
  store i8* %13, i8** %11, align 8, !dbg !4070
  %14 = load i8*, i8** %11, align 8, !dbg !4073
  %15 = load i32, i32* @x.87
  %16 = load i32, i32* @y.88
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %14, !dbg !4074

originalBBalteredBB:                              ; preds = %originalBB, %1
  %23 = alloca i32, align 4
  %24 = alloca i8*, align 8
  store i32 %0, i32* %23, align 4
  call void @llvm.dbg.declare(metadata i32* %23, metadata !4075, metadata !DIExpression()), !dbg !4068
  call void @llvm.dbg.declare(metadata i8** %24, metadata !4078, metadata !DIExpression()), !dbg !4070
  %25 = load i32, i32* %23, align 4, !dbg !4071
  %26 = call i8* @setlocale(i32 %25, i8* null) #10, !dbg !4072
  store i8* %26, i8** %24, align 8, !dbg !4070
  %27 = load i8*, i8** %24, align 8, !dbg !4073
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fclose(%struct._IO_FILE* nonnull) #4 !dbg !4079 {
  %2 = load i32, i32* @x.89
  %3 = load i32, i32* @y.90
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca %struct._IO_FILE*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %11, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %11, metadata !4117, metadata !DIExpression()), !dbg !4118
  call void @llvm.dbg.declare(metadata i32* %12, metadata !4119, metadata !DIExpression()), !dbg !4120
  store i32 0, i32* %12, align 4, !dbg !4120
  call void @llvm.dbg.declare(metadata i32* %13, metadata !4121, metadata !DIExpression()), !dbg !4122
  call void @llvm.dbg.declare(metadata i32* %14, metadata !4123, metadata !DIExpression()), !dbg !4124
  store i32 0, i32* %14, align 4, !dbg !4124
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4125
  %16 = call i32 @fileno(%struct._IO_FILE* %15) #10, !dbg !4126
  store i32 %16, i32* %13, align 4, !dbg !4127
  %17 = add i32 %16, 1
  %18 = mul i32 %17, %17
  %19 = sub i32 %18, %17
  %20 = srem i32 %19, 2
  %21 = add i32 %20, -1
  %22 = load i32, i32* @x.89
  %23 = load i32, i32* @y.90
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %30

30:                                               ; preds = %originalBBpart2
  %31 = load i32, i32* @x.89
  %32 = load i32, i32* @y.90
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %30, %originalBB14alteredBB
  %collatzVar = alloca i32
  %39 = load i32, i32* @x.89
  %40 = load i32, i32* @y.90
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %47

47:                                               ; preds = %originalBBpart216
  %48 = load i32, i32* @x.89
  %49 = load i32, i32* @y.90
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %47, %originalBB18alteredBB
  %56 = load i32, i32* @inVal0
  %57 = icmp sgt i32 %56, 1
  %58 = load i32, i32* @x.89
  %59 = load i32, i32* @y.90
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %57, label %83, label %66

66:                                               ; preds = %originalBBpart220
  %67 = load i32, i32* @x.89
  %68 = load i32, i32* @y.90
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %66, %originalBB22alteredBB
  store i32 94, i32* %collatzVar
  %75 = load i32, i32* @x.89
  %76 = load i32, i32* @y.90
  %77 = sub i32 %75, 1
  %78 = mul i32 %75, %77
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %80, %81
  br i1 %82, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %83

83:                                               ; preds = %originalBBpart224, %originalBBpart220
  %84 = load i32, i32* @x.89
  %85 = load i32, i32* @y.90
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %83, %originalBB26alteredBB
  %92 = load i8**, i8*** @inVal1
  %93 = getelementptr inbounds i8*, i8** %92, i64 1
  %94 = load i8*, i8** %93
  %controle = call i32 @controle(i8* %94, i32 -1)
  store i32 %controle, i32* %collatzVar
  %95 = load i32, i32* @x.89
  %96 = load i32, i32* @y.90
  %97 = sub i32 %95, 1
  %98 = mul i32 %95, %97
  %99 = urem i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %96, 10
  %102 = or i1 %100, %101
  br i1 %102, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %103

103:                                              ; preds = %originalBBpart263, %originalBBpart257, %originalBBpart228
  %104 = load i32, i32* @x.89
  %105 = load i32, i32* @y.90
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %103, %originalBB30alteredBB
  %112 = load i32, i32* %collatzVar
  %113 = icmp sgt i32 %112, 1
  %114 = load i32, i32* @x.89
  %115 = load i32, i32* @y.90
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br i1 %113, label %122, label %205

122:                                              ; preds = %originalBBpart232
  %123 = load i32, i32* @x.89
  %124 = load i32, i32* @y.90
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %122, %originalBB34alteredBB
  %131 = load i32, i32* %collatzVar
  %132 = srem i32 %131, 2
  %133 = icmp eq i32 %132, 0
  %134 = load i32, i32* @x.89
  %135 = load i32, i32* @y.90
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBBpart241, label %originalBB34alteredBB

originalBBpart241:                                ; preds = %originalBB34
  br i1 %133, label %142, label %161

142:                                              ; preds = %originalBBpart241
  %143 = load i32, i32* @x.89
  %144 = load i32, i32* @y.90
  %145 = sub i32 %143, 1
  %146 = mul i32 %143, %145
  %147 = urem i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %148, %149
  br i1 %150, label %originalBB43, label %originalBB43alteredBB

originalBB43:                                     ; preds = %142, %originalBB43alteredBB
  %151 = load i32, i32* %collatzVar
  %152 = sdiv i32 %151, 2
  store i32 %152, i32* %collatzVar
  %153 = load i32, i32* @x.89
  %154 = load i32, i32* @y.90
  %155 = sub i32 %153, 1
  %156 = mul i32 %153, %155
  %157 = urem i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = icmp slt i32 %154, 10
  %160 = or i1 %158, %159
  br i1 %160, label %originalBBpart247, label %originalBB43alteredBB

originalBBpart247:                                ; preds = %originalBB43
  br label %165

161:                                              ; preds = %originalBBpart241
  %162 = load i32, i32* %collatzVar
  %163 = mul i32 %162, 3
  %164 = add i32 %163, 1
  store i32 %164, i32* %collatzVar
  br label %165

165:                                              ; preds = %161, %originalBBpart247
  %166 = load i32, i32* @x.89
  %167 = load i32, i32* @y.90
  %168 = sub i32 %166, 1
  %169 = mul i32 %166, %168
  %170 = urem i32 %169, 2
  %171 = icmp eq i32 %170, 0
  %172 = icmp slt i32 %167, 10
  %173 = or i1 %171, %172
  br i1 %173, label %originalBB49, label %originalBB49alteredBB

originalBB49:                                     ; preds = %165, %originalBB49alteredBB
  %174 = load i32, i32* %collatzVar
  %175 = sub i32 %21, %174
  %176 = icmp sgt i32 %175, -3
  %177 = load i32, i32* @x.89
  %178 = load i32, i32* @y.90
  %179 = sub i32 %177, 1
  %180 = mul i32 %177, %179
  %181 = urem i32 %180, 2
  %182 = icmp eq i32 %181, 0
  %183 = icmp slt i32 %178, 10
  %184 = or i1 %182, %183
  br i1 %184, label %originalBBpart257, label %originalBB49alteredBB

originalBBpart257:                                ; preds = %originalBB49
  br i1 %176, label %185, label %103

185:                                              ; preds = %originalBBpart257
  %186 = load i32, i32* @x.89
  %187 = load i32, i32* @y.90
  %188 = sub i32 %186, 1
  %189 = mul i32 %186, %188
  %190 = urem i32 %189, 2
  %191 = icmp eq i32 %190, 0
  %192 = icmp slt i32 %187, 10
  %193 = or i1 %191, %192
  br i1 %193, label %originalBB59, label %originalBB59alteredBB

originalBB59:                                     ; preds = %185, %originalBB59alteredBB
  %194 = load i32, i32* %collatzVar
  %195 = add i32 %21, %194
  %196 = icmp slt i32 %195, 1
  %197 = load i32, i32* @x.89
  %198 = load i32, i32* @y.90
  %199 = sub i32 %197, 1
  %200 = mul i32 %197, %199
  %201 = urem i32 %200, 2
  %202 = icmp eq i32 %201, 0
  %203 = icmp slt i32 %198, 10
  %204 = or i1 %202, %203
  br i1 %204, label %originalBBpart263, label %originalBB59alteredBB

originalBBpart263:                                ; preds = %originalBB59
  br i1 %196, label %222, label %103

205:                                              ; preds = %originalBBpart232
  %206 = load i32, i32* @x.89
  %207 = load i32, i32* @y.90
  %208 = sub i32 %206, 1
  %209 = mul i32 %206, %208
  %210 = urem i32 %209, 2
  %211 = icmp eq i32 %210, 0
  %212 = icmp slt i32 %207, 10
  %213 = or i1 %211, %212
  br i1 %213, label %originalBB65, label %originalBB65alteredBB

originalBB65:                                     ; preds = %205, %originalBB65alteredBB
  %214 = load i32, i32* @x.89
  %215 = load i32, i32* @y.90
  %216 = sub i32 %214, 1
  %217 = mul i32 %214, %216
  %218 = urem i32 %217, 2
  %219 = icmp eq i32 %218, 0
  %220 = icmp slt i32 %215, 10
  %221 = or i1 %219, %220
  br i1 %221, label %originalBBpart267, label %originalBB65alteredBB

originalBBpart267:                                ; preds = %originalBB65
  ret i32 0

222:                                              ; preds = %originalBBpart263
  %223 = load i32, i32* @x.89
  %224 = load i32, i32* @y.90
  %225 = sub i32 %223, 1
  %226 = mul i32 %223, %225
  %227 = urem i32 %226, 2
  %228 = icmp eq i32 %227, 0
  %229 = icmp slt i32 %224, 10
  %230 = or i1 %228, %229
  br i1 %230, label %originalBB69, label %originalBB69alteredBB

originalBB69:                                     ; preds = %222, %originalBB69alteredBB
  %231 = load i32, i32* %13, align 4, !dbg !4128
  %232 = icmp slt i32 %231, 0, !dbg !4130
  %233 = load i32, i32* @x.89
  %234 = load i32, i32* @y.90
  %235 = sub i32 %233, 1
  %236 = mul i32 %233, %235
  %237 = urem i32 %236, 2
  %238 = icmp eq i32 %237, 0
  %239 = icmp slt i32 %234, 10
  %240 = or i1 %238, %239
  br i1 %240, label %originalBBpart271, label %originalBB69alteredBB

originalBBpart271:                                ; preds = %originalBB69
  br i1 %232, label %241, label %260, !dbg !4131

241:                                              ; preds = %originalBBpart271
  %242 = load i32, i32* @x.89
  %243 = load i32, i32* @y.90
  %244 = sub i32 %242, 1
  %245 = mul i32 %242, %244
  %246 = urem i32 %245, 2
  %247 = icmp eq i32 %246, 0
  %248 = icmp slt i32 %243, 10
  %249 = or i1 %247, %248
  br i1 %249, label %originalBB73, label %originalBB73alteredBB

originalBB73:                                     ; preds = %241, %originalBB73alteredBB
  %250 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4132
  %251 = call i32 @fclose(%struct._IO_FILE* %250), !dbg !4133
  store i32 %251, i32* %10, align 4, !dbg !4134
  %252 = load i32, i32* @x.89
  %253 = load i32, i32* @y.90
  %254 = sub i32 %252, 1
  %255 = mul i32 %252, %254
  %256 = urem i32 %255, 2
  %257 = icmp eq i32 %256, 0
  %258 = icmp slt i32 %253, 10
  %259 = or i1 %257, %258
  br i1 %259, label %originalBBpart275, label %originalBB73alteredBB

originalBBpart275:                                ; preds = %originalBB73
  br label %398, !dbg !4134

260:                                              ; preds = %originalBBpart271
  %261 = load i32, i32* @x.89
  %262 = load i32, i32* @y.90
  %263 = sub i32 %261, 1
  %264 = mul i32 %261, %263
  %265 = urem i32 %264, 2
  %266 = icmp eq i32 %265, 0
  %267 = icmp slt i32 %262, 10
  %268 = or i1 %266, %267
  br i1 %268, label %originalBB77, label %originalBB77alteredBB

originalBB77:                                     ; preds = %260, %originalBB77alteredBB
  %269 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4135
  %270 = call i32 @__freading(%struct._IO_FILE* %269) #10, !dbg !4135
  %271 = icmp ne i32 %270, 0, !dbg !4135
  %272 = load i32, i32* @x.89
  %273 = load i32, i32* @y.90
  %274 = sub i32 %272, 1
  %275 = mul i32 %272, %274
  %276 = urem i32 %275, 2
  %277 = icmp eq i32 %276, 0
  %278 = icmp slt i32 %273, 10
  %279 = or i1 %277, %278
  br i1 %279, label %originalBBpart279, label %originalBB77alteredBB

originalBBpart279:                                ; preds = %originalBB77
  br i1 %271, label %280, label %301, !dbg !4137

280:                                              ; preds = %originalBBpart279
  %281 = load i32, i32* @x.89
  %282 = load i32, i32* @y.90
  %283 = sub i32 %281, 1
  %284 = mul i32 %281, %283
  %285 = urem i32 %284, 2
  %286 = icmp eq i32 %285, 0
  %287 = icmp slt i32 %282, 10
  %288 = or i1 %286, %287
  br i1 %288, label %originalBB81, label %originalBB81alteredBB

originalBB81:                                     ; preds = %280, %originalBB81alteredBB
  %289 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4138
  %290 = call i32 @fileno(%struct._IO_FILE* %289) #10, !dbg !4139
  %291 = call i64 @lseek(i32 %290, i64 0, i32 1) #10, !dbg !4140
  %292 = icmp ne i64 %291, -1, !dbg !4141
  %293 = load i32, i32* @x.89
  %294 = load i32, i32* @y.90
  %295 = sub i32 %293, 1
  %296 = mul i32 %293, %295
  %297 = urem i32 %296, 2
  %298 = icmp eq i32 %297, 0
  %299 = icmp slt i32 %294, 10
  %300 = or i1 %298, %299
  br i1 %300, label %originalBBpart283, label %originalBB81alteredBB

originalBBpart283:                                ; preds = %originalBB81
  br i1 %292, label %301, label %340, !dbg !4142

301:                                              ; preds = %originalBBpart283, %originalBBpart279
  %302 = load i32, i32* @x.89
  %303 = load i32, i32* @y.90
  %304 = sub i32 %302, 1
  %305 = mul i32 %302, %304
  %306 = urem i32 %305, 2
  %307 = icmp eq i32 %306, 0
  %308 = icmp slt i32 %303, 10
  %309 = or i1 %307, %308
  br i1 %309, label %originalBB85, label %originalBB85alteredBB

originalBB85:                                     ; preds = %301, %originalBB85alteredBB
  %310 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4143
  %311 = call i32 @rpl_fflush(%struct._IO_FILE* %310), !dbg !4144
  %312 = icmp ne i32 %311, 0, !dbg !4144
  %313 = load i32, i32* @x.89
  %314 = load i32, i32* @y.90
  %315 = sub i32 %313, 1
  %316 = mul i32 %313, %315
  %317 = urem i32 %316, 2
  %318 = icmp eq i32 %317, 0
  %319 = icmp slt i32 %314, 10
  %320 = or i1 %318, %319
  br i1 %320, label %originalBBpart287, label %originalBB85alteredBB

originalBBpart287:                                ; preds = %originalBB85
  br i1 %312, label %321, label %340, !dbg !4145

321:                                              ; preds = %originalBBpart287
  %322 = load i32, i32* @x.89
  %323 = load i32, i32* @y.90
  %324 = sub i32 %322, 1
  %325 = mul i32 %322, %324
  %326 = urem i32 %325, 2
  %327 = icmp eq i32 %326, 0
  %328 = icmp slt i32 %323, 10
  %329 = or i1 %327, %328
  br i1 %329, label %originalBB89, label %originalBB89alteredBB

originalBB89:                                     ; preds = %321, %originalBB89alteredBB
  %330 = call i32* @__errno_location() #15, !dbg !4146
  %331 = load i32, i32* %330, align 4, !dbg !4146
  store i32 %331, i32* %12, align 4, !dbg !4147
  %332 = load i32, i32* @x.89
  %333 = load i32, i32* @y.90
  %334 = sub i32 %332, 1
  %335 = mul i32 %332, %334
  %336 = urem i32 %335, 2
  %337 = icmp eq i32 %336, 0
  %338 = icmp slt i32 %333, 10
  %339 = or i1 %337, %338
  br i1 %339, label %originalBBpart291, label %originalBB89alteredBB

originalBBpart291:                                ; preds = %originalBB89
  br label %340, !dbg !4148

340:                                              ; preds = %originalBBpart291, %originalBBpart287, %originalBBpart283
  %341 = load i32, i32* @x.89
  %342 = load i32, i32* @y.90
  %343 = sub i32 %341, 1
  %344 = mul i32 %341, %343
  %345 = urem i32 %344, 2
  %346 = icmp eq i32 %345, 0
  %347 = icmp slt i32 %342, 10
  %348 = or i1 %346, %347
  br i1 %348, label %originalBB93, label %originalBB93alteredBB

originalBB93:                                     ; preds = %340, %originalBB93alteredBB
  %349 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4149
  %350 = call i32 @fclose(%struct._IO_FILE* %349), !dbg !4150
  store i32 %350, i32* %14, align 4, !dbg !4151
  %351 = load i32, i32* %12, align 4, !dbg !4152
  %352 = icmp ne i32 %351, 0, !dbg !4154
  %353 = load i32, i32* @x.89
  %354 = load i32, i32* @y.90
  %355 = sub i32 %353, 1
  %356 = mul i32 %353, %355
  %357 = urem i32 %356, 2
  %358 = icmp eq i32 %357, 0
  %359 = icmp slt i32 %354, 10
  %360 = or i1 %358, %359
  br i1 %360, label %originalBBpart295, label %originalBB93alteredBB

originalBBpart295:                                ; preds = %originalBB93
  br i1 %352, label %361, label %380, !dbg !4155

361:                                              ; preds = %originalBBpart295
  %362 = load i32, i32* @x.89
  %363 = load i32, i32* @y.90
  %364 = sub i32 %362, 1
  %365 = mul i32 %362, %364
  %366 = urem i32 %365, 2
  %367 = icmp eq i32 %366, 0
  %368 = icmp slt i32 %363, 10
  %369 = or i1 %367, %368
  br i1 %369, label %originalBB97, label %originalBB97alteredBB

originalBB97:                                     ; preds = %361, %originalBB97alteredBB
  %370 = load i32, i32* %12, align 4, !dbg !4156
  %371 = call i32* @__errno_location() #15, !dbg !4158
  store i32 %370, i32* %371, align 4, !dbg !4159
  store i32 -1, i32* %14, align 4, !dbg !4160
  %372 = load i32, i32* @x.89
  %373 = load i32, i32* @y.90
  %374 = sub i32 %372, 1
  %375 = mul i32 %372, %374
  %376 = urem i32 %375, 2
  %377 = icmp eq i32 %376, 0
  %378 = icmp slt i32 %373, 10
  %379 = or i1 %377, %378
  br i1 %379, label %originalBBpart299, label %originalBB97alteredBB

originalBBpart299:                                ; preds = %originalBB97
  br label %380, !dbg !4161

380:                                              ; preds = %originalBBpart299, %originalBBpart295
  %381 = load i32, i32* @x.89
  %382 = load i32, i32* @y.90
  %383 = sub i32 %381, 1
  %384 = mul i32 %381, %383
  %385 = urem i32 %384, 2
  %386 = icmp eq i32 %385, 0
  %387 = icmp slt i32 %382, 10
  %388 = or i1 %386, %387
  br i1 %388, label %originalBB101, label %originalBB101alteredBB

originalBB101:                                    ; preds = %380, %originalBB101alteredBB
  %389 = load i32, i32* %14, align 4, !dbg !4162
  store i32 %389, i32* %10, align 4, !dbg !4163
  %390 = load i32, i32* @x.89
  %391 = load i32, i32* @y.90
  %392 = sub i32 %390, 1
  %393 = mul i32 %390, %392
  %394 = urem i32 %393, 2
  %395 = icmp eq i32 %394, 0
  %396 = icmp slt i32 %391, 10
  %397 = or i1 %395, %396
  br i1 %397, label %originalBBpart2103, label %originalBB101alteredBB

originalBBpart2103:                               ; preds = %originalBB101
  br label %398, !dbg !4163

398:                                              ; preds = %originalBBpart2103, %originalBBpart275
  %399 = load i32, i32* @x.89
  %400 = load i32, i32* @y.90
  %401 = sub i32 %399, 1
  %402 = mul i32 %399, %401
  %403 = urem i32 %402, 2
  %404 = icmp eq i32 %403, 0
  %405 = icmp slt i32 %400, 10
  %406 = or i1 %404, %405
  br i1 %406, label %originalBB105, label %originalBB105alteredBB

originalBB105:                                    ; preds = %398, %originalBB105alteredBB
  %407 = load i32, i32* %10, align 4, !dbg !4164
  %408 = load i32, i32* @x.89
  %409 = load i32, i32* @y.90
  %410 = sub i32 %408, 1
  %411 = mul i32 %408, %410
  %412 = urem i32 %411, 2
  %413 = icmp eq i32 %412, 0
  %414 = icmp slt i32 %409, 10
  %415 = or i1 %413, %414
  br i1 %415, label %originalBBpart2107, label %originalBB105alteredBB

originalBBpart2107:                               ; preds = %originalBB105
  ret i32 %407, !dbg !4164

originalBBalteredBB:                              ; preds = %originalBB, %1
  %416 = alloca i32, align 4
  %417 = alloca %struct._IO_FILE*, align 8
  %418 = alloca i32, align 4
  %419 = alloca i32, align 4
  %420 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %417, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %417, metadata !4165, metadata !DIExpression()), !dbg !4118
  call void @llvm.dbg.declare(metadata i32* %418, metadata !4204, metadata !DIExpression()), !dbg !4120
  store i32 0, i32* %418, align 4, !dbg !4120
  call void @llvm.dbg.declare(metadata i32* %419, metadata !4205, metadata !DIExpression()), !dbg !4122
  call void @llvm.dbg.declare(metadata i32* %420, metadata !4206, metadata !DIExpression()), !dbg !4124
  store i32 0, i32* %420, align 4, !dbg !4124
  %421 = load %struct._IO_FILE*, %struct._IO_FILE** %417, align 8, !dbg !4125
  %422 = call i32 @fileno(%struct._IO_FILE* %421) #10, !dbg !4126
  store i32 %422, i32* %419, align 4, !dbg !4127
  %_ = shl i32 %422, 1
  %_1 = shl i32 %422, 1
  %_2 = shl i32 %422, 1
  %_3 = sub i32 %422, 1
  %gen = mul i32 %_3, 1
  %423 = add i32 %422, 1
  %_4 = shl i32 %423, %423
  %424 = mul i32 %423, %423
  %_5 = shl i32 %424, %423
  %_6 = sub i32 0, %424
  %gen7 = add i32 %_6, %423
  %425 = sub i32 %424, %423
  %_8 = sub i32 0, %425
  %gen9 = add i32 %_8, 2
  %_10 = sub i32 %425, 2
  %gen11 = mul i32 %_10, 2
  %_12 = shl i32 %425, 2
  %426 = srem i32 %425, 2
  %_13 = shl i32 %426, -1
  %427 = add i32 %426, -1
  br label %originalBB

originalBB14alteredBB:                            ; preds = %originalBB14, %30
  %collatzVaralteredBB = alloca i32
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %47
  %428 = load i32, i32* @inVal0
  %429 = icmp sgt i32 %428, 1
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %66
  store i32 94, i32* %collatzVar
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %83
  %430 = load i8**, i8*** @inVal1
  %431 = getelementptr inbounds i8*, i8** %430, i64 1
  %432 = load i8*, i8** %431
  %controlealteredBB = call i32 @controle(i8* %432, i32 -1)
  store i32 %controlealteredBB, i32* %collatzVar
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %103
  %433 = load i32, i32* %collatzVar
  %434 = icmp sgt i32 %433, 1
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %122
  %435 = load i32, i32* %collatzVar
  %_35 = shl i32 %435, 2
  %_36 = sub i32 %435, 2
  %gen37 = mul i32 %_36, 2
  %_38 = sub i32 %435, 2
  %gen39 = mul i32 %_38, 2
  %436 = srem i32 %435, 2
  %437 = icmp eq i32 %436, 0
  br label %originalBB34

originalBB43alteredBB:                            ; preds = %originalBB43, %142
  %438 = load i32, i32* %collatzVar
  %_44 = sub i32 %438, 2
  %gen45 = mul i32 %_44, 2
  %439 = sdiv i32 %438, 2
  store i32 %439, i32* %collatzVar
  br label %originalBB43

originalBB49alteredBB:                            ; preds = %originalBB49, %165
  %440 = load i32, i32* %collatzVar
  %_50 = sub i32 %21, %440
  %gen51 = mul i32 %_50, %440
  %_52 = sub i32 0, %21
  %gen53 = add i32 %_52, %440
  %_54 = sub i32 0, %21
  %gen55 = add i32 %_54, %440
  %441 = sub i32 %21, %440
  %442 = icmp sgt i32 %441, -3
  br label %originalBB49

originalBB59alteredBB:                            ; preds = %originalBB59, %185
  %443 = load i32, i32* %collatzVar
  %_60 = shl i32 %21, %443
  %_61 = shl i32 %21, %443
  %444 = add i32 %21, %443
  %445 = icmp slt i32 %444, 1
  br label %originalBB59

originalBB65alteredBB:                            ; preds = %originalBB65, %205
  br label %originalBB65

originalBB69alteredBB:                            ; preds = %originalBB69, %222
  %446 = load i32, i32* %13, align 4, !dbg !4128
  %447 = icmp slt i32 %446, 0, !dbg !4130
  br label %originalBB69

originalBB73alteredBB:                            ; preds = %originalBB73, %241
  %448 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4132
  %449 = call i32 @fclose(%struct._IO_FILE* %448), !dbg !4133
  store i32 %449, i32* %10, align 4, !dbg !4134
  br label %originalBB73

originalBB77alteredBB:                            ; preds = %originalBB77, %260
  %450 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4135
  %451 = call i32 @__freading(%struct._IO_FILE* %450) #10, !dbg !4135
  %452 = icmp ne i32 %451, 0, !dbg !4135
  br label %originalBB77

originalBB81alteredBB:                            ; preds = %originalBB81, %280
  %453 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4138
  %454 = call i32 @fileno(%struct._IO_FILE* %453) #10, !dbg !4139
  %455 = call i64 @lseek(i32 %454, i64 0, i32 1) #10, !dbg !4140
  %456 = icmp ne i64 %455, -1, !dbg !4141
  br label %originalBB81

originalBB85alteredBB:                            ; preds = %originalBB85, %301
  %457 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4143
  %458 = call i32 @rpl_fflush(%struct._IO_FILE* %457), !dbg !4144
  %459 = icmp ne i32 %458, 0, !dbg !4144
  br label %originalBB85

originalBB89alteredBB:                            ; preds = %originalBB89, %321
  %460 = call i32* @__errno_location() #15, !dbg !4146
  %461 = load i32, i32* %460, align 4, !dbg !4146
  store i32 %461, i32* %12, align 4, !dbg !4147
  br label %originalBB89

originalBB93alteredBB:                            ; preds = %originalBB93, %340
  %462 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4149
  %463 = call i32 @fclose(%struct._IO_FILE* %462), !dbg !4150
  store i32 %463, i32* %14, align 4, !dbg !4151
  %464 = load i32, i32* %12, align 4, !dbg !4152
  %465 = icmp ne i32 %464, 0, !dbg !4154
  br label %originalBB93

originalBB97alteredBB:                            ; preds = %originalBB97, %361
  %466 = load i32, i32* %12, align 4, !dbg !4156
  %467 = call i32* @__errno_location() #15, !dbg !4158
  store i32 %466, i32* %467, align 4, !dbg !4159
  store i32 -1, i32* %14, align 4, !dbg !4160
  br label %originalBB97

originalBB101alteredBB:                           ; preds = %originalBB101, %380
  %468 = load i32, i32* %14, align 4, !dbg !4162
  store i32 %468, i32* %10, align 4, !dbg !4163
  br label %originalBB101

originalBB105alteredBB:                           ; preds = %originalBB105, %398
  %469 = load i32, i32* %10, align 4, !dbg !4164
  br label %originalBB105
}

; Function Attrs: nounwind
declare dso_local i32 @fileno(%struct._IO_FILE*) #2

declare dso_local i32 @fclose(%struct._IO_FILE*) #3

; Function Attrs: nounwind
declare dso_local i32 @__freading(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare dso_local i64 @lseek(i32, i64, i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fflush(%struct._IO_FILE*) #4 !dbg !4207 {
  %2 = load i32, i32* @x.91
  %3 = load i32, i32* @y.92
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %11, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %11, metadata !4245, metadata !DIExpression()), !dbg !4246
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4247
  %13 = icmp eq %struct._IO_FILE* %12, null, !dbg !4249
  %14 = load i32, i32* @x.91
  %15 = load i32, i32* @y.92
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %13, label %42, label %22, !dbg !4250

22:                                               ; preds = %originalBBpart2
  %23 = load i32, i32* @x.91
  %24 = load i32, i32* @y.92
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %22, %originalBB1alteredBB
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4251
  %32 = call i32 @__freading(%struct._IO_FILE* %31) #10, !dbg !4251
  %33 = icmp ne i32 %32, 0, !dbg !4251
  %34 = load i32, i32* @x.91
  %35 = load i32, i32* @y.92
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %33, label %61, label %42, !dbg !4252

42:                                               ; preds = %originalBBpart24, %originalBBpart2
  %43 = load i32, i32* @x.91
  %44 = load i32, i32* @y.92
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %42, %originalBB6alteredBB
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4253
  %52 = call i32 @fflush(%struct._IO_FILE* %51), !dbg !4254
  store i32 %52, i32* %10, align 4, !dbg !4255
  %53 = load i32, i32* @x.91
  %54 = load i32, i32* @y.92
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %81, !dbg !4255

61:                                               ; preds = %originalBBpart24
  %62 = load i32, i32* @x.91
  %63 = load i32, i32* @y.92
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %61, %originalBB10alteredBB
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4256
  call void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE* %70), !dbg !4257
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4258
  %72 = call i32 @fflush(%struct._IO_FILE* %71), !dbg !4259
  store i32 %72, i32* %10, align 4, !dbg !4260
  %73 = load i32, i32* @x.91
  %74 = load i32, i32* @y.92
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %81, !dbg !4260

81:                                               ; preds = %originalBBpart212, %originalBBpart28
  %82 = load i32, i32* @x.91
  %83 = load i32, i32* @y.92
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %81, %originalBB14alteredBB
  %90 = load i32, i32* %10, align 4, !dbg !4261
  %91 = load i32, i32* @x.91
  %92 = load i32, i32* @y.92
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  ret i32 %90, !dbg !4261

originalBBalteredBB:                              ; preds = %originalBB, %1
  %99 = alloca i32, align 4
  %100 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %100, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %100, metadata !4262, metadata !DIExpression()), !dbg !4246
  %101 = load %struct._IO_FILE*, %struct._IO_FILE** %100, align 8, !dbg !4247
  %102 = icmp eq %struct._IO_FILE* %101, null, !dbg !4249
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %22
  %103 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4251
  %104 = call i32 @__freading(%struct._IO_FILE* %103) #10, !dbg !4251
  %105 = icmp ne i32 %104, 0, !dbg !4251
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %42
  %106 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4253
  %107 = call i32 @fflush(%struct._IO_FILE* %106), !dbg !4254
  store i32 %107, i32* %10, align 4, !dbg !4255
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %61
  %108 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4256
  call void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE* %108), !dbg !4257
  %109 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4258
  %110 = call i32 @fflush(%struct._IO_FILE* %109), !dbg !4259
  store i32 %110, i32* %10, align 4, !dbg !4260
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %81
  %111 = load i32, i32* %10, align 4, !dbg !4261
  br label %originalBB14
}

declare dso_local i32 @fflush(%struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE*) #4 !dbg !4301 {
  %2 = load i32, i32* @x.93
  %3 = load i32, i32* @y.94
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %10, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %10, metadata !4304, metadata !DIExpression()), !dbg !4305
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %10, align 8, !dbg !4306
  %12 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %11, i32 0, i32 0, !dbg !4308
  %13 = load i32, i32* %12, align 8, !dbg !4308
  %14 = and i32 %13, 256, !dbg !4309
  %15 = icmp ne i32 %14, 0, !dbg !4309
  %16 = load i32, i32* @x.93
  %17 = load i32, i32* @y.94
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %24, label %43, !dbg !4310

24:                                               ; preds = %originalBBpart2
  %25 = load i32, i32* @x.93
  %26 = load i32, i32* @y.94
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %24, %originalBB1alteredBB
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** %10, align 8, !dbg !4311
  %34 = call i32 @rpl_fseeko(%struct._IO_FILE* %33, i64 0, i32 1), !dbg !4312
  %35 = load i32, i32* @x.93
  %36 = load i32, i32* @y.94
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %43, !dbg !4312

43:                                               ; preds = %originalBBpart24, %originalBBpart2
  %44 = load i32, i32* @x.93
  %45 = load i32, i32* @y.94
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %43, %originalBB6alteredBB
  %52 = load i32, i32* @x.93
  %53 = load i32, i32* @y.94
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  ret void, !dbg !4313

originalBBalteredBB:                              ; preds = %originalBB, %1
  %60 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %60, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %60, metadata !4314, metadata !DIExpression()), !dbg !4305
  %61 = load %struct._IO_FILE*, %struct._IO_FILE** %60, align 8, !dbg !4306
  %62 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %61, i32 0, i32 0, !dbg !4308
  %63 = load i32, i32* %62, align 8, !dbg !4308
  %_ = shl i32 %63, 256
  %64 = and i32 %63, 256, !dbg !4309
  %65 = icmp ne i32 %64, 0, !dbg !4309
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %24
  %66 = load %struct._IO_FILE*, %struct._IO_FILE** %10, align 8, !dbg !4311
  %67 = call i32 @rpl_fseeko(%struct._IO_FILE* %66, i64 0, i32 1), !dbg !4312
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %43
  br label %originalBB6
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fseeko(%struct._IO_FILE* nonnull, i64, i32) #4 !dbg !4353 {
  %4 = load i32, i32* @x.95
  %5 = load i32, i32* @y.96
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca %struct._IO_FILE*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i32, align 4
  %16 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %13, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %13, metadata !4392, metadata !DIExpression()), !dbg !4393
  store i64 %1, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !4394, metadata !DIExpression()), !dbg !4395
  store i32 %2, i32* %15, align 4
  call void @llvm.dbg.declare(metadata i32* %15, metadata !4396, metadata !DIExpression()), !dbg !4397
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4398
  %18 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %17, i32 0, i32 2, !dbg !4400
  %19 = load i8*, i8** %18, align 8, !dbg !4400
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4401
  %21 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %20, i32 0, i32 1, !dbg !4402
  %22 = load i8*, i8** %21, align 8, !dbg !4402
  %23 = icmp eq i8* %19, %22, !dbg !4403
  %24 = load i32, i32* @x.95
  %25 = load i32, i32* @y.96
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %23, label %32, label %190, !dbg !4404

32:                                               ; preds = %originalBBpart2
  %33 = load i32, i32* @x.95
  %34 = load i32, i32* @y.96
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %32, %originalBB1alteredBB
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4405
  %42 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %41, i32 0, i32 5, !dbg !4406
  %43 = load i8*, i8** %42, align 8, !dbg !4406
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4407
  %45 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %44, i32 0, i32 4, !dbg !4408
  %46 = load i8*, i8** %45, align 8, !dbg !4408
  %47 = icmp eq i8* %43, %46, !dbg !4409
  %48 = load i32, i32* @x.95
  %49 = load i32, i32* @y.96
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %47, label %56, label %190, !dbg !4410

56:                                               ; preds = %originalBBpart24
  %57 = load i32, i32* @x.95
  %58 = load i32, i32* @y.96
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %56, %originalBB6alteredBB
  %65 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4411
  %66 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %65, i32 0, i32 9, !dbg !4412
  %67 = load i8*, i8** %66, align 8, !dbg !4412
  %68 = icmp eq i8* %67, null, !dbg !4413
  %69 = load i32, i32* @x.95
  %70 = load i32, i32* @y.96
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %68, label %77, label %190, !dbg !4414

77:                                               ; preds = %originalBBpart28
  call void @llvm.dbg.declare(metadata i64* %16, metadata !4415, metadata !DIExpression()), !dbg !4417
  %78 = load i32, i32* @x.95
  %79 = load i32, i32* @y.96
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %77, %originalBB10alteredBB
  %86 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4418
  %87 = call i32 @fileno(%struct._IO_FILE* %86) #10, !dbg !4419
  %88 = load i64, i64* %14, align 8, !dbg !4420
  %89 = load i32, i32* %15, align 4, !dbg !4421
  %90 = call i64 @lseek(i32 %87, i64 %88, i32 %89) #10, !dbg !4422
  store i64 %90, i64* %16, align 8, !dbg !4417
  %91 = load i64, i64* %16, align 8, !dbg !4423
  %92 = trunc i64 %91 to i32
  %93 = mul i32 %92, -3
  %94 = add i32 %93, -4
  %95 = trunc i64 %88 to i32
  %96 = mul i32 %95, 2
  %97 = add i32 %96, -5
  %98 = mul i32 %94, %94
  %99 = mul i32 %98, 7
  %100 = sub i32 %99, 1
  %101 = mul i32 %97, %97
  %102 = sub i32 %100, %101
  %103 = mul i32 %102, -2
  %104 = add i32 %103, -1
  %105 = icmp ne i32 %104, -1
  %106 = load i32, i32* @x.95
  %107 = load i32, i32* @y.96
  %108 = sub i32 %106, 1
  %109 = mul i32 %106, %108
  %110 = urem i32 %109, 2
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %111, %112
  br i1 %113, label %originalBBpart274, label %originalBB10alteredBB

originalBBpart274:                                ; preds = %originalBB10
  br i1 %105, label %131, label %114

114:                                              ; preds = %originalBBpart274
  %115 = load i32, i32* @x.95
  %116 = load i32, i32* @y.96
  %117 = sub i32 %115, 1
  %118 = mul i32 %115, %117
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %120, %121
  br i1 %122, label %originalBB76, label %originalBB76alteredBB

originalBB76:                                     ; preds = %114, %originalBB76alteredBB
  %123 = load i32, i32* @x.95
  %124 = load i32, i32* @y.96
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %originalBBpart278, label %originalBB76alteredBB

originalBBpart278:                                ; preds = %originalBB76
  ret i32 0

131:                                              ; preds = %originalBBpart274
  %132 = load i32, i32* @x.95
  %133 = load i32, i32* @y.96
  %134 = sub i32 %132, 1
  %135 = mul i32 %132, %134
  %136 = urem i32 %135, 2
  %137 = icmp eq i32 %136, 0
  %138 = icmp slt i32 %133, 10
  %139 = or i1 %137, %138
  br i1 %139, label %originalBB80, label %originalBB80alteredBB

originalBB80:                                     ; preds = %131, %originalBB80alteredBB
  %140 = icmp eq i64 %91, -1, !dbg !4425
  %141 = load i32, i32* @x.95
  %142 = load i32, i32* @y.96
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBBpart282, label %originalBB80alteredBB

originalBBpart282:                                ; preds = %originalBB80
  br i1 %140, label %149, label %166, !dbg !4426

149:                                              ; preds = %originalBBpart282
  %150 = load i32, i32* @x.95
  %151 = load i32, i32* @y.96
  %152 = sub i32 %150, 1
  %153 = mul i32 %150, %152
  %154 = urem i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %155, %156
  br i1 %157, label %originalBB84, label %originalBB84alteredBB

originalBB84:                                     ; preds = %149, %originalBB84alteredBB
  store i32 -1, i32* %12, align 4, !dbg !4427
  %158 = load i32, i32* @x.95
  %159 = load i32, i32* @y.96
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBBpart286, label %originalBB84alteredBB

originalBBpart286:                                ; preds = %originalBB84
  br label %195, !dbg !4427

166:                                              ; preds = %originalBBpart282
  %167 = load i32, i32* @x.95
  %168 = load i32, i32* @y.96
  %169 = sub i32 %167, 1
  %170 = mul i32 %167, %169
  %171 = urem i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %172, %173
  br i1 %174, label %originalBB88, label %originalBB88alteredBB

originalBB88:                                     ; preds = %166, %originalBB88alteredBB
  %175 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4429
  %176 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %175, i32 0, i32 0, !dbg !4430
  %177 = load i32, i32* %176, align 8, !dbg !4431
  %178 = and i32 %177, -17, !dbg !4431
  store i32 %178, i32* %176, align 8, !dbg !4431
  %179 = load i64, i64* %16, align 8, !dbg !4432
  %180 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4433
  %181 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %180, i32 0, i32 21, !dbg !4434
  store i64 %179, i64* %181, align 8, !dbg !4435
  store i32 0, i32* %12, align 4, !dbg !4436
  %182 = load i32, i32* @x.95
  %183 = load i32, i32* @y.96
  %184 = sub i32 %182, 1
  %185 = mul i32 %182, %184
  %186 = urem i32 %185, 2
  %187 = icmp eq i32 %186, 0
  %188 = icmp slt i32 %183, 10
  %189 = or i1 %187, %188
  br i1 %189, label %originalBBpart292, label %originalBB88alteredBB

originalBBpart292:                                ; preds = %originalBB88
  br label %195, !dbg !4436

190:                                              ; preds = %originalBBpart28, %originalBBpart24, %originalBBpart2
  %191 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4437
  %192 = load i64, i64* %14, align 8, !dbg !4438
  %193 = load i32, i32* %15, align 4, !dbg !4439
  %194 = call i32 @fseeko(%struct._IO_FILE* %191, i64 %192, i32 %193), !dbg !4440
  store i32 %194, i32* %12, align 4, !dbg !4441
  br label %195, !dbg !4441

195:                                              ; preds = %190, %originalBBpart292, %originalBBpart286
  %196 = load i32, i32* @x.95
  %197 = load i32, i32* @y.96
  %198 = sub i32 %196, 1
  %199 = mul i32 %196, %198
  %200 = urem i32 %199, 2
  %201 = icmp eq i32 %200, 0
  %202 = icmp slt i32 %197, 10
  %203 = or i1 %201, %202
  br i1 %203, label %originalBB94, label %originalBB94alteredBB

originalBB94:                                     ; preds = %195, %originalBB94alteredBB
  %204 = load i32, i32* %12, align 4, !dbg !4442
  %205 = load i32, i32* @x.95
  %206 = load i32, i32* @y.96
  %207 = sub i32 %205, 1
  %208 = mul i32 %205, %207
  %209 = urem i32 %208, 2
  %210 = icmp eq i32 %209, 0
  %211 = icmp slt i32 %206, 10
  %212 = or i1 %210, %211
  br i1 %212, label %originalBBpart296, label %originalBB94alteredBB

originalBBpart296:                                ; preds = %originalBB94
  ret i32 %204, !dbg !4442

originalBBalteredBB:                              ; preds = %originalBB, %3
  %213 = alloca i32, align 4
  %214 = alloca %struct._IO_FILE*, align 8
  %215 = alloca i64, align 8
  %216 = alloca i32, align 4
  %217 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %214, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %214, metadata !4443, metadata !DIExpression()), !dbg !4393
  store i64 %1, i64* %215, align 8
  call void @llvm.dbg.declare(metadata i64* %215, metadata !4482, metadata !DIExpression()), !dbg !4395
  store i32 %2, i32* %216, align 4
  call void @llvm.dbg.declare(metadata i32* %216, metadata !4483, metadata !DIExpression()), !dbg !4397
  %218 = load %struct._IO_FILE*, %struct._IO_FILE** %214, align 8, !dbg !4398
  %219 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %218, i32 0, i32 2, !dbg !4400
  %220 = load i8*, i8** %219, align 8, !dbg !4400
  %221 = load %struct._IO_FILE*, %struct._IO_FILE** %214, align 8, !dbg !4401
  %222 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %221, i32 0, i32 1, !dbg !4402
  %223 = load i8*, i8** %222, align 8, !dbg !4402
  %224 = icmp eq i8* %220, %223, !dbg !4403
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %32
  %225 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4405
  %226 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %225, i32 0, i32 5, !dbg !4406
  %227 = load i8*, i8** %226, align 8, !dbg !4406
  %228 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4407
  %229 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %228, i32 0, i32 4, !dbg !4408
  %230 = load i8*, i8** %229, align 8, !dbg !4408
  %231 = icmp eq i8* %227, %230, !dbg !4409
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %56
  %232 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4411
  %233 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %232, i32 0, i32 9, !dbg !4412
  %234 = load i8*, i8** %233, align 8, !dbg !4412
  %235 = icmp eq i8* %234, null, !dbg !4413
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %77
  %236 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4418
  %237 = call i32 @fileno(%struct._IO_FILE* %236) #10, !dbg !4419
  %238 = load i64, i64* %14, align 8, !dbg !4420
  %239 = load i32, i32* %15, align 4, !dbg !4421
  %240 = call i64 @lseek(i32 %237, i64 %238, i32 %239) #10, !dbg !4422
  store i64 %240, i64* %16, align 8, !dbg !4417
  %241 = load i64, i64* %16, align 8, !dbg !4423
  %242 = trunc i64 %241 to i32
  %_ = sub i32 0, %242
  %gen = add i32 %_, -3
  %_11 = sub i32 0, %242
  %gen12 = add i32 %_11, -3
  %_13 = shl i32 %242, -3
  %243 = mul i32 %242, -3
  %_14 = shl i32 %243, -4
  %_15 = sub i32 0, %243
  %gen16 = add i32 %_15, -4
  %_17 = sub i32 %243, -4
  %gen18 = mul i32 %_17, -4
  %_19 = sub i32 %243, -4
  %gen20 = mul i32 %_19, -4
  %_21 = shl i32 %243, -4
  %_22 = sub i32 0, %243
  %gen23 = add i32 %_22, -4
  %_24 = shl i32 %243, -4
  %_25 = shl i32 %243, -4
  %244 = add i32 %243, -4
  %245 = trunc i64 %238 to i32
  %_26 = sub i32 0, %245
  %gen27 = add i32 %_26, 2
  %_28 = shl i32 %245, 2
  %_29 = sub i32 0, %245
  %gen30 = add i32 %_29, 2
  %_31 = sub i32 %245, 2
  %gen32 = mul i32 %_31, 2
  %_33 = sub i32 %245, 2
  %gen34 = mul i32 %_33, 2
  %246 = mul i32 %245, 2
  %_35 = sub i32 0, %246
  %gen36 = add i32 %_35, -5
  %247 = add i32 %246, -5
  %_37 = sub i32 0, %244
  %gen38 = add i32 %_37, %244
  %_39 = shl i32 %244, %244
  %_40 = sub i32 0, %244
  %gen41 = add i32 %_40, %244
  %_42 = sub i32 0, %244
  %gen43 = add i32 %_42, %244
  %_44 = shl i32 %244, %244
  %248 = mul i32 %244, %244
  %_45 = shl i32 %248, 7
  %249 = mul i32 %248, 7
  %_46 = sub i32 %249, 1
  %gen47 = mul i32 %_46, 1
  %_48 = sub i32 0, %249
  %gen49 = add i32 %_48, 1
  %_50 = shl i32 %249, 1
  %_51 = sub i32 %249, 1
  %gen52 = mul i32 %_51, 1
  %_53 = shl i32 %249, 1
  %_54 = shl i32 %249, 1
  %_55 = shl i32 %249, 1
  %_56 = shl i32 %249, 1
  %_57 = sub i32 0, %249
  %gen58 = add i32 %_57, 1
  %250 = sub i32 %249, 1
  %_59 = sub i32 %247, %247
  %gen60 = mul i32 %_59, %247
  %_61 = sub i32 0, %247
  %gen62 = add i32 %_61, %247
  %251 = mul i32 %247, %247
  %_63 = sub i32 0, %250
  %gen64 = add i32 %_63, %251
  %252 = sub i32 %250, %251
  %_65 = sub i32 0, %252
  %gen66 = add i32 %_65, -2
  %_67 = sub i32 0, %252
  %gen68 = add i32 %_67, -2
  %253 = mul i32 %252, -2
  %_69 = shl i32 %253, -1
  %_70 = shl i32 %253, -1
  %_71 = sub i32 0, %253
  %gen72 = add i32 %_71, -1
  %254 = add i32 %253, -1
  %255 = icmp ne i32 %254, -1
  br label %originalBB10

originalBB76alteredBB:                            ; preds = %originalBB76, %114
  br label %originalBB76

originalBB80alteredBB:                            ; preds = %originalBB80, %131
  %256 = icmp eq i64 %91, -1, !dbg !4425
  br label %originalBB80

originalBB84alteredBB:                            ; preds = %originalBB84, %149
  store i32 -1, i32* %12, align 4, !dbg !4427
  br label %originalBB84

originalBB88alteredBB:                            ; preds = %originalBB88, %166
  %257 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4429
  %258 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %257, i32 0, i32 0, !dbg !4430
  %259 = load i32, i32* %258, align 8, !dbg !4431
  %_89 = sub i32 %259, -17
  %gen90 = mul i32 %_89, -17
  %260 = and i32 %259, -17, !dbg !4431
  store i32 %260, i32* %258, align 8, !dbg !4431
  %261 = load i64, i64* %16, align 8, !dbg !4432
  %262 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4433
  %263 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %262, i32 0, i32 21, !dbg !4434
  store i64 %261, i64* %263, align 8, !dbg !4435
  store i32 0, i32* %12, align 4, !dbg !4436
  br label %originalBB88

originalBB94alteredBB:                            ; preds = %originalBB94, %195
  %264 = load i32, i32* %12, align 4, !dbg !4442
  br label %originalBB94
}

declare dso_local i32 @fseeko(%struct._IO_FILE*, i64, i32) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @c_tolower(i32) #4 !dbg !4484 {
  %2 = load i32, i32* @x.97
  %3 = load i32, i32* @y.98
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !4488, metadata !DIExpression()), !dbg !4489
  %12 = load i32, i32* %11, align 4, !dbg !4490
  %13 = load i32, i32* @x.97
  %14 = load i32, i32* @y.98
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  switch i32 %12, label %41 [
    i32 65, label %21
    i32 66, label %21
    i32 67, label %21
    i32 68, label %21
    i32 69, label %21
    i32 70, label %21
    i32 71, label %21
    i32 72, label %21
    i32 73, label %21
    i32 74, label %21
    i32 75, label %21
    i32 76, label %21
    i32 77, label %21
    i32 78, label %21
    i32 79, label %21
    i32 80, label %21
    i32 81, label %21
    i32 82, label %21
    i32 83, label %21
    i32 84, label %21
    i32 85, label %21
    i32 86, label %21
    i32 87, label %21
    i32 88, label %21
    i32 89, label %21
    i32 90, label %21
  ], !dbg !4491

21:                                               ; preds = %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2
  %22 = load i32, i32* @x.97
  %23 = load i32, i32* @y.98
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  %30 = load i32, i32* %11, align 4, !dbg !4492
  %31 = sub nsw i32 %30, 65, !dbg !4494
  %32 = add nsw i32 %31, 97, !dbg !4495
  store i32 %32, i32* %10, align 4, !dbg !4496
  %33 = load i32, i32* @x.97
  %34 = load i32, i32* @y.98
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBBpart217, label %originalBB1alteredBB

originalBBpart217:                                ; preds = %originalBB1
  br label %59, !dbg !4496

41:                                               ; preds = %originalBBpart2
  %42 = load i32, i32* @x.97
  %43 = load i32, i32* @y.98
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBB19, label %originalBB19alteredBB

originalBB19:                                     ; preds = %41, %originalBB19alteredBB
  %50 = load i32, i32* %11, align 4, !dbg !4497
  store i32 %50, i32* %10, align 4, !dbg !4498
  %51 = load i32, i32* @x.97
  %52 = load i32, i32* @y.98
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart221, label %originalBB19alteredBB

originalBBpart221:                                ; preds = %originalBB19
  br label %59, !dbg !4498

59:                                               ; preds = %originalBBpart221, %originalBBpart217
  %60 = load i32, i32* @x.97
  %61 = load i32, i32* @y.98
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBB23, label %originalBB23alteredBB

originalBB23:                                     ; preds = %59, %originalBB23alteredBB
  %68 = load i32, i32* %10, align 4, !dbg !4499
  %69 = load i32, i32* @x.97
  %70 = load i32, i32* @y.98
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBBpart225, label %originalBB23alteredBB

originalBBpart225:                                ; preds = %originalBB23
  ret i32 %68, !dbg !4499

originalBBalteredBB:                              ; preds = %originalBB, %1
  %77 = alloca i32, align 4
  %78 = alloca i32, align 4
  store i32 %0, i32* %78, align 4
  call void @llvm.dbg.declare(metadata i32* %78, metadata !4500, metadata !DIExpression()), !dbg !4489
  %79 = load i32, i32* %78, align 4, !dbg !4490
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  %80 = load i32, i32* %11, align 4, !dbg !4492
  %_ = shl i32 %80, 65
  %_2 = shl i32 %80, 65
  %_3 = shl i32 %80, 65
  %_4 = sub i32 %80, 65
  %gen = mul i32 %_4, 65
  %_5 = shl i32 %80, 65
  %_6 = shl i32 %80, 65
  %_7 = sub i32 %80, 65
  %gen8 = mul i32 %_7, 65
  %_9 = shl i32 %80, 65
  %_10 = shl i32 %80, 65
  %81 = sub nsw i32 %80, 65, !dbg !4494
  %_11 = shl i32 %81, 97
  %_12 = sub i32 0, %81
  %gen13 = add i32 %_12, 97
  %_14 = shl i32 %81, 97
  %_15 = shl i32 %81, 97
  %82 = add nsw i32 %81, 97, !dbg !4495
  store i32 %82, i32* %10, align 4, !dbg !4496
  br label %originalBB1

originalBB19alteredBB:                            ; preds = %originalBB19, %41
  %83 = load i32, i32* %11, align 4, !dbg !4497
  store i32 %83, i32* %10, align 4, !dbg !4498
  br label %originalBB19

originalBB23alteredBB:                            ; preds = %originalBB23, %59
  %84 = load i32, i32* %10, align 4, !dbg !4499
  br label %originalBB23
}

define private i32 @controle(i8*, i32) {
  %3 = load i32, i32* @x.99
  %4 = load i32, i32* @y.100
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = load i32, i32* @inVal0
  %12 = icmp sgt i32 %11, 0
  %13 = load i32, i32* @x.99
  %14 = load i32, i32* @y.100
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %41, label %21

21:                                               ; preds = %originalBBpart2
  %22 = load i32, i32* @x.99
  %23 = load i32, i32* @y.100
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  call void @srand(i32 %1)
  %30 = call i32 @rand()
  %31 = srem i32 %30, 50000
  %32 = add i32 %31, 2
  %33 = load i32, i32* @x.99
  %34 = load i32, i32* @y.100
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBBpart222, label %originalBB1alteredBB

originalBBpart222:                                ; preds = %originalBB1
  ret i32 %32

41:                                               ; preds = %originalBBpart2
  %42 = load i32, i32* @x.99
  %43 = load i32, i32* @y.100
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBB24, label %originalBB24alteredBB

originalBB24:                                     ; preds = %41, %originalBB24alteredBB
  %50 = getelementptr inbounds [3 x i8], [3 x i8]* @.compVal2, i32 0, i32 0
  %51 = call i32 @strcmp(i8* %50, i8* %0)
  %52 = icmp eq i32 %51, 0
  %53 = load i32, i32* @x.99
  %54 = load i32, i32* @y.100
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart226, label %originalBB24alteredBB

originalBBpart226:                                ; preds = %originalBB24
  br i1 %52, label %61, label %96

61:                                               ; preds = %originalBBpart226
  %62 = load i32, i32* @x.99
  %63 = load i32, i32* @y.100
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBB28, label %originalBB28alteredBB

originalBB28:                                     ; preds = %61, %originalBB28alteredBB
  %70 = icmp eq i32 %1, 0
  %71 = load i32, i32* @x.99
  %72 = load i32, i32* @y.100
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBBpart230, label %originalBB28alteredBB

originalBBpart230:                                ; preds = %originalBB28
  br i1 %70, label %79, label %96

79:                                               ; preds = %originalBBpart230
  %80 = load i32, i32* @x.99
  %81 = load i32, i32* @y.100
  %82 = sub i32 %80, 1
  %83 = mul i32 %80, %82
  %84 = urem i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = icmp slt i32 %81, 10
  %87 = or i1 %85, %86
  br i1 %87, label %originalBB32, label %originalBB32alteredBB

originalBB32:                                     ; preds = %79, %originalBB32alteredBB
  %88 = load i32, i32* @x.99
  %89 = load i32, i32* @y.100
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBBpart234, label %originalBB32alteredBB

originalBBpart234:                                ; preds = %originalBB32
  ret i32 5

96:                                               ; preds = %originalBBpart230, %originalBBpart226
  %97 = load i32, i32* @x.99
  %98 = load i32, i32* @y.100
  %99 = sub i32 %97, 1
  %100 = mul i32 %97, %99
  %101 = urem i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %102, %103
  br i1 %104, label %originalBB36, label %originalBB36alteredBB

originalBB36:                                     ; preds = %96, %originalBB36alteredBB
  %105 = getelementptr inbounds [1 x i8], [1 x i8]* @.compVal1, i32 0, i32 0
  %106 = call i32 @strcmp(i8* %105, i8* %0)
  %107 = icmp eq i32 %106, 0
  %108 = load i32, i32* @x.99
  %109 = load i32, i32* @y.100
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBBpart238, label %originalBB36alteredBB

originalBBpart238:                                ; preds = %originalBB36
  br i1 %107, label %116, label %151

116:                                              ; preds = %originalBBpart238
  %117 = load i32, i32* @x.99
  %118 = load i32, i32* @y.100
  %119 = sub i32 %117, 1
  %120 = mul i32 %117, %119
  %121 = urem i32 %120, 2
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %122, %123
  br i1 %124, label %originalBB40, label %originalBB40alteredBB

originalBB40:                                     ; preds = %116, %originalBB40alteredBB
  %125 = icmp eq i32 %1, -1
  %126 = load i32, i32* @x.99
  %127 = load i32, i32* @y.100
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBBpart242, label %originalBB40alteredBB

originalBBpart242:                                ; preds = %originalBB40
  br i1 %125, label %134, label %151

134:                                              ; preds = %originalBBpart242
  %135 = load i32, i32* @x.99
  %136 = load i32, i32* @y.100
  %137 = sub i32 %135, 1
  %138 = mul i32 %135, %137
  %139 = urem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %140, %141
  br i1 %142, label %originalBB44, label %originalBB44alteredBB

originalBB44:                                     ; preds = %134, %originalBB44alteredBB
  %143 = load i32, i32* @x.99
  %144 = load i32, i32* @y.100
  %145 = sub i32 %143, 1
  %146 = mul i32 %143, %145
  %147 = urem i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %148, %149
  br i1 %150, label %originalBBpart246, label %originalBB44alteredBB

originalBBpart246:                                ; preds = %originalBB44
  ret i32 3

151:                                              ; preds = %originalBBpart242, %originalBBpart238
  %152 = load i32, i32* @x.99
  %153 = load i32, i32* @y.100
  %154 = sub i32 %152, 1
  %155 = mul i32 %152, %154
  %156 = urem i32 %155, 2
  %157 = icmp eq i32 %156, 0
  %158 = icmp slt i32 %153, 10
  %159 = or i1 %157, %158
  br i1 %159, label %originalBB48, label %originalBB48alteredBB

originalBB48:                                     ; preds = %151, %originalBB48alteredBB
  %160 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal0, i32 0, i32 0
  %161 = call i32 @strcmp(i8* %160, i8* %0)
  %162 = icmp eq i32 %161, 0
  %163 = load i32, i32* @x.99
  %164 = load i32, i32* @y.100
  %165 = sub i32 %163, 1
  %166 = mul i32 %163, %165
  %167 = urem i32 %166, 2
  %168 = icmp eq i32 %167, 0
  %169 = icmp slt i32 %164, 10
  %170 = or i1 %168, %169
  br i1 %170, label %originalBBpart250, label %originalBB48alteredBB

originalBBpart250:                                ; preds = %originalBB48
  br i1 %162, label %171, label %206

171:                                              ; preds = %originalBBpart250
  %172 = load i32, i32* @x.99
  %173 = load i32, i32* @y.100
  %174 = sub i32 %172, 1
  %175 = mul i32 %172, %174
  %176 = urem i32 %175, 2
  %177 = icmp eq i32 %176, 0
  %178 = icmp slt i32 %173, 10
  %179 = or i1 %177, %178
  br i1 %179, label %originalBB52, label %originalBB52alteredBB

originalBB52:                                     ; preds = %171, %originalBB52alteredBB
  %180 = icmp eq i32 %1, 0
  %181 = load i32, i32* @x.99
  %182 = load i32, i32* @y.100
  %183 = sub i32 %181, 1
  %184 = mul i32 %181, %183
  %185 = urem i32 %184, 2
  %186 = icmp eq i32 %185, 0
  %187 = icmp slt i32 %182, 10
  %188 = or i1 %186, %187
  br i1 %188, label %originalBBpart254, label %originalBB52alteredBB

originalBBpart254:                                ; preds = %originalBB52
  br i1 %180, label %189, label %206

189:                                              ; preds = %originalBBpart254
  %190 = load i32, i32* @x.99
  %191 = load i32, i32* @y.100
  %192 = sub i32 %190, 1
  %193 = mul i32 %190, %192
  %194 = urem i32 %193, 2
  %195 = icmp eq i32 %194, 0
  %196 = icmp slt i32 %191, 10
  %197 = or i1 %195, %196
  br i1 %197, label %originalBB56, label %originalBB56alteredBB

originalBB56:                                     ; preds = %189, %originalBB56alteredBB
  %198 = load i32, i32* @x.99
  %199 = load i32, i32* @y.100
  %200 = sub i32 %198, 1
  %201 = mul i32 %198, %200
  %202 = urem i32 %201, 2
  %203 = icmp eq i32 %202, 0
  %204 = icmp slt i32 %199, 10
  %205 = or i1 %203, %204
  br i1 %205, label %originalBBpart258, label %originalBB56alteredBB

originalBBpart258:                                ; preds = %originalBB56
  ret i32 3

206:                                              ; preds = %originalBBpart254, %originalBBpart250
  %207 = load i32, i32* @x.99
  %208 = load i32, i32* @y.100
  %209 = sub i32 %207, 1
  %210 = mul i32 %207, %209
  %211 = urem i32 %210, 2
  %212 = icmp eq i32 %211, 0
  %213 = icmp slt i32 %208, 10
  %214 = or i1 %212, %213
  br i1 %214, label %originalBB60, label %originalBB60alteredBB

originalBB60:                                     ; preds = %206, %originalBB60alteredBB
  %215 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal0, i32 0, i32 0
  %216 = call i32 @strcmp(i8* %215, i8* %0)
  %217 = icmp eq i32 %216, 0
  %218 = load i32, i32* @x.99
  %219 = load i32, i32* @y.100
  %220 = sub i32 %218, 1
  %221 = mul i32 %218, %220
  %222 = urem i32 %221, 2
  %223 = icmp eq i32 %222, 0
  %224 = icmp slt i32 %219, 10
  %225 = or i1 %223, %224
  br i1 %225, label %originalBBpart262, label %originalBB60alteredBB

originalBBpart262:                                ; preds = %originalBB60
  br i1 %217, label %226, label %245

226:                                              ; preds = %originalBBpart262
  %227 = icmp eq i32 %1, -1
  br i1 %227, label %228, label %245

228:                                              ; preds = %226
  %229 = load i32, i32* @x.99
  %230 = load i32, i32* @y.100
  %231 = sub i32 %229, 1
  %232 = mul i32 %229, %231
  %233 = urem i32 %232, 2
  %234 = icmp eq i32 %233, 0
  %235 = icmp slt i32 %230, 10
  %236 = or i1 %234, %235
  br i1 %236, label %originalBB64, label %originalBB64alteredBB

originalBB64:                                     ; preds = %228, %originalBB64alteredBB
  %237 = load i32, i32* @x.99
  %238 = load i32, i32* @y.100
  %239 = sub i32 %237, 1
  %240 = mul i32 %237, %239
  %241 = urem i32 %240, 2
  %242 = icmp eq i32 %241, 0
  %243 = icmp slt i32 %238, 10
  %244 = or i1 %242, %243
  br i1 %244, label %originalBBpart266, label %originalBB64alteredBB

originalBBpart266:                                ; preds = %originalBB64
  ret i32 5

245:                                              ; preds = %226, %originalBBpart262
  %246 = load i32, i32* @x.99
  %247 = load i32, i32* @y.100
  %248 = sub i32 %246, 1
  %249 = mul i32 %246, %248
  %250 = urem i32 %249, 2
  %251 = icmp eq i32 %250, 0
  %252 = icmp slt i32 %247, 10
  %253 = or i1 %251, %252
  br i1 %253, label %originalBB68, label %originalBB68alteredBB

originalBB68:                                     ; preds = %245, %originalBB68alteredBB
  call void @srand(i32 %1)
  %254 = call i32 @rand()
  %255 = srem i32 %254, 50000
  %256 = add i32 %255, 2
  %257 = load i32, i32* @x.99
  %258 = load i32, i32* @y.100
  %259 = sub i32 %257, 1
  %260 = mul i32 %257, %259
  %261 = urem i32 %260, 2
  %262 = icmp eq i32 %261, 0
  %263 = icmp slt i32 %258, 10
  %264 = or i1 %262, %263
  br i1 %264, label %originalBBpart291, label %originalBB68alteredBB

originalBBpart291:                                ; preds = %originalBB68
  ret i32 %256

originalBBalteredBB:                              ; preds = %originalBB, %2
  %265 = load i32, i32* @inVal0
  %266 = icmp sgt i32 %265, 0
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  call void @srand(i32 %1)
  %267 = call i32 @rand()
  %_ = shl i32 %267, 50000
  %_2 = sub i32 %267, 50000
  %gen = mul i32 %_2, 50000
  %_3 = shl i32 %267, 50000
  %_4 = sub i32 %267, 50000
  %gen5 = mul i32 %_4, 50000
  %_6 = sub i32 0, %267
  %gen7 = add i32 %_6, 50000
  %_8 = shl i32 %267, 50000
  %_9 = sub i32 %267, 50000
  %gen10 = mul i32 %_9, 50000
  %268 = srem i32 %267, 50000
  %_11 = sub i32 0, %268
  %gen12 = add i32 %_11, 2
  %_13 = sub i32 %268, 2
  %gen14 = mul i32 %_13, 2
  %_15 = shl i32 %268, 2
  %_16 = shl i32 %268, 2
  %_17 = sub i32 0, %268
  %gen18 = add i32 %_17, 2
  %_19 = sub i32 0, %268
  %gen20 = add i32 %_19, 2
  %269 = add i32 %268, 2
  br label %originalBB1

originalBB24alteredBB:                            ; preds = %originalBB24, %41
  %270 = getelementptr inbounds [3 x i8], [3 x i8]* @.compVal2, i32 0, i32 0
  %271 = call i32 @strcmp(i8* %270, i8* %0)
  %272 = icmp eq i32 %271, 0
  br label %originalBB24

originalBB28alteredBB:                            ; preds = %originalBB28, %61
  %273 = icmp eq i32 %1, 0
  br label %originalBB28

originalBB32alteredBB:                            ; preds = %originalBB32, %79
  br label %originalBB32

originalBB36alteredBB:                            ; preds = %originalBB36, %96
  %274 = getelementptr inbounds [1 x i8], [1 x i8]* @.compVal1, i32 0, i32 0
  %275 = call i32 @strcmp(i8* %274, i8* %0)
  %276 = icmp eq i32 %275, 0
  br label %originalBB36

originalBB40alteredBB:                            ; preds = %originalBB40, %116
  %277 = icmp eq i32 %1, -1
  br label %originalBB40

originalBB44alteredBB:                            ; preds = %originalBB44, %134
  br label %originalBB44

originalBB48alteredBB:                            ; preds = %originalBB48, %151
  %278 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal0, i32 0, i32 0
  %279 = call i32 @strcmp(i8* %278, i8* %0)
  %280 = icmp eq i32 %279, 0
  br label %originalBB48

originalBB52alteredBB:                            ; preds = %originalBB52, %171
  %281 = icmp eq i32 %1, 0
  br label %originalBB52

originalBB56alteredBB:                            ; preds = %originalBB56, %189
  br label %originalBB56

originalBB60alteredBB:                            ; preds = %originalBB60, %206
  %282 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal0, i32 0, i32 0
  %283 = call i32 @strcmp(i8* %282, i8* %0)
  %284 = icmp eq i32 %283, 0
  br label %originalBB60

originalBB64alteredBB:                            ; preds = %originalBB64, %228
  br label %originalBB64

originalBB68alteredBB:                            ; preds = %originalBB68, %245
  call void @srand(i32 %1)
  %285 = call i32 @rand()
  %_69 = sub i32 %285, 50000
  %gen70 = mul i32 %_69, 50000
  %_71 = sub i32 %285, 50000
  %gen72 = mul i32 %_71, 50000
  %_73 = sub i32 0, %285
  %gen74 = add i32 %_73, 50000
  %_75 = shl i32 %285, 50000
  %_76 = sub i32 %285, 50000
  %gen77 = mul i32 %_76, 50000
  %_78 = sub i32 %285, 50000
  %gen79 = mul i32 %_78, 50000
  %_80 = shl i32 %285, 50000
  %_81 = sub i32 %285, 50000
  %gen82 = mul i32 %_81, 50000
  %286 = srem i32 %285, 50000
  %_83 = shl i32 %286, 2
  %_84 = sub i32 0, %286
  %gen85 = add i32 %_84, 2
  %_86 = sub i32 0, %286
  %gen87 = add i32 %_86, 2
  %_88 = shl i32 %286, 2
  %_89 = shl i32 %286, 2
  %287 = add i32 %286, 2
  br label %originalBB68
}

declare void @srand(i32)

declare i32 @rand()

attributes #0 = { noinline noreturn nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { noinline nounwind optnone readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noreturn nounwind }
attributes #13 = { nounwind readonly }
attributes #14 = { noreturn }
attributes #15 = { nounwind readnone }

!llvm.dbg.cu = !{!2, !27, !32, !41, !48, !54, !128, !130, !121, !133, !136, !138, !140, !143, !149, !151, !153, !155, !157, !159, !161, !163}
!llvm.ident = !{!165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165}
!llvm.module.flags = !{!166, !167, !168, !169, !170}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "longopts", scope: !2, file: !3, line: 41, type: !10, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !9, nameTableKind: None)
!3 = !DIFile(filename: "src/pwd.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4 = !{}
!5 = !{!6, !7}
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!7 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64)
!8 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!9 = !{!0}
!10 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 1280, elements: !23)
!11 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !12)
!12 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !14)
!13 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/getopt_ext.h", directory: "")
!14 = !{!15, !18, !20, !22}
!15 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !12, file: !13, line: 52, baseType: !16, size: 64)
!16 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !17, size: 64)
!17 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !8)
!18 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !12, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!19 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!20 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !12, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!21 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !19, size: 64)
!22 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !12, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!23 = !{!24}
!24 = !DISubrange(count: 5)
!25 = !DIGlobalVariableExpression(var: !26, expr: !DIExpression())
!26 = distinct !DIGlobalVariable(name: "Version", scope: !27, file: !28, line: 2, type: !16, isLocal: false, isDefinition: true)
!27 = distinct !DICompileUnit(language: DW_LANG_C99, file: !28, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !29, nameTableKind: None)
!28 = !DIFile(filename: "src/version.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!29 = !{!25}
!30 = !DIGlobalVariableExpression(var: !31, expr: !DIExpression())
!31 = distinct !DIGlobalVariable(name: "ignore_EPIPE", scope: !32, file: !37, line: 56, type: !38, isLocal: true, isDefinition: true)
!32 = distinct !DICompileUnit(language: DW_LANG_C99, file: !33, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !34, nameTableKind: None)
!33 = !DIFile(filename: "./lib/closeout.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!34 = !{!35, !30}
!35 = !DIGlobalVariableExpression(var: !36, expr: !DIExpression())
!36 = distinct !DIGlobalVariable(name: "file_name", scope: !32, file: !37, line: 46, type: !16, isLocal: true, isDefinition: true)
!37 = !DIFile(filename: "lib/closeout.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!38 = !DIBasicType(name: "_Bool", size: 8, encoding: DW_ATE_boolean)
!39 = !DIGlobalVariableExpression(var: !40, expr: !DIExpression())
!40 = distinct !DIGlobalVariable(name: "exit_failure", scope: !41, file: !44, line: 24, type: !45, isLocal: false, isDefinition: true)
!41 = distinct !DICompileUnit(language: DW_LANG_C99, file: !42, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !43, nameTableKind: None)
!42 = !DIFile(filename: "./lib/exitfail.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!43 = !{!39}
!44 = !DIFile(filename: "lib/exitfail.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!45 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !19)
!46 = !DIGlobalVariableExpression(var: !47, expr: !DIExpression())
!47 = distinct !DIGlobalVariable(name: "program_name", scope: !48, file: !51, line: 33, type: !16, isLocal: false, isDefinition: true)
!48 = distinct !DICompileUnit(language: DW_LANG_C99, file: !49, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !50, nameTableKind: None)
!49 = !DIFile(filename: "./lib/progname.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!50 = !{!46}
!51 = !DIFile(filename: "lib/progname.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!52 = !DIGlobalVariableExpression(var: !53, expr: !DIExpression())
!53 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !54, file: !80, line: 116, type: !93, isLocal: true, isDefinition: true)
!54 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !77, nameTableKind: None)
!55 = !DIFile(filename: "./lib/quotearg.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!56 = !{!57}
!57 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "quoting_style", file: !58, line: 32, baseType: !59, size: 32, elements: !60)
!58 = !DIFile(filename: "./lib/quotearg.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!59 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!60 = !{!61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71}
!61 = !DIEnumerator(name: "literal_quoting_style", value: 0, isUnsigned: true)
!62 = !DIEnumerator(name: "shell_quoting_style", value: 1, isUnsigned: true)
!63 = !DIEnumerator(name: "shell_always_quoting_style", value: 2, isUnsigned: true)
!64 = !DIEnumerator(name: "shell_escape_quoting_style", value: 3, isUnsigned: true)
!65 = !DIEnumerator(name: "shell_escape_always_quoting_style", value: 4, isUnsigned: true)
!66 = !DIEnumerator(name: "c_quoting_style", value: 5, isUnsigned: true)
!67 = !DIEnumerator(name: "c_maybe_quoting_style", value: 6, isUnsigned: true)
!68 = !DIEnumerator(name: "escape_quoting_style", value: 7, isUnsigned: true)
!69 = !DIEnumerator(name: "locale_quoting_style", value: 8, isUnsigned: true)
!70 = !DIEnumerator(name: "clocale_quoting_style", value: 9, isUnsigned: true)
!71 = !DIEnumerator(name: "custom_quoting_style", value: 10, isUnsigned: true)
!72 = !{!19, !73, !74}
!73 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!74 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !75, line: 46, baseType: !76)
!75 = !DIFile(filename: "/usr/lib/llvm-9/lib/clang/9.0.1/include/stddef.h", directory: "")
!76 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!77 = !{!78, !85, !91, !52, !103, !108, !115, !117}
!78 = !DIGlobalVariableExpression(var: !79, expr: !DIExpression())
!79 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !54, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!80 = !DIFile(filename: "lib/quotearg.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!81 = !DICompositeType(tag: DW_TAG_array_type, baseType: !82, size: 704, elements: !83)
!82 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !16)
!83 = !{!84}
!84 = !DISubrange(count: 11)
!85 = !DIGlobalVariableExpression(var: !86, expr: !DIExpression())
!86 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !54, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!87 = !DICompositeType(tag: DW_TAG_array_type, baseType: !88, size: 320, elements: !89)
!88 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !57)
!89 = !{!90}
!90 = !DISubrange(count: 10)
!91 = !DIGlobalVariableExpression(var: !92, expr: !DIExpression())
!92 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !54, file: !80, line: 1052, type: !93, isLocal: false, isDefinition: true)
!93 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !94)
!94 = !{!95, !96, !97, !101, !102}
!95 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !93, file: !80, line: 68, baseType: !57, size: 32)
!96 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !93, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!97 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !93, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!98 = !DICompositeType(tag: DW_TAG_array_type, baseType: !59, size: 256, elements: !99)
!99 = !{!100}
!100 = !DISubrange(count: 8)
!101 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !93, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!102 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !93, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!103 = !DIGlobalVariableExpression(var: !104, expr: !DIExpression())
!104 = distinct !DIGlobalVariable(name: "slot0", scope: !54, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!105 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 2048, elements: !106)
!106 = !{!107}
!107 = !DISubrange(count: 256)
!108 = !DIGlobalVariableExpression(var: !109, expr: !DIExpression())
!109 = distinct !DIGlobalVariable(name: "slotvec", scope: !54, file: !80, line: 845, type: !110, isLocal: true, isDefinition: true)
!110 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!111 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !112)
!112 = !{!113, !114}
!113 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !111, file: !80, line: 836, baseType: !74, size: 64)
!114 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !111, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!115 = !DIGlobalVariableExpression(var: !116, expr: !DIExpression())
!116 = distinct !DIGlobalVariable(name: "nslots", scope: !54, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!117 = !DIGlobalVariableExpression(var: !118, expr: !DIExpression())
!118 = distinct !DIGlobalVariable(name: "slotvec0", scope: !54, file: !80, line: 844, type: !111, isLocal: true, isDefinition: true)
!119 = !DIGlobalVariableExpression(var: !120, expr: !DIExpression())
!120 = distinct !DIGlobalVariable(name: "version_etc_copyright", scope: !121, file: !124, line: 26, type: !125, isLocal: false, isDefinition: true)
!121 = distinct !DICompileUnit(language: DW_LANG_C99, file: !122, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !123, nameTableKind: None)
!122 = !DIFile(filename: "./lib/version-etc-fsf.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!123 = !{!119}
!124 = !DIFile(filename: "lib/version-etc-fsf.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!125 = !DICompositeType(tag: DW_TAG_array_type, baseType: !17, size: 376, elements: !126)
!126 = !{!127}
!127 = !DISubrange(count: 47)
!128 = distinct !DICompileUnit(language: DW_LANG_C99, file: !129, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!129 = !DIFile(filename: "./lib/root-dev-ino.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!130 = distinct !DICompileUnit(language: DW_LANG_C99, file: !131, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!131 = !DIFile(filename: "./lib/version-etc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!132 = !{!6}
!133 = distinct !DICompileUnit(language: DW_LANG_C99, file: !134, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !135, nameTableKind: None)
!134 = !DIFile(filename: "./lib/xmalloc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!135 = !{!74, !7, !6}
!136 = distinct !DICompileUnit(language: DW_LANG_C99, file: !137, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!137 = !DIFile(filename: "./lib/xalloc-die.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!138 = distinct !DICompileUnit(language: DW_LANG_C99, file: !139, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!139 = !DIFile(filename: "./lib/xgetcwd.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!140 = distinct !DICompileUnit(language: DW_LANG_C99, file: !141, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !142, nameTableKind: None)
!141 = !DIFile(filename: "./lib/mbrtowc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!142 = !{!74}
!143 = distinct !DICompileUnit(language: DW_LANG_C99, file: !144, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !145, nameTableKind: None)
!144 = !DIFile(filename: "./lib/c-strcasecmp.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!145 = !{!146}
!146 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !147, size: 64)
!147 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !148)
!148 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!149 = distinct !DICompileUnit(language: DW_LANG_C99, file: !150, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!150 = !DIFile(filename: "./lib/close-stream.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!151 = distinct !DICompileUnit(language: DW_LANG_C99, file: !152, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!152 = !DIFile(filename: "./lib/hard-locale.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!153 = distinct !DICompileUnit(language: DW_LANG_C99, file: !154, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!154 = !DIFile(filename: "./lib/localcharset.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!155 = distinct !DICompileUnit(language: DW_LANG_C99, file: !156, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!156 = !DIFile(filename: "./lib/setlocale_null.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!157 = distinct !DICompileUnit(language: DW_LANG_C99, file: !158, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!158 = !DIFile(filename: "./lib/fclose.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!159 = distinct !DICompileUnit(language: DW_LANG_C99, file: !160, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!160 = !DIFile(filename: "./lib/fflush.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!161 = distinct !DICompileUnit(language: DW_LANG_C99, file: !162, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!162 = !DIFile(filename: "./lib/fseeko.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!163 = distinct !DICompileUnit(language: DW_LANG_C99, file: !164, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!164 = !DIFile(filename: "./lib/c-ctype.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!165 = !{!"clang version 9.0.1-12 "}
!166 = !{i32 2, !"Dwarf Version", i32 4}
!167 = !{i32 2, !"Debug Info Version", i32 3}
!168 = !{i32 1, !"wchar_size", i32 4}
!169 = !{i32 1, !"ThinLTO", i32 0}
!170 = !{i32 1, !"EnableSplitLTOUnit", i32 0}
!171 = distinct !DISubprogram(name: "usage", scope: !3, file: !3, line: 51, type: !172, scopeLine: 52, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!172 = !DISubroutineType(types: !173)
!173 = !{null, !19}
!174 = !DILocalVariable(name: "status", arg: 1, scope: !171, file: !3, line: 51, type: !19)
!175 = !DILocation(line: 51, column: 12, scope: !171)
!176 = !DILocation(line: 53, column: 7, scope: !177)
!177 = distinct !DILexicalBlock(scope: !171, file: !3, line: 53, column: 7)
!178 = !DILocation(line: 53, column: 14, scope: !177)
!179 = !DILocation(line: 53, column: 7, scope: !171)
!180 = !DILocation(line: 54, column: 5, scope: !177)
!181 = !DILocation(line: 54, column: 5, scope: !182)
!182 = distinct !DILexicalBlock(scope: !177, file: !3, line: 54, column: 5)
!183 = !DILocation(line: 57, column: 15, scope: !184)
!184 = distinct !DILexicalBlock(scope: !177, file: !3, line: 56, column: 5)
!185 = !DILocation(line: 57, column: 45, scope: !184)
!186 = !DILocation(line: 57, column: 7, scope: !184)
!187 = !DILocation(line: 58, column: 7, scope: !184)
!188 = !DILocation(line: 62, column: 7, scope: !184)
!189 = !DILocation(line: 66, column: 7, scope: !184)
!190 = !DILocation(line: 67, column: 7, scope: !184)
!191 = !DILocation(line: 68, column: 7, scope: !184)
!192 = !DILocation(line: 71, column: 15, scope: !184)
!193 = !DILocation(line: 71, column: 7, scope: !184)
!194 = !DILocation(line: 72, column: 7, scope: !184)
!195 = !DILocation(line: 74, column: 9, scope: !171)
!196 = !DILocation(line: 74, column: 3, scope: !171)
!197 = !DILocalVariable(name: "status", arg: 1, scope: !198, file: !3, line: 51, type: !19)
!198 = distinct !DISubprogram(name: "usage", scope: !3, file: !3, line: 51, type: !172, scopeLine: 52, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !199, retainedNodes: !4)
!199 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !200, nameTableKind: None)
!200 = !{!201}
!201 = !DIGlobalVariableExpression(var: !202, expr: !DIExpression())
!202 = distinct !DIGlobalVariable(name: "longopts", scope: !199, file: !3, line: 41, type: !203, isLocal: true, isDefinition: true)
!203 = !DICompositeType(tag: DW_TAG_array_type, baseType: !204, size: 1280, elements: !23)
!204 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !205)
!205 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !206)
!206 = !{!207, !208, !209, !210}
!207 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !205, file: !13, line: 52, baseType: !16, size: 64)
!208 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !205, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!209 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !205, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!210 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !205, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!211 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !212, file: !212, line: 634, type: !213, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!212 = !DIFile(filename: "src/system.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!213 = !DISubroutineType(types: !214)
!214 = !{null, !16}
!215 = !DILocalVariable(name: "program", arg: 1, scope: !211, file: !212, line: 634, type: !16)
!216 = !DILocation(line: 634, column: 34, scope: !211)
!217 = !DILocalVariable(name: "infomap", scope: !211, file: !212, line: 636, type: !218)
!218 = !DICompositeType(tag: DW_TAG_array_type, baseType: !219, size: 896, elements: !224)
!219 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !220)
!220 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "infomap", scope: !211, file: !212, line: 636, size: 128, elements: !221)
!221 = !{!222, !223}
!222 = !DIDerivedType(tag: DW_TAG_member, name: "program", scope: !220, file: !212, line: 636, baseType: !16, size: 64)
!223 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !220, file: !212, line: 636, baseType: !16, size: 64, offset: 64)
!224 = !{!225}
!225 = !DISubrange(count: 7)
!226 = !DILocation(line: 636, column: 67, scope: !211)
!227 = !DILocalVariable(name: "node", scope: !211, file: !212, line: 646, type: !16)
!228 = !DILocation(line: 646, column: 15, scope: !211)
!229 = !DILocation(line: 646, column: 22, scope: !211)
!230 = !DILocalVariable(name: "map_prog", scope: !211, file: !212, line: 647, type: !231)
!231 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !219, size: 64)
!232 = !DILocation(line: 647, column: 25, scope: !211)
!233 = !DILocation(line: 647, column: 36, scope: !211)
!234 = !DILocation(line: 649, column: 3, scope: !211)
!235 = !DILocation(line: 649, column: 10, scope: !211)
!236 = !DILocation(line: 649, column: 20, scope: !211)
!237 = !DILocation(line: 649, column: 28, scope: !211)
!238 = !DILocation(line: 649, column: 33, scope: !211)
!239 = !DILocation(line: 649, column: 31, scope: !211)
!240 = !DILocation(line: 0, scope: !211)
!241 = !DILocation(line: 650, column: 13, scope: !211)
!242 = distinct !{!242, !234, !241}
!243 = !DILocation(line: 652, column: 7, scope: !244)
!244 = distinct !DILexicalBlock(scope: !211, file: !212, line: 652, column: 7)
!245 = !DILocation(line: 652, column: 17, scope: !244)
!246 = !DILocation(line: 652, column: 7, scope: !211)
!247 = !DILocation(line: 653, column: 12, scope: !244)
!248 = !DILocation(line: 653, column: 22, scope: !244)
!249 = !DILocation(line: 653, column: 10, scope: !244)
!250 = !DILocation(line: 653, column: 5, scope: !244)
!251 = !DILocation(line: 655, column: 11, scope: !211)
!252 = !DILocation(line: 655, column: 3, scope: !211)
!253 = !DILocalVariable(name: "lc_messages", scope: !211, file: !212, line: 659, type: !16)
!254 = !DILocation(line: 659, column: 15, scope: !211)
!255 = !DILocation(line: 659, column: 29, scope: !211)
!256 = !DILocation(line: 660, column: 7, scope: !257)
!257 = distinct !DILexicalBlock(scope: !211, file: !212, line: 660, column: 7)
!258 = !DILocation(line: 660, column: 19, scope: !257)
!259 = !DILocation(line: 660, column: 22, scope: !257)
!260 = !DILocation(line: 660, column: 7, scope: !211)
!261 = !DILocation(line: 666, column: 7, scope: !262)
!262 = distinct !DILexicalBlock(scope: !257, file: !212, line: 661, column: 5)
!263 = !DILocation(line: 668, column: 5, scope: !262)
!264 = !DILocation(line: 669, column: 11, scope: !211)
!265 = !DILocation(line: 670, column: 24, scope: !211)
!266 = !DILocation(line: 669, column: 3, scope: !211)
!267 = !DILocation(line: 671, column: 11, scope: !211)
!268 = !DILocation(line: 672, column: 11, scope: !211)
!269 = !DILocation(line: 672, column: 17, scope: !211)
!270 = !DILocation(line: 672, column: 25, scope: !211)
!271 = !DILocation(line: 672, column: 22, scope: !211)
!272 = !DILocation(line: 671, column: 3, scope: !211)
!273 = !DILocation(line: 673, column: 1, scope: !211)
!274 = !DILocalVariable(name: "program", arg: 1, scope: !275, file: !212, line: 634, type: !16)
!275 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !212, file: !212, line: 634, type: !213, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !276, retainedNodes: !4)
!276 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !277, nameTableKind: None)
!277 = !{!278}
!278 = !DIGlobalVariableExpression(var: !279, expr: !DIExpression())
!279 = distinct !DIGlobalVariable(name: "longopts", scope: !276, file: !3, line: 41, type: !280, isLocal: true, isDefinition: true)
!280 = !DICompositeType(tag: DW_TAG_array_type, baseType: !281, size: 1280, elements: !23)
!281 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !282)
!282 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !283)
!283 = !{!284, !285, !286, !287}
!284 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !282, file: !13, line: 52, baseType: !16, size: 64)
!285 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !282, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!286 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !282, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!287 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !282, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!288 = !DILocalVariable(name: "infomap", scope: !275, file: !212, line: 636, type: !289)
!289 = !DICompositeType(tag: DW_TAG_array_type, baseType: !290, size: 896, elements: !224)
!290 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !291)
!291 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "infomap", scope: !275, file: !212, line: 636, size: 128, elements: !292)
!292 = !{!293, !294}
!293 = !DIDerivedType(tag: DW_TAG_member, name: "program", scope: !291, file: !212, line: 636, baseType: !16, size: 64)
!294 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !291, file: !212, line: 636, baseType: !16, size: 64, offset: 64)
!295 = !DILocalVariable(name: "node", scope: !275, file: !212, line: 646, type: !16)
!296 = !DILocalVariable(name: "map_prog", scope: !275, file: !212, line: 647, type: !297)
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !290, size: 64)
!298 = !DILocalVariable(name: "lc_messages", scope: !299, file: !212, line: 659, type: !16)
!299 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !212, file: !212, line: 634, type: !213, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !300, retainedNodes: !4)
!300 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !301, nameTableKind: None)
!301 = !{!302}
!302 = !DIGlobalVariableExpression(var: !303, expr: !DIExpression())
!303 = distinct !DIGlobalVariable(name: "longopts", scope: !300, file: !3, line: 41, type: !304, isLocal: true, isDefinition: true)
!304 = !DICompositeType(tag: DW_TAG_array_type, baseType: !305, size: 1280, elements: !23)
!305 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !306)
!306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !307)
!307 = !{!308, !309, !310, !311}
!308 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !306, file: !13, line: 52, baseType: !16, size: 64)
!309 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !306, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!310 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !306, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!311 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !306, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!312 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 327, type: !313, scopeLine: 328, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!313 = !DISubroutineType(types: !314)
!314 = !{!19, !19, !315}
!315 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!316 = !DILocalVariable(name: "argc", arg: 1, scope: !312, file: !3, line: 327, type: !19)
!317 = !DILocation(line: 327, column: 11, scope: !312)
!318 = !DILocalVariable(name: "argv", arg: 2, scope: !312, file: !3, line: 327, type: !315)
!319 = !DILocation(line: 327, column: 24, scope: !312)
!320 = !DILocalVariable(name: "wd", scope: !312, file: !3, line: 329, type: !7)
!321 = !DILocation(line: 329, column: 9, scope: !312)
!322 = !DILocalVariable(name: "logical", scope: !312, file: !3, line: 333, type: !38)
!323 = !DILocation(line: 333, column: 8, scope: !312)
!324 = !DILocation(line: 333, column: 19, scope: !312)
!325 = !DILocation(line: 333, column: 46, scope: !312)
!326 = !DILocation(line: 336, column: 21, scope: !312)
!327 = !DILocation(line: 336, column: 3, scope: !312)
!328 = !DILocation(line: 337, column: 3, scope: !312)
!329 = !DILocation(line: 338, column: 3, scope: !312)
!330 = !DILocation(line: 339, column: 3, scope: !312)
!331 = !DILocation(line: 341, column: 3, scope: !312)
!332 = !DILocation(line: 343, column: 3, scope: !312)
!333 = !DILocalVariable(name: "c", scope: !334, file: !3, line: 345, type: !19)
!334 = distinct !DILexicalBlock(scope: !312, file: !3, line: 344, column: 5)
!335 = !DILocation(line: 345, column: 11, scope: !334)
!336 = !DILocation(line: 345, column: 28, scope: !334)
!337 = !DILocation(line: 345, column: 34, scope: !334)
!338 = !DILocation(line: 345, column: 15, scope: !334)
!339 = !DILocation(line: 346, column: 11, scope: !340)
!340 = distinct !DILexicalBlock(scope: !334, file: !3, line: 346, column: 11)
!341 = !DILocation(line: 346, column: 13, scope: !340)
!342 = !DILocation(line: 347, column: 9, scope: !340)
!343 = !DILocation(line: 348, column: 15, scope: !334)
!344 = !DILocation(line: 348, column: 7, scope: !334)
!345 = !DILocation(line: 351, column: 19, scope: !346)
!346 = distinct !DILexicalBlock(scope: !334, file: !3, line: 349, column: 9)
!347 = !DILocation(line: 352, column: 11, scope: !346)
!348 = !DILocation(line: 354, column: 19, scope: !346)
!349 = !DILocation(line: 355, column: 11, scope: !346)
!350 = !DILocation(line: 357, column: 9, scope: !346)
!351 = !DILocation(line: 359, column: 9, scope: !346)
!352 = !DILocation(line: 362, column: 11, scope: !346)
!353 = distinct !{!353, !332, !354}
!354 = !DILocation(line: 364, column: 5, scope: !312)
!355 = !DILocation(line: 366, column: 7, scope: !356)
!356 = distinct !DILexicalBlock(scope: !312, file: !3, line: 366, column: 7)
!357 = !DILocation(line: 366, column: 16, scope: !356)
!358 = !DILocation(line: 366, column: 14, scope: !356)
!359 = !DILocation(line: 366, column: 7, scope: !312)
!360 = !DILocation(line: 367, column: 18, scope: !356)
!361 = !DILocation(line: 367, column: 5, scope: !356)
!362 = !DILocation(line: 369, column: 7, scope: !363)
!363 = distinct !DILexicalBlock(scope: !312, file: !3, line: 369, column: 7)
!364 = !DILocation(line: 369, column: 7, scope: !312)
!365 = !DILocation(line: 371, column: 12, scope: !366)
!366 = distinct !DILexicalBlock(scope: !363, file: !3, line: 370, column: 5)
!367 = !DILocation(line: 371, column: 10, scope: !366)
!368 = !DILocation(line: 372, column: 11, scope: !369)
!369 = distinct !DILexicalBlock(scope: !366, file: !3, line: 372, column: 11)
!370 = !DILocation(line: 372, column: 11, scope: !366)
!371 = !DILocation(line: 374, column: 17, scope: !372)
!372 = distinct !DILexicalBlock(scope: !369, file: !3, line: 373, column: 9)
!373 = !DILocation(line: 374, column: 11, scope: !372)
!374 = !DILocation(line: 375, column: 11, scope: !372)
!375 = !DILocation(line: 377, column: 5, scope: !366)
!376 = !DILocation(line: 379, column: 8, scope: !312)
!377 = !DILocation(line: 379, column: 6, scope: !312)
!378 = !DILocation(line: 380, column: 7, scope: !379)
!379 = distinct !DILexicalBlock(scope: !312, file: !3, line: 380, column: 7)
!380 = !DILocation(line: 380, column: 10, scope: !379)
!381 = !DILocation(line: 380, column: 7, scope: !312)
!382 = !DILocation(line: 382, column: 13, scope: !383)
!383 = distinct !DILexicalBlock(scope: !379, file: !3, line: 381, column: 5)
!384 = !DILocation(line: 382, column: 7, scope: !383)
!385 = !DILocation(line: 383, column: 13, scope: !383)
!386 = !DILocation(line: 383, column: 7, scope: !383)
!387 = !DILocation(line: 384, column: 5, scope: !383)
!388 = !DILocalVariable(name: "file_name", scope: !389, file: !3, line: 387, type: !390)
!389 = distinct !DILexicalBlock(scope: !379, file: !3, line: 386, column: 5)
!390 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !391, size: 64)
!391 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "file_name", file: !3, line: 34, size: 192, elements: !392)
!392 = !{!393, !394, !395}
!393 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !391, file: !3, line: 36, baseType: !7, size: 64)
!394 = !DIDerivedType(tag: DW_TAG_member, name: "n_alloc", scope: !391, file: !3, line: 37, baseType: !74, size: 64, offset: 64)
!395 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !391, file: !3, line: 38, baseType: !7, size: 64, offset: 128)
!396 = !DILocation(line: 387, column: 25, scope: !389)
!397 = !DILocation(line: 387, column: 37, scope: !389)
!398 = !DILocation(line: 388, column: 22, scope: !389)
!399 = !DILocation(line: 388, column: 7, scope: !389)
!400 = !DILocation(line: 389, column: 13, scope: !389)
!401 = !DILocation(line: 389, column: 24, scope: !389)
!402 = !DILocation(line: 389, column: 7, scope: !389)
!403 = !DILocation(line: 390, column: 23, scope: !389)
!404 = !DILocation(line: 390, column: 7, scope: !389)
!405 = !DILocation(line: 393, column: 3, scope: !312)
!406 = !DILocation(line: 394, column: 1, scope: !312)
!407 = !DILocalVariable(name: "argc", arg: 1, scope: !408, file: !3, line: 327, type: !19)
!408 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 327, type: !313, scopeLine: 328, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !409, retainedNodes: !4)
!409 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !410, nameTableKind: None)
!410 = !{!411}
!411 = !DIGlobalVariableExpression(var: !412, expr: !DIExpression())
!412 = distinct !DIGlobalVariable(name: "longopts", scope: !409, file: !3, line: 41, type: !413, isLocal: true, isDefinition: true)
!413 = !DICompositeType(tag: DW_TAG_array_type, baseType: !414, size: 1280, elements: !23)
!414 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !415)
!415 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !416)
!416 = !{!417, !418, !419, !420}
!417 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !415, file: !13, line: 52, baseType: !16, size: 64)
!418 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !415, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!419 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !415, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!420 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !415, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!421 = !DILocalVariable(name: "argv", arg: 2, scope: !408, file: !3, line: 327, type: !315)
!422 = !DILocalVariable(name: "wd", scope: !408, file: !3, line: 329, type: !7)
!423 = !DILocalVariable(name: "logical", scope: !408, file: !3, line: 333, type: !38)
!424 = distinct !DISubprogram(name: "logical_getcwd", scope: !3, file: !3, line: 300, type: !425, scopeLine: 301, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!425 = !DISubroutineType(types: !426)
!426 = !{!7}
!427 = !DILocalVariable(name: "st1", scope: !424, file: !3, line: 302, type: !428)
!428 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !429, line: 46, size: 1152, elements: !430)
!429 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stat.h", directory: "")
!430 = !{!431, !434, !436, !438, !440, !442, !444, !445, !446, !449, !451, !453, !461, !462, !463}
!431 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !428, file: !429, line: 48, baseType: !432, size: 64)
!432 = !DIDerivedType(tag: DW_TAG_typedef, name: "__dev_t", file: !433, line: 145, baseType: !76)
!433 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!434 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !428, file: !429, line: 53, baseType: !435, size: 64, offset: 64)
!435 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ino_t", file: !433, line: 148, baseType: !76)
!436 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !428, file: !429, line: 61, baseType: !437, size: 64, offset: 128)
!437 = !DIDerivedType(tag: DW_TAG_typedef, name: "__nlink_t", file: !433, line: 151, baseType: !76)
!438 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !428, file: !429, line: 62, baseType: !439, size: 32, offset: 192)
!439 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mode_t", file: !433, line: 150, baseType: !59)
!440 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !428, file: !429, line: 64, baseType: !441, size: 32, offset: 224)
!441 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uid_t", file: !433, line: 146, baseType: !59)
!442 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !428, file: !429, line: 65, baseType: !443, size: 32, offset: 256)
!443 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gid_t", file: !433, line: 147, baseType: !59)
!444 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !428, file: !429, line: 67, baseType: !19, size: 32, offset: 288)
!445 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !428, file: !429, line: 69, baseType: !432, size: 64, offset: 320)
!446 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !428, file: !429, line: 74, baseType: !447, size: 64, offset: 384)
!447 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !433, line: 152, baseType: !448)
!448 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !428, file: !429, line: 78, baseType: !450, size: 64, offset: 448)
!450 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blksize_t", file: !433, line: 174, baseType: !448)
!451 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !428, file: !429, line: 80, baseType: !452, size: 64, offset: 512)
!452 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blkcnt_t", file: !433, line: 179, baseType: !448)
!453 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !428, file: !429, line: 91, baseType: !454, size: 128, offset: 576)
!454 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !455, line: 10, size: 128, elements: !456)
!455 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h", directory: "")
!456 = !{!457, !459}
!457 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !454, file: !455, line: 12, baseType: !458, size: 64)
!458 = !DIDerivedType(tag: DW_TAG_typedef, name: "__time_t", file: !433, line: 160, baseType: !448)
!459 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !454, file: !455, line: 16, baseType: !460, size: 64, offset: 64)
!460 = !DIDerivedType(tag: DW_TAG_typedef, name: "__syscall_slong_t", file: !433, line: 196, baseType: !448)
!461 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !428, file: !429, line: 92, baseType: !454, size: 128, offset: 704)
!462 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !428, file: !429, line: 93, baseType: !454, size: 128, offset: 832)
!463 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !428, file: !429, line: 106, baseType: !464, size: 192, offset: 960)
!464 = !DICompositeType(tag: DW_TAG_array_type, baseType: !460, size: 192, elements: !465)
!465 = !{!466}
!466 = !DISubrange(count: 3)
!467 = !DILocation(line: 302, column: 15, scope: !424)
!468 = !DILocalVariable(name: "st2", scope: !424, file: !3, line: 303, type: !428)
!469 = !DILocation(line: 303, column: 15, scope: !424)
!470 = !DILocalVariable(name: "wd", scope: !424, file: !3, line: 304, type: !7)
!471 = !DILocation(line: 304, column: 9, scope: !424)
!472 = !DILocation(line: 304, column: 14, scope: !424)
!473 = !DILocalVariable(name: "p", scope: !424, file: !3, line: 305, type: !7)
!474 = !DILocation(line: 305, column: 9, scope: !424)
!475 = !DILocation(line: 308, column: 8, scope: !476)
!476 = distinct !DILexicalBlock(scope: !424, file: !3, line: 308, column: 7)
!477 = !DILocation(line: 308, column: 11, scope: !476)
!478 = !DILocation(line: 308, column: 14, scope: !476)
!479 = !DILocation(line: 308, column: 20, scope: !476)
!480 = !DILocation(line: 308, column: 7, scope: !424)
!481 = !DILocation(line: 309, column: 5, scope: !476)
!482 = !DILocation(line: 310, column: 7, scope: !424)
!483 = !DILocation(line: 310, column: 5, scope: !424)
!484 = !DILocation(line: 311, column: 3, scope: !424)
!485 = !DILocation(line: 311, column: 23, scope: !424)
!486 = !DILocation(line: 311, column: 15, scope: !424)
!487 = !DILocation(line: 311, column: 13, scope: !424)
!488 = !DILocation(line: 313, column: 12, scope: !489)
!489 = distinct !DILexicalBlock(scope: !490, file: !3, line: 313, column: 11)
!490 = distinct !DILexicalBlock(scope: !424, file: !3, line: 312, column: 5)
!491 = !DILocation(line: 313, column: 17, scope: !489)
!492 = !DILocation(line: 313, column: 20, scope: !489)
!493 = !DILocation(line: 313, column: 25, scope: !489)
!494 = !DILocation(line: 314, column: 11, scope: !489)
!495 = !DILocation(line: 314, column: 15, scope: !489)
!496 = !DILocation(line: 314, column: 20, scope: !489)
!497 = !DILocation(line: 314, column: 27, scope: !489)
!498 = !DILocation(line: 314, column: 32, scope: !489)
!499 = !DILocation(line: 314, column: 37, scope: !489)
!500 = !DILocation(line: 314, column: 40, scope: !489)
!501 = !DILocation(line: 314, column: 45, scope: !489)
!502 = !DILocation(line: 313, column: 11, scope: !490)
!503 = !DILocation(line: 315, column: 9, scope: !489)
!504 = !DILocation(line: 316, column: 8, scope: !490)
!505 = distinct !{!505, !484, !506}
!506 = !DILocation(line: 317, column: 5, scope: !424)
!507 = !DILocation(line: 320, column: 13, scope: !508)
!508 = distinct !DILexicalBlock(scope: !424, file: !3, line: 320, column: 7)
!509 = !DILocation(line: 320, column: 7, scope: !508)
!510 = !DILocation(line: 320, column: 23, scope: !508)
!511 = !DILocation(line: 320, column: 31, scope: !508)
!512 = !DILocation(line: 320, column: 48, scope: !508)
!513 = !DILocation(line: 320, column: 56, scope: !508)
!514 = !DILocation(line: 320, column: 7, scope: !424)
!515 = !DILocation(line: 321, column: 12, scope: !508)
!516 = !DILocation(line: 321, column: 5, scope: !508)
!517 = !DILocation(line: 322, column: 3, scope: !424)
!518 = !DILocation(line: 323, column: 1, scope: !424)
!519 = !DILocalVariable(name: "st1", scope: !520, file: !3, line: 302, type: !533)
!520 = distinct !DISubprogram(name: "logical_getcwd", scope: !3, file: !3, line: 300, type: !425, scopeLine: 301, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !521, retainedNodes: !4)
!521 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !522, nameTableKind: None)
!522 = !{!523}
!523 = !DIGlobalVariableExpression(var: !524, expr: !DIExpression())
!524 = distinct !DIGlobalVariable(name: "longopts", scope: !521, file: !3, line: 41, type: !525, isLocal: true, isDefinition: true)
!525 = !DICompositeType(tag: DW_TAG_array_type, baseType: !526, size: 1280, elements: !23)
!526 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !527)
!527 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !528)
!528 = !{!529, !530, !531, !532}
!529 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !527, file: !13, line: 52, baseType: !16, size: 64)
!530 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !527, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!531 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !527, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!532 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !527, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!533 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !429, line: 46, size: 1152, elements: !534)
!534 = !{!535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !551, !552, !553}
!535 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !533, file: !429, line: 48, baseType: !432, size: 64)
!536 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !533, file: !429, line: 53, baseType: !435, size: 64, offset: 64)
!537 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !533, file: !429, line: 61, baseType: !437, size: 64, offset: 128)
!538 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !533, file: !429, line: 62, baseType: !439, size: 32, offset: 192)
!539 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !533, file: !429, line: 64, baseType: !441, size: 32, offset: 224)
!540 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !533, file: !429, line: 65, baseType: !443, size: 32, offset: 256)
!541 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !533, file: !429, line: 67, baseType: !19, size: 32, offset: 288)
!542 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !533, file: !429, line: 69, baseType: !432, size: 64, offset: 320)
!543 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !533, file: !429, line: 74, baseType: !447, size: 64, offset: 384)
!544 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !533, file: !429, line: 78, baseType: !450, size: 64, offset: 448)
!545 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !533, file: !429, line: 80, baseType: !452, size: 64, offset: 512)
!546 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !533, file: !429, line: 91, baseType: !547, size: 128, offset: 576)
!547 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !455, line: 10, size: 128, elements: !548)
!548 = !{!549, !550}
!549 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !547, file: !455, line: 12, baseType: !458, size: 64)
!550 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !547, file: !455, line: 16, baseType: !460, size: 64, offset: 64)
!551 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !533, file: !429, line: 92, baseType: !547, size: 128, offset: 704)
!552 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !533, file: !429, line: 93, baseType: !547, size: 128, offset: 832)
!553 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !533, file: !429, line: 106, baseType: !464, size: 192, offset: 960)
!554 = !DILocalVariable(name: "st2", scope: !520, file: !3, line: 303, type: !533)
!555 = !DILocalVariable(name: "wd", scope: !520, file: !3, line: 304, type: !7)
!556 = !DILocalVariable(name: "p", scope: !520, file: !3, line: 305, type: !7)
!557 = distinct !DISubprogram(name: "file_name_init", scope: !3, file: !3, line: 85, type: !558, scopeLine: 86, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!558 = !DISubroutineType(types: !559)
!559 = !{!390}
!560 = !DILocalVariable(name: "p", scope: !557, file: !3, line: 87, type: !390)
!561 = !DILocation(line: 87, column: 21, scope: !557)
!562 = !DILocation(line: 87, column: 25, scope: !557)
!563 = !DILocation(line: 91, column: 3, scope: !557)
!564 = !DILocation(line: 91, column: 6, scope: !557)
!565 = !DILocation(line: 91, column: 14, scope: !557)
!566 = !DILocation(line: 93, column: 21, scope: !557)
!567 = !DILocation(line: 93, column: 24, scope: !557)
!568 = !DILocation(line: 93, column: 12, scope: !557)
!569 = !DILocation(line: 93, column: 3, scope: !557)
!570 = !DILocation(line: 93, column: 6, scope: !557)
!571 = !DILocation(line: 93, column: 10, scope: !557)
!572 = !DILocation(line: 94, column: 14, scope: !557)
!573 = !DILocation(line: 94, column: 17, scope: !557)
!574 = !DILocation(line: 94, column: 24, scope: !557)
!575 = !DILocation(line: 94, column: 27, scope: !557)
!576 = !DILocation(line: 94, column: 35, scope: !557)
!577 = !DILocation(line: 94, column: 21, scope: !557)
!578 = !DILocation(line: 94, column: 3, scope: !557)
!579 = !DILocation(line: 94, column: 6, scope: !557)
!580 = !DILocation(line: 94, column: 12, scope: !557)
!581 = !DILocation(line: 95, column: 3, scope: !557)
!582 = !DILocation(line: 95, column: 6, scope: !557)
!583 = !DILocation(line: 95, column: 15, scope: !557)
!584 = !DILocation(line: 96, column: 10, scope: !557)
!585 = !DILocation(line: 96, column: 3, scope: !557)
!586 = !DILocalVariable(name: "p", scope: !587, file: !3, line: 87, type: !590)
!587 = distinct !DISubprogram(name: "file_name_init", scope: !3, file: !3, line: 85, type: !588, scopeLine: 86, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !596, retainedNodes: !4)
!588 = !DISubroutineType(types: !589)
!589 = !{!590}
!590 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !591, size: 64)
!591 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "file_name", file: !3, line: 34, size: 192, elements: !592)
!592 = !{!593, !594, !595}
!593 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !591, file: !3, line: 36, baseType: !7, size: 64)
!594 = !DIDerivedType(tag: DW_TAG_member, name: "n_alloc", scope: !591, file: !3, line: 37, baseType: !74, size: 64, offset: 64)
!595 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !591, file: !3, line: 38, baseType: !7, size: 64, offset: 128)
!596 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !597, nameTableKind: None)
!597 = !{!598}
!598 = !DIGlobalVariableExpression(var: !599, expr: !DIExpression())
!599 = distinct !DIGlobalVariable(name: "longopts", scope: !596, file: !3, line: 41, type: !600, isLocal: true, isDefinition: true)
!600 = !DICompositeType(tag: DW_TAG_array_type, baseType: !601, size: 1280, elements: !23)
!601 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !602)
!602 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !603)
!603 = !{!604, !605, !606, !607}
!604 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !602, file: !13, line: 52, baseType: !16, size: 64)
!605 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !602, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!606 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !602, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!607 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !602, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!608 = distinct !DISubprogram(name: "robust_getcwd", scope: !3, file: !3, line: 268, type: !609, scopeLine: 269, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!609 = !DISubroutineType(types: !610)
!610 = !{null, !390}
!611 = !DILocalVariable(name: "file_name", arg: 1, scope: !608, file: !3, line: 268, type: !390)
!612 = !DILocation(line: 268, column: 34, scope: !608)
!613 = !DILocalVariable(name: "height", scope: !608, file: !3, line: 270, type: !74)
!614 = !DILocation(line: 270, column: 10, scope: !608)
!615 = !DILocalVariable(name: "dev_ino_buf", scope: !608, file: !3, line: 271, type: !616)
!616 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dev_ino", file: !617, line: 7, size: 128, elements: !618)
!617 = !DIFile(filename: "./lib/dev-ino.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!618 = !{!619, !622}
!619 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !616, file: !617, line: 9, baseType: !620, size: 64)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "ino_t", file: !621, line: 47, baseType: !435)
!621 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/sys/types.h", directory: "")
!622 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !616, file: !617, line: 10, baseType: !623, size: 64, offset: 64)
!623 = !DIDerivedType(tag: DW_TAG_typedef, name: "dev_t", file: !621, line: 59, baseType: !432)
!624 = !DILocation(line: 271, column: 18, scope: !608)
!625 = !DILocalVariable(name: "root_dev_ino", scope: !608, file: !3, line: 272, type: !626)
!626 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !616, size: 64)
!627 = !DILocation(line: 272, column: 19, scope: !608)
!628 = !DILocation(line: 272, column: 34, scope: !608)
!629 = !DILocalVariable(name: "dot_sb", scope: !608, file: !3, line: 273, type: !428)
!630 = !DILocation(line: 273, column: 15, scope: !608)
!631 = !DILocation(line: 275, column: 7, scope: !632)
!632 = distinct !DILexicalBlock(scope: !608, file: !3, line: 275, column: 7)
!633 = !DILocation(line: 275, column: 20, scope: !632)
!634 = !DILocation(line: 275, column: 7, scope: !608)
!635 = !DILocation(line: 276, column: 5, scope: !632)
!636 = !DILocation(line: 279, column: 7, scope: !637)
!637 = distinct !DILexicalBlock(scope: !608, file: !3, line: 279, column: 7)
!638 = !DILocation(line: 279, column: 27, scope: !637)
!639 = !DILocation(line: 279, column: 7, scope: !608)
!640 = !DILocation(line: 280, column: 5, scope: !637)
!641 = !DILocation(line: 282, column: 3, scope: !608)
!642 = !DILocation(line: 285, column: 11, scope: !643)
!643 = distinct !DILexicalBlock(scope: !644, file: !3, line: 285, column: 11)
!644 = distinct !DILexicalBlock(scope: !608, file: !3, line: 283, column: 5)
!645 = !DILocation(line: 285, column: 11, scope: !644)
!646 = !DILocation(line: 286, column: 9, scope: !643)
!647 = !DILocation(line: 288, column: 32, scope: !644)
!648 = !DILocation(line: 288, column: 49, scope: !644)
!649 = !DILocation(line: 288, column: 7, scope: !644)
!650 = distinct !{!650, !641, !651}
!651 = !DILocation(line: 289, column: 5, scope: !608)
!652 = !DILocation(line: 292, column: 7, scope: !653)
!653 = distinct !DILexicalBlock(scope: !608, file: !3, line: 292, column: 7)
!654 = !DILocation(line: 292, column: 18, scope: !653)
!655 = !DILocation(line: 292, column: 27, scope: !653)
!656 = !DILocation(line: 292, column: 7, scope: !608)
!657 = !DILocation(line: 293, column: 24, scope: !653)
!658 = !DILocation(line: 293, column: 5, scope: !653)
!659 = !DILocation(line: 294, column: 1, scope: !608)
!660 = !DILocalVariable(name: "file_name", arg: 1, scope: !661, file: !3, line: 268, type: !664)
!661 = distinct !DISubprogram(name: "robust_getcwd", scope: !3, file: !3, line: 268, type: !662, scopeLine: 269, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !670, retainedNodes: !4)
!662 = !DISubroutineType(types: !663)
!663 = !{null, !664}
!664 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !665, size: 64)
!665 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "file_name", file: !3, line: 34, size: 192, elements: !666)
!666 = !{!667, !668, !669}
!667 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !665, file: !3, line: 36, baseType: !7, size: 64)
!668 = !DIDerivedType(tag: DW_TAG_member, name: "n_alloc", scope: !665, file: !3, line: 37, baseType: !74, size: 64, offset: 64)
!669 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !665, file: !3, line: 38, baseType: !7, size: 64, offset: 128)
!670 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !671, nameTableKind: None)
!671 = !{!672}
!672 = !DIGlobalVariableExpression(var: !673, expr: !DIExpression())
!673 = distinct !DIGlobalVariable(name: "longopts", scope: !670, file: !3, line: 41, type: !674, isLocal: true, isDefinition: true)
!674 = !DICompositeType(tag: DW_TAG_array_type, baseType: !675, size: 1280, elements: !23)
!675 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !676)
!676 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !677)
!677 = !{!678, !679, !680, !681}
!678 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !676, file: !13, line: 52, baseType: !16, size: 64)
!679 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !676, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!680 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !676, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!681 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !676, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!682 = !DILocalVariable(name: "height", scope: !661, file: !3, line: 270, type: !74)
!683 = !DILocalVariable(name: "dev_ino_buf", scope: !661, file: !3, line: 271, type: !684)
!684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dev_ino", file: !617, line: 7, size: 128, elements: !685)
!685 = !{!686, !687}
!686 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !684, file: !617, line: 9, baseType: !620, size: 64)
!687 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !684, file: !617, line: 10, baseType: !623, size: 64, offset: 64)
!688 = !DILocalVariable(name: "root_dev_ino", scope: !661, file: !3, line: 272, type: !689)
!689 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !684, size: 64)
!690 = !DILocalVariable(name: "dot_sb", scope: !661, file: !3, line: 273, type: !691)
!691 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !429, line: 46, size: 1152, elements: !692)
!692 = !{!693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !709, !710, !711}
!693 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !691, file: !429, line: 48, baseType: !432, size: 64)
!694 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !691, file: !429, line: 53, baseType: !435, size: 64, offset: 64)
!695 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !691, file: !429, line: 61, baseType: !437, size: 64, offset: 128)
!696 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !691, file: !429, line: 62, baseType: !439, size: 32, offset: 192)
!697 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !691, file: !429, line: 64, baseType: !441, size: 32, offset: 224)
!698 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !691, file: !429, line: 65, baseType: !443, size: 32, offset: 256)
!699 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !691, file: !429, line: 67, baseType: !19, size: 32, offset: 288)
!700 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !691, file: !429, line: 69, baseType: !432, size: 64, offset: 320)
!701 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !691, file: !429, line: 74, baseType: !447, size: 64, offset: 384)
!702 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !691, file: !429, line: 78, baseType: !450, size: 64, offset: 448)
!703 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !691, file: !429, line: 80, baseType: !452, size: 64, offset: 512)
!704 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !691, file: !429, line: 91, baseType: !705, size: 128, offset: 576)
!705 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !455, line: 10, size: 128, elements: !706)
!706 = !{!707, !708}
!707 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !705, file: !455, line: 12, baseType: !458, size: 64)
!708 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !705, file: !455, line: 16, baseType: !460, size: 64, offset: 64)
!709 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !691, file: !429, line: 92, baseType: !705, size: 128, offset: 704)
!710 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !691, file: !429, line: 93, baseType: !705, size: 128, offset: 832)
!711 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !691, file: !429, line: 106, baseType: !464, size: 192, offset: 960)
!712 = distinct !DISubprogram(name: "file_name_free", scope: !3, file: !3, line: 78, type: !609, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!713 = !DILocalVariable(name: "p", arg: 1, scope: !712, file: !3, line: 78, type: !390)
!714 = !DILocation(line: 78, column: 35, scope: !712)
!715 = !DILocation(line: 80, column: 9, scope: !712)
!716 = !DILocation(line: 80, column: 12, scope: !712)
!717 = !DILocation(line: 80, column: 3, scope: !712)
!718 = !DILocation(line: 81, column: 9, scope: !712)
!719 = !DILocation(line: 81, column: 3, scope: !712)
!720 = !DILocation(line: 82, column: 1, scope: !712)
!721 = !DILocalVariable(name: "p", arg: 1, scope: !722, file: !3, line: 78, type: !725)
!722 = distinct !DISubprogram(name: "file_name_free", scope: !3, file: !3, line: 78, type: !723, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !731, retainedNodes: !4)
!723 = !DISubroutineType(types: !724)
!724 = !{null, !725}
!725 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !726, size: 64)
!726 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "file_name", file: !3, line: 34, size: 192, elements: !727)
!727 = !{!728, !729, !730}
!728 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !726, file: !3, line: 36, baseType: !7, size: 64)
!729 = !DIDerivedType(tag: DW_TAG_member, name: "n_alloc", scope: !726, file: !3, line: 37, baseType: !74, size: 64, offset: 64)
!730 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !726, file: !3, line: 38, baseType: !7, size: 64, offset: 128)
!731 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !732, nameTableKind: None)
!732 = !{!733}
!733 = !DIGlobalVariableExpression(var: !734, expr: !DIExpression())
!734 = distinct !DIGlobalVariable(name: "longopts", scope: !731, file: !3, line: 41, type: !735, isLocal: true, isDefinition: true)
!735 = !DICompositeType(tag: DW_TAG_array_type, baseType: !736, size: 1280, elements: !23)
!736 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !737)
!737 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !738)
!738 = !{!739, !740, !741, !742}
!739 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !737, file: !13, line: 52, baseType: !16, size: 64)
!740 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !737, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!741 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !737, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!742 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !737, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!743 = distinct !DISubprogram(name: "find_dir_entry", scope: !3, file: !3, line: 153, type: !744, scopeLine: 155, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!744 = !DISubroutineType(types: !745)
!745 = !{null, !746, !390, !74}
!746 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !428, size: 64)
!747 = !DILocalVariable(name: "dot_sb", arg: 1, scope: !743, file: !3, line: 153, type: !746)
!748 = !DILocation(line: 153, column: 30, scope: !743)
!749 = !DILocalVariable(name: "file_name", arg: 2, scope: !743, file: !3, line: 153, type: !390)
!750 = !DILocation(line: 153, column: 56, scope: !743)
!751 = !DILocalVariable(name: "parent_height", arg: 3, scope: !743, file: !3, line: 154, type: !74)
!752 = !DILocation(line: 154, column: 24, scope: !743)
!753 = !DILocalVariable(name: "dirp", scope: !743, file: !3, line: 156, type: !754)
!754 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !755, size: 64)
!755 = !DIDerivedType(tag: DW_TAG_typedef, name: "DIR", file: !756, line: 127, baseType: !757)
!756 = !DIFile(filename: "/usr/include/dirent.h", directory: "")
!757 = !DICompositeType(tag: DW_TAG_structure_type, name: "__dirstream", file: !756, line: 127, flags: DIFlagFwdDecl)
!758 = !DILocation(line: 156, column: 8, scope: !743)
!759 = !DILocalVariable(name: "fd", scope: !743, file: !3, line: 157, type: !19)
!760 = !DILocation(line: 157, column: 7, scope: !743)
!761 = !DILocalVariable(name: "parent_sb", scope: !743, file: !3, line: 158, type: !428)
!762 = !DILocation(line: 158, column: 15, scope: !743)
!763 = !DILocalVariable(name: "use_lstat", scope: !743, file: !3, line: 159, type: !38)
!764 = !DILocation(line: 159, column: 8, scope: !743)
!765 = !DILocalVariable(name: "found", scope: !743, file: !3, line: 160, type: !38)
!766 = !DILocation(line: 160, column: 8, scope: !743)
!767 = !DILocation(line: 162, column: 10, scope: !743)
!768 = !DILocation(line: 162, column: 8, scope: !743)
!769 = !DILocation(line: 163, column: 7, scope: !770)
!770 = distinct !DILexicalBlock(scope: !743, file: !3, line: 163, column: 7)
!771 = !DILocation(line: 163, column: 12, scope: !770)
!772 = !DILocation(line: 163, column: 7, scope: !743)
!773 = !DILocation(line: 164, column: 5, scope: !770)
!774 = !DILocation(line: 167, column: 15, scope: !743)
!775 = !DILocation(line: 167, column: 8, scope: !743)
!776 = !DILocation(line: 167, column: 6, scope: !743)
!777 = !DILocation(line: 168, column: 13, scope: !778)
!778 = distinct !DILexicalBlock(scope: !743, file: !3, line: 168, column: 7)
!779 = !DILocation(line: 168, column: 10, scope: !778)
!780 = !DILocation(line: 168, column: 8, scope: !778)
!781 = !DILocation(line: 168, column: 26, scope: !778)
!782 = !DILocation(line: 168, column: 18, scope: !778)
!783 = !DILocation(line: 168, column: 32, scope: !778)
!784 = !DILocation(line: 168, column: 46, scope: !778)
!785 = !DILocation(line: 168, column: 7, scope: !743)
!786 = !DILocation(line: 169, column: 5, scope: !778)
!787 = !DILocation(line: 172, column: 13, scope: !788)
!788 = distinct !DILexicalBlock(scope: !743, file: !3, line: 172, column: 7)
!789 = !DILocation(line: 172, column: 10, scope: !788)
!790 = !DILocation(line: 172, column: 8, scope: !788)
!791 = !DILocation(line: 172, column: 25, scope: !788)
!792 = !DILocation(line: 172, column: 18, scope: !788)
!793 = !DILocation(line: 172, column: 43, scope: !788)
!794 = !DILocation(line: 172, column: 67, scope: !788)
!795 = !DILocation(line: 172, column: 7, scope: !743)
!796 = !DILocation(line: 173, column: 5, scope: !788)
!797 = !DILocation(line: 178, column: 26, scope: !743)
!798 = !DILocation(line: 178, column: 36, scope: !743)
!799 = !DILocation(line: 178, column: 44, scope: !743)
!800 = !DILocation(line: 178, column: 33, scope: !743)
!801 = !DILocation(line: 178, column: 13, scope: !743)
!802 = !DILocation(line: 180, column: 9, scope: !743)
!803 = !DILocation(line: 181, column: 3, scope: !743)
!804 = !DILocalVariable(name: "dp", scope: !805, file: !3, line: 183, type: !806)
!805 = distinct !DILexicalBlock(scope: !743, file: !3, line: 182, column: 5)
!806 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !807, size: 64)
!807 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !808)
!808 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dirent", file: !809, line: 22, size: 2240, elements: !810)
!809 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/dirent.h", directory: "")
!810 = !{!811, !812, !813, !814, !815}
!811 = !DIDerivedType(tag: DW_TAG_member, name: "d_ino", scope: !808, file: !809, line: 25, baseType: !435, size: 64)
!812 = !DIDerivedType(tag: DW_TAG_member, name: "d_off", scope: !808, file: !809, line: 26, baseType: !447, size: 64, offset: 64)
!813 = !DIDerivedType(tag: DW_TAG_member, name: "d_reclen", scope: !808, file: !809, line: 31, baseType: !73, size: 16, offset: 128)
!814 = !DIDerivedType(tag: DW_TAG_member, name: "d_type", scope: !808, file: !809, line: 32, baseType: !148, size: 8, offset: 144)
!815 = !DIDerivedType(tag: DW_TAG_member, name: "d_name", scope: !808, file: !809, line: 33, baseType: !105, size: 2048, offset: 152)
!816 = !DILocation(line: 183, column: 28, scope: !805)
!817 = !DILocalVariable(name: "ent_sb", scope: !805, file: !3, line: 184, type: !428)
!818 = !DILocation(line: 184, column: 19, scope: !805)
!819 = !DILocalVariable(name: "ino", scope: !805, file: !3, line: 185, type: !620)
!820 = !DILocation(line: 185, column: 13, scope: !805)
!821 = !DILocation(line: 187, column: 7, scope: !805)
!822 = !DILocation(line: 187, column: 13, scope: !805)
!823 = !DILocation(line: 188, column: 50, scope: !824)
!824 = distinct !DILexicalBlock(scope: !805, file: !3, line: 188, column: 11)
!825 = !DILocation(line: 188, column: 17, scope: !824)
!826 = !DILocation(line: 188, column: 15, scope: !824)
!827 = !DILocation(line: 188, column: 57, scope: !824)
!828 = !DILocation(line: 188, column: 11, scope: !805)
!829 = !DILocation(line: 190, column: 15, scope: !830)
!830 = distinct !DILexicalBlock(scope: !831, file: !3, line: 190, column: 15)
!831 = distinct !DILexicalBlock(scope: !824, file: !3, line: 189, column: 9)
!832 = !DILocation(line: 190, column: 15, scope: !831)
!833 = !DILocalVariable(name: "e", scope: !834, file: !3, line: 193, type: !19)
!834 = distinct !DILexicalBlock(scope: !830, file: !3, line: 191, column: 13)
!835 = !DILocation(line: 193, column: 19, scope: !834)
!836 = !DILocation(line: 193, column: 23, scope: !834)
!837 = !DILocation(line: 194, column: 25, scope: !834)
!838 = !DILocation(line: 194, column: 15, scope: !834)
!839 = !DILocation(line: 195, column: 23, scope: !834)
!840 = !DILocation(line: 195, column: 15, scope: !834)
!841 = !DILocation(line: 195, column: 21, scope: !834)
!842 = !DILocation(line: 198, column: 20, scope: !834)
!843 = !DILocation(line: 199, column: 13, scope: !834)
!844 = !DILocation(line: 200, column: 11, scope: !831)
!845 = !DILocation(line: 203, column: 13, scope: !805)
!846 = !DILocation(line: 203, column: 11, scope: !805)
!847 = !DILocation(line: 205, column: 11, scope: !848)
!848 = distinct !DILexicalBlock(scope: !805, file: !3, line: 205, column: 11)
!849 = !DILocation(line: 205, column: 15, scope: !848)
!850 = !DILocation(line: 205, column: 38, scope: !848)
!851 = !DILocation(line: 205, column: 41, scope: !848)
!852 = !DILocation(line: 205, column: 11, scope: !805)
!853 = !DILocation(line: 207, column: 22, scope: !854)
!854 = distinct !DILexicalBlock(scope: !855, file: !3, line: 207, column: 15)
!855 = distinct !DILexicalBlock(scope: !848, file: !3, line: 206, column: 9)
!856 = !DILocation(line: 207, column: 26, scope: !854)
!857 = !DILocation(line: 207, column: 15, scope: !854)
!858 = !DILocation(line: 207, column: 43, scope: !854)
!859 = !DILocation(line: 207, column: 15, scope: !855)
!860 = !DILocation(line: 210, column: 15, scope: !861)
!861 = distinct !DILexicalBlock(scope: !854, file: !3, line: 208, column: 13)
!862 = distinct !{!862, !803, !863}
!863 = !DILocation(line: 226, column: 5, scope: !743)
!864 = !DILocation(line: 212, column: 24, scope: !855)
!865 = !DILocation(line: 212, column: 15, scope: !855)
!866 = !DILocation(line: 213, column: 9, scope: !855)
!867 = !DILocation(line: 215, column: 11, scope: !868)
!868 = distinct !DILexicalBlock(scope: !805, file: !3, line: 215, column: 11)
!869 = !DILocation(line: 215, column: 18, scope: !868)
!870 = !DILocation(line: 215, column: 26, scope: !868)
!871 = !DILocation(line: 215, column: 15, scope: !868)
!872 = !DILocation(line: 215, column: 11, scope: !805)
!873 = !DILocation(line: 216, column: 9, scope: !868)
!874 = !DILocation(line: 220, column: 14, scope: !875)
!875 = distinct !DILexicalBlock(scope: !805, file: !3, line: 220, column: 12)
!876 = !DILocation(line: 220, column: 24, scope: !875)
!877 = !DILocation(line: 220, column: 34, scope: !875)
!878 = !DILocation(line: 220, column: 44, scope: !875)
!879 = !DILocation(line: 220, column: 52, scope: !875)
!880 = !DILocation(line: 220, column: 41, scope: !875)
!881 = !DILocation(line: 220, column: 12, scope: !805)
!882 = !DILocation(line: 222, column: 30, scope: !883)
!883 = distinct !DILexicalBlock(scope: !875, file: !3, line: 221, column: 9)
!884 = !DILocation(line: 222, column: 41, scope: !883)
!885 = !DILocation(line: 222, column: 45, scope: !883)
!886 = !DILocation(line: 222, column: 53, scope: !883)
!887 = !DILocation(line: 222, column: 11, scope: !883)
!888 = !DILocation(line: 223, column: 17, scope: !883)
!889 = !DILocation(line: 224, column: 11, scope: !883)
!890 = !DILocation(line: 228, column: 7, scope: !891)
!891 = distinct !DILexicalBlock(scope: !743, file: !3, line: 228, column: 7)
!892 = !DILocation(line: 228, column: 12, scope: !891)
!893 = !DILocation(line: 228, column: 20, scope: !891)
!894 = !DILocation(line: 228, column: 33, scope: !891)
!895 = !DILocation(line: 228, column: 23, scope: !891)
!896 = !DILocation(line: 228, column: 39, scope: !891)
!897 = !DILocation(line: 228, column: 7, scope: !743)
!898 = !DILocation(line: 232, column: 7, scope: !899)
!899 = distinct !DILexicalBlock(scope: !891, file: !3, line: 229, column: 5)
!900 = !DILocation(line: 236, column: 10, scope: !901)
!901 = distinct !DILexicalBlock(scope: !743, file: !3, line: 236, column: 8)
!902 = !DILocation(line: 236, column: 8, scope: !743)
!903 = !DILocation(line: 237, column: 5, scope: !901)
!904 = !DILocation(line: 241, column: 4, scope: !743)
!905 = !DILocation(line: 241, column: 13, scope: !743)
!906 = !DILocation(line: 242, column: 1, scope: !743)
!907 = !DILocalVariable(name: "dot_sb", arg: 1, scope: !908, file: !3, line: 153, type: !911)
!908 = distinct !DISubprogram(name: "find_dir_entry", scope: !3, file: !3, line: 153, type: !909, scopeLine: 155, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !939, retainedNodes: !4)
!909 = !DISubroutineType(types: !910)
!910 = !{null, !911, !933, !74}
!911 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !912, size: 64)
!912 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !429, line: 46, size: 1152, elements: !913)
!913 = !{!914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !930, !931, !932}
!914 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !912, file: !429, line: 48, baseType: !432, size: 64)
!915 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !912, file: !429, line: 53, baseType: !435, size: 64, offset: 64)
!916 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !912, file: !429, line: 61, baseType: !437, size: 64, offset: 128)
!917 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !912, file: !429, line: 62, baseType: !439, size: 32, offset: 192)
!918 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !912, file: !429, line: 64, baseType: !441, size: 32, offset: 224)
!919 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !912, file: !429, line: 65, baseType: !443, size: 32, offset: 256)
!920 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !912, file: !429, line: 67, baseType: !19, size: 32, offset: 288)
!921 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !912, file: !429, line: 69, baseType: !432, size: 64, offset: 320)
!922 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !912, file: !429, line: 74, baseType: !447, size: 64, offset: 384)
!923 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !912, file: !429, line: 78, baseType: !450, size: 64, offset: 448)
!924 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !912, file: !429, line: 80, baseType: !452, size: 64, offset: 512)
!925 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !912, file: !429, line: 91, baseType: !926, size: 128, offset: 576)
!926 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !455, line: 10, size: 128, elements: !927)
!927 = !{!928, !929}
!928 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !926, file: !455, line: 12, baseType: !458, size: 64)
!929 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !926, file: !455, line: 16, baseType: !460, size: 64, offset: 64)
!930 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !912, file: !429, line: 92, baseType: !926, size: 128, offset: 704)
!931 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !912, file: !429, line: 93, baseType: !926, size: 128, offset: 832)
!932 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !912, file: !429, line: 106, baseType: !464, size: 192, offset: 960)
!933 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !934, size: 64)
!934 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "file_name", file: !3, line: 34, size: 192, elements: !935)
!935 = !{!936, !937, !938}
!936 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !934, file: !3, line: 36, baseType: !7, size: 64)
!937 = !DIDerivedType(tag: DW_TAG_member, name: "n_alloc", scope: !934, file: !3, line: 37, baseType: !74, size: 64, offset: 64)
!938 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !934, file: !3, line: 38, baseType: !7, size: 64, offset: 128)
!939 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !940, nameTableKind: None)
!940 = !{!941}
!941 = !DIGlobalVariableExpression(var: !942, expr: !DIExpression())
!942 = distinct !DIGlobalVariable(name: "longopts", scope: !939, file: !3, line: 41, type: !943, isLocal: true, isDefinition: true)
!943 = !DICompositeType(tag: DW_TAG_array_type, baseType: !944, size: 1280, elements: !23)
!944 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !945)
!945 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !946)
!946 = !{!947, !948, !949, !950}
!947 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !945, file: !13, line: 52, baseType: !16, size: 64)
!948 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !945, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!949 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !945, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!950 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !945, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!951 = !DILocalVariable(name: "file_name", arg: 2, scope: !908, file: !3, line: 153, type: !933)
!952 = !DILocalVariable(name: "parent_height", arg: 3, scope: !908, file: !3, line: 154, type: !74)
!953 = !DILocalVariable(name: "dirp", scope: !908, file: !3, line: 156, type: !754)
!954 = !DILocalVariable(name: "fd", scope: !908, file: !3, line: 157, type: !19)
!955 = !DILocalVariable(name: "parent_sb", scope: !908, file: !3, line: 158, type: !912)
!956 = !DILocalVariable(name: "use_lstat", scope: !908, file: !3, line: 159, type: !38)
!957 = !DILocalVariable(name: "found", scope: !908, file: !3, line: 160, type: !38)
!958 = distinct !DISubprogram(name: "file_name_prepend", scope: !3, file: !3, line: 101, type: !959, scopeLine: 102, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!959 = !DISubroutineType(types: !960)
!960 = !{null, !390, !16, !74}
!961 = !DILocalVariable(name: "p", arg: 1, scope: !958, file: !3, line: 101, type: !390)
!962 = !DILocation(line: 101, column: 38, scope: !958)
!963 = !DILocalVariable(name: "s", arg: 2, scope: !958, file: !3, line: 101, type: !16)
!964 = !DILocation(line: 101, column: 53, scope: !958)
!965 = !DILocalVariable(name: "s_len", arg: 3, scope: !958, file: !3, line: 101, type: !74)
!966 = !DILocation(line: 101, column: 63, scope: !958)
!967 = !DILocalVariable(name: "n_free", scope: !958, file: !3, line: 103, type: !74)
!968 = !DILocation(line: 103, column: 10, scope: !958)
!969 = !DILocation(line: 103, column: 19, scope: !958)
!970 = !DILocation(line: 103, column: 22, scope: !958)
!971 = !DILocation(line: 103, column: 30, scope: !958)
!972 = !DILocation(line: 103, column: 33, scope: !958)
!973 = !DILocation(line: 103, column: 28, scope: !958)
!974 = !DILocation(line: 104, column: 7, scope: !975)
!975 = distinct !DILexicalBlock(scope: !958, file: !3, line: 104, column: 7)
!976 = !DILocation(line: 104, column: 20, scope: !975)
!977 = !DILocation(line: 104, column: 18, scope: !975)
!978 = !DILocation(line: 104, column: 14, scope: !975)
!979 = !DILocation(line: 104, column: 7, scope: !958)
!980 = !DILocalVariable(name: "half", scope: !981, file: !3, line: 106, type: !74)
!981 = distinct !DILexicalBlock(scope: !975, file: !3, line: 105, column: 5)
!982 = !DILocation(line: 106, column: 14, scope: !981)
!983 = !DILocation(line: 106, column: 21, scope: !981)
!984 = !DILocation(line: 106, column: 24, scope: !981)
!985 = !DILocation(line: 106, column: 32, scope: !981)
!986 = !DILocation(line: 106, column: 38, scope: !981)
!987 = !DILocation(line: 106, column: 36, scope: !981)
!988 = !DILocalVariable(name: "q", scope: !981, file: !3, line: 111, type: !7)
!989 = !DILocation(line: 111, column: 13, scope: !981)
!990 = !DILocation(line: 111, column: 30, scope: !981)
!991 = !DILocation(line: 111, column: 17, scope: !981)
!992 = !DILocalVariable(name: "n_used", scope: !981, file: !3, line: 112, type: !74)
!993 = !DILocation(line: 112, column: 14, scope: !981)
!994 = !DILocation(line: 112, column: 23, scope: !981)
!995 = !DILocation(line: 112, column: 26, scope: !981)
!996 = !DILocation(line: 112, column: 36, scope: !981)
!997 = !DILocation(line: 112, column: 34, scope: !981)
!998 = !DILocation(line: 113, column: 18, scope: !981)
!999 = !DILocation(line: 113, column: 26, scope: !981)
!1000 = !DILocation(line: 113, column: 24, scope: !981)
!1001 = !DILocation(line: 113, column: 20, scope: !981)
!1002 = !DILocation(line: 113, column: 33, scope: !981)
!1003 = !DILocation(line: 113, column: 31, scope: !981)
!1004 = !DILocation(line: 113, column: 7, scope: !981)
!1005 = !DILocation(line: 113, column: 10, scope: !981)
!1006 = !DILocation(line: 113, column: 16, scope: !981)
!1007 = !DILocation(line: 114, column: 15, scope: !981)
!1008 = !DILocation(line: 114, column: 18, scope: !981)
!1009 = !DILocation(line: 114, column: 25, scope: !981)
!1010 = !DILocation(line: 114, column: 28, scope: !981)
!1011 = !DILocation(line: 114, column: 34, scope: !981)
!1012 = !DILocation(line: 114, column: 32, scope: !981)
!1013 = !DILocation(line: 114, column: 42, scope: !981)
!1014 = !DILocation(line: 114, column: 7, scope: !981)
!1015 = !DILocation(line: 115, column: 13, scope: !981)
!1016 = !DILocation(line: 115, column: 16, scope: !981)
!1017 = !DILocation(line: 115, column: 7, scope: !981)
!1018 = !DILocation(line: 116, column: 16, scope: !981)
!1019 = !DILocation(line: 116, column: 7, scope: !981)
!1020 = !DILocation(line: 116, column: 10, scope: !981)
!1021 = !DILocation(line: 116, column: 14, scope: !981)
!1022 = !DILocation(line: 117, column: 24, scope: !981)
!1023 = !DILocation(line: 117, column: 22, scope: !981)
!1024 = !DILocation(line: 117, column: 7, scope: !981)
!1025 = !DILocation(line: 117, column: 10, scope: !981)
!1026 = !DILocation(line: 117, column: 18, scope: !981)
!1027 = !DILocation(line: 118, column: 5, scope: !981)
!1028 = !DILocation(line: 120, column: 19, scope: !958)
!1029 = !DILocation(line: 120, column: 17, scope: !958)
!1030 = !DILocation(line: 120, column: 3, scope: !958)
!1031 = !DILocation(line: 120, column: 6, scope: !958)
!1032 = !DILocation(line: 120, column: 12, scope: !958)
!1033 = !DILocation(line: 121, column: 3, scope: !958)
!1034 = !DILocation(line: 121, column: 6, scope: !958)
!1035 = !DILocation(line: 121, column: 15, scope: !958)
!1036 = !DILocation(line: 122, column: 11, scope: !958)
!1037 = !DILocation(line: 122, column: 14, scope: !958)
!1038 = !DILocation(line: 122, column: 20, scope: !958)
!1039 = !DILocation(line: 122, column: 25, scope: !958)
!1040 = !DILocation(line: 122, column: 28, scope: !958)
!1041 = !DILocation(line: 122, column: 3, scope: !958)
!1042 = !DILocation(line: 123, column: 1, scope: !958)
!1043 = !DILocalVariable(name: "p", arg: 1, scope: !1044, file: !3, line: 101, type: !1047)
!1044 = distinct !DISubprogram(name: "file_name_prepend", scope: !3, file: !3, line: 101, type: !1045, scopeLine: 102, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1053, retainedNodes: !4)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{null, !1047, !16, !74}
!1047 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1048, size: 64)
!1048 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "file_name", file: !3, line: 34, size: 192, elements: !1049)
!1049 = !{!1050, !1051, !1052}
!1050 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !1048, file: !3, line: 36, baseType: !7, size: 64)
!1051 = !DIDerivedType(tag: DW_TAG_member, name: "n_alloc", scope: !1048, file: !3, line: 37, baseType: !74, size: 64, offset: 64)
!1052 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !1048, file: !3, line: 38, baseType: !7, size: 64, offset: 128)
!1053 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !1054, nameTableKind: None)
!1054 = !{!1055}
!1055 = !DIGlobalVariableExpression(var: !1056, expr: !DIExpression())
!1056 = distinct !DIGlobalVariable(name: "longopts", scope: !1053, file: !3, line: 41, type: !1057, isLocal: true, isDefinition: true)
!1057 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1058, size: 1280, elements: !23)
!1058 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1059)
!1059 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !1060)
!1060 = !{!1061, !1062, !1063, !1064}
!1061 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1059, file: !13, line: 52, baseType: !16, size: 64)
!1062 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !1059, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!1063 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1059, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!1064 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1059, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!1065 = !DILocalVariable(name: "s", arg: 2, scope: !1044, file: !3, line: 101, type: !16)
!1066 = !DILocalVariable(name: "s_len", arg: 3, scope: !1044, file: !3, line: 101, type: !74)
!1067 = !DILocalVariable(name: "n_free", scope: !1044, file: !3, line: 103, type: !74)
!1068 = !DILocalVariable(name: "q", scope: !1069, file: !3, line: 111, type: !7)
!1069 = distinct !DILexicalBlock(scope: !1070, file: !3, line: 105, column: 5)
!1070 = distinct !DILexicalBlock(scope: !1071, file: !3, line: 104, column: 7)
!1071 = distinct !DISubprogram(name: "file_name_prepend", scope: !3, file: !3, line: 101, type: !1072, scopeLine: 102, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1080, retainedNodes: !4)
!1072 = !DISubroutineType(types: !1073)
!1073 = !{null, !1074, !16, !74}
!1074 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1075, size: 64)
!1075 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "file_name", file: !3, line: 34, size: 192, elements: !1076)
!1076 = !{!1077, !1078, !1079}
!1077 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !1075, file: !3, line: 36, baseType: !7, size: 64)
!1078 = !DIDerivedType(tag: DW_TAG_member, name: "n_alloc", scope: !1075, file: !3, line: 37, baseType: !74, size: 64, offset: 64)
!1079 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !1075, file: !3, line: 38, baseType: !7, size: 64, offset: 128)
!1080 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !1081, nameTableKind: None)
!1081 = !{!1082}
!1082 = !DIGlobalVariableExpression(var: !1083, expr: !DIExpression())
!1083 = distinct !DIGlobalVariable(name: "longopts", scope: !1080, file: !3, line: 41, type: !1084, isLocal: true, isDefinition: true)
!1084 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1085, size: 1280, elements: !23)
!1085 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1086)
!1086 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !1087)
!1087 = !{!1088, !1089, !1090, !1091}
!1088 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1086, file: !13, line: 52, baseType: !16, size: 64)
!1089 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !1086, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!1090 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1086, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!1091 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1086, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!1092 = !DILocalVariable(name: "n_used", scope: !1069, file: !3, line: 112, type: !74)
!1093 = distinct !DISubprogram(name: "nth_parent", scope: !3, file: !3, line: 127, type: !1094, scopeLine: 128, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!1094 = !DISubroutineType(types: !1095)
!1095 = !{!7, !74}
!1096 = !DILocalVariable(name: "n", arg: 1, scope: !1093, file: !3, line: 127, type: !74)
!1097 = !DILocation(line: 127, column: 20, scope: !1093)
!1098 = !DILocalVariable(name: "buf", scope: !1093, file: !3, line: 129, type: !7)
!1099 = !DILocation(line: 129, column: 9, scope: !1093)
!1100 = !DILocation(line: 129, column: 28, scope: !1093)
!1101 = !DILocation(line: 129, column: 15, scope: !1093)
!1102 = !DILocalVariable(name: "p", scope: !1093, file: !3, line: 130, type: !7)
!1103 = !DILocation(line: 130, column: 9, scope: !1093)
!1104 = !DILocation(line: 130, column: 13, scope: !1093)
!1105 = !DILocalVariable(name: "i", scope: !1106, file: !3, line: 132, type: !74)
!1106 = distinct !DILexicalBlock(scope: !1093, file: !3, line: 132, column: 3)
!1107 = !DILocation(line: 132, column: 15, scope: !1106)
!1108 = !DILocation(line: 132, column: 8, scope: !1106)
!1109 = !DILocation(line: 132, column: 22, scope: !1110)
!1110 = distinct !DILexicalBlock(scope: !1106, file: !3, line: 132, column: 3)
!1111 = !DILocation(line: 132, column: 26, scope: !1110)
!1112 = !DILocation(line: 132, column: 24, scope: !1110)
!1113 = !DILocation(line: 132, column: 3, scope: !1106)
!1114 = !DILocation(line: 134, column: 15, scope: !1115)
!1115 = distinct !DILexicalBlock(scope: !1110, file: !3, line: 133, column: 5)
!1116 = !DILocation(line: 134, column: 7, scope: !1115)
!1117 = !DILocation(line: 135, column: 9, scope: !1115)
!1118 = !DILocation(line: 136, column: 5, scope: !1115)
!1119 = !DILocation(line: 132, column: 30, scope: !1110)
!1120 = !DILocation(line: 132, column: 3, scope: !1110)
!1121 = distinct !{!1121, !1113, !1122}
!1122 = !DILocation(line: 136, column: 5, scope: !1106)
!1123 = !DILocation(line: 137, column: 3, scope: !1093)
!1124 = !DILocation(line: 137, column: 9, scope: !1093)
!1125 = !DILocation(line: 138, column: 10, scope: !1093)
!1126 = !DILocation(line: 138, column: 3, scope: !1093)
!1127 = !DILocalVariable(name: "n", arg: 1, scope: !1128, file: !3, line: 127, type: !74)
!1128 = distinct !DISubprogram(name: "nth_parent", scope: !3, file: !3, line: 127, type: !1094, scopeLine: 128, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1129, retainedNodes: !4)
!1129 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !1130, nameTableKind: None)
!1130 = !{!1131}
!1131 = !DIGlobalVariableExpression(var: !1132, expr: !DIExpression())
!1132 = distinct !DIGlobalVariable(name: "longopts", scope: !1129, file: !3, line: 41, type: !1133, isLocal: true, isDefinition: true)
!1133 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1134, size: 1280, elements: !23)
!1134 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1135)
!1135 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !1136)
!1136 = !{!1137, !1138, !1139, !1140}
!1137 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1135, file: !13, line: 52, baseType: !16, size: 64)
!1138 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !1135, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!1139 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1135, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!1140 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1135, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!1141 = !DILocalVariable(name: "buf", scope: !1128, file: !3, line: 129, type: !7)
!1142 = !DILocalVariable(name: "p", scope: !1128, file: !3, line: 130, type: !7)
!1143 = !DILocalVariable(name: "i", scope: !1144, file: !3, line: 132, type: !74)
!1144 = distinct !DILexicalBlock(scope: !1128, file: !3, line: 132, column: 3)
!1145 = distinct !DISubprogram(name: "readdir_ignoring_dot_and_dotdot", scope: !212, file: !212, line: 278, type: !1146, scopeLine: 279, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!1146 = !DISubroutineType(types: !1147)
!1147 = !{!806, !754}
!1148 = !DILocalVariable(name: "dirp", arg: 1, scope: !1145, file: !212, line: 278, type: !754)
!1149 = !DILocation(line: 278, column: 39, scope: !1145)
!1150 = !DILocation(line: 280, column: 3, scope: !1145)
!1151 = !DILocalVariable(name: "dp", scope: !1152, file: !212, line: 282, type: !806)
!1152 = distinct !DILexicalBlock(scope: !1145, file: !212, line: 281, column: 5)
!1153 = !DILocation(line: 282, column: 28, scope: !1152)
!1154 = !DILocation(line: 282, column: 42, scope: !1152)
!1155 = !DILocation(line: 282, column: 33, scope: !1152)
!1156 = !DILocation(line: 283, column: 11, scope: !1157)
!1157 = distinct !DILexicalBlock(scope: !1152, file: !212, line: 283, column: 11)
!1158 = !DILocation(line: 283, column: 14, scope: !1157)
!1159 = !DILocation(line: 283, column: 22, scope: !1157)
!1160 = !DILocation(line: 283, column: 42, scope: !1157)
!1161 = !DILocation(line: 283, column: 46, scope: !1157)
!1162 = !DILocation(line: 283, column: 27, scope: !1157)
!1163 = !DILocation(line: 283, column: 11, scope: !1152)
!1164 = !DILocation(line: 284, column: 16, scope: !1157)
!1165 = !DILocation(line: 284, column: 9, scope: !1157)
!1166 = distinct !{!1166, !1150, !1167}
!1167 = !DILocation(line: 285, column: 5, scope: !1145)
!1168 = !DILocalVariable(name: "dirp", arg: 1, scope: !1169, file: !212, line: 278, type: !754)
!1169 = distinct !DISubprogram(name: "readdir_ignoring_dot_and_dotdot", scope: !212, file: !212, line: 278, type: !1170, scopeLine: 279, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1181, retainedNodes: !4)
!1170 = !DISubroutineType(types: !1171)
!1171 = !{!1172, !754}
!1172 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1173, size: 64)
!1173 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1174)
!1174 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dirent", file: !809, line: 22, size: 2240, elements: !1175)
!1175 = !{!1176, !1177, !1178, !1179, !1180}
!1176 = !DIDerivedType(tag: DW_TAG_member, name: "d_ino", scope: !1174, file: !809, line: 25, baseType: !435, size: 64)
!1177 = !DIDerivedType(tag: DW_TAG_member, name: "d_off", scope: !1174, file: !809, line: 26, baseType: !447, size: 64, offset: 64)
!1178 = !DIDerivedType(tag: DW_TAG_member, name: "d_reclen", scope: !1174, file: !809, line: 31, baseType: !73, size: 16, offset: 128)
!1179 = !DIDerivedType(tag: DW_TAG_member, name: "d_type", scope: !1174, file: !809, line: 32, baseType: !148, size: 8, offset: 144)
!1180 = !DIDerivedType(tag: DW_TAG_member, name: "d_name", scope: !1174, file: !809, line: 33, baseType: !105, size: 2048, offset: 152)
!1181 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !1182, nameTableKind: None)
!1182 = !{!1183}
!1183 = !DIGlobalVariableExpression(var: !1184, expr: !DIExpression())
!1184 = distinct !DIGlobalVariable(name: "longopts", scope: !1181, file: !3, line: 41, type: !1185, isLocal: true, isDefinition: true)
!1185 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1186, size: 1280, elements: !23)
!1186 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1187)
!1187 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !1188)
!1188 = !{!1189, !1190, !1191, !1192}
!1189 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1187, file: !13, line: 52, baseType: !16, size: 64)
!1190 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !1187, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!1191 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1187, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!1192 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1187, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!1193 = distinct !DISubprogram(name: "dot_or_dotdot", scope: !212, file: !212, line: 265, type: !1194, scopeLine: 266, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!1194 = !DISubroutineType(types: !1195)
!1195 = !{!38, !16}
!1196 = !DILocalVariable(name: "file_name", arg: 1, scope: !1193, file: !212, line: 265, type: !16)
!1197 = !DILocation(line: 265, column: 28, scope: !1193)
!1198 = !DILocation(line: 267, column: 7, scope: !1199)
!1199 = distinct !DILexicalBlock(scope: !1193, file: !212, line: 267, column: 7)
!1200 = !DILocation(line: 267, column: 20, scope: !1199)
!1201 = !DILocation(line: 267, column: 7, scope: !1193)
!1202 = !DILocalVariable(name: "sep", scope: !1203, file: !212, line: 269, type: !8)
!1203 = distinct !DILexicalBlock(scope: !1199, file: !212, line: 268, column: 5)
!1204 = !DILocation(line: 269, column: 12, scope: !1203)
!1205 = !DILocation(line: 269, column: 18, scope: !1203)
!1206 = !DILocation(line: 269, column: 29, scope: !1203)
!1207 = !DILocation(line: 269, column: 42, scope: !1203)
!1208 = !DILocation(line: 269, column: 50, scope: !1203)
!1209 = !DILocation(line: 270, column: 17, scope: !1203)
!1210 = !DILocation(line: 270, column: 21, scope: !1203)
!1211 = !DILocation(line: 270, column: 24, scope: !1203)
!1212 = !DILocation(line: 270, column: 7, scope: !1203)
!1213 = !DILocation(line: 273, column: 5, scope: !1199)
!1214 = !DILocation(line: 274, column: 1, scope: !1193)
!1215 = !DILocalVariable(name: "file_name", arg: 1, scope: !1216, file: !212, line: 265, type: !16)
!1216 = distinct !DISubprogram(name: "dot_or_dotdot", scope: !212, file: !212, line: 265, type: !1194, scopeLine: 266, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1217, retainedNodes: !4)
!1217 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !1218, nameTableKind: None)
!1218 = !{!1219}
!1219 = !DIGlobalVariableExpression(var: !1220, expr: !DIExpression())
!1220 = distinct !DIGlobalVariable(name: "longopts", scope: !1217, file: !3, line: 41, type: !1221, isLocal: true, isDefinition: true)
!1221 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1222, size: 1280, elements: !23)
!1222 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1223)
!1223 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !1224)
!1224 = !{!1225, !1226, !1227, !1228}
!1225 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1223, file: !13, line: 52, baseType: !16, size: 64)
!1226 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !1223, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!1227 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1223, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!1228 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1223, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!1229 = distinct !DISubprogram(name: "close_stdout", scope: !37, file: !37, line: 117, type: !1230, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !32, retainedNodes: !4)
!1230 = !DISubroutineType(types: !1231)
!1231 = !{null}
!1232 = !DILocation(line: 119, column: 21, scope: !1233)
!1233 = distinct !DILexicalBlock(scope: !1229, file: !37, line: 119, column: 7)
!1234 = !DILocation(line: 119, column: 7, scope: !1233)
!1235 = !DILocation(line: 119, column: 29, scope: !1233)
!1236 = !DILocation(line: 120, column: 7, scope: !1233)
!1237 = !DILocation(line: 120, column: 12, scope: !1233)
!1238 = !DILocation(line: 120, column: 25, scope: !1233)
!1239 = !DILocation(line: 120, column: 28, scope: !1233)
!1240 = !DILocation(line: 120, column: 34, scope: !1233)
!1241 = !DILocation(line: 119, column: 7, scope: !1229)
!1242 = !DILocalVariable(name: "write_error", scope: !1243, file: !37, line: 122, type: !16)
!1243 = distinct !DILexicalBlock(scope: !1233, file: !37, line: 121, column: 5)
!1244 = !DILocation(line: 122, column: 19, scope: !1243)
!1245 = !DILocation(line: 122, column: 33, scope: !1243)
!1246 = !DILocation(line: 123, column: 11, scope: !1247)
!1247 = distinct !DILexicalBlock(scope: !1243, file: !37, line: 123, column: 11)
!1248 = !DILocation(line: 123, column: 11, scope: !1243)
!1249 = !DILocation(line: 124, column: 19, scope: !1247)
!1250 = !DILocation(line: 124, column: 52, scope: !1247)
!1251 = !DILocation(line: 124, column: 36, scope: !1247)
!1252 = !DILocation(line: 125, column: 16, scope: !1247)
!1253 = !DILocation(line: 124, column: 9, scope: !1247)
!1254 = !DILocation(line: 127, column: 19, scope: !1247)
!1255 = !DILocation(line: 127, column: 32, scope: !1247)
!1256 = !DILocation(line: 127, column: 9, scope: !1247)
!1257 = !DILocation(line: 129, column: 14, scope: !1243)
!1258 = !DILocation(line: 129, column: 7, scope: !1243)
!1259 = !DILocation(line: 134, column: 42, scope: !1260)
!1260 = distinct !DILexicalBlock(scope: !1229, file: !37, line: 134, column: 7)
!1261 = !DILocation(line: 134, column: 28, scope: !1260)
!1262 = !DILocation(line: 134, column: 50, scope: !1260)
!1263 = !DILocation(line: 134, column: 7, scope: !1229)
!1264 = !DILocation(line: 135, column: 12, scope: !1260)
!1265 = !DILocation(line: 135, column: 5, scope: !1260)
!1266 = !DILocation(line: 136, column: 1, scope: !1229)
!1267 = distinct !DISubprogram(name: "set_program_name", scope: !51, file: !51, line: 39, type: !213, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !48, retainedNodes: !4)
!1268 = !DILocalVariable(name: "argv0", arg: 1, scope: !1267, file: !51, line: 39, type: !16)
!1269 = !DILocation(line: 39, column: 31, scope: !1267)
!1270 = !DILocalVariable(name: "slash", scope: !1267, file: !51, line: 46, type: !16)
!1271 = !DILocation(line: 46, column: 15, scope: !1267)
!1272 = !DILocalVariable(name: "base", scope: !1267, file: !51, line: 47, type: !16)
!1273 = !DILocation(line: 47, column: 15, scope: !1267)
!1274 = !DILocation(line: 51, column: 7, scope: !1275)
!1275 = distinct !DILexicalBlock(scope: !1267, file: !51, line: 51, column: 7)
!1276 = !DILocation(line: 51, column: 13, scope: !1275)
!1277 = !DILocation(line: 51, column: 7, scope: !1267)
!1278 = !DILocation(line: 55, column: 14, scope: !1279)
!1279 = distinct !DILexicalBlock(scope: !1275, file: !51, line: 52, column: 5)
!1280 = !DILocation(line: 54, column: 7, scope: !1279)
!1281 = !DILocation(line: 56, column: 7, scope: !1279)
!1282 = !DILocation(line: 59, column: 20, scope: !1267)
!1283 = !DILocation(line: 59, column: 11, scope: !1267)
!1284 = !DILocation(line: 59, column: 9, scope: !1267)
!1285 = !DILocation(line: 60, column: 11, scope: !1267)
!1286 = !DILocation(line: 60, column: 17, scope: !1267)
!1287 = !DILocation(line: 60, column: 27, scope: !1267)
!1288 = !DILocation(line: 60, column: 33, scope: !1267)
!1289 = !DILocation(line: 60, column: 39, scope: !1267)
!1290 = !DILocation(line: 60, column: 8, scope: !1267)
!1291 = !DILocation(line: 61, column: 7, scope: !1292)
!1292 = distinct !DILexicalBlock(scope: !1267, file: !51, line: 61, column: 7)
!1293 = !DILocation(line: 61, column: 14, scope: !1292)
!1294 = !DILocation(line: 61, column: 12, scope: !1292)
!1295 = !DILocation(line: 61, column: 20, scope: !1292)
!1296 = !DILocation(line: 61, column: 25, scope: !1292)
!1297 = !DILocation(line: 61, column: 37, scope: !1292)
!1298 = !DILocation(line: 61, column: 42, scope: !1292)
!1299 = !DILocation(line: 61, column: 28, scope: !1292)
!1300 = !DILocation(line: 61, column: 61, scope: !1292)
!1301 = !DILocation(line: 61, column: 7, scope: !1267)
!1302 = !DILocation(line: 63, column: 15, scope: !1303)
!1303 = distinct !DILexicalBlock(scope: !1292, file: !51, line: 62, column: 5)
!1304 = !DILocation(line: 63, column: 13, scope: !1303)
!1305 = !DILocation(line: 64, column: 20, scope: !1306)
!1306 = distinct !DILexicalBlock(scope: !1303, file: !51, line: 64, column: 11)
!1307 = !DILocation(line: 64, column: 11, scope: !1306)
!1308 = !DILocation(line: 64, column: 36, scope: !1306)
!1309 = !DILocation(line: 64, column: 11, scope: !1303)
!1310 = !DILocation(line: 66, column: 19, scope: !1311)
!1311 = distinct !DILexicalBlock(scope: !1306, file: !51, line: 65, column: 9)
!1312 = !DILocation(line: 66, column: 24, scope: !1311)
!1313 = !DILocation(line: 66, column: 17, scope: !1311)
!1314 = !DILocation(line: 70, column: 52, scope: !1311)
!1315 = !DILocation(line: 70, column: 41, scope: !1311)
!1316 = !DILocation(line: 72, column: 9, scope: !1311)
!1317 = !DILocation(line: 73, column: 5, scope: !1303)
!1318 = !DILocation(line: 84, column: 18, scope: !1267)
!1319 = !DILocation(line: 84, column: 16, scope: !1267)
!1320 = !DILocation(line: 90, column: 38, scope: !1267)
!1321 = !DILocation(line: 90, column: 27, scope: !1267)
!1322 = !DILocation(line: 92, column: 1, scope: !1267)
!1323 = !DILocalVariable(name: "argv0", arg: 1, scope: !1324, file: !51, line: 39, type: !16)
!1324 = distinct !DISubprogram(name: "set_program_name", scope: !51, file: !51, line: 39, type: !213, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1325, retainedNodes: !4)
!1325 = distinct !DICompileUnit(language: DW_LANG_C99, file: !49, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !1326, nameTableKind: None)
!1326 = !{!1327}
!1327 = !DIGlobalVariableExpression(var: !1328, expr: !DIExpression())
!1328 = distinct !DIGlobalVariable(name: "program_name", scope: !1325, file: !51, line: 33, type: !16, isLocal: false, isDefinition: true)
!1329 = !DILocalVariable(name: "slash", scope: !1324, file: !51, line: 46, type: !16)
!1330 = !DILocalVariable(name: "base", scope: !1324, file: !51, line: 47, type: !16)
!1331 = distinct !DISubprogram(name: "set_char_quoting", scope: !80, file: !80, line: 152, type: !1332, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !4)
!1332 = !DISubroutineType(types: !1333)
!1333 = !{!19, !1334, !8, !19}
!1334 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !93, size: 64)
!1335 = !DILocalVariable(name: "o", arg: 1, scope: !1331, file: !80, line: 152, type: !1334)
!1336 = !DILocation(line: 152, column: 43, scope: !1331)
!1337 = !DILocalVariable(name: "c", arg: 2, scope: !1331, file: !80, line: 152, type: !8)
!1338 = !DILocation(line: 152, column: 51, scope: !1331)
!1339 = !DILocalVariable(name: "i", arg: 3, scope: !1331, file: !80, line: 152, type: !19)
!1340 = !DILocation(line: 152, column: 58, scope: !1331)
!1341 = !DILocalVariable(name: "uc", scope: !1331, file: !80, line: 154, type: !148)
!1342 = !DILocation(line: 154, column: 17, scope: !1331)
!1343 = !DILocation(line: 154, column: 22, scope: !1331)
!1344 = !DILocalVariable(name: "p", scope: !1331, file: !80, line: 155, type: !1345)
!1345 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !59, size: 64)
!1346 = !DILocation(line: 155, column: 17, scope: !1331)
!1347 = !DILocation(line: 156, column: 6, scope: !1331)
!1348 = !DILocation(line: 156, column: 10, scope: !1331)
!1349 = !DILocation(line: 156, column: 41, scope: !1331)
!1350 = !DILocation(line: 156, column: 5, scope: !1331)
!1351 = !DILocation(line: 156, column: 59, scope: !1331)
!1352 = !DILocation(line: 156, column: 62, scope: !1331)
!1353 = !DILocation(line: 156, column: 57, scope: !1331)
!1354 = !DILocalVariable(name: "shift", scope: !1331, file: !80, line: 157, type: !19)
!1355 = !DILocation(line: 157, column: 7, scope: !1331)
!1356 = !DILocation(line: 157, column: 15, scope: !1331)
!1357 = !DILocation(line: 157, column: 18, scope: !1331)
!1358 = !DILocalVariable(name: "r", scope: !1331, file: !80, line: 158, type: !19)
!1359 = !DILocation(line: 158, column: 7, scope: !1331)
!1360 = !DILocation(line: 158, column: 13, scope: !1331)
!1361 = !DILocation(line: 158, column: 12, scope: !1331)
!1362 = !DILocation(line: 158, column: 18, scope: !1331)
!1363 = !DILocation(line: 158, column: 15, scope: !1331)
!1364 = !DILocation(line: 158, column: 25, scope: !1331)
!1365 = !DILocation(line: 159, column: 11, scope: !1331)
!1366 = !DILocation(line: 159, column: 13, scope: !1331)
!1367 = !DILocation(line: 159, column: 20, scope: !1331)
!1368 = !DILocation(line: 159, column: 18, scope: !1331)
!1369 = !DILocation(line: 159, column: 26, scope: !1331)
!1370 = !DILocation(line: 159, column: 23, scope: !1331)
!1371 = !DILocation(line: 159, column: 4, scope: !1331)
!1372 = !DILocation(line: 159, column: 6, scope: !1331)
!1373 = !DILocation(line: 160, column: 10, scope: !1331)
!1374 = !DILocation(line: 160, column: 3, scope: !1331)
!1375 = !DILocalVariable(name: "o", arg: 1, scope: !1376, file: !80, line: 152, type: !1379)
!1376 = distinct !DISubprogram(name: "set_char_quoting", scope: !80, file: !80, line: 152, type: !1377, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1387, retainedNodes: !4)
!1377 = !DISubroutineType(types: !1378)
!1378 = !{!19, !1379, !8, !19}
!1379 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1380, size: 64)
!1380 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !1381)
!1381 = !{!1382, !1383, !1384, !1385, !1386}
!1382 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1380, file: !80, line: 68, baseType: !57, size: 32)
!1383 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1380, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1380, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!1385 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1380, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1380, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!1387 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !1388, nameTableKind: None)
!1388 = !{!1389, !1391, !1393, !1395, !1397, !1399, !1406, !1408}
!1389 = !DIGlobalVariableExpression(var: !1390, expr: !DIExpression())
!1390 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1387, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!1391 = !DIGlobalVariableExpression(var: !1392, expr: !DIExpression())
!1392 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1387, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!1393 = !DIGlobalVariableExpression(var: !1394, expr: !DIExpression())
!1394 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1387, file: !80, line: 1052, type: !1380, isLocal: false, isDefinition: true)
!1395 = !DIGlobalVariableExpression(var: !1396, expr: !DIExpression())
!1396 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1387, file: !80, line: 116, type: !1380, isLocal: true, isDefinition: true)
!1397 = !DIGlobalVariableExpression(var: !1398, expr: !DIExpression())
!1398 = distinct !DIGlobalVariable(name: "slot0", scope: !1387, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!1399 = !DIGlobalVariableExpression(var: !1400, expr: !DIExpression())
!1400 = distinct !DIGlobalVariable(name: "slotvec", scope: !1387, file: !80, line: 845, type: !1401, isLocal: true, isDefinition: true)
!1401 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1402, size: 64)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !1403)
!1403 = !{!1404, !1405}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1402, file: !80, line: 836, baseType: !74, size: 64)
!1405 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1402, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!1406 = !DIGlobalVariableExpression(var: !1407, expr: !DIExpression())
!1407 = distinct !DIGlobalVariable(name: "nslots", scope: !1387, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!1408 = !DIGlobalVariableExpression(var: !1409, expr: !DIExpression())
!1409 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1387, file: !80, line: 844, type: !1402, isLocal: true, isDefinition: true)
!1410 = !DILocalVariable(name: "c", arg: 2, scope: !1376, file: !80, line: 152, type: !8)
!1411 = !DILocalVariable(name: "i", arg: 3, scope: !1376, file: !80, line: 152, type: !19)
!1412 = !DILocalVariable(name: "uc", scope: !1376, file: !80, line: 154, type: !148)
!1413 = !DILocalVariable(name: "p", scope: !1376, file: !80, line: 155, type: !1345)
!1414 = distinct !DISubprogram(name: "quotearg_n_style", scope: !80, file: !80, line: 955, type: !1415, scopeLine: 956, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !4)
!1415 = !DISubroutineType(types: !1416)
!1416 = !{!7, !19, !57, !16}
!1417 = !DILocalVariable(name: "n", arg: 1, scope: !1414, file: !80, line: 955, type: !19)
!1418 = !DILocation(line: 955, column: 23, scope: !1414)
!1419 = !DILocalVariable(name: "s", arg: 2, scope: !1414, file: !80, line: 955, type: !57)
!1420 = !DILocation(line: 955, column: 45, scope: !1414)
!1421 = !DILocalVariable(name: "arg", arg: 3, scope: !1414, file: !80, line: 955, type: !16)
!1422 = !DILocation(line: 955, column: 60, scope: !1414)
!1423 = !DILocalVariable(name: "o", scope: !1414, file: !80, line: 957, type: !1424)
!1424 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !93)
!1425 = !DILocation(line: 957, column: 32, scope: !1414)
!1426 = !DILocation(line: 957, column: 64, scope: !1414)
!1427 = !DILocation(line: 957, column: 36, scope: !1414)
!1428 = !DILocation(line: 958, column: 30, scope: !1414)
!1429 = !DILocation(line: 958, column: 33, scope: !1414)
!1430 = !DILocation(line: 958, column: 10, scope: !1414)
!1431 = !DILocation(line: 958, column: 3, scope: !1414)
!1432 = !DILocalVariable(name: "n", arg: 1, scope: !1433, file: !80, line: 955, type: !19)
!1433 = distinct !DISubprogram(name: "quotearg_n_style", scope: !80, file: !80, line: 955, type: !1415, scopeLine: 956, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1434, retainedNodes: !4)
!1434 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !1435, nameTableKind: None)
!1435 = !{!1436, !1438, !1440, !1449, !1451, !1453, !1460, !1462}
!1436 = !DIGlobalVariableExpression(var: !1437, expr: !DIExpression())
!1437 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1434, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!1438 = !DIGlobalVariableExpression(var: !1439, expr: !DIExpression())
!1439 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1434, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!1440 = !DIGlobalVariableExpression(var: !1441, expr: !DIExpression())
!1441 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1434, file: !80, line: 1052, type: !1442, isLocal: false, isDefinition: true)
!1442 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !1443)
!1443 = !{!1444, !1445, !1446, !1447, !1448}
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1442, file: !80, line: 68, baseType: !57, size: 32)
!1445 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1442, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1442, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!1447 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1442, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!1448 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1442, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!1449 = !DIGlobalVariableExpression(var: !1450, expr: !DIExpression())
!1450 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1434, file: !80, line: 116, type: !1442, isLocal: true, isDefinition: true)
!1451 = !DIGlobalVariableExpression(var: !1452, expr: !DIExpression())
!1452 = distinct !DIGlobalVariable(name: "slot0", scope: !1434, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!1453 = !DIGlobalVariableExpression(var: !1454, expr: !DIExpression())
!1454 = distinct !DIGlobalVariable(name: "slotvec", scope: !1434, file: !80, line: 845, type: !1455, isLocal: true, isDefinition: true)
!1455 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1456, size: 64)
!1456 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !1457)
!1457 = !{!1458, !1459}
!1458 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1456, file: !80, line: 836, baseType: !74, size: 64)
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1456, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!1460 = !DIGlobalVariableExpression(var: !1461, expr: !DIExpression())
!1461 = distinct !DIGlobalVariable(name: "nslots", scope: !1434, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!1462 = !DIGlobalVariableExpression(var: !1463, expr: !DIExpression())
!1463 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1434, file: !80, line: 844, type: !1456, isLocal: true, isDefinition: true)
!1464 = !DILocalVariable(name: "s", arg: 2, scope: !1433, file: !80, line: 955, type: !57)
!1465 = !DILocalVariable(name: "arg", arg: 3, scope: !1433, file: !80, line: 955, type: !16)
!1466 = !DILocalVariable(name: "o", scope: !1433, file: !80, line: 957, type: !1467)
!1467 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1442)
!1468 = distinct !DISubprogram(name: "quoting_options_from_style", scope: !80, file: !80, line: 193, type: !1469, scopeLine: 194, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !4)
!1469 = !DISubroutineType(types: !1470)
!1470 = !{!93, !57}
!1471 = !DILocalVariable(name: "style", arg: 1, scope: !1468, file: !80, line: 193, type: !57)
!1472 = !DILocation(line: 193, column: 48, scope: !1468)
!1473 = !DILocalVariable(name: "o", scope: !1468, file: !80, line: 195, type: !93)
!1474 = !DILocation(line: 195, column: 26, scope: !1468)
!1475 = !DILocation(line: 196, column: 7, scope: !1476)
!1476 = distinct !DILexicalBlock(scope: !1468, file: !80, line: 196, column: 7)
!1477 = !DILocation(line: 196, column: 13, scope: !1476)
!1478 = !DILocation(line: 196, column: 7, scope: !1468)
!1479 = !DILocation(line: 197, column: 5, scope: !1476)
!1480 = !DILocation(line: 198, column: 13, scope: !1468)
!1481 = !DILocation(line: 198, column: 5, scope: !1468)
!1482 = !DILocation(line: 198, column: 11, scope: !1468)
!1483 = !DILocation(line: 199, column: 3, scope: !1468)
!1484 = !DILocalVariable(name: "style", arg: 1, scope: !1485, file: !80, line: 193, type: !57)
!1485 = distinct !DISubprogram(name: "quoting_options_from_style", scope: !80, file: !80, line: 193, type: !1486, scopeLine: 194, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1495, retainedNodes: !4)
!1486 = !DISubroutineType(types: !1487)
!1487 = !{!1488, !57}
!1488 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !1489)
!1489 = !{!1490, !1491, !1492, !1493, !1494}
!1490 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1488, file: !80, line: 68, baseType: !57, size: 32)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1488, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!1492 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1488, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!1493 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1488, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1488, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!1495 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !1496, nameTableKind: None)
!1496 = !{!1497, !1499, !1501, !1503, !1505, !1507, !1514, !1516}
!1497 = !DIGlobalVariableExpression(var: !1498, expr: !DIExpression())
!1498 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1495, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!1499 = !DIGlobalVariableExpression(var: !1500, expr: !DIExpression())
!1500 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1495, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!1501 = !DIGlobalVariableExpression(var: !1502, expr: !DIExpression())
!1502 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1495, file: !80, line: 1052, type: !1488, isLocal: false, isDefinition: true)
!1503 = !DIGlobalVariableExpression(var: !1504, expr: !DIExpression())
!1504 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1495, file: !80, line: 116, type: !1488, isLocal: true, isDefinition: true)
!1505 = !DIGlobalVariableExpression(var: !1506, expr: !DIExpression())
!1506 = distinct !DIGlobalVariable(name: "slot0", scope: !1495, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!1507 = !DIGlobalVariableExpression(var: !1508, expr: !DIExpression())
!1508 = distinct !DIGlobalVariable(name: "slotvec", scope: !1495, file: !80, line: 845, type: !1509, isLocal: true, isDefinition: true)
!1509 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1510, size: 64)
!1510 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !1511)
!1511 = !{!1512, !1513}
!1512 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1510, file: !80, line: 836, baseType: !74, size: 64)
!1513 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1510, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!1514 = !DIGlobalVariableExpression(var: !1515, expr: !DIExpression())
!1515 = distinct !DIGlobalVariable(name: "nslots", scope: !1495, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!1516 = !DIGlobalVariableExpression(var: !1517, expr: !DIExpression())
!1517 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1495, file: !80, line: 844, type: !1510, isLocal: true, isDefinition: true)
!1518 = !DILocalVariable(name: "o", scope: !1485, file: !80, line: 195, type: !1488)
!1519 = distinct !DISubprogram(name: "quotearg_n_options", scope: !80, file: !80, line: 877, type: !1520, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !4)
!1520 = !DISubroutineType(types: !1521)
!1521 = !{!7, !19, !16, !74, !1522}
!1522 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1424, size: 64)
!1523 = !DILocalVariable(name: "n", arg: 1, scope: !1519, file: !80, line: 877, type: !19)
!1524 = !DILocation(line: 877, column: 25, scope: !1519)
!1525 = !DILocalVariable(name: "arg", arg: 2, scope: !1519, file: !80, line: 877, type: !16)
!1526 = !DILocation(line: 877, column: 40, scope: !1519)
!1527 = !DILocalVariable(name: "argsize", arg: 3, scope: !1519, file: !80, line: 877, type: !74)
!1528 = !DILocation(line: 877, column: 52, scope: !1519)
!1529 = !DILocalVariable(name: "options", arg: 4, scope: !1519, file: !80, line: 878, type: !1522)
!1530 = !DILocation(line: 878, column: 51, scope: !1519)
!1531 = !DILocalVariable(name: "e", scope: !1519, file: !80, line: 880, type: !19)
!1532 = !DILocation(line: 880, column: 7, scope: !1519)
!1533 = !DILocation(line: 880, column: 11, scope: !1519)
!1534 = !DILocalVariable(name: "sv", scope: !1519, file: !80, line: 882, type: !110)
!1535 = !DILocation(line: 882, column: 19, scope: !1519)
!1536 = !DILocation(line: 882, column: 24, scope: !1519)
!1537 = !DILocation(line: 884, column: 7, scope: !1538)
!1538 = distinct !DILexicalBlock(scope: !1519, file: !80, line: 884, column: 7)
!1539 = !DILocation(line: 884, column: 9, scope: !1538)
!1540 = !DILocation(line: 884, column: 7, scope: !1519)
!1541 = !DILocation(line: 885, column: 5, scope: !1538)
!1542 = !DILocation(line: 887, column: 7, scope: !1543)
!1543 = distinct !DILexicalBlock(scope: !1519, file: !80, line: 887, column: 7)
!1544 = !DILocation(line: 887, column: 17, scope: !1543)
!1545 = !DILocation(line: 887, column: 14, scope: !1543)
!1546 = !DILocation(line: 887, column: 7, scope: !1519)
!1547 = !DILocalVariable(name: "preallocated", scope: !1548, file: !80, line: 889, type: !38)
!1548 = distinct !DILexicalBlock(scope: !1543, file: !80, line: 888, column: 5)
!1549 = !DILocation(line: 889, column: 12, scope: !1548)
!1550 = !DILocation(line: 889, column: 28, scope: !1548)
!1551 = !DILocation(line: 889, column: 31, scope: !1548)
!1552 = !DILocalVariable(name: "nmax", scope: !1548, file: !80, line: 890, type: !19)
!1553 = !DILocation(line: 890, column: 11, scope: !1548)
!1554 = !DILocation(line: 892, column: 11, scope: !1555)
!1555 = distinct !DILexicalBlock(scope: !1548, file: !80, line: 892, column: 11)
!1556 = !DILocation(line: 892, column: 18, scope: !1555)
!1557 = !DILocation(line: 892, column: 16, scope: !1555)
!1558 = !DILocation(line: 892, column: 11, scope: !1548)
!1559 = !DILocation(line: 893, column: 9, scope: !1555)
!1560 = !DILocation(line: 895, column: 32, scope: !1548)
!1561 = !DILocation(line: 895, column: 54, scope: !1548)
!1562 = !DILocation(line: 895, column: 59, scope: !1548)
!1563 = !DILocation(line: 895, column: 61, scope: !1548)
!1564 = !DILocation(line: 895, column: 58, scope: !1548)
!1565 = !DILocation(line: 895, column: 66, scope: !1548)
!1566 = !DILocation(line: 895, column: 22, scope: !1548)
!1567 = !DILocation(line: 895, column: 20, scope: !1548)
!1568 = !DILocation(line: 895, column: 15, scope: !1548)
!1569 = !DILocation(line: 896, column: 11, scope: !1570)
!1570 = distinct !DILexicalBlock(scope: !1548, file: !80, line: 896, column: 11)
!1571 = !DILocation(line: 896, column: 11, scope: !1548)
!1572 = !DILocation(line: 897, column: 10, scope: !1570)
!1573 = !DILocation(line: 897, column: 15, scope: !1570)
!1574 = !DILocation(line: 897, column: 9, scope: !1570)
!1575 = !DILocation(line: 898, column: 15, scope: !1548)
!1576 = !DILocation(line: 898, column: 20, scope: !1548)
!1577 = !DILocation(line: 898, column: 18, scope: !1548)
!1578 = !DILocation(line: 898, column: 7, scope: !1548)
!1579 = !DILocation(line: 898, column: 32, scope: !1548)
!1580 = !DILocation(line: 898, column: 34, scope: !1548)
!1581 = !DILocation(line: 898, column: 40, scope: !1548)
!1582 = !DILocation(line: 898, column: 38, scope: !1548)
!1583 = !DILocation(line: 898, column: 31, scope: !1548)
!1584 = !DILocation(line: 898, column: 48, scope: !1548)
!1585 = !DILocation(line: 899, column: 16, scope: !1548)
!1586 = !DILocation(line: 899, column: 18, scope: !1548)
!1587 = !DILocation(line: 899, column: 14, scope: !1548)
!1588 = !DILocation(line: 900, column: 5, scope: !1548)
!1589 = !DILocalVariable(name: "size", scope: !1590, file: !80, line: 903, type: !74)
!1590 = distinct !DILexicalBlock(scope: !1519, file: !80, line: 902, column: 3)
!1591 = !DILocation(line: 903, column: 12, scope: !1590)
!1592 = !DILocation(line: 903, column: 19, scope: !1590)
!1593 = !DILocation(line: 903, column: 22, scope: !1590)
!1594 = !DILocation(line: 903, column: 25, scope: !1590)
!1595 = !DILocalVariable(name: "val", scope: !1590, file: !80, line: 904, type: !7)
!1596 = !DILocation(line: 904, column: 11, scope: !1590)
!1597 = !DILocation(line: 904, column: 17, scope: !1590)
!1598 = !DILocation(line: 904, column: 20, scope: !1590)
!1599 = !DILocation(line: 904, column: 23, scope: !1590)
!1600 = !DILocalVariable(name: "flags", scope: !1590, file: !80, line: 906, type: !19)
!1601 = !DILocation(line: 906, column: 9, scope: !1590)
!1602 = !DILocation(line: 906, column: 17, scope: !1590)
!1603 = !DILocation(line: 906, column: 26, scope: !1590)
!1604 = !DILocation(line: 906, column: 32, scope: !1590)
!1605 = !DILocalVariable(name: "qsize", scope: !1590, file: !80, line: 907, type: !74)
!1606 = !DILocation(line: 907, column: 12, scope: !1590)
!1607 = !DILocation(line: 907, column: 46, scope: !1590)
!1608 = !DILocation(line: 907, column: 51, scope: !1590)
!1609 = !DILocation(line: 907, column: 57, scope: !1590)
!1610 = !DILocation(line: 907, column: 62, scope: !1590)
!1611 = !DILocation(line: 908, column: 46, scope: !1590)
!1612 = !DILocation(line: 908, column: 55, scope: !1590)
!1613 = !DILocation(line: 908, column: 62, scope: !1590)
!1614 = !DILocation(line: 909, column: 46, scope: !1590)
!1615 = !DILocation(line: 909, column: 55, scope: !1590)
!1616 = !DILocation(line: 910, column: 46, scope: !1590)
!1617 = !DILocation(line: 910, column: 55, scope: !1590)
!1618 = !DILocation(line: 911, column: 46, scope: !1590)
!1619 = !DILocation(line: 911, column: 55, scope: !1590)
!1620 = !DILocation(line: 907, column: 20, scope: !1590)
!1621 = !DILocation(line: 913, column: 9, scope: !1622)
!1622 = distinct !DILexicalBlock(scope: !1590, file: !80, line: 913, column: 9)
!1623 = !DILocation(line: 913, column: 17, scope: !1622)
!1624 = !DILocation(line: 913, column: 14, scope: !1622)
!1625 = !DILocation(line: 913, column: 9, scope: !1590)
!1626 = !DILocation(line: 915, column: 29, scope: !1627)
!1627 = distinct !DILexicalBlock(scope: !1622, file: !80, line: 914, column: 7)
!1628 = !DILocation(line: 915, column: 35, scope: !1627)
!1629 = !DILocation(line: 915, column: 27, scope: !1627)
!1630 = !DILocation(line: 915, column: 9, scope: !1627)
!1631 = !DILocation(line: 915, column: 12, scope: !1627)
!1632 = !DILocation(line: 915, column: 15, scope: !1627)
!1633 = !DILocation(line: 915, column: 20, scope: !1627)
!1634 = !DILocation(line: 916, column: 13, scope: !1635)
!1635 = distinct !DILexicalBlock(scope: !1627, file: !80, line: 916, column: 13)
!1636 = !DILocation(line: 916, column: 17, scope: !1635)
!1637 = !DILocation(line: 916, column: 13, scope: !1627)
!1638 = !DILocation(line: 917, column: 17, scope: !1635)
!1639 = !DILocation(line: 917, column: 11, scope: !1635)
!1640 = !DILocation(line: 918, column: 39, scope: !1627)
!1641 = !DILocation(line: 918, column: 27, scope: !1627)
!1642 = !DILocation(line: 918, column: 25, scope: !1627)
!1643 = !DILocation(line: 918, column: 9, scope: !1627)
!1644 = !DILocation(line: 918, column: 12, scope: !1627)
!1645 = !DILocation(line: 918, column: 15, scope: !1627)
!1646 = !DILocation(line: 918, column: 19, scope: !1627)
!1647 = !DILocation(line: 919, column: 35, scope: !1627)
!1648 = !DILocation(line: 919, column: 40, scope: !1627)
!1649 = !DILocation(line: 919, column: 46, scope: !1627)
!1650 = !DILocation(line: 919, column: 51, scope: !1627)
!1651 = !DILocation(line: 919, column: 60, scope: !1627)
!1652 = !DILocation(line: 919, column: 69, scope: !1627)
!1653 = !DILocation(line: 920, column: 35, scope: !1627)
!1654 = !DILocation(line: 920, column: 42, scope: !1627)
!1655 = !DILocation(line: 920, column: 51, scope: !1627)
!1656 = !DILocation(line: 921, column: 35, scope: !1627)
!1657 = !DILocation(line: 921, column: 44, scope: !1627)
!1658 = !DILocation(line: 922, column: 35, scope: !1627)
!1659 = !DILocation(line: 922, column: 44, scope: !1627)
!1660 = !DILocation(line: 919, column: 9, scope: !1627)
!1661 = !DILocation(line: 923, column: 7, scope: !1627)
!1662 = !DILocation(line: 925, column: 13, scope: !1590)
!1663 = !DILocation(line: 925, column: 5, scope: !1590)
!1664 = !DILocation(line: 925, column: 11, scope: !1590)
!1665 = !DILocation(line: 926, column: 12, scope: !1590)
!1666 = !DILocation(line: 926, column: 5, scope: !1590)
!1667 = !DILocalVariable(name: "nmax", scope: !1668, file: !80, line: 890, type: !19)
!1668 = distinct !DILexicalBlock(scope: !1669, file: !80, line: 888, column: 5)
!1669 = distinct !DILexicalBlock(scope: !1670, file: !80, line: 887, column: 7)
!1670 = distinct !DISubprogram(name: "quotearg_n_options", scope: !80, file: !80, line: 877, type: !1671, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1682, retainedNodes: !4)
!1671 = !DISubroutineType(types: !1672)
!1672 = !{!7, !19, !16, !74, !1673}
!1673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1674, size: 64)
!1674 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1675)
!1675 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !1676)
!1676 = !{!1677, !1678, !1679, !1680, !1681}
!1677 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1675, file: !80, line: 68, baseType: !57, size: 32)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1675, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1675, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!1680 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1675, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1675, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!1682 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !1683, nameTableKind: None)
!1683 = !{!1684, !1686, !1688, !1690, !1692, !1694, !1701, !1703}
!1684 = !DIGlobalVariableExpression(var: !1685, expr: !DIExpression())
!1685 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1682, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!1686 = !DIGlobalVariableExpression(var: !1687, expr: !DIExpression())
!1687 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1682, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!1688 = !DIGlobalVariableExpression(var: !1689, expr: !DIExpression())
!1689 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1682, file: !80, line: 1052, type: !1675, isLocal: false, isDefinition: true)
!1690 = !DIGlobalVariableExpression(var: !1691, expr: !DIExpression())
!1691 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1682, file: !80, line: 116, type: !1675, isLocal: true, isDefinition: true)
!1692 = !DIGlobalVariableExpression(var: !1693, expr: !DIExpression())
!1693 = distinct !DIGlobalVariable(name: "slot0", scope: !1682, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!1694 = !DIGlobalVariableExpression(var: !1695, expr: !DIExpression())
!1695 = distinct !DIGlobalVariable(name: "slotvec", scope: !1682, file: !80, line: 845, type: !1696, isLocal: true, isDefinition: true)
!1696 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1697, size: 64)
!1697 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !1698)
!1698 = !{!1699, !1700}
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1697, file: !80, line: 836, baseType: !74, size: 64)
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1697, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!1701 = !DIGlobalVariableExpression(var: !1702, expr: !DIExpression())
!1702 = distinct !DIGlobalVariable(name: "nslots", scope: !1682, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!1703 = !DIGlobalVariableExpression(var: !1704, expr: !DIExpression())
!1704 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1682, file: !80, line: 844, type: !1697, isLocal: true, isDefinition: true)
!1705 = !DILocalVariable(name: "val", scope: !1706, file: !80, line: 904, type: !7)
!1706 = distinct !DILexicalBlock(scope: !1707, file: !80, line: 902, column: 3)
!1707 = distinct !DISubprogram(name: "quotearg_n_options", scope: !80, file: !80, line: 877, type: !1708, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1719, retainedNodes: !4)
!1708 = !DISubroutineType(types: !1709)
!1709 = !{!7, !19, !16, !74, !1710}
!1710 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1711, size: 64)
!1711 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1712)
!1712 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !1713)
!1713 = !{!1714, !1715, !1716, !1717, !1718}
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1712, file: !80, line: 68, baseType: !57, size: 32)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1712, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1712, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1712, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1712, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!1719 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !1720, nameTableKind: None)
!1720 = !{!1721, !1723, !1725, !1727, !1729, !1731, !1738, !1740}
!1721 = !DIGlobalVariableExpression(var: !1722, expr: !DIExpression())
!1722 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1719, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!1723 = !DIGlobalVariableExpression(var: !1724, expr: !DIExpression())
!1724 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1719, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!1725 = !DIGlobalVariableExpression(var: !1726, expr: !DIExpression())
!1726 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1719, file: !80, line: 1052, type: !1712, isLocal: false, isDefinition: true)
!1727 = !DIGlobalVariableExpression(var: !1728, expr: !DIExpression())
!1728 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1719, file: !80, line: 116, type: !1712, isLocal: true, isDefinition: true)
!1729 = !DIGlobalVariableExpression(var: !1730, expr: !DIExpression())
!1730 = distinct !DIGlobalVariable(name: "slot0", scope: !1719, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!1731 = !DIGlobalVariableExpression(var: !1732, expr: !DIExpression())
!1732 = distinct !DIGlobalVariable(name: "slotvec", scope: !1719, file: !80, line: 845, type: !1733, isLocal: true, isDefinition: true)
!1733 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1734, size: 64)
!1734 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !1735)
!1735 = !{!1736, !1737}
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1734, file: !80, line: 836, baseType: !74, size: 64)
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1734, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!1738 = !DIGlobalVariableExpression(var: !1739, expr: !DIExpression())
!1739 = distinct !DIGlobalVariable(name: "nslots", scope: !1719, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!1740 = !DIGlobalVariableExpression(var: !1741, expr: !DIExpression())
!1741 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1719, file: !80, line: 844, type: !1734, isLocal: true, isDefinition: true)
!1742 = !DILocalVariable(name: "flags", scope: !1706, file: !80, line: 906, type: !19)
!1743 = !DILocalVariable(name: "qsize", scope: !1706, file: !80, line: 907, type: !74)
!1744 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !80, file: !80, line: 256, type: !1745, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !4)
!1745 = !DISubroutineType(types: !1746)
!1746 = !{!74, !7, !74, !16, !74, !57, !19, !1747, !16, !16}
!1747 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1748, size: 64)
!1748 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !59)
!1749 = !DILocalVariable(name: "buffer", arg: 1, scope: !1744, file: !80, line: 256, type: !7)
!1750 = !DILocation(line: 256, column: 33, scope: !1744)
!1751 = !DILocalVariable(name: "buffersize", arg: 2, scope: !1744, file: !80, line: 256, type: !74)
!1752 = !DILocation(line: 256, column: 48, scope: !1744)
!1753 = !DILocalVariable(name: "arg", arg: 3, scope: !1744, file: !80, line: 257, type: !16)
!1754 = !DILocation(line: 257, column: 39, scope: !1744)
!1755 = !DILocalVariable(name: "argsize", arg: 4, scope: !1744, file: !80, line: 257, type: !74)
!1756 = !DILocation(line: 257, column: 51, scope: !1744)
!1757 = !DILocalVariable(name: "quoting_style", arg: 5, scope: !1744, file: !80, line: 258, type: !57)
!1758 = !DILocation(line: 258, column: 46, scope: !1744)
!1759 = !DILocalVariable(name: "flags", arg: 6, scope: !1744, file: !80, line: 258, type: !19)
!1760 = !DILocation(line: 258, column: 65, scope: !1744)
!1761 = !DILocalVariable(name: "quote_these_too", arg: 7, scope: !1744, file: !80, line: 259, type: !1747)
!1762 = !DILocation(line: 259, column: 47, scope: !1744)
!1763 = !DILocalVariable(name: "left_quote", arg: 8, scope: !1744, file: !80, line: 260, type: !16)
!1764 = !DILocation(line: 260, column: 39, scope: !1744)
!1765 = !DILocalVariable(name: "right_quote", arg: 9, scope: !1744, file: !80, line: 261, type: !16)
!1766 = !DILocation(line: 261, column: 39, scope: !1744)
!1767 = !DILocalVariable(name: "i", scope: !1744, file: !80, line: 263, type: !74)
!1768 = !DILocation(line: 263, column: 10, scope: !1744)
!1769 = !DILocalVariable(name: "len", scope: !1744, file: !80, line: 264, type: !74)
!1770 = !DILocation(line: 264, column: 10, scope: !1744)
!1771 = !DILocalVariable(name: "orig_buffersize", scope: !1744, file: !80, line: 265, type: !74)
!1772 = !DILocation(line: 265, column: 10, scope: !1744)
!1773 = !DILocalVariable(name: "quote_string", scope: !1744, file: !80, line: 266, type: !16)
!1774 = !DILocation(line: 266, column: 15, scope: !1744)
!1775 = !DILocalVariable(name: "quote_string_len", scope: !1744, file: !80, line: 267, type: !74)
!1776 = !DILocation(line: 267, column: 10, scope: !1744)
!1777 = !DILocalVariable(name: "backslash_escapes", scope: !1744, file: !80, line: 268, type: !38)
!1778 = !DILocation(line: 268, column: 8, scope: !1744)
!1779 = !DILocalVariable(name: "unibyte_locale", scope: !1744, file: !80, line: 269, type: !38)
!1780 = !DILocation(line: 269, column: 8, scope: !1744)
!1781 = !DILocation(line: 269, column: 25, scope: !1744)
!1782 = !DILocation(line: 269, column: 36, scope: !1744)
!1783 = !DILocalVariable(name: "elide_outer_quotes", scope: !1744, file: !80, line: 270, type: !38)
!1784 = !DILocation(line: 270, column: 8, scope: !1744)
!1785 = !DILocation(line: 270, column: 30, scope: !1744)
!1786 = !DILocation(line: 270, column: 36, scope: !1744)
!1787 = !DILocation(line: 270, column: 61, scope: !1744)
!1788 = !DILocalVariable(name: "pending_shell_escape_end", scope: !1744, file: !80, line: 271, type: !38)
!1789 = !DILocation(line: 271, column: 8, scope: !1744)
!1790 = !DILocalVariable(name: "encountered_single_quote", scope: !1744, file: !80, line: 272, type: !38)
!1791 = !DILocation(line: 272, column: 8, scope: !1744)
!1792 = !DILocalVariable(name: "all_c_and_shell_quote_compat", scope: !1744, file: !80, line: 273, type: !38)
!1793 = !DILocation(line: 273, column: 8, scope: !1744)
!1794 = !DILocation(line: 273, column: 3, scope: !1744)
!1795 = !DILabel(scope: !1744, name: "process_input", file: !80, line: 314)
!1796 = !DILocation(line: 314, column: 2, scope: !1744)
!1797 = !DILocation(line: 316, column: 11, scope: !1744)
!1798 = !DILocation(line: 316, column: 3, scope: !1744)
!1799 = !DILocation(line: 319, column: 21, scope: !1800)
!1800 = distinct !DILexicalBlock(scope: !1744, file: !80, line: 317, column: 5)
!1801 = !DILocation(line: 320, column: 26, scope: !1800)
!1802 = !DILocation(line: 321, column: 7, scope: !1800)
!1803 = !DILocation(line: 323, column: 12, scope: !1804)
!1804 = distinct !DILexicalBlock(scope: !1800, file: !80, line: 323, column: 11)
!1805 = !DILocation(line: 323, column: 11, scope: !1800)
!1806 = !DILocation(line: 324, column: 9, scope: !1804)
!1807 = !DILocation(line: 324, column: 9, scope: !1808)
!1808 = distinct !DILexicalBlock(scope: !1809, file: !80, line: 324, column: 9)
!1809 = distinct !DILexicalBlock(scope: !1804, file: !80, line: 324, column: 9)
!1810 = !DILocation(line: 324, column: 9, scope: !1809)
!1811 = !DILocation(line: 325, column: 25, scope: !1800)
!1812 = !DILocation(line: 326, column: 20, scope: !1800)
!1813 = !DILocation(line: 327, column: 24, scope: !1800)
!1814 = !DILocation(line: 328, column: 7, scope: !1800)
!1815 = !DILocation(line: 331, column: 25, scope: !1800)
!1816 = !DILocation(line: 332, column: 26, scope: !1800)
!1817 = !DILocation(line: 333, column: 7, scope: !1800)
!1818 = !DILocation(line: 339, column: 13, scope: !1819)
!1819 = distinct !DILexicalBlock(scope: !1820, file: !80, line: 339, column: 13)
!1820 = distinct !DILexicalBlock(scope: !1800, file: !80, line: 338, column: 7)
!1821 = !DILocation(line: 339, column: 27, scope: !1819)
!1822 = !DILocation(line: 339, column: 13, scope: !1820)
!1823 = !DILocation(line: 362, column: 50, scope: !1824)
!1824 = distinct !DILexicalBlock(scope: !1819, file: !80, line: 340, column: 11)
!1825 = !DILocation(line: 362, column: 26, scope: !1824)
!1826 = !DILocation(line: 362, column: 24, scope: !1824)
!1827 = !DILocation(line: 363, column: 51, scope: !1824)
!1828 = !DILocation(line: 363, column: 27, scope: !1824)
!1829 = !DILocation(line: 363, column: 25, scope: !1824)
!1830 = !DILocation(line: 364, column: 11, scope: !1824)
!1831 = !DILocation(line: 365, column: 14, scope: !1832)
!1832 = distinct !DILexicalBlock(scope: !1820, file: !80, line: 365, column: 13)
!1833 = !DILocation(line: 365, column: 13, scope: !1820)
!1834 = !DILocation(line: 366, column: 31, scope: !1835)
!1835 = distinct !DILexicalBlock(scope: !1832, file: !80, line: 366, column: 11)
!1836 = !DILocation(line: 366, column: 29, scope: !1835)
!1837 = !DILocation(line: 366, column: 16, scope: !1835)
!1838 = !DILocation(line: 366, column: 44, scope: !1839)
!1839 = distinct !DILexicalBlock(scope: !1835, file: !80, line: 366, column: 11)
!1840 = !DILocation(line: 366, column: 43, scope: !1839)
!1841 = !DILocation(line: 366, column: 11, scope: !1835)
!1842 = !DILocation(line: 367, column: 13, scope: !1839)
!1843 = !DILocation(line: 367, column: 13, scope: !1844)
!1844 = distinct !DILexicalBlock(scope: !1845, file: !80, line: 367, column: 13)
!1845 = distinct !DILexicalBlock(scope: !1839, file: !80, line: 367, column: 13)
!1846 = !DILocation(line: 367, column: 13, scope: !1845)
!1847 = !DILocation(line: 366, column: 70, scope: !1839)
!1848 = !DILocation(line: 366, column: 11, scope: !1839)
!1849 = distinct !{!1849, !1841, !1850}
!1850 = !DILocation(line: 367, column: 13, scope: !1835)
!1851 = !DILocation(line: 368, column: 27, scope: !1820)
!1852 = !DILocation(line: 369, column: 24, scope: !1820)
!1853 = !DILocation(line: 369, column: 22, scope: !1820)
!1854 = !DILocation(line: 370, column: 36, scope: !1820)
!1855 = !DILocation(line: 370, column: 28, scope: !1820)
!1856 = !DILocation(line: 370, column: 26, scope: !1820)
!1857 = !DILocation(line: 372, column: 7, scope: !1800)
!1858 = !DILocation(line: 375, column: 25, scope: !1800)
!1859 = !DILocation(line: 376, column: 7, scope: !1800)
!1860 = !DILocation(line: 378, column: 26, scope: !1800)
!1861 = !DILocation(line: 379, column: 7, scope: !1800)
!1862 = !DILocation(line: 381, column: 12, scope: !1863)
!1863 = distinct !DILexicalBlock(scope: !1800, file: !80, line: 381, column: 11)
!1864 = !DILocation(line: 381, column: 11, scope: !1800)
!1865 = !DILocation(line: 382, column: 27, scope: !1863)
!1866 = !DILocation(line: 382, column: 9, scope: !1863)
!1867 = !DILocation(line: 383, column: 7, scope: !1800)
!1868 = !DILocation(line: 385, column: 21, scope: !1800)
!1869 = !DILocation(line: 386, column: 12, scope: !1870)
!1870 = distinct !DILexicalBlock(scope: !1800, file: !80, line: 386, column: 11)
!1871 = !DILocation(line: 386, column: 11, scope: !1800)
!1872 = !DILocation(line: 387, column: 9, scope: !1870)
!1873 = !DILocation(line: 387, column: 9, scope: !1874)
!1874 = distinct !DILexicalBlock(scope: !1875, file: !80, line: 387, column: 9)
!1875 = distinct !DILexicalBlock(scope: !1870, file: !80, line: 387, column: 9)
!1876 = !DILocation(line: 387, column: 9, scope: !1875)
!1877 = !DILocation(line: 388, column: 20, scope: !1800)
!1878 = !DILocation(line: 389, column: 24, scope: !1800)
!1879 = !DILocation(line: 390, column: 7, scope: !1800)
!1880 = !DILocation(line: 393, column: 26, scope: !1800)
!1881 = !DILocation(line: 394, column: 7, scope: !1800)
!1882 = !DILocation(line: 397, column: 7, scope: !1800)
!1883 = !DILocation(line: 400, column: 10, scope: !1884)
!1884 = distinct !DILexicalBlock(scope: !1744, file: !80, line: 400, column: 3)
!1885 = !DILocation(line: 400, column: 8, scope: !1884)
!1886 = !DILocation(line: 400, column: 19, scope: !1887)
!1887 = distinct !DILexicalBlock(scope: !1884, file: !80, line: 400, column: 3)
!1888 = !DILocation(line: 400, column: 27, scope: !1887)
!1889 = !DILocation(line: 400, column: 41, scope: !1887)
!1890 = !DILocation(line: 400, column: 45, scope: !1887)
!1891 = !DILocation(line: 400, column: 48, scope: !1887)
!1892 = !DILocation(line: 400, column: 58, scope: !1887)
!1893 = !DILocation(line: 400, column: 63, scope: !1887)
!1894 = !DILocation(line: 400, column: 60, scope: !1887)
!1895 = !DILocation(line: 400, column: 16, scope: !1887)
!1896 = !DILocation(line: 400, column: 3, scope: !1884)
!1897 = !DILocalVariable(name: "c", scope: !1898, file: !80, line: 402, type: !148)
!1898 = distinct !DILexicalBlock(scope: !1887, file: !80, line: 401, column: 5)
!1899 = !DILocation(line: 402, column: 21, scope: !1898)
!1900 = !DILocalVariable(name: "esc", scope: !1898, file: !80, line: 403, type: !148)
!1901 = !DILocation(line: 403, column: 21, scope: !1898)
!1902 = !DILocalVariable(name: "is_right_quote", scope: !1898, file: !80, line: 404, type: !38)
!1903 = !DILocation(line: 404, column: 12, scope: !1898)
!1904 = !DILocalVariable(name: "escaping", scope: !1898, file: !80, line: 405, type: !38)
!1905 = !DILocation(line: 405, column: 12, scope: !1898)
!1906 = !DILocalVariable(name: "c_and_shell_quote_compat", scope: !1898, file: !80, line: 406, type: !38)
!1907 = !DILocation(line: 406, column: 12, scope: !1898)
!1908 = !DILocation(line: 408, column: 11, scope: !1909)
!1909 = distinct !DILexicalBlock(scope: !1898, file: !80, line: 408, column: 11)
!1910 = !DILocation(line: 409, column: 11, scope: !1909)
!1911 = !DILocation(line: 409, column: 14, scope: !1909)
!1912 = !DILocation(line: 409, column: 28, scope: !1909)
!1913 = !DILocation(line: 410, column: 11, scope: !1909)
!1914 = !DILocation(line: 410, column: 14, scope: !1909)
!1915 = !DILocation(line: 411, column: 11, scope: !1909)
!1916 = !DILocation(line: 411, column: 15, scope: !1909)
!1917 = !DILocation(line: 411, column: 19, scope: !1909)
!1918 = !DILocation(line: 411, column: 17, scope: !1909)
!1919 = !DILocation(line: 412, column: 19, scope: !1909)
!1920 = !DILocation(line: 412, column: 27, scope: !1909)
!1921 = !DILocation(line: 412, column: 39, scope: !1909)
!1922 = !DILocation(line: 412, column: 46, scope: !1909)
!1923 = !DILocation(line: 412, column: 44, scope: !1909)
!1924 = !DILocation(line: 416, column: 40, scope: !1909)
!1925 = !DILocation(line: 416, column: 32, scope: !1909)
!1926 = !DILocation(line: 416, column: 30, scope: !1909)
!1927 = !DILocation(line: 416, column: 48, scope: !1909)
!1928 = !DILocation(line: 412, column: 15, scope: !1909)
!1929 = !DILocation(line: 417, column: 11, scope: !1909)
!1930 = !DILocation(line: 417, column: 22, scope: !1909)
!1931 = !DILocation(line: 417, column: 28, scope: !1909)
!1932 = !DILocation(line: 417, column: 26, scope: !1909)
!1933 = !DILocation(line: 417, column: 31, scope: !1909)
!1934 = !DILocation(line: 417, column: 45, scope: !1909)
!1935 = !DILocation(line: 417, column: 14, scope: !1909)
!1936 = !DILocation(line: 417, column: 63, scope: !1909)
!1937 = !DILocation(line: 408, column: 11, scope: !1898)
!1938 = !DILocation(line: 419, column: 15, scope: !1939)
!1939 = distinct !DILexicalBlock(scope: !1940, file: !80, line: 419, column: 15)
!1940 = distinct !DILexicalBlock(scope: !1909, file: !80, line: 418, column: 9)
!1941 = !DILocation(line: 419, column: 15, scope: !1940)
!1942 = !DILocation(line: 420, column: 13, scope: !1939)
!1943 = !DILocation(line: 421, column: 26, scope: !1940)
!1944 = !DILocation(line: 422, column: 9, scope: !1940)
!1945 = !DILocation(line: 424, column: 11, scope: !1898)
!1946 = !DILocation(line: 424, column: 15, scope: !1898)
!1947 = !DILocation(line: 424, column: 9, scope: !1898)
!1948 = !DILocation(line: 425, column: 15, scope: !1898)
!1949 = !DILocation(line: 425, column: 7, scope: !1898)
!1950 = !DILocation(line: 428, column: 15, scope: !1951)
!1951 = distinct !DILexicalBlock(scope: !1952, file: !80, line: 428, column: 15)
!1952 = distinct !DILexicalBlock(scope: !1898, file: !80, line: 426, column: 9)
!1953 = !DILocation(line: 428, column: 15, scope: !1952)
!1954 = !DILocation(line: 430, column: 15, scope: !1955)
!1955 = distinct !DILexicalBlock(scope: !1951, file: !80, line: 429, column: 13)
!1956 = !DILocation(line: 430, column: 15, scope: !1957)
!1957 = distinct !DILexicalBlock(scope: !1958, file: !80, line: 430, column: 15)
!1958 = distinct !DILexicalBlock(scope: !1955, file: !80, line: 430, column: 15)
!1959 = !DILocation(line: 430, column: 15, scope: !1958)
!1960 = !DILocation(line: 430, column: 15, scope: !1961)
!1961 = distinct !DILexicalBlock(scope: !1958, file: !80, line: 430, column: 15)
!1962 = !DILocation(line: 430, column: 15, scope: !1963)
!1963 = distinct !DILexicalBlock(scope: !1961, file: !80, line: 430, column: 15)
!1964 = !DILocation(line: 430, column: 15, scope: !1965)
!1965 = distinct !DILexicalBlock(scope: !1966, file: !80, line: 430, column: 15)
!1966 = distinct !DILexicalBlock(scope: !1963, file: !80, line: 430, column: 15)
!1967 = !DILocation(line: 430, column: 15, scope: !1966)
!1968 = !DILocation(line: 430, column: 15, scope: !1969)
!1969 = distinct !DILexicalBlock(scope: !1970, file: !80, line: 430, column: 15)
!1970 = distinct !DILexicalBlock(scope: !1963, file: !80, line: 430, column: 15)
!1971 = !DILocation(line: 430, column: 15, scope: !1970)
!1972 = !DILocation(line: 430, column: 15, scope: !1973)
!1973 = distinct !DILexicalBlock(scope: !1974, file: !80, line: 430, column: 15)
!1974 = distinct !DILexicalBlock(scope: !1963, file: !80, line: 430, column: 15)
!1975 = !DILocation(line: 430, column: 15, scope: !1974)
!1976 = !DILocation(line: 430, column: 15, scope: !1977)
!1977 = distinct !DILexicalBlock(scope: !1978, file: !80, line: 430, column: 15)
!1978 = distinct !DILexicalBlock(scope: !1958, file: !80, line: 430, column: 15)
!1979 = !DILocation(line: 430, column: 15, scope: !1978)
!1980 = !DILocation(line: 437, column: 19, scope: !1981)
!1981 = distinct !DILexicalBlock(scope: !1955, file: !80, line: 437, column: 19)
!1982 = !DILocation(line: 437, column: 33, scope: !1981)
!1983 = !DILocation(line: 438, column: 19, scope: !1981)
!1984 = !DILocation(line: 438, column: 22, scope: !1981)
!1985 = !DILocation(line: 438, column: 24, scope: !1981)
!1986 = !DILocation(line: 438, column: 30, scope: !1981)
!1987 = !DILocation(line: 438, column: 28, scope: !1981)
!1988 = !DILocation(line: 438, column: 38, scope: !1981)
!1989 = !DILocation(line: 438, column: 48, scope: !1981)
!1990 = !DILocation(line: 438, column: 52, scope: !1981)
!1991 = !DILocation(line: 438, column: 54, scope: !1981)
!1992 = !DILocation(line: 438, column: 45, scope: !1981)
!1993 = !DILocation(line: 438, column: 59, scope: !1981)
!1994 = !DILocation(line: 438, column: 62, scope: !1981)
!1995 = !DILocation(line: 438, column: 66, scope: !1981)
!1996 = !DILocation(line: 438, column: 68, scope: !1981)
!1997 = !DILocation(line: 438, column: 73, scope: !1981)
!1998 = !DILocation(line: 437, column: 19, scope: !1955)
!1999 = !DILocation(line: 440, column: 19, scope: !2000)
!2000 = distinct !DILexicalBlock(scope: !1981, file: !80, line: 439, column: 17)
!2001 = !DILocation(line: 440, column: 19, scope: !2002)
!2002 = distinct !DILexicalBlock(scope: !2003, file: !80, line: 440, column: 19)
!2003 = distinct !DILexicalBlock(scope: !2000, file: !80, line: 440, column: 19)
!2004 = !DILocation(line: 440, column: 19, scope: !2003)
!2005 = !DILocation(line: 441, column: 19, scope: !2000)
!2006 = !DILocation(line: 441, column: 19, scope: !2007)
!2007 = distinct !DILexicalBlock(scope: !2008, file: !80, line: 441, column: 19)
!2008 = distinct !DILexicalBlock(scope: !2000, file: !80, line: 441, column: 19)
!2009 = !DILocation(line: 441, column: 19, scope: !2008)
!2010 = !DILocation(line: 442, column: 17, scope: !2000)
!2011 = !DILocation(line: 443, column: 17, scope: !1955)
!2012 = !DILocation(line: 448, column: 13, scope: !1955)
!2013 = !DILocation(line: 449, column: 20, scope: !2014)
!2014 = distinct !DILexicalBlock(scope: !1951, file: !80, line: 449, column: 20)
!2015 = !DILocation(line: 449, column: 26, scope: !2014)
!2016 = !DILocation(line: 449, column: 20, scope: !1951)
!2017 = !DILocation(line: 450, column: 13, scope: !2014)
!2018 = !DILocation(line: 451, column: 11, scope: !1952)
!2019 = !DILocation(line: 454, column: 19, scope: !1952)
!2020 = !DILocation(line: 454, column: 11, scope: !1952)
!2021 = !DILocation(line: 457, column: 19, scope: !2022)
!2022 = distinct !DILexicalBlock(scope: !2023, file: !80, line: 457, column: 19)
!2023 = distinct !DILexicalBlock(scope: !1952, file: !80, line: 455, column: 13)
!2024 = !DILocation(line: 457, column: 19, scope: !2023)
!2025 = !DILocation(line: 458, column: 17, scope: !2022)
!2026 = !DILocation(line: 459, column: 15, scope: !2023)
!2027 = !DILocation(line: 462, column: 20, scope: !2028)
!2028 = distinct !DILexicalBlock(scope: !2023, file: !80, line: 462, column: 19)
!2029 = !DILocation(line: 462, column: 26, scope: !2028)
!2030 = !DILocation(line: 463, column: 19, scope: !2028)
!2031 = !DILocation(line: 463, column: 22, scope: !2028)
!2032 = !DILocation(line: 463, column: 24, scope: !2028)
!2033 = !DILocation(line: 463, column: 30, scope: !2028)
!2034 = !DILocation(line: 463, column: 28, scope: !2028)
!2035 = !DILocation(line: 463, column: 38, scope: !2028)
!2036 = !DILocation(line: 463, column: 41, scope: !2028)
!2037 = !DILocation(line: 463, column: 45, scope: !2028)
!2038 = !DILocation(line: 463, column: 47, scope: !2028)
!2039 = !DILocation(line: 463, column: 52, scope: !2028)
!2040 = !DILocation(line: 462, column: 19, scope: !2023)
!2041 = !DILocation(line: 464, column: 25, scope: !2028)
!2042 = !DILocation(line: 464, column: 29, scope: !2028)
!2043 = !DILocation(line: 464, column: 31, scope: !2028)
!2044 = !DILocation(line: 464, column: 17, scope: !2028)
!2045 = !DILocation(line: 471, column: 25, scope: !2046)
!2046 = distinct !DILexicalBlock(scope: !2047, file: !80, line: 471, column: 25)
!2047 = distinct !DILexicalBlock(scope: !2028, file: !80, line: 465, column: 19)
!2048 = !DILocation(line: 471, column: 25, scope: !2047)
!2049 = !DILocation(line: 472, column: 23, scope: !2046)
!2050 = !DILocation(line: 473, column: 25, scope: !2047)
!2051 = !DILocation(line: 473, column: 29, scope: !2047)
!2052 = !DILocation(line: 473, column: 31, scope: !2047)
!2053 = !DILocation(line: 473, column: 23, scope: !2047)
!2054 = !DILocation(line: 474, column: 23, scope: !2047)
!2055 = !DILocation(line: 475, column: 21, scope: !2047)
!2056 = !DILocation(line: 475, column: 21, scope: !2057)
!2057 = distinct !DILexicalBlock(scope: !2058, file: !80, line: 475, column: 21)
!2058 = distinct !DILexicalBlock(scope: !2047, file: !80, line: 475, column: 21)
!2059 = !DILocation(line: 475, column: 21, scope: !2058)
!2060 = !DILocation(line: 476, column: 21, scope: !2047)
!2061 = !DILocation(line: 476, column: 21, scope: !2062)
!2062 = distinct !DILexicalBlock(scope: !2063, file: !80, line: 476, column: 21)
!2063 = distinct !DILexicalBlock(scope: !2047, file: !80, line: 476, column: 21)
!2064 = !DILocation(line: 476, column: 21, scope: !2063)
!2065 = !DILocation(line: 477, column: 21, scope: !2047)
!2066 = !DILocation(line: 477, column: 21, scope: !2067)
!2067 = distinct !DILexicalBlock(scope: !2068, file: !80, line: 477, column: 21)
!2068 = distinct !DILexicalBlock(scope: !2047, file: !80, line: 477, column: 21)
!2069 = !DILocation(line: 477, column: 21, scope: !2068)
!2070 = !DILocation(line: 478, column: 21, scope: !2047)
!2071 = !DILocation(line: 478, column: 21, scope: !2072)
!2072 = distinct !DILexicalBlock(scope: !2073, file: !80, line: 478, column: 21)
!2073 = distinct !DILexicalBlock(scope: !2047, file: !80, line: 478, column: 21)
!2074 = !DILocation(line: 478, column: 21, scope: !2073)
!2075 = !DILocation(line: 479, column: 21, scope: !2047)
!2076 = !DILocation(line: 482, column: 21, scope: !2047)
!2077 = !DILocation(line: 483, column: 19, scope: !2047)
!2078 = !DILocation(line: 484, column: 15, scope: !2023)
!2079 = !DILocation(line: 487, column: 15, scope: !2023)
!2080 = !DILocation(line: 489, column: 11, scope: !1952)
!2081 = !DILocation(line: 491, column: 24, scope: !1952)
!2082 = !DILocation(line: 491, column: 31, scope: !1952)
!2083 = !DILocation(line: 492, column: 24, scope: !1952)
!2084 = !DILocation(line: 492, column: 31, scope: !1952)
!2085 = !DILocation(line: 493, column: 24, scope: !1952)
!2086 = !DILocation(line: 493, column: 31, scope: !1952)
!2087 = !DILocation(line: 494, column: 24, scope: !1952)
!2088 = !DILocation(line: 494, column: 31, scope: !1952)
!2089 = !DILocation(line: 495, column: 24, scope: !1952)
!2090 = !DILocation(line: 495, column: 31, scope: !1952)
!2091 = !DILocation(line: 496, column: 24, scope: !1952)
!2092 = !DILocation(line: 496, column: 31, scope: !1952)
!2093 = !DILocation(line: 497, column: 24, scope: !1952)
!2094 = !DILocation(line: 497, column: 31, scope: !1952)
!2095 = !DILocation(line: 498, column: 26, scope: !1952)
!2096 = !DILocation(line: 498, column: 24, scope: !1952)
!2097 = !DILocation(line: 500, column: 15, scope: !2098)
!2098 = distinct !DILexicalBlock(scope: !1952, file: !80, line: 500, column: 15)
!2099 = !DILocation(line: 500, column: 29, scope: !2098)
!2100 = !DILocation(line: 500, column: 15, scope: !1952)
!2101 = !DILocation(line: 502, column: 19, scope: !2102)
!2102 = distinct !DILexicalBlock(scope: !2103, file: !80, line: 502, column: 19)
!2103 = distinct !DILexicalBlock(scope: !2098, file: !80, line: 501, column: 13)
!2104 = !DILocation(line: 502, column: 19, scope: !2103)
!2105 = !DILocation(line: 503, column: 17, scope: !2102)
!2106 = !DILocation(line: 504, column: 15, scope: !2103)
!2107 = !DILocation(line: 509, column: 15, scope: !2108)
!2108 = distinct !DILexicalBlock(scope: !1952, file: !80, line: 509, column: 15)
!2109 = !DILocation(line: 509, column: 33, scope: !2108)
!2110 = !DILocation(line: 509, column: 36, scope: !2108)
!2111 = !DILocation(line: 509, column: 55, scope: !2108)
!2112 = !DILocation(line: 509, column: 58, scope: !2108)
!2113 = !DILocation(line: 509, column: 15, scope: !1952)
!2114 = !DILocation(line: 510, column: 13, scope: !2108)
!2115 = !DILabel(scope: !1952, name: "c_and_shell_escape", file: !80, line: 512)
!2116 = !DILocation(line: 512, column: 9, scope: !1952)
!2117 = !DILocation(line: 513, column: 15, scope: !2118)
!2118 = distinct !DILexicalBlock(scope: !1952, file: !80, line: 513, column: 15)
!2119 = !DILocation(line: 513, column: 29, scope: !2118)
!2120 = !DILocation(line: 514, column: 15, scope: !2118)
!2121 = !DILocation(line: 514, column: 18, scope: !2118)
!2122 = !DILocation(line: 513, column: 15, scope: !1952)
!2123 = !DILocation(line: 515, column: 13, scope: !2118)
!2124 = !DILabel(scope: !1952, name: "c_escape", file: !80, line: 517)
!2125 = !DILocation(line: 517, column: 9, scope: !1952)
!2126 = !DILocation(line: 518, column: 15, scope: !2127)
!2127 = distinct !DILexicalBlock(scope: !1952, file: !80, line: 518, column: 15)
!2128 = !DILocation(line: 518, column: 15, scope: !1952)
!2129 = !DILocation(line: 520, column: 19, scope: !2130)
!2130 = distinct !DILexicalBlock(scope: !2127, file: !80, line: 519, column: 13)
!2131 = !DILocation(line: 520, column: 17, scope: !2130)
!2132 = !DILocation(line: 521, column: 15, scope: !2130)
!2133 = !DILocation(line: 523, column: 11, scope: !1952)
!2134 = !DILocation(line: 526, column: 18, scope: !2135)
!2135 = distinct !DILexicalBlock(scope: !1952, file: !80, line: 526, column: 15)
!2136 = !DILocation(line: 526, column: 26, scope: !2135)
!2137 = !DILocation(line: 526, column: 15, scope: !1952)
!2138 = !DILocation(line: 526, column: 40, scope: !2135)
!2139 = !DILocation(line: 526, column: 47, scope: !2135)
!2140 = !DILocation(line: 526, column: 57, scope: !2135)
!2141 = !DILocation(line: 526, column: 65, scope: !2135)
!2142 = !DILocation(line: 527, column: 13, scope: !2135)
!2143 = !DILocation(line: 528, column: 11, scope: !1952)
!2144 = !DILocation(line: 530, column: 15, scope: !2145)
!2145 = distinct !DILexicalBlock(scope: !1952, file: !80, line: 530, column: 15)
!2146 = !DILocation(line: 530, column: 17, scope: !2145)
!2147 = !DILocation(line: 530, column: 15, scope: !1952)
!2148 = !DILocation(line: 531, column: 13, scope: !2145)
!2149 = !DILocation(line: 532, column: 11, scope: !1952)
!2150 = !DILocation(line: 534, column: 36, scope: !1952)
!2151 = !DILocation(line: 535, column: 11, scope: !1952)
!2152 = !DILocation(line: 548, column: 15, scope: !2153)
!2153 = distinct !DILexicalBlock(scope: !1952, file: !80, line: 548, column: 15)
!2154 = !DILocation(line: 548, column: 29, scope: !2153)
!2155 = !DILocation(line: 549, column: 15, scope: !2153)
!2156 = !DILocation(line: 549, column: 18, scope: !2153)
!2157 = !DILocation(line: 548, column: 15, scope: !1952)
!2158 = !DILocation(line: 550, column: 13, scope: !2153)
!2159 = !DILocation(line: 551, column: 11, scope: !1952)
!2160 = !DILocation(line: 554, column: 36, scope: !1952)
!2161 = !DILocation(line: 555, column: 36, scope: !1952)
!2162 = !DILocation(line: 556, column: 15, scope: !2163)
!2163 = distinct !DILexicalBlock(scope: !1952, file: !80, line: 556, column: 15)
!2164 = !DILocation(line: 556, column: 29, scope: !2163)
!2165 = !DILocation(line: 556, column: 15, scope: !1952)
!2166 = !DILocation(line: 558, column: 19, scope: !2167)
!2167 = distinct !DILexicalBlock(scope: !2168, file: !80, line: 558, column: 19)
!2168 = distinct !DILexicalBlock(scope: !2163, file: !80, line: 557, column: 13)
!2169 = !DILocation(line: 558, column: 19, scope: !2168)
!2170 = !DILocation(line: 559, column: 17, scope: !2167)
!2171 = !DILocation(line: 561, column: 19, scope: !2172)
!2172 = distinct !DILexicalBlock(scope: !2168, file: !80, line: 561, column: 19)
!2173 = !DILocation(line: 561, column: 30, scope: !2172)
!2174 = !DILocation(line: 561, column: 35, scope: !2172)
!2175 = !DILocation(line: 561, column: 19, scope: !2168)
!2176 = !DILocation(line: 566, column: 37, scope: !2177)
!2177 = distinct !DILexicalBlock(scope: !2172, file: !80, line: 562, column: 17)
!2178 = !DILocation(line: 566, column: 35, scope: !2177)
!2179 = !DILocation(line: 567, column: 30, scope: !2177)
!2180 = !DILocation(line: 568, column: 17, scope: !2177)
!2181 = !DILocation(line: 570, column: 15, scope: !2168)
!2182 = !DILocation(line: 570, column: 15, scope: !2183)
!2183 = distinct !DILexicalBlock(scope: !2184, file: !80, line: 570, column: 15)
!2184 = distinct !DILexicalBlock(scope: !2168, file: !80, line: 570, column: 15)
!2185 = !DILocation(line: 570, column: 15, scope: !2184)
!2186 = !DILocation(line: 571, column: 15, scope: !2168)
!2187 = !DILocation(line: 571, column: 15, scope: !2188)
!2188 = distinct !DILexicalBlock(scope: !2189, file: !80, line: 571, column: 15)
!2189 = distinct !DILexicalBlock(scope: !2168, file: !80, line: 571, column: 15)
!2190 = !DILocation(line: 571, column: 15, scope: !2189)
!2191 = !DILocation(line: 572, column: 15, scope: !2168)
!2192 = !DILocation(line: 572, column: 15, scope: !2193)
!2193 = distinct !DILexicalBlock(scope: !2194, file: !80, line: 572, column: 15)
!2194 = distinct !DILexicalBlock(scope: !2168, file: !80, line: 572, column: 15)
!2195 = !DILocation(line: 572, column: 15, scope: !2194)
!2196 = !DILocation(line: 573, column: 40, scope: !2168)
!2197 = !DILocation(line: 574, column: 13, scope: !2168)
!2198 = !DILocation(line: 575, column: 11, scope: !1952)
!2199 = !DILocation(line: 599, column: 36, scope: !1952)
!2200 = !DILocation(line: 600, column: 11, scope: !1952)
!2201 = !DILocalVariable(name: "m", scope: !2202, file: !80, line: 610, type: !74)
!2202 = distinct !DILexicalBlock(scope: !1952, file: !80, line: 608, column: 11)
!2203 = !DILocation(line: 610, column: 20, scope: !2202)
!2204 = !DILocalVariable(name: "printable", scope: !2202, file: !80, line: 612, type: !38)
!2205 = !DILocation(line: 612, column: 18, scope: !2202)
!2206 = !DILocation(line: 614, column: 17, scope: !2207)
!2207 = distinct !DILexicalBlock(scope: !2202, file: !80, line: 614, column: 17)
!2208 = !DILocation(line: 614, column: 17, scope: !2202)
!2209 = !DILocation(line: 616, column: 19, scope: !2210)
!2210 = distinct !DILexicalBlock(scope: !2207, file: !80, line: 615, column: 15)
!2211 = !DILocation(line: 617, column: 29, scope: !2210)
!2212 = !DILocation(line: 617, column: 41, scope: !2210)
!2213 = !DILocation(line: 617, column: 27, scope: !2210)
!2214 = !DILocation(line: 618, column: 15, scope: !2210)
!2215 = !DILocalVariable(name: "mbstate", scope: !2216, file: !80, line: 621, type: !2217)
!2216 = distinct !DILexicalBlock(scope: !2207, file: !80, line: 620, column: 15)
!2217 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !2218, line: 6, baseType: !2219)
!2218 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "")
!2219 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !2220, line: 21, baseType: !2221)
!2220 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "")
!2221 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2220, line: 13, size: 64, elements: !2222)
!2222 = !{!2223, !2224}
!2223 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !2221, file: !2220, line: 15, baseType: !19, size: 32)
!2224 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !2221, file: !2220, line: 20, baseType: !2225, size: 32, offset: 32)
!2225 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2221, file: !2220, line: 16, size: 32, elements: !2226)
!2226 = !{!2227, !2228}
!2227 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !2225, file: !2220, line: 18, baseType: !59, size: 32)
!2228 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !2225, file: !2220, line: 19, baseType: !2229, size: 32)
!2229 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 32, elements: !2230)
!2230 = !{!2231}
!2231 = !DISubrange(count: 4)
!2232 = !DILocation(line: 621, column: 27, scope: !2216)
!2233 = !DILocation(line: 622, column: 17, scope: !2216)
!2234 = !DILocation(line: 624, column: 19, scope: !2216)
!2235 = !DILocation(line: 625, column: 27, scope: !2216)
!2236 = !DILocation(line: 626, column: 21, scope: !2237)
!2237 = distinct !DILexicalBlock(scope: !2216, file: !80, line: 626, column: 21)
!2238 = !DILocation(line: 626, column: 29, scope: !2237)
!2239 = !DILocation(line: 626, column: 21, scope: !2216)
!2240 = !DILocation(line: 627, column: 37, scope: !2237)
!2241 = !DILocation(line: 627, column: 29, scope: !2237)
!2242 = !DILocation(line: 627, column: 27, scope: !2237)
!2243 = !DILocation(line: 627, column: 19, scope: !2237)
!2244 = !DILocation(line: 629, column: 17, scope: !2216)
!2245 = !DILocalVariable(name: "w", scope: !2246, file: !80, line: 631, type: !2247)
!2246 = distinct !DILexicalBlock(scope: !2216, file: !80, line: 630, column: 19)
!2247 = !DIDerivedType(tag: DW_TAG_typedef, name: "wchar_t", file: !75, line: 74, baseType: !19)
!2248 = !DILocation(line: 631, column: 29, scope: !2246)
!2249 = !DILocalVariable(name: "bytes", scope: !2246, file: !80, line: 632, type: !74)
!2250 = !DILocation(line: 632, column: 28, scope: !2246)
!2251 = !DILocation(line: 632, column: 50, scope: !2246)
!2252 = !DILocation(line: 632, column: 54, scope: !2246)
!2253 = !DILocation(line: 632, column: 58, scope: !2246)
!2254 = !DILocation(line: 632, column: 56, scope: !2246)
!2255 = !DILocation(line: 633, column: 45, scope: !2246)
!2256 = !DILocation(line: 633, column: 56, scope: !2246)
!2257 = !DILocation(line: 633, column: 60, scope: !2246)
!2258 = !DILocation(line: 633, column: 58, scope: !2246)
!2259 = !DILocation(line: 633, column: 53, scope: !2246)
!2260 = !DILocation(line: 632, column: 36, scope: !2246)
!2261 = !DILocation(line: 634, column: 25, scope: !2262)
!2262 = distinct !DILexicalBlock(scope: !2246, file: !80, line: 634, column: 25)
!2263 = !DILocation(line: 634, column: 31, scope: !2262)
!2264 = !DILocation(line: 634, column: 25, scope: !2246)
!2265 = !DILocation(line: 635, column: 23, scope: !2262)
!2266 = !DILocation(line: 636, column: 30, scope: !2267)
!2267 = distinct !DILexicalBlock(scope: !2262, file: !80, line: 636, column: 30)
!2268 = !DILocation(line: 636, column: 36, scope: !2267)
!2269 = !DILocation(line: 636, column: 30, scope: !2262)
!2270 = !DILocation(line: 638, column: 35, scope: !2271)
!2271 = distinct !DILexicalBlock(scope: !2267, file: !80, line: 637, column: 23)
!2272 = !DILocation(line: 639, column: 25, scope: !2271)
!2273 = !DILocation(line: 641, column: 30, scope: !2274)
!2274 = distinct !DILexicalBlock(scope: !2267, file: !80, line: 641, column: 30)
!2275 = !DILocation(line: 641, column: 36, scope: !2274)
!2276 = !DILocation(line: 641, column: 30, scope: !2267)
!2277 = !DILocation(line: 643, column: 35, scope: !2278)
!2278 = distinct !DILexicalBlock(scope: !2274, file: !80, line: 642, column: 23)
!2279 = !DILocation(line: 644, column: 25, scope: !2278)
!2280 = !DILocation(line: 644, column: 32, scope: !2278)
!2281 = !DILocation(line: 644, column: 36, scope: !2278)
!2282 = !DILocation(line: 644, column: 34, scope: !2278)
!2283 = !DILocation(line: 644, column: 40, scope: !2278)
!2284 = !DILocation(line: 644, column: 38, scope: !2278)
!2285 = !DILocation(line: 644, column: 48, scope: !2278)
!2286 = !DILocation(line: 644, column: 51, scope: !2278)
!2287 = !DILocation(line: 644, column: 55, scope: !2278)
!2288 = !DILocation(line: 644, column: 59, scope: !2278)
!2289 = !DILocation(line: 644, column: 57, scope: !2278)
!2290 = !DILocation(line: 0, scope: !2278)
!2291 = !DILocation(line: 645, column: 28, scope: !2278)
!2292 = distinct !{!2292, !2279, !2291}
!2293 = !DILocation(line: 646, column: 25, scope: !2278)
!2294 = !DILocation(line: 654, column: 44, scope: !2295)
!2295 = distinct !DILexicalBlock(scope: !2296, file: !80, line: 654, column: 29)
!2296 = distinct !DILexicalBlock(scope: !2274, file: !80, line: 649, column: 23)
!2297 = !DILocation(line: 655, column: 29, scope: !2295)
!2298 = !DILocation(line: 655, column: 32, scope: !2295)
!2299 = !DILocation(line: 655, column: 46, scope: !2295)
!2300 = !DILocation(line: 654, column: 29, scope: !2296)
!2301 = !DILocalVariable(name: "j", scope: !2302, file: !80, line: 657, type: !74)
!2302 = distinct !DILexicalBlock(scope: !2295, file: !80, line: 656, column: 27)
!2303 = !DILocation(line: 657, column: 36, scope: !2302)
!2304 = !DILocation(line: 658, column: 36, scope: !2305)
!2305 = distinct !DILexicalBlock(scope: !2302, file: !80, line: 658, column: 29)
!2306 = !DILocation(line: 658, column: 34, scope: !2305)
!2307 = !DILocation(line: 658, column: 41, scope: !2308)
!2308 = distinct !DILexicalBlock(scope: !2305, file: !80, line: 658, column: 29)
!2309 = !DILocation(line: 658, column: 45, scope: !2308)
!2310 = !DILocation(line: 658, column: 43, scope: !2308)
!2311 = !DILocation(line: 658, column: 29, scope: !2305)
!2312 = !DILocation(line: 659, column: 39, scope: !2308)
!2313 = !DILocation(line: 659, column: 43, scope: !2308)
!2314 = !DILocation(line: 659, column: 47, scope: !2308)
!2315 = !DILocation(line: 659, column: 45, scope: !2308)
!2316 = !DILocation(line: 659, column: 51, scope: !2308)
!2317 = !DILocation(line: 659, column: 49, scope: !2308)
!2318 = !DILocation(line: 659, column: 31, scope: !2308)
!2319 = !DILocation(line: 663, column: 35, scope: !2320)
!2320 = distinct !DILexicalBlock(scope: !2308, file: !80, line: 660, column: 33)
!2321 = !DILocation(line: 666, column: 35, scope: !2320)
!2322 = !DILocation(line: 667, column: 33, scope: !2320)
!2323 = !DILocation(line: 658, column: 53, scope: !2308)
!2324 = !DILocation(line: 658, column: 29, scope: !2308)
!2325 = distinct !{!2325, !2311, !2326}
!2326 = !DILocation(line: 667, column: 33, scope: !2305)
!2327 = !DILocation(line: 668, column: 27, scope: !2302)
!2328 = !DILocation(line: 670, column: 41, scope: !2329)
!2329 = distinct !DILexicalBlock(scope: !2296, file: !80, line: 670, column: 29)
!2330 = !DILocation(line: 670, column: 31, scope: !2329)
!2331 = !DILocation(line: 670, column: 29, scope: !2296)
!2332 = !DILocation(line: 671, column: 37, scope: !2329)
!2333 = !DILocation(line: 671, column: 27, scope: !2329)
!2334 = !DILocation(line: 672, column: 30, scope: !2296)
!2335 = !DILocation(line: 672, column: 27, scope: !2296)
!2336 = !DILocation(line: 674, column: 19, scope: !2246)
!2337 = !DILocation(line: 675, column: 26, scope: !2216)
!2338 = !DILocation(line: 675, column: 24, scope: !2216)
!2339 = distinct !{!2339, !2244, !2340}
!2340 = !DILocation(line: 675, column: 44, scope: !2216)
!2341 = !DILocation(line: 678, column: 40, scope: !2202)
!2342 = !DILocation(line: 678, column: 38, scope: !2202)
!2343 = !DILocation(line: 680, column: 21, scope: !2344)
!2344 = distinct !DILexicalBlock(scope: !2202, file: !80, line: 680, column: 17)
!2345 = !DILocation(line: 680, column: 19, scope: !2344)
!2346 = !DILocation(line: 680, column: 23, scope: !2344)
!2347 = !DILocation(line: 680, column: 27, scope: !2344)
!2348 = !DILocation(line: 680, column: 45, scope: !2344)
!2349 = !DILocation(line: 680, column: 50, scope: !2344)
!2350 = !DILocation(line: 680, column: 17, scope: !2202)
!2351 = !DILocalVariable(name: "ilim", scope: !2352, file: !80, line: 684, type: !74)
!2352 = distinct !DILexicalBlock(scope: !2344, file: !80, line: 681, column: 15)
!2353 = !DILocation(line: 684, column: 24, scope: !2352)
!2354 = !DILocation(line: 684, column: 31, scope: !2352)
!2355 = !DILocation(line: 684, column: 35, scope: !2352)
!2356 = !DILocation(line: 684, column: 33, scope: !2352)
!2357 = !DILocation(line: 686, column: 17, scope: !2352)
!2358 = !DILocation(line: 688, column: 25, scope: !2359)
!2359 = distinct !DILexicalBlock(scope: !2360, file: !80, line: 688, column: 25)
!2360 = distinct !DILexicalBlock(scope: !2361, file: !80, line: 687, column: 19)
!2361 = distinct !DILexicalBlock(scope: !2362, file: !80, line: 686, column: 17)
!2362 = distinct !DILexicalBlock(scope: !2352, file: !80, line: 686, column: 17)
!2363 = !DILocation(line: 688, column: 43, scope: !2359)
!2364 = !DILocation(line: 688, column: 48, scope: !2359)
!2365 = !DILocation(line: 688, column: 25, scope: !2360)
!2366 = !DILocation(line: 690, column: 25, scope: !2367)
!2367 = distinct !DILexicalBlock(scope: !2359, file: !80, line: 689, column: 23)
!2368 = !DILocation(line: 690, column: 25, scope: !2369)
!2369 = distinct !DILexicalBlock(scope: !2370, file: !80, line: 690, column: 25)
!2370 = distinct !DILexicalBlock(scope: !2367, file: !80, line: 690, column: 25)
!2371 = !DILocation(line: 690, column: 25, scope: !2370)
!2372 = !DILocation(line: 690, column: 25, scope: !2373)
!2373 = distinct !DILexicalBlock(scope: !2370, file: !80, line: 690, column: 25)
!2374 = !DILocation(line: 690, column: 25, scope: !2375)
!2375 = distinct !DILexicalBlock(scope: !2373, file: !80, line: 690, column: 25)
!2376 = !DILocation(line: 690, column: 25, scope: !2377)
!2377 = distinct !DILexicalBlock(scope: !2378, file: !80, line: 690, column: 25)
!2378 = distinct !DILexicalBlock(scope: !2375, file: !80, line: 690, column: 25)
!2379 = !DILocation(line: 690, column: 25, scope: !2378)
!2380 = !DILocation(line: 690, column: 25, scope: !2381)
!2381 = distinct !DILexicalBlock(scope: !2382, file: !80, line: 690, column: 25)
!2382 = distinct !DILexicalBlock(scope: !2375, file: !80, line: 690, column: 25)
!2383 = !DILocation(line: 690, column: 25, scope: !2382)
!2384 = !DILocation(line: 690, column: 25, scope: !2385)
!2385 = distinct !DILexicalBlock(scope: !2386, file: !80, line: 690, column: 25)
!2386 = distinct !DILexicalBlock(scope: !2375, file: !80, line: 690, column: 25)
!2387 = !DILocation(line: 690, column: 25, scope: !2386)
!2388 = !DILocation(line: 690, column: 25, scope: !2389)
!2389 = distinct !DILexicalBlock(scope: !2390, file: !80, line: 690, column: 25)
!2390 = distinct !DILexicalBlock(scope: !2370, file: !80, line: 690, column: 25)
!2391 = !DILocation(line: 690, column: 25, scope: !2390)
!2392 = !DILocation(line: 691, column: 25, scope: !2367)
!2393 = !DILocation(line: 691, column: 25, scope: !2394)
!2394 = distinct !DILexicalBlock(scope: !2395, file: !80, line: 691, column: 25)
!2395 = distinct !DILexicalBlock(scope: !2367, file: !80, line: 691, column: 25)
!2396 = !DILocation(line: 691, column: 25, scope: !2395)
!2397 = !DILocation(line: 692, column: 25, scope: !2367)
!2398 = !DILocation(line: 692, column: 25, scope: !2399)
!2399 = distinct !DILexicalBlock(scope: !2400, file: !80, line: 692, column: 25)
!2400 = distinct !DILexicalBlock(scope: !2367, file: !80, line: 692, column: 25)
!2401 = !DILocation(line: 692, column: 25, scope: !2400)
!2402 = !DILocation(line: 693, column: 36, scope: !2367)
!2403 = !DILocation(line: 693, column: 38, scope: !2367)
!2404 = !DILocation(line: 693, column: 33, scope: !2367)
!2405 = !DILocation(line: 693, column: 29, scope: !2367)
!2406 = !DILocation(line: 693, column: 27, scope: !2367)
!2407 = !DILocation(line: 694, column: 23, scope: !2367)
!2408 = !DILocation(line: 695, column: 30, scope: !2409)
!2409 = distinct !DILexicalBlock(scope: !2359, file: !80, line: 695, column: 30)
!2410 = !DILocation(line: 695, column: 30, scope: !2359)
!2411 = !DILocation(line: 697, column: 25, scope: !2412)
!2412 = distinct !DILexicalBlock(scope: !2409, file: !80, line: 696, column: 23)
!2413 = !DILocation(line: 697, column: 25, scope: !2414)
!2414 = distinct !DILexicalBlock(scope: !2415, file: !80, line: 697, column: 25)
!2415 = distinct !DILexicalBlock(scope: !2412, file: !80, line: 697, column: 25)
!2416 = !DILocation(line: 697, column: 25, scope: !2415)
!2417 = !DILocation(line: 698, column: 40, scope: !2412)
!2418 = !DILocation(line: 699, column: 23, scope: !2412)
!2419 = !DILocation(line: 700, column: 25, scope: !2420)
!2420 = distinct !DILexicalBlock(scope: !2360, file: !80, line: 700, column: 25)
!2421 = !DILocation(line: 700, column: 33, scope: !2420)
!2422 = !DILocation(line: 700, column: 35, scope: !2420)
!2423 = !DILocation(line: 700, column: 30, scope: !2420)
!2424 = !DILocation(line: 700, column: 25, scope: !2360)
!2425 = !DILocation(line: 701, column: 23, scope: !2420)
!2426 = !DILocation(line: 702, column: 21, scope: !2360)
!2427 = !DILocation(line: 702, column: 21, scope: !2428)
!2428 = distinct !DILexicalBlock(scope: !2429, file: !80, line: 702, column: 21)
!2429 = distinct !DILexicalBlock(scope: !2360, file: !80, line: 702, column: 21)
!2430 = !DILocation(line: 702, column: 21, scope: !2429)
!2431 = !DILocation(line: 702, column: 21, scope: !2432)
!2432 = distinct !DILexicalBlock(scope: !2428, file: !80, line: 702, column: 21)
!2433 = !DILocation(line: 702, column: 21, scope: !2434)
!2434 = distinct !DILexicalBlock(scope: !2435, file: !80, line: 702, column: 21)
!2435 = distinct !DILexicalBlock(scope: !2432, file: !80, line: 702, column: 21)
!2436 = !DILocation(line: 702, column: 21, scope: !2435)
!2437 = !DILocation(line: 702, column: 21, scope: !2438)
!2438 = distinct !DILexicalBlock(scope: !2439, file: !80, line: 702, column: 21)
!2439 = distinct !DILexicalBlock(scope: !2432, file: !80, line: 702, column: 21)
!2440 = !DILocation(line: 702, column: 21, scope: !2439)
!2441 = !DILocation(line: 703, column: 21, scope: !2360)
!2442 = !DILocation(line: 703, column: 21, scope: !2443)
!2443 = distinct !DILexicalBlock(scope: !2444, file: !80, line: 703, column: 21)
!2444 = distinct !DILexicalBlock(scope: !2360, file: !80, line: 703, column: 21)
!2445 = !DILocation(line: 703, column: 21, scope: !2444)
!2446 = !DILocation(line: 704, column: 25, scope: !2360)
!2447 = !DILocation(line: 704, column: 29, scope: !2360)
!2448 = !DILocation(line: 704, column: 23, scope: !2360)
!2449 = !DILocation(line: 686, column: 17, scope: !2361)
!2450 = distinct !{!2450, !2451, !2452}
!2451 = !DILocation(line: 686, column: 17, scope: !2362)
!2452 = !DILocation(line: 705, column: 19, scope: !2362)
!2453 = !DILocation(line: 707, column: 17, scope: !2352)
!2454 = !DILocation(line: 710, column: 9, scope: !1952)
!2455 = !DILocation(line: 712, column: 16, scope: !2456)
!2456 = distinct !DILexicalBlock(scope: !1898, file: !80, line: 712, column: 11)
!2457 = !DILocation(line: 712, column: 34, scope: !2456)
!2458 = !DILocation(line: 712, column: 37, scope: !2456)
!2459 = !DILocation(line: 712, column: 51, scope: !2456)
!2460 = !DILocation(line: 713, column: 15, scope: !2456)
!2461 = !DILocation(line: 713, column: 18, scope: !2456)
!2462 = !DILocation(line: 714, column: 14, scope: !2456)
!2463 = !DILocation(line: 714, column: 17, scope: !2456)
!2464 = !DILocation(line: 715, column: 14, scope: !2456)
!2465 = !DILocation(line: 715, column: 17, scope: !2456)
!2466 = !DILocation(line: 715, column: 33, scope: !2456)
!2467 = !DILocation(line: 715, column: 35, scope: !2456)
!2468 = !DILocation(line: 715, column: 51, scope: !2456)
!2469 = !DILocation(line: 715, column: 53, scope: !2456)
!2470 = !DILocation(line: 715, column: 47, scope: !2456)
!2471 = !DILocation(line: 715, column: 65, scope: !2456)
!2472 = !DILocation(line: 716, column: 11, scope: !2456)
!2473 = !DILocation(line: 716, column: 15, scope: !2456)
!2474 = !DILocation(line: 712, column: 11, scope: !1898)
!2475 = !DILocation(line: 717, column: 9, scope: !2456)
!2476 = !DILabel(scope: !1898, name: "store_escape", file: !80, line: 719)
!2477 = !DILocation(line: 719, column: 5, scope: !1898)
!2478 = !DILocation(line: 720, column: 7, scope: !1898)
!2479 = !DILocation(line: 720, column: 7, scope: !2480)
!2480 = distinct !DILexicalBlock(scope: !2481, file: !80, line: 720, column: 7)
!2481 = distinct !DILexicalBlock(scope: !1898, file: !80, line: 720, column: 7)
!2482 = !DILocation(line: 720, column: 7, scope: !2481)
!2483 = !DILocation(line: 720, column: 7, scope: !2484)
!2484 = distinct !DILexicalBlock(scope: !2481, file: !80, line: 720, column: 7)
!2485 = !DILocation(line: 720, column: 7, scope: !2486)
!2486 = distinct !DILexicalBlock(scope: !2484, file: !80, line: 720, column: 7)
!2487 = !DILocation(line: 720, column: 7, scope: !2488)
!2488 = distinct !DILexicalBlock(scope: !2489, file: !80, line: 720, column: 7)
!2489 = distinct !DILexicalBlock(scope: !2486, file: !80, line: 720, column: 7)
!2490 = !DILocation(line: 720, column: 7, scope: !2489)
!2491 = !DILocation(line: 720, column: 7, scope: !2492)
!2492 = distinct !DILexicalBlock(scope: !2493, file: !80, line: 720, column: 7)
!2493 = distinct !DILexicalBlock(scope: !2486, file: !80, line: 720, column: 7)
!2494 = !DILocation(line: 720, column: 7, scope: !2493)
!2495 = !DILocation(line: 720, column: 7, scope: !2496)
!2496 = distinct !DILexicalBlock(scope: !2497, file: !80, line: 720, column: 7)
!2497 = distinct !DILexicalBlock(scope: !2486, file: !80, line: 720, column: 7)
!2498 = !DILocation(line: 720, column: 7, scope: !2497)
!2499 = !DILocation(line: 720, column: 7, scope: !2500)
!2500 = distinct !DILexicalBlock(scope: !2501, file: !80, line: 720, column: 7)
!2501 = distinct !DILexicalBlock(scope: !2481, file: !80, line: 720, column: 7)
!2502 = !DILocation(line: 720, column: 7, scope: !2501)
!2503 = !DILabel(scope: !1898, name: "store_c", file: !80, line: 722)
!2504 = !DILocation(line: 722, column: 5, scope: !1898)
!2505 = !DILocation(line: 723, column: 7, scope: !1898)
!2506 = !DILocation(line: 723, column: 7, scope: !2507)
!2507 = distinct !DILexicalBlock(scope: !2508, file: !80, line: 723, column: 7)
!2508 = distinct !DILexicalBlock(scope: !1898, file: !80, line: 723, column: 7)
!2509 = !DILocation(line: 723, column: 7, scope: !2508)
!2510 = !DILocation(line: 723, column: 7, scope: !2511)
!2511 = distinct !DILexicalBlock(scope: !2507, file: !80, line: 723, column: 7)
!2512 = !DILocation(line: 723, column: 7, scope: !2513)
!2513 = distinct !DILexicalBlock(scope: !2514, file: !80, line: 723, column: 7)
!2514 = distinct !DILexicalBlock(scope: !2511, file: !80, line: 723, column: 7)
!2515 = !DILocation(line: 723, column: 7, scope: !2514)
!2516 = !DILocation(line: 723, column: 7, scope: !2517)
!2517 = distinct !DILexicalBlock(scope: !2518, file: !80, line: 723, column: 7)
!2518 = distinct !DILexicalBlock(scope: !2511, file: !80, line: 723, column: 7)
!2519 = !DILocation(line: 723, column: 7, scope: !2518)
!2520 = !DILocation(line: 724, column: 7, scope: !1898)
!2521 = !DILocation(line: 724, column: 7, scope: !2522)
!2522 = distinct !DILexicalBlock(scope: !2523, file: !80, line: 724, column: 7)
!2523 = distinct !DILexicalBlock(scope: !1898, file: !80, line: 724, column: 7)
!2524 = !DILocation(line: 724, column: 7, scope: !2523)
!2525 = !DILocation(line: 726, column: 13, scope: !2526)
!2526 = distinct !DILexicalBlock(scope: !1898, file: !80, line: 726, column: 11)
!2527 = !DILocation(line: 726, column: 11, scope: !1898)
!2528 = !DILocation(line: 727, column: 38, scope: !2526)
!2529 = !DILocation(line: 727, column: 9, scope: !2526)
!2530 = !DILocation(line: 728, column: 5, scope: !1898)
!2531 = !DILocation(line: 400, column: 75, scope: !1887)
!2532 = !DILocation(line: 400, column: 3, scope: !1887)
!2533 = distinct !{!2533, !1896, !2534}
!2534 = !DILocation(line: 728, column: 5, scope: !1884)
!2535 = !DILocation(line: 730, column: 7, scope: !2536)
!2536 = distinct !DILexicalBlock(scope: !1744, file: !80, line: 730, column: 7)
!2537 = !DILocation(line: 730, column: 11, scope: !2536)
!2538 = !DILocation(line: 730, column: 16, scope: !2536)
!2539 = !DILocation(line: 730, column: 19, scope: !2536)
!2540 = !DILocation(line: 730, column: 33, scope: !2536)
!2541 = !DILocation(line: 731, column: 7, scope: !2536)
!2542 = !DILocation(line: 731, column: 10, scope: !2536)
!2543 = !DILocation(line: 730, column: 7, scope: !1744)
!2544 = !DILocation(line: 732, column: 5, scope: !2536)
!2545 = !DILocation(line: 738, column: 7, scope: !2546)
!2546 = distinct !DILexicalBlock(scope: !1744, file: !80, line: 738, column: 7)
!2547 = !DILocation(line: 738, column: 21, scope: !2546)
!2548 = !DILocation(line: 738, column: 51, scope: !2546)
!2549 = !DILocation(line: 738, column: 56, scope: !2546)
!2550 = !DILocation(line: 739, column: 7, scope: !2546)
!2551 = !DILocation(line: 739, column: 10, scope: !2546)
!2552 = !DILocation(line: 738, column: 7, scope: !1744)
!2553 = !DILocation(line: 741, column: 11, scope: !2554)
!2554 = distinct !DILexicalBlock(scope: !2555, file: !80, line: 741, column: 11)
!2555 = distinct !DILexicalBlock(scope: !2546, file: !80, line: 740, column: 5)
!2556 = !DILocation(line: 741, column: 11, scope: !2555)
!2557 = !DILocation(line: 742, column: 42, scope: !2554)
!2558 = !DILocation(line: 742, column: 50, scope: !2554)
!2559 = !DILocation(line: 742, column: 67, scope: !2554)
!2560 = !DILocation(line: 742, column: 72, scope: !2554)
!2561 = !DILocation(line: 744, column: 42, scope: !2554)
!2562 = !DILocation(line: 744, column: 49, scope: !2554)
!2563 = !DILocation(line: 745, column: 42, scope: !2554)
!2564 = !DILocation(line: 745, column: 54, scope: !2554)
!2565 = !DILocation(line: 742, column: 16, scope: !2554)
!2566 = !DILocation(line: 742, column: 9, scope: !2554)
!2567 = !DILocation(line: 746, column: 18, scope: !2568)
!2568 = distinct !DILexicalBlock(scope: !2554, file: !80, line: 746, column: 16)
!2569 = !DILocation(line: 746, column: 29, scope: !2568)
!2570 = !DILocation(line: 746, column: 32, scope: !2568)
!2571 = !DILocation(line: 746, column: 16, scope: !2554)
!2572 = !DILocation(line: 749, column: 24, scope: !2573)
!2573 = distinct !DILexicalBlock(scope: !2568, file: !80, line: 747, column: 9)
!2574 = !DILocation(line: 749, column: 22, scope: !2573)
!2575 = !DILocation(line: 750, column: 15, scope: !2573)
!2576 = !DILocation(line: 751, column: 11, scope: !2573)
!2577 = !DILocation(line: 753, column: 5, scope: !2555)
!2578 = !DILocation(line: 755, column: 7, scope: !2579)
!2579 = distinct !DILexicalBlock(scope: !1744, file: !80, line: 755, column: 7)
!2580 = !DILocation(line: 755, column: 20, scope: !2579)
!2581 = !DILocation(line: 755, column: 24, scope: !2579)
!2582 = !DILocation(line: 755, column: 7, scope: !1744)
!2583 = !DILocation(line: 756, column: 5, scope: !2579)
!2584 = !DILocation(line: 756, column: 13, scope: !2585)
!2585 = distinct !DILexicalBlock(scope: !2586, file: !80, line: 756, column: 5)
!2586 = distinct !DILexicalBlock(scope: !2579, file: !80, line: 756, column: 5)
!2587 = !DILocation(line: 756, column: 12, scope: !2585)
!2588 = !DILocation(line: 756, column: 5, scope: !2586)
!2589 = !DILocation(line: 757, column: 7, scope: !2585)
!2590 = !DILocation(line: 757, column: 7, scope: !2591)
!2591 = distinct !DILexicalBlock(scope: !2592, file: !80, line: 757, column: 7)
!2592 = distinct !DILexicalBlock(scope: !2585, file: !80, line: 757, column: 7)
!2593 = !DILocation(line: 757, column: 7, scope: !2592)
!2594 = !DILocation(line: 756, column: 39, scope: !2585)
!2595 = !DILocation(line: 756, column: 5, scope: !2585)
!2596 = distinct !{!2596, !2588, !2597}
!2597 = !DILocation(line: 757, column: 7, scope: !2586)
!2598 = !DILocation(line: 759, column: 7, scope: !2599)
!2599 = distinct !DILexicalBlock(scope: !1744, file: !80, line: 759, column: 7)
!2600 = !DILocation(line: 759, column: 13, scope: !2599)
!2601 = !DILocation(line: 759, column: 11, scope: !2599)
!2602 = !DILocation(line: 759, column: 7, scope: !1744)
!2603 = !DILocation(line: 760, column: 5, scope: !2599)
!2604 = !DILocation(line: 760, column: 12, scope: !2599)
!2605 = !DILocation(line: 760, column: 17, scope: !2599)
!2606 = !DILocation(line: 761, column: 10, scope: !1744)
!2607 = !DILocation(line: 761, column: 3, scope: !1744)
!2608 = !DILabel(scope: !1744, name: "force_outer_quoting_style", file: !80, line: 763)
!2609 = !DILocation(line: 763, column: 2, scope: !1744)
!2610 = !DILocation(line: 766, column: 7, scope: !2611)
!2611 = distinct !DILexicalBlock(scope: !1744, file: !80, line: 766, column: 7)
!2612 = !DILocation(line: 766, column: 21, scope: !2611)
!2613 = !DILocation(line: 766, column: 51, scope: !2611)
!2614 = !DILocation(line: 766, column: 54, scope: !2611)
!2615 = !DILocation(line: 766, column: 7, scope: !1744)
!2616 = !DILocation(line: 767, column: 19, scope: !2611)
!2617 = !DILocation(line: 767, column: 5, scope: !2611)
!2618 = !DILocation(line: 768, column: 36, scope: !1744)
!2619 = !DILocation(line: 768, column: 44, scope: !1744)
!2620 = !DILocation(line: 768, column: 56, scope: !1744)
!2621 = !DILocation(line: 768, column: 61, scope: !1744)
!2622 = !DILocation(line: 769, column: 36, scope: !1744)
!2623 = !DILocation(line: 770, column: 36, scope: !1744)
!2624 = !DILocation(line: 770, column: 42, scope: !1744)
!2625 = !DILocation(line: 771, column: 36, scope: !1744)
!2626 = !DILocation(line: 771, column: 48, scope: !1744)
!2627 = !DILocation(line: 768, column: 10, scope: !1744)
!2628 = !DILocation(line: 768, column: 3, scope: !1744)
!2629 = !DILocation(line: 772, column: 1, scope: !1744)
!2630 = !DILocalVariable(name: "buffer", arg: 1, scope: !2631, file: !80, line: 256, type: !7)
!2631 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !80, file: !80, line: 256, type: !1745, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2632, retainedNodes: !4)
!2632 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !2633, nameTableKind: None)
!2633 = !{!2634, !2636, !2638, !2647, !2649, !2651, !2658, !2660}
!2634 = !DIGlobalVariableExpression(var: !2635, expr: !DIExpression())
!2635 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2632, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!2636 = !DIGlobalVariableExpression(var: !2637, expr: !DIExpression())
!2637 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2632, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!2638 = !DIGlobalVariableExpression(var: !2639, expr: !DIExpression())
!2639 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2632, file: !80, line: 1052, type: !2640, isLocal: false, isDefinition: true)
!2640 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !2641)
!2641 = !{!2642, !2643, !2644, !2645, !2646}
!2642 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2640, file: !80, line: 68, baseType: !57, size: 32)
!2643 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2640, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!2644 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2640, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!2645 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2640, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!2646 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2640, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!2647 = !DIGlobalVariableExpression(var: !2648, expr: !DIExpression())
!2648 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2632, file: !80, line: 116, type: !2640, isLocal: true, isDefinition: true)
!2649 = !DIGlobalVariableExpression(var: !2650, expr: !DIExpression())
!2650 = distinct !DIGlobalVariable(name: "slot0", scope: !2632, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!2651 = !DIGlobalVariableExpression(var: !2652, expr: !DIExpression())
!2652 = distinct !DIGlobalVariable(name: "slotvec", scope: !2632, file: !80, line: 845, type: !2653, isLocal: true, isDefinition: true)
!2653 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2654, size: 64)
!2654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !2655)
!2655 = !{!2656, !2657}
!2656 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2654, file: !80, line: 836, baseType: !74, size: 64)
!2657 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2654, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!2658 = !DIGlobalVariableExpression(var: !2659, expr: !DIExpression())
!2659 = distinct !DIGlobalVariable(name: "nslots", scope: !2632, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!2660 = !DIGlobalVariableExpression(var: !2661, expr: !DIExpression())
!2661 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2632, file: !80, line: 844, type: !2654, isLocal: true, isDefinition: true)
!2662 = !DILocalVariable(name: "buffersize", arg: 2, scope: !2631, file: !80, line: 256, type: !74)
!2663 = !DILocalVariable(name: "arg", arg: 3, scope: !2631, file: !80, line: 257, type: !16)
!2664 = !DILocalVariable(name: "argsize", arg: 4, scope: !2631, file: !80, line: 257, type: !74)
!2665 = !DILocalVariable(name: "quoting_style", arg: 5, scope: !2631, file: !80, line: 258, type: !57)
!2666 = !DILocalVariable(name: "flags", arg: 6, scope: !2631, file: !80, line: 258, type: !19)
!2667 = !DILocalVariable(name: "quote_these_too", arg: 7, scope: !2631, file: !80, line: 259, type: !1747)
!2668 = !DILocalVariable(name: "left_quote", arg: 8, scope: !2631, file: !80, line: 260, type: !16)
!2669 = !DILocalVariable(name: "right_quote", arg: 9, scope: !2631, file: !80, line: 261, type: !16)
!2670 = !DILocalVariable(name: "i", scope: !2631, file: !80, line: 263, type: !74)
!2671 = !DILocalVariable(name: "len", scope: !2631, file: !80, line: 264, type: !74)
!2672 = !DILocalVariable(name: "orig_buffersize", scope: !2631, file: !80, line: 265, type: !74)
!2673 = !DILocalVariable(name: "quote_string", scope: !2631, file: !80, line: 266, type: !16)
!2674 = !DILocalVariable(name: "quote_string_len", scope: !2631, file: !80, line: 267, type: !74)
!2675 = !DILocalVariable(name: "backslash_escapes", scope: !2631, file: !80, line: 268, type: !38)
!2676 = !DILocalVariable(name: "unibyte_locale", scope: !2631, file: !80, line: 269, type: !38)
!2677 = !DILocalVariable(name: "elide_outer_quotes", scope: !2631, file: !80, line: 270, type: !38)
!2678 = !DILocalVariable(name: "pending_shell_escape_end", scope: !2631, file: !80, line: 271, type: !38)
!2679 = !DILocalVariable(name: "encountered_single_quote", scope: !2631, file: !80, line: 272, type: !38)
!2680 = !DILocalVariable(name: "all_c_and_shell_quote_compat", scope: !2631, file: !80, line: 273, type: !38)
!2681 = !DILocalVariable(name: "escaping", scope: !2682, file: !80, line: 405, type: !38)
!2682 = distinct !DILexicalBlock(scope: !2683, file: !80, line: 401, column: 5)
!2683 = distinct !DILexicalBlock(scope: !2684, file: !80, line: 400, column: 3)
!2684 = distinct !DILexicalBlock(scope: !2685, file: !80, line: 400, column: 3)
!2685 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !80, file: !80, line: 256, type: !1745, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2686, retainedNodes: !4)
!2686 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !2687, nameTableKind: None)
!2687 = !{!2688, !2690, !2692, !2701, !2703, !2705, !2712, !2714}
!2688 = !DIGlobalVariableExpression(var: !2689, expr: !DIExpression())
!2689 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2686, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!2690 = !DIGlobalVariableExpression(var: !2691, expr: !DIExpression())
!2691 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2686, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!2692 = !DIGlobalVariableExpression(var: !2693, expr: !DIExpression())
!2693 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2686, file: !80, line: 1052, type: !2694, isLocal: false, isDefinition: true)
!2694 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !2695)
!2695 = !{!2696, !2697, !2698, !2699, !2700}
!2696 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2694, file: !80, line: 68, baseType: !57, size: 32)
!2697 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2694, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!2698 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2694, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!2699 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2694, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!2700 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2694, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!2701 = !DIGlobalVariableExpression(var: !2702, expr: !DIExpression())
!2702 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2686, file: !80, line: 116, type: !2694, isLocal: true, isDefinition: true)
!2703 = !DIGlobalVariableExpression(var: !2704, expr: !DIExpression())
!2704 = distinct !DIGlobalVariable(name: "slot0", scope: !2686, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!2705 = !DIGlobalVariableExpression(var: !2706, expr: !DIExpression())
!2706 = distinct !DIGlobalVariable(name: "slotvec", scope: !2686, file: !80, line: 845, type: !2707, isLocal: true, isDefinition: true)
!2707 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2708, size: 64)
!2708 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !2709)
!2709 = !{!2710, !2711}
!2710 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2708, file: !80, line: 836, baseType: !74, size: 64)
!2711 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2708, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!2712 = !DIGlobalVariableExpression(var: !2713, expr: !DIExpression())
!2713 = distinct !DIGlobalVariable(name: "nslots", scope: !2686, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!2714 = !DIGlobalVariableExpression(var: !2715, expr: !DIExpression())
!2715 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2686, file: !80, line: 844, type: !2708, isLocal: true, isDefinition: true)
!2716 = !DILocalVariable(name: "c_and_shell_quote_compat", scope: !2682, file: !80, line: 406, type: !38)
!2717 = distinct !DISubprogram(name: "gettext_quote", scope: !80, file: !80, line: 207, type: !2718, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !4)
!2718 = !DISubroutineType(types: !2719)
!2719 = !{!16, !16, !57}
!2720 = !DILocalVariable(name: "msgid", arg: 1, scope: !2717, file: !80, line: 207, type: !16)
!2721 = !DILocation(line: 207, column: 28, scope: !2717)
!2722 = !DILocalVariable(name: "s", arg: 2, scope: !2717, file: !80, line: 207, type: !57)
!2723 = !DILocation(line: 207, column: 54, scope: !2717)
!2724 = !DILocalVariable(name: "translation", scope: !2717, file: !80, line: 209, type: !16)
!2725 = !DILocation(line: 209, column: 15, scope: !2717)
!2726 = !DILocation(line: 209, column: 29, scope: !2717)
!2727 = !DILocalVariable(name: "locale_code", scope: !2717, file: !80, line: 210, type: !16)
!2728 = !DILocation(line: 210, column: 15, scope: !2717)
!2729 = !DILocation(line: 212, column: 7, scope: !2730)
!2730 = distinct !DILexicalBlock(scope: !2717, file: !80, line: 212, column: 7)
!2731 = !DILocation(line: 212, column: 22, scope: !2730)
!2732 = !DILocation(line: 212, column: 19, scope: !2730)
!2733 = !DILocation(line: 212, column: 7, scope: !2717)
!2734 = !DILocation(line: 213, column: 12, scope: !2730)
!2735 = !DILocation(line: 213, column: 5, scope: !2730)
!2736 = !DILocation(line: 233, column: 17, scope: !2717)
!2737 = !DILocation(line: 233, column: 15, scope: !2717)
!2738 = !DILocation(line: 234, column: 7, scope: !2739)
!2739 = distinct !DILexicalBlock(scope: !2717, file: !80, line: 234, column: 7)
!2740 = !DILocation(line: 234, column: 7, scope: !2717)
!2741 = !DILocation(line: 235, column: 12, scope: !2739)
!2742 = !DILocation(line: 235, column: 21, scope: !2739)
!2743 = !DILocation(line: 235, column: 5, scope: !2739)
!2744 = !DILocation(line: 236, column: 7, scope: !2745)
!2745 = distinct !DILexicalBlock(scope: !2717, file: !80, line: 236, column: 7)
!2746 = !DILocation(line: 236, column: 7, scope: !2717)
!2747 = !DILocation(line: 237, column: 12, scope: !2745)
!2748 = !DILocation(line: 237, column: 21, scope: !2745)
!2749 = !DILocation(line: 237, column: 5, scope: !2745)
!2750 = !DILocation(line: 239, column: 11, scope: !2717)
!2751 = !DILocation(line: 239, column: 13, scope: !2717)
!2752 = !DILocation(line: 239, column: 3, scope: !2717)
!2753 = !DILocation(line: 240, column: 1, scope: !2717)
!2754 = !DILocalVariable(name: "msgid", arg: 1, scope: !2755, file: !80, line: 207, type: !16)
!2755 = distinct !DISubprogram(name: "gettext_quote", scope: !80, file: !80, line: 207, type: !2718, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2756, retainedNodes: !4)
!2756 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !2757, nameTableKind: None)
!2757 = !{!2758, !2760, !2762, !2771, !2773, !2775, !2782, !2784}
!2758 = !DIGlobalVariableExpression(var: !2759, expr: !DIExpression())
!2759 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2756, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!2760 = !DIGlobalVariableExpression(var: !2761, expr: !DIExpression())
!2761 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2756, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!2762 = !DIGlobalVariableExpression(var: !2763, expr: !DIExpression())
!2763 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2756, file: !80, line: 1052, type: !2764, isLocal: false, isDefinition: true)
!2764 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !2765)
!2765 = !{!2766, !2767, !2768, !2769, !2770}
!2766 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2764, file: !80, line: 68, baseType: !57, size: 32)
!2767 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2764, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!2768 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2764, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!2769 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2764, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!2770 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2764, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!2771 = !DIGlobalVariableExpression(var: !2772, expr: !DIExpression())
!2772 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2756, file: !80, line: 116, type: !2764, isLocal: true, isDefinition: true)
!2773 = !DIGlobalVariableExpression(var: !2774, expr: !DIExpression())
!2774 = distinct !DIGlobalVariable(name: "slot0", scope: !2756, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!2775 = !DIGlobalVariableExpression(var: !2776, expr: !DIExpression())
!2776 = distinct !DIGlobalVariable(name: "slotvec", scope: !2756, file: !80, line: 845, type: !2777, isLocal: true, isDefinition: true)
!2777 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2778, size: 64)
!2778 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !2779)
!2779 = !{!2780, !2781}
!2780 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2778, file: !80, line: 836, baseType: !74, size: 64)
!2781 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2778, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!2782 = !DIGlobalVariableExpression(var: !2783, expr: !DIExpression())
!2783 = distinct !DIGlobalVariable(name: "nslots", scope: !2756, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!2784 = !DIGlobalVariableExpression(var: !2785, expr: !DIExpression())
!2785 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2756, file: !80, line: 844, type: !2778, isLocal: true, isDefinition: true)
!2786 = !DILocalVariable(name: "s", arg: 2, scope: !2755, file: !80, line: 207, type: !57)
!2787 = !DILocalVariable(name: "translation", scope: !2755, file: !80, line: 209, type: !16)
!2788 = !DILocalVariable(name: "locale_code", scope: !2755, file: !80, line: 210, type: !16)
!2789 = distinct !DISubprogram(name: "quotearg_style", scope: !80, file: !80, line: 970, type: !2790, scopeLine: 971, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !4)
!2790 = !DISubroutineType(types: !2791)
!2791 = !{!7, !57, !16}
!2792 = !DILocalVariable(name: "s", arg: 1, scope: !2789, file: !80, line: 970, type: !57)
!2793 = !DILocation(line: 970, column: 36, scope: !2789)
!2794 = !DILocalVariable(name: "arg", arg: 2, scope: !2789, file: !80, line: 970, type: !16)
!2795 = !DILocation(line: 970, column: 51, scope: !2789)
!2796 = !DILocation(line: 972, column: 31, scope: !2789)
!2797 = !DILocation(line: 972, column: 34, scope: !2789)
!2798 = !DILocation(line: 972, column: 10, scope: !2789)
!2799 = !DILocation(line: 972, column: 3, scope: !2789)
!2800 = distinct !DISubprogram(name: "quotearg_char_mem", scope: !80, file: !80, line: 982, type: !2801, scopeLine: 983, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !4)
!2801 = !DISubroutineType(types: !2802)
!2802 = !{!7, !16, !74, !8}
!2803 = !DILocalVariable(name: "arg", arg: 1, scope: !2800, file: !80, line: 982, type: !16)
!2804 = !DILocation(line: 982, column: 32, scope: !2800)
!2805 = !DILocalVariable(name: "argsize", arg: 2, scope: !2800, file: !80, line: 982, type: !74)
!2806 = !DILocation(line: 982, column: 44, scope: !2800)
!2807 = !DILocalVariable(name: "ch", arg: 3, scope: !2800, file: !80, line: 982, type: !8)
!2808 = !DILocation(line: 982, column: 58, scope: !2800)
!2809 = !DILocalVariable(name: "options", scope: !2800, file: !80, line: 984, type: !93)
!2810 = !DILocation(line: 984, column: 26, scope: !2800)
!2811 = !DILocation(line: 985, column: 13, scope: !2800)
!2812 = !DILocation(line: 986, column: 31, scope: !2800)
!2813 = !DILocation(line: 986, column: 3, scope: !2800)
!2814 = !DILocation(line: 987, column: 33, scope: !2800)
!2815 = !DILocation(line: 987, column: 38, scope: !2800)
!2816 = !DILocation(line: 987, column: 10, scope: !2800)
!2817 = !DILocation(line: 987, column: 3, scope: !2800)
!2818 = !DILocalVariable(name: "arg", arg: 1, scope: !2819, file: !80, line: 982, type: !16)
!2819 = distinct !DISubprogram(name: "quotearg_char_mem", scope: !80, file: !80, line: 982, type: !2801, scopeLine: 983, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2820, retainedNodes: !4)
!2820 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !2821, nameTableKind: None)
!2821 = !{!2822, !2824, !2826, !2835, !2837, !2839, !2846, !2848}
!2822 = !DIGlobalVariableExpression(var: !2823, expr: !DIExpression())
!2823 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2820, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!2824 = !DIGlobalVariableExpression(var: !2825, expr: !DIExpression())
!2825 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2820, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!2826 = !DIGlobalVariableExpression(var: !2827, expr: !DIExpression())
!2827 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2820, file: !80, line: 1052, type: !2828, isLocal: false, isDefinition: true)
!2828 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !2829)
!2829 = !{!2830, !2831, !2832, !2833, !2834}
!2830 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2828, file: !80, line: 68, baseType: !57, size: 32)
!2831 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2828, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!2832 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2828, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!2833 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2828, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!2834 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2828, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!2835 = !DIGlobalVariableExpression(var: !2836, expr: !DIExpression())
!2836 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2820, file: !80, line: 116, type: !2828, isLocal: true, isDefinition: true)
!2837 = !DIGlobalVariableExpression(var: !2838, expr: !DIExpression())
!2838 = distinct !DIGlobalVariable(name: "slot0", scope: !2820, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!2839 = !DIGlobalVariableExpression(var: !2840, expr: !DIExpression())
!2840 = distinct !DIGlobalVariable(name: "slotvec", scope: !2820, file: !80, line: 845, type: !2841, isLocal: true, isDefinition: true)
!2841 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2842, size: 64)
!2842 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !2843)
!2843 = !{!2844, !2845}
!2844 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2842, file: !80, line: 836, baseType: !74, size: 64)
!2845 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2842, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!2846 = !DIGlobalVariableExpression(var: !2847, expr: !DIExpression())
!2847 = distinct !DIGlobalVariable(name: "nslots", scope: !2820, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!2848 = !DIGlobalVariableExpression(var: !2849, expr: !DIExpression())
!2849 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2820, file: !80, line: 844, type: !2842, isLocal: true, isDefinition: true)
!2850 = !DILocalVariable(name: "argsize", arg: 2, scope: !2819, file: !80, line: 982, type: !74)
!2851 = !DILocalVariable(name: "ch", arg: 3, scope: !2819, file: !80, line: 982, type: !8)
!2852 = !DILocalVariable(name: "options", scope: !2819, file: !80, line: 984, type: !2828)
!2853 = distinct !DISubprogram(name: "quotearg_char", scope: !80, file: !80, line: 991, type: !2854, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !4)
!2854 = !DISubroutineType(types: !2855)
!2855 = !{!7, !16, !8}
!2856 = !DILocalVariable(name: "arg", arg: 1, scope: !2853, file: !80, line: 991, type: !16)
!2857 = !DILocation(line: 991, column: 28, scope: !2853)
!2858 = !DILocalVariable(name: "ch", arg: 2, scope: !2853, file: !80, line: 991, type: !8)
!2859 = !DILocation(line: 991, column: 38, scope: !2853)
!2860 = !DILocation(line: 993, column: 29, scope: !2853)
!2861 = !DILocation(line: 993, column: 44, scope: !2853)
!2862 = !DILocation(line: 993, column: 10, scope: !2853)
!2863 = !DILocation(line: 993, column: 3, scope: !2853)
!2864 = !DILocalVariable(name: "arg", arg: 1, scope: !2865, file: !80, line: 991, type: !16)
!2865 = distinct !DISubprogram(name: "quotearg_char", scope: !80, file: !80, line: 991, type: !2854, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2866, retainedNodes: !4)
!2866 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !2867, nameTableKind: None)
!2867 = !{!2868, !2870, !2872, !2881, !2883, !2885, !2892, !2894}
!2868 = !DIGlobalVariableExpression(var: !2869, expr: !DIExpression())
!2869 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2866, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!2870 = !DIGlobalVariableExpression(var: !2871, expr: !DIExpression())
!2871 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2866, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!2872 = !DIGlobalVariableExpression(var: !2873, expr: !DIExpression())
!2873 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2866, file: !80, line: 1052, type: !2874, isLocal: false, isDefinition: true)
!2874 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !2875)
!2875 = !{!2876, !2877, !2878, !2879, !2880}
!2876 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2874, file: !80, line: 68, baseType: !57, size: 32)
!2877 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2874, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!2878 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2874, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!2879 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2874, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!2880 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2874, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!2881 = !DIGlobalVariableExpression(var: !2882, expr: !DIExpression())
!2882 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2866, file: !80, line: 116, type: !2874, isLocal: true, isDefinition: true)
!2883 = !DIGlobalVariableExpression(var: !2884, expr: !DIExpression())
!2884 = distinct !DIGlobalVariable(name: "slot0", scope: !2866, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!2885 = !DIGlobalVariableExpression(var: !2886, expr: !DIExpression())
!2886 = distinct !DIGlobalVariable(name: "slotvec", scope: !2866, file: !80, line: 845, type: !2887, isLocal: true, isDefinition: true)
!2887 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2888, size: 64)
!2888 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !2889)
!2889 = !{!2890, !2891}
!2890 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2888, file: !80, line: 836, baseType: !74, size: 64)
!2891 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2888, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!2892 = !DIGlobalVariableExpression(var: !2893, expr: !DIExpression())
!2893 = distinct !DIGlobalVariable(name: "nslots", scope: !2866, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!2894 = !DIGlobalVariableExpression(var: !2895, expr: !DIExpression())
!2895 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2866, file: !80, line: 844, type: !2888, isLocal: true, isDefinition: true)
!2896 = !DILocalVariable(name: "ch", arg: 2, scope: !2865, file: !80, line: 991, type: !8)
!2897 = distinct !DISubprogram(name: "quotearg_colon", scope: !80, file: !80, line: 997, type: !2898, scopeLine: 998, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !4)
!2898 = !DISubroutineType(types: !2899)
!2899 = !{!7, !16}
!2900 = !DILocalVariable(name: "arg", arg: 1, scope: !2897, file: !80, line: 997, type: !16)
!2901 = !DILocation(line: 997, column: 29, scope: !2897)
!2902 = !DILocation(line: 999, column: 25, scope: !2897)
!2903 = !DILocation(line: 999, column: 10, scope: !2897)
!2904 = !DILocation(line: 999, column: 3, scope: !2897)
!2905 = !DILocalVariable(name: "arg", arg: 1, scope: !2906, file: !80, line: 997, type: !16)
!2906 = distinct !DISubprogram(name: "quotearg_colon", scope: !80, file: !80, line: 997, type: !2898, scopeLine: 998, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2907, retainedNodes: !4)
!2907 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !2908, nameTableKind: None)
!2908 = !{!2909, !2911, !2913, !2922, !2924, !2926, !2933, !2935}
!2909 = !DIGlobalVariableExpression(var: !2910, expr: !DIExpression())
!2910 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2907, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!2911 = !DIGlobalVariableExpression(var: !2912, expr: !DIExpression())
!2912 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2907, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!2913 = !DIGlobalVariableExpression(var: !2914, expr: !DIExpression())
!2914 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2907, file: !80, line: 1052, type: !2915, isLocal: false, isDefinition: true)
!2915 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !2916)
!2916 = !{!2917, !2918, !2919, !2920, !2921}
!2917 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2915, file: !80, line: 68, baseType: !57, size: 32)
!2918 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2915, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!2919 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2915, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!2920 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2915, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!2921 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2915, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!2922 = !DIGlobalVariableExpression(var: !2923, expr: !DIExpression())
!2923 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2907, file: !80, line: 116, type: !2915, isLocal: true, isDefinition: true)
!2924 = !DIGlobalVariableExpression(var: !2925, expr: !DIExpression())
!2925 = distinct !DIGlobalVariable(name: "slot0", scope: !2907, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!2926 = !DIGlobalVariableExpression(var: !2927, expr: !DIExpression())
!2927 = distinct !DIGlobalVariable(name: "slotvec", scope: !2907, file: !80, line: 845, type: !2928, isLocal: true, isDefinition: true)
!2928 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2929, size: 64)
!2929 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !2930)
!2930 = !{!2931, !2932}
!2931 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2929, file: !80, line: 836, baseType: !74, size: 64)
!2932 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2929, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!2933 = !DIGlobalVariableExpression(var: !2934, expr: !DIExpression())
!2934 = distinct !DIGlobalVariable(name: "nslots", scope: !2907, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!2935 = !DIGlobalVariableExpression(var: !2936, expr: !DIExpression())
!2936 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2907, file: !80, line: 844, type: !2929, isLocal: true, isDefinition: true)
!2937 = distinct !DISubprogram(name: "quote_n_mem", scope: !80, file: !80, line: 1061, type: !2938, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !4)
!2938 = !DISubroutineType(types: !2939)
!2939 = !{!16, !19, !16, !74}
!2940 = !DILocalVariable(name: "n", arg: 1, scope: !2937, file: !80, line: 1061, type: !19)
!2941 = !DILocation(line: 1061, column: 18, scope: !2937)
!2942 = !DILocalVariable(name: "arg", arg: 2, scope: !2937, file: !80, line: 1061, type: !16)
!2943 = !DILocation(line: 1061, column: 33, scope: !2937)
!2944 = !DILocalVariable(name: "argsize", arg: 3, scope: !2937, file: !80, line: 1061, type: !74)
!2945 = !DILocation(line: 1061, column: 45, scope: !2937)
!2946 = !DILocation(line: 1063, column: 30, scope: !2937)
!2947 = !DILocation(line: 1063, column: 33, scope: !2937)
!2948 = !DILocation(line: 1063, column: 38, scope: !2937)
!2949 = !DILocation(line: 1063, column: 10, scope: !2937)
!2950 = !DILocation(line: 1063, column: 3, scope: !2937)
!2951 = !DILocalVariable(name: "n", arg: 1, scope: !2952, file: !80, line: 1061, type: !19)
!2952 = distinct !DISubprogram(name: "quote_n_mem", scope: !80, file: !80, line: 1061, type: !2938, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2953, retainedNodes: !4)
!2953 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !2954, nameTableKind: None)
!2954 = !{!2955, !2957, !2959, !2968, !2970, !2972, !2979, !2981}
!2955 = !DIGlobalVariableExpression(var: !2956, expr: !DIExpression())
!2956 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2953, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!2957 = !DIGlobalVariableExpression(var: !2958, expr: !DIExpression())
!2958 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2953, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!2959 = !DIGlobalVariableExpression(var: !2960, expr: !DIExpression())
!2960 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2953, file: !80, line: 1052, type: !2961, isLocal: false, isDefinition: true)
!2961 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !2962)
!2962 = !{!2963, !2964, !2965, !2966, !2967}
!2963 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2961, file: !80, line: 68, baseType: !57, size: 32)
!2964 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2961, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!2965 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2961, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!2966 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2961, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!2967 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2961, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!2968 = !DIGlobalVariableExpression(var: !2969, expr: !DIExpression())
!2969 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2953, file: !80, line: 116, type: !2961, isLocal: true, isDefinition: true)
!2970 = !DIGlobalVariableExpression(var: !2971, expr: !DIExpression())
!2971 = distinct !DIGlobalVariable(name: "slot0", scope: !2953, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!2972 = !DIGlobalVariableExpression(var: !2973, expr: !DIExpression())
!2973 = distinct !DIGlobalVariable(name: "slotvec", scope: !2953, file: !80, line: 845, type: !2974, isLocal: true, isDefinition: true)
!2974 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2975, size: 64)
!2975 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !2976)
!2976 = !{!2977, !2978}
!2977 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2975, file: !80, line: 836, baseType: !74, size: 64)
!2978 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2975, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!2979 = !DIGlobalVariableExpression(var: !2980, expr: !DIExpression())
!2980 = distinct !DIGlobalVariable(name: "nslots", scope: !2953, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!2981 = !DIGlobalVariableExpression(var: !2982, expr: !DIExpression())
!2982 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2953, file: !80, line: 844, type: !2975, isLocal: true, isDefinition: true)
!2983 = !DILocalVariable(name: "arg", arg: 2, scope: !2952, file: !80, line: 1061, type: !16)
!2984 = !DILocalVariable(name: "argsize", arg: 3, scope: !2952, file: !80, line: 1061, type: !74)
!2985 = distinct !DISubprogram(name: "quote_n", scope: !80, file: !80, line: 1073, type: !2986, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !4)
!2986 = !DISubroutineType(types: !2987)
!2987 = !{!16, !19, !16}
!2988 = !DILocalVariable(name: "n", arg: 1, scope: !2985, file: !80, line: 1073, type: !19)
!2989 = !DILocation(line: 1073, column: 14, scope: !2985)
!2990 = !DILocalVariable(name: "arg", arg: 2, scope: !2985, file: !80, line: 1073, type: !16)
!2991 = !DILocation(line: 1073, column: 29, scope: !2985)
!2992 = !DILocation(line: 1075, column: 23, scope: !2985)
!2993 = !DILocation(line: 1075, column: 26, scope: !2985)
!2994 = !DILocation(line: 1075, column: 10, scope: !2985)
!2995 = !DILocation(line: 1075, column: 3, scope: !2985)
!2996 = !DILocalVariable(name: "n", arg: 1, scope: !2997, file: !80, line: 1073, type: !19)
!2997 = distinct !DISubprogram(name: "quote_n", scope: !80, file: !80, line: 1073, type: !2986, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2998, retainedNodes: !4)
!2998 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !2999, nameTableKind: None)
!2999 = !{!3000, !3002, !3004, !3013, !3015, !3017, !3024, !3026}
!3000 = !DIGlobalVariableExpression(var: !3001, expr: !DIExpression())
!3001 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2998, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!3002 = !DIGlobalVariableExpression(var: !3003, expr: !DIExpression())
!3003 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2998, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!3004 = !DIGlobalVariableExpression(var: !3005, expr: !DIExpression())
!3005 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2998, file: !80, line: 1052, type: !3006, isLocal: false, isDefinition: true)
!3006 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !3007)
!3007 = !{!3008, !3009, !3010, !3011, !3012}
!3008 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !3006, file: !80, line: 68, baseType: !57, size: 32)
!3009 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3006, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!3010 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !3006, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!3011 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !3006, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!3012 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !3006, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!3013 = !DIGlobalVariableExpression(var: !3014, expr: !DIExpression())
!3014 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2998, file: !80, line: 116, type: !3006, isLocal: true, isDefinition: true)
!3015 = !DIGlobalVariableExpression(var: !3016, expr: !DIExpression())
!3016 = distinct !DIGlobalVariable(name: "slot0", scope: !2998, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!3017 = !DIGlobalVariableExpression(var: !3018, expr: !DIExpression())
!3018 = distinct !DIGlobalVariable(name: "slotvec", scope: !2998, file: !80, line: 845, type: !3019, isLocal: true, isDefinition: true)
!3019 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3020, size: 64)
!3020 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !3021)
!3021 = !{!3022, !3023}
!3022 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3020, file: !80, line: 836, baseType: !74, size: 64)
!3023 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !3020, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!3024 = !DIGlobalVariableExpression(var: !3025, expr: !DIExpression())
!3025 = distinct !DIGlobalVariable(name: "nslots", scope: !2998, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!3026 = !DIGlobalVariableExpression(var: !3027, expr: !DIExpression())
!3027 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2998, file: !80, line: 844, type: !3020, isLocal: true, isDefinition: true)
!3028 = !DILocalVariable(name: "arg", arg: 2, scope: !2997, file: !80, line: 1073, type: !16)
!3029 = distinct !DISubprogram(name: "quote", scope: !80, file: !80, line: 1079, type: !3030, scopeLine: 1080, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !4)
!3030 = !DISubroutineType(types: !3031)
!3031 = !{!16, !16}
!3032 = !DILocalVariable(name: "arg", arg: 1, scope: !3029, file: !80, line: 1079, type: !16)
!3033 = !DILocation(line: 1079, column: 20, scope: !3029)
!3034 = !DILocation(line: 1081, column: 22, scope: !3029)
!3035 = !DILocation(line: 1081, column: 10, scope: !3029)
!3036 = !DILocation(line: 1081, column: 3, scope: !3029)
!3037 = !DILocalVariable(name: "arg", arg: 1, scope: !3038, file: !80, line: 1079, type: !16)
!3038 = distinct !DISubprogram(name: "quote", scope: !80, file: !80, line: 1079, type: !3030, scopeLine: 1080, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3039, retainedNodes: !4)
!3039 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !3040, nameTableKind: None)
!3040 = !{!3041, !3043, !3045, !3054, !3056, !3058, !3065, !3067}
!3041 = !DIGlobalVariableExpression(var: !3042, expr: !DIExpression())
!3042 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !3039, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!3043 = !DIGlobalVariableExpression(var: !3044, expr: !DIExpression())
!3044 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !3039, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!3045 = !DIGlobalVariableExpression(var: !3046, expr: !DIExpression())
!3046 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !3039, file: !80, line: 1052, type: !3047, isLocal: false, isDefinition: true)
!3047 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !3048)
!3048 = !{!3049, !3050, !3051, !3052, !3053}
!3049 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !3047, file: !80, line: 68, baseType: !57, size: 32)
!3050 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3047, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!3051 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !3047, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!3052 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !3047, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!3053 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !3047, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!3054 = !DIGlobalVariableExpression(var: !3055, expr: !DIExpression())
!3055 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !3039, file: !80, line: 116, type: !3047, isLocal: true, isDefinition: true)
!3056 = !DIGlobalVariableExpression(var: !3057, expr: !DIExpression())
!3057 = distinct !DIGlobalVariable(name: "slot0", scope: !3039, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!3058 = !DIGlobalVariableExpression(var: !3059, expr: !DIExpression())
!3059 = distinct !DIGlobalVariable(name: "slotvec", scope: !3039, file: !80, line: 845, type: !3060, isLocal: true, isDefinition: true)
!3060 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3061, size: 64)
!3061 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !3062)
!3062 = !{!3063, !3064}
!3063 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3061, file: !80, line: 836, baseType: !74, size: 64)
!3064 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !3061, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!3065 = !DIGlobalVariableExpression(var: !3066, expr: !DIExpression())
!3066 = distinct !DIGlobalVariable(name: "nslots", scope: !3039, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!3067 = !DIGlobalVariableExpression(var: !3068, expr: !DIExpression())
!3068 = distinct !DIGlobalVariable(name: "slotvec0", scope: !3039, file: !80, line: 844, type: !3061, isLocal: true, isDefinition: true)
!3069 = distinct !DISubprogram(name: "get_root_dev_ino", scope: !3070, file: !3070, line: 29, type: !3071, scopeLine: 30, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !128, retainedNodes: !4)
!3070 = !DIFile(filename: "lib/root-dev-ino.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3071 = !DISubroutineType(types: !3072)
!3072 = !{!3073, !3073}
!3073 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3074, size: 64)
!3074 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dev_ino", file: !617, line: 7, size: 128, elements: !3075)
!3075 = !{!3076, !3077}
!3076 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !3074, file: !617, line: 9, baseType: !620, size: 64)
!3077 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !3074, file: !617, line: 10, baseType: !623, size: 64, offset: 64)
!3078 = !DILocalVariable(name: "root_d_i", arg: 1, scope: !3069, file: !3070, line: 29, type: !3073)
!3079 = !DILocation(line: 29, column: 35, scope: !3069)
!3080 = !DILocalVariable(name: "statbuf", scope: !3069, file: !3070, line: 31, type: !3081)
!3081 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !429, line: 46, size: 1152, elements: !3082)
!3082 = !{!3083, !3084, !3085, !3086, !3087, !3088, !3089, !3090, !3091, !3092, !3093, !3094, !3099, !3100, !3101}
!3083 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !3081, file: !429, line: 48, baseType: !432, size: 64)
!3084 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !3081, file: !429, line: 53, baseType: !435, size: 64, offset: 64)
!3085 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !3081, file: !429, line: 61, baseType: !437, size: 64, offset: 128)
!3086 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !3081, file: !429, line: 62, baseType: !439, size: 32, offset: 192)
!3087 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !3081, file: !429, line: 64, baseType: !441, size: 32, offset: 224)
!3088 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !3081, file: !429, line: 65, baseType: !443, size: 32, offset: 256)
!3089 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !3081, file: !429, line: 67, baseType: !19, size: 32, offset: 288)
!3090 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !3081, file: !429, line: 69, baseType: !432, size: 64, offset: 320)
!3091 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !3081, file: !429, line: 74, baseType: !447, size: 64, offset: 384)
!3092 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !3081, file: !429, line: 78, baseType: !450, size: 64, offset: 448)
!3093 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !3081, file: !429, line: 80, baseType: !452, size: 64, offset: 512)
!3094 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !3081, file: !429, line: 91, baseType: !3095, size: 128, offset: 576)
!3095 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !455, line: 10, size: 128, elements: !3096)
!3096 = !{!3097, !3098}
!3097 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !3095, file: !455, line: 12, baseType: !458, size: 64)
!3098 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !3095, file: !455, line: 16, baseType: !460, size: 64, offset: 64)
!3099 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !3081, file: !429, line: 92, baseType: !3095, size: 128, offset: 704)
!3100 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !3081, file: !429, line: 93, baseType: !3095, size: 128, offset: 832)
!3101 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !3081, file: !429, line: 106, baseType: !464, size: 192, offset: 960)
!3102 = !DILocation(line: 31, column: 15, scope: !3069)
!3103 = !DILocation(line: 32, column: 7, scope: !3104)
!3104 = distinct !DILexicalBlock(scope: !3069, file: !3070, line: 32, column: 7)
!3105 = !DILocation(line: 32, column: 7, scope: !3069)
!3106 = !DILocation(line: 33, column: 5, scope: !3104)
!3107 = !DILocation(line: 34, column: 30, scope: !3069)
!3108 = !DILocation(line: 34, column: 3, scope: !3069)
!3109 = !DILocation(line: 34, column: 13, scope: !3069)
!3110 = !DILocation(line: 34, column: 20, scope: !3069)
!3111 = !DILocation(line: 35, column: 30, scope: !3069)
!3112 = !DILocation(line: 35, column: 3, scope: !3069)
!3113 = !DILocation(line: 35, column: 13, scope: !3069)
!3114 = !DILocation(line: 35, column: 20, scope: !3069)
!3115 = !DILocation(line: 36, column: 10, scope: !3069)
!3116 = !DILocation(line: 36, column: 3, scope: !3069)
!3117 = !DILocation(line: 37, column: 1, scope: !3069)
!3118 = !DILocalVariable(name: "root_d_i", arg: 1, scope: !3119, file: !3070, line: 29, type: !3122)
!3119 = distinct !DISubprogram(name: "get_root_dev_ino", scope: !3070, file: !3070, line: 29, type: !3120, scopeLine: 30, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3127, retainedNodes: !4)
!3120 = !DISubroutineType(types: !3121)
!3121 = !{!3122, !3122}
!3122 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3123, size: 64)
!3123 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dev_ino", file: !617, line: 7, size: 128, elements: !3124)
!3124 = !{!3125, !3126}
!3125 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !3123, file: !617, line: 9, baseType: !620, size: 64)
!3126 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !3123, file: !617, line: 10, baseType: !623, size: 64, offset: 64)
!3127 = distinct !DICompileUnit(language: DW_LANG_C99, file: !129, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!3128 = !DILocalVariable(name: "statbuf", scope: !3119, file: !3070, line: 31, type: !3129)
!3129 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !429, line: 46, size: 1152, elements: !3130)
!3130 = !{!3131, !3132, !3133, !3134, !3135, !3136, !3137, !3138, !3139, !3140, !3141, !3142, !3147, !3148, !3149}
!3131 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !3129, file: !429, line: 48, baseType: !432, size: 64)
!3132 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !3129, file: !429, line: 53, baseType: !435, size: 64, offset: 64)
!3133 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !3129, file: !429, line: 61, baseType: !437, size: 64, offset: 128)
!3134 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !3129, file: !429, line: 62, baseType: !439, size: 32, offset: 192)
!3135 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !3129, file: !429, line: 64, baseType: !441, size: 32, offset: 224)
!3136 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !3129, file: !429, line: 65, baseType: !443, size: 32, offset: 256)
!3137 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !3129, file: !429, line: 67, baseType: !19, size: 32, offset: 288)
!3138 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !3129, file: !429, line: 69, baseType: !432, size: 64, offset: 320)
!3139 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !3129, file: !429, line: 74, baseType: !447, size: 64, offset: 384)
!3140 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !3129, file: !429, line: 78, baseType: !450, size: 64, offset: 448)
!3141 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !3129, file: !429, line: 80, baseType: !452, size: 64, offset: 512)
!3142 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !3129, file: !429, line: 91, baseType: !3143, size: 128, offset: 576)
!3143 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !455, line: 10, size: 128, elements: !3144)
!3144 = !{!3145, !3146}
!3145 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !3143, file: !455, line: 12, baseType: !458, size: 64)
!3146 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !3143, file: !455, line: 16, baseType: !460, size: 64, offset: 64)
!3147 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !3129, file: !429, line: 92, baseType: !3143, size: 128, offset: 704)
!3148 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !3129, file: !429, line: 93, baseType: !3143, size: 128, offset: 832)
!3149 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !3129, file: !429, line: 106, baseType: !464, size: 192, offset: 960)
!3150 = distinct !DISubprogram(name: "version_etc_arn", scope: !3151, file: !3151, line: 61, type: !3152, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !130, retainedNodes: !4)
!3151 = !DIFile(filename: "lib/version-etc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3152 = !DISubroutineType(types: !3153)
!3153 = !{null, !3154, !16, !16, !16, !3206, !74}
!3154 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3155, size: 64)
!3155 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3156, line: 7, baseType: !3157)
!3156 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!3157 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3158, line: 49, size: 1728, elements: !3159)
!3158 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!3159 = !{!3160, !3161, !3162, !3163, !3164, !3165, !3166, !3167, !3168, !3169, !3170, !3171, !3172, !3175, !3177, !3178, !3179, !3180, !3181, !3183, !3187, !3190, !3192, !3195, !3198, !3199, !3200, !3201, !3202}
!3160 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3157, file: !3158, line: 51, baseType: !19, size: 32)
!3161 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3157, file: !3158, line: 54, baseType: !7, size: 64, offset: 64)
!3162 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3157, file: !3158, line: 55, baseType: !7, size: 64, offset: 128)
!3163 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3157, file: !3158, line: 56, baseType: !7, size: 64, offset: 192)
!3164 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3157, file: !3158, line: 57, baseType: !7, size: 64, offset: 256)
!3165 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3157, file: !3158, line: 58, baseType: !7, size: 64, offset: 320)
!3166 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3157, file: !3158, line: 59, baseType: !7, size: 64, offset: 384)
!3167 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3157, file: !3158, line: 60, baseType: !7, size: 64, offset: 448)
!3168 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3157, file: !3158, line: 61, baseType: !7, size: 64, offset: 512)
!3169 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3157, file: !3158, line: 64, baseType: !7, size: 64, offset: 576)
!3170 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3157, file: !3158, line: 65, baseType: !7, size: 64, offset: 640)
!3171 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3157, file: !3158, line: 66, baseType: !7, size: 64, offset: 704)
!3172 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3157, file: !3158, line: 68, baseType: !3173, size: 64, offset: 768)
!3173 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3174, size: 64)
!3174 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !3158, line: 36, flags: DIFlagFwdDecl)
!3175 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3157, file: !3158, line: 70, baseType: !3176, size: 64, offset: 832)
!3176 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3157, size: 64)
!3177 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3157, file: !3158, line: 72, baseType: !19, size: 32, offset: 896)
!3178 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3157, file: !3158, line: 73, baseType: !19, size: 32, offset: 928)
!3179 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3157, file: !3158, line: 74, baseType: !447, size: 64, offset: 960)
!3180 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3157, file: !3158, line: 77, baseType: !73, size: 16, offset: 1024)
!3181 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3157, file: !3158, line: 78, baseType: !3182, size: 8, offset: 1040)
!3182 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!3183 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3157, file: !3158, line: 79, baseType: !3184, size: 8, offset: 1048)
!3184 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 8, elements: !3185)
!3185 = !{!3186}
!3186 = !DISubrange(count: 1)
!3187 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3157, file: !3158, line: 81, baseType: !3188, size: 64, offset: 1088)
!3188 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3189, size: 64)
!3189 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !3158, line: 43, baseType: null)
!3190 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3157, file: !3158, line: 89, baseType: !3191, size: 64, offset: 1152)
!3191 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !433, line: 153, baseType: !448)
!3192 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3157, file: !3158, line: 91, baseType: !3193, size: 64, offset: 1216)
!3193 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3194, size: 64)
!3194 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !3158, line: 37, flags: DIFlagFwdDecl)
!3195 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3157, file: !3158, line: 92, baseType: !3196, size: 64, offset: 1280)
!3196 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3197, size: 64)
!3197 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !3158, line: 38, flags: DIFlagFwdDecl)
!3198 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3157, file: !3158, line: 93, baseType: !3176, size: 64, offset: 1344)
!3199 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3157, file: !3158, line: 94, baseType: !6, size: 64, offset: 1408)
!3200 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3157, file: !3158, line: 95, baseType: !74, size: 64, offset: 1472)
!3201 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3157, file: !3158, line: 96, baseType: !19, size: 32, offset: 1536)
!3202 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3157, file: !3158, line: 98, baseType: !3203, size: 160, offset: 1568)
!3203 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 160, elements: !3204)
!3204 = !{!3205}
!3205 = !DISubrange(count: 20)
!3206 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!3207 = !DILocalVariable(name: "stream", arg: 1, scope: !3150, file: !3151, line: 61, type: !3154)
!3208 = !DILocation(line: 61, column: 24, scope: !3150)
!3209 = !DILocalVariable(name: "command_name", arg: 2, scope: !3150, file: !3151, line: 62, type: !16)
!3210 = !DILocation(line: 62, column: 30, scope: !3150)
!3211 = !DILocalVariable(name: "package", arg: 3, scope: !3150, file: !3151, line: 62, type: !16)
!3212 = !DILocation(line: 62, column: 56, scope: !3150)
!3213 = !DILocalVariable(name: "version", arg: 4, scope: !3150, file: !3151, line: 63, type: !16)
!3214 = !DILocation(line: 63, column: 30, scope: !3150)
!3215 = !DILocalVariable(name: "authors", arg: 5, scope: !3150, file: !3151, line: 64, type: !3206)
!3216 = !DILocation(line: 64, column: 39, scope: !3150)
!3217 = !DILocalVariable(name: "n_authors", arg: 6, scope: !3150, file: !3151, line: 64, type: !74)
!3218 = !DILocation(line: 64, column: 55, scope: !3150)
!3219 = !DILocation(line: 66, column: 7, scope: !3220)
!3220 = distinct !DILexicalBlock(scope: !3150, file: !3151, line: 66, column: 7)
!3221 = !DILocation(line: 66, column: 7, scope: !3150)
!3222 = !DILocation(line: 67, column: 14, scope: !3220)
!3223 = !DILocation(line: 67, column: 38, scope: !3220)
!3224 = !DILocation(line: 67, column: 52, scope: !3220)
!3225 = !DILocation(line: 67, column: 61, scope: !3220)
!3226 = !DILocation(line: 67, column: 5, scope: !3220)
!3227 = !DILocation(line: 69, column: 14, scope: !3220)
!3228 = !DILocation(line: 69, column: 33, scope: !3220)
!3229 = !DILocation(line: 69, column: 42, scope: !3220)
!3230 = !DILocation(line: 69, column: 5, scope: !3220)
!3231 = !DILocation(line: 83, column: 12, scope: !3150)
!3232 = !DILocation(line: 83, column: 43, scope: !3150)
!3233 = !DILocation(line: 83, column: 3, scope: !3150)
!3234 = !DILocation(line: 85, column: 3, scope: !3150)
!3235 = !DILocation(line: 88, column: 12, scope: !3150)
!3236 = !DILocation(line: 88, column: 20, scope: !3150)
!3237 = !DILocation(line: 88, column: 3, scope: !3150)
!3238 = !DILocation(line: 95, column: 3, scope: !3150)
!3239 = !DILocation(line: 97, column: 11, scope: !3150)
!3240 = !DILocation(line: 97, column: 3, scope: !3150)
!3241 = !DILocation(line: 102, column: 7, scope: !3242)
!3242 = distinct !DILexicalBlock(scope: !3150, file: !3151, line: 98, column: 5)
!3243 = !DILocation(line: 105, column: 16, scope: !3242)
!3244 = !DILocation(line: 105, column: 24, scope: !3242)
!3245 = !DILocation(line: 105, column: 47, scope: !3242)
!3246 = !DILocation(line: 105, column: 7, scope: !3242)
!3247 = !DILocation(line: 106, column: 7, scope: !3242)
!3248 = !DILocation(line: 109, column: 16, scope: !3242)
!3249 = !DILocation(line: 109, column: 24, scope: !3242)
!3250 = !DILocation(line: 109, column: 54, scope: !3242)
!3251 = !DILocation(line: 109, column: 66, scope: !3242)
!3252 = !DILocation(line: 109, column: 7, scope: !3242)
!3253 = !DILocation(line: 110, column: 7, scope: !3242)
!3254 = !DILocation(line: 113, column: 16, scope: !3242)
!3255 = !DILocation(line: 113, column: 24, scope: !3242)
!3256 = !DILocation(line: 114, column: 16, scope: !3242)
!3257 = !DILocation(line: 114, column: 28, scope: !3242)
!3258 = !DILocation(line: 114, column: 40, scope: !3242)
!3259 = !DILocation(line: 113, column: 7, scope: !3242)
!3260 = !DILocation(line: 115, column: 7, scope: !3242)
!3261 = !DILocation(line: 120, column: 16, scope: !3242)
!3262 = !DILocation(line: 120, column: 24, scope: !3242)
!3263 = !DILocation(line: 121, column: 16, scope: !3242)
!3264 = !DILocation(line: 121, column: 28, scope: !3242)
!3265 = !DILocation(line: 121, column: 40, scope: !3242)
!3266 = !DILocation(line: 121, column: 52, scope: !3242)
!3267 = !DILocation(line: 120, column: 7, scope: !3242)
!3268 = !DILocation(line: 122, column: 7, scope: !3242)
!3269 = !DILocation(line: 127, column: 16, scope: !3242)
!3270 = !DILocation(line: 127, column: 24, scope: !3242)
!3271 = !DILocation(line: 128, column: 16, scope: !3242)
!3272 = !DILocation(line: 128, column: 28, scope: !3242)
!3273 = !DILocation(line: 128, column: 40, scope: !3242)
!3274 = !DILocation(line: 128, column: 52, scope: !3242)
!3275 = !DILocation(line: 128, column: 64, scope: !3242)
!3276 = !DILocation(line: 127, column: 7, scope: !3242)
!3277 = !DILocation(line: 129, column: 7, scope: !3242)
!3278 = !DILocation(line: 134, column: 16, scope: !3242)
!3279 = !DILocation(line: 134, column: 24, scope: !3242)
!3280 = !DILocation(line: 135, column: 16, scope: !3242)
!3281 = !DILocation(line: 135, column: 28, scope: !3242)
!3282 = !DILocation(line: 135, column: 40, scope: !3242)
!3283 = !DILocation(line: 135, column: 52, scope: !3242)
!3284 = !DILocation(line: 135, column: 64, scope: !3242)
!3285 = !DILocation(line: 136, column: 16, scope: !3242)
!3286 = !DILocation(line: 134, column: 7, scope: !3242)
!3287 = !DILocation(line: 137, column: 7, scope: !3242)
!3288 = !DILocation(line: 142, column: 16, scope: !3242)
!3289 = !DILocation(line: 142, column: 24, scope: !3242)
!3290 = !DILocation(line: 143, column: 16, scope: !3242)
!3291 = !DILocation(line: 143, column: 28, scope: !3242)
!3292 = !DILocation(line: 143, column: 40, scope: !3242)
!3293 = !DILocation(line: 143, column: 52, scope: !3242)
!3294 = !DILocation(line: 143, column: 64, scope: !3242)
!3295 = !DILocation(line: 144, column: 16, scope: !3242)
!3296 = !DILocation(line: 144, column: 28, scope: !3242)
!3297 = !DILocation(line: 142, column: 7, scope: !3242)
!3298 = !DILocation(line: 145, column: 7, scope: !3242)
!3299 = !DILocation(line: 150, column: 16, scope: !3242)
!3300 = !DILocation(line: 150, column: 24, scope: !3242)
!3301 = !DILocation(line: 152, column: 17, scope: !3242)
!3302 = !DILocation(line: 152, column: 29, scope: !3242)
!3303 = !DILocation(line: 152, column: 41, scope: !3242)
!3304 = !DILocation(line: 152, column: 53, scope: !3242)
!3305 = !DILocation(line: 152, column: 65, scope: !3242)
!3306 = !DILocation(line: 153, column: 17, scope: !3242)
!3307 = !DILocation(line: 153, column: 29, scope: !3242)
!3308 = !DILocation(line: 153, column: 41, scope: !3242)
!3309 = !DILocation(line: 150, column: 7, scope: !3242)
!3310 = !DILocation(line: 154, column: 7, scope: !3242)
!3311 = !DILocation(line: 159, column: 16, scope: !3242)
!3312 = !DILocation(line: 159, column: 24, scope: !3242)
!3313 = !DILocation(line: 161, column: 16, scope: !3242)
!3314 = !DILocation(line: 161, column: 28, scope: !3242)
!3315 = !DILocation(line: 161, column: 40, scope: !3242)
!3316 = !DILocation(line: 161, column: 52, scope: !3242)
!3317 = !DILocation(line: 161, column: 64, scope: !3242)
!3318 = !DILocation(line: 162, column: 16, scope: !3242)
!3319 = !DILocation(line: 162, column: 28, scope: !3242)
!3320 = !DILocation(line: 162, column: 40, scope: !3242)
!3321 = !DILocation(line: 162, column: 52, scope: !3242)
!3322 = !DILocation(line: 159, column: 7, scope: !3242)
!3323 = !DILocation(line: 163, column: 7, scope: !3242)
!3324 = !DILocation(line: 170, column: 16, scope: !3242)
!3325 = !DILocation(line: 170, column: 24, scope: !3242)
!3326 = !DILocation(line: 172, column: 17, scope: !3242)
!3327 = !DILocation(line: 172, column: 29, scope: !3242)
!3328 = !DILocation(line: 172, column: 41, scope: !3242)
!3329 = !DILocation(line: 172, column: 53, scope: !3242)
!3330 = !DILocation(line: 172, column: 65, scope: !3242)
!3331 = !DILocation(line: 173, column: 17, scope: !3242)
!3332 = !DILocation(line: 173, column: 29, scope: !3242)
!3333 = !DILocation(line: 173, column: 41, scope: !3242)
!3334 = !DILocation(line: 173, column: 53, scope: !3242)
!3335 = !DILocation(line: 170, column: 7, scope: !3242)
!3336 = !DILocation(line: 174, column: 7, scope: !3242)
!3337 = !DILocation(line: 176, column: 1, scope: !3150)
!3338 = !DILocalVariable(name: "stream", arg: 1, scope: !3339, file: !3151, line: 61, type: !3342)
!3339 = distinct !DISubprogram(name: "version_etc_arn", scope: !3151, file: !3151, line: 61, type: !3340, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3376, retainedNodes: !4)
!3340 = !DISubroutineType(types: !3341)
!3341 = !{null, !3342, !16, !16, !16, !3206, !74}
!3342 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3343, size: 64)
!3343 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3156, line: 7, baseType: !3344)
!3344 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3158, line: 49, size: 1728, elements: !3345)
!3345 = !{!3346, !3347, !3348, !3349, !3350, !3351, !3352, !3353, !3354, !3355, !3356, !3357, !3358, !3359, !3361, !3362, !3363, !3364, !3365, !3366, !3367, !3368, !3369, !3370, !3371, !3372, !3373, !3374, !3375}
!3346 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3344, file: !3158, line: 51, baseType: !19, size: 32)
!3347 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3344, file: !3158, line: 54, baseType: !7, size: 64, offset: 64)
!3348 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3344, file: !3158, line: 55, baseType: !7, size: 64, offset: 128)
!3349 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3344, file: !3158, line: 56, baseType: !7, size: 64, offset: 192)
!3350 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3344, file: !3158, line: 57, baseType: !7, size: 64, offset: 256)
!3351 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3344, file: !3158, line: 58, baseType: !7, size: 64, offset: 320)
!3352 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3344, file: !3158, line: 59, baseType: !7, size: 64, offset: 384)
!3353 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3344, file: !3158, line: 60, baseType: !7, size: 64, offset: 448)
!3354 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3344, file: !3158, line: 61, baseType: !7, size: 64, offset: 512)
!3355 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3344, file: !3158, line: 64, baseType: !7, size: 64, offset: 576)
!3356 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3344, file: !3158, line: 65, baseType: !7, size: 64, offset: 640)
!3357 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3344, file: !3158, line: 66, baseType: !7, size: 64, offset: 704)
!3358 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3344, file: !3158, line: 68, baseType: !3173, size: 64, offset: 768)
!3359 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3344, file: !3158, line: 70, baseType: !3360, size: 64, offset: 832)
!3360 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3344, size: 64)
!3361 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3344, file: !3158, line: 72, baseType: !19, size: 32, offset: 896)
!3362 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3344, file: !3158, line: 73, baseType: !19, size: 32, offset: 928)
!3363 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3344, file: !3158, line: 74, baseType: !447, size: 64, offset: 960)
!3364 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3344, file: !3158, line: 77, baseType: !73, size: 16, offset: 1024)
!3365 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3344, file: !3158, line: 78, baseType: !3182, size: 8, offset: 1040)
!3366 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3344, file: !3158, line: 79, baseType: !3184, size: 8, offset: 1048)
!3367 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3344, file: !3158, line: 81, baseType: !3188, size: 64, offset: 1088)
!3368 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3344, file: !3158, line: 89, baseType: !3191, size: 64, offset: 1152)
!3369 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3344, file: !3158, line: 91, baseType: !3193, size: 64, offset: 1216)
!3370 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3344, file: !3158, line: 92, baseType: !3196, size: 64, offset: 1280)
!3371 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3344, file: !3158, line: 93, baseType: !3360, size: 64, offset: 1344)
!3372 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3344, file: !3158, line: 94, baseType: !6, size: 64, offset: 1408)
!3373 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3344, file: !3158, line: 95, baseType: !74, size: 64, offset: 1472)
!3374 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3344, file: !3158, line: 96, baseType: !19, size: 32, offset: 1536)
!3375 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3344, file: !3158, line: 98, baseType: !3203, size: 160, offset: 1568)
!3376 = distinct !DICompileUnit(language: DW_LANG_C99, file: !131, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!3377 = !DILocalVariable(name: "command_name", arg: 2, scope: !3339, file: !3151, line: 62, type: !16)
!3378 = !DILocalVariable(name: "package", arg: 3, scope: !3339, file: !3151, line: 62, type: !16)
!3379 = !DILocalVariable(name: "version", arg: 4, scope: !3339, file: !3151, line: 63, type: !16)
!3380 = !DILocalVariable(name: "authors", arg: 5, scope: !3339, file: !3151, line: 64, type: !3206)
!3381 = !DILocalVariable(name: "n_authors", arg: 6, scope: !3339, file: !3151, line: 64, type: !74)
!3382 = distinct !DISubprogram(name: "version_etc_va", scope: !3151, file: !3151, line: 199, type: !3383, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !130, retainedNodes: !4)
!3383 = !DISubroutineType(types: !3384)
!3384 = !{null, !3154, !16, !16, !16, !3385}
!3385 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3386, size: 64)
!3386 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !131, line: 192, size: 192, elements: !3387)
!3387 = !{!3388, !3389, !3390, !3391}
!3388 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !3386, file: !131, line: 192, baseType: !59, size: 32)
!3389 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !3386, file: !131, line: 192, baseType: !59, size: 32, offset: 32)
!3390 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !3386, file: !131, line: 192, baseType: !6, size: 64, offset: 64)
!3391 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !3386, file: !131, line: 192, baseType: !6, size: 64, offset: 128)
!3392 = !DILocalVariable(name: "stream", arg: 1, scope: !3382, file: !3151, line: 199, type: !3154)
!3393 = !DILocation(line: 199, column: 23, scope: !3382)
!3394 = !DILocalVariable(name: "command_name", arg: 2, scope: !3382, file: !3151, line: 200, type: !16)
!3395 = !DILocation(line: 200, column: 29, scope: !3382)
!3396 = !DILocalVariable(name: "package", arg: 3, scope: !3382, file: !3151, line: 200, type: !16)
!3397 = !DILocation(line: 200, column: 55, scope: !3382)
!3398 = !DILocalVariable(name: "version", arg: 4, scope: !3382, file: !3151, line: 201, type: !16)
!3399 = !DILocation(line: 201, column: 29, scope: !3382)
!3400 = !DILocalVariable(name: "authors", arg: 5, scope: !3382, file: !3151, line: 201, type: !3385)
!3401 = !DILocation(line: 201, column: 46, scope: !3382)
!3402 = !DILocalVariable(name: "n_authors", scope: !3382, file: !3151, line: 203, type: !74)
!3403 = !DILocation(line: 203, column: 10, scope: !3382)
!3404 = !DILocalVariable(name: "authtab", scope: !3382, file: !3151, line: 204, type: !3405)
!3405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !16, size: 640, elements: !89)
!3406 = !DILocation(line: 204, column: 15, scope: !3382)
!3407 = !DILocation(line: 206, column: 18, scope: !3408)
!3408 = distinct !DILexicalBlock(scope: !3382, file: !3151, line: 206, column: 3)
!3409 = !DILocation(line: 206, column: 8, scope: !3408)
!3410 = !DILocation(line: 207, column: 8, scope: !3411)
!3411 = distinct !DILexicalBlock(scope: !3408, file: !3151, line: 206, column: 3)
!3412 = !DILocation(line: 207, column: 18, scope: !3411)
!3413 = !DILocation(line: 208, column: 10, scope: !3411)
!3414 = !DILocation(line: 208, column: 35, scope: !3411)
!3415 = !DILocation(line: 208, column: 22, scope: !3411)
!3416 = !DILocation(line: 208, column: 14, scope: !3411)
!3417 = !DILocation(line: 208, column: 33, scope: !3411)
!3418 = !DILocation(line: 208, column: 67, scope: !3411)
!3419 = !DILocation(line: 0, scope: !3411)
!3420 = !DILocation(line: 206, column: 3, scope: !3408)
!3421 = !DILocation(line: 209, column: 17, scope: !3411)
!3422 = !DILocation(line: 206, column: 3, scope: !3411)
!3423 = distinct !{!3423, !3420, !3424}
!3424 = !DILocation(line: 210, column: 5, scope: !3408)
!3425 = !DILocation(line: 211, column: 20, scope: !3382)
!3426 = !DILocation(line: 211, column: 28, scope: !3382)
!3427 = !DILocation(line: 211, column: 42, scope: !3382)
!3428 = !DILocation(line: 211, column: 51, scope: !3382)
!3429 = !DILocation(line: 212, column: 20, scope: !3382)
!3430 = !DILocation(line: 212, column: 29, scope: !3382)
!3431 = !DILocation(line: 211, column: 3, scope: !3382)
!3432 = !DILocation(line: 213, column: 1, scope: !3382)
!3433 = !DILocalVariable(name: "stream", arg: 1, scope: !3434, file: !3151, line: 199, type: !3437)
!3434 = distinct !DISubprogram(name: "version_etc_va", scope: !3151, file: !3151, line: 199, type: !3435, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3478, retainedNodes: !4)
!3435 = !DISubroutineType(types: !3436)
!3436 = !{null, !3437, !16, !16, !16, !3471}
!3437 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3438, size: 64)
!3438 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3156, line: 7, baseType: !3439)
!3439 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3158, line: 49, size: 1728, elements: !3440)
!3440 = !{!3441, !3442, !3443, !3444, !3445, !3446, !3447, !3448, !3449, !3450, !3451, !3452, !3453, !3454, !3456, !3457, !3458, !3459, !3460, !3461, !3462, !3463, !3464, !3465, !3466, !3467, !3468, !3469, !3470}
!3441 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3439, file: !3158, line: 51, baseType: !19, size: 32)
!3442 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3439, file: !3158, line: 54, baseType: !7, size: 64, offset: 64)
!3443 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3439, file: !3158, line: 55, baseType: !7, size: 64, offset: 128)
!3444 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3439, file: !3158, line: 56, baseType: !7, size: 64, offset: 192)
!3445 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3439, file: !3158, line: 57, baseType: !7, size: 64, offset: 256)
!3446 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3439, file: !3158, line: 58, baseType: !7, size: 64, offset: 320)
!3447 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3439, file: !3158, line: 59, baseType: !7, size: 64, offset: 384)
!3448 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3439, file: !3158, line: 60, baseType: !7, size: 64, offset: 448)
!3449 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3439, file: !3158, line: 61, baseType: !7, size: 64, offset: 512)
!3450 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3439, file: !3158, line: 64, baseType: !7, size: 64, offset: 576)
!3451 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3439, file: !3158, line: 65, baseType: !7, size: 64, offset: 640)
!3452 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3439, file: !3158, line: 66, baseType: !7, size: 64, offset: 704)
!3453 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3439, file: !3158, line: 68, baseType: !3173, size: 64, offset: 768)
!3454 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3439, file: !3158, line: 70, baseType: !3455, size: 64, offset: 832)
!3455 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3439, size: 64)
!3456 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3439, file: !3158, line: 72, baseType: !19, size: 32, offset: 896)
!3457 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3439, file: !3158, line: 73, baseType: !19, size: 32, offset: 928)
!3458 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3439, file: !3158, line: 74, baseType: !447, size: 64, offset: 960)
!3459 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3439, file: !3158, line: 77, baseType: !73, size: 16, offset: 1024)
!3460 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3439, file: !3158, line: 78, baseType: !3182, size: 8, offset: 1040)
!3461 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3439, file: !3158, line: 79, baseType: !3184, size: 8, offset: 1048)
!3462 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3439, file: !3158, line: 81, baseType: !3188, size: 64, offset: 1088)
!3463 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3439, file: !3158, line: 89, baseType: !3191, size: 64, offset: 1152)
!3464 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3439, file: !3158, line: 91, baseType: !3193, size: 64, offset: 1216)
!3465 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3439, file: !3158, line: 92, baseType: !3196, size: 64, offset: 1280)
!3466 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3439, file: !3158, line: 93, baseType: !3455, size: 64, offset: 1344)
!3467 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3439, file: !3158, line: 94, baseType: !6, size: 64, offset: 1408)
!3468 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3439, file: !3158, line: 95, baseType: !74, size: 64, offset: 1472)
!3469 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3439, file: !3158, line: 96, baseType: !19, size: 32, offset: 1536)
!3470 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3439, file: !3158, line: 98, baseType: !3203, size: 160, offset: 1568)
!3471 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3472, size: 64)
!3472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !131, line: 192, size: 192, elements: !3473)
!3473 = !{!3474, !3475, !3476, !3477}
!3474 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !3472, file: !131, line: 192, baseType: !59, size: 32)
!3475 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !3472, file: !131, line: 192, baseType: !59, size: 32, offset: 32)
!3476 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !3472, file: !131, line: 192, baseType: !6, size: 64, offset: 64)
!3477 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !3472, file: !131, line: 192, baseType: !6, size: 64, offset: 128)
!3478 = distinct !DICompileUnit(language: DW_LANG_C99, file: !131, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!3479 = !DILocalVariable(name: "command_name", arg: 2, scope: !3434, file: !3151, line: 200, type: !16)
!3480 = !DILocalVariable(name: "package", arg: 3, scope: !3434, file: !3151, line: 200, type: !16)
!3481 = !DILocalVariable(name: "version", arg: 4, scope: !3434, file: !3151, line: 201, type: !16)
!3482 = !DILocalVariable(name: "authors", arg: 5, scope: !3434, file: !3151, line: 201, type: !3471)
!3483 = !DILocalVariable(name: "n_authors", scope: !3434, file: !3151, line: 203, type: !74)
!3484 = !DILocalVariable(name: "authtab", scope: !3434, file: !3151, line: 204, type: !3405)
!3485 = distinct !DISubprogram(name: "version_etc", scope: !3151, file: !3151, line: 230, type: !3486, scopeLine: 233, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !130, retainedNodes: !4)
!3486 = !DISubroutineType(types: !3487)
!3487 = !{null, !3154, !16, !16, !16, null}
!3488 = !DILocalVariable(name: "stream", arg: 1, scope: !3485, file: !3151, line: 230, type: !3154)
!3489 = !DILocation(line: 230, column: 20, scope: !3485)
!3490 = !DILocalVariable(name: "command_name", arg: 2, scope: !3485, file: !3151, line: 231, type: !16)
!3491 = !DILocation(line: 231, column: 26, scope: !3485)
!3492 = !DILocalVariable(name: "package", arg: 3, scope: !3485, file: !3151, line: 231, type: !16)
!3493 = !DILocation(line: 231, column: 52, scope: !3485)
!3494 = !DILocalVariable(name: "version", arg: 4, scope: !3485, file: !3151, line: 232, type: !16)
!3495 = !DILocation(line: 232, column: 26, scope: !3485)
!3496 = !DILocalVariable(name: "authors", scope: !3485, file: !3151, line: 234, type: !3497)
!3497 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !3498, line: 52, baseType: !3499)
!3498 = !DIFile(filename: "/usr/include/stdio.h", directory: "")
!3499 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !3500, line: 32, baseType: !3501)
!3500 = !DIFile(filename: "/usr/lib/llvm-9/lib/clang/9.0.1/include/stdarg.h", directory: "")
!3501 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !131, line: 234, baseType: !3502)
!3502 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3386, size: 192, elements: !3185)
!3503 = !DILocation(line: 234, column: 11, scope: !3485)
!3504 = !DILocation(line: 236, column: 3, scope: !3485)
!3505 = !DILocation(line: 237, column: 19, scope: !3485)
!3506 = !DILocation(line: 237, column: 27, scope: !3485)
!3507 = !DILocation(line: 237, column: 41, scope: !3485)
!3508 = !DILocation(line: 237, column: 50, scope: !3485)
!3509 = !DILocation(line: 237, column: 59, scope: !3485)
!3510 = !DILocation(line: 237, column: 3, scope: !3485)
!3511 = !DILocation(line: 238, column: 3, scope: !3485)
!3512 = !DILocation(line: 239, column: 1, scope: !3485)
!3513 = !DILocalVariable(name: "stream", arg: 1, scope: !3514, file: !3151, line: 230, type: !3517)
!3514 = distinct !DISubprogram(name: "version_etc", scope: !3151, file: !3151, line: 230, type: !3515, scopeLine: 233, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3551, retainedNodes: !4)
!3515 = !DISubroutineType(types: !3516)
!3516 = !{null, !3517, !16, !16, !16, null}
!3517 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3518, size: 64)
!3518 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3156, line: 7, baseType: !3519)
!3519 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3158, line: 49, size: 1728, elements: !3520)
!3520 = !{!3521, !3522, !3523, !3524, !3525, !3526, !3527, !3528, !3529, !3530, !3531, !3532, !3533, !3534, !3536, !3537, !3538, !3539, !3540, !3541, !3542, !3543, !3544, !3545, !3546, !3547, !3548, !3549, !3550}
!3521 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3519, file: !3158, line: 51, baseType: !19, size: 32)
!3522 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3519, file: !3158, line: 54, baseType: !7, size: 64, offset: 64)
!3523 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3519, file: !3158, line: 55, baseType: !7, size: 64, offset: 128)
!3524 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3519, file: !3158, line: 56, baseType: !7, size: 64, offset: 192)
!3525 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3519, file: !3158, line: 57, baseType: !7, size: 64, offset: 256)
!3526 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3519, file: !3158, line: 58, baseType: !7, size: 64, offset: 320)
!3527 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3519, file: !3158, line: 59, baseType: !7, size: 64, offset: 384)
!3528 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3519, file: !3158, line: 60, baseType: !7, size: 64, offset: 448)
!3529 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3519, file: !3158, line: 61, baseType: !7, size: 64, offset: 512)
!3530 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3519, file: !3158, line: 64, baseType: !7, size: 64, offset: 576)
!3531 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3519, file: !3158, line: 65, baseType: !7, size: 64, offset: 640)
!3532 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3519, file: !3158, line: 66, baseType: !7, size: 64, offset: 704)
!3533 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3519, file: !3158, line: 68, baseType: !3173, size: 64, offset: 768)
!3534 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3519, file: !3158, line: 70, baseType: !3535, size: 64, offset: 832)
!3535 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3519, size: 64)
!3536 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3519, file: !3158, line: 72, baseType: !19, size: 32, offset: 896)
!3537 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3519, file: !3158, line: 73, baseType: !19, size: 32, offset: 928)
!3538 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3519, file: !3158, line: 74, baseType: !447, size: 64, offset: 960)
!3539 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3519, file: !3158, line: 77, baseType: !73, size: 16, offset: 1024)
!3540 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3519, file: !3158, line: 78, baseType: !3182, size: 8, offset: 1040)
!3541 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3519, file: !3158, line: 79, baseType: !3184, size: 8, offset: 1048)
!3542 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3519, file: !3158, line: 81, baseType: !3188, size: 64, offset: 1088)
!3543 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3519, file: !3158, line: 89, baseType: !3191, size: 64, offset: 1152)
!3544 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3519, file: !3158, line: 91, baseType: !3193, size: 64, offset: 1216)
!3545 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3519, file: !3158, line: 92, baseType: !3196, size: 64, offset: 1280)
!3546 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3519, file: !3158, line: 93, baseType: !3535, size: 64, offset: 1344)
!3547 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3519, file: !3158, line: 94, baseType: !6, size: 64, offset: 1408)
!3548 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3519, file: !3158, line: 95, baseType: !74, size: 64, offset: 1472)
!3549 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3519, file: !3158, line: 96, baseType: !19, size: 32, offset: 1536)
!3550 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3519, file: !3158, line: 98, baseType: !3203, size: 160, offset: 1568)
!3551 = distinct !DICompileUnit(language: DW_LANG_C99, file: !131, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!3552 = !DILocalVariable(name: "command_name", arg: 2, scope: !3514, file: !3151, line: 231, type: !16)
!3553 = !DILocalVariable(name: "package", arg: 3, scope: !3514, file: !3151, line: 231, type: !16)
!3554 = !DILocalVariable(name: "version", arg: 4, scope: !3514, file: !3151, line: 232, type: !16)
!3555 = !DILocalVariable(name: "authors", scope: !3514, file: !3151, line: 234, type: !3556)
!3556 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !3498, line: 52, baseType: !3557)
!3557 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !3500, line: 32, baseType: !3558)
!3558 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !131, line: 234, baseType: !3559)
!3559 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3560, size: 192, elements: !3185)
!3560 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !131, line: 192, size: 192, elements: !3561)
!3561 = !{!3562, !3563, !3564, !3565}
!3562 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !3560, file: !131, line: 192, baseType: !59, size: 32)
!3563 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !3560, file: !131, line: 192, baseType: !59, size: 32, offset: 32)
!3564 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !3560, file: !131, line: 192, baseType: !6, size: 64, offset: 64)
!3565 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !3560, file: !131, line: 192, baseType: !6, size: 64, offset: 128)
!3566 = distinct !DISubprogram(name: "xnmalloc", scope: !3567, file: !3567, line: 99, type: !3568, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !133, retainedNodes: !4)
!3567 = !DIFile(filename: "./lib/xalloc.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3568 = !DISubroutineType(types: !3569)
!3569 = !{!6, !74, !74}
!3570 = !DILocalVariable(name: "n", arg: 1, scope: !3566, file: !3567, line: 99, type: !74)
!3571 = !DILocation(line: 99, column: 18, scope: !3566)
!3572 = !DILocalVariable(name: "s", arg: 2, scope: !3566, file: !3567, line: 99, type: !74)
!3573 = !DILocation(line: 99, column: 28, scope: !3566)
!3574 = !DILocation(line: 101, column: 7, scope: !3575)
!3575 = distinct !DILexicalBlock(scope: !3566, file: !3567, line: 101, column: 7)
!3576 = !DILocation(line: 101, column: 7, scope: !3566)
!3577 = !DILocation(line: 102, column: 5, scope: !3575)
!3578 = !DILocation(line: 103, column: 19, scope: !3566)
!3579 = !DILocation(line: 103, column: 23, scope: !3566)
!3580 = !DILocation(line: 103, column: 21, scope: !3566)
!3581 = !DILocation(line: 103, column: 10, scope: !3566)
!3582 = !DILocation(line: 103, column: 3, scope: !3566)
!3583 = !DILocalVariable(name: "n", arg: 1, scope: !3584, file: !3567, line: 99, type: !74)
!3584 = distinct !DISubprogram(name: "xnmalloc", scope: !3567, file: !3567, line: 99, type: !3568, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3585, retainedNodes: !4)
!3585 = distinct !DICompileUnit(language: DW_LANG_C99, file: !134, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !135, nameTableKind: None)
!3586 = !DILocalVariable(name: "s", arg: 2, scope: !3584, file: !3567, line: 99, type: !74)
!3587 = distinct !DISubprogram(name: "xmalloc", scope: !3588, file: !3588, line: 39, type: !3589, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !133, retainedNodes: !4)
!3588 = !DIFile(filename: "lib/xmalloc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3589 = !DISubroutineType(types: !3590)
!3590 = !{!6, !74}
!3591 = !DILocalVariable(name: "n", arg: 1, scope: !3587, file: !3588, line: 39, type: !74)
!3592 = !DILocation(line: 39, column: 17, scope: !3587)
!3593 = !DILocalVariable(name: "p", scope: !3587, file: !3588, line: 41, type: !6)
!3594 = !DILocation(line: 41, column: 9, scope: !3587)
!3595 = !DILocation(line: 41, column: 21, scope: !3587)
!3596 = !DILocation(line: 41, column: 13, scope: !3587)
!3597 = !DILocation(line: 42, column: 8, scope: !3598)
!3598 = distinct !DILexicalBlock(scope: !3587, file: !3588, line: 42, column: 7)
!3599 = !DILocation(line: 42, column: 10, scope: !3598)
!3600 = !DILocation(line: 42, column: 13, scope: !3598)
!3601 = !DILocation(line: 42, column: 15, scope: !3598)
!3602 = !DILocation(line: 42, column: 7, scope: !3587)
!3603 = !DILocation(line: 43, column: 5, scope: !3598)
!3604 = !DILocation(line: 44, column: 10, scope: !3587)
!3605 = !DILocation(line: 44, column: 3, scope: !3587)
!3606 = !DILocalVariable(name: "n", arg: 1, scope: !3607, file: !3588, line: 39, type: !74)
!3607 = distinct !DISubprogram(name: "xmalloc", scope: !3588, file: !3588, line: 39, type: !3589, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3608, retainedNodes: !4)
!3608 = distinct !DICompileUnit(language: DW_LANG_C99, file: !134, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !135, nameTableKind: None)
!3609 = !DILocalVariable(name: "p", scope: !3607, file: !3588, line: 41, type: !6)
!3610 = distinct !DISubprogram(name: "xrealloc", scope: !3588, file: !3588, line: 51, type: !3611, scopeLine: 52, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !133, retainedNodes: !4)
!3611 = !DISubroutineType(types: !3612)
!3612 = !{!6, !6, !74}
!3613 = !DILocalVariable(name: "p", arg: 1, scope: !3610, file: !3588, line: 51, type: !6)
!3614 = !DILocation(line: 51, column: 17, scope: !3610)
!3615 = !DILocalVariable(name: "n", arg: 2, scope: !3610, file: !3588, line: 51, type: !74)
!3616 = !DILocation(line: 51, column: 27, scope: !3610)
!3617 = !DILocation(line: 53, column: 8, scope: !3618)
!3618 = distinct !DILexicalBlock(scope: !3610, file: !3588, line: 53, column: 7)
!3619 = !DILocation(line: 53, column: 10, scope: !3618)
!3620 = !DILocation(line: 53, column: 13, scope: !3618)
!3621 = !DILocation(line: 53, column: 7, scope: !3610)
!3622 = !DILocation(line: 57, column: 13, scope: !3623)
!3623 = distinct !DILexicalBlock(scope: !3618, file: !3588, line: 54, column: 5)
!3624 = !DILocation(line: 57, column: 7, scope: !3623)
!3625 = !DILocation(line: 58, column: 7, scope: !3623)
!3626 = !DILocation(line: 61, column: 16, scope: !3610)
!3627 = !DILocation(line: 61, column: 19, scope: !3610)
!3628 = !DILocation(line: 61, column: 7, scope: !3610)
!3629 = !DILocation(line: 61, column: 5, scope: !3610)
!3630 = !DILocation(line: 62, column: 8, scope: !3631)
!3631 = distinct !DILexicalBlock(scope: !3610, file: !3588, line: 62, column: 7)
!3632 = !DILocation(line: 62, column: 10, scope: !3631)
!3633 = !DILocation(line: 62, column: 13, scope: !3631)
!3634 = !DILocation(line: 62, column: 7, scope: !3610)
!3635 = !DILocation(line: 63, column: 5, scope: !3631)
!3636 = !DILocation(line: 64, column: 10, scope: !3610)
!3637 = !DILocation(line: 64, column: 3, scope: !3610)
!3638 = !DILocation(line: 65, column: 1, scope: !3610)
!3639 = !DILocalVariable(name: "p", arg: 1, scope: !3640, file: !3588, line: 51, type: !6)
!3640 = distinct !DISubprogram(name: "xrealloc", scope: !3588, file: !3588, line: 51, type: !3611, scopeLine: 52, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3641, retainedNodes: !4)
!3641 = distinct !DICompileUnit(language: DW_LANG_C99, file: !134, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !135, nameTableKind: None)
!3642 = !DILocalVariable(name: "n", arg: 2, scope: !3640, file: !3588, line: 51, type: !74)
!3643 = distinct !DISubprogram(name: "xcharalloc", scope: !3567, file: !3567, line: 216, type: !1094, scopeLine: 217, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !133, retainedNodes: !4)
!3644 = !DILocalVariable(name: "n", arg: 1, scope: !3643, file: !3567, line: 216, type: !74)
!3645 = !DILocation(line: 216, column: 20, scope: !3643)
!3646 = !DILocation(line: 218, column: 10, scope: !3643)
!3647 = !DILocation(line: 218, column: 3, scope: !3643)
!3648 = !DILocalVariable(name: "n", arg: 1, scope: !3649, file: !3567, line: 216, type: !74)
!3649 = distinct !DISubprogram(name: "xcharalloc", scope: !3567, file: !3567, line: 216, type: !1094, scopeLine: 217, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3650, retainedNodes: !4)
!3650 = distinct !DICompileUnit(language: DW_LANG_C99, file: !134, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !135, nameTableKind: None)
!3651 = distinct !DISubprogram(name: "xalloc_die", scope: !3652, file: !3652, line: 32, type: !1230, scopeLine: 33, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !136, retainedNodes: !4)
!3652 = !DIFile(filename: "lib/xalloc-die.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3653 = !DILocation(line: 34, column: 10, scope: !3651)
!3654 = !DILocation(line: 34, column: 33, scope: !3651)
!3655 = !DILocation(line: 34, column: 3, scope: !3651)
!3656 = !DILocation(line: 40, column: 3, scope: !3651)
!3657 = distinct !DISubprogram(name: "xgetcwd", scope: !3658, file: !3658, line: 35, type: !425, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !138, retainedNodes: !4)
!3658 = !DIFile(filename: "lib/xgetcwd.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3659 = !DILocalVariable(name: "cwd", scope: !3657, file: !3658, line: 37, type: !7)
!3660 = !DILocation(line: 37, column: 9, scope: !3657)
!3661 = !DILocation(line: 37, column: 15, scope: !3657)
!3662 = !DILocation(line: 38, column: 9, scope: !3663)
!3663 = distinct !DILexicalBlock(scope: !3657, file: !3658, line: 38, column: 7)
!3664 = !DILocation(line: 38, column: 13, scope: !3663)
!3665 = !DILocation(line: 38, column: 16, scope: !3663)
!3666 = !DILocation(line: 38, column: 22, scope: !3663)
!3667 = !DILocation(line: 38, column: 7, scope: !3657)
!3668 = !DILocation(line: 39, column: 5, scope: !3663)
!3669 = !DILocation(line: 40, column: 10, scope: !3657)
!3670 = !DILocation(line: 40, column: 3, scope: !3657)
!3671 = !DILocalVariable(name: "cwd", scope: !3672, file: !3658, line: 37, type: !7)
!3672 = distinct !DISubprogram(name: "xgetcwd", scope: !3658, file: !3658, line: 35, type: !425, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3673, retainedNodes: !4)
!3673 = distinct !DICompileUnit(language: DW_LANG_C99, file: !139, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!3674 = distinct !DISubprogram(name: "rpl_mbrtowc", scope: !3675, file: !3675, line: 86, type: !3676, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !140, retainedNodes: !4)
!3675 = !DIFile(filename: "lib/mbrtowc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3676 = !DISubroutineType(types: !3677)
!3677 = !{!74, !3678, !16, !74, !3679}
!3678 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2247, size: 64)
!3679 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3680, size: 64)
!3680 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !2218, line: 6, baseType: !3681)
!3681 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !2220, line: 21, baseType: !3682)
!3682 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2220, line: 13, size: 64, elements: !3683)
!3683 = !{!3684, !3685}
!3684 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !3682, file: !2220, line: 15, baseType: !19, size: 32)
!3685 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !3682, file: !2220, line: 20, baseType: !3686, size: 32, offset: 32)
!3686 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !3682, file: !2220, line: 16, size: 32, elements: !3687)
!3687 = !{!3688, !3689}
!3688 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !3686, file: !2220, line: 18, baseType: !59, size: 32)
!3689 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !3686, file: !2220, line: 19, baseType: !2229, size: 32)
!3690 = !DILocalVariable(name: "pwc", arg: 1, scope: !3674, file: !3675, line: 86, type: !3678)
!3691 = !DILocation(line: 86, column: 23, scope: !3674)
!3692 = !DILocalVariable(name: "s", arg: 2, scope: !3674, file: !3675, line: 86, type: !16)
!3693 = !DILocation(line: 86, column: 40, scope: !3674)
!3694 = !DILocalVariable(name: "n", arg: 3, scope: !3674, file: !3675, line: 86, type: !74)
!3695 = !DILocation(line: 86, column: 50, scope: !3674)
!3696 = !DILocalVariable(name: "ps", arg: 4, scope: !3674, file: !3675, line: 86, type: !3679)
!3697 = !DILocation(line: 86, column: 64, scope: !3674)
!3698 = !DILocalVariable(name: "ret", scope: !3674, file: !3675, line: 88, type: !74)
!3699 = !DILocation(line: 88, column: 10, scope: !3674)
!3700 = !DILocalVariable(name: "wc", scope: !3674, file: !3675, line: 89, type: !2247)
!3701 = !DILocation(line: 89, column: 11, scope: !3674)
!3702 = !DILocation(line: 105, column: 9, scope: !3703)
!3703 = distinct !DILexicalBlock(scope: !3674, file: !3675, line: 105, column: 7)
!3704 = !DILocation(line: 105, column: 7, scope: !3674)
!3705 = !DILocation(line: 106, column: 9, scope: !3703)
!3706 = !DILocation(line: 106, column: 5, scope: !3703)
!3707 = !DILocation(line: 145, column: 18, scope: !3674)
!3708 = !DILocation(line: 145, column: 23, scope: !3674)
!3709 = !DILocation(line: 145, column: 26, scope: !3674)
!3710 = !DILocation(line: 145, column: 29, scope: !3674)
!3711 = !DILocation(line: 145, column: 9, scope: !3674)
!3712 = !DILocation(line: 145, column: 7, scope: !3674)
!3713 = !DILocation(line: 154, column: 22, scope: !3714)
!3714 = distinct !DILexicalBlock(scope: !3674, file: !3675, line: 154, column: 7)
!3715 = !DILocation(line: 154, column: 19, scope: !3714)
!3716 = !DILocation(line: 154, column: 26, scope: !3714)
!3717 = !DILocation(line: 154, column: 29, scope: !3714)
!3718 = !DILocation(line: 154, column: 31, scope: !3714)
!3719 = !DILocation(line: 154, column: 36, scope: !3714)
!3720 = !DILocation(line: 154, column: 41, scope: !3714)
!3721 = !DILocation(line: 154, column: 7, scope: !3674)
!3722 = !DILocalVariable(name: "uc", scope: !3723, file: !3675, line: 156, type: !148)
!3723 = distinct !DILexicalBlock(scope: !3714, file: !3675, line: 155, column: 5)
!3724 = !DILocation(line: 156, column: 21, scope: !3723)
!3725 = !DILocation(line: 156, column: 27, scope: !3723)
!3726 = !DILocation(line: 156, column: 26, scope: !3723)
!3727 = !DILocation(line: 157, column: 14, scope: !3723)
!3728 = !DILocation(line: 157, column: 8, scope: !3723)
!3729 = !DILocation(line: 157, column: 12, scope: !3723)
!3730 = !DILocation(line: 158, column: 7, scope: !3723)
!3731 = !DILocation(line: 162, column: 10, scope: !3674)
!3732 = !DILocation(line: 162, column: 3, scope: !3674)
!3733 = !DILocation(line: 163, column: 1, scope: !3674)
!3734 = !DILocalVariable(name: "pwc", arg: 1, scope: !3735, file: !3675, line: 86, type: !3678)
!3735 = distinct !DISubprogram(name: "rpl_mbrtowc", scope: !3675, file: !3675, line: 86, type: !3736, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3749, retainedNodes: !4)
!3736 = !DISubroutineType(types: !3737)
!3737 = !{!74, !3678, !16, !74, !3738}
!3738 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3739, size: 64)
!3739 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !2218, line: 6, baseType: !3740)
!3740 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !2220, line: 21, baseType: !3741)
!3741 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2220, line: 13, size: 64, elements: !3742)
!3742 = !{!3743, !3744}
!3743 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !3741, file: !2220, line: 15, baseType: !19, size: 32)
!3744 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !3741, file: !2220, line: 20, baseType: !3745, size: 32, offset: 32)
!3745 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !3741, file: !2220, line: 16, size: 32, elements: !3746)
!3746 = !{!3747, !3748}
!3747 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !3745, file: !2220, line: 18, baseType: !59, size: 32)
!3748 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !3745, file: !2220, line: 19, baseType: !2229, size: 32)
!3749 = distinct !DICompileUnit(language: DW_LANG_C99, file: !141, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !142, nameTableKind: None)
!3750 = !DILocalVariable(name: "s", arg: 2, scope: !3735, file: !3675, line: 86, type: !16)
!3751 = !DILocalVariable(name: "n", arg: 3, scope: !3735, file: !3675, line: 86, type: !74)
!3752 = !DILocalVariable(name: "ps", arg: 4, scope: !3735, file: !3675, line: 86, type: !3738)
!3753 = !DILocalVariable(name: "ret", scope: !3735, file: !3675, line: 88, type: !74)
!3754 = !DILocalVariable(name: "wc", scope: !3735, file: !3675, line: 89, type: !2247)
!3755 = distinct !DISubprogram(name: "c_strcasecmp", scope: !3756, file: !3756, line: 27, type: !3757, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !143, retainedNodes: !4)
!3756 = !DIFile(filename: "lib/c-strcasecmp.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3757 = !DISubroutineType(types: !3758)
!3758 = !{!19, !16, !16}
!3759 = !DILocalVariable(name: "s1", arg: 1, scope: !3755, file: !3756, line: 27, type: !16)
!3760 = !DILocation(line: 27, column: 27, scope: !3755)
!3761 = !DILocalVariable(name: "s2", arg: 2, scope: !3755, file: !3756, line: 27, type: !16)
!3762 = !DILocation(line: 27, column: 43, scope: !3755)
!3763 = !DILocalVariable(name: "p1", scope: !3755, file: !3756, line: 29, type: !146)
!3764 = !DILocation(line: 29, column: 33, scope: !3755)
!3765 = !DILocation(line: 29, column: 62, scope: !3755)
!3766 = !DILocalVariable(name: "p2", scope: !3755, file: !3756, line: 30, type: !146)
!3767 = !DILocation(line: 30, column: 33, scope: !3755)
!3768 = !DILocation(line: 30, column: 62, scope: !3755)
!3769 = !DILocalVariable(name: "c1", scope: !3755, file: !3756, line: 31, type: !148)
!3770 = !DILocation(line: 31, column: 17, scope: !3755)
!3771 = !DILocalVariable(name: "c2", scope: !3755, file: !3756, line: 31, type: !148)
!3772 = !DILocation(line: 31, column: 21, scope: !3755)
!3773 = !DILocation(line: 33, column: 7, scope: !3774)
!3774 = distinct !DILexicalBlock(scope: !3755, file: !3756, line: 33, column: 7)
!3775 = !DILocation(line: 33, column: 13, scope: !3774)
!3776 = !DILocation(line: 33, column: 10, scope: !3774)
!3777 = !DILocation(line: 33, column: 7, scope: !3755)
!3778 = !DILocation(line: 34, column: 5, scope: !3774)
!3779 = !DILocation(line: 36, column: 3, scope: !3755)
!3780 = !DILocation(line: 38, column: 24, scope: !3781)
!3781 = distinct !DILexicalBlock(scope: !3755, file: !3756, line: 37, column: 5)
!3782 = !DILocation(line: 38, column: 23, scope: !3781)
!3783 = !DILocation(line: 38, column: 12, scope: !3781)
!3784 = !DILocation(line: 38, column: 10, scope: !3781)
!3785 = !DILocation(line: 39, column: 24, scope: !3781)
!3786 = !DILocation(line: 39, column: 23, scope: !3781)
!3787 = !DILocation(line: 39, column: 12, scope: !3781)
!3788 = !DILocation(line: 39, column: 10, scope: !3781)
!3789 = !DILocation(line: 41, column: 11, scope: !3790)
!3790 = distinct !DILexicalBlock(scope: !3781, file: !3756, line: 41, column: 11)
!3791 = !DILocation(line: 41, column: 14, scope: !3790)
!3792 = !DILocation(line: 41, column: 11, scope: !3781)
!3793 = !DILocation(line: 42, column: 9, scope: !3790)
!3794 = !DILocation(line: 44, column: 7, scope: !3781)
!3795 = !DILocation(line: 45, column: 7, scope: !3781)
!3796 = !DILocation(line: 46, column: 5, scope: !3781)
!3797 = !DILocation(line: 47, column: 10, scope: !3755)
!3798 = !DILocation(line: 47, column: 16, scope: !3755)
!3799 = !DILocation(line: 47, column: 13, scope: !3755)
!3800 = distinct !{!3800, !3779, !3801}
!3801 = !DILocation(line: 47, column: 18, scope: !3755)
!3802 = !DILocation(line: 50, column: 12, scope: !3803)
!3803 = distinct !DILexicalBlock(scope: !3755, file: !3756, line: 49, column: 7)
!3804 = !DILocation(line: 50, column: 17, scope: !3803)
!3805 = !DILocation(line: 50, column: 15, scope: !3803)
!3806 = !DILocation(line: 50, column: 5, scope: !3803)
!3807 = !DILocation(line: 56, column: 1, scope: !3755)
!3808 = !DILocalVariable(name: "s1", arg: 1, scope: !3809, file: !3756, line: 27, type: !16)
!3809 = distinct !DISubprogram(name: "c_strcasecmp", scope: !3756, file: !3756, line: 27, type: !3757, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3810, retainedNodes: !4)
!3810 = distinct !DICompileUnit(language: DW_LANG_C99, file: !144, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !145, nameTableKind: None)
!3811 = !DILocalVariable(name: "s2", arg: 2, scope: !3809, file: !3756, line: 27, type: !16)
!3812 = !DILocalVariable(name: "p1", scope: !3809, file: !3756, line: 29, type: !146)
!3813 = !DILocalVariable(name: "p2", scope: !3809, file: !3756, line: 30, type: !146)
!3814 = !DILocalVariable(name: "c1", scope: !3809, file: !3756, line: 31, type: !148)
!3815 = !DILocalVariable(name: "c2", scope: !3809, file: !3756, line: 31, type: !148)
!3816 = distinct !DISubprogram(name: "close_stream", scope: !3817, file: !3817, line: 56, type: !3818, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !149, retainedNodes: !4)
!3817 = !DIFile(filename: "lib/close-stream.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3818 = !DISubroutineType(types: !3819)
!3819 = !{!19, !3820}
!3820 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3821, size: 64)
!3821 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3156, line: 7, baseType: !3822)
!3822 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3158, line: 49, size: 1728, elements: !3823)
!3823 = !{!3824, !3825, !3826, !3827, !3828, !3829, !3830, !3831, !3832, !3833, !3834, !3835, !3836, !3837, !3839, !3840, !3841, !3842, !3843, !3844, !3845, !3846, !3847, !3848, !3849, !3850, !3851, !3852, !3853}
!3824 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3822, file: !3158, line: 51, baseType: !19, size: 32)
!3825 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3822, file: !3158, line: 54, baseType: !7, size: 64, offset: 64)
!3826 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3822, file: !3158, line: 55, baseType: !7, size: 64, offset: 128)
!3827 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3822, file: !3158, line: 56, baseType: !7, size: 64, offset: 192)
!3828 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3822, file: !3158, line: 57, baseType: !7, size: 64, offset: 256)
!3829 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3822, file: !3158, line: 58, baseType: !7, size: 64, offset: 320)
!3830 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3822, file: !3158, line: 59, baseType: !7, size: 64, offset: 384)
!3831 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3822, file: !3158, line: 60, baseType: !7, size: 64, offset: 448)
!3832 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3822, file: !3158, line: 61, baseType: !7, size: 64, offset: 512)
!3833 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3822, file: !3158, line: 64, baseType: !7, size: 64, offset: 576)
!3834 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3822, file: !3158, line: 65, baseType: !7, size: 64, offset: 640)
!3835 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3822, file: !3158, line: 66, baseType: !7, size: 64, offset: 704)
!3836 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3822, file: !3158, line: 68, baseType: !3173, size: 64, offset: 768)
!3837 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3822, file: !3158, line: 70, baseType: !3838, size: 64, offset: 832)
!3838 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3822, size: 64)
!3839 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3822, file: !3158, line: 72, baseType: !19, size: 32, offset: 896)
!3840 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3822, file: !3158, line: 73, baseType: !19, size: 32, offset: 928)
!3841 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3822, file: !3158, line: 74, baseType: !447, size: 64, offset: 960)
!3842 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3822, file: !3158, line: 77, baseType: !73, size: 16, offset: 1024)
!3843 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3822, file: !3158, line: 78, baseType: !3182, size: 8, offset: 1040)
!3844 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3822, file: !3158, line: 79, baseType: !3184, size: 8, offset: 1048)
!3845 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3822, file: !3158, line: 81, baseType: !3188, size: 64, offset: 1088)
!3846 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3822, file: !3158, line: 89, baseType: !3191, size: 64, offset: 1152)
!3847 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3822, file: !3158, line: 91, baseType: !3193, size: 64, offset: 1216)
!3848 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3822, file: !3158, line: 92, baseType: !3196, size: 64, offset: 1280)
!3849 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3822, file: !3158, line: 93, baseType: !3838, size: 64, offset: 1344)
!3850 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3822, file: !3158, line: 94, baseType: !6, size: 64, offset: 1408)
!3851 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3822, file: !3158, line: 95, baseType: !74, size: 64, offset: 1472)
!3852 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3822, file: !3158, line: 96, baseType: !19, size: 32, offset: 1536)
!3853 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3822, file: !3158, line: 98, baseType: !3203, size: 160, offset: 1568)
!3854 = !DILocalVariable(name: "stream", arg: 1, scope: !3816, file: !3817, line: 56, type: !3820)
!3855 = !DILocation(line: 56, column: 21, scope: !3816)
!3856 = !DILocalVariable(name: "some_pending", scope: !3816, file: !3817, line: 58, type: !3857)
!3857 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !38)
!3858 = !DILocation(line: 58, column: 14, scope: !3816)
!3859 = !DILocation(line: 58, column: 42, scope: !3816)
!3860 = !DILocation(line: 58, column: 30, scope: !3816)
!3861 = !DILocation(line: 58, column: 50, scope: !3816)
!3862 = !DILocalVariable(name: "prev_fail", scope: !3816, file: !3817, line: 59, type: !3857)
!3863 = !DILocation(line: 59, column: 14, scope: !3816)
!3864 = !DILocation(line: 59, column: 27, scope: !3816)
!3865 = !DILocation(line: 59, column: 43, scope: !3816)
!3866 = !DILocalVariable(name: "fclose_fail", scope: !3816, file: !3817, line: 60, type: !3857)
!3867 = !DILocation(line: 60, column: 14, scope: !3816)
!3868 = !DILocation(line: 60, column: 37, scope: !3816)
!3869 = !DILocation(line: 60, column: 29, scope: !3816)
!3870 = !DILocation(line: 60, column: 45, scope: !3816)
!3871 = !DILocation(line: 70, column: 7, scope: !3872)
!3872 = distinct !DILexicalBlock(scope: !3816, file: !3817, line: 70, column: 7)
!3873 = !DILocation(line: 70, column: 17, scope: !3872)
!3874 = !DILocation(line: 70, column: 21, scope: !3872)
!3875 = !DILocation(line: 70, column: 33, scope: !3872)
!3876 = !DILocation(line: 70, column: 37, scope: !3872)
!3877 = !DILocation(line: 70, column: 50, scope: !3872)
!3878 = !DILocation(line: 70, column: 53, scope: !3872)
!3879 = !DILocation(line: 70, column: 59, scope: !3872)
!3880 = !DILocation(line: 70, column: 7, scope: !3816)
!3881 = !DILocation(line: 72, column: 13, scope: !3882)
!3882 = distinct !DILexicalBlock(scope: !3883, file: !3817, line: 72, column: 11)
!3883 = distinct !DILexicalBlock(scope: !3872, file: !3817, line: 71, column: 5)
!3884 = !DILocation(line: 72, column: 11, scope: !3883)
!3885 = !DILocation(line: 73, column: 9, scope: !3882)
!3886 = !DILocation(line: 73, column: 15, scope: !3882)
!3887 = !DILocation(line: 74, column: 7, scope: !3883)
!3888 = !DILocation(line: 77, column: 3, scope: !3816)
!3889 = !DILocation(line: 78, column: 1, scope: !3816)
!3890 = !DILocalVariable(name: "stream", arg: 1, scope: !3891, file: !3817, line: 56, type: !3894)
!3891 = distinct !DISubprogram(name: "close_stream", scope: !3817, file: !3817, line: 56, type: !3892, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3928, retainedNodes: !4)
!3892 = !DISubroutineType(types: !3893)
!3893 = !{!19, !3894}
!3894 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3895, size: 64)
!3895 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3156, line: 7, baseType: !3896)
!3896 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3158, line: 49, size: 1728, elements: !3897)
!3897 = !{!3898, !3899, !3900, !3901, !3902, !3903, !3904, !3905, !3906, !3907, !3908, !3909, !3910, !3911, !3913, !3914, !3915, !3916, !3917, !3918, !3919, !3920, !3921, !3922, !3923, !3924, !3925, !3926, !3927}
!3898 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3896, file: !3158, line: 51, baseType: !19, size: 32)
!3899 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3896, file: !3158, line: 54, baseType: !7, size: 64, offset: 64)
!3900 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3896, file: !3158, line: 55, baseType: !7, size: 64, offset: 128)
!3901 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3896, file: !3158, line: 56, baseType: !7, size: 64, offset: 192)
!3902 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3896, file: !3158, line: 57, baseType: !7, size: 64, offset: 256)
!3903 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3896, file: !3158, line: 58, baseType: !7, size: 64, offset: 320)
!3904 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3896, file: !3158, line: 59, baseType: !7, size: 64, offset: 384)
!3905 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3896, file: !3158, line: 60, baseType: !7, size: 64, offset: 448)
!3906 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3896, file: !3158, line: 61, baseType: !7, size: 64, offset: 512)
!3907 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3896, file: !3158, line: 64, baseType: !7, size: 64, offset: 576)
!3908 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3896, file: !3158, line: 65, baseType: !7, size: 64, offset: 640)
!3909 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3896, file: !3158, line: 66, baseType: !7, size: 64, offset: 704)
!3910 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3896, file: !3158, line: 68, baseType: !3173, size: 64, offset: 768)
!3911 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3896, file: !3158, line: 70, baseType: !3912, size: 64, offset: 832)
!3912 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3896, size: 64)
!3913 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3896, file: !3158, line: 72, baseType: !19, size: 32, offset: 896)
!3914 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3896, file: !3158, line: 73, baseType: !19, size: 32, offset: 928)
!3915 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3896, file: !3158, line: 74, baseType: !447, size: 64, offset: 960)
!3916 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3896, file: !3158, line: 77, baseType: !73, size: 16, offset: 1024)
!3917 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3896, file: !3158, line: 78, baseType: !3182, size: 8, offset: 1040)
!3918 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3896, file: !3158, line: 79, baseType: !3184, size: 8, offset: 1048)
!3919 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3896, file: !3158, line: 81, baseType: !3188, size: 64, offset: 1088)
!3920 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3896, file: !3158, line: 89, baseType: !3191, size: 64, offset: 1152)
!3921 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3896, file: !3158, line: 91, baseType: !3193, size: 64, offset: 1216)
!3922 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3896, file: !3158, line: 92, baseType: !3196, size: 64, offset: 1280)
!3923 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3896, file: !3158, line: 93, baseType: !3912, size: 64, offset: 1344)
!3924 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3896, file: !3158, line: 94, baseType: !6, size: 64, offset: 1408)
!3925 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3896, file: !3158, line: 95, baseType: !74, size: 64, offset: 1472)
!3926 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3896, file: !3158, line: 96, baseType: !19, size: 32, offset: 1536)
!3927 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3896, file: !3158, line: 98, baseType: !3203, size: 160, offset: 1568)
!3928 = distinct !DICompileUnit(language: DW_LANG_C99, file: !150, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!3929 = !DILocalVariable(name: "some_pending", scope: !3891, file: !3817, line: 58, type: !3857)
!3930 = !DILocalVariable(name: "prev_fail", scope: !3891, file: !3817, line: 59, type: !3857)
!3931 = !DILocalVariable(name: "fclose_fail", scope: !3891, file: !3817, line: 60, type: !3857)
!3932 = distinct !DISubprogram(name: "hard_locale", scope: !3933, file: !3933, line: 27, type: !3934, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !151, retainedNodes: !4)
!3933 = !DIFile(filename: "lib/hard-locale.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3934 = !DISubroutineType(types: !3935)
!3935 = !{!38, !19}
!3936 = !DILocalVariable(name: "category", arg: 1, scope: !3932, file: !3933, line: 27, type: !19)
!3937 = !DILocation(line: 27, column: 18, scope: !3932)
!3938 = !DILocalVariable(name: "locale", scope: !3932, file: !3933, line: 29, type: !3939)
!3939 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 2056, elements: !3940)
!3940 = !{!3941}
!3941 = !DISubrange(count: 257)
!3942 = !DILocation(line: 29, column: 8, scope: !3932)
!3943 = !DILocation(line: 31, column: 25, scope: !3944)
!3944 = distinct !DILexicalBlock(scope: !3932, file: !3933, line: 31, column: 7)
!3945 = !DILocation(line: 31, column: 35, scope: !3944)
!3946 = !DILocation(line: 31, column: 7, scope: !3944)
!3947 = !DILocation(line: 31, column: 7, scope: !3932)
!3948 = !DILocation(line: 32, column: 5, scope: !3944)
!3949 = !DILocation(line: 34, column: 20, scope: !3932)
!3950 = !DILocation(line: 34, column: 12, scope: !3932)
!3951 = !DILocation(line: 34, column: 33, scope: !3932)
!3952 = !DILocation(line: 34, column: 38, scope: !3932)
!3953 = !DILocation(line: 34, column: 49, scope: !3932)
!3954 = !DILocation(line: 34, column: 41, scope: !3932)
!3955 = !DILocation(line: 34, column: 66, scope: !3932)
!3956 = !DILocation(line: 34, column: 10, scope: !3932)
!3957 = !DILocation(line: 34, column: 3, scope: !3932)
!3958 = !DILocation(line: 35, column: 1, scope: !3932)
!3959 = distinct !DISubprogram(name: "locale_charset", scope: !3960, file: !3960, line: 831, type: !3961, scopeLine: 832, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !153, retainedNodes: !4)
!3960 = !DIFile(filename: "lib/localcharset.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3961 = !DISubroutineType(types: !3962)
!3962 = !{!16}
!3963 = !DILocalVariable(name: "codeset", scope: !3959, file: !3960, line: 833, type: !16)
!3964 = !DILocation(line: 833, column: 15, scope: !3959)
!3965 = !DILocation(line: 847, column: 13, scope: !3959)
!3966 = !DILocation(line: 847, column: 11, scope: !3959)
!3967 = !DILocation(line: 911, column: 7, scope: !3968)
!3968 = distinct !DILexicalBlock(scope: !3959, file: !3960, line: 911, column: 7)
!3969 = !DILocation(line: 911, column: 15, scope: !3968)
!3970 = !DILocation(line: 911, column: 7, scope: !3959)
!3971 = !DILocation(line: 913, column: 13, scope: !3968)
!3972 = !DILocation(line: 913, column: 5, scope: !3968)
!3973 = !DILocation(line: 1070, column: 13, scope: !3974)
!3974 = distinct !DILexicalBlock(scope: !3975, file: !3960, line: 1070, column: 13)
!3975 = distinct !DILexicalBlock(scope: !3976, file: !3960, line: 1060, column: 7)
!3976 = distinct !DILexicalBlock(scope: !3959, file: !3960, line: 1019, column: 3)
!3977 = !DILocation(line: 1070, column: 24, scope: !3974)
!3978 = !DILocation(line: 1070, column: 13, scope: !3975)
!3979 = !DILocation(line: 1071, column: 19, scope: !3974)
!3980 = !DILocation(line: 1071, column: 11, scope: !3974)
!3981 = !DILocation(line: 1158, column: 10, scope: !3959)
!3982 = !DILocation(line: 1158, column: 3, scope: !3959)
!3983 = !DILocalVariable(name: "codeset", scope: !3984, file: !3960, line: 833, type: !16)
!3984 = distinct !DISubprogram(name: "locale_charset", scope: !3960, file: !3960, line: 831, type: !3961, scopeLine: 832, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3985, retainedNodes: !4)
!3985 = distinct !DICompileUnit(language: DW_LANG_C99, file: !154, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!3986 = distinct !DISubprogram(name: "setlocale_null_r", scope: !3987, file: !3987, line: 269, type: !3988, scopeLine: 270, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !155, retainedNodes: !4)
!3987 = !DIFile(filename: "lib/setlocale_null.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3988 = !DISubroutineType(types: !3989)
!3989 = !{!19, !19, !7, !74}
!3990 = !DILocalVariable(name: "category", arg: 1, scope: !3986, file: !3987, line: 269, type: !19)
!3991 = !DILocation(line: 269, column: 23, scope: !3986)
!3992 = !DILocalVariable(name: "buf", arg: 2, scope: !3986, file: !3987, line: 269, type: !7)
!3993 = !DILocation(line: 269, column: 39, scope: !3986)
!3994 = !DILocalVariable(name: "bufsize", arg: 3, scope: !3986, file: !3987, line: 269, type: !74)
!3995 = !DILocation(line: 269, column: 51, scope: !3986)
!3996 = !DILocation(line: 274, column: 35, scope: !3986)
!3997 = !DILocation(line: 274, column: 45, scope: !3986)
!3998 = !DILocation(line: 274, column: 50, scope: !3986)
!3999 = !DILocation(line: 274, column: 10, scope: !3986)
!4000 = !DILocation(line: 274, column: 3, scope: !3986)
!4001 = !DILocalVariable(name: "category", arg: 1, scope: !4002, file: !3987, line: 269, type: !19)
!4002 = distinct !DISubprogram(name: "setlocale_null_r", scope: !3987, file: !3987, line: 269, type: !3988, scopeLine: 270, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4003, retainedNodes: !4)
!4003 = distinct !DICompileUnit(language: DW_LANG_C99, file: !156, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!4004 = !DILocalVariable(name: "buf", arg: 2, scope: !4002, file: !3987, line: 269, type: !7)
!4005 = !DILocalVariable(name: "bufsize", arg: 3, scope: !4002, file: !3987, line: 269, type: !74)
!4006 = distinct !DISubprogram(name: "setlocale_null_unlocked", scope: !3987, file: !3987, line: 91, type: !3988, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !155, retainedNodes: !4)
!4007 = !DILocalVariable(name: "category", arg: 1, scope: !4006, file: !3987, line: 91, type: !19)
!4008 = !DILocation(line: 91, column: 30, scope: !4006)
!4009 = !DILocalVariable(name: "buf", arg: 2, scope: !4006, file: !3987, line: 91, type: !7)
!4010 = !DILocation(line: 91, column: 46, scope: !4006)
!4011 = !DILocalVariable(name: "bufsize", arg: 3, scope: !4006, file: !3987, line: 91, type: !74)
!4012 = !DILocation(line: 91, column: 58, scope: !4006)
!4013 = !DILocalVariable(name: "result", scope: !4006, file: !3987, line: 140, type: !16)
!4014 = !DILocation(line: 140, column: 15, scope: !4006)
!4015 = !DILocation(line: 140, column: 51, scope: !4006)
!4016 = !DILocation(line: 140, column: 24, scope: !4006)
!4017 = !DILocation(line: 142, column: 7, scope: !4018)
!4018 = distinct !DILexicalBlock(scope: !4006, file: !3987, line: 142, column: 7)
!4019 = !DILocation(line: 142, column: 14, scope: !4018)
!4020 = !DILocation(line: 142, column: 7, scope: !4006)
!4021 = !DILocation(line: 145, column: 11, scope: !4022)
!4022 = distinct !DILexicalBlock(scope: !4023, file: !3987, line: 145, column: 11)
!4023 = distinct !DILexicalBlock(scope: !4018, file: !3987, line: 143, column: 5)
!4024 = !DILocation(line: 145, column: 19, scope: !4022)
!4025 = !DILocation(line: 145, column: 11, scope: !4023)
!4026 = !DILocation(line: 149, column: 9, scope: !4022)
!4027 = !DILocation(line: 149, column: 16, scope: !4022)
!4028 = !DILocation(line: 150, column: 7, scope: !4023)
!4029 = !DILocalVariable(name: "length", scope: !4030, file: !3987, line: 154, type: !74)
!4030 = distinct !DILexicalBlock(scope: !4018, file: !3987, line: 153, column: 5)
!4031 = !DILocation(line: 154, column: 14, scope: !4030)
!4032 = !DILocation(line: 154, column: 31, scope: !4030)
!4033 = !DILocation(line: 154, column: 23, scope: !4030)
!4034 = !DILocation(line: 155, column: 11, scope: !4035)
!4035 = distinct !DILexicalBlock(scope: !4030, file: !3987, line: 155, column: 11)
!4036 = !DILocation(line: 155, column: 20, scope: !4035)
!4037 = !DILocation(line: 155, column: 18, scope: !4035)
!4038 = !DILocation(line: 155, column: 11, scope: !4030)
!4039 = !DILocation(line: 157, column: 19, scope: !4040)
!4040 = distinct !DILexicalBlock(scope: !4035, file: !3987, line: 156, column: 9)
!4041 = !DILocation(line: 157, column: 24, scope: !4040)
!4042 = !DILocation(line: 157, column: 32, scope: !4040)
!4043 = !DILocation(line: 157, column: 39, scope: !4040)
!4044 = !DILocation(line: 157, column: 11, scope: !4040)
!4045 = !DILocation(line: 158, column: 11, scope: !4040)
!4046 = !DILocation(line: 162, column: 15, scope: !4047)
!4047 = distinct !DILexicalBlock(scope: !4048, file: !3987, line: 162, column: 15)
!4048 = distinct !DILexicalBlock(scope: !4035, file: !3987, line: 161, column: 9)
!4049 = !DILocation(line: 162, column: 23, scope: !4047)
!4050 = !DILocation(line: 162, column: 15, scope: !4048)
!4051 = !DILocation(line: 167, column: 23, scope: !4052)
!4052 = distinct !DILexicalBlock(scope: !4047, file: !3987, line: 163, column: 13)
!4053 = !DILocation(line: 167, column: 28, scope: !4052)
!4054 = !DILocation(line: 167, column: 36, scope: !4052)
!4055 = !DILocation(line: 167, column: 44, scope: !4052)
!4056 = !DILocation(line: 167, column: 15, scope: !4052)
!4057 = !DILocation(line: 168, column: 15, scope: !4052)
!4058 = !DILocation(line: 168, column: 19, scope: !4052)
!4059 = !DILocation(line: 168, column: 27, scope: !4052)
!4060 = !DILocation(line: 168, column: 32, scope: !4052)
!4061 = !DILocation(line: 169, column: 13, scope: !4052)
!4062 = !DILocation(line: 170, column: 11, scope: !4048)
!4063 = !DILocation(line: 174, column: 1, scope: !4006)
!4064 = distinct !DISubprogram(name: "setlocale_null_androidfix", scope: !3987, file: !3987, line: 60, type: !4065, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !155, retainedNodes: !4)
!4065 = !DISubroutineType(types: !4066)
!4066 = !{!16, !19}
!4067 = !DILocalVariable(name: "category", arg: 1, scope: !4064, file: !3987, line: 60, type: !19)
!4068 = !DILocation(line: 60, column: 32, scope: !4064)
!4069 = !DILocalVariable(name: "result", scope: !4064, file: !3987, line: 62, type: !16)
!4070 = !DILocation(line: 62, column: 15, scope: !4064)
!4071 = !DILocation(line: 62, column: 35, scope: !4064)
!4072 = !DILocation(line: 62, column: 24, scope: !4064)
!4073 = !DILocation(line: 87, column: 10, scope: !4064)
!4074 = !DILocation(line: 87, column: 3, scope: !4064)
!4075 = !DILocalVariable(name: "category", arg: 1, scope: !4076, file: !3987, line: 60, type: !19)
!4076 = distinct !DISubprogram(name: "setlocale_null_androidfix", scope: !3987, file: !3987, line: 60, type: !4065, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !4077, retainedNodes: !4)
!4077 = distinct !DICompileUnit(language: DW_LANG_C99, file: !156, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!4078 = !DILocalVariable(name: "result", scope: !4076, file: !3987, line: 62, type: !16)
!4079 = distinct !DISubprogram(name: "rpl_fclose", scope: !4080, file: !4080, line: 58, type: !4081, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !157, retainedNodes: !4)
!4080 = !DIFile(filename: "lib/fclose.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4081 = !DISubroutineType(types: !4082)
!4082 = !{!19, !4083}
!4083 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4084, size: 64)
!4084 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3156, line: 7, baseType: !4085)
!4085 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3158, line: 49, size: 1728, elements: !4086)
!4086 = !{!4087, !4088, !4089, !4090, !4091, !4092, !4093, !4094, !4095, !4096, !4097, !4098, !4099, !4100, !4102, !4103, !4104, !4105, !4106, !4107, !4108, !4109, !4110, !4111, !4112, !4113, !4114, !4115, !4116}
!4087 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !4085, file: !3158, line: 51, baseType: !19, size: 32)
!4088 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !4085, file: !3158, line: 54, baseType: !7, size: 64, offset: 64)
!4089 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !4085, file: !3158, line: 55, baseType: !7, size: 64, offset: 128)
!4090 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !4085, file: !3158, line: 56, baseType: !7, size: 64, offset: 192)
!4091 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !4085, file: !3158, line: 57, baseType: !7, size: 64, offset: 256)
!4092 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !4085, file: !3158, line: 58, baseType: !7, size: 64, offset: 320)
!4093 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !4085, file: !3158, line: 59, baseType: !7, size: 64, offset: 384)
!4094 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !4085, file: !3158, line: 60, baseType: !7, size: 64, offset: 448)
!4095 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !4085, file: !3158, line: 61, baseType: !7, size: 64, offset: 512)
!4096 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !4085, file: !3158, line: 64, baseType: !7, size: 64, offset: 576)
!4097 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !4085, file: !3158, line: 65, baseType: !7, size: 64, offset: 640)
!4098 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !4085, file: !3158, line: 66, baseType: !7, size: 64, offset: 704)
!4099 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !4085, file: !3158, line: 68, baseType: !3173, size: 64, offset: 768)
!4100 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !4085, file: !3158, line: 70, baseType: !4101, size: 64, offset: 832)
!4101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4085, size: 64)
!4102 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !4085, file: !3158, line: 72, baseType: !19, size: 32, offset: 896)
!4103 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !4085, file: !3158, line: 73, baseType: !19, size: 32, offset: 928)
!4104 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !4085, file: !3158, line: 74, baseType: !447, size: 64, offset: 960)
!4105 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !4085, file: !3158, line: 77, baseType: !73, size: 16, offset: 1024)
!4106 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !4085, file: !3158, line: 78, baseType: !3182, size: 8, offset: 1040)
!4107 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !4085, file: !3158, line: 79, baseType: !3184, size: 8, offset: 1048)
!4108 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !4085, file: !3158, line: 81, baseType: !3188, size: 64, offset: 1088)
!4109 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !4085, file: !3158, line: 89, baseType: !3191, size: 64, offset: 1152)
!4110 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !4085, file: !3158, line: 91, baseType: !3193, size: 64, offset: 1216)
!4111 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !4085, file: !3158, line: 92, baseType: !3196, size: 64, offset: 1280)
!4112 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !4085, file: !3158, line: 93, baseType: !4101, size: 64, offset: 1344)
!4113 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !4085, file: !3158, line: 94, baseType: !6, size: 64, offset: 1408)
!4114 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !4085, file: !3158, line: 95, baseType: !74, size: 64, offset: 1472)
!4115 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !4085, file: !3158, line: 96, baseType: !19, size: 32, offset: 1536)
!4116 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !4085, file: !3158, line: 98, baseType: !3203, size: 160, offset: 1568)
!4117 = !DILocalVariable(name: "fp", arg: 1, scope: !4079, file: !4080, line: 58, type: !4083)
!4118 = !DILocation(line: 58, column: 19, scope: !4079)
!4119 = !DILocalVariable(name: "saved_errno", scope: !4079, file: !4080, line: 60, type: !19)
!4120 = !DILocation(line: 60, column: 7, scope: !4079)
!4121 = !DILocalVariable(name: "fd", scope: !4079, file: !4080, line: 61, type: !19)
!4122 = !DILocation(line: 61, column: 7, scope: !4079)
!4123 = !DILocalVariable(name: "result", scope: !4079, file: !4080, line: 62, type: !19)
!4124 = !DILocation(line: 62, column: 7, scope: !4079)
!4125 = !DILocation(line: 65, column: 16, scope: !4079)
!4126 = !DILocation(line: 65, column: 8, scope: !4079)
!4127 = !DILocation(line: 65, column: 6, scope: !4079)
!4128 = !DILocation(line: 66, column: 7, scope: !4129)
!4129 = distinct !DILexicalBlock(scope: !4079, file: !4080, line: 66, column: 7)
!4130 = !DILocation(line: 66, column: 10, scope: !4129)
!4131 = !DILocation(line: 66, column: 7, scope: !4079)
!4132 = !DILocation(line: 67, column: 28, scope: !4129)
!4133 = !DILocation(line: 67, column: 12, scope: !4129)
!4134 = !DILocation(line: 67, column: 5, scope: !4129)
!4135 = !DILocation(line: 72, column: 9, scope: !4136)
!4136 = distinct !DILexicalBlock(scope: !4079, file: !4080, line: 72, column: 7)
!4137 = !DILocation(line: 72, column: 23, scope: !4136)
!4138 = !DILocation(line: 72, column: 41, scope: !4136)
!4139 = !DILocation(line: 72, column: 33, scope: !4136)
!4140 = !DILocation(line: 72, column: 26, scope: !4136)
!4141 = !DILocation(line: 72, column: 59, scope: !4136)
!4142 = !DILocation(line: 73, column: 7, scope: !4136)
!4143 = !DILocation(line: 73, column: 18, scope: !4136)
!4144 = !DILocation(line: 73, column: 10, scope: !4136)
!4145 = !DILocation(line: 72, column: 7, scope: !4079)
!4146 = !DILocation(line: 74, column: 19, scope: !4136)
!4147 = !DILocation(line: 74, column: 17, scope: !4136)
!4148 = !DILocation(line: 74, column: 5, scope: !4136)
!4149 = !DILocation(line: 100, column: 28, scope: !4079)
!4150 = !DILocation(line: 100, column: 12, scope: !4079)
!4151 = !DILocation(line: 100, column: 10, scope: !4079)
!4152 = !DILocation(line: 105, column: 7, scope: !4153)
!4153 = distinct !DILexicalBlock(scope: !4079, file: !4080, line: 105, column: 7)
!4154 = !DILocation(line: 105, column: 19, scope: !4153)
!4155 = !DILocation(line: 105, column: 7, scope: !4079)
!4156 = !DILocation(line: 107, column: 15, scope: !4157)
!4157 = distinct !DILexicalBlock(scope: !4153, file: !4080, line: 106, column: 5)
!4158 = !DILocation(line: 107, column: 7, scope: !4157)
!4159 = !DILocation(line: 107, column: 13, scope: !4157)
!4160 = !DILocation(line: 108, column: 14, scope: !4157)
!4161 = !DILocation(line: 109, column: 5, scope: !4157)
!4162 = !DILocation(line: 111, column: 10, scope: !4079)
!4163 = !DILocation(line: 111, column: 3, scope: !4079)
!4164 = !DILocation(line: 112, column: 1, scope: !4079)
!4165 = !DILocalVariable(name: "fp", arg: 1, scope: !4166, file: !4080, line: 58, type: !4169)
!4166 = distinct !DISubprogram(name: "rpl_fclose", scope: !4080, file: !4080, line: 58, type: !4167, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4203, retainedNodes: !4)
!4167 = !DISubroutineType(types: !4168)
!4168 = !{!19, !4169}
!4169 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4170, size: 64)
!4170 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3156, line: 7, baseType: !4171)
!4171 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3158, line: 49, size: 1728, elements: !4172)
!4172 = !{!4173, !4174, !4175, !4176, !4177, !4178, !4179, !4180, !4181, !4182, !4183, !4184, !4185, !4186, !4188, !4189, !4190, !4191, !4192, !4193, !4194, !4195, !4196, !4197, !4198, !4199, !4200, !4201, !4202}
!4173 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !4171, file: !3158, line: 51, baseType: !19, size: 32)
!4174 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !4171, file: !3158, line: 54, baseType: !7, size: 64, offset: 64)
!4175 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !4171, file: !3158, line: 55, baseType: !7, size: 64, offset: 128)
!4176 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !4171, file: !3158, line: 56, baseType: !7, size: 64, offset: 192)
!4177 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !4171, file: !3158, line: 57, baseType: !7, size: 64, offset: 256)
!4178 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !4171, file: !3158, line: 58, baseType: !7, size: 64, offset: 320)
!4179 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !4171, file: !3158, line: 59, baseType: !7, size: 64, offset: 384)
!4180 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !4171, file: !3158, line: 60, baseType: !7, size: 64, offset: 448)
!4181 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !4171, file: !3158, line: 61, baseType: !7, size: 64, offset: 512)
!4182 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !4171, file: !3158, line: 64, baseType: !7, size: 64, offset: 576)
!4183 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !4171, file: !3158, line: 65, baseType: !7, size: 64, offset: 640)
!4184 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !4171, file: !3158, line: 66, baseType: !7, size: 64, offset: 704)
!4185 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !4171, file: !3158, line: 68, baseType: !3173, size: 64, offset: 768)
!4186 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !4171, file: !3158, line: 70, baseType: !4187, size: 64, offset: 832)
!4187 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4171, size: 64)
!4188 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !4171, file: !3158, line: 72, baseType: !19, size: 32, offset: 896)
!4189 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !4171, file: !3158, line: 73, baseType: !19, size: 32, offset: 928)
!4190 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !4171, file: !3158, line: 74, baseType: !447, size: 64, offset: 960)
!4191 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !4171, file: !3158, line: 77, baseType: !73, size: 16, offset: 1024)
!4192 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !4171, file: !3158, line: 78, baseType: !3182, size: 8, offset: 1040)
!4193 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !4171, file: !3158, line: 79, baseType: !3184, size: 8, offset: 1048)
!4194 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !4171, file: !3158, line: 81, baseType: !3188, size: 64, offset: 1088)
!4195 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !4171, file: !3158, line: 89, baseType: !3191, size: 64, offset: 1152)
!4196 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !4171, file: !3158, line: 91, baseType: !3193, size: 64, offset: 1216)
!4197 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !4171, file: !3158, line: 92, baseType: !3196, size: 64, offset: 1280)
!4198 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !4171, file: !3158, line: 93, baseType: !4187, size: 64, offset: 1344)
!4199 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !4171, file: !3158, line: 94, baseType: !6, size: 64, offset: 1408)
!4200 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !4171, file: !3158, line: 95, baseType: !74, size: 64, offset: 1472)
!4201 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !4171, file: !3158, line: 96, baseType: !19, size: 32, offset: 1536)
!4202 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !4171, file: !3158, line: 98, baseType: !3203, size: 160, offset: 1568)
!4203 = distinct !DICompileUnit(language: DW_LANG_C99, file: !158, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!4204 = !DILocalVariable(name: "saved_errno", scope: !4166, file: !4080, line: 60, type: !19)
!4205 = !DILocalVariable(name: "fd", scope: !4166, file: !4080, line: 61, type: !19)
!4206 = !DILocalVariable(name: "result", scope: !4166, file: !4080, line: 62, type: !19)
!4207 = distinct !DISubprogram(name: "rpl_fflush", scope: !4208, file: !4208, line: 129, type: !4209, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !159, retainedNodes: !4)
!4208 = !DIFile(filename: "lib/fflush.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4209 = !DISubroutineType(types: !4210)
!4210 = !{!19, !4211}
!4211 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4212, size: 64)
!4212 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3156, line: 7, baseType: !4213)
!4213 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3158, line: 49, size: 1728, elements: !4214)
!4214 = !{!4215, !4216, !4217, !4218, !4219, !4220, !4221, !4222, !4223, !4224, !4225, !4226, !4227, !4228, !4230, !4231, !4232, !4233, !4234, !4235, !4236, !4237, !4238, !4239, !4240, !4241, !4242, !4243, !4244}
!4215 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !4213, file: !3158, line: 51, baseType: !19, size: 32)
!4216 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !4213, file: !3158, line: 54, baseType: !7, size: 64, offset: 64)
!4217 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !4213, file: !3158, line: 55, baseType: !7, size: 64, offset: 128)
!4218 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !4213, file: !3158, line: 56, baseType: !7, size: 64, offset: 192)
!4219 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !4213, file: !3158, line: 57, baseType: !7, size: 64, offset: 256)
!4220 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !4213, file: !3158, line: 58, baseType: !7, size: 64, offset: 320)
!4221 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !4213, file: !3158, line: 59, baseType: !7, size: 64, offset: 384)
!4222 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !4213, file: !3158, line: 60, baseType: !7, size: 64, offset: 448)
!4223 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !4213, file: !3158, line: 61, baseType: !7, size: 64, offset: 512)
!4224 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !4213, file: !3158, line: 64, baseType: !7, size: 64, offset: 576)
!4225 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !4213, file: !3158, line: 65, baseType: !7, size: 64, offset: 640)
!4226 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !4213, file: !3158, line: 66, baseType: !7, size: 64, offset: 704)
!4227 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !4213, file: !3158, line: 68, baseType: !3173, size: 64, offset: 768)
!4228 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !4213, file: !3158, line: 70, baseType: !4229, size: 64, offset: 832)
!4229 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4213, size: 64)
!4230 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !4213, file: !3158, line: 72, baseType: !19, size: 32, offset: 896)
!4231 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !4213, file: !3158, line: 73, baseType: !19, size: 32, offset: 928)
!4232 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !4213, file: !3158, line: 74, baseType: !447, size: 64, offset: 960)
!4233 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !4213, file: !3158, line: 77, baseType: !73, size: 16, offset: 1024)
!4234 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !4213, file: !3158, line: 78, baseType: !3182, size: 8, offset: 1040)
!4235 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !4213, file: !3158, line: 79, baseType: !3184, size: 8, offset: 1048)
!4236 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !4213, file: !3158, line: 81, baseType: !3188, size: 64, offset: 1088)
!4237 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !4213, file: !3158, line: 89, baseType: !3191, size: 64, offset: 1152)
!4238 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !4213, file: !3158, line: 91, baseType: !3193, size: 64, offset: 1216)
!4239 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !4213, file: !3158, line: 92, baseType: !3196, size: 64, offset: 1280)
!4240 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !4213, file: !3158, line: 93, baseType: !4229, size: 64, offset: 1344)
!4241 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !4213, file: !3158, line: 94, baseType: !6, size: 64, offset: 1408)
!4242 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !4213, file: !3158, line: 95, baseType: !74, size: 64, offset: 1472)
!4243 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !4213, file: !3158, line: 96, baseType: !19, size: 32, offset: 1536)
!4244 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !4213, file: !3158, line: 98, baseType: !3203, size: 160, offset: 1568)
!4245 = !DILocalVariable(name: "stream", arg: 1, scope: !4207, file: !4208, line: 129, type: !4211)
!4246 = !DILocation(line: 129, column: 19, scope: !4207)
!4247 = !DILocation(line: 150, column: 7, scope: !4248)
!4248 = distinct !DILexicalBlock(scope: !4207, file: !4208, line: 150, column: 7)
!4249 = !DILocation(line: 150, column: 14, scope: !4248)
!4250 = !DILocation(line: 150, column: 22, scope: !4248)
!4251 = !DILocation(line: 150, column: 27, scope: !4248)
!4252 = !DILocation(line: 150, column: 7, scope: !4207)
!4253 = !DILocation(line: 151, column: 20, scope: !4248)
!4254 = !DILocation(line: 151, column: 12, scope: !4248)
!4255 = !DILocation(line: 151, column: 5, scope: !4248)
!4256 = !DILocation(line: 156, column: 44, scope: !4207)
!4257 = !DILocation(line: 156, column: 3, scope: !4207)
!4258 = !DILocation(line: 158, column: 18, scope: !4207)
!4259 = !DILocation(line: 158, column: 10, scope: !4207)
!4260 = !DILocation(line: 158, column: 3, scope: !4207)
!4261 = !DILocation(line: 235, column: 1, scope: !4207)
!4262 = !DILocalVariable(name: "stream", arg: 1, scope: !4263, file: !4208, line: 129, type: !4266)
!4263 = distinct !DISubprogram(name: "rpl_fflush", scope: !4208, file: !4208, line: 129, type: !4264, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4300, retainedNodes: !4)
!4264 = !DISubroutineType(types: !4265)
!4265 = !{!19, !4266}
!4266 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4267, size: 64)
!4267 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3156, line: 7, baseType: !4268)
!4268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3158, line: 49, size: 1728, elements: !4269)
!4269 = !{!4270, !4271, !4272, !4273, !4274, !4275, !4276, !4277, !4278, !4279, !4280, !4281, !4282, !4283, !4285, !4286, !4287, !4288, !4289, !4290, !4291, !4292, !4293, !4294, !4295, !4296, !4297, !4298, !4299}
!4270 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !4268, file: !3158, line: 51, baseType: !19, size: 32)
!4271 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !4268, file: !3158, line: 54, baseType: !7, size: 64, offset: 64)
!4272 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !4268, file: !3158, line: 55, baseType: !7, size: 64, offset: 128)
!4273 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !4268, file: !3158, line: 56, baseType: !7, size: 64, offset: 192)
!4274 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !4268, file: !3158, line: 57, baseType: !7, size: 64, offset: 256)
!4275 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !4268, file: !3158, line: 58, baseType: !7, size: 64, offset: 320)
!4276 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !4268, file: !3158, line: 59, baseType: !7, size: 64, offset: 384)
!4277 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !4268, file: !3158, line: 60, baseType: !7, size: 64, offset: 448)
!4278 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !4268, file: !3158, line: 61, baseType: !7, size: 64, offset: 512)
!4279 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !4268, file: !3158, line: 64, baseType: !7, size: 64, offset: 576)
!4280 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !4268, file: !3158, line: 65, baseType: !7, size: 64, offset: 640)
!4281 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !4268, file: !3158, line: 66, baseType: !7, size: 64, offset: 704)
!4282 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !4268, file: !3158, line: 68, baseType: !3173, size: 64, offset: 768)
!4283 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !4268, file: !3158, line: 70, baseType: !4284, size: 64, offset: 832)
!4284 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4268, size: 64)
!4285 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !4268, file: !3158, line: 72, baseType: !19, size: 32, offset: 896)
!4286 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !4268, file: !3158, line: 73, baseType: !19, size: 32, offset: 928)
!4287 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !4268, file: !3158, line: 74, baseType: !447, size: 64, offset: 960)
!4288 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !4268, file: !3158, line: 77, baseType: !73, size: 16, offset: 1024)
!4289 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !4268, file: !3158, line: 78, baseType: !3182, size: 8, offset: 1040)
!4290 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !4268, file: !3158, line: 79, baseType: !3184, size: 8, offset: 1048)
!4291 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !4268, file: !3158, line: 81, baseType: !3188, size: 64, offset: 1088)
!4292 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !4268, file: !3158, line: 89, baseType: !3191, size: 64, offset: 1152)
!4293 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !4268, file: !3158, line: 91, baseType: !3193, size: 64, offset: 1216)
!4294 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !4268, file: !3158, line: 92, baseType: !3196, size: 64, offset: 1280)
!4295 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !4268, file: !3158, line: 93, baseType: !4284, size: 64, offset: 1344)
!4296 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !4268, file: !3158, line: 94, baseType: !6, size: 64, offset: 1408)
!4297 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !4268, file: !3158, line: 95, baseType: !74, size: 64, offset: 1472)
!4298 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !4268, file: !3158, line: 96, baseType: !19, size: 32, offset: 1536)
!4299 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !4268, file: !3158, line: 98, baseType: !3203, size: 160, offset: 1568)
!4300 = distinct !DICompileUnit(language: DW_LANG_C99, file: !160, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!4301 = distinct !DISubprogram(name: "clear_ungetc_buffer_preserving_position", scope: !4208, file: !4208, line: 41, type: !4302, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !159, retainedNodes: !4)
!4302 = !DISubroutineType(types: !4303)
!4303 = !{null, !4211}
!4304 = !DILocalVariable(name: "fp", arg: 1, scope: !4301, file: !4208, line: 41, type: !4211)
!4305 = !DILocation(line: 41, column: 48, scope: !4301)
!4306 = !DILocation(line: 43, column: 7, scope: !4307)
!4307 = distinct !DILexicalBlock(scope: !4301, file: !4208, line: 43, column: 7)
!4308 = !DILocation(line: 43, column: 11, scope: !4307)
!4309 = !DILocation(line: 43, column: 18, scope: !4307)
!4310 = !DILocation(line: 43, column: 7, scope: !4301)
!4311 = !DILocation(line: 45, column: 13, scope: !4307)
!4312 = !DILocation(line: 45, column: 5, scope: !4307)
!4313 = !DILocation(line: 46, column: 1, scope: !4301)
!4314 = !DILocalVariable(name: "fp", arg: 1, scope: !4315, file: !4208, line: 41, type: !4318)
!4315 = distinct !DISubprogram(name: "clear_ungetc_buffer_preserving_position", scope: !4208, file: !4208, line: 41, type: !4316, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !4352, retainedNodes: !4)
!4316 = !DISubroutineType(types: !4317)
!4317 = !{null, !4318}
!4318 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4319, size: 64)
!4319 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3156, line: 7, baseType: !4320)
!4320 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3158, line: 49, size: 1728, elements: !4321)
!4321 = !{!4322, !4323, !4324, !4325, !4326, !4327, !4328, !4329, !4330, !4331, !4332, !4333, !4334, !4335, !4337, !4338, !4339, !4340, !4341, !4342, !4343, !4344, !4345, !4346, !4347, !4348, !4349, !4350, !4351}
!4322 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !4320, file: !3158, line: 51, baseType: !19, size: 32)
!4323 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !4320, file: !3158, line: 54, baseType: !7, size: 64, offset: 64)
!4324 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !4320, file: !3158, line: 55, baseType: !7, size: 64, offset: 128)
!4325 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !4320, file: !3158, line: 56, baseType: !7, size: 64, offset: 192)
!4326 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !4320, file: !3158, line: 57, baseType: !7, size: 64, offset: 256)
!4327 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !4320, file: !3158, line: 58, baseType: !7, size: 64, offset: 320)
!4328 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !4320, file: !3158, line: 59, baseType: !7, size: 64, offset: 384)
!4329 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !4320, file: !3158, line: 60, baseType: !7, size: 64, offset: 448)
!4330 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !4320, file: !3158, line: 61, baseType: !7, size: 64, offset: 512)
!4331 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !4320, file: !3158, line: 64, baseType: !7, size: 64, offset: 576)
!4332 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !4320, file: !3158, line: 65, baseType: !7, size: 64, offset: 640)
!4333 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !4320, file: !3158, line: 66, baseType: !7, size: 64, offset: 704)
!4334 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !4320, file: !3158, line: 68, baseType: !3173, size: 64, offset: 768)
!4335 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !4320, file: !3158, line: 70, baseType: !4336, size: 64, offset: 832)
!4336 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4320, size: 64)
!4337 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !4320, file: !3158, line: 72, baseType: !19, size: 32, offset: 896)
!4338 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !4320, file: !3158, line: 73, baseType: !19, size: 32, offset: 928)
!4339 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !4320, file: !3158, line: 74, baseType: !447, size: 64, offset: 960)
!4340 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !4320, file: !3158, line: 77, baseType: !73, size: 16, offset: 1024)
!4341 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !4320, file: !3158, line: 78, baseType: !3182, size: 8, offset: 1040)
!4342 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !4320, file: !3158, line: 79, baseType: !3184, size: 8, offset: 1048)
!4343 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !4320, file: !3158, line: 81, baseType: !3188, size: 64, offset: 1088)
!4344 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !4320, file: !3158, line: 89, baseType: !3191, size: 64, offset: 1152)
!4345 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !4320, file: !3158, line: 91, baseType: !3193, size: 64, offset: 1216)
!4346 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !4320, file: !3158, line: 92, baseType: !3196, size: 64, offset: 1280)
!4347 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !4320, file: !3158, line: 93, baseType: !4336, size: 64, offset: 1344)
!4348 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !4320, file: !3158, line: 94, baseType: !6, size: 64, offset: 1408)
!4349 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !4320, file: !3158, line: 95, baseType: !74, size: 64, offset: 1472)
!4350 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !4320, file: !3158, line: 96, baseType: !19, size: 32, offset: 1536)
!4351 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !4320, file: !3158, line: 98, baseType: !3203, size: 160, offset: 1568)
!4352 = distinct !DICompileUnit(language: DW_LANG_C99, file: !160, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!4353 = distinct !DISubprogram(name: "rpl_fseeko", scope: !4354, file: !4354, line: 28, type: !4355, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !161, retainedNodes: !4)
!4354 = !DIFile(filename: "lib/fseeko.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4355 = !DISubroutineType(types: !4356)
!4356 = !{!19, !4357, !4391, !19}
!4357 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4358, size: 64)
!4358 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3156, line: 7, baseType: !4359)
!4359 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3158, line: 49, size: 1728, elements: !4360)
!4360 = !{!4361, !4362, !4363, !4364, !4365, !4366, !4367, !4368, !4369, !4370, !4371, !4372, !4373, !4374, !4376, !4377, !4378, !4379, !4380, !4381, !4382, !4383, !4384, !4385, !4386, !4387, !4388, !4389, !4390}
!4361 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !4359, file: !3158, line: 51, baseType: !19, size: 32)
!4362 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !4359, file: !3158, line: 54, baseType: !7, size: 64, offset: 64)
!4363 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !4359, file: !3158, line: 55, baseType: !7, size: 64, offset: 128)
!4364 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !4359, file: !3158, line: 56, baseType: !7, size: 64, offset: 192)
!4365 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !4359, file: !3158, line: 57, baseType: !7, size: 64, offset: 256)
!4366 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !4359, file: !3158, line: 58, baseType: !7, size: 64, offset: 320)
!4367 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !4359, file: !3158, line: 59, baseType: !7, size: 64, offset: 384)
!4368 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !4359, file: !3158, line: 60, baseType: !7, size: 64, offset: 448)
!4369 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !4359, file: !3158, line: 61, baseType: !7, size: 64, offset: 512)
!4370 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !4359, file: !3158, line: 64, baseType: !7, size: 64, offset: 576)
!4371 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !4359, file: !3158, line: 65, baseType: !7, size: 64, offset: 640)
!4372 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !4359, file: !3158, line: 66, baseType: !7, size: 64, offset: 704)
!4373 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !4359, file: !3158, line: 68, baseType: !3173, size: 64, offset: 768)
!4374 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !4359, file: !3158, line: 70, baseType: !4375, size: 64, offset: 832)
!4375 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4359, size: 64)
!4376 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !4359, file: !3158, line: 72, baseType: !19, size: 32, offset: 896)
!4377 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !4359, file: !3158, line: 73, baseType: !19, size: 32, offset: 928)
!4378 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !4359, file: !3158, line: 74, baseType: !447, size: 64, offset: 960)
!4379 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !4359, file: !3158, line: 77, baseType: !73, size: 16, offset: 1024)
!4380 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !4359, file: !3158, line: 78, baseType: !3182, size: 8, offset: 1040)
!4381 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !4359, file: !3158, line: 79, baseType: !3184, size: 8, offset: 1048)
!4382 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !4359, file: !3158, line: 81, baseType: !3188, size: 64, offset: 1088)
!4383 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !4359, file: !3158, line: 89, baseType: !3191, size: 64, offset: 1152)
!4384 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !4359, file: !3158, line: 91, baseType: !3193, size: 64, offset: 1216)
!4385 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !4359, file: !3158, line: 92, baseType: !3196, size: 64, offset: 1280)
!4386 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !4359, file: !3158, line: 93, baseType: !4375, size: 64, offset: 1344)
!4387 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !4359, file: !3158, line: 94, baseType: !6, size: 64, offset: 1408)
!4388 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !4359, file: !3158, line: 95, baseType: !74, size: 64, offset: 1472)
!4389 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !4359, file: !3158, line: 96, baseType: !19, size: 32, offset: 1536)
!4390 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !4359, file: !3158, line: 98, baseType: !3203, size: 160, offset: 1568)
!4391 = !DIDerivedType(tag: DW_TAG_typedef, name: "off_t", file: !3498, line: 63, baseType: !447)
!4392 = !DILocalVariable(name: "fp", arg: 1, scope: !4353, file: !4354, line: 28, type: !4357)
!4393 = !DILocation(line: 28, column: 15, scope: !4353)
!4394 = !DILocalVariable(name: "offset", arg: 2, scope: !4353, file: !4354, line: 28, type: !4391)
!4395 = !DILocation(line: 28, column: 25, scope: !4353)
!4396 = !DILocalVariable(name: "whence", arg: 3, scope: !4353, file: !4354, line: 28, type: !19)
!4397 = !DILocation(line: 28, column: 37, scope: !4353)
!4398 = !DILocation(line: 52, column: 7, scope: !4399)
!4399 = distinct !DILexicalBlock(scope: !4353, file: !4354, line: 52, column: 7)
!4400 = !DILocation(line: 52, column: 11, scope: !4399)
!4401 = !DILocation(line: 52, column: 27, scope: !4399)
!4402 = !DILocation(line: 52, column: 31, scope: !4399)
!4403 = !DILocation(line: 52, column: 24, scope: !4399)
!4404 = !DILocation(line: 53, column: 7, scope: !4399)
!4405 = !DILocation(line: 53, column: 10, scope: !4399)
!4406 = !DILocation(line: 53, column: 14, scope: !4399)
!4407 = !DILocation(line: 53, column: 31, scope: !4399)
!4408 = !DILocation(line: 53, column: 35, scope: !4399)
!4409 = !DILocation(line: 53, column: 28, scope: !4399)
!4410 = !DILocation(line: 54, column: 7, scope: !4399)
!4411 = !DILocation(line: 54, column: 10, scope: !4399)
!4412 = !DILocation(line: 54, column: 14, scope: !4399)
!4413 = !DILocation(line: 54, column: 28, scope: !4399)
!4414 = !DILocation(line: 52, column: 7, scope: !4353)
!4415 = !DILocalVariable(name: "pos", scope: !4416, file: !4354, line: 117, type: !4391)
!4416 = distinct !DILexicalBlock(scope: !4399, file: !4354, line: 113, column: 5)
!4417 = !DILocation(line: 117, column: 13, scope: !4416)
!4418 = !DILocation(line: 117, column: 34, scope: !4416)
!4419 = !DILocation(line: 117, column: 26, scope: !4416)
!4420 = !DILocation(line: 117, column: 39, scope: !4416)
!4421 = !DILocation(line: 117, column: 47, scope: !4416)
!4422 = !DILocation(line: 117, column: 19, scope: !4416)
!4423 = !DILocation(line: 118, column: 11, scope: !4424)
!4424 = distinct !DILexicalBlock(scope: !4416, file: !4354, line: 118, column: 11)
!4425 = !DILocation(line: 118, column: 15, scope: !4424)
!4426 = !DILocation(line: 118, column: 11, scope: !4416)
!4427 = !DILocation(line: 124, column: 11, scope: !4428)
!4428 = distinct !DILexicalBlock(scope: !4424, file: !4354, line: 119, column: 9)
!4429 = !DILocation(line: 129, column: 7, scope: !4416)
!4430 = !DILocation(line: 129, column: 11, scope: !4416)
!4431 = !DILocation(line: 129, column: 18, scope: !4416)
!4432 = !DILocation(line: 130, column: 21, scope: !4416)
!4433 = !DILocation(line: 130, column: 7, scope: !4416)
!4434 = !DILocation(line: 130, column: 11, scope: !4416)
!4435 = !DILocation(line: 130, column: 19, scope: !4416)
!4436 = !DILocation(line: 161, column: 7, scope: !4416)
!4437 = !DILocation(line: 163, column: 18, scope: !4353)
!4438 = !DILocation(line: 163, column: 22, scope: !4353)
!4439 = !DILocation(line: 163, column: 30, scope: !4353)
!4440 = !DILocation(line: 163, column: 10, scope: !4353)
!4441 = !DILocation(line: 163, column: 3, scope: !4353)
!4442 = !DILocation(line: 164, column: 1, scope: !4353)
!4443 = !DILocalVariable(name: "fp", arg: 1, scope: !4444, file: !4354, line: 28, type: !4447)
!4444 = distinct !DISubprogram(name: "rpl_fseeko", scope: !4354, file: !4354, line: 28, type: !4445, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4481, retainedNodes: !4)
!4445 = !DISubroutineType(types: !4446)
!4446 = !{!19, !4447, !4391, !19}
!4447 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4448, size: 64)
!4448 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3156, line: 7, baseType: !4449)
!4449 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3158, line: 49, size: 1728, elements: !4450)
!4450 = !{!4451, !4452, !4453, !4454, !4455, !4456, !4457, !4458, !4459, !4460, !4461, !4462, !4463, !4464, !4466, !4467, !4468, !4469, !4470, !4471, !4472, !4473, !4474, !4475, !4476, !4477, !4478, !4479, !4480}
!4451 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !4449, file: !3158, line: 51, baseType: !19, size: 32)
!4452 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !4449, file: !3158, line: 54, baseType: !7, size: 64, offset: 64)
!4453 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !4449, file: !3158, line: 55, baseType: !7, size: 64, offset: 128)
!4454 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !4449, file: !3158, line: 56, baseType: !7, size: 64, offset: 192)
!4455 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !4449, file: !3158, line: 57, baseType: !7, size: 64, offset: 256)
!4456 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !4449, file: !3158, line: 58, baseType: !7, size: 64, offset: 320)
!4457 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !4449, file: !3158, line: 59, baseType: !7, size: 64, offset: 384)
!4458 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !4449, file: !3158, line: 60, baseType: !7, size: 64, offset: 448)
!4459 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !4449, file: !3158, line: 61, baseType: !7, size: 64, offset: 512)
!4460 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !4449, file: !3158, line: 64, baseType: !7, size: 64, offset: 576)
!4461 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !4449, file: !3158, line: 65, baseType: !7, size: 64, offset: 640)
!4462 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !4449, file: !3158, line: 66, baseType: !7, size: 64, offset: 704)
!4463 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !4449, file: !3158, line: 68, baseType: !3173, size: 64, offset: 768)
!4464 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !4449, file: !3158, line: 70, baseType: !4465, size: 64, offset: 832)
!4465 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4449, size: 64)
!4466 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !4449, file: !3158, line: 72, baseType: !19, size: 32, offset: 896)
!4467 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !4449, file: !3158, line: 73, baseType: !19, size: 32, offset: 928)
!4468 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !4449, file: !3158, line: 74, baseType: !447, size: 64, offset: 960)
!4469 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !4449, file: !3158, line: 77, baseType: !73, size: 16, offset: 1024)
!4470 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !4449, file: !3158, line: 78, baseType: !3182, size: 8, offset: 1040)
!4471 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !4449, file: !3158, line: 79, baseType: !3184, size: 8, offset: 1048)
!4472 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !4449, file: !3158, line: 81, baseType: !3188, size: 64, offset: 1088)
!4473 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !4449, file: !3158, line: 89, baseType: !3191, size: 64, offset: 1152)
!4474 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !4449, file: !3158, line: 91, baseType: !3193, size: 64, offset: 1216)
!4475 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !4449, file: !3158, line: 92, baseType: !3196, size: 64, offset: 1280)
!4476 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !4449, file: !3158, line: 93, baseType: !4465, size: 64, offset: 1344)
!4477 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !4449, file: !3158, line: 94, baseType: !6, size: 64, offset: 1408)
!4478 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !4449, file: !3158, line: 95, baseType: !74, size: 64, offset: 1472)
!4479 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !4449, file: !3158, line: 96, baseType: !19, size: 32, offset: 1536)
!4480 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !4449, file: !3158, line: 98, baseType: !3203, size: 160, offset: 1568)
!4481 = distinct !DICompileUnit(language: DW_LANG_C99, file: !162, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!4482 = !DILocalVariable(name: "offset", arg: 2, scope: !4444, file: !4354, line: 28, type: !4391)
!4483 = !DILocalVariable(name: "whence", arg: 3, scope: !4444, file: !4354, line: 28, type: !19)
!4484 = distinct !DISubprogram(name: "c_tolower", scope: !4485, file: !4485, line: 337, type: !4486, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !163, retainedNodes: !4)
!4485 = !DIFile(filename: "./lib/c-ctype.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4486 = !DISubroutineType(types: !4487)
!4487 = !{!19, !19}
!4488 = !DILocalVariable(name: "c", arg: 1, scope: !4484, file: !4485, line: 337, type: !19)
!4489 = !DILocation(line: 337, column: 16, scope: !4484)
!4490 = !DILocation(line: 339, column: 11, scope: !4484)
!4491 = !DILocation(line: 339, column: 3, scope: !4484)
!4492 = !DILocation(line: 342, column: 14, scope: !4493)
!4493 = distinct !DILexicalBlock(scope: !4484, file: !4485, line: 340, column: 5)
!4494 = !DILocation(line: 342, column: 16, scope: !4493)
!4495 = !DILocation(line: 342, column: 22, scope: !4493)
!4496 = !DILocation(line: 342, column: 7, scope: !4493)
!4497 = !DILocation(line: 344, column: 14, scope: !4493)
!4498 = !DILocation(line: 344, column: 7, scope: !4493)
!4499 = !DILocation(line: 346, column: 1, scope: !4484)
!4500 = !DILocalVariable(name: "c", arg: 1, scope: !4501, file: !4485, line: 337, type: !19)
!4501 = distinct !DISubprogram(name: "c_tolower", scope: !4485, file: !4485, line: 337, type: !4486, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4502, retainedNodes: !4)
!4502 = distinct !DICompileUnit(language: DW_LANG_C99, file: !164, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
