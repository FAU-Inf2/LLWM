; ModuleID = '<stdin>'
source_filename = "ld-temp.o"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.infomap = type { i8*, i8* }
%struct.option = type { i8*, i32, i32*, i32 }
%struct.quoting_options = type { i32, i32, [8 x i32], i8*, i8* }
%struct.slotvec = type { i64, i8* }
%struct.file_name = type { i8*, i64, i8* }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.dev_ino, %struct.dev_ino, %struct.dev_ino, [3 x i64] }
%struct.dev_ino = type { i64, i64 }
%struct.__dirstream = type opaque
%struct.dirent = type { i64, i64, i16, i8, [256 x i8] }
%struct.__mbstate_t = type { i32, %union.anon }
%union.anon = type { i32 }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }

@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [39 x i8] c"Try '%s --help' for more information.\0A\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"Usage: %s [OPTION]...\0A\00", align 1
@.str.2 = private unnamed_addr constant [60 x i8] c"Print the full filename of the current working directory.\0A\0A\00", align 1
@stdout = external dso_local global %struct._IO_FILE*, align 8
@.str.3 = private unnamed_addr constant [111 x i8] c"  -L, --logical   use PWD from environment, even if it contains symlinks\0A  -P, --physical  avoid all symlinks\0A\00", align 1
@.str.4 = private unnamed_addr constant [45 x i8] c"      --help     display this help and exit\0A\00", align 1
@.str.5 = private unnamed_addr constant [54 x i8] c"      --version  output version information and exit\0A\00", align 1
@.str.6 = private unnamed_addr constant [44 x i8] c"\0AIf no option is specified, -P is assumed.\0A\00", align 1
@.str.7 = private unnamed_addr constant [191 x i8] c"\0ANOTE: your shell may have its own version of %s, which usually supersedes\0Athe version described here.  Please refer to your shell's documentation\0Afor details about the options it supports.\0A\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"pwd\00", align 1
@__const.emit_ancillary_info.infomap = private unnamed_addr constant [7 x %struct.infomap] [%struct.infomap { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.18, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.19, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i32 0, i32 0) }, %struct.infomap zeroinitializer], align 16
@.str.25 = private unnamed_addr constant [23 x i8] c"\0A%s online help: <%s>\0A\00", align 1
@.str.14 = private unnamed_addr constant [14 x i8] c"GNU coreutils\00", align 1
@.str.26 = private unnamed_addr constant [40 x i8] c"https://www.gnu.org/software/coreutils/\00", align 1
@.str.27 = private unnamed_addr constant [4 x i8] c"en_\00", align 1
@.str.28 = private unnamed_addr constant [71 x i8] c"Report any translation bugs to <https://translationproject.org/team/>\0A\00", align 1
@.str.29 = private unnamed_addr constant [27 x i8] c"Full documentation <%s%s>\0A\00", align 1
@.str.30 = private unnamed_addr constant [51 x i8] c"or available locally via: info '(coreutils) %s%s'\0A\00", align 1
@.str.31 = private unnamed_addr constant [12 x i8] c" invocation\00", align 1
@.str.10 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.17 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.18 = private unnamed_addr constant [16 x i8] c"test invocation\00", align 1
@.str.11 = private unnamed_addr constant [10 x i8] c"coreutils\00", align 1
@.str.19 = private unnamed_addr constant [22 x i8] c"Multi-call invocation\00", align 1
@.str.20 = private unnamed_addr constant [10 x i8] c"sha224sum\00", align 1
@.str.21 = private unnamed_addr constant [15 x i8] c"sha2 utilities\00", align 1
@.str.22 = private unnamed_addr constant [10 x i8] c"sha256sum\00", align 1
@.str.23 = private unnamed_addr constant [10 x i8] c"sha384sum\00", align 1
@.str.24 = private unnamed_addr constant [10 x i8] c"sha512sum\00", align 1
@.str.9 = private unnamed_addr constant [16 x i8] c"POSIXLY_CORRECT\00", align 1
@.str.12 = private unnamed_addr constant [24 x i8] c"/usr/local/share/locale\00", align 1
@.str.13 = private unnamed_addr constant [3 x i8] c"LP\00", align 1
@longopts = internal constant [5 x %struct.option] [%struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.32, i32 0, i32 0), i32 0, i32* null, i32 76 }, %struct.option { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.33, i32 0, i32 0), i32 0, i32* null, i32 80 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.34, i32 0, i32 0), i32 0, i32* null, i32 -130 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.35, i32 0, i32 0), i32 0, i32* null, i32 -131 }, %struct.option zeroinitializer], align 16, !dbg !0
@.str.15 = private unnamed_addr constant [13 x i8] c"Jim Meyering\00", align 1
@optind = external dso_local global i32, align 4
@.str.16 = private unnamed_addr constant [30 x i8] c"ignoring non-option arguments\00", align 1
@.str.39 = private unnamed_addr constant [31 x i8] c"failed to get attributes of %s\00", align 1
@.str.40 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@.str.38 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.41 = private unnamed_addr constant [18 x i8] c"failed to stat %s\00", align 1
@.str.42 = private unnamed_addr constant [3 x i8] c"..\00", align 1
@.str.43 = private unnamed_addr constant [25 x i8] c"cannot open directory %s\00", align 1
@.str.44 = private unnamed_addr constant [22 x i8] c"failed to chdir to %s\00", align 1
@.str.45 = private unnamed_addr constant [21 x i8] c"reading directory %s\00", align 1
@.str.46 = private unnamed_addr constant [57 x i8] c"couldn't find directory entry in %s with matching i-node\00", align 1
@.str.47 = private unnamed_addr constant [4 x i8] c"../\00", align 1
@.str.36 = private unnamed_addr constant [4 x i8] c"PWD\00", align 1
@.str.37 = private unnamed_addr constant [3 x i8] c"/.\00", align 1
@.str.32 = private unnamed_addr constant [8 x i8] c"logical\00", align 1
@.str.33 = private unnamed_addr constant [9 x i8] c"physical\00", align 1
@.str.34 = private unnamed_addr constant [5 x i8] c"help\00", align 1
@.str.35 = private unnamed_addr constant [8 x i8] c"version\00", align 1
@Version = internal global i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.48, i32 0, i32 0), align 8, !dbg !25
@.str.48 = private unnamed_addr constant [5 x i8] c"8.32\00", align 1
@ignore_EPIPE = internal global i8 0, align 1, !dbg !30
@.str.51 = private unnamed_addr constant [12 x i8] c"write error\00", align 1
@file_name = internal global i8* null, align 8, !dbg !35
@.str.1.52 = private unnamed_addr constant [7 x i8] c"%s: %s\00", align 1
@.str.2.53 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@exit_failure = internal global i32 1, align 4, !dbg !39
@.str.58 = private unnamed_addr constant [56 x i8] c"A NULL argv[0] was passed through an exec system call.\0A\00", align 1
@.str.1.59 = private unnamed_addr constant [8 x i8] c"/.libs/\00", align 1
@.str.2.60 = private unnamed_addr constant [4 x i8] c"lt-\00", align 1
@program_invocation_short_name = external dso_local global i8*, align 8
@program_name = internal global i8* null, align 8, !dbg !46
@program_invocation_name = external dso_local global i8*, align 8
@default_quoting_options = internal global %struct.quoting_options zeroinitializer, align 8, !dbg !52
@slotvec = internal global %struct.slotvec* @slotvec0, align 8, !dbg !108
@nslots = internal global i32 1, align 4, !dbg !115
@slotvec0 = internal global %struct.slotvec { i64 256, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i32 0, i32 0) }, align 8, !dbg !117
@slot0 = internal global [256 x i8] zeroinitializer, align 16, !dbg !103
@.str.10.63 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.11.64 = private unnamed_addr constant [2 x i8] c"`\00", align 1
@.str.12.65 = private unnamed_addr constant [2 x i8] c"'\00", align 1
@.str.13.66 = private unnamed_addr constant [6 x i8] c"UTF-8\00", align 1
@.str.14.67 = private unnamed_addr constant [4 x i8] c"\E2\80\98\00", align 1
@.str.15.68 = private unnamed_addr constant [4 x i8] c"\E2\80\99\00", align 1
@.str.16.69 = private unnamed_addr constant [8 x i8] c"GB18030\00", align 1
@.str.17.70 = private unnamed_addr constant [4 x i8] c"\A1\07e\00", align 1
@.str.18.71 = private unnamed_addr constant [3 x i8] c"\A1\AF\00", align 1
@quote_quoting_options = internal global %struct.quoting_options { i32 8, i32 0, [8 x i32] zeroinitializer, i8* null, i8* null }, align 8, !dbg !91
@.str.80 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@.str.81 = private unnamed_addr constant [12 x i8] c"%s (%s) %s\0A\00", align 1
@.str.1.82 = private unnamed_addr constant [7 x i8] c"%s %s\0A\00", align 1
@.str.2.83 = private unnamed_addr constant [4 x i8] c"(C)\00", align 1
@.str.3.84 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.4.85 = private unnamed_addr constant [171 x i8] c"License GPLv3+: GNU GPL version 3 or later <%s>.\0AThis is free software: you are free to change and redistribute it.\0AThere is NO WARRANTY, to the extent permitted by law.\0A\00", align 1
@.str.5.86 = private unnamed_addr constant [34 x i8] c"https://gnu.org/licenses/gpl.html\00", align 1
@.str.6.87 = private unnamed_addr constant [16 x i8] c"Written by %s.\0A\00", align 1
@.str.7.88 = private unnamed_addr constant [23 x i8] c"Written by %s and %s.\0A\00", align 1
@.str.8.89 = private unnamed_addr constant [28 x i8] c"Written by %s, %s, and %s.\0A\00", align 1
@.str.9.90 = private unnamed_addr constant [32 x i8] c"Written by %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.10.91 = private unnamed_addr constant [36 x i8] c"Written by %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.11.92 = private unnamed_addr constant [40 x i8] c"Written by %s, %s, %s,\0A%s, %s, and %s.\0A\00", align 1
@.str.12.93 = private unnamed_addr constant [44 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, and %s.\0A\00", align 1
@.str.13.94 = private unnamed_addr constant [48 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.14.95 = private unnamed_addr constant [52 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.15.96 = private unnamed_addr constant [60 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, %s, and others.\0A\00", align 1
@version_etc_copyright = internal constant [47 x i8] c"Copyright %s %d Free Software Foundation, Inc.\00", align 16, !dbg !119
@.str.1.111 = private unnamed_addr constant [17 x i8] c"memory exhausted\00", align 1
@.str.112 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.123 = private unnamed_addr constant [2 x i8] c"C\00", align 1
@.str.1.124 = private unnamed_addr constant [6 x i8] c"POSIX\00", align 1
@.str.127 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1.128 = private unnamed_addr constant [6 x i8] c"ASCII\00", align 1
@inVal0 = global i32 0
@inVal1 = global i8** null
@.compVal0 = private global [4 x i8] c"-LL\00"
@.compVal1 = private global [1 x i8] zeroinitializer
@.compVal2 = private global [3 x i8] c"-L\00"
@x = common global i32 0
@y = common global i32 0
@x.1 = common global i32 0
@y.2 = common global i32 0
@x.3 = common global i32 0
@y.4 = common global i32 0
@x.5 = common global i32 0
@y.6 = common global i32 0
@x.7 = common global i32 0
@y.8 = common global i32 0
@x.9 = common global i32 0
@y.10 = common global i32 0
@x.11 = common global i32 0
@y.12 = common global i32 0
@x.13 = common global i32 0
@y.14 = common global i32 0
@x.15 = common global i32 0
@y.16 = common global i32 0
@x.17 = common global i32 0
@y.18 = common global i32 0
@x.19 = common global i32 0
@y.20 = common global i32 0
@x.21 = common global i32 0
@y.22 = common global i32 0
@x.23 = common global i32 0
@y.24 = common global i32 0
@x.25 = common global i32 0
@y.26 = common global i32 0
@x.27 = common global i32 0
@y.28 = common global i32 0
@x.29 = common global i32 0
@y.30 = common global i32 0
@x.31 = common global i32 0
@y.32 = common global i32 0
@x.33 = common global i32 0
@y.34 = common global i32 0
@x.35 = common global i32 0
@y.36 = common global i32 0
@x.37 = common global i32 0
@y.38 = common global i32 0
@x.39 = common global i32 0
@y.40 = common global i32 0
@x.41 = common global i32 0
@y.42 = common global i32 0
@x.43 = common global i32 0
@y.44 = common global i32 0
@x.45 = common global i32 0
@y.46 = common global i32 0
@x.47 = common global i32 0
@y.48 = common global i32 0
@x.49 = common global i32 0
@y.50 = common global i32 0
@x.51 = common global i32 0
@y.52 = common global i32 0
@x.53 = common global i32 0
@y.54 = common global i32 0
@x.55 = common global i32 0
@y.56 = common global i32 0
@x.57 = common global i32 0
@y.58 = common global i32 0
@x.59 = common global i32 0
@y.60 = common global i32 0
@x.61 = common global i32 0
@y.62 = common global i32 0
@x.63 = common global i32 0
@y.64 = common global i32 0
@x.65 = common global i32 0
@y.66 = common global i32 0
@x.67 = common global i32 0
@y.68 = common global i32 0
@x.69 = common global i32 0
@y.70 = common global i32 0
@x.71 = common global i32 0
@y.72 = common global i32 0
@x.73 = common global i32 0
@y.74 = common global i32 0
@x.75 = common global i32 0
@y.76 = common global i32 0
@x.77 = common global i32 0
@y.78 = common global i32 0
@x.79 = common global i32 0
@y.80 = common global i32 0
@x.81 = common global i32 0
@y.82 = common global i32 0
@x.83 = common global i32 0
@y.84 = common global i32 0
@x.85 = common global i32 0
@y.86 = common global i32 0
@x.87 = common global i32 0
@y.88 = common global i32 0
@x.89 = common global i32 0
@y.90 = common global i32 0
@x.91 = common global i32 0
@y.92 = common global i32 0
@x.93 = common global i32 0
@y.94 = common global i32 0
@x.95 = common global i32 0
@y.96 = common global i32 0
@x.97 = common global i32 0
@y.98 = common global i32 0
@x.99 = common global i32 0
@y.100 = common global i32 0

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @usage(i32) #0 !dbg !171 {
  %2 = load i32, i32* @x
  %3 = load i32, i32* @y
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  store i32 %0, i32* %10, align 4
  call void @llvm.dbg.declare(metadata i32* %10, metadata !174, metadata !DIExpression()), !dbg !175
  %11 = load i32, i32* %10, align 4, !dbg !176
  %12 = icmp ne i32 %11, 0, !dbg !178
  %13 = load i32, i32* @x
  %14 = load i32, i32* @y
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %21, label %76, !dbg !179

21:                                               ; preds = %originalBBpart2
  %22 = load i32, i32* @x
  %23 = load i32, i32* @y
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  %30 = load i32, i32* @x
  %31 = load i32, i32* @y
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %38, !dbg !180

38:                                               ; preds = %originalBBpart24
  %39 = load i32, i32* @x
  %40 = load i32, i32* @y
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %38, %originalBB6alteredBB
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !181
  %48 = call i8* @gettext(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0)) #10, !dbg !181
  %49 = load i8*, i8** @program_name, align 8, !dbg !181
  %50 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %47, i8* %48, i8* %49), !dbg !181
  %51 = load i32, i32* @x
  %52 = load i32, i32* @y
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %59, !dbg !181

59:                                               ; preds = %originalBBpart28
  %60 = load i32, i32* @x
  %61 = load i32, i32* @y
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %59, %originalBB10alteredBB
  %68 = load i32, i32* @x
  %69 = load i32, i32* @y
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %113, !dbg !181

76:                                               ; preds = %originalBBpart2
  %77 = load i32, i32* @x
  %78 = load i32, i32* @y
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %76, %originalBB14alteredBB
  %85 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0)) #10, !dbg !183
  %86 = load i8*, i8** @program_name, align 8, !dbg !185
  %87 = call i32 (i8*, ...) @printf(i8* %85, i8* %86), !dbg !186
  %88 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.2, i64 0, i64 0)) #10, !dbg !187
  %89 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !187
  %90 = call i32 @fputs_unlocked(i8* %88, %struct._IO_FILE* %89), !dbg !187
  %91 = call i8* @gettext(i8* getelementptr inbounds ([111 x i8], [111 x i8]* @.str.3, i64 0, i64 0)) #10, !dbg !188
  %92 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !188
  %93 = call i32 @fputs_unlocked(i8* %91, %struct._IO_FILE* %92), !dbg !188
  %94 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.4, i64 0, i64 0)) #10, !dbg !189
  %95 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !189
  %96 = call i32 @fputs_unlocked(i8* %94, %struct._IO_FILE* %95), !dbg !189
  %97 = call i8* @gettext(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.5, i64 0, i64 0)) #10, !dbg !190
  %98 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !190
  %99 = call i32 @fputs_unlocked(i8* %97, %struct._IO_FILE* %98), !dbg !190
  %100 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.6, i64 0, i64 0)) #10, !dbg !191
  %101 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !191
  %102 = call i32 @fputs_unlocked(i8* %100, %struct._IO_FILE* %101), !dbg !191
  %103 = call i8* @gettext(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.7, i64 0, i64 0)) #10, !dbg !192
  %104 = call i32 (i8*, ...) @printf(i8* %103, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0)), !dbg !193
  call void @emit_ancillary_info(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0)), !dbg !194
  %105 = load i32, i32* @x
  %106 = load i32, i32* @y
  %107 = sub i32 %105, 1
  %108 = mul i32 %105, %107
  %109 = urem i32 %108, 2
  %110 = icmp eq i32 %109, 0
  %111 = icmp slt i32 %106, 10
  %112 = or i1 %110, %111
  br i1 %112, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %113

113:                                              ; preds = %originalBBpart216, %originalBBpart212
  %114 = load i32, i32* @x
  %115 = load i32, i32* @y
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %113, %originalBB18alteredBB
  %122 = load i32, i32* %10, align 4, !dbg !195
  call void @exit(i32 %122) #12, !dbg !196
  %123 = load i32, i32* @x
  %124 = load i32, i32* @y
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  unreachable, !dbg !196

originalBBalteredBB:                              ; preds = %originalBB, %1
  %131 = alloca i32, align 4
  store i32 %0, i32* %131, align 4
  call void @llvm.dbg.declare(metadata i32* %131, metadata !197, metadata !DIExpression()), !dbg !175
  %132 = load i32, i32* %131, align 4, !dbg !176
  %133 = icmp ne i32 %132, 0, !dbg !178
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %38
  %134 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !181
  %135 = call i8* @gettext(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0)) #10, !dbg !181
  %136 = load i8*, i8** @program_name, align 8, !dbg !181
  %137 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %134, i8* %135, i8* %136), !dbg !181
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %59
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %76
  %138 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0)) #10, !dbg !183
  %139 = load i8*, i8** @program_name, align 8, !dbg !185
  %140 = call i32 (i8*, ...) @printf(i8* %138, i8* %139), !dbg !186
  %141 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.2, i64 0, i64 0)) #10, !dbg !187
  %142 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !187
  %143 = call i32 @fputs_unlocked(i8* %141, %struct._IO_FILE* %142), !dbg !187
  %144 = call i8* @gettext(i8* getelementptr inbounds ([111 x i8], [111 x i8]* @.str.3, i64 0, i64 0)) #10, !dbg !188
  %145 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !188
  %146 = call i32 @fputs_unlocked(i8* %144, %struct._IO_FILE* %145), !dbg !188
  %147 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.4, i64 0, i64 0)) #10, !dbg !189
  %148 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !189
  %149 = call i32 @fputs_unlocked(i8* %147, %struct._IO_FILE* %148), !dbg !189
  %150 = call i8* @gettext(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.5, i64 0, i64 0)) #10, !dbg !190
  %151 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !190
  %152 = call i32 @fputs_unlocked(i8* %150, %struct._IO_FILE* %151), !dbg !190
  %153 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.6, i64 0, i64 0)) #10, !dbg !191
  %154 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !191
  %155 = call i32 @fputs_unlocked(i8* %153, %struct._IO_FILE* %154), !dbg !191
  %156 = call i8* @gettext(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.7, i64 0, i64 0)) #10, !dbg !192
  %157 = call i32 (i8*, ...) @printf(i8* %156, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0)), !dbg !193
  call void @emit_ancillary_info(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0)), !dbg !194
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %113
  %158 = load i32, i32* %10, align 4, !dbg !195
  call void @exit(i32 %158) #12, !dbg !196
  br label %originalBB18
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare dso_local i8* @gettext(i8*) #2

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #3

declare dso_local i32 @printf(i8*, ...) #3

declare dso_local i32 @fputs_unlocked(i8*, %struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @emit_ancillary_info(i8*) #4 !dbg !211 {
  %2 = load i32, i32* @x.1
  %3 = load i32, i32* @y.2
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  %11 = alloca [7 x %struct.infomap], align 16
  %12 = alloca i8*, align 8
  %13 = alloca %struct.infomap*, align 8
  %14 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !215, metadata !DIExpression()), !dbg !216
  call void @llvm.dbg.declare(metadata [7 x %struct.infomap]* %11, metadata !217, metadata !DIExpression()), !dbg !226
  %15 = bitcast [7 x %struct.infomap]* %11 to i8*, !dbg !226
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %15, i8* align 16 bitcast ([7 x %struct.infomap]* @__const.emit_ancillary_info.infomap to i8*), i64 112, i1 false), !dbg !226
  call void @llvm.dbg.declare(metadata i8** %12, metadata !227, metadata !DIExpression()), !dbg !228
  %16 = load i8*, i8** %10, align 8, !dbg !229
  store i8* %16, i8** %12, align 8, !dbg !228
  call void @llvm.dbg.declare(metadata %struct.infomap** %13, metadata !230, metadata !DIExpression()), !dbg !232
  %17 = getelementptr inbounds [7 x %struct.infomap], [7 x %struct.infomap]* %11, i64 0, i64 0, !dbg !233
  store %struct.infomap* %17, %struct.infomap** %13, align 8, !dbg !232
  %18 = load i32, i32* @x.1
  %19 = load i32, i32* @y.2
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %26, !dbg !234

26:                                               ; preds = %originalBBpart224, %originalBBpart2
  %27 = load i32, i32* @x.1
  %28 = load i32, i32* @y.2
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %26, %originalBB1alteredBB
  %35 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !235
  %36 = getelementptr inbounds %struct.infomap, %struct.infomap* %35, i32 0, i32 0, !dbg !236
  %37 = load i8*, i8** %36, align 8, !dbg !236
  %38 = icmp ne i8* %37, null, !dbg !235
  %39 = load i32, i32* @x.1
  %40 = load i32, i32* @y.2
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %38, label %47, label %71, !dbg !237

47:                                               ; preds = %originalBBpart24
  %48 = load i32, i32* @x.1
  %49 = load i32, i32* @y.2
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %47, %originalBB6alteredBB
  %56 = load i8*, i8** %10, align 8, !dbg !238
  %57 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !238
  %58 = getelementptr inbounds %struct.infomap, %struct.infomap* %57, i32 0, i32 0, !dbg !238
  %59 = load i8*, i8** %58, align 8, !dbg !238
  %60 = call i32 @strcmp(i8* %56, i8* %59) #13, !dbg !238
  %61 = icmp eq i32 %60, 0, !dbg !238
  %62 = xor i1 %61, true, !dbg !239
  %63 = load i32, i32* @x.1
  %64 = load i32, i32* @y.2
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBBpart216, label %originalBB6alteredBB

originalBBpart216:                                ; preds = %originalBB6
  br label %71

71:                                               ; preds = %originalBBpart216, %originalBBpart24
  %72 = phi i1 [ false, %originalBBpart24 ], [ %62, %originalBBpart216 ], !dbg !240
  %73 = load i32, i32* @x.1
  %74 = load i32, i32* @y.2
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %71, %originalBB18alteredBB
  %81 = load i32, i32* @x.1
  %82 = load i32, i32* @y.2
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %72, label %89, label %108, !dbg !234

89:                                               ; preds = %originalBBpart220
  %90 = load i32, i32* @x.1
  %91 = load i32, i32* @y.2
  %92 = sub i32 %90, 1
  %93 = mul i32 %90, %92
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %91, 10
  %97 = or i1 %95, %96
  br i1 %97, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %89, %originalBB22alteredBB
  %98 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !241
  %99 = getelementptr inbounds %struct.infomap, %struct.infomap* %98, i32 1, !dbg !241
  store %struct.infomap* %99, %struct.infomap** %13, align 8, !dbg !241
  %100 = load i32, i32* @x.1
  %101 = load i32, i32* @y.2
  %102 = sub i32 %100, 1
  %103 = mul i32 %100, %102
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %105, %106
  br i1 %107, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %26, !dbg !234, !llvm.loop !242

108:                                              ; preds = %originalBBpart220
  %109 = load i32, i32* @x.1
  %110 = load i32, i32* @y.2
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %108, %originalBB26alteredBB
  %117 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !243
  %118 = getelementptr inbounds %struct.infomap, %struct.infomap* %117, i32 0, i32 1, !dbg !245
  %119 = load i8*, i8** %118, align 8, !dbg !245
  %120 = icmp ne i8* %119, null, !dbg !243
  %121 = load i32, i32* @x.1
  %122 = load i32, i32* @y.2
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %120, label %129, label %149, !dbg !246

129:                                              ; preds = %originalBBpart228
  %130 = load i32, i32* @x.1
  %131 = load i32, i32* @y.2
  %132 = sub i32 %130, 1
  %133 = mul i32 %130, %132
  %134 = urem i32 %133, 2
  %135 = icmp eq i32 %134, 0
  %136 = icmp slt i32 %131, 10
  %137 = or i1 %135, %136
  br i1 %137, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %129, %originalBB30alteredBB
  %138 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !247
  %139 = getelementptr inbounds %struct.infomap, %struct.infomap* %138, i32 0, i32 1, !dbg !248
  %140 = load i8*, i8** %139, align 8, !dbg !248
  store i8* %140, i8** %12, align 8, !dbg !249
  %141 = load i32, i32* @x.1
  %142 = load i32, i32* @y.2
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %149, !dbg !250

149:                                              ; preds = %originalBBpart232, %originalBBpart228
  %150 = load i32, i32* @x.1
  %151 = load i32, i32* @y.2
  %152 = sub i32 %150, 1
  %153 = mul i32 %150, %152
  %154 = urem i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %155, %156
  br i1 %157, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %149, %originalBB34alteredBB
  %158 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.25, i64 0, i64 0)) #10, !dbg !251
  %159 = call i32 (i8*, ...) @printf(i8* %158, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.26, i64 0, i64 0)), !dbg !252
  call void @llvm.dbg.declare(metadata i8** %14, metadata !253, metadata !DIExpression()), !dbg !254
  %160 = call i8* @setlocale(i32 5, i8* null) #10, !dbg !255
  store i8* %160, i8** %14, align 8, !dbg !254
  %161 = load i8*, i8** %14, align 8, !dbg !256
  %162 = icmp ne i8* %161, null, !dbg !256
  %163 = load i32, i32* @x.1
  %164 = load i32, i32* @y.2
  %165 = sub i32 %163, 1
  %166 = mul i32 %163, %165
  %167 = urem i32 %166, 2
  %168 = icmp eq i32 %167, 0
  %169 = icmp slt i32 %164, 10
  %170 = or i1 %168, %169
  br i1 %170, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br i1 %162, label %171, label %211, !dbg !258

171:                                              ; preds = %originalBBpart236
  %172 = load i32, i32* @x.1
  %173 = load i32, i32* @y.2
  %174 = sub i32 %172, 1
  %175 = mul i32 %172, %174
  %176 = urem i32 %175, 2
  %177 = icmp eq i32 %176, 0
  %178 = icmp slt i32 %173, 10
  %179 = or i1 %177, %178
  br i1 %179, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %171, %originalBB38alteredBB
  %180 = load i8*, i8** %14, align 8, !dbg !259
  %181 = call i32 @strncmp(i8* %180, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.27, i64 0, i64 0), i64 3) #13, !dbg !259
  %182 = icmp ne i32 %181, 0, !dbg !259
  %183 = load i32, i32* @x.1
  %184 = load i32, i32* @y.2
  %185 = sub i32 %183, 1
  %186 = mul i32 %183, %185
  %187 = urem i32 %186, 2
  %188 = icmp eq i32 %187, 0
  %189 = icmp slt i32 %184, 10
  %190 = or i1 %188, %189
  br i1 %190, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br i1 %182, label %191, label %211, !dbg !260

191:                                              ; preds = %originalBBpart240
  %192 = load i32, i32* @x.1
  %193 = load i32, i32* @y.2
  %194 = sub i32 %192, 1
  %195 = mul i32 %192, %194
  %196 = urem i32 %195, 2
  %197 = icmp eq i32 %196, 0
  %198 = icmp slt i32 %193, 10
  %199 = or i1 %197, %198
  br i1 %199, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %191, %originalBB42alteredBB
  %200 = call i8* @gettext(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.28, i64 0, i64 0)) #10, !dbg !261
  %201 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !261
  %202 = call i32 @fputs_unlocked(i8* %200, %struct._IO_FILE* %201), !dbg !261
  %203 = load i32, i32* @x.1
  %204 = load i32, i32* @y.2
  %205 = sub i32 %203, 1
  %206 = mul i32 %203, %205
  %207 = urem i32 %206, 2
  %208 = icmp eq i32 %207, 0
  %209 = icmp slt i32 %204, 10
  %210 = or i1 %208, %209
  br i1 %210, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br label %211, !dbg !263

211:                                              ; preds = %originalBBpart244, %originalBBpart240, %originalBBpart236
  %212 = load i32, i32* @x.1
  %213 = load i32, i32* @y.2
  %214 = sub i32 %212, 1
  %215 = mul i32 %212, %214
  %216 = urem i32 %215, 2
  %217 = icmp eq i32 %216, 0
  %218 = icmp slt i32 %213, 10
  %219 = or i1 %217, %218
  br i1 %219, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %211, %originalBB46alteredBB
  %220 = call i8* @gettext(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.29, i64 0, i64 0)) #10, !dbg !264
  %221 = load i8*, i8** %10, align 8, !dbg !265
  %222 = call i32 (i8*, ...) @printf(i8* %220, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.26, i64 0, i64 0), i8* %221), !dbg !266
  %223 = call i8* @gettext(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.30, i64 0, i64 0)) #10, !dbg !267
  %224 = load i8*, i8** %12, align 8, !dbg !268
  %225 = load i8*, i8** %12, align 8, !dbg !269
  %226 = load i8*, i8** %10, align 8, !dbg !270
  %227 = icmp eq i8* %225, %226, !dbg !271
  %228 = zext i1 %227 to i64, !dbg !269
  %229 = select i1 %227, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.31, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0), !dbg !269
  %230 = call i32 (i8*, ...) @printf(i8* %223, i8* %224, i8* %229), !dbg !272
  %231 = load i32, i32* @x.1
  %232 = load i32, i32* @y.2
  %233 = sub i32 %231, 1
  %234 = mul i32 %231, %233
  %235 = urem i32 %234, 2
  %236 = icmp eq i32 %235, 0
  %237 = icmp slt i32 %232, 10
  %238 = or i1 %236, %237
  br i1 %238, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  ret void, !dbg !273

originalBBalteredBB:                              ; preds = %originalBB, %1
  %239 = alloca i8*, align 8
  %240 = alloca [7 x %struct.infomap], align 16
  %241 = alloca i8*, align 8
  %242 = alloca %struct.infomap*, align 8
  %243 = alloca i8*, align 8
  store i8* %0, i8** %239, align 8
  call void @llvm.dbg.declare(metadata i8** %239, metadata !274, metadata !DIExpression()), !dbg !216
  call void @llvm.dbg.declare(metadata [7 x %struct.infomap]* %240, metadata !288, metadata !DIExpression()), !dbg !226
  %244 = bitcast [7 x %struct.infomap]* %240 to i8*, !dbg !226
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %244, i8* align 16 bitcast ([7 x %struct.infomap]* @__const.emit_ancillary_info.infomap to i8*), i64 112, i1 false), !dbg !226
  call void @llvm.dbg.declare(metadata i8** %241, metadata !295, metadata !DIExpression()), !dbg !228
  %245 = load i8*, i8** %239, align 8, !dbg !229
  store i8* %245, i8** %241, align 8, !dbg !228
  call void @llvm.dbg.declare(metadata %struct.infomap** %242, metadata !296, metadata !DIExpression()), !dbg !232
  %246 = getelementptr inbounds [7 x %struct.infomap], [7 x %struct.infomap]* %240, i64 0, i64 0, !dbg !233
  store %struct.infomap* %246, %struct.infomap** %242, align 8, !dbg !232
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %26
  %247 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !235
  %248 = getelementptr inbounds %struct.infomap, %struct.infomap* %247, i32 0, i32 0, !dbg !236
  %249 = load i8*, i8** %248, align 8, !dbg !236
  %250 = icmp ne i8* %249, null, !dbg !235
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %47
  %251 = load i8*, i8** %10, align 8, !dbg !238
  %252 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !238
  %253 = getelementptr inbounds %struct.infomap, %struct.infomap* %252, i32 0, i32 0, !dbg !238
  %254 = load i8*, i8** %253, align 8, !dbg !238
  %255 = call i32 @strcmp(i8* %251, i8* %254) #13, !dbg !238
  %256 = icmp eq i32 %255, 0, !dbg !238
  %_ = sub i1 false, %256
  %gen = add i1 %_, true
  %_7 = shl i1 %256, true
  %_8 = sub i1 %256, true
  %gen9 = mul i1 %_8, true
  %_10 = sub i1 %256, true
  %gen11 = mul i1 %_10, true
  %_12 = shl i1 %256, true
  %_13 = sub i1 false, %256
  %gen14 = add i1 %_13, true
  %257 = xor i1 %256, true, !dbg !239
  br label %originalBB6

originalBB18alteredBB:                            ; preds = %originalBB18, %71
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %89
  %258 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !241
  %259 = getelementptr inbounds %struct.infomap, %struct.infomap* %258, i32 1, !dbg !241
  store %struct.infomap* %259, %struct.infomap** %13, align 8, !dbg !241
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %108
  %260 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !243
  %261 = getelementptr inbounds %struct.infomap, %struct.infomap* %260, i32 0, i32 1, !dbg !245
  %262 = load i8*, i8** %261, align 8, !dbg !245
  %263 = icmp ne i8* %262, null, !dbg !243
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %129
  %264 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !247
  %265 = getelementptr inbounds %struct.infomap, %struct.infomap* %264, i32 0, i32 1, !dbg !248
  %266 = load i8*, i8** %265, align 8, !dbg !248
  store i8* %266, i8** %12, align 8, !dbg !249
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %149
  %267 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.25, i64 0, i64 0)) #10, !dbg !251
  %268 = call i32 (i8*, ...) @printf(i8* %267, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.26, i64 0, i64 0)), !dbg !252
  call void @llvm.dbg.declare(metadata !4, metadata !298, metadata !DIExpression()), !dbg !254
  %269 = call i8* @setlocale(i32 5, i8* null) #10, !dbg !255
  store i8* %269, i8** %14, align 8, !dbg !254
  %270 = load i8*, i8** %14, align 8, !dbg !256
  %271 = icmp ne i8* %270, null, !dbg !256
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %171
  %272 = load i8*, i8** %14, align 8, !dbg !259
  %273 = call i32 @strncmp(i8* %272, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.27, i64 0, i64 0), i64 3) #13, !dbg !259
  %274 = icmp ne i32 %273, 0, !dbg !259
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %191
  %275 = call i8* @gettext(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.28, i64 0, i64 0)) #10, !dbg !261
  %276 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !261
  %277 = call i32 @fputs_unlocked(i8* %275, %struct._IO_FILE* %276), !dbg !261
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %211
  %278 = call i8* @gettext(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.29, i64 0, i64 0)) #10, !dbg !264
  %279 = load i8*, i8** %10, align 8, !dbg !265
  %280 = call i32 (i8*, ...) @printf(i8* %278, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.26, i64 0, i64 0), i8* %279), !dbg !266
  %281 = call i8* @gettext(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.30, i64 0, i64 0)) #10, !dbg !267
  %282 = load i8*, i8** %12, align 8, !dbg !268
  %283 = load i8*, i8** %12, align 8, !dbg !269
  %284 = load i8*, i8** %10, align 8, !dbg !270
  %285 = icmp eq i8* %283, %284, !dbg !271
  %286 = zext i1 %285 to i64, !dbg !269
  %287 = select i1 %285, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.31, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0), !dbg !269
  %288 = call i32 (i8*, ...) @printf(i8* %281, i8* %282, i8* %287), !dbg !272
  br label %originalBB46
}

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

; Function Attrs: nounwind readonly
declare dso_local i32 @strcmp(i8*, i8*) #7

; Function Attrs: nounwind
declare dso_local i8* @setlocale(i32, i8*) #2

; Function Attrs: nounwind readonly
declare dso_local i32 @strncmp(i8*, i8*, i64) #7

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32, i8**) #4 !dbg !312 {
  %3 = load i32, i32* @x.3
  %4 = load i32, i32* @y.4
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  store i8** %1, i8*** @inVal1
  store i32 %0, i32* @inVal0
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i8**, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8, align 1
  %16 = alloca i32, align 4
  %17 = alloca %struct.file_name*, align 8
  store i32 0, i32* %11, align 4
  store i32 %0, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !316, metadata !DIExpression()), !dbg !317
  store i8** %1, i8*** %13, align 8
  call void @llvm.dbg.declare(metadata i8*** %13, metadata !318, metadata !DIExpression()), !dbg !319
  call void @llvm.dbg.declare(metadata i8** %14, metadata !320, metadata !DIExpression()), !dbg !321
  call void @llvm.dbg.declare(metadata i8* %15, metadata !322, metadata !DIExpression()), !dbg !323
  %18 = call i8* @getenv(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i64 0, i64 0)) #10, !dbg !324
  %19 = icmp ne i8* %18, null, !dbg !325
  %20 = zext i1 %19 to i8, !dbg !323
  store i8 %20, i8* %15, align 1, !dbg !323
  %21 = load i8**, i8*** %13, align 8, !dbg !326
  %22 = getelementptr inbounds i8*, i8** %21, i64 0, !dbg !326
  %23 = load i8*, i8** %22, align 8, !dbg !326
  call void @set_program_name(i8* %23), !dbg !327
  %24 = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0)) #10, !dbg !328
  %25 = call i8* @bindtextdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.12, i64 0, i64 0)) #10, !dbg !329
  %26 = call i8* @textdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0)) #10, !dbg !330
  %27 = call i32 @atexit(void ()* @close_stdout) #10, !dbg !331
  %28 = load i32, i32* @x.3
  %29 = load i32, i32* @y.4
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %36, !dbg !332

36:                                               ; preds = %originalBBpart2111, %originalBBpart2
  call void @llvm.dbg.declare(metadata i32* %16, metadata !333, metadata !DIExpression()), !dbg !335
  %37 = load i32, i32* @x.3
  %38 = load i32, i32* @y.4
  %39 = sub i32 %37, 1
  %40 = mul i32 %37, %39
  %41 = urem i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %38, 10
  %44 = or i1 %42, %43
  br i1 %44, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %36, %originalBB1alteredBB
  %45 = load i32, i32* %12, align 4, !dbg !336
  %46 = load i8**, i8*** %13, align 8, !dbg !337
  %47 = call i32 @getopt_long(i32 %45, i8** %46, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i64 0, i64 0), %struct.option* getelementptr inbounds ([5 x %struct.option], [5 x %struct.option]* @longopts, i64 0, i64 0), i32* null) #10, !dbg !338
  store i32 %47, i32* %16, align 4, !dbg !335
  %48 = load i32, i32* %16, align 4, !dbg !339
  %49 = load i32, i32* @x.3
  %50 = load i32, i32* @y.4
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %57, !dbg !341

57:                                               ; preds = %originalBBpart24
  %58 = load i32, i32* @x.3
  %59 = load i32, i32* @y.4
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %57, %originalBB6alteredBB
  %collatzVar = alloca i32
  %66 = load i32, i32* @x.3
  %67 = load i32, i32* @y.4
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %74

74:                                               ; preds = %originalBBpart28
  %75 = load i32, i32* @x.3
  %76 = load i32, i32* @y.4
  %77 = sub i32 %75, 1
  %78 = mul i32 %75, %77
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %80, %81
  br i1 %82, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %74, %originalBB10alteredBB
  %83 = load i32, i32* @inVal0
  %84 = icmp sgt i32 %83, 1
  %85 = load i32, i32* @x.3
  %86 = load i32, i32* @y.4
  %87 = sub i32 %85, 1
  %88 = mul i32 %85, %87
  %89 = urem i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %90, %91
  br i1 %92, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %84, label %110, label %93

93:                                               ; preds = %originalBBpart212
  %94 = load i32, i32* @x.3
  %95 = load i32, i32* @y.4
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %93, %originalBB14alteredBB
  store i32 19, i32* %collatzVar
  %102 = load i32, i32* @x.3
  %103 = load i32, i32* @y.4
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %110

110:                                              ; preds = %originalBBpart216, %originalBBpart212
  %111 = load i32, i32* @x.3
  %112 = load i32, i32* @y.4
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %110, %originalBB18alteredBB
  %119 = load i8**, i8*** @inVal1
  %120 = getelementptr inbounds i8*, i8** %119, i64 1
  %121 = load i8*, i8** %120
  %controle = call i32 @controle(i8* %121, i32 -1)
  store i32 %controle, i32* %collatzVar
  %122 = load i32, i32* @x.3
  %123 = load i32, i32* @y.4
  %124 = sub i32 %122, 1
  %125 = mul i32 %122, %124
  %126 = urem i32 %125, 2
  %127 = icmp eq i32 %126, 0
  %128 = icmp slt i32 %123, 10
  %129 = or i1 %127, %128
  br i1 %129, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %130

130:                                              ; preds = %originalBBpart279, %originalBBpart273, %originalBBpart220
  %131 = load i32, i32* @x.3
  %132 = load i32, i32* @y.4
  %133 = sub i32 %131, 1
  %134 = mul i32 %131, %133
  %135 = urem i32 %134, 2
  %136 = icmp eq i32 %135, 0
  %137 = icmp slt i32 %132, 10
  %138 = or i1 %136, %137
  br i1 %138, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %130, %originalBB22alteredBB
  %139 = load i32, i32* %collatzVar
  %140 = icmp sgt i32 %139, 1
  %141 = load i32, i32* @x.3
  %142 = load i32, i32* @y.4
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %140, label %149, label %265

149:                                              ; preds = %originalBBpart224
  %150 = load i32, i32* @x.3
  %151 = load i32, i32* @y.4
  %152 = sub i32 %150, 1
  %153 = mul i32 %150, %152
  %154 = urem i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %155, %156
  br i1 %157, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %149, %originalBB26alteredBB
  %158 = load i32, i32* %collatzVar
  %159 = srem i32 %158, 2
  %160 = icmp eq i32 %159, 0
  %161 = load i32, i32* @x.3
  %162 = load i32, i32* @y.4
  %163 = sub i32 %161, 1
  %164 = mul i32 %161, %163
  %165 = urem i32 %164, 2
  %166 = icmp eq i32 %165, 0
  %167 = icmp slt i32 %162, 10
  %168 = or i1 %166, %167
  br i1 %168, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %160, label %169, label %188

169:                                              ; preds = %originalBBpart228
  %170 = load i32, i32* @x.3
  %171 = load i32, i32* @y.4
  %172 = sub i32 %170, 1
  %173 = mul i32 %170, %172
  %174 = urem i32 %173, 2
  %175 = icmp eq i32 %174, 0
  %176 = icmp slt i32 %171, 10
  %177 = or i1 %175, %176
  br i1 %177, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %169, %originalBB30alteredBB
  %178 = load i32, i32* %collatzVar
  %179 = sdiv i32 %178, 2
  store i32 %179, i32* %collatzVar
  %180 = load i32, i32* @x.3
  %181 = load i32, i32* @y.4
  %182 = sub i32 %180, 1
  %183 = mul i32 %180, %182
  %184 = urem i32 %183, 2
  %185 = icmp eq i32 %184, 0
  %186 = icmp slt i32 %181, 10
  %187 = or i1 %185, %186
  br i1 %187, label %originalBBpart243, label %originalBB30alteredBB

originalBBpart243:                                ; preds = %originalBB30
  br label %208

188:                                              ; preds = %originalBBpart228
  %189 = load i32, i32* @x.3
  %190 = load i32, i32* @y.4
  %191 = sub i32 %189, 1
  %192 = mul i32 %189, %191
  %193 = urem i32 %192, 2
  %194 = icmp eq i32 %193, 0
  %195 = icmp slt i32 %190, 10
  %196 = or i1 %194, %195
  br i1 %196, label %originalBB45, label %originalBB45alteredBB

originalBB45:                                     ; preds = %188, %originalBB45alteredBB
  %197 = load i32, i32* %collatzVar
  %198 = mul i32 %197, 3
  %199 = add i32 %198, 1
  store i32 %199, i32* %collatzVar
  %200 = load i32, i32* @x.3
  %201 = load i32, i32* @y.4
  %202 = sub i32 %200, 1
  %203 = mul i32 %200, %202
  %204 = urem i32 %203, 2
  %205 = icmp eq i32 %204, 0
  %206 = icmp slt i32 %201, 10
  %207 = or i1 %205, %206
  br i1 %207, label %originalBBpart263, label %originalBB45alteredBB

originalBBpart263:                                ; preds = %originalBB45
  br label %208

208:                                              ; preds = %originalBBpart263, %originalBBpart243
  %209 = load i32, i32* @x.3
  %210 = load i32, i32* @y.4
  %211 = sub i32 %209, 1
  %212 = mul i32 %209, %211
  %213 = urem i32 %212, 2
  %214 = icmp eq i32 %213, 0
  %215 = icmp slt i32 %210, 10
  %216 = or i1 %214, %215
  br i1 %216, label %originalBB65, label %originalBB65alteredBB

originalBB65:                                     ; preds = %208, %originalBB65alteredBB
  %217 = load i32, i32* %collatzVar
  %218 = sub i32 %48, %217
  %219 = icmp sgt i32 %218, -3
  %220 = load i32, i32* @x.3
  %221 = load i32, i32* @y.4
  %222 = sub i32 %220, 1
  %223 = mul i32 %220, %222
  %224 = urem i32 %223, 2
  %225 = icmp eq i32 %224, 0
  %226 = icmp slt i32 %221, 10
  %227 = or i1 %225, %226
  br i1 %227, label %originalBBpart273, label %originalBB65alteredBB

originalBBpart273:                                ; preds = %originalBB65
  br i1 %219, label %228, label %130

228:                                              ; preds = %originalBBpart273
  %229 = load i32, i32* @x.3
  %230 = load i32, i32* @y.4
  %231 = sub i32 %229, 1
  %232 = mul i32 %229, %231
  %233 = urem i32 %232, 2
  %234 = icmp eq i32 %233, 0
  %235 = icmp slt i32 %230, 10
  %236 = or i1 %234, %235
  br i1 %236, label %originalBB75, label %originalBB75alteredBB

originalBB75:                                     ; preds = %228, %originalBB75alteredBB
  %237 = load i32, i32* %collatzVar
  %238 = add i32 %48, %237
  %239 = icmp slt i32 %238, 1
  %240 = load i32, i32* @x.3
  %241 = load i32, i32* @y.4
  %242 = sub i32 %240, 1
  %243 = mul i32 %240, %242
  %244 = urem i32 %243, 2
  %245 = icmp eq i32 %244, 0
  %246 = icmp slt i32 %241, 10
  %247 = or i1 %245, %246
  br i1 %247, label %originalBBpart279, label %originalBB75alteredBB

originalBBpart279:                                ; preds = %originalBB75
  br i1 %239, label %248, label %130

248:                                              ; preds = %originalBBpart279
  %249 = load i32, i32* @x.3
  %250 = load i32, i32* @y.4
  %251 = sub i32 %249, 1
  %252 = mul i32 %249, %251
  %253 = urem i32 %252, 2
  %254 = icmp eq i32 %253, 0
  %255 = icmp slt i32 %250, 10
  %256 = or i1 %254, %255
  br i1 %256, label %originalBB81, label %originalBB81alteredBB

originalBB81:                                     ; preds = %248, %originalBB81alteredBB
  %257 = load i32, i32* @x.3
  %258 = load i32, i32* @y.4
  %259 = sub i32 %257, 1
  %260 = mul i32 %257, %259
  %261 = urem i32 %260, 2
  %262 = icmp eq i32 %261, 0
  %263 = icmp slt i32 %258, 10
  %264 = or i1 %262, %263
  br i1 %264, label %originalBBpart283, label %originalBB81alteredBB

originalBBpart283:                                ; preds = %originalBB81
  br label %387, !dbg !342

265:                                              ; preds = %originalBBpart224
  %266 = load i32, i32* @x.3
  %267 = load i32, i32* @y.4
  %268 = sub i32 %266, 1
  %269 = mul i32 %266, %268
  %270 = urem i32 %269, 2
  %271 = icmp eq i32 %270, 0
  %272 = icmp slt i32 %267, 10
  %273 = or i1 %271, %272
  br i1 %273, label %originalBB85, label %originalBB85alteredBB

originalBB85:                                     ; preds = %265, %originalBB85alteredBB
  %274 = load i32, i32* %16, align 4, !dbg !343
  %275 = load i32, i32* @x.3
  %276 = load i32, i32* @y.4
  %277 = sub i32 %275, 1
  %278 = mul i32 %275, %277
  %279 = urem i32 %278, 2
  %280 = icmp eq i32 %279, 0
  %281 = icmp slt i32 %276, 10
  %282 = or i1 %280, %281
  br i1 %282, label %originalBBpart287, label %originalBB85alteredBB

originalBBpart287:                                ; preds = %originalBB85
  switch i32 %274, label %353 [
    i32 76, label %283
    i32 80, label %300
    i32 -130, label %317
    i32 -131, label %334
  ], !dbg !344

283:                                              ; preds = %originalBBpart287
  %284 = load i32, i32* @x.3
  %285 = load i32, i32* @y.4
  %286 = sub i32 %284, 1
  %287 = mul i32 %284, %286
  %288 = urem i32 %287, 2
  %289 = icmp eq i32 %288, 0
  %290 = icmp slt i32 %285, 10
  %291 = or i1 %289, %290
  br i1 %291, label %originalBB89, label %originalBB89alteredBB

originalBB89:                                     ; preds = %283, %originalBB89alteredBB
  store i8 1, i8* %15, align 1, !dbg !345
  %292 = load i32, i32* @x.3
  %293 = load i32, i32* @y.4
  %294 = sub i32 %292, 1
  %295 = mul i32 %292, %294
  %296 = urem i32 %295, 2
  %297 = icmp eq i32 %296, 0
  %298 = icmp slt i32 %293, 10
  %299 = or i1 %297, %298
  br i1 %299, label %originalBBpart291, label %originalBB89alteredBB

originalBBpart291:                                ; preds = %originalBB89
  br label %370, !dbg !347

300:                                              ; preds = %originalBBpart287
  %301 = load i32, i32* @x.3
  %302 = load i32, i32* @y.4
  %303 = sub i32 %301, 1
  %304 = mul i32 %301, %303
  %305 = urem i32 %304, 2
  %306 = icmp eq i32 %305, 0
  %307 = icmp slt i32 %302, 10
  %308 = or i1 %306, %307
  br i1 %308, label %originalBB93, label %originalBB93alteredBB

originalBB93:                                     ; preds = %300, %originalBB93alteredBB
  store i8 0, i8* %15, align 1, !dbg !348
  %309 = load i32, i32* @x.3
  %310 = load i32, i32* @y.4
  %311 = sub i32 %309, 1
  %312 = mul i32 %309, %311
  %313 = urem i32 %312, 2
  %314 = icmp eq i32 %313, 0
  %315 = icmp slt i32 %310, 10
  %316 = or i1 %314, %315
  br i1 %316, label %originalBBpart295, label %originalBB93alteredBB

originalBBpart295:                                ; preds = %originalBB93
  br label %370, !dbg !349

317:                                              ; preds = %originalBBpart287
  %318 = load i32, i32* @x.3
  %319 = load i32, i32* @y.4
  %320 = sub i32 %318, 1
  %321 = mul i32 %318, %320
  %322 = urem i32 %321, 2
  %323 = icmp eq i32 %322, 0
  %324 = icmp slt i32 %319, 10
  %325 = or i1 %323, %324
  br i1 %325, label %originalBB97, label %originalBB97alteredBB

originalBB97:                                     ; preds = %317, %originalBB97alteredBB
  call void @usage(i32 0) #14, !dbg !350
  %326 = load i32, i32* @x.3
  %327 = load i32, i32* @y.4
  %328 = sub i32 %326, 1
  %329 = mul i32 %326, %328
  %330 = urem i32 %329, 2
  %331 = icmp eq i32 %330, 0
  %332 = icmp slt i32 %327, 10
  %333 = or i1 %331, %332
  br i1 %333, label %originalBBpart299, label %originalBB97alteredBB

originalBBpart299:                                ; preds = %originalBB97
  unreachable, !dbg !350

334:                                              ; preds = %originalBBpart287
  %335 = load i32, i32* @x.3
  %336 = load i32, i32* @y.4
  %337 = sub i32 %335, 1
  %338 = mul i32 %335, %337
  %339 = urem i32 %338, 2
  %340 = icmp eq i32 %339, 0
  %341 = icmp slt i32 %336, 10
  %342 = or i1 %340, %341
  br i1 %342, label %originalBB101, label %originalBB101alteredBB

originalBB101:                                    ; preds = %334, %originalBB101alteredBB
  %343 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !351
  %344 = load i8*, i8** @Version, align 8, !dbg !351
  call void (%struct._IO_FILE*, i8*, i8*, i8*, ...) @version_etc(%struct._IO_FILE* %343, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.14, i64 0, i64 0), i8* %344, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.15, i64 0, i64 0), i8* null), !dbg !351
  call void @exit(i32 0) #12, !dbg !351
  %345 = load i32, i32* @x.3
  %346 = load i32, i32* @y.4
  %347 = sub i32 %345, 1
  %348 = mul i32 %345, %347
  %349 = urem i32 %348, 2
  %350 = icmp eq i32 %349, 0
  %351 = icmp slt i32 %346, 10
  %352 = or i1 %350, %351
  br i1 %352, label %originalBBpart2103, label %originalBB101alteredBB

originalBBpart2103:                               ; preds = %originalBB101
  unreachable, !dbg !351

353:                                              ; preds = %originalBBpart287
  %354 = load i32, i32* @x.3
  %355 = load i32, i32* @y.4
  %356 = sub i32 %354, 1
  %357 = mul i32 %354, %356
  %358 = urem i32 %357, 2
  %359 = icmp eq i32 %358, 0
  %360 = icmp slt i32 %355, 10
  %361 = or i1 %359, %360
  br i1 %361, label %originalBB105, label %originalBB105alteredBB

originalBB105:                                    ; preds = %353, %originalBB105alteredBB
  call void @usage(i32 1) #14, !dbg !352
  %362 = load i32, i32* @x.3
  %363 = load i32, i32* @y.4
  %364 = sub i32 %362, 1
  %365 = mul i32 %362, %364
  %366 = urem i32 %365, 2
  %367 = icmp eq i32 %366, 0
  %368 = icmp slt i32 %363, 10
  %369 = or i1 %367, %368
  br i1 %369, label %originalBBpart2107, label %originalBB105alteredBB

originalBBpart2107:                               ; preds = %originalBB105
  unreachable, !dbg !352

370:                                              ; preds = %originalBBpart295, %originalBBpart291
  %371 = load i32, i32* @x.3
  %372 = load i32, i32* @y.4
  %373 = sub i32 %371, 1
  %374 = mul i32 %371, %373
  %375 = urem i32 %374, 2
  %376 = icmp eq i32 %375, 0
  %377 = icmp slt i32 %372, 10
  %378 = or i1 %376, %377
  br i1 %378, label %originalBB109, label %originalBB109alteredBB

originalBB109:                                    ; preds = %370, %originalBB109alteredBB
  %379 = load i32, i32* @x.3
  %380 = load i32, i32* @y.4
  %381 = sub i32 %379, 1
  %382 = mul i32 %379, %381
  %383 = urem i32 %382, 2
  %384 = icmp eq i32 %383, 0
  %385 = icmp slt i32 %380, 10
  %386 = or i1 %384, %385
  br i1 %386, label %originalBBpart2111, label %originalBB109alteredBB

originalBBpart2111:                               ; preds = %originalBB109
  br label %36, !dbg !332, !llvm.loop !353

387:                                              ; preds = %originalBBpart283
  %388 = load i32, i32* @x.3
  %389 = load i32, i32* @y.4
  %390 = sub i32 %388, 1
  %391 = mul i32 %388, %390
  %392 = urem i32 %391, 2
  %393 = icmp eq i32 %392, 0
  %394 = icmp slt i32 %389, 10
  %395 = or i1 %393, %394
  br i1 %395, label %originalBB113, label %originalBB113alteredBB

originalBB113:                                    ; preds = %387, %originalBB113alteredBB
  %396 = load i32, i32* @optind, align 4, !dbg !355
  %397 = load i32, i32* %12, align 4, !dbg !357
  %398 = icmp slt i32 %396, %397, !dbg !358
  %399 = load i32, i32* @x.3
  %400 = load i32, i32* @y.4
  %401 = sub i32 %399, 1
  %402 = mul i32 %399, %401
  %403 = urem i32 %402, 2
  %404 = icmp eq i32 %403, 0
  %405 = icmp slt i32 %400, 10
  %406 = or i1 %404, %405
  br i1 %406, label %originalBBpart2115, label %originalBB113alteredBB

originalBBpart2115:                               ; preds = %originalBB113
  br i1 %398, label %407, label %425, !dbg !359

407:                                              ; preds = %originalBBpart2115
  %408 = load i32, i32* @x.3
  %409 = load i32, i32* @y.4
  %410 = sub i32 %408, 1
  %411 = mul i32 %408, %410
  %412 = urem i32 %411, 2
  %413 = icmp eq i32 %412, 0
  %414 = icmp slt i32 %409, 10
  %415 = or i1 %413, %414
  br i1 %415, label %originalBB117, label %originalBB117alteredBB

originalBB117:                                    ; preds = %407, %originalBB117alteredBB
  %416 = call i8* @gettext(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.16, i64 0, i64 0)) #10, !dbg !360
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %416), !dbg !361
  %417 = load i32, i32* @x.3
  %418 = load i32, i32* @y.4
  %419 = sub i32 %417, 1
  %420 = mul i32 %417, %419
  %421 = urem i32 %420, 2
  %422 = icmp eq i32 %421, 0
  %423 = icmp slt i32 %418, 10
  %424 = or i1 %422, %423
  br i1 %424, label %originalBBpart2119, label %originalBB117alteredBB

originalBBpart2119:                               ; preds = %originalBB117
  br label %425, !dbg !361

425:                                              ; preds = %originalBBpart2119, %originalBBpart2115
  %426 = load i32, i32* @x.3
  %427 = load i32, i32* @y.4
  %428 = sub i32 %426, 1
  %429 = mul i32 %426, %428
  %430 = urem i32 %429, 2
  %431 = icmp eq i32 %430, 0
  %432 = icmp slt i32 %427, 10
  %433 = or i1 %431, %432
  br i1 %433, label %originalBB121, label %originalBB121alteredBB

originalBB121:                                    ; preds = %425, %originalBB121alteredBB
  %434 = load i8, i8* %15, align 1, !dbg !362
  %435 = trunc i8 %434 to i1, !dbg !362
  %436 = load i32, i32* @x.3
  %437 = load i32, i32* @y.4
  %438 = sub i32 %436, 1
  %439 = mul i32 %436, %438
  %440 = urem i32 %439, 2
  %441 = icmp eq i32 %440, 0
  %442 = icmp slt i32 %437, 10
  %443 = or i1 %441, %442
  br i1 %443, label %originalBBpart2123, label %originalBB121alteredBB

originalBBpart2123:                               ; preds = %originalBB121
  br i1 %435, label %444, label %500, !dbg !364

444:                                              ; preds = %originalBBpart2123
  %445 = load i32, i32* @x.3
  %446 = load i32, i32* @y.4
  %447 = sub i32 %445, 1
  %448 = mul i32 %445, %447
  %449 = urem i32 %448, 2
  %450 = icmp eq i32 %449, 0
  %451 = icmp slt i32 %446, 10
  %452 = or i1 %450, %451
  br i1 %452, label %originalBB125, label %originalBB125alteredBB

originalBB125:                                    ; preds = %444, %originalBB125alteredBB
  %453 = call i8* @logical_getcwd(), !dbg !365
  store i8* %453, i8** %14, align 8, !dbg !367
  %454 = load i8*, i8** %14, align 8, !dbg !368
  %455 = icmp ne i8* %454, null, !dbg !368
  %456 = load i32, i32* @x.3
  %457 = load i32, i32* @y.4
  %458 = sub i32 %456, 1
  %459 = mul i32 %456, %458
  %460 = urem i32 %459, 2
  %461 = icmp eq i32 %460, 0
  %462 = icmp slt i32 %457, 10
  %463 = or i1 %461, %462
  br i1 %463, label %originalBBpart2127, label %originalBB125alteredBB

originalBBpart2127:                               ; preds = %originalBB125
  br i1 %455, label %464, label %483, !dbg !370

464:                                              ; preds = %originalBBpart2127
  %465 = load i32, i32* @x.3
  %466 = load i32, i32* @y.4
  %467 = sub i32 %465, 1
  %468 = mul i32 %465, %467
  %469 = urem i32 %468, 2
  %470 = icmp eq i32 %469, 0
  %471 = icmp slt i32 %466, 10
  %472 = or i1 %470, %471
  br i1 %472, label %originalBB129, label %originalBB129alteredBB

originalBB129:                                    ; preds = %464, %originalBB129alteredBB
  %473 = load i8*, i8** %14, align 8, !dbg !371
  %474 = call i32 @puts(i8* %473), !dbg !373
  store i32 0, i32* %11, align 4, !dbg !374
  %475 = load i32, i32* @x.3
  %476 = load i32, i32* @y.4
  %477 = sub i32 %475, 1
  %478 = mul i32 %475, %477
  %479 = urem i32 %478, 2
  %480 = icmp eq i32 %479, 0
  %481 = icmp slt i32 %476, 10
  %482 = or i1 %480, %481
  br i1 %482, label %originalBBpart2131, label %originalBB129alteredBB

originalBBpart2131:                               ; preds = %originalBB129
  br label %581, !dbg !374

483:                                              ; preds = %originalBBpart2127
  %484 = load i32, i32* @x.3
  %485 = load i32, i32* @y.4
  %486 = sub i32 %484, 1
  %487 = mul i32 %484, %486
  %488 = urem i32 %487, 2
  %489 = icmp eq i32 %488, 0
  %490 = icmp slt i32 %485, 10
  %491 = or i1 %489, %490
  br i1 %491, label %originalBB133, label %originalBB133alteredBB

originalBB133:                                    ; preds = %483, %originalBB133alteredBB
  %492 = load i32, i32* @x.3
  %493 = load i32, i32* @y.4
  %494 = sub i32 %492, 1
  %495 = mul i32 %492, %494
  %496 = urem i32 %495, 2
  %497 = icmp eq i32 %496, 0
  %498 = icmp slt i32 %493, 10
  %499 = or i1 %497, %498
  br i1 %499, label %originalBBpart2135, label %originalBB133alteredBB

originalBBpart2135:                               ; preds = %originalBB133
  br label %500, !dbg !375

500:                                              ; preds = %originalBBpart2135, %originalBBpart2123
  %501 = load i32, i32* @x.3
  %502 = load i32, i32* @y.4
  %503 = sub i32 %501, 1
  %504 = mul i32 %501, %503
  %505 = urem i32 %504, 2
  %506 = icmp eq i32 %505, 0
  %507 = icmp slt i32 %502, 10
  %508 = or i1 %506, %507
  br i1 %508, label %originalBB137, label %originalBB137alteredBB

originalBB137:                                    ; preds = %500, %originalBB137alteredBB
  %509 = call i8* @xgetcwd(), !dbg !376
  store i8* %509, i8** %14, align 8, !dbg !377
  %510 = load i8*, i8** %14, align 8, !dbg !378
  %511 = icmp ne i8* %510, null, !dbg !380
  %512 = load i32, i32* @x.3
  %513 = load i32, i32* @y.4
  %514 = sub i32 %512, 1
  %515 = mul i32 %512, %514
  %516 = urem i32 %515, 2
  %517 = icmp eq i32 %516, 0
  %518 = icmp slt i32 %513, 10
  %519 = or i1 %517, %518
  br i1 %519, label %originalBBpart2139, label %originalBB137alteredBB

originalBBpart2139:                               ; preds = %originalBB137
  br i1 %511, label %520, label %540, !dbg !381

520:                                              ; preds = %originalBBpart2139
  %521 = load i32, i32* @x.3
  %522 = load i32, i32* @y.4
  %523 = sub i32 %521, 1
  %524 = mul i32 %521, %523
  %525 = urem i32 %524, 2
  %526 = icmp eq i32 %525, 0
  %527 = icmp slt i32 %522, 10
  %528 = or i1 %526, %527
  br i1 %528, label %originalBB141, label %originalBB141alteredBB

originalBB141:                                    ; preds = %520, %originalBB141alteredBB
  %529 = load i8*, i8** %14, align 8, !dbg !382
  %530 = call i32 @puts(i8* %529), !dbg !384
  %531 = load i8*, i8** %14, align 8, !dbg !385
  call void @free(i8* %531) #10, !dbg !386
  %532 = load i32, i32* @x.3
  %533 = load i32, i32* @y.4
  %534 = sub i32 %532, 1
  %535 = mul i32 %532, %534
  %536 = urem i32 %535, 2
  %537 = icmp eq i32 %536, 0
  %538 = icmp slt i32 %533, 10
  %539 = or i1 %537, %538
  br i1 %539, label %originalBBpart2143, label %originalBB141alteredBB

originalBBpart2143:                               ; preds = %originalBB141
  br label %564, !dbg !387

540:                                              ; preds = %originalBBpart2139
  call void @llvm.dbg.declare(metadata %struct.file_name** %17, metadata !388, metadata !DIExpression()), !dbg !396
  %541 = load i32, i32* @x.3
  %542 = load i32, i32* @y.4
  %543 = sub i32 %541, 1
  %544 = mul i32 %541, %543
  %545 = urem i32 %544, 2
  %546 = icmp eq i32 %545, 0
  %547 = icmp slt i32 %542, 10
  %548 = or i1 %546, %547
  br i1 %548, label %originalBB145, label %originalBB145alteredBB

originalBB145:                                    ; preds = %540, %originalBB145alteredBB
  %549 = call %struct.file_name* @file_name_init(), !dbg !397
  store %struct.file_name* %549, %struct.file_name** %17, align 8, !dbg !396
  %550 = load %struct.file_name*, %struct.file_name** %17, align 8, !dbg !398
  call void @robust_getcwd(%struct.file_name* %550), !dbg !399
  %551 = load %struct.file_name*, %struct.file_name** %17, align 8, !dbg !400
  %552 = getelementptr inbounds %struct.file_name, %struct.file_name* %551, i32 0, i32 2, !dbg !401
  %553 = load i8*, i8** %552, align 8, !dbg !401
  %554 = call i32 @puts(i8* %553), !dbg !402
  %555 = load %struct.file_name*, %struct.file_name** %17, align 8, !dbg !403
  call void @file_name_free(%struct.file_name* %555), !dbg !404
  %556 = load i32, i32* @x.3
  %557 = load i32, i32* @y.4
  %558 = sub i32 %556, 1
  %559 = mul i32 %556, %558
  %560 = urem i32 %559, 2
  %561 = icmp eq i32 %560, 0
  %562 = icmp slt i32 %557, 10
  %563 = or i1 %561, %562
  br i1 %563, label %originalBBpart2147, label %originalBB145alteredBB

originalBBpart2147:                               ; preds = %originalBB145
  br label %564

564:                                              ; preds = %originalBBpart2147, %originalBBpart2143
  %565 = load i32, i32* @x.3
  %566 = load i32, i32* @y.4
  %567 = sub i32 %565, 1
  %568 = mul i32 %565, %567
  %569 = urem i32 %568, 2
  %570 = icmp eq i32 %569, 0
  %571 = icmp slt i32 %566, 10
  %572 = or i1 %570, %571
  br i1 %572, label %originalBB149, label %originalBB149alteredBB

originalBB149:                                    ; preds = %564, %originalBB149alteredBB
  store i32 0, i32* %11, align 4, !dbg !405
  %573 = load i32, i32* @x.3
  %574 = load i32, i32* @y.4
  %575 = sub i32 %573, 1
  %576 = mul i32 %573, %575
  %577 = urem i32 %576, 2
  %578 = icmp eq i32 %577, 0
  %579 = icmp slt i32 %574, 10
  %580 = or i1 %578, %579
  br i1 %580, label %originalBBpart2151, label %originalBB149alteredBB

originalBBpart2151:                               ; preds = %originalBB149
  br label %581, !dbg !405

581:                                              ; preds = %originalBBpart2151, %originalBBpart2131
  %582 = load i32, i32* @x.3
  %583 = load i32, i32* @y.4
  %584 = sub i32 %582, 1
  %585 = mul i32 %582, %584
  %586 = urem i32 %585, 2
  %587 = icmp eq i32 %586, 0
  %588 = icmp slt i32 %583, 10
  %589 = or i1 %587, %588
  br i1 %589, label %originalBB153, label %originalBB153alteredBB

originalBB153:                                    ; preds = %581, %originalBB153alteredBB
  %590 = load i32, i32* %11, align 4, !dbg !406
  %591 = load i32, i32* @x.3
  %592 = load i32, i32* @y.4
  %593 = sub i32 %591, 1
  %594 = mul i32 %591, %593
  %595 = urem i32 %594, 2
  %596 = icmp eq i32 %595, 0
  %597 = icmp slt i32 %592, 10
  %598 = or i1 %596, %597
  br i1 %598, label %originalBBpart2155, label %originalBB153alteredBB

originalBBpart2155:                               ; preds = %originalBB153
  ret i32 %590, !dbg !406

originalBBalteredBB:                              ; preds = %originalBB, %2
  store i8** %1, i8*** @inVal1
  store i32 %0, i32* @inVal0
  %599 = alloca i32, align 4
  %600 = alloca i32, align 4
  %601 = alloca i8**, align 8
  %602 = alloca i8*, align 8
  %603 = alloca i8, align 1
  %604 = alloca i32, align 4
  %605 = alloca %struct.file_name*, align 8
  store i32 0, i32* %599, align 4
  store i32 %0, i32* %600, align 4
  call void @llvm.dbg.declare(metadata i32* %600, metadata !407, metadata !DIExpression()), !dbg !317
  store i8** %1, i8*** %601, align 8
  call void @llvm.dbg.declare(metadata i8*** %601, metadata !421, metadata !DIExpression()), !dbg !319
  call void @llvm.dbg.declare(metadata i8** %602, metadata !422, metadata !DIExpression()), !dbg !321
  call void @llvm.dbg.declare(metadata i8* %603, metadata !423, metadata !DIExpression()), !dbg !323
  %606 = call i8* @getenv(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i64 0, i64 0)) #10, !dbg !324
  %607 = icmp ne i8* %606, null, !dbg !325
  %608 = zext i1 %607 to i8, !dbg !323
  store i8 %608, i8* %603, align 1, !dbg !323
  %609 = load i8**, i8*** %601, align 8, !dbg !326
  %610 = getelementptr inbounds i8*, i8** %609, i64 0, !dbg !326
  %611 = load i8*, i8** %610, align 8, !dbg !326
  call void @set_program_name(i8* %611), !dbg !327
  %612 = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0)) #10, !dbg !328
  %613 = call i8* @bindtextdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.12, i64 0, i64 0)) #10, !dbg !329
  %614 = call i8* @textdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0)) #10, !dbg !330
  %615 = call i32 @atexit(void ()* @close_stdout) #10, !dbg !331
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %36
  %616 = load i32, i32* %12, align 4, !dbg !336
  %617 = load i8**, i8*** %13, align 8, !dbg !337
  %618 = call i32 @getopt_long(i32 %616, i8** %617, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i64 0, i64 0), %struct.option* getelementptr inbounds ([5 x %struct.option], [5 x %struct.option]* @longopts, i64 0, i64 0), i32* null) #10, !dbg !338
  store i32 %618, i32* %16, align 4, !dbg !335
  %619 = load i32, i32* %16, align 4, !dbg !339
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %57
  %collatzVaralteredBB = alloca i32
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %74
  %620 = load i32, i32* @inVal0
  %621 = icmp sgt i32 %620, 1
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %93
  store i32 19, i32* %collatzVar
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %110
  %622 = load i8**, i8*** @inVal1
  %623 = getelementptr inbounds i8*, i8** %622, i64 1
  %624 = load i8*, i8** %623
  %controlealteredBB = call i32 @controle(i8* %624, i32 -1)
  store i32 %controlealteredBB, i32* %collatzVar
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %130
  %625 = load i32, i32* %collatzVar
  %626 = icmp sgt i32 %625, 1
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %149
  %627 = load i32, i32* %collatzVar
  %_ = sub i32 0, %627
  %gen = add i32 %_, 2
  %628 = srem i32 %627, 2
  %629 = icmp eq i32 %628, 0
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %169
  %630 = load i32, i32* %collatzVar
  %_31 = sub i32 %630, 2
  %gen32 = mul i32 %_31, 2
  %_33 = sub i32 0, %630
  %gen34 = add i32 %_33, 2
  %_35 = sub i32 0, %630
  %gen36 = add i32 %_35, 2
  %_37 = shl i32 %630, 2
  %_38 = sub i32 0, %630
  %gen39 = add i32 %_38, 2
  %_40 = sub i32 %630, 2
  %gen41 = mul i32 %_40, 2
  %631 = sdiv i32 %630, 2
  store i32 %631, i32* %collatzVar
  br label %originalBB30

originalBB45alteredBB:                            ; preds = %originalBB45, %188
  %632 = load i32, i32* %collatzVar
  %_46 = shl i32 %632, 3
  %_47 = sub i32 %632, 3
  %gen48 = mul i32 %_47, 3
  %_49 = sub i32 0, %632
  %gen50 = add i32 %_49, 3
  %_51 = sub i32 0, %632
  %gen52 = add i32 %_51, 3
  %_53 = shl i32 %632, 3
  %633 = mul i32 %632, 3
  %_54 = sub i32 0, %633
  %gen55 = add i32 %_54, 1
  %_56 = sub i32 0, %633
  %gen57 = add i32 %_56, 1
  %_58 = sub i32 %633, 1
  %gen59 = mul i32 %_58, 1
  %_60 = sub i32 0, %633
  %gen61 = add i32 %_60, 1
  %634 = add i32 %633, 1
  store i32 %634, i32* %collatzVar
  br label %originalBB45

originalBB65alteredBB:                            ; preds = %originalBB65, %208
  %635 = load i32, i32* %collatzVar
  %_66 = sub i32 0, %48
  %gen67 = add i32 %_66, %635
  %_68 = sub i32 %48, %635
  %gen69 = mul i32 %_68, %635
  %_70 = sub i32 0, %48
  %gen71 = add i32 %_70, %635
  %636 = sub i32 %48, %635
  %637 = icmp sgt i32 %636, -3
  br label %originalBB65

originalBB75alteredBB:                            ; preds = %originalBB75, %228
  %638 = load i32, i32* %collatzVar
  %_76 = sub i32 0, %48
  %gen77 = add i32 %_76, %638
  %639 = add i32 %48, %638
  %640 = icmp slt i32 %639, 1
  br label %originalBB75

originalBB81alteredBB:                            ; preds = %originalBB81, %248
  br label %originalBB81

originalBB85alteredBB:                            ; preds = %originalBB85, %265
  %641 = load i32, i32* %16, align 4, !dbg !343
  br label %originalBB85

originalBB89alteredBB:                            ; preds = %originalBB89, %283
  store i8 1, i8* %15, align 1, !dbg !345
  br label %originalBB89

originalBB93alteredBB:                            ; preds = %originalBB93, %300
  store i8 0, i8* %15, align 1, !dbg !348
  br label %originalBB93

originalBB97alteredBB:                            ; preds = %originalBB97, %317
  call void @usage(i32 0) #14, !dbg !350
  br label %originalBB97

originalBB101alteredBB:                           ; preds = %originalBB101, %334
  %642 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !351
  %643 = load i8*, i8** @Version, align 8, !dbg !351
  call void (%struct._IO_FILE*, i8*, i8*, i8*, ...) @version_etc(%struct._IO_FILE* %642, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.14, i64 0, i64 0), i8* %643, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.15, i64 0, i64 0), i8* null), !dbg !351
  call void @exit(i32 0) #12, !dbg !351
  br label %originalBB101

originalBB105alteredBB:                           ; preds = %originalBB105, %353
  call void @usage(i32 1) #14, !dbg !352
  br label %originalBB105

originalBB109alteredBB:                           ; preds = %originalBB109, %370
  br label %originalBB109

originalBB113alteredBB:                           ; preds = %originalBB113, %387
  %644 = load i32, i32* @optind, align 4, !dbg !355
  %645 = load i32, i32* %12, align 4, !dbg !357
  %646 = icmp slt i32 %644, %645, !dbg !358
  br label %originalBB113

originalBB117alteredBB:                           ; preds = %originalBB117, %407
  %647 = call i8* @gettext(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.16, i64 0, i64 0)) #10, !dbg !360
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %647), !dbg !361
  br label %originalBB117

originalBB121alteredBB:                           ; preds = %originalBB121, %425
  %648 = load i8, i8* %15, align 1, !dbg !362
  %649 = trunc i8 %648 to i1, !dbg !362
  br label %originalBB121

originalBB125alteredBB:                           ; preds = %originalBB125, %444
  %650 = call i8* @logical_getcwd(), !dbg !365
  store i8* %650, i8** %14, align 8, !dbg !367
  %651 = load i8*, i8** %14, align 8, !dbg !368
  %652 = icmp ne i8* %651, null, !dbg !368
  br label %originalBB125

originalBB129alteredBB:                           ; preds = %originalBB129, %464
  %653 = load i8*, i8** %14, align 8, !dbg !371
  %654 = call i32 @puts(i8* %653), !dbg !373
  store i32 0, i32* %11, align 4, !dbg !374
  br label %originalBB129

originalBB133alteredBB:                           ; preds = %originalBB133, %483
  br label %originalBB133

originalBB137alteredBB:                           ; preds = %originalBB137, %500
  %655 = call i8* @xgetcwd(), !dbg !376
  store i8* %655, i8** %14, align 8, !dbg !377
  %656 = load i8*, i8** %14, align 8, !dbg !378
  %657 = icmp ne i8* %656, null, !dbg !380
  br label %originalBB137

originalBB141alteredBB:                           ; preds = %originalBB141, %520
  %658 = load i8*, i8** %14, align 8, !dbg !382
  %659 = call i32 @puts(i8* %658), !dbg !384
  %660 = load i8*, i8** %14, align 8, !dbg !385
  call void @free(i8* %660) #10, !dbg !386
  br label %originalBB141

originalBB145alteredBB:                           ; preds = %originalBB145, %540
  %661 = call %struct.file_name* @file_name_init(), !dbg !397
  store %struct.file_name* %661, %struct.file_name** %17, align 8, !dbg !396
  %662 = load %struct.file_name*, %struct.file_name** %17, align 8, !dbg !398
  call void @robust_getcwd(%struct.file_name* %662), !dbg !399
  %663 = load %struct.file_name*, %struct.file_name** %17, align 8, !dbg !400
  %664 = getelementptr inbounds %struct.file_name, %struct.file_name* %663, i32 0, i32 2, !dbg !401
  %665 = load i8*, i8** %664, align 8, !dbg !401
  %666 = call i32 @puts(i8* %665), !dbg !402
  %667 = load %struct.file_name*, %struct.file_name** %17, align 8, !dbg !403
  call void @file_name_free(%struct.file_name* %667), !dbg !404
  br label %originalBB145

originalBB149alteredBB:                           ; preds = %originalBB149, %564
  store i32 0, i32* %11, align 4, !dbg !405
  br label %originalBB149

originalBB153alteredBB:                           ; preds = %originalBB153, %581
  %668 = load i32, i32* %11, align 4, !dbg !406
  br label %originalBB153
}

; Function Attrs: nounwind
declare dso_local i8* @getenv(i8*) #2

; Function Attrs: nounwind
declare dso_local i8* @bindtextdomain(i8*, i8*) #2

; Function Attrs: nounwind
declare dso_local i8* @textdomain(i8*) #2

; Function Attrs: nounwind
declare dso_local i32 @atexit(void ()*) #2

; Function Attrs: nounwind
declare dso_local i32 @getopt_long(i32, i8**, i8*, %struct.option*, i32*) #2

declare dso_local void @error(i32, i32, i8*, ...) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @logical_getcwd() #4 !dbg !424 {
  %1 = load i32, i32* @x.5
  %2 = load i32, i32* @y.6
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = alloca i8*, align 8
  %10 = alloca %struct.stat, align 8
  %11 = alloca %struct.stat, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata %struct.stat* %10, metadata !427, metadata !DIExpression()), !dbg !467
  call void @llvm.dbg.declare(metadata %struct.stat* %11, metadata !468, metadata !DIExpression()), !dbg !469
  call void @llvm.dbg.declare(metadata i8** %12, metadata !470, metadata !DIExpression()), !dbg !471
  %14 = call i8* @getenv(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.36, i64 0, i64 0)) #10, !dbg !472
  store i8* %14, i8** %12, align 8, !dbg !471
  call void @llvm.dbg.declare(metadata i8** %13, metadata !473, metadata !DIExpression()), !dbg !474
  %15 = load i8*, i8** %12, align 8, !dbg !475
  %16 = icmp ne i8* %15, null, !dbg !475
  %17 = load i32, i32* @x.5
  %18 = load i32, i32* @y.6
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %16, label %25, label %47, !dbg !477

25:                                               ; preds = %originalBBpart2
  %26 = load i32, i32* @x.5
  %27 = load i32, i32* @y.6
  %28 = sub i32 %26, 1
  %29 = mul i32 %26, %28
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %31, %32
  br i1 %33, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %25, %originalBB1alteredBB
  %34 = load i8*, i8** %12, align 8, !dbg !478
  %35 = getelementptr inbounds i8, i8* %34, i64 0, !dbg !478
  %36 = load i8, i8* %35, align 1, !dbg !478
  %37 = sext i8 %36 to i32, !dbg !478
  %38 = icmp ne i32 %37, 47, !dbg !479
  %39 = load i32, i32* @x.5
  %40 = load i32, i32* @y.6
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %38, label %47, label %64, !dbg !480

47:                                               ; preds = %originalBBpart24, %originalBBpart2
  %48 = load i32, i32* @x.5
  %49 = load i32, i32* @y.6
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %47, %originalBB6alteredBB
  store i8* null, i8** %9, align 8, !dbg !481
  %56 = load i32, i32* @x.5
  %57 = load i32, i32* @y.6
  %58 = sub i32 %56, 1
  %59 = mul i32 %56, %58
  %60 = urem i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %57, 10
  %63 = or i1 %61, %62
  br i1 %63, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %744, !dbg !481

64:                                               ; preds = %originalBBpart24
  %65 = load i32, i32* @x.5
  %66 = load i32, i32* @y.6
  %67 = sub i32 %65, 1
  %68 = mul i32 %65, %67
  %69 = urem i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %70, %71
  br i1 %72, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %64, %originalBB10alteredBB
  %73 = load i8*, i8** %12, align 8, !dbg !482
  store i8* %73, i8** %13, align 8, !dbg !483
  %74 = load i32, i32* @x.5
  %75 = load i32, i32* @y.6
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %82, !dbg !484

82:                                               ; preds = %originalBBpart244, %originalBBpart212
  %83 = load i32, i32* @x.5
  %84 = load i32, i32* @y.6
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %82, %originalBB14alteredBB
  %91 = load i8*, i8** %13, align 8, !dbg !485
  %92 = call i8* @strstr(i8* %91, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.37, i64 0, i64 0)) #13, !dbg !486
  store i8* %92, i8** %13, align 8, !dbg !487
  %93 = icmp ne i8* %92, null, !dbg !484
  %94 = load i32, i32* @x.5
  %95 = load i32, i32* @y.6
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %93, label %102, label %246, !dbg !484

102:                                              ; preds = %originalBBpart216
  %103 = load i32, i32* @x.5
  %104 = load i32, i32* @y.6
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %102, %originalBB18alteredBB
  %111 = load i8*, i8** %13, align 8, !dbg !488
  %112 = getelementptr inbounds i8, i8* %111, i64 2, !dbg !488
  %113 = load i8, i8* %112, align 1, !dbg !488
  %114 = icmp ne i8 %113, 0, !dbg !488
  %115 = load i32, i32* @x.5
  %116 = load i32, i32* @y.6
  %117 = sub i32 %115, 1
  %118 = mul i32 %115, %117
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %120, %121
  br i1 %122, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %114, label %123, label %210, !dbg !491

123:                                              ; preds = %originalBBpart220
  %124 = load i32, i32* @x.5
  %125 = load i32, i32* @y.6
  %126 = sub i32 %124, 1
  %127 = mul i32 %124, %126
  %128 = urem i32 %127, 2
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %125, 10
  %131 = or i1 %129, %130
  br i1 %131, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %123, %originalBB22alteredBB
  %132 = load i8*, i8** %13, align 8, !dbg !492
  %133 = getelementptr inbounds i8, i8* %132, i64 2, !dbg !492
  %134 = load i8, i8* %133, align 1, !dbg !492
  %135 = sext i8 %134 to i32, !dbg !492
  %136 = icmp eq i32 %135, 47, !dbg !493
  %137 = load i32, i32* @x.5
  %138 = load i32, i32* @y.6
  %139 = sub i32 %137, 1
  %140 = mul i32 %137, %139
  %141 = urem i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %142, %143
  br i1 %144, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %136, label %210, label %145, !dbg !494

145:                                              ; preds = %originalBBpart224
  %146 = load i32, i32* @x.5
  %147 = load i32, i32* @y.6
  %148 = sub i32 %146, 1
  %149 = mul i32 %146, %148
  %150 = urem i32 %149, 2
  %151 = icmp eq i32 %150, 0
  %152 = icmp slt i32 %147, 10
  %153 = or i1 %151, %152
  br i1 %153, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %145, %originalBB26alteredBB
  %154 = load i8*, i8** %13, align 8, !dbg !495
  %155 = getelementptr inbounds i8, i8* %154, i64 2, !dbg !495
  %156 = load i8, i8* %155, align 1, !dbg !495
  %157 = sext i8 %156 to i32, !dbg !495
  %158 = icmp eq i32 %157, 46, !dbg !496
  %159 = load i32, i32* @x.5
  %160 = load i32, i32* @y.6
  %161 = sub i32 %159, 1
  %162 = mul i32 %159, %161
  %163 = urem i32 %162, 2
  %164 = icmp eq i32 %163, 0
  %165 = icmp slt i32 %160, 10
  %166 = or i1 %164, %165
  br i1 %166, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %158, label %167, label %227, !dbg !497

167:                                              ; preds = %originalBBpart228
  %168 = load i32, i32* @x.5
  %169 = load i32, i32* @y.6
  %170 = sub i32 %168, 1
  %171 = mul i32 %168, %170
  %172 = urem i32 %171, 2
  %173 = icmp eq i32 %172, 0
  %174 = icmp slt i32 %169, 10
  %175 = or i1 %173, %174
  br i1 %175, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %167, %originalBB30alteredBB
  %176 = load i8*, i8** %13, align 8, !dbg !498
  %177 = getelementptr inbounds i8, i8* %176, i64 3, !dbg !498
  %178 = load i8, i8* %177, align 1, !dbg !498
  %179 = icmp ne i8 %178, 0, !dbg !498
  %180 = load i32, i32* @x.5
  %181 = load i32, i32* @y.6
  %182 = sub i32 %180, 1
  %183 = mul i32 %180, %182
  %184 = urem i32 %183, 2
  %185 = icmp eq i32 %184, 0
  %186 = icmp slt i32 %181, 10
  %187 = or i1 %185, %186
  br i1 %187, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br i1 %179, label %188, label %210, !dbg !499

188:                                              ; preds = %originalBBpart232
  %189 = load i32, i32* @x.5
  %190 = load i32, i32* @y.6
  %191 = sub i32 %189, 1
  %192 = mul i32 %189, %191
  %193 = urem i32 %192, 2
  %194 = icmp eq i32 %193, 0
  %195 = icmp slt i32 %190, 10
  %196 = or i1 %194, %195
  br i1 %196, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %188, %originalBB34alteredBB
  %197 = load i8*, i8** %13, align 8, !dbg !500
  %198 = getelementptr inbounds i8, i8* %197, i64 3, !dbg !500
  %199 = load i8, i8* %198, align 1, !dbg !500
  %200 = sext i8 %199 to i32, !dbg !500
  %201 = icmp eq i32 %200, 47, !dbg !501
  %202 = load i32, i32* @x.5
  %203 = load i32, i32* @y.6
  %204 = sub i32 %202, 1
  %205 = mul i32 %202, %204
  %206 = urem i32 %205, 2
  %207 = icmp eq i32 %206, 0
  %208 = icmp slt i32 %203, 10
  %209 = or i1 %207, %208
  br i1 %209, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br i1 %201, label %210, label %227, !dbg !502

210:                                              ; preds = %originalBBpart236, %originalBBpart232, %originalBBpart224, %originalBBpart220
  %211 = load i32, i32* @x.5
  %212 = load i32, i32* @y.6
  %213 = sub i32 %211, 1
  %214 = mul i32 %211, %213
  %215 = urem i32 %214, 2
  %216 = icmp eq i32 %215, 0
  %217 = icmp slt i32 %212, 10
  %218 = or i1 %216, %217
  br i1 %218, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %210, %originalBB38alteredBB
  store i8* null, i8** %9, align 8, !dbg !503
  %219 = load i32, i32* @x.5
  %220 = load i32, i32* @y.6
  %221 = sub i32 %219, 1
  %222 = mul i32 %219, %221
  %223 = urem i32 %222, 2
  %224 = icmp eq i32 %223, 0
  %225 = icmp slt i32 %220, 10
  %226 = or i1 %224, %225
  br i1 %226, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br label %744, !dbg !503

227:                                              ; preds = %originalBBpart236, %originalBBpart228
  %228 = load i32, i32* @x.5
  %229 = load i32, i32* @y.6
  %230 = sub i32 %228, 1
  %231 = mul i32 %228, %230
  %232 = urem i32 %231, 2
  %233 = icmp eq i32 %232, 0
  %234 = icmp slt i32 %229, 10
  %235 = or i1 %233, %234
  br i1 %235, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %227, %originalBB42alteredBB
  %236 = load i8*, i8** %13, align 8, !dbg !504
  %237 = getelementptr inbounds i8, i8* %236, i32 1, !dbg !504
  store i8* %237, i8** %13, align 8, !dbg !504
  %238 = load i32, i32* @x.5
  %239 = load i32, i32* @y.6
  %240 = sub i32 %238, 1
  %241 = mul i32 %238, %240
  %242 = urem i32 %241, 2
  %243 = icmp eq i32 %242, 0
  %244 = icmp slt i32 %239, 10
  %245 = or i1 %243, %244
  br i1 %245, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br label %82, !dbg !484, !llvm.loop !505

246:                                              ; preds = %originalBBpart216
  %247 = load i32, i32* @x.5
  %248 = load i32, i32* @y.6
  %249 = sub i32 %247, 1
  %250 = mul i32 %247, %249
  %251 = urem i32 %250, 2
  %252 = icmp eq i32 %251, 0
  %253 = icmp slt i32 %248, 10
  %254 = or i1 %252, %253
  br i1 %254, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %246, %originalBB46alteredBB
  %255 = load i8*, i8** %12, align 8, !dbg !507
  %256 = call i32 @stat(i8* %255, %struct.stat* %10) #10, !dbg !509
  %257 = load i32, i32* @x.5
  %258 = load i32, i32* @y.6
  %259 = sub i32 %257, 1
  %260 = mul i32 %257, %259
  %261 = urem i32 %260, 2
  %262 = icmp eq i32 %261, 0
  %263 = icmp slt i32 %258, 10
  %264 = or i1 %262, %263
  br i1 %264, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br label %265, !dbg !510

265:                                              ; preds = %originalBBpart248
  %266 = load i32, i32* @x.5
  %267 = load i32, i32* @y.6
  %268 = sub i32 %266, 1
  %269 = mul i32 %266, %268
  %270 = urem i32 %269, 2
  %271 = icmp eq i32 %270, 0
  %272 = icmp slt i32 %267, 10
  %273 = or i1 %271, %272
  br i1 %273, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %265, %originalBB50alteredBB
  %collatzVar1 = alloca i32
  %274 = load i32, i32* @x.5
  %275 = load i32, i32* @y.6
  %276 = sub i32 %274, 1
  %277 = mul i32 %274, %276
  %278 = urem i32 %277, 2
  %279 = icmp eq i32 %278, 0
  %280 = icmp slt i32 %275, 10
  %281 = or i1 %279, %280
  br i1 %281, label %originalBBpart252, label %originalBB50alteredBB

originalBBpart252:                                ; preds = %originalBB50
  br label %282

282:                                              ; preds = %originalBBpart252
  %283 = load i32, i32* @x.5
  %284 = load i32, i32* @y.6
  %285 = sub i32 %283, 1
  %286 = mul i32 %283, %285
  %287 = urem i32 %286, 2
  %288 = icmp eq i32 %287, 0
  %289 = icmp slt i32 %284, 10
  %290 = or i1 %288, %289
  br i1 %290, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %282, %originalBB54alteredBB
  %291 = load i32, i32* @inVal0
  %292 = icmp sgt i32 %291, 1
  %293 = load i32, i32* @x.5
  %294 = load i32, i32* @y.6
  %295 = sub i32 %293, 1
  %296 = mul i32 %293, %295
  %297 = urem i32 %296, 2
  %298 = icmp eq i32 %297, 0
  %299 = icmp slt i32 %294, 10
  %300 = or i1 %298, %299
  br i1 %300, label %originalBBpart256, label %originalBB54alteredBB

originalBBpart256:                                ; preds = %originalBB54
  br i1 %292, label %318, label %301

301:                                              ; preds = %originalBBpart256
  %302 = load i32, i32* @x.5
  %303 = load i32, i32* @y.6
  %304 = sub i32 %302, 1
  %305 = mul i32 %302, %304
  %306 = urem i32 %305, 2
  %307 = icmp eq i32 %306, 0
  %308 = icmp slt i32 %303, 10
  %309 = or i1 %307, %308
  br i1 %309, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %301, %originalBB58alteredBB
  store i32 54, i32* %collatzVar1
  %310 = load i32, i32* @x.5
  %311 = load i32, i32* @y.6
  %312 = sub i32 %310, 1
  %313 = mul i32 %310, %312
  %314 = urem i32 %313, 2
  %315 = icmp eq i32 %314, 0
  %316 = icmp slt i32 %311, 10
  %317 = or i1 %315, %316
  br i1 %317, label %originalBBpart260, label %originalBB58alteredBB

originalBBpart260:                                ; preds = %originalBB58
  br label %318

318:                                              ; preds = %originalBBpart260, %originalBBpart256
  %319 = load i32, i32* @x.5
  %320 = load i32, i32* @y.6
  %321 = sub i32 %319, 1
  %322 = mul i32 %319, %321
  %323 = urem i32 %322, 2
  %324 = icmp eq i32 %323, 0
  %325 = icmp slt i32 %320, 10
  %326 = or i1 %324, %325
  br i1 %326, label %originalBB62, label %originalBB62alteredBB

originalBB62:                                     ; preds = %318, %originalBB62alteredBB
  %327 = load i8**, i8*** @inVal1
  %328 = getelementptr inbounds i8*, i8** %327, i64 1
  %329 = load i8*, i8** %328
  %controle2 = call i32 @controle(i8* %329, i32 0)
  store i32 %controle2, i32* %collatzVar1
  %330 = load i32, i32* @x.5
  %331 = load i32, i32* @y.6
  %332 = sub i32 %330, 1
  %333 = mul i32 %330, %332
  %334 = urem i32 %333, 2
  %335 = icmp eq i32 %334, 0
  %336 = icmp slt i32 %331, 10
  %337 = or i1 %335, %336
  br i1 %337, label %originalBBpart264, label %originalBB62alteredBB

originalBBpart264:                                ; preds = %originalBB62
  br label %338

338:                                              ; preds = %originalBBpart2118, %originalBBpart2106, %originalBBpart264
  %339 = load i32, i32* @x.5
  %340 = load i32, i32* @y.6
  %341 = sub i32 %339, 1
  %342 = mul i32 %339, %341
  %343 = urem i32 %342, 2
  %344 = icmp eq i32 %343, 0
  %345 = icmp slt i32 %340, 10
  %346 = or i1 %344, %345
  br i1 %346, label %originalBB66, label %originalBB66alteredBB

originalBB66:                                     ; preds = %338, %originalBB66alteredBB
  %347 = load i32, i32* %collatzVar1
  %348 = icmp sgt i32 %347, 1
  %349 = load i32, i32* @x.5
  %350 = load i32, i32* @y.6
  %351 = sub i32 %349, 1
  %352 = mul i32 %349, %351
  %353 = urem i32 %352, 2
  %354 = icmp eq i32 %353, 0
  %355 = icmp slt i32 %350, 10
  %356 = or i1 %354, %355
  br i1 %356, label %originalBBpart268, label %originalBB66alteredBB

originalBBpart268:                                ; preds = %originalBB66
  br i1 %348, label %357, label %727

357:                                              ; preds = %originalBBpart268
  %358 = load i32, i32* @x.5
  %359 = load i32, i32* @y.6
  %360 = sub i32 %358, 1
  %361 = mul i32 %358, %360
  %362 = urem i32 %361, 2
  %363 = icmp eq i32 %362, 0
  %364 = icmp slt i32 %359, 10
  %365 = or i1 %363, %364
  br i1 %365, label %originalBB70, label %originalBB70alteredBB

originalBB70:                                     ; preds = %357, %originalBB70alteredBB
  %366 = load i32, i32* %collatzVar1
  %367 = srem i32 %366, 2
  %368 = icmp eq i32 %367, 0
  %369 = load i32, i32* @x.5
  %370 = load i32, i32* @y.6
  %371 = sub i32 %369, 1
  %372 = mul i32 %369, %371
  %373 = urem i32 %372, 2
  %374 = icmp eq i32 %373, 0
  %375 = icmp slt i32 %370, 10
  %376 = or i1 %374, %375
  br i1 %376, label %originalBBpart274, label %originalBB70alteredBB

originalBBpart274:                                ; preds = %originalBB70
  br i1 %368, label %377, label %396

377:                                              ; preds = %originalBBpart274
  %378 = load i32, i32* @x.5
  %379 = load i32, i32* @y.6
  %380 = sub i32 %378, 1
  %381 = mul i32 %378, %380
  %382 = urem i32 %381, 2
  %383 = icmp eq i32 %382, 0
  %384 = icmp slt i32 %379, 10
  %385 = or i1 %383, %384
  br i1 %385, label %originalBB76, label %originalBB76alteredBB

originalBB76:                                     ; preds = %377, %originalBB76alteredBB
  %386 = load i32, i32* %collatzVar1
  %387 = sdiv i32 %386, 2
  store i32 %387, i32* %collatzVar1
  %388 = load i32, i32* @x.5
  %389 = load i32, i32* @y.6
  %390 = sub i32 %388, 1
  %391 = mul i32 %388, %390
  %392 = urem i32 %391, 2
  %393 = icmp eq i32 %392, 0
  %394 = icmp slt i32 %389, 10
  %395 = or i1 %393, %394
  br i1 %395, label %originalBBpart281, label %originalBB76alteredBB

originalBBpart281:                                ; preds = %originalBB76
  br label %416

396:                                              ; preds = %originalBBpart274
  %397 = load i32, i32* @x.5
  %398 = load i32, i32* @y.6
  %399 = sub i32 %397, 1
  %400 = mul i32 %397, %399
  %401 = urem i32 %400, 2
  %402 = icmp eq i32 %401, 0
  %403 = icmp slt i32 %398, 10
  %404 = or i1 %402, %403
  br i1 %404, label %originalBB83, label %originalBB83alteredBB

originalBB83:                                     ; preds = %396, %originalBB83alteredBB
  %405 = load i32, i32* %collatzVar1
  %406 = mul i32 %405, 3
  %407 = add i32 %406, 1
  store i32 %407, i32* %collatzVar1
  %408 = load i32, i32* @x.5
  %409 = load i32, i32* @y.6
  %410 = sub i32 %408, 1
  %411 = mul i32 %408, %410
  %412 = urem i32 %411, 2
  %413 = icmp eq i32 %412, 0
  %414 = icmp slt i32 %409, 10
  %415 = or i1 %413, %414
  br i1 %415, label %originalBBpart290, label %originalBB83alteredBB

originalBBpart290:                                ; preds = %originalBB83
  br label %416

416:                                              ; preds = %originalBBpart290, %originalBBpart281
  %417 = load i32, i32* @x.5
  %418 = load i32, i32* @y.6
  %419 = sub i32 %417, 1
  %420 = mul i32 %417, %419
  %421 = urem i32 %420, 2
  %422 = icmp eq i32 %421, 0
  %423 = icmp slt i32 %418, 10
  %424 = or i1 %422, %423
  br i1 %424, label %originalBB92, label %originalBB92alteredBB

originalBB92:                                     ; preds = %416, %originalBB92alteredBB
  %425 = load i32, i32* %collatzVar1
  %426 = sub i32 %256, %425
  %427 = icmp sgt i32 %426, -2
  %428 = load i32, i32* @x.5
  %429 = load i32, i32* @y.6
  %430 = sub i32 %428, 1
  %431 = mul i32 %428, %430
  %432 = urem i32 %431, 2
  %433 = icmp eq i32 %432, 0
  %434 = icmp slt i32 %429, 10
  %435 = or i1 %433, %434
  br i1 %435, label %originalBBpart2106, label %originalBB92alteredBB

originalBBpart2106:                               ; preds = %originalBB92
  br i1 %427, label %436, label %338

436:                                              ; preds = %originalBBpart2106
  %437 = load i32, i32* @x.5
  %438 = load i32, i32* @y.6
  %439 = sub i32 %437, 1
  %440 = mul i32 %437, %439
  %441 = urem i32 %440, 2
  %442 = icmp eq i32 %441, 0
  %443 = icmp slt i32 %438, 10
  %444 = or i1 %442, %443
  br i1 %444, label %originalBB108, label %originalBB108alteredBB

originalBB108:                                    ; preds = %436, %originalBB108alteredBB
  %445 = load i32, i32* %collatzVar1
  %446 = add i32 %256, %445
  %447 = icmp slt i32 %446, 2
  %448 = load i32, i32* @x.5
  %449 = load i32, i32* @y.6
  %450 = sub i32 %448, 1
  %451 = mul i32 %448, %450
  %452 = urem i32 %451, 2
  %453 = icmp eq i32 %452, 0
  %454 = icmp slt i32 %449, 10
  %455 = or i1 %453, %454
  br i1 %455, label %originalBBpart2118, label %originalBB108alteredBB

originalBBpart2118:                               ; preds = %originalBB108
  br i1 %447, label %456, label %338

456:                                              ; preds = %originalBBpart2118
  %457 = load i32, i32* @x.5
  %458 = load i32, i32* @y.6
  %459 = sub i32 %457, 1
  %460 = mul i32 %457, %459
  %461 = urem i32 %460, 2
  %462 = icmp eq i32 %461, 0
  %463 = icmp slt i32 %458, 10
  %464 = or i1 %462, %463
  br i1 %464, label %originalBB120, label %originalBB120alteredBB

originalBB120:                                    ; preds = %456, %originalBB120alteredBB
  %465 = call i32 @stat(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i64 0, i64 0), %struct.stat* %11) #10, !dbg !511
  %466 = load i32, i32* @x.5
  %467 = load i32, i32* @y.6
  %468 = sub i32 %466, 1
  %469 = mul i32 %466, %468
  %470 = urem i32 %469, 2
  %471 = icmp eq i32 %470, 0
  %472 = icmp slt i32 %467, 10
  %473 = or i1 %471, %472
  br i1 %473, label %originalBBpart2122, label %originalBB120alteredBB

originalBBpart2122:                               ; preds = %originalBB120
  br label %474, !dbg !512

474:                                              ; preds = %originalBBpart2122
  %475 = load i32, i32* @x.5
  %476 = load i32, i32* @y.6
  %477 = sub i32 %475, 1
  %478 = mul i32 %475, %477
  %479 = urem i32 %478, 2
  %480 = icmp eq i32 %479, 0
  %481 = icmp slt i32 %476, 10
  %482 = or i1 %480, %481
  br i1 %482, label %originalBB124, label %originalBB124alteredBB

originalBB124:                                    ; preds = %474, %originalBB124alteredBB
  %collatzVar = alloca i32
  %483 = load i32, i32* @x.5
  %484 = load i32, i32* @y.6
  %485 = sub i32 %483, 1
  %486 = mul i32 %483, %485
  %487 = urem i32 %486, 2
  %488 = icmp eq i32 %487, 0
  %489 = icmp slt i32 %484, 10
  %490 = or i1 %488, %489
  br i1 %490, label %originalBBpart2126, label %originalBB124alteredBB

originalBBpart2126:                               ; preds = %originalBB124
  br label %491

491:                                              ; preds = %originalBBpart2126
  %492 = load i32, i32* @x.5
  %493 = load i32, i32* @y.6
  %494 = sub i32 %492, 1
  %495 = mul i32 %492, %494
  %496 = urem i32 %495, 2
  %497 = icmp eq i32 %496, 0
  %498 = icmp slt i32 %493, 10
  %499 = or i1 %497, %498
  br i1 %499, label %originalBB128, label %originalBB128alteredBB

originalBB128:                                    ; preds = %491, %originalBB128alteredBB
  %500 = load i32, i32* @inVal0
  %501 = icmp sgt i32 %500, 1
  %502 = load i32, i32* @x.5
  %503 = load i32, i32* @y.6
  %504 = sub i32 %502, 1
  %505 = mul i32 %502, %504
  %506 = urem i32 %505, 2
  %507 = icmp eq i32 %506, 0
  %508 = icmp slt i32 %503, 10
  %509 = or i1 %507, %508
  br i1 %509, label %originalBBpart2130, label %originalBB128alteredBB

originalBBpart2130:                               ; preds = %originalBB128
  br i1 %501, label %527, label %510

510:                                              ; preds = %originalBBpart2130
  %511 = load i32, i32* @x.5
  %512 = load i32, i32* @y.6
  %513 = sub i32 %511, 1
  %514 = mul i32 %511, %513
  %515 = urem i32 %514, 2
  %516 = icmp eq i32 %515, 0
  %517 = icmp slt i32 %512, 10
  %518 = or i1 %516, %517
  br i1 %518, label %originalBB132, label %originalBB132alteredBB

originalBB132:                                    ; preds = %510, %originalBB132alteredBB
  store i32 51, i32* %collatzVar
  %519 = load i32, i32* @x.5
  %520 = load i32, i32* @y.6
  %521 = sub i32 %519, 1
  %522 = mul i32 %519, %521
  %523 = urem i32 %522, 2
  %524 = icmp eq i32 %523, 0
  %525 = icmp slt i32 %520, 10
  %526 = or i1 %524, %525
  br i1 %526, label %originalBBpart2134, label %originalBB132alteredBB

originalBBpart2134:                               ; preds = %originalBB132
  br label %527

527:                                              ; preds = %originalBBpart2134, %originalBBpart2130
  %528 = load i32, i32* @x.5
  %529 = load i32, i32* @y.6
  %530 = sub i32 %528, 1
  %531 = mul i32 %528, %530
  %532 = urem i32 %531, 2
  %533 = icmp eq i32 %532, 0
  %534 = icmp slt i32 %529, 10
  %535 = or i1 %533, %534
  br i1 %535, label %originalBB136, label %originalBB136alteredBB

originalBB136:                                    ; preds = %527, %originalBB136alteredBB
  %536 = load i8**, i8*** @inVal1
  %537 = getelementptr inbounds i8*, i8** %536, i64 1
  %538 = load i8*, i8** %537
  %controle = call i32 @controle(i8* %538, i32 0)
  store i32 %controle, i32* %collatzVar
  %539 = load i32, i32* @x.5
  %540 = load i32, i32* @y.6
  %541 = sub i32 %539, 1
  %542 = mul i32 %539, %541
  %543 = urem i32 %542, 2
  %544 = icmp eq i32 %543, 0
  %545 = icmp slt i32 %540, 10
  %546 = or i1 %544, %545
  br i1 %546, label %originalBBpart2138, label %originalBB136alteredBB

originalBBpart2138:                               ; preds = %originalBB136
  br label %547

547:                                              ; preds = %originalBBpart2187, %originalBBpart2177, %originalBBpart2138
  %548 = load i32, i32* @x.5
  %549 = load i32, i32* @y.6
  %550 = sub i32 %548, 1
  %551 = mul i32 %548, %550
  %552 = urem i32 %551, 2
  %553 = icmp eq i32 %552, 0
  %554 = icmp slt i32 %549, 10
  %555 = or i1 %553, %554
  br i1 %555, label %originalBB140, label %originalBB140alteredBB

originalBB140:                                    ; preds = %547, %originalBB140alteredBB
  %556 = load i32, i32* %collatzVar
  %557 = icmp sgt i32 %556, 1
  %558 = load i32, i32* @x.5
  %559 = load i32, i32* @y.6
  %560 = sub i32 %558, 1
  %561 = mul i32 %558, %560
  %562 = urem i32 %561, 2
  %563 = icmp eq i32 %562, 0
  %564 = icmp slt i32 %559, 10
  %565 = or i1 %563, %564
  br i1 %565, label %originalBBpart2142, label %originalBB140alteredBB

originalBBpart2142:                               ; preds = %originalBB140
  br i1 %557, label %566, label %727

566:                                              ; preds = %originalBBpart2142
  %567 = load i32, i32* @x.5
  %568 = load i32, i32* @y.6
  %569 = sub i32 %567, 1
  %570 = mul i32 %567, %569
  %571 = urem i32 %570, 2
  %572 = icmp eq i32 %571, 0
  %573 = icmp slt i32 %568, 10
  %574 = or i1 %572, %573
  br i1 %574, label %originalBB144, label %originalBB144alteredBB

originalBB144:                                    ; preds = %566, %originalBB144alteredBB
  %575 = load i32, i32* %collatzVar
  %576 = srem i32 %575, 2
  %577 = icmp eq i32 %576, 0
  %578 = load i32, i32* @x.5
  %579 = load i32, i32* @y.6
  %580 = sub i32 %578, 1
  %581 = mul i32 %578, %580
  %582 = urem i32 %581, 2
  %583 = icmp eq i32 %582, 0
  %584 = icmp slt i32 %579, 10
  %585 = or i1 %583, %584
  br i1 %585, label %originalBBpart2148, label %originalBB144alteredBB

originalBBpart2148:                               ; preds = %originalBB144
  br i1 %577, label %586, label %605

586:                                              ; preds = %originalBBpart2148
  %587 = load i32, i32* @x.5
  %588 = load i32, i32* @y.6
  %589 = sub i32 %587, 1
  %590 = mul i32 %587, %589
  %591 = urem i32 %590, 2
  %592 = icmp eq i32 %591, 0
  %593 = icmp slt i32 %588, 10
  %594 = or i1 %592, %593
  br i1 %594, label %originalBB150, label %originalBB150alteredBB

originalBB150:                                    ; preds = %586, %originalBB150alteredBB
  %595 = load i32, i32* %collatzVar
  %596 = sdiv i32 %595, 2
  store i32 %596, i32* %collatzVar
  %597 = load i32, i32* @x.5
  %598 = load i32, i32* @y.6
  %599 = sub i32 %597, 1
  %600 = mul i32 %597, %599
  %601 = urem i32 %600, 2
  %602 = icmp eq i32 %601, 0
  %603 = icmp slt i32 %598, 10
  %604 = or i1 %602, %603
  br i1 %604, label %originalBBpart2156, label %originalBB150alteredBB

originalBBpart2156:                               ; preds = %originalBB150
  br label %625

605:                                              ; preds = %originalBBpart2148
  %606 = load i32, i32* @x.5
  %607 = load i32, i32* @y.6
  %608 = sub i32 %606, 1
  %609 = mul i32 %606, %608
  %610 = urem i32 %609, 2
  %611 = icmp eq i32 %610, 0
  %612 = icmp slt i32 %607, 10
  %613 = or i1 %611, %612
  br i1 %613, label %originalBB158, label %originalBB158alteredBB

originalBB158:                                    ; preds = %605, %originalBB158alteredBB
  %614 = load i32, i32* %collatzVar
  %615 = mul i32 %614, 3
  %616 = add i32 %615, 1
  store i32 %616, i32* %collatzVar
  %617 = load i32, i32* @x.5
  %618 = load i32, i32* @y.6
  %619 = sub i32 %617, 1
  %620 = mul i32 %617, %619
  %621 = urem i32 %620, 2
  %622 = icmp eq i32 %621, 0
  %623 = icmp slt i32 %618, 10
  %624 = or i1 %622, %623
  br i1 %624, label %originalBBpart2168, label %originalBB158alteredBB

originalBBpart2168:                               ; preds = %originalBB158
  br label %625

625:                                              ; preds = %originalBBpart2168, %originalBBpart2156
  %626 = load i32, i32* @x.5
  %627 = load i32, i32* @y.6
  %628 = sub i32 %626, 1
  %629 = mul i32 %626, %628
  %630 = urem i32 %629, 2
  %631 = icmp eq i32 %630, 0
  %632 = icmp slt i32 %627, 10
  %633 = or i1 %631, %632
  br i1 %633, label %originalBB170, label %originalBB170alteredBB

originalBB170:                                    ; preds = %625, %originalBB170alteredBB
  %634 = load i32, i32* %collatzVar
  %635 = sub i32 %465, %634
  %636 = icmp sgt i32 %635, -2
  %637 = load i32, i32* @x.5
  %638 = load i32, i32* @y.6
  %639 = sub i32 %637, 1
  %640 = mul i32 %637, %639
  %641 = urem i32 %640, 2
  %642 = icmp eq i32 %641, 0
  %643 = icmp slt i32 %638, 10
  %644 = or i1 %642, %643
  br i1 %644, label %originalBBpart2177, label %originalBB170alteredBB

originalBBpart2177:                               ; preds = %originalBB170
  br i1 %636, label %645, label %547

645:                                              ; preds = %originalBBpart2177
  %646 = load i32, i32* @x.5
  %647 = load i32, i32* @y.6
  %648 = sub i32 %646, 1
  %649 = mul i32 %646, %648
  %650 = urem i32 %649, 2
  %651 = icmp eq i32 %650, 0
  %652 = icmp slt i32 %647, 10
  %653 = or i1 %651, %652
  br i1 %653, label %originalBB179, label %originalBB179alteredBB

originalBB179:                                    ; preds = %645, %originalBB179alteredBB
  %654 = load i32, i32* %collatzVar
  %655 = add i32 %465, %654
  %656 = icmp slt i32 %655, 2
  %657 = load i32, i32* @x.5
  %658 = load i32, i32* @y.6
  %659 = sub i32 %657, 1
  %660 = mul i32 %657, %659
  %661 = urem i32 %660, 2
  %662 = icmp eq i32 %661, 0
  %663 = icmp slt i32 %658, 10
  %664 = or i1 %662, %663
  br i1 %664, label %originalBBpart2187, label %originalBB179alteredBB

originalBBpart2187:                               ; preds = %originalBB179
  br i1 %656, label %665, label %547

665:                                              ; preds = %originalBBpart2187
  %666 = load i32, i32* @x.5
  %667 = load i32, i32* @y.6
  %668 = sub i32 %666, 1
  %669 = mul i32 %666, %668
  %670 = urem i32 %669, 2
  %671 = icmp eq i32 %670, 0
  %672 = icmp slt i32 %667, 10
  %673 = or i1 %671, %672
  br i1 %673, label %originalBB189, label %originalBB189alteredBB

originalBB189:                                    ; preds = %665, %originalBB189alteredBB
  %674 = getelementptr inbounds %struct.stat, %struct.stat* %10, i32 0, i32 1, !dbg !513
  %675 = load i64, i64* %674, align 8, !dbg !513
  %676 = getelementptr inbounds %struct.stat, %struct.stat* %11, i32 0, i32 1, !dbg !513
  %677 = load i64, i64* %676, align 8, !dbg !513
  %678 = icmp eq i64 %675, %677, !dbg !513
  %679 = load i32, i32* @x.5
  %680 = load i32, i32* @y.6
  %681 = sub i32 %679, 1
  %682 = mul i32 %679, %681
  %683 = urem i32 %682, 2
  %684 = icmp eq i32 %683, 0
  %685 = icmp slt i32 %680, 10
  %686 = or i1 %684, %685
  br i1 %686, label %originalBBpart2191, label %originalBB189alteredBB

originalBBpart2191:                               ; preds = %originalBB189
  br i1 %678, label %687, label %727, !dbg !513

687:                                              ; preds = %originalBBpart2191
  %688 = load i32, i32* @x.5
  %689 = load i32, i32* @y.6
  %690 = sub i32 %688, 1
  %691 = mul i32 %688, %690
  %692 = urem i32 %691, 2
  %693 = icmp eq i32 %692, 0
  %694 = icmp slt i32 %689, 10
  %695 = or i1 %693, %694
  br i1 %695, label %originalBB193, label %originalBB193alteredBB

originalBB193:                                    ; preds = %687, %originalBB193alteredBB
  %696 = getelementptr inbounds %struct.stat, %struct.stat* %10, i32 0, i32 0, !dbg !513
  %697 = load i64, i64* %696, align 8, !dbg !513
  %698 = getelementptr inbounds %struct.stat, %struct.stat* %11, i32 0, i32 0, !dbg !513
  %699 = load i64, i64* %698, align 8, !dbg !513
  %700 = icmp eq i64 %697, %699, !dbg !513
  %701 = load i32, i32* @x.5
  %702 = load i32, i32* @y.6
  %703 = sub i32 %701, 1
  %704 = mul i32 %701, %703
  %705 = urem i32 %704, 2
  %706 = icmp eq i32 %705, 0
  %707 = icmp slt i32 %702, 10
  %708 = or i1 %706, %707
  br i1 %708, label %originalBBpart2195, label %originalBB193alteredBB

originalBBpart2195:                               ; preds = %originalBB193
  br i1 %700, label %709, label %727, !dbg !514

709:                                              ; preds = %originalBBpart2195
  %710 = load i32, i32* @x.5
  %711 = load i32, i32* @y.6
  %712 = sub i32 %710, 1
  %713 = mul i32 %710, %712
  %714 = urem i32 %713, 2
  %715 = icmp eq i32 %714, 0
  %716 = icmp slt i32 %711, 10
  %717 = or i1 %715, %716
  br i1 %717, label %originalBB197, label %originalBB197alteredBB

originalBB197:                                    ; preds = %709, %originalBB197alteredBB
  %718 = load i8*, i8** %12, align 8, !dbg !515
  store i8* %718, i8** %9, align 8, !dbg !516
  %719 = load i32, i32* @x.5
  %720 = load i32, i32* @y.6
  %721 = sub i32 %719, 1
  %722 = mul i32 %719, %721
  %723 = urem i32 %722, 2
  %724 = icmp eq i32 %723, 0
  %725 = icmp slt i32 %720, 10
  %726 = or i1 %724, %725
  br i1 %726, label %originalBBpart2199, label %originalBB197alteredBB

originalBBpart2199:                               ; preds = %originalBB197
  br label %744, !dbg !516

727:                                              ; preds = %originalBBpart2195, %originalBBpart2191, %originalBBpart2142, %originalBBpart268
  %728 = load i32, i32* @x.5
  %729 = load i32, i32* @y.6
  %730 = sub i32 %728, 1
  %731 = mul i32 %728, %730
  %732 = urem i32 %731, 2
  %733 = icmp eq i32 %732, 0
  %734 = icmp slt i32 %729, 10
  %735 = or i1 %733, %734
  br i1 %735, label %originalBB201, label %originalBB201alteredBB

originalBB201:                                    ; preds = %727, %originalBB201alteredBB
  store i8* null, i8** %9, align 8, !dbg !517
  %736 = load i32, i32* @x.5
  %737 = load i32, i32* @y.6
  %738 = sub i32 %736, 1
  %739 = mul i32 %736, %738
  %740 = urem i32 %739, 2
  %741 = icmp eq i32 %740, 0
  %742 = icmp slt i32 %737, 10
  %743 = or i1 %741, %742
  br i1 %743, label %originalBBpart2203, label %originalBB201alteredBB

originalBBpart2203:                               ; preds = %originalBB201
  br label %744, !dbg !517

744:                                              ; preds = %originalBBpart2203, %originalBBpart2199, %originalBBpart240, %originalBBpart28
  %745 = load i32, i32* @x.5
  %746 = load i32, i32* @y.6
  %747 = sub i32 %745, 1
  %748 = mul i32 %745, %747
  %749 = urem i32 %748, 2
  %750 = icmp eq i32 %749, 0
  %751 = icmp slt i32 %746, 10
  %752 = or i1 %750, %751
  br i1 %752, label %originalBB205, label %originalBB205alteredBB

originalBB205:                                    ; preds = %744, %originalBB205alteredBB
  %753 = load i8*, i8** %9, align 8, !dbg !518
  %754 = load i32, i32* @x.5
  %755 = load i32, i32* @y.6
  %756 = sub i32 %754, 1
  %757 = mul i32 %754, %756
  %758 = urem i32 %757, 2
  %759 = icmp eq i32 %758, 0
  %760 = icmp slt i32 %755, 10
  %761 = or i1 %759, %760
  br i1 %761, label %originalBBpart2207, label %originalBB205alteredBB

originalBBpart2207:                               ; preds = %originalBB205
  ret i8* %753, !dbg !518

originalBBalteredBB:                              ; preds = %originalBB, %0
  %762 = alloca i8*, align 8
  %763 = alloca %struct.stat, align 8
  %764 = alloca %struct.stat, align 8
  %765 = alloca i8*, align 8
  %766 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata %struct.stat* %763, metadata !519, metadata !DIExpression()), !dbg !467
  call void @llvm.dbg.declare(metadata %struct.stat* %764, metadata !554, metadata !DIExpression()), !dbg !469
  call void @llvm.dbg.declare(metadata i8** %765, metadata !555, metadata !DIExpression()), !dbg !471
  %767 = call i8* @getenv(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.36, i64 0, i64 0)) #10, !dbg !472
  store i8* %767, i8** %765, align 8, !dbg !471
  call void @llvm.dbg.declare(metadata i8** %766, metadata !556, metadata !DIExpression()), !dbg !474
  %768 = load i8*, i8** %765, align 8, !dbg !475
  %769 = icmp ne i8* %768, null, !dbg !475
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %25
  %770 = load i8*, i8** %12, align 8, !dbg !478
  %771 = getelementptr inbounds i8, i8* %770, i64 0, !dbg !478
  %772 = load i8, i8* %771, align 1, !dbg !478
  %773 = sext i8 %772 to i32, !dbg !478
  %774 = icmp ne i32 %773, 47, !dbg !479
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %47
  store i8* null, i8** %9, align 8, !dbg !481
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %64
  %775 = load i8*, i8** %12, align 8, !dbg !482
  store i8* %775, i8** %13, align 8, !dbg !483
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %82
  %776 = load i8*, i8** %13, align 8, !dbg !485
  %777 = call i8* @strstr(i8* %776, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.37, i64 0, i64 0)) #13, !dbg !486
  store i8* %777, i8** %13, align 8, !dbg !487
  %778 = icmp ne i8* %777, null, !dbg !484
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %102
  %779 = load i8*, i8** %13, align 8, !dbg !488
  %780 = getelementptr inbounds i8, i8* %779, i64 2, !dbg !488
  %781 = load i8, i8* %780, align 1, !dbg !488
  %782 = icmp ne i8 %781, 0, !dbg !488
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %123
  %783 = load i8*, i8** %13, align 8, !dbg !492
  %784 = getelementptr inbounds i8, i8* %783, i64 2, !dbg !492
  %785 = load i8, i8* %784, align 1, !dbg !492
  %786 = sext i8 %785 to i32, !dbg !492
  %787 = icmp eq i32 %786, 47, !dbg !493
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %145
  %788 = load i8*, i8** %13, align 8, !dbg !495
  %789 = getelementptr inbounds i8, i8* %788, i64 2, !dbg !495
  %790 = load i8, i8* %789, align 1, !dbg !495
  %791 = sext i8 %790 to i32, !dbg !495
  %792 = icmp eq i32 %791, 46, !dbg !496
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %167
  %793 = load i8*, i8** %13, align 8, !dbg !498
  %794 = getelementptr inbounds i8, i8* %793, i64 3, !dbg !498
  %795 = load i8, i8* %794, align 1, !dbg !498
  %796 = icmp ne i8 %795, 0, !dbg !498
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %188
  %797 = load i8*, i8** %13, align 8, !dbg !500
  %798 = getelementptr inbounds i8, i8* %797, i64 3, !dbg !500
  %799 = load i8, i8* %798, align 1, !dbg !500
  %800 = sext i8 %799 to i32, !dbg !500
  %801 = icmp eq i32 %800, 47, !dbg !501
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %210
  store i8* null, i8** %9, align 8, !dbg !503
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %227
  %802 = load i8*, i8** %13, align 8, !dbg !504
  %803 = getelementptr inbounds i8, i8* %802, i32 1, !dbg !504
  store i8* %803, i8** %13, align 8, !dbg !504
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %246
  %804 = load i8*, i8** %12, align 8, !dbg !507
  %805 = call i32 @stat(i8* %804, %struct.stat* %10) #10, !dbg !509
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %265
  %collatzVar1alteredBB = alloca i32
  br label %originalBB50

originalBB54alteredBB:                            ; preds = %originalBB54, %282
  %806 = load i32, i32* @inVal0
  %807 = icmp sgt i32 %806, 1
  br label %originalBB54

originalBB58alteredBB:                            ; preds = %originalBB58, %301
  store i32 54, i32* %collatzVar1
  br label %originalBB58

originalBB62alteredBB:                            ; preds = %originalBB62, %318
  %808 = load i8**, i8*** @inVal1
  %809 = getelementptr inbounds i8*, i8** %808, i64 1
  %810 = load i8*, i8** %809
  %controle2alteredBB = call i32 @controle(i8* %810, i32 0)
  store i32 %controle2alteredBB, i32* %collatzVar1
  br label %originalBB62

originalBB66alteredBB:                            ; preds = %originalBB66, %338
  %811 = load i32, i32* %collatzVar1
  %812 = icmp sgt i32 %811, 1
  br label %originalBB66

originalBB70alteredBB:                            ; preds = %originalBB70, %357
  %813 = load i32, i32* %collatzVar1
  %_ = sub i32 0, %813
  %gen = add i32 %_, 2
  %_71 = sub i32 %813, 2
  %gen72 = mul i32 %_71, 2
  %814 = srem i32 %813, 2
  %815 = icmp eq i32 %814, 0
  br label %originalBB70

originalBB76alteredBB:                            ; preds = %originalBB76, %377
  %816 = load i32, i32* %collatzVar1
  %_77 = shl i32 %816, 2
  %_78 = shl i32 %816, 2
  %_79 = shl i32 %816, 2
  %817 = sdiv i32 %816, 2
  store i32 %817, i32* %collatzVar1
  br label %originalBB76

originalBB83alteredBB:                            ; preds = %originalBB83, %396
  %818 = load i32, i32* %collatzVar1
  %_84 = shl i32 %818, 3
  %819 = mul i32 %818, 3
  %_85 = sub i32 %819, 1
  %gen86 = mul i32 %_85, 1
  %_87 = sub i32 0, %819
  %gen88 = add i32 %_87, 1
  %820 = add i32 %819, 1
  store i32 %820, i32* %collatzVar1
  br label %originalBB83

originalBB92alteredBB:                            ; preds = %originalBB92, %416
  %821 = load i32, i32* %collatzVar1
  %_93 = shl i32 %256, %821
  %_94 = sub i32 0, %256
  %gen95 = add i32 %_94, %821
  %_96 = sub i32 %256, %821
  %gen97 = mul i32 %_96, %821
  %_98 = shl i32 %256, %821
  %_99 = sub i32 0, %256
  %gen100 = add i32 %_99, %821
  %_101 = sub i32 %256, %821
  %gen102 = mul i32 %_101, %821
  %_103 = sub i32 0, %256
  %gen104 = add i32 %_103, %821
  %822 = sub i32 %256, %821
  %823 = icmp sgt i32 %822, -2
  br label %originalBB92

originalBB108alteredBB:                           ; preds = %originalBB108, %436
  %824 = load i32, i32* %collatzVar1
  %_109 = shl i32 %256, %824
  %_110 = sub i32 %256, %824
  %gen111 = mul i32 %_110, %824
  %_112 = shl i32 %256, %824
  %_113 = sub i32 0, %256
  %gen114 = add i32 %_113, %824
  %_115 = sub i32 %256, %824
  %gen116 = mul i32 %_115, %824
  %825 = add i32 %256, %824
  %826 = icmp slt i32 %825, 2
  br label %originalBB108

originalBB120alteredBB:                           ; preds = %originalBB120, %456
  %827 = call i32 @stat(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i64 0, i64 0), %struct.stat* %11) #10, !dbg !511
  br label %originalBB120

originalBB124alteredBB:                           ; preds = %originalBB124, %474
  %collatzVaralteredBB = alloca i32
  br label %originalBB124

originalBB128alteredBB:                           ; preds = %originalBB128, %491
  %828 = load i32, i32* @inVal0
  %829 = icmp sgt i32 %828, 1
  br label %originalBB128

originalBB132alteredBB:                           ; preds = %originalBB132, %510
  store i32 51, i32* %collatzVar
  br label %originalBB132

originalBB136alteredBB:                           ; preds = %originalBB136, %527
  %830 = load i8**, i8*** @inVal1
  %831 = getelementptr inbounds i8*, i8** %830, i64 1
  %832 = load i8*, i8** %831
  %controlealteredBB = call i32 @controle(i8* %832, i32 0)
  store i32 %controlealteredBB, i32* %collatzVar
  br label %originalBB136

originalBB140alteredBB:                           ; preds = %originalBB140, %547
  %833 = load i32, i32* %collatzVar
  %834 = icmp sgt i32 %833, 1
  br label %originalBB140

originalBB144alteredBB:                           ; preds = %originalBB144, %566
  %835 = load i32, i32* %collatzVar
  %_145 = sub i32 %835, 2
  %gen146 = mul i32 %_145, 2
  %836 = srem i32 %835, 2
  %837 = icmp eq i32 %836, 0
  br label %originalBB144

originalBB150alteredBB:                           ; preds = %originalBB150, %586
  %838 = load i32, i32* %collatzVar
  %_151 = shl i32 %838, 2
  %_152 = sub i32 0, %838
  %gen153 = add i32 %_152, 2
  %_154 = shl i32 %838, 2
  %839 = sdiv i32 %838, 2
  store i32 %839, i32* %collatzVar
  br label %originalBB150

originalBB158alteredBB:                           ; preds = %originalBB158, %605
  %840 = load i32, i32* %collatzVar
  %_159 = shl i32 %840, 3
  %_160 = shl i32 %840, 3
  %_161 = sub i32 %840, 3
  %gen162 = mul i32 %_161, 3
  %_163 = shl i32 %840, 3
  %_164 = shl i32 %840, 3
  %841 = mul i32 %840, 3
  %_165 = sub i32 %841, 1
  %gen166 = mul i32 %_165, 1
  %842 = add i32 %841, 1
  store i32 %842, i32* %collatzVar
  br label %originalBB158

originalBB170alteredBB:                           ; preds = %originalBB170, %625
  %843 = load i32, i32* %collatzVar
  %_171 = shl i32 %465, %843
  %_172 = sub i32 %465, %843
  %gen173 = mul i32 %_172, %843
  %_174 = sub i32 %465, %843
  %gen175 = mul i32 %_174, %843
  %844 = sub i32 %465, %843
  %845 = icmp sgt i32 %844, -2
  br label %originalBB170

originalBB179alteredBB:                           ; preds = %originalBB179, %645
  %846 = load i32, i32* %collatzVar
  %_180 = sub i32 0, %465
  %gen181 = add i32 %_180, %846
  %_182 = sub i32 %465, %846
  %gen183 = mul i32 %_182, %846
  %_184 = sub i32 0, %465
  %gen185 = add i32 %_184, %846
  %847 = add i32 %465, %846
  %848 = icmp slt i32 %847, 2
  br label %originalBB179

originalBB189alteredBB:                           ; preds = %originalBB189, %665
  %849 = getelementptr inbounds %struct.stat, %struct.stat* %10, i32 0, i32 1, !dbg !513
  %850 = load i64, i64* %849, align 8, !dbg !513
  %851 = getelementptr inbounds %struct.stat, %struct.stat* %11, i32 0, i32 1, !dbg !513
  %852 = load i64, i64* %851, align 8, !dbg !513
  %853 = icmp eq i64 %850, %852, !dbg !513
  br label %originalBB189

originalBB193alteredBB:                           ; preds = %originalBB193, %687
  %854 = getelementptr inbounds %struct.stat, %struct.stat* %10, i32 0, i32 0, !dbg !513
  %855 = load i64, i64* %854, align 8, !dbg !513
  %856 = getelementptr inbounds %struct.stat, %struct.stat* %11, i32 0, i32 0, !dbg !513
  %857 = load i64, i64* %856, align 8, !dbg !513
  %858 = icmp eq i64 %855, %857, !dbg !513
  br label %originalBB193

originalBB197alteredBB:                           ; preds = %originalBB197, %709
  %859 = load i8*, i8** %12, align 8, !dbg !515
  store i8* %859, i8** %9, align 8, !dbg !516
  br label %originalBB197

originalBB201alteredBB:                           ; preds = %originalBB201, %727
  store i8* null, i8** %9, align 8, !dbg !517
  br label %originalBB201

originalBB205alteredBB:                           ; preds = %originalBB205, %744
  %860 = load i8*, i8** %9, align 8, !dbg !518
  br label %originalBB205
}

declare dso_local i32 @puts(i8*) #3

; Function Attrs: nounwind
declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.file_name* @file_name_init() #4 !dbg !557 {
  %1 = load i32, i32* @x.7
  %2 = load i32, i32* @y.8
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = alloca %struct.file_name*, align 8
  call void @llvm.dbg.declare(metadata %struct.file_name** %9, metadata !560, metadata !DIExpression()), !dbg !561
  %10 = call noalias i8* @xmalloc(i64 24), !dbg !562
  %11 = bitcast i8* %10 to %struct.file_name*, !dbg !562
  store %struct.file_name* %11, %struct.file_name** %9, align 8, !dbg !561
  %12 = load %struct.file_name*, %struct.file_name** %9, align 8, !dbg !563
  %13 = getelementptr inbounds %struct.file_name, %struct.file_name* %12, i32 0, i32 1, !dbg !564
  store i64 8192, i64* %13, align 8, !dbg !565
  %14 = load %struct.file_name*, %struct.file_name** %9, align 8, !dbg !566
  %15 = getelementptr inbounds %struct.file_name, %struct.file_name* %14, i32 0, i32 1, !dbg !567
  %16 = load i64, i64* %15, align 8, !dbg !567
  %17 = call noalias i8* @xmalloc(i64 %16), !dbg !568
  %18 = load %struct.file_name*, %struct.file_name** %9, align 8, !dbg !569
  %19 = getelementptr inbounds %struct.file_name, %struct.file_name* %18, i32 0, i32 0, !dbg !570
  store i8* %17, i8** %19, align 8, !dbg !571
  %20 = load %struct.file_name*, %struct.file_name** %9, align 8, !dbg !572
  %21 = getelementptr inbounds %struct.file_name, %struct.file_name* %20, i32 0, i32 0, !dbg !573
  %22 = load i8*, i8** %21, align 8, !dbg !573
  %23 = load %struct.file_name*, %struct.file_name** %9, align 8, !dbg !574
  %24 = getelementptr inbounds %struct.file_name, %struct.file_name* %23, i32 0, i32 1, !dbg !575
  %25 = load i64, i64* %24, align 8, !dbg !575
  %26 = sub i64 %25, 1, !dbg !576
  %27 = getelementptr inbounds i8, i8* %22, i64 %26, !dbg !577
  %28 = load %struct.file_name*, %struct.file_name** %9, align 8, !dbg !578
  %29 = getelementptr inbounds %struct.file_name, %struct.file_name* %28, i32 0, i32 2, !dbg !579
  store i8* %27, i8** %29, align 8, !dbg !580
  %30 = load %struct.file_name*, %struct.file_name** %9, align 8, !dbg !581
  %31 = getelementptr inbounds %struct.file_name, %struct.file_name* %30, i32 0, i32 2, !dbg !582
  %32 = load i8*, i8** %31, align 8, !dbg !582
  %33 = getelementptr inbounds i8, i8* %32, i64 0, !dbg !581
  store i8 0, i8* %33, align 1, !dbg !583
  %34 = load %struct.file_name*, %struct.file_name** %9, align 8, !dbg !584
  %35 = load i32, i32* @x.7
  %36 = load i32, i32* @y.8
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret %struct.file_name* %34, !dbg !585

originalBBalteredBB:                              ; preds = %originalBB, %0
  %43 = alloca %struct.file_name*, align 8
  call void @llvm.dbg.declare(metadata %struct.file_name** %43, metadata !586, metadata !DIExpression()), !dbg !561
  %44 = call noalias i8* @xmalloc(i64 24), !dbg !562
  %45 = bitcast i8* %44 to %struct.file_name*, !dbg !562
  store %struct.file_name* %45, %struct.file_name** %43, align 8, !dbg !561
  %46 = load %struct.file_name*, %struct.file_name** %43, align 8, !dbg !563
  %47 = getelementptr inbounds %struct.file_name, %struct.file_name* %46, i32 0, i32 1, !dbg !564
  store i64 8192, i64* %47, align 8, !dbg !565
  %48 = load %struct.file_name*, %struct.file_name** %43, align 8, !dbg !566
  %49 = getelementptr inbounds %struct.file_name, %struct.file_name* %48, i32 0, i32 1, !dbg !567
  %50 = load i64, i64* %49, align 8, !dbg !567
  %51 = call noalias i8* @xmalloc(i64 %50), !dbg !568
  %52 = load %struct.file_name*, %struct.file_name** %43, align 8, !dbg !569
  %53 = getelementptr inbounds %struct.file_name, %struct.file_name* %52, i32 0, i32 0, !dbg !570
  store i8* %51, i8** %53, align 8, !dbg !571
  %54 = load %struct.file_name*, %struct.file_name** %43, align 8, !dbg !572
  %55 = getelementptr inbounds %struct.file_name, %struct.file_name* %54, i32 0, i32 0, !dbg !573
  %56 = load i8*, i8** %55, align 8, !dbg !573
  %57 = load %struct.file_name*, %struct.file_name** %43, align 8, !dbg !574
  %58 = getelementptr inbounds %struct.file_name, %struct.file_name* %57, i32 0, i32 1, !dbg !575
  %59 = load i64, i64* %58, align 8, !dbg !575
  %60 = sub i64 %59, 1, !dbg !576
  %61 = getelementptr inbounds i8, i8* %56, i64 %60, !dbg !577
  %62 = load %struct.file_name*, %struct.file_name** %43, align 8, !dbg !578
  %63 = getelementptr inbounds %struct.file_name, %struct.file_name* %62, i32 0, i32 2, !dbg !579
  store i8* %61, i8** %63, align 8, !dbg !580
  %64 = load %struct.file_name*, %struct.file_name** %43, align 8, !dbg !581
  %65 = getelementptr inbounds %struct.file_name, %struct.file_name* %64, i32 0, i32 2, !dbg !582
  %66 = load i8*, i8** %65, align 8, !dbg !582
  %67 = getelementptr inbounds i8, i8* %66, i64 0, !dbg !581
  store i8 0, i8* %67, align 1, !dbg !583
  %68 = load %struct.file_name*, %struct.file_name** %43, align 8, !dbg !584
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @robust_getcwd(%struct.file_name*) #4 !dbg !608 {
  %2 = load i32, i32* @x.9
  %3 = load i32, i32* @y.10
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct.file_name*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %struct.dev_ino, align 8
  %13 = alloca %struct.dev_ino*, align 8
  %14 = alloca %struct.stat, align 8
  store %struct.file_name* %0, %struct.file_name** %10, align 8
  call void @llvm.dbg.declare(metadata %struct.file_name** %10, metadata !611, metadata !DIExpression()), !dbg !612
  call void @llvm.dbg.declare(metadata i64* %11, metadata !613, metadata !DIExpression()), !dbg !614
  store i64 1, i64* %11, align 8, !dbg !614
  call void @llvm.dbg.declare(metadata %struct.dev_ino* %12, metadata !615, metadata !DIExpression()), !dbg !624
  call void @llvm.dbg.declare(metadata %struct.dev_ino** %13, metadata !625, metadata !DIExpression()), !dbg !627
  %15 = call %struct.dev_ino* @get_root_dev_ino(%struct.dev_ino* %12), !dbg !628
  store %struct.dev_ino* %15, %struct.dev_ino** %13, align 8, !dbg !627
  call void @llvm.dbg.declare(metadata %struct.stat* %14, metadata !629, metadata !DIExpression()), !dbg !630
  %16 = load %struct.dev_ino*, %struct.dev_ino** %13, align 8, !dbg !631
  %17 = icmp eq %struct.dev_ino* %16, null, !dbg !633
  %18 = load i32, i32* @x.9
  %19 = load i32, i32* @y.10
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %17, label %26, label %47, !dbg !634

26:                                               ; preds = %originalBBpart2
  %27 = load i32, i32* @x.9
  %28 = load i32, i32* @y.10
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %26, %originalBB1alteredBB
  %35 = call i32* @__errno_location() #15, !dbg !635
  %36 = load i32, i32* %35, align 4, !dbg !635
  %37 = call i8* @gettext(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.39, i64 0, i64 0)) #10, !dbg !635
  %38 = call i8* @quotearg_style(i32 4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.40, i64 0, i64 0)), !dbg !635
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %36, i8* %37, i8* %38), !dbg !635
  %39 = load i32, i32* @x.9
  %40 = load i32, i32* @y.10
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  unreachable, !dbg !635

47:                                               ; preds = %originalBBpart2
  %48 = load i32, i32* @x.9
  %49 = load i32, i32* @y.10
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %47, %originalBB6alteredBB
  %56 = call i32 @stat(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i64 0, i64 0), %struct.stat* %14) #10, !dbg !636
  %57 = icmp slt i32 %56, 0, !dbg !638
  %58 = load i32, i32* @x.9
  %59 = load i32, i32* @y.10
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %57, label %66, label %87, !dbg !639

66:                                               ; preds = %originalBBpart28
  %67 = load i32, i32* @x.9
  %68 = load i32, i32* @y.10
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %66, %originalBB10alteredBB
  %75 = call i32* @__errno_location() #15, !dbg !640
  %76 = load i32, i32* %75, align 4, !dbg !640
  %77 = call i8* @gettext(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.41, i64 0, i64 0)) #10, !dbg !640
  %78 = call i8* @quotearg_style(i32 4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i64 0, i64 0)), !dbg !640
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %76, i8* %77, i8* %78), !dbg !640
  %79 = load i32, i32* @x.9
  %80 = load i32, i32* @y.10
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  unreachable, !dbg !640

87:                                               ; preds = %originalBBpart28
  %88 = load i32, i32* @x.9
  %89 = load i32, i32* @y.10
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %87, %originalBB14alteredBB
  %96 = load i32, i32* @x.9
  %97 = load i32, i32* @y.10
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %104, !dbg !641

104:                                              ; preds = %originalBBpart236, %originalBBpart216
  %105 = load i32, i32* @x.9
  %106 = load i32, i32* @y.10
  %107 = sub i32 %105, 1
  %108 = mul i32 %105, %107
  %109 = urem i32 %108, 2
  %110 = icmp eq i32 %109, 0
  %111 = icmp slt i32 %106, 10
  %112 = or i1 %110, %111
  br i1 %112, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %104, %originalBB18alteredBB
  %113 = getelementptr inbounds %struct.stat, %struct.stat* %14, i32 0, i32 1, !dbg !642
  %114 = load i64, i64* %113, align 8, !dbg !642
  %115 = load %struct.dev_ino*, %struct.dev_ino** %13, align 8, !dbg !642
  %116 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %115, i32 0, i32 0, !dbg !642
  %117 = load i64, i64* %116, align 8, !dbg !642
  %118 = icmp eq i64 %114, %117, !dbg !642
  %119 = load i32, i32* @x.9
  %120 = load i32, i32* @y.10
  %121 = sub i32 %119, 1
  %122 = mul i32 %119, %121
  %123 = urem i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %124, %125
  br i1 %126, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %118, label %127, label %167, !dbg !642

127:                                              ; preds = %originalBBpart220
  %128 = load i32, i32* @x.9
  %129 = load i32, i32* @y.10
  %130 = sub i32 %128, 1
  %131 = mul i32 %128, %130
  %132 = urem i32 %131, 2
  %133 = icmp eq i32 %132, 0
  %134 = icmp slt i32 %129, 10
  %135 = or i1 %133, %134
  br i1 %135, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %127, %originalBB22alteredBB
  %136 = getelementptr inbounds %struct.stat, %struct.stat* %14, i32 0, i32 0, !dbg !642
  %137 = load i64, i64* %136, align 8, !dbg !642
  %138 = load %struct.dev_ino*, %struct.dev_ino** %13, align 8, !dbg !642
  %139 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %138, i32 0, i32 1, !dbg !642
  %140 = load i64, i64* %139, align 8, !dbg !642
  %141 = icmp eq i64 %137, %140, !dbg !642
  %142 = load i32, i32* @x.9
  %143 = load i32, i32* @y.10
  %144 = sub i32 %142, 1
  %145 = mul i32 %142, %144
  %146 = urem i32 %145, 2
  %147 = icmp eq i32 %146, 0
  %148 = icmp slt i32 %143, 10
  %149 = or i1 %147, %148
  br i1 %149, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %141, label %150, label %167, !dbg !645

150:                                              ; preds = %originalBBpart224
  %151 = load i32, i32* @x.9
  %152 = load i32, i32* @y.10
  %153 = sub i32 %151, 1
  %154 = mul i32 %151, %153
  %155 = urem i32 %154, 2
  %156 = icmp eq i32 %155, 0
  %157 = icmp slt i32 %152, 10
  %158 = or i1 %156, %157
  br i1 %158, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %150, %originalBB26alteredBB
  %159 = load i32, i32* @x.9
  %160 = load i32, i32* @y.10
  %161 = sub i32 %159, 1
  %162 = mul i32 %159, %161
  %163 = urem i32 %162, 2
  %164 = icmp eq i32 %163, 0
  %165 = icmp slt i32 %160, 10
  %166 = or i1 %164, %165
  br i1 %166, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %187, !dbg !646

167:                                              ; preds = %originalBBpart224, %originalBBpart220
  %168 = load i32, i32* @x.9
  %169 = load i32, i32* @y.10
  %170 = sub i32 %168, 1
  %171 = mul i32 %168, %170
  %172 = urem i32 %171, 2
  %173 = icmp eq i32 %172, 0
  %174 = icmp slt i32 %169, 10
  %175 = or i1 %173, %174
  br i1 %175, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %167, %originalBB30alteredBB
  %176 = load %struct.file_name*, %struct.file_name** %10, align 8, !dbg !647
  %177 = load i64, i64* %11, align 8, !dbg !648
  %178 = add i64 %177, 1, !dbg !648
  store i64 %178, i64* %11, align 8, !dbg !648
  call void @find_dir_entry(%struct.stat* %14, %struct.file_name* %176, i64 %177), !dbg !649
  %179 = load i32, i32* @x.9
  %180 = load i32, i32* @y.10
  %181 = sub i32 %179, 1
  %182 = mul i32 %179, %181
  %183 = urem i32 %182, 2
  %184 = icmp eq i32 %183, 0
  %185 = icmp slt i32 %180, 10
  %186 = or i1 %184, %185
  br i1 %186, label %originalBBpart236, label %originalBB30alteredBB

originalBBpart236:                                ; preds = %originalBB30
  br label %104, !dbg !641, !llvm.loop !650

187:                                              ; preds = %originalBBpart228
  %188 = load i32, i32* @x.9
  %189 = load i32, i32* @y.10
  %190 = sub i32 %188, 1
  %191 = mul i32 %188, %190
  %192 = urem i32 %191, 2
  %193 = icmp eq i32 %192, 0
  %194 = icmp slt i32 %189, 10
  %195 = or i1 %193, %194
  br i1 %195, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %187, %originalBB38alteredBB
  %196 = load %struct.file_name*, %struct.file_name** %10, align 8, !dbg !652
  %197 = getelementptr inbounds %struct.file_name, %struct.file_name* %196, i32 0, i32 2, !dbg !654
  %198 = load i8*, i8** %197, align 8, !dbg !654
  %199 = getelementptr inbounds i8, i8* %198, i64 0, !dbg !652
  %200 = load i8, i8* %199, align 1, !dbg !652
  %201 = sext i8 %200 to i32, !dbg !652
  %202 = icmp eq i32 %201, 0, !dbg !655
  %203 = load i32, i32* @x.9
  %204 = load i32, i32* @y.10
  %205 = sub i32 %203, 1
  %206 = mul i32 %203, %205
  %207 = urem i32 %206, 2
  %208 = icmp eq i32 %207, 0
  %209 = icmp slt i32 %204, 10
  %210 = or i1 %208, %209
  br i1 %210, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br i1 %202, label %211, label %229, !dbg !656

211:                                              ; preds = %originalBBpart240
  %212 = load i32, i32* @x.9
  %213 = load i32, i32* @y.10
  %214 = sub i32 %212, 1
  %215 = mul i32 %212, %214
  %216 = urem i32 %215, 2
  %217 = icmp eq i32 %216, 0
  %218 = icmp slt i32 %213, 10
  %219 = or i1 %217, %218
  br i1 %219, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %211, %originalBB42alteredBB
  %220 = load %struct.file_name*, %struct.file_name** %10, align 8, !dbg !657
  call void @file_name_prepend(%struct.file_name* %220, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0), i64 0), !dbg !658
  %221 = load i32, i32* @x.9
  %222 = load i32, i32* @y.10
  %223 = sub i32 %221, 1
  %224 = mul i32 %221, %223
  %225 = urem i32 %224, 2
  %226 = icmp eq i32 %225, 0
  %227 = icmp slt i32 %222, 10
  %228 = or i1 %226, %227
  br i1 %228, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br label %229, !dbg !658

229:                                              ; preds = %originalBBpart244, %originalBBpart240
  %230 = load i32, i32* @x.9
  %231 = load i32, i32* @y.10
  %232 = sub i32 %230, 1
  %233 = mul i32 %230, %232
  %234 = urem i32 %233, 2
  %235 = icmp eq i32 %234, 0
  %236 = icmp slt i32 %231, 10
  %237 = or i1 %235, %236
  br i1 %237, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %229, %originalBB46alteredBB
  %238 = load i32, i32* @x.9
  %239 = load i32, i32* @y.10
  %240 = sub i32 %238, 1
  %241 = mul i32 %238, %240
  %242 = urem i32 %241, 2
  %243 = icmp eq i32 %242, 0
  %244 = icmp slt i32 %239, 10
  %245 = or i1 %243, %244
  br i1 %245, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  ret void, !dbg !659

originalBBalteredBB:                              ; preds = %originalBB, %1
  %246 = alloca %struct.file_name*, align 8
  %247 = alloca i64, align 8
  %248 = alloca %struct.dev_ino, align 8
  %249 = alloca %struct.dev_ino*, align 8
  %250 = alloca %struct.stat, align 8
  store %struct.file_name* %0, %struct.file_name** %246, align 8
  call void @llvm.dbg.declare(metadata %struct.file_name** %246, metadata !660, metadata !DIExpression()), !dbg !612
  call void @llvm.dbg.declare(metadata i64* %247, metadata !682, metadata !DIExpression()), !dbg !614
  store i64 1, i64* %247, align 8, !dbg !614
  call void @llvm.dbg.declare(metadata %struct.dev_ino* %248, metadata !683, metadata !DIExpression()), !dbg !624
  call void @llvm.dbg.declare(metadata %struct.dev_ino** %249, metadata !688, metadata !DIExpression()), !dbg !627
  %251 = call %struct.dev_ino* @get_root_dev_ino(%struct.dev_ino* %248), !dbg !628
  store %struct.dev_ino* %251, %struct.dev_ino** %249, align 8, !dbg !627
  call void @llvm.dbg.declare(metadata %struct.stat* %250, metadata !690, metadata !DIExpression()), !dbg !630
  %252 = load %struct.dev_ino*, %struct.dev_ino** %249, align 8, !dbg !631
  %253 = icmp eq %struct.dev_ino* %252, null, !dbg !633
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %26
  %254 = call i32* @__errno_location() #15, !dbg !635
  %255 = load i32, i32* %254, align 4, !dbg !635
  %256 = call i8* @gettext(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.39, i64 0, i64 0)) #10, !dbg !635
  %257 = call i8* @quotearg_style(i32 4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.40, i64 0, i64 0)), !dbg !635
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %255, i8* %256, i8* %257), !dbg !635
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %47
  %258 = call i32 @stat(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i64 0, i64 0), %struct.stat* %14) #10, !dbg !636
  %259 = icmp slt i32 %258, 0, !dbg !638
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %66
  %260 = call i32* @__errno_location() #15, !dbg !640
  %261 = load i32, i32* %260, align 4, !dbg !640
  %262 = call i8* @gettext(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.41, i64 0, i64 0)) #10, !dbg !640
  %263 = call i8* @quotearg_style(i32 4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i64 0, i64 0)), !dbg !640
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %261, i8* %262, i8* %263), !dbg !640
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %87
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %104
  %264 = getelementptr inbounds %struct.stat, %struct.stat* %14, i32 0, i32 1, !dbg !642
  %265 = load i64, i64* %264, align 8, !dbg !642
  %266 = load %struct.dev_ino*, %struct.dev_ino** %13, align 8, !dbg !642
  %267 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %266, i32 0, i32 0, !dbg !642
  %268 = load i64, i64* %267, align 8, !dbg !642
  %269 = icmp eq i64 %265, %268, !dbg !642
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %127
  %270 = getelementptr inbounds %struct.stat, %struct.stat* %14, i32 0, i32 0, !dbg !642
  %271 = load i64, i64* %270, align 8, !dbg !642
  %272 = load %struct.dev_ino*, %struct.dev_ino** %13, align 8, !dbg !642
  %273 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %272, i32 0, i32 1, !dbg !642
  %274 = load i64, i64* %273, align 8, !dbg !642
  %275 = icmp eq i64 %271, %274, !dbg !642
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %150
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %167
  %276 = load %struct.file_name*, %struct.file_name** %10, align 8, !dbg !647
  %277 = load i64, i64* %11, align 8, !dbg !648
  %_ = sub i64 %277, 1
  %gen = mul i64 %_, 1
  %_31 = sub i64 %277, 1
  %gen32 = mul i64 %_31, 1
  %_33 = shl i64 %277, 1
  %_34 = shl i64 %277, 1
  %278 = add i64 %277, 1, !dbg !648
  store i64 %278, i64* %11, align 8, !dbg !648
  call void @find_dir_entry(%struct.stat* %14, %struct.file_name* %276, i64 %277), !dbg !649
  br label %originalBB30

originalBB38alteredBB:                            ; preds = %originalBB38, %187
  %279 = load %struct.file_name*, %struct.file_name** %10, align 8, !dbg !652
  %280 = getelementptr inbounds %struct.file_name, %struct.file_name* %279, i32 0, i32 2, !dbg !654
  %281 = load i8*, i8** %280, align 8, !dbg !654
  %282 = getelementptr inbounds i8, i8* %281, i64 0, !dbg !652
  %283 = load i8, i8* %282, align 1, !dbg !652
  %284 = sext i8 %283 to i32, !dbg !652
  %285 = icmp eq i32 %284, 0, !dbg !655
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %211
  %286 = load %struct.file_name*, %struct.file_name** %10, align 8, !dbg !657
  call void @file_name_prepend(%struct.file_name* %286, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0), i64 0), !dbg !658
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %229
  br label %originalBB46
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @file_name_free(%struct.file_name*) #4 !dbg !712 {
  %2 = load i32, i32* @x.11
  %3 = load i32, i32* @y.12
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct.file_name*, align 8
  store %struct.file_name* %0, %struct.file_name** %10, align 8
  call void @llvm.dbg.declare(metadata %struct.file_name** %10, metadata !713, metadata !DIExpression()), !dbg !714
  %11 = load %struct.file_name*, %struct.file_name** %10, align 8, !dbg !715
  %12 = getelementptr inbounds %struct.file_name, %struct.file_name* %11, i32 0, i32 0, !dbg !716
  %13 = load i8*, i8** %12, align 8, !dbg !716
  call void @free(i8* %13) #10, !dbg !717
  %14 = load %struct.file_name*, %struct.file_name** %10, align 8, !dbg !718
  %15 = bitcast %struct.file_name* %14 to i8*, !dbg !718
  call void @free(i8* %15) #10, !dbg !719
  %16 = load i32, i32* @x.11
  %17 = load i32, i32* @y.12
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret void, !dbg !720

originalBBalteredBB:                              ; preds = %originalBB, %1
  %24 = alloca %struct.file_name*, align 8
  store %struct.file_name* %0, %struct.file_name** %24, align 8
  call void @llvm.dbg.declare(metadata %struct.file_name** %24, metadata !721, metadata !DIExpression()), !dbg !714
  %25 = load %struct.file_name*, %struct.file_name** %24, align 8, !dbg !715
  %26 = getelementptr inbounds %struct.file_name, %struct.file_name* %25, i32 0, i32 0, !dbg !716
  %27 = load i8*, i8** %26, align 8, !dbg !716
  call void @free(i8* %27) #10, !dbg !717
  %28 = load %struct.file_name*, %struct.file_name** %24, align 8, !dbg !718
  %29 = bitcast %struct.file_name* %28 to i8*, !dbg !718
  call void @free(i8* %29) #10, !dbg !719
  br label %originalBB
}

; Function Attrs: nounwind readnone
declare dso_local i32* @__errno_location() #8

; Function Attrs: nounwind
declare dso_local i32 @stat(i8*, %struct.stat*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @find_dir_entry(%struct.stat*, %struct.file_name*, i64) #4 !dbg !743 {
  %4 = load i32, i32* @x.13
  %5 = load i32, i32* @y.14
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca %struct.stat*, align 8
  %13 = alloca %struct.file_name*, align 8
  %14 = alloca i64, align 8
  %15 = alloca %struct.__dirstream*, align 8
  %16 = alloca i32, align 4
  %17 = alloca %struct.stat, align 8
  %18 = alloca i8, align 1
  %19 = alloca i8, align 1
  %20 = alloca %struct.dirent*, align 8
  %21 = alloca %struct.stat, align 8
  %22 = alloca i64, align 8
  %23 = alloca i32, align 4
  store %struct.stat* %0, %struct.stat** %12, align 8
  call void @llvm.dbg.declare(metadata %struct.stat** %12, metadata !747, metadata !DIExpression()), !dbg !748
  store %struct.file_name* %1, %struct.file_name** %13, align 8
  call void @llvm.dbg.declare(metadata %struct.file_name** %13, metadata !749, metadata !DIExpression()), !dbg !750
  store i64 %2, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !751, metadata !DIExpression()), !dbg !752
  call void @llvm.dbg.declare(metadata %struct.__dirstream** %15, metadata !753, metadata !DIExpression()), !dbg !758
  call void @llvm.dbg.declare(metadata i32* %16, metadata !759, metadata !DIExpression()), !dbg !760
  call void @llvm.dbg.declare(metadata %struct.stat* %17, metadata !761, metadata !DIExpression()), !dbg !762
  call void @llvm.dbg.declare(metadata i8* %18, metadata !763, metadata !DIExpression()), !dbg !764
  call void @llvm.dbg.declare(metadata i8* %19, metadata !765, metadata !DIExpression()), !dbg !766
  %24 = call %struct.__dirstream* @opendir(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i64 0, i64 0)), !dbg !767
  store %struct.__dirstream* %24, %struct.__dirstream** %15, align 8, !dbg !768
  %25 = load %struct.__dirstream*, %struct.__dirstream** %15, align 8, !dbg !769
  %26 = icmp eq %struct.__dirstream* %25, null, !dbg !771
  %27 = load i32, i32* @x.13
  %28 = load i32, i32* @y.14
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %26, label %35, label %58, !dbg !772

35:                                               ; preds = %originalBBpart2
  %36 = load i32, i32* @x.13
  %37 = load i32, i32* @y.14
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %35, %originalBB1alteredBB
  %44 = call i32* @__errno_location() #15, !dbg !773
  %45 = load i32, i32* %44, align 4, !dbg !773
  %46 = call i8* @gettext(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.43, i64 0, i64 0)) #10, !dbg !773
  %47 = load i64, i64* %14, align 8, !dbg !773
  %48 = call i8* @nth_parent(i64 %47), !dbg !773
  %49 = call i8* @quote(i8* %48), !dbg !773
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %45, i8* %46, i8* %49), !dbg !773
  %50 = load i32, i32* @x.13
  %51 = load i32, i32* @y.14
  %52 = sub i32 %50, 1
  %53 = mul i32 %50, %52
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %55, %56
  br i1 %57, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  unreachable, !dbg !773

58:                                               ; preds = %originalBBpart2
  %59 = load i32, i32* @x.13
  %60 = load i32, i32* @y.14
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %58, %originalBB6alteredBB
  %67 = load %struct.__dirstream*, %struct.__dirstream** %15, align 8, !dbg !774
  %68 = call i32 @dirfd(%struct.__dirstream* %67) #10, !dbg !775
  store i32 %68, i32* %16, align 4, !dbg !776
  %69 = load i32, i32* %16, align 4, !dbg !777
  %70 = icmp sle i32 0, %69, !dbg !779
  %71 = load i32, i32* @x.13
  %72 = load i32, i32* @y.14
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %70, label %79, label %98, !dbg !780

79:                                               ; preds = %originalBBpart28
  %80 = load i32, i32* @x.13
  %81 = load i32, i32* @y.14
  %82 = sub i32 %80, 1
  %83 = mul i32 %80, %82
  %84 = urem i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = icmp slt i32 %81, 10
  %87 = or i1 %85, %86
  br i1 %87, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %79, %originalBB10alteredBB
  %88 = load i32, i32* %16, align 4, !dbg !781
  %89 = call i32 @fchdir(i32 %88) #10, !dbg !782
  %90 = load i32, i32* @x.13
  %91 = load i32, i32* @y.14
  %92 = sub i32 %90, 1
  %93 = mul i32 %90, %92
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %91, 10
  %97 = or i1 %95, %96
  br i1 %97, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %116, !dbg !780

98:                                               ; preds = %originalBBpart28
  %99 = load i32, i32* @x.13
  %100 = load i32, i32* @y.14
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %98, %originalBB14alteredBB
  %107 = call i32 @chdir(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i64 0, i64 0)) #10, !dbg !783
  %108 = load i32, i32* @x.13
  %109 = load i32, i32* @y.14
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %116, !dbg !780

116:                                              ; preds = %originalBBpart216, %originalBBpart212
  %117 = phi i32 [ %89, %originalBBpart212 ], [ %107, %originalBBpart216 ], !dbg !780
  %118 = load i32, i32* @x.13
  %119 = load i32, i32* @y.14
  %120 = sub i32 %118, 1
  %121 = mul i32 %118, %120
  %122 = urem i32 %121, 2
  %123 = icmp eq i32 %122, 0
  %124 = icmp slt i32 %119, 10
  %125 = or i1 %123, %124
  br i1 %125, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %116, %originalBB18alteredBB
  %126 = icmp slt i32 %117, 0, !dbg !784
  %127 = load i32, i32* @x.13
  %128 = load i32, i32* @y.14
  %129 = sub i32 %127, 1
  %130 = mul i32 %127, %129
  %131 = urem i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %132, %133
  br i1 %134, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %126, label %135, label %158, !dbg !785

135:                                              ; preds = %originalBBpart220
  %136 = load i32, i32* @x.13
  %137 = load i32, i32* @y.14
  %138 = sub i32 %136, 1
  %139 = mul i32 %136, %138
  %140 = urem i32 %139, 2
  %141 = icmp eq i32 %140, 0
  %142 = icmp slt i32 %137, 10
  %143 = or i1 %141, %142
  br i1 %143, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %135, %originalBB22alteredBB
  %144 = call i32* @__errno_location() #15, !dbg !786
  %145 = load i32, i32* %144, align 4, !dbg !786
  %146 = call i8* @gettext(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.44, i64 0, i64 0)) #10, !dbg !786
  %147 = load i64, i64* %14, align 8, !dbg !786
  %148 = call i8* @nth_parent(i64 %147), !dbg !786
  %149 = call i8* @quote(i8* %148), !dbg !786
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %145, i8* %146, i8* %149), !dbg !786
  %150 = load i32, i32* @x.13
  %151 = load i32, i32* @y.14
  %152 = sub i32 %150, 1
  %153 = mul i32 %150, %152
  %154 = urem i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %155, %156
  br i1 %157, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  unreachable, !dbg !786

158:                                              ; preds = %originalBBpart220
  %159 = load i32, i32* @x.13
  %160 = load i32, i32* @y.14
  %161 = sub i32 %159, 1
  %162 = mul i32 %159, %161
  %163 = urem i32 %162, 2
  %164 = icmp eq i32 %163, 0
  %165 = icmp slt i32 %160, 10
  %166 = or i1 %164, %165
  br i1 %166, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %158, %originalBB26alteredBB
  %167 = load i32, i32* %16, align 4, !dbg !787
  %168 = icmp sle i32 0, %167, !dbg !789
  %169 = load i32, i32* @x.13
  %170 = load i32, i32* @y.14
  %171 = sub i32 %169, 1
  %172 = mul i32 %169, %171
  %173 = urem i32 %172, 2
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %174, %175
  br i1 %176, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %168, label %177, label %196, !dbg !790

177:                                              ; preds = %originalBBpart228
  %178 = load i32, i32* @x.13
  %179 = load i32, i32* @y.14
  %180 = sub i32 %178, 1
  %181 = mul i32 %178, %180
  %182 = urem i32 %181, 2
  %183 = icmp eq i32 %182, 0
  %184 = icmp slt i32 %179, 10
  %185 = or i1 %183, %184
  br i1 %185, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %177, %originalBB30alteredBB
  %186 = load i32, i32* %16, align 4, !dbg !791
  %187 = call i32 @fstat(i32 %186, %struct.stat* %17) #10, !dbg !792
  %188 = load i32, i32* @x.13
  %189 = load i32, i32* @y.14
  %190 = sub i32 %188, 1
  %191 = mul i32 %188, %190
  %192 = urem i32 %191, 2
  %193 = icmp eq i32 %192, 0
  %194 = icmp slt i32 %189, 10
  %195 = or i1 %193, %194
  br i1 %195, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %214, !dbg !790

196:                                              ; preds = %originalBBpart228
  %197 = load i32, i32* @x.13
  %198 = load i32, i32* @y.14
  %199 = sub i32 %197, 1
  %200 = mul i32 %197, %199
  %201 = urem i32 %200, 2
  %202 = icmp eq i32 %201, 0
  %203 = icmp slt i32 %198, 10
  %204 = or i1 %202, %203
  br i1 %204, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %196, %originalBB34alteredBB
  %205 = call i32 @stat(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i64 0, i64 0), %struct.stat* %17) #10, !dbg !793
  %206 = load i32, i32* @x.13
  %207 = load i32, i32* @y.14
  %208 = sub i32 %206, 1
  %209 = mul i32 %206, %208
  %210 = urem i32 %209, 2
  %211 = icmp eq i32 %210, 0
  %212 = icmp slt i32 %207, 10
  %213 = or i1 %211, %212
  br i1 %213, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %214, !dbg !790

214:                                              ; preds = %originalBBpart236, %originalBBpart232
  %215 = phi i32 [ %187, %originalBBpart232 ], [ %205, %originalBBpart236 ], !dbg !790
  %216 = load i32, i32* @x.13
  %217 = load i32, i32* @y.14
  %218 = sub i32 %216, 1
  %219 = mul i32 %216, %218
  %220 = urem i32 %219, 2
  %221 = icmp eq i32 %220, 0
  %222 = icmp slt i32 %217, 10
  %223 = or i1 %221, %222
  br i1 %223, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %214, %originalBB38alteredBB
  %224 = icmp slt i32 %215, 0, !dbg !794
  %225 = load i32, i32* @x.13
  %226 = load i32, i32* @y.14
  %227 = sub i32 %225, 1
  %228 = mul i32 %225, %227
  %229 = urem i32 %228, 2
  %230 = icmp eq i32 %229, 0
  %231 = icmp slt i32 %226, 10
  %232 = or i1 %230, %231
  br i1 %232, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br i1 %224, label %233, label %256, !dbg !795

233:                                              ; preds = %originalBBpart240
  %234 = load i32, i32* @x.13
  %235 = load i32, i32* @y.14
  %236 = sub i32 %234, 1
  %237 = mul i32 %234, %236
  %238 = urem i32 %237, 2
  %239 = icmp eq i32 %238, 0
  %240 = icmp slt i32 %235, 10
  %241 = or i1 %239, %240
  br i1 %241, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %233, %originalBB42alteredBB
  %242 = call i32* @__errno_location() #15, !dbg !796
  %243 = load i32, i32* %242, align 4, !dbg !796
  %244 = call i8* @gettext(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.41, i64 0, i64 0)) #10, !dbg !796
  %245 = load i64, i64* %14, align 8, !dbg !796
  %246 = call i8* @nth_parent(i64 %245), !dbg !796
  %247 = call i8* @quote(i8* %246), !dbg !796
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %243, i8* %244, i8* %247), !dbg !796
  %248 = load i32, i32* @x.13
  %249 = load i32, i32* @y.14
  %250 = sub i32 %248, 1
  %251 = mul i32 %248, %250
  %252 = urem i32 %251, 2
  %253 = icmp eq i32 %252, 0
  %254 = icmp slt i32 %249, 10
  %255 = or i1 %253, %254
  br i1 %255, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  unreachable, !dbg !796

256:                                              ; preds = %originalBBpart240
  %257 = load i32, i32* @x.13
  %258 = load i32, i32* @y.14
  %259 = sub i32 %257, 1
  %260 = mul i32 %257, %259
  %261 = urem i32 %260, 2
  %262 = icmp eq i32 %261, 0
  %263 = icmp slt i32 %258, 10
  %264 = or i1 %262, %263
  br i1 %264, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %256, %originalBB46alteredBB
  %265 = getelementptr inbounds %struct.stat, %struct.stat* %17, i32 0, i32 0, !dbg !797
  %266 = load i64, i64* %265, align 8, !dbg !797
  %267 = load %struct.stat*, %struct.stat** %12, align 8, !dbg !798
  %268 = getelementptr inbounds %struct.stat, %struct.stat* %267, i32 0, i32 0, !dbg !799
  %269 = load i64, i64* %268, align 8, !dbg !799
  %270 = icmp ne i64 %266, %269, !dbg !800
  %271 = zext i1 %270 to i8, !dbg !801
  store i8 %271, i8* %18, align 1, !dbg !801
  store i8 0, i8* %19, align 1, !dbg !802
  %272 = load i32, i32* @x.13
  %273 = load i32, i32* @y.14
  %274 = sub i32 %272, 1
  %275 = mul i32 %272, %274
  %276 = urem i32 %275, 2
  %277 = icmp eq i32 %276, 0
  %278 = icmp slt i32 %273, 10
  %279 = or i1 %277, %278
  br i1 %279, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br label %280, !dbg !803

280:                                              ; preds = %originalBBpart2209, %originalBBpart2193, %originalBBpart2181, %originalBBpart248
  call void @llvm.dbg.declare(metadata %struct.dirent** %20, metadata !804, metadata !DIExpression()), !dbg !816
  call void @llvm.dbg.declare(metadata %struct.stat* %21, metadata !817, metadata !DIExpression()), !dbg !818
  call void @llvm.dbg.declare(metadata i64* %22, metadata !819, metadata !DIExpression()), !dbg !820
  %281 = load i32, i32* @x.13
  %282 = load i32, i32* @y.14
  %283 = sub i32 %281, 1
  %284 = mul i32 %281, %283
  %285 = urem i32 %284, 2
  %286 = icmp eq i32 %285, 0
  %287 = icmp slt i32 %282, 10
  %288 = or i1 %286, %287
  br i1 %288, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %280, %originalBB50alteredBB
  %289 = call i32* @__errno_location() #15, !dbg !821
  store i32 0, i32* %289, align 4, !dbg !822
  %290 = load %struct.__dirstream*, %struct.__dirstream** %15, align 8, !dbg !823
  %291 = call %struct.dirent* @readdir_ignoring_dot_and_dotdot(%struct.__dirstream* %290), !dbg !825
  store %struct.dirent* %291, %struct.dirent** %20, align 8, !dbg !826
  %292 = icmp eq %struct.dirent* %291, null, !dbg !827
  %293 = load i32, i32* @x.13
  %294 = load i32, i32* @y.14
  %295 = sub i32 %293, 1
  %296 = mul i32 %293, %295
  %297 = urem i32 %296, 2
  %298 = icmp eq i32 %297, 0
  %299 = icmp slt i32 %294, 10
  %300 = or i1 %298, %299
  br i1 %300, label %originalBBpart252, label %originalBB50alteredBB

originalBBpart252:                                ; preds = %originalBB50
  br i1 %292, label %301, label %409, !dbg !828

301:                                              ; preds = %originalBBpart252
  %302 = load i32, i32* @x.13
  %303 = load i32, i32* @y.14
  %304 = sub i32 %302, 1
  %305 = mul i32 %302, %304
  %306 = urem i32 %305, 2
  %307 = icmp eq i32 %306, 0
  %308 = icmp slt i32 %303, 10
  %309 = or i1 %307, %308
  br i1 %309, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %301, %originalBB54alteredBB
  %310 = call i32* @__errno_location() #15, !dbg !829
  %311 = load i32, i32* %310, align 4, !dbg !829
  %312 = icmp ne i32 %311, 0, !dbg !829
  %313 = load i32, i32* @x.13
  %314 = load i32, i32* @y.14
  %315 = sub i32 %313, 1
  %316 = mul i32 %313, %315
  %317 = urem i32 %316, 2
  %318 = icmp eq i32 %317, 0
  %319 = icmp slt i32 %314, 10
  %320 = or i1 %318, %319
  br i1 %320, label %originalBBpart256, label %originalBB54alteredBB

originalBBpart256:                                ; preds = %originalBB54
  br i1 %312, label %321, label %392, !dbg !832

321:                                              ; preds = %originalBBpart256
  call void @llvm.dbg.declare(metadata i32* %23, metadata !833, metadata !DIExpression()), !dbg !835
  %322 = load i32, i32* @x.13
  %323 = load i32, i32* @y.14
  %324 = sub i32 %322, 1
  %325 = mul i32 %322, %324
  %326 = urem i32 %325, 2
  %327 = icmp eq i32 %326, 0
  %328 = icmp slt i32 %323, 10
  %329 = or i1 %327, %328
  br i1 %329, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %321, %originalBB58alteredBB
  %330 = call i32* @__errno_location() #15, !dbg !836
  %331 = load i32, i32* %330, align 4, !dbg !836
  store i32 %331, i32* %23, align 4, !dbg !835
  %332 = load %struct.__dirstream*, %struct.__dirstream** %15, align 8, !dbg !837
  %333 = call i32 @closedir(%struct.__dirstream* %332), !dbg !838
  %334 = load i32, i32* %23, align 4, !dbg !839
  %335 = call i32* @__errno_location() #15, !dbg !840
  store i32 %334, i32* %335, align 4, !dbg !841
  %336 = add i32 %331, 5
  %337 = add i32 %334, 2
  %338 = mul i32 %331, 4
  %339 = mul i32 %336, %336
  %340 = mul i32 %339, %339
  %341 = mul i32 %337, %337
  %342 = mul i32 %341, %341
  %343 = mul i32 %338, %338
  %344 = mul i32 %343, %343
  %345 = add i32 %340, %342
  %346 = sub i32 %345, %344
  %347 = mul i32 %346, 3
  %348 = add i32 %347, 4
  %349 = icmp eq i32 %348, 4
  %350 = load i32, i32* @x.13
  %351 = load i32, i32* @y.14
  %352 = sub i32 %350, 1
  %353 = mul i32 %350, %352
  %354 = urem i32 %353, 2
  %355 = icmp eq i32 %354, 0
  %356 = icmp slt i32 %351, 10
  %357 = or i1 %355, %356
  br i1 %357, label %originalBBpart2153, label %originalBB58alteredBB

originalBBpart2153:                               ; preds = %originalBB58
  br i1 %349, label %375, label %358

358:                                              ; preds = %originalBBpart2153
  %359 = load i32, i32* @x.13
  %360 = load i32, i32* @y.14
  %361 = sub i32 %359, 1
  %362 = mul i32 %359, %361
  %363 = urem i32 %362, 2
  %364 = icmp eq i32 %363, 0
  %365 = icmp slt i32 %360, 10
  %366 = or i1 %364, %365
  br i1 %366, label %originalBB155, label %originalBB155alteredBB

originalBB155:                                    ; preds = %358, %originalBB155alteredBB
  %367 = load i32, i32* @x.13
  %368 = load i32, i32* @y.14
  %369 = sub i32 %367, 1
  %370 = mul i32 %367, %369
  %371 = urem i32 %370, 2
  %372 = icmp eq i32 %371, 0
  %373 = icmp slt i32 %368, 10
  %374 = or i1 %372, %373
  br i1 %374, label %originalBBpart2157, label %originalBB155alteredBB

originalBBpart2157:                               ; preds = %originalBB155
  ret void

375:                                              ; preds = %originalBBpart2153
  %376 = load i32, i32* @x.13
  %377 = load i32, i32* @y.14
  %378 = sub i32 %376, 1
  %379 = mul i32 %376, %378
  %380 = urem i32 %379, 2
  %381 = icmp eq i32 %380, 0
  %382 = icmp slt i32 %377, 10
  %383 = or i1 %381, %382
  br i1 %383, label %originalBB159, label %originalBB159alteredBB

originalBB159:                                    ; preds = %375, %originalBB159alteredBB
  store %struct.__dirstream* null, %struct.__dirstream** %15, align 8, !dbg !842
  %384 = load i32, i32* @x.13
  %385 = load i32, i32* @y.14
  %386 = sub i32 %384, 1
  %387 = mul i32 %384, %386
  %388 = urem i32 %387, 2
  %389 = icmp eq i32 %388, 0
  %390 = icmp slt i32 %385, 10
  %391 = or i1 %389, %390
  br i1 %391, label %originalBBpart2161, label %originalBB159alteredBB

originalBBpart2161:                               ; preds = %originalBB159
  br label %392, !dbg !843

392:                                              ; preds = %originalBBpart2161, %originalBBpart256
  %393 = load i32, i32* @x.13
  %394 = load i32, i32* @y.14
  %395 = sub i32 %393, 1
  %396 = mul i32 %393, %395
  %397 = urem i32 %396, 2
  %398 = icmp eq i32 %397, 0
  %399 = icmp slt i32 %394, 10
  %400 = or i1 %398, %399
  br i1 %400, label %originalBB163, label %originalBB163alteredBB

originalBB163:                                    ; preds = %392, %originalBB163alteredBB
  %401 = load i32, i32* @x.13
  %402 = load i32, i32* @y.14
  %403 = sub i32 %401, 1
  %404 = mul i32 %401, %403
  %405 = urem i32 %404, 2
  %406 = icmp eq i32 %405, 0
  %407 = icmp slt i32 %402, 10
  %408 = or i1 %406, %407
  br i1 %408, label %originalBBpart2165, label %originalBB163alteredBB

originalBBpart2165:                               ; preds = %originalBB163
  br label %631, !dbg !844

409:                                              ; preds = %originalBBpart252
  %410 = load i32, i32* @x.13
  %411 = load i32, i32* @y.14
  %412 = sub i32 %410, 1
  %413 = mul i32 %410, %412
  %414 = urem i32 %413, 2
  %415 = icmp eq i32 %414, 0
  %416 = icmp slt i32 %411, 10
  %417 = or i1 %415, %416
  br i1 %417, label %originalBB167, label %originalBB167alteredBB

originalBB167:                                    ; preds = %409, %originalBB167alteredBB
  %418 = load %struct.dirent*, %struct.dirent** %20, align 8, !dbg !845
  %419 = getelementptr inbounds %struct.dirent, %struct.dirent* %418, i32 0, i32 0, !dbg !845
  %420 = load i64, i64* %419, align 8, !dbg !845
  store i64 %420, i64* %22, align 8, !dbg !846
  %421 = load i64, i64* %22, align 8, !dbg !847
  %422 = icmp eq i64 %421, 0, !dbg !849
  %423 = load i32, i32* @x.13
  %424 = load i32, i32* @y.14
  %425 = sub i32 %423, 1
  %426 = mul i32 %423, %425
  %427 = urem i32 %426, 2
  %428 = icmp eq i32 %427, 0
  %429 = icmp slt i32 %424, 10
  %430 = or i1 %428, %429
  br i1 %430, label %originalBBpart2169, label %originalBB167alteredBB

originalBBpart2169:                               ; preds = %originalBB167
  br i1 %422, label %450, label %431, !dbg !850

431:                                              ; preds = %originalBBpart2169
  %432 = load i32, i32* @x.13
  %433 = load i32, i32* @y.14
  %434 = sub i32 %432, 1
  %435 = mul i32 %432, %434
  %436 = urem i32 %435, 2
  %437 = icmp eq i32 %436, 0
  %438 = icmp slt i32 %433, 10
  %439 = or i1 %437, %438
  br i1 %439, label %originalBB171, label %originalBB171alteredBB

originalBB171:                                    ; preds = %431, %originalBB171alteredBB
  %440 = load i8, i8* %18, align 1, !dbg !851
  %441 = trunc i8 %440 to i1, !dbg !851
  %442 = load i32, i32* @x.13
  %443 = load i32, i32* @y.14
  %444 = sub i32 %442, 1
  %445 = mul i32 %442, %444
  %446 = urem i32 %445, 2
  %447 = icmp eq i32 %446, 0
  %448 = icmp slt i32 %443, 10
  %449 = or i1 %447, %448
  br i1 %449, label %originalBBpart2173, label %originalBB171alteredBB

originalBBpart2173:                               ; preds = %originalBB171
  br i1 %441, label %450, label %508, !dbg !852

450:                                              ; preds = %originalBBpart2173, %originalBBpart2169
  %451 = load i32, i32* @x.13
  %452 = load i32, i32* @y.14
  %453 = sub i32 %451, 1
  %454 = mul i32 %451, %453
  %455 = urem i32 %454, 2
  %456 = icmp eq i32 %455, 0
  %457 = icmp slt i32 %452, 10
  %458 = or i1 %456, %457
  br i1 %458, label %originalBB175, label %originalBB175alteredBB

originalBB175:                                    ; preds = %450, %originalBB175alteredBB
  %459 = load %struct.dirent*, %struct.dirent** %20, align 8, !dbg !853
  %460 = getelementptr inbounds %struct.dirent, %struct.dirent* %459, i32 0, i32 4, !dbg !856
  %461 = getelementptr inbounds [256 x i8], [256 x i8]* %460, i64 0, i64 0, !dbg !853
  %462 = call i32 @lstat(i8* %461, %struct.stat* %21) #10, !dbg !857
  %463 = icmp slt i32 %462, 0, !dbg !858
  %464 = load i32, i32* @x.13
  %465 = load i32, i32* @y.14
  %466 = sub i32 %464, 1
  %467 = mul i32 %464, %466
  %468 = urem i32 %467, 2
  %469 = icmp eq i32 %468, 0
  %470 = icmp slt i32 %465, 10
  %471 = or i1 %469, %470
  br i1 %471, label %originalBBpart2177, label %originalBB175alteredBB

originalBBpart2177:                               ; preds = %originalBB175
  br i1 %463, label %472, label %489, !dbg !859

472:                                              ; preds = %originalBBpart2177
  %473 = load i32, i32* @x.13
  %474 = load i32, i32* @y.14
  %475 = sub i32 %473, 1
  %476 = mul i32 %473, %475
  %477 = urem i32 %476, 2
  %478 = icmp eq i32 %477, 0
  %479 = icmp slt i32 %474, 10
  %480 = or i1 %478, %479
  br i1 %480, label %originalBB179, label %originalBB179alteredBB

originalBB179:                                    ; preds = %472, %originalBB179alteredBB
  %481 = load i32, i32* @x.13
  %482 = load i32, i32* @y.14
  %483 = sub i32 %481, 1
  %484 = mul i32 %481, %483
  %485 = urem i32 %484, 2
  %486 = icmp eq i32 %485, 0
  %487 = icmp slt i32 %482, 10
  %488 = or i1 %486, %487
  br i1 %488, label %originalBBpart2181, label %originalBB179alteredBB

originalBBpart2181:                               ; preds = %originalBB179
  br label %280, !dbg !860, !llvm.loop !862

489:                                              ; preds = %originalBBpart2177
  %490 = load i32, i32* @x.13
  %491 = load i32, i32* @y.14
  %492 = sub i32 %490, 1
  %493 = mul i32 %490, %492
  %494 = urem i32 %493, 2
  %495 = icmp eq i32 %494, 0
  %496 = icmp slt i32 %491, 10
  %497 = or i1 %495, %496
  br i1 %497, label %originalBB183, label %originalBB183alteredBB

originalBB183:                                    ; preds = %489, %originalBB183alteredBB
  %498 = getelementptr inbounds %struct.stat, %struct.stat* %21, i32 0, i32 1, !dbg !864
  %499 = load i64, i64* %498, align 8, !dbg !864
  store i64 %499, i64* %22, align 8, !dbg !865
  %500 = load i32, i32* @x.13
  %501 = load i32, i32* @y.14
  %502 = sub i32 %500, 1
  %503 = mul i32 %500, %502
  %504 = urem i32 %503, 2
  %505 = icmp eq i32 %504, 0
  %506 = icmp slt i32 %501, 10
  %507 = or i1 %505, %506
  br i1 %507, label %originalBBpart2185, label %originalBB183alteredBB

originalBBpart2185:                               ; preds = %originalBB183
  br label %508, !dbg !866

508:                                              ; preds = %originalBBpart2185, %originalBBpart2173
  %509 = load i32, i32* @x.13
  %510 = load i32, i32* @y.14
  %511 = sub i32 %509, 1
  %512 = mul i32 %509, %511
  %513 = urem i32 %512, 2
  %514 = icmp eq i32 %513, 0
  %515 = icmp slt i32 %510, 10
  %516 = or i1 %514, %515
  br i1 %516, label %originalBB187, label %originalBB187alteredBB

originalBB187:                                    ; preds = %508, %originalBB187alteredBB
  %517 = load i64, i64* %22, align 8, !dbg !867
  %518 = load %struct.stat*, %struct.stat** %12, align 8, !dbg !869
  %519 = getelementptr inbounds %struct.stat, %struct.stat* %518, i32 0, i32 1, !dbg !870
  %520 = load i64, i64* %519, align 8, !dbg !870
  %521 = icmp ne i64 %517, %520, !dbg !871
  %522 = load i32, i32* @x.13
  %523 = load i32, i32* @y.14
  %524 = sub i32 %522, 1
  %525 = mul i32 %522, %524
  %526 = urem i32 %525, 2
  %527 = icmp eq i32 %526, 0
  %528 = icmp slt i32 %523, 10
  %529 = or i1 %527, %528
  br i1 %529, label %originalBBpart2189, label %originalBB187alteredBB

originalBBpart2189:                               ; preds = %originalBB187
  br i1 %521, label %530, label %547, !dbg !872

530:                                              ; preds = %originalBBpart2189
  %531 = load i32, i32* @x.13
  %532 = load i32, i32* @y.14
  %533 = sub i32 %531, 1
  %534 = mul i32 %531, %533
  %535 = urem i32 %534, 2
  %536 = icmp eq i32 %535, 0
  %537 = icmp slt i32 %532, 10
  %538 = or i1 %536, %537
  br i1 %538, label %originalBB191, label %originalBB191alteredBB

originalBB191:                                    ; preds = %530, %originalBB191alteredBB
  %539 = load i32, i32* @x.13
  %540 = load i32, i32* @y.14
  %541 = sub i32 %539, 1
  %542 = mul i32 %539, %541
  %543 = urem i32 %542, 2
  %544 = icmp eq i32 %543, 0
  %545 = icmp slt i32 %540, 10
  %546 = or i1 %544, %545
  br i1 %546, label %originalBBpart2193, label %originalBB191alteredBB

originalBBpart2193:                               ; preds = %originalBB191
  br label %280, !dbg !873, !llvm.loop !862

547:                                              ; preds = %originalBBpart2189
  %548 = load i32, i32* @x.13
  %549 = load i32, i32* @y.14
  %550 = sub i32 %548, 1
  %551 = mul i32 %548, %550
  %552 = urem i32 %551, 2
  %553 = icmp eq i32 %552, 0
  %554 = icmp slt i32 %549, 10
  %555 = or i1 %553, %554
  br i1 %555, label %originalBB195, label %originalBB195alteredBB

originalBB195:                                    ; preds = %547, %originalBB195alteredBB
  %556 = load i8, i8* %18, align 1, !dbg !874
  %557 = trunc i8 %556 to i1, !dbg !874
  %558 = load i32, i32* @x.13
  %559 = load i32, i32* @y.14
  %560 = sub i32 %558, 1
  %561 = mul i32 %558, %560
  %562 = urem i32 %561, 2
  %563 = icmp eq i32 %562, 0
  %564 = icmp slt i32 %559, 10
  %565 = or i1 %563, %564
  br i1 %565, label %originalBBpart2197, label %originalBB195alteredBB

originalBBpart2197:                               ; preds = %originalBB195
  br i1 %557, label %566, label %589, !dbg !876

566:                                              ; preds = %originalBBpart2197
  %567 = load i32, i32* @x.13
  %568 = load i32, i32* @y.14
  %569 = sub i32 %567, 1
  %570 = mul i32 %567, %569
  %571 = urem i32 %570, 2
  %572 = icmp eq i32 %571, 0
  %573 = icmp slt i32 %568, 10
  %574 = or i1 %572, %573
  br i1 %574, label %originalBB199, label %originalBB199alteredBB

originalBB199:                                    ; preds = %566, %originalBB199alteredBB
  %575 = getelementptr inbounds %struct.stat, %struct.stat* %21, i32 0, i32 0, !dbg !877
  %576 = load i64, i64* %575, align 8, !dbg !877
  %577 = load %struct.stat*, %struct.stat** %12, align 8, !dbg !878
  %578 = getelementptr inbounds %struct.stat, %struct.stat* %577, i32 0, i32 0, !dbg !879
  %579 = load i64, i64* %578, align 8, !dbg !879
  %580 = icmp eq i64 %576, %579, !dbg !880
  %581 = load i32, i32* @x.13
  %582 = load i32, i32* @y.14
  %583 = sub i32 %581, 1
  %584 = mul i32 %581, %583
  %585 = urem i32 %584, 2
  %586 = icmp eq i32 %585, 0
  %587 = icmp slt i32 %582, 10
  %588 = or i1 %586, %587
  br i1 %588, label %originalBBpart2201, label %originalBB199alteredBB

originalBBpart2201:                               ; preds = %originalBB199
  br i1 %580, label %589, label %614, !dbg !881

589:                                              ; preds = %originalBBpart2201, %originalBBpart2197
  %590 = load i32, i32* @x.13
  %591 = load i32, i32* @y.14
  %592 = sub i32 %590, 1
  %593 = mul i32 %590, %592
  %594 = urem i32 %593, 2
  %595 = icmp eq i32 %594, 0
  %596 = icmp slt i32 %591, 10
  %597 = or i1 %595, %596
  br i1 %597, label %originalBB203, label %originalBB203alteredBB

originalBB203:                                    ; preds = %589, %originalBB203alteredBB
  %598 = load %struct.file_name*, %struct.file_name** %13, align 8, !dbg !882
  %599 = load %struct.dirent*, %struct.dirent** %20, align 8, !dbg !884
  %600 = getelementptr inbounds %struct.dirent, %struct.dirent* %599, i32 0, i32 4, !dbg !885
  %601 = getelementptr inbounds [256 x i8], [256 x i8]* %600, i64 0, i64 0, !dbg !884
  %602 = load %struct.dirent*, %struct.dirent** %20, align 8, !dbg !886
  %603 = getelementptr inbounds %struct.dirent, %struct.dirent* %602, i32 0, i32 4, !dbg !886
  %604 = getelementptr inbounds [256 x i8], [256 x i8]* %603, i64 0, i64 0, !dbg !886
  %605 = call i64 @strlen(i8* %604) #13, !dbg !886
  call void @file_name_prepend(%struct.file_name* %598, i8* %601, i64 %605), !dbg !887
  store i8 1, i8* %19, align 1, !dbg !888
  %606 = load i32, i32* @x.13
  %607 = load i32, i32* @y.14
  %608 = sub i32 %606, 1
  %609 = mul i32 %606, %608
  %610 = urem i32 %609, 2
  %611 = icmp eq i32 %610, 0
  %612 = icmp slt i32 %607, 10
  %613 = or i1 %611, %612
  br i1 %613, label %originalBBpart2205, label %originalBB203alteredBB

originalBBpart2205:                               ; preds = %originalBB203
  br label %631, !dbg !889

614:                                              ; preds = %originalBBpart2201
  %615 = load i32, i32* @x.13
  %616 = load i32, i32* @y.14
  %617 = sub i32 %615, 1
  %618 = mul i32 %615, %617
  %619 = urem i32 %618, 2
  %620 = icmp eq i32 %619, 0
  %621 = icmp slt i32 %616, 10
  %622 = or i1 %620, %621
  br i1 %622, label %originalBB207, label %originalBB207alteredBB

originalBB207:                                    ; preds = %614, %originalBB207alteredBB
  %623 = load i32, i32* @x.13
  %624 = load i32, i32* @y.14
  %625 = sub i32 %623, 1
  %626 = mul i32 %623, %625
  %627 = urem i32 %626, 2
  %628 = icmp eq i32 %627, 0
  %629 = icmp slt i32 %624, 10
  %630 = or i1 %628, %629
  br i1 %630, label %originalBBpart2209, label %originalBB207alteredBB

originalBBpart2209:                               ; preds = %originalBB207
  br label %280, !dbg !803, !llvm.loop !862

631:                                              ; preds = %originalBBpart2205, %originalBBpart2165
  %632 = load i32, i32* @x.13
  %633 = load i32, i32* @y.14
  %634 = sub i32 %632, 1
  %635 = mul i32 %632, %634
  %636 = urem i32 %635, 2
  %637 = icmp eq i32 %636, 0
  %638 = icmp slt i32 %633, 10
  %639 = or i1 %637, %638
  br i1 %639, label %originalBB211, label %originalBB211alteredBB

originalBB211:                                    ; preds = %631, %originalBB211alteredBB
  %640 = load %struct.__dirstream*, %struct.__dirstream** %15, align 8, !dbg !890
  %641 = icmp eq %struct.__dirstream* %640, null, !dbg !892
  %642 = load i32, i32* @x.13
  %643 = load i32, i32* @y.14
  %644 = sub i32 %642, 1
  %645 = mul i32 %642, %644
  %646 = urem i32 %645, 2
  %647 = icmp eq i32 %646, 0
  %648 = icmp slt i32 %643, 10
  %649 = or i1 %647, %648
  br i1 %649, label %originalBBpart2213, label %originalBB211alteredBB

originalBBpart2213:                               ; preds = %originalBB211
  br i1 %641, label %670, label %650, !dbg !893

650:                                              ; preds = %originalBBpart2213
  %651 = load i32, i32* @x.13
  %652 = load i32, i32* @y.14
  %653 = sub i32 %651, 1
  %654 = mul i32 %651, %653
  %655 = urem i32 %654, 2
  %656 = icmp eq i32 %655, 0
  %657 = icmp slt i32 %652, 10
  %658 = or i1 %656, %657
  br i1 %658, label %originalBB215, label %originalBB215alteredBB

originalBB215:                                    ; preds = %650, %originalBB215alteredBB
  %659 = load %struct.__dirstream*, %struct.__dirstream** %15, align 8, !dbg !894
  %660 = call i32 @closedir(%struct.__dirstream* %659), !dbg !895
  %661 = icmp ne i32 %660, 0, !dbg !896
  %662 = load i32, i32* @x.13
  %663 = load i32, i32* @y.14
  %664 = sub i32 %662, 1
  %665 = mul i32 %662, %664
  %666 = urem i32 %665, 2
  %667 = icmp eq i32 %666, 0
  %668 = icmp slt i32 %663, 10
  %669 = or i1 %667, %668
  br i1 %669, label %originalBBpart2217, label %originalBB215alteredBB

originalBBpart2217:                               ; preds = %originalBB215
  br i1 %661, label %670, label %693, !dbg !897

670:                                              ; preds = %originalBBpart2217, %originalBBpart2213
  %671 = load i32, i32* @x.13
  %672 = load i32, i32* @y.14
  %673 = sub i32 %671, 1
  %674 = mul i32 %671, %673
  %675 = urem i32 %674, 2
  %676 = icmp eq i32 %675, 0
  %677 = icmp slt i32 %672, 10
  %678 = or i1 %676, %677
  br i1 %678, label %originalBB219, label %originalBB219alteredBB

originalBB219:                                    ; preds = %670, %originalBB219alteredBB
  %679 = call i32* @__errno_location() #15, !dbg !898
  %680 = load i32, i32* %679, align 4, !dbg !898
  %681 = call i8* @gettext(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.45, i64 0, i64 0)) #10, !dbg !898
  %682 = load i64, i64* %14, align 8, !dbg !898
  %683 = call i8* @nth_parent(i64 %682), !dbg !898
  %684 = call i8* @quote(i8* %683), !dbg !898
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %680, i8* %681, i8* %684), !dbg !898
  %685 = load i32, i32* @x.13
  %686 = load i32, i32* @y.14
  %687 = sub i32 %685, 1
  %688 = mul i32 %685, %687
  %689 = urem i32 %688, 2
  %690 = icmp eq i32 %689, 0
  %691 = icmp slt i32 %686, 10
  %692 = or i1 %690, %691
  br i1 %692, label %originalBBpart2221, label %originalBB219alteredBB

originalBBpart2221:                               ; preds = %originalBB219
  unreachable, !dbg !898

693:                                              ; preds = %originalBBpart2217
  %694 = load i32, i32* @x.13
  %695 = load i32, i32* @y.14
  %696 = sub i32 %694, 1
  %697 = mul i32 %694, %696
  %698 = urem i32 %697, 2
  %699 = icmp eq i32 %698, 0
  %700 = icmp slt i32 %695, 10
  %701 = or i1 %699, %700
  br i1 %701, label %originalBB223, label %originalBB223alteredBB

originalBB223:                                    ; preds = %693, %originalBB223alteredBB
  %702 = load i8, i8* %19, align 1, !dbg !900
  %703 = trunc i8 %702 to i1, !dbg !900
  %704 = load i32, i32* @x.13
  %705 = load i32, i32* @y.14
  %706 = sub i32 %704, 1
  %707 = mul i32 %704, %706
  %708 = urem i32 %707, 2
  %709 = icmp eq i32 %708, 0
  %710 = icmp slt i32 %705, 10
  %711 = or i1 %709, %710
  br i1 %711, label %originalBBpart2225, label %originalBB223alteredBB

originalBBpart2225:                               ; preds = %originalBB223
  br i1 %703, label %733, label %712, !dbg !902

712:                                              ; preds = %originalBBpart2225
  %713 = load i32, i32* @x.13
  %714 = load i32, i32* @y.14
  %715 = sub i32 %713, 1
  %716 = mul i32 %713, %715
  %717 = urem i32 %716, 2
  %718 = icmp eq i32 %717, 0
  %719 = icmp slt i32 %714, 10
  %720 = or i1 %718, %719
  br i1 %720, label %originalBB227, label %originalBB227alteredBB

originalBB227:                                    ; preds = %712, %originalBB227alteredBB
  %721 = call i8* @gettext(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.46, i64 0, i64 0)) #10, !dbg !903
  %722 = load i64, i64* %14, align 8, !dbg !903
  %723 = call i8* @nth_parent(i64 %722), !dbg !903
  %724 = call i8* @quote(i8* %723), !dbg !903
  call void (i32, i32, i8*, ...) @error(i32 1, i32 0, i8* %721, i8* %724), !dbg !903
  %725 = load i32, i32* @x.13
  %726 = load i32, i32* @y.14
  %727 = sub i32 %725, 1
  %728 = mul i32 %725, %727
  %729 = urem i32 %728, 2
  %730 = icmp eq i32 %729, 0
  %731 = icmp slt i32 %726, 10
  %732 = or i1 %730, %731
  br i1 %732, label %originalBBpart2229, label %originalBB227alteredBB

originalBBpart2229:                               ; preds = %originalBB227
  unreachable, !dbg !903

733:                                              ; preds = %originalBBpart2225
  %734 = load i32, i32* @x.13
  %735 = load i32, i32* @y.14
  %736 = sub i32 %734, 1
  %737 = mul i32 %734, %736
  %738 = urem i32 %737, 2
  %739 = icmp eq i32 %738, 0
  %740 = icmp slt i32 %735, 10
  %741 = or i1 %739, %740
  br i1 %741, label %originalBB231, label %originalBB231alteredBB

originalBB231:                                    ; preds = %733, %originalBB231alteredBB
  %742 = load %struct.stat*, %struct.stat** %12, align 8, !dbg !904
  %743 = bitcast %struct.stat* %742 to i8*, !dbg !905
  %744 = bitcast %struct.stat* %17 to i8*, !dbg !905
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %743, i8* align 8 %744, i64 144, i1 false), !dbg !905
  %745 = load i32, i32* @x.13
  %746 = load i32, i32* @y.14
  %747 = sub i32 %745, 1
  %748 = mul i32 %745, %747
  %749 = urem i32 %748, 2
  %750 = icmp eq i32 %749, 0
  %751 = icmp slt i32 %746, 10
  %752 = or i1 %750, %751
  br i1 %752, label %originalBBpart2233, label %originalBB231alteredBB

originalBBpart2233:                               ; preds = %originalBB231
  ret void, !dbg !906

originalBBalteredBB:                              ; preds = %originalBB, %3
  %753 = alloca %struct.stat*, align 8
  %754 = alloca %struct.file_name*, align 8
  %755 = alloca i64, align 8
  %756 = alloca %struct.__dirstream*, align 8
  %757 = alloca i32, align 4
  %758 = alloca %struct.stat, align 8
  %759 = alloca i8, align 1
  %760 = alloca i8, align 1
  %761 = alloca %struct.dirent*, align 8
  %762 = alloca %struct.stat, align 8
  %763 = alloca i64, align 8
  %764 = alloca i32, align 4
  store %struct.stat* %0, %struct.stat** %753, align 8
  call void @llvm.dbg.declare(metadata %struct.stat** %753, metadata !907, metadata !DIExpression()), !dbg !748
  store %struct.file_name* %1, %struct.file_name** %754, align 8
  call void @llvm.dbg.declare(metadata %struct.file_name** %754, metadata !951, metadata !DIExpression()), !dbg !750
  store i64 %2, i64* %755, align 8
  call void @llvm.dbg.declare(metadata i64* %755, metadata !952, metadata !DIExpression()), !dbg !752
  call void @llvm.dbg.declare(metadata %struct.__dirstream** %756, metadata !953, metadata !DIExpression()), !dbg !758
  call void @llvm.dbg.declare(metadata i32* %757, metadata !954, metadata !DIExpression()), !dbg !760
  call void @llvm.dbg.declare(metadata %struct.stat* %758, metadata !955, metadata !DIExpression()), !dbg !762
  call void @llvm.dbg.declare(metadata i8* %759, metadata !956, metadata !DIExpression()), !dbg !764
  call void @llvm.dbg.declare(metadata i8* %760, metadata !957, metadata !DIExpression()), !dbg !766
  %765 = call %struct.__dirstream* @opendir(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i64 0, i64 0)), !dbg !767
  store %struct.__dirstream* %765, %struct.__dirstream** %756, align 8, !dbg !768
  %766 = load %struct.__dirstream*, %struct.__dirstream** %756, align 8, !dbg !769
  %767 = icmp eq %struct.__dirstream* %766, null, !dbg !771
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %35
  %768 = call i32* @__errno_location() #15, !dbg !773
  %769 = load i32, i32* %768, align 4, !dbg !773
  %770 = call i8* @gettext(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.43, i64 0, i64 0)) #10, !dbg !773
  %771 = load i64, i64* %14, align 8, !dbg !773
  %772 = call i8* @nth_parent(i64 %771), !dbg !773
  %773 = call i8* @quote(i8* %772), !dbg !773
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %769, i8* %770, i8* %773), !dbg !773
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %58
  %774 = load %struct.__dirstream*, %struct.__dirstream** %15, align 8, !dbg !774
  %775 = call i32 @dirfd(%struct.__dirstream* %774) #10, !dbg !775
  store i32 %775, i32* %16, align 4, !dbg !776
  %776 = load i32, i32* %16, align 4, !dbg !777
  %777 = icmp sle i32 0, %776, !dbg !779
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %79
  %778 = load i32, i32* %16, align 4, !dbg !781
  %779 = call i32 @fchdir(i32 %778) #10, !dbg !782
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %98
  %780 = call i32 @chdir(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i64 0, i64 0)) #10, !dbg !783
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %116
  %781 = icmp slt i32 %117, 0, !dbg !784
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %135
  %782 = call i32* @__errno_location() #15, !dbg !786
  %783 = load i32, i32* %782, align 4, !dbg !786
  %784 = call i8* @gettext(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.44, i64 0, i64 0)) #10, !dbg !786
  %785 = load i64, i64* %14, align 8, !dbg !786
  %786 = call i8* @nth_parent(i64 %785), !dbg !786
  %787 = call i8* @quote(i8* %786), !dbg !786
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %783, i8* %784, i8* %787), !dbg !786
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %158
  %788 = load i32, i32* %16, align 4, !dbg !787
  %789 = icmp sle i32 0, %788, !dbg !789
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %177
  %790 = load i32, i32* %16, align 4, !dbg !791
  %791 = call i32 @fstat(i32 %790, %struct.stat* %17) #10, !dbg !792
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %196
  %792 = call i32 @stat(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i64 0, i64 0), %struct.stat* %17) #10, !dbg !793
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %214
  %793 = icmp slt i32 %215, 0, !dbg !794
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %233
  %794 = call i32* @__errno_location() #15, !dbg !796
  %795 = load i32, i32* %794, align 4, !dbg !796
  %796 = call i8* @gettext(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.41, i64 0, i64 0)) #10, !dbg !796
  %797 = load i64, i64* %14, align 8, !dbg !796
  %798 = call i8* @nth_parent(i64 %797), !dbg !796
  %799 = call i8* @quote(i8* %798), !dbg !796
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %795, i8* %796, i8* %799), !dbg !796
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %256
  %800 = getelementptr inbounds %struct.stat, %struct.stat* %17, i32 0, i32 0, !dbg !797
  %801 = load i64, i64* %800, align 8, !dbg !797
  %802 = load %struct.stat*, %struct.stat** %12, align 8, !dbg !798
  %803 = getelementptr inbounds %struct.stat, %struct.stat* %802, i32 0, i32 0, !dbg !799
  %804 = load i64, i64* %803, align 8, !dbg !799
  %805 = icmp ne i64 %801, %804, !dbg !800
  %806 = zext i1 %805 to i8, !dbg !801
  store i8 %806, i8* %18, align 1, !dbg !801
  store i8 0, i8* %19, align 1, !dbg !802
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %280
  %807 = call i32* @__errno_location() #15, !dbg !821
  store i32 0, i32* %807, align 4, !dbg !822
  %808 = load %struct.__dirstream*, %struct.__dirstream** %15, align 8, !dbg !823
  %809 = call %struct.dirent* @readdir_ignoring_dot_and_dotdot(%struct.__dirstream* %808), !dbg !825
  store %struct.dirent* %809, %struct.dirent** %20, align 8, !dbg !826
  %810 = icmp eq %struct.dirent* %809, null, !dbg !827
  br label %originalBB50

originalBB54alteredBB:                            ; preds = %originalBB54, %301
  %811 = call i32* @__errno_location() #15, !dbg !829
  %812 = load i32, i32* %811, align 4, !dbg !829
  %813 = icmp ne i32 %812, 0, !dbg !829
  br label %originalBB54

originalBB58alteredBB:                            ; preds = %originalBB58, %321
  %814 = call i32* @__errno_location() #15, !dbg !836
  %815 = load i32, i32* %814, align 4, !dbg !836
  store i32 %815, i32* %23, align 4, !dbg !835
  %816 = load %struct.__dirstream*, %struct.__dirstream** %15, align 8, !dbg !837
  %817 = call i32 @closedir(%struct.__dirstream* %816), !dbg !838
  %818 = load i32, i32* %23, align 4, !dbg !839
  %819 = call i32* @__errno_location() #15, !dbg !840
  store i32 %818, i32* %819, align 4, !dbg !841
  %_ = sub i32 %815, 5
  %gen = mul i32 %_, 5
  %_59 = sub i32 %815, 5
  %gen60 = mul i32 %_59, 5
  %_61 = shl i32 %815, 5
  %_62 = shl i32 %815, 5
  %_63 = shl i32 %815, 5
  %_64 = sub i32 0, %815
  %gen65 = add i32 %_64, 5
  %820 = add i32 %815, 5
  %_66 = sub i32 %818, 2
  %gen67 = mul i32 %_66, 2
  %_68 = sub i32 0, %818
  %gen69 = add i32 %_68, 2
  %_70 = shl i32 %818, 2
  %_71 = sub i32 0, %818
  %gen72 = add i32 %_71, 2
  %_73 = sub i32 %818, 2
  %gen74 = mul i32 %_73, 2
  %_75 = sub i32 %818, 2
  %gen76 = mul i32 %_75, 2
  %_77 = shl i32 %818, 2
  %821 = add i32 %818, 2
  %822 = mul i32 %815, 4
  %_78 = sub i32 0, %820
  %gen79 = add i32 %_78, %820
  %_80 = shl i32 %820, %820
  %_81 = sub i32 0, %820
  %gen82 = add i32 %_81, %820
  %_83 = sub i32 %820, %820
  %gen84 = mul i32 %_83, %820
  %_85 = shl i32 %820, %820
  %_86 = shl i32 %820, %820
  %_87 = shl i32 %820, %820
  %_88 = sub i32 %820, %820
  %gen89 = mul i32 %_88, %820
  %_90 = sub i32 %820, %820
  %gen91 = mul i32 %_90, %820
  %823 = mul i32 %820, %820
  %_92 = sub i32 0, %823
  %gen93 = add i32 %_92, %823
  %_94 = sub i32 %823, %823
  %gen95 = mul i32 %_94, %823
  %824 = mul i32 %823, %823
  %_96 = sub i32 %821, %821
  %gen97 = mul i32 %_96, %821
  %_98 = sub i32 %821, %821
  %gen99 = mul i32 %_98, %821
  %_100 = sub i32 %821, %821
  %gen101 = mul i32 %_100, %821
  %825 = mul i32 %821, %821
  %_102 = sub i32 %825, %825
  %gen103 = mul i32 %_102, %825
  %_104 = sub i32 0, %825
  %gen105 = add i32 %_104, %825
  %_106 = sub i32 0, %825
  %gen107 = add i32 %_106, %825
  %_108 = sub i32 %825, %825
  %gen109 = mul i32 %_108, %825
  %826 = mul i32 %825, %825
  %_110 = shl i32 %822, %822
  %_111 = sub i32 0, %822
  %gen112 = add i32 %_111, %822
  %827 = mul i32 %822, %822
  %_113 = sub i32 %827, %827
  %gen114 = mul i32 %_113, %827
  %_115 = sub i32 0, %827
  %gen116 = add i32 %_115, %827
  %_117 = shl i32 %827, %827
  %_118 = sub i32 0, %827
  %gen119 = add i32 %_118, %827
  %_120 = shl i32 %827, %827
  %828 = mul i32 %827, %827
  %829 = add i32 %824, %826
  %_121 = sub i32 0, %829
  %gen122 = add i32 %_121, %828
  %_123 = sub i32 %829, %828
  %gen124 = mul i32 %_123, %828
  %_125 = sub i32 0, %829
  %gen126 = add i32 %_125, %828
  %_127 = sub i32 0, %829
  %gen128 = add i32 %_127, %828
  %_129 = sub i32 %829, %828
  %gen130 = mul i32 %_129, %828
  %_131 = sub i32 %829, %828
  %gen132 = mul i32 %_131, %828
  %830 = sub i32 %829, %828
  %_133 = sub i32 0, %830
  %gen134 = add i32 %_133, 3
  %_135 = shl i32 %830, 3
  %_136 = sub i32 %830, 3
  %gen137 = mul i32 %_136, 3
  %_138 = sub i32 %830, 3
  %gen139 = mul i32 %_138, 3
  %831 = mul i32 %830, 3
  %_140 = shl i32 %831, 4
  %_141 = shl i32 %831, 4
  %_142 = sub i32 0, %831
  %gen143 = add i32 %_142, 4
  %_144 = sub i32 %831, 4
  %gen145 = mul i32 %_144, 4
  %_146 = shl i32 %831, 4
  %_147 = sub i32 %831, 4
  %gen148 = mul i32 %_147, 4
  %_149 = shl i32 %831, 4
  %_150 = sub i32 %831, 4
  %gen151 = mul i32 %_150, 4
  %832 = add i32 %831, 4
  %833 = icmp eq i32 %832, 4
  br label %originalBB58

originalBB155alteredBB:                           ; preds = %originalBB155, %358
  br label %originalBB155

originalBB159alteredBB:                           ; preds = %originalBB159, %375
  store %struct.__dirstream* null, %struct.__dirstream** %15, align 8, !dbg !842
  br label %originalBB159

originalBB163alteredBB:                           ; preds = %originalBB163, %392
  br label %originalBB163

originalBB167alteredBB:                           ; preds = %originalBB167, %409
  %834 = load %struct.dirent*, %struct.dirent** %20, align 8, !dbg !845
  %835 = getelementptr inbounds %struct.dirent, %struct.dirent* %834, i32 0, i32 0, !dbg !845
  %836 = load i64, i64* %835, align 8, !dbg !845
  store i64 %836, i64* %22, align 8, !dbg !846
  %837 = load i64, i64* %22, align 8, !dbg !847
  %838 = icmp eq i64 %837, 0, !dbg !849
  br label %originalBB167

originalBB171alteredBB:                           ; preds = %originalBB171, %431
  %839 = load i8, i8* %18, align 1, !dbg !851
  %840 = trunc i8 %839 to i1, !dbg !851
  br label %originalBB171

originalBB175alteredBB:                           ; preds = %originalBB175, %450
  %841 = load %struct.dirent*, %struct.dirent** %20, align 8, !dbg !853
  %842 = getelementptr inbounds %struct.dirent, %struct.dirent* %841, i32 0, i32 4, !dbg !856
  %843 = getelementptr inbounds [256 x i8], [256 x i8]* %842, i64 0, i64 0, !dbg !853
  %844 = call i32 @lstat(i8* %843, %struct.stat* %21) #10, !dbg !857
  %845 = icmp slt i32 %844, 0, !dbg !858
  br label %originalBB175

originalBB179alteredBB:                           ; preds = %originalBB179, %472
  br label %originalBB179

originalBB183alteredBB:                           ; preds = %originalBB183, %489
  %846 = getelementptr inbounds %struct.stat, %struct.stat* %21, i32 0, i32 1, !dbg !864
  %847 = load i64, i64* %846, align 8, !dbg !864
  store i64 %847, i64* %22, align 8, !dbg !865
  br label %originalBB183

originalBB187alteredBB:                           ; preds = %originalBB187, %508
  %848 = load i64, i64* %22, align 8, !dbg !867
  %849 = load %struct.stat*, %struct.stat** %12, align 8, !dbg !869
  %850 = getelementptr inbounds %struct.stat, %struct.stat* %849, i32 0, i32 1, !dbg !870
  %851 = load i64, i64* %850, align 8, !dbg !870
  %852 = icmp ne i64 %848, %851, !dbg !871
  br label %originalBB187

originalBB191alteredBB:                           ; preds = %originalBB191, %530
  br label %originalBB191

originalBB195alteredBB:                           ; preds = %originalBB195, %547
  %853 = load i8, i8* %18, align 1, !dbg !874
  %854 = trunc i8 %853 to i1, !dbg !874
  br label %originalBB195

originalBB199alteredBB:                           ; preds = %originalBB199, %566
  %855 = getelementptr inbounds %struct.stat, %struct.stat* %21, i32 0, i32 0, !dbg !877
  %856 = load i64, i64* %855, align 8, !dbg !877
  %857 = load %struct.stat*, %struct.stat** %12, align 8, !dbg !878
  %858 = getelementptr inbounds %struct.stat, %struct.stat* %857, i32 0, i32 0, !dbg !879
  %859 = load i64, i64* %858, align 8, !dbg !879
  %860 = icmp eq i64 %856, %859, !dbg !880
  br label %originalBB199

originalBB203alteredBB:                           ; preds = %originalBB203, %589
  %861 = load %struct.file_name*, %struct.file_name** %13, align 8, !dbg !882
  %862 = load %struct.dirent*, %struct.dirent** %20, align 8, !dbg !884
  %863 = getelementptr inbounds %struct.dirent, %struct.dirent* %862, i32 0, i32 4, !dbg !885
  %864 = getelementptr inbounds [256 x i8], [256 x i8]* %863, i64 0, i64 0, !dbg !884
  %865 = load %struct.dirent*, %struct.dirent** %20, align 8, !dbg !886
  %866 = getelementptr inbounds %struct.dirent, %struct.dirent* %865, i32 0, i32 4, !dbg !886
  %867 = getelementptr inbounds [256 x i8], [256 x i8]* %866, i64 0, i64 0, !dbg !886
  %868 = call i64 @strlen(i8* %867) #13, !dbg !886
  call void @file_name_prepend(%struct.file_name* %861, i8* %864, i64 %868), !dbg !887
  store i8 1, i8* %19, align 1, !dbg !888
  br label %originalBB203

originalBB207alteredBB:                           ; preds = %originalBB207, %614
  br label %originalBB207

originalBB211alteredBB:                           ; preds = %originalBB211, %631
  %869 = load %struct.__dirstream*, %struct.__dirstream** %15, align 8, !dbg !890
  %870 = icmp eq %struct.__dirstream* %869, null, !dbg !892
  br label %originalBB211

originalBB215alteredBB:                           ; preds = %originalBB215, %650
  %871 = load %struct.__dirstream*, %struct.__dirstream** %15, align 8, !dbg !894
  %872 = call i32 @closedir(%struct.__dirstream* %871), !dbg !895
  %873 = icmp ne i32 %872, 0, !dbg !896
  br label %originalBB215

originalBB219alteredBB:                           ; preds = %originalBB219, %670
  %874 = call i32* @__errno_location() #15, !dbg !898
  %875 = load i32, i32* %874, align 4, !dbg !898
  %876 = call i8* @gettext(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.45, i64 0, i64 0)) #10, !dbg !898
  %877 = load i64, i64* %14, align 8, !dbg !898
  %878 = call i8* @nth_parent(i64 %877), !dbg !898
  %879 = call i8* @quote(i8* %878), !dbg !898
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %875, i8* %876, i8* %879), !dbg !898
  br label %originalBB219

originalBB223alteredBB:                           ; preds = %originalBB223, %693
  %880 = load i8, i8* %19, align 1, !dbg !900
  %881 = trunc i8 %880 to i1, !dbg !900
  br label %originalBB223

originalBB227alteredBB:                           ; preds = %originalBB227, %712
  %882 = call i8* @gettext(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.46, i64 0, i64 0)) #10, !dbg !903
  %883 = load i64, i64* %14, align 8, !dbg !903
  %884 = call i8* @nth_parent(i64 %883), !dbg !903
  %885 = call i8* @quote(i8* %884), !dbg !903
  call void (i32, i32, i8*, ...) @error(i32 1, i32 0, i8* %882, i8* %885), !dbg !903
  br label %originalBB227

originalBB231alteredBB:                           ; preds = %originalBB231, %733
  %886 = load %struct.stat*, %struct.stat** %12, align 8, !dbg !904
  %887 = bitcast %struct.stat* %886 to i8*, !dbg !905
  %888 = bitcast %struct.stat* %17 to i8*, !dbg !905
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %887, i8* align 8 %888, i64 144, i1 false), !dbg !905
  br label %originalBB231
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @file_name_prepend(%struct.file_name*, i8*, i64) #4 !dbg !958 {
  %4 = load i32, i32* @x.15
  %5 = load i32, i32* @y.16
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca %struct.file_name*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i64, align 8
  %17 = alloca i8*, align 8
  %18 = alloca i64, align 8
  store %struct.file_name* %0, %struct.file_name** %12, align 8
  call void @llvm.dbg.declare(metadata %struct.file_name** %12, metadata !961, metadata !DIExpression()), !dbg !962
  store i8* %1, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !963, metadata !DIExpression()), !dbg !964
  store i64 %2, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !965, metadata !DIExpression()), !dbg !966
  call void @llvm.dbg.declare(metadata i64* %15, metadata !967, metadata !DIExpression()), !dbg !968
  %19 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !969
  %20 = getelementptr inbounds %struct.file_name, %struct.file_name* %19, i32 0, i32 2, !dbg !970
  %21 = load i8*, i8** %20, align 8, !dbg !970
  %22 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !971
  %23 = getelementptr inbounds %struct.file_name, %struct.file_name* %22, i32 0, i32 0, !dbg !972
  %24 = load i8*, i8** %23, align 8, !dbg !972
  %25 = ptrtoint i8* %21 to i64, !dbg !973
  %26 = ptrtoint i8* %24 to i64, !dbg !973
  %27 = sub i64 %25, %26, !dbg !973
  store i64 %27, i64* %15, align 8, !dbg !968
  %28 = load i64, i64* %15, align 8, !dbg !974
  %29 = load i64, i64* %14, align 8, !dbg !976
  %30 = add i64 1, %29, !dbg !977
  %31 = icmp ult i64 %28, %30, !dbg !978
  %32 = load i32, i32* @x.15
  %33 = load i32, i32* @y.16
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %31, label %40, label %98, !dbg !979

40:                                               ; preds = %originalBBpart2
  call void @llvm.dbg.declare(metadata i64* %16, metadata !980, metadata !DIExpression()), !dbg !982
  %41 = load i32, i32* @x.15
  %42 = load i32, i32* @y.16
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %40, %originalBB18alteredBB
  %49 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !983
  %50 = getelementptr inbounds %struct.file_name, %struct.file_name* %49, i32 0, i32 1, !dbg !984
  %51 = load i64, i64* %50, align 8, !dbg !984
  %52 = add i64 %51, 1, !dbg !985
  %53 = load i64, i64* %14, align 8, !dbg !986
  %54 = add i64 %52, %53, !dbg !987
  store i64 %54, i64* %16, align 8, !dbg !982
  call void @llvm.dbg.declare(metadata i8** %17, metadata !988, metadata !DIExpression()), !dbg !989
  %55 = load i64, i64* %16, align 8, !dbg !990
  %56 = call noalias i8* @xnmalloc(i64 2, i64 %55), !dbg !991
  store i8* %56, i8** %17, align 8, !dbg !989
  call void @llvm.dbg.declare(metadata i64* %18, metadata !992, metadata !DIExpression()), !dbg !993
  %57 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !994
  %58 = getelementptr inbounds %struct.file_name, %struct.file_name* %57, i32 0, i32 1, !dbg !995
  %59 = load i64, i64* %58, align 8, !dbg !995
  %60 = load i64, i64* %15, align 8, !dbg !996
  %61 = sub i64 %59, %60, !dbg !997
  store i64 %61, i64* %18, align 8, !dbg !993
  %62 = load i8*, i8** %17, align 8, !dbg !998
  %63 = load i64, i64* %16, align 8, !dbg !999
  %64 = mul i64 2, %63, !dbg !1000
  %65 = getelementptr inbounds i8, i8* %62, i64 %64, !dbg !1001
  %66 = load i64, i64* %18, align 8, !dbg !1002
  %67 = sub i64 0, %66, !dbg !1003
  %68 = getelementptr inbounds i8, i8* %65, i64 %67, !dbg !1003
  %69 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !1004
  %70 = getelementptr inbounds %struct.file_name, %struct.file_name* %69, i32 0, i32 2, !dbg !1005
  store i8* %68, i8** %70, align 8, !dbg !1006
  %71 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !1007
  %72 = getelementptr inbounds %struct.file_name, %struct.file_name* %71, i32 0, i32 2, !dbg !1008
  %73 = load i8*, i8** %72, align 8, !dbg !1008
  %74 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !1009
  %75 = getelementptr inbounds %struct.file_name, %struct.file_name* %74, i32 0, i32 0, !dbg !1010
  %76 = load i8*, i8** %75, align 8, !dbg !1010
  %77 = load i64, i64* %15, align 8, !dbg !1011
  %78 = getelementptr inbounds i8, i8* %76, i64 %77, !dbg !1012
  %79 = load i64, i64* %18, align 8, !dbg !1013
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %73, i8* align 1 %78, i64 %79, i1 false), !dbg !1014
  %80 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !1015
  %81 = getelementptr inbounds %struct.file_name, %struct.file_name* %80, i32 0, i32 0, !dbg !1016
  %82 = load i8*, i8** %81, align 8, !dbg !1016
  call void @free(i8* %82) #10, !dbg !1017
  %83 = load i8*, i8** %17, align 8, !dbg !1018
  %84 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !1019
  %85 = getelementptr inbounds %struct.file_name, %struct.file_name* %84, i32 0, i32 0, !dbg !1020
  store i8* %83, i8** %85, align 8, !dbg !1021
  %86 = load i64, i64* %16, align 8, !dbg !1022
  %87 = mul i64 2, %86, !dbg !1023
  %88 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !1024
  %89 = getelementptr inbounds %struct.file_name, %struct.file_name* %88, i32 0, i32 1, !dbg !1025
  store i64 %87, i64* %89, align 8, !dbg !1026
  %90 = load i32, i32* @x.15
  %91 = load i32, i32* @y.16
  %92 = sub i32 %90, 1
  %93 = mul i32 %90, %92
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %91, 10
  %97 = or i1 %95, %96
  br i1 %97, label %originalBBpart285, label %originalBB18alteredBB

originalBBpart285:                                ; preds = %originalBB18
  br label %98, !dbg !1027

98:                                               ; preds = %originalBBpart285, %originalBBpart2
  %99 = load i32, i32* @x.15
  %100 = load i32, i32* @y.16
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBB87, label %originalBB87alteredBB

originalBB87:                                     ; preds = %98, %originalBB87alteredBB
  %107 = load i64, i64* %14, align 8, !dbg !1028
  %108 = add i64 1, %107, !dbg !1029
  %109 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !1030
  %110 = getelementptr inbounds %struct.file_name, %struct.file_name* %109, i32 0, i32 2, !dbg !1031
  %111 = load i8*, i8** %110, align 8, !dbg !1032
  %112 = sub i64 0, %108, !dbg !1032
  %113 = getelementptr inbounds i8, i8* %111, i64 %112, !dbg !1032
  store i8* %113, i8** %110, align 8, !dbg !1032
  %114 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !1033
  %115 = getelementptr inbounds %struct.file_name, %struct.file_name* %114, i32 0, i32 2, !dbg !1034
  %116 = load i8*, i8** %115, align 8, !dbg !1034
  %117 = getelementptr inbounds i8, i8* %116, i64 0, !dbg !1033
  store i8 47, i8* %117, align 1, !dbg !1035
  %118 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !1036
  %119 = getelementptr inbounds %struct.file_name, %struct.file_name* %118, i32 0, i32 2, !dbg !1037
  %120 = load i8*, i8** %119, align 8, !dbg !1037
  %121 = getelementptr inbounds i8, i8* %120, i64 1, !dbg !1038
  %122 = load i8*, i8** %13, align 8, !dbg !1039
  %123 = load i64, i64* %14, align 8, !dbg !1040
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %121, i8* align 1 %122, i64 %123, i1 false), !dbg !1041
  %124 = load i32, i32* @x.15
  %125 = load i32, i32* @y.16
  %126 = sub i32 %124, 1
  %127 = mul i32 %124, %126
  %128 = urem i32 %127, 2
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %125, 10
  %131 = or i1 %129, %130
  br i1 %131, label %originalBBpart2107, label %originalBB87alteredBB

originalBBpart2107:                               ; preds = %originalBB87
  ret void, !dbg !1042

originalBBalteredBB:                              ; preds = %originalBB, %3
  %132 = alloca %struct.file_name*, align 8
  %133 = alloca i8*, align 8
  %134 = alloca i64, align 8
  %135 = alloca i64, align 8
  %136 = alloca i64, align 8
  %137 = alloca i8*, align 8
  %138 = alloca i64, align 8
  store %struct.file_name* %0, %struct.file_name** %132, align 8
  call void @llvm.dbg.declare(metadata %struct.file_name** %132, metadata !1043, metadata !DIExpression()), !dbg !962
  store i8* %1, i8** %133, align 8
  call void @llvm.dbg.declare(metadata i8** %133, metadata !1065, metadata !DIExpression()), !dbg !964
  store i64 %2, i64* %134, align 8
  call void @llvm.dbg.declare(metadata i64* %134, metadata !1066, metadata !DIExpression()), !dbg !966
  call void @llvm.dbg.declare(metadata i64* %135, metadata !1067, metadata !DIExpression()), !dbg !968
  %139 = load %struct.file_name*, %struct.file_name** %132, align 8, !dbg !969
  %140 = getelementptr inbounds %struct.file_name, %struct.file_name* %139, i32 0, i32 2, !dbg !970
  %141 = load i8*, i8** %140, align 8, !dbg !970
  %142 = load %struct.file_name*, %struct.file_name** %132, align 8, !dbg !971
  %143 = getelementptr inbounds %struct.file_name, %struct.file_name* %142, i32 0, i32 0, !dbg !972
  %144 = load i8*, i8** %143, align 8, !dbg !972
  %145 = ptrtoint i8* %141 to i64, !dbg !973
  %146 = ptrtoint i8* %144 to i64, !dbg !973
  %_ = sub i64 0, %145
  %gen = add i64 %_, %146
  %_1 = shl i64 %145, %146
  %_2 = sub i64 %145, %146
  %gen3 = mul i64 %_2, %146
  %_4 = sub i64 0, %145
  %gen5 = add i64 %_4, %146
  %_6 = shl i64 %145, %146
  %_7 = sub i64 0, %145
  %gen8 = add i64 %_7, %146
  %147 = sub i64 %145, %146, !dbg !973
  store i64 %147, i64* %135, align 8, !dbg !968
  %148 = load i64, i64* %135, align 8, !dbg !974
  %149 = load i64, i64* %134, align 8, !dbg !976
  %_9 = shl i64 1, %149
  %_10 = sub i64 1, %149
  %gen11 = mul i64 %_10, %149
  %_12 = sub i64 0, 1
  %gen13 = add i64 %_12, %149
  %_14 = shl i64 1, %149
  %_15 = shl i64 1, %149
  %_16 = sub i64 1, %149
  %gen17 = mul i64 %_16, %149
  %150 = add i64 1, %149, !dbg !977
  %151 = icmp ult i64 %148, %150, !dbg !978
  br label %originalBB

originalBB18alteredBB:                            ; preds = %originalBB18, %40
  %152 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !983
  %153 = getelementptr inbounds %struct.file_name, %struct.file_name* %152, i32 0, i32 1, !dbg !984
  %154 = load i64, i64* %153, align 8, !dbg !984
  %_19 = sub i64 0, %154
  %gen20 = add i64 %_19, 1
  %_21 = sub i64 %154, 1
  %gen22 = mul i64 %_21, 1
  %_23 = sub i64 %154, 1
  %gen24 = mul i64 %_23, 1
  %_25 = sub i64 0, %154
  %gen26 = add i64 %_25, 1
  %_27 = sub i64 0, %154
  %gen28 = add i64 %_27, 1
  %_29 = sub i64 %154, 1
  %gen30 = mul i64 %_29, 1
  %155 = add i64 %154, 1, !dbg !985
  %156 = load i64, i64* %14, align 8, !dbg !986
  %_31 = sub i64 %155, %156
  %gen32 = mul i64 %_31, %156
  %_33 = sub i64 0, %155
  %gen34 = add i64 %_33, %156
  %_35 = shl i64 %155, %156
  %_36 = sub i64 0, %155
  %gen37 = add i64 %_36, %156
  %_38 = sub i64 %155, %156
  %gen39 = mul i64 %_38, %156
  %_40 = sub i64 %155, %156
  %gen41 = mul i64 %_40, %156
  %_42 = sub i64 %155, %156
  %gen43 = mul i64 %_42, %156
  %_44 = shl i64 %155, %156
  %157 = add i64 %155, %156, !dbg !987
  store i64 %157, i64* %16, align 8, !dbg !982
  call void @llvm.dbg.declare(metadata !4, metadata !1068, metadata !DIExpression()), !dbg !989
  %158 = load i64, i64* %16, align 8, !dbg !990
  %159 = call noalias i8* @xnmalloc(i64 2, i64 %158), !dbg !991
  store i8* %159, i8** %17, align 8, !dbg !989
  call void @llvm.dbg.declare(metadata !4, metadata !1092, metadata !DIExpression()), !dbg !993
  %160 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !994
  %161 = getelementptr inbounds %struct.file_name, %struct.file_name* %160, i32 0, i32 1, !dbg !995
  %162 = load i64, i64* %161, align 8, !dbg !995
  %163 = load i64, i64* %15, align 8, !dbg !996
  %_45 = shl i64 %162, %163
  %_46 = sub i64 0, %162
  %gen47 = add i64 %_46, %163
  %_48 = sub i64 0, %162
  %gen49 = add i64 %_48, %163
  %_50 = sub i64 0, %162
  %gen51 = add i64 %_50, %163
  %_52 = sub i64 %162, %163
  %gen53 = mul i64 %_52, %163
  %_54 = sub i64 0, %162
  %gen55 = add i64 %_54, %163
  %_56 = sub i64 %162, %163
  %gen57 = mul i64 %_56, %163
  %_58 = sub i64 %162, %163
  %gen59 = mul i64 %_58, %163
  %164 = sub i64 %162, %163, !dbg !997
  store i64 %164, i64* %18, align 8, !dbg !993
  %165 = load i8*, i8** %17, align 8, !dbg !998
  %166 = load i64, i64* %16, align 8, !dbg !999
  %_60 = sub i64 0, 2
  %gen61 = add i64 %_60, %166
  %_62 = shl i64 2, %166
  %167 = mul i64 2, %166, !dbg !1000
  %168 = getelementptr inbounds i8, i8* %165, i64 %167, !dbg !1001
  %169 = load i64, i64* %18, align 8, !dbg !1002
  %_63 = shl i64 0, %169
  %_64 = sub i64 0, 0
  %gen65 = add i64 %_64, %169
  %_66 = shl i64 0, %169
  %_67 = shl i64 0, %169
  %_68 = shl i64 0, %169
  %_69 = sub i64 0, %169
  %gen70 = mul i64 %_69, %169
  %_71 = sub i64 0, %169
  %gen72 = mul i64 %_71, %169
  %_73 = sub i64 0, 0
  %gen74 = add i64 %_73, %169
  %170 = sub i64 0, %169, !dbg !1003
  %171 = getelementptr inbounds i8, i8* %168, i64 %170, !dbg !1003
  %172 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !1004
  %173 = getelementptr inbounds %struct.file_name, %struct.file_name* %172, i32 0, i32 2, !dbg !1005
  store i8* %171, i8** %173, align 8, !dbg !1006
  %174 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !1007
  %175 = getelementptr inbounds %struct.file_name, %struct.file_name* %174, i32 0, i32 2, !dbg !1008
  %176 = load i8*, i8** %175, align 8, !dbg !1008
  %177 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !1009
  %178 = getelementptr inbounds %struct.file_name, %struct.file_name* %177, i32 0, i32 0, !dbg !1010
  %179 = load i8*, i8** %178, align 8, !dbg !1010
  %180 = load i64, i64* %15, align 8, !dbg !1011
  %181 = getelementptr inbounds i8, i8* %179, i64 %180, !dbg !1012
  %182 = load i64, i64* %18, align 8, !dbg !1013
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %176, i8* align 1 %181, i64 %182, i1 false), !dbg !1014
  %183 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !1015
  %184 = getelementptr inbounds %struct.file_name, %struct.file_name* %183, i32 0, i32 0, !dbg !1016
  %185 = load i8*, i8** %184, align 8, !dbg !1016
  call void @free(i8* %185) #10, !dbg !1017
  %186 = load i8*, i8** %17, align 8, !dbg !1018
  %187 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !1019
  %188 = getelementptr inbounds %struct.file_name, %struct.file_name* %187, i32 0, i32 0, !dbg !1020
  store i8* %186, i8** %188, align 8, !dbg !1021
  %189 = load i64, i64* %16, align 8, !dbg !1022
  %_75 = sub i64 2, %189
  %gen76 = mul i64 %_75, %189
  %_77 = sub i64 2, %189
  %gen78 = mul i64 %_77, %189
  %_79 = shl i64 2, %189
  %_80 = sub i64 2, %189
  %gen81 = mul i64 %_80, %189
  %_82 = sub i64 2, %189
  %gen83 = mul i64 %_82, %189
  %190 = mul i64 2, %189, !dbg !1023
  %191 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !1024
  %192 = getelementptr inbounds %struct.file_name, %struct.file_name* %191, i32 0, i32 1, !dbg !1025
  store i64 %190, i64* %192, align 8, !dbg !1026
  br label %originalBB18

originalBB87alteredBB:                            ; preds = %originalBB87, %98
  %193 = load i64, i64* %14, align 8, !dbg !1028
  %_88 = shl i64 1, %193
  %_89 = shl i64 1, %193
  %_90 = shl i64 1, %193
  %_91 = sub i64 1, %193
  %gen92 = mul i64 %_91, %193
  %_93 = shl i64 1, %193
  %_94 = sub i64 0, 1
  %gen95 = add i64 %_94, %193
  %_96 = sub i64 1, %193
  %gen97 = mul i64 %_96, %193
  %194 = add i64 1, %193, !dbg !1029
  %195 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !1030
  %196 = getelementptr inbounds %struct.file_name, %struct.file_name* %195, i32 0, i32 2, !dbg !1031
  %197 = load i8*, i8** %196, align 8, !dbg !1032
  %_98 = shl i64 0, %194
  %_99 = sub i64 0, 0
  %gen100 = add i64 %_99, %194
  %_101 = sub i64 0, %194
  %gen102 = mul i64 %_101, %194
  %_103 = shl i64 0, %194
  %_104 = sub i64 0, %194
  %gen105 = mul i64 %_104, %194
  %198 = sub i64 0, %194, !dbg !1032
  %199 = getelementptr inbounds i8, i8* %197, i64 %198, !dbg !1032
  store i8* %199, i8** %196, align 8, !dbg !1032
  %200 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !1033
  %201 = getelementptr inbounds %struct.file_name, %struct.file_name* %200, i32 0, i32 2, !dbg !1034
  %202 = load i8*, i8** %201, align 8, !dbg !1034
  %203 = getelementptr inbounds i8, i8* %202, i64 0, !dbg !1033
  store i8 47, i8* %203, align 1, !dbg !1035
  %204 = load %struct.file_name*, %struct.file_name** %12, align 8, !dbg !1036
  %205 = getelementptr inbounds %struct.file_name, %struct.file_name* %204, i32 0, i32 2, !dbg !1037
  %206 = load i8*, i8** %205, align 8, !dbg !1037
  %207 = getelementptr inbounds i8, i8* %206, i64 1, !dbg !1038
  %208 = load i8*, i8** %13, align 8, !dbg !1039
  %209 = load i64, i64* %14, align 8, !dbg !1040
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %207, i8* align 1 %208, i64 %209, i1 false), !dbg !1041
  br label %originalBB87
}

declare dso_local %struct.__dirstream* @opendir(i8*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @nth_parent(i64) #4 !dbg !1093 {
  %2 = load i32, i32* @x.17
  %3 = load i32, i32* @y.18
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i64, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  store i64 %0, i64* %10, align 8
  call void @llvm.dbg.declare(metadata i64* %10, metadata !1096, metadata !DIExpression()), !dbg !1097
  call void @llvm.dbg.declare(metadata i8** %11, metadata !1098, metadata !DIExpression()), !dbg !1099
  %14 = load i64, i64* %10, align 8, !dbg !1100
  %15 = call noalias i8* @xnmalloc(i64 3, i64 %14), !dbg !1101
  store i8* %15, i8** %11, align 8, !dbg !1099
  call void @llvm.dbg.declare(metadata i8** %12, metadata !1102, metadata !DIExpression()), !dbg !1103
  %16 = load i8*, i8** %11, align 8, !dbg !1104
  store i8* %16, i8** %12, align 8, !dbg !1103
  call void @llvm.dbg.declare(metadata i64* %13, metadata !1105, metadata !DIExpression()), !dbg !1107
  store i64 0, i64* %13, align 8, !dbg !1107
  %17 = load i32, i32* @x.17
  %18 = load i32, i32* @y.18
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %25, !dbg !1108

25:                                               ; preds = %originalBBpart218, %originalBBpart2
  %26 = load i32, i32* @x.17
  %27 = load i32, i32* @y.18
  %28 = sub i32 %26, 1
  %29 = mul i32 %26, %28
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %31, %32
  br i1 %33, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %25, %originalBB1alteredBB
  %34 = load i64, i64* %13, align 8, !dbg !1109
  %35 = load i64, i64* %10, align 8, !dbg !1111
  %36 = icmp ult i64 %34, %35, !dbg !1112
  %37 = load i32, i32* @x.17
  %38 = load i32, i32* @y.18
  %39 = sub i32 %37, 1
  %40 = mul i32 %37, %39
  %41 = urem i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %38, 10
  %44 = or i1 %42, %43
  br i1 %44, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %36, label %45, label %84, !dbg !1113

45:                                               ; preds = %originalBBpart24
  %46 = load i32, i32* @x.17
  %47 = load i32, i32* @y.18
  %48 = sub i32 %46, 1
  %49 = mul i32 %46, %48
  %50 = urem i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %51, %52
  br i1 %53, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %45, %originalBB6alteredBB
  %54 = load i8*, i8** %12, align 8, !dbg !1114
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %54, i8* align 1 getelementptr inbounds ([4 x i8], [4 x i8]* @.str.47, i64 0, i64 0), i64 3, i1 false), !dbg !1116
  %55 = load i8*, i8** %12, align 8, !dbg !1117
  %56 = getelementptr inbounds i8, i8* %55, i64 3, !dbg !1117
  store i8* %56, i8** %12, align 8, !dbg !1117
  %57 = load i32, i32* @x.17
  %58 = load i32, i32* @y.18
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %65, !dbg !1118

65:                                               ; preds = %originalBBpart28
  %66 = load i32, i32* @x.17
  %67 = load i32, i32* @y.18
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %65, %originalBB10alteredBB
  %74 = load i64, i64* %13, align 8, !dbg !1119
  %75 = add i64 %74, 1, !dbg !1119
  store i64 %75, i64* %13, align 8, !dbg !1119
  %76 = load i32, i32* @x.17
  %77 = load i32, i32* @y.18
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBBpart218, label %originalBB10alteredBB

originalBBpart218:                                ; preds = %originalBB10
  br label %25, !dbg !1120, !llvm.loop !1121

84:                                               ; preds = %originalBBpart24
  %85 = load i32, i32* @x.17
  %86 = load i32, i32* @y.18
  %87 = sub i32 %85, 1
  %88 = mul i32 %85, %87
  %89 = urem i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %90, %91
  br i1 %92, label %originalBB20, label %originalBB20alteredBB

originalBB20:                                     ; preds = %84, %originalBB20alteredBB
  %93 = load i8*, i8** %12, align 8, !dbg !1123
  %94 = getelementptr inbounds i8, i8* %93, i64 -1, !dbg !1123
  store i8 0, i8* %94, align 1, !dbg !1124
  %95 = load i8*, i8** %11, align 8, !dbg !1125
  %96 = load i32, i32* @x.17
  %97 = load i32, i32* @y.18
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBBpart222, label %originalBB20alteredBB

originalBBpart222:                                ; preds = %originalBB20
  ret i8* %95, !dbg !1126

originalBBalteredBB:                              ; preds = %originalBB, %1
  %104 = alloca i64, align 8
  %105 = alloca i8*, align 8
  %106 = alloca i8*, align 8
  %107 = alloca i64, align 8
  store i64 %0, i64* %104, align 8
  call void @llvm.dbg.declare(metadata i64* %104, metadata !1127, metadata !DIExpression()), !dbg !1097
  call void @llvm.dbg.declare(metadata i8** %105, metadata !1141, metadata !DIExpression()), !dbg !1099
  %108 = load i64, i64* %104, align 8, !dbg !1100
  %109 = call noalias i8* @xnmalloc(i64 3, i64 %108), !dbg !1101
  store i8* %109, i8** %105, align 8, !dbg !1099
  call void @llvm.dbg.declare(metadata i8** %106, metadata !1142, metadata !DIExpression()), !dbg !1103
  %110 = load i8*, i8** %105, align 8, !dbg !1104
  store i8* %110, i8** %106, align 8, !dbg !1103
  call void @llvm.dbg.declare(metadata i64* %107, metadata !1143, metadata !DIExpression()), !dbg !1107
  store i64 0, i64* %107, align 8, !dbg !1107
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %25
  %111 = load i64, i64* %13, align 8, !dbg !1109
  %112 = load i64, i64* %10, align 8, !dbg !1111
  %113 = icmp ult i64 %111, %112, !dbg !1112
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %45
  %114 = load i8*, i8** %12, align 8, !dbg !1114
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %114, i8* align 1 getelementptr inbounds ([4 x i8], [4 x i8]* @.str.47, i64 0, i64 0), i64 3, i1 false), !dbg !1116
  %115 = load i8*, i8** %12, align 8, !dbg !1117
  %116 = getelementptr inbounds i8, i8* %115, i64 3, !dbg !1117
  store i8* %116, i8** %12, align 8, !dbg !1117
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %65
  %117 = load i64, i64* %13, align 8, !dbg !1119
  %_ = shl i64 %117, 1
  %_11 = sub i64 %117, 1
  %gen = mul i64 %_11, 1
  %_12 = shl i64 %117, 1
  %_13 = sub i64 0, %117
  %gen14 = add i64 %_13, 1
  %_15 = sub i64 0, %117
  %gen16 = add i64 %_15, 1
  %118 = add i64 %117, 1, !dbg !1119
  store i64 %118, i64* %13, align 8, !dbg !1119
  br label %originalBB10

originalBB20alteredBB:                            ; preds = %originalBB20, %84
  %119 = load i8*, i8** %12, align 8, !dbg !1123
  %120 = getelementptr inbounds i8, i8* %119, i64 -1, !dbg !1123
  store i8 0, i8* %120, align 1, !dbg !1124
  %121 = load i8*, i8** %11, align 8, !dbg !1125
  br label %originalBB20
}

; Function Attrs: nounwind
declare dso_local i32 @dirfd(%struct.__dirstream*) #2

; Function Attrs: nounwind
declare dso_local i32 @fchdir(i32) #2

; Function Attrs: nounwind
declare dso_local i32 @chdir(i8*) #2

; Function Attrs: nounwind
declare dso_local i32 @fstat(i32, %struct.stat*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.dirent* @readdir_ignoring_dot_and_dotdot(%struct.__dirstream*) #4 !dbg !1145 {
  %2 = load i32, i32* @x.19
  %3 = load i32, i32* @y.20
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct.__dirstream*, align 8
  %11 = alloca %struct.dirent*, align 8
  store %struct.__dirstream* %0, %struct.__dirstream** %10, align 8
  call void @llvm.dbg.declare(metadata %struct.__dirstream** %10, metadata !1148, metadata !DIExpression()), !dbg !1149
  %12 = load i32, i32* @x.19
  %13 = load i32, i32* @y.20
  %14 = sub i32 %12, 1
  %15 = mul i32 %12, %14
  %16 = urem i32 %15, 2
  %17 = icmp eq i32 %16, 0
  %18 = icmp slt i32 %13, 10
  %19 = or i1 %17, %18
  br i1 %19, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %20, !dbg !1150

20:                                               ; preds = %originalBBpart216, %originalBBpart2
  call void @llvm.dbg.declare(metadata %struct.dirent** %11, metadata !1151, metadata !DIExpression()), !dbg !1153
  %21 = load i32, i32* @x.19
  %22 = load i32, i32* @y.20
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %20, %originalBB1alteredBB
  %29 = load %struct.__dirstream*, %struct.__dirstream** %10, align 8, !dbg !1154
  %30 = call %struct.dirent* @readdir(%struct.__dirstream* %29), !dbg !1155
  store %struct.dirent* %30, %struct.dirent** %11, align 8, !dbg !1153
  %31 = load %struct.dirent*, %struct.dirent** %11, align 8, !dbg !1156
  %32 = icmp eq %struct.dirent* %31, null, !dbg !1158
  %33 = load i32, i32* @x.19
  %34 = load i32, i32* @y.20
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %32, label %62, label %41, !dbg !1159

41:                                               ; preds = %originalBBpart24
  %42 = load i32, i32* @x.19
  %43 = load i32, i32* @y.20
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %41, %originalBB6alteredBB
  %50 = load %struct.dirent*, %struct.dirent** %11, align 8, !dbg !1160
  %51 = getelementptr inbounds %struct.dirent, %struct.dirent* %50, i32 0, i32 4, !dbg !1161
  %52 = getelementptr inbounds [256 x i8], [256 x i8]* %51, i64 0, i64 0, !dbg !1160
  %53 = call zeroext i1 @dot_or_dotdot(i8* %52), !dbg !1162
  %54 = load i32, i32* @x.19
  %55 = load i32, i32* @y.20
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %53, label %80, label %62, !dbg !1163

62:                                               ; preds = %originalBBpart28, %originalBBpart24
  %63 = load i32, i32* @x.19
  %64 = load i32, i32* @y.20
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %62, %originalBB10alteredBB
  %71 = load %struct.dirent*, %struct.dirent** %11, align 8, !dbg !1164
  %72 = load i32, i32* @x.19
  %73 = load i32, i32* @y.20
  %74 = sub i32 %72, 1
  %75 = mul i32 %72, %74
  %76 = urem i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %77, %78
  br i1 %79, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  ret %struct.dirent* %71, !dbg !1165

80:                                               ; preds = %originalBBpart28
  %81 = load i32, i32* @x.19
  %82 = load i32, i32* @y.20
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %80, %originalBB14alteredBB
  %89 = load i32, i32* @x.19
  %90 = load i32, i32* @y.20
  %91 = sub i32 %89, 1
  %92 = mul i32 %89, %91
  %93 = urem i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %94, %95
  br i1 %96, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %20, !dbg !1150, !llvm.loop !1166

originalBBalteredBB:                              ; preds = %originalBB, %1
  %97 = alloca %struct.__dirstream*, align 8
  %98 = alloca %struct.dirent*, align 8
  store %struct.__dirstream* %0, %struct.__dirstream** %97, align 8
  call void @llvm.dbg.declare(metadata %struct.__dirstream** %97, metadata !1168, metadata !DIExpression()), !dbg !1149
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %20
  %99 = load %struct.__dirstream*, %struct.__dirstream** %10, align 8, !dbg !1154
  %100 = call %struct.dirent* @readdir(%struct.__dirstream* %99), !dbg !1155
  store %struct.dirent* %100, %struct.dirent** %11, align 8, !dbg !1153
  %101 = load %struct.dirent*, %struct.dirent** %11, align 8, !dbg !1156
  %102 = icmp eq %struct.dirent* %101, null, !dbg !1158
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %41
  %103 = load %struct.dirent*, %struct.dirent** %11, align 8, !dbg !1160
  %104 = getelementptr inbounds %struct.dirent, %struct.dirent* %103, i32 0, i32 4, !dbg !1161
  %105 = getelementptr inbounds [256 x i8], [256 x i8]* %104, i64 0, i64 0, !dbg !1160
  %106 = call zeroext i1 @dot_or_dotdot(i8* %105), !dbg !1162
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %62
  %107 = load %struct.dirent*, %struct.dirent** %11, align 8, !dbg !1164
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %80
  br label %originalBB14
}

declare dso_local i32 @closedir(%struct.__dirstream*) #3

; Function Attrs: nounwind
declare dso_local i32 @lstat(i8*, %struct.stat*) #2

; Function Attrs: nounwind readonly
declare dso_local i64 @strlen(i8*) #7

declare dso_local %struct.dirent* @readdir(%struct.__dirstream*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @dot_or_dotdot(i8*) #4 !dbg !1193 {
  %2 = load i32, i32* @x.21
  %3 = load i32, i32* @y.22
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i1, align 1
  %11 = alloca i8*, align 8
  %12 = alloca i8, align 1
  store i8* %0, i8** %11, align 8
  call void @llvm.dbg.declare(metadata i8** %11, metadata !1196, metadata !DIExpression()), !dbg !1197
  %13 = load i8*, i8** %11, align 8, !dbg !1198
  %14 = getelementptr inbounds i8, i8* %13, i64 0, !dbg !1198
  %15 = load i8, i8* %14, align 1, !dbg !1198
  %16 = sext i8 %15 to i32, !dbg !1198
  %17 = icmp eq i32 %16, 46, !dbg !1200
  %18 = load i32, i32* @x.21
  %19 = load i32, i32* @y.22
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %17, label %26, label %94, !dbg !1201

26:                                               ; preds = %originalBBpart2
  call void @llvm.dbg.declare(metadata i8* %12, metadata !1202, metadata !DIExpression()), !dbg !1204
  %27 = load i32, i32* @x.21
  %28 = load i32, i32* @y.22
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %26, %originalBB1alteredBB
  %35 = load i8*, i8** %11, align 8, !dbg !1205
  %36 = load i8*, i8** %11, align 8, !dbg !1206
  %37 = getelementptr inbounds i8, i8* %36, i64 1, !dbg !1206
  %38 = load i8, i8* %37, align 1, !dbg !1206
  %39 = sext i8 %38 to i32, !dbg !1206
  %40 = icmp eq i32 %39, 46, !dbg !1207
  %41 = zext i1 %40 to i32, !dbg !1207
  %42 = add nsw i32 %41, 1, !dbg !1208
  %43 = sext i32 %42 to i64, !dbg !1205
  %44 = getelementptr inbounds i8, i8* %35, i64 %43, !dbg !1205
  %45 = load i8, i8* %44, align 1, !dbg !1205
  store i8 %45, i8* %12, align 1, !dbg !1204
  %46 = load i8, i8* %12, align 1, !dbg !1209
  %47 = icmp ne i8 %46, 0, !dbg !1209
  %48 = load i32, i32* @x.21
  %49 = load i32, i32* @y.22
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBBpart216, label %originalBB1alteredBB

originalBBpart216:                                ; preds = %originalBB1
  br i1 %47, label %56, label %76, !dbg !1210

56:                                               ; preds = %originalBBpart216
  %57 = load i32, i32* @x.21
  %58 = load i32, i32* @y.22
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %56, %originalBB18alteredBB
  %65 = load i8, i8* %12, align 1, !dbg !1211
  %66 = sext i8 %65 to i32, !dbg !1211
  %67 = icmp eq i32 %66, 47, !dbg !1211
  %68 = load i32, i32* @x.21
  %69 = load i32, i32* @y.22
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %76, !dbg !1210

76:                                               ; preds = %originalBBpart220, %originalBBpart216
  %77 = phi i1 [ true, %originalBBpart216 ], [ %67, %originalBBpart220 ]
  %78 = load i32, i32* @x.21
  %79 = load i32, i32* @y.22
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %76, %originalBB22alteredBB
  store i1 %77, i1* %10, align 1, !dbg !1212
  %86 = load i32, i32* @x.21
  %87 = load i32, i32* @y.22
  %88 = sub i32 %86, 1
  %89 = mul i32 %86, %88
  %90 = urem i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %91, %92
  br i1 %93, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %111, !dbg !1212

94:                                               ; preds = %originalBBpart2
  %95 = load i32, i32* @x.21
  %96 = load i32, i32* @y.22
  %97 = sub i32 %95, 1
  %98 = mul i32 %95, %97
  %99 = urem i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %96, 10
  %102 = or i1 %100, %101
  br i1 %102, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %94, %originalBB26alteredBB
  store i1 false, i1* %10, align 1, !dbg !1213
  %103 = load i32, i32* @x.21
  %104 = load i32, i32* @y.22
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %111, !dbg !1213

111:                                              ; preds = %originalBBpart228, %originalBBpart224
  %112 = load i32, i32* @x.21
  %113 = load i32, i32* @y.22
  %114 = sub i32 %112, 1
  %115 = mul i32 %112, %114
  %116 = urem i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %113, 10
  %119 = or i1 %117, %118
  br i1 %119, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %111, %originalBB30alteredBB
  %120 = load i1, i1* %10, align 1, !dbg !1214
  %121 = load i32, i32* @x.21
  %122 = load i32, i32* @y.22
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  ret i1 %120, !dbg !1214

originalBBalteredBB:                              ; preds = %originalBB, %1
  %129 = alloca i1, align 1
  %130 = alloca i8*, align 8
  %131 = alloca i8, align 1
  store i8* %0, i8** %130, align 8
  call void @llvm.dbg.declare(metadata i8** %130, metadata !1215, metadata !DIExpression()), !dbg !1197
  %132 = load i8*, i8** %130, align 8, !dbg !1198
  %133 = getelementptr inbounds i8, i8* %132, i64 0, !dbg !1198
  %134 = load i8, i8* %133, align 1, !dbg !1198
  %135 = sext i8 %134 to i32, !dbg !1198
  %136 = icmp eq i32 %135, 46, !dbg !1200
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %26
  %137 = load i8*, i8** %11, align 8, !dbg !1205
  %138 = load i8*, i8** %11, align 8, !dbg !1206
  %139 = getelementptr inbounds i8, i8* %138, i64 1, !dbg !1206
  %140 = load i8, i8* %139, align 1, !dbg !1206
  %141 = sext i8 %140 to i32, !dbg !1206
  %142 = icmp eq i32 %141, 46, !dbg !1207
  %143 = zext i1 %142 to i32, !dbg !1207
  %_ = sub i32 %143, 1
  %gen = mul i32 %_, 1
  %_2 = sub i32 %143, 1
  %gen3 = mul i32 %_2, 1
  %_4 = shl i32 %143, 1
  %_5 = sub i32 0, %143
  %gen6 = add i32 %_5, 1
  %_7 = sub i32 0, %143
  %gen8 = add i32 %_7, 1
  %_9 = sub i32 0, %143
  %gen10 = add i32 %_9, 1
  %_11 = sub i32 %143, 1
  %gen12 = mul i32 %_11, 1
  %_13 = sub i32 %143, 1
  %gen14 = mul i32 %_13, 1
  %144 = add nsw i32 %143, 1, !dbg !1208
  %145 = sext i32 %144 to i64, !dbg !1205
  %146 = getelementptr inbounds i8, i8* %137, i64 %145, !dbg !1205
  %147 = load i8, i8* %146, align 1, !dbg !1205
  store i8 %147, i8* %12, align 1, !dbg !1204
  %148 = load i8, i8* %12, align 1, !dbg !1209
  %149 = icmp ne i8 %148, 0, !dbg !1209
  br label %originalBB1

originalBB18alteredBB:                            ; preds = %originalBB18, %56
  %150 = load i8, i8* %12, align 1, !dbg !1211
  %151 = sext i8 %150 to i32, !dbg !1211
  %152 = icmp eq i32 %151, 47, !dbg !1211
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %76
  store i1 %77, i1* %10, align 1, !dbg !1212
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %94
  store i1 false, i1* %10, align 1, !dbg !1213
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %111
  %153 = load i1, i1* %10, align 1, !dbg !1214
  br label %originalBB30
}

; Function Attrs: nounwind readonly
declare dso_local i8* @strstr(i8*, i8*) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal void @close_stdout() #4 !dbg !1229 {
  %1 = load i32, i32* @x.23
  %2 = load i32, i32* @y.24
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = alloca i8*, align 8
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1232
  %11 = call i32 @close_stream(%struct._IO_FILE* %10), !dbg !1234
  %12 = icmp ne i32 %11, 0, !dbg !1235
  %13 = load i32, i32* @x.23
  %14 = load i32, i32* @y.24
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %21, label %140, !dbg !1236

21:                                               ; preds = %originalBBpart2
  %22 = load i32, i32* @x.23
  %23 = load i32, i32* @y.24
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  %30 = load i8, i8* @ignore_EPIPE, align 1, !dbg !1237
  %31 = trunc i8 %30 to i1, !dbg !1237
  %32 = load i32, i32* @x.23
  %33 = load i32, i32* @y.24
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %31, label %40, label %60, !dbg !1238

40:                                               ; preds = %originalBBpart24
  %41 = load i32, i32* @x.23
  %42 = load i32, i32* @y.24
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %40, %originalBB6alteredBB
  %49 = call i32* @__errno_location() #15, !dbg !1239
  %50 = load i32, i32* %49, align 4, !dbg !1239
  %51 = icmp eq i32 %50, 32, !dbg !1240
  %52 = load i32, i32* @x.23
  %53 = load i32, i32* @y.24
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %51, label %140, label %60, !dbg !1241

60:                                               ; preds = %originalBBpart28, %originalBBpart24
  call void @llvm.dbg.declare(metadata i8** %9, metadata !1242, metadata !DIExpression()), !dbg !1244
  %61 = load i32, i32* @x.23
  %62 = load i32, i32* @y.24
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %60, %originalBB10alteredBB
  %69 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.51, i64 0, i64 0)) #10, !dbg !1245
  store i8* %69, i8** %9, align 8, !dbg !1244
  %70 = load i8*, i8** @file_name, align 8, !dbg !1246
  %71 = icmp ne i8* %70, null, !dbg !1246
  %72 = load i32, i32* @x.23
  %73 = load i32, i32* @y.24
  %74 = sub i32 %72, 1
  %75 = mul i32 %72, %74
  %76 = urem i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %77, %78
  br i1 %79, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %71, label %80, label %102, !dbg !1248

80:                                               ; preds = %originalBBpart212
  %81 = load i32, i32* @x.23
  %82 = load i32, i32* @y.24
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %80, %originalBB14alteredBB
  %89 = call i32* @__errno_location() #15, !dbg !1249
  %90 = load i32, i32* %89, align 4, !dbg !1249
  %91 = load i8*, i8** @file_name, align 8, !dbg !1250
  %92 = call i8* @quotearg_colon(i8* %91), !dbg !1251
  %93 = load i8*, i8** %9, align 8, !dbg !1252
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %90, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.52, i64 0, i64 0), i8* %92, i8* %93), !dbg !1253
  %94 = load i32, i32* @x.23
  %95 = load i32, i32* @y.24
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %122, !dbg !1253

102:                                              ; preds = %originalBBpart212
  %103 = load i32, i32* @x.23
  %104 = load i32, i32* @y.24
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %102, %originalBB18alteredBB
  %111 = call i32* @__errno_location() #15, !dbg !1254
  %112 = load i32, i32* %111, align 4, !dbg !1254
  %113 = load i8*, i8** %9, align 8, !dbg !1255
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %112, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.53, i64 0, i64 0), i8* %113), !dbg !1256
  %114 = load i32, i32* @x.23
  %115 = load i32, i32* @y.24
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %122

122:                                              ; preds = %originalBBpart220, %originalBBpart216
  %123 = load i32, i32* @x.23
  %124 = load i32, i32* @y.24
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %122, %originalBB22alteredBB
  %131 = load volatile i32, i32* @exit_failure, align 4, !dbg !1257
  call void @_exit(i32 %131) #14, !dbg !1258
  %132 = load i32, i32* @x.23
  %133 = load i32, i32* @y.24
  %134 = sub i32 %132, 1
  %135 = mul i32 %132, %134
  %136 = urem i32 %135, 2
  %137 = icmp eq i32 %136, 0
  %138 = icmp slt i32 %133, 10
  %139 = or i1 %137, %138
  br i1 %139, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  unreachable, !dbg !1258

140:                                              ; preds = %originalBBpart28, %originalBBpart2
  %141 = load i32, i32* @x.23
  %142 = load i32, i32* @y.24
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %140, %originalBB26alteredBB
  %149 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1259
  %150 = call i32 @close_stream(%struct._IO_FILE* %149), !dbg !1261
  %151 = icmp ne i32 %150, 0, !dbg !1262
  %152 = load i32, i32* @x.23
  %153 = load i32, i32* @y.24
  %154 = sub i32 %152, 1
  %155 = mul i32 %152, %154
  %156 = urem i32 %155, 2
  %157 = icmp eq i32 %156, 0
  %158 = icmp slt i32 %153, 10
  %159 = or i1 %157, %158
  br i1 %159, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %151, label %160, label %178, !dbg !1263

160:                                              ; preds = %originalBBpart228
  %161 = load i32, i32* @x.23
  %162 = load i32, i32* @y.24
  %163 = sub i32 %161, 1
  %164 = mul i32 %161, %163
  %165 = urem i32 %164, 2
  %166 = icmp eq i32 %165, 0
  %167 = icmp slt i32 %162, 10
  %168 = or i1 %166, %167
  br i1 %168, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %160, %originalBB30alteredBB
  %169 = load volatile i32, i32* @exit_failure, align 4, !dbg !1264
  call void @_exit(i32 %169) #14, !dbg !1265
  %170 = load i32, i32* @x.23
  %171 = load i32, i32* @y.24
  %172 = sub i32 %170, 1
  %173 = mul i32 %170, %172
  %174 = urem i32 %173, 2
  %175 = icmp eq i32 %174, 0
  %176 = icmp slt i32 %171, 10
  %177 = or i1 %175, %176
  br i1 %177, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  unreachable, !dbg !1265

178:                                              ; preds = %originalBBpart228
  %179 = load i32, i32* @x.23
  %180 = load i32, i32* @y.24
  %181 = sub i32 %179, 1
  %182 = mul i32 %179, %181
  %183 = urem i32 %182, 2
  %184 = icmp eq i32 %183, 0
  %185 = icmp slt i32 %180, 10
  %186 = or i1 %184, %185
  br i1 %186, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %178, %originalBB34alteredBB
  %187 = load i32, i32* @x.23
  %188 = load i32, i32* @y.24
  %189 = sub i32 %187, 1
  %190 = mul i32 %187, %189
  %191 = urem i32 %190, 2
  %192 = icmp eq i32 %191, 0
  %193 = icmp slt i32 %188, 10
  %194 = or i1 %192, %193
  br i1 %194, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  ret void, !dbg !1266

originalBBalteredBB:                              ; preds = %originalBB, %0
  %195 = alloca i8*, align 8
  %196 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1232
  %197 = call i32 @close_stream(%struct._IO_FILE* %196), !dbg !1234
  %198 = icmp ne i32 %197, 0, !dbg !1235
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  %199 = load i8, i8* @ignore_EPIPE, align 1, !dbg !1237
  %200 = trunc i8 %199 to i1, !dbg !1237
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %40
  %201 = call i32* @__errno_location() #15, !dbg !1239
  %202 = load i32, i32* %201, align 4, !dbg !1239
  %203 = icmp eq i32 %202, 32, !dbg !1240
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %60
  %204 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.51, i64 0, i64 0)) #10, !dbg !1245
  store i8* %204, i8** %9, align 8, !dbg !1244
  %205 = load i8*, i8** @file_name, align 8, !dbg !1246
  %206 = icmp ne i8* %205, null, !dbg !1246
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %80
  %207 = call i32* @__errno_location() #15, !dbg !1249
  %208 = load i32, i32* %207, align 4, !dbg !1249
  %209 = load i8*, i8** @file_name, align 8, !dbg !1250
  %210 = call i8* @quotearg_colon(i8* %209), !dbg !1251
  %211 = load i8*, i8** %9, align 8, !dbg !1252
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %208, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.52, i64 0, i64 0), i8* %210, i8* %211), !dbg !1253
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %102
  %212 = call i32* @__errno_location() #15, !dbg !1254
  %213 = load i32, i32* %212, align 4, !dbg !1254
  %214 = load i8*, i8** %9, align 8, !dbg !1255
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %213, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.53, i64 0, i64 0), i8* %214), !dbg !1256
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %122
  %215 = load volatile i32, i32* @exit_failure, align 4, !dbg !1257
  call void @_exit(i32 %215) #14, !dbg !1258
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %140
  %216 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1259
  %217 = call i32 @close_stream(%struct._IO_FILE* %216), !dbg !1261
  %218 = icmp ne i32 %217, 0, !dbg !1262
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %160
  %219 = load volatile i32, i32* @exit_failure, align 4, !dbg !1264
  call void @_exit(i32 %219) #14, !dbg !1265
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %178
  br label %originalBB34
}

; Function Attrs: noreturn
declare dso_local void @_exit(i32) #9

; Function Attrs: noinline nounwind optnone uwtable
define internal void @set_program_name(i8*) #4 !dbg !1267 {
  %2 = load i32, i32* @x.25
  %3 = load i32, i32* @y.26
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !1268, metadata !DIExpression()), !dbg !1269
  call void @llvm.dbg.declare(metadata i8** %11, metadata !1270, metadata !DIExpression()), !dbg !1271
  call void @llvm.dbg.declare(metadata i8** %12, metadata !1272, metadata !DIExpression()), !dbg !1273
  %13 = load i8*, i8** %10, align 8, !dbg !1274
  %14 = icmp eq i8* %13, null, !dbg !1276
  %15 = load i32, i32* @x.25
  %16 = load i32, i32* @y.26
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %14, label %23, label %42, !dbg !1277

23:                                               ; preds = %originalBBpart2
  %24 = load i32, i32* @x.25
  %25 = load i32, i32* @y.26
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %23, %originalBB1alteredBB
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1278
  %33 = call i32 @fputs(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.58, i64 0, i64 0), %struct._IO_FILE* %32), !dbg !1280
  call void @abort() #12, !dbg !1281
  %34 = load i32, i32* @x.25
  %35 = load i32, i32* @y.26
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  unreachable, !dbg !1281

42:                                               ; preds = %originalBBpart2
  %43 = load i32, i32* @x.25
  %44 = load i32, i32* @y.26
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %42, %originalBB6alteredBB
  %51 = load i8*, i8** %10, align 8, !dbg !1282
  %52 = call i8* @strrchr(i8* %51, i32 47) #13, !dbg !1283
  store i8* %52, i8** %11, align 8, !dbg !1284
  %53 = load i8*, i8** %11, align 8, !dbg !1285
  %54 = icmp ne i8* %53, null, !dbg !1286
  %55 = load i32, i32* @x.25
  %56 = load i32, i32* @y.26
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %54, label %63, label %82, !dbg !1285

63:                                               ; preds = %originalBBpart28
  %64 = load i32, i32* @x.25
  %65 = load i32, i32* @y.26
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %63, %originalBB10alteredBB
  %72 = load i8*, i8** %11, align 8, !dbg !1287
  %73 = getelementptr inbounds i8, i8* %72, i64 1, !dbg !1288
  %74 = load i32, i32* @x.25
  %75 = load i32, i32* @y.26
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %100, !dbg !1285

82:                                               ; preds = %originalBBpart28
  %83 = load i32, i32* @x.25
  %84 = load i32, i32* @y.26
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %82, %originalBB14alteredBB
  %91 = load i8*, i8** %10, align 8, !dbg !1289
  %92 = load i32, i32* @x.25
  %93 = load i32, i32* @y.26
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %100, !dbg !1285

100:                                              ; preds = %originalBBpart216, %originalBBpart212
  %101 = phi i8* [ %73, %originalBBpart212 ], [ %91, %originalBBpart216 ], !dbg !1285
  %102 = load i32, i32* @x.25
  %103 = load i32, i32* @y.26
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %100, %originalBB18alteredBB
  store i8* %101, i8** %12, align 8, !dbg !1290
  %110 = load i8*, i8** %12, align 8, !dbg !1291
  %111 = load i8*, i8** %10, align 8, !dbg !1293
  %112 = ptrtoint i8* %110 to i64, !dbg !1294
  %113 = ptrtoint i8* %111 to i64, !dbg !1294
  %114 = sub i64 %112, %113, !dbg !1294
  %115 = icmp sge i64 %114, 7, !dbg !1295
  %116 = load i32, i32* @x.25
  %117 = load i32, i32* @y.26
  %118 = sub i32 %116, 1
  %119 = mul i32 %116, %118
  %120 = urem i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %117, 10
  %123 = or i1 %121, %122
  br i1 %123, label %originalBBpart223, label %originalBB18alteredBB

originalBBpart223:                                ; preds = %originalBB18
  br i1 %115, label %124, label %203, !dbg !1296

124:                                              ; preds = %originalBBpart223
  %125 = load i32, i32* @x.25
  %126 = load i32, i32* @y.26
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBB25, label %originalBB25alteredBB

originalBB25:                                     ; preds = %124, %originalBB25alteredBB
  %133 = load i8*, i8** %12, align 8, !dbg !1297
  %134 = getelementptr inbounds i8, i8* %133, i64 -7, !dbg !1298
  %135 = call i32 @strncmp(i8* %134, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1.59, i64 0, i64 0), i64 7) #13, !dbg !1299
  %136 = icmp eq i32 %135, 0, !dbg !1300
  %137 = load i32, i32* @x.25
  %138 = load i32, i32* @y.26
  %139 = sub i32 %137, 1
  %140 = mul i32 %137, %139
  %141 = urem i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %142, %143
  br i1 %144, label %originalBBpart227, label %originalBB25alteredBB

originalBBpart227:                                ; preds = %originalBB25
  br i1 %136, label %145, label %203, !dbg !1301

145:                                              ; preds = %originalBBpart227
  %146 = load i32, i32* @x.25
  %147 = load i32, i32* @y.26
  %148 = sub i32 %146, 1
  %149 = mul i32 %146, %148
  %150 = urem i32 %149, 2
  %151 = icmp eq i32 %150, 0
  %152 = icmp slt i32 %147, 10
  %153 = or i1 %151, %152
  br i1 %153, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %145, %originalBB29alteredBB
  %154 = load i8*, i8** %12, align 8, !dbg !1302
  store i8* %154, i8** %10, align 8, !dbg !1304
  %155 = load i8*, i8** %12, align 8, !dbg !1305
  %156 = call i32 @strncmp(i8* %155, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.60, i64 0, i64 0), i64 3) #13, !dbg !1307
  %157 = icmp eq i32 %156, 0, !dbg !1308
  %158 = load i32, i32* @x.25
  %159 = load i32, i32* @y.26
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBBpart231, label %originalBB29alteredBB

originalBBpart231:                                ; preds = %originalBB29
  br i1 %157, label %166, label %186, !dbg !1309

166:                                              ; preds = %originalBBpart231
  %167 = load i32, i32* @x.25
  %168 = load i32, i32* @y.26
  %169 = sub i32 %167, 1
  %170 = mul i32 %167, %169
  %171 = urem i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %172, %173
  br i1 %174, label %originalBB33, label %originalBB33alteredBB

originalBB33:                                     ; preds = %166, %originalBB33alteredBB
  %175 = load i8*, i8** %12, align 8, !dbg !1310
  %176 = getelementptr inbounds i8, i8* %175, i64 3, !dbg !1312
  store i8* %176, i8** %10, align 8, !dbg !1313
  %177 = load i8*, i8** %10, align 8, !dbg !1314
  store i8* %177, i8** @program_invocation_short_name, align 8, !dbg !1315
  %178 = load i32, i32* @x.25
  %179 = load i32, i32* @y.26
  %180 = sub i32 %178, 1
  %181 = mul i32 %178, %180
  %182 = urem i32 %181, 2
  %183 = icmp eq i32 %182, 0
  %184 = icmp slt i32 %179, 10
  %185 = or i1 %183, %184
  br i1 %185, label %originalBBpart235, label %originalBB33alteredBB

originalBBpart235:                                ; preds = %originalBB33
  br label %186, !dbg !1316

186:                                              ; preds = %originalBBpart235, %originalBBpart231
  %187 = load i32, i32* @x.25
  %188 = load i32, i32* @y.26
  %189 = sub i32 %187, 1
  %190 = mul i32 %187, %189
  %191 = urem i32 %190, 2
  %192 = icmp eq i32 %191, 0
  %193 = icmp slt i32 %188, 10
  %194 = or i1 %192, %193
  br i1 %194, label %originalBB37, label %originalBB37alteredBB

originalBB37:                                     ; preds = %186, %originalBB37alteredBB
  %195 = load i32, i32* @x.25
  %196 = load i32, i32* @y.26
  %197 = sub i32 %195, 1
  %198 = mul i32 %195, %197
  %199 = urem i32 %198, 2
  %200 = icmp eq i32 %199, 0
  %201 = icmp slt i32 %196, 10
  %202 = or i1 %200, %201
  br i1 %202, label %originalBBpart239, label %originalBB37alteredBB

originalBBpart239:                                ; preds = %originalBB37
  br label %203, !dbg !1317

203:                                              ; preds = %originalBBpart239, %originalBBpart227, %originalBBpart223
  %204 = load i32, i32* @x.25
  %205 = load i32, i32* @y.26
  %206 = sub i32 %204, 1
  %207 = mul i32 %204, %206
  %208 = urem i32 %207, 2
  %209 = icmp eq i32 %208, 0
  %210 = icmp slt i32 %205, 10
  %211 = or i1 %209, %210
  br i1 %211, label %originalBB41, label %originalBB41alteredBB

originalBB41:                                     ; preds = %203, %originalBB41alteredBB
  %212 = load i8*, i8** %10, align 8, !dbg !1318
  store i8* %212, i8** @program_name, align 8, !dbg !1319
  %213 = load i8*, i8** %10, align 8, !dbg !1320
  store i8* %213, i8** @program_invocation_name, align 8, !dbg !1321
  %214 = load i32, i32* @x.25
  %215 = load i32, i32* @y.26
  %216 = sub i32 %214, 1
  %217 = mul i32 %214, %216
  %218 = urem i32 %217, 2
  %219 = icmp eq i32 %218, 0
  %220 = icmp slt i32 %215, 10
  %221 = or i1 %219, %220
  br i1 %221, label %originalBBpart243, label %originalBB41alteredBB

originalBBpart243:                                ; preds = %originalBB41
  ret void, !dbg !1322

originalBBalteredBB:                              ; preds = %originalBB, %1
  %222 = alloca i8*, align 8
  %223 = alloca i8*, align 8
  %224 = alloca i8*, align 8
  store i8* %0, i8** %222, align 8
  call void @llvm.dbg.declare(metadata i8** %222, metadata !1323, metadata !DIExpression()), !dbg !1269
  call void @llvm.dbg.declare(metadata i8** %223, metadata !1329, metadata !DIExpression()), !dbg !1271
  call void @llvm.dbg.declare(metadata i8** %224, metadata !1330, metadata !DIExpression()), !dbg !1273
  %225 = load i8*, i8** %222, align 8, !dbg !1274
  %226 = icmp eq i8* %225, null, !dbg !1276
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %23
  %227 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1278
  %228 = call i32 @fputs(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.58, i64 0, i64 0), %struct._IO_FILE* %227), !dbg !1280
  call void @abort() #12, !dbg !1281
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %42
  %229 = load i8*, i8** %10, align 8, !dbg !1282
  %230 = call i8* @strrchr(i8* %229, i32 47) #13, !dbg !1283
  store i8* %230, i8** %11, align 8, !dbg !1284
  %231 = load i8*, i8** %11, align 8, !dbg !1285
  %232 = icmp ne i8* %231, null, !dbg !1286
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %63
  %233 = load i8*, i8** %11, align 8, !dbg !1287
  %234 = getelementptr inbounds i8, i8* %233, i64 1, !dbg !1288
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %82
  %235 = load i8*, i8** %10, align 8, !dbg !1289
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %100
  store i8* %101, i8** %12, align 8, !dbg !1290
  %236 = load i8*, i8** %12, align 8, !dbg !1291
  %237 = load i8*, i8** %10, align 8, !dbg !1293
  %238 = ptrtoint i8* %236 to i64, !dbg !1294
  %239 = ptrtoint i8* %237 to i64, !dbg !1294
  %_ = sub i64 0, %238
  %gen = add i64 %_, %239
  %_19 = sub i64 %238, %239
  %gen20 = mul i64 %_19, %239
  %_21 = shl i64 %238, %239
  %240 = sub i64 %238, %239, !dbg !1294
  %241 = icmp sge i64 %240, 7, !dbg !1295
  br label %originalBB18

originalBB25alteredBB:                            ; preds = %originalBB25, %124
  %242 = load i8*, i8** %12, align 8, !dbg !1297
  %243 = getelementptr inbounds i8, i8* %242, i64 -7, !dbg !1298
  %244 = call i32 @strncmp(i8* %243, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1.59, i64 0, i64 0), i64 7) #13, !dbg !1299
  %245 = icmp eq i32 %244, 0, !dbg !1300
  br label %originalBB25

originalBB29alteredBB:                            ; preds = %originalBB29, %145
  %246 = load i8*, i8** %12, align 8, !dbg !1302
  store i8* %246, i8** %10, align 8, !dbg !1304
  %247 = load i8*, i8** %12, align 8, !dbg !1305
  %248 = call i32 @strncmp(i8* %247, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.60, i64 0, i64 0), i64 3) #13, !dbg !1307
  %249 = icmp eq i32 %248, 0, !dbg !1308
  br label %originalBB29

originalBB33alteredBB:                            ; preds = %originalBB33, %166
  %250 = load i8*, i8** %12, align 8, !dbg !1310
  %251 = getelementptr inbounds i8, i8* %250, i64 3, !dbg !1312
  store i8* %251, i8** %10, align 8, !dbg !1313
  %252 = load i8*, i8** %10, align 8, !dbg !1314
  store i8* %252, i8** @program_invocation_short_name, align 8, !dbg !1315
  br label %originalBB33

originalBB37alteredBB:                            ; preds = %originalBB37, %186
  br label %originalBB37

originalBB41alteredBB:                            ; preds = %originalBB41, %203
  %253 = load i8*, i8** %10, align 8, !dbg !1318
  store i8* %253, i8** @program_name, align 8, !dbg !1319
  %254 = load i8*, i8** %10, align 8, !dbg !1320
  store i8* %254, i8** @program_invocation_name, align 8, !dbg !1321
  br label %originalBB41
}

declare dso_local i32 @fputs(i8*, %struct._IO_FILE*) #3

; Function Attrs: noreturn nounwind
declare dso_local void @abort() #5

; Function Attrs: nounwind readonly
declare dso_local i8* @strrchr(i8*, i32) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @set_char_quoting(%struct.quoting_options*, i8 signext, i32) #4 !dbg !1331 {
  %4 = load i32, i32* @x.27
  %5 = load i32, i32* @y.28
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca %struct.quoting_options*, align 8
  %13 = alloca i8, align 1
  %14 = alloca i32, align 4
  %15 = alloca i8, align 1
  %16 = alloca i32*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  store %struct.quoting_options* %0, %struct.quoting_options** %12, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %12, metadata !1335, metadata !DIExpression()), !dbg !1336
  store i8 %1, i8* %13, align 1
  call void @llvm.dbg.declare(metadata i8* %13, metadata !1337, metadata !DIExpression()), !dbg !1338
  store i32 %2, i32* %14, align 4
  call void @llvm.dbg.declare(metadata i32* %14, metadata !1339, metadata !DIExpression()), !dbg !1340
  call void @llvm.dbg.declare(metadata i8* %15, metadata !1341, metadata !DIExpression()), !dbg !1342
  %19 = load i8, i8* %13, align 1, !dbg !1343
  store i8 %19, i8* %15, align 1, !dbg !1342
  call void @llvm.dbg.declare(metadata i32** %16, metadata !1344, metadata !DIExpression()), !dbg !1346
  %20 = load %struct.quoting_options*, %struct.quoting_options** %12, align 8, !dbg !1347
  %21 = icmp ne %struct.quoting_options* %20, null, !dbg !1347
  %22 = load i32, i32* @x.27
  %23 = load i32, i32* @y.28
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %21, label %30, label %48, !dbg !1347

30:                                               ; preds = %originalBBpart2
  %31 = load i32, i32* @x.27
  %32 = load i32, i32* @y.28
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %30, %originalBB1alteredBB
  %39 = load %struct.quoting_options*, %struct.quoting_options** %12, align 8, !dbg !1348
  %40 = load i32, i32* @x.27
  %41 = load i32, i32* @y.28
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %65, !dbg !1347

48:                                               ; preds = %originalBBpart2
  %49 = load i32, i32* @x.27
  %50 = load i32, i32* @y.28
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load i32, i32* @x.27
  %58 = load i32, i32* @y.28
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %65, !dbg !1347

65:                                               ; preds = %originalBBpart28, %originalBBpart24
  %66 = phi %struct.quoting_options* [ %39, %originalBBpart24 ], [ @default_quoting_options, %originalBBpart28 ], !dbg !1347
  %67 = load i32, i32* @x.27
  %68 = load i32, i32* @y.28
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %65, %originalBB10alteredBB
  %75 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %66, i32 0, i32 2, !dbg !1349
  %76 = getelementptr inbounds [8 x i32], [8 x i32]* %75, i64 0, i64 0, !dbg !1350
  %77 = load i8, i8* %15, align 1, !dbg !1351
  %78 = zext i8 %77 to i64, !dbg !1351
  %79 = udiv i64 %78, 32, !dbg !1352
  %80 = getelementptr inbounds i32, i32* %76, i64 %79, !dbg !1353
  store i32* %80, i32** %16, align 8, !dbg !1346
  call void @llvm.dbg.declare(metadata i32* %17, metadata !1354, metadata !DIExpression()), !dbg !1355
  %81 = load i8, i8* %15, align 1, !dbg !1356
  %82 = zext i8 %81 to i64, !dbg !1356
  %83 = urem i64 %82, 32, !dbg !1357
  %84 = trunc i64 %83 to i32, !dbg !1356
  store i32 %84, i32* %17, align 4, !dbg !1355
  call void @llvm.dbg.declare(metadata i32* %18, metadata !1358, metadata !DIExpression()), !dbg !1359
  %85 = load i32*, i32** %16, align 8, !dbg !1360
  %86 = load i32, i32* %85, align 4, !dbg !1361
  %87 = load i32, i32* %17, align 4, !dbg !1362
  %88 = lshr i32 %86, %87, !dbg !1363
  %89 = and i32 %88, 1, !dbg !1364
  store i32 %89, i32* %18, align 4, !dbg !1359
  %90 = load i32, i32* %14, align 4, !dbg !1365
  %91 = and i32 %90, 1, !dbg !1366
  %92 = load i32, i32* %18, align 4, !dbg !1367
  %93 = xor i32 %91, %92, !dbg !1368
  %94 = load i32, i32* %17, align 4, !dbg !1369
  %95 = shl i32 %93, %94, !dbg !1370
  %96 = load i32*, i32** %16, align 8, !dbg !1371
  %97 = load i32, i32* %96, align 4, !dbg !1372
  %98 = xor i32 %97, %95, !dbg !1372
  store i32 %98, i32* %96, align 4, !dbg !1372
  %99 = load i32, i32* %18, align 4, !dbg !1373
  %100 = load i32, i32* @x.27
  %101 = load i32, i32* @y.28
  %102 = sub i32 %100, 1
  %103 = mul i32 %100, %102
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %105, %106
  br i1 %107, label %originalBBpart275, label %originalBB10alteredBB

originalBBpart275:                                ; preds = %originalBB10
  ret i32 %99, !dbg !1374

originalBBalteredBB:                              ; preds = %originalBB, %3
  %108 = alloca %struct.quoting_options*, align 8
  %109 = alloca i8, align 1
  %110 = alloca i32, align 4
  %111 = alloca i8, align 1
  %112 = alloca i32*, align 8
  %113 = alloca i32, align 4
  %114 = alloca i32, align 4
  store %struct.quoting_options* %0, %struct.quoting_options** %108, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %108, metadata !1375, metadata !DIExpression()), !dbg !1336
  store i8 %1, i8* %109, align 1
  call void @llvm.dbg.declare(metadata i8* %109, metadata !1410, metadata !DIExpression()), !dbg !1338
  store i32 %2, i32* %110, align 4
  call void @llvm.dbg.declare(metadata i32* %110, metadata !1411, metadata !DIExpression()), !dbg !1340
  call void @llvm.dbg.declare(metadata i8* %111, metadata !1412, metadata !DIExpression()), !dbg !1342
  %115 = load i8, i8* %109, align 1, !dbg !1343
  store i8 %115, i8* %111, align 1, !dbg !1342
  call void @llvm.dbg.declare(metadata i32** %112, metadata !1413, metadata !DIExpression()), !dbg !1346
  %116 = load %struct.quoting_options*, %struct.quoting_options** %108, align 8, !dbg !1347
  %117 = icmp ne %struct.quoting_options* %116, null, !dbg !1347
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %30
  %118 = load %struct.quoting_options*, %struct.quoting_options** %12, align 8, !dbg !1348
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %65
  %119 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %66, i32 0, i32 2, !dbg !1349
  %120 = getelementptr inbounds [8 x i32], [8 x i32]* %119, i64 0, i64 0, !dbg !1350
  %121 = load i8, i8* %15, align 1, !dbg !1351
  %122 = zext i8 %121 to i64, !dbg !1351
  %_ = sub i64 0, %122
  %gen = add i64 %_, 32
  %_11 = sub i64 0, %122
  %gen12 = add i64 %_11, 32
  %_13 = sub i64 0, %122
  %gen14 = add i64 %_13, 32
  %_15 = shl i64 %122, 32
  %_16 = shl i64 %122, 32
  %123 = udiv i64 %122, 32, !dbg !1352
  %124 = getelementptr inbounds i32, i32* %120, i64 %123, !dbg !1353
  store i32* %124, i32** %16, align 8, !dbg !1346
  call void @llvm.dbg.declare(metadata !4, metadata !1414, metadata !DIExpression()), !dbg !1355
  %125 = load i8, i8* %15, align 1, !dbg !1356
  %126 = zext i8 %125 to i64, !dbg !1356
  %_17 = sub i64 0, %126
  %gen18 = add i64 %_17, 32
  %127 = urem i64 %126, 32, !dbg !1357
  %128 = trunc i64 %127 to i32, !dbg !1356
  store i32 %128, i32* %17, align 4, !dbg !1355
  call void @llvm.dbg.declare(metadata !4, metadata !1449, metadata !DIExpression()), !dbg !1359
  %129 = load i32*, i32** %16, align 8, !dbg !1360
  %130 = load i32, i32* %129, align 4, !dbg !1361
  %131 = load i32, i32* %17, align 4, !dbg !1362
  %_19 = sub i32 0, %130
  %gen20 = add i32 %_19, %131
  %_21 = shl i32 %130, %131
  %_22 = sub i32 %130, %131
  %gen23 = mul i32 %_22, %131
  %_24 = shl i32 %130, %131
  %132 = lshr i32 %130, %131, !dbg !1363
  %_25 = sub i32 0, %132
  %gen26 = add i32 %_25, 1
  %_27 = sub i32 0, %132
  %gen28 = add i32 %_27, 1
  %_29 = sub i32 %132, 1
  %gen30 = mul i32 %_29, 1
  %_31 = sub i32 0, %132
  %gen32 = add i32 %_31, 1
  %_33 = sub i32 0, %132
  %gen34 = add i32 %_33, 1
  %_35 = sub i32 %132, 1
  %gen36 = mul i32 %_35, 1
  %133 = and i32 %132, 1, !dbg !1364
  store i32 %133, i32* %18, align 4, !dbg !1359
  %134 = load i32, i32* %14, align 4, !dbg !1365
  %_37 = sub i32 %134, 1
  %gen38 = mul i32 %_37, 1
  %135 = and i32 %134, 1, !dbg !1366
  %136 = load i32, i32* %18, align 4, !dbg !1367
  %_39 = sub i32 0, %135
  %gen40 = add i32 %_39, %136
  %_41 = sub i32 %135, %136
  %gen42 = mul i32 %_41, %136
  %_43 = sub i32 0, %135
  %gen44 = add i32 %_43, %136
  %_45 = shl i32 %135, %136
  %137 = xor i32 %135, %136, !dbg !1368
  %138 = load i32, i32* %17, align 4, !dbg !1369
  %_46 = sub i32 %137, %138
  %gen47 = mul i32 %_46, %138
  %_48 = shl i32 %137, %138
  %_49 = shl i32 %137, %138
  %_50 = sub i32 %137, %138
  %gen51 = mul i32 %_50, %138
  %_52 = sub i32 %137, %138
  %gen53 = mul i32 %_52, %138
  %_54 = sub i32 %137, %138
  %gen55 = mul i32 %_54, %138
  %_56 = sub i32 0, %137
  %gen57 = add i32 %_56, %138
  %_58 = sub i32 0, %137
  %gen59 = add i32 %_58, %138
  %_60 = shl i32 %137, %138
  %139 = shl i32 %137, %138, !dbg !1370
  %140 = load i32*, i32** %16, align 8, !dbg !1371
  %141 = load i32, i32* %140, align 4, !dbg !1372
  %_61 = sub i32 0, %141
  %gen62 = add i32 %_61, %139
  %_63 = sub i32 %141, %139
  %gen64 = mul i32 %_63, %139
  %_65 = sub i32 %141, %139
  %gen66 = mul i32 %_65, %139
  %_67 = shl i32 %141, %139
  %_68 = sub i32 0, %141
  %gen69 = add i32 %_68, %139
  %_70 = shl i32 %141, %139
  %_71 = sub i32 0, %141
  %gen72 = add i32 %_71, %139
  %_73 = shl i32 %141, %139
  %142 = xor i32 %141, %139, !dbg !1372
  store i32 %142, i32* %140, align 4, !dbg !1372
  %143 = load i32, i32* %18, align 4, !dbg !1373
  br label %originalBB10
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_n_style(i32, i32, i8*) #4 !dbg !1450 {
  %4 = load i32, i32* @x.29
  %5 = load i32, i32* @y.30
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca %struct.quoting_options, align 8
  store i32 %0, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !1453, metadata !DIExpression()), !dbg !1454
  store i32 %1, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !1455, metadata !DIExpression()), !dbg !1456
  store i8* %2, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !1457, metadata !DIExpression()), !dbg !1458
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %15, metadata !1459, metadata !DIExpression()), !dbg !1461
  %16 = load i32, i32* %13, align 4, !dbg !1462
  call void @quoting_options_from_style(%struct.quoting_options* sret %15, i32 %16), !dbg !1463
  %17 = load i32, i32* %12, align 4, !dbg !1464
  %18 = load i8*, i8** %14, align 8, !dbg !1465
  %19 = call i8* @quotearg_n_options(i32 %17, i8* %18, i64 -1, %struct.quoting_options* %15), !dbg !1466
  %20 = load i32, i32* @x.29
  %21 = load i32, i32* @y.30
  %22 = sub i32 %20, 1
  %23 = mul i32 %20, %22
  %24 = urem i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = icmp slt i32 %21, 10
  %27 = or i1 %25, %26
  br i1 %27, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %19, !dbg !1467

originalBBalteredBB:                              ; preds = %originalBB, %3
  %28 = alloca i32, align 4
  %29 = alloca i32, align 4
  %30 = alloca i8*, align 8
  %31 = alloca %struct.quoting_options, align 8
  store i32 %0, i32* %28, align 4
  call void @llvm.dbg.declare(metadata i32* %28, metadata !1468, metadata !DIExpression()), !dbg !1454
  store i32 %1, i32* %29, align 4
  call void @llvm.dbg.declare(metadata i32* %29, metadata !1500, metadata !DIExpression()), !dbg !1456
  store i8* %2, i8** %30, align 8
  call void @llvm.dbg.declare(metadata i8** %30, metadata !1501, metadata !DIExpression()), !dbg !1458
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %31, metadata !1502, metadata !DIExpression()), !dbg !1461
  %32 = load i32, i32* %29, align 4, !dbg !1462
  call void @quoting_options_from_style(%struct.quoting_options* sret %31, i32 %32), !dbg !1463
  %33 = load i32, i32* %28, align 4, !dbg !1464
  %34 = load i8*, i8** %30, align 8, !dbg !1465
  %35 = call i8* @quotearg_n_options(i32 %33, i8* %34, i64 -1, %struct.quoting_options* %31), !dbg !1466
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @quoting_options_from_style(%struct.quoting_options* noalias sret, i32) #4 !dbg !1504 {
  %3 = load i32, i32* @x.31
  %4 = load i32, i32* @y.32
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32, align 4
  store i32 %1, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !1507, metadata !DIExpression()), !dbg !1508
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %0, metadata !1509, metadata !DIExpression()), !dbg !1510
  %12 = bitcast %struct.quoting_options* %0 to i8*, !dbg !1510
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 56, i1 false), !dbg !1510
  %13 = load i32, i32* %11, align 4, !dbg !1511
  %14 = icmp eq i32 %13, 10, !dbg !1513
  %15 = load i32, i32* @x.31
  %16 = load i32, i32* @y.32
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %14, label %23, label %40, !dbg !1514

23:                                               ; preds = %originalBBpart2
  %24 = load i32, i32* @x.31
  %25 = load i32, i32* @y.32
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %23, %originalBB1alteredBB
  call void @abort() #12, !dbg !1515
  %32 = load i32, i32* @x.31
  %33 = load i32, i32* @y.32
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  unreachable, !dbg !1515

40:                                               ; preds = %originalBBpart2
  %41 = load i32, i32* @x.31
  %42 = load i32, i32* @y.32
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %40, %originalBB6alteredBB
  %49 = load i32, i32* %11, align 4, !dbg !1516
  %50 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %0, i32 0, i32 0, !dbg !1517
  store i32 %49, i32* %50, align 8, !dbg !1518
  %51 = load i32, i32* @x.31
  %52 = load i32, i32* @y.32
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  ret void, !dbg !1519

originalBBalteredBB:                              ; preds = %originalBB, %2
  %59 = alloca i32, align 4
  store i32 %1, i32* %59, align 4
  call void @llvm.dbg.declare(metadata i32* %59, metadata !1520, metadata !DIExpression()), !dbg !1508
  call void @llvm.dbg.declare(metadata !4, metadata !1554, metadata !DIExpression()), !dbg !1510
  %60 = bitcast %struct.quoting_options* %0 to i8*, !dbg !1510
  call void @llvm.memset.p0i8.i64(i8* align 8 %60, i8 0, i64 56, i1 false), !dbg !1510
  %61 = load i32, i32* %59, align 4, !dbg !1511
  %62 = icmp eq i32 %61, 10, !dbg !1513
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %23
  call void @abort() #12, !dbg !1515
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %40
  %63 = load i32, i32* %11, align 4, !dbg !1516
  %64 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %0, i32 0, i32 0, !dbg !1517
  store i32 %63, i32* %64, align 8, !dbg !1518
  br label %originalBB6
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_n_options(i32, i8*, i64, %struct.quoting_options*) #4 !dbg !1555 {
  %5 = load i32, i32* @x.33
  %6 = load i32, i32* @y.34
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %4, %originalBBalteredBB
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i64, align 8
  %16 = alloca %struct.quoting_options*, align 8
  %17 = alloca i32, align 4
  %18 = alloca %struct.slotvec*, align 8
  %19 = alloca i8, align 1
  %20 = alloca i32, align 4
  %21 = alloca i64, align 8
  %22 = alloca i8*, align 8
  %23 = alloca i32, align 4
  %24 = alloca i64, align 8
  store i32 %0, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !1559, metadata !DIExpression()), !dbg !1560
  store i8* %1, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !1561, metadata !DIExpression()), !dbg !1562
  store i64 %2, i64* %15, align 8
  call void @llvm.dbg.declare(metadata i64* %15, metadata !1563, metadata !DIExpression()), !dbg !1564
  store %struct.quoting_options* %3, %struct.quoting_options** %16, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %16, metadata !1565, metadata !DIExpression()), !dbg !1566
  call void @llvm.dbg.declare(metadata i32* %17, metadata !1567, metadata !DIExpression()), !dbg !1568
  %25 = call i32* @__errno_location() #15, !dbg !1569
  %26 = load i32, i32* %25, align 4, !dbg !1569
  store i32 %26, i32* %17, align 4, !dbg !1568
  call void @llvm.dbg.declare(metadata %struct.slotvec** %18, metadata !1570, metadata !DIExpression()), !dbg !1571
  %27 = load %struct.slotvec*, %struct.slotvec** @slotvec, align 8, !dbg !1572
  store %struct.slotvec* %27, %struct.slotvec** %18, align 8, !dbg !1571
  %28 = load i32, i32* %13, align 4, !dbg !1573
  %29 = icmp slt i32 %28, 0, !dbg !1575
  %30 = load i32, i32* @x.33
  %31 = load i32, i32* @y.34
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %29, label %38, label %55, !dbg !1576

38:                                               ; preds = %originalBBpart2
  %39 = load i32, i32* @x.33
  %40 = load i32, i32* @y.34
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %38, %originalBB1alteredBB
  call void @abort() #12, !dbg !1577
  %47 = load i32, i32* @x.33
  %48 = load i32, i32* @y.34
  %49 = sub i32 %47, 1
  %50 = mul i32 %47, %49
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %52, %53
  br i1 %54, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  unreachable, !dbg !1577

55:                                               ; preds = %originalBBpart2
  %56 = load i32, i32* @x.33
  %57 = load i32, i32* @y.34
  %58 = sub i32 %56, 1
  %59 = mul i32 %56, %58
  %60 = urem i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %57, 10
  %63 = or i1 %61, %62
  br i1 %63, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %55, %originalBB6alteredBB
  %64 = load i32, i32* @nslots, align 4, !dbg !1578
  %65 = mul i32 %64, 4
  %66 = add i32 %65, 5
  %67 = mul i32 %66, %66
  %68 = sub i32 %67, %66
  %69 = srem i32 %68, 2
  %70 = add i32 %69, 1
  %71 = icmp eq i32 %70, 1
  %72 = load i32, i32* @x.33
  %73 = load i32, i32* @y.34
  %74 = sub i32 %72, 1
  %75 = mul i32 %72, %74
  %76 = urem i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %77, %78
  br i1 %79, label %originalBBpart274, label %originalBB6alteredBB

originalBBpart274:                                ; preds = %originalBB6
  br i1 %71, label %97, label %80

80:                                               ; preds = %originalBBpart274
  %81 = load i32, i32* @x.33
  %82 = load i32, i32* @y.34
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBB76, label %originalBB76alteredBB

originalBB76:                                     ; preds = %80, %originalBB76alteredBB
  %89 = load i32, i32* @x.33
  %90 = load i32, i32* @y.34
  %91 = sub i32 %89, 1
  %92 = mul i32 %89, %91
  %93 = urem i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %94, %95
  br i1 %96, label %originalBBpart278, label %originalBB76alteredBB

originalBBpart278:                                ; preds = %originalBB76
  ret i8* null

97:                                               ; preds = %originalBBpart274
  %98 = load i32, i32* @x.33
  %99 = load i32, i32* @y.34
  %100 = sub i32 %98, 1
  %101 = mul i32 %98, %100
  %102 = urem i32 %101, 2
  %103 = icmp eq i32 %102, 0
  %104 = icmp slt i32 %99, 10
  %105 = or i1 %103, %104
  br i1 %105, label %originalBB80, label %originalBB80alteredBB

originalBB80:                                     ; preds = %97, %originalBB80alteredBB
  %106 = load i32, i32* %13, align 4, !dbg !1580
  %107 = icmp sle i32 %64, %106, !dbg !1581
  %108 = load i32, i32* @x.33
  %109 = load i32, i32* @y.34
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBBpart282, label %originalBB80alteredBB

originalBBpart282:                                ; preds = %originalBB80
  br i1 %107, label %116, label %334, !dbg !1582

116:                                              ; preds = %originalBBpart282
  call void @llvm.dbg.declare(metadata i8* %19, metadata !1583, metadata !DIExpression()), !dbg !1585
  %117 = load i32, i32* @x.33
  %118 = load i32, i32* @y.34
  %119 = sub i32 %117, 1
  %120 = mul i32 %117, %119
  %121 = urem i32 %120, 2
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %122, %123
  br i1 %124, label %originalBB84, label %originalBB84alteredBB

originalBB84:                                     ; preds = %116, %originalBB84alteredBB
  %125 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !1586
  %126 = icmp eq %struct.slotvec* %125, @slotvec0, !dbg !1587
  %127 = zext i1 %126 to i8, !dbg !1585
  store i8 %127, i8* %19, align 1, !dbg !1585
  call void @llvm.dbg.declare(metadata i32* %20, metadata !1588, metadata !DIExpression()), !dbg !1589
  store i32 2147483646, i32* %20, align 4, !dbg !1589
  %128 = load i32, i32* %20, align 4, !dbg !1590
  %129 = load i32, i32* %13, align 4, !dbg !1592
  %130 = icmp slt i32 %128, %129, !dbg !1593
  %131 = load i32, i32* @x.33
  %132 = load i32, i32* @y.34
  %133 = sub i32 %131, 1
  %134 = mul i32 %131, %133
  %135 = urem i32 %134, 2
  %136 = icmp eq i32 %135, 0
  %137 = icmp slt i32 %132, 10
  %138 = or i1 %136, %137
  br i1 %138, label %originalBBpart286, label %originalBB84alteredBB

originalBBpart286:                                ; preds = %originalBB84
  br i1 %130, label %139, label %156, !dbg !1594

139:                                              ; preds = %originalBBpart286
  %140 = load i32, i32* @x.33
  %141 = load i32, i32* @y.34
  %142 = sub i32 %140, 1
  %143 = mul i32 %140, %142
  %144 = urem i32 %143, 2
  %145 = icmp eq i32 %144, 0
  %146 = icmp slt i32 %141, 10
  %147 = or i1 %145, %146
  br i1 %147, label %originalBB88, label %originalBB88alteredBB

originalBB88:                                     ; preds = %139, %originalBB88alteredBB
  call void @xalloc_die() #14, !dbg !1595
  %148 = load i32, i32* @x.33
  %149 = load i32, i32* @y.34
  %150 = sub i32 %148, 1
  %151 = mul i32 %148, %150
  %152 = urem i32 %151, 2
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %153, %154
  br i1 %155, label %originalBBpart290, label %originalBB88alteredBB

originalBBpart290:                                ; preds = %originalBB88
  unreachable, !dbg !1595

156:                                              ; preds = %originalBBpart286
  %157 = load i32, i32* @x.33
  %158 = load i32, i32* @y.34
  %159 = sub i32 %157, 1
  %160 = mul i32 %157, %159
  %161 = urem i32 %160, 2
  %162 = icmp eq i32 %161, 0
  %163 = icmp slt i32 %158, 10
  %164 = or i1 %162, %163
  br i1 %164, label %originalBB92, label %originalBB92alteredBB

originalBB92:                                     ; preds = %156, %originalBB92alteredBB
  %165 = load i8, i8* %19, align 1, !dbg !1596
  %166 = trunc i8 %165 to i1, !dbg !1596
  %167 = load i32, i32* @x.33
  %168 = load i32, i32* @y.34
  %169 = sub i32 %167, 1
  %170 = mul i32 %167, %169
  %171 = urem i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %172, %173
  br i1 %174, label %originalBBpart294, label %originalBB92alteredBB

originalBBpart294:                                ; preds = %originalBB92
  br i1 %166, label %175, label %192, !dbg !1596

175:                                              ; preds = %originalBBpart294
  %176 = load i32, i32* @x.33
  %177 = load i32, i32* @y.34
  %178 = sub i32 %176, 1
  %179 = mul i32 %176, %178
  %180 = urem i32 %179, 2
  %181 = icmp eq i32 %180, 0
  %182 = icmp slt i32 %177, 10
  %183 = or i1 %181, %182
  br i1 %183, label %originalBB96, label %originalBB96alteredBB

originalBB96:                                     ; preds = %175, %originalBB96alteredBB
  %184 = load i32, i32* @x.33
  %185 = load i32, i32* @y.34
  %186 = sub i32 %184, 1
  %187 = mul i32 %184, %186
  %188 = urem i32 %187, 2
  %189 = icmp eq i32 %188, 0
  %190 = icmp slt i32 %185, 10
  %191 = or i1 %189, %190
  br i1 %191, label %originalBBpart298, label %originalBB96alteredBB

originalBBpart298:                                ; preds = %originalBB96
  br label %210, !dbg !1596

192:                                              ; preds = %originalBBpart294
  %193 = load i32, i32* @x.33
  %194 = load i32, i32* @y.34
  %195 = sub i32 %193, 1
  %196 = mul i32 %193, %195
  %197 = urem i32 %196, 2
  %198 = icmp eq i32 %197, 0
  %199 = icmp slt i32 %194, 10
  %200 = or i1 %198, %199
  br i1 %200, label %originalBB100, label %originalBB100alteredBB

originalBB100:                                    ; preds = %192, %originalBB100alteredBB
  %201 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !1597
  %202 = load i32, i32* @x.33
  %203 = load i32, i32* @y.34
  %204 = sub i32 %202, 1
  %205 = mul i32 %202, %204
  %206 = urem i32 %205, 2
  %207 = icmp eq i32 %206, 0
  %208 = icmp slt i32 %203, 10
  %209 = or i1 %207, %208
  br i1 %209, label %originalBBpart2102, label %originalBB100alteredBB

originalBBpart2102:                               ; preds = %originalBB100
  br label %210, !dbg !1596

210:                                              ; preds = %originalBBpart2102, %originalBBpart298
  %211 = phi %struct.slotvec* [ null, %originalBBpart298 ], [ %201, %originalBBpart2102 ], !dbg !1596
  %212 = load i32, i32* @x.33
  %213 = load i32, i32* @y.34
  %214 = sub i32 %212, 1
  %215 = mul i32 %212, %214
  %216 = urem i32 %215, 2
  %217 = icmp eq i32 %216, 0
  %218 = icmp slt i32 %213, 10
  %219 = or i1 %217, %218
  br i1 %219, label %originalBB104, label %originalBB104alteredBB

originalBB104:                                    ; preds = %210, %originalBB104alteredBB
  %220 = bitcast %struct.slotvec* %211 to i8*, !dbg !1596
  %221 = load i32, i32* %13, align 4, !dbg !1598
  %222 = add nsw i32 %221, 1, !dbg !1599
  %223 = sext i32 %222 to i64, !dbg !1600
  %224 = mul i64 %223, 16, !dbg !1601
  %225 = trunc i64 16 to i32
  %226 = add i32 %225, 5
  %227 = trunc i64 16 to i32
  %228 = mul i32 %227, -2
  %229 = add i32 %228, -4
  %230 = mul i32 %226, %226
  %231 = mul i32 %229, %229
  %232 = add i32 %230, %231
  %233 = mul i32 %226, %229
  %234 = mul i32 %233, 2
  %235 = sub i32 %232, %234
  %236 = mul i32 %235, 5
  %237 = add i32 %236, 2
  %238 = icmp eq i32 %237, -3
  %239 = load i32, i32* @x.33
  %240 = load i32, i32* @y.34
  %241 = sub i32 %239, 1
  %242 = mul i32 %239, %241
  %243 = urem i32 %242, 2
  %244 = icmp eq i32 %243, 0
  %245 = icmp slt i32 %240, 10
  %246 = or i1 %244, %245
  br i1 %246, label %originalBBpart2203, label %originalBB104alteredBB

originalBBpart2203:                               ; preds = %originalBB104
  br i1 %238, label %247, label %264

247:                                              ; preds = %originalBBpart2203
  %248 = load i32, i32* @x.33
  %249 = load i32, i32* @y.34
  %250 = sub i32 %248, 1
  %251 = mul i32 %248, %250
  %252 = urem i32 %251, 2
  %253 = icmp eq i32 %252, 0
  %254 = icmp slt i32 %249, 10
  %255 = or i1 %253, %254
  br i1 %255, label %originalBB205, label %originalBB205alteredBB

originalBB205:                                    ; preds = %247, %originalBB205alteredBB
  %256 = load i32, i32* @x.33
  %257 = load i32, i32* @y.34
  %258 = sub i32 %256, 1
  %259 = mul i32 %256, %258
  %260 = urem i32 %259, 2
  %261 = icmp eq i32 %260, 0
  %262 = icmp slt i32 %257, 10
  %263 = or i1 %261, %262
  br i1 %263, label %originalBBpart2207, label %originalBB205alteredBB

originalBBpart2207:                               ; preds = %originalBB205
  ret i8* null

264:                                              ; preds = %originalBBpart2203
  %265 = load i32, i32* @x.33
  %266 = load i32, i32* @y.34
  %267 = sub i32 %265, 1
  %268 = mul i32 %265, %267
  %269 = urem i32 %268, 2
  %270 = icmp eq i32 %269, 0
  %271 = icmp slt i32 %266, 10
  %272 = or i1 %270, %271
  br i1 %272, label %originalBB209, label %originalBB209alteredBB

originalBB209:                                    ; preds = %264, %originalBB209alteredBB
  %273 = call i8* @xrealloc(i8* %220, i64 %224), !dbg !1602
  %274 = bitcast i8* %273 to %struct.slotvec*, !dbg !1602
  store %struct.slotvec* %274, %struct.slotvec** %18, align 8, !dbg !1603
  store %struct.slotvec* %274, %struct.slotvec** @slotvec, align 8, !dbg !1604
  %275 = load i8, i8* %19, align 1, !dbg !1605
  %276 = trunc i8 %275 to i1, !dbg !1605
  %277 = load i32, i32* @x.33
  %278 = load i32, i32* @y.34
  %279 = sub i32 %277, 1
  %280 = mul i32 %277, %279
  %281 = urem i32 %280, 2
  %282 = icmp eq i32 %281, 0
  %283 = icmp slt i32 %278, 10
  %284 = or i1 %282, %283
  br i1 %284, label %originalBBpart2211, label %originalBB209alteredBB

originalBBpart2211:                               ; preds = %originalBB209
  br i1 %276, label %285, label %304, !dbg !1607

285:                                              ; preds = %originalBBpart2211
  %286 = load i32, i32* @x.33
  %287 = load i32, i32* @y.34
  %288 = sub i32 %286, 1
  %289 = mul i32 %286, %288
  %290 = urem i32 %289, 2
  %291 = icmp eq i32 %290, 0
  %292 = icmp slt i32 %287, 10
  %293 = or i1 %291, %292
  br i1 %293, label %originalBB213, label %originalBB213alteredBB

originalBB213:                                    ; preds = %285, %originalBB213alteredBB
  %294 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !1608
  %295 = bitcast %struct.slotvec* %294 to i8*, !dbg !1609
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %295, i8* align 8 bitcast (%struct.slotvec* @slotvec0 to i8*), i64 16, i1 false), !dbg !1609
  %296 = load i32, i32* @x.33
  %297 = load i32, i32* @y.34
  %298 = sub i32 %296, 1
  %299 = mul i32 %296, %298
  %300 = urem i32 %299, 2
  %301 = icmp eq i32 %300, 0
  %302 = icmp slt i32 %297, 10
  %303 = or i1 %301, %302
  br i1 %303, label %originalBBpart2215, label %originalBB213alteredBB

originalBBpart2215:                               ; preds = %originalBB213
  br label %304, !dbg !1610

304:                                              ; preds = %originalBBpart2215, %originalBBpart2211
  %305 = load i32, i32* @x.33
  %306 = load i32, i32* @y.34
  %307 = sub i32 %305, 1
  %308 = mul i32 %305, %307
  %309 = urem i32 %308, 2
  %310 = icmp eq i32 %309, 0
  %311 = icmp slt i32 %306, 10
  %312 = or i1 %310, %311
  br i1 %312, label %originalBB217, label %originalBB217alteredBB

originalBB217:                                    ; preds = %304, %originalBB217alteredBB
  %313 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !1611
  %314 = load i32, i32* @nslots, align 4, !dbg !1612
  %315 = sext i32 %314 to i64, !dbg !1613
  %316 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %313, i64 %315, !dbg !1613
  %317 = bitcast %struct.slotvec* %316 to i8*, !dbg !1614
  %318 = load i32, i32* %13, align 4, !dbg !1615
  %319 = add nsw i32 %318, 1, !dbg !1616
  %320 = load i32, i32* @nslots, align 4, !dbg !1617
  %321 = sub nsw i32 %319, %320, !dbg !1618
  %322 = sext i32 %321 to i64, !dbg !1619
  %323 = mul i64 %322, 16, !dbg !1620
  call void @llvm.memset.p0i8.i64(i8* align 8 %317, i8 0, i64 %323, i1 false), !dbg !1614
  %324 = load i32, i32* %13, align 4, !dbg !1621
  %325 = add nsw i32 %324, 1, !dbg !1622
  store i32 %325, i32* @nslots, align 4, !dbg !1623
  %326 = load i32, i32* @x.33
  %327 = load i32, i32* @y.34
  %328 = sub i32 %326, 1
  %329 = mul i32 %326, %328
  %330 = urem i32 %329, 2
  %331 = icmp eq i32 %330, 0
  %332 = icmp slt i32 %327, 10
  %333 = or i1 %331, %332
  br i1 %333, label %originalBBpart2258, label %originalBB217alteredBB

originalBBpart2258:                               ; preds = %originalBB217
  br label %334, !dbg !1624

334:                                              ; preds = %originalBBpart2258, %originalBBpart282
  call void @llvm.dbg.declare(metadata i64* %21, metadata !1625, metadata !DIExpression()), !dbg !1627
  %335 = load i32, i32* @x.33
  %336 = load i32, i32* @y.34
  %337 = sub i32 %335, 1
  %338 = mul i32 %335, %337
  %339 = urem i32 %338, 2
  %340 = icmp eq i32 %339, 0
  %341 = icmp slt i32 %336, 10
  %342 = or i1 %340, %341
  br i1 %342, label %originalBB260, label %originalBB260alteredBB

originalBB260:                                    ; preds = %334, %originalBB260alteredBB
  %343 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !1628
  %344 = load i32, i32* %13, align 4, !dbg !1629
  %345 = sext i32 %344 to i64, !dbg !1628
  %346 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %343, i64 %345, !dbg !1628
  %347 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %346, i32 0, i32 0, !dbg !1630
  %348 = load i64, i64* %347, align 8, !dbg !1630
  store i64 %348, i64* %21, align 8, !dbg !1627
  call void @llvm.dbg.declare(metadata i8** %22, metadata !1631, metadata !DIExpression()), !dbg !1632
  %349 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !1633
  %350 = load i32, i32* %13, align 4, !dbg !1634
  %351 = sext i32 %350 to i64, !dbg !1633
  %352 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %349, i64 %351, !dbg !1633
  %353 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %352, i32 0, i32 1, !dbg !1635
  %354 = load i8*, i8** %353, align 8, !dbg !1635
  store i8* %354, i8** %22, align 8, !dbg !1632
  call void @llvm.dbg.declare(metadata i32* %23, metadata !1636, metadata !DIExpression()), !dbg !1637
  %355 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1638
  %356 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %355, i32 0, i32 1, !dbg !1639
  %357 = load i32, i32* %356, align 4, !dbg !1639
  %358 = or i32 %357, 1, !dbg !1640
  store i32 %358, i32* %23, align 4, !dbg !1637
  call void @llvm.dbg.declare(metadata i64* %24, metadata !1641, metadata !DIExpression()), !dbg !1642
  %359 = load i8*, i8** %22, align 8, !dbg !1643
  %360 = load i64, i64* %21, align 8, !dbg !1644
  %361 = load i8*, i8** %14, align 8, !dbg !1645
  %362 = load i64, i64* %15, align 8, !dbg !1646
  %363 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1647
  %364 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %363, i32 0, i32 0, !dbg !1648
  %365 = load i32, i32* %364, align 8, !dbg !1648
  %366 = load i32, i32* %23, align 4, !dbg !1649
  %367 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1650
  %368 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %367, i32 0, i32 2, !dbg !1651
  %369 = getelementptr inbounds [8 x i32], [8 x i32]* %368, i64 0, i64 0, !dbg !1650
  %370 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1652
  %371 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %370, i32 0, i32 3, !dbg !1653
  %372 = load i8*, i8** %371, align 8, !dbg !1653
  %373 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1654
  %374 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %373, i32 0, i32 4, !dbg !1655
  %375 = load i8*, i8** %374, align 8, !dbg !1655
  %376 = call i64 @quotearg_buffer_restyled(i8* %359, i64 %360, i8* %361, i64 %362, i32 %365, i32 %366, i32* %369, i8* %372, i8* %375), !dbg !1656
  store i64 %376, i64* %24, align 8, !dbg !1642
  %377 = load i64, i64* %21, align 8, !dbg !1657
  %378 = load i64, i64* %24, align 8, !dbg !1659
  %379 = icmp ule i64 %377, %378, !dbg !1660
  %380 = load i32, i32* @x.33
  %381 = load i32, i32* @y.34
  %382 = sub i32 %380, 1
  %383 = mul i32 %380, %382
  %384 = urem i32 %383, 2
  %385 = icmp eq i32 %384, 0
  %386 = icmp slt i32 %381, 10
  %387 = or i1 %385, %386
  br i1 %387, label %originalBBpart2275, label %originalBB260alteredBB

originalBBpart2275:                               ; preds = %originalBB260
  br i1 %379, label %388, label %517, !dbg !1661

388:                                              ; preds = %originalBBpart2275
  %389 = load i32, i32* @x.33
  %390 = load i32, i32* @y.34
  %391 = sub i32 %389, 1
  %392 = mul i32 %389, %391
  %393 = urem i32 %392, 2
  %394 = icmp eq i32 %393, 0
  %395 = icmp slt i32 %390, 10
  %396 = or i1 %394, %395
  br i1 %396, label %originalBB277, label %originalBB277alteredBB

originalBB277:                                    ; preds = %388, %originalBB277alteredBB
  %397 = load i64, i64* %24, align 8, !dbg !1662
  %398 = add i64 %397, 1, !dbg !1664
  store i64 %398, i64* %21, align 8, !dbg !1665
  %399 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !1666
  %400 = load i32, i32* %13, align 4, !dbg !1667
  %401 = trunc i64 %398 to i32
  %402 = mul i32 %401, 4
  %403 = add i32 %402, -1
  %404 = mul i32 %403, %403
  %405 = sub i32 %404, %403
  %406 = srem i32 %405, 2
  %407 = mul i32 %406, 3
  %408 = add i32 %407, -2
  %409 = icmp ne i32 %408, -2
  %410 = load i32, i32* @x.33
  %411 = load i32, i32* @y.34
  %412 = sub i32 %410, 1
  %413 = mul i32 %410, %412
  %414 = urem i32 %413, 2
  %415 = icmp eq i32 %414, 0
  %416 = icmp slt i32 %411, 10
  %417 = or i1 %415, %416
  br i1 %417, label %originalBBpart2325, label %originalBB277alteredBB

originalBBpart2325:                               ; preds = %originalBB277
  br i1 %409, label %418, label %435

418:                                              ; preds = %originalBBpart2325
  %419 = load i32, i32* @x.33
  %420 = load i32, i32* @y.34
  %421 = sub i32 %419, 1
  %422 = mul i32 %419, %421
  %423 = urem i32 %422, 2
  %424 = icmp eq i32 %423, 0
  %425 = icmp slt i32 %420, 10
  %426 = or i1 %424, %425
  br i1 %426, label %originalBB327, label %originalBB327alteredBB

originalBB327:                                    ; preds = %418, %originalBB327alteredBB
  %427 = load i32, i32* @x.33
  %428 = load i32, i32* @y.34
  %429 = sub i32 %427, 1
  %430 = mul i32 %427, %429
  %431 = urem i32 %430, 2
  %432 = icmp eq i32 %431, 0
  %433 = icmp slt i32 %428, 10
  %434 = or i1 %432, %433
  br i1 %434, label %originalBBpart2329, label %originalBB327alteredBB

originalBBpart2329:                               ; preds = %originalBB327
  ret i8* null

435:                                              ; preds = %originalBBpart2325
  %436 = load i32, i32* @x.33
  %437 = load i32, i32* @y.34
  %438 = sub i32 %436, 1
  %439 = mul i32 %436, %438
  %440 = urem i32 %439, 2
  %441 = icmp eq i32 %440, 0
  %442 = icmp slt i32 %437, 10
  %443 = or i1 %441, %442
  br i1 %443, label %originalBB331, label %originalBB331alteredBB

originalBB331:                                    ; preds = %435, %originalBB331alteredBB
  %444 = sext i32 %400 to i64, !dbg !1666
  %445 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %399, i64 %444, !dbg !1666
  %446 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %445, i32 0, i32 0, !dbg !1668
  store i64 %398, i64* %446, align 8, !dbg !1669
  %447 = load i8*, i8** %22, align 8, !dbg !1670
  %448 = icmp ne i8* %447, getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0), !dbg !1672
  %449 = load i32, i32* @x.33
  %450 = load i32, i32* @y.34
  %451 = sub i32 %449, 1
  %452 = mul i32 %449, %451
  %453 = urem i32 %452, 2
  %454 = icmp eq i32 %453, 0
  %455 = icmp slt i32 %450, 10
  %456 = or i1 %454, %455
  br i1 %456, label %originalBBpart2333, label %originalBB331alteredBB

originalBBpart2333:                               ; preds = %originalBB331
  br i1 %448, label %457, label %475, !dbg !1673

457:                                              ; preds = %originalBBpart2333
  %458 = load i32, i32* @x.33
  %459 = load i32, i32* @y.34
  %460 = sub i32 %458, 1
  %461 = mul i32 %458, %460
  %462 = urem i32 %461, 2
  %463 = icmp eq i32 %462, 0
  %464 = icmp slt i32 %459, 10
  %465 = or i1 %463, %464
  br i1 %465, label %originalBB335, label %originalBB335alteredBB

originalBB335:                                    ; preds = %457, %originalBB335alteredBB
  %466 = load i8*, i8** %22, align 8, !dbg !1674
  call void @free(i8* %466) #10, !dbg !1675
  %467 = load i32, i32* @x.33
  %468 = load i32, i32* @y.34
  %469 = sub i32 %467, 1
  %470 = mul i32 %467, %469
  %471 = urem i32 %470, 2
  %472 = icmp eq i32 %471, 0
  %473 = icmp slt i32 %468, 10
  %474 = or i1 %472, %473
  br i1 %474, label %originalBBpart2337, label %originalBB335alteredBB

originalBBpart2337:                               ; preds = %originalBB335
  br label %475, !dbg !1675

475:                                              ; preds = %originalBBpart2337, %originalBBpart2333
  %476 = load i32, i32* @x.33
  %477 = load i32, i32* @y.34
  %478 = sub i32 %476, 1
  %479 = mul i32 %476, %478
  %480 = urem i32 %479, 2
  %481 = icmp eq i32 %480, 0
  %482 = icmp slt i32 %477, 10
  %483 = or i1 %481, %482
  br i1 %483, label %originalBB339, label %originalBB339alteredBB

originalBB339:                                    ; preds = %475, %originalBB339alteredBB
  %484 = load i64, i64* %21, align 8, !dbg !1676
  %485 = call noalias i8* @xcharalloc(i64 %484), !dbg !1677
  store i8* %485, i8** %22, align 8, !dbg !1678
  %486 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !1679
  %487 = load i32, i32* %13, align 4, !dbg !1680
  %488 = sext i32 %487 to i64, !dbg !1679
  %489 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %486, i64 %488, !dbg !1679
  %490 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %489, i32 0, i32 1, !dbg !1681
  store i8* %485, i8** %490, align 8, !dbg !1682
  %491 = load i8*, i8** %22, align 8, !dbg !1683
  %492 = load i64, i64* %21, align 8, !dbg !1684
  %493 = load i8*, i8** %14, align 8, !dbg !1685
  %494 = load i64, i64* %15, align 8, !dbg !1686
  %495 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1687
  %496 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %495, i32 0, i32 0, !dbg !1688
  %497 = load i32, i32* %496, align 8, !dbg !1688
  %498 = load i32, i32* %23, align 4, !dbg !1689
  %499 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1690
  %500 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %499, i32 0, i32 2, !dbg !1691
  %501 = getelementptr inbounds [8 x i32], [8 x i32]* %500, i64 0, i64 0, !dbg !1690
  %502 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1692
  %503 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %502, i32 0, i32 3, !dbg !1693
  %504 = load i8*, i8** %503, align 8, !dbg !1693
  %505 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1694
  %506 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %505, i32 0, i32 4, !dbg !1695
  %507 = load i8*, i8** %506, align 8, !dbg !1695
  %508 = call i64 @quotearg_buffer_restyled(i8* %491, i64 %492, i8* %493, i64 %494, i32 %497, i32 %498, i32* %501, i8* %504, i8* %507), !dbg !1696
  %509 = load i32, i32* @x.33
  %510 = load i32, i32* @y.34
  %511 = sub i32 %509, 1
  %512 = mul i32 %509, %511
  %513 = urem i32 %512, 2
  %514 = icmp eq i32 %513, 0
  %515 = icmp slt i32 %510, 10
  %516 = or i1 %514, %515
  br i1 %516, label %originalBBpart2341, label %originalBB339alteredBB

originalBBpart2341:                               ; preds = %originalBB339
  br label %517, !dbg !1697

517:                                              ; preds = %originalBBpart2341, %originalBBpart2275
  %518 = load i32, i32* @x.33
  %519 = load i32, i32* @y.34
  %520 = sub i32 %518, 1
  %521 = mul i32 %518, %520
  %522 = urem i32 %521, 2
  %523 = icmp eq i32 %522, 0
  %524 = icmp slt i32 %519, 10
  %525 = or i1 %523, %524
  br i1 %525, label %originalBB343, label %originalBB343alteredBB

originalBB343:                                    ; preds = %517, %originalBB343alteredBB
  %526 = load i32, i32* %17, align 4, !dbg !1698
  %527 = call i32* @__errno_location() #15, !dbg !1699
  store i32 %526, i32* %527, align 4, !dbg !1700
  %528 = mul i32 %526, -3
  %529 = add i32 %528, -1
  %530 = mul i32 %526, 3
  %531 = add i32 %530, -2
  %532 = mul i32 %529, %529
  %533 = mul i32 %531, %531
  %534 = mul i32 %533, 34
  %535 = sub i32 %532, %534
  %536 = add i32 %535, 4
  %537 = icmp ne i32 %536, 4
  %538 = load i32, i32* @x.33
  %539 = load i32, i32* @y.34
  %540 = sub i32 %538, 1
  %541 = mul i32 %538, %540
  %542 = urem i32 %541, 2
  %543 = icmp eq i32 %542, 0
  %544 = icmp slt i32 %539, 10
  %545 = or i1 %543, %544
  br i1 %545, label %originalBBpart2401, label %originalBB343alteredBB

originalBBpart2401:                               ; preds = %originalBB343
  br i1 %537, label %563, label %546

546:                                              ; preds = %originalBBpart2401
  %547 = load i32, i32* @x.33
  %548 = load i32, i32* @y.34
  %549 = sub i32 %547, 1
  %550 = mul i32 %547, %549
  %551 = urem i32 %550, 2
  %552 = icmp eq i32 %551, 0
  %553 = icmp slt i32 %548, 10
  %554 = or i1 %552, %553
  br i1 %554, label %originalBB403, label %originalBB403alteredBB

originalBB403:                                    ; preds = %546, %originalBB403alteredBB
  %555 = load i32, i32* @x.33
  %556 = load i32, i32* @y.34
  %557 = sub i32 %555, 1
  %558 = mul i32 %555, %557
  %559 = urem i32 %558, 2
  %560 = icmp eq i32 %559, 0
  %561 = icmp slt i32 %556, 10
  %562 = or i1 %560, %561
  br i1 %562, label %originalBBpart2405, label %originalBB403alteredBB

originalBBpart2405:                               ; preds = %originalBB403
  ret i8* null

563:                                              ; preds = %originalBBpart2401
  %564 = load i32, i32* @x.33
  %565 = load i32, i32* @y.34
  %566 = sub i32 %564, 1
  %567 = mul i32 %564, %566
  %568 = urem i32 %567, 2
  %569 = icmp eq i32 %568, 0
  %570 = icmp slt i32 %565, 10
  %571 = or i1 %569, %570
  br i1 %571, label %originalBB407, label %originalBB407alteredBB

originalBB407:                                    ; preds = %563, %originalBB407alteredBB
  %572 = load i8*, i8** %22, align 8, !dbg !1701
  %573 = load i32, i32* @x.33
  %574 = load i32, i32* @y.34
  %575 = sub i32 %573, 1
  %576 = mul i32 %573, %575
  %577 = urem i32 %576, 2
  %578 = icmp eq i32 %577, 0
  %579 = icmp slt i32 %574, 10
  %580 = or i1 %578, %579
  br i1 %580, label %originalBBpart2409, label %originalBB407alteredBB

originalBBpart2409:                               ; preds = %originalBB407
  ret i8* %572, !dbg !1702

originalBBalteredBB:                              ; preds = %originalBB, %4
  %581 = alloca i32, align 4
  %582 = alloca i8*, align 8
  %583 = alloca i64, align 8
  %584 = alloca %struct.quoting_options*, align 8
  %585 = alloca i32, align 4
  %586 = alloca %struct.slotvec*, align 8
  %587 = alloca i8, align 1
  %588 = alloca i32, align 4
  %589 = alloca i64, align 8
  %590 = alloca i8*, align 8
  %591 = alloca i32, align 4
  %592 = alloca i64, align 8
  store i32 %0, i32* %581, align 4
  call void @llvm.dbg.declare(metadata i32* %581, metadata !1703, metadata !DIExpression()), !dbg !1560
  store i8* %1, i8** %582, align 8
  call void @llvm.dbg.declare(metadata i8** %582, metadata !1739, metadata !DIExpression()), !dbg !1562
  store i64 %2, i64* %583, align 8
  call void @llvm.dbg.declare(metadata i64* %583, metadata !1740, metadata !DIExpression()), !dbg !1564
  store %struct.quoting_options* %3, %struct.quoting_options** %584, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %584, metadata !1741, metadata !DIExpression()), !dbg !1566
  call void @llvm.dbg.declare(metadata i32* %585, metadata !1742, metadata !DIExpression()), !dbg !1568
  %593 = call i32* @__errno_location() #15, !dbg !1569
  %594 = load i32, i32* %593, align 4, !dbg !1569
  store i32 %594, i32* %585, align 4, !dbg !1568
  call void @llvm.dbg.declare(metadata %struct.slotvec** %586, metadata !1743, metadata !DIExpression()), !dbg !1571
  %595 = load %struct.slotvec*, %struct.slotvec** @slotvec, align 8, !dbg !1572
  store %struct.slotvec* %595, %struct.slotvec** %586, align 8, !dbg !1571
  %596 = load i32, i32* %581, align 4, !dbg !1573
  %597 = icmp slt i32 %596, 0, !dbg !1575
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %38
  call void @abort() #12, !dbg !1577
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %55
  %598 = load i32, i32* @nslots, align 4, !dbg !1578
  %_ = sub i32 0, %598
  %gen = add i32 %_, 4
  %_7 = sub i32 %598, 4
  %gen8 = mul i32 %_7, 4
  %_9 = sub i32 %598, 4
  %gen10 = mul i32 %_9, 4
  %_11 = shl i32 %598, 4
  %_12 = shl i32 %598, 4
  %_13 = sub i32 %598, 4
  %gen14 = mul i32 %_13, 4
  %599 = mul i32 %598, 4
  %_15 = shl i32 %599, 5
  %_16 = sub i32 0, %599
  %gen17 = add i32 %_16, 5
  %_18 = sub i32 0, %599
  %gen19 = add i32 %_18, 5
  %_20 = sub i32 %599, 5
  %gen21 = mul i32 %_20, 5
  %_22 = shl i32 %599, 5
  %_23 = sub i32 %599, 5
  %gen24 = mul i32 %_23, 5
  %600 = add i32 %599, 5
  %_25 = sub i32 0, %600
  %gen26 = add i32 %_25, %600
  %_27 = shl i32 %600, %600
  %_28 = sub i32 %600, %600
  %gen29 = mul i32 %_28, %600
  %_30 = sub i32 0, %600
  %gen31 = add i32 %_30, %600
  %_32 = sub i32 %600, %600
  %gen33 = mul i32 %_32, %600
  %_34 = sub i32 %600, %600
  %gen35 = mul i32 %_34, %600
  %601 = mul i32 %600, %600
  %_36 = shl i32 %601, %600
  %_37 = sub i32 %601, %600
  %gen38 = mul i32 %_37, %600
  %_39 = shl i32 %601, %600
  %_40 = sub i32 %601, %600
  %gen41 = mul i32 %_40, %600
  %_42 = sub i32 0, %601
  %gen43 = add i32 %_42, %600
  %_44 = sub i32 %601, %600
  %gen45 = mul i32 %_44, %600
  %_46 = sub i32 0, %601
  %gen47 = add i32 %_46, %600
  %602 = sub i32 %601, %600
  %_48 = sub i32 0, %602
  %gen49 = add i32 %_48, 2
  %_50 = sub i32 %602, 2
  %gen51 = mul i32 %_50, 2
  %_52 = shl i32 %602, 2
  %_53 = sub i32 %602, 2
  %gen54 = mul i32 %_53, 2
  %_55 = sub i32 %602, 2
  %gen56 = mul i32 %_55, 2
  %_57 = shl i32 %602, 2
  %_58 = sub i32 0, %602
  %gen59 = add i32 %_58, 2
  %_60 = shl i32 %602, 2
  %_61 = sub i32 %602, 2
  %gen62 = mul i32 %_61, 2
  %603 = srem i32 %602, 2
  %_63 = sub i32 0, %603
  %gen64 = add i32 %_63, 1
  %_65 = sub i32 %603, 1
  %gen66 = mul i32 %_65, 1
  %_67 = sub i32 %603, 1
  %gen68 = mul i32 %_67, 1
  %_69 = sub i32 %603, 1
  %gen70 = mul i32 %_69, 1
  %_71 = shl i32 %603, 1
  %_72 = shl i32 %603, 1
  %604 = add i32 %603, 1
  %605 = icmp eq i32 %604, 1
  br label %originalBB6

originalBB76alteredBB:                            ; preds = %originalBB76, %80
  br label %originalBB76

originalBB80alteredBB:                            ; preds = %originalBB80, %97
  %606 = load i32, i32* %13, align 4, !dbg !1580
  %607 = icmp sle i32 %64, %606, !dbg !1581
  br label %originalBB80

originalBB84alteredBB:                            ; preds = %originalBB84, %116
  %608 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !1586
  %609 = icmp eq %struct.slotvec* %608, @slotvec0, !dbg !1587
  %610 = zext i1 %609 to i8, !dbg !1585
  store i8 %610, i8* %19, align 1, !dbg !1585
  call void @llvm.dbg.declare(metadata !4, metadata !1744, metadata !DIExpression()), !dbg !1589
  store i32 2147483646, i32* %20, align 4, !dbg !1589
  %611 = load i32, i32* %20, align 4, !dbg !1590
  %612 = load i32, i32* %13, align 4, !dbg !1592
  %613 = icmp slt i32 %611, %612, !dbg !1593
  br label %originalBB84

originalBB88alteredBB:                            ; preds = %originalBB88, %139
  call void @xalloc_die() #14, !dbg !1595
  br label %originalBB88

originalBB92alteredBB:                            ; preds = %originalBB92, %156
  %614 = load i8, i8* %19, align 1, !dbg !1596
  %615 = trunc i8 %614 to i1, !dbg !1596
  br label %originalBB92

originalBB96alteredBB:                            ; preds = %originalBB96, %175
  br label %originalBB96

originalBB100alteredBB:                           ; preds = %originalBB100, %192
  %616 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !1597
  br label %originalBB100

originalBB104alteredBB:                           ; preds = %originalBB104, %210
  %617 = bitcast %struct.slotvec* %211 to i8*, !dbg !1596
  %618 = load i32, i32* %13, align 4, !dbg !1598
  %_105 = sub i32 0, %618
  %gen106 = add i32 %_105, 1
  %_107 = sub i32 %618, 1
  %gen108 = mul i32 %_107, 1
  %619 = add nsw i32 %618, 1, !dbg !1599
  %620 = sext i32 %619 to i64, !dbg !1600
  %_109 = shl i64 %620, 16
  %_110 = shl i64 %620, 16
  %_111 = shl i64 %620, 16
  %_112 = sub i64 0, %620
  %gen113 = add i64 %_112, 16
  %621 = mul i64 %620, 16, !dbg !1601
  %622 = trunc i64 16 to i32
  %_114 = shl i32 %622, 5
  %_115 = sub i32 0, %622
  %gen116 = add i32 %_115, 5
  %_117 = sub i32 %622, 5
  %gen118 = mul i32 %_117, 5
  %_119 = shl i32 %622, 5
  %_120 = shl i32 %622, 5
  %_121 = sub i32 0, %622
  %gen122 = add i32 %_121, 5
  %_123 = sub i32 %622, 5
  %gen124 = mul i32 %_123, 5
  %623 = add i32 %622, 5
  %624 = trunc i64 16 to i32
  %_125 = sub i32 0, %624
  %gen126 = add i32 %_125, -2
  %_127 = sub i32 0, %624
  %gen128 = add i32 %_127, -2
  %_129 = sub i32 0, %624
  %gen130 = add i32 %_129, -2
  %_131 = sub i32 %624, -2
  %gen132 = mul i32 %_131, -2
  %_133 = sub i32 0, %624
  %gen134 = add i32 %_133, -2
  %_135 = shl i32 %624, -2
  %625 = mul i32 %624, -2
  %_136 = sub i32 0, %625
  %gen137 = add i32 %_136, -4
  %_138 = sub i32 %625, -4
  %gen139 = mul i32 %_138, -4
  %_140 = shl i32 %625, -4
  %_141 = shl i32 %625, -4
  %_142 = sub i32 %625, -4
  %gen143 = mul i32 %_142, -4
  %_144 = sub i32 0, %625
  %gen145 = add i32 %_144, -4
  %_146 = sub i32 %625, -4
  %gen147 = mul i32 %_146, -4
  %626 = add i32 %625, -4
  %_148 = sub i32 %623, %623
  %gen149 = mul i32 %_148, %623
  %_150 = sub i32 0, %623
  %gen151 = add i32 %_150, %623
  %_152 = sub i32 0, %623
  %gen153 = add i32 %_152, %623
  %_154 = shl i32 %623, %623
  %_155 = sub i32 %623, %623
  %gen156 = mul i32 %_155, %623
  %627 = mul i32 %623, %623
  %_157 = shl i32 %626, %626
  %_158 = sub i32 %626, %626
  %gen159 = mul i32 %_158, %626
  %_160 = shl i32 %626, %626
  %_161 = shl i32 %626, %626
  %_162 = shl i32 %626, %626
  %_163 = sub i32 0, %626
  %gen164 = add i32 %_163, %626
  %_165 = sub i32 0, %626
  %gen166 = add i32 %_165, %626
  %_167 = sub i32 0, %626
  %gen168 = add i32 %_167, %626
  %628 = mul i32 %626, %626
  %_169 = shl i32 %627, %628
  %_170 = sub i32 %627, %628
  %gen171 = mul i32 %_170, %628
  %_172 = sub i32 %627, %628
  %gen173 = mul i32 %_172, %628
  %629 = add i32 %627, %628
  %_174 = shl i32 %623, %626
  %_175 = sub i32 %623, %626
  %gen176 = mul i32 %_175, %626
  %_177 = sub i32 %623, %626
  %gen178 = mul i32 %_177, %626
  %_179 = shl i32 %623, %626
  %_180 = shl i32 %623, %626
  %_181 = sub i32 %623, %626
  %gen182 = mul i32 %_181, %626
  %_183 = sub i32 %623, %626
  %gen184 = mul i32 %_183, %626
  %630 = mul i32 %623, %626
  %631 = mul i32 %630, 2
  %_185 = shl i32 %629, %631
  %_186 = sub i32 0, %629
  %gen187 = add i32 %_186, %631
  %_188 = sub i32 %629, %631
  %gen189 = mul i32 %_188, %631
  %_190 = shl i32 %629, %631
  %_191 = sub i32 %629, %631
  %gen192 = mul i32 %_191, %631
  %_193 = shl i32 %629, %631
  %_194 = shl i32 %629, %631
  %_195 = sub i32 %629, %631
  %gen196 = mul i32 %_195, %631
  %632 = sub i32 %629, %631
  %_197 = sub i32 %632, 5
  %gen198 = mul i32 %_197, 5
  %_199 = sub i32 %632, 5
  %gen200 = mul i32 %_199, 5
  %633 = mul i32 %632, 5
  %_201 = shl i32 %633, 2
  %634 = add i32 %633, 2
  %635 = icmp eq i32 %634, -3
  br label %originalBB104

originalBB205alteredBB:                           ; preds = %originalBB205, %247
  br label %originalBB205

originalBB209alteredBB:                           ; preds = %originalBB209, %264
  %636 = call i8* @xrealloc(i8* %220, i64 %224), !dbg !1602
  %637 = bitcast i8* %636 to %struct.slotvec*, !dbg !1602
  store %struct.slotvec* %637, %struct.slotvec** %18, align 8, !dbg !1603
  store %struct.slotvec* %637, %struct.slotvec** @slotvec, align 8, !dbg !1604
  %638 = load i8, i8* %19, align 1, !dbg !1605
  %639 = trunc i8 %638 to i1, !dbg !1605
  br label %originalBB209

originalBB213alteredBB:                           ; preds = %originalBB213, %285
  %640 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !1608
  %641 = bitcast %struct.slotvec* %640 to i8*, !dbg !1609
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %641, i8* align 8 bitcast (%struct.slotvec* @slotvec0 to i8*), i64 16, i1 false), !dbg !1609
  br label %originalBB213

originalBB217alteredBB:                           ; preds = %originalBB217, %304
  %642 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !1611
  %643 = load i32, i32* @nslots, align 4, !dbg !1612
  %644 = sext i32 %643 to i64, !dbg !1613
  %645 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %642, i64 %644, !dbg !1613
  %646 = bitcast %struct.slotvec* %645 to i8*, !dbg !1614
  %647 = load i32, i32* %13, align 4, !dbg !1615
  %_218 = sub i32 %647, 1
  %gen219 = mul i32 %_218, 1
  %_220 = sub i32 0, %647
  %gen221 = add i32 %_220, 1
  %_222 = sub i32 %647, 1
  %gen223 = mul i32 %_222, 1
  %_224 = shl i32 %647, 1
  %_225 = sub i32 %647, 1
  %gen226 = mul i32 %_225, 1
  %_227 = sub i32 %647, 1
  %gen228 = mul i32 %_227, 1
  %_229 = shl i32 %647, 1
  %648 = add nsw i32 %647, 1, !dbg !1616
  %649 = load i32, i32* @nslots, align 4, !dbg !1617
  %_230 = sub i32 0, %648
  %gen231 = add i32 %_230, %649
  %_232 = sub i32 0, %648
  %gen233 = add i32 %_232, %649
  %_234 = sub i32 %648, %649
  %gen235 = mul i32 %_234, %649
  %_236 = sub i32 0, %648
  %gen237 = add i32 %_236, %649
  %_238 = sub i32 0, %648
  %gen239 = add i32 %_238, %649
  %_240 = sub i32 0, %648
  %gen241 = add i32 %_240, %649
  %_242 = shl i32 %648, %649
  %650 = sub nsw i32 %648, %649, !dbg !1618
  %651 = sext i32 %650 to i64, !dbg !1619
  %_243 = sub i64 %651, 16
  %gen244 = mul i64 %_243, 16
  %_245 = sub i64 %651, 16
  %gen246 = mul i64 %_245, 16
  %_247 = sub i64 %651, 16
  %gen248 = mul i64 %_247, 16
  %652 = mul i64 %651, 16, !dbg !1620
  call void @llvm.memset.p0i8.i64(i8* align 8 %646, i8 0, i64 %652, i1 false), !dbg !1614
  %653 = load i32, i32* %13, align 4, !dbg !1621
  %_249 = sub i32 %653, 1
  %gen250 = mul i32 %_249, 1
  %_251 = sub i32 0, %653
  %gen252 = add i32 %_251, 1
  %_253 = sub i32 %653, 1
  %gen254 = mul i32 %_253, 1
  %_255 = sub i32 %653, 1
  %gen256 = mul i32 %_255, 1
  %654 = add nsw i32 %653, 1, !dbg !1622
  store i32 %654, i32* @nslots, align 4, !dbg !1623
  br label %originalBB217

originalBB260alteredBB:                           ; preds = %originalBB260, %334
  %655 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !1628
  %656 = load i32, i32* %13, align 4, !dbg !1629
  %657 = sext i32 %656 to i64, !dbg !1628
  %658 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %655, i64 %657, !dbg !1628
  %659 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %658, i32 0, i32 0, !dbg !1630
  %660 = load i64, i64* %659, align 8, !dbg !1630
  store i64 %660, i64* %21, align 8, !dbg !1627
  call void @llvm.dbg.declare(metadata !4, metadata !1782, metadata !DIExpression()), !dbg !1632
  %661 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !1633
  %662 = load i32, i32* %13, align 4, !dbg !1634
  %663 = sext i32 %662 to i64, !dbg !1633
  %664 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %661, i64 %663, !dbg !1633
  %665 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %664, i32 0, i32 1, !dbg !1635
  %666 = load i8*, i8** %665, align 8, !dbg !1635
  store i8* %666, i8** %22, align 8, !dbg !1632
  call void @llvm.dbg.declare(metadata !4, metadata !1819, metadata !DIExpression()), !dbg !1637
  %667 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1638
  %668 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %667, i32 0, i32 1, !dbg !1639
  %669 = load i32, i32* %668, align 4, !dbg !1639
  %_261 = sub i32 %669, 1
  %gen262 = mul i32 %_261, 1
  %_263 = sub i32 0, %669
  %gen264 = add i32 %_263, 1
  %_265 = sub i32 0, %669
  %gen266 = add i32 %_265, 1
  %_267 = shl i32 %669, 1
  %_268 = sub i32 0, %669
  %gen269 = add i32 %_268, 1
  %_270 = sub i32 %669, 1
  %gen271 = mul i32 %_270, 1
  %_272 = sub i32 %669, 1
  %gen273 = mul i32 %_272, 1
  %670 = or i32 %669, 1, !dbg !1640
  store i32 %670, i32* %23, align 4, !dbg !1637
  call void @llvm.dbg.declare(metadata !4, metadata !1820, metadata !DIExpression()), !dbg !1642
  %671 = load i8*, i8** %22, align 8, !dbg !1643
  %672 = load i64, i64* %21, align 8, !dbg !1644
  %673 = load i8*, i8** %14, align 8, !dbg !1645
  %674 = load i64, i64* %15, align 8, !dbg !1646
  %675 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1647
  %676 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %675, i32 0, i32 0, !dbg !1648
  %677 = load i32, i32* %676, align 8, !dbg !1648
  %678 = load i32, i32* %23, align 4, !dbg !1649
  %679 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1650
  %680 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %679, i32 0, i32 2, !dbg !1651
  %681 = getelementptr inbounds [8 x i32], [8 x i32]* %680, i64 0, i64 0, !dbg !1650
  %682 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1652
  %683 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %682, i32 0, i32 3, !dbg !1653
  %684 = load i8*, i8** %683, align 8, !dbg !1653
  %685 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1654
  %686 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %685, i32 0, i32 4, !dbg !1655
  %687 = load i8*, i8** %686, align 8, !dbg !1655
  %688 = call i64 @quotearg_buffer_restyled(i8* %671, i64 %672, i8* %673, i64 %674, i32 %677, i32 %678, i32* %681, i8* %684, i8* %687), !dbg !1656
  store i64 %688, i64* %24, align 8, !dbg !1642
  %689 = load i64, i64* %21, align 8, !dbg !1657
  %690 = load i64, i64* %24, align 8, !dbg !1659
  %691 = icmp ule i64 %689, %690, !dbg !1660
  br label %originalBB260

originalBB277alteredBB:                           ; preds = %originalBB277, %388
  %692 = load i64, i64* %24, align 8, !dbg !1662
  %_278 = sub i64 0, %692
  %gen279 = add i64 %_278, 1
  %_280 = sub i64 0, %692
  %gen281 = add i64 %_280, 1
  %_282 = sub i64 0, %692
  %gen283 = add i64 %_282, 1
  %693 = add i64 %692, 1, !dbg !1664
  store i64 %693, i64* %21, align 8, !dbg !1665
  %694 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !1666
  %695 = load i32, i32* %13, align 4, !dbg !1667
  %696 = trunc i64 %693 to i32
  %_284 = sub i32 %696, 4
  %gen285 = mul i32 %_284, 4
  %_286 = sub i32 %696, 4
  %gen287 = mul i32 %_286, 4
  %_288 = shl i32 %696, 4
  %697 = mul i32 %696, 4
  %_289 = sub i32 %697, -1
  %gen290 = mul i32 %_289, -1
  %_291 = sub i32 %697, -1
  %gen292 = mul i32 %_291, -1
  %698 = add i32 %697, -1
  %_293 = sub i32 0, %698
  %gen294 = add i32 %_293, %698
  %699 = mul i32 %698, %698
  %_295 = sub i32 %699, %698
  %gen296 = mul i32 %_295, %698
  %_297 = shl i32 %699, %698
  %_298 = sub i32 0, %699
  %gen299 = add i32 %_298, %698
  %_300 = sub i32 0, %699
  %gen301 = add i32 %_300, %698
  %_302 = sub i32 %699, %698
  %gen303 = mul i32 %_302, %698
  %_304 = sub i32 0, %699
  %gen305 = add i32 %_304, %698
  %700 = sub i32 %699, %698
  %_306 = sub i32 0, %700
  %gen307 = add i32 %_306, 2
  %_308 = sub i32 %700, 2
  %gen309 = mul i32 %_308, 2
  %701 = srem i32 %700, 2
  %_310 = sub i32 0, %701
  %gen311 = add i32 %_310, 3
  %_312 = sub i32 %701, 3
  %gen313 = mul i32 %_312, 3
  %_314 = sub i32 %701, 3
  %gen315 = mul i32 %_314, 3
  %_316 = shl i32 %701, 3
  %_317 = sub i32 0, %701
  %gen318 = add i32 %_317, 3
  %702 = mul i32 %701, 3
  %_319 = shl i32 %702, -2
  %_320 = sub i32 %702, -2
  %gen321 = mul i32 %_320, -2
  %_322 = sub i32 0, %702
  %gen323 = add i32 %_322, -2
  %703 = add i32 %702, -2
  %704 = icmp ne i32 %703, -2
  br label %originalBB277

originalBB327alteredBB:                           ; preds = %originalBB327, %418
  br label %originalBB327

originalBB331alteredBB:                           ; preds = %originalBB331, %435
  %705 = sext i32 %400 to i64, !dbg !1666
  %706 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %399, i64 %705, !dbg !1666
  %707 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %706, i32 0, i32 0, !dbg !1668
  store i64 %398, i64* %707, align 8, !dbg !1669
  %708 = load i8*, i8** %22, align 8, !dbg !1670
  %709 = icmp ne i8* %708, getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0), !dbg !1672
  br label %originalBB331

originalBB335alteredBB:                           ; preds = %originalBB335, %457
  %710 = load i8*, i8** %22, align 8, !dbg !1674
  call void @free(i8* %710) #10, !dbg !1675
  br label %originalBB335

originalBB339alteredBB:                           ; preds = %originalBB339, %475
  %711 = load i64, i64* %21, align 8, !dbg !1676
  %712 = call noalias i8* @xcharalloc(i64 %711), !dbg !1677
  store i8* %712, i8** %22, align 8, !dbg !1678
  %713 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !1679
  %714 = load i32, i32* %13, align 4, !dbg !1680
  %715 = sext i32 %714 to i64, !dbg !1679
  %716 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %713, i64 %715, !dbg !1679
  %717 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %716, i32 0, i32 1, !dbg !1681
  store i8* %712, i8** %717, align 8, !dbg !1682
  %718 = load i8*, i8** %22, align 8, !dbg !1683
  %719 = load i64, i64* %21, align 8, !dbg !1684
  %720 = load i8*, i8** %14, align 8, !dbg !1685
  %721 = load i64, i64* %15, align 8, !dbg !1686
  %722 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1687
  %723 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %722, i32 0, i32 0, !dbg !1688
  %724 = load i32, i32* %723, align 8, !dbg !1688
  %725 = load i32, i32* %23, align 4, !dbg !1689
  %726 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1690
  %727 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %726, i32 0, i32 2, !dbg !1691
  %728 = getelementptr inbounds [8 x i32], [8 x i32]* %727, i64 0, i64 0, !dbg !1690
  %729 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1692
  %730 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %729, i32 0, i32 3, !dbg !1693
  %731 = load i8*, i8** %730, align 8, !dbg !1693
  %732 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1694
  %733 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %732, i32 0, i32 4, !dbg !1695
  %734 = load i8*, i8** %733, align 8, !dbg !1695
  %735 = call i64 @quotearg_buffer_restyled(i8* %718, i64 %719, i8* %720, i64 %721, i32 %724, i32 %725, i32* %728, i8* %731, i8* %734), !dbg !1696
  br label %originalBB339

originalBB343alteredBB:                           ; preds = %originalBB343, %517
  %736 = load i32, i32* %17, align 4, !dbg !1698
  %737 = call i32* @__errno_location() #15, !dbg !1699
  store i32 %736, i32* %737, align 4, !dbg !1700
  %_344 = sub i32 0, %736
  %gen345 = add i32 %_344, -3
  %_346 = sub i32 0, %736
  %gen347 = add i32 %_346, -3
  %_348 = shl i32 %736, -3
  %_349 = sub i32 %736, -3
  %gen350 = mul i32 %_349, -3
  %_351 = sub i32 %736, -3
  %gen352 = mul i32 %_351, -3
  %_353 = sub i32 0, %736
  %gen354 = add i32 %_353, -3
  %738 = mul i32 %736, -3
  %_355 = sub i32 0, %738
  %gen356 = add i32 %_355, -1
  %_357 = sub i32 %738, -1
  %gen358 = mul i32 %_357, -1
  %739 = add i32 %738, -1
  %_359 = sub i32 %736, 3
  %gen360 = mul i32 %_359, 3
  %_361 = shl i32 %736, 3
  %740 = mul i32 %736, 3
  %_362 = shl i32 %740, -2
  %_363 = sub i32 %740, -2
  %gen364 = mul i32 %_363, -2
  %_365 = shl i32 %740, -2
  %_366 = shl i32 %740, -2
  %_367 = sub i32 %740, -2
  %gen368 = mul i32 %_367, -2
  %_369 = sub i32 %740, -2
  %gen370 = mul i32 %_369, -2
  %741 = add i32 %740, -2
  %_371 = shl i32 %739, %739
  %_372 = sub i32 0, %739
  %gen373 = add i32 %_372, %739
  %742 = mul i32 %739, %739
  %_374 = sub i32 0, %741
  %gen375 = add i32 %_374, %741
  %_376 = sub i32 0, %741
  %gen377 = add i32 %_376, %741
  %_378 = sub i32 %741, %741
  %gen379 = mul i32 %_378, %741
  %743 = mul i32 %741, %741
  %_380 = sub i32 0, %743
  %gen381 = add i32 %_380, 34
  %_382 = sub i32 %743, 34
  %gen383 = mul i32 %_382, 34
  %_384 = shl i32 %743, 34
  %_385 = sub i32 %743, 34
  %gen386 = mul i32 %_385, 34
  %_387 = sub i32 %743, 34
  %gen388 = mul i32 %_387, 34
  %744 = mul i32 %743, 34
  %745 = sub i32 %742, %744
  %_389 = sub i32 %745, 4
  %gen390 = mul i32 %_389, 4
  %_391 = shl i32 %745, 4
  %_392 = sub i32 0, %745
  %gen393 = add i32 %_392, 4
  %_394 = shl i32 %745, 4
  %_395 = shl i32 %745, 4
  %_396 = shl i32 %745, 4
  %_397 = shl i32 %745, 4
  %_398 = sub i32 0, %745
  %gen399 = add i32 %_398, 4
  %746 = add i32 %745, 4
  %747 = icmp ne i32 %746, 4
  br label %originalBB343

originalBB403alteredBB:                           ; preds = %originalBB403, %546
  br label %originalBB403

originalBB407alteredBB:                           ; preds = %originalBB407, %563
  %748 = load i8*, i8** %22, align 8, !dbg !1701
  br label %originalBB407
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @quotearg_buffer_restyled(i8*, i64, i8*, i64, i32, i32, i32*, i8*, i8*) #4 !dbg !1821 {
  %10 = load i32, i32* @x.35
  %11 = load i32, i32* @y.36
  %12 = sub i32 %10, 1
  %13 = mul i32 %10, %12
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  %16 = icmp slt i32 %11, 10
  %17 = or i1 %15, %16
  br i1 %17, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %9, %originalBBalteredBB
  %18 = alloca i64, align 8
  %19 = alloca i8*, align 8
  %20 = alloca i64, align 8
  %21 = alloca i8*, align 8
  %22 = alloca i64, align 8
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32*, align 8
  %26 = alloca i8*, align 8
  %27 = alloca i8*, align 8
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  %30 = alloca i64, align 8
  %31 = alloca i8*, align 8
  %32 = alloca i64, align 8
  %33 = alloca i8, align 1
  %34 = alloca i8, align 1
  %35 = alloca i8, align 1
  %36 = alloca i8, align 1
  %37 = alloca i8, align 1
  %38 = alloca i8, align 1
  %39 = alloca i8, align 1
  %40 = alloca i8, align 1
  %41 = alloca i8, align 1
  %42 = alloca i8, align 1
  %43 = alloca i8, align 1
  %44 = alloca i64, align 8
  %45 = alloca i8, align 1
  %46 = alloca %struct.__mbstate_t, align 4
  %47 = alloca i32, align 4
  %48 = alloca i64, align 8
  %49 = alloca i64, align 8
  %50 = alloca i64, align 8
  store i8* %0, i8** %19, align 8
  call void @llvm.dbg.declare(metadata i8** %19, metadata !1826, metadata !DIExpression()), !dbg !1827
  store i64 %1, i64* %20, align 8
  call void @llvm.dbg.declare(metadata i64* %20, metadata !1828, metadata !DIExpression()), !dbg !1829
  store i8* %2, i8** %21, align 8
  call void @llvm.dbg.declare(metadata i8** %21, metadata !1830, metadata !DIExpression()), !dbg !1831
  store i64 %3, i64* %22, align 8
  call void @llvm.dbg.declare(metadata i64* %22, metadata !1832, metadata !DIExpression()), !dbg !1833
  store i32 %4, i32* %23, align 4
  call void @llvm.dbg.declare(metadata i32* %23, metadata !1834, metadata !DIExpression()), !dbg !1835
  store i32 %5, i32* %24, align 4
  call void @llvm.dbg.declare(metadata i32* %24, metadata !1836, metadata !DIExpression()), !dbg !1837
  store i32* %6, i32** %25, align 8
  call void @llvm.dbg.declare(metadata i32** %25, metadata !1838, metadata !DIExpression()), !dbg !1839
  store i8* %7, i8** %26, align 8
  call void @llvm.dbg.declare(metadata i8** %26, metadata !1840, metadata !DIExpression()), !dbg !1841
  store i8* %8, i8** %27, align 8
  call void @llvm.dbg.declare(metadata i8** %27, metadata !1842, metadata !DIExpression()), !dbg !1843
  call void @llvm.dbg.declare(metadata i64* %28, metadata !1844, metadata !DIExpression()), !dbg !1845
  call void @llvm.dbg.declare(metadata i64* %29, metadata !1846, metadata !DIExpression()), !dbg !1847
  store i64 0, i64* %29, align 8, !dbg !1847
  call void @llvm.dbg.declare(metadata i64* %30, metadata !1848, metadata !DIExpression()), !dbg !1849
  store i64 0, i64* %30, align 8, !dbg !1849
  call void @llvm.dbg.declare(metadata i8** %31, metadata !1850, metadata !DIExpression()), !dbg !1851
  store i8* null, i8** %31, align 8, !dbg !1851
  call void @llvm.dbg.declare(metadata i64* %32, metadata !1852, metadata !DIExpression()), !dbg !1853
  store i64 0, i64* %32, align 8, !dbg !1853
  call void @llvm.dbg.declare(metadata i8* %33, metadata !1854, metadata !DIExpression()), !dbg !1855
  store i8 0, i8* %33, align 1, !dbg !1855
  call void @llvm.dbg.declare(metadata i8* %34, metadata !1856, metadata !DIExpression()), !dbg !1857
  %51 = call i64 @__ctype_get_mb_cur_max() #10, !dbg !1858
  %52 = icmp eq i64 %51, 1, !dbg !1859
  %53 = zext i1 %52 to i8, !dbg !1857
  store i8 %53, i8* %34, align 1, !dbg !1857
  call void @llvm.dbg.declare(metadata i8* %35, metadata !1860, metadata !DIExpression()), !dbg !1861
  %54 = load i32, i32* %24, align 4, !dbg !1862
  %55 = and i32 %54, 2, !dbg !1863
  %56 = icmp ne i32 %55, 0, !dbg !1864
  %57 = zext i1 %56 to i8, !dbg !1861
  store i8 %57, i8* %35, align 1, !dbg !1861
  call void @llvm.dbg.declare(metadata i8* %36, metadata !1865, metadata !DIExpression()), !dbg !1866
  store i8 0, i8* %36, align 1, !dbg !1866
  call void @llvm.dbg.declare(metadata i8* %37, metadata !1867, metadata !DIExpression()), !dbg !1868
  store i8 0, i8* %37, align 1, !dbg !1868
  call void @llvm.dbg.declare(metadata i8* %38, metadata !1869, metadata !DIExpression()), !dbg !1870
  store i8 1, i8* %38, align 1, !dbg !1870
  %58 = load i32, i32* @x.35
  %59 = load i32, i32* @y.36
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %66, !dbg !1871

66:                                               ; preds = %originalBBpart22342, %originalBBpart2
  call void @llvm.dbg.label(metadata !1872), !dbg !1873
  %67 = load i32, i32* @x.35
  %68 = load i32, i32* @y.36
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB8, label %originalBB8alteredBB

originalBB8:                                      ; preds = %66, %originalBB8alteredBB
  %75 = load i32, i32* %23, align 4, !dbg !1874
  %76 = load i32, i32* @x.35
  %77 = load i32, i32* @y.36
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBBpart210, label %originalBB8alteredBB

originalBBpart210:                                ; preds = %originalBB8
  switch i32 %75, label %728 [
    i32 6, label %84
    i32 5, label %101
    i32 7, label %230
    i32 8, label %247
    i32 9, label %247
    i32 10, label %247
    i32 3, label %495
    i32 1, label %512
    i32 4, label %529
    i32 2, label %582
    i32 0, label %711
  ], !dbg !1875

84:                                               ; preds = %originalBBpart210
  %85 = load i32, i32* @x.35
  %86 = load i32, i32* @y.36
  %87 = sub i32 %85, 1
  %88 = mul i32 %85, %87
  %89 = urem i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %90, %91
  br i1 %92, label %originalBB12, label %originalBB12alteredBB

originalBB12:                                     ; preds = %84, %originalBB12alteredBB
  store i32 5, i32* %23, align 4, !dbg !1876
  store i8 1, i8* %35, align 1, !dbg !1878
  %93 = load i32, i32* @x.35
  %94 = load i32, i32* @y.36
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBBpart214, label %originalBB12alteredBB

originalBBpart214:                                ; preds = %originalBB12
  br label %101, !dbg !1879

101:                                              ; preds = %originalBBpart214, %originalBBpart210
  %102 = load i32, i32* @x.35
  %103 = load i32, i32* @y.36
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB16, label %originalBB16alteredBB

originalBB16:                                     ; preds = %101, %originalBB16alteredBB
  %110 = load i8, i8* %35, align 1, !dbg !1880
  %111 = trunc i8 %110 to i1, !dbg !1880
  %112 = load i32, i32* @x.35
  %113 = load i32, i32* @y.36
  %114 = sub i32 %112, 1
  %115 = mul i32 %112, %114
  %116 = urem i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %113, 10
  %119 = or i1 %117, %118
  br i1 %119, label %originalBBpart218, label %originalBB16alteredBB

originalBBpart218:                                ; preds = %originalBB16
  br i1 %111, label %213, label %120, !dbg !1882

120:                                              ; preds = %originalBBpart218
  %121 = load i32, i32* @x.35
  %122 = load i32, i32* @y.36
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBB20, label %originalBB20alteredBB

originalBB20:                                     ; preds = %120, %originalBB20alteredBB
  %129 = load i32, i32* @x.35
  %130 = load i32, i32* @y.36
  %131 = sub i32 %129, 1
  %132 = mul i32 %129, %131
  %133 = urem i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %130, 10
  %136 = or i1 %134, %135
  br i1 %136, label %originalBBpart222, label %originalBB20alteredBB

originalBBpart222:                                ; preds = %originalBB20
  br label %137, !dbg !1883

137:                                              ; preds = %originalBBpart222
  %138 = load i32, i32* @x.35
  %139 = load i32, i32* @y.36
  %140 = sub i32 %138, 1
  %141 = mul i32 %138, %140
  %142 = urem i32 %141, 2
  %143 = icmp eq i32 %142, 0
  %144 = icmp slt i32 %139, 10
  %145 = or i1 %143, %144
  br i1 %145, label %originalBB24, label %originalBB24alteredBB

originalBB24:                                     ; preds = %137, %originalBB24alteredBB
  %146 = load i64, i64* %29, align 8, !dbg !1884
  %147 = load i64, i64* %20, align 8, !dbg !1884
  %148 = icmp ult i64 %146, %147, !dbg !1884
  %149 = load i32, i32* @x.35
  %150 = load i32, i32* @y.36
  %151 = sub i32 %149, 1
  %152 = mul i32 %149, %151
  %153 = urem i32 %152, 2
  %154 = icmp eq i32 %153, 0
  %155 = icmp slt i32 %150, 10
  %156 = or i1 %154, %155
  br i1 %156, label %originalBBpart226, label %originalBB24alteredBB

originalBBpart226:                                ; preds = %originalBB24
  br i1 %148, label %157, label %177, !dbg !1887

157:                                              ; preds = %originalBBpart226
  %158 = load i32, i32* @x.35
  %159 = load i32, i32* @y.36
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBB28, label %originalBB28alteredBB

originalBB28:                                     ; preds = %157, %originalBB28alteredBB
  %166 = load i8*, i8** %19, align 8, !dbg !1884
  %167 = load i64, i64* %29, align 8, !dbg !1884
  %168 = getelementptr inbounds i8, i8* %166, i64 %167, !dbg !1884
  store i8 34, i8* %168, align 1, !dbg !1884
  %169 = load i32, i32* @x.35
  %170 = load i32, i32* @y.36
  %171 = sub i32 %169, 1
  %172 = mul i32 %169, %171
  %173 = urem i32 %172, 2
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %174, %175
  br i1 %176, label %originalBBpart230, label %originalBB28alteredBB

originalBBpart230:                                ; preds = %originalBB28
  br label %177, !dbg !1884

177:                                              ; preds = %originalBBpart230, %originalBBpart226
  %178 = load i32, i32* @x.35
  %179 = load i32, i32* @y.36
  %180 = sub i32 %178, 1
  %181 = mul i32 %178, %180
  %182 = urem i32 %181, 2
  %183 = icmp eq i32 %182, 0
  %184 = icmp slt i32 %179, 10
  %185 = or i1 %183, %184
  br i1 %185, label %originalBB32, label %originalBB32alteredBB

originalBB32:                                     ; preds = %177, %originalBB32alteredBB
  %186 = load i64, i64* %29, align 8, !dbg !1887
  %187 = add i64 %186, 1, !dbg !1887
  store i64 %187, i64* %29, align 8, !dbg !1887
  %188 = load i32, i32* @x.35
  %189 = load i32, i32* @y.36
  %190 = sub i32 %188, 1
  %191 = mul i32 %188, %190
  %192 = urem i32 %191, 2
  %193 = icmp eq i32 %192, 0
  %194 = icmp slt i32 %189, 10
  %195 = or i1 %193, %194
  br i1 %195, label %originalBBpart247, label %originalBB32alteredBB

originalBBpart247:                                ; preds = %originalBB32
  br label %196, !dbg !1887

196:                                              ; preds = %originalBBpart247
  %197 = load i32, i32* @x.35
  %198 = load i32, i32* @y.36
  %199 = sub i32 %197, 1
  %200 = mul i32 %197, %199
  %201 = urem i32 %200, 2
  %202 = icmp eq i32 %201, 0
  %203 = icmp slt i32 %198, 10
  %204 = or i1 %202, %203
  br i1 %204, label %originalBB49, label %originalBB49alteredBB

originalBB49:                                     ; preds = %196, %originalBB49alteredBB
  %205 = load i32, i32* @x.35
  %206 = load i32, i32* @y.36
  %207 = sub i32 %205, 1
  %208 = mul i32 %205, %207
  %209 = urem i32 %208, 2
  %210 = icmp eq i32 %209, 0
  %211 = icmp slt i32 %206, 10
  %212 = or i1 %210, %211
  br i1 %212, label %originalBBpart251, label %originalBB49alteredBB

originalBBpart251:                                ; preds = %originalBB49
  br label %213, !dbg !1887

213:                                              ; preds = %originalBBpart251, %originalBBpart218
  %214 = load i32, i32* @x.35
  %215 = load i32, i32* @y.36
  %216 = sub i32 %214, 1
  %217 = mul i32 %214, %216
  %218 = urem i32 %217, 2
  %219 = icmp eq i32 %218, 0
  %220 = icmp slt i32 %215, 10
  %221 = or i1 %219, %220
  br i1 %221, label %originalBB53, label %originalBB53alteredBB

originalBB53:                                     ; preds = %213, %originalBB53alteredBB
  store i8 1, i8* %33, align 1, !dbg !1888
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.63, i64 0, i64 0), i8** %31, align 8, !dbg !1889
  store i64 1, i64* %32, align 8, !dbg !1890
  %222 = load i32, i32* @x.35
  %223 = load i32, i32* @y.36
  %224 = sub i32 %222, 1
  %225 = mul i32 %222, %224
  %226 = urem i32 %225, 2
  %227 = icmp eq i32 %226, 0
  %228 = icmp slt i32 %223, 10
  %229 = or i1 %227, %228
  br i1 %229, label %originalBBpart255, label %originalBB53alteredBB

originalBBpart255:                                ; preds = %originalBB53
  br label %745, !dbg !1891

230:                                              ; preds = %originalBBpart210
  %231 = load i32, i32* @x.35
  %232 = load i32, i32* @y.36
  %233 = sub i32 %231, 1
  %234 = mul i32 %231, %233
  %235 = urem i32 %234, 2
  %236 = icmp eq i32 %235, 0
  %237 = icmp slt i32 %232, 10
  %238 = or i1 %236, %237
  br i1 %238, label %originalBB57, label %originalBB57alteredBB

originalBB57:                                     ; preds = %230, %originalBB57alteredBB
  store i8 1, i8* %33, align 1, !dbg !1892
  store i8 0, i8* %35, align 1, !dbg !1893
  %239 = load i32, i32* @x.35
  %240 = load i32, i32* @y.36
  %241 = sub i32 %239, 1
  %242 = mul i32 %239, %241
  %243 = urem i32 %242, 2
  %244 = icmp eq i32 %243, 0
  %245 = icmp slt i32 %240, 10
  %246 = or i1 %244, %245
  br i1 %246, label %originalBBpart259, label %originalBB57alteredBB

originalBBpart259:                                ; preds = %originalBB57
  br label %745, !dbg !1894

247:                                              ; preds = %originalBBpart210, %originalBBpart210, %originalBBpart210
  %248 = load i32, i32* @x.35
  %249 = load i32, i32* @y.36
  %250 = sub i32 %248, 1
  %251 = mul i32 %248, %250
  %252 = urem i32 %251, 2
  %253 = icmp eq i32 %252, 0
  %254 = icmp slt i32 %249, 10
  %255 = or i1 %253, %254
  br i1 %255, label %originalBB61, label %originalBB61alteredBB

originalBB61:                                     ; preds = %247, %originalBB61alteredBB
  %256 = load i32, i32* %23, align 4, !dbg !1895
  %257 = icmp ne i32 %256, 10, !dbg !1898
  %258 = load i32, i32* @x.35
  %259 = load i32, i32* @y.36
  %260 = sub i32 %258, 1
  %261 = mul i32 %258, %260
  %262 = urem i32 %261, 2
  %263 = icmp eq i32 %262, 0
  %264 = icmp slt i32 %259, 10
  %265 = or i1 %263, %264
  br i1 %265, label %originalBBpart263, label %originalBB61alteredBB

originalBBpart263:                                ; preds = %originalBB61
  br i1 %257, label %266, label %287, !dbg !1899

266:                                              ; preds = %originalBBpart263
  %267 = load i32, i32* @x.35
  %268 = load i32, i32* @y.36
  %269 = sub i32 %267, 1
  %270 = mul i32 %267, %269
  %271 = urem i32 %270, 2
  %272 = icmp eq i32 %271, 0
  %273 = icmp slt i32 %268, 10
  %274 = or i1 %272, %273
  br i1 %274, label %originalBB65, label %originalBB65alteredBB

originalBB65:                                     ; preds = %266, %originalBB65alteredBB
  %275 = load i32, i32* %23, align 4, !dbg !1900
  %276 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.64, i64 0, i64 0), i32 %275), !dbg !1902
  store i8* %276, i8** %26, align 8, !dbg !1903
  %277 = load i32, i32* %23, align 4, !dbg !1904
  %278 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.65, i64 0, i64 0), i32 %277), !dbg !1905
  store i8* %278, i8** %27, align 8, !dbg !1906
  %279 = load i32, i32* @x.35
  %280 = load i32, i32* @y.36
  %281 = sub i32 %279, 1
  %282 = mul i32 %279, %281
  %283 = urem i32 %282, 2
  %284 = icmp eq i32 %283, 0
  %285 = icmp slt i32 %280, 10
  %286 = or i1 %284, %285
  br i1 %286, label %originalBBpart267, label %originalBB65alteredBB

originalBBpart267:                                ; preds = %originalBB65
  br label %287, !dbg !1907

287:                                              ; preds = %originalBBpart267, %originalBBpart263
  %288 = load i32, i32* @x.35
  %289 = load i32, i32* @y.36
  %290 = sub i32 %288, 1
  %291 = mul i32 %288, %290
  %292 = urem i32 %291, 2
  %293 = icmp eq i32 %292, 0
  %294 = icmp slt i32 %289, 10
  %295 = or i1 %293, %294
  br i1 %295, label %originalBB69, label %originalBB69alteredBB

originalBB69:                                     ; preds = %287, %originalBB69alteredBB
  %296 = load i8, i8* %35, align 1, !dbg !1908
  %297 = trunc i8 %296 to i1, !dbg !1908
  %298 = load i32, i32* @x.35
  %299 = load i32, i32* @y.36
  %300 = sub i32 %298, 1
  %301 = mul i32 %298, %300
  %302 = urem i32 %301, 2
  %303 = icmp eq i32 %302, 0
  %304 = icmp slt i32 %299, 10
  %305 = or i1 %303, %304
  br i1 %305, label %originalBBpart271, label %originalBB69alteredBB

originalBBpart271:                                ; preds = %originalBB69
  br i1 %297, label %475, label %306, !dbg !1910

306:                                              ; preds = %originalBBpart271
  %307 = load i32, i32* @x.35
  %308 = load i32, i32* @y.36
  %309 = sub i32 %307, 1
  %310 = mul i32 %307, %309
  %311 = urem i32 %310, 2
  %312 = icmp eq i32 %311, 0
  %313 = icmp slt i32 %308, 10
  %314 = or i1 %312, %313
  br i1 %314, label %originalBB73, label %originalBB73alteredBB

originalBB73:                                     ; preds = %306, %originalBB73alteredBB
  %315 = load i8*, i8** %26, align 8, !dbg !1911
  store i8* %315, i8** %31, align 8, !dbg !1913
  %316 = load i32, i32* @x.35
  %317 = load i32, i32* @y.36
  %318 = sub i32 %316, 1
  %319 = mul i32 %316, %318
  %320 = urem i32 %319, 2
  %321 = icmp eq i32 %320, 0
  %322 = icmp slt i32 %317, 10
  %323 = or i1 %321, %322
  br i1 %323, label %originalBBpart275, label %originalBB73alteredBB

originalBBpart275:                                ; preds = %originalBB73
  br label %324, !dbg !1914

324:                                              ; preds = %originalBBpart2117, %originalBBpart275
  %325 = load i32, i32* @x.35
  %326 = load i32, i32* @y.36
  %327 = sub i32 %325, 1
  %328 = mul i32 %325, %327
  %329 = urem i32 %328, 2
  %330 = icmp eq i32 %329, 0
  %331 = icmp slt i32 %326, 10
  %332 = or i1 %330, %331
  br i1 %332, label %originalBB77, label %originalBB77alteredBB

originalBB77:                                     ; preds = %324, %originalBB77alteredBB
  %333 = load i8*, i8** %31, align 8, !dbg !1915
  %334 = load i8, i8* %333, align 1, !dbg !1917
  %335 = icmp ne i8 %334, 0, !dbg !1918
  %336 = load i32, i32* @x.35
  %337 = load i32, i32* @y.36
  %338 = sub i32 %336, 1
  %339 = mul i32 %336, %338
  %340 = urem i32 %339, 2
  %341 = icmp eq i32 %340, 0
  %342 = icmp slt i32 %337, 10
  %343 = or i1 %341, %342
  br i1 %343, label %originalBBpart279, label %originalBB77alteredBB

originalBBpart279:                                ; preds = %originalBB77
  br i1 %335, label %344, label %458, !dbg !1918

344:                                              ; preds = %originalBBpart279
  %345 = load i32, i32* @x.35
  %346 = load i32, i32* @y.36
  %347 = sub i32 %345, 1
  %348 = mul i32 %345, %347
  %349 = urem i32 %348, 2
  %350 = icmp eq i32 %349, 0
  %351 = icmp slt i32 %346, 10
  %352 = or i1 %350, %351
  br i1 %352, label %originalBB81, label %originalBB81alteredBB

originalBB81:                                     ; preds = %344, %originalBB81alteredBB
  %353 = load i32, i32* @x.35
  %354 = load i32, i32* @y.36
  %355 = sub i32 %353, 1
  %356 = mul i32 %353, %355
  %357 = urem i32 %356, 2
  %358 = icmp eq i32 %357, 0
  %359 = icmp slt i32 %354, 10
  %360 = or i1 %358, %359
  br i1 %360, label %originalBBpart283, label %originalBB81alteredBB

originalBBpart283:                                ; preds = %originalBB81
  br label %361, !dbg !1919

361:                                              ; preds = %originalBBpart283
  %362 = load i32, i32* @x.35
  %363 = load i32, i32* @y.36
  %364 = sub i32 %362, 1
  %365 = mul i32 %362, %364
  %366 = urem i32 %365, 2
  %367 = icmp eq i32 %366, 0
  %368 = icmp slt i32 %363, 10
  %369 = or i1 %367, %368
  br i1 %369, label %originalBB85, label %originalBB85alteredBB

originalBB85:                                     ; preds = %361, %originalBB85alteredBB
  %370 = load i64, i64* %29, align 8, !dbg !1920
  %371 = load i64, i64* %20, align 8, !dbg !1920
  %372 = icmp ult i64 %370, %371, !dbg !1920
  %373 = load i32, i32* @x.35
  %374 = load i32, i32* @y.36
  %375 = sub i32 %373, 1
  %376 = mul i32 %373, %375
  %377 = urem i32 %376, 2
  %378 = icmp eq i32 %377, 0
  %379 = icmp slt i32 %374, 10
  %380 = or i1 %378, %379
  br i1 %380, label %originalBBpart287, label %originalBB85alteredBB

originalBBpart287:                                ; preds = %originalBB85
  br i1 %372, label %381, label %403, !dbg !1923

381:                                              ; preds = %originalBBpart287
  %382 = load i32, i32* @x.35
  %383 = load i32, i32* @y.36
  %384 = sub i32 %382, 1
  %385 = mul i32 %382, %384
  %386 = urem i32 %385, 2
  %387 = icmp eq i32 %386, 0
  %388 = icmp slt i32 %383, 10
  %389 = or i1 %387, %388
  br i1 %389, label %originalBB89, label %originalBB89alteredBB

originalBB89:                                     ; preds = %381, %originalBB89alteredBB
  %390 = load i8*, i8** %31, align 8, !dbg !1920
  %391 = load i8, i8* %390, align 1, !dbg !1920
  %392 = load i8*, i8** %19, align 8, !dbg !1920
  %393 = load i64, i64* %29, align 8, !dbg !1920
  %394 = getelementptr inbounds i8, i8* %392, i64 %393, !dbg !1920
  store i8 %391, i8* %394, align 1, !dbg !1920
  %395 = load i32, i32* @x.35
  %396 = load i32, i32* @y.36
  %397 = sub i32 %395, 1
  %398 = mul i32 %395, %397
  %399 = urem i32 %398, 2
  %400 = icmp eq i32 %399, 0
  %401 = icmp slt i32 %396, 10
  %402 = or i1 %400, %401
  br i1 %402, label %originalBBpart291, label %originalBB89alteredBB

originalBBpart291:                                ; preds = %originalBB89
  br label %403, !dbg !1920

403:                                              ; preds = %originalBBpart291, %originalBBpart287
  %404 = load i32, i32* @x.35
  %405 = load i32, i32* @y.36
  %406 = sub i32 %404, 1
  %407 = mul i32 %404, %406
  %408 = urem i32 %407, 2
  %409 = icmp eq i32 %408, 0
  %410 = icmp slt i32 %405, 10
  %411 = or i1 %409, %410
  br i1 %411, label %originalBB93, label %originalBB93alteredBB

originalBB93:                                     ; preds = %403, %originalBB93alteredBB
  %412 = load i64, i64* %29, align 8, !dbg !1923
  %413 = add i64 %412, 1, !dbg !1923
  store i64 %413, i64* %29, align 8, !dbg !1923
  %414 = load i32, i32* @x.35
  %415 = load i32, i32* @y.36
  %416 = sub i32 %414, 1
  %417 = mul i32 %414, %416
  %418 = urem i32 %417, 2
  %419 = icmp eq i32 %418, 0
  %420 = icmp slt i32 %415, 10
  %421 = or i1 %419, %420
  br i1 %421, label %originalBBpart2109, label %originalBB93alteredBB

originalBBpart2109:                               ; preds = %originalBB93
  br label %422, !dbg !1923

422:                                              ; preds = %originalBBpart2109
  %423 = load i32, i32* @x.35
  %424 = load i32, i32* @y.36
  %425 = sub i32 %423, 1
  %426 = mul i32 %423, %425
  %427 = urem i32 %426, 2
  %428 = icmp eq i32 %427, 0
  %429 = icmp slt i32 %424, 10
  %430 = or i1 %428, %429
  br i1 %430, label %originalBB111, label %originalBB111alteredBB

originalBB111:                                    ; preds = %422, %originalBB111alteredBB
  %431 = load i32, i32* @x.35
  %432 = load i32, i32* @y.36
  %433 = sub i32 %431, 1
  %434 = mul i32 %431, %433
  %435 = urem i32 %434, 2
  %436 = icmp eq i32 %435, 0
  %437 = icmp slt i32 %432, 10
  %438 = or i1 %436, %437
  br i1 %438, label %originalBBpart2113, label %originalBB111alteredBB

originalBBpart2113:                               ; preds = %originalBB111
  br label %439, !dbg !1923

439:                                              ; preds = %originalBBpart2113
  %440 = load i32, i32* @x.35
  %441 = load i32, i32* @y.36
  %442 = sub i32 %440, 1
  %443 = mul i32 %440, %442
  %444 = urem i32 %443, 2
  %445 = icmp eq i32 %444, 0
  %446 = icmp slt i32 %441, 10
  %447 = or i1 %445, %446
  br i1 %447, label %originalBB115, label %originalBB115alteredBB

originalBB115:                                    ; preds = %439, %originalBB115alteredBB
  %448 = load i8*, i8** %31, align 8, !dbg !1924
  %449 = getelementptr inbounds i8, i8* %448, i32 1, !dbg !1924
  store i8* %449, i8** %31, align 8, !dbg !1924
  %450 = load i32, i32* @x.35
  %451 = load i32, i32* @y.36
  %452 = sub i32 %450, 1
  %453 = mul i32 %450, %452
  %454 = urem i32 %453, 2
  %455 = icmp eq i32 %454, 0
  %456 = icmp slt i32 %451, 10
  %457 = or i1 %455, %456
  br i1 %457, label %originalBBpart2117, label %originalBB115alteredBB

originalBBpart2117:                               ; preds = %originalBB115
  br label %324, !dbg !1925, !llvm.loop !1926

458:                                              ; preds = %originalBBpart279
  %459 = load i32, i32* @x.35
  %460 = load i32, i32* @y.36
  %461 = sub i32 %459, 1
  %462 = mul i32 %459, %461
  %463 = urem i32 %462, 2
  %464 = icmp eq i32 %463, 0
  %465 = icmp slt i32 %460, 10
  %466 = or i1 %464, %465
  br i1 %466, label %originalBB119, label %originalBB119alteredBB

originalBB119:                                    ; preds = %458, %originalBB119alteredBB
  %467 = load i32, i32* @x.35
  %468 = load i32, i32* @y.36
  %469 = sub i32 %467, 1
  %470 = mul i32 %467, %469
  %471 = urem i32 %470, 2
  %472 = icmp eq i32 %471, 0
  %473 = icmp slt i32 %468, 10
  %474 = or i1 %472, %473
  br i1 %474, label %originalBBpart2121, label %originalBB119alteredBB

originalBBpart2121:                               ; preds = %originalBB119
  br label %475, !dbg !1927

475:                                              ; preds = %originalBBpart2121, %originalBBpart271
  %476 = load i32, i32* @x.35
  %477 = load i32, i32* @y.36
  %478 = sub i32 %476, 1
  %479 = mul i32 %476, %478
  %480 = urem i32 %479, 2
  %481 = icmp eq i32 %480, 0
  %482 = icmp slt i32 %477, 10
  %483 = or i1 %481, %482
  br i1 %483, label %originalBB123, label %originalBB123alteredBB

originalBB123:                                    ; preds = %475, %originalBB123alteredBB
  store i8 1, i8* %33, align 1, !dbg !1928
  %484 = load i8*, i8** %27, align 8, !dbg !1929
  store i8* %484, i8** %31, align 8, !dbg !1930
  %485 = load i8*, i8** %31, align 8, !dbg !1931
  %486 = call i64 @strlen(i8* %485) #13, !dbg !1932
  store i64 %486, i64* %32, align 8, !dbg !1933
  %487 = load i32, i32* @x.35
  %488 = load i32, i32* @y.36
  %489 = sub i32 %487, 1
  %490 = mul i32 %487, %489
  %491 = urem i32 %490, 2
  %492 = icmp eq i32 %491, 0
  %493 = icmp slt i32 %488, 10
  %494 = or i1 %492, %493
  br i1 %494, label %originalBBpart2125, label %originalBB123alteredBB

originalBBpart2125:                               ; preds = %originalBB123
  br label %745, !dbg !1934

495:                                              ; preds = %originalBBpart210
  %496 = load i32, i32* @x.35
  %497 = load i32, i32* @y.36
  %498 = sub i32 %496, 1
  %499 = mul i32 %496, %498
  %500 = urem i32 %499, 2
  %501 = icmp eq i32 %500, 0
  %502 = icmp slt i32 %497, 10
  %503 = or i1 %501, %502
  br i1 %503, label %originalBB127, label %originalBB127alteredBB

originalBB127:                                    ; preds = %495, %originalBB127alteredBB
  store i8 1, i8* %33, align 1, !dbg !1935
  %504 = load i32, i32* @x.35
  %505 = load i32, i32* @y.36
  %506 = sub i32 %504, 1
  %507 = mul i32 %504, %506
  %508 = urem i32 %507, 2
  %509 = icmp eq i32 %508, 0
  %510 = icmp slt i32 %505, 10
  %511 = or i1 %509, %510
  br i1 %511, label %originalBBpart2129, label %originalBB127alteredBB

originalBBpart2129:                               ; preds = %originalBB127
  br label %512, !dbg !1936

512:                                              ; preds = %originalBBpart2129, %originalBBpart210
  %513 = load i32, i32* @x.35
  %514 = load i32, i32* @y.36
  %515 = sub i32 %513, 1
  %516 = mul i32 %513, %515
  %517 = urem i32 %516, 2
  %518 = icmp eq i32 %517, 0
  %519 = icmp slt i32 %514, 10
  %520 = or i1 %518, %519
  br i1 %520, label %originalBB131, label %originalBB131alteredBB

originalBB131:                                    ; preds = %512, %originalBB131alteredBB
  store i8 1, i8* %35, align 1, !dbg !1937
  %521 = load i32, i32* @x.35
  %522 = load i32, i32* @y.36
  %523 = sub i32 %521, 1
  %524 = mul i32 %521, %523
  %525 = urem i32 %524, 2
  %526 = icmp eq i32 %525, 0
  %527 = icmp slt i32 %522, 10
  %528 = or i1 %526, %527
  br i1 %528, label %originalBBpart2133, label %originalBB131alteredBB

originalBBpart2133:                               ; preds = %originalBB131
  br label %529, !dbg !1938

529:                                              ; preds = %originalBBpart2133, %originalBBpart210
  %530 = load i32, i32* @x.35
  %531 = load i32, i32* @y.36
  %532 = sub i32 %530, 1
  %533 = mul i32 %530, %532
  %534 = urem i32 %533, 2
  %535 = icmp eq i32 %534, 0
  %536 = icmp slt i32 %531, 10
  %537 = or i1 %535, %536
  br i1 %537, label %originalBB135, label %originalBB135alteredBB

originalBB135:                                    ; preds = %529, %originalBB135alteredBB
  %538 = load i8, i8* %35, align 1, !dbg !1939
  %539 = trunc i8 %538 to i1, !dbg !1939
  %540 = load i32, i32* @x.35
  %541 = load i32, i32* @y.36
  %542 = sub i32 %540, 1
  %543 = mul i32 %540, %542
  %544 = urem i32 %543, 2
  %545 = icmp eq i32 %544, 0
  %546 = icmp slt i32 %541, 10
  %547 = or i1 %545, %546
  br i1 %547, label %originalBBpart2137, label %originalBB135alteredBB

originalBBpart2137:                               ; preds = %originalBB135
  br i1 %539, label %565, label %548, !dbg !1941

548:                                              ; preds = %originalBBpart2137
  %549 = load i32, i32* @x.35
  %550 = load i32, i32* @y.36
  %551 = sub i32 %549, 1
  %552 = mul i32 %549, %551
  %553 = urem i32 %552, 2
  %554 = icmp eq i32 %553, 0
  %555 = icmp slt i32 %550, 10
  %556 = or i1 %554, %555
  br i1 %556, label %originalBB139, label %originalBB139alteredBB

originalBB139:                                    ; preds = %548, %originalBB139alteredBB
  store i8 1, i8* %33, align 1, !dbg !1942
  %557 = load i32, i32* @x.35
  %558 = load i32, i32* @y.36
  %559 = sub i32 %557, 1
  %560 = mul i32 %557, %559
  %561 = urem i32 %560, 2
  %562 = icmp eq i32 %561, 0
  %563 = icmp slt i32 %558, 10
  %564 = or i1 %562, %563
  br i1 %564, label %originalBBpart2141, label %originalBB139alteredBB

originalBBpart2141:                               ; preds = %originalBB139
  br label %565, !dbg !1943

565:                                              ; preds = %originalBBpart2141, %originalBBpart2137
  %566 = load i32, i32* @x.35
  %567 = load i32, i32* @y.36
  %568 = sub i32 %566, 1
  %569 = mul i32 %566, %568
  %570 = urem i32 %569, 2
  %571 = icmp eq i32 %570, 0
  %572 = icmp slt i32 %567, 10
  %573 = or i1 %571, %572
  br i1 %573, label %originalBB143, label %originalBB143alteredBB

originalBB143:                                    ; preds = %565, %originalBB143alteredBB
  %574 = load i32, i32* @x.35
  %575 = load i32, i32* @y.36
  %576 = sub i32 %574, 1
  %577 = mul i32 %574, %576
  %578 = urem i32 %577, 2
  %579 = icmp eq i32 %578, 0
  %580 = icmp slt i32 %575, 10
  %581 = or i1 %579, %580
  br i1 %581, label %originalBBpart2145, label %originalBB143alteredBB

originalBBpart2145:                               ; preds = %originalBB143
  br label %582, !dbg !1944

582:                                              ; preds = %originalBBpart2145, %originalBBpart210
  %583 = load i32, i32* @x.35
  %584 = load i32, i32* @y.36
  %585 = sub i32 %583, 1
  %586 = mul i32 %583, %585
  %587 = urem i32 %586, 2
  %588 = icmp eq i32 %587, 0
  %589 = icmp slt i32 %584, 10
  %590 = or i1 %588, %589
  br i1 %590, label %originalBB147, label %originalBB147alteredBB

originalBB147:                                    ; preds = %582, %originalBB147alteredBB
  store i32 2, i32* %23, align 4, !dbg !1945
  %591 = load i8, i8* %35, align 1, !dbg !1946
  %592 = trunc i8 %591 to i1, !dbg !1946
  %593 = load i32, i32* @x.35
  %594 = load i32, i32* @y.36
  %595 = sub i32 %593, 1
  %596 = mul i32 %593, %595
  %597 = urem i32 %596, 2
  %598 = icmp eq i32 %597, 0
  %599 = icmp slt i32 %594, 10
  %600 = or i1 %598, %599
  br i1 %600, label %originalBBpart2149, label %originalBB147alteredBB

originalBBpart2149:                               ; preds = %originalBB147
  br i1 %592, label %694, label %601, !dbg !1948

601:                                              ; preds = %originalBBpart2149
  %602 = load i32, i32* @x.35
  %603 = load i32, i32* @y.36
  %604 = sub i32 %602, 1
  %605 = mul i32 %602, %604
  %606 = urem i32 %605, 2
  %607 = icmp eq i32 %606, 0
  %608 = icmp slt i32 %603, 10
  %609 = or i1 %607, %608
  br i1 %609, label %originalBB151, label %originalBB151alteredBB

originalBB151:                                    ; preds = %601, %originalBB151alteredBB
  %610 = load i32, i32* @x.35
  %611 = load i32, i32* @y.36
  %612 = sub i32 %610, 1
  %613 = mul i32 %610, %612
  %614 = urem i32 %613, 2
  %615 = icmp eq i32 %614, 0
  %616 = icmp slt i32 %611, 10
  %617 = or i1 %615, %616
  br i1 %617, label %originalBBpart2153, label %originalBB151alteredBB

originalBBpart2153:                               ; preds = %originalBB151
  br label %618, !dbg !1949

618:                                              ; preds = %originalBBpart2153
  %619 = load i32, i32* @x.35
  %620 = load i32, i32* @y.36
  %621 = sub i32 %619, 1
  %622 = mul i32 %619, %621
  %623 = urem i32 %622, 2
  %624 = icmp eq i32 %623, 0
  %625 = icmp slt i32 %620, 10
  %626 = or i1 %624, %625
  br i1 %626, label %originalBB155, label %originalBB155alteredBB

originalBB155:                                    ; preds = %618, %originalBB155alteredBB
  %627 = load i64, i64* %29, align 8, !dbg !1950
  %628 = load i64, i64* %20, align 8, !dbg !1950
  %629 = icmp ult i64 %627, %628, !dbg !1950
  %630 = load i32, i32* @x.35
  %631 = load i32, i32* @y.36
  %632 = sub i32 %630, 1
  %633 = mul i32 %630, %632
  %634 = urem i32 %633, 2
  %635 = icmp eq i32 %634, 0
  %636 = icmp slt i32 %631, 10
  %637 = or i1 %635, %636
  br i1 %637, label %originalBBpart2157, label %originalBB155alteredBB

originalBBpart2157:                               ; preds = %originalBB155
  br i1 %629, label %638, label %658, !dbg !1953

638:                                              ; preds = %originalBBpart2157
  %639 = load i32, i32* @x.35
  %640 = load i32, i32* @y.36
  %641 = sub i32 %639, 1
  %642 = mul i32 %639, %641
  %643 = urem i32 %642, 2
  %644 = icmp eq i32 %643, 0
  %645 = icmp slt i32 %640, 10
  %646 = or i1 %644, %645
  br i1 %646, label %originalBB159, label %originalBB159alteredBB

originalBB159:                                    ; preds = %638, %originalBB159alteredBB
  %647 = load i8*, i8** %19, align 8, !dbg !1950
  %648 = load i64, i64* %29, align 8, !dbg !1950
  %649 = getelementptr inbounds i8, i8* %647, i64 %648, !dbg !1950
  store i8 39, i8* %649, align 1, !dbg !1950
  %650 = load i32, i32* @x.35
  %651 = load i32, i32* @y.36
  %652 = sub i32 %650, 1
  %653 = mul i32 %650, %652
  %654 = urem i32 %653, 2
  %655 = icmp eq i32 %654, 0
  %656 = icmp slt i32 %651, 10
  %657 = or i1 %655, %656
  br i1 %657, label %originalBBpart2161, label %originalBB159alteredBB

originalBBpart2161:                               ; preds = %originalBB159
  br label %658, !dbg !1950

658:                                              ; preds = %originalBBpart2161, %originalBBpart2157
  %659 = load i32, i32* @x.35
  %660 = load i32, i32* @y.36
  %661 = sub i32 %659, 1
  %662 = mul i32 %659, %661
  %663 = urem i32 %662, 2
  %664 = icmp eq i32 %663, 0
  %665 = icmp slt i32 %660, 10
  %666 = or i1 %664, %665
  br i1 %666, label %originalBB163, label %originalBB163alteredBB

originalBB163:                                    ; preds = %658, %originalBB163alteredBB
  %667 = load i64, i64* %29, align 8, !dbg !1953
  %668 = add i64 %667, 1, !dbg !1953
  store i64 %668, i64* %29, align 8, !dbg !1953
  %669 = load i32, i32* @x.35
  %670 = load i32, i32* @y.36
  %671 = sub i32 %669, 1
  %672 = mul i32 %669, %671
  %673 = urem i32 %672, 2
  %674 = icmp eq i32 %673, 0
  %675 = icmp slt i32 %670, 10
  %676 = or i1 %674, %675
  br i1 %676, label %originalBBpart2178, label %originalBB163alteredBB

originalBBpart2178:                               ; preds = %originalBB163
  br label %677, !dbg !1953

677:                                              ; preds = %originalBBpart2178
  %678 = load i32, i32* @x.35
  %679 = load i32, i32* @y.36
  %680 = sub i32 %678, 1
  %681 = mul i32 %678, %680
  %682 = urem i32 %681, 2
  %683 = icmp eq i32 %682, 0
  %684 = icmp slt i32 %679, 10
  %685 = or i1 %683, %684
  br i1 %685, label %originalBB180, label %originalBB180alteredBB

originalBB180:                                    ; preds = %677, %originalBB180alteredBB
  %686 = load i32, i32* @x.35
  %687 = load i32, i32* @y.36
  %688 = sub i32 %686, 1
  %689 = mul i32 %686, %688
  %690 = urem i32 %689, 2
  %691 = icmp eq i32 %690, 0
  %692 = icmp slt i32 %687, 10
  %693 = or i1 %691, %692
  br i1 %693, label %originalBBpart2182, label %originalBB180alteredBB

originalBBpart2182:                               ; preds = %originalBB180
  br label %694, !dbg !1953

694:                                              ; preds = %originalBBpart2182, %originalBBpart2149
  %695 = load i32, i32* @x.35
  %696 = load i32, i32* @y.36
  %697 = sub i32 %695, 1
  %698 = mul i32 %695, %697
  %699 = urem i32 %698, 2
  %700 = icmp eq i32 %699, 0
  %701 = icmp slt i32 %696, 10
  %702 = or i1 %700, %701
  br i1 %702, label %originalBB184, label %originalBB184alteredBB

originalBB184:                                    ; preds = %694, %originalBB184alteredBB
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.65, i64 0, i64 0), i8** %31, align 8, !dbg !1954
  store i64 1, i64* %32, align 8, !dbg !1955
  %703 = load i32, i32* @x.35
  %704 = load i32, i32* @y.36
  %705 = sub i32 %703, 1
  %706 = mul i32 %703, %705
  %707 = urem i32 %706, 2
  %708 = icmp eq i32 %707, 0
  %709 = icmp slt i32 %704, 10
  %710 = or i1 %708, %709
  br i1 %710, label %originalBBpart2186, label %originalBB184alteredBB

originalBBpart2186:                               ; preds = %originalBB184
  br label %745, !dbg !1956

711:                                              ; preds = %originalBBpart210
  %712 = load i32, i32* @x.35
  %713 = load i32, i32* @y.36
  %714 = sub i32 %712, 1
  %715 = mul i32 %712, %714
  %716 = urem i32 %715, 2
  %717 = icmp eq i32 %716, 0
  %718 = icmp slt i32 %713, 10
  %719 = or i1 %717, %718
  br i1 %719, label %originalBB188, label %originalBB188alteredBB

originalBB188:                                    ; preds = %711, %originalBB188alteredBB
  store i8 0, i8* %35, align 1, !dbg !1957
  %720 = load i32, i32* @x.35
  %721 = load i32, i32* @y.36
  %722 = sub i32 %720, 1
  %723 = mul i32 %720, %722
  %724 = urem i32 %723, 2
  %725 = icmp eq i32 %724, 0
  %726 = icmp slt i32 %721, 10
  %727 = or i1 %725, %726
  br i1 %727, label %originalBBpart2190, label %originalBB188alteredBB

originalBBpart2190:                               ; preds = %originalBB188
  br label %745, !dbg !1958

728:                                              ; preds = %originalBBpart210
  %729 = load i32, i32* @x.35
  %730 = load i32, i32* @y.36
  %731 = sub i32 %729, 1
  %732 = mul i32 %729, %731
  %733 = urem i32 %732, 2
  %734 = icmp eq i32 %733, 0
  %735 = icmp slt i32 %730, 10
  %736 = or i1 %734, %735
  br i1 %736, label %originalBB192, label %originalBB192alteredBB

originalBB192:                                    ; preds = %728, %originalBB192alteredBB
  call void @abort() #12, !dbg !1959
  %737 = load i32, i32* @x.35
  %738 = load i32, i32* @y.36
  %739 = sub i32 %737, 1
  %740 = mul i32 %737, %739
  %741 = urem i32 %740, 2
  %742 = icmp eq i32 %741, 0
  %743 = icmp slt i32 %738, 10
  %744 = or i1 %742, %743
  br i1 %744, label %originalBBpart2194, label %originalBB192alteredBB

originalBBpart2194:                               ; preds = %originalBB192
  unreachable, !dbg !1959

745:                                              ; preds = %originalBBpart2190, %originalBBpart2186, %originalBBpart2125, %originalBBpart259, %originalBBpart255
  %746 = load i32, i32* @x.35
  %747 = load i32, i32* @y.36
  %748 = sub i32 %746, 1
  %749 = mul i32 %746, %748
  %750 = urem i32 %749, 2
  %751 = icmp eq i32 %750, 0
  %752 = icmp slt i32 %747, 10
  %753 = or i1 %751, %752
  br i1 %753, label %originalBB196, label %originalBB196alteredBB

originalBB196:                                    ; preds = %745, %originalBB196alteredBB
  store i64 0, i64* %28, align 8, !dbg !1960
  %754 = load i32, i32* @x.35
  %755 = load i32, i32* @y.36
  %756 = sub i32 %754, 1
  %757 = mul i32 %754, %756
  %758 = urem i32 %757, 2
  %759 = icmp eq i32 %758, 0
  %760 = icmp slt i32 %755, 10
  %761 = or i1 %759, %760
  br i1 %761, label %originalBBpart2198, label %originalBB196alteredBB

originalBBpart2198:                               ; preds = %originalBB196
  br label %762, !dbg !1962

762:                                              ; preds = %originalBBpart22294, %originalBBpart2198
  %763 = load i32, i32* @x.35
  %764 = load i32, i32* @y.36
  %765 = sub i32 %763, 1
  %766 = mul i32 %763, %765
  %767 = urem i32 %766, 2
  %768 = icmp eq i32 %767, 0
  %769 = icmp slt i32 %764, 10
  %770 = or i1 %768, %769
  br i1 %770, label %originalBB200, label %originalBB200alteredBB

originalBB200:                                    ; preds = %762, %originalBB200alteredBB
  %771 = load i64, i64* %22, align 8, !dbg !1963
  %772 = icmp eq i64 %771, -1, !dbg !1965
  %773 = load i32, i32* @x.35
  %774 = load i32, i32* @y.36
  %775 = sub i32 %773, 1
  %776 = mul i32 %773, %775
  %777 = urem i32 %776, 2
  %778 = icmp eq i32 %777, 0
  %779 = icmp slt i32 %774, 10
  %780 = or i1 %778, %779
  br i1 %780, label %originalBBpart2202, label %originalBB200alteredBB

originalBBpart2202:                               ; preds = %originalBB200
  br i1 %772, label %781, label %805, !dbg !1963

781:                                              ; preds = %originalBBpart2202
  %782 = load i32, i32* @x.35
  %783 = load i32, i32* @y.36
  %784 = sub i32 %782, 1
  %785 = mul i32 %782, %784
  %786 = urem i32 %785, 2
  %787 = icmp eq i32 %786, 0
  %788 = icmp slt i32 %783, 10
  %789 = or i1 %787, %788
  br i1 %789, label %originalBB204, label %originalBB204alteredBB

originalBB204:                                    ; preds = %781, %originalBB204alteredBB
  %790 = load i8*, i8** %21, align 8, !dbg !1966
  %791 = load i64, i64* %28, align 8, !dbg !1967
  %792 = getelementptr inbounds i8, i8* %790, i64 %791, !dbg !1966
  %793 = load i8, i8* %792, align 1, !dbg !1966
  %794 = sext i8 %793 to i32, !dbg !1966
  %795 = icmp eq i32 %794, 0, !dbg !1968
  %796 = zext i1 %795 to i32, !dbg !1968
  %797 = load i32, i32* @x.35
  %798 = load i32, i32* @y.36
  %799 = sub i32 %797, 1
  %800 = mul i32 %797, %799
  %801 = urem i32 %800, 2
  %802 = icmp eq i32 %801, 0
  %803 = icmp slt i32 %798, 10
  %804 = or i1 %802, %803
  br i1 %804, label %originalBBpart2206, label %originalBB204alteredBB

originalBBpart2206:                               ; preds = %originalBB204
  br label %826, !dbg !1963

805:                                              ; preds = %originalBBpart2202
  %806 = load i32, i32* @x.35
  %807 = load i32, i32* @y.36
  %808 = sub i32 %806, 1
  %809 = mul i32 %806, %808
  %810 = urem i32 %809, 2
  %811 = icmp eq i32 %810, 0
  %812 = icmp slt i32 %807, 10
  %813 = or i1 %811, %812
  br i1 %813, label %originalBB208, label %originalBB208alteredBB

originalBB208:                                    ; preds = %805, %originalBB208alteredBB
  %814 = load i64, i64* %28, align 8, !dbg !1969
  %815 = load i64, i64* %22, align 8, !dbg !1970
  %816 = icmp eq i64 %814, %815, !dbg !1971
  %817 = zext i1 %816 to i32, !dbg !1971
  %818 = load i32, i32* @x.35
  %819 = load i32, i32* @y.36
  %820 = sub i32 %818, 1
  %821 = mul i32 %818, %820
  %822 = urem i32 %821, 2
  %823 = icmp eq i32 %822, 0
  %824 = icmp slt i32 %819, 10
  %825 = or i1 %823, %824
  br i1 %825, label %originalBBpart2210, label %originalBB208alteredBB

originalBBpart2210:                               ; preds = %originalBB208
  br label %826, !dbg !1963

826:                                              ; preds = %originalBBpart2210, %originalBBpart2206
  %827 = phi i32 [ %796, %originalBBpart2206 ], [ %817, %originalBBpart2210 ], !dbg !1963
  %828 = load i32, i32* @x.35
  %829 = load i32, i32* @y.36
  %830 = sub i32 %828, 1
  %831 = mul i32 %828, %830
  %832 = urem i32 %831, 2
  %833 = icmp eq i32 %832, 0
  %834 = icmp slt i32 %829, 10
  %835 = or i1 %833, %834
  br i1 %835, label %originalBB212, label %originalBB212alteredBB

originalBB212:                                    ; preds = %826, %originalBB212alteredBB
  %836 = icmp ne i32 %827, 0, !dbg !1972
  %837 = xor i1 %836, true, !dbg !1972
  %838 = load i32, i32* @x.35
  %839 = load i32, i32* @y.36
  %840 = sub i32 %838, 1
  %841 = mul i32 %838, %840
  %842 = urem i32 %841, 2
  %843 = icmp eq i32 %842, 0
  %844 = icmp slt i32 %839, 10
  %845 = or i1 %843, %844
  br i1 %845, label %originalBBpart2222, label %originalBB212alteredBB

originalBBpart2222:                               ; preds = %originalBB212
  br i1 %837, label %846, label %6739, !dbg !1973

846:                                              ; preds = %originalBBpart2222
  call void @llvm.dbg.declare(metadata i8* %39, metadata !1974, metadata !DIExpression()), !dbg !1976
  call void @llvm.dbg.declare(metadata i8* %40, metadata !1977, metadata !DIExpression()), !dbg !1978
  call void @llvm.dbg.declare(metadata i8* %41, metadata !1979, metadata !DIExpression()), !dbg !1980
  %847 = load i32, i32* @x.35
  %848 = load i32, i32* @y.36
  %849 = sub i32 %847, 1
  %850 = mul i32 %847, %849
  %851 = urem i32 %850, 2
  %852 = icmp eq i32 %851, 0
  %853 = icmp slt i32 %848, 10
  %854 = or i1 %852, %853
  br i1 %854, label %originalBB224, label %originalBB224alteredBB

originalBB224:                                    ; preds = %846, %originalBB224alteredBB
  store i8 0, i8* %41, align 1, !dbg !1980
  call void @llvm.dbg.declare(metadata i8* %42, metadata !1981, metadata !DIExpression()), !dbg !1982
  store i8 0, i8* %42, align 1, !dbg !1982
  call void @llvm.dbg.declare(metadata i8* %43, metadata !1983, metadata !DIExpression()), !dbg !1984
  store i8 0, i8* %43, align 1, !dbg !1984
  %855 = load i8, i8* %33, align 1, !dbg !1985
  %856 = trunc i8 %855 to i1, !dbg !1985
  %857 = load i32, i32* @x.35
  %858 = load i32, i32* @y.36
  %859 = sub i32 %857, 1
  %860 = mul i32 %857, %859
  %861 = urem i32 %860, 2
  %862 = icmp eq i32 %861, 0
  %863 = icmp slt i32 %858, 10
  %864 = or i1 %862, %863
  br i1 %864, label %originalBBpart2226, label %originalBB224alteredBB

originalBBpart2226:                               ; preds = %originalBB224
  br i1 %856, label %865, label %1077, !dbg !1987

865:                                              ; preds = %originalBBpart2226
  %866 = load i32, i32* @x.35
  %867 = load i32, i32* @y.36
  %868 = sub i32 %866, 1
  %869 = mul i32 %866, %868
  %870 = urem i32 %869, 2
  %871 = icmp eq i32 %870, 0
  %872 = icmp slt i32 %867, 10
  %873 = or i1 %871, %872
  br i1 %873, label %originalBB228, label %originalBB228alteredBB

originalBB228:                                    ; preds = %865, %originalBB228alteredBB
  %874 = load i32, i32* %23, align 4, !dbg !1988
  %875 = icmp ne i32 %874, 2, !dbg !1989
  %876 = load i32, i32* @x.35
  %877 = load i32, i32* @y.36
  %878 = sub i32 %876, 1
  %879 = mul i32 %876, %878
  %880 = urem i32 %879, 2
  %881 = icmp eq i32 %880, 0
  %882 = icmp slt i32 %877, 10
  %883 = or i1 %881, %882
  br i1 %883, label %originalBBpart2230, label %originalBB228alteredBB

originalBBpart2230:                               ; preds = %originalBB228
  br i1 %875, label %884, label %1077, !dbg !1990

884:                                              ; preds = %originalBBpart2230
  %885 = load i32, i32* @x.35
  %886 = load i32, i32* @y.36
  %887 = sub i32 %885, 1
  %888 = mul i32 %885, %887
  %889 = urem i32 %888, 2
  %890 = icmp eq i32 %889, 0
  %891 = icmp slt i32 %886, 10
  %892 = or i1 %890, %891
  br i1 %892, label %originalBB232, label %originalBB232alteredBB

originalBB232:                                    ; preds = %884, %originalBB232alteredBB
  %893 = load i64, i64* %32, align 8, !dbg !1991
  %894 = icmp ne i64 %893, 0, !dbg !1991
  %895 = load i32, i32* @x.35
  %896 = load i32, i32* @y.36
  %897 = sub i32 %895, 1
  %898 = mul i32 %895, %897
  %899 = urem i32 %898, 2
  %900 = icmp eq i32 %899, 0
  %901 = icmp slt i32 %896, 10
  %902 = or i1 %900, %901
  br i1 %902, label %originalBBpart2234, label %originalBB232alteredBB

originalBBpart2234:                               ; preds = %originalBB232
  br i1 %894, label %903, label %1077, !dbg !1992

903:                                              ; preds = %originalBBpart2234
  %904 = load i32, i32* @x.35
  %905 = load i32, i32* @y.36
  %906 = sub i32 %904, 1
  %907 = mul i32 %904, %906
  %908 = urem i32 %907, 2
  %909 = icmp eq i32 %908, 0
  %910 = icmp slt i32 %905, 10
  %911 = or i1 %909, %910
  br i1 %911, label %originalBB236, label %originalBB236alteredBB

originalBB236:                                    ; preds = %903, %originalBB236alteredBB
  %912 = load i64, i64* %28, align 8, !dbg !1993
  %913 = load i64, i64* %32, align 8, !dbg !1994
  %914 = add i64 %912, %913, !dbg !1995
  %915 = load i64, i64* %22, align 8, !dbg !1996
  %916 = icmp eq i64 %915, -1, !dbg !1997
  %917 = load i32, i32* @x.35
  %918 = load i32, i32* @y.36
  %919 = sub i32 %917, 1
  %920 = mul i32 %917, %919
  %921 = urem i32 %920, 2
  %922 = icmp eq i32 %921, 0
  %923 = icmp slt i32 %918, 10
  %924 = or i1 %922, %923
  br i1 %924, label %originalBBpart2243, label %originalBB236alteredBB

originalBBpart2243:                               ; preds = %originalBB236
  br i1 %916, label %925, label %963, !dbg !1998

925:                                              ; preds = %originalBBpart2243
  %926 = load i32, i32* @x.35
  %927 = load i32, i32* @y.36
  %928 = sub i32 %926, 1
  %929 = mul i32 %926, %928
  %930 = urem i32 %929, 2
  %931 = icmp eq i32 %930, 0
  %932 = icmp slt i32 %927, 10
  %933 = or i1 %931, %932
  br i1 %933, label %originalBB245, label %originalBB245alteredBB

originalBB245:                                    ; preds = %925, %originalBB245alteredBB
  %934 = load i64, i64* %32, align 8, !dbg !1999
  %935 = icmp ult i64 1, %934, !dbg !2000
  %936 = load i32, i32* @x.35
  %937 = load i32, i32* @y.36
  %938 = sub i32 %936, 1
  %939 = mul i32 %936, %938
  %940 = urem i32 %939, 2
  %941 = icmp eq i32 %940, 0
  %942 = icmp slt i32 %937, 10
  %943 = or i1 %941, %942
  br i1 %943, label %originalBBpart2247, label %originalBB245alteredBB

originalBBpart2247:                               ; preds = %originalBB245
  br i1 %935, label %944, label %963, !dbg !1996

944:                                              ; preds = %originalBBpart2247
  %945 = load i32, i32* @x.35
  %946 = load i32, i32* @y.36
  %947 = sub i32 %945, 1
  %948 = mul i32 %945, %947
  %949 = urem i32 %948, 2
  %950 = icmp eq i32 %949, 0
  %951 = icmp slt i32 %946, 10
  %952 = or i1 %950, %951
  br i1 %952, label %originalBB249, label %originalBB249alteredBB

originalBB249:                                    ; preds = %944, %originalBB249alteredBB
  %953 = load i8*, i8** %21, align 8, !dbg !2001
  %954 = call i64 @strlen(i8* %953) #13, !dbg !2002
  store i64 %954, i64* %22, align 8, !dbg !2003
  %955 = load i32, i32* @x.35
  %956 = load i32, i32* @y.36
  %957 = sub i32 %955, 1
  %958 = mul i32 %955, %957
  %959 = urem i32 %958, 2
  %960 = icmp eq i32 %959, 0
  %961 = icmp slt i32 %956, 10
  %962 = or i1 %960, %961
  br i1 %962, label %originalBBpart2251, label %originalBB249alteredBB

originalBBpart2251:                               ; preds = %originalBB249
  br label %981, !dbg !1996

963:                                              ; preds = %originalBBpart2247, %originalBBpart2243
  %964 = load i32, i32* @x.35
  %965 = load i32, i32* @y.36
  %966 = sub i32 %964, 1
  %967 = mul i32 %964, %966
  %968 = urem i32 %967, 2
  %969 = icmp eq i32 %968, 0
  %970 = icmp slt i32 %965, 10
  %971 = or i1 %969, %970
  br i1 %971, label %originalBB253, label %originalBB253alteredBB

originalBB253:                                    ; preds = %963, %originalBB253alteredBB
  %972 = load i64, i64* %22, align 8, !dbg !2004
  %973 = load i32, i32* @x.35
  %974 = load i32, i32* @y.36
  %975 = sub i32 %973, 1
  %976 = mul i32 %973, %975
  %977 = urem i32 %976, 2
  %978 = icmp eq i32 %977, 0
  %979 = icmp slt i32 %974, 10
  %980 = or i1 %978, %979
  br i1 %980, label %originalBBpart2255, label %originalBB253alteredBB

originalBBpart2255:                               ; preds = %originalBB253
  br label %981, !dbg !1996

981:                                              ; preds = %originalBBpart2255, %originalBBpart2251
  %982 = phi i64 [ %954, %originalBBpart2251 ], [ %972, %originalBBpart2255 ], !dbg !1996
  %983 = load i32, i32* @x.35
  %984 = load i32, i32* @y.36
  %985 = sub i32 %983, 1
  %986 = mul i32 %983, %985
  %987 = urem i32 %986, 2
  %988 = icmp eq i32 %987, 0
  %989 = icmp slt i32 %984, 10
  %990 = or i1 %988, %989
  br i1 %990, label %originalBB257, label %originalBB257alteredBB

originalBB257:                                    ; preds = %981, %originalBB257alteredBB
  %991 = icmp ule i64 %914, %982, !dbg !2005
  %992 = load i32, i32* @x.35
  %993 = load i32, i32* @y.36
  %994 = sub i32 %992, 1
  %995 = mul i32 %992, %994
  %996 = urem i32 %995, 2
  %997 = icmp eq i32 %996, 0
  %998 = icmp slt i32 %993, 10
  %999 = or i1 %997, %998
  br i1 %999, label %originalBBpart2259, label %originalBB257alteredBB

originalBBpart2259:                               ; preds = %originalBB257
  br i1 %991, label %1000, label %1077, !dbg !2006

1000:                                             ; preds = %originalBBpart2259
  %1001 = load i32, i32* @x.35
  %1002 = load i32, i32* @y.36
  %1003 = sub i32 %1001, 1
  %1004 = mul i32 %1001, %1003
  %1005 = urem i32 %1004, 2
  %1006 = icmp eq i32 %1005, 0
  %1007 = icmp slt i32 %1002, 10
  %1008 = or i1 %1006, %1007
  br i1 %1008, label %originalBB261, label %originalBB261alteredBB

originalBB261:                                    ; preds = %1000, %originalBB261alteredBB
  %1009 = load i8*, i8** %21, align 8, !dbg !2007
  %1010 = load i64, i64* %28, align 8, !dbg !2008
  %1011 = getelementptr inbounds i8, i8* %1009, i64 %1010, !dbg !2009
  %1012 = load i8*, i8** %31, align 8, !dbg !2010
  %1013 = load i64, i64* %32, align 8, !dbg !2011
  %1014 = call i32 @memcmp(i8* %1011, i8* %1012, i64 %1013) #13, !dbg !2012
  %1015 = icmp eq i32 %1014, 0, !dbg !2013
  %1016 = load i32, i32* @x.35
  %1017 = load i32, i32* @y.36
  %1018 = sub i32 %1016, 1
  %1019 = mul i32 %1016, %1018
  %1020 = urem i32 %1019, 2
  %1021 = icmp eq i32 %1020, 0
  %1022 = icmp slt i32 %1017, 10
  %1023 = or i1 %1021, %1022
  br i1 %1023, label %originalBBpart2263, label %originalBB261alteredBB

originalBBpart2263:                               ; preds = %originalBB261
  br i1 %1015, label %1024, label %1077, !dbg !2014

1024:                                             ; preds = %originalBBpart2263
  %1025 = load i32, i32* @x.35
  %1026 = load i32, i32* @y.36
  %1027 = sub i32 %1025, 1
  %1028 = mul i32 %1025, %1027
  %1029 = urem i32 %1028, 2
  %1030 = icmp eq i32 %1029, 0
  %1031 = icmp slt i32 %1026, 10
  %1032 = or i1 %1030, %1031
  br i1 %1032, label %originalBB265, label %originalBB265alteredBB

originalBB265:                                    ; preds = %1024, %originalBB265alteredBB
  %1033 = load i8, i8* %35, align 1, !dbg !2015
  %1034 = trunc i8 %1033 to i1, !dbg !2015
  %1035 = load i32, i32* @x.35
  %1036 = load i32, i32* @y.36
  %1037 = sub i32 %1035, 1
  %1038 = mul i32 %1035, %1037
  %1039 = urem i32 %1038, 2
  %1040 = icmp eq i32 %1039, 0
  %1041 = icmp slt i32 %1036, 10
  %1042 = or i1 %1040, %1041
  br i1 %1042, label %originalBBpart2267, label %originalBB265alteredBB

originalBBpart2267:                               ; preds = %originalBB265
  br i1 %1034, label %1043, label %1060, !dbg !2018

1043:                                             ; preds = %originalBBpart2267
  %1044 = load i32, i32* @x.35
  %1045 = load i32, i32* @y.36
  %1046 = sub i32 %1044, 1
  %1047 = mul i32 %1044, %1046
  %1048 = urem i32 %1047, 2
  %1049 = icmp eq i32 %1048, 0
  %1050 = icmp slt i32 %1045, 10
  %1051 = or i1 %1049, %1050
  br i1 %1051, label %originalBB269, label %originalBB269alteredBB

originalBB269:                                    ; preds = %1043, %originalBB269alteredBB
  %1052 = load i32, i32* @x.35
  %1053 = load i32, i32* @y.36
  %1054 = sub i32 %1052, 1
  %1055 = mul i32 %1052, %1054
  %1056 = urem i32 %1055, 2
  %1057 = icmp eq i32 %1056, 0
  %1058 = icmp slt i32 %1053, 10
  %1059 = or i1 %1057, %1058
  br i1 %1059, label %originalBBpart2271, label %originalBB269alteredBB

originalBBpart2271:                               ; preds = %originalBB269
  br label %7269, !dbg !2019

1060:                                             ; preds = %originalBBpart2267
  %1061 = load i32, i32* @x.35
  %1062 = load i32, i32* @y.36
  %1063 = sub i32 %1061, 1
  %1064 = mul i32 %1061, %1063
  %1065 = urem i32 %1064, 2
  %1066 = icmp eq i32 %1065, 0
  %1067 = icmp slt i32 %1062, 10
  %1068 = or i1 %1066, %1067
  br i1 %1068, label %originalBB273, label %originalBB273alteredBB

originalBB273:                                    ; preds = %1060, %originalBB273alteredBB
  store i8 1, i8* %41, align 1, !dbg !2020
  %1069 = load i32, i32* @x.35
  %1070 = load i32, i32* @y.36
  %1071 = sub i32 %1069, 1
  %1072 = mul i32 %1069, %1071
  %1073 = urem i32 %1072, 2
  %1074 = icmp eq i32 %1073, 0
  %1075 = icmp slt i32 %1070, 10
  %1076 = or i1 %1074, %1075
  br i1 %1076, label %originalBBpart2275, label %originalBB273alteredBB

originalBBpart2275:                               ; preds = %originalBB273
  br label %1077, !dbg !2021

1077:                                             ; preds = %originalBBpart2275, %originalBBpart2263, %originalBBpart2259, %originalBBpart2234, %originalBBpart2230, %originalBBpart2226
  %1078 = load i32, i32* @x.35
  %1079 = load i32, i32* @y.36
  %1080 = sub i32 %1078, 1
  %1081 = mul i32 %1078, %1080
  %1082 = urem i32 %1081, 2
  %1083 = icmp eq i32 %1082, 0
  %1084 = icmp slt i32 %1079, 10
  %1085 = or i1 %1083, %1084
  br i1 %1085, label %originalBB277, label %originalBB277alteredBB

originalBB277:                                    ; preds = %1077, %originalBB277alteredBB
  %1086 = load i8*, i8** %21, align 8, !dbg !2022
  %1087 = load i64, i64* %28, align 8, !dbg !2023
  %1088 = getelementptr inbounds i8, i8* %1086, i64 %1087, !dbg !2022
  %1089 = load i8, i8* %1088, align 1, !dbg !2022
  store i8 %1089, i8* %39, align 1, !dbg !2024
  %1090 = load i8, i8* %39, align 1, !dbg !2025
  %1091 = zext i8 %1090 to i32, !dbg !2025
  %1092 = load i32, i32* @x.35
  %1093 = load i32, i32* @y.36
  %1094 = sub i32 %1092, 1
  %1095 = mul i32 %1092, %1094
  %1096 = urem i32 %1095, 2
  %1097 = icmp eq i32 %1096, 0
  %1098 = icmp slt i32 %1093, 10
  %1099 = or i1 %1097, %1098
  br i1 %1099, label %originalBBpart2279, label %originalBB277alteredBB

originalBBpart2279:                               ; preds = %originalBB277
  switch i32 %1091, label %3726 [
    i32 0, label %1100
    i32 63, label %1945
    i32 7, label %2691
    i32 8, label %2708
    i32 12, label %2725
    i32 10, label %2742
    i32 13, label %2759
    i32 9, label %2776
    i32 11, label %2793
    i32 92, label %2810
    i32 123, label %3100
    i32 125, label %3100
    i32 35, label %3194
    i32 126, label %3194
    i32 32, label %3247
    i32 33, label %3264
    i32 34, label %3264
    i32 36, label %3264
    i32 38, label %3264
    i32 40, label %3264
    i32 41, label %3264
    i32 42, label %3264
    i32 59, label %3264
    i32 60, label %3264
    i32 61, label %3264
    i32 62, label %3264
    i32 91, label %3264
    i32 94, label %3264
    i32 96, label %3264
    i32 124, label %3264
    i32 39, label %3336
    i32 37, label %3709
    i32 43, label %3709
    i32 44, label %3709
    i32 45, label %3709
    i32 46, label %3709
    i32 47, label %3709
    i32 48, label %3709
    i32 49, label %3709
    i32 50, label %3709
    i32 51, label %3709
    i32 52, label %3709
    i32 53, label %3709
    i32 54, label %3709
    i32 55, label %3709
    i32 56, label %3709
    i32 57, label %3709
    i32 58, label %3709
    i32 65, label %3709
    i32 66, label %3709
    i32 67, label %3709
    i32 68, label %3709
    i32 69, label %3709
    i32 70, label %3709
    i32 71, label %3709
    i32 72, label %3709
    i32 73, label %3709
    i32 74, label %3709
    i32 75, label %3709
    i32 76, label %3709
    i32 77, label %3709
    i32 78, label %3709
    i32 79, label %3709
    i32 80, label %3709
    i32 81, label %3709
    i32 82, label %3709
    i32 83, label %3709
    i32 84, label %3709
    i32 85, label %3709
    i32 86, label %3709
    i32 87, label %3709
    i32 88, label %3709
    i32 89, label %3709
    i32 90, label %3709
    i32 93, label %3709
    i32 95, label %3709
    i32 97, label %3709
    i32 98, label %3709
    i32 99, label %3709
    i32 100, label %3709
    i32 101, label %3709
    i32 102, label %3709
    i32 103, label %3709
    i32 104, label %3709
    i32 105, label %3709
    i32 106, label %3709
    i32 107, label %3709
    i32 108, label %3709
    i32 109, label %3709
    i32 110, label %3709
    i32 111, label %3709
    i32 112, label %3709
    i32 113, label %3709
    i32 114, label %3709
    i32 115, label %3709
    i32 116, label %3709
    i32 117, label %3709
    i32 118, label %3709
    i32 119, label %3709
    i32 120, label %3709
    i32 121, label %3709
    i32 122, label %3709
  ], !dbg !2026

1100:                                             ; preds = %originalBBpart2279
  %1101 = load i32, i32* @x.35
  %1102 = load i32, i32* @y.36
  %1103 = sub i32 %1101, 1
  %1104 = mul i32 %1101, %1103
  %1105 = urem i32 %1104, 2
  %1106 = icmp eq i32 %1105, 0
  %1107 = icmp slt i32 %1102, 10
  %1108 = or i1 %1106, %1107
  br i1 %1108, label %originalBB281, label %originalBB281alteredBB

originalBB281:                                    ; preds = %1100, %originalBB281alteredBB
  %1109 = load i8, i8* %33, align 1, !dbg !2027
  %1110 = trunc i8 %1109 to i1, !dbg !2027
  %1111 = load i32, i32* @x.35
  %1112 = load i32, i32* @y.36
  %1113 = sub i32 %1111, 1
  %1114 = mul i32 %1111, %1113
  %1115 = urem i32 %1114, 2
  %1116 = icmp eq i32 %1115, 0
  %1117 = icmp slt i32 %1112, 10
  %1118 = or i1 %1116, %1117
  br i1 %1118, label %originalBBpart2283, label %originalBB281alteredBB

originalBBpart2283:                               ; preds = %originalBB281
  br i1 %1110, label %1119, label %1874, !dbg !2030

1119:                                             ; preds = %originalBBpart2283
  %1120 = load i32, i32* @x.35
  %1121 = load i32, i32* @y.36
  %1122 = sub i32 %1120, 1
  %1123 = mul i32 %1120, %1122
  %1124 = urem i32 %1123, 2
  %1125 = icmp eq i32 %1124, 0
  %1126 = icmp slt i32 %1121, 10
  %1127 = or i1 %1125, %1126
  br i1 %1127, label %originalBB285, label %originalBB285alteredBB

originalBB285:                                    ; preds = %1119, %originalBB285alteredBB
  %1128 = load i32, i32* @x.35
  %1129 = load i32, i32* @y.36
  %1130 = sub i32 %1128, 1
  %1131 = mul i32 %1128, %1130
  %1132 = urem i32 %1131, 2
  %1133 = icmp eq i32 %1132, 0
  %1134 = icmp slt i32 %1129, 10
  %1135 = or i1 %1133, %1134
  br i1 %1135, label %originalBBpart2287, label %originalBB285alteredBB

originalBBpart2287:                               ; preds = %originalBB285
  br label %1136, !dbg !2031

1136:                                             ; preds = %originalBBpart2287
  %1137 = load i32, i32* @x.35
  %1138 = load i32, i32* @y.36
  %1139 = sub i32 %1137, 1
  %1140 = mul i32 %1137, %1139
  %1141 = urem i32 %1140, 2
  %1142 = icmp eq i32 %1141, 0
  %1143 = icmp slt i32 %1138, 10
  %1144 = or i1 %1142, %1143
  br i1 %1144, label %originalBB289, label %originalBB289alteredBB

originalBB289:                                    ; preds = %1136, %originalBB289alteredBB
  %1145 = load i8, i8* %35, align 1, !dbg !2033
  %1146 = trunc i8 %1145 to i1, !dbg !2033
  %1147 = load i32, i32* @x.35
  %1148 = load i32, i32* @y.36
  %1149 = sub i32 %1147, 1
  %1150 = mul i32 %1147, %1149
  %1151 = urem i32 %1150, 2
  %1152 = icmp eq i32 %1151, 0
  %1153 = icmp slt i32 %1148, 10
  %1154 = or i1 %1152, %1153
  br i1 %1154, label %originalBBpart2291, label %originalBB289alteredBB

originalBBpart2291:                               ; preds = %originalBB289
  br i1 %1146, label %1155, label %1172, !dbg !2036

1155:                                             ; preds = %originalBBpart2291
  %1156 = load i32, i32* @x.35
  %1157 = load i32, i32* @y.36
  %1158 = sub i32 %1156, 1
  %1159 = mul i32 %1156, %1158
  %1160 = urem i32 %1159, 2
  %1161 = icmp eq i32 %1160, 0
  %1162 = icmp slt i32 %1157, 10
  %1163 = or i1 %1161, %1162
  br i1 %1163, label %originalBB293, label %originalBB293alteredBB

originalBB293:                                    ; preds = %1155, %originalBB293alteredBB
  %1164 = load i32, i32* @x.35
  %1165 = load i32, i32* @y.36
  %1166 = sub i32 %1164, 1
  %1167 = mul i32 %1164, %1166
  %1168 = urem i32 %1167, 2
  %1169 = icmp eq i32 %1168, 0
  %1170 = icmp slt i32 %1165, 10
  %1171 = or i1 %1169, %1170
  br i1 %1171, label %originalBBpart2295, label %originalBB293alteredBB

originalBBpart2295:                               ; preds = %originalBB293
  br label %7269, !dbg !2033

1172:                                             ; preds = %originalBBpart2291
  %1173 = load i32, i32* @x.35
  %1174 = load i32, i32* @y.36
  %1175 = sub i32 %1173, 1
  %1176 = mul i32 %1173, %1175
  %1177 = urem i32 %1176, 2
  %1178 = icmp eq i32 %1177, 0
  %1179 = icmp slt i32 %1174, 10
  %1180 = or i1 %1178, %1179
  br i1 %1180, label %originalBB297, label %originalBB297alteredBB

originalBB297:                                    ; preds = %1172, %originalBB297alteredBB
  store i8 1, i8* %42, align 1, !dbg !2036
  %1181 = load i32, i32* %23, align 4, !dbg !2037
  %1182 = icmp eq i32 %1181, 2, !dbg !2037
  %1183 = load i32, i32* @x.35
  %1184 = load i32, i32* @y.36
  %1185 = sub i32 %1183, 1
  %1186 = mul i32 %1183, %1185
  %1187 = urem i32 %1186, 2
  %1188 = icmp eq i32 %1187, 0
  %1189 = icmp slt i32 %1184, 10
  %1190 = or i1 %1188, %1189
  br i1 %1190, label %originalBBpart2299, label %originalBB297alteredBB

originalBBpart2299:                               ; preds = %originalBB297
  br i1 %1182, label %1191, label %1507, !dbg !2037

1191:                                             ; preds = %originalBBpart2299
  %1192 = load i32, i32* @x.35
  %1193 = load i32, i32* @y.36
  %1194 = sub i32 %1192, 1
  %1195 = mul i32 %1192, %1194
  %1196 = urem i32 %1195, 2
  %1197 = icmp eq i32 %1196, 0
  %1198 = icmp slt i32 %1193, 10
  %1199 = or i1 %1197, %1198
  br i1 %1199, label %originalBB301, label %originalBB301alteredBB

originalBB301:                                    ; preds = %1191, %originalBB301alteredBB
  %1200 = load i8, i8* %36, align 1, !dbg !2037
  %1201 = trunc i8 %1200 to i1, !dbg !2037
  %1202 = load i32, i32* @x.35
  %1203 = load i32, i32* @y.36
  %1204 = sub i32 %1202, 1
  %1205 = mul i32 %1202, %1204
  %1206 = urem i32 %1205, 2
  %1207 = icmp eq i32 %1206, 0
  %1208 = icmp slt i32 %1203, 10
  %1209 = or i1 %1207, %1208
  br i1 %1209, label %originalBBpart2303, label %originalBB301alteredBB

originalBBpart2303:                               ; preds = %originalBB301
  br i1 %1201, label %1507, label %1210, !dbg !2036

1210:                                             ; preds = %originalBBpart2303
  %1211 = load i32, i32* @x.35
  %1212 = load i32, i32* @y.36
  %1213 = sub i32 %1211, 1
  %1214 = mul i32 %1211, %1213
  %1215 = urem i32 %1214, 2
  %1216 = icmp eq i32 %1215, 0
  %1217 = icmp slt i32 %1212, 10
  %1218 = or i1 %1216, %1217
  br i1 %1218, label %originalBB305, label %originalBB305alteredBB

originalBB305:                                    ; preds = %1210, %originalBB305alteredBB
  %1219 = load i32, i32* @x.35
  %1220 = load i32, i32* @y.36
  %1221 = sub i32 %1219, 1
  %1222 = mul i32 %1219, %1221
  %1223 = urem i32 %1222, 2
  %1224 = icmp eq i32 %1223, 0
  %1225 = icmp slt i32 %1220, 10
  %1226 = or i1 %1224, %1225
  br i1 %1226, label %originalBBpart2307, label %originalBB305alteredBB

originalBBpart2307:                               ; preds = %originalBB305
  br label %1227, !dbg !2039

1227:                                             ; preds = %originalBBpart2307
  %1228 = load i32, i32* @x.35
  %1229 = load i32, i32* @y.36
  %1230 = sub i32 %1228, 1
  %1231 = mul i32 %1228, %1230
  %1232 = urem i32 %1231, 2
  %1233 = icmp eq i32 %1232, 0
  %1234 = icmp slt i32 %1229, 10
  %1235 = or i1 %1233, %1234
  br i1 %1235, label %originalBB309, label %originalBB309alteredBB

originalBB309:                                    ; preds = %1227, %originalBB309alteredBB
  %1236 = load i64, i64* %29, align 8, !dbg !2041
  %1237 = load i64, i64* %20, align 8, !dbg !2041
  %1238 = icmp ult i64 %1236, %1237, !dbg !2041
  %1239 = load i32, i32* @x.35
  %1240 = load i32, i32* @y.36
  %1241 = sub i32 %1239, 1
  %1242 = mul i32 %1239, %1241
  %1243 = urem i32 %1242, 2
  %1244 = icmp eq i32 %1243, 0
  %1245 = icmp slt i32 %1240, 10
  %1246 = or i1 %1244, %1245
  br i1 %1246, label %originalBBpart2311, label %originalBB309alteredBB

originalBBpart2311:                               ; preds = %originalBB309
  br i1 %1238, label %1247, label %1267, !dbg !2044

1247:                                             ; preds = %originalBBpart2311
  %1248 = load i32, i32* @x.35
  %1249 = load i32, i32* @y.36
  %1250 = sub i32 %1248, 1
  %1251 = mul i32 %1248, %1250
  %1252 = urem i32 %1251, 2
  %1253 = icmp eq i32 %1252, 0
  %1254 = icmp slt i32 %1249, 10
  %1255 = or i1 %1253, %1254
  br i1 %1255, label %originalBB313, label %originalBB313alteredBB

originalBB313:                                    ; preds = %1247, %originalBB313alteredBB
  %1256 = load i8*, i8** %19, align 8, !dbg !2041
  %1257 = load i64, i64* %29, align 8, !dbg !2041
  %1258 = getelementptr inbounds i8, i8* %1256, i64 %1257, !dbg !2041
  store i8 39, i8* %1258, align 1, !dbg !2041
  %1259 = load i32, i32* @x.35
  %1260 = load i32, i32* @y.36
  %1261 = sub i32 %1259, 1
  %1262 = mul i32 %1259, %1261
  %1263 = urem i32 %1262, 2
  %1264 = icmp eq i32 %1263, 0
  %1265 = icmp slt i32 %1260, 10
  %1266 = or i1 %1264, %1265
  br i1 %1266, label %originalBBpart2315, label %originalBB313alteredBB

originalBBpart2315:                               ; preds = %originalBB313
  br label %1267, !dbg !2041

1267:                                             ; preds = %originalBBpart2315, %originalBBpart2311
  %1268 = load i32, i32* @x.35
  %1269 = load i32, i32* @y.36
  %1270 = sub i32 %1268, 1
  %1271 = mul i32 %1268, %1270
  %1272 = urem i32 %1271, 2
  %1273 = icmp eq i32 %1272, 0
  %1274 = icmp slt i32 %1269, 10
  %1275 = or i1 %1273, %1274
  br i1 %1275, label %originalBB317, label %originalBB317alteredBB

originalBB317:                                    ; preds = %1267, %originalBB317alteredBB
  %1276 = load i64, i64* %29, align 8, !dbg !2044
  %1277 = add i64 %1276, 1, !dbg !2044
  %1278 = trunc i64 1 to i32
  %1279 = mul i32 %1278, -5
  %1280 = add i32 %1279, 3
  %1281 = trunc i64 %1276 to i32
  %1282 = add i32 %1281, 2
  %1283 = trunc i64 %1277 to i32
  %1284 = mul i32 %1283, -2
  %1285 = add i32 %1284, 2
  %1286 = mul i32 %1280, %1280
  %1287 = mul i32 %1286, %1286
  %1288 = mul i32 %1282, %1282
  %1289 = mul i32 %1288, %1288
  %1290 = mul i32 %1285, %1285
  %1291 = mul i32 %1290, %1290
  %1292 = add i32 %1287, %1289
  %1293 = sub i32 %1292, %1291
  %1294 = add i32 %1293, 5
  %1295 = icmp ne i32 %1294, 5
  %1296 = load i32, i32* @x.35
  %1297 = load i32, i32* @y.36
  %1298 = sub i32 %1296, 1
  %1299 = mul i32 %1296, %1298
  %1300 = urem i32 %1299, 2
  %1301 = icmp eq i32 %1300, 0
  %1302 = icmp slt i32 %1297, 10
  %1303 = or i1 %1301, %1302
  br i1 %1303, label %originalBBpart2412, label %originalBB317alteredBB

originalBBpart2412:                               ; preds = %originalBB317
  br i1 %1295, label %1304, label %1321

1304:                                             ; preds = %originalBBpart2412
  %1305 = load i32, i32* @x.35
  %1306 = load i32, i32* @y.36
  %1307 = sub i32 %1305, 1
  %1308 = mul i32 %1305, %1307
  %1309 = urem i32 %1308, 2
  %1310 = icmp eq i32 %1309, 0
  %1311 = icmp slt i32 %1306, 10
  %1312 = or i1 %1310, %1311
  br i1 %1312, label %originalBB414, label %originalBB414alteredBB

originalBB414:                                    ; preds = %1304, %originalBB414alteredBB
  %1313 = load i32, i32* @x.35
  %1314 = load i32, i32* @y.36
  %1315 = sub i32 %1313, 1
  %1316 = mul i32 %1313, %1315
  %1317 = urem i32 %1316, 2
  %1318 = icmp eq i32 %1317, 0
  %1319 = icmp slt i32 %1314, 10
  %1320 = or i1 %1318, %1319
  br i1 %1320, label %originalBBpart2416, label %originalBB414alteredBB

originalBBpart2416:                               ; preds = %originalBB414
  ret i64 0

1321:                                             ; preds = %originalBBpart2412
  %1322 = load i32, i32* @x.35
  %1323 = load i32, i32* @y.36
  %1324 = sub i32 %1322, 1
  %1325 = mul i32 %1322, %1324
  %1326 = urem i32 %1325, 2
  %1327 = icmp eq i32 %1326, 0
  %1328 = icmp slt i32 %1323, 10
  %1329 = or i1 %1327, %1328
  br i1 %1329, label %originalBB418, label %originalBB418alteredBB

originalBB418:                                    ; preds = %1321, %originalBB418alteredBB
  store i64 %1277, i64* %29, align 8, !dbg !2044
  %1330 = load i32, i32* @x.35
  %1331 = load i32, i32* @y.36
  %1332 = sub i32 %1330, 1
  %1333 = mul i32 %1330, %1332
  %1334 = urem i32 %1333, 2
  %1335 = icmp eq i32 %1334, 0
  %1336 = icmp slt i32 %1331, 10
  %1337 = or i1 %1335, %1336
  br i1 %1337, label %originalBBpart2420, label %originalBB418alteredBB

originalBBpart2420:                               ; preds = %originalBB418
  br label %1338, !dbg !2044

1338:                                             ; preds = %originalBBpart2420
  %1339 = load i32, i32* @x.35
  %1340 = load i32, i32* @y.36
  %1341 = sub i32 %1339, 1
  %1342 = mul i32 %1339, %1341
  %1343 = urem i32 %1342, 2
  %1344 = icmp eq i32 %1343, 0
  %1345 = icmp slt i32 %1340, 10
  %1346 = or i1 %1344, %1345
  br i1 %1346, label %originalBB422, label %originalBB422alteredBB

originalBB422:                                    ; preds = %1338, %originalBB422alteredBB
  %1347 = load i32, i32* @x.35
  %1348 = load i32, i32* @y.36
  %1349 = sub i32 %1347, 1
  %1350 = mul i32 %1347, %1349
  %1351 = urem i32 %1350, 2
  %1352 = icmp eq i32 %1351, 0
  %1353 = icmp slt i32 %1348, 10
  %1354 = or i1 %1352, %1353
  br i1 %1354, label %originalBBpart2424, label %originalBB422alteredBB

originalBBpart2424:                               ; preds = %originalBB422
  br label %1355, !dbg !2039

1355:                                             ; preds = %originalBBpart2424
  %1356 = load i32, i32* @x.35
  %1357 = load i32, i32* @y.36
  %1358 = sub i32 %1356, 1
  %1359 = mul i32 %1356, %1358
  %1360 = urem i32 %1359, 2
  %1361 = icmp eq i32 %1360, 0
  %1362 = icmp slt i32 %1357, 10
  %1363 = or i1 %1361, %1362
  br i1 %1363, label %originalBB426, label %originalBB426alteredBB

originalBB426:                                    ; preds = %1355, %originalBB426alteredBB
  %1364 = load i64, i64* %29, align 8, !dbg !2045
  %1365 = load i64, i64* %20, align 8, !dbg !2045
  %1366 = icmp ult i64 %1364, %1365, !dbg !2045
  %1367 = load i32, i32* @x.35
  %1368 = load i32, i32* @y.36
  %1369 = sub i32 %1367, 1
  %1370 = mul i32 %1367, %1369
  %1371 = urem i32 %1370, 2
  %1372 = icmp eq i32 %1371, 0
  %1373 = icmp slt i32 %1368, 10
  %1374 = or i1 %1372, %1373
  br i1 %1374, label %originalBBpart2428, label %originalBB426alteredBB

originalBBpart2428:                               ; preds = %originalBB426
  br i1 %1366, label %1375, label %1395, !dbg !2048

1375:                                             ; preds = %originalBBpart2428
  %1376 = load i32, i32* @x.35
  %1377 = load i32, i32* @y.36
  %1378 = sub i32 %1376, 1
  %1379 = mul i32 %1376, %1378
  %1380 = urem i32 %1379, 2
  %1381 = icmp eq i32 %1380, 0
  %1382 = icmp slt i32 %1377, 10
  %1383 = or i1 %1381, %1382
  br i1 %1383, label %originalBB430, label %originalBB430alteredBB

originalBB430:                                    ; preds = %1375, %originalBB430alteredBB
  %1384 = load i8*, i8** %19, align 8, !dbg !2045
  %1385 = load i64, i64* %29, align 8, !dbg !2045
  %1386 = getelementptr inbounds i8, i8* %1384, i64 %1385, !dbg !2045
  store i8 36, i8* %1386, align 1, !dbg !2045
  %1387 = load i32, i32* @x.35
  %1388 = load i32, i32* @y.36
  %1389 = sub i32 %1387, 1
  %1390 = mul i32 %1387, %1389
  %1391 = urem i32 %1390, 2
  %1392 = icmp eq i32 %1391, 0
  %1393 = icmp slt i32 %1388, 10
  %1394 = or i1 %1392, %1393
  br i1 %1394, label %originalBBpart2432, label %originalBB430alteredBB

originalBBpart2432:                               ; preds = %originalBB430
  br label %1395, !dbg !2045

1395:                                             ; preds = %originalBBpart2432, %originalBBpart2428
  %1396 = load i32, i32* @x.35
  %1397 = load i32, i32* @y.36
  %1398 = sub i32 %1396, 1
  %1399 = mul i32 %1396, %1398
  %1400 = urem i32 %1399, 2
  %1401 = icmp eq i32 %1400, 0
  %1402 = icmp slt i32 %1397, 10
  %1403 = or i1 %1401, %1402
  br i1 %1403, label %originalBB434, label %originalBB434alteredBB

originalBB434:                                    ; preds = %1395, %originalBB434alteredBB
  %1404 = load i64, i64* %29, align 8, !dbg !2048
  %1405 = add i64 %1404, 1, !dbg !2048
  store i64 %1405, i64* %29, align 8, !dbg !2048
  %1406 = load i32, i32* @x.35
  %1407 = load i32, i32* @y.36
  %1408 = sub i32 %1406, 1
  %1409 = mul i32 %1406, %1408
  %1410 = urem i32 %1409, 2
  %1411 = icmp eq i32 %1410, 0
  %1412 = icmp slt i32 %1407, 10
  %1413 = or i1 %1411, %1412
  br i1 %1413, label %originalBBpart2440, label %originalBB434alteredBB

originalBBpart2440:                               ; preds = %originalBB434
  br label %1414, !dbg !2048

1414:                                             ; preds = %originalBBpart2440
  %1415 = load i32, i32* @x.35
  %1416 = load i32, i32* @y.36
  %1417 = sub i32 %1415, 1
  %1418 = mul i32 %1415, %1417
  %1419 = urem i32 %1418, 2
  %1420 = icmp eq i32 %1419, 0
  %1421 = icmp slt i32 %1416, 10
  %1422 = or i1 %1420, %1421
  br i1 %1422, label %originalBB442, label %originalBB442alteredBB

originalBB442:                                    ; preds = %1414, %originalBB442alteredBB
  %1423 = load i32, i32* @x.35
  %1424 = load i32, i32* @y.36
  %1425 = sub i32 %1423, 1
  %1426 = mul i32 %1423, %1425
  %1427 = urem i32 %1426, 2
  %1428 = icmp eq i32 %1427, 0
  %1429 = icmp slt i32 %1424, 10
  %1430 = or i1 %1428, %1429
  br i1 %1430, label %originalBBpart2444, label %originalBB442alteredBB

originalBBpart2444:                               ; preds = %originalBB442
  br label %1431, !dbg !2039

1431:                                             ; preds = %originalBBpart2444
  %1432 = load i32, i32* @x.35
  %1433 = load i32, i32* @y.36
  %1434 = sub i32 %1432, 1
  %1435 = mul i32 %1432, %1434
  %1436 = urem i32 %1435, 2
  %1437 = icmp eq i32 %1436, 0
  %1438 = icmp slt i32 %1433, 10
  %1439 = or i1 %1437, %1438
  br i1 %1439, label %originalBB446, label %originalBB446alteredBB

originalBB446:                                    ; preds = %1431, %originalBB446alteredBB
  %1440 = load i64, i64* %29, align 8, !dbg !2049
  %1441 = load i64, i64* %20, align 8, !dbg !2049
  %1442 = icmp ult i64 %1440, %1441, !dbg !2049
  %1443 = load i32, i32* @x.35
  %1444 = load i32, i32* @y.36
  %1445 = sub i32 %1443, 1
  %1446 = mul i32 %1443, %1445
  %1447 = urem i32 %1446, 2
  %1448 = icmp eq i32 %1447, 0
  %1449 = icmp slt i32 %1444, 10
  %1450 = or i1 %1448, %1449
  br i1 %1450, label %originalBBpart2448, label %originalBB446alteredBB

originalBBpart2448:                               ; preds = %originalBB446
  br i1 %1442, label %1451, label %1471, !dbg !2052

1451:                                             ; preds = %originalBBpart2448
  %1452 = load i32, i32* @x.35
  %1453 = load i32, i32* @y.36
  %1454 = sub i32 %1452, 1
  %1455 = mul i32 %1452, %1454
  %1456 = urem i32 %1455, 2
  %1457 = icmp eq i32 %1456, 0
  %1458 = icmp slt i32 %1453, 10
  %1459 = or i1 %1457, %1458
  br i1 %1459, label %originalBB450, label %originalBB450alteredBB

originalBB450:                                    ; preds = %1451, %originalBB450alteredBB
  %1460 = load i8*, i8** %19, align 8, !dbg !2049
  %1461 = load i64, i64* %29, align 8, !dbg !2049
  %1462 = getelementptr inbounds i8, i8* %1460, i64 %1461, !dbg !2049
  store i8 39, i8* %1462, align 1, !dbg !2049
  %1463 = load i32, i32* @x.35
  %1464 = load i32, i32* @y.36
  %1465 = sub i32 %1463, 1
  %1466 = mul i32 %1463, %1465
  %1467 = urem i32 %1466, 2
  %1468 = icmp eq i32 %1467, 0
  %1469 = icmp slt i32 %1464, 10
  %1470 = or i1 %1468, %1469
  br i1 %1470, label %originalBBpart2452, label %originalBB450alteredBB

originalBBpart2452:                               ; preds = %originalBB450
  br label %1471, !dbg !2049

1471:                                             ; preds = %originalBBpart2452, %originalBBpart2448
  %1472 = load i32, i32* @x.35
  %1473 = load i32, i32* @y.36
  %1474 = sub i32 %1472, 1
  %1475 = mul i32 %1472, %1474
  %1476 = urem i32 %1475, 2
  %1477 = icmp eq i32 %1476, 0
  %1478 = icmp slt i32 %1473, 10
  %1479 = or i1 %1477, %1478
  br i1 %1479, label %originalBB454, label %originalBB454alteredBB

originalBB454:                                    ; preds = %1471, %originalBB454alteredBB
  %1480 = load i64, i64* %29, align 8, !dbg !2052
  %1481 = add i64 %1480, 1, !dbg !2052
  store i64 %1481, i64* %29, align 8, !dbg !2052
  %1482 = load i32, i32* @x.35
  %1483 = load i32, i32* @y.36
  %1484 = sub i32 %1482, 1
  %1485 = mul i32 %1482, %1484
  %1486 = urem i32 %1485, 2
  %1487 = icmp eq i32 %1486, 0
  %1488 = icmp slt i32 %1483, 10
  %1489 = or i1 %1487, %1488
  br i1 %1489, label %originalBBpart2461, label %originalBB454alteredBB

originalBBpart2461:                               ; preds = %originalBB454
  br label %1490, !dbg !2052

1490:                                             ; preds = %originalBBpart2461
  %1491 = load i32, i32* @x.35
  %1492 = load i32, i32* @y.36
  %1493 = sub i32 %1491, 1
  %1494 = mul i32 %1491, %1493
  %1495 = urem i32 %1494, 2
  %1496 = icmp eq i32 %1495, 0
  %1497 = icmp slt i32 %1492, 10
  %1498 = or i1 %1496, %1497
  br i1 %1498, label %originalBB463, label %originalBB463alteredBB

originalBB463:                                    ; preds = %1490, %originalBB463alteredBB
  store i8 1, i8* %36, align 1, !dbg !2039
  %1499 = load i32, i32* @x.35
  %1500 = load i32, i32* @y.36
  %1501 = sub i32 %1499, 1
  %1502 = mul i32 %1499, %1501
  %1503 = urem i32 %1502, 2
  %1504 = icmp eq i32 %1503, 0
  %1505 = icmp slt i32 %1500, 10
  %1506 = or i1 %1504, %1505
  br i1 %1506, label %originalBBpart2465, label %originalBB463alteredBB

originalBBpart2465:                               ; preds = %originalBB463
  br label %1507, !dbg !2039

1507:                                             ; preds = %originalBBpart2465, %originalBBpart2303, %originalBBpart2299
  %1508 = load i32, i32* @x.35
  %1509 = load i32, i32* @y.36
  %1510 = sub i32 %1508, 1
  %1511 = mul i32 %1508, %1510
  %1512 = urem i32 %1511, 2
  %1513 = icmp eq i32 %1512, 0
  %1514 = icmp slt i32 %1509, 10
  %1515 = or i1 %1513, %1514
  br i1 %1515, label %originalBB467, label %originalBB467alteredBB

originalBB467:                                    ; preds = %1507, %originalBB467alteredBB
  %1516 = load i32, i32* @x.35
  %1517 = load i32, i32* @y.36
  %1518 = sub i32 %1516, 1
  %1519 = mul i32 %1516, %1518
  %1520 = urem i32 %1519, 2
  %1521 = icmp eq i32 %1520, 0
  %1522 = icmp slt i32 %1517, 10
  %1523 = or i1 %1521, %1522
  br i1 %1523, label %originalBBpart2469, label %originalBB467alteredBB

originalBBpart2469:                               ; preds = %originalBB467
  br label %1524, !dbg !2036

1524:                                             ; preds = %originalBBpart2469
  %1525 = load i32, i32* @x.35
  %1526 = load i32, i32* @y.36
  %1527 = sub i32 %1525, 1
  %1528 = mul i32 %1525, %1527
  %1529 = urem i32 %1528, 2
  %1530 = icmp eq i32 %1529, 0
  %1531 = icmp slt i32 %1526, 10
  %1532 = or i1 %1530, %1531
  br i1 %1532, label %originalBB471, label %originalBB471alteredBB

originalBB471:                                    ; preds = %1524, %originalBB471alteredBB
  %1533 = load i64, i64* %29, align 8, !dbg !2053
  %1534 = load i64, i64* %20, align 8, !dbg !2053
  %1535 = icmp ult i64 %1533, %1534, !dbg !2053
  %1536 = load i32, i32* @x.35
  %1537 = load i32, i32* @y.36
  %1538 = sub i32 %1536, 1
  %1539 = mul i32 %1536, %1538
  %1540 = urem i32 %1539, 2
  %1541 = icmp eq i32 %1540, 0
  %1542 = icmp slt i32 %1537, 10
  %1543 = or i1 %1541, %1542
  br i1 %1543, label %originalBBpart2473, label %originalBB471alteredBB

originalBBpart2473:                               ; preds = %originalBB471
  br i1 %1535, label %1544, label %1564, !dbg !2056

1544:                                             ; preds = %originalBBpart2473
  %1545 = load i32, i32* @x.35
  %1546 = load i32, i32* @y.36
  %1547 = sub i32 %1545, 1
  %1548 = mul i32 %1545, %1547
  %1549 = urem i32 %1548, 2
  %1550 = icmp eq i32 %1549, 0
  %1551 = icmp slt i32 %1546, 10
  %1552 = or i1 %1550, %1551
  br i1 %1552, label %originalBB475, label %originalBB475alteredBB

originalBB475:                                    ; preds = %1544, %originalBB475alteredBB
  %1553 = load i8*, i8** %19, align 8, !dbg !2053
  %1554 = load i64, i64* %29, align 8, !dbg !2053
  %1555 = getelementptr inbounds i8, i8* %1553, i64 %1554, !dbg !2053
  store i8 92, i8* %1555, align 1, !dbg !2053
  %1556 = load i32, i32* @x.35
  %1557 = load i32, i32* @y.36
  %1558 = sub i32 %1556, 1
  %1559 = mul i32 %1556, %1558
  %1560 = urem i32 %1559, 2
  %1561 = icmp eq i32 %1560, 0
  %1562 = icmp slt i32 %1557, 10
  %1563 = or i1 %1561, %1562
  br i1 %1563, label %originalBBpart2477, label %originalBB475alteredBB

originalBBpart2477:                               ; preds = %originalBB475
  br label %1564, !dbg !2053

1564:                                             ; preds = %originalBBpart2477, %originalBBpart2473
  %1565 = load i32, i32* @x.35
  %1566 = load i32, i32* @y.36
  %1567 = sub i32 %1565, 1
  %1568 = mul i32 %1565, %1567
  %1569 = urem i32 %1568, 2
  %1570 = icmp eq i32 %1569, 0
  %1571 = icmp slt i32 %1566, 10
  %1572 = or i1 %1570, %1571
  br i1 %1572, label %originalBB479, label %originalBB479alteredBB

originalBB479:                                    ; preds = %1564, %originalBB479alteredBB
  %1573 = load i64, i64* %29, align 8, !dbg !2056
  %1574 = add i64 %1573, 1, !dbg !2056
  store i64 %1574, i64* %29, align 8, !dbg !2056
  %1575 = load i32, i32* @x.35
  %1576 = load i32, i32* @y.36
  %1577 = sub i32 %1575, 1
  %1578 = mul i32 %1575, %1577
  %1579 = urem i32 %1578, 2
  %1580 = icmp eq i32 %1579, 0
  %1581 = icmp slt i32 %1576, 10
  %1582 = or i1 %1580, %1581
  br i1 %1582, label %originalBBpart2488, label %originalBB479alteredBB

originalBBpart2488:                               ; preds = %originalBB479
  br label %1583, !dbg !2056

1583:                                             ; preds = %originalBBpart2488
  %1584 = load i32, i32* @x.35
  %1585 = load i32, i32* @y.36
  %1586 = sub i32 %1584, 1
  %1587 = mul i32 %1584, %1586
  %1588 = urem i32 %1587, 2
  %1589 = icmp eq i32 %1588, 0
  %1590 = icmp slt i32 %1585, 10
  %1591 = or i1 %1589, %1590
  br i1 %1591, label %originalBB490, label %originalBB490alteredBB

originalBB490:                                    ; preds = %1583, %originalBB490alteredBB
  %1592 = load i32, i32* @x.35
  %1593 = load i32, i32* @y.36
  %1594 = sub i32 %1592, 1
  %1595 = mul i32 %1592, %1594
  %1596 = urem i32 %1595, 2
  %1597 = icmp eq i32 %1596, 0
  %1598 = icmp slt i32 %1593, 10
  %1599 = or i1 %1597, %1598
  br i1 %1599, label %originalBBpart2492, label %originalBB490alteredBB

originalBBpart2492:                               ; preds = %originalBB490
  br label %1600, !dbg !2036

1600:                                             ; preds = %originalBBpart2492
  %1601 = load i32, i32* @x.35
  %1602 = load i32, i32* @y.36
  %1603 = sub i32 %1601, 1
  %1604 = mul i32 %1601, %1603
  %1605 = urem i32 %1604, 2
  %1606 = icmp eq i32 %1605, 0
  %1607 = icmp slt i32 %1602, 10
  %1608 = or i1 %1606, %1607
  br i1 %1608, label %originalBB494, label %originalBB494alteredBB

originalBB494:                                    ; preds = %1600, %originalBB494alteredBB
  %1609 = load i32, i32* %23, align 4, !dbg !2057
  %1610 = icmp ne i32 %1609, 2, !dbg !2059
  %1611 = load i32, i32* @x.35
  %1612 = load i32, i32* @y.36
  %1613 = sub i32 %1611, 1
  %1614 = mul i32 %1611, %1613
  %1615 = urem i32 %1614, 2
  %1616 = icmp eq i32 %1615, 0
  %1617 = icmp slt i32 %1612, 10
  %1618 = or i1 %1616, %1617
  br i1 %1618, label %originalBBpart2496, label %originalBB494alteredBB

originalBBpart2496:                               ; preds = %originalBB494
  br i1 %1610, label %1619, label %1857, !dbg !2060

1619:                                             ; preds = %originalBBpart2496
  %1620 = load i32, i32* @x.35
  %1621 = load i32, i32* @y.36
  %1622 = sub i32 %1620, 1
  %1623 = mul i32 %1620, %1622
  %1624 = urem i32 %1623, 2
  %1625 = icmp eq i32 %1624, 0
  %1626 = icmp slt i32 %1621, 10
  %1627 = or i1 %1625, %1626
  br i1 %1627, label %originalBB498, label %originalBB498alteredBB

originalBB498:                                    ; preds = %1619, %originalBB498alteredBB
  %1628 = load i64, i64* %28, align 8, !dbg !2061
  %1629 = add i64 %1628, 1, !dbg !2062
  %1630 = load i64, i64* %22, align 8, !dbg !2063
  %1631 = icmp ult i64 %1629, %1630, !dbg !2064
  %1632 = load i32, i32* @x.35
  %1633 = load i32, i32* @y.36
  %1634 = sub i32 %1632, 1
  %1635 = mul i32 %1632, %1634
  %1636 = urem i32 %1635, 2
  %1637 = icmp eq i32 %1636, 0
  %1638 = icmp slt i32 %1633, 10
  %1639 = or i1 %1637, %1638
  br i1 %1639, label %originalBBpart2500, label %originalBB498alteredBB

originalBBpart2500:                               ; preds = %originalBB498
  br i1 %1631, label %1640, label %1857, !dbg !2065

1640:                                             ; preds = %originalBBpart2500
  %1641 = load i32, i32* @x.35
  %1642 = load i32, i32* @y.36
  %1643 = sub i32 %1641, 1
  %1644 = mul i32 %1641, %1643
  %1645 = urem i32 %1644, 2
  %1646 = icmp eq i32 %1645, 0
  %1647 = icmp slt i32 %1642, 10
  %1648 = or i1 %1646, %1647
  br i1 %1648, label %originalBB502, label %originalBB502alteredBB

originalBB502:                                    ; preds = %1640, %originalBB502alteredBB
  %1649 = load i8*, i8** %21, align 8, !dbg !2066
  %1650 = load i64, i64* %28, align 8, !dbg !2067
  %1651 = add i64 %1650, 1, !dbg !2068
  %1652 = getelementptr inbounds i8, i8* %1649, i64 %1651, !dbg !2066
  %1653 = load i8, i8* %1652, align 1, !dbg !2066
  %1654 = sext i8 %1653 to i32, !dbg !2066
  %1655 = icmp sle i32 48, %1654, !dbg !2069
  %1656 = load i32, i32* @x.35
  %1657 = load i32, i32* @y.36
  %1658 = sub i32 %1656, 1
  %1659 = mul i32 %1656, %1658
  %1660 = urem i32 %1659, 2
  %1661 = icmp eq i32 %1660, 0
  %1662 = icmp slt i32 %1657, 10
  %1663 = or i1 %1661, %1662
  br i1 %1663, label %originalBBpart2508, label %originalBB502alteredBB

originalBBpart2508:                               ; preds = %originalBB502
  br i1 %1655, label %1664, label %1857, !dbg !2070

1664:                                             ; preds = %originalBBpart2508
  %1665 = load i32, i32* @x.35
  %1666 = load i32, i32* @y.36
  %1667 = sub i32 %1665, 1
  %1668 = mul i32 %1665, %1667
  %1669 = urem i32 %1668, 2
  %1670 = icmp eq i32 %1669, 0
  %1671 = icmp slt i32 %1666, 10
  %1672 = or i1 %1670, %1671
  br i1 %1672, label %originalBB510, label %originalBB510alteredBB

originalBB510:                                    ; preds = %1664, %originalBB510alteredBB
  %1673 = load i8*, i8** %21, align 8, !dbg !2071
  %1674 = load i64, i64* %28, align 8, !dbg !2072
  %1675 = add i64 %1674, 1, !dbg !2073
  %1676 = getelementptr inbounds i8, i8* %1673, i64 %1675, !dbg !2071
  %1677 = load i8, i8* %1676, align 1, !dbg !2071
  %1678 = sext i8 %1677 to i32, !dbg !2071
  %1679 = icmp sle i32 %1678, 57, !dbg !2074
  %1680 = load i32, i32* @x.35
  %1681 = load i32, i32* @y.36
  %1682 = sub i32 %1680, 1
  %1683 = mul i32 %1680, %1682
  %1684 = urem i32 %1683, 2
  %1685 = icmp eq i32 %1684, 0
  %1686 = icmp slt i32 %1681, 10
  %1687 = or i1 %1685, %1686
  br i1 %1687, label %originalBBpart2516, label %originalBB510alteredBB

originalBBpart2516:                               ; preds = %originalBB510
  br i1 %1679, label %1688, label %1857, !dbg !2075

1688:                                             ; preds = %originalBBpart2516
  %1689 = load i32, i32* @x.35
  %1690 = load i32, i32* @y.36
  %1691 = sub i32 %1689, 1
  %1692 = mul i32 %1689, %1691
  %1693 = urem i32 %1692, 2
  %1694 = icmp eq i32 %1693, 0
  %1695 = icmp slt i32 %1690, 10
  %1696 = or i1 %1694, %1695
  br i1 %1696, label %originalBB518, label %originalBB518alteredBB

originalBB518:                                    ; preds = %1688, %originalBB518alteredBB
  %1697 = load i32, i32* @x.35
  %1698 = load i32, i32* @y.36
  %1699 = sub i32 %1697, 1
  %1700 = mul i32 %1697, %1699
  %1701 = urem i32 %1700, 2
  %1702 = icmp eq i32 %1701, 0
  %1703 = icmp slt i32 %1698, 10
  %1704 = or i1 %1702, %1703
  br i1 %1704, label %originalBBpart2520, label %originalBB518alteredBB

originalBBpart2520:                               ; preds = %originalBB518
  br label %1705, !dbg !2076

1705:                                             ; preds = %originalBBpart2520
  %1706 = load i32, i32* @x.35
  %1707 = load i32, i32* @y.36
  %1708 = sub i32 %1706, 1
  %1709 = mul i32 %1706, %1708
  %1710 = urem i32 %1709, 2
  %1711 = icmp eq i32 %1710, 0
  %1712 = icmp slt i32 %1707, 10
  %1713 = or i1 %1711, %1712
  br i1 %1713, label %originalBB522, label %originalBB522alteredBB

originalBB522:                                    ; preds = %1705, %originalBB522alteredBB
  %1714 = load i64, i64* %29, align 8, !dbg !2078
  %1715 = load i64, i64* %20, align 8, !dbg !2078
  %1716 = icmp ult i64 %1714, %1715, !dbg !2078
  %1717 = load i32, i32* @x.35
  %1718 = load i32, i32* @y.36
  %1719 = sub i32 %1717, 1
  %1720 = mul i32 %1717, %1719
  %1721 = urem i32 %1720, 2
  %1722 = icmp eq i32 %1721, 0
  %1723 = icmp slt i32 %1718, 10
  %1724 = or i1 %1722, %1723
  br i1 %1724, label %originalBBpart2524, label %originalBB522alteredBB

originalBBpart2524:                               ; preds = %originalBB522
  br i1 %1716, label %1725, label %1745, !dbg !2081

1725:                                             ; preds = %originalBBpart2524
  %1726 = load i32, i32* @x.35
  %1727 = load i32, i32* @y.36
  %1728 = sub i32 %1726, 1
  %1729 = mul i32 %1726, %1728
  %1730 = urem i32 %1729, 2
  %1731 = icmp eq i32 %1730, 0
  %1732 = icmp slt i32 %1727, 10
  %1733 = or i1 %1731, %1732
  br i1 %1733, label %originalBB526, label %originalBB526alteredBB

originalBB526:                                    ; preds = %1725, %originalBB526alteredBB
  %1734 = load i8*, i8** %19, align 8, !dbg !2078
  %1735 = load i64, i64* %29, align 8, !dbg !2078
  %1736 = getelementptr inbounds i8, i8* %1734, i64 %1735, !dbg !2078
  store i8 48, i8* %1736, align 1, !dbg !2078
  %1737 = load i32, i32* @x.35
  %1738 = load i32, i32* @y.36
  %1739 = sub i32 %1737, 1
  %1740 = mul i32 %1737, %1739
  %1741 = urem i32 %1740, 2
  %1742 = icmp eq i32 %1741, 0
  %1743 = icmp slt i32 %1738, 10
  %1744 = or i1 %1742, %1743
  br i1 %1744, label %originalBBpart2528, label %originalBB526alteredBB

originalBBpart2528:                               ; preds = %originalBB526
  br label %1745, !dbg !2078

1745:                                             ; preds = %originalBBpart2528, %originalBBpart2524
  %1746 = load i32, i32* @x.35
  %1747 = load i32, i32* @y.36
  %1748 = sub i32 %1746, 1
  %1749 = mul i32 %1746, %1748
  %1750 = urem i32 %1749, 2
  %1751 = icmp eq i32 %1750, 0
  %1752 = icmp slt i32 %1747, 10
  %1753 = or i1 %1751, %1752
  br i1 %1753, label %originalBB530, label %originalBB530alteredBB

originalBB530:                                    ; preds = %1745, %originalBB530alteredBB
  %1754 = load i64, i64* %29, align 8, !dbg !2081
  %1755 = add i64 %1754, 1, !dbg !2081
  store i64 %1755, i64* %29, align 8, !dbg !2081
  %1756 = load i32, i32* @x.35
  %1757 = load i32, i32* @y.36
  %1758 = sub i32 %1756, 1
  %1759 = mul i32 %1756, %1758
  %1760 = urem i32 %1759, 2
  %1761 = icmp eq i32 %1760, 0
  %1762 = icmp slt i32 %1757, 10
  %1763 = or i1 %1761, %1762
  br i1 %1763, label %originalBBpart2532, label %originalBB530alteredBB

originalBBpart2532:                               ; preds = %originalBB530
  br label %1764, !dbg !2081

1764:                                             ; preds = %originalBBpart2532
  %1765 = load i32, i32* @x.35
  %1766 = load i32, i32* @y.36
  %1767 = sub i32 %1765, 1
  %1768 = mul i32 %1765, %1767
  %1769 = urem i32 %1768, 2
  %1770 = icmp eq i32 %1769, 0
  %1771 = icmp slt i32 %1766, 10
  %1772 = or i1 %1770, %1771
  br i1 %1772, label %originalBB534, label %originalBB534alteredBB

originalBB534:                                    ; preds = %1764, %originalBB534alteredBB
  %1773 = load i32, i32* @x.35
  %1774 = load i32, i32* @y.36
  %1775 = sub i32 %1773, 1
  %1776 = mul i32 %1773, %1775
  %1777 = urem i32 %1776, 2
  %1778 = icmp eq i32 %1777, 0
  %1779 = icmp slt i32 %1774, 10
  %1780 = or i1 %1778, %1779
  br i1 %1780, label %originalBBpart2536, label %originalBB534alteredBB

originalBBpart2536:                               ; preds = %originalBB534
  br label %1781, !dbg !2082

1781:                                             ; preds = %originalBBpart2536
  %1782 = load i32, i32* @x.35
  %1783 = load i32, i32* @y.36
  %1784 = sub i32 %1782, 1
  %1785 = mul i32 %1782, %1784
  %1786 = urem i32 %1785, 2
  %1787 = icmp eq i32 %1786, 0
  %1788 = icmp slt i32 %1783, 10
  %1789 = or i1 %1787, %1788
  br i1 %1789, label %originalBB538, label %originalBB538alteredBB

originalBB538:                                    ; preds = %1781, %originalBB538alteredBB
  %1790 = load i64, i64* %29, align 8, !dbg !2083
  %1791 = load i64, i64* %20, align 8, !dbg !2083
  %1792 = icmp ult i64 %1790, %1791, !dbg !2083
  %1793 = load i32, i32* @x.35
  %1794 = load i32, i32* @y.36
  %1795 = sub i32 %1793, 1
  %1796 = mul i32 %1793, %1795
  %1797 = urem i32 %1796, 2
  %1798 = icmp eq i32 %1797, 0
  %1799 = icmp slt i32 %1794, 10
  %1800 = or i1 %1798, %1799
  br i1 %1800, label %originalBBpart2540, label %originalBB538alteredBB

originalBBpart2540:                               ; preds = %originalBB538
  br i1 %1792, label %1801, label %1821, !dbg !2086

1801:                                             ; preds = %originalBBpart2540
  %1802 = load i32, i32* @x.35
  %1803 = load i32, i32* @y.36
  %1804 = sub i32 %1802, 1
  %1805 = mul i32 %1802, %1804
  %1806 = urem i32 %1805, 2
  %1807 = icmp eq i32 %1806, 0
  %1808 = icmp slt i32 %1803, 10
  %1809 = or i1 %1807, %1808
  br i1 %1809, label %originalBB542, label %originalBB542alteredBB

originalBB542:                                    ; preds = %1801, %originalBB542alteredBB
  %1810 = load i8*, i8** %19, align 8, !dbg !2083
  %1811 = load i64, i64* %29, align 8, !dbg !2083
  %1812 = getelementptr inbounds i8, i8* %1810, i64 %1811, !dbg !2083
  store i8 48, i8* %1812, align 1, !dbg !2083
  %1813 = load i32, i32* @x.35
  %1814 = load i32, i32* @y.36
  %1815 = sub i32 %1813, 1
  %1816 = mul i32 %1813, %1815
  %1817 = urem i32 %1816, 2
  %1818 = icmp eq i32 %1817, 0
  %1819 = icmp slt i32 %1814, 10
  %1820 = or i1 %1818, %1819
  br i1 %1820, label %originalBBpart2544, label %originalBB542alteredBB

originalBBpart2544:                               ; preds = %originalBB542
  br label %1821, !dbg !2083

1821:                                             ; preds = %originalBBpart2544, %originalBBpart2540
  %1822 = load i32, i32* @x.35
  %1823 = load i32, i32* @y.36
  %1824 = sub i32 %1822, 1
  %1825 = mul i32 %1822, %1824
  %1826 = urem i32 %1825, 2
  %1827 = icmp eq i32 %1826, 0
  %1828 = icmp slt i32 %1823, 10
  %1829 = or i1 %1827, %1828
  br i1 %1829, label %originalBB546, label %originalBB546alteredBB

originalBB546:                                    ; preds = %1821, %originalBB546alteredBB
  %1830 = load i64, i64* %29, align 8, !dbg !2086
  %1831 = add i64 %1830, 1, !dbg !2086
  store i64 %1831, i64* %29, align 8, !dbg !2086
  %1832 = load i32, i32* @x.35
  %1833 = load i32, i32* @y.36
  %1834 = sub i32 %1832, 1
  %1835 = mul i32 %1832, %1834
  %1836 = urem i32 %1835, 2
  %1837 = icmp eq i32 %1836, 0
  %1838 = icmp slt i32 %1833, 10
  %1839 = or i1 %1837, %1838
  br i1 %1839, label %originalBBpart2550, label %originalBB546alteredBB

originalBBpart2550:                               ; preds = %originalBB546
  br label %1840, !dbg !2086

1840:                                             ; preds = %originalBBpart2550
  %1841 = load i32, i32* @x.35
  %1842 = load i32, i32* @y.36
  %1843 = sub i32 %1841, 1
  %1844 = mul i32 %1841, %1843
  %1845 = urem i32 %1844, 2
  %1846 = icmp eq i32 %1845, 0
  %1847 = icmp slt i32 %1842, 10
  %1848 = or i1 %1846, %1847
  br i1 %1848, label %originalBB552, label %originalBB552alteredBB

originalBB552:                                    ; preds = %1840, %originalBB552alteredBB
  %1849 = load i32, i32* @x.35
  %1850 = load i32, i32* @y.36
  %1851 = sub i32 %1849, 1
  %1852 = mul i32 %1849, %1851
  %1853 = urem i32 %1852, 2
  %1854 = icmp eq i32 %1853, 0
  %1855 = icmp slt i32 %1850, 10
  %1856 = or i1 %1854, %1855
  br i1 %1856, label %originalBBpart2554, label %originalBB552alteredBB

originalBBpart2554:                               ; preds = %originalBB552
  br label %1857, !dbg !2087

1857:                                             ; preds = %originalBBpart2554, %originalBBpart2516, %originalBBpart2508, %originalBBpart2500, %originalBBpart2496
  %1858 = load i32, i32* @x.35
  %1859 = load i32, i32* @y.36
  %1860 = sub i32 %1858, 1
  %1861 = mul i32 %1858, %1860
  %1862 = urem i32 %1861, 2
  %1863 = icmp eq i32 %1862, 0
  %1864 = icmp slt i32 %1859, 10
  %1865 = or i1 %1863, %1864
  br i1 %1865, label %originalBB556, label %originalBB556alteredBB

originalBB556:                                    ; preds = %1857, %originalBB556alteredBB
  store i8 48, i8* %39, align 1, !dbg !2088
  %1866 = load i32, i32* @x.35
  %1867 = load i32, i32* @y.36
  %1868 = sub i32 %1866, 1
  %1869 = mul i32 %1866, %1868
  %1870 = urem i32 %1869, 2
  %1871 = icmp eq i32 %1870, 0
  %1872 = icmp slt i32 %1867, 10
  %1873 = or i1 %1871, %1872
  br i1 %1873, label %originalBBpart2558, label %originalBB556alteredBB

originalBBpart2558:                               ; preds = %originalBB556
  br label %1928, !dbg !2089

1874:                                             ; preds = %originalBBpart2283
  %1875 = load i32, i32* @x.35
  %1876 = load i32, i32* @y.36
  %1877 = sub i32 %1875, 1
  %1878 = mul i32 %1875, %1877
  %1879 = urem i32 %1878, 2
  %1880 = icmp eq i32 %1879, 0
  %1881 = icmp slt i32 %1876, 10
  %1882 = or i1 %1880, %1881
  br i1 %1882, label %originalBB560, label %originalBB560alteredBB

originalBB560:                                    ; preds = %1874, %originalBB560alteredBB
  %1883 = load i32, i32* %24, align 4, !dbg !2090
  %1884 = and i32 %1883, 1, !dbg !2092
  %1885 = icmp ne i32 %1884, 0, !dbg !2092
  %1886 = load i32, i32* @x.35
  %1887 = load i32, i32* @y.36
  %1888 = sub i32 %1886, 1
  %1889 = mul i32 %1886, %1888
  %1890 = urem i32 %1889, 2
  %1891 = icmp eq i32 %1890, 0
  %1892 = icmp slt i32 %1887, 10
  %1893 = or i1 %1891, %1892
  br i1 %1893, label %originalBBpart2572, label %originalBB560alteredBB

originalBBpart2572:                               ; preds = %originalBB560
  br i1 %1885, label %1894, label %1911, !dbg !2093

1894:                                             ; preds = %originalBBpart2572
  %1895 = load i32, i32* @x.35
  %1896 = load i32, i32* @y.36
  %1897 = sub i32 %1895, 1
  %1898 = mul i32 %1895, %1897
  %1899 = urem i32 %1898, 2
  %1900 = icmp eq i32 %1899, 0
  %1901 = icmp slt i32 %1896, 10
  %1902 = or i1 %1900, %1901
  br i1 %1902, label %originalBB574, label %originalBB574alteredBB

originalBB574:                                    ; preds = %1894, %originalBB574alteredBB
  %1903 = load i32, i32* @x.35
  %1904 = load i32, i32* @y.36
  %1905 = sub i32 %1903, 1
  %1906 = mul i32 %1903, %1905
  %1907 = urem i32 %1906, 2
  %1908 = icmp eq i32 %1907, 0
  %1909 = icmp slt i32 %1904, 10
  %1910 = or i1 %1908, %1909
  br i1 %1910, label %originalBBpart2576, label %originalBB574alteredBB

originalBBpart2576:                               ; preds = %originalBB574
  br label %6720, !dbg !2094

1911:                                             ; preds = %originalBBpart2572
  %1912 = load i32, i32* @x.35
  %1913 = load i32, i32* @y.36
  %1914 = sub i32 %1912, 1
  %1915 = mul i32 %1912, %1914
  %1916 = urem i32 %1915, 2
  %1917 = icmp eq i32 %1916, 0
  %1918 = icmp slt i32 %1913, 10
  %1919 = or i1 %1917, %1918
  br i1 %1919, label %originalBB578, label %originalBB578alteredBB

originalBB578:                                    ; preds = %1911, %originalBB578alteredBB
  %1920 = load i32, i32* @x.35
  %1921 = load i32, i32* @y.36
  %1922 = sub i32 %1920, 1
  %1923 = mul i32 %1920, %1922
  %1924 = urem i32 %1923, 2
  %1925 = icmp eq i32 %1924, 0
  %1926 = icmp slt i32 %1921, 10
  %1927 = or i1 %1925, %1926
  br i1 %1927, label %originalBBpart2580, label %originalBB578alteredBB

originalBBpart2580:                               ; preds = %originalBB578
  br label %1928

1928:                                             ; preds = %originalBBpart2580, %originalBBpart2558
  %1929 = load i32, i32* @x.35
  %1930 = load i32, i32* @y.36
  %1931 = sub i32 %1929, 1
  %1932 = mul i32 %1929, %1931
  %1933 = urem i32 %1932, 2
  %1934 = icmp eq i32 %1933, 0
  %1935 = icmp slt i32 %1930, 10
  %1936 = or i1 %1934, %1935
  br i1 %1936, label %originalBB582, label %originalBB582alteredBB

originalBB582:                                    ; preds = %1928, %originalBB582alteredBB
  %1937 = load i32, i32* @x.35
  %1938 = load i32, i32* @y.36
  %1939 = sub i32 %1937, 1
  %1940 = mul i32 %1937, %1939
  %1941 = urem i32 %1940, 2
  %1942 = icmp eq i32 %1941, 0
  %1943 = icmp slt i32 %1938, 10
  %1944 = or i1 %1942, %1943
  br i1 %1944, label %originalBBpart2584, label %originalBB582alteredBB

originalBBpart2584:                               ; preds = %originalBB582
  br label %5695, !dbg !2095

1945:                                             ; preds = %originalBBpart2279
  %1946 = load i32, i32* @x.35
  %1947 = load i32, i32* @y.36
  %1948 = sub i32 %1946, 1
  %1949 = mul i32 %1946, %1948
  %1950 = urem i32 %1949, 2
  %1951 = icmp eq i32 %1950, 0
  %1952 = icmp slt i32 %1947, 10
  %1953 = or i1 %1951, %1952
  br i1 %1953, label %originalBB586, label %originalBB586alteredBB

originalBB586:                                    ; preds = %1945, %originalBB586alteredBB
  %1954 = load i32, i32* %23, align 4, !dbg !2096
  %1955 = load i32, i32* @x.35
  %1956 = load i32, i32* @y.36
  %1957 = sub i32 %1955, 1
  %1958 = mul i32 %1955, %1957
  %1959 = urem i32 %1958, 2
  %1960 = icmp eq i32 %1959, 0
  %1961 = icmp slt i32 %1956, 10
  %1962 = or i1 %1960, %1961
  br i1 %1962, label %originalBBpart2588, label %originalBB586alteredBB

originalBBpart2588:                               ; preds = %originalBB586
  switch i32 %1954, label %2657 [
    i32 2, label %1963
    i32 5, label %2016
  ], !dbg !2097

1963:                                             ; preds = %originalBBpart2588
  %1964 = load i32, i32* @x.35
  %1965 = load i32, i32* @y.36
  %1966 = sub i32 %1964, 1
  %1967 = mul i32 %1964, %1966
  %1968 = urem i32 %1967, 2
  %1969 = icmp eq i32 %1968, 0
  %1970 = icmp slt i32 %1965, 10
  %1971 = or i1 %1969, %1970
  br i1 %1971, label %originalBB590, label %originalBB590alteredBB

originalBB590:                                    ; preds = %1963, %originalBB590alteredBB
  %1972 = load i8, i8* %35, align 1, !dbg !2098
  %1973 = trunc i8 %1972 to i1, !dbg !2098
  %1974 = load i32, i32* @x.35
  %1975 = load i32, i32* @y.36
  %1976 = sub i32 %1974, 1
  %1977 = mul i32 %1974, %1976
  %1978 = urem i32 %1977, 2
  %1979 = icmp eq i32 %1978, 0
  %1980 = icmp slt i32 %1975, 10
  %1981 = or i1 %1979, %1980
  br i1 %1981, label %originalBBpart2592, label %originalBB590alteredBB

originalBBpart2592:                               ; preds = %originalBB590
  br i1 %1973, label %1982, label %1999, !dbg !2101

1982:                                             ; preds = %originalBBpart2592
  %1983 = load i32, i32* @x.35
  %1984 = load i32, i32* @y.36
  %1985 = sub i32 %1983, 1
  %1986 = mul i32 %1983, %1985
  %1987 = urem i32 %1986, 2
  %1988 = icmp eq i32 %1987, 0
  %1989 = icmp slt i32 %1984, 10
  %1990 = or i1 %1988, %1989
  br i1 %1990, label %originalBB594, label %originalBB594alteredBB

originalBB594:                                    ; preds = %1982, %originalBB594alteredBB
  %1991 = load i32, i32* @x.35
  %1992 = load i32, i32* @y.36
  %1993 = sub i32 %1991, 1
  %1994 = mul i32 %1991, %1993
  %1995 = urem i32 %1994, 2
  %1996 = icmp eq i32 %1995, 0
  %1997 = icmp slt i32 %1992, 10
  %1998 = or i1 %1996, %1997
  br i1 %1998, label %originalBBpart2596, label %originalBB594alteredBB

originalBBpart2596:                               ; preds = %originalBB594
  br label %7269, !dbg !2102

1999:                                             ; preds = %originalBBpart2592
  %2000 = load i32, i32* @x.35
  %2001 = load i32, i32* @y.36
  %2002 = sub i32 %2000, 1
  %2003 = mul i32 %2000, %2002
  %2004 = urem i32 %2003, 2
  %2005 = icmp eq i32 %2004, 0
  %2006 = icmp slt i32 %2001, 10
  %2007 = or i1 %2005, %2006
  br i1 %2007, label %originalBB598, label %originalBB598alteredBB

originalBB598:                                    ; preds = %1999, %originalBB598alteredBB
  %2008 = load i32, i32* @x.35
  %2009 = load i32, i32* @y.36
  %2010 = sub i32 %2008, 1
  %2011 = mul i32 %2008, %2010
  %2012 = urem i32 %2011, 2
  %2013 = icmp eq i32 %2012, 0
  %2014 = icmp slt i32 %2009, 10
  %2015 = or i1 %2013, %2014
  br i1 %2015, label %originalBBpart2600, label %originalBB598alteredBB

originalBBpart2600:                               ; preds = %originalBB598
  br label %2674, !dbg !2103

2016:                                             ; preds = %originalBBpart2588
  %2017 = load i32, i32* @x.35
  %2018 = load i32, i32* @y.36
  %2019 = sub i32 %2017, 1
  %2020 = mul i32 %2017, %2019
  %2021 = urem i32 %2020, 2
  %2022 = icmp eq i32 %2021, 0
  %2023 = icmp slt i32 %2018, 10
  %2024 = or i1 %2022, %2023
  br i1 %2024, label %originalBB602, label %originalBB602alteredBB

originalBB602:                                    ; preds = %2016, %originalBB602alteredBB
  %2025 = load i32, i32* %24, align 4, !dbg !2104
  %2026 = and i32 %2025, 4, !dbg !2106
  %2027 = icmp ne i32 %2026, 0, !dbg !2106
  %2028 = load i32, i32* @x.35
  %2029 = load i32, i32* @y.36
  %2030 = sub i32 %2028, 1
  %2031 = mul i32 %2028, %2030
  %2032 = urem i32 %2031, 2
  %2033 = icmp eq i32 %2032, 0
  %2034 = icmp slt i32 %2029, 10
  %2035 = or i1 %2033, %2034
  br i1 %2035, label %originalBBpart2611, label %originalBB602alteredBB

originalBBpart2611:                               ; preds = %originalBB602
  br i1 %2027, label %2036, label %2640, !dbg !2107

2036:                                             ; preds = %originalBBpart2611
  %2037 = load i32, i32* @x.35
  %2038 = load i32, i32* @y.36
  %2039 = sub i32 %2037, 1
  %2040 = mul i32 %2037, %2039
  %2041 = urem i32 %2040, 2
  %2042 = icmp eq i32 %2041, 0
  %2043 = icmp slt i32 %2038, 10
  %2044 = or i1 %2042, %2043
  br i1 %2044, label %originalBB613, label %originalBB613alteredBB

originalBB613:                                    ; preds = %2036, %originalBB613alteredBB
  %2045 = load i64, i64* %28, align 8, !dbg !2108
  %2046 = add i64 %2045, 2, !dbg !2109
  %2047 = load i64, i64* %22, align 8, !dbg !2110
  %2048 = trunc i64 %2047 to i32
  %2049 = mul i32 %2048, -4
  %2050 = trunc i64 2 to i32
  %2051 = mul i32 %2050, 3
  %2052 = add i32 %2051, -5
  %2053 = mul i32 %2049, %2049
  %2054 = mul i32 %2052, %2052
  %2055 = add i32 %2053, %2054
  %2056 = mul i32 %2049, %2052
  %2057 = mul i32 %2056, 2
  %2058 = sub i32 %2055, %2057
  %2059 = mul i32 %2058, -2
  %2060 = add i32 %2059, -4
  %2061 = icmp ne i32 %2060, -2
  %2062 = load i32, i32* @x.35
  %2063 = load i32, i32* @y.36
  %2064 = sub i32 %2062, 1
  %2065 = mul i32 %2062, %2064
  %2066 = urem i32 %2065, 2
  %2067 = icmp eq i32 %2066, 0
  %2068 = icmp slt i32 %2063, 10
  %2069 = or i1 %2067, %2068
  br i1 %2069, label %originalBBpart2692, label %originalBB613alteredBB

originalBBpart2692:                               ; preds = %originalBB613
  br i1 %2061, label %2087, label %2070

2070:                                             ; preds = %originalBBpart2692
  %2071 = load i32, i32* @x.35
  %2072 = load i32, i32* @y.36
  %2073 = sub i32 %2071, 1
  %2074 = mul i32 %2071, %2073
  %2075 = urem i32 %2074, 2
  %2076 = icmp eq i32 %2075, 0
  %2077 = icmp slt i32 %2072, 10
  %2078 = or i1 %2076, %2077
  br i1 %2078, label %originalBB694, label %originalBB694alteredBB

originalBB694:                                    ; preds = %2070, %originalBB694alteredBB
  %2079 = load i32, i32* @x.35
  %2080 = load i32, i32* @y.36
  %2081 = sub i32 %2079, 1
  %2082 = mul i32 %2079, %2081
  %2083 = urem i32 %2082, 2
  %2084 = icmp eq i32 %2083, 0
  %2085 = icmp slt i32 %2080, 10
  %2086 = or i1 %2084, %2085
  br i1 %2086, label %originalBBpart2696, label %originalBB694alteredBB

originalBBpart2696:                               ; preds = %originalBB694
  ret i64 0

2087:                                             ; preds = %originalBBpart2692
  %2088 = load i32, i32* @x.35
  %2089 = load i32, i32* @y.36
  %2090 = sub i32 %2088, 1
  %2091 = mul i32 %2088, %2090
  %2092 = urem i32 %2091, 2
  %2093 = icmp eq i32 %2092, 0
  %2094 = icmp slt i32 %2089, 10
  %2095 = or i1 %2093, %2094
  br i1 %2095, label %originalBB698, label %originalBB698alteredBB

originalBB698:                                    ; preds = %2087, %originalBB698alteredBB
  %2096 = icmp ult i64 %2046, %2047, !dbg !2111
  %2097 = load i32, i32* @x.35
  %2098 = load i32, i32* @y.36
  %2099 = sub i32 %2097, 1
  %2100 = mul i32 %2097, %2099
  %2101 = urem i32 %2100, 2
  %2102 = icmp eq i32 %2101, 0
  %2103 = icmp slt i32 %2098, 10
  %2104 = or i1 %2102, %2103
  br i1 %2104, label %originalBBpart2700, label %originalBB698alteredBB

originalBBpart2700:                               ; preds = %originalBB698
  br i1 %2096, label %2105, label %2640, !dbg !2112

2105:                                             ; preds = %originalBBpart2700
  %2106 = load i32, i32* @x.35
  %2107 = load i32, i32* @y.36
  %2108 = sub i32 %2106, 1
  %2109 = mul i32 %2106, %2108
  %2110 = urem i32 %2109, 2
  %2111 = icmp eq i32 %2110, 0
  %2112 = icmp slt i32 %2107, 10
  %2113 = or i1 %2111, %2112
  br i1 %2113, label %originalBB702, label %originalBB702alteredBB

originalBB702:                                    ; preds = %2105, %originalBB702alteredBB
  %2114 = load i8*, i8** %21, align 8, !dbg !2113
  %2115 = load i64, i64* %28, align 8, !dbg !2114
  %2116 = add i64 %2115, 1, !dbg !2115
  %2117 = trunc i64 1 to i32
  %2118 = mul i32 %2117, 4
  %2119 = add i32 %2118, 3
  %2120 = trunc i64 %2115 to i32
  %2121 = mul i32 %2120, 2
  %2122 = add i32 %2121, 1
  %2123 = mul i32 %2119, %2119
  %2124 = mul i32 %2122, %2122
  %2125 = mul i32 %2124, 34
  %2126 = sub i32 %2123, %2125
  %2127 = mul i32 %2126, -2
  %2128 = add i32 %2127, -2
  %2129 = icmp ne i32 %2128, -4
  %2130 = load i32, i32* @x.35
  %2131 = load i32, i32* @y.36
  %2132 = sub i32 %2130, 1
  %2133 = mul i32 %2130, %2132
  %2134 = urem i32 %2133, 2
  %2135 = icmp eq i32 %2134, 0
  %2136 = icmp slt i32 %2131, 10
  %2137 = or i1 %2135, %2136
  br i1 %2137, label %originalBBpart2785, label %originalBB702alteredBB

originalBBpart2785:                               ; preds = %originalBB702
  br i1 %2129, label %2155, label %2138

2138:                                             ; preds = %originalBBpart2785
  %2139 = load i32, i32* @x.35
  %2140 = load i32, i32* @y.36
  %2141 = sub i32 %2139, 1
  %2142 = mul i32 %2139, %2141
  %2143 = urem i32 %2142, 2
  %2144 = icmp eq i32 %2143, 0
  %2145 = icmp slt i32 %2140, 10
  %2146 = or i1 %2144, %2145
  br i1 %2146, label %originalBB787, label %originalBB787alteredBB

originalBB787:                                    ; preds = %2138, %originalBB787alteredBB
  %2147 = load i32, i32* @x.35
  %2148 = load i32, i32* @y.36
  %2149 = sub i32 %2147, 1
  %2150 = mul i32 %2147, %2149
  %2151 = urem i32 %2150, 2
  %2152 = icmp eq i32 %2151, 0
  %2153 = icmp slt i32 %2148, 10
  %2154 = or i1 %2152, %2153
  br i1 %2154, label %originalBBpart2789, label %originalBB787alteredBB

originalBBpart2789:                               ; preds = %originalBB787
  ret i64 0

2155:                                             ; preds = %originalBBpart2785
  %2156 = load i32, i32* @x.35
  %2157 = load i32, i32* @y.36
  %2158 = sub i32 %2156, 1
  %2159 = mul i32 %2156, %2158
  %2160 = urem i32 %2159, 2
  %2161 = icmp eq i32 %2160, 0
  %2162 = icmp slt i32 %2157, 10
  %2163 = or i1 %2161, %2162
  br i1 %2163, label %originalBB791, label %originalBB791alteredBB

originalBB791:                                    ; preds = %2155, %originalBB791alteredBB
  %2164 = getelementptr inbounds i8, i8* %2114, i64 %2116, !dbg !2113
  %2165 = load i8, i8* %2164, align 1, !dbg !2113
  %2166 = sext i8 %2165 to i32, !dbg !2113
  %2167 = icmp eq i32 %2166, 63, !dbg !2116
  %2168 = load i32, i32* @x.35
  %2169 = load i32, i32* @y.36
  %2170 = sub i32 %2168, 1
  %2171 = mul i32 %2168, %2170
  %2172 = urem i32 %2171, 2
  %2173 = icmp eq i32 %2172, 0
  %2174 = icmp slt i32 %2169, 10
  %2175 = or i1 %2173, %2174
  br i1 %2175, label %originalBBpart2793, label %originalBB791alteredBB

originalBBpart2793:                               ; preds = %originalBB791
  br i1 %2167, label %2176, label %2640, !dbg !2117

2176:                                             ; preds = %originalBBpart2793
  %2177 = load i32, i32* @x.35
  %2178 = load i32, i32* @y.36
  %2179 = sub i32 %2177, 1
  %2180 = mul i32 %2177, %2179
  %2181 = urem i32 %2180, 2
  %2182 = icmp eq i32 %2181, 0
  %2183 = icmp slt i32 %2178, 10
  %2184 = or i1 %2182, %2183
  br i1 %2184, label %originalBB795, label %originalBB795alteredBB

originalBB795:                                    ; preds = %2176, %originalBB795alteredBB
  %2185 = load i8*, i8** %21, align 8, !dbg !2118
  %2186 = load i64, i64* %28, align 8, !dbg !2119
  %2187 = add i64 %2186, 2, !dbg !2120
  %2188 = getelementptr inbounds i8, i8* %2185, i64 %2187, !dbg !2118
  %2189 = load i8, i8* %2188, align 1, !dbg !2118
  %2190 = sext i8 %2189 to i32, !dbg !2118
  %2191 = load i32, i32* @x.35
  %2192 = load i32, i32* @y.36
  %2193 = sub i32 %2191, 1
  %2194 = mul i32 %2191, %2193
  %2195 = urem i32 %2194, 2
  %2196 = icmp eq i32 %2195, 0
  %2197 = icmp slt i32 %2192, 10
  %2198 = or i1 %2196, %2197
  br i1 %2198, label %originalBBpart2804, label %originalBB795alteredBB

originalBBpart2804:                               ; preds = %originalBB795
  switch i32 %2190, label %2606 [
    i32 33, label %2199
    i32 39, label %2199
    i32 40, label %2199
    i32 41, label %2199
    i32 45, label %2199
    i32 47, label %2199
    i32 60, label %2199
    i32 61, label %2199
    i32 62, label %2199
  ], !dbg !2121

2199:                                             ; preds = %originalBBpart2804, %originalBBpart2804, %originalBBpart2804, %originalBBpart2804, %originalBBpart2804, %originalBBpart2804, %originalBBpart2804, %originalBBpart2804, %originalBBpart2804
  %2200 = load i32, i32* @x.35
  %2201 = load i32, i32* @y.36
  %2202 = sub i32 %2200, 1
  %2203 = mul i32 %2200, %2202
  %2204 = urem i32 %2203, 2
  %2205 = icmp eq i32 %2204, 0
  %2206 = icmp slt i32 %2201, 10
  %2207 = or i1 %2205, %2206
  br i1 %2207, label %originalBB806, label %originalBB806alteredBB

originalBB806:                                    ; preds = %2199, %originalBB806alteredBB
  %2208 = load i8, i8* %35, align 1, !dbg !2122
  %2209 = trunc i8 %2208 to i1, !dbg !2122
  %2210 = load i32, i32* @x.35
  %2211 = load i32, i32* @y.36
  %2212 = sub i32 %2210, 1
  %2213 = mul i32 %2210, %2212
  %2214 = urem i32 %2213, 2
  %2215 = icmp eq i32 %2214, 0
  %2216 = icmp slt i32 %2211, 10
  %2217 = or i1 %2215, %2216
  br i1 %2217, label %originalBBpart2808, label %originalBB806alteredBB

originalBBpart2808:                               ; preds = %originalBB806
  br i1 %2209, label %2218, label %2235, !dbg !2125

2218:                                             ; preds = %originalBBpart2808
  %2219 = load i32, i32* @x.35
  %2220 = load i32, i32* @y.36
  %2221 = sub i32 %2219, 1
  %2222 = mul i32 %2219, %2221
  %2223 = urem i32 %2222, 2
  %2224 = icmp eq i32 %2223, 0
  %2225 = icmp slt i32 %2220, 10
  %2226 = or i1 %2224, %2225
  br i1 %2226, label %originalBB810, label %originalBB810alteredBB

originalBB810:                                    ; preds = %2218, %originalBB810alteredBB
  %2227 = load i32, i32* @x.35
  %2228 = load i32, i32* @y.36
  %2229 = sub i32 %2227, 1
  %2230 = mul i32 %2227, %2229
  %2231 = urem i32 %2230, 2
  %2232 = icmp eq i32 %2231, 0
  %2233 = icmp slt i32 %2228, 10
  %2234 = or i1 %2232, %2233
  br i1 %2234, label %originalBBpart2812, label %originalBB810alteredBB

originalBBpart2812:                               ; preds = %originalBB810
  br label %7269, !dbg !2126

2235:                                             ; preds = %originalBBpart2808
  %2236 = load i32, i32* @x.35
  %2237 = load i32, i32* @y.36
  %2238 = sub i32 %2236, 1
  %2239 = mul i32 %2236, %2238
  %2240 = urem i32 %2239, 2
  %2241 = icmp eq i32 %2240, 0
  %2242 = icmp slt i32 %2237, 10
  %2243 = or i1 %2241, %2242
  br i1 %2243, label %originalBB814, label %originalBB814alteredBB

originalBB814:                                    ; preds = %2235, %originalBB814alteredBB
  %2244 = load i8*, i8** %21, align 8, !dbg !2127
  %2245 = load i64, i64* %28, align 8, !dbg !2128
  %2246 = add i64 %2245, 2, !dbg !2129
  %2247 = getelementptr inbounds i8, i8* %2244, i64 %2246, !dbg !2127
  %2248 = load i8, i8* %2247, align 1, !dbg !2127
  store i8 %2248, i8* %39, align 1, !dbg !2130
  %2249 = load i64, i64* %28, align 8, !dbg !2131
  %2250 = add i64 %2249, 2, !dbg !2131
  store i64 %2250, i64* %28, align 8, !dbg !2131
  %2251 = load i32, i32* @x.35
  %2252 = load i32, i32* @y.36
  %2253 = sub i32 %2251, 1
  %2254 = mul i32 %2251, %2253
  %2255 = urem i32 %2254, 2
  %2256 = icmp eq i32 %2255, 0
  %2257 = icmp slt i32 %2252, 10
  %2258 = or i1 %2256, %2257
  br i1 %2258, label %originalBBpart2825, label %originalBB814alteredBB

originalBBpart2825:                               ; preds = %originalBB814
  br label %2259, !dbg !2132

2259:                                             ; preds = %originalBBpart2825
  %2260 = load i32, i32* @x.35
  %2261 = load i32, i32* @y.36
  %2262 = sub i32 %2260, 1
  %2263 = mul i32 %2260, %2262
  %2264 = urem i32 %2263, 2
  %2265 = icmp eq i32 %2264, 0
  %2266 = icmp slt i32 %2261, 10
  %2267 = or i1 %2265, %2266
  br i1 %2267, label %originalBB827, label %originalBB827alteredBB

originalBB827:                                    ; preds = %2259, %originalBB827alteredBB
  %2268 = load i64, i64* %29, align 8, !dbg !2133
  %2269 = load i64, i64* %20, align 8, !dbg !2133
  %2270 = icmp ult i64 %2268, %2269, !dbg !2133
  %2271 = load i32, i32* @x.35
  %2272 = load i32, i32* @y.36
  %2273 = sub i32 %2271, 1
  %2274 = mul i32 %2271, %2273
  %2275 = urem i32 %2274, 2
  %2276 = icmp eq i32 %2275, 0
  %2277 = icmp slt i32 %2272, 10
  %2278 = or i1 %2276, %2277
  br i1 %2278, label %originalBBpart2829, label %originalBB827alteredBB

originalBBpart2829:                               ; preds = %originalBB827
  br i1 %2270, label %2279, label %2299, !dbg !2136

2279:                                             ; preds = %originalBBpart2829
  %2280 = load i32, i32* @x.35
  %2281 = load i32, i32* @y.36
  %2282 = sub i32 %2280, 1
  %2283 = mul i32 %2280, %2282
  %2284 = urem i32 %2283, 2
  %2285 = icmp eq i32 %2284, 0
  %2286 = icmp slt i32 %2281, 10
  %2287 = or i1 %2285, %2286
  br i1 %2287, label %originalBB831, label %originalBB831alteredBB

originalBB831:                                    ; preds = %2279, %originalBB831alteredBB
  %2288 = load i8*, i8** %19, align 8, !dbg !2133
  %2289 = load i64, i64* %29, align 8, !dbg !2133
  %2290 = getelementptr inbounds i8, i8* %2288, i64 %2289, !dbg !2133
  store i8 63, i8* %2290, align 1, !dbg !2133
  %2291 = load i32, i32* @x.35
  %2292 = load i32, i32* @y.36
  %2293 = sub i32 %2291, 1
  %2294 = mul i32 %2291, %2293
  %2295 = urem i32 %2294, 2
  %2296 = icmp eq i32 %2295, 0
  %2297 = icmp slt i32 %2292, 10
  %2298 = or i1 %2296, %2297
  br i1 %2298, label %originalBBpart2833, label %originalBB831alteredBB

originalBBpart2833:                               ; preds = %originalBB831
  br label %2299, !dbg !2133

2299:                                             ; preds = %originalBBpart2833, %originalBBpart2829
  %2300 = load i32, i32* @x.35
  %2301 = load i32, i32* @y.36
  %2302 = sub i32 %2300, 1
  %2303 = mul i32 %2300, %2302
  %2304 = urem i32 %2303, 2
  %2305 = icmp eq i32 %2304, 0
  %2306 = icmp slt i32 %2301, 10
  %2307 = or i1 %2305, %2306
  br i1 %2307, label %originalBB835, label %originalBB835alteredBB

originalBB835:                                    ; preds = %2299, %originalBB835alteredBB
  %2308 = load i64, i64* %29, align 8, !dbg !2136
  %2309 = add i64 %2308, 1, !dbg !2136
  store i64 %2309, i64* %29, align 8, !dbg !2136
  %2310 = load i32, i32* @x.35
  %2311 = load i32, i32* @y.36
  %2312 = sub i32 %2310, 1
  %2313 = mul i32 %2310, %2312
  %2314 = urem i32 %2313, 2
  %2315 = icmp eq i32 %2314, 0
  %2316 = icmp slt i32 %2311, 10
  %2317 = or i1 %2315, %2316
  br i1 %2317, label %originalBBpart2841, label %originalBB835alteredBB

originalBBpart2841:                               ; preds = %originalBB835
  br label %2318, !dbg !2136

2318:                                             ; preds = %originalBBpart2841
  %2319 = load i32, i32* @x.35
  %2320 = load i32, i32* @y.36
  %2321 = sub i32 %2319, 1
  %2322 = mul i32 %2319, %2321
  %2323 = urem i32 %2322, 2
  %2324 = icmp eq i32 %2323, 0
  %2325 = icmp slt i32 %2320, 10
  %2326 = or i1 %2324, %2325
  br i1 %2326, label %originalBB843, label %originalBB843alteredBB

originalBB843:                                    ; preds = %2318, %originalBB843alteredBB
  %2327 = load i32, i32* @x.35
  %2328 = load i32, i32* @y.36
  %2329 = sub i32 %2327, 1
  %2330 = mul i32 %2327, %2329
  %2331 = urem i32 %2330, 2
  %2332 = icmp eq i32 %2331, 0
  %2333 = icmp slt i32 %2328, 10
  %2334 = or i1 %2332, %2333
  br i1 %2334, label %originalBBpart2845, label %originalBB843alteredBB

originalBBpart2845:                               ; preds = %originalBB843
  br label %2335, !dbg !2137

2335:                                             ; preds = %originalBBpart2845
  %2336 = load i32, i32* @x.35
  %2337 = load i32, i32* @y.36
  %2338 = sub i32 %2336, 1
  %2339 = mul i32 %2336, %2338
  %2340 = urem i32 %2339, 2
  %2341 = icmp eq i32 %2340, 0
  %2342 = icmp slt i32 %2337, 10
  %2343 = or i1 %2341, %2342
  br i1 %2343, label %originalBB847, label %originalBB847alteredBB

originalBB847:                                    ; preds = %2335, %originalBB847alteredBB
  %2344 = load i64, i64* %29, align 8, !dbg !2138
  %2345 = load i64, i64* %20, align 8, !dbg !2138
  %2346 = icmp ult i64 %2344, %2345, !dbg !2138
  %2347 = load i32, i32* @x.35
  %2348 = load i32, i32* @y.36
  %2349 = sub i32 %2347, 1
  %2350 = mul i32 %2347, %2349
  %2351 = urem i32 %2350, 2
  %2352 = icmp eq i32 %2351, 0
  %2353 = icmp slt i32 %2348, 10
  %2354 = or i1 %2352, %2353
  br i1 %2354, label %originalBBpart2849, label %originalBB847alteredBB

originalBBpart2849:                               ; preds = %originalBB847
  br i1 %2346, label %2355, label %2375, !dbg !2141

2355:                                             ; preds = %originalBBpart2849
  %2356 = load i32, i32* @x.35
  %2357 = load i32, i32* @y.36
  %2358 = sub i32 %2356, 1
  %2359 = mul i32 %2356, %2358
  %2360 = urem i32 %2359, 2
  %2361 = icmp eq i32 %2360, 0
  %2362 = icmp slt i32 %2357, 10
  %2363 = or i1 %2361, %2362
  br i1 %2363, label %originalBB851, label %originalBB851alteredBB

originalBB851:                                    ; preds = %2355, %originalBB851alteredBB
  %2364 = load i8*, i8** %19, align 8, !dbg !2138
  %2365 = load i64, i64* %29, align 8, !dbg !2138
  %2366 = getelementptr inbounds i8, i8* %2364, i64 %2365, !dbg !2138
  store i8 34, i8* %2366, align 1, !dbg !2138
  %2367 = load i32, i32* @x.35
  %2368 = load i32, i32* @y.36
  %2369 = sub i32 %2367, 1
  %2370 = mul i32 %2367, %2369
  %2371 = urem i32 %2370, 2
  %2372 = icmp eq i32 %2371, 0
  %2373 = icmp slt i32 %2368, 10
  %2374 = or i1 %2372, %2373
  br i1 %2374, label %originalBBpart2853, label %originalBB851alteredBB

originalBBpart2853:                               ; preds = %originalBB851
  br label %2375, !dbg !2138

2375:                                             ; preds = %originalBBpart2853, %originalBBpart2849
  %2376 = load i32, i32* @x.35
  %2377 = load i32, i32* @y.36
  %2378 = sub i32 %2376, 1
  %2379 = mul i32 %2376, %2378
  %2380 = urem i32 %2379, 2
  %2381 = icmp eq i32 %2380, 0
  %2382 = icmp slt i32 %2377, 10
  %2383 = or i1 %2381, %2382
  br i1 %2383, label %originalBB855, label %originalBB855alteredBB

originalBB855:                                    ; preds = %2375, %originalBB855alteredBB
  %2384 = load i64, i64* %29, align 8, !dbg !2141
  %2385 = add i64 %2384, 1, !dbg !2141
  %2386 = trunc i64 1 to i32
  %2387 = mul i32 %2386, -5
  %2388 = add i32 %2387, -5
  %2389 = mul i32 %2388, %2388
  %2390 = sub i32 %2389, %2388
  %2391 = srem i32 %2390, 2
  %2392 = mul i32 %2391, 5
  %2393 = add i32 %2392, 2
  %2394 = icmp eq i32 %2393, 2
  %2395 = load i32, i32* @x.35
  %2396 = load i32, i32* @y.36
  %2397 = sub i32 %2395, 1
  %2398 = mul i32 %2395, %2397
  %2399 = urem i32 %2398, 2
  %2400 = icmp eq i32 %2399, 0
  %2401 = icmp slt i32 %2396, 10
  %2402 = or i1 %2400, %2401
  br i1 %2402, label %originalBBpart2916, label %originalBB855alteredBB

originalBBpart2916:                               ; preds = %originalBB855
  br i1 %2394, label %2420, label %2403

2403:                                             ; preds = %originalBBpart2916
  %2404 = load i32, i32* @x.35
  %2405 = load i32, i32* @y.36
  %2406 = sub i32 %2404, 1
  %2407 = mul i32 %2404, %2406
  %2408 = urem i32 %2407, 2
  %2409 = icmp eq i32 %2408, 0
  %2410 = icmp slt i32 %2405, 10
  %2411 = or i1 %2409, %2410
  br i1 %2411, label %originalBB918, label %originalBB918alteredBB

originalBB918:                                    ; preds = %2403, %originalBB918alteredBB
  %2412 = load i32, i32* @x.35
  %2413 = load i32, i32* @y.36
  %2414 = sub i32 %2412, 1
  %2415 = mul i32 %2412, %2414
  %2416 = urem i32 %2415, 2
  %2417 = icmp eq i32 %2416, 0
  %2418 = icmp slt i32 %2413, 10
  %2419 = or i1 %2417, %2418
  br i1 %2419, label %originalBBpart2920, label %originalBB918alteredBB

originalBBpart2920:                               ; preds = %originalBB918
  ret i64 0

2420:                                             ; preds = %originalBBpart2916
  %2421 = load i32, i32* @x.35
  %2422 = load i32, i32* @y.36
  %2423 = sub i32 %2421, 1
  %2424 = mul i32 %2421, %2423
  %2425 = urem i32 %2424, 2
  %2426 = icmp eq i32 %2425, 0
  %2427 = icmp slt i32 %2422, 10
  %2428 = or i1 %2426, %2427
  br i1 %2428, label %originalBB922, label %originalBB922alteredBB

originalBB922:                                    ; preds = %2420, %originalBB922alteredBB
  store i64 %2385, i64* %29, align 8, !dbg !2141
  %2429 = load i32, i32* @x.35
  %2430 = load i32, i32* @y.36
  %2431 = sub i32 %2429, 1
  %2432 = mul i32 %2429, %2431
  %2433 = urem i32 %2432, 2
  %2434 = icmp eq i32 %2433, 0
  %2435 = icmp slt i32 %2430, 10
  %2436 = or i1 %2434, %2435
  br i1 %2436, label %originalBBpart2924, label %originalBB922alteredBB

originalBBpart2924:                               ; preds = %originalBB922
  br label %2437, !dbg !2141

2437:                                             ; preds = %originalBBpart2924
  %2438 = load i32, i32* @x.35
  %2439 = load i32, i32* @y.36
  %2440 = sub i32 %2438, 1
  %2441 = mul i32 %2438, %2440
  %2442 = urem i32 %2441, 2
  %2443 = icmp eq i32 %2442, 0
  %2444 = icmp slt i32 %2439, 10
  %2445 = or i1 %2443, %2444
  br i1 %2445, label %originalBB926, label %originalBB926alteredBB

originalBB926:                                    ; preds = %2437, %originalBB926alteredBB
  %2446 = load i32, i32* @x.35
  %2447 = load i32, i32* @y.36
  %2448 = sub i32 %2446, 1
  %2449 = mul i32 %2446, %2448
  %2450 = urem i32 %2449, 2
  %2451 = icmp eq i32 %2450, 0
  %2452 = icmp slt i32 %2447, 10
  %2453 = or i1 %2451, %2452
  br i1 %2453, label %originalBBpart2928, label %originalBB926alteredBB

originalBBpart2928:                               ; preds = %originalBB926
  br label %2454, !dbg !2142

2454:                                             ; preds = %originalBBpart2928
  %2455 = load i32, i32* @x.35
  %2456 = load i32, i32* @y.36
  %2457 = sub i32 %2455, 1
  %2458 = mul i32 %2455, %2457
  %2459 = urem i32 %2458, 2
  %2460 = icmp eq i32 %2459, 0
  %2461 = icmp slt i32 %2456, 10
  %2462 = or i1 %2460, %2461
  br i1 %2462, label %originalBB930, label %originalBB930alteredBB

originalBB930:                                    ; preds = %2454, %originalBB930alteredBB
  %2463 = load i64, i64* %29, align 8, !dbg !2143
  %2464 = load i64, i64* %20, align 8, !dbg !2143
  %2465 = icmp ult i64 %2463, %2464, !dbg !2143
  %2466 = load i32, i32* @x.35
  %2467 = load i32, i32* @y.36
  %2468 = sub i32 %2466, 1
  %2469 = mul i32 %2466, %2468
  %2470 = urem i32 %2469, 2
  %2471 = icmp eq i32 %2470, 0
  %2472 = icmp slt i32 %2467, 10
  %2473 = or i1 %2471, %2472
  br i1 %2473, label %originalBBpart2932, label %originalBB930alteredBB

originalBBpart2932:                               ; preds = %originalBB930
  br i1 %2465, label %2474, label %2494, !dbg !2146

2474:                                             ; preds = %originalBBpart2932
  %2475 = load i32, i32* @x.35
  %2476 = load i32, i32* @y.36
  %2477 = sub i32 %2475, 1
  %2478 = mul i32 %2475, %2477
  %2479 = urem i32 %2478, 2
  %2480 = icmp eq i32 %2479, 0
  %2481 = icmp slt i32 %2476, 10
  %2482 = or i1 %2480, %2481
  br i1 %2482, label %originalBB934, label %originalBB934alteredBB

originalBB934:                                    ; preds = %2474, %originalBB934alteredBB
  %2483 = load i8*, i8** %19, align 8, !dbg !2143
  %2484 = load i64, i64* %29, align 8, !dbg !2143
  %2485 = getelementptr inbounds i8, i8* %2483, i64 %2484, !dbg !2143
  store i8 34, i8* %2485, align 1, !dbg !2143
  %2486 = load i32, i32* @x.35
  %2487 = load i32, i32* @y.36
  %2488 = sub i32 %2486, 1
  %2489 = mul i32 %2486, %2488
  %2490 = urem i32 %2489, 2
  %2491 = icmp eq i32 %2490, 0
  %2492 = icmp slt i32 %2487, 10
  %2493 = or i1 %2491, %2492
  br i1 %2493, label %originalBBpart2936, label %originalBB934alteredBB

originalBBpart2936:                               ; preds = %originalBB934
  br label %2494, !dbg !2143

2494:                                             ; preds = %originalBBpart2936, %originalBBpart2932
  %2495 = load i32, i32* @x.35
  %2496 = load i32, i32* @y.36
  %2497 = sub i32 %2495, 1
  %2498 = mul i32 %2495, %2497
  %2499 = urem i32 %2498, 2
  %2500 = icmp eq i32 %2499, 0
  %2501 = icmp slt i32 %2496, 10
  %2502 = or i1 %2500, %2501
  br i1 %2502, label %originalBB938, label %originalBB938alteredBB

originalBB938:                                    ; preds = %2494, %originalBB938alteredBB
  %2503 = load i64, i64* %29, align 8, !dbg !2146
  %2504 = add i64 %2503, 1, !dbg !2146
  store i64 %2504, i64* %29, align 8, !dbg !2146
  %2505 = load i32, i32* @x.35
  %2506 = load i32, i32* @y.36
  %2507 = sub i32 %2505, 1
  %2508 = mul i32 %2505, %2507
  %2509 = urem i32 %2508, 2
  %2510 = icmp eq i32 %2509, 0
  %2511 = icmp slt i32 %2506, 10
  %2512 = or i1 %2510, %2511
  br i1 %2512, label %originalBBpart2948, label %originalBB938alteredBB

originalBBpart2948:                               ; preds = %originalBB938
  br label %2513, !dbg !2146

2513:                                             ; preds = %originalBBpart2948
  %2514 = load i32, i32* @x.35
  %2515 = load i32, i32* @y.36
  %2516 = sub i32 %2514, 1
  %2517 = mul i32 %2514, %2516
  %2518 = urem i32 %2517, 2
  %2519 = icmp eq i32 %2518, 0
  %2520 = icmp slt i32 %2515, 10
  %2521 = or i1 %2519, %2520
  br i1 %2521, label %originalBB950, label %originalBB950alteredBB

originalBB950:                                    ; preds = %2513, %originalBB950alteredBB
  %2522 = load i32, i32* @x.35
  %2523 = load i32, i32* @y.36
  %2524 = sub i32 %2522, 1
  %2525 = mul i32 %2522, %2524
  %2526 = urem i32 %2525, 2
  %2527 = icmp eq i32 %2526, 0
  %2528 = icmp slt i32 %2523, 10
  %2529 = or i1 %2527, %2528
  br i1 %2529, label %originalBBpart2952, label %originalBB950alteredBB

originalBBpart2952:                               ; preds = %originalBB950
  br label %2530, !dbg !2147

2530:                                             ; preds = %originalBBpart2952
  %2531 = load i32, i32* @x.35
  %2532 = load i32, i32* @y.36
  %2533 = sub i32 %2531, 1
  %2534 = mul i32 %2531, %2533
  %2535 = urem i32 %2534, 2
  %2536 = icmp eq i32 %2535, 0
  %2537 = icmp slt i32 %2532, 10
  %2538 = or i1 %2536, %2537
  br i1 %2538, label %originalBB954, label %originalBB954alteredBB

originalBB954:                                    ; preds = %2530, %originalBB954alteredBB
  %2539 = load i64, i64* %29, align 8, !dbg !2148
  %2540 = load i64, i64* %20, align 8, !dbg !2148
  %2541 = icmp ult i64 %2539, %2540, !dbg !2148
  %2542 = load i32, i32* @x.35
  %2543 = load i32, i32* @y.36
  %2544 = sub i32 %2542, 1
  %2545 = mul i32 %2542, %2544
  %2546 = urem i32 %2545, 2
  %2547 = icmp eq i32 %2546, 0
  %2548 = icmp slt i32 %2543, 10
  %2549 = or i1 %2547, %2548
  br i1 %2549, label %originalBBpart2956, label %originalBB954alteredBB

originalBBpart2956:                               ; preds = %originalBB954
  br i1 %2541, label %2550, label %2570, !dbg !2151

2550:                                             ; preds = %originalBBpart2956
  %2551 = load i32, i32* @x.35
  %2552 = load i32, i32* @y.36
  %2553 = sub i32 %2551, 1
  %2554 = mul i32 %2551, %2553
  %2555 = urem i32 %2554, 2
  %2556 = icmp eq i32 %2555, 0
  %2557 = icmp slt i32 %2552, 10
  %2558 = or i1 %2556, %2557
  br i1 %2558, label %originalBB958, label %originalBB958alteredBB

originalBB958:                                    ; preds = %2550, %originalBB958alteredBB
  %2559 = load i8*, i8** %19, align 8, !dbg !2148
  %2560 = load i64, i64* %29, align 8, !dbg !2148
  %2561 = getelementptr inbounds i8, i8* %2559, i64 %2560, !dbg !2148
  store i8 63, i8* %2561, align 1, !dbg !2148
  %2562 = load i32, i32* @x.35
  %2563 = load i32, i32* @y.36
  %2564 = sub i32 %2562, 1
  %2565 = mul i32 %2562, %2564
  %2566 = urem i32 %2565, 2
  %2567 = icmp eq i32 %2566, 0
  %2568 = icmp slt i32 %2563, 10
  %2569 = or i1 %2567, %2568
  br i1 %2569, label %originalBBpart2960, label %originalBB958alteredBB

originalBBpart2960:                               ; preds = %originalBB958
  br label %2570, !dbg !2148

2570:                                             ; preds = %originalBBpart2960, %originalBBpart2956
  %2571 = load i32, i32* @x.35
  %2572 = load i32, i32* @y.36
  %2573 = sub i32 %2571, 1
  %2574 = mul i32 %2571, %2573
  %2575 = urem i32 %2574, 2
  %2576 = icmp eq i32 %2575, 0
  %2577 = icmp slt i32 %2572, 10
  %2578 = or i1 %2576, %2577
  br i1 %2578, label %originalBB962, label %originalBB962alteredBB

originalBB962:                                    ; preds = %2570, %originalBB962alteredBB
  %2579 = load i64, i64* %29, align 8, !dbg !2151
  %2580 = add i64 %2579, 1, !dbg !2151
  store i64 %2580, i64* %29, align 8, !dbg !2151
  %2581 = load i32, i32* @x.35
  %2582 = load i32, i32* @y.36
  %2583 = sub i32 %2581, 1
  %2584 = mul i32 %2581, %2583
  %2585 = urem i32 %2584, 2
  %2586 = icmp eq i32 %2585, 0
  %2587 = icmp slt i32 %2582, 10
  %2588 = or i1 %2586, %2587
  br i1 %2588, label %originalBBpart2972, label %originalBB962alteredBB

originalBBpart2972:                               ; preds = %originalBB962
  br label %2589, !dbg !2151

2589:                                             ; preds = %originalBBpart2972
  %2590 = load i32, i32* @x.35
  %2591 = load i32, i32* @y.36
  %2592 = sub i32 %2590, 1
  %2593 = mul i32 %2590, %2592
  %2594 = urem i32 %2593, 2
  %2595 = icmp eq i32 %2594, 0
  %2596 = icmp slt i32 %2591, 10
  %2597 = or i1 %2595, %2596
  br i1 %2597, label %originalBB974, label %originalBB974alteredBB

originalBB974:                                    ; preds = %2589, %originalBB974alteredBB
  %2598 = load i32, i32* @x.35
  %2599 = load i32, i32* @y.36
  %2600 = sub i32 %2598, 1
  %2601 = mul i32 %2598, %2600
  %2602 = urem i32 %2601, 2
  %2603 = icmp eq i32 %2602, 0
  %2604 = icmp slt i32 %2599, 10
  %2605 = or i1 %2603, %2604
  br i1 %2605, label %originalBBpart2976, label %originalBB974alteredBB

originalBBpart2976:                               ; preds = %originalBB974
  br label %2623, !dbg !2152

2606:                                             ; preds = %originalBBpart2804
  %2607 = load i32, i32* @x.35
  %2608 = load i32, i32* @y.36
  %2609 = sub i32 %2607, 1
  %2610 = mul i32 %2607, %2609
  %2611 = urem i32 %2610, 2
  %2612 = icmp eq i32 %2611, 0
  %2613 = icmp slt i32 %2608, 10
  %2614 = or i1 %2612, %2613
  br i1 %2614, label %originalBB978, label %originalBB978alteredBB

originalBB978:                                    ; preds = %2606, %originalBB978alteredBB
  %2615 = load i32, i32* @x.35
  %2616 = load i32, i32* @y.36
  %2617 = sub i32 %2615, 1
  %2618 = mul i32 %2615, %2617
  %2619 = urem i32 %2618, 2
  %2620 = icmp eq i32 %2619, 0
  %2621 = icmp slt i32 %2616, 10
  %2622 = or i1 %2620, %2621
  br i1 %2622, label %originalBBpart2980, label %originalBB978alteredBB

originalBBpart2980:                               ; preds = %originalBB978
  br label %2623, !dbg !2153

2623:                                             ; preds = %originalBBpart2980, %originalBBpart2976
  %2624 = load i32, i32* @x.35
  %2625 = load i32, i32* @y.36
  %2626 = sub i32 %2624, 1
  %2627 = mul i32 %2624, %2626
  %2628 = urem i32 %2627, 2
  %2629 = icmp eq i32 %2628, 0
  %2630 = icmp slt i32 %2625, 10
  %2631 = or i1 %2629, %2630
  br i1 %2631, label %originalBB982, label %originalBB982alteredBB

originalBB982:                                    ; preds = %2623, %originalBB982alteredBB
  %2632 = load i32, i32* @x.35
  %2633 = load i32, i32* @y.36
  %2634 = sub i32 %2632, 1
  %2635 = mul i32 %2632, %2634
  %2636 = urem i32 %2635, 2
  %2637 = icmp eq i32 %2636, 0
  %2638 = icmp slt i32 %2633, 10
  %2639 = or i1 %2637, %2638
  br i1 %2639, label %originalBBpart2984, label %originalBB982alteredBB

originalBBpart2984:                               ; preds = %originalBB982
  br label %2640, !dbg !2154

2640:                                             ; preds = %originalBBpart2984, %originalBBpart2793, %originalBBpart2700, %originalBBpart2611
  %2641 = load i32, i32* @x.35
  %2642 = load i32, i32* @y.36
  %2643 = sub i32 %2641, 1
  %2644 = mul i32 %2641, %2643
  %2645 = urem i32 %2644, 2
  %2646 = icmp eq i32 %2645, 0
  %2647 = icmp slt i32 %2642, 10
  %2648 = or i1 %2646, %2647
  br i1 %2648, label %originalBB986, label %originalBB986alteredBB

originalBB986:                                    ; preds = %2640, %originalBB986alteredBB
  %2649 = load i32, i32* @x.35
  %2650 = load i32, i32* @y.36
  %2651 = sub i32 %2649, 1
  %2652 = mul i32 %2649, %2651
  %2653 = urem i32 %2652, 2
  %2654 = icmp eq i32 %2653, 0
  %2655 = icmp slt i32 %2650, 10
  %2656 = or i1 %2654, %2655
  br i1 %2656, label %originalBBpart2988, label %originalBB986alteredBB

originalBBpart2988:                               ; preds = %originalBB986
  br label %2674, !dbg !2155

2657:                                             ; preds = %originalBBpart2588
  %2658 = load i32, i32* @x.35
  %2659 = load i32, i32* @y.36
  %2660 = sub i32 %2658, 1
  %2661 = mul i32 %2658, %2660
  %2662 = urem i32 %2661, 2
  %2663 = icmp eq i32 %2662, 0
  %2664 = icmp slt i32 %2659, 10
  %2665 = or i1 %2663, %2664
  br i1 %2665, label %originalBB990, label %originalBB990alteredBB

originalBB990:                                    ; preds = %2657, %originalBB990alteredBB
  %2666 = load i32, i32* @x.35
  %2667 = load i32, i32* @y.36
  %2668 = sub i32 %2666, 1
  %2669 = mul i32 %2666, %2668
  %2670 = urem i32 %2669, 2
  %2671 = icmp eq i32 %2670, 0
  %2672 = icmp slt i32 %2667, 10
  %2673 = or i1 %2671, %2672
  br i1 %2673, label %originalBBpart2992, label %originalBB990alteredBB

originalBBpart2992:                               ; preds = %originalBB990
  br label %2674, !dbg !2156

2674:                                             ; preds = %originalBBpart2992, %originalBBpart2988, %originalBBpart2600
  %2675 = load i32, i32* @x.35
  %2676 = load i32, i32* @y.36
  %2677 = sub i32 %2675, 1
  %2678 = mul i32 %2675, %2677
  %2679 = urem i32 %2678, 2
  %2680 = icmp eq i32 %2679, 0
  %2681 = icmp slt i32 %2676, 10
  %2682 = or i1 %2680, %2681
  br i1 %2682, label %originalBB994, label %originalBB994alteredBB

originalBB994:                                    ; preds = %2674, %originalBB994alteredBB
  %2683 = load i32, i32* @x.35
  %2684 = load i32, i32* @y.36
  %2685 = sub i32 %2683, 1
  %2686 = mul i32 %2683, %2685
  %2687 = urem i32 %2686, 2
  %2688 = icmp eq i32 %2687, 0
  %2689 = icmp slt i32 %2684, 10
  %2690 = or i1 %2688, %2689
  br i1 %2690, label %originalBBpart2996, label %originalBB994alteredBB

originalBBpart2996:                               ; preds = %originalBB994
  br label %5695, !dbg !2157

2691:                                             ; preds = %originalBBpart2279
  %2692 = load i32, i32* @x.35
  %2693 = load i32, i32* @y.36
  %2694 = sub i32 %2692, 1
  %2695 = mul i32 %2692, %2694
  %2696 = urem i32 %2695, 2
  %2697 = icmp eq i32 %2696, 0
  %2698 = icmp slt i32 %2693, 10
  %2699 = or i1 %2697, %2698
  br i1 %2699, label %originalBB998, label %originalBB998alteredBB

originalBB998:                                    ; preds = %2691, %originalBB998alteredBB
  store i8 97, i8* %40, align 1, !dbg !2158
  %2700 = load i32, i32* @x.35
  %2701 = load i32, i32* @y.36
  %2702 = sub i32 %2700, 1
  %2703 = mul i32 %2700, %2702
  %2704 = urem i32 %2703, 2
  %2705 = icmp eq i32 %2704, 0
  %2706 = icmp slt i32 %2701, 10
  %2707 = or i1 %2705, %2706
  br i1 %2707, label %originalBBpart21000, label %originalBB998alteredBB

originalBBpart21000:                              ; preds = %originalBB998
  br label %3046, !dbg !2159

2708:                                             ; preds = %originalBBpart2279
  %2709 = load i32, i32* @x.35
  %2710 = load i32, i32* @y.36
  %2711 = sub i32 %2709, 1
  %2712 = mul i32 %2709, %2711
  %2713 = urem i32 %2712, 2
  %2714 = icmp eq i32 %2713, 0
  %2715 = icmp slt i32 %2710, 10
  %2716 = or i1 %2714, %2715
  br i1 %2716, label %originalBB1002, label %originalBB1002alteredBB

originalBB1002:                                   ; preds = %2708, %originalBB1002alteredBB
  store i8 98, i8* %40, align 1, !dbg !2160
  %2717 = load i32, i32* @x.35
  %2718 = load i32, i32* @y.36
  %2719 = sub i32 %2717, 1
  %2720 = mul i32 %2717, %2719
  %2721 = urem i32 %2720, 2
  %2722 = icmp eq i32 %2721, 0
  %2723 = icmp slt i32 %2718, 10
  %2724 = or i1 %2722, %2723
  br i1 %2724, label %originalBBpart21004, label %originalBB1002alteredBB

originalBBpart21004:                              ; preds = %originalBB1002
  br label %3046, !dbg !2161

2725:                                             ; preds = %originalBBpart2279
  %2726 = load i32, i32* @x.35
  %2727 = load i32, i32* @y.36
  %2728 = sub i32 %2726, 1
  %2729 = mul i32 %2726, %2728
  %2730 = urem i32 %2729, 2
  %2731 = icmp eq i32 %2730, 0
  %2732 = icmp slt i32 %2727, 10
  %2733 = or i1 %2731, %2732
  br i1 %2733, label %originalBB1006, label %originalBB1006alteredBB

originalBB1006:                                   ; preds = %2725, %originalBB1006alteredBB
  store i8 102, i8* %40, align 1, !dbg !2162
  %2734 = load i32, i32* @x.35
  %2735 = load i32, i32* @y.36
  %2736 = sub i32 %2734, 1
  %2737 = mul i32 %2734, %2736
  %2738 = urem i32 %2737, 2
  %2739 = icmp eq i32 %2738, 0
  %2740 = icmp slt i32 %2735, 10
  %2741 = or i1 %2739, %2740
  br i1 %2741, label %originalBBpart21008, label %originalBB1006alteredBB

originalBBpart21008:                              ; preds = %originalBB1006
  br label %3046, !dbg !2163

2742:                                             ; preds = %originalBBpart2279
  %2743 = load i32, i32* @x.35
  %2744 = load i32, i32* @y.36
  %2745 = sub i32 %2743, 1
  %2746 = mul i32 %2743, %2745
  %2747 = urem i32 %2746, 2
  %2748 = icmp eq i32 %2747, 0
  %2749 = icmp slt i32 %2744, 10
  %2750 = or i1 %2748, %2749
  br i1 %2750, label %originalBB1010, label %originalBB1010alteredBB

originalBB1010:                                   ; preds = %2742, %originalBB1010alteredBB
  store i8 110, i8* %40, align 1, !dbg !2164
  %2751 = load i32, i32* @x.35
  %2752 = load i32, i32* @y.36
  %2753 = sub i32 %2751, 1
  %2754 = mul i32 %2751, %2753
  %2755 = urem i32 %2754, 2
  %2756 = icmp eq i32 %2755, 0
  %2757 = icmp slt i32 %2752, 10
  %2758 = or i1 %2756, %2757
  br i1 %2758, label %originalBBpart21012, label %originalBB1010alteredBB

originalBBpart21012:                              ; preds = %originalBB1010
  br label %2974, !dbg !2165

2759:                                             ; preds = %originalBBpart2279
  %2760 = load i32, i32* @x.35
  %2761 = load i32, i32* @y.36
  %2762 = sub i32 %2760, 1
  %2763 = mul i32 %2760, %2762
  %2764 = urem i32 %2763, 2
  %2765 = icmp eq i32 %2764, 0
  %2766 = icmp slt i32 %2761, 10
  %2767 = or i1 %2765, %2766
  br i1 %2767, label %originalBB1014, label %originalBB1014alteredBB

originalBB1014:                                   ; preds = %2759, %originalBB1014alteredBB
  store i8 114, i8* %40, align 1, !dbg !2166
  %2768 = load i32, i32* @x.35
  %2769 = load i32, i32* @y.36
  %2770 = sub i32 %2768, 1
  %2771 = mul i32 %2768, %2770
  %2772 = urem i32 %2771, 2
  %2773 = icmp eq i32 %2772, 0
  %2774 = icmp slt i32 %2769, 10
  %2775 = or i1 %2773, %2774
  br i1 %2775, label %originalBBpart21016, label %originalBB1014alteredBB

originalBBpart21016:                              ; preds = %originalBB1014
  br label %2974, !dbg !2167

2776:                                             ; preds = %originalBBpart2279
  %2777 = load i32, i32* @x.35
  %2778 = load i32, i32* @y.36
  %2779 = sub i32 %2777, 1
  %2780 = mul i32 %2777, %2779
  %2781 = urem i32 %2780, 2
  %2782 = icmp eq i32 %2781, 0
  %2783 = icmp slt i32 %2778, 10
  %2784 = or i1 %2782, %2783
  br i1 %2784, label %originalBB1018, label %originalBB1018alteredBB

originalBB1018:                                   ; preds = %2776, %originalBB1018alteredBB
  store i8 116, i8* %40, align 1, !dbg !2168
  %2785 = load i32, i32* @x.35
  %2786 = load i32, i32* @y.36
  %2787 = sub i32 %2785, 1
  %2788 = mul i32 %2785, %2787
  %2789 = urem i32 %2788, 2
  %2790 = icmp eq i32 %2789, 0
  %2791 = icmp slt i32 %2786, 10
  %2792 = or i1 %2790, %2791
  br i1 %2792, label %originalBBpart21020, label %originalBB1018alteredBB

originalBBpart21020:                              ; preds = %originalBB1018
  br label %2974, !dbg !2169

2793:                                             ; preds = %originalBBpart2279
  %2794 = load i32, i32* @x.35
  %2795 = load i32, i32* @y.36
  %2796 = sub i32 %2794, 1
  %2797 = mul i32 %2794, %2796
  %2798 = urem i32 %2797, 2
  %2799 = icmp eq i32 %2798, 0
  %2800 = icmp slt i32 %2795, 10
  %2801 = or i1 %2799, %2800
  br i1 %2801, label %originalBB1022, label %originalBB1022alteredBB

originalBB1022:                                   ; preds = %2793, %originalBB1022alteredBB
  store i8 118, i8* %40, align 1, !dbg !2170
  %2802 = load i32, i32* @x.35
  %2803 = load i32, i32* @y.36
  %2804 = sub i32 %2802, 1
  %2805 = mul i32 %2802, %2804
  %2806 = urem i32 %2805, 2
  %2807 = icmp eq i32 %2806, 0
  %2808 = icmp slt i32 %2803, 10
  %2809 = or i1 %2807, %2808
  br i1 %2809, label %originalBBpart21024, label %originalBB1022alteredBB

originalBBpart21024:                              ; preds = %originalBB1022
  br label %3046, !dbg !2171

2810:                                             ; preds = %originalBBpart2279
  %2811 = load i32, i32* @x.35
  %2812 = load i32, i32* @y.36
  %2813 = sub i32 %2811, 1
  %2814 = mul i32 %2811, %2813
  %2815 = urem i32 %2814, 2
  %2816 = icmp eq i32 %2815, 0
  %2817 = icmp slt i32 %2812, 10
  %2818 = or i1 %2816, %2817
  br i1 %2818, label %originalBB1026, label %originalBB1026alteredBB

originalBB1026:                                   ; preds = %2810, %originalBB1026alteredBB
  %2819 = load i8, i8* %39, align 1, !dbg !2172
  store i8 %2819, i8* %40, align 1, !dbg !2173
  %2820 = load i32, i32* %23, align 4, !dbg !2174
  %2821 = icmp eq i32 %2820, 2, !dbg !2176
  %2822 = load i32, i32* @x.35
  %2823 = load i32, i32* @y.36
  %2824 = sub i32 %2822, 1
  %2825 = mul i32 %2822, %2824
  %2826 = urem i32 %2825, 2
  %2827 = icmp eq i32 %2826, 0
  %2828 = icmp slt i32 %2823, 10
  %2829 = or i1 %2827, %2828
  br i1 %2829, label %originalBBpart21028, label %originalBB1026alteredBB

originalBBpart21028:                              ; preds = %originalBB1026
  br i1 %2821, label %2830, label %2883, !dbg !2177

2830:                                             ; preds = %originalBBpart21028
  %2831 = load i32, i32* @x.35
  %2832 = load i32, i32* @y.36
  %2833 = sub i32 %2831, 1
  %2834 = mul i32 %2831, %2833
  %2835 = urem i32 %2834, 2
  %2836 = icmp eq i32 %2835, 0
  %2837 = icmp slt i32 %2832, 10
  %2838 = or i1 %2836, %2837
  br i1 %2838, label %originalBB1030, label %originalBB1030alteredBB

originalBB1030:                                   ; preds = %2830, %originalBB1030alteredBB
  %2839 = load i8, i8* %35, align 1, !dbg !2178
  %2840 = trunc i8 %2839 to i1, !dbg !2178
  %2841 = load i32, i32* @x.35
  %2842 = load i32, i32* @y.36
  %2843 = sub i32 %2841, 1
  %2844 = mul i32 %2841, %2843
  %2845 = urem i32 %2844, 2
  %2846 = icmp eq i32 %2845, 0
  %2847 = icmp slt i32 %2842, 10
  %2848 = or i1 %2846, %2847
  br i1 %2848, label %originalBBpart21032, label %originalBB1030alteredBB

originalBBpart21032:                              ; preds = %originalBB1030
  br i1 %2840, label %2849, label %2866, !dbg !2181

2849:                                             ; preds = %originalBBpart21032
  %2850 = load i32, i32* @x.35
  %2851 = load i32, i32* @y.36
  %2852 = sub i32 %2850, 1
  %2853 = mul i32 %2850, %2852
  %2854 = urem i32 %2853, 2
  %2855 = icmp eq i32 %2854, 0
  %2856 = icmp slt i32 %2851, 10
  %2857 = or i1 %2855, %2856
  br i1 %2857, label %originalBB1034, label %originalBB1034alteredBB

originalBB1034:                                   ; preds = %2849, %originalBB1034alteredBB
  %2858 = load i32, i32* @x.35
  %2859 = load i32, i32* @y.36
  %2860 = sub i32 %2858, 1
  %2861 = mul i32 %2858, %2860
  %2862 = urem i32 %2861, 2
  %2863 = icmp eq i32 %2862, 0
  %2864 = icmp slt i32 %2859, 10
  %2865 = or i1 %2863, %2864
  br i1 %2865, label %originalBBpart21036, label %originalBB1034alteredBB

originalBBpart21036:                              ; preds = %originalBB1034
  br label %7269, !dbg !2182

2866:                                             ; preds = %originalBBpart21032
  %2867 = load i32, i32* @x.35
  %2868 = load i32, i32* @y.36
  %2869 = sub i32 %2867, 1
  %2870 = mul i32 %2867, %2869
  %2871 = urem i32 %2870, 2
  %2872 = icmp eq i32 %2871, 0
  %2873 = icmp slt i32 %2868, 10
  %2874 = or i1 %2872, %2873
  br i1 %2874, label %originalBB1038, label %originalBB1038alteredBB

originalBB1038:                                   ; preds = %2866, %originalBB1038alteredBB
  %2875 = load i32, i32* @x.35
  %2876 = load i32, i32* @y.36
  %2877 = sub i32 %2875, 1
  %2878 = mul i32 %2875, %2877
  %2879 = urem i32 %2878, 2
  %2880 = icmp eq i32 %2879, 0
  %2881 = icmp slt i32 %2876, 10
  %2882 = or i1 %2880, %2881
  br i1 %2882, label %originalBBpart21040, label %originalBB1038alteredBB

originalBBpart21040:                              ; preds = %originalBB1038
  br label %6300, !dbg !2183

2883:                                             ; preds = %originalBBpart21028
  %2884 = load i32, i32* @x.35
  %2885 = load i32, i32* @y.36
  %2886 = sub i32 %2884, 1
  %2887 = mul i32 %2884, %2886
  %2888 = urem i32 %2887, 2
  %2889 = icmp eq i32 %2888, 0
  %2890 = icmp slt i32 %2885, 10
  %2891 = or i1 %2889, %2890
  br i1 %2891, label %originalBB1042, label %originalBB1042alteredBB

originalBB1042:                                   ; preds = %2883, %originalBB1042alteredBB
  %2892 = load i8, i8* %33, align 1, !dbg !2184
  %2893 = trunc i8 %2892 to i1, !dbg !2184
  %2894 = load i32, i32* @x.35
  %2895 = load i32, i32* @y.36
  %2896 = sub i32 %2894, 1
  %2897 = mul i32 %2894, %2896
  %2898 = urem i32 %2897, 2
  %2899 = icmp eq i32 %2898, 0
  %2900 = icmp slt i32 %2895, 10
  %2901 = or i1 %2899, %2900
  br i1 %2901, label %originalBBpart21044, label %originalBB1042alteredBB

originalBBpart21044:                              ; preds = %originalBB1042
  br i1 %2893, label %2902, label %2957, !dbg !2186

2902:                                             ; preds = %originalBBpart21044
  %2903 = load i32, i32* @x.35
  %2904 = load i32, i32* @y.36
  %2905 = sub i32 %2903, 1
  %2906 = mul i32 %2903, %2905
  %2907 = urem i32 %2906, 2
  %2908 = icmp eq i32 %2907, 0
  %2909 = icmp slt i32 %2904, 10
  %2910 = or i1 %2908, %2909
  br i1 %2910, label %originalBB1046, label %originalBB1046alteredBB

originalBB1046:                                   ; preds = %2902, %originalBB1046alteredBB
  %2911 = load i8, i8* %35, align 1, !dbg !2187
  %2912 = trunc i8 %2911 to i1, !dbg !2187
  %2913 = load i32, i32* @x.35
  %2914 = load i32, i32* @y.36
  %2915 = sub i32 %2913, 1
  %2916 = mul i32 %2913, %2915
  %2917 = urem i32 %2916, 2
  %2918 = icmp eq i32 %2917, 0
  %2919 = icmp slt i32 %2914, 10
  %2920 = or i1 %2918, %2919
  br i1 %2920, label %originalBBpart21048, label %originalBB1046alteredBB

originalBBpart21048:                              ; preds = %originalBB1046
  br i1 %2912, label %2921, label %2957, !dbg !2188

2921:                                             ; preds = %originalBBpart21048
  %2922 = load i32, i32* @x.35
  %2923 = load i32, i32* @y.36
  %2924 = sub i32 %2922, 1
  %2925 = mul i32 %2922, %2924
  %2926 = urem i32 %2925, 2
  %2927 = icmp eq i32 %2926, 0
  %2928 = icmp slt i32 %2923, 10
  %2929 = or i1 %2927, %2928
  br i1 %2929, label %originalBB1050, label %originalBB1050alteredBB

originalBB1050:                                   ; preds = %2921, %originalBB1050alteredBB
  %2930 = load i64, i64* %32, align 8, !dbg !2189
  %2931 = icmp ne i64 %2930, 0, !dbg !2189
  %2932 = load i32, i32* @x.35
  %2933 = load i32, i32* @y.36
  %2934 = sub i32 %2932, 1
  %2935 = mul i32 %2932, %2934
  %2936 = urem i32 %2935, 2
  %2937 = icmp eq i32 %2936, 0
  %2938 = icmp slt i32 %2933, 10
  %2939 = or i1 %2937, %2938
  br i1 %2939, label %originalBBpart21052, label %originalBB1050alteredBB

originalBBpart21052:                              ; preds = %originalBB1050
  br i1 %2931, label %2940, label %2957, !dbg !2190

2940:                                             ; preds = %originalBBpart21052
  %2941 = load i32, i32* @x.35
  %2942 = load i32, i32* @y.36
  %2943 = sub i32 %2941, 1
  %2944 = mul i32 %2941, %2943
  %2945 = urem i32 %2944, 2
  %2946 = icmp eq i32 %2945, 0
  %2947 = icmp slt i32 %2942, 10
  %2948 = or i1 %2946, %2947
  br i1 %2948, label %originalBB1054, label %originalBB1054alteredBB

originalBB1054:                                   ; preds = %2940, %originalBB1054alteredBB
  %2949 = load i32, i32* @x.35
  %2950 = load i32, i32* @y.36
  %2951 = sub i32 %2949, 1
  %2952 = mul i32 %2949, %2951
  %2953 = urem i32 %2952, 2
  %2954 = icmp eq i32 %2953, 0
  %2955 = icmp slt i32 %2950, 10
  %2956 = or i1 %2954, %2955
  br i1 %2956, label %originalBBpart21056, label %originalBB1054alteredBB

originalBBpart21056:                              ; preds = %originalBB1054
  br label %6300, !dbg !2191

2957:                                             ; preds = %originalBBpart21052, %originalBBpart21048, %originalBBpart21044
  %2958 = load i32, i32* @x.35
  %2959 = load i32, i32* @y.36
  %2960 = sub i32 %2958, 1
  %2961 = mul i32 %2958, %2960
  %2962 = urem i32 %2961, 2
  %2963 = icmp eq i32 %2962, 0
  %2964 = icmp slt i32 %2959, 10
  %2965 = or i1 %2963, %2964
  br i1 %2965, label %originalBB1058, label %originalBB1058alteredBB

originalBB1058:                                   ; preds = %2957, %originalBB1058alteredBB
  %2966 = load i32, i32* @x.35
  %2967 = load i32, i32* @y.36
  %2968 = sub i32 %2966, 1
  %2969 = mul i32 %2966, %2968
  %2970 = urem i32 %2969, 2
  %2971 = icmp eq i32 %2970, 0
  %2972 = icmp slt i32 %2967, 10
  %2973 = or i1 %2971, %2972
  br i1 %2973, label %originalBBpart21060, label %originalBB1058alteredBB

originalBBpart21060:                              ; preds = %originalBB1058
  br label %2974, !dbg !2189

2974:                                             ; preds = %originalBBpart21060, %originalBBpart21020, %originalBBpart21016, %originalBBpart21012
  call void @llvm.dbg.label(metadata !2192), !dbg !2193
  %2975 = load i32, i32* @x.35
  %2976 = load i32, i32* @y.36
  %2977 = sub i32 %2975, 1
  %2978 = mul i32 %2975, %2977
  %2979 = urem i32 %2978, 2
  %2980 = icmp eq i32 %2979, 0
  %2981 = icmp slt i32 %2976, 10
  %2982 = or i1 %2980, %2981
  br i1 %2982, label %originalBB1062, label %originalBB1062alteredBB

originalBB1062:                                   ; preds = %2974, %originalBB1062alteredBB
  %2983 = load i32, i32* %23, align 4, !dbg !2194
  %2984 = icmp eq i32 %2983, 2, !dbg !2196
  %2985 = load i32, i32* @x.35
  %2986 = load i32, i32* @y.36
  %2987 = sub i32 %2985, 1
  %2988 = mul i32 %2985, %2987
  %2989 = urem i32 %2988, 2
  %2990 = icmp eq i32 %2989, 0
  %2991 = icmp slt i32 %2986, 10
  %2992 = or i1 %2990, %2991
  br i1 %2992, label %originalBBpart21064, label %originalBB1062alteredBB

originalBBpart21064:                              ; preds = %originalBB1062
  br i1 %2984, label %2993, label %3029, !dbg !2197

2993:                                             ; preds = %originalBBpart21064
  %2994 = load i32, i32* @x.35
  %2995 = load i32, i32* @y.36
  %2996 = sub i32 %2994, 1
  %2997 = mul i32 %2994, %2996
  %2998 = urem i32 %2997, 2
  %2999 = icmp eq i32 %2998, 0
  %3000 = icmp slt i32 %2995, 10
  %3001 = or i1 %2999, %3000
  br i1 %3001, label %originalBB1066, label %originalBB1066alteredBB

originalBB1066:                                   ; preds = %2993, %originalBB1066alteredBB
  %3002 = load i8, i8* %35, align 1, !dbg !2198
  %3003 = trunc i8 %3002 to i1, !dbg !2198
  %3004 = load i32, i32* @x.35
  %3005 = load i32, i32* @y.36
  %3006 = sub i32 %3004, 1
  %3007 = mul i32 %3004, %3006
  %3008 = urem i32 %3007, 2
  %3009 = icmp eq i32 %3008, 0
  %3010 = icmp slt i32 %3005, 10
  %3011 = or i1 %3009, %3010
  br i1 %3011, label %originalBBpart21068, label %originalBB1066alteredBB

originalBBpart21068:                              ; preds = %originalBB1066
  br i1 %3003, label %3012, label %3029, !dbg !2199

3012:                                             ; preds = %originalBBpart21068
  %3013 = load i32, i32* @x.35
  %3014 = load i32, i32* @y.36
  %3015 = sub i32 %3013, 1
  %3016 = mul i32 %3013, %3015
  %3017 = urem i32 %3016, 2
  %3018 = icmp eq i32 %3017, 0
  %3019 = icmp slt i32 %3014, 10
  %3020 = or i1 %3018, %3019
  br i1 %3020, label %originalBB1070, label %originalBB1070alteredBB

originalBB1070:                                   ; preds = %3012, %originalBB1070alteredBB
  %3021 = load i32, i32* @x.35
  %3022 = load i32, i32* @y.36
  %3023 = sub i32 %3021, 1
  %3024 = mul i32 %3021, %3023
  %3025 = urem i32 %3024, 2
  %3026 = icmp eq i32 %3025, 0
  %3027 = icmp slt i32 %3022, 10
  %3028 = or i1 %3026, %3027
  br i1 %3028, label %originalBBpart21072, label %originalBB1070alteredBB

originalBBpart21072:                              ; preds = %originalBB1070
  br label %7269, !dbg !2200

3029:                                             ; preds = %originalBBpart21068, %originalBBpart21064
  %3030 = load i32, i32* @x.35
  %3031 = load i32, i32* @y.36
  %3032 = sub i32 %3030, 1
  %3033 = mul i32 %3030, %3032
  %3034 = urem i32 %3033, 2
  %3035 = icmp eq i32 %3034, 0
  %3036 = icmp slt i32 %3031, 10
  %3037 = or i1 %3035, %3036
  br i1 %3037, label %originalBB1074, label %originalBB1074alteredBB

originalBB1074:                                   ; preds = %3029, %originalBB1074alteredBB
  %3038 = load i32, i32* @x.35
  %3039 = load i32, i32* @y.36
  %3040 = sub i32 %3038, 1
  %3041 = mul i32 %3038, %3040
  %3042 = urem i32 %3041, 2
  %3043 = icmp eq i32 %3042, 0
  %3044 = icmp slt i32 %3039, 10
  %3045 = or i1 %3043, %3044
  br i1 %3045, label %originalBBpart21076, label %originalBB1074alteredBB

originalBBpart21076:                              ; preds = %originalBB1074
  br label %3046, !dbg !2198

3046:                                             ; preds = %originalBBpart21076, %originalBBpart21024, %originalBBpart21008, %originalBBpart21004, %originalBBpart21000
  call void @llvm.dbg.label(metadata !2201), !dbg !2202
  %3047 = load i32, i32* @x.35
  %3048 = load i32, i32* @y.36
  %3049 = sub i32 %3047, 1
  %3050 = mul i32 %3047, %3049
  %3051 = urem i32 %3050, 2
  %3052 = icmp eq i32 %3051, 0
  %3053 = icmp slt i32 %3048, 10
  %3054 = or i1 %3052, %3053
  br i1 %3054, label %originalBB1078, label %originalBB1078alteredBB

originalBB1078:                                   ; preds = %3046, %originalBB1078alteredBB
  %3055 = load i8, i8* %33, align 1, !dbg !2203
  %3056 = trunc i8 %3055 to i1, !dbg !2203
  %3057 = load i32, i32* @x.35
  %3058 = load i32, i32* @y.36
  %3059 = sub i32 %3057, 1
  %3060 = mul i32 %3057, %3059
  %3061 = urem i32 %3060, 2
  %3062 = icmp eq i32 %3061, 0
  %3063 = icmp slt i32 %3058, 10
  %3064 = or i1 %3062, %3063
  br i1 %3064, label %originalBBpart21080, label %originalBB1078alteredBB

originalBBpart21080:                              ; preds = %originalBB1078
  br i1 %3056, label %3065, label %3083, !dbg !2205

3065:                                             ; preds = %originalBBpart21080
  %3066 = load i32, i32* @x.35
  %3067 = load i32, i32* @y.36
  %3068 = sub i32 %3066, 1
  %3069 = mul i32 %3066, %3068
  %3070 = urem i32 %3069, 2
  %3071 = icmp eq i32 %3070, 0
  %3072 = icmp slt i32 %3067, 10
  %3073 = or i1 %3071, %3072
  br i1 %3073, label %originalBB1082, label %originalBB1082alteredBB

originalBB1082:                                   ; preds = %3065, %originalBB1082alteredBB
  %3074 = load i8, i8* %40, align 1, !dbg !2206
  store i8 %3074, i8* %39, align 1, !dbg !2208
  %3075 = load i32, i32* @x.35
  %3076 = load i32, i32* @y.36
  %3077 = sub i32 %3075, 1
  %3078 = mul i32 %3075, %3077
  %3079 = urem i32 %3078, 2
  %3080 = icmp eq i32 %3079, 0
  %3081 = icmp slt i32 %3076, 10
  %3082 = or i1 %3080, %3081
  br i1 %3082, label %originalBBpart21084, label %originalBB1082alteredBB

originalBBpart21084:                              ; preds = %originalBB1082
  br label %5854, !dbg !2209

3083:                                             ; preds = %originalBBpart21080
  %3084 = load i32, i32* @x.35
  %3085 = load i32, i32* @y.36
  %3086 = sub i32 %3084, 1
  %3087 = mul i32 %3084, %3086
  %3088 = urem i32 %3087, 2
  %3089 = icmp eq i32 %3088, 0
  %3090 = icmp slt i32 %3085, 10
  %3091 = or i1 %3089, %3090
  br i1 %3091, label %originalBB1086, label %originalBB1086alteredBB

originalBB1086:                                   ; preds = %3083, %originalBB1086alteredBB
  %3092 = load i32, i32* @x.35
  %3093 = load i32, i32* @y.36
  %3094 = sub i32 %3092, 1
  %3095 = mul i32 %3092, %3094
  %3096 = urem i32 %3095, 2
  %3097 = icmp eq i32 %3096, 0
  %3098 = icmp slt i32 %3093, 10
  %3099 = or i1 %3097, %3098
  br i1 %3099, label %originalBBpart21088, label %originalBB1086alteredBB

originalBBpart21088:                              ; preds = %originalBB1086
  br label %5695, !dbg !2210

3100:                                             ; preds = %originalBBpart2279, %originalBBpart2279
  %3101 = load i32, i32* @x.35
  %3102 = load i32, i32* @y.36
  %3103 = sub i32 %3101, 1
  %3104 = mul i32 %3101, %3103
  %3105 = urem i32 %3104, 2
  %3106 = icmp eq i32 %3105, 0
  %3107 = icmp slt i32 %3102, 10
  %3108 = or i1 %3106, %3107
  br i1 %3108, label %originalBB1090, label %originalBB1090alteredBB

originalBB1090:                                   ; preds = %3100, %originalBB1090alteredBB
  %3109 = load i64, i64* %22, align 8, !dbg !2211
  %3110 = icmp eq i64 %3109, -1, !dbg !2213
  %3111 = load i32, i32* @x.35
  %3112 = load i32, i32* @y.36
  %3113 = sub i32 %3111, 1
  %3114 = mul i32 %3111, %3113
  %3115 = urem i32 %3114, 2
  %3116 = icmp eq i32 %3115, 0
  %3117 = icmp slt i32 %3112, 10
  %3118 = or i1 %3116, %3117
  br i1 %3118, label %originalBBpart21092, label %originalBB1090alteredBB

originalBBpart21092:                              ; preds = %originalBB1090
  br i1 %3110, label %3119, label %3141, !dbg !2214

3119:                                             ; preds = %originalBBpart21092
  %3120 = load i32, i32* @x.35
  %3121 = load i32, i32* @y.36
  %3122 = sub i32 %3120, 1
  %3123 = mul i32 %3120, %3122
  %3124 = urem i32 %3123, 2
  %3125 = icmp eq i32 %3124, 0
  %3126 = icmp slt i32 %3121, 10
  %3127 = or i1 %3125, %3126
  br i1 %3127, label %originalBB1094, label %originalBB1094alteredBB

originalBB1094:                                   ; preds = %3119, %originalBB1094alteredBB
  %3128 = load i8*, i8** %21, align 8, !dbg !2215
  %3129 = getelementptr inbounds i8, i8* %3128, i64 1, !dbg !2215
  %3130 = load i8, i8* %3129, align 1, !dbg !2215
  %3131 = sext i8 %3130 to i32, !dbg !2215
  %3132 = icmp eq i32 %3131, 0, !dbg !2216
  %3133 = load i32, i32* @x.35
  %3134 = load i32, i32* @y.36
  %3135 = sub i32 %3133, 1
  %3136 = mul i32 %3133, %3135
  %3137 = urem i32 %3136, 2
  %3138 = icmp eq i32 %3137, 0
  %3139 = icmp slt i32 %3134, 10
  %3140 = or i1 %3138, %3139
  br i1 %3140, label %originalBBpart21096, label %originalBB1094alteredBB

originalBBpart21096:                              ; preds = %originalBB1094
  br i1 %3132, label %3177, label %3160, !dbg !2211

3141:                                             ; preds = %originalBBpart21092
  %3142 = load i32, i32* @x.35
  %3143 = load i32, i32* @y.36
  %3144 = sub i32 %3142, 1
  %3145 = mul i32 %3142, %3144
  %3146 = urem i32 %3145, 2
  %3147 = icmp eq i32 %3146, 0
  %3148 = icmp slt i32 %3143, 10
  %3149 = or i1 %3147, %3148
  br i1 %3149, label %originalBB1098, label %originalBB1098alteredBB

originalBB1098:                                   ; preds = %3141, %originalBB1098alteredBB
  %3150 = load i64, i64* %22, align 8, !dbg !2217
  %3151 = icmp eq i64 %3150, 1, !dbg !2218
  %3152 = load i32, i32* @x.35
  %3153 = load i32, i32* @y.36
  %3154 = sub i32 %3152, 1
  %3155 = mul i32 %3152, %3154
  %3156 = urem i32 %3155, 2
  %3157 = icmp eq i32 %3156, 0
  %3158 = icmp slt i32 %3153, 10
  %3159 = or i1 %3157, %3158
  br i1 %3159, label %originalBBpart21100, label %originalBB1098alteredBB

originalBBpart21100:                              ; preds = %originalBB1098
  br i1 %3151, label %3177, label %3160, !dbg !2214

3160:                                             ; preds = %originalBBpart21100, %originalBBpart21096
  %3161 = load i32, i32* @x.35
  %3162 = load i32, i32* @y.36
  %3163 = sub i32 %3161, 1
  %3164 = mul i32 %3161, %3163
  %3165 = urem i32 %3164, 2
  %3166 = icmp eq i32 %3165, 0
  %3167 = icmp slt i32 %3162, 10
  %3168 = or i1 %3166, %3167
  br i1 %3168, label %originalBB1102, label %originalBB1102alteredBB

originalBB1102:                                   ; preds = %3160, %originalBB1102alteredBB
  %3169 = load i32, i32* @x.35
  %3170 = load i32, i32* @y.36
  %3171 = sub i32 %3169, 1
  %3172 = mul i32 %3169, %3171
  %3173 = urem i32 %3172, 2
  %3174 = icmp eq i32 %3173, 0
  %3175 = icmp slt i32 %3170, 10
  %3176 = or i1 %3174, %3175
  br i1 %3176, label %originalBBpart21104, label %originalBB1102alteredBB

originalBBpart21104:                              ; preds = %originalBB1102
  br label %5695, !dbg !2219

3177:                                             ; preds = %originalBBpart21100, %originalBBpart21096
  %3178 = load i32, i32* @x.35
  %3179 = load i32, i32* @y.36
  %3180 = sub i32 %3178, 1
  %3181 = mul i32 %3178, %3180
  %3182 = urem i32 %3181, 2
  %3183 = icmp eq i32 %3182, 0
  %3184 = icmp slt i32 %3179, 10
  %3185 = or i1 %3183, %3184
  br i1 %3185, label %originalBB1106, label %originalBB1106alteredBB

originalBB1106:                                   ; preds = %3177, %originalBB1106alteredBB
  %3186 = load i32, i32* @x.35
  %3187 = load i32, i32* @y.36
  %3188 = sub i32 %3186, 1
  %3189 = mul i32 %3186, %3188
  %3190 = urem i32 %3189, 2
  %3191 = icmp eq i32 %3190, 0
  %3192 = icmp slt i32 %3187, 10
  %3193 = or i1 %3191, %3192
  br i1 %3193, label %originalBBpart21108, label %originalBB1106alteredBB

originalBBpart21108:                              ; preds = %originalBB1106
  br label %3194, !dbg !2220

3194:                                             ; preds = %originalBBpart21108, %originalBBpart2279, %originalBBpart2279
  %3195 = load i32, i32* @x.35
  %3196 = load i32, i32* @y.36
  %3197 = sub i32 %3195, 1
  %3198 = mul i32 %3195, %3197
  %3199 = urem i32 %3198, 2
  %3200 = icmp eq i32 %3199, 0
  %3201 = icmp slt i32 %3196, 10
  %3202 = or i1 %3200, %3201
  br i1 %3202, label %originalBB1110, label %originalBB1110alteredBB

originalBB1110:                                   ; preds = %3194, %originalBB1110alteredBB
  %3203 = load i64, i64* %28, align 8, !dbg !2221
  %3204 = icmp ne i64 %3203, 0, !dbg !2223
  %3205 = load i32, i32* @x.35
  %3206 = load i32, i32* @y.36
  %3207 = sub i32 %3205, 1
  %3208 = mul i32 %3205, %3207
  %3209 = urem i32 %3208, 2
  %3210 = icmp eq i32 %3209, 0
  %3211 = icmp slt i32 %3206, 10
  %3212 = or i1 %3210, %3211
  br i1 %3212, label %originalBBpart21112, label %originalBB1110alteredBB

originalBBpart21112:                              ; preds = %originalBB1110
  br i1 %3204, label %3213, label %3230, !dbg !2224

3213:                                             ; preds = %originalBBpart21112
  %3214 = load i32, i32* @x.35
  %3215 = load i32, i32* @y.36
  %3216 = sub i32 %3214, 1
  %3217 = mul i32 %3214, %3216
  %3218 = urem i32 %3217, 2
  %3219 = icmp eq i32 %3218, 0
  %3220 = icmp slt i32 %3215, 10
  %3221 = or i1 %3219, %3220
  br i1 %3221, label %originalBB1114, label %originalBB1114alteredBB

originalBB1114:                                   ; preds = %3213, %originalBB1114alteredBB
  %3222 = load i32, i32* @x.35
  %3223 = load i32, i32* @y.36
  %3224 = sub i32 %3222, 1
  %3225 = mul i32 %3222, %3224
  %3226 = urem i32 %3225, 2
  %3227 = icmp eq i32 %3226, 0
  %3228 = icmp slt i32 %3223, 10
  %3229 = or i1 %3227, %3228
  br i1 %3229, label %originalBBpart21116, label %originalBB1114alteredBB

originalBBpart21116:                              ; preds = %originalBB1114
  br label %5695, !dbg !2225

3230:                                             ; preds = %originalBBpart21112
  %3231 = load i32, i32* @x.35
  %3232 = load i32, i32* @y.36
  %3233 = sub i32 %3231, 1
  %3234 = mul i32 %3231, %3233
  %3235 = urem i32 %3234, 2
  %3236 = icmp eq i32 %3235, 0
  %3237 = icmp slt i32 %3232, 10
  %3238 = or i1 %3236, %3237
  br i1 %3238, label %originalBB1118, label %originalBB1118alteredBB

originalBB1118:                                   ; preds = %3230, %originalBB1118alteredBB
  %3239 = load i32, i32* @x.35
  %3240 = load i32, i32* @y.36
  %3241 = sub i32 %3239, 1
  %3242 = mul i32 %3239, %3241
  %3243 = urem i32 %3242, 2
  %3244 = icmp eq i32 %3243, 0
  %3245 = icmp slt i32 %3240, 10
  %3246 = or i1 %3244, %3245
  br i1 %3246, label %originalBBpart21120, label %originalBB1118alteredBB

originalBBpart21120:                              ; preds = %originalBB1118
  br label %3247, !dbg !2226

3247:                                             ; preds = %originalBBpart21120, %originalBBpart2279
  %3248 = load i32, i32* @x.35
  %3249 = load i32, i32* @y.36
  %3250 = sub i32 %3248, 1
  %3251 = mul i32 %3248, %3250
  %3252 = urem i32 %3251, 2
  %3253 = icmp eq i32 %3252, 0
  %3254 = icmp slt i32 %3249, 10
  %3255 = or i1 %3253, %3254
  br i1 %3255, label %originalBB1122, label %originalBB1122alteredBB

originalBB1122:                                   ; preds = %3247, %originalBB1122alteredBB
  store i8 1, i8* %43, align 1, !dbg !2227
  %3256 = load i32, i32* @x.35
  %3257 = load i32, i32* @y.36
  %3258 = sub i32 %3256, 1
  %3259 = mul i32 %3256, %3258
  %3260 = urem i32 %3259, 2
  %3261 = icmp eq i32 %3260, 0
  %3262 = icmp slt i32 %3257, 10
  %3263 = or i1 %3261, %3262
  br i1 %3263, label %originalBBpart21124, label %originalBB1122alteredBB

originalBBpart21124:                              ; preds = %originalBB1122
  br label %3264, !dbg !2228

3264:                                             ; preds = %originalBBpart21124, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279
  %3265 = load i32, i32* @x.35
  %3266 = load i32, i32* @y.36
  %3267 = sub i32 %3265, 1
  %3268 = mul i32 %3265, %3267
  %3269 = urem i32 %3268, 2
  %3270 = icmp eq i32 %3269, 0
  %3271 = icmp slt i32 %3266, 10
  %3272 = or i1 %3270, %3271
  br i1 %3272, label %originalBB1126, label %originalBB1126alteredBB

originalBB1126:                                   ; preds = %3264, %originalBB1126alteredBB
  %3273 = load i32, i32* %23, align 4, !dbg !2229
  %3274 = icmp eq i32 %3273, 2, !dbg !2231
  %3275 = load i32, i32* @x.35
  %3276 = load i32, i32* @y.36
  %3277 = sub i32 %3275, 1
  %3278 = mul i32 %3275, %3277
  %3279 = urem i32 %3278, 2
  %3280 = icmp eq i32 %3279, 0
  %3281 = icmp slt i32 %3276, 10
  %3282 = or i1 %3280, %3281
  br i1 %3282, label %originalBBpart21128, label %originalBB1126alteredBB

originalBBpart21128:                              ; preds = %originalBB1126
  br i1 %3274, label %3283, label %3319, !dbg !2232

3283:                                             ; preds = %originalBBpart21128
  %3284 = load i32, i32* @x.35
  %3285 = load i32, i32* @y.36
  %3286 = sub i32 %3284, 1
  %3287 = mul i32 %3284, %3286
  %3288 = urem i32 %3287, 2
  %3289 = icmp eq i32 %3288, 0
  %3290 = icmp slt i32 %3285, 10
  %3291 = or i1 %3289, %3290
  br i1 %3291, label %originalBB1130, label %originalBB1130alteredBB

originalBB1130:                                   ; preds = %3283, %originalBB1130alteredBB
  %3292 = load i8, i8* %35, align 1, !dbg !2233
  %3293 = trunc i8 %3292 to i1, !dbg !2233
  %3294 = load i32, i32* @x.35
  %3295 = load i32, i32* @y.36
  %3296 = sub i32 %3294, 1
  %3297 = mul i32 %3294, %3296
  %3298 = urem i32 %3297, 2
  %3299 = icmp eq i32 %3298, 0
  %3300 = icmp slt i32 %3295, 10
  %3301 = or i1 %3299, %3300
  br i1 %3301, label %originalBBpart21132, label %originalBB1130alteredBB

originalBBpart21132:                              ; preds = %originalBB1130
  br i1 %3293, label %3302, label %3319, !dbg !2234

3302:                                             ; preds = %originalBBpart21132
  %3303 = load i32, i32* @x.35
  %3304 = load i32, i32* @y.36
  %3305 = sub i32 %3303, 1
  %3306 = mul i32 %3303, %3305
  %3307 = urem i32 %3306, 2
  %3308 = icmp eq i32 %3307, 0
  %3309 = icmp slt i32 %3304, 10
  %3310 = or i1 %3308, %3309
  br i1 %3310, label %originalBB1134, label %originalBB1134alteredBB

originalBB1134:                                   ; preds = %3302, %originalBB1134alteredBB
  %3311 = load i32, i32* @x.35
  %3312 = load i32, i32* @y.36
  %3313 = sub i32 %3311, 1
  %3314 = mul i32 %3311, %3313
  %3315 = urem i32 %3314, 2
  %3316 = icmp eq i32 %3315, 0
  %3317 = icmp slt i32 %3312, 10
  %3318 = or i1 %3316, %3317
  br i1 %3318, label %originalBBpart21136, label %originalBB1134alteredBB

originalBBpart21136:                              ; preds = %originalBB1134
  br label %7269, !dbg !2235

3319:                                             ; preds = %originalBBpart21132, %originalBBpart21128
  %3320 = load i32, i32* @x.35
  %3321 = load i32, i32* @y.36
  %3322 = sub i32 %3320, 1
  %3323 = mul i32 %3320, %3322
  %3324 = urem i32 %3323, 2
  %3325 = icmp eq i32 %3324, 0
  %3326 = icmp slt i32 %3321, 10
  %3327 = or i1 %3325, %3326
  br i1 %3327, label %originalBB1138, label %originalBB1138alteredBB

originalBB1138:                                   ; preds = %3319, %originalBB1138alteredBB
  %3328 = load i32, i32* @x.35
  %3329 = load i32, i32* @y.36
  %3330 = sub i32 %3328, 1
  %3331 = mul i32 %3328, %3330
  %3332 = urem i32 %3331, 2
  %3333 = icmp eq i32 %3332, 0
  %3334 = icmp slt i32 %3329, 10
  %3335 = or i1 %3333, %3334
  br i1 %3335, label %originalBBpart21140, label %originalBB1138alteredBB

originalBBpart21140:                              ; preds = %originalBB1138
  br label %5695, !dbg !2236

3336:                                             ; preds = %originalBBpart2279
  %3337 = load i32, i32* @x.35
  %3338 = load i32, i32* @y.36
  %3339 = sub i32 %3337, 1
  %3340 = mul i32 %3337, %3339
  %3341 = urem i32 %3340, 2
  %3342 = icmp eq i32 %3341, 0
  %3343 = icmp slt i32 %3338, 10
  %3344 = or i1 %3342, %3343
  br i1 %3344, label %originalBB1142, label %originalBB1142alteredBB

originalBB1142:                                   ; preds = %3336, %originalBB1142alteredBB
  store i8 1, i8* %37, align 1, !dbg !2237
  store i8 1, i8* %43, align 1, !dbg !2238
  %3345 = load i32, i32* %23, align 4, !dbg !2239
  %3346 = icmp eq i32 %3345, 2, !dbg !2241
  %3347 = load i32, i32* @x.35
  %3348 = load i32, i32* @y.36
  %3349 = sub i32 %3347, 1
  %3350 = mul i32 %3347, %3349
  %3351 = urem i32 %3350, 2
  %3352 = icmp eq i32 %3351, 0
  %3353 = icmp slt i32 %3348, 10
  %3354 = or i1 %3352, %3353
  br i1 %3354, label %originalBBpart21144, label %originalBB1142alteredBB

originalBBpart21144:                              ; preds = %originalBB1142
  br i1 %3346, label %3355, label %3692, !dbg !2242

3355:                                             ; preds = %originalBBpart21144
  %3356 = load i32, i32* @x.35
  %3357 = load i32, i32* @y.36
  %3358 = sub i32 %3356, 1
  %3359 = mul i32 %3356, %3358
  %3360 = urem i32 %3359, 2
  %3361 = icmp eq i32 %3360, 0
  %3362 = icmp slt i32 %3357, 10
  %3363 = or i1 %3361, %3362
  br i1 %3363, label %originalBB1146, label %originalBB1146alteredBB

originalBB1146:                                   ; preds = %3355, %originalBB1146alteredBB
  %3364 = load i8, i8* %35, align 1, !dbg !2243
  %3365 = trunc i8 %3364 to i1, !dbg !2243
  %3366 = load i32, i32* @x.35
  %3367 = load i32, i32* @y.36
  %3368 = sub i32 %3366, 1
  %3369 = mul i32 %3366, %3368
  %3370 = urem i32 %3369, 2
  %3371 = icmp eq i32 %3370, 0
  %3372 = icmp slt i32 %3367, 10
  %3373 = or i1 %3371, %3372
  br i1 %3373, label %originalBBpart21148, label %originalBB1146alteredBB

originalBBpart21148:                              ; preds = %originalBB1146
  br i1 %3365, label %3374, label %3391, !dbg !2246

3374:                                             ; preds = %originalBBpart21148
  %3375 = load i32, i32* @x.35
  %3376 = load i32, i32* @y.36
  %3377 = sub i32 %3375, 1
  %3378 = mul i32 %3375, %3377
  %3379 = urem i32 %3378, 2
  %3380 = icmp eq i32 %3379, 0
  %3381 = icmp slt i32 %3376, 10
  %3382 = or i1 %3380, %3381
  br i1 %3382, label %originalBB1150, label %originalBB1150alteredBB

originalBB1150:                                   ; preds = %3374, %originalBB1150alteredBB
  %3383 = load i32, i32* @x.35
  %3384 = load i32, i32* @y.36
  %3385 = sub i32 %3383, 1
  %3386 = mul i32 %3383, %3385
  %3387 = urem i32 %3386, 2
  %3388 = icmp eq i32 %3387, 0
  %3389 = icmp slt i32 %3384, 10
  %3390 = or i1 %3388, %3389
  br i1 %3390, label %originalBBpart21152, label %originalBB1150alteredBB

originalBBpart21152:                              ; preds = %originalBB1150
  br label %7269, !dbg !2247

3391:                                             ; preds = %originalBBpart21148
  %3392 = load i32, i32* @x.35
  %3393 = load i32, i32* @y.36
  %3394 = sub i32 %3392, 1
  %3395 = mul i32 %3392, %3394
  %3396 = urem i32 %3395, 2
  %3397 = icmp eq i32 %3396, 0
  %3398 = icmp slt i32 %3393, 10
  %3399 = or i1 %3397, %3398
  br i1 %3399, label %originalBB1154, label %originalBB1154alteredBB

originalBB1154:                                   ; preds = %3391, %originalBB1154alteredBB
  %3400 = load i64, i64* %20, align 8, !dbg !2248
  %3401 = icmp ne i64 %3400, 0, !dbg !2248
  %3402 = load i32, i32* @x.35
  %3403 = load i32, i32* @y.36
  %3404 = sub i32 %3402, 1
  %3405 = mul i32 %3402, %3404
  %3406 = urem i32 %3405, 2
  %3407 = icmp eq i32 %3406, 0
  %3408 = icmp slt i32 %3403, 10
  %3409 = or i1 %3407, %3408
  br i1 %3409, label %originalBBpart21156, label %originalBB1154alteredBB

originalBBpart21156:                              ; preds = %originalBB1154
  br i1 %3401, label %3410, label %3447, !dbg !2250

3410:                                             ; preds = %originalBBpart21156
  %3411 = load i32, i32* @x.35
  %3412 = load i32, i32* @y.36
  %3413 = sub i32 %3411, 1
  %3414 = mul i32 %3411, %3413
  %3415 = urem i32 %3414, 2
  %3416 = icmp eq i32 %3415, 0
  %3417 = icmp slt i32 %3412, 10
  %3418 = or i1 %3416, %3417
  br i1 %3418, label %originalBB1158, label %originalBB1158alteredBB

originalBB1158:                                   ; preds = %3410, %originalBB1158alteredBB
  %3419 = load i64, i64* %30, align 8, !dbg !2251
  %3420 = icmp ne i64 %3419, 0, !dbg !2251
  %3421 = load i32, i32* @x.35
  %3422 = load i32, i32* @y.36
  %3423 = sub i32 %3421, 1
  %3424 = mul i32 %3421, %3423
  %3425 = urem i32 %3424, 2
  %3426 = icmp eq i32 %3425, 0
  %3427 = icmp slt i32 %3422, 10
  %3428 = or i1 %3426, %3427
  br i1 %3428, label %originalBBpart21160, label %originalBB1158alteredBB

originalBBpart21160:                              ; preds = %originalBB1158
  br i1 %3420, label %3447, label %3429, !dbg !2252

3429:                                             ; preds = %originalBBpart21160
  %3430 = load i32, i32* @x.35
  %3431 = load i32, i32* @y.36
  %3432 = sub i32 %3430, 1
  %3433 = mul i32 %3430, %3432
  %3434 = urem i32 %3433, 2
  %3435 = icmp eq i32 %3434, 0
  %3436 = icmp slt i32 %3431, 10
  %3437 = or i1 %3435, %3436
  br i1 %3437, label %originalBB1162, label %originalBB1162alteredBB

originalBB1162:                                   ; preds = %3429, %originalBB1162alteredBB
  %3438 = load i64, i64* %20, align 8, !dbg !2253
  store i64 %3438, i64* %30, align 8, !dbg !2255
  store i64 0, i64* %20, align 8, !dbg !2256
  %3439 = load i32, i32* @x.35
  %3440 = load i32, i32* @y.36
  %3441 = sub i32 %3439, 1
  %3442 = mul i32 %3439, %3441
  %3443 = urem i32 %3442, 2
  %3444 = icmp eq i32 %3443, 0
  %3445 = icmp slt i32 %3440, 10
  %3446 = or i1 %3444, %3445
  br i1 %3446, label %originalBBpart21164, label %originalBB1162alteredBB

originalBBpart21164:                              ; preds = %originalBB1162
  br label %3447, !dbg !2257

3447:                                             ; preds = %originalBBpart21164, %originalBBpart21160, %originalBBpart21156
  %3448 = load i32, i32* @x.35
  %3449 = load i32, i32* @y.36
  %3450 = sub i32 %3448, 1
  %3451 = mul i32 %3448, %3450
  %3452 = urem i32 %3451, 2
  %3453 = icmp eq i32 %3452, 0
  %3454 = icmp slt i32 %3449, 10
  %3455 = or i1 %3453, %3454
  br i1 %3455, label %originalBB1166, label %originalBB1166alteredBB

originalBB1166:                                   ; preds = %3447, %originalBB1166alteredBB
  %3456 = load i32, i32* @x.35
  %3457 = load i32, i32* @y.36
  %3458 = sub i32 %3456, 1
  %3459 = mul i32 %3456, %3458
  %3460 = urem i32 %3459, 2
  %3461 = icmp eq i32 %3460, 0
  %3462 = icmp slt i32 %3457, 10
  %3463 = or i1 %3461, %3462
  br i1 %3463, label %originalBBpart21168, label %originalBB1166alteredBB

originalBBpart21168:                              ; preds = %originalBB1166
  br label %3464, !dbg !2258

3464:                                             ; preds = %originalBBpart21168
  %3465 = load i32, i32* @x.35
  %3466 = load i32, i32* @y.36
  %3467 = sub i32 %3465, 1
  %3468 = mul i32 %3465, %3467
  %3469 = urem i32 %3468, 2
  %3470 = icmp eq i32 %3469, 0
  %3471 = icmp slt i32 %3466, 10
  %3472 = or i1 %3470, %3471
  br i1 %3472, label %originalBB1170, label %originalBB1170alteredBB

originalBB1170:                                   ; preds = %3464, %originalBB1170alteredBB
  %3473 = load i64, i64* %29, align 8, !dbg !2259
  %3474 = load i64, i64* %20, align 8, !dbg !2259
  %3475 = icmp ult i64 %3473, %3474, !dbg !2259
  %3476 = load i32, i32* @x.35
  %3477 = load i32, i32* @y.36
  %3478 = sub i32 %3476, 1
  %3479 = mul i32 %3476, %3478
  %3480 = urem i32 %3479, 2
  %3481 = icmp eq i32 %3480, 0
  %3482 = icmp slt i32 %3477, 10
  %3483 = or i1 %3481, %3482
  br i1 %3483, label %originalBBpart21172, label %originalBB1170alteredBB

originalBBpart21172:                              ; preds = %originalBB1170
  br i1 %3475, label %3484, label %3504, !dbg !2262

3484:                                             ; preds = %originalBBpart21172
  %3485 = load i32, i32* @x.35
  %3486 = load i32, i32* @y.36
  %3487 = sub i32 %3485, 1
  %3488 = mul i32 %3485, %3487
  %3489 = urem i32 %3488, 2
  %3490 = icmp eq i32 %3489, 0
  %3491 = icmp slt i32 %3486, 10
  %3492 = or i1 %3490, %3491
  br i1 %3492, label %originalBB1174, label %originalBB1174alteredBB

originalBB1174:                                   ; preds = %3484, %originalBB1174alteredBB
  %3493 = load i8*, i8** %19, align 8, !dbg !2259
  %3494 = load i64, i64* %29, align 8, !dbg !2259
  %3495 = getelementptr inbounds i8, i8* %3493, i64 %3494, !dbg !2259
  store i8 39, i8* %3495, align 1, !dbg !2259
  %3496 = load i32, i32* @x.35
  %3497 = load i32, i32* @y.36
  %3498 = sub i32 %3496, 1
  %3499 = mul i32 %3496, %3498
  %3500 = urem i32 %3499, 2
  %3501 = icmp eq i32 %3500, 0
  %3502 = icmp slt i32 %3497, 10
  %3503 = or i1 %3501, %3502
  br i1 %3503, label %originalBBpart21176, label %originalBB1174alteredBB

originalBBpart21176:                              ; preds = %originalBB1174
  br label %3504, !dbg !2259

3504:                                             ; preds = %originalBBpart21176, %originalBBpart21172
  %3505 = load i32, i32* @x.35
  %3506 = load i32, i32* @y.36
  %3507 = sub i32 %3505, 1
  %3508 = mul i32 %3505, %3507
  %3509 = urem i32 %3508, 2
  %3510 = icmp eq i32 %3509, 0
  %3511 = icmp slt i32 %3506, 10
  %3512 = or i1 %3510, %3511
  br i1 %3512, label %originalBB1178, label %originalBB1178alteredBB

originalBB1178:                                   ; preds = %3504, %originalBB1178alteredBB
  %3513 = load i64, i64* %29, align 8, !dbg !2262
  %3514 = add i64 %3513, 1, !dbg !2262
  store i64 %3514, i64* %29, align 8, !dbg !2262
  %3515 = load i32, i32* @x.35
  %3516 = load i32, i32* @y.36
  %3517 = sub i32 %3515, 1
  %3518 = mul i32 %3515, %3517
  %3519 = urem i32 %3518, 2
  %3520 = icmp eq i32 %3519, 0
  %3521 = icmp slt i32 %3516, 10
  %3522 = or i1 %3520, %3521
  br i1 %3522, label %originalBBpart21183, label %originalBB1178alteredBB

originalBBpart21183:                              ; preds = %originalBB1178
  br label %3523, !dbg !2262

3523:                                             ; preds = %originalBBpart21183
  %3524 = load i32, i32* @x.35
  %3525 = load i32, i32* @y.36
  %3526 = sub i32 %3524, 1
  %3527 = mul i32 %3524, %3526
  %3528 = urem i32 %3527, 2
  %3529 = icmp eq i32 %3528, 0
  %3530 = icmp slt i32 %3525, 10
  %3531 = or i1 %3529, %3530
  br i1 %3531, label %originalBB1185, label %originalBB1185alteredBB

originalBB1185:                                   ; preds = %3523, %originalBB1185alteredBB
  %3532 = load i32, i32* @x.35
  %3533 = load i32, i32* @y.36
  %3534 = sub i32 %3532, 1
  %3535 = mul i32 %3532, %3534
  %3536 = urem i32 %3535, 2
  %3537 = icmp eq i32 %3536, 0
  %3538 = icmp slt i32 %3533, 10
  %3539 = or i1 %3537, %3538
  br i1 %3539, label %originalBBpart21187, label %originalBB1185alteredBB

originalBBpart21187:                              ; preds = %originalBB1185
  br label %3540, !dbg !2263

3540:                                             ; preds = %originalBBpart21187
  %3541 = load i32, i32* @x.35
  %3542 = load i32, i32* @y.36
  %3543 = sub i32 %3541, 1
  %3544 = mul i32 %3541, %3543
  %3545 = urem i32 %3544, 2
  %3546 = icmp eq i32 %3545, 0
  %3547 = icmp slt i32 %3542, 10
  %3548 = or i1 %3546, %3547
  br i1 %3548, label %originalBB1189, label %originalBB1189alteredBB

originalBB1189:                                   ; preds = %3540, %originalBB1189alteredBB
  %3549 = load i64, i64* %29, align 8, !dbg !2264
  %3550 = load i64, i64* %20, align 8, !dbg !2264
  %3551 = icmp ult i64 %3549, %3550, !dbg !2264
  %3552 = load i32, i32* @x.35
  %3553 = load i32, i32* @y.36
  %3554 = sub i32 %3552, 1
  %3555 = mul i32 %3552, %3554
  %3556 = urem i32 %3555, 2
  %3557 = icmp eq i32 %3556, 0
  %3558 = icmp slt i32 %3553, 10
  %3559 = or i1 %3557, %3558
  br i1 %3559, label %originalBBpart21191, label %originalBB1189alteredBB

originalBBpart21191:                              ; preds = %originalBB1189
  br i1 %3551, label %3560, label %3580, !dbg !2267

3560:                                             ; preds = %originalBBpart21191
  %3561 = load i32, i32* @x.35
  %3562 = load i32, i32* @y.36
  %3563 = sub i32 %3561, 1
  %3564 = mul i32 %3561, %3563
  %3565 = urem i32 %3564, 2
  %3566 = icmp eq i32 %3565, 0
  %3567 = icmp slt i32 %3562, 10
  %3568 = or i1 %3566, %3567
  br i1 %3568, label %originalBB1193, label %originalBB1193alteredBB

originalBB1193:                                   ; preds = %3560, %originalBB1193alteredBB
  %3569 = load i8*, i8** %19, align 8, !dbg !2264
  %3570 = load i64, i64* %29, align 8, !dbg !2264
  %3571 = getelementptr inbounds i8, i8* %3569, i64 %3570, !dbg !2264
  store i8 92, i8* %3571, align 1, !dbg !2264
  %3572 = load i32, i32* @x.35
  %3573 = load i32, i32* @y.36
  %3574 = sub i32 %3572, 1
  %3575 = mul i32 %3572, %3574
  %3576 = urem i32 %3575, 2
  %3577 = icmp eq i32 %3576, 0
  %3578 = icmp slt i32 %3573, 10
  %3579 = or i1 %3577, %3578
  br i1 %3579, label %originalBBpart21195, label %originalBB1193alteredBB

originalBBpart21195:                              ; preds = %originalBB1193
  br label %3580, !dbg !2264

3580:                                             ; preds = %originalBBpart21195, %originalBBpart21191
  %3581 = load i32, i32* @x.35
  %3582 = load i32, i32* @y.36
  %3583 = sub i32 %3581, 1
  %3584 = mul i32 %3581, %3583
  %3585 = urem i32 %3584, 2
  %3586 = icmp eq i32 %3585, 0
  %3587 = icmp slt i32 %3582, 10
  %3588 = or i1 %3586, %3587
  br i1 %3588, label %originalBB1197, label %originalBB1197alteredBB

originalBB1197:                                   ; preds = %3580, %originalBB1197alteredBB
  %3589 = load i64, i64* %29, align 8, !dbg !2267
  %3590 = add i64 %3589, 1, !dbg !2267
  store i64 %3590, i64* %29, align 8, !dbg !2267
  %3591 = load i32, i32* @x.35
  %3592 = load i32, i32* @y.36
  %3593 = sub i32 %3591, 1
  %3594 = mul i32 %3591, %3593
  %3595 = urem i32 %3594, 2
  %3596 = icmp eq i32 %3595, 0
  %3597 = icmp slt i32 %3592, 10
  %3598 = or i1 %3596, %3597
  br i1 %3598, label %originalBBpart21211, label %originalBB1197alteredBB

originalBBpart21211:                              ; preds = %originalBB1197
  br label %3599, !dbg !2267

3599:                                             ; preds = %originalBBpart21211
  %3600 = load i32, i32* @x.35
  %3601 = load i32, i32* @y.36
  %3602 = sub i32 %3600, 1
  %3603 = mul i32 %3600, %3602
  %3604 = urem i32 %3603, 2
  %3605 = icmp eq i32 %3604, 0
  %3606 = icmp slt i32 %3601, 10
  %3607 = or i1 %3605, %3606
  br i1 %3607, label %originalBB1213, label %originalBB1213alteredBB

originalBB1213:                                   ; preds = %3599, %originalBB1213alteredBB
  %3608 = load i32, i32* @x.35
  %3609 = load i32, i32* @y.36
  %3610 = sub i32 %3608, 1
  %3611 = mul i32 %3608, %3610
  %3612 = urem i32 %3611, 2
  %3613 = icmp eq i32 %3612, 0
  %3614 = icmp slt i32 %3609, 10
  %3615 = or i1 %3613, %3614
  br i1 %3615, label %originalBBpart21215, label %originalBB1213alteredBB

originalBBpart21215:                              ; preds = %originalBB1213
  br label %3616, !dbg !2268

3616:                                             ; preds = %originalBBpart21215
  %3617 = load i32, i32* @x.35
  %3618 = load i32, i32* @y.36
  %3619 = sub i32 %3617, 1
  %3620 = mul i32 %3617, %3619
  %3621 = urem i32 %3620, 2
  %3622 = icmp eq i32 %3621, 0
  %3623 = icmp slt i32 %3618, 10
  %3624 = or i1 %3622, %3623
  br i1 %3624, label %originalBB1217, label %originalBB1217alteredBB

originalBB1217:                                   ; preds = %3616, %originalBB1217alteredBB
  %3625 = load i64, i64* %29, align 8, !dbg !2269
  %3626 = load i64, i64* %20, align 8, !dbg !2269
  %3627 = icmp ult i64 %3625, %3626, !dbg !2269
  %3628 = load i32, i32* @x.35
  %3629 = load i32, i32* @y.36
  %3630 = sub i32 %3628, 1
  %3631 = mul i32 %3628, %3630
  %3632 = urem i32 %3631, 2
  %3633 = icmp eq i32 %3632, 0
  %3634 = icmp slt i32 %3629, 10
  %3635 = or i1 %3633, %3634
  br i1 %3635, label %originalBBpart21219, label %originalBB1217alteredBB

originalBBpart21219:                              ; preds = %originalBB1217
  br i1 %3627, label %3636, label %3656, !dbg !2272

3636:                                             ; preds = %originalBBpart21219
  %3637 = load i32, i32* @x.35
  %3638 = load i32, i32* @y.36
  %3639 = sub i32 %3637, 1
  %3640 = mul i32 %3637, %3639
  %3641 = urem i32 %3640, 2
  %3642 = icmp eq i32 %3641, 0
  %3643 = icmp slt i32 %3638, 10
  %3644 = or i1 %3642, %3643
  br i1 %3644, label %originalBB1221, label %originalBB1221alteredBB

originalBB1221:                                   ; preds = %3636, %originalBB1221alteredBB
  %3645 = load i8*, i8** %19, align 8, !dbg !2269
  %3646 = load i64, i64* %29, align 8, !dbg !2269
  %3647 = getelementptr inbounds i8, i8* %3645, i64 %3646, !dbg !2269
  store i8 39, i8* %3647, align 1, !dbg !2269
  %3648 = load i32, i32* @x.35
  %3649 = load i32, i32* @y.36
  %3650 = sub i32 %3648, 1
  %3651 = mul i32 %3648, %3650
  %3652 = urem i32 %3651, 2
  %3653 = icmp eq i32 %3652, 0
  %3654 = icmp slt i32 %3649, 10
  %3655 = or i1 %3653, %3654
  br i1 %3655, label %originalBBpart21223, label %originalBB1221alteredBB

originalBBpart21223:                              ; preds = %originalBB1221
  br label %3656, !dbg !2269

3656:                                             ; preds = %originalBBpart21223, %originalBBpart21219
  %3657 = load i32, i32* @x.35
  %3658 = load i32, i32* @y.36
  %3659 = sub i32 %3657, 1
  %3660 = mul i32 %3657, %3659
  %3661 = urem i32 %3660, 2
  %3662 = icmp eq i32 %3661, 0
  %3663 = icmp slt i32 %3658, 10
  %3664 = or i1 %3662, %3663
  br i1 %3664, label %originalBB1225, label %originalBB1225alteredBB

originalBB1225:                                   ; preds = %3656, %originalBB1225alteredBB
  %3665 = load i64, i64* %29, align 8, !dbg !2272
  %3666 = add i64 %3665, 1, !dbg !2272
  store i64 %3666, i64* %29, align 8, !dbg !2272
  %3667 = load i32, i32* @x.35
  %3668 = load i32, i32* @y.36
  %3669 = sub i32 %3667, 1
  %3670 = mul i32 %3667, %3669
  %3671 = urem i32 %3670, 2
  %3672 = icmp eq i32 %3671, 0
  %3673 = icmp slt i32 %3668, 10
  %3674 = or i1 %3672, %3673
  br i1 %3674, label %originalBBpart21233, label %originalBB1225alteredBB

originalBBpart21233:                              ; preds = %originalBB1225
  br label %3675, !dbg !2272

3675:                                             ; preds = %originalBBpart21233
  %3676 = load i32, i32* @x.35
  %3677 = load i32, i32* @y.36
  %3678 = sub i32 %3676, 1
  %3679 = mul i32 %3676, %3678
  %3680 = urem i32 %3679, 2
  %3681 = icmp eq i32 %3680, 0
  %3682 = icmp slt i32 %3677, 10
  %3683 = or i1 %3681, %3682
  br i1 %3683, label %originalBB1235, label %originalBB1235alteredBB

originalBB1235:                                   ; preds = %3675, %originalBB1235alteredBB
  store i8 0, i8* %36, align 1, !dbg !2273
  %3684 = load i32, i32* @x.35
  %3685 = load i32, i32* @y.36
  %3686 = sub i32 %3684, 1
  %3687 = mul i32 %3684, %3686
  %3688 = urem i32 %3687, 2
  %3689 = icmp eq i32 %3688, 0
  %3690 = icmp slt i32 %3685, 10
  %3691 = or i1 %3689, %3690
  br i1 %3691, label %originalBBpart21237, label %originalBB1235alteredBB

originalBBpart21237:                              ; preds = %originalBB1235
  br label %3692, !dbg !2274

3692:                                             ; preds = %originalBBpart21237, %originalBBpart21144
  %3693 = load i32, i32* @x.35
  %3694 = load i32, i32* @y.36
  %3695 = sub i32 %3693, 1
  %3696 = mul i32 %3693, %3695
  %3697 = urem i32 %3696, 2
  %3698 = icmp eq i32 %3697, 0
  %3699 = icmp slt i32 %3694, 10
  %3700 = or i1 %3698, %3699
  br i1 %3700, label %originalBB1239, label %originalBB1239alteredBB

originalBB1239:                                   ; preds = %3692, %originalBB1239alteredBB
  %3701 = load i32, i32* @x.35
  %3702 = load i32, i32* @y.36
  %3703 = sub i32 %3701, 1
  %3704 = mul i32 %3701, %3703
  %3705 = urem i32 %3704, 2
  %3706 = icmp eq i32 %3705, 0
  %3707 = icmp slt i32 %3702, 10
  %3708 = or i1 %3706, %3707
  br i1 %3708, label %originalBBpart21241, label %originalBB1239alteredBB

originalBBpart21241:                              ; preds = %originalBB1239
  br label %5695, !dbg !2275

3709:                                             ; preds = %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279, %originalBBpart2279
  %3710 = load i32, i32* @x.35
  %3711 = load i32, i32* @y.36
  %3712 = sub i32 %3710, 1
  %3713 = mul i32 %3710, %3712
  %3714 = urem i32 %3713, 2
  %3715 = icmp eq i32 %3714, 0
  %3716 = icmp slt i32 %3711, 10
  %3717 = or i1 %3715, %3716
  br i1 %3717, label %originalBB1243, label %originalBB1243alteredBB

originalBB1243:                                   ; preds = %3709, %originalBB1243alteredBB
  store i8 1, i8* %43, align 1, !dbg !2276
  %3718 = load i32, i32* @x.35
  %3719 = load i32, i32* @y.36
  %3720 = sub i32 %3718, 1
  %3721 = mul i32 %3718, %3720
  %3722 = urem i32 %3721, 2
  %3723 = icmp eq i32 %3722, 0
  %3724 = icmp slt i32 %3719, 10
  %3725 = or i1 %3723, %3724
  br i1 %3725, label %originalBBpart21245, label %originalBB1243alteredBB

originalBBpart21245:                              ; preds = %originalBB1243
  br label %5695, !dbg !2277

3726:                                             ; preds = %originalBBpart2279
  call void @llvm.dbg.declare(metadata i64* %44, metadata !2278, metadata !DIExpression()), !dbg !2280
  call void @llvm.dbg.declare(metadata i8* %45, metadata !2281, metadata !DIExpression()), !dbg !2282
  %3727 = load i32, i32* @x.35
  %3728 = load i32, i32* @y.36
  %3729 = sub i32 %3727, 1
  %3730 = mul i32 %3727, %3729
  %3731 = urem i32 %3730, 2
  %3732 = icmp eq i32 %3731, 0
  %3733 = icmp slt i32 %3728, 10
  %3734 = or i1 %3732, %3733
  br i1 %3734, label %originalBB1247, label %originalBB1247alteredBB

originalBB1247:                                   ; preds = %3726, %originalBB1247alteredBB
  %3735 = load i8, i8* %34, align 1, !dbg !2283
  %3736 = trunc i8 %3735 to i1, !dbg !2283
  %3737 = load i32, i32* @x.35
  %3738 = load i32, i32* @y.36
  %3739 = sub i32 %3737, 1
  %3740 = mul i32 %3737, %3739
  %3741 = urem i32 %3740, 2
  %3742 = icmp eq i32 %3741, 0
  %3743 = icmp slt i32 %3738, 10
  %3744 = or i1 %3742, %3743
  br i1 %3744, label %originalBBpart21249, label %originalBB1247alteredBB

originalBBpart21249:                              ; preds = %originalBB1247
  br i1 %3736, label %3745, label %3773, !dbg !2285

3745:                                             ; preds = %originalBBpart21249
  %3746 = load i32, i32* @x.35
  %3747 = load i32, i32* @y.36
  %3748 = sub i32 %3746, 1
  %3749 = mul i32 %3746, %3748
  %3750 = urem i32 %3749, 2
  %3751 = icmp eq i32 %3750, 0
  %3752 = icmp slt i32 %3747, 10
  %3753 = or i1 %3751, %3752
  br i1 %3753, label %originalBB1251, label %originalBB1251alteredBB

originalBB1251:                                   ; preds = %3745, %originalBB1251alteredBB
  store i64 1, i64* %44, align 8, !dbg !2286
  %3754 = call i16** @__ctype_b_loc() #15, !dbg !2288
  %3755 = load i16*, i16** %3754, align 8, !dbg !2288
  %3756 = load i8, i8* %39, align 1, !dbg !2288
  %3757 = zext i8 %3756 to i32, !dbg !2288
  %3758 = sext i32 %3757 to i64, !dbg !2288
  %3759 = getelementptr inbounds i16, i16* %3755, i64 %3758, !dbg !2288
  %3760 = load i16, i16* %3759, align 2, !dbg !2288
  %3761 = zext i16 %3760 to i32, !dbg !2288
  %3762 = and i32 %3761, 16384, !dbg !2288
  %3763 = icmp ne i32 %3762, 0, !dbg !2289
  %3764 = zext i1 %3763 to i8, !dbg !2290
  store i8 %3764, i8* %45, align 1, !dbg !2290
  %3765 = load i32, i32* @x.35
  %3766 = load i32, i32* @y.36
  %3767 = sub i32 %3765, 1
  %3768 = mul i32 %3765, %3767
  %3769 = urem i32 %3768, 2
  %3770 = icmp eq i32 %3769, 0
  %3771 = icmp slt i32 %3766, 10
  %3772 = or i1 %3770, %3771
  br i1 %3772, label %originalBBpart21259, label %originalBB1251alteredBB

originalBBpart21259:                              ; preds = %originalBB1251
  br label %4422, !dbg !2291

3773:                                             ; preds = %originalBBpart21249
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t* %46, metadata !2292, metadata !DIExpression()), !dbg !2309
  %3774 = load i32, i32* @x.35
  %3775 = load i32, i32* @y.36
  %3776 = sub i32 %3774, 1
  %3777 = mul i32 %3774, %3776
  %3778 = urem i32 %3777, 2
  %3779 = icmp eq i32 %3778, 0
  %3780 = icmp slt i32 %3775, 10
  %3781 = or i1 %3779, %3780
  br i1 %3781, label %originalBB1261, label %originalBB1261alteredBB

originalBB1261:                                   ; preds = %3773, %originalBB1261alteredBB
  %3782 = bitcast %struct.__mbstate_t* %46 to i8*, !dbg !2310
  call void @llvm.memset.p0i8.i64(i8* align 4 %3782, i8 0, i64 8, i1 false), !dbg !2310
  store i64 0, i64* %44, align 8, !dbg !2311
  store i8 1, i8* %45, align 1, !dbg !2312
  %3783 = load i64, i64* %22, align 8, !dbg !2313
  %3784 = trunc i64 %3783 to i32
  %3785 = mul i32 %3784, -2
  %3786 = mul i32 %3785, %3785
  %3787 = sub i32 %3786, %3785
  %3788 = srem i32 %3787, 2
  %3789 = icmp ne i32 %3788, 0
  %3790 = load i32, i32* @x.35
  %3791 = load i32, i32* @y.36
  %3792 = sub i32 %3790, 1
  %3793 = mul i32 %3790, %3792
  %3794 = urem i32 %3793, 2
  %3795 = icmp eq i32 %3794, 0
  %3796 = icmp slt i32 %3791, 10
  %3797 = or i1 %3795, %3796
  br i1 %3797, label %originalBBpart21280, label %originalBB1261alteredBB

originalBBpart21280:                              ; preds = %originalBB1261
  br i1 %3789, label %3798, label %3815

3798:                                             ; preds = %originalBBpart21280
  %3799 = load i32, i32* @x.35
  %3800 = load i32, i32* @y.36
  %3801 = sub i32 %3799, 1
  %3802 = mul i32 %3799, %3801
  %3803 = urem i32 %3802, 2
  %3804 = icmp eq i32 %3803, 0
  %3805 = icmp slt i32 %3800, 10
  %3806 = or i1 %3804, %3805
  br i1 %3806, label %originalBB1282, label %originalBB1282alteredBB

originalBB1282:                                   ; preds = %3798, %originalBB1282alteredBB
  %3807 = load i32, i32* @x.35
  %3808 = load i32, i32* @y.36
  %3809 = sub i32 %3807, 1
  %3810 = mul i32 %3807, %3809
  %3811 = urem i32 %3810, 2
  %3812 = icmp eq i32 %3811, 0
  %3813 = icmp slt i32 %3808, 10
  %3814 = or i1 %3812, %3813
  br i1 %3814, label %originalBBpart21284, label %originalBB1282alteredBB

originalBBpart21284:                              ; preds = %originalBB1282
  ret i64 0

3815:                                             ; preds = %originalBBpart21280
  %3816 = load i32, i32* @x.35
  %3817 = load i32, i32* @y.36
  %3818 = sub i32 %3816, 1
  %3819 = mul i32 %3816, %3818
  %3820 = urem i32 %3819, 2
  %3821 = icmp eq i32 %3820, 0
  %3822 = icmp slt i32 %3817, 10
  %3823 = or i1 %3821, %3822
  br i1 %3823, label %originalBB1286, label %originalBB1286alteredBB

originalBB1286:                                   ; preds = %3815, %originalBB1286alteredBB
  %3824 = icmp eq i64 %3783, -1, !dbg !2315
  %3825 = load i32, i32* @x.35
  %3826 = load i32, i32* @y.36
  %3827 = sub i32 %3825, 1
  %3828 = mul i32 %3825, %3827
  %3829 = urem i32 %3828, 2
  %3830 = icmp eq i32 %3829, 0
  %3831 = icmp slt i32 %3826, 10
  %3832 = or i1 %3830, %3831
  br i1 %3832, label %originalBBpart21288, label %originalBB1286alteredBB

originalBBpart21288:                              ; preds = %originalBB1286
  br i1 %3824, label %3833, label %3852, !dbg !2316

3833:                                             ; preds = %originalBBpart21288
  %3834 = load i32, i32* @x.35
  %3835 = load i32, i32* @y.36
  %3836 = sub i32 %3834, 1
  %3837 = mul i32 %3834, %3836
  %3838 = urem i32 %3837, 2
  %3839 = icmp eq i32 %3838, 0
  %3840 = icmp slt i32 %3835, 10
  %3841 = or i1 %3839, %3840
  br i1 %3841, label %originalBB1290, label %originalBB1290alteredBB

originalBB1290:                                   ; preds = %3833, %originalBB1290alteredBB
  %3842 = load i8*, i8** %21, align 8, !dbg !2317
  %3843 = call i64 @strlen(i8* %3842) #13, !dbg !2318
  store i64 %3843, i64* %22, align 8, !dbg !2319
  %3844 = load i32, i32* @x.35
  %3845 = load i32, i32* @y.36
  %3846 = sub i32 %3844, 1
  %3847 = mul i32 %3844, %3846
  %3848 = urem i32 %3847, 2
  %3849 = icmp eq i32 %3848, 0
  %3850 = icmp slt i32 %3845, 10
  %3851 = or i1 %3849, %3850
  br i1 %3851, label %originalBBpart21292, label %originalBB1290alteredBB

originalBBpart21292:                              ; preds = %originalBB1290
  br label %3852, !dbg !2320

3852:                                             ; preds = %originalBBpart21292, %originalBBpart21288
  %3853 = load i32, i32* @x.35
  %3854 = load i32, i32* @y.36
  %3855 = sub i32 %3853, 1
  %3856 = mul i32 %3853, %3855
  %3857 = urem i32 %3856, 2
  %3858 = icmp eq i32 %3857, 0
  %3859 = icmp slt i32 %3854, 10
  %3860 = or i1 %3858, %3859
  br i1 %3860, label %originalBB1294, label %originalBB1294alteredBB

originalBB1294:                                   ; preds = %3852, %originalBB1294alteredBB
  %3861 = load i32, i32* @x.35
  %3862 = load i32, i32* @y.36
  %3863 = sub i32 %3861, 1
  %3864 = mul i32 %3861, %3863
  %3865 = urem i32 %3864, 2
  %3866 = icmp eq i32 %3865, 0
  %3867 = icmp slt i32 %3862, 10
  %3868 = or i1 %3866, %3867
  br i1 %3868, label %originalBBpart21296, label %originalBB1294alteredBB

originalBBpart21296:                              ; preds = %originalBB1294
  br label %3869, !dbg !2321

3869:                                             ; preds = %originalBBpart21478, %originalBBpart21296
  call void @llvm.dbg.declare(metadata i32* %47, metadata !2322, metadata !DIExpression()), !dbg !2325
  call void @llvm.dbg.declare(metadata i64* %48, metadata !2326, metadata !DIExpression()), !dbg !2327
  %3870 = load i32, i32* @x.35
  %3871 = load i32, i32* @y.36
  %3872 = sub i32 %3870, 1
  %3873 = mul i32 %3870, %3872
  %3874 = urem i32 %3873, 2
  %3875 = icmp eq i32 %3874, 0
  %3876 = icmp slt i32 %3871, 10
  %3877 = or i1 %3875, %3876
  br i1 %3877, label %originalBB1298, label %originalBB1298alteredBB

originalBB1298:                                   ; preds = %3869, %originalBB1298alteredBB
  %3878 = load i8*, i8** %21, align 8, !dbg !2328
  %3879 = load i64, i64* %28, align 8, !dbg !2329
  %3880 = load i64, i64* %44, align 8, !dbg !2330
  %3881 = add i64 %3879, %3880, !dbg !2331
  %3882 = getelementptr inbounds i8, i8* %3878, i64 %3881, !dbg !2328
  %3883 = load i64, i64* %22, align 8, !dbg !2332
  %3884 = load i64, i64* %28, align 8, !dbg !2333
  %3885 = load i64, i64* %44, align 8, !dbg !2334
  %3886 = add i64 %3884, %3885, !dbg !2335
  %3887 = sub i64 %3883, %3886, !dbg !2336
  %3888 = call i64 @rpl_mbrtowc(i32* %47, i8* %3882, i64 %3887, %struct.__mbstate_t* %46), !dbg !2337
  store i64 %3888, i64* %48, align 8, !dbg !2327
  %3889 = load i64, i64* %48, align 8, !dbg !2338
  %3890 = icmp eq i64 %3889, 0, !dbg !2340
  %3891 = load i32, i32* @x.35
  %3892 = load i32, i32* @y.36
  %3893 = sub i32 %3891, 1
  %3894 = mul i32 %3891, %3893
  %3895 = urem i32 %3894, 2
  %3896 = icmp eq i32 %3895, 0
  %3897 = icmp slt i32 %3892, 10
  %3898 = or i1 %3896, %3897
  br i1 %3898, label %originalBBpart21317, label %originalBB1298alteredBB

originalBBpart21317:                              ; preds = %originalBB1298
  br i1 %3890, label %3899, label %3916, !dbg !2341

3899:                                             ; preds = %originalBBpart21317
  %3900 = load i32, i32* @x.35
  %3901 = load i32, i32* @y.36
  %3902 = sub i32 %3900, 1
  %3903 = mul i32 %3900, %3902
  %3904 = urem i32 %3903, 2
  %3905 = icmp eq i32 %3904, 0
  %3906 = icmp slt i32 %3901, 10
  %3907 = or i1 %3905, %3906
  br i1 %3907, label %originalBB1319, label %originalBB1319alteredBB

originalBB1319:                                   ; preds = %3899, %originalBB1319alteredBB
  %3908 = load i32, i32* @x.35
  %3909 = load i32, i32* @y.36
  %3910 = sub i32 %3908, 1
  %3911 = mul i32 %3908, %3910
  %3912 = urem i32 %3911, 2
  %3913 = icmp eq i32 %3912, 0
  %3914 = icmp slt i32 %3909, 10
  %3915 = or i1 %3913, %3914
  br i1 %3915, label %originalBBpart21321, label %originalBB1319alteredBB

originalBBpart21321:                              ; preds = %originalBB1319
  br label %4405, !dbg !2342

3916:                                             ; preds = %originalBBpart21317
  %3917 = load i32, i32* @x.35
  %3918 = load i32, i32* @y.36
  %3919 = sub i32 %3917, 1
  %3920 = mul i32 %3917, %3919
  %3921 = urem i32 %3920, 2
  %3922 = icmp eq i32 %3921, 0
  %3923 = icmp slt i32 %3918, 10
  %3924 = or i1 %3922, %3923
  br i1 %3924, label %originalBB1323, label %originalBB1323alteredBB

originalBB1323:                                   ; preds = %3916, %originalBB1323alteredBB
  %3925 = load i64, i64* %48, align 8, !dbg !2343
  %3926 = icmp eq i64 %3925, -1, !dbg !2345
  %3927 = load i32, i32* @x.35
  %3928 = load i32, i32* @y.36
  %3929 = sub i32 %3927, 1
  %3930 = mul i32 %3927, %3929
  %3931 = urem i32 %3930, 2
  %3932 = icmp eq i32 %3931, 0
  %3933 = icmp slt i32 %3928, 10
  %3934 = or i1 %3932, %3933
  br i1 %3934, label %originalBBpart21325, label %originalBB1323alteredBB

originalBBpart21325:                              ; preds = %originalBB1323
  br i1 %3926, label %3935, label %3952, !dbg !2346

3935:                                             ; preds = %originalBBpart21325
  %3936 = load i32, i32* @x.35
  %3937 = load i32, i32* @y.36
  %3938 = sub i32 %3936, 1
  %3939 = mul i32 %3936, %3938
  %3940 = urem i32 %3939, 2
  %3941 = icmp eq i32 %3940, 0
  %3942 = icmp slt i32 %3937, 10
  %3943 = or i1 %3941, %3942
  br i1 %3943, label %originalBB1327, label %originalBB1327alteredBB

originalBB1327:                                   ; preds = %3935, %originalBB1327alteredBB
  store i8 0, i8* %45, align 1, !dbg !2347
  %3944 = load i32, i32* @x.35
  %3945 = load i32, i32* @y.36
  %3946 = sub i32 %3944, 1
  %3947 = mul i32 %3944, %3946
  %3948 = urem i32 %3947, 2
  %3949 = icmp eq i32 %3948, 0
  %3950 = icmp slt i32 %3945, 10
  %3951 = or i1 %3949, %3950
  br i1 %3951, label %originalBBpart21329, label %originalBB1327alteredBB

originalBBpart21329:                              ; preds = %originalBB1327
  br label %4405, !dbg !2349

3952:                                             ; preds = %originalBBpart21325
  %3953 = load i32, i32* @x.35
  %3954 = load i32, i32* @y.36
  %3955 = sub i32 %3953, 1
  %3956 = mul i32 %3953, %3955
  %3957 = urem i32 %3956, 2
  %3958 = icmp eq i32 %3957, 0
  %3959 = icmp slt i32 %3954, 10
  %3960 = or i1 %3958, %3959
  br i1 %3960, label %originalBB1331, label %originalBB1331alteredBB

originalBB1331:                                   ; preds = %3952, %originalBB1331alteredBB
  %3961 = load i64, i64* %48, align 8, !dbg !2350
  %3962 = icmp eq i64 %3961, -2, !dbg !2352
  %3963 = load i32, i32* @x.35
  %3964 = load i32, i32* @y.36
  %3965 = sub i32 %3963, 1
  %3966 = mul i32 %3963, %3965
  %3967 = urem i32 %3966, 2
  %3968 = icmp eq i32 %3967, 0
  %3969 = icmp slt i32 %3964, 10
  %3970 = or i1 %3968, %3969
  br i1 %3970, label %originalBBpart21333, label %originalBB1331alteredBB

originalBBpart21333:                              ; preds = %originalBB1331
  br i1 %3962, label %3971, label %4089, !dbg !2353

3971:                                             ; preds = %originalBBpart21333
  %3972 = load i32, i32* @x.35
  %3973 = load i32, i32* @y.36
  %3974 = sub i32 %3972, 1
  %3975 = mul i32 %3972, %3974
  %3976 = urem i32 %3975, 2
  %3977 = icmp eq i32 %3976, 0
  %3978 = icmp slt i32 %3973, 10
  %3979 = or i1 %3977, %3978
  br i1 %3979, label %originalBB1335, label %originalBB1335alteredBB

originalBB1335:                                   ; preds = %3971, %originalBB1335alteredBB
  store i8 0, i8* %45, align 1, !dbg !2354
  %3980 = load i32, i32* @x.35
  %3981 = load i32, i32* @y.36
  %3982 = sub i32 %3980, 1
  %3983 = mul i32 %3980, %3982
  %3984 = urem i32 %3983, 2
  %3985 = icmp eq i32 %3984, 0
  %3986 = icmp slt i32 %3981, 10
  %3987 = or i1 %3985, %3986
  br i1 %3987, label %originalBBpart21337, label %originalBB1335alteredBB

originalBBpart21337:                              ; preds = %originalBB1335
  br label %3988, !dbg !2356

3988:                                             ; preds = %originalBBpart21370, %originalBBpart21337
  %3989 = load i32, i32* @x.35
  %3990 = load i32, i32* @y.36
  %3991 = sub i32 %3989, 1
  %3992 = mul i32 %3989, %3991
  %3993 = urem i32 %3992, 2
  %3994 = icmp eq i32 %3993, 0
  %3995 = icmp slt i32 %3990, 10
  %3996 = or i1 %3994, %3995
  br i1 %3996, label %originalBB1339, label %originalBB1339alteredBB

originalBB1339:                                   ; preds = %3988, %originalBB1339alteredBB
  %3997 = load i64, i64* %28, align 8, !dbg !2357
  %3998 = load i64, i64* %44, align 8, !dbg !2358
  %3999 = add i64 %3997, %3998, !dbg !2359
  %4000 = load i64, i64* %22, align 8, !dbg !2360
  %4001 = icmp ult i64 %3999, %4000, !dbg !2361
  %4002 = load i32, i32* @x.35
  %4003 = load i32, i32* @y.36
  %4004 = sub i32 %4002, 1
  %4005 = mul i32 %4002, %4004
  %4006 = urem i32 %4005, 2
  %4007 = icmp eq i32 %4006, 0
  %4008 = icmp slt i32 %4003, 10
  %4009 = or i1 %4007, %4008
  br i1 %4009, label %originalBBpart21347, label %originalBB1339alteredBB

originalBBpart21347:                              ; preds = %originalBB1339
  br i1 %4001, label %4010, label %4035, !dbg !2362

4010:                                             ; preds = %originalBBpart21347
  %4011 = load i32, i32* @x.35
  %4012 = load i32, i32* @y.36
  %4013 = sub i32 %4011, 1
  %4014 = mul i32 %4011, %4013
  %4015 = urem i32 %4014, 2
  %4016 = icmp eq i32 %4015, 0
  %4017 = icmp slt i32 %4012, 10
  %4018 = or i1 %4016, %4017
  br i1 %4018, label %originalBB1349, label %originalBB1349alteredBB

originalBB1349:                                   ; preds = %4010, %originalBB1349alteredBB
  %4019 = load i8*, i8** %21, align 8, !dbg !2363
  %4020 = load i64, i64* %28, align 8, !dbg !2364
  %4021 = load i64, i64* %44, align 8, !dbg !2365
  %4022 = add i64 %4020, %4021, !dbg !2366
  %4023 = getelementptr inbounds i8, i8* %4019, i64 %4022, !dbg !2363
  %4024 = load i8, i8* %4023, align 1, !dbg !2363
  %4025 = sext i8 %4024 to i32, !dbg !2363
  %4026 = icmp ne i32 %4025, 0, !dbg !2362
  %4027 = load i32, i32* @x.35
  %4028 = load i32, i32* @y.36
  %4029 = sub i32 %4027, 1
  %4030 = mul i32 %4027, %4029
  %4031 = urem i32 %4030, 2
  %4032 = icmp eq i32 %4031, 0
  %4033 = icmp slt i32 %4028, 10
  %4034 = or i1 %4032, %4033
  br i1 %4034, label %originalBBpart21357, label %originalBB1349alteredBB

originalBBpart21357:                              ; preds = %originalBB1349
  br label %4035

4035:                                             ; preds = %originalBBpart21357, %originalBBpart21347
  %4036 = phi i1 [ false, %originalBBpart21347 ], [ %4026, %originalBBpart21357 ], !dbg !2367
  %4037 = load i32, i32* @x.35
  %4038 = load i32, i32* @y.36
  %4039 = sub i32 %4037, 1
  %4040 = mul i32 %4037, %4039
  %4041 = urem i32 %4040, 2
  %4042 = icmp eq i32 %4041, 0
  %4043 = icmp slt i32 %4038, 10
  %4044 = or i1 %4042, %4043
  br i1 %4044, label %originalBB1359, label %originalBB1359alteredBB

originalBB1359:                                   ; preds = %4035, %originalBB1359alteredBB
  %4045 = load i32, i32* @x.35
  %4046 = load i32, i32* @y.36
  %4047 = sub i32 %4045, 1
  %4048 = mul i32 %4045, %4047
  %4049 = urem i32 %4048, 2
  %4050 = icmp eq i32 %4049, 0
  %4051 = icmp slt i32 %4046, 10
  %4052 = or i1 %4050, %4051
  br i1 %4052, label %originalBBpart21361, label %originalBB1359alteredBB

originalBBpart21361:                              ; preds = %originalBB1359
  br i1 %4036, label %4053, label %4072, !dbg !2356

4053:                                             ; preds = %originalBBpart21361
  %4054 = load i32, i32* @x.35
  %4055 = load i32, i32* @y.36
  %4056 = sub i32 %4054, 1
  %4057 = mul i32 %4054, %4056
  %4058 = urem i32 %4057, 2
  %4059 = icmp eq i32 %4058, 0
  %4060 = icmp slt i32 %4055, 10
  %4061 = or i1 %4059, %4060
  br i1 %4061, label %originalBB1363, label %originalBB1363alteredBB

originalBB1363:                                   ; preds = %4053, %originalBB1363alteredBB
  %4062 = load i64, i64* %44, align 8, !dbg !2368
  %4063 = add i64 %4062, 1, !dbg !2368
  store i64 %4063, i64* %44, align 8, !dbg !2368
  %4064 = load i32, i32* @x.35
  %4065 = load i32, i32* @y.36
  %4066 = sub i32 %4064, 1
  %4067 = mul i32 %4064, %4066
  %4068 = urem i32 %4067, 2
  %4069 = icmp eq i32 %4068, 0
  %4070 = icmp slt i32 %4065, 10
  %4071 = or i1 %4069, %4070
  br i1 %4071, label %originalBBpart21370, label %originalBB1363alteredBB

originalBBpart21370:                              ; preds = %originalBB1363
  br label %3988, !dbg !2356, !llvm.loop !2369

4072:                                             ; preds = %originalBBpart21361
  %4073 = load i32, i32* @x.35
  %4074 = load i32, i32* @y.36
  %4075 = sub i32 %4073, 1
  %4076 = mul i32 %4073, %4075
  %4077 = urem i32 %4076, 2
  %4078 = icmp eq i32 %4077, 0
  %4079 = icmp slt i32 %4074, 10
  %4080 = or i1 %4078, %4079
  br i1 %4080, label %originalBB1372, label %originalBB1372alteredBB

originalBB1372:                                   ; preds = %4072, %originalBB1372alteredBB
  %4081 = load i32, i32* @x.35
  %4082 = load i32, i32* @y.36
  %4083 = sub i32 %4081, 1
  %4084 = mul i32 %4081, %4083
  %4085 = urem i32 %4084, 2
  %4086 = icmp eq i32 %4085, 0
  %4087 = icmp slt i32 %4082, 10
  %4088 = or i1 %4086, %4087
  br i1 %4088, label %originalBBpart21374, label %originalBB1372alteredBB

originalBBpart21374:                              ; preds = %originalBB1372
  br label %4405, !dbg !2370

4089:                                             ; preds = %originalBBpart21333
  %4090 = load i32, i32* @x.35
  %4091 = load i32, i32* @y.36
  %4092 = sub i32 %4090, 1
  %4093 = mul i32 %4090, %4092
  %4094 = urem i32 %4093, 2
  %4095 = icmp eq i32 %4094, 0
  %4096 = icmp slt i32 %4091, 10
  %4097 = or i1 %4095, %4096
  br i1 %4097, label %originalBB1376, label %originalBB1376alteredBB

originalBB1376:                                   ; preds = %4089, %originalBB1376alteredBB
  %4098 = load i8, i8* %35, align 1, !dbg !2371
  %4099 = trunc i8 %4098 to i1, !dbg !2371
  %4100 = load i32, i32* @x.35
  %4101 = load i32, i32* @y.36
  %4102 = sub i32 %4100, 1
  %4103 = mul i32 %4100, %4102
  %4104 = urem i32 %4103, 2
  %4105 = icmp eq i32 %4104, 0
  %4106 = icmp slt i32 %4101, 10
  %4107 = or i1 %4105, %4106
  br i1 %4107, label %originalBBpart21378, label %originalBB1376alteredBB

originalBBpart21378:                              ; preds = %originalBB1376
  br i1 %4099, label %4108, label %4277, !dbg !2374

4108:                                             ; preds = %originalBBpart21378
  %4109 = load i32, i32* @x.35
  %4110 = load i32, i32* @y.36
  %4111 = sub i32 %4109, 1
  %4112 = mul i32 %4109, %4111
  %4113 = urem i32 %4112, 2
  %4114 = icmp eq i32 %4113, 0
  %4115 = icmp slt i32 %4110, 10
  %4116 = or i1 %4114, %4115
  br i1 %4116, label %originalBB1380, label %originalBB1380alteredBB

originalBB1380:                                   ; preds = %4108, %originalBB1380alteredBB
  %4117 = load i32, i32* %23, align 4, !dbg !2375
  %4118 = icmp eq i32 %4117, 2, !dbg !2376
  %4119 = load i32, i32* @x.35
  %4120 = load i32, i32* @y.36
  %4121 = sub i32 %4119, 1
  %4122 = mul i32 %4119, %4121
  %4123 = urem i32 %4122, 2
  %4124 = icmp eq i32 %4123, 0
  %4125 = icmp slt i32 %4120, 10
  %4126 = or i1 %4124, %4125
  br i1 %4126, label %originalBBpart21382, label %originalBB1380alteredBB

originalBBpart21382:                              ; preds = %originalBB1380
  br i1 %4118, label %4127, label %4277, !dbg !2377

4127:                                             ; preds = %originalBBpart21382
  call void @llvm.dbg.declare(metadata i64* %49, metadata !2378, metadata !DIExpression()), !dbg !2380
  %4128 = load i32, i32* @x.35
  %4129 = load i32, i32* @y.36
  %4130 = sub i32 %4128, 1
  %4131 = mul i32 %4128, %4130
  %4132 = urem i32 %4131, 2
  %4133 = icmp eq i32 %4132, 0
  %4134 = icmp slt i32 %4129, 10
  %4135 = or i1 %4133, %4134
  br i1 %4135, label %originalBB1384, label %originalBB1384alteredBB

originalBB1384:                                   ; preds = %4127, %originalBB1384alteredBB
  store i64 1, i64* %49, align 8, !dbg !2381
  %4136 = load i32, i32* @x.35
  %4137 = load i32, i32* @y.36
  %4138 = sub i32 %4136, 1
  %4139 = mul i32 %4136, %4138
  %4140 = urem i32 %4139, 2
  %4141 = icmp eq i32 %4140, 0
  %4142 = icmp slt i32 %4137, 10
  %4143 = or i1 %4141, %4142
  br i1 %4143, label %originalBBpart21386, label %originalBB1384alteredBB

originalBBpart21386:                              ; preds = %originalBB1384
  br label %4144, !dbg !2383

4144:                                             ; preds = %originalBBpart21424, %originalBBpart21386
  %4145 = load i32, i32* @x.35
  %4146 = load i32, i32* @y.36
  %4147 = sub i32 %4145, 1
  %4148 = mul i32 %4145, %4147
  %4149 = urem i32 %4148, 2
  %4150 = icmp eq i32 %4149, 0
  %4151 = icmp slt i32 %4146, 10
  %4152 = or i1 %4150, %4151
  br i1 %4152, label %originalBB1388, label %originalBB1388alteredBB

originalBB1388:                                   ; preds = %4144, %originalBB1388alteredBB
  %4153 = load i64, i64* %49, align 8, !dbg !2384
  %4154 = load i64, i64* %48, align 8, !dbg !2386
  %4155 = icmp ult i64 %4153, %4154, !dbg !2387
  %4156 = load i32, i32* @x.35
  %4157 = load i32, i32* @y.36
  %4158 = sub i32 %4156, 1
  %4159 = mul i32 %4156, %4158
  %4160 = urem i32 %4159, 2
  %4161 = icmp eq i32 %4160, 0
  %4162 = icmp slt i32 %4157, 10
  %4163 = or i1 %4161, %4162
  br i1 %4163, label %originalBBpart21390, label %originalBB1388alteredBB

originalBBpart21390:                              ; preds = %originalBB1388
  br i1 %4155, label %4164, label %4260, !dbg !2388

4164:                                             ; preds = %originalBBpart21390
  %4165 = load i32, i32* @x.35
  %4166 = load i32, i32* @y.36
  %4167 = sub i32 %4165, 1
  %4168 = mul i32 %4165, %4167
  %4169 = urem i32 %4168, 2
  %4170 = icmp eq i32 %4169, 0
  %4171 = icmp slt i32 %4166, 10
  %4172 = or i1 %4170, %4171
  br i1 %4172, label %originalBB1392, label %originalBB1392alteredBB

originalBB1392:                                   ; preds = %4164, %originalBB1392alteredBB
  %4173 = load i8*, i8** %21, align 8, !dbg !2389
  %4174 = load i64, i64* %28, align 8, !dbg !2390
  %4175 = load i64, i64* %44, align 8, !dbg !2391
  %4176 = add i64 %4174, %4175, !dbg !2392
  %4177 = load i64, i64* %49, align 8, !dbg !2393
  %4178 = add i64 %4176, %4177, !dbg !2394
  %4179 = getelementptr inbounds i8, i8* %4173, i64 %4178, !dbg !2389
  %4180 = load i8, i8* %4179, align 1, !dbg !2389
  %4181 = sext i8 %4180 to i32, !dbg !2389
  %4182 = load i32, i32* @x.35
  %4183 = load i32, i32* @y.36
  %4184 = sub i32 %4182, 1
  %4185 = mul i32 %4182, %4184
  %4186 = urem i32 %4185, 2
  %4187 = icmp eq i32 %4186, 0
  %4188 = icmp slt i32 %4183, 10
  %4189 = or i1 %4187, %4188
  br i1 %4189, label %originalBBpart21405, label %originalBB1392alteredBB

originalBBpart21405:                              ; preds = %originalBB1392
  switch i32 %4181, label %4207 [
    i32 91, label %4190
    i32 92, label %4190
    i32 94, label %4190
    i32 96, label %4190
    i32 124, label %4190
  ], !dbg !2395

4190:                                             ; preds = %originalBBpart21405, %originalBBpart21405, %originalBBpart21405, %originalBBpart21405, %originalBBpart21405
  %4191 = load i32, i32* @x.35
  %4192 = load i32, i32* @y.36
  %4193 = sub i32 %4191, 1
  %4194 = mul i32 %4191, %4193
  %4195 = urem i32 %4194, 2
  %4196 = icmp eq i32 %4195, 0
  %4197 = icmp slt i32 %4192, 10
  %4198 = or i1 %4196, %4197
  br i1 %4198, label %originalBB1407, label %originalBB1407alteredBB

originalBB1407:                                   ; preds = %4190, %originalBB1407alteredBB
  %4199 = load i32, i32* @x.35
  %4200 = load i32, i32* @y.36
  %4201 = sub i32 %4199, 1
  %4202 = mul i32 %4199, %4201
  %4203 = urem i32 %4202, 2
  %4204 = icmp eq i32 %4203, 0
  %4205 = icmp slt i32 %4200, 10
  %4206 = or i1 %4204, %4205
  br i1 %4206, label %originalBBpart21409, label %originalBB1407alteredBB

originalBBpart21409:                              ; preds = %originalBB1407
  br label %7269, !dbg !2396

4207:                                             ; preds = %originalBBpart21405
  %4208 = load i32, i32* @x.35
  %4209 = load i32, i32* @y.36
  %4210 = sub i32 %4208, 1
  %4211 = mul i32 %4208, %4210
  %4212 = urem i32 %4211, 2
  %4213 = icmp eq i32 %4212, 0
  %4214 = icmp slt i32 %4209, 10
  %4215 = or i1 %4213, %4214
  br i1 %4215, label %originalBB1411, label %originalBB1411alteredBB

originalBB1411:                                   ; preds = %4207, %originalBB1411alteredBB
  %4216 = load i32, i32* @x.35
  %4217 = load i32, i32* @y.36
  %4218 = sub i32 %4216, 1
  %4219 = mul i32 %4216, %4218
  %4220 = urem i32 %4219, 2
  %4221 = icmp eq i32 %4220, 0
  %4222 = icmp slt i32 %4217, 10
  %4223 = or i1 %4221, %4222
  br i1 %4223, label %originalBBpart21413, label %originalBB1411alteredBB

originalBBpart21413:                              ; preds = %originalBB1411
  br label %4224, !dbg !2398

4224:                                             ; preds = %originalBBpart21413
  %4225 = load i32, i32* @x.35
  %4226 = load i32, i32* @y.36
  %4227 = sub i32 %4225, 1
  %4228 = mul i32 %4225, %4227
  %4229 = urem i32 %4228, 2
  %4230 = icmp eq i32 %4229, 0
  %4231 = icmp slt i32 %4226, 10
  %4232 = or i1 %4230, %4231
  br i1 %4232, label %originalBB1415, label %originalBB1415alteredBB

originalBB1415:                                   ; preds = %4224, %originalBB1415alteredBB
  %4233 = load i32, i32* @x.35
  %4234 = load i32, i32* @y.36
  %4235 = sub i32 %4233, 1
  %4236 = mul i32 %4233, %4235
  %4237 = urem i32 %4236, 2
  %4238 = icmp eq i32 %4237, 0
  %4239 = icmp slt i32 %4234, 10
  %4240 = or i1 %4238, %4239
  br i1 %4240, label %originalBBpart21417, label %originalBB1415alteredBB

originalBBpart21417:                              ; preds = %originalBB1415
  br label %4241, !dbg !2399

4241:                                             ; preds = %originalBBpart21417
  %4242 = load i32, i32* @x.35
  %4243 = load i32, i32* @y.36
  %4244 = sub i32 %4242, 1
  %4245 = mul i32 %4242, %4244
  %4246 = urem i32 %4245, 2
  %4247 = icmp eq i32 %4246, 0
  %4248 = icmp slt i32 %4243, 10
  %4249 = or i1 %4247, %4248
  br i1 %4249, label %originalBB1419, label %originalBB1419alteredBB

originalBB1419:                                   ; preds = %4241, %originalBB1419alteredBB
  %4250 = load i64, i64* %49, align 8, !dbg !2400
  %4251 = add i64 %4250, 1, !dbg !2400
  store i64 %4251, i64* %49, align 8, !dbg !2400
  %4252 = load i32, i32* @x.35
  %4253 = load i32, i32* @y.36
  %4254 = sub i32 %4252, 1
  %4255 = mul i32 %4252, %4254
  %4256 = urem i32 %4255, 2
  %4257 = icmp eq i32 %4256, 0
  %4258 = icmp slt i32 %4253, 10
  %4259 = or i1 %4257, %4258
  br i1 %4259, label %originalBBpart21424, label %originalBB1419alteredBB

originalBBpart21424:                              ; preds = %originalBB1419
  br label %4144, !dbg !2401, !llvm.loop !2402

4260:                                             ; preds = %originalBBpart21390
  %4261 = load i32, i32* @x.35
  %4262 = load i32, i32* @y.36
  %4263 = sub i32 %4261, 1
  %4264 = mul i32 %4261, %4263
  %4265 = urem i32 %4264, 2
  %4266 = icmp eq i32 %4265, 0
  %4267 = icmp slt i32 %4262, 10
  %4268 = or i1 %4266, %4267
  br i1 %4268, label %originalBB1426, label %originalBB1426alteredBB

originalBB1426:                                   ; preds = %4260, %originalBB1426alteredBB
  %4269 = load i32, i32* @x.35
  %4270 = load i32, i32* @y.36
  %4271 = sub i32 %4269, 1
  %4272 = mul i32 %4269, %4271
  %4273 = urem i32 %4272, 2
  %4274 = icmp eq i32 %4273, 0
  %4275 = icmp slt i32 %4270, 10
  %4276 = or i1 %4274, %4275
  br i1 %4276, label %originalBBpart21428, label %originalBB1426alteredBB

originalBBpart21428:                              ; preds = %originalBB1426
  br label %4277, !dbg !2404

4277:                                             ; preds = %originalBBpart21428, %originalBBpart21382, %originalBBpart21378
  %4278 = load i32, i32* @x.35
  %4279 = load i32, i32* @y.36
  %4280 = sub i32 %4278, 1
  %4281 = mul i32 %4278, %4280
  %4282 = urem i32 %4281, 2
  %4283 = icmp eq i32 %4282, 0
  %4284 = icmp slt i32 %4279, 10
  %4285 = or i1 %4283, %4284
  br i1 %4285, label %originalBB1430, label %originalBB1430alteredBB

originalBB1430:                                   ; preds = %4277, %originalBB1430alteredBB
  %4286 = load i32, i32* %47, align 4, !dbg !2405
  %4287 = call i32 @iswprint(i32 %4286) #10, !dbg !2407
  %4288 = icmp ne i32 %4287, 0, !dbg !2407
  %4289 = load i32, i32* @x.35
  %4290 = load i32, i32* @y.36
  %4291 = sub i32 %4289, 1
  %4292 = mul i32 %4289, %4291
  %4293 = urem i32 %4292, 2
  %4294 = icmp eq i32 %4293, 0
  %4295 = icmp slt i32 %4290, 10
  %4296 = or i1 %4294, %4295
  br i1 %4296, label %originalBBpart21432, label %originalBB1430alteredBB

originalBBpart21432:                              ; preds = %originalBB1430
  br i1 %4288, label %4314, label %4297, !dbg !2408

4297:                                             ; preds = %originalBBpart21432
  %4298 = load i32, i32* @x.35
  %4299 = load i32, i32* @y.36
  %4300 = sub i32 %4298, 1
  %4301 = mul i32 %4298, %4300
  %4302 = urem i32 %4301, 2
  %4303 = icmp eq i32 %4302, 0
  %4304 = icmp slt i32 %4299, 10
  %4305 = or i1 %4303, %4304
  br i1 %4305, label %originalBB1434, label %originalBB1434alteredBB

originalBB1434:                                   ; preds = %4297, %originalBB1434alteredBB
  store i8 0, i8* %45, align 1, !dbg !2409
  %4306 = load i32, i32* @x.35
  %4307 = load i32, i32* @y.36
  %4308 = sub i32 %4306, 1
  %4309 = mul i32 %4306, %4308
  %4310 = urem i32 %4309, 2
  %4311 = icmp eq i32 %4310, 0
  %4312 = icmp slt i32 %4307, 10
  %4313 = or i1 %4311, %4312
  br i1 %4313, label %originalBBpart21436, label %originalBB1434alteredBB

originalBBpart21436:                              ; preds = %originalBB1434
  br label %4314, !dbg !2410

4314:                                             ; preds = %originalBBpart21436, %originalBBpart21432
  %4315 = load i32, i32* @x.35
  %4316 = load i32, i32* @y.36
  %4317 = sub i32 %4315, 1
  %4318 = mul i32 %4315, %4317
  %4319 = urem i32 %4318, 2
  %4320 = icmp eq i32 %4319, 0
  %4321 = icmp slt i32 %4316, 10
  %4322 = or i1 %4320, %4321
  br i1 %4322, label %originalBB1438, label %originalBB1438alteredBB

originalBB1438:                                   ; preds = %4314, %originalBB1438alteredBB
  %4323 = load i64, i64* %48, align 8, !dbg !2411
  %4324 = load i64, i64* %44, align 8, !dbg !2412
  %4325 = add i64 %4324, %4323, !dbg !2412
  store i64 %4325, i64* %44, align 8, !dbg !2412
  %4326 = load i32, i32* @x.35
  %4327 = load i32, i32* @y.36
  %4328 = sub i32 %4326, 1
  %4329 = mul i32 %4326, %4328
  %4330 = urem i32 %4329, 2
  %4331 = icmp eq i32 %4330, 0
  %4332 = icmp slt i32 %4327, 10
  %4333 = or i1 %4331, %4332
  br i1 %4333, label %originalBBpart21452, label %originalBB1438alteredBB

originalBBpart21452:                              ; preds = %originalBB1438
  br label %4334

4334:                                             ; preds = %originalBBpart21452
  %4335 = load i32, i32* @x.35
  %4336 = load i32, i32* @y.36
  %4337 = sub i32 %4335, 1
  %4338 = mul i32 %4335, %4337
  %4339 = urem i32 %4338, 2
  %4340 = icmp eq i32 %4339, 0
  %4341 = icmp slt i32 %4336, 10
  %4342 = or i1 %4340, %4341
  br i1 %4342, label %originalBB1454, label %originalBB1454alteredBB

originalBB1454:                                   ; preds = %4334, %originalBB1454alteredBB
  %4343 = load i32, i32* @x.35
  %4344 = load i32, i32* @y.36
  %4345 = sub i32 %4343, 1
  %4346 = mul i32 %4343, %4345
  %4347 = urem i32 %4346, 2
  %4348 = icmp eq i32 %4347, 0
  %4349 = icmp slt i32 %4344, 10
  %4350 = or i1 %4348, %4349
  br i1 %4350, label %originalBBpart21456, label %originalBB1454alteredBB

originalBBpart21456:                              ; preds = %originalBB1454
  br label %4351

4351:                                             ; preds = %originalBBpart21456
  %4352 = load i32, i32* @x.35
  %4353 = load i32, i32* @y.36
  %4354 = sub i32 %4352, 1
  %4355 = mul i32 %4352, %4354
  %4356 = urem i32 %4355, 2
  %4357 = icmp eq i32 %4356, 0
  %4358 = icmp slt i32 %4353, 10
  %4359 = or i1 %4357, %4358
  br i1 %4359, label %originalBB1458, label %originalBB1458alteredBB

originalBB1458:                                   ; preds = %4351, %originalBB1458alteredBB
  %4360 = load i32, i32* @x.35
  %4361 = load i32, i32* @y.36
  %4362 = sub i32 %4360, 1
  %4363 = mul i32 %4360, %4362
  %4364 = urem i32 %4363, 2
  %4365 = icmp eq i32 %4364, 0
  %4366 = icmp slt i32 %4361, 10
  %4367 = or i1 %4365, %4366
  br i1 %4367, label %originalBBpart21460, label %originalBB1458alteredBB

originalBBpart21460:                              ; preds = %originalBB1458
  br label %4368

4368:                                             ; preds = %originalBBpart21460
  %4369 = load i32, i32* @x.35
  %4370 = load i32, i32* @y.36
  %4371 = sub i32 %4369, 1
  %4372 = mul i32 %4369, %4371
  %4373 = urem i32 %4372, 2
  %4374 = icmp eq i32 %4373, 0
  %4375 = icmp slt i32 %4370, 10
  %4376 = or i1 %4374, %4375
  br i1 %4376, label %originalBB1462, label %originalBB1462alteredBB

originalBB1462:                                   ; preds = %4368, %originalBB1462alteredBB
  %4377 = load i32, i32* @x.35
  %4378 = load i32, i32* @y.36
  %4379 = sub i32 %4377, 1
  %4380 = mul i32 %4377, %4379
  %4381 = urem i32 %4380, 2
  %4382 = icmp eq i32 %4381, 0
  %4383 = icmp slt i32 %4378, 10
  %4384 = or i1 %4382, %4383
  br i1 %4384, label %originalBBpart21464, label %originalBB1462alteredBB

originalBBpart21464:                              ; preds = %originalBB1462
  br label %4385, !dbg !2413

4385:                                             ; preds = %originalBBpart21464
  %4386 = load i32, i32* @x.35
  %4387 = load i32, i32* @y.36
  %4388 = sub i32 %4386, 1
  %4389 = mul i32 %4386, %4388
  %4390 = urem i32 %4389, 2
  %4391 = icmp eq i32 %4390, 0
  %4392 = icmp slt i32 %4387, 10
  %4393 = or i1 %4391, %4392
  br i1 %4393, label %originalBB1466, label %originalBB1466alteredBB

originalBB1466:                                   ; preds = %4385, %originalBB1466alteredBB
  %4394 = call i32 @mbsinit(%struct.__mbstate_t* %46) #13, !dbg !2414
  %4395 = icmp ne i32 %4394, 0, !dbg !2415
  %4396 = xor i1 %4395, true, !dbg !2415
  %4397 = load i32, i32* @x.35
  %4398 = load i32, i32* @y.36
  %4399 = sub i32 %4397, 1
  %4400 = mul i32 %4397, %4399
  %4401 = urem i32 %4400, 2
  %4402 = icmp eq i32 %4401, 0
  %4403 = icmp slt i32 %4398, 10
  %4404 = or i1 %4402, %4403
  br i1 %4404, label %originalBBpart21478, label %originalBB1466alteredBB

originalBBpart21478:                              ; preds = %originalBB1466
  br i1 %4396, label %3869, label %4405, !dbg !2413, !llvm.loop !2416

4405:                                             ; preds = %originalBBpart21478, %originalBBpart21374, %originalBBpart21329, %originalBBpart21321
  %4406 = load i32, i32* @x.35
  %4407 = load i32, i32* @y.36
  %4408 = sub i32 %4406, 1
  %4409 = mul i32 %4406, %4408
  %4410 = urem i32 %4409, 2
  %4411 = icmp eq i32 %4410, 0
  %4412 = icmp slt i32 %4407, 10
  %4413 = or i1 %4411, %4412
  br i1 %4413, label %originalBB1480, label %originalBB1480alteredBB

originalBB1480:                                   ; preds = %4405, %originalBB1480alteredBB
  %4414 = load i32, i32* @x.35
  %4415 = load i32, i32* @y.36
  %4416 = sub i32 %4414, 1
  %4417 = mul i32 %4414, %4416
  %4418 = urem i32 %4417, 2
  %4419 = icmp eq i32 %4418, 0
  %4420 = icmp slt i32 %4415, 10
  %4421 = or i1 %4419, %4420
  br i1 %4421, label %originalBBpart21482, label %originalBB1480alteredBB

originalBBpart21482:                              ; preds = %originalBB1480
  br label %4422

4422:                                             ; preds = %originalBBpart21482, %originalBBpart21259
  %4423 = load i32, i32* @x.35
  %4424 = load i32, i32* @y.36
  %4425 = sub i32 %4423, 1
  %4426 = mul i32 %4423, %4425
  %4427 = urem i32 %4426, 2
  %4428 = icmp eq i32 %4427, 0
  %4429 = icmp slt i32 %4424, 10
  %4430 = or i1 %4428, %4429
  br i1 %4430, label %originalBB1484, label %originalBB1484alteredBB

originalBB1484:                                   ; preds = %4422, %originalBB1484alteredBB
  %4431 = load i8, i8* %45, align 1, !dbg !2418
  %4432 = trunc i8 %4431 to i1, !dbg !2418
  %4433 = zext i1 %4432 to i8, !dbg !2419
  store i8 %4433, i8* %43, align 1, !dbg !2419
  %4434 = load i64, i64* %44, align 8, !dbg !2420
  %4435 = icmp ult i64 1, %4434, !dbg !2422
  %4436 = load i32, i32* @x.35
  %4437 = load i32, i32* @y.36
  %4438 = sub i32 %4436, 1
  %4439 = mul i32 %4436, %4438
  %4440 = urem i32 %4439, 2
  %4441 = icmp eq i32 %4440, 0
  %4442 = icmp slt i32 %4437, 10
  %4443 = or i1 %4441, %4442
  br i1 %4443, label %originalBBpart21486, label %originalBB1484alteredBB

originalBBpart21486:                              ; preds = %originalBB1484
  br i1 %4435, label %4482, label %4444, !dbg !2423

4444:                                             ; preds = %originalBBpart21486
  %4445 = load i32, i32* @x.35
  %4446 = load i32, i32* @y.36
  %4447 = sub i32 %4445, 1
  %4448 = mul i32 %4445, %4447
  %4449 = urem i32 %4448, 2
  %4450 = icmp eq i32 %4449, 0
  %4451 = icmp slt i32 %4446, 10
  %4452 = or i1 %4450, %4451
  br i1 %4452, label %originalBB1488, label %originalBB1488alteredBB

originalBB1488:                                   ; preds = %4444, %originalBB1488alteredBB
  %4453 = load i8, i8* %33, align 1, !dbg !2424
  %4454 = trunc i8 %4453 to i1, !dbg !2424
  %4455 = load i32, i32* @x.35
  %4456 = load i32, i32* @y.36
  %4457 = sub i32 %4455, 1
  %4458 = mul i32 %4455, %4457
  %4459 = urem i32 %4458, 2
  %4460 = icmp eq i32 %4459, 0
  %4461 = icmp slt i32 %4456, 10
  %4462 = or i1 %4460, %4461
  br i1 %4462, label %originalBBpart21490, label %originalBB1488alteredBB

originalBBpart21490:                              ; preds = %originalBB1488
  br i1 %4454, label %4463, label %5678, !dbg !2425

4463:                                             ; preds = %originalBBpart21490
  %4464 = load i32, i32* @x.35
  %4465 = load i32, i32* @y.36
  %4466 = sub i32 %4464, 1
  %4467 = mul i32 %4464, %4466
  %4468 = urem i32 %4467, 2
  %4469 = icmp eq i32 %4468, 0
  %4470 = icmp slt i32 %4465, 10
  %4471 = or i1 %4469, %4470
  br i1 %4471, label %originalBB1492, label %originalBB1492alteredBB

originalBB1492:                                   ; preds = %4463, %originalBB1492alteredBB
  %4472 = load i8, i8* %45, align 1, !dbg !2426
  %4473 = trunc i8 %4472 to i1, !dbg !2426
  %4474 = load i32, i32* @x.35
  %4475 = load i32, i32* @y.36
  %4476 = sub i32 %4474, 1
  %4477 = mul i32 %4474, %4476
  %4478 = urem i32 %4477, 2
  %4479 = icmp eq i32 %4478, 0
  %4480 = icmp slt i32 %4475, 10
  %4481 = or i1 %4479, %4480
  br i1 %4481, label %originalBBpart21494, label %originalBB1492alteredBB

originalBBpart21494:                              ; preds = %originalBB1492
  br i1 %4473, label %5678, label %4482, !dbg !2427

4482:                                             ; preds = %originalBBpart21494, %originalBBpart21486
  call void @llvm.dbg.declare(metadata i64* %50, metadata !2428, metadata !DIExpression()), !dbg !2430
  %4483 = load i32, i32* @x.35
  %4484 = load i32, i32* @y.36
  %4485 = sub i32 %4483, 1
  %4486 = mul i32 %4483, %4485
  %4487 = urem i32 %4486, 2
  %4488 = icmp eq i32 %4487, 0
  %4489 = icmp slt i32 %4484, 10
  %4490 = or i1 %4488, %4489
  br i1 %4490, label %originalBB1496, label %originalBB1496alteredBB

originalBB1496:                                   ; preds = %4482, %originalBB1496alteredBB
  %4491 = load i64, i64* %28, align 8, !dbg !2431
  %4492 = load i64, i64* %44, align 8, !dbg !2432
  %4493 = add i64 %4491, %4492, !dbg !2433
  store i64 %4493, i64* %50, align 8, !dbg !2430
  %4494 = load i32, i32* @x.35
  %4495 = load i32, i32* @y.36
  %4496 = sub i32 %4494, 1
  %4497 = mul i32 %4494, %4496
  %4498 = urem i32 %4497, 2
  %4499 = icmp eq i32 %4498, 0
  %4500 = icmp slt i32 %4495, 10
  %4501 = or i1 %4499, %4500
  br i1 %4501, label %originalBBpart21498, label %originalBB1496alteredBB

originalBBpart21498:                              ; preds = %originalBB1496
  br label %4502, !dbg !2434

4502:                                             ; preds = %originalBBpart21875, %originalBBpart21498
  %4503 = load i32, i32* @x.35
  %4504 = load i32, i32* @y.36
  %4505 = sub i32 %4503, 1
  %4506 = mul i32 %4503, %4505
  %4507 = urem i32 %4506, 2
  %4508 = icmp eq i32 %4507, 0
  %4509 = icmp slt i32 %4504, 10
  %4510 = or i1 %4508, %4509
  br i1 %4510, label %originalBB1500, label %originalBB1500alteredBB

originalBB1500:                                   ; preds = %4502, %originalBB1500alteredBB
  %4511 = load i8, i8* %33, align 1, !dbg !2435
  %4512 = trunc i8 %4511 to i1, !dbg !2435
  %4513 = load i32, i32* @x.35
  %4514 = load i32, i32* @y.36
  %4515 = sub i32 %4513, 1
  %4516 = mul i32 %4513, %4515
  %4517 = urem i32 %4516, 2
  %4518 = icmp eq i32 %4517, 0
  %4519 = icmp slt i32 %4514, 10
  %4520 = or i1 %4518, %4519
  br i1 %4520, label %originalBBpart21502, label %originalBB1500alteredBB

originalBBpart21502:                              ; preds = %originalBB1500
  br i1 %4512, label %4521, label %5154, !dbg !2440

4521:                                             ; preds = %originalBBpart21502
  %4522 = load i32, i32* @x.35
  %4523 = load i32, i32* @y.36
  %4524 = sub i32 %4522, 1
  %4525 = mul i32 %4522, %4524
  %4526 = urem i32 %4525, 2
  %4527 = icmp eq i32 %4526, 0
  %4528 = icmp slt i32 %4523, 10
  %4529 = or i1 %4527, %4528
  br i1 %4529, label %originalBB1504, label %originalBB1504alteredBB

originalBB1504:                                   ; preds = %4521, %originalBB1504alteredBB
  %4530 = load i8, i8* %45, align 1, !dbg !2441
  %4531 = trunc i8 %4530 to i1, !dbg !2441
  %4532 = load i32, i32* @x.35
  %4533 = load i32, i32* @y.36
  %4534 = sub i32 %4532, 1
  %4535 = mul i32 %4532, %4534
  %4536 = urem i32 %4535, 2
  %4537 = icmp eq i32 %4536, 0
  %4538 = icmp slt i32 %4533, 10
  %4539 = or i1 %4537, %4538
  br i1 %4539, label %originalBBpart21506, label %originalBB1504alteredBB

originalBBpart21506:                              ; preds = %originalBB1504
  br i1 %4531, label %5154, label %4540, !dbg !2442

4540:                                             ; preds = %originalBBpart21506
  %4541 = load i32, i32* @x.35
  %4542 = load i32, i32* @y.36
  %4543 = sub i32 %4541, 1
  %4544 = mul i32 %4541, %4543
  %4545 = urem i32 %4544, 2
  %4546 = icmp eq i32 %4545, 0
  %4547 = icmp slt i32 %4542, 10
  %4548 = or i1 %4546, %4547
  br i1 %4548, label %originalBB1508, label %originalBB1508alteredBB

originalBB1508:                                   ; preds = %4540, %originalBB1508alteredBB
  %4549 = load i32, i32* @x.35
  %4550 = load i32, i32* @y.36
  %4551 = sub i32 %4549, 1
  %4552 = mul i32 %4549, %4551
  %4553 = urem i32 %4552, 2
  %4554 = icmp eq i32 %4553, 0
  %4555 = icmp slt i32 %4550, 10
  %4556 = or i1 %4554, %4555
  br i1 %4556, label %originalBBpart21510, label %originalBB1508alteredBB

originalBBpart21510:                              ; preds = %originalBB1508
  br label %4557, !dbg !2443

4557:                                             ; preds = %originalBBpart21510
  %4558 = load i32, i32* @x.35
  %4559 = load i32, i32* @y.36
  %4560 = sub i32 %4558, 1
  %4561 = mul i32 %4558, %4560
  %4562 = urem i32 %4561, 2
  %4563 = icmp eq i32 %4562, 0
  %4564 = icmp slt i32 %4559, 10
  %4565 = or i1 %4563, %4564
  br i1 %4565, label %originalBB1512, label %originalBB1512alteredBB

originalBB1512:                                   ; preds = %4557, %originalBB1512alteredBB
  %4566 = load i8, i8* %35, align 1, !dbg !2445
  %4567 = trunc i8 %4566 to i1, !dbg !2445
  %4568 = load i32, i32* @x.35
  %4569 = load i32, i32* @y.36
  %4570 = sub i32 %4568, 1
  %4571 = mul i32 %4568, %4570
  %4572 = urem i32 %4571, 2
  %4573 = icmp eq i32 %4572, 0
  %4574 = icmp slt i32 %4569, 10
  %4575 = or i1 %4573, %4574
  br i1 %4575, label %originalBBpart21514, label %originalBB1512alteredBB

originalBBpart21514:                              ; preds = %originalBB1512
  br i1 %4567, label %4576, label %4593, !dbg !2448

4576:                                             ; preds = %originalBBpart21514
  %4577 = load i32, i32* @x.35
  %4578 = load i32, i32* @y.36
  %4579 = sub i32 %4577, 1
  %4580 = mul i32 %4577, %4579
  %4581 = urem i32 %4580, 2
  %4582 = icmp eq i32 %4581, 0
  %4583 = icmp slt i32 %4578, 10
  %4584 = or i1 %4582, %4583
  br i1 %4584, label %originalBB1516, label %originalBB1516alteredBB

originalBB1516:                                   ; preds = %4576, %originalBB1516alteredBB
  %4585 = load i32, i32* @x.35
  %4586 = load i32, i32* @y.36
  %4587 = sub i32 %4585, 1
  %4588 = mul i32 %4585, %4587
  %4589 = urem i32 %4588, 2
  %4590 = icmp eq i32 %4589, 0
  %4591 = icmp slt i32 %4586, 10
  %4592 = or i1 %4590, %4591
  br i1 %4592, label %originalBBpart21518, label %originalBB1516alteredBB

originalBBpart21518:                              ; preds = %originalBB1516
  br label %7269, !dbg !2445

4593:                                             ; preds = %originalBBpart21514
  %4594 = load i32, i32* @x.35
  %4595 = load i32, i32* @y.36
  %4596 = sub i32 %4594, 1
  %4597 = mul i32 %4594, %4596
  %4598 = urem i32 %4597, 2
  %4599 = icmp eq i32 %4598, 0
  %4600 = icmp slt i32 %4595, 10
  %4601 = or i1 %4599, %4600
  br i1 %4601, label %originalBB1520, label %originalBB1520alteredBB

originalBB1520:                                   ; preds = %4593, %originalBB1520alteredBB
  store i8 1, i8* %42, align 1, !dbg !2448
  %4602 = load i32, i32* %23, align 4, !dbg !2449
  %4603 = icmp eq i32 %4602, 2, !dbg !2449
  %4604 = load i32, i32* @x.35
  %4605 = load i32, i32* @y.36
  %4606 = sub i32 %4604, 1
  %4607 = mul i32 %4604, %4606
  %4608 = urem i32 %4607, 2
  %4609 = icmp eq i32 %4608, 0
  %4610 = icmp slt i32 %4605, 10
  %4611 = or i1 %4609, %4610
  br i1 %4611, label %originalBBpart21522, label %originalBB1520alteredBB

originalBBpart21522:                              ; preds = %originalBB1520
  br i1 %4603, label %4612, label %4876, !dbg !2449

4612:                                             ; preds = %originalBBpart21522
  %4613 = load i32, i32* @x.35
  %4614 = load i32, i32* @y.36
  %4615 = sub i32 %4613, 1
  %4616 = mul i32 %4613, %4615
  %4617 = urem i32 %4616, 2
  %4618 = icmp eq i32 %4617, 0
  %4619 = icmp slt i32 %4614, 10
  %4620 = or i1 %4618, %4619
  br i1 %4620, label %originalBB1524, label %originalBB1524alteredBB

originalBB1524:                                   ; preds = %4612, %originalBB1524alteredBB
  %4621 = load i8, i8* %36, align 1, !dbg !2449
  %4622 = trunc i8 %4621 to i1, !dbg !2449
  %4623 = load i32, i32* @x.35
  %4624 = load i32, i32* @y.36
  %4625 = sub i32 %4623, 1
  %4626 = mul i32 %4623, %4625
  %4627 = urem i32 %4626, 2
  %4628 = icmp eq i32 %4627, 0
  %4629 = icmp slt i32 %4624, 10
  %4630 = or i1 %4628, %4629
  br i1 %4630, label %originalBBpart21526, label %originalBB1524alteredBB

originalBBpart21526:                              ; preds = %originalBB1524
  br i1 %4622, label %4876, label %4631, !dbg !2448

4631:                                             ; preds = %originalBBpart21526
  %4632 = load i32, i32* @x.35
  %4633 = load i32, i32* @y.36
  %4634 = sub i32 %4632, 1
  %4635 = mul i32 %4632, %4634
  %4636 = urem i32 %4635, 2
  %4637 = icmp eq i32 %4636, 0
  %4638 = icmp slt i32 %4633, 10
  %4639 = or i1 %4637, %4638
  br i1 %4639, label %originalBB1528, label %originalBB1528alteredBB

originalBB1528:                                   ; preds = %4631, %originalBB1528alteredBB
  %4640 = load i32, i32* @x.35
  %4641 = load i32, i32* @y.36
  %4642 = sub i32 %4640, 1
  %4643 = mul i32 %4640, %4642
  %4644 = urem i32 %4643, 2
  %4645 = icmp eq i32 %4644, 0
  %4646 = icmp slt i32 %4641, 10
  %4647 = or i1 %4645, %4646
  br i1 %4647, label %originalBBpart21530, label %originalBB1528alteredBB

originalBBpart21530:                              ; preds = %originalBB1528
  br label %4648, !dbg !2451

4648:                                             ; preds = %originalBBpart21530
  %4649 = load i32, i32* @x.35
  %4650 = load i32, i32* @y.36
  %4651 = sub i32 %4649, 1
  %4652 = mul i32 %4649, %4651
  %4653 = urem i32 %4652, 2
  %4654 = icmp eq i32 %4653, 0
  %4655 = icmp slt i32 %4650, 10
  %4656 = or i1 %4654, %4655
  br i1 %4656, label %originalBB1532, label %originalBB1532alteredBB

originalBB1532:                                   ; preds = %4648, %originalBB1532alteredBB
  %4657 = load i64, i64* %29, align 8, !dbg !2453
  %4658 = load i64, i64* %20, align 8, !dbg !2453
  %4659 = icmp ult i64 %4657, %4658, !dbg !2453
  %4660 = load i32, i32* @x.35
  %4661 = load i32, i32* @y.36
  %4662 = sub i32 %4660, 1
  %4663 = mul i32 %4660, %4662
  %4664 = urem i32 %4663, 2
  %4665 = icmp eq i32 %4664, 0
  %4666 = icmp slt i32 %4661, 10
  %4667 = or i1 %4665, %4666
  br i1 %4667, label %originalBBpart21534, label %originalBB1532alteredBB

originalBBpart21534:                              ; preds = %originalBB1532
  br i1 %4659, label %4668, label %4688, !dbg !2456

4668:                                             ; preds = %originalBBpart21534
  %4669 = load i32, i32* @x.35
  %4670 = load i32, i32* @y.36
  %4671 = sub i32 %4669, 1
  %4672 = mul i32 %4669, %4671
  %4673 = urem i32 %4672, 2
  %4674 = icmp eq i32 %4673, 0
  %4675 = icmp slt i32 %4670, 10
  %4676 = or i1 %4674, %4675
  br i1 %4676, label %originalBB1536, label %originalBB1536alteredBB

originalBB1536:                                   ; preds = %4668, %originalBB1536alteredBB
  %4677 = load i8*, i8** %19, align 8, !dbg !2453
  %4678 = load i64, i64* %29, align 8, !dbg !2453
  %4679 = getelementptr inbounds i8, i8* %4677, i64 %4678, !dbg !2453
  store i8 39, i8* %4679, align 1, !dbg !2453
  %4680 = load i32, i32* @x.35
  %4681 = load i32, i32* @y.36
  %4682 = sub i32 %4680, 1
  %4683 = mul i32 %4680, %4682
  %4684 = urem i32 %4683, 2
  %4685 = icmp eq i32 %4684, 0
  %4686 = icmp slt i32 %4681, 10
  %4687 = or i1 %4685, %4686
  br i1 %4687, label %originalBBpart21538, label %originalBB1536alteredBB

originalBBpart21538:                              ; preds = %originalBB1536
  br label %4688, !dbg !2453

4688:                                             ; preds = %originalBBpart21538, %originalBBpart21534
  %4689 = load i32, i32* @x.35
  %4690 = load i32, i32* @y.36
  %4691 = sub i32 %4689, 1
  %4692 = mul i32 %4689, %4691
  %4693 = urem i32 %4692, 2
  %4694 = icmp eq i32 %4693, 0
  %4695 = icmp slt i32 %4690, 10
  %4696 = or i1 %4694, %4695
  br i1 %4696, label %originalBB1540, label %originalBB1540alteredBB

originalBB1540:                                   ; preds = %4688, %originalBB1540alteredBB
  %4697 = load i64, i64* %29, align 8, !dbg !2456
  %4698 = add i64 %4697, 1, !dbg !2456
  store i64 %4698, i64* %29, align 8, !dbg !2456
  %4699 = load i32, i32* @x.35
  %4700 = load i32, i32* @y.36
  %4701 = sub i32 %4699, 1
  %4702 = mul i32 %4699, %4701
  %4703 = urem i32 %4702, 2
  %4704 = icmp eq i32 %4703, 0
  %4705 = icmp slt i32 %4700, 10
  %4706 = or i1 %4704, %4705
  br i1 %4706, label %originalBBpart21549, label %originalBB1540alteredBB

originalBBpart21549:                              ; preds = %originalBB1540
  br label %4707, !dbg !2456

4707:                                             ; preds = %originalBBpart21549
  %4708 = load i32, i32* @x.35
  %4709 = load i32, i32* @y.36
  %4710 = sub i32 %4708, 1
  %4711 = mul i32 %4708, %4710
  %4712 = urem i32 %4711, 2
  %4713 = icmp eq i32 %4712, 0
  %4714 = icmp slt i32 %4709, 10
  %4715 = or i1 %4713, %4714
  br i1 %4715, label %originalBB1551, label %originalBB1551alteredBB

originalBB1551:                                   ; preds = %4707, %originalBB1551alteredBB
  %4716 = load i32, i32* @x.35
  %4717 = load i32, i32* @y.36
  %4718 = sub i32 %4716, 1
  %4719 = mul i32 %4716, %4718
  %4720 = urem i32 %4719, 2
  %4721 = icmp eq i32 %4720, 0
  %4722 = icmp slt i32 %4717, 10
  %4723 = or i1 %4721, %4722
  br i1 %4723, label %originalBBpart21553, label %originalBB1551alteredBB

originalBBpart21553:                              ; preds = %originalBB1551
  br label %4724, !dbg !2451

4724:                                             ; preds = %originalBBpart21553
  %4725 = load i32, i32* @x.35
  %4726 = load i32, i32* @y.36
  %4727 = sub i32 %4725, 1
  %4728 = mul i32 %4725, %4727
  %4729 = urem i32 %4728, 2
  %4730 = icmp eq i32 %4729, 0
  %4731 = icmp slt i32 %4726, 10
  %4732 = or i1 %4730, %4731
  br i1 %4732, label %originalBB1555, label %originalBB1555alteredBB

originalBB1555:                                   ; preds = %4724, %originalBB1555alteredBB
  %4733 = load i64, i64* %29, align 8, !dbg !2457
  %4734 = load i64, i64* %20, align 8, !dbg !2457
  %4735 = icmp ult i64 %4733, %4734, !dbg !2457
  %4736 = load i32, i32* @x.35
  %4737 = load i32, i32* @y.36
  %4738 = sub i32 %4736, 1
  %4739 = mul i32 %4736, %4738
  %4740 = urem i32 %4739, 2
  %4741 = icmp eq i32 %4740, 0
  %4742 = icmp slt i32 %4737, 10
  %4743 = or i1 %4741, %4742
  br i1 %4743, label %originalBBpart21557, label %originalBB1555alteredBB

originalBBpart21557:                              ; preds = %originalBB1555
  br i1 %4735, label %4744, label %4764, !dbg !2460

4744:                                             ; preds = %originalBBpart21557
  %4745 = load i32, i32* @x.35
  %4746 = load i32, i32* @y.36
  %4747 = sub i32 %4745, 1
  %4748 = mul i32 %4745, %4747
  %4749 = urem i32 %4748, 2
  %4750 = icmp eq i32 %4749, 0
  %4751 = icmp slt i32 %4746, 10
  %4752 = or i1 %4750, %4751
  br i1 %4752, label %originalBB1559, label %originalBB1559alteredBB

originalBB1559:                                   ; preds = %4744, %originalBB1559alteredBB
  %4753 = load i8*, i8** %19, align 8, !dbg !2457
  %4754 = load i64, i64* %29, align 8, !dbg !2457
  %4755 = getelementptr inbounds i8, i8* %4753, i64 %4754, !dbg !2457
  store i8 36, i8* %4755, align 1, !dbg !2457
  %4756 = load i32, i32* @x.35
  %4757 = load i32, i32* @y.36
  %4758 = sub i32 %4756, 1
  %4759 = mul i32 %4756, %4758
  %4760 = urem i32 %4759, 2
  %4761 = icmp eq i32 %4760, 0
  %4762 = icmp slt i32 %4757, 10
  %4763 = or i1 %4761, %4762
  br i1 %4763, label %originalBBpart21561, label %originalBB1559alteredBB

originalBBpart21561:                              ; preds = %originalBB1559
  br label %4764, !dbg !2457

4764:                                             ; preds = %originalBBpart21561, %originalBBpart21557
  %4765 = load i32, i32* @x.35
  %4766 = load i32, i32* @y.36
  %4767 = sub i32 %4765, 1
  %4768 = mul i32 %4765, %4767
  %4769 = urem i32 %4768, 2
  %4770 = icmp eq i32 %4769, 0
  %4771 = icmp slt i32 %4766, 10
  %4772 = or i1 %4770, %4771
  br i1 %4772, label %originalBB1563, label %originalBB1563alteredBB

originalBB1563:                                   ; preds = %4764, %originalBB1563alteredBB
  %4773 = load i64, i64* %29, align 8, !dbg !2460
  %4774 = add i64 %4773, 1, !dbg !2460
  store i64 %4774, i64* %29, align 8, !dbg !2460
  %4775 = load i32, i32* @x.35
  %4776 = load i32, i32* @y.36
  %4777 = sub i32 %4775, 1
  %4778 = mul i32 %4775, %4777
  %4779 = urem i32 %4778, 2
  %4780 = icmp eq i32 %4779, 0
  %4781 = icmp slt i32 %4776, 10
  %4782 = or i1 %4780, %4781
  br i1 %4782, label %originalBBpart21571, label %originalBB1563alteredBB

originalBBpart21571:                              ; preds = %originalBB1563
  br label %4783, !dbg !2460

4783:                                             ; preds = %originalBBpart21571
  %4784 = load i32, i32* @x.35
  %4785 = load i32, i32* @y.36
  %4786 = sub i32 %4784, 1
  %4787 = mul i32 %4784, %4786
  %4788 = urem i32 %4787, 2
  %4789 = icmp eq i32 %4788, 0
  %4790 = icmp slt i32 %4785, 10
  %4791 = or i1 %4789, %4790
  br i1 %4791, label %originalBB1573, label %originalBB1573alteredBB

originalBB1573:                                   ; preds = %4783, %originalBB1573alteredBB
  %4792 = load i32, i32* @x.35
  %4793 = load i32, i32* @y.36
  %4794 = sub i32 %4792, 1
  %4795 = mul i32 %4792, %4794
  %4796 = urem i32 %4795, 2
  %4797 = icmp eq i32 %4796, 0
  %4798 = icmp slt i32 %4793, 10
  %4799 = or i1 %4797, %4798
  br i1 %4799, label %originalBBpart21575, label %originalBB1573alteredBB

originalBBpart21575:                              ; preds = %originalBB1573
  br label %4800, !dbg !2451

4800:                                             ; preds = %originalBBpart21575
  %4801 = load i32, i32* @x.35
  %4802 = load i32, i32* @y.36
  %4803 = sub i32 %4801, 1
  %4804 = mul i32 %4801, %4803
  %4805 = urem i32 %4804, 2
  %4806 = icmp eq i32 %4805, 0
  %4807 = icmp slt i32 %4802, 10
  %4808 = or i1 %4806, %4807
  br i1 %4808, label %originalBB1577, label %originalBB1577alteredBB

originalBB1577:                                   ; preds = %4800, %originalBB1577alteredBB
  %4809 = load i64, i64* %29, align 8, !dbg !2461
  %4810 = load i64, i64* %20, align 8, !dbg !2461
  %4811 = icmp ult i64 %4809, %4810, !dbg !2461
  %4812 = load i32, i32* @x.35
  %4813 = load i32, i32* @y.36
  %4814 = sub i32 %4812, 1
  %4815 = mul i32 %4812, %4814
  %4816 = urem i32 %4815, 2
  %4817 = icmp eq i32 %4816, 0
  %4818 = icmp slt i32 %4813, 10
  %4819 = or i1 %4817, %4818
  br i1 %4819, label %originalBBpart21579, label %originalBB1577alteredBB

originalBBpart21579:                              ; preds = %originalBB1577
  br i1 %4811, label %4820, label %4840, !dbg !2464

4820:                                             ; preds = %originalBBpart21579
  %4821 = load i32, i32* @x.35
  %4822 = load i32, i32* @y.36
  %4823 = sub i32 %4821, 1
  %4824 = mul i32 %4821, %4823
  %4825 = urem i32 %4824, 2
  %4826 = icmp eq i32 %4825, 0
  %4827 = icmp slt i32 %4822, 10
  %4828 = or i1 %4826, %4827
  br i1 %4828, label %originalBB1581, label %originalBB1581alteredBB

originalBB1581:                                   ; preds = %4820, %originalBB1581alteredBB
  %4829 = load i8*, i8** %19, align 8, !dbg !2461
  %4830 = load i64, i64* %29, align 8, !dbg !2461
  %4831 = getelementptr inbounds i8, i8* %4829, i64 %4830, !dbg !2461
  store i8 39, i8* %4831, align 1, !dbg !2461
  %4832 = load i32, i32* @x.35
  %4833 = load i32, i32* @y.36
  %4834 = sub i32 %4832, 1
  %4835 = mul i32 %4832, %4834
  %4836 = urem i32 %4835, 2
  %4837 = icmp eq i32 %4836, 0
  %4838 = icmp slt i32 %4833, 10
  %4839 = or i1 %4837, %4838
  br i1 %4839, label %originalBBpart21583, label %originalBB1581alteredBB

originalBBpart21583:                              ; preds = %originalBB1581
  br label %4840, !dbg !2461

4840:                                             ; preds = %originalBBpart21583, %originalBBpart21579
  %4841 = load i32, i32* @x.35
  %4842 = load i32, i32* @y.36
  %4843 = sub i32 %4841, 1
  %4844 = mul i32 %4841, %4843
  %4845 = urem i32 %4844, 2
  %4846 = icmp eq i32 %4845, 0
  %4847 = icmp slt i32 %4842, 10
  %4848 = or i1 %4846, %4847
  br i1 %4848, label %originalBB1585, label %originalBB1585alteredBB

originalBB1585:                                   ; preds = %4840, %originalBB1585alteredBB
  %4849 = load i64, i64* %29, align 8, !dbg !2464
  %4850 = add i64 %4849, 1, !dbg !2464
  store i64 %4850, i64* %29, align 8, !dbg !2464
  %4851 = load i32, i32* @x.35
  %4852 = load i32, i32* @y.36
  %4853 = sub i32 %4851, 1
  %4854 = mul i32 %4851, %4853
  %4855 = urem i32 %4854, 2
  %4856 = icmp eq i32 %4855, 0
  %4857 = icmp slt i32 %4852, 10
  %4858 = or i1 %4856, %4857
  br i1 %4858, label %originalBBpart21601, label %originalBB1585alteredBB

originalBBpart21601:                              ; preds = %originalBB1585
  br label %4859, !dbg !2464

4859:                                             ; preds = %originalBBpart21601
  %4860 = load i32, i32* @x.35
  %4861 = load i32, i32* @y.36
  %4862 = sub i32 %4860, 1
  %4863 = mul i32 %4860, %4862
  %4864 = urem i32 %4863, 2
  %4865 = icmp eq i32 %4864, 0
  %4866 = icmp slt i32 %4861, 10
  %4867 = or i1 %4865, %4866
  br i1 %4867, label %originalBB1603, label %originalBB1603alteredBB

originalBB1603:                                   ; preds = %4859, %originalBB1603alteredBB
  store i8 1, i8* %36, align 1, !dbg !2451
  %4868 = load i32, i32* @x.35
  %4869 = load i32, i32* @y.36
  %4870 = sub i32 %4868, 1
  %4871 = mul i32 %4868, %4870
  %4872 = urem i32 %4871, 2
  %4873 = icmp eq i32 %4872, 0
  %4874 = icmp slt i32 %4869, 10
  %4875 = or i1 %4873, %4874
  br i1 %4875, label %originalBBpart21605, label %originalBB1603alteredBB

originalBBpart21605:                              ; preds = %originalBB1603
  br label %4876, !dbg !2451

4876:                                             ; preds = %originalBBpart21605, %originalBBpart21526, %originalBBpart21522
  %4877 = load i32, i32* @x.35
  %4878 = load i32, i32* @y.36
  %4879 = sub i32 %4877, 1
  %4880 = mul i32 %4877, %4879
  %4881 = urem i32 %4880, 2
  %4882 = icmp eq i32 %4881, 0
  %4883 = icmp slt i32 %4878, 10
  %4884 = or i1 %4882, %4883
  br i1 %4884, label %originalBB1607, label %originalBB1607alteredBB

originalBB1607:                                   ; preds = %4876, %originalBB1607alteredBB
  %4885 = load i32, i32* @x.35
  %4886 = load i32, i32* @y.36
  %4887 = sub i32 %4885, 1
  %4888 = mul i32 %4885, %4887
  %4889 = urem i32 %4888, 2
  %4890 = icmp eq i32 %4889, 0
  %4891 = icmp slt i32 %4886, 10
  %4892 = or i1 %4890, %4891
  br i1 %4892, label %originalBBpart21609, label %originalBB1607alteredBB

originalBBpart21609:                              ; preds = %originalBB1607
  br label %4893, !dbg !2448

4893:                                             ; preds = %originalBBpart21609
  %4894 = load i32, i32* @x.35
  %4895 = load i32, i32* @y.36
  %4896 = sub i32 %4894, 1
  %4897 = mul i32 %4894, %4896
  %4898 = urem i32 %4897, 2
  %4899 = icmp eq i32 %4898, 0
  %4900 = icmp slt i32 %4895, 10
  %4901 = or i1 %4899, %4900
  br i1 %4901, label %originalBB1611, label %originalBB1611alteredBB

originalBB1611:                                   ; preds = %4893, %originalBB1611alteredBB
  %4902 = load i64, i64* %29, align 8, !dbg !2465
  %4903 = load i64, i64* %20, align 8, !dbg !2465
  %4904 = icmp ult i64 %4902, %4903, !dbg !2465
  %4905 = load i32, i32* @x.35
  %4906 = load i32, i32* @y.36
  %4907 = sub i32 %4905, 1
  %4908 = mul i32 %4905, %4907
  %4909 = urem i32 %4908, 2
  %4910 = icmp eq i32 %4909, 0
  %4911 = icmp slt i32 %4906, 10
  %4912 = or i1 %4910, %4911
  br i1 %4912, label %originalBBpart21613, label %originalBB1611alteredBB

originalBBpart21613:                              ; preds = %originalBB1611
  br i1 %4904, label %4913, label %4933, !dbg !2468

4913:                                             ; preds = %originalBBpart21613
  %4914 = load i32, i32* @x.35
  %4915 = load i32, i32* @y.36
  %4916 = sub i32 %4914, 1
  %4917 = mul i32 %4914, %4916
  %4918 = urem i32 %4917, 2
  %4919 = icmp eq i32 %4918, 0
  %4920 = icmp slt i32 %4915, 10
  %4921 = or i1 %4919, %4920
  br i1 %4921, label %originalBB1615, label %originalBB1615alteredBB

originalBB1615:                                   ; preds = %4913, %originalBB1615alteredBB
  %4922 = load i8*, i8** %19, align 8, !dbg !2465
  %4923 = load i64, i64* %29, align 8, !dbg !2465
  %4924 = getelementptr inbounds i8, i8* %4922, i64 %4923, !dbg !2465
  store i8 92, i8* %4924, align 1, !dbg !2465
  %4925 = load i32, i32* @x.35
  %4926 = load i32, i32* @y.36
  %4927 = sub i32 %4925, 1
  %4928 = mul i32 %4925, %4927
  %4929 = urem i32 %4928, 2
  %4930 = icmp eq i32 %4929, 0
  %4931 = icmp slt i32 %4926, 10
  %4932 = or i1 %4930, %4931
  br i1 %4932, label %originalBBpart21617, label %originalBB1615alteredBB

originalBBpart21617:                              ; preds = %originalBB1615
  br label %4933, !dbg !2465

4933:                                             ; preds = %originalBBpart21617, %originalBBpart21613
  %4934 = load i32, i32* @x.35
  %4935 = load i32, i32* @y.36
  %4936 = sub i32 %4934, 1
  %4937 = mul i32 %4934, %4936
  %4938 = urem i32 %4937, 2
  %4939 = icmp eq i32 %4938, 0
  %4940 = icmp slt i32 %4935, 10
  %4941 = or i1 %4939, %4940
  br i1 %4941, label %originalBB1619, label %originalBB1619alteredBB

originalBB1619:                                   ; preds = %4933, %originalBB1619alteredBB
  %4942 = load i64, i64* %29, align 8, !dbg !2468
  %4943 = add i64 %4942, 1, !dbg !2468
  store i64 %4943, i64* %29, align 8, !dbg !2468
  %4944 = load i32, i32* @x.35
  %4945 = load i32, i32* @y.36
  %4946 = sub i32 %4944, 1
  %4947 = mul i32 %4944, %4946
  %4948 = urem i32 %4947, 2
  %4949 = icmp eq i32 %4948, 0
  %4950 = icmp slt i32 %4945, 10
  %4951 = or i1 %4949, %4950
  br i1 %4951, label %originalBBpart21632, label %originalBB1619alteredBB

originalBBpart21632:                              ; preds = %originalBB1619
  br label %4952, !dbg !2468

4952:                                             ; preds = %originalBBpart21632
  %4953 = load i32, i32* @x.35
  %4954 = load i32, i32* @y.36
  %4955 = sub i32 %4953, 1
  %4956 = mul i32 %4953, %4955
  %4957 = urem i32 %4956, 2
  %4958 = icmp eq i32 %4957, 0
  %4959 = icmp slt i32 %4954, 10
  %4960 = or i1 %4958, %4959
  br i1 %4960, label %originalBB1634, label %originalBB1634alteredBB

originalBB1634:                                   ; preds = %4952, %originalBB1634alteredBB
  %4961 = load i32, i32* @x.35
  %4962 = load i32, i32* @y.36
  %4963 = sub i32 %4961, 1
  %4964 = mul i32 %4961, %4963
  %4965 = urem i32 %4964, 2
  %4966 = icmp eq i32 %4965, 0
  %4967 = icmp slt i32 %4962, 10
  %4968 = or i1 %4966, %4967
  br i1 %4968, label %originalBBpart21636, label %originalBB1634alteredBB

originalBBpart21636:                              ; preds = %originalBB1634
  br label %4969, !dbg !2448

4969:                                             ; preds = %originalBBpart21636
  %4970 = load i32, i32* @x.35
  %4971 = load i32, i32* @y.36
  %4972 = sub i32 %4970, 1
  %4973 = mul i32 %4970, %4972
  %4974 = urem i32 %4973, 2
  %4975 = icmp eq i32 %4974, 0
  %4976 = icmp slt i32 %4971, 10
  %4977 = or i1 %4975, %4976
  br i1 %4977, label %originalBB1638, label %originalBB1638alteredBB

originalBB1638:                                   ; preds = %4969, %originalBB1638alteredBB
  %4978 = load i32, i32* @x.35
  %4979 = load i32, i32* @y.36
  %4980 = sub i32 %4978, 1
  %4981 = mul i32 %4978, %4980
  %4982 = urem i32 %4981, 2
  %4983 = icmp eq i32 %4982, 0
  %4984 = icmp slt i32 %4979, 10
  %4985 = or i1 %4983, %4984
  br i1 %4985, label %originalBBpart21640, label %originalBB1638alteredBB

originalBBpart21640:                              ; preds = %originalBB1638
  br label %4986, !dbg !2469

4986:                                             ; preds = %originalBBpart21640
  %4987 = load i32, i32* @x.35
  %4988 = load i32, i32* @y.36
  %4989 = sub i32 %4987, 1
  %4990 = mul i32 %4987, %4989
  %4991 = urem i32 %4990, 2
  %4992 = icmp eq i32 %4991, 0
  %4993 = icmp slt i32 %4988, 10
  %4994 = or i1 %4992, %4993
  br i1 %4994, label %originalBB1642, label %originalBB1642alteredBB

originalBB1642:                                   ; preds = %4986, %originalBB1642alteredBB
  %4995 = load i64, i64* %29, align 8, !dbg !2470
  %4996 = load i64, i64* %20, align 8, !dbg !2470
  %4997 = icmp ult i64 %4995, %4996, !dbg !2470
  %4998 = load i32, i32* @x.35
  %4999 = load i32, i32* @y.36
  %5000 = sub i32 %4998, 1
  %5001 = mul i32 %4998, %5000
  %5002 = urem i32 %5001, 2
  %5003 = icmp eq i32 %5002, 0
  %5004 = icmp slt i32 %4999, 10
  %5005 = or i1 %5003, %5004
  br i1 %5005, label %originalBBpart21644, label %originalBB1642alteredBB

originalBBpart21644:                              ; preds = %originalBB1642
  br i1 %4997, label %5006, label %5031, !dbg !2473

5006:                                             ; preds = %originalBBpart21644
  %5007 = load i32, i32* @x.35
  %5008 = load i32, i32* @y.36
  %5009 = sub i32 %5007, 1
  %5010 = mul i32 %5007, %5009
  %5011 = urem i32 %5010, 2
  %5012 = icmp eq i32 %5011, 0
  %5013 = icmp slt i32 %5008, 10
  %5014 = or i1 %5012, %5013
  br i1 %5014, label %originalBB1646, label %originalBB1646alteredBB

originalBB1646:                                   ; preds = %5006, %originalBB1646alteredBB
  %5015 = load i8, i8* %39, align 1, !dbg !2470
  %5016 = zext i8 %5015 to i32, !dbg !2470
  %5017 = ashr i32 %5016, 6, !dbg !2470
  %5018 = add nsw i32 48, %5017, !dbg !2470
  %5019 = trunc i32 %5018 to i8, !dbg !2470
  %5020 = load i8*, i8** %19, align 8, !dbg !2470
  %5021 = load i64, i64* %29, align 8, !dbg !2470
  %5022 = getelementptr inbounds i8, i8* %5020, i64 %5021, !dbg !2470
  store i8 %5019, i8* %5022, align 1, !dbg !2470
  %5023 = load i32, i32* @x.35
  %5024 = load i32, i32* @y.36
  %5025 = sub i32 %5023, 1
  %5026 = mul i32 %5023, %5025
  %5027 = urem i32 %5026, 2
  %5028 = icmp eq i32 %5027, 0
  %5029 = icmp slt i32 %5024, 10
  %5030 = or i1 %5028, %5029
  br i1 %5030, label %originalBBpart21660, label %originalBB1646alteredBB

originalBBpart21660:                              ; preds = %originalBB1646
  br label %5031, !dbg !2470

5031:                                             ; preds = %originalBBpart21660, %originalBBpart21644
  %5032 = load i32, i32* @x.35
  %5033 = load i32, i32* @y.36
  %5034 = sub i32 %5032, 1
  %5035 = mul i32 %5032, %5034
  %5036 = urem i32 %5035, 2
  %5037 = icmp eq i32 %5036, 0
  %5038 = icmp slt i32 %5033, 10
  %5039 = or i1 %5037, %5038
  br i1 %5039, label %originalBB1662, label %originalBB1662alteredBB

originalBB1662:                                   ; preds = %5031, %originalBB1662alteredBB
  %5040 = load i64, i64* %29, align 8, !dbg !2473
  %5041 = add i64 %5040, 1, !dbg !2473
  store i64 %5041, i64* %29, align 8, !dbg !2473
  %5042 = load i32, i32* @x.35
  %5043 = load i32, i32* @y.36
  %5044 = sub i32 %5042, 1
  %5045 = mul i32 %5042, %5044
  %5046 = urem i32 %5045, 2
  %5047 = icmp eq i32 %5046, 0
  %5048 = icmp slt i32 %5043, 10
  %5049 = or i1 %5047, %5048
  br i1 %5049, label %originalBBpart21675, label %originalBB1662alteredBB

originalBBpart21675:                              ; preds = %originalBB1662
  br label %5050, !dbg !2473

5050:                                             ; preds = %originalBBpart21675
  %5051 = load i32, i32* @x.35
  %5052 = load i32, i32* @y.36
  %5053 = sub i32 %5051, 1
  %5054 = mul i32 %5051, %5053
  %5055 = urem i32 %5054, 2
  %5056 = icmp eq i32 %5055, 0
  %5057 = icmp slt i32 %5052, 10
  %5058 = or i1 %5056, %5057
  br i1 %5058, label %originalBB1677, label %originalBB1677alteredBB

originalBB1677:                                   ; preds = %5050, %originalBB1677alteredBB
  %5059 = load i32, i32* @x.35
  %5060 = load i32, i32* @y.36
  %5061 = sub i32 %5059, 1
  %5062 = mul i32 %5059, %5061
  %5063 = urem i32 %5062, 2
  %5064 = icmp eq i32 %5063, 0
  %5065 = icmp slt i32 %5060, 10
  %5066 = or i1 %5064, %5065
  br i1 %5066, label %originalBBpart21679, label %originalBB1677alteredBB

originalBBpart21679:                              ; preds = %originalBB1677
  br label %5067, !dbg !2474

5067:                                             ; preds = %originalBBpart21679
  %5068 = load i32, i32* @x.35
  %5069 = load i32, i32* @y.36
  %5070 = sub i32 %5068, 1
  %5071 = mul i32 %5068, %5070
  %5072 = urem i32 %5071, 2
  %5073 = icmp eq i32 %5072, 0
  %5074 = icmp slt i32 %5069, 10
  %5075 = or i1 %5073, %5074
  br i1 %5075, label %originalBB1681, label %originalBB1681alteredBB

originalBB1681:                                   ; preds = %5067, %originalBB1681alteredBB
  %5076 = load i64, i64* %29, align 8, !dbg !2475
  %5077 = load i64, i64* %20, align 8, !dbg !2475
  %5078 = icmp ult i64 %5076, %5077, !dbg !2475
  %5079 = load i32, i32* @x.35
  %5080 = load i32, i32* @y.36
  %5081 = sub i32 %5079, 1
  %5082 = mul i32 %5079, %5081
  %5083 = urem i32 %5082, 2
  %5084 = icmp eq i32 %5083, 0
  %5085 = icmp slt i32 %5080, 10
  %5086 = or i1 %5084, %5085
  br i1 %5086, label %originalBBpart21683, label %originalBB1681alteredBB

originalBBpart21683:                              ; preds = %originalBB1681
  br i1 %5078, label %5087, label %5113, !dbg !2478

5087:                                             ; preds = %originalBBpart21683
  %5088 = load i32, i32* @x.35
  %5089 = load i32, i32* @y.36
  %5090 = sub i32 %5088, 1
  %5091 = mul i32 %5088, %5090
  %5092 = urem i32 %5091, 2
  %5093 = icmp eq i32 %5092, 0
  %5094 = icmp slt i32 %5089, 10
  %5095 = or i1 %5093, %5094
  br i1 %5095, label %originalBB1685, label %originalBB1685alteredBB

originalBB1685:                                   ; preds = %5087, %originalBB1685alteredBB
  %5096 = load i8, i8* %39, align 1, !dbg !2475
  %5097 = zext i8 %5096 to i32, !dbg !2475
  %5098 = ashr i32 %5097, 3, !dbg !2475
  %5099 = and i32 %5098, 7, !dbg !2475
  %5100 = add nsw i32 48, %5099, !dbg !2475
  %5101 = trunc i32 %5100 to i8, !dbg !2475
  %5102 = load i8*, i8** %19, align 8, !dbg !2475
  %5103 = load i64, i64* %29, align 8, !dbg !2475
  %5104 = getelementptr inbounds i8, i8* %5102, i64 %5103, !dbg !2475
  store i8 %5101, i8* %5104, align 1, !dbg !2475
  %5105 = load i32, i32* @x.35
  %5106 = load i32, i32* @y.36
  %5107 = sub i32 %5105, 1
  %5108 = mul i32 %5105, %5107
  %5109 = urem i32 %5108, 2
  %5110 = icmp eq i32 %5109, 0
  %5111 = icmp slt i32 %5106, 10
  %5112 = or i1 %5110, %5111
  br i1 %5112, label %originalBBpart21699, label %originalBB1685alteredBB

originalBBpart21699:                              ; preds = %originalBB1685
  br label %5113, !dbg !2475

5113:                                             ; preds = %originalBBpart21699, %originalBBpart21683
  %5114 = load i32, i32* @x.35
  %5115 = load i32, i32* @y.36
  %5116 = sub i32 %5114, 1
  %5117 = mul i32 %5114, %5116
  %5118 = urem i32 %5117, 2
  %5119 = icmp eq i32 %5118, 0
  %5120 = icmp slt i32 %5115, 10
  %5121 = or i1 %5119, %5120
  br i1 %5121, label %originalBB1701, label %originalBB1701alteredBB

originalBB1701:                                   ; preds = %5113, %originalBB1701alteredBB
  %5122 = load i64, i64* %29, align 8, !dbg !2478
  %5123 = add i64 %5122, 1, !dbg !2478
  store i64 %5123, i64* %29, align 8, !dbg !2478
  %5124 = load i32, i32* @x.35
  %5125 = load i32, i32* @y.36
  %5126 = sub i32 %5124, 1
  %5127 = mul i32 %5124, %5126
  %5128 = urem i32 %5127, 2
  %5129 = icmp eq i32 %5128, 0
  %5130 = icmp slt i32 %5125, 10
  %5131 = or i1 %5129, %5130
  br i1 %5131, label %originalBBpart21709, label %originalBB1701alteredBB

originalBBpart21709:                              ; preds = %originalBB1701
  br label %5132, !dbg !2478

5132:                                             ; preds = %originalBBpart21709
  %5133 = load i32, i32* @x.35
  %5134 = load i32, i32* @y.36
  %5135 = sub i32 %5133, 1
  %5136 = mul i32 %5133, %5135
  %5137 = urem i32 %5136, 2
  %5138 = icmp eq i32 %5137, 0
  %5139 = icmp slt i32 %5134, 10
  %5140 = or i1 %5138, %5139
  br i1 %5140, label %originalBB1711, label %originalBB1711alteredBB

originalBB1711:                                   ; preds = %5132, %originalBB1711alteredBB
  %5141 = load i8, i8* %39, align 1, !dbg !2479
  %5142 = zext i8 %5141 to i32, !dbg !2479
  %5143 = and i32 %5142, 7, !dbg !2480
  %5144 = add nsw i32 48, %5143, !dbg !2481
  %5145 = trunc i32 %5144 to i8, !dbg !2482
  store i8 %5145, i8* %39, align 1, !dbg !2483
  %5146 = load i32, i32* @x.35
  %5147 = load i32, i32* @y.36
  %5148 = sub i32 %5146, 1
  %5149 = mul i32 %5146, %5148
  %5150 = urem i32 %5149, 2
  %5151 = icmp eq i32 %5150, 0
  %5152 = icmp slt i32 %5147, 10
  %5153 = or i1 %5151, %5152
  br i1 %5153, label %originalBBpart21727, label %originalBB1711alteredBB

originalBBpart21727:                              ; preds = %originalBB1711
  br label %5283, !dbg !2484

5154:                                             ; preds = %originalBBpart21506, %originalBBpart21502
  %5155 = load i32, i32* @x.35
  %5156 = load i32, i32* @y.36
  %5157 = sub i32 %5155, 1
  %5158 = mul i32 %5155, %5157
  %5159 = urem i32 %5158, 2
  %5160 = icmp eq i32 %5159, 0
  %5161 = icmp slt i32 %5156, 10
  %5162 = or i1 %5160, %5161
  br i1 %5162, label %originalBB1729, label %originalBB1729alteredBB

originalBB1729:                                   ; preds = %5154, %originalBB1729alteredBB
  %5163 = load i8, i8* %41, align 1, !dbg !2485
  %5164 = trunc i8 %5163 to i1, !dbg !2485
  %5165 = load i32, i32* @x.35
  %5166 = load i32, i32* @y.36
  %5167 = sub i32 %5165, 1
  %5168 = mul i32 %5165, %5167
  %5169 = urem i32 %5168, 2
  %5170 = icmp eq i32 %5169, 0
  %5171 = icmp slt i32 %5166, 10
  %5172 = or i1 %5170, %5171
  br i1 %5172, label %originalBBpart21731, label %originalBB1729alteredBB

originalBBpart21731:                              ; preds = %originalBB1729
  br i1 %5164, label %5173, label %5266, !dbg !2487

5173:                                             ; preds = %originalBBpart21731
  %5174 = load i32, i32* @x.35
  %5175 = load i32, i32* @y.36
  %5176 = sub i32 %5174, 1
  %5177 = mul i32 %5174, %5176
  %5178 = urem i32 %5177, 2
  %5179 = icmp eq i32 %5178, 0
  %5180 = icmp slt i32 %5175, 10
  %5181 = or i1 %5179, %5180
  br i1 %5181, label %originalBB1733, label %originalBB1733alteredBB

originalBB1733:                                   ; preds = %5173, %originalBB1733alteredBB
  %5182 = load i32, i32* @x.35
  %5183 = load i32, i32* @y.36
  %5184 = sub i32 %5182, 1
  %5185 = mul i32 %5182, %5184
  %5186 = urem i32 %5185, 2
  %5187 = icmp eq i32 %5186, 0
  %5188 = icmp slt i32 %5183, 10
  %5189 = or i1 %5187, %5188
  br i1 %5189, label %originalBBpart21735, label %originalBB1733alteredBB

originalBBpart21735:                              ; preds = %originalBB1733
  br label %5190, !dbg !2488

5190:                                             ; preds = %originalBBpart21735
  %5191 = load i32, i32* @x.35
  %5192 = load i32, i32* @y.36
  %5193 = sub i32 %5191, 1
  %5194 = mul i32 %5191, %5193
  %5195 = urem i32 %5194, 2
  %5196 = icmp eq i32 %5195, 0
  %5197 = icmp slt i32 %5192, 10
  %5198 = or i1 %5196, %5197
  br i1 %5198, label %originalBB1737, label %originalBB1737alteredBB

originalBB1737:                                   ; preds = %5190, %originalBB1737alteredBB
  %5199 = load i64, i64* %29, align 8, !dbg !2490
  %5200 = load i64, i64* %20, align 8, !dbg !2490
  %5201 = icmp ult i64 %5199, %5200, !dbg !2490
  %5202 = load i32, i32* @x.35
  %5203 = load i32, i32* @y.36
  %5204 = sub i32 %5202, 1
  %5205 = mul i32 %5202, %5204
  %5206 = urem i32 %5205, 2
  %5207 = icmp eq i32 %5206, 0
  %5208 = icmp slt i32 %5203, 10
  %5209 = or i1 %5207, %5208
  br i1 %5209, label %originalBBpart21739, label %originalBB1737alteredBB

originalBBpart21739:                              ; preds = %originalBB1737
  br i1 %5201, label %5210, label %5230, !dbg !2493

5210:                                             ; preds = %originalBBpart21739
  %5211 = load i32, i32* @x.35
  %5212 = load i32, i32* @y.36
  %5213 = sub i32 %5211, 1
  %5214 = mul i32 %5211, %5213
  %5215 = urem i32 %5214, 2
  %5216 = icmp eq i32 %5215, 0
  %5217 = icmp slt i32 %5212, 10
  %5218 = or i1 %5216, %5217
  br i1 %5218, label %originalBB1741, label %originalBB1741alteredBB

originalBB1741:                                   ; preds = %5210, %originalBB1741alteredBB
  %5219 = load i8*, i8** %19, align 8, !dbg !2490
  %5220 = load i64, i64* %29, align 8, !dbg !2490
  %5221 = getelementptr inbounds i8, i8* %5219, i64 %5220, !dbg !2490
  store i8 92, i8* %5221, align 1, !dbg !2490
  %5222 = load i32, i32* @x.35
  %5223 = load i32, i32* @y.36
  %5224 = sub i32 %5222, 1
  %5225 = mul i32 %5222, %5224
  %5226 = urem i32 %5225, 2
  %5227 = icmp eq i32 %5226, 0
  %5228 = icmp slt i32 %5223, 10
  %5229 = or i1 %5227, %5228
  br i1 %5229, label %originalBBpart21743, label %originalBB1741alteredBB

originalBBpart21743:                              ; preds = %originalBB1741
  br label %5230, !dbg !2490

5230:                                             ; preds = %originalBBpart21743, %originalBBpart21739
  %5231 = load i32, i32* @x.35
  %5232 = load i32, i32* @y.36
  %5233 = sub i32 %5231, 1
  %5234 = mul i32 %5231, %5233
  %5235 = urem i32 %5234, 2
  %5236 = icmp eq i32 %5235, 0
  %5237 = icmp slt i32 %5232, 10
  %5238 = or i1 %5236, %5237
  br i1 %5238, label %originalBB1745, label %originalBB1745alteredBB

originalBB1745:                                   ; preds = %5230, %originalBB1745alteredBB
  %5239 = load i64, i64* %29, align 8, !dbg !2493
  %5240 = add i64 %5239, 1, !dbg !2493
  store i64 %5240, i64* %29, align 8, !dbg !2493
  %5241 = load i32, i32* @x.35
  %5242 = load i32, i32* @y.36
  %5243 = sub i32 %5241, 1
  %5244 = mul i32 %5241, %5243
  %5245 = urem i32 %5244, 2
  %5246 = icmp eq i32 %5245, 0
  %5247 = icmp slt i32 %5242, 10
  %5248 = or i1 %5246, %5247
  br i1 %5248, label %originalBBpart21761, label %originalBB1745alteredBB

originalBBpart21761:                              ; preds = %originalBB1745
  br label %5249, !dbg !2493

5249:                                             ; preds = %originalBBpart21761
  %5250 = load i32, i32* @x.35
  %5251 = load i32, i32* @y.36
  %5252 = sub i32 %5250, 1
  %5253 = mul i32 %5250, %5252
  %5254 = urem i32 %5253, 2
  %5255 = icmp eq i32 %5254, 0
  %5256 = icmp slt i32 %5251, 10
  %5257 = or i1 %5255, %5256
  br i1 %5257, label %originalBB1763, label %originalBB1763alteredBB

originalBB1763:                                   ; preds = %5249, %originalBB1763alteredBB
  store i8 0, i8* %41, align 1, !dbg !2494
  %5258 = load i32, i32* @x.35
  %5259 = load i32, i32* @y.36
  %5260 = sub i32 %5258, 1
  %5261 = mul i32 %5258, %5260
  %5262 = urem i32 %5261, 2
  %5263 = icmp eq i32 %5262, 0
  %5264 = icmp slt i32 %5259, 10
  %5265 = or i1 %5263, %5264
  br i1 %5265, label %originalBBpart21765, label %originalBB1763alteredBB

originalBBpart21765:                              ; preds = %originalBB1763
  br label %5266, !dbg !2495

5266:                                             ; preds = %originalBBpart21765, %originalBBpart21731
  %5267 = load i32, i32* @x.35
  %5268 = load i32, i32* @y.36
  %5269 = sub i32 %5267, 1
  %5270 = mul i32 %5267, %5269
  %5271 = urem i32 %5270, 2
  %5272 = icmp eq i32 %5271, 0
  %5273 = icmp slt i32 %5268, 10
  %5274 = or i1 %5272, %5273
  br i1 %5274, label %originalBB1767, label %originalBB1767alteredBB

originalBB1767:                                   ; preds = %5266, %originalBB1767alteredBB
  %5275 = load i32, i32* @x.35
  %5276 = load i32, i32* @y.36
  %5277 = sub i32 %5275, 1
  %5278 = mul i32 %5275, %5277
  %5279 = urem i32 %5278, 2
  %5280 = icmp eq i32 %5279, 0
  %5281 = icmp slt i32 %5276, 10
  %5282 = or i1 %5280, %5281
  br i1 %5282, label %originalBBpart21769, label %originalBB1767alteredBB

originalBBpart21769:                              ; preds = %originalBB1767
  br label %5283

5283:                                             ; preds = %originalBBpart21769, %originalBBpart21727
  %5284 = load i32, i32* @x.35
  %5285 = load i32, i32* @y.36
  %5286 = sub i32 %5284, 1
  %5287 = mul i32 %5284, %5286
  %5288 = urem i32 %5287, 2
  %5289 = icmp eq i32 %5288, 0
  %5290 = icmp slt i32 %5285, 10
  %5291 = or i1 %5289, %5290
  br i1 %5291, label %originalBB1771, label %originalBB1771alteredBB

originalBB1771:                                   ; preds = %5283, %originalBB1771alteredBB
  %5292 = load i64, i64* %50, align 8, !dbg !2496
  %5293 = load i64, i64* %28, align 8, !dbg !2498
  %5294 = add i64 %5293, 1, !dbg !2499
  %5295 = icmp ule i64 %5292, %5294, !dbg !2500
  %5296 = load i32, i32* @x.35
  %5297 = load i32, i32* @y.36
  %5298 = sub i32 %5296, 1
  %5299 = mul i32 %5296, %5298
  %5300 = urem i32 %5299, 2
  %5301 = icmp eq i32 %5300, 0
  %5302 = icmp slt i32 %5297, 10
  %5303 = or i1 %5301, %5302
  br i1 %5303, label %originalBBpart21785, label %originalBB1771alteredBB

originalBBpart21785:                              ; preds = %originalBB1771
  br i1 %5295, label %5304, label %5321, !dbg !2501

5304:                                             ; preds = %originalBBpart21785
  %5305 = load i32, i32* @x.35
  %5306 = load i32, i32* @y.36
  %5307 = sub i32 %5305, 1
  %5308 = mul i32 %5305, %5307
  %5309 = urem i32 %5308, 2
  %5310 = icmp eq i32 %5309, 0
  %5311 = icmp slt i32 %5306, 10
  %5312 = or i1 %5310, %5311
  br i1 %5312, label %originalBB1787, label %originalBB1787alteredBB

originalBB1787:                                   ; preds = %5304, %originalBB1787alteredBB
  %5313 = load i32, i32* @x.35
  %5314 = load i32, i32* @y.36
  %5315 = sub i32 %5313, 1
  %5316 = mul i32 %5313, %5315
  %5317 = urem i32 %5316, 2
  %5318 = icmp eq i32 %5317, 0
  %5319 = icmp slt i32 %5314, 10
  %5320 = or i1 %5318, %5319
  br i1 %5320, label %originalBBpart21789, label %originalBB1787alteredBB

originalBBpart21789:                              ; preds = %originalBB1787
  br label %5661, !dbg !2502

5321:                                             ; preds = %originalBBpart21785
  %5322 = load i32, i32* @x.35
  %5323 = load i32, i32* @y.36
  %5324 = sub i32 %5322, 1
  %5325 = mul i32 %5322, %5324
  %5326 = urem i32 %5325, 2
  %5327 = icmp eq i32 %5326, 0
  %5328 = icmp slt i32 %5323, 10
  %5329 = or i1 %5327, %5328
  br i1 %5329, label %originalBB1791, label %originalBB1791alteredBB

originalBB1791:                                   ; preds = %5321, %originalBB1791alteredBB
  %5330 = load i32, i32* @x.35
  %5331 = load i32, i32* @y.36
  %5332 = sub i32 %5330, 1
  %5333 = mul i32 %5330, %5332
  %5334 = urem i32 %5333, 2
  %5335 = icmp eq i32 %5334, 0
  %5336 = icmp slt i32 %5331, 10
  %5337 = or i1 %5335, %5336
  br i1 %5337, label %originalBBpart21793, label %originalBB1791alteredBB

originalBBpart21793:                              ; preds = %originalBB1791
  br label %5338, !dbg !2503

5338:                                             ; preds = %originalBBpart21793
  %5339 = load i32, i32* @x.35
  %5340 = load i32, i32* @y.36
  %5341 = sub i32 %5339, 1
  %5342 = mul i32 %5339, %5341
  %5343 = urem i32 %5342, 2
  %5344 = icmp eq i32 %5343, 0
  %5345 = icmp slt i32 %5340, 10
  %5346 = or i1 %5344, %5345
  br i1 %5346, label %originalBB1795, label %originalBB1795alteredBB

originalBB1795:                                   ; preds = %5338, %originalBB1795alteredBB
  %5347 = load i8, i8* %36, align 1, !dbg !2504
  %5348 = trunc i8 %5347 to i1, !dbg !2504
  %5349 = load i32, i32* @x.35
  %5350 = load i32, i32* @y.36
  %5351 = sub i32 %5349, 1
  %5352 = mul i32 %5349, %5351
  %5353 = urem i32 %5352, 2
  %5354 = icmp eq i32 %5353, 0
  %5355 = icmp slt i32 %5350, 10
  %5356 = or i1 %5354, %5355
  br i1 %5356, label %originalBBpart21797, label %originalBB1795alteredBB

originalBBpart21797:                              ; preds = %originalBB1795
  br i1 %5348, label %5357, label %5545, !dbg !2504

5357:                                             ; preds = %originalBBpart21797
  %5358 = load i32, i32* @x.35
  %5359 = load i32, i32* @y.36
  %5360 = sub i32 %5358, 1
  %5361 = mul i32 %5358, %5360
  %5362 = urem i32 %5361, 2
  %5363 = icmp eq i32 %5362, 0
  %5364 = icmp slt i32 %5359, 10
  %5365 = or i1 %5363, %5364
  br i1 %5365, label %originalBB1799, label %originalBB1799alteredBB

originalBB1799:                                   ; preds = %5357, %originalBB1799alteredBB
  %5366 = load i8, i8* %42, align 1, !dbg !2504
  %5367 = trunc i8 %5366 to i1, !dbg !2504
  %5368 = load i32, i32* @x.35
  %5369 = load i32, i32* @y.36
  %5370 = sub i32 %5368, 1
  %5371 = mul i32 %5368, %5370
  %5372 = urem i32 %5371, 2
  %5373 = icmp eq i32 %5372, 0
  %5374 = icmp slt i32 %5369, 10
  %5375 = or i1 %5373, %5374
  br i1 %5375, label %originalBBpart21801, label %originalBB1799alteredBB

originalBBpart21801:                              ; preds = %originalBB1799
  br i1 %5367, label %5545, label %5376, !dbg !2507

5376:                                             ; preds = %originalBBpart21801
  %5377 = load i32, i32* @x.35
  %5378 = load i32, i32* @y.36
  %5379 = sub i32 %5377, 1
  %5380 = mul i32 %5377, %5379
  %5381 = urem i32 %5380, 2
  %5382 = icmp eq i32 %5381, 0
  %5383 = icmp slt i32 %5378, 10
  %5384 = or i1 %5382, %5383
  br i1 %5384, label %originalBB1803, label %originalBB1803alteredBB

originalBB1803:                                   ; preds = %5376, %originalBB1803alteredBB
  %5385 = load i32, i32* @x.35
  %5386 = load i32, i32* @y.36
  %5387 = sub i32 %5385, 1
  %5388 = mul i32 %5385, %5387
  %5389 = urem i32 %5388, 2
  %5390 = icmp eq i32 %5389, 0
  %5391 = icmp slt i32 %5386, 10
  %5392 = or i1 %5390, %5391
  br i1 %5392, label %originalBBpart21805, label %originalBB1803alteredBB

originalBBpart21805:                              ; preds = %originalBB1803
  br label %5393, !dbg !2508

5393:                                             ; preds = %originalBBpart21805
  %5394 = load i32, i32* @x.35
  %5395 = load i32, i32* @y.36
  %5396 = sub i32 %5394, 1
  %5397 = mul i32 %5394, %5396
  %5398 = urem i32 %5397, 2
  %5399 = icmp eq i32 %5398, 0
  %5400 = icmp slt i32 %5395, 10
  %5401 = or i1 %5399, %5400
  br i1 %5401, label %originalBB1807, label %originalBB1807alteredBB

originalBB1807:                                   ; preds = %5393, %originalBB1807alteredBB
  %5402 = load i64, i64* %29, align 8, !dbg !2510
  %5403 = load i64, i64* %20, align 8, !dbg !2510
  %5404 = icmp ult i64 %5402, %5403, !dbg !2510
  %5405 = load i32, i32* @x.35
  %5406 = load i32, i32* @y.36
  %5407 = sub i32 %5405, 1
  %5408 = mul i32 %5405, %5407
  %5409 = urem i32 %5408, 2
  %5410 = icmp eq i32 %5409, 0
  %5411 = icmp slt i32 %5406, 10
  %5412 = or i1 %5410, %5411
  br i1 %5412, label %originalBBpart21809, label %originalBB1807alteredBB

originalBBpart21809:                              ; preds = %originalBB1807
  br i1 %5404, label %5413, label %5433, !dbg !2513

5413:                                             ; preds = %originalBBpart21809
  %5414 = load i32, i32* @x.35
  %5415 = load i32, i32* @y.36
  %5416 = sub i32 %5414, 1
  %5417 = mul i32 %5414, %5416
  %5418 = urem i32 %5417, 2
  %5419 = icmp eq i32 %5418, 0
  %5420 = icmp slt i32 %5415, 10
  %5421 = or i1 %5419, %5420
  br i1 %5421, label %originalBB1811, label %originalBB1811alteredBB

originalBB1811:                                   ; preds = %5413, %originalBB1811alteredBB
  %5422 = load i8*, i8** %19, align 8, !dbg !2510
  %5423 = load i64, i64* %29, align 8, !dbg !2510
  %5424 = getelementptr inbounds i8, i8* %5422, i64 %5423, !dbg !2510
  store i8 39, i8* %5424, align 1, !dbg !2510
  %5425 = load i32, i32* @x.35
  %5426 = load i32, i32* @y.36
  %5427 = sub i32 %5425, 1
  %5428 = mul i32 %5425, %5427
  %5429 = urem i32 %5428, 2
  %5430 = icmp eq i32 %5429, 0
  %5431 = icmp slt i32 %5426, 10
  %5432 = or i1 %5430, %5431
  br i1 %5432, label %originalBBpart21813, label %originalBB1811alteredBB

originalBBpart21813:                              ; preds = %originalBB1811
  br label %5433, !dbg !2510

5433:                                             ; preds = %originalBBpart21813, %originalBBpart21809
  %5434 = load i32, i32* @x.35
  %5435 = load i32, i32* @y.36
  %5436 = sub i32 %5434, 1
  %5437 = mul i32 %5434, %5436
  %5438 = urem i32 %5437, 2
  %5439 = icmp eq i32 %5438, 0
  %5440 = icmp slt i32 %5435, 10
  %5441 = or i1 %5439, %5440
  br i1 %5441, label %originalBB1815, label %originalBB1815alteredBB

originalBB1815:                                   ; preds = %5433, %originalBB1815alteredBB
  %5442 = load i64, i64* %29, align 8, !dbg !2513
  %5443 = add i64 %5442, 1, !dbg !2513
  store i64 %5443, i64* %29, align 8, !dbg !2513
  %5444 = load i32, i32* @x.35
  %5445 = load i32, i32* @y.36
  %5446 = sub i32 %5444, 1
  %5447 = mul i32 %5444, %5446
  %5448 = urem i32 %5447, 2
  %5449 = icmp eq i32 %5448, 0
  %5450 = icmp slt i32 %5445, 10
  %5451 = or i1 %5449, %5450
  br i1 %5451, label %originalBBpart21820, label %originalBB1815alteredBB

originalBBpart21820:                              ; preds = %originalBB1815
  br label %5452, !dbg !2513

5452:                                             ; preds = %originalBBpart21820
  %5453 = load i32, i32* @x.35
  %5454 = load i32, i32* @y.36
  %5455 = sub i32 %5453, 1
  %5456 = mul i32 %5453, %5455
  %5457 = urem i32 %5456, 2
  %5458 = icmp eq i32 %5457, 0
  %5459 = icmp slt i32 %5454, 10
  %5460 = or i1 %5458, %5459
  br i1 %5460, label %originalBB1822, label %originalBB1822alteredBB

originalBB1822:                                   ; preds = %5452, %originalBB1822alteredBB
  %5461 = load i32, i32* @x.35
  %5462 = load i32, i32* @y.36
  %5463 = sub i32 %5461, 1
  %5464 = mul i32 %5461, %5463
  %5465 = urem i32 %5464, 2
  %5466 = icmp eq i32 %5465, 0
  %5467 = icmp slt i32 %5462, 10
  %5468 = or i1 %5466, %5467
  br i1 %5468, label %originalBBpart21824, label %originalBB1822alteredBB

originalBBpart21824:                              ; preds = %originalBB1822
  br label %5469, !dbg !2508

5469:                                             ; preds = %originalBBpart21824
  %5470 = load i32, i32* @x.35
  %5471 = load i32, i32* @y.36
  %5472 = sub i32 %5470, 1
  %5473 = mul i32 %5470, %5472
  %5474 = urem i32 %5473, 2
  %5475 = icmp eq i32 %5474, 0
  %5476 = icmp slt i32 %5471, 10
  %5477 = or i1 %5475, %5476
  br i1 %5477, label %originalBB1826, label %originalBB1826alteredBB

originalBB1826:                                   ; preds = %5469, %originalBB1826alteredBB
  %5478 = load i64, i64* %29, align 8, !dbg !2514
  %5479 = load i64, i64* %20, align 8, !dbg !2514
  %5480 = icmp ult i64 %5478, %5479, !dbg !2514
  %5481 = load i32, i32* @x.35
  %5482 = load i32, i32* @y.36
  %5483 = sub i32 %5481, 1
  %5484 = mul i32 %5481, %5483
  %5485 = urem i32 %5484, 2
  %5486 = icmp eq i32 %5485, 0
  %5487 = icmp slt i32 %5482, 10
  %5488 = or i1 %5486, %5487
  br i1 %5488, label %originalBBpart21828, label %originalBB1826alteredBB

originalBBpart21828:                              ; preds = %originalBB1826
  br i1 %5480, label %5489, label %5509, !dbg !2517

5489:                                             ; preds = %originalBBpart21828
  %5490 = load i32, i32* @x.35
  %5491 = load i32, i32* @y.36
  %5492 = sub i32 %5490, 1
  %5493 = mul i32 %5490, %5492
  %5494 = urem i32 %5493, 2
  %5495 = icmp eq i32 %5494, 0
  %5496 = icmp slt i32 %5491, 10
  %5497 = or i1 %5495, %5496
  br i1 %5497, label %originalBB1830, label %originalBB1830alteredBB

originalBB1830:                                   ; preds = %5489, %originalBB1830alteredBB
  %5498 = load i8*, i8** %19, align 8, !dbg !2514
  %5499 = load i64, i64* %29, align 8, !dbg !2514
  %5500 = getelementptr inbounds i8, i8* %5498, i64 %5499, !dbg !2514
  store i8 39, i8* %5500, align 1, !dbg !2514
  %5501 = load i32, i32* @x.35
  %5502 = load i32, i32* @y.36
  %5503 = sub i32 %5501, 1
  %5504 = mul i32 %5501, %5503
  %5505 = urem i32 %5504, 2
  %5506 = icmp eq i32 %5505, 0
  %5507 = icmp slt i32 %5502, 10
  %5508 = or i1 %5506, %5507
  br i1 %5508, label %originalBBpart21832, label %originalBB1830alteredBB

originalBBpart21832:                              ; preds = %originalBB1830
  br label %5509, !dbg !2514

5509:                                             ; preds = %originalBBpart21832, %originalBBpart21828
  %5510 = load i32, i32* @x.35
  %5511 = load i32, i32* @y.36
  %5512 = sub i32 %5510, 1
  %5513 = mul i32 %5510, %5512
  %5514 = urem i32 %5513, 2
  %5515 = icmp eq i32 %5514, 0
  %5516 = icmp slt i32 %5511, 10
  %5517 = or i1 %5515, %5516
  br i1 %5517, label %originalBB1834, label %originalBB1834alteredBB

originalBB1834:                                   ; preds = %5509, %originalBB1834alteredBB
  %5518 = load i64, i64* %29, align 8, !dbg !2517
  %5519 = add i64 %5518, 1, !dbg !2517
  store i64 %5519, i64* %29, align 8, !dbg !2517
  %5520 = load i32, i32* @x.35
  %5521 = load i32, i32* @y.36
  %5522 = sub i32 %5520, 1
  %5523 = mul i32 %5520, %5522
  %5524 = urem i32 %5523, 2
  %5525 = icmp eq i32 %5524, 0
  %5526 = icmp slt i32 %5521, 10
  %5527 = or i1 %5525, %5526
  br i1 %5527, label %originalBBpart21836, label %originalBB1834alteredBB

originalBBpart21836:                              ; preds = %originalBB1834
  br label %5528, !dbg !2517

5528:                                             ; preds = %originalBBpart21836
  %5529 = load i32, i32* @x.35
  %5530 = load i32, i32* @y.36
  %5531 = sub i32 %5529, 1
  %5532 = mul i32 %5529, %5531
  %5533 = urem i32 %5532, 2
  %5534 = icmp eq i32 %5533, 0
  %5535 = icmp slt i32 %5530, 10
  %5536 = or i1 %5534, %5535
  br i1 %5536, label %originalBB1838, label %originalBB1838alteredBB

originalBB1838:                                   ; preds = %5528, %originalBB1838alteredBB
  store i8 0, i8* %36, align 1, !dbg !2508
  %5537 = load i32, i32* @x.35
  %5538 = load i32, i32* @y.36
  %5539 = sub i32 %5537, 1
  %5540 = mul i32 %5537, %5539
  %5541 = urem i32 %5540, 2
  %5542 = icmp eq i32 %5541, 0
  %5543 = icmp slt i32 %5538, 10
  %5544 = or i1 %5542, %5543
  br i1 %5544, label %originalBBpart21840, label %originalBB1838alteredBB

originalBBpart21840:                              ; preds = %originalBB1838
  br label %5545, !dbg !2508

5545:                                             ; preds = %originalBBpart21840, %originalBBpart21801, %originalBBpart21797
  %5546 = load i32, i32* @x.35
  %5547 = load i32, i32* @y.36
  %5548 = sub i32 %5546, 1
  %5549 = mul i32 %5546, %5548
  %5550 = urem i32 %5549, 2
  %5551 = icmp eq i32 %5550, 0
  %5552 = icmp slt i32 %5547, 10
  %5553 = or i1 %5551, %5552
  br i1 %5553, label %originalBB1842, label %originalBB1842alteredBB

originalBB1842:                                   ; preds = %5545, %originalBB1842alteredBB
  %5554 = load i32, i32* @x.35
  %5555 = load i32, i32* @y.36
  %5556 = sub i32 %5554, 1
  %5557 = mul i32 %5554, %5556
  %5558 = urem i32 %5557, 2
  %5559 = icmp eq i32 %5558, 0
  %5560 = icmp slt i32 %5555, 10
  %5561 = or i1 %5559, %5560
  br i1 %5561, label %originalBBpart21844, label %originalBB1842alteredBB

originalBBpart21844:                              ; preds = %originalBB1842
  br label %5562, !dbg !2507

5562:                                             ; preds = %originalBBpart21844
  %5563 = load i32, i32* @x.35
  %5564 = load i32, i32* @y.36
  %5565 = sub i32 %5563, 1
  %5566 = mul i32 %5563, %5565
  %5567 = urem i32 %5566, 2
  %5568 = icmp eq i32 %5567, 0
  %5569 = icmp slt i32 %5564, 10
  %5570 = or i1 %5568, %5569
  br i1 %5570, label %originalBB1846, label %originalBB1846alteredBB

originalBB1846:                                   ; preds = %5562, %originalBB1846alteredBB
  %5571 = load i32, i32* @x.35
  %5572 = load i32, i32* @y.36
  %5573 = sub i32 %5571, 1
  %5574 = mul i32 %5571, %5573
  %5575 = urem i32 %5574, 2
  %5576 = icmp eq i32 %5575, 0
  %5577 = icmp slt i32 %5572, 10
  %5578 = or i1 %5576, %5577
  br i1 %5578, label %originalBBpart21848, label %originalBB1846alteredBB

originalBBpart21848:                              ; preds = %originalBB1846
  br label %5579, !dbg !2518

5579:                                             ; preds = %originalBBpart21848
  %5580 = load i32, i32* @x.35
  %5581 = load i32, i32* @y.36
  %5582 = sub i32 %5580, 1
  %5583 = mul i32 %5580, %5582
  %5584 = urem i32 %5583, 2
  %5585 = icmp eq i32 %5584, 0
  %5586 = icmp slt i32 %5581, 10
  %5587 = or i1 %5585, %5586
  br i1 %5587, label %originalBB1850, label %originalBB1850alteredBB

originalBB1850:                                   ; preds = %5579, %originalBB1850alteredBB
  %5588 = load i64, i64* %29, align 8, !dbg !2519
  %5589 = load i64, i64* %20, align 8, !dbg !2519
  %5590 = icmp ult i64 %5588, %5589, !dbg !2519
  %5591 = load i32, i32* @x.35
  %5592 = load i32, i32* @y.36
  %5593 = sub i32 %5591, 1
  %5594 = mul i32 %5591, %5593
  %5595 = urem i32 %5594, 2
  %5596 = icmp eq i32 %5595, 0
  %5597 = icmp slt i32 %5592, 10
  %5598 = or i1 %5596, %5597
  br i1 %5598, label %originalBBpart21852, label %originalBB1850alteredBB

originalBBpart21852:                              ; preds = %originalBB1850
  br i1 %5590, label %5599, label %5620, !dbg !2522

5599:                                             ; preds = %originalBBpart21852
  %5600 = load i32, i32* @x.35
  %5601 = load i32, i32* @y.36
  %5602 = sub i32 %5600, 1
  %5603 = mul i32 %5600, %5602
  %5604 = urem i32 %5603, 2
  %5605 = icmp eq i32 %5604, 0
  %5606 = icmp slt i32 %5601, 10
  %5607 = or i1 %5605, %5606
  br i1 %5607, label %originalBB1854, label %originalBB1854alteredBB

originalBB1854:                                   ; preds = %5599, %originalBB1854alteredBB
  %5608 = load i8, i8* %39, align 1, !dbg !2519
  %5609 = load i8*, i8** %19, align 8, !dbg !2519
  %5610 = load i64, i64* %29, align 8, !dbg !2519
  %5611 = getelementptr inbounds i8, i8* %5609, i64 %5610, !dbg !2519
  store i8 %5608, i8* %5611, align 1, !dbg !2519
  %5612 = load i32, i32* @x.35
  %5613 = load i32, i32* @y.36
  %5614 = sub i32 %5612, 1
  %5615 = mul i32 %5612, %5614
  %5616 = urem i32 %5615, 2
  %5617 = icmp eq i32 %5616, 0
  %5618 = icmp slt i32 %5613, 10
  %5619 = or i1 %5617, %5618
  br i1 %5619, label %originalBBpart21856, label %originalBB1854alteredBB

originalBBpart21856:                              ; preds = %originalBB1854
  br label %5620, !dbg !2519

5620:                                             ; preds = %originalBBpart21856, %originalBBpart21852
  %5621 = load i32, i32* @x.35
  %5622 = load i32, i32* @y.36
  %5623 = sub i32 %5621, 1
  %5624 = mul i32 %5621, %5623
  %5625 = urem i32 %5624, 2
  %5626 = icmp eq i32 %5625, 0
  %5627 = icmp slt i32 %5622, 10
  %5628 = or i1 %5626, %5627
  br i1 %5628, label %originalBB1858, label %originalBB1858alteredBB

originalBB1858:                                   ; preds = %5620, %originalBB1858alteredBB
  %5629 = load i64, i64* %29, align 8, !dbg !2522
  %5630 = add i64 %5629, 1, !dbg !2522
  store i64 %5630, i64* %29, align 8, !dbg !2522
  %5631 = load i32, i32* @x.35
  %5632 = load i32, i32* @y.36
  %5633 = sub i32 %5631, 1
  %5634 = mul i32 %5631, %5633
  %5635 = urem i32 %5634, 2
  %5636 = icmp eq i32 %5635, 0
  %5637 = icmp slt i32 %5632, 10
  %5638 = or i1 %5636, %5637
  br i1 %5638, label %originalBBpart21866, label %originalBB1858alteredBB

originalBBpart21866:                              ; preds = %originalBB1858
  br label %5639, !dbg !2522

5639:                                             ; preds = %originalBBpart21866
  %5640 = load i32, i32* @x.35
  %5641 = load i32, i32* @y.36
  %5642 = sub i32 %5640, 1
  %5643 = mul i32 %5640, %5642
  %5644 = urem i32 %5643, 2
  %5645 = icmp eq i32 %5644, 0
  %5646 = icmp slt i32 %5641, 10
  %5647 = or i1 %5645, %5646
  br i1 %5647, label %originalBB1868, label %originalBB1868alteredBB

originalBB1868:                                   ; preds = %5639, %originalBB1868alteredBB
  %5648 = load i8*, i8** %21, align 8, !dbg !2523
  %5649 = load i64, i64* %28, align 8, !dbg !2524
  %5650 = add i64 %5649, 1, !dbg !2524
  store i64 %5650, i64* %28, align 8, !dbg !2524
  %5651 = getelementptr inbounds i8, i8* %5648, i64 %5650, !dbg !2523
  %5652 = load i8, i8* %5651, align 1, !dbg !2523
  store i8 %5652, i8* %39, align 1, !dbg !2525
  %5653 = load i32, i32* @x.35
  %5654 = load i32, i32* @y.36
  %5655 = sub i32 %5653, 1
  %5656 = mul i32 %5653, %5655
  %5657 = urem i32 %5656, 2
  %5658 = icmp eq i32 %5657, 0
  %5659 = icmp slt i32 %5654, 10
  %5660 = or i1 %5658, %5659
  br i1 %5660, label %originalBBpart21875, label %originalBB1868alteredBB

originalBBpart21875:                              ; preds = %originalBB1868
  br label %4502, !dbg !2526, !llvm.loop !2527

5661:                                             ; preds = %originalBBpart21789
  %5662 = load i32, i32* @x.35
  %5663 = load i32, i32* @y.36
  %5664 = sub i32 %5662, 1
  %5665 = mul i32 %5662, %5664
  %5666 = urem i32 %5665, 2
  %5667 = icmp eq i32 %5666, 0
  %5668 = icmp slt i32 %5663, 10
  %5669 = or i1 %5667, %5668
  br i1 %5669, label %originalBB1877, label %originalBB1877alteredBB

originalBB1877:                                   ; preds = %5661, %originalBB1877alteredBB
  %5670 = load i32, i32* @x.35
  %5671 = load i32, i32* @y.36
  %5672 = sub i32 %5670, 1
  %5673 = mul i32 %5670, %5672
  %5674 = urem i32 %5673, 2
  %5675 = icmp eq i32 %5674, 0
  %5676 = icmp slt i32 %5671, 10
  %5677 = or i1 %5675, %5676
  br i1 %5677, label %originalBBpart21879, label %originalBB1877alteredBB

originalBBpart21879:                              ; preds = %originalBB1877
  br label %6300, !dbg !2530

5678:                                             ; preds = %originalBBpart21494, %originalBBpart21490
  %5679 = load i32, i32* @x.35
  %5680 = load i32, i32* @y.36
  %5681 = sub i32 %5679, 1
  %5682 = mul i32 %5679, %5681
  %5683 = urem i32 %5682, 2
  %5684 = icmp eq i32 %5683, 0
  %5685 = icmp slt i32 %5680, 10
  %5686 = or i1 %5684, %5685
  br i1 %5686, label %originalBB1881, label %originalBB1881alteredBB

originalBB1881:                                   ; preds = %5678, %originalBB1881alteredBB
  %5687 = load i32, i32* @x.35
  %5688 = load i32, i32* @y.36
  %5689 = sub i32 %5687, 1
  %5690 = mul i32 %5687, %5689
  %5691 = urem i32 %5690, 2
  %5692 = icmp eq i32 %5691, 0
  %5693 = icmp slt i32 %5688, 10
  %5694 = or i1 %5692, %5693
  br i1 %5694, label %originalBBpart21883, label %originalBB1881alteredBB

originalBBpart21883:                              ; preds = %originalBB1881
  br label %5695, !dbg !2531

5695:                                             ; preds = %originalBBpart21883, %originalBBpart21245, %originalBBpart21241, %originalBBpart21140, %originalBBpart21116, %originalBBpart21104, %originalBBpart21088, %originalBBpart2996, %originalBBpart2584
  %5696 = load i32, i32* @x.35
  %5697 = load i32, i32* @y.36
  %5698 = sub i32 %5696, 1
  %5699 = mul i32 %5696, %5698
  %5700 = urem i32 %5699, 2
  %5701 = icmp eq i32 %5700, 0
  %5702 = icmp slt i32 %5697, 10
  %5703 = or i1 %5701, %5702
  br i1 %5703, label %originalBB1885, label %originalBB1885alteredBB

originalBB1885:                                   ; preds = %5695, %originalBB1885alteredBB
  %5704 = load i8, i8* %33, align 1, !dbg !2532
  %5705 = trunc i8 %5704 to i1, !dbg !2532
  %5706 = load i32, i32* @x.35
  %5707 = load i32, i32* @y.36
  %5708 = sub i32 %5706, 1
  %5709 = mul i32 %5706, %5708
  %5710 = urem i32 %5709, 2
  %5711 = icmp eq i32 %5710, 0
  %5712 = icmp slt i32 %5707, 10
  %5713 = or i1 %5711, %5712
  br i1 %5713, label %originalBBpart21887, label %originalBB1885alteredBB

originalBBpart21887:                              ; preds = %originalBB1885
  br i1 %5705, label %5714, label %5733, !dbg !2534

5714:                                             ; preds = %originalBBpart21887
  %5715 = load i32, i32* @x.35
  %5716 = load i32, i32* @y.36
  %5717 = sub i32 %5715, 1
  %5718 = mul i32 %5715, %5717
  %5719 = urem i32 %5718, 2
  %5720 = icmp eq i32 %5719, 0
  %5721 = icmp slt i32 %5716, 10
  %5722 = or i1 %5720, %5721
  br i1 %5722, label %originalBB1889, label %originalBB1889alteredBB

originalBB1889:                                   ; preds = %5714, %originalBB1889alteredBB
  %5723 = load i32, i32* %23, align 4, !dbg !2535
  %5724 = icmp ne i32 %5723, 2, !dbg !2536
  %5725 = load i32, i32* @x.35
  %5726 = load i32, i32* @y.36
  %5727 = sub i32 %5725, 1
  %5728 = mul i32 %5725, %5727
  %5729 = urem i32 %5728, 2
  %5730 = icmp eq i32 %5729, 0
  %5731 = icmp slt i32 %5726, 10
  %5732 = or i1 %5730, %5731
  br i1 %5732, label %originalBBpart21891, label %originalBB1889alteredBB

originalBBpart21891:                              ; preds = %originalBB1889
  br i1 %5724, label %5752, label %5733, !dbg !2537

5733:                                             ; preds = %originalBBpart21891, %originalBBpart21887
  %5734 = load i32, i32* @x.35
  %5735 = load i32, i32* @y.36
  %5736 = sub i32 %5734, 1
  %5737 = mul i32 %5734, %5736
  %5738 = urem i32 %5737, 2
  %5739 = icmp eq i32 %5738, 0
  %5740 = icmp slt i32 %5735, 10
  %5741 = or i1 %5739, %5740
  br i1 %5741, label %originalBB1893, label %originalBB1893alteredBB

originalBB1893:                                   ; preds = %5733, %originalBB1893alteredBB
  %5742 = load i8, i8* %35, align 1, !dbg !2538
  %5743 = trunc i8 %5742 to i1, !dbg !2538
  %5744 = load i32, i32* @x.35
  %5745 = load i32, i32* @y.36
  %5746 = sub i32 %5744, 1
  %5747 = mul i32 %5744, %5746
  %5748 = urem i32 %5747, 2
  %5749 = icmp eq i32 %5748, 0
  %5750 = icmp slt i32 %5745, 10
  %5751 = or i1 %5749, %5750
  br i1 %5751, label %originalBBpart21895, label %originalBB1893alteredBB

originalBBpart21895:                              ; preds = %originalBB1893
  br i1 %5743, label %5752, label %5801, !dbg !2539

5752:                                             ; preds = %originalBBpart21895, %originalBBpart21891
  %5753 = load i32, i32* @x.35
  %5754 = load i32, i32* @y.36
  %5755 = sub i32 %5753, 1
  %5756 = mul i32 %5753, %5755
  %5757 = urem i32 %5756, 2
  %5758 = icmp eq i32 %5757, 0
  %5759 = icmp slt i32 %5754, 10
  %5760 = or i1 %5758, %5759
  br i1 %5760, label %originalBB1897, label %originalBB1897alteredBB

originalBB1897:                                   ; preds = %5752, %originalBB1897alteredBB
  %5761 = load i32*, i32** %25, align 8, !dbg !2540
  %5762 = icmp ne i32* %5761, null, !dbg !2540
  %5763 = load i32, i32* @x.35
  %5764 = load i32, i32* @y.36
  %5765 = sub i32 %5763, 1
  %5766 = mul i32 %5763, %5765
  %5767 = urem i32 %5766, 2
  %5768 = icmp eq i32 %5767, 0
  %5769 = icmp slt i32 %5764, 10
  %5770 = or i1 %5768, %5769
  br i1 %5770, label %originalBBpart21899, label %originalBB1897alteredBB

originalBBpart21899:                              ; preds = %originalBB1897
  br i1 %5762, label %5771, label %5801, !dbg !2541

5771:                                             ; preds = %originalBBpart21899
  %5772 = load i32, i32* @x.35
  %5773 = load i32, i32* @y.36
  %5774 = sub i32 %5772, 1
  %5775 = mul i32 %5772, %5774
  %5776 = urem i32 %5775, 2
  %5777 = icmp eq i32 %5776, 0
  %5778 = icmp slt i32 %5773, 10
  %5779 = or i1 %5777, %5778
  br i1 %5779, label %originalBB1901, label %originalBB1901alteredBB

originalBB1901:                                   ; preds = %5771, %originalBB1901alteredBB
  %5780 = load i32*, i32** %25, align 8, !dbg !2542
  %5781 = load i8, i8* %39, align 1, !dbg !2543
  %5782 = zext i8 %5781 to i64, !dbg !2543
  %5783 = udiv i64 %5782, 32, !dbg !2544
  %5784 = getelementptr inbounds i32, i32* %5780, i64 %5783, !dbg !2542
  %5785 = load i32, i32* %5784, align 4, !dbg !2542
  %5786 = load i8, i8* %39, align 1, !dbg !2545
  %5787 = zext i8 %5786 to i64, !dbg !2545
  %5788 = urem i64 %5787, 32, !dbg !2546
  %5789 = trunc i64 %5788 to i32, !dbg !2547
  %5790 = lshr i32 %5785, %5789, !dbg !2547
  %5791 = and i32 %5790, 1, !dbg !2548
  %5792 = icmp ne i32 %5791, 0, !dbg !2548
  %5793 = load i32, i32* @x.35
  %5794 = load i32, i32* @y.36
  %5795 = sub i32 %5793, 1
  %5796 = mul i32 %5793, %5795
  %5797 = urem i32 %5796, 2
  %5798 = icmp eq i32 %5797, 0
  %5799 = icmp slt i32 %5794, 10
  %5800 = or i1 %5798, %5799
  br i1 %5800, label %originalBBpart21940, label %originalBB1901alteredBB

originalBBpart21940:                              ; preds = %originalBB1901
  br i1 %5792, label %5837, label %5801, !dbg !2549

5801:                                             ; preds = %originalBBpart21940, %originalBBpart21899, %originalBBpart21895
  %5802 = load i32, i32* @x.35
  %5803 = load i32, i32* @y.36
  %5804 = sub i32 %5802, 1
  %5805 = mul i32 %5802, %5804
  %5806 = urem i32 %5805, 2
  %5807 = icmp eq i32 %5806, 0
  %5808 = icmp slt i32 %5803, 10
  %5809 = or i1 %5807, %5808
  br i1 %5809, label %originalBB1942, label %originalBB1942alteredBB

originalBB1942:                                   ; preds = %5801, %originalBB1942alteredBB
  %5810 = load i8, i8* %41, align 1, !dbg !2550
  %5811 = trunc i8 %5810 to i1, !dbg !2550
  %5812 = load i32, i32* @x.35
  %5813 = load i32, i32* @y.36
  %5814 = sub i32 %5812, 1
  %5815 = mul i32 %5812, %5814
  %5816 = urem i32 %5815, 2
  %5817 = icmp eq i32 %5816, 0
  %5818 = icmp slt i32 %5813, 10
  %5819 = or i1 %5817, %5818
  br i1 %5819, label %originalBBpart21944, label %originalBB1942alteredBB

originalBBpart21944:                              ; preds = %originalBB1942
  br i1 %5811, label %5837, label %5820, !dbg !2551

5820:                                             ; preds = %originalBBpart21944
  %5821 = load i32, i32* @x.35
  %5822 = load i32, i32* @y.36
  %5823 = sub i32 %5821, 1
  %5824 = mul i32 %5821, %5823
  %5825 = urem i32 %5824, 2
  %5826 = icmp eq i32 %5825, 0
  %5827 = icmp slt i32 %5822, 10
  %5828 = or i1 %5826, %5827
  br i1 %5828, label %originalBB1946, label %originalBB1946alteredBB

originalBB1946:                                   ; preds = %5820, %originalBB1946alteredBB
  %5829 = load i32, i32* @x.35
  %5830 = load i32, i32* @y.36
  %5831 = sub i32 %5829, 1
  %5832 = mul i32 %5829, %5831
  %5833 = urem i32 %5832, 2
  %5834 = icmp eq i32 %5833, 0
  %5835 = icmp slt i32 %5830, 10
  %5836 = or i1 %5834, %5835
  br i1 %5836, label %originalBBpart21948, label %originalBB1946alteredBB

originalBBpart21948:                              ; preds = %originalBB1946
  br label %6300, !dbg !2552

5837:                                             ; preds = %originalBBpart21944, %originalBBpart21940
  %5838 = load i32, i32* @x.35
  %5839 = load i32, i32* @y.36
  %5840 = sub i32 %5838, 1
  %5841 = mul i32 %5838, %5840
  %5842 = urem i32 %5841, 2
  %5843 = icmp eq i32 %5842, 0
  %5844 = icmp slt i32 %5839, 10
  %5845 = or i1 %5843, %5844
  br i1 %5845, label %originalBB1950, label %originalBB1950alteredBB

originalBB1950:                                   ; preds = %5837, %originalBB1950alteredBB
  %5846 = load i32, i32* @x.35
  %5847 = load i32, i32* @y.36
  %5848 = sub i32 %5846, 1
  %5849 = mul i32 %5846, %5848
  %5850 = urem i32 %5849, 2
  %5851 = icmp eq i32 %5850, 0
  %5852 = icmp slt i32 %5847, 10
  %5853 = or i1 %5851, %5852
  br i1 %5853, label %originalBBpart21952, label %originalBB1950alteredBB

originalBBpart21952:                              ; preds = %originalBB1950
  br label %5854, !dbg !2550

5854:                                             ; preds = %originalBBpart21952, %originalBBpart21084
  call void @llvm.dbg.label(metadata !2553), !dbg !2554
  %5855 = load i32, i32* @x.35
  %5856 = load i32, i32* @y.36
  %5857 = sub i32 %5855, 1
  %5858 = mul i32 %5855, %5857
  %5859 = urem i32 %5858, 2
  %5860 = icmp eq i32 %5859, 0
  %5861 = icmp slt i32 %5856, 10
  %5862 = or i1 %5860, %5861
  br i1 %5862, label %originalBB1954, label %originalBB1954alteredBB

originalBB1954:                                   ; preds = %5854, %originalBB1954alteredBB
  %5863 = load i32, i32* @x.35
  %5864 = load i32, i32* @y.36
  %5865 = sub i32 %5863, 1
  %5866 = mul i32 %5863, %5865
  %5867 = urem i32 %5866, 2
  %5868 = icmp eq i32 %5867, 0
  %5869 = icmp slt i32 %5864, 10
  %5870 = or i1 %5868, %5869
  br i1 %5870, label %originalBBpart21956, label %originalBB1954alteredBB

originalBBpart21956:                              ; preds = %originalBB1954
  br label %5871, !dbg !2555

5871:                                             ; preds = %originalBBpart21956
  %5872 = load i32, i32* @x.35
  %5873 = load i32, i32* @y.36
  %5874 = sub i32 %5872, 1
  %5875 = mul i32 %5872, %5874
  %5876 = urem i32 %5875, 2
  %5877 = icmp eq i32 %5876, 0
  %5878 = icmp slt i32 %5873, 10
  %5879 = or i1 %5877, %5878
  br i1 %5879, label %originalBB1958, label %originalBB1958alteredBB

originalBB1958:                                   ; preds = %5871, %originalBB1958alteredBB
  %5880 = load i8, i8* %35, align 1, !dbg !2556
  %5881 = trunc i8 %5880 to i1, !dbg !2556
  %5882 = load i32, i32* @x.35
  %5883 = load i32, i32* @y.36
  %5884 = sub i32 %5882, 1
  %5885 = mul i32 %5882, %5884
  %5886 = urem i32 %5885, 2
  %5887 = icmp eq i32 %5886, 0
  %5888 = icmp slt i32 %5883, 10
  %5889 = or i1 %5887, %5888
  br i1 %5889, label %originalBBpart21960, label %originalBB1958alteredBB

originalBBpart21960:                              ; preds = %originalBB1958
  br i1 %5881, label %5890, label %5907, !dbg !2559

5890:                                             ; preds = %originalBBpart21960
  %5891 = load i32, i32* @x.35
  %5892 = load i32, i32* @y.36
  %5893 = sub i32 %5891, 1
  %5894 = mul i32 %5891, %5893
  %5895 = urem i32 %5894, 2
  %5896 = icmp eq i32 %5895, 0
  %5897 = icmp slt i32 %5892, 10
  %5898 = or i1 %5896, %5897
  br i1 %5898, label %originalBB1962, label %originalBB1962alteredBB

originalBB1962:                                   ; preds = %5890, %originalBB1962alteredBB
  %5899 = load i32, i32* @x.35
  %5900 = load i32, i32* @y.36
  %5901 = sub i32 %5899, 1
  %5902 = mul i32 %5899, %5901
  %5903 = urem i32 %5902, 2
  %5904 = icmp eq i32 %5903, 0
  %5905 = icmp slt i32 %5900, 10
  %5906 = or i1 %5904, %5905
  br i1 %5906, label %originalBBpart21964, label %originalBB1962alteredBB

originalBBpart21964:                              ; preds = %originalBB1962
  br label %7269, !dbg !2556

5907:                                             ; preds = %originalBBpart21960
  %5908 = load i32, i32* @x.35
  %5909 = load i32, i32* @y.36
  %5910 = sub i32 %5908, 1
  %5911 = mul i32 %5908, %5910
  %5912 = urem i32 %5911, 2
  %5913 = icmp eq i32 %5912, 0
  %5914 = icmp slt i32 %5909, 10
  %5915 = or i1 %5913, %5914
  br i1 %5915, label %originalBB1966, label %originalBB1966alteredBB

originalBB1966:                                   ; preds = %5907, %originalBB1966alteredBB
  store i8 1, i8* %42, align 1, !dbg !2559
  %5916 = load i32, i32* %23, align 4, !dbg !2560
  %5917 = icmp eq i32 %5916, 2, !dbg !2560
  %5918 = load i32, i32* @x.35
  %5919 = load i32, i32* @y.36
  %5920 = sub i32 %5918, 1
  %5921 = mul i32 %5918, %5920
  %5922 = urem i32 %5921, 2
  %5923 = icmp eq i32 %5922, 0
  %5924 = icmp slt i32 %5919, 10
  %5925 = or i1 %5923, %5924
  br i1 %5925, label %originalBBpart21968, label %originalBB1966alteredBB

originalBBpart21968:                              ; preds = %originalBB1966
  br i1 %5917, label %5926, label %6190, !dbg !2560

5926:                                             ; preds = %originalBBpart21968
  %5927 = load i32, i32* @x.35
  %5928 = load i32, i32* @y.36
  %5929 = sub i32 %5927, 1
  %5930 = mul i32 %5927, %5929
  %5931 = urem i32 %5930, 2
  %5932 = icmp eq i32 %5931, 0
  %5933 = icmp slt i32 %5928, 10
  %5934 = or i1 %5932, %5933
  br i1 %5934, label %originalBB1970, label %originalBB1970alteredBB

originalBB1970:                                   ; preds = %5926, %originalBB1970alteredBB
  %5935 = load i8, i8* %36, align 1, !dbg !2560
  %5936 = trunc i8 %5935 to i1, !dbg !2560
  %5937 = load i32, i32* @x.35
  %5938 = load i32, i32* @y.36
  %5939 = sub i32 %5937, 1
  %5940 = mul i32 %5937, %5939
  %5941 = urem i32 %5940, 2
  %5942 = icmp eq i32 %5941, 0
  %5943 = icmp slt i32 %5938, 10
  %5944 = or i1 %5942, %5943
  br i1 %5944, label %originalBBpart21972, label %originalBB1970alteredBB

originalBBpart21972:                              ; preds = %originalBB1970
  br i1 %5936, label %6190, label %5945, !dbg !2559

5945:                                             ; preds = %originalBBpart21972
  %5946 = load i32, i32* @x.35
  %5947 = load i32, i32* @y.36
  %5948 = sub i32 %5946, 1
  %5949 = mul i32 %5946, %5948
  %5950 = urem i32 %5949, 2
  %5951 = icmp eq i32 %5950, 0
  %5952 = icmp slt i32 %5947, 10
  %5953 = or i1 %5951, %5952
  br i1 %5953, label %originalBB1974, label %originalBB1974alteredBB

originalBB1974:                                   ; preds = %5945, %originalBB1974alteredBB
  %5954 = load i32, i32* @x.35
  %5955 = load i32, i32* @y.36
  %5956 = sub i32 %5954, 1
  %5957 = mul i32 %5954, %5956
  %5958 = urem i32 %5957, 2
  %5959 = icmp eq i32 %5958, 0
  %5960 = icmp slt i32 %5955, 10
  %5961 = or i1 %5959, %5960
  br i1 %5961, label %originalBBpart21976, label %originalBB1974alteredBB

originalBBpart21976:                              ; preds = %originalBB1974
  br label %5962, !dbg !2562

5962:                                             ; preds = %originalBBpart21976
  %5963 = load i32, i32* @x.35
  %5964 = load i32, i32* @y.36
  %5965 = sub i32 %5963, 1
  %5966 = mul i32 %5963, %5965
  %5967 = urem i32 %5966, 2
  %5968 = icmp eq i32 %5967, 0
  %5969 = icmp slt i32 %5964, 10
  %5970 = or i1 %5968, %5969
  br i1 %5970, label %originalBB1978, label %originalBB1978alteredBB

originalBB1978:                                   ; preds = %5962, %originalBB1978alteredBB
  %5971 = load i64, i64* %29, align 8, !dbg !2564
  %5972 = load i64, i64* %20, align 8, !dbg !2564
  %5973 = icmp ult i64 %5971, %5972, !dbg !2564
  %5974 = load i32, i32* @x.35
  %5975 = load i32, i32* @y.36
  %5976 = sub i32 %5974, 1
  %5977 = mul i32 %5974, %5976
  %5978 = urem i32 %5977, 2
  %5979 = icmp eq i32 %5978, 0
  %5980 = icmp slt i32 %5975, 10
  %5981 = or i1 %5979, %5980
  br i1 %5981, label %originalBBpart21980, label %originalBB1978alteredBB

originalBBpart21980:                              ; preds = %originalBB1978
  br i1 %5973, label %5982, label %6002, !dbg !2567

5982:                                             ; preds = %originalBBpart21980
  %5983 = load i32, i32* @x.35
  %5984 = load i32, i32* @y.36
  %5985 = sub i32 %5983, 1
  %5986 = mul i32 %5983, %5985
  %5987 = urem i32 %5986, 2
  %5988 = icmp eq i32 %5987, 0
  %5989 = icmp slt i32 %5984, 10
  %5990 = or i1 %5988, %5989
  br i1 %5990, label %originalBB1982, label %originalBB1982alteredBB

originalBB1982:                                   ; preds = %5982, %originalBB1982alteredBB
  %5991 = load i8*, i8** %19, align 8, !dbg !2564
  %5992 = load i64, i64* %29, align 8, !dbg !2564
  %5993 = getelementptr inbounds i8, i8* %5991, i64 %5992, !dbg !2564
  store i8 39, i8* %5993, align 1, !dbg !2564
  %5994 = load i32, i32* @x.35
  %5995 = load i32, i32* @y.36
  %5996 = sub i32 %5994, 1
  %5997 = mul i32 %5994, %5996
  %5998 = urem i32 %5997, 2
  %5999 = icmp eq i32 %5998, 0
  %6000 = icmp slt i32 %5995, 10
  %6001 = or i1 %5999, %6000
  br i1 %6001, label %originalBBpart21984, label %originalBB1982alteredBB

originalBBpart21984:                              ; preds = %originalBB1982
  br label %6002, !dbg !2564

6002:                                             ; preds = %originalBBpart21984, %originalBBpart21980
  %6003 = load i32, i32* @x.35
  %6004 = load i32, i32* @y.36
  %6005 = sub i32 %6003, 1
  %6006 = mul i32 %6003, %6005
  %6007 = urem i32 %6006, 2
  %6008 = icmp eq i32 %6007, 0
  %6009 = icmp slt i32 %6004, 10
  %6010 = or i1 %6008, %6009
  br i1 %6010, label %originalBB1986, label %originalBB1986alteredBB

originalBB1986:                                   ; preds = %6002, %originalBB1986alteredBB
  %6011 = load i64, i64* %29, align 8, !dbg !2567
  %6012 = add i64 %6011, 1, !dbg !2567
  store i64 %6012, i64* %29, align 8, !dbg !2567
  %6013 = load i32, i32* @x.35
  %6014 = load i32, i32* @y.36
  %6015 = sub i32 %6013, 1
  %6016 = mul i32 %6013, %6015
  %6017 = urem i32 %6016, 2
  %6018 = icmp eq i32 %6017, 0
  %6019 = icmp slt i32 %6014, 10
  %6020 = or i1 %6018, %6019
  br i1 %6020, label %originalBBpart21999, label %originalBB1986alteredBB

originalBBpart21999:                              ; preds = %originalBB1986
  br label %6021, !dbg !2567

6021:                                             ; preds = %originalBBpart21999
  %6022 = load i32, i32* @x.35
  %6023 = load i32, i32* @y.36
  %6024 = sub i32 %6022, 1
  %6025 = mul i32 %6022, %6024
  %6026 = urem i32 %6025, 2
  %6027 = icmp eq i32 %6026, 0
  %6028 = icmp slt i32 %6023, 10
  %6029 = or i1 %6027, %6028
  br i1 %6029, label %originalBB2001, label %originalBB2001alteredBB

originalBB2001:                                   ; preds = %6021, %originalBB2001alteredBB
  %6030 = load i32, i32* @x.35
  %6031 = load i32, i32* @y.36
  %6032 = sub i32 %6030, 1
  %6033 = mul i32 %6030, %6032
  %6034 = urem i32 %6033, 2
  %6035 = icmp eq i32 %6034, 0
  %6036 = icmp slt i32 %6031, 10
  %6037 = or i1 %6035, %6036
  br i1 %6037, label %originalBBpart22003, label %originalBB2001alteredBB

originalBBpart22003:                              ; preds = %originalBB2001
  br label %6038, !dbg !2562

6038:                                             ; preds = %originalBBpart22003
  %6039 = load i32, i32* @x.35
  %6040 = load i32, i32* @y.36
  %6041 = sub i32 %6039, 1
  %6042 = mul i32 %6039, %6041
  %6043 = urem i32 %6042, 2
  %6044 = icmp eq i32 %6043, 0
  %6045 = icmp slt i32 %6040, 10
  %6046 = or i1 %6044, %6045
  br i1 %6046, label %originalBB2005, label %originalBB2005alteredBB

originalBB2005:                                   ; preds = %6038, %originalBB2005alteredBB
  %6047 = load i64, i64* %29, align 8, !dbg !2568
  %6048 = load i64, i64* %20, align 8, !dbg !2568
  %6049 = icmp ult i64 %6047, %6048, !dbg !2568
  %6050 = load i32, i32* @x.35
  %6051 = load i32, i32* @y.36
  %6052 = sub i32 %6050, 1
  %6053 = mul i32 %6050, %6052
  %6054 = urem i32 %6053, 2
  %6055 = icmp eq i32 %6054, 0
  %6056 = icmp slt i32 %6051, 10
  %6057 = or i1 %6055, %6056
  br i1 %6057, label %originalBBpart22007, label %originalBB2005alteredBB

originalBBpart22007:                              ; preds = %originalBB2005
  br i1 %6049, label %6058, label %6078, !dbg !2571

6058:                                             ; preds = %originalBBpart22007
  %6059 = load i32, i32* @x.35
  %6060 = load i32, i32* @y.36
  %6061 = sub i32 %6059, 1
  %6062 = mul i32 %6059, %6061
  %6063 = urem i32 %6062, 2
  %6064 = icmp eq i32 %6063, 0
  %6065 = icmp slt i32 %6060, 10
  %6066 = or i1 %6064, %6065
  br i1 %6066, label %originalBB2009, label %originalBB2009alteredBB

originalBB2009:                                   ; preds = %6058, %originalBB2009alteredBB
  %6067 = load i8*, i8** %19, align 8, !dbg !2568
  %6068 = load i64, i64* %29, align 8, !dbg !2568
  %6069 = getelementptr inbounds i8, i8* %6067, i64 %6068, !dbg !2568
  store i8 36, i8* %6069, align 1, !dbg !2568
  %6070 = load i32, i32* @x.35
  %6071 = load i32, i32* @y.36
  %6072 = sub i32 %6070, 1
  %6073 = mul i32 %6070, %6072
  %6074 = urem i32 %6073, 2
  %6075 = icmp eq i32 %6074, 0
  %6076 = icmp slt i32 %6071, 10
  %6077 = or i1 %6075, %6076
  br i1 %6077, label %originalBBpart22011, label %originalBB2009alteredBB

originalBBpart22011:                              ; preds = %originalBB2009
  br label %6078, !dbg !2568

6078:                                             ; preds = %originalBBpart22011, %originalBBpart22007
  %6079 = load i32, i32* @x.35
  %6080 = load i32, i32* @y.36
  %6081 = sub i32 %6079, 1
  %6082 = mul i32 %6079, %6081
  %6083 = urem i32 %6082, 2
  %6084 = icmp eq i32 %6083, 0
  %6085 = icmp slt i32 %6080, 10
  %6086 = or i1 %6084, %6085
  br i1 %6086, label %originalBB2013, label %originalBB2013alteredBB

originalBB2013:                                   ; preds = %6078, %originalBB2013alteredBB
  %6087 = load i64, i64* %29, align 8, !dbg !2571
  %6088 = add i64 %6087, 1, !dbg !2571
  store i64 %6088, i64* %29, align 8, !dbg !2571
  %6089 = load i32, i32* @x.35
  %6090 = load i32, i32* @y.36
  %6091 = sub i32 %6089, 1
  %6092 = mul i32 %6089, %6091
  %6093 = urem i32 %6092, 2
  %6094 = icmp eq i32 %6093, 0
  %6095 = icmp slt i32 %6090, 10
  %6096 = or i1 %6094, %6095
  br i1 %6096, label %originalBBpart22020, label %originalBB2013alteredBB

originalBBpart22020:                              ; preds = %originalBB2013
  br label %6097, !dbg !2571

6097:                                             ; preds = %originalBBpart22020
  %6098 = load i32, i32* @x.35
  %6099 = load i32, i32* @y.36
  %6100 = sub i32 %6098, 1
  %6101 = mul i32 %6098, %6100
  %6102 = urem i32 %6101, 2
  %6103 = icmp eq i32 %6102, 0
  %6104 = icmp slt i32 %6099, 10
  %6105 = or i1 %6103, %6104
  br i1 %6105, label %originalBB2022, label %originalBB2022alteredBB

originalBB2022:                                   ; preds = %6097, %originalBB2022alteredBB
  %6106 = load i32, i32* @x.35
  %6107 = load i32, i32* @y.36
  %6108 = sub i32 %6106, 1
  %6109 = mul i32 %6106, %6108
  %6110 = urem i32 %6109, 2
  %6111 = icmp eq i32 %6110, 0
  %6112 = icmp slt i32 %6107, 10
  %6113 = or i1 %6111, %6112
  br i1 %6113, label %originalBBpart22024, label %originalBB2022alteredBB

originalBBpart22024:                              ; preds = %originalBB2022
  br label %6114, !dbg !2562

6114:                                             ; preds = %originalBBpart22024
  %6115 = load i32, i32* @x.35
  %6116 = load i32, i32* @y.36
  %6117 = sub i32 %6115, 1
  %6118 = mul i32 %6115, %6117
  %6119 = urem i32 %6118, 2
  %6120 = icmp eq i32 %6119, 0
  %6121 = icmp slt i32 %6116, 10
  %6122 = or i1 %6120, %6121
  br i1 %6122, label %originalBB2026, label %originalBB2026alteredBB

originalBB2026:                                   ; preds = %6114, %originalBB2026alteredBB
  %6123 = load i64, i64* %29, align 8, !dbg !2572
  %6124 = load i64, i64* %20, align 8, !dbg !2572
  %6125 = icmp ult i64 %6123, %6124, !dbg !2572
  %6126 = load i32, i32* @x.35
  %6127 = load i32, i32* @y.36
  %6128 = sub i32 %6126, 1
  %6129 = mul i32 %6126, %6128
  %6130 = urem i32 %6129, 2
  %6131 = icmp eq i32 %6130, 0
  %6132 = icmp slt i32 %6127, 10
  %6133 = or i1 %6131, %6132
  br i1 %6133, label %originalBBpart22028, label %originalBB2026alteredBB

originalBBpart22028:                              ; preds = %originalBB2026
  br i1 %6125, label %6134, label %6154, !dbg !2575

6134:                                             ; preds = %originalBBpart22028
  %6135 = load i32, i32* @x.35
  %6136 = load i32, i32* @y.36
  %6137 = sub i32 %6135, 1
  %6138 = mul i32 %6135, %6137
  %6139 = urem i32 %6138, 2
  %6140 = icmp eq i32 %6139, 0
  %6141 = icmp slt i32 %6136, 10
  %6142 = or i1 %6140, %6141
  br i1 %6142, label %originalBB2030, label %originalBB2030alteredBB

originalBB2030:                                   ; preds = %6134, %originalBB2030alteredBB
  %6143 = load i8*, i8** %19, align 8, !dbg !2572
  %6144 = load i64, i64* %29, align 8, !dbg !2572
  %6145 = getelementptr inbounds i8, i8* %6143, i64 %6144, !dbg !2572
  store i8 39, i8* %6145, align 1, !dbg !2572
  %6146 = load i32, i32* @x.35
  %6147 = load i32, i32* @y.36
  %6148 = sub i32 %6146, 1
  %6149 = mul i32 %6146, %6148
  %6150 = urem i32 %6149, 2
  %6151 = icmp eq i32 %6150, 0
  %6152 = icmp slt i32 %6147, 10
  %6153 = or i1 %6151, %6152
  br i1 %6153, label %originalBBpart22032, label %originalBB2030alteredBB

originalBBpart22032:                              ; preds = %originalBB2030
  br label %6154, !dbg !2572

6154:                                             ; preds = %originalBBpart22032, %originalBBpart22028
  %6155 = load i32, i32* @x.35
  %6156 = load i32, i32* @y.36
  %6157 = sub i32 %6155, 1
  %6158 = mul i32 %6155, %6157
  %6159 = urem i32 %6158, 2
  %6160 = icmp eq i32 %6159, 0
  %6161 = icmp slt i32 %6156, 10
  %6162 = or i1 %6160, %6161
  br i1 %6162, label %originalBB2034, label %originalBB2034alteredBB

originalBB2034:                                   ; preds = %6154, %originalBB2034alteredBB
  %6163 = load i64, i64* %29, align 8, !dbg !2575
  %6164 = add i64 %6163, 1, !dbg !2575
  store i64 %6164, i64* %29, align 8, !dbg !2575
  %6165 = load i32, i32* @x.35
  %6166 = load i32, i32* @y.36
  %6167 = sub i32 %6165, 1
  %6168 = mul i32 %6165, %6167
  %6169 = urem i32 %6168, 2
  %6170 = icmp eq i32 %6169, 0
  %6171 = icmp slt i32 %6166, 10
  %6172 = or i1 %6170, %6171
  br i1 %6172, label %originalBBpart22050, label %originalBB2034alteredBB

originalBBpart22050:                              ; preds = %originalBB2034
  br label %6173, !dbg !2575

6173:                                             ; preds = %originalBBpart22050
  %6174 = load i32, i32* @x.35
  %6175 = load i32, i32* @y.36
  %6176 = sub i32 %6174, 1
  %6177 = mul i32 %6174, %6176
  %6178 = urem i32 %6177, 2
  %6179 = icmp eq i32 %6178, 0
  %6180 = icmp slt i32 %6175, 10
  %6181 = or i1 %6179, %6180
  br i1 %6181, label %originalBB2052, label %originalBB2052alteredBB

originalBB2052:                                   ; preds = %6173, %originalBB2052alteredBB
  store i8 1, i8* %36, align 1, !dbg !2562
  %6182 = load i32, i32* @x.35
  %6183 = load i32, i32* @y.36
  %6184 = sub i32 %6182, 1
  %6185 = mul i32 %6182, %6184
  %6186 = urem i32 %6185, 2
  %6187 = icmp eq i32 %6186, 0
  %6188 = icmp slt i32 %6183, 10
  %6189 = or i1 %6187, %6188
  br i1 %6189, label %originalBBpart22054, label %originalBB2052alteredBB

originalBBpart22054:                              ; preds = %originalBB2052
  br label %6190, !dbg !2562

6190:                                             ; preds = %originalBBpart22054, %originalBBpart21972, %originalBBpart21968
  %6191 = load i32, i32* @x.35
  %6192 = load i32, i32* @y.36
  %6193 = sub i32 %6191, 1
  %6194 = mul i32 %6191, %6193
  %6195 = urem i32 %6194, 2
  %6196 = icmp eq i32 %6195, 0
  %6197 = icmp slt i32 %6192, 10
  %6198 = or i1 %6196, %6197
  br i1 %6198, label %originalBB2056, label %originalBB2056alteredBB

originalBB2056:                                   ; preds = %6190, %originalBB2056alteredBB
  %6199 = load i32, i32* @x.35
  %6200 = load i32, i32* @y.36
  %6201 = sub i32 %6199, 1
  %6202 = mul i32 %6199, %6201
  %6203 = urem i32 %6202, 2
  %6204 = icmp eq i32 %6203, 0
  %6205 = icmp slt i32 %6200, 10
  %6206 = or i1 %6204, %6205
  br i1 %6206, label %originalBBpart22058, label %originalBB2056alteredBB

originalBBpart22058:                              ; preds = %originalBB2056
  br label %6207, !dbg !2559

6207:                                             ; preds = %originalBBpart22058
  %6208 = load i32, i32* @x.35
  %6209 = load i32, i32* @y.36
  %6210 = sub i32 %6208, 1
  %6211 = mul i32 %6208, %6210
  %6212 = urem i32 %6211, 2
  %6213 = icmp eq i32 %6212, 0
  %6214 = icmp slt i32 %6209, 10
  %6215 = or i1 %6213, %6214
  br i1 %6215, label %originalBB2060, label %originalBB2060alteredBB

originalBB2060:                                   ; preds = %6207, %originalBB2060alteredBB
  %6216 = load i64, i64* %29, align 8, !dbg !2576
  %6217 = load i64, i64* %20, align 8, !dbg !2576
  %6218 = icmp ult i64 %6216, %6217, !dbg !2576
  %6219 = load i32, i32* @x.35
  %6220 = load i32, i32* @y.36
  %6221 = sub i32 %6219, 1
  %6222 = mul i32 %6219, %6221
  %6223 = urem i32 %6222, 2
  %6224 = icmp eq i32 %6223, 0
  %6225 = icmp slt i32 %6220, 10
  %6226 = or i1 %6224, %6225
  br i1 %6226, label %originalBBpart22062, label %originalBB2060alteredBB

originalBBpart22062:                              ; preds = %originalBB2060
  br i1 %6218, label %6227, label %6247, !dbg !2579

6227:                                             ; preds = %originalBBpart22062
  %6228 = load i32, i32* @x.35
  %6229 = load i32, i32* @y.36
  %6230 = sub i32 %6228, 1
  %6231 = mul i32 %6228, %6230
  %6232 = urem i32 %6231, 2
  %6233 = icmp eq i32 %6232, 0
  %6234 = icmp slt i32 %6229, 10
  %6235 = or i1 %6233, %6234
  br i1 %6235, label %originalBB2064, label %originalBB2064alteredBB

originalBB2064:                                   ; preds = %6227, %originalBB2064alteredBB
  %6236 = load i8*, i8** %19, align 8, !dbg !2576
  %6237 = load i64, i64* %29, align 8, !dbg !2576
  %6238 = getelementptr inbounds i8, i8* %6236, i64 %6237, !dbg !2576
  store i8 92, i8* %6238, align 1, !dbg !2576
  %6239 = load i32, i32* @x.35
  %6240 = load i32, i32* @y.36
  %6241 = sub i32 %6239, 1
  %6242 = mul i32 %6239, %6241
  %6243 = urem i32 %6242, 2
  %6244 = icmp eq i32 %6243, 0
  %6245 = icmp slt i32 %6240, 10
  %6246 = or i1 %6244, %6245
  br i1 %6246, label %originalBBpart22066, label %originalBB2064alteredBB

originalBBpart22066:                              ; preds = %originalBB2064
  br label %6247, !dbg !2576

6247:                                             ; preds = %originalBBpart22066, %originalBBpart22062
  %6248 = load i32, i32* @x.35
  %6249 = load i32, i32* @y.36
  %6250 = sub i32 %6248, 1
  %6251 = mul i32 %6248, %6250
  %6252 = urem i32 %6251, 2
  %6253 = icmp eq i32 %6252, 0
  %6254 = icmp slt i32 %6249, 10
  %6255 = or i1 %6253, %6254
  br i1 %6255, label %originalBB2068, label %originalBB2068alteredBB

originalBB2068:                                   ; preds = %6247, %originalBB2068alteredBB
  %6256 = load i64, i64* %29, align 8, !dbg !2579
  %6257 = add i64 %6256, 1, !dbg !2579
  store i64 %6257, i64* %29, align 8, !dbg !2579
  %6258 = load i32, i32* @x.35
  %6259 = load i32, i32* @y.36
  %6260 = sub i32 %6258, 1
  %6261 = mul i32 %6258, %6260
  %6262 = urem i32 %6261, 2
  %6263 = icmp eq i32 %6262, 0
  %6264 = icmp slt i32 %6259, 10
  %6265 = or i1 %6263, %6264
  br i1 %6265, label %originalBBpart22072, label %originalBB2068alteredBB

originalBBpart22072:                              ; preds = %originalBB2068
  br label %6266, !dbg !2579

6266:                                             ; preds = %originalBBpart22072
  %6267 = load i32, i32* @x.35
  %6268 = load i32, i32* @y.36
  %6269 = sub i32 %6267, 1
  %6270 = mul i32 %6267, %6269
  %6271 = urem i32 %6270, 2
  %6272 = icmp eq i32 %6271, 0
  %6273 = icmp slt i32 %6268, 10
  %6274 = or i1 %6272, %6273
  br i1 %6274, label %originalBB2074, label %originalBB2074alteredBB

originalBB2074:                                   ; preds = %6266, %originalBB2074alteredBB
  %6275 = load i32, i32* @x.35
  %6276 = load i32, i32* @y.36
  %6277 = sub i32 %6275, 1
  %6278 = mul i32 %6275, %6277
  %6279 = urem i32 %6278, 2
  %6280 = icmp eq i32 %6279, 0
  %6281 = icmp slt i32 %6276, 10
  %6282 = or i1 %6280, %6281
  br i1 %6282, label %originalBBpart22076, label %originalBB2074alteredBB

originalBBpart22076:                              ; preds = %originalBB2074
  br label %6283, !dbg !2559

6283:                                             ; preds = %originalBBpart22076
  %6284 = load i32, i32* @x.35
  %6285 = load i32, i32* @y.36
  %6286 = sub i32 %6284, 1
  %6287 = mul i32 %6284, %6286
  %6288 = urem i32 %6287, 2
  %6289 = icmp eq i32 %6288, 0
  %6290 = icmp slt i32 %6285, 10
  %6291 = or i1 %6289, %6290
  br i1 %6291, label %originalBB2078, label %originalBB2078alteredBB

originalBB2078:                                   ; preds = %6283, %originalBB2078alteredBB
  %6292 = load i32, i32* @x.35
  %6293 = load i32, i32* @y.36
  %6294 = sub i32 %6292, 1
  %6295 = mul i32 %6292, %6294
  %6296 = urem i32 %6295, 2
  %6297 = icmp eq i32 %6296, 0
  %6298 = icmp slt i32 %6293, 10
  %6299 = or i1 %6297, %6298
  br i1 %6299, label %originalBBpart22080, label %originalBB2078alteredBB

originalBBpart22080:                              ; preds = %originalBB2078
  br label %6300, !dbg !2559

6300:                                             ; preds = %originalBBpart22080, %originalBBpart21948, %originalBBpart21879, %originalBBpart21056, %originalBBpart21040
  call void @llvm.dbg.label(metadata !2580), !dbg !2581
  %6301 = load i32, i32* @x.35
  %6302 = load i32, i32* @y.36
  %6303 = sub i32 %6301, 1
  %6304 = mul i32 %6301, %6303
  %6305 = urem i32 %6304, 2
  %6306 = icmp eq i32 %6305, 0
  %6307 = icmp slt i32 %6302, 10
  %6308 = or i1 %6306, %6307
  br i1 %6308, label %originalBB2082, label %originalBB2082alteredBB

originalBB2082:                                   ; preds = %6300, %originalBB2082alteredBB
  %6309 = load i32, i32* @x.35
  %6310 = load i32, i32* @y.36
  %6311 = sub i32 %6309, 1
  %6312 = mul i32 %6309, %6311
  %6313 = urem i32 %6312, 2
  %6314 = icmp eq i32 %6313, 0
  %6315 = icmp slt i32 %6310, 10
  %6316 = or i1 %6314, %6315
  br i1 %6316, label %originalBBpart22084, label %originalBB2082alteredBB

originalBBpart22084:                              ; preds = %originalBB2082
  br label %6317, !dbg !2582

6317:                                             ; preds = %originalBBpart22084
  %6318 = load i32, i32* @x.35
  %6319 = load i32, i32* @y.36
  %6320 = sub i32 %6318, 1
  %6321 = mul i32 %6318, %6320
  %6322 = urem i32 %6321, 2
  %6323 = icmp eq i32 %6322, 0
  %6324 = icmp slt i32 %6319, 10
  %6325 = or i1 %6323, %6324
  br i1 %6325, label %originalBB2086, label %originalBB2086alteredBB

originalBB2086:                                   ; preds = %6317, %originalBB2086alteredBB
  %6326 = load i8, i8* %36, align 1, !dbg !2583
  %6327 = trunc i8 %6326 to i1, !dbg !2583
  %6328 = load i32, i32* @x.35
  %6329 = load i32, i32* @y.36
  %6330 = sub i32 %6328, 1
  %6331 = mul i32 %6328, %6330
  %6332 = urem i32 %6331, 2
  %6333 = icmp eq i32 %6332, 0
  %6334 = icmp slt i32 %6329, 10
  %6335 = or i1 %6333, %6334
  br i1 %6335, label %originalBBpart22088, label %originalBB2086alteredBB

originalBBpart22088:                              ; preds = %originalBB2086
  br i1 %6327, label %6336, label %6524, !dbg !2583

6336:                                             ; preds = %originalBBpart22088
  %6337 = load i32, i32* @x.35
  %6338 = load i32, i32* @y.36
  %6339 = sub i32 %6337, 1
  %6340 = mul i32 %6337, %6339
  %6341 = urem i32 %6340, 2
  %6342 = icmp eq i32 %6341, 0
  %6343 = icmp slt i32 %6338, 10
  %6344 = or i1 %6342, %6343
  br i1 %6344, label %originalBB2090, label %originalBB2090alteredBB

originalBB2090:                                   ; preds = %6336, %originalBB2090alteredBB
  %6345 = load i8, i8* %42, align 1, !dbg !2583
  %6346 = trunc i8 %6345 to i1, !dbg !2583
  %6347 = load i32, i32* @x.35
  %6348 = load i32, i32* @y.36
  %6349 = sub i32 %6347, 1
  %6350 = mul i32 %6347, %6349
  %6351 = urem i32 %6350, 2
  %6352 = icmp eq i32 %6351, 0
  %6353 = icmp slt i32 %6348, 10
  %6354 = or i1 %6352, %6353
  br i1 %6354, label %originalBBpart22092, label %originalBB2090alteredBB

originalBBpart22092:                              ; preds = %originalBB2090
  br i1 %6346, label %6524, label %6355, !dbg !2586

6355:                                             ; preds = %originalBBpart22092
  %6356 = load i32, i32* @x.35
  %6357 = load i32, i32* @y.36
  %6358 = sub i32 %6356, 1
  %6359 = mul i32 %6356, %6358
  %6360 = urem i32 %6359, 2
  %6361 = icmp eq i32 %6360, 0
  %6362 = icmp slt i32 %6357, 10
  %6363 = or i1 %6361, %6362
  br i1 %6363, label %originalBB2094, label %originalBB2094alteredBB

originalBB2094:                                   ; preds = %6355, %originalBB2094alteredBB
  %6364 = load i32, i32* @x.35
  %6365 = load i32, i32* @y.36
  %6366 = sub i32 %6364, 1
  %6367 = mul i32 %6364, %6366
  %6368 = urem i32 %6367, 2
  %6369 = icmp eq i32 %6368, 0
  %6370 = icmp slt i32 %6365, 10
  %6371 = or i1 %6369, %6370
  br i1 %6371, label %originalBBpart22096, label %originalBB2094alteredBB

originalBBpart22096:                              ; preds = %originalBB2094
  br label %6372, !dbg !2587

6372:                                             ; preds = %originalBBpart22096
  %6373 = load i32, i32* @x.35
  %6374 = load i32, i32* @y.36
  %6375 = sub i32 %6373, 1
  %6376 = mul i32 %6373, %6375
  %6377 = urem i32 %6376, 2
  %6378 = icmp eq i32 %6377, 0
  %6379 = icmp slt i32 %6374, 10
  %6380 = or i1 %6378, %6379
  br i1 %6380, label %originalBB2098, label %originalBB2098alteredBB

originalBB2098:                                   ; preds = %6372, %originalBB2098alteredBB
  %6381 = load i64, i64* %29, align 8, !dbg !2589
  %6382 = load i64, i64* %20, align 8, !dbg !2589
  %6383 = icmp ult i64 %6381, %6382, !dbg !2589
  %6384 = load i32, i32* @x.35
  %6385 = load i32, i32* @y.36
  %6386 = sub i32 %6384, 1
  %6387 = mul i32 %6384, %6386
  %6388 = urem i32 %6387, 2
  %6389 = icmp eq i32 %6388, 0
  %6390 = icmp slt i32 %6385, 10
  %6391 = or i1 %6389, %6390
  br i1 %6391, label %originalBBpart22100, label %originalBB2098alteredBB

originalBBpart22100:                              ; preds = %originalBB2098
  br i1 %6383, label %6392, label %6412, !dbg !2592

6392:                                             ; preds = %originalBBpart22100
  %6393 = load i32, i32* @x.35
  %6394 = load i32, i32* @y.36
  %6395 = sub i32 %6393, 1
  %6396 = mul i32 %6393, %6395
  %6397 = urem i32 %6396, 2
  %6398 = icmp eq i32 %6397, 0
  %6399 = icmp slt i32 %6394, 10
  %6400 = or i1 %6398, %6399
  br i1 %6400, label %originalBB2102, label %originalBB2102alteredBB

originalBB2102:                                   ; preds = %6392, %originalBB2102alteredBB
  %6401 = load i8*, i8** %19, align 8, !dbg !2589
  %6402 = load i64, i64* %29, align 8, !dbg !2589
  %6403 = getelementptr inbounds i8, i8* %6401, i64 %6402, !dbg !2589
  store i8 39, i8* %6403, align 1, !dbg !2589
  %6404 = load i32, i32* @x.35
  %6405 = load i32, i32* @y.36
  %6406 = sub i32 %6404, 1
  %6407 = mul i32 %6404, %6406
  %6408 = urem i32 %6407, 2
  %6409 = icmp eq i32 %6408, 0
  %6410 = icmp slt i32 %6405, 10
  %6411 = or i1 %6409, %6410
  br i1 %6411, label %originalBBpart22104, label %originalBB2102alteredBB

originalBBpart22104:                              ; preds = %originalBB2102
  br label %6412, !dbg !2589

6412:                                             ; preds = %originalBBpart22104, %originalBBpart22100
  %6413 = load i32, i32* @x.35
  %6414 = load i32, i32* @y.36
  %6415 = sub i32 %6413, 1
  %6416 = mul i32 %6413, %6415
  %6417 = urem i32 %6416, 2
  %6418 = icmp eq i32 %6417, 0
  %6419 = icmp slt i32 %6414, 10
  %6420 = or i1 %6418, %6419
  br i1 %6420, label %originalBB2106, label %originalBB2106alteredBB

originalBB2106:                                   ; preds = %6412, %originalBB2106alteredBB
  %6421 = load i64, i64* %29, align 8, !dbg !2592
  %6422 = add i64 %6421, 1, !dbg !2592
  store i64 %6422, i64* %29, align 8, !dbg !2592
  %6423 = load i32, i32* @x.35
  %6424 = load i32, i32* @y.36
  %6425 = sub i32 %6423, 1
  %6426 = mul i32 %6423, %6425
  %6427 = urem i32 %6426, 2
  %6428 = icmp eq i32 %6427, 0
  %6429 = icmp slt i32 %6424, 10
  %6430 = or i1 %6428, %6429
  br i1 %6430, label %originalBBpart22108, label %originalBB2106alteredBB

originalBBpart22108:                              ; preds = %originalBB2106
  br label %6431, !dbg !2592

6431:                                             ; preds = %originalBBpart22108
  %6432 = load i32, i32* @x.35
  %6433 = load i32, i32* @y.36
  %6434 = sub i32 %6432, 1
  %6435 = mul i32 %6432, %6434
  %6436 = urem i32 %6435, 2
  %6437 = icmp eq i32 %6436, 0
  %6438 = icmp slt i32 %6433, 10
  %6439 = or i1 %6437, %6438
  br i1 %6439, label %originalBB2110, label %originalBB2110alteredBB

originalBB2110:                                   ; preds = %6431, %originalBB2110alteredBB
  %6440 = load i32, i32* @x.35
  %6441 = load i32, i32* @y.36
  %6442 = sub i32 %6440, 1
  %6443 = mul i32 %6440, %6442
  %6444 = urem i32 %6443, 2
  %6445 = icmp eq i32 %6444, 0
  %6446 = icmp slt i32 %6441, 10
  %6447 = or i1 %6445, %6446
  br i1 %6447, label %originalBBpart22112, label %originalBB2110alteredBB

originalBBpart22112:                              ; preds = %originalBB2110
  br label %6448, !dbg !2587

6448:                                             ; preds = %originalBBpart22112
  %6449 = load i32, i32* @x.35
  %6450 = load i32, i32* @y.36
  %6451 = sub i32 %6449, 1
  %6452 = mul i32 %6449, %6451
  %6453 = urem i32 %6452, 2
  %6454 = icmp eq i32 %6453, 0
  %6455 = icmp slt i32 %6450, 10
  %6456 = or i1 %6454, %6455
  br i1 %6456, label %originalBB2114, label %originalBB2114alteredBB

originalBB2114:                                   ; preds = %6448, %originalBB2114alteredBB
  %6457 = load i64, i64* %29, align 8, !dbg !2593
  %6458 = load i64, i64* %20, align 8, !dbg !2593
  %6459 = icmp ult i64 %6457, %6458, !dbg !2593
  %6460 = load i32, i32* @x.35
  %6461 = load i32, i32* @y.36
  %6462 = sub i32 %6460, 1
  %6463 = mul i32 %6460, %6462
  %6464 = urem i32 %6463, 2
  %6465 = icmp eq i32 %6464, 0
  %6466 = icmp slt i32 %6461, 10
  %6467 = or i1 %6465, %6466
  br i1 %6467, label %originalBBpart22116, label %originalBB2114alteredBB

originalBBpart22116:                              ; preds = %originalBB2114
  br i1 %6459, label %6468, label %6488, !dbg !2596

6468:                                             ; preds = %originalBBpart22116
  %6469 = load i32, i32* @x.35
  %6470 = load i32, i32* @y.36
  %6471 = sub i32 %6469, 1
  %6472 = mul i32 %6469, %6471
  %6473 = urem i32 %6472, 2
  %6474 = icmp eq i32 %6473, 0
  %6475 = icmp slt i32 %6470, 10
  %6476 = or i1 %6474, %6475
  br i1 %6476, label %originalBB2118, label %originalBB2118alteredBB

originalBB2118:                                   ; preds = %6468, %originalBB2118alteredBB
  %6477 = load i8*, i8** %19, align 8, !dbg !2593
  %6478 = load i64, i64* %29, align 8, !dbg !2593
  %6479 = getelementptr inbounds i8, i8* %6477, i64 %6478, !dbg !2593
  store i8 39, i8* %6479, align 1, !dbg !2593
  %6480 = load i32, i32* @x.35
  %6481 = load i32, i32* @y.36
  %6482 = sub i32 %6480, 1
  %6483 = mul i32 %6480, %6482
  %6484 = urem i32 %6483, 2
  %6485 = icmp eq i32 %6484, 0
  %6486 = icmp slt i32 %6481, 10
  %6487 = or i1 %6485, %6486
  br i1 %6487, label %originalBBpart22120, label %originalBB2118alteredBB

originalBBpart22120:                              ; preds = %originalBB2118
  br label %6488, !dbg !2593

6488:                                             ; preds = %originalBBpart22120, %originalBBpart22116
  %6489 = load i32, i32* @x.35
  %6490 = load i32, i32* @y.36
  %6491 = sub i32 %6489, 1
  %6492 = mul i32 %6489, %6491
  %6493 = urem i32 %6492, 2
  %6494 = icmp eq i32 %6493, 0
  %6495 = icmp slt i32 %6490, 10
  %6496 = or i1 %6494, %6495
  br i1 %6496, label %originalBB2122, label %originalBB2122alteredBB

originalBB2122:                                   ; preds = %6488, %originalBB2122alteredBB
  %6497 = load i64, i64* %29, align 8, !dbg !2596
  %6498 = add i64 %6497, 1, !dbg !2596
  store i64 %6498, i64* %29, align 8, !dbg !2596
  %6499 = load i32, i32* @x.35
  %6500 = load i32, i32* @y.36
  %6501 = sub i32 %6499, 1
  %6502 = mul i32 %6499, %6501
  %6503 = urem i32 %6502, 2
  %6504 = icmp eq i32 %6503, 0
  %6505 = icmp slt i32 %6500, 10
  %6506 = or i1 %6504, %6505
  br i1 %6506, label %originalBBpart22132, label %originalBB2122alteredBB

originalBBpart22132:                              ; preds = %originalBB2122
  br label %6507, !dbg !2596

6507:                                             ; preds = %originalBBpart22132
  %6508 = load i32, i32* @x.35
  %6509 = load i32, i32* @y.36
  %6510 = sub i32 %6508, 1
  %6511 = mul i32 %6508, %6510
  %6512 = urem i32 %6511, 2
  %6513 = icmp eq i32 %6512, 0
  %6514 = icmp slt i32 %6509, 10
  %6515 = or i1 %6513, %6514
  br i1 %6515, label %originalBB2134, label %originalBB2134alteredBB

originalBB2134:                                   ; preds = %6507, %originalBB2134alteredBB
  store i8 0, i8* %36, align 1, !dbg !2587
  %6516 = load i32, i32* @x.35
  %6517 = load i32, i32* @y.36
  %6518 = sub i32 %6516, 1
  %6519 = mul i32 %6516, %6518
  %6520 = urem i32 %6519, 2
  %6521 = icmp eq i32 %6520, 0
  %6522 = icmp slt i32 %6517, 10
  %6523 = or i1 %6521, %6522
  br i1 %6523, label %originalBBpart22136, label %originalBB2134alteredBB

originalBBpart22136:                              ; preds = %originalBB2134
  br label %6524, !dbg !2587

6524:                                             ; preds = %originalBBpart22136, %originalBBpart22092, %originalBBpart22088
  %6525 = load i32, i32* @x.35
  %6526 = load i32, i32* @y.36
  %6527 = sub i32 %6525, 1
  %6528 = mul i32 %6525, %6527
  %6529 = urem i32 %6528, 2
  %6530 = icmp eq i32 %6529, 0
  %6531 = icmp slt i32 %6526, 10
  %6532 = or i1 %6530, %6531
  br i1 %6532, label %originalBB2138, label %originalBB2138alteredBB

originalBB2138:                                   ; preds = %6524, %originalBB2138alteredBB
  %6533 = load i32, i32* @x.35
  %6534 = load i32, i32* @y.36
  %6535 = sub i32 %6533, 1
  %6536 = mul i32 %6533, %6535
  %6537 = urem i32 %6536, 2
  %6538 = icmp eq i32 %6537, 0
  %6539 = icmp slt i32 %6534, 10
  %6540 = or i1 %6538, %6539
  br i1 %6540, label %originalBBpart22140, label %originalBB2138alteredBB

originalBBpart22140:                              ; preds = %originalBB2138
  br label %6541, !dbg !2586

6541:                                             ; preds = %originalBBpart22140
  %6542 = load i32, i32* @x.35
  %6543 = load i32, i32* @y.36
  %6544 = sub i32 %6542, 1
  %6545 = mul i32 %6542, %6544
  %6546 = urem i32 %6545, 2
  %6547 = icmp eq i32 %6546, 0
  %6548 = icmp slt i32 %6543, 10
  %6549 = or i1 %6547, %6548
  br i1 %6549, label %originalBB2142, label %originalBB2142alteredBB

originalBB2142:                                   ; preds = %6541, %originalBB2142alteredBB
  %6550 = load i32, i32* @x.35
  %6551 = load i32, i32* @y.36
  %6552 = sub i32 %6550, 1
  %6553 = mul i32 %6550, %6552
  %6554 = urem i32 %6553, 2
  %6555 = icmp eq i32 %6554, 0
  %6556 = icmp slt i32 %6551, 10
  %6557 = or i1 %6555, %6556
  br i1 %6557, label %originalBBpart22144, label %originalBB2142alteredBB

originalBBpart22144:                              ; preds = %originalBB2142
  br label %6558, !dbg !2597

6558:                                             ; preds = %originalBBpart22144
  %6559 = load i32, i32* @x.35
  %6560 = load i32, i32* @y.36
  %6561 = sub i32 %6559, 1
  %6562 = mul i32 %6559, %6561
  %6563 = urem i32 %6562, 2
  %6564 = icmp eq i32 %6563, 0
  %6565 = icmp slt i32 %6560, 10
  %6566 = or i1 %6564, %6565
  br i1 %6566, label %originalBB2146, label %originalBB2146alteredBB

originalBB2146:                                   ; preds = %6558, %originalBB2146alteredBB
  %6567 = load i64, i64* %29, align 8, !dbg !2598
  %6568 = load i64, i64* %20, align 8, !dbg !2598
  %6569 = trunc i64 %6567 to i32
  %6570 = mul i32 %6569, -2
  %6571 = add i32 %6570, -2
  %6572 = trunc i64 %6568 to i32
  %6573 = mul i32 %6572, 2
  %6574 = add i32 %6573, 3
  %6575 = mul i32 %6571, %6571
  %6576 = mul i32 %6574, %6574
  %6577 = add i32 %6575, %6576
  %6578 = mul i32 %6571, %6574
  %6579 = mul i32 %6578, 2
  %6580 = sub i32 %6577, %6579
  %6581 = mul i32 %6580, 3
  %6582 = add i32 %6581, -1
  %6583 = icmp eq i32 %6582, -4
  %6584 = load i32, i32* @x.35
  %6585 = load i32, i32* @y.36
  %6586 = sub i32 %6584, 1
  %6587 = mul i32 %6584, %6586
  %6588 = urem i32 %6587, 2
  %6589 = icmp eq i32 %6588, 0
  %6590 = icmp slt i32 %6585, 10
  %6591 = or i1 %6589, %6590
  br i1 %6591, label %originalBBpart22246, label %originalBB2146alteredBB

originalBBpart22246:                              ; preds = %originalBB2146
  br i1 %6583, label %6592, label %6609

6592:                                             ; preds = %originalBBpart22246
  %6593 = load i32, i32* @x.35
  %6594 = load i32, i32* @y.36
  %6595 = sub i32 %6593, 1
  %6596 = mul i32 %6593, %6595
  %6597 = urem i32 %6596, 2
  %6598 = icmp eq i32 %6597, 0
  %6599 = icmp slt i32 %6594, 10
  %6600 = or i1 %6598, %6599
  br i1 %6600, label %originalBB2248, label %originalBB2248alteredBB

originalBB2248:                                   ; preds = %6592, %originalBB2248alteredBB
  %6601 = load i32, i32* @x.35
  %6602 = load i32, i32* @y.36
  %6603 = sub i32 %6601, 1
  %6604 = mul i32 %6601, %6603
  %6605 = urem i32 %6604, 2
  %6606 = icmp eq i32 %6605, 0
  %6607 = icmp slt i32 %6602, 10
  %6608 = or i1 %6606, %6607
  br i1 %6608, label %originalBBpart22250, label %originalBB2248alteredBB

originalBBpart22250:                              ; preds = %originalBB2248
  ret i64 0

6609:                                             ; preds = %originalBBpart22246
  %6610 = load i32, i32* @x.35
  %6611 = load i32, i32* @y.36
  %6612 = sub i32 %6610, 1
  %6613 = mul i32 %6610, %6612
  %6614 = urem i32 %6613, 2
  %6615 = icmp eq i32 %6614, 0
  %6616 = icmp slt i32 %6611, 10
  %6617 = or i1 %6615, %6616
  br i1 %6617, label %originalBB2252, label %originalBB2252alteredBB

originalBB2252:                                   ; preds = %6609, %originalBB2252alteredBB
  %6618 = icmp ult i64 %6567, %6568, !dbg !2598
  %6619 = load i32, i32* @x.35
  %6620 = load i32, i32* @y.36
  %6621 = sub i32 %6619, 1
  %6622 = mul i32 %6619, %6621
  %6623 = urem i32 %6622, 2
  %6624 = icmp eq i32 %6623, 0
  %6625 = icmp slt i32 %6620, 10
  %6626 = or i1 %6624, %6625
  br i1 %6626, label %originalBBpart22254, label %originalBB2252alteredBB

originalBBpart22254:                              ; preds = %originalBB2252
  br i1 %6618, label %6627, label %6648, !dbg !2601

6627:                                             ; preds = %originalBBpart22254
  %6628 = load i32, i32* @x.35
  %6629 = load i32, i32* @y.36
  %6630 = sub i32 %6628, 1
  %6631 = mul i32 %6628, %6630
  %6632 = urem i32 %6631, 2
  %6633 = icmp eq i32 %6632, 0
  %6634 = icmp slt i32 %6629, 10
  %6635 = or i1 %6633, %6634
  br i1 %6635, label %originalBB2256, label %originalBB2256alteredBB

originalBB2256:                                   ; preds = %6627, %originalBB2256alteredBB
  %6636 = load i8, i8* %39, align 1, !dbg !2598
  %6637 = load i8*, i8** %19, align 8, !dbg !2598
  %6638 = load i64, i64* %29, align 8, !dbg !2598
  %6639 = getelementptr inbounds i8, i8* %6637, i64 %6638, !dbg !2598
  store i8 %6636, i8* %6639, align 1, !dbg !2598
  %6640 = load i32, i32* @x.35
  %6641 = load i32, i32* @y.36
  %6642 = sub i32 %6640, 1
  %6643 = mul i32 %6640, %6642
  %6644 = urem i32 %6643, 2
  %6645 = icmp eq i32 %6644, 0
  %6646 = icmp slt i32 %6641, 10
  %6647 = or i1 %6645, %6646
  br i1 %6647, label %originalBBpart22258, label %originalBB2256alteredBB

originalBBpart22258:                              ; preds = %originalBB2256
  br label %6648, !dbg !2598

6648:                                             ; preds = %originalBBpart22258, %originalBBpart22254
  %6649 = load i32, i32* @x.35
  %6650 = load i32, i32* @y.36
  %6651 = sub i32 %6649, 1
  %6652 = mul i32 %6649, %6651
  %6653 = urem i32 %6652, 2
  %6654 = icmp eq i32 %6653, 0
  %6655 = icmp slt i32 %6650, 10
  %6656 = or i1 %6654, %6655
  br i1 %6656, label %originalBB2260, label %originalBB2260alteredBB

originalBB2260:                                   ; preds = %6648, %originalBB2260alteredBB
  %6657 = load i64, i64* %29, align 8, !dbg !2601
  %6658 = add i64 %6657, 1, !dbg !2601
  store i64 %6658, i64* %29, align 8, !dbg !2601
  %6659 = load i32, i32* @x.35
  %6660 = load i32, i32* @y.36
  %6661 = sub i32 %6659, 1
  %6662 = mul i32 %6659, %6661
  %6663 = urem i32 %6662, 2
  %6664 = icmp eq i32 %6663, 0
  %6665 = icmp slt i32 %6660, 10
  %6666 = or i1 %6664, %6665
  br i1 %6666, label %originalBBpart22268, label %originalBB2260alteredBB

originalBBpart22268:                              ; preds = %originalBB2260
  br label %6667, !dbg !2601

6667:                                             ; preds = %originalBBpart22268
  %6668 = load i32, i32* @x.35
  %6669 = load i32, i32* @y.36
  %6670 = sub i32 %6668, 1
  %6671 = mul i32 %6668, %6670
  %6672 = urem i32 %6671, 2
  %6673 = icmp eq i32 %6672, 0
  %6674 = icmp slt i32 %6669, 10
  %6675 = or i1 %6673, %6674
  br i1 %6675, label %originalBB2270, label %originalBB2270alteredBB

originalBB2270:                                   ; preds = %6667, %originalBB2270alteredBB
  %6676 = load i8, i8* %43, align 1, !dbg !2602
  %6677 = trunc i8 %6676 to i1, !dbg !2602
  %6678 = load i32, i32* @x.35
  %6679 = load i32, i32* @y.36
  %6680 = sub i32 %6678, 1
  %6681 = mul i32 %6678, %6680
  %6682 = urem i32 %6681, 2
  %6683 = icmp eq i32 %6682, 0
  %6684 = icmp slt i32 %6679, 10
  %6685 = or i1 %6683, %6684
  br i1 %6685, label %originalBBpart22272, label %originalBB2270alteredBB

originalBBpart22272:                              ; preds = %originalBB2270
  br i1 %6677, label %6703, label %6686, !dbg !2604

6686:                                             ; preds = %originalBBpart22272
  %6687 = load i32, i32* @x.35
  %6688 = load i32, i32* @y.36
  %6689 = sub i32 %6687, 1
  %6690 = mul i32 %6687, %6689
  %6691 = urem i32 %6690, 2
  %6692 = icmp eq i32 %6691, 0
  %6693 = icmp slt i32 %6688, 10
  %6694 = or i1 %6692, %6693
  br i1 %6694, label %originalBB2274, label %originalBB2274alteredBB

originalBB2274:                                   ; preds = %6686, %originalBB2274alteredBB
  store i8 0, i8* %38, align 1, !dbg !2605
  %6695 = load i32, i32* @x.35
  %6696 = load i32, i32* @y.36
  %6697 = sub i32 %6695, 1
  %6698 = mul i32 %6695, %6697
  %6699 = urem i32 %6698, 2
  %6700 = icmp eq i32 %6699, 0
  %6701 = icmp slt i32 %6696, 10
  %6702 = or i1 %6700, %6701
  br i1 %6702, label %originalBBpart22276, label %originalBB2274alteredBB

originalBBpart22276:                              ; preds = %originalBB2274
  br label %6703, !dbg !2606

6703:                                             ; preds = %originalBBpart22276, %originalBBpart22272
  %6704 = load i32, i32* @x.35
  %6705 = load i32, i32* @y.36
  %6706 = sub i32 %6704, 1
  %6707 = mul i32 %6704, %6706
  %6708 = urem i32 %6707, 2
  %6709 = icmp eq i32 %6708, 0
  %6710 = icmp slt i32 %6705, 10
  %6711 = or i1 %6709, %6710
  br i1 %6711, label %originalBB2278, label %originalBB2278alteredBB

originalBB2278:                                   ; preds = %6703, %originalBB2278alteredBB
  %6712 = load i32, i32* @x.35
  %6713 = load i32, i32* @y.36
  %6714 = sub i32 %6712, 1
  %6715 = mul i32 %6712, %6714
  %6716 = urem i32 %6715, 2
  %6717 = icmp eq i32 %6716, 0
  %6718 = icmp slt i32 %6713, 10
  %6719 = or i1 %6717, %6718
  br i1 %6719, label %originalBBpart22280, label %originalBB2278alteredBB

originalBBpart22280:                              ; preds = %originalBB2278
  br label %6720, !dbg !2607

6720:                                             ; preds = %originalBBpart22280, %originalBBpart2576
  %6721 = load i32, i32* @x.35
  %6722 = load i32, i32* @y.36
  %6723 = sub i32 %6721, 1
  %6724 = mul i32 %6721, %6723
  %6725 = urem i32 %6724, 2
  %6726 = icmp eq i32 %6725, 0
  %6727 = icmp slt i32 %6722, 10
  %6728 = or i1 %6726, %6727
  br i1 %6728, label %originalBB2282, label %originalBB2282alteredBB

originalBB2282:                                   ; preds = %6720, %originalBB2282alteredBB
  %6729 = load i64, i64* %28, align 8, !dbg !2608
  %6730 = add i64 %6729, 1, !dbg !2608
  store i64 %6730, i64* %28, align 8, !dbg !2608
  %6731 = load i32, i32* @x.35
  %6732 = load i32, i32* @y.36
  %6733 = sub i32 %6731, 1
  %6734 = mul i32 %6731, %6733
  %6735 = urem i32 %6734, 2
  %6736 = icmp eq i32 %6735, 0
  %6737 = icmp slt i32 %6732, 10
  %6738 = or i1 %6736, %6737
  br i1 %6738, label %originalBBpart22294, label %originalBB2282alteredBB

originalBBpart22294:                              ; preds = %originalBB2282
  br label %762, !dbg !2609, !llvm.loop !2610

6739:                                             ; preds = %originalBBpart2222
  %6740 = load i32, i32* @x.35
  %6741 = load i32, i32* @y.36
  %6742 = sub i32 %6740, 1
  %6743 = mul i32 %6740, %6742
  %6744 = urem i32 %6743, 2
  %6745 = icmp eq i32 %6744, 0
  %6746 = icmp slt i32 %6741, 10
  %6747 = or i1 %6745, %6746
  br i1 %6747, label %originalBB2296, label %originalBB2296alteredBB

originalBB2296:                                   ; preds = %6739, %originalBB2296alteredBB
  %6748 = load i64, i64* %29, align 8, !dbg !2612
  %6749 = icmp eq i64 %6748, 0, !dbg !2614
  %6750 = load i32, i32* @x.35
  %6751 = load i32, i32* @y.36
  %6752 = sub i32 %6750, 1
  %6753 = mul i32 %6750, %6752
  %6754 = urem i32 %6753, 2
  %6755 = icmp eq i32 %6754, 0
  %6756 = icmp slt i32 %6751, 10
  %6757 = or i1 %6755, %6756
  br i1 %6757, label %originalBBpart22298, label %originalBB2296alteredBB

originalBBpart22298:                              ; preds = %originalBB2296
  br i1 %6749, label %6758, label %6813, !dbg !2615

6758:                                             ; preds = %originalBBpart22298
  %6759 = load i32, i32* @x.35
  %6760 = load i32, i32* @y.36
  %6761 = sub i32 %6759, 1
  %6762 = mul i32 %6759, %6761
  %6763 = urem i32 %6762, 2
  %6764 = icmp eq i32 %6763, 0
  %6765 = icmp slt i32 %6760, 10
  %6766 = or i1 %6764, %6765
  br i1 %6766, label %originalBB2300, label %originalBB2300alteredBB

originalBB2300:                                   ; preds = %6758, %originalBB2300alteredBB
  %6767 = load i32, i32* %23, align 4, !dbg !2616
  %6768 = icmp eq i32 %6767, 2, !dbg !2617
  %6769 = load i32, i32* @x.35
  %6770 = load i32, i32* @y.36
  %6771 = sub i32 %6769, 1
  %6772 = mul i32 %6769, %6771
  %6773 = urem i32 %6772, 2
  %6774 = icmp eq i32 %6773, 0
  %6775 = icmp slt i32 %6770, 10
  %6776 = or i1 %6774, %6775
  br i1 %6776, label %originalBBpart22302, label %originalBB2300alteredBB

originalBBpart22302:                              ; preds = %originalBB2300
  br i1 %6768, label %6777, label %6813, !dbg !2618

6777:                                             ; preds = %originalBBpart22302
  %6778 = load i32, i32* @x.35
  %6779 = load i32, i32* @y.36
  %6780 = sub i32 %6778, 1
  %6781 = mul i32 %6778, %6780
  %6782 = urem i32 %6781, 2
  %6783 = icmp eq i32 %6782, 0
  %6784 = icmp slt i32 %6779, 10
  %6785 = or i1 %6783, %6784
  br i1 %6785, label %originalBB2304, label %originalBB2304alteredBB

originalBB2304:                                   ; preds = %6777, %originalBB2304alteredBB
  %6786 = load i8, i8* %35, align 1, !dbg !2619
  %6787 = trunc i8 %6786 to i1, !dbg !2619
  %6788 = load i32, i32* @x.35
  %6789 = load i32, i32* @y.36
  %6790 = sub i32 %6788, 1
  %6791 = mul i32 %6788, %6790
  %6792 = urem i32 %6791, 2
  %6793 = icmp eq i32 %6792, 0
  %6794 = icmp slt i32 %6789, 10
  %6795 = or i1 %6793, %6794
  br i1 %6795, label %originalBBpart22306, label %originalBB2304alteredBB

originalBBpart22306:                              ; preds = %originalBB2304
  br i1 %6787, label %6796, label %6813, !dbg !2620

6796:                                             ; preds = %originalBBpart22306
  %6797 = load i32, i32* @x.35
  %6798 = load i32, i32* @y.36
  %6799 = sub i32 %6797, 1
  %6800 = mul i32 %6797, %6799
  %6801 = urem i32 %6800, 2
  %6802 = icmp eq i32 %6801, 0
  %6803 = icmp slt i32 %6798, 10
  %6804 = or i1 %6802, %6803
  br i1 %6804, label %originalBB2308, label %originalBB2308alteredBB

originalBB2308:                                   ; preds = %6796, %originalBB2308alteredBB
  %6805 = load i32, i32* @x.35
  %6806 = load i32, i32* @y.36
  %6807 = sub i32 %6805, 1
  %6808 = mul i32 %6805, %6807
  %6809 = urem i32 %6808, 2
  %6810 = icmp eq i32 %6809, 0
  %6811 = icmp slt i32 %6806, 10
  %6812 = or i1 %6810, %6811
  br i1 %6812, label %originalBBpart22310, label %originalBB2308alteredBB

originalBBpart22310:                              ; preds = %originalBB2308
  br label %7269, !dbg !2621

6813:                                             ; preds = %originalBBpart22306, %originalBBpart22302, %originalBBpart22298
  %6814 = load i32, i32* @x.35
  %6815 = load i32, i32* @y.36
  %6816 = sub i32 %6814, 1
  %6817 = mul i32 %6814, %6816
  %6818 = urem i32 %6817, 2
  %6819 = icmp eq i32 %6818, 0
  %6820 = icmp slt i32 %6815, 10
  %6821 = or i1 %6819, %6820
  br i1 %6821, label %originalBB2312, label %originalBB2312alteredBB

originalBB2312:                                   ; preds = %6813, %originalBB2312alteredBB
  %6822 = load i32, i32* %23, align 4, !dbg !2622
  %6823 = icmp eq i32 %6822, 2, !dbg !2624
  %6824 = load i32, i32* @x.35
  %6825 = load i32, i32* @y.36
  %6826 = sub i32 %6824, 1
  %6827 = mul i32 %6824, %6826
  %6828 = urem i32 %6827, 2
  %6829 = icmp eq i32 %6828, 0
  %6830 = icmp slt i32 %6825, 10
  %6831 = or i1 %6829, %6830
  br i1 %6831, label %originalBBpart22314, label %originalBB2312alteredBB

originalBBpart22314:                              ; preds = %originalBB2312
  br i1 %6823, label %6832, label %7005, !dbg !2625

6832:                                             ; preds = %originalBBpart22314
  %6833 = load i32, i32* @x.35
  %6834 = load i32, i32* @y.36
  %6835 = sub i32 %6833, 1
  %6836 = mul i32 %6833, %6835
  %6837 = urem i32 %6836, 2
  %6838 = icmp eq i32 %6837, 0
  %6839 = icmp slt i32 %6834, 10
  %6840 = or i1 %6838, %6839
  br i1 %6840, label %originalBB2316, label %originalBB2316alteredBB

originalBB2316:                                   ; preds = %6832, %originalBB2316alteredBB
  %6841 = load i8, i8* %35, align 1, !dbg !2626
  %6842 = trunc i8 %6841 to i1, !dbg !2626
  %6843 = load i32, i32* @x.35
  %6844 = load i32, i32* @y.36
  %6845 = sub i32 %6843, 1
  %6846 = mul i32 %6843, %6845
  %6847 = urem i32 %6846, 2
  %6848 = icmp eq i32 %6847, 0
  %6849 = icmp slt i32 %6844, 10
  %6850 = or i1 %6848, %6849
  br i1 %6850, label %originalBBpart22318, label %originalBB2316alteredBB

originalBBpart22318:                              ; preds = %originalBB2316
  br i1 %6842, label %7005, label %6851, !dbg !2627

6851:                                             ; preds = %originalBBpart22318
  %6852 = load i32, i32* @x.35
  %6853 = load i32, i32* @y.36
  %6854 = sub i32 %6852, 1
  %6855 = mul i32 %6852, %6854
  %6856 = urem i32 %6855, 2
  %6857 = icmp eq i32 %6856, 0
  %6858 = icmp slt i32 %6853, 10
  %6859 = or i1 %6857, %6858
  br i1 %6859, label %originalBB2320, label %originalBB2320alteredBB

originalBB2320:                                   ; preds = %6851, %originalBB2320alteredBB
  %6860 = load i8, i8* %37, align 1, !dbg !2628
  %6861 = trunc i8 %6860 to i1, !dbg !2628
  %6862 = load i32, i32* @x.35
  %6863 = load i32, i32* @y.36
  %6864 = sub i32 %6862, 1
  %6865 = mul i32 %6862, %6864
  %6866 = urem i32 %6865, 2
  %6867 = icmp eq i32 %6866, 0
  %6868 = icmp slt i32 %6863, 10
  %6869 = or i1 %6867, %6868
  br i1 %6869, label %originalBBpart22322, label %originalBB2320alteredBB

originalBBpart22322:                              ; preds = %originalBB2320
  br i1 %6861, label %6870, label %7005, !dbg !2629

6870:                                             ; preds = %originalBBpart22322
  %6871 = load i32, i32* @x.35
  %6872 = load i32, i32* @y.36
  %6873 = sub i32 %6871, 1
  %6874 = mul i32 %6871, %6873
  %6875 = urem i32 %6874, 2
  %6876 = icmp eq i32 %6875, 0
  %6877 = icmp slt i32 %6872, 10
  %6878 = or i1 %6876, %6877
  br i1 %6878, label %originalBB2324, label %originalBB2324alteredBB

originalBB2324:                                   ; preds = %6870, %originalBB2324alteredBB
  %6879 = load i8, i8* %38, align 1, !dbg !2630
  %6880 = trunc i8 %6879 to i1, !dbg !2630
  %6881 = load i32, i32* @x.35
  %6882 = load i32, i32* @y.36
  %6883 = sub i32 %6881, 1
  %6884 = mul i32 %6881, %6883
  %6885 = urem i32 %6884, 2
  %6886 = icmp eq i32 %6885, 0
  %6887 = icmp slt i32 %6882, 10
  %6888 = or i1 %6886, %6887
  br i1 %6888, label %originalBBpart22326, label %originalBB2324alteredBB

originalBBpart22326:                              ; preds = %originalBB2324
  br i1 %6880, label %6889, label %6915, !dbg !2633

6889:                                             ; preds = %originalBBpart22326
  %6890 = load i32, i32* @x.35
  %6891 = load i32, i32* @y.36
  %6892 = sub i32 %6890, 1
  %6893 = mul i32 %6890, %6892
  %6894 = urem i32 %6893, 2
  %6895 = icmp eq i32 %6894, 0
  %6896 = icmp slt i32 %6891, 10
  %6897 = or i1 %6895, %6896
  br i1 %6897, label %originalBB2328, label %originalBB2328alteredBB

originalBB2328:                                   ; preds = %6889, %originalBB2328alteredBB
  %6898 = load i8*, i8** %19, align 8, !dbg !2634
  %6899 = load i64, i64* %30, align 8, !dbg !2635
  %6900 = load i8*, i8** %21, align 8, !dbg !2636
  %6901 = load i64, i64* %22, align 8, !dbg !2637
  %6902 = load i32, i32* %24, align 4, !dbg !2638
  %6903 = load i32*, i32** %25, align 8, !dbg !2639
  %6904 = load i8*, i8** %26, align 8, !dbg !2640
  %6905 = load i8*, i8** %27, align 8, !dbg !2641
  %6906 = call i64 @quotearg_buffer_restyled(i8* %6898, i64 %6899, i8* %6900, i64 %6901, i32 5, i32 %6902, i32* %6903, i8* %6904, i8* %6905), !dbg !2642
  store i64 %6906, i64* %18, align 8, !dbg !2643
  %6907 = load i32, i32* @x.35
  %6908 = load i32, i32* @y.36
  %6909 = sub i32 %6907, 1
  %6910 = mul i32 %6907, %6909
  %6911 = urem i32 %6910, 2
  %6912 = icmp eq i32 %6911, 0
  %6913 = icmp slt i32 %6908, 10
  %6914 = or i1 %6912, %6913
  br i1 %6914, label %originalBBpart22330, label %originalBB2328alteredBB

originalBBpart22330:                              ; preds = %originalBB2328
  br label %7351, !dbg !2643

6915:                                             ; preds = %originalBBpart22326
  %6916 = load i32, i32* @x.35
  %6917 = load i32, i32* @y.36
  %6918 = sub i32 %6916, 1
  %6919 = mul i32 %6916, %6918
  %6920 = urem i32 %6919, 2
  %6921 = icmp eq i32 %6920, 0
  %6922 = icmp slt i32 %6917, 10
  %6923 = or i1 %6921, %6922
  br i1 %6923, label %originalBB2332, label %originalBB2332alteredBB

originalBB2332:                                   ; preds = %6915, %originalBB2332alteredBB
  %6924 = load i64, i64* %20, align 8, !dbg !2644
  %6925 = icmp ne i64 %6924, 0, !dbg !2644
  %6926 = load i32, i32* @x.35
  %6927 = load i32, i32* @y.36
  %6928 = sub i32 %6926, 1
  %6929 = mul i32 %6926, %6928
  %6930 = urem i32 %6929, 2
  %6931 = icmp eq i32 %6930, 0
  %6932 = icmp slt i32 %6927, 10
  %6933 = or i1 %6931, %6932
  br i1 %6933, label %originalBBpart22334, label %originalBB2332alteredBB

originalBBpart22334:                              ; preds = %originalBB2332
  br i1 %6925, label %6971, label %6934, !dbg !2646

6934:                                             ; preds = %originalBBpart22334
  %6935 = load i32, i32* @x.35
  %6936 = load i32, i32* @y.36
  %6937 = sub i32 %6935, 1
  %6938 = mul i32 %6935, %6937
  %6939 = urem i32 %6938, 2
  %6940 = icmp eq i32 %6939, 0
  %6941 = icmp slt i32 %6936, 10
  %6942 = or i1 %6940, %6941
  br i1 %6942, label %originalBB2336, label %originalBB2336alteredBB

originalBB2336:                                   ; preds = %6934, %originalBB2336alteredBB
  %6943 = load i64, i64* %30, align 8, !dbg !2647
  %6944 = icmp ne i64 %6943, 0, !dbg !2647
  %6945 = load i32, i32* @x.35
  %6946 = load i32, i32* @y.36
  %6947 = sub i32 %6945, 1
  %6948 = mul i32 %6945, %6947
  %6949 = urem i32 %6948, 2
  %6950 = icmp eq i32 %6949, 0
  %6951 = icmp slt i32 %6946, 10
  %6952 = or i1 %6950, %6951
  br i1 %6952, label %originalBBpart22338, label %originalBB2336alteredBB

originalBBpart22338:                              ; preds = %originalBB2336
  br i1 %6944, label %6953, label %6971, !dbg !2648

6953:                                             ; preds = %originalBBpart22338
  %6954 = load i32, i32* @x.35
  %6955 = load i32, i32* @y.36
  %6956 = sub i32 %6954, 1
  %6957 = mul i32 %6954, %6956
  %6958 = urem i32 %6957, 2
  %6959 = icmp eq i32 %6958, 0
  %6960 = icmp slt i32 %6955, 10
  %6961 = or i1 %6959, %6960
  br i1 %6961, label %originalBB2340, label %originalBB2340alteredBB

originalBB2340:                                   ; preds = %6953, %originalBB2340alteredBB
  %6962 = load i64, i64* %30, align 8, !dbg !2649
  store i64 %6962, i64* %20, align 8, !dbg !2651
  store i64 0, i64* %29, align 8, !dbg !2652
  %6963 = load i32, i32* @x.35
  %6964 = load i32, i32* @y.36
  %6965 = sub i32 %6963, 1
  %6966 = mul i32 %6963, %6965
  %6967 = urem i32 %6966, 2
  %6968 = icmp eq i32 %6967, 0
  %6969 = icmp slt i32 %6964, 10
  %6970 = or i1 %6968, %6969
  br i1 %6970, label %originalBBpart22342, label %originalBB2340alteredBB

originalBBpart22342:                              ; preds = %originalBB2340
  br label %66, !dbg !2653

6971:                                             ; preds = %originalBBpart22338, %originalBBpart22334
  %6972 = load i32, i32* @x.35
  %6973 = load i32, i32* @y.36
  %6974 = sub i32 %6972, 1
  %6975 = mul i32 %6972, %6974
  %6976 = urem i32 %6975, 2
  %6977 = icmp eq i32 %6976, 0
  %6978 = icmp slt i32 %6973, 10
  %6979 = or i1 %6977, %6978
  br i1 %6979, label %originalBB2344, label %originalBB2344alteredBB

originalBB2344:                                   ; preds = %6971, %originalBB2344alteredBB
  %6980 = load i32, i32* @x.35
  %6981 = load i32, i32* @y.36
  %6982 = sub i32 %6980, 1
  %6983 = mul i32 %6980, %6982
  %6984 = urem i32 %6983, 2
  %6985 = icmp eq i32 %6984, 0
  %6986 = icmp slt i32 %6981, 10
  %6987 = or i1 %6985, %6986
  br i1 %6987, label %originalBBpart22346, label %originalBB2344alteredBB

originalBBpart22346:                              ; preds = %originalBB2344
  br label %6988

6988:                                             ; preds = %originalBBpart22346
  %6989 = load i32, i32* @x.35
  %6990 = load i32, i32* @y.36
  %6991 = sub i32 %6989, 1
  %6992 = mul i32 %6989, %6991
  %6993 = urem i32 %6992, 2
  %6994 = icmp eq i32 %6993, 0
  %6995 = icmp slt i32 %6990, 10
  %6996 = or i1 %6994, %6995
  br i1 %6996, label %originalBB2348, label %originalBB2348alteredBB

originalBB2348:                                   ; preds = %6988, %originalBB2348alteredBB
  %6997 = load i32, i32* @x.35
  %6998 = load i32, i32* @y.36
  %6999 = sub i32 %6997, 1
  %7000 = mul i32 %6997, %6999
  %7001 = urem i32 %7000, 2
  %7002 = icmp eq i32 %7001, 0
  %7003 = icmp slt i32 %6998, 10
  %7004 = or i1 %7002, %7003
  br i1 %7004, label %originalBBpart22350, label %originalBB2348alteredBB

originalBBpart22350:                              ; preds = %originalBB2348
  br label %7005, !dbg !2654

7005:                                             ; preds = %originalBBpart22350, %originalBBpart22322, %originalBBpart22318, %originalBBpart22314
  %7006 = load i32, i32* @x.35
  %7007 = load i32, i32* @y.36
  %7008 = sub i32 %7006, 1
  %7009 = mul i32 %7006, %7008
  %7010 = urem i32 %7009, 2
  %7011 = icmp eq i32 %7010, 0
  %7012 = icmp slt i32 %7007, 10
  %7013 = or i1 %7011, %7012
  br i1 %7013, label %originalBB2352, label %originalBB2352alteredBB

originalBB2352:                                   ; preds = %7005, %originalBB2352alteredBB
  %7014 = load i8*, i8** %31, align 8, !dbg !2655
  %7015 = icmp ne i8* %7014, null, !dbg !2655
  %7016 = load i32, i32* @x.35
  %7017 = load i32, i32* @y.36
  %7018 = sub i32 %7016, 1
  %7019 = mul i32 %7016, %7018
  %7020 = urem i32 %7019, 2
  %7021 = icmp eq i32 %7020, 0
  %7022 = icmp slt i32 %7017, 10
  %7023 = or i1 %7021, %7022
  br i1 %7023, label %originalBBpart22354, label %originalBB2352alteredBB

originalBBpart22354:                              ; preds = %originalBB2352
  br i1 %7015, label %7024, label %7211, !dbg !2657

7024:                                             ; preds = %originalBBpart22354
  %7025 = load i32, i32* @x.35
  %7026 = load i32, i32* @y.36
  %7027 = sub i32 %7025, 1
  %7028 = mul i32 %7025, %7027
  %7029 = urem i32 %7028, 2
  %7030 = icmp eq i32 %7029, 0
  %7031 = icmp slt i32 %7026, 10
  %7032 = or i1 %7030, %7031
  br i1 %7032, label %originalBB2356, label %originalBB2356alteredBB

originalBB2356:                                   ; preds = %7024, %originalBB2356alteredBB
  %7033 = load i8, i8* %35, align 1, !dbg !2658
  %7034 = trunc i8 %7033 to i1, !dbg !2658
  %7035 = load i32, i32* @x.35
  %7036 = load i32, i32* @y.36
  %7037 = sub i32 %7035, 1
  %7038 = mul i32 %7035, %7037
  %7039 = urem i32 %7038, 2
  %7040 = icmp eq i32 %7039, 0
  %7041 = icmp slt i32 %7036, 10
  %7042 = or i1 %7040, %7041
  br i1 %7042, label %originalBBpart22358, label %originalBB2356alteredBB

originalBBpart22358:                              ; preds = %originalBB2356
  br i1 %7034, label %7211, label %7043, !dbg !2659

7043:                                             ; preds = %originalBBpart22358
  %7044 = load i32, i32* @x.35
  %7045 = load i32, i32* @y.36
  %7046 = sub i32 %7044, 1
  %7047 = mul i32 %7044, %7046
  %7048 = urem i32 %7047, 2
  %7049 = icmp eq i32 %7048, 0
  %7050 = icmp slt i32 %7045, 10
  %7051 = or i1 %7049, %7050
  br i1 %7051, label %originalBB2360, label %originalBB2360alteredBB

originalBB2360:                                   ; preds = %7043, %originalBB2360alteredBB
  %7052 = load i32, i32* @x.35
  %7053 = load i32, i32* @y.36
  %7054 = sub i32 %7052, 1
  %7055 = mul i32 %7052, %7054
  %7056 = urem i32 %7055, 2
  %7057 = icmp eq i32 %7056, 0
  %7058 = icmp slt i32 %7053, 10
  %7059 = or i1 %7057, %7058
  br i1 %7059, label %originalBBpart22362, label %originalBB2360alteredBB

originalBBpart22362:                              ; preds = %originalBB2360
  br label %7060, !dbg !2660

7060:                                             ; preds = %originalBBpart22403, %originalBBpart22362
  %7061 = load i32, i32* @x.35
  %7062 = load i32, i32* @y.36
  %7063 = sub i32 %7061, 1
  %7064 = mul i32 %7061, %7063
  %7065 = urem i32 %7064, 2
  %7066 = icmp eq i32 %7065, 0
  %7067 = icmp slt i32 %7062, 10
  %7068 = or i1 %7066, %7067
  br i1 %7068, label %originalBB2364, label %originalBB2364alteredBB

originalBB2364:                                   ; preds = %7060, %originalBB2364alteredBB
  %7069 = load i8*, i8** %31, align 8, !dbg !2661
  %7070 = load i8, i8* %7069, align 1, !dbg !2664
  %7071 = icmp ne i8 %7070, 0, !dbg !2665
  %7072 = load i32, i32* @x.35
  %7073 = load i32, i32* @y.36
  %7074 = sub i32 %7072, 1
  %7075 = mul i32 %7072, %7074
  %7076 = urem i32 %7075, 2
  %7077 = icmp eq i32 %7076, 0
  %7078 = icmp slt i32 %7073, 10
  %7079 = or i1 %7077, %7078
  br i1 %7079, label %originalBBpart22366, label %originalBB2364alteredBB

originalBBpart22366:                              ; preds = %originalBB2364
  br i1 %7071, label %7080, label %7194, !dbg !2665

7080:                                             ; preds = %originalBBpart22366
  %7081 = load i32, i32* @x.35
  %7082 = load i32, i32* @y.36
  %7083 = sub i32 %7081, 1
  %7084 = mul i32 %7081, %7083
  %7085 = urem i32 %7084, 2
  %7086 = icmp eq i32 %7085, 0
  %7087 = icmp slt i32 %7082, 10
  %7088 = or i1 %7086, %7087
  br i1 %7088, label %originalBB2368, label %originalBB2368alteredBB

originalBB2368:                                   ; preds = %7080, %originalBB2368alteredBB
  %7089 = load i32, i32* @x.35
  %7090 = load i32, i32* @y.36
  %7091 = sub i32 %7089, 1
  %7092 = mul i32 %7089, %7091
  %7093 = urem i32 %7092, 2
  %7094 = icmp eq i32 %7093, 0
  %7095 = icmp slt i32 %7090, 10
  %7096 = or i1 %7094, %7095
  br i1 %7096, label %originalBBpart22370, label %originalBB2368alteredBB

originalBBpart22370:                              ; preds = %originalBB2368
  br label %7097, !dbg !2666

7097:                                             ; preds = %originalBBpart22370
  %7098 = load i32, i32* @x.35
  %7099 = load i32, i32* @y.36
  %7100 = sub i32 %7098, 1
  %7101 = mul i32 %7098, %7100
  %7102 = urem i32 %7101, 2
  %7103 = icmp eq i32 %7102, 0
  %7104 = icmp slt i32 %7099, 10
  %7105 = or i1 %7103, %7104
  br i1 %7105, label %originalBB2372, label %originalBB2372alteredBB

originalBB2372:                                   ; preds = %7097, %originalBB2372alteredBB
  %7106 = load i64, i64* %29, align 8, !dbg !2667
  %7107 = load i64, i64* %20, align 8, !dbg !2667
  %7108 = icmp ult i64 %7106, %7107, !dbg !2667
  %7109 = load i32, i32* @x.35
  %7110 = load i32, i32* @y.36
  %7111 = sub i32 %7109, 1
  %7112 = mul i32 %7109, %7111
  %7113 = urem i32 %7112, 2
  %7114 = icmp eq i32 %7113, 0
  %7115 = icmp slt i32 %7110, 10
  %7116 = or i1 %7114, %7115
  br i1 %7116, label %originalBBpart22374, label %originalBB2372alteredBB

originalBBpart22374:                              ; preds = %originalBB2372
  br i1 %7108, label %7117, label %7139, !dbg !2670

7117:                                             ; preds = %originalBBpart22374
  %7118 = load i32, i32* @x.35
  %7119 = load i32, i32* @y.36
  %7120 = sub i32 %7118, 1
  %7121 = mul i32 %7118, %7120
  %7122 = urem i32 %7121, 2
  %7123 = icmp eq i32 %7122, 0
  %7124 = icmp slt i32 %7119, 10
  %7125 = or i1 %7123, %7124
  br i1 %7125, label %originalBB2376, label %originalBB2376alteredBB

originalBB2376:                                   ; preds = %7117, %originalBB2376alteredBB
  %7126 = load i8*, i8** %31, align 8, !dbg !2667
  %7127 = load i8, i8* %7126, align 1, !dbg !2667
  %7128 = load i8*, i8** %19, align 8, !dbg !2667
  %7129 = load i64, i64* %29, align 8, !dbg !2667
  %7130 = getelementptr inbounds i8, i8* %7128, i64 %7129, !dbg !2667
  store i8 %7127, i8* %7130, align 1, !dbg !2667
  %7131 = load i32, i32* @x.35
  %7132 = load i32, i32* @y.36
  %7133 = sub i32 %7131, 1
  %7134 = mul i32 %7131, %7133
  %7135 = urem i32 %7134, 2
  %7136 = icmp eq i32 %7135, 0
  %7137 = icmp slt i32 %7132, 10
  %7138 = or i1 %7136, %7137
  br i1 %7138, label %originalBBpart22378, label %originalBB2376alteredBB

originalBBpart22378:                              ; preds = %originalBB2376
  br label %7139, !dbg !2667

7139:                                             ; preds = %originalBBpart22378, %originalBBpart22374
  %7140 = load i32, i32* @x.35
  %7141 = load i32, i32* @y.36
  %7142 = sub i32 %7140, 1
  %7143 = mul i32 %7140, %7142
  %7144 = urem i32 %7143, 2
  %7145 = icmp eq i32 %7144, 0
  %7146 = icmp slt i32 %7141, 10
  %7147 = or i1 %7145, %7146
  br i1 %7147, label %originalBB2380, label %originalBB2380alteredBB

originalBB2380:                                   ; preds = %7139, %originalBB2380alteredBB
  %7148 = load i64, i64* %29, align 8, !dbg !2670
  %7149 = add i64 %7148, 1, !dbg !2670
  store i64 %7149, i64* %29, align 8, !dbg !2670
  %7150 = load i32, i32* @x.35
  %7151 = load i32, i32* @y.36
  %7152 = sub i32 %7150, 1
  %7153 = mul i32 %7150, %7152
  %7154 = urem i32 %7153, 2
  %7155 = icmp eq i32 %7154, 0
  %7156 = icmp slt i32 %7151, 10
  %7157 = or i1 %7155, %7156
  br i1 %7157, label %originalBBpart22395, label %originalBB2380alteredBB

originalBBpart22395:                              ; preds = %originalBB2380
  br label %7158, !dbg !2670

7158:                                             ; preds = %originalBBpart22395
  %7159 = load i32, i32* @x.35
  %7160 = load i32, i32* @y.36
  %7161 = sub i32 %7159, 1
  %7162 = mul i32 %7159, %7161
  %7163 = urem i32 %7162, 2
  %7164 = icmp eq i32 %7163, 0
  %7165 = icmp slt i32 %7160, 10
  %7166 = or i1 %7164, %7165
  br i1 %7166, label %originalBB2397, label %originalBB2397alteredBB

originalBB2397:                                   ; preds = %7158, %originalBB2397alteredBB
  %7167 = load i32, i32* @x.35
  %7168 = load i32, i32* @y.36
  %7169 = sub i32 %7167, 1
  %7170 = mul i32 %7167, %7169
  %7171 = urem i32 %7170, 2
  %7172 = icmp eq i32 %7171, 0
  %7173 = icmp slt i32 %7168, 10
  %7174 = or i1 %7172, %7173
  br i1 %7174, label %originalBBpart22399, label %originalBB2397alteredBB

originalBBpart22399:                              ; preds = %originalBB2397
  br label %7175, !dbg !2670

7175:                                             ; preds = %originalBBpart22399
  %7176 = load i32, i32* @x.35
  %7177 = load i32, i32* @y.36
  %7178 = sub i32 %7176, 1
  %7179 = mul i32 %7176, %7178
  %7180 = urem i32 %7179, 2
  %7181 = icmp eq i32 %7180, 0
  %7182 = icmp slt i32 %7177, 10
  %7183 = or i1 %7181, %7182
  br i1 %7183, label %originalBB2401, label %originalBB2401alteredBB

originalBB2401:                                   ; preds = %7175, %originalBB2401alteredBB
  %7184 = load i8*, i8** %31, align 8, !dbg !2671
  %7185 = getelementptr inbounds i8, i8* %7184, i32 1, !dbg !2671
  store i8* %7185, i8** %31, align 8, !dbg !2671
  %7186 = load i32, i32* @x.35
  %7187 = load i32, i32* @y.36
  %7188 = sub i32 %7186, 1
  %7189 = mul i32 %7186, %7188
  %7190 = urem i32 %7189, 2
  %7191 = icmp eq i32 %7190, 0
  %7192 = icmp slt i32 %7187, 10
  %7193 = or i1 %7191, %7192
  br i1 %7193, label %originalBBpart22403, label %originalBB2401alteredBB

originalBBpart22403:                              ; preds = %originalBB2401
  br label %7060, !dbg !2672, !llvm.loop !2673

7194:                                             ; preds = %originalBBpart22366
  %7195 = load i32, i32* @x.35
  %7196 = load i32, i32* @y.36
  %7197 = sub i32 %7195, 1
  %7198 = mul i32 %7195, %7197
  %7199 = urem i32 %7198, 2
  %7200 = icmp eq i32 %7199, 0
  %7201 = icmp slt i32 %7196, 10
  %7202 = or i1 %7200, %7201
  br i1 %7202, label %originalBB2405, label %originalBB2405alteredBB

originalBB2405:                                   ; preds = %7194, %originalBB2405alteredBB
  %7203 = load i32, i32* @x.35
  %7204 = load i32, i32* @y.36
  %7205 = sub i32 %7203, 1
  %7206 = mul i32 %7203, %7205
  %7207 = urem i32 %7206, 2
  %7208 = icmp eq i32 %7207, 0
  %7209 = icmp slt i32 %7204, 10
  %7210 = or i1 %7208, %7209
  br i1 %7210, label %originalBBpart22407, label %originalBB2405alteredBB

originalBBpart22407:                              ; preds = %originalBB2405
  br label %7211, !dbg !2674

7211:                                             ; preds = %originalBBpart22407, %originalBBpart22358, %originalBBpart22354
  %7212 = load i32, i32* @x.35
  %7213 = load i32, i32* @y.36
  %7214 = sub i32 %7212, 1
  %7215 = mul i32 %7212, %7214
  %7216 = urem i32 %7215, 2
  %7217 = icmp eq i32 %7216, 0
  %7218 = icmp slt i32 %7213, 10
  %7219 = or i1 %7217, %7218
  br i1 %7219, label %originalBB2409, label %originalBB2409alteredBB

originalBB2409:                                   ; preds = %7211, %originalBB2409alteredBB
  %7220 = load i64, i64* %29, align 8, !dbg !2675
  %7221 = load i64, i64* %20, align 8, !dbg !2677
  %7222 = icmp ult i64 %7220, %7221, !dbg !2678
  %7223 = load i32, i32* @x.35
  %7224 = load i32, i32* @y.36
  %7225 = sub i32 %7223, 1
  %7226 = mul i32 %7223, %7225
  %7227 = urem i32 %7226, 2
  %7228 = icmp eq i32 %7227, 0
  %7229 = icmp slt i32 %7224, 10
  %7230 = or i1 %7228, %7229
  br i1 %7230, label %originalBBpart22411, label %originalBB2409alteredBB

originalBBpart22411:                              ; preds = %originalBB2409
  br i1 %7222, label %7231, label %7251, !dbg !2679

7231:                                             ; preds = %originalBBpart22411
  %7232 = load i32, i32* @x.35
  %7233 = load i32, i32* @y.36
  %7234 = sub i32 %7232, 1
  %7235 = mul i32 %7232, %7234
  %7236 = urem i32 %7235, 2
  %7237 = icmp eq i32 %7236, 0
  %7238 = icmp slt i32 %7233, 10
  %7239 = or i1 %7237, %7238
  br i1 %7239, label %originalBB2413, label %originalBB2413alteredBB

originalBB2413:                                   ; preds = %7231, %originalBB2413alteredBB
  %7240 = load i8*, i8** %19, align 8, !dbg !2680
  %7241 = load i64, i64* %29, align 8, !dbg !2681
  %7242 = getelementptr inbounds i8, i8* %7240, i64 %7241, !dbg !2680
  store i8 0, i8* %7242, align 1, !dbg !2682
  %7243 = load i32, i32* @x.35
  %7244 = load i32, i32* @y.36
  %7245 = sub i32 %7243, 1
  %7246 = mul i32 %7243, %7245
  %7247 = urem i32 %7246, 2
  %7248 = icmp eq i32 %7247, 0
  %7249 = icmp slt i32 %7244, 10
  %7250 = or i1 %7248, %7249
  br i1 %7250, label %originalBBpart22415, label %originalBB2413alteredBB

originalBBpart22415:                              ; preds = %originalBB2413
  br label %7251, !dbg !2680

7251:                                             ; preds = %originalBBpart22415, %originalBBpart22411
  %7252 = load i32, i32* @x.35
  %7253 = load i32, i32* @y.36
  %7254 = sub i32 %7252, 1
  %7255 = mul i32 %7252, %7254
  %7256 = urem i32 %7255, 2
  %7257 = icmp eq i32 %7256, 0
  %7258 = icmp slt i32 %7253, 10
  %7259 = or i1 %7257, %7258
  br i1 %7259, label %originalBB2417, label %originalBB2417alteredBB

originalBB2417:                                   ; preds = %7251, %originalBB2417alteredBB
  %7260 = load i64, i64* %29, align 8, !dbg !2683
  store i64 %7260, i64* %18, align 8, !dbg !2684
  %7261 = load i32, i32* @x.35
  %7262 = load i32, i32* @y.36
  %7263 = sub i32 %7261, 1
  %7264 = mul i32 %7261, %7263
  %7265 = urem i32 %7264, 2
  %7266 = icmp eq i32 %7265, 0
  %7267 = icmp slt i32 %7262, 10
  %7268 = or i1 %7266, %7267
  br i1 %7268, label %originalBBpart22419, label %originalBB2417alteredBB

originalBBpart22419:                              ; preds = %originalBB2417
  br label %7351, !dbg !2684

7269:                                             ; preds = %originalBBpart22310, %originalBBpart21964, %originalBBpart21518, %originalBBpart21409, %originalBBpart21152, %originalBBpart21136, %originalBBpart21072, %originalBBpart21036, %originalBBpart2812, %originalBBpart2596, %originalBBpart2295, %originalBBpart2271
  call void @llvm.dbg.label(metadata !2685), !dbg !2686
  %7270 = load i32, i32* @x.35
  %7271 = load i32, i32* @y.36
  %7272 = sub i32 %7270, 1
  %7273 = mul i32 %7270, %7272
  %7274 = urem i32 %7273, 2
  %7275 = icmp eq i32 %7274, 0
  %7276 = icmp slt i32 %7271, 10
  %7277 = or i1 %7275, %7276
  br i1 %7277, label %originalBB2421, label %originalBB2421alteredBB

originalBB2421:                                   ; preds = %7269, %originalBB2421alteredBB
  %7278 = load i32, i32* %23, align 4, !dbg !2687
  %7279 = icmp eq i32 %7278, 2, !dbg !2689
  %7280 = load i32, i32* @x.35
  %7281 = load i32, i32* @y.36
  %7282 = sub i32 %7280, 1
  %7283 = mul i32 %7280, %7282
  %7284 = urem i32 %7283, 2
  %7285 = icmp eq i32 %7284, 0
  %7286 = icmp slt i32 %7281, 10
  %7287 = or i1 %7285, %7286
  br i1 %7287, label %originalBBpart22423, label %originalBB2421alteredBB

originalBBpart22423:                              ; preds = %originalBB2421
  br i1 %7279, label %7288, label %7324, !dbg !2690

7288:                                             ; preds = %originalBBpart22423
  %7289 = load i32, i32* @x.35
  %7290 = load i32, i32* @y.36
  %7291 = sub i32 %7289, 1
  %7292 = mul i32 %7289, %7291
  %7293 = urem i32 %7292, 2
  %7294 = icmp eq i32 %7293, 0
  %7295 = icmp slt i32 %7290, 10
  %7296 = or i1 %7294, %7295
  br i1 %7296, label %originalBB2425, label %originalBB2425alteredBB

originalBB2425:                                   ; preds = %7288, %originalBB2425alteredBB
  %7297 = load i8, i8* %33, align 1, !dbg !2691
  %7298 = trunc i8 %7297 to i1, !dbg !2691
  %7299 = load i32, i32* @x.35
  %7300 = load i32, i32* @y.36
  %7301 = sub i32 %7299, 1
  %7302 = mul i32 %7299, %7301
  %7303 = urem i32 %7302, 2
  %7304 = icmp eq i32 %7303, 0
  %7305 = icmp slt i32 %7300, 10
  %7306 = or i1 %7304, %7305
  br i1 %7306, label %originalBBpart22427, label %originalBB2425alteredBB

originalBBpart22427:                              ; preds = %originalBB2425
  br i1 %7298, label %7307, label %7324, !dbg !2692

7307:                                             ; preds = %originalBBpart22427
  %7308 = load i32, i32* @x.35
  %7309 = load i32, i32* @y.36
  %7310 = sub i32 %7308, 1
  %7311 = mul i32 %7308, %7310
  %7312 = urem i32 %7311, 2
  %7313 = icmp eq i32 %7312, 0
  %7314 = icmp slt i32 %7309, 10
  %7315 = or i1 %7313, %7314
  br i1 %7315, label %originalBB2429, label %originalBB2429alteredBB

originalBB2429:                                   ; preds = %7307, %originalBB2429alteredBB
  store i32 4, i32* %23, align 4, !dbg !2693
  %7316 = load i32, i32* @x.35
  %7317 = load i32, i32* @y.36
  %7318 = sub i32 %7316, 1
  %7319 = mul i32 %7316, %7318
  %7320 = urem i32 %7319, 2
  %7321 = icmp eq i32 %7320, 0
  %7322 = icmp slt i32 %7317, 10
  %7323 = or i1 %7321, %7322
  br i1 %7323, label %originalBBpart22431, label %originalBB2429alteredBB

originalBBpart22431:                              ; preds = %originalBB2429
  br label %7324, !dbg !2694

7324:                                             ; preds = %originalBBpart22431, %originalBBpart22427, %originalBBpart22423
  %7325 = load i32, i32* @x.35
  %7326 = load i32, i32* @y.36
  %7327 = sub i32 %7325, 1
  %7328 = mul i32 %7325, %7327
  %7329 = urem i32 %7328, 2
  %7330 = icmp eq i32 %7329, 0
  %7331 = icmp slt i32 %7326, 10
  %7332 = or i1 %7330, %7331
  br i1 %7332, label %originalBB2433, label %originalBB2433alteredBB

originalBB2433:                                   ; preds = %7324, %originalBB2433alteredBB
  %7333 = load i8*, i8** %19, align 8, !dbg !2695
  %7334 = load i64, i64* %20, align 8, !dbg !2696
  %7335 = load i8*, i8** %21, align 8, !dbg !2697
  %7336 = load i64, i64* %22, align 8, !dbg !2698
  %7337 = load i32, i32* %23, align 4, !dbg !2699
  %7338 = load i32, i32* %24, align 4, !dbg !2700
  %7339 = and i32 %7338, -3, !dbg !2701
  %7340 = load i8*, i8** %26, align 8, !dbg !2702
  %7341 = load i8*, i8** %27, align 8, !dbg !2703
  %7342 = call i64 @quotearg_buffer_restyled(i8* %7333, i64 %7334, i8* %7335, i64 %7336, i32 %7337, i32 %7339, i32* null, i8* %7340, i8* %7341), !dbg !2704
  store i64 %7342, i64* %18, align 8, !dbg !2705
  %7343 = load i32, i32* @x.35
  %7344 = load i32, i32* @y.36
  %7345 = sub i32 %7343, 1
  %7346 = mul i32 %7343, %7345
  %7347 = urem i32 %7346, 2
  %7348 = icmp eq i32 %7347, 0
  %7349 = icmp slt i32 %7344, 10
  %7350 = or i1 %7348, %7349
  br i1 %7350, label %originalBBpart22436, label %originalBB2433alteredBB

originalBBpart22436:                              ; preds = %originalBB2433
  br label %7351, !dbg !2705

7351:                                             ; preds = %originalBBpart22436, %originalBBpart22419, %originalBBpart22330
  %7352 = load i32, i32* @x.35
  %7353 = load i32, i32* @y.36
  %7354 = sub i32 %7352, 1
  %7355 = mul i32 %7352, %7354
  %7356 = urem i32 %7355, 2
  %7357 = icmp eq i32 %7356, 0
  %7358 = icmp slt i32 %7353, 10
  %7359 = or i1 %7357, %7358
  br i1 %7359, label %originalBB2438, label %originalBB2438alteredBB

originalBB2438:                                   ; preds = %7351, %originalBB2438alteredBB
  %7360 = load i64, i64* %18, align 8, !dbg !2706
  %7361 = load i32, i32* @x.35
  %7362 = load i32, i32* @y.36
  %7363 = sub i32 %7361, 1
  %7364 = mul i32 %7361, %7363
  %7365 = urem i32 %7364, 2
  %7366 = icmp eq i32 %7365, 0
  %7367 = icmp slt i32 %7362, 10
  %7368 = or i1 %7366, %7367
  br i1 %7368, label %originalBBpart22440, label %originalBB2438alteredBB

originalBBpart22440:                              ; preds = %originalBB2438
  ret i64 %7360, !dbg !2706

originalBBalteredBB:                              ; preds = %originalBB, %9
  %7369 = alloca i64, align 8
  %7370 = alloca i8*, align 8
  %7371 = alloca i64, align 8
  %7372 = alloca i8*, align 8
  %7373 = alloca i64, align 8
  %7374 = alloca i32, align 4
  %7375 = alloca i32, align 4
  %7376 = alloca i32*, align 8
  %7377 = alloca i8*, align 8
  %7378 = alloca i8*, align 8
  %7379 = alloca i64, align 8
  %7380 = alloca i64, align 8
  %7381 = alloca i64, align 8
  %7382 = alloca i8*, align 8
  %7383 = alloca i64, align 8
  %7384 = alloca i8, align 1
  %7385 = alloca i8, align 1
  %7386 = alloca i8, align 1
  %7387 = alloca i8, align 1
  %7388 = alloca i8, align 1
  %7389 = alloca i8, align 1
  %7390 = alloca i8, align 1
  %7391 = alloca i8, align 1
  %7392 = alloca i8, align 1
  %7393 = alloca i8, align 1
  %7394 = alloca i8, align 1
  %7395 = alloca i64, align 8
  %7396 = alloca i8, align 1
  %7397 = alloca %struct.__mbstate_t, align 4
  %7398 = alloca i32, align 4
  %7399 = alloca i64, align 8
  %7400 = alloca i64, align 8
  %7401 = alloca i64, align 8
  store i8* %0, i8** %7370, align 8
  call void @llvm.dbg.declare(metadata i8** %7370, metadata !2707, metadata !DIExpression()), !dbg !1827
  store i64 %1, i64* %7371, align 8
  call void @llvm.dbg.declare(metadata i64* %7371, metadata !2739, metadata !DIExpression()), !dbg !1829
  store i8* %2, i8** %7372, align 8
  call void @llvm.dbg.declare(metadata i8** %7372, metadata !2740, metadata !DIExpression()), !dbg !1831
  store i64 %3, i64* %7373, align 8
  call void @llvm.dbg.declare(metadata i64* %7373, metadata !2741, metadata !DIExpression()), !dbg !1833
  store i32 %4, i32* %7374, align 4
  call void @llvm.dbg.declare(metadata i32* %7374, metadata !2742, metadata !DIExpression()), !dbg !1835
  store i32 %5, i32* %7375, align 4
  call void @llvm.dbg.declare(metadata i32* %7375, metadata !2743, metadata !DIExpression()), !dbg !1837
  store i32* %6, i32** %7376, align 8
  call void @llvm.dbg.declare(metadata i32** %7376, metadata !2744, metadata !DIExpression()), !dbg !1839
  store i8* %7, i8** %7377, align 8
  call void @llvm.dbg.declare(metadata i8** %7377, metadata !2745, metadata !DIExpression()), !dbg !1841
  store i8* %8, i8** %7378, align 8
  call void @llvm.dbg.declare(metadata i8** %7378, metadata !2746, metadata !DIExpression()), !dbg !1843
  call void @llvm.dbg.declare(metadata i64* %7379, metadata !2747, metadata !DIExpression()), !dbg !1845
  call void @llvm.dbg.declare(metadata i64* %7380, metadata !2748, metadata !DIExpression()), !dbg !1847
  store i64 0, i64* %7380, align 8, !dbg !1847
  call void @llvm.dbg.declare(metadata i64* %7381, metadata !2749, metadata !DIExpression()), !dbg !1849
  store i64 0, i64* %7381, align 8, !dbg !1849
  call void @llvm.dbg.declare(metadata i8** %7382, metadata !2750, metadata !DIExpression()), !dbg !1851
  store i8* null, i8** %7382, align 8, !dbg !1851
  call void @llvm.dbg.declare(metadata i64* %7383, metadata !2751, metadata !DIExpression()), !dbg !1853
  store i64 0, i64* %7383, align 8, !dbg !1853
  call void @llvm.dbg.declare(metadata i8* %7384, metadata !2752, metadata !DIExpression()), !dbg !1855
  store i8 0, i8* %7384, align 1, !dbg !1855
  call void @llvm.dbg.declare(metadata i8* %7385, metadata !2753, metadata !DIExpression()), !dbg !1857
  %7402 = call i64 @__ctype_get_mb_cur_max() #10, !dbg !1858
  %7403 = icmp eq i64 %7402, 1, !dbg !1859
  %7404 = zext i1 %7403 to i8, !dbg !1857
  store i8 %7404, i8* %7385, align 1, !dbg !1857
  call void @llvm.dbg.declare(metadata i8* %7386, metadata !2754, metadata !DIExpression()), !dbg !1861
  %7405 = load i32, i32* %7375, align 4, !dbg !1862
  %_ = shl i32 %7405, 2
  %_1 = sub i32 0, %7405
  %gen = add i32 %_1, 2
  %_2 = sub i32 %7405, 2
  %gen3 = mul i32 %_2, 2
  %_4 = sub i32 %7405, 2
  %gen5 = mul i32 %_4, 2
  %_6 = shl i32 %7405, 2
  %_7 = shl i32 %7405, 2
  %7406 = and i32 %7405, 2, !dbg !1863
  %7407 = icmp ne i32 %7406, 0, !dbg !1864
  %7408 = zext i1 %7407 to i8, !dbg !1861
  store i8 %7408, i8* %7386, align 1, !dbg !1861
  call void @llvm.dbg.declare(metadata i8* %7387, metadata !2755, metadata !DIExpression()), !dbg !1866
  store i8 0, i8* %7387, align 1, !dbg !1866
  call void @llvm.dbg.declare(metadata i8* %7388, metadata !2756, metadata !DIExpression()), !dbg !1868
  store i8 0, i8* %7388, align 1, !dbg !1868
  call void @llvm.dbg.declare(metadata i8* %7389, metadata !2757, metadata !DIExpression()), !dbg !1870
  store i8 1, i8* %7389, align 1, !dbg !1870
  br label %originalBB

originalBB8alteredBB:                             ; preds = %originalBB8, %66
  %7409 = load i32, i32* %23, align 4, !dbg !1874
  br label %originalBB8

originalBB12alteredBB:                            ; preds = %originalBB12, %84
  store i32 5, i32* %23, align 4, !dbg !1876
  store i8 1, i8* %35, align 1, !dbg !1878
  br label %originalBB12

originalBB16alteredBB:                            ; preds = %originalBB16, %101
  %7410 = load i8, i8* %35, align 1, !dbg !1880
  %7411 = trunc i8 %7410 to i1, !dbg !1880
  br label %originalBB16

originalBB20alteredBB:                            ; preds = %originalBB20, %120
  br label %originalBB20

originalBB24alteredBB:                            ; preds = %originalBB24, %137
  %7412 = load i64, i64* %29, align 8, !dbg !1884
  %7413 = load i64, i64* %20, align 8, !dbg !1884
  %7414 = icmp ult i64 %7412, %7413, !dbg !1884
  br label %originalBB24

originalBB28alteredBB:                            ; preds = %originalBB28, %157
  %7415 = load i8*, i8** %19, align 8, !dbg !1884
  %7416 = load i64, i64* %29, align 8, !dbg !1884
  %7417 = getelementptr inbounds i8, i8* %7415, i64 %7416, !dbg !1884
  store i8 34, i8* %7417, align 1, !dbg !1884
  br label %originalBB28

originalBB32alteredBB:                            ; preds = %originalBB32, %177
  %7418 = load i64, i64* %29, align 8, !dbg !1887
  %_33 = sub i64 %7418, 1
  %gen34 = mul i64 %_33, 1
  %_35 = sub i64 0, %7418
  %gen36 = add i64 %_35, 1
  %_37 = shl i64 %7418, 1
  %_38 = sub i64 0, %7418
  %gen39 = add i64 %_38, 1
  %_40 = shl i64 %7418, 1
  %_41 = shl i64 %7418, 1
  %_42 = sub i64 0, %7418
  %gen43 = add i64 %_42, 1
  %_44 = sub i64 %7418, 1
  %gen45 = mul i64 %_44, 1
  %7419 = add i64 %7418, 1, !dbg !1887
  store i64 %7419, i64* %29, align 8, !dbg !1887
  br label %originalBB32

originalBB49alteredBB:                            ; preds = %originalBB49, %196
  br label %originalBB49

originalBB53alteredBB:                            ; preds = %originalBB53, %213
  store i8 1, i8* %33, align 1, !dbg !1888
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.63, i64 0, i64 0), i8** %31, align 8, !dbg !1889
  store i64 1, i64* %32, align 8, !dbg !1890
  br label %originalBB53

originalBB57alteredBB:                            ; preds = %originalBB57, %230
  store i8 1, i8* %33, align 1, !dbg !1892
  store i8 0, i8* %35, align 1, !dbg !1893
  br label %originalBB57

originalBB61alteredBB:                            ; preds = %originalBB61, %247
  %7420 = load i32, i32* %23, align 4, !dbg !1895
  %7421 = icmp ne i32 %7420, 10, !dbg !1898
  br label %originalBB61

originalBB65alteredBB:                            ; preds = %originalBB65, %266
  %7422 = load i32, i32* %23, align 4, !dbg !1900
  %7423 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.64, i64 0, i64 0), i32 %7422), !dbg !1902
  store i8* %7423, i8** %26, align 8, !dbg !1903
  %7424 = load i32, i32* %23, align 4, !dbg !1904
  %7425 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.65, i64 0, i64 0), i32 %7424), !dbg !1905
  store i8* %7425, i8** %27, align 8, !dbg !1906
  br label %originalBB65

originalBB69alteredBB:                            ; preds = %originalBB69, %287
  %7426 = load i8, i8* %35, align 1, !dbg !1908
  %7427 = trunc i8 %7426 to i1, !dbg !1908
  br label %originalBB69

originalBB73alteredBB:                            ; preds = %originalBB73, %306
  %7428 = load i8*, i8** %26, align 8, !dbg !1911
  store i8* %7428, i8** %31, align 8, !dbg !1913
  br label %originalBB73

originalBB77alteredBB:                            ; preds = %originalBB77, %324
  %7429 = load i8*, i8** %31, align 8, !dbg !1915
  %7430 = load i8, i8* %7429, align 1, !dbg !1917
  %7431 = icmp ne i8 %7430, 0, !dbg !1918
  br label %originalBB77

originalBB81alteredBB:                            ; preds = %originalBB81, %344
  br label %originalBB81

originalBB85alteredBB:                            ; preds = %originalBB85, %361
  %7432 = load i64, i64* %29, align 8, !dbg !1920
  %7433 = load i64, i64* %20, align 8, !dbg !1920
  %7434 = icmp ult i64 %7432, %7433, !dbg !1920
  br label %originalBB85

originalBB89alteredBB:                            ; preds = %originalBB89, %381
  %7435 = load i8*, i8** %31, align 8, !dbg !1920
  %7436 = load i8, i8* %7435, align 1, !dbg !1920
  %7437 = load i8*, i8** %19, align 8, !dbg !1920
  %7438 = load i64, i64* %29, align 8, !dbg !1920
  %7439 = getelementptr inbounds i8, i8* %7437, i64 %7438, !dbg !1920
  store i8 %7436, i8* %7439, align 1, !dbg !1920
  br label %originalBB89

originalBB93alteredBB:                            ; preds = %originalBB93, %403
  %7440 = load i64, i64* %29, align 8, !dbg !1923
  %_94 = sub i64 %7440, 1
  %gen95 = mul i64 %_94, 1
  %_96 = shl i64 %7440, 1
  %_97 = sub i64 %7440, 1
  %gen98 = mul i64 %_97, 1
  %_99 = sub i64 0, %7440
  %gen100 = add i64 %_99, 1
  %_101 = sub i64 0, %7440
  %gen102 = add i64 %_101, 1
  %_103 = sub i64 0, %7440
  %gen104 = add i64 %_103, 1
  %_105 = sub i64 %7440, 1
  %gen106 = mul i64 %_105, 1
  %_107 = shl i64 %7440, 1
  %7441 = add i64 %7440, 1, !dbg !1923
  store i64 %7441, i64* %29, align 8, !dbg !1923
  br label %originalBB93

originalBB111alteredBB:                           ; preds = %originalBB111, %422
  br label %originalBB111

originalBB115alteredBB:                           ; preds = %originalBB115, %439
  %7442 = load i8*, i8** %31, align 8, !dbg !1924
  %7443 = getelementptr inbounds i8, i8* %7442, i32 1, !dbg !1924
  store i8* %7443, i8** %31, align 8, !dbg !1924
  br label %originalBB115

originalBB119alteredBB:                           ; preds = %originalBB119, %458
  br label %originalBB119

originalBB123alteredBB:                           ; preds = %originalBB123, %475
  store i8 1, i8* %33, align 1, !dbg !1928
  %7444 = load i8*, i8** %27, align 8, !dbg !1929
  store i8* %7444, i8** %31, align 8, !dbg !1930
  %7445 = load i8*, i8** %31, align 8, !dbg !1931
  %7446 = call i64 @strlen(i8* %7445) #13, !dbg !1932
  store i64 %7446, i64* %32, align 8, !dbg !1933
  br label %originalBB123

originalBB127alteredBB:                           ; preds = %originalBB127, %495
  store i8 1, i8* %33, align 1, !dbg !1935
  br label %originalBB127

originalBB131alteredBB:                           ; preds = %originalBB131, %512
  store i8 1, i8* %35, align 1, !dbg !1937
  br label %originalBB131

originalBB135alteredBB:                           ; preds = %originalBB135, %529
  %7447 = load i8, i8* %35, align 1, !dbg !1939
  %7448 = trunc i8 %7447 to i1, !dbg !1939
  br label %originalBB135

originalBB139alteredBB:                           ; preds = %originalBB139, %548
  store i8 1, i8* %33, align 1, !dbg !1942
  br label %originalBB139

originalBB143alteredBB:                           ; preds = %originalBB143, %565
  br label %originalBB143

originalBB147alteredBB:                           ; preds = %originalBB147, %582
  store i32 2, i32* %23, align 4, !dbg !1945
  %7449 = load i8, i8* %35, align 1, !dbg !1946
  %7450 = trunc i8 %7449 to i1, !dbg !1946
  br label %originalBB147

originalBB151alteredBB:                           ; preds = %originalBB151, %601
  br label %originalBB151

originalBB155alteredBB:                           ; preds = %originalBB155, %618
  %7451 = load i64, i64* %29, align 8, !dbg !1950
  %7452 = load i64, i64* %20, align 8, !dbg !1950
  %7453 = icmp ult i64 %7451, %7452, !dbg !1950
  br label %originalBB155

originalBB159alteredBB:                           ; preds = %originalBB159, %638
  %7454 = load i8*, i8** %19, align 8, !dbg !1950
  %7455 = load i64, i64* %29, align 8, !dbg !1950
  %7456 = getelementptr inbounds i8, i8* %7454, i64 %7455, !dbg !1950
  store i8 39, i8* %7456, align 1, !dbg !1950
  br label %originalBB159

originalBB163alteredBB:                           ; preds = %originalBB163, %658
  %7457 = load i64, i64* %29, align 8, !dbg !1953
  %_164 = sub i64 %7457, 1
  %gen165 = mul i64 %_164, 1
  %_166 = sub i64 %7457, 1
  %gen167 = mul i64 %_166, 1
  %_168 = sub i64 0, %7457
  %gen169 = add i64 %_168, 1
  %_170 = shl i64 %7457, 1
  %_171 = sub i64 %7457, 1
  %gen172 = mul i64 %_171, 1
  %_173 = sub i64 %7457, 1
  %gen174 = mul i64 %_173, 1
  %_175 = sub i64 0, %7457
  %gen176 = add i64 %_175, 1
  %7458 = add i64 %7457, 1, !dbg !1953
  store i64 %7458, i64* %29, align 8, !dbg !1953
  br label %originalBB163

originalBB180alteredBB:                           ; preds = %originalBB180, %677
  br label %originalBB180

originalBB184alteredBB:                           ; preds = %originalBB184, %694
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.65, i64 0, i64 0), i8** %31, align 8, !dbg !1954
  store i64 1, i64* %32, align 8, !dbg !1955
  br label %originalBB184

originalBB188alteredBB:                           ; preds = %originalBB188, %711
  store i8 0, i8* %35, align 1, !dbg !1957
  br label %originalBB188

originalBB192alteredBB:                           ; preds = %originalBB192, %728
  call void @abort() #12, !dbg !1959
  br label %originalBB192

originalBB196alteredBB:                           ; preds = %originalBB196, %745
  store i64 0, i64* %28, align 8, !dbg !1960
  br label %originalBB196

originalBB200alteredBB:                           ; preds = %originalBB200, %762
  %7459 = load i64, i64* %22, align 8, !dbg !1963
  %7460 = icmp eq i64 %7459, -1, !dbg !1965
  br label %originalBB200

originalBB204alteredBB:                           ; preds = %originalBB204, %781
  %7461 = load i8*, i8** %21, align 8, !dbg !1966
  %7462 = load i64, i64* %28, align 8, !dbg !1967
  %7463 = getelementptr inbounds i8, i8* %7461, i64 %7462, !dbg !1966
  %7464 = load i8, i8* %7463, align 1, !dbg !1966
  %7465 = sext i8 %7464 to i32, !dbg !1966
  %7466 = icmp eq i32 %7465, 0, !dbg !1968
  %7467 = zext i1 %7466 to i32, !dbg !1968
  br label %originalBB204

originalBB208alteredBB:                           ; preds = %originalBB208, %805
  %7468 = load i64, i64* %28, align 8, !dbg !1969
  %7469 = load i64, i64* %22, align 8, !dbg !1970
  %7470 = icmp eq i64 %7468, %7469, !dbg !1971
  %7471 = zext i1 %7470 to i32, !dbg !1971
  br label %originalBB208

originalBB212alteredBB:                           ; preds = %originalBB212, %826
  %7472 = icmp ne i32 %827, 0, !dbg !1972
  %_213 = shl i1 %7472, true
  %_214 = shl i1 %7472, true
  %_215 = sub i1 false, %7472
  %gen216 = add i1 %_215, true
  %_217 = sub i1 %7472, true
  %gen218 = mul i1 %_217, true
  %_219 = sub i1 %7472, true
  %gen220 = mul i1 %_219, true
  %7473 = xor i1 %7472, true, !dbg !1972
  br label %originalBB212

originalBB224alteredBB:                           ; preds = %originalBB224, %846
  store i8 0, i8* %41, align 1, !dbg !1980
  call void @llvm.dbg.declare(metadata !4, metadata !2758, metadata !DIExpression()), !dbg !1982
  store i8 0, i8* %42, align 1, !dbg !1982
  call void @llvm.dbg.declare(metadata !4, metadata !2793, metadata !DIExpression()), !dbg !1984
  store i8 0, i8* %43, align 1, !dbg !1984
  %7474 = load i8, i8* %33, align 1, !dbg !1985
  %7475 = trunc i8 %7474 to i1, !dbg !1985
  br label %originalBB224

originalBB228alteredBB:                           ; preds = %originalBB228, %865
  %7476 = load i32, i32* %23, align 4, !dbg !1988
  %7477 = icmp ne i32 %7476, 2, !dbg !1989
  br label %originalBB228

originalBB232alteredBB:                           ; preds = %originalBB232, %884
  %7478 = load i64, i64* %32, align 8, !dbg !1991
  %7479 = icmp ne i64 %7478, 0, !dbg !1991
  br label %originalBB232

originalBB236alteredBB:                           ; preds = %originalBB236, %903
  %7480 = load i64, i64* %28, align 8, !dbg !1993
  %7481 = load i64, i64* %32, align 8, !dbg !1994
  %_237 = sub i64 %7480, %7481
  %gen238 = mul i64 %_237, %7481
  %_239 = shl i64 %7480, %7481
  %_240 = sub i64 0, %7480
  %gen241 = add i64 %_240, %7481
  %7482 = add i64 %7480, %7481, !dbg !1995
  %7483 = load i64, i64* %22, align 8, !dbg !1996
  %7484 = icmp eq i64 %7483, -1, !dbg !1997
  br label %originalBB236

originalBB245alteredBB:                           ; preds = %originalBB245, %925
  %7485 = load i64, i64* %32, align 8, !dbg !1999
  %7486 = icmp ult i64 1, %7485, !dbg !2000
  br label %originalBB245

originalBB249alteredBB:                           ; preds = %originalBB249, %944
  %7487 = load i8*, i8** %21, align 8, !dbg !2001
  %7488 = call i64 @strlen(i8* %7487) #13, !dbg !2002
  store i64 %7488, i64* %22, align 8, !dbg !2003
  br label %originalBB249

originalBB253alteredBB:                           ; preds = %originalBB253, %963
  %7489 = load i64, i64* %22, align 8, !dbg !2004
  br label %originalBB253

originalBB257alteredBB:                           ; preds = %originalBB257, %981
  %7490 = icmp ule i64 %914, %982, !dbg !2005
  br label %originalBB257

originalBB261alteredBB:                           ; preds = %originalBB261, %1000
  %7491 = load i8*, i8** %21, align 8, !dbg !2007
  %7492 = load i64, i64* %28, align 8, !dbg !2008
  %7493 = getelementptr inbounds i8, i8* %7491, i64 %7492, !dbg !2009
  %7494 = load i8*, i8** %31, align 8, !dbg !2010
  %7495 = load i64, i64* %32, align 8, !dbg !2011
  %7496 = call i32 @memcmp(i8* %7493, i8* %7494, i64 %7495) #13, !dbg !2012
  %7497 = icmp eq i32 %7496, 0, !dbg !2013
  br label %originalBB261

originalBB265alteredBB:                           ; preds = %originalBB265, %1024
  %7498 = load i8, i8* %35, align 1, !dbg !2015
  %7499 = trunc i8 %7498 to i1, !dbg !2015
  br label %originalBB265

originalBB269alteredBB:                           ; preds = %originalBB269, %1043
  br label %originalBB269

originalBB273alteredBB:                           ; preds = %originalBB273, %1060
  store i8 1, i8* %41, align 1, !dbg !2020
  br label %originalBB273

originalBB277alteredBB:                           ; preds = %originalBB277, %1077
  %7500 = load i8*, i8** %21, align 8, !dbg !2022
  %7501 = load i64, i64* %28, align 8, !dbg !2023
  %7502 = getelementptr inbounds i8, i8* %7500, i64 %7501, !dbg !2022
  %7503 = load i8, i8* %7502, align 1, !dbg !2022
  store i8 %7503, i8* %39, align 1, !dbg !2024
  %7504 = load i8, i8* %39, align 1, !dbg !2025
  %7505 = zext i8 %7504 to i32, !dbg !2025
  br label %originalBB277

originalBB281alteredBB:                           ; preds = %originalBB281, %1100
  %7506 = load i8, i8* %33, align 1, !dbg !2027
  %7507 = trunc i8 %7506 to i1, !dbg !2027
  br label %originalBB281

originalBB285alteredBB:                           ; preds = %originalBB285, %1119
  br label %originalBB285

originalBB289alteredBB:                           ; preds = %originalBB289, %1136
  %7508 = load i8, i8* %35, align 1, !dbg !2033
  %7509 = trunc i8 %7508 to i1, !dbg !2033
  br label %originalBB289

originalBB293alteredBB:                           ; preds = %originalBB293, %1155
  br label %originalBB293

originalBB297alteredBB:                           ; preds = %originalBB297, %1172
  store i8 1, i8* %42, align 1, !dbg !2036
  %7510 = load i32, i32* %23, align 4, !dbg !2037
  %7511 = icmp eq i32 %7510, 2, !dbg !2037
  br label %originalBB297

originalBB301alteredBB:                           ; preds = %originalBB301, %1191
  %7512 = load i8, i8* %36, align 1, !dbg !2037
  %7513 = trunc i8 %7512 to i1, !dbg !2037
  br label %originalBB301

originalBB305alteredBB:                           ; preds = %originalBB305, %1210
  br label %originalBB305

originalBB309alteredBB:                           ; preds = %originalBB309, %1227
  %7514 = load i64, i64* %29, align 8, !dbg !2041
  %7515 = load i64, i64* %20, align 8, !dbg !2041
  %7516 = icmp ult i64 %7514, %7515, !dbg !2041
  br label %originalBB309

originalBB313alteredBB:                           ; preds = %originalBB313, %1247
  %7517 = load i8*, i8** %19, align 8, !dbg !2041
  %7518 = load i64, i64* %29, align 8, !dbg !2041
  %7519 = getelementptr inbounds i8, i8* %7517, i64 %7518, !dbg !2041
  store i8 39, i8* %7519, align 1, !dbg !2041
  br label %originalBB313

originalBB317alteredBB:                           ; preds = %originalBB317, %1267
  %7520 = load i64, i64* %29, align 8, !dbg !2044
  %_318 = shl i64 %7520, 1
  %_319 = shl i64 %7520, 1
  %_320 = shl i64 %7520, 1
  %7521 = add i64 %7520, 1, !dbg !2044
  %7522 = trunc i64 1 to i32
  %_321 = sub i32 %7522, -5
  %gen322 = mul i32 %_321, -5
  %_323 = sub i32 %7522, -5
  %gen324 = mul i32 %_323, -5
  %7523 = mul i32 %7522, -5
  %_325 = sub i32 %7523, 3
  %gen326 = mul i32 %_325, 3
  %_327 = sub i32 0, %7523
  %gen328 = add i32 %_327, 3
  %_329 = sub i32 %7523, 3
  %gen330 = mul i32 %_329, 3
  %7524 = add i32 %7523, 3
  %7525 = trunc i64 %7520 to i32
  %_331 = sub i32 %7525, 2
  %gen332 = mul i32 %_331, 2
  %7526 = add i32 %7525, 2
  %7527 = trunc i64 %7521 to i32
  %_333 = sub i32 %7527, -2
  %gen334 = mul i32 %_333, -2
  %_335 = sub i32 0, %7527
  %gen336 = add i32 %_335, -2
  %_337 = sub i32 0, %7527
  %gen338 = add i32 %_337, -2
  %_339 = sub i32 0, %7527
  %gen340 = add i32 %_339, -2
  %_341 = sub i32 0, %7527
  %gen342 = add i32 %_341, -2
  %7528 = mul i32 %7527, -2
  %_343 = sub i32 %7528, 2
  %gen344 = mul i32 %_343, 2
  %7529 = add i32 %7528, 2
  %_345 = sub i32 0, %7524
  %gen346 = add i32 %_345, %7524
  %_347 = sub i32 0, %7524
  %gen348 = add i32 %_347, %7524
  %_349 = sub i32 0, %7524
  %gen350 = add i32 %_349, %7524
  %_351 = sub i32 %7524, %7524
  %gen352 = mul i32 %_351, %7524
  %_353 = sub i32 %7524, %7524
  %gen354 = mul i32 %_353, %7524
  %_355 = sub i32 %7524, %7524
  %gen356 = mul i32 %_355, %7524
  %_357 = sub i32 0, %7524
  %gen358 = add i32 %_357, %7524
  %_359 = sub i32 0, %7524
  %gen360 = add i32 %_359, %7524
  %7530 = mul i32 %7524, %7524
  %_361 = shl i32 %7530, %7530
  %_362 = sub i32 %7530, %7530
  %gen363 = mul i32 %_362, %7530
  %_364 = shl i32 %7530, %7530
  %7531 = mul i32 %7530, %7530
  %_365 = shl i32 %7526, %7526
  %7532 = mul i32 %7526, %7526
  %7533 = mul i32 %7532, %7532
  %_366 = shl i32 %7529, %7529
  %_367 = sub i32 0, %7529
  %gen368 = add i32 %_367, %7529
  %_369 = sub i32 %7529, %7529
  %gen370 = mul i32 %_369, %7529
  %_371 = sub i32 0, %7529
  %gen372 = add i32 %_371, %7529
  %_373 = sub i32 %7529, %7529
  %gen374 = mul i32 %_373, %7529
  %_375 = shl i32 %7529, %7529
  %_376 = sub i32 %7529, %7529
  %gen377 = mul i32 %_376, %7529
  %7534 = mul i32 %7529, %7529
  %_378 = shl i32 %7534, %7534
  %_379 = sub i32 0, %7534
  %gen380 = add i32 %_379, %7534
  %_381 = sub i32 %7534, %7534
  %gen382 = mul i32 %_381, %7534
  %7535 = mul i32 %7534, %7534
  %_383 = shl i32 %7531, %7533
  %_384 = shl i32 %7531, %7533
  %_385 = shl i32 %7531, %7533
  %_386 = sub i32 %7531, %7533
  %gen387 = mul i32 %_386, %7533
  %_388 = sub i32 0, %7531
  %gen389 = add i32 %_388, %7533
  %7536 = add i32 %7531, %7533
  %_390 = sub i32 %7536, %7535
  %gen391 = mul i32 %_390, %7535
  %_392 = sub i32 0, %7536
  %gen393 = add i32 %_392, %7535
  %_394 = sub i32 0, %7536
  %gen395 = add i32 %_394, %7535
  %_396 = shl i32 %7536, %7535
  %_397 = sub i32 %7536, %7535
  %gen398 = mul i32 %_397, %7535
  %7537 = sub i32 %7536, %7535
  %_399 = shl i32 %7537, 5
  %_400 = shl i32 %7537, 5
  %_401 = sub i32 0, %7537
  %gen402 = add i32 %_401, 5
  %_403 = shl i32 %7537, 5
  %_404 = shl i32 %7537, 5
  %_405 = sub i32 0, %7537
  %gen406 = add i32 %_405, 5
  %_407 = sub i32 0, %7537
  %gen408 = add i32 %_407, 5
  %_409 = shl i32 %7537, 5
  %_410 = shl i32 %7537, 5
  %7538 = add i32 %7537, 5
  %7539 = icmp ne i32 %7538, 5
  br label %originalBB317

originalBB414alteredBB:                           ; preds = %originalBB414, %1304
  br label %originalBB414

originalBB418alteredBB:                           ; preds = %originalBB418, %1321
  store i64 %1277, i64* %29, align 8, !dbg !2044
  br label %originalBB418

originalBB422alteredBB:                           ; preds = %originalBB422, %1338
  br label %originalBB422

originalBB426alteredBB:                           ; preds = %originalBB426, %1355
  %7540 = load i64, i64* %29, align 8, !dbg !2045
  %7541 = load i64, i64* %20, align 8, !dbg !2045
  %7542 = icmp ult i64 %7540, %7541, !dbg !2045
  br label %originalBB426

originalBB430alteredBB:                           ; preds = %originalBB430, %1375
  %7543 = load i8*, i8** %19, align 8, !dbg !2045
  %7544 = load i64, i64* %29, align 8, !dbg !2045
  %7545 = getelementptr inbounds i8, i8* %7543, i64 %7544, !dbg !2045
  store i8 36, i8* %7545, align 1, !dbg !2045
  br label %originalBB430

originalBB434alteredBB:                           ; preds = %originalBB434, %1395
  %7546 = load i64, i64* %29, align 8, !dbg !2048
  %_435 = sub i64 %7546, 1
  %gen436 = mul i64 %_435, 1
  %_437 = sub i64 0, %7546
  %gen438 = add i64 %_437, 1
  %7547 = add i64 %7546, 1, !dbg !2048
  store i64 %7547, i64* %29, align 8, !dbg !2048
  br label %originalBB434

originalBB442alteredBB:                           ; preds = %originalBB442, %1414
  br label %originalBB442

originalBB446alteredBB:                           ; preds = %originalBB446, %1431
  %7548 = load i64, i64* %29, align 8, !dbg !2049
  %7549 = load i64, i64* %20, align 8, !dbg !2049
  %7550 = icmp ult i64 %7548, %7549, !dbg !2049
  br label %originalBB446

originalBB450alteredBB:                           ; preds = %originalBB450, %1451
  %7551 = load i8*, i8** %19, align 8, !dbg !2049
  %7552 = load i64, i64* %29, align 8, !dbg !2049
  %7553 = getelementptr inbounds i8, i8* %7551, i64 %7552, !dbg !2049
  store i8 39, i8* %7553, align 1, !dbg !2049
  br label %originalBB450

originalBB454alteredBB:                           ; preds = %originalBB454, %1471
  %7554 = load i64, i64* %29, align 8, !dbg !2052
  %_455 = shl i64 %7554, 1
  %_456 = sub i64 %7554, 1
  %gen457 = mul i64 %_456, 1
  %_458 = sub i64 0, %7554
  %gen459 = add i64 %_458, 1
  %7555 = add i64 %7554, 1, !dbg !2052
  store i64 %7555, i64* %29, align 8, !dbg !2052
  br label %originalBB454

originalBB463alteredBB:                           ; preds = %originalBB463, %1490
  store i8 1, i8* %36, align 1, !dbg !2039
  br label %originalBB463

originalBB467alteredBB:                           ; preds = %originalBB467, %1507
  br label %originalBB467

originalBB471alteredBB:                           ; preds = %originalBB471, %1524
  %7556 = load i64, i64* %29, align 8, !dbg !2053
  %7557 = load i64, i64* %20, align 8, !dbg !2053
  %7558 = icmp ult i64 %7556, %7557, !dbg !2053
  br label %originalBB471

originalBB475alteredBB:                           ; preds = %originalBB475, %1544
  %7559 = load i8*, i8** %19, align 8, !dbg !2053
  %7560 = load i64, i64* %29, align 8, !dbg !2053
  %7561 = getelementptr inbounds i8, i8* %7559, i64 %7560, !dbg !2053
  store i8 92, i8* %7561, align 1, !dbg !2053
  br label %originalBB475

originalBB479alteredBB:                           ; preds = %originalBB479, %1564
  %7562 = load i64, i64* %29, align 8, !dbg !2056
  %_480 = sub i64 0, %7562
  %gen481 = add i64 %_480, 1
  %_482 = shl i64 %7562, 1
  %_483 = shl i64 %7562, 1
  %_484 = sub i64 %7562, 1
  %gen485 = mul i64 %_484, 1
  %_486 = shl i64 %7562, 1
  %7563 = add i64 %7562, 1, !dbg !2056
  store i64 %7563, i64* %29, align 8, !dbg !2056
  br label %originalBB479

originalBB490alteredBB:                           ; preds = %originalBB490, %1583
  br label %originalBB490

originalBB494alteredBB:                           ; preds = %originalBB494, %1600
  %7564 = load i32, i32* %23, align 4, !dbg !2057
  %7565 = icmp ne i32 %7564, 2, !dbg !2059
  br label %originalBB494

originalBB498alteredBB:                           ; preds = %originalBB498, %1619
  %7566 = load i64, i64* %28, align 8, !dbg !2061
  %7567 = add i64 %7566, 1, !dbg !2062
  %7568 = load i64, i64* %22, align 8, !dbg !2063
  %7569 = icmp ult i64 %7567, %7568, !dbg !2064
  br label %originalBB498

originalBB502alteredBB:                           ; preds = %originalBB502, %1640
  %7570 = load i8*, i8** %21, align 8, !dbg !2066
  %7571 = load i64, i64* %28, align 8, !dbg !2067
  %_503 = shl i64 %7571, 1
  %_504 = sub i64 0, %7571
  %gen505 = add i64 %_504, 1
  %_506 = shl i64 %7571, 1
  %7572 = add i64 %7571, 1, !dbg !2068
  %7573 = getelementptr inbounds i8, i8* %7570, i64 %7572, !dbg !2066
  %7574 = load i8, i8* %7573, align 1, !dbg !2066
  %7575 = sext i8 %7574 to i32, !dbg !2066
  %7576 = icmp sle i32 48, %7575, !dbg !2069
  br label %originalBB502

originalBB510alteredBB:                           ; preds = %originalBB510, %1664
  %7577 = load i8*, i8** %21, align 8, !dbg !2071
  %7578 = load i64, i64* %28, align 8, !dbg !2072
  %_511 = shl i64 %7578, 1
  %_512 = shl i64 %7578, 1
  %_513 = sub i64 0, %7578
  %gen514 = add i64 %_513, 1
  %7579 = add i64 %7578, 1, !dbg !2073
  %7580 = getelementptr inbounds i8, i8* %7577, i64 %7579, !dbg !2071
  %7581 = load i8, i8* %7580, align 1, !dbg !2071
  %7582 = sext i8 %7581 to i32, !dbg !2071
  %7583 = icmp sle i32 %7582, 57, !dbg !2074
  br label %originalBB510

originalBB518alteredBB:                           ; preds = %originalBB518, %1688
  br label %originalBB518

originalBB522alteredBB:                           ; preds = %originalBB522, %1705
  %7584 = load i64, i64* %29, align 8, !dbg !2078
  %7585 = load i64, i64* %20, align 8, !dbg !2078
  %7586 = icmp ult i64 %7584, %7585, !dbg !2078
  br label %originalBB522

originalBB526alteredBB:                           ; preds = %originalBB526, %1725
  %7587 = load i8*, i8** %19, align 8, !dbg !2078
  %7588 = load i64, i64* %29, align 8, !dbg !2078
  %7589 = getelementptr inbounds i8, i8* %7587, i64 %7588, !dbg !2078
  store i8 48, i8* %7589, align 1, !dbg !2078
  br label %originalBB526

originalBB530alteredBB:                           ; preds = %originalBB530, %1745
  %7590 = load i64, i64* %29, align 8, !dbg !2081
  %7591 = add i64 %7590, 1, !dbg !2081
  store i64 %7591, i64* %29, align 8, !dbg !2081
  br label %originalBB530

originalBB534alteredBB:                           ; preds = %originalBB534, %1764
  br label %originalBB534

originalBB538alteredBB:                           ; preds = %originalBB538, %1781
  %7592 = load i64, i64* %29, align 8, !dbg !2083
  %7593 = load i64, i64* %20, align 8, !dbg !2083
  %7594 = icmp ult i64 %7592, %7593, !dbg !2083
  br label %originalBB538

originalBB542alteredBB:                           ; preds = %originalBB542, %1801
  %7595 = load i8*, i8** %19, align 8, !dbg !2083
  %7596 = load i64, i64* %29, align 8, !dbg !2083
  %7597 = getelementptr inbounds i8, i8* %7595, i64 %7596, !dbg !2083
  store i8 48, i8* %7597, align 1, !dbg !2083
  br label %originalBB542

originalBB546alteredBB:                           ; preds = %originalBB546, %1821
  %7598 = load i64, i64* %29, align 8, !dbg !2086
  %_547 = sub i64 %7598, 1
  %gen548 = mul i64 %_547, 1
  %7599 = add i64 %7598, 1, !dbg !2086
  store i64 %7599, i64* %29, align 8, !dbg !2086
  br label %originalBB546

originalBB552alteredBB:                           ; preds = %originalBB552, %1840
  br label %originalBB552

originalBB556alteredBB:                           ; preds = %originalBB556, %1857
  store i8 48, i8* %39, align 1, !dbg !2088
  br label %originalBB556

originalBB560alteredBB:                           ; preds = %originalBB560, %1874
  %7600 = load i32, i32* %24, align 4, !dbg !2090
  %_561 = sub i32 %7600, 1
  %gen562 = mul i32 %_561, 1
  %_563 = sub i32 0, %7600
  %gen564 = add i32 %_563, 1
  %_565 = sub i32 %7600, 1
  %gen566 = mul i32 %_565, 1
  %_567 = sub i32 %7600, 1
  %gen568 = mul i32 %_567, 1
  %_569 = sub i32 %7600, 1
  %gen570 = mul i32 %_569, 1
  %7601 = and i32 %7600, 1, !dbg !2092
  %7602 = icmp ne i32 %7601, 0, !dbg !2092
  br label %originalBB560

originalBB574alteredBB:                           ; preds = %originalBB574, %1894
  br label %originalBB574

originalBB578alteredBB:                           ; preds = %originalBB578, %1911
  br label %originalBB578

originalBB582alteredBB:                           ; preds = %originalBB582, %1928
  br label %originalBB582

originalBB586alteredBB:                           ; preds = %originalBB586, %1945
  %7603 = load i32, i32* %23, align 4, !dbg !2096
  br label %originalBB586

originalBB590alteredBB:                           ; preds = %originalBB590, %1963
  %7604 = load i8, i8* %35, align 1, !dbg !2098
  %7605 = trunc i8 %7604 to i1, !dbg !2098
  br label %originalBB590

originalBB594alteredBB:                           ; preds = %originalBB594, %1982
  br label %originalBB594

originalBB598alteredBB:                           ; preds = %originalBB598, %1999
  br label %originalBB598

originalBB602alteredBB:                           ; preds = %originalBB602, %2016
  %7606 = load i32, i32* %24, align 4, !dbg !2104
  %_603 = sub i32 %7606, 4
  %gen604 = mul i32 %_603, 4
  %_605 = shl i32 %7606, 4
  %_606 = sub i32 %7606, 4
  %gen607 = mul i32 %_606, 4
  %_608 = sub i32 0, %7606
  %gen609 = add i32 %_608, 4
  %7607 = and i32 %7606, 4, !dbg !2106
  %7608 = icmp ne i32 %7607, 0, !dbg !2106
  br label %originalBB602

originalBB613alteredBB:                           ; preds = %originalBB613, %2036
  %7609 = load i64, i64* %28, align 8, !dbg !2108
  %_614 = shl i64 %7609, 2
  %_615 = sub i64 %7609, 2
  %gen616 = mul i64 %_615, 2
  %_617 = sub i64 %7609, 2
  %gen618 = mul i64 %_617, 2
  %_619 = sub i64 %7609, 2
  %gen620 = mul i64 %_619, 2
  %7610 = add i64 %7609, 2, !dbg !2109
  %7611 = load i64, i64* %22, align 8, !dbg !2110
  %7612 = trunc i64 %7611 to i32
  %_621 = shl i32 %7612, -4
  %7613 = mul i32 %7612, -4
  %7614 = trunc i64 2 to i32
  %_622 = sub i32 0, %7614
  %gen623 = add i32 %_622, 3
  %7615 = mul i32 %7614, 3
  %_624 = sub i32 0, %7615
  %gen625 = add i32 %_624, -5
  %_626 = sub i32 %7615, -5
  %gen627 = mul i32 %_626, -5
  %_628 = sub i32 0, %7615
  %gen629 = add i32 %_628, -5
  %_630 = sub i32 0, %7615
  %gen631 = add i32 %_630, -5
  %7616 = add i32 %7615, -5
  %_632 = shl i32 %7613, %7613
  %_633 = sub i32 0, %7613
  %gen634 = add i32 %_633, %7613
  %7617 = mul i32 %7613, %7613
  %_635 = shl i32 %7616, %7616
  %_636 = shl i32 %7616, %7616
  %_637 = sub i32 %7616, %7616
  %gen638 = mul i32 %_637, %7616
  %_639 = shl i32 %7616, %7616
  %_640 = shl i32 %7616, %7616
  %_641 = shl i32 %7616, %7616
  %_642 = shl i32 %7616, %7616
  %7618 = mul i32 %7616, %7616
  %_643 = shl i32 %7617, %7618
  %_644 = shl i32 %7617, %7618
  %_645 = sub i32 %7617, %7618
  %gen646 = mul i32 %_645, %7618
  %_647 = sub i32 %7617, %7618
  %gen648 = mul i32 %_647, %7618
  %_649 = sub i32 %7617, %7618
  %gen650 = mul i32 %_649, %7618
  %7619 = add i32 %7617, %7618
  %_651 = sub i32 %7613, %7616
  %gen652 = mul i32 %_651, %7616
  %_653 = shl i32 %7613, %7616
  %_654 = sub i32 0, %7613
  %gen655 = add i32 %_654, %7616
  %_656 = shl i32 %7613, %7616
  %_657 = shl i32 %7613, %7616
  %_658 = sub i32 0, %7613
  %gen659 = add i32 %_658, %7616
  %_660 = sub i32 %7613, %7616
  %gen661 = mul i32 %_660, %7616
  %7620 = mul i32 %7613, %7616
  %_662 = shl i32 %7620, 2
  %_663 = shl i32 %7620, 2
  %_664 = sub i32 0, %7620
  %gen665 = add i32 %_664, 2
  %_666 = shl i32 %7620, 2
  %_667 = sub i32 %7620, 2
  %gen668 = mul i32 %_667, 2
  %_669 = sub i32 %7620, 2
  %gen670 = mul i32 %_669, 2
  %_671 = sub i32 %7620, 2
  %gen672 = mul i32 %_671, 2
  %_673 = sub i32 %7620, 2
  %gen674 = mul i32 %_673, 2
  %7621 = mul i32 %7620, 2
  %_675 = shl i32 %7619, %7621
  %_676 = sub i32 0, %7619
  %gen677 = add i32 %_676, %7621
  %7622 = sub i32 %7619, %7621
  %_678 = sub i32 %7622, -2
  %gen679 = mul i32 %_678, -2
  %_680 = sub i32 %7622, -2
  %gen681 = mul i32 %_680, -2
  %7623 = mul i32 %7622, -2
  %_682 = sub i32 %7623, -4
  %gen683 = mul i32 %_682, -4
  %_684 = shl i32 %7623, -4
  %_685 = shl i32 %7623, -4
  %_686 = sub i32 0, %7623
  %gen687 = add i32 %_686, -4
  %_688 = sub i32 %7623, -4
  %gen689 = mul i32 %_688, -4
  %_690 = shl i32 %7623, -4
  %7624 = add i32 %7623, -4
  %7625 = icmp ne i32 %7624, -2
  br label %originalBB613

originalBB694alteredBB:                           ; preds = %originalBB694, %2070
  br label %originalBB694

originalBB698alteredBB:                           ; preds = %originalBB698, %2087
  %7626 = icmp ult i64 %2046, %2047, !dbg !2111
  br label %originalBB698

originalBB702alteredBB:                           ; preds = %originalBB702, %2105
  %7627 = load i8*, i8** %21, align 8, !dbg !2113
  %7628 = load i64, i64* %28, align 8, !dbg !2114
  %_703 = sub i64 0, %7628
  %gen704 = add i64 %_703, 1
  %_705 = sub i64 %7628, 1
  %gen706 = mul i64 %_705, 1
  %_707 = sub i64 0, %7628
  %gen708 = add i64 %_707, 1
  %_709 = sub i64 0, %7628
  %gen710 = add i64 %_709, 1
  %_711 = shl i64 %7628, 1
  %_712 = sub i64 %7628, 1
  %gen713 = mul i64 %_712, 1
  %_714 = sub i64 %7628, 1
  %gen715 = mul i64 %_714, 1
  %7629 = add i64 %7628, 1, !dbg !2115
  %7630 = trunc i64 1 to i32
  %_716 = sub i32 %7630, 4
  %gen717 = mul i32 %_716, 4
  %_718 = sub i32 %7630, 4
  %gen719 = mul i32 %_718, 4
  %7631 = mul i32 %7630, 4
  %_720 = sub i32 %7631, 3
  %gen721 = mul i32 %_720, 3
  %_722 = sub i32 0, %7631
  %gen723 = add i32 %_722, 3
  %_724 = shl i32 %7631, 3
  %_725 = sub i32 %7631, 3
  %gen726 = mul i32 %_725, 3
  %_727 = sub i32 0, %7631
  %gen728 = add i32 %_727, 3
  %_729 = sub i32 %7631, 3
  %gen730 = mul i32 %_729, 3
  %7632 = add i32 %7631, 3
  %7633 = trunc i64 %7628 to i32
  %_731 = sub i32 %7633, 2
  %gen732 = mul i32 %_731, 2
  %_733 = shl i32 %7633, 2
  %7634 = mul i32 %7633, 2
  %_734 = sub i32 0, %7634
  %gen735 = add i32 %_734, 1
  %_736 = sub i32 0, %7634
  %gen737 = add i32 %_736, 1
  %_738 = shl i32 %7634, 1
  %_739 = sub i32 %7634, 1
  %gen740 = mul i32 %_739, 1
  %_741 = sub i32 %7634, 1
  %gen742 = mul i32 %_741, 1
  %_743 = sub i32 0, %7634
  %gen744 = add i32 %_743, 1
  %7635 = add i32 %7634, 1
  %_745 = sub i32 %7632, %7632
  %gen746 = mul i32 %_745, %7632
  %_747 = sub i32 0, %7632
  %gen748 = add i32 %_747, %7632
  %7636 = mul i32 %7632, %7632
  %_749 = shl i32 %7635, %7635
  %_750 = sub i32 0, %7635
  %gen751 = add i32 %_750, %7635
  %_752 = sub i32 %7635, %7635
  %gen753 = mul i32 %_752, %7635
  %7637 = mul i32 %7635, %7635
  %_754 = sub i32 %7637, 34
  %gen755 = mul i32 %_754, 34
  %_756 = sub i32 0, %7637
  %gen757 = add i32 %_756, 34
  %_758 = shl i32 %7637, 34
  %_759 = sub i32 %7637, 34
  %gen760 = mul i32 %_759, 34
  %7638 = mul i32 %7637, 34
  %_761 = sub i32 0, %7636
  %gen762 = add i32 %_761, %7638
  %_763 = sub i32 %7636, %7638
  %gen764 = mul i32 %_763, %7638
  %_765 = shl i32 %7636, %7638
  %_766 = sub i32 0, %7636
  %gen767 = add i32 %_766, %7638
  %_768 = sub i32 %7636, %7638
  %gen769 = mul i32 %_768, %7638
  %7639 = sub i32 %7636, %7638
  %_770 = sub i32 %7639, -2
  %gen771 = mul i32 %_770, -2
  %_772 = sub i32 %7639, -2
  %gen773 = mul i32 %_772, -2
  %_774 = sub i32 %7639, -2
  %gen775 = mul i32 %_774, -2
  %_776 = shl i32 %7639, -2
  %_777 = shl i32 %7639, -2
  %_778 = sub i32 %7639, -2
  %gen779 = mul i32 %_778, -2
  %_780 = sub i32 %7639, -2
  %gen781 = mul i32 %_780, -2
  %7640 = mul i32 %7639, -2
  %_782 = sub i32 %7640, -2
  %gen783 = mul i32 %_782, -2
  %7641 = add i32 %7640, -2
  %7642 = icmp ne i32 %7641, -4
  br label %originalBB702

originalBB787alteredBB:                           ; preds = %originalBB787, %2138
  br label %originalBB787

originalBB791alteredBB:                           ; preds = %originalBB791, %2155
  %7643 = getelementptr inbounds i8, i8* %2114, i64 %2116, !dbg !2113
  %7644 = load i8, i8* %7643, align 1, !dbg !2113
  %7645 = sext i8 %7644 to i32, !dbg !2113
  %7646 = icmp eq i32 %7645, 63, !dbg !2116
  br label %originalBB791

originalBB795alteredBB:                           ; preds = %originalBB795, %2176
  %7647 = load i8*, i8** %21, align 8, !dbg !2118
  %7648 = load i64, i64* %28, align 8, !dbg !2119
  %_796 = shl i64 %7648, 2
  %_797 = sub i64 0, %7648
  %gen798 = add i64 %_797, 2
  %_799 = sub i64 0, %7648
  %gen800 = add i64 %_799, 2
  %_801 = sub i64 0, %7648
  %gen802 = add i64 %_801, 2
  %7649 = add i64 %7648, 2, !dbg !2120
  %7650 = getelementptr inbounds i8, i8* %7647, i64 %7649, !dbg !2118
  %7651 = load i8, i8* %7650, align 1, !dbg !2118
  %7652 = sext i8 %7651 to i32, !dbg !2118
  br label %originalBB795

originalBB806alteredBB:                           ; preds = %originalBB806, %2199
  %7653 = load i8, i8* %35, align 1, !dbg !2122
  %7654 = trunc i8 %7653 to i1, !dbg !2122
  br label %originalBB806

originalBB810alteredBB:                           ; preds = %originalBB810, %2218
  br label %originalBB810

originalBB814alteredBB:                           ; preds = %originalBB814, %2235
  %7655 = load i8*, i8** %21, align 8, !dbg !2127
  %7656 = load i64, i64* %28, align 8, !dbg !2128
  %_815 = shl i64 %7656, 2
  %_816 = shl i64 %7656, 2
  %_817 = shl i64 %7656, 2
  %_818 = sub i64 %7656, 2
  %gen819 = mul i64 %_818, 2
  %_820 = shl i64 %7656, 2
  %_821 = shl i64 %7656, 2
  %7657 = add i64 %7656, 2, !dbg !2129
  %7658 = getelementptr inbounds i8, i8* %7655, i64 %7657, !dbg !2127
  %7659 = load i8, i8* %7658, align 1, !dbg !2127
  store i8 %7659, i8* %39, align 1, !dbg !2130
  %7660 = load i64, i64* %28, align 8, !dbg !2131
  %_822 = sub i64 %7660, 2
  %gen823 = mul i64 %_822, 2
  %7661 = add i64 %7660, 2, !dbg !2131
  store i64 %7661, i64* %28, align 8, !dbg !2131
  br label %originalBB814

originalBB827alteredBB:                           ; preds = %originalBB827, %2259
  %7662 = load i64, i64* %29, align 8, !dbg !2133
  %7663 = load i64, i64* %20, align 8, !dbg !2133
  %7664 = icmp ult i64 %7662, %7663, !dbg !2133
  br label %originalBB827

originalBB831alteredBB:                           ; preds = %originalBB831, %2279
  %7665 = load i8*, i8** %19, align 8, !dbg !2133
  %7666 = load i64, i64* %29, align 8, !dbg !2133
  %7667 = getelementptr inbounds i8, i8* %7665, i64 %7666, !dbg !2133
  store i8 63, i8* %7667, align 1, !dbg !2133
  br label %originalBB831

originalBB835alteredBB:                           ; preds = %originalBB835, %2299
  %7668 = load i64, i64* %29, align 8, !dbg !2136
  %_836 = sub i64 %7668, 1
  %gen837 = mul i64 %_836, 1
  %_838 = sub i64 %7668, 1
  %gen839 = mul i64 %_838, 1
  %7669 = add i64 %7668, 1, !dbg !2136
  store i64 %7669, i64* %29, align 8, !dbg !2136
  br label %originalBB835

originalBB843alteredBB:                           ; preds = %originalBB843, %2318
  br label %originalBB843

originalBB847alteredBB:                           ; preds = %originalBB847, %2335
  %7670 = load i64, i64* %29, align 8, !dbg !2138
  %7671 = load i64, i64* %20, align 8, !dbg !2138
  %7672 = icmp ult i64 %7670, %7671, !dbg !2138
  br label %originalBB847

originalBB851alteredBB:                           ; preds = %originalBB851, %2355
  %7673 = load i8*, i8** %19, align 8, !dbg !2138
  %7674 = load i64, i64* %29, align 8, !dbg !2138
  %7675 = getelementptr inbounds i8, i8* %7673, i64 %7674, !dbg !2138
  store i8 34, i8* %7675, align 1, !dbg !2138
  br label %originalBB851

originalBB855alteredBB:                           ; preds = %originalBB855, %2375
  %7676 = load i64, i64* %29, align 8, !dbg !2141
  %_856 = shl i64 %7676, 1
  %7677 = add i64 %7676, 1, !dbg !2141
  %7678 = trunc i64 1 to i32
  %_857 = sub i32 0, %7678
  %gen858 = add i32 %_857, -5
  %_859 = shl i32 %7678, -5
  %_860 = sub i32 %7678, -5
  %gen861 = mul i32 %_860, -5
  %_862 = sub i32 0, %7678
  %gen863 = add i32 %_862, -5
  %7679 = mul i32 %7678, -5
  %_864 = sub i32 0, %7679
  %gen865 = add i32 %_864, -5
  %_866 = shl i32 %7679, -5
  %_867 = shl i32 %7679, -5
  %_868 = sub i32 %7679, -5
  %gen869 = mul i32 %_868, -5
  %_870 = shl i32 %7679, -5
  %_871 = shl i32 %7679, -5
  %_872 = shl i32 %7679, -5
  %_873 = sub i32 0, %7679
  %gen874 = add i32 %_873, -5
  %7680 = add i32 %7679, -5
  %_875 = shl i32 %7680, %7680
  %_876 = sub i32 %7680, %7680
  %gen877 = mul i32 %_876, %7680
  %_878 = shl i32 %7680, %7680
  %_879 = sub i32 0, %7680
  %gen880 = add i32 %_879, %7680
  %_881 = sub i32 0, %7680
  %gen882 = add i32 %_881, %7680
  %_883 = sub i32 0, %7680
  %gen884 = add i32 %_883, %7680
  %7681 = mul i32 %7680, %7680
  %_885 = sub i32 0, %7681
  %gen886 = add i32 %_885, %7680
  %_887 = sub i32 %7681, %7680
  %gen888 = mul i32 %_887, %7680
  %_889 = shl i32 %7681, %7680
  %_890 = shl i32 %7681, %7680
  %_891 = sub i32 0, %7681
  %gen892 = add i32 %_891, %7680
  %_893 = sub i32 0, %7681
  %gen894 = add i32 %_893, %7680
  %7682 = sub i32 %7681, %7680
  %_895 = shl i32 %7682, 2
  %_896 = sub i32 0, %7682
  %gen897 = add i32 %_896, 2
  %_898 = shl i32 %7682, 2
  %_899 = sub i32 0, %7682
  %gen900 = add i32 %_899, 2
  %_901 = shl i32 %7682, 2
  %_902 = shl i32 %7682, 2
  %_903 = sub i32 %7682, 2
  %gen904 = mul i32 %_903, 2
  %7683 = srem i32 %7682, 2
  %_905 = shl i32 %7683, 5
  %_906 = sub i32 %7683, 5
  %gen907 = mul i32 %_906, 5
  %_908 = shl i32 %7683, 5
  %_909 = sub i32 0, %7683
  %gen910 = add i32 %_909, 5
  %7684 = mul i32 %7683, 5
  %_911 = sub i32 0, %7684
  %gen912 = add i32 %_911, 2
  %_913 = sub i32 0, %7684
  %gen914 = add i32 %_913, 2
  %7685 = add i32 %7684, 2
  %7686 = icmp eq i32 %7685, 2
  br label %originalBB855

originalBB918alteredBB:                           ; preds = %originalBB918, %2403
  br label %originalBB918

originalBB922alteredBB:                           ; preds = %originalBB922, %2420
  store i64 %2385, i64* %29, align 8, !dbg !2141
  br label %originalBB922

originalBB926alteredBB:                           ; preds = %originalBB926, %2437
  br label %originalBB926

originalBB930alteredBB:                           ; preds = %originalBB930, %2454
  %7687 = load i64, i64* %29, align 8, !dbg !2143
  %7688 = load i64, i64* %20, align 8, !dbg !2143
  %7689 = icmp ult i64 %7687, %7688, !dbg !2143
  br label %originalBB930

originalBB934alteredBB:                           ; preds = %originalBB934, %2474
  %7690 = load i8*, i8** %19, align 8, !dbg !2143
  %7691 = load i64, i64* %29, align 8, !dbg !2143
  %7692 = getelementptr inbounds i8, i8* %7690, i64 %7691, !dbg !2143
  store i8 34, i8* %7692, align 1, !dbg !2143
  br label %originalBB934

originalBB938alteredBB:                           ; preds = %originalBB938, %2494
  %7693 = load i64, i64* %29, align 8, !dbg !2146
  %_939 = sub i64 %7693, 1
  %gen940 = mul i64 %_939, 1
  %_941 = sub i64 0, %7693
  %gen942 = add i64 %_941, 1
  %_943 = shl i64 %7693, 1
  %_944 = sub i64 0, %7693
  %gen945 = add i64 %_944, 1
  %_946 = shl i64 %7693, 1
  %7694 = add i64 %7693, 1, !dbg !2146
  store i64 %7694, i64* %29, align 8, !dbg !2146
  br label %originalBB938

originalBB950alteredBB:                           ; preds = %originalBB950, %2513
  br label %originalBB950

originalBB954alteredBB:                           ; preds = %originalBB954, %2530
  %7695 = load i64, i64* %29, align 8, !dbg !2148
  %7696 = load i64, i64* %20, align 8, !dbg !2148
  %7697 = icmp ult i64 %7695, %7696, !dbg !2148
  br label %originalBB954

originalBB958alteredBB:                           ; preds = %originalBB958, %2550
  %7698 = load i8*, i8** %19, align 8, !dbg !2148
  %7699 = load i64, i64* %29, align 8, !dbg !2148
  %7700 = getelementptr inbounds i8, i8* %7698, i64 %7699, !dbg !2148
  store i8 63, i8* %7700, align 1, !dbg !2148
  br label %originalBB958

originalBB962alteredBB:                           ; preds = %originalBB962, %2570
  %7701 = load i64, i64* %29, align 8, !dbg !2151
  %_963 = sub i64 %7701, 1
  %gen964 = mul i64 %_963, 1
  %_965 = sub i64 0, %7701
  %gen966 = add i64 %_965, 1
  %_967 = shl i64 %7701, 1
  %_968 = shl i64 %7701, 1
  %_969 = sub i64 0, %7701
  %gen970 = add i64 %_969, 1
  %7702 = add i64 %7701, 1, !dbg !2151
  store i64 %7702, i64* %29, align 8, !dbg !2151
  br label %originalBB962

originalBB974alteredBB:                           ; preds = %originalBB974, %2589
  br label %originalBB974

originalBB978alteredBB:                           ; preds = %originalBB978, %2606
  br label %originalBB978

originalBB982alteredBB:                           ; preds = %originalBB982, %2623
  br label %originalBB982

originalBB986alteredBB:                           ; preds = %originalBB986, %2640
  br label %originalBB986

originalBB990alteredBB:                           ; preds = %originalBB990, %2657
  br label %originalBB990

originalBB994alteredBB:                           ; preds = %originalBB994, %2674
  br label %originalBB994

originalBB998alteredBB:                           ; preds = %originalBB998, %2691
  store i8 97, i8* %40, align 1, !dbg !2158
  br label %originalBB998

originalBB1002alteredBB:                          ; preds = %originalBB1002, %2708
  store i8 98, i8* %40, align 1, !dbg !2160
  br label %originalBB1002

originalBB1006alteredBB:                          ; preds = %originalBB1006, %2725
  store i8 102, i8* %40, align 1, !dbg !2162
  br label %originalBB1006

originalBB1010alteredBB:                          ; preds = %originalBB1010, %2742
  store i8 110, i8* %40, align 1, !dbg !2164
  br label %originalBB1010

originalBB1014alteredBB:                          ; preds = %originalBB1014, %2759
  store i8 114, i8* %40, align 1, !dbg !2166
  br label %originalBB1014

originalBB1018alteredBB:                          ; preds = %originalBB1018, %2776
  store i8 116, i8* %40, align 1, !dbg !2168
  br label %originalBB1018

originalBB1022alteredBB:                          ; preds = %originalBB1022, %2793
  store i8 118, i8* %40, align 1, !dbg !2170
  br label %originalBB1022

originalBB1026alteredBB:                          ; preds = %originalBB1026, %2810
  %7703 = load i8, i8* %39, align 1, !dbg !2172
  store i8 %7703, i8* %40, align 1, !dbg !2173
  %7704 = load i32, i32* %23, align 4, !dbg !2174
  %7705 = icmp eq i32 %7704, 2, !dbg !2176
  br label %originalBB1026

originalBB1030alteredBB:                          ; preds = %originalBB1030, %2830
  %7706 = load i8, i8* %35, align 1, !dbg !2178
  %7707 = trunc i8 %7706 to i1, !dbg !2178
  br label %originalBB1030

originalBB1034alteredBB:                          ; preds = %originalBB1034, %2849
  br label %originalBB1034

originalBB1038alteredBB:                          ; preds = %originalBB1038, %2866
  br label %originalBB1038

originalBB1042alteredBB:                          ; preds = %originalBB1042, %2883
  %7708 = load i8, i8* %33, align 1, !dbg !2184
  %7709 = trunc i8 %7708 to i1, !dbg !2184
  br label %originalBB1042

originalBB1046alteredBB:                          ; preds = %originalBB1046, %2902
  %7710 = load i8, i8* %35, align 1, !dbg !2187
  %7711 = trunc i8 %7710 to i1, !dbg !2187
  br label %originalBB1046

originalBB1050alteredBB:                          ; preds = %originalBB1050, %2921
  %7712 = load i64, i64* %32, align 8, !dbg !2189
  %7713 = icmp ne i64 %7712, 0, !dbg !2189
  br label %originalBB1050

originalBB1054alteredBB:                          ; preds = %originalBB1054, %2940
  br label %originalBB1054

originalBB1058alteredBB:                          ; preds = %originalBB1058, %2957
  br label %originalBB1058

originalBB1062alteredBB:                          ; preds = %originalBB1062, %2974
  %7714 = load i32, i32* %23, align 4, !dbg !2194
  %7715 = icmp eq i32 %7714, 2, !dbg !2196
  br label %originalBB1062

originalBB1066alteredBB:                          ; preds = %originalBB1066, %2993
  %7716 = load i8, i8* %35, align 1, !dbg !2198
  %7717 = trunc i8 %7716 to i1, !dbg !2198
  br label %originalBB1066

originalBB1070alteredBB:                          ; preds = %originalBB1070, %3012
  br label %originalBB1070

originalBB1074alteredBB:                          ; preds = %originalBB1074, %3029
  br label %originalBB1074

originalBB1078alteredBB:                          ; preds = %originalBB1078, %3046
  %7718 = load i8, i8* %33, align 1, !dbg !2203
  %7719 = trunc i8 %7718 to i1, !dbg !2203
  br label %originalBB1078

originalBB1082alteredBB:                          ; preds = %originalBB1082, %3065
  %7720 = load i8, i8* %40, align 1, !dbg !2206
  store i8 %7720, i8* %39, align 1, !dbg !2208
  br label %originalBB1082

originalBB1086alteredBB:                          ; preds = %originalBB1086, %3083
  br label %originalBB1086

originalBB1090alteredBB:                          ; preds = %originalBB1090, %3100
  %7721 = load i64, i64* %22, align 8, !dbg !2211
  %7722 = icmp eq i64 %7721, -1, !dbg !2213
  br label %originalBB1090

originalBB1094alteredBB:                          ; preds = %originalBB1094, %3119
  %7723 = load i8*, i8** %21, align 8, !dbg !2215
  %7724 = getelementptr inbounds i8, i8* %7723, i64 1, !dbg !2215
  %7725 = load i8, i8* %7724, align 1, !dbg !2215
  %7726 = sext i8 %7725 to i32, !dbg !2215
  %7727 = icmp eq i32 %7726, 0, !dbg !2216
  br label %originalBB1094

originalBB1098alteredBB:                          ; preds = %originalBB1098, %3141
  %7728 = load i64, i64* %22, align 8, !dbg !2217
  %7729 = icmp eq i64 %7728, 1, !dbg !2218
  br label %originalBB1098

originalBB1102alteredBB:                          ; preds = %originalBB1102, %3160
  br label %originalBB1102

originalBB1106alteredBB:                          ; preds = %originalBB1106, %3177
  br label %originalBB1106

originalBB1110alteredBB:                          ; preds = %originalBB1110, %3194
  %7730 = load i64, i64* %28, align 8, !dbg !2221
  %7731 = icmp ne i64 %7730, 0, !dbg !2223
  br label %originalBB1110

originalBB1114alteredBB:                          ; preds = %originalBB1114, %3213
  br label %originalBB1114

originalBB1118alteredBB:                          ; preds = %originalBB1118, %3230
  br label %originalBB1118

originalBB1122alteredBB:                          ; preds = %originalBB1122, %3247
  store i8 1, i8* %43, align 1, !dbg !2227
  br label %originalBB1122

originalBB1126alteredBB:                          ; preds = %originalBB1126, %3264
  %7732 = load i32, i32* %23, align 4, !dbg !2229
  %7733 = icmp eq i32 %7732, 2, !dbg !2231
  br label %originalBB1126

originalBB1130alteredBB:                          ; preds = %originalBB1130, %3283
  %7734 = load i8, i8* %35, align 1, !dbg !2233
  %7735 = trunc i8 %7734 to i1, !dbg !2233
  br label %originalBB1130

originalBB1134alteredBB:                          ; preds = %originalBB1134, %3302
  br label %originalBB1134

originalBB1138alteredBB:                          ; preds = %originalBB1138, %3319
  br label %originalBB1138

originalBB1142alteredBB:                          ; preds = %originalBB1142, %3336
  store i8 1, i8* %37, align 1, !dbg !2237
  store i8 1, i8* %43, align 1, !dbg !2238
  %7736 = load i32, i32* %23, align 4, !dbg !2239
  %7737 = icmp eq i32 %7736, 2, !dbg !2241
  br label %originalBB1142

originalBB1146alteredBB:                          ; preds = %originalBB1146, %3355
  %7738 = load i8, i8* %35, align 1, !dbg !2243
  %7739 = trunc i8 %7738 to i1, !dbg !2243
  br label %originalBB1146

originalBB1150alteredBB:                          ; preds = %originalBB1150, %3374
  br label %originalBB1150

originalBB1154alteredBB:                          ; preds = %originalBB1154, %3391
  %7740 = load i64, i64* %20, align 8, !dbg !2248
  %7741 = icmp ne i64 %7740, 0, !dbg !2248
  br label %originalBB1154

originalBB1158alteredBB:                          ; preds = %originalBB1158, %3410
  %7742 = load i64, i64* %30, align 8, !dbg !2251
  %7743 = icmp ne i64 %7742, 0, !dbg !2251
  br label %originalBB1158

originalBB1162alteredBB:                          ; preds = %originalBB1162, %3429
  %7744 = load i64, i64* %20, align 8, !dbg !2253
  store i64 %7744, i64* %30, align 8, !dbg !2255
  store i64 0, i64* %20, align 8, !dbg !2256
  br label %originalBB1162

originalBB1166alteredBB:                          ; preds = %originalBB1166, %3447
  br label %originalBB1166

originalBB1170alteredBB:                          ; preds = %originalBB1170, %3464
  %7745 = load i64, i64* %29, align 8, !dbg !2259
  %7746 = load i64, i64* %20, align 8, !dbg !2259
  %7747 = icmp ult i64 %7745, %7746, !dbg !2259
  br label %originalBB1170

originalBB1174alteredBB:                          ; preds = %originalBB1174, %3484
  %7748 = load i8*, i8** %19, align 8, !dbg !2259
  %7749 = load i64, i64* %29, align 8, !dbg !2259
  %7750 = getelementptr inbounds i8, i8* %7748, i64 %7749, !dbg !2259
  store i8 39, i8* %7750, align 1, !dbg !2259
  br label %originalBB1174

originalBB1178alteredBB:                          ; preds = %originalBB1178, %3504
  %7751 = load i64, i64* %29, align 8, !dbg !2262
  %_1179 = sub i64 %7751, 1
  %gen1180 = mul i64 %_1179, 1
  %_1181 = shl i64 %7751, 1
  %7752 = add i64 %7751, 1, !dbg !2262
  store i64 %7752, i64* %29, align 8, !dbg !2262
  br label %originalBB1178

originalBB1185alteredBB:                          ; preds = %originalBB1185, %3523
  br label %originalBB1185

originalBB1189alteredBB:                          ; preds = %originalBB1189, %3540
  %7753 = load i64, i64* %29, align 8, !dbg !2264
  %7754 = load i64, i64* %20, align 8, !dbg !2264
  %7755 = icmp ult i64 %7753, %7754, !dbg !2264
  br label %originalBB1189

originalBB1193alteredBB:                          ; preds = %originalBB1193, %3560
  %7756 = load i8*, i8** %19, align 8, !dbg !2264
  %7757 = load i64, i64* %29, align 8, !dbg !2264
  %7758 = getelementptr inbounds i8, i8* %7756, i64 %7757, !dbg !2264
  store i8 92, i8* %7758, align 1, !dbg !2264
  br label %originalBB1193

originalBB1197alteredBB:                          ; preds = %originalBB1197, %3580
  %7759 = load i64, i64* %29, align 8, !dbg !2267
  %_1198 = shl i64 %7759, 1
  %_1199 = shl i64 %7759, 1
  %_1200 = shl i64 %7759, 1
  %_1201 = sub i64 %7759, 1
  %gen1202 = mul i64 %_1201, 1
  %_1203 = sub i64 0, %7759
  %gen1204 = add i64 %_1203, 1
  %_1205 = sub i64 %7759, 1
  %gen1206 = mul i64 %_1205, 1
  %_1207 = shl i64 %7759, 1
  %_1208 = shl i64 %7759, 1
  %_1209 = shl i64 %7759, 1
  %7760 = add i64 %7759, 1, !dbg !2267
  store i64 %7760, i64* %29, align 8, !dbg !2267
  br label %originalBB1197

originalBB1213alteredBB:                          ; preds = %originalBB1213, %3599
  br label %originalBB1213

originalBB1217alteredBB:                          ; preds = %originalBB1217, %3616
  %7761 = load i64, i64* %29, align 8, !dbg !2269
  %7762 = load i64, i64* %20, align 8, !dbg !2269
  %7763 = icmp ult i64 %7761, %7762, !dbg !2269
  br label %originalBB1217

originalBB1221alteredBB:                          ; preds = %originalBB1221, %3636
  %7764 = load i8*, i8** %19, align 8, !dbg !2269
  %7765 = load i64, i64* %29, align 8, !dbg !2269
  %7766 = getelementptr inbounds i8, i8* %7764, i64 %7765, !dbg !2269
  store i8 39, i8* %7766, align 1, !dbg !2269
  br label %originalBB1221

originalBB1225alteredBB:                          ; preds = %originalBB1225, %3656
  %7767 = load i64, i64* %29, align 8, !dbg !2272
  %_1226 = shl i64 %7767, 1
  %_1227 = shl i64 %7767, 1
  %_1228 = sub i64 0, %7767
  %gen1229 = add i64 %_1228, 1
  %_1230 = sub i64 %7767, 1
  %gen1231 = mul i64 %_1230, 1
  %7768 = add i64 %7767, 1, !dbg !2272
  store i64 %7768, i64* %29, align 8, !dbg !2272
  br label %originalBB1225

originalBB1235alteredBB:                          ; preds = %originalBB1235, %3675
  store i8 0, i8* %36, align 1, !dbg !2273
  br label %originalBB1235

originalBB1239alteredBB:                          ; preds = %originalBB1239, %3692
  br label %originalBB1239

originalBB1243alteredBB:                          ; preds = %originalBB1243, %3709
  store i8 1, i8* %43, align 1, !dbg !2276
  br label %originalBB1243

originalBB1247alteredBB:                          ; preds = %originalBB1247, %3726
  %7769 = load i8, i8* %34, align 1, !dbg !2283
  %7770 = trunc i8 %7769 to i1, !dbg !2283
  br label %originalBB1247

originalBB1251alteredBB:                          ; preds = %originalBB1251, %3745
  store i64 1, i64* %44, align 8, !dbg !2286
  %7771 = call i16** @__ctype_b_loc() #15, !dbg !2288
  %7772 = load i16*, i16** %7771, align 8, !dbg !2288
  %7773 = load i8, i8* %39, align 1, !dbg !2288
  %7774 = zext i8 %7773 to i32, !dbg !2288
  %7775 = sext i32 %7774 to i64, !dbg !2288
  %7776 = getelementptr inbounds i16, i16* %7772, i64 %7775, !dbg !2288
  %7777 = load i16, i16* %7776, align 2, !dbg !2288
  %7778 = zext i16 %7777 to i32, !dbg !2288
  %_1252 = sub i32 %7778, 16384
  %gen1253 = mul i32 %_1252, 16384
  %_1254 = sub i32 0, %7778
  %gen1255 = add i32 %_1254, 16384
  %_1256 = sub i32 %7778, 16384
  %gen1257 = mul i32 %_1256, 16384
  %7779 = and i32 %7778, 16384, !dbg !2288
  %7780 = icmp ne i32 %7779, 0, !dbg !2289
  %7781 = zext i1 %7780 to i8, !dbg !2290
  store i8 %7781, i8* %45, align 1, !dbg !2290
  br label %originalBB1251

originalBB1261alteredBB:                          ; preds = %originalBB1261, %3773
  %7782 = bitcast %struct.__mbstate_t* %46 to i8*, !dbg !2310
  call void @llvm.memset.p0i8.i64(i8* align 4 %7782, i8 0, i64 8, i1 false), !dbg !2310
  store i64 0, i64* %44, align 8, !dbg !2311
  store i8 1, i8* %45, align 1, !dbg !2312
  %7783 = load i64, i64* %22, align 8, !dbg !2313
  %7784 = trunc i64 %7783 to i32
  %_1262 = shl i32 %7784, -2
  %_1263 = sub i32 %7784, -2
  %gen1264 = mul i32 %_1263, -2
  %7785 = mul i32 %7784, -2
  %_1265 = sub i32 0, %7785
  %gen1266 = add i32 %_1265, %7785
  %_1267 = sub i32 %7785, %7785
  %gen1268 = mul i32 %_1267, %7785
  %7786 = mul i32 %7785, %7785
  %_1269 = shl i32 %7786, %7785
  %7787 = sub i32 %7786, %7785
  %_1270 = sub i32 0, %7787
  %gen1271 = add i32 %_1270, 2
  %_1272 = sub i32 0, %7787
  %gen1273 = add i32 %_1272, 2
  %_1274 = shl i32 %7787, 2
  %_1275 = sub i32 0, %7787
  %gen1276 = add i32 %_1275, 2
  %_1277 = sub i32 %7787, 2
  %gen1278 = mul i32 %_1277, 2
  %7788 = srem i32 %7787, 2
  %7789 = icmp ne i32 %7788, 0
  br label %originalBB1261

originalBB1282alteredBB:                          ; preds = %originalBB1282, %3798
  br label %originalBB1282

originalBB1286alteredBB:                          ; preds = %originalBB1286, %3815
  %7790 = icmp eq i64 %3783, -1, !dbg !2315
  br label %originalBB1286

originalBB1290alteredBB:                          ; preds = %originalBB1290, %3833
  %7791 = load i8*, i8** %21, align 8, !dbg !2317
  %7792 = call i64 @strlen(i8* %7791) #13, !dbg !2318
  store i64 %7792, i64* %22, align 8, !dbg !2319
  br label %originalBB1290

originalBB1294alteredBB:                          ; preds = %originalBB1294, %3852
  br label %originalBB1294

originalBB1298alteredBB:                          ; preds = %originalBB1298, %3869
  %7793 = load i8*, i8** %21, align 8, !dbg !2328
  %7794 = load i64, i64* %28, align 8, !dbg !2329
  %7795 = load i64, i64* %44, align 8, !dbg !2330
  %_1299 = sub i64 %7794, %7795
  %gen1300 = mul i64 %_1299, %7795
  %_1301 = sub i64 0, %7794
  %gen1302 = add i64 %_1301, %7795
  %_1303 = sub i64 %7794, %7795
  %gen1304 = mul i64 %_1303, %7795
  %7796 = add i64 %7794, %7795, !dbg !2331
  %7797 = getelementptr inbounds i8, i8* %7793, i64 %7796, !dbg !2328
  %7798 = load i64, i64* %22, align 8, !dbg !2332
  %7799 = load i64, i64* %28, align 8, !dbg !2333
  %7800 = load i64, i64* %44, align 8, !dbg !2334
  %_1305 = shl i64 %7799, %7800
  %_1306 = sub i64 0, %7799
  %gen1307 = add i64 %_1306, %7800
  %7801 = add i64 %7799, %7800, !dbg !2335
  %_1308 = shl i64 %7798, %7801
  %_1309 = sub i64 %7798, %7801
  %gen1310 = mul i64 %_1309, %7801
  %_1311 = sub i64 %7798, %7801
  %gen1312 = mul i64 %_1311, %7801
  %_1313 = sub i64 0, %7798
  %gen1314 = add i64 %_1313, %7801
  %_1315 = shl i64 %7798, %7801
  %7802 = sub i64 %7798, %7801, !dbg !2336
  %7803 = call i64 @rpl_mbrtowc(i32* %47, i8* %7797, i64 %7802, %struct.__mbstate_t* %46), !dbg !2337
  store i64 %7803, i64* %48, align 8, !dbg !2327
  %7804 = load i64, i64* %48, align 8, !dbg !2338
  %7805 = icmp eq i64 %7804, 0, !dbg !2340
  br label %originalBB1298

originalBB1319alteredBB:                          ; preds = %originalBB1319, %3899
  br label %originalBB1319

originalBB1323alteredBB:                          ; preds = %originalBB1323, %3916
  %7806 = load i64, i64* %48, align 8, !dbg !2343
  %7807 = icmp eq i64 %7806, -1, !dbg !2345
  br label %originalBB1323

originalBB1327alteredBB:                          ; preds = %originalBB1327, %3935
  store i8 0, i8* %45, align 1, !dbg !2347
  br label %originalBB1327

originalBB1331alteredBB:                          ; preds = %originalBB1331, %3952
  %7808 = load i64, i64* %48, align 8, !dbg !2350
  %7809 = icmp eq i64 %7808, -2, !dbg !2352
  br label %originalBB1331

originalBB1335alteredBB:                          ; preds = %originalBB1335, %3971
  store i8 0, i8* %45, align 1, !dbg !2354
  br label %originalBB1335

originalBB1339alteredBB:                          ; preds = %originalBB1339, %3988
  %7810 = load i64, i64* %28, align 8, !dbg !2357
  %7811 = load i64, i64* %44, align 8, !dbg !2358
  %_1340 = sub i64 0, %7810
  %gen1341 = add i64 %_1340, %7811
  %_1342 = sub i64 0, %7810
  %gen1343 = add i64 %_1342, %7811
  %_1344 = sub i64 %7810, %7811
  %gen1345 = mul i64 %_1344, %7811
  %7812 = add i64 %7810, %7811, !dbg !2359
  %7813 = load i64, i64* %22, align 8, !dbg !2360
  %7814 = icmp ult i64 %7812, %7813, !dbg !2361
  br label %originalBB1339

originalBB1349alteredBB:                          ; preds = %originalBB1349, %4010
  %7815 = load i8*, i8** %21, align 8, !dbg !2363
  %7816 = load i64, i64* %28, align 8, !dbg !2364
  %7817 = load i64, i64* %44, align 8, !dbg !2365
  %_1350 = sub i64 %7816, %7817
  %gen1351 = mul i64 %_1350, %7817
  %_1352 = sub i64 %7816, %7817
  %gen1353 = mul i64 %_1352, %7817
  %_1354 = sub i64 0, %7816
  %gen1355 = add i64 %_1354, %7817
  %7818 = add i64 %7816, %7817, !dbg !2366
  %7819 = getelementptr inbounds i8, i8* %7815, i64 %7818, !dbg !2363
  %7820 = load i8, i8* %7819, align 1, !dbg !2363
  %7821 = sext i8 %7820 to i32, !dbg !2363
  %7822 = icmp ne i32 %7821, 0, !dbg !2362
  br label %originalBB1349

originalBB1359alteredBB:                          ; preds = %originalBB1359, %4035
  br label %originalBB1359

originalBB1363alteredBB:                          ; preds = %originalBB1363, %4053
  %7823 = load i64, i64* %44, align 8, !dbg !2368
  %_1364 = sub i64 0, %7823
  %gen1365 = add i64 %_1364, 1
  %_1366 = sub i64 0, %7823
  %gen1367 = add i64 %_1366, 1
  %_1368 = shl i64 %7823, 1
  %7824 = add i64 %7823, 1, !dbg !2368
  store i64 %7824, i64* %44, align 8, !dbg !2368
  br label %originalBB1363

originalBB1372alteredBB:                          ; preds = %originalBB1372, %4072
  br label %originalBB1372

originalBB1376alteredBB:                          ; preds = %originalBB1376, %4089
  %7825 = load i8, i8* %35, align 1, !dbg !2371
  %7826 = trunc i8 %7825 to i1, !dbg !2371
  br label %originalBB1376

originalBB1380alteredBB:                          ; preds = %originalBB1380, %4108
  %7827 = load i32, i32* %23, align 4, !dbg !2375
  %7828 = icmp eq i32 %7827, 2, !dbg !2376
  br label %originalBB1380

originalBB1384alteredBB:                          ; preds = %originalBB1384, %4127
  store i64 1, i64* %49, align 8, !dbg !2381
  br label %originalBB1384

originalBB1388alteredBB:                          ; preds = %originalBB1388, %4144
  %7829 = load i64, i64* %49, align 8, !dbg !2384
  %7830 = load i64, i64* %48, align 8, !dbg !2386
  %7831 = icmp ult i64 %7829, %7830, !dbg !2387
  br label %originalBB1388

originalBB1392alteredBB:                          ; preds = %originalBB1392, %4164
  %7832 = load i8*, i8** %21, align 8, !dbg !2389
  %7833 = load i64, i64* %28, align 8, !dbg !2390
  %7834 = load i64, i64* %44, align 8, !dbg !2391
  %_1393 = shl i64 %7833, %7834
  %7835 = add i64 %7833, %7834, !dbg !2392
  %7836 = load i64, i64* %49, align 8, !dbg !2393
  %_1394 = sub i64 0, %7835
  %gen1395 = add i64 %_1394, %7836
  %_1396 = sub i64 %7835, %7836
  %gen1397 = mul i64 %_1396, %7836
  %_1398 = shl i64 %7835, %7836
  %_1399 = sub i64 0, %7835
  %gen1400 = add i64 %_1399, %7836
  %_1401 = sub i64 0, %7835
  %gen1402 = add i64 %_1401, %7836
  %_1403 = shl i64 %7835, %7836
  %7837 = add i64 %7835, %7836, !dbg !2394
  %7838 = getelementptr inbounds i8, i8* %7832, i64 %7837, !dbg !2389
  %7839 = load i8, i8* %7838, align 1, !dbg !2389
  %7840 = sext i8 %7839 to i32, !dbg !2389
  br label %originalBB1392

originalBB1407alteredBB:                          ; preds = %originalBB1407, %4190
  br label %originalBB1407

originalBB1411alteredBB:                          ; preds = %originalBB1411, %4207
  br label %originalBB1411

originalBB1415alteredBB:                          ; preds = %originalBB1415, %4224
  br label %originalBB1415

originalBB1419alteredBB:                          ; preds = %originalBB1419, %4241
  %7841 = load i64, i64* %49, align 8, !dbg !2400
  %_1420 = sub i64 0, %7841
  %gen1421 = add i64 %_1420, 1
  %_1422 = shl i64 %7841, 1
  %7842 = add i64 %7841, 1, !dbg !2400
  store i64 %7842, i64* %49, align 8, !dbg !2400
  br label %originalBB1419

originalBB1426alteredBB:                          ; preds = %originalBB1426, %4260
  br label %originalBB1426

originalBB1430alteredBB:                          ; preds = %originalBB1430, %4277
  %7843 = load i32, i32* %47, align 4, !dbg !2405
  %7844 = call i32 @iswprint(i32 %7843) #10, !dbg !2407
  %7845 = icmp ne i32 %7844, 0, !dbg !2407
  br label %originalBB1430

originalBB1434alteredBB:                          ; preds = %originalBB1434, %4297
  store i8 0, i8* %45, align 1, !dbg !2409
  br label %originalBB1434

originalBB1438alteredBB:                          ; preds = %originalBB1438, %4314
  %7846 = load i64, i64* %48, align 8, !dbg !2411
  %7847 = load i64, i64* %44, align 8, !dbg !2412
  %_1439 = sub i64 0, %7847
  %gen1440 = add i64 %_1439, %7846
  %_1441 = sub i64 %7847, %7846
  %gen1442 = mul i64 %_1441, %7846
  %_1443 = sub i64 %7847, %7846
  %gen1444 = mul i64 %_1443, %7846
  %_1445 = shl i64 %7847, %7846
  %_1446 = shl i64 %7847, %7846
  %_1447 = sub i64 0, %7847
  %gen1448 = add i64 %_1447, %7846
  %_1449 = sub i64 0, %7847
  %gen1450 = add i64 %_1449, %7846
  %7848 = add i64 %7847, %7846, !dbg !2412
  store i64 %7848, i64* %44, align 8, !dbg !2412
  br label %originalBB1438

originalBB1454alteredBB:                          ; preds = %originalBB1454, %4334
  br label %originalBB1454

originalBB1458alteredBB:                          ; preds = %originalBB1458, %4351
  br label %originalBB1458

originalBB1462alteredBB:                          ; preds = %originalBB1462, %4368
  br label %originalBB1462

originalBB1466alteredBB:                          ; preds = %originalBB1466, %4385
  %7849 = call i32 @mbsinit(%struct.__mbstate_t* %46) #13, !dbg !2414
  %7850 = icmp ne i32 %7849, 0, !dbg !2415
  %_1467 = sub i1 %7850, true
  %gen1468 = mul i1 %_1467, true
  %_1469 = sub i1 false, %7850
  %gen1470 = add i1 %_1469, true
  %_1471 = sub i1 %7850, true
  %gen1472 = mul i1 %_1471, true
  %_1473 = shl i1 %7850, true
  %_1474 = sub i1 false, %7850
  %gen1475 = add i1 %_1474, true
  %_1476 = shl i1 %7850, true
  %7851 = xor i1 %7850, true, !dbg !2415
  br label %originalBB1466

originalBB1480alteredBB:                          ; preds = %originalBB1480, %4405
  br label %originalBB1480

originalBB1484alteredBB:                          ; preds = %originalBB1484, %4422
  %7852 = load i8, i8* %45, align 1, !dbg !2418
  %7853 = trunc i8 %7852 to i1, !dbg !2418
  %7854 = zext i1 %7853 to i8, !dbg !2419
  store i8 %7854, i8* %43, align 1, !dbg !2419
  %7855 = load i64, i64* %44, align 8, !dbg !2420
  %7856 = icmp ult i64 1, %7855, !dbg !2422
  br label %originalBB1484

originalBB1488alteredBB:                          ; preds = %originalBB1488, %4444
  %7857 = load i8, i8* %33, align 1, !dbg !2424
  %7858 = trunc i8 %7857 to i1, !dbg !2424
  br label %originalBB1488

originalBB1492alteredBB:                          ; preds = %originalBB1492, %4463
  %7859 = load i8, i8* %45, align 1, !dbg !2426
  %7860 = trunc i8 %7859 to i1, !dbg !2426
  br label %originalBB1492

originalBB1496alteredBB:                          ; preds = %originalBB1496, %4482
  %7861 = load i64, i64* %28, align 8, !dbg !2431
  %7862 = load i64, i64* %44, align 8, !dbg !2432
  %7863 = add i64 %7861, %7862, !dbg !2433
  store i64 %7863, i64* %50, align 8, !dbg !2430
  br label %originalBB1496

originalBB1500alteredBB:                          ; preds = %originalBB1500, %4502
  %7864 = load i8, i8* %33, align 1, !dbg !2435
  %7865 = trunc i8 %7864 to i1, !dbg !2435
  br label %originalBB1500

originalBB1504alteredBB:                          ; preds = %originalBB1504, %4521
  %7866 = load i8, i8* %45, align 1, !dbg !2441
  %7867 = trunc i8 %7866 to i1, !dbg !2441
  br label %originalBB1504

originalBB1508alteredBB:                          ; preds = %originalBB1508, %4540
  br label %originalBB1508

originalBB1512alteredBB:                          ; preds = %originalBB1512, %4557
  %7868 = load i8, i8* %35, align 1, !dbg !2445
  %7869 = trunc i8 %7868 to i1, !dbg !2445
  br label %originalBB1512

originalBB1516alteredBB:                          ; preds = %originalBB1516, %4576
  br label %originalBB1516

originalBB1520alteredBB:                          ; preds = %originalBB1520, %4593
  store i8 1, i8* %42, align 1, !dbg !2448
  %7870 = load i32, i32* %23, align 4, !dbg !2449
  %7871 = icmp eq i32 %7870, 2, !dbg !2449
  br label %originalBB1520

originalBB1524alteredBB:                          ; preds = %originalBB1524, %4612
  %7872 = load i8, i8* %36, align 1, !dbg !2449
  %7873 = trunc i8 %7872 to i1, !dbg !2449
  br label %originalBB1524

originalBB1528alteredBB:                          ; preds = %originalBB1528, %4631
  br label %originalBB1528

originalBB1532alteredBB:                          ; preds = %originalBB1532, %4648
  %7874 = load i64, i64* %29, align 8, !dbg !2453
  %7875 = load i64, i64* %20, align 8, !dbg !2453
  %7876 = icmp ult i64 %7874, %7875, !dbg !2453
  br label %originalBB1532

originalBB1536alteredBB:                          ; preds = %originalBB1536, %4668
  %7877 = load i8*, i8** %19, align 8, !dbg !2453
  %7878 = load i64, i64* %29, align 8, !dbg !2453
  %7879 = getelementptr inbounds i8, i8* %7877, i64 %7878, !dbg !2453
  store i8 39, i8* %7879, align 1, !dbg !2453
  br label %originalBB1536

originalBB1540alteredBB:                          ; preds = %originalBB1540, %4688
  %7880 = load i64, i64* %29, align 8, !dbg !2456
  %_1541 = sub i64 0, %7880
  %gen1542 = add i64 %_1541, 1
  %_1543 = sub i64 %7880, 1
  %gen1544 = mul i64 %_1543, 1
  %_1545 = shl i64 %7880, 1
  %_1546 = sub i64 %7880, 1
  %gen1547 = mul i64 %_1546, 1
  %7881 = add i64 %7880, 1, !dbg !2456
  store i64 %7881, i64* %29, align 8, !dbg !2456
  br label %originalBB1540

originalBB1551alteredBB:                          ; preds = %originalBB1551, %4707
  br label %originalBB1551

originalBB1555alteredBB:                          ; preds = %originalBB1555, %4724
  %7882 = load i64, i64* %29, align 8, !dbg !2457
  %7883 = load i64, i64* %20, align 8, !dbg !2457
  %7884 = icmp ult i64 %7882, %7883, !dbg !2457
  br label %originalBB1555

originalBB1559alteredBB:                          ; preds = %originalBB1559, %4744
  %7885 = load i8*, i8** %19, align 8, !dbg !2457
  %7886 = load i64, i64* %29, align 8, !dbg !2457
  %7887 = getelementptr inbounds i8, i8* %7885, i64 %7886, !dbg !2457
  store i8 36, i8* %7887, align 1, !dbg !2457
  br label %originalBB1559

originalBB1563alteredBB:                          ; preds = %originalBB1563, %4764
  %7888 = load i64, i64* %29, align 8, !dbg !2460
  %_1564 = sub i64 %7888, 1
  %gen1565 = mul i64 %_1564, 1
  %_1566 = sub i64 %7888, 1
  %gen1567 = mul i64 %_1566, 1
  %_1568 = sub i64 0, %7888
  %gen1569 = add i64 %_1568, 1
  %7889 = add i64 %7888, 1, !dbg !2460
  store i64 %7889, i64* %29, align 8, !dbg !2460
  br label %originalBB1563

originalBB1573alteredBB:                          ; preds = %originalBB1573, %4783
  br label %originalBB1573

originalBB1577alteredBB:                          ; preds = %originalBB1577, %4800
  %7890 = load i64, i64* %29, align 8, !dbg !2461
  %7891 = load i64, i64* %20, align 8, !dbg !2461
  %7892 = icmp ult i64 %7890, %7891, !dbg !2461
  br label %originalBB1577

originalBB1581alteredBB:                          ; preds = %originalBB1581, %4820
  %7893 = load i8*, i8** %19, align 8, !dbg !2461
  %7894 = load i64, i64* %29, align 8, !dbg !2461
  %7895 = getelementptr inbounds i8, i8* %7893, i64 %7894, !dbg !2461
  store i8 39, i8* %7895, align 1, !dbg !2461
  br label %originalBB1581

originalBB1585alteredBB:                          ; preds = %originalBB1585, %4840
  %7896 = load i64, i64* %29, align 8, !dbg !2464
  %_1586 = sub i64 0, %7896
  %gen1587 = add i64 %_1586, 1
  %_1588 = sub i64 0, %7896
  %gen1589 = add i64 %_1588, 1
  %_1590 = shl i64 %7896, 1
  %_1591 = sub i64 %7896, 1
  %gen1592 = mul i64 %_1591, 1
  %_1593 = sub i64 0, %7896
  %gen1594 = add i64 %_1593, 1
  %_1595 = sub i64 %7896, 1
  %gen1596 = mul i64 %_1595, 1
  %_1597 = shl i64 %7896, 1
  %_1598 = sub i64 0, %7896
  %gen1599 = add i64 %_1598, 1
  %7897 = add i64 %7896, 1, !dbg !2464
  store i64 %7897, i64* %29, align 8, !dbg !2464
  br label %originalBB1585

originalBB1603alteredBB:                          ; preds = %originalBB1603, %4859
  store i8 1, i8* %36, align 1, !dbg !2451
  br label %originalBB1603

originalBB1607alteredBB:                          ; preds = %originalBB1607, %4876
  br label %originalBB1607

originalBB1611alteredBB:                          ; preds = %originalBB1611, %4893
  %7898 = load i64, i64* %29, align 8, !dbg !2465
  %7899 = load i64, i64* %20, align 8, !dbg !2465
  %7900 = icmp ult i64 %7898, %7899, !dbg !2465
  br label %originalBB1611

originalBB1615alteredBB:                          ; preds = %originalBB1615, %4913
  %7901 = load i8*, i8** %19, align 8, !dbg !2465
  %7902 = load i64, i64* %29, align 8, !dbg !2465
  %7903 = getelementptr inbounds i8, i8* %7901, i64 %7902, !dbg !2465
  store i8 92, i8* %7903, align 1, !dbg !2465
  br label %originalBB1615

originalBB1619alteredBB:                          ; preds = %originalBB1619, %4933
  %7904 = load i64, i64* %29, align 8, !dbg !2468
  %_1620 = sub i64 0, %7904
  %gen1621 = add i64 %_1620, 1
  %_1622 = sub i64 %7904, 1
  %gen1623 = mul i64 %_1622, 1
  %_1624 = shl i64 %7904, 1
  %_1625 = shl i64 %7904, 1
  %_1626 = sub i64 %7904, 1
  %gen1627 = mul i64 %_1626, 1
  %_1628 = sub i64 0, %7904
  %gen1629 = add i64 %_1628, 1
  %_1630 = shl i64 %7904, 1
  %7905 = add i64 %7904, 1, !dbg !2468
  store i64 %7905, i64* %29, align 8, !dbg !2468
  br label %originalBB1619

originalBB1634alteredBB:                          ; preds = %originalBB1634, %4952
  br label %originalBB1634

originalBB1638alteredBB:                          ; preds = %originalBB1638, %4969
  br label %originalBB1638

originalBB1642alteredBB:                          ; preds = %originalBB1642, %4986
  %7906 = load i64, i64* %29, align 8, !dbg !2470
  %7907 = load i64, i64* %20, align 8, !dbg !2470
  %7908 = icmp ult i64 %7906, %7907, !dbg !2470
  br label %originalBB1642

originalBB1646alteredBB:                          ; preds = %originalBB1646, %5006
  %7909 = load i8, i8* %39, align 1, !dbg !2470
  %7910 = zext i8 %7909 to i32, !dbg !2470
  %_1647 = sub i32 %7910, 6
  %gen1648 = mul i32 %_1647, 6
  %_1649 = sub i32 0, %7910
  %gen1650 = add i32 %_1649, 6
  %_1651 = sub i32 0, %7910
  %gen1652 = add i32 %_1651, 6
  %_1653 = sub i32 0, %7910
  %gen1654 = add i32 %_1653, 6
  %7911 = ashr i32 %7910, 6, !dbg !2470
  %_1655 = sub i32 0, 48
  %gen1656 = add i32 %_1655, %7911
  %_1657 = sub i32 48, %7911
  %gen1658 = mul i32 %_1657, %7911
  %7912 = add nsw i32 48, %7911, !dbg !2470
  %7913 = trunc i32 %7912 to i8, !dbg !2470
  %7914 = load i8*, i8** %19, align 8, !dbg !2470
  %7915 = load i64, i64* %29, align 8, !dbg !2470
  %7916 = getelementptr inbounds i8, i8* %7914, i64 %7915, !dbg !2470
  store i8 %7913, i8* %7916, align 1, !dbg !2470
  br label %originalBB1646

originalBB1662alteredBB:                          ; preds = %originalBB1662, %5031
  %7917 = load i64, i64* %29, align 8, !dbg !2473
  %_1663 = sub i64 0, %7917
  %gen1664 = add i64 %_1663, 1
  %_1665 = shl i64 %7917, 1
  %_1666 = sub i64 0, %7917
  %gen1667 = add i64 %_1666, 1
  %_1668 = shl i64 %7917, 1
  %_1669 = sub i64 %7917, 1
  %gen1670 = mul i64 %_1669, 1
  %_1671 = shl i64 %7917, 1
  %_1672 = shl i64 %7917, 1
  %_1673 = shl i64 %7917, 1
  %7918 = add i64 %7917, 1, !dbg !2473
  store i64 %7918, i64* %29, align 8, !dbg !2473
  br label %originalBB1662

originalBB1677alteredBB:                          ; preds = %originalBB1677, %5050
  br label %originalBB1677

originalBB1681alteredBB:                          ; preds = %originalBB1681, %5067
  %7919 = load i64, i64* %29, align 8, !dbg !2475
  %7920 = load i64, i64* %20, align 8, !dbg !2475
  %7921 = icmp ult i64 %7919, %7920, !dbg !2475
  br label %originalBB1681

originalBB1685alteredBB:                          ; preds = %originalBB1685, %5087
  %7922 = load i8, i8* %39, align 1, !dbg !2475
  %7923 = zext i8 %7922 to i32, !dbg !2475
  %_1686 = sub i32 %7923, 3
  %gen1687 = mul i32 %_1686, 3
  %_1688 = sub i32 0, %7923
  %gen1689 = add i32 %_1688, 3
  %_1690 = sub i32 0, %7923
  %gen1691 = add i32 %_1690, 3
  %_1692 = sub i32 %7923, 3
  %gen1693 = mul i32 %_1692, 3
  %7924 = ashr i32 %7923, 3, !dbg !2475
  %_1694 = sub i32 0, %7924
  %gen1695 = add i32 %_1694, 7
  %_1696 = sub i32 0, %7924
  %gen1697 = add i32 %_1696, 7
  %7925 = and i32 %7924, 7, !dbg !2475
  %7926 = add nsw i32 48, %7925, !dbg !2475
  %7927 = trunc i32 %7926 to i8, !dbg !2475
  %7928 = load i8*, i8** %19, align 8, !dbg !2475
  %7929 = load i64, i64* %29, align 8, !dbg !2475
  %7930 = getelementptr inbounds i8, i8* %7928, i64 %7929, !dbg !2475
  store i8 %7927, i8* %7930, align 1, !dbg !2475
  br label %originalBB1685

originalBB1701alteredBB:                          ; preds = %originalBB1701, %5113
  %7931 = load i64, i64* %29, align 8, !dbg !2478
  %_1702 = shl i64 %7931, 1
  %_1703 = shl i64 %7931, 1
  %_1704 = sub i64 %7931, 1
  %gen1705 = mul i64 %_1704, 1
  %_1706 = sub i64 0, %7931
  %gen1707 = add i64 %_1706, 1
  %7932 = add i64 %7931, 1, !dbg !2478
  store i64 %7932, i64* %29, align 8, !dbg !2478
  br label %originalBB1701

originalBB1711alteredBB:                          ; preds = %originalBB1711, %5132
  %7933 = load i8, i8* %39, align 1, !dbg !2479
  %7934 = zext i8 %7933 to i32, !dbg !2479
  %_1712 = sub i32 0, %7934
  %gen1713 = add i32 %_1712, 7
  %_1714 = sub i32 0, %7934
  %gen1715 = add i32 %_1714, 7
  %_1716 = sub i32 0, %7934
  %gen1717 = add i32 %_1716, 7
  %_1718 = sub i32 0, %7934
  %gen1719 = add i32 %_1718, 7
  %7935 = and i32 %7934, 7, !dbg !2480
  %_1720 = sub i32 48, %7935
  %gen1721 = mul i32 %_1720, %7935
  %_1722 = shl i32 48, %7935
  %_1723 = shl i32 48, %7935
  %_1724 = sub i32 48, %7935
  %gen1725 = mul i32 %_1724, %7935
  %7936 = add nsw i32 48, %7935, !dbg !2481
  %7937 = trunc i32 %7936 to i8, !dbg !2482
  store i8 %7937, i8* %39, align 1, !dbg !2483
  br label %originalBB1711

originalBB1729alteredBB:                          ; preds = %originalBB1729, %5154
  %7938 = load i8, i8* %41, align 1, !dbg !2485
  %7939 = trunc i8 %7938 to i1, !dbg !2485
  br label %originalBB1729

originalBB1733alteredBB:                          ; preds = %originalBB1733, %5173
  br label %originalBB1733

originalBB1737alteredBB:                          ; preds = %originalBB1737, %5190
  %7940 = load i64, i64* %29, align 8, !dbg !2490
  %7941 = load i64, i64* %20, align 8, !dbg !2490
  %7942 = icmp ult i64 %7940, %7941, !dbg !2490
  br label %originalBB1737

originalBB1741alteredBB:                          ; preds = %originalBB1741, %5210
  %7943 = load i8*, i8** %19, align 8, !dbg !2490
  %7944 = load i64, i64* %29, align 8, !dbg !2490
  %7945 = getelementptr inbounds i8, i8* %7943, i64 %7944, !dbg !2490
  store i8 92, i8* %7945, align 1, !dbg !2490
  br label %originalBB1741

originalBB1745alteredBB:                          ; preds = %originalBB1745, %5230
  %7946 = load i64, i64* %29, align 8, !dbg !2493
  %_1746 = sub i64 %7946, 1
  %gen1747 = mul i64 %_1746, 1
  %_1748 = shl i64 %7946, 1
  %_1749 = sub i64 %7946, 1
  %gen1750 = mul i64 %_1749, 1
  %_1751 = sub i64 0, %7946
  %gen1752 = add i64 %_1751, 1
  %_1753 = sub i64 %7946, 1
  %gen1754 = mul i64 %_1753, 1
  %_1755 = sub i64 %7946, 1
  %gen1756 = mul i64 %_1755, 1
  %_1757 = shl i64 %7946, 1
  %_1758 = sub i64 0, %7946
  %gen1759 = add i64 %_1758, 1
  %7947 = add i64 %7946, 1, !dbg !2493
  store i64 %7947, i64* %29, align 8, !dbg !2493
  br label %originalBB1745

originalBB1763alteredBB:                          ; preds = %originalBB1763, %5249
  store i8 0, i8* %41, align 1, !dbg !2494
  br label %originalBB1763

originalBB1767alteredBB:                          ; preds = %originalBB1767, %5266
  br label %originalBB1767

originalBB1771alteredBB:                          ; preds = %originalBB1771, %5283
  %7948 = load i64, i64* %50, align 8, !dbg !2496
  %7949 = load i64, i64* %28, align 8, !dbg !2498
  %_1772 = sub i64 0, %7949
  %gen1773 = add i64 %_1772, 1
  %_1774 = sub i64 %7949, 1
  %gen1775 = mul i64 %_1774, 1
  %_1776 = sub i64 0, %7949
  %gen1777 = add i64 %_1776, 1
  %_1778 = sub i64 0, %7949
  %gen1779 = add i64 %_1778, 1
  %_1780 = sub i64 0, %7949
  %gen1781 = add i64 %_1780, 1
  %_1782 = sub i64 0, %7949
  %gen1783 = add i64 %_1782, 1
  %7950 = add i64 %7949, 1, !dbg !2499
  %7951 = icmp ule i64 %7948, %7950, !dbg !2500
  br label %originalBB1771

originalBB1787alteredBB:                          ; preds = %originalBB1787, %5304
  br label %originalBB1787

originalBB1791alteredBB:                          ; preds = %originalBB1791, %5321
  br label %originalBB1791

originalBB1795alteredBB:                          ; preds = %originalBB1795, %5338
  %7952 = load i8, i8* %36, align 1, !dbg !2504
  %7953 = trunc i8 %7952 to i1, !dbg !2504
  br label %originalBB1795

originalBB1799alteredBB:                          ; preds = %originalBB1799, %5357
  %7954 = load i8, i8* %42, align 1, !dbg !2504
  %7955 = trunc i8 %7954 to i1, !dbg !2504
  br label %originalBB1799

originalBB1803alteredBB:                          ; preds = %originalBB1803, %5376
  br label %originalBB1803

originalBB1807alteredBB:                          ; preds = %originalBB1807, %5393
  %7956 = load i64, i64* %29, align 8, !dbg !2510
  %7957 = load i64, i64* %20, align 8, !dbg !2510
  %7958 = icmp ult i64 %7956, %7957, !dbg !2510
  br label %originalBB1807

originalBB1811alteredBB:                          ; preds = %originalBB1811, %5413
  %7959 = load i8*, i8** %19, align 8, !dbg !2510
  %7960 = load i64, i64* %29, align 8, !dbg !2510
  %7961 = getelementptr inbounds i8, i8* %7959, i64 %7960, !dbg !2510
  store i8 39, i8* %7961, align 1, !dbg !2510
  br label %originalBB1811

originalBB1815alteredBB:                          ; preds = %originalBB1815, %5433
  %7962 = load i64, i64* %29, align 8, !dbg !2513
  %_1816 = shl i64 %7962, 1
  %_1817 = sub i64 0, %7962
  %gen1818 = add i64 %_1817, 1
  %7963 = add i64 %7962, 1, !dbg !2513
  store i64 %7963, i64* %29, align 8, !dbg !2513
  br label %originalBB1815

originalBB1822alteredBB:                          ; preds = %originalBB1822, %5452
  br label %originalBB1822

originalBB1826alteredBB:                          ; preds = %originalBB1826, %5469
  %7964 = load i64, i64* %29, align 8, !dbg !2514
  %7965 = load i64, i64* %20, align 8, !dbg !2514
  %7966 = icmp ult i64 %7964, %7965, !dbg !2514
  br label %originalBB1826

originalBB1830alteredBB:                          ; preds = %originalBB1830, %5489
  %7967 = load i8*, i8** %19, align 8, !dbg !2514
  %7968 = load i64, i64* %29, align 8, !dbg !2514
  %7969 = getelementptr inbounds i8, i8* %7967, i64 %7968, !dbg !2514
  store i8 39, i8* %7969, align 1, !dbg !2514
  br label %originalBB1830

originalBB1834alteredBB:                          ; preds = %originalBB1834, %5509
  %7970 = load i64, i64* %29, align 8, !dbg !2517
  %7971 = add i64 %7970, 1, !dbg !2517
  store i64 %7971, i64* %29, align 8, !dbg !2517
  br label %originalBB1834

originalBB1838alteredBB:                          ; preds = %originalBB1838, %5528
  store i8 0, i8* %36, align 1, !dbg !2508
  br label %originalBB1838

originalBB1842alteredBB:                          ; preds = %originalBB1842, %5545
  br label %originalBB1842

originalBB1846alteredBB:                          ; preds = %originalBB1846, %5562
  br label %originalBB1846

originalBB1850alteredBB:                          ; preds = %originalBB1850, %5579
  %7972 = load i64, i64* %29, align 8, !dbg !2519
  %7973 = load i64, i64* %20, align 8, !dbg !2519
  %7974 = icmp ult i64 %7972, %7973, !dbg !2519
  br label %originalBB1850

originalBB1854alteredBB:                          ; preds = %originalBB1854, %5599
  %7975 = load i8, i8* %39, align 1, !dbg !2519
  %7976 = load i8*, i8** %19, align 8, !dbg !2519
  %7977 = load i64, i64* %29, align 8, !dbg !2519
  %7978 = getelementptr inbounds i8, i8* %7976, i64 %7977, !dbg !2519
  store i8 %7975, i8* %7978, align 1, !dbg !2519
  br label %originalBB1854

originalBB1858alteredBB:                          ; preds = %originalBB1858, %5620
  %7979 = load i64, i64* %29, align 8, !dbg !2522
  %_1859 = shl i64 %7979, 1
  %_1860 = shl i64 %7979, 1
  %_1861 = sub i64 0, %7979
  %gen1862 = add i64 %_1861, 1
  %_1863 = sub i64 %7979, 1
  %gen1864 = mul i64 %_1863, 1
  %7980 = add i64 %7979, 1, !dbg !2522
  store i64 %7980, i64* %29, align 8, !dbg !2522
  br label %originalBB1858

originalBB1868alteredBB:                          ; preds = %originalBB1868, %5639
  %7981 = load i8*, i8** %21, align 8, !dbg !2523
  %7982 = load i64, i64* %28, align 8, !dbg !2524
  %_1869 = shl i64 %7982, 1
  %_1870 = sub i64 %7982, 1
  %gen1871 = mul i64 %_1870, 1
  %_1872 = sub i64 %7982, 1
  %gen1873 = mul i64 %_1872, 1
  %7983 = add i64 %7982, 1, !dbg !2524
  store i64 %7983, i64* %28, align 8, !dbg !2524
  %7984 = getelementptr inbounds i8, i8* %7981, i64 %7983, !dbg !2523
  %7985 = load i8, i8* %7984, align 1, !dbg !2523
  store i8 %7985, i8* %39, align 1, !dbg !2525
  br label %originalBB1868

originalBB1877alteredBB:                          ; preds = %originalBB1877, %5661
  br label %originalBB1877

originalBB1881alteredBB:                          ; preds = %originalBB1881, %5678
  br label %originalBB1881

originalBB1885alteredBB:                          ; preds = %originalBB1885, %5695
  %7986 = load i8, i8* %33, align 1, !dbg !2532
  %7987 = trunc i8 %7986 to i1, !dbg !2532
  br label %originalBB1885

originalBB1889alteredBB:                          ; preds = %originalBB1889, %5714
  %7988 = load i32, i32* %23, align 4, !dbg !2535
  %7989 = icmp ne i32 %7988, 2, !dbg !2536
  br label %originalBB1889

originalBB1893alteredBB:                          ; preds = %originalBB1893, %5733
  %7990 = load i8, i8* %35, align 1, !dbg !2538
  %7991 = trunc i8 %7990 to i1, !dbg !2538
  br label %originalBB1893

originalBB1897alteredBB:                          ; preds = %originalBB1897, %5752
  %7992 = load i32*, i32** %25, align 8, !dbg !2540
  %7993 = icmp ne i32* %7992, null, !dbg !2540
  br label %originalBB1897

originalBB1901alteredBB:                          ; preds = %originalBB1901, %5771
  %7994 = load i32*, i32** %25, align 8, !dbg !2542
  %7995 = load i8, i8* %39, align 1, !dbg !2543
  %7996 = zext i8 %7995 to i64, !dbg !2543
  %_1902 = shl i64 %7996, 32
  %_1903 = sub i64 %7996, 32
  %gen1904 = mul i64 %_1903, 32
  %_1905 = sub i64 %7996, 32
  %gen1906 = mul i64 %_1905, 32
  %_1907 = shl i64 %7996, 32
  %_1908 = sub i64 %7996, 32
  %gen1909 = mul i64 %_1908, 32
  %_1910 = sub i64 0, %7996
  %gen1911 = add i64 %_1910, 32
  %_1912 = sub i64 0, %7996
  %gen1913 = add i64 %_1912, 32
  %_1914 = shl i64 %7996, 32
  %7997 = udiv i64 %7996, 32, !dbg !2544
  %7998 = getelementptr inbounds i32, i32* %7994, i64 %7997, !dbg !2542
  %7999 = load i32, i32* %7998, align 4, !dbg !2542
  %8000 = load i8, i8* %39, align 1, !dbg !2545
  %8001 = zext i8 %8000 to i64, !dbg !2545
  %_1915 = shl i64 %8001, 32
  %_1916 = sub i64 0, %8001
  %gen1917 = add i64 %_1916, 32
  %_1918 = shl i64 %8001, 32
  %_1919 = sub i64 0, %8001
  %gen1920 = add i64 %_1919, 32
  %_1921 = shl i64 %8001, 32
  %_1922 = sub i64 %8001, 32
  %gen1923 = mul i64 %_1922, 32
  %_1924 = sub i64 %8001, 32
  %gen1925 = mul i64 %_1924, 32
  %8002 = urem i64 %8001, 32, !dbg !2546
  %8003 = trunc i64 %8002 to i32, !dbg !2547
  %_1926 = sub i32 0, %7999
  %gen1927 = add i32 %_1926, %8003
  %_1928 = sub i32 0, %7999
  %gen1929 = add i32 %_1928, %8003
  %_1930 = shl i32 %7999, %8003
  %_1931 = sub i32 %7999, %8003
  %gen1932 = mul i32 %_1931, %8003
  %8004 = lshr i32 %7999, %8003, !dbg !2547
  %_1933 = sub i32 0, %8004
  %gen1934 = add i32 %_1933, 1
  %_1935 = sub i32 %8004, 1
  %gen1936 = mul i32 %_1935, 1
  %_1937 = sub i32 0, %8004
  %gen1938 = add i32 %_1937, 1
  %8005 = and i32 %8004, 1, !dbg !2548
  %8006 = icmp ne i32 %8005, 0, !dbg !2548
  br label %originalBB1901

originalBB1942alteredBB:                          ; preds = %originalBB1942, %5801
  %8007 = load i8, i8* %41, align 1, !dbg !2550
  %8008 = trunc i8 %8007 to i1, !dbg !2550
  br label %originalBB1942

originalBB1946alteredBB:                          ; preds = %originalBB1946, %5820
  br label %originalBB1946

originalBB1950alteredBB:                          ; preds = %originalBB1950, %5837
  br label %originalBB1950

originalBB1954alteredBB:                          ; preds = %originalBB1954, %5854
  br label %originalBB1954

originalBB1958alteredBB:                          ; preds = %originalBB1958, %5871
  %8009 = load i8, i8* %35, align 1, !dbg !2556
  %8010 = trunc i8 %8009 to i1, !dbg !2556
  br label %originalBB1958

originalBB1962alteredBB:                          ; preds = %originalBB1962, %5890
  br label %originalBB1962

originalBB1966alteredBB:                          ; preds = %originalBB1966, %5907
  store i8 1, i8* %42, align 1, !dbg !2559
  %8011 = load i32, i32* %23, align 4, !dbg !2560
  %8012 = icmp eq i32 %8011, 2, !dbg !2560
  br label %originalBB1966

originalBB1970alteredBB:                          ; preds = %originalBB1970, %5926
  %8013 = load i8, i8* %36, align 1, !dbg !2560
  %8014 = trunc i8 %8013 to i1, !dbg !2560
  br label %originalBB1970

originalBB1974alteredBB:                          ; preds = %originalBB1974, %5945
  br label %originalBB1974

originalBB1978alteredBB:                          ; preds = %originalBB1978, %5962
  %8015 = load i64, i64* %29, align 8, !dbg !2564
  %8016 = load i64, i64* %20, align 8, !dbg !2564
  %8017 = icmp ult i64 %8015, %8016, !dbg !2564
  br label %originalBB1978

originalBB1982alteredBB:                          ; preds = %originalBB1982, %5982
  %8018 = load i8*, i8** %19, align 8, !dbg !2564
  %8019 = load i64, i64* %29, align 8, !dbg !2564
  %8020 = getelementptr inbounds i8, i8* %8018, i64 %8019, !dbg !2564
  store i8 39, i8* %8020, align 1, !dbg !2564
  br label %originalBB1982

originalBB1986alteredBB:                          ; preds = %originalBB1986, %6002
  %8021 = load i64, i64* %29, align 8, !dbg !2567
  %_1987 = sub i64 %8021, 1
  %gen1988 = mul i64 %_1987, 1
  %_1989 = shl i64 %8021, 1
  %_1990 = shl i64 %8021, 1
  %_1991 = sub i64 0, %8021
  %gen1992 = add i64 %_1991, 1
  %_1993 = sub i64 0, %8021
  %gen1994 = add i64 %_1993, 1
  %_1995 = shl i64 %8021, 1
  %_1996 = sub i64 0, %8021
  %gen1997 = add i64 %_1996, 1
  %8022 = add i64 %8021, 1, !dbg !2567
  store i64 %8022, i64* %29, align 8, !dbg !2567
  br label %originalBB1986

originalBB2001alteredBB:                          ; preds = %originalBB2001, %6021
  br label %originalBB2001

originalBB2005alteredBB:                          ; preds = %originalBB2005, %6038
  %8023 = load i64, i64* %29, align 8, !dbg !2568
  %8024 = load i64, i64* %20, align 8, !dbg !2568
  %8025 = icmp ult i64 %8023, %8024, !dbg !2568
  br label %originalBB2005

originalBB2009alteredBB:                          ; preds = %originalBB2009, %6058
  %8026 = load i8*, i8** %19, align 8, !dbg !2568
  %8027 = load i64, i64* %29, align 8, !dbg !2568
  %8028 = getelementptr inbounds i8, i8* %8026, i64 %8027, !dbg !2568
  store i8 36, i8* %8028, align 1, !dbg !2568
  br label %originalBB2009

originalBB2013alteredBB:                          ; preds = %originalBB2013, %6078
  %8029 = load i64, i64* %29, align 8, !dbg !2571
  %_2014 = sub i64 %8029, 1
  %gen2015 = mul i64 %_2014, 1
  %_2016 = sub i64 0, %8029
  %gen2017 = add i64 %_2016, 1
  %_2018 = shl i64 %8029, 1
  %8030 = add i64 %8029, 1, !dbg !2571
  store i64 %8030, i64* %29, align 8, !dbg !2571
  br label %originalBB2013

originalBB2022alteredBB:                          ; preds = %originalBB2022, %6097
  br label %originalBB2022

originalBB2026alteredBB:                          ; preds = %originalBB2026, %6114
  %8031 = load i64, i64* %29, align 8, !dbg !2572
  %8032 = load i64, i64* %20, align 8, !dbg !2572
  %8033 = icmp ult i64 %8031, %8032, !dbg !2572
  br label %originalBB2026

originalBB2030alteredBB:                          ; preds = %originalBB2030, %6134
  %8034 = load i8*, i8** %19, align 8, !dbg !2572
  %8035 = load i64, i64* %29, align 8, !dbg !2572
  %8036 = getelementptr inbounds i8, i8* %8034, i64 %8035, !dbg !2572
  store i8 39, i8* %8036, align 1, !dbg !2572
  br label %originalBB2030

originalBB2034alteredBB:                          ; preds = %originalBB2034, %6154
  %8037 = load i64, i64* %29, align 8, !dbg !2575
  %_2035 = shl i64 %8037, 1
  %_2036 = sub i64 0, %8037
  %gen2037 = add i64 %_2036, 1
  %_2038 = sub i64 0, %8037
  %gen2039 = add i64 %_2038, 1
  %_2040 = sub i64 0, %8037
  %gen2041 = add i64 %_2040, 1
  %_2042 = sub i64 %8037, 1
  %gen2043 = mul i64 %_2042, 1
  %_2044 = sub i64 0, %8037
  %gen2045 = add i64 %_2044, 1
  %_2046 = shl i64 %8037, 1
  %_2047 = sub i64 0, %8037
  %gen2048 = add i64 %_2047, 1
  %8038 = add i64 %8037, 1, !dbg !2575
  store i64 %8038, i64* %29, align 8, !dbg !2575
  br label %originalBB2034

originalBB2052alteredBB:                          ; preds = %originalBB2052, %6173
  store i8 1, i8* %36, align 1, !dbg !2562
  br label %originalBB2052

originalBB2056alteredBB:                          ; preds = %originalBB2056, %6190
  br label %originalBB2056

originalBB2060alteredBB:                          ; preds = %originalBB2060, %6207
  %8039 = load i64, i64* %29, align 8, !dbg !2576
  %8040 = load i64, i64* %20, align 8, !dbg !2576
  %8041 = icmp ult i64 %8039, %8040, !dbg !2576
  br label %originalBB2060

originalBB2064alteredBB:                          ; preds = %originalBB2064, %6227
  %8042 = load i8*, i8** %19, align 8, !dbg !2576
  %8043 = load i64, i64* %29, align 8, !dbg !2576
  %8044 = getelementptr inbounds i8, i8* %8042, i64 %8043, !dbg !2576
  store i8 92, i8* %8044, align 1, !dbg !2576
  br label %originalBB2064

originalBB2068alteredBB:                          ; preds = %originalBB2068, %6247
  %8045 = load i64, i64* %29, align 8, !dbg !2579
  %_2069 = sub i64 0, %8045
  %gen2070 = add i64 %_2069, 1
  %8046 = add i64 %8045, 1, !dbg !2579
  store i64 %8046, i64* %29, align 8, !dbg !2579
  br label %originalBB2068

originalBB2074alteredBB:                          ; preds = %originalBB2074, %6266
  br label %originalBB2074

originalBB2078alteredBB:                          ; preds = %originalBB2078, %6283
  br label %originalBB2078

originalBB2082alteredBB:                          ; preds = %originalBB2082, %6300
  br label %originalBB2082

originalBB2086alteredBB:                          ; preds = %originalBB2086, %6317
  %8047 = load i8, i8* %36, align 1, !dbg !2583
  %8048 = trunc i8 %8047 to i1, !dbg !2583
  br label %originalBB2086

originalBB2090alteredBB:                          ; preds = %originalBB2090, %6336
  %8049 = load i8, i8* %42, align 1, !dbg !2583
  %8050 = trunc i8 %8049 to i1, !dbg !2583
  br label %originalBB2090

originalBB2094alteredBB:                          ; preds = %originalBB2094, %6355
  br label %originalBB2094

originalBB2098alteredBB:                          ; preds = %originalBB2098, %6372
  %8051 = load i64, i64* %29, align 8, !dbg !2589
  %8052 = load i64, i64* %20, align 8, !dbg !2589
  %8053 = icmp ult i64 %8051, %8052, !dbg !2589
  br label %originalBB2098

originalBB2102alteredBB:                          ; preds = %originalBB2102, %6392
  %8054 = load i8*, i8** %19, align 8, !dbg !2589
  %8055 = load i64, i64* %29, align 8, !dbg !2589
  %8056 = getelementptr inbounds i8, i8* %8054, i64 %8055, !dbg !2589
  store i8 39, i8* %8056, align 1, !dbg !2589
  br label %originalBB2102

originalBB2106alteredBB:                          ; preds = %originalBB2106, %6412
  %8057 = load i64, i64* %29, align 8, !dbg !2592
  %8058 = add i64 %8057, 1, !dbg !2592
  store i64 %8058, i64* %29, align 8, !dbg !2592
  br label %originalBB2106

originalBB2110alteredBB:                          ; preds = %originalBB2110, %6431
  br label %originalBB2110

originalBB2114alteredBB:                          ; preds = %originalBB2114, %6448
  %8059 = load i64, i64* %29, align 8, !dbg !2593
  %8060 = load i64, i64* %20, align 8, !dbg !2593
  %8061 = icmp ult i64 %8059, %8060, !dbg !2593
  br label %originalBB2114

originalBB2118alteredBB:                          ; preds = %originalBB2118, %6468
  %8062 = load i8*, i8** %19, align 8, !dbg !2593
  %8063 = load i64, i64* %29, align 8, !dbg !2593
  %8064 = getelementptr inbounds i8, i8* %8062, i64 %8063, !dbg !2593
  store i8 39, i8* %8064, align 1, !dbg !2593
  br label %originalBB2118

originalBB2122alteredBB:                          ; preds = %originalBB2122, %6488
  %8065 = load i64, i64* %29, align 8, !dbg !2596
  %_2123 = sub i64 0, %8065
  %gen2124 = add i64 %_2123, 1
  %_2125 = sub i64 %8065, 1
  %gen2126 = mul i64 %_2125, 1
  %_2127 = sub i64 %8065, 1
  %gen2128 = mul i64 %_2127, 1
  %_2129 = sub i64 0, %8065
  %gen2130 = add i64 %_2129, 1
  %8066 = add i64 %8065, 1, !dbg !2596
  store i64 %8066, i64* %29, align 8, !dbg !2596
  br label %originalBB2122

originalBB2134alteredBB:                          ; preds = %originalBB2134, %6507
  store i8 0, i8* %36, align 1, !dbg !2587
  br label %originalBB2134

originalBB2138alteredBB:                          ; preds = %originalBB2138, %6524
  br label %originalBB2138

originalBB2142alteredBB:                          ; preds = %originalBB2142, %6541
  br label %originalBB2142

originalBB2146alteredBB:                          ; preds = %originalBB2146, %6558
  %8067 = load i64, i64* %29, align 8, !dbg !2598
  %8068 = load i64, i64* %20, align 8, !dbg !2598
  %8069 = trunc i64 %8067 to i32
  %_2147 = sub i32 0, %8069
  %gen2148 = add i32 %_2147, -2
  %_2149 = sub i32 %8069, -2
  %gen2150 = mul i32 %_2149, -2
  %_2151 = shl i32 %8069, -2
  %_2152 = sub i32 %8069, -2
  %gen2153 = mul i32 %_2152, -2
  %_2154 = sub i32 %8069, -2
  %gen2155 = mul i32 %_2154, -2
  %_2156 = sub i32 0, %8069
  %gen2157 = add i32 %_2156, -2
  %_2158 = shl i32 %8069, -2
  %8070 = mul i32 %8069, -2
  %_2159 = sub i32 0, %8070
  %gen2160 = add i32 %_2159, -2
  %_2161 = sub i32 %8070, -2
  %gen2162 = mul i32 %_2161, -2
  %8071 = add i32 %8070, -2
  %8072 = trunc i64 %8068 to i32
  %_2163 = sub i32 0, %8072
  %gen2164 = add i32 %_2163, 2
  %_2165 = sub i32 %8072, 2
  %gen2166 = mul i32 %_2165, 2
  %_2167 = shl i32 %8072, 2
  %8073 = mul i32 %8072, 2
  %_2168 = sub i32 %8073, 3
  %gen2169 = mul i32 %_2168, 3
  %_2170 = sub i32 0, %8073
  %gen2171 = add i32 %_2170, 3
  %_2172 = sub i32 0, %8073
  %gen2173 = add i32 %_2172, 3
  %_2174 = sub i32 %8073, 3
  %gen2175 = mul i32 %_2174, 3
  %_2176 = sub i32 0, %8073
  %gen2177 = add i32 %_2176, 3
  %_2178 = sub i32 0, %8073
  %gen2179 = add i32 %_2178, 3
  %_2180 = sub i32 0, %8073
  %gen2181 = add i32 %_2180, 3
  %_2182 = sub i32 %8073, 3
  %gen2183 = mul i32 %_2182, 3
  %8074 = add i32 %8073, 3
  %_2184 = sub i32 0, %8071
  %gen2185 = add i32 %_2184, %8071
  %_2186 = sub i32 %8071, %8071
  %gen2187 = mul i32 %_2186, %8071
  %_2188 = shl i32 %8071, %8071
  %_2189 = shl i32 %8071, %8071
  %_2190 = shl i32 %8071, %8071
  %8075 = mul i32 %8071, %8071
  %_2191 = sub i32 0, %8074
  %gen2192 = add i32 %_2191, %8074
  %_2193 = sub i32 %8074, %8074
  %gen2194 = mul i32 %_2193, %8074
  %_2195 = shl i32 %8074, %8074
  %_2196 = shl i32 %8074, %8074
  %_2197 = sub i32 0, %8074
  %gen2198 = add i32 %_2197, %8074
  %8076 = mul i32 %8074, %8074
  %_2199 = shl i32 %8075, %8076
  %_2200 = sub i32 0, %8075
  %gen2201 = add i32 %_2200, %8076
  %_2202 = shl i32 %8075, %8076
  %_2203 = sub i32 0, %8075
  %gen2204 = add i32 %_2203, %8076
  %_2205 = shl i32 %8075, %8076
  %_2206 = sub i32 %8075, %8076
  %gen2207 = mul i32 %_2206, %8076
  %_2208 = shl i32 %8075, %8076
  %_2209 = shl i32 %8075, %8076
  %8077 = add i32 %8075, %8076
  %_2210 = sub i32 0, %8071
  %gen2211 = add i32 %_2210, %8074
  %_2212 = sub i32 %8071, %8074
  %gen2213 = mul i32 %_2212, %8074
  %_2214 = shl i32 %8071, %8074
  %8078 = mul i32 %8071, %8074
  %_2215 = sub i32 %8078, 2
  %gen2216 = mul i32 %_2215, 2
  %8079 = mul i32 %8078, 2
  %_2217 = shl i32 %8077, %8079
  %_2218 = shl i32 %8077, %8079
  %_2219 = sub i32 0, %8077
  %gen2220 = add i32 %_2219, %8079
  %_2221 = shl i32 %8077, %8079
  %_2222 = sub i32 0, %8077
  %gen2223 = add i32 %_2222, %8079
  %_2224 = shl i32 %8077, %8079
  %_2225 = sub i32 %8077, %8079
  %gen2226 = mul i32 %_2225, %8079
  %8080 = sub i32 %8077, %8079
  %_2227 = sub i32 0, %8080
  %gen2228 = add i32 %_2227, 3
  %_2229 = sub i32 %8080, 3
  %gen2230 = mul i32 %_2229, 3
  %_2231 = sub i32 %8080, 3
  %gen2232 = mul i32 %_2231, 3
  %_2233 = sub i32 0, %8080
  %gen2234 = add i32 %_2233, 3
  %_2235 = sub i32 %8080, 3
  %gen2236 = mul i32 %_2235, 3
  %_2237 = shl i32 %8080, 3
  %8081 = mul i32 %8080, 3
  %_2238 = shl i32 %8081, -1
  %_2239 = sub i32 0, %8081
  %gen2240 = add i32 %_2239, -1
  %_2241 = sub i32 %8081, -1
  %gen2242 = mul i32 %_2241, -1
  %_2243 = shl i32 %8081, -1
  %_2244 = shl i32 %8081, -1
  %8082 = add i32 %8081, -1
  %8083 = icmp eq i32 %8082, -4
  br label %originalBB2146

originalBB2248alteredBB:                          ; preds = %originalBB2248, %6592
  br label %originalBB2248

originalBB2252alteredBB:                          ; preds = %originalBB2252, %6609
  %8084 = icmp ult i64 %6567, %6568, !dbg !2598
  br label %originalBB2252

originalBB2256alteredBB:                          ; preds = %originalBB2256, %6627
  %8085 = load i8, i8* %39, align 1, !dbg !2598
  %8086 = load i8*, i8** %19, align 8, !dbg !2598
  %8087 = load i64, i64* %29, align 8, !dbg !2598
  %8088 = getelementptr inbounds i8, i8* %8086, i64 %8087, !dbg !2598
  store i8 %8085, i8* %8088, align 1, !dbg !2598
  br label %originalBB2256

originalBB2260alteredBB:                          ; preds = %originalBB2260, %6648
  %8089 = load i64, i64* %29, align 8, !dbg !2601
  %_2261 = sub i64 0, %8089
  %gen2262 = add i64 %_2261, 1
  %_2263 = sub i64 %8089, 1
  %gen2264 = mul i64 %_2263, 1
  %_2265 = sub i64 0, %8089
  %gen2266 = add i64 %_2265, 1
  %8090 = add i64 %8089, 1, !dbg !2601
  store i64 %8090, i64* %29, align 8, !dbg !2601
  br label %originalBB2260

originalBB2270alteredBB:                          ; preds = %originalBB2270, %6667
  %8091 = load i8, i8* %43, align 1, !dbg !2602
  %8092 = trunc i8 %8091 to i1, !dbg !2602
  br label %originalBB2270

originalBB2274alteredBB:                          ; preds = %originalBB2274, %6686
  store i8 0, i8* %38, align 1, !dbg !2605
  br label %originalBB2274

originalBB2278alteredBB:                          ; preds = %originalBB2278, %6703
  br label %originalBB2278

originalBB2282alteredBB:                          ; preds = %originalBB2282, %6720
  %8093 = load i64, i64* %28, align 8, !dbg !2608
  %_2283 = sub i64 %8093, 1
  %gen2284 = mul i64 %_2283, 1
  %_2285 = shl i64 %8093, 1
  %_2286 = sub i64 0, %8093
  %gen2287 = add i64 %_2286, 1
  %_2288 = shl i64 %8093, 1
  %_2289 = shl i64 %8093, 1
  %_2290 = sub i64 %8093, 1
  %gen2291 = mul i64 %_2290, 1
  %8094 = add i64 %8093, 1, !dbg !2608
  store i64 %8094, i64* %28, align 8, !dbg !2608
  br label %originalBB2282

originalBB2296alteredBB:                          ; preds = %originalBB2296, %6739
  %8095 = load i64, i64* %29, align 8, !dbg !2612
  %8096 = icmp eq i64 %8095, 0, !dbg !2614
  br label %originalBB2296

originalBB2300alteredBB:                          ; preds = %originalBB2300, %6758
  %8097 = load i32, i32* %23, align 4, !dbg !2616
  %8098 = icmp eq i32 %8097, 2, !dbg !2617
  br label %originalBB2300

originalBB2304alteredBB:                          ; preds = %originalBB2304, %6777
  %8099 = load i8, i8* %35, align 1, !dbg !2619
  %8100 = trunc i8 %8099 to i1, !dbg !2619
  br label %originalBB2304

originalBB2308alteredBB:                          ; preds = %originalBB2308, %6796
  br label %originalBB2308

originalBB2312alteredBB:                          ; preds = %originalBB2312, %6813
  %8101 = load i32, i32* %23, align 4, !dbg !2622
  %8102 = icmp eq i32 %8101, 2, !dbg !2624
  br label %originalBB2312

originalBB2316alteredBB:                          ; preds = %originalBB2316, %6832
  %8103 = load i8, i8* %35, align 1, !dbg !2626
  %8104 = trunc i8 %8103 to i1, !dbg !2626
  br label %originalBB2316

originalBB2320alteredBB:                          ; preds = %originalBB2320, %6851
  %8105 = load i8, i8* %37, align 1, !dbg !2628
  %8106 = trunc i8 %8105 to i1, !dbg !2628
  br label %originalBB2320

originalBB2324alteredBB:                          ; preds = %originalBB2324, %6870
  %8107 = load i8, i8* %38, align 1, !dbg !2630
  %8108 = trunc i8 %8107 to i1, !dbg !2630
  br label %originalBB2324

originalBB2328alteredBB:                          ; preds = %originalBB2328, %6889
  %8109 = load i8*, i8** %19, align 8, !dbg !2634
  %8110 = load i64, i64* %30, align 8, !dbg !2635
  %8111 = load i8*, i8** %21, align 8, !dbg !2636
  %8112 = load i64, i64* %22, align 8, !dbg !2637
  %8113 = load i32, i32* %24, align 4, !dbg !2638
  %8114 = load i32*, i32** %25, align 8, !dbg !2639
  %8115 = load i8*, i8** %26, align 8, !dbg !2640
  %8116 = load i8*, i8** %27, align 8, !dbg !2641
  %8117 = call i64 @quotearg_buffer_restyled(i8* %8109, i64 %8110, i8* %8111, i64 %8112, i32 5, i32 %8113, i32* %8114, i8* %8115, i8* %8116), !dbg !2642
  store i64 %8117, i64* %18, align 8, !dbg !2643
  br label %originalBB2328

originalBB2332alteredBB:                          ; preds = %originalBB2332, %6915
  %8118 = load i64, i64* %20, align 8, !dbg !2644
  %8119 = icmp ne i64 %8118, 0, !dbg !2644
  br label %originalBB2332

originalBB2336alteredBB:                          ; preds = %originalBB2336, %6934
  %8120 = load i64, i64* %30, align 8, !dbg !2647
  %8121 = icmp ne i64 %8120, 0, !dbg !2647
  br label %originalBB2336

originalBB2340alteredBB:                          ; preds = %originalBB2340, %6953
  %8122 = load i64, i64* %30, align 8, !dbg !2649
  store i64 %8122, i64* %20, align 8, !dbg !2651
  store i64 0, i64* %29, align 8, !dbg !2652
  br label %originalBB2340

originalBB2344alteredBB:                          ; preds = %originalBB2344, %6971
  br label %originalBB2344

originalBB2348alteredBB:                          ; preds = %originalBB2348, %6988
  br label %originalBB2348

originalBB2352alteredBB:                          ; preds = %originalBB2352, %7005
  %8123 = load i8*, i8** %31, align 8, !dbg !2655
  %8124 = icmp ne i8* %8123, null, !dbg !2655
  br label %originalBB2352

originalBB2356alteredBB:                          ; preds = %originalBB2356, %7024
  %8125 = load i8, i8* %35, align 1, !dbg !2658
  %8126 = trunc i8 %8125 to i1, !dbg !2658
  br label %originalBB2356

originalBB2360alteredBB:                          ; preds = %originalBB2360, %7043
  br label %originalBB2360

originalBB2364alteredBB:                          ; preds = %originalBB2364, %7060
  %8127 = load i8*, i8** %31, align 8, !dbg !2661
  %8128 = load i8, i8* %8127, align 1, !dbg !2664
  %8129 = icmp ne i8 %8128, 0, !dbg !2665
  br label %originalBB2364

originalBB2368alteredBB:                          ; preds = %originalBB2368, %7080
  br label %originalBB2368

originalBB2372alteredBB:                          ; preds = %originalBB2372, %7097
  %8130 = load i64, i64* %29, align 8, !dbg !2667
  %8131 = load i64, i64* %20, align 8, !dbg !2667
  %8132 = icmp ult i64 %8130, %8131, !dbg !2667
  br label %originalBB2372

originalBB2376alteredBB:                          ; preds = %originalBB2376, %7117
  %8133 = load i8*, i8** %31, align 8, !dbg !2667
  %8134 = load i8, i8* %8133, align 1, !dbg !2667
  %8135 = load i8*, i8** %19, align 8, !dbg !2667
  %8136 = load i64, i64* %29, align 8, !dbg !2667
  %8137 = getelementptr inbounds i8, i8* %8135, i64 %8136, !dbg !2667
  store i8 %8134, i8* %8137, align 1, !dbg !2667
  br label %originalBB2376

originalBB2380alteredBB:                          ; preds = %originalBB2380, %7139
  %8138 = load i64, i64* %29, align 8, !dbg !2670
  %_2381 = sub i64 0, %8138
  %gen2382 = add i64 %_2381, 1
  %_2383 = shl i64 %8138, 1
  %_2384 = shl i64 %8138, 1
  %_2385 = sub i64 %8138, 1
  %gen2386 = mul i64 %_2385, 1
  %_2387 = sub i64 0, %8138
  %gen2388 = add i64 %_2387, 1
  %_2389 = shl i64 %8138, 1
  %_2390 = sub i64 %8138, 1
  %gen2391 = mul i64 %_2390, 1
  %_2392 = sub i64 %8138, 1
  %gen2393 = mul i64 %_2392, 1
  %8139 = add i64 %8138, 1, !dbg !2670
  store i64 %8139, i64* %29, align 8, !dbg !2670
  br label %originalBB2380

originalBB2397alteredBB:                          ; preds = %originalBB2397, %7158
  br label %originalBB2397

originalBB2401alteredBB:                          ; preds = %originalBB2401, %7175
  %8140 = load i8*, i8** %31, align 8, !dbg !2671
  %8141 = getelementptr inbounds i8, i8* %8140, i32 1, !dbg !2671
  store i8* %8141, i8** %31, align 8, !dbg !2671
  br label %originalBB2401

originalBB2405alteredBB:                          ; preds = %originalBB2405, %7194
  br label %originalBB2405

originalBB2409alteredBB:                          ; preds = %originalBB2409, %7211
  %8142 = load i64, i64* %29, align 8, !dbg !2675
  %8143 = load i64, i64* %20, align 8, !dbg !2677
  %8144 = icmp ult i64 %8142, %8143, !dbg !2678
  br label %originalBB2409

originalBB2413alteredBB:                          ; preds = %originalBB2413, %7231
  %8145 = load i8*, i8** %19, align 8, !dbg !2680
  %8146 = load i64, i64* %29, align 8, !dbg !2681
  %8147 = getelementptr inbounds i8, i8* %8145, i64 %8146, !dbg !2680
  store i8 0, i8* %8147, align 1, !dbg !2682
  br label %originalBB2413

originalBB2417alteredBB:                          ; preds = %originalBB2417, %7251
  %8148 = load i64, i64* %29, align 8, !dbg !2683
  store i64 %8148, i64* %18, align 8, !dbg !2684
  br label %originalBB2417

originalBB2421alteredBB:                          ; preds = %originalBB2421, %7269
  %8149 = load i32, i32* %23, align 4, !dbg !2687
  %8150 = icmp eq i32 %8149, 2, !dbg !2689
  br label %originalBB2421

originalBB2425alteredBB:                          ; preds = %originalBB2425, %7288
  %8151 = load i8, i8* %33, align 1, !dbg !2691
  %8152 = trunc i8 %8151 to i1, !dbg !2691
  br label %originalBB2425

originalBB2429alteredBB:                          ; preds = %originalBB2429, %7307
  store i32 4, i32* %23, align 4, !dbg !2693
  br label %originalBB2429

originalBB2433alteredBB:                          ; preds = %originalBB2433, %7324
  %8153 = load i8*, i8** %19, align 8, !dbg !2695
  %8154 = load i64, i64* %20, align 8, !dbg !2696
  %8155 = load i8*, i8** %21, align 8, !dbg !2697
  %8156 = load i64, i64* %22, align 8, !dbg !2698
  %8157 = load i32, i32* %23, align 4, !dbg !2699
  %8158 = load i32, i32* %24, align 4, !dbg !2700
  %_2434 = shl i32 %8158, -3
  %8159 = and i32 %8158, -3, !dbg !2701
  %8160 = load i8*, i8** %26, align 8, !dbg !2702
  %8161 = load i8*, i8** %27, align 8, !dbg !2703
  %8162 = call i64 @quotearg_buffer_restyled(i8* %8153, i64 %8154, i8* %8155, i64 %8156, i32 %8157, i32 %8159, i32* null, i8* %8160, i8* %8161), !dbg !2704
  store i64 %8162, i64* %18, align 8, !dbg !2705
  br label %originalBB2433

originalBB2438alteredBB:                          ; preds = %originalBB2438, %7351
  %8163 = load i64, i64* %18, align 8, !dbg !2706
  br label %originalBB2438
}

; Function Attrs: nounwind
declare dso_local i64 @__ctype_get_mb_cur_max() #2

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @gettext_quote(i8*, i32) #4 !dbg !2794 {
  %3 = load i32, i32* @x.37
  %4 = load i32, i32* @y.38
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !2797, metadata !DIExpression()), !dbg !2798
  store i32 %1, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !2799, metadata !DIExpression()), !dbg !2800
  call void @llvm.dbg.declare(metadata i8** %14, metadata !2801, metadata !DIExpression()), !dbg !2802
  %16 = load i8*, i8** %12, align 8, !dbg !2803
  %17 = call i8* @gettext(i8* %16) #10, !dbg !2803
  store i8* %17, i8** %14, align 8, !dbg !2802
  call void @llvm.dbg.declare(metadata i8** %15, metadata !2804, metadata !DIExpression()), !dbg !2805
  %18 = load i8*, i8** %14, align 8, !dbg !2806
  %19 = load i8*, i8** %12, align 8, !dbg !2808
  %20 = icmp ne i8* %18, %19, !dbg !2809
  %21 = load i32, i32* @x.37
  %22 = load i32, i32* @y.38
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %20, label %29, label %47, !dbg !2810

29:                                               ; preds = %originalBBpart2
  %30 = load i32, i32* @x.37
  %31 = load i32, i32* @y.38
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %29, %originalBB1alteredBB
  %38 = load i8*, i8** %14, align 8, !dbg !2811
  store i8* %38, i8** %11, align 8, !dbg !2812
  %39 = load i32, i32* @x.37
  %40 = load i32, i32* @y.38
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %157, !dbg !2812

47:                                               ; preds = %originalBBpart2
  %48 = load i32, i32* @x.37
  %49 = load i32, i32* @y.38
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %47, %originalBB6alteredBB
  %56 = call i8* @locale_charset(), !dbg !2813
  store i8* %56, i8** %15, align 8, !dbg !2814
  %57 = load i8*, i8** %15, align 8, !dbg !2815
  %58 = call i32 @c_strcasecmp(i8* %57, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13.66, i64 0, i64 0)) #13, !dbg !2815
  %59 = icmp eq i32 %58, 0, !dbg !2815
  %60 = load i32, i32* @x.37
  %61 = load i32, i32* @y.38
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %59, label %68, label %92, !dbg !2817

68:                                               ; preds = %originalBBpart28
  %69 = load i32, i32* @x.37
  %70 = load i32, i32* @y.38
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %68, %originalBB10alteredBB
  %77 = load i8*, i8** %12, align 8, !dbg !2818
  %78 = getelementptr inbounds i8, i8* %77, i64 0, !dbg !2818
  %79 = load i8, i8* %78, align 1, !dbg !2818
  %80 = sext i8 %79 to i32, !dbg !2818
  %81 = icmp eq i32 %80, 96, !dbg !2819
  %82 = zext i1 %81 to i64, !dbg !2818
  %83 = select i1 %81, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.67, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.68, i64 0, i64 0), !dbg !2818
  store i8* %83, i8** %11, align 8, !dbg !2820
  %84 = load i32, i32* @x.37
  %85 = load i32, i32* @y.38
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %157, !dbg !2820

92:                                               ; preds = %originalBBpart28
  %93 = load i32, i32* @x.37
  %94 = load i32, i32* @y.38
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %92, %originalBB14alteredBB
  %101 = load i8*, i8** %15, align 8, !dbg !2821
  %102 = call i32 @c_strcasecmp(i8* %101, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16.69, i64 0, i64 0)) #13, !dbg !2821
  %103 = icmp eq i32 %102, 0, !dbg !2821
  %104 = load i32, i32* @x.37
  %105 = load i32, i32* @y.38
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %103, label %112, label %136, !dbg !2823

112:                                              ; preds = %originalBBpart216
  %113 = load i32, i32* @x.37
  %114 = load i32, i32* @y.38
  %115 = sub i32 %113, 1
  %116 = mul i32 %113, %115
  %117 = urem i32 %116, 2
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %118, %119
  br i1 %120, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %112, %originalBB18alteredBB
  %121 = load i8*, i8** %12, align 8, !dbg !2824
  %122 = getelementptr inbounds i8, i8* %121, i64 0, !dbg !2824
  %123 = load i8, i8* %122, align 1, !dbg !2824
  %124 = sext i8 %123 to i32, !dbg !2824
  %125 = icmp eq i32 %124, 96, !dbg !2825
  %126 = zext i1 %125 to i64, !dbg !2824
  %127 = select i1 %125, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17.70, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.71, i64 0, i64 0), !dbg !2824
  store i8* %127, i8** %11, align 8, !dbg !2826
  %128 = load i32, i32* @x.37
  %129 = load i32, i32* @y.38
  %130 = sub i32 %128, 1
  %131 = mul i32 %128, %130
  %132 = urem i32 %131, 2
  %133 = icmp eq i32 %132, 0
  %134 = icmp slt i32 %129, 10
  %135 = or i1 %133, %134
  br i1 %135, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %157, !dbg !2826

136:                                              ; preds = %originalBBpart216
  %137 = load i32, i32* @x.37
  %138 = load i32, i32* @y.38
  %139 = sub i32 %137, 1
  %140 = mul i32 %137, %139
  %141 = urem i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %142, %143
  br i1 %144, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %136, %originalBB22alteredBB
  %145 = load i32, i32* %13, align 4, !dbg !2827
  %146 = icmp eq i32 %145, 9, !dbg !2828
  %147 = zext i1 %146 to i64, !dbg !2827
  %148 = select i1 %146, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.63, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.65, i64 0, i64 0), !dbg !2827
  store i8* %148, i8** %11, align 8, !dbg !2829
  %149 = load i32, i32* @x.37
  %150 = load i32, i32* @y.38
  %151 = sub i32 %149, 1
  %152 = mul i32 %149, %151
  %153 = urem i32 %152, 2
  %154 = icmp eq i32 %153, 0
  %155 = icmp slt i32 %150, 10
  %156 = or i1 %154, %155
  br i1 %156, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %157, !dbg !2829

157:                                              ; preds = %originalBBpart224, %originalBBpart220, %originalBBpart212, %originalBBpart24
  %158 = load i32, i32* @x.37
  %159 = load i32, i32* @y.38
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %157, %originalBB26alteredBB
  %166 = load i8*, i8** %11, align 8, !dbg !2830
  %167 = load i32, i32* @x.37
  %168 = load i32, i32* @y.38
  %169 = sub i32 %167, 1
  %170 = mul i32 %167, %169
  %171 = urem i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %172, %173
  br i1 %174, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  ret i8* %166, !dbg !2830

originalBBalteredBB:                              ; preds = %originalBB, %2
  %175 = alloca i8*, align 8
  %176 = alloca i8*, align 8
  %177 = alloca i32, align 4
  %178 = alloca i8*, align 8
  %179 = alloca i8*, align 8
  store i8* %0, i8** %176, align 8
  call void @llvm.dbg.declare(metadata i8** %176, metadata !2831, metadata !DIExpression()), !dbg !2798
  store i32 %1, i32* %177, align 4
  call void @llvm.dbg.declare(metadata i32* %177, metadata !2863, metadata !DIExpression()), !dbg !2800
  call void @llvm.dbg.declare(metadata i8** %178, metadata !2864, metadata !DIExpression()), !dbg !2802
  %180 = load i8*, i8** %176, align 8, !dbg !2803
  %181 = call i8* @gettext(i8* %180) #10, !dbg !2803
  store i8* %181, i8** %178, align 8, !dbg !2802
  call void @llvm.dbg.declare(metadata i8** %179, metadata !2865, metadata !DIExpression()), !dbg !2805
  %182 = load i8*, i8** %178, align 8, !dbg !2806
  %183 = load i8*, i8** %176, align 8, !dbg !2808
  %184 = icmp ne i8* %182, %183, !dbg !2809
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %29
  %185 = load i8*, i8** %14, align 8, !dbg !2811
  store i8* %185, i8** %11, align 8, !dbg !2812
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %47
  %186 = call i8* @locale_charset(), !dbg !2813
  store i8* %186, i8** %15, align 8, !dbg !2814
  %187 = load i8*, i8** %15, align 8, !dbg !2815
  %188 = call i32 @c_strcasecmp(i8* %187, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13.66, i64 0, i64 0)) #13, !dbg !2815
  %189 = icmp eq i32 %188, 0, !dbg !2815
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %68
  %190 = load i8*, i8** %12, align 8, !dbg !2818
  %191 = getelementptr inbounds i8, i8* %190, i64 0, !dbg !2818
  %192 = load i8, i8* %191, align 1, !dbg !2818
  %193 = sext i8 %192 to i32, !dbg !2818
  %194 = icmp eq i32 %193, 96, !dbg !2819
  %195 = zext i1 %194 to i64, !dbg !2818
  %196 = select i1 %194, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.67, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.68, i64 0, i64 0), !dbg !2818
  store i8* %196, i8** %11, align 8, !dbg !2820
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %92
  %197 = load i8*, i8** %15, align 8, !dbg !2821
  %198 = call i32 @c_strcasecmp(i8* %197, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16.69, i64 0, i64 0)) #13, !dbg !2821
  %199 = icmp eq i32 %198, 0, !dbg !2821
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %112
  %200 = load i8*, i8** %12, align 8, !dbg !2824
  %201 = getelementptr inbounds i8, i8* %200, i64 0, !dbg !2824
  %202 = load i8, i8* %201, align 1, !dbg !2824
  %203 = sext i8 %202 to i32, !dbg !2824
  %204 = icmp eq i32 %203, 96, !dbg !2825
  %205 = zext i1 %204 to i64, !dbg !2824
  %206 = select i1 %204, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17.70, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.71, i64 0, i64 0), !dbg !2824
  store i8* %206, i8** %11, align 8, !dbg !2826
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %136
  %207 = load i32, i32* %13, align 4, !dbg !2827
  %208 = icmp eq i32 %207, 9, !dbg !2828
  %209 = zext i1 %208 to i64, !dbg !2827
  %210 = select i1 %208, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.63, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.65, i64 0, i64 0), !dbg !2827
  store i8* %210, i8** %11, align 8, !dbg !2829
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %157
  %211 = load i8*, i8** %11, align 8, !dbg !2830
  br label %originalBB26
}

; Function Attrs: nounwind readonly
declare dso_local i32 @memcmp(i8*, i8*, i64) #7

; Function Attrs: nounwind readnone
declare dso_local i16** @__ctype_b_loc() #8

; Function Attrs: nounwind
declare dso_local i32 @iswprint(i32) #2

; Function Attrs: nounwind readonly
declare dso_local i32 @mbsinit(%struct.__mbstate_t*) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_style(i32, i8*) #4 !dbg !2866 {
  %3 = load i32, i32* @x.39
  %4 = load i32, i32* @y.40
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !2869, metadata !DIExpression()), !dbg !2870
  store i8* %1, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !2871, metadata !DIExpression()), !dbg !2872
  %13 = load i32, i32* %11, align 4, !dbg !2873
  %14 = mul i32 %0, -5
  %15 = add i32 %14, -3
  %16 = mul i32 %13, -3
  %17 = add i32 %16, -4
  %18 = mul i32 %13, 3
  %19 = add i32 %18, 1
  %20 = mul i32 %15, %15
  %21 = mul i32 %20, %20
  %22 = mul i32 %17, %17
  %23 = mul i32 %22, %22
  %24 = mul i32 %19, %19
  %25 = mul i32 %24, %24
  %26 = add i32 %21, %23
  %27 = sub i32 %26, %25
  %28 = mul i32 %27, 4
  %29 = add i32 %28, -5
  %30 = icmp eq i32 %29, -5
  %31 = load i32, i32* @x.39
  %32 = load i32, i32* @y.40
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %30, label %56, label %39

39:                                               ; preds = %originalBBpart2
  %40 = load i32, i32* @x.39
  %41 = load i32, i32* @y.40
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBB103, label %originalBB103alteredBB

originalBB103:                                    ; preds = %39, %originalBB103alteredBB
  %48 = load i32, i32* @x.39
  %49 = load i32, i32* @y.40
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBBpart2105, label %originalBB103alteredBB

originalBBpart2105:                               ; preds = %originalBB103
  ret i8* null

56:                                               ; preds = %originalBBpart2
  %57 = load i32, i32* @x.39
  %58 = load i32, i32* @y.40
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBB107, label %originalBB107alteredBB

originalBB107:                                    ; preds = %56, %originalBB107alteredBB
  %65 = load i8*, i8** %12, align 8, !dbg !2874
  %66 = call i8* @quotearg_n_style(i32 0, i32 %13, i8* %65), !dbg !2875
  %67 = load i32, i32* @x.39
  %68 = load i32, i32* @y.40
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBBpart2109, label %originalBB107alteredBB

originalBBpart2109:                               ; preds = %originalBB107
  ret i8* %66, !dbg !2876

originalBBalteredBB:                              ; preds = %originalBB, %2
  %75 = alloca i32, align 4
  %76 = alloca i8*, align 8
  store i32 %0, i32* %75, align 4
  call void @llvm.dbg.declare(metadata i32* %75, metadata !2877, metadata !DIExpression()), !dbg !2870
  store i8* %1, i8** %76, align 8
  call void @llvm.dbg.declare(metadata i8** %76, metadata !2909, metadata !DIExpression()), !dbg !2872
  %77 = load i32, i32* %75, align 4, !dbg !2873
  %_ = sub i32 %0, -5
  %gen = mul i32 %_, -5
  %_1 = sub i32 %0, -5
  %gen2 = mul i32 %_1, -5
  %_3 = sub i32 %0, -5
  %gen4 = mul i32 %_3, -5
  %_5 = sub i32 %0, -5
  %gen6 = mul i32 %_5, -5
  %_7 = sub i32 %0, -5
  %gen8 = mul i32 %_7, -5
  %_9 = sub i32 %0, -5
  %gen10 = mul i32 %_9, -5
  %_11 = sub i32 0, %0
  %gen12 = add i32 %_11, -5
  %_13 = sub i32 %0, -5
  %gen14 = mul i32 %_13, -5
  %78 = mul i32 %0, -5
  %79 = add i32 %78, -3
  %_15 = sub i32 %77, -3
  %gen16 = mul i32 %_15, -3
  %_17 = shl i32 %77, -3
  %80 = mul i32 %77, -3
  %_18 = shl i32 %80, -4
  %_19 = sub i32 0, %80
  %gen20 = add i32 %_19, -4
  %81 = add i32 %80, -4
  %_21 = sub i32 0, %77
  %gen22 = add i32 %_21, 3
  %_23 = sub i32 %77, 3
  %gen24 = mul i32 %_23, 3
  %_25 = shl i32 %77, 3
  %_26 = shl i32 %77, 3
  %82 = mul i32 %77, 3
  %_27 = sub i32 %82, 1
  %gen28 = mul i32 %_27, 1
  %_29 = shl i32 %82, 1
  %_30 = shl i32 %82, 1
  %_31 = sub i32 %82, 1
  %gen32 = mul i32 %_31, 1
  %83 = add i32 %82, 1
  %_33 = shl i32 %79, %79
  %_34 = shl i32 %79, %79
  %_35 = sub i32 %79, %79
  %gen36 = mul i32 %_35, %79
  %_37 = sub i32 0, %79
  %gen38 = add i32 %_37, %79
  %_39 = sub i32 0, %79
  %gen40 = add i32 %_39, %79
  %_41 = shl i32 %79, %79
  %84 = mul i32 %79, %79
  %_42 = sub i32 0, %84
  %gen43 = add i32 %_42, %84
  %_44 = sub i32 0, %84
  %gen45 = add i32 %_44, %84
  %_46 = sub i32 0, %84
  %gen47 = add i32 %_46, %84
  %_48 = sub i32 %84, %84
  %gen49 = mul i32 %_48, %84
  %85 = mul i32 %84, %84
  %_50 = sub i32 %81, %81
  %gen51 = mul i32 %_50, %81
  %_52 = sub i32 %81, %81
  %gen53 = mul i32 %_52, %81
  %_54 = sub i32 %81, %81
  %gen55 = mul i32 %_54, %81
  %_56 = sub i32 %81, %81
  %gen57 = mul i32 %_56, %81
  %_58 = sub i32 %81, %81
  %gen59 = mul i32 %_58, %81
  %_60 = sub i32 %81, %81
  %gen61 = mul i32 %_60, %81
  %86 = mul i32 %81, %81
  %_62 = sub i32 %86, %86
  %gen63 = mul i32 %_62, %86
  %87 = mul i32 %86, %86
  %_64 = sub i32 %83, %83
  %gen65 = mul i32 %_64, %83
  %_66 = sub i32 %83, %83
  %gen67 = mul i32 %_66, %83
  %_68 = sub i32 %83, %83
  %gen69 = mul i32 %_68, %83
  %_70 = shl i32 %83, %83
  %88 = mul i32 %83, %83
  %_71 = shl i32 %88, %88
  %89 = mul i32 %88, %88
  %_72 = sub i32 0, %85
  %gen73 = add i32 %_72, %87
  %_74 = shl i32 %85, %87
  %_75 = shl i32 %85, %87
  %90 = add i32 %85, %87
  %_76 = sub i32 %90, %89
  %gen77 = mul i32 %_76, %89
  %_78 = sub i32 0, %90
  %gen79 = add i32 %_78, %89
  %_80 = shl i32 %90, %89
  %_81 = sub i32 0, %90
  %gen82 = add i32 %_81, %89
  %_83 = shl i32 %90, %89
  %_84 = sub i32 %90, %89
  %gen85 = mul i32 %_84, %89
  %_86 = shl i32 %90, %89
  %_87 = shl i32 %90, %89
  %91 = sub i32 %90, %89
  %_88 = shl i32 %91, 4
  %_89 = sub i32 %91, 4
  %gen90 = mul i32 %_89, 4
  %_91 = sub i32 0, %91
  %gen92 = add i32 %_91, 4
  %_93 = shl i32 %91, 4
  %_94 = shl i32 %91, 4
  %_95 = sub i32 0, %91
  %gen96 = add i32 %_95, 4
  %92 = mul i32 %91, 4
  %_97 = sub i32 %92, -5
  %gen98 = mul i32 %_97, -5
  %_99 = sub i32 %92, -5
  %gen100 = mul i32 %_99, -5
  %_101 = sub i32 %92, -5
  %gen102 = mul i32 %_101, -5
  %93 = add i32 %92, -5
  %94 = icmp eq i32 %93, -5
  br label %originalBB

originalBB103alteredBB:                           ; preds = %originalBB103, %39
  br label %originalBB103

originalBB107alteredBB:                           ; preds = %originalBB107, %56
  %95 = load i8*, i8** %12, align 8, !dbg !2874
  %96 = call i8* @quotearg_n_style(i32 0, i32 %13, i8* %95), !dbg !2875
  br label %originalBB107
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_char_mem(i8*, i64, i8 signext) #4 !dbg !2910 {
  %4 = load i32, i32* @x.41
  %5 = load i32, i32* @y.42
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i8, align 1
  %15 = alloca %struct.quoting_options, align 8
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !2913, metadata !DIExpression()), !dbg !2914
  store i64 %1, i64* %13, align 8
  call void @llvm.dbg.declare(metadata i64* %13, metadata !2915, metadata !DIExpression()), !dbg !2916
  store i8 %2, i8* %14, align 1
  call void @llvm.dbg.declare(metadata i8* %14, metadata !2917, metadata !DIExpression()), !dbg !2918
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %15, metadata !2919, metadata !DIExpression()), !dbg !2920
  %16 = bitcast %struct.quoting_options* %15 to i8*, !dbg !2921
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i1 false), !dbg !2921
  %17 = load i8, i8* %14, align 1, !dbg !2922
  %18 = call i32 @set_char_quoting(%struct.quoting_options* %15, i8 signext %17, i32 1), !dbg !2923
  %19 = load i8*, i8** %12, align 8, !dbg !2924
  %20 = load i64, i64* %13, align 8, !dbg !2925
  %21 = call i8* @quotearg_n_options(i32 0, i8* %19, i64 %20, %struct.quoting_options* %15), !dbg !2926
  %22 = load i32, i32* @x.41
  %23 = load i32, i32* @y.42
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %21, !dbg !2927

originalBBalteredBB:                              ; preds = %originalBB, %3
  %30 = alloca i8*, align 8
  %31 = alloca i64, align 8
  %32 = alloca i8, align 1
  %33 = alloca %struct.quoting_options, align 8
  store i8* %0, i8** %30, align 8
  call void @llvm.dbg.declare(metadata i8** %30, metadata !2928, metadata !DIExpression()), !dbg !2914
  store i64 %1, i64* %31, align 8
  call void @llvm.dbg.declare(metadata i64* %31, metadata !2960, metadata !DIExpression()), !dbg !2916
  store i8 %2, i8* %32, align 1
  call void @llvm.dbg.declare(metadata i8* %32, metadata !2961, metadata !DIExpression()), !dbg !2918
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %33, metadata !2962, metadata !DIExpression()), !dbg !2920
  %34 = bitcast %struct.quoting_options* %33 to i8*, !dbg !2921
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %34, i8* align 8 bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i1 false), !dbg !2921
  %35 = load i8, i8* %32, align 1, !dbg !2922
  %36 = call i32 @set_char_quoting(%struct.quoting_options* %33, i8 signext %35, i32 1), !dbg !2923
  %37 = load i8*, i8** %30, align 8, !dbg !2924
  %38 = load i64, i64* %31, align 8, !dbg !2925
  %39 = call i8* @quotearg_n_options(i32 0, i8* %37, i64 %38, %struct.quoting_options* %33), !dbg !2926
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_char(i8*, i8 signext) #4 !dbg !2963 {
  %3 = load i32, i32* @x.43
  %4 = load i32, i32* @y.44
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i8, align 1
  store i8* %0, i8** %11, align 8
  call void @llvm.dbg.declare(metadata i8** %11, metadata !2966, metadata !DIExpression()), !dbg !2967
  store i8 %1, i8* %12, align 1
  call void @llvm.dbg.declare(metadata i8* %12, metadata !2968, metadata !DIExpression()), !dbg !2969
  %13 = load i8*, i8** %11, align 8, !dbg !2970
  %14 = load i8, i8* %12, align 1, !dbg !2971
  %15 = call i8* @quotearg_char_mem(i8* %13, i64 -1, i8 signext %14), !dbg !2972
  %16 = load i32, i32* @x.43
  %17 = load i32, i32* @y.44
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %15, !dbg !2973

originalBBalteredBB:                              ; preds = %originalBB, %2
  %24 = alloca i8*, align 8
  %25 = alloca i8, align 1
  store i8* %0, i8** %24, align 8
  call void @llvm.dbg.declare(metadata i8** %24, metadata !2974, metadata !DIExpression()), !dbg !2967
  store i8 %1, i8* %25, align 1
  call void @llvm.dbg.declare(metadata i8* %25, metadata !3006, metadata !DIExpression()), !dbg !2969
  %26 = load i8*, i8** %24, align 8, !dbg !2970
  %27 = load i8, i8* %25, align 1, !dbg !2971
  %28 = call i8* @quotearg_char_mem(i8* %26, i64 -1, i8 signext %27), !dbg !2972
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_colon(i8*) #4 !dbg !3007 {
  %2 = load i32, i32* @x.45
  %3 = load i32, i32* @y.46
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !3010, metadata !DIExpression()), !dbg !3011
  %11 = load i8*, i8** %10, align 8, !dbg !3012
  %12 = call i8* @quotearg_char(i8* %11, i8 signext 58), !dbg !3013
  %13 = load i32, i32* @x.45
  %14 = load i32, i32* @y.46
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %12, !dbg !3014

originalBBalteredBB:                              ; preds = %originalBB, %1
  %21 = alloca i8*, align 8
  store i8* %0, i8** %21, align 8
  call void @llvm.dbg.declare(metadata i8** %21, metadata !3015, metadata !DIExpression()), !dbg !3011
  %22 = load i8*, i8** %21, align 8, !dbg !3012
  %23 = call i8* @quotearg_char(i8* %22, i8 signext 58), !dbg !3013
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote_n_mem(i32, i8*, i64) #4 !dbg !3047 {
  %4 = load i32, i32* @x.47
  %5 = load i32, i32* @y.48
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  store i32 %0, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !3050, metadata !DIExpression()), !dbg !3051
  store i8* %1, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !3052, metadata !DIExpression()), !dbg !3053
  store i64 %2, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !3054, metadata !DIExpression()), !dbg !3055
  %15 = load i32, i32* %12, align 4, !dbg !3056
  %16 = load i8*, i8** %13, align 8, !dbg !3057
  %17 = load i64, i64* %14, align 8, !dbg !3058
  %18 = call i8* @quotearg_n_options(i32 %15, i8* %16, i64 %17, %struct.quoting_options* @quote_quoting_options), !dbg !3059
  %19 = load i32, i32* @x.47
  %20 = load i32, i32* @y.48
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %18, !dbg !3060

originalBBalteredBB:                              ; preds = %originalBB, %3
  %27 = alloca i32, align 4
  %28 = alloca i8*, align 8
  %29 = alloca i64, align 8
  store i32 %0, i32* %27, align 4
  call void @llvm.dbg.declare(metadata i32* %27, metadata !3061, metadata !DIExpression()), !dbg !3051
  store i8* %1, i8** %28, align 8
  call void @llvm.dbg.declare(metadata i8** %28, metadata !3093, metadata !DIExpression()), !dbg !3053
  store i64 %2, i64* %29, align 8
  call void @llvm.dbg.declare(metadata i64* %29, metadata !3094, metadata !DIExpression()), !dbg !3055
  %30 = load i32, i32* %27, align 4, !dbg !3056
  %31 = load i8*, i8** %28, align 8, !dbg !3057
  %32 = load i64, i64* %29, align 8, !dbg !3058
  %33 = call i8* @quotearg_n_options(i32 %30, i8* %31, i64 %32, %struct.quoting_options* @quote_quoting_options), !dbg !3059
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote_n(i32, i8*) #4 !dbg !3095 {
  %3 = load i32, i32* @x.49
  %4 = load i32, i32* @y.50
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !3098, metadata !DIExpression()), !dbg !3099
  store i8* %1, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !3100, metadata !DIExpression()), !dbg !3101
  %13 = load i32, i32* %11, align 4, !dbg !3102
  %14 = load i8*, i8** %12, align 8, !dbg !3103
  %15 = call i8* @quote_n_mem(i32 %13, i8* %14, i64 -1), !dbg !3104
  %16 = load i32, i32* @x.49
  %17 = load i32, i32* @y.50
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %15, !dbg !3105

originalBBalteredBB:                              ; preds = %originalBB, %2
  %24 = alloca i32, align 4
  %25 = alloca i8*, align 8
  store i32 %0, i32* %24, align 4
  call void @llvm.dbg.declare(metadata i32* %24, metadata !3106, metadata !DIExpression()), !dbg !3099
  store i8* %1, i8** %25, align 8
  call void @llvm.dbg.declare(metadata i8** %25, metadata !3138, metadata !DIExpression()), !dbg !3101
  %26 = load i32, i32* %24, align 4, !dbg !3102
  %27 = load i8*, i8** %25, align 8, !dbg !3103
  %28 = call i8* @quote_n_mem(i32 %26, i8* %27, i64 -1), !dbg !3104
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote(i8*) #4 !dbg !3139 {
  %2 = load i32, i32* @x.51
  %3 = load i32, i32* @y.52
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !3142, metadata !DIExpression()), !dbg !3143
  %11 = load i8*, i8** %10, align 8, !dbg !3144
  %12 = call i8* @quote_n(i32 0, i8* %11), !dbg !3145
  %13 = load i32, i32* @x.51
  %14 = load i32, i32* @y.52
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %12, !dbg !3146

originalBBalteredBB:                              ; preds = %originalBB, %1
  %21 = alloca i8*, align 8
  store i8* %0, i8** %21, align 8
  call void @llvm.dbg.declare(metadata i8** %21, metadata !3147, metadata !DIExpression()), !dbg !3143
  %22 = load i8*, i8** %21, align 8, !dbg !3144
  %23 = call i8* @quote_n(i32 0, i8* %22), !dbg !3145
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.dev_ino* @get_root_dev_ino(%struct.dev_ino*) #4 !dbg !3179 {
  %2 = load i32, i32* @x.53
  %3 = load i32, i32* @y.54
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct.dev_ino*, align 8
  %11 = alloca %struct.dev_ino*, align 8
  %12 = alloca %struct.stat, align 8
  store %struct.dev_ino* %0, %struct.dev_ino** %11, align 8
  call void @llvm.dbg.declare(metadata %struct.dev_ino** %11, metadata !3188, metadata !DIExpression()), !dbg !3189
  call void @llvm.dbg.declare(metadata %struct.stat* %12, metadata !3190, metadata !DIExpression()), !dbg !3212
  %13 = call i32 @lstat(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.80, i64 0, i64 0), %struct.stat* %12) #10, !dbg !3213
  %14 = icmp ne i32 %13, 0, !dbg !3213
  %15 = load i32, i32* @x.53
  %16 = load i32, i32* @y.54
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %14, label %23, label %40, !dbg !3215

23:                                               ; preds = %originalBBpart2
  %24 = load i32, i32* @x.53
  %25 = load i32, i32* @y.54
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %23, %originalBB1alteredBB
  store %struct.dev_ino* null, %struct.dev_ino** %10, align 8, !dbg !3216
  %32 = load i32, i32* @x.53
  %33 = load i32, i32* @y.54
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %66, !dbg !3216

40:                                               ; preds = %originalBBpart2
  %41 = load i32, i32* @x.53
  %42 = load i32, i32* @y.54
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %40, %originalBB6alteredBB
  %49 = getelementptr inbounds %struct.stat, %struct.stat* %12, i32 0, i32 1, !dbg !3217
  %50 = load i64, i64* %49, align 8, !dbg !3217
  %51 = load %struct.dev_ino*, %struct.dev_ino** %11, align 8, !dbg !3218
  %52 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %51, i32 0, i32 0, !dbg !3219
  store i64 %50, i64* %52, align 8, !dbg !3220
  %53 = getelementptr inbounds %struct.stat, %struct.stat* %12, i32 0, i32 0, !dbg !3221
  %54 = load i64, i64* %53, align 8, !dbg !3221
  %55 = load %struct.dev_ino*, %struct.dev_ino** %11, align 8, !dbg !3222
  %56 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %55, i32 0, i32 1, !dbg !3223
  store i64 %54, i64* %56, align 8, !dbg !3224
  %57 = load %struct.dev_ino*, %struct.dev_ino** %11, align 8, !dbg !3225
  store %struct.dev_ino* %57, %struct.dev_ino** %10, align 8, !dbg !3226
  %58 = load i32, i32* @x.53
  %59 = load i32, i32* @y.54
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %66, !dbg !3226

66:                                               ; preds = %originalBBpart28, %originalBBpart24
  %67 = load i32, i32* @x.53
  %68 = load i32, i32* @y.54
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %66, %originalBB10alteredBB
  %75 = load %struct.dev_ino*, %struct.dev_ino** %10, align 8, !dbg !3227
  %76 = load i32, i32* @x.53
  %77 = load i32, i32* @y.54
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  ret %struct.dev_ino* %75, !dbg !3227

originalBBalteredBB:                              ; preds = %originalBB, %1
  %84 = alloca %struct.dev_ino*, align 8
  %85 = alloca %struct.dev_ino*, align 8
  %86 = alloca %struct.stat, align 8
  store %struct.dev_ino* %0, %struct.dev_ino** %85, align 8
  call void @llvm.dbg.declare(metadata %struct.dev_ino** %85, metadata !3228, metadata !DIExpression()), !dbg !3189
  call void @llvm.dbg.declare(metadata %struct.stat* %86, metadata !3238, metadata !DIExpression()), !dbg !3212
  %87 = call i32 @lstat(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.80, i64 0, i64 0), %struct.stat* %86) #10, !dbg !3213
  %88 = icmp ne i32 %87, 0, !dbg !3213
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %23
  store %struct.dev_ino* null, %struct.dev_ino** %10, align 8, !dbg !3216
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %40
  %89 = getelementptr inbounds %struct.stat, %struct.stat* %12, i32 0, i32 1, !dbg !3217
  %90 = load i64, i64* %89, align 8, !dbg !3217
  %91 = load %struct.dev_ino*, %struct.dev_ino** %11, align 8, !dbg !3218
  %92 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %91, i32 0, i32 0, !dbg !3219
  store i64 %90, i64* %92, align 8, !dbg !3220
  %93 = getelementptr inbounds %struct.stat, %struct.stat* %12, i32 0, i32 0, !dbg !3221
  %94 = load i64, i64* %93, align 8, !dbg !3221
  %95 = load %struct.dev_ino*, %struct.dev_ino** %11, align 8, !dbg !3222
  %96 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %95, i32 0, i32 1, !dbg !3223
  store i64 %94, i64* %96, align 8, !dbg !3224
  %97 = load %struct.dev_ino*, %struct.dev_ino** %11, align 8, !dbg !3225
  store %struct.dev_ino* %97, %struct.dev_ino** %10, align 8, !dbg !3226
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %66
  %98 = load %struct.dev_ino*, %struct.dev_ino** %10, align 8, !dbg !3227
  br label %originalBB10
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc_arn(%struct._IO_FILE*, i8*, i8*, i8*, i8**, i64) #4 !dbg !3260 {
  %7 = load i32, i32* @x.55
  %8 = load i32, i32* @y.56
  %9 = sub i32 %7, 1
  %10 = mul i32 %7, %9
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  %13 = icmp slt i32 %8, 10
  %14 = or i1 %12, %13
  br i1 %14, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %6, %originalBBalteredBB
  %15 = alloca %struct._IO_FILE*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca i8*, align 8
  %19 = alloca i8**, align 8
  %20 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %15, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %15, metadata !3317, metadata !DIExpression()), !dbg !3318
  store i8* %1, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !3319, metadata !DIExpression()), !dbg !3320
  store i8* %2, i8** %17, align 8
  call void @llvm.dbg.declare(metadata i8** %17, metadata !3321, metadata !DIExpression()), !dbg !3322
  store i8* %3, i8** %18, align 8
  call void @llvm.dbg.declare(metadata i8** %18, metadata !3323, metadata !DIExpression()), !dbg !3324
  store i8** %4, i8*** %19, align 8
  call void @llvm.dbg.declare(metadata i8*** %19, metadata !3325, metadata !DIExpression()), !dbg !3326
  store i64 %5, i64* %20, align 8
  call void @llvm.dbg.declare(metadata i64* %20, metadata !3327, metadata !DIExpression()), !dbg !3328
  %21 = load i8*, i8** %16, align 8, !dbg !3329
  %22 = icmp ne i8* %21, null, !dbg !3329
  %23 = load i32, i32* @x.55
  %24 = load i32, i32* @y.56
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %31, label %53, !dbg !3331

31:                                               ; preds = %originalBBpart2
  %32 = load i32, i32* @x.55
  %33 = load i32, i32* @y.56
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3332
  %41 = load i8*, i8** %16, align 8, !dbg !3333
  %42 = load i8*, i8** %17, align 8, !dbg !3334
  %43 = load i8*, i8** %18, align 8, !dbg !3335
  %44 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %40, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.81, i64 0, i64 0), i8* %41, i8* %42, i8* %43), !dbg !3336
  %45 = load i32, i32* @x.55
  %46 = load i32, i32* @y.56
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %74, !dbg !3336

53:                                               ; preds = %originalBBpart2
  %54 = load i32, i32* @x.55
  %55 = load i32, i32* @y.56
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %53, %originalBB6alteredBB
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3337
  %63 = load i8*, i8** %17, align 8, !dbg !3338
  %64 = load i8*, i8** %18, align 8, !dbg !3339
  %65 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %62, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.82, i64 0, i64 0), i8* %63, i8* %64), !dbg !3340
  %66 = load i32, i32* @x.55
  %67 = load i32, i32* @y.56
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %74

74:                                               ; preds = %originalBBpart28, %originalBBpart24
  %75 = load i32, i32* @x.55
  %76 = load i32, i32* @y.56
  %77 = sub i32 %75, 1
  %78 = mul i32 %75, %77
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %80, %81
  br i1 %82, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %74, %originalBB10alteredBB
  %83 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3341
  %84 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.83, i64 0, i64 0)) #10, !dbg !3342
  %85 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %83, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @version_etc_copyright, i64 0, i64 0), i8* %84, i32 2020), !dbg !3343
  %86 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3344
  %87 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.84, i64 0, i64 0), %struct._IO_FILE* %86), !dbg !3344
  %88 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3345
  %89 = call i8* @gettext(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.4.85, i64 0, i64 0)) #10, !dbg !3346
  %90 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %88, i8* %89, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5.86, i64 0, i64 0)), !dbg !3347
  %91 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3348
  %92 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.84, i64 0, i64 0), %struct._IO_FILE* %91), !dbg !3348
  %93 = load i64, i64* %20, align 8, !dbg !3349
  %94 = load i32, i32* @x.55
  %95 = load i32, i32* @y.56
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  switch i64 %93, label %434 [
    i64 0, label %102
    i64 1, label %119
    i64 2, label %142
    i64 3, label %168
    i64 4, label %197
    i64 5, label %229
    i64 6, label %264
    i64 7, label %302
    i64 8, label %343
    i64 9, label %387
  ], !dbg !3350

102:                                              ; preds = %originalBBpart212
  %103 = load i32, i32* @x.55
  %104 = load i32, i32* @y.56
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %102, %originalBB14alteredBB
  %111 = load i32, i32* @x.55
  %112 = load i32, i32* @y.56
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %481, !dbg !3351

119:                                              ; preds = %originalBBpart212
  %120 = load i32, i32* @x.55
  %121 = load i32, i32* @y.56
  %122 = sub i32 %120, 1
  %123 = mul i32 %120, %122
  %124 = urem i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %125, %126
  br i1 %127, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %119, %originalBB18alteredBB
  %128 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3353
  %129 = call i8* @gettext(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.87, i64 0, i64 0)) #10, !dbg !3354
  %130 = load i8**, i8*** %19, align 8, !dbg !3355
  %131 = getelementptr inbounds i8*, i8** %130, i64 0, !dbg !3355
  %132 = load i8*, i8** %131, align 8, !dbg !3355
  %133 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %128, i8* %129, i8* %132), !dbg !3356
  %134 = load i32, i32* @x.55
  %135 = load i32, i32* @y.56
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %481, !dbg !3357

142:                                              ; preds = %originalBBpart212
  %143 = load i32, i32* @x.55
  %144 = load i32, i32* @y.56
  %145 = sub i32 %143, 1
  %146 = mul i32 %143, %145
  %147 = urem i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %148, %149
  br i1 %150, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %142, %originalBB22alteredBB
  %151 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3358
  %152 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7.88, i64 0, i64 0)) #10, !dbg !3359
  %153 = load i8**, i8*** %19, align 8, !dbg !3360
  %154 = getelementptr inbounds i8*, i8** %153, i64 0, !dbg !3360
  %155 = load i8*, i8** %154, align 8, !dbg !3360
  %156 = load i8**, i8*** %19, align 8, !dbg !3361
  %157 = getelementptr inbounds i8*, i8** %156, i64 1, !dbg !3361
  %158 = load i8*, i8** %157, align 8, !dbg !3361
  %159 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %151, i8* %152, i8* %155, i8* %158), !dbg !3362
  %160 = load i32, i32* @x.55
  %161 = load i32, i32* @y.56
  %162 = sub i32 %160, 1
  %163 = mul i32 %160, %162
  %164 = urem i32 %163, 2
  %165 = icmp eq i32 %164, 0
  %166 = icmp slt i32 %161, 10
  %167 = or i1 %165, %166
  br i1 %167, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %481, !dbg !3363

168:                                              ; preds = %originalBBpart212
  %169 = load i32, i32* @x.55
  %170 = load i32, i32* @y.56
  %171 = sub i32 %169, 1
  %172 = mul i32 %169, %171
  %173 = urem i32 %172, 2
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %174, %175
  br i1 %176, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %168, %originalBB26alteredBB
  %177 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3364
  %178 = call i8* @gettext(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8.89, i64 0, i64 0)) #10, !dbg !3365
  %179 = load i8**, i8*** %19, align 8, !dbg !3366
  %180 = getelementptr inbounds i8*, i8** %179, i64 0, !dbg !3366
  %181 = load i8*, i8** %180, align 8, !dbg !3366
  %182 = load i8**, i8*** %19, align 8, !dbg !3367
  %183 = getelementptr inbounds i8*, i8** %182, i64 1, !dbg !3367
  %184 = load i8*, i8** %183, align 8, !dbg !3367
  %185 = load i8**, i8*** %19, align 8, !dbg !3368
  %186 = getelementptr inbounds i8*, i8** %185, i64 2, !dbg !3368
  %187 = load i8*, i8** %186, align 8, !dbg !3368
  %188 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %177, i8* %178, i8* %181, i8* %184, i8* %187), !dbg !3369
  %189 = load i32, i32* @x.55
  %190 = load i32, i32* @y.56
  %191 = sub i32 %189, 1
  %192 = mul i32 %189, %191
  %193 = urem i32 %192, 2
  %194 = icmp eq i32 %193, 0
  %195 = icmp slt i32 %190, 10
  %196 = or i1 %194, %195
  br i1 %196, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %481, !dbg !3370

197:                                              ; preds = %originalBBpart212
  %198 = load i32, i32* @x.55
  %199 = load i32, i32* @y.56
  %200 = sub i32 %198, 1
  %201 = mul i32 %198, %200
  %202 = urem i32 %201, 2
  %203 = icmp eq i32 %202, 0
  %204 = icmp slt i32 %199, 10
  %205 = or i1 %203, %204
  br i1 %205, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %197, %originalBB30alteredBB
  %206 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3371
  %207 = call i8* @gettext(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.9.90, i64 0, i64 0)) #10, !dbg !3372
  %208 = load i8**, i8*** %19, align 8, !dbg !3373
  %209 = getelementptr inbounds i8*, i8** %208, i64 0, !dbg !3373
  %210 = load i8*, i8** %209, align 8, !dbg !3373
  %211 = load i8**, i8*** %19, align 8, !dbg !3374
  %212 = getelementptr inbounds i8*, i8** %211, i64 1, !dbg !3374
  %213 = load i8*, i8** %212, align 8, !dbg !3374
  %214 = load i8**, i8*** %19, align 8, !dbg !3375
  %215 = getelementptr inbounds i8*, i8** %214, i64 2, !dbg !3375
  %216 = load i8*, i8** %215, align 8, !dbg !3375
  %217 = load i8**, i8*** %19, align 8, !dbg !3376
  %218 = getelementptr inbounds i8*, i8** %217, i64 3, !dbg !3376
  %219 = load i8*, i8** %218, align 8, !dbg !3376
  %220 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %206, i8* %207, i8* %210, i8* %213, i8* %216, i8* %219), !dbg !3377
  %221 = load i32, i32* @x.55
  %222 = load i32, i32* @y.56
  %223 = sub i32 %221, 1
  %224 = mul i32 %221, %223
  %225 = urem i32 %224, 2
  %226 = icmp eq i32 %225, 0
  %227 = icmp slt i32 %222, 10
  %228 = or i1 %226, %227
  br i1 %228, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %481, !dbg !3378

229:                                              ; preds = %originalBBpart212
  %230 = load i32, i32* @x.55
  %231 = load i32, i32* @y.56
  %232 = sub i32 %230, 1
  %233 = mul i32 %230, %232
  %234 = urem i32 %233, 2
  %235 = icmp eq i32 %234, 0
  %236 = icmp slt i32 %231, 10
  %237 = or i1 %235, %236
  br i1 %237, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %229, %originalBB34alteredBB
  %238 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3379
  %239 = call i8* @gettext(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.10.91, i64 0, i64 0)) #10, !dbg !3380
  %240 = load i8**, i8*** %19, align 8, !dbg !3381
  %241 = getelementptr inbounds i8*, i8** %240, i64 0, !dbg !3381
  %242 = load i8*, i8** %241, align 8, !dbg !3381
  %243 = load i8**, i8*** %19, align 8, !dbg !3382
  %244 = getelementptr inbounds i8*, i8** %243, i64 1, !dbg !3382
  %245 = load i8*, i8** %244, align 8, !dbg !3382
  %246 = load i8**, i8*** %19, align 8, !dbg !3383
  %247 = getelementptr inbounds i8*, i8** %246, i64 2, !dbg !3383
  %248 = load i8*, i8** %247, align 8, !dbg !3383
  %249 = load i8**, i8*** %19, align 8, !dbg !3384
  %250 = getelementptr inbounds i8*, i8** %249, i64 3, !dbg !3384
  %251 = load i8*, i8** %250, align 8, !dbg !3384
  %252 = load i8**, i8*** %19, align 8, !dbg !3385
  %253 = getelementptr inbounds i8*, i8** %252, i64 4, !dbg !3385
  %254 = load i8*, i8** %253, align 8, !dbg !3385
  %255 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %238, i8* %239, i8* %242, i8* %245, i8* %248, i8* %251, i8* %254), !dbg !3386
  %256 = load i32, i32* @x.55
  %257 = load i32, i32* @y.56
  %258 = sub i32 %256, 1
  %259 = mul i32 %256, %258
  %260 = urem i32 %259, 2
  %261 = icmp eq i32 %260, 0
  %262 = icmp slt i32 %257, 10
  %263 = or i1 %261, %262
  br i1 %263, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %481, !dbg !3387

264:                                              ; preds = %originalBBpart212
  %265 = load i32, i32* @x.55
  %266 = load i32, i32* @y.56
  %267 = sub i32 %265, 1
  %268 = mul i32 %265, %267
  %269 = urem i32 %268, 2
  %270 = icmp eq i32 %269, 0
  %271 = icmp slt i32 %266, 10
  %272 = or i1 %270, %271
  br i1 %272, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %264, %originalBB38alteredBB
  %273 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3388
  %274 = call i8* @gettext(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11.92, i64 0, i64 0)) #10, !dbg !3389
  %275 = load i8**, i8*** %19, align 8, !dbg !3390
  %276 = getelementptr inbounds i8*, i8** %275, i64 0, !dbg !3390
  %277 = load i8*, i8** %276, align 8, !dbg !3390
  %278 = load i8**, i8*** %19, align 8, !dbg !3391
  %279 = getelementptr inbounds i8*, i8** %278, i64 1, !dbg !3391
  %280 = load i8*, i8** %279, align 8, !dbg !3391
  %281 = load i8**, i8*** %19, align 8, !dbg !3392
  %282 = getelementptr inbounds i8*, i8** %281, i64 2, !dbg !3392
  %283 = load i8*, i8** %282, align 8, !dbg !3392
  %284 = load i8**, i8*** %19, align 8, !dbg !3393
  %285 = getelementptr inbounds i8*, i8** %284, i64 3, !dbg !3393
  %286 = load i8*, i8** %285, align 8, !dbg !3393
  %287 = load i8**, i8*** %19, align 8, !dbg !3394
  %288 = getelementptr inbounds i8*, i8** %287, i64 4, !dbg !3394
  %289 = load i8*, i8** %288, align 8, !dbg !3394
  %290 = load i8**, i8*** %19, align 8, !dbg !3395
  %291 = getelementptr inbounds i8*, i8** %290, i64 5, !dbg !3395
  %292 = load i8*, i8** %291, align 8, !dbg !3395
  %293 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %273, i8* %274, i8* %277, i8* %280, i8* %283, i8* %286, i8* %289, i8* %292), !dbg !3396
  %294 = load i32, i32* @x.55
  %295 = load i32, i32* @y.56
  %296 = sub i32 %294, 1
  %297 = mul i32 %294, %296
  %298 = urem i32 %297, 2
  %299 = icmp eq i32 %298, 0
  %300 = icmp slt i32 %295, 10
  %301 = or i1 %299, %300
  br i1 %301, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br label %481, !dbg !3397

302:                                              ; preds = %originalBBpart212
  %303 = load i32, i32* @x.55
  %304 = load i32, i32* @y.56
  %305 = sub i32 %303, 1
  %306 = mul i32 %303, %305
  %307 = urem i32 %306, 2
  %308 = icmp eq i32 %307, 0
  %309 = icmp slt i32 %304, 10
  %310 = or i1 %308, %309
  br i1 %310, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %302, %originalBB42alteredBB
  %311 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3398
  %312 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.12.93, i64 0, i64 0)) #10, !dbg !3399
  %313 = load i8**, i8*** %19, align 8, !dbg !3400
  %314 = getelementptr inbounds i8*, i8** %313, i64 0, !dbg !3400
  %315 = load i8*, i8** %314, align 8, !dbg !3400
  %316 = load i8**, i8*** %19, align 8, !dbg !3401
  %317 = getelementptr inbounds i8*, i8** %316, i64 1, !dbg !3401
  %318 = load i8*, i8** %317, align 8, !dbg !3401
  %319 = load i8**, i8*** %19, align 8, !dbg !3402
  %320 = getelementptr inbounds i8*, i8** %319, i64 2, !dbg !3402
  %321 = load i8*, i8** %320, align 8, !dbg !3402
  %322 = load i8**, i8*** %19, align 8, !dbg !3403
  %323 = getelementptr inbounds i8*, i8** %322, i64 3, !dbg !3403
  %324 = load i8*, i8** %323, align 8, !dbg !3403
  %325 = load i8**, i8*** %19, align 8, !dbg !3404
  %326 = getelementptr inbounds i8*, i8** %325, i64 4, !dbg !3404
  %327 = load i8*, i8** %326, align 8, !dbg !3404
  %328 = load i8**, i8*** %19, align 8, !dbg !3405
  %329 = getelementptr inbounds i8*, i8** %328, i64 5, !dbg !3405
  %330 = load i8*, i8** %329, align 8, !dbg !3405
  %331 = load i8**, i8*** %19, align 8, !dbg !3406
  %332 = getelementptr inbounds i8*, i8** %331, i64 6, !dbg !3406
  %333 = load i8*, i8** %332, align 8, !dbg !3406
  %334 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %311, i8* %312, i8* %315, i8* %318, i8* %321, i8* %324, i8* %327, i8* %330, i8* %333), !dbg !3407
  %335 = load i32, i32* @x.55
  %336 = load i32, i32* @y.56
  %337 = sub i32 %335, 1
  %338 = mul i32 %335, %337
  %339 = urem i32 %338, 2
  %340 = icmp eq i32 %339, 0
  %341 = icmp slt i32 %336, 10
  %342 = or i1 %340, %341
  br i1 %342, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br label %481, !dbg !3408

343:                                              ; preds = %originalBBpart212
  %344 = load i32, i32* @x.55
  %345 = load i32, i32* @y.56
  %346 = sub i32 %344, 1
  %347 = mul i32 %344, %346
  %348 = urem i32 %347, 2
  %349 = icmp eq i32 %348, 0
  %350 = icmp slt i32 %345, 10
  %351 = or i1 %349, %350
  br i1 %351, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %343, %originalBB46alteredBB
  %352 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3409
  %353 = call i8* @gettext(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.13.94, i64 0, i64 0)) #10, !dbg !3410
  %354 = load i8**, i8*** %19, align 8, !dbg !3411
  %355 = getelementptr inbounds i8*, i8** %354, i64 0, !dbg !3411
  %356 = load i8*, i8** %355, align 8, !dbg !3411
  %357 = load i8**, i8*** %19, align 8, !dbg !3412
  %358 = getelementptr inbounds i8*, i8** %357, i64 1, !dbg !3412
  %359 = load i8*, i8** %358, align 8, !dbg !3412
  %360 = load i8**, i8*** %19, align 8, !dbg !3413
  %361 = getelementptr inbounds i8*, i8** %360, i64 2, !dbg !3413
  %362 = load i8*, i8** %361, align 8, !dbg !3413
  %363 = load i8**, i8*** %19, align 8, !dbg !3414
  %364 = getelementptr inbounds i8*, i8** %363, i64 3, !dbg !3414
  %365 = load i8*, i8** %364, align 8, !dbg !3414
  %366 = load i8**, i8*** %19, align 8, !dbg !3415
  %367 = getelementptr inbounds i8*, i8** %366, i64 4, !dbg !3415
  %368 = load i8*, i8** %367, align 8, !dbg !3415
  %369 = load i8**, i8*** %19, align 8, !dbg !3416
  %370 = getelementptr inbounds i8*, i8** %369, i64 5, !dbg !3416
  %371 = load i8*, i8** %370, align 8, !dbg !3416
  %372 = load i8**, i8*** %19, align 8, !dbg !3417
  %373 = getelementptr inbounds i8*, i8** %372, i64 6, !dbg !3417
  %374 = load i8*, i8** %373, align 8, !dbg !3417
  %375 = load i8**, i8*** %19, align 8, !dbg !3418
  %376 = getelementptr inbounds i8*, i8** %375, i64 7, !dbg !3418
  %377 = load i8*, i8** %376, align 8, !dbg !3418
  %378 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %352, i8* %353, i8* %356, i8* %359, i8* %362, i8* %365, i8* %368, i8* %371, i8* %374, i8* %377), !dbg !3419
  %379 = load i32, i32* @x.55
  %380 = load i32, i32* @y.56
  %381 = sub i32 %379, 1
  %382 = mul i32 %379, %381
  %383 = urem i32 %382, 2
  %384 = icmp eq i32 %383, 0
  %385 = icmp slt i32 %380, 10
  %386 = or i1 %384, %385
  br i1 %386, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br label %481, !dbg !3420

387:                                              ; preds = %originalBBpart212
  %388 = load i32, i32* @x.55
  %389 = load i32, i32* @y.56
  %390 = sub i32 %388, 1
  %391 = mul i32 %388, %390
  %392 = urem i32 %391, 2
  %393 = icmp eq i32 %392, 0
  %394 = icmp slt i32 %389, 10
  %395 = or i1 %393, %394
  br i1 %395, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %387, %originalBB50alteredBB
  %396 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3421
  %397 = call i8* @gettext(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.14.95, i64 0, i64 0)) #10, !dbg !3422
  %398 = load i8**, i8*** %19, align 8, !dbg !3423
  %399 = getelementptr inbounds i8*, i8** %398, i64 0, !dbg !3423
  %400 = load i8*, i8** %399, align 8, !dbg !3423
  %401 = load i8**, i8*** %19, align 8, !dbg !3424
  %402 = getelementptr inbounds i8*, i8** %401, i64 1, !dbg !3424
  %403 = load i8*, i8** %402, align 8, !dbg !3424
  %404 = load i8**, i8*** %19, align 8, !dbg !3425
  %405 = getelementptr inbounds i8*, i8** %404, i64 2, !dbg !3425
  %406 = load i8*, i8** %405, align 8, !dbg !3425
  %407 = load i8**, i8*** %19, align 8, !dbg !3426
  %408 = getelementptr inbounds i8*, i8** %407, i64 3, !dbg !3426
  %409 = load i8*, i8** %408, align 8, !dbg !3426
  %410 = load i8**, i8*** %19, align 8, !dbg !3427
  %411 = getelementptr inbounds i8*, i8** %410, i64 4, !dbg !3427
  %412 = load i8*, i8** %411, align 8, !dbg !3427
  %413 = load i8**, i8*** %19, align 8, !dbg !3428
  %414 = getelementptr inbounds i8*, i8** %413, i64 5, !dbg !3428
  %415 = load i8*, i8** %414, align 8, !dbg !3428
  %416 = load i8**, i8*** %19, align 8, !dbg !3429
  %417 = getelementptr inbounds i8*, i8** %416, i64 6, !dbg !3429
  %418 = load i8*, i8** %417, align 8, !dbg !3429
  %419 = load i8**, i8*** %19, align 8, !dbg !3430
  %420 = getelementptr inbounds i8*, i8** %419, i64 7, !dbg !3430
  %421 = load i8*, i8** %420, align 8, !dbg !3430
  %422 = load i8**, i8*** %19, align 8, !dbg !3431
  %423 = getelementptr inbounds i8*, i8** %422, i64 8, !dbg !3431
  %424 = load i8*, i8** %423, align 8, !dbg !3431
  %425 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %396, i8* %397, i8* %400, i8* %403, i8* %406, i8* %409, i8* %412, i8* %415, i8* %418, i8* %421, i8* %424), !dbg !3432
  %426 = load i32, i32* @x.55
  %427 = load i32, i32* @y.56
  %428 = sub i32 %426, 1
  %429 = mul i32 %426, %428
  %430 = urem i32 %429, 2
  %431 = icmp eq i32 %430, 0
  %432 = icmp slt i32 %427, 10
  %433 = or i1 %431, %432
  br i1 %433, label %originalBBpart252, label %originalBB50alteredBB

originalBBpart252:                                ; preds = %originalBB50
  br label %481, !dbg !3433

434:                                              ; preds = %originalBBpart212
  %435 = load i32, i32* @x.55
  %436 = load i32, i32* @y.56
  %437 = sub i32 %435, 1
  %438 = mul i32 %435, %437
  %439 = urem i32 %438, 2
  %440 = icmp eq i32 %439, 0
  %441 = icmp slt i32 %436, 10
  %442 = or i1 %440, %441
  br i1 %442, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %434, %originalBB54alteredBB
  %443 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3434
  %444 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.15.96, i64 0, i64 0)) #10, !dbg !3435
  %445 = load i8**, i8*** %19, align 8, !dbg !3436
  %446 = getelementptr inbounds i8*, i8** %445, i64 0, !dbg !3436
  %447 = load i8*, i8** %446, align 8, !dbg !3436
  %448 = load i8**, i8*** %19, align 8, !dbg !3437
  %449 = getelementptr inbounds i8*, i8** %448, i64 1, !dbg !3437
  %450 = load i8*, i8** %449, align 8, !dbg !3437
  %451 = load i8**, i8*** %19, align 8, !dbg !3438
  %452 = getelementptr inbounds i8*, i8** %451, i64 2, !dbg !3438
  %453 = load i8*, i8** %452, align 8, !dbg !3438
  %454 = load i8**, i8*** %19, align 8, !dbg !3439
  %455 = getelementptr inbounds i8*, i8** %454, i64 3, !dbg !3439
  %456 = load i8*, i8** %455, align 8, !dbg !3439
  %457 = load i8**, i8*** %19, align 8, !dbg !3440
  %458 = getelementptr inbounds i8*, i8** %457, i64 4, !dbg !3440
  %459 = load i8*, i8** %458, align 8, !dbg !3440
  %460 = load i8**, i8*** %19, align 8, !dbg !3441
  %461 = getelementptr inbounds i8*, i8** %460, i64 5, !dbg !3441
  %462 = load i8*, i8** %461, align 8, !dbg !3441
  %463 = load i8**, i8*** %19, align 8, !dbg !3442
  %464 = getelementptr inbounds i8*, i8** %463, i64 6, !dbg !3442
  %465 = load i8*, i8** %464, align 8, !dbg !3442
  %466 = load i8**, i8*** %19, align 8, !dbg !3443
  %467 = getelementptr inbounds i8*, i8** %466, i64 7, !dbg !3443
  %468 = load i8*, i8** %467, align 8, !dbg !3443
  %469 = load i8**, i8*** %19, align 8, !dbg !3444
  %470 = getelementptr inbounds i8*, i8** %469, i64 8, !dbg !3444
  %471 = load i8*, i8** %470, align 8, !dbg !3444
  %472 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %443, i8* %444, i8* %447, i8* %450, i8* %453, i8* %456, i8* %459, i8* %462, i8* %465, i8* %468, i8* %471), !dbg !3445
  %473 = load i32, i32* @x.55
  %474 = load i32, i32* @y.56
  %475 = sub i32 %473, 1
  %476 = mul i32 %473, %475
  %477 = urem i32 %476, 2
  %478 = icmp eq i32 %477, 0
  %479 = icmp slt i32 %474, 10
  %480 = or i1 %478, %479
  br i1 %480, label %originalBBpart256, label %originalBB54alteredBB

originalBBpart256:                                ; preds = %originalBB54
  br label %481, !dbg !3446

481:                                              ; preds = %originalBBpart256, %originalBBpart252, %originalBBpart248, %originalBBpart244, %originalBBpart240, %originalBBpart236, %originalBBpart232, %originalBBpart228, %originalBBpart224, %originalBBpart220, %originalBBpart216
  %482 = load i32, i32* @x.55
  %483 = load i32, i32* @y.56
  %484 = sub i32 %482, 1
  %485 = mul i32 %482, %484
  %486 = urem i32 %485, 2
  %487 = icmp eq i32 %486, 0
  %488 = icmp slt i32 %483, 10
  %489 = or i1 %487, %488
  br i1 %489, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %481, %originalBB58alteredBB
  %490 = load i32, i32* @x.55
  %491 = load i32, i32* @y.56
  %492 = sub i32 %490, 1
  %493 = mul i32 %490, %492
  %494 = urem i32 %493, 2
  %495 = icmp eq i32 %494, 0
  %496 = icmp slt i32 %491, 10
  %497 = or i1 %495, %496
  br i1 %497, label %originalBBpart260, label %originalBB58alteredBB

originalBBpart260:                                ; preds = %originalBB58
  ret void, !dbg !3447

originalBBalteredBB:                              ; preds = %originalBB, %6
  %498 = alloca %struct._IO_FILE*, align 8
  %499 = alloca i8*, align 8
  %500 = alloca i8*, align 8
  %501 = alloca i8*, align 8
  %502 = alloca i8**, align 8
  %503 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %498, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %498, metadata !3448, metadata !DIExpression()), !dbg !3318
  store i8* %1, i8** %499, align 8
  call void @llvm.dbg.declare(metadata i8** %499, metadata !3487, metadata !DIExpression()), !dbg !3320
  store i8* %2, i8** %500, align 8
  call void @llvm.dbg.declare(metadata i8** %500, metadata !3488, metadata !DIExpression()), !dbg !3322
  store i8* %3, i8** %501, align 8
  call void @llvm.dbg.declare(metadata i8** %501, metadata !3489, metadata !DIExpression()), !dbg !3324
  store i8** %4, i8*** %502, align 8
  call void @llvm.dbg.declare(metadata i8*** %502, metadata !3490, metadata !DIExpression()), !dbg !3326
  store i64 %5, i64* %503, align 8
  call void @llvm.dbg.declare(metadata i64* %503, metadata !3491, metadata !DIExpression()), !dbg !3328
  %504 = load i8*, i8** %499, align 8, !dbg !3329
  %505 = icmp ne i8* %504, null, !dbg !3329
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  %506 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3332
  %507 = load i8*, i8** %16, align 8, !dbg !3333
  %508 = load i8*, i8** %17, align 8, !dbg !3334
  %509 = load i8*, i8** %18, align 8, !dbg !3335
  %510 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %506, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.81, i64 0, i64 0), i8* %507, i8* %508, i8* %509), !dbg !3336
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %53
  %511 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3337
  %512 = load i8*, i8** %17, align 8, !dbg !3338
  %513 = load i8*, i8** %18, align 8, !dbg !3339
  %514 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %511, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.82, i64 0, i64 0), i8* %512, i8* %513), !dbg !3340
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %74
  %515 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3341
  %516 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.83, i64 0, i64 0)) #10, !dbg !3342
  %517 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %515, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @version_etc_copyright, i64 0, i64 0), i8* %516, i32 2020), !dbg !3343
  %518 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3344
  %519 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.84, i64 0, i64 0), %struct._IO_FILE* %518), !dbg !3344
  %520 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3345
  %521 = call i8* @gettext(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.4.85, i64 0, i64 0)) #10, !dbg !3346
  %522 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %520, i8* %521, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5.86, i64 0, i64 0)), !dbg !3347
  %523 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3348
  %524 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.84, i64 0, i64 0), %struct._IO_FILE* %523), !dbg !3348
  %525 = load i64, i64* %20, align 8, !dbg !3349
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %102
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %119
  %526 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3353
  %527 = call i8* @gettext(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.87, i64 0, i64 0)) #10, !dbg !3354
  %528 = load i8**, i8*** %19, align 8, !dbg !3355
  %529 = getelementptr inbounds i8*, i8** %528, i64 0, !dbg !3355
  %530 = load i8*, i8** %529, align 8, !dbg !3355
  %531 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %526, i8* %527, i8* %530), !dbg !3356
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %142
  %532 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3358
  %533 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7.88, i64 0, i64 0)) #10, !dbg !3359
  %534 = load i8**, i8*** %19, align 8, !dbg !3360
  %535 = getelementptr inbounds i8*, i8** %534, i64 0, !dbg !3360
  %536 = load i8*, i8** %535, align 8, !dbg !3360
  %537 = load i8**, i8*** %19, align 8, !dbg !3361
  %538 = getelementptr inbounds i8*, i8** %537, i64 1, !dbg !3361
  %539 = load i8*, i8** %538, align 8, !dbg !3361
  %540 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %532, i8* %533, i8* %536, i8* %539), !dbg !3362
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %168
  %541 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3364
  %542 = call i8* @gettext(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8.89, i64 0, i64 0)) #10, !dbg !3365
  %543 = load i8**, i8*** %19, align 8, !dbg !3366
  %544 = getelementptr inbounds i8*, i8** %543, i64 0, !dbg !3366
  %545 = load i8*, i8** %544, align 8, !dbg !3366
  %546 = load i8**, i8*** %19, align 8, !dbg !3367
  %547 = getelementptr inbounds i8*, i8** %546, i64 1, !dbg !3367
  %548 = load i8*, i8** %547, align 8, !dbg !3367
  %549 = load i8**, i8*** %19, align 8, !dbg !3368
  %550 = getelementptr inbounds i8*, i8** %549, i64 2, !dbg !3368
  %551 = load i8*, i8** %550, align 8, !dbg !3368
  %552 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %541, i8* %542, i8* %545, i8* %548, i8* %551), !dbg !3369
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %197
  %553 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3371
  %554 = call i8* @gettext(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.9.90, i64 0, i64 0)) #10, !dbg !3372
  %555 = load i8**, i8*** %19, align 8, !dbg !3373
  %556 = getelementptr inbounds i8*, i8** %555, i64 0, !dbg !3373
  %557 = load i8*, i8** %556, align 8, !dbg !3373
  %558 = load i8**, i8*** %19, align 8, !dbg !3374
  %559 = getelementptr inbounds i8*, i8** %558, i64 1, !dbg !3374
  %560 = load i8*, i8** %559, align 8, !dbg !3374
  %561 = load i8**, i8*** %19, align 8, !dbg !3375
  %562 = getelementptr inbounds i8*, i8** %561, i64 2, !dbg !3375
  %563 = load i8*, i8** %562, align 8, !dbg !3375
  %564 = load i8**, i8*** %19, align 8, !dbg !3376
  %565 = getelementptr inbounds i8*, i8** %564, i64 3, !dbg !3376
  %566 = load i8*, i8** %565, align 8, !dbg !3376
  %567 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %553, i8* %554, i8* %557, i8* %560, i8* %563, i8* %566), !dbg !3377
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %229
  %568 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3379
  %569 = call i8* @gettext(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.10.91, i64 0, i64 0)) #10, !dbg !3380
  %570 = load i8**, i8*** %19, align 8, !dbg !3381
  %571 = getelementptr inbounds i8*, i8** %570, i64 0, !dbg !3381
  %572 = load i8*, i8** %571, align 8, !dbg !3381
  %573 = load i8**, i8*** %19, align 8, !dbg !3382
  %574 = getelementptr inbounds i8*, i8** %573, i64 1, !dbg !3382
  %575 = load i8*, i8** %574, align 8, !dbg !3382
  %576 = load i8**, i8*** %19, align 8, !dbg !3383
  %577 = getelementptr inbounds i8*, i8** %576, i64 2, !dbg !3383
  %578 = load i8*, i8** %577, align 8, !dbg !3383
  %579 = load i8**, i8*** %19, align 8, !dbg !3384
  %580 = getelementptr inbounds i8*, i8** %579, i64 3, !dbg !3384
  %581 = load i8*, i8** %580, align 8, !dbg !3384
  %582 = load i8**, i8*** %19, align 8, !dbg !3385
  %583 = getelementptr inbounds i8*, i8** %582, i64 4, !dbg !3385
  %584 = load i8*, i8** %583, align 8, !dbg !3385
  %585 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %568, i8* %569, i8* %572, i8* %575, i8* %578, i8* %581, i8* %584), !dbg !3386
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %264
  %586 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3388
  %587 = call i8* @gettext(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11.92, i64 0, i64 0)) #10, !dbg !3389
  %588 = load i8**, i8*** %19, align 8, !dbg !3390
  %589 = getelementptr inbounds i8*, i8** %588, i64 0, !dbg !3390
  %590 = load i8*, i8** %589, align 8, !dbg !3390
  %591 = load i8**, i8*** %19, align 8, !dbg !3391
  %592 = getelementptr inbounds i8*, i8** %591, i64 1, !dbg !3391
  %593 = load i8*, i8** %592, align 8, !dbg !3391
  %594 = load i8**, i8*** %19, align 8, !dbg !3392
  %595 = getelementptr inbounds i8*, i8** %594, i64 2, !dbg !3392
  %596 = load i8*, i8** %595, align 8, !dbg !3392
  %597 = load i8**, i8*** %19, align 8, !dbg !3393
  %598 = getelementptr inbounds i8*, i8** %597, i64 3, !dbg !3393
  %599 = load i8*, i8** %598, align 8, !dbg !3393
  %600 = load i8**, i8*** %19, align 8, !dbg !3394
  %601 = getelementptr inbounds i8*, i8** %600, i64 4, !dbg !3394
  %602 = load i8*, i8** %601, align 8, !dbg !3394
  %603 = load i8**, i8*** %19, align 8, !dbg !3395
  %604 = getelementptr inbounds i8*, i8** %603, i64 5, !dbg !3395
  %605 = load i8*, i8** %604, align 8, !dbg !3395
  %606 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %586, i8* %587, i8* %590, i8* %593, i8* %596, i8* %599, i8* %602, i8* %605), !dbg !3396
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %302
  %607 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3398
  %608 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.12.93, i64 0, i64 0)) #10, !dbg !3399
  %609 = load i8**, i8*** %19, align 8, !dbg !3400
  %610 = getelementptr inbounds i8*, i8** %609, i64 0, !dbg !3400
  %611 = load i8*, i8** %610, align 8, !dbg !3400
  %612 = load i8**, i8*** %19, align 8, !dbg !3401
  %613 = getelementptr inbounds i8*, i8** %612, i64 1, !dbg !3401
  %614 = load i8*, i8** %613, align 8, !dbg !3401
  %615 = load i8**, i8*** %19, align 8, !dbg !3402
  %616 = getelementptr inbounds i8*, i8** %615, i64 2, !dbg !3402
  %617 = load i8*, i8** %616, align 8, !dbg !3402
  %618 = load i8**, i8*** %19, align 8, !dbg !3403
  %619 = getelementptr inbounds i8*, i8** %618, i64 3, !dbg !3403
  %620 = load i8*, i8** %619, align 8, !dbg !3403
  %621 = load i8**, i8*** %19, align 8, !dbg !3404
  %622 = getelementptr inbounds i8*, i8** %621, i64 4, !dbg !3404
  %623 = load i8*, i8** %622, align 8, !dbg !3404
  %624 = load i8**, i8*** %19, align 8, !dbg !3405
  %625 = getelementptr inbounds i8*, i8** %624, i64 5, !dbg !3405
  %626 = load i8*, i8** %625, align 8, !dbg !3405
  %627 = load i8**, i8*** %19, align 8, !dbg !3406
  %628 = getelementptr inbounds i8*, i8** %627, i64 6, !dbg !3406
  %629 = load i8*, i8** %628, align 8, !dbg !3406
  %630 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %607, i8* %608, i8* %611, i8* %614, i8* %617, i8* %620, i8* %623, i8* %626, i8* %629), !dbg !3407
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %343
  %631 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3409
  %632 = call i8* @gettext(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.13.94, i64 0, i64 0)) #10, !dbg !3410
  %633 = load i8**, i8*** %19, align 8, !dbg !3411
  %634 = getelementptr inbounds i8*, i8** %633, i64 0, !dbg !3411
  %635 = load i8*, i8** %634, align 8, !dbg !3411
  %636 = load i8**, i8*** %19, align 8, !dbg !3412
  %637 = getelementptr inbounds i8*, i8** %636, i64 1, !dbg !3412
  %638 = load i8*, i8** %637, align 8, !dbg !3412
  %639 = load i8**, i8*** %19, align 8, !dbg !3413
  %640 = getelementptr inbounds i8*, i8** %639, i64 2, !dbg !3413
  %641 = load i8*, i8** %640, align 8, !dbg !3413
  %642 = load i8**, i8*** %19, align 8, !dbg !3414
  %643 = getelementptr inbounds i8*, i8** %642, i64 3, !dbg !3414
  %644 = load i8*, i8** %643, align 8, !dbg !3414
  %645 = load i8**, i8*** %19, align 8, !dbg !3415
  %646 = getelementptr inbounds i8*, i8** %645, i64 4, !dbg !3415
  %647 = load i8*, i8** %646, align 8, !dbg !3415
  %648 = load i8**, i8*** %19, align 8, !dbg !3416
  %649 = getelementptr inbounds i8*, i8** %648, i64 5, !dbg !3416
  %650 = load i8*, i8** %649, align 8, !dbg !3416
  %651 = load i8**, i8*** %19, align 8, !dbg !3417
  %652 = getelementptr inbounds i8*, i8** %651, i64 6, !dbg !3417
  %653 = load i8*, i8** %652, align 8, !dbg !3417
  %654 = load i8**, i8*** %19, align 8, !dbg !3418
  %655 = getelementptr inbounds i8*, i8** %654, i64 7, !dbg !3418
  %656 = load i8*, i8** %655, align 8, !dbg !3418
  %657 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %631, i8* %632, i8* %635, i8* %638, i8* %641, i8* %644, i8* %647, i8* %650, i8* %653, i8* %656), !dbg !3419
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %387
  %658 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3421
  %659 = call i8* @gettext(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.14.95, i64 0, i64 0)) #10, !dbg !3422
  %660 = load i8**, i8*** %19, align 8, !dbg !3423
  %661 = getelementptr inbounds i8*, i8** %660, i64 0, !dbg !3423
  %662 = load i8*, i8** %661, align 8, !dbg !3423
  %663 = load i8**, i8*** %19, align 8, !dbg !3424
  %664 = getelementptr inbounds i8*, i8** %663, i64 1, !dbg !3424
  %665 = load i8*, i8** %664, align 8, !dbg !3424
  %666 = load i8**, i8*** %19, align 8, !dbg !3425
  %667 = getelementptr inbounds i8*, i8** %666, i64 2, !dbg !3425
  %668 = load i8*, i8** %667, align 8, !dbg !3425
  %669 = load i8**, i8*** %19, align 8, !dbg !3426
  %670 = getelementptr inbounds i8*, i8** %669, i64 3, !dbg !3426
  %671 = load i8*, i8** %670, align 8, !dbg !3426
  %672 = load i8**, i8*** %19, align 8, !dbg !3427
  %673 = getelementptr inbounds i8*, i8** %672, i64 4, !dbg !3427
  %674 = load i8*, i8** %673, align 8, !dbg !3427
  %675 = load i8**, i8*** %19, align 8, !dbg !3428
  %676 = getelementptr inbounds i8*, i8** %675, i64 5, !dbg !3428
  %677 = load i8*, i8** %676, align 8, !dbg !3428
  %678 = load i8**, i8*** %19, align 8, !dbg !3429
  %679 = getelementptr inbounds i8*, i8** %678, i64 6, !dbg !3429
  %680 = load i8*, i8** %679, align 8, !dbg !3429
  %681 = load i8**, i8*** %19, align 8, !dbg !3430
  %682 = getelementptr inbounds i8*, i8** %681, i64 7, !dbg !3430
  %683 = load i8*, i8** %682, align 8, !dbg !3430
  %684 = load i8**, i8*** %19, align 8, !dbg !3431
  %685 = getelementptr inbounds i8*, i8** %684, i64 8, !dbg !3431
  %686 = load i8*, i8** %685, align 8, !dbg !3431
  %687 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %658, i8* %659, i8* %662, i8* %665, i8* %668, i8* %671, i8* %674, i8* %677, i8* %680, i8* %683, i8* %686), !dbg !3432
  br label %originalBB50

originalBB54alteredBB:                            ; preds = %originalBB54, %434
  %688 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !3434
  %689 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.15.96, i64 0, i64 0)) #10, !dbg !3435
  %690 = load i8**, i8*** %19, align 8, !dbg !3436
  %691 = getelementptr inbounds i8*, i8** %690, i64 0, !dbg !3436
  %692 = load i8*, i8** %691, align 8, !dbg !3436
  %693 = load i8**, i8*** %19, align 8, !dbg !3437
  %694 = getelementptr inbounds i8*, i8** %693, i64 1, !dbg !3437
  %695 = load i8*, i8** %694, align 8, !dbg !3437
  %696 = load i8**, i8*** %19, align 8, !dbg !3438
  %697 = getelementptr inbounds i8*, i8** %696, i64 2, !dbg !3438
  %698 = load i8*, i8** %697, align 8, !dbg !3438
  %699 = load i8**, i8*** %19, align 8, !dbg !3439
  %700 = getelementptr inbounds i8*, i8** %699, i64 3, !dbg !3439
  %701 = load i8*, i8** %700, align 8, !dbg !3439
  %702 = load i8**, i8*** %19, align 8, !dbg !3440
  %703 = getelementptr inbounds i8*, i8** %702, i64 4, !dbg !3440
  %704 = load i8*, i8** %703, align 8, !dbg !3440
  %705 = load i8**, i8*** %19, align 8, !dbg !3441
  %706 = getelementptr inbounds i8*, i8** %705, i64 5, !dbg !3441
  %707 = load i8*, i8** %706, align 8, !dbg !3441
  %708 = load i8**, i8*** %19, align 8, !dbg !3442
  %709 = getelementptr inbounds i8*, i8** %708, i64 6, !dbg !3442
  %710 = load i8*, i8** %709, align 8, !dbg !3442
  %711 = load i8**, i8*** %19, align 8, !dbg !3443
  %712 = getelementptr inbounds i8*, i8** %711, i64 7, !dbg !3443
  %713 = load i8*, i8** %712, align 8, !dbg !3443
  %714 = load i8**, i8*** %19, align 8, !dbg !3444
  %715 = getelementptr inbounds i8*, i8** %714, i64 8, !dbg !3444
  %716 = load i8*, i8** %715, align 8, !dbg !3444
  %717 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %688, i8* %689, i8* %692, i8* %695, i8* %698, i8* %701, i8* %704, i8* %707, i8* %710, i8* %713, i8* %716), !dbg !3445
  br label %originalBB54

originalBB58alteredBB:                            ; preds = %originalBB58, %481
  br label %originalBB58
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc_va(%struct._IO_FILE*, i8*, i8*, i8*, %struct.__va_list_tag*) #4 !dbg !3492 {
  %6 = load i32, i32* @x.57
  %7 = load i32, i32* @y.58
  %8 = sub i32 %6, 1
  %9 = mul i32 %6, %8
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  %12 = icmp slt i32 %7, 10
  %13 = or i1 %11, %12
  br i1 %13, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %5, %originalBBalteredBB
  %14 = alloca %struct._IO_FILE*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca %struct.__va_list_tag*, align 8
  %19 = alloca i64, align 8
  %20 = alloca [10 x i8*], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %14, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %14, metadata !3502, metadata !DIExpression()), !dbg !3503
  store i8* %1, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !3504, metadata !DIExpression()), !dbg !3505
  store i8* %2, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !3506, metadata !DIExpression()), !dbg !3507
  store i8* %3, i8** %17, align 8
  call void @llvm.dbg.declare(metadata i8** %17, metadata !3508, metadata !DIExpression()), !dbg !3509
  store %struct.__va_list_tag* %4, %struct.__va_list_tag** %18, align 8
  call void @llvm.dbg.declare(metadata %struct.__va_list_tag** %18, metadata !3510, metadata !DIExpression()), !dbg !3511
  call void @llvm.dbg.declare(metadata i64* %19, metadata !3512, metadata !DIExpression()), !dbg !3513
  call void @llvm.dbg.declare(metadata [10 x i8*]* %20, metadata !3514, metadata !DIExpression()), !dbg !3516
  store i64 0, i64* %19, align 8, !dbg !3517
  %21 = load i32, i32* @x.57
  %22 = load i32, i32* @y.58
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %29, !dbg !3519

29:                                               ; preds = %originalBBpart250, %originalBBpart2
  %30 = load i32, i32* @x.57
  %31 = load i32, i32* @y.58
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %29, %originalBB1alteredBB
  %38 = load i64, i64* %19, align 8, !dbg !3520
  %39 = icmp ult i64 %38, 10, !dbg !3522
  %40 = load i32, i32* @x.57
  %41 = load i32, i32* @y.58
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %39, label %48, label %134, !dbg !3523

48:                                               ; preds = %originalBBpart24
  %49 = load i32, i32* @x.57
  %50 = load i32, i32* @y.58
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load %struct.__va_list_tag*, %struct.__va_list_tag** %18, align 8, !dbg !3524
  %58 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 0, !dbg !3524
  %59 = load i32, i32* %58, align 8, !dbg !3524
  %60 = icmp ule i32 %59, 40, !dbg !3524
  %61 = load i32, i32* @x.57
  %62 = load i32, i32* @y.58
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %60, label %69, label %91, !dbg !3524

69:                                               ; preds = %originalBBpart28
  %70 = load i32, i32* @x.57
  %71 = load i32, i32* @y.58
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %69, %originalBB10alteredBB
  %78 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 3, !dbg !3524
  %79 = load i8*, i8** %78, align 8, !dbg !3524
  %80 = getelementptr i8, i8* %79, i32 %59, !dbg !3524
  %81 = bitcast i8* %80 to i8**, !dbg !3524
  %82 = add i32 %59, 8, !dbg !3524
  store i32 %82, i32* %58, align 8, !dbg !3524
  %83 = load i32, i32* @x.57
  %84 = load i32, i32* @y.58
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBBpart218, label %originalBB10alteredBB

originalBBpart218:                                ; preds = %originalBB10
  br label %112, !dbg !3524

91:                                               ; preds = %originalBBpart28
  %92 = load i32, i32* @x.57
  %93 = load i32, i32* @y.58
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBB20, label %originalBB20alteredBB

originalBB20:                                     ; preds = %91, %originalBB20alteredBB
  %100 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 2, !dbg !3524
  %101 = load i8*, i8** %100, align 8, !dbg !3524
  %102 = bitcast i8* %101 to i8**, !dbg !3524
  %103 = getelementptr i8, i8* %101, i32 8, !dbg !3524
  store i8* %103, i8** %100, align 8, !dbg !3524
  %104 = load i32, i32* @x.57
  %105 = load i32, i32* @y.58
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBBpart222, label %originalBB20alteredBB

originalBBpart222:                                ; preds = %originalBB20
  br label %112, !dbg !3524

112:                                              ; preds = %originalBBpart222, %originalBBpart218
  %113 = phi i8** [ %81, %originalBBpart218 ], [ %102, %originalBBpart222 ], !dbg !3524
  %114 = load i32, i32* @x.57
  %115 = load i32, i32* @y.58
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBB24, label %originalBB24alteredBB

originalBB24:                                     ; preds = %112, %originalBB24alteredBB
  %122 = load i8*, i8** %113, align 8, !dbg !3524
  %123 = load i64, i64* %19, align 8, !dbg !3525
  %124 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 %123, !dbg !3526
  store i8* %122, i8** %124, align 8, !dbg !3527
  %125 = icmp ne i8* %122, null, !dbg !3528
  %126 = load i32, i32* @x.57
  %127 = load i32, i32* @y.58
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBBpart227, label %originalBB24alteredBB

originalBBpart227:                                ; preds = %originalBB24
  br label %134

134:                                              ; preds = %originalBBpart227, %originalBBpart24
  %135 = phi i1 [ false, %originalBBpart24 ], [ %125, %originalBBpart227 ], !dbg !3529
  %136 = load i32, i32* @x.57
  %137 = load i32, i32* @y.58
  %138 = sub i32 %136, 1
  %139 = mul i32 %136, %138
  %140 = urem i32 %139, 2
  %141 = icmp eq i32 %140, 0
  %142 = icmp slt i32 %137, 10
  %143 = or i1 %141, %142
  br i1 %143, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %134, %originalBB29alteredBB
  %144 = load i32, i32* @x.57
  %145 = load i32, i32* @y.58
  %146 = sub i32 %144, 1
  %147 = mul i32 %144, %146
  %148 = urem i32 %147, 2
  %149 = icmp eq i32 %148, 0
  %150 = icmp slt i32 %145, 10
  %151 = or i1 %149, %150
  br i1 %151, label %originalBBpart231, label %originalBB29alteredBB

originalBBpart231:                                ; preds = %originalBB29
  br i1 %135, label %152, label %188, !dbg !3530

152:                                              ; preds = %originalBBpart231
  %153 = load i32, i32* @x.57
  %154 = load i32, i32* @y.58
  %155 = sub i32 %153, 1
  %156 = mul i32 %153, %155
  %157 = urem i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = icmp slt i32 %154, 10
  %160 = or i1 %158, %159
  br i1 %160, label %originalBB33, label %originalBB33alteredBB

originalBB33:                                     ; preds = %152, %originalBB33alteredBB
  %161 = load i32, i32* @x.57
  %162 = load i32, i32* @y.58
  %163 = sub i32 %161, 1
  %164 = mul i32 %161, %163
  %165 = urem i32 %164, 2
  %166 = icmp eq i32 %165, 0
  %167 = icmp slt i32 %162, 10
  %168 = or i1 %166, %167
  br i1 %168, label %originalBBpart235, label %originalBB33alteredBB

originalBBpart235:                                ; preds = %originalBB33
  br label %169, !dbg !3530

169:                                              ; preds = %originalBBpart235
  %170 = load i32, i32* @x.57
  %171 = load i32, i32* @y.58
  %172 = sub i32 %170, 1
  %173 = mul i32 %170, %172
  %174 = urem i32 %173, 2
  %175 = icmp eq i32 %174, 0
  %176 = icmp slt i32 %171, 10
  %177 = or i1 %175, %176
  br i1 %177, label %originalBB37, label %originalBB37alteredBB

originalBB37:                                     ; preds = %169, %originalBB37alteredBB
  %178 = load i64, i64* %19, align 8, !dbg !3531
  %179 = add i64 %178, 1, !dbg !3531
  store i64 %179, i64* %19, align 8, !dbg !3531
  %180 = load i32, i32* @x.57
  %181 = load i32, i32* @y.58
  %182 = sub i32 %180, 1
  %183 = mul i32 %180, %182
  %184 = urem i32 %183, 2
  %185 = icmp eq i32 %184, 0
  %186 = icmp slt i32 %181, 10
  %187 = or i1 %185, %186
  br i1 %187, label %originalBBpart250, label %originalBB37alteredBB

originalBBpart250:                                ; preds = %originalBB37
  br label %29, !dbg !3532, !llvm.loop !3533

188:                                              ; preds = %originalBBpart231
  %189 = load i32, i32* @x.57
  %190 = load i32, i32* @y.58
  %191 = sub i32 %189, 1
  %192 = mul i32 %189, %191
  %193 = urem i32 %192, 2
  %194 = icmp eq i32 %193, 0
  %195 = icmp slt i32 %190, 10
  %196 = or i1 %194, %195
  br i1 %196, label %originalBB52, label %originalBB52alteredBB

originalBB52:                                     ; preds = %188, %originalBB52alteredBB
  %197 = load %struct._IO_FILE*, %struct._IO_FILE** %14, align 8, !dbg !3535
  %198 = load i8*, i8** %15, align 8, !dbg !3536
  %199 = load i8*, i8** %16, align 8, !dbg !3537
  %200 = load i8*, i8** %17, align 8, !dbg !3538
  %201 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 0, !dbg !3539
  %202 = load i64, i64* %19, align 8, !dbg !3540
  call void @version_etc_arn(%struct._IO_FILE* %197, i8* %198, i8* %199, i8* %200, i8** %201, i64 %202), !dbg !3541
  %203 = load i32, i32* @x.57
  %204 = load i32, i32* @y.58
  %205 = sub i32 %203, 1
  %206 = mul i32 %203, %205
  %207 = urem i32 %206, 2
  %208 = icmp eq i32 %207, 0
  %209 = icmp slt i32 %204, 10
  %210 = or i1 %208, %209
  br i1 %210, label %originalBBpart254, label %originalBB52alteredBB

originalBBpart254:                                ; preds = %originalBB52
  ret void, !dbg !3542

originalBBalteredBB:                              ; preds = %originalBB, %5
  %211 = alloca %struct._IO_FILE*, align 8
  %212 = alloca i8*, align 8
  %213 = alloca i8*, align 8
  %214 = alloca i8*, align 8
  %215 = alloca %struct.__va_list_tag*, align 8
  %216 = alloca i64, align 8
  %217 = alloca [10 x i8*], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %211, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %211, metadata !3543, metadata !DIExpression()), !dbg !3503
  store i8* %1, i8** %212, align 8
  call void @llvm.dbg.declare(metadata i8** %212, metadata !3589, metadata !DIExpression()), !dbg !3505
  store i8* %2, i8** %213, align 8
  call void @llvm.dbg.declare(metadata i8** %213, metadata !3590, metadata !DIExpression()), !dbg !3507
  store i8* %3, i8** %214, align 8
  call void @llvm.dbg.declare(metadata i8** %214, metadata !3591, metadata !DIExpression()), !dbg !3509
  store %struct.__va_list_tag* %4, %struct.__va_list_tag** %215, align 8
  call void @llvm.dbg.declare(metadata %struct.__va_list_tag** %215, metadata !3592, metadata !DIExpression()), !dbg !3511
  call void @llvm.dbg.declare(metadata i64* %216, metadata !3593, metadata !DIExpression()), !dbg !3513
  call void @llvm.dbg.declare(metadata [10 x i8*]* %217, metadata !3594, metadata !DIExpression()), !dbg !3516
  store i64 0, i64* %216, align 8, !dbg !3517
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %29
  %218 = load i64, i64* %19, align 8, !dbg !3520
  %219 = icmp ult i64 %218, 10, !dbg !3522
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  %220 = load %struct.__va_list_tag*, %struct.__va_list_tag** %18, align 8, !dbg !3524
  %221 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %220, i32 0, i32 0, !dbg !3524
  %222 = load i32, i32* %221, align 8, !dbg !3524
  %223 = icmp ule i32 %222, 40, !dbg !3524
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %69
  %224 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 3, !dbg !3524
  %225 = load i8*, i8** %224, align 8, !dbg !3524
  %226 = getelementptr i8, i8* %225, i32 %59, !dbg !3524
  %227 = bitcast i8* %226 to i8**, !dbg !3524
  %_ = shl i32 %59, 8
  %_11 = sub i32 %59, 8
  %gen = mul i32 %_11, 8
  %_12 = shl i32 %59, 8
  %_13 = sub i32 0, %59
  %gen14 = add i32 %_13, 8
  %_15 = shl i32 %59, 8
  %_16 = shl i32 %59, 8
  %228 = add i32 %59, 8, !dbg !3524
  store i32 %228, i32* %58, align 8, !dbg !3524
  br label %originalBB10

originalBB20alteredBB:                            ; preds = %originalBB20, %91
  %229 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 2, !dbg !3524
  %230 = load i8*, i8** %229, align 8, !dbg !3524
  %231 = bitcast i8* %230 to i8**, !dbg !3524
  %232 = getelementptr i8, i8* %230, i32 8, !dbg !3524
  store i8* %232, i8** %229, align 8, !dbg !3524
  br label %originalBB20

originalBB24alteredBB:                            ; preds = %originalBB24, %112
  %233 = load i8*, i8** %113, align 8, !dbg !3524
  %234 = load i64, i64* %19, align 8, !dbg !3525
  %235 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 %234, !dbg !3526
  store i8* %233, i8** %235, align 8, !dbg !3527
  %236 = icmp ne i8* %233, null, !dbg !3528
  br label %originalBB24

originalBB29alteredBB:                            ; preds = %originalBB29, %134
  br label %originalBB29

originalBB33alteredBB:                            ; preds = %originalBB33, %152
  br label %originalBB33

originalBB37alteredBB:                            ; preds = %originalBB37, %169
  %237 = load i64, i64* %19, align 8, !dbg !3531
  %_38 = sub i64 0, %237
  %gen39 = add i64 %_38, 1
  %_40 = sub i64 0, %237
  %gen41 = add i64 %_40, 1
  %_42 = sub i64 0, %237
  %gen43 = add i64 %_42, 1
  %_44 = sub i64 %237, 1
  %gen45 = mul i64 %_44, 1
  %_46 = shl i64 %237, 1
  %_47 = sub i64 0, %237
  %gen48 = add i64 %_47, 1
  %238 = add i64 %237, 1, !dbg !3531
  store i64 %238, i64* %19, align 8, !dbg !3531
  br label %originalBB37

originalBB52alteredBB:                            ; preds = %originalBB52, %188
  %239 = load %struct._IO_FILE*, %struct._IO_FILE** %14, align 8, !dbg !3535
  %240 = load i8*, i8** %15, align 8, !dbg !3536
  %241 = load i8*, i8** %16, align 8, !dbg !3537
  %242 = load i8*, i8** %17, align 8, !dbg !3538
  %243 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 0, !dbg !3539
  %244 = load i64, i64* %19, align 8, !dbg !3540
  call void @version_etc_arn(%struct._IO_FILE* %239, i8* %240, i8* %241, i8* %242, i8** %243, i64 %244), !dbg !3541
  br label %originalBB52
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc(%struct._IO_FILE*, i8*, i8*, i8*, ...) #4 !dbg !3595 {
  %5 = load i32, i32* @x.59
  %6 = load i32, i32* @y.60
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %4, %originalBBalteredBB
  %13 = alloca %struct._IO_FILE*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca [1 x %struct.__va_list_tag], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %13, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %13, metadata !3598, metadata !DIExpression()), !dbg !3599
  store i8* %1, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !3600, metadata !DIExpression()), !dbg !3601
  store i8* %2, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !3602, metadata !DIExpression()), !dbg !3603
  store i8* %3, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !3604, metadata !DIExpression()), !dbg !3605
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %17, metadata !3606, metadata !DIExpression()), !dbg !3613
  %18 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %17, i64 0, i64 0, !dbg !3614
  %19 = bitcast %struct.__va_list_tag* %18 to i8*, !dbg !3614
  call void @llvm.va_start(i8* %19), !dbg !3614
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3615
  %21 = load i8*, i8** %14, align 8, !dbg !3616
  %22 = load i8*, i8** %15, align 8, !dbg !3617
  %23 = load i8*, i8** %16, align 8, !dbg !3618
  %24 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %17, i64 0, i64 0, !dbg !3619
  call void @version_etc_va(%struct._IO_FILE* %20, i8* %21, i8* %22, i8* %23, %struct.__va_list_tag* %24), !dbg !3620
  %25 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %17, i64 0, i64 0, !dbg !3621
  %26 = bitcast %struct.__va_list_tag* %25 to i8*, !dbg !3621
  call void @llvm.va_end(i8* %26), !dbg !3621
  %27 = load i32, i32* @x.59
  %28 = load i32, i32* @y.60
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret void, !dbg !3622

originalBBalteredBB:                              ; preds = %originalBB, %4
  %35 = alloca %struct._IO_FILE*, align 8
  %36 = alloca i8*, align 8
  %37 = alloca i8*, align 8
  %38 = alloca i8*, align 8
  %39 = alloca [1 x %struct.__va_list_tag], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %35, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %35, metadata !3623, metadata !DIExpression()), !dbg !3599
  store i8* %1, i8** %36, align 8
  call void @llvm.dbg.declare(metadata i8** %36, metadata !3662, metadata !DIExpression()), !dbg !3601
  store i8* %2, i8** %37, align 8
  call void @llvm.dbg.declare(metadata i8** %37, metadata !3663, metadata !DIExpression()), !dbg !3603
  store i8* %3, i8** %38, align 8
  call void @llvm.dbg.declare(metadata i8** %38, metadata !3664, metadata !DIExpression()), !dbg !3605
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %39, metadata !3665, metadata !DIExpression()), !dbg !3613
  %40 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %39, i64 0, i64 0, !dbg !3614
  %41 = bitcast %struct.__va_list_tag* %40 to i8*, !dbg !3614
  call void @llvm.va_start(i8* %41), !dbg !3614
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** %35, align 8, !dbg !3615
  %43 = load i8*, i8** %36, align 8, !dbg !3616
  %44 = load i8*, i8** %37, align 8, !dbg !3617
  %45 = load i8*, i8** %38, align 8, !dbg !3618
  %46 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %39, i64 0, i64 0, !dbg !3619
  call void @version_etc_va(%struct._IO_FILE* %42, i8* %43, i8* %44, i8* %45, %struct.__va_list_tag* %46), !dbg !3620
  %47 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %39, i64 0, i64 0, !dbg !3621
  %48 = bitcast %struct.__va_list_tag* %47 to i8*, !dbg !3621
  call void @llvm.va_end(i8* %48), !dbg !3621
  br label %originalBB
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #10

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #10

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xnmalloc(i64, i64) #4 !dbg !3676 {
  %3 = load i32, i32* @x.61
  %4 = load i32, i32* @y.62
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  store i64 %0, i64* %11, align 8
  call void @llvm.dbg.declare(metadata i64* %11, metadata !3680, metadata !DIExpression()), !dbg !3681
  store i64 %1, i64* %12, align 8
  call void @llvm.dbg.declare(metadata i64* %12, metadata !3682, metadata !DIExpression()), !dbg !3683
  %13 = load i64, i64* %12, align 8, !dbg !3684
  %14 = udiv i64 9223372036854775807, %13, !dbg !3684
  %15 = load i64, i64* %11, align 8, !dbg !3684
  %16 = icmp ult i64 %14, %15, !dbg !3684
  %17 = load i32, i32* @x.61
  %18 = load i32, i32* @y.62
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %16, label %25, label %42, !dbg !3686

25:                                               ; preds = %originalBBpart2
  %26 = load i32, i32* @x.61
  %27 = load i32, i32* @y.62
  %28 = sub i32 %26, 1
  %29 = mul i32 %26, %28
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %31, %32
  br i1 %33, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %25, %originalBB1alteredBB
  call void @xalloc_die() #14, !dbg !3687
  %34 = load i32, i32* @x.61
  %35 = load i32, i32* @y.62
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  unreachable, !dbg !3687

42:                                               ; preds = %originalBBpart2
  %43 = load i32, i32* @x.61
  %44 = load i32, i32* @y.62
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %42, %originalBB6alteredBB
  %51 = load i64, i64* %11, align 8, !dbg !3688
  %52 = load i64, i64* %12, align 8, !dbg !3689
  %53 = mul i64 %51, %52, !dbg !3690
  %54 = call noalias i8* @xmalloc(i64 %53), !dbg !3691
  %55 = load i32, i32* @x.61
  %56 = load i32, i32* @y.62
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBBpart218, label %originalBB6alteredBB

originalBBpart218:                                ; preds = %originalBB6
  ret i8* %54, !dbg !3692

originalBBalteredBB:                              ; preds = %originalBB, %2
  %63 = alloca i64, align 8
  %64 = alloca i64, align 8
  store i64 %0, i64* %63, align 8
  call void @llvm.dbg.declare(metadata i64* %63, metadata !3693, metadata !DIExpression()), !dbg !3681
  store i64 %1, i64* %64, align 8
  call void @llvm.dbg.declare(metadata i64* %64, metadata !3696, metadata !DIExpression()), !dbg !3683
  %65 = load i64, i64* %64, align 8, !dbg !3684
  %_ = sub i64 9223372036854775807, %65
  %gen = mul i64 %_, %65
  %66 = udiv i64 9223372036854775807, %65, !dbg !3684
  %67 = load i64, i64* %63, align 8, !dbg !3684
  %68 = icmp ult i64 %66, %67, !dbg !3684
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %25
  call void @xalloc_die() #14, !dbg !3687
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %42
  %69 = load i64, i64* %11, align 8, !dbg !3688
  %70 = load i64, i64* %12, align 8, !dbg !3689
  %_7 = sub i64 %69, %70
  %gen8 = mul i64 %_7, %70
  %_9 = sub i64 0, %69
  %gen10 = add i64 %_9, %70
  %_11 = sub i64 0, %69
  %gen12 = add i64 %_11, %70
  %_13 = sub i64 0, %69
  %gen14 = add i64 %_13, %70
  %_15 = sub i64 %69, %70
  %gen16 = mul i64 %_15, %70
  %71 = mul i64 %69, %70, !dbg !3690
  %72 = call noalias i8* @xmalloc(i64 %71), !dbg !3691
  br label %originalBB6
}

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xmalloc(i64) #4 !dbg !3697 {
  %2 = load i32, i32* @x.63
  %3 = load i32, i32* @y.64
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i64, align 8
  %11 = alloca i8*, align 8
  store i64 %0, i64* %10, align 8
  call void @llvm.dbg.declare(metadata i64* %10, metadata !3701, metadata !DIExpression()), !dbg !3702
  call void @llvm.dbg.declare(metadata i8** %11, metadata !3703, metadata !DIExpression()), !dbg !3704
  %12 = load i64, i64* %10, align 8, !dbg !3705
  %13 = call noalias i8* @malloc(i64 %12) #10, !dbg !3706
  store i8* %13, i8** %11, align 8, !dbg !3704
  %14 = load i8*, i8** %11, align 8, !dbg !3707
  %15 = icmp ne i8* %14, null, !dbg !3707
  %16 = load i32, i32* @x.63
  %17 = load i32, i32* @y.64
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %60, label %24, !dbg !3709

24:                                               ; preds = %originalBBpart2
  %25 = load i32, i32* @x.63
  %26 = load i32, i32* @y.64
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %24, %originalBB1alteredBB
  %33 = load i64, i64* %10, align 8, !dbg !3710
  %34 = icmp ne i64 %33, 0, !dbg !3711
  %35 = load i32, i32* @x.63
  %36 = load i32, i32* @y.64
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %34, label %43, label %60, !dbg !3712

43:                                               ; preds = %originalBBpart24
  %44 = load i32, i32* @x.63
  %45 = load i32, i32* @y.64
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %43, %originalBB6alteredBB
  call void @xalloc_die() #14, !dbg !3713
  %52 = load i32, i32* @x.63
  %53 = load i32, i32* @y.64
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  unreachable, !dbg !3713

60:                                               ; preds = %originalBBpart24, %originalBBpart2
  %61 = load i32, i32* @x.63
  %62 = load i32, i32* @y.64
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %60, %originalBB10alteredBB
  %69 = load i8*, i8** %11, align 8, !dbg !3714
  %70 = load i32, i32* @x.63
  %71 = load i32, i32* @y.64
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  ret i8* %69, !dbg !3715

originalBBalteredBB:                              ; preds = %originalBB, %1
  %78 = alloca i64, align 8
  %79 = alloca i8*, align 8
  store i64 %0, i64* %78, align 8
  call void @llvm.dbg.declare(metadata i64* %78, metadata !3716, metadata !DIExpression()), !dbg !3702
  call void @llvm.dbg.declare(metadata i8** %79, metadata !3719, metadata !DIExpression()), !dbg !3704
  %80 = load i64, i64* %78, align 8, !dbg !3705
  %81 = call noalias i8* @malloc(i64 %80) #10, !dbg !3706
  store i8* %81, i8** %79, align 8, !dbg !3704
  %82 = load i8*, i8** %79, align 8, !dbg !3707
  %83 = icmp ne i8* %82, null, !dbg !3707
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %24
  %84 = load i64, i64* %10, align 8, !dbg !3710
  %85 = icmp ne i64 %84, 0, !dbg !3711
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %43
  call void @xalloc_die() #14, !dbg !3713
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %60
  %86 = load i8*, i8** %11, align 8, !dbg !3714
  br label %originalBB10
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @xrealloc(i8*, i64) #4 !dbg !3720 {
  %3 = load i32, i32* @x.65
  %4 = load i32, i32* @y.66
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !3723, metadata !DIExpression()), !dbg !3724
  store i64 %1, i64* %13, align 8
  call void @llvm.dbg.declare(metadata i64* %13, metadata !3725, metadata !DIExpression()), !dbg !3726
  %14 = load i64, i64* %13, align 8, !dbg !3727
  %15 = icmp ne i64 %14, 0, !dbg !3727
  %16 = load i32, i32* @x.65
  %17 = load i32, i32* @y.66
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %61, label %24, !dbg !3729

24:                                               ; preds = %originalBBpart2
  %25 = load i32, i32* @x.65
  %26 = load i32, i32* @y.66
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %24, %originalBB1alteredBB
  %33 = load i8*, i8** %12, align 8, !dbg !3730
  %34 = icmp ne i8* %33, null, !dbg !3730
  %35 = load i32, i32* @x.65
  %36 = load i32, i32* @y.66
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %34, label %43, label %61, !dbg !3731

43:                                               ; preds = %originalBBpart24
  %44 = load i32, i32* @x.65
  %45 = load i32, i32* @y.66
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %43, %originalBB6alteredBB
  %52 = load i8*, i8** %12, align 8, !dbg !3732
  call void @free(i8* %52) #10, !dbg !3734
  store i8* null, i8** %11, align 8, !dbg !3735
  %53 = load i32, i32* @x.65
  %54 = load i32, i32* @y.66
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %137, !dbg !3735

61:                                               ; preds = %originalBBpart24, %originalBBpart2
  %62 = load i32, i32* @x.65
  %63 = load i32, i32* @y.66
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %61, %originalBB10alteredBB
  %70 = load i8*, i8** %12, align 8, !dbg !3736
  %71 = load i64, i64* %13, align 8, !dbg !3737
  %72 = call i8* @realloc(i8* %70, i64 %71) #10, !dbg !3738
  store i8* %72, i8** %12, align 8, !dbg !3739
  %73 = load i8*, i8** %12, align 8, !dbg !3740
  %74 = icmp ne i8* %73, null, !dbg !3740
  %75 = load i32, i32* @x.65
  %76 = load i32, i32* @y.66
  %77 = sub i32 %75, 1
  %78 = mul i32 %75, %77
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %80, %81
  br i1 %82, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %74, label %119, label %83, !dbg !3742

83:                                               ; preds = %originalBBpart212
  %84 = load i32, i32* @x.65
  %85 = load i32, i32* @y.66
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %83, %originalBB14alteredBB
  %92 = load i64, i64* %13, align 8, !dbg !3743
  %93 = icmp ne i64 %92, 0, !dbg !3743
  %94 = load i32, i32* @x.65
  %95 = load i32, i32* @y.66
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %93, label %102, label %119, !dbg !3744

102:                                              ; preds = %originalBBpart216
  %103 = load i32, i32* @x.65
  %104 = load i32, i32* @y.66
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %102, %originalBB18alteredBB
  call void @xalloc_die() #14, !dbg !3745
  %111 = load i32, i32* @x.65
  %112 = load i32, i32* @y.66
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  unreachable, !dbg !3745

119:                                              ; preds = %originalBBpart216, %originalBBpart212
  %120 = load i32, i32* @x.65
  %121 = load i32, i32* @y.66
  %122 = sub i32 %120, 1
  %123 = mul i32 %120, %122
  %124 = urem i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %125, %126
  br i1 %127, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %119, %originalBB22alteredBB
  %128 = load i8*, i8** %12, align 8, !dbg !3746
  store i8* %128, i8** %11, align 8, !dbg !3747
  %129 = load i32, i32* @x.65
  %130 = load i32, i32* @y.66
  %131 = sub i32 %129, 1
  %132 = mul i32 %129, %131
  %133 = urem i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %130, 10
  %136 = or i1 %134, %135
  br i1 %136, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %137, !dbg !3747

137:                                              ; preds = %originalBBpart224, %originalBBpart28
  %138 = load i32, i32* @x.65
  %139 = load i32, i32* @y.66
  %140 = sub i32 %138, 1
  %141 = mul i32 %138, %140
  %142 = urem i32 %141, 2
  %143 = icmp eq i32 %142, 0
  %144 = icmp slt i32 %139, 10
  %145 = or i1 %143, %144
  br i1 %145, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %137, %originalBB26alteredBB
  %146 = load i8*, i8** %11, align 8, !dbg !3748
  %147 = load i32, i32* @x.65
  %148 = load i32, i32* @y.66
  %149 = sub i32 %147, 1
  %150 = mul i32 %147, %149
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %152, %153
  br i1 %154, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  ret i8* %146, !dbg !3748

originalBBalteredBB:                              ; preds = %originalBB, %2
  %155 = alloca i8*, align 8
  %156 = alloca i8*, align 8
  %157 = alloca i64, align 8
  store i8* %0, i8** %156, align 8
  call void @llvm.dbg.declare(metadata i8** %156, metadata !3749, metadata !DIExpression()), !dbg !3724
  store i64 %1, i64* %157, align 8
  call void @llvm.dbg.declare(metadata i64* %157, metadata !3752, metadata !DIExpression()), !dbg !3726
  %158 = load i64, i64* %157, align 8, !dbg !3727
  %159 = icmp ne i64 %158, 0, !dbg !3727
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %24
  %160 = load i8*, i8** %12, align 8, !dbg !3730
  %161 = icmp ne i8* %160, null, !dbg !3730
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %43
  %162 = load i8*, i8** %12, align 8, !dbg !3732
  call void @free(i8* %162) #10, !dbg !3734
  store i8* null, i8** %11, align 8, !dbg !3735
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %61
  %163 = load i8*, i8** %12, align 8, !dbg !3736
  %164 = load i64, i64* %13, align 8, !dbg !3737
  %165 = call i8* @realloc(i8* %163, i64 %164) #10, !dbg !3738
  store i8* %165, i8** %12, align 8, !dbg !3739
  %166 = load i8*, i8** %12, align 8, !dbg !3740
  %167 = icmp ne i8* %166, null, !dbg !3740
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %83
  %168 = load i64, i64* %13, align 8, !dbg !3743
  %169 = icmp ne i64 %168, 0, !dbg !3743
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %102
  call void @xalloc_die() #14, !dbg !3745
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %119
  %170 = load i8*, i8** %12, align 8, !dbg !3746
  store i8* %170, i8** %11, align 8, !dbg !3747
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %137
  %171 = load i8*, i8** %11, align 8, !dbg !3748
  br label %originalBB26
}

; Function Attrs: nounwind
declare dso_local i8* @realloc(i8*, i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xcharalloc(i64) #4 !dbg !3753 {
  %2 = load i32, i32* @x.67
  %3 = load i32, i32* @y.68
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i64, align 8
  store i64 %0, i64* %10, align 8
  call void @llvm.dbg.declare(metadata i64* %10, metadata !3754, metadata !DIExpression()), !dbg !3755
  %11 = load i64, i64* %10, align 8, !dbg !3756
  %12 = call noalias i8* @xmalloc(i64 %11), !dbg !3756
  %13 = load i32, i32* @x.67
  %14 = load i32, i32* @y.68
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %12, !dbg !3757

originalBBalteredBB:                              ; preds = %originalBB, %1
  %21 = alloca i64, align 8
  store i64 %0, i64* %21, align 8
  call void @llvm.dbg.declare(metadata i64* %21, metadata !3758, metadata !DIExpression()), !dbg !3755
  %22 = load i64, i64* %21, align 8, !dbg !3756
  %23 = call noalias i8* @xmalloc(i64 %22), !dbg !3756
  br label %originalBB
}

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @xalloc_die() #0 !dbg !3761 {
  %1 = load i32, i32* @x.69
  %2 = load i32, i32* @y.70
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = load volatile i32, i32* @exit_failure, align 4, !dbg !3763
  %10 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.111, i64 0, i64 0)) #10, !dbg !3764
  call void (i32, i32, i8*, ...) @error(i32 %9, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.112, i64 0, i64 0), i8* %10), !dbg !3765
  call void @abort() #12, !dbg !3766
  %11 = load i32, i32* @x.69
  %12 = load i32, i32* @y.70
  %13 = sub i32 %11, 1
  %14 = mul i32 %11, %13
  %15 = urem i32 %14, 2
  %16 = icmp eq i32 %15, 0
  %17 = icmp slt i32 %12, 10
  %18 = or i1 %16, %17
  br i1 %18, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  unreachable, !dbg !3766

originalBBalteredBB:                              ; preds = %originalBB, %0
  %19 = load volatile i32, i32* @exit_failure, align 4, !dbg !3763
  %20 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.111, i64 0, i64 0)) #10, !dbg !3764
  call void (i32, i32, i8*, ...) @error(i32 %19, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.112, i64 0, i64 0), i8* %20), !dbg !3765
  call void @abort() #12, !dbg !3766
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @xgetcwd() #4 !dbg !3767 {
  %1 = load i32, i32* @x.71
  %2 = load i32, i32* @y.72
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %9, metadata !3769, metadata !DIExpression()), !dbg !3770
  %10 = call i8* @getcwd(i8* null, i64 0) #10, !dbg !3771
  store i8* %10, i8** %9, align 8, !dbg !3770
  %11 = load i8*, i8** %9, align 8, !dbg !3772
  %12 = icmp ne i8* %11, null, !dbg !3772
  %13 = load i32, i32* @x.71
  %14 = load i32, i32* @y.72
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %58, label %21, !dbg !3774

21:                                               ; preds = %originalBBpart2
  %22 = load i32, i32* @x.71
  %23 = load i32, i32* @y.72
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  %30 = call i32* @__errno_location() #15, !dbg !3775
  %31 = load i32, i32* %30, align 4, !dbg !3775
  %32 = icmp eq i32 %31, 12, !dbg !3776
  %33 = load i32, i32* @x.71
  %34 = load i32, i32* @y.72
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %32, label %41, label %58, !dbg !3777

41:                                               ; preds = %originalBBpart24
  %42 = load i32, i32* @x.71
  %43 = load i32, i32* @y.72
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %41, %originalBB6alteredBB
  call void @xalloc_die() #14, !dbg !3778
  %50 = load i32, i32* @x.71
  %51 = load i32, i32* @y.72
  %52 = sub i32 %50, 1
  %53 = mul i32 %50, %52
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %55, %56
  br i1 %57, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  unreachable, !dbg !3778

58:                                               ; preds = %originalBBpart24, %originalBBpart2
  %59 = load i32, i32* @x.71
  %60 = load i32, i32* @y.72
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %58, %originalBB10alteredBB
  %67 = load i8*, i8** %9, align 8, !dbg !3779
  %68 = load i32, i32* @x.71
  %69 = load i32, i32* @y.72
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  ret i8* %67, !dbg !3780

originalBBalteredBB:                              ; preds = %originalBB, %0
  %76 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %76, metadata !3781, metadata !DIExpression()), !dbg !3770
  %77 = call i8* @getcwd(i8* null, i64 0) #10, !dbg !3771
  store i8* %77, i8** %76, align 8, !dbg !3770
  %78 = load i8*, i8** %76, align 8, !dbg !3772
  %79 = icmp ne i8* %78, null, !dbg !3772
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  %80 = call i32* @__errno_location() #15, !dbg !3775
  %81 = load i32, i32* %80, align 4, !dbg !3775
  %82 = icmp eq i32 %81, 12, !dbg !3776
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %41
  call void @xalloc_die() #14, !dbg !3778
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %58
  %83 = load i8*, i8** %9, align 8, !dbg !3779
  br label %originalBB10
}

; Function Attrs: nounwind
declare dso_local i8* @getcwd(i8*, i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @rpl_mbrtowc(i32*, i8*, i64, %struct.__mbstate_t*) #4 !dbg !3784 {
  %5 = load i32, i32* @x.73
  %6 = load i32, i32* @y.74
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %4, %originalBBalteredBB
  %13 = alloca i64, align 8
  %14 = alloca i32*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i64, align 8
  %17 = alloca %struct.__mbstate_t*, align 8
  %18 = alloca i64, align 8
  %19 = alloca i32, align 4
  %20 = alloca i8, align 1
  store i32* %0, i32** %14, align 8
  call void @llvm.dbg.declare(metadata i32** %14, metadata !3800, metadata !DIExpression()), !dbg !3801
  store i8* %1, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !3802, metadata !DIExpression()), !dbg !3803
  store i64 %2, i64* %16, align 8
  call void @llvm.dbg.declare(metadata i64* %16, metadata !3804, metadata !DIExpression()), !dbg !3805
  store %struct.__mbstate_t* %3, %struct.__mbstate_t** %17, align 8
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t** %17, metadata !3806, metadata !DIExpression()), !dbg !3807
  call void @llvm.dbg.declare(metadata i64* %18, metadata !3808, metadata !DIExpression()), !dbg !3809
  call void @llvm.dbg.declare(metadata i32* %19, metadata !3810, metadata !DIExpression()), !dbg !3811
  %21 = load i32*, i32** %14, align 8, !dbg !3812
  %22 = icmp ne i32* %21, null, !dbg !3812
  %23 = load i32, i32* @x.73
  %24 = load i32, i32* @y.74
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %48, label %31, !dbg !3814

31:                                               ; preds = %originalBBpart2
  %32 = load i32, i32* @x.73
  %33 = load i32, i32* @y.74
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  store i32* %19, i32** %14, align 8, !dbg !3815
  %40 = load i32, i32* @x.73
  %41 = load i32, i32* @y.74
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %48, !dbg !3816

48:                                               ; preds = %originalBBpart24, %originalBBpart2
  %49 = load i32, i32* @x.73
  %50 = load i32, i32* @y.74
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load i32*, i32** %14, align 8, !dbg !3817
  %58 = load i8*, i8** %15, align 8, !dbg !3818
  %59 = load i64, i64* %16, align 8, !dbg !3819
  %60 = load %struct.__mbstate_t*, %struct.__mbstate_t** %17, align 8, !dbg !3820
  %61 = call i64 @mbrtowc(i32* %57, i8* %58, i64 %59, %struct.__mbstate_t* %60) #10, !dbg !3821
  store i64 %61, i64* %18, align 8, !dbg !3822
  %62 = load i64, i64* %18, align 8, !dbg !3823
  %63 = icmp ule i64 -2, %62, !dbg !3825
  %64 = load i32, i32* @x.73
  %65 = load i32, i32* @y.74
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %63, label %72, label %131, !dbg !3826

72:                                               ; preds = %originalBBpart28
  %73 = load i32, i32* @x.73
  %74 = load i32, i32* @y.74
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %72, %originalBB10alteredBB
  %81 = load i64, i64* %16, align 8, !dbg !3827
  %82 = icmp ne i64 %81, 0, !dbg !3828
  %83 = load i32, i32* @x.73
  %84 = load i32, i32* @y.74
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %82, label %91, label %131, !dbg !3829

91:                                               ; preds = %originalBBpart212
  %92 = load i32, i32* @x.73
  %93 = load i32, i32* @y.74
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %91, %originalBB14alteredBB
  %100 = call zeroext i1 @hard_locale(i32 0), !dbg !3830
  %101 = load i32, i32* @x.73
  %102 = load i32, i32* @y.74
  %103 = sub i32 %101, 1
  %104 = mul i32 %101, %103
  %105 = urem i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %102, 10
  %108 = or i1 %106, %107
  br i1 %108, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %100, label %131, label %109, !dbg !3831

109:                                              ; preds = %originalBBpart216
  call void @llvm.dbg.declare(metadata i8* %20, metadata !3832, metadata !DIExpression()), !dbg !3834
  %110 = load i32, i32* @x.73
  %111 = load i32, i32* @y.74
  %112 = sub i32 %110, 1
  %113 = mul i32 %110, %112
  %114 = urem i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %115, %116
  br i1 %117, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %109, %originalBB18alteredBB
  %118 = load i8*, i8** %15, align 8, !dbg !3835
  %119 = load i8, i8* %118, align 1, !dbg !3836
  store i8 %119, i8* %20, align 1, !dbg !3834
  %120 = load i8, i8* %20, align 1, !dbg !3837
  %121 = zext i8 %120 to i32, !dbg !3837
  %122 = load i32*, i32** %14, align 8, !dbg !3838
  store i32 %121, i32* %122, align 4, !dbg !3839
  store i64 1, i64* %13, align 8, !dbg !3840
  %123 = load i32, i32* @x.73
  %124 = load i32, i32* @y.74
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %149, !dbg !3840

131:                                              ; preds = %originalBBpart216, %originalBBpart212, %originalBBpart28
  %132 = load i32, i32* @x.73
  %133 = load i32, i32* @y.74
  %134 = sub i32 %132, 1
  %135 = mul i32 %132, %134
  %136 = urem i32 %135, 2
  %137 = icmp eq i32 %136, 0
  %138 = icmp slt i32 %133, 10
  %139 = or i1 %137, %138
  br i1 %139, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %131, %originalBB22alteredBB
  %140 = load i64, i64* %18, align 8, !dbg !3841
  store i64 %140, i64* %13, align 8, !dbg !3842
  %141 = load i32, i32* @x.73
  %142 = load i32, i32* @y.74
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %149, !dbg !3842

149:                                              ; preds = %originalBBpart224, %originalBBpart220
  %150 = load i32, i32* @x.73
  %151 = load i32, i32* @y.74
  %152 = sub i32 %150, 1
  %153 = mul i32 %150, %152
  %154 = urem i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %155, %156
  br i1 %157, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %149, %originalBB26alteredBB
  %158 = load i64, i64* %13, align 8, !dbg !3843
  %159 = load i32, i32* @x.73
  %160 = load i32, i32* @y.74
  %161 = sub i32 %159, 1
  %162 = mul i32 %159, %161
  %163 = urem i32 %162, 2
  %164 = icmp eq i32 %163, 0
  %165 = icmp slt i32 %160, 10
  %166 = or i1 %164, %165
  br i1 %166, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  ret i64 %158, !dbg !3843

originalBBalteredBB:                              ; preds = %originalBB, %4
  %167 = alloca i64, align 8
  %168 = alloca i32*, align 8
  %169 = alloca i8*, align 8
  %170 = alloca i64, align 8
  %171 = alloca %struct.__mbstate_t*, align 8
  %172 = alloca i64, align 8
  %173 = alloca i32, align 4
  %174 = alloca i8, align 1
  store i32* %0, i32** %168, align 8
  call void @llvm.dbg.declare(metadata i32** %168, metadata !3844, metadata !DIExpression()), !dbg !3801
  store i8* %1, i8** %169, align 8
  call void @llvm.dbg.declare(metadata i8** %169, metadata !3860, metadata !DIExpression()), !dbg !3803
  store i64 %2, i64* %170, align 8
  call void @llvm.dbg.declare(metadata i64* %170, metadata !3861, metadata !DIExpression()), !dbg !3805
  store %struct.__mbstate_t* %3, %struct.__mbstate_t** %171, align 8
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t** %171, metadata !3862, metadata !DIExpression()), !dbg !3807
  call void @llvm.dbg.declare(metadata i64* %172, metadata !3863, metadata !DIExpression()), !dbg !3809
  call void @llvm.dbg.declare(metadata i32* %173, metadata !3864, metadata !DIExpression()), !dbg !3811
  %175 = load i32*, i32** %168, align 8, !dbg !3812
  %176 = icmp ne i32* %175, null, !dbg !3812
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  store i32* %19, i32** %14, align 8, !dbg !3815
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  %177 = load i32*, i32** %14, align 8, !dbg !3817
  %178 = load i8*, i8** %15, align 8, !dbg !3818
  %179 = load i64, i64* %16, align 8, !dbg !3819
  %180 = load %struct.__mbstate_t*, %struct.__mbstate_t** %17, align 8, !dbg !3820
  %181 = call i64 @mbrtowc(i32* %177, i8* %178, i64 %179, %struct.__mbstate_t* %180) #10, !dbg !3821
  store i64 %181, i64* %18, align 8, !dbg !3822
  %182 = load i64, i64* %18, align 8, !dbg !3823
  %183 = icmp ule i64 -2, %182, !dbg !3825
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %72
  %184 = load i64, i64* %16, align 8, !dbg !3827
  %185 = icmp ne i64 %184, 0, !dbg !3828
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %91
  %186 = call zeroext i1 @hard_locale(i32 0), !dbg !3830
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %109
  %187 = load i8*, i8** %15, align 8, !dbg !3835
  %188 = load i8, i8* %187, align 1, !dbg !3836
  store i8 %188, i8* %20, align 1, !dbg !3834
  %189 = load i8, i8* %20, align 1, !dbg !3837
  %190 = zext i8 %189 to i32, !dbg !3837
  %191 = load i32*, i32** %14, align 8, !dbg !3838
  store i32 %190, i32* %191, align 4, !dbg !3839
  store i64 1, i64* %13, align 8, !dbg !3840
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %131
  %192 = load i64, i64* %18, align 8, !dbg !3841
  store i64 %192, i64* %13, align 8, !dbg !3842
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %149
  %193 = load i64, i64* %13, align 8, !dbg !3843
  br label %originalBB26
}

; Function Attrs: nounwind
declare dso_local i64 @mbrtowc(i32*, i8*, i64, %struct.__mbstate_t*) #2

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @c_strcasecmp(i8*, i8*) #11 !dbg !3865 {
  %3 = load i32, i32* @x.75
  %4 = load i32, i32* @y.76
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8, align 1
  %17 = alloca i8, align 1
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !3869, metadata !DIExpression()), !dbg !3870
  store i8* %1, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !3871, metadata !DIExpression()), !dbg !3872
  call void @llvm.dbg.declare(metadata i8** %14, metadata !3873, metadata !DIExpression()), !dbg !3874
  %18 = load i8*, i8** %12, align 8, !dbg !3875
  store i8* %18, i8** %14, align 8, !dbg !3874
  call void @llvm.dbg.declare(metadata i8** %15, metadata !3876, metadata !DIExpression()), !dbg !3877
  %19 = load i8*, i8** %13, align 8, !dbg !3878
  store i8* %19, i8** %15, align 8, !dbg !3877
  call void @llvm.dbg.declare(metadata i8* %16, metadata !3879, metadata !DIExpression()), !dbg !3880
  call void @llvm.dbg.declare(metadata i8* %17, metadata !3881, metadata !DIExpression()), !dbg !3882
  %20 = load i8*, i8** %14, align 8, !dbg !3883
  %21 = load i8*, i8** %15, align 8, !dbg !3885
  %22 = icmp eq i8* %20, %21, !dbg !3886
  %23 = load i32, i32* @x.75
  %24 = load i32, i32* @y.76
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %31, label %48, !dbg !3887

31:                                               ; preds = %originalBBpart2
  %32 = load i32, i32* @x.75
  %33 = load i32, i32* @y.76
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  store i32 0, i32* %11, align 4, !dbg !3888
  %40 = load i32, i32* @x.75
  %41 = load i32, i32* @y.76
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %177, !dbg !3888

48:                                               ; preds = %originalBBpart2
  %49 = load i32, i32* @x.75
  %50 = load i32, i32* @y.76
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load i32, i32* @x.75
  %58 = load i32, i32* @y.76
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %65, !dbg !3889

65:                                               ; preds = %originalBBpart224, %originalBBpart28
  %66 = load i32, i32* @x.75
  %67 = load i32, i32* @y.76
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %65, %originalBB10alteredBB
  %74 = load i8*, i8** %14, align 8, !dbg !3890
  %75 = load i8, i8* %74, align 1, !dbg !3892
  %76 = zext i8 %75 to i32, !dbg !3892
  %77 = call i32 @c_tolower(i32 %76), !dbg !3893
  %78 = trunc i32 %77 to i8, !dbg !3893
  store i8 %78, i8* %16, align 1, !dbg !3894
  %79 = load i8*, i8** %15, align 8, !dbg !3895
  %80 = load i8, i8* %79, align 1, !dbg !3896
  %81 = zext i8 %80 to i32, !dbg !3896
  %82 = call i32 @c_tolower(i32 %81), !dbg !3897
  %83 = trunc i32 %82 to i8, !dbg !3897
  store i8 %83, i8* %17, align 1, !dbg !3898
  %84 = load i8, i8* %16, align 1, !dbg !3899
  %85 = zext i8 %84 to i32, !dbg !3899
  %86 = icmp eq i32 %85, 0, !dbg !3901
  %87 = load i32, i32* @x.75
  %88 = load i32, i32* @y.76
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %86, label %95, label %112, !dbg !3902

95:                                               ; preds = %originalBBpart212
  %96 = load i32, i32* @x.75
  %97 = load i32, i32* @y.76
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %95, %originalBB14alteredBB
  %104 = load i32, i32* @x.75
  %105 = load i32, i32* @y.76
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %155, !dbg !3903

112:                                              ; preds = %originalBBpart212
  %113 = load i32, i32* @x.75
  %114 = load i32, i32* @y.76
  %115 = sub i32 %113, 1
  %116 = mul i32 %113, %115
  %117 = urem i32 %116, 2
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %118, %119
  br i1 %120, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %112, %originalBB18alteredBB
  %121 = load i8*, i8** %14, align 8, !dbg !3904
  %122 = getelementptr inbounds i8, i8* %121, i32 1, !dbg !3904
  store i8* %122, i8** %14, align 8, !dbg !3904
  %123 = load i8*, i8** %15, align 8, !dbg !3905
  %124 = getelementptr inbounds i8, i8* %123, i32 1, !dbg !3905
  store i8* %124, i8** %15, align 8, !dbg !3905
  %125 = load i32, i32* @x.75
  %126 = load i32, i32* @y.76
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %133, !dbg !3906

133:                                              ; preds = %originalBBpart220
  %134 = load i32, i32* @x.75
  %135 = load i32, i32* @y.76
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %133, %originalBB22alteredBB
  %142 = load i8, i8* %16, align 1, !dbg !3907
  %143 = zext i8 %142 to i32, !dbg !3907
  %144 = load i8, i8* %17, align 1, !dbg !3908
  %145 = zext i8 %144 to i32, !dbg !3908
  %146 = icmp eq i32 %143, %145, !dbg !3909
  %147 = load i32, i32* @x.75
  %148 = load i32, i32* @y.76
  %149 = sub i32 %147, 1
  %150 = mul i32 %147, %149
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %152, %153
  br i1 %154, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %146, label %65, label %155, !dbg !3906, !llvm.loop !3910

155:                                              ; preds = %originalBBpart224, %originalBBpart216
  %156 = load i32, i32* @x.75
  %157 = load i32, i32* @y.76
  %158 = sub i32 %156, 1
  %159 = mul i32 %156, %158
  %160 = urem i32 %159, 2
  %161 = icmp eq i32 %160, 0
  %162 = icmp slt i32 %157, 10
  %163 = or i1 %161, %162
  br i1 %163, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %155, %originalBB26alteredBB
  %164 = load i8, i8* %16, align 1, !dbg !3912
  %165 = zext i8 %164 to i32, !dbg !3912
  %166 = load i8, i8* %17, align 1, !dbg !3914
  %167 = zext i8 %166 to i32, !dbg !3914
  %168 = sub nsw i32 %165, %167, !dbg !3915
  store i32 %168, i32* %11, align 4, !dbg !3916
  %169 = load i32, i32* @x.75
  %170 = load i32, i32* @y.76
  %171 = sub i32 %169, 1
  %172 = mul i32 %169, %171
  %173 = urem i32 %172, 2
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %174, %175
  br i1 %176, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %177, !dbg !3916

177:                                              ; preds = %originalBBpart228, %originalBBpart24
  %178 = load i32, i32* @x.75
  %179 = load i32, i32* @y.76
  %180 = sub i32 %178, 1
  %181 = mul i32 %178, %180
  %182 = urem i32 %181, 2
  %183 = icmp eq i32 %182, 0
  %184 = icmp slt i32 %179, 10
  %185 = or i1 %183, %184
  br i1 %185, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %177, %originalBB30alteredBB
  %186 = load i32, i32* %11, align 4, !dbg !3917
  %187 = load i32, i32* @x.75
  %188 = load i32, i32* @y.76
  %189 = sub i32 %187, 1
  %190 = mul i32 %187, %189
  %191 = urem i32 %190, 2
  %192 = icmp eq i32 %191, 0
  %193 = icmp slt i32 %188, 10
  %194 = or i1 %192, %193
  br i1 %194, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  ret i32 %186, !dbg !3917

originalBBalteredBB:                              ; preds = %originalBB, %2
  %195 = alloca i32, align 4
  %196 = alloca i8*, align 8
  %197 = alloca i8*, align 8
  %198 = alloca i8*, align 8
  %199 = alloca i8*, align 8
  %200 = alloca i8, align 1
  %201 = alloca i8, align 1
  store i8* %0, i8** %196, align 8
  call void @llvm.dbg.declare(metadata i8** %196, metadata !3918, metadata !DIExpression()), !dbg !3870
  store i8* %1, i8** %197, align 8
  call void @llvm.dbg.declare(metadata i8** %197, metadata !3921, metadata !DIExpression()), !dbg !3872
  call void @llvm.dbg.declare(metadata i8** %198, metadata !3922, metadata !DIExpression()), !dbg !3874
  %202 = load i8*, i8** %196, align 8, !dbg !3875
  store i8* %202, i8** %198, align 8, !dbg !3874
  call void @llvm.dbg.declare(metadata i8** %199, metadata !3923, metadata !DIExpression()), !dbg !3877
  %203 = load i8*, i8** %197, align 8, !dbg !3878
  store i8* %203, i8** %199, align 8, !dbg !3877
  call void @llvm.dbg.declare(metadata i8* %200, metadata !3924, metadata !DIExpression()), !dbg !3880
  call void @llvm.dbg.declare(metadata i8* %201, metadata !3925, metadata !DIExpression()), !dbg !3882
  %204 = load i8*, i8** %198, align 8, !dbg !3883
  %205 = load i8*, i8** %199, align 8, !dbg !3885
  %206 = icmp eq i8* %204, %205, !dbg !3886
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  store i32 0, i32* %11, align 4, !dbg !3888
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %65
  %207 = load i8*, i8** %14, align 8, !dbg !3890
  %208 = load i8, i8* %207, align 1, !dbg !3892
  %209 = zext i8 %208 to i32, !dbg !3892
  %210 = call i32 @c_tolower(i32 %209), !dbg !3893
  %211 = trunc i32 %210 to i8, !dbg !3893
  store i8 %211, i8* %16, align 1, !dbg !3894
  %212 = load i8*, i8** %15, align 8, !dbg !3895
  %213 = load i8, i8* %212, align 1, !dbg !3896
  %214 = zext i8 %213 to i32, !dbg !3896
  %215 = call i32 @c_tolower(i32 %214), !dbg !3897
  %216 = trunc i32 %215 to i8, !dbg !3897
  store i8 %216, i8* %17, align 1, !dbg !3898
  %217 = load i8, i8* %16, align 1, !dbg !3899
  %218 = zext i8 %217 to i32, !dbg !3899
  %219 = icmp eq i32 %218, 0, !dbg !3901
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %95
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %112
  %220 = load i8*, i8** %14, align 8, !dbg !3904
  %221 = getelementptr inbounds i8, i8* %220, i32 1, !dbg !3904
  store i8* %221, i8** %14, align 8, !dbg !3904
  %222 = load i8*, i8** %15, align 8, !dbg !3905
  %223 = getelementptr inbounds i8, i8* %222, i32 1, !dbg !3905
  store i8* %223, i8** %15, align 8, !dbg !3905
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %133
  %224 = load i8, i8* %16, align 1, !dbg !3907
  %225 = zext i8 %224 to i32, !dbg !3907
  %226 = load i8, i8* %17, align 1, !dbg !3908
  %227 = zext i8 %226 to i32, !dbg !3908
  %228 = icmp eq i32 %225, %227, !dbg !3909
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %155
  %229 = load i8, i8* %16, align 1, !dbg !3912
  %230 = zext i8 %229 to i32, !dbg !3912
  %231 = load i8, i8* %17, align 1, !dbg !3914
  %232 = zext i8 %231 to i32, !dbg !3914
  %_ = sub i32 %230, %232
  %gen = mul i32 %_, %232
  %233 = sub nsw i32 %230, %232, !dbg !3915
  store i32 %233, i32* %11, align 4, !dbg !3916
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %177
  %234 = load i32, i32* %11, align 4, !dbg !3917
  br label %originalBB30
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @close_stream(%struct._IO_FILE*) #4 !dbg !3926 {
  %2 = load i32, i32* @x.77
  %3 = load i32, i32* @y.78
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca %struct._IO_FILE*, align 8
  %12 = alloca i8, align 1
  %13 = alloca i8, align 1
  %14 = alloca i8, align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %11, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %11, metadata !3964, metadata !DIExpression()), !dbg !3965
  call void @llvm.dbg.declare(metadata i8* %12, metadata !3966, metadata !DIExpression()), !dbg !3968
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3969
  %16 = call i64 @__fpending(%struct._IO_FILE* %15) #10, !dbg !3970
  %17 = icmp ne i64 %16, 0, !dbg !3971
  %18 = zext i1 %17 to i8, !dbg !3968
  store i8 %18, i8* %12, align 1, !dbg !3968
  call void @llvm.dbg.declare(metadata i8* %13, metadata !3972, metadata !DIExpression()), !dbg !3973
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3974
  %20 = call i32 @ferror_unlocked(%struct._IO_FILE* %19) #10, !dbg !3974
  %21 = icmp ne i32 %20, 0, !dbg !3975
  %22 = zext i1 %21 to i8, !dbg !3973
  store i8 %22, i8* %13, align 1, !dbg !3973
  call void @llvm.dbg.declare(metadata i8* %14, metadata !3976, metadata !DIExpression()), !dbg !3977
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3978
  %24 = call i32 @rpl_fclose(%struct._IO_FILE* %23), !dbg !3979
  %25 = icmp ne i32 %24, 0, !dbg !3980
  %26 = zext i1 %25 to i8, !dbg !3977
  store i8 %26, i8* %14, align 1, !dbg !3977
  %27 = load i8, i8* %13, align 1, !dbg !3981
  %28 = trunc i8 %27 to i1, !dbg !3981
  %29 = load i32, i32* @x.77
  %30 = load i32, i32* @y.78
  %31 = sub i32 %29, 1
  %32 = mul i32 %29, %31
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %34, %35
  br i1 %36, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %28, label %95, label %37, !dbg !3983

37:                                               ; preds = %originalBBpart2
  %38 = load i32, i32* @x.77
  %39 = load i32, i32* @y.78
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %37, %originalBB1alteredBB
  %46 = load i8, i8* %14, align 1, !dbg !3984
  %47 = trunc i8 %46 to i1, !dbg !3984
  %48 = load i32, i32* @x.77
  %49 = load i32, i32* @y.78
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %47, label %56, label %149, !dbg !3985

56:                                               ; preds = %originalBBpart24
  %57 = load i32, i32* @x.77
  %58 = load i32, i32* @y.78
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %56, %originalBB6alteredBB
  %65 = load i8, i8* %12, align 1, !dbg !3986
  %66 = trunc i8 %65 to i1, !dbg !3986
  %67 = load i32, i32* @x.77
  %68 = load i32, i32* @y.78
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %66, label %95, label %75, !dbg !3987

75:                                               ; preds = %originalBBpart28
  %76 = load i32, i32* @x.77
  %77 = load i32, i32* @y.78
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %75, %originalBB10alteredBB
  %84 = call i32* @__errno_location() #15, !dbg !3988
  %85 = load i32, i32* %84, align 4, !dbg !3988
  %86 = icmp ne i32 %85, 9, !dbg !3989
  %87 = load i32, i32* @x.77
  %88 = load i32, i32* @y.78
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %86, label %95, label %149, !dbg !3990

95:                                               ; preds = %originalBBpart212, %originalBBpart28, %originalBBpart2
  %96 = load i32, i32* @x.77
  %97 = load i32, i32* @y.78
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %95, %originalBB14alteredBB
  %104 = load i8, i8* %14, align 1, !dbg !3991
  %105 = trunc i8 %104 to i1, !dbg !3991
  %106 = load i32, i32* @x.77
  %107 = load i32, i32* @y.78
  %108 = sub i32 %106, 1
  %109 = mul i32 %106, %108
  %110 = urem i32 %109, 2
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %111, %112
  br i1 %113, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %105, label %132, label %114, !dbg !3994

114:                                              ; preds = %originalBBpart216
  %115 = load i32, i32* @x.77
  %116 = load i32, i32* @y.78
  %117 = sub i32 %115, 1
  %118 = mul i32 %115, %117
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %120, %121
  br i1 %122, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %114, %originalBB18alteredBB
  %123 = call i32* @__errno_location() #15, !dbg !3995
  store i32 0, i32* %123, align 4, !dbg !3996
  %124 = load i32, i32* @x.77
  %125 = load i32, i32* @y.78
  %126 = sub i32 %124, 1
  %127 = mul i32 %124, %126
  %128 = urem i32 %127, 2
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %125, 10
  %131 = or i1 %129, %130
  br i1 %131, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %132, !dbg !3995

132:                                              ; preds = %originalBBpart220, %originalBBpart216
  %133 = load i32, i32* @x.77
  %134 = load i32, i32* @y.78
  %135 = sub i32 %133, 1
  %136 = mul i32 %133, %135
  %137 = urem i32 %136, 2
  %138 = icmp eq i32 %137, 0
  %139 = icmp slt i32 %134, 10
  %140 = or i1 %138, %139
  br i1 %140, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %132, %originalBB22alteredBB
  store i32 -1, i32* %10, align 4, !dbg !3997
  %141 = load i32, i32* @x.77
  %142 = load i32, i32* @y.78
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %166, !dbg !3997

149:                                              ; preds = %originalBBpart212, %originalBBpart24
  %150 = load i32, i32* @x.77
  %151 = load i32, i32* @y.78
  %152 = sub i32 %150, 1
  %153 = mul i32 %150, %152
  %154 = urem i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %155, %156
  br i1 %157, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %149, %originalBB26alteredBB
  store i32 0, i32* %10, align 4, !dbg !3998
  %158 = load i32, i32* @x.77
  %159 = load i32, i32* @y.78
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %166, !dbg !3998

166:                                              ; preds = %originalBBpart228, %originalBBpart224
  %167 = load i32, i32* @x.77
  %168 = load i32, i32* @y.78
  %169 = sub i32 %167, 1
  %170 = mul i32 %167, %169
  %171 = urem i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %172, %173
  br i1 %174, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %166, %originalBB30alteredBB
  %175 = load i32, i32* %10, align 4, !dbg !3999
  %176 = load i32, i32* @x.77
  %177 = load i32, i32* @y.78
  %178 = sub i32 %176, 1
  %179 = mul i32 %176, %178
  %180 = urem i32 %179, 2
  %181 = icmp eq i32 %180, 0
  %182 = icmp slt i32 %177, 10
  %183 = or i1 %181, %182
  br i1 %183, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  ret i32 %175, !dbg !3999

originalBBalteredBB:                              ; preds = %originalBB, %1
  %184 = alloca i32, align 4
  %185 = alloca %struct._IO_FILE*, align 8
  %186 = alloca i8, align 1
  %187 = alloca i8, align 1
  %188 = alloca i8, align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %185, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %185, metadata !4000, metadata !DIExpression()), !dbg !3965
  call void @llvm.dbg.declare(metadata i8* %186, metadata !4039, metadata !DIExpression()), !dbg !3968
  %189 = load %struct._IO_FILE*, %struct._IO_FILE** %185, align 8, !dbg !3969
  %190 = call i64 @__fpending(%struct._IO_FILE* %189) #10, !dbg !3970
  %191 = icmp ne i64 %190, 0, !dbg !3971
  %192 = zext i1 %191 to i8, !dbg !3968
  store i8 %192, i8* %186, align 1, !dbg !3968
  call void @llvm.dbg.declare(metadata i8* %187, metadata !4040, metadata !DIExpression()), !dbg !3973
  %193 = load %struct._IO_FILE*, %struct._IO_FILE** %185, align 8, !dbg !3974
  %194 = call i32 @ferror_unlocked(%struct._IO_FILE* %193) #10, !dbg !3974
  %195 = icmp ne i32 %194, 0, !dbg !3975
  %196 = zext i1 %195 to i8, !dbg !3973
  store i8 %196, i8* %187, align 1, !dbg !3973
  call void @llvm.dbg.declare(metadata i8* %188, metadata !4041, metadata !DIExpression()), !dbg !3977
  %197 = load %struct._IO_FILE*, %struct._IO_FILE** %185, align 8, !dbg !3978
  %198 = call i32 @rpl_fclose(%struct._IO_FILE* %197), !dbg !3979
  %199 = icmp ne i32 %198, 0, !dbg !3980
  %200 = zext i1 %199 to i8, !dbg !3977
  store i8 %200, i8* %188, align 1, !dbg !3977
  %201 = load i8, i8* %187, align 1, !dbg !3981
  %202 = trunc i8 %201 to i1, !dbg !3981
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %37
  %203 = load i8, i8* %14, align 1, !dbg !3984
  %204 = trunc i8 %203 to i1, !dbg !3984
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %56
  %205 = load i8, i8* %12, align 1, !dbg !3986
  %206 = trunc i8 %205 to i1, !dbg !3986
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %75
  %207 = call i32* @__errno_location() #15, !dbg !3988
  %208 = load i32, i32* %207, align 4, !dbg !3988
  %209 = icmp ne i32 %208, 9, !dbg !3989
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %95
  %210 = load i8, i8* %14, align 1, !dbg !3991
  %211 = trunc i8 %210 to i1, !dbg !3991
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %114
  %212 = call i32* @__errno_location() #15, !dbg !3995
  store i32 0, i32* %212, align 4, !dbg !3996
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %132
  store i32 -1, i32* %10, align 4, !dbg !3997
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %149
  store i32 0, i32* %10, align 4, !dbg !3998
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %166
  %213 = load i32, i32* %10, align 4, !dbg !3999
  br label %originalBB30
}

; Function Attrs: nounwind
declare dso_local i64 @__fpending(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare dso_local i32 @ferror_unlocked(%struct._IO_FILE*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @hard_locale(i32) #4 !dbg !4042 {
  %2 = load i32, i32* @x.79
  %3 = load i32, i32* @y.80
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i1, align 1
  %11 = alloca i32, align 4
  %12 = alloca [257 x i8], align 16
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !4046, metadata !DIExpression()), !dbg !4047
  call void @llvm.dbg.declare(metadata [257 x i8]* %12, metadata !4048, metadata !DIExpression()), !dbg !4052
  %13 = load i32, i32* %11, align 4, !dbg !4053
  %14 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !4055
  %15 = call i32 @setlocale_null_r(i32 %13, i8* %14, i64 257), !dbg !4056
  %16 = icmp ne i32 %15, 0, !dbg !4056
  %17 = load i32, i32* @x.79
  %18 = load i32, i32* @y.80
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %16, label %25, label %42, !dbg !4057

25:                                               ; preds = %originalBBpart2
  %26 = load i32, i32* @x.79
  %27 = load i32, i32* @y.80
  %28 = sub i32 %26, 1
  %29 = mul i32 %26, %28
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %31, %32
  br i1 %33, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %25, %originalBB1alteredBB
  store i1 false, i1* %10, align 1, !dbg !4058
  %34 = load i32, i32* @x.79
  %35 = load i32, i32* @y.80
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %101, !dbg !4058

42:                                               ; preds = %originalBBpart2
  %43 = load i32, i32* @x.79
  %44 = load i32, i32* @y.80
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %42, %originalBB6alteredBB
  %51 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !4059
  %52 = call i32 @strcmp(i8* %51, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.123, i64 0, i64 0)) #13, !dbg !4060
  %53 = icmp eq i32 %52, 0, !dbg !4061
  %54 = load i32, i32* @x.79
  %55 = load i32, i32* @y.80
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %53, label %82, label %62, !dbg !4062

62:                                               ; preds = %originalBBpart28
  %63 = load i32, i32* @x.79
  %64 = load i32, i32* @y.80
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %62, %originalBB10alteredBB
  %71 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !4063
  %72 = call i32 @strcmp(i8* %71, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.124, i64 0, i64 0)) #13, !dbg !4064
  %73 = icmp eq i32 %72, 0, !dbg !4065
  %74 = load i32, i32* @x.79
  %75 = load i32, i32* @y.80
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %82, !dbg !4062

82:                                               ; preds = %originalBBpart212, %originalBBpart28
  %83 = phi i1 [ true, %originalBBpart28 ], [ %73, %originalBBpart212 ]
  %84 = load i32, i32* @x.79
  %85 = load i32, i32* @y.80
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %82, %originalBB14alteredBB
  %92 = xor i1 %83, true, !dbg !4066
  store i1 %92, i1* %10, align 1, !dbg !4067
  %93 = load i32, i32* @x.79
  %94 = load i32, i32* @y.80
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBBpart227, label %originalBB14alteredBB

originalBBpart227:                                ; preds = %originalBB14
  br label %101, !dbg !4067

101:                                              ; preds = %originalBBpart227, %originalBBpart24
  %102 = load i32, i32* @x.79
  %103 = load i32, i32* @y.80
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %101, %originalBB29alteredBB
  %110 = load i1, i1* %10, align 1, !dbg !4068
  %111 = load i32, i32* @x.79
  %112 = load i32, i32* @y.80
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBBpart231, label %originalBB29alteredBB

originalBBpart231:                                ; preds = %originalBB29
  ret i1 %110, !dbg !4068

originalBBalteredBB:                              ; preds = %originalBB, %1
  %119 = alloca i1, align 1
  %120 = alloca i32, align 4
  %121 = alloca [257 x i8], align 16
  store i32 %0, i32* %120, align 4
  call void @llvm.dbg.declare(metadata i32* %120, metadata !4069, metadata !DIExpression()), !dbg !4047
  call void @llvm.dbg.declare(metadata [257 x i8]* %121, metadata !4072, metadata !DIExpression()), !dbg !4052
  %122 = load i32, i32* %120, align 4, !dbg !4053
  %123 = getelementptr inbounds [257 x i8], [257 x i8]* %121, i64 0, i64 0, !dbg !4055
  %124 = call i32 @setlocale_null_r(i32 %122, i8* %123, i64 257), !dbg !4056
  %125 = icmp ne i32 %124, 0, !dbg !4056
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %25
  store i1 false, i1* %10, align 1, !dbg !4058
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %42
  %126 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !4059
  %127 = call i32 @strcmp(i8* %126, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.123, i64 0, i64 0)) #13, !dbg !4060
  %128 = icmp eq i32 %127, 0, !dbg !4061
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %62
  %129 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !4063
  %130 = call i32 @strcmp(i8* %129, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.124, i64 0, i64 0)) #13, !dbg !4064
  %131 = icmp eq i32 %130, 0, !dbg !4065
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %82
  %_ = shl i1 %83, true
  %_15 = sub i1 false, %83
  %gen = add i1 %_15, true
  %_16 = sub i1 false, %83
  %gen17 = add i1 %_16, true
  %_18 = sub i1 false, %83
  %gen19 = add i1 %_18, true
  %_20 = sub i1 false, %83
  %gen21 = add i1 %_20, true
  %_22 = shl i1 %83, true
  %_23 = sub i1 false, %83
  %gen24 = add i1 %_23, true
  %132 = xor i1 %83, true, !dbg !4066
  store i1 %132, i1* %10, align 1, !dbg !4067
  br label %originalBB14

originalBB29alteredBB:                            ; preds = %originalBB29, %101
  %133 = load i1, i1* %10, align 1, !dbg !4068
  br label %originalBB29
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @locale_charset() #4 !dbg !4073 {
  %1 = load i32, i32* @x.81
  %2 = load i32, i32* @y.82
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %9, metadata !4077, metadata !DIExpression()), !dbg !4078
  %10 = call i8* @nl_langinfo(i32 14) #10, !dbg !4079
  store i8* %10, i8** %9, align 8, !dbg !4080
  %11 = load i8*, i8** %9, align 8, !dbg !4081
  %12 = icmp eq i8* %11, null, !dbg !4083
  %13 = load i32, i32* @x.81
  %14 = load i32, i32* @y.82
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %21, label %38, !dbg !4084

21:                                               ; preds = %originalBBpart2
  %22 = load i32, i32* @x.81
  %23 = load i32, i32* @y.82
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.127, i64 0, i64 0), i8** %9, align 8, !dbg !4085
  %30 = load i32, i32* @x.81
  %31 = load i32, i32* @y.82
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %38, !dbg !4086

38:                                               ; preds = %originalBBpart24, %originalBBpart2
  %39 = load i32, i32* @x.81
  %40 = load i32, i32* @y.82
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %38, %originalBB6alteredBB
  %47 = load i8*, i8** %9, align 8, !dbg !4087
  %48 = getelementptr inbounds i8, i8* %47, i64 0, !dbg !4087
  %49 = load i8, i8* %48, align 1, !dbg !4087
  %50 = sext i8 %49 to i32, !dbg !4087
  %51 = icmp eq i32 %50, 0, !dbg !4091
  %52 = load i32, i32* @x.81
  %53 = load i32, i32* @y.82
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %51, label %60, label %77, !dbg !4092

60:                                               ; preds = %originalBBpart28
  %61 = load i32, i32* @x.81
  %62 = load i32, i32* @y.82
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %60, %originalBB10alteredBB
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.128, i64 0, i64 0), i8** %9, align 8, !dbg !4093
  %69 = load i32, i32* @x.81
  %70 = load i32, i32* @y.82
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %77, !dbg !4094

77:                                               ; preds = %originalBBpart212, %originalBBpart28
  %78 = load i32, i32* @x.81
  %79 = load i32, i32* @y.82
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %77, %originalBB14alteredBB
  %86 = load i8*, i8** %9, align 8, !dbg !4095
  %87 = load i32, i32* @x.81
  %88 = load i32, i32* @y.82
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  ret i8* %86, !dbg !4096

originalBBalteredBB:                              ; preds = %originalBB, %0
  %95 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %95, metadata !4097, metadata !DIExpression()), !dbg !4078
  %96 = call i8* @nl_langinfo(i32 14) #10, !dbg !4079
  store i8* %96, i8** %95, align 8, !dbg !4080
  %97 = load i8*, i8** %95, align 8, !dbg !4081
  %98 = icmp eq i8* %97, null, !dbg !4083
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.127, i64 0, i64 0), i8** %9, align 8, !dbg !4085
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %38
  %99 = load i8*, i8** %9, align 8, !dbg !4087
  %100 = getelementptr inbounds i8, i8* %99, i64 0, !dbg !4087
  %101 = load i8, i8* %100, align 1, !dbg !4087
  %102 = sext i8 %101 to i32, !dbg !4087
  %103 = icmp eq i32 %102, 0, !dbg !4091
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %60
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.128, i64 0, i64 0), i8** %9, align 8, !dbg !4093
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %77
  %104 = load i8*, i8** %9, align 8, !dbg !4095
  br label %originalBB14
}

; Function Attrs: nounwind
declare dso_local i8* @nl_langinfo(i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @setlocale_null_r(i32, i8* nonnull, i64) #4 !dbg !4100 {
  %4 = load i32, i32* @x.83
  %5 = load i32, i32* @y.84
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  store i32 %0, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !4104, metadata !DIExpression()), !dbg !4105
  store i8* %1, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !4106, metadata !DIExpression()), !dbg !4107
  store i64 %2, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !4108, metadata !DIExpression()), !dbg !4109
  %15 = load i32, i32* %12, align 4, !dbg !4110
  %16 = load i8*, i8** %13, align 8, !dbg !4111
  %17 = load i64, i64* %14, align 8, !dbg !4112
  %18 = call i32 @setlocale_null_unlocked(i32 %15, i8* %16, i64 %17), !dbg !4113
  %19 = load i32, i32* @x.83
  %20 = load i32, i32* @y.84
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i32 %18, !dbg !4114

originalBBalteredBB:                              ; preds = %originalBB, %3
  %27 = alloca i32, align 4
  %28 = alloca i8*, align 8
  %29 = alloca i64, align 8
  store i32 %0, i32* %27, align 4
  call void @llvm.dbg.declare(metadata i32* %27, metadata !4115, metadata !DIExpression()), !dbg !4105
  store i8* %1, i8** %28, align 8
  call void @llvm.dbg.declare(metadata i8** %28, metadata !4118, metadata !DIExpression()), !dbg !4107
  store i64 %2, i64* %29, align 8
  call void @llvm.dbg.declare(metadata i64* %29, metadata !4119, metadata !DIExpression()), !dbg !4109
  %30 = load i32, i32* %27, align 4, !dbg !4110
  %31 = load i8*, i8** %28, align 8, !dbg !4111
  %32 = load i64, i64* %29, align 8, !dbg !4112
  %33 = call i32 @setlocale_null_unlocked(i32 %30, i8* %31, i64 %32), !dbg !4113
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @setlocale_null_unlocked(i32, i8*, i64) #4 !dbg !4120 {
  %4 = load i32, i32* @x.85
  %5 = load i32, i32* @y.86
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i64, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i64, align 8
  store i32 %0, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !4121, metadata !DIExpression()), !dbg !4122
  store i8* %1, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !4123, metadata !DIExpression()), !dbg !4124
  store i64 %2, i64* %15, align 8
  %18 = mul i32 %0, -3
  %19 = add i32 %18, 4
  %20 = trunc i64 %2 to i32
  %21 = mul i32 %20, -2
  %22 = add i32 %21, 1
  %23 = mul i32 %19, %19
  %24 = mul i32 %22, %22
  %25 = add i32 %23, %24
  %26 = mul i32 %19, %22
  %27 = mul i32 %26, 2
  %28 = sub i32 %25, %27
  %29 = mul i32 %28, -3
  %30 = add i32 %29, -1
  %31 = icmp eq i32 %30, 2
  %32 = load i32, i32* @x.85
  %33 = load i32, i32* @y.86
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %31, label %40, label %57

40:                                               ; preds = %originalBBpart2
  %41 = load i32, i32* @x.85
  %42 = load i32, i32* @y.86
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBB80, label %originalBB80alteredBB

originalBB80:                                     ; preds = %40, %originalBB80alteredBB
  %49 = load i32, i32* @x.85
  %50 = load i32, i32* @y.86
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBBpart282, label %originalBB80alteredBB

originalBBpart282:                                ; preds = %originalBB80
  ret i32 0

57:                                               ; preds = %originalBBpart2
  call void @llvm.dbg.declare(metadata i64* %15, metadata !4125, metadata !DIExpression()), !dbg !4126
  call void @llvm.dbg.declare(metadata i8** %16, metadata !4127, metadata !DIExpression()), !dbg !4128
  %58 = load i32, i32* @x.85
  %59 = load i32, i32* @y.86
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBB84, label %originalBB84alteredBB

originalBB84:                                     ; preds = %57, %originalBB84alteredBB
  %66 = load i32, i32* %13, align 4, !dbg !4129
  %67 = call i8* @setlocale_null_androidfix(i32 %66), !dbg !4130
  store i8* %67, i8** %16, align 8, !dbg !4128
  %68 = load i8*, i8** %16, align 8, !dbg !4131
  %69 = icmp eq i8* %68, null, !dbg !4133
  %70 = load i32, i32* @x.85
  %71 = load i32, i32* @y.86
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBBpart286, label %originalBB84alteredBB

originalBBpart286:                                ; preds = %originalBB84
  br i1 %69, label %78, label %133, !dbg !4134

78:                                               ; preds = %originalBBpart286
  %79 = load i32, i32* @x.85
  %80 = load i32, i32* @y.86
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %originalBB88, label %originalBB88alteredBB

originalBB88:                                     ; preds = %78, %originalBB88alteredBB
  %87 = load i64, i64* %15, align 8, !dbg !4135
  %88 = icmp ugt i64 %87, 0, !dbg !4138
  %89 = load i32, i32* @x.85
  %90 = load i32, i32* @y.86
  %91 = sub i32 %89, 1
  %92 = mul i32 %89, %91
  %93 = urem i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %94, %95
  br i1 %96, label %originalBBpart290, label %originalBB88alteredBB

originalBBpart290:                                ; preds = %originalBB88
  br i1 %88, label %97, label %116, !dbg !4139

97:                                               ; preds = %originalBBpart290
  %98 = load i32, i32* @x.85
  %99 = load i32, i32* @y.86
  %100 = sub i32 %98, 1
  %101 = mul i32 %98, %100
  %102 = urem i32 %101, 2
  %103 = icmp eq i32 %102, 0
  %104 = icmp slt i32 %99, 10
  %105 = or i1 %103, %104
  br i1 %105, label %originalBB92, label %originalBB92alteredBB

originalBB92:                                     ; preds = %97, %originalBB92alteredBB
  %106 = load i8*, i8** %14, align 8, !dbg !4140
  %107 = getelementptr inbounds i8, i8* %106, i64 0, !dbg !4140
  store i8 0, i8* %107, align 1, !dbg !4141
  %108 = load i32, i32* @x.85
  %109 = load i32, i32* @y.86
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBBpart294, label %originalBB92alteredBB

originalBBpart294:                                ; preds = %originalBB92
  br label %116, !dbg !4140

116:                                              ; preds = %originalBBpart294, %originalBBpart290
  %117 = load i32, i32* @x.85
  %118 = load i32, i32* @y.86
  %119 = sub i32 %117, 1
  %120 = mul i32 %117, %119
  %121 = urem i32 %120, 2
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %122, %123
  br i1 %124, label %originalBB96, label %originalBB96alteredBB

originalBB96:                                     ; preds = %116, %originalBB96alteredBB
  store i32 22, i32* %12, align 4, !dbg !4142
  %125 = load i32, i32* @x.85
  %126 = load i32, i32* @y.86
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBBpart298, label %originalBB96alteredBB

originalBBpart298:                                ; preds = %originalBB96
  br label %237, !dbg !4142

133:                                              ; preds = %originalBBpart286
  call void @llvm.dbg.declare(metadata i64* %17, metadata !4143, metadata !DIExpression()), !dbg !4145
  %134 = load i32, i32* @x.85
  %135 = load i32, i32* @y.86
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBB100, label %originalBB100alteredBB

originalBB100:                                    ; preds = %133, %originalBB100alteredBB
  %142 = load i8*, i8** %16, align 8, !dbg !4146
  %143 = call i64 @strlen(i8* %142) #13, !dbg !4147
  store i64 %143, i64* %17, align 8, !dbg !4145
  %144 = load i64, i64* %17, align 8, !dbg !4148
  %145 = load i64, i64* %15, align 8, !dbg !4150
  %146 = icmp ult i64 %144, %145, !dbg !4151
  %147 = load i32, i32* @x.85
  %148 = load i32, i32* @y.86
  %149 = sub i32 %147, 1
  %150 = mul i32 %147, %149
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %152, %153
  br i1 %154, label %originalBBpart2102, label %originalBB100alteredBB

originalBBpart2102:                               ; preds = %originalBB100
  br i1 %146, label %155, label %176, !dbg !4152

155:                                              ; preds = %originalBBpart2102
  %156 = load i32, i32* @x.85
  %157 = load i32, i32* @y.86
  %158 = sub i32 %156, 1
  %159 = mul i32 %156, %158
  %160 = urem i32 %159, 2
  %161 = icmp eq i32 %160, 0
  %162 = icmp slt i32 %157, 10
  %163 = or i1 %161, %162
  br i1 %163, label %originalBB104, label %originalBB104alteredBB

originalBB104:                                    ; preds = %155, %originalBB104alteredBB
  %164 = load i8*, i8** %14, align 8, !dbg !4153
  %165 = load i8*, i8** %16, align 8, !dbg !4155
  %166 = load i64, i64* %17, align 8, !dbg !4156
  %167 = add i64 %166, 1, !dbg !4157
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %164, i8* align 1 %165, i64 %167, i1 false), !dbg !4158
  store i32 0, i32* %12, align 4, !dbg !4159
  %168 = load i32, i32* @x.85
  %169 = load i32, i32* @y.86
  %170 = sub i32 %168, 1
  %171 = mul i32 %168, %170
  %172 = urem i32 %171, 2
  %173 = icmp eq i32 %172, 0
  %174 = icmp slt i32 %169, 10
  %175 = or i1 %173, %174
  br i1 %175, label %originalBBpart2110, label %originalBB104alteredBB

originalBBpart2110:                               ; preds = %originalBB104
  br label %237, !dbg !4159

176:                                              ; preds = %originalBBpart2102
  %177 = load i32, i32* @x.85
  %178 = load i32, i32* @y.86
  %179 = sub i32 %177, 1
  %180 = mul i32 %177, %179
  %181 = urem i32 %180, 2
  %182 = icmp eq i32 %181, 0
  %183 = icmp slt i32 %178, 10
  %184 = or i1 %182, %183
  br i1 %184, label %originalBB112, label %originalBB112alteredBB

originalBB112:                                    ; preds = %176, %originalBB112alteredBB
  %185 = load i64, i64* %15, align 8, !dbg !4160
  %186 = icmp ugt i64 %185, 0, !dbg !4163
  %187 = load i32, i32* @x.85
  %188 = load i32, i32* @y.86
  %189 = sub i32 %187, 1
  %190 = mul i32 %187, %189
  %191 = urem i32 %190, 2
  %192 = icmp eq i32 %191, 0
  %193 = icmp slt i32 %188, 10
  %194 = or i1 %192, %193
  br i1 %194, label %originalBBpart2114, label %originalBB112alteredBB

originalBBpart2114:                               ; preds = %originalBB112
  br i1 %186, label %195, label %220, !dbg !4164

195:                                              ; preds = %originalBBpart2114
  %196 = load i32, i32* @x.85
  %197 = load i32, i32* @y.86
  %198 = sub i32 %196, 1
  %199 = mul i32 %196, %198
  %200 = urem i32 %199, 2
  %201 = icmp eq i32 %200, 0
  %202 = icmp slt i32 %197, 10
  %203 = or i1 %201, %202
  br i1 %203, label %originalBB116, label %originalBB116alteredBB

originalBB116:                                    ; preds = %195, %originalBB116alteredBB
  %204 = load i8*, i8** %14, align 8, !dbg !4165
  %205 = load i8*, i8** %16, align 8, !dbg !4167
  %206 = load i64, i64* %15, align 8, !dbg !4168
  %207 = sub i64 %206, 1, !dbg !4169
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %204, i8* align 1 %205, i64 %207, i1 false), !dbg !4170
  %208 = load i8*, i8** %14, align 8, !dbg !4171
  %209 = load i64, i64* %15, align 8, !dbg !4172
  %210 = sub i64 %209, 1, !dbg !4173
  %211 = getelementptr inbounds i8, i8* %208, i64 %210, !dbg !4171
  store i8 0, i8* %211, align 1, !dbg !4174
  %212 = load i32, i32* @x.85
  %213 = load i32, i32* @y.86
  %214 = sub i32 %212, 1
  %215 = mul i32 %212, %214
  %216 = urem i32 %215, 2
  %217 = icmp eq i32 %216, 0
  %218 = icmp slt i32 %213, 10
  %219 = or i1 %217, %218
  br i1 %219, label %originalBBpart2131, label %originalBB116alteredBB

originalBBpart2131:                               ; preds = %originalBB116
  br label %220, !dbg !4175

220:                                              ; preds = %originalBBpart2131, %originalBBpart2114
  %221 = load i32, i32* @x.85
  %222 = load i32, i32* @y.86
  %223 = sub i32 %221, 1
  %224 = mul i32 %221, %223
  %225 = urem i32 %224, 2
  %226 = icmp eq i32 %225, 0
  %227 = icmp slt i32 %222, 10
  %228 = or i1 %226, %227
  br i1 %228, label %originalBB133, label %originalBB133alteredBB

originalBB133:                                    ; preds = %220, %originalBB133alteredBB
  store i32 34, i32* %12, align 4, !dbg !4176
  %229 = load i32, i32* @x.85
  %230 = load i32, i32* @y.86
  %231 = sub i32 %229, 1
  %232 = mul i32 %229, %231
  %233 = urem i32 %232, 2
  %234 = icmp eq i32 %233, 0
  %235 = icmp slt i32 %230, 10
  %236 = or i1 %234, %235
  br i1 %236, label %originalBBpart2135, label %originalBB133alteredBB

originalBBpart2135:                               ; preds = %originalBB133
  br label %237, !dbg !4176

237:                                              ; preds = %originalBBpart2135, %originalBBpart2110, %originalBBpart298
  %238 = load i32, i32* @x.85
  %239 = load i32, i32* @y.86
  %240 = sub i32 %238, 1
  %241 = mul i32 %238, %240
  %242 = urem i32 %241, 2
  %243 = icmp eq i32 %242, 0
  %244 = icmp slt i32 %239, 10
  %245 = or i1 %243, %244
  br i1 %245, label %originalBB137, label %originalBB137alteredBB

originalBB137:                                    ; preds = %237, %originalBB137alteredBB
  %246 = load i32, i32* %12, align 4, !dbg !4177
  %247 = load i32, i32* @x.85
  %248 = load i32, i32* @y.86
  %249 = sub i32 %247, 1
  %250 = mul i32 %247, %249
  %251 = urem i32 %250, 2
  %252 = icmp eq i32 %251, 0
  %253 = icmp slt i32 %248, 10
  %254 = or i1 %252, %253
  br i1 %254, label %originalBBpart2139, label %originalBB137alteredBB

originalBBpart2139:                               ; preds = %originalBB137
  ret i32 %246, !dbg !4177

originalBBalteredBB:                              ; preds = %originalBB, %3
  %255 = alloca i32, align 4
  %256 = alloca i32, align 4
  %257 = alloca i8*, align 8
  %258 = alloca i64, align 8
  %259 = alloca i8*, align 8
  %260 = alloca i64, align 8
  store i32 %0, i32* %256, align 4
  call void @llvm.dbg.declare(metadata i32* %256, metadata !4178, metadata !DIExpression()), !dbg !4122
  store i8* %1, i8** %257, align 8
  call void @llvm.dbg.declare(metadata i8** %257, metadata !4181, metadata !DIExpression()), !dbg !4124
  store i64 %2, i64* %258, align 8
  %_ = sub i32 0, %0
  %gen = add i32 %_, -3
  %_1 = sub i32 0, %0
  %gen2 = add i32 %_1, -3
  %_3 = sub i32 0, %0
  %gen4 = add i32 %_3, -3
  %_5 = shl i32 %0, -3
  %261 = mul i32 %0, -3
  %_6 = sub i32 %261, 4
  %gen7 = mul i32 %_6, 4
  %_8 = sub i32 %261, 4
  %gen9 = mul i32 %_8, 4
  %_10 = shl i32 %261, 4
  %_11 = shl i32 %261, 4
  %262 = add i32 %261, 4
  %263 = trunc i64 %2 to i32
  %_12 = shl i32 %263, -2
  %_13 = sub i32 %263, -2
  %gen14 = mul i32 %_13, -2
  %_15 = sub i32 %263, -2
  %gen16 = mul i32 %_15, -2
  %264 = mul i32 %263, -2
  %_17 = sub i32 0, %264
  %gen18 = add i32 %_17, 1
  %265 = add i32 %264, 1
  %_19 = sub i32 0, %262
  %gen20 = add i32 %_19, %262
  %_21 = sub i32 %262, %262
  %gen22 = mul i32 %_21, %262
  %_23 = shl i32 %262, %262
  %_24 = shl i32 %262, %262
  %_25 = shl i32 %262, %262
  %_26 = sub i32 %262, %262
  %gen27 = mul i32 %_26, %262
  %_28 = sub i32 %262, %262
  %gen29 = mul i32 %_28, %262
  %_30 = sub i32 %262, %262
  %gen31 = mul i32 %_30, %262
  %266 = mul i32 %262, %262
  %_32 = sub i32 %265, %265
  %gen33 = mul i32 %_32, %265
  %_34 = shl i32 %265, %265
  %_35 = shl i32 %265, %265
  %_36 = sub i32 %265, %265
  %gen37 = mul i32 %_36, %265
  %_38 = shl i32 %265, %265
  %_39 = sub i32 %265, %265
  %gen40 = mul i32 %_39, %265
  %_41 = shl i32 %265, %265
  %267 = mul i32 %265, %265
  %_42 = sub i32 %266, %267
  %gen43 = mul i32 %_42, %267
  %_44 = sub i32 0, %266
  %gen45 = add i32 %_44, %267
  %_46 = sub i32 0, %266
  %gen47 = add i32 %_46, %267
  %_48 = shl i32 %266, %267
  %_49 = sub i32 0, %266
  %gen50 = add i32 %_49, %267
  %268 = add i32 %266, %267
  %_51 = sub i32 0, %262
  %gen52 = add i32 %_51, %265
  %269 = mul i32 %262, %265
  %_53 = sub i32 0, %269
  %gen54 = add i32 %_53, 2
  %_55 = sub i32 %269, 2
  %gen56 = mul i32 %_55, 2
  %_57 = sub i32 %269, 2
  %gen58 = mul i32 %_57, 2
  %_59 = shl i32 %269, 2
  %_60 = sub i32 %269, 2
  %gen61 = mul i32 %_60, 2
  %_62 = sub i32 0, %269
  %gen63 = add i32 %_62, 2
  %270 = mul i32 %269, 2
  %_64 = sub i32 0, %268
  %gen65 = add i32 %_64, %270
  %_66 = sub i32 0, %268
  %gen67 = add i32 %_66, %270
  %_68 = sub i32 0, %268
  %gen69 = add i32 %_68, %270
  %_70 = sub i32 %268, %270
  %gen71 = mul i32 %_70, %270
  %_72 = sub i32 %268, %270
  %gen73 = mul i32 %_72, %270
  %271 = sub i32 %268, %270
  %_74 = shl i32 %271, -3
  %272 = mul i32 %271, -3
  %_75 = shl i32 %272, -1
  %_76 = sub i32 %272, -1
  %gen77 = mul i32 %_76, -1
  %_78 = sub i32 0, %272
  %gen79 = add i32 %_78, -1
  %273 = add i32 %272, -1
  %274 = icmp eq i32 %273, 2
  br label %originalBB

originalBB80alteredBB:                            ; preds = %originalBB80, %40
  br label %originalBB80

originalBB84alteredBB:                            ; preds = %originalBB84, %57
  %275 = load i32, i32* %13, align 4, !dbg !4129
  %276 = call i8* @setlocale_null_androidfix(i32 %275), !dbg !4130
  store i8* %276, i8** %16, align 8, !dbg !4128
  %277 = load i8*, i8** %16, align 8, !dbg !4131
  %278 = icmp eq i8* %277, null, !dbg !4133
  br label %originalBB84

originalBB88alteredBB:                            ; preds = %originalBB88, %78
  %279 = load i64, i64* %15, align 8, !dbg !4135
  %280 = icmp ugt i64 %279, 0, !dbg !4138
  br label %originalBB88

originalBB92alteredBB:                            ; preds = %originalBB92, %97
  %281 = load i8*, i8** %14, align 8, !dbg !4140
  %282 = getelementptr inbounds i8, i8* %281, i64 0, !dbg !4140
  store i8 0, i8* %282, align 1, !dbg !4141
  br label %originalBB92

originalBB96alteredBB:                            ; preds = %originalBB96, %116
  store i32 22, i32* %12, align 4, !dbg !4142
  br label %originalBB96

originalBB100alteredBB:                           ; preds = %originalBB100, %133
  %283 = load i8*, i8** %16, align 8, !dbg !4146
  %284 = call i64 @strlen(i8* %283) #13, !dbg !4147
  store i64 %284, i64* %17, align 8, !dbg !4145
  %285 = load i64, i64* %17, align 8, !dbg !4148
  %286 = load i64, i64* %15, align 8, !dbg !4150
  %287 = icmp ult i64 %285, %286, !dbg !4151
  br label %originalBB100

originalBB104alteredBB:                           ; preds = %originalBB104, %155
  %288 = load i8*, i8** %14, align 8, !dbg !4153
  %289 = load i8*, i8** %16, align 8, !dbg !4155
  %290 = load i64, i64* %17, align 8, !dbg !4156
  %_105 = sub i64 0, %290
  %gen106 = add i64 %_105, 1
  %_107 = sub i64 0, %290
  %gen108 = add i64 %_107, 1
  %291 = add i64 %290, 1, !dbg !4157
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %288, i8* align 1 %289, i64 %291, i1 false), !dbg !4158
  store i32 0, i32* %12, align 4, !dbg !4159
  br label %originalBB104

originalBB112alteredBB:                           ; preds = %originalBB112, %176
  %292 = load i64, i64* %15, align 8, !dbg !4160
  %293 = icmp ugt i64 %292, 0, !dbg !4163
  br label %originalBB112

originalBB116alteredBB:                           ; preds = %originalBB116, %195
  %294 = load i8*, i8** %14, align 8, !dbg !4165
  %295 = load i8*, i8** %16, align 8, !dbg !4167
  %296 = load i64, i64* %15, align 8, !dbg !4168
  %_117 = sub i64 0, %296
  %gen118 = add i64 %_117, 1
  %_119 = sub i64 0, %296
  %gen120 = add i64 %_119, 1
  %_121 = sub i64 0, %296
  %gen122 = add i64 %_121, 1
  %297 = sub i64 %296, 1, !dbg !4169
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %294, i8* align 1 %295, i64 %297, i1 false), !dbg !4170
  %298 = load i8*, i8** %14, align 8, !dbg !4171
  %299 = load i64, i64* %15, align 8, !dbg !4172
  %_123 = shl i64 %299, 1
  %_124 = sub i64 %299, 1
  %gen125 = mul i64 %_124, 1
  %_126 = sub i64 0, %299
  %gen127 = add i64 %_126, 1
  %_128 = sub i64 %299, 1
  %gen129 = mul i64 %_128, 1
  %300 = sub i64 %299, 1, !dbg !4173
  %301 = getelementptr inbounds i8, i8* %298, i64 %300, !dbg !4171
  store i8 0, i8* %301, align 1, !dbg !4174
  br label %originalBB116

originalBB133alteredBB:                           ; preds = %originalBB133, %220
  store i32 34, i32* %12, align 4, !dbg !4176
  br label %originalBB133

originalBB137alteredBB:                           ; preds = %originalBB137, %237
  %302 = load i32, i32* %12, align 4, !dbg !4177
  br label %originalBB137
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @setlocale_null_androidfix(i32) #4 !dbg !4182 {
  %2 = load i32, i32* @x.87
  %3 = load i32, i32* @y.88
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  store i32 %0, i32* %10, align 4
  call void @llvm.dbg.declare(metadata i32* %10, metadata !4185, metadata !DIExpression()), !dbg !4186
  call void @llvm.dbg.declare(metadata i8** %11, metadata !4187, metadata !DIExpression()), !dbg !4188
  %12 = load i32, i32* %10, align 4, !dbg !4189
  %13 = call i8* @setlocale(i32 %12, i8* null) #10, !dbg !4190
  store i8* %13, i8** %11, align 8, !dbg !4188
  %14 = load i8*, i8** %11, align 8, !dbg !4191
  %15 = load i32, i32* @x.87
  %16 = load i32, i32* @y.88
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %14, !dbg !4192

originalBBalteredBB:                              ; preds = %originalBB, %1
  %23 = alloca i32, align 4
  %24 = alloca i8*, align 8
  store i32 %0, i32* %23, align 4
  call void @llvm.dbg.declare(metadata i32* %23, metadata !4193, metadata !DIExpression()), !dbg !4186
  call void @llvm.dbg.declare(metadata i8** %24, metadata !4196, metadata !DIExpression()), !dbg !4188
  %25 = load i32, i32* %23, align 4, !dbg !4189
  %26 = call i8* @setlocale(i32 %25, i8* null) #10, !dbg !4190
  store i8* %26, i8** %24, align 8, !dbg !4188
  %27 = load i8*, i8** %24, align 8, !dbg !4191
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fclose(%struct._IO_FILE* nonnull) #4 !dbg !4197 {
  %2 = load i32, i32* @x.89
  %3 = load i32, i32* @y.90
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca %struct._IO_FILE*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %11, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %11, metadata !4235, metadata !DIExpression()), !dbg !4236
  call void @llvm.dbg.declare(metadata i32* %12, metadata !4237, metadata !DIExpression()), !dbg !4238
  store i32 0, i32* %12, align 4, !dbg !4238
  call void @llvm.dbg.declare(metadata i32* %13, metadata !4239, metadata !DIExpression()), !dbg !4240
  call void @llvm.dbg.declare(metadata i32* %14, metadata !4241, metadata !DIExpression()), !dbg !4242
  store i32 0, i32* %14, align 4, !dbg !4242
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4243
  %16 = call i32 @fileno(%struct._IO_FILE* %15) #10, !dbg !4244
  store i32 %16, i32* %13, align 4, !dbg !4245
  %17 = add i32 %16, 1
  %18 = mul i32 %17, %17
  %19 = sub i32 %18, %17
  %20 = srem i32 %19, 2
  %21 = add i32 %20, -1
  %22 = load i32, i32* @x.89
  %23 = load i32, i32* @y.90
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %30

30:                                               ; preds = %originalBBpart2
  %31 = load i32, i32* @x.89
  %32 = load i32, i32* @y.90
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBB39, label %originalBB39alteredBB

originalBB39:                                     ; preds = %30, %originalBB39alteredBB
  %collatzVar = alloca i32
  %39 = load i32, i32* @x.89
  %40 = load i32, i32* @y.90
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart241, label %originalBB39alteredBB

originalBBpart241:                                ; preds = %originalBB39
  br label %47

47:                                               ; preds = %originalBBpart241
  %48 = load i32, i32* @x.89
  %49 = load i32, i32* @y.90
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBB43, label %originalBB43alteredBB

originalBB43:                                     ; preds = %47, %originalBB43alteredBB
  %56 = load i32, i32* @inVal0
  %57 = icmp sgt i32 %56, 1
  %58 = load i32, i32* @x.89
  %59 = load i32, i32* @y.90
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart245, label %originalBB43alteredBB

originalBBpart245:                                ; preds = %originalBB43
  br i1 %57, label %83, label %66

66:                                               ; preds = %originalBBpart245
  %67 = load i32, i32* @x.89
  %68 = load i32, i32* @y.90
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB47, label %originalBB47alteredBB

originalBB47:                                     ; preds = %66, %originalBB47alteredBB
  store i32 94, i32* %collatzVar
  %75 = load i32, i32* @x.89
  %76 = load i32, i32* @y.90
  %77 = sub i32 %75, 1
  %78 = mul i32 %75, %77
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %80, %81
  br i1 %82, label %originalBBpart249, label %originalBB47alteredBB

originalBBpart249:                                ; preds = %originalBB47
  br label %83

83:                                               ; preds = %originalBBpart249, %originalBBpart245
  %84 = load i32, i32* @x.89
  %85 = load i32, i32* @y.90
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBB51, label %originalBB51alteredBB

originalBB51:                                     ; preds = %83, %originalBB51alteredBB
  %92 = load i8**, i8*** @inVal1
  %93 = getelementptr inbounds i8*, i8** %92, i64 1
  %94 = load i8*, i8** %93
  %controle = call i32 @controle(i8* %94, i32 -1)
  store i32 %controle, i32* %collatzVar
  %95 = load i32, i32* @x.89
  %96 = load i32, i32* @y.90
  %97 = sub i32 %95, 1
  %98 = mul i32 %95, %97
  %99 = urem i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %96, 10
  %102 = or i1 %100, %101
  br i1 %102, label %originalBBpart253, label %originalBB51alteredBB

originalBBpart253:                                ; preds = %originalBB51
  br label %103

103:                                              ; preds = %originalBBpart2129, %originalBBpart2116, %originalBBpart253
  %104 = load i32, i32* @x.89
  %105 = load i32, i32* @y.90
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBB55, label %originalBB55alteredBB

originalBB55:                                     ; preds = %103, %originalBB55alteredBB
  %112 = load i32, i32* %collatzVar
  %113 = icmp sgt i32 %112, 1
  %114 = load i32, i32* @x.89
  %115 = load i32, i32* @y.90
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBBpart257, label %originalBB55alteredBB

originalBBpart257:                                ; preds = %originalBB55
  br i1 %113, label %122, label %221

122:                                              ; preds = %originalBBpart257
  %123 = load i32, i32* @x.89
  %124 = load i32, i32* @y.90
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %originalBB59, label %originalBB59alteredBB

originalBB59:                                     ; preds = %122, %originalBB59alteredBB
  %131 = load i32, i32* %collatzVar
  %132 = srem i32 %131, 2
  %133 = icmp eq i32 %132, 0
  %134 = load i32, i32* @x.89
  %135 = load i32, i32* @y.90
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBBpart263, label %originalBB59alteredBB

originalBBpart263:                                ; preds = %originalBB59
  br i1 %133, label %142, label %161

142:                                              ; preds = %originalBBpart263
  %143 = load i32, i32* @x.89
  %144 = load i32, i32* @y.90
  %145 = sub i32 %143, 1
  %146 = mul i32 %143, %145
  %147 = urem i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %148, %149
  br i1 %150, label %originalBB65, label %originalBB65alteredBB

originalBB65:                                     ; preds = %142, %originalBB65alteredBB
  %151 = load i32, i32* %collatzVar
  %152 = sdiv i32 %151, 2
  store i32 %152, i32* %collatzVar
  %153 = load i32, i32* @x.89
  %154 = load i32, i32* @y.90
  %155 = sub i32 %153, 1
  %156 = mul i32 %153, %155
  %157 = urem i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = icmp slt i32 %154, 10
  %160 = or i1 %158, %159
  br i1 %160, label %originalBBpart271, label %originalBB65alteredBB

originalBBpart271:                                ; preds = %originalBB65
  br label %181

161:                                              ; preds = %originalBBpart263
  %162 = load i32, i32* @x.89
  %163 = load i32, i32* @y.90
  %164 = sub i32 %162, 1
  %165 = mul i32 %162, %164
  %166 = urem i32 %165, 2
  %167 = icmp eq i32 %166, 0
  %168 = icmp slt i32 %163, 10
  %169 = or i1 %167, %168
  br i1 %169, label %originalBB73, label %originalBB73alteredBB

originalBB73:                                     ; preds = %161, %originalBB73alteredBB
  %170 = load i32, i32* %collatzVar
  %171 = mul i32 %170, 3
  %172 = add i32 %171, 1
  store i32 %172, i32* %collatzVar
  %173 = load i32, i32* @x.89
  %174 = load i32, i32* @y.90
  %175 = sub i32 %173, 1
  %176 = mul i32 %173, %175
  %177 = urem i32 %176, 2
  %178 = icmp eq i32 %177, 0
  %179 = icmp slt i32 %174, 10
  %180 = or i1 %178, %179
  br i1 %180, label %originalBBpart2100, label %originalBB73alteredBB

originalBBpart2100:                               ; preds = %originalBB73
  br label %181

181:                                              ; preds = %originalBBpart2100, %originalBBpart271
  %182 = load i32, i32* @x.89
  %183 = load i32, i32* @y.90
  %184 = sub i32 %182, 1
  %185 = mul i32 %182, %184
  %186 = urem i32 %185, 2
  %187 = icmp eq i32 %186, 0
  %188 = icmp slt i32 %183, 10
  %189 = or i1 %187, %188
  br i1 %189, label %originalBB102, label %originalBB102alteredBB

originalBB102:                                    ; preds = %181, %originalBB102alteredBB
  %190 = load i32, i32* %collatzVar
  %191 = sub i32 %21, %190
  %192 = icmp sgt i32 %191, -3
  %193 = load i32, i32* @x.89
  %194 = load i32, i32* @y.90
  %195 = sub i32 %193, 1
  %196 = mul i32 %193, %195
  %197 = urem i32 %196, 2
  %198 = icmp eq i32 %197, 0
  %199 = icmp slt i32 %194, 10
  %200 = or i1 %198, %199
  br i1 %200, label %originalBBpart2116, label %originalBB102alteredBB

originalBBpart2116:                               ; preds = %originalBB102
  br i1 %192, label %201, label %103

201:                                              ; preds = %originalBBpart2116
  %202 = load i32, i32* @x.89
  %203 = load i32, i32* @y.90
  %204 = sub i32 %202, 1
  %205 = mul i32 %202, %204
  %206 = urem i32 %205, 2
  %207 = icmp eq i32 %206, 0
  %208 = icmp slt i32 %203, 10
  %209 = or i1 %207, %208
  br i1 %209, label %originalBB118, label %originalBB118alteredBB

originalBB118:                                    ; preds = %201, %originalBB118alteredBB
  %210 = load i32, i32* %collatzVar
  %211 = add i32 %21, %210
  %212 = icmp slt i32 %211, 1
  %213 = load i32, i32* @x.89
  %214 = load i32, i32* @y.90
  %215 = sub i32 %213, 1
  %216 = mul i32 %213, %215
  %217 = urem i32 %216, 2
  %218 = icmp eq i32 %217, 0
  %219 = icmp slt i32 %214, 10
  %220 = or i1 %218, %219
  br i1 %220, label %originalBBpart2129, label %originalBB118alteredBB

originalBBpart2129:                               ; preds = %originalBB118
  br i1 %212, label %238, label %103

221:                                              ; preds = %originalBBpart257
  %222 = load i32, i32* @x.89
  %223 = load i32, i32* @y.90
  %224 = sub i32 %222, 1
  %225 = mul i32 %222, %224
  %226 = urem i32 %225, 2
  %227 = icmp eq i32 %226, 0
  %228 = icmp slt i32 %223, 10
  %229 = or i1 %227, %228
  br i1 %229, label %originalBB131, label %originalBB131alteredBB

originalBB131:                                    ; preds = %221, %originalBB131alteredBB
  %230 = load i32, i32* @x.89
  %231 = load i32, i32* @y.90
  %232 = sub i32 %230, 1
  %233 = mul i32 %230, %232
  %234 = urem i32 %233, 2
  %235 = icmp eq i32 %234, 0
  %236 = icmp slt i32 %231, 10
  %237 = or i1 %235, %236
  br i1 %237, label %originalBBpart2133, label %originalBB131alteredBB

originalBBpart2133:                               ; preds = %originalBB131
  ret i32 0

238:                                              ; preds = %originalBBpart2129
  %239 = load i32, i32* @x.89
  %240 = load i32, i32* @y.90
  %241 = sub i32 %239, 1
  %242 = mul i32 %239, %241
  %243 = urem i32 %242, 2
  %244 = icmp eq i32 %243, 0
  %245 = icmp slt i32 %240, 10
  %246 = or i1 %244, %245
  br i1 %246, label %originalBB135, label %originalBB135alteredBB

originalBB135:                                    ; preds = %238, %originalBB135alteredBB
  %247 = load i32, i32* %13, align 4, !dbg !4246
  %248 = icmp slt i32 %247, 0, !dbg !4248
  %249 = load i32, i32* @x.89
  %250 = load i32, i32* @y.90
  %251 = sub i32 %249, 1
  %252 = mul i32 %249, %251
  %253 = urem i32 %252, 2
  %254 = icmp eq i32 %253, 0
  %255 = icmp slt i32 %250, 10
  %256 = or i1 %254, %255
  br i1 %256, label %originalBBpart2137, label %originalBB135alteredBB

originalBBpart2137:                               ; preds = %originalBB135
  br i1 %248, label %257, label %276, !dbg !4249

257:                                              ; preds = %originalBBpart2137
  %258 = load i32, i32* @x.89
  %259 = load i32, i32* @y.90
  %260 = sub i32 %258, 1
  %261 = mul i32 %258, %260
  %262 = urem i32 %261, 2
  %263 = icmp eq i32 %262, 0
  %264 = icmp slt i32 %259, 10
  %265 = or i1 %263, %264
  br i1 %265, label %originalBB139, label %originalBB139alteredBB

originalBB139:                                    ; preds = %257, %originalBB139alteredBB
  %266 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4250
  %267 = call i32 @fclose(%struct._IO_FILE* %266), !dbg !4251
  store i32 %267, i32* %10, align 4, !dbg !4252
  %268 = load i32, i32* @x.89
  %269 = load i32, i32* @y.90
  %270 = sub i32 %268, 1
  %271 = mul i32 %268, %270
  %272 = urem i32 %271, 2
  %273 = icmp eq i32 %272, 0
  %274 = icmp slt i32 %269, 10
  %275 = or i1 %273, %274
  br i1 %275, label %originalBBpart2141, label %originalBB139alteredBB

originalBBpart2141:                               ; preds = %originalBB139
  br label %414, !dbg !4252

276:                                              ; preds = %originalBBpart2137
  %277 = load i32, i32* @x.89
  %278 = load i32, i32* @y.90
  %279 = sub i32 %277, 1
  %280 = mul i32 %277, %279
  %281 = urem i32 %280, 2
  %282 = icmp eq i32 %281, 0
  %283 = icmp slt i32 %278, 10
  %284 = or i1 %282, %283
  br i1 %284, label %originalBB143, label %originalBB143alteredBB

originalBB143:                                    ; preds = %276, %originalBB143alteredBB
  %285 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4253
  %286 = call i32 @__freading(%struct._IO_FILE* %285) #10, !dbg !4253
  %287 = icmp ne i32 %286, 0, !dbg !4253
  %288 = load i32, i32* @x.89
  %289 = load i32, i32* @y.90
  %290 = sub i32 %288, 1
  %291 = mul i32 %288, %290
  %292 = urem i32 %291, 2
  %293 = icmp eq i32 %292, 0
  %294 = icmp slt i32 %289, 10
  %295 = or i1 %293, %294
  br i1 %295, label %originalBBpart2145, label %originalBB143alteredBB

originalBBpart2145:                               ; preds = %originalBB143
  br i1 %287, label %296, label %317, !dbg !4255

296:                                              ; preds = %originalBBpart2145
  %297 = load i32, i32* @x.89
  %298 = load i32, i32* @y.90
  %299 = sub i32 %297, 1
  %300 = mul i32 %297, %299
  %301 = urem i32 %300, 2
  %302 = icmp eq i32 %301, 0
  %303 = icmp slt i32 %298, 10
  %304 = or i1 %302, %303
  br i1 %304, label %originalBB147, label %originalBB147alteredBB

originalBB147:                                    ; preds = %296, %originalBB147alteredBB
  %305 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4256
  %306 = call i32 @fileno(%struct._IO_FILE* %305) #10, !dbg !4257
  %307 = call i64 @lseek(i32 %306, i64 0, i32 1) #10, !dbg !4258
  %308 = icmp ne i64 %307, -1, !dbg !4259
  %309 = load i32, i32* @x.89
  %310 = load i32, i32* @y.90
  %311 = sub i32 %309, 1
  %312 = mul i32 %309, %311
  %313 = urem i32 %312, 2
  %314 = icmp eq i32 %313, 0
  %315 = icmp slt i32 %310, 10
  %316 = or i1 %314, %315
  br i1 %316, label %originalBBpart2149, label %originalBB147alteredBB

originalBBpart2149:                               ; preds = %originalBB147
  br i1 %308, label %317, label %356, !dbg !4260

317:                                              ; preds = %originalBBpart2149, %originalBBpart2145
  %318 = load i32, i32* @x.89
  %319 = load i32, i32* @y.90
  %320 = sub i32 %318, 1
  %321 = mul i32 %318, %320
  %322 = urem i32 %321, 2
  %323 = icmp eq i32 %322, 0
  %324 = icmp slt i32 %319, 10
  %325 = or i1 %323, %324
  br i1 %325, label %originalBB151, label %originalBB151alteredBB

originalBB151:                                    ; preds = %317, %originalBB151alteredBB
  %326 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4261
  %327 = call i32 @rpl_fflush(%struct._IO_FILE* %326), !dbg !4262
  %328 = icmp ne i32 %327, 0, !dbg !4262
  %329 = load i32, i32* @x.89
  %330 = load i32, i32* @y.90
  %331 = sub i32 %329, 1
  %332 = mul i32 %329, %331
  %333 = urem i32 %332, 2
  %334 = icmp eq i32 %333, 0
  %335 = icmp slt i32 %330, 10
  %336 = or i1 %334, %335
  br i1 %336, label %originalBBpart2153, label %originalBB151alteredBB

originalBBpart2153:                               ; preds = %originalBB151
  br i1 %328, label %337, label %356, !dbg !4263

337:                                              ; preds = %originalBBpart2153
  %338 = load i32, i32* @x.89
  %339 = load i32, i32* @y.90
  %340 = sub i32 %338, 1
  %341 = mul i32 %338, %340
  %342 = urem i32 %341, 2
  %343 = icmp eq i32 %342, 0
  %344 = icmp slt i32 %339, 10
  %345 = or i1 %343, %344
  br i1 %345, label %originalBB155, label %originalBB155alteredBB

originalBB155:                                    ; preds = %337, %originalBB155alteredBB
  %346 = call i32* @__errno_location() #15, !dbg !4264
  %347 = load i32, i32* %346, align 4, !dbg !4264
  store i32 %347, i32* %12, align 4, !dbg !4265
  %348 = load i32, i32* @x.89
  %349 = load i32, i32* @y.90
  %350 = sub i32 %348, 1
  %351 = mul i32 %348, %350
  %352 = urem i32 %351, 2
  %353 = icmp eq i32 %352, 0
  %354 = icmp slt i32 %349, 10
  %355 = or i1 %353, %354
  br i1 %355, label %originalBBpart2157, label %originalBB155alteredBB

originalBBpart2157:                               ; preds = %originalBB155
  br label %356, !dbg !4266

356:                                              ; preds = %originalBBpart2157, %originalBBpart2153, %originalBBpart2149
  %357 = load i32, i32* @x.89
  %358 = load i32, i32* @y.90
  %359 = sub i32 %357, 1
  %360 = mul i32 %357, %359
  %361 = urem i32 %360, 2
  %362 = icmp eq i32 %361, 0
  %363 = icmp slt i32 %358, 10
  %364 = or i1 %362, %363
  br i1 %364, label %originalBB159, label %originalBB159alteredBB

originalBB159:                                    ; preds = %356, %originalBB159alteredBB
  %365 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4267
  %366 = call i32 @fclose(%struct._IO_FILE* %365), !dbg !4268
  store i32 %366, i32* %14, align 4, !dbg !4269
  %367 = load i32, i32* %12, align 4, !dbg !4270
  %368 = icmp ne i32 %367, 0, !dbg !4272
  %369 = load i32, i32* @x.89
  %370 = load i32, i32* @y.90
  %371 = sub i32 %369, 1
  %372 = mul i32 %369, %371
  %373 = urem i32 %372, 2
  %374 = icmp eq i32 %373, 0
  %375 = icmp slt i32 %370, 10
  %376 = or i1 %374, %375
  br i1 %376, label %originalBBpart2161, label %originalBB159alteredBB

originalBBpart2161:                               ; preds = %originalBB159
  br i1 %368, label %377, label %396, !dbg !4273

377:                                              ; preds = %originalBBpart2161
  %378 = load i32, i32* @x.89
  %379 = load i32, i32* @y.90
  %380 = sub i32 %378, 1
  %381 = mul i32 %378, %380
  %382 = urem i32 %381, 2
  %383 = icmp eq i32 %382, 0
  %384 = icmp slt i32 %379, 10
  %385 = or i1 %383, %384
  br i1 %385, label %originalBB163, label %originalBB163alteredBB

originalBB163:                                    ; preds = %377, %originalBB163alteredBB
  %386 = load i32, i32* %12, align 4, !dbg !4274
  %387 = call i32* @__errno_location() #15, !dbg !4276
  store i32 %386, i32* %387, align 4, !dbg !4277
  store i32 -1, i32* %14, align 4, !dbg !4278
  %388 = load i32, i32* @x.89
  %389 = load i32, i32* @y.90
  %390 = sub i32 %388, 1
  %391 = mul i32 %388, %390
  %392 = urem i32 %391, 2
  %393 = icmp eq i32 %392, 0
  %394 = icmp slt i32 %389, 10
  %395 = or i1 %393, %394
  br i1 %395, label %originalBBpart2165, label %originalBB163alteredBB

originalBBpart2165:                               ; preds = %originalBB163
  br label %396, !dbg !4279

396:                                              ; preds = %originalBBpart2165, %originalBBpart2161
  %397 = load i32, i32* @x.89
  %398 = load i32, i32* @y.90
  %399 = sub i32 %397, 1
  %400 = mul i32 %397, %399
  %401 = urem i32 %400, 2
  %402 = icmp eq i32 %401, 0
  %403 = icmp slt i32 %398, 10
  %404 = or i1 %402, %403
  br i1 %404, label %originalBB167, label %originalBB167alteredBB

originalBB167:                                    ; preds = %396, %originalBB167alteredBB
  %405 = load i32, i32* %14, align 4, !dbg !4280
  store i32 %405, i32* %10, align 4, !dbg !4281
  %406 = load i32, i32* @x.89
  %407 = load i32, i32* @y.90
  %408 = sub i32 %406, 1
  %409 = mul i32 %406, %408
  %410 = urem i32 %409, 2
  %411 = icmp eq i32 %410, 0
  %412 = icmp slt i32 %407, 10
  %413 = or i1 %411, %412
  br i1 %413, label %originalBBpart2169, label %originalBB167alteredBB

originalBBpart2169:                               ; preds = %originalBB167
  br label %414, !dbg !4281

414:                                              ; preds = %originalBBpart2169, %originalBBpart2141
  %415 = load i32, i32* @x.89
  %416 = load i32, i32* @y.90
  %417 = sub i32 %415, 1
  %418 = mul i32 %415, %417
  %419 = urem i32 %418, 2
  %420 = icmp eq i32 %419, 0
  %421 = icmp slt i32 %416, 10
  %422 = or i1 %420, %421
  br i1 %422, label %originalBB171, label %originalBB171alteredBB

originalBB171:                                    ; preds = %414, %originalBB171alteredBB
  %423 = load i32, i32* %10, align 4, !dbg !4282
  %424 = load i32, i32* @x.89
  %425 = load i32, i32* @y.90
  %426 = sub i32 %424, 1
  %427 = mul i32 %424, %426
  %428 = urem i32 %427, 2
  %429 = icmp eq i32 %428, 0
  %430 = icmp slt i32 %425, 10
  %431 = or i1 %429, %430
  br i1 %431, label %originalBBpart2173, label %originalBB171alteredBB

originalBBpart2173:                               ; preds = %originalBB171
  ret i32 %423, !dbg !4282

originalBBalteredBB:                              ; preds = %originalBB, %1
  %432 = alloca i32, align 4
  %433 = alloca %struct._IO_FILE*, align 8
  %434 = alloca i32, align 4
  %435 = alloca i32, align 4
  %436 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %433, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %433, metadata !4283, metadata !DIExpression()), !dbg !4236
  call void @llvm.dbg.declare(metadata i32* %434, metadata !4322, metadata !DIExpression()), !dbg !4238
  store i32 0, i32* %434, align 4, !dbg !4238
  call void @llvm.dbg.declare(metadata i32* %435, metadata !4323, metadata !DIExpression()), !dbg !4240
  call void @llvm.dbg.declare(metadata i32* %436, metadata !4324, metadata !DIExpression()), !dbg !4242
  store i32 0, i32* %436, align 4, !dbg !4242
  %437 = load %struct._IO_FILE*, %struct._IO_FILE** %433, align 8, !dbg !4243
  %438 = call i32 @fileno(%struct._IO_FILE* %437) #10, !dbg !4244
  store i32 %438, i32* %435, align 4, !dbg !4245
  %_ = sub i32 %438, 1
  %gen = mul i32 %_, 1
  %_1 = sub i32 0, %438
  %gen2 = add i32 %_1, 1
  %_3 = shl i32 %438, 1
  %_4 = sub i32 %438, 1
  %gen5 = mul i32 %_4, 1
  %_6 = shl i32 %438, 1
  %439 = add i32 %438, 1
  %_7 = sub i32 %439, %439
  %gen8 = mul i32 %_7, %439
  %_9 = sub i32 %439, %439
  %gen10 = mul i32 %_9, %439
  %_11 = sub i32 0, %439
  %gen12 = add i32 %_11, %439
  %_13 = sub i32 0, %439
  %gen14 = add i32 %_13, %439
  %_15 = sub i32 0, %439
  %gen16 = add i32 %_15, %439
  %_17 = sub i32 0, %439
  %gen18 = add i32 %_17, %439
  %_19 = sub i32 0, %439
  %gen20 = add i32 %_19, %439
  %_21 = sub i32 %439, %439
  %gen22 = mul i32 %_21, %439
  %_23 = sub i32 %439, %439
  %gen24 = mul i32 %_23, %439
  %440 = mul i32 %439, %439
  %_25 = sub i32 0, %440
  %gen26 = add i32 %_25, %439
  %_27 = sub i32 %440, %439
  %gen28 = mul i32 %_27, %439
  %441 = sub i32 %440, %439
  %_29 = sub i32 %441, 2
  %gen30 = mul i32 %_29, 2
  %_31 = shl i32 %441, 2
  %_32 = shl i32 %441, 2
  %_33 = sub i32 %441, 2
  %gen34 = mul i32 %_33, 2
  %_35 = sub i32 %441, 2
  %gen36 = mul i32 %_35, 2
  %442 = srem i32 %441, 2
  %_37 = sub i32 %442, -1
  %gen38 = mul i32 %_37, -1
  %443 = add i32 %442, -1
  br label %originalBB

originalBB39alteredBB:                            ; preds = %originalBB39, %30
  %collatzVaralteredBB = alloca i32
  br label %originalBB39

originalBB43alteredBB:                            ; preds = %originalBB43, %47
  %444 = load i32, i32* @inVal0
  %445 = icmp sgt i32 %444, 1
  br label %originalBB43

originalBB47alteredBB:                            ; preds = %originalBB47, %66
  store i32 94, i32* %collatzVar
  br label %originalBB47

originalBB51alteredBB:                            ; preds = %originalBB51, %83
  %446 = load i8**, i8*** @inVal1
  %447 = getelementptr inbounds i8*, i8** %446, i64 1
  %448 = load i8*, i8** %447
  %controlealteredBB = call i32 @controle(i8* %448, i32 -1)
  store i32 %controlealteredBB, i32* %collatzVar
  br label %originalBB51

originalBB55alteredBB:                            ; preds = %originalBB55, %103
  %449 = load i32, i32* %collatzVar
  %450 = icmp sgt i32 %449, 1
  br label %originalBB55

originalBB59alteredBB:                            ; preds = %originalBB59, %122
  %451 = load i32, i32* %collatzVar
  %_60 = shl i32 %451, 2
  %_61 = shl i32 %451, 2
  %452 = srem i32 %451, 2
  %453 = icmp eq i32 %452, 0
  br label %originalBB59

originalBB65alteredBB:                            ; preds = %originalBB65, %142
  %454 = load i32, i32* %collatzVar
  %_66 = sub i32 %454, 2
  %gen67 = mul i32 %_66, 2
  %_68 = shl i32 %454, 2
  %_69 = shl i32 %454, 2
  %455 = sdiv i32 %454, 2
  store i32 %455, i32* %collatzVar
  br label %originalBB65

originalBB73alteredBB:                            ; preds = %originalBB73, %161
  %456 = load i32, i32* %collatzVar
  %_74 = shl i32 %456, 3
  %_75 = sub i32 0, %456
  %gen76 = add i32 %_75, 3
  %_77 = sub i32 0, %456
  %gen78 = add i32 %_77, 3
  %_79 = shl i32 %456, 3
  %_80 = sub i32 %456, 3
  %gen81 = mul i32 %_80, 3
  %_82 = sub i32 %456, 3
  %gen83 = mul i32 %_82, 3
  %_84 = sub i32 0, %456
  %gen85 = add i32 %_84, 3
  %457 = mul i32 %456, 3
  %_86 = sub i32 %457, 1
  %gen87 = mul i32 %_86, 1
  %_88 = sub i32 %457, 1
  %gen89 = mul i32 %_88, 1
  %_90 = sub i32 %457, 1
  %gen91 = mul i32 %_90, 1
  %_92 = sub i32 0, %457
  %gen93 = add i32 %_92, 1
  %_94 = shl i32 %457, 1
  %_95 = sub i32 %457, 1
  %gen96 = mul i32 %_95, 1
  %_97 = sub i32 0, %457
  %gen98 = add i32 %_97, 1
  %458 = add i32 %457, 1
  store i32 %458, i32* %collatzVar
  br label %originalBB73

originalBB102alteredBB:                           ; preds = %originalBB102, %181
  %459 = load i32, i32* %collatzVar
  %_103 = shl i32 %21, %459
  %_104 = sub i32 %21, %459
  %gen105 = mul i32 %_104, %459
  %_106 = shl i32 %21, %459
  %_107 = sub i32 %21, %459
  %gen108 = mul i32 %_107, %459
  %_109 = sub i32 %21, %459
  %gen110 = mul i32 %_109, %459
  %_111 = sub i32 0, %21
  %gen112 = add i32 %_111, %459
  %_113 = sub i32 0, %21
  %gen114 = add i32 %_113, %459
  %460 = sub i32 %21, %459
  %461 = icmp sgt i32 %460, -3
  br label %originalBB102

originalBB118alteredBB:                           ; preds = %originalBB118, %201
  %462 = load i32, i32* %collatzVar
  %_119 = sub i32 0, %21
  %gen120 = add i32 %_119, %462
  %_121 = shl i32 %21, %462
  %_122 = sub i32 0, %21
  %gen123 = add i32 %_122, %462
  %_124 = sub i32 %21, %462
  %gen125 = mul i32 %_124, %462
  %_126 = sub i32 0, %21
  %gen127 = add i32 %_126, %462
  %463 = add i32 %21, %462
  %464 = icmp slt i32 %463, 1
  br label %originalBB118

originalBB131alteredBB:                           ; preds = %originalBB131, %221
  br label %originalBB131

originalBB135alteredBB:                           ; preds = %originalBB135, %238
  %465 = load i32, i32* %13, align 4, !dbg !4246
  %466 = icmp slt i32 %465, 0, !dbg !4248
  br label %originalBB135

originalBB139alteredBB:                           ; preds = %originalBB139, %257
  %467 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4250
  %468 = call i32 @fclose(%struct._IO_FILE* %467), !dbg !4251
  store i32 %468, i32* %10, align 4, !dbg !4252
  br label %originalBB139

originalBB143alteredBB:                           ; preds = %originalBB143, %276
  %469 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4253
  %470 = call i32 @__freading(%struct._IO_FILE* %469) #10, !dbg !4253
  %471 = icmp ne i32 %470, 0, !dbg !4253
  br label %originalBB143

originalBB147alteredBB:                           ; preds = %originalBB147, %296
  %472 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4256
  %473 = call i32 @fileno(%struct._IO_FILE* %472) #10, !dbg !4257
  %474 = call i64 @lseek(i32 %473, i64 0, i32 1) #10, !dbg !4258
  %475 = icmp ne i64 %474, -1, !dbg !4259
  br label %originalBB147

originalBB151alteredBB:                           ; preds = %originalBB151, %317
  %476 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4261
  %477 = call i32 @rpl_fflush(%struct._IO_FILE* %476), !dbg !4262
  %478 = icmp ne i32 %477, 0, !dbg !4262
  br label %originalBB151

originalBB155alteredBB:                           ; preds = %originalBB155, %337
  %479 = call i32* @__errno_location() #15, !dbg !4264
  %480 = load i32, i32* %479, align 4, !dbg !4264
  store i32 %480, i32* %12, align 4, !dbg !4265
  br label %originalBB155

originalBB159alteredBB:                           ; preds = %originalBB159, %356
  %481 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4267
  %482 = call i32 @fclose(%struct._IO_FILE* %481), !dbg !4268
  store i32 %482, i32* %14, align 4, !dbg !4269
  %483 = load i32, i32* %12, align 4, !dbg !4270
  %484 = icmp ne i32 %483, 0, !dbg !4272
  br label %originalBB159

originalBB163alteredBB:                           ; preds = %originalBB163, %377
  %485 = load i32, i32* %12, align 4, !dbg !4274
  %486 = call i32* @__errno_location() #15, !dbg !4276
  store i32 %485, i32* %486, align 4, !dbg !4277
  store i32 -1, i32* %14, align 4, !dbg !4278
  br label %originalBB163

originalBB167alteredBB:                           ; preds = %originalBB167, %396
  %487 = load i32, i32* %14, align 4, !dbg !4280
  store i32 %487, i32* %10, align 4, !dbg !4281
  br label %originalBB167

originalBB171alteredBB:                           ; preds = %originalBB171, %414
  %488 = load i32, i32* %10, align 4, !dbg !4282
  br label %originalBB171
}

; Function Attrs: nounwind
declare dso_local i32 @fileno(%struct._IO_FILE*) #2

declare dso_local i32 @fclose(%struct._IO_FILE*) #3

; Function Attrs: nounwind
declare dso_local i32 @__freading(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare dso_local i64 @lseek(i32, i64, i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fflush(%struct._IO_FILE*) #4 !dbg !4325 {
  %2 = load i32, i32* @x.91
  %3 = load i32, i32* @y.92
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %11, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %11, metadata !4363, metadata !DIExpression()), !dbg !4364
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4365
  %13 = icmp eq %struct._IO_FILE* %12, null, !dbg !4367
  %14 = load i32, i32* @x.91
  %15 = load i32, i32* @y.92
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %13, label %42, label %22, !dbg !4368

22:                                               ; preds = %originalBBpart2
  %23 = load i32, i32* @x.91
  %24 = load i32, i32* @y.92
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %22, %originalBB1alteredBB
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4369
  %32 = call i32 @__freading(%struct._IO_FILE* %31) #10, !dbg !4369
  %33 = icmp ne i32 %32, 0, !dbg !4369
  %34 = load i32, i32* @x.91
  %35 = load i32, i32* @y.92
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %33, label %61, label %42, !dbg !4370

42:                                               ; preds = %originalBBpart24, %originalBBpart2
  %43 = load i32, i32* @x.91
  %44 = load i32, i32* @y.92
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %42, %originalBB6alteredBB
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4371
  %52 = call i32 @fflush(%struct._IO_FILE* %51), !dbg !4372
  store i32 %52, i32* %10, align 4, !dbg !4373
  %53 = load i32, i32* @x.91
  %54 = load i32, i32* @y.92
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %81, !dbg !4373

61:                                               ; preds = %originalBBpart24
  %62 = load i32, i32* @x.91
  %63 = load i32, i32* @y.92
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %61, %originalBB10alteredBB
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4374
  call void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE* %70), !dbg !4375
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4376
  %72 = call i32 @fflush(%struct._IO_FILE* %71), !dbg !4377
  store i32 %72, i32* %10, align 4, !dbg !4378
  %73 = load i32, i32* @x.91
  %74 = load i32, i32* @y.92
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %81, !dbg !4378

81:                                               ; preds = %originalBBpart212, %originalBBpart28
  %82 = load i32, i32* @x.91
  %83 = load i32, i32* @y.92
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %81, %originalBB14alteredBB
  %90 = load i32, i32* %10, align 4, !dbg !4379
  %91 = load i32, i32* @x.91
  %92 = load i32, i32* @y.92
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  ret i32 %90, !dbg !4379

originalBBalteredBB:                              ; preds = %originalBB, %1
  %99 = alloca i32, align 4
  %100 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %100, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %100, metadata !4380, metadata !DIExpression()), !dbg !4364
  %101 = load %struct._IO_FILE*, %struct._IO_FILE** %100, align 8, !dbg !4365
  %102 = icmp eq %struct._IO_FILE* %101, null, !dbg !4367
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %22
  %103 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4369
  %104 = call i32 @__freading(%struct._IO_FILE* %103) #10, !dbg !4369
  %105 = icmp ne i32 %104, 0, !dbg !4369
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %42
  %106 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4371
  %107 = call i32 @fflush(%struct._IO_FILE* %106), !dbg !4372
  store i32 %107, i32* %10, align 4, !dbg !4373
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %61
  %108 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4374
  call void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE* %108), !dbg !4375
  %109 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !4376
  %110 = call i32 @fflush(%struct._IO_FILE* %109), !dbg !4377
  store i32 %110, i32* %10, align 4, !dbg !4378
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %81
  %111 = load i32, i32* %10, align 4, !dbg !4379
  br label %originalBB14
}

declare dso_local i32 @fflush(%struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE*) #4 !dbg !4419 {
  %2 = load i32, i32* @x.93
  %3 = load i32, i32* @y.94
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %10, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %10, metadata !4422, metadata !DIExpression()), !dbg !4423
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %10, align 8, !dbg !4424
  %12 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %11, i32 0, i32 0, !dbg !4426
  %13 = load i32, i32* %12, align 8, !dbg !4426
  %14 = and i32 %13, 256, !dbg !4427
  %15 = icmp ne i32 %14, 0, !dbg !4427
  %16 = load i32, i32* @x.93
  %17 = load i32, i32* @y.94
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %24, label %43, !dbg !4428

24:                                               ; preds = %originalBBpart2
  %25 = load i32, i32* @x.93
  %26 = load i32, i32* @y.94
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %24, %originalBB1alteredBB
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** %10, align 8, !dbg !4429
  %34 = call i32 @rpl_fseeko(%struct._IO_FILE* %33, i64 0, i32 1), !dbg !4430
  %35 = load i32, i32* @x.93
  %36 = load i32, i32* @y.94
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %43, !dbg !4430

43:                                               ; preds = %originalBBpart24, %originalBBpart2
  %44 = load i32, i32* @x.93
  %45 = load i32, i32* @y.94
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %43, %originalBB6alteredBB
  %52 = load i32, i32* @x.93
  %53 = load i32, i32* @y.94
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  ret void, !dbg !4431

originalBBalteredBB:                              ; preds = %originalBB, %1
  %60 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %60, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %60, metadata !4432, metadata !DIExpression()), !dbg !4423
  %61 = load %struct._IO_FILE*, %struct._IO_FILE** %60, align 8, !dbg !4424
  %62 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %61, i32 0, i32 0, !dbg !4426
  %63 = load i32, i32* %62, align 8, !dbg !4426
  %_ = sub i32 %63, 256
  %gen = mul i32 %_, 256
  %64 = and i32 %63, 256, !dbg !4427
  %65 = icmp ne i32 %64, 0, !dbg !4427
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %24
  %66 = load %struct._IO_FILE*, %struct._IO_FILE** %10, align 8, !dbg !4429
  %67 = call i32 @rpl_fseeko(%struct._IO_FILE* %66, i64 0, i32 1), !dbg !4430
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %43
  br label %originalBB6
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fseeko(%struct._IO_FILE* nonnull, i64, i32) #4 !dbg !4471 {
  %4 = load i32, i32* @x.95
  %5 = load i32, i32* @y.96
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca %struct._IO_FILE*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i32, align 4
  %16 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %13, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %13, metadata !4510, metadata !DIExpression()), !dbg !4511
  store i64 %1, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !4512, metadata !DIExpression()), !dbg !4513
  store i32 %2, i32* %15, align 4
  call void @llvm.dbg.declare(metadata i32* %15, metadata !4514, metadata !DIExpression()), !dbg !4515
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4516
  %18 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %17, i32 0, i32 2, !dbg !4518
  %19 = load i8*, i8** %18, align 8, !dbg !4518
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4519
  %21 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %20, i32 0, i32 1, !dbg !4520
  %22 = load i8*, i8** %21, align 8, !dbg !4520
  %23 = icmp eq i8* %19, %22, !dbg !4521
  %24 = load i32, i32* @x.95
  %25 = load i32, i32* @y.96
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %23, label %32, label %190, !dbg !4522

32:                                               ; preds = %originalBBpart2
  %33 = load i32, i32* @x.95
  %34 = load i32, i32* @y.96
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %32, %originalBB1alteredBB
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4523
  %42 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %41, i32 0, i32 5, !dbg !4524
  %43 = load i8*, i8** %42, align 8, !dbg !4524
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4525
  %45 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %44, i32 0, i32 4, !dbg !4526
  %46 = load i8*, i8** %45, align 8, !dbg !4526
  %47 = icmp eq i8* %43, %46, !dbg !4527
  %48 = load i32, i32* @x.95
  %49 = load i32, i32* @y.96
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %47, label %56, label %190, !dbg !4528

56:                                               ; preds = %originalBBpart24
  %57 = load i32, i32* @x.95
  %58 = load i32, i32* @y.96
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %56, %originalBB6alteredBB
  %65 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4529
  %66 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %65, i32 0, i32 9, !dbg !4530
  %67 = load i8*, i8** %66, align 8, !dbg !4530
  %68 = icmp eq i8* %67, null, !dbg !4531
  %69 = load i32, i32* @x.95
  %70 = load i32, i32* @y.96
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %68, label %77, label %190, !dbg !4532

77:                                               ; preds = %originalBBpart28
  call void @llvm.dbg.declare(metadata i64* %16, metadata !4533, metadata !DIExpression()), !dbg !4535
  %78 = load i32, i32* @x.95
  %79 = load i32, i32* @y.96
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %77, %originalBB10alteredBB
  %86 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4536
  %87 = call i32 @fileno(%struct._IO_FILE* %86) #10, !dbg !4537
  %88 = load i64, i64* %14, align 8, !dbg !4538
  %89 = load i32, i32* %15, align 4, !dbg !4539
  %90 = call i64 @lseek(i32 %87, i64 %88, i32 %89) #10, !dbg !4540
  store i64 %90, i64* %16, align 8, !dbg !4535
  %91 = load i64, i64* %16, align 8, !dbg !4541
  %92 = trunc i64 %91 to i32
  %93 = mul i32 %92, -3
  %94 = add i32 %93, -4
  %95 = trunc i64 %88 to i32
  %96 = mul i32 %95, 2
  %97 = add i32 %96, -5
  %98 = mul i32 %94, %94
  %99 = mul i32 %98, 7
  %100 = sub i32 %99, 1
  %101 = mul i32 %97, %97
  %102 = sub i32 %100, %101
  %103 = mul i32 %102, -2
  %104 = add i32 %103, -1
  %105 = icmp ne i32 %104, -1
  %106 = load i32, i32* @x.95
  %107 = load i32, i32* @y.96
  %108 = sub i32 %106, 1
  %109 = mul i32 %106, %108
  %110 = urem i32 %109, 2
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %111, %112
  br i1 %113, label %originalBBpart284, label %originalBB10alteredBB

originalBBpart284:                                ; preds = %originalBB10
  br i1 %105, label %131, label %114

114:                                              ; preds = %originalBBpart284
  %115 = load i32, i32* @x.95
  %116 = load i32, i32* @y.96
  %117 = sub i32 %115, 1
  %118 = mul i32 %115, %117
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %120, %121
  br i1 %122, label %originalBB86, label %originalBB86alteredBB

originalBB86:                                     ; preds = %114, %originalBB86alteredBB
  %123 = load i32, i32* @x.95
  %124 = load i32, i32* @y.96
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %originalBBpart288, label %originalBB86alteredBB

originalBBpart288:                                ; preds = %originalBB86
  ret i32 0

131:                                              ; preds = %originalBBpart284
  %132 = load i32, i32* @x.95
  %133 = load i32, i32* @y.96
  %134 = sub i32 %132, 1
  %135 = mul i32 %132, %134
  %136 = urem i32 %135, 2
  %137 = icmp eq i32 %136, 0
  %138 = icmp slt i32 %133, 10
  %139 = or i1 %137, %138
  br i1 %139, label %originalBB90, label %originalBB90alteredBB

originalBB90:                                     ; preds = %131, %originalBB90alteredBB
  %140 = icmp eq i64 %91, -1, !dbg !4543
  %141 = load i32, i32* @x.95
  %142 = load i32, i32* @y.96
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBBpart292, label %originalBB90alteredBB

originalBBpart292:                                ; preds = %originalBB90
  br i1 %140, label %149, label %166, !dbg !4544

149:                                              ; preds = %originalBBpart292
  %150 = load i32, i32* @x.95
  %151 = load i32, i32* @y.96
  %152 = sub i32 %150, 1
  %153 = mul i32 %150, %152
  %154 = urem i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %155, %156
  br i1 %157, label %originalBB94, label %originalBB94alteredBB

originalBB94:                                     ; preds = %149, %originalBB94alteredBB
  store i32 -1, i32* %12, align 4, !dbg !4545
  %158 = load i32, i32* @x.95
  %159 = load i32, i32* @y.96
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBBpart296, label %originalBB94alteredBB

originalBBpart296:                                ; preds = %originalBB94
  br label %211, !dbg !4545

166:                                              ; preds = %originalBBpart292
  %167 = load i32, i32* @x.95
  %168 = load i32, i32* @y.96
  %169 = sub i32 %167, 1
  %170 = mul i32 %167, %169
  %171 = urem i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %172, %173
  br i1 %174, label %originalBB98, label %originalBB98alteredBB

originalBB98:                                     ; preds = %166, %originalBB98alteredBB
  %175 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4547
  %176 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %175, i32 0, i32 0, !dbg !4548
  %177 = load i32, i32* %176, align 8, !dbg !4549
  %178 = and i32 %177, -17, !dbg !4549
  store i32 %178, i32* %176, align 8, !dbg !4549
  %179 = load i64, i64* %16, align 8, !dbg !4550
  %180 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4551
  %181 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %180, i32 0, i32 21, !dbg !4552
  store i64 %179, i64* %181, align 8, !dbg !4553
  store i32 0, i32* %12, align 4, !dbg !4554
  %182 = load i32, i32* @x.95
  %183 = load i32, i32* @y.96
  %184 = sub i32 %182, 1
  %185 = mul i32 %182, %184
  %186 = urem i32 %185, 2
  %187 = icmp eq i32 %186, 0
  %188 = icmp slt i32 %183, 10
  %189 = or i1 %187, %188
  br i1 %189, label %originalBBpart2106, label %originalBB98alteredBB

originalBBpart2106:                               ; preds = %originalBB98
  br label %211, !dbg !4554

190:                                              ; preds = %originalBBpart28, %originalBBpart24, %originalBBpart2
  %191 = load i32, i32* @x.95
  %192 = load i32, i32* @y.96
  %193 = sub i32 %191, 1
  %194 = mul i32 %191, %193
  %195 = urem i32 %194, 2
  %196 = icmp eq i32 %195, 0
  %197 = icmp slt i32 %192, 10
  %198 = or i1 %196, %197
  br i1 %198, label %originalBB108, label %originalBB108alteredBB

originalBB108:                                    ; preds = %190, %originalBB108alteredBB
  %199 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4555
  %200 = load i64, i64* %14, align 8, !dbg !4556
  %201 = load i32, i32* %15, align 4, !dbg !4557
  %202 = call i32 @fseeko(%struct._IO_FILE* %199, i64 %200, i32 %201), !dbg !4558
  store i32 %202, i32* %12, align 4, !dbg !4559
  %203 = load i32, i32* @x.95
  %204 = load i32, i32* @y.96
  %205 = sub i32 %203, 1
  %206 = mul i32 %203, %205
  %207 = urem i32 %206, 2
  %208 = icmp eq i32 %207, 0
  %209 = icmp slt i32 %204, 10
  %210 = or i1 %208, %209
  br i1 %210, label %originalBBpart2110, label %originalBB108alteredBB

originalBBpart2110:                               ; preds = %originalBB108
  br label %211, !dbg !4559

211:                                              ; preds = %originalBBpart2110, %originalBBpart2106, %originalBBpart296
  %212 = load i32, i32* @x.95
  %213 = load i32, i32* @y.96
  %214 = sub i32 %212, 1
  %215 = mul i32 %212, %214
  %216 = urem i32 %215, 2
  %217 = icmp eq i32 %216, 0
  %218 = icmp slt i32 %213, 10
  %219 = or i1 %217, %218
  br i1 %219, label %originalBB112, label %originalBB112alteredBB

originalBB112:                                    ; preds = %211, %originalBB112alteredBB
  %220 = load i32, i32* %12, align 4, !dbg !4560
  %221 = load i32, i32* @x.95
  %222 = load i32, i32* @y.96
  %223 = sub i32 %221, 1
  %224 = mul i32 %221, %223
  %225 = urem i32 %224, 2
  %226 = icmp eq i32 %225, 0
  %227 = icmp slt i32 %222, 10
  %228 = or i1 %226, %227
  br i1 %228, label %originalBBpart2114, label %originalBB112alteredBB

originalBBpart2114:                               ; preds = %originalBB112
  ret i32 %220, !dbg !4560

originalBBalteredBB:                              ; preds = %originalBB, %3
  %229 = alloca i32, align 4
  %230 = alloca %struct._IO_FILE*, align 8
  %231 = alloca i64, align 8
  %232 = alloca i32, align 4
  %233 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %230, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %230, metadata !4561, metadata !DIExpression()), !dbg !4511
  store i64 %1, i64* %231, align 8
  call void @llvm.dbg.declare(metadata i64* %231, metadata !4600, metadata !DIExpression()), !dbg !4513
  store i32 %2, i32* %232, align 4
  call void @llvm.dbg.declare(metadata i32* %232, metadata !4601, metadata !DIExpression()), !dbg !4515
  %234 = load %struct._IO_FILE*, %struct._IO_FILE** %230, align 8, !dbg !4516
  %235 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %234, i32 0, i32 2, !dbg !4518
  %236 = load i8*, i8** %235, align 8, !dbg !4518
  %237 = load %struct._IO_FILE*, %struct._IO_FILE** %230, align 8, !dbg !4519
  %238 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %237, i32 0, i32 1, !dbg !4520
  %239 = load i8*, i8** %238, align 8, !dbg !4520
  %240 = icmp eq i8* %236, %239, !dbg !4521
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %32
  %241 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4523
  %242 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %241, i32 0, i32 5, !dbg !4524
  %243 = load i8*, i8** %242, align 8, !dbg !4524
  %244 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4525
  %245 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %244, i32 0, i32 4, !dbg !4526
  %246 = load i8*, i8** %245, align 8, !dbg !4526
  %247 = icmp eq i8* %243, %246, !dbg !4527
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %56
  %248 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4529
  %249 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %248, i32 0, i32 9, !dbg !4530
  %250 = load i8*, i8** %249, align 8, !dbg !4530
  %251 = icmp eq i8* %250, null, !dbg !4531
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %77
  %252 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4536
  %253 = call i32 @fileno(%struct._IO_FILE* %252) #10, !dbg !4537
  %254 = load i64, i64* %14, align 8, !dbg !4538
  %255 = load i32, i32* %15, align 4, !dbg !4539
  %256 = call i64 @lseek(i32 %253, i64 %254, i32 %255) #10, !dbg !4540
  store i64 %256, i64* %16, align 8, !dbg !4535
  %257 = load i64, i64* %16, align 8, !dbg !4541
  %258 = trunc i64 %257 to i32
  %_ = shl i32 %258, -3
  %_11 = sub i32 0, %258
  %gen = add i32 %_11, -3
  %_12 = shl i32 %258, -3
  %_13 = sub i32 0, %258
  %gen14 = add i32 %_13, -3
  %259 = mul i32 %258, -3
  %_15 = shl i32 %259, -4
  %_16 = sub i32 %259, -4
  %gen17 = mul i32 %_16, -4
  %_18 = sub i32 0, %259
  %gen19 = add i32 %_18, -4
  %_20 = sub i32 %259, -4
  %gen21 = mul i32 %_20, -4
  %_22 = shl i32 %259, -4
  %_23 = sub i32 0, %259
  %gen24 = add i32 %_23, -4
  %260 = add i32 %259, -4
  %261 = trunc i64 %254 to i32
  %_25 = sub i32 %261, 2
  %gen26 = mul i32 %_25, 2
  %_27 = sub i32 0, %261
  %gen28 = add i32 %_27, 2
  %262 = mul i32 %261, 2
  %_29 = shl i32 %262, -5
  %263 = add i32 %262, -5
  %_30 = sub i32 %260, %260
  %gen31 = mul i32 %_30, %260
  %_32 = sub i32 0, %260
  %gen33 = add i32 %_32, %260
  %_34 = sub i32 0, %260
  %gen35 = add i32 %_34, %260
  %_36 = shl i32 %260, %260
  %_37 = sub i32 0, %260
  %gen38 = add i32 %_37, %260
  %_39 = sub i32 %260, %260
  %gen40 = mul i32 %_39, %260
  %_41 = sub i32 0, %260
  %gen42 = add i32 %_41, %260
  %264 = mul i32 %260, %260
  %_43 = sub i32 0, %264
  %gen44 = add i32 %_43, 7
  %265 = mul i32 %264, 7
  %_45 = sub i32 0, %265
  %gen46 = add i32 %_45, 1
  %_47 = shl i32 %265, 1
  %_48 = sub i32 %265, 1
  %gen49 = mul i32 %_48, 1
  %_50 = shl i32 %265, 1
  %_51 = sub i32 %265, 1
  %gen52 = mul i32 %_51, 1
  %_53 = sub i32 %265, 1
  %gen54 = mul i32 %_53, 1
  %266 = sub i32 %265, 1
  %_55 = sub i32 %263, %263
  %gen56 = mul i32 %_55, %263
  %_57 = sub i32 0, %263
  %gen58 = add i32 %_57, %263
  %_59 = sub i32 0, %263
  %gen60 = add i32 %_59, %263
  %267 = mul i32 %263, %263
  %_61 = sub i32 0, %266
  %gen62 = add i32 %_61, %267
  %_63 = shl i32 %266, %267
  %_64 = sub i32 0, %266
  %gen65 = add i32 %_64, %267
  %_66 = shl i32 %266, %267
  %268 = sub i32 %266, %267
  %_67 = shl i32 %268, -2
  %_68 = shl i32 %268, -2
  %_69 = sub i32 %268, -2
  %gen70 = mul i32 %_69, -2
  %_71 = sub i32 0, %268
  %gen72 = add i32 %_71, -2
  %_73 = sub i32 0, %268
  %gen74 = add i32 %_73, -2
  %269 = mul i32 %268, -2
  %_75 = sub i32 %269, -1
  %gen76 = mul i32 %_75, -1
  %_77 = sub i32 0, %269
  %gen78 = add i32 %_77, -1
  %_79 = sub i32 %269, -1
  %gen80 = mul i32 %_79, -1
  %_81 = sub i32 %269, -1
  %gen82 = mul i32 %_81, -1
  %270 = add i32 %269, -1
  %271 = icmp ne i32 %270, -1
  br label %originalBB10

originalBB86alteredBB:                            ; preds = %originalBB86, %114
  br label %originalBB86

originalBB90alteredBB:                            ; preds = %originalBB90, %131
  %272 = icmp eq i64 %91, -1, !dbg !4543
  br label %originalBB90

originalBB94alteredBB:                            ; preds = %originalBB94, %149
  store i32 -1, i32* %12, align 4, !dbg !4545
  br label %originalBB94

originalBB98alteredBB:                            ; preds = %originalBB98, %166
  %273 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4547
  %274 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %273, i32 0, i32 0, !dbg !4548
  %275 = load i32, i32* %274, align 8, !dbg !4549
  %_99 = sub i32 %275, -17
  %gen100 = mul i32 %_99, -17
  %_101 = sub i32 0, %275
  %gen102 = add i32 %_101, -17
  %_103 = shl i32 %275, -17
  %_104 = shl i32 %275, -17
  %276 = and i32 %275, -17, !dbg !4549
  store i32 %276, i32* %274, align 8, !dbg !4549
  %277 = load i64, i64* %16, align 8, !dbg !4550
  %278 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4551
  %279 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %278, i32 0, i32 21, !dbg !4552
  store i64 %277, i64* %279, align 8, !dbg !4553
  store i32 0, i32* %12, align 4, !dbg !4554
  br label %originalBB98

originalBB108alteredBB:                           ; preds = %originalBB108, %190
  %280 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !4555
  %281 = load i64, i64* %14, align 8, !dbg !4556
  %282 = load i32, i32* %15, align 4, !dbg !4557
  %283 = call i32 @fseeko(%struct._IO_FILE* %280, i64 %281, i32 %282), !dbg !4558
  store i32 %283, i32* %12, align 4, !dbg !4559
  br label %originalBB108

originalBB112alteredBB:                           ; preds = %originalBB112, %211
  %284 = load i32, i32* %12, align 4, !dbg !4560
  br label %originalBB112
}

declare dso_local i32 @fseeko(%struct._IO_FILE*, i64, i32) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @c_tolower(i32) #4 !dbg !4602 {
  %2 = load i32, i32* @x.97
  %3 = load i32, i32* @y.98
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !4606, metadata !DIExpression()), !dbg !4607
  %12 = load i32, i32* %11, align 4, !dbg !4608
  %13 = load i32, i32* @x.97
  %14 = load i32, i32* @y.98
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  switch i32 %12, label %41 [
    i32 65, label %21
    i32 66, label %21
    i32 67, label %21
    i32 68, label %21
    i32 69, label %21
    i32 70, label %21
    i32 71, label %21
    i32 72, label %21
    i32 73, label %21
    i32 74, label %21
    i32 75, label %21
    i32 76, label %21
    i32 77, label %21
    i32 78, label %21
    i32 79, label %21
    i32 80, label %21
    i32 81, label %21
    i32 82, label %21
    i32 83, label %21
    i32 84, label %21
    i32 85, label %21
    i32 86, label %21
    i32 87, label %21
    i32 88, label %21
    i32 89, label %21
    i32 90, label %21
  ], !dbg !4609

21:                                               ; preds = %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2
  %22 = load i32, i32* @x.97
  %23 = load i32, i32* @y.98
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  %30 = load i32, i32* %11, align 4, !dbg !4610
  %31 = sub nsw i32 %30, 65, !dbg !4612
  %32 = add nsw i32 %31, 97, !dbg !4613
  store i32 %32, i32* %10, align 4, !dbg !4614
  %33 = load i32, i32* @x.97
  %34 = load i32, i32* @y.98
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBBpart213, label %originalBB1alteredBB

originalBBpart213:                                ; preds = %originalBB1
  br label %59, !dbg !4614

41:                                               ; preds = %originalBBpart2
  %42 = load i32, i32* @x.97
  %43 = load i32, i32* @y.98
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBB15, label %originalBB15alteredBB

originalBB15:                                     ; preds = %41, %originalBB15alteredBB
  %50 = load i32, i32* %11, align 4, !dbg !4615
  store i32 %50, i32* %10, align 4, !dbg !4616
  %51 = load i32, i32* @x.97
  %52 = load i32, i32* @y.98
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart217, label %originalBB15alteredBB

originalBBpart217:                                ; preds = %originalBB15
  br label %59, !dbg !4616

59:                                               ; preds = %originalBBpart217, %originalBBpart213
  %60 = load i32, i32* @x.97
  %61 = load i32, i32* @y.98
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBB19, label %originalBB19alteredBB

originalBB19:                                     ; preds = %59, %originalBB19alteredBB
  %68 = load i32, i32* %10, align 4, !dbg !4617
  %69 = load i32, i32* @x.97
  %70 = load i32, i32* @y.98
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBBpart221, label %originalBB19alteredBB

originalBBpart221:                                ; preds = %originalBB19
  ret i32 %68, !dbg !4617

originalBBalteredBB:                              ; preds = %originalBB, %1
  %77 = alloca i32, align 4
  %78 = alloca i32, align 4
  store i32 %0, i32* %78, align 4
  call void @llvm.dbg.declare(metadata i32* %78, metadata !4618, metadata !DIExpression()), !dbg !4607
  %79 = load i32, i32* %78, align 4, !dbg !4608
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  %80 = load i32, i32* %11, align 4, !dbg !4610
  %_ = sub i32 0, %80
  %gen = add i32 %_, 65
  %_2 = shl i32 %80, 65
  %81 = sub nsw i32 %80, 65, !dbg !4612
  %_3 = shl i32 %81, 97
  %_4 = shl i32 %81, 97
  %_5 = sub i32 %81, 97
  %gen6 = mul i32 %_5, 97
  %_7 = sub i32 0, %81
  %gen8 = add i32 %_7, 97
  %_9 = shl i32 %81, 97
  %_10 = shl i32 %81, 97
  %_11 = shl i32 %81, 97
  %82 = add nsw i32 %81, 97, !dbg !4613
  store i32 %82, i32* %10, align 4, !dbg !4614
  br label %originalBB1

originalBB15alteredBB:                            ; preds = %originalBB15, %41
  %83 = load i32, i32* %11, align 4, !dbg !4615
  store i32 %83, i32* %10, align 4, !dbg !4616
  br label %originalBB15

originalBB19alteredBB:                            ; preds = %originalBB19, %59
  %84 = load i32, i32* %10, align 4, !dbg !4617
  br label %originalBB19
}

define private i32 @controle(i8*, i32) {
  %3 = load i32, i32* @x.99
  %4 = load i32, i32* @y.100
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = load i32, i32* @inVal0
  %12 = icmp sgt i32 %11, 0
  %13 = load i32, i32* @x.99
  %14 = load i32, i32* @y.100
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %41, label %21

21:                                               ; preds = %originalBBpart2
  %22 = load i32, i32* @x.99
  %23 = load i32, i32* @y.100
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  call void @srand(i32 %1)
  %30 = call i32 @rand()
  %31 = srem i32 %30, 50000
  %32 = add i32 %31, 2
  %33 = load i32, i32* @x.99
  %34 = load i32, i32* @y.100
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBBpart220, label %originalBB1alteredBB

originalBBpart220:                                ; preds = %originalBB1
  ret i32 %32

41:                                               ; preds = %originalBBpart2
  %42 = load i32, i32* @x.99
  %43 = load i32, i32* @y.100
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %41, %originalBB22alteredBB
  %50 = getelementptr inbounds [3 x i8], [3 x i8]* @.compVal2, i32 0, i32 0
  %51 = call i32 @strcmp(i8* %50, i8* %0)
  %52 = icmp eq i32 %51, 0
  %53 = load i32, i32* @x.99
  %54 = load i32, i32* @y.100
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %52, label %61, label %96

61:                                               ; preds = %originalBBpart224
  %62 = load i32, i32* @x.99
  %63 = load i32, i32* @y.100
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %61, %originalBB26alteredBB
  %70 = icmp eq i32 %1, 0
  %71 = load i32, i32* @x.99
  %72 = load i32, i32* @y.100
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %70, label %79, label %96

79:                                               ; preds = %originalBBpart228
  %80 = load i32, i32* @x.99
  %81 = load i32, i32* @y.100
  %82 = sub i32 %80, 1
  %83 = mul i32 %80, %82
  %84 = urem i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = icmp slt i32 %81, 10
  %87 = or i1 %85, %86
  br i1 %87, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %79, %originalBB30alteredBB
  %88 = load i32, i32* @x.99
  %89 = load i32, i32* @y.100
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  ret i32 5

96:                                               ; preds = %originalBBpart228, %originalBBpart224
  %97 = load i32, i32* @x.99
  %98 = load i32, i32* @y.100
  %99 = sub i32 %97, 1
  %100 = mul i32 %97, %99
  %101 = urem i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %102, %103
  br i1 %104, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %96, %originalBB34alteredBB
  %105 = getelementptr inbounds [1 x i8], [1 x i8]* @.compVal1, i32 0, i32 0
  %106 = call i32 @strcmp(i8* %105, i8* %0)
  %107 = icmp eq i32 %106, 0
  %108 = load i32, i32* @x.99
  %109 = load i32, i32* @y.100
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br i1 %107, label %116, label %151

116:                                              ; preds = %originalBBpart236
  %117 = load i32, i32* @x.99
  %118 = load i32, i32* @y.100
  %119 = sub i32 %117, 1
  %120 = mul i32 %117, %119
  %121 = urem i32 %120, 2
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %122, %123
  br i1 %124, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %116, %originalBB38alteredBB
  %125 = icmp eq i32 %1, -1
  %126 = load i32, i32* @x.99
  %127 = load i32, i32* @y.100
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br i1 %125, label %134, label %151

134:                                              ; preds = %originalBBpart240
  %135 = load i32, i32* @x.99
  %136 = load i32, i32* @y.100
  %137 = sub i32 %135, 1
  %138 = mul i32 %135, %137
  %139 = urem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %140, %141
  br i1 %142, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %134, %originalBB42alteredBB
  %143 = load i32, i32* @x.99
  %144 = load i32, i32* @y.100
  %145 = sub i32 %143, 1
  %146 = mul i32 %143, %145
  %147 = urem i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %148, %149
  br i1 %150, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  ret i32 3

151:                                              ; preds = %originalBBpart240, %originalBBpart236
  %152 = load i32, i32* @x.99
  %153 = load i32, i32* @y.100
  %154 = sub i32 %152, 1
  %155 = mul i32 %152, %154
  %156 = urem i32 %155, 2
  %157 = icmp eq i32 %156, 0
  %158 = icmp slt i32 %153, 10
  %159 = or i1 %157, %158
  br i1 %159, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %151, %originalBB46alteredBB
  %160 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal0, i32 0, i32 0
  %161 = call i32 @strcmp(i8* %160, i8* %0)
  %162 = icmp eq i32 %161, 0
  %163 = load i32, i32* @x.99
  %164 = load i32, i32* @y.100
  %165 = sub i32 %163, 1
  %166 = mul i32 %163, %165
  %167 = urem i32 %166, 2
  %168 = icmp eq i32 %167, 0
  %169 = icmp slt i32 %164, 10
  %170 = or i1 %168, %169
  br i1 %170, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br i1 %162, label %171, label %206

171:                                              ; preds = %originalBBpart248
  %172 = load i32, i32* @x.99
  %173 = load i32, i32* @y.100
  %174 = sub i32 %172, 1
  %175 = mul i32 %172, %174
  %176 = urem i32 %175, 2
  %177 = icmp eq i32 %176, 0
  %178 = icmp slt i32 %173, 10
  %179 = or i1 %177, %178
  br i1 %179, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %171, %originalBB50alteredBB
  %180 = icmp eq i32 %1, 0
  %181 = load i32, i32* @x.99
  %182 = load i32, i32* @y.100
  %183 = sub i32 %181, 1
  %184 = mul i32 %181, %183
  %185 = urem i32 %184, 2
  %186 = icmp eq i32 %185, 0
  %187 = icmp slt i32 %182, 10
  %188 = or i1 %186, %187
  br i1 %188, label %originalBBpart252, label %originalBB50alteredBB

originalBBpart252:                                ; preds = %originalBB50
  br i1 %180, label %189, label %206

189:                                              ; preds = %originalBBpart252
  %190 = load i32, i32* @x.99
  %191 = load i32, i32* @y.100
  %192 = sub i32 %190, 1
  %193 = mul i32 %190, %192
  %194 = urem i32 %193, 2
  %195 = icmp eq i32 %194, 0
  %196 = icmp slt i32 %191, 10
  %197 = or i1 %195, %196
  br i1 %197, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %189, %originalBB54alteredBB
  %198 = load i32, i32* @x.99
  %199 = load i32, i32* @y.100
  %200 = sub i32 %198, 1
  %201 = mul i32 %198, %200
  %202 = urem i32 %201, 2
  %203 = icmp eq i32 %202, 0
  %204 = icmp slt i32 %199, 10
  %205 = or i1 %203, %204
  br i1 %205, label %originalBBpart256, label %originalBB54alteredBB

originalBBpart256:                                ; preds = %originalBB54
  ret i32 3

206:                                              ; preds = %originalBBpart252, %originalBBpart248
  %207 = load i32, i32* @x.99
  %208 = load i32, i32* @y.100
  %209 = sub i32 %207, 1
  %210 = mul i32 %207, %209
  %211 = urem i32 %210, 2
  %212 = icmp eq i32 %211, 0
  %213 = icmp slt i32 %208, 10
  %214 = or i1 %212, %213
  br i1 %214, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %206, %originalBB58alteredBB
  %215 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal0, i32 0, i32 0
  %216 = call i32 @strcmp(i8* %215, i8* %0)
  %217 = icmp eq i32 %216, 0
  %218 = load i32, i32* @x.99
  %219 = load i32, i32* @y.100
  %220 = sub i32 %218, 1
  %221 = mul i32 %218, %220
  %222 = urem i32 %221, 2
  %223 = icmp eq i32 %222, 0
  %224 = icmp slt i32 %219, 10
  %225 = or i1 %223, %224
  br i1 %225, label %originalBBpart260, label %originalBB58alteredBB

originalBBpart260:                                ; preds = %originalBB58
  br i1 %217, label %226, label %261

226:                                              ; preds = %originalBBpart260
  %227 = load i32, i32* @x.99
  %228 = load i32, i32* @y.100
  %229 = sub i32 %227, 1
  %230 = mul i32 %227, %229
  %231 = urem i32 %230, 2
  %232 = icmp eq i32 %231, 0
  %233 = icmp slt i32 %228, 10
  %234 = or i1 %232, %233
  br i1 %234, label %originalBB62, label %originalBB62alteredBB

originalBB62:                                     ; preds = %226, %originalBB62alteredBB
  %235 = icmp eq i32 %1, -1
  %236 = load i32, i32* @x.99
  %237 = load i32, i32* @y.100
  %238 = sub i32 %236, 1
  %239 = mul i32 %236, %238
  %240 = urem i32 %239, 2
  %241 = icmp eq i32 %240, 0
  %242 = icmp slt i32 %237, 10
  %243 = or i1 %241, %242
  br i1 %243, label %originalBBpart264, label %originalBB62alteredBB

originalBBpart264:                                ; preds = %originalBB62
  br i1 %235, label %244, label %261

244:                                              ; preds = %originalBBpart264
  %245 = load i32, i32* @x.99
  %246 = load i32, i32* @y.100
  %247 = sub i32 %245, 1
  %248 = mul i32 %245, %247
  %249 = urem i32 %248, 2
  %250 = icmp eq i32 %249, 0
  %251 = icmp slt i32 %246, 10
  %252 = or i1 %250, %251
  br i1 %252, label %originalBB66, label %originalBB66alteredBB

originalBB66:                                     ; preds = %244, %originalBB66alteredBB
  %253 = load i32, i32* @x.99
  %254 = load i32, i32* @y.100
  %255 = sub i32 %253, 1
  %256 = mul i32 %253, %255
  %257 = urem i32 %256, 2
  %258 = icmp eq i32 %257, 0
  %259 = icmp slt i32 %254, 10
  %260 = or i1 %258, %259
  br i1 %260, label %originalBBpart268, label %originalBB66alteredBB

originalBBpart268:                                ; preds = %originalBB66
  ret i32 5

261:                                              ; preds = %originalBBpart264, %originalBBpart260
  %262 = load i32, i32* @x.99
  %263 = load i32, i32* @y.100
  %264 = sub i32 %262, 1
  %265 = mul i32 %262, %264
  %266 = urem i32 %265, 2
  %267 = icmp eq i32 %266, 0
  %268 = icmp slt i32 %263, 10
  %269 = or i1 %267, %268
  br i1 %269, label %originalBB70, label %originalBB70alteredBB

originalBB70:                                     ; preds = %261, %originalBB70alteredBB
  call void @srand(i32 %1)
  %270 = call i32 @rand()
  %271 = srem i32 %270, 50000
  %272 = add i32 %271, 2
  %273 = load i32, i32* @x.99
  %274 = load i32, i32* @y.100
  %275 = sub i32 %273, 1
  %276 = mul i32 %273, %275
  %277 = urem i32 %276, 2
  %278 = icmp eq i32 %277, 0
  %279 = icmp slt i32 %274, 10
  %280 = or i1 %278, %279
  br i1 %280, label %originalBBpart285, label %originalBB70alteredBB

originalBBpart285:                                ; preds = %originalBB70
  ret i32 %272

originalBBalteredBB:                              ; preds = %originalBB, %2
  %281 = load i32, i32* @inVal0
  %282 = icmp sgt i32 %281, 0
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  call void @srand(i32 %1)
  %283 = call i32 @rand()
  %_ = shl i32 %283, 50000
  %_2 = shl i32 %283, 50000
  %_3 = sub i32 0, %283
  %gen = add i32 %_3, 50000
  %_4 = shl i32 %283, 50000
  %284 = srem i32 %283, 50000
  %_5 = sub i32 %284, 2
  %gen6 = mul i32 %_5, 2
  %_7 = sub i32 %284, 2
  %gen8 = mul i32 %_7, 2
  %_9 = sub i32 0, %284
  %gen10 = add i32 %_9, 2
  %_11 = sub i32 %284, 2
  %gen12 = mul i32 %_11, 2
  %_13 = shl i32 %284, 2
  %_14 = sub i32 %284, 2
  %gen15 = mul i32 %_14, 2
  %_16 = shl i32 %284, 2
  %_17 = sub i32 0, %284
  %gen18 = add i32 %_17, 2
  %285 = add i32 %284, 2
  br label %originalBB1

originalBB22alteredBB:                            ; preds = %originalBB22, %41
  %286 = getelementptr inbounds [3 x i8], [3 x i8]* @.compVal2, i32 0, i32 0
  %287 = call i32 @strcmp(i8* %286, i8* %0)
  %288 = icmp eq i32 %287, 0
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %61
  %289 = icmp eq i32 %1, 0
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %79
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %96
  %290 = getelementptr inbounds [1 x i8], [1 x i8]* @.compVal1, i32 0, i32 0
  %291 = call i32 @strcmp(i8* %290, i8* %0)
  %292 = icmp eq i32 %291, 0
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %116
  %293 = icmp eq i32 %1, -1
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %134
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %151
  %294 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal0, i32 0, i32 0
  %295 = call i32 @strcmp(i8* %294, i8* %0)
  %296 = icmp eq i32 %295, 0
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %171
  %297 = icmp eq i32 %1, 0
  br label %originalBB50

originalBB54alteredBB:                            ; preds = %originalBB54, %189
  br label %originalBB54

originalBB58alteredBB:                            ; preds = %originalBB58, %206
  %298 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal0, i32 0, i32 0
  %299 = call i32 @strcmp(i8* %298, i8* %0)
  %300 = icmp eq i32 %299, 0
  br label %originalBB58

originalBB62alteredBB:                            ; preds = %originalBB62, %226
  %301 = icmp eq i32 %1, -1
  br label %originalBB62

originalBB66alteredBB:                            ; preds = %originalBB66, %244
  br label %originalBB66

originalBB70alteredBB:                            ; preds = %originalBB70, %261
  call void @srand(i32 %1)
  %302 = call i32 @rand()
  %_71 = shl i32 %302, 50000
  %303 = srem i32 %302, 50000
  %_72 = shl i32 %303, 2
  %_73 = shl i32 %303, 2
  %_74 = sub i32 %303, 2
  %gen75 = mul i32 %_74, 2
  %_76 = sub i32 0, %303
  %gen77 = add i32 %_76, 2
  %_78 = sub i32 %303, 2
  %gen79 = mul i32 %_78, 2
  %_80 = sub i32 0, %303
  %gen81 = add i32 %_80, 2
  %_82 = sub i32 %303, 2
  %gen83 = mul i32 %_82, 2
  %304 = add i32 %303, 2
  br label %originalBB70
}

declare void @srand(i32)

declare i32 @rand()

attributes #0 = { noinline noreturn nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { noinline nounwind optnone readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noreturn nounwind }
attributes #13 = { nounwind readonly }
attributes #14 = { noreturn }
attributes #15 = { nounwind readnone }

!llvm.dbg.cu = !{!2, !27, !32, !41, !48, !54, !128, !130, !121, !133, !136, !138, !140, !143, !149, !151, !153, !155, !157, !159, !161, !163}
!llvm.ident = !{!165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165}
!llvm.module.flags = !{!166, !167, !168, !169, !170}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "longopts", scope: !2, file: !3, line: 41, type: !10, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !9, nameTableKind: None)
!3 = !DIFile(filename: "src/pwd.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4 = !{}
!5 = !{!6, !7}
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!7 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64)
!8 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!9 = !{!0}
!10 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 1280, elements: !23)
!11 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !12)
!12 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !14)
!13 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/getopt_ext.h", directory: "")
!14 = !{!15, !18, !20, !22}
!15 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !12, file: !13, line: 52, baseType: !16, size: 64)
!16 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !17, size: 64)
!17 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !8)
!18 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !12, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!19 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!20 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !12, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!21 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !19, size: 64)
!22 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !12, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!23 = !{!24}
!24 = !DISubrange(count: 5)
!25 = !DIGlobalVariableExpression(var: !26, expr: !DIExpression())
!26 = distinct !DIGlobalVariable(name: "Version", scope: !27, file: !28, line: 2, type: !16, isLocal: false, isDefinition: true)
!27 = distinct !DICompileUnit(language: DW_LANG_C99, file: !28, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !29, nameTableKind: None)
!28 = !DIFile(filename: "src/version.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!29 = !{!25}
!30 = !DIGlobalVariableExpression(var: !31, expr: !DIExpression())
!31 = distinct !DIGlobalVariable(name: "ignore_EPIPE", scope: !32, file: !37, line: 56, type: !38, isLocal: true, isDefinition: true)
!32 = distinct !DICompileUnit(language: DW_LANG_C99, file: !33, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !34, nameTableKind: None)
!33 = !DIFile(filename: "./lib/closeout.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!34 = !{!35, !30}
!35 = !DIGlobalVariableExpression(var: !36, expr: !DIExpression())
!36 = distinct !DIGlobalVariable(name: "file_name", scope: !32, file: !37, line: 46, type: !16, isLocal: true, isDefinition: true)
!37 = !DIFile(filename: "lib/closeout.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!38 = !DIBasicType(name: "_Bool", size: 8, encoding: DW_ATE_boolean)
!39 = !DIGlobalVariableExpression(var: !40, expr: !DIExpression())
!40 = distinct !DIGlobalVariable(name: "exit_failure", scope: !41, file: !44, line: 24, type: !45, isLocal: false, isDefinition: true)
!41 = distinct !DICompileUnit(language: DW_LANG_C99, file: !42, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !43, nameTableKind: None)
!42 = !DIFile(filename: "./lib/exitfail.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!43 = !{!39}
!44 = !DIFile(filename: "lib/exitfail.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!45 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !19)
!46 = !DIGlobalVariableExpression(var: !47, expr: !DIExpression())
!47 = distinct !DIGlobalVariable(name: "program_name", scope: !48, file: !51, line: 33, type: !16, isLocal: false, isDefinition: true)
!48 = distinct !DICompileUnit(language: DW_LANG_C99, file: !49, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !50, nameTableKind: None)
!49 = !DIFile(filename: "./lib/progname.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!50 = !{!46}
!51 = !DIFile(filename: "lib/progname.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!52 = !DIGlobalVariableExpression(var: !53, expr: !DIExpression())
!53 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !54, file: !80, line: 116, type: !93, isLocal: true, isDefinition: true)
!54 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !77, nameTableKind: None)
!55 = !DIFile(filename: "./lib/quotearg.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!56 = !{!57}
!57 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "quoting_style", file: !58, line: 32, baseType: !59, size: 32, elements: !60)
!58 = !DIFile(filename: "./lib/quotearg.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!59 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!60 = !{!61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71}
!61 = !DIEnumerator(name: "literal_quoting_style", value: 0, isUnsigned: true)
!62 = !DIEnumerator(name: "shell_quoting_style", value: 1, isUnsigned: true)
!63 = !DIEnumerator(name: "shell_always_quoting_style", value: 2, isUnsigned: true)
!64 = !DIEnumerator(name: "shell_escape_quoting_style", value: 3, isUnsigned: true)
!65 = !DIEnumerator(name: "shell_escape_always_quoting_style", value: 4, isUnsigned: true)
!66 = !DIEnumerator(name: "c_quoting_style", value: 5, isUnsigned: true)
!67 = !DIEnumerator(name: "c_maybe_quoting_style", value: 6, isUnsigned: true)
!68 = !DIEnumerator(name: "escape_quoting_style", value: 7, isUnsigned: true)
!69 = !DIEnumerator(name: "locale_quoting_style", value: 8, isUnsigned: true)
!70 = !DIEnumerator(name: "clocale_quoting_style", value: 9, isUnsigned: true)
!71 = !DIEnumerator(name: "custom_quoting_style", value: 10, isUnsigned: true)
!72 = !{!19, !73, !74}
!73 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!74 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !75, line: 46, baseType: !76)
!75 = !DIFile(filename: "/usr/lib/llvm-9/lib/clang/9.0.1/include/stddef.h", directory: "")
!76 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!77 = !{!78, !85, !91, !52, !103, !108, !115, !117}
!78 = !DIGlobalVariableExpression(var: !79, expr: !DIExpression())
!79 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !54, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!80 = !DIFile(filename: "lib/quotearg.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!81 = !DICompositeType(tag: DW_TAG_array_type, baseType: !82, size: 704, elements: !83)
!82 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !16)
!83 = !{!84}
!84 = !DISubrange(count: 11)
!85 = !DIGlobalVariableExpression(var: !86, expr: !DIExpression())
!86 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !54, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!87 = !DICompositeType(tag: DW_TAG_array_type, baseType: !88, size: 320, elements: !89)
!88 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !57)
!89 = !{!90}
!90 = !DISubrange(count: 10)
!91 = !DIGlobalVariableExpression(var: !92, expr: !DIExpression())
!92 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !54, file: !80, line: 1052, type: !93, isLocal: false, isDefinition: true)
!93 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !94)
!94 = !{!95, !96, !97, !101, !102}
!95 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !93, file: !80, line: 68, baseType: !57, size: 32)
!96 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !93, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!97 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !93, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!98 = !DICompositeType(tag: DW_TAG_array_type, baseType: !59, size: 256, elements: !99)
!99 = !{!100}
!100 = !DISubrange(count: 8)
!101 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !93, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!102 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !93, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!103 = !DIGlobalVariableExpression(var: !104, expr: !DIExpression())
!104 = distinct !DIGlobalVariable(name: "slot0", scope: !54, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!105 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 2048, elements: !106)
!106 = !{!107}
!107 = !DISubrange(count: 256)
!108 = !DIGlobalVariableExpression(var: !109, expr: !DIExpression())
!109 = distinct !DIGlobalVariable(name: "slotvec", scope: !54, file: !80, line: 845, type: !110, isLocal: true, isDefinition: true)
!110 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!111 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !112)
!112 = !{!113, !114}
!113 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !111, file: !80, line: 836, baseType: !74, size: 64)
!114 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !111, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!115 = !DIGlobalVariableExpression(var: !116, expr: !DIExpression())
!116 = distinct !DIGlobalVariable(name: "nslots", scope: !54, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!117 = !DIGlobalVariableExpression(var: !118, expr: !DIExpression())
!118 = distinct !DIGlobalVariable(name: "slotvec0", scope: !54, file: !80, line: 844, type: !111, isLocal: true, isDefinition: true)
!119 = !DIGlobalVariableExpression(var: !120, expr: !DIExpression())
!120 = distinct !DIGlobalVariable(name: "version_etc_copyright", scope: !121, file: !124, line: 26, type: !125, isLocal: false, isDefinition: true)
!121 = distinct !DICompileUnit(language: DW_LANG_C99, file: !122, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !123, nameTableKind: None)
!122 = !DIFile(filename: "./lib/version-etc-fsf.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!123 = !{!119}
!124 = !DIFile(filename: "lib/version-etc-fsf.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!125 = !DICompositeType(tag: DW_TAG_array_type, baseType: !17, size: 376, elements: !126)
!126 = !{!127}
!127 = !DISubrange(count: 47)
!128 = distinct !DICompileUnit(language: DW_LANG_C99, file: !129, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!129 = !DIFile(filename: "./lib/root-dev-ino.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!130 = distinct !DICompileUnit(language: DW_LANG_C99, file: !131, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!131 = !DIFile(filename: "./lib/version-etc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!132 = !{!6}
!133 = distinct !DICompileUnit(language: DW_LANG_C99, file: !134, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !135, nameTableKind: None)
!134 = !DIFile(filename: "./lib/xmalloc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!135 = !{!74, !7, !6}
!136 = distinct !DICompileUnit(language: DW_LANG_C99, file: !137, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!137 = !DIFile(filename: "./lib/xalloc-die.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!138 = distinct !DICompileUnit(language: DW_LANG_C99, file: !139, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!139 = !DIFile(filename: "./lib/xgetcwd.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!140 = distinct !DICompileUnit(language: DW_LANG_C99, file: !141, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !142, nameTableKind: None)
!141 = !DIFile(filename: "./lib/mbrtowc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!142 = !{!74}
!143 = distinct !DICompileUnit(language: DW_LANG_C99, file: !144, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !145, nameTableKind: None)
!144 = !DIFile(filename: "./lib/c-strcasecmp.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!145 = !{!146}
!146 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !147, size: 64)
!147 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !148)
!148 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!149 = distinct !DICompileUnit(language: DW_LANG_C99, file: !150, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!150 = !DIFile(filename: "./lib/close-stream.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!151 = distinct !DICompileUnit(language: DW_LANG_C99, file: !152, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!152 = !DIFile(filename: "./lib/hard-locale.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!153 = distinct !DICompileUnit(language: DW_LANG_C99, file: !154, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!154 = !DIFile(filename: "./lib/localcharset.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!155 = distinct !DICompileUnit(language: DW_LANG_C99, file: !156, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!156 = !DIFile(filename: "./lib/setlocale_null.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!157 = distinct !DICompileUnit(language: DW_LANG_C99, file: !158, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!158 = !DIFile(filename: "./lib/fclose.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!159 = distinct !DICompileUnit(language: DW_LANG_C99, file: !160, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!160 = !DIFile(filename: "./lib/fflush.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!161 = distinct !DICompileUnit(language: DW_LANG_C99, file: !162, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!162 = !DIFile(filename: "./lib/fseeko.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!163 = distinct !DICompileUnit(language: DW_LANG_C99, file: !164, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!164 = !DIFile(filename: "./lib/c-ctype.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!165 = !{!"clang version 9.0.1-12 "}
!166 = !{i32 2, !"Dwarf Version", i32 4}
!167 = !{i32 2, !"Debug Info Version", i32 3}
!168 = !{i32 1, !"wchar_size", i32 4}
!169 = !{i32 1, !"ThinLTO", i32 0}
!170 = !{i32 1, !"EnableSplitLTOUnit", i32 0}
!171 = distinct !DISubprogram(name: "usage", scope: !3, file: !3, line: 51, type: !172, scopeLine: 52, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!172 = !DISubroutineType(types: !173)
!173 = !{null, !19}
!174 = !DILocalVariable(name: "status", arg: 1, scope: !171, file: !3, line: 51, type: !19)
!175 = !DILocation(line: 51, column: 12, scope: !171)
!176 = !DILocation(line: 53, column: 7, scope: !177)
!177 = distinct !DILexicalBlock(scope: !171, file: !3, line: 53, column: 7)
!178 = !DILocation(line: 53, column: 14, scope: !177)
!179 = !DILocation(line: 53, column: 7, scope: !171)
!180 = !DILocation(line: 54, column: 5, scope: !177)
!181 = !DILocation(line: 54, column: 5, scope: !182)
!182 = distinct !DILexicalBlock(scope: !177, file: !3, line: 54, column: 5)
!183 = !DILocation(line: 57, column: 15, scope: !184)
!184 = distinct !DILexicalBlock(scope: !177, file: !3, line: 56, column: 5)
!185 = !DILocation(line: 57, column: 45, scope: !184)
!186 = !DILocation(line: 57, column: 7, scope: !184)
!187 = !DILocation(line: 58, column: 7, scope: !184)
!188 = !DILocation(line: 62, column: 7, scope: !184)
!189 = !DILocation(line: 66, column: 7, scope: !184)
!190 = !DILocation(line: 67, column: 7, scope: !184)
!191 = !DILocation(line: 68, column: 7, scope: !184)
!192 = !DILocation(line: 71, column: 15, scope: !184)
!193 = !DILocation(line: 71, column: 7, scope: !184)
!194 = !DILocation(line: 72, column: 7, scope: !184)
!195 = !DILocation(line: 74, column: 9, scope: !171)
!196 = !DILocation(line: 74, column: 3, scope: !171)
!197 = !DILocalVariable(name: "status", arg: 1, scope: !198, file: !3, line: 51, type: !19)
!198 = distinct !DISubprogram(name: "usage", scope: !3, file: !3, line: 51, type: !172, scopeLine: 52, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !199, retainedNodes: !4)
!199 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !200, nameTableKind: None)
!200 = !{!201}
!201 = !DIGlobalVariableExpression(var: !202, expr: !DIExpression())
!202 = distinct !DIGlobalVariable(name: "longopts", scope: !199, file: !3, line: 41, type: !203, isLocal: true, isDefinition: true)
!203 = !DICompositeType(tag: DW_TAG_array_type, baseType: !204, size: 1280, elements: !23)
!204 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !205)
!205 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !206)
!206 = !{!207, !208, !209, !210}
!207 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !205, file: !13, line: 52, baseType: !16, size: 64)
!208 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !205, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!209 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !205, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!210 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !205, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!211 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !212, file: !212, line: 634, type: !213, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!212 = !DIFile(filename: "src/system.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!213 = !DISubroutineType(types: !214)
!214 = !{null, !16}
!215 = !DILocalVariable(name: "program", arg: 1, scope: !211, file: !212, line: 634, type: !16)
!216 = !DILocation(line: 634, column: 34, scope: !211)
!217 = !DILocalVariable(name: "infomap", scope: !211, file: !212, line: 636, type: !218)
!218 = !DICompositeType(tag: DW_TAG_array_type, baseType: !219, size: 896, elements: !224)
!219 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !220)
!220 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "infomap", scope: !211, file: !212, line: 636, size: 128, elements: !221)
!221 = !{!222, !223}
!222 = !DIDerivedType(tag: DW_TAG_member, name: "program", scope: !220, file: !212, line: 636, baseType: !16, size: 64)
!223 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !220, file: !212, line: 636, baseType: !16, size: 64, offset: 64)
!224 = !{!225}
!225 = !DISubrange(count: 7)
!226 = !DILocation(line: 636, column: 67, scope: !211)
!227 = !DILocalVariable(name: "node", scope: !211, file: !212, line: 646, type: !16)
!228 = !DILocation(line: 646, column: 15, scope: !211)
!229 = !DILocation(line: 646, column: 22, scope: !211)
!230 = !DILocalVariable(name: "map_prog", scope: !211, file: !212, line: 647, type: !231)
!231 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !219, size: 64)
!232 = !DILocation(line: 647, column: 25, scope: !211)
!233 = !DILocation(line: 647, column: 36, scope: !211)
!234 = !DILocation(line: 649, column: 3, scope: !211)
!235 = !DILocation(line: 649, column: 10, scope: !211)
!236 = !DILocation(line: 649, column: 20, scope: !211)
!237 = !DILocation(line: 649, column: 28, scope: !211)
!238 = !DILocation(line: 649, column: 33, scope: !211)
!239 = !DILocation(line: 649, column: 31, scope: !211)
!240 = !DILocation(line: 0, scope: !211)
!241 = !DILocation(line: 650, column: 13, scope: !211)
!242 = distinct !{!242, !234, !241}
!243 = !DILocation(line: 652, column: 7, scope: !244)
!244 = distinct !DILexicalBlock(scope: !211, file: !212, line: 652, column: 7)
!245 = !DILocation(line: 652, column: 17, scope: !244)
!246 = !DILocation(line: 652, column: 7, scope: !211)
!247 = !DILocation(line: 653, column: 12, scope: !244)
!248 = !DILocation(line: 653, column: 22, scope: !244)
!249 = !DILocation(line: 653, column: 10, scope: !244)
!250 = !DILocation(line: 653, column: 5, scope: !244)
!251 = !DILocation(line: 655, column: 11, scope: !211)
!252 = !DILocation(line: 655, column: 3, scope: !211)
!253 = !DILocalVariable(name: "lc_messages", scope: !211, file: !212, line: 659, type: !16)
!254 = !DILocation(line: 659, column: 15, scope: !211)
!255 = !DILocation(line: 659, column: 29, scope: !211)
!256 = !DILocation(line: 660, column: 7, scope: !257)
!257 = distinct !DILexicalBlock(scope: !211, file: !212, line: 660, column: 7)
!258 = !DILocation(line: 660, column: 19, scope: !257)
!259 = !DILocation(line: 660, column: 22, scope: !257)
!260 = !DILocation(line: 660, column: 7, scope: !211)
!261 = !DILocation(line: 666, column: 7, scope: !262)
!262 = distinct !DILexicalBlock(scope: !257, file: !212, line: 661, column: 5)
!263 = !DILocation(line: 668, column: 5, scope: !262)
!264 = !DILocation(line: 669, column: 11, scope: !211)
!265 = !DILocation(line: 670, column: 24, scope: !211)
!266 = !DILocation(line: 669, column: 3, scope: !211)
!267 = !DILocation(line: 671, column: 11, scope: !211)
!268 = !DILocation(line: 672, column: 11, scope: !211)
!269 = !DILocation(line: 672, column: 17, scope: !211)
!270 = !DILocation(line: 672, column: 25, scope: !211)
!271 = !DILocation(line: 672, column: 22, scope: !211)
!272 = !DILocation(line: 671, column: 3, scope: !211)
!273 = !DILocation(line: 673, column: 1, scope: !211)
!274 = !DILocalVariable(name: "program", arg: 1, scope: !275, file: !212, line: 634, type: !16)
!275 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !212, file: !212, line: 634, type: !213, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !276, retainedNodes: !4)
!276 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !277, nameTableKind: None)
!277 = !{!278}
!278 = !DIGlobalVariableExpression(var: !279, expr: !DIExpression())
!279 = distinct !DIGlobalVariable(name: "longopts", scope: !276, file: !3, line: 41, type: !280, isLocal: true, isDefinition: true)
!280 = !DICompositeType(tag: DW_TAG_array_type, baseType: !281, size: 1280, elements: !23)
!281 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !282)
!282 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !283)
!283 = !{!284, !285, !286, !287}
!284 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !282, file: !13, line: 52, baseType: !16, size: 64)
!285 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !282, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!286 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !282, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!287 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !282, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!288 = !DILocalVariable(name: "infomap", scope: !275, file: !212, line: 636, type: !289)
!289 = !DICompositeType(tag: DW_TAG_array_type, baseType: !290, size: 896, elements: !224)
!290 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !291)
!291 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "infomap", scope: !275, file: !212, line: 636, size: 128, elements: !292)
!292 = !{!293, !294}
!293 = !DIDerivedType(tag: DW_TAG_member, name: "program", scope: !291, file: !212, line: 636, baseType: !16, size: 64)
!294 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !291, file: !212, line: 636, baseType: !16, size: 64, offset: 64)
!295 = !DILocalVariable(name: "node", scope: !275, file: !212, line: 646, type: !16)
!296 = !DILocalVariable(name: "map_prog", scope: !275, file: !212, line: 647, type: !297)
!297 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !290, size: 64)
!298 = !DILocalVariable(name: "lc_messages", scope: !299, file: !212, line: 659, type: !16)
!299 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !212, file: !212, line: 634, type: !213, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !300, retainedNodes: !4)
!300 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !301, nameTableKind: None)
!301 = !{!302}
!302 = !DIGlobalVariableExpression(var: !303, expr: !DIExpression())
!303 = distinct !DIGlobalVariable(name: "longopts", scope: !300, file: !3, line: 41, type: !304, isLocal: true, isDefinition: true)
!304 = !DICompositeType(tag: DW_TAG_array_type, baseType: !305, size: 1280, elements: !23)
!305 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !306)
!306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !307)
!307 = !{!308, !309, !310, !311}
!308 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !306, file: !13, line: 52, baseType: !16, size: 64)
!309 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !306, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!310 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !306, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!311 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !306, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!312 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 327, type: !313, scopeLine: 328, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!313 = !DISubroutineType(types: !314)
!314 = !{!19, !19, !315}
!315 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!316 = !DILocalVariable(name: "argc", arg: 1, scope: !312, file: !3, line: 327, type: !19)
!317 = !DILocation(line: 327, column: 11, scope: !312)
!318 = !DILocalVariable(name: "argv", arg: 2, scope: !312, file: !3, line: 327, type: !315)
!319 = !DILocation(line: 327, column: 24, scope: !312)
!320 = !DILocalVariable(name: "wd", scope: !312, file: !3, line: 329, type: !7)
!321 = !DILocation(line: 329, column: 9, scope: !312)
!322 = !DILocalVariable(name: "logical", scope: !312, file: !3, line: 333, type: !38)
!323 = !DILocation(line: 333, column: 8, scope: !312)
!324 = !DILocation(line: 333, column: 19, scope: !312)
!325 = !DILocation(line: 333, column: 46, scope: !312)
!326 = !DILocation(line: 336, column: 21, scope: !312)
!327 = !DILocation(line: 336, column: 3, scope: !312)
!328 = !DILocation(line: 337, column: 3, scope: !312)
!329 = !DILocation(line: 338, column: 3, scope: !312)
!330 = !DILocation(line: 339, column: 3, scope: !312)
!331 = !DILocation(line: 341, column: 3, scope: !312)
!332 = !DILocation(line: 343, column: 3, scope: !312)
!333 = !DILocalVariable(name: "c", scope: !334, file: !3, line: 345, type: !19)
!334 = distinct !DILexicalBlock(scope: !312, file: !3, line: 344, column: 5)
!335 = !DILocation(line: 345, column: 11, scope: !334)
!336 = !DILocation(line: 345, column: 28, scope: !334)
!337 = !DILocation(line: 345, column: 34, scope: !334)
!338 = !DILocation(line: 345, column: 15, scope: !334)
!339 = !DILocation(line: 346, column: 11, scope: !340)
!340 = distinct !DILexicalBlock(scope: !334, file: !3, line: 346, column: 11)
!341 = !DILocation(line: 346, column: 13, scope: !340)
!342 = !DILocation(line: 347, column: 9, scope: !340)
!343 = !DILocation(line: 348, column: 15, scope: !334)
!344 = !DILocation(line: 348, column: 7, scope: !334)
!345 = !DILocation(line: 351, column: 19, scope: !346)
!346 = distinct !DILexicalBlock(scope: !334, file: !3, line: 349, column: 9)
!347 = !DILocation(line: 352, column: 11, scope: !346)
!348 = !DILocation(line: 354, column: 19, scope: !346)
!349 = !DILocation(line: 355, column: 11, scope: !346)
!350 = !DILocation(line: 357, column: 9, scope: !346)
!351 = !DILocation(line: 359, column: 9, scope: !346)
!352 = !DILocation(line: 362, column: 11, scope: !346)
!353 = distinct !{!353, !332, !354}
!354 = !DILocation(line: 364, column: 5, scope: !312)
!355 = !DILocation(line: 366, column: 7, scope: !356)
!356 = distinct !DILexicalBlock(scope: !312, file: !3, line: 366, column: 7)
!357 = !DILocation(line: 366, column: 16, scope: !356)
!358 = !DILocation(line: 366, column: 14, scope: !356)
!359 = !DILocation(line: 366, column: 7, scope: !312)
!360 = !DILocation(line: 367, column: 18, scope: !356)
!361 = !DILocation(line: 367, column: 5, scope: !356)
!362 = !DILocation(line: 369, column: 7, scope: !363)
!363 = distinct !DILexicalBlock(scope: !312, file: !3, line: 369, column: 7)
!364 = !DILocation(line: 369, column: 7, scope: !312)
!365 = !DILocation(line: 371, column: 12, scope: !366)
!366 = distinct !DILexicalBlock(scope: !363, file: !3, line: 370, column: 5)
!367 = !DILocation(line: 371, column: 10, scope: !366)
!368 = !DILocation(line: 372, column: 11, scope: !369)
!369 = distinct !DILexicalBlock(scope: !366, file: !3, line: 372, column: 11)
!370 = !DILocation(line: 372, column: 11, scope: !366)
!371 = !DILocation(line: 374, column: 17, scope: !372)
!372 = distinct !DILexicalBlock(scope: !369, file: !3, line: 373, column: 9)
!373 = !DILocation(line: 374, column: 11, scope: !372)
!374 = !DILocation(line: 375, column: 11, scope: !372)
!375 = !DILocation(line: 377, column: 5, scope: !366)
!376 = !DILocation(line: 379, column: 8, scope: !312)
!377 = !DILocation(line: 379, column: 6, scope: !312)
!378 = !DILocation(line: 380, column: 7, scope: !379)
!379 = distinct !DILexicalBlock(scope: !312, file: !3, line: 380, column: 7)
!380 = !DILocation(line: 380, column: 10, scope: !379)
!381 = !DILocation(line: 380, column: 7, scope: !312)
!382 = !DILocation(line: 382, column: 13, scope: !383)
!383 = distinct !DILexicalBlock(scope: !379, file: !3, line: 381, column: 5)
!384 = !DILocation(line: 382, column: 7, scope: !383)
!385 = !DILocation(line: 383, column: 13, scope: !383)
!386 = !DILocation(line: 383, column: 7, scope: !383)
!387 = !DILocation(line: 384, column: 5, scope: !383)
!388 = !DILocalVariable(name: "file_name", scope: !389, file: !3, line: 387, type: !390)
!389 = distinct !DILexicalBlock(scope: !379, file: !3, line: 386, column: 5)
!390 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !391, size: 64)
!391 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "file_name", file: !3, line: 34, size: 192, elements: !392)
!392 = !{!393, !394, !395}
!393 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !391, file: !3, line: 36, baseType: !7, size: 64)
!394 = !DIDerivedType(tag: DW_TAG_member, name: "n_alloc", scope: !391, file: !3, line: 37, baseType: !74, size: 64, offset: 64)
!395 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !391, file: !3, line: 38, baseType: !7, size: 64, offset: 128)
!396 = !DILocation(line: 387, column: 25, scope: !389)
!397 = !DILocation(line: 387, column: 37, scope: !389)
!398 = !DILocation(line: 388, column: 22, scope: !389)
!399 = !DILocation(line: 388, column: 7, scope: !389)
!400 = !DILocation(line: 389, column: 13, scope: !389)
!401 = !DILocation(line: 389, column: 24, scope: !389)
!402 = !DILocation(line: 389, column: 7, scope: !389)
!403 = !DILocation(line: 390, column: 23, scope: !389)
!404 = !DILocation(line: 390, column: 7, scope: !389)
!405 = !DILocation(line: 393, column: 3, scope: !312)
!406 = !DILocation(line: 394, column: 1, scope: !312)
!407 = !DILocalVariable(name: "argc", arg: 1, scope: !408, file: !3, line: 327, type: !19)
!408 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 327, type: !313, scopeLine: 328, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !409, retainedNodes: !4)
!409 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !410, nameTableKind: None)
!410 = !{!411}
!411 = !DIGlobalVariableExpression(var: !412, expr: !DIExpression())
!412 = distinct !DIGlobalVariable(name: "longopts", scope: !409, file: !3, line: 41, type: !413, isLocal: true, isDefinition: true)
!413 = !DICompositeType(tag: DW_TAG_array_type, baseType: !414, size: 1280, elements: !23)
!414 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !415)
!415 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !416)
!416 = !{!417, !418, !419, !420}
!417 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !415, file: !13, line: 52, baseType: !16, size: 64)
!418 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !415, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!419 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !415, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!420 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !415, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!421 = !DILocalVariable(name: "argv", arg: 2, scope: !408, file: !3, line: 327, type: !315)
!422 = !DILocalVariable(name: "wd", scope: !408, file: !3, line: 329, type: !7)
!423 = !DILocalVariable(name: "logical", scope: !408, file: !3, line: 333, type: !38)
!424 = distinct !DISubprogram(name: "logical_getcwd", scope: !3, file: !3, line: 300, type: !425, scopeLine: 301, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!425 = !DISubroutineType(types: !426)
!426 = !{!7}
!427 = !DILocalVariable(name: "st1", scope: !424, file: !3, line: 302, type: !428)
!428 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !429, line: 46, size: 1152, elements: !430)
!429 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stat.h", directory: "")
!430 = !{!431, !434, !436, !438, !440, !442, !444, !445, !446, !449, !451, !453, !461, !462, !463}
!431 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !428, file: !429, line: 48, baseType: !432, size: 64)
!432 = !DIDerivedType(tag: DW_TAG_typedef, name: "__dev_t", file: !433, line: 145, baseType: !76)
!433 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!434 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !428, file: !429, line: 53, baseType: !435, size: 64, offset: 64)
!435 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ino_t", file: !433, line: 148, baseType: !76)
!436 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !428, file: !429, line: 61, baseType: !437, size: 64, offset: 128)
!437 = !DIDerivedType(tag: DW_TAG_typedef, name: "__nlink_t", file: !433, line: 151, baseType: !76)
!438 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !428, file: !429, line: 62, baseType: !439, size: 32, offset: 192)
!439 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mode_t", file: !433, line: 150, baseType: !59)
!440 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !428, file: !429, line: 64, baseType: !441, size: 32, offset: 224)
!441 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uid_t", file: !433, line: 146, baseType: !59)
!442 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !428, file: !429, line: 65, baseType: !443, size: 32, offset: 256)
!443 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gid_t", file: !433, line: 147, baseType: !59)
!444 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !428, file: !429, line: 67, baseType: !19, size: 32, offset: 288)
!445 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !428, file: !429, line: 69, baseType: !432, size: 64, offset: 320)
!446 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !428, file: !429, line: 74, baseType: !447, size: 64, offset: 384)
!447 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !433, line: 152, baseType: !448)
!448 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !428, file: !429, line: 78, baseType: !450, size: 64, offset: 448)
!450 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blksize_t", file: !433, line: 174, baseType: !448)
!451 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !428, file: !429, line: 80, baseType: !452, size: 64, offset: 512)
!452 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blkcnt_t", file: !433, line: 179, baseType: !448)
!453 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !428, file: !429, line: 91, baseType: !454, size: 128, offset: 576)
!454 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !455, line: 10, size: 128, elements: !456)
!455 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h", directory: "")
!456 = !{!457, !459}
!457 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !454, file: !455, line: 12, baseType: !458, size: 64)
!458 = !DIDerivedType(tag: DW_TAG_typedef, name: "__time_t", file: !433, line: 160, baseType: !448)
!459 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !454, file: !455, line: 16, baseType: !460, size: 64, offset: 64)
!460 = !DIDerivedType(tag: DW_TAG_typedef, name: "__syscall_slong_t", file: !433, line: 196, baseType: !448)
!461 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !428, file: !429, line: 92, baseType: !454, size: 128, offset: 704)
!462 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !428, file: !429, line: 93, baseType: !454, size: 128, offset: 832)
!463 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !428, file: !429, line: 106, baseType: !464, size: 192, offset: 960)
!464 = !DICompositeType(tag: DW_TAG_array_type, baseType: !460, size: 192, elements: !465)
!465 = !{!466}
!466 = !DISubrange(count: 3)
!467 = !DILocation(line: 302, column: 15, scope: !424)
!468 = !DILocalVariable(name: "st2", scope: !424, file: !3, line: 303, type: !428)
!469 = !DILocation(line: 303, column: 15, scope: !424)
!470 = !DILocalVariable(name: "wd", scope: !424, file: !3, line: 304, type: !7)
!471 = !DILocation(line: 304, column: 9, scope: !424)
!472 = !DILocation(line: 304, column: 14, scope: !424)
!473 = !DILocalVariable(name: "p", scope: !424, file: !3, line: 305, type: !7)
!474 = !DILocation(line: 305, column: 9, scope: !424)
!475 = !DILocation(line: 308, column: 8, scope: !476)
!476 = distinct !DILexicalBlock(scope: !424, file: !3, line: 308, column: 7)
!477 = !DILocation(line: 308, column: 11, scope: !476)
!478 = !DILocation(line: 308, column: 14, scope: !476)
!479 = !DILocation(line: 308, column: 20, scope: !476)
!480 = !DILocation(line: 308, column: 7, scope: !424)
!481 = !DILocation(line: 309, column: 5, scope: !476)
!482 = !DILocation(line: 310, column: 7, scope: !424)
!483 = !DILocation(line: 310, column: 5, scope: !424)
!484 = !DILocation(line: 311, column: 3, scope: !424)
!485 = !DILocation(line: 311, column: 23, scope: !424)
!486 = !DILocation(line: 311, column: 15, scope: !424)
!487 = !DILocation(line: 311, column: 13, scope: !424)
!488 = !DILocation(line: 313, column: 12, scope: !489)
!489 = distinct !DILexicalBlock(scope: !490, file: !3, line: 313, column: 11)
!490 = distinct !DILexicalBlock(scope: !424, file: !3, line: 312, column: 5)
!491 = !DILocation(line: 313, column: 17, scope: !489)
!492 = !DILocation(line: 313, column: 20, scope: !489)
!493 = !DILocation(line: 313, column: 25, scope: !489)
!494 = !DILocation(line: 314, column: 11, scope: !489)
!495 = !DILocation(line: 314, column: 15, scope: !489)
!496 = !DILocation(line: 314, column: 20, scope: !489)
!497 = !DILocation(line: 314, column: 27, scope: !489)
!498 = !DILocation(line: 314, column: 32, scope: !489)
!499 = !DILocation(line: 314, column: 37, scope: !489)
!500 = !DILocation(line: 314, column: 40, scope: !489)
!501 = !DILocation(line: 314, column: 45, scope: !489)
!502 = !DILocation(line: 313, column: 11, scope: !490)
!503 = !DILocation(line: 315, column: 9, scope: !489)
!504 = !DILocation(line: 316, column: 8, scope: !490)
!505 = distinct !{!505, !484, !506}
!506 = !DILocation(line: 317, column: 5, scope: !424)
!507 = !DILocation(line: 320, column: 13, scope: !508)
!508 = distinct !DILexicalBlock(scope: !424, file: !3, line: 320, column: 7)
!509 = !DILocation(line: 320, column: 7, scope: !508)
!510 = !DILocation(line: 320, column: 23, scope: !508)
!511 = !DILocation(line: 320, column: 31, scope: !508)
!512 = !DILocation(line: 320, column: 48, scope: !508)
!513 = !DILocation(line: 320, column: 56, scope: !508)
!514 = !DILocation(line: 320, column: 7, scope: !424)
!515 = !DILocation(line: 321, column: 12, scope: !508)
!516 = !DILocation(line: 321, column: 5, scope: !508)
!517 = !DILocation(line: 322, column: 3, scope: !424)
!518 = !DILocation(line: 323, column: 1, scope: !424)
!519 = !DILocalVariable(name: "st1", scope: !520, file: !3, line: 302, type: !533)
!520 = distinct !DISubprogram(name: "logical_getcwd", scope: !3, file: !3, line: 300, type: !425, scopeLine: 301, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !521, retainedNodes: !4)
!521 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !522, nameTableKind: None)
!522 = !{!523}
!523 = !DIGlobalVariableExpression(var: !524, expr: !DIExpression())
!524 = distinct !DIGlobalVariable(name: "longopts", scope: !521, file: !3, line: 41, type: !525, isLocal: true, isDefinition: true)
!525 = !DICompositeType(tag: DW_TAG_array_type, baseType: !526, size: 1280, elements: !23)
!526 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !527)
!527 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !528)
!528 = !{!529, !530, !531, !532}
!529 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !527, file: !13, line: 52, baseType: !16, size: 64)
!530 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !527, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!531 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !527, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!532 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !527, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!533 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !429, line: 46, size: 1152, elements: !534)
!534 = !{!535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !551, !552, !553}
!535 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !533, file: !429, line: 48, baseType: !432, size: 64)
!536 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !533, file: !429, line: 53, baseType: !435, size: 64, offset: 64)
!537 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !533, file: !429, line: 61, baseType: !437, size: 64, offset: 128)
!538 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !533, file: !429, line: 62, baseType: !439, size: 32, offset: 192)
!539 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !533, file: !429, line: 64, baseType: !441, size: 32, offset: 224)
!540 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !533, file: !429, line: 65, baseType: !443, size: 32, offset: 256)
!541 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !533, file: !429, line: 67, baseType: !19, size: 32, offset: 288)
!542 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !533, file: !429, line: 69, baseType: !432, size: 64, offset: 320)
!543 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !533, file: !429, line: 74, baseType: !447, size: 64, offset: 384)
!544 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !533, file: !429, line: 78, baseType: !450, size: 64, offset: 448)
!545 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !533, file: !429, line: 80, baseType: !452, size: 64, offset: 512)
!546 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !533, file: !429, line: 91, baseType: !547, size: 128, offset: 576)
!547 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !455, line: 10, size: 128, elements: !548)
!548 = !{!549, !550}
!549 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !547, file: !455, line: 12, baseType: !458, size: 64)
!550 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !547, file: !455, line: 16, baseType: !460, size: 64, offset: 64)
!551 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !533, file: !429, line: 92, baseType: !547, size: 128, offset: 704)
!552 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !533, file: !429, line: 93, baseType: !547, size: 128, offset: 832)
!553 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !533, file: !429, line: 106, baseType: !464, size: 192, offset: 960)
!554 = !DILocalVariable(name: "st2", scope: !520, file: !3, line: 303, type: !533)
!555 = !DILocalVariable(name: "wd", scope: !520, file: !3, line: 304, type: !7)
!556 = !DILocalVariable(name: "p", scope: !520, file: !3, line: 305, type: !7)
!557 = distinct !DISubprogram(name: "file_name_init", scope: !3, file: !3, line: 85, type: !558, scopeLine: 86, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!558 = !DISubroutineType(types: !559)
!559 = !{!390}
!560 = !DILocalVariable(name: "p", scope: !557, file: !3, line: 87, type: !390)
!561 = !DILocation(line: 87, column: 21, scope: !557)
!562 = !DILocation(line: 87, column: 25, scope: !557)
!563 = !DILocation(line: 91, column: 3, scope: !557)
!564 = !DILocation(line: 91, column: 6, scope: !557)
!565 = !DILocation(line: 91, column: 14, scope: !557)
!566 = !DILocation(line: 93, column: 21, scope: !557)
!567 = !DILocation(line: 93, column: 24, scope: !557)
!568 = !DILocation(line: 93, column: 12, scope: !557)
!569 = !DILocation(line: 93, column: 3, scope: !557)
!570 = !DILocation(line: 93, column: 6, scope: !557)
!571 = !DILocation(line: 93, column: 10, scope: !557)
!572 = !DILocation(line: 94, column: 14, scope: !557)
!573 = !DILocation(line: 94, column: 17, scope: !557)
!574 = !DILocation(line: 94, column: 24, scope: !557)
!575 = !DILocation(line: 94, column: 27, scope: !557)
!576 = !DILocation(line: 94, column: 35, scope: !557)
!577 = !DILocation(line: 94, column: 21, scope: !557)
!578 = !DILocation(line: 94, column: 3, scope: !557)
!579 = !DILocation(line: 94, column: 6, scope: !557)
!580 = !DILocation(line: 94, column: 12, scope: !557)
!581 = !DILocation(line: 95, column: 3, scope: !557)
!582 = !DILocation(line: 95, column: 6, scope: !557)
!583 = !DILocation(line: 95, column: 15, scope: !557)
!584 = !DILocation(line: 96, column: 10, scope: !557)
!585 = !DILocation(line: 96, column: 3, scope: !557)
!586 = !DILocalVariable(name: "p", scope: !587, file: !3, line: 87, type: !590)
!587 = distinct !DISubprogram(name: "file_name_init", scope: !3, file: !3, line: 85, type: !588, scopeLine: 86, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !596, retainedNodes: !4)
!588 = !DISubroutineType(types: !589)
!589 = !{!590}
!590 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !591, size: 64)
!591 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "file_name", file: !3, line: 34, size: 192, elements: !592)
!592 = !{!593, !594, !595}
!593 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !591, file: !3, line: 36, baseType: !7, size: 64)
!594 = !DIDerivedType(tag: DW_TAG_member, name: "n_alloc", scope: !591, file: !3, line: 37, baseType: !74, size: 64, offset: 64)
!595 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !591, file: !3, line: 38, baseType: !7, size: 64, offset: 128)
!596 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !597, nameTableKind: None)
!597 = !{!598}
!598 = !DIGlobalVariableExpression(var: !599, expr: !DIExpression())
!599 = distinct !DIGlobalVariable(name: "longopts", scope: !596, file: !3, line: 41, type: !600, isLocal: true, isDefinition: true)
!600 = !DICompositeType(tag: DW_TAG_array_type, baseType: !601, size: 1280, elements: !23)
!601 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !602)
!602 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !603)
!603 = !{!604, !605, !606, !607}
!604 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !602, file: !13, line: 52, baseType: !16, size: 64)
!605 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !602, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!606 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !602, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!607 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !602, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!608 = distinct !DISubprogram(name: "robust_getcwd", scope: !3, file: !3, line: 268, type: !609, scopeLine: 269, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!609 = !DISubroutineType(types: !610)
!610 = !{null, !390}
!611 = !DILocalVariable(name: "file_name", arg: 1, scope: !608, file: !3, line: 268, type: !390)
!612 = !DILocation(line: 268, column: 34, scope: !608)
!613 = !DILocalVariable(name: "height", scope: !608, file: !3, line: 270, type: !74)
!614 = !DILocation(line: 270, column: 10, scope: !608)
!615 = !DILocalVariable(name: "dev_ino_buf", scope: !608, file: !3, line: 271, type: !616)
!616 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dev_ino", file: !617, line: 7, size: 128, elements: !618)
!617 = !DIFile(filename: "./lib/dev-ino.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!618 = !{!619, !622}
!619 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !616, file: !617, line: 9, baseType: !620, size: 64)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "ino_t", file: !621, line: 47, baseType: !435)
!621 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/sys/types.h", directory: "")
!622 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !616, file: !617, line: 10, baseType: !623, size: 64, offset: 64)
!623 = !DIDerivedType(tag: DW_TAG_typedef, name: "dev_t", file: !621, line: 59, baseType: !432)
!624 = !DILocation(line: 271, column: 18, scope: !608)
!625 = !DILocalVariable(name: "root_dev_ino", scope: !608, file: !3, line: 272, type: !626)
!626 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !616, size: 64)
!627 = !DILocation(line: 272, column: 19, scope: !608)
!628 = !DILocation(line: 272, column: 34, scope: !608)
!629 = !DILocalVariable(name: "dot_sb", scope: !608, file: !3, line: 273, type: !428)
!630 = !DILocation(line: 273, column: 15, scope: !608)
!631 = !DILocation(line: 275, column: 7, scope: !632)
!632 = distinct !DILexicalBlock(scope: !608, file: !3, line: 275, column: 7)
!633 = !DILocation(line: 275, column: 20, scope: !632)
!634 = !DILocation(line: 275, column: 7, scope: !608)
!635 = !DILocation(line: 276, column: 5, scope: !632)
!636 = !DILocation(line: 279, column: 7, scope: !637)
!637 = distinct !DILexicalBlock(scope: !608, file: !3, line: 279, column: 7)
!638 = !DILocation(line: 279, column: 27, scope: !637)
!639 = !DILocation(line: 279, column: 7, scope: !608)
!640 = !DILocation(line: 280, column: 5, scope: !637)
!641 = !DILocation(line: 282, column: 3, scope: !608)
!642 = !DILocation(line: 285, column: 11, scope: !643)
!643 = distinct !DILexicalBlock(scope: !644, file: !3, line: 285, column: 11)
!644 = distinct !DILexicalBlock(scope: !608, file: !3, line: 283, column: 5)
!645 = !DILocation(line: 285, column: 11, scope: !644)
!646 = !DILocation(line: 286, column: 9, scope: !643)
!647 = !DILocation(line: 288, column: 32, scope: !644)
!648 = !DILocation(line: 288, column: 49, scope: !644)
!649 = !DILocation(line: 288, column: 7, scope: !644)
!650 = distinct !{!650, !641, !651}
!651 = !DILocation(line: 289, column: 5, scope: !608)
!652 = !DILocation(line: 292, column: 7, scope: !653)
!653 = distinct !DILexicalBlock(scope: !608, file: !3, line: 292, column: 7)
!654 = !DILocation(line: 292, column: 18, scope: !653)
!655 = !DILocation(line: 292, column: 27, scope: !653)
!656 = !DILocation(line: 292, column: 7, scope: !608)
!657 = !DILocation(line: 293, column: 24, scope: !653)
!658 = !DILocation(line: 293, column: 5, scope: !653)
!659 = !DILocation(line: 294, column: 1, scope: !608)
!660 = !DILocalVariable(name: "file_name", arg: 1, scope: !661, file: !3, line: 268, type: !664)
!661 = distinct !DISubprogram(name: "robust_getcwd", scope: !3, file: !3, line: 268, type: !662, scopeLine: 269, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !670, retainedNodes: !4)
!662 = !DISubroutineType(types: !663)
!663 = !{null, !664}
!664 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !665, size: 64)
!665 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "file_name", file: !3, line: 34, size: 192, elements: !666)
!666 = !{!667, !668, !669}
!667 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !665, file: !3, line: 36, baseType: !7, size: 64)
!668 = !DIDerivedType(tag: DW_TAG_member, name: "n_alloc", scope: !665, file: !3, line: 37, baseType: !74, size: 64, offset: 64)
!669 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !665, file: !3, line: 38, baseType: !7, size: 64, offset: 128)
!670 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !671, nameTableKind: None)
!671 = !{!672}
!672 = !DIGlobalVariableExpression(var: !673, expr: !DIExpression())
!673 = distinct !DIGlobalVariable(name: "longopts", scope: !670, file: !3, line: 41, type: !674, isLocal: true, isDefinition: true)
!674 = !DICompositeType(tag: DW_TAG_array_type, baseType: !675, size: 1280, elements: !23)
!675 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !676)
!676 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !677)
!677 = !{!678, !679, !680, !681}
!678 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !676, file: !13, line: 52, baseType: !16, size: 64)
!679 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !676, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!680 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !676, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!681 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !676, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!682 = !DILocalVariable(name: "height", scope: !661, file: !3, line: 270, type: !74)
!683 = !DILocalVariable(name: "dev_ino_buf", scope: !661, file: !3, line: 271, type: !684)
!684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dev_ino", file: !617, line: 7, size: 128, elements: !685)
!685 = !{!686, !687}
!686 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !684, file: !617, line: 9, baseType: !620, size: 64)
!687 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !684, file: !617, line: 10, baseType: !623, size: 64, offset: 64)
!688 = !DILocalVariable(name: "root_dev_ino", scope: !661, file: !3, line: 272, type: !689)
!689 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !684, size: 64)
!690 = !DILocalVariable(name: "dot_sb", scope: !661, file: !3, line: 273, type: !691)
!691 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !429, line: 46, size: 1152, elements: !692)
!692 = !{!693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !709, !710, !711}
!693 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !691, file: !429, line: 48, baseType: !432, size: 64)
!694 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !691, file: !429, line: 53, baseType: !435, size: 64, offset: 64)
!695 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !691, file: !429, line: 61, baseType: !437, size: 64, offset: 128)
!696 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !691, file: !429, line: 62, baseType: !439, size: 32, offset: 192)
!697 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !691, file: !429, line: 64, baseType: !441, size: 32, offset: 224)
!698 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !691, file: !429, line: 65, baseType: !443, size: 32, offset: 256)
!699 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !691, file: !429, line: 67, baseType: !19, size: 32, offset: 288)
!700 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !691, file: !429, line: 69, baseType: !432, size: 64, offset: 320)
!701 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !691, file: !429, line: 74, baseType: !447, size: 64, offset: 384)
!702 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !691, file: !429, line: 78, baseType: !450, size: 64, offset: 448)
!703 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !691, file: !429, line: 80, baseType: !452, size: 64, offset: 512)
!704 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !691, file: !429, line: 91, baseType: !705, size: 128, offset: 576)
!705 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !455, line: 10, size: 128, elements: !706)
!706 = !{!707, !708}
!707 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !705, file: !455, line: 12, baseType: !458, size: 64)
!708 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !705, file: !455, line: 16, baseType: !460, size: 64, offset: 64)
!709 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !691, file: !429, line: 92, baseType: !705, size: 128, offset: 704)
!710 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !691, file: !429, line: 93, baseType: !705, size: 128, offset: 832)
!711 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !691, file: !429, line: 106, baseType: !464, size: 192, offset: 960)
!712 = distinct !DISubprogram(name: "file_name_free", scope: !3, file: !3, line: 78, type: !609, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!713 = !DILocalVariable(name: "p", arg: 1, scope: !712, file: !3, line: 78, type: !390)
!714 = !DILocation(line: 78, column: 35, scope: !712)
!715 = !DILocation(line: 80, column: 9, scope: !712)
!716 = !DILocation(line: 80, column: 12, scope: !712)
!717 = !DILocation(line: 80, column: 3, scope: !712)
!718 = !DILocation(line: 81, column: 9, scope: !712)
!719 = !DILocation(line: 81, column: 3, scope: !712)
!720 = !DILocation(line: 82, column: 1, scope: !712)
!721 = !DILocalVariable(name: "p", arg: 1, scope: !722, file: !3, line: 78, type: !725)
!722 = distinct !DISubprogram(name: "file_name_free", scope: !3, file: !3, line: 78, type: !723, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !731, retainedNodes: !4)
!723 = !DISubroutineType(types: !724)
!724 = !{null, !725}
!725 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !726, size: 64)
!726 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "file_name", file: !3, line: 34, size: 192, elements: !727)
!727 = !{!728, !729, !730}
!728 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !726, file: !3, line: 36, baseType: !7, size: 64)
!729 = !DIDerivedType(tag: DW_TAG_member, name: "n_alloc", scope: !726, file: !3, line: 37, baseType: !74, size: 64, offset: 64)
!730 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !726, file: !3, line: 38, baseType: !7, size: 64, offset: 128)
!731 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !732, nameTableKind: None)
!732 = !{!733}
!733 = !DIGlobalVariableExpression(var: !734, expr: !DIExpression())
!734 = distinct !DIGlobalVariable(name: "longopts", scope: !731, file: !3, line: 41, type: !735, isLocal: true, isDefinition: true)
!735 = !DICompositeType(tag: DW_TAG_array_type, baseType: !736, size: 1280, elements: !23)
!736 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !737)
!737 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !738)
!738 = !{!739, !740, !741, !742}
!739 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !737, file: !13, line: 52, baseType: !16, size: 64)
!740 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !737, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!741 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !737, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!742 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !737, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!743 = distinct !DISubprogram(name: "find_dir_entry", scope: !3, file: !3, line: 153, type: !744, scopeLine: 155, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!744 = !DISubroutineType(types: !745)
!745 = !{null, !746, !390, !74}
!746 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !428, size: 64)
!747 = !DILocalVariable(name: "dot_sb", arg: 1, scope: !743, file: !3, line: 153, type: !746)
!748 = !DILocation(line: 153, column: 30, scope: !743)
!749 = !DILocalVariable(name: "file_name", arg: 2, scope: !743, file: !3, line: 153, type: !390)
!750 = !DILocation(line: 153, column: 56, scope: !743)
!751 = !DILocalVariable(name: "parent_height", arg: 3, scope: !743, file: !3, line: 154, type: !74)
!752 = !DILocation(line: 154, column: 24, scope: !743)
!753 = !DILocalVariable(name: "dirp", scope: !743, file: !3, line: 156, type: !754)
!754 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !755, size: 64)
!755 = !DIDerivedType(tag: DW_TAG_typedef, name: "DIR", file: !756, line: 127, baseType: !757)
!756 = !DIFile(filename: "/usr/include/dirent.h", directory: "")
!757 = !DICompositeType(tag: DW_TAG_structure_type, name: "__dirstream", file: !756, line: 127, flags: DIFlagFwdDecl)
!758 = !DILocation(line: 156, column: 8, scope: !743)
!759 = !DILocalVariable(name: "fd", scope: !743, file: !3, line: 157, type: !19)
!760 = !DILocation(line: 157, column: 7, scope: !743)
!761 = !DILocalVariable(name: "parent_sb", scope: !743, file: !3, line: 158, type: !428)
!762 = !DILocation(line: 158, column: 15, scope: !743)
!763 = !DILocalVariable(name: "use_lstat", scope: !743, file: !3, line: 159, type: !38)
!764 = !DILocation(line: 159, column: 8, scope: !743)
!765 = !DILocalVariable(name: "found", scope: !743, file: !3, line: 160, type: !38)
!766 = !DILocation(line: 160, column: 8, scope: !743)
!767 = !DILocation(line: 162, column: 10, scope: !743)
!768 = !DILocation(line: 162, column: 8, scope: !743)
!769 = !DILocation(line: 163, column: 7, scope: !770)
!770 = distinct !DILexicalBlock(scope: !743, file: !3, line: 163, column: 7)
!771 = !DILocation(line: 163, column: 12, scope: !770)
!772 = !DILocation(line: 163, column: 7, scope: !743)
!773 = !DILocation(line: 164, column: 5, scope: !770)
!774 = !DILocation(line: 167, column: 15, scope: !743)
!775 = !DILocation(line: 167, column: 8, scope: !743)
!776 = !DILocation(line: 167, column: 6, scope: !743)
!777 = !DILocation(line: 168, column: 13, scope: !778)
!778 = distinct !DILexicalBlock(scope: !743, file: !3, line: 168, column: 7)
!779 = !DILocation(line: 168, column: 10, scope: !778)
!780 = !DILocation(line: 168, column: 8, scope: !778)
!781 = !DILocation(line: 168, column: 26, scope: !778)
!782 = !DILocation(line: 168, column: 18, scope: !778)
!783 = !DILocation(line: 168, column: 32, scope: !778)
!784 = !DILocation(line: 168, column: 46, scope: !778)
!785 = !DILocation(line: 168, column: 7, scope: !743)
!786 = !DILocation(line: 169, column: 5, scope: !778)
!787 = !DILocation(line: 172, column: 13, scope: !788)
!788 = distinct !DILexicalBlock(scope: !743, file: !3, line: 172, column: 7)
!789 = !DILocation(line: 172, column: 10, scope: !788)
!790 = !DILocation(line: 172, column: 8, scope: !788)
!791 = !DILocation(line: 172, column: 25, scope: !788)
!792 = !DILocation(line: 172, column: 18, scope: !788)
!793 = !DILocation(line: 172, column: 43, scope: !788)
!794 = !DILocation(line: 172, column: 67, scope: !788)
!795 = !DILocation(line: 172, column: 7, scope: !743)
!796 = !DILocation(line: 173, column: 5, scope: !788)
!797 = !DILocation(line: 178, column: 26, scope: !743)
!798 = !DILocation(line: 178, column: 36, scope: !743)
!799 = !DILocation(line: 178, column: 44, scope: !743)
!800 = !DILocation(line: 178, column: 33, scope: !743)
!801 = !DILocation(line: 178, column: 13, scope: !743)
!802 = !DILocation(line: 180, column: 9, scope: !743)
!803 = !DILocation(line: 181, column: 3, scope: !743)
!804 = !DILocalVariable(name: "dp", scope: !805, file: !3, line: 183, type: !806)
!805 = distinct !DILexicalBlock(scope: !743, file: !3, line: 182, column: 5)
!806 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !807, size: 64)
!807 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !808)
!808 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dirent", file: !809, line: 22, size: 2240, elements: !810)
!809 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/dirent.h", directory: "")
!810 = !{!811, !812, !813, !814, !815}
!811 = !DIDerivedType(tag: DW_TAG_member, name: "d_ino", scope: !808, file: !809, line: 25, baseType: !435, size: 64)
!812 = !DIDerivedType(tag: DW_TAG_member, name: "d_off", scope: !808, file: !809, line: 26, baseType: !447, size: 64, offset: 64)
!813 = !DIDerivedType(tag: DW_TAG_member, name: "d_reclen", scope: !808, file: !809, line: 31, baseType: !73, size: 16, offset: 128)
!814 = !DIDerivedType(tag: DW_TAG_member, name: "d_type", scope: !808, file: !809, line: 32, baseType: !148, size: 8, offset: 144)
!815 = !DIDerivedType(tag: DW_TAG_member, name: "d_name", scope: !808, file: !809, line: 33, baseType: !105, size: 2048, offset: 152)
!816 = !DILocation(line: 183, column: 28, scope: !805)
!817 = !DILocalVariable(name: "ent_sb", scope: !805, file: !3, line: 184, type: !428)
!818 = !DILocation(line: 184, column: 19, scope: !805)
!819 = !DILocalVariable(name: "ino", scope: !805, file: !3, line: 185, type: !620)
!820 = !DILocation(line: 185, column: 13, scope: !805)
!821 = !DILocation(line: 187, column: 7, scope: !805)
!822 = !DILocation(line: 187, column: 13, scope: !805)
!823 = !DILocation(line: 188, column: 50, scope: !824)
!824 = distinct !DILexicalBlock(scope: !805, file: !3, line: 188, column: 11)
!825 = !DILocation(line: 188, column: 17, scope: !824)
!826 = !DILocation(line: 188, column: 15, scope: !824)
!827 = !DILocation(line: 188, column: 57, scope: !824)
!828 = !DILocation(line: 188, column: 11, scope: !805)
!829 = !DILocation(line: 190, column: 15, scope: !830)
!830 = distinct !DILexicalBlock(scope: !831, file: !3, line: 190, column: 15)
!831 = distinct !DILexicalBlock(scope: !824, file: !3, line: 189, column: 9)
!832 = !DILocation(line: 190, column: 15, scope: !831)
!833 = !DILocalVariable(name: "e", scope: !834, file: !3, line: 193, type: !19)
!834 = distinct !DILexicalBlock(scope: !830, file: !3, line: 191, column: 13)
!835 = !DILocation(line: 193, column: 19, scope: !834)
!836 = !DILocation(line: 193, column: 23, scope: !834)
!837 = !DILocation(line: 194, column: 25, scope: !834)
!838 = !DILocation(line: 194, column: 15, scope: !834)
!839 = !DILocation(line: 195, column: 23, scope: !834)
!840 = !DILocation(line: 195, column: 15, scope: !834)
!841 = !DILocation(line: 195, column: 21, scope: !834)
!842 = !DILocation(line: 198, column: 20, scope: !834)
!843 = !DILocation(line: 199, column: 13, scope: !834)
!844 = !DILocation(line: 200, column: 11, scope: !831)
!845 = !DILocation(line: 203, column: 13, scope: !805)
!846 = !DILocation(line: 203, column: 11, scope: !805)
!847 = !DILocation(line: 205, column: 11, scope: !848)
!848 = distinct !DILexicalBlock(scope: !805, file: !3, line: 205, column: 11)
!849 = !DILocation(line: 205, column: 15, scope: !848)
!850 = !DILocation(line: 205, column: 38, scope: !848)
!851 = !DILocation(line: 205, column: 41, scope: !848)
!852 = !DILocation(line: 205, column: 11, scope: !805)
!853 = !DILocation(line: 207, column: 22, scope: !854)
!854 = distinct !DILexicalBlock(scope: !855, file: !3, line: 207, column: 15)
!855 = distinct !DILexicalBlock(scope: !848, file: !3, line: 206, column: 9)
!856 = !DILocation(line: 207, column: 26, scope: !854)
!857 = !DILocation(line: 207, column: 15, scope: !854)
!858 = !DILocation(line: 207, column: 43, scope: !854)
!859 = !DILocation(line: 207, column: 15, scope: !855)
!860 = !DILocation(line: 210, column: 15, scope: !861)
!861 = distinct !DILexicalBlock(scope: !854, file: !3, line: 208, column: 13)
!862 = distinct !{!862, !803, !863}
!863 = !DILocation(line: 226, column: 5, scope: !743)
!864 = !DILocation(line: 212, column: 24, scope: !855)
!865 = !DILocation(line: 212, column: 15, scope: !855)
!866 = !DILocation(line: 213, column: 9, scope: !855)
!867 = !DILocation(line: 215, column: 11, scope: !868)
!868 = distinct !DILexicalBlock(scope: !805, file: !3, line: 215, column: 11)
!869 = !DILocation(line: 215, column: 18, scope: !868)
!870 = !DILocation(line: 215, column: 26, scope: !868)
!871 = !DILocation(line: 215, column: 15, scope: !868)
!872 = !DILocation(line: 215, column: 11, scope: !805)
!873 = !DILocation(line: 216, column: 9, scope: !868)
!874 = !DILocation(line: 220, column: 14, scope: !875)
!875 = distinct !DILexicalBlock(scope: !805, file: !3, line: 220, column: 12)
!876 = !DILocation(line: 220, column: 24, scope: !875)
!877 = !DILocation(line: 220, column: 34, scope: !875)
!878 = !DILocation(line: 220, column: 44, scope: !875)
!879 = !DILocation(line: 220, column: 52, scope: !875)
!880 = !DILocation(line: 220, column: 41, scope: !875)
!881 = !DILocation(line: 220, column: 12, scope: !805)
!882 = !DILocation(line: 222, column: 30, scope: !883)
!883 = distinct !DILexicalBlock(scope: !875, file: !3, line: 221, column: 9)
!884 = !DILocation(line: 222, column: 41, scope: !883)
!885 = !DILocation(line: 222, column: 45, scope: !883)
!886 = !DILocation(line: 222, column: 53, scope: !883)
!887 = !DILocation(line: 222, column: 11, scope: !883)
!888 = !DILocation(line: 223, column: 17, scope: !883)
!889 = !DILocation(line: 224, column: 11, scope: !883)
!890 = !DILocation(line: 228, column: 7, scope: !891)
!891 = distinct !DILexicalBlock(scope: !743, file: !3, line: 228, column: 7)
!892 = !DILocation(line: 228, column: 12, scope: !891)
!893 = !DILocation(line: 228, column: 20, scope: !891)
!894 = !DILocation(line: 228, column: 33, scope: !891)
!895 = !DILocation(line: 228, column: 23, scope: !891)
!896 = !DILocation(line: 228, column: 39, scope: !891)
!897 = !DILocation(line: 228, column: 7, scope: !743)
!898 = !DILocation(line: 232, column: 7, scope: !899)
!899 = distinct !DILexicalBlock(scope: !891, file: !3, line: 229, column: 5)
!900 = !DILocation(line: 236, column: 10, scope: !901)
!901 = distinct !DILexicalBlock(scope: !743, file: !3, line: 236, column: 8)
!902 = !DILocation(line: 236, column: 8, scope: !743)
!903 = !DILocation(line: 237, column: 5, scope: !901)
!904 = !DILocation(line: 241, column: 4, scope: !743)
!905 = !DILocation(line: 241, column: 13, scope: !743)
!906 = !DILocation(line: 242, column: 1, scope: !743)
!907 = !DILocalVariable(name: "dot_sb", arg: 1, scope: !908, file: !3, line: 153, type: !911)
!908 = distinct !DISubprogram(name: "find_dir_entry", scope: !3, file: !3, line: 153, type: !909, scopeLine: 155, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !939, retainedNodes: !4)
!909 = !DISubroutineType(types: !910)
!910 = !{null, !911, !933, !74}
!911 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !912, size: 64)
!912 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !429, line: 46, size: 1152, elements: !913)
!913 = !{!914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !930, !931, !932}
!914 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !912, file: !429, line: 48, baseType: !432, size: 64)
!915 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !912, file: !429, line: 53, baseType: !435, size: 64, offset: 64)
!916 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !912, file: !429, line: 61, baseType: !437, size: 64, offset: 128)
!917 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !912, file: !429, line: 62, baseType: !439, size: 32, offset: 192)
!918 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !912, file: !429, line: 64, baseType: !441, size: 32, offset: 224)
!919 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !912, file: !429, line: 65, baseType: !443, size: 32, offset: 256)
!920 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !912, file: !429, line: 67, baseType: !19, size: 32, offset: 288)
!921 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !912, file: !429, line: 69, baseType: !432, size: 64, offset: 320)
!922 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !912, file: !429, line: 74, baseType: !447, size: 64, offset: 384)
!923 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !912, file: !429, line: 78, baseType: !450, size: 64, offset: 448)
!924 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !912, file: !429, line: 80, baseType: !452, size: 64, offset: 512)
!925 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !912, file: !429, line: 91, baseType: !926, size: 128, offset: 576)
!926 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !455, line: 10, size: 128, elements: !927)
!927 = !{!928, !929}
!928 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !926, file: !455, line: 12, baseType: !458, size: 64)
!929 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !926, file: !455, line: 16, baseType: !460, size: 64, offset: 64)
!930 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !912, file: !429, line: 92, baseType: !926, size: 128, offset: 704)
!931 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !912, file: !429, line: 93, baseType: !926, size: 128, offset: 832)
!932 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !912, file: !429, line: 106, baseType: !464, size: 192, offset: 960)
!933 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !934, size: 64)
!934 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "file_name", file: !3, line: 34, size: 192, elements: !935)
!935 = !{!936, !937, !938}
!936 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !934, file: !3, line: 36, baseType: !7, size: 64)
!937 = !DIDerivedType(tag: DW_TAG_member, name: "n_alloc", scope: !934, file: !3, line: 37, baseType: !74, size: 64, offset: 64)
!938 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !934, file: !3, line: 38, baseType: !7, size: 64, offset: 128)
!939 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !940, nameTableKind: None)
!940 = !{!941}
!941 = !DIGlobalVariableExpression(var: !942, expr: !DIExpression())
!942 = distinct !DIGlobalVariable(name: "longopts", scope: !939, file: !3, line: 41, type: !943, isLocal: true, isDefinition: true)
!943 = !DICompositeType(tag: DW_TAG_array_type, baseType: !944, size: 1280, elements: !23)
!944 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !945)
!945 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !946)
!946 = !{!947, !948, !949, !950}
!947 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !945, file: !13, line: 52, baseType: !16, size: 64)
!948 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !945, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!949 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !945, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!950 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !945, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!951 = !DILocalVariable(name: "file_name", arg: 2, scope: !908, file: !3, line: 153, type: !933)
!952 = !DILocalVariable(name: "parent_height", arg: 3, scope: !908, file: !3, line: 154, type: !74)
!953 = !DILocalVariable(name: "dirp", scope: !908, file: !3, line: 156, type: !754)
!954 = !DILocalVariable(name: "fd", scope: !908, file: !3, line: 157, type: !19)
!955 = !DILocalVariable(name: "parent_sb", scope: !908, file: !3, line: 158, type: !912)
!956 = !DILocalVariable(name: "use_lstat", scope: !908, file: !3, line: 159, type: !38)
!957 = !DILocalVariable(name: "found", scope: !908, file: !3, line: 160, type: !38)
!958 = distinct !DISubprogram(name: "file_name_prepend", scope: !3, file: !3, line: 101, type: !959, scopeLine: 102, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!959 = !DISubroutineType(types: !960)
!960 = !{null, !390, !16, !74}
!961 = !DILocalVariable(name: "p", arg: 1, scope: !958, file: !3, line: 101, type: !390)
!962 = !DILocation(line: 101, column: 38, scope: !958)
!963 = !DILocalVariable(name: "s", arg: 2, scope: !958, file: !3, line: 101, type: !16)
!964 = !DILocation(line: 101, column: 53, scope: !958)
!965 = !DILocalVariable(name: "s_len", arg: 3, scope: !958, file: !3, line: 101, type: !74)
!966 = !DILocation(line: 101, column: 63, scope: !958)
!967 = !DILocalVariable(name: "n_free", scope: !958, file: !3, line: 103, type: !74)
!968 = !DILocation(line: 103, column: 10, scope: !958)
!969 = !DILocation(line: 103, column: 19, scope: !958)
!970 = !DILocation(line: 103, column: 22, scope: !958)
!971 = !DILocation(line: 103, column: 30, scope: !958)
!972 = !DILocation(line: 103, column: 33, scope: !958)
!973 = !DILocation(line: 103, column: 28, scope: !958)
!974 = !DILocation(line: 104, column: 7, scope: !975)
!975 = distinct !DILexicalBlock(scope: !958, file: !3, line: 104, column: 7)
!976 = !DILocation(line: 104, column: 20, scope: !975)
!977 = !DILocation(line: 104, column: 18, scope: !975)
!978 = !DILocation(line: 104, column: 14, scope: !975)
!979 = !DILocation(line: 104, column: 7, scope: !958)
!980 = !DILocalVariable(name: "half", scope: !981, file: !3, line: 106, type: !74)
!981 = distinct !DILexicalBlock(scope: !975, file: !3, line: 105, column: 5)
!982 = !DILocation(line: 106, column: 14, scope: !981)
!983 = !DILocation(line: 106, column: 21, scope: !981)
!984 = !DILocation(line: 106, column: 24, scope: !981)
!985 = !DILocation(line: 106, column: 32, scope: !981)
!986 = !DILocation(line: 106, column: 38, scope: !981)
!987 = !DILocation(line: 106, column: 36, scope: !981)
!988 = !DILocalVariable(name: "q", scope: !981, file: !3, line: 111, type: !7)
!989 = !DILocation(line: 111, column: 13, scope: !981)
!990 = !DILocation(line: 111, column: 30, scope: !981)
!991 = !DILocation(line: 111, column: 17, scope: !981)
!992 = !DILocalVariable(name: "n_used", scope: !981, file: !3, line: 112, type: !74)
!993 = !DILocation(line: 112, column: 14, scope: !981)
!994 = !DILocation(line: 112, column: 23, scope: !981)
!995 = !DILocation(line: 112, column: 26, scope: !981)
!996 = !DILocation(line: 112, column: 36, scope: !981)
!997 = !DILocation(line: 112, column: 34, scope: !981)
!998 = !DILocation(line: 113, column: 18, scope: !981)
!999 = !DILocation(line: 113, column: 26, scope: !981)
!1000 = !DILocation(line: 113, column: 24, scope: !981)
!1001 = !DILocation(line: 113, column: 20, scope: !981)
!1002 = !DILocation(line: 113, column: 33, scope: !981)
!1003 = !DILocation(line: 113, column: 31, scope: !981)
!1004 = !DILocation(line: 113, column: 7, scope: !981)
!1005 = !DILocation(line: 113, column: 10, scope: !981)
!1006 = !DILocation(line: 113, column: 16, scope: !981)
!1007 = !DILocation(line: 114, column: 15, scope: !981)
!1008 = !DILocation(line: 114, column: 18, scope: !981)
!1009 = !DILocation(line: 114, column: 25, scope: !981)
!1010 = !DILocation(line: 114, column: 28, scope: !981)
!1011 = !DILocation(line: 114, column: 34, scope: !981)
!1012 = !DILocation(line: 114, column: 32, scope: !981)
!1013 = !DILocation(line: 114, column: 42, scope: !981)
!1014 = !DILocation(line: 114, column: 7, scope: !981)
!1015 = !DILocation(line: 115, column: 13, scope: !981)
!1016 = !DILocation(line: 115, column: 16, scope: !981)
!1017 = !DILocation(line: 115, column: 7, scope: !981)
!1018 = !DILocation(line: 116, column: 16, scope: !981)
!1019 = !DILocation(line: 116, column: 7, scope: !981)
!1020 = !DILocation(line: 116, column: 10, scope: !981)
!1021 = !DILocation(line: 116, column: 14, scope: !981)
!1022 = !DILocation(line: 117, column: 24, scope: !981)
!1023 = !DILocation(line: 117, column: 22, scope: !981)
!1024 = !DILocation(line: 117, column: 7, scope: !981)
!1025 = !DILocation(line: 117, column: 10, scope: !981)
!1026 = !DILocation(line: 117, column: 18, scope: !981)
!1027 = !DILocation(line: 118, column: 5, scope: !981)
!1028 = !DILocation(line: 120, column: 19, scope: !958)
!1029 = !DILocation(line: 120, column: 17, scope: !958)
!1030 = !DILocation(line: 120, column: 3, scope: !958)
!1031 = !DILocation(line: 120, column: 6, scope: !958)
!1032 = !DILocation(line: 120, column: 12, scope: !958)
!1033 = !DILocation(line: 121, column: 3, scope: !958)
!1034 = !DILocation(line: 121, column: 6, scope: !958)
!1035 = !DILocation(line: 121, column: 15, scope: !958)
!1036 = !DILocation(line: 122, column: 11, scope: !958)
!1037 = !DILocation(line: 122, column: 14, scope: !958)
!1038 = !DILocation(line: 122, column: 20, scope: !958)
!1039 = !DILocation(line: 122, column: 25, scope: !958)
!1040 = !DILocation(line: 122, column: 28, scope: !958)
!1041 = !DILocation(line: 122, column: 3, scope: !958)
!1042 = !DILocation(line: 123, column: 1, scope: !958)
!1043 = !DILocalVariable(name: "p", arg: 1, scope: !1044, file: !3, line: 101, type: !1047)
!1044 = distinct !DISubprogram(name: "file_name_prepend", scope: !3, file: !3, line: 101, type: !1045, scopeLine: 102, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1053, retainedNodes: !4)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{null, !1047, !16, !74}
!1047 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1048, size: 64)
!1048 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "file_name", file: !3, line: 34, size: 192, elements: !1049)
!1049 = !{!1050, !1051, !1052}
!1050 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !1048, file: !3, line: 36, baseType: !7, size: 64)
!1051 = !DIDerivedType(tag: DW_TAG_member, name: "n_alloc", scope: !1048, file: !3, line: 37, baseType: !74, size: 64, offset: 64)
!1052 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !1048, file: !3, line: 38, baseType: !7, size: 64, offset: 128)
!1053 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !1054, nameTableKind: None)
!1054 = !{!1055}
!1055 = !DIGlobalVariableExpression(var: !1056, expr: !DIExpression())
!1056 = distinct !DIGlobalVariable(name: "longopts", scope: !1053, file: !3, line: 41, type: !1057, isLocal: true, isDefinition: true)
!1057 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1058, size: 1280, elements: !23)
!1058 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1059)
!1059 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !1060)
!1060 = !{!1061, !1062, !1063, !1064}
!1061 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1059, file: !13, line: 52, baseType: !16, size: 64)
!1062 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !1059, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!1063 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1059, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!1064 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1059, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!1065 = !DILocalVariable(name: "s", arg: 2, scope: !1044, file: !3, line: 101, type: !16)
!1066 = !DILocalVariable(name: "s_len", arg: 3, scope: !1044, file: !3, line: 101, type: !74)
!1067 = !DILocalVariable(name: "n_free", scope: !1044, file: !3, line: 103, type: !74)
!1068 = !DILocalVariable(name: "q", scope: !1069, file: !3, line: 111, type: !7)
!1069 = distinct !DILexicalBlock(scope: !1070, file: !3, line: 105, column: 5)
!1070 = distinct !DILexicalBlock(scope: !1071, file: !3, line: 104, column: 7)
!1071 = distinct !DISubprogram(name: "file_name_prepend", scope: !3, file: !3, line: 101, type: !1072, scopeLine: 102, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1080, retainedNodes: !4)
!1072 = !DISubroutineType(types: !1073)
!1073 = !{null, !1074, !16, !74}
!1074 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1075, size: 64)
!1075 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "file_name", file: !3, line: 34, size: 192, elements: !1076)
!1076 = !{!1077, !1078, !1079}
!1077 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !1075, file: !3, line: 36, baseType: !7, size: 64)
!1078 = !DIDerivedType(tag: DW_TAG_member, name: "n_alloc", scope: !1075, file: !3, line: 37, baseType: !74, size: 64, offset: 64)
!1079 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !1075, file: !3, line: 38, baseType: !7, size: 64, offset: 128)
!1080 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !1081, nameTableKind: None)
!1081 = !{!1082}
!1082 = !DIGlobalVariableExpression(var: !1083, expr: !DIExpression())
!1083 = distinct !DIGlobalVariable(name: "longopts", scope: !1080, file: !3, line: 41, type: !1084, isLocal: true, isDefinition: true)
!1084 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1085, size: 1280, elements: !23)
!1085 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1086)
!1086 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !1087)
!1087 = !{!1088, !1089, !1090, !1091}
!1088 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1086, file: !13, line: 52, baseType: !16, size: 64)
!1089 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !1086, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!1090 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1086, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!1091 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1086, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!1092 = !DILocalVariable(name: "n_used", scope: !1069, file: !3, line: 112, type: !74)
!1093 = distinct !DISubprogram(name: "nth_parent", scope: !3, file: !3, line: 127, type: !1094, scopeLine: 128, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!1094 = !DISubroutineType(types: !1095)
!1095 = !{!7, !74}
!1096 = !DILocalVariable(name: "n", arg: 1, scope: !1093, file: !3, line: 127, type: !74)
!1097 = !DILocation(line: 127, column: 20, scope: !1093)
!1098 = !DILocalVariable(name: "buf", scope: !1093, file: !3, line: 129, type: !7)
!1099 = !DILocation(line: 129, column: 9, scope: !1093)
!1100 = !DILocation(line: 129, column: 28, scope: !1093)
!1101 = !DILocation(line: 129, column: 15, scope: !1093)
!1102 = !DILocalVariable(name: "p", scope: !1093, file: !3, line: 130, type: !7)
!1103 = !DILocation(line: 130, column: 9, scope: !1093)
!1104 = !DILocation(line: 130, column: 13, scope: !1093)
!1105 = !DILocalVariable(name: "i", scope: !1106, file: !3, line: 132, type: !74)
!1106 = distinct !DILexicalBlock(scope: !1093, file: !3, line: 132, column: 3)
!1107 = !DILocation(line: 132, column: 15, scope: !1106)
!1108 = !DILocation(line: 132, column: 8, scope: !1106)
!1109 = !DILocation(line: 132, column: 22, scope: !1110)
!1110 = distinct !DILexicalBlock(scope: !1106, file: !3, line: 132, column: 3)
!1111 = !DILocation(line: 132, column: 26, scope: !1110)
!1112 = !DILocation(line: 132, column: 24, scope: !1110)
!1113 = !DILocation(line: 132, column: 3, scope: !1106)
!1114 = !DILocation(line: 134, column: 15, scope: !1115)
!1115 = distinct !DILexicalBlock(scope: !1110, file: !3, line: 133, column: 5)
!1116 = !DILocation(line: 134, column: 7, scope: !1115)
!1117 = !DILocation(line: 135, column: 9, scope: !1115)
!1118 = !DILocation(line: 136, column: 5, scope: !1115)
!1119 = !DILocation(line: 132, column: 30, scope: !1110)
!1120 = !DILocation(line: 132, column: 3, scope: !1110)
!1121 = distinct !{!1121, !1113, !1122}
!1122 = !DILocation(line: 136, column: 5, scope: !1106)
!1123 = !DILocation(line: 137, column: 3, scope: !1093)
!1124 = !DILocation(line: 137, column: 9, scope: !1093)
!1125 = !DILocation(line: 138, column: 10, scope: !1093)
!1126 = !DILocation(line: 138, column: 3, scope: !1093)
!1127 = !DILocalVariable(name: "n", arg: 1, scope: !1128, file: !3, line: 127, type: !74)
!1128 = distinct !DISubprogram(name: "nth_parent", scope: !3, file: !3, line: 127, type: !1094, scopeLine: 128, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1129, retainedNodes: !4)
!1129 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !1130, nameTableKind: None)
!1130 = !{!1131}
!1131 = !DIGlobalVariableExpression(var: !1132, expr: !DIExpression())
!1132 = distinct !DIGlobalVariable(name: "longopts", scope: !1129, file: !3, line: 41, type: !1133, isLocal: true, isDefinition: true)
!1133 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1134, size: 1280, elements: !23)
!1134 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1135)
!1135 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !1136)
!1136 = !{!1137, !1138, !1139, !1140}
!1137 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1135, file: !13, line: 52, baseType: !16, size: 64)
!1138 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !1135, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!1139 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1135, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!1140 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1135, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!1141 = !DILocalVariable(name: "buf", scope: !1128, file: !3, line: 129, type: !7)
!1142 = !DILocalVariable(name: "p", scope: !1128, file: !3, line: 130, type: !7)
!1143 = !DILocalVariable(name: "i", scope: !1144, file: !3, line: 132, type: !74)
!1144 = distinct !DILexicalBlock(scope: !1128, file: !3, line: 132, column: 3)
!1145 = distinct !DISubprogram(name: "readdir_ignoring_dot_and_dotdot", scope: !212, file: !212, line: 278, type: !1146, scopeLine: 279, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!1146 = !DISubroutineType(types: !1147)
!1147 = !{!806, !754}
!1148 = !DILocalVariable(name: "dirp", arg: 1, scope: !1145, file: !212, line: 278, type: !754)
!1149 = !DILocation(line: 278, column: 39, scope: !1145)
!1150 = !DILocation(line: 280, column: 3, scope: !1145)
!1151 = !DILocalVariable(name: "dp", scope: !1152, file: !212, line: 282, type: !806)
!1152 = distinct !DILexicalBlock(scope: !1145, file: !212, line: 281, column: 5)
!1153 = !DILocation(line: 282, column: 28, scope: !1152)
!1154 = !DILocation(line: 282, column: 42, scope: !1152)
!1155 = !DILocation(line: 282, column: 33, scope: !1152)
!1156 = !DILocation(line: 283, column: 11, scope: !1157)
!1157 = distinct !DILexicalBlock(scope: !1152, file: !212, line: 283, column: 11)
!1158 = !DILocation(line: 283, column: 14, scope: !1157)
!1159 = !DILocation(line: 283, column: 22, scope: !1157)
!1160 = !DILocation(line: 283, column: 42, scope: !1157)
!1161 = !DILocation(line: 283, column: 46, scope: !1157)
!1162 = !DILocation(line: 283, column: 27, scope: !1157)
!1163 = !DILocation(line: 283, column: 11, scope: !1152)
!1164 = !DILocation(line: 284, column: 16, scope: !1157)
!1165 = !DILocation(line: 284, column: 9, scope: !1157)
!1166 = distinct !{!1166, !1150, !1167}
!1167 = !DILocation(line: 285, column: 5, scope: !1145)
!1168 = !DILocalVariable(name: "dirp", arg: 1, scope: !1169, file: !212, line: 278, type: !754)
!1169 = distinct !DISubprogram(name: "readdir_ignoring_dot_and_dotdot", scope: !212, file: !212, line: 278, type: !1170, scopeLine: 279, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1181, retainedNodes: !4)
!1170 = !DISubroutineType(types: !1171)
!1171 = !{!1172, !754}
!1172 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1173, size: 64)
!1173 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1174)
!1174 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dirent", file: !809, line: 22, size: 2240, elements: !1175)
!1175 = !{!1176, !1177, !1178, !1179, !1180}
!1176 = !DIDerivedType(tag: DW_TAG_member, name: "d_ino", scope: !1174, file: !809, line: 25, baseType: !435, size: 64)
!1177 = !DIDerivedType(tag: DW_TAG_member, name: "d_off", scope: !1174, file: !809, line: 26, baseType: !447, size: 64, offset: 64)
!1178 = !DIDerivedType(tag: DW_TAG_member, name: "d_reclen", scope: !1174, file: !809, line: 31, baseType: !73, size: 16, offset: 128)
!1179 = !DIDerivedType(tag: DW_TAG_member, name: "d_type", scope: !1174, file: !809, line: 32, baseType: !148, size: 8, offset: 144)
!1180 = !DIDerivedType(tag: DW_TAG_member, name: "d_name", scope: !1174, file: !809, line: 33, baseType: !105, size: 2048, offset: 152)
!1181 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !1182, nameTableKind: None)
!1182 = !{!1183}
!1183 = !DIGlobalVariableExpression(var: !1184, expr: !DIExpression())
!1184 = distinct !DIGlobalVariable(name: "longopts", scope: !1181, file: !3, line: 41, type: !1185, isLocal: true, isDefinition: true)
!1185 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1186, size: 1280, elements: !23)
!1186 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1187)
!1187 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !1188)
!1188 = !{!1189, !1190, !1191, !1192}
!1189 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1187, file: !13, line: 52, baseType: !16, size: 64)
!1190 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !1187, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!1191 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1187, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!1192 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1187, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!1193 = distinct !DISubprogram(name: "dot_or_dotdot", scope: !212, file: !212, line: 265, type: !1194, scopeLine: 266, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!1194 = !DISubroutineType(types: !1195)
!1195 = !{!38, !16}
!1196 = !DILocalVariable(name: "file_name", arg: 1, scope: !1193, file: !212, line: 265, type: !16)
!1197 = !DILocation(line: 265, column: 28, scope: !1193)
!1198 = !DILocation(line: 267, column: 7, scope: !1199)
!1199 = distinct !DILexicalBlock(scope: !1193, file: !212, line: 267, column: 7)
!1200 = !DILocation(line: 267, column: 20, scope: !1199)
!1201 = !DILocation(line: 267, column: 7, scope: !1193)
!1202 = !DILocalVariable(name: "sep", scope: !1203, file: !212, line: 269, type: !8)
!1203 = distinct !DILexicalBlock(scope: !1199, file: !212, line: 268, column: 5)
!1204 = !DILocation(line: 269, column: 12, scope: !1203)
!1205 = !DILocation(line: 269, column: 18, scope: !1203)
!1206 = !DILocation(line: 269, column: 29, scope: !1203)
!1207 = !DILocation(line: 269, column: 42, scope: !1203)
!1208 = !DILocation(line: 269, column: 50, scope: !1203)
!1209 = !DILocation(line: 270, column: 17, scope: !1203)
!1210 = !DILocation(line: 270, column: 21, scope: !1203)
!1211 = !DILocation(line: 270, column: 24, scope: !1203)
!1212 = !DILocation(line: 270, column: 7, scope: !1203)
!1213 = !DILocation(line: 273, column: 5, scope: !1199)
!1214 = !DILocation(line: 274, column: 1, scope: !1193)
!1215 = !DILocalVariable(name: "file_name", arg: 1, scope: !1216, file: !212, line: 265, type: !16)
!1216 = distinct !DISubprogram(name: "dot_or_dotdot", scope: !212, file: !212, line: 265, type: !1194, scopeLine: 266, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1217, retainedNodes: !4)
!1217 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !1218, nameTableKind: None)
!1218 = !{!1219}
!1219 = !DIGlobalVariableExpression(var: !1220, expr: !DIExpression())
!1220 = distinct !DIGlobalVariable(name: "longopts", scope: !1217, file: !3, line: 41, type: !1221, isLocal: true, isDefinition: true)
!1221 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1222, size: 1280, elements: !23)
!1222 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1223)
!1223 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !1224)
!1224 = !{!1225, !1226, !1227, !1228}
!1225 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1223, file: !13, line: 52, baseType: !16, size: 64)
!1226 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !1223, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!1227 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1223, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!1228 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1223, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!1229 = distinct !DISubprogram(name: "close_stdout", scope: !37, file: !37, line: 117, type: !1230, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !32, retainedNodes: !4)
!1230 = !DISubroutineType(types: !1231)
!1231 = !{null}
!1232 = !DILocation(line: 119, column: 21, scope: !1233)
!1233 = distinct !DILexicalBlock(scope: !1229, file: !37, line: 119, column: 7)
!1234 = !DILocation(line: 119, column: 7, scope: !1233)
!1235 = !DILocation(line: 119, column: 29, scope: !1233)
!1236 = !DILocation(line: 120, column: 7, scope: !1233)
!1237 = !DILocation(line: 120, column: 12, scope: !1233)
!1238 = !DILocation(line: 120, column: 25, scope: !1233)
!1239 = !DILocation(line: 120, column: 28, scope: !1233)
!1240 = !DILocation(line: 120, column: 34, scope: !1233)
!1241 = !DILocation(line: 119, column: 7, scope: !1229)
!1242 = !DILocalVariable(name: "write_error", scope: !1243, file: !37, line: 122, type: !16)
!1243 = distinct !DILexicalBlock(scope: !1233, file: !37, line: 121, column: 5)
!1244 = !DILocation(line: 122, column: 19, scope: !1243)
!1245 = !DILocation(line: 122, column: 33, scope: !1243)
!1246 = !DILocation(line: 123, column: 11, scope: !1247)
!1247 = distinct !DILexicalBlock(scope: !1243, file: !37, line: 123, column: 11)
!1248 = !DILocation(line: 123, column: 11, scope: !1243)
!1249 = !DILocation(line: 124, column: 19, scope: !1247)
!1250 = !DILocation(line: 124, column: 52, scope: !1247)
!1251 = !DILocation(line: 124, column: 36, scope: !1247)
!1252 = !DILocation(line: 125, column: 16, scope: !1247)
!1253 = !DILocation(line: 124, column: 9, scope: !1247)
!1254 = !DILocation(line: 127, column: 19, scope: !1247)
!1255 = !DILocation(line: 127, column: 32, scope: !1247)
!1256 = !DILocation(line: 127, column: 9, scope: !1247)
!1257 = !DILocation(line: 129, column: 14, scope: !1243)
!1258 = !DILocation(line: 129, column: 7, scope: !1243)
!1259 = !DILocation(line: 134, column: 42, scope: !1260)
!1260 = distinct !DILexicalBlock(scope: !1229, file: !37, line: 134, column: 7)
!1261 = !DILocation(line: 134, column: 28, scope: !1260)
!1262 = !DILocation(line: 134, column: 50, scope: !1260)
!1263 = !DILocation(line: 134, column: 7, scope: !1229)
!1264 = !DILocation(line: 135, column: 12, scope: !1260)
!1265 = !DILocation(line: 135, column: 5, scope: !1260)
!1266 = !DILocation(line: 136, column: 1, scope: !1229)
!1267 = distinct !DISubprogram(name: "set_program_name", scope: !51, file: !51, line: 39, type: !213, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !48, retainedNodes: !4)
!1268 = !DILocalVariable(name: "argv0", arg: 1, scope: !1267, file: !51, line: 39, type: !16)
!1269 = !DILocation(line: 39, column: 31, scope: !1267)
!1270 = !DILocalVariable(name: "slash", scope: !1267, file: !51, line: 46, type: !16)
!1271 = !DILocation(line: 46, column: 15, scope: !1267)
!1272 = !DILocalVariable(name: "base", scope: !1267, file: !51, line: 47, type: !16)
!1273 = !DILocation(line: 47, column: 15, scope: !1267)
!1274 = !DILocation(line: 51, column: 7, scope: !1275)
!1275 = distinct !DILexicalBlock(scope: !1267, file: !51, line: 51, column: 7)
!1276 = !DILocation(line: 51, column: 13, scope: !1275)
!1277 = !DILocation(line: 51, column: 7, scope: !1267)
!1278 = !DILocation(line: 55, column: 14, scope: !1279)
!1279 = distinct !DILexicalBlock(scope: !1275, file: !51, line: 52, column: 5)
!1280 = !DILocation(line: 54, column: 7, scope: !1279)
!1281 = !DILocation(line: 56, column: 7, scope: !1279)
!1282 = !DILocation(line: 59, column: 20, scope: !1267)
!1283 = !DILocation(line: 59, column: 11, scope: !1267)
!1284 = !DILocation(line: 59, column: 9, scope: !1267)
!1285 = !DILocation(line: 60, column: 11, scope: !1267)
!1286 = !DILocation(line: 60, column: 17, scope: !1267)
!1287 = !DILocation(line: 60, column: 27, scope: !1267)
!1288 = !DILocation(line: 60, column: 33, scope: !1267)
!1289 = !DILocation(line: 60, column: 39, scope: !1267)
!1290 = !DILocation(line: 60, column: 8, scope: !1267)
!1291 = !DILocation(line: 61, column: 7, scope: !1292)
!1292 = distinct !DILexicalBlock(scope: !1267, file: !51, line: 61, column: 7)
!1293 = !DILocation(line: 61, column: 14, scope: !1292)
!1294 = !DILocation(line: 61, column: 12, scope: !1292)
!1295 = !DILocation(line: 61, column: 20, scope: !1292)
!1296 = !DILocation(line: 61, column: 25, scope: !1292)
!1297 = !DILocation(line: 61, column: 37, scope: !1292)
!1298 = !DILocation(line: 61, column: 42, scope: !1292)
!1299 = !DILocation(line: 61, column: 28, scope: !1292)
!1300 = !DILocation(line: 61, column: 61, scope: !1292)
!1301 = !DILocation(line: 61, column: 7, scope: !1267)
!1302 = !DILocation(line: 63, column: 15, scope: !1303)
!1303 = distinct !DILexicalBlock(scope: !1292, file: !51, line: 62, column: 5)
!1304 = !DILocation(line: 63, column: 13, scope: !1303)
!1305 = !DILocation(line: 64, column: 20, scope: !1306)
!1306 = distinct !DILexicalBlock(scope: !1303, file: !51, line: 64, column: 11)
!1307 = !DILocation(line: 64, column: 11, scope: !1306)
!1308 = !DILocation(line: 64, column: 36, scope: !1306)
!1309 = !DILocation(line: 64, column: 11, scope: !1303)
!1310 = !DILocation(line: 66, column: 19, scope: !1311)
!1311 = distinct !DILexicalBlock(scope: !1306, file: !51, line: 65, column: 9)
!1312 = !DILocation(line: 66, column: 24, scope: !1311)
!1313 = !DILocation(line: 66, column: 17, scope: !1311)
!1314 = !DILocation(line: 70, column: 52, scope: !1311)
!1315 = !DILocation(line: 70, column: 41, scope: !1311)
!1316 = !DILocation(line: 72, column: 9, scope: !1311)
!1317 = !DILocation(line: 73, column: 5, scope: !1303)
!1318 = !DILocation(line: 84, column: 18, scope: !1267)
!1319 = !DILocation(line: 84, column: 16, scope: !1267)
!1320 = !DILocation(line: 90, column: 38, scope: !1267)
!1321 = !DILocation(line: 90, column: 27, scope: !1267)
!1322 = !DILocation(line: 92, column: 1, scope: !1267)
!1323 = !DILocalVariable(name: "argv0", arg: 1, scope: !1324, file: !51, line: 39, type: !16)
!1324 = distinct !DISubprogram(name: "set_program_name", scope: !51, file: !51, line: 39, type: !213, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1325, retainedNodes: !4)
!1325 = distinct !DICompileUnit(language: DW_LANG_C99, file: !49, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !1326, nameTableKind: None)
!1326 = !{!1327}
!1327 = !DIGlobalVariableExpression(var: !1328, expr: !DIExpression())
!1328 = distinct !DIGlobalVariable(name: "program_name", scope: !1325, file: !51, line: 33, type: !16, isLocal: false, isDefinition: true)
!1329 = !DILocalVariable(name: "slash", scope: !1324, file: !51, line: 46, type: !16)
!1330 = !DILocalVariable(name: "base", scope: !1324, file: !51, line: 47, type: !16)
!1331 = distinct !DISubprogram(name: "set_char_quoting", scope: !80, file: !80, line: 152, type: !1332, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !4)
!1332 = !DISubroutineType(types: !1333)
!1333 = !{!19, !1334, !8, !19}
!1334 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !93, size: 64)
!1335 = !DILocalVariable(name: "o", arg: 1, scope: !1331, file: !80, line: 152, type: !1334)
!1336 = !DILocation(line: 152, column: 43, scope: !1331)
!1337 = !DILocalVariable(name: "c", arg: 2, scope: !1331, file: !80, line: 152, type: !8)
!1338 = !DILocation(line: 152, column: 51, scope: !1331)
!1339 = !DILocalVariable(name: "i", arg: 3, scope: !1331, file: !80, line: 152, type: !19)
!1340 = !DILocation(line: 152, column: 58, scope: !1331)
!1341 = !DILocalVariable(name: "uc", scope: !1331, file: !80, line: 154, type: !148)
!1342 = !DILocation(line: 154, column: 17, scope: !1331)
!1343 = !DILocation(line: 154, column: 22, scope: !1331)
!1344 = !DILocalVariable(name: "p", scope: !1331, file: !80, line: 155, type: !1345)
!1345 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !59, size: 64)
!1346 = !DILocation(line: 155, column: 17, scope: !1331)
!1347 = !DILocation(line: 156, column: 6, scope: !1331)
!1348 = !DILocation(line: 156, column: 10, scope: !1331)
!1349 = !DILocation(line: 156, column: 41, scope: !1331)
!1350 = !DILocation(line: 156, column: 5, scope: !1331)
!1351 = !DILocation(line: 156, column: 59, scope: !1331)
!1352 = !DILocation(line: 156, column: 62, scope: !1331)
!1353 = !DILocation(line: 156, column: 57, scope: !1331)
!1354 = !DILocalVariable(name: "shift", scope: !1331, file: !80, line: 157, type: !19)
!1355 = !DILocation(line: 157, column: 7, scope: !1331)
!1356 = !DILocation(line: 157, column: 15, scope: !1331)
!1357 = !DILocation(line: 157, column: 18, scope: !1331)
!1358 = !DILocalVariable(name: "r", scope: !1331, file: !80, line: 158, type: !19)
!1359 = !DILocation(line: 158, column: 7, scope: !1331)
!1360 = !DILocation(line: 158, column: 13, scope: !1331)
!1361 = !DILocation(line: 158, column: 12, scope: !1331)
!1362 = !DILocation(line: 158, column: 18, scope: !1331)
!1363 = !DILocation(line: 158, column: 15, scope: !1331)
!1364 = !DILocation(line: 158, column: 25, scope: !1331)
!1365 = !DILocation(line: 159, column: 11, scope: !1331)
!1366 = !DILocation(line: 159, column: 13, scope: !1331)
!1367 = !DILocation(line: 159, column: 20, scope: !1331)
!1368 = !DILocation(line: 159, column: 18, scope: !1331)
!1369 = !DILocation(line: 159, column: 26, scope: !1331)
!1370 = !DILocation(line: 159, column: 23, scope: !1331)
!1371 = !DILocation(line: 159, column: 4, scope: !1331)
!1372 = !DILocation(line: 159, column: 6, scope: !1331)
!1373 = !DILocation(line: 160, column: 10, scope: !1331)
!1374 = !DILocation(line: 160, column: 3, scope: !1331)
!1375 = !DILocalVariable(name: "o", arg: 1, scope: !1376, file: !80, line: 152, type: !1379)
!1376 = distinct !DISubprogram(name: "set_char_quoting", scope: !80, file: !80, line: 152, type: !1377, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1387, retainedNodes: !4)
!1377 = !DISubroutineType(types: !1378)
!1378 = !{!19, !1379, !8, !19}
!1379 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1380, size: 64)
!1380 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !1381)
!1381 = !{!1382, !1383, !1384, !1385, !1386}
!1382 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1380, file: !80, line: 68, baseType: !57, size: 32)
!1383 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1380, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1380, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!1385 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1380, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1380, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!1387 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !1388, nameTableKind: None)
!1388 = !{!1389, !1391, !1393, !1395, !1397, !1399, !1406, !1408}
!1389 = !DIGlobalVariableExpression(var: !1390, expr: !DIExpression())
!1390 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1387, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!1391 = !DIGlobalVariableExpression(var: !1392, expr: !DIExpression())
!1392 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1387, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!1393 = !DIGlobalVariableExpression(var: !1394, expr: !DIExpression())
!1394 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1387, file: !80, line: 1052, type: !1380, isLocal: false, isDefinition: true)
!1395 = !DIGlobalVariableExpression(var: !1396, expr: !DIExpression())
!1396 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1387, file: !80, line: 116, type: !1380, isLocal: true, isDefinition: true)
!1397 = !DIGlobalVariableExpression(var: !1398, expr: !DIExpression())
!1398 = distinct !DIGlobalVariable(name: "slot0", scope: !1387, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!1399 = !DIGlobalVariableExpression(var: !1400, expr: !DIExpression())
!1400 = distinct !DIGlobalVariable(name: "slotvec", scope: !1387, file: !80, line: 845, type: !1401, isLocal: true, isDefinition: true)
!1401 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1402, size: 64)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !1403)
!1403 = !{!1404, !1405}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1402, file: !80, line: 836, baseType: !74, size: 64)
!1405 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1402, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!1406 = !DIGlobalVariableExpression(var: !1407, expr: !DIExpression())
!1407 = distinct !DIGlobalVariable(name: "nslots", scope: !1387, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!1408 = !DIGlobalVariableExpression(var: !1409, expr: !DIExpression())
!1409 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1387, file: !80, line: 844, type: !1402, isLocal: true, isDefinition: true)
!1410 = !DILocalVariable(name: "c", arg: 2, scope: !1376, file: !80, line: 152, type: !8)
!1411 = !DILocalVariable(name: "i", arg: 3, scope: !1376, file: !80, line: 152, type: !19)
!1412 = !DILocalVariable(name: "uc", scope: !1376, file: !80, line: 154, type: !148)
!1413 = !DILocalVariable(name: "p", scope: !1376, file: !80, line: 155, type: !1345)
!1414 = !DILocalVariable(name: "shift", scope: !1415, file: !80, line: 157, type: !19)
!1415 = distinct !DISubprogram(name: "set_char_quoting", scope: !80, file: !80, line: 152, type: !1416, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1426, retainedNodes: !4)
!1416 = !DISubroutineType(types: !1417)
!1417 = !{!19, !1418, !8, !19}
!1418 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1419, size: 64)
!1419 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !1420)
!1420 = !{!1421, !1422, !1423, !1424, !1425}
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1419, file: !80, line: 68, baseType: !57, size: 32)
!1422 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1419, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!1423 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1419, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1419, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!1425 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1419, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!1426 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !1427, nameTableKind: None)
!1427 = !{!1428, !1430, !1432, !1434, !1436, !1438, !1445, !1447}
!1428 = !DIGlobalVariableExpression(var: !1429, expr: !DIExpression())
!1429 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1426, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!1430 = !DIGlobalVariableExpression(var: !1431, expr: !DIExpression())
!1431 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1426, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!1432 = !DIGlobalVariableExpression(var: !1433, expr: !DIExpression())
!1433 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1426, file: !80, line: 1052, type: !1419, isLocal: false, isDefinition: true)
!1434 = !DIGlobalVariableExpression(var: !1435, expr: !DIExpression())
!1435 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1426, file: !80, line: 116, type: !1419, isLocal: true, isDefinition: true)
!1436 = !DIGlobalVariableExpression(var: !1437, expr: !DIExpression())
!1437 = distinct !DIGlobalVariable(name: "slot0", scope: !1426, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!1438 = !DIGlobalVariableExpression(var: !1439, expr: !DIExpression())
!1439 = distinct !DIGlobalVariable(name: "slotvec", scope: !1426, file: !80, line: 845, type: !1440, isLocal: true, isDefinition: true)
!1440 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1441, size: 64)
!1441 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !1442)
!1442 = !{!1443, !1444}
!1443 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1441, file: !80, line: 836, baseType: !74, size: 64)
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1441, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!1445 = !DIGlobalVariableExpression(var: !1446, expr: !DIExpression())
!1446 = distinct !DIGlobalVariable(name: "nslots", scope: !1426, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!1447 = !DIGlobalVariableExpression(var: !1448, expr: !DIExpression())
!1448 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1426, file: !80, line: 844, type: !1441, isLocal: true, isDefinition: true)
!1449 = !DILocalVariable(name: "r", scope: !1415, file: !80, line: 158, type: !19)
!1450 = distinct !DISubprogram(name: "quotearg_n_style", scope: !80, file: !80, line: 955, type: !1451, scopeLine: 956, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !4)
!1451 = !DISubroutineType(types: !1452)
!1452 = !{!7, !19, !57, !16}
!1453 = !DILocalVariable(name: "n", arg: 1, scope: !1450, file: !80, line: 955, type: !19)
!1454 = !DILocation(line: 955, column: 23, scope: !1450)
!1455 = !DILocalVariable(name: "s", arg: 2, scope: !1450, file: !80, line: 955, type: !57)
!1456 = !DILocation(line: 955, column: 45, scope: !1450)
!1457 = !DILocalVariable(name: "arg", arg: 3, scope: !1450, file: !80, line: 955, type: !16)
!1458 = !DILocation(line: 955, column: 60, scope: !1450)
!1459 = !DILocalVariable(name: "o", scope: !1450, file: !80, line: 957, type: !1460)
!1460 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !93)
!1461 = !DILocation(line: 957, column: 32, scope: !1450)
!1462 = !DILocation(line: 957, column: 64, scope: !1450)
!1463 = !DILocation(line: 957, column: 36, scope: !1450)
!1464 = !DILocation(line: 958, column: 30, scope: !1450)
!1465 = !DILocation(line: 958, column: 33, scope: !1450)
!1466 = !DILocation(line: 958, column: 10, scope: !1450)
!1467 = !DILocation(line: 958, column: 3, scope: !1450)
!1468 = !DILocalVariable(name: "n", arg: 1, scope: !1469, file: !80, line: 955, type: !19)
!1469 = distinct !DISubprogram(name: "quotearg_n_style", scope: !80, file: !80, line: 955, type: !1451, scopeLine: 956, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1470, retainedNodes: !4)
!1470 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !1471, nameTableKind: None)
!1471 = !{!1472, !1474, !1476, !1485, !1487, !1489, !1496, !1498}
!1472 = !DIGlobalVariableExpression(var: !1473, expr: !DIExpression())
!1473 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1470, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!1474 = !DIGlobalVariableExpression(var: !1475, expr: !DIExpression())
!1475 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1470, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!1476 = !DIGlobalVariableExpression(var: !1477, expr: !DIExpression())
!1477 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1470, file: !80, line: 1052, type: !1478, isLocal: false, isDefinition: true)
!1478 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !1479)
!1479 = !{!1480, !1481, !1482, !1483, !1484}
!1480 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1478, file: !80, line: 68, baseType: !57, size: 32)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1478, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!1482 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1478, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!1483 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1478, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1478, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!1485 = !DIGlobalVariableExpression(var: !1486, expr: !DIExpression())
!1486 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1470, file: !80, line: 116, type: !1478, isLocal: true, isDefinition: true)
!1487 = !DIGlobalVariableExpression(var: !1488, expr: !DIExpression())
!1488 = distinct !DIGlobalVariable(name: "slot0", scope: !1470, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!1489 = !DIGlobalVariableExpression(var: !1490, expr: !DIExpression())
!1490 = distinct !DIGlobalVariable(name: "slotvec", scope: !1470, file: !80, line: 845, type: !1491, isLocal: true, isDefinition: true)
!1491 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1492, size: 64)
!1492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !1493)
!1493 = !{!1494, !1495}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1492, file: !80, line: 836, baseType: !74, size: 64)
!1495 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1492, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!1496 = !DIGlobalVariableExpression(var: !1497, expr: !DIExpression())
!1497 = distinct !DIGlobalVariable(name: "nslots", scope: !1470, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!1498 = !DIGlobalVariableExpression(var: !1499, expr: !DIExpression())
!1499 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1470, file: !80, line: 844, type: !1492, isLocal: true, isDefinition: true)
!1500 = !DILocalVariable(name: "s", arg: 2, scope: !1469, file: !80, line: 955, type: !57)
!1501 = !DILocalVariable(name: "arg", arg: 3, scope: !1469, file: !80, line: 955, type: !16)
!1502 = !DILocalVariable(name: "o", scope: !1469, file: !80, line: 957, type: !1503)
!1503 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1478)
!1504 = distinct !DISubprogram(name: "quoting_options_from_style", scope: !80, file: !80, line: 193, type: !1505, scopeLine: 194, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !4)
!1505 = !DISubroutineType(types: !1506)
!1506 = !{!93, !57}
!1507 = !DILocalVariable(name: "style", arg: 1, scope: !1504, file: !80, line: 193, type: !57)
!1508 = !DILocation(line: 193, column: 48, scope: !1504)
!1509 = !DILocalVariable(name: "o", scope: !1504, file: !80, line: 195, type: !93)
!1510 = !DILocation(line: 195, column: 26, scope: !1504)
!1511 = !DILocation(line: 196, column: 7, scope: !1512)
!1512 = distinct !DILexicalBlock(scope: !1504, file: !80, line: 196, column: 7)
!1513 = !DILocation(line: 196, column: 13, scope: !1512)
!1514 = !DILocation(line: 196, column: 7, scope: !1504)
!1515 = !DILocation(line: 197, column: 5, scope: !1512)
!1516 = !DILocation(line: 198, column: 13, scope: !1504)
!1517 = !DILocation(line: 198, column: 5, scope: !1504)
!1518 = !DILocation(line: 198, column: 11, scope: !1504)
!1519 = !DILocation(line: 199, column: 3, scope: !1504)
!1520 = !DILocalVariable(name: "style", arg: 1, scope: !1521, file: !80, line: 193, type: !57)
!1521 = distinct !DISubprogram(name: "quoting_options_from_style", scope: !80, file: !80, line: 193, type: !1522, scopeLine: 194, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1531, retainedNodes: !4)
!1522 = !DISubroutineType(types: !1523)
!1523 = !{!1524, !57}
!1524 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !1525)
!1525 = !{!1526, !1527, !1528, !1529, !1530}
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1524, file: !80, line: 68, baseType: !57, size: 32)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1524, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1524, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1524, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1524, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!1531 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !1532, nameTableKind: None)
!1532 = !{!1533, !1535, !1537, !1539, !1541, !1543, !1550, !1552}
!1533 = !DIGlobalVariableExpression(var: !1534, expr: !DIExpression())
!1534 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1531, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!1535 = !DIGlobalVariableExpression(var: !1536, expr: !DIExpression())
!1536 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1531, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!1537 = !DIGlobalVariableExpression(var: !1538, expr: !DIExpression())
!1538 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1531, file: !80, line: 1052, type: !1524, isLocal: false, isDefinition: true)
!1539 = !DIGlobalVariableExpression(var: !1540, expr: !DIExpression())
!1540 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1531, file: !80, line: 116, type: !1524, isLocal: true, isDefinition: true)
!1541 = !DIGlobalVariableExpression(var: !1542, expr: !DIExpression())
!1542 = distinct !DIGlobalVariable(name: "slot0", scope: !1531, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!1543 = !DIGlobalVariableExpression(var: !1544, expr: !DIExpression())
!1544 = distinct !DIGlobalVariable(name: "slotvec", scope: !1531, file: !80, line: 845, type: !1545, isLocal: true, isDefinition: true)
!1545 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1546, size: 64)
!1546 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !1547)
!1547 = !{!1548, !1549}
!1548 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1546, file: !80, line: 836, baseType: !74, size: 64)
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1546, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!1550 = !DIGlobalVariableExpression(var: !1551, expr: !DIExpression())
!1551 = distinct !DIGlobalVariable(name: "nslots", scope: !1531, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!1552 = !DIGlobalVariableExpression(var: !1553, expr: !DIExpression())
!1553 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1531, file: !80, line: 844, type: !1546, isLocal: true, isDefinition: true)
!1554 = !DILocalVariable(name: "o", scope: !1521, file: !80, line: 195, type: !1524)
!1555 = distinct !DISubprogram(name: "quotearg_n_options", scope: !80, file: !80, line: 877, type: !1556, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !4)
!1556 = !DISubroutineType(types: !1557)
!1557 = !{!7, !19, !16, !74, !1558}
!1558 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1460, size: 64)
!1559 = !DILocalVariable(name: "n", arg: 1, scope: !1555, file: !80, line: 877, type: !19)
!1560 = !DILocation(line: 877, column: 25, scope: !1555)
!1561 = !DILocalVariable(name: "arg", arg: 2, scope: !1555, file: !80, line: 877, type: !16)
!1562 = !DILocation(line: 877, column: 40, scope: !1555)
!1563 = !DILocalVariable(name: "argsize", arg: 3, scope: !1555, file: !80, line: 877, type: !74)
!1564 = !DILocation(line: 877, column: 52, scope: !1555)
!1565 = !DILocalVariable(name: "options", arg: 4, scope: !1555, file: !80, line: 878, type: !1558)
!1566 = !DILocation(line: 878, column: 51, scope: !1555)
!1567 = !DILocalVariable(name: "e", scope: !1555, file: !80, line: 880, type: !19)
!1568 = !DILocation(line: 880, column: 7, scope: !1555)
!1569 = !DILocation(line: 880, column: 11, scope: !1555)
!1570 = !DILocalVariable(name: "sv", scope: !1555, file: !80, line: 882, type: !110)
!1571 = !DILocation(line: 882, column: 19, scope: !1555)
!1572 = !DILocation(line: 882, column: 24, scope: !1555)
!1573 = !DILocation(line: 884, column: 7, scope: !1574)
!1574 = distinct !DILexicalBlock(scope: !1555, file: !80, line: 884, column: 7)
!1575 = !DILocation(line: 884, column: 9, scope: !1574)
!1576 = !DILocation(line: 884, column: 7, scope: !1555)
!1577 = !DILocation(line: 885, column: 5, scope: !1574)
!1578 = !DILocation(line: 887, column: 7, scope: !1579)
!1579 = distinct !DILexicalBlock(scope: !1555, file: !80, line: 887, column: 7)
!1580 = !DILocation(line: 887, column: 17, scope: !1579)
!1581 = !DILocation(line: 887, column: 14, scope: !1579)
!1582 = !DILocation(line: 887, column: 7, scope: !1555)
!1583 = !DILocalVariable(name: "preallocated", scope: !1584, file: !80, line: 889, type: !38)
!1584 = distinct !DILexicalBlock(scope: !1579, file: !80, line: 888, column: 5)
!1585 = !DILocation(line: 889, column: 12, scope: !1584)
!1586 = !DILocation(line: 889, column: 28, scope: !1584)
!1587 = !DILocation(line: 889, column: 31, scope: !1584)
!1588 = !DILocalVariable(name: "nmax", scope: !1584, file: !80, line: 890, type: !19)
!1589 = !DILocation(line: 890, column: 11, scope: !1584)
!1590 = !DILocation(line: 892, column: 11, scope: !1591)
!1591 = distinct !DILexicalBlock(scope: !1584, file: !80, line: 892, column: 11)
!1592 = !DILocation(line: 892, column: 18, scope: !1591)
!1593 = !DILocation(line: 892, column: 16, scope: !1591)
!1594 = !DILocation(line: 892, column: 11, scope: !1584)
!1595 = !DILocation(line: 893, column: 9, scope: !1591)
!1596 = !DILocation(line: 895, column: 32, scope: !1584)
!1597 = !DILocation(line: 895, column: 54, scope: !1584)
!1598 = !DILocation(line: 895, column: 59, scope: !1584)
!1599 = !DILocation(line: 895, column: 61, scope: !1584)
!1600 = !DILocation(line: 895, column: 58, scope: !1584)
!1601 = !DILocation(line: 895, column: 66, scope: !1584)
!1602 = !DILocation(line: 895, column: 22, scope: !1584)
!1603 = !DILocation(line: 895, column: 20, scope: !1584)
!1604 = !DILocation(line: 895, column: 15, scope: !1584)
!1605 = !DILocation(line: 896, column: 11, scope: !1606)
!1606 = distinct !DILexicalBlock(scope: !1584, file: !80, line: 896, column: 11)
!1607 = !DILocation(line: 896, column: 11, scope: !1584)
!1608 = !DILocation(line: 897, column: 10, scope: !1606)
!1609 = !DILocation(line: 897, column: 15, scope: !1606)
!1610 = !DILocation(line: 897, column: 9, scope: !1606)
!1611 = !DILocation(line: 898, column: 15, scope: !1584)
!1612 = !DILocation(line: 898, column: 20, scope: !1584)
!1613 = !DILocation(line: 898, column: 18, scope: !1584)
!1614 = !DILocation(line: 898, column: 7, scope: !1584)
!1615 = !DILocation(line: 898, column: 32, scope: !1584)
!1616 = !DILocation(line: 898, column: 34, scope: !1584)
!1617 = !DILocation(line: 898, column: 40, scope: !1584)
!1618 = !DILocation(line: 898, column: 38, scope: !1584)
!1619 = !DILocation(line: 898, column: 31, scope: !1584)
!1620 = !DILocation(line: 898, column: 48, scope: !1584)
!1621 = !DILocation(line: 899, column: 16, scope: !1584)
!1622 = !DILocation(line: 899, column: 18, scope: !1584)
!1623 = !DILocation(line: 899, column: 14, scope: !1584)
!1624 = !DILocation(line: 900, column: 5, scope: !1584)
!1625 = !DILocalVariable(name: "size", scope: !1626, file: !80, line: 903, type: !74)
!1626 = distinct !DILexicalBlock(scope: !1555, file: !80, line: 902, column: 3)
!1627 = !DILocation(line: 903, column: 12, scope: !1626)
!1628 = !DILocation(line: 903, column: 19, scope: !1626)
!1629 = !DILocation(line: 903, column: 22, scope: !1626)
!1630 = !DILocation(line: 903, column: 25, scope: !1626)
!1631 = !DILocalVariable(name: "val", scope: !1626, file: !80, line: 904, type: !7)
!1632 = !DILocation(line: 904, column: 11, scope: !1626)
!1633 = !DILocation(line: 904, column: 17, scope: !1626)
!1634 = !DILocation(line: 904, column: 20, scope: !1626)
!1635 = !DILocation(line: 904, column: 23, scope: !1626)
!1636 = !DILocalVariable(name: "flags", scope: !1626, file: !80, line: 906, type: !19)
!1637 = !DILocation(line: 906, column: 9, scope: !1626)
!1638 = !DILocation(line: 906, column: 17, scope: !1626)
!1639 = !DILocation(line: 906, column: 26, scope: !1626)
!1640 = !DILocation(line: 906, column: 32, scope: !1626)
!1641 = !DILocalVariable(name: "qsize", scope: !1626, file: !80, line: 907, type: !74)
!1642 = !DILocation(line: 907, column: 12, scope: !1626)
!1643 = !DILocation(line: 907, column: 46, scope: !1626)
!1644 = !DILocation(line: 907, column: 51, scope: !1626)
!1645 = !DILocation(line: 907, column: 57, scope: !1626)
!1646 = !DILocation(line: 907, column: 62, scope: !1626)
!1647 = !DILocation(line: 908, column: 46, scope: !1626)
!1648 = !DILocation(line: 908, column: 55, scope: !1626)
!1649 = !DILocation(line: 908, column: 62, scope: !1626)
!1650 = !DILocation(line: 909, column: 46, scope: !1626)
!1651 = !DILocation(line: 909, column: 55, scope: !1626)
!1652 = !DILocation(line: 910, column: 46, scope: !1626)
!1653 = !DILocation(line: 910, column: 55, scope: !1626)
!1654 = !DILocation(line: 911, column: 46, scope: !1626)
!1655 = !DILocation(line: 911, column: 55, scope: !1626)
!1656 = !DILocation(line: 907, column: 20, scope: !1626)
!1657 = !DILocation(line: 913, column: 9, scope: !1658)
!1658 = distinct !DILexicalBlock(scope: !1626, file: !80, line: 913, column: 9)
!1659 = !DILocation(line: 913, column: 17, scope: !1658)
!1660 = !DILocation(line: 913, column: 14, scope: !1658)
!1661 = !DILocation(line: 913, column: 9, scope: !1626)
!1662 = !DILocation(line: 915, column: 29, scope: !1663)
!1663 = distinct !DILexicalBlock(scope: !1658, file: !80, line: 914, column: 7)
!1664 = !DILocation(line: 915, column: 35, scope: !1663)
!1665 = !DILocation(line: 915, column: 27, scope: !1663)
!1666 = !DILocation(line: 915, column: 9, scope: !1663)
!1667 = !DILocation(line: 915, column: 12, scope: !1663)
!1668 = !DILocation(line: 915, column: 15, scope: !1663)
!1669 = !DILocation(line: 915, column: 20, scope: !1663)
!1670 = !DILocation(line: 916, column: 13, scope: !1671)
!1671 = distinct !DILexicalBlock(scope: !1663, file: !80, line: 916, column: 13)
!1672 = !DILocation(line: 916, column: 17, scope: !1671)
!1673 = !DILocation(line: 916, column: 13, scope: !1663)
!1674 = !DILocation(line: 917, column: 17, scope: !1671)
!1675 = !DILocation(line: 917, column: 11, scope: !1671)
!1676 = !DILocation(line: 918, column: 39, scope: !1663)
!1677 = !DILocation(line: 918, column: 27, scope: !1663)
!1678 = !DILocation(line: 918, column: 25, scope: !1663)
!1679 = !DILocation(line: 918, column: 9, scope: !1663)
!1680 = !DILocation(line: 918, column: 12, scope: !1663)
!1681 = !DILocation(line: 918, column: 15, scope: !1663)
!1682 = !DILocation(line: 918, column: 19, scope: !1663)
!1683 = !DILocation(line: 919, column: 35, scope: !1663)
!1684 = !DILocation(line: 919, column: 40, scope: !1663)
!1685 = !DILocation(line: 919, column: 46, scope: !1663)
!1686 = !DILocation(line: 919, column: 51, scope: !1663)
!1687 = !DILocation(line: 919, column: 60, scope: !1663)
!1688 = !DILocation(line: 919, column: 69, scope: !1663)
!1689 = !DILocation(line: 920, column: 35, scope: !1663)
!1690 = !DILocation(line: 920, column: 42, scope: !1663)
!1691 = !DILocation(line: 920, column: 51, scope: !1663)
!1692 = !DILocation(line: 921, column: 35, scope: !1663)
!1693 = !DILocation(line: 921, column: 44, scope: !1663)
!1694 = !DILocation(line: 922, column: 35, scope: !1663)
!1695 = !DILocation(line: 922, column: 44, scope: !1663)
!1696 = !DILocation(line: 919, column: 9, scope: !1663)
!1697 = !DILocation(line: 923, column: 7, scope: !1663)
!1698 = !DILocation(line: 925, column: 13, scope: !1626)
!1699 = !DILocation(line: 925, column: 5, scope: !1626)
!1700 = !DILocation(line: 925, column: 11, scope: !1626)
!1701 = !DILocation(line: 926, column: 12, scope: !1626)
!1702 = !DILocation(line: 926, column: 5, scope: !1626)
!1703 = !DILocalVariable(name: "n", arg: 1, scope: !1704, file: !80, line: 877, type: !19)
!1704 = distinct !DISubprogram(name: "quotearg_n_options", scope: !80, file: !80, line: 877, type: !1705, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1716, retainedNodes: !4)
!1705 = !DISubroutineType(types: !1706)
!1706 = !{!7, !19, !16, !74, !1707}
!1707 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1708, size: 64)
!1708 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1709)
!1709 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !1710)
!1710 = !{!1711, !1712, !1713, !1714, !1715}
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1709, file: !80, line: 68, baseType: !57, size: 32)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1709, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1709, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1709, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1709, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!1716 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !1717, nameTableKind: None)
!1717 = !{!1718, !1720, !1722, !1724, !1726, !1728, !1735, !1737}
!1718 = !DIGlobalVariableExpression(var: !1719, expr: !DIExpression())
!1719 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1716, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!1720 = !DIGlobalVariableExpression(var: !1721, expr: !DIExpression())
!1721 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1716, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!1722 = !DIGlobalVariableExpression(var: !1723, expr: !DIExpression())
!1723 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1716, file: !80, line: 1052, type: !1709, isLocal: false, isDefinition: true)
!1724 = !DIGlobalVariableExpression(var: !1725, expr: !DIExpression())
!1725 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1716, file: !80, line: 116, type: !1709, isLocal: true, isDefinition: true)
!1726 = !DIGlobalVariableExpression(var: !1727, expr: !DIExpression())
!1727 = distinct !DIGlobalVariable(name: "slot0", scope: !1716, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!1728 = !DIGlobalVariableExpression(var: !1729, expr: !DIExpression())
!1729 = distinct !DIGlobalVariable(name: "slotvec", scope: !1716, file: !80, line: 845, type: !1730, isLocal: true, isDefinition: true)
!1730 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1731, size: 64)
!1731 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !1732)
!1732 = !{!1733, !1734}
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1731, file: !80, line: 836, baseType: !74, size: 64)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1731, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!1735 = !DIGlobalVariableExpression(var: !1736, expr: !DIExpression())
!1736 = distinct !DIGlobalVariable(name: "nslots", scope: !1716, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!1737 = !DIGlobalVariableExpression(var: !1738, expr: !DIExpression())
!1738 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1716, file: !80, line: 844, type: !1731, isLocal: true, isDefinition: true)
!1739 = !DILocalVariable(name: "arg", arg: 2, scope: !1704, file: !80, line: 877, type: !16)
!1740 = !DILocalVariable(name: "argsize", arg: 3, scope: !1704, file: !80, line: 877, type: !74)
!1741 = !DILocalVariable(name: "options", arg: 4, scope: !1704, file: !80, line: 878, type: !1707)
!1742 = !DILocalVariable(name: "e", scope: !1704, file: !80, line: 880, type: !19)
!1743 = !DILocalVariable(name: "sv", scope: !1704, file: !80, line: 882, type: !1730)
!1744 = !DILocalVariable(name: "nmax", scope: !1745, file: !80, line: 890, type: !19)
!1745 = distinct !DILexicalBlock(scope: !1746, file: !80, line: 888, column: 5)
!1746 = distinct !DILexicalBlock(scope: !1747, file: !80, line: 887, column: 7)
!1747 = distinct !DISubprogram(name: "quotearg_n_options", scope: !80, file: !80, line: 877, type: !1748, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1759, retainedNodes: !4)
!1748 = !DISubroutineType(types: !1749)
!1749 = !{!7, !19, !16, !74, !1750}
!1750 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1751, size: 64)
!1751 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1752)
!1752 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !1753)
!1753 = !{!1754, !1755, !1756, !1757, !1758}
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1752, file: !80, line: 68, baseType: !57, size: 32)
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1752, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!1756 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1752, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1752, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1752, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!1759 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !1760, nameTableKind: None)
!1760 = !{!1761, !1763, !1765, !1767, !1769, !1771, !1778, !1780}
!1761 = !DIGlobalVariableExpression(var: !1762, expr: !DIExpression())
!1762 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1759, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!1763 = !DIGlobalVariableExpression(var: !1764, expr: !DIExpression())
!1764 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1759, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!1765 = !DIGlobalVariableExpression(var: !1766, expr: !DIExpression())
!1766 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1759, file: !80, line: 1052, type: !1752, isLocal: false, isDefinition: true)
!1767 = !DIGlobalVariableExpression(var: !1768, expr: !DIExpression())
!1768 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1759, file: !80, line: 116, type: !1752, isLocal: true, isDefinition: true)
!1769 = !DIGlobalVariableExpression(var: !1770, expr: !DIExpression())
!1770 = distinct !DIGlobalVariable(name: "slot0", scope: !1759, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!1771 = !DIGlobalVariableExpression(var: !1772, expr: !DIExpression())
!1772 = distinct !DIGlobalVariable(name: "slotvec", scope: !1759, file: !80, line: 845, type: !1773, isLocal: true, isDefinition: true)
!1773 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1774, size: 64)
!1774 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !1775)
!1775 = !{!1776, !1777}
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1774, file: !80, line: 836, baseType: !74, size: 64)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1774, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!1778 = !DIGlobalVariableExpression(var: !1779, expr: !DIExpression())
!1779 = distinct !DIGlobalVariable(name: "nslots", scope: !1759, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!1780 = !DIGlobalVariableExpression(var: !1781, expr: !DIExpression())
!1781 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1759, file: !80, line: 844, type: !1774, isLocal: true, isDefinition: true)
!1782 = !DILocalVariable(name: "val", scope: !1783, file: !80, line: 904, type: !7)
!1783 = distinct !DILexicalBlock(scope: !1784, file: !80, line: 902, column: 3)
!1784 = distinct !DISubprogram(name: "quotearg_n_options", scope: !80, file: !80, line: 877, type: !1785, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1796, retainedNodes: !4)
!1785 = !DISubroutineType(types: !1786)
!1786 = !{!7, !19, !16, !74, !1787}
!1787 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1788, size: 64)
!1788 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1789)
!1789 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !1790)
!1790 = !{!1791, !1792, !1793, !1794, !1795}
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1789, file: !80, line: 68, baseType: !57, size: 32)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1789, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1789, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1789, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1789, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!1796 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !1797, nameTableKind: None)
!1797 = !{!1798, !1800, !1802, !1804, !1806, !1808, !1815, !1817}
!1798 = !DIGlobalVariableExpression(var: !1799, expr: !DIExpression())
!1799 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1796, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!1800 = !DIGlobalVariableExpression(var: !1801, expr: !DIExpression())
!1801 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1796, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!1802 = !DIGlobalVariableExpression(var: !1803, expr: !DIExpression())
!1803 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1796, file: !80, line: 1052, type: !1789, isLocal: false, isDefinition: true)
!1804 = !DIGlobalVariableExpression(var: !1805, expr: !DIExpression())
!1805 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1796, file: !80, line: 116, type: !1789, isLocal: true, isDefinition: true)
!1806 = !DIGlobalVariableExpression(var: !1807, expr: !DIExpression())
!1807 = distinct !DIGlobalVariable(name: "slot0", scope: !1796, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!1808 = !DIGlobalVariableExpression(var: !1809, expr: !DIExpression())
!1809 = distinct !DIGlobalVariable(name: "slotvec", scope: !1796, file: !80, line: 845, type: !1810, isLocal: true, isDefinition: true)
!1810 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1811, size: 64)
!1811 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !1812)
!1812 = !{!1813, !1814}
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1811, file: !80, line: 836, baseType: !74, size: 64)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1811, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!1815 = !DIGlobalVariableExpression(var: !1816, expr: !DIExpression())
!1816 = distinct !DIGlobalVariable(name: "nslots", scope: !1796, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!1817 = !DIGlobalVariableExpression(var: !1818, expr: !DIExpression())
!1818 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1796, file: !80, line: 844, type: !1811, isLocal: true, isDefinition: true)
!1819 = !DILocalVariable(name: "flags", scope: !1783, file: !80, line: 906, type: !19)
!1820 = !DILocalVariable(name: "qsize", scope: !1783, file: !80, line: 907, type: !74)
!1821 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !80, file: !80, line: 256, type: !1822, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !4)
!1822 = !DISubroutineType(types: !1823)
!1823 = !{!74, !7, !74, !16, !74, !57, !19, !1824, !16, !16}
!1824 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1825, size: 64)
!1825 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !59)
!1826 = !DILocalVariable(name: "buffer", arg: 1, scope: !1821, file: !80, line: 256, type: !7)
!1827 = !DILocation(line: 256, column: 33, scope: !1821)
!1828 = !DILocalVariable(name: "buffersize", arg: 2, scope: !1821, file: !80, line: 256, type: !74)
!1829 = !DILocation(line: 256, column: 48, scope: !1821)
!1830 = !DILocalVariable(name: "arg", arg: 3, scope: !1821, file: !80, line: 257, type: !16)
!1831 = !DILocation(line: 257, column: 39, scope: !1821)
!1832 = !DILocalVariable(name: "argsize", arg: 4, scope: !1821, file: !80, line: 257, type: !74)
!1833 = !DILocation(line: 257, column: 51, scope: !1821)
!1834 = !DILocalVariable(name: "quoting_style", arg: 5, scope: !1821, file: !80, line: 258, type: !57)
!1835 = !DILocation(line: 258, column: 46, scope: !1821)
!1836 = !DILocalVariable(name: "flags", arg: 6, scope: !1821, file: !80, line: 258, type: !19)
!1837 = !DILocation(line: 258, column: 65, scope: !1821)
!1838 = !DILocalVariable(name: "quote_these_too", arg: 7, scope: !1821, file: !80, line: 259, type: !1824)
!1839 = !DILocation(line: 259, column: 47, scope: !1821)
!1840 = !DILocalVariable(name: "left_quote", arg: 8, scope: !1821, file: !80, line: 260, type: !16)
!1841 = !DILocation(line: 260, column: 39, scope: !1821)
!1842 = !DILocalVariable(name: "right_quote", arg: 9, scope: !1821, file: !80, line: 261, type: !16)
!1843 = !DILocation(line: 261, column: 39, scope: !1821)
!1844 = !DILocalVariable(name: "i", scope: !1821, file: !80, line: 263, type: !74)
!1845 = !DILocation(line: 263, column: 10, scope: !1821)
!1846 = !DILocalVariable(name: "len", scope: !1821, file: !80, line: 264, type: !74)
!1847 = !DILocation(line: 264, column: 10, scope: !1821)
!1848 = !DILocalVariable(name: "orig_buffersize", scope: !1821, file: !80, line: 265, type: !74)
!1849 = !DILocation(line: 265, column: 10, scope: !1821)
!1850 = !DILocalVariable(name: "quote_string", scope: !1821, file: !80, line: 266, type: !16)
!1851 = !DILocation(line: 266, column: 15, scope: !1821)
!1852 = !DILocalVariable(name: "quote_string_len", scope: !1821, file: !80, line: 267, type: !74)
!1853 = !DILocation(line: 267, column: 10, scope: !1821)
!1854 = !DILocalVariable(name: "backslash_escapes", scope: !1821, file: !80, line: 268, type: !38)
!1855 = !DILocation(line: 268, column: 8, scope: !1821)
!1856 = !DILocalVariable(name: "unibyte_locale", scope: !1821, file: !80, line: 269, type: !38)
!1857 = !DILocation(line: 269, column: 8, scope: !1821)
!1858 = !DILocation(line: 269, column: 25, scope: !1821)
!1859 = !DILocation(line: 269, column: 36, scope: !1821)
!1860 = !DILocalVariable(name: "elide_outer_quotes", scope: !1821, file: !80, line: 270, type: !38)
!1861 = !DILocation(line: 270, column: 8, scope: !1821)
!1862 = !DILocation(line: 270, column: 30, scope: !1821)
!1863 = !DILocation(line: 270, column: 36, scope: !1821)
!1864 = !DILocation(line: 270, column: 61, scope: !1821)
!1865 = !DILocalVariable(name: "pending_shell_escape_end", scope: !1821, file: !80, line: 271, type: !38)
!1866 = !DILocation(line: 271, column: 8, scope: !1821)
!1867 = !DILocalVariable(name: "encountered_single_quote", scope: !1821, file: !80, line: 272, type: !38)
!1868 = !DILocation(line: 272, column: 8, scope: !1821)
!1869 = !DILocalVariable(name: "all_c_and_shell_quote_compat", scope: !1821, file: !80, line: 273, type: !38)
!1870 = !DILocation(line: 273, column: 8, scope: !1821)
!1871 = !DILocation(line: 273, column: 3, scope: !1821)
!1872 = !DILabel(scope: !1821, name: "process_input", file: !80, line: 314)
!1873 = !DILocation(line: 314, column: 2, scope: !1821)
!1874 = !DILocation(line: 316, column: 11, scope: !1821)
!1875 = !DILocation(line: 316, column: 3, scope: !1821)
!1876 = !DILocation(line: 319, column: 21, scope: !1877)
!1877 = distinct !DILexicalBlock(scope: !1821, file: !80, line: 317, column: 5)
!1878 = !DILocation(line: 320, column: 26, scope: !1877)
!1879 = !DILocation(line: 321, column: 7, scope: !1877)
!1880 = !DILocation(line: 323, column: 12, scope: !1881)
!1881 = distinct !DILexicalBlock(scope: !1877, file: !80, line: 323, column: 11)
!1882 = !DILocation(line: 323, column: 11, scope: !1877)
!1883 = !DILocation(line: 324, column: 9, scope: !1881)
!1884 = !DILocation(line: 324, column: 9, scope: !1885)
!1885 = distinct !DILexicalBlock(scope: !1886, file: !80, line: 324, column: 9)
!1886 = distinct !DILexicalBlock(scope: !1881, file: !80, line: 324, column: 9)
!1887 = !DILocation(line: 324, column: 9, scope: !1886)
!1888 = !DILocation(line: 325, column: 25, scope: !1877)
!1889 = !DILocation(line: 326, column: 20, scope: !1877)
!1890 = !DILocation(line: 327, column: 24, scope: !1877)
!1891 = !DILocation(line: 328, column: 7, scope: !1877)
!1892 = !DILocation(line: 331, column: 25, scope: !1877)
!1893 = !DILocation(line: 332, column: 26, scope: !1877)
!1894 = !DILocation(line: 333, column: 7, scope: !1877)
!1895 = !DILocation(line: 339, column: 13, scope: !1896)
!1896 = distinct !DILexicalBlock(scope: !1897, file: !80, line: 339, column: 13)
!1897 = distinct !DILexicalBlock(scope: !1877, file: !80, line: 338, column: 7)
!1898 = !DILocation(line: 339, column: 27, scope: !1896)
!1899 = !DILocation(line: 339, column: 13, scope: !1897)
!1900 = !DILocation(line: 362, column: 50, scope: !1901)
!1901 = distinct !DILexicalBlock(scope: !1896, file: !80, line: 340, column: 11)
!1902 = !DILocation(line: 362, column: 26, scope: !1901)
!1903 = !DILocation(line: 362, column: 24, scope: !1901)
!1904 = !DILocation(line: 363, column: 51, scope: !1901)
!1905 = !DILocation(line: 363, column: 27, scope: !1901)
!1906 = !DILocation(line: 363, column: 25, scope: !1901)
!1907 = !DILocation(line: 364, column: 11, scope: !1901)
!1908 = !DILocation(line: 365, column: 14, scope: !1909)
!1909 = distinct !DILexicalBlock(scope: !1897, file: !80, line: 365, column: 13)
!1910 = !DILocation(line: 365, column: 13, scope: !1897)
!1911 = !DILocation(line: 366, column: 31, scope: !1912)
!1912 = distinct !DILexicalBlock(scope: !1909, file: !80, line: 366, column: 11)
!1913 = !DILocation(line: 366, column: 29, scope: !1912)
!1914 = !DILocation(line: 366, column: 16, scope: !1912)
!1915 = !DILocation(line: 366, column: 44, scope: !1916)
!1916 = distinct !DILexicalBlock(scope: !1912, file: !80, line: 366, column: 11)
!1917 = !DILocation(line: 366, column: 43, scope: !1916)
!1918 = !DILocation(line: 366, column: 11, scope: !1912)
!1919 = !DILocation(line: 367, column: 13, scope: !1916)
!1920 = !DILocation(line: 367, column: 13, scope: !1921)
!1921 = distinct !DILexicalBlock(scope: !1922, file: !80, line: 367, column: 13)
!1922 = distinct !DILexicalBlock(scope: !1916, file: !80, line: 367, column: 13)
!1923 = !DILocation(line: 367, column: 13, scope: !1922)
!1924 = !DILocation(line: 366, column: 70, scope: !1916)
!1925 = !DILocation(line: 366, column: 11, scope: !1916)
!1926 = distinct !{!1926, !1918, !1927}
!1927 = !DILocation(line: 367, column: 13, scope: !1912)
!1928 = !DILocation(line: 368, column: 27, scope: !1897)
!1929 = !DILocation(line: 369, column: 24, scope: !1897)
!1930 = !DILocation(line: 369, column: 22, scope: !1897)
!1931 = !DILocation(line: 370, column: 36, scope: !1897)
!1932 = !DILocation(line: 370, column: 28, scope: !1897)
!1933 = !DILocation(line: 370, column: 26, scope: !1897)
!1934 = !DILocation(line: 372, column: 7, scope: !1877)
!1935 = !DILocation(line: 375, column: 25, scope: !1877)
!1936 = !DILocation(line: 376, column: 7, scope: !1877)
!1937 = !DILocation(line: 378, column: 26, scope: !1877)
!1938 = !DILocation(line: 379, column: 7, scope: !1877)
!1939 = !DILocation(line: 381, column: 12, scope: !1940)
!1940 = distinct !DILexicalBlock(scope: !1877, file: !80, line: 381, column: 11)
!1941 = !DILocation(line: 381, column: 11, scope: !1877)
!1942 = !DILocation(line: 382, column: 27, scope: !1940)
!1943 = !DILocation(line: 382, column: 9, scope: !1940)
!1944 = !DILocation(line: 383, column: 7, scope: !1877)
!1945 = !DILocation(line: 385, column: 21, scope: !1877)
!1946 = !DILocation(line: 386, column: 12, scope: !1947)
!1947 = distinct !DILexicalBlock(scope: !1877, file: !80, line: 386, column: 11)
!1948 = !DILocation(line: 386, column: 11, scope: !1877)
!1949 = !DILocation(line: 387, column: 9, scope: !1947)
!1950 = !DILocation(line: 387, column: 9, scope: !1951)
!1951 = distinct !DILexicalBlock(scope: !1952, file: !80, line: 387, column: 9)
!1952 = distinct !DILexicalBlock(scope: !1947, file: !80, line: 387, column: 9)
!1953 = !DILocation(line: 387, column: 9, scope: !1952)
!1954 = !DILocation(line: 388, column: 20, scope: !1877)
!1955 = !DILocation(line: 389, column: 24, scope: !1877)
!1956 = !DILocation(line: 390, column: 7, scope: !1877)
!1957 = !DILocation(line: 393, column: 26, scope: !1877)
!1958 = !DILocation(line: 394, column: 7, scope: !1877)
!1959 = !DILocation(line: 397, column: 7, scope: !1877)
!1960 = !DILocation(line: 400, column: 10, scope: !1961)
!1961 = distinct !DILexicalBlock(scope: !1821, file: !80, line: 400, column: 3)
!1962 = !DILocation(line: 400, column: 8, scope: !1961)
!1963 = !DILocation(line: 400, column: 19, scope: !1964)
!1964 = distinct !DILexicalBlock(scope: !1961, file: !80, line: 400, column: 3)
!1965 = !DILocation(line: 400, column: 27, scope: !1964)
!1966 = !DILocation(line: 400, column: 41, scope: !1964)
!1967 = !DILocation(line: 400, column: 45, scope: !1964)
!1968 = !DILocation(line: 400, column: 48, scope: !1964)
!1969 = !DILocation(line: 400, column: 58, scope: !1964)
!1970 = !DILocation(line: 400, column: 63, scope: !1964)
!1971 = !DILocation(line: 400, column: 60, scope: !1964)
!1972 = !DILocation(line: 400, column: 16, scope: !1964)
!1973 = !DILocation(line: 400, column: 3, scope: !1961)
!1974 = !DILocalVariable(name: "c", scope: !1975, file: !80, line: 402, type: !148)
!1975 = distinct !DILexicalBlock(scope: !1964, file: !80, line: 401, column: 5)
!1976 = !DILocation(line: 402, column: 21, scope: !1975)
!1977 = !DILocalVariable(name: "esc", scope: !1975, file: !80, line: 403, type: !148)
!1978 = !DILocation(line: 403, column: 21, scope: !1975)
!1979 = !DILocalVariable(name: "is_right_quote", scope: !1975, file: !80, line: 404, type: !38)
!1980 = !DILocation(line: 404, column: 12, scope: !1975)
!1981 = !DILocalVariable(name: "escaping", scope: !1975, file: !80, line: 405, type: !38)
!1982 = !DILocation(line: 405, column: 12, scope: !1975)
!1983 = !DILocalVariable(name: "c_and_shell_quote_compat", scope: !1975, file: !80, line: 406, type: !38)
!1984 = !DILocation(line: 406, column: 12, scope: !1975)
!1985 = !DILocation(line: 408, column: 11, scope: !1986)
!1986 = distinct !DILexicalBlock(scope: !1975, file: !80, line: 408, column: 11)
!1987 = !DILocation(line: 409, column: 11, scope: !1986)
!1988 = !DILocation(line: 409, column: 14, scope: !1986)
!1989 = !DILocation(line: 409, column: 28, scope: !1986)
!1990 = !DILocation(line: 410, column: 11, scope: !1986)
!1991 = !DILocation(line: 410, column: 14, scope: !1986)
!1992 = !DILocation(line: 411, column: 11, scope: !1986)
!1993 = !DILocation(line: 411, column: 15, scope: !1986)
!1994 = !DILocation(line: 411, column: 19, scope: !1986)
!1995 = !DILocation(line: 411, column: 17, scope: !1986)
!1996 = !DILocation(line: 412, column: 19, scope: !1986)
!1997 = !DILocation(line: 412, column: 27, scope: !1986)
!1998 = !DILocation(line: 412, column: 39, scope: !1986)
!1999 = !DILocation(line: 412, column: 46, scope: !1986)
!2000 = !DILocation(line: 412, column: 44, scope: !1986)
!2001 = !DILocation(line: 416, column: 40, scope: !1986)
!2002 = !DILocation(line: 416, column: 32, scope: !1986)
!2003 = !DILocation(line: 416, column: 30, scope: !1986)
!2004 = !DILocation(line: 416, column: 48, scope: !1986)
!2005 = !DILocation(line: 412, column: 15, scope: !1986)
!2006 = !DILocation(line: 417, column: 11, scope: !1986)
!2007 = !DILocation(line: 417, column: 22, scope: !1986)
!2008 = !DILocation(line: 417, column: 28, scope: !1986)
!2009 = !DILocation(line: 417, column: 26, scope: !1986)
!2010 = !DILocation(line: 417, column: 31, scope: !1986)
!2011 = !DILocation(line: 417, column: 45, scope: !1986)
!2012 = !DILocation(line: 417, column: 14, scope: !1986)
!2013 = !DILocation(line: 417, column: 63, scope: !1986)
!2014 = !DILocation(line: 408, column: 11, scope: !1975)
!2015 = !DILocation(line: 419, column: 15, scope: !2016)
!2016 = distinct !DILexicalBlock(scope: !2017, file: !80, line: 419, column: 15)
!2017 = distinct !DILexicalBlock(scope: !1986, file: !80, line: 418, column: 9)
!2018 = !DILocation(line: 419, column: 15, scope: !2017)
!2019 = !DILocation(line: 420, column: 13, scope: !2016)
!2020 = !DILocation(line: 421, column: 26, scope: !2017)
!2021 = !DILocation(line: 422, column: 9, scope: !2017)
!2022 = !DILocation(line: 424, column: 11, scope: !1975)
!2023 = !DILocation(line: 424, column: 15, scope: !1975)
!2024 = !DILocation(line: 424, column: 9, scope: !1975)
!2025 = !DILocation(line: 425, column: 15, scope: !1975)
!2026 = !DILocation(line: 425, column: 7, scope: !1975)
!2027 = !DILocation(line: 428, column: 15, scope: !2028)
!2028 = distinct !DILexicalBlock(scope: !2029, file: !80, line: 428, column: 15)
!2029 = distinct !DILexicalBlock(scope: !1975, file: !80, line: 426, column: 9)
!2030 = !DILocation(line: 428, column: 15, scope: !2029)
!2031 = !DILocation(line: 430, column: 15, scope: !2032)
!2032 = distinct !DILexicalBlock(scope: !2028, file: !80, line: 429, column: 13)
!2033 = !DILocation(line: 430, column: 15, scope: !2034)
!2034 = distinct !DILexicalBlock(scope: !2035, file: !80, line: 430, column: 15)
!2035 = distinct !DILexicalBlock(scope: !2032, file: !80, line: 430, column: 15)
!2036 = !DILocation(line: 430, column: 15, scope: !2035)
!2037 = !DILocation(line: 430, column: 15, scope: !2038)
!2038 = distinct !DILexicalBlock(scope: !2035, file: !80, line: 430, column: 15)
!2039 = !DILocation(line: 430, column: 15, scope: !2040)
!2040 = distinct !DILexicalBlock(scope: !2038, file: !80, line: 430, column: 15)
!2041 = !DILocation(line: 430, column: 15, scope: !2042)
!2042 = distinct !DILexicalBlock(scope: !2043, file: !80, line: 430, column: 15)
!2043 = distinct !DILexicalBlock(scope: !2040, file: !80, line: 430, column: 15)
!2044 = !DILocation(line: 430, column: 15, scope: !2043)
!2045 = !DILocation(line: 430, column: 15, scope: !2046)
!2046 = distinct !DILexicalBlock(scope: !2047, file: !80, line: 430, column: 15)
!2047 = distinct !DILexicalBlock(scope: !2040, file: !80, line: 430, column: 15)
!2048 = !DILocation(line: 430, column: 15, scope: !2047)
!2049 = !DILocation(line: 430, column: 15, scope: !2050)
!2050 = distinct !DILexicalBlock(scope: !2051, file: !80, line: 430, column: 15)
!2051 = distinct !DILexicalBlock(scope: !2040, file: !80, line: 430, column: 15)
!2052 = !DILocation(line: 430, column: 15, scope: !2051)
!2053 = !DILocation(line: 430, column: 15, scope: !2054)
!2054 = distinct !DILexicalBlock(scope: !2055, file: !80, line: 430, column: 15)
!2055 = distinct !DILexicalBlock(scope: !2035, file: !80, line: 430, column: 15)
!2056 = !DILocation(line: 430, column: 15, scope: !2055)
!2057 = !DILocation(line: 437, column: 19, scope: !2058)
!2058 = distinct !DILexicalBlock(scope: !2032, file: !80, line: 437, column: 19)
!2059 = !DILocation(line: 437, column: 33, scope: !2058)
!2060 = !DILocation(line: 438, column: 19, scope: !2058)
!2061 = !DILocation(line: 438, column: 22, scope: !2058)
!2062 = !DILocation(line: 438, column: 24, scope: !2058)
!2063 = !DILocation(line: 438, column: 30, scope: !2058)
!2064 = !DILocation(line: 438, column: 28, scope: !2058)
!2065 = !DILocation(line: 438, column: 38, scope: !2058)
!2066 = !DILocation(line: 438, column: 48, scope: !2058)
!2067 = !DILocation(line: 438, column: 52, scope: !2058)
!2068 = !DILocation(line: 438, column: 54, scope: !2058)
!2069 = !DILocation(line: 438, column: 45, scope: !2058)
!2070 = !DILocation(line: 438, column: 59, scope: !2058)
!2071 = !DILocation(line: 438, column: 62, scope: !2058)
!2072 = !DILocation(line: 438, column: 66, scope: !2058)
!2073 = !DILocation(line: 438, column: 68, scope: !2058)
!2074 = !DILocation(line: 438, column: 73, scope: !2058)
!2075 = !DILocation(line: 437, column: 19, scope: !2032)
!2076 = !DILocation(line: 440, column: 19, scope: !2077)
!2077 = distinct !DILexicalBlock(scope: !2058, file: !80, line: 439, column: 17)
!2078 = !DILocation(line: 440, column: 19, scope: !2079)
!2079 = distinct !DILexicalBlock(scope: !2080, file: !80, line: 440, column: 19)
!2080 = distinct !DILexicalBlock(scope: !2077, file: !80, line: 440, column: 19)
!2081 = !DILocation(line: 440, column: 19, scope: !2080)
!2082 = !DILocation(line: 441, column: 19, scope: !2077)
!2083 = !DILocation(line: 441, column: 19, scope: !2084)
!2084 = distinct !DILexicalBlock(scope: !2085, file: !80, line: 441, column: 19)
!2085 = distinct !DILexicalBlock(scope: !2077, file: !80, line: 441, column: 19)
!2086 = !DILocation(line: 441, column: 19, scope: !2085)
!2087 = !DILocation(line: 442, column: 17, scope: !2077)
!2088 = !DILocation(line: 443, column: 17, scope: !2032)
!2089 = !DILocation(line: 448, column: 13, scope: !2032)
!2090 = !DILocation(line: 449, column: 20, scope: !2091)
!2091 = distinct !DILexicalBlock(scope: !2028, file: !80, line: 449, column: 20)
!2092 = !DILocation(line: 449, column: 26, scope: !2091)
!2093 = !DILocation(line: 449, column: 20, scope: !2028)
!2094 = !DILocation(line: 450, column: 13, scope: !2091)
!2095 = !DILocation(line: 451, column: 11, scope: !2029)
!2096 = !DILocation(line: 454, column: 19, scope: !2029)
!2097 = !DILocation(line: 454, column: 11, scope: !2029)
!2098 = !DILocation(line: 457, column: 19, scope: !2099)
!2099 = distinct !DILexicalBlock(scope: !2100, file: !80, line: 457, column: 19)
!2100 = distinct !DILexicalBlock(scope: !2029, file: !80, line: 455, column: 13)
!2101 = !DILocation(line: 457, column: 19, scope: !2100)
!2102 = !DILocation(line: 458, column: 17, scope: !2099)
!2103 = !DILocation(line: 459, column: 15, scope: !2100)
!2104 = !DILocation(line: 462, column: 20, scope: !2105)
!2105 = distinct !DILexicalBlock(scope: !2100, file: !80, line: 462, column: 19)
!2106 = !DILocation(line: 462, column: 26, scope: !2105)
!2107 = !DILocation(line: 463, column: 19, scope: !2105)
!2108 = !DILocation(line: 463, column: 22, scope: !2105)
!2109 = !DILocation(line: 463, column: 24, scope: !2105)
!2110 = !DILocation(line: 463, column: 30, scope: !2105)
!2111 = !DILocation(line: 463, column: 28, scope: !2105)
!2112 = !DILocation(line: 463, column: 38, scope: !2105)
!2113 = !DILocation(line: 463, column: 41, scope: !2105)
!2114 = !DILocation(line: 463, column: 45, scope: !2105)
!2115 = !DILocation(line: 463, column: 47, scope: !2105)
!2116 = !DILocation(line: 463, column: 52, scope: !2105)
!2117 = !DILocation(line: 462, column: 19, scope: !2100)
!2118 = !DILocation(line: 464, column: 25, scope: !2105)
!2119 = !DILocation(line: 464, column: 29, scope: !2105)
!2120 = !DILocation(line: 464, column: 31, scope: !2105)
!2121 = !DILocation(line: 464, column: 17, scope: !2105)
!2122 = !DILocation(line: 471, column: 25, scope: !2123)
!2123 = distinct !DILexicalBlock(scope: !2124, file: !80, line: 471, column: 25)
!2124 = distinct !DILexicalBlock(scope: !2105, file: !80, line: 465, column: 19)
!2125 = !DILocation(line: 471, column: 25, scope: !2124)
!2126 = !DILocation(line: 472, column: 23, scope: !2123)
!2127 = !DILocation(line: 473, column: 25, scope: !2124)
!2128 = !DILocation(line: 473, column: 29, scope: !2124)
!2129 = !DILocation(line: 473, column: 31, scope: !2124)
!2130 = !DILocation(line: 473, column: 23, scope: !2124)
!2131 = !DILocation(line: 474, column: 23, scope: !2124)
!2132 = !DILocation(line: 475, column: 21, scope: !2124)
!2133 = !DILocation(line: 475, column: 21, scope: !2134)
!2134 = distinct !DILexicalBlock(scope: !2135, file: !80, line: 475, column: 21)
!2135 = distinct !DILexicalBlock(scope: !2124, file: !80, line: 475, column: 21)
!2136 = !DILocation(line: 475, column: 21, scope: !2135)
!2137 = !DILocation(line: 476, column: 21, scope: !2124)
!2138 = !DILocation(line: 476, column: 21, scope: !2139)
!2139 = distinct !DILexicalBlock(scope: !2140, file: !80, line: 476, column: 21)
!2140 = distinct !DILexicalBlock(scope: !2124, file: !80, line: 476, column: 21)
!2141 = !DILocation(line: 476, column: 21, scope: !2140)
!2142 = !DILocation(line: 477, column: 21, scope: !2124)
!2143 = !DILocation(line: 477, column: 21, scope: !2144)
!2144 = distinct !DILexicalBlock(scope: !2145, file: !80, line: 477, column: 21)
!2145 = distinct !DILexicalBlock(scope: !2124, file: !80, line: 477, column: 21)
!2146 = !DILocation(line: 477, column: 21, scope: !2145)
!2147 = !DILocation(line: 478, column: 21, scope: !2124)
!2148 = !DILocation(line: 478, column: 21, scope: !2149)
!2149 = distinct !DILexicalBlock(scope: !2150, file: !80, line: 478, column: 21)
!2150 = distinct !DILexicalBlock(scope: !2124, file: !80, line: 478, column: 21)
!2151 = !DILocation(line: 478, column: 21, scope: !2150)
!2152 = !DILocation(line: 479, column: 21, scope: !2124)
!2153 = !DILocation(line: 482, column: 21, scope: !2124)
!2154 = !DILocation(line: 483, column: 19, scope: !2124)
!2155 = !DILocation(line: 484, column: 15, scope: !2100)
!2156 = !DILocation(line: 487, column: 15, scope: !2100)
!2157 = !DILocation(line: 489, column: 11, scope: !2029)
!2158 = !DILocation(line: 491, column: 24, scope: !2029)
!2159 = !DILocation(line: 491, column: 31, scope: !2029)
!2160 = !DILocation(line: 492, column: 24, scope: !2029)
!2161 = !DILocation(line: 492, column: 31, scope: !2029)
!2162 = !DILocation(line: 493, column: 24, scope: !2029)
!2163 = !DILocation(line: 493, column: 31, scope: !2029)
!2164 = !DILocation(line: 494, column: 24, scope: !2029)
!2165 = !DILocation(line: 494, column: 31, scope: !2029)
!2166 = !DILocation(line: 495, column: 24, scope: !2029)
!2167 = !DILocation(line: 495, column: 31, scope: !2029)
!2168 = !DILocation(line: 496, column: 24, scope: !2029)
!2169 = !DILocation(line: 496, column: 31, scope: !2029)
!2170 = !DILocation(line: 497, column: 24, scope: !2029)
!2171 = !DILocation(line: 497, column: 31, scope: !2029)
!2172 = !DILocation(line: 498, column: 26, scope: !2029)
!2173 = !DILocation(line: 498, column: 24, scope: !2029)
!2174 = !DILocation(line: 500, column: 15, scope: !2175)
!2175 = distinct !DILexicalBlock(scope: !2029, file: !80, line: 500, column: 15)
!2176 = !DILocation(line: 500, column: 29, scope: !2175)
!2177 = !DILocation(line: 500, column: 15, scope: !2029)
!2178 = !DILocation(line: 502, column: 19, scope: !2179)
!2179 = distinct !DILexicalBlock(scope: !2180, file: !80, line: 502, column: 19)
!2180 = distinct !DILexicalBlock(scope: !2175, file: !80, line: 501, column: 13)
!2181 = !DILocation(line: 502, column: 19, scope: !2180)
!2182 = !DILocation(line: 503, column: 17, scope: !2179)
!2183 = !DILocation(line: 504, column: 15, scope: !2180)
!2184 = !DILocation(line: 509, column: 15, scope: !2185)
!2185 = distinct !DILexicalBlock(scope: !2029, file: !80, line: 509, column: 15)
!2186 = !DILocation(line: 509, column: 33, scope: !2185)
!2187 = !DILocation(line: 509, column: 36, scope: !2185)
!2188 = !DILocation(line: 509, column: 55, scope: !2185)
!2189 = !DILocation(line: 509, column: 58, scope: !2185)
!2190 = !DILocation(line: 509, column: 15, scope: !2029)
!2191 = !DILocation(line: 510, column: 13, scope: !2185)
!2192 = !DILabel(scope: !2029, name: "c_and_shell_escape", file: !80, line: 512)
!2193 = !DILocation(line: 512, column: 9, scope: !2029)
!2194 = !DILocation(line: 513, column: 15, scope: !2195)
!2195 = distinct !DILexicalBlock(scope: !2029, file: !80, line: 513, column: 15)
!2196 = !DILocation(line: 513, column: 29, scope: !2195)
!2197 = !DILocation(line: 514, column: 15, scope: !2195)
!2198 = !DILocation(line: 514, column: 18, scope: !2195)
!2199 = !DILocation(line: 513, column: 15, scope: !2029)
!2200 = !DILocation(line: 515, column: 13, scope: !2195)
!2201 = !DILabel(scope: !2029, name: "c_escape", file: !80, line: 517)
!2202 = !DILocation(line: 517, column: 9, scope: !2029)
!2203 = !DILocation(line: 518, column: 15, scope: !2204)
!2204 = distinct !DILexicalBlock(scope: !2029, file: !80, line: 518, column: 15)
!2205 = !DILocation(line: 518, column: 15, scope: !2029)
!2206 = !DILocation(line: 520, column: 19, scope: !2207)
!2207 = distinct !DILexicalBlock(scope: !2204, file: !80, line: 519, column: 13)
!2208 = !DILocation(line: 520, column: 17, scope: !2207)
!2209 = !DILocation(line: 521, column: 15, scope: !2207)
!2210 = !DILocation(line: 523, column: 11, scope: !2029)
!2211 = !DILocation(line: 526, column: 18, scope: !2212)
!2212 = distinct !DILexicalBlock(scope: !2029, file: !80, line: 526, column: 15)
!2213 = !DILocation(line: 526, column: 26, scope: !2212)
!2214 = !DILocation(line: 526, column: 15, scope: !2029)
!2215 = !DILocation(line: 526, column: 40, scope: !2212)
!2216 = !DILocation(line: 526, column: 47, scope: !2212)
!2217 = !DILocation(line: 526, column: 57, scope: !2212)
!2218 = !DILocation(line: 526, column: 65, scope: !2212)
!2219 = !DILocation(line: 527, column: 13, scope: !2212)
!2220 = !DILocation(line: 528, column: 11, scope: !2029)
!2221 = !DILocation(line: 530, column: 15, scope: !2222)
!2222 = distinct !DILexicalBlock(scope: !2029, file: !80, line: 530, column: 15)
!2223 = !DILocation(line: 530, column: 17, scope: !2222)
!2224 = !DILocation(line: 530, column: 15, scope: !2029)
!2225 = !DILocation(line: 531, column: 13, scope: !2222)
!2226 = !DILocation(line: 532, column: 11, scope: !2029)
!2227 = !DILocation(line: 534, column: 36, scope: !2029)
!2228 = !DILocation(line: 535, column: 11, scope: !2029)
!2229 = !DILocation(line: 548, column: 15, scope: !2230)
!2230 = distinct !DILexicalBlock(scope: !2029, file: !80, line: 548, column: 15)
!2231 = !DILocation(line: 548, column: 29, scope: !2230)
!2232 = !DILocation(line: 549, column: 15, scope: !2230)
!2233 = !DILocation(line: 549, column: 18, scope: !2230)
!2234 = !DILocation(line: 548, column: 15, scope: !2029)
!2235 = !DILocation(line: 550, column: 13, scope: !2230)
!2236 = !DILocation(line: 551, column: 11, scope: !2029)
!2237 = !DILocation(line: 554, column: 36, scope: !2029)
!2238 = !DILocation(line: 555, column: 36, scope: !2029)
!2239 = !DILocation(line: 556, column: 15, scope: !2240)
!2240 = distinct !DILexicalBlock(scope: !2029, file: !80, line: 556, column: 15)
!2241 = !DILocation(line: 556, column: 29, scope: !2240)
!2242 = !DILocation(line: 556, column: 15, scope: !2029)
!2243 = !DILocation(line: 558, column: 19, scope: !2244)
!2244 = distinct !DILexicalBlock(scope: !2245, file: !80, line: 558, column: 19)
!2245 = distinct !DILexicalBlock(scope: !2240, file: !80, line: 557, column: 13)
!2246 = !DILocation(line: 558, column: 19, scope: !2245)
!2247 = !DILocation(line: 559, column: 17, scope: !2244)
!2248 = !DILocation(line: 561, column: 19, scope: !2249)
!2249 = distinct !DILexicalBlock(scope: !2245, file: !80, line: 561, column: 19)
!2250 = !DILocation(line: 561, column: 30, scope: !2249)
!2251 = !DILocation(line: 561, column: 35, scope: !2249)
!2252 = !DILocation(line: 561, column: 19, scope: !2245)
!2253 = !DILocation(line: 566, column: 37, scope: !2254)
!2254 = distinct !DILexicalBlock(scope: !2249, file: !80, line: 562, column: 17)
!2255 = !DILocation(line: 566, column: 35, scope: !2254)
!2256 = !DILocation(line: 567, column: 30, scope: !2254)
!2257 = !DILocation(line: 568, column: 17, scope: !2254)
!2258 = !DILocation(line: 570, column: 15, scope: !2245)
!2259 = !DILocation(line: 570, column: 15, scope: !2260)
!2260 = distinct !DILexicalBlock(scope: !2261, file: !80, line: 570, column: 15)
!2261 = distinct !DILexicalBlock(scope: !2245, file: !80, line: 570, column: 15)
!2262 = !DILocation(line: 570, column: 15, scope: !2261)
!2263 = !DILocation(line: 571, column: 15, scope: !2245)
!2264 = !DILocation(line: 571, column: 15, scope: !2265)
!2265 = distinct !DILexicalBlock(scope: !2266, file: !80, line: 571, column: 15)
!2266 = distinct !DILexicalBlock(scope: !2245, file: !80, line: 571, column: 15)
!2267 = !DILocation(line: 571, column: 15, scope: !2266)
!2268 = !DILocation(line: 572, column: 15, scope: !2245)
!2269 = !DILocation(line: 572, column: 15, scope: !2270)
!2270 = distinct !DILexicalBlock(scope: !2271, file: !80, line: 572, column: 15)
!2271 = distinct !DILexicalBlock(scope: !2245, file: !80, line: 572, column: 15)
!2272 = !DILocation(line: 572, column: 15, scope: !2271)
!2273 = !DILocation(line: 573, column: 40, scope: !2245)
!2274 = !DILocation(line: 574, column: 13, scope: !2245)
!2275 = !DILocation(line: 575, column: 11, scope: !2029)
!2276 = !DILocation(line: 599, column: 36, scope: !2029)
!2277 = !DILocation(line: 600, column: 11, scope: !2029)
!2278 = !DILocalVariable(name: "m", scope: !2279, file: !80, line: 610, type: !74)
!2279 = distinct !DILexicalBlock(scope: !2029, file: !80, line: 608, column: 11)
!2280 = !DILocation(line: 610, column: 20, scope: !2279)
!2281 = !DILocalVariable(name: "printable", scope: !2279, file: !80, line: 612, type: !38)
!2282 = !DILocation(line: 612, column: 18, scope: !2279)
!2283 = !DILocation(line: 614, column: 17, scope: !2284)
!2284 = distinct !DILexicalBlock(scope: !2279, file: !80, line: 614, column: 17)
!2285 = !DILocation(line: 614, column: 17, scope: !2279)
!2286 = !DILocation(line: 616, column: 19, scope: !2287)
!2287 = distinct !DILexicalBlock(scope: !2284, file: !80, line: 615, column: 15)
!2288 = !DILocation(line: 617, column: 29, scope: !2287)
!2289 = !DILocation(line: 617, column: 41, scope: !2287)
!2290 = !DILocation(line: 617, column: 27, scope: !2287)
!2291 = !DILocation(line: 618, column: 15, scope: !2287)
!2292 = !DILocalVariable(name: "mbstate", scope: !2293, file: !80, line: 621, type: !2294)
!2293 = distinct !DILexicalBlock(scope: !2284, file: !80, line: 620, column: 15)
!2294 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !2295, line: 6, baseType: !2296)
!2295 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "")
!2296 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !2297, line: 21, baseType: !2298)
!2297 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "")
!2298 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2297, line: 13, size: 64, elements: !2299)
!2299 = !{!2300, !2301}
!2300 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !2298, file: !2297, line: 15, baseType: !19, size: 32)
!2301 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !2298, file: !2297, line: 20, baseType: !2302, size: 32, offset: 32)
!2302 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2298, file: !2297, line: 16, size: 32, elements: !2303)
!2303 = !{!2304, !2305}
!2304 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !2302, file: !2297, line: 18, baseType: !59, size: 32)
!2305 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !2302, file: !2297, line: 19, baseType: !2306, size: 32)
!2306 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 32, elements: !2307)
!2307 = !{!2308}
!2308 = !DISubrange(count: 4)
!2309 = !DILocation(line: 621, column: 27, scope: !2293)
!2310 = !DILocation(line: 622, column: 17, scope: !2293)
!2311 = !DILocation(line: 624, column: 19, scope: !2293)
!2312 = !DILocation(line: 625, column: 27, scope: !2293)
!2313 = !DILocation(line: 626, column: 21, scope: !2314)
!2314 = distinct !DILexicalBlock(scope: !2293, file: !80, line: 626, column: 21)
!2315 = !DILocation(line: 626, column: 29, scope: !2314)
!2316 = !DILocation(line: 626, column: 21, scope: !2293)
!2317 = !DILocation(line: 627, column: 37, scope: !2314)
!2318 = !DILocation(line: 627, column: 29, scope: !2314)
!2319 = !DILocation(line: 627, column: 27, scope: !2314)
!2320 = !DILocation(line: 627, column: 19, scope: !2314)
!2321 = !DILocation(line: 629, column: 17, scope: !2293)
!2322 = !DILocalVariable(name: "w", scope: !2323, file: !80, line: 631, type: !2324)
!2323 = distinct !DILexicalBlock(scope: !2293, file: !80, line: 630, column: 19)
!2324 = !DIDerivedType(tag: DW_TAG_typedef, name: "wchar_t", file: !75, line: 74, baseType: !19)
!2325 = !DILocation(line: 631, column: 29, scope: !2323)
!2326 = !DILocalVariable(name: "bytes", scope: !2323, file: !80, line: 632, type: !74)
!2327 = !DILocation(line: 632, column: 28, scope: !2323)
!2328 = !DILocation(line: 632, column: 50, scope: !2323)
!2329 = !DILocation(line: 632, column: 54, scope: !2323)
!2330 = !DILocation(line: 632, column: 58, scope: !2323)
!2331 = !DILocation(line: 632, column: 56, scope: !2323)
!2332 = !DILocation(line: 633, column: 45, scope: !2323)
!2333 = !DILocation(line: 633, column: 56, scope: !2323)
!2334 = !DILocation(line: 633, column: 60, scope: !2323)
!2335 = !DILocation(line: 633, column: 58, scope: !2323)
!2336 = !DILocation(line: 633, column: 53, scope: !2323)
!2337 = !DILocation(line: 632, column: 36, scope: !2323)
!2338 = !DILocation(line: 634, column: 25, scope: !2339)
!2339 = distinct !DILexicalBlock(scope: !2323, file: !80, line: 634, column: 25)
!2340 = !DILocation(line: 634, column: 31, scope: !2339)
!2341 = !DILocation(line: 634, column: 25, scope: !2323)
!2342 = !DILocation(line: 635, column: 23, scope: !2339)
!2343 = !DILocation(line: 636, column: 30, scope: !2344)
!2344 = distinct !DILexicalBlock(scope: !2339, file: !80, line: 636, column: 30)
!2345 = !DILocation(line: 636, column: 36, scope: !2344)
!2346 = !DILocation(line: 636, column: 30, scope: !2339)
!2347 = !DILocation(line: 638, column: 35, scope: !2348)
!2348 = distinct !DILexicalBlock(scope: !2344, file: !80, line: 637, column: 23)
!2349 = !DILocation(line: 639, column: 25, scope: !2348)
!2350 = !DILocation(line: 641, column: 30, scope: !2351)
!2351 = distinct !DILexicalBlock(scope: !2344, file: !80, line: 641, column: 30)
!2352 = !DILocation(line: 641, column: 36, scope: !2351)
!2353 = !DILocation(line: 641, column: 30, scope: !2344)
!2354 = !DILocation(line: 643, column: 35, scope: !2355)
!2355 = distinct !DILexicalBlock(scope: !2351, file: !80, line: 642, column: 23)
!2356 = !DILocation(line: 644, column: 25, scope: !2355)
!2357 = !DILocation(line: 644, column: 32, scope: !2355)
!2358 = !DILocation(line: 644, column: 36, scope: !2355)
!2359 = !DILocation(line: 644, column: 34, scope: !2355)
!2360 = !DILocation(line: 644, column: 40, scope: !2355)
!2361 = !DILocation(line: 644, column: 38, scope: !2355)
!2362 = !DILocation(line: 644, column: 48, scope: !2355)
!2363 = !DILocation(line: 644, column: 51, scope: !2355)
!2364 = !DILocation(line: 644, column: 55, scope: !2355)
!2365 = !DILocation(line: 644, column: 59, scope: !2355)
!2366 = !DILocation(line: 644, column: 57, scope: !2355)
!2367 = !DILocation(line: 0, scope: !2355)
!2368 = !DILocation(line: 645, column: 28, scope: !2355)
!2369 = distinct !{!2369, !2356, !2368}
!2370 = !DILocation(line: 646, column: 25, scope: !2355)
!2371 = !DILocation(line: 654, column: 44, scope: !2372)
!2372 = distinct !DILexicalBlock(scope: !2373, file: !80, line: 654, column: 29)
!2373 = distinct !DILexicalBlock(scope: !2351, file: !80, line: 649, column: 23)
!2374 = !DILocation(line: 655, column: 29, scope: !2372)
!2375 = !DILocation(line: 655, column: 32, scope: !2372)
!2376 = !DILocation(line: 655, column: 46, scope: !2372)
!2377 = !DILocation(line: 654, column: 29, scope: !2373)
!2378 = !DILocalVariable(name: "j", scope: !2379, file: !80, line: 657, type: !74)
!2379 = distinct !DILexicalBlock(scope: !2372, file: !80, line: 656, column: 27)
!2380 = !DILocation(line: 657, column: 36, scope: !2379)
!2381 = !DILocation(line: 658, column: 36, scope: !2382)
!2382 = distinct !DILexicalBlock(scope: !2379, file: !80, line: 658, column: 29)
!2383 = !DILocation(line: 658, column: 34, scope: !2382)
!2384 = !DILocation(line: 658, column: 41, scope: !2385)
!2385 = distinct !DILexicalBlock(scope: !2382, file: !80, line: 658, column: 29)
!2386 = !DILocation(line: 658, column: 45, scope: !2385)
!2387 = !DILocation(line: 658, column: 43, scope: !2385)
!2388 = !DILocation(line: 658, column: 29, scope: !2382)
!2389 = !DILocation(line: 659, column: 39, scope: !2385)
!2390 = !DILocation(line: 659, column: 43, scope: !2385)
!2391 = !DILocation(line: 659, column: 47, scope: !2385)
!2392 = !DILocation(line: 659, column: 45, scope: !2385)
!2393 = !DILocation(line: 659, column: 51, scope: !2385)
!2394 = !DILocation(line: 659, column: 49, scope: !2385)
!2395 = !DILocation(line: 659, column: 31, scope: !2385)
!2396 = !DILocation(line: 663, column: 35, scope: !2397)
!2397 = distinct !DILexicalBlock(scope: !2385, file: !80, line: 660, column: 33)
!2398 = !DILocation(line: 666, column: 35, scope: !2397)
!2399 = !DILocation(line: 667, column: 33, scope: !2397)
!2400 = !DILocation(line: 658, column: 53, scope: !2385)
!2401 = !DILocation(line: 658, column: 29, scope: !2385)
!2402 = distinct !{!2402, !2388, !2403}
!2403 = !DILocation(line: 667, column: 33, scope: !2382)
!2404 = !DILocation(line: 668, column: 27, scope: !2379)
!2405 = !DILocation(line: 670, column: 41, scope: !2406)
!2406 = distinct !DILexicalBlock(scope: !2373, file: !80, line: 670, column: 29)
!2407 = !DILocation(line: 670, column: 31, scope: !2406)
!2408 = !DILocation(line: 670, column: 29, scope: !2373)
!2409 = !DILocation(line: 671, column: 37, scope: !2406)
!2410 = !DILocation(line: 671, column: 27, scope: !2406)
!2411 = !DILocation(line: 672, column: 30, scope: !2373)
!2412 = !DILocation(line: 672, column: 27, scope: !2373)
!2413 = !DILocation(line: 674, column: 19, scope: !2323)
!2414 = !DILocation(line: 675, column: 26, scope: !2293)
!2415 = !DILocation(line: 675, column: 24, scope: !2293)
!2416 = distinct !{!2416, !2321, !2417}
!2417 = !DILocation(line: 675, column: 44, scope: !2293)
!2418 = !DILocation(line: 678, column: 40, scope: !2279)
!2419 = !DILocation(line: 678, column: 38, scope: !2279)
!2420 = !DILocation(line: 680, column: 21, scope: !2421)
!2421 = distinct !DILexicalBlock(scope: !2279, file: !80, line: 680, column: 17)
!2422 = !DILocation(line: 680, column: 19, scope: !2421)
!2423 = !DILocation(line: 680, column: 23, scope: !2421)
!2424 = !DILocation(line: 680, column: 27, scope: !2421)
!2425 = !DILocation(line: 680, column: 45, scope: !2421)
!2426 = !DILocation(line: 680, column: 50, scope: !2421)
!2427 = !DILocation(line: 680, column: 17, scope: !2279)
!2428 = !DILocalVariable(name: "ilim", scope: !2429, file: !80, line: 684, type: !74)
!2429 = distinct !DILexicalBlock(scope: !2421, file: !80, line: 681, column: 15)
!2430 = !DILocation(line: 684, column: 24, scope: !2429)
!2431 = !DILocation(line: 684, column: 31, scope: !2429)
!2432 = !DILocation(line: 684, column: 35, scope: !2429)
!2433 = !DILocation(line: 684, column: 33, scope: !2429)
!2434 = !DILocation(line: 686, column: 17, scope: !2429)
!2435 = !DILocation(line: 688, column: 25, scope: !2436)
!2436 = distinct !DILexicalBlock(scope: !2437, file: !80, line: 688, column: 25)
!2437 = distinct !DILexicalBlock(scope: !2438, file: !80, line: 687, column: 19)
!2438 = distinct !DILexicalBlock(scope: !2439, file: !80, line: 686, column: 17)
!2439 = distinct !DILexicalBlock(scope: !2429, file: !80, line: 686, column: 17)
!2440 = !DILocation(line: 688, column: 43, scope: !2436)
!2441 = !DILocation(line: 688, column: 48, scope: !2436)
!2442 = !DILocation(line: 688, column: 25, scope: !2437)
!2443 = !DILocation(line: 690, column: 25, scope: !2444)
!2444 = distinct !DILexicalBlock(scope: !2436, file: !80, line: 689, column: 23)
!2445 = !DILocation(line: 690, column: 25, scope: !2446)
!2446 = distinct !DILexicalBlock(scope: !2447, file: !80, line: 690, column: 25)
!2447 = distinct !DILexicalBlock(scope: !2444, file: !80, line: 690, column: 25)
!2448 = !DILocation(line: 690, column: 25, scope: !2447)
!2449 = !DILocation(line: 690, column: 25, scope: !2450)
!2450 = distinct !DILexicalBlock(scope: !2447, file: !80, line: 690, column: 25)
!2451 = !DILocation(line: 690, column: 25, scope: !2452)
!2452 = distinct !DILexicalBlock(scope: !2450, file: !80, line: 690, column: 25)
!2453 = !DILocation(line: 690, column: 25, scope: !2454)
!2454 = distinct !DILexicalBlock(scope: !2455, file: !80, line: 690, column: 25)
!2455 = distinct !DILexicalBlock(scope: !2452, file: !80, line: 690, column: 25)
!2456 = !DILocation(line: 690, column: 25, scope: !2455)
!2457 = !DILocation(line: 690, column: 25, scope: !2458)
!2458 = distinct !DILexicalBlock(scope: !2459, file: !80, line: 690, column: 25)
!2459 = distinct !DILexicalBlock(scope: !2452, file: !80, line: 690, column: 25)
!2460 = !DILocation(line: 690, column: 25, scope: !2459)
!2461 = !DILocation(line: 690, column: 25, scope: !2462)
!2462 = distinct !DILexicalBlock(scope: !2463, file: !80, line: 690, column: 25)
!2463 = distinct !DILexicalBlock(scope: !2452, file: !80, line: 690, column: 25)
!2464 = !DILocation(line: 690, column: 25, scope: !2463)
!2465 = !DILocation(line: 690, column: 25, scope: !2466)
!2466 = distinct !DILexicalBlock(scope: !2467, file: !80, line: 690, column: 25)
!2467 = distinct !DILexicalBlock(scope: !2447, file: !80, line: 690, column: 25)
!2468 = !DILocation(line: 690, column: 25, scope: !2467)
!2469 = !DILocation(line: 691, column: 25, scope: !2444)
!2470 = !DILocation(line: 691, column: 25, scope: !2471)
!2471 = distinct !DILexicalBlock(scope: !2472, file: !80, line: 691, column: 25)
!2472 = distinct !DILexicalBlock(scope: !2444, file: !80, line: 691, column: 25)
!2473 = !DILocation(line: 691, column: 25, scope: !2472)
!2474 = !DILocation(line: 692, column: 25, scope: !2444)
!2475 = !DILocation(line: 692, column: 25, scope: !2476)
!2476 = distinct !DILexicalBlock(scope: !2477, file: !80, line: 692, column: 25)
!2477 = distinct !DILexicalBlock(scope: !2444, file: !80, line: 692, column: 25)
!2478 = !DILocation(line: 692, column: 25, scope: !2477)
!2479 = !DILocation(line: 693, column: 36, scope: !2444)
!2480 = !DILocation(line: 693, column: 38, scope: !2444)
!2481 = !DILocation(line: 693, column: 33, scope: !2444)
!2482 = !DILocation(line: 693, column: 29, scope: !2444)
!2483 = !DILocation(line: 693, column: 27, scope: !2444)
!2484 = !DILocation(line: 694, column: 23, scope: !2444)
!2485 = !DILocation(line: 695, column: 30, scope: !2486)
!2486 = distinct !DILexicalBlock(scope: !2436, file: !80, line: 695, column: 30)
!2487 = !DILocation(line: 695, column: 30, scope: !2436)
!2488 = !DILocation(line: 697, column: 25, scope: !2489)
!2489 = distinct !DILexicalBlock(scope: !2486, file: !80, line: 696, column: 23)
!2490 = !DILocation(line: 697, column: 25, scope: !2491)
!2491 = distinct !DILexicalBlock(scope: !2492, file: !80, line: 697, column: 25)
!2492 = distinct !DILexicalBlock(scope: !2489, file: !80, line: 697, column: 25)
!2493 = !DILocation(line: 697, column: 25, scope: !2492)
!2494 = !DILocation(line: 698, column: 40, scope: !2489)
!2495 = !DILocation(line: 699, column: 23, scope: !2489)
!2496 = !DILocation(line: 700, column: 25, scope: !2497)
!2497 = distinct !DILexicalBlock(scope: !2437, file: !80, line: 700, column: 25)
!2498 = !DILocation(line: 700, column: 33, scope: !2497)
!2499 = !DILocation(line: 700, column: 35, scope: !2497)
!2500 = !DILocation(line: 700, column: 30, scope: !2497)
!2501 = !DILocation(line: 700, column: 25, scope: !2437)
!2502 = !DILocation(line: 701, column: 23, scope: !2497)
!2503 = !DILocation(line: 702, column: 21, scope: !2437)
!2504 = !DILocation(line: 702, column: 21, scope: !2505)
!2505 = distinct !DILexicalBlock(scope: !2506, file: !80, line: 702, column: 21)
!2506 = distinct !DILexicalBlock(scope: !2437, file: !80, line: 702, column: 21)
!2507 = !DILocation(line: 702, column: 21, scope: !2506)
!2508 = !DILocation(line: 702, column: 21, scope: !2509)
!2509 = distinct !DILexicalBlock(scope: !2505, file: !80, line: 702, column: 21)
!2510 = !DILocation(line: 702, column: 21, scope: !2511)
!2511 = distinct !DILexicalBlock(scope: !2512, file: !80, line: 702, column: 21)
!2512 = distinct !DILexicalBlock(scope: !2509, file: !80, line: 702, column: 21)
!2513 = !DILocation(line: 702, column: 21, scope: !2512)
!2514 = !DILocation(line: 702, column: 21, scope: !2515)
!2515 = distinct !DILexicalBlock(scope: !2516, file: !80, line: 702, column: 21)
!2516 = distinct !DILexicalBlock(scope: !2509, file: !80, line: 702, column: 21)
!2517 = !DILocation(line: 702, column: 21, scope: !2516)
!2518 = !DILocation(line: 703, column: 21, scope: !2437)
!2519 = !DILocation(line: 703, column: 21, scope: !2520)
!2520 = distinct !DILexicalBlock(scope: !2521, file: !80, line: 703, column: 21)
!2521 = distinct !DILexicalBlock(scope: !2437, file: !80, line: 703, column: 21)
!2522 = !DILocation(line: 703, column: 21, scope: !2521)
!2523 = !DILocation(line: 704, column: 25, scope: !2437)
!2524 = !DILocation(line: 704, column: 29, scope: !2437)
!2525 = !DILocation(line: 704, column: 23, scope: !2437)
!2526 = !DILocation(line: 686, column: 17, scope: !2438)
!2527 = distinct !{!2527, !2528, !2529}
!2528 = !DILocation(line: 686, column: 17, scope: !2439)
!2529 = !DILocation(line: 705, column: 19, scope: !2439)
!2530 = !DILocation(line: 707, column: 17, scope: !2429)
!2531 = !DILocation(line: 710, column: 9, scope: !2029)
!2532 = !DILocation(line: 712, column: 16, scope: !2533)
!2533 = distinct !DILexicalBlock(scope: !1975, file: !80, line: 712, column: 11)
!2534 = !DILocation(line: 712, column: 34, scope: !2533)
!2535 = !DILocation(line: 712, column: 37, scope: !2533)
!2536 = !DILocation(line: 712, column: 51, scope: !2533)
!2537 = !DILocation(line: 713, column: 15, scope: !2533)
!2538 = !DILocation(line: 713, column: 18, scope: !2533)
!2539 = !DILocation(line: 714, column: 14, scope: !2533)
!2540 = !DILocation(line: 714, column: 17, scope: !2533)
!2541 = !DILocation(line: 715, column: 14, scope: !2533)
!2542 = !DILocation(line: 715, column: 17, scope: !2533)
!2543 = !DILocation(line: 715, column: 33, scope: !2533)
!2544 = !DILocation(line: 715, column: 35, scope: !2533)
!2545 = !DILocation(line: 715, column: 51, scope: !2533)
!2546 = !DILocation(line: 715, column: 53, scope: !2533)
!2547 = !DILocation(line: 715, column: 47, scope: !2533)
!2548 = !DILocation(line: 715, column: 65, scope: !2533)
!2549 = !DILocation(line: 716, column: 11, scope: !2533)
!2550 = !DILocation(line: 716, column: 15, scope: !2533)
!2551 = !DILocation(line: 712, column: 11, scope: !1975)
!2552 = !DILocation(line: 717, column: 9, scope: !2533)
!2553 = !DILabel(scope: !1975, name: "store_escape", file: !80, line: 719)
!2554 = !DILocation(line: 719, column: 5, scope: !1975)
!2555 = !DILocation(line: 720, column: 7, scope: !1975)
!2556 = !DILocation(line: 720, column: 7, scope: !2557)
!2557 = distinct !DILexicalBlock(scope: !2558, file: !80, line: 720, column: 7)
!2558 = distinct !DILexicalBlock(scope: !1975, file: !80, line: 720, column: 7)
!2559 = !DILocation(line: 720, column: 7, scope: !2558)
!2560 = !DILocation(line: 720, column: 7, scope: !2561)
!2561 = distinct !DILexicalBlock(scope: !2558, file: !80, line: 720, column: 7)
!2562 = !DILocation(line: 720, column: 7, scope: !2563)
!2563 = distinct !DILexicalBlock(scope: !2561, file: !80, line: 720, column: 7)
!2564 = !DILocation(line: 720, column: 7, scope: !2565)
!2565 = distinct !DILexicalBlock(scope: !2566, file: !80, line: 720, column: 7)
!2566 = distinct !DILexicalBlock(scope: !2563, file: !80, line: 720, column: 7)
!2567 = !DILocation(line: 720, column: 7, scope: !2566)
!2568 = !DILocation(line: 720, column: 7, scope: !2569)
!2569 = distinct !DILexicalBlock(scope: !2570, file: !80, line: 720, column: 7)
!2570 = distinct !DILexicalBlock(scope: !2563, file: !80, line: 720, column: 7)
!2571 = !DILocation(line: 720, column: 7, scope: !2570)
!2572 = !DILocation(line: 720, column: 7, scope: !2573)
!2573 = distinct !DILexicalBlock(scope: !2574, file: !80, line: 720, column: 7)
!2574 = distinct !DILexicalBlock(scope: !2563, file: !80, line: 720, column: 7)
!2575 = !DILocation(line: 720, column: 7, scope: !2574)
!2576 = !DILocation(line: 720, column: 7, scope: !2577)
!2577 = distinct !DILexicalBlock(scope: !2578, file: !80, line: 720, column: 7)
!2578 = distinct !DILexicalBlock(scope: !2558, file: !80, line: 720, column: 7)
!2579 = !DILocation(line: 720, column: 7, scope: !2578)
!2580 = !DILabel(scope: !1975, name: "store_c", file: !80, line: 722)
!2581 = !DILocation(line: 722, column: 5, scope: !1975)
!2582 = !DILocation(line: 723, column: 7, scope: !1975)
!2583 = !DILocation(line: 723, column: 7, scope: !2584)
!2584 = distinct !DILexicalBlock(scope: !2585, file: !80, line: 723, column: 7)
!2585 = distinct !DILexicalBlock(scope: !1975, file: !80, line: 723, column: 7)
!2586 = !DILocation(line: 723, column: 7, scope: !2585)
!2587 = !DILocation(line: 723, column: 7, scope: !2588)
!2588 = distinct !DILexicalBlock(scope: !2584, file: !80, line: 723, column: 7)
!2589 = !DILocation(line: 723, column: 7, scope: !2590)
!2590 = distinct !DILexicalBlock(scope: !2591, file: !80, line: 723, column: 7)
!2591 = distinct !DILexicalBlock(scope: !2588, file: !80, line: 723, column: 7)
!2592 = !DILocation(line: 723, column: 7, scope: !2591)
!2593 = !DILocation(line: 723, column: 7, scope: !2594)
!2594 = distinct !DILexicalBlock(scope: !2595, file: !80, line: 723, column: 7)
!2595 = distinct !DILexicalBlock(scope: !2588, file: !80, line: 723, column: 7)
!2596 = !DILocation(line: 723, column: 7, scope: !2595)
!2597 = !DILocation(line: 724, column: 7, scope: !1975)
!2598 = !DILocation(line: 724, column: 7, scope: !2599)
!2599 = distinct !DILexicalBlock(scope: !2600, file: !80, line: 724, column: 7)
!2600 = distinct !DILexicalBlock(scope: !1975, file: !80, line: 724, column: 7)
!2601 = !DILocation(line: 724, column: 7, scope: !2600)
!2602 = !DILocation(line: 726, column: 13, scope: !2603)
!2603 = distinct !DILexicalBlock(scope: !1975, file: !80, line: 726, column: 11)
!2604 = !DILocation(line: 726, column: 11, scope: !1975)
!2605 = !DILocation(line: 727, column: 38, scope: !2603)
!2606 = !DILocation(line: 727, column: 9, scope: !2603)
!2607 = !DILocation(line: 728, column: 5, scope: !1975)
!2608 = !DILocation(line: 400, column: 75, scope: !1964)
!2609 = !DILocation(line: 400, column: 3, scope: !1964)
!2610 = distinct !{!2610, !1973, !2611}
!2611 = !DILocation(line: 728, column: 5, scope: !1961)
!2612 = !DILocation(line: 730, column: 7, scope: !2613)
!2613 = distinct !DILexicalBlock(scope: !1821, file: !80, line: 730, column: 7)
!2614 = !DILocation(line: 730, column: 11, scope: !2613)
!2615 = !DILocation(line: 730, column: 16, scope: !2613)
!2616 = !DILocation(line: 730, column: 19, scope: !2613)
!2617 = !DILocation(line: 730, column: 33, scope: !2613)
!2618 = !DILocation(line: 731, column: 7, scope: !2613)
!2619 = !DILocation(line: 731, column: 10, scope: !2613)
!2620 = !DILocation(line: 730, column: 7, scope: !1821)
!2621 = !DILocation(line: 732, column: 5, scope: !2613)
!2622 = !DILocation(line: 738, column: 7, scope: !2623)
!2623 = distinct !DILexicalBlock(scope: !1821, file: !80, line: 738, column: 7)
!2624 = !DILocation(line: 738, column: 21, scope: !2623)
!2625 = !DILocation(line: 738, column: 51, scope: !2623)
!2626 = !DILocation(line: 738, column: 56, scope: !2623)
!2627 = !DILocation(line: 739, column: 7, scope: !2623)
!2628 = !DILocation(line: 739, column: 10, scope: !2623)
!2629 = !DILocation(line: 738, column: 7, scope: !1821)
!2630 = !DILocation(line: 741, column: 11, scope: !2631)
!2631 = distinct !DILexicalBlock(scope: !2632, file: !80, line: 741, column: 11)
!2632 = distinct !DILexicalBlock(scope: !2623, file: !80, line: 740, column: 5)
!2633 = !DILocation(line: 741, column: 11, scope: !2632)
!2634 = !DILocation(line: 742, column: 42, scope: !2631)
!2635 = !DILocation(line: 742, column: 50, scope: !2631)
!2636 = !DILocation(line: 742, column: 67, scope: !2631)
!2637 = !DILocation(line: 742, column: 72, scope: !2631)
!2638 = !DILocation(line: 744, column: 42, scope: !2631)
!2639 = !DILocation(line: 744, column: 49, scope: !2631)
!2640 = !DILocation(line: 745, column: 42, scope: !2631)
!2641 = !DILocation(line: 745, column: 54, scope: !2631)
!2642 = !DILocation(line: 742, column: 16, scope: !2631)
!2643 = !DILocation(line: 742, column: 9, scope: !2631)
!2644 = !DILocation(line: 746, column: 18, scope: !2645)
!2645 = distinct !DILexicalBlock(scope: !2631, file: !80, line: 746, column: 16)
!2646 = !DILocation(line: 746, column: 29, scope: !2645)
!2647 = !DILocation(line: 746, column: 32, scope: !2645)
!2648 = !DILocation(line: 746, column: 16, scope: !2631)
!2649 = !DILocation(line: 749, column: 24, scope: !2650)
!2650 = distinct !DILexicalBlock(scope: !2645, file: !80, line: 747, column: 9)
!2651 = !DILocation(line: 749, column: 22, scope: !2650)
!2652 = !DILocation(line: 750, column: 15, scope: !2650)
!2653 = !DILocation(line: 751, column: 11, scope: !2650)
!2654 = !DILocation(line: 753, column: 5, scope: !2632)
!2655 = !DILocation(line: 755, column: 7, scope: !2656)
!2656 = distinct !DILexicalBlock(scope: !1821, file: !80, line: 755, column: 7)
!2657 = !DILocation(line: 755, column: 20, scope: !2656)
!2658 = !DILocation(line: 755, column: 24, scope: !2656)
!2659 = !DILocation(line: 755, column: 7, scope: !1821)
!2660 = !DILocation(line: 756, column: 5, scope: !2656)
!2661 = !DILocation(line: 756, column: 13, scope: !2662)
!2662 = distinct !DILexicalBlock(scope: !2663, file: !80, line: 756, column: 5)
!2663 = distinct !DILexicalBlock(scope: !2656, file: !80, line: 756, column: 5)
!2664 = !DILocation(line: 756, column: 12, scope: !2662)
!2665 = !DILocation(line: 756, column: 5, scope: !2663)
!2666 = !DILocation(line: 757, column: 7, scope: !2662)
!2667 = !DILocation(line: 757, column: 7, scope: !2668)
!2668 = distinct !DILexicalBlock(scope: !2669, file: !80, line: 757, column: 7)
!2669 = distinct !DILexicalBlock(scope: !2662, file: !80, line: 757, column: 7)
!2670 = !DILocation(line: 757, column: 7, scope: !2669)
!2671 = !DILocation(line: 756, column: 39, scope: !2662)
!2672 = !DILocation(line: 756, column: 5, scope: !2662)
!2673 = distinct !{!2673, !2665, !2674}
!2674 = !DILocation(line: 757, column: 7, scope: !2663)
!2675 = !DILocation(line: 759, column: 7, scope: !2676)
!2676 = distinct !DILexicalBlock(scope: !1821, file: !80, line: 759, column: 7)
!2677 = !DILocation(line: 759, column: 13, scope: !2676)
!2678 = !DILocation(line: 759, column: 11, scope: !2676)
!2679 = !DILocation(line: 759, column: 7, scope: !1821)
!2680 = !DILocation(line: 760, column: 5, scope: !2676)
!2681 = !DILocation(line: 760, column: 12, scope: !2676)
!2682 = !DILocation(line: 760, column: 17, scope: !2676)
!2683 = !DILocation(line: 761, column: 10, scope: !1821)
!2684 = !DILocation(line: 761, column: 3, scope: !1821)
!2685 = !DILabel(scope: !1821, name: "force_outer_quoting_style", file: !80, line: 763)
!2686 = !DILocation(line: 763, column: 2, scope: !1821)
!2687 = !DILocation(line: 766, column: 7, scope: !2688)
!2688 = distinct !DILexicalBlock(scope: !1821, file: !80, line: 766, column: 7)
!2689 = !DILocation(line: 766, column: 21, scope: !2688)
!2690 = !DILocation(line: 766, column: 51, scope: !2688)
!2691 = !DILocation(line: 766, column: 54, scope: !2688)
!2692 = !DILocation(line: 766, column: 7, scope: !1821)
!2693 = !DILocation(line: 767, column: 19, scope: !2688)
!2694 = !DILocation(line: 767, column: 5, scope: !2688)
!2695 = !DILocation(line: 768, column: 36, scope: !1821)
!2696 = !DILocation(line: 768, column: 44, scope: !1821)
!2697 = !DILocation(line: 768, column: 56, scope: !1821)
!2698 = !DILocation(line: 768, column: 61, scope: !1821)
!2699 = !DILocation(line: 769, column: 36, scope: !1821)
!2700 = !DILocation(line: 770, column: 36, scope: !1821)
!2701 = !DILocation(line: 770, column: 42, scope: !1821)
!2702 = !DILocation(line: 771, column: 36, scope: !1821)
!2703 = !DILocation(line: 771, column: 48, scope: !1821)
!2704 = !DILocation(line: 768, column: 10, scope: !1821)
!2705 = !DILocation(line: 768, column: 3, scope: !1821)
!2706 = !DILocation(line: 772, column: 1, scope: !1821)
!2707 = !DILocalVariable(name: "buffer", arg: 1, scope: !2708, file: !80, line: 256, type: !7)
!2708 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !80, file: !80, line: 256, type: !1822, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2709, retainedNodes: !4)
!2709 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !2710, nameTableKind: None)
!2710 = !{!2711, !2713, !2715, !2724, !2726, !2728, !2735, !2737}
!2711 = !DIGlobalVariableExpression(var: !2712, expr: !DIExpression())
!2712 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2709, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!2713 = !DIGlobalVariableExpression(var: !2714, expr: !DIExpression())
!2714 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2709, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!2715 = !DIGlobalVariableExpression(var: !2716, expr: !DIExpression())
!2716 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2709, file: !80, line: 1052, type: !2717, isLocal: false, isDefinition: true)
!2717 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !2718)
!2718 = !{!2719, !2720, !2721, !2722, !2723}
!2719 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2717, file: !80, line: 68, baseType: !57, size: 32)
!2720 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2717, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!2721 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2717, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!2722 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2717, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!2723 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2717, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!2724 = !DIGlobalVariableExpression(var: !2725, expr: !DIExpression())
!2725 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2709, file: !80, line: 116, type: !2717, isLocal: true, isDefinition: true)
!2726 = !DIGlobalVariableExpression(var: !2727, expr: !DIExpression())
!2727 = distinct !DIGlobalVariable(name: "slot0", scope: !2709, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!2728 = !DIGlobalVariableExpression(var: !2729, expr: !DIExpression())
!2729 = distinct !DIGlobalVariable(name: "slotvec", scope: !2709, file: !80, line: 845, type: !2730, isLocal: true, isDefinition: true)
!2730 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2731, size: 64)
!2731 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !2732)
!2732 = !{!2733, !2734}
!2733 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2731, file: !80, line: 836, baseType: !74, size: 64)
!2734 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2731, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!2735 = !DIGlobalVariableExpression(var: !2736, expr: !DIExpression())
!2736 = distinct !DIGlobalVariable(name: "nslots", scope: !2709, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!2737 = !DIGlobalVariableExpression(var: !2738, expr: !DIExpression())
!2738 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2709, file: !80, line: 844, type: !2731, isLocal: true, isDefinition: true)
!2739 = !DILocalVariable(name: "buffersize", arg: 2, scope: !2708, file: !80, line: 256, type: !74)
!2740 = !DILocalVariable(name: "arg", arg: 3, scope: !2708, file: !80, line: 257, type: !16)
!2741 = !DILocalVariable(name: "argsize", arg: 4, scope: !2708, file: !80, line: 257, type: !74)
!2742 = !DILocalVariable(name: "quoting_style", arg: 5, scope: !2708, file: !80, line: 258, type: !57)
!2743 = !DILocalVariable(name: "flags", arg: 6, scope: !2708, file: !80, line: 258, type: !19)
!2744 = !DILocalVariable(name: "quote_these_too", arg: 7, scope: !2708, file: !80, line: 259, type: !1824)
!2745 = !DILocalVariable(name: "left_quote", arg: 8, scope: !2708, file: !80, line: 260, type: !16)
!2746 = !DILocalVariable(name: "right_quote", arg: 9, scope: !2708, file: !80, line: 261, type: !16)
!2747 = !DILocalVariable(name: "i", scope: !2708, file: !80, line: 263, type: !74)
!2748 = !DILocalVariable(name: "len", scope: !2708, file: !80, line: 264, type: !74)
!2749 = !DILocalVariable(name: "orig_buffersize", scope: !2708, file: !80, line: 265, type: !74)
!2750 = !DILocalVariable(name: "quote_string", scope: !2708, file: !80, line: 266, type: !16)
!2751 = !DILocalVariable(name: "quote_string_len", scope: !2708, file: !80, line: 267, type: !74)
!2752 = !DILocalVariable(name: "backslash_escapes", scope: !2708, file: !80, line: 268, type: !38)
!2753 = !DILocalVariable(name: "unibyte_locale", scope: !2708, file: !80, line: 269, type: !38)
!2754 = !DILocalVariable(name: "elide_outer_quotes", scope: !2708, file: !80, line: 270, type: !38)
!2755 = !DILocalVariable(name: "pending_shell_escape_end", scope: !2708, file: !80, line: 271, type: !38)
!2756 = !DILocalVariable(name: "encountered_single_quote", scope: !2708, file: !80, line: 272, type: !38)
!2757 = !DILocalVariable(name: "all_c_and_shell_quote_compat", scope: !2708, file: !80, line: 273, type: !38)
!2758 = !DILocalVariable(name: "escaping", scope: !2759, file: !80, line: 405, type: !38)
!2759 = distinct !DILexicalBlock(scope: !2760, file: !80, line: 401, column: 5)
!2760 = distinct !DILexicalBlock(scope: !2761, file: !80, line: 400, column: 3)
!2761 = distinct !DILexicalBlock(scope: !2762, file: !80, line: 400, column: 3)
!2762 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !80, file: !80, line: 256, type: !1822, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2763, retainedNodes: !4)
!2763 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !2764, nameTableKind: None)
!2764 = !{!2765, !2767, !2769, !2778, !2780, !2782, !2789, !2791}
!2765 = !DIGlobalVariableExpression(var: !2766, expr: !DIExpression())
!2766 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2763, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!2767 = !DIGlobalVariableExpression(var: !2768, expr: !DIExpression())
!2768 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2763, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!2769 = !DIGlobalVariableExpression(var: !2770, expr: !DIExpression())
!2770 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2763, file: !80, line: 1052, type: !2771, isLocal: false, isDefinition: true)
!2771 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !2772)
!2772 = !{!2773, !2774, !2775, !2776, !2777}
!2773 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2771, file: !80, line: 68, baseType: !57, size: 32)
!2774 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2771, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!2775 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2771, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!2776 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2771, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!2777 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2771, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!2778 = !DIGlobalVariableExpression(var: !2779, expr: !DIExpression())
!2779 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2763, file: !80, line: 116, type: !2771, isLocal: true, isDefinition: true)
!2780 = !DIGlobalVariableExpression(var: !2781, expr: !DIExpression())
!2781 = distinct !DIGlobalVariable(name: "slot0", scope: !2763, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!2782 = !DIGlobalVariableExpression(var: !2783, expr: !DIExpression())
!2783 = distinct !DIGlobalVariable(name: "slotvec", scope: !2763, file: !80, line: 845, type: !2784, isLocal: true, isDefinition: true)
!2784 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2785, size: 64)
!2785 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !2786)
!2786 = !{!2787, !2788}
!2787 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2785, file: !80, line: 836, baseType: !74, size: 64)
!2788 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2785, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!2789 = !DIGlobalVariableExpression(var: !2790, expr: !DIExpression())
!2790 = distinct !DIGlobalVariable(name: "nslots", scope: !2763, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!2791 = !DIGlobalVariableExpression(var: !2792, expr: !DIExpression())
!2792 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2763, file: !80, line: 844, type: !2785, isLocal: true, isDefinition: true)
!2793 = !DILocalVariable(name: "c_and_shell_quote_compat", scope: !2759, file: !80, line: 406, type: !38)
!2794 = distinct !DISubprogram(name: "gettext_quote", scope: !80, file: !80, line: 207, type: !2795, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !4)
!2795 = !DISubroutineType(types: !2796)
!2796 = !{!16, !16, !57}
!2797 = !DILocalVariable(name: "msgid", arg: 1, scope: !2794, file: !80, line: 207, type: !16)
!2798 = !DILocation(line: 207, column: 28, scope: !2794)
!2799 = !DILocalVariable(name: "s", arg: 2, scope: !2794, file: !80, line: 207, type: !57)
!2800 = !DILocation(line: 207, column: 54, scope: !2794)
!2801 = !DILocalVariable(name: "translation", scope: !2794, file: !80, line: 209, type: !16)
!2802 = !DILocation(line: 209, column: 15, scope: !2794)
!2803 = !DILocation(line: 209, column: 29, scope: !2794)
!2804 = !DILocalVariable(name: "locale_code", scope: !2794, file: !80, line: 210, type: !16)
!2805 = !DILocation(line: 210, column: 15, scope: !2794)
!2806 = !DILocation(line: 212, column: 7, scope: !2807)
!2807 = distinct !DILexicalBlock(scope: !2794, file: !80, line: 212, column: 7)
!2808 = !DILocation(line: 212, column: 22, scope: !2807)
!2809 = !DILocation(line: 212, column: 19, scope: !2807)
!2810 = !DILocation(line: 212, column: 7, scope: !2794)
!2811 = !DILocation(line: 213, column: 12, scope: !2807)
!2812 = !DILocation(line: 213, column: 5, scope: !2807)
!2813 = !DILocation(line: 233, column: 17, scope: !2794)
!2814 = !DILocation(line: 233, column: 15, scope: !2794)
!2815 = !DILocation(line: 234, column: 7, scope: !2816)
!2816 = distinct !DILexicalBlock(scope: !2794, file: !80, line: 234, column: 7)
!2817 = !DILocation(line: 234, column: 7, scope: !2794)
!2818 = !DILocation(line: 235, column: 12, scope: !2816)
!2819 = !DILocation(line: 235, column: 21, scope: !2816)
!2820 = !DILocation(line: 235, column: 5, scope: !2816)
!2821 = !DILocation(line: 236, column: 7, scope: !2822)
!2822 = distinct !DILexicalBlock(scope: !2794, file: !80, line: 236, column: 7)
!2823 = !DILocation(line: 236, column: 7, scope: !2794)
!2824 = !DILocation(line: 237, column: 12, scope: !2822)
!2825 = !DILocation(line: 237, column: 21, scope: !2822)
!2826 = !DILocation(line: 237, column: 5, scope: !2822)
!2827 = !DILocation(line: 239, column: 11, scope: !2794)
!2828 = !DILocation(line: 239, column: 13, scope: !2794)
!2829 = !DILocation(line: 239, column: 3, scope: !2794)
!2830 = !DILocation(line: 240, column: 1, scope: !2794)
!2831 = !DILocalVariable(name: "msgid", arg: 1, scope: !2832, file: !80, line: 207, type: !16)
!2832 = distinct !DISubprogram(name: "gettext_quote", scope: !80, file: !80, line: 207, type: !2795, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2833, retainedNodes: !4)
!2833 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !2834, nameTableKind: None)
!2834 = !{!2835, !2837, !2839, !2848, !2850, !2852, !2859, !2861}
!2835 = !DIGlobalVariableExpression(var: !2836, expr: !DIExpression())
!2836 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2833, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!2837 = !DIGlobalVariableExpression(var: !2838, expr: !DIExpression())
!2838 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2833, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!2839 = !DIGlobalVariableExpression(var: !2840, expr: !DIExpression())
!2840 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2833, file: !80, line: 1052, type: !2841, isLocal: false, isDefinition: true)
!2841 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !2842)
!2842 = !{!2843, !2844, !2845, !2846, !2847}
!2843 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2841, file: !80, line: 68, baseType: !57, size: 32)
!2844 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2841, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!2845 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2841, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!2846 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2841, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!2847 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2841, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!2848 = !DIGlobalVariableExpression(var: !2849, expr: !DIExpression())
!2849 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2833, file: !80, line: 116, type: !2841, isLocal: true, isDefinition: true)
!2850 = !DIGlobalVariableExpression(var: !2851, expr: !DIExpression())
!2851 = distinct !DIGlobalVariable(name: "slot0", scope: !2833, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!2852 = !DIGlobalVariableExpression(var: !2853, expr: !DIExpression())
!2853 = distinct !DIGlobalVariable(name: "slotvec", scope: !2833, file: !80, line: 845, type: !2854, isLocal: true, isDefinition: true)
!2854 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2855, size: 64)
!2855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !2856)
!2856 = !{!2857, !2858}
!2857 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2855, file: !80, line: 836, baseType: !74, size: 64)
!2858 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2855, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!2859 = !DIGlobalVariableExpression(var: !2860, expr: !DIExpression())
!2860 = distinct !DIGlobalVariable(name: "nslots", scope: !2833, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!2861 = !DIGlobalVariableExpression(var: !2862, expr: !DIExpression())
!2862 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2833, file: !80, line: 844, type: !2855, isLocal: true, isDefinition: true)
!2863 = !DILocalVariable(name: "s", arg: 2, scope: !2832, file: !80, line: 207, type: !57)
!2864 = !DILocalVariable(name: "translation", scope: !2832, file: !80, line: 209, type: !16)
!2865 = !DILocalVariable(name: "locale_code", scope: !2832, file: !80, line: 210, type: !16)
!2866 = distinct !DISubprogram(name: "quotearg_style", scope: !80, file: !80, line: 970, type: !2867, scopeLine: 971, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !4)
!2867 = !DISubroutineType(types: !2868)
!2868 = !{!7, !57, !16}
!2869 = !DILocalVariable(name: "s", arg: 1, scope: !2866, file: !80, line: 970, type: !57)
!2870 = !DILocation(line: 970, column: 36, scope: !2866)
!2871 = !DILocalVariable(name: "arg", arg: 2, scope: !2866, file: !80, line: 970, type: !16)
!2872 = !DILocation(line: 970, column: 51, scope: !2866)
!2873 = !DILocation(line: 972, column: 31, scope: !2866)
!2874 = !DILocation(line: 972, column: 34, scope: !2866)
!2875 = !DILocation(line: 972, column: 10, scope: !2866)
!2876 = !DILocation(line: 972, column: 3, scope: !2866)
!2877 = !DILocalVariable(name: "s", arg: 1, scope: !2878, file: !80, line: 970, type: !57)
!2878 = distinct !DISubprogram(name: "quotearg_style", scope: !80, file: !80, line: 970, type: !2867, scopeLine: 971, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2879, retainedNodes: !4)
!2879 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !2880, nameTableKind: None)
!2880 = !{!2881, !2883, !2885, !2894, !2896, !2898, !2905, !2907}
!2881 = !DIGlobalVariableExpression(var: !2882, expr: !DIExpression())
!2882 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2879, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!2883 = !DIGlobalVariableExpression(var: !2884, expr: !DIExpression())
!2884 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2879, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!2885 = !DIGlobalVariableExpression(var: !2886, expr: !DIExpression())
!2886 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2879, file: !80, line: 1052, type: !2887, isLocal: false, isDefinition: true)
!2887 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !2888)
!2888 = !{!2889, !2890, !2891, !2892, !2893}
!2889 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2887, file: !80, line: 68, baseType: !57, size: 32)
!2890 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2887, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!2891 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2887, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!2892 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2887, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!2893 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2887, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!2894 = !DIGlobalVariableExpression(var: !2895, expr: !DIExpression())
!2895 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2879, file: !80, line: 116, type: !2887, isLocal: true, isDefinition: true)
!2896 = !DIGlobalVariableExpression(var: !2897, expr: !DIExpression())
!2897 = distinct !DIGlobalVariable(name: "slot0", scope: !2879, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!2898 = !DIGlobalVariableExpression(var: !2899, expr: !DIExpression())
!2899 = distinct !DIGlobalVariable(name: "slotvec", scope: !2879, file: !80, line: 845, type: !2900, isLocal: true, isDefinition: true)
!2900 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2901, size: 64)
!2901 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !2902)
!2902 = !{!2903, !2904}
!2903 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2901, file: !80, line: 836, baseType: !74, size: 64)
!2904 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2901, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!2905 = !DIGlobalVariableExpression(var: !2906, expr: !DIExpression())
!2906 = distinct !DIGlobalVariable(name: "nslots", scope: !2879, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!2907 = !DIGlobalVariableExpression(var: !2908, expr: !DIExpression())
!2908 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2879, file: !80, line: 844, type: !2901, isLocal: true, isDefinition: true)
!2909 = !DILocalVariable(name: "arg", arg: 2, scope: !2878, file: !80, line: 970, type: !16)
!2910 = distinct !DISubprogram(name: "quotearg_char_mem", scope: !80, file: !80, line: 982, type: !2911, scopeLine: 983, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !4)
!2911 = !DISubroutineType(types: !2912)
!2912 = !{!7, !16, !74, !8}
!2913 = !DILocalVariable(name: "arg", arg: 1, scope: !2910, file: !80, line: 982, type: !16)
!2914 = !DILocation(line: 982, column: 32, scope: !2910)
!2915 = !DILocalVariable(name: "argsize", arg: 2, scope: !2910, file: !80, line: 982, type: !74)
!2916 = !DILocation(line: 982, column: 44, scope: !2910)
!2917 = !DILocalVariable(name: "ch", arg: 3, scope: !2910, file: !80, line: 982, type: !8)
!2918 = !DILocation(line: 982, column: 58, scope: !2910)
!2919 = !DILocalVariable(name: "options", scope: !2910, file: !80, line: 984, type: !93)
!2920 = !DILocation(line: 984, column: 26, scope: !2910)
!2921 = !DILocation(line: 985, column: 13, scope: !2910)
!2922 = !DILocation(line: 986, column: 31, scope: !2910)
!2923 = !DILocation(line: 986, column: 3, scope: !2910)
!2924 = !DILocation(line: 987, column: 33, scope: !2910)
!2925 = !DILocation(line: 987, column: 38, scope: !2910)
!2926 = !DILocation(line: 987, column: 10, scope: !2910)
!2927 = !DILocation(line: 987, column: 3, scope: !2910)
!2928 = !DILocalVariable(name: "arg", arg: 1, scope: !2929, file: !80, line: 982, type: !16)
!2929 = distinct !DISubprogram(name: "quotearg_char_mem", scope: !80, file: !80, line: 982, type: !2911, scopeLine: 983, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2930, retainedNodes: !4)
!2930 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !2931, nameTableKind: None)
!2931 = !{!2932, !2934, !2936, !2945, !2947, !2949, !2956, !2958}
!2932 = !DIGlobalVariableExpression(var: !2933, expr: !DIExpression())
!2933 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2930, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!2934 = !DIGlobalVariableExpression(var: !2935, expr: !DIExpression())
!2935 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2930, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!2936 = !DIGlobalVariableExpression(var: !2937, expr: !DIExpression())
!2937 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2930, file: !80, line: 1052, type: !2938, isLocal: false, isDefinition: true)
!2938 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !2939)
!2939 = !{!2940, !2941, !2942, !2943, !2944}
!2940 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2938, file: !80, line: 68, baseType: !57, size: 32)
!2941 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2938, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!2942 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2938, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!2943 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2938, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!2944 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2938, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!2945 = !DIGlobalVariableExpression(var: !2946, expr: !DIExpression())
!2946 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2930, file: !80, line: 116, type: !2938, isLocal: true, isDefinition: true)
!2947 = !DIGlobalVariableExpression(var: !2948, expr: !DIExpression())
!2948 = distinct !DIGlobalVariable(name: "slot0", scope: !2930, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!2949 = !DIGlobalVariableExpression(var: !2950, expr: !DIExpression())
!2950 = distinct !DIGlobalVariable(name: "slotvec", scope: !2930, file: !80, line: 845, type: !2951, isLocal: true, isDefinition: true)
!2951 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2952, size: 64)
!2952 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !2953)
!2953 = !{!2954, !2955}
!2954 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2952, file: !80, line: 836, baseType: !74, size: 64)
!2955 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2952, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!2956 = !DIGlobalVariableExpression(var: !2957, expr: !DIExpression())
!2957 = distinct !DIGlobalVariable(name: "nslots", scope: !2930, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!2958 = !DIGlobalVariableExpression(var: !2959, expr: !DIExpression())
!2959 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2930, file: !80, line: 844, type: !2952, isLocal: true, isDefinition: true)
!2960 = !DILocalVariable(name: "argsize", arg: 2, scope: !2929, file: !80, line: 982, type: !74)
!2961 = !DILocalVariable(name: "ch", arg: 3, scope: !2929, file: !80, line: 982, type: !8)
!2962 = !DILocalVariable(name: "options", scope: !2929, file: !80, line: 984, type: !2938)
!2963 = distinct !DISubprogram(name: "quotearg_char", scope: !80, file: !80, line: 991, type: !2964, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !4)
!2964 = !DISubroutineType(types: !2965)
!2965 = !{!7, !16, !8}
!2966 = !DILocalVariable(name: "arg", arg: 1, scope: !2963, file: !80, line: 991, type: !16)
!2967 = !DILocation(line: 991, column: 28, scope: !2963)
!2968 = !DILocalVariable(name: "ch", arg: 2, scope: !2963, file: !80, line: 991, type: !8)
!2969 = !DILocation(line: 991, column: 38, scope: !2963)
!2970 = !DILocation(line: 993, column: 29, scope: !2963)
!2971 = !DILocation(line: 993, column: 44, scope: !2963)
!2972 = !DILocation(line: 993, column: 10, scope: !2963)
!2973 = !DILocation(line: 993, column: 3, scope: !2963)
!2974 = !DILocalVariable(name: "arg", arg: 1, scope: !2975, file: !80, line: 991, type: !16)
!2975 = distinct !DISubprogram(name: "quotearg_char", scope: !80, file: !80, line: 991, type: !2964, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2976, retainedNodes: !4)
!2976 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !2977, nameTableKind: None)
!2977 = !{!2978, !2980, !2982, !2991, !2993, !2995, !3002, !3004}
!2978 = !DIGlobalVariableExpression(var: !2979, expr: !DIExpression())
!2979 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2976, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!2980 = !DIGlobalVariableExpression(var: !2981, expr: !DIExpression())
!2981 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2976, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!2982 = !DIGlobalVariableExpression(var: !2983, expr: !DIExpression())
!2983 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2976, file: !80, line: 1052, type: !2984, isLocal: false, isDefinition: true)
!2984 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !2985)
!2985 = !{!2986, !2987, !2988, !2989, !2990}
!2986 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2984, file: !80, line: 68, baseType: !57, size: 32)
!2987 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2984, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!2988 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2984, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!2989 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2984, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!2990 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2984, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!2991 = !DIGlobalVariableExpression(var: !2992, expr: !DIExpression())
!2992 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2976, file: !80, line: 116, type: !2984, isLocal: true, isDefinition: true)
!2993 = !DIGlobalVariableExpression(var: !2994, expr: !DIExpression())
!2994 = distinct !DIGlobalVariable(name: "slot0", scope: !2976, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!2995 = !DIGlobalVariableExpression(var: !2996, expr: !DIExpression())
!2996 = distinct !DIGlobalVariable(name: "slotvec", scope: !2976, file: !80, line: 845, type: !2997, isLocal: true, isDefinition: true)
!2997 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2998, size: 64)
!2998 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !2999)
!2999 = !{!3000, !3001}
!3000 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2998, file: !80, line: 836, baseType: !74, size: 64)
!3001 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2998, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!3002 = !DIGlobalVariableExpression(var: !3003, expr: !DIExpression())
!3003 = distinct !DIGlobalVariable(name: "nslots", scope: !2976, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!3004 = !DIGlobalVariableExpression(var: !3005, expr: !DIExpression())
!3005 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2976, file: !80, line: 844, type: !2998, isLocal: true, isDefinition: true)
!3006 = !DILocalVariable(name: "ch", arg: 2, scope: !2975, file: !80, line: 991, type: !8)
!3007 = distinct !DISubprogram(name: "quotearg_colon", scope: !80, file: !80, line: 997, type: !3008, scopeLine: 998, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !4)
!3008 = !DISubroutineType(types: !3009)
!3009 = !{!7, !16}
!3010 = !DILocalVariable(name: "arg", arg: 1, scope: !3007, file: !80, line: 997, type: !16)
!3011 = !DILocation(line: 997, column: 29, scope: !3007)
!3012 = !DILocation(line: 999, column: 25, scope: !3007)
!3013 = !DILocation(line: 999, column: 10, scope: !3007)
!3014 = !DILocation(line: 999, column: 3, scope: !3007)
!3015 = !DILocalVariable(name: "arg", arg: 1, scope: !3016, file: !80, line: 997, type: !16)
!3016 = distinct !DISubprogram(name: "quotearg_colon", scope: !80, file: !80, line: 997, type: !3008, scopeLine: 998, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3017, retainedNodes: !4)
!3017 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !3018, nameTableKind: None)
!3018 = !{!3019, !3021, !3023, !3032, !3034, !3036, !3043, !3045}
!3019 = !DIGlobalVariableExpression(var: !3020, expr: !DIExpression())
!3020 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !3017, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!3021 = !DIGlobalVariableExpression(var: !3022, expr: !DIExpression())
!3022 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !3017, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!3023 = !DIGlobalVariableExpression(var: !3024, expr: !DIExpression())
!3024 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !3017, file: !80, line: 1052, type: !3025, isLocal: false, isDefinition: true)
!3025 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !3026)
!3026 = !{!3027, !3028, !3029, !3030, !3031}
!3027 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !3025, file: !80, line: 68, baseType: !57, size: 32)
!3028 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3025, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!3029 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !3025, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!3030 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !3025, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!3031 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !3025, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!3032 = !DIGlobalVariableExpression(var: !3033, expr: !DIExpression())
!3033 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !3017, file: !80, line: 116, type: !3025, isLocal: true, isDefinition: true)
!3034 = !DIGlobalVariableExpression(var: !3035, expr: !DIExpression())
!3035 = distinct !DIGlobalVariable(name: "slot0", scope: !3017, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!3036 = !DIGlobalVariableExpression(var: !3037, expr: !DIExpression())
!3037 = distinct !DIGlobalVariable(name: "slotvec", scope: !3017, file: !80, line: 845, type: !3038, isLocal: true, isDefinition: true)
!3038 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3039, size: 64)
!3039 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !3040)
!3040 = !{!3041, !3042}
!3041 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3039, file: !80, line: 836, baseType: !74, size: 64)
!3042 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !3039, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!3043 = !DIGlobalVariableExpression(var: !3044, expr: !DIExpression())
!3044 = distinct !DIGlobalVariable(name: "nslots", scope: !3017, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!3045 = !DIGlobalVariableExpression(var: !3046, expr: !DIExpression())
!3046 = distinct !DIGlobalVariable(name: "slotvec0", scope: !3017, file: !80, line: 844, type: !3039, isLocal: true, isDefinition: true)
!3047 = distinct !DISubprogram(name: "quote_n_mem", scope: !80, file: !80, line: 1061, type: !3048, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !4)
!3048 = !DISubroutineType(types: !3049)
!3049 = !{!16, !19, !16, !74}
!3050 = !DILocalVariable(name: "n", arg: 1, scope: !3047, file: !80, line: 1061, type: !19)
!3051 = !DILocation(line: 1061, column: 18, scope: !3047)
!3052 = !DILocalVariable(name: "arg", arg: 2, scope: !3047, file: !80, line: 1061, type: !16)
!3053 = !DILocation(line: 1061, column: 33, scope: !3047)
!3054 = !DILocalVariable(name: "argsize", arg: 3, scope: !3047, file: !80, line: 1061, type: !74)
!3055 = !DILocation(line: 1061, column: 45, scope: !3047)
!3056 = !DILocation(line: 1063, column: 30, scope: !3047)
!3057 = !DILocation(line: 1063, column: 33, scope: !3047)
!3058 = !DILocation(line: 1063, column: 38, scope: !3047)
!3059 = !DILocation(line: 1063, column: 10, scope: !3047)
!3060 = !DILocation(line: 1063, column: 3, scope: !3047)
!3061 = !DILocalVariable(name: "n", arg: 1, scope: !3062, file: !80, line: 1061, type: !19)
!3062 = distinct !DISubprogram(name: "quote_n_mem", scope: !80, file: !80, line: 1061, type: !3048, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3063, retainedNodes: !4)
!3063 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !3064, nameTableKind: None)
!3064 = !{!3065, !3067, !3069, !3078, !3080, !3082, !3089, !3091}
!3065 = !DIGlobalVariableExpression(var: !3066, expr: !DIExpression())
!3066 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !3063, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!3067 = !DIGlobalVariableExpression(var: !3068, expr: !DIExpression())
!3068 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !3063, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!3069 = !DIGlobalVariableExpression(var: !3070, expr: !DIExpression())
!3070 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !3063, file: !80, line: 1052, type: !3071, isLocal: false, isDefinition: true)
!3071 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !3072)
!3072 = !{!3073, !3074, !3075, !3076, !3077}
!3073 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !3071, file: !80, line: 68, baseType: !57, size: 32)
!3074 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3071, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!3075 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !3071, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!3076 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !3071, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!3077 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !3071, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!3078 = !DIGlobalVariableExpression(var: !3079, expr: !DIExpression())
!3079 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !3063, file: !80, line: 116, type: !3071, isLocal: true, isDefinition: true)
!3080 = !DIGlobalVariableExpression(var: !3081, expr: !DIExpression())
!3081 = distinct !DIGlobalVariable(name: "slot0", scope: !3063, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!3082 = !DIGlobalVariableExpression(var: !3083, expr: !DIExpression())
!3083 = distinct !DIGlobalVariable(name: "slotvec", scope: !3063, file: !80, line: 845, type: !3084, isLocal: true, isDefinition: true)
!3084 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3085, size: 64)
!3085 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !3086)
!3086 = !{!3087, !3088}
!3087 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3085, file: !80, line: 836, baseType: !74, size: 64)
!3088 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !3085, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!3089 = !DIGlobalVariableExpression(var: !3090, expr: !DIExpression())
!3090 = distinct !DIGlobalVariable(name: "nslots", scope: !3063, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!3091 = !DIGlobalVariableExpression(var: !3092, expr: !DIExpression())
!3092 = distinct !DIGlobalVariable(name: "slotvec0", scope: !3063, file: !80, line: 844, type: !3085, isLocal: true, isDefinition: true)
!3093 = !DILocalVariable(name: "arg", arg: 2, scope: !3062, file: !80, line: 1061, type: !16)
!3094 = !DILocalVariable(name: "argsize", arg: 3, scope: !3062, file: !80, line: 1061, type: !74)
!3095 = distinct !DISubprogram(name: "quote_n", scope: !80, file: !80, line: 1073, type: !3096, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !4)
!3096 = !DISubroutineType(types: !3097)
!3097 = !{!16, !19, !16}
!3098 = !DILocalVariable(name: "n", arg: 1, scope: !3095, file: !80, line: 1073, type: !19)
!3099 = !DILocation(line: 1073, column: 14, scope: !3095)
!3100 = !DILocalVariable(name: "arg", arg: 2, scope: !3095, file: !80, line: 1073, type: !16)
!3101 = !DILocation(line: 1073, column: 29, scope: !3095)
!3102 = !DILocation(line: 1075, column: 23, scope: !3095)
!3103 = !DILocation(line: 1075, column: 26, scope: !3095)
!3104 = !DILocation(line: 1075, column: 10, scope: !3095)
!3105 = !DILocation(line: 1075, column: 3, scope: !3095)
!3106 = !DILocalVariable(name: "n", arg: 1, scope: !3107, file: !80, line: 1073, type: !19)
!3107 = distinct !DISubprogram(name: "quote_n", scope: !80, file: !80, line: 1073, type: !3096, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3108, retainedNodes: !4)
!3108 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !3109, nameTableKind: None)
!3109 = !{!3110, !3112, !3114, !3123, !3125, !3127, !3134, !3136}
!3110 = !DIGlobalVariableExpression(var: !3111, expr: !DIExpression())
!3111 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !3108, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!3112 = !DIGlobalVariableExpression(var: !3113, expr: !DIExpression())
!3113 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !3108, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!3114 = !DIGlobalVariableExpression(var: !3115, expr: !DIExpression())
!3115 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !3108, file: !80, line: 1052, type: !3116, isLocal: false, isDefinition: true)
!3116 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !3117)
!3117 = !{!3118, !3119, !3120, !3121, !3122}
!3118 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !3116, file: !80, line: 68, baseType: !57, size: 32)
!3119 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3116, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!3120 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !3116, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!3121 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !3116, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!3122 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !3116, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!3123 = !DIGlobalVariableExpression(var: !3124, expr: !DIExpression())
!3124 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !3108, file: !80, line: 116, type: !3116, isLocal: true, isDefinition: true)
!3125 = !DIGlobalVariableExpression(var: !3126, expr: !DIExpression())
!3126 = distinct !DIGlobalVariable(name: "slot0", scope: !3108, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!3127 = !DIGlobalVariableExpression(var: !3128, expr: !DIExpression())
!3128 = distinct !DIGlobalVariable(name: "slotvec", scope: !3108, file: !80, line: 845, type: !3129, isLocal: true, isDefinition: true)
!3129 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3130, size: 64)
!3130 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !3131)
!3131 = !{!3132, !3133}
!3132 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3130, file: !80, line: 836, baseType: !74, size: 64)
!3133 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !3130, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!3134 = !DIGlobalVariableExpression(var: !3135, expr: !DIExpression())
!3135 = distinct !DIGlobalVariable(name: "nslots", scope: !3108, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!3136 = !DIGlobalVariableExpression(var: !3137, expr: !DIExpression())
!3137 = distinct !DIGlobalVariable(name: "slotvec0", scope: !3108, file: !80, line: 844, type: !3130, isLocal: true, isDefinition: true)
!3138 = !DILocalVariable(name: "arg", arg: 2, scope: !3107, file: !80, line: 1073, type: !16)
!3139 = distinct !DISubprogram(name: "quote", scope: !80, file: !80, line: 1079, type: !3140, scopeLine: 1080, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !4)
!3140 = !DISubroutineType(types: !3141)
!3141 = !{!16, !16}
!3142 = !DILocalVariable(name: "arg", arg: 1, scope: !3139, file: !80, line: 1079, type: !16)
!3143 = !DILocation(line: 1079, column: 20, scope: !3139)
!3144 = !DILocation(line: 1081, column: 22, scope: !3139)
!3145 = !DILocation(line: 1081, column: 10, scope: !3139)
!3146 = !DILocation(line: 1081, column: 3, scope: !3139)
!3147 = !DILocalVariable(name: "arg", arg: 1, scope: !3148, file: !80, line: 1079, type: !16)
!3148 = distinct !DISubprogram(name: "quote", scope: !80, file: !80, line: 1079, type: !3140, scopeLine: 1080, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3149, retainedNodes: !4)
!3149 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !3150, nameTableKind: None)
!3150 = !{!3151, !3153, !3155, !3164, !3166, !3168, !3175, !3177}
!3151 = !DIGlobalVariableExpression(var: !3152, expr: !DIExpression())
!3152 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !3149, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!3153 = !DIGlobalVariableExpression(var: !3154, expr: !DIExpression())
!3154 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !3149, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!3155 = !DIGlobalVariableExpression(var: !3156, expr: !DIExpression())
!3156 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !3149, file: !80, line: 1052, type: !3157, isLocal: false, isDefinition: true)
!3157 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !3158)
!3158 = !{!3159, !3160, !3161, !3162, !3163}
!3159 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !3157, file: !80, line: 68, baseType: !57, size: 32)
!3160 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3157, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!3161 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !3157, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!3162 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !3157, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!3163 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !3157, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!3164 = !DIGlobalVariableExpression(var: !3165, expr: !DIExpression())
!3165 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !3149, file: !80, line: 116, type: !3157, isLocal: true, isDefinition: true)
!3166 = !DIGlobalVariableExpression(var: !3167, expr: !DIExpression())
!3167 = distinct !DIGlobalVariable(name: "slot0", scope: !3149, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!3168 = !DIGlobalVariableExpression(var: !3169, expr: !DIExpression())
!3169 = distinct !DIGlobalVariable(name: "slotvec", scope: !3149, file: !80, line: 845, type: !3170, isLocal: true, isDefinition: true)
!3170 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3171, size: 64)
!3171 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !3172)
!3172 = !{!3173, !3174}
!3173 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3171, file: !80, line: 836, baseType: !74, size: 64)
!3174 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !3171, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!3175 = !DIGlobalVariableExpression(var: !3176, expr: !DIExpression())
!3176 = distinct !DIGlobalVariable(name: "nslots", scope: !3149, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!3177 = !DIGlobalVariableExpression(var: !3178, expr: !DIExpression())
!3178 = distinct !DIGlobalVariable(name: "slotvec0", scope: !3149, file: !80, line: 844, type: !3171, isLocal: true, isDefinition: true)
!3179 = distinct !DISubprogram(name: "get_root_dev_ino", scope: !3180, file: !3180, line: 29, type: !3181, scopeLine: 30, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !128, retainedNodes: !4)
!3180 = !DIFile(filename: "lib/root-dev-ino.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3181 = !DISubroutineType(types: !3182)
!3182 = !{!3183, !3183}
!3183 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3184, size: 64)
!3184 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dev_ino", file: !617, line: 7, size: 128, elements: !3185)
!3185 = !{!3186, !3187}
!3186 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !3184, file: !617, line: 9, baseType: !620, size: 64)
!3187 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !3184, file: !617, line: 10, baseType: !623, size: 64, offset: 64)
!3188 = !DILocalVariable(name: "root_d_i", arg: 1, scope: !3179, file: !3180, line: 29, type: !3183)
!3189 = !DILocation(line: 29, column: 35, scope: !3179)
!3190 = !DILocalVariable(name: "statbuf", scope: !3179, file: !3180, line: 31, type: !3191)
!3191 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !429, line: 46, size: 1152, elements: !3192)
!3192 = !{!3193, !3194, !3195, !3196, !3197, !3198, !3199, !3200, !3201, !3202, !3203, !3204, !3209, !3210, !3211}
!3193 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !3191, file: !429, line: 48, baseType: !432, size: 64)
!3194 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !3191, file: !429, line: 53, baseType: !435, size: 64, offset: 64)
!3195 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !3191, file: !429, line: 61, baseType: !437, size: 64, offset: 128)
!3196 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !3191, file: !429, line: 62, baseType: !439, size: 32, offset: 192)
!3197 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !3191, file: !429, line: 64, baseType: !441, size: 32, offset: 224)
!3198 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !3191, file: !429, line: 65, baseType: !443, size: 32, offset: 256)
!3199 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !3191, file: !429, line: 67, baseType: !19, size: 32, offset: 288)
!3200 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !3191, file: !429, line: 69, baseType: !432, size: 64, offset: 320)
!3201 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !3191, file: !429, line: 74, baseType: !447, size: 64, offset: 384)
!3202 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !3191, file: !429, line: 78, baseType: !450, size: 64, offset: 448)
!3203 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !3191, file: !429, line: 80, baseType: !452, size: 64, offset: 512)
!3204 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !3191, file: !429, line: 91, baseType: !3205, size: 128, offset: 576)
!3205 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !455, line: 10, size: 128, elements: !3206)
!3206 = !{!3207, !3208}
!3207 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !3205, file: !455, line: 12, baseType: !458, size: 64)
!3208 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !3205, file: !455, line: 16, baseType: !460, size: 64, offset: 64)
!3209 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !3191, file: !429, line: 92, baseType: !3205, size: 128, offset: 704)
!3210 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !3191, file: !429, line: 93, baseType: !3205, size: 128, offset: 832)
!3211 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !3191, file: !429, line: 106, baseType: !464, size: 192, offset: 960)
!3212 = !DILocation(line: 31, column: 15, scope: !3179)
!3213 = !DILocation(line: 32, column: 7, scope: !3214)
!3214 = distinct !DILexicalBlock(scope: !3179, file: !3180, line: 32, column: 7)
!3215 = !DILocation(line: 32, column: 7, scope: !3179)
!3216 = !DILocation(line: 33, column: 5, scope: !3214)
!3217 = !DILocation(line: 34, column: 30, scope: !3179)
!3218 = !DILocation(line: 34, column: 3, scope: !3179)
!3219 = !DILocation(line: 34, column: 13, scope: !3179)
!3220 = !DILocation(line: 34, column: 20, scope: !3179)
!3221 = !DILocation(line: 35, column: 30, scope: !3179)
!3222 = !DILocation(line: 35, column: 3, scope: !3179)
!3223 = !DILocation(line: 35, column: 13, scope: !3179)
!3224 = !DILocation(line: 35, column: 20, scope: !3179)
!3225 = !DILocation(line: 36, column: 10, scope: !3179)
!3226 = !DILocation(line: 36, column: 3, scope: !3179)
!3227 = !DILocation(line: 37, column: 1, scope: !3179)
!3228 = !DILocalVariable(name: "root_d_i", arg: 1, scope: !3229, file: !3180, line: 29, type: !3232)
!3229 = distinct !DISubprogram(name: "get_root_dev_ino", scope: !3180, file: !3180, line: 29, type: !3230, scopeLine: 30, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3237, retainedNodes: !4)
!3230 = !DISubroutineType(types: !3231)
!3231 = !{!3232, !3232}
!3232 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3233, size: 64)
!3233 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dev_ino", file: !617, line: 7, size: 128, elements: !3234)
!3234 = !{!3235, !3236}
!3235 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !3233, file: !617, line: 9, baseType: !620, size: 64)
!3236 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !3233, file: !617, line: 10, baseType: !623, size: 64, offset: 64)
!3237 = distinct !DICompileUnit(language: DW_LANG_C99, file: !129, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!3238 = !DILocalVariable(name: "statbuf", scope: !3229, file: !3180, line: 31, type: !3239)
!3239 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !429, line: 46, size: 1152, elements: !3240)
!3240 = !{!3241, !3242, !3243, !3244, !3245, !3246, !3247, !3248, !3249, !3250, !3251, !3252, !3257, !3258, !3259}
!3241 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !3239, file: !429, line: 48, baseType: !432, size: 64)
!3242 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !3239, file: !429, line: 53, baseType: !435, size: 64, offset: 64)
!3243 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !3239, file: !429, line: 61, baseType: !437, size: 64, offset: 128)
!3244 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !3239, file: !429, line: 62, baseType: !439, size: 32, offset: 192)
!3245 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !3239, file: !429, line: 64, baseType: !441, size: 32, offset: 224)
!3246 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !3239, file: !429, line: 65, baseType: !443, size: 32, offset: 256)
!3247 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !3239, file: !429, line: 67, baseType: !19, size: 32, offset: 288)
!3248 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !3239, file: !429, line: 69, baseType: !432, size: 64, offset: 320)
!3249 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !3239, file: !429, line: 74, baseType: !447, size: 64, offset: 384)
!3250 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !3239, file: !429, line: 78, baseType: !450, size: 64, offset: 448)
!3251 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !3239, file: !429, line: 80, baseType: !452, size: 64, offset: 512)
!3252 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !3239, file: !429, line: 91, baseType: !3253, size: 128, offset: 576)
!3253 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !455, line: 10, size: 128, elements: !3254)
!3254 = !{!3255, !3256}
!3255 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !3253, file: !455, line: 12, baseType: !458, size: 64)
!3256 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !3253, file: !455, line: 16, baseType: !460, size: 64, offset: 64)
!3257 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !3239, file: !429, line: 92, baseType: !3253, size: 128, offset: 704)
!3258 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !3239, file: !429, line: 93, baseType: !3253, size: 128, offset: 832)
!3259 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !3239, file: !429, line: 106, baseType: !464, size: 192, offset: 960)
!3260 = distinct !DISubprogram(name: "version_etc_arn", scope: !3261, file: !3261, line: 61, type: !3262, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !130, retainedNodes: !4)
!3261 = !DIFile(filename: "lib/version-etc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3262 = !DISubroutineType(types: !3263)
!3263 = !{null, !3264, !16, !16, !16, !3316, !74}
!3264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3265, size: 64)
!3265 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3266, line: 7, baseType: !3267)
!3266 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!3267 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3268, line: 49, size: 1728, elements: !3269)
!3268 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!3269 = !{!3270, !3271, !3272, !3273, !3274, !3275, !3276, !3277, !3278, !3279, !3280, !3281, !3282, !3285, !3287, !3288, !3289, !3290, !3291, !3293, !3297, !3300, !3302, !3305, !3308, !3309, !3310, !3311, !3312}
!3270 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3267, file: !3268, line: 51, baseType: !19, size: 32)
!3271 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3267, file: !3268, line: 54, baseType: !7, size: 64, offset: 64)
!3272 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3267, file: !3268, line: 55, baseType: !7, size: 64, offset: 128)
!3273 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3267, file: !3268, line: 56, baseType: !7, size: 64, offset: 192)
!3274 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3267, file: !3268, line: 57, baseType: !7, size: 64, offset: 256)
!3275 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3267, file: !3268, line: 58, baseType: !7, size: 64, offset: 320)
!3276 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3267, file: !3268, line: 59, baseType: !7, size: 64, offset: 384)
!3277 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3267, file: !3268, line: 60, baseType: !7, size: 64, offset: 448)
!3278 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3267, file: !3268, line: 61, baseType: !7, size: 64, offset: 512)
!3279 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3267, file: !3268, line: 64, baseType: !7, size: 64, offset: 576)
!3280 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3267, file: !3268, line: 65, baseType: !7, size: 64, offset: 640)
!3281 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3267, file: !3268, line: 66, baseType: !7, size: 64, offset: 704)
!3282 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3267, file: !3268, line: 68, baseType: !3283, size: 64, offset: 768)
!3283 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3284, size: 64)
!3284 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !3268, line: 36, flags: DIFlagFwdDecl)
!3285 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3267, file: !3268, line: 70, baseType: !3286, size: 64, offset: 832)
!3286 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3267, size: 64)
!3287 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3267, file: !3268, line: 72, baseType: !19, size: 32, offset: 896)
!3288 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3267, file: !3268, line: 73, baseType: !19, size: 32, offset: 928)
!3289 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3267, file: !3268, line: 74, baseType: !447, size: 64, offset: 960)
!3290 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3267, file: !3268, line: 77, baseType: !73, size: 16, offset: 1024)
!3291 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3267, file: !3268, line: 78, baseType: !3292, size: 8, offset: 1040)
!3292 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!3293 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3267, file: !3268, line: 79, baseType: !3294, size: 8, offset: 1048)
!3294 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 8, elements: !3295)
!3295 = !{!3296}
!3296 = !DISubrange(count: 1)
!3297 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3267, file: !3268, line: 81, baseType: !3298, size: 64, offset: 1088)
!3298 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3299, size: 64)
!3299 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !3268, line: 43, baseType: null)
!3300 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3267, file: !3268, line: 89, baseType: !3301, size: 64, offset: 1152)
!3301 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !433, line: 153, baseType: !448)
!3302 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3267, file: !3268, line: 91, baseType: !3303, size: 64, offset: 1216)
!3303 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3304, size: 64)
!3304 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !3268, line: 37, flags: DIFlagFwdDecl)
!3305 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3267, file: !3268, line: 92, baseType: !3306, size: 64, offset: 1280)
!3306 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3307, size: 64)
!3307 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !3268, line: 38, flags: DIFlagFwdDecl)
!3308 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3267, file: !3268, line: 93, baseType: !3286, size: 64, offset: 1344)
!3309 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3267, file: !3268, line: 94, baseType: !6, size: 64, offset: 1408)
!3310 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3267, file: !3268, line: 95, baseType: !74, size: 64, offset: 1472)
!3311 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3267, file: !3268, line: 96, baseType: !19, size: 32, offset: 1536)
!3312 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3267, file: !3268, line: 98, baseType: !3313, size: 160, offset: 1568)
!3313 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 160, elements: !3314)
!3314 = !{!3315}
!3315 = !DISubrange(count: 20)
!3316 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!3317 = !DILocalVariable(name: "stream", arg: 1, scope: !3260, file: !3261, line: 61, type: !3264)
!3318 = !DILocation(line: 61, column: 24, scope: !3260)
!3319 = !DILocalVariable(name: "command_name", arg: 2, scope: !3260, file: !3261, line: 62, type: !16)
!3320 = !DILocation(line: 62, column: 30, scope: !3260)
!3321 = !DILocalVariable(name: "package", arg: 3, scope: !3260, file: !3261, line: 62, type: !16)
!3322 = !DILocation(line: 62, column: 56, scope: !3260)
!3323 = !DILocalVariable(name: "version", arg: 4, scope: !3260, file: !3261, line: 63, type: !16)
!3324 = !DILocation(line: 63, column: 30, scope: !3260)
!3325 = !DILocalVariable(name: "authors", arg: 5, scope: !3260, file: !3261, line: 64, type: !3316)
!3326 = !DILocation(line: 64, column: 39, scope: !3260)
!3327 = !DILocalVariable(name: "n_authors", arg: 6, scope: !3260, file: !3261, line: 64, type: !74)
!3328 = !DILocation(line: 64, column: 55, scope: !3260)
!3329 = !DILocation(line: 66, column: 7, scope: !3330)
!3330 = distinct !DILexicalBlock(scope: !3260, file: !3261, line: 66, column: 7)
!3331 = !DILocation(line: 66, column: 7, scope: !3260)
!3332 = !DILocation(line: 67, column: 14, scope: !3330)
!3333 = !DILocation(line: 67, column: 38, scope: !3330)
!3334 = !DILocation(line: 67, column: 52, scope: !3330)
!3335 = !DILocation(line: 67, column: 61, scope: !3330)
!3336 = !DILocation(line: 67, column: 5, scope: !3330)
!3337 = !DILocation(line: 69, column: 14, scope: !3330)
!3338 = !DILocation(line: 69, column: 33, scope: !3330)
!3339 = !DILocation(line: 69, column: 42, scope: !3330)
!3340 = !DILocation(line: 69, column: 5, scope: !3330)
!3341 = !DILocation(line: 83, column: 12, scope: !3260)
!3342 = !DILocation(line: 83, column: 43, scope: !3260)
!3343 = !DILocation(line: 83, column: 3, scope: !3260)
!3344 = !DILocation(line: 85, column: 3, scope: !3260)
!3345 = !DILocation(line: 88, column: 12, scope: !3260)
!3346 = !DILocation(line: 88, column: 20, scope: !3260)
!3347 = !DILocation(line: 88, column: 3, scope: !3260)
!3348 = !DILocation(line: 95, column: 3, scope: !3260)
!3349 = !DILocation(line: 97, column: 11, scope: !3260)
!3350 = !DILocation(line: 97, column: 3, scope: !3260)
!3351 = !DILocation(line: 102, column: 7, scope: !3352)
!3352 = distinct !DILexicalBlock(scope: !3260, file: !3261, line: 98, column: 5)
!3353 = !DILocation(line: 105, column: 16, scope: !3352)
!3354 = !DILocation(line: 105, column: 24, scope: !3352)
!3355 = !DILocation(line: 105, column: 47, scope: !3352)
!3356 = !DILocation(line: 105, column: 7, scope: !3352)
!3357 = !DILocation(line: 106, column: 7, scope: !3352)
!3358 = !DILocation(line: 109, column: 16, scope: !3352)
!3359 = !DILocation(line: 109, column: 24, scope: !3352)
!3360 = !DILocation(line: 109, column: 54, scope: !3352)
!3361 = !DILocation(line: 109, column: 66, scope: !3352)
!3362 = !DILocation(line: 109, column: 7, scope: !3352)
!3363 = !DILocation(line: 110, column: 7, scope: !3352)
!3364 = !DILocation(line: 113, column: 16, scope: !3352)
!3365 = !DILocation(line: 113, column: 24, scope: !3352)
!3366 = !DILocation(line: 114, column: 16, scope: !3352)
!3367 = !DILocation(line: 114, column: 28, scope: !3352)
!3368 = !DILocation(line: 114, column: 40, scope: !3352)
!3369 = !DILocation(line: 113, column: 7, scope: !3352)
!3370 = !DILocation(line: 115, column: 7, scope: !3352)
!3371 = !DILocation(line: 120, column: 16, scope: !3352)
!3372 = !DILocation(line: 120, column: 24, scope: !3352)
!3373 = !DILocation(line: 121, column: 16, scope: !3352)
!3374 = !DILocation(line: 121, column: 28, scope: !3352)
!3375 = !DILocation(line: 121, column: 40, scope: !3352)
!3376 = !DILocation(line: 121, column: 52, scope: !3352)
!3377 = !DILocation(line: 120, column: 7, scope: !3352)
!3378 = !DILocation(line: 122, column: 7, scope: !3352)
!3379 = !DILocation(line: 127, column: 16, scope: !3352)
!3380 = !DILocation(line: 127, column: 24, scope: !3352)
!3381 = !DILocation(line: 128, column: 16, scope: !3352)
!3382 = !DILocation(line: 128, column: 28, scope: !3352)
!3383 = !DILocation(line: 128, column: 40, scope: !3352)
!3384 = !DILocation(line: 128, column: 52, scope: !3352)
!3385 = !DILocation(line: 128, column: 64, scope: !3352)
!3386 = !DILocation(line: 127, column: 7, scope: !3352)
!3387 = !DILocation(line: 129, column: 7, scope: !3352)
!3388 = !DILocation(line: 134, column: 16, scope: !3352)
!3389 = !DILocation(line: 134, column: 24, scope: !3352)
!3390 = !DILocation(line: 135, column: 16, scope: !3352)
!3391 = !DILocation(line: 135, column: 28, scope: !3352)
!3392 = !DILocation(line: 135, column: 40, scope: !3352)
!3393 = !DILocation(line: 135, column: 52, scope: !3352)
!3394 = !DILocation(line: 135, column: 64, scope: !3352)
!3395 = !DILocation(line: 136, column: 16, scope: !3352)
!3396 = !DILocation(line: 134, column: 7, scope: !3352)
!3397 = !DILocation(line: 137, column: 7, scope: !3352)
!3398 = !DILocation(line: 142, column: 16, scope: !3352)
!3399 = !DILocation(line: 142, column: 24, scope: !3352)
!3400 = !DILocation(line: 143, column: 16, scope: !3352)
!3401 = !DILocation(line: 143, column: 28, scope: !3352)
!3402 = !DILocation(line: 143, column: 40, scope: !3352)
!3403 = !DILocation(line: 143, column: 52, scope: !3352)
!3404 = !DILocation(line: 143, column: 64, scope: !3352)
!3405 = !DILocation(line: 144, column: 16, scope: !3352)
!3406 = !DILocation(line: 144, column: 28, scope: !3352)
!3407 = !DILocation(line: 142, column: 7, scope: !3352)
!3408 = !DILocation(line: 145, column: 7, scope: !3352)
!3409 = !DILocation(line: 150, column: 16, scope: !3352)
!3410 = !DILocation(line: 150, column: 24, scope: !3352)
!3411 = !DILocation(line: 152, column: 17, scope: !3352)
!3412 = !DILocation(line: 152, column: 29, scope: !3352)
!3413 = !DILocation(line: 152, column: 41, scope: !3352)
!3414 = !DILocation(line: 152, column: 53, scope: !3352)
!3415 = !DILocation(line: 152, column: 65, scope: !3352)
!3416 = !DILocation(line: 153, column: 17, scope: !3352)
!3417 = !DILocation(line: 153, column: 29, scope: !3352)
!3418 = !DILocation(line: 153, column: 41, scope: !3352)
!3419 = !DILocation(line: 150, column: 7, scope: !3352)
!3420 = !DILocation(line: 154, column: 7, scope: !3352)
!3421 = !DILocation(line: 159, column: 16, scope: !3352)
!3422 = !DILocation(line: 159, column: 24, scope: !3352)
!3423 = !DILocation(line: 161, column: 16, scope: !3352)
!3424 = !DILocation(line: 161, column: 28, scope: !3352)
!3425 = !DILocation(line: 161, column: 40, scope: !3352)
!3426 = !DILocation(line: 161, column: 52, scope: !3352)
!3427 = !DILocation(line: 161, column: 64, scope: !3352)
!3428 = !DILocation(line: 162, column: 16, scope: !3352)
!3429 = !DILocation(line: 162, column: 28, scope: !3352)
!3430 = !DILocation(line: 162, column: 40, scope: !3352)
!3431 = !DILocation(line: 162, column: 52, scope: !3352)
!3432 = !DILocation(line: 159, column: 7, scope: !3352)
!3433 = !DILocation(line: 163, column: 7, scope: !3352)
!3434 = !DILocation(line: 170, column: 16, scope: !3352)
!3435 = !DILocation(line: 170, column: 24, scope: !3352)
!3436 = !DILocation(line: 172, column: 17, scope: !3352)
!3437 = !DILocation(line: 172, column: 29, scope: !3352)
!3438 = !DILocation(line: 172, column: 41, scope: !3352)
!3439 = !DILocation(line: 172, column: 53, scope: !3352)
!3440 = !DILocation(line: 172, column: 65, scope: !3352)
!3441 = !DILocation(line: 173, column: 17, scope: !3352)
!3442 = !DILocation(line: 173, column: 29, scope: !3352)
!3443 = !DILocation(line: 173, column: 41, scope: !3352)
!3444 = !DILocation(line: 173, column: 53, scope: !3352)
!3445 = !DILocation(line: 170, column: 7, scope: !3352)
!3446 = !DILocation(line: 174, column: 7, scope: !3352)
!3447 = !DILocation(line: 176, column: 1, scope: !3260)
!3448 = !DILocalVariable(name: "stream", arg: 1, scope: !3449, file: !3261, line: 61, type: !3452)
!3449 = distinct !DISubprogram(name: "version_etc_arn", scope: !3261, file: !3261, line: 61, type: !3450, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3486, retainedNodes: !4)
!3450 = !DISubroutineType(types: !3451)
!3451 = !{null, !3452, !16, !16, !16, !3316, !74}
!3452 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3453, size: 64)
!3453 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3266, line: 7, baseType: !3454)
!3454 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3268, line: 49, size: 1728, elements: !3455)
!3455 = !{!3456, !3457, !3458, !3459, !3460, !3461, !3462, !3463, !3464, !3465, !3466, !3467, !3468, !3469, !3471, !3472, !3473, !3474, !3475, !3476, !3477, !3478, !3479, !3480, !3481, !3482, !3483, !3484, !3485}
!3456 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3454, file: !3268, line: 51, baseType: !19, size: 32)
!3457 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3454, file: !3268, line: 54, baseType: !7, size: 64, offset: 64)
!3458 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3454, file: !3268, line: 55, baseType: !7, size: 64, offset: 128)
!3459 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3454, file: !3268, line: 56, baseType: !7, size: 64, offset: 192)
!3460 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3454, file: !3268, line: 57, baseType: !7, size: 64, offset: 256)
!3461 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3454, file: !3268, line: 58, baseType: !7, size: 64, offset: 320)
!3462 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3454, file: !3268, line: 59, baseType: !7, size: 64, offset: 384)
!3463 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3454, file: !3268, line: 60, baseType: !7, size: 64, offset: 448)
!3464 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3454, file: !3268, line: 61, baseType: !7, size: 64, offset: 512)
!3465 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3454, file: !3268, line: 64, baseType: !7, size: 64, offset: 576)
!3466 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3454, file: !3268, line: 65, baseType: !7, size: 64, offset: 640)
!3467 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3454, file: !3268, line: 66, baseType: !7, size: 64, offset: 704)
!3468 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3454, file: !3268, line: 68, baseType: !3283, size: 64, offset: 768)
!3469 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3454, file: !3268, line: 70, baseType: !3470, size: 64, offset: 832)
!3470 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3454, size: 64)
!3471 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3454, file: !3268, line: 72, baseType: !19, size: 32, offset: 896)
!3472 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3454, file: !3268, line: 73, baseType: !19, size: 32, offset: 928)
!3473 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3454, file: !3268, line: 74, baseType: !447, size: 64, offset: 960)
!3474 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3454, file: !3268, line: 77, baseType: !73, size: 16, offset: 1024)
!3475 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3454, file: !3268, line: 78, baseType: !3292, size: 8, offset: 1040)
!3476 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3454, file: !3268, line: 79, baseType: !3294, size: 8, offset: 1048)
!3477 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3454, file: !3268, line: 81, baseType: !3298, size: 64, offset: 1088)
!3478 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3454, file: !3268, line: 89, baseType: !3301, size: 64, offset: 1152)
!3479 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3454, file: !3268, line: 91, baseType: !3303, size: 64, offset: 1216)
!3480 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3454, file: !3268, line: 92, baseType: !3306, size: 64, offset: 1280)
!3481 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3454, file: !3268, line: 93, baseType: !3470, size: 64, offset: 1344)
!3482 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3454, file: !3268, line: 94, baseType: !6, size: 64, offset: 1408)
!3483 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3454, file: !3268, line: 95, baseType: !74, size: 64, offset: 1472)
!3484 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3454, file: !3268, line: 96, baseType: !19, size: 32, offset: 1536)
!3485 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3454, file: !3268, line: 98, baseType: !3313, size: 160, offset: 1568)
!3486 = distinct !DICompileUnit(language: DW_LANG_C99, file: !131, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!3487 = !DILocalVariable(name: "command_name", arg: 2, scope: !3449, file: !3261, line: 62, type: !16)
!3488 = !DILocalVariable(name: "package", arg: 3, scope: !3449, file: !3261, line: 62, type: !16)
!3489 = !DILocalVariable(name: "version", arg: 4, scope: !3449, file: !3261, line: 63, type: !16)
!3490 = !DILocalVariable(name: "authors", arg: 5, scope: !3449, file: !3261, line: 64, type: !3316)
!3491 = !DILocalVariable(name: "n_authors", arg: 6, scope: !3449, file: !3261, line: 64, type: !74)
!3492 = distinct !DISubprogram(name: "version_etc_va", scope: !3261, file: !3261, line: 199, type: !3493, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !130, retainedNodes: !4)
!3493 = !DISubroutineType(types: !3494)
!3494 = !{null, !3264, !16, !16, !16, !3495}
!3495 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3496, size: 64)
!3496 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !131, line: 192, size: 192, elements: !3497)
!3497 = !{!3498, !3499, !3500, !3501}
!3498 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !3496, file: !131, line: 192, baseType: !59, size: 32)
!3499 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !3496, file: !131, line: 192, baseType: !59, size: 32, offset: 32)
!3500 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !3496, file: !131, line: 192, baseType: !6, size: 64, offset: 64)
!3501 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !3496, file: !131, line: 192, baseType: !6, size: 64, offset: 128)
!3502 = !DILocalVariable(name: "stream", arg: 1, scope: !3492, file: !3261, line: 199, type: !3264)
!3503 = !DILocation(line: 199, column: 23, scope: !3492)
!3504 = !DILocalVariable(name: "command_name", arg: 2, scope: !3492, file: !3261, line: 200, type: !16)
!3505 = !DILocation(line: 200, column: 29, scope: !3492)
!3506 = !DILocalVariable(name: "package", arg: 3, scope: !3492, file: !3261, line: 200, type: !16)
!3507 = !DILocation(line: 200, column: 55, scope: !3492)
!3508 = !DILocalVariable(name: "version", arg: 4, scope: !3492, file: !3261, line: 201, type: !16)
!3509 = !DILocation(line: 201, column: 29, scope: !3492)
!3510 = !DILocalVariable(name: "authors", arg: 5, scope: !3492, file: !3261, line: 201, type: !3495)
!3511 = !DILocation(line: 201, column: 46, scope: !3492)
!3512 = !DILocalVariable(name: "n_authors", scope: !3492, file: !3261, line: 203, type: !74)
!3513 = !DILocation(line: 203, column: 10, scope: !3492)
!3514 = !DILocalVariable(name: "authtab", scope: !3492, file: !3261, line: 204, type: !3515)
!3515 = !DICompositeType(tag: DW_TAG_array_type, baseType: !16, size: 640, elements: !89)
!3516 = !DILocation(line: 204, column: 15, scope: !3492)
!3517 = !DILocation(line: 206, column: 18, scope: !3518)
!3518 = distinct !DILexicalBlock(scope: !3492, file: !3261, line: 206, column: 3)
!3519 = !DILocation(line: 206, column: 8, scope: !3518)
!3520 = !DILocation(line: 207, column: 8, scope: !3521)
!3521 = distinct !DILexicalBlock(scope: !3518, file: !3261, line: 206, column: 3)
!3522 = !DILocation(line: 207, column: 18, scope: !3521)
!3523 = !DILocation(line: 208, column: 10, scope: !3521)
!3524 = !DILocation(line: 208, column: 35, scope: !3521)
!3525 = !DILocation(line: 208, column: 22, scope: !3521)
!3526 = !DILocation(line: 208, column: 14, scope: !3521)
!3527 = !DILocation(line: 208, column: 33, scope: !3521)
!3528 = !DILocation(line: 208, column: 67, scope: !3521)
!3529 = !DILocation(line: 0, scope: !3521)
!3530 = !DILocation(line: 206, column: 3, scope: !3518)
!3531 = !DILocation(line: 209, column: 17, scope: !3521)
!3532 = !DILocation(line: 206, column: 3, scope: !3521)
!3533 = distinct !{!3533, !3530, !3534}
!3534 = !DILocation(line: 210, column: 5, scope: !3518)
!3535 = !DILocation(line: 211, column: 20, scope: !3492)
!3536 = !DILocation(line: 211, column: 28, scope: !3492)
!3537 = !DILocation(line: 211, column: 42, scope: !3492)
!3538 = !DILocation(line: 211, column: 51, scope: !3492)
!3539 = !DILocation(line: 212, column: 20, scope: !3492)
!3540 = !DILocation(line: 212, column: 29, scope: !3492)
!3541 = !DILocation(line: 211, column: 3, scope: !3492)
!3542 = !DILocation(line: 213, column: 1, scope: !3492)
!3543 = !DILocalVariable(name: "stream", arg: 1, scope: !3544, file: !3261, line: 199, type: !3547)
!3544 = distinct !DISubprogram(name: "version_etc_va", scope: !3261, file: !3261, line: 199, type: !3545, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3588, retainedNodes: !4)
!3545 = !DISubroutineType(types: !3546)
!3546 = !{null, !3547, !16, !16, !16, !3581}
!3547 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3548, size: 64)
!3548 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3266, line: 7, baseType: !3549)
!3549 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3268, line: 49, size: 1728, elements: !3550)
!3550 = !{!3551, !3552, !3553, !3554, !3555, !3556, !3557, !3558, !3559, !3560, !3561, !3562, !3563, !3564, !3566, !3567, !3568, !3569, !3570, !3571, !3572, !3573, !3574, !3575, !3576, !3577, !3578, !3579, !3580}
!3551 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3549, file: !3268, line: 51, baseType: !19, size: 32)
!3552 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3549, file: !3268, line: 54, baseType: !7, size: 64, offset: 64)
!3553 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3549, file: !3268, line: 55, baseType: !7, size: 64, offset: 128)
!3554 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3549, file: !3268, line: 56, baseType: !7, size: 64, offset: 192)
!3555 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3549, file: !3268, line: 57, baseType: !7, size: 64, offset: 256)
!3556 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3549, file: !3268, line: 58, baseType: !7, size: 64, offset: 320)
!3557 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3549, file: !3268, line: 59, baseType: !7, size: 64, offset: 384)
!3558 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3549, file: !3268, line: 60, baseType: !7, size: 64, offset: 448)
!3559 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3549, file: !3268, line: 61, baseType: !7, size: 64, offset: 512)
!3560 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3549, file: !3268, line: 64, baseType: !7, size: 64, offset: 576)
!3561 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3549, file: !3268, line: 65, baseType: !7, size: 64, offset: 640)
!3562 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3549, file: !3268, line: 66, baseType: !7, size: 64, offset: 704)
!3563 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3549, file: !3268, line: 68, baseType: !3283, size: 64, offset: 768)
!3564 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3549, file: !3268, line: 70, baseType: !3565, size: 64, offset: 832)
!3565 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3549, size: 64)
!3566 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3549, file: !3268, line: 72, baseType: !19, size: 32, offset: 896)
!3567 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3549, file: !3268, line: 73, baseType: !19, size: 32, offset: 928)
!3568 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3549, file: !3268, line: 74, baseType: !447, size: 64, offset: 960)
!3569 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3549, file: !3268, line: 77, baseType: !73, size: 16, offset: 1024)
!3570 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3549, file: !3268, line: 78, baseType: !3292, size: 8, offset: 1040)
!3571 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3549, file: !3268, line: 79, baseType: !3294, size: 8, offset: 1048)
!3572 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3549, file: !3268, line: 81, baseType: !3298, size: 64, offset: 1088)
!3573 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3549, file: !3268, line: 89, baseType: !3301, size: 64, offset: 1152)
!3574 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3549, file: !3268, line: 91, baseType: !3303, size: 64, offset: 1216)
!3575 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3549, file: !3268, line: 92, baseType: !3306, size: 64, offset: 1280)
!3576 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3549, file: !3268, line: 93, baseType: !3565, size: 64, offset: 1344)
!3577 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3549, file: !3268, line: 94, baseType: !6, size: 64, offset: 1408)
!3578 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3549, file: !3268, line: 95, baseType: !74, size: 64, offset: 1472)
!3579 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3549, file: !3268, line: 96, baseType: !19, size: 32, offset: 1536)
!3580 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3549, file: !3268, line: 98, baseType: !3313, size: 160, offset: 1568)
!3581 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3582, size: 64)
!3582 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !131, line: 192, size: 192, elements: !3583)
!3583 = !{!3584, !3585, !3586, !3587}
!3584 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !3582, file: !131, line: 192, baseType: !59, size: 32)
!3585 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !3582, file: !131, line: 192, baseType: !59, size: 32, offset: 32)
!3586 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !3582, file: !131, line: 192, baseType: !6, size: 64, offset: 64)
!3587 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !3582, file: !131, line: 192, baseType: !6, size: 64, offset: 128)
!3588 = distinct !DICompileUnit(language: DW_LANG_C99, file: !131, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!3589 = !DILocalVariable(name: "command_name", arg: 2, scope: !3544, file: !3261, line: 200, type: !16)
!3590 = !DILocalVariable(name: "package", arg: 3, scope: !3544, file: !3261, line: 200, type: !16)
!3591 = !DILocalVariable(name: "version", arg: 4, scope: !3544, file: !3261, line: 201, type: !16)
!3592 = !DILocalVariable(name: "authors", arg: 5, scope: !3544, file: !3261, line: 201, type: !3581)
!3593 = !DILocalVariable(name: "n_authors", scope: !3544, file: !3261, line: 203, type: !74)
!3594 = !DILocalVariable(name: "authtab", scope: !3544, file: !3261, line: 204, type: !3515)
!3595 = distinct !DISubprogram(name: "version_etc", scope: !3261, file: !3261, line: 230, type: !3596, scopeLine: 233, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !130, retainedNodes: !4)
!3596 = !DISubroutineType(types: !3597)
!3597 = !{null, !3264, !16, !16, !16, null}
!3598 = !DILocalVariable(name: "stream", arg: 1, scope: !3595, file: !3261, line: 230, type: !3264)
!3599 = !DILocation(line: 230, column: 20, scope: !3595)
!3600 = !DILocalVariable(name: "command_name", arg: 2, scope: !3595, file: !3261, line: 231, type: !16)
!3601 = !DILocation(line: 231, column: 26, scope: !3595)
!3602 = !DILocalVariable(name: "package", arg: 3, scope: !3595, file: !3261, line: 231, type: !16)
!3603 = !DILocation(line: 231, column: 52, scope: !3595)
!3604 = !DILocalVariable(name: "version", arg: 4, scope: !3595, file: !3261, line: 232, type: !16)
!3605 = !DILocation(line: 232, column: 26, scope: !3595)
!3606 = !DILocalVariable(name: "authors", scope: !3595, file: !3261, line: 234, type: !3607)
!3607 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !3608, line: 52, baseType: !3609)
!3608 = !DIFile(filename: "/usr/include/stdio.h", directory: "")
!3609 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !3610, line: 32, baseType: !3611)
!3610 = !DIFile(filename: "/usr/lib/llvm-9/lib/clang/9.0.1/include/stdarg.h", directory: "")
!3611 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !131, line: 234, baseType: !3612)
!3612 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3496, size: 192, elements: !3295)
!3613 = !DILocation(line: 234, column: 11, scope: !3595)
!3614 = !DILocation(line: 236, column: 3, scope: !3595)
!3615 = !DILocation(line: 237, column: 19, scope: !3595)
!3616 = !DILocation(line: 237, column: 27, scope: !3595)
!3617 = !DILocation(line: 237, column: 41, scope: !3595)
!3618 = !DILocation(line: 237, column: 50, scope: !3595)
!3619 = !DILocation(line: 237, column: 59, scope: !3595)
!3620 = !DILocation(line: 237, column: 3, scope: !3595)
!3621 = !DILocation(line: 238, column: 3, scope: !3595)
!3622 = !DILocation(line: 239, column: 1, scope: !3595)
!3623 = !DILocalVariable(name: "stream", arg: 1, scope: !3624, file: !3261, line: 230, type: !3627)
!3624 = distinct !DISubprogram(name: "version_etc", scope: !3261, file: !3261, line: 230, type: !3625, scopeLine: 233, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3661, retainedNodes: !4)
!3625 = !DISubroutineType(types: !3626)
!3626 = !{null, !3627, !16, !16, !16, null}
!3627 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3628, size: 64)
!3628 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3266, line: 7, baseType: !3629)
!3629 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3268, line: 49, size: 1728, elements: !3630)
!3630 = !{!3631, !3632, !3633, !3634, !3635, !3636, !3637, !3638, !3639, !3640, !3641, !3642, !3643, !3644, !3646, !3647, !3648, !3649, !3650, !3651, !3652, !3653, !3654, !3655, !3656, !3657, !3658, !3659, !3660}
!3631 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3629, file: !3268, line: 51, baseType: !19, size: 32)
!3632 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3629, file: !3268, line: 54, baseType: !7, size: 64, offset: 64)
!3633 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3629, file: !3268, line: 55, baseType: !7, size: 64, offset: 128)
!3634 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3629, file: !3268, line: 56, baseType: !7, size: 64, offset: 192)
!3635 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3629, file: !3268, line: 57, baseType: !7, size: 64, offset: 256)
!3636 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3629, file: !3268, line: 58, baseType: !7, size: 64, offset: 320)
!3637 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3629, file: !3268, line: 59, baseType: !7, size: 64, offset: 384)
!3638 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3629, file: !3268, line: 60, baseType: !7, size: 64, offset: 448)
!3639 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3629, file: !3268, line: 61, baseType: !7, size: 64, offset: 512)
!3640 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3629, file: !3268, line: 64, baseType: !7, size: 64, offset: 576)
!3641 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3629, file: !3268, line: 65, baseType: !7, size: 64, offset: 640)
!3642 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3629, file: !3268, line: 66, baseType: !7, size: 64, offset: 704)
!3643 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3629, file: !3268, line: 68, baseType: !3283, size: 64, offset: 768)
!3644 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3629, file: !3268, line: 70, baseType: !3645, size: 64, offset: 832)
!3645 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3629, size: 64)
!3646 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3629, file: !3268, line: 72, baseType: !19, size: 32, offset: 896)
!3647 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3629, file: !3268, line: 73, baseType: !19, size: 32, offset: 928)
!3648 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3629, file: !3268, line: 74, baseType: !447, size: 64, offset: 960)
!3649 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3629, file: !3268, line: 77, baseType: !73, size: 16, offset: 1024)
!3650 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3629, file: !3268, line: 78, baseType: !3292, size: 8, offset: 1040)
!3651 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3629, file: !3268, line: 79, baseType: !3294, size: 8, offset: 1048)
!3652 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3629, file: !3268, line: 81, baseType: !3298, size: 64, offset: 1088)
!3653 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3629, file: !3268, line: 89, baseType: !3301, size: 64, offset: 1152)
!3654 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3629, file: !3268, line: 91, baseType: !3303, size: 64, offset: 1216)
!3655 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3629, file: !3268, line: 92, baseType: !3306, size: 64, offset: 1280)
!3656 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3629, file: !3268, line: 93, baseType: !3645, size: 64, offset: 1344)
!3657 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3629, file: !3268, line: 94, baseType: !6, size: 64, offset: 1408)
!3658 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3629, file: !3268, line: 95, baseType: !74, size: 64, offset: 1472)
!3659 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3629, file: !3268, line: 96, baseType: !19, size: 32, offset: 1536)
!3660 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3629, file: !3268, line: 98, baseType: !3313, size: 160, offset: 1568)
!3661 = distinct !DICompileUnit(language: DW_LANG_C99, file: !131, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!3662 = !DILocalVariable(name: "command_name", arg: 2, scope: !3624, file: !3261, line: 231, type: !16)
!3663 = !DILocalVariable(name: "package", arg: 3, scope: !3624, file: !3261, line: 231, type: !16)
!3664 = !DILocalVariable(name: "version", arg: 4, scope: !3624, file: !3261, line: 232, type: !16)
!3665 = !DILocalVariable(name: "authors", scope: !3624, file: !3261, line: 234, type: !3666)
!3666 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !3608, line: 52, baseType: !3667)
!3667 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !3610, line: 32, baseType: !3668)
!3668 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !131, line: 234, baseType: !3669)
!3669 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3670, size: 192, elements: !3295)
!3670 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !131, line: 192, size: 192, elements: !3671)
!3671 = !{!3672, !3673, !3674, !3675}
!3672 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !3670, file: !131, line: 192, baseType: !59, size: 32)
!3673 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !3670, file: !131, line: 192, baseType: !59, size: 32, offset: 32)
!3674 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !3670, file: !131, line: 192, baseType: !6, size: 64, offset: 64)
!3675 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !3670, file: !131, line: 192, baseType: !6, size: 64, offset: 128)
!3676 = distinct !DISubprogram(name: "xnmalloc", scope: !3677, file: !3677, line: 99, type: !3678, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !133, retainedNodes: !4)
!3677 = !DIFile(filename: "./lib/xalloc.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3678 = !DISubroutineType(types: !3679)
!3679 = !{!6, !74, !74}
!3680 = !DILocalVariable(name: "n", arg: 1, scope: !3676, file: !3677, line: 99, type: !74)
!3681 = !DILocation(line: 99, column: 18, scope: !3676)
!3682 = !DILocalVariable(name: "s", arg: 2, scope: !3676, file: !3677, line: 99, type: !74)
!3683 = !DILocation(line: 99, column: 28, scope: !3676)
!3684 = !DILocation(line: 101, column: 7, scope: !3685)
!3685 = distinct !DILexicalBlock(scope: !3676, file: !3677, line: 101, column: 7)
!3686 = !DILocation(line: 101, column: 7, scope: !3676)
!3687 = !DILocation(line: 102, column: 5, scope: !3685)
!3688 = !DILocation(line: 103, column: 19, scope: !3676)
!3689 = !DILocation(line: 103, column: 23, scope: !3676)
!3690 = !DILocation(line: 103, column: 21, scope: !3676)
!3691 = !DILocation(line: 103, column: 10, scope: !3676)
!3692 = !DILocation(line: 103, column: 3, scope: !3676)
!3693 = !DILocalVariable(name: "n", arg: 1, scope: !3694, file: !3677, line: 99, type: !74)
!3694 = distinct !DISubprogram(name: "xnmalloc", scope: !3677, file: !3677, line: 99, type: !3678, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3695, retainedNodes: !4)
!3695 = distinct !DICompileUnit(language: DW_LANG_C99, file: !134, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !135, nameTableKind: None)
!3696 = !DILocalVariable(name: "s", arg: 2, scope: !3694, file: !3677, line: 99, type: !74)
!3697 = distinct !DISubprogram(name: "xmalloc", scope: !3698, file: !3698, line: 39, type: !3699, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !133, retainedNodes: !4)
!3698 = !DIFile(filename: "lib/xmalloc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3699 = !DISubroutineType(types: !3700)
!3700 = !{!6, !74}
!3701 = !DILocalVariable(name: "n", arg: 1, scope: !3697, file: !3698, line: 39, type: !74)
!3702 = !DILocation(line: 39, column: 17, scope: !3697)
!3703 = !DILocalVariable(name: "p", scope: !3697, file: !3698, line: 41, type: !6)
!3704 = !DILocation(line: 41, column: 9, scope: !3697)
!3705 = !DILocation(line: 41, column: 21, scope: !3697)
!3706 = !DILocation(line: 41, column: 13, scope: !3697)
!3707 = !DILocation(line: 42, column: 8, scope: !3708)
!3708 = distinct !DILexicalBlock(scope: !3697, file: !3698, line: 42, column: 7)
!3709 = !DILocation(line: 42, column: 10, scope: !3708)
!3710 = !DILocation(line: 42, column: 13, scope: !3708)
!3711 = !DILocation(line: 42, column: 15, scope: !3708)
!3712 = !DILocation(line: 42, column: 7, scope: !3697)
!3713 = !DILocation(line: 43, column: 5, scope: !3708)
!3714 = !DILocation(line: 44, column: 10, scope: !3697)
!3715 = !DILocation(line: 44, column: 3, scope: !3697)
!3716 = !DILocalVariable(name: "n", arg: 1, scope: !3717, file: !3698, line: 39, type: !74)
!3717 = distinct !DISubprogram(name: "xmalloc", scope: !3698, file: !3698, line: 39, type: !3699, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3718, retainedNodes: !4)
!3718 = distinct !DICompileUnit(language: DW_LANG_C99, file: !134, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !135, nameTableKind: None)
!3719 = !DILocalVariable(name: "p", scope: !3717, file: !3698, line: 41, type: !6)
!3720 = distinct !DISubprogram(name: "xrealloc", scope: !3698, file: !3698, line: 51, type: !3721, scopeLine: 52, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !133, retainedNodes: !4)
!3721 = !DISubroutineType(types: !3722)
!3722 = !{!6, !6, !74}
!3723 = !DILocalVariable(name: "p", arg: 1, scope: !3720, file: !3698, line: 51, type: !6)
!3724 = !DILocation(line: 51, column: 17, scope: !3720)
!3725 = !DILocalVariable(name: "n", arg: 2, scope: !3720, file: !3698, line: 51, type: !74)
!3726 = !DILocation(line: 51, column: 27, scope: !3720)
!3727 = !DILocation(line: 53, column: 8, scope: !3728)
!3728 = distinct !DILexicalBlock(scope: !3720, file: !3698, line: 53, column: 7)
!3729 = !DILocation(line: 53, column: 10, scope: !3728)
!3730 = !DILocation(line: 53, column: 13, scope: !3728)
!3731 = !DILocation(line: 53, column: 7, scope: !3720)
!3732 = !DILocation(line: 57, column: 13, scope: !3733)
!3733 = distinct !DILexicalBlock(scope: !3728, file: !3698, line: 54, column: 5)
!3734 = !DILocation(line: 57, column: 7, scope: !3733)
!3735 = !DILocation(line: 58, column: 7, scope: !3733)
!3736 = !DILocation(line: 61, column: 16, scope: !3720)
!3737 = !DILocation(line: 61, column: 19, scope: !3720)
!3738 = !DILocation(line: 61, column: 7, scope: !3720)
!3739 = !DILocation(line: 61, column: 5, scope: !3720)
!3740 = !DILocation(line: 62, column: 8, scope: !3741)
!3741 = distinct !DILexicalBlock(scope: !3720, file: !3698, line: 62, column: 7)
!3742 = !DILocation(line: 62, column: 10, scope: !3741)
!3743 = !DILocation(line: 62, column: 13, scope: !3741)
!3744 = !DILocation(line: 62, column: 7, scope: !3720)
!3745 = !DILocation(line: 63, column: 5, scope: !3741)
!3746 = !DILocation(line: 64, column: 10, scope: !3720)
!3747 = !DILocation(line: 64, column: 3, scope: !3720)
!3748 = !DILocation(line: 65, column: 1, scope: !3720)
!3749 = !DILocalVariable(name: "p", arg: 1, scope: !3750, file: !3698, line: 51, type: !6)
!3750 = distinct !DISubprogram(name: "xrealloc", scope: !3698, file: !3698, line: 51, type: !3721, scopeLine: 52, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3751, retainedNodes: !4)
!3751 = distinct !DICompileUnit(language: DW_LANG_C99, file: !134, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !135, nameTableKind: None)
!3752 = !DILocalVariable(name: "n", arg: 2, scope: !3750, file: !3698, line: 51, type: !74)
!3753 = distinct !DISubprogram(name: "xcharalloc", scope: !3677, file: !3677, line: 216, type: !1094, scopeLine: 217, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !133, retainedNodes: !4)
!3754 = !DILocalVariable(name: "n", arg: 1, scope: !3753, file: !3677, line: 216, type: !74)
!3755 = !DILocation(line: 216, column: 20, scope: !3753)
!3756 = !DILocation(line: 218, column: 10, scope: !3753)
!3757 = !DILocation(line: 218, column: 3, scope: !3753)
!3758 = !DILocalVariable(name: "n", arg: 1, scope: !3759, file: !3677, line: 216, type: !74)
!3759 = distinct !DISubprogram(name: "xcharalloc", scope: !3677, file: !3677, line: 216, type: !1094, scopeLine: 217, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3760, retainedNodes: !4)
!3760 = distinct !DICompileUnit(language: DW_LANG_C99, file: !134, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !135, nameTableKind: None)
!3761 = distinct !DISubprogram(name: "xalloc_die", scope: !3762, file: !3762, line: 32, type: !1230, scopeLine: 33, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !136, retainedNodes: !4)
!3762 = !DIFile(filename: "lib/xalloc-die.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3763 = !DILocation(line: 34, column: 10, scope: !3761)
!3764 = !DILocation(line: 34, column: 33, scope: !3761)
!3765 = !DILocation(line: 34, column: 3, scope: !3761)
!3766 = !DILocation(line: 40, column: 3, scope: !3761)
!3767 = distinct !DISubprogram(name: "xgetcwd", scope: !3768, file: !3768, line: 35, type: !425, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !138, retainedNodes: !4)
!3768 = !DIFile(filename: "lib/xgetcwd.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3769 = !DILocalVariable(name: "cwd", scope: !3767, file: !3768, line: 37, type: !7)
!3770 = !DILocation(line: 37, column: 9, scope: !3767)
!3771 = !DILocation(line: 37, column: 15, scope: !3767)
!3772 = !DILocation(line: 38, column: 9, scope: !3773)
!3773 = distinct !DILexicalBlock(scope: !3767, file: !3768, line: 38, column: 7)
!3774 = !DILocation(line: 38, column: 13, scope: !3773)
!3775 = !DILocation(line: 38, column: 16, scope: !3773)
!3776 = !DILocation(line: 38, column: 22, scope: !3773)
!3777 = !DILocation(line: 38, column: 7, scope: !3767)
!3778 = !DILocation(line: 39, column: 5, scope: !3773)
!3779 = !DILocation(line: 40, column: 10, scope: !3767)
!3780 = !DILocation(line: 40, column: 3, scope: !3767)
!3781 = !DILocalVariable(name: "cwd", scope: !3782, file: !3768, line: 37, type: !7)
!3782 = distinct !DISubprogram(name: "xgetcwd", scope: !3768, file: !3768, line: 35, type: !425, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3783, retainedNodes: !4)
!3783 = distinct !DICompileUnit(language: DW_LANG_C99, file: !139, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!3784 = distinct !DISubprogram(name: "rpl_mbrtowc", scope: !3785, file: !3785, line: 86, type: !3786, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !140, retainedNodes: !4)
!3785 = !DIFile(filename: "lib/mbrtowc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3786 = !DISubroutineType(types: !3787)
!3787 = !{!74, !3788, !16, !74, !3789}
!3788 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2324, size: 64)
!3789 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3790, size: 64)
!3790 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !2295, line: 6, baseType: !3791)
!3791 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !2297, line: 21, baseType: !3792)
!3792 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2297, line: 13, size: 64, elements: !3793)
!3793 = !{!3794, !3795}
!3794 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !3792, file: !2297, line: 15, baseType: !19, size: 32)
!3795 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !3792, file: !2297, line: 20, baseType: !3796, size: 32, offset: 32)
!3796 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !3792, file: !2297, line: 16, size: 32, elements: !3797)
!3797 = !{!3798, !3799}
!3798 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !3796, file: !2297, line: 18, baseType: !59, size: 32)
!3799 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !3796, file: !2297, line: 19, baseType: !2306, size: 32)
!3800 = !DILocalVariable(name: "pwc", arg: 1, scope: !3784, file: !3785, line: 86, type: !3788)
!3801 = !DILocation(line: 86, column: 23, scope: !3784)
!3802 = !DILocalVariable(name: "s", arg: 2, scope: !3784, file: !3785, line: 86, type: !16)
!3803 = !DILocation(line: 86, column: 40, scope: !3784)
!3804 = !DILocalVariable(name: "n", arg: 3, scope: !3784, file: !3785, line: 86, type: !74)
!3805 = !DILocation(line: 86, column: 50, scope: !3784)
!3806 = !DILocalVariable(name: "ps", arg: 4, scope: !3784, file: !3785, line: 86, type: !3789)
!3807 = !DILocation(line: 86, column: 64, scope: !3784)
!3808 = !DILocalVariable(name: "ret", scope: !3784, file: !3785, line: 88, type: !74)
!3809 = !DILocation(line: 88, column: 10, scope: !3784)
!3810 = !DILocalVariable(name: "wc", scope: !3784, file: !3785, line: 89, type: !2324)
!3811 = !DILocation(line: 89, column: 11, scope: !3784)
!3812 = !DILocation(line: 105, column: 9, scope: !3813)
!3813 = distinct !DILexicalBlock(scope: !3784, file: !3785, line: 105, column: 7)
!3814 = !DILocation(line: 105, column: 7, scope: !3784)
!3815 = !DILocation(line: 106, column: 9, scope: !3813)
!3816 = !DILocation(line: 106, column: 5, scope: !3813)
!3817 = !DILocation(line: 145, column: 18, scope: !3784)
!3818 = !DILocation(line: 145, column: 23, scope: !3784)
!3819 = !DILocation(line: 145, column: 26, scope: !3784)
!3820 = !DILocation(line: 145, column: 29, scope: !3784)
!3821 = !DILocation(line: 145, column: 9, scope: !3784)
!3822 = !DILocation(line: 145, column: 7, scope: !3784)
!3823 = !DILocation(line: 154, column: 22, scope: !3824)
!3824 = distinct !DILexicalBlock(scope: !3784, file: !3785, line: 154, column: 7)
!3825 = !DILocation(line: 154, column: 19, scope: !3824)
!3826 = !DILocation(line: 154, column: 26, scope: !3824)
!3827 = !DILocation(line: 154, column: 29, scope: !3824)
!3828 = !DILocation(line: 154, column: 31, scope: !3824)
!3829 = !DILocation(line: 154, column: 36, scope: !3824)
!3830 = !DILocation(line: 154, column: 41, scope: !3824)
!3831 = !DILocation(line: 154, column: 7, scope: !3784)
!3832 = !DILocalVariable(name: "uc", scope: !3833, file: !3785, line: 156, type: !148)
!3833 = distinct !DILexicalBlock(scope: !3824, file: !3785, line: 155, column: 5)
!3834 = !DILocation(line: 156, column: 21, scope: !3833)
!3835 = !DILocation(line: 156, column: 27, scope: !3833)
!3836 = !DILocation(line: 156, column: 26, scope: !3833)
!3837 = !DILocation(line: 157, column: 14, scope: !3833)
!3838 = !DILocation(line: 157, column: 8, scope: !3833)
!3839 = !DILocation(line: 157, column: 12, scope: !3833)
!3840 = !DILocation(line: 158, column: 7, scope: !3833)
!3841 = !DILocation(line: 162, column: 10, scope: !3784)
!3842 = !DILocation(line: 162, column: 3, scope: !3784)
!3843 = !DILocation(line: 163, column: 1, scope: !3784)
!3844 = !DILocalVariable(name: "pwc", arg: 1, scope: !3845, file: !3785, line: 86, type: !3788)
!3845 = distinct !DISubprogram(name: "rpl_mbrtowc", scope: !3785, file: !3785, line: 86, type: !3846, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3859, retainedNodes: !4)
!3846 = !DISubroutineType(types: !3847)
!3847 = !{!74, !3788, !16, !74, !3848}
!3848 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3849, size: 64)
!3849 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !2295, line: 6, baseType: !3850)
!3850 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !2297, line: 21, baseType: !3851)
!3851 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2297, line: 13, size: 64, elements: !3852)
!3852 = !{!3853, !3854}
!3853 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !3851, file: !2297, line: 15, baseType: !19, size: 32)
!3854 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !3851, file: !2297, line: 20, baseType: !3855, size: 32, offset: 32)
!3855 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !3851, file: !2297, line: 16, size: 32, elements: !3856)
!3856 = !{!3857, !3858}
!3857 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !3855, file: !2297, line: 18, baseType: !59, size: 32)
!3858 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !3855, file: !2297, line: 19, baseType: !2306, size: 32)
!3859 = distinct !DICompileUnit(language: DW_LANG_C99, file: !141, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !142, nameTableKind: None)
!3860 = !DILocalVariable(name: "s", arg: 2, scope: !3845, file: !3785, line: 86, type: !16)
!3861 = !DILocalVariable(name: "n", arg: 3, scope: !3845, file: !3785, line: 86, type: !74)
!3862 = !DILocalVariable(name: "ps", arg: 4, scope: !3845, file: !3785, line: 86, type: !3848)
!3863 = !DILocalVariable(name: "ret", scope: !3845, file: !3785, line: 88, type: !74)
!3864 = !DILocalVariable(name: "wc", scope: !3845, file: !3785, line: 89, type: !2324)
!3865 = distinct !DISubprogram(name: "c_strcasecmp", scope: !3866, file: !3866, line: 27, type: !3867, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !143, retainedNodes: !4)
!3866 = !DIFile(filename: "lib/c-strcasecmp.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3867 = !DISubroutineType(types: !3868)
!3868 = !{!19, !16, !16}
!3869 = !DILocalVariable(name: "s1", arg: 1, scope: !3865, file: !3866, line: 27, type: !16)
!3870 = !DILocation(line: 27, column: 27, scope: !3865)
!3871 = !DILocalVariable(name: "s2", arg: 2, scope: !3865, file: !3866, line: 27, type: !16)
!3872 = !DILocation(line: 27, column: 43, scope: !3865)
!3873 = !DILocalVariable(name: "p1", scope: !3865, file: !3866, line: 29, type: !146)
!3874 = !DILocation(line: 29, column: 33, scope: !3865)
!3875 = !DILocation(line: 29, column: 62, scope: !3865)
!3876 = !DILocalVariable(name: "p2", scope: !3865, file: !3866, line: 30, type: !146)
!3877 = !DILocation(line: 30, column: 33, scope: !3865)
!3878 = !DILocation(line: 30, column: 62, scope: !3865)
!3879 = !DILocalVariable(name: "c1", scope: !3865, file: !3866, line: 31, type: !148)
!3880 = !DILocation(line: 31, column: 17, scope: !3865)
!3881 = !DILocalVariable(name: "c2", scope: !3865, file: !3866, line: 31, type: !148)
!3882 = !DILocation(line: 31, column: 21, scope: !3865)
!3883 = !DILocation(line: 33, column: 7, scope: !3884)
!3884 = distinct !DILexicalBlock(scope: !3865, file: !3866, line: 33, column: 7)
!3885 = !DILocation(line: 33, column: 13, scope: !3884)
!3886 = !DILocation(line: 33, column: 10, scope: !3884)
!3887 = !DILocation(line: 33, column: 7, scope: !3865)
!3888 = !DILocation(line: 34, column: 5, scope: !3884)
!3889 = !DILocation(line: 36, column: 3, scope: !3865)
!3890 = !DILocation(line: 38, column: 24, scope: !3891)
!3891 = distinct !DILexicalBlock(scope: !3865, file: !3866, line: 37, column: 5)
!3892 = !DILocation(line: 38, column: 23, scope: !3891)
!3893 = !DILocation(line: 38, column: 12, scope: !3891)
!3894 = !DILocation(line: 38, column: 10, scope: !3891)
!3895 = !DILocation(line: 39, column: 24, scope: !3891)
!3896 = !DILocation(line: 39, column: 23, scope: !3891)
!3897 = !DILocation(line: 39, column: 12, scope: !3891)
!3898 = !DILocation(line: 39, column: 10, scope: !3891)
!3899 = !DILocation(line: 41, column: 11, scope: !3900)
!3900 = distinct !DILexicalBlock(scope: !3891, file: !3866, line: 41, column: 11)
!3901 = !DILocation(line: 41, column: 14, scope: !3900)
!3902 = !DILocation(line: 41, column: 11, scope: !3891)
!3903 = !DILocation(line: 42, column: 9, scope: !3900)
!3904 = !DILocation(line: 44, column: 7, scope: !3891)
!3905 = !DILocation(line: 45, column: 7, scope: !3891)
!3906 = !DILocation(line: 46, column: 5, scope: !3891)
!3907 = !DILocation(line: 47, column: 10, scope: !3865)
!3908 = !DILocation(line: 47, column: 16, scope: !3865)
!3909 = !DILocation(line: 47, column: 13, scope: !3865)
!3910 = distinct !{!3910, !3889, !3911}
!3911 = !DILocation(line: 47, column: 18, scope: !3865)
!3912 = !DILocation(line: 50, column: 12, scope: !3913)
!3913 = distinct !DILexicalBlock(scope: !3865, file: !3866, line: 49, column: 7)
!3914 = !DILocation(line: 50, column: 17, scope: !3913)
!3915 = !DILocation(line: 50, column: 15, scope: !3913)
!3916 = !DILocation(line: 50, column: 5, scope: !3913)
!3917 = !DILocation(line: 56, column: 1, scope: !3865)
!3918 = !DILocalVariable(name: "s1", arg: 1, scope: !3919, file: !3866, line: 27, type: !16)
!3919 = distinct !DISubprogram(name: "c_strcasecmp", scope: !3866, file: !3866, line: 27, type: !3867, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3920, retainedNodes: !4)
!3920 = distinct !DICompileUnit(language: DW_LANG_C99, file: !144, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !145, nameTableKind: None)
!3921 = !DILocalVariable(name: "s2", arg: 2, scope: !3919, file: !3866, line: 27, type: !16)
!3922 = !DILocalVariable(name: "p1", scope: !3919, file: !3866, line: 29, type: !146)
!3923 = !DILocalVariable(name: "p2", scope: !3919, file: !3866, line: 30, type: !146)
!3924 = !DILocalVariable(name: "c1", scope: !3919, file: !3866, line: 31, type: !148)
!3925 = !DILocalVariable(name: "c2", scope: !3919, file: !3866, line: 31, type: !148)
!3926 = distinct !DISubprogram(name: "close_stream", scope: !3927, file: !3927, line: 56, type: !3928, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !149, retainedNodes: !4)
!3927 = !DIFile(filename: "lib/close-stream.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3928 = !DISubroutineType(types: !3929)
!3929 = !{!19, !3930}
!3930 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3931, size: 64)
!3931 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3266, line: 7, baseType: !3932)
!3932 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3268, line: 49, size: 1728, elements: !3933)
!3933 = !{!3934, !3935, !3936, !3937, !3938, !3939, !3940, !3941, !3942, !3943, !3944, !3945, !3946, !3947, !3949, !3950, !3951, !3952, !3953, !3954, !3955, !3956, !3957, !3958, !3959, !3960, !3961, !3962, !3963}
!3934 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3932, file: !3268, line: 51, baseType: !19, size: 32)
!3935 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3932, file: !3268, line: 54, baseType: !7, size: 64, offset: 64)
!3936 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3932, file: !3268, line: 55, baseType: !7, size: 64, offset: 128)
!3937 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3932, file: !3268, line: 56, baseType: !7, size: 64, offset: 192)
!3938 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3932, file: !3268, line: 57, baseType: !7, size: 64, offset: 256)
!3939 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3932, file: !3268, line: 58, baseType: !7, size: 64, offset: 320)
!3940 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3932, file: !3268, line: 59, baseType: !7, size: 64, offset: 384)
!3941 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3932, file: !3268, line: 60, baseType: !7, size: 64, offset: 448)
!3942 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3932, file: !3268, line: 61, baseType: !7, size: 64, offset: 512)
!3943 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3932, file: !3268, line: 64, baseType: !7, size: 64, offset: 576)
!3944 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3932, file: !3268, line: 65, baseType: !7, size: 64, offset: 640)
!3945 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3932, file: !3268, line: 66, baseType: !7, size: 64, offset: 704)
!3946 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3932, file: !3268, line: 68, baseType: !3283, size: 64, offset: 768)
!3947 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3932, file: !3268, line: 70, baseType: !3948, size: 64, offset: 832)
!3948 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3932, size: 64)
!3949 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3932, file: !3268, line: 72, baseType: !19, size: 32, offset: 896)
!3950 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3932, file: !3268, line: 73, baseType: !19, size: 32, offset: 928)
!3951 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3932, file: !3268, line: 74, baseType: !447, size: 64, offset: 960)
!3952 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3932, file: !3268, line: 77, baseType: !73, size: 16, offset: 1024)
!3953 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3932, file: !3268, line: 78, baseType: !3292, size: 8, offset: 1040)
!3954 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3932, file: !3268, line: 79, baseType: !3294, size: 8, offset: 1048)
!3955 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3932, file: !3268, line: 81, baseType: !3298, size: 64, offset: 1088)
!3956 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3932, file: !3268, line: 89, baseType: !3301, size: 64, offset: 1152)
!3957 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3932, file: !3268, line: 91, baseType: !3303, size: 64, offset: 1216)
!3958 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3932, file: !3268, line: 92, baseType: !3306, size: 64, offset: 1280)
!3959 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3932, file: !3268, line: 93, baseType: !3948, size: 64, offset: 1344)
!3960 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3932, file: !3268, line: 94, baseType: !6, size: 64, offset: 1408)
!3961 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3932, file: !3268, line: 95, baseType: !74, size: 64, offset: 1472)
!3962 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3932, file: !3268, line: 96, baseType: !19, size: 32, offset: 1536)
!3963 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3932, file: !3268, line: 98, baseType: !3313, size: 160, offset: 1568)
!3964 = !DILocalVariable(name: "stream", arg: 1, scope: !3926, file: !3927, line: 56, type: !3930)
!3965 = !DILocation(line: 56, column: 21, scope: !3926)
!3966 = !DILocalVariable(name: "some_pending", scope: !3926, file: !3927, line: 58, type: !3967)
!3967 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !38)
!3968 = !DILocation(line: 58, column: 14, scope: !3926)
!3969 = !DILocation(line: 58, column: 42, scope: !3926)
!3970 = !DILocation(line: 58, column: 30, scope: !3926)
!3971 = !DILocation(line: 58, column: 50, scope: !3926)
!3972 = !DILocalVariable(name: "prev_fail", scope: !3926, file: !3927, line: 59, type: !3967)
!3973 = !DILocation(line: 59, column: 14, scope: !3926)
!3974 = !DILocation(line: 59, column: 27, scope: !3926)
!3975 = !DILocation(line: 59, column: 43, scope: !3926)
!3976 = !DILocalVariable(name: "fclose_fail", scope: !3926, file: !3927, line: 60, type: !3967)
!3977 = !DILocation(line: 60, column: 14, scope: !3926)
!3978 = !DILocation(line: 60, column: 37, scope: !3926)
!3979 = !DILocation(line: 60, column: 29, scope: !3926)
!3980 = !DILocation(line: 60, column: 45, scope: !3926)
!3981 = !DILocation(line: 70, column: 7, scope: !3982)
!3982 = distinct !DILexicalBlock(scope: !3926, file: !3927, line: 70, column: 7)
!3983 = !DILocation(line: 70, column: 17, scope: !3982)
!3984 = !DILocation(line: 70, column: 21, scope: !3982)
!3985 = !DILocation(line: 70, column: 33, scope: !3982)
!3986 = !DILocation(line: 70, column: 37, scope: !3982)
!3987 = !DILocation(line: 70, column: 50, scope: !3982)
!3988 = !DILocation(line: 70, column: 53, scope: !3982)
!3989 = !DILocation(line: 70, column: 59, scope: !3982)
!3990 = !DILocation(line: 70, column: 7, scope: !3926)
!3991 = !DILocation(line: 72, column: 13, scope: !3992)
!3992 = distinct !DILexicalBlock(scope: !3993, file: !3927, line: 72, column: 11)
!3993 = distinct !DILexicalBlock(scope: !3982, file: !3927, line: 71, column: 5)
!3994 = !DILocation(line: 72, column: 11, scope: !3993)
!3995 = !DILocation(line: 73, column: 9, scope: !3992)
!3996 = !DILocation(line: 73, column: 15, scope: !3992)
!3997 = !DILocation(line: 74, column: 7, scope: !3993)
!3998 = !DILocation(line: 77, column: 3, scope: !3926)
!3999 = !DILocation(line: 78, column: 1, scope: !3926)
!4000 = !DILocalVariable(name: "stream", arg: 1, scope: !4001, file: !3927, line: 56, type: !4004)
!4001 = distinct !DISubprogram(name: "close_stream", scope: !3927, file: !3927, line: 56, type: !4002, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4038, retainedNodes: !4)
!4002 = !DISubroutineType(types: !4003)
!4003 = !{!19, !4004}
!4004 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4005, size: 64)
!4005 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3266, line: 7, baseType: !4006)
!4006 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3268, line: 49, size: 1728, elements: !4007)
!4007 = !{!4008, !4009, !4010, !4011, !4012, !4013, !4014, !4015, !4016, !4017, !4018, !4019, !4020, !4021, !4023, !4024, !4025, !4026, !4027, !4028, !4029, !4030, !4031, !4032, !4033, !4034, !4035, !4036, !4037}
!4008 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !4006, file: !3268, line: 51, baseType: !19, size: 32)
!4009 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !4006, file: !3268, line: 54, baseType: !7, size: 64, offset: 64)
!4010 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !4006, file: !3268, line: 55, baseType: !7, size: 64, offset: 128)
!4011 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !4006, file: !3268, line: 56, baseType: !7, size: 64, offset: 192)
!4012 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !4006, file: !3268, line: 57, baseType: !7, size: 64, offset: 256)
!4013 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !4006, file: !3268, line: 58, baseType: !7, size: 64, offset: 320)
!4014 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !4006, file: !3268, line: 59, baseType: !7, size: 64, offset: 384)
!4015 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !4006, file: !3268, line: 60, baseType: !7, size: 64, offset: 448)
!4016 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !4006, file: !3268, line: 61, baseType: !7, size: 64, offset: 512)
!4017 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !4006, file: !3268, line: 64, baseType: !7, size: 64, offset: 576)
!4018 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !4006, file: !3268, line: 65, baseType: !7, size: 64, offset: 640)
!4019 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !4006, file: !3268, line: 66, baseType: !7, size: 64, offset: 704)
!4020 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !4006, file: !3268, line: 68, baseType: !3283, size: 64, offset: 768)
!4021 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !4006, file: !3268, line: 70, baseType: !4022, size: 64, offset: 832)
!4022 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4006, size: 64)
!4023 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !4006, file: !3268, line: 72, baseType: !19, size: 32, offset: 896)
!4024 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !4006, file: !3268, line: 73, baseType: !19, size: 32, offset: 928)
!4025 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !4006, file: !3268, line: 74, baseType: !447, size: 64, offset: 960)
!4026 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !4006, file: !3268, line: 77, baseType: !73, size: 16, offset: 1024)
!4027 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !4006, file: !3268, line: 78, baseType: !3292, size: 8, offset: 1040)
!4028 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !4006, file: !3268, line: 79, baseType: !3294, size: 8, offset: 1048)
!4029 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !4006, file: !3268, line: 81, baseType: !3298, size: 64, offset: 1088)
!4030 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !4006, file: !3268, line: 89, baseType: !3301, size: 64, offset: 1152)
!4031 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !4006, file: !3268, line: 91, baseType: !3303, size: 64, offset: 1216)
!4032 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !4006, file: !3268, line: 92, baseType: !3306, size: 64, offset: 1280)
!4033 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !4006, file: !3268, line: 93, baseType: !4022, size: 64, offset: 1344)
!4034 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !4006, file: !3268, line: 94, baseType: !6, size: 64, offset: 1408)
!4035 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !4006, file: !3268, line: 95, baseType: !74, size: 64, offset: 1472)
!4036 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !4006, file: !3268, line: 96, baseType: !19, size: 32, offset: 1536)
!4037 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !4006, file: !3268, line: 98, baseType: !3313, size: 160, offset: 1568)
!4038 = distinct !DICompileUnit(language: DW_LANG_C99, file: !150, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!4039 = !DILocalVariable(name: "some_pending", scope: !4001, file: !3927, line: 58, type: !3967)
!4040 = !DILocalVariable(name: "prev_fail", scope: !4001, file: !3927, line: 59, type: !3967)
!4041 = !DILocalVariable(name: "fclose_fail", scope: !4001, file: !3927, line: 60, type: !3967)
!4042 = distinct !DISubprogram(name: "hard_locale", scope: !4043, file: !4043, line: 27, type: !4044, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !151, retainedNodes: !4)
!4043 = !DIFile(filename: "lib/hard-locale.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4044 = !DISubroutineType(types: !4045)
!4045 = !{!38, !19}
!4046 = !DILocalVariable(name: "category", arg: 1, scope: !4042, file: !4043, line: 27, type: !19)
!4047 = !DILocation(line: 27, column: 18, scope: !4042)
!4048 = !DILocalVariable(name: "locale", scope: !4042, file: !4043, line: 29, type: !4049)
!4049 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 2056, elements: !4050)
!4050 = !{!4051}
!4051 = !DISubrange(count: 257)
!4052 = !DILocation(line: 29, column: 8, scope: !4042)
!4053 = !DILocation(line: 31, column: 25, scope: !4054)
!4054 = distinct !DILexicalBlock(scope: !4042, file: !4043, line: 31, column: 7)
!4055 = !DILocation(line: 31, column: 35, scope: !4054)
!4056 = !DILocation(line: 31, column: 7, scope: !4054)
!4057 = !DILocation(line: 31, column: 7, scope: !4042)
!4058 = !DILocation(line: 32, column: 5, scope: !4054)
!4059 = !DILocation(line: 34, column: 20, scope: !4042)
!4060 = !DILocation(line: 34, column: 12, scope: !4042)
!4061 = !DILocation(line: 34, column: 33, scope: !4042)
!4062 = !DILocation(line: 34, column: 38, scope: !4042)
!4063 = !DILocation(line: 34, column: 49, scope: !4042)
!4064 = !DILocation(line: 34, column: 41, scope: !4042)
!4065 = !DILocation(line: 34, column: 66, scope: !4042)
!4066 = !DILocation(line: 34, column: 10, scope: !4042)
!4067 = !DILocation(line: 34, column: 3, scope: !4042)
!4068 = !DILocation(line: 35, column: 1, scope: !4042)
!4069 = !DILocalVariable(name: "category", arg: 1, scope: !4070, file: !4043, line: 27, type: !19)
!4070 = distinct !DISubprogram(name: "hard_locale", scope: !4043, file: !4043, line: 27, type: !4044, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4071, retainedNodes: !4)
!4071 = distinct !DICompileUnit(language: DW_LANG_C99, file: !152, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!4072 = !DILocalVariable(name: "locale", scope: !4070, file: !4043, line: 29, type: !4049)
!4073 = distinct !DISubprogram(name: "locale_charset", scope: !4074, file: !4074, line: 831, type: !4075, scopeLine: 832, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !153, retainedNodes: !4)
!4074 = !DIFile(filename: "lib/localcharset.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4075 = !DISubroutineType(types: !4076)
!4076 = !{!16}
!4077 = !DILocalVariable(name: "codeset", scope: !4073, file: !4074, line: 833, type: !16)
!4078 = !DILocation(line: 833, column: 15, scope: !4073)
!4079 = !DILocation(line: 847, column: 13, scope: !4073)
!4080 = !DILocation(line: 847, column: 11, scope: !4073)
!4081 = !DILocation(line: 911, column: 7, scope: !4082)
!4082 = distinct !DILexicalBlock(scope: !4073, file: !4074, line: 911, column: 7)
!4083 = !DILocation(line: 911, column: 15, scope: !4082)
!4084 = !DILocation(line: 911, column: 7, scope: !4073)
!4085 = !DILocation(line: 913, column: 13, scope: !4082)
!4086 = !DILocation(line: 913, column: 5, scope: !4082)
!4087 = !DILocation(line: 1070, column: 13, scope: !4088)
!4088 = distinct !DILexicalBlock(scope: !4089, file: !4074, line: 1070, column: 13)
!4089 = distinct !DILexicalBlock(scope: !4090, file: !4074, line: 1060, column: 7)
!4090 = distinct !DILexicalBlock(scope: !4073, file: !4074, line: 1019, column: 3)
!4091 = !DILocation(line: 1070, column: 24, scope: !4088)
!4092 = !DILocation(line: 1070, column: 13, scope: !4089)
!4093 = !DILocation(line: 1071, column: 19, scope: !4088)
!4094 = !DILocation(line: 1071, column: 11, scope: !4088)
!4095 = !DILocation(line: 1158, column: 10, scope: !4073)
!4096 = !DILocation(line: 1158, column: 3, scope: !4073)
!4097 = !DILocalVariable(name: "codeset", scope: !4098, file: !4074, line: 833, type: !16)
!4098 = distinct !DISubprogram(name: "locale_charset", scope: !4074, file: !4074, line: 831, type: !4075, scopeLine: 832, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4099, retainedNodes: !4)
!4099 = distinct !DICompileUnit(language: DW_LANG_C99, file: !154, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!4100 = distinct !DISubprogram(name: "setlocale_null_r", scope: !4101, file: !4101, line: 269, type: !4102, scopeLine: 270, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !155, retainedNodes: !4)
!4101 = !DIFile(filename: "lib/setlocale_null.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4102 = !DISubroutineType(types: !4103)
!4103 = !{!19, !19, !7, !74}
!4104 = !DILocalVariable(name: "category", arg: 1, scope: !4100, file: !4101, line: 269, type: !19)
!4105 = !DILocation(line: 269, column: 23, scope: !4100)
!4106 = !DILocalVariable(name: "buf", arg: 2, scope: !4100, file: !4101, line: 269, type: !7)
!4107 = !DILocation(line: 269, column: 39, scope: !4100)
!4108 = !DILocalVariable(name: "bufsize", arg: 3, scope: !4100, file: !4101, line: 269, type: !74)
!4109 = !DILocation(line: 269, column: 51, scope: !4100)
!4110 = !DILocation(line: 274, column: 35, scope: !4100)
!4111 = !DILocation(line: 274, column: 45, scope: !4100)
!4112 = !DILocation(line: 274, column: 50, scope: !4100)
!4113 = !DILocation(line: 274, column: 10, scope: !4100)
!4114 = !DILocation(line: 274, column: 3, scope: !4100)
!4115 = !DILocalVariable(name: "category", arg: 1, scope: !4116, file: !4101, line: 269, type: !19)
!4116 = distinct !DISubprogram(name: "setlocale_null_r", scope: !4101, file: !4101, line: 269, type: !4102, scopeLine: 270, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4117, retainedNodes: !4)
!4117 = distinct !DICompileUnit(language: DW_LANG_C99, file: !156, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!4118 = !DILocalVariable(name: "buf", arg: 2, scope: !4116, file: !4101, line: 269, type: !7)
!4119 = !DILocalVariable(name: "bufsize", arg: 3, scope: !4116, file: !4101, line: 269, type: !74)
!4120 = distinct !DISubprogram(name: "setlocale_null_unlocked", scope: !4101, file: !4101, line: 91, type: !4102, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !155, retainedNodes: !4)
!4121 = !DILocalVariable(name: "category", arg: 1, scope: !4120, file: !4101, line: 91, type: !19)
!4122 = !DILocation(line: 91, column: 30, scope: !4120)
!4123 = !DILocalVariable(name: "buf", arg: 2, scope: !4120, file: !4101, line: 91, type: !7)
!4124 = !DILocation(line: 91, column: 46, scope: !4120)
!4125 = !DILocalVariable(name: "bufsize", arg: 3, scope: !4120, file: !4101, line: 91, type: !74)
!4126 = !DILocation(line: 91, column: 58, scope: !4120)
!4127 = !DILocalVariable(name: "result", scope: !4120, file: !4101, line: 140, type: !16)
!4128 = !DILocation(line: 140, column: 15, scope: !4120)
!4129 = !DILocation(line: 140, column: 51, scope: !4120)
!4130 = !DILocation(line: 140, column: 24, scope: !4120)
!4131 = !DILocation(line: 142, column: 7, scope: !4132)
!4132 = distinct !DILexicalBlock(scope: !4120, file: !4101, line: 142, column: 7)
!4133 = !DILocation(line: 142, column: 14, scope: !4132)
!4134 = !DILocation(line: 142, column: 7, scope: !4120)
!4135 = !DILocation(line: 145, column: 11, scope: !4136)
!4136 = distinct !DILexicalBlock(scope: !4137, file: !4101, line: 145, column: 11)
!4137 = distinct !DILexicalBlock(scope: !4132, file: !4101, line: 143, column: 5)
!4138 = !DILocation(line: 145, column: 19, scope: !4136)
!4139 = !DILocation(line: 145, column: 11, scope: !4137)
!4140 = !DILocation(line: 149, column: 9, scope: !4136)
!4141 = !DILocation(line: 149, column: 16, scope: !4136)
!4142 = !DILocation(line: 150, column: 7, scope: !4137)
!4143 = !DILocalVariable(name: "length", scope: !4144, file: !4101, line: 154, type: !74)
!4144 = distinct !DILexicalBlock(scope: !4132, file: !4101, line: 153, column: 5)
!4145 = !DILocation(line: 154, column: 14, scope: !4144)
!4146 = !DILocation(line: 154, column: 31, scope: !4144)
!4147 = !DILocation(line: 154, column: 23, scope: !4144)
!4148 = !DILocation(line: 155, column: 11, scope: !4149)
!4149 = distinct !DILexicalBlock(scope: !4144, file: !4101, line: 155, column: 11)
!4150 = !DILocation(line: 155, column: 20, scope: !4149)
!4151 = !DILocation(line: 155, column: 18, scope: !4149)
!4152 = !DILocation(line: 155, column: 11, scope: !4144)
!4153 = !DILocation(line: 157, column: 19, scope: !4154)
!4154 = distinct !DILexicalBlock(scope: !4149, file: !4101, line: 156, column: 9)
!4155 = !DILocation(line: 157, column: 24, scope: !4154)
!4156 = !DILocation(line: 157, column: 32, scope: !4154)
!4157 = !DILocation(line: 157, column: 39, scope: !4154)
!4158 = !DILocation(line: 157, column: 11, scope: !4154)
!4159 = !DILocation(line: 158, column: 11, scope: !4154)
!4160 = !DILocation(line: 162, column: 15, scope: !4161)
!4161 = distinct !DILexicalBlock(scope: !4162, file: !4101, line: 162, column: 15)
!4162 = distinct !DILexicalBlock(scope: !4149, file: !4101, line: 161, column: 9)
!4163 = !DILocation(line: 162, column: 23, scope: !4161)
!4164 = !DILocation(line: 162, column: 15, scope: !4162)
!4165 = !DILocation(line: 167, column: 23, scope: !4166)
!4166 = distinct !DILexicalBlock(scope: !4161, file: !4101, line: 163, column: 13)
!4167 = !DILocation(line: 167, column: 28, scope: !4166)
!4168 = !DILocation(line: 167, column: 36, scope: !4166)
!4169 = !DILocation(line: 167, column: 44, scope: !4166)
!4170 = !DILocation(line: 167, column: 15, scope: !4166)
!4171 = !DILocation(line: 168, column: 15, scope: !4166)
!4172 = !DILocation(line: 168, column: 19, scope: !4166)
!4173 = !DILocation(line: 168, column: 27, scope: !4166)
!4174 = !DILocation(line: 168, column: 32, scope: !4166)
!4175 = !DILocation(line: 169, column: 13, scope: !4166)
!4176 = !DILocation(line: 170, column: 11, scope: !4162)
!4177 = !DILocation(line: 174, column: 1, scope: !4120)
!4178 = !DILocalVariable(name: "category", arg: 1, scope: !4179, file: !4101, line: 91, type: !19)
!4179 = distinct !DISubprogram(name: "setlocale_null_unlocked", scope: !4101, file: !4101, line: 91, type: !4102, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !4180, retainedNodes: !4)
!4180 = distinct !DICompileUnit(language: DW_LANG_C99, file: !156, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!4181 = !DILocalVariable(name: "buf", arg: 2, scope: !4179, file: !4101, line: 91, type: !7)
!4182 = distinct !DISubprogram(name: "setlocale_null_androidfix", scope: !4101, file: !4101, line: 60, type: !4183, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !155, retainedNodes: !4)
!4183 = !DISubroutineType(types: !4184)
!4184 = !{!16, !19}
!4185 = !DILocalVariable(name: "category", arg: 1, scope: !4182, file: !4101, line: 60, type: !19)
!4186 = !DILocation(line: 60, column: 32, scope: !4182)
!4187 = !DILocalVariable(name: "result", scope: !4182, file: !4101, line: 62, type: !16)
!4188 = !DILocation(line: 62, column: 15, scope: !4182)
!4189 = !DILocation(line: 62, column: 35, scope: !4182)
!4190 = !DILocation(line: 62, column: 24, scope: !4182)
!4191 = !DILocation(line: 87, column: 10, scope: !4182)
!4192 = !DILocation(line: 87, column: 3, scope: !4182)
!4193 = !DILocalVariable(name: "category", arg: 1, scope: !4194, file: !4101, line: 60, type: !19)
!4194 = distinct !DISubprogram(name: "setlocale_null_androidfix", scope: !4101, file: !4101, line: 60, type: !4183, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !4195, retainedNodes: !4)
!4195 = distinct !DICompileUnit(language: DW_LANG_C99, file: !156, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!4196 = !DILocalVariable(name: "result", scope: !4194, file: !4101, line: 62, type: !16)
!4197 = distinct !DISubprogram(name: "rpl_fclose", scope: !4198, file: !4198, line: 58, type: !4199, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !157, retainedNodes: !4)
!4198 = !DIFile(filename: "lib/fclose.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4199 = !DISubroutineType(types: !4200)
!4200 = !{!19, !4201}
!4201 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4202, size: 64)
!4202 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3266, line: 7, baseType: !4203)
!4203 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3268, line: 49, size: 1728, elements: !4204)
!4204 = !{!4205, !4206, !4207, !4208, !4209, !4210, !4211, !4212, !4213, !4214, !4215, !4216, !4217, !4218, !4220, !4221, !4222, !4223, !4224, !4225, !4226, !4227, !4228, !4229, !4230, !4231, !4232, !4233, !4234}
!4205 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !4203, file: !3268, line: 51, baseType: !19, size: 32)
!4206 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !4203, file: !3268, line: 54, baseType: !7, size: 64, offset: 64)
!4207 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !4203, file: !3268, line: 55, baseType: !7, size: 64, offset: 128)
!4208 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !4203, file: !3268, line: 56, baseType: !7, size: 64, offset: 192)
!4209 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !4203, file: !3268, line: 57, baseType: !7, size: 64, offset: 256)
!4210 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !4203, file: !3268, line: 58, baseType: !7, size: 64, offset: 320)
!4211 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !4203, file: !3268, line: 59, baseType: !7, size: 64, offset: 384)
!4212 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !4203, file: !3268, line: 60, baseType: !7, size: 64, offset: 448)
!4213 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !4203, file: !3268, line: 61, baseType: !7, size: 64, offset: 512)
!4214 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !4203, file: !3268, line: 64, baseType: !7, size: 64, offset: 576)
!4215 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !4203, file: !3268, line: 65, baseType: !7, size: 64, offset: 640)
!4216 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !4203, file: !3268, line: 66, baseType: !7, size: 64, offset: 704)
!4217 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !4203, file: !3268, line: 68, baseType: !3283, size: 64, offset: 768)
!4218 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !4203, file: !3268, line: 70, baseType: !4219, size: 64, offset: 832)
!4219 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4203, size: 64)
!4220 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !4203, file: !3268, line: 72, baseType: !19, size: 32, offset: 896)
!4221 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !4203, file: !3268, line: 73, baseType: !19, size: 32, offset: 928)
!4222 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !4203, file: !3268, line: 74, baseType: !447, size: 64, offset: 960)
!4223 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !4203, file: !3268, line: 77, baseType: !73, size: 16, offset: 1024)
!4224 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !4203, file: !3268, line: 78, baseType: !3292, size: 8, offset: 1040)
!4225 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !4203, file: !3268, line: 79, baseType: !3294, size: 8, offset: 1048)
!4226 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !4203, file: !3268, line: 81, baseType: !3298, size: 64, offset: 1088)
!4227 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !4203, file: !3268, line: 89, baseType: !3301, size: 64, offset: 1152)
!4228 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !4203, file: !3268, line: 91, baseType: !3303, size: 64, offset: 1216)
!4229 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !4203, file: !3268, line: 92, baseType: !3306, size: 64, offset: 1280)
!4230 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !4203, file: !3268, line: 93, baseType: !4219, size: 64, offset: 1344)
!4231 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !4203, file: !3268, line: 94, baseType: !6, size: 64, offset: 1408)
!4232 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !4203, file: !3268, line: 95, baseType: !74, size: 64, offset: 1472)
!4233 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !4203, file: !3268, line: 96, baseType: !19, size: 32, offset: 1536)
!4234 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !4203, file: !3268, line: 98, baseType: !3313, size: 160, offset: 1568)
!4235 = !DILocalVariable(name: "fp", arg: 1, scope: !4197, file: !4198, line: 58, type: !4201)
!4236 = !DILocation(line: 58, column: 19, scope: !4197)
!4237 = !DILocalVariable(name: "saved_errno", scope: !4197, file: !4198, line: 60, type: !19)
!4238 = !DILocation(line: 60, column: 7, scope: !4197)
!4239 = !DILocalVariable(name: "fd", scope: !4197, file: !4198, line: 61, type: !19)
!4240 = !DILocation(line: 61, column: 7, scope: !4197)
!4241 = !DILocalVariable(name: "result", scope: !4197, file: !4198, line: 62, type: !19)
!4242 = !DILocation(line: 62, column: 7, scope: !4197)
!4243 = !DILocation(line: 65, column: 16, scope: !4197)
!4244 = !DILocation(line: 65, column: 8, scope: !4197)
!4245 = !DILocation(line: 65, column: 6, scope: !4197)
!4246 = !DILocation(line: 66, column: 7, scope: !4247)
!4247 = distinct !DILexicalBlock(scope: !4197, file: !4198, line: 66, column: 7)
!4248 = !DILocation(line: 66, column: 10, scope: !4247)
!4249 = !DILocation(line: 66, column: 7, scope: !4197)
!4250 = !DILocation(line: 67, column: 28, scope: !4247)
!4251 = !DILocation(line: 67, column: 12, scope: !4247)
!4252 = !DILocation(line: 67, column: 5, scope: !4247)
!4253 = !DILocation(line: 72, column: 9, scope: !4254)
!4254 = distinct !DILexicalBlock(scope: !4197, file: !4198, line: 72, column: 7)
!4255 = !DILocation(line: 72, column: 23, scope: !4254)
!4256 = !DILocation(line: 72, column: 41, scope: !4254)
!4257 = !DILocation(line: 72, column: 33, scope: !4254)
!4258 = !DILocation(line: 72, column: 26, scope: !4254)
!4259 = !DILocation(line: 72, column: 59, scope: !4254)
!4260 = !DILocation(line: 73, column: 7, scope: !4254)
!4261 = !DILocation(line: 73, column: 18, scope: !4254)
!4262 = !DILocation(line: 73, column: 10, scope: !4254)
!4263 = !DILocation(line: 72, column: 7, scope: !4197)
!4264 = !DILocation(line: 74, column: 19, scope: !4254)
!4265 = !DILocation(line: 74, column: 17, scope: !4254)
!4266 = !DILocation(line: 74, column: 5, scope: !4254)
!4267 = !DILocation(line: 100, column: 28, scope: !4197)
!4268 = !DILocation(line: 100, column: 12, scope: !4197)
!4269 = !DILocation(line: 100, column: 10, scope: !4197)
!4270 = !DILocation(line: 105, column: 7, scope: !4271)
!4271 = distinct !DILexicalBlock(scope: !4197, file: !4198, line: 105, column: 7)
!4272 = !DILocation(line: 105, column: 19, scope: !4271)
!4273 = !DILocation(line: 105, column: 7, scope: !4197)
!4274 = !DILocation(line: 107, column: 15, scope: !4275)
!4275 = distinct !DILexicalBlock(scope: !4271, file: !4198, line: 106, column: 5)
!4276 = !DILocation(line: 107, column: 7, scope: !4275)
!4277 = !DILocation(line: 107, column: 13, scope: !4275)
!4278 = !DILocation(line: 108, column: 14, scope: !4275)
!4279 = !DILocation(line: 109, column: 5, scope: !4275)
!4280 = !DILocation(line: 111, column: 10, scope: !4197)
!4281 = !DILocation(line: 111, column: 3, scope: !4197)
!4282 = !DILocation(line: 112, column: 1, scope: !4197)
!4283 = !DILocalVariable(name: "fp", arg: 1, scope: !4284, file: !4198, line: 58, type: !4287)
!4284 = distinct !DISubprogram(name: "rpl_fclose", scope: !4198, file: !4198, line: 58, type: !4285, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4321, retainedNodes: !4)
!4285 = !DISubroutineType(types: !4286)
!4286 = !{!19, !4287}
!4287 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4288, size: 64)
!4288 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3266, line: 7, baseType: !4289)
!4289 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3268, line: 49, size: 1728, elements: !4290)
!4290 = !{!4291, !4292, !4293, !4294, !4295, !4296, !4297, !4298, !4299, !4300, !4301, !4302, !4303, !4304, !4306, !4307, !4308, !4309, !4310, !4311, !4312, !4313, !4314, !4315, !4316, !4317, !4318, !4319, !4320}
!4291 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !4289, file: !3268, line: 51, baseType: !19, size: 32)
!4292 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !4289, file: !3268, line: 54, baseType: !7, size: 64, offset: 64)
!4293 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !4289, file: !3268, line: 55, baseType: !7, size: 64, offset: 128)
!4294 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !4289, file: !3268, line: 56, baseType: !7, size: 64, offset: 192)
!4295 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !4289, file: !3268, line: 57, baseType: !7, size: 64, offset: 256)
!4296 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !4289, file: !3268, line: 58, baseType: !7, size: 64, offset: 320)
!4297 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !4289, file: !3268, line: 59, baseType: !7, size: 64, offset: 384)
!4298 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !4289, file: !3268, line: 60, baseType: !7, size: 64, offset: 448)
!4299 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !4289, file: !3268, line: 61, baseType: !7, size: 64, offset: 512)
!4300 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !4289, file: !3268, line: 64, baseType: !7, size: 64, offset: 576)
!4301 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !4289, file: !3268, line: 65, baseType: !7, size: 64, offset: 640)
!4302 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !4289, file: !3268, line: 66, baseType: !7, size: 64, offset: 704)
!4303 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !4289, file: !3268, line: 68, baseType: !3283, size: 64, offset: 768)
!4304 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !4289, file: !3268, line: 70, baseType: !4305, size: 64, offset: 832)
!4305 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4289, size: 64)
!4306 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !4289, file: !3268, line: 72, baseType: !19, size: 32, offset: 896)
!4307 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !4289, file: !3268, line: 73, baseType: !19, size: 32, offset: 928)
!4308 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !4289, file: !3268, line: 74, baseType: !447, size: 64, offset: 960)
!4309 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !4289, file: !3268, line: 77, baseType: !73, size: 16, offset: 1024)
!4310 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !4289, file: !3268, line: 78, baseType: !3292, size: 8, offset: 1040)
!4311 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !4289, file: !3268, line: 79, baseType: !3294, size: 8, offset: 1048)
!4312 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !4289, file: !3268, line: 81, baseType: !3298, size: 64, offset: 1088)
!4313 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !4289, file: !3268, line: 89, baseType: !3301, size: 64, offset: 1152)
!4314 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !4289, file: !3268, line: 91, baseType: !3303, size: 64, offset: 1216)
!4315 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !4289, file: !3268, line: 92, baseType: !3306, size: 64, offset: 1280)
!4316 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !4289, file: !3268, line: 93, baseType: !4305, size: 64, offset: 1344)
!4317 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !4289, file: !3268, line: 94, baseType: !6, size: 64, offset: 1408)
!4318 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !4289, file: !3268, line: 95, baseType: !74, size: 64, offset: 1472)
!4319 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !4289, file: !3268, line: 96, baseType: !19, size: 32, offset: 1536)
!4320 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !4289, file: !3268, line: 98, baseType: !3313, size: 160, offset: 1568)
!4321 = distinct !DICompileUnit(language: DW_LANG_C99, file: !158, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!4322 = !DILocalVariable(name: "saved_errno", scope: !4284, file: !4198, line: 60, type: !19)
!4323 = !DILocalVariable(name: "fd", scope: !4284, file: !4198, line: 61, type: !19)
!4324 = !DILocalVariable(name: "result", scope: !4284, file: !4198, line: 62, type: !19)
!4325 = distinct !DISubprogram(name: "rpl_fflush", scope: !4326, file: !4326, line: 129, type: !4327, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !159, retainedNodes: !4)
!4326 = !DIFile(filename: "lib/fflush.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4327 = !DISubroutineType(types: !4328)
!4328 = !{!19, !4329}
!4329 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4330, size: 64)
!4330 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3266, line: 7, baseType: !4331)
!4331 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3268, line: 49, size: 1728, elements: !4332)
!4332 = !{!4333, !4334, !4335, !4336, !4337, !4338, !4339, !4340, !4341, !4342, !4343, !4344, !4345, !4346, !4348, !4349, !4350, !4351, !4352, !4353, !4354, !4355, !4356, !4357, !4358, !4359, !4360, !4361, !4362}
!4333 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !4331, file: !3268, line: 51, baseType: !19, size: 32)
!4334 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !4331, file: !3268, line: 54, baseType: !7, size: 64, offset: 64)
!4335 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !4331, file: !3268, line: 55, baseType: !7, size: 64, offset: 128)
!4336 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !4331, file: !3268, line: 56, baseType: !7, size: 64, offset: 192)
!4337 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !4331, file: !3268, line: 57, baseType: !7, size: 64, offset: 256)
!4338 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !4331, file: !3268, line: 58, baseType: !7, size: 64, offset: 320)
!4339 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !4331, file: !3268, line: 59, baseType: !7, size: 64, offset: 384)
!4340 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !4331, file: !3268, line: 60, baseType: !7, size: 64, offset: 448)
!4341 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !4331, file: !3268, line: 61, baseType: !7, size: 64, offset: 512)
!4342 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !4331, file: !3268, line: 64, baseType: !7, size: 64, offset: 576)
!4343 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !4331, file: !3268, line: 65, baseType: !7, size: 64, offset: 640)
!4344 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !4331, file: !3268, line: 66, baseType: !7, size: 64, offset: 704)
!4345 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !4331, file: !3268, line: 68, baseType: !3283, size: 64, offset: 768)
!4346 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !4331, file: !3268, line: 70, baseType: !4347, size: 64, offset: 832)
!4347 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4331, size: 64)
!4348 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !4331, file: !3268, line: 72, baseType: !19, size: 32, offset: 896)
!4349 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !4331, file: !3268, line: 73, baseType: !19, size: 32, offset: 928)
!4350 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !4331, file: !3268, line: 74, baseType: !447, size: 64, offset: 960)
!4351 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !4331, file: !3268, line: 77, baseType: !73, size: 16, offset: 1024)
!4352 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !4331, file: !3268, line: 78, baseType: !3292, size: 8, offset: 1040)
!4353 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !4331, file: !3268, line: 79, baseType: !3294, size: 8, offset: 1048)
!4354 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !4331, file: !3268, line: 81, baseType: !3298, size: 64, offset: 1088)
!4355 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !4331, file: !3268, line: 89, baseType: !3301, size: 64, offset: 1152)
!4356 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !4331, file: !3268, line: 91, baseType: !3303, size: 64, offset: 1216)
!4357 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !4331, file: !3268, line: 92, baseType: !3306, size: 64, offset: 1280)
!4358 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !4331, file: !3268, line: 93, baseType: !4347, size: 64, offset: 1344)
!4359 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !4331, file: !3268, line: 94, baseType: !6, size: 64, offset: 1408)
!4360 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !4331, file: !3268, line: 95, baseType: !74, size: 64, offset: 1472)
!4361 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !4331, file: !3268, line: 96, baseType: !19, size: 32, offset: 1536)
!4362 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !4331, file: !3268, line: 98, baseType: !3313, size: 160, offset: 1568)
!4363 = !DILocalVariable(name: "stream", arg: 1, scope: !4325, file: !4326, line: 129, type: !4329)
!4364 = !DILocation(line: 129, column: 19, scope: !4325)
!4365 = !DILocation(line: 150, column: 7, scope: !4366)
!4366 = distinct !DILexicalBlock(scope: !4325, file: !4326, line: 150, column: 7)
!4367 = !DILocation(line: 150, column: 14, scope: !4366)
!4368 = !DILocation(line: 150, column: 22, scope: !4366)
!4369 = !DILocation(line: 150, column: 27, scope: !4366)
!4370 = !DILocation(line: 150, column: 7, scope: !4325)
!4371 = !DILocation(line: 151, column: 20, scope: !4366)
!4372 = !DILocation(line: 151, column: 12, scope: !4366)
!4373 = !DILocation(line: 151, column: 5, scope: !4366)
!4374 = !DILocation(line: 156, column: 44, scope: !4325)
!4375 = !DILocation(line: 156, column: 3, scope: !4325)
!4376 = !DILocation(line: 158, column: 18, scope: !4325)
!4377 = !DILocation(line: 158, column: 10, scope: !4325)
!4378 = !DILocation(line: 158, column: 3, scope: !4325)
!4379 = !DILocation(line: 235, column: 1, scope: !4325)
!4380 = !DILocalVariable(name: "stream", arg: 1, scope: !4381, file: !4326, line: 129, type: !4384)
!4381 = distinct !DISubprogram(name: "rpl_fflush", scope: !4326, file: !4326, line: 129, type: !4382, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4418, retainedNodes: !4)
!4382 = !DISubroutineType(types: !4383)
!4383 = !{!19, !4384}
!4384 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4385, size: 64)
!4385 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3266, line: 7, baseType: !4386)
!4386 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3268, line: 49, size: 1728, elements: !4387)
!4387 = !{!4388, !4389, !4390, !4391, !4392, !4393, !4394, !4395, !4396, !4397, !4398, !4399, !4400, !4401, !4403, !4404, !4405, !4406, !4407, !4408, !4409, !4410, !4411, !4412, !4413, !4414, !4415, !4416, !4417}
!4388 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !4386, file: !3268, line: 51, baseType: !19, size: 32)
!4389 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !4386, file: !3268, line: 54, baseType: !7, size: 64, offset: 64)
!4390 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !4386, file: !3268, line: 55, baseType: !7, size: 64, offset: 128)
!4391 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !4386, file: !3268, line: 56, baseType: !7, size: 64, offset: 192)
!4392 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !4386, file: !3268, line: 57, baseType: !7, size: 64, offset: 256)
!4393 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !4386, file: !3268, line: 58, baseType: !7, size: 64, offset: 320)
!4394 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !4386, file: !3268, line: 59, baseType: !7, size: 64, offset: 384)
!4395 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !4386, file: !3268, line: 60, baseType: !7, size: 64, offset: 448)
!4396 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !4386, file: !3268, line: 61, baseType: !7, size: 64, offset: 512)
!4397 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !4386, file: !3268, line: 64, baseType: !7, size: 64, offset: 576)
!4398 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !4386, file: !3268, line: 65, baseType: !7, size: 64, offset: 640)
!4399 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !4386, file: !3268, line: 66, baseType: !7, size: 64, offset: 704)
!4400 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !4386, file: !3268, line: 68, baseType: !3283, size: 64, offset: 768)
!4401 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !4386, file: !3268, line: 70, baseType: !4402, size: 64, offset: 832)
!4402 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4386, size: 64)
!4403 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !4386, file: !3268, line: 72, baseType: !19, size: 32, offset: 896)
!4404 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !4386, file: !3268, line: 73, baseType: !19, size: 32, offset: 928)
!4405 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !4386, file: !3268, line: 74, baseType: !447, size: 64, offset: 960)
!4406 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !4386, file: !3268, line: 77, baseType: !73, size: 16, offset: 1024)
!4407 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !4386, file: !3268, line: 78, baseType: !3292, size: 8, offset: 1040)
!4408 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !4386, file: !3268, line: 79, baseType: !3294, size: 8, offset: 1048)
!4409 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !4386, file: !3268, line: 81, baseType: !3298, size: 64, offset: 1088)
!4410 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !4386, file: !3268, line: 89, baseType: !3301, size: 64, offset: 1152)
!4411 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !4386, file: !3268, line: 91, baseType: !3303, size: 64, offset: 1216)
!4412 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !4386, file: !3268, line: 92, baseType: !3306, size: 64, offset: 1280)
!4413 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !4386, file: !3268, line: 93, baseType: !4402, size: 64, offset: 1344)
!4414 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !4386, file: !3268, line: 94, baseType: !6, size: 64, offset: 1408)
!4415 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !4386, file: !3268, line: 95, baseType: !74, size: 64, offset: 1472)
!4416 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !4386, file: !3268, line: 96, baseType: !19, size: 32, offset: 1536)
!4417 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !4386, file: !3268, line: 98, baseType: !3313, size: 160, offset: 1568)
!4418 = distinct !DICompileUnit(language: DW_LANG_C99, file: !160, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!4419 = distinct !DISubprogram(name: "clear_ungetc_buffer_preserving_position", scope: !4326, file: !4326, line: 41, type: !4420, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !159, retainedNodes: !4)
!4420 = !DISubroutineType(types: !4421)
!4421 = !{null, !4329}
!4422 = !DILocalVariable(name: "fp", arg: 1, scope: !4419, file: !4326, line: 41, type: !4329)
!4423 = !DILocation(line: 41, column: 48, scope: !4419)
!4424 = !DILocation(line: 43, column: 7, scope: !4425)
!4425 = distinct !DILexicalBlock(scope: !4419, file: !4326, line: 43, column: 7)
!4426 = !DILocation(line: 43, column: 11, scope: !4425)
!4427 = !DILocation(line: 43, column: 18, scope: !4425)
!4428 = !DILocation(line: 43, column: 7, scope: !4419)
!4429 = !DILocation(line: 45, column: 13, scope: !4425)
!4430 = !DILocation(line: 45, column: 5, scope: !4425)
!4431 = !DILocation(line: 46, column: 1, scope: !4419)
!4432 = !DILocalVariable(name: "fp", arg: 1, scope: !4433, file: !4326, line: 41, type: !4436)
!4433 = distinct !DISubprogram(name: "clear_ungetc_buffer_preserving_position", scope: !4326, file: !4326, line: 41, type: !4434, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !4470, retainedNodes: !4)
!4434 = !DISubroutineType(types: !4435)
!4435 = !{null, !4436}
!4436 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4437, size: 64)
!4437 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3266, line: 7, baseType: !4438)
!4438 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3268, line: 49, size: 1728, elements: !4439)
!4439 = !{!4440, !4441, !4442, !4443, !4444, !4445, !4446, !4447, !4448, !4449, !4450, !4451, !4452, !4453, !4455, !4456, !4457, !4458, !4459, !4460, !4461, !4462, !4463, !4464, !4465, !4466, !4467, !4468, !4469}
!4440 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !4438, file: !3268, line: 51, baseType: !19, size: 32)
!4441 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !4438, file: !3268, line: 54, baseType: !7, size: 64, offset: 64)
!4442 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !4438, file: !3268, line: 55, baseType: !7, size: 64, offset: 128)
!4443 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !4438, file: !3268, line: 56, baseType: !7, size: 64, offset: 192)
!4444 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !4438, file: !3268, line: 57, baseType: !7, size: 64, offset: 256)
!4445 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !4438, file: !3268, line: 58, baseType: !7, size: 64, offset: 320)
!4446 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !4438, file: !3268, line: 59, baseType: !7, size: 64, offset: 384)
!4447 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !4438, file: !3268, line: 60, baseType: !7, size: 64, offset: 448)
!4448 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !4438, file: !3268, line: 61, baseType: !7, size: 64, offset: 512)
!4449 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !4438, file: !3268, line: 64, baseType: !7, size: 64, offset: 576)
!4450 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !4438, file: !3268, line: 65, baseType: !7, size: 64, offset: 640)
!4451 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !4438, file: !3268, line: 66, baseType: !7, size: 64, offset: 704)
!4452 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !4438, file: !3268, line: 68, baseType: !3283, size: 64, offset: 768)
!4453 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !4438, file: !3268, line: 70, baseType: !4454, size: 64, offset: 832)
!4454 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4438, size: 64)
!4455 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !4438, file: !3268, line: 72, baseType: !19, size: 32, offset: 896)
!4456 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !4438, file: !3268, line: 73, baseType: !19, size: 32, offset: 928)
!4457 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !4438, file: !3268, line: 74, baseType: !447, size: 64, offset: 960)
!4458 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !4438, file: !3268, line: 77, baseType: !73, size: 16, offset: 1024)
!4459 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !4438, file: !3268, line: 78, baseType: !3292, size: 8, offset: 1040)
!4460 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !4438, file: !3268, line: 79, baseType: !3294, size: 8, offset: 1048)
!4461 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !4438, file: !3268, line: 81, baseType: !3298, size: 64, offset: 1088)
!4462 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !4438, file: !3268, line: 89, baseType: !3301, size: 64, offset: 1152)
!4463 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !4438, file: !3268, line: 91, baseType: !3303, size: 64, offset: 1216)
!4464 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !4438, file: !3268, line: 92, baseType: !3306, size: 64, offset: 1280)
!4465 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !4438, file: !3268, line: 93, baseType: !4454, size: 64, offset: 1344)
!4466 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !4438, file: !3268, line: 94, baseType: !6, size: 64, offset: 1408)
!4467 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !4438, file: !3268, line: 95, baseType: !74, size: 64, offset: 1472)
!4468 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !4438, file: !3268, line: 96, baseType: !19, size: 32, offset: 1536)
!4469 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !4438, file: !3268, line: 98, baseType: !3313, size: 160, offset: 1568)
!4470 = distinct !DICompileUnit(language: DW_LANG_C99, file: !160, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!4471 = distinct !DISubprogram(name: "rpl_fseeko", scope: !4472, file: !4472, line: 28, type: !4473, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !161, retainedNodes: !4)
!4472 = !DIFile(filename: "lib/fseeko.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4473 = !DISubroutineType(types: !4474)
!4474 = !{!19, !4475, !4509, !19}
!4475 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4476, size: 64)
!4476 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3266, line: 7, baseType: !4477)
!4477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3268, line: 49, size: 1728, elements: !4478)
!4478 = !{!4479, !4480, !4481, !4482, !4483, !4484, !4485, !4486, !4487, !4488, !4489, !4490, !4491, !4492, !4494, !4495, !4496, !4497, !4498, !4499, !4500, !4501, !4502, !4503, !4504, !4505, !4506, !4507, !4508}
!4479 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !4477, file: !3268, line: 51, baseType: !19, size: 32)
!4480 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !4477, file: !3268, line: 54, baseType: !7, size: 64, offset: 64)
!4481 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !4477, file: !3268, line: 55, baseType: !7, size: 64, offset: 128)
!4482 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !4477, file: !3268, line: 56, baseType: !7, size: 64, offset: 192)
!4483 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !4477, file: !3268, line: 57, baseType: !7, size: 64, offset: 256)
!4484 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !4477, file: !3268, line: 58, baseType: !7, size: 64, offset: 320)
!4485 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !4477, file: !3268, line: 59, baseType: !7, size: 64, offset: 384)
!4486 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !4477, file: !3268, line: 60, baseType: !7, size: 64, offset: 448)
!4487 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !4477, file: !3268, line: 61, baseType: !7, size: 64, offset: 512)
!4488 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !4477, file: !3268, line: 64, baseType: !7, size: 64, offset: 576)
!4489 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !4477, file: !3268, line: 65, baseType: !7, size: 64, offset: 640)
!4490 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !4477, file: !3268, line: 66, baseType: !7, size: 64, offset: 704)
!4491 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !4477, file: !3268, line: 68, baseType: !3283, size: 64, offset: 768)
!4492 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !4477, file: !3268, line: 70, baseType: !4493, size: 64, offset: 832)
!4493 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4477, size: 64)
!4494 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !4477, file: !3268, line: 72, baseType: !19, size: 32, offset: 896)
!4495 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !4477, file: !3268, line: 73, baseType: !19, size: 32, offset: 928)
!4496 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !4477, file: !3268, line: 74, baseType: !447, size: 64, offset: 960)
!4497 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !4477, file: !3268, line: 77, baseType: !73, size: 16, offset: 1024)
!4498 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !4477, file: !3268, line: 78, baseType: !3292, size: 8, offset: 1040)
!4499 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !4477, file: !3268, line: 79, baseType: !3294, size: 8, offset: 1048)
!4500 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !4477, file: !3268, line: 81, baseType: !3298, size: 64, offset: 1088)
!4501 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !4477, file: !3268, line: 89, baseType: !3301, size: 64, offset: 1152)
!4502 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !4477, file: !3268, line: 91, baseType: !3303, size: 64, offset: 1216)
!4503 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !4477, file: !3268, line: 92, baseType: !3306, size: 64, offset: 1280)
!4504 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !4477, file: !3268, line: 93, baseType: !4493, size: 64, offset: 1344)
!4505 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !4477, file: !3268, line: 94, baseType: !6, size: 64, offset: 1408)
!4506 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !4477, file: !3268, line: 95, baseType: !74, size: 64, offset: 1472)
!4507 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !4477, file: !3268, line: 96, baseType: !19, size: 32, offset: 1536)
!4508 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !4477, file: !3268, line: 98, baseType: !3313, size: 160, offset: 1568)
!4509 = !DIDerivedType(tag: DW_TAG_typedef, name: "off_t", file: !3608, line: 63, baseType: !447)
!4510 = !DILocalVariable(name: "fp", arg: 1, scope: !4471, file: !4472, line: 28, type: !4475)
!4511 = !DILocation(line: 28, column: 15, scope: !4471)
!4512 = !DILocalVariable(name: "offset", arg: 2, scope: !4471, file: !4472, line: 28, type: !4509)
!4513 = !DILocation(line: 28, column: 25, scope: !4471)
!4514 = !DILocalVariable(name: "whence", arg: 3, scope: !4471, file: !4472, line: 28, type: !19)
!4515 = !DILocation(line: 28, column: 37, scope: !4471)
!4516 = !DILocation(line: 52, column: 7, scope: !4517)
!4517 = distinct !DILexicalBlock(scope: !4471, file: !4472, line: 52, column: 7)
!4518 = !DILocation(line: 52, column: 11, scope: !4517)
!4519 = !DILocation(line: 52, column: 27, scope: !4517)
!4520 = !DILocation(line: 52, column: 31, scope: !4517)
!4521 = !DILocation(line: 52, column: 24, scope: !4517)
!4522 = !DILocation(line: 53, column: 7, scope: !4517)
!4523 = !DILocation(line: 53, column: 10, scope: !4517)
!4524 = !DILocation(line: 53, column: 14, scope: !4517)
!4525 = !DILocation(line: 53, column: 31, scope: !4517)
!4526 = !DILocation(line: 53, column: 35, scope: !4517)
!4527 = !DILocation(line: 53, column: 28, scope: !4517)
!4528 = !DILocation(line: 54, column: 7, scope: !4517)
!4529 = !DILocation(line: 54, column: 10, scope: !4517)
!4530 = !DILocation(line: 54, column: 14, scope: !4517)
!4531 = !DILocation(line: 54, column: 28, scope: !4517)
!4532 = !DILocation(line: 52, column: 7, scope: !4471)
!4533 = !DILocalVariable(name: "pos", scope: !4534, file: !4472, line: 117, type: !4509)
!4534 = distinct !DILexicalBlock(scope: !4517, file: !4472, line: 113, column: 5)
!4535 = !DILocation(line: 117, column: 13, scope: !4534)
!4536 = !DILocation(line: 117, column: 34, scope: !4534)
!4537 = !DILocation(line: 117, column: 26, scope: !4534)
!4538 = !DILocation(line: 117, column: 39, scope: !4534)
!4539 = !DILocation(line: 117, column: 47, scope: !4534)
!4540 = !DILocation(line: 117, column: 19, scope: !4534)
!4541 = !DILocation(line: 118, column: 11, scope: !4542)
!4542 = distinct !DILexicalBlock(scope: !4534, file: !4472, line: 118, column: 11)
!4543 = !DILocation(line: 118, column: 15, scope: !4542)
!4544 = !DILocation(line: 118, column: 11, scope: !4534)
!4545 = !DILocation(line: 124, column: 11, scope: !4546)
!4546 = distinct !DILexicalBlock(scope: !4542, file: !4472, line: 119, column: 9)
!4547 = !DILocation(line: 129, column: 7, scope: !4534)
!4548 = !DILocation(line: 129, column: 11, scope: !4534)
!4549 = !DILocation(line: 129, column: 18, scope: !4534)
!4550 = !DILocation(line: 130, column: 21, scope: !4534)
!4551 = !DILocation(line: 130, column: 7, scope: !4534)
!4552 = !DILocation(line: 130, column: 11, scope: !4534)
!4553 = !DILocation(line: 130, column: 19, scope: !4534)
!4554 = !DILocation(line: 161, column: 7, scope: !4534)
!4555 = !DILocation(line: 163, column: 18, scope: !4471)
!4556 = !DILocation(line: 163, column: 22, scope: !4471)
!4557 = !DILocation(line: 163, column: 30, scope: !4471)
!4558 = !DILocation(line: 163, column: 10, scope: !4471)
!4559 = !DILocation(line: 163, column: 3, scope: !4471)
!4560 = !DILocation(line: 164, column: 1, scope: !4471)
!4561 = !DILocalVariable(name: "fp", arg: 1, scope: !4562, file: !4472, line: 28, type: !4565)
!4562 = distinct !DISubprogram(name: "rpl_fseeko", scope: !4472, file: !4472, line: 28, type: !4563, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4599, retainedNodes: !4)
!4563 = !DISubroutineType(types: !4564)
!4564 = !{!19, !4565, !4509, !19}
!4565 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4566, size: 64)
!4566 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !3266, line: 7, baseType: !4567)
!4567 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !3268, line: 49, size: 1728, elements: !4568)
!4568 = !{!4569, !4570, !4571, !4572, !4573, !4574, !4575, !4576, !4577, !4578, !4579, !4580, !4581, !4582, !4584, !4585, !4586, !4587, !4588, !4589, !4590, !4591, !4592, !4593, !4594, !4595, !4596, !4597, !4598}
!4569 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !4567, file: !3268, line: 51, baseType: !19, size: 32)
!4570 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !4567, file: !3268, line: 54, baseType: !7, size: 64, offset: 64)
!4571 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !4567, file: !3268, line: 55, baseType: !7, size: 64, offset: 128)
!4572 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !4567, file: !3268, line: 56, baseType: !7, size: 64, offset: 192)
!4573 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !4567, file: !3268, line: 57, baseType: !7, size: 64, offset: 256)
!4574 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !4567, file: !3268, line: 58, baseType: !7, size: 64, offset: 320)
!4575 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !4567, file: !3268, line: 59, baseType: !7, size: 64, offset: 384)
!4576 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !4567, file: !3268, line: 60, baseType: !7, size: 64, offset: 448)
!4577 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !4567, file: !3268, line: 61, baseType: !7, size: 64, offset: 512)
!4578 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !4567, file: !3268, line: 64, baseType: !7, size: 64, offset: 576)
!4579 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !4567, file: !3268, line: 65, baseType: !7, size: 64, offset: 640)
!4580 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !4567, file: !3268, line: 66, baseType: !7, size: 64, offset: 704)
!4581 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !4567, file: !3268, line: 68, baseType: !3283, size: 64, offset: 768)
!4582 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !4567, file: !3268, line: 70, baseType: !4583, size: 64, offset: 832)
!4583 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4567, size: 64)
!4584 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !4567, file: !3268, line: 72, baseType: !19, size: 32, offset: 896)
!4585 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !4567, file: !3268, line: 73, baseType: !19, size: 32, offset: 928)
!4586 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !4567, file: !3268, line: 74, baseType: !447, size: 64, offset: 960)
!4587 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !4567, file: !3268, line: 77, baseType: !73, size: 16, offset: 1024)
!4588 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !4567, file: !3268, line: 78, baseType: !3292, size: 8, offset: 1040)
!4589 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !4567, file: !3268, line: 79, baseType: !3294, size: 8, offset: 1048)
!4590 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !4567, file: !3268, line: 81, baseType: !3298, size: 64, offset: 1088)
!4591 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !4567, file: !3268, line: 89, baseType: !3301, size: 64, offset: 1152)
!4592 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !4567, file: !3268, line: 91, baseType: !3303, size: 64, offset: 1216)
!4593 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !4567, file: !3268, line: 92, baseType: !3306, size: 64, offset: 1280)
!4594 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !4567, file: !3268, line: 93, baseType: !4583, size: 64, offset: 1344)
!4595 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !4567, file: !3268, line: 94, baseType: !6, size: 64, offset: 1408)
!4596 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !4567, file: !3268, line: 95, baseType: !74, size: 64, offset: 1472)
!4597 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !4567, file: !3268, line: 96, baseType: !19, size: 32, offset: 1536)
!4598 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !4567, file: !3268, line: 98, baseType: !3313, size: 160, offset: 1568)
!4599 = distinct !DICompileUnit(language: DW_LANG_C99, file: !162, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!4600 = !DILocalVariable(name: "offset", arg: 2, scope: !4562, file: !4472, line: 28, type: !4509)
!4601 = !DILocalVariable(name: "whence", arg: 3, scope: !4562, file: !4472, line: 28, type: !19)
!4602 = distinct !DISubprogram(name: "c_tolower", scope: !4603, file: !4603, line: 337, type: !4604, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !163, retainedNodes: !4)
!4603 = !DIFile(filename: "./lib/c-ctype.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4604 = !DISubroutineType(types: !4605)
!4605 = !{!19, !19}
!4606 = !DILocalVariable(name: "c", arg: 1, scope: !4602, file: !4603, line: 337, type: !19)
!4607 = !DILocation(line: 337, column: 16, scope: !4602)
!4608 = !DILocation(line: 339, column: 11, scope: !4602)
!4609 = !DILocation(line: 339, column: 3, scope: !4602)
!4610 = !DILocation(line: 342, column: 14, scope: !4611)
!4611 = distinct !DILexicalBlock(scope: !4602, file: !4603, line: 340, column: 5)
!4612 = !DILocation(line: 342, column: 16, scope: !4611)
!4613 = !DILocation(line: 342, column: 22, scope: !4611)
!4614 = !DILocation(line: 342, column: 7, scope: !4611)
!4615 = !DILocation(line: 344, column: 14, scope: !4611)
!4616 = !DILocation(line: 344, column: 7, scope: !4611)
!4617 = !DILocation(line: 346, column: 1, scope: !4602)
!4618 = !DILocalVariable(name: "c", arg: 1, scope: !4619, file: !4603, line: 337, type: !19)
!4619 = distinct !DISubprogram(name: "c_tolower", scope: !4603, file: !4603, line: 337, type: !4604, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4620, retainedNodes: !4)
!4620 = distinct !DICompileUnit(language: DW_LANG_C99, file: !164, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
