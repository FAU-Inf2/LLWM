; ModuleID = '<stdin>'
source_filename = "ld-temp.o"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.infomap = type { i8*, i8* }
%struct.option = type { i8*, i32, i32*, i32 }
%struct.quoting_options = type { i32, i32, [8 x i32], i8*, i8* }
%struct.slotvec = type { i64, i8* }
%struct.file_name = type { i8*, i64, i8* }
%struct.stat = type { i64, i64, i64, i32, i32, i32, i32, i64, i64, i64, i64, %struct.dev_ino, %struct.dev_ino, %struct.dev_ino, [3 x i64] }
%struct.dev_ino = type { i64, i64 }
%struct.__dirstream = type opaque
%struct.dirent = type { i64, i64, i16, i8, [256 x i8] }
%struct.__mbstate_t = type { i32, %union.anon }
%union.anon = type { i32 }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }

@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [39 x i8] c"Try '%s --help' for more information.\0A\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"Usage: %s [OPTION]...\0A\00", align 1
@.str.2 = private unnamed_addr constant [60 x i8] c"Print the full filename of the current working directory.\0A\0A\00", align 1
@stdout = external dso_local global %struct._IO_FILE*, align 8
@.str.3 = private unnamed_addr constant [111 x i8] c"  -L, --logical   use PWD from environment, even if it contains symlinks\0A  -P, --physical  avoid all symlinks\0A\00", align 1
@.str.4 = private unnamed_addr constant [45 x i8] c"      --help     display this help and exit\0A\00", align 1
@.str.5 = private unnamed_addr constant [54 x i8] c"      --version  output version information and exit\0A\00", align 1
@.str.6 = private unnamed_addr constant [44 x i8] c"\0AIf no option is specified, -P is assumed.\0A\00", align 1
@.str.7 = private unnamed_addr constant [191 x i8] c"\0ANOTE: your shell may have its own version of %s, which usually supersedes\0Athe version described here.  Please refer to your shell's documentation\0Afor details about the options it supports.\0A\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"pwd\00", align 1
@__const.emit_ancillary_info.infomap = private unnamed_addr constant [7 x %struct.infomap] [%struct.infomap { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.18, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.19, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.22, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.23, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.24, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.21, i32 0, i32 0) }, %struct.infomap zeroinitializer], align 16
@.str.25 = private unnamed_addr constant [23 x i8] c"\0A%s online help: <%s>\0A\00", align 1
@.str.14 = private unnamed_addr constant [14 x i8] c"GNU coreutils\00", align 1
@.str.26 = private unnamed_addr constant [40 x i8] c"https://www.gnu.org/software/coreutils/\00", align 1
@.str.27 = private unnamed_addr constant [4 x i8] c"en_\00", align 1
@.str.28 = private unnamed_addr constant [71 x i8] c"Report any translation bugs to <https://translationproject.org/team/>\0A\00", align 1
@.str.29 = private unnamed_addr constant [27 x i8] c"Full documentation <%s%s>\0A\00", align 1
@.str.30 = private unnamed_addr constant [51 x i8] c"or available locally via: info '(coreutils) %s%s'\0A\00", align 1
@.str.31 = private unnamed_addr constant [12 x i8] c" invocation\00", align 1
@.str.10 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.17 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.18 = private unnamed_addr constant [16 x i8] c"test invocation\00", align 1
@.str.11 = private unnamed_addr constant [10 x i8] c"coreutils\00", align 1
@.str.19 = private unnamed_addr constant [22 x i8] c"Multi-call invocation\00", align 1
@.str.20 = private unnamed_addr constant [10 x i8] c"sha224sum\00", align 1
@.str.21 = private unnamed_addr constant [15 x i8] c"sha2 utilities\00", align 1
@.str.22 = private unnamed_addr constant [10 x i8] c"sha256sum\00", align 1
@.str.23 = private unnamed_addr constant [10 x i8] c"sha384sum\00", align 1
@.str.24 = private unnamed_addr constant [10 x i8] c"sha512sum\00", align 1
@.str.9 = private unnamed_addr constant [16 x i8] c"POSIXLY_CORRECT\00", align 1
@.str.12 = private unnamed_addr constant [24 x i8] c"/usr/local/share/locale\00", align 1
@.str.13 = private unnamed_addr constant [3 x i8] c"LP\00", align 1
@longopts = internal constant [5 x %struct.option] [%struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.32, i32 0, i32 0), i32 0, i32* null, i32 76 }, %struct.option { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.33, i32 0, i32 0), i32 0, i32* null, i32 80 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.34, i32 0, i32 0), i32 0, i32* null, i32 -130 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.35, i32 0, i32 0), i32 0, i32* null, i32 -131 }, %struct.option zeroinitializer], align 16, !dbg !0
@.str.15 = private unnamed_addr constant [13 x i8] c"Jim Meyering\00", align 1
@optind = external dso_local global i32, align 4
@.str.16 = private unnamed_addr constant [30 x i8] c"ignoring non-option arguments\00", align 1
@.str.39 = private unnamed_addr constant [31 x i8] c"failed to get attributes of %s\00", align 1
@.str.40 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@.str.38 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.41 = private unnamed_addr constant [18 x i8] c"failed to stat %s\00", align 1
@.str.42 = private unnamed_addr constant [3 x i8] c"..\00", align 1
@.str.43 = private unnamed_addr constant [25 x i8] c"cannot open directory %s\00", align 1
@.str.44 = private unnamed_addr constant [22 x i8] c"failed to chdir to %s\00", align 1
@.str.45 = private unnamed_addr constant [21 x i8] c"reading directory %s\00", align 1
@.str.46 = private unnamed_addr constant [57 x i8] c"couldn't find directory entry in %s with matching i-node\00", align 1
@.str.47 = private unnamed_addr constant [4 x i8] c"../\00", align 1
@.str.36 = private unnamed_addr constant [4 x i8] c"PWD\00", align 1
@.str.37 = private unnamed_addr constant [3 x i8] c"/.\00", align 1
@.str.32 = private unnamed_addr constant [8 x i8] c"logical\00", align 1
@.str.33 = private unnamed_addr constant [9 x i8] c"physical\00", align 1
@.str.34 = private unnamed_addr constant [5 x i8] c"help\00", align 1
@.str.35 = private unnamed_addr constant [8 x i8] c"version\00", align 1
@Version = internal global i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.48, i32 0, i32 0), align 8, !dbg !25
@.str.48 = private unnamed_addr constant [5 x i8] c"8.32\00", align 1
@ignore_EPIPE = internal global i8 0, align 1, !dbg !30
@.str.51 = private unnamed_addr constant [12 x i8] c"write error\00", align 1
@file_name = internal global i8* null, align 8, !dbg !35
@.str.1.52 = private unnamed_addr constant [7 x i8] c"%s: %s\00", align 1
@.str.2.53 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@exit_failure = internal global i32 1, align 4, !dbg !39
@.str.58 = private unnamed_addr constant [56 x i8] c"A NULL argv[0] was passed through an exec system call.\0A\00", align 1
@.str.1.59 = private unnamed_addr constant [8 x i8] c"/.libs/\00", align 1
@.str.2.60 = private unnamed_addr constant [4 x i8] c"lt-\00", align 1
@program_invocation_short_name = external dso_local global i8*, align 8
@program_name = internal global i8* null, align 8, !dbg !46
@program_invocation_name = external dso_local global i8*, align 8
@default_quoting_options = internal global %struct.quoting_options zeroinitializer, align 8, !dbg !52
@slotvec = internal global %struct.slotvec* @slotvec0, align 8, !dbg !108
@nslots = internal global i32 1, align 4, !dbg !115
@slotvec0 = internal global %struct.slotvec { i64 256, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i32 0, i32 0) }, align 8, !dbg !117
@slot0 = internal global [256 x i8] zeroinitializer, align 16, !dbg !103
@.str.10.63 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.11.64 = private unnamed_addr constant [2 x i8] c"`\00", align 1
@.str.12.65 = private unnamed_addr constant [2 x i8] c"'\00", align 1
@.str.13.66 = private unnamed_addr constant [6 x i8] c"UTF-8\00", align 1
@.str.14.67 = private unnamed_addr constant [4 x i8] c"\E2\80\98\00", align 1
@.str.15.68 = private unnamed_addr constant [4 x i8] c"\E2\80\99\00", align 1
@.str.16.69 = private unnamed_addr constant [8 x i8] c"GB18030\00", align 1
@.str.17.70 = private unnamed_addr constant [4 x i8] c"\A1\07e\00", align 1
@.str.18.71 = private unnamed_addr constant [3 x i8] c"\A1\AF\00", align 1
@quote_quoting_options = internal global %struct.quoting_options { i32 8, i32 0, [8 x i32] zeroinitializer, i8* null, i8* null }, align 8, !dbg !91
@.str.80 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@.str.81 = private unnamed_addr constant [12 x i8] c"%s (%s) %s\0A\00", align 1
@.str.1.82 = private unnamed_addr constant [7 x i8] c"%s %s\0A\00", align 1
@.str.2.83 = private unnamed_addr constant [4 x i8] c"(C)\00", align 1
@.str.3.84 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.4.85 = private unnamed_addr constant [171 x i8] c"License GPLv3+: GNU GPL version 3 or later <%s>.\0AThis is free software: you are free to change and redistribute it.\0AThere is NO WARRANTY, to the extent permitted by law.\0A\00", align 1
@.str.5.86 = private unnamed_addr constant [34 x i8] c"https://gnu.org/licenses/gpl.html\00", align 1
@.str.6.87 = private unnamed_addr constant [16 x i8] c"Written by %s.\0A\00", align 1
@.str.7.88 = private unnamed_addr constant [23 x i8] c"Written by %s and %s.\0A\00", align 1
@.str.8.89 = private unnamed_addr constant [28 x i8] c"Written by %s, %s, and %s.\0A\00", align 1
@.str.9.90 = private unnamed_addr constant [32 x i8] c"Written by %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.10.91 = private unnamed_addr constant [36 x i8] c"Written by %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.11.92 = private unnamed_addr constant [40 x i8] c"Written by %s, %s, %s,\0A%s, %s, and %s.\0A\00", align 1
@.str.12.93 = private unnamed_addr constant [44 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, and %s.\0A\00", align 1
@.str.13.94 = private unnamed_addr constant [48 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.14.95 = private unnamed_addr constant [52 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.15.96 = private unnamed_addr constant [60 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, %s, and others.\0A\00", align 1
@version_etc_copyright = internal constant [47 x i8] c"Copyright %s %d Free Software Foundation, Inc.\00", align 16, !dbg !119
@.str.1.111 = private unnamed_addr constant [17 x i8] c"memory exhausted\00", align 1
@.str.112 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.123 = private unnamed_addr constant [2 x i8] c"C\00", align 1
@.str.1.124 = private unnamed_addr constant [6 x i8] c"POSIX\00", align 1
@.str.127 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1.128 = private unnamed_addr constant [6 x i8] c"ASCII\00", align 1
@inVal0 = global i32 0
@inVal1 = global i8** null
@.compVal0 = private global [4 x i8] c"-LL\00"
@.compVal1 = private global [1 x i8] zeroinitializer
@.compVal2 = private global [3 x i8] c"-L\00"
@x = common global i32 0
@y = common global i32 0
@x.1 = common global i32 0
@y.2 = common global i32 0
@x.3 = common global i32 0
@y.4 = common global i32 0
@x.5 = common global i32 0
@y.6 = common global i32 0
@x.7 = common global i32 0
@y.8 = common global i32 0
@x.9 = common global i32 0
@y.10 = common global i32 0
@x.11 = common global i32 0
@y.12 = common global i32 0
@x.13 = common global i32 0
@y.14 = common global i32 0
@x.15 = common global i32 0
@y.16 = common global i32 0
@x.17 = common global i32 0
@y.18 = common global i32 0
@x.19 = common global i32 0
@y.20 = common global i32 0
@x.21 = common global i32 0
@y.22 = common global i32 0
@x.23 = common global i32 0
@y.24 = common global i32 0
@x.25 = common global i32 0
@y.26 = common global i32 0
@x.27 = common global i32 0
@y.28 = common global i32 0
@x.29 = common global i32 0
@y.30 = common global i32 0
@x.31 = common global i32 0
@y.32 = common global i32 0
@x.33 = common global i32 0
@y.34 = common global i32 0
@x.35 = common global i32 0
@y.36 = common global i32 0
@x.37 = common global i32 0
@y.38 = common global i32 0
@x.39 = common global i32 0
@y.40 = common global i32 0
@x.41 = common global i32 0
@y.42 = common global i32 0
@x.43 = common global i32 0
@y.44 = common global i32 0
@x.45 = common global i32 0
@y.46 = common global i32 0
@x.47 = common global i32 0
@y.48 = common global i32 0
@x.49 = common global i32 0
@y.50 = common global i32 0
@x.51 = common global i32 0
@y.52 = common global i32 0
@x.53 = common global i32 0
@y.54 = common global i32 0
@x.55 = common global i32 0
@y.56 = common global i32 0
@x.57 = common global i32 0
@y.58 = common global i32 0
@x.59 = common global i32 0
@y.60 = common global i32 0
@x.61 = common global i32 0
@y.62 = common global i32 0
@x.63 = common global i32 0
@y.64 = common global i32 0
@x.65 = common global i32 0
@y.66 = common global i32 0
@x.67 = common global i32 0
@y.68 = common global i32 0
@x.69 = common global i32 0
@y.70 = common global i32 0
@x.71 = common global i32 0
@y.72 = common global i32 0
@x.73 = common global i32 0
@y.74 = common global i32 0
@x.75 = common global i32 0
@y.76 = common global i32 0
@x.77 = common global i32 0
@y.78 = common global i32 0
@x.79 = common global i32 0
@y.80 = common global i32 0
@x.81 = common global i32 0
@y.82 = common global i32 0
@x.83 = common global i32 0
@y.84 = common global i32 0
@x.85 = common global i32 0
@y.86 = common global i32 0
@x.87 = common global i32 0
@y.88 = common global i32 0
@x.89 = common global i32 0
@y.90 = common global i32 0
@x.91 = common global i32 0
@y.92 = common global i32 0
@x.93 = common global i32 0
@y.94 = common global i32 0
@x.95 = common global i32 0
@y.96 = common global i32 0
@x.97 = common global i32 0
@y.98 = common global i32 0
@x.99 = common global i32 0
@y.100 = common global i32 0

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @usage(i32) #0 !dbg !171 {
  %2 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  call void @llvm.dbg.declare(metadata i32* %2, metadata !174, metadata !DIExpression()), !dbg !175
  %3 = load i32, i32* %2, align 4, !dbg !176
  %4 = icmp ne i32 %3, 0, !dbg !178
  br i1 %4, label %5, label %60, !dbg !179

5:                                                ; preds = %1
  %6 = load i32, i32* @x
  %7 = load i32, i32* @y
  %8 = sub i32 %6, 1
  %9 = mul i32 %6, %8
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  %12 = icmp slt i32 %7, 10
  %13 = or i1 %11, %12
  br i1 %13, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %5, %originalBBalteredBB
  %14 = load i32, i32* @x
  %15 = load i32, i32* @y
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %22, !dbg !180

22:                                               ; preds = %originalBBpart2
  %23 = load i32, i32* @x
  %24 = load i32, i32* @y
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %22, %originalBB1alteredBB
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !181
  %32 = call i8* @gettext(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0)) #10, !dbg !181
  %33 = load i8*, i8** @program_name, align 8, !dbg !181
  %34 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %31, i8* %32, i8* %33), !dbg !181
  %35 = load i32, i32* @x
  %36 = load i32, i32* @y
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %43, !dbg !181

43:                                               ; preds = %originalBBpart24
  %44 = load i32, i32* @x
  %45 = load i32, i32* @y
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %43, %originalBB6alteredBB
  %52 = load i32, i32* @x
  %53 = load i32, i32* @y
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %97, !dbg !181

60:                                               ; preds = %1
  %61 = load i32, i32* @x
  %62 = load i32, i32* @y
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %60, %originalBB10alteredBB
  %69 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0)) #10, !dbg !183
  %70 = load i8*, i8** @program_name, align 8, !dbg !185
  %71 = call i32 (i8*, ...) @printf(i8* %69, i8* %70), !dbg !186
  %72 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.2, i64 0, i64 0)) #10, !dbg !187
  %73 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !187
  %74 = call i32 @fputs_unlocked(i8* %72, %struct._IO_FILE* %73), !dbg !187
  %75 = call i8* @gettext(i8* getelementptr inbounds ([111 x i8], [111 x i8]* @.str.3, i64 0, i64 0)) #10, !dbg !188
  %76 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !188
  %77 = call i32 @fputs_unlocked(i8* %75, %struct._IO_FILE* %76), !dbg !188
  %78 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.4, i64 0, i64 0)) #10, !dbg !189
  %79 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !189
  %80 = call i32 @fputs_unlocked(i8* %78, %struct._IO_FILE* %79), !dbg !189
  %81 = call i8* @gettext(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.5, i64 0, i64 0)) #10, !dbg !190
  %82 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !190
  %83 = call i32 @fputs_unlocked(i8* %81, %struct._IO_FILE* %82), !dbg !190
  %84 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.6, i64 0, i64 0)) #10, !dbg !191
  %85 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !191
  %86 = call i32 @fputs_unlocked(i8* %84, %struct._IO_FILE* %85), !dbg !191
  %87 = call i8* @gettext(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.7, i64 0, i64 0)) #10, !dbg !192
  %88 = call i32 (i8*, ...) @printf(i8* %87, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0)), !dbg !193
  call void @emit_ancillary_info(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0)), !dbg !194
  %89 = load i32, i32* @x
  %90 = load i32, i32* @y
  %91 = sub i32 %89, 1
  %92 = mul i32 %89, %91
  %93 = urem i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %94, %95
  br i1 %96, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %97

97:                                               ; preds = %originalBBpart212, %originalBBpart28
  %98 = load i32, i32* @x
  %99 = load i32, i32* @y
  %100 = sub i32 %98, 1
  %101 = mul i32 %98, %100
  %102 = urem i32 %101, 2
  %103 = icmp eq i32 %102, 0
  %104 = icmp slt i32 %99, 10
  %105 = or i1 %103, %104
  br i1 %105, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %97, %originalBB14alteredBB
  %106 = load i32, i32* %2, align 4, !dbg !195
  call void @exit(i32 %106) #12, !dbg !196
  %107 = load i32, i32* @x
  %108 = load i32, i32* @y
  %109 = sub i32 %107, 1
  %110 = mul i32 %107, %109
  %111 = urem i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %108, 10
  %114 = or i1 %112, %113
  br i1 %114, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  unreachable, !dbg !196

originalBBalteredBB:                              ; preds = %originalBB, %5
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %22
  %115 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !181
  %116 = call i8* @gettext(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0)) #10, !dbg !181
  %117 = load i8*, i8** @program_name, align 8, !dbg !181
  %118 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %115, i8* %116, i8* %117), !dbg !181
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %43
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %60
  %119 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0)) #10, !dbg !183
  %120 = load i8*, i8** @program_name, align 8, !dbg !185
  %121 = call i32 (i8*, ...) @printf(i8* %119, i8* %120), !dbg !186
  %122 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.2, i64 0, i64 0)) #10, !dbg !187
  %123 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !187
  %124 = call i32 @fputs_unlocked(i8* %122, %struct._IO_FILE* %123), !dbg !187
  %125 = call i8* @gettext(i8* getelementptr inbounds ([111 x i8], [111 x i8]* @.str.3, i64 0, i64 0)) #10, !dbg !188
  %126 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !188
  %127 = call i32 @fputs_unlocked(i8* %125, %struct._IO_FILE* %126), !dbg !188
  %128 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.4, i64 0, i64 0)) #10, !dbg !189
  %129 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !189
  %130 = call i32 @fputs_unlocked(i8* %128, %struct._IO_FILE* %129), !dbg !189
  %131 = call i8* @gettext(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.5, i64 0, i64 0)) #10, !dbg !190
  %132 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !190
  %133 = call i32 @fputs_unlocked(i8* %131, %struct._IO_FILE* %132), !dbg !190
  %134 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.6, i64 0, i64 0)) #10, !dbg !191
  %135 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !191
  %136 = call i32 @fputs_unlocked(i8* %134, %struct._IO_FILE* %135), !dbg !191
  %137 = call i8* @gettext(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.7, i64 0, i64 0)) #10, !dbg !192
  %138 = call i32 (i8*, ...) @printf(i8* %137, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0)), !dbg !193
  call void @emit_ancillary_info(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0)), !dbg !194
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %97
  %139 = load i32, i32* %2, align 4, !dbg !195
  call void @exit(i32 %139) #12, !dbg !196
  br label %originalBB14
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare dso_local i8* @gettext(i8*) #2

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #3

declare dso_local i32 @printf(i8*, ...) #3

declare dso_local i32 @fputs_unlocked(i8*, %struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @emit_ancillary_info(i8*) #4 !dbg !197 {
  %2 = alloca i8*, align 8
  %3 = alloca [7 x %struct.infomap], align 16
  %4 = alloca i8*, align 8
  %5 = alloca %struct.infomap*, align 8
  %6 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  call void @llvm.dbg.declare(metadata i8** %2, metadata !201, metadata !DIExpression()), !dbg !202
  call void @llvm.dbg.declare(metadata [7 x %struct.infomap]* %3, metadata !203, metadata !DIExpression()), !dbg !212
  %7 = bitcast [7 x %struct.infomap]* %3 to i8*, !dbg !212
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %7, i8* align 16 bitcast ([7 x %struct.infomap]* @__const.emit_ancillary_info.infomap to i8*), i64 112, i1 false), !dbg !212
  call void @llvm.dbg.declare(metadata i8** %4, metadata !213, metadata !DIExpression()), !dbg !214
  %8 = load i8*, i8** %2, align 8, !dbg !215
  store i8* %8, i8** %4, align 8, !dbg !214
  call void @llvm.dbg.declare(metadata %struct.infomap** %5, metadata !216, metadata !DIExpression()), !dbg !218
  %9 = getelementptr inbounds [7 x %struct.infomap], [7 x %struct.infomap]* %3, i64 0, i64 0, !dbg !219
  store %struct.infomap* %9, %struct.infomap** %5, align 8, !dbg !218
  br label %10, !dbg !220

10:                                               ; preds = %originalBBpart28, %1
  %11 = load i32, i32* @x.1
  %12 = load i32, i32* @y.2
  %13 = sub i32 %11, 1
  %14 = mul i32 %11, %13
  %15 = urem i32 %14, 2
  %16 = icmp eq i32 %15, 0
  %17 = icmp slt i32 %12, 10
  %18 = or i1 %16, %17
  br i1 %18, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %10, %originalBBalteredBB
  %19 = load %struct.infomap*, %struct.infomap** %5, align 8, !dbg !221
  %20 = getelementptr inbounds %struct.infomap, %struct.infomap* %19, i32 0, i32 0, !dbg !222
  %21 = load i8*, i8** %20, align 8, !dbg !222
  %22 = icmp ne i8* %21, null, !dbg !221
  %23 = load i32, i32* @x.1
  %24 = load i32, i32* @y.2
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %31, label %39, !dbg !223

31:                                               ; preds = %originalBBpart2
  %32 = load i8*, i8** %2, align 8, !dbg !224
  %33 = load %struct.infomap*, %struct.infomap** %5, align 8, !dbg !224
  %34 = getelementptr inbounds %struct.infomap, %struct.infomap* %33, i32 0, i32 0, !dbg !224
  %35 = load i8*, i8** %34, align 8, !dbg !224
  %36 = call i32 @strcmp(i8* %32, i8* %35) #13, !dbg !224
  %37 = icmp eq i32 %36, 0, !dbg !224
  %38 = xor i1 %37, true, !dbg !225
  br label %39

39:                                               ; preds = %31, %originalBBpart2
  %40 = phi i1 [ false, %originalBBpart2 ], [ %38, %31 ], !dbg !226
  %41 = load i32, i32* @x.1
  %42 = load i32, i32* @y.2
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %39, %originalBB1alteredBB
  %49 = load i32, i32* @x.1
  %50 = load i32, i32* @y.2
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %40, label %57, label %76, !dbg !220

57:                                               ; preds = %originalBBpart24
  %58 = load i32, i32* @x.1
  %59 = load i32, i32* @y.2
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %57, %originalBB6alteredBB
  %66 = load %struct.infomap*, %struct.infomap** %5, align 8, !dbg !227
  %67 = getelementptr inbounds %struct.infomap, %struct.infomap* %66, i32 1, !dbg !227
  store %struct.infomap* %67, %struct.infomap** %5, align 8, !dbg !227
  %68 = load i32, i32* @x.1
  %69 = load i32, i32* @y.2
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %10, !dbg !220, !llvm.loop !228

76:                                               ; preds = %originalBBpart24
  %77 = load %struct.infomap*, %struct.infomap** %5, align 8, !dbg !229
  %78 = getelementptr inbounds %struct.infomap, %struct.infomap* %77, i32 0, i32 1, !dbg !231
  %79 = load i8*, i8** %78, align 8, !dbg !231
  %80 = icmp ne i8* %79, null, !dbg !229
  br i1 %80, label %81, label %101, !dbg !232

81:                                               ; preds = %76
  %82 = load i32, i32* @x.1
  %83 = load i32, i32* @y.2
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %81, %originalBB10alteredBB
  %90 = load %struct.infomap*, %struct.infomap** %5, align 8, !dbg !233
  %91 = getelementptr inbounds %struct.infomap, %struct.infomap* %90, i32 0, i32 1, !dbg !234
  %92 = load i8*, i8** %91, align 8, !dbg !234
  store i8* %92, i8** %4, align 8, !dbg !235
  %93 = load i32, i32* @x.1
  %94 = load i32, i32* @y.2
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %101, !dbg !236

101:                                              ; preds = %originalBBpart212, %76
  %102 = load i32, i32* @x.1
  %103 = load i32, i32* @y.2
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %101, %originalBB14alteredBB
  %110 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.25, i64 0, i64 0)) #10, !dbg !237
  %111 = call i32 (i8*, ...) @printf(i8* %110, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.26, i64 0, i64 0)), !dbg !238
  call void @llvm.dbg.declare(metadata i8** %6, metadata !239, metadata !DIExpression()), !dbg !240
  %112 = call i8* @setlocale(i32 5, i8* null) #10, !dbg !241
  store i8* %112, i8** %6, align 8, !dbg !240
  %113 = load i8*, i8** %6, align 8, !dbg !242
  %114 = icmp ne i8* %113, null, !dbg !242
  %115 = load i32, i32* @x.1
  %116 = load i32, i32* @y.2
  %117 = sub i32 %115, 1
  %118 = mul i32 %115, %117
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %120, %121
  br i1 %122, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %114, label %123, label %163, !dbg !244

123:                                              ; preds = %originalBBpart216
  %124 = load i32, i32* @x.1
  %125 = load i32, i32* @y.2
  %126 = sub i32 %124, 1
  %127 = mul i32 %124, %126
  %128 = urem i32 %127, 2
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %125, 10
  %131 = or i1 %129, %130
  br i1 %131, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %123, %originalBB18alteredBB
  %132 = load i8*, i8** %6, align 8, !dbg !245
  %133 = call i32 @strncmp(i8* %132, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.27, i64 0, i64 0), i64 3) #13, !dbg !245
  %134 = icmp ne i32 %133, 0, !dbg !245
  %135 = load i32, i32* @x.1
  %136 = load i32, i32* @y.2
  %137 = sub i32 %135, 1
  %138 = mul i32 %135, %137
  %139 = urem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %140, %141
  br i1 %142, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %134, label %143, label %163, !dbg !246

143:                                              ; preds = %originalBBpart220
  %144 = load i32, i32* @x.1
  %145 = load i32, i32* @y.2
  %146 = sub i32 %144, 1
  %147 = mul i32 %144, %146
  %148 = urem i32 %147, 2
  %149 = icmp eq i32 %148, 0
  %150 = icmp slt i32 %145, 10
  %151 = or i1 %149, %150
  br i1 %151, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %143, %originalBB22alteredBB
  %152 = call i8* @gettext(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.28, i64 0, i64 0)) #10, !dbg !247
  %153 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !247
  %154 = call i32 @fputs_unlocked(i8* %152, %struct._IO_FILE* %153), !dbg !247
  %155 = load i32, i32* @x.1
  %156 = load i32, i32* @y.2
  %157 = sub i32 %155, 1
  %158 = mul i32 %155, %157
  %159 = urem i32 %158, 2
  %160 = icmp eq i32 %159, 0
  %161 = icmp slt i32 %156, 10
  %162 = or i1 %160, %161
  br i1 %162, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %163, !dbg !249

163:                                              ; preds = %originalBBpart224, %originalBBpart220, %originalBBpart216
  %164 = load i32, i32* @x.1
  %165 = load i32, i32* @y.2
  %166 = sub i32 %164, 1
  %167 = mul i32 %164, %166
  %168 = urem i32 %167, 2
  %169 = icmp eq i32 %168, 0
  %170 = icmp slt i32 %165, 10
  %171 = or i1 %169, %170
  br i1 %171, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %163, %originalBB26alteredBB
  %172 = call i8* @gettext(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.29, i64 0, i64 0)) #10, !dbg !250
  %173 = load i8*, i8** %2, align 8, !dbg !251
  %174 = call i32 (i8*, ...) @printf(i8* %172, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.26, i64 0, i64 0), i8* %173), !dbg !252
  %175 = call i8* @gettext(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.30, i64 0, i64 0)) #10, !dbg !253
  %176 = load i8*, i8** %4, align 8, !dbg !254
  %177 = load i8*, i8** %4, align 8, !dbg !255
  %178 = load i8*, i8** %2, align 8, !dbg !256
  %179 = icmp eq i8* %177, %178, !dbg !257
  %180 = zext i1 %179 to i64, !dbg !255
  %181 = select i1 %179, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.31, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0), !dbg !255
  %182 = call i32 (i8*, ...) @printf(i8* %175, i8* %176, i8* %181), !dbg !258
  %183 = load i32, i32* @x.1
  %184 = load i32, i32* @y.2
  %185 = sub i32 %183, 1
  %186 = mul i32 %183, %185
  %187 = urem i32 %186, 2
  %188 = icmp eq i32 %187, 0
  %189 = icmp slt i32 %184, 10
  %190 = or i1 %188, %189
  br i1 %190, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  ret void, !dbg !259

originalBBalteredBB:                              ; preds = %originalBB, %10
  %191 = load %struct.infomap*, %struct.infomap** %5, align 8, !dbg !221
  %192 = getelementptr inbounds %struct.infomap, %struct.infomap* %191, i32 0, i32 0, !dbg !222
  %193 = load i8*, i8** %192, align 8, !dbg !222
  %194 = icmp ne i8* %193, null, !dbg !221
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %39
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %57
  %195 = load %struct.infomap*, %struct.infomap** %5, align 8, !dbg !227
  %196 = getelementptr inbounds %struct.infomap, %struct.infomap* %195, i32 1, !dbg !227
  store %struct.infomap* %196, %struct.infomap** %5, align 8, !dbg !227
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %81
  %197 = load %struct.infomap*, %struct.infomap** %5, align 8, !dbg !233
  %198 = getelementptr inbounds %struct.infomap, %struct.infomap* %197, i32 0, i32 1, !dbg !234
  %199 = load i8*, i8** %198, align 8, !dbg !234
  store i8* %199, i8** %4, align 8, !dbg !235
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %101
  %200 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.25, i64 0, i64 0)) #10, !dbg !237
  %201 = call i32 (i8*, ...) @printf(i8* %200, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.14, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.26, i64 0, i64 0)), !dbg !238
  call void @llvm.dbg.declare(metadata !4, metadata !260, metadata !DIExpression()), !dbg !240
  %202 = call i8* @setlocale(i32 5, i8* null) #10, !dbg !241
  store i8* %202, i8** %6, align 8, !dbg !240
  %203 = load i8*, i8** %6, align 8, !dbg !242
  %204 = icmp ne i8* %203, null, !dbg !242
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %123
  %205 = load i8*, i8** %6, align 8, !dbg !245
  %206 = call i32 @strncmp(i8* %205, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.27, i64 0, i64 0), i64 3) #13, !dbg !245
  %207 = icmp ne i32 %206, 0, !dbg !245
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %143
  %208 = call i8* @gettext(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.28, i64 0, i64 0)) #10, !dbg !247
  %209 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !247
  %210 = call i32 @fputs_unlocked(i8* %208, %struct._IO_FILE* %209), !dbg !247
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %163
  %211 = call i8* @gettext(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.29, i64 0, i64 0)) #10, !dbg !250
  %212 = load i8*, i8** %2, align 8, !dbg !251
  %213 = call i32 (i8*, ...) @printf(i8* %211, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.26, i64 0, i64 0), i8* %212), !dbg !252
  %214 = call i8* @gettext(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.30, i64 0, i64 0)) #10, !dbg !253
  %215 = load i8*, i8** %4, align 8, !dbg !254
  %216 = load i8*, i8** %4, align 8, !dbg !255
  %217 = load i8*, i8** %2, align 8, !dbg !256
  %218 = icmp eq i8* %216, %217, !dbg !257
  %219 = zext i1 %218 to i64, !dbg !255
  %220 = select i1 %218, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.31, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0), !dbg !255
  %221 = call i32 (i8*, ...) @printf(i8* %214, i8* %215, i8* %220), !dbg !258
  br label %originalBB26
}

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

; Function Attrs: nounwind readonly
declare dso_local i32 @strcmp(i8*, i8*) #7

; Function Attrs: nounwind
declare dso_local i8* @setlocale(i32, i8*) #2

; Function Attrs: nounwind readonly
declare dso_local i32 @strncmp(i8*, i8*, i64) #7

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32, i8**) #4 !dbg !274 {
  store i8** %1, i8*** @inVal1
  store i32 %0, i32* @inVal0
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8, align 1
  %8 = alloca i32, align 4
  %9 = alloca %struct.file_name*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !278, metadata !DIExpression()), !dbg !279
  store i8** %1, i8*** %5, align 8
  call void @llvm.dbg.declare(metadata i8*** %5, metadata !280, metadata !DIExpression()), !dbg !281
  call void @llvm.dbg.declare(metadata i8** %6, metadata !282, metadata !DIExpression()), !dbg !283
  call void @llvm.dbg.declare(metadata i8* %7, metadata !284, metadata !DIExpression()), !dbg !285
  %10 = call i8* @getenv(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i64 0, i64 0)) #10, !dbg !286
  %11 = icmp ne i8* %10, null, !dbg !287
  %12 = zext i1 %11 to i8, !dbg !285
  store i8 %12, i8* %7, align 1, !dbg !285
  %13 = load i8**, i8*** %5, align 8, !dbg !288
  %14 = getelementptr inbounds i8*, i8** %13, i64 0, !dbg !288
  %15 = load i8*, i8** %14, align 8, !dbg !288
  call void @set_program_name(i8* %15), !dbg !289
  %16 = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0)) #10, !dbg !290
  %17 = call i8* @bindtextdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.12, i64 0, i64 0)) #10, !dbg !291
  %18 = call i8* @textdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0)) #10, !dbg !292
  %19 = call i32 @atexit(void ()* @close_stdout) #10, !dbg !293
  br label %20, !dbg !294

20:                                               ; preds = %242, %2
  call void @llvm.dbg.declare(metadata i32* %8, metadata !295, metadata !DIExpression()), !dbg !297
  %21 = load i32, i32* @x.3
  %22 = load i32, i32* @y.4
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %20, %originalBBalteredBB
  %29 = load i32, i32* %4, align 4, !dbg !298
  %30 = load i8**, i8*** %5, align 8, !dbg !299
  %31 = call i32 @getopt_long(i32 %29, i8** %30, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i64 0, i64 0), %struct.option* getelementptr inbounds ([5 x %struct.option], [5 x %struct.option]* @longopts, i64 0, i64 0), i32* null) #10, !dbg !300
  store i32 %31, i32* %8, align 4, !dbg !297
  %32 = load i32, i32* %8, align 4, !dbg !301
  %33 = load i32, i32* @x.3
  %34 = load i32, i32* @y.4
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %41, !dbg !303

41:                                               ; preds = %originalBBpart2
  %collatzVar = alloca i32
  br label %42

42:                                               ; preds = %41
  %43 = load i32, i32* @x.3
  %44 = load i32, i32* @y.4
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %42, %originalBB1alteredBB
  %51 = load i32, i32* @inVal0
  %52 = icmp sgt i32 %51, 1
  %53 = load i32, i32* @x.3
  %54 = load i32, i32* @y.4
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %52, label %62, label %61

61:                                               ; preds = %originalBBpart24
  store i32 19, i32* %collatzVar
  br label %62

62:                                               ; preds = %61, %originalBBpart24
  %63 = load i8**, i8*** @inVal1
  %64 = getelementptr inbounds i8*, i8** %63, i64 1
  %65 = load i8*, i8** %64
  %controle = call i32 @controle(i8* %65, i32 -1)
  store i32 %controle, i32* %collatzVar
  br label %66

66:                                               ; preds = %148, %originalBBpart253, %62
  %67 = load i32, i32* @x.3
  %68 = load i32, i32* @y.4
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %66, %originalBB6alteredBB
  %75 = load i32, i32* %collatzVar
  %76 = icmp sgt i32 %75, 1
  %77 = load i32, i32* @x.3
  %78 = load i32, i32* @y.4
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %76, label %85, label %153

85:                                               ; preds = %originalBBpart28
  %86 = load i32, i32* %collatzVar
  %87 = srem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  br i1 %88, label %89, label %108

89:                                               ; preds = %85
  %90 = load i32, i32* @x.3
  %91 = load i32, i32* @y.4
  %92 = sub i32 %90, 1
  %93 = mul i32 %90, %92
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %91, 10
  %97 = or i1 %95, %96
  br i1 %97, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %89, %originalBB10alteredBB
  %98 = load i32, i32* %collatzVar
  %99 = sdiv i32 %98, 2
  store i32 %99, i32* %collatzVar
  %100 = load i32, i32* @x.3
  %101 = load i32, i32* @y.4
  %102 = sub i32 %100, 1
  %103 = mul i32 %100, %102
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %105, %106
  br i1 %107, label %originalBBpart222, label %originalBB10alteredBB

originalBBpart222:                                ; preds = %originalBB10
  br label %128

108:                                              ; preds = %85
  %109 = load i32, i32* @x.3
  %110 = load i32, i32* @y.4
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBB24, label %originalBB24alteredBB

originalBB24:                                     ; preds = %108, %originalBB24alteredBB
  %117 = load i32, i32* %collatzVar
  %118 = mul i32 %117, 3
  %119 = add i32 %118, 1
  store i32 %119, i32* %collatzVar
  %120 = load i32, i32* @x.3
  %121 = load i32, i32* @y.4
  %122 = sub i32 %120, 1
  %123 = mul i32 %120, %122
  %124 = urem i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %125, %126
  br i1 %127, label %originalBBpart235, label %originalBB24alteredBB

originalBBpart235:                                ; preds = %originalBB24
  br label %128

128:                                              ; preds = %originalBBpart235, %originalBBpart222
  %129 = load i32, i32* @x.3
  %130 = load i32, i32* @y.4
  %131 = sub i32 %129, 1
  %132 = mul i32 %129, %131
  %133 = urem i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %130, 10
  %136 = or i1 %134, %135
  br i1 %136, label %originalBB37, label %originalBB37alteredBB

originalBB37:                                     ; preds = %128, %originalBB37alteredBB
  %137 = load i32, i32* %collatzVar
  %138 = sub i32 %32, %137
  %139 = icmp sgt i32 %138, -3
  %140 = load i32, i32* @x.3
  %141 = load i32, i32* @y.4
  %142 = sub i32 %140, 1
  %143 = mul i32 %140, %142
  %144 = urem i32 %143, 2
  %145 = icmp eq i32 %144, 0
  %146 = icmp slt i32 %141, 10
  %147 = or i1 %145, %146
  br i1 %147, label %originalBBpart253, label %originalBB37alteredBB

originalBBpart253:                                ; preds = %originalBB37
  br i1 %139, label %148, label %66

148:                                              ; preds = %originalBBpart253
  %149 = load i32, i32* %collatzVar
  %150 = add i32 %32, %149
  %151 = icmp slt i32 %150, 1
  br i1 %151, label %152, label %66

152:                                              ; preds = %148
  br label %243, !dbg !304

153:                                              ; preds = %originalBBpart28
  %154 = load i32, i32* @x.3
  %155 = load i32, i32* @y.4
  %156 = sub i32 %154, 1
  %157 = mul i32 %154, %156
  %158 = urem i32 %157, 2
  %159 = icmp eq i32 %158, 0
  %160 = icmp slt i32 %155, 10
  %161 = or i1 %159, %160
  br i1 %161, label %originalBB55, label %originalBB55alteredBB

originalBB55:                                     ; preds = %153, %originalBB55alteredBB
  %162 = load i32, i32* %8, align 4, !dbg !305
  %163 = load i32, i32* @x.3
  %164 = load i32, i32* @y.4
  %165 = sub i32 %163, 1
  %166 = mul i32 %163, %165
  %167 = urem i32 %166, 2
  %168 = icmp eq i32 %167, 0
  %169 = icmp slt i32 %164, 10
  %170 = or i1 %168, %169
  br i1 %170, label %originalBBpart257, label %originalBB55alteredBB

originalBBpart257:                                ; preds = %originalBB55
  switch i32 %162, label %241 [
    i32 76, label %171
    i32 80, label %188
    i32 -130, label %205
    i32 -131, label %222
  ], !dbg !306

171:                                              ; preds = %originalBBpart257
  %172 = load i32, i32* @x.3
  %173 = load i32, i32* @y.4
  %174 = sub i32 %172, 1
  %175 = mul i32 %172, %174
  %176 = urem i32 %175, 2
  %177 = icmp eq i32 %176, 0
  %178 = icmp slt i32 %173, 10
  %179 = or i1 %177, %178
  br i1 %179, label %originalBB59, label %originalBB59alteredBB

originalBB59:                                     ; preds = %171, %originalBB59alteredBB
  store i8 1, i8* %7, align 1, !dbg !307
  %180 = load i32, i32* @x.3
  %181 = load i32, i32* @y.4
  %182 = sub i32 %180, 1
  %183 = mul i32 %180, %182
  %184 = urem i32 %183, 2
  %185 = icmp eq i32 %184, 0
  %186 = icmp slt i32 %181, 10
  %187 = or i1 %185, %186
  br i1 %187, label %originalBBpart261, label %originalBB59alteredBB

originalBBpart261:                                ; preds = %originalBB59
  br label %242, !dbg !309

188:                                              ; preds = %originalBBpart257
  %189 = load i32, i32* @x.3
  %190 = load i32, i32* @y.4
  %191 = sub i32 %189, 1
  %192 = mul i32 %189, %191
  %193 = urem i32 %192, 2
  %194 = icmp eq i32 %193, 0
  %195 = icmp slt i32 %190, 10
  %196 = or i1 %194, %195
  br i1 %196, label %originalBB63, label %originalBB63alteredBB

originalBB63:                                     ; preds = %188, %originalBB63alteredBB
  store i8 0, i8* %7, align 1, !dbg !310
  %197 = load i32, i32* @x.3
  %198 = load i32, i32* @y.4
  %199 = sub i32 %197, 1
  %200 = mul i32 %197, %199
  %201 = urem i32 %200, 2
  %202 = icmp eq i32 %201, 0
  %203 = icmp slt i32 %198, 10
  %204 = or i1 %202, %203
  br i1 %204, label %originalBBpart265, label %originalBB63alteredBB

originalBBpart265:                                ; preds = %originalBB63
  br label %242, !dbg !311

205:                                              ; preds = %originalBBpart257
  %206 = load i32, i32* @x.3
  %207 = load i32, i32* @y.4
  %208 = sub i32 %206, 1
  %209 = mul i32 %206, %208
  %210 = urem i32 %209, 2
  %211 = icmp eq i32 %210, 0
  %212 = icmp slt i32 %207, 10
  %213 = or i1 %211, %212
  br i1 %213, label %originalBB67, label %originalBB67alteredBB

originalBB67:                                     ; preds = %205, %originalBB67alteredBB
  call void @usage(i32 0) #14, !dbg !312
  %214 = load i32, i32* @x.3
  %215 = load i32, i32* @y.4
  %216 = sub i32 %214, 1
  %217 = mul i32 %214, %216
  %218 = urem i32 %217, 2
  %219 = icmp eq i32 %218, 0
  %220 = icmp slt i32 %215, 10
  %221 = or i1 %219, %220
  br i1 %221, label %originalBBpart269, label %originalBB67alteredBB

originalBBpart269:                                ; preds = %originalBB67
  unreachable, !dbg !312

222:                                              ; preds = %originalBBpart257
  %223 = load i32, i32* @x.3
  %224 = load i32, i32* @y.4
  %225 = sub i32 %223, 1
  %226 = mul i32 %223, %225
  %227 = urem i32 %226, 2
  %228 = icmp eq i32 %227, 0
  %229 = icmp slt i32 %224, 10
  %230 = or i1 %228, %229
  br i1 %230, label %originalBB71, label %originalBB71alteredBB

originalBB71:                                     ; preds = %222, %originalBB71alteredBB
  %231 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !313
  %232 = load i8*, i8** @Version, align 8, !dbg !313
  call void (%struct._IO_FILE*, i8*, i8*, i8*, ...) @version_etc(%struct._IO_FILE* %231, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.14, i64 0, i64 0), i8* %232, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.15, i64 0, i64 0), i8* null), !dbg !313
  call void @exit(i32 0) #12, !dbg !313
  %233 = load i32, i32* @x.3
  %234 = load i32, i32* @y.4
  %235 = sub i32 %233, 1
  %236 = mul i32 %233, %235
  %237 = urem i32 %236, 2
  %238 = icmp eq i32 %237, 0
  %239 = icmp slt i32 %234, 10
  %240 = or i1 %238, %239
  br i1 %240, label %originalBBpart273, label %originalBB71alteredBB

originalBBpart273:                                ; preds = %originalBB71
  unreachable, !dbg !313

241:                                              ; preds = %originalBBpart257
  call void @usage(i32 1) #14, !dbg !314
  unreachable, !dbg !314

242:                                              ; preds = %originalBBpart265, %originalBBpart261
  br label %20, !dbg !294, !llvm.loop !315

243:                                              ; preds = %152
  %244 = load i32, i32* @x.3
  %245 = load i32, i32* @y.4
  %246 = sub i32 %244, 1
  %247 = mul i32 %244, %246
  %248 = urem i32 %247, 2
  %249 = icmp eq i32 %248, 0
  %250 = icmp slt i32 %245, 10
  %251 = or i1 %249, %250
  br i1 %251, label %originalBB75, label %originalBB75alteredBB

originalBB75:                                     ; preds = %243, %originalBB75alteredBB
  %252 = load i32, i32* @optind, align 4, !dbg !317
  %253 = load i32, i32* %4, align 4, !dbg !319
  %254 = icmp slt i32 %252, %253, !dbg !320
  %255 = load i32, i32* @x.3
  %256 = load i32, i32* @y.4
  %257 = sub i32 %255, 1
  %258 = mul i32 %255, %257
  %259 = urem i32 %258, 2
  %260 = icmp eq i32 %259, 0
  %261 = icmp slt i32 %256, 10
  %262 = or i1 %260, %261
  br i1 %262, label %originalBBpart277, label %originalBB75alteredBB

originalBBpart277:                                ; preds = %originalBB75
  br i1 %254, label %263, label %281, !dbg !321

263:                                              ; preds = %originalBBpart277
  %264 = load i32, i32* @x.3
  %265 = load i32, i32* @y.4
  %266 = sub i32 %264, 1
  %267 = mul i32 %264, %266
  %268 = urem i32 %267, 2
  %269 = icmp eq i32 %268, 0
  %270 = icmp slt i32 %265, 10
  %271 = or i1 %269, %270
  br i1 %271, label %originalBB79, label %originalBB79alteredBB

originalBB79:                                     ; preds = %263, %originalBB79alteredBB
  %272 = call i8* @gettext(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.16, i64 0, i64 0)) #10, !dbg !322
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %272), !dbg !323
  %273 = load i32, i32* @x.3
  %274 = load i32, i32* @y.4
  %275 = sub i32 %273, 1
  %276 = mul i32 %273, %275
  %277 = urem i32 %276, 2
  %278 = icmp eq i32 %277, 0
  %279 = icmp slt i32 %274, 10
  %280 = or i1 %278, %279
  br i1 %280, label %originalBBpart281, label %originalBB79alteredBB

originalBBpart281:                                ; preds = %originalBB79
  br label %281, !dbg !323

281:                                              ; preds = %originalBBpart281, %originalBBpart277
  %282 = load i8, i8* %7, align 1, !dbg !324
  %283 = trunc i8 %282 to i1, !dbg !324
  br i1 %283, label %284, label %308, !dbg !326

284:                                              ; preds = %281
  %285 = call i8* @logical_getcwd(), !dbg !327
  store i8* %285, i8** %6, align 8, !dbg !329
  %286 = load i8*, i8** %6, align 8, !dbg !330
  %287 = icmp ne i8* %286, null, !dbg !330
  br i1 %287, label %288, label %307, !dbg !332

288:                                              ; preds = %284
  %289 = load i32, i32* @x.3
  %290 = load i32, i32* @y.4
  %291 = sub i32 %289, 1
  %292 = mul i32 %289, %291
  %293 = urem i32 %292, 2
  %294 = icmp eq i32 %293, 0
  %295 = icmp slt i32 %290, 10
  %296 = or i1 %294, %295
  br i1 %296, label %originalBB83, label %originalBB83alteredBB

originalBB83:                                     ; preds = %288, %originalBB83alteredBB
  %297 = load i8*, i8** %6, align 8, !dbg !333
  %298 = call i32 @puts(i8* %297), !dbg !335
  store i32 0, i32* %3, align 4, !dbg !336
  %299 = load i32, i32* @x.3
  %300 = load i32, i32* @y.4
  %301 = sub i32 %299, 1
  %302 = mul i32 %299, %301
  %303 = urem i32 %302, 2
  %304 = icmp eq i32 %303, 0
  %305 = icmp slt i32 %300, 10
  %306 = or i1 %304, %305
  br i1 %306, label %originalBBpart285, label %originalBB83alteredBB

originalBBpart285:                                ; preds = %originalBB83
  br label %373, !dbg !336

307:                                              ; preds = %284
  br label %308, !dbg !337

308:                                              ; preds = %307, %281
  %309 = load i32, i32* @x.3
  %310 = load i32, i32* @y.4
  %311 = sub i32 %309, 1
  %312 = mul i32 %309, %311
  %313 = urem i32 %312, 2
  %314 = icmp eq i32 %313, 0
  %315 = icmp slt i32 %310, 10
  %316 = or i1 %314, %315
  br i1 %316, label %originalBB87, label %originalBB87alteredBB

originalBB87:                                     ; preds = %308, %originalBB87alteredBB
  %317 = call i8* @xgetcwd(), !dbg !338
  store i8* %317, i8** %6, align 8, !dbg !339
  %318 = load i8*, i8** %6, align 8, !dbg !340
  %319 = icmp ne i8* %318, null, !dbg !342
  %320 = load i32, i32* @x.3
  %321 = load i32, i32* @y.4
  %322 = sub i32 %320, 1
  %323 = mul i32 %320, %322
  %324 = urem i32 %323, 2
  %325 = icmp eq i32 %324, 0
  %326 = icmp slt i32 %321, 10
  %327 = or i1 %325, %326
  br i1 %327, label %originalBBpart289, label %originalBB87alteredBB

originalBBpart289:                                ; preds = %originalBB87
  br i1 %319, label %328, label %348, !dbg !343

328:                                              ; preds = %originalBBpart289
  %329 = load i32, i32* @x.3
  %330 = load i32, i32* @y.4
  %331 = sub i32 %329, 1
  %332 = mul i32 %329, %331
  %333 = urem i32 %332, 2
  %334 = icmp eq i32 %333, 0
  %335 = icmp slt i32 %330, 10
  %336 = or i1 %334, %335
  br i1 %336, label %originalBB91, label %originalBB91alteredBB

originalBB91:                                     ; preds = %328, %originalBB91alteredBB
  %337 = load i8*, i8** %6, align 8, !dbg !344
  %338 = call i32 @puts(i8* %337), !dbg !346
  %339 = load i8*, i8** %6, align 8, !dbg !347
  call void @free(i8* %339) #10, !dbg !348
  %340 = load i32, i32* @x.3
  %341 = load i32, i32* @y.4
  %342 = sub i32 %340, 1
  %343 = mul i32 %340, %342
  %344 = urem i32 %343, 2
  %345 = icmp eq i32 %344, 0
  %346 = icmp slt i32 %341, 10
  %347 = or i1 %345, %346
  br i1 %347, label %originalBBpart293, label %originalBB91alteredBB

originalBBpart293:                                ; preds = %originalBB91
  br label %372, !dbg !349

348:                                              ; preds = %originalBBpart289
  call void @llvm.dbg.declare(metadata %struct.file_name** %9, metadata !350, metadata !DIExpression()), !dbg !358
  %349 = load i32, i32* @x.3
  %350 = load i32, i32* @y.4
  %351 = sub i32 %349, 1
  %352 = mul i32 %349, %351
  %353 = urem i32 %352, 2
  %354 = icmp eq i32 %353, 0
  %355 = icmp slt i32 %350, 10
  %356 = or i1 %354, %355
  br i1 %356, label %originalBB95, label %originalBB95alteredBB

originalBB95:                                     ; preds = %348, %originalBB95alteredBB
  %357 = call %struct.file_name* @file_name_init(), !dbg !359
  store %struct.file_name* %357, %struct.file_name** %9, align 8, !dbg !358
  %358 = load %struct.file_name*, %struct.file_name** %9, align 8, !dbg !360
  call void @robust_getcwd(%struct.file_name* %358), !dbg !361
  %359 = load %struct.file_name*, %struct.file_name** %9, align 8, !dbg !362
  %360 = getelementptr inbounds %struct.file_name, %struct.file_name* %359, i32 0, i32 2, !dbg !363
  %361 = load i8*, i8** %360, align 8, !dbg !363
  %362 = call i32 @puts(i8* %361), !dbg !364
  %363 = load %struct.file_name*, %struct.file_name** %9, align 8, !dbg !365
  call void @file_name_free(%struct.file_name* %363), !dbg !366
  %364 = load i32, i32* @x.3
  %365 = load i32, i32* @y.4
  %366 = sub i32 %364, 1
  %367 = mul i32 %364, %366
  %368 = urem i32 %367, 2
  %369 = icmp eq i32 %368, 0
  %370 = icmp slt i32 %365, 10
  %371 = or i1 %369, %370
  br i1 %371, label %originalBBpart297, label %originalBB95alteredBB

originalBBpart297:                                ; preds = %originalBB95
  br label %372

372:                                              ; preds = %originalBBpart297, %originalBBpart293
  store i32 0, i32* %3, align 4, !dbg !367
  br label %373, !dbg !367

373:                                              ; preds = %372, %originalBBpart285
  %374 = load i32, i32* @x.3
  %375 = load i32, i32* @y.4
  %376 = sub i32 %374, 1
  %377 = mul i32 %374, %376
  %378 = urem i32 %377, 2
  %379 = icmp eq i32 %378, 0
  %380 = icmp slt i32 %375, 10
  %381 = or i1 %379, %380
  br i1 %381, label %originalBB99, label %originalBB99alteredBB

originalBB99:                                     ; preds = %373, %originalBB99alteredBB
  %382 = load i32, i32* %3, align 4, !dbg !368
  %383 = load i32, i32* @x.3
  %384 = load i32, i32* @y.4
  %385 = sub i32 %383, 1
  %386 = mul i32 %383, %385
  %387 = urem i32 %386, 2
  %388 = icmp eq i32 %387, 0
  %389 = icmp slt i32 %384, 10
  %390 = or i1 %388, %389
  br i1 %390, label %originalBBpart2101, label %originalBB99alteredBB

originalBBpart2101:                               ; preds = %originalBB99
  ret i32 %382, !dbg !368

originalBBalteredBB:                              ; preds = %originalBB, %20
  %391 = load i32, i32* %4, align 4, !dbg !298
  %392 = load i8**, i8*** %5, align 8, !dbg !299
  %393 = call i32 @getopt_long(i32 %391, i8** %392, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.13, i64 0, i64 0), %struct.option* getelementptr inbounds ([5 x %struct.option], [5 x %struct.option]* @longopts, i64 0, i64 0), i32* null) #10, !dbg !300
  store i32 %393, i32* %8, align 4, !dbg !297
  %394 = load i32, i32* %8, align 4, !dbg !301
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %42
  %395 = load i32, i32* @inVal0
  %396 = icmp sgt i32 %395, 1
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %66
  %397 = load i32, i32* %collatzVar
  %398 = icmp sgt i32 %397, 1
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %89
  %399 = load i32, i32* %collatzVar
  %_ = shl i32 %399, 2
  %_11 = shl i32 %399, 2
  %_12 = sub i32 0, %399
  %gen = add i32 %_12, 2
  %_13 = sub i32 0, %399
  %gen14 = add i32 %_13, 2
  %_15 = sub i32 %399, 2
  %gen16 = mul i32 %_15, 2
  %_17 = sub i32 0, %399
  %gen18 = add i32 %_17, 2
  %_19 = sub i32 %399, 2
  %gen20 = mul i32 %_19, 2
  %400 = sdiv i32 %399, 2
  store i32 %400, i32* %collatzVar
  br label %originalBB10

originalBB24alteredBB:                            ; preds = %originalBB24, %108
  %401 = load i32, i32* %collatzVar
  %_25 = sub i32 0, %401
  %gen26 = add i32 %_25, 3
  %402 = mul i32 %401, 3
  %_27 = sub i32 0, %402
  %gen28 = add i32 %_27, 1
  %_29 = sub i32 0, %402
  %gen30 = add i32 %_29, 1
  %_31 = sub i32 %402, 1
  %gen32 = mul i32 %_31, 1
  %_33 = shl i32 %402, 1
  %403 = add i32 %402, 1
  store i32 %403, i32* %collatzVar
  br label %originalBB24

originalBB37alteredBB:                            ; preds = %originalBB37, %128
  %404 = load i32, i32* %collatzVar
  %_38 = sub i32 %32, %404
  %gen39 = mul i32 %_38, %404
  %_40 = sub i32 0, %32
  %gen41 = add i32 %_40, %404
  %_42 = sub i32 0, %32
  %gen43 = add i32 %_42, %404
  %_44 = sub i32 %32, %404
  %gen45 = mul i32 %_44, %404
  %_46 = sub i32 0, %32
  %gen47 = add i32 %_46, %404
  %_48 = sub i32 0, %32
  %gen49 = add i32 %_48, %404
  %_50 = sub i32 0, %32
  %gen51 = add i32 %_50, %404
  %405 = sub i32 %32, %404
  %406 = icmp sgt i32 %405, -3
  br label %originalBB37

originalBB55alteredBB:                            ; preds = %originalBB55, %153
  %407 = load i32, i32* %8, align 4, !dbg !305
  br label %originalBB55

originalBB59alteredBB:                            ; preds = %originalBB59, %171
  store i8 1, i8* %7, align 1, !dbg !307
  br label %originalBB59

originalBB63alteredBB:                            ; preds = %originalBB63, %188
  store i8 0, i8* %7, align 1, !dbg !310
  br label %originalBB63

originalBB67alteredBB:                            ; preds = %originalBB67, %205
  call void @usage(i32 0) #14, !dbg !312
  br label %originalBB67

originalBB71alteredBB:                            ; preds = %originalBB71, %222
  %408 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !313
  %409 = load i8*, i8** @Version, align 8, !dbg !313
  call void (%struct._IO_FILE*, i8*, i8*, i8*, ...) @version_etc(%struct._IO_FILE* %408, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.14, i64 0, i64 0), i8* %409, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.15, i64 0, i64 0), i8* null), !dbg !313
  call void @exit(i32 0) #12, !dbg !313
  br label %originalBB71

originalBB75alteredBB:                            ; preds = %originalBB75, %243
  %410 = load i32, i32* @optind, align 4, !dbg !317
  %411 = load i32, i32* %4, align 4, !dbg !319
  %412 = icmp slt i32 %410, %411, !dbg !320
  br label %originalBB75

originalBB79alteredBB:                            ; preds = %originalBB79, %263
  %413 = call i8* @gettext(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.16, i64 0, i64 0)) #10, !dbg !322
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %413), !dbg !323
  br label %originalBB79

originalBB83alteredBB:                            ; preds = %originalBB83, %288
  %414 = load i8*, i8** %6, align 8, !dbg !333
  %415 = call i32 @puts(i8* %414), !dbg !335
  store i32 0, i32* %3, align 4, !dbg !336
  br label %originalBB83

originalBB87alteredBB:                            ; preds = %originalBB87, %308
  %416 = call i8* @xgetcwd(), !dbg !338
  store i8* %416, i8** %6, align 8, !dbg !339
  %417 = load i8*, i8** %6, align 8, !dbg !340
  %418 = icmp ne i8* %417, null, !dbg !342
  br label %originalBB87

originalBB91alteredBB:                            ; preds = %originalBB91, %328
  %419 = load i8*, i8** %6, align 8, !dbg !344
  %420 = call i32 @puts(i8* %419), !dbg !346
  %421 = load i8*, i8** %6, align 8, !dbg !347
  call void @free(i8* %421) #10, !dbg !348
  br label %originalBB91

originalBB95alteredBB:                            ; preds = %originalBB95, %348
  %422 = call %struct.file_name* @file_name_init(), !dbg !359
  store %struct.file_name* %422, %struct.file_name** %9, align 8, !dbg !358
  %423 = load %struct.file_name*, %struct.file_name** %9, align 8, !dbg !360
  call void @robust_getcwd(%struct.file_name* %423), !dbg !361
  %424 = load %struct.file_name*, %struct.file_name** %9, align 8, !dbg !362
  %425 = getelementptr inbounds %struct.file_name, %struct.file_name* %424, i32 0, i32 2, !dbg !363
  %426 = load i8*, i8** %425, align 8, !dbg !363
  %427 = call i32 @puts(i8* %426), !dbg !364
  %428 = load %struct.file_name*, %struct.file_name** %9, align 8, !dbg !365
  call void @file_name_free(%struct.file_name* %428), !dbg !366
  br label %originalBB95

originalBB99alteredBB:                            ; preds = %originalBB99, %373
  %429 = load i32, i32* %3, align 4, !dbg !368
  br label %originalBB99
}

; Function Attrs: nounwind
declare dso_local i8* @getenv(i8*) #2

; Function Attrs: nounwind
declare dso_local i8* @bindtextdomain(i8*, i8*) #2

; Function Attrs: nounwind
declare dso_local i8* @textdomain(i8*) #2

; Function Attrs: nounwind
declare dso_local i32 @atexit(void ()*) #2

; Function Attrs: nounwind
declare dso_local i32 @getopt_long(i32, i8**, i8*, %struct.option*, i32*) #2

declare dso_local void @error(i32, i32, i8*, ...) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @logical_getcwd() #4 !dbg !369 {
  %1 = load i32, i32* @x.5
  %2 = load i32, i32* @y.6
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = alloca i8*, align 8
  %10 = alloca %struct.stat, align 8
  %11 = alloca %struct.stat, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata %struct.stat* %10, metadata !372, metadata !DIExpression()), !dbg !412
  call void @llvm.dbg.declare(metadata %struct.stat* %11, metadata !413, metadata !DIExpression()), !dbg !414
  call void @llvm.dbg.declare(metadata i8** %12, metadata !415, metadata !DIExpression()), !dbg !416
  %14 = call i8* @getenv(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.36, i64 0, i64 0)) #10, !dbg !417
  store i8* %14, i8** %12, align 8, !dbg !416
  call void @llvm.dbg.declare(metadata i8** %13, metadata !418, metadata !DIExpression()), !dbg !419
  %15 = load i8*, i8** %12, align 8, !dbg !420
  %16 = icmp ne i8* %15, null, !dbg !420
  %17 = load i32, i32* @x.5
  %18 = load i32, i32* @y.6
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %16, label %25, label %47, !dbg !422

25:                                               ; preds = %originalBBpart2
  %26 = load i32, i32* @x.5
  %27 = load i32, i32* @y.6
  %28 = sub i32 %26, 1
  %29 = mul i32 %26, %28
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %31, %32
  br i1 %33, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %25, %originalBB1alteredBB
  %34 = load i8*, i8** %12, align 8, !dbg !423
  %35 = getelementptr inbounds i8, i8* %34, i64 0, !dbg !423
  %36 = load i8, i8* %35, align 1, !dbg !423
  %37 = sext i8 %36 to i32, !dbg !423
  %38 = icmp ne i32 %37, 47, !dbg !424
  %39 = load i32, i32* @x.5
  %40 = load i32, i32* @y.6
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %38, label %47, label %48, !dbg !425

47:                                               ; preds = %originalBBpart24, %originalBBpart2
  store i8* null, i8** %9, align 8, !dbg !426
  br label %568, !dbg !426

48:                                               ; preds = %originalBBpart24
  %49 = load i32, i32* @x.5
  %50 = load i32, i32* @y.6
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load i8*, i8** %12, align 8, !dbg !427
  store i8* %57, i8** %13, align 8, !dbg !428
  %58 = load i32, i32* @x.5
  %59 = load i32, i32* @y.6
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %66, !dbg !429

66:                                               ; preds = %195, %originalBBpart28
  %67 = load i32, i32* @x.5
  %68 = load i32, i32* @y.6
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %66, %originalBB10alteredBB
  %75 = load i8*, i8** %13, align 8, !dbg !430
  %76 = call i8* @strstr(i8* %75, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.37, i64 0, i64 0)) #13, !dbg !431
  store i8* %76, i8** %13, align 8, !dbg !432
  %77 = icmp ne i8* %76, null, !dbg !429
  %78 = load i32, i32* @x.5
  %79 = load i32, i32* @y.6
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %77, label %86, label %198, !dbg !429

86:                                               ; preds = %originalBBpart212
  %87 = load i32, i32* @x.5
  %88 = load i32, i32* @y.6
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %86, %originalBB14alteredBB
  %95 = load i8*, i8** %13, align 8, !dbg !433
  %96 = getelementptr inbounds i8, i8* %95, i64 2, !dbg !433
  %97 = load i8, i8* %96, align 1, !dbg !433
  %98 = icmp ne i8 %97, 0, !dbg !433
  %99 = load i32, i32* @x.5
  %100 = load i32, i32* @y.6
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %98, label %107, label %178, !dbg !436

107:                                              ; preds = %originalBBpart216
  %108 = load i32, i32* @x.5
  %109 = load i32, i32* @y.6
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %107, %originalBB18alteredBB
  %116 = load i8*, i8** %13, align 8, !dbg !437
  %117 = getelementptr inbounds i8, i8* %116, i64 2, !dbg !437
  %118 = load i8, i8* %117, align 1, !dbg !437
  %119 = sext i8 %118 to i32, !dbg !437
  %120 = icmp eq i32 %119, 47, !dbg !438
  %121 = load i32, i32* @x.5
  %122 = load i32, i32* @y.6
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %120, label %178, label %129, !dbg !439

129:                                              ; preds = %originalBBpart220
  %130 = load i8*, i8** %13, align 8, !dbg !440
  %131 = getelementptr inbounds i8, i8* %130, i64 2, !dbg !440
  %132 = load i8, i8* %131, align 1, !dbg !440
  %133 = sext i8 %132 to i32, !dbg !440
  %134 = icmp eq i32 %133, 46, !dbg !441
  br i1 %134, label %135, label %195, !dbg !442

135:                                              ; preds = %129
  %136 = load i32, i32* @x.5
  %137 = load i32, i32* @y.6
  %138 = sub i32 %136, 1
  %139 = mul i32 %136, %138
  %140 = urem i32 %139, 2
  %141 = icmp eq i32 %140, 0
  %142 = icmp slt i32 %137, 10
  %143 = or i1 %141, %142
  br i1 %143, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %135, %originalBB22alteredBB
  %144 = load i8*, i8** %13, align 8, !dbg !443
  %145 = getelementptr inbounds i8, i8* %144, i64 3, !dbg !443
  %146 = load i8, i8* %145, align 1, !dbg !443
  %147 = icmp ne i8 %146, 0, !dbg !443
  %148 = load i32, i32* @x.5
  %149 = load i32, i32* @y.6
  %150 = sub i32 %148, 1
  %151 = mul i32 %148, %150
  %152 = urem i32 %151, 2
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %153, %154
  br i1 %155, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %147, label %156, label %178, !dbg !444

156:                                              ; preds = %originalBBpart224
  %157 = load i32, i32* @x.5
  %158 = load i32, i32* @y.6
  %159 = sub i32 %157, 1
  %160 = mul i32 %157, %159
  %161 = urem i32 %160, 2
  %162 = icmp eq i32 %161, 0
  %163 = icmp slt i32 %158, 10
  %164 = or i1 %162, %163
  br i1 %164, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %156, %originalBB26alteredBB
  %165 = load i8*, i8** %13, align 8, !dbg !445
  %166 = getelementptr inbounds i8, i8* %165, i64 3, !dbg !445
  %167 = load i8, i8* %166, align 1, !dbg !445
  %168 = sext i8 %167 to i32, !dbg !445
  %169 = icmp eq i32 %168, 47, !dbg !446
  %170 = load i32, i32* @x.5
  %171 = load i32, i32* @y.6
  %172 = sub i32 %170, 1
  %173 = mul i32 %170, %172
  %174 = urem i32 %173, 2
  %175 = icmp eq i32 %174, 0
  %176 = icmp slt i32 %171, 10
  %177 = or i1 %175, %176
  br i1 %177, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %169, label %178, label %195, !dbg !447

178:                                              ; preds = %originalBBpart228, %originalBBpart224, %originalBBpart220, %originalBBpart216
  %179 = load i32, i32* @x.5
  %180 = load i32, i32* @y.6
  %181 = sub i32 %179, 1
  %182 = mul i32 %179, %181
  %183 = urem i32 %182, 2
  %184 = icmp eq i32 %183, 0
  %185 = icmp slt i32 %180, 10
  %186 = or i1 %184, %185
  br i1 %186, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %178, %originalBB30alteredBB
  store i8* null, i8** %9, align 8, !dbg !448
  %187 = load i32, i32* @x.5
  %188 = load i32, i32* @y.6
  %189 = sub i32 %187, 1
  %190 = mul i32 %187, %189
  %191 = urem i32 %190, 2
  %192 = icmp eq i32 %191, 0
  %193 = icmp slt i32 %188, 10
  %194 = or i1 %192, %193
  br i1 %194, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %568, !dbg !448

195:                                              ; preds = %originalBBpart228, %129
  %196 = load i8*, i8** %13, align 8, !dbg !449
  %197 = getelementptr inbounds i8, i8* %196, i32 1, !dbg !449
  store i8* %197, i8** %13, align 8, !dbg !449
  br label %66, !dbg !429, !llvm.loop !450

198:                                              ; preds = %originalBBpart212
  %199 = load i8*, i8** %12, align 8, !dbg !452
  %200 = call i32 @stat(i8* %199, %struct.stat* %10) #10, !dbg !454
  br label %201, !dbg !455

201:                                              ; preds = %198
  %collatzVar1 = alloca i32
  br label %202

202:                                              ; preds = %201
  %203 = load i32, i32* @x.5
  %204 = load i32, i32* @y.6
  %205 = sub i32 %203, 1
  %206 = mul i32 %203, %205
  %207 = urem i32 %206, 2
  %208 = icmp eq i32 %207, 0
  %209 = icmp slt i32 %204, 10
  %210 = or i1 %208, %209
  br i1 %210, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %202, %originalBB34alteredBB
  %211 = load i32, i32* @inVal0
  %212 = icmp sgt i32 %211, 1
  %213 = load i32, i32* @x.5
  %214 = load i32, i32* @y.6
  %215 = sub i32 %213, 1
  %216 = mul i32 %213, %215
  %217 = urem i32 %216, 2
  %218 = icmp eq i32 %217, 0
  %219 = icmp slt i32 %214, 10
  %220 = or i1 %218, %219
  br i1 %220, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br i1 %212, label %222, label %221

221:                                              ; preds = %originalBBpart236
  store i32 54, i32* %collatzVar1
  br label %222

222:                                              ; preds = %221, %originalBBpart236
  %223 = load i32, i32* @x.5
  %224 = load i32, i32* @y.6
  %225 = sub i32 %223, 1
  %226 = mul i32 %223, %225
  %227 = urem i32 %226, 2
  %228 = icmp eq i32 %227, 0
  %229 = icmp slt i32 %224, 10
  %230 = or i1 %228, %229
  br i1 %230, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %222, %originalBB38alteredBB
  %231 = load i8**, i8*** @inVal1
  %232 = getelementptr inbounds i8*, i8** %231, i64 1
  %233 = load i8*, i8** %232
  %controle2 = call i32 @controle(i8* %233, i32 0)
  store i32 %controle2, i32* %collatzVar1
  %234 = load i32, i32* @x.5
  %235 = load i32, i32* @y.6
  %236 = sub i32 %234, 1
  %237 = mul i32 %234, %236
  %238 = urem i32 %237, 2
  %239 = icmp eq i32 %238, 0
  %240 = icmp slt i32 %235, 10
  %241 = or i1 %239, %240
  br i1 %241, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br label %242

242:                                              ; preds = %324, %originalBBpart279, %originalBBpart240
  %243 = load i32, i32* %collatzVar1
  %244 = icmp sgt i32 %243, 1
  br i1 %244, label %245, label %551

245:                                              ; preds = %242
  %246 = load i32, i32* @x.5
  %247 = load i32, i32* @y.6
  %248 = sub i32 %246, 1
  %249 = mul i32 %246, %248
  %250 = urem i32 %249, 2
  %251 = icmp eq i32 %250, 0
  %252 = icmp slt i32 %247, 10
  %253 = or i1 %251, %252
  br i1 %253, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %245, %originalBB42alteredBB
  %254 = load i32, i32* %collatzVar1
  %255 = srem i32 %254, 2
  %256 = icmp eq i32 %255, 0
  %257 = load i32, i32* @x.5
  %258 = load i32, i32* @y.6
  %259 = sub i32 %257, 1
  %260 = mul i32 %257, %259
  %261 = urem i32 %260, 2
  %262 = icmp eq i32 %261, 0
  %263 = icmp slt i32 %258, 10
  %264 = or i1 %262, %263
  br i1 %264, label %originalBBpart245, label %originalBB42alteredBB

originalBBpart245:                                ; preds = %originalBB42
  br i1 %256, label %265, label %284

265:                                              ; preds = %originalBBpart245
  %266 = load i32, i32* @x.5
  %267 = load i32, i32* @y.6
  %268 = sub i32 %266, 1
  %269 = mul i32 %266, %268
  %270 = urem i32 %269, 2
  %271 = icmp eq i32 %270, 0
  %272 = icmp slt i32 %267, 10
  %273 = or i1 %271, %272
  br i1 %273, label %originalBB47, label %originalBB47alteredBB

originalBB47:                                     ; preds = %265, %originalBB47alteredBB
  %274 = load i32, i32* %collatzVar1
  %275 = sdiv i32 %274, 2
  store i32 %275, i32* %collatzVar1
  %276 = load i32, i32* @x.5
  %277 = load i32, i32* @y.6
  %278 = sub i32 %276, 1
  %279 = mul i32 %276, %278
  %280 = urem i32 %279, 2
  %281 = icmp eq i32 %280, 0
  %282 = icmp slt i32 %277, 10
  %283 = or i1 %281, %282
  br i1 %283, label %originalBBpart251, label %originalBB47alteredBB

originalBBpart251:                                ; preds = %originalBB47
  br label %304

284:                                              ; preds = %originalBBpart245
  %285 = load i32, i32* @x.5
  %286 = load i32, i32* @y.6
  %287 = sub i32 %285, 1
  %288 = mul i32 %285, %287
  %289 = urem i32 %288, 2
  %290 = icmp eq i32 %289, 0
  %291 = icmp slt i32 %286, 10
  %292 = or i1 %290, %291
  br i1 %292, label %originalBB53, label %originalBB53alteredBB

originalBB53:                                     ; preds = %284, %originalBB53alteredBB
  %293 = load i32, i32* %collatzVar1
  %294 = mul i32 %293, 3
  %295 = add i32 %294, 1
  store i32 %295, i32* %collatzVar1
  %296 = load i32, i32* @x.5
  %297 = load i32, i32* @y.6
  %298 = sub i32 %296, 1
  %299 = mul i32 %296, %298
  %300 = urem i32 %299, 2
  %301 = icmp eq i32 %300, 0
  %302 = icmp slt i32 %297, 10
  %303 = or i1 %301, %302
  br i1 %303, label %originalBBpart273, label %originalBB53alteredBB

originalBBpart273:                                ; preds = %originalBB53
  br label %304

304:                                              ; preds = %originalBBpart273, %originalBBpart251
  %305 = load i32, i32* @x.5
  %306 = load i32, i32* @y.6
  %307 = sub i32 %305, 1
  %308 = mul i32 %305, %307
  %309 = urem i32 %308, 2
  %310 = icmp eq i32 %309, 0
  %311 = icmp slt i32 %306, 10
  %312 = or i1 %310, %311
  br i1 %312, label %originalBB75, label %originalBB75alteredBB

originalBB75:                                     ; preds = %304, %originalBB75alteredBB
  %313 = load i32, i32* %collatzVar1
  %314 = sub i32 %200, %313
  %315 = icmp sgt i32 %314, -2
  %316 = load i32, i32* @x.5
  %317 = load i32, i32* @y.6
  %318 = sub i32 %316, 1
  %319 = mul i32 %316, %318
  %320 = urem i32 %319, 2
  %321 = icmp eq i32 %320, 0
  %322 = icmp slt i32 %317, 10
  %323 = or i1 %321, %322
  br i1 %323, label %originalBBpart279, label %originalBB75alteredBB

originalBBpart279:                                ; preds = %originalBB75
  br i1 %315, label %324, label %242

324:                                              ; preds = %originalBBpart279
  %325 = load i32, i32* %collatzVar1
  %326 = add i32 %200, %325
  %327 = icmp slt i32 %326, 2
  br i1 %327, label %328, label %242

328:                                              ; preds = %324
  %329 = call i32 @stat(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i64 0, i64 0), %struct.stat* %11) #10, !dbg !456
  br label %330, !dbg !457

330:                                              ; preds = %328
  %331 = load i32, i32* @x.5
  %332 = load i32, i32* @y.6
  %333 = sub i32 %331, 1
  %334 = mul i32 %331, %333
  %335 = urem i32 %334, 2
  %336 = icmp eq i32 %335, 0
  %337 = icmp slt i32 %332, 10
  %338 = or i1 %336, %337
  br i1 %338, label %originalBB81, label %originalBB81alteredBB

originalBB81:                                     ; preds = %330, %originalBB81alteredBB
  %collatzVar = alloca i32
  %339 = load i32, i32* @x.5
  %340 = load i32, i32* @y.6
  %341 = sub i32 %339, 1
  %342 = mul i32 %339, %341
  %343 = urem i32 %342, 2
  %344 = icmp eq i32 %343, 0
  %345 = icmp slt i32 %340, 10
  %346 = or i1 %344, %345
  br i1 %346, label %originalBBpart283, label %originalBB81alteredBB

originalBBpart283:                                ; preds = %originalBB81
  br label %347

347:                                              ; preds = %originalBBpart283
  %348 = load i32, i32* @x.5
  %349 = load i32, i32* @y.6
  %350 = sub i32 %348, 1
  %351 = mul i32 %348, %350
  %352 = urem i32 %351, 2
  %353 = icmp eq i32 %352, 0
  %354 = icmp slt i32 %349, 10
  %355 = or i1 %353, %354
  br i1 %355, label %originalBB85, label %originalBB85alteredBB

originalBB85:                                     ; preds = %347, %originalBB85alteredBB
  %356 = load i32, i32* @inVal0
  %357 = icmp sgt i32 %356, 1
  %358 = load i32, i32* @x.5
  %359 = load i32, i32* @y.6
  %360 = sub i32 %358, 1
  %361 = mul i32 %358, %360
  %362 = urem i32 %361, 2
  %363 = icmp eq i32 %362, 0
  %364 = icmp slt i32 %359, 10
  %365 = or i1 %363, %364
  br i1 %365, label %originalBBpart287, label %originalBB85alteredBB

originalBBpart287:                                ; preds = %originalBB85
  br i1 %357, label %383, label %366

366:                                              ; preds = %originalBBpart287
  %367 = load i32, i32* @x.5
  %368 = load i32, i32* @y.6
  %369 = sub i32 %367, 1
  %370 = mul i32 %367, %369
  %371 = urem i32 %370, 2
  %372 = icmp eq i32 %371, 0
  %373 = icmp slt i32 %368, 10
  %374 = or i1 %372, %373
  br i1 %374, label %originalBB89, label %originalBB89alteredBB

originalBB89:                                     ; preds = %366, %originalBB89alteredBB
  store i32 51, i32* %collatzVar
  %375 = load i32, i32* @x.5
  %376 = load i32, i32* @y.6
  %377 = sub i32 %375, 1
  %378 = mul i32 %375, %377
  %379 = urem i32 %378, 2
  %380 = icmp eq i32 %379, 0
  %381 = icmp slt i32 %376, 10
  %382 = or i1 %380, %381
  br i1 %382, label %originalBBpart291, label %originalBB89alteredBB

originalBBpart291:                                ; preds = %originalBB89
  br label %383

383:                                              ; preds = %originalBBpart291, %originalBBpart287
  %384 = load i8**, i8*** @inVal1
  %385 = getelementptr inbounds i8*, i8** %384, i64 1
  %386 = load i8*, i8** %385
  %controle = call i32 @controle(i8* %386, i32 0)
  store i32 %controle, i32* %collatzVar
  br label %387

387:                                              ; preds = %originalBBpart2153, %originalBBpart2145, %383
  %388 = load i32, i32* @x.5
  %389 = load i32, i32* @y.6
  %390 = sub i32 %388, 1
  %391 = mul i32 %388, %390
  %392 = urem i32 %391, 2
  %393 = icmp eq i32 %392, 0
  %394 = icmp slt i32 %389, 10
  %395 = or i1 %393, %394
  br i1 %395, label %originalBB93, label %originalBB93alteredBB

originalBB93:                                     ; preds = %387, %originalBB93alteredBB
  %396 = load i32, i32* %collatzVar
  %397 = icmp sgt i32 %396, 1
  %398 = load i32, i32* @x.5
  %399 = load i32, i32* @y.6
  %400 = sub i32 %398, 1
  %401 = mul i32 %398, %400
  %402 = urem i32 %401, 2
  %403 = icmp eq i32 %402, 0
  %404 = icmp slt i32 %399, 10
  %405 = or i1 %403, %404
  br i1 %405, label %originalBBpart295, label %originalBB93alteredBB

originalBBpart295:                                ; preds = %originalBB93
  br i1 %397, label %406, label %551

406:                                              ; preds = %originalBBpart295
  %407 = load i32, i32* @x.5
  %408 = load i32, i32* @y.6
  %409 = sub i32 %407, 1
  %410 = mul i32 %407, %409
  %411 = urem i32 %410, 2
  %412 = icmp eq i32 %411, 0
  %413 = icmp slt i32 %408, 10
  %414 = or i1 %412, %413
  br i1 %414, label %originalBB97, label %originalBB97alteredBB

originalBB97:                                     ; preds = %406, %originalBB97alteredBB
  %415 = load i32, i32* %collatzVar
  %416 = srem i32 %415, 2
  %417 = icmp eq i32 %416, 0
  %418 = load i32, i32* @x.5
  %419 = load i32, i32* @y.6
  %420 = sub i32 %418, 1
  %421 = mul i32 %418, %420
  %422 = urem i32 %421, 2
  %423 = icmp eq i32 %422, 0
  %424 = icmp slt i32 %419, 10
  %425 = or i1 %423, %424
  br i1 %425, label %originalBBpart2103, label %originalBB97alteredBB

originalBBpart2103:                               ; preds = %originalBB97
  br i1 %417, label %426, label %429

426:                                              ; preds = %originalBBpart2103
  %427 = load i32, i32* %collatzVar
  %428 = sdiv i32 %427, 2
  store i32 %428, i32* %collatzVar
  br label %449

429:                                              ; preds = %originalBBpart2103
  %430 = load i32, i32* @x.5
  %431 = load i32, i32* @y.6
  %432 = sub i32 %430, 1
  %433 = mul i32 %430, %432
  %434 = urem i32 %433, 2
  %435 = icmp eq i32 %434, 0
  %436 = icmp slt i32 %431, 10
  %437 = or i1 %435, %436
  br i1 %437, label %originalBB105, label %originalBB105alteredBB

originalBB105:                                    ; preds = %429, %originalBB105alteredBB
  %438 = load i32, i32* %collatzVar
  %439 = mul i32 %438, 3
  %440 = add i32 %439, 1
  store i32 %440, i32* %collatzVar
  %441 = load i32, i32* @x.5
  %442 = load i32, i32* @y.6
  %443 = sub i32 %441, 1
  %444 = mul i32 %441, %443
  %445 = urem i32 %444, 2
  %446 = icmp eq i32 %445, 0
  %447 = icmp slt i32 %442, 10
  %448 = or i1 %446, %447
  br i1 %448, label %originalBBpart2131, label %originalBB105alteredBB

originalBBpart2131:                               ; preds = %originalBB105
  br label %449

449:                                              ; preds = %originalBBpart2131, %426
  %450 = load i32, i32* @x.5
  %451 = load i32, i32* @y.6
  %452 = sub i32 %450, 1
  %453 = mul i32 %450, %452
  %454 = urem i32 %453, 2
  %455 = icmp eq i32 %454, 0
  %456 = icmp slt i32 %451, 10
  %457 = or i1 %455, %456
  br i1 %457, label %originalBB133, label %originalBB133alteredBB

originalBB133:                                    ; preds = %449, %originalBB133alteredBB
  %458 = load i32, i32* %collatzVar
  %459 = sub i32 %329, %458
  %460 = icmp sgt i32 %459, -2
  %461 = load i32, i32* @x.5
  %462 = load i32, i32* @y.6
  %463 = sub i32 %461, 1
  %464 = mul i32 %461, %463
  %465 = urem i32 %464, 2
  %466 = icmp eq i32 %465, 0
  %467 = icmp slt i32 %462, 10
  %468 = or i1 %466, %467
  br i1 %468, label %originalBBpart2145, label %originalBB133alteredBB

originalBBpart2145:                               ; preds = %originalBB133
  br i1 %460, label %469, label %387

469:                                              ; preds = %originalBBpart2145
  %470 = load i32, i32* @x.5
  %471 = load i32, i32* @y.6
  %472 = sub i32 %470, 1
  %473 = mul i32 %470, %472
  %474 = urem i32 %473, 2
  %475 = icmp eq i32 %474, 0
  %476 = icmp slt i32 %471, 10
  %477 = or i1 %475, %476
  br i1 %477, label %originalBB147, label %originalBB147alteredBB

originalBB147:                                    ; preds = %469, %originalBB147alteredBB
  %478 = load i32, i32* %collatzVar
  %479 = add i32 %329, %478
  %480 = icmp slt i32 %479, 2
  %481 = load i32, i32* @x.5
  %482 = load i32, i32* @y.6
  %483 = sub i32 %481, 1
  %484 = mul i32 %481, %483
  %485 = urem i32 %484, 2
  %486 = icmp eq i32 %485, 0
  %487 = icmp slt i32 %482, 10
  %488 = or i1 %486, %487
  br i1 %488, label %originalBBpart2153, label %originalBB147alteredBB

originalBBpart2153:                               ; preds = %originalBB147
  br i1 %480, label %489, label %387

489:                                              ; preds = %originalBBpart2153
  %490 = load i32, i32* @x.5
  %491 = load i32, i32* @y.6
  %492 = sub i32 %490, 1
  %493 = mul i32 %490, %492
  %494 = urem i32 %493, 2
  %495 = icmp eq i32 %494, 0
  %496 = icmp slt i32 %491, 10
  %497 = or i1 %495, %496
  br i1 %497, label %originalBB155, label %originalBB155alteredBB

originalBB155:                                    ; preds = %489, %originalBB155alteredBB
  %498 = getelementptr inbounds %struct.stat, %struct.stat* %10, i32 0, i32 1, !dbg !458
  %499 = load i64, i64* %498, align 8, !dbg !458
  %500 = getelementptr inbounds %struct.stat, %struct.stat* %11, i32 0, i32 1, !dbg !458
  %501 = load i64, i64* %500, align 8, !dbg !458
  %502 = icmp eq i64 %499, %501, !dbg !458
  %503 = load i32, i32* @x.5
  %504 = load i32, i32* @y.6
  %505 = sub i32 %503, 1
  %506 = mul i32 %503, %505
  %507 = urem i32 %506, 2
  %508 = icmp eq i32 %507, 0
  %509 = icmp slt i32 %504, 10
  %510 = or i1 %508, %509
  br i1 %510, label %originalBBpart2157, label %originalBB155alteredBB

originalBBpart2157:                               ; preds = %originalBB155
  br i1 %502, label %511, label %551, !dbg !458

511:                                              ; preds = %originalBBpart2157
  %512 = load i32, i32* @x.5
  %513 = load i32, i32* @y.6
  %514 = sub i32 %512, 1
  %515 = mul i32 %512, %514
  %516 = urem i32 %515, 2
  %517 = icmp eq i32 %516, 0
  %518 = icmp slt i32 %513, 10
  %519 = or i1 %517, %518
  br i1 %519, label %originalBB159, label %originalBB159alteredBB

originalBB159:                                    ; preds = %511, %originalBB159alteredBB
  %520 = getelementptr inbounds %struct.stat, %struct.stat* %10, i32 0, i32 0, !dbg !458
  %521 = load i64, i64* %520, align 8, !dbg !458
  %522 = getelementptr inbounds %struct.stat, %struct.stat* %11, i32 0, i32 0, !dbg !458
  %523 = load i64, i64* %522, align 8, !dbg !458
  %524 = icmp eq i64 %521, %523, !dbg !458
  %525 = load i32, i32* @x.5
  %526 = load i32, i32* @y.6
  %527 = sub i32 %525, 1
  %528 = mul i32 %525, %527
  %529 = urem i32 %528, 2
  %530 = icmp eq i32 %529, 0
  %531 = icmp slt i32 %526, 10
  %532 = or i1 %530, %531
  br i1 %532, label %originalBBpart2161, label %originalBB159alteredBB

originalBBpart2161:                               ; preds = %originalBB159
  br i1 %524, label %533, label %551, !dbg !459

533:                                              ; preds = %originalBBpart2161
  %534 = load i32, i32* @x.5
  %535 = load i32, i32* @y.6
  %536 = sub i32 %534, 1
  %537 = mul i32 %534, %536
  %538 = urem i32 %537, 2
  %539 = icmp eq i32 %538, 0
  %540 = icmp slt i32 %535, 10
  %541 = or i1 %539, %540
  br i1 %541, label %originalBB163, label %originalBB163alteredBB

originalBB163:                                    ; preds = %533, %originalBB163alteredBB
  %542 = load i8*, i8** %12, align 8, !dbg !460
  store i8* %542, i8** %9, align 8, !dbg !461
  %543 = load i32, i32* @x.5
  %544 = load i32, i32* @y.6
  %545 = sub i32 %543, 1
  %546 = mul i32 %543, %545
  %547 = urem i32 %546, 2
  %548 = icmp eq i32 %547, 0
  %549 = icmp slt i32 %544, 10
  %550 = or i1 %548, %549
  br i1 %550, label %originalBBpart2165, label %originalBB163alteredBB

originalBBpart2165:                               ; preds = %originalBB163
  br label %568, !dbg !461

551:                                              ; preds = %originalBBpart2161, %originalBBpart2157, %originalBBpart295, %242
  %552 = load i32, i32* @x.5
  %553 = load i32, i32* @y.6
  %554 = sub i32 %552, 1
  %555 = mul i32 %552, %554
  %556 = urem i32 %555, 2
  %557 = icmp eq i32 %556, 0
  %558 = icmp slt i32 %553, 10
  %559 = or i1 %557, %558
  br i1 %559, label %originalBB167, label %originalBB167alteredBB

originalBB167:                                    ; preds = %551, %originalBB167alteredBB
  store i8* null, i8** %9, align 8, !dbg !462
  %560 = load i32, i32* @x.5
  %561 = load i32, i32* @y.6
  %562 = sub i32 %560, 1
  %563 = mul i32 %560, %562
  %564 = urem i32 %563, 2
  %565 = icmp eq i32 %564, 0
  %566 = icmp slt i32 %561, 10
  %567 = or i1 %565, %566
  br i1 %567, label %originalBBpart2169, label %originalBB167alteredBB

originalBBpart2169:                               ; preds = %originalBB167
  br label %568, !dbg !462

568:                                              ; preds = %originalBBpart2169, %originalBBpart2165, %originalBBpart232, %47
  %569 = load i32, i32* @x.5
  %570 = load i32, i32* @y.6
  %571 = sub i32 %569, 1
  %572 = mul i32 %569, %571
  %573 = urem i32 %572, 2
  %574 = icmp eq i32 %573, 0
  %575 = icmp slt i32 %570, 10
  %576 = or i1 %574, %575
  br i1 %576, label %originalBB171, label %originalBB171alteredBB

originalBB171:                                    ; preds = %568, %originalBB171alteredBB
  %577 = load i8*, i8** %9, align 8, !dbg !463
  %578 = load i32, i32* @x.5
  %579 = load i32, i32* @y.6
  %580 = sub i32 %578, 1
  %581 = mul i32 %578, %580
  %582 = urem i32 %581, 2
  %583 = icmp eq i32 %582, 0
  %584 = icmp slt i32 %579, 10
  %585 = or i1 %583, %584
  br i1 %585, label %originalBBpart2173, label %originalBB171alteredBB

originalBBpart2173:                               ; preds = %originalBB171
  ret i8* %577, !dbg !463

originalBBalteredBB:                              ; preds = %originalBB, %0
  %586 = alloca i8*, align 8
  %587 = alloca %struct.stat, align 8
  %588 = alloca %struct.stat, align 8
  %589 = alloca i8*, align 8
  %590 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata %struct.stat* %587, metadata !464, metadata !DIExpression()), !dbg !412
  call void @llvm.dbg.declare(metadata %struct.stat* %588, metadata !499, metadata !DIExpression()), !dbg !414
  call void @llvm.dbg.declare(metadata i8** %589, metadata !500, metadata !DIExpression()), !dbg !416
  %591 = call i8* @getenv(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.36, i64 0, i64 0)) #10, !dbg !417
  store i8* %591, i8** %589, align 8, !dbg !416
  call void @llvm.dbg.declare(metadata i8** %590, metadata !501, metadata !DIExpression()), !dbg !419
  %592 = load i8*, i8** %589, align 8, !dbg !420
  %593 = icmp ne i8* %592, null, !dbg !420
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %25
  %594 = load i8*, i8** %12, align 8, !dbg !423
  %595 = getelementptr inbounds i8, i8* %594, i64 0, !dbg !423
  %596 = load i8, i8* %595, align 1, !dbg !423
  %597 = sext i8 %596 to i32, !dbg !423
  %598 = icmp ne i32 %597, 47, !dbg !424
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  %599 = load i8*, i8** %12, align 8, !dbg !427
  store i8* %599, i8** %13, align 8, !dbg !428
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %66
  %600 = load i8*, i8** %13, align 8, !dbg !430
  %601 = call i8* @strstr(i8* %600, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.37, i64 0, i64 0)) #13, !dbg !431
  store i8* %601, i8** %13, align 8, !dbg !432
  %602 = icmp ne i8* %601, null, !dbg !429
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %86
  %603 = load i8*, i8** %13, align 8, !dbg !433
  %604 = getelementptr inbounds i8, i8* %603, i64 2, !dbg !433
  %605 = load i8, i8* %604, align 1, !dbg !433
  %606 = icmp ne i8 %605, 0, !dbg !433
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %107
  %607 = load i8*, i8** %13, align 8, !dbg !437
  %608 = getelementptr inbounds i8, i8* %607, i64 2, !dbg !437
  %609 = load i8, i8* %608, align 1, !dbg !437
  %610 = sext i8 %609 to i32, !dbg !437
  %611 = icmp eq i32 %610, 47, !dbg !438
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %135
  %612 = load i8*, i8** %13, align 8, !dbg !443
  %613 = getelementptr inbounds i8, i8* %612, i64 3, !dbg !443
  %614 = load i8, i8* %613, align 1, !dbg !443
  %615 = icmp ne i8 %614, 0, !dbg !443
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %156
  %616 = load i8*, i8** %13, align 8, !dbg !445
  %617 = getelementptr inbounds i8, i8* %616, i64 3, !dbg !445
  %618 = load i8, i8* %617, align 1, !dbg !445
  %619 = sext i8 %618 to i32, !dbg !445
  %620 = icmp eq i32 %619, 47, !dbg !446
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %178
  store i8* null, i8** %9, align 8, !dbg !448
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %202
  %621 = load i32, i32* @inVal0
  %622 = icmp sgt i32 %621, 1
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %222
  %623 = load i8**, i8*** @inVal1
  %624 = getelementptr inbounds i8*, i8** %623, i64 1
  %625 = load i8*, i8** %624
  %controle2alteredBB = call i32 @controle(i8* %625, i32 0)
  store i32 %controle2alteredBB, i32* %collatzVar1
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %245
  %626 = load i32, i32* %collatzVar1
  %_ = shl i32 %626, 2
  %_43 = shl i32 %626, 2
  %627 = srem i32 %626, 2
  %628 = icmp eq i32 %627, 0
  br label %originalBB42

originalBB47alteredBB:                            ; preds = %originalBB47, %265
  %629 = load i32, i32* %collatzVar1
  %_48 = sub i32 %629, 2
  %gen = mul i32 %_48, 2
  %_49 = shl i32 %629, 2
  %630 = sdiv i32 %629, 2
  store i32 %630, i32* %collatzVar1
  br label %originalBB47

originalBB53alteredBB:                            ; preds = %originalBB53, %284
  %631 = load i32, i32* %collatzVar1
  %_54 = shl i32 %631, 3
  %_55 = sub i32 0, %631
  %gen56 = add i32 %_55, 3
  %_57 = sub i32 %631, 3
  %gen58 = mul i32 %_57, 3
  %_59 = sub i32 %631, 3
  %gen60 = mul i32 %_59, 3
  %632 = mul i32 %631, 3
  %_61 = sub i32 0, %632
  %gen62 = add i32 %_61, 1
  %_63 = shl i32 %632, 1
  %_64 = sub i32 %632, 1
  %gen65 = mul i32 %_64, 1
  %_66 = sub i32 %632, 1
  %gen67 = mul i32 %_66, 1
  %_68 = sub i32 %632, 1
  %gen69 = mul i32 %_68, 1
  %_70 = sub i32 %632, 1
  %gen71 = mul i32 %_70, 1
  %633 = add i32 %632, 1
  store i32 %633, i32* %collatzVar1
  br label %originalBB53

originalBB75alteredBB:                            ; preds = %originalBB75, %304
  %634 = load i32, i32* %collatzVar1
  %_76 = sub i32 %200, %634
  %gen77 = mul i32 %_76, %634
  %635 = sub i32 %200, %634
  %636 = icmp sgt i32 %635, -2
  br label %originalBB75

originalBB81alteredBB:                            ; preds = %originalBB81, %330
  %collatzVaralteredBB = alloca i32
  br label %originalBB81

originalBB85alteredBB:                            ; preds = %originalBB85, %347
  %637 = load i32, i32* @inVal0
  %638 = icmp sgt i32 %637, 1
  br label %originalBB85

originalBB89alteredBB:                            ; preds = %originalBB89, %366
  store i32 51, i32* %collatzVar
  br label %originalBB89

originalBB93alteredBB:                            ; preds = %originalBB93, %387
  %639 = load i32, i32* %collatzVar
  %640 = icmp sgt i32 %639, 1
  br label %originalBB93

originalBB97alteredBB:                            ; preds = %originalBB97, %406
  %641 = load i32, i32* %collatzVar
  %_98 = sub i32 0, %641
  %gen99 = add i32 %_98, 2
  %_100 = sub i32 0, %641
  %gen101 = add i32 %_100, 2
  %642 = srem i32 %641, 2
  %643 = icmp eq i32 %642, 0
  br label %originalBB97

originalBB105alteredBB:                           ; preds = %originalBB105, %429
  %644 = load i32, i32* %collatzVar
  %_106 = sub i32 %644, 3
  %gen107 = mul i32 %_106, 3
  %_108 = sub i32 0, %644
  %gen109 = add i32 %_108, 3
  %_110 = sub i32 %644, 3
  %gen111 = mul i32 %_110, 3
  %_112 = sub i32 0, %644
  %gen113 = add i32 %_112, 3
  %_114 = sub i32 %644, 3
  %gen115 = mul i32 %_114, 3
  %_116 = sub i32 %644, 3
  %gen117 = mul i32 %_116, 3
  %_118 = sub i32 0, %644
  %gen119 = add i32 %_118, 3
  %_120 = shl i32 %644, 3
  %645 = mul i32 %644, 3
  %_121 = sub i32 0, %645
  %gen122 = add i32 %_121, 1
  %_123 = sub i32 0, %645
  %gen124 = add i32 %_123, 1
  %_125 = shl i32 %645, 1
  %_126 = shl i32 %645, 1
  %_127 = shl i32 %645, 1
  %_128 = sub i32 0, %645
  %gen129 = add i32 %_128, 1
  %646 = add i32 %645, 1
  store i32 %646, i32* %collatzVar
  br label %originalBB105

originalBB133alteredBB:                           ; preds = %originalBB133, %449
  %647 = load i32, i32* %collatzVar
  %_134 = sub i32 %329, %647
  %gen135 = mul i32 %_134, %647
  %_136 = sub i32 %329, %647
  %gen137 = mul i32 %_136, %647
  %_138 = shl i32 %329, %647
  %_139 = sub i32 %329, %647
  %gen140 = mul i32 %_139, %647
  %_141 = sub i32 0, %329
  %gen142 = add i32 %_141, %647
  %_143 = shl i32 %329, %647
  %648 = sub i32 %329, %647
  %649 = icmp sgt i32 %648, -2
  br label %originalBB133

originalBB147alteredBB:                           ; preds = %originalBB147, %469
  %650 = load i32, i32* %collatzVar
  %_148 = sub i32 %329, %650
  %gen149 = mul i32 %_148, %650
  %_150 = sub i32 %329, %650
  %gen151 = mul i32 %_150, %650
  %651 = add i32 %329, %650
  %652 = icmp slt i32 %651, 2
  br label %originalBB147

originalBB155alteredBB:                           ; preds = %originalBB155, %489
  %653 = getelementptr inbounds %struct.stat, %struct.stat* %10, i32 0, i32 1, !dbg !458
  %654 = load i64, i64* %653, align 8, !dbg !458
  %655 = getelementptr inbounds %struct.stat, %struct.stat* %11, i32 0, i32 1, !dbg !458
  %656 = load i64, i64* %655, align 8, !dbg !458
  %657 = icmp eq i64 %654, %656, !dbg !458
  br label %originalBB155

originalBB159alteredBB:                           ; preds = %originalBB159, %511
  %658 = getelementptr inbounds %struct.stat, %struct.stat* %10, i32 0, i32 0, !dbg !458
  %659 = load i64, i64* %658, align 8, !dbg !458
  %660 = getelementptr inbounds %struct.stat, %struct.stat* %11, i32 0, i32 0, !dbg !458
  %661 = load i64, i64* %660, align 8, !dbg !458
  %662 = icmp eq i64 %659, %661, !dbg !458
  br label %originalBB159

originalBB163alteredBB:                           ; preds = %originalBB163, %533
  %663 = load i8*, i8** %12, align 8, !dbg !460
  store i8* %663, i8** %9, align 8, !dbg !461
  br label %originalBB163

originalBB167alteredBB:                           ; preds = %originalBB167, %551
  store i8* null, i8** %9, align 8, !dbg !462
  br label %originalBB167

originalBB171alteredBB:                           ; preds = %originalBB171, %568
  %664 = load i8*, i8** %9, align 8, !dbg !463
  br label %originalBB171
}

declare dso_local i32 @puts(i8*) #3

; Function Attrs: nounwind
declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.file_name* @file_name_init() #4 !dbg !502 {
  %1 = alloca %struct.file_name*, align 8
  call void @llvm.dbg.declare(metadata %struct.file_name** %1, metadata !505, metadata !DIExpression()), !dbg !506
  %2 = call noalias i8* @xmalloc(i64 24), !dbg !507
  %3 = bitcast i8* %2 to %struct.file_name*, !dbg !507
  store %struct.file_name* %3, %struct.file_name** %1, align 8, !dbg !506
  %4 = load %struct.file_name*, %struct.file_name** %1, align 8, !dbg !508
  %5 = getelementptr inbounds %struct.file_name, %struct.file_name* %4, i32 0, i32 1, !dbg !509
  store i64 8192, i64* %5, align 8, !dbg !510
  %6 = load %struct.file_name*, %struct.file_name** %1, align 8, !dbg !511
  %7 = getelementptr inbounds %struct.file_name, %struct.file_name* %6, i32 0, i32 1, !dbg !512
  %8 = load i64, i64* %7, align 8, !dbg !512
  %9 = call noalias i8* @xmalloc(i64 %8), !dbg !513
  %10 = load %struct.file_name*, %struct.file_name** %1, align 8, !dbg !514
  %11 = getelementptr inbounds %struct.file_name, %struct.file_name* %10, i32 0, i32 0, !dbg !515
  store i8* %9, i8** %11, align 8, !dbg !516
  %12 = load %struct.file_name*, %struct.file_name** %1, align 8, !dbg !517
  %13 = getelementptr inbounds %struct.file_name, %struct.file_name* %12, i32 0, i32 0, !dbg !518
  %14 = load i8*, i8** %13, align 8, !dbg !518
  %15 = load %struct.file_name*, %struct.file_name** %1, align 8, !dbg !519
  %16 = getelementptr inbounds %struct.file_name, %struct.file_name* %15, i32 0, i32 1, !dbg !520
  %17 = load i64, i64* %16, align 8, !dbg !520
  %18 = sub i64 %17, 1, !dbg !521
  %19 = getelementptr inbounds i8, i8* %14, i64 %18, !dbg !522
  %20 = load %struct.file_name*, %struct.file_name** %1, align 8, !dbg !523
  %21 = getelementptr inbounds %struct.file_name, %struct.file_name* %20, i32 0, i32 2, !dbg !524
  store i8* %19, i8** %21, align 8, !dbg !525
  %22 = load %struct.file_name*, %struct.file_name** %1, align 8, !dbg !526
  %23 = getelementptr inbounds %struct.file_name, %struct.file_name* %22, i32 0, i32 2, !dbg !527
  %24 = load i8*, i8** %23, align 8, !dbg !527
  %25 = getelementptr inbounds i8, i8* %24, i64 0, !dbg !526
  store i8 0, i8* %25, align 1, !dbg !528
  %26 = load %struct.file_name*, %struct.file_name** %1, align 8, !dbg !529
  ret %struct.file_name* %26, !dbg !530
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @robust_getcwd(%struct.file_name*) #4 !dbg !531 {
  %2 = load i32, i32* @x.9
  %3 = load i32, i32* @y.10
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct.file_name*, align 8
  %11 = alloca i64, align 8
  %12 = alloca %struct.dev_ino, align 8
  %13 = alloca %struct.dev_ino*, align 8
  %14 = alloca %struct.stat, align 8
  store %struct.file_name* %0, %struct.file_name** %10, align 8
  call void @llvm.dbg.declare(metadata %struct.file_name** %10, metadata !534, metadata !DIExpression()), !dbg !535
  call void @llvm.dbg.declare(metadata i64* %11, metadata !536, metadata !DIExpression()), !dbg !537
  store i64 1, i64* %11, align 8, !dbg !537
  call void @llvm.dbg.declare(metadata %struct.dev_ino* %12, metadata !538, metadata !DIExpression()), !dbg !547
  call void @llvm.dbg.declare(metadata %struct.dev_ino** %13, metadata !548, metadata !DIExpression()), !dbg !550
  %15 = call %struct.dev_ino* @get_root_dev_ino(%struct.dev_ino* %12), !dbg !551
  store %struct.dev_ino* %15, %struct.dev_ino** %13, align 8, !dbg !550
  call void @llvm.dbg.declare(metadata %struct.stat* %14, metadata !552, metadata !DIExpression()), !dbg !553
  %16 = load %struct.dev_ino*, %struct.dev_ino** %13, align 8, !dbg !554
  %17 = icmp eq %struct.dev_ino* %16, null, !dbg !556
  %18 = load i32, i32* @x.9
  %19 = load i32, i32* @y.10
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %17, label %26, label %47, !dbg !557

26:                                               ; preds = %originalBBpart2
  %27 = load i32, i32* @x.9
  %28 = load i32, i32* @y.10
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %26, %originalBB1alteredBB
  %35 = call i32* @__errno_location() #15, !dbg !558
  %36 = load i32, i32* %35, align 4, !dbg !558
  %37 = call i8* @gettext(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.39, i64 0, i64 0)) #10, !dbg !558
  %38 = call i8* @quotearg_style(i32 4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.40, i64 0, i64 0)), !dbg !558
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %36, i8* %37, i8* %38), !dbg !558
  %39 = load i32, i32* @x.9
  %40 = load i32, i32* @y.10
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  unreachable, !dbg !558

47:                                               ; preds = %originalBBpart2
  %48 = load i32, i32* @x.9
  %49 = load i32, i32* @y.10
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %47, %originalBB6alteredBB
  %56 = call i32 @stat(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i64 0, i64 0), %struct.stat* %14) #10, !dbg !559
  %57 = icmp slt i32 %56, 0, !dbg !561
  %58 = load i32, i32* @x.9
  %59 = load i32, i32* @y.10
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %57, label %66, label %87, !dbg !562

66:                                               ; preds = %originalBBpart28
  %67 = load i32, i32* @x.9
  %68 = load i32, i32* @y.10
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %66, %originalBB10alteredBB
  %75 = call i32* @__errno_location() #15, !dbg !563
  %76 = load i32, i32* %75, align 4, !dbg !563
  %77 = call i8* @gettext(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.41, i64 0, i64 0)) #10, !dbg !563
  %78 = call i8* @quotearg_style(i32 4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i64 0, i64 0)), !dbg !563
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %76, i8* %77, i8* %78), !dbg !563
  %79 = load i32, i32* @x.9
  %80 = load i32, i32* @y.10
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  unreachable, !dbg !563

87:                                               ; preds = %originalBBpart28
  br label %88, !dbg !564

88:                                               ; preds = %originalBBpart227, %87
  %89 = load i32, i32* @x.9
  %90 = load i32, i32* @y.10
  %91 = sub i32 %89, 1
  %92 = mul i32 %89, %91
  %93 = urem i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %94, %95
  br i1 %96, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %88, %originalBB14alteredBB
  %97 = getelementptr inbounds %struct.stat, %struct.stat* %14, i32 0, i32 1, !dbg !565
  %98 = load i64, i64* %97, align 8, !dbg !565
  %99 = load %struct.dev_ino*, %struct.dev_ino** %13, align 8, !dbg !565
  %100 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %99, i32 0, i32 0, !dbg !565
  %101 = load i64, i64* %100, align 8, !dbg !565
  %102 = icmp eq i64 %98, %101, !dbg !565
  %103 = load i32, i32* @x.9
  %104 = load i32, i32* @y.10
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %102, label %111, label %135, !dbg !565

111:                                              ; preds = %originalBBpart216
  %112 = load i32, i32* @x.9
  %113 = load i32, i32* @y.10
  %114 = sub i32 %112, 1
  %115 = mul i32 %112, %114
  %116 = urem i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %113, 10
  %119 = or i1 %117, %118
  br i1 %119, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %111, %originalBB18alteredBB
  %120 = getelementptr inbounds %struct.stat, %struct.stat* %14, i32 0, i32 0, !dbg !565
  %121 = load i64, i64* %120, align 8, !dbg !565
  %122 = load %struct.dev_ino*, %struct.dev_ino** %13, align 8, !dbg !565
  %123 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %122, i32 0, i32 1, !dbg !565
  %124 = load i64, i64* %123, align 8, !dbg !565
  %125 = icmp eq i64 %121, %124, !dbg !565
  %126 = load i32, i32* @x.9
  %127 = load i32, i32* @y.10
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %125, label %134, label %135, !dbg !568

134:                                              ; preds = %originalBBpart220
  br label %155, !dbg !569

135:                                              ; preds = %originalBBpart220, %originalBBpart216
  %136 = load i32, i32* @x.9
  %137 = load i32, i32* @y.10
  %138 = sub i32 %136, 1
  %139 = mul i32 %136, %138
  %140 = urem i32 %139, 2
  %141 = icmp eq i32 %140, 0
  %142 = icmp slt i32 %137, 10
  %143 = or i1 %141, %142
  br i1 %143, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %135, %originalBB22alteredBB
  %144 = load %struct.file_name*, %struct.file_name** %10, align 8, !dbg !570
  %145 = load i64, i64* %11, align 8, !dbg !571
  %146 = add i64 %145, 1, !dbg !571
  store i64 %146, i64* %11, align 8, !dbg !571
  call void @find_dir_entry(%struct.stat* %14, %struct.file_name* %144, i64 %145), !dbg !572
  %147 = load i32, i32* @x.9
  %148 = load i32, i32* @y.10
  %149 = sub i32 %147, 1
  %150 = mul i32 %147, %149
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %152, %153
  br i1 %154, label %originalBBpart227, label %originalBB22alteredBB

originalBBpart227:                                ; preds = %originalBB22
  br label %88, !dbg !564, !llvm.loop !573

155:                                              ; preds = %134
  %156 = load %struct.file_name*, %struct.file_name** %10, align 8, !dbg !575
  %157 = getelementptr inbounds %struct.file_name, %struct.file_name* %156, i32 0, i32 2, !dbg !577
  %158 = load i8*, i8** %157, align 8, !dbg !577
  %159 = getelementptr inbounds i8, i8* %158, i64 0, !dbg !575
  %160 = load i8, i8* %159, align 1, !dbg !575
  %161 = sext i8 %160 to i32, !dbg !575
  %162 = icmp eq i32 %161, 0, !dbg !578
  br i1 %162, label %163, label %181, !dbg !579

163:                                              ; preds = %155
  %164 = load i32, i32* @x.9
  %165 = load i32, i32* @y.10
  %166 = sub i32 %164, 1
  %167 = mul i32 %164, %166
  %168 = urem i32 %167, 2
  %169 = icmp eq i32 %168, 0
  %170 = icmp slt i32 %165, 10
  %171 = or i1 %169, %170
  br i1 %171, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %163, %originalBB29alteredBB
  %172 = load %struct.file_name*, %struct.file_name** %10, align 8, !dbg !580
  call void @file_name_prepend(%struct.file_name* %172, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0), i64 0), !dbg !581
  %173 = load i32, i32* @x.9
  %174 = load i32, i32* @y.10
  %175 = sub i32 %173, 1
  %176 = mul i32 %173, %175
  %177 = urem i32 %176, 2
  %178 = icmp eq i32 %177, 0
  %179 = icmp slt i32 %174, 10
  %180 = or i1 %178, %179
  br i1 %180, label %originalBBpart231, label %originalBB29alteredBB

originalBBpart231:                                ; preds = %originalBB29
  br label %181, !dbg !581

181:                                              ; preds = %originalBBpart231, %155
  %182 = load i32, i32* @x.9
  %183 = load i32, i32* @y.10
  %184 = sub i32 %182, 1
  %185 = mul i32 %182, %184
  %186 = urem i32 %185, 2
  %187 = icmp eq i32 %186, 0
  %188 = icmp slt i32 %183, 10
  %189 = or i1 %187, %188
  br i1 %189, label %originalBB33, label %originalBB33alteredBB

originalBB33:                                     ; preds = %181, %originalBB33alteredBB
  %190 = load i32, i32* @x.9
  %191 = load i32, i32* @y.10
  %192 = sub i32 %190, 1
  %193 = mul i32 %190, %192
  %194 = urem i32 %193, 2
  %195 = icmp eq i32 %194, 0
  %196 = icmp slt i32 %191, 10
  %197 = or i1 %195, %196
  br i1 %197, label %originalBBpart235, label %originalBB33alteredBB

originalBBpart235:                                ; preds = %originalBB33
  ret void, !dbg !582

originalBBalteredBB:                              ; preds = %originalBB, %1
  %198 = alloca %struct.file_name*, align 8
  %199 = alloca i64, align 8
  %200 = alloca %struct.dev_ino, align 8
  %201 = alloca %struct.dev_ino*, align 8
  %202 = alloca %struct.stat, align 8
  store %struct.file_name* %0, %struct.file_name** %198, align 8
  call void @llvm.dbg.declare(metadata %struct.file_name** %198, metadata !583, metadata !DIExpression()), !dbg !535
  call void @llvm.dbg.declare(metadata i64* %199, metadata !605, metadata !DIExpression()), !dbg !537
  store i64 1, i64* %199, align 8, !dbg !537
  call void @llvm.dbg.declare(metadata %struct.dev_ino* %200, metadata !606, metadata !DIExpression()), !dbg !547
  call void @llvm.dbg.declare(metadata %struct.dev_ino** %201, metadata !611, metadata !DIExpression()), !dbg !550
  %203 = call %struct.dev_ino* @get_root_dev_ino(%struct.dev_ino* %200), !dbg !551
  store %struct.dev_ino* %203, %struct.dev_ino** %201, align 8, !dbg !550
  call void @llvm.dbg.declare(metadata %struct.stat* %202, metadata !613, metadata !DIExpression()), !dbg !553
  %204 = load %struct.dev_ino*, %struct.dev_ino** %201, align 8, !dbg !554
  %205 = icmp eq %struct.dev_ino* %204, null, !dbg !556
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %26
  %206 = call i32* @__errno_location() #15, !dbg !558
  %207 = load i32, i32* %206, align 4, !dbg !558
  %208 = call i8* @gettext(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.39, i64 0, i64 0)) #10, !dbg !558
  %209 = call i8* @quotearg_style(i32 4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.40, i64 0, i64 0)), !dbg !558
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %207, i8* %208, i8* %209), !dbg !558
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %47
  %210 = call i32 @stat(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i64 0, i64 0), %struct.stat* %14) #10, !dbg !559
  %211 = icmp slt i32 %210, 0, !dbg !561
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %66
  %212 = call i32* @__errno_location() #15, !dbg !563
  %213 = load i32, i32* %212, align 4, !dbg !563
  %214 = call i8* @gettext(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.41, i64 0, i64 0)) #10, !dbg !563
  %215 = call i8* @quotearg_style(i32 4, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i64 0, i64 0)), !dbg !563
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %213, i8* %214, i8* %215), !dbg !563
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %88
  %216 = getelementptr inbounds %struct.stat, %struct.stat* %14, i32 0, i32 1, !dbg !565
  %217 = load i64, i64* %216, align 8, !dbg !565
  %218 = load %struct.dev_ino*, %struct.dev_ino** %13, align 8, !dbg !565
  %219 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %218, i32 0, i32 0, !dbg !565
  %220 = load i64, i64* %219, align 8, !dbg !565
  %221 = icmp eq i64 %217, %220, !dbg !565
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %111
  %222 = getelementptr inbounds %struct.stat, %struct.stat* %14, i32 0, i32 0, !dbg !565
  %223 = load i64, i64* %222, align 8, !dbg !565
  %224 = load %struct.dev_ino*, %struct.dev_ino** %13, align 8, !dbg !565
  %225 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %224, i32 0, i32 1, !dbg !565
  %226 = load i64, i64* %225, align 8, !dbg !565
  %227 = icmp eq i64 %223, %226, !dbg !565
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %135
  %228 = load %struct.file_name*, %struct.file_name** %10, align 8, !dbg !570
  %229 = load i64, i64* %11, align 8, !dbg !571
  %_ = sub i64 0, %229
  %gen = add i64 %_, 1
  %_23 = sub i64 %229, 1
  %gen24 = mul i64 %_23, 1
  %230 = add i64 %229, 1, !dbg !571
  store i64 %230, i64* %11, align 8, !dbg !571
  call void @find_dir_entry(%struct.stat* %14, %struct.file_name* %228, i64 %229), !dbg !572
  br label %originalBB22

originalBB29alteredBB:                            ; preds = %originalBB29, %163
  %231 = load %struct.file_name*, %struct.file_name** %10, align 8, !dbg !580
  call void @file_name_prepend(%struct.file_name* %231, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.10, i64 0, i64 0), i64 0), !dbg !581
  br label %originalBB29

originalBB33alteredBB:                            ; preds = %originalBB33, %181
  br label %originalBB33
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @file_name_free(%struct.file_name*) #4 !dbg !635 {
  %2 = load i32, i32* @x.11
  %3 = load i32, i32* @y.12
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct.file_name*, align 8
  store %struct.file_name* %0, %struct.file_name** %10, align 8
  call void @llvm.dbg.declare(metadata %struct.file_name** %10, metadata !636, metadata !DIExpression()), !dbg !637
  %11 = load %struct.file_name*, %struct.file_name** %10, align 8, !dbg !638
  %12 = getelementptr inbounds %struct.file_name, %struct.file_name* %11, i32 0, i32 0, !dbg !639
  %13 = load i8*, i8** %12, align 8, !dbg !639
  call void @free(i8* %13) #10, !dbg !640
  %14 = load %struct.file_name*, %struct.file_name** %10, align 8, !dbg !641
  %15 = bitcast %struct.file_name* %14 to i8*, !dbg !641
  call void @free(i8* %15) #10, !dbg !642
  %16 = load i32, i32* @x.11
  %17 = load i32, i32* @y.12
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret void, !dbg !643

originalBBalteredBB:                              ; preds = %originalBB, %1
  %24 = alloca %struct.file_name*, align 8
  store %struct.file_name* %0, %struct.file_name** %24, align 8
  call void @llvm.dbg.declare(metadata %struct.file_name** %24, metadata !644, metadata !DIExpression()), !dbg !637
  %25 = load %struct.file_name*, %struct.file_name** %24, align 8, !dbg !638
  %26 = getelementptr inbounds %struct.file_name, %struct.file_name* %25, i32 0, i32 0, !dbg !639
  %27 = load i8*, i8** %26, align 8, !dbg !639
  call void @free(i8* %27) #10, !dbg !640
  %28 = load %struct.file_name*, %struct.file_name** %24, align 8, !dbg !641
  %29 = bitcast %struct.file_name* %28 to i8*, !dbg !641
  call void @free(i8* %29) #10, !dbg !642
  br label %originalBB
}

; Function Attrs: nounwind readnone
declare dso_local i32* @__errno_location() #8

; Function Attrs: nounwind
declare dso_local i32 @stat(i8*, %struct.stat*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @find_dir_entry(%struct.stat*, %struct.file_name*, i64) #4 !dbg !666 {
  %4 = alloca %struct.stat*, align 8
  %5 = alloca %struct.file_name*, align 8
  %6 = alloca i64, align 8
  %7 = alloca %struct.__dirstream*, align 8
  %8 = alloca i32, align 4
  %9 = alloca %struct.stat, align 8
  %10 = alloca i8, align 1
  %11 = alloca i8, align 1
  %12 = alloca %struct.dirent*, align 8
  %13 = alloca %struct.stat, align 8
  %14 = alloca i64, align 8
  %15 = alloca i32, align 4
  store %struct.stat* %0, %struct.stat** %4, align 8
  call void @llvm.dbg.declare(metadata %struct.stat** %4, metadata !670, metadata !DIExpression()), !dbg !671
  store %struct.file_name* %1, %struct.file_name** %5, align 8
  call void @llvm.dbg.declare(metadata %struct.file_name** %5, metadata !672, metadata !DIExpression()), !dbg !673
  store i64 %2, i64* %6, align 8
  call void @llvm.dbg.declare(metadata i64* %6, metadata !674, metadata !DIExpression()), !dbg !675
  call void @llvm.dbg.declare(metadata %struct.__dirstream** %7, metadata !676, metadata !DIExpression()), !dbg !681
  call void @llvm.dbg.declare(metadata i32* %8, metadata !682, metadata !DIExpression()), !dbg !683
  call void @llvm.dbg.declare(metadata %struct.stat* %9, metadata !684, metadata !DIExpression()), !dbg !685
  call void @llvm.dbg.declare(metadata i8* %10, metadata !686, metadata !DIExpression()), !dbg !687
  call void @llvm.dbg.declare(metadata i8* %11, metadata !688, metadata !DIExpression()), !dbg !689
  %16 = call %struct.__dirstream* @opendir(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i64 0, i64 0)), !dbg !690
  store %struct.__dirstream* %16, %struct.__dirstream** %7, align 8, !dbg !691
  %17 = load %struct.__dirstream*, %struct.__dirstream** %7, align 8, !dbg !692
  %18 = icmp eq %struct.__dirstream* %17, null, !dbg !694
  br i1 %18, label %19, label %42, !dbg !695

19:                                               ; preds = %3
  %20 = load i32, i32* @x.13
  %21 = load i32, i32* @y.14
  %22 = sub i32 %20, 1
  %23 = mul i32 %20, %22
  %24 = urem i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = icmp slt i32 %21, 10
  %27 = or i1 %25, %26
  br i1 %27, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %19, %originalBBalteredBB
  %28 = call i32* @__errno_location() #15, !dbg !696
  %29 = load i32, i32* %28, align 4, !dbg !696
  %30 = call i8* @gettext(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.43, i64 0, i64 0)) #10, !dbg !696
  %31 = load i64, i64* %6, align 8, !dbg !696
  %32 = call i8* @nth_parent(i64 %31), !dbg !696
  %33 = call i8* @quote(i8* %32), !dbg !696
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %29, i8* %30, i8* %33), !dbg !696
  %34 = load i32, i32* @x.13
  %35 = load i32, i32* @y.14
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  unreachable, !dbg !696

42:                                               ; preds = %3
  %43 = load i32, i32* @x.13
  %44 = load i32, i32* @y.14
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %42, %originalBB1alteredBB
  %51 = load %struct.__dirstream*, %struct.__dirstream** %7, align 8, !dbg !697
  %52 = call i32 @dirfd(%struct.__dirstream* %51) #10, !dbg !698
  store i32 %52, i32* %8, align 4, !dbg !699
  %53 = load i32, i32* %8, align 4, !dbg !700
  %54 = icmp sle i32 0, %53, !dbg !702
  %55 = load i32, i32* @x.13
  %56 = load i32, i32* @y.14
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %54, label %63, label %66, !dbg !703

63:                                               ; preds = %originalBBpart24
  %64 = load i32, i32* %8, align 4, !dbg !704
  %65 = call i32 @fchdir(i32 %64) #10, !dbg !705
  br label %84, !dbg !703

66:                                               ; preds = %originalBBpart24
  %67 = load i32, i32* @x.13
  %68 = load i32, i32* @y.14
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %66, %originalBB6alteredBB
  %75 = call i32 @chdir(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i64 0, i64 0)) #10, !dbg !706
  %76 = load i32, i32* @x.13
  %77 = load i32, i32* @y.14
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %84, !dbg !703

84:                                               ; preds = %originalBBpart28, %63
  %85 = phi i32 [ %65, %63 ], [ %75, %originalBBpart28 ], !dbg !703
  %86 = icmp slt i32 %85, 0, !dbg !707
  br i1 %86, label %87, label %110, !dbg !708

87:                                               ; preds = %84
  %88 = load i32, i32* @x.13
  %89 = load i32, i32* @y.14
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %87, %originalBB10alteredBB
  %96 = call i32* @__errno_location() #15, !dbg !709
  %97 = load i32, i32* %96, align 4, !dbg !709
  %98 = call i8* @gettext(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.44, i64 0, i64 0)) #10, !dbg !709
  %99 = load i64, i64* %6, align 8, !dbg !709
  %100 = call i8* @nth_parent(i64 %99), !dbg !709
  %101 = call i8* @quote(i8* %100), !dbg !709
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %97, i8* %98, i8* %101), !dbg !709
  %102 = load i32, i32* @x.13
  %103 = load i32, i32* @y.14
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  unreachable, !dbg !709

110:                                              ; preds = %84
  %111 = load i32, i32* @x.13
  %112 = load i32, i32* @y.14
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %110, %originalBB14alteredBB
  %119 = load i32, i32* %8, align 4, !dbg !710
  %120 = icmp sle i32 0, %119, !dbg !712
  %121 = load i32, i32* @x.13
  %122 = load i32, i32* @y.14
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %120, label %129, label %148, !dbg !713

129:                                              ; preds = %originalBBpart216
  %130 = load i32, i32* @x.13
  %131 = load i32, i32* @y.14
  %132 = sub i32 %130, 1
  %133 = mul i32 %130, %132
  %134 = urem i32 %133, 2
  %135 = icmp eq i32 %134, 0
  %136 = icmp slt i32 %131, 10
  %137 = or i1 %135, %136
  br i1 %137, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %129, %originalBB18alteredBB
  %138 = load i32, i32* %8, align 4, !dbg !714
  %139 = call i32 @fstat(i32 %138, %struct.stat* %9) #10, !dbg !715
  %140 = load i32, i32* @x.13
  %141 = load i32, i32* @y.14
  %142 = sub i32 %140, 1
  %143 = mul i32 %140, %142
  %144 = urem i32 %143, 2
  %145 = icmp eq i32 %144, 0
  %146 = icmp slt i32 %141, 10
  %147 = or i1 %145, %146
  br i1 %147, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %150, !dbg !713

148:                                              ; preds = %originalBBpart216
  %149 = call i32 @stat(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.38, i64 0, i64 0), %struct.stat* %9) #10, !dbg !716
  br label %150, !dbg !713

150:                                              ; preds = %148, %originalBBpart220
  %151 = phi i32 [ %139, %originalBBpart220 ], [ %149, %148 ], !dbg !713
  %152 = load i32, i32* @x.13
  %153 = load i32, i32* @y.14
  %154 = sub i32 %152, 1
  %155 = mul i32 %152, %154
  %156 = urem i32 %155, 2
  %157 = icmp eq i32 %156, 0
  %158 = icmp slt i32 %153, 10
  %159 = or i1 %157, %158
  br i1 %159, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %150, %originalBB22alteredBB
  %160 = icmp slt i32 %151, 0, !dbg !717
  %161 = load i32, i32* @x.13
  %162 = load i32, i32* @y.14
  %163 = sub i32 %161, 1
  %164 = mul i32 %161, %163
  %165 = urem i32 %164, 2
  %166 = icmp eq i32 %165, 0
  %167 = icmp slt i32 %162, 10
  %168 = or i1 %166, %167
  br i1 %168, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %160, label %169, label %192, !dbg !718

169:                                              ; preds = %originalBBpart224
  %170 = load i32, i32* @x.13
  %171 = load i32, i32* @y.14
  %172 = sub i32 %170, 1
  %173 = mul i32 %170, %172
  %174 = urem i32 %173, 2
  %175 = icmp eq i32 %174, 0
  %176 = icmp slt i32 %171, 10
  %177 = or i1 %175, %176
  br i1 %177, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %169, %originalBB26alteredBB
  %178 = call i32* @__errno_location() #15, !dbg !719
  %179 = load i32, i32* %178, align 4, !dbg !719
  %180 = call i8* @gettext(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.41, i64 0, i64 0)) #10, !dbg !719
  %181 = load i64, i64* %6, align 8, !dbg !719
  %182 = call i8* @nth_parent(i64 %181), !dbg !719
  %183 = call i8* @quote(i8* %182), !dbg !719
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %179, i8* %180, i8* %183), !dbg !719
  %184 = load i32, i32* @x.13
  %185 = load i32, i32* @y.14
  %186 = sub i32 %184, 1
  %187 = mul i32 %184, %186
  %188 = urem i32 %187, 2
  %189 = icmp eq i32 %188, 0
  %190 = icmp slt i32 %185, 10
  %191 = or i1 %189, %190
  br i1 %191, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  unreachable, !dbg !719

192:                                              ; preds = %originalBBpart224
  %193 = getelementptr inbounds %struct.stat, %struct.stat* %9, i32 0, i32 0, !dbg !720
  %194 = load i64, i64* %193, align 8, !dbg !720
  %195 = load %struct.stat*, %struct.stat** %4, align 8, !dbg !721
  %196 = getelementptr inbounds %struct.stat, %struct.stat* %195, i32 0, i32 0, !dbg !722
  %197 = load i64, i64* %196, align 8, !dbg !722
  %198 = icmp ne i64 %194, %197, !dbg !723
  %199 = zext i1 %198 to i8, !dbg !724
  store i8 %199, i8* %10, align 1, !dbg !724
  store i8 0, i8* %11, align 1, !dbg !725
  br label %200, !dbg !726

200:                                              ; preds = %originalBBpart2172, %418, %originalBBpart2152, %192
  call void @llvm.dbg.declare(metadata %struct.dirent** %12, metadata !727, metadata !DIExpression()), !dbg !739
  call void @llvm.dbg.declare(metadata %struct.stat* %13, metadata !740, metadata !DIExpression()), !dbg !741
  call void @llvm.dbg.declare(metadata i64* %14, metadata !742, metadata !DIExpression()), !dbg !743
  %201 = load i32, i32* @x.13
  %202 = load i32, i32* @y.14
  %203 = sub i32 %201, 1
  %204 = mul i32 %201, %203
  %205 = urem i32 %204, 2
  %206 = icmp eq i32 %205, 0
  %207 = icmp slt i32 %202, 10
  %208 = or i1 %206, %207
  br i1 %208, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %200, %originalBB30alteredBB
  %209 = call i32* @__errno_location() #15, !dbg !744
  store i32 0, i32* %209, align 4, !dbg !745
  %210 = load %struct.__dirstream*, %struct.__dirstream** %7, align 8, !dbg !746
  %211 = call %struct.dirent* @readdir_ignoring_dot_and_dotdot(%struct.__dirstream* %210), !dbg !748
  store %struct.dirent* %211, %struct.dirent** %12, align 8, !dbg !749
  %212 = icmp eq %struct.dirent* %211, null, !dbg !750
  %213 = load i32, i32* @x.13
  %214 = load i32, i32* @y.14
  %215 = sub i32 %213, 1
  %216 = mul i32 %213, %215
  %217 = urem i32 %216, 2
  %218 = icmp eq i32 %217, 0
  %219 = icmp slt i32 %214, 10
  %220 = or i1 %218, %219
  br i1 %220, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br i1 %212, label %221, label %313, !dbg !751

221:                                              ; preds = %originalBBpart232
  %222 = call i32* @__errno_location() #15, !dbg !752
  %223 = load i32, i32* %222, align 4, !dbg !752
  %224 = icmp ne i32 %223, 0, !dbg !752
  br i1 %224, label %225, label %296, !dbg !755

225:                                              ; preds = %221
  call void @llvm.dbg.declare(metadata i32* %15, metadata !756, metadata !DIExpression()), !dbg !758
  %226 = load i32, i32* @x.13
  %227 = load i32, i32* @y.14
  %228 = sub i32 %226, 1
  %229 = mul i32 %226, %228
  %230 = urem i32 %229, 2
  %231 = icmp eq i32 %230, 0
  %232 = icmp slt i32 %227, 10
  %233 = or i1 %231, %232
  br i1 %233, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %225, %originalBB34alteredBB
  %234 = call i32* @__errno_location() #15, !dbg !759
  %235 = load i32, i32* %234, align 4, !dbg !759
  store i32 %235, i32* %15, align 4, !dbg !758
  %236 = load %struct.__dirstream*, %struct.__dirstream** %7, align 8, !dbg !760
  %237 = call i32 @closedir(%struct.__dirstream* %236), !dbg !761
  %238 = load i32, i32* %15, align 4, !dbg !762
  %239 = call i32* @__errno_location() #15, !dbg !763
  store i32 %238, i32* %239, align 4, !dbg !764
  %240 = add i32 %235, 5
  %241 = add i32 %238, 2
  %242 = mul i32 %235, 4
  %243 = mul i32 %240, %240
  %244 = mul i32 %243, %243
  %245 = mul i32 %241, %241
  %246 = mul i32 %245, %245
  %247 = mul i32 %242, %242
  %248 = mul i32 %247, %247
  %249 = add i32 %244, %246
  %250 = sub i32 %249, %248
  %251 = mul i32 %250, 3
  %252 = add i32 %251, 4
  %253 = icmp eq i32 %252, 4
  %254 = load i32, i32* @x.13
  %255 = load i32, i32* @y.14
  %256 = sub i32 %254, 1
  %257 = mul i32 %254, %256
  %258 = urem i32 %257, 2
  %259 = icmp eq i32 %258, 0
  %260 = icmp slt i32 %255, 10
  %261 = or i1 %259, %260
  br i1 %261, label %originalBBpart2124, label %originalBB34alteredBB

originalBBpart2124:                               ; preds = %originalBB34
  br i1 %253, label %279, label %262

262:                                              ; preds = %originalBBpart2124
  %263 = load i32, i32* @x.13
  %264 = load i32, i32* @y.14
  %265 = sub i32 %263, 1
  %266 = mul i32 %263, %265
  %267 = urem i32 %266, 2
  %268 = icmp eq i32 %267, 0
  %269 = icmp slt i32 %264, 10
  %270 = or i1 %268, %269
  br i1 %270, label %originalBB126, label %originalBB126alteredBB

originalBB126:                                    ; preds = %262, %originalBB126alteredBB
  %271 = load i32, i32* @x.13
  %272 = load i32, i32* @y.14
  %273 = sub i32 %271, 1
  %274 = mul i32 %271, %273
  %275 = urem i32 %274, 2
  %276 = icmp eq i32 %275, 0
  %277 = icmp slt i32 %272, 10
  %278 = or i1 %276, %277
  br i1 %278, label %originalBBpart2128, label %originalBB126alteredBB

originalBBpart2128:                               ; preds = %originalBB126
  ret void

279:                                              ; preds = %originalBBpart2124
  %280 = load i32, i32* @x.13
  %281 = load i32, i32* @y.14
  %282 = sub i32 %280, 1
  %283 = mul i32 %280, %282
  %284 = urem i32 %283, 2
  %285 = icmp eq i32 %284, 0
  %286 = icmp slt i32 %281, 10
  %287 = or i1 %285, %286
  br i1 %287, label %originalBB130, label %originalBB130alteredBB

originalBB130:                                    ; preds = %279, %originalBB130alteredBB
  store %struct.__dirstream* null, %struct.__dirstream** %7, align 8, !dbg !765
  %288 = load i32, i32* @x.13
  %289 = load i32, i32* @y.14
  %290 = sub i32 %288, 1
  %291 = mul i32 %288, %290
  %292 = urem i32 %291, 2
  %293 = icmp eq i32 %292, 0
  %294 = icmp slt i32 %289, 10
  %295 = or i1 %293, %294
  br i1 %295, label %originalBBpart2132, label %originalBB130alteredBB

originalBBpart2132:                               ; preds = %originalBB130
  br label %296, !dbg !766

296:                                              ; preds = %originalBBpart2132, %221
  %297 = load i32, i32* @x.13
  %298 = load i32, i32* @y.14
  %299 = sub i32 %297, 1
  %300 = mul i32 %297, %299
  %301 = urem i32 %300, 2
  %302 = icmp eq i32 %301, 0
  %303 = icmp slt i32 %298, 10
  %304 = or i1 %302, %303
  br i1 %304, label %originalBB134, label %originalBB134alteredBB

originalBB134:                                    ; preds = %296, %originalBB134alteredBB
  %305 = load i32, i32* @x.13
  %306 = load i32, i32* @y.14
  %307 = sub i32 %305, 1
  %308 = mul i32 %305, %307
  %309 = urem i32 %308, 2
  %310 = icmp eq i32 %309, 0
  %311 = icmp slt i32 %306, 10
  %312 = or i1 %310, %311
  br i1 %312, label %originalBBpart2136, label %originalBB134alteredBB

originalBBpart2136:                               ; preds = %originalBB134
  br label %503, !dbg !767

313:                                              ; preds = %originalBBpart232
  %314 = load i32, i32* @x.13
  %315 = load i32, i32* @y.14
  %316 = sub i32 %314, 1
  %317 = mul i32 %314, %316
  %318 = urem i32 %317, 2
  %319 = icmp eq i32 %318, 0
  %320 = icmp slt i32 %315, 10
  %321 = or i1 %319, %320
  br i1 %321, label %originalBB138, label %originalBB138alteredBB

originalBB138:                                    ; preds = %313, %originalBB138alteredBB
  %322 = load %struct.dirent*, %struct.dirent** %12, align 8, !dbg !768
  %323 = getelementptr inbounds %struct.dirent, %struct.dirent* %322, i32 0, i32 0, !dbg !768
  %324 = load i64, i64* %323, align 8, !dbg !768
  store i64 %324, i64* %14, align 8, !dbg !769
  %325 = load i64, i64* %14, align 8, !dbg !770
  %326 = icmp eq i64 %325, 0, !dbg !772
  %327 = load i32, i32* @x.13
  %328 = load i32, i32* @y.14
  %329 = sub i32 %327, 1
  %330 = mul i32 %327, %329
  %331 = urem i32 %330, 2
  %332 = icmp eq i32 %331, 0
  %333 = icmp slt i32 %328, 10
  %334 = or i1 %332, %333
  br i1 %334, label %originalBBpart2140, label %originalBB138alteredBB

originalBBpart2140:                               ; preds = %originalBB138
  br i1 %326, label %354, label %335, !dbg !773

335:                                              ; preds = %originalBBpart2140
  %336 = load i32, i32* @x.13
  %337 = load i32, i32* @y.14
  %338 = sub i32 %336, 1
  %339 = mul i32 %336, %338
  %340 = urem i32 %339, 2
  %341 = icmp eq i32 %340, 0
  %342 = icmp slt i32 %337, 10
  %343 = or i1 %341, %342
  br i1 %343, label %originalBB142, label %originalBB142alteredBB

originalBB142:                                    ; preds = %335, %originalBB142alteredBB
  %344 = load i8, i8* %10, align 1, !dbg !774
  %345 = trunc i8 %344 to i1, !dbg !774
  %346 = load i32, i32* @x.13
  %347 = load i32, i32* @y.14
  %348 = sub i32 %346, 1
  %349 = mul i32 %346, %348
  %350 = urem i32 %349, 2
  %351 = icmp eq i32 %350, 0
  %352 = icmp slt i32 %347, 10
  %353 = or i1 %351, %352
  br i1 %353, label %originalBBpart2144, label %originalBB142alteredBB

originalBBpart2144:                               ; preds = %originalBB142
  br i1 %345, label %354, label %412, !dbg !775

354:                                              ; preds = %originalBBpart2144, %originalBBpart2140
  %355 = load i32, i32* @x.13
  %356 = load i32, i32* @y.14
  %357 = sub i32 %355, 1
  %358 = mul i32 %355, %357
  %359 = urem i32 %358, 2
  %360 = icmp eq i32 %359, 0
  %361 = icmp slt i32 %356, 10
  %362 = or i1 %360, %361
  br i1 %362, label %originalBB146, label %originalBB146alteredBB

originalBB146:                                    ; preds = %354, %originalBB146alteredBB
  %363 = load %struct.dirent*, %struct.dirent** %12, align 8, !dbg !776
  %364 = getelementptr inbounds %struct.dirent, %struct.dirent* %363, i32 0, i32 4, !dbg !779
  %365 = getelementptr inbounds [256 x i8], [256 x i8]* %364, i64 0, i64 0, !dbg !776
  %366 = call i32 @lstat(i8* %365, %struct.stat* %13) #10, !dbg !780
  %367 = icmp slt i32 %366, 0, !dbg !781
  %368 = load i32, i32* @x.13
  %369 = load i32, i32* @y.14
  %370 = sub i32 %368, 1
  %371 = mul i32 %368, %370
  %372 = urem i32 %371, 2
  %373 = icmp eq i32 %372, 0
  %374 = icmp slt i32 %369, 10
  %375 = or i1 %373, %374
  br i1 %375, label %originalBBpart2148, label %originalBB146alteredBB

originalBBpart2148:                               ; preds = %originalBB146
  br i1 %367, label %376, label %393, !dbg !782

376:                                              ; preds = %originalBBpart2148
  %377 = load i32, i32* @x.13
  %378 = load i32, i32* @y.14
  %379 = sub i32 %377, 1
  %380 = mul i32 %377, %379
  %381 = urem i32 %380, 2
  %382 = icmp eq i32 %381, 0
  %383 = icmp slt i32 %378, 10
  %384 = or i1 %382, %383
  br i1 %384, label %originalBB150, label %originalBB150alteredBB

originalBB150:                                    ; preds = %376, %originalBB150alteredBB
  %385 = load i32, i32* @x.13
  %386 = load i32, i32* @y.14
  %387 = sub i32 %385, 1
  %388 = mul i32 %385, %387
  %389 = urem i32 %388, 2
  %390 = icmp eq i32 %389, 0
  %391 = icmp slt i32 %386, 10
  %392 = or i1 %390, %391
  br i1 %392, label %originalBBpart2152, label %originalBB150alteredBB

originalBBpart2152:                               ; preds = %originalBB150
  br label %200, !dbg !783, !llvm.loop !785

393:                                              ; preds = %originalBBpart2148
  %394 = load i32, i32* @x.13
  %395 = load i32, i32* @y.14
  %396 = sub i32 %394, 1
  %397 = mul i32 %394, %396
  %398 = urem i32 %397, 2
  %399 = icmp eq i32 %398, 0
  %400 = icmp slt i32 %395, 10
  %401 = or i1 %399, %400
  br i1 %401, label %originalBB154, label %originalBB154alteredBB

originalBB154:                                    ; preds = %393, %originalBB154alteredBB
  %402 = getelementptr inbounds %struct.stat, %struct.stat* %13, i32 0, i32 1, !dbg !787
  %403 = load i64, i64* %402, align 8, !dbg !787
  store i64 %403, i64* %14, align 8, !dbg !788
  %404 = load i32, i32* @x.13
  %405 = load i32, i32* @y.14
  %406 = sub i32 %404, 1
  %407 = mul i32 %404, %406
  %408 = urem i32 %407, 2
  %409 = icmp eq i32 %408, 0
  %410 = icmp slt i32 %405, 10
  %411 = or i1 %409, %410
  br i1 %411, label %originalBBpart2156, label %originalBB154alteredBB

originalBBpart2156:                               ; preds = %originalBB154
  br label %412, !dbg !789

412:                                              ; preds = %originalBBpart2156, %originalBBpart2144
  %413 = load i64, i64* %14, align 8, !dbg !790
  %414 = load %struct.stat*, %struct.stat** %4, align 8, !dbg !792
  %415 = getelementptr inbounds %struct.stat, %struct.stat* %414, i32 0, i32 1, !dbg !793
  %416 = load i64, i64* %415, align 8, !dbg !793
  %417 = icmp ne i64 %413, %416, !dbg !794
  br i1 %417, label %418, label %419, !dbg !795

418:                                              ; preds = %412
  br label %200, !dbg !796, !llvm.loop !785

419:                                              ; preds = %412
  %420 = load i32, i32* @x.13
  %421 = load i32, i32* @y.14
  %422 = sub i32 %420, 1
  %423 = mul i32 %420, %422
  %424 = urem i32 %423, 2
  %425 = icmp eq i32 %424, 0
  %426 = icmp slt i32 %421, 10
  %427 = or i1 %425, %426
  br i1 %427, label %originalBB158, label %originalBB158alteredBB

originalBB158:                                    ; preds = %419, %originalBB158alteredBB
  %428 = load i8, i8* %10, align 1, !dbg !797
  %429 = trunc i8 %428 to i1, !dbg !797
  %430 = load i32, i32* @x.13
  %431 = load i32, i32* @y.14
  %432 = sub i32 %430, 1
  %433 = mul i32 %430, %432
  %434 = urem i32 %433, 2
  %435 = icmp eq i32 %434, 0
  %436 = icmp slt i32 %431, 10
  %437 = or i1 %435, %436
  br i1 %437, label %originalBBpart2160, label %originalBB158alteredBB

originalBBpart2160:                               ; preds = %originalBB158
  br i1 %429, label %438, label %461, !dbg !799

438:                                              ; preds = %originalBBpart2160
  %439 = load i32, i32* @x.13
  %440 = load i32, i32* @y.14
  %441 = sub i32 %439, 1
  %442 = mul i32 %439, %441
  %443 = urem i32 %442, 2
  %444 = icmp eq i32 %443, 0
  %445 = icmp slt i32 %440, 10
  %446 = or i1 %444, %445
  br i1 %446, label %originalBB162, label %originalBB162alteredBB

originalBB162:                                    ; preds = %438, %originalBB162alteredBB
  %447 = getelementptr inbounds %struct.stat, %struct.stat* %13, i32 0, i32 0, !dbg !800
  %448 = load i64, i64* %447, align 8, !dbg !800
  %449 = load %struct.stat*, %struct.stat** %4, align 8, !dbg !801
  %450 = getelementptr inbounds %struct.stat, %struct.stat* %449, i32 0, i32 0, !dbg !802
  %451 = load i64, i64* %450, align 8, !dbg !802
  %452 = icmp eq i64 %448, %451, !dbg !803
  %453 = load i32, i32* @x.13
  %454 = load i32, i32* @y.14
  %455 = sub i32 %453, 1
  %456 = mul i32 %453, %455
  %457 = urem i32 %456, 2
  %458 = icmp eq i32 %457, 0
  %459 = icmp slt i32 %454, 10
  %460 = or i1 %458, %459
  br i1 %460, label %originalBBpart2164, label %originalBB162alteredBB

originalBBpart2164:                               ; preds = %originalBB162
  br i1 %452, label %461, label %486, !dbg !804

461:                                              ; preds = %originalBBpart2164, %originalBBpart2160
  %462 = load i32, i32* @x.13
  %463 = load i32, i32* @y.14
  %464 = sub i32 %462, 1
  %465 = mul i32 %462, %464
  %466 = urem i32 %465, 2
  %467 = icmp eq i32 %466, 0
  %468 = icmp slt i32 %463, 10
  %469 = or i1 %467, %468
  br i1 %469, label %originalBB166, label %originalBB166alteredBB

originalBB166:                                    ; preds = %461, %originalBB166alteredBB
  %470 = load %struct.file_name*, %struct.file_name** %5, align 8, !dbg !805
  %471 = load %struct.dirent*, %struct.dirent** %12, align 8, !dbg !807
  %472 = getelementptr inbounds %struct.dirent, %struct.dirent* %471, i32 0, i32 4, !dbg !808
  %473 = getelementptr inbounds [256 x i8], [256 x i8]* %472, i64 0, i64 0, !dbg !807
  %474 = load %struct.dirent*, %struct.dirent** %12, align 8, !dbg !809
  %475 = getelementptr inbounds %struct.dirent, %struct.dirent* %474, i32 0, i32 4, !dbg !809
  %476 = getelementptr inbounds [256 x i8], [256 x i8]* %475, i64 0, i64 0, !dbg !809
  %477 = call i64 @strlen(i8* %476) #13, !dbg !809
  call void @file_name_prepend(%struct.file_name* %470, i8* %473, i64 %477), !dbg !810
  store i8 1, i8* %11, align 1, !dbg !811
  %478 = load i32, i32* @x.13
  %479 = load i32, i32* @y.14
  %480 = sub i32 %478, 1
  %481 = mul i32 %478, %480
  %482 = urem i32 %481, 2
  %483 = icmp eq i32 %482, 0
  %484 = icmp slt i32 %479, 10
  %485 = or i1 %483, %484
  br i1 %485, label %originalBBpart2168, label %originalBB166alteredBB

originalBBpart2168:                               ; preds = %originalBB166
  br label %503, !dbg !812

486:                                              ; preds = %originalBBpart2164
  %487 = load i32, i32* @x.13
  %488 = load i32, i32* @y.14
  %489 = sub i32 %487, 1
  %490 = mul i32 %487, %489
  %491 = urem i32 %490, 2
  %492 = icmp eq i32 %491, 0
  %493 = icmp slt i32 %488, 10
  %494 = or i1 %492, %493
  br i1 %494, label %originalBB170, label %originalBB170alteredBB

originalBB170:                                    ; preds = %486, %originalBB170alteredBB
  %495 = load i32, i32* @x.13
  %496 = load i32, i32* @y.14
  %497 = sub i32 %495, 1
  %498 = mul i32 %495, %497
  %499 = urem i32 %498, 2
  %500 = icmp eq i32 %499, 0
  %501 = icmp slt i32 %496, 10
  %502 = or i1 %500, %501
  br i1 %502, label %originalBBpart2172, label %originalBB170alteredBB

originalBBpart2172:                               ; preds = %originalBB170
  br label %200, !dbg !726, !llvm.loop !785

503:                                              ; preds = %originalBBpart2168, %originalBBpart2136
  %504 = load i32, i32* @x.13
  %505 = load i32, i32* @y.14
  %506 = sub i32 %504, 1
  %507 = mul i32 %504, %506
  %508 = urem i32 %507, 2
  %509 = icmp eq i32 %508, 0
  %510 = icmp slt i32 %505, 10
  %511 = or i1 %509, %510
  br i1 %511, label %originalBB174, label %originalBB174alteredBB

originalBB174:                                    ; preds = %503, %originalBB174alteredBB
  %512 = load %struct.__dirstream*, %struct.__dirstream** %7, align 8, !dbg !813
  %513 = icmp eq %struct.__dirstream* %512, null, !dbg !815
  %514 = load i32, i32* @x.13
  %515 = load i32, i32* @y.14
  %516 = sub i32 %514, 1
  %517 = mul i32 %514, %516
  %518 = urem i32 %517, 2
  %519 = icmp eq i32 %518, 0
  %520 = icmp slt i32 %515, 10
  %521 = or i1 %519, %520
  br i1 %521, label %originalBBpart2176, label %originalBB174alteredBB

originalBBpart2176:                               ; preds = %originalBB174
  br i1 %513, label %526, label %522, !dbg !816

522:                                              ; preds = %originalBBpart2176
  %523 = load %struct.__dirstream*, %struct.__dirstream** %7, align 8, !dbg !817
  %524 = call i32 @closedir(%struct.__dirstream* %523), !dbg !818
  %525 = icmp ne i32 %524, 0, !dbg !819
  br i1 %525, label %526, label %533, !dbg !820

526:                                              ; preds = %522, %originalBBpart2176
  %527 = call i32* @__errno_location() #15, !dbg !821
  %528 = load i32, i32* %527, align 4, !dbg !821
  %529 = call i8* @gettext(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.45, i64 0, i64 0)) #10, !dbg !821
  %530 = load i64, i64* %6, align 8, !dbg !821
  %531 = call i8* @nth_parent(i64 %530), !dbg !821
  %532 = call i8* @quote(i8* %531), !dbg !821
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %528, i8* %529, i8* %532), !dbg !821
  unreachable, !dbg !821

533:                                              ; preds = %522
  %534 = load i32, i32* @x.13
  %535 = load i32, i32* @y.14
  %536 = sub i32 %534, 1
  %537 = mul i32 %534, %536
  %538 = urem i32 %537, 2
  %539 = icmp eq i32 %538, 0
  %540 = icmp slt i32 %535, 10
  %541 = or i1 %539, %540
  br i1 %541, label %originalBB178, label %originalBB178alteredBB

originalBB178:                                    ; preds = %533, %originalBB178alteredBB
  %542 = load i8, i8* %11, align 1, !dbg !823
  %543 = trunc i8 %542 to i1, !dbg !823
  %544 = load i32, i32* @x.13
  %545 = load i32, i32* @y.14
  %546 = sub i32 %544, 1
  %547 = mul i32 %544, %546
  %548 = urem i32 %547, 2
  %549 = icmp eq i32 %548, 0
  %550 = icmp slt i32 %545, 10
  %551 = or i1 %549, %550
  br i1 %551, label %originalBBpart2180, label %originalBB178alteredBB

originalBBpart2180:                               ; preds = %originalBB178
  br i1 %543, label %557, label %552, !dbg !825

552:                                              ; preds = %originalBBpart2180
  %553 = call i8* @gettext(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.46, i64 0, i64 0)) #10, !dbg !826
  %554 = load i64, i64* %6, align 8, !dbg !826
  %555 = call i8* @nth_parent(i64 %554), !dbg !826
  %556 = call i8* @quote(i8* %555), !dbg !826
  call void (i32, i32, i8*, ...) @error(i32 1, i32 0, i8* %553, i8* %556), !dbg !826
  unreachable, !dbg !826

557:                                              ; preds = %originalBBpart2180
  %558 = load %struct.stat*, %struct.stat** %4, align 8, !dbg !827
  %559 = bitcast %struct.stat* %558 to i8*, !dbg !828
  %560 = bitcast %struct.stat* %9 to i8*, !dbg !828
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %559, i8* align 8 %560, i64 144, i1 false), !dbg !828
  ret void, !dbg !829

originalBBalteredBB:                              ; preds = %originalBB, %19
  %561 = call i32* @__errno_location() #15, !dbg !696
  %562 = load i32, i32* %561, align 4, !dbg !696
  %563 = call i8* @gettext(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.43, i64 0, i64 0)) #10, !dbg !696
  %564 = load i64, i64* %6, align 8, !dbg !696
  %565 = call i8* @nth_parent(i64 %564), !dbg !696
  %566 = call i8* @quote(i8* %565), !dbg !696
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %562, i8* %563, i8* %566), !dbg !696
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %42
  %567 = load %struct.__dirstream*, %struct.__dirstream** %7, align 8, !dbg !697
  %568 = call i32 @dirfd(%struct.__dirstream* %567) #10, !dbg !698
  store i32 %568, i32* %8, align 4, !dbg !699
  %569 = load i32, i32* %8, align 4, !dbg !700
  %570 = icmp sle i32 0, %569, !dbg !702
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %66
  %571 = call i32 @chdir(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.42, i64 0, i64 0)) #10, !dbg !706
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %87
  %572 = call i32* @__errno_location() #15, !dbg !709
  %573 = load i32, i32* %572, align 4, !dbg !709
  %574 = call i8* @gettext(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.44, i64 0, i64 0)) #10, !dbg !709
  %575 = load i64, i64* %6, align 8, !dbg !709
  %576 = call i8* @nth_parent(i64 %575), !dbg !709
  %577 = call i8* @quote(i8* %576), !dbg !709
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %573, i8* %574, i8* %577), !dbg !709
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %110
  %578 = load i32, i32* %8, align 4, !dbg !710
  %579 = icmp sle i32 0, %578, !dbg !712
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %129
  %580 = load i32, i32* %8, align 4, !dbg !714
  %581 = call i32 @fstat(i32 %580, %struct.stat* %9) #10, !dbg !715
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %150
  %582 = icmp slt i32 %151, 0, !dbg !717
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %169
  %583 = call i32* @__errno_location() #15, !dbg !719
  %584 = load i32, i32* %583, align 4, !dbg !719
  %585 = call i8* @gettext(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.41, i64 0, i64 0)) #10, !dbg !719
  %586 = load i64, i64* %6, align 8, !dbg !719
  %587 = call i8* @nth_parent(i64 %586), !dbg !719
  %588 = call i8* @quote(i8* %587), !dbg !719
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %584, i8* %585, i8* %588), !dbg !719
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %200
  %589 = call i32* @__errno_location() #15, !dbg !744
  store i32 0, i32* %589, align 4, !dbg !745
  %590 = load %struct.__dirstream*, %struct.__dirstream** %7, align 8, !dbg !746
  %591 = call %struct.dirent* @readdir_ignoring_dot_and_dotdot(%struct.__dirstream* %590), !dbg !748
  store %struct.dirent* %591, %struct.dirent** %12, align 8, !dbg !749
  %592 = icmp eq %struct.dirent* %591, null, !dbg !750
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %225
  %593 = call i32* @__errno_location() #15, !dbg !759
  %594 = load i32, i32* %593, align 4, !dbg !759
  store i32 %594, i32* %15, align 4, !dbg !758
  %595 = load %struct.__dirstream*, %struct.__dirstream** %7, align 8, !dbg !760
  %596 = call i32 @closedir(%struct.__dirstream* %595), !dbg !761
  %597 = load i32, i32* %15, align 4, !dbg !762
  %598 = call i32* @__errno_location() #15, !dbg !763
  store i32 %597, i32* %598, align 4, !dbg !764
  %_ = shl i32 %594, 5
  %_35 = shl i32 %594, 5
  %599 = add i32 %594, 5
  %_36 = sub i32 %597, 2
  %gen = mul i32 %_36, 2
  %_37 = sub i32 %597, 2
  %gen38 = mul i32 %_37, 2
  %_39 = shl i32 %597, 2
  %_40 = shl i32 %597, 2
  %_41 = sub i32 %597, 2
  %gen42 = mul i32 %_41, 2
  %_43 = sub i32 %597, 2
  %gen44 = mul i32 %_43, 2
  %600 = add i32 %597, 2
  %_45 = shl i32 %594, 4
  %_46 = sub i32 %594, 4
  %gen47 = mul i32 %_46, 4
  %_48 = shl i32 %594, 4
  %_49 = sub i32 %594, 4
  %gen50 = mul i32 %_49, 4
  %_51 = sub i32 %594, 4
  %gen52 = mul i32 %_51, 4
  %_53 = sub i32 %594, 4
  %gen54 = mul i32 %_53, 4
  %_55 = shl i32 %594, 4
  %601 = mul i32 %594, 4
  %_56 = sub i32 0, %599
  %gen57 = add i32 %_56, %599
  %_58 = shl i32 %599, %599
  %_59 = sub i32 %599, %599
  %gen60 = mul i32 %_59, %599
  %602 = mul i32 %599, %599
  %_61 = sub i32 0, %602
  %gen62 = add i32 %_61, %602
  %603 = mul i32 %602, %602
  %_63 = shl i32 %600, %600
  %_64 = sub i32 0, %600
  %gen65 = add i32 %_64, %600
  %_66 = sub i32 0, %600
  %gen67 = add i32 %_66, %600
  %_68 = sub i32 %600, %600
  %gen69 = mul i32 %_68, %600
  %_70 = shl i32 %600, %600
  %_71 = shl i32 %600, %600
  %_72 = sub i32 0, %600
  %gen73 = add i32 %_72, %600
  %604 = mul i32 %600, %600
  %_74 = shl i32 %604, %604
  %605 = mul i32 %604, %604
  %_75 = sub i32 0, %601
  %gen76 = add i32 %_75, %601
  %_77 = shl i32 %601, %601
  %606 = mul i32 %601, %601
  %_78 = shl i32 %606, %606
  %_79 = sub i32 %606, %606
  %gen80 = mul i32 %_79, %606
  %_81 = sub i32 %606, %606
  %gen82 = mul i32 %_81, %606
  %_83 = sub i32 0, %606
  %gen84 = add i32 %_83, %606
  %_85 = sub i32 %606, %606
  %gen86 = mul i32 %_85, %606
  %_87 = sub i32 0, %606
  %gen88 = add i32 %_87, %606
  %_89 = sub i32 %606, %606
  %gen90 = mul i32 %_89, %606
  %_91 = sub i32 0, %606
  %gen92 = add i32 %_91, %606
  %607 = mul i32 %606, %606
  %_93 = shl i32 %603, %605
  %_94 = sub i32 %603, %605
  %gen95 = mul i32 %_94, %605
  %_96 = sub i32 0, %603
  %gen97 = add i32 %_96, %605
  %_98 = sub i32 %603, %605
  %gen99 = mul i32 %_98, %605
  %_100 = sub i32 %603, %605
  %gen101 = mul i32 %_100, %605
  %_102 = shl i32 %603, %605
  %608 = add i32 %603, %605
  %_103 = sub i32 %608, %607
  %gen104 = mul i32 %_103, %607
  %609 = sub i32 %608, %607
  %_105 = sub i32 0, %609
  %gen106 = add i32 %_105, 3
  %_107 = sub i32 0, %609
  %gen108 = add i32 %_107, 3
  %_109 = sub i32 0, %609
  %gen110 = add i32 %_109, 3
  %_111 = sub i32 %609, 3
  %gen112 = mul i32 %_111, 3
  %_113 = shl i32 %609, 3
  %610 = mul i32 %609, 3
  %_114 = sub i32 %610, 4
  %gen115 = mul i32 %_114, 4
  %_116 = sub i32 0, %610
  %gen117 = add i32 %_116, 4
  %_118 = sub i32 %610, 4
  %gen119 = mul i32 %_118, 4
  %_120 = shl i32 %610, 4
  %_121 = sub i32 %610, 4
  %gen122 = mul i32 %_121, 4
  %611 = add i32 %610, 4
  %612 = icmp eq i32 %611, 4
  br label %originalBB34

originalBB126alteredBB:                           ; preds = %originalBB126, %262
  br label %originalBB126

originalBB130alteredBB:                           ; preds = %originalBB130, %279
  store %struct.__dirstream* null, %struct.__dirstream** %7, align 8, !dbg !765
  br label %originalBB130

originalBB134alteredBB:                           ; preds = %originalBB134, %296
  br label %originalBB134

originalBB138alteredBB:                           ; preds = %originalBB138, %313
  %613 = load %struct.dirent*, %struct.dirent** %12, align 8, !dbg !768
  %614 = getelementptr inbounds %struct.dirent, %struct.dirent* %613, i32 0, i32 0, !dbg !768
  %615 = load i64, i64* %614, align 8, !dbg !768
  store i64 %615, i64* %14, align 8, !dbg !769
  %616 = load i64, i64* %14, align 8, !dbg !770
  %617 = icmp eq i64 %616, 0, !dbg !772
  br label %originalBB138

originalBB142alteredBB:                           ; preds = %originalBB142, %335
  %618 = load i8, i8* %10, align 1, !dbg !774
  %619 = trunc i8 %618 to i1, !dbg !774
  br label %originalBB142

originalBB146alteredBB:                           ; preds = %originalBB146, %354
  %620 = load %struct.dirent*, %struct.dirent** %12, align 8, !dbg !776
  %621 = getelementptr inbounds %struct.dirent, %struct.dirent* %620, i32 0, i32 4, !dbg !779
  %622 = getelementptr inbounds [256 x i8], [256 x i8]* %621, i64 0, i64 0, !dbg !776
  %623 = call i32 @lstat(i8* %622, %struct.stat* %13) #10, !dbg !780
  %624 = icmp slt i32 %623, 0, !dbg !781
  br label %originalBB146

originalBB150alteredBB:                           ; preds = %originalBB150, %376
  br label %originalBB150

originalBB154alteredBB:                           ; preds = %originalBB154, %393
  %625 = getelementptr inbounds %struct.stat, %struct.stat* %13, i32 0, i32 1, !dbg !787
  %626 = load i64, i64* %625, align 8, !dbg !787
  store i64 %626, i64* %14, align 8, !dbg !788
  br label %originalBB154

originalBB158alteredBB:                           ; preds = %originalBB158, %419
  %627 = load i8, i8* %10, align 1, !dbg !797
  %628 = trunc i8 %627 to i1, !dbg !797
  br label %originalBB158

originalBB162alteredBB:                           ; preds = %originalBB162, %438
  %629 = getelementptr inbounds %struct.stat, %struct.stat* %13, i32 0, i32 0, !dbg !800
  %630 = load i64, i64* %629, align 8, !dbg !800
  %631 = load %struct.stat*, %struct.stat** %4, align 8, !dbg !801
  %632 = getelementptr inbounds %struct.stat, %struct.stat* %631, i32 0, i32 0, !dbg !802
  %633 = load i64, i64* %632, align 8, !dbg !802
  %634 = icmp eq i64 %630, %633, !dbg !803
  br label %originalBB162

originalBB166alteredBB:                           ; preds = %originalBB166, %461
  %635 = load %struct.file_name*, %struct.file_name** %5, align 8, !dbg !805
  %636 = load %struct.dirent*, %struct.dirent** %12, align 8, !dbg !807
  %637 = getelementptr inbounds %struct.dirent, %struct.dirent* %636, i32 0, i32 4, !dbg !808
  %638 = getelementptr inbounds [256 x i8], [256 x i8]* %637, i64 0, i64 0, !dbg !807
  %639 = load %struct.dirent*, %struct.dirent** %12, align 8, !dbg !809
  %640 = getelementptr inbounds %struct.dirent, %struct.dirent* %639, i32 0, i32 4, !dbg !809
  %641 = getelementptr inbounds [256 x i8], [256 x i8]* %640, i64 0, i64 0, !dbg !809
  %642 = call i64 @strlen(i8* %641) #13, !dbg !809
  call void @file_name_prepend(%struct.file_name* %635, i8* %638, i64 %642), !dbg !810
  store i8 1, i8* %11, align 1, !dbg !811
  br label %originalBB166

originalBB170alteredBB:                           ; preds = %originalBB170, %486
  br label %originalBB170

originalBB174alteredBB:                           ; preds = %originalBB174, %503
  %643 = load %struct.__dirstream*, %struct.__dirstream** %7, align 8, !dbg !813
  %644 = icmp eq %struct.__dirstream* %643, null, !dbg !815
  br label %originalBB174

originalBB178alteredBB:                           ; preds = %originalBB178, %533
  %645 = load i8, i8* %11, align 1, !dbg !823
  %646 = trunc i8 %645 to i1, !dbg !823
  br label %originalBB178
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @file_name_prepend(%struct.file_name*, i8*, i64) #4 !dbg !830 {
  %4 = alloca %struct.file_name*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i64, align 8
  store %struct.file_name* %0, %struct.file_name** %4, align 8
  call void @llvm.dbg.declare(metadata %struct.file_name** %4, metadata !833, metadata !DIExpression()), !dbg !834
  store i8* %1, i8** %5, align 8
  call void @llvm.dbg.declare(metadata i8** %5, metadata !835, metadata !DIExpression()), !dbg !836
  store i64 %2, i64* %6, align 8
  call void @llvm.dbg.declare(metadata i64* %6, metadata !837, metadata !DIExpression()), !dbg !838
  call void @llvm.dbg.declare(metadata i64* %7, metadata !839, metadata !DIExpression()), !dbg !840
  %11 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !841
  %12 = getelementptr inbounds %struct.file_name, %struct.file_name* %11, i32 0, i32 2, !dbg !842
  %13 = load i8*, i8** %12, align 8, !dbg !842
  %14 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !843
  %15 = getelementptr inbounds %struct.file_name, %struct.file_name* %14, i32 0, i32 0, !dbg !844
  %16 = load i8*, i8** %15, align 8, !dbg !844
  %17 = ptrtoint i8* %13 to i64, !dbg !845
  %18 = ptrtoint i8* %16 to i64, !dbg !845
  %19 = sub i64 %17, %18, !dbg !845
  store i64 %19, i64* %7, align 8, !dbg !840
  %20 = load i64, i64* %7, align 8, !dbg !846
  %21 = load i64, i64* %6, align 8, !dbg !848
  %22 = add i64 1, %21, !dbg !849
  %23 = icmp ult i64 %20, %22, !dbg !850
  br i1 %23, label %24, label %82, !dbg !851

24:                                               ; preds = %3
  call void @llvm.dbg.declare(metadata i64* %8, metadata !852, metadata !DIExpression()), !dbg !854
  %25 = load i32, i32* @x.15
  %26 = load i32, i32* @y.16
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %24, %originalBBalteredBB
  %33 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !855
  %34 = getelementptr inbounds %struct.file_name, %struct.file_name* %33, i32 0, i32 1, !dbg !856
  %35 = load i64, i64* %34, align 8, !dbg !856
  %36 = add i64 %35, 1, !dbg !857
  %37 = load i64, i64* %6, align 8, !dbg !858
  %38 = add i64 %36, %37, !dbg !859
  store i64 %38, i64* %8, align 8, !dbg !854
  call void @llvm.dbg.declare(metadata i8** %9, metadata !860, metadata !DIExpression()), !dbg !861
  %39 = load i64, i64* %8, align 8, !dbg !862
  %40 = call noalias i8* @xnmalloc(i64 2, i64 %39), !dbg !863
  store i8* %40, i8** %9, align 8, !dbg !861
  call void @llvm.dbg.declare(metadata i64* %10, metadata !864, metadata !DIExpression()), !dbg !865
  %41 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !866
  %42 = getelementptr inbounds %struct.file_name, %struct.file_name* %41, i32 0, i32 1, !dbg !867
  %43 = load i64, i64* %42, align 8, !dbg !867
  %44 = load i64, i64* %7, align 8, !dbg !868
  %45 = sub i64 %43, %44, !dbg !869
  store i64 %45, i64* %10, align 8, !dbg !865
  %46 = load i8*, i8** %9, align 8, !dbg !870
  %47 = load i64, i64* %8, align 8, !dbg !871
  %48 = mul i64 2, %47, !dbg !872
  %49 = getelementptr inbounds i8, i8* %46, i64 %48, !dbg !873
  %50 = load i64, i64* %10, align 8, !dbg !874
  %51 = sub i64 0, %50, !dbg !875
  %52 = getelementptr inbounds i8, i8* %49, i64 %51, !dbg !875
  %53 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !876
  %54 = getelementptr inbounds %struct.file_name, %struct.file_name* %53, i32 0, i32 2, !dbg !877
  store i8* %52, i8** %54, align 8, !dbg !878
  %55 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !879
  %56 = getelementptr inbounds %struct.file_name, %struct.file_name* %55, i32 0, i32 2, !dbg !880
  %57 = load i8*, i8** %56, align 8, !dbg !880
  %58 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !881
  %59 = getelementptr inbounds %struct.file_name, %struct.file_name* %58, i32 0, i32 0, !dbg !882
  %60 = load i8*, i8** %59, align 8, !dbg !882
  %61 = load i64, i64* %7, align 8, !dbg !883
  %62 = getelementptr inbounds i8, i8* %60, i64 %61, !dbg !884
  %63 = load i64, i64* %10, align 8, !dbg !885
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %57, i8* align 1 %62, i64 %63, i1 false), !dbg !886
  %64 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !887
  %65 = getelementptr inbounds %struct.file_name, %struct.file_name* %64, i32 0, i32 0, !dbg !888
  %66 = load i8*, i8** %65, align 8, !dbg !888
  call void @free(i8* %66) #10, !dbg !889
  %67 = load i8*, i8** %9, align 8, !dbg !890
  %68 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !891
  %69 = getelementptr inbounds %struct.file_name, %struct.file_name* %68, i32 0, i32 0, !dbg !892
  store i8* %67, i8** %69, align 8, !dbg !893
  %70 = load i64, i64* %8, align 8, !dbg !894
  %71 = mul i64 2, %70, !dbg !895
  %72 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !896
  %73 = getelementptr inbounds %struct.file_name, %struct.file_name* %72, i32 0, i32 1, !dbg !897
  store i64 %71, i64* %73, align 8, !dbg !898
  %74 = load i32, i32* @x.15
  %75 = load i32, i32* @y.16
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %82, !dbg !899

82:                                               ; preds = %originalBBpart2, %3
  %83 = load i32, i32* @x.15
  %84 = load i32, i32* @y.16
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %82, %originalBB29alteredBB
  %91 = load i64, i64* %6, align 8, !dbg !900
  %92 = add i64 1, %91, !dbg !901
  %93 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !902
  %94 = getelementptr inbounds %struct.file_name, %struct.file_name* %93, i32 0, i32 2, !dbg !903
  %95 = load i8*, i8** %94, align 8, !dbg !904
  %96 = sub i64 0, %92, !dbg !904
  %97 = getelementptr inbounds i8, i8* %95, i64 %96, !dbg !904
  store i8* %97, i8** %94, align 8, !dbg !904
  %98 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !905
  %99 = getelementptr inbounds %struct.file_name, %struct.file_name* %98, i32 0, i32 2, !dbg !906
  %100 = load i8*, i8** %99, align 8, !dbg !906
  %101 = getelementptr inbounds i8, i8* %100, i64 0, !dbg !905
  store i8 47, i8* %101, align 1, !dbg !907
  %102 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !908
  %103 = getelementptr inbounds %struct.file_name, %struct.file_name* %102, i32 0, i32 2, !dbg !909
  %104 = load i8*, i8** %103, align 8, !dbg !909
  %105 = getelementptr inbounds i8, i8* %104, i64 1, !dbg !910
  %106 = load i8*, i8** %5, align 8, !dbg !911
  %107 = load i64, i64* %6, align 8, !dbg !912
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %105, i8* align 1 %106, i64 %107, i1 false), !dbg !913
  %108 = load i32, i32* @x.15
  %109 = load i32, i32* @y.16
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBBpart241, label %originalBB29alteredBB

originalBBpart241:                                ; preds = %originalBB29
  ret void, !dbg !914

originalBBalteredBB:                              ; preds = %originalBB, %24
  %116 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !855
  %117 = getelementptr inbounds %struct.file_name, %struct.file_name* %116, i32 0, i32 1, !dbg !856
  %118 = load i64, i64* %117, align 8, !dbg !856
  %_ = sub i64 %118, 1
  %gen = mul i64 %_, 1
  %_1 = shl i64 %118, 1
  %119 = add i64 %118, 1, !dbg !857
  %120 = load i64, i64* %6, align 8, !dbg !858
  %_2 = sub i64 %119, %120
  %gen3 = mul i64 %_2, %120
  %_4 = shl i64 %119, %120
  %_5 = sub i64 %119, %120
  %gen6 = mul i64 %_5, %120
  %_7 = sub i64 0, %119
  %gen8 = add i64 %_7, %120
  %121 = add i64 %119, %120, !dbg !859
  store i64 %121, i64* %8, align 8, !dbg !854
  call void @llvm.dbg.declare(metadata !4, metadata !915, metadata !DIExpression()), !dbg !861
  %122 = load i64, i64* %8, align 8, !dbg !862
  %123 = call noalias i8* @xnmalloc(i64 2, i64 %122), !dbg !863
  store i8* %123, i8** %9, align 8, !dbg !861
  call void @llvm.dbg.declare(metadata !4, metadata !939, metadata !DIExpression()), !dbg !865
  %124 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !866
  %125 = getelementptr inbounds %struct.file_name, %struct.file_name* %124, i32 0, i32 1, !dbg !867
  %126 = load i64, i64* %125, align 8, !dbg !867
  %127 = load i64, i64* %7, align 8, !dbg !868
  %128 = sub i64 %126, %127, !dbg !869
  store i64 %128, i64* %10, align 8, !dbg !865
  %129 = load i8*, i8** %9, align 8, !dbg !870
  %130 = load i64, i64* %8, align 8, !dbg !871
  %_9 = sub i64 2, %130
  %gen10 = mul i64 %_9, %130
  %_11 = sub i64 0, 2
  %gen12 = add i64 %_11, %130
  %_13 = sub i64 2, %130
  %gen14 = mul i64 %_13, %130
  %_15 = sub i64 2, %130
  %gen16 = mul i64 %_15, %130
  %_17 = sub i64 0, 2
  %gen18 = add i64 %_17, %130
  %131 = mul i64 2, %130, !dbg !872
  %132 = getelementptr inbounds i8, i8* %129, i64 %131, !dbg !873
  %133 = load i64, i64* %10, align 8, !dbg !874
  %_19 = sub i64 0, %133
  %gen20 = mul i64 %_19, %133
  %_21 = shl i64 0, %133
  %_22 = sub i64 0, 0
  %gen23 = add i64 %_22, %133
  %134 = sub i64 0, %133, !dbg !875
  %135 = getelementptr inbounds i8, i8* %132, i64 %134, !dbg !875
  %136 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !876
  %137 = getelementptr inbounds %struct.file_name, %struct.file_name* %136, i32 0, i32 2, !dbg !877
  store i8* %135, i8** %137, align 8, !dbg !878
  %138 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !879
  %139 = getelementptr inbounds %struct.file_name, %struct.file_name* %138, i32 0, i32 2, !dbg !880
  %140 = load i8*, i8** %139, align 8, !dbg !880
  %141 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !881
  %142 = getelementptr inbounds %struct.file_name, %struct.file_name* %141, i32 0, i32 0, !dbg !882
  %143 = load i8*, i8** %142, align 8, !dbg !882
  %144 = load i64, i64* %7, align 8, !dbg !883
  %145 = getelementptr inbounds i8, i8* %143, i64 %144, !dbg !884
  %146 = load i64, i64* %10, align 8, !dbg !885
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %140, i8* align 1 %145, i64 %146, i1 false), !dbg !886
  %147 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !887
  %148 = getelementptr inbounds %struct.file_name, %struct.file_name* %147, i32 0, i32 0, !dbg !888
  %149 = load i8*, i8** %148, align 8, !dbg !888
  call void @free(i8* %149) #10, !dbg !889
  %150 = load i8*, i8** %9, align 8, !dbg !890
  %151 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !891
  %152 = getelementptr inbounds %struct.file_name, %struct.file_name* %151, i32 0, i32 0, !dbg !892
  store i8* %150, i8** %152, align 8, !dbg !893
  %153 = load i64, i64* %8, align 8, !dbg !894
  %_24 = shl i64 2, %153
  %_25 = shl i64 2, %153
  %_26 = sub i64 2, %153
  %gen27 = mul i64 %_26, %153
  %_28 = shl i64 2, %153
  %154 = mul i64 2, %153, !dbg !895
  %155 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !896
  %156 = getelementptr inbounds %struct.file_name, %struct.file_name* %155, i32 0, i32 1, !dbg !897
  store i64 %154, i64* %156, align 8, !dbg !898
  br label %originalBB

originalBB29alteredBB:                            ; preds = %originalBB29, %82
  %157 = load i64, i64* %6, align 8, !dbg !900
  %158 = add i64 1, %157, !dbg !901
  %159 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !902
  %160 = getelementptr inbounds %struct.file_name, %struct.file_name* %159, i32 0, i32 2, !dbg !903
  %161 = load i8*, i8** %160, align 8, !dbg !904
  %_30 = shl i64 0, %158
  %_31 = sub i64 0, 0
  %gen32 = add i64 %_31, %158
  %_33 = sub i64 0, %158
  %gen34 = mul i64 %_33, %158
  %_35 = sub i64 0, 0
  %gen36 = add i64 %_35, %158
  %_37 = sub i64 0, %158
  %gen38 = mul i64 %_37, %158
  %_39 = shl i64 0, %158
  %162 = sub i64 0, %158, !dbg !904
  %163 = getelementptr inbounds i8, i8* %161, i64 %162, !dbg !904
  store i8* %163, i8** %160, align 8, !dbg !904
  %164 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !905
  %165 = getelementptr inbounds %struct.file_name, %struct.file_name* %164, i32 0, i32 2, !dbg !906
  %166 = load i8*, i8** %165, align 8, !dbg !906
  %167 = getelementptr inbounds i8, i8* %166, i64 0, !dbg !905
  store i8 47, i8* %167, align 1, !dbg !907
  %168 = load %struct.file_name*, %struct.file_name** %4, align 8, !dbg !908
  %169 = getelementptr inbounds %struct.file_name, %struct.file_name* %168, i32 0, i32 2, !dbg !909
  %170 = load i8*, i8** %169, align 8, !dbg !909
  %171 = getelementptr inbounds i8, i8* %170, i64 1, !dbg !910
  %172 = load i8*, i8** %5, align 8, !dbg !911
  %173 = load i64, i64* %6, align 8, !dbg !912
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %171, i8* align 1 %172, i64 %173, i1 false), !dbg !913
  br label %originalBB29
}

declare dso_local %struct.__dirstream* @opendir(i8*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @nth_parent(i64) #4 !dbg !940 {
  %2 = alloca i64, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !943, metadata !DIExpression()), !dbg !944
  call void @llvm.dbg.declare(metadata i8** %3, metadata !945, metadata !DIExpression()), !dbg !946
  %6 = load i64, i64* %2, align 8, !dbg !947
  %7 = call noalias i8* @xnmalloc(i64 3, i64 %6), !dbg !948
  store i8* %7, i8** %3, align 8, !dbg !946
  call void @llvm.dbg.declare(metadata i8** %4, metadata !949, metadata !DIExpression()), !dbg !950
  %8 = load i8*, i8** %3, align 8, !dbg !951
  store i8* %8, i8** %4, align 8, !dbg !950
  call void @llvm.dbg.declare(metadata i64* %5, metadata !952, metadata !DIExpression()), !dbg !954
  store i64 0, i64* %5, align 8, !dbg !954
  br label %9, !dbg !955

9:                                                ; preds = %originalBBpart25, %1
  %10 = load i64, i64* %5, align 8, !dbg !956
  %11 = load i64, i64* %2, align 8, !dbg !958
  %12 = icmp ult i64 %10, %11, !dbg !959
  br i1 %12, label %13, label %52, !dbg !960

13:                                               ; preds = %9
  %14 = load i32, i32* @x.17
  %15 = load i32, i32* @y.18
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %13, %originalBBalteredBB
  %22 = load i8*, i8** %4, align 8, !dbg !961
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %22, i8* align 1 getelementptr inbounds ([4 x i8], [4 x i8]* @.str.47, i64 0, i64 0), i64 3, i1 false), !dbg !963
  %23 = load i8*, i8** %4, align 8, !dbg !964
  %24 = getelementptr inbounds i8, i8* %23, i64 3, !dbg !964
  store i8* %24, i8** %4, align 8, !dbg !964
  %25 = load i32, i32* @x.17
  %26 = load i32, i32* @y.18
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %33, !dbg !965

33:                                               ; preds = %originalBBpart2
  %34 = load i32, i32* @x.17
  %35 = load i32, i32* @y.18
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %33, %originalBB1alteredBB
  %42 = load i64, i64* %5, align 8, !dbg !966
  %43 = add i64 %42, 1, !dbg !966
  store i64 %43, i64* %5, align 8, !dbg !966
  %44 = load i32, i32* @x.17
  %45 = load i32, i32* @y.18
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBBpart25, label %originalBB1alteredBB

originalBBpart25:                                 ; preds = %originalBB1
  br label %9, !dbg !967, !llvm.loop !968

52:                                               ; preds = %9
  %53 = load i8*, i8** %4, align 8, !dbg !970
  %54 = getelementptr inbounds i8, i8* %53, i64 -1, !dbg !970
  store i8 0, i8* %54, align 1, !dbg !971
  %55 = load i8*, i8** %3, align 8, !dbg !972
  ret i8* %55, !dbg !973

originalBBalteredBB:                              ; preds = %originalBB, %13
  %56 = load i8*, i8** %4, align 8, !dbg !961
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %56, i8* align 1 getelementptr inbounds ([4 x i8], [4 x i8]* @.str.47, i64 0, i64 0), i64 3, i1 false), !dbg !963
  %57 = load i8*, i8** %4, align 8, !dbg !964
  %58 = getelementptr inbounds i8, i8* %57, i64 3, !dbg !964
  store i8* %58, i8** %4, align 8, !dbg !964
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %33
  %59 = load i64, i64* %5, align 8, !dbg !966
  %_ = shl i64 %59, 1
  %_2 = shl i64 %59, 1
  %_3 = shl i64 %59, 1
  %60 = add i64 %59, 1, !dbg !966
  store i64 %60, i64* %5, align 8, !dbg !966
  br label %originalBB1
}

; Function Attrs: nounwind
declare dso_local i32 @dirfd(%struct.__dirstream*) #2

; Function Attrs: nounwind
declare dso_local i32 @fchdir(i32) #2

; Function Attrs: nounwind
declare dso_local i32 @chdir(i8*) #2

; Function Attrs: nounwind
declare dso_local i32 @fstat(i32, %struct.stat*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.dirent* @readdir_ignoring_dot_and_dotdot(%struct.__dirstream*) #4 !dbg !974 {
  %2 = load i32, i32* @x.19
  %3 = load i32, i32* @y.20
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct.__dirstream*, align 8
  %11 = alloca %struct.dirent*, align 8
  store %struct.__dirstream* %0, %struct.__dirstream** %10, align 8
  call void @llvm.dbg.declare(metadata %struct.__dirstream** %10, metadata !977, metadata !DIExpression()), !dbg !978
  %12 = load i32, i32* @x.19
  %13 = load i32, i32* @y.20
  %14 = sub i32 %12, 1
  %15 = mul i32 %12, %14
  %16 = urem i32 %15, 2
  %17 = icmp eq i32 %16, 0
  %18 = icmp slt i32 %13, 10
  %19 = or i1 %17, %18
  br i1 %19, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %20, !dbg !979

20:                                               ; preds = %originalBBpart28, %originalBBpart2
  call void @llvm.dbg.declare(metadata %struct.dirent** %11, metadata !980, metadata !DIExpression()), !dbg !982
  %21 = load %struct.__dirstream*, %struct.__dirstream** %10, align 8, !dbg !983
  %22 = call %struct.dirent* @readdir(%struct.__dirstream* %21), !dbg !984
  store %struct.dirent* %22, %struct.dirent** %11, align 8, !dbg !982
  %23 = load %struct.dirent*, %struct.dirent** %11, align 8, !dbg !985
  %24 = icmp eq %struct.dirent* %23, null, !dbg !987
  br i1 %24, label %30, label %25, !dbg !988

25:                                               ; preds = %20
  %26 = load %struct.dirent*, %struct.dirent** %11, align 8, !dbg !989
  %27 = getelementptr inbounds %struct.dirent, %struct.dirent* %26, i32 0, i32 4, !dbg !990
  %28 = getelementptr inbounds [256 x i8], [256 x i8]* %27, i64 0, i64 0, !dbg !989
  %29 = call zeroext i1 @dot_or_dotdot(i8* %28), !dbg !991
  br i1 %29, label %48, label %30, !dbg !992

30:                                               ; preds = %25, %20
  %31 = load i32, i32* @x.19
  %32 = load i32, i32* @y.20
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %30, %originalBB1alteredBB
  %39 = load %struct.dirent*, %struct.dirent** %11, align 8, !dbg !993
  %40 = load i32, i32* @x.19
  %41 = load i32, i32* @y.20
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  ret %struct.dirent* %39, !dbg !994

48:                                               ; preds = %25
  %49 = load i32, i32* @x.19
  %50 = load i32, i32* @y.20
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load i32, i32* @x.19
  %58 = load i32, i32* @y.20
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %20, !dbg !979, !llvm.loop !995

originalBBalteredBB:                              ; preds = %originalBB, %1
  %65 = alloca %struct.__dirstream*, align 8
  %66 = alloca %struct.dirent*, align 8
  store %struct.__dirstream* %0, %struct.__dirstream** %65, align 8
  call void @llvm.dbg.declare(metadata %struct.__dirstream** %65, metadata !997, metadata !DIExpression()), !dbg !978
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %30
  %67 = load %struct.dirent*, %struct.dirent** %11, align 8, !dbg !993
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  br label %originalBB6
}

declare dso_local i32 @closedir(%struct.__dirstream*) #3

; Function Attrs: nounwind
declare dso_local i32 @lstat(i8*, %struct.stat*) #2

; Function Attrs: nounwind readonly
declare dso_local i64 @strlen(i8*) #7

declare dso_local %struct.dirent* @readdir(%struct.__dirstream*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @dot_or_dotdot(i8*) #4 !dbg !1022 {
  %2 = alloca i1, align 1
  %3 = alloca i8*, align 8
  %4 = alloca i8, align 1
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !1025, metadata !DIExpression()), !dbg !1026
  %5 = load i8*, i8** %3, align 8, !dbg !1027
  %6 = getelementptr inbounds i8, i8* %5, i64 0, !dbg !1027
  %7 = load i8, i8* %6, align 1, !dbg !1027
  %8 = sext i8 %7 to i32, !dbg !1027
  %9 = icmp eq i32 %8, 46, !dbg !1029
  br i1 %9, label %10, label %62, !dbg !1030

10:                                               ; preds = %1
  call void @llvm.dbg.declare(metadata i8* %4, metadata !1031, metadata !DIExpression()), !dbg !1033
  %11 = load i8*, i8** %3, align 8, !dbg !1034
  %12 = load i8*, i8** %3, align 8, !dbg !1035
  %13 = getelementptr inbounds i8, i8* %12, i64 1, !dbg !1035
  %14 = load i8, i8* %13, align 1, !dbg !1035
  %15 = sext i8 %14 to i32, !dbg !1035
  %16 = icmp eq i32 %15, 46, !dbg !1036
  %17 = zext i1 %16 to i32, !dbg !1036
  %18 = add nsw i32 %17, 1, !dbg !1037
  %19 = sext i32 %18 to i64, !dbg !1034
  %20 = getelementptr inbounds i8, i8* %11, i64 %19, !dbg !1034
  %21 = load i8, i8* %20, align 1, !dbg !1034
  store i8 %21, i8* %4, align 1, !dbg !1033
  %22 = load i8, i8* %4, align 1, !dbg !1038
  %23 = icmp ne i8 %22, 0, !dbg !1038
  br i1 %23, label %24, label %44, !dbg !1039

24:                                               ; preds = %10
  %25 = load i32, i32* @x.21
  %26 = load i32, i32* @y.22
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %24, %originalBBalteredBB
  %33 = load i8, i8* %4, align 1, !dbg !1040
  %34 = sext i8 %33 to i32, !dbg !1040
  %35 = icmp eq i32 %34, 47, !dbg !1040
  %36 = load i32, i32* @x.21
  %37 = load i32, i32* @y.22
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %44, !dbg !1039

44:                                               ; preds = %originalBBpart2, %10
  %45 = phi i1 [ true, %10 ], [ %35, %originalBBpart2 ]
  %46 = load i32, i32* @x.21
  %47 = load i32, i32* @y.22
  %48 = sub i32 %46, 1
  %49 = mul i32 %46, %48
  %50 = urem i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %51, %52
  br i1 %53, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %44, %originalBB1alteredBB
  store i1 %45, i1* %2, align 1, !dbg !1041
  %54 = load i32, i32* @x.21
  %55 = load i32, i32* @y.22
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %79, !dbg !1041

62:                                               ; preds = %1
  %63 = load i32, i32* @x.21
  %64 = load i32, i32* @y.22
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %62, %originalBB6alteredBB
  store i1 false, i1* %2, align 1, !dbg !1042
  %71 = load i32, i32* @x.21
  %72 = load i32, i32* @y.22
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %79, !dbg !1042

79:                                               ; preds = %originalBBpart28, %originalBBpart24
  %80 = load i32, i32* @x.21
  %81 = load i32, i32* @y.22
  %82 = sub i32 %80, 1
  %83 = mul i32 %80, %82
  %84 = urem i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = icmp slt i32 %81, 10
  %87 = or i1 %85, %86
  br i1 %87, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %79, %originalBB10alteredBB
  %88 = load i1, i1* %2, align 1, !dbg !1043
  %89 = load i32, i32* @x.21
  %90 = load i32, i32* @y.22
  %91 = sub i32 %89, 1
  %92 = mul i32 %89, %91
  %93 = urem i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %94, %95
  br i1 %96, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  ret i1 %88, !dbg !1043

originalBBalteredBB:                              ; preds = %originalBB, %24
  %97 = load i8, i8* %4, align 1, !dbg !1040
  %98 = sext i8 %97 to i32, !dbg !1040
  %99 = icmp eq i32 %98, 47, !dbg !1040
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %44
  store i1 %45, i1* %2, align 1, !dbg !1041
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %62
  store i1 false, i1* %2, align 1, !dbg !1042
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %79
  %100 = load i1, i1* %2, align 1, !dbg !1043
  br label %originalBB10
}

; Function Attrs: nounwind readonly
declare dso_local i8* @strstr(i8*, i8*) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal void @close_stdout() #4 !dbg !1044 {
  %1 = load i32, i32* @x.23
  %2 = load i32, i32* @y.24
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = alloca i8*, align 8
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1047
  %11 = call i32 @close_stream(%struct._IO_FILE* %10), !dbg !1049
  %12 = icmp ne i32 %11, 0, !dbg !1050
  %13 = load i32, i32* @x.23
  %14 = load i32, i32* @y.24
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %21, label %108, !dbg !1051

21:                                               ; preds = %originalBBpart2
  %22 = load i32, i32* @x.23
  %23 = load i32, i32* @y.24
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  %30 = load i8, i8* @ignore_EPIPE, align 1, !dbg !1052
  %31 = trunc i8 %30 to i1, !dbg !1052
  %32 = load i32, i32* @x.23
  %33 = load i32, i32* @y.24
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %31, label %40, label %60, !dbg !1053

40:                                               ; preds = %originalBBpart24
  %41 = load i32, i32* @x.23
  %42 = load i32, i32* @y.24
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %40, %originalBB6alteredBB
  %49 = call i32* @__errno_location() #15, !dbg !1054
  %50 = load i32, i32* %49, align 4, !dbg !1054
  %51 = icmp eq i32 %50, 32, !dbg !1055
  %52 = load i32, i32* @x.23
  %53 = load i32, i32* @y.24
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %51, label %108, label %60, !dbg !1056

60:                                               ; preds = %originalBBpart28, %originalBBpart24
  call void @llvm.dbg.declare(metadata i8** %9, metadata !1057, metadata !DIExpression()), !dbg !1059
  %61 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.51, i64 0, i64 0)) #10, !dbg !1060
  store i8* %61, i8** %9, align 8, !dbg !1059
  %62 = load i8*, i8** @file_name, align 8, !dbg !1061
  %63 = icmp ne i8* %62, null, !dbg !1061
  br i1 %63, label %64, label %86, !dbg !1063

64:                                               ; preds = %60
  %65 = load i32, i32* @x.23
  %66 = load i32, i32* @y.24
  %67 = sub i32 %65, 1
  %68 = mul i32 %65, %67
  %69 = urem i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %70, %71
  br i1 %72, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %64, %originalBB10alteredBB
  %73 = call i32* @__errno_location() #15, !dbg !1064
  %74 = load i32, i32* %73, align 4, !dbg !1064
  %75 = load i8*, i8** @file_name, align 8, !dbg !1065
  %76 = call i8* @quotearg_colon(i8* %75), !dbg !1066
  %77 = load i8*, i8** %9, align 8, !dbg !1067
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %74, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.52, i64 0, i64 0), i8* %76, i8* %77), !dbg !1068
  %78 = load i32, i32* @x.23
  %79 = load i32, i32* @y.24
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %106, !dbg !1068

86:                                               ; preds = %60
  %87 = load i32, i32* @x.23
  %88 = load i32, i32* @y.24
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %86, %originalBB14alteredBB
  %95 = call i32* @__errno_location() #15, !dbg !1069
  %96 = load i32, i32* %95, align 4, !dbg !1069
  %97 = load i8*, i8** %9, align 8, !dbg !1070
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %96, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.53, i64 0, i64 0), i8* %97), !dbg !1071
  %98 = load i32, i32* @x.23
  %99 = load i32, i32* @y.24
  %100 = sub i32 %98, 1
  %101 = mul i32 %98, %100
  %102 = urem i32 %101, 2
  %103 = icmp eq i32 %102, 0
  %104 = icmp slt i32 %99, 10
  %105 = or i1 %103, %104
  br i1 %105, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %106

106:                                              ; preds = %originalBBpart216, %originalBBpart212
  %107 = load volatile i32, i32* @exit_failure, align 4, !dbg !1072
  call void @_exit(i32 %107) #14, !dbg !1073
  unreachable, !dbg !1073

108:                                              ; preds = %originalBBpart28, %originalBBpart2
  %109 = load i32, i32* @x.23
  %110 = load i32, i32* @y.24
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %108, %originalBB18alteredBB
  %117 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1074
  %118 = call i32 @close_stream(%struct._IO_FILE* %117), !dbg !1076
  %119 = icmp ne i32 %118, 0, !dbg !1077
  %120 = load i32, i32* @x.23
  %121 = load i32, i32* @y.24
  %122 = sub i32 %120, 1
  %123 = mul i32 %120, %122
  %124 = urem i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %125, %126
  br i1 %127, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %119, label %128, label %146, !dbg !1078

128:                                              ; preds = %originalBBpart220
  %129 = load i32, i32* @x.23
  %130 = load i32, i32* @y.24
  %131 = sub i32 %129, 1
  %132 = mul i32 %129, %131
  %133 = urem i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %130, 10
  %136 = or i1 %134, %135
  br i1 %136, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %128, %originalBB22alteredBB
  %137 = load volatile i32, i32* @exit_failure, align 4, !dbg !1079
  call void @_exit(i32 %137) #14, !dbg !1080
  %138 = load i32, i32* @x.23
  %139 = load i32, i32* @y.24
  %140 = sub i32 %138, 1
  %141 = mul i32 %138, %140
  %142 = urem i32 %141, 2
  %143 = icmp eq i32 %142, 0
  %144 = icmp slt i32 %139, 10
  %145 = or i1 %143, %144
  br i1 %145, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  unreachable, !dbg !1080

146:                                              ; preds = %originalBBpart220
  %147 = load i32, i32* @x.23
  %148 = load i32, i32* @y.24
  %149 = sub i32 %147, 1
  %150 = mul i32 %147, %149
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %152, %153
  br i1 %154, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %146, %originalBB26alteredBB
  %155 = load i32, i32* @x.23
  %156 = load i32, i32* @y.24
  %157 = sub i32 %155, 1
  %158 = mul i32 %155, %157
  %159 = urem i32 %158, 2
  %160 = icmp eq i32 %159, 0
  %161 = icmp slt i32 %156, 10
  %162 = or i1 %160, %161
  br i1 %162, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  ret void, !dbg !1081

originalBBalteredBB:                              ; preds = %originalBB, %0
  %163 = alloca i8*, align 8
  %164 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !1047
  %165 = call i32 @close_stream(%struct._IO_FILE* %164), !dbg !1049
  %166 = icmp ne i32 %165, 0, !dbg !1050
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  %167 = load i8, i8* @ignore_EPIPE, align 1, !dbg !1052
  %168 = trunc i8 %167 to i1, !dbg !1052
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %40
  %169 = call i32* @__errno_location() #15, !dbg !1054
  %170 = load i32, i32* %169, align 4, !dbg !1054
  %171 = icmp eq i32 %170, 32, !dbg !1055
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %64
  %172 = call i32* @__errno_location() #15, !dbg !1064
  %173 = load i32, i32* %172, align 4, !dbg !1064
  %174 = load i8*, i8** @file_name, align 8, !dbg !1065
  %175 = call i8* @quotearg_colon(i8* %174), !dbg !1066
  %176 = load i8*, i8** %9, align 8, !dbg !1067
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %173, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.52, i64 0, i64 0), i8* %175, i8* %176), !dbg !1068
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %86
  %177 = call i32* @__errno_location() #15, !dbg !1069
  %178 = load i32, i32* %177, align 4, !dbg !1069
  %179 = load i8*, i8** %9, align 8, !dbg !1070
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %178, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.53, i64 0, i64 0), i8* %179), !dbg !1071
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %108
  %180 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1074
  %181 = call i32 @close_stream(%struct._IO_FILE* %180), !dbg !1076
  %182 = icmp ne i32 %181, 0, !dbg !1077
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %128
  %183 = load volatile i32, i32* @exit_failure, align 4, !dbg !1079
  call void @_exit(i32 %183) #14, !dbg !1080
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %146
  br label %originalBB26
}

; Function Attrs: noreturn
declare dso_local void @_exit(i32) #9

; Function Attrs: noinline nounwind optnone uwtable
define internal void @set_program_name(i8*) #4 !dbg !1082 {
  %2 = load i32, i32* @x.25
  %3 = load i32, i32* @y.26
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !1083, metadata !DIExpression()), !dbg !1084
  call void @llvm.dbg.declare(metadata i8** %11, metadata !1085, metadata !DIExpression()), !dbg !1086
  call void @llvm.dbg.declare(metadata i8** %12, metadata !1087, metadata !DIExpression()), !dbg !1088
  %13 = load i8*, i8** %10, align 8, !dbg !1089
  %14 = icmp eq i8* %13, null, !dbg !1091
  %15 = load i32, i32* @x.25
  %16 = load i32, i32* @y.26
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %14, label %23, label %42, !dbg !1092

23:                                               ; preds = %originalBBpart2
  %24 = load i32, i32* @x.25
  %25 = load i32, i32* @y.26
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %23, %originalBB1alteredBB
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1093
  %33 = call i32 @fputs(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.58, i64 0, i64 0), %struct._IO_FILE* %32), !dbg !1095
  call void @abort() #12, !dbg !1096
  %34 = load i32, i32* @x.25
  %35 = load i32, i32* @y.26
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  unreachable, !dbg !1096

42:                                               ; preds = %originalBBpart2
  %43 = load i8*, i8** %10, align 8, !dbg !1097
  %44 = call i8* @strrchr(i8* %43, i32 47) #13, !dbg !1098
  store i8* %44, i8** %11, align 8, !dbg !1099
  %45 = load i8*, i8** %11, align 8, !dbg !1100
  %46 = icmp ne i8* %45, null, !dbg !1101
  br i1 %46, label %47, label %50, !dbg !1100

47:                                               ; preds = %42
  %48 = load i8*, i8** %11, align 8, !dbg !1102
  %49 = getelementptr inbounds i8, i8* %48, i64 1, !dbg !1103
  br label %52, !dbg !1100

50:                                               ; preds = %42
  %51 = load i8*, i8** %10, align 8, !dbg !1104
  br label %52, !dbg !1100

52:                                               ; preds = %50, %47
  %53 = phi i8* [ %49, %47 ], [ %51, %50 ], !dbg !1100
  %54 = load i32, i32* @x.25
  %55 = load i32, i32* @y.26
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %52, %originalBB6alteredBB
  store i8* %53, i8** %12, align 8, !dbg !1105
  %62 = load i8*, i8** %12, align 8, !dbg !1106
  %63 = load i8*, i8** %10, align 8, !dbg !1108
  %64 = ptrtoint i8* %62 to i64, !dbg !1109
  %65 = ptrtoint i8* %63 to i64, !dbg !1109
  %66 = sub i64 %64, %65, !dbg !1109
  %67 = icmp sge i64 %66, 7, !dbg !1110
  %68 = load i32, i32* @x.25
  %69 = load i32, i32* @y.26
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBBpart211, label %originalBB6alteredBB

originalBBpart211:                                ; preds = %originalBB6
  br i1 %67, label %76, label %123, !dbg !1111

76:                                               ; preds = %originalBBpart211
  %77 = load i32, i32* @x.25
  %78 = load i32, i32* @y.26
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBB13, label %originalBB13alteredBB

originalBB13:                                     ; preds = %76, %originalBB13alteredBB
  %85 = load i8*, i8** %12, align 8, !dbg !1112
  %86 = getelementptr inbounds i8, i8* %85, i64 -7, !dbg !1113
  %87 = call i32 @strncmp(i8* %86, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1.59, i64 0, i64 0), i64 7) #13, !dbg !1114
  %88 = icmp eq i32 %87, 0, !dbg !1115
  %89 = load i32, i32* @x.25
  %90 = load i32, i32* @y.26
  %91 = sub i32 %89, 1
  %92 = mul i32 %89, %91
  %93 = urem i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %94, %95
  br i1 %96, label %originalBBpart215, label %originalBB13alteredBB

originalBBpart215:                                ; preds = %originalBB13
  br i1 %88, label %97, label %123, !dbg !1116

97:                                               ; preds = %originalBBpart215
  %98 = load i8*, i8** %12, align 8, !dbg !1117
  store i8* %98, i8** %10, align 8, !dbg !1119
  %99 = load i8*, i8** %12, align 8, !dbg !1120
  %100 = call i32 @strncmp(i8* %99, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.60, i64 0, i64 0), i64 3) #13, !dbg !1122
  %101 = icmp eq i32 %100, 0, !dbg !1123
  br i1 %101, label %102, label %106, !dbg !1124

102:                                              ; preds = %97
  %103 = load i8*, i8** %12, align 8, !dbg !1125
  %104 = getelementptr inbounds i8, i8* %103, i64 3, !dbg !1127
  store i8* %104, i8** %10, align 8, !dbg !1128
  %105 = load i8*, i8** %10, align 8, !dbg !1129
  store i8* %105, i8** @program_invocation_short_name, align 8, !dbg !1130
  br label %106, !dbg !1131

106:                                              ; preds = %102, %97
  %107 = load i32, i32* @x.25
  %108 = load i32, i32* @y.26
  %109 = sub i32 %107, 1
  %110 = mul i32 %107, %109
  %111 = urem i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %108, 10
  %114 = or i1 %112, %113
  br i1 %114, label %originalBB17, label %originalBB17alteredBB

originalBB17:                                     ; preds = %106, %originalBB17alteredBB
  %115 = load i32, i32* @x.25
  %116 = load i32, i32* @y.26
  %117 = sub i32 %115, 1
  %118 = mul i32 %115, %117
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %120, %121
  br i1 %122, label %originalBBpart219, label %originalBB17alteredBB

originalBBpart219:                                ; preds = %originalBB17
  br label %123, !dbg !1132

123:                                              ; preds = %originalBBpart219, %originalBBpart215, %originalBBpart211
  %124 = load i32, i32* @x.25
  %125 = load i32, i32* @y.26
  %126 = sub i32 %124, 1
  %127 = mul i32 %124, %126
  %128 = urem i32 %127, 2
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %125, 10
  %131 = or i1 %129, %130
  br i1 %131, label %originalBB21, label %originalBB21alteredBB

originalBB21:                                     ; preds = %123, %originalBB21alteredBB
  %132 = load i8*, i8** %10, align 8, !dbg !1133
  store i8* %132, i8** @program_name, align 8, !dbg !1134
  %133 = load i8*, i8** %10, align 8, !dbg !1135
  store i8* %133, i8** @program_invocation_name, align 8, !dbg !1136
  %134 = load i32, i32* @x.25
  %135 = load i32, i32* @y.26
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBBpart223, label %originalBB21alteredBB

originalBBpart223:                                ; preds = %originalBB21
  ret void, !dbg !1137

originalBBalteredBB:                              ; preds = %originalBB, %1
  %142 = alloca i8*, align 8
  %143 = alloca i8*, align 8
  %144 = alloca i8*, align 8
  store i8* %0, i8** %142, align 8
  call void @llvm.dbg.declare(metadata i8** %142, metadata !1138, metadata !DIExpression()), !dbg !1084
  call void @llvm.dbg.declare(metadata i8** %143, metadata !1144, metadata !DIExpression()), !dbg !1086
  call void @llvm.dbg.declare(metadata i8** %144, metadata !1145, metadata !DIExpression()), !dbg !1088
  %145 = load i8*, i8** %142, align 8, !dbg !1089
  %146 = icmp eq i8* %145, null, !dbg !1091
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %23
  %147 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !1093
  %148 = call i32 @fputs(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.58, i64 0, i64 0), %struct._IO_FILE* %147), !dbg !1095
  call void @abort() #12, !dbg !1096
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %52
  store i8* %53, i8** %12, align 8, !dbg !1105
  %149 = load i8*, i8** %12, align 8, !dbg !1106
  %150 = load i8*, i8** %10, align 8, !dbg !1108
  %151 = ptrtoint i8* %149 to i64, !dbg !1109
  %152 = ptrtoint i8* %150 to i64, !dbg !1109
  %_ = shl i64 %151, %152
  %_7 = sub i64 %151, %152
  %gen = mul i64 %_7, %152
  %_8 = sub i64 0, %151
  %gen9 = add i64 %_8, %152
  %153 = sub i64 %151, %152, !dbg !1109
  %154 = icmp sge i64 %153, 7, !dbg !1110
  br label %originalBB6

originalBB13alteredBB:                            ; preds = %originalBB13, %76
  %155 = load i8*, i8** %12, align 8, !dbg !1112
  %156 = getelementptr inbounds i8, i8* %155, i64 -7, !dbg !1113
  %157 = call i32 @strncmp(i8* %156, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1.59, i64 0, i64 0), i64 7) #13, !dbg !1114
  %158 = icmp eq i32 %157, 0, !dbg !1115
  br label %originalBB13

originalBB17alteredBB:                            ; preds = %originalBB17, %106
  br label %originalBB17

originalBB21alteredBB:                            ; preds = %originalBB21, %123
  %159 = load i8*, i8** %10, align 8, !dbg !1133
  store i8* %159, i8** @program_name, align 8, !dbg !1134
  %160 = load i8*, i8** %10, align 8, !dbg !1135
  store i8* %160, i8** @program_invocation_name, align 8, !dbg !1136
  br label %originalBB21
}

declare dso_local i32 @fputs(i8*, %struct._IO_FILE*) #3

; Function Attrs: noreturn nounwind
declare dso_local void @abort() #5

; Function Attrs: nounwind readonly
declare dso_local i8* @strrchr(i8*, i32) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @set_char_quoting(%struct.quoting_options*, i8 signext, i32) #4 !dbg !1146 {
  %4 = alloca %struct.quoting_options*, align 8
  %5 = alloca i8, align 1
  %6 = alloca i32, align 4
  %7 = alloca i8, align 1
  %8 = alloca i32*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store %struct.quoting_options* %0, %struct.quoting_options** %4, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %4, metadata !1150, metadata !DIExpression()), !dbg !1151
  store i8 %1, i8* %5, align 1
  call void @llvm.dbg.declare(metadata i8* %5, metadata !1152, metadata !DIExpression()), !dbg !1153
  store i32 %2, i32* %6, align 4
  call void @llvm.dbg.declare(metadata i32* %6, metadata !1154, metadata !DIExpression()), !dbg !1155
  call void @llvm.dbg.declare(metadata i8* %7, metadata !1156, metadata !DIExpression()), !dbg !1157
  %11 = load i8, i8* %5, align 1, !dbg !1158
  store i8 %11, i8* %7, align 1, !dbg !1157
  call void @llvm.dbg.declare(metadata i32** %8, metadata !1159, metadata !DIExpression()), !dbg !1161
  %12 = load %struct.quoting_options*, %struct.quoting_options** %4, align 8, !dbg !1162
  %13 = icmp ne %struct.quoting_options* %12, null, !dbg !1162
  br i1 %13, label %14, label %32, !dbg !1162

14:                                               ; preds = %3
  %15 = load i32, i32* @x.27
  %16 = load i32, i32* @y.28
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %14, %originalBBalteredBB
  %23 = load %struct.quoting_options*, %struct.quoting_options** %4, align 8, !dbg !1163
  %24 = load i32, i32* @x.27
  %25 = load i32, i32* @y.28
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %49, !dbg !1162

32:                                               ; preds = %3
  %33 = load i32, i32* @x.27
  %34 = load i32, i32* @y.28
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %32, %originalBB1alteredBB
  %41 = load i32, i32* @x.27
  %42 = load i32, i32* @y.28
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %49, !dbg !1162

49:                                               ; preds = %originalBBpart24, %originalBBpart2
  %50 = phi %struct.quoting_options* [ %23, %originalBBpart2 ], [ @default_quoting_options, %originalBBpart24 ], !dbg !1162
  %51 = load i32, i32* @x.27
  %52 = load i32, i32* @y.28
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %49, %originalBB6alteredBB
  %59 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %50, i32 0, i32 2, !dbg !1164
  %60 = getelementptr inbounds [8 x i32], [8 x i32]* %59, i64 0, i64 0, !dbg !1165
  %61 = load i8, i8* %7, align 1, !dbg !1166
  %62 = zext i8 %61 to i64, !dbg !1166
  %63 = udiv i64 %62, 32, !dbg !1167
  %64 = getelementptr inbounds i32, i32* %60, i64 %63, !dbg !1168
  store i32* %64, i32** %8, align 8, !dbg !1161
  call void @llvm.dbg.declare(metadata i32* %9, metadata !1169, metadata !DIExpression()), !dbg !1170
  %65 = load i8, i8* %7, align 1, !dbg !1171
  %66 = zext i8 %65 to i64, !dbg !1171
  %67 = urem i64 %66, 32, !dbg !1172
  %68 = trunc i64 %67 to i32, !dbg !1171
  store i32 %68, i32* %9, align 4, !dbg !1170
  call void @llvm.dbg.declare(metadata i32* %10, metadata !1173, metadata !DIExpression()), !dbg !1174
  %69 = load i32*, i32** %8, align 8, !dbg !1175
  %70 = load i32, i32* %69, align 4, !dbg !1176
  %71 = load i32, i32* %9, align 4, !dbg !1177
  %72 = lshr i32 %70, %71, !dbg !1178
  %73 = and i32 %72, 1, !dbg !1179
  store i32 %73, i32* %10, align 4, !dbg !1174
  %74 = load i32, i32* %6, align 4, !dbg !1180
  %75 = and i32 %74, 1, !dbg !1181
  %76 = load i32, i32* %10, align 4, !dbg !1182
  %77 = xor i32 %75, %76, !dbg !1183
  %78 = load i32, i32* %9, align 4, !dbg !1184
  %79 = shl i32 %77, %78, !dbg !1185
  %80 = load i32*, i32** %8, align 8, !dbg !1186
  %81 = load i32, i32* %80, align 4, !dbg !1187
  %82 = xor i32 %81, %79, !dbg !1187
  store i32 %82, i32* %80, align 4, !dbg !1187
  %83 = load i32, i32* %10, align 4, !dbg !1188
  %84 = load i32, i32* @x.27
  %85 = load i32, i32* @y.28
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBBpart262, label %originalBB6alteredBB

originalBBpart262:                                ; preds = %originalBB6
  ret i32 %83, !dbg !1189

originalBBalteredBB:                              ; preds = %originalBB, %14
  %92 = load %struct.quoting_options*, %struct.quoting_options** %4, align 8, !dbg !1163
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %32
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %49
  %93 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %50, i32 0, i32 2, !dbg !1164
  %94 = getelementptr inbounds [8 x i32], [8 x i32]* %93, i64 0, i64 0, !dbg !1165
  %95 = load i8, i8* %7, align 1, !dbg !1166
  %96 = zext i8 %95 to i64, !dbg !1166
  %_ = sub i64 0, %96
  %gen = add i64 %_, 32
  %_7 = sub i64 0, %96
  %gen8 = add i64 %_7, 32
  %_9 = shl i64 %96, 32
  %_10 = shl i64 %96, 32
  %_11 = sub i64 %96, 32
  %gen12 = mul i64 %_11, 32
  %_13 = sub i64 0, %96
  %gen14 = add i64 %_13, 32
  %97 = udiv i64 %96, 32, !dbg !1167
  %98 = getelementptr inbounds i32, i32* %94, i64 %97, !dbg !1168
  store i32* %98, i32** %8, align 8, !dbg !1161
  call void @llvm.dbg.declare(metadata !4, metadata !1190, metadata !DIExpression()), !dbg !1170
  %99 = load i8, i8* %7, align 1, !dbg !1171
  %100 = zext i8 %99 to i64, !dbg !1171
  %_15 = sub i64 0, %100
  %gen16 = add i64 %_15, 32
  %_17 = sub i64 %100, 32
  %gen18 = mul i64 %_17, 32
  %_19 = sub i64 %100, 32
  %gen20 = mul i64 %_19, 32
  %_21 = sub i64 0, %100
  %gen22 = add i64 %_21, 32
  %101 = urem i64 %100, 32, !dbg !1172
  %102 = trunc i64 %101 to i32, !dbg !1171
  store i32 %102, i32* %9, align 4, !dbg !1170
  call void @llvm.dbg.declare(metadata !4, metadata !1225, metadata !DIExpression()), !dbg !1174
  %103 = load i32*, i32** %8, align 8, !dbg !1175
  %104 = load i32, i32* %103, align 4, !dbg !1176
  %105 = load i32, i32* %9, align 4, !dbg !1177
  %_23 = sub i32 0, %104
  %gen24 = add i32 %_23, %105
  %_25 = sub i32 %104, %105
  %gen26 = mul i32 %_25, %105
  %_27 = shl i32 %104, %105
  %_28 = shl i32 %104, %105
  %106 = lshr i32 %104, %105, !dbg !1178
  %_29 = sub i32 %106, 1
  %gen30 = mul i32 %_29, 1
  %_31 = sub i32 0, %106
  %gen32 = add i32 %_31, 1
  %_33 = sub i32 0, %106
  %gen34 = add i32 %_33, 1
  %_35 = shl i32 %106, 1
  %_36 = shl i32 %106, 1
  %_37 = sub i32 %106, 1
  %gen38 = mul i32 %_37, 1
  %_39 = sub i32 %106, 1
  %gen40 = mul i32 %_39, 1
  %_41 = shl i32 %106, 1
  %_42 = shl i32 %106, 1
  %107 = and i32 %106, 1, !dbg !1179
  store i32 %107, i32* %10, align 4, !dbg !1174
  %108 = load i32, i32* %6, align 4, !dbg !1180
  %109 = and i32 %108, 1, !dbg !1181
  %110 = load i32, i32* %10, align 4, !dbg !1182
  %_43 = sub i32 %109, %110
  %gen44 = mul i32 %_43, %110
  %_45 = sub i32 0, %109
  %gen46 = add i32 %_45, %110
  %_47 = sub i32 0, %109
  %gen48 = add i32 %_47, %110
  %_49 = sub i32 %109, %110
  %gen50 = mul i32 %_49, %110
  %_51 = shl i32 %109, %110
  %111 = xor i32 %109, %110, !dbg !1183
  %112 = load i32, i32* %9, align 4, !dbg !1184
  %_52 = sub i32 %111, %112
  %gen53 = mul i32 %_52, %112
  %_54 = sub i32 %111, %112
  %gen55 = mul i32 %_54, %112
  %_56 = sub i32 %111, %112
  %gen57 = mul i32 %_56, %112
  %_58 = shl i32 %111, %112
  %113 = shl i32 %111, %112, !dbg !1185
  %114 = load i32*, i32** %8, align 8, !dbg !1186
  %115 = load i32, i32* %114, align 4, !dbg !1187
  %_59 = shl i32 %115, %113
  %_60 = shl i32 %115, %113
  %116 = xor i32 %115, %113, !dbg !1187
  store i32 %116, i32* %114, align 4, !dbg !1187
  %117 = load i32, i32* %10, align 4, !dbg !1188
  br label %originalBB6
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_n_style(i32, i32, i8*) #4 !dbg !1226 {
  %4 = load i32, i32* @x.29
  %5 = load i32, i32* @y.30
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca %struct.quoting_options, align 8
  store i32 %0, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !1229, metadata !DIExpression()), !dbg !1230
  store i32 %1, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !1231, metadata !DIExpression()), !dbg !1232
  store i8* %2, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !1233, metadata !DIExpression()), !dbg !1234
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %15, metadata !1235, metadata !DIExpression()), !dbg !1237
  %16 = load i32, i32* %13, align 4, !dbg !1238
  call void @quoting_options_from_style(%struct.quoting_options* sret %15, i32 %16), !dbg !1239
  %17 = load i32, i32* %12, align 4, !dbg !1240
  %18 = load i8*, i8** %14, align 8, !dbg !1241
  %19 = call i8* @quotearg_n_options(i32 %17, i8* %18, i64 -1, %struct.quoting_options* %15), !dbg !1242
  %20 = load i32, i32* @x.29
  %21 = load i32, i32* @y.30
  %22 = sub i32 %20, 1
  %23 = mul i32 %20, %22
  %24 = urem i32 %23, 2
  %25 = icmp eq i32 %24, 0
  %26 = icmp slt i32 %21, 10
  %27 = or i1 %25, %26
  br i1 %27, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %19, !dbg !1243

originalBBalteredBB:                              ; preds = %originalBB, %3
  %28 = alloca i32, align 4
  %29 = alloca i32, align 4
  %30 = alloca i8*, align 8
  %31 = alloca %struct.quoting_options, align 8
  store i32 %0, i32* %28, align 4
  call void @llvm.dbg.declare(metadata i32* %28, metadata !1244, metadata !DIExpression()), !dbg !1230
  store i32 %1, i32* %29, align 4
  call void @llvm.dbg.declare(metadata i32* %29, metadata !1276, metadata !DIExpression()), !dbg !1232
  store i8* %2, i8** %30, align 8
  call void @llvm.dbg.declare(metadata i8** %30, metadata !1277, metadata !DIExpression()), !dbg !1234
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %31, metadata !1278, metadata !DIExpression()), !dbg !1237
  %32 = load i32, i32* %29, align 4, !dbg !1238
  call void @quoting_options_from_style(%struct.quoting_options* sret %31, i32 %32), !dbg !1239
  %33 = load i32, i32* %28, align 4, !dbg !1240
  %34 = load i8*, i8** %30, align 8, !dbg !1241
  %35 = call i8* @quotearg_n_options(i32 %33, i8* %34, i64 -1, %struct.quoting_options* %31), !dbg !1242
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @quoting_options_from_style(%struct.quoting_options* noalias sret, i32) #4 !dbg !1280 {
  %3 = alloca i32, align 4
  store i32 %1, i32* %3, align 4
  call void @llvm.dbg.declare(metadata i32* %3, metadata !1283, metadata !DIExpression()), !dbg !1284
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %0, metadata !1285, metadata !DIExpression()), !dbg !1286
  %4 = bitcast %struct.quoting_options* %0 to i8*, !dbg !1286
  call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 56, i1 false), !dbg !1286
  %5 = load i32, i32* %3, align 4, !dbg !1287
  %6 = icmp eq i32 %5, 10, !dbg !1289
  br i1 %6, label %7, label %24, !dbg !1290

7:                                                ; preds = %2
  %8 = load i32, i32* @x.31
  %9 = load i32, i32* @y.32
  %10 = sub i32 %8, 1
  %11 = mul i32 %8, %10
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  %14 = icmp slt i32 %9, 10
  %15 = or i1 %13, %14
  br i1 %15, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %7, %originalBBalteredBB
  call void @abort() #12, !dbg !1291
  %16 = load i32, i32* @x.31
  %17 = load i32, i32* @y.32
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  unreachable, !dbg !1291

24:                                               ; preds = %2
  %25 = load i32, i32* @x.31
  %26 = load i32, i32* @y.32
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %24, %originalBB1alteredBB
  %33 = load i32, i32* %3, align 4, !dbg !1292
  %34 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %0, i32 0, i32 0, !dbg !1293
  store i32 %33, i32* %34, align 8, !dbg !1294
  %35 = load i32, i32* @x.31
  %36 = load i32, i32* @y.32
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  ret void, !dbg !1295

originalBBalteredBB:                              ; preds = %originalBB, %7
  call void @abort() #12, !dbg !1291
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %24
  %43 = load i32, i32* %3, align 4, !dbg !1292
  %44 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %0, i32 0, i32 0, !dbg !1293
  store i32 %43, i32* %44, align 8, !dbg !1294
  br label %originalBB1
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_n_options(i32, i8*, i64, %struct.quoting_options*) #4 !dbg !1296 {
  %5 = load i32, i32* @x.33
  %6 = load i32, i32* @y.34
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %4, %originalBBalteredBB
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i64, align 8
  %16 = alloca %struct.quoting_options*, align 8
  %17 = alloca i32, align 4
  %18 = alloca %struct.slotvec*, align 8
  %19 = alloca i8, align 1
  %20 = alloca i32, align 4
  %21 = alloca i64, align 8
  %22 = alloca i8*, align 8
  %23 = alloca i32, align 4
  %24 = alloca i64, align 8
  store i32 %0, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !1300, metadata !DIExpression()), !dbg !1301
  store i8* %1, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !1302, metadata !DIExpression()), !dbg !1303
  store i64 %2, i64* %15, align 8
  call void @llvm.dbg.declare(metadata i64* %15, metadata !1304, metadata !DIExpression()), !dbg !1305
  store %struct.quoting_options* %3, %struct.quoting_options** %16, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %16, metadata !1306, metadata !DIExpression()), !dbg !1307
  call void @llvm.dbg.declare(metadata i32* %17, metadata !1308, metadata !DIExpression()), !dbg !1309
  %25 = call i32* @__errno_location() #15, !dbg !1310
  %26 = load i32, i32* %25, align 4, !dbg !1310
  store i32 %26, i32* %17, align 4, !dbg !1309
  call void @llvm.dbg.declare(metadata %struct.slotvec** %18, metadata !1311, metadata !DIExpression()), !dbg !1312
  %27 = load %struct.slotvec*, %struct.slotvec** @slotvec, align 8, !dbg !1313
  store %struct.slotvec* %27, %struct.slotvec** %18, align 8, !dbg !1312
  %28 = load i32, i32* %13, align 4, !dbg !1314
  %29 = icmp slt i32 %28, 0, !dbg !1316
  %30 = load i32, i32* @x.33
  %31 = load i32, i32* @y.34
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %29, label %38, label %39, !dbg !1317

38:                                               ; preds = %originalBBpart2
  call void @abort() #12, !dbg !1318
  unreachable, !dbg !1318

39:                                               ; preds = %originalBBpart2
  %40 = load i32, i32* @x.33
  %41 = load i32, i32* @y.34
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %39, %originalBB1alteredBB
  %48 = load i32, i32* @nslots, align 4, !dbg !1319
  %49 = mul i32 %48, 4
  %50 = add i32 %49, 5
  %51 = mul i32 %50, %50
  %52 = sub i32 %51, %50
  %53 = srem i32 %52, 2
  %54 = add i32 %53, 1
  %55 = icmp eq i32 %54, 1
  %56 = load i32, i32* @x.33
  %57 = load i32, i32* @y.34
  %58 = sub i32 %56, 1
  %59 = mul i32 %56, %58
  %60 = urem i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %57, 10
  %63 = or i1 %61, %62
  br i1 %63, label %originalBBpart238, label %originalBB1alteredBB

originalBBpart238:                                ; preds = %originalBB1
  br i1 %55, label %65, label %64

64:                                               ; preds = %originalBBpart238
  ret i8* null

65:                                               ; preds = %originalBBpart238
  %66 = load i32, i32* @x.33
  %67 = load i32, i32* @y.34
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBB40, label %originalBB40alteredBB

originalBB40:                                     ; preds = %65, %originalBB40alteredBB
  %74 = load i32, i32* %13, align 4, !dbg !1321
  %75 = icmp sle i32 %48, %74, !dbg !1322
  %76 = load i32, i32* @x.33
  %77 = load i32, i32* @y.34
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBBpart242, label %originalBB40alteredBB

originalBBpart242:                                ; preds = %originalBB40
  br i1 %75, label %84, label %270, !dbg !1323

84:                                               ; preds = %originalBBpart242
  call void @llvm.dbg.declare(metadata i8* %19, metadata !1324, metadata !DIExpression()), !dbg !1326
  %85 = load i32, i32* @x.33
  %86 = load i32, i32* @y.34
  %87 = sub i32 %85, 1
  %88 = mul i32 %85, %87
  %89 = urem i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %90, %91
  br i1 %92, label %originalBB44, label %originalBB44alteredBB

originalBB44:                                     ; preds = %84, %originalBB44alteredBB
  %93 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !1327
  %94 = icmp eq %struct.slotvec* %93, @slotvec0, !dbg !1328
  %95 = zext i1 %94 to i8, !dbg !1326
  store i8 %95, i8* %19, align 1, !dbg !1326
  call void @llvm.dbg.declare(metadata i32* %20, metadata !1329, metadata !DIExpression()), !dbg !1330
  store i32 2147483646, i32* %20, align 4, !dbg !1330
  %96 = load i32, i32* %20, align 4, !dbg !1331
  %97 = load i32, i32* %13, align 4, !dbg !1333
  %98 = icmp slt i32 %96, %97, !dbg !1334
  %99 = load i32, i32* @x.33
  %100 = load i32, i32* @y.34
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBBpart246, label %originalBB44alteredBB

originalBBpart246:                                ; preds = %originalBB44
  br i1 %98, label %107, label %124, !dbg !1335

107:                                              ; preds = %originalBBpart246
  %108 = load i32, i32* @x.33
  %109 = load i32, i32* @y.34
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBB48, label %originalBB48alteredBB

originalBB48:                                     ; preds = %107, %originalBB48alteredBB
  call void @xalloc_die() #14, !dbg !1336
  %116 = load i32, i32* @x.33
  %117 = load i32, i32* @y.34
  %118 = sub i32 %116, 1
  %119 = mul i32 %116, %118
  %120 = urem i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %117, 10
  %123 = or i1 %121, %122
  br i1 %123, label %originalBBpart250, label %originalBB48alteredBB

originalBBpart250:                                ; preds = %originalBB48
  unreachable, !dbg !1336

124:                                              ; preds = %originalBBpart246
  %125 = load i32, i32* @x.33
  %126 = load i32, i32* @y.34
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBB52, label %originalBB52alteredBB

originalBB52:                                     ; preds = %124, %originalBB52alteredBB
  %133 = load i8, i8* %19, align 1, !dbg !1337
  %134 = trunc i8 %133 to i1, !dbg !1337
  %135 = load i32, i32* @x.33
  %136 = load i32, i32* @y.34
  %137 = sub i32 %135, 1
  %138 = mul i32 %135, %137
  %139 = urem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %140, %141
  br i1 %142, label %originalBBpart254, label %originalBB52alteredBB

originalBBpart254:                                ; preds = %originalBB52
  br i1 %134, label %143, label %160, !dbg !1337

143:                                              ; preds = %originalBBpart254
  %144 = load i32, i32* @x.33
  %145 = load i32, i32* @y.34
  %146 = sub i32 %144, 1
  %147 = mul i32 %144, %146
  %148 = urem i32 %147, 2
  %149 = icmp eq i32 %148, 0
  %150 = icmp slt i32 %145, 10
  %151 = or i1 %149, %150
  br i1 %151, label %originalBB56, label %originalBB56alteredBB

originalBB56:                                     ; preds = %143, %originalBB56alteredBB
  %152 = load i32, i32* @x.33
  %153 = load i32, i32* @y.34
  %154 = sub i32 %152, 1
  %155 = mul i32 %152, %154
  %156 = urem i32 %155, 2
  %157 = icmp eq i32 %156, 0
  %158 = icmp slt i32 %153, 10
  %159 = or i1 %157, %158
  br i1 %159, label %originalBBpart258, label %originalBB56alteredBB

originalBBpart258:                                ; preds = %originalBB56
  br label %178, !dbg !1337

160:                                              ; preds = %originalBBpart254
  %161 = load i32, i32* @x.33
  %162 = load i32, i32* @y.34
  %163 = sub i32 %161, 1
  %164 = mul i32 %161, %163
  %165 = urem i32 %164, 2
  %166 = icmp eq i32 %165, 0
  %167 = icmp slt i32 %162, 10
  %168 = or i1 %166, %167
  br i1 %168, label %originalBB60, label %originalBB60alteredBB

originalBB60:                                     ; preds = %160, %originalBB60alteredBB
  %169 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !1338
  %170 = load i32, i32* @x.33
  %171 = load i32, i32* @y.34
  %172 = sub i32 %170, 1
  %173 = mul i32 %170, %172
  %174 = urem i32 %173, 2
  %175 = icmp eq i32 %174, 0
  %176 = icmp slt i32 %171, 10
  %177 = or i1 %175, %176
  br i1 %177, label %originalBBpart262, label %originalBB60alteredBB

originalBBpart262:                                ; preds = %originalBB60
  br label %178, !dbg !1337

178:                                              ; preds = %originalBBpart262, %originalBBpart258
  %179 = phi %struct.slotvec* [ null, %originalBBpart258 ], [ %169, %originalBBpart262 ], !dbg !1337
  %180 = bitcast %struct.slotvec* %179 to i8*, !dbg !1337
  %181 = load i32, i32* %13, align 4, !dbg !1339
  %182 = add nsw i32 %181, 1, !dbg !1340
  %183 = sext i32 %182 to i64, !dbg !1341
  %184 = mul i64 %183, 16, !dbg !1342
  %185 = trunc i64 16 to i32
  %186 = add i32 %185, 5
  %187 = trunc i64 16 to i32
  %188 = mul i32 %187, -2
  %189 = add i32 %188, -4
  %190 = mul i32 %186, %186
  %191 = mul i32 %189, %189
  %192 = add i32 %190, %191
  %193 = mul i32 %186, %189
  %194 = mul i32 %193, 2
  %195 = sub i32 %192, %194
  %196 = mul i32 %195, 5
  %197 = add i32 %196, 2
  %198 = icmp eq i32 %197, -3
  br i1 %198, label %199, label %216

199:                                              ; preds = %178
  %200 = load i32, i32* @x.33
  %201 = load i32, i32* @y.34
  %202 = sub i32 %200, 1
  %203 = mul i32 %200, %202
  %204 = urem i32 %203, 2
  %205 = icmp eq i32 %204, 0
  %206 = icmp slt i32 %201, 10
  %207 = or i1 %205, %206
  br i1 %207, label %originalBB64, label %originalBB64alteredBB

originalBB64:                                     ; preds = %199, %originalBB64alteredBB
  %208 = load i32, i32* @x.33
  %209 = load i32, i32* @y.34
  %210 = sub i32 %208, 1
  %211 = mul i32 %208, %210
  %212 = urem i32 %211, 2
  %213 = icmp eq i32 %212, 0
  %214 = icmp slt i32 %209, 10
  %215 = or i1 %213, %214
  br i1 %215, label %originalBBpart266, label %originalBB64alteredBB

originalBBpart266:                                ; preds = %originalBB64
  ret i8* null

216:                                              ; preds = %178
  %217 = call i8* @xrealloc(i8* %180, i64 %184), !dbg !1343
  %218 = bitcast i8* %217 to %struct.slotvec*, !dbg !1343
  store %struct.slotvec* %218, %struct.slotvec** %18, align 8, !dbg !1344
  store %struct.slotvec* %218, %struct.slotvec** @slotvec, align 8, !dbg !1345
  %219 = load i8, i8* %19, align 1, !dbg !1346
  %220 = trunc i8 %219 to i1, !dbg !1346
  br i1 %220, label %221, label %240, !dbg !1348

221:                                              ; preds = %216
  %222 = load i32, i32* @x.33
  %223 = load i32, i32* @y.34
  %224 = sub i32 %222, 1
  %225 = mul i32 %222, %224
  %226 = urem i32 %225, 2
  %227 = icmp eq i32 %226, 0
  %228 = icmp slt i32 %223, 10
  %229 = or i1 %227, %228
  br i1 %229, label %originalBB68, label %originalBB68alteredBB

originalBB68:                                     ; preds = %221, %originalBB68alteredBB
  %230 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !1349
  %231 = bitcast %struct.slotvec* %230 to i8*, !dbg !1350
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %231, i8* align 8 bitcast (%struct.slotvec* @slotvec0 to i8*), i64 16, i1 false), !dbg !1350
  %232 = load i32, i32* @x.33
  %233 = load i32, i32* @y.34
  %234 = sub i32 %232, 1
  %235 = mul i32 %232, %234
  %236 = urem i32 %235, 2
  %237 = icmp eq i32 %236, 0
  %238 = icmp slt i32 %233, 10
  %239 = or i1 %237, %238
  br i1 %239, label %originalBBpart270, label %originalBB68alteredBB

originalBBpart270:                                ; preds = %originalBB68
  br label %240, !dbg !1351

240:                                              ; preds = %originalBBpart270, %216
  %241 = load i32, i32* @x.33
  %242 = load i32, i32* @y.34
  %243 = sub i32 %241, 1
  %244 = mul i32 %241, %243
  %245 = urem i32 %244, 2
  %246 = icmp eq i32 %245, 0
  %247 = icmp slt i32 %242, 10
  %248 = or i1 %246, %247
  br i1 %248, label %originalBB72, label %originalBB72alteredBB

originalBB72:                                     ; preds = %240, %originalBB72alteredBB
  %249 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !1352
  %250 = load i32, i32* @nslots, align 4, !dbg !1353
  %251 = sext i32 %250 to i64, !dbg !1354
  %252 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %249, i64 %251, !dbg !1354
  %253 = bitcast %struct.slotvec* %252 to i8*, !dbg !1355
  %254 = load i32, i32* %13, align 4, !dbg !1356
  %255 = add nsw i32 %254, 1, !dbg !1357
  %256 = load i32, i32* @nslots, align 4, !dbg !1358
  %257 = sub nsw i32 %255, %256, !dbg !1359
  %258 = sext i32 %257 to i64, !dbg !1360
  %259 = mul i64 %258, 16, !dbg !1361
  call void @llvm.memset.p0i8.i64(i8* align 8 %253, i8 0, i64 %259, i1 false), !dbg !1355
  %260 = load i32, i32* %13, align 4, !dbg !1362
  %261 = add nsw i32 %260, 1, !dbg !1363
  store i32 %261, i32* @nslots, align 4, !dbg !1364
  %262 = load i32, i32* @x.33
  %263 = load i32, i32* @y.34
  %264 = sub i32 %262, 1
  %265 = mul i32 %262, %264
  %266 = urem i32 %265, 2
  %267 = icmp eq i32 %266, 0
  %268 = icmp slt i32 %263, 10
  %269 = or i1 %267, %268
  br i1 %269, label %originalBBpart292, label %originalBB72alteredBB

originalBBpart292:                                ; preds = %originalBB72
  br label %270, !dbg !1365

270:                                              ; preds = %originalBBpart292, %originalBBpart242
  call void @llvm.dbg.declare(metadata i64* %21, metadata !1366, metadata !DIExpression()), !dbg !1368
  %271 = load i32, i32* @x.33
  %272 = load i32, i32* @y.34
  %273 = sub i32 %271, 1
  %274 = mul i32 %271, %273
  %275 = urem i32 %274, 2
  %276 = icmp eq i32 %275, 0
  %277 = icmp slt i32 %272, 10
  %278 = or i1 %276, %277
  br i1 %278, label %originalBB94, label %originalBB94alteredBB

originalBB94:                                     ; preds = %270, %originalBB94alteredBB
  %279 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !1369
  %280 = load i32, i32* %13, align 4, !dbg !1370
  %281 = sext i32 %280 to i64, !dbg !1369
  %282 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %279, i64 %281, !dbg !1369
  %283 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %282, i32 0, i32 0, !dbg !1371
  %284 = load i64, i64* %283, align 8, !dbg !1371
  store i64 %284, i64* %21, align 8, !dbg !1368
  call void @llvm.dbg.declare(metadata i8** %22, metadata !1372, metadata !DIExpression()), !dbg !1373
  %285 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !1374
  %286 = load i32, i32* %13, align 4, !dbg !1375
  %287 = sext i32 %286 to i64, !dbg !1374
  %288 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %285, i64 %287, !dbg !1374
  %289 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %288, i32 0, i32 1, !dbg !1376
  %290 = load i8*, i8** %289, align 8, !dbg !1376
  store i8* %290, i8** %22, align 8, !dbg !1373
  call void @llvm.dbg.declare(metadata i32* %23, metadata !1377, metadata !DIExpression()), !dbg !1378
  %291 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1379
  %292 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %291, i32 0, i32 1, !dbg !1380
  %293 = load i32, i32* %292, align 4, !dbg !1380
  %294 = or i32 %293, 1, !dbg !1381
  store i32 %294, i32* %23, align 4, !dbg !1378
  call void @llvm.dbg.declare(metadata i64* %24, metadata !1382, metadata !DIExpression()), !dbg !1383
  %295 = load i8*, i8** %22, align 8, !dbg !1384
  %296 = load i64, i64* %21, align 8, !dbg !1385
  %297 = load i8*, i8** %14, align 8, !dbg !1386
  %298 = load i64, i64* %15, align 8, !dbg !1387
  %299 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1388
  %300 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %299, i32 0, i32 0, !dbg !1389
  %301 = load i32, i32* %300, align 8, !dbg !1389
  %302 = load i32, i32* %23, align 4, !dbg !1390
  %303 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1391
  %304 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %303, i32 0, i32 2, !dbg !1392
  %305 = getelementptr inbounds [8 x i32], [8 x i32]* %304, i64 0, i64 0, !dbg !1391
  %306 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1393
  %307 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %306, i32 0, i32 3, !dbg !1394
  %308 = load i8*, i8** %307, align 8, !dbg !1394
  %309 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1395
  %310 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %309, i32 0, i32 4, !dbg !1396
  %311 = load i8*, i8** %310, align 8, !dbg !1396
  %312 = call i64 @quotearg_buffer_restyled(i8* %295, i64 %296, i8* %297, i64 %298, i32 %301, i32 %302, i32* %305, i8* %308, i8* %311), !dbg !1397
  store i64 %312, i64* %24, align 8, !dbg !1383
  %313 = load i64, i64* %21, align 8, !dbg !1398
  %314 = load i64, i64* %24, align 8, !dbg !1400
  %315 = icmp ule i64 %313, %314, !dbg !1401
  %316 = load i32, i32* @x.33
  %317 = load i32, i32* @y.34
  %318 = sub i32 %316, 1
  %319 = mul i32 %316, %318
  %320 = urem i32 %319, 2
  %321 = icmp eq i32 %320, 0
  %322 = icmp slt i32 %317, 10
  %323 = or i1 %321, %322
  br i1 %323, label %originalBBpart2110, label %originalBB94alteredBB

originalBBpart2110:                               ; preds = %originalBB94
  br i1 %315, label %324, label %437, !dbg !1402

324:                                              ; preds = %originalBBpart2110
  %325 = load i64, i64* %24, align 8, !dbg !1403
  %326 = add i64 %325, 1, !dbg !1405
  store i64 %326, i64* %21, align 8, !dbg !1406
  %327 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !1407
  %328 = load i32, i32* %13, align 4, !dbg !1408
  %329 = trunc i64 %326 to i32
  %330 = mul i32 %329, 4
  %331 = add i32 %330, -1
  %332 = mul i32 %331, %331
  %333 = sub i32 %332, %331
  %334 = srem i32 %333, 2
  %335 = mul i32 %334, 3
  %336 = add i32 %335, -2
  %337 = icmp ne i32 %336, -2
  br i1 %337, label %338, label %355

338:                                              ; preds = %324
  %339 = load i32, i32* @x.33
  %340 = load i32, i32* @y.34
  %341 = sub i32 %339, 1
  %342 = mul i32 %339, %341
  %343 = urem i32 %342, 2
  %344 = icmp eq i32 %343, 0
  %345 = icmp slt i32 %340, 10
  %346 = or i1 %344, %345
  br i1 %346, label %originalBB112, label %originalBB112alteredBB

originalBB112:                                    ; preds = %338, %originalBB112alteredBB
  %347 = load i32, i32* @x.33
  %348 = load i32, i32* @y.34
  %349 = sub i32 %347, 1
  %350 = mul i32 %347, %349
  %351 = urem i32 %350, 2
  %352 = icmp eq i32 %351, 0
  %353 = icmp slt i32 %348, 10
  %354 = or i1 %352, %353
  br i1 %354, label %originalBBpart2114, label %originalBB112alteredBB

originalBBpart2114:                               ; preds = %originalBB112
  ret i8* null

355:                                              ; preds = %324
  %356 = load i32, i32* @x.33
  %357 = load i32, i32* @y.34
  %358 = sub i32 %356, 1
  %359 = mul i32 %356, %358
  %360 = urem i32 %359, 2
  %361 = icmp eq i32 %360, 0
  %362 = icmp slt i32 %357, 10
  %363 = or i1 %361, %362
  br i1 %363, label %originalBB116, label %originalBB116alteredBB

originalBB116:                                    ; preds = %355, %originalBB116alteredBB
  %364 = sext i32 %328 to i64, !dbg !1407
  %365 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %327, i64 %364, !dbg !1407
  %366 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %365, i32 0, i32 0, !dbg !1409
  store i64 %326, i64* %366, align 8, !dbg !1410
  %367 = load i8*, i8** %22, align 8, !dbg !1411
  %368 = icmp ne i8* %367, getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0), !dbg !1413
  %369 = load i32, i32* @x.33
  %370 = load i32, i32* @y.34
  %371 = sub i32 %369, 1
  %372 = mul i32 %369, %371
  %373 = urem i32 %372, 2
  %374 = icmp eq i32 %373, 0
  %375 = icmp slt i32 %370, 10
  %376 = or i1 %374, %375
  br i1 %376, label %originalBBpart2118, label %originalBB116alteredBB

originalBBpart2118:                               ; preds = %originalBB116
  br i1 %368, label %377, label %395, !dbg !1414

377:                                              ; preds = %originalBBpart2118
  %378 = load i32, i32* @x.33
  %379 = load i32, i32* @y.34
  %380 = sub i32 %378, 1
  %381 = mul i32 %378, %380
  %382 = urem i32 %381, 2
  %383 = icmp eq i32 %382, 0
  %384 = icmp slt i32 %379, 10
  %385 = or i1 %383, %384
  br i1 %385, label %originalBB120, label %originalBB120alteredBB

originalBB120:                                    ; preds = %377, %originalBB120alteredBB
  %386 = load i8*, i8** %22, align 8, !dbg !1415
  call void @free(i8* %386) #10, !dbg !1416
  %387 = load i32, i32* @x.33
  %388 = load i32, i32* @y.34
  %389 = sub i32 %387, 1
  %390 = mul i32 %387, %389
  %391 = urem i32 %390, 2
  %392 = icmp eq i32 %391, 0
  %393 = icmp slt i32 %388, 10
  %394 = or i1 %392, %393
  br i1 %394, label %originalBBpart2122, label %originalBB120alteredBB

originalBBpart2122:                               ; preds = %originalBB120
  br label %395, !dbg !1416

395:                                              ; preds = %originalBBpart2122, %originalBBpart2118
  %396 = load i32, i32* @x.33
  %397 = load i32, i32* @y.34
  %398 = sub i32 %396, 1
  %399 = mul i32 %396, %398
  %400 = urem i32 %399, 2
  %401 = icmp eq i32 %400, 0
  %402 = icmp slt i32 %397, 10
  %403 = or i1 %401, %402
  br i1 %403, label %originalBB124, label %originalBB124alteredBB

originalBB124:                                    ; preds = %395, %originalBB124alteredBB
  %404 = load i64, i64* %21, align 8, !dbg !1417
  %405 = call noalias i8* @xcharalloc(i64 %404), !dbg !1418
  store i8* %405, i8** %22, align 8, !dbg !1419
  %406 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !1420
  %407 = load i32, i32* %13, align 4, !dbg !1421
  %408 = sext i32 %407 to i64, !dbg !1420
  %409 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %406, i64 %408, !dbg !1420
  %410 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %409, i32 0, i32 1, !dbg !1422
  store i8* %405, i8** %410, align 8, !dbg !1423
  %411 = load i8*, i8** %22, align 8, !dbg !1424
  %412 = load i64, i64* %21, align 8, !dbg !1425
  %413 = load i8*, i8** %14, align 8, !dbg !1426
  %414 = load i64, i64* %15, align 8, !dbg !1427
  %415 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1428
  %416 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %415, i32 0, i32 0, !dbg !1429
  %417 = load i32, i32* %416, align 8, !dbg !1429
  %418 = load i32, i32* %23, align 4, !dbg !1430
  %419 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1431
  %420 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %419, i32 0, i32 2, !dbg !1432
  %421 = getelementptr inbounds [8 x i32], [8 x i32]* %420, i64 0, i64 0, !dbg !1431
  %422 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1433
  %423 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %422, i32 0, i32 3, !dbg !1434
  %424 = load i8*, i8** %423, align 8, !dbg !1434
  %425 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1435
  %426 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %425, i32 0, i32 4, !dbg !1436
  %427 = load i8*, i8** %426, align 8, !dbg !1436
  %428 = call i64 @quotearg_buffer_restyled(i8* %411, i64 %412, i8* %413, i64 %414, i32 %417, i32 %418, i32* %421, i8* %424, i8* %427), !dbg !1437
  %429 = load i32, i32* @x.33
  %430 = load i32, i32* @y.34
  %431 = sub i32 %429, 1
  %432 = mul i32 %429, %431
  %433 = urem i32 %432, 2
  %434 = icmp eq i32 %433, 0
  %435 = icmp slt i32 %430, 10
  %436 = or i1 %434, %435
  br i1 %436, label %originalBBpart2126, label %originalBB124alteredBB

originalBBpart2126:                               ; preds = %originalBB124
  br label %437, !dbg !1438

437:                                              ; preds = %originalBBpart2126, %originalBBpart2110
  %438 = load i32, i32* %17, align 4, !dbg !1439
  %439 = call i32* @__errno_location() #15, !dbg !1440
  store i32 %438, i32* %439, align 4, !dbg !1441
  %440 = mul i32 %438, -3
  %441 = add i32 %440, -1
  %442 = mul i32 %438, 3
  %443 = add i32 %442, -2
  %444 = mul i32 %441, %441
  %445 = mul i32 %443, %443
  %446 = mul i32 %445, 34
  %447 = sub i32 %444, %446
  %448 = add i32 %447, 4
  %449 = icmp ne i32 %448, 4
  br i1 %449, label %467, label %450

450:                                              ; preds = %437
  %451 = load i32, i32* @x.33
  %452 = load i32, i32* @y.34
  %453 = sub i32 %451, 1
  %454 = mul i32 %451, %453
  %455 = urem i32 %454, 2
  %456 = icmp eq i32 %455, 0
  %457 = icmp slt i32 %452, 10
  %458 = or i1 %456, %457
  br i1 %458, label %originalBB128, label %originalBB128alteredBB

originalBB128:                                    ; preds = %450, %originalBB128alteredBB
  %459 = load i32, i32* @x.33
  %460 = load i32, i32* @y.34
  %461 = sub i32 %459, 1
  %462 = mul i32 %459, %461
  %463 = urem i32 %462, 2
  %464 = icmp eq i32 %463, 0
  %465 = icmp slt i32 %460, 10
  %466 = or i1 %464, %465
  br i1 %466, label %originalBBpart2130, label %originalBB128alteredBB

originalBBpart2130:                               ; preds = %originalBB128
  ret i8* null

467:                                              ; preds = %437
  %468 = load i32, i32* @x.33
  %469 = load i32, i32* @y.34
  %470 = sub i32 %468, 1
  %471 = mul i32 %468, %470
  %472 = urem i32 %471, 2
  %473 = icmp eq i32 %472, 0
  %474 = icmp slt i32 %469, 10
  %475 = or i1 %473, %474
  br i1 %475, label %originalBB132, label %originalBB132alteredBB

originalBB132:                                    ; preds = %467, %originalBB132alteredBB
  %476 = load i8*, i8** %22, align 8, !dbg !1442
  %477 = load i32, i32* @x.33
  %478 = load i32, i32* @y.34
  %479 = sub i32 %477, 1
  %480 = mul i32 %477, %479
  %481 = urem i32 %480, 2
  %482 = icmp eq i32 %481, 0
  %483 = icmp slt i32 %478, 10
  %484 = or i1 %482, %483
  br i1 %484, label %originalBBpart2134, label %originalBB132alteredBB

originalBBpart2134:                               ; preds = %originalBB132
  ret i8* %476, !dbg !1443

originalBBalteredBB:                              ; preds = %originalBB, %4
  %485 = alloca i32, align 4
  %486 = alloca i8*, align 8
  %487 = alloca i64, align 8
  %488 = alloca %struct.quoting_options*, align 8
  %489 = alloca i32, align 4
  %490 = alloca %struct.slotvec*, align 8
  %491 = alloca i8, align 1
  %492 = alloca i32, align 4
  %493 = alloca i64, align 8
  %494 = alloca i8*, align 8
  %495 = alloca i32, align 4
  %496 = alloca i64, align 8
  store i32 %0, i32* %485, align 4
  call void @llvm.dbg.declare(metadata i32* %485, metadata !1444, metadata !DIExpression()), !dbg !1301
  store i8* %1, i8** %486, align 8
  call void @llvm.dbg.declare(metadata i8** %486, metadata !1480, metadata !DIExpression()), !dbg !1303
  store i64 %2, i64* %487, align 8
  call void @llvm.dbg.declare(metadata i64* %487, metadata !1481, metadata !DIExpression()), !dbg !1305
  store %struct.quoting_options* %3, %struct.quoting_options** %488, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %488, metadata !1482, metadata !DIExpression()), !dbg !1307
  call void @llvm.dbg.declare(metadata i32* %489, metadata !1483, metadata !DIExpression()), !dbg !1309
  %497 = call i32* @__errno_location() #15, !dbg !1310
  %498 = load i32, i32* %497, align 4, !dbg !1310
  store i32 %498, i32* %489, align 4, !dbg !1309
  call void @llvm.dbg.declare(metadata %struct.slotvec** %490, metadata !1484, metadata !DIExpression()), !dbg !1312
  %499 = load %struct.slotvec*, %struct.slotvec** @slotvec, align 8, !dbg !1313
  store %struct.slotvec* %499, %struct.slotvec** %490, align 8, !dbg !1312
  %500 = load i32, i32* %485, align 4, !dbg !1314
  %501 = icmp slt i32 %500, 0, !dbg !1316
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %39
  %502 = load i32, i32* @nslots, align 4, !dbg !1319
  %_ = sub i32 %502, 4
  %gen = mul i32 %_, 4
  %_2 = sub i32 %502, 4
  %gen3 = mul i32 %_2, 4
  %_4 = sub i32 0, %502
  %gen5 = add i32 %_4, 4
  %503 = mul i32 %502, 4
  %_6 = sub i32 0, %503
  %gen7 = add i32 %_6, 5
  %_8 = sub i32 %503, 5
  %gen9 = mul i32 %_8, 5
  %_10 = sub i32 %503, 5
  %gen11 = mul i32 %_10, 5
  %_12 = sub i32 0, %503
  %gen13 = add i32 %_12, 5
  %_14 = shl i32 %503, 5
  %_15 = sub i32 %503, 5
  %gen16 = mul i32 %_15, 5
  %504 = add i32 %503, 5
  %_17 = sub i32 %504, %504
  %gen18 = mul i32 %_17, %504
  %_19 = sub i32 0, %504
  %gen20 = add i32 %_19, %504
  %_21 = shl i32 %504, %504
  %_22 = sub i32 %504, %504
  %gen23 = mul i32 %_22, %504
  %_24 = shl i32 %504, %504
  %505 = mul i32 %504, %504
  %_25 = shl i32 %505, %504
  %_26 = sub i32 0, %505
  %gen27 = add i32 %_26, %504
  %_28 = sub i32 %505, %504
  %gen29 = mul i32 %_28, %504
  %506 = sub i32 %505, %504
  %_30 = sub i32 %506, 2
  %gen31 = mul i32 %_30, 2
  %_32 = shl i32 %506, 2
  %507 = srem i32 %506, 2
  %_33 = sub i32 %507, 1
  %gen34 = mul i32 %_33, 1
  %_35 = sub i32 0, %507
  %gen36 = add i32 %_35, 1
  %508 = add i32 %507, 1
  %509 = icmp eq i32 %508, 1
  br label %originalBB1

originalBB40alteredBB:                            ; preds = %originalBB40, %65
  %510 = load i32, i32* %13, align 4, !dbg !1321
  %511 = icmp sle i32 %48, %510, !dbg !1322
  br label %originalBB40

originalBB44alteredBB:                            ; preds = %originalBB44, %84
  %512 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !1327
  %513 = icmp eq %struct.slotvec* %512, @slotvec0, !dbg !1328
  %514 = zext i1 %513 to i8, !dbg !1326
  store i8 %514, i8* %19, align 1, !dbg !1326
  call void @llvm.dbg.declare(metadata !4, metadata !1485, metadata !DIExpression()), !dbg !1330
  store i32 2147483646, i32* %20, align 4, !dbg !1330
  %515 = load i32, i32* %20, align 4, !dbg !1331
  %516 = load i32, i32* %13, align 4, !dbg !1333
  %517 = icmp slt i32 %515, %516, !dbg !1334
  br label %originalBB44

originalBB48alteredBB:                            ; preds = %originalBB48, %107
  call void @xalloc_die() #14, !dbg !1336
  br label %originalBB48

originalBB52alteredBB:                            ; preds = %originalBB52, %124
  %518 = load i8, i8* %19, align 1, !dbg !1337
  %519 = trunc i8 %518 to i1, !dbg !1337
  br label %originalBB52

originalBB56alteredBB:                            ; preds = %originalBB56, %143
  br label %originalBB56

originalBB60alteredBB:                            ; preds = %originalBB60, %160
  %520 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !1338
  br label %originalBB60

originalBB64alteredBB:                            ; preds = %originalBB64, %199
  br label %originalBB64

originalBB68alteredBB:                            ; preds = %originalBB68, %221
  %521 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !1349
  %522 = bitcast %struct.slotvec* %521 to i8*, !dbg !1350
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %522, i8* align 8 bitcast (%struct.slotvec* @slotvec0 to i8*), i64 16, i1 false), !dbg !1350
  br label %originalBB68

originalBB72alteredBB:                            ; preds = %originalBB72, %240
  %523 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !1352
  %524 = load i32, i32* @nslots, align 4, !dbg !1353
  %525 = sext i32 %524 to i64, !dbg !1354
  %526 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %523, i64 %525, !dbg !1354
  %527 = bitcast %struct.slotvec* %526 to i8*, !dbg !1355
  %528 = load i32, i32* %13, align 4, !dbg !1356
  %529 = add nsw i32 %528, 1, !dbg !1357
  %530 = load i32, i32* @nslots, align 4, !dbg !1358
  %_73 = sub i32 %529, %530
  %gen74 = mul i32 %_73, %530
  %531 = sub nsw i32 %529, %530, !dbg !1359
  %532 = sext i32 %531 to i64, !dbg !1360
  %_75 = sub i64 %532, 16
  %gen76 = mul i64 %_75, 16
  %_77 = shl i64 %532, 16
  %_78 = sub i64 %532, 16
  %gen79 = mul i64 %_78, 16
  %_80 = shl i64 %532, 16
  %_81 = shl i64 %532, 16
  %_82 = shl i64 %532, 16
  %533 = mul i64 %532, 16, !dbg !1361
  call void @llvm.memset.p0i8.i64(i8* align 8 %527, i8 0, i64 %533, i1 false), !dbg !1355
  %534 = load i32, i32* %13, align 4, !dbg !1362
  %_83 = sub i32 %534, 1
  %gen84 = mul i32 %_83, 1
  %_85 = sub i32 0, %534
  %gen86 = add i32 %_85, 1
  %_87 = sub i32 0, %534
  %gen88 = add i32 %_87, 1
  %_89 = sub i32 0, %534
  %gen90 = add i32 %_89, 1
  %535 = add nsw i32 %534, 1, !dbg !1363
  store i32 %535, i32* @nslots, align 4, !dbg !1364
  br label %originalBB72

originalBB94alteredBB:                            ; preds = %originalBB94, %270
  %536 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !1369
  %537 = load i32, i32* %13, align 4, !dbg !1370
  %538 = sext i32 %537 to i64, !dbg !1369
  %539 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %536, i64 %538, !dbg !1369
  %540 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %539, i32 0, i32 0, !dbg !1371
  %541 = load i64, i64* %540, align 8, !dbg !1371
  store i64 %541, i64* %21, align 8, !dbg !1368
  call void @llvm.dbg.declare(metadata !4, metadata !1523, metadata !DIExpression()), !dbg !1373
  %542 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !1374
  %543 = load i32, i32* %13, align 4, !dbg !1375
  %544 = sext i32 %543 to i64, !dbg !1374
  %545 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %542, i64 %544, !dbg !1374
  %546 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %545, i32 0, i32 1, !dbg !1376
  %547 = load i8*, i8** %546, align 8, !dbg !1376
  store i8* %547, i8** %22, align 8, !dbg !1373
  call void @llvm.dbg.declare(metadata !4, metadata !1560, metadata !DIExpression()), !dbg !1378
  %548 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1379
  %549 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %548, i32 0, i32 1, !dbg !1380
  %550 = load i32, i32* %549, align 4, !dbg !1380
  %_95 = sub i32 %550, 1
  %gen96 = mul i32 %_95, 1
  %_97 = sub i32 0, %550
  %gen98 = add i32 %_97, 1
  %_99 = sub i32 %550, 1
  %gen100 = mul i32 %_99, 1
  %_101 = sub i32 0, %550
  %gen102 = add i32 %_101, 1
  %_103 = sub i32 %550, 1
  %gen104 = mul i32 %_103, 1
  %_105 = sub i32 0, %550
  %gen106 = add i32 %_105, 1
  %_107 = sub i32 %550, 1
  %gen108 = mul i32 %_107, 1
  %551 = or i32 %550, 1, !dbg !1381
  store i32 %551, i32* %23, align 4, !dbg !1378
  call void @llvm.dbg.declare(metadata !4, metadata !1561, metadata !DIExpression()), !dbg !1383
  %552 = load i8*, i8** %22, align 8, !dbg !1384
  %553 = load i64, i64* %21, align 8, !dbg !1385
  %554 = load i8*, i8** %14, align 8, !dbg !1386
  %555 = load i64, i64* %15, align 8, !dbg !1387
  %556 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1388
  %557 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %556, i32 0, i32 0, !dbg !1389
  %558 = load i32, i32* %557, align 8, !dbg !1389
  %559 = load i32, i32* %23, align 4, !dbg !1390
  %560 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1391
  %561 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %560, i32 0, i32 2, !dbg !1392
  %562 = getelementptr inbounds [8 x i32], [8 x i32]* %561, i64 0, i64 0, !dbg !1391
  %563 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1393
  %564 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %563, i32 0, i32 3, !dbg !1394
  %565 = load i8*, i8** %564, align 8, !dbg !1394
  %566 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1395
  %567 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %566, i32 0, i32 4, !dbg !1396
  %568 = load i8*, i8** %567, align 8, !dbg !1396
  %569 = call i64 @quotearg_buffer_restyled(i8* %552, i64 %553, i8* %554, i64 %555, i32 %558, i32 %559, i32* %562, i8* %565, i8* %568), !dbg !1397
  store i64 %569, i64* %24, align 8, !dbg !1383
  %570 = load i64, i64* %21, align 8, !dbg !1398
  %571 = load i64, i64* %24, align 8, !dbg !1400
  %572 = icmp ule i64 %570, %571, !dbg !1401
  br label %originalBB94

originalBB112alteredBB:                           ; preds = %originalBB112, %338
  br label %originalBB112

originalBB116alteredBB:                           ; preds = %originalBB116, %355
  %573 = sext i32 %328 to i64, !dbg !1407
  %574 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %327, i64 %573, !dbg !1407
  %575 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %574, i32 0, i32 0, !dbg !1409
  store i64 %326, i64* %575, align 8, !dbg !1410
  %576 = load i8*, i8** %22, align 8, !dbg !1411
  %577 = icmp ne i8* %576, getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0), !dbg !1413
  br label %originalBB116

originalBB120alteredBB:                           ; preds = %originalBB120, %377
  %578 = load i8*, i8** %22, align 8, !dbg !1415
  call void @free(i8* %578) #10, !dbg !1416
  br label %originalBB120

originalBB124alteredBB:                           ; preds = %originalBB124, %395
  %579 = load i64, i64* %21, align 8, !dbg !1417
  %580 = call noalias i8* @xcharalloc(i64 %579), !dbg !1418
  store i8* %580, i8** %22, align 8, !dbg !1419
  %581 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !1420
  %582 = load i32, i32* %13, align 4, !dbg !1421
  %583 = sext i32 %582 to i64, !dbg !1420
  %584 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %581, i64 %583, !dbg !1420
  %585 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %584, i32 0, i32 1, !dbg !1422
  store i8* %580, i8** %585, align 8, !dbg !1423
  %586 = load i8*, i8** %22, align 8, !dbg !1424
  %587 = load i64, i64* %21, align 8, !dbg !1425
  %588 = load i8*, i8** %14, align 8, !dbg !1426
  %589 = load i64, i64* %15, align 8, !dbg !1427
  %590 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1428
  %591 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %590, i32 0, i32 0, !dbg !1429
  %592 = load i32, i32* %591, align 8, !dbg !1429
  %593 = load i32, i32* %23, align 4, !dbg !1430
  %594 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1431
  %595 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %594, i32 0, i32 2, !dbg !1432
  %596 = getelementptr inbounds [8 x i32], [8 x i32]* %595, i64 0, i64 0, !dbg !1431
  %597 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1433
  %598 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %597, i32 0, i32 3, !dbg !1434
  %599 = load i8*, i8** %598, align 8, !dbg !1434
  %600 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1435
  %601 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %600, i32 0, i32 4, !dbg !1436
  %602 = load i8*, i8** %601, align 8, !dbg !1436
  %603 = call i64 @quotearg_buffer_restyled(i8* %586, i64 %587, i8* %588, i64 %589, i32 %592, i32 %593, i32* %596, i8* %599, i8* %602), !dbg !1437
  br label %originalBB124

originalBB128alteredBB:                           ; preds = %originalBB128, %450
  br label %originalBB128

originalBB132alteredBB:                           ; preds = %originalBB132, %467
  %604 = load i8*, i8** %22, align 8, !dbg !1442
  br label %originalBB132
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @quotearg_buffer_restyled(i8*, i64, i8*, i64, i32, i32, i32*, i8*, i8*) #4 !dbg !1562 {
  %10 = load i32, i32* @x.35
  %11 = load i32, i32* @y.36
  %12 = sub i32 %10, 1
  %13 = mul i32 %10, %12
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  %16 = icmp slt i32 %11, 10
  %17 = or i1 %15, %16
  br i1 %17, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %9, %originalBBalteredBB
  %18 = alloca i64, align 8
  %19 = alloca i8*, align 8
  %20 = alloca i64, align 8
  %21 = alloca i8*, align 8
  %22 = alloca i64, align 8
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32*, align 8
  %26 = alloca i8*, align 8
  %27 = alloca i8*, align 8
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  %30 = alloca i64, align 8
  %31 = alloca i8*, align 8
  %32 = alloca i64, align 8
  %33 = alloca i8, align 1
  %34 = alloca i8, align 1
  %35 = alloca i8, align 1
  %36 = alloca i8, align 1
  %37 = alloca i8, align 1
  %38 = alloca i8, align 1
  %39 = alloca i8, align 1
  %40 = alloca i8, align 1
  %41 = alloca i8, align 1
  %42 = alloca i8, align 1
  %43 = alloca i8, align 1
  %44 = alloca i64, align 8
  %45 = alloca i8, align 1
  %46 = alloca %struct.__mbstate_t, align 4
  %47 = alloca i32, align 4
  %48 = alloca i64, align 8
  %49 = alloca i64, align 8
  %50 = alloca i64, align 8
  store i8* %0, i8** %19, align 8
  call void @llvm.dbg.declare(metadata i8** %19, metadata !1567, metadata !DIExpression()), !dbg !1568
  store i64 %1, i64* %20, align 8
  call void @llvm.dbg.declare(metadata i64* %20, metadata !1569, metadata !DIExpression()), !dbg !1570
  store i8* %2, i8** %21, align 8
  call void @llvm.dbg.declare(metadata i8** %21, metadata !1571, metadata !DIExpression()), !dbg !1572
  store i64 %3, i64* %22, align 8
  call void @llvm.dbg.declare(metadata i64* %22, metadata !1573, metadata !DIExpression()), !dbg !1574
  store i32 %4, i32* %23, align 4
  call void @llvm.dbg.declare(metadata i32* %23, metadata !1575, metadata !DIExpression()), !dbg !1576
  store i32 %5, i32* %24, align 4
  call void @llvm.dbg.declare(metadata i32* %24, metadata !1577, metadata !DIExpression()), !dbg !1578
  store i32* %6, i32** %25, align 8
  call void @llvm.dbg.declare(metadata i32** %25, metadata !1579, metadata !DIExpression()), !dbg !1580
  store i8* %7, i8** %26, align 8
  call void @llvm.dbg.declare(metadata i8** %26, metadata !1581, metadata !DIExpression()), !dbg !1582
  store i8* %8, i8** %27, align 8
  call void @llvm.dbg.declare(metadata i8** %27, metadata !1583, metadata !DIExpression()), !dbg !1584
  call void @llvm.dbg.declare(metadata i64* %28, metadata !1585, metadata !DIExpression()), !dbg !1586
  call void @llvm.dbg.declare(metadata i64* %29, metadata !1587, metadata !DIExpression()), !dbg !1588
  store i64 0, i64* %29, align 8, !dbg !1588
  call void @llvm.dbg.declare(metadata i64* %30, metadata !1589, metadata !DIExpression()), !dbg !1590
  store i64 0, i64* %30, align 8, !dbg !1590
  call void @llvm.dbg.declare(metadata i8** %31, metadata !1591, metadata !DIExpression()), !dbg !1592
  store i8* null, i8** %31, align 8, !dbg !1592
  call void @llvm.dbg.declare(metadata i64* %32, metadata !1593, metadata !DIExpression()), !dbg !1594
  store i64 0, i64* %32, align 8, !dbg !1594
  call void @llvm.dbg.declare(metadata i8* %33, metadata !1595, metadata !DIExpression()), !dbg !1596
  store i8 0, i8* %33, align 1, !dbg !1596
  call void @llvm.dbg.declare(metadata i8* %34, metadata !1597, metadata !DIExpression()), !dbg !1598
  %51 = call i64 @__ctype_get_mb_cur_max() #10, !dbg !1599
  %52 = icmp eq i64 %51, 1, !dbg !1600
  %53 = zext i1 %52 to i8, !dbg !1598
  store i8 %53, i8* %34, align 1, !dbg !1598
  call void @llvm.dbg.declare(metadata i8* %35, metadata !1601, metadata !DIExpression()), !dbg !1602
  %54 = load i32, i32* %24, align 4, !dbg !1603
  %55 = and i32 %54, 2, !dbg !1604
  %56 = icmp ne i32 %55, 0, !dbg !1605
  %57 = zext i1 %56 to i8, !dbg !1602
  store i8 %57, i8* %35, align 1, !dbg !1602
  call void @llvm.dbg.declare(metadata i8* %36, metadata !1606, metadata !DIExpression()), !dbg !1607
  store i8 0, i8* %36, align 1, !dbg !1607
  call void @llvm.dbg.declare(metadata i8* %37, metadata !1608, metadata !DIExpression()), !dbg !1609
  store i8 0, i8* %37, align 1, !dbg !1609
  call void @llvm.dbg.declare(metadata i8* %38, metadata !1610, metadata !DIExpression()), !dbg !1611
  store i8 1, i8* %38, align 1, !dbg !1611
  %58 = load i32, i32* @x.35
  %59 = load i32, i32* @y.36
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %66, !dbg !1612

66:                                               ; preds = %4537, %originalBBpart2
  call void @llvm.dbg.label(metadata !1613), !dbg !1614
  %67 = load i32, i32* %23, align 4, !dbg !1615
  switch i32 %67, label %488 [
    i32 6, label %68
    i32 5, label %69
    i32 7, label %134
    i32 8, label %151
    i32 9, label %151
    i32 10, label %151
    i32 3, label %351
    i32 1, label %368
    i32 4, label %385
    i32 2, label %390
    i32 0, label %471
  ], !dbg !1616

68:                                               ; preds = %66
  store i32 5, i32* %23, align 4, !dbg !1617
  store i8 1, i8* %35, align 1, !dbg !1619
  br label %69, !dbg !1620

69:                                               ; preds = %68, %66
  %70 = load i8, i8* %35, align 1, !dbg !1621
  %71 = trunc i8 %70 to i1, !dbg !1621
  br i1 %71, label %133, label %72, !dbg !1623

72:                                               ; preds = %69
  br label %73, !dbg !1624

73:                                               ; preds = %72
  %74 = load i64, i64* %29, align 8, !dbg !1625
  %75 = load i64, i64* %20, align 8, !dbg !1625
  %76 = icmp ult i64 %74, %75, !dbg !1625
  br i1 %76, label %77, label %97, !dbg !1628

77:                                               ; preds = %73
  %78 = load i32, i32* @x.35
  %79 = load i32, i32* @y.36
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBB3, label %originalBB3alteredBB

originalBB3:                                      ; preds = %77, %originalBB3alteredBB
  %86 = load i8*, i8** %19, align 8, !dbg !1625
  %87 = load i64, i64* %29, align 8, !dbg !1625
  %88 = getelementptr inbounds i8, i8* %86, i64 %87, !dbg !1625
  store i8 34, i8* %88, align 1, !dbg !1625
  %89 = load i32, i32* @x.35
  %90 = load i32, i32* @y.36
  %91 = sub i32 %89, 1
  %92 = mul i32 %89, %91
  %93 = urem i32 %92, 2
  %94 = icmp eq i32 %93, 0
  %95 = icmp slt i32 %90, 10
  %96 = or i1 %94, %95
  br i1 %96, label %originalBBpart25, label %originalBB3alteredBB

originalBBpart25:                                 ; preds = %originalBB3
  br label %97, !dbg !1625

97:                                               ; preds = %originalBBpart25, %73
  %98 = load i32, i32* @x.35
  %99 = load i32, i32* @y.36
  %100 = sub i32 %98, 1
  %101 = mul i32 %98, %100
  %102 = urem i32 %101, 2
  %103 = icmp eq i32 %102, 0
  %104 = icmp slt i32 %99, 10
  %105 = or i1 %103, %104
  br i1 %105, label %originalBB7, label %originalBB7alteredBB

originalBB7:                                      ; preds = %97, %originalBB7alteredBB
  %106 = load i64, i64* %29, align 8, !dbg !1628
  %107 = add i64 %106, 1, !dbg !1628
  store i64 %107, i64* %29, align 8, !dbg !1628
  %108 = load i32, i32* @x.35
  %109 = load i32, i32* @y.36
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBBpart220, label %originalBB7alteredBB

originalBBpart220:                                ; preds = %originalBB7
  br label %116, !dbg !1628

116:                                              ; preds = %originalBBpart220
  %117 = load i32, i32* @x.35
  %118 = load i32, i32* @y.36
  %119 = sub i32 %117, 1
  %120 = mul i32 %117, %119
  %121 = urem i32 %120, 2
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %122, %123
  br i1 %124, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %116, %originalBB22alteredBB
  %125 = load i32, i32* @x.35
  %126 = load i32, i32* @y.36
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %133, !dbg !1628

133:                                              ; preds = %originalBBpart224, %69
  store i8 1, i8* %33, align 1, !dbg !1629
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.63, i64 0, i64 0), i8** %31, align 8, !dbg !1630
  store i64 1, i64* %32, align 8, !dbg !1631
  br label %505, !dbg !1632

134:                                              ; preds = %66
  %135 = load i32, i32* @x.35
  %136 = load i32, i32* @y.36
  %137 = sub i32 %135, 1
  %138 = mul i32 %135, %137
  %139 = urem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %140, %141
  br i1 %142, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %134, %originalBB26alteredBB
  store i8 1, i8* %33, align 1, !dbg !1633
  store i8 0, i8* %35, align 1, !dbg !1634
  %143 = load i32, i32* @x.35
  %144 = load i32, i32* @y.36
  %145 = sub i32 %143, 1
  %146 = mul i32 %143, %145
  %147 = urem i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %148, %149
  br i1 %150, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %505, !dbg !1635

151:                                              ; preds = %66, %66, %66
  %152 = load i32, i32* %23, align 4, !dbg !1636
  %153 = icmp ne i32 %152, 10, !dbg !1639
  br i1 %153, label %154, label %175, !dbg !1640

154:                                              ; preds = %151
  %155 = load i32, i32* @x.35
  %156 = load i32, i32* @y.36
  %157 = sub i32 %155, 1
  %158 = mul i32 %155, %157
  %159 = urem i32 %158, 2
  %160 = icmp eq i32 %159, 0
  %161 = icmp slt i32 %156, 10
  %162 = or i1 %160, %161
  br i1 %162, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %154, %originalBB30alteredBB
  %163 = load i32, i32* %23, align 4, !dbg !1641
  %164 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.64, i64 0, i64 0), i32 %163), !dbg !1643
  store i8* %164, i8** %26, align 8, !dbg !1644
  %165 = load i32, i32* %23, align 4, !dbg !1645
  %166 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.65, i64 0, i64 0), i32 %165), !dbg !1646
  store i8* %166, i8** %27, align 8, !dbg !1647
  %167 = load i32, i32* @x.35
  %168 = load i32, i32* @y.36
  %169 = sub i32 %167, 1
  %170 = mul i32 %167, %169
  %171 = urem i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %172, %173
  br i1 %174, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %175, !dbg !1648

175:                                              ; preds = %originalBBpart232, %151
  %176 = load i32, i32* @x.35
  %177 = load i32, i32* @y.36
  %178 = sub i32 %176, 1
  %179 = mul i32 %176, %178
  %180 = urem i32 %179, 2
  %181 = icmp eq i32 %180, 0
  %182 = icmp slt i32 %177, 10
  %183 = or i1 %181, %182
  br i1 %183, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %175, %originalBB34alteredBB
  %184 = load i8, i8* %35, align 1, !dbg !1649
  %185 = trunc i8 %184 to i1, !dbg !1649
  %186 = load i32, i32* @x.35
  %187 = load i32, i32* @y.36
  %188 = sub i32 %186, 1
  %189 = mul i32 %186, %188
  %190 = urem i32 %189, 2
  %191 = icmp eq i32 %190, 0
  %192 = icmp slt i32 %187, 10
  %193 = or i1 %191, %192
  br i1 %193, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br i1 %185, label %347, label %194, !dbg !1651

194:                                              ; preds = %originalBBpart236
  %195 = load i32, i32* @x.35
  %196 = load i32, i32* @y.36
  %197 = sub i32 %195, 1
  %198 = mul i32 %195, %197
  %199 = urem i32 %198, 2
  %200 = icmp eq i32 %199, 0
  %201 = icmp slt i32 %196, 10
  %202 = or i1 %200, %201
  br i1 %202, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %194, %originalBB38alteredBB
  %203 = load i8*, i8** %26, align 8, !dbg !1652
  store i8* %203, i8** %31, align 8, !dbg !1654
  %204 = load i32, i32* @x.35
  %205 = load i32, i32* @y.36
  %206 = sub i32 %204, 1
  %207 = mul i32 %204, %206
  %208 = urem i32 %207, 2
  %209 = icmp eq i32 %208, 0
  %210 = icmp slt i32 %205, 10
  %211 = or i1 %209, %210
  br i1 %211, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br label %212, !dbg !1655

212:                                              ; preds = %originalBBpart269, %originalBBpart240
  %213 = load i32, i32* @x.35
  %214 = load i32, i32* @y.36
  %215 = sub i32 %213, 1
  %216 = mul i32 %213, %215
  %217 = urem i32 %216, 2
  %218 = icmp eq i32 %217, 0
  %219 = icmp slt i32 %214, 10
  %220 = or i1 %218, %219
  br i1 %220, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %212, %originalBB42alteredBB
  %221 = load i8*, i8** %31, align 8, !dbg !1656
  %222 = load i8, i8* %221, align 1, !dbg !1658
  %223 = icmp ne i8 %222, 0, !dbg !1659
  %224 = load i32, i32* @x.35
  %225 = load i32, i32* @y.36
  %226 = sub i32 %224, 1
  %227 = mul i32 %224, %226
  %228 = urem i32 %227, 2
  %229 = icmp eq i32 %228, 0
  %230 = icmp slt i32 %225, 10
  %231 = or i1 %229, %230
  br i1 %231, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br i1 %223, label %232, label %330, !dbg !1659

232:                                              ; preds = %originalBBpart244
  %233 = load i32, i32* @x.35
  %234 = load i32, i32* @y.36
  %235 = sub i32 %233, 1
  %236 = mul i32 %233, %235
  %237 = urem i32 %236, 2
  %238 = icmp eq i32 %237, 0
  %239 = icmp slt i32 %234, 10
  %240 = or i1 %238, %239
  br i1 %240, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %232, %originalBB46alteredBB
  %241 = load i32, i32* @x.35
  %242 = load i32, i32* @y.36
  %243 = sub i32 %241, 1
  %244 = mul i32 %241, %243
  %245 = urem i32 %244, 2
  %246 = icmp eq i32 %245, 0
  %247 = icmp slt i32 %242, 10
  %248 = or i1 %246, %247
  br i1 %248, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br label %249, !dbg !1660

249:                                              ; preds = %originalBBpart248
  %250 = load i64, i64* %29, align 8, !dbg !1661
  %251 = load i64, i64* %20, align 8, !dbg !1661
  %252 = icmp ult i64 %250, %251, !dbg !1661
  br i1 %252, label %253, label %275, !dbg !1664

253:                                              ; preds = %249
  %254 = load i32, i32* @x.35
  %255 = load i32, i32* @y.36
  %256 = sub i32 %254, 1
  %257 = mul i32 %254, %256
  %258 = urem i32 %257, 2
  %259 = icmp eq i32 %258, 0
  %260 = icmp slt i32 %255, 10
  %261 = or i1 %259, %260
  br i1 %261, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %253, %originalBB50alteredBB
  %262 = load i8*, i8** %31, align 8, !dbg !1661
  %263 = load i8, i8* %262, align 1, !dbg !1661
  %264 = load i8*, i8** %19, align 8, !dbg !1661
  %265 = load i64, i64* %29, align 8, !dbg !1661
  %266 = getelementptr inbounds i8, i8* %264, i64 %265, !dbg !1661
  store i8 %263, i8* %266, align 1, !dbg !1661
  %267 = load i32, i32* @x.35
  %268 = load i32, i32* @y.36
  %269 = sub i32 %267, 1
  %270 = mul i32 %267, %269
  %271 = urem i32 %270, 2
  %272 = icmp eq i32 %271, 0
  %273 = icmp slt i32 %268, 10
  %274 = or i1 %272, %273
  br i1 %274, label %originalBBpart252, label %originalBB50alteredBB

originalBBpart252:                                ; preds = %originalBB50
  br label %275, !dbg !1661

275:                                              ; preds = %originalBBpart252, %249
  %276 = load i32, i32* @x.35
  %277 = load i32, i32* @y.36
  %278 = sub i32 %276, 1
  %279 = mul i32 %276, %278
  %280 = urem i32 %279, 2
  %281 = icmp eq i32 %280, 0
  %282 = icmp slt i32 %277, 10
  %283 = or i1 %281, %282
  br i1 %283, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %275, %originalBB54alteredBB
  %284 = load i64, i64* %29, align 8, !dbg !1664
  %285 = add i64 %284, 1, !dbg !1664
  store i64 %285, i64* %29, align 8, !dbg !1664
  %286 = load i32, i32* @x.35
  %287 = load i32, i32* @y.36
  %288 = sub i32 %286, 1
  %289 = mul i32 %286, %288
  %290 = urem i32 %289, 2
  %291 = icmp eq i32 %290, 0
  %292 = icmp slt i32 %287, 10
  %293 = or i1 %291, %292
  br i1 %293, label %originalBBpart261, label %originalBB54alteredBB

originalBBpart261:                                ; preds = %originalBB54
  br label %294, !dbg !1664

294:                                              ; preds = %originalBBpart261
  %295 = load i32, i32* @x.35
  %296 = load i32, i32* @y.36
  %297 = sub i32 %295, 1
  %298 = mul i32 %295, %297
  %299 = urem i32 %298, 2
  %300 = icmp eq i32 %299, 0
  %301 = icmp slt i32 %296, 10
  %302 = or i1 %300, %301
  br i1 %302, label %originalBB63, label %originalBB63alteredBB

originalBB63:                                     ; preds = %294, %originalBB63alteredBB
  %303 = load i32, i32* @x.35
  %304 = load i32, i32* @y.36
  %305 = sub i32 %303, 1
  %306 = mul i32 %303, %305
  %307 = urem i32 %306, 2
  %308 = icmp eq i32 %307, 0
  %309 = icmp slt i32 %304, 10
  %310 = or i1 %308, %309
  br i1 %310, label %originalBBpart265, label %originalBB63alteredBB

originalBBpart265:                                ; preds = %originalBB63
  br label %311, !dbg !1664

311:                                              ; preds = %originalBBpart265
  %312 = load i32, i32* @x.35
  %313 = load i32, i32* @y.36
  %314 = sub i32 %312, 1
  %315 = mul i32 %312, %314
  %316 = urem i32 %315, 2
  %317 = icmp eq i32 %316, 0
  %318 = icmp slt i32 %313, 10
  %319 = or i1 %317, %318
  br i1 %319, label %originalBB67, label %originalBB67alteredBB

originalBB67:                                     ; preds = %311, %originalBB67alteredBB
  %320 = load i8*, i8** %31, align 8, !dbg !1665
  %321 = getelementptr inbounds i8, i8* %320, i32 1, !dbg !1665
  store i8* %321, i8** %31, align 8, !dbg !1665
  %322 = load i32, i32* @x.35
  %323 = load i32, i32* @y.36
  %324 = sub i32 %322, 1
  %325 = mul i32 %322, %324
  %326 = urem i32 %325, 2
  %327 = icmp eq i32 %326, 0
  %328 = icmp slt i32 %323, 10
  %329 = or i1 %327, %328
  br i1 %329, label %originalBBpart269, label %originalBB67alteredBB

originalBBpart269:                                ; preds = %originalBB67
  br label %212, !dbg !1666, !llvm.loop !1667

330:                                              ; preds = %originalBBpart244
  %331 = load i32, i32* @x.35
  %332 = load i32, i32* @y.36
  %333 = sub i32 %331, 1
  %334 = mul i32 %331, %333
  %335 = urem i32 %334, 2
  %336 = icmp eq i32 %335, 0
  %337 = icmp slt i32 %332, 10
  %338 = or i1 %336, %337
  br i1 %338, label %originalBB71, label %originalBB71alteredBB

originalBB71:                                     ; preds = %330, %originalBB71alteredBB
  %339 = load i32, i32* @x.35
  %340 = load i32, i32* @y.36
  %341 = sub i32 %339, 1
  %342 = mul i32 %339, %341
  %343 = urem i32 %342, 2
  %344 = icmp eq i32 %343, 0
  %345 = icmp slt i32 %340, 10
  %346 = or i1 %344, %345
  br i1 %346, label %originalBBpart273, label %originalBB71alteredBB

originalBBpart273:                                ; preds = %originalBB71
  br label %347, !dbg !1668

347:                                              ; preds = %originalBBpart273, %originalBBpart236
  store i8 1, i8* %33, align 1, !dbg !1669
  %348 = load i8*, i8** %27, align 8, !dbg !1670
  store i8* %348, i8** %31, align 8, !dbg !1671
  %349 = load i8*, i8** %31, align 8, !dbg !1672
  %350 = call i64 @strlen(i8* %349) #13, !dbg !1673
  store i64 %350, i64* %32, align 8, !dbg !1674
  br label %505, !dbg !1675

351:                                              ; preds = %66
  %352 = load i32, i32* @x.35
  %353 = load i32, i32* @y.36
  %354 = sub i32 %352, 1
  %355 = mul i32 %352, %354
  %356 = urem i32 %355, 2
  %357 = icmp eq i32 %356, 0
  %358 = icmp slt i32 %353, 10
  %359 = or i1 %357, %358
  br i1 %359, label %originalBB75, label %originalBB75alteredBB

originalBB75:                                     ; preds = %351, %originalBB75alteredBB
  store i8 1, i8* %33, align 1, !dbg !1676
  %360 = load i32, i32* @x.35
  %361 = load i32, i32* @y.36
  %362 = sub i32 %360, 1
  %363 = mul i32 %360, %362
  %364 = urem i32 %363, 2
  %365 = icmp eq i32 %364, 0
  %366 = icmp slt i32 %361, 10
  %367 = or i1 %365, %366
  br i1 %367, label %originalBBpart277, label %originalBB75alteredBB

originalBBpart277:                                ; preds = %originalBB75
  br label %368, !dbg !1677

368:                                              ; preds = %originalBBpart277, %66
  %369 = load i32, i32* @x.35
  %370 = load i32, i32* @y.36
  %371 = sub i32 %369, 1
  %372 = mul i32 %369, %371
  %373 = urem i32 %372, 2
  %374 = icmp eq i32 %373, 0
  %375 = icmp slt i32 %370, 10
  %376 = or i1 %374, %375
  br i1 %376, label %originalBB79, label %originalBB79alteredBB

originalBB79:                                     ; preds = %368, %originalBB79alteredBB
  store i8 1, i8* %35, align 1, !dbg !1678
  %377 = load i32, i32* @x.35
  %378 = load i32, i32* @y.36
  %379 = sub i32 %377, 1
  %380 = mul i32 %377, %379
  %381 = urem i32 %380, 2
  %382 = icmp eq i32 %381, 0
  %383 = icmp slt i32 %378, 10
  %384 = or i1 %382, %383
  br i1 %384, label %originalBBpart281, label %originalBB79alteredBB

originalBBpart281:                                ; preds = %originalBB79
  br label %385, !dbg !1679

385:                                              ; preds = %originalBBpart281, %66
  %386 = load i8, i8* %35, align 1, !dbg !1680
  %387 = trunc i8 %386 to i1, !dbg !1680
  br i1 %387, label %389, label %388, !dbg !1682

388:                                              ; preds = %385
  store i8 1, i8* %33, align 1, !dbg !1683
  br label %389, !dbg !1684

389:                                              ; preds = %388, %385
  br label %390, !dbg !1685

390:                                              ; preds = %389, %66
  store i32 2, i32* %23, align 4, !dbg !1686
  %391 = load i8, i8* %35, align 1, !dbg !1687
  %392 = trunc i8 %391 to i1, !dbg !1687
  br i1 %392, label %470, label %393, !dbg !1689

393:                                              ; preds = %390
  %394 = load i32, i32* @x.35
  %395 = load i32, i32* @y.36
  %396 = sub i32 %394, 1
  %397 = mul i32 %394, %396
  %398 = urem i32 %397, 2
  %399 = icmp eq i32 %398, 0
  %400 = icmp slt i32 %395, 10
  %401 = or i1 %399, %400
  br i1 %401, label %originalBB83, label %originalBB83alteredBB

originalBB83:                                     ; preds = %393, %originalBB83alteredBB
  %402 = load i32, i32* @x.35
  %403 = load i32, i32* @y.36
  %404 = sub i32 %402, 1
  %405 = mul i32 %402, %404
  %406 = urem i32 %405, 2
  %407 = icmp eq i32 %406, 0
  %408 = icmp slt i32 %403, 10
  %409 = or i1 %407, %408
  br i1 %409, label %originalBBpart285, label %originalBB83alteredBB

originalBBpart285:                                ; preds = %originalBB83
  br label %410, !dbg !1690

410:                                              ; preds = %originalBBpart285
  %411 = load i32, i32* @x.35
  %412 = load i32, i32* @y.36
  %413 = sub i32 %411, 1
  %414 = mul i32 %411, %413
  %415 = urem i32 %414, 2
  %416 = icmp eq i32 %415, 0
  %417 = icmp slt i32 %412, 10
  %418 = or i1 %416, %417
  br i1 %418, label %originalBB87, label %originalBB87alteredBB

originalBB87:                                     ; preds = %410, %originalBB87alteredBB
  %419 = load i64, i64* %29, align 8, !dbg !1691
  %420 = load i64, i64* %20, align 8, !dbg !1691
  %421 = icmp ult i64 %419, %420, !dbg !1691
  %422 = load i32, i32* @x.35
  %423 = load i32, i32* @y.36
  %424 = sub i32 %422, 1
  %425 = mul i32 %422, %424
  %426 = urem i32 %425, 2
  %427 = icmp eq i32 %426, 0
  %428 = icmp slt i32 %423, 10
  %429 = or i1 %427, %428
  br i1 %429, label %originalBBpart289, label %originalBB87alteredBB

originalBBpart289:                                ; preds = %originalBB87
  br i1 %421, label %430, label %434, !dbg !1694

430:                                              ; preds = %originalBBpart289
  %431 = load i8*, i8** %19, align 8, !dbg !1691
  %432 = load i64, i64* %29, align 8, !dbg !1691
  %433 = getelementptr inbounds i8, i8* %431, i64 %432, !dbg !1691
  store i8 39, i8* %433, align 1, !dbg !1691
  br label %434, !dbg !1691

434:                                              ; preds = %430, %originalBBpart289
  %435 = load i32, i32* @x.35
  %436 = load i32, i32* @y.36
  %437 = sub i32 %435, 1
  %438 = mul i32 %435, %437
  %439 = urem i32 %438, 2
  %440 = icmp eq i32 %439, 0
  %441 = icmp slt i32 %436, 10
  %442 = or i1 %440, %441
  br i1 %442, label %originalBB91, label %originalBB91alteredBB

originalBB91:                                     ; preds = %434, %originalBB91alteredBB
  %443 = load i64, i64* %29, align 8, !dbg !1694
  %444 = add i64 %443, 1, !dbg !1694
  store i64 %444, i64* %29, align 8, !dbg !1694
  %445 = load i32, i32* @x.35
  %446 = load i32, i32* @y.36
  %447 = sub i32 %445, 1
  %448 = mul i32 %445, %447
  %449 = urem i32 %448, 2
  %450 = icmp eq i32 %449, 0
  %451 = icmp slt i32 %446, 10
  %452 = or i1 %450, %451
  br i1 %452, label %originalBBpart2101, label %originalBB91alteredBB

originalBBpart2101:                               ; preds = %originalBB91
  br label %453, !dbg !1694

453:                                              ; preds = %originalBBpart2101
  %454 = load i32, i32* @x.35
  %455 = load i32, i32* @y.36
  %456 = sub i32 %454, 1
  %457 = mul i32 %454, %456
  %458 = urem i32 %457, 2
  %459 = icmp eq i32 %458, 0
  %460 = icmp slt i32 %455, 10
  %461 = or i1 %459, %460
  br i1 %461, label %originalBB103, label %originalBB103alteredBB

originalBB103:                                    ; preds = %453, %originalBB103alteredBB
  %462 = load i32, i32* @x.35
  %463 = load i32, i32* @y.36
  %464 = sub i32 %462, 1
  %465 = mul i32 %462, %464
  %466 = urem i32 %465, 2
  %467 = icmp eq i32 %466, 0
  %468 = icmp slt i32 %463, 10
  %469 = or i1 %467, %468
  br i1 %469, label %originalBBpart2105, label %originalBB103alteredBB

originalBBpart2105:                               ; preds = %originalBB103
  br label %470, !dbg !1694

470:                                              ; preds = %originalBBpart2105, %390
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.65, i64 0, i64 0), i8** %31, align 8, !dbg !1695
  store i64 1, i64* %32, align 8, !dbg !1696
  br label %505, !dbg !1697

471:                                              ; preds = %66
  %472 = load i32, i32* @x.35
  %473 = load i32, i32* @y.36
  %474 = sub i32 %472, 1
  %475 = mul i32 %472, %474
  %476 = urem i32 %475, 2
  %477 = icmp eq i32 %476, 0
  %478 = icmp slt i32 %473, 10
  %479 = or i1 %477, %478
  br i1 %479, label %originalBB107, label %originalBB107alteredBB

originalBB107:                                    ; preds = %471, %originalBB107alteredBB
  store i8 0, i8* %35, align 1, !dbg !1698
  %480 = load i32, i32* @x.35
  %481 = load i32, i32* @y.36
  %482 = sub i32 %480, 1
  %483 = mul i32 %480, %482
  %484 = urem i32 %483, 2
  %485 = icmp eq i32 %484, 0
  %486 = icmp slt i32 %481, 10
  %487 = or i1 %485, %486
  br i1 %487, label %originalBBpart2109, label %originalBB107alteredBB

originalBBpart2109:                               ; preds = %originalBB107
  br label %505, !dbg !1699

488:                                              ; preds = %66
  %489 = load i32, i32* @x.35
  %490 = load i32, i32* @y.36
  %491 = sub i32 %489, 1
  %492 = mul i32 %489, %491
  %493 = urem i32 %492, 2
  %494 = icmp eq i32 %493, 0
  %495 = icmp slt i32 %490, 10
  %496 = or i1 %494, %495
  br i1 %496, label %originalBB111, label %originalBB111alteredBB

originalBB111:                                    ; preds = %488, %originalBB111alteredBB
  call void @abort() #12, !dbg !1700
  %497 = load i32, i32* @x.35
  %498 = load i32, i32* @y.36
  %499 = sub i32 %497, 1
  %500 = mul i32 %497, %499
  %501 = urem i32 %500, 2
  %502 = icmp eq i32 %501, 0
  %503 = icmp slt i32 %498, 10
  %504 = or i1 %502, %503
  br i1 %504, label %originalBBpart2113, label %originalBB111alteredBB

originalBBpart2113:                               ; preds = %originalBB111
  unreachable, !dbg !1700

505:                                              ; preds = %originalBBpart2109, %470, %347, %originalBBpart228, %133
  store i64 0, i64* %28, align 8, !dbg !1701
  br label %506, !dbg !1703

506:                                              ; preds = %originalBBpart21284, %505
  %507 = load i32, i32* @x.35
  %508 = load i32, i32* @y.36
  %509 = sub i32 %507, 1
  %510 = mul i32 %507, %509
  %511 = urem i32 %510, 2
  %512 = icmp eq i32 %511, 0
  %513 = icmp slt i32 %508, 10
  %514 = or i1 %512, %513
  br i1 %514, label %originalBB115, label %originalBB115alteredBB

originalBB115:                                    ; preds = %506, %originalBB115alteredBB
  %515 = load i64, i64* %22, align 8, !dbg !1704
  %516 = icmp eq i64 %515, -1, !dbg !1706
  %517 = load i32, i32* @x.35
  %518 = load i32, i32* @y.36
  %519 = sub i32 %517, 1
  %520 = mul i32 %517, %519
  %521 = urem i32 %520, 2
  %522 = icmp eq i32 %521, 0
  %523 = icmp slt i32 %518, 10
  %524 = or i1 %522, %523
  br i1 %524, label %originalBBpart2117, label %originalBB115alteredBB

originalBBpart2117:                               ; preds = %originalBB115
  br i1 %516, label %525, label %549, !dbg !1704

525:                                              ; preds = %originalBBpart2117
  %526 = load i32, i32* @x.35
  %527 = load i32, i32* @y.36
  %528 = sub i32 %526, 1
  %529 = mul i32 %526, %528
  %530 = urem i32 %529, 2
  %531 = icmp eq i32 %530, 0
  %532 = icmp slt i32 %527, 10
  %533 = or i1 %531, %532
  br i1 %533, label %originalBB119, label %originalBB119alteredBB

originalBB119:                                    ; preds = %525, %originalBB119alteredBB
  %534 = load i8*, i8** %21, align 8, !dbg !1707
  %535 = load i64, i64* %28, align 8, !dbg !1708
  %536 = getelementptr inbounds i8, i8* %534, i64 %535, !dbg !1707
  %537 = load i8, i8* %536, align 1, !dbg !1707
  %538 = sext i8 %537 to i32, !dbg !1707
  %539 = icmp eq i32 %538, 0, !dbg !1709
  %540 = zext i1 %539 to i32, !dbg !1709
  %541 = load i32, i32* @x.35
  %542 = load i32, i32* @y.36
  %543 = sub i32 %541, 1
  %544 = mul i32 %541, %543
  %545 = urem i32 %544, 2
  %546 = icmp eq i32 %545, 0
  %547 = icmp slt i32 %542, 10
  %548 = or i1 %546, %547
  br i1 %548, label %originalBBpart2121, label %originalBB119alteredBB

originalBBpart2121:                               ; preds = %originalBB119
  br label %570, !dbg !1704

549:                                              ; preds = %originalBBpart2117
  %550 = load i32, i32* @x.35
  %551 = load i32, i32* @y.36
  %552 = sub i32 %550, 1
  %553 = mul i32 %550, %552
  %554 = urem i32 %553, 2
  %555 = icmp eq i32 %554, 0
  %556 = icmp slt i32 %551, 10
  %557 = or i1 %555, %556
  br i1 %557, label %originalBB123, label %originalBB123alteredBB

originalBB123:                                    ; preds = %549, %originalBB123alteredBB
  %558 = load i64, i64* %28, align 8, !dbg !1710
  %559 = load i64, i64* %22, align 8, !dbg !1711
  %560 = icmp eq i64 %558, %559, !dbg !1712
  %561 = zext i1 %560 to i32, !dbg !1712
  %562 = load i32, i32* @x.35
  %563 = load i32, i32* @y.36
  %564 = sub i32 %562, 1
  %565 = mul i32 %562, %564
  %566 = urem i32 %565, 2
  %567 = icmp eq i32 %566, 0
  %568 = icmp slt i32 %563, 10
  %569 = or i1 %567, %568
  br i1 %569, label %originalBBpart2125, label %originalBB123alteredBB

originalBBpart2125:                               ; preds = %originalBB123
  br label %570, !dbg !1704

570:                                              ; preds = %originalBBpart2125, %originalBBpart2121
  %571 = phi i32 [ %540, %originalBBpart2121 ], [ %561, %originalBBpart2125 ], !dbg !1704
  %572 = icmp ne i32 %571, 0, !dbg !1713
  %573 = xor i1 %572, true, !dbg !1713
  br i1 %573, label %574, label %4403, !dbg !1714

574:                                              ; preds = %570
  call void @llvm.dbg.declare(metadata i8* %39, metadata !1715, metadata !DIExpression()), !dbg !1717
  call void @llvm.dbg.declare(metadata i8* %40, metadata !1718, metadata !DIExpression()), !dbg !1719
  call void @llvm.dbg.declare(metadata i8* %41, metadata !1720, metadata !DIExpression()), !dbg !1721
  store i8 0, i8* %41, align 1, !dbg !1721
  call void @llvm.dbg.declare(metadata i8* %42, metadata !1722, metadata !DIExpression()), !dbg !1723
  store i8 0, i8* %42, align 1, !dbg !1723
  call void @llvm.dbg.declare(metadata i8* %43, metadata !1724, metadata !DIExpression()), !dbg !1725
  store i8 0, i8* %43, align 1, !dbg !1725
  %575 = load i8, i8* %33, align 1, !dbg !1726
  %576 = trunc i8 %575 to i1, !dbg !1726
  br i1 %576, label %577, label %709, !dbg !1728

577:                                              ; preds = %574
  %578 = load i32, i32* @x.35
  %579 = load i32, i32* @y.36
  %580 = sub i32 %578, 1
  %581 = mul i32 %578, %580
  %582 = urem i32 %581, 2
  %583 = icmp eq i32 %582, 0
  %584 = icmp slt i32 %579, 10
  %585 = or i1 %583, %584
  br i1 %585, label %originalBB127, label %originalBB127alteredBB

originalBB127:                                    ; preds = %577, %originalBB127alteredBB
  %586 = load i32, i32* %23, align 4, !dbg !1729
  %587 = icmp ne i32 %586, 2, !dbg !1730
  %588 = load i32, i32* @x.35
  %589 = load i32, i32* @y.36
  %590 = sub i32 %588, 1
  %591 = mul i32 %588, %590
  %592 = urem i32 %591, 2
  %593 = icmp eq i32 %592, 0
  %594 = icmp slt i32 %589, 10
  %595 = or i1 %593, %594
  br i1 %595, label %originalBBpart2129, label %originalBB127alteredBB

originalBBpart2129:                               ; preds = %originalBB127
  br i1 %587, label %596, label %709, !dbg !1731

596:                                              ; preds = %originalBBpart2129
  %597 = load i64, i64* %32, align 8, !dbg !1732
  %598 = icmp ne i64 %597, 0, !dbg !1732
  br i1 %598, label %599, label %709, !dbg !1733

599:                                              ; preds = %596
  %600 = load i32, i32* @x.35
  %601 = load i32, i32* @y.36
  %602 = sub i32 %600, 1
  %603 = mul i32 %600, %602
  %604 = urem i32 %603, 2
  %605 = icmp eq i32 %604, 0
  %606 = icmp slt i32 %601, 10
  %607 = or i1 %605, %606
  br i1 %607, label %originalBB131, label %originalBB131alteredBB

originalBB131:                                    ; preds = %599, %originalBB131alteredBB
  %608 = load i64, i64* %28, align 8, !dbg !1734
  %609 = load i64, i64* %32, align 8, !dbg !1735
  %610 = add i64 %608, %609, !dbg !1736
  %611 = load i64, i64* %22, align 8, !dbg !1737
  %612 = icmp eq i64 %611, -1, !dbg !1738
  %613 = load i32, i32* @x.35
  %614 = load i32, i32* @y.36
  %615 = sub i32 %613, 1
  %616 = mul i32 %613, %615
  %617 = urem i32 %616, 2
  %618 = icmp eq i32 %617, 0
  %619 = icmp slt i32 %614, 10
  %620 = or i1 %618, %619
  br i1 %620, label %originalBBpart2142, label %originalBB131alteredBB

originalBBpart2142:                               ; preds = %originalBB131
  br i1 %612, label %621, label %643, !dbg !1739

621:                                              ; preds = %originalBBpart2142
  %622 = load i64, i64* %32, align 8, !dbg !1740
  %623 = icmp ult i64 1, %622, !dbg !1741
  br i1 %623, label %624, label %643, !dbg !1737

624:                                              ; preds = %621
  %625 = load i32, i32* @x.35
  %626 = load i32, i32* @y.36
  %627 = sub i32 %625, 1
  %628 = mul i32 %625, %627
  %629 = urem i32 %628, 2
  %630 = icmp eq i32 %629, 0
  %631 = icmp slt i32 %626, 10
  %632 = or i1 %630, %631
  br i1 %632, label %originalBB144, label %originalBB144alteredBB

originalBB144:                                    ; preds = %624, %originalBB144alteredBB
  %633 = load i8*, i8** %21, align 8, !dbg !1742
  %634 = call i64 @strlen(i8* %633) #13, !dbg !1743
  store i64 %634, i64* %22, align 8, !dbg !1744
  %635 = load i32, i32* @x.35
  %636 = load i32, i32* @y.36
  %637 = sub i32 %635, 1
  %638 = mul i32 %635, %637
  %639 = urem i32 %638, 2
  %640 = icmp eq i32 %639, 0
  %641 = icmp slt i32 %636, 10
  %642 = or i1 %640, %641
  br i1 %642, label %originalBBpart2146, label %originalBB144alteredBB

originalBBpart2146:                               ; preds = %originalBB144
  br label %645, !dbg !1737

643:                                              ; preds = %621, %originalBBpart2142
  %644 = load i64, i64* %22, align 8, !dbg !1745
  br label %645, !dbg !1737

645:                                              ; preds = %643, %originalBBpart2146
  %646 = phi i64 [ %634, %originalBBpart2146 ], [ %644, %643 ], !dbg !1737
  %647 = load i32, i32* @x.35
  %648 = load i32, i32* @y.36
  %649 = sub i32 %647, 1
  %650 = mul i32 %647, %649
  %651 = urem i32 %650, 2
  %652 = icmp eq i32 %651, 0
  %653 = icmp slt i32 %648, 10
  %654 = or i1 %652, %653
  br i1 %654, label %originalBB148, label %originalBB148alteredBB

originalBB148:                                    ; preds = %645, %originalBB148alteredBB
  %655 = icmp ule i64 %610, %646, !dbg !1746
  %656 = load i32, i32* @x.35
  %657 = load i32, i32* @y.36
  %658 = sub i32 %656, 1
  %659 = mul i32 %656, %658
  %660 = urem i32 %659, 2
  %661 = icmp eq i32 %660, 0
  %662 = icmp slt i32 %657, 10
  %663 = or i1 %661, %662
  br i1 %663, label %originalBBpart2150, label %originalBB148alteredBB

originalBBpart2150:                               ; preds = %originalBB148
  br i1 %655, label %664, label %709, !dbg !1747

664:                                              ; preds = %originalBBpart2150
  %665 = load i32, i32* @x.35
  %666 = load i32, i32* @y.36
  %667 = sub i32 %665, 1
  %668 = mul i32 %665, %667
  %669 = urem i32 %668, 2
  %670 = icmp eq i32 %669, 0
  %671 = icmp slt i32 %666, 10
  %672 = or i1 %670, %671
  br i1 %672, label %originalBB152, label %originalBB152alteredBB

originalBB152:                                    ; preds = %664, %originalBB152alteredBB
  %673 = load i8*, i8** %21, align 8, !dbg !1748
  %674 = load i64, i64* %28, align 8, !dbg !1749
  %675 = getelementptr inbounds i8, i8* %673, i64 %674, !dbg !1750
  %676 = load i8*, i8** %31, align 8, !dbg !1751
  %677 = load i64, i64* %32, align 8, !dbg !1752
  %678 = call i32 @memcmp(i8* %675, i8* %676, i64 %677) #13, !dbg !1753
  %679 = icmp eq i32 %678, 0, !dbg !1754
  %680 = load i32, i32* @x.35
  %681 = load i32, i32* @y.36
  %682 = sub i32 %680, 1
  %683 = mul i32 %680, %682
  %684 = urem i32 %683, 2
  %685 = icmp eq i32 %684, 0
  %686 = icmp slt i32 %681, 10
  %687 = or i1 %685, %686
  br i1 %687, label %originalBBpart2154, label %originalBB152alteredBB

originalBBpart2154:                               ; preds = %originalBB152
  br i1 %679, label %688, label %709, !dbg !1755

688:                                              ; preds = %originalBBpart2154
  %689 = load i8, i8* %35, align 1, !dbg !1756
  %690 = trunc i8 %689 to i1, !dbg !1756
  br i1 %690, label %691, label %692, !dbg !1759

691:                                              ; preds = %688
  br label %4725, !dbg !1760

692:                                              ; preds = %688
  %693 = load i32, i32* @x.35
  %694 = load i32, i32* @y.36
  %695 = sub i32 %693, 1
  %696 = mul i32 %693, %695
  %697 = urem i32 %696, 2
  %698 = icmp eq i32 %697, 0
  %699 = icmp slt i32 %694, 10
  %700 = or i1 %698, %699
  br i1 %700, label %originalBB156, label %originalBB156alteredBB

originalBB156:                                    ; preds = %692, %originalBB156alteredBB
  store i8 1, i8* %41, align 1, !dbg !1761
  %701 = load i32, i32* @x.35
  %702 = load i32, i32* @y.36
  %703 = sub i32 %701, 1
  %704 = mul i32 %701, %703
  %705 = urem i32 %704, 2
  %706 = icmp eq i32 %705, 0
  %707 = icmp slt i32 %702, 10
  %708 = or i1 %706, %707
  br i1 %708, label %originalBBpart2158, label %originalBB156alteredBB

originalBBpart2158:                               ; preds = %originalBB156
  br label %709, !dbg !1762

709:                                              ; preds = %originalBBpart2158, %originalBBpart2154, %originalBBpart2150, %596, %originalBBpart2129, %574
  %710 = load i32, i32* @x.35
  %711 = load i32, i32* @y.36
  %712 = sub i32 %710, 1
  %713 = mul i32 %710, %712
  %714 = urem i32 %713, 2
  %715 = icmp eq i32 %714, 0
  %716 = icmp slt i32 %711, 10
  %717 = or i1 %715, %716
  br i1 %717, label %originalBB160, label %originalBB160alteredBB

originalBB160:                                    ; preds = %709, %originalBB160alteredBB
  %718 = load i8*, i8** %21, align 8, !dbg !1763
  %719 = load i64, i64* %28, align 8, !dbg !1764
  %720 = getelementptr inbounds i8, i8* %718, i64 %719, !dbg !1763
  %721 = load i8, i8* %720, align 1, !dbg !1763
  store i8 %721, i8* %39, align 1, !dbg !1765
  %722 = load i8, i8* %39, align 1, !dbg !1766
  %723 = zext i8 %722 to i32, !dbg !1766
  %724 = load i32, i32* @x.35
  %725 = load i32, i32* @y.36
  %726 = sub i32 %724, 1
  %727 = mul i32 %724, %726
  %728 = urem i32 %727, 2
  %729 = icmp eq i32 %728, 0
  %730 = icmp slt i32 %725, 10
  %731 = or i1 %729, %730
  br i1 %731, label %originalBBpart2162, label %originalBB160alteredBB

originalBBpart2162:                               ; preds = %originalBB160
  switch i32 %723, label %2462 [
    i32 0, label %732
    i32 63, label %1289
    i32 7, label %1827
    i32 8, label %1844
    i32 12, label %1845
    i32 10, label %1846
    i32 13, label %1863
    i32 9, label %1880
    i32 11, label %1897
    i32 92, label %1898
    i32 123, label %2044
    i32 125, label %2044
    i32 35, label %2122
    i32 126, label %2122
    i32 32, label %2159
    i32 33, label %2176
    i32 34, label %2176
    i32 36, label %2176
    i32 38, label %2176
    i32 40, label %2176
    i32 41, label %2176
    i32 42, label %2176
    i32 59, label %2176
    i32 60, label %2176
    i32 61, label %2176
    i32 62, label %2176
    i32 91, label %2176
    i32 94, label %2176
    i32 96, label %2176
    i32 124, label %2176
    i32 39, label %2200
    i32 37, label %2445
    i32 43, label %2445
    i32 44, label %2445
    i32 45, label %2445
    i32 46, label %2445
    i32 47, label %2445
    i32 48, label %2445
    i32 49, label %2445
    i32 50, label %2445
    i32 51, label %2445
    i32 52, label %2445
    i32 53, label %2445
    i32 54, label %2445
    i32 55, label %2445
    i32 56, label %2445
    i32 57, label %2445
    i32 58, label %2445
    i32 65, label %2445
    i32 66, label %2445
    i32 67, label %2445
    i32 68, label %2445
    i32 69, label %2445
    i32 70, label %2445
    i32 71, label %2445
    i32 72, label %2445
    i32 73, label %2445
    i32 74, label %2445
    i32 75, label %2445
    i32 76, label %2445
    i32 77, label %2445
    i32 78, label %2445
    i32 79, label %2445
    i32 80, label %2445
    i32 81, label %2445
    i32 82, label %2445
    i32 83, label %2445
    i32 84, label %2445
    i32 85, label %2445
    i32 86, label %2445
    i32 87, label %2445
    i32 88, label %2445
    i32 89, label %2445
    i32 90, label %2445
    i32 93, label %2445
    i32 95, label %2445
    i32 97, label %2445
    i32 98, label %2445
    i32 99, label %2445
    i32 100, label %2445
    i32 101, label %2445
    i32 102, label %2445
    i32 103, label %2445
    i32 104, label %2445
    i32 105, label %2445
    i32 106, label %2445
    i32 107, label %2445
    i32 108, label %2445
    i32 109, label %2445
    i32 110, label %2445
    i32 111, label %2445
    i32 112, label %2445
    i32 113, label %2445
    i32 114, label %2445
    i32 115, label %2445
    i32 116, label %2445
    i32 117, label %2445
    i32 118, label %2445
    i32 119, label %2445
    i32 120, label %2445
    i32 121, label %2445
    i32 122, label %2445
  ], !dbg !1767

732:                                              ; preds = %originalBBpart2162
  %733 = load i8, i8* %33, align 1, !dbg !1768
  %734 = trunc i8 %733 to i1, !dbg !1768
  br i1 %734, label %735, label %1250, !dbg !1771

735:                                              ; preds = %732
  br label %736, !dbg !1772

736:                                              ; preds = %735
  %737 = load i32, i32* @x.35
  %738 = load i32, i32* @y.36
  %739 = sub i32 %737, 1
  %740 = mul i32 %737, %739
  %741 = urem i32 %740, 2
  %742 = icmp eq i32 %741, 0
  %743 = icmp slt i32 %738, 10
  %744 = or i1 %742, %743
  br i1 %744, label %originalBB164, label %originalBB164alteredBB

originalBB164:                                    ; preds = %736, %originalBB164alteredBB
  %745 = load i8, i8* %35, align 1, !dbg !1774
  %746 = trunc i8 %745 to i1, !dbg !1774
  %747 = load i32, i32* @x.35
  %748 = load i32, i32* @y.36
  %749 = sub i32 %747, 1
  %750 = mul i32 %747, %749
  %751 = urem i32 %750, 2
  %752 = icmp eq i32 %751, 0
  %753 = icmp slt i32 %748, 10
  %754 = or i1 %752, %753
  br i1 %754, label %originalBBpart2166, label %originalBB164alteredBB

originalBBpart2166:                               ; preds = %originalBB164
  br i1 %746, label %755, label %772, !dbg !1777

755:                                              ; preds = %originalBBpart2166
  %756 = load i32, i32* @x.35
  %757 = load i32, i32* @y.36
  %758 = sub i32 %756, 1
  %759 = mul i32 %756, %758
  %760 = urem i32 %759, 2
  %761 = icmp eq i32 %760, 0
  %762 = icmp slt i32 %757, 10
  %763 = or i1 %761, %762
  br i1 %763, label %originalBB168, label %originalBB168alteredBB

originalBB168:                                    ; preds = %755, %originalBB168alteredBB
  %764 = load i32, i32* @x.35
  %765 = load i32, i32* @y.36
  %766 = sub i32 %764, 1
  %767 = mul i32 %764, %766
  %768 = urem i32 %767, 2
  %769 = icmp eq i32 %768, 0
  %770 = icmp slt i32 %765, 10
  %771 = or i1 %769, %770
  br i1 %771, label %originalBBpart2170, label %originalBB168alteredBB

originalBBpart2170:                               ; preds = %originalBB168
  br label %4725, !dbg !1774

772:                                              ; preds = %originalBBpart2166
  store i8 1, i8* %42, align 1, !dbg !1777
  %773 = load i32, i32* %23, align 4, !dbg !1778
  %774 = icmp eq i32 %773, 2, !dbg !1778
  br i1 %774, label %775, label %995, !dbg !1778

775:                                              ; preds = %772
  %776 = load i32, i32* @x.35
  %777 = load i32, i32* @y.36
  %778 = sub i32 %776, 1
  %779 = mul i32 %776, %778
  %780 = urem i32 %779, 2
  %781 = icmp eq i32 %780, 0
  %782 = icmp slt i32 %777, 10
  %783 = or i1 %781, %782
  br i1 %783, label %originalBB172, label %originalBB172alteredBB

originalBB172:                                    ; preds = %775, %originalBB172alteredBB
  %784 = load i8, i8* %36, align 1, !dbg !1778
  %785 = trunc i8 %784 to i1, !dbg !1778
  %786 = load i32, i32* @x.35
  %787 = load i32, i32* @y.36
  %788 = sub i32 %786, 1
  %789 = mul i32 %786, %788
  %790 = urem i32 %789, 2
  %791 = icmp eq i32 %790, 0
  %792 = icmp slt i32 %787, 10
  %793 = or i1 %791, %792
  br i1 %793, label %originalBBpart2174, label %originalBB172alteredBB

originalBBpart2174:                               ; preds = %originalBB172
  br i1 %785, label %995, label %794, !dbg !1777

794:                                              ; preds = %originalBBpart2174
  %795 = load i32, i32* @x.35
  %796 = load i32, i32* @y.36
  %797 = sub i32 %795, 1
  %798 = mul i32 %795, %797
  %799 = urem i32 %798, 2
  %800 = icmp eq i32 %799, 0
  %801 = icmp slt i32 %796, 10
  %802 = or i1 %800, %801
  br i1 %802, label %originalBB176, label %originalBB176alteredBB

originalBB176:                                    ; preds = %794, %originalBB176alteredBB
  %803 = load i32, i32* @x.35
  %804 = load i32, i32* @y.36
  %805 = sub i32 %803, 1
  %806 = mul i32 %803, %805
  %807 = urem i32 %806, 2
  %808 = icmp eq i32 %807, 0
  %809 = icmp slt i32 %804, 10
  %810 = or i1 %808, %809
  br i1 %810, label %originalBBpart2178, label %originalBB176alteredBB

originalBBpart2178:                               ; preds = %originalBB176
  br label %811, !dbg !1780

811:                                              ; preds = %originalBBpart2178
  %812 = load i64, i64* %29, align 8, !dbg !1782
  %813 = load i64, i64* %20, align 8, !dbg !1782
  %814 = icmp ult i64 %812, %813, !dbg !1782
  br i1 %814, label %815, label %835, !dbg !1785

815:                                              ; preds = %811
  %816 = load i32, i32* @x.35
  %817 = load i32, i32* @y.36
  %818 = sub i32 %816, 1
  %819 = mul i32 %816, %818
  %820 = urem i32 %819, 2
  %821 = icmp eq i32 %820, 0
  %822 = icmp slt i32 %817, 10
  %823 = or i1 %821, %822
  br i1 %823, label %originalBB180, label %originalBB180alteredBB

originalBB180:                                    ; preds = %815, %originalBB180alteredBB
  %824 = load i8*, i8** %19, align 8, !dbg !1782
  %825 = load i64, i64* %29, align 8, !dbg !1782
  %826 = getelementptr inbounds i8, i8* %824, i64 %825, !dbg !1782
  store i8 39, i8* %826, align 1, !dbg !1782
  %827 = load i32, i32* @x.35
  %828 = load i32, i32* @y.36
  %829 = sub i32 %827, 1
  %830 = mul i32 %827, %829
  %831 = urem i32 %830, 2
  %832 = icmp eq i32 %831, 0
  %833 = icmp slt i32 %828, 10
  %834 = or i1 %832, %833
  br i1 %834, label %originalBBpart2182, label %originalBB180alteredBB

originalBBpart2182:                               ; preds = %originalBB180
  br label %835, !dbg !1782

835:                                              ; preds = %originalBBpart2182, %811
  %836 = load i64, i64* %29, align 8, !dbg !1785
  %837 = add i64 %836, 1, !dbg !1785
  %838 = trunc i64 1 to i32
  %839 = mul i32 %838, -5
  %840 = add i32 %839, 3
  %841 = trunc i64 %836 to i32
  %842 = add i32 %841, 2
  %843 = trunc i64 %837 to i32
  %844 = mul i32 %843, -2
  %845 = add i32 %844, 2
  %846 = mul i32 %840, %840
  %847 = mul i32 %846, %846
  %848 = mul i32 %842, %842
  %849 = mul i32 %848, %848
  %850 = mul i32 %845, %845
  %851 = mul i32 %850, %850
  %852 = add i32 %847, %849
  %853 = sub i32 %852, %851
  %854 = add i32 %853, 5
  %855 = icmp ne i32 %854, 5
  br i1 %855, label %856, label %873

856:                                              ; preds = %835
  %857 = load i32, i32* @x.35
  %858 = load i32, i32* @y.36
  %859 = sub i32 %857, 1
  %860 = mul i32 %857, %859
  %861 = urem i32 %860, 2
  %862 = icmp eq i32 %861, 0
  %863 = icmp slt i32 %858, 10
  %864 = or i1 %862, %863
  br i1 %864, label %originalBB184, label %originalBB184alteredBB

originalBB184:                                    ; preds = %856, %originalBB184alteredBB
  %865 = load i32, i32* @x.35
  %866 = load i32, i32* @y.36
  %867 = sub i32 %865, 1
  %868 = mul i32 %865, %867
  %869 = urem i32 %868, 2
  %870 = icmp eq i32 %869, 0
  %871 = icmp slt i32 %866, 10
  %872 = or i1 %870, %871
  br i1 %872, label %originalBBpart2186, label %originalBB184alteredBB

originalBBpart2186:                               ; preds = %originalBB184
  ret i64 0

873:                                              ; preds = %835
  store i64 %837, i64* %29, align 8, !dbg !1785
  br label %874, !dbg !1785

874:                                              ; preds = %873
  %875 = load i32, i32* @x.35
  %876 = load i32, i32* @y.36
  %877 = sub i32 %875, 1
  %878 = mul i32 %875, %877
  %879 = urem i32 %878, 2
  %880 = icmp eq i32 %879, 0
  %881 = icmp slt i32 %876, 10
  %882 = or i1 %880, %881
  br i1 %882, label %originalBB188, label %originalBB188alteredBB

originalBB188:                                    ; preds = %874, %originalBB188alteredBB
  %883 = load i32, i32* @x.35
  %884 = load i32, i32* @y.36
  %885 = sub i32 %883, 1
  %886 = mul i32 %883, %885
  %887 = urem i32 %886, 2
  %888 = icmp eq i32 %887, 0
  %889 = icmp slt i32 %884, 10
  %890 = or i1 %888, %889
  br i1 %890, label %originalBBpart2190, label %originalBB188alteredBB

originalBBpart2190:                               ; preds = %originalBB188
  br label %891, !dbg !1780

891:                                              ; preds = %originalBBpart2190
  %892 = load i64, i64* %29, align 8, !dbg !1786
  %893 = load i64, i64* %20, align 8, !dbg !1786
  %894 = icmp ult i64 %892, %893, !dbg !1786
  br i1 %894, label %895, label %899, !dbg !1789

895:                                              ; preds = %891
  %896 = load i8*, i8** %19, align 8, !dbg !1786
  %897 = load i64, i64* %29, align 8, !dbg !1786
  %898 = getelementptr inbounds i8, i8* %896, i64 %897, !dbg !1786
  store i8 36, i8* %898, align 1, !dbg !1786
  br label %899, !dbg !1786

899:                                              ; preds = %895, %891
  %900 = load i32, i32* @x.35
  %901 = load i32, i32* @y.36
  %902 = sub i32 %900, 1
  %903 = mul i32 %900, %902
  %904 = urem i32 %903, 2
  %905 = icmp eq i32 %904, 0
  %906 = icmp slt i32 %901, 10
  %907 = or i1 %905, %906
  br i1 %907, label %originalBB192, label %originalBB192alteredBB

originalBB192:                                    ; preds = %899, %originalBB192alteredBB
  %908 = load i64, i64* %29, align 8, !dbg !1789
  %909 = add i64 %908, 1, !dbg !1789
  store i64 %909, i64* %29, align 8, !dbg !1789
  %910 = load i32, i32* @x.35
  %911 = load i32, i32* @y.36
  %912 = sub i32 %910, 1
  %913 = mul i32 %910, %912
  %914 = urem i32 %913, 2
  %915 = icmp eq i32 %914, 0
  %916 = icmp slt i32 %911, 10
  %917 = or i1 %915, %916
  br i1 %917, label %originalBBpart2199, label %originalBB192alteredBB

originalBBpart2199:                               ; preds = %originalBB192
  br label %918, !dbg !1789

918:                                              ; preds = %originalBBpart2199
  %919 = load i32, i32* @x.35
  %920 = load i32, i32* @y.36
  %921 = sub i32 %919, 1
  %922 = mul i32 %919, %921
  %923 = urem i32 %922, 2
  %924 = icmp eq i32 %923, 0
  %925 = icmp slt i32 %920, 10
  %926 = or i1 %924, %925
  br i1 %926, label %originalBB201, label %originalBB201alteredBB

originalBB201:                                    ; preds = %918, %originalBB201alteredBB
  %927 = load i32, i32* @x.35
  %928 = load i32, i32* @y.36
  %929 = sub i32 %927, 1
  %930 = mul i32 %927, %929
  %931 = urem i32 %930, 2
  %932 = icmp eq i32 %931, 0
  %933 = icmp slt i32 %928, 10
  %934 = or i1 %932, %933
  br i1 %934, label %originalBBpart2203, label %originalBB201alteredBB

originalBBpart2203:                               ; preds = %originalBB201
  br label %935, !dbg !1780

935:                                              ; preds = %originalBBpart2203
  %936 = load i32, i32* @x.35
  %937 = load i32, i32* @y.36
  %938 = sub i32 %936, 1
  %939 = mul i32 %936, %938
  %940 = urem i32 %939, 2
  %941 = icmp eq i32 %940, 0
  %942 = icmp slt i32 %937, 10
  %943 = or i1 %941, %942
  br i1 %943, label %originalBB205, label %originalBB205alteredBB

originalBB205:                                    ; preds = %935, %originalBB205alteredBB
  %944 = load i64, i64* %29, align 8, !dbg !1790
  %945 = load i64, i64* %20, align 8, !dbg !1790
  %946 = icmp ult i64 %944, %945, !dbg !1790
  %947 = load i32, i32* @x.35
  %948 = load i32, i32* @y.36
  %949 = sub i32 %947, 1
  %950 = mul i32 %947, %949
  %951 = urem i32 %950, 2
  %952 = icmp eq i32 %951, 0
  %953 = icmp slt i32 %948, 10
  %954 = or i1 %952, %953
  br i1 %954, label %originalBBpart2207, label %originalBB205alteredBB

originalBBpart2207:                               ; preds = %originalBB205
  br i1 %946, label %955, label %959, !dbg !1793

955:                                              ; preds = %originalBBpart2207
  %956 = load i8*, i8** %19, align 8, !dbg !1790
  %957 = load i64, i64* %29, align 8, !dbg !1790
  %958 = getelementptr inbounds i8, i8* %956, i64 %957, !dbg !1790
  store i8 39, i8* %958, align 1, !dbg !1790
  br label %959, !dbg !1790

959:                                              ; preds = %955, %originalBBpart2207
  %960 = load i32, i32* @x.35
  %961 = load i32, i32* @y.36
  %962 = sub i32 %960, 1
  %963 = mul i32 %960, %962
  %964 = urem i32 %963, 2
  %965 = icmp eq i32 %964, 0
  %966 = icmp slt i32 %961, 10
  %967 = or i1 %965, %966
  br i1 %967, label %originalBB209, label %originalBB209alteredBB

originalBB209:                                    ; preds = %959, %originalBB209alteredBB
  %968 = load i64, i64* %29, align 8, !dbg !1793
  %969 = add i64 %968, 1, !dbg !1793
  store i64 %969, i64* %29, align 8, !dbg !1793
  %970 = load i32, i32* @x.35
  %971 = load i32, i32* @y.36
  %972 = sub i32 %970, 1
  %973 = mul i32 %970, %972
  %974 = urem i32 %973, 2
  %975 = icmp eq i32 %974, 0
  %976 = icmp slt i32 %971, 10
  %977 = or i1 %975, %976
  br i1 %977, label %originalBBpart2215, label %originalBB209alteredBB

originalBBpart2215:                               ; preds = %originalBB209
  br label %978, !dbg !1793

978:                                              ; preds = %originalBBpart2215
  %979 = load i32, i32* @x.35
  %980 = load i32, i32* @y.36
  %981 = sub i32 %979, 1
  %982 = mul i32 %979, %981
  %983 = urem i32 %982, 2
  %984 = icmp eq i32 %983, 0
  %985 = icmp slt i32 %980, 10
  %986 = or i1 %984, %985
  br i1 %986, label %originalBB217, label %originalBB217alteredBB

originalBB217:                                    ; preds = %978, %originalBB217alteredBB
  store i8 1, i8* %36, align 1, !dbg !1780
  %987 = load i32, i32* @x.35
  %988 = load i32, i32* @y.36
  %989 = sub i32 %987, 1
  %990 = mul i32 %987, %989
  %991 = urem i32 %990, 2
  %992 = icmp eq i32 %991, 0
  %993 = icmp slt i32 %988, 10
  %994 = or i1 %992, %993
  br i1 %994, label %originalBBpart2219, label %originalBB217alteredBB

originalBBpart2219:                               ; preds = %originalBB217
  br label %995, !dbg !1780

995:                                              ; preds = %originalBBpart2219, %originalBBpart2174, %772
  br label %996, !dbg !1777

996:                                              ; preds = %995
  %997 = load i64, i64* %29, align 8, !dbg !1794
  %998 = load i64, i64* %20, align 8, !dbg !1794
  %999 = icmp ult i64 %997, %998, !dbg !1794
  br i1 %999, label %1000, label %1020, !dbg !1797

1000:                                             ; preds = %996
  %1001 = load i32, i32* @x.35
  %1002 = load i32, i32* @y.36
  %1003 = sub i32 %1001, 1
  %1004 = mul i32 %1001, %1003
  %1005 = urem i32 %1004, 2
  %1006 = icmp eq i32 %1005, 0
  %1007 = icmp slt i32 %1002, 10
  %1008 = or i1 %1006, %1007
  br i1 %1008, label %originalBB221, label %originalBB221alteredBB

originalBB221:                                    ; preds = %1000, %originalBB221alteredBB
  %1009 = load i8*, i8** %19, align 8, !dbg !1794
  %1010 = load i64, i64* %29, align 8, !dbg !1794
  %1011 = getelementptr inbounds i8, i8* %1009, i64 %1010, !dbg !1794
  store i8 92, i8* %1011, align 1, !dbg !1794
  %1012 = load i32, i32* @x.35
  %1013 = load i32, i32* @y.36
  %1014 = sub i32 %1012, 1
  %1015 = mul i32 %1012, %1014
  %1016 = urem i32 %1015, 2
  %1017 = icmp eq i32 %1016, 0
  %1018 = icmp slt i32 %1013, 10
  %1019 = or i1 %1017, %1018
  br i1 %1019, label %originalBBpart2223, label %originalBB221alteredBB

originalBBpart2223:                               ; preds = %originalBB221
  br label %1020, !dbg !1794

1020:                                             ; preds = %originalBBpart2223, %996
  %1021 = load i32, i32* @x.35
  %1022 = load i32, i32* @y.36
  %1023 = sub i32 %1021, 1
  %1024 = mul i32 %1021, %1023
  %1025 = urem i32 %1024, 2
  %1026 = icmp eq i32 %1025, 0
  %1027 = icmp slt i32 %1022, 10
  %1028 = or i1 %1026, %1027
  br i1 %1028, label %originalBB225, label %originalBB225alteredBB

originalBB225:                                    ; preds = %1020, %originalBB225alteredBB
  %1029 = load i64, i64* %29, align 8, !dbg !1797
  %1030 = add i64 %1029, 1, !dbg !1797
  store i64 %1030, i64* %29, align 8, !dbg !1797
  %1031 = load i32, i32* @x.35
  %1032 = load i32, i32* @y.36
  %1033 = sub i32 %1031, 1
  %1034 = mul i32 %1031, %1033
  %1035 = urem i32 %1034, 2
  %1036 = icmp eq i32 %1035, 0
  %1037 = icmp slt i32 %1032, 10
  %1038 = or i1 %1036, %1037
  br i1 %1038, label %originalBBpart2235, label %originalBB225alteredBB

originalBBpart2235:                               ; preds = %originalBB225
  br label %1039, !dbg !1797

1039:                                             ; preds = %originalBBpart2235
  br label %1040, !dbg !1777

1040:                                             ; preds = %1039
  %1041 = load i32, i32* @x.35
  %1042 = load i32, i32* @y.36
  %1043 = sub i32 %1041, 1
  %1044 = mul i32 %1041, %1043
  %1045 = urem i32 %1044, 2
  %1046 = icmp eq i32 %1045, 0
  %1047 = icmp slt i32 %1042, 10
  %1048 = or i1 %1046, %1047
  br i1 %1048, label %originalBB237, label %originalBB237alteredBB

originalBB237:                                    ; preds = %1040, %originalBB237alteredBB
  %1049 = load i32, i32* %23, align 4, !dbg !1798
  %1050 = icmp ne i32 %1049, 2, !dbg !1800
  %1051 = load i32, i32* @x.35
  %1052 = load i32, i32* @y.36
  %1053 = sub i32 %1051, 1
  %1054 = mul i32 %1051, %1053
  %1055 = urem i32 %1054, 2
  %1056 = icmp eq i32 %1055, 0
  %1057 = icmp slt i32 %1052, 10
  %1058 = or i1 %1056, %1057
  br i1 %1058, label %originalBBpart2239, label %originalBB237alteredBB

originalBBpart2239:                               ; preds = %originalBB237
  br i1 %1050, label %1059, label %1233, !dbg !1801

1059:                                             ; preds = %originalBBpart2239
  %1060 = load i64, i64* %28, align 8, !dbg !1802
  %1061 = add i64 %1060, 1, !dbg !1803
  %1062 = load i64, i64* %22, align 8, !dbg !1804
  %1063 = icmp ult i64 %1061, %1062, !dbg !1805
  br i1 %1063, label %1064, label %1233, !dbg !1806

1064:                                             ; preds = %1059
  %1065 = load i32, i32* @x.35
  %1066 = load i32, i32* @y.36
  %1067 = sub i32 %1065, 1
  %1068 = mul i32 %1065, %1067
  %1069 = urem i32 %1068, 2
  %1070 = icmp eq i32 %1069, 0
  %1071 = icmp slt i32 %1066, 10
  %1072 = or i1 %1070, %1071
  br i1 %1072, label %originalBB241, label %originalBB241alteredBB

originalBB241:                                    ; preds = %1064, %originalBB241alteredBB
  %1073 = load i8*, i8** %21, align 8, !dbg !1807
  %1074 = load i64, i64* %28, align 8, !dbg !1808
  %1075 = add i64 %1074, 1, !dbg !1809
  %1076 = getelementptr inbounds i8, i8* %1073, i64 %1075, !dbg !1807
  %1077 = load i8, i8* %1076, align 1, !dbg !1807
  %1078 = sext i8 %1077 to i32, !dbg !1807
  %1079 = icmp sle i32 48, %1078, !dbg !1810
  %1080 = load i32, i32* @x.35
  %1081 = load i32, i32* @y.36
  %1082 = sub i32 %1080, 1
  %1083 = mul i32 %1080, %1082
  %1084 = urem i32 %1083, 2
  %1085 = icmp eq i32 %1084, 0
  %1086 = icmp slt i32 %1081, 10
  %1087 = or i1 %1085, %1086
  br i1 %1087, label %originalBBpart2256, label %originalBB241alteredBB

originalBBpart2256:                               ; preds = %originalBB241
  br i1 %1079, label %1088, label %1233, !dbg !1811

1088:                                             ; preds = %originalBBpart2256
  %1089 = load i8*, i8** %21, align 8, !dbg !1812
  %1090 = load i64, i64* %28, align 8, !dbg !1813
  %1091 = add i64 %1090, 1, !dbg !1814
  %1092 = getelementptr inbounds i8, i8* %1089, i64 %1091, !dbg !1812
  %1093 = load i8, i8* %1092, align 1, !dbg !1812
  %1094 = sext i8 %1093 to i32, !dbg !1812
  %1095 = icmp sle i32 %1094, 57, !dbg !1815
  br i1 %1095, label %1096, label %1233, !dbg !1816

1096:                                             ; preds = %1088
  br label %1097, !dbg !1817

1097:                                             ; preds = %1096
  %1098 = load i32, i32* @x.35
  %1099 = load i32, i32* @y.36
  %1100 = sub i32 %1098, 1
  %1101 = mul i32 %1098, %1100
  %1102 = urem i32 %1101, 2
  %1103 = icmp eq i32 %1102, 0
  %1104 = icmp slt i32 %1099, 10
  %1105 = or i1 %1103, %1104
  br i1 %1105, label %originalBB258, label %originalBB258alteredBB

originalBB258:                                    ; preds = %1097, %originalBB258alteredBB
  %1106 = load i64, i64* %29, align 8, !dbg !1819
  %1107 = load i64, i64* %20, align 8, !dbg !1819
  %1108 = icmp ult i64 %1106, %1107, !dbg !1819
  %1109 = load i32, i32* @x.35
  %1110 = load i32, i32* @y.36
  %1111 = sub i32 %1109, 1
  %1112 = mul i32 %1109, %1111
  %1113 = urem i32 %1112, 2
  %1114 = icmp eq i32 %1113, 0
  %1115 = icmp slt i32 %1110, 10
  %1116 = or i1 %1114, %1115
  br i1 %1116, label %originalBBpart2260, label %originalBB258alteredBB

originalBBpart2260:                               ; preds = %originalBB258
  br i1 %1108, label %1117, label %1137, !dbg !1822

1117:                                             ; preds = %originalBBpart2260
  %1118 = load i32, i32* @x.35
  %1119 = load i32, i32* @y.36
  %1120 = sub i32 %1118, 1
  %1121 = mul i32 %1118, %1120
  %1122 = urem i32 %1121, 2
  %1123 = icmp eq i32 %1122, 0
  %1124 = icmp slt i32 %1119, 10
  %1125 = or i1 %1123, %1124
  br i1 %1125, label %originalBB262, label %originalBB262alteredBB

originalBB262:                                    ; preds = %1117, %originalBB262alteredBB
  %1126 = load i8*, i8** %19, align 8, !dbg !1819
  %1127 = load i64, i64* %29, align 8, !dbg !1819
  %1128 = getelementptr inbounds i8, i8* %1126, i64 %1127, !dbg !1819
  store i8 48, i8* %1128, align 1, !dbg !1819
  %1129 = load i32, i32* @x.35
  %1130 = load i32, i32* @y.36
  %1131 = sub i32 %1129, 1
  %1132 = mul i32 %1129, %1131
  %1133 = urem i32 %1132, 2
  %1134 = icmp eq i32 %1133, 0
  %1135 = icmp slt i32 %1130, 10
  %1136 = or i1 %1134, %1135
  br i1 %1136, label %originalBBpart2264, label %originalBB262alteredBB

originalBBpart2264:                               ; preds = %originalBB262
  br label %1137, !dbg !1819

1137:                                             ; preds = %originalBBpart2264, %originalBBpart2260
  %1138 = load i32, i32* @x.35
  %1139 = load i32, i32* @y.36
  %1140 = sub i32 %1138, 1
  %1141 = mul i32 %1138, %1140
  %1142 = urem i32 %1141, 2
  %1143 = icmp eq i32 %1142, 0
  %1144 = icmp slt i32 %1139, 10
  %1145 = or i1 %1143, %1144
  br i1 %1145, label %originalBB266, label %originalBB266alteredBB

originalBB266:                                    ; preds = %1137, %originalBB266alteredBB
  %1146 = load i64, i64* %29, align 8, !dbg !1822
  %1147 = add i64 %1146, 1, !dbg !1822
  store i64 %1147, i64* %29, align 8, !dbg !1822
  %1148 = load i32, i32* @x.35
  %1149 = load i32, i32* @y.36
  %1150 = sub i32 %1148, 1
  %1151 = mul i32 %1148, %1150
  %1152 = urem i32 %1151, 2
  %1153 = icmp eq i32 %1152, 0
  %1154 = icmp slt i32 %1149, 10
  %1155 = or i1 %1153, %1154
  br i1 %1155, label %originalBBpart2284, label %originalBB266alteredBB

originalBBpart2284:                               ; preds = %originalBB266
  br label %1156, !dbg !1822

1156:                                             ; preds = %originalBBpart2284
  %1157 = load i32, i32* @x.35
  %1158 = load i32, i32* @y.36
  %1159 = sub i32 %1157, 1
  %1160 = mul i32 %1157, %1159
  %1161 = urem i32 %1160, 2
  %1162 = icmp eq i32 %1161, 0
  %1163 = icmp slt i32 %1158, 10
  %1164 = or i1 %1162, %1163
  br i1 %1164, label %originalBB286, label %originalBB286alteredBB

originalBB286:                                    ; preds = %1156, %originalBB286alteredBB
  %1165 = load i32, i32* @x.35
  %1166 = load i32, i32* @y.36
  %1167 = sub i32 %1165, 1
  %1168 = mul i32 %1165, %1167
  %1169 = urem i32 %1168, 2
  %1170 = icmp eq i32 %1169, 0
  %1171 = icmp slt i32 %1166, 10
  %1172 = or i1 %1170, %1171
  br i1 %1172, label %originalBBpart2288, label %originalBB286alteredBB

originalBBpart2288:                               ; preds = %originalBB286
  br label %1173, !dbg !1823

1173:                                             ; preds = %originalBBpart2288
  %1174 = load i32, i32* @x.35
  %1175 = load i32, i32* @y.36
  %1176 = sub i32 %1174, 1
  %1177 = mul i32 %1174, %1176
  %1178 = urem i32 %1177, 2
  %1179 = icmp eq i32 %1178, 0
  %1180 = icmp slt i32 %1175, 10
  %1181 = or i1 %1179, %1180
  br i1 %1181, label %originalBB290, label %originalBB290alteredBB

originalBB290:                                    ; preds = %1173, %originalBB290alteredBB
  %1182 = load i64, i64* %29, align 8, !dbg !1824
  %1183 = load i64, i64* %20, align 8, !dbg !1824
  %1184 = icmp ult i64 %1182, %1183, !dbg !1824
  %1185 = load i32, i32* @x.35
  %1186 = load i32, i32* @y.36
  %1187 = sub i32 %1185, 1
  %1188 = mul i32 %1185, %1187
  %1189 = urem i32 %1188, 2
  %1190 = icmp eq i32 %1189, 0
  %1191 = icmp slt i32 %1186, 10
  %1192 = or i1 %1190, %1191
  br i1 %1192, label %originalBBpart2292, label %originalBB290alteredBB

originalBBpart2292:                               ; preds = %originalBB290
  br i1 %1184, label %1193, label %1213, !dbg !1827

1193:                                             ; preds = %originalBBpart2292
  %1194 = load i32, i32* @x.35
  %1195 = load i32, i32* @y.36
  %1196 = sub i32 %1194, 1
  %1197 = mul i32 %1194, %1196
  %1198 = urem i32 %1197, 2
  %1199 = icmp eq i32 %1198, 0
  %1200 = icmp slt i32 %1195, 10
  %1201 = or i1 %1199, %1200
  br i1 %1201, label %originalBB294, label %originalBB294alteredBB

originalBB294:                                    ; preds = %1193, %originalBB294alteredBB
  %1202 = load i8*, i8** %19, align 8, !dbg !1824
  %1203 = load i64, i64* %29, align 8, !dbg !1824
  %1204 = getelementptr inbounds i8, i8* %1202, i64 %1203, !dbg !1824
  store i8 48, i8* %1204, align 1, !dbg !1824
  %1205 = load i32, i32* @x.35
  %1206 = load i32, i32* @y.36
  %1207 = sub i32 %1205, 1
  %1208 = mul i32 %1205, %1207
  %1209 = urem i32 %1208, 2
  %1210 = icmp eq i32 %1209, 0
  %1211 = icmp slt i32 %1206, 10
  %1212 = or i1 %1210, %1211
  br i1 %1212, label %originalBBpart2296, label %originalBB294alteredBB

originalBBpart2296:                               ; preds = %originalBB294
  br label %1213, !dbg !1824

1213:                                             ; preds = %originalBBpart2296, %originalBBpart2292
  %1214 = load i64, i64* %29, align 8, !dbg !1827
  %1215 = add i64 %1214, 1, !dbg !1827
  store i64 %1215, i64* %29, align 8, !dbg !1827
  br label %1216, !dbg !1827

1216:                                             ; preds = %1213
  %1217 = load i32, i32* @x.35
  %1218 = load i32, i32* @y.36
  %1219 = sub i32 %1217, 1
  %1220 = mul i32 %1217, %1219
  %1221 = urem i32 %1220, 2
  %1222 = icmp eq i32 %1221, 0
  %1223 = icmp slt i32 %1218, 10
  %1224 = or i1 %1222, %1223
  br i1 %1224, label %originalBB298, label %originalBB298alteredBB

originalBB298:                                    ; preds = %1216, %originalBB298alteredBB
  %1225 = load i32, i32* @x.35
  %1226 = load i32, i32* @y.36
  %1227 = sub i32 %1225, 1
  %1228 = mul i32 %1225, %1227
  %1229 = urem i32 %1228, 2
  %1230 = icmp eq i32 %1229, 0
  %1231 = icmp slt i32 %1226, 10
  %1232 = or i1 %1230, %1231
  br i1 %1232, label %originalBBpart2300, label %originalBB298alteredBB

originalBBpart2300:                               ; preds = %originalBB298
  br label %1233, !dbg !1828

1233:                                             ; preds = %originalBBpart2300, %1088, %originalBBpart2256, %1059, %originalBBpart2239
  %1234 = load i32, i32* @x.35
  %1235 = load i32, i32* @y.36
  %1236 = sub i32 %1234, 1
  %1237 = mul i32 %1234, %1236
  %1238 = urem i32 %1237, 2
  %1239 = icmp eq i32 %1238, 0
  %1240 = icmp slt i32 %1235, 10
  %1241 = or i1 %1239, %1240
  br i1 %1241, label %originalBB302, label %originalBB302alteredBB

originalBB302:                                    ; preds = %1233, %originalBB302alteredBB
  store i8 48, i8* %39, align 1, !dbg !1829
  %1242 = load i32, i32* @x.35
  %1243 = load i32, i32* @y.36
  %1244 = sub i32 %1242, 1
  %1245 = mul i32 %1242, %1244
  %1246 = urem i32 %1245, 2
  %1247 = icmp eq i32 %1246, 0
  %1248 = icmp slt i32 %1243, 10
  %1249 = or i1 %1247, %1248
  br i1 %1249, label %originalBBpart2304, label %originalBB302alteredBB

originalBBpart2304:                               ; preds = %originalBB302
  br label %1272, !dbg !1830

1250:                                             ; preds = %732
  %1251 = load i32, i32* @x.35
  %1252 = load i32, i32* @y.36
  %1253 = sub i32 %1251, 1
  %1254 = mul i32 %1251, %1253
  %1255 = urem i32 %1254, 2
  %1256 = icmp eq i32 %1255, 0
  %1257 = icmp slt i32 %1252, 10
  %1258 = or i1 %1256, %1257
  br i1 %1258, label %originalBB306, label %originalBB306alteredBB

originalBB306:                                    ; preds = %1250, %originalBB306alteredBB
  %1259 = load i32, i32* %24, align 4, !dbg !1831
  %1260 = and i32 %1259, 1, !dbg !1833
  %1261 = icmp ne i32 %1260, 0, !dbg !1833
  %1262 = load i32, i32* @x.35
  %1263 = load i32, i32* @y.36
  %1264 = sub i32 %1262, 1
  %1265 = mul i32 %1262, %1264
  %1266 = urem i32 %1265, 2
  %1267 = icmp eq i32 %1266, 0
  %1268 = icmp slt i32 %1263, 10
  %1269 = or i1 %1267, %1268
  br i1 %1269, label %originalBBpart2324, label %originalBB306alteredBB

originalBBpart2324:                               ; preds = %originalBB306
  br i1 %1261, label %1270, label %1271, !dbg !1834

1270:                                             ; preds = %originalBBpart2324
  br label %4384, !dbg !1835

1271:                                             ; preds = %originalBBpart2324
  br label %1272

1272:                                             ; preds = %1271, %originalBBpart2304
  %1273 = load i32, i32* @x.35
  %1274 = load i32, i32* @y.36
  %1275 = sub i32 %1273, 1
  %1276 = mul i32 %1273, %1275
  %1277 = urem i32 %1276, 2
  %1278 = icmp eq i32 %1277, 0
  %1279 = icmp slt i32 %1274, 10
  %1280 = or i1 %1278, %1279
  br i1 %1280, label %originalBB326, label %originalBB326alteredBB

originalBB326:                                    ; preds = %1272, %originalBB326alteredBB
  %1281 = load i32, i32* @x.35
  %1282 = load i32, i32* @y.36
  %1283 = sub i32 %1281, 1
  %1284 = mul i32 %1281, %1283
  %1285 = urem i32 %1284, 2
  %1286 = icmp eq i32 %1285, 0
  %1287 = icmp slt i32 %1282, 10
  %1288 = or i1 %1286, %1287
  br i1 %1288, label %originalBBpart2328, label %originalBB326alteredBB

originalBBpart2328:                               ; preds = %originalBB326
  br label %3743, !dbg !1836

1289:                                             ; preds = %originalBBpart2162
  %1290 = load i32, i32* @x.35
  %1291 = load i32, i32* @y.36
  %1292 = sub i32 %1290, 1
  %1293 = mul i32 %1290, %1292
  %1294 = urem i32 %1293, 2
  %1295 = icmp eq i32 %1294, 0
  %1296 = icmp slt i32 %1291, 10
  %1297 = or i1 %1295, %1296
  br i1 %1297, label %originalBB330, label %originalBB330alteredBB

originalBB330:                                    ; preds = %1289, %originalBB330alteredBB
  %1298 = load i32, i32* %23, align 4, !dbg !1837
  %1299 = load i32, i32* @x.35
  %1300 = load i32, i32* @y.36
  %1301 = sub i32 %1299, 1
  %1302 = mul i32 %1299, %1301
  %1303 = urem i32 %1302, 2
  %1304 = icmp eq i32 %1303, 0
  %1305 = icmp slt i32 %1300, 10
  %1306 = or i1 %1304, %1305
  br i1 %1306, label %originalBBpart2332, label %originalBB330alteredBB

originalBBpart2332:                               ; preds = %originalBB330
  switch i32 %1298, label %1825 [
    i32 2, label %1307
    i32 5, label %1360
  ], !dbg !1838

1307:                                             ; preds = %originalBBpart2332
  %1308 = load i32, i32* @x.35
  %1309 = load i32, i32* @y.36
  %1310 = sub i32 %1308, 1
  %1311 = mul i32 %1308, %1310
  %1312 = urem i32 %1311, 2
  %1313 = icmp eq i32 %1312, 0
  %1314 = icmp slt i32 %1309, 10
  %1315 = or i1 %1313, %1314
  br i1 %1315, label %originalBB334, label %originalBB334alteredBB

originalBB334:                                    ; preds = %1307, %originalBB334alteredBB
  %1316 = load i8, i8* %35, align 1, !dbg !1839
  %1317 = trunc i8 %1316 to i1, !dbg !1839
  %1318 = load i32, i32* @x.35
  %1319 = load i32, i32* @y.36
  %1320 = sub i32 %1318, 1
  %1321 = mul i32 %1318, %1320
  %1322 = urem i32 %1321, 2
  %1323 = icmp eq i32 %1322, 0
  %1324 = icmp slt i32 %1319, 10
  %1325 = or i1 %1323, %1324
  br i1 %1325, label %originalBBpart2336, label %originalBB334alteredBB

originalBBpart2336:                               ; preds = %originalBB334
  br i1 %1317, label %1326, label %1343, !dbg !1842

1326:                                             ; preds = %originalBBpart2336
  %1327 = load i32, i32* @x.35
  %1328 = load i32, i32* @y.36
  %1329 = sub i32 %1327, 1
  %1330 = mul i32 %1327, %1329
  %1331 = urem i32 %1330, 2
  %1332 = icmp eq i32 %1331, 0
  %1333 = icmp slt i32 %1328, 10
  %1334 = or i1 %1332, %1333
  br i1 %1334, label %originalBB338, label %originalBB338alteredBB

originalBB338:                                    ; preds = %1326, %originalBB338alteredBB
  %1335 = load i32, i32* @x.35
  %1336 = load i32, i32* @y.36
  %1337 = sub i32 %1335, 1
  %1338 = mul i32 %1335, %1337
  %1339 = urem i32 %1338, 2
  %1340 = icmp eq i32 %1339, 0
  %1341 = icmp slt i32 %1336, 10
  %1342 = or i1 %1340, %1341
  br i1 %1342, label %originalBBpart2340, label %originalBB338alteredBB

originalBBpart2340:                               ; preds = %originalBB338
  br label %4725, !dbg !1843

1343:                                             ; preds = %originalBBpart2336
  %1344 = load i32, i32* @x.35
  %1345 = load i32, i32* @y.36
  %1346 = sub i32 %1344, 1
  %1347 = mul i32 %1344, %1346
  %1348 = urem i32 %1347, 2
  %1349 = icmp eq i32 %1348, 0
  %1350 = icmp slt i32 %1345, 10
  %1351 = or i1 %1349, %1350
  br i1 %1351, label %originalBB342, label %originalBB342alteredBB

originalBB342:                                    ; preds = %1343, %originalBB342alteredBB
  %1352 = load i32, i32* @x.35
  %1353 = load i32, i32* @y.36
  %1354 = sub i32 %1352, 1
  %1355 = mul i32 %1352, %1354
  %1356 = urem i32 %1355, 2
  %1357 = icmp eq i32 %1356, 0
  %1358 = icmp slt i32 %1353, 10
  %1359 = or i1 %1357, %1358
  br i1 %1359, label %originalBBpart2344, label %originalBB342alteredBB

originalBBpart2344:                               ; preds = %originalBB342
  br label %1826, !dbg !1844

1360:                                             ; preds = %originalBBpart2332
  %1361 = load i32, i32* @x.35
  %1362 = load i32, i32* @y.36
  %1363 = sub i32 %1361, 1
  %1364 = mul i32 %1361, %1363
  %1365 = urem i32 %1364, 2
  %1366 = icmp eq i32 %1365, 0
  %1367 = icmp slt i32 %1362, 10
  %1368 = or i1 %1366, %1367
  br i1 %1368, label %originalBB346, label %originalBB346alteredBB

originalBB346:                                    ; preds = %1360, %originalBB346alteredBB
  %1369 = load i32, i32* %24, align 4, !dbg !1845
  %1370 = and i32 %1369, 4, !dbg !1847
  %1371 = icmp ne i32 %1370, 0, !dbg !1847
  %1372 = load i32, i32* @x.35
  %1373 = load i32, i32* @y.36
  %1374 = sub i32 %1372, 1
  %1375 = mul i32 %1372, %1374
  %1376 = urem i32 %1375, 2
  %1377 = icmp eq i32 %1376, 0
  %1378 = icmp slt i32 %1373, 10
  %1379 = or i1 %1377, %1378
  br i1 %1379, label %originalBBpart2359, label %originalBB346alteredBB

originalBBpart2359:                               ; preds = %originalBB346
  br i1 %1371, label %1380, label %1824, !dbg !1848

1380:                                             ; preds = %originalBBpart2359
  %1381 = load i32, i32* @x.35
  %1382 = load i32, i32* @y.36
  %1383 = sub i32 %1381, 1
  %1384 = mul i32 %1381, %1383
  %1385 = urem i32 %1384, 2
  %1386 = icmp eq i32 %1385, 0
  %1387 = icmp slt i32 %1382, 10
  %1388 = or i1 %1386, %1387
  br i1 %1388, label %originalBB361, label %originalBB361alteredBB

originalBB361:                                    ; preds = %1380, %originalBB361alteredBB
  %1389 = load i64, i64* %28, align 8, !dbg !1849
  %1390 = add i64 %1389, 2, !dbg !1850
  %1391 = load i64, i64* %22, align 8, !dbg !1851
  %1392 = trunc i64 %1391 to i32
  %1393 = mul i32 %1392, -4
  %1394 = trunc i64 2 to i32
  %1395 = mul i32 %1394, 3
  %1396 = add i32 %1395, -5
  %1397 = mul i32 %1393, %1393
  %1398 = mul i32 %1396, %1396
  %1399 = add i32 %1397, %1398
  %1400 = mul i32 %1393, %1396
  %1401 = mul i32 %1400, 2
  %1402 = sub i32 %1399, %1401
  %1403 = mul i32 %1402, -2
  %1404 = add i32 %1403, -4
  %1405 = icmp ne i32 %1404, -2
  %1406 = load i32, i32* @x.35
  %1407 = load i32, i32* @y.36
  %1408 = sub i32 %1406, 1
  %1409 = mul i32 %1406, %1408
  %1410 = urem i32 %1409, 2
  %1411 = icmp eq i32 %1410, 0
  %1412 = icmp slt i32 %1407, 10
  %1413 = or i1 %1411, %1412
  br i1 %1413, label %originalBBpart2448, label %originalBB361alteredBB

originalBBpart2448:                               ; preds = %originalBB361
  br i1 %1405, label %1415, label %1414

1414:                                             ; preds = %originalBBpart2448
  ret i64 0

1415:                                             ; preds = %originalBBpart2448
  %1416 = load i32, i32* @x.35
  %1417 = load i32, i32* @y.36
  %1418 = sub i32 %1416, 1
  %1419 = mul i32 %1416, %1418
  %1420 = urem i32 %1419, 2
  %1421 = icmp eq i32 %1420, 0
  %1422 = icmp slt i32 %1417, 10
  %1423 = or i1 %1421, %1422
  br i1 %1423, label %originalBB450, label %originalBB450alteredBB

originalBB450:                                    ; preds = %1415, %originalBB450alteredBB
  %1424 = icmp ult i64 %1390, %1391, !dbg !1852
  %1425 = load i32, i32* @x.35
  %1426 = load i32, i32* @y.36
  %1427 = sub i32 %1425, 1
  %1428 = mul i32 %1425, %1427
  %1429 = urem i32 %1428, 2
  %1430 = icmp eq i32 %1429, 0
  %1431 = icmp slt i32 %1426, 10
  %1432 = or i1 %1430, %1431
  br i1 %1432, label %originalBBpart2452, label %originalBB450alteredBB

originalBBpart2452:                               ; preds = %originalBB450
  br i1 %1424, label %1433, label %1824, !dbg !1853

1433:                                             ; preds = %originalBBpart2452
  %1434 = load i32, i32* @x.35
  %1435 = load i32, i32* @y.36
  %1436 = sub i32 %1434, 1
  %1437 = mul i32 %1434, %1436
  %1438 = urem i32 %1437, 2
  %1439 = icmp eq i32 %1438, 0
  %1440 = icmp slt i32 %1435, 10
  %1441 = or i1 %1439, %1440
  br i1 %1441, label %originalBB454, label %originalBB454alteredBB

originalBB454:                                    ; preds = %1433, %originalBB454alteredBB
  %1442 = load i8*, i8** %21, align 8, !dbg !1854
  %1443 = load i64, i64* %28, align 8, !dbg !1855
  %1444 = add i64 %1443, 1, !dbg !1856
  %1445 = trunc i64 1 to i32
  %1446 = mul i32 %1445, 4
  %1447 = add i32 %1446, 3
  %1448 = trunc i64 %1443 to i32
  %1449 = mul i32 %1448, 2
  %1450 = add i32 %1449, 1
  %1451 = mul i32 %1447, %1447
  %1452 = mul i32 %1450, %1450
  %1453 = mul i32 %1452, 34
  %1454 = sub i32 %1451, %1453
  %1455 = mul i32 %1454, -2
  %1456 = add i32 %1455, -2
  %1457 = icmp ne i32 %1456, -4
  %1458 = load i32, i32* @x.35
  %1459 = load i32, i32* @y.36
  %1460 = sub i32 %1458, 1
  %1461 = mul i32 %1458, %1460
  %1462 = urem i32 %1461, 2
  %1463 = icmp eq i32 %1462, 0
  %1464 = icmp slt i32 %1459, 10
  %1465 = or i1 %1463, %1464
  br i1 %1465, label %originalBBpart2528, label %originalBB454alteredBB

originalBBpart2528:                               ; preds = %originalBB454
  br i1 %1457, label %1467, label %1466

1466:                                             ; preds = %originalBBpart2528
  ret i64 0

1467:                                             ; preds = %originalBBpart2528
  %1468 = getelementptr inbounds i8, i8* %1442, i64 %1444, !dbg !1854
  %1469 = load i8, i8* %1468, align 1, !dbg !1854
  %1470 = sext i8 %1469 to i32, !dbg !1854
  %1471 = icmp eq i32 %1470, 63, !dbg !1857
  br i1 %1471, label %1472, label %1824, !dbg !1858

1472:                                             ; preds = %1467
  %1473 = load i8*, i8** %21, align 8, !dbg !1859
  %1474 = load i64, i64* %28, align 8, !dbg !1860
  %1475 = add i64 %1474, 2, !dbg !1861
  %1476 = getelementptr inbounds i8, i8* %1473, i64 %1475, !dbg !1859
  %1477 = load i8, i8* %1476, align 1, !dbg !1859
  %1478 = sext i8 %1477 to i32, !dbg !1859
  switch i32 %1478, label %1790 [
    i32 33, label %1479
    i32 39, label %1479
    i32 40, label %1479
    i32 41, label %1479
    i32 45, label %1479
    i32 47, label %1479
    i32 60, label %1479
    i32 61, label %1479
    i32 62, label %1479
  ], !dbg !1862

1479:                                             ; preds = %1472, %1472, %1472, %1472, %1472, %1472, %1472, %1472, %1472
  %1480 = load i32, i32* @x.35
  %1481 = load i32, i32* @y.36
  %1482 = sub i32 %1480, 1
  %1483 = mul i32 %1480, %1482
  %1484 = urem i32 %1483, 2
  %1485 = icmp eq i32 %1484, 0
  %1486 = icmp slt i32 %1481, 10
  %1487 = or i1 %1485, %1486
  br i1 %1487, label %originalBB530, label %originalBB530alteredBB

originalBB530:                                    ; preds = %1479, %originalBB530alteredBB
  %1488 = load i8, i8* %35, align 1, !dbg !1863
  %1489 = trunc i8 %1488 to i1, !dbg !1863
  %1490 = load i32, i32* @x.35
  %1491 = load i32, i32* @y.36
  %1492 = sub i32 %1490, 1
  %1493 = mul i32 %1490, %1492
  %1494 = urem i32 %1493, 2
  %1495 = icmp eq i32 %1494, 0
  %1496 = icmp slt i32 %1491, 10
  %1497 = or i1 %1495, %1496
  br i1 %1497, label %originalBBpart2532, label %originalBB530alteredBB

originalBBpart2532:                               ; preds = %originalBB530
  br i1 %1489, label %1498, label %1515, !dbg !1866

1498:                                             ; preds = %originalBBpart2532
  %1499 = load i32, i32* @x.35
  %1500 = load i32, i32* @y.36
  %1501 = sub i32 %1499, 1
  %1502 = mul i32 %1499, %1501
  %1503 = urem i32 %1502, 2
  %1504 = icmp eq i32 %1503, 0
  %1505 = icmp slt i32 %1500, 10
  %1506 = or i1 %1504, %1505
  br i1 %1506, label %originalBB534, label %originalBB534alteredBB

originalBB534:                                    ; preds = %1498, %originalBB534alteredBB
  %1507 = load i32, i32* @x.35
  %1508 = load i32, i32* @y.36
  %1509 = sub i32 %1507, 1
  %1510 = mul i32 %1507, %1509
  %1511 = urem i32 %1510, 2
  %1512 = icmp eq i32 %1511, 0
  %1513 = icmp slt i32 %1508, 10
  %1514 = or i1 %1512, %1513
  br i1 %1514, label %originalBBpart2536, label %originalBB534alteredBB

originalBBpart2536:                               ; preds = %originalBB534
  br label %4725, !dbg !1867

1515:                                             ; preds = %originalBBpart2532
  %1516 = load i8*, i8** %21, align 8, !dbg !1868
  %1517 = load i64, i64* %28, align 8, !dbg !1869
  %1518 = add i64 %1517, 2, !dbg !1870
  %1519 = getelementptr inbounds i8, i8* %1516, i64 %1518, !dbg !1868
  %1520 = load i8, i8* %1519, align 1, !dbg !1868
  store i8 %1520, i8* %39, align 1, !dbg !1871
  %1521 = load i64, i64* %28, align 8, !dbg !1872
  %1522 = add i64 %1521, 2, !dbg !1872
  store i64 %1522, i64* %28, align 8, !dbg !1872
  br label %1523, !dbg !1873

1523:                                             ; preds = %1515
  %1524 = load i32, i32* @x.35
  %1525 = load i32, i32* @y.36
  %1526 = sub i32 %1524, 1
  %1527 = mul i32 %1524, %1526
  %1528 = urem i32 %1527, 2
  %1529 = icmp eq i32 %1528, 0
  %1530 = icmp slt i32 %1525, 10
  %1531 = or i1 %1529, %1530
  br i1 %1531, label %originalBB538, label %originalBB538alteredBB

originalBB538:                                    ; preds = %1523, %originalBB538alteredBB
  %1532 = load i64, i64* %29, align 8, !dbg !1874
  %1533 = load i64, i64* %20, align 8, !dbg !1874
  %1534 = icmp ult i64 %1532, %1533, !dbg !1874
  %1535 = load i32, i32* @x.35
  %1536 = load i32, i32* @y.36
  %1537 = sub i32 %1535, 1
  %1538 = mul i32 %1535, %1537
  %1539 = urem i32 %1538, 2
  %1540 = icmp eq i32 %1539, 0
  %1541 = icmp slt i32 %1536, 10
  %1542 = or i1 %1540, %1541
  br i1 %1542, label %originalBBpart2540, label %originalBB538alteredBB

originalBBpart2540:                               ; preds = %originalBB538
  br i1 %1534, label %1543, label %1563, !dbg !1877

1543:                                             ; preds = %originalBBpart2540
  %1544 = load i32, i32* @x.35
  %1545 = load i32, i32* @y.36
  %1546 = sub i32 %1544, 1
  %1547 = mul i32 %1544, %1546
  %1548 = urem i32 %1547, 2
  %1549 = icmp eq i32 %1548, 0
  %1550 = icmp slt i32 %1545, 10
  %1551 = or i1 %1549, %1550
  br i1 %1551, label %originalBB542, label %originalBB542alteredBB

originalBB542:                                    ; preds = %1543, %originalBB542alteredBB
  %1552 = load i8*, i8** %19, align 8, !dbg !1874
  %1553 = load i64, i64* %29, align 8, !dbg !1874
  %1554 = getelementptr inbounds i8, i8* %1552, i64 %1553, !dbg !1874
  store i8 63, i8* %1554, align 1, !dbg !1874
  %1555 = load i32, i32* @x.35
  %1556 = load i32, i32* @y.36
  %1557 = sub i32 %1555, 1
  %1558 = mul i32 %1555, %1557
  %1559 = urem i32 %1558, 2
  %1560 = icmp eq i32 %1559, 0
  %1561 = icmp slt i32 %1556, 10
  %1562 = or i1 %1560, %1561
  br i1 %1562, label %originalBBpart2544, label %originalBB542alteredBB

originalBBpart2544:                               ; preds = %originalBB542
  br label %1563, !dbg !1874

1563:                                             ; preds = %originalBBpart2544, %originalBBpart2540
  %1564 = load i32, i32* @x.35
  %1565 = load i32, i32* @y.36
  %1566 = sub i32 %1564, 1
  %1567 = mul i32 %1564, %1566
  %1568 = urem i32 %1567, 2
  %1569 = icmp eq i32 %1568, 0
  %1570 = icmp slt i32 %1565, 10
  %1571 = or i1 %1569, %1570
  br i1 %1571, label %originalBB546, label %originalBB546alteredBB

originalBB546:                                    ; preds = %1563, %originalBB546alteredBB
  %1572 = load i64, i64* %29, align 8, !dbg !1877
  %1573 = add i64 %1572, 1, !dbg !1877
  store i64 %1573, i64* %29, align 8, !dbg !1877
  %1574 = load i32, i32* @x.35
  %1575 = load i32, i32* @y.36
  %1576 = sub i32 %1574, 1
  %1577 = mul i32 %1574, %1576
  %1578 = urem i32 %1577, 2
  %1579 = icmp eq i32 %1578, 0
  %1580 = icmp slt i32 %1575, 10
  %1581 = or i1 %1579, %1580
  br i1 %1581, label %originalBBpart2556, label %originalBB546alteredBB

originalBBpart2556:                               ; preds = %originalBB546
  br label %1582, !dbg !1877

1582:                                             ; preds = %originalBBpart2556
  %1583 = load i32, i32* @x.35
  %1584 = load i32, i32* @y.36
  %1585 = sub i32 %1583, 1
  %1586 = mul i32 %1583, %1585
  %1587 = urem i32 %1586, 2
  %1588 = icmp eq i32 %1587, 0
  %1589 = icmp slt i32 %1584, 10
  %1590 = or i1 %1588, %1589
  br i1 %1590, label %originalBB558, label %originalBB558alteredBB

originalBB558:                                    ; preds = %1582, %originalBB558alteredBB
  %1591 = load i32, i32* @x.35
  %1592 = load i32, i32* @y.36
  %1593 = sub i32 %1591, 1
  %1594 = mul i32 %1591, %1593
  %1595 = urem i32 %1594, 2
  %1596 = icmp eq i32 %1595, 0
  %1597 = icmp slt i32 %1592, 10
  %1598 = or i1 %1596, %1597
  br i1 %1598, label %originalBBpart2560, label %originalBB558alteredBB

originalBBpart2560:                               ; preds = %originalBB558
  br label %1599, !dbg !1878

1599:                                             ; preds = %originalBBpart2560
  %1600 = load i32, i32* @x.35
  %1601 = load i32, i32* @y.36
  %1602 = sub i32 %1600, 1
  %1603 = mul i32 %1600, %1602
  %1604 = urem i32 %1603, 2
  %1605 = icmp eq i32 %1604, 0
  %1606 = icmp slt i32 %1601, 10
  %1607 = or i1 %1605, %1606
  br i1 %1607, label %originalBB562, label %originalBB562alteredBB

originalBB562:                                    ; preds = %1599, %originalBB562alteredBB
  %1608 = load i64, i64* %29, align 8, !dbg !1879
  %1609 = load i64, i64* %20, align 8, !dbg !1879
  %1610 = icmp ult i64 %1608, %1609, !dbg !1879
  %1611 = load i32, i32* @x.35
  %1612 = load i32, i32* @y.36
  %1613 = sub i32 %1611, 1
  %1614 = mul i32 %1611, %1613
  %1615 = urem i32 %1614, 2
  %1616 = icmp eq i32 %1615, 0
  %1617 = icmp slt i32 %1612, 10
  %1618 = or i1 %1616, %1617
  br i1 %1618, label %originalBBpart2564, label %originalBB562alteredBB

originalBBpart2564:                               ; preds = %originalBB562
  br i1 %1610, label %1619, label %1623, !dbg !1882

1619:                                             ; preds = %originalBBpart2564
  %1620 = load i8*, i8** %19, align 8, !dbg !1879
  %1621 = load i64, i64* %29, align 8, !dbg !1879
  %1622 = getelementptr inbounds i8, i8* %1620, i64 %1621, !dbg !1879
  store i8 34, i8* %1622, align 1, !dbg !1879
  br label %1623, !dbg !1879

1623:                                             ; preds = %1619, %originalBBpart2564
  %1624 = load i64, i64* %29, align 8, !dbg !1882
  %1625 = add i64 %1624, 1, !dbg !1882
  %1626 = trunc i64 1 to i32
  %1627 = mul i32 %1626, -5
  %1628 = add i32 %1627, -5
  %1629 = mul i32 %1628, %1628
  %1630 = sub i32 %1629, %1628
  %1631 = srem i32 %1630, 2
  %1632 = mul i32 %1631, 5
  %1633 = add i32 %1632, 2
  %1634 = icmp eq i32 %1633, 2
  br i1 %1634, label %1652, label %1635

1635:                                             ; preds = %1623
  %1636 = load i32, i32* @x.35
  %1637 = load i32, i32* @y.36
  %1638 = sub i32 %1636, 1
  %1639 = mul i32 %1636, %1638
  %1640 = urem i32 %1639, 2
  %1641 = icmp eq i32 %1640, 0
  %1642 = icmp slt i32 %1637, 10
  %1643 = or i1 %1641, %1642
  br i1 %1643, label %originalBB566, label %originalBB566alteredBB

originalBB566:                                    ; preds = %1635, %originalBB566alteredBB
  %1644 = load i32, i32* @x.35
  %1645 = load i32, i32* @y.36
  %1646 = sub i32 %1644, 1
  %1647 = mul i32 %1644, %1646
  %1648 = urem i32 %1647, 2
  %1649 = icmp eq i32 %1648, 0
  %1650 = icmp slt i32 %1645, 10
  %1651 = or i1 %1649, %1650
  br i1 %1651, label %originalBBpart2568, label %originalBB566alteredBB

originalBBpart2568:                               ; preds = %originalBB566
  ret i64 0

1652:                                             ; preds = %1623
  %1653 = load i32, i32* @x.35
  %1654 = load i32, i32* @y.36
  %1655 = sub i32 %1653, 1
  %1656 = mul i32 %1653, %1655
  %1657 = urem i32 %1656, 2
  %1658 = icmp eq i32 %1657, 0
  %1659 = icmp slt i32 %1654, 10
  %1660 = or i1 %1658, %1659
  br i1 %1660, label %originalBB570, label %originalBB570alteredBB

originalBB570:                                    ; preds = %1652, %originalBB570alteredBB
  store i64 %1625, i64* %29, align 8, !dbg !1882
  %1661 = load i32, i32* @x.35
  %1662 = load i32, i32* @y.36
  %1663 = sub i32 %1661, 1
  %1664 = mul i32 %1661, %1663
  %1665 = urem i32 %1664, 2
  %1666 = icmp eq i32 %1665, 0
  %1667 = icmp slt i32 %1662, 10
  %1668 = or i1 %1666, %1667
  br i1 %1668, label %originalBBpart2572, label %originalBB570alteredBB

originalBBpart2572:                               ; preds = %originalBB570
  br label %1669, !dbg !1882

1669:                                             ; preds = %originalBBpart2572
  %1670 = load i32, i32* @x.35
  %1671 = load i32, i32* @y.36
  %1672 = sub i32 %1670, 1
  %1673 = mul i32 %1670, %1672
  %1674 = urem i32 %1673, 2
  %1675 = icmp eq i32 %1674, 0
  %1676 = icmp slt i32 %1671, 10
  %1677 = or i1 %1675, %1676
  br i1 %1677, label %originalBB574, label %originalBB574alteredBB

originalBB574:                                    ; preds = %1669, %originalBB574alteredBB
  %1678 = load i32, i32* @x.35
  %1679 = load i32, i32* @y.36
  %1680 = sub i32 %1678, 1
  %1681 = mul i32 %1678, %1680
  %1682 = urem i32 %1681, 2
  %1683 = icmp eq i32 %1682, 0
  %1684 = icmp slt i32 %1679, 10
  %1685 = or i1 %1683, %1684
  br i1 %1685, label %originalBBpart2576, label %originalBB574alteredBB

originalBBpart2576:                               ; preds = %originalBB574
  br label %1686, !dbg !1883

1686:                                             ; preds = %originalBBpart2576
  %1687 = load i32, i32* @x.35
  %1688 = load i32, i32* @y.36
  %1689 = sub i32 %1687, 1
  %1690 = mul i32 %1687, %1689
  %1691 = urem i32 %1690, 2
  %1692 = icmp eq i32 %1691, 0
  %1693 = icmp slt i32 %1688, 10
  %1694 = or i1 %1692, %1693
  br i1 %1694, label %originalBB578, label %originalBB578alteredBB

originalBB578:                                    ; preds = %1686, %originalBB578alteredBB
  %1695 = load i64, i64* %29, align 8, !dbg !1884
  %1696 = load i64, i64* %20, align 8, !dbg !1884
  %1697 = icmp ult i64 %1695, %1696, !dbg !1884
  %1698 = load i32, i32* @x.35
  %1699 = load i32, i32* @y.36
  %1700 = sub i32 %1698, 1
  %1701 = mul i32 %1698, %1700
  %1702 = urem i32 %1701, 2
  %1703 = icmp eq i32 %1702, 0
  %1704 = icmp slt i32 %1699, 10
  %1705 = or i1 %1703, %1704
  br i1 %1705, label %originalBBpart2580, label %originalBB578alteredBB

originalBBpart2580:                               ; preds = %originalBB578
  br i1 %1697, label %1706, label %1710, !dbg !1887

1706:                                             ; preds = %originalBBpart2580
  %1707 = load i8*, i8** %19, align 8, !dbg !1884
  %1708 = load i64, i64* %29, align 8, !dbg !1884
  %1709 = getelementptr inbounds i8, i8* %1707, i64 %1708, !dbg !1884
  store i8 34, i8* %1709, align 1, !dbg !1884
  br label %1710, !dbg !1884

1710:                                             ; preds = %1706, %originalBBpart2580
  %1711 = load i64, i64* %29, align 8, !dbg !1887
  %1712 = add i64 %1711, 1, !dbg !1887
  store i64 %1712, i64* %29, align 8, !dbg !1887
  br label %1713, !dbg !1887

1713:                                             ; preds = %1710
  %1714 = load i32, i32* @x.35
  %1715 = load i32, i32* @y.36
  %1716 = sub i32 %1714, 1
  %1717 = mul i32 %1714, %1716
  %1718 = urem i32 %1717, 2
  %1719 = icmp eq i32 %1718, 0
  %1720 = icmp slt i32 %1715, 10
  %1721 = or i1 %1719, %1720
  br i1 %1721, label %originalBB582, label %originalBB582alteredBB

originalBB582:                                    ; preds = %1713, %originalBB582alteredBB
  %1722 = load i32, i32* @x.35
  %1723 = load i32, i32* @y.36
  %1724 = sub i32 %1722, 1
  %1725 = mul i32 %1722, %1724
  %1726 = urem i32 %1725, 2
  %1727 = icmp eq i32 %1726, 0
  %1728 = icmp slt i32 %1723, 10
  %1729 = or i1 %1727, %1728
  br i1 %1729, label %originalBBpart2584, label %originalBB582alteredBB

originalBBpart2584:                               ; preds = %originalBB582
  br label %1730, !dbg !1888

1730:                                             ; preds = %originalBBpart2584
  %1731 = load i32, i32* @x.35
  %1732 = load i32, i32* @y.36
  %1733 = sub i32 %1731, 1
  %1734 = mul i32 %1731, %1733
  %1735 = urem i32 %1734, 2
  %1736 = icmp eq i32 %1735, 0
  %1737 = icmp slt i32 %1732, 10
  %1738 = or i1 %1736, %1737
  br i1 %1738, label %originalBB586, label %originalBB586alteredBB

originalBB586:                                    ; preds = %1730, %originalBB586alteredBB
  %1739 = load i64, i64* %29, align 8, !dbg !1889
  %1740 = load i64, i64* %20, align 8, !dbg !1889
  %1741 = icmp ult i64 %1739, %1740, !dbg !1889
  %1742 = load i32, i32* @x.35
  %1743 = load i32, i32* @y.36
  %1744 = sub i32 %1742, 1
  %1745 = mul i32 %1742, %1744
  %1746 = urem i32 %1745, 2
  %1747 = icmp eq i32 %1746, 0
  %1748 = icmp slt i32 %1743, 10
  %1749 = or i1 %1747, %1748
  br i1 %1749, label %originalBBpart2588, label %originalBB586alteredBB

originalBBpart2588:                               ; preds = %originalBB586
  br i1 %1741, label %1750, label %1770, !dbg !1892

1750:                                             ; preds = %originalBBpart2588
  %1751 = load i32, i32* @x.35
  %1752 = load i32, i32* @y.36
  %1753 = sub i32 %1751, 1
  %1754 = mul i32 %1751, %1753
  %1755 = urem i32 %1754, 2
  %1756 = icmp eq i32 %1755, 0
  %1757 = icmp slt i32 %1752, 10
  %1758 = or i1 %1756, %1757
  br i1 %1758, label %originalBB590, label %originalBB590alteredBB

originalBB590:                                    ; preds = %1750, %originalBB590alteredBB
  %1759 = load i8*, i8** %19, align 8, !dbg !1889
  %1760 = load i64, i64* %29, align 8, !dbg !1889
  %1761 = getelementptr inbounds i8, i8* %1759, i64 %1760, !dbg !1889
  store i8 63, i8* %1761, align 1, !dbg !1889
  %1762 = load i32, i32* @x.35
  %1763 = load i32, i32* @y.36
  %1764 = sub i32 %1762, 1
  %1765 = mul i32 %1762, %1764
  %1766 = urem i32 %1765, 2
  %1767 = icmp eq i32 %1766, 0
  %1768 = icmp slt i32 %1763, 10
  %1769 = or i1 %1767, %1768
  br i1 %1769, label %originalBBpart2592, label %originalBB590alteredBB

originalBBpart2592:                               ; preds = %originalBB590
  br label %1770, !dbg !1889

1770:                                             ; preds = %originalBBpart2592, %originalBBpart2588
  %1771 = load i32, i32* @x.35
  %1772 = load i32, i32* @y.36
  %1773 = sub i32 %1771, 1
  %1774 = mul i32 %1771, %1773
  %1775 = urem i32 %1774, 2
  %1776 = icmp eq i32 %1775, 0
  %1777 = icmp slt i32 %1772, 10
  %1778 = or i1 %1776, %1777
  br i1 %1778, label %originalBB594, label %originalBB594alteredBB

originalBB594:                                    ; preds = %1770, %originalBB594alteredBB
  %1779 = load i64, i64* %29, align 8, !dbg !1892
  %1780 = add i64 %1779, 1, !dbg !1892
  store i64 %1780, i64* %29, align 8, !dbg !1892
  %1781 = load i32, i32* @x.35
  %1782 = load i32, i32* @y.36
  %1783 = sub i32 %1781, 1
  %1784 = mul i32 %1781, %1783
  %1785 = urem i32 %1784, 2
  %1786 = icmp eq i32 %1785, 0
  %1787 = icmp slt i32 %1782, 10
  %1788 = or i1 %1786, %1787
  br i1 %1788, label %originalBBpart2607, label %originalBB594alteredBB

originalBBpart2607:                               ; preds = %originalBB594
  br label %1789, !dbg !1892

1789:                                             ; preds = %originalBBpart2607
  br label %1807, !dbg !1893

1790:                                             ; preds = %1472
  %1791 = load i32, i32* @x.35
  %1792 = load i32, i32* @y.36
  %1793 = sub i32 %1791, 1
  %1794 = mul i32 %1791, %1793
  %1795 = urem i32 %1794, 2
  %1796 = icmp eq i32 %1795, 0
  %1797 = icmp slt i32 %1792, 10
  %1798 = or i1 %1796, %1797
  br i1 %1798, label %originalBB609, label %originalBB609alteredBB

originalBB609:                                    ; preds = %1790, %originalBB609alteredBB
  %1799 = load i32, i32* @x.35
  %1800 = load i32, i32* @y.36
  %1801 = sub i32 %1799, 1
  %1802 = mul i32 %1799, %1801
  %1803 = urem i32 %1802, 2
  %1804 = icmp eq i32 %1803, 0
  %1805 = icmp slt i32 %1800, 10
  %1806 = or i1 %1804, %1805
  br i1 %1806, label %originalBBpart2611, label %originalBB609alteredBB

originalBBpart2611:                               ; preds = %originalBB609
  br label %1807, !dbg !1894

1807:                                             ; preds = %originalBBpart2611, %1789
  %1808 = load i32, i32* @x.35
  %1809 = load i32, i32* @y.36
  %1810 = sub i32 %1808, 1
  %1811 = mul i32 %1808, %1810
  %1812 = urem i32 %1811, 2
  %1813 = icmp eq i32 %1812, 0
  %1814 = icmp slt i32 %1809, 10
  %1815 = or i1 %1813, %1814
  br i1 %1815, label %originalBB613, label %originalBB613alteredBB

originalBB613:                                    ; preds = %1807, %originalBB613alteredBB
  %1816 = load i32, i32* @x.35
  %1817 = load i32, i32* @y.36
  %1818 = sub i32 %1816, 1
  %1819 = mul i32 %1816, %1818
  %1820 = urem i32 %1819, 2
  %1821 = icmp eq i32 %1820, 0
  %1822 = icmp slt i32 %1817, 10
  %1823 = or i1 %1821, %1822
  br i1 %1823, label %originalBBpart2615, label %originalBB613alteredBB

originalBBpart2615:                               ; preds = %originalBB613
  br label %1824, !dbg !1895

1824:                                             ; preds = %originalBBpart2615, %1467, %originalBBpart2452, %originalBBpart2359
  br label %1826, !dbg !1896

1825:                                             ; preds = %originalBBpart2332
  br label %1826, !dbg !1897

1826:                                             ; preds = %1825, %1824, %originalBBpart2344
  br label %3743, !dbg !1898

1827:                                             ; preds = %originalBBpart2162
  %1828 = load i32, i32* @x.35
  %1829 = load i32, i32* @y.36
  %1830 = sub i32 %1828, 1
  %1831 = mul i32 %1828, %1830
  %1832 = urem i32 %1831, 2
  %1833 = icmp eq i32 %1832, 0
  %1834 = icmp slt i32 %1829, 10
  %1835 = or i1 %1833, %1834
  br i1 %1835, label %originalBB617, label %originalBB617alteredBB

originalBB617:                                    ; preds = %1827, %originalBB617alteredBB
  store i8 97, i8* %40, align 1, !dbg !1899
  %1836 = load i32, i32* @x.35
  %1837 = load i32, i32* @y.36
  %1838 = sub i32 %1836, 1
  %1839 = mul i32 %1836, %1838
  %1840 = urem i32 %1839, 2
  %1841 = icmp eq i32 %1840, 0
  %1842 = icmp slt i32 %1837, 10
  %1843 = or i1 %1841, %1842
  br i1 %1843, label %originalBBpart2619, label %originalBB617alteredBB

originalBBpart2619:                               ; preds = %originalBB617
  br label %2022, !dbg !1900

1844:                                             ; preds = %originalBBpart2162
  store i8 98, i8* %40, align 1, !dbg !1901
  br label %2022, !dbg !1902

1845:                                             ; preds = %originalBBpart2162
  store i8 102, i8* %40, align 1, !dbg !1903
  br label %2022, !dbg !1904

1846:                                             ; preds = %originalBBpart2162
  %1847 = load i32, i32* @x.35
  %1848 = load i32, i32* @y.36
  %1849 = sub i32 %1847, 1
  %1850 = mul i32 %1847, %1849
  %1851 = urem i32 %1850, 2
  %1852 = icmp eq i32 %1851, 0
  %1853 = icmp slt i32 %1848, 10
  %1854 = or i1 %1852, %1853
  br i1 %1854, label %originalBB621, label %originalBB621alteredBB

originalBB621:                                    ; preds = %1846, %originalBB621alteredBB
  store i8 110, i8* %40, align 1, !dbg !1905
  %1855 = load i32, i32* @x.35
  %1856 = load i32, i32* @y.36
  %1857 = sub i32 %1855, 1
  %1858 = mul i32 %1855, %1857
  %1859 = urem i32 %1858, 2
  %1860 = icmp eq i32 %1859, 0
  %1861 = icmp slt i32 %1856, 10
  %1862 = or i1 %1860, %1861
  br i1 %1862, label %originalBBpart2623, label %originalBB621alteredBB

originalBBpart2623:                               ; preds = %originalBB621
  br label %1982, !dbg !1906

1863:                                             ; preds = %originalBBpart2162
  %1864 = load i32, i32* @x.35
  %1865 = load i32, i32* @y.36
  %1866 = sub i32 %1864, 1
  %1867 = mul i32 %1864, %1866
  %1868 = urem i32 %1867, 2
  %1869 = icmp eq i32 %1868, 0
  %1870 = icmp slt i32 %1865, 10
  %1871 = or i1 %1869, %1870
  br i1 %1871, label %originalBB625, label %originalBB625alteredBB

originalBB625:                                    ; preds = %1863, %originalBB625alteredBB
  store i8 114, i8* %40, align 1, !dbg !1907
  %1872 = load i32, i32* @x.35
  %1873 = load i32, i32* @y.36
  %1874 = sub i32 %1872, 1
  %1875 = mul i32 %1872, %1874
  %1876 = urem i32 %1875, 2
  %1877 = icmp eq i32 %1876, 0
  %1878 = icmp slt i32 %1873, 10
  %1879 = or i1 %1877, %1878
  br i1 %1879, label %originalBBpart2627, label %originalBB625alteredBB

originalBBpart2627:                               ; preds = %originalBB625
  br label %1982, !dbg !1908

1880:                                             ; preds = %originalBBpart2162
  %1881 = load i32, i32* @x.35
  %1882 = load i32, i32* @y.36
  %1883 = sub i32 %1881, 1
  %1884 = mul i32 %1881, %1883
  %1885 = urem i32 %1884, 2
  %1886 = icmp eq i32 %1885, 0
  %1887 = icmp slt i32 %1882, 10
  %1888 = or i1 %1886, %1887
  br i1 %1888, label %originalBB629, label %originalBB629alteredBB

originalBB629:                                    ; preds = %1880, %originalBB629alteredBB
  store i8 116, i8* %40, align 1, !dbg !1909
  %1889 = load i32, i32* @x.35
  %1890 = load i32, i32* @y.36
  %1891 = sub i32 %1889, 1
  %1892 = mul i32 %1889, %1891
  %1893 = urem i32 %1892, 2
  %1894 = icmp eq i32 %1893, 0
  %1895 = icmp slt i32 %1890, 10
  %1896 = or i1 %1894, %1895
  br i1 %1896, label %originalBBpart2631, label %originalBB629alteredBB

originalBBpart2631:                               ; preds = %originalBB629
  br label %1982, !dbg !1910

1897:                                             ; preds = %originalBBpart2162
  store i8 118, i8* %40, align 1, !dbg !1911
  br label %2022, !dbg !1912

1898:                                             ; preds = %originalBBpart2162
  %1899 = load i8, i8* %39, align 1, !dbg !1913
  store i8 %1899, i8* %40, align 1, !dbg !1914
  %1900 = load i32, i32* %23, align 4, !dbg !1915
  %1901 = icmp eq i32 %1900, 2, !dbg !1917
  br i1 %1901, label %1902, label %1939, !dbg !1918

1902:                                             ; preds = %1898
  %1903 = load i32, i32* @x.35
  %1904 = load i32, i32* @y.36
  %1905 = sub i32 %1903, 1
  %1906 = mul i32 %1903, %1905
  %1907 = urem i32 %1906, 2
  %1908 = icmp eq i32 %1907, 0
  %1909 = icmp slt i32 %1904, 10
  %1910 = or i1 %1908, %1909
  br i1 %1910, label %originalBB633, label %originalBB633alteredBB

originalBB633:                                    ; preds = %1902, %originalBB633alteredBB
  %1911 = load i8, i8* %35, align 1, !dbg !1919
  %1912 = trunc i8 %1911 to i1, !dbg !1919
  %1913 = load i32, i32* @x.35
  %1914 = load i32, i32* @y.36
  %1915 = sub i32 %1913, 1
  %1916 = mul i32 %1913, %1915
  %1917 = urem i32 %1916, 2
  %1918 = icmp eq i32 %1917, 0
  %1919 = icmp slt i32 %1914, 10
  %1920 = or i1 %1918, %1919
  br i1 %1920, label %originalBBpart2635, label %originalBB633alteredBB

originalBBpart2635:                               ; preds = %originalBB633
  br i1 %1912, label %1921, label %1938, !dbg !1922

1921:                                             ; preds = %originalBBpart2635
  %1922 = load i32, i32* @x.35
  %1923 = load i32, i32* @y.36
  %1924 = sub i32 %1922, 1
  %1925 = mul i32 %1922, %1924
  %1926 = urem i32 %1925, 2
  %1927 = icmp eq i32 %1926, 0
  %1928 = icmp slt i32 %1923, 10
  %1929 = or i1 %1927, %1928
  br i1 %1929, label %originalBB637, label %originalBB637alteredBB

originalBB637:                                    ; preds = %1921, %originalBB637alteredBB
  %1930 = load i32, i32* @x.35
  %1931 = load i32, i32* @y.36
  %1932 = sub i32 %1930, 1
  %1933 = mul i32 %1930, %1932
  %1934 = urem i32 %1933, 2
  %1935 = icmp eq i32 %1934, 0
  %1936 = icmp slt i32 %1931, 10
  %1937 = or i1 %1935, %1936
  br i1 %1937, label %originalBBpart2639, label %originalBB637alteredBB

originalBBpart2639:                               ; preds = %originalBB637
  br label %4725, !dbg !1923

1938:                                             ; preds = %originalBBpart2635
  br label %4060, !dbg !1924

1939:                                             ; preds = %1898
  %1940 = load i8, i8* %33, align 1, !dbg !1925
  %1941 = trunc i8 %1940 to i1, !dbg !1925
  br i1 %1941, label %1942, label %1965, !dbg !1927

1942:                                             ; preds = %1939
  %1943 = load i32, i32* @x.35
  %1944 = load i32, i32* @y.36
  %1945 = sub i32 %1943, 1
  %1946 = mul i32 %1943, %1945
  %1947 = urem i32 %1946, 2
  %1948 = icmp eq i32 %1947, 0
  %1949 = icmp slt i32 %1944, 10
  %1950 = or i1 %1948, %1949
  br i1 %1950, label %originalBB641, label %originalBB641alteredBB

originalBB641:                                    ; preds = %1942, %originalBB641alteredBB
  %1951 = load i8, i8* %35, align 1, !dbg !1928
  %1952 = trunc i8 %1951 to i1, !dbg !1928
  %1953 = load i32, i32* @x.35
  %1954 = load i32, i32* @y.36
  %1955 = sub i32 %1953, 1
  %1956 = mul i32 %1953, %1955
  %1957 = urem i32 %1956, 2
  %1958 = icmp eq i32 %1957, 0
  %1959 = icmp slt i32 %1954, 10
  %1960 = or i1 %1958, %1959
  br i1 %1960, label %originalBBpart2643, label %originalBB641alteredBB

originalBBpart2643:                               ; preds = %originalBB641
  br i1 %1952, label %1961, label %1965, !dbg !1929

1961:                                             ; preds = %originalBBpart2643
  %1962 = load i64, i64* %32, align 8, !dbg !1930
  %1963 = icmp ne i64 %1962, 0, !dbg !1930
  br i1 %1963, label %1964, label %1965, !dbg !1931

1964:                                             ; preds = %1961
  br label %4060, !dbg !1932

1965:                                             ; preds = %1961, %originalBBpart2643, %1939
  %1966 = load i32, i32* @x.35
  %1967 = load i32, i32* @y.36
  %1968 = sub i32 %1966, 1
  %1969 = mul i32 %1966, %1968
  %1970 = urem i32 %1969, 2
  %1971 = icmp eq i32 %1970, 0
  %1972 = icmp slt i32 %1967, 10
  %1973 = or i1 %1971, %1972
  br i1 %1973, label %originalBB645, label %originalBB645alteredBB

originalBB645:                                    ; preds = %1965, %originalBB645alteredBB
  %1974 = load i32, i32* @x.35
  %1975 = load i32, i32* @y.36
  %1976 = sub i32 %1974, 1
  %1977 = mul i32 %1974, %1976
  %1978 = urem i32 %1977, 2
  %1979 = icmp eq i32 %1978, 0
  %1980 = icmp slt i32 %1975, 10
  %1981 = or i1 %1979, %1980
  br i1 %1981, label %originalBBpart2647, label %originalBB645alteredBB

originalBBpart2647:                               ; preds = %originalBB645
  br label %1982, !dbg !1930

1982:                                             ; preds = %originalBBpart2647, %originalBBpart2631, %originalBBpart2627, %originalBBpart2623
  call void @llvm.dbg.label(metadata !1933), !dbg !1934
  %1983 = load i32, i32* %23, align 4, !dbg !1935
  %1984 = icmp eq i32 %1983, 2, !dbg !1937
  br i1 %1984, label %1985, label %2021, !dbg !1938

1985:                                             ; preds = %1982
  %1986 = load i32, i32* @x.35
  %1987 = load i32, i32* @y.36
  %1988 = sub i32 %1986, 1
  %1989 = mul i32 %1986, %1988
  %1990 = urem i32 %1989, 2
  %1991 = icmp eq i32 %1990, 0
  %1992 = icmp slt i32 %1987, 10
  %1993 = or i1 %1991, %1992
  br i1 %1993, label %originalBB649, label %originalBB649alteredBB

originalBB649:                                    ; preds = %1985, %originalBB649alteredBB
  %1994 = load i8, i8* %35, align 1, !dbg !1939
  %1995 = trunc i8 %1994 to i1, !dbg !1939
  %1996 = load i32, i32* @x.35
  %1997 = load i32, i32* @y.36
  %1998 = sub i32 %1996, 1
  %1999 = mul i32 %1996, %1998
  %2000 = urem i32 %1999, 2
  %2001 = icmp eq i32 %2000, 0
  %2002 = icmp slt i32 %1997, 10
  %2003 = or i1 %2001, %2002
  br i1 %2003, label %originalBBpart2651, label %originalBB649alteredBB

originalBBpart2651:                               ; preds = %originalBB649
  br i1 %1995, label %2004, label %2021, !dbg !1940

2004:                                             ; preds = %originalBBpart2651
  %2005 = load i32, i32* @x.35
  %2006 = load i32, i32* @y.36
  %2007 = sub i32 %2005, 1
  %2008 = mul i32 %2005, %2007
  %2009 = urem i32 %2008, 2
  %2010 = icmp eq i32 %2009, 0
  %2011 = icmp slt i32 %2006, 10
  %2012 = or i1 %2010, %2011
  br i1 %2012, label %originalBB653, label %originalBB653alteredBB

originalBB653:                                    ; preds = %2004, %originalBB653alteredBB
  %2013 = load i32, i32* @x.35
  %2014 = load i32, i32* @y.36
  %2015 = sub i32 %2013, 1
  %2016 = mul i32 %2013, %2015
  %2017 = urem i32 %2016, 2
  %2018 = icmp eq i32 %2017, 0
  %2019 = icmp slt i32 %2014, 10
  %2020 = or i1 %2018, %2019
  br i1 %2020, label %originalBBpart2655, label %originalBB653alteredBB

originalBBpart2655:                               ; preds = %originalBB653
  br label %4725, !dbg !1941

2021:                                             ; preds = %originalBBpart2651, %1982
  br label %2022, !dbg !1939

2022:                                             ; preds = %2021, %1897, %1845, %1844, %originalBBpart2619
  call void @llvm.dbg.label(metadata !1942), !dbg !1943
  %2023 = load i32, i32* @x.35
  %2024 = load i32, i32* @y.36
  %2025 = sub i32 %2023, 1
  %2026 = mul i32 %2023, %2025
  %2027 = urem i32 %2026, 2
  %2028 = icmp eq i32 %2027, 0
  %2029 = icmp slt i32 %2024, 10
  %2030 = or i1 %2028, %2029
  br i1 %2030, label %originalBB657, label %originalBB657alteredBB

originalBB657:                                    ; preds = %2022, %originalBB657alteredBB
  %2031 = load i8, i8* %33, align 1, !dbg !1944
  %2032 = trunc i8 %2031 to i1, !dbg !1944
  %2033 = load i32, i32* @x.35
  %2034 = load i32, i32* @y.36
  %2035 = sub i32 %2033, 1
  %2036 = mul i32 %2033, %2035
  %2037 = urem i32 %2036, 2
  %2038 = icmp eq i32 %2037, 0
  %2039 = icmp slt i32 %2034, 10
  %2040 = or i1 %2038, %2039
  br i1 %2040, label %originalBBpart2659, label %originalBB657alteredBB

originalBBpart2659:                               ; preds = %originalBB657
  br i1 %2032, label %2041, label %2043, !dbg !1946

2041:                                             ; preds = %originalBBpart2659
  %2042 = load i8, i8* %40, align 1, !dbg !1947
  store i8 %2042, i8* %39, align 1, !dbg !1949
  br label %3838, !dbg !1950

2043:                                             ; preds = %originalBBpart2659
  br label %3743, !dbg !1951

2044:                                             ; preds = %originalBBpart2162, %originalBBpart2162
  %2045 = load i32, i32* @x.35
  %2046 = load i32, i32* @y.36
  %2047 = sub i32 %2045, 1
  %2048 = mul i32 %2045, %2047
  %2049 = urem i32 %2048, 2
  %2050 = icmp eq i32 %2049, 0
  %2051 = icmp slt i32 %2046, 10
  %2052 = or i1 %2050, %2051
  br i1 %2052, label %originalBB661, label %originalBB661alteredBB

originalBB661:                                    ; preds = %2044, %originalBB661alteredBB
  %2053 = load i64, i64* %22, align 8, !dbg !1952
  %2054 = icmp eq i64 %2053, -1, !dbg !1954
  %2055 = load i32, i32* @x.35
  %2056 = load i32, i32* @y.36
  %2057 = sub i32 %2055, 1
  %2058 = mul i32 %2055, %2057
  %2059 = urem i32 %2058, 2
  %2060 = icmp eq i32 %2059, 0
  %2061 = icmp slt i32 %2056, 10
  %2062 = or i1 %2060, %2061
  br i1 %2062, label %originalBBpart2663, label %originalBB661alteredBB

originalBBpart2663:                               ; preds = %originalBB661
  br i1 %2054, label %2063, label %2085, !dbg !1955

2063:                                             ; preds = %originalBBpart2663
  %2064 = load i32, i32* @x.35
  %2065 = load i32, i32* @y.36
  %2066 = sub i32 %2064, 1
  %2067 = mul i32 %2064, %2066
  %2068 = urem i32 %2067, 2
  %2069 = icmp eq i32 %2068, 0
  %2070 = icmp slt i32 %2065, 10
  %2071 = or i1 %2069, %2070
  br i1 %2071, label %originalBB665, label %originalBB665alteredBB

originalBB665:                                    ; preds = %2063, %originalBB665alteredBB
  %2072 = load i8*, i8** %21, align 8, !dbg !1956
  %2073 = getelementptr inbounds i8, i8* %2072, i64 1, !dbg !1956
  %2074 = load i8, i8* %2073, align 1, !dbg !1956
  %2075 = sext i8 %2074 to i32, !dbg !1956
  %2076 = icmp eq i32 %2075, 0, !dbg !1957
  %2077 = load i32, i32* @x.35
  %2078 = load i32, i32* @y.36
  %2079 = sub i32 %2077, 1
  %2080 = mul i32 %2077, %2079
  %2081 = urem i32 %2080, 2
  %2082 = icmp eq i32 %2081, 0
  %2083 = icmp slt i32 %2078, 10
  %2084 = or i1 %2082, %2083
  br i1 %2084, label %originalBBpart2667, label %originalBB665alteredBB

originalBBpart2667:                               ; preds = %originalBB665
  br i1 %2076, label %2105, label %2104, !dbg !1952

2085:                                             ; preds = %originalBBpart2663
  %2086 = load i32, i32* @x.35
  %2087 = load i32, i32* @y.36
  %2088 = sub i32 %2086, 1
  %2089 = mul i32 %2086, %2088
  %2090 = urem i32 %2089, 2
  %2091 = icmp eq i32 %2090, 0
  %2092 = icmp slt i32 %2087, 10
  %2093 = or i1 %2091, %2092
  br i1 %2093, label %originalBB669, label %originalBB669alteredBB

originalBB669:                                    ; preds = %2085, %originalBB669alteredBB
  %2094 = load i64, i64* %22, align 8, !dbg !1958
  %2095 = icmp eq i64 %2094, 1, !dbg !1959
  %2096 = load i32, i32* @x.35
  %2097 = load i32, i32* @y.36
  %2098 = sub i32 %2096, 1
  %2099 = mul i32 %2096, %2098
  %2100 = urem i32 %2099, 2
  %2101 = icmp eq i32 %2100, 0
  %2102 = icmp slt i32 %2097, 10
  %2103 = or i1 %2101, %2102
  br i1 %2103, label %originalBBpart2671, label %originalBB669alteredBB

originalBBpart2671:                               ; preds = %originalBB669
  br i1 %2095, label %2105, label %2104, !dbg !1955

2104:                                             ; preds = %originalBBpart2671, %originalBBpart2667
  br label %3743, !dbg !1960

2105:                                             ; preds = %originalBBpart2671, %originalBBpart2667
  %2106 = load i32, i32* @x.35
  %2107 = load i32, i32* @y.36
  %2108 = sub i32 %2106, 1
  %2109 = mul i32 %2106, %2108
  %2110 = urem i32 %2109, 2
  %2111 = icmp eq i32 %2110, 0
  %2112 = icmp slt i32 %2107, 10
  %2113 = or i1 %2111, %2112
  br i1 %2113, label %originalBB673, label %originalBB673alteredBB

originalBB673:                                    ; preds = %2105, %originalBB673alteredBB
  %2114 = load i32, i32* @x.35
  %2115 = load i32, i32* @y.36
  %2116 = sub i32 %2114, 1
  %2117 = mul i32 %2114, %2116
  %2118 = urem i32 %2117, 2
  %2119 = icmp eq i32 %2118, 0
  %2120 = icmp slt i32 %2115, 10
  %2121 = or i1 %2119, %2120
  br i1 %2121, label %originalBBpart2675, label %originalBB673alteredBB

originalBBpart2675:                               ; preds = %originalBB673
  br label %2122, !dbg !1961

2122:                                             ; preds = %originalBBpart2675, %originalBBpart2162, %originalBBpart2162
  %2123 = load i64, i64* %28, align 8, !dbg !1962
  %2124 = icmp ne i64 %2123, 0, !dbg !1964
  br i1 %2124, label %2125, label %2142, !dbg !1965

2125:                                             ; preds = %2122
  %2126 = load i32, i32* @x.35
  %2127 = load i32, i32* @y.36
  %2128 = sub i32 %2126, 1
  %2129 = mul i32 %2126, %2128
  %2130 = urem i32 %2129, 2
  %2131 = icmp eq i32 %2130, 0
  %2132 = icmp slt i32 %2127, 10
  %2133 = or i1 %2131, %2132
  br i1 %2133, label %originalBB677, label %originalBB677alteredBB

originalBB677:                                    ; preds = %2125, %originalBB677alteredBB
  %2134 = load i32, i32* @x.35
  %2135 = load i32, i32* @y.36
  %2136 = sub i32 %2134, 1
  %2137 = mul i32 %2134, %2136
  %2138 = urem i32 %2137, 2
  %2139 = icmp eq i32 %2138, 0
  %2140 = icmp slt i32 %2135, 10
  %2141 = or i1 %2139, %2140
  br i1 %2141, label %originalBBpart2679, label %originalBB677alteredBB

originalBBpart2679:                               ; preds = %originalBB677
  br label %3743, !dbg !1966

2142:                                             ; preds = %2122
  %2143 = load i32, i32* @x.35
  %2144 = load i32, i32* @y.36
  %2145 = sub i32 %2143, 1
  %2146 = mul i32 %2143, %2145
  %2147 = urem i32 %2146, 2
  %2148 = icmp eq i32 %2147, 0
  %2149 = icmp slt i32 %2144, 10
  %2150 = or i1 %2148, %2149
  br i1 %2150, label %originalBB681, label %originalBB681alteredBB

originalBB681:                                    ; preds = %2142, %originalBB681alteredBB
  %2151 = load i32, i32* @x.35
  %2152 = load i32, i32* @y.36
  %2153 = sub i32 %2151, 1
  %2154 = mul i32 %2151, %2153
  %2155 = urem i32 %2154, 2
  %2156 = icmp eq i32 %2155, 0
  %2157 = icmp slt i32 %2152, 10
  %2158 = or i1 %2156, %2157
  br i1 %2158, label %originalBBpart2683, label %originalBB681alteredBB

originalBBpart2683:                               ; preds = %originalBB681
  br label %2159, !dbg !1967

2159:                                             ; preds = %originalBBpart2683, %originalBBpart2162
  %2160 = load i32, i32* @x.35
  %2161 = load i32, i32* @y.36
  %2162 = sub i32 %2160, 1
  %2163 = mul i32 %2160, %2162
  %2164 = urem i32 %2163, 2
  %2165 = icmp eq i32 %2164, 0
  %2166 = icmp slt i32 %2161, 10
  %2167 = or i1 %2165, %2166
  br i1 %2167, label %originalBB685, label %originalBB685alteredBB

originalBB685:                                    ; preds = %2159, %originalBB685alteredBB
  store i8 1, i8* %43, align 1, !dbg !1968
  %2168 = load i32, i32* @x.35
  %2169 = load i32, i32* @y.36
  %2170 = sub i32 %2168, 1
  %2171 = mul i32 %2168, %2170
  %2172 = urem i32 %2171, 2
  %2173 = icmp eq i32 %2172, 0
  %2174 = icmp slt i32 %2169, 10
  %2175 = or i1 %2173, %2174
  br i1 %2175, label %originalBBpart2687, label %originalBB685alteredBB

originalBBpart2687:                               ; preds = %originalBB685
  br label %2176, !dbg !1969

2176:                                             ; preds = %originalBBpart2687, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162
  %2177 = load i32, i32* %23, align 4, !dbg !1970
  %2178 = icmp eq i32 %2177, 2, !dbg !1972
  br i1 %2178, label %2179, label %2199, !dbg !1973

2179:                                             ; preds = %2176
  %2180 = load i8, i8* %35, align 1, !dbg !1974
  %2181 = trunc i8 %2180 to i1, !dbg !1974
  br i1 %2181, label %2182, label %2199, !dbg !1975

2182:                                             ; preds = %2179
  %2183 = load i32, i32* @x.35
  %2184 = load i32, i32* @y.36
  %2185 = sub i32 %2183, 1
  %2186 = mul i32 %2183, %2185
  %2187 = urem i32 %2186, 2
  %2188 = icmp eq i32 %2187, 0
  %2189 = icmp slt i32 %2184, 10
  %2190 = or i1 %2188, %2189
  br i1 %2190, label %originalBB689, label %originalBB689alteredBB

originalBB689:                                    ; preds = %2182, %originalBB689alteredBB
  %2191 = load i32, i32* @x.35
  %2192 = load i32, i32* @y.36
  %2193 = sub i32 %2191, 1
  %2194 = mul i32 %2191, %2193
  %2195 = urem i32 %2194, 2
  %2196 = icmp eq i32 %2195, 0
  %2197 = icmp slt i32 %2192, 10
  %2198 = or i1 %2196, %2197
  br i1 %2198, label %originalBBpart2691, label %originalBB689alteredBB

originalBBpart2691:                               ; preds = %originalBB689
  br label %4725, !dbg !1976

2199:                                             ; preds = %2179, %2176
  br label %3743, !dbg !1977

2200:                                             ; preds = %originalBBpart2162
  store i8 1, i8* %37, align 1, !dbg !1978
  store i8 1, i8* %43, align 1, !dbg !1979
  %2201 = load i32, i32* %23, align 4, !dbg !1980
  %2202 = icmp eq i32 %2201, 2, !dbg !1982
  br i1 %2202, label %2203, label %2444, !dbg !1983

2203:                                             ; preds = %2200
  %2204 = load i32, i32* @x.35
  %2205 = load i32, i32* @y.36
  %2206 = sub i32 %2204, 1
  %2207 = mul i32 %2204, %2206
  %2208 = urem i32 %2207, 2
  %2209 = icmp eq i32 %2208, 0
  %2210 = icmp slt i32 %2205, 10
  %2211 = or i1 %2209, %2210
  br i1 %2211, label %originalBB693, label %originalBB693alteredBB

originalBB693:                                    ; preds = %2203, %originalBB693alteredBB
  %2212 = load i8, i8* %35, align 1, !dbg !1984
  %2213 = trunc i8 %2212 to i1, !dbg !1984
  %2214 = load i32, i32* @x.35
  %2215 = load i32, i32* @y.36
  %2216 = sub i32 %2214, 1
  %2217 = mul i32 %2214, %2216
  %2218 = urem i32 %2217, 2
  %2219 = icmp eq i32 %2218, 0
  %2220 = icmp slt i32 %2215, 10
  %2221 = or i1 %2219, %2220
  br i1 %2221, label %originalBBpart2695, label %originalBB693alteredBB

originalBBpart2695:                               ; preds = %originalBB693
  br i1 %2213, label %2222, label %2239, !dbg !1987

2222:                                             ; preds = %originalBBpart2695
  %2223 = load i32, i32* @x.35
  %2224 = load i32, i32* @y.36
  %2225 = sub i32 %2223, 1
  %2226 = mul i32 %2223, %2225
  %2227 = urem i32 %2226, 2
  %2228 = icmp eq i32 %2227, 0
  %2229 = icmp slt i32 %2224, 10
  %2230 = or i1 %2228, %2229
  br i1 %2230, label %originalBB697, label %originalBB697alteredBB

originalBB697:                                    ; preds = %2222, %originalBB697alteredBB
  %2231 = load i32, i32* @x.35
  %2232 = load i32, i32* @y.36
  %2233 = sub i32 %2231, 1
  %2234 = mul i32 %2231, %2233
  %2235 = urem i32 %2234, 2
  %2236 = icmp eq i32 %2235, 0
  %2237 = icmp slt i32 %2232, 10
  %2238 = or i1 %2236, %2237
  br i1 %2238, label %originalBBpart2699, label %originalBB697alteredBB

originalBBpart2699:                               ; preds = %originalBB697
  br label %4725, !dbg !1988

2239:                                             ; preds = %originalBBpart2695
  %2240 = load i64, i64* %20, align 8, !dbg !1989
  %2241 = icmp ne i64 %2240, 0, !dbg !1989
  br i1 %2241, label %2242, label %2247, !dbg !1991

2242:                                             ; preds = %2239
  %2243 = load i64, i64* %30, align 8, !dbg !1992
  %2244 = icmp ne i64 %2243, 0, !dbg !1992
  br i1 %2244, label %2247, label %2245, !dbg !1993

2245:                                             ; preds = %2242
  %2246 = load i64, i64* %20, align 8, !dbg !1994
  store i64 %2246, i64* %30, align 8, !dbg !1996
  store i64 0, i64* %20, align 8, !dbg !1997
  br label %2247, !dbg !1998

2247:                                             ; preds = %2245, %2242, %2239
  %2248 = load i32, i32* @x.35
  %2249 = load i32, i32* @y.36
  %2250 = sub i32 %2248, 1
  %2251 = mul i32 %2248, %2250
  %2252 = urem i32 %2251, 2
  %2253 = icmp eq i32 %2252, 0
  %2254 = icmp slt i32 %2249, 10
  %2255 = or i1 %2253, %2254
  br i1 %2255, label %originalBB701, label %originalBB701alteredBB

originalBB701:                                    ; preds = %2247, %originalBB701alteredBB
  %2256 = load i32, i32* @x.35
  %2257 = load i32, i32* @y.36
  %2258 = sub i32 %2256, 1
  %2259 = mul i32 %2256, %2258
  %2260 = urem i32 %2259, 2
  %2261 = icmp eq i32 %2260, 0
  %2262 = icmp slt i32 %2257, 10
  %2263 = or i1 %2261, %2262
  br i1 %2263, label %originalBBpart2703, label %originalBB701alteredBB

originalBBpart2703:                               ; preds = %originalBB701
  br label %2264, !dbg !1999

2264:                                             ; preds = %originalBBpart2703
  %2265 = load i64, i64* %29, align 8, !dbg !2000
  %2266 = load i64, i64* %20, align 8, !dbg !2000
  %2267 = icmp ult i64 %2265, %2266, !dbg !2000
  br i1 %2267, label %2268, label %2288, !dbg !2003

2268:                                             ; preds = %2264
  %2269 = load i32, i32* @x.35
  %2270 = load i32, i32* @y.36
  %2271 = sub i32 %2269, 1
  %2272 = mul i32 %2269, %2271
  %2273 = urem i32 %2272, 2
  %2274 = icmp eq i32 %2273, 0
  %2275 = icmp slt i32 %2270, 10
  %2276 = or i1 %2274, %2275
  br i1 %2276, label %originalBB705, label %originalBB705alteredBB

originalBB705:                                    ; preds = %2268, %originalBB705alteredBB
  %2277 = load i8*, i8** %19, align 8, !dbg !2000
  %2278 = load i64, i64* %29, align 8, !dbg !2000
  %2279 = getelementptr inbounds i8, i8* %2277, i64 %2278, !dbg !2000
  store i8 39, i8* %2279, align 1, !dbg !2000
  %2280 = load i32, i32* @x.35
  %2281 = load i32, i32* @y.36
  %2282 = sub i32 %2280, 1
  %2283 = mul i32 %2280, %2282
  %2284 = urem i32 %2283, 2
  %2285 = icmp eq i32 %2284, 0
  %2286 = icmp slt i32 %2281, 10
  %2287 = or i1 %2285, %2286
  br i1 %2287, label %originalBBpart2707, label %originalBB705alteredBB

originalBBpart2707:                               ; preds = %originalBB705
  br label %2288, !dbg !2000

2288:                                             ; preds = %originalBBpart2707, %2264
  %2289 = load i32, i32* @x.35
  %2290 = load i32, i32* @y.36
  %2291 = sub i32 %2289, 1
  %2292 = mul i32 %2289, %2291
  %2293 = urem i32 %2292, 2
  %2294 = icmp eq i32 %2293, 0
  %2295 = icmp slt i32 %2290, 10
  %2296 = or i1 %2294, %2295
  br i1 %2296, label %originalBB709, label %originalBB709alteredBB

originalBB709:                                    ; preds = %2288, %originalBB709alteredBB
  %2297 = load i64, i64* %29, align 8, !dbg !2003
  %2298 = add i64 %2297, 1, !dbg !2003
  store i64 %2298, i64* %29, align 8, !dbg !2003
  %2299 = load i32, i32* @x.35
  %2300 = load i32, i32* @y.36
  %2301 = sub i32 %2299, 1
  %2302 = mul i32 %2299, %2301
  %2303 = urem i32 %2302, 2
  %2304 = icmp eq i32 %2303, 0
  %2305 = icmp slt i32 %2300, 10
  %2306 = or i1 %2304, %2305
  br i1 %2306, label %originalBBpart2719, label %originalBB709alteredBB

originalBBpart2719:                               ; preds = %originalBB709
  br label %2307, !dbg !2003

2307:                                             ; preds = %originalBBpart2719
  %2308 = load i32, i32* @x.35
  %2309 = load i32, i32* @y.36
  %2310 = sub i32 %2308, 1
  %2311 = mul i32 %2308, %2310
  %2312 = urem i32 %2311, 2
  %2313 = icmp eq i32 %2312, 0
  %2314 = icmp slt i32 %2309, 10
  %2315 = or i1 %2313, %2314
  br i1 %2315, label %originalBB721, label %originalBB721alteredBB

originalBB721:                                    ; preds = %2307, %originalBB721alteredBB
  %2316 = load i32, i32* @x.35
  %2317 = load i32, i32* @y.36
  %2318 = sub i32 %2316, 1
  %2319 = mul i32 %2316, %2318
  %2320 = urem i32 %2319, 2
  %2321 = icmp eq i32 %2320, 0
  %2322 = icmp slt i32 %2317, 10
  %2323 = or i1 %2321, %2322
  br i1 %2323, label %originalBBpart2723, label %originalBB721alteredBB

originalBBpart2723:                               ; preds = %originalBB721
  br label %2324, !dbg !2004

2324:                                             ; preds = %originalBBpart2723
  %2325 = load i32, i32* @x.35
  %2326 = load i32, i32* @y.36
  %2327 = sub i32 %2325, 1
  %2328 = mul i32 %2325, %2327
  %2329 = urem i32 %2328, 2
  %2330 = icmp eq i32 %2329, 0
  %2331 = icmp slt i32 %2326, 10
  %2332 = or i1 %2330, %2331
  br i1 %2332, label %originalBB725, label %originalBB725alteredBB

originalBB725:                                    ; preds = %2324, %originalBB725alteredBB
  %2333 = load i64, i64* %29, align 8, !dbg !2005
  %2334 = load i64, i64* %20, align 8, !dbg !2005
  %2335 = icmp ult i64 %2333, %2334, !dbg !2005
  %2336 = load i32, i32* @x.35
  %2337 = load i32, i32* @y.36
  %2338 = sub i32 %2336, 1
  %2339 = mul i32 %2336, %2338
  %2340 = urem i32 %2339, 2
  %2341 = icmp eq i32 %2340, 0
  %2342 = icmp slt i32 %2337, 10
  %2343 = or i1 %2341, %2342
  br i1 %2343, label %originalBBpart2727, label %originalBB725alteredBB

originalBBpart2727:                               ; preds = %originalBB725
  br i1 %2335, label %2344, label %2364, !dbg !2008

2344:                                             ; preds = %originalBBpart2727
  %2345 = load i32, i32* @x.35
  %2346 = load i32, i32* @y.36
  %2347 = sub i32 %2345, 1
  %2348 = mul i32 %2345, %2347
  %2349 = urem i32 %2348, 2
  %2350 = icmp eq i32 %2349, 0
  %2351 = icmp slt i32 %2346, 10
  %2352 = or i1 %2350, %2351
  br i1 %2352, label %originalBB729, label %originalBB729alteredBB

originalBB729:                                    ; preds = %2344, %originalBB729alteredBB
  %2353 = load i8*, i8** %19, align 8, !dbg !2005
  %2354 = load i64, i64* %29, align 8, !dbg !2005
  %2355 = getelementptr inbounds i8, i8* %2353, i64 %2354, !dbg !2005
  store i8 92, i8* %2355, align 1, !dbg !2005
  %2356 = load i32, i32* @x.35
  %2357 = load i32, i32* @y.36
  %2358 = sub i32 %2356, 1
  %2359 = mul i32 %2356, %2358
  %2360 = urem i32 %2359, 2
  %2361 = icmp eq i32 %2360, 0
  %2362 = icmp slt i32 %2357, 10
  %2363 = or i1 %2361, %2362
  br i1 %2363, label %originalBBpart2731, label %originalBB729alteredBB

originalBBpart2731:                               ; preds = %originalBB729
  br label %2364, !dbg !2005

2364:                                             ; preds = %originalBBpart2731, %originalBBpart2727
  %2365 = load i32, i32* @x.35
  %2366 = load i32, i32* @y.36
  %2367 = sub i32 %2365, 1
  %2368 = mul i32 %2365, %2367
  %2369 = urem i32 %2368, 2
  %2370 = icmp eq i32 %2369, 0
  %2371 = icmp slt i32 %2366, 10
  %2372 = or i1 %2370, %2371
  br i1 %2372, label %originalBB733, label %originalBB733alteredBB

originalBB733:                                    ; preds = %2364, %originalBB733alteredBB
  %2373 = load i64, i64* %29, align 8, !dbg !2008
  %2374 = add i64 %2373, 1, !dbg !2008
  store i64 %2374, i64* %29, align 8, !dbg !2008
  %2375 = load i32, i32* @x.35
  %2376 = load i32, i32* @y.36
  %2377 = sub i32 %2375, 1
  %2378 = mul i32 %2375, %2377
  %2379 = urem i32 %2378, 2
  %2380 = icmp eq i32 %2379, 0
  %2381 = icmp slt i32 %2376, 10
  %2382 = or i1 %2380, %2381
  br i1 %2382, label %originalBBpart2740, label %originalBB733alteredBB

originalBBpart2740:                               ; preds = %originalBB733
  br label %2383, !dbg !2008

2383:                                             ; preds = %originalBBpart2740
  br label %2384, !dbg !2009

2384:                                             ; preds = %2383
  %2385 = load i32, i32* @x.35
  %2386 = load i32, i32* @y.36
  %2387 = sub i32 %2385, 1
  %2388 = mul i32 %2385, %2387
  %2389 = urem i32 %2388, 2
  %2390 = icmp eq i32 %2389, 0
  %2391 = icmp slt i32 %2386, 10
  %2392 = or i1 %2390, %2391
  br i1 %2392, label %originalBB742, label %originalBB742alteredBB

originalBB742:                                    ; preds = %2384, %originalBB742alteredBB
  %2393 = load i64, i64* %29, align 8, !dbg !2010
  %2394 = load i64, i64* %20, align 8, !dbg !2010
  %2395 = icmp ult i64 %2393, %2394, !dbg !2010
  %2396 = load i32, i32* @x.35
  %2397 = load i32, i32* @y.36
  %2398 = sub i32 %2396, 1
  %2399 = mul i32 %2396, %2398
  %2400 = urem i32 %2399, 2
  %2401 = icmp eq i32 %2400, 0
  %2402 = icmp slt i32 %2397, 10
  %2403 = or i1 %2401, %2402
  br i1 %2403, label %originalBBpart2744, label %originalBB742alteredBB

originalBBpart2744:                               ; preds = %originalBB742
  br i1 %2395, label %2404, label %2424, !dbg !2013

2404:                                             ; preds = %originalBBpart2744
  %2405 = load i32, i32* @x.35
  %2406 = load i32, i32* @y.36
  %2407 = sub i32 %2405, 1
  %2408 = mul i32 %2405, %2407
  %2409 = urem i32 %2408, 2
  %2410 = icmp eq i32 %2409, 0
  %2411 = icmp slt i32 %2406, 10
  %2412 = or i1 %2410, %2411
  br i1 %2412, label %originalBB746, label %originalBB746alteredBB

originalBB746:                                    ; preds = %2404, %originalBB746alteredBB
  %2413 = load i8*, i8** %19, align 8, !dbg !2010
  %2414 = load i64, i64* %29, align 8, !dbg !2010
  %2415 = getelementptr inbounds i8, i8* %2413, i64 %2414, !dbg !2010
  store i8 39, i8* %2415, align 1, !dbg !2010
  %2416 = load i32, i32* @x.35
  %2417 = load i32, i32* @y.36
  %2418 = sub i32 %2416, 1
  %2419 = mul i32 %2416, %2418
  %2420 = urem i32 %2419, 2
  %2421 = icmp eq i32 %2420, 0
  %2422 = icmp slt i32 %2417, 10
  %2423 = or i1 %2421, %2422
  br i1 %2423, label %originalBBpart2748, label %originalBB746alteredBB

originalBBpart2748:                               ; preds = %originalBB746
  br label %2424, !dbg !2010

2424:                                             ; preds = %originalBBpart2748, %originalBBpart2744
  %2425 = load i32, i32* @x.35
  %2426 = load i32, i32* @y.36
  %2427 = sub i32 %2425, 1
  %2428 = mul i32 %2425, %2427
  %2429 = urem i32 %2428, 2
  %2430 = icmp eq i32 %2429, 0
  %2431 = icmp slt i32 %2426, 10
  %2432 = or i1 %2430, %2431
  br i1 %2432, label %originalBB750, label %originalBB750alteredBB

originalBB750:                                    ; preds = %2424, %originalBB750alteredBB
  %2433 = load i64, i64* %29, align 8, !dbg !2013
  %2434 = add i64 %2433, 1, !dbg !2013
  store i64 %2434, i64* %29, align 8, !dbg !2013
  %2435 = load i32, i32* @x.35
  %2436 = load i32, i32* @y.36
  %2437 = sub i32 %2435, 1
  %2438 = mul i32 %2435, %2437
  %2439 = urem i32 %2438, 2
  %2440 = icmp eq i32 %2439, 0
  %2441 = icmp slt i32 %2436, 10
  %2442 = or i1 %2440, %2441
  br i1 %2442, label %originalBBpart2758, label %originalBB750alteredBB

originalBBpart2758:                               ; preds = %originalBB750
  br label %2443, !dbg !2013

2443:                                             ; preds = %originalBBpart2758
  store i8 0, i8* %36, align 1, !dbg !2014
  br label %2444, !dbg !2015

2444:                                             ; preds = %2443, %2200
  br label %3743, !dbg !2016

2445:                                             ; preds = %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162, %originalBBpart2162
  %2446 = load i32, i32* @x.35
  %2447 = load i32, i32* @y.36
  %2448 = sub i32 %2446, 1
  %2449 = mul i32 %2446, %2448
  %2450 = urem i32 %2449, 2
  %2451 = icmp eq i32 %2450, 0
  %2452 = icmp slt i32 %2447, 10
  %2453 = or i1 %2451, %2452
  br i1 %2453, label %originalBB760, label %originalBB760alteredBB

originalBB760:                                    ; preds = %2445, %originalBB760alteredBB
  store i8 1, i8* %43, align 1, !dbg !2017
  %2454 = load i32, i32* @x.35
  %2455 = load i32, i32* @y.36
  %2456 = sub i32 %2454, 1
  %2457 = mul i32 %2454, %2456
  %2458 = urem i32 %2457, 2
  %2459 = icmp eq i32 %2458, 0
  %2460 = icmp slt i32 %2455, 10
  %2461 = or i1 %2459, %2460
  br i1 %2461, label %originalBBpart2762, label %originalBB760alteredBB

originalBBpart2762:                               ; preds = %originalBB760
  br label %3743, !dbg !2018

2462:                                             ; preds = %originalBBpart2162
  call void @llvm.dbg.declare(metadata i64* %44, metadata !2019, metadata !DIExpression()), !dbg !2021
  call void @llvm.dbg.declare(metadata i8* %45, metadata !2022, metadata !DIExpression()), !dbg !2023
  %2463 = load i32, i32* @x.35
  %2464 = load i32, i32* @y.36
  %2465 = sub i32 %2463, 1
  %2466 = mul i32 %2463, %2465
  %2467 = urem i32 %2466, 2
  %2468 = icmp eq i32 %2467, 0
  %2469 = icmp slt i32 %2464, 10
  %2470 = or i1 %2468, %2469
  br i1 %2470, label %originalBB764, label %originalBB764alteredBB

originalBB764:                                    ; preds = %2462, %originalBB764alteredBB
  %2471 = load i8, i8* %34, align 1, !dbg !2024
  %2472 = trunc i8 %2471 to i1, !dbg !2024
  %2473 = load i32, i32* @x.35
  %2474 = load i32, i32* @y.36
  %2475 = sub i32 %2473, 1
  %2476 = mul i32 %2473, %2475
  %2477 = urem i32 %2476, 2
  %2478 = icmp eq i32 %2477, 0
  %2479 = icmp slt i32 %2474, 10
  %2480 = or i1 %2478, %2479
  br i1 %2480, label %originalBBpart2766, label %originalBB764alteredBB

originalBBpart2766:                               ; preds = %originalBB764
  br i1 %2472, label %2481, label %2493, !dbg !2026

2481:                                             ; preds = %originalBBpart2766
  store i64 1, i64* %44, align 8, !dbg !2027
  %2482 = call i16** @__ctype_b_loc() #15, !dbg !2029
  %2483 = load i16*, i16** %2482, align 8, !dbg !2029
  %2484 = load i8, i8* %39, align 1, !dbg !2029
  %2485 = zext i8 %2484 to i32, !dbg !2029
  %2486 = sext i32 %2485 to i64, !dbg !2029
  %2487 = getelementptr inbounds i16, i16* %2483, i64 %2486, !dbg !2029
  %2488 = load i16, i16* %2487, align 2, !dbg !2029
  %2489 = zext i16 %2488 to i32, !dbg !2029
  %2490 = and i32 %2489, 16384, !dbg !2029
  %2491 = icmp ne i32 %2490, 0, !dbg !2030
  %2492 = zext i1 %2491 to i8, !dbg !2031
  store i8 %2492, i8* %45, align 1, !dbg !2031
  br label %2918, !dbg !2032

2493:                                             ; preds = %originalBBpart2766
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t* %46, metadata !2033, metadata !DIExpression()), !dbg !2050
  %2494 = load i32, i32* @x.35
  %2495 = load i32, i32* @y.36
  %2496 = sub i32 %2494, 1
  %2497 = mul i32 %2494, %2496
  %2498 = urem i32 %2497, 2
  %2499 = icmp eq i32 %2498, 0
  %2500 = icmp slt i32 %2495, 10
  %2501 = or i1 %2499, %2500
  br i1 %2501, label %originalBB768, label %originalBB768alteredBB

originalBB768:                                    ; preds = %2493, %originalBB768alteredBB
  %2502 = bitcast %struct.__mbstate_t* %46 to i8*, !dbg !2051
  call void @llvm.memset.p0i8.i64(i8* align 4 %2502, i8 0, i64 8, i1 false), !dbg !2051
  store i64 0, i64* %44, align 8, !dbg !2052
  store i8 1, i8* %45, align 1, !dbg !2053
  %2503 = load i64, i64* %22, align 8, !dbg !2054
  %2504 = trunc i64 %2503 to i32
  %2505 = mul i32 %2504, -2
  %2506 = mul i32 %2505, %2505
  %2507 = sub i32 %2506, %2505
  %2508 = srem i32 %2507, 2
  %2509 = icmp ne i32 %2508, 0
  %2510 = load i32, i32* @x.35
  %2511 = load i32, i32* @y.36
  %2512 = sub i32 %2510, 1
  %2513 = mul i32 %2510, %2512
  %2514 = urem i32 %2513, 2
  %2515 = icmp eq i32 %2514, 0
  %2516 = icmp slt i32 %2511, 10
  %2517 = or i1 %2515, %2516
  br i1 %2517, label %originalBBpart2784, label %originalBB768alteredBB

originalBBpart2784:                               ; preds = %originalBB768
  br i1 %2509, label %2518, label %2519

2518:                                             ; preds = %originalBBpart2784
  ret i64 0

2519:                                             ; preds = %originalBBpart2784
  %2520 = load i32, i32* @x.35
  %2521 = load i32, i32* @y.36
  %2522 = sub i32 %2520, 1
  %2523 = mul i32 %2520, %2522
  %2524 = urem i32 %2523, 2
  %2525 = icmp eq i32 %2524, 0
  %2526 = icmp slt i32 %2521, 10
  %2527 = or i1 %2525, %2526
  br i1 %2527, label %originalBB786, label %originalBB786alteredBB

originalBB786:                                    ; preds = %2519, %originalBB786alteredBB
  %2528 = icmp eq i64 %2503, -1, !dbg !2056
  %2529 = load i32, i32* @x.35
  %2530 = load i32, i32* @y.36
  %2531 = sub i32 %2529, 1
  %2532 = mul i32 %2529, %2531
  %2533 = urem i32 %2532, 2
  %2534 = icmp eq i32 %2533, 0
  %2535 = icmp slt i32 %2530, 10
  %2536 = or i1 %2534, %2535
  br i1 %2536, label %originalBBpart2788, label %originalBB786alteredBB

originalBBpart2788:                               ; preds = %originalBB786
  br i1 %2528, label %2537, label %2556, !dbg !2057

2537:                                             ; preds = %originalBBpart2788
  %2538 = load i32, i32* @x.35
  %2539 = load i32, i32* @y.36
  %2540 = sub i32 %2538, 1
  %2541 = mul i32 %2538, %2540
  %2542 = urem i32 %2541, 2
  %2543 = icmp eq i32 %2542, 0
  %2544 = icmp slt i32 %2539, 10
  %2545 = or i1 %2543, %2544
  br i1 %2545, label %originalBB790, label %originalBB790alteredBB

originalBB790:                                    ; preds = %2537, %originalBB790alteredBB
  %2546 = load i8*, i8** %21, align 8, !dbg !2058
  %2547 = call i64 @strlen(i8* %2546) #13, !dbg !2059
  store i64 %2547, i64* %22, align 8, !dbg !2060
  %2548 = load i32, i32* @x.35
  %2549 = load i32, i32* @y.36
  %2550 = sub i32 %2548, 1
  %2551 = mul i32 %2548, %2550
  %2552 = urem i32 %2551, 2
  %2553 = icmp eq i32 %2552, 0
  %2554 = icmp slt i32 %2549, 10
  %2555 = or i1 %2553, %2554
  br i1 %2555, label %originalBBpart2792, label %originalBB790alteredBB

originalBBpart2792:                               ; preds = %originalBB790
  br label %2556, !dbg !2061

2556:                                             ; preds = %originalBBpart2792, %originalBBpart2788
  br label %2557, !dbg !2062

2557:                                             ; preds = %originalBBpart2896, %2556
  call void @llvm.dbg.declare(metadata i32* %47, metadata !2063, metadata !DIExpression()), !dbg !2066
  call void @llvm.dbg.declare(metadata i64* %48, metadata !2067, metadata !DIExpression()), !dbg !2068
  %2558 = load i8*, i8** %21, align 8, !dbg !2069
  %2559 = load i64, i64* %28, align 8, !dbg !2070
  %2560 = load i64, i64* %44, align 8, !dbg !2071
  %2561 = add i64 %2559, %2560, !dbg !2072
  %2562 = getelementptr inbounds i8, i8* %2558, i64 %2561, !dbg !2069
  %2563 = load i64, i64* %22, align 8, !dbg !2073
  %2564 = load i64, i64* %28, align 8, !dbg !2074
  %2565 = load i64, i64* %44, align 8, !dbg !2075
  %2566 = add i64 %2564, %2565, !dbg !2076
  %2567 = sub i64 %2563, %2566, !dbg !2077
  %2568 = call i64 @rpl_mbrtowc(i32* %47, i8* %2562, i64 %2567, %struct.__mbstate_t* %46), !dbg !2078
  store i64 %2568, i64* %48, align 8, !dbg !2068
  %2569 = load i64, i64* %48, align 8, !dbg !2079
  %2570 = icmp eq i64 %2569, 0, !dbg !2081
  br i1 %2570, label %2571, label %2588, !dbg !2082

2571:                                             ; preds = %2557
  %2572 = load i32, i32* @x.35
  %2573 = load i32, i32* @y.36
  %2574 = sub i32 %2572, 1
  %2575 = mul i32 %2572, %2574
  %2576 = urem i32 %2575, 2
  %2577 = icmp eq i32 %2576, 0
  %2578 = icmp slt i32 %2573, 10
  %2579 = or i1 %2577, %2578
  br i1 %2579, label %originalBB794, label %originalBB794alteredBB

originalBB794:                                    ; preds = %2571, %originalBB794alteredBB
  %2580 = load i32, i32* @x.35
  %2581 = load i32, i32* @y.36
  %2582 = sub i32 %2580, 1
  %2583 = mul i32 %2580, %2582
  %2584 = urem i32 %2583, 2
  %2585 = icmp eq i32 %2584, 0
  %2586 = icmp slt i32 %2581, 10
  %2587 = or i1 %2585, %2586
  br i1 %2587, label %originalBBpart2796, label %originalBB794alteredBB

originalBBpart2796:                               ; preds = %originalBB794
  br label %2917, !dbg !2083

2588:                                             ; preds = %2557
  %2589 = load i64, i64* %48, align 8, !dbg !2084
  %2590 = icmp eq i64 %2589, -1, !dbg !2086
  br i1 %2590, label %2591, label %2608, !dbg !2087

2591:                                             ; preds = %2588
  %2592 = load i32, i32* @x.35
  %2593 = load i32, i32* @y.36
  %2594 = sub i32 %2592, 1
  %2595 = mul i32 %2592, %2594
  %2596 = urem i32 %2595, 2
  %2597 = icmp eq i32 %2596, 0
  %2598 = icmp slt i32 %2593, 10
  %2599 = or i1 %2597, %2598
  br i1 %2599, label %originalBB798, label %originalBB798alteredBB

originalBB798:                                    ; preds = %2591, %originalBB798alteredBB
  store i8 0, i8* %45, align 1, !dbg !2088
  %2600 = load i32, i32* @x.35
  %2601 = load i32, i32* @y.36
  %2602 = sub i32 %2600, 1
  %2603 = mul i32 %2600, %2602
  %2604 = urem i32 %2603, 2
  %2605 = icmp eq i32 %2604, 0
  %2606 = icmp slt i32 %2601, 10
  %2607 = or i1 %2605, %2606
  br i1 %2607, label %originalBBpart2800, label %originalBB798alteredBB

originalBBpart2800:                               ; preds = %originalBB798
  br label %2917, !dbg !2090

2608:                                             ; preds = %2588
  %2609 = load i32, i32* @x.35
  %2610 = load i32, i32* @y.36
  %2611 = sub i32 %2609, 1
  %2612 = mul i32 %2609, %2611
  %2613 = urem i32 %2612, 2
  %2614 = icmp eq i32 %2613, 0
  %2615 = icmp slt i32 %2610, 10
  %2616 = or i1 %2614, %2615
  br i1 %2616, label %originalBB802, label %originalBB802alteredBB

originalBB802:                                    ; preds = %2608, %originalBB802alteredBB
  %2617 = load i64, i64* %48, align 8, !dbg !2091
  %2618 = icmp eq i64 %2617, -2, !dbg !2093
  %2619 = load i32, i32* @x.35
  %2620 = load i32, i32* @y.36
  %2621 = sub i32 %2619, 1
  %2622 = mul i32 %2619, %2621
  %2623 = urem i32 %2622, 2
  %2624 = icmp eq i32 %2623, 0
  %2625 = icmp slt i32 %2620, 10
  %2626 = or i1 %2624, %2625
  br i1 %2626, label %originalBBpart2804, label %originalBB802alteredBB

originalBBpart2804:                               ; preds = %originalBB802
  br i1 %2618, label %2627, label %2697, !dbg !2094

2627:                                             ; preds = %originalBBpart2804
  %2628 = load i32, i32* @x.35
  %2629 = load i32, i32* @y.36
  %2630 = sub i32 %2628, 1
  %2631 = mul i32 %2628, %2630
  %2632 = urem i32 %2631, 2
  %2633 = icmp eq i32 %2632, 0
  %2634 = icmp slt i32 %2629, 10
  %2635 = or i1 %2633, %2634
  br i1 %2635, label %originalBB806, label %originalBB806alteredBB

originalBB806:                                    ; preds = %2627, %originalBB806alteredBB
  store i8 0, i8* %45, align 1, !dbg !2095
  %2636 = load i32, i32* @x.35
  %2637 = load i32, i32* @y.36
  %2638 = sub i32 %2636, 1
  %2639 = mul i32 %2636, %2638
  %2640 = urem i32 %2639, 2
  %2641 = icmp eq i32 %2640, 0
  %2642 = icmp slt i32 %2637, 10
  %2643 = or i1 %2641, %2642
  br i1 %2643, label %originalBBpart2808, label %originalBB806alteredBB

originalBBpart2808:                               ; preds = %originalBB806
  br label %2644, !dbg !2097

2644:                                             ; preds = %originalBBpart2826, %originalBBpart2808
  %2645 = load i64, i64* %28, align 8, !dbg !2098
  %2646 = load i64, i64* %44, align 8, !dbg !2099
  %2647 = add i64 %2645, %2646, !dbg !2100
  %2648 = load i64, i64* %22, align 8, !dbg !2101
  %2649 = icmp ult i64 %2647, %2648, !dbg !2102
  br i1 %2649, label %2650, label %2659, !dbg !2103

2650:                                             ; preds = %2644
  %2651 = load i8*, i8** %21, align 8, !dbg !2104
  %2652 = load i64, i64* %28, align 8, !dbg !2105
  %2653 = load i64, i64* %44, align 8, !dbg !2106
  %2654 = add i64 %2652, %2653, !dbg !2107
  %2655 = getelementptr inbounds i8, i8* %2651, i64 %2654, !dbg !2104
  %2656 = load i8, i8* %2655, align 1, !dbg !2104
  %2657 = sext i8 %2656 to i32, !dbg !2104
  %2658 = icmp ne i32 %2657, 0, !dbg !2103
  br label %2659

2659:                                             ; preds = %2650, %2644
  %2660 = phi i1 [ false, %2644 ], [ %2658, %2650 ], !dbg !2108
  %2661 = load i32, i32* @x.35
  %2662 = load i32, i32* @y.36
  %2663 = sub i32 %2661, 1
  %2664 = mul i32 %2661, %2663
  %2665 = urem i32 %2664, 2
  %2666 = icmp eq i32 %2665, 0
  %2667 = icmp slt i32 %2662, 10
  %2668 = or i1 %2666, %2667
  br i1 %2668, label %originalBB810, label %originalBB810alteredBB

originalBB810:                                    ; preds = %2659, %originalBB810alteredBB
  %2669 = load i32, i32* @x.35
  %2670 = load i32, i32* @y.36
  %2671 = sub i32 %2669, 1
  %2672 = mul i32 %2669, %2671
  %2673 = urem i32 %2672, 2
  %2674 = icmp eq i32 %2673, 0
  %2675 = icmp slt i32 %2670, 10
  %2676 = or i1 %2674, %2675
  br i1 %2676, label %originalBBpart2812, label %originalBB810alteredBB

originalBBpart2812:                               ; preds = %originalBB810
  br i1 %2660, label %2677, label %2696, !dbg !2097

2677:                                             ; preds = %originalBBpart2812
  %2678 = load i32, i32* @x.35
  %2679 = load i32, i32* @y.36
  %2680 = sub i32 %2678, 1
  %2681 = mul i32 %2678, %2680
  %2682 = urem i32 %2681, 2
  %2683 = icmp eq i32 %2682, 0
  %2684 = icmp slt i32 %2679, 10
  %2685 = or i1 %2683, %2684
  br i1 %2685, label %originalBB814, label %originalBB814alteredBB

originalBB814:                                    ; preds = %2677, %originalBB814alteredBB
  %2686 = load i64, i64* %44, align 8, !dbg !2109
  %2687 = add i64 %2686, 1, !dbg !2109
  store i64 %2687, i64* %44, align 8, !dbg !2109
  %2688 = load i32, i32* @x.35
  %2689 = load i32, i32* @y.36
  %2690 = sub i32 %2688, 1
  %2691 = mul i32 %2688, %2690
  %2692 = urem i32 %2691, 2
  %2693 = icmp eq i32 %2692, 0
  %2694 = icmp slt i32 %2689, 10
  %2695 = or i1 %2693, %2694
  br i1 %2695, label %originalBBpart2826, label %originalBB814alteredBB

originalBBpart2826:                               ; preds = %originalBB814
  br label %2644, !dbg !2097, !llvm.loop !2110

2696:                                             ; preds = %originalBBpart2812
  br label %2917, !dbg !2111

2697:                                             ; preds = %originalBBpart2804
  %2698 = load i8, i8* %35, align 1, !dbg !2112
  %2699 = trunc i8 %2698 to i1, !dbg !2112
  br i1 %2699, label %2700, label %2837, !dbg !2115

2700:                                             ; preds = %2697
  %2701 = load i32, i32* %23, align 4, !dbg !2116
  %2702 = icmp eq i32 %2701, 2, !dbg !2117
  br i1 %2702, label %2703, label %2837, !dbg !2118

2703:                                             ; preds = %2700
  call void @llvm.dbg.declare(metadata i64* %49, metadata !2119, metadata !DIExpression()), !dbg !2121
  %2704 = load i32, i32* @x.35
  %2705 = load i32, i32* @y.36
  %2706 = sub i32 %2704, 1
  %2707 = mul i32 %2704, %2706
  %2708 = urem i32 %2707, 2
  %2709 = icmp eq i32 %2708, 0
  %2710 = icmp slt i32 %2705, 10
  %2711 = or i1 %2709, %2710
  br i1 %2711, label %originalBB828, label %originalBB828alteredBB

originalBB828:                                    ; preds = %2703, %originalBB828alteredBB
  store i64 1, i64* %49, align 8, !dbg !2122
  %2712 = load i32, i32* @x.35
  %2713 = load i32, i32* @y.36
  %2714 = sub i32 %2712, 1
  %2715 = mul i32 %2712, %2714
  %2716 = urem i32 %2715, 2
  %2717 = icmp eq i32 %2716, 0
  %2718 = icmp slt i32 %2713, 10
  %2719 = or i1 %2717, %2718
  br i1 %2719, label %originalBBpart2830, label %originalBB828alteredBB

originalBBpart2830:                               ; preds = %originalBB828
  br label %2720, !dbg !2124

2720:                                             ; preds = %originalBBpart2874, %originalBBpart2830
  %2721 = load i64, i64* %49, align 8, !dbg !2125
  %2722 = load i64, i64* %48, align 8, !dbg !2127
  %2723 = icmp ult i64 %2721, %2722, !dbg !2128
  br i1 %2723, label %2724, label %2820, !dbg !2129

2724:                                             ; preds = %2720
  %2725 = load i32, i32* @x.35
  %2726 = load i32, i32* @y.36
  %2727 = sub i32 %2725, 1
  %2728 = mul i32 %2725, %2727
  %2729 = urem i32 %2728, 2
  %2730 = icmp eq i32 %2729, 0
  %2731 = icmp slt i32 %2726, 10
  %2732 = or i1 %2730, %2731
  br i1 %2732, label %originalBB832, label %originalBB832alteredBB

originalBB832:                                    ; preds = %2724, %originalBB832alteredBB
  %2733 = load i8*, i8** %21, align 8, !dbg !2130
  %2734 = load i64, i64* %28, align 8, !dbg !2131
  %2735 = load i64, i64* %44, align 8, !dbg !2132
  %2736 = add i64 %2734, %2735, !dbg !2133
  %2737 = load i64, i64* %49, align 8, !dbg !2134
  %2738 = add i64 %2736, %2737, !dbg !2135
  %2739 = getelementptr inbounds i8, i8* %2733, i64 %2738, !dbg !2130
  %2740 = load i8, i8* %2739, align 1, !dbg !2130
  %2741 = sext i8 %2740 to i32, !dbg !2130
  %2742 = load i32, i32* @x.35
  %2743 = load i32, i32* @y.36
  %2744 = sub i32 %2742, 1
  %2745 = mul i32 %2742, %2744
  %2746 = urem i32 %2745, 2
  %2747 = icmp eq i32 %2746, 0
  %2748 = icmp slt i32 %2743, 10
  %2749 = or i1 %2747, %2748
  br i1 %2749, label %originalBBpart2846, label %originalBB832alteredBB

originalBBpart2846:                               ; preds = %originalBB832
  switch i32 %2741, label %2767 [
    i32 91, label %2750
    i32 92, label %2750
    i32 94, label %2750
    i32 96, label %2750
    i32 124, label %2750
  ], !dbg !2136

2750:                                             ; preds = %originalBBpart2846, %originalBBpart2846, %originalBBpart2846, %originalBBpart2846, %originalBBpart2846
  %2751 = load i32, i32* @x.35
  %2752 = load i32, i32* @y.36
  %2753 = sub i32 %2751, 1
  %2754 = mul i32 %2751, %2753
  %2755 = urem i32 %2754, 2
  %2756 = icmp eq i32 %2755, 0
  %2757 = icmp slt i32 %2752, 10
  %2758 = or i1 %2756, %2757
  br i1 %2758, label %originalBB848, label %originalBB848alteredBB

originalBB848:                                    ; preds = %2750, %originalBB848alteredBB
  %2759 = load i32, i32* @x.35
  %2760 = load i32, i32* @y.36
  %2761 = sub i32 %2759, 1
  %2762 = mul i32 %2759, %2761
  %2763 = urem i32 %2762, 2
  %2764 = icmp eq i32 %2763, 0
  %2765 = icmp slt i32 %2760, 10
  %2766 = or i1 %2764, %2765
  br i1 %2766, label %originalBBpart2850, label %originalBB848alteredBB

originalBBpart2850:                               ; preds = %originalBB848
  br label %4725, !dbg !2137

2767:                                             ; preds = %originalBBpart2846
  %2768 = load i32, i32* @x.35
  %2769 = load i32, i32* @y.36
  %2770 = sub i32 %2768, 1
  %2771 = mul i32 %2768, %2770
  %2772 = urem i32 %2771, 2
  %2773 = icmp eq i32 %2772, 0
  %2774 = icmp slt i32 %2769, 10
  %2775 = or i1 %2773, %2774
  br i1 %2775, label %originalBB852, label %originalBB852alteredBB

originalBB852:                                    ; preds = %2767, %originalBB852alteredBB
  %2776 = load i32, i32* @x.35
  %2777 = load i32, i32* @y.36
  %2778 = sub i32 %2776, 1
  %2779 = mul i32 %2776, %2778
  %2780 = urem i32 %2779, 2
  %2781 = icmp eq i32 %2780, 0
  %2782 = icmp slt i32 %2777, 10
  %2783 = or i1 %2781, %2782
  br i1 %2783, label %originalBBpart2854, label %originalBB852alteredBB

originalBBpart2854:                               ; preds = %originalBB852
  br label %2784, !dbg !2139

2784:                                             ; preds = %originalBBpart2854
  %2785 = load i32, i32* @x.35
  %2786 = load i32, i32* @y.36
  %2787 = sub i32 %2785, 1
  %2788 = mul i32 %2785, %2787
  %2789 = urem i32 %2788, 2
  %2790 = icmp eq i32 %2789, 0
  %2791 = icmp slt i32 %2786, 10
  %2792 = or i1 %2790, %2791
  br i1 %2792, label %originalBB856, label %originalBB856alteredBB

originalBB856:                                    ; preds = %2784, %originalBB856alteredBB
  %2793 = load i32, i32* @x.35
  %2794 = load i32, i32* @y.36
  %2795 = sub i32 %2793, 1
  %2796 = mul i32 %2793, %2795
  %2797 = urem i32 %2796, 2
  %2798 = icmp eq i32 %2797, 0
  %2799 = icmp slt i32 %2794, 10
  %2800 = or i1 %2798, %2799
  br i1 %2800, label %originalBBpart2858, label %originalBB856alteredBB

originalBBpart2858:                               ; preds = %originalBB856
  br label %2801, !dbg !2140

2801:                                             ; preds = %originalBBpart2858
  %2802 = load i32, i32* @x.35
  %2803 = load i32, i32* @y.36
  %2804 = sub i32 %2802, 1
  %2805 = mul i32 %2802, %2804
  %2806 = urem i32 %2805, 2
  %2807 = icmp eq i32 %2806, 0
  %2808 = icmp slt i32 %2803, 10
  %2809 = or i1 %2807, %2808
  br i1 %2809, label %originalBB860, label %originalBB860alteredBB

originalBB860:                                    ; preds = %2801, %originalBB860alteredBB
  %2810 = load i64, i64* %49, align 8, !dbg !2141
  %2811 = add i64 %2810, 1, !dbg !2141
  store i64 %2811, i64* %49, align 8, !dbg !2141
  %2812 = load i32, i32* @x.35
  %2813 = load i32, i32* @y.36
  %2814 = sub i32 %2812, 1
  %2815 = mul i32 %2812, %2814
  %2816 = urem i32 %2815, 2
  %2817 = icmp eq i32 %2816, 0
  %2818 = icmp slt i32 %2813, 10
  %2819 = or i1 %2817, %2818
  br i1 %2819, label %originalBBpart2874, label %originalBB860alteredBB

originalBBpart2874:                               ; preds = %originalBB860
  br label %2720, !dbg !2142, !llvm.loop !2143

2820:                                             ; preds = %2720
  %2821 = load i32, i32* @x.35
  %2822 = load i32, i32* @y.36
  %2823 = sub i32 %2821, 1
  %2824 = mul i32 %2821, %2823
  %2825 = urem i32 %2824, 2
  %2826 = icmp eq i32 %2825, 0
  %2827 = icmp slt i32 %2822, 10
  %2828 = or i1 %2826, %2827
  br i1 %2828, label %originalBB876, label %originalBB876alteredBB

originalBB876:                                    ; preds = %2820, %originalBB876alteredBB
  %2829 = load i32, i32* @x.35
  %2830 = load i32, i32* @y.36
  %2831 = sub i32 %2829, 1
  %2832 = mul i32 %2829, %2831
  %2833 = urem i32 %2832, 2
  %2834 = icmp eq i32 %2833, 0
  %2835 = icmp slt i32 %2830, 10
  %2836 = or i1 %2834, %2835
  br i1 %2836, label %originalBBpart2878, label %originalBB876alteredBB

originalBBpart2878:                               ; preds = %originalBB876
  br label %2837, !dbg !2145

2837:                                             ; preds = %originalBBpart2878, %2700, %2697
  %2838 = load i32, i32* @x.35
  %2839 = load i32, i32* @y.36
  %2840 = sub i32 %2838, 1
  %2841 = mul i32 %2838, %2840
  %2842 = urem i32 %2841, 2
  %2843 = icmp eq i32 %2842, 0
  %2844 = icmp slt i32 %2839, 10
  %2845 = or i1 %2843, %2844
  br i1 %2845, label %originalBB880, label %originalBB880alteredBB

originalBB880:                                    ; preds = %2837, %originalBB880alteredBB
  %2846 = load i32, i32* %47, align 4, !dbg !2146
  %2847 = call i32 @iswprint(i32 %2846) #10, !dbg !2148
  %2848 = icmp ne i32 %2847, 0, !dbg !2148
  %2849 = load i32, i32* @x.35
  %2850 = load i32, i32* @y.36
  %2851 = sub i32 %2849, 1
  %2852 = mul i32 %2849, %2851
  %2853 = urem i32 %2852, 2
  %2854 = icmp eq i32 %2853, 0
  %2855 = icmp slt i32 %2850, 10
  %2856 = or i1 %2854, %2855
  br i1 %2856, label %originalBBpart2882, label %originalBB880alteredBB

originalBBpart2882:                               ; preds = %originalBB880
  br i1 %2848, label %2874, label %2857, !dbg !2149

2857:                                             ; preds = %originalBBpart2882
  %2858 = load i32, i32* @x.35
  %2859 = load i32, i32* @y.36
  %2860 = sub i32 %2858, 1
  %2861 = mul i32 %2858, %2860
  %2862 = urem i32 %2861, 2
  %2863 = icmp eq i32 %2862, 0
  %2864 = icmp slt i32 %2859, 10
  %2865 = or i1 %2863, %2864
  br i1 %2865, label %originalBB884, label %originalBB884alteredBB

originalBB884:                                    ; preds = %2857, %originalBB884alteredBB
  store i8 0, i8* %45, align 1, !dbg !2150
  %2866 = load i32, i32* @x.35
  %2867 = load i32, i32* @y.36
  %2868 = sub i32 %2866, 1
  %2869 = mul i32 %2866, %2868
  %2870 = urem i32 %2869, 2
  %2871 = icmp eq i32 %2870, 0
  %2872 = icmp slt i32 %2867, 10
  %2873 = or i1 %2871, %2872
  br i1 %2873, label %originalBBpart2886, label %originalBB884alteredBB

originalBBpart2886:                               ; preds = %originalBB884
  br label %2874, !dbg !2151

2874:                                             ; preds = %originalBBpart2886, %originalBBpart2882
  %2875 = load i64, i64* %48, align 8, !dbg !2152
  %2876 = load i64, i64* %44, align 8, !dbg !2153
  %2877 = add i64 %2876, %2875, !dbg !2153
  store i64 %2877, i64* %44, align 8, !dbg !2153
  br label %2878

2878:                                             ; preds = %2874
  %2879 = load i32, i32* @x.35
  %2880 = load i32, i32* @y.36
  %2881 = sub i32 %2879, 1
  %2882 = mul i32 %2879, %2881
  %2883 = urem i32 %2882, 2
  %2884 = icmp eq i32 %2883, 0
  %2885 = icmp slt i32 %2880, 10
  %2886 = or i1 %2884, %2885
  br i1 %2886, label %originalBB888, label %originalBB888alteredBB

originalBB888:                                    ; preds = %2878, %originalBB888alteredBB
  %2887 = load i32, i32* @x.35
  %2888 = load i32, i32* @y.36
  %2889 = sub i32 %2887, 1
  %2890 = mul i32 %2887, %2889
  %2891 = urem i32 %2890, 2
  %2892 = icmp eq i32 %2891, 0
  %2893 = icmp slt i32 %2888, 10
  %2894 = or i1 %2892, %2893
  br i1 %2894, label %originalBBpart2890, label %originalBB888alteredBB

originalBBpart2890:                               ; preds = %originalBB888
  br label %2895

2895:                                             ; preds = %originalBBpart2890
  br label %2896

2896:                                             ; preds = %2895
  br label %2897, !dbg !2154

2897:                                             ; preds = %2896
  %2898 = load i32, i32* @x.35
  %2899 = load i32, i32* @y.36
  %2900 = sub i32 %2898, 1
  %2901 = mul i32 %2898, %2900
  %2902 = urem i32 %2901, 2
  %2903 = icmp eq i32 %2902, 0
  %2904 = icmp slt i32 %2899, 10
  %2905 = or i1 %2903, %2904
  br i1 %2905, label %originalBB892, label %originalBB892alteredBB

originalBB892:                                    ; preds = %2897, %originalBB892alteredBB
  %2906 = call i32 @mbsinit(%struct.__mbstate_t* %46) #13, !dbg !2155
  %2907 = icmp ne i32 %2906, 0, !dbg !2156
  %2908 = xor i1 %2907, true, !dbg !2156
  %2909 = load i32, i32* @x.35
  %2910 = load i32, i32* @y.36
  %2911 = sub i32 %2909, 1
  %2912 = mul i32 %2909, %2911
  %2913 = urem i32 %2912, 2
  %2914 = icmp eq i32 %2913, 0
  %2915 = icmp slt i32 %2910, 10
  %2916 = or i1 %2914, %2915
  br i1 %2916, label %originalBBpart2896, label %originalBB892alteredBB

originalBBpart2896:                               ; preds = %originalBB892
  br i1 %2908, label %2557, label %2917, !dbg !2154, !llvm.loop !2157

2917:                                             ; preds = %originalBBpart2896, %2696, %originalBBpart2800, %originalBBpart2796
  br label %2918

2918:                                             ; preds = %2917, %2481
  %2919 = load i8, i8* %45, align 1, !dbg !2159
  %2920 = trunc i8 %2919 to i1, !dbg !2159
  %2921 = zext i1 %2920 to i8, !dbg !2160
  store i8 %2921, i8* %43, align 1, !dbg !2160
  %2922 = load i64, i64* %44, align 8, !dbg !2161
  %2923 = icmp ult i64 1, %2922, !dbg !2163
  br i1 %2923, label %2946, label %2924, !dbg !2164

2924:                                             ; preds = %2918
  %2925 = load i32, i32* @x.35
  %2926 = load i32, i32* @y.36
  %2927 = sub i32 %2925, 1
  %2928 = mul i32 %2925, %2927
  %2929 = urem i32 %2928, 2
  %2930 = icmp eq i32 %2929, 0
  %2931 = icmp slt i32 %2926, 10
  %2932 = or i1 %2930, %2931
  br i1 %2932, label %originalBB898, label %originalBB898alteredBB

originalBB898:                                    ; preds = %2924, %originalBB898alteredBB
  %2933 = load i8, i8* %33, align 1, !dbg !2165
  %2934 = trunc i8 %2933 to i1, !dbg !2165
  %2935 = load i32, i32* @x.35
  %2936 = load i32, i32* @y.36
  %2937 = sub i32 %2935, 1
  %2938 = mul i32 %2935, %2937
  %2939 = urem i32 %2938, 2
  %2940 = icmp eq i32 %2939, 0
  %2941 = icmp slt i32 %2936, 10
  %2942 = or i1 %2940, %2941
  br i1 %2942, label %originalBBpart2900, label %originalBB898alteredBB

originalBBpart2900:                               ; preds = %originalBB898
  br i1 %2934, label %2943, label %3742, !dbg !2166

2943:                                             ; preds = %originalBBpart2900
  %2944 = load i8, i8* %45, align 1, !dbg !2167
  %2945 = trunc i8 %2944 to i1, !dbg !2167
  br i1 %2945, label %3742, label %2946, !dbg !2168

2946:                                             ; preds = %2943, %2918
  call void @llvm.dbg.declare(metadata i64* %50, metadata !2169, metadata !DIExpression()), !dbg !2171
  %2947 = load i32, i32* @x.35
  %2948 = load i32, i32* @y.36
  %2949 = sub i32 %2947, 1
  %2950 = mul i32 %2947, %2949
  %2951 = urem i32 %2950, 2
  %2952 = icmp eq i32 %2951, 0
  %2953 = icmp slt i32 %2948, 10
  %2954 = or i1 %2952, %2953
  br i1 %2954, label %originalBB902, label %originalBB902alteredBB

originalBB902:                                    ; preds = %2946, %originalBB902alteredBB
  %2955 = load i64, i64* %28, align 8, !dbg !2172
  %2956 = load i64, i64* %44, align 8, !dbg !2173
  %2957 = add i64 %2955, %2956, !dbg !2174
  store i64 %2957, i64* %50, align 8, !dbg !2171
  %2958 = load i32, i32* @x.35
  %2959 = load i32, i32* @y.36
  %2960 = sub i32 %2958, 1
  %2961 = mul i32 %2958, %2960
  %2962 = urem i32 %2961, 2
  %2963 = icmp eq i32 %2962, 0
  %2964 = icmp slt i32 %2959, 10
  %2965 = or i1 %2963, %2964
  br i1 %2965, label %originalBBpart2906, label %originalBB902alteredBB

originalBBpart2906:                               ; preds = %originalBB902
  br label %2966, !dbg !2175

2966:                                             ; preds = %3719, %originalBBpart2906
  %2967 = load i8, i8* %33, align 1, !dbg !2176
  %2968 = trunc i8 %2967 to i1, !dbg !2176
  br i1 %2968, label %2969, label %3410, !dbg !2181

2969:                                             ; preds = %2966
  %2970 = load i32, i32* @x.35
  %2971 = load i32, i32* @y.36
  %2972 = sub i32 %2970, 1
  %2973 = mul i32 %2970, %2972
  %2974 = urem i32 %2973, 2
  %2975 = icmp eq i32 %2974, 0
  %2976 = icmp slt i32 %2971, 10
  %2977 = or i1 %2975, %2976
  br i1 %2977, label %originalBB908, label %originalBB908alteredBB

originalBB908:                                    ; preds = %2969, %originalBB908alteredBB
  %2978 = load i8, i8* %45, align 1, !dbg !2182
  %2979 = trunc i8 %2978 to i1, !dbg !2182
  %2980 = load i32, i32* @x.35
  %2981 = load i32, i32* @y.36
  %2982 = sub i32 %2980, 1
  %2983 = mul i32 %2980, %2982
  %2984 = urem i32 %2983, 2
  %2985 = icmp eq i32 %2984, 0
  %2986 = icmp slt i32 %2981, 10
  %2987 = or i1 %2985, %2986
  br i1 %2987, label %originalBBpart2910, label %originalBB908alteredBB

originalBBpart2910:                               ; preds = %originalBB908
  br i1 %2979, label %3410, label %2988, !dbg !2183

2988:                                             ; preds = %originalBBpart2910
  %2989 = load i32, i32* @x.35
  %2990 = load i32, i32* @y.36
  %2991 = sub i32 %2989, 1
  %2992 = mul i32 %2989, %2991
  %2993 = urem i32 %2992, 2
  %2994 = icmp eq i32 %2993, 0
  %2995 = icmp slt i32 %2990, 10
  %2996 = or i1 %2994, %2995
  br i1 %2996, label %originalBB912, label %originalBB912alteredBB

originalBB912:                                    ; preds = %2988, %originalBB912alteredBB
  %2997 = load i32, i32* @x.35
  %2998 = load i32, i32* @y.36
  %2999 = sub i32 %2997, 1
  %3000 = mul i32 %2997, %2999
  %3001 = urem i32 %3000, 2
  %3002 = icmp eq i32 %3001, 0
  %3003 = icmp slt i32 %2998, 10
  %3004 = or i1 %3002, %3003
  br i1 %3004, label %originalBBpart2914, label %originalBB912alteredBB

originalBBpart2914:                               ; preds = %originalBB912
  br label %3005, !dbg !2184

3005:                                             ; preds = %originalBBpart2914
  %3006 = load i32, i32* @x.35
  %3007 = load i32, i32* @y.36
  %3008 = sub i32 %3006, 1
  %3009 = mul i32 %3006, %3008
  %3010 = urem i32 %3009, 2
  %3011 = icmp eq i32 %3010, 0
  %3012 = icmp slt i32 %3007, 10
  %3013 = or i1 %3011, %3012
  br i1 %3013, label %originalBB916, label %originalBB916alteredBB

originalBB916:                                    ; preds = %3005, %originalBB916alteredBB
  %3014 = load i8, i8* %35, align 1, !dbg !2186
  %3015 = trunc i8 %3014 to i1, !dbg !2186
  %3016 = load i32, i32* @x.35
  %3017 = load i32, i32* @y.36
  %3018 = sub i32 %3016, 1
  %3019 = mul i32 %3016, %3018
  %3020 = urem i32 %3019, 2
  %3021 = icmp eq i32 %3020, 0
  %3022 = icmp slt i32 %3017, 10
  %3023 = or i1 %3021, %3022
  br i1 %3023, label %originalBBpart2918, label %originalBB916alteredBB

originalBBpart2918:                               ; preds = %originalBB916
  br i1 %3015, label %3024, label %3041, !dbg !2189

3024:                                             ; preds = %originalBBpart2918
  %3025 = load i32, i32* @x.35
  %3026 = load i32, i32* @y.36
  %3027 = sub i32 %3025, 1
  %3028 = mul i32 %3025, %3027
  %3029 = urem i32 %3028, 2
  %3030 = icmp eq i32 %3029, 0
  %3031 = icmp slt i32 %3026, 10
  %3032 = or i1 %3030, %3031
  br i1 %3032, label %originalBB920, label %originalBB920alteredBB

originalBB920:                                    ; preds = %3024, %originalBB920alteredBB
  %3033 = load i32, i32* @x.35
  %3034 = load i32, i32* @y.36
  %3035 = sub i32 %3033, 1
  %3036 = mul i32 %3033, %3035
  %3037 = urem i32 %3036, 2
  %3038 = icmp eq i32 %3037, 0
  %3039 = icmp slt i32 %3034, 10
  %3040 = or i1 %3038, %3039
  br i1 %3040, label %originalBBpart2922, label %originalBB920alteredBB

originalBBpart2922:                               ; preds = %originalBB920
  br label %4725, !dbg !2186

3041:                                             ; preds = %originalBBpart2918
  %3042 = load i32, i32* @x.35
  %3043 = load i32, i32* @y.36
  %3044 = sub i32 %3042, 1
  %3045 = mul i32 %3042, %3044
  %3046 = urem i32 %3045, 2
  %3047 = icmp eq i32 %3046, 0
  %3048 = icmp slt i32 %3043, 10
  %3049 = or i1 %3047, %3048
  br i1 %3049, label %originalBB924, label %originalBB924alteredBB

originalBB924:                                    ; preds = %3041, %originalBB924alteredBB
  store i8 1, i8* %42, align 1, !dbg !2189
  %3050 = load i32, i32* %23, align 4, !dbg !2190
  %3051 = icmp eq i32 %3050, 2, !dbg !2190
  %3052 = load i32, i32* @x.35
  %3053 = load i32, i32* @y.36
  %3054 = sub i32 %3052, 1
  %3055 = mul i32 %3052, %3054
  %3056 = urem i32 %3055, 2
  %3057 = icmp eq i32 %3056, 0
  %3058 = icmp slt i32 %3053, 10
  %3059 = or i1 %3057, %3058
  br i1 %3059, label %originalBBpart2926, label %originalBB924alteredBB

originalBBpart2926:                               ; preds = %originalBB924
  br i1 %3051, label %3060, label %3212, !dbg !2190

3060:                                             ; preds = %originalBBpart2926
  %3061 = load i8, i8* %36, align 1, !dbg !2190
  %3062 = trunc i8 %3061 to i1, !dbg !2190
  br i1 %3062, label %3212, label %3063, !dbg !2189

3063:                                             ; preds = %3060
  br label %3064, !dbg !2192

3064:                                             ; preds = %3063
  %3065 = load i32, i32* @x.35
  %3066 = load i32, i32* @y.36
  %3067 = sub i32 %3065, 1
  %3068 = mul i32 %3065, %3067
  %3069 = urem i32 %3068, 2
  %3070 = icmp eq i32 %3069, 0
  %3071 = icmp slt i32 %3066, 10
  %3072 = or i1 %3070, %3071
  br i1 %3072, label %originalBB928, label %originalBB928alteredBB

originalBB928:                                    ; preds = %3064, %originalBB928alteredBB
  %3073 = load i64, i64* %29, align 8, !dbg !2194
  %3074 = load i64, i64* %20, align 8, !dbg !2194
  %3075 = icmp ult i64 %3073, %3074, !dbg !2194
  %3076 = load i32, i32* @x.35
  %3077 = load i32, i32* @y.36
  %3078 = sub i32 %3076, 1
  %3079 = mul i32 %3076, %3078
  %3080 = urem i32 %3079, 2
  %3081 = icmp eq i32 %3080, 0
  %3082 = icmp slt i32 %3077, 10
  %3083 = or i1 %3081, %3082
  br i1 %3083, label %originalBBpart2930, label %originalBB928alteredBB

originalBBpart2930:                               ; preds = %originalBB928
  br i1 %3075, label %3084, label %3088, !dbg !2197

3084:                                             ; preds = %originalBBpart2930
  %3085 = load i8*, i8** %19, align 8, !dbg !2194
  %3086 = load i64, i64* %29, align 8, !dbg !2194
  %3087 = getelementptr inbounds i8, i8* %3085, i64 %3086, !dbg !2194
  store i8 39, i8* %3087, align 1, !dbg !2194
  br label %3088, !dbg !2194

3088:                                             ; preds = %3084, %originalBBpart2930
  %3089 = load i32, i32* @x.35
  %3090 = load i32, i32* @y.36
  %3091 = sub i32 %3089, 1
  %3092 = mul i32 %3089, %3091
  %3093 = urem i32 %3092, 2
  %3094 = icmp eq i32 %3093, 0
  %3095 = icmp slt i32 %3090, 10
  %3096 = or i1 %3094, %3095
  br i1 %3096, label %originalBB932, label %originalBB932alteredBB

originalBB932:                                    ; preds = %3088, %originalBB932alteredBB
  %3097 = load i64, i64* %29, align 8, !dbg !2197
  %3098 = add i64 %3097, 1, !dbg !2197
  store i64 %3098, i64* %29, align 8, !dbg !2197
  %3099 = load i32, i32* @x.35
  %3100 = load i32, i32* @y.36
  %3101 = sub i32 %3099, 1
  %3102 = mul i32 %3099, %3101
  %3103 = urem i32 %3102, 2
  %3104 = icmp eq i32 %3103, 0
  %3105 = icmp slt i32 %3100, 10
  %3106 = or i1 %3104, %3105
  br i1 %3106, label %originalBBpart2940, label %originalBB932alteredBB

originalBBpart2940:                               ; preds = %originalBB932
  br label %3107, !dbg !2197

3107:                                             ; preds = %originalBBpart2940
  %3108 = load i32, i32* @x.35
  %3109 = load i32, i32* @y.36
  %3110 = sub i32 %3108, 1
  %3111 = mul i32 %3108, %3110
  %3112 = urem i32 %3111, 2
  %3113 = icmp eq i32 %3112, 0
  %3114 = icmp slt i32 %3109, 10
  %3115 = or i1 %3113, %3114
  br i1 %3115, label %originalBB942, label %originalBB942alteredBB

originalBB942:                                    ; preds = %3107, %originalBB942alteredBB
  %3116 = load i32, i32* @x.35
  %3117 = load i32, i32* @y.36
  %3118 = sub i32 %3116, 1
  %3119 = mul i32 %3116, %3118
  %3120 = urem i32 %3119, 2
  %3121 = icmp eq i32 %3120, 0
  %3122 = icmp slt i32 %3117, 10
  %3123 = or i1 %3121, %3122
  br i1 %3123, label %originalBBpart2944, label %originalBB942alteredBB

originalBBpart2944:                               ; preds = %originalBB942
  br label %3124, !dbg !2192

3124:                                             ; preds = %originalBBpart2944
  %3125 = load i64, i64* %29, align 8, !dbg !2198
  %3126 = load i64, i64* %20, align 8, !dbg !2198
  %3127 = icmp ult i64 %3125, %3126, !dbg !2198
  br i1 %3127, label %3128, label %3148, !dbg !2201

3128:                                             ; preds = %3124
  %3129 = load i32, i32* @x.35
  %3130 = load i32, i32* @y.36
  %3131 = sub i32 %3129, 1
  %3132 = mul i32 %3129, %3131
  %3133 = urem i32 %3132, 2
  %3134 = icmp eq i32 %3133, 0
  %3135 = icmp slt i32 %3130, 10
  %3136 = or i1 %3134, %3135
  br i1 %3136, label %originalBB946, label %originalBB946alteredBB

originalBB946:                                    ; preds = %3128, %originalBB946alteredBB
  %3137 = load i8*, i8** %19, align 8, !dbg !2198
  %3138 = load i64, i64* %29, align 8, !dbg !2198
  %3139 = getelementptr inbounds i8, i8* %3137, i64 %3138, !dbg !2198
  store i8 36, i8* %3139, align 1, !dbg !2198
  %3140 = load i32, i32* @x.35
  %3141 = load i32, i32* @y.36
  %3142 = sub i32 %3140, 1
  %3143 = mul i32 %3140, %3142
  %3144 = urem i32 %3143, 2
  %3145 = icmp eq i32 %3144, 0
  %3146 = icmp slt i32 %3141, 10
  %3147 = or i1 %3145, %3146
  br i1 %3147, label %originalBBpart2948, label %originalBB946alteredBB

originalBBpart2948:                               ; preds = %originalBB946
  br label %3148, !dbg !2198

3148:                                             ; preds = %originalBBpart2948, %3124
  %3149 = load i32, i32* @x.35
  %3150 = load i32, i32* @y.36
  %3151 = sub i32 %3149, 1
  %3152 = mul i32 %3149, %3151
  %3153 = urem i32 %3152, 2
  %3154 = icmp eq i32 %3153, 0
  %3155 = icmp slt i32 %3150, 10
  %3156 = or i1 %3154, %3155
  br i1 %3156, label %originalBB950, label %originalBB950alteredBB

originalBB950:                                    ; preds = %3148, %originalBB950alteredBB
  %3157 = load i64, i64* %29, align 8, !dbg !2201
  %3158 = add i64 %3157, 1, !dbg !2201
  store i64 %3158, i64* %29, align 8, !dbg !2201
  %3159 = load i32, i32* @x.35
  %3160 = load i32, i32* @y.36
  %3161 = sub i32 %3159, 1
  %3162 = mul i32 %3159, %3161
  %3163 = urem i32 %3162, 2
  %3164 = icmp eq i32 %3163, 0
  %3165 = icmp slt i32 %3160, 10
  %3166 = or i1 %3164, %3165
  br i1 %3166, label %originalBBpart2955, label %originalBB950alteredBB

originalBBpart2955:                               ; preds = %originalBB950
  br label %3167, !dbg !2201

3167:                                             ; preds = %originalBBpart2955
  %3168 = load i32, i32* @x.35
  %3169 = load i32, i32* @y.36
  %3170 = sub i32 %3168, 1
  %3171 = mul i32 %3168, %3170
  %3172 = urem i32 %3171, 2
  %3173 = icmp eq i32 %3172, 0
  %3174 = icmp slt i32 %3169, 10
  %3175 = or i1 %3173, %3174
  br i1 %3175, label %originalBB957, label %originalBB957alteredBB

originalBB957:                                    ; preds = %3167, %originalBB957alteredBB
  %3176 = load i32, i32* @x.35
  %3177 = load i32, i32* @y.36
  %3178 = sub i32 %3176, 1
  %3179 = mul i32 %3176, %3178
  %3180 = urem i32 %3179, 2
  %3181 = icmp eq i32 %3180, 0
  %3182 = icmp slt i32 %3177, 10
  %3183 = or i1 %3181, %3182
  br i1 %3183, label %originalBBpart2959, label %originalBB957alteredBB

originalBBpart2959:                               ; preds = %originalBB957
  br label %3184, !dbg !2192

3184:                                             ; preds = %originalBBpart2959
  %3185 = load i64, i64* %29, align 8, !dbg !2202
  %3186 = load i64, i64* %20, align 8, !dbg !2202
  %3187 = icmp ult i64 %3185, %3186, !dbg !2202
  br i1 %3187, label %3188, label %3208, !dbg !2205

3188:                                             ; preds = %3184
  %3189 = load i32, i32* @x.35
  %3190 = load i32, i32* @y.36
  %3191 = sub i32 %3189, 1
  %3192 = mul i32 %3189, %3191
  %3193 = urem i32 %3192, 2
  %3194 = icmp eq i32 %3193, 0
  %3195 = icmp slt i32 %3190, 10
  %3196 = or i1 %3194, %3195
  br i1 %3196, label %originalBB961, label %originalBB961alteredBB

originalBB961:                                    ; preds = %3188, %originalBB961alteredBB
  %3197 = load i8*, i8** %19, align 8, !dbg !2202
  %3198 = load i64, i64* %29, align 8, !dbg !2202
  %3199 = getelementptr inbounds i8, i8* %3197, i64 %3198, !dbg !2202
  store i8 39, i8* %3199, align 1, !dbg !2202
  %3200 = load i32, i32* @x.35
  %3201 = load i32, i32* @y.36
  %3202 = sub i32 %3200, 1
  %3203 = mul i32 %3200, %3202
  %3204 = urem i32 %3203, 2
  %3205 = icmp eq i32 %3204, 0
  %3206 = icmp slt i32 %3201, 10
  %3207 = or i1 %3205, %3206
  br i1 %3207, label %originalBBpart2963, label %originalBB961alteredBB

originalBBpart2963:                               ; preds = %originalBB961
  br label %3208, !dbg !2202

3208:                                             ; preds = %originalBBpart2963, %3184
  %3209 = load i64, i64* %29, align 8, !dbg !2205
  %3210 = add i64 %3209, 1, !dbg !2205
  store i64 %3210, i64* %29, align 8, !dbg !2205
  br label %3211, !dbg !2205

3211:                                             ; preds = %3208
  store i8 1, i8* %36, align 1, !dbg !2192
  br label %3212, !dbg !2192

3212:                                             ; preds = %3211, %3060, %originalBBpart2926
  %3213 = load i32, i32* @x.35
  %3214 = load i32, i32* @y.36
  %3215 = sub i32 %3213, 1
  %3216 = mul i32 %3213, %3215
  %3217 = urem i32 %3216, 2
  %3218 = icmp eq i32 %3217, 0
  %3219 = icmp slt i32 %3214, 10
  %3220 = or i1 %3218, %3219
  br i1 %3220, label %originalBB965, label %originalBB965alteredBB

originalBB965:                                    ; preds = %3212, %originalBB965alteredBB
  %3221 = load i32, i32* @x.35
  %3222 = load i32, i32* @y.36
  %3223 = sub i32 %3221, 1
  %3224 = mul i32 %3221, %3223
  %3225 = urem i32 %3224, 2
  %3226 = icmp eq i32 %3225, 0
  %3227 = icmp slt i32 %3222, 10
  %3228 = or i1 %3226, %3227
  br i1 %3228, label %originalBBpart2967, label %originalBB965alteredBB

originalBBpart2967:                               ; preds = %originalBB965
  br label %3229, !dbg !2189

3229:                                             ; preds = %originalBBpart2967
  %3230 = load i32, i32* @x.35
  %3231 = load i32, i32* @y.36
  %3232 = sub i32 %3230, 1
  %3233 = mul i32 %3230, %3232
  %3234 = urem i32 %3233, 2
  %3235 = icmp eq i32 %3234, 0
  %3236 = icmp slt i32 %3231, 10
  %3237 = or i1 %3235, %3236
  br i1 %3237, label %originalBB969, label %originalBB969alteredBB

originalBB969:                                    ; preds = %3229, %originalBB969alteredBB
  %3238 = load i64, i64* %29, align 8, !dbg !2206
  %3239 = load i64, i64* %20, align 8, !dbg !2206
  %3240 = icmp ult i64 %3238, %3239, !dbg !2206
  %3241 = load i32, i32* @x.35
  %3242 = load i32, i32* @y.36
  %3243 = sub i32 %3241, 1
  %3244 = mul i32 %3241, %3243
  %3245 = urem i32 %3244, 2
  %3246 = icmp eq i32 %3245, 0
  %3247 = icmp slt i32 %3242, 10
  %3248 = or i1 %3246, %3247
  br i1 %3248, label %originalBBpart2971, label %originalBB969alteredBB

originalBBpart2971:                               ; preds = %originalBB969
  br i1 %3240, label %3249, label %3269, !dbg !2209

3249:                                             ; preds = %originalBBpart2971
  %3250 = load i32, i32* @x.35
  %3251 = load i32, i32* @y.36
  %3252 = sub i32 %3250, 1
  %3253 = mul i32 %3250, %3252
  %3254 = urem i32 %3253, 2
  %3255 = icmp eq i32 %3254, 0
  %3256 = icmp slt i32 %3251, 10
  %3257 = or i1 %3255, %3256
  br i1 %3257, label %originalBB973, label %originalBB973alteredBB

originalBB973:                                    ; preds = %3249, %originalBB973alteredBB
  %3258 = load i8*, i8** %19, align 8, !dbg !2206
  %3259 = load i64, i64* %29, align 8, !dbg !2206
  %3260 = getelementptr inbounds i8, i8* %3258, i64 %3259, !dbg !2206
  store i8 92, i8* %3260, align 1, !dbg !2206
  %3261 = load i32, i32* @x.35
  %3262 = load i32, i32* @y.36
  %3263 = sub i32 %3261, 1
  %3264 = mul i32 %3261, %3263
  %3265 = urem i32 %3264, 2
  %3266 = icmp eq i32 %3265, 0
  %3267 = icmp slt i32 %3262, 10
  %3268 = or i1 %3266, %3267
  br i1 %3268, label %originalBBpart2975, label %originalBB973alteredBB

originalBBpart2975:                               ; preds = %originalBB973
  br label %3269, !dbg !2206

3269:                                             ; preds = %originalBBpart2975, %originalBBpart2971
  %3270 = load i32, i32* @x.35
  %3271 = load i32, i32* @y.36
  %3272 = sub i32 %3270, 1
  %3273 = mul i32 %3270, %3272
  %3274 = urem i32 %3273, 2
  %3275 = icmp eq i32 %3274, 0
  %3276 = icmp slt i32 %3271, 10
  %3277 = or i1 %3275, %3276
  br i1 %3277, label %originalBB977, label %originalBB977alteredBB

originalBB977:                                    ; preds = %3269, %originalBB977alteredBB
  %3278 = load i64, i64* %29, align 8, !dbg !2209
  %3279 = add i64 %3278, 1, !dbg !2209
  store i64 %3279, i64* %29, align 8, !dbg !2209
  %3280 = load i32, i32* @x.35
  %3281 = load i32, i32* @y.36
  %3282 = sub i32 %3280, 1
  %3283 = mul i32 %3280, %3282
  %3284 = urem i32 %3283, 2
  %3285 = icmp eq i32 %3284, 0
  %3286 = icmp slt i32 %3281, 10
  %3287 = or i1 %3285, %3286
  br i1 %3287, label %originalBBpart2985, label %originalBB977alteredBB

originalBBpart2985:                               ; preds = %originalBB977
  br label %3288, !dbg !2209

3288:                                             ; preds = %originalBBpart2985
  br label %3289, !dbg !2189

3289:                                             ; preds = %3288
  %3290 = load i32, i32* @x.35
  %3291 = load i32, i32* @y.36
  %3292 = sub i32 %3290, 1
  %3293 = mul i32 %3290, %3292
  %3294 = urem i32 %3293, 2
  %3295 = icmp eq i32 %3294, 0
  %3296 = icmp slt i32 %3291, 10
  %3297 = or i1 %3295, %3296
  br i1 %3297, label %originalBB987, label %originalBB987alteredBB

originalBB987:                                    ; preds = %3289, %originalBB987alteredBB
  %3298 = load i32, i32* @x.35
  %3299 = load i32, i32* @y.36
  %3300 = sub i32 %3298, 1
  %3301 = mul i32 %3298, %3300
  %3302 = urem i32 %3301, 2
  %3303 = icmp eq i32 %3302, 0
  %3304 = icmp slt i32 %3299, 10
  %3305 = or i1 %3303, %3304
  br i1 %3305, label %originalBBpart2989, label %originalBB987alteredBB

originalBBpart2989:                               ; preds = %originalBB987
  br label %3306, !dbg !2210

3306:                                             ; preds = %originalBBpart2989
  %3307 = load i32, i32* @x.35
  %3308 = load i32, i32* @y.36
  %3309 = sub i32 %3307, 1
  %3310 = mul i32 %3307, %3309
  %3311 = urem i32 %3310, 2
  %3312 = icmp eq i32 %3311, 0
  %3313 = icmp slt i32 %3308, 10
  %3314 = or i1 %3312, %3313
  br i1 %3314, label %originalBB991, label %originalBB991alteredBB

originalBB991:                                    ; preds = %3306, %originalBB991alteredBB
  %3315 = load i64, i64* %29, align 8, !dbg !2211
  %3316 = load i64, i64* %20, align 8, !dbg !2211
  %3317 = icmp ult i64 %3315, %3316, !dbg !2211
  %3318 = load i32, i32* @x.35
  %3319 = load i32, i32* @y.36
  %3320 = sub i32 %3318, 1
  %3321 = mul i32 %3318, %3320
  %3322 = urem i32 %3321, 2
  %3323 = icmp eq i32 %3322, 0
  %3324 = icmp slt i32 %3319, 10
  %3325 = or i1 %3323, %3324
  br i1 %3325, label %originalBBpart2993, label %originalBB991alteredBB

originalBBpart2993:                               ; preds = %originalBB991
  br i1 %3317, label %3326, label %3351, !dbg !2214

3326:                                             ; preds = %originalBBpart2993
  %3327 = load i32, i32* @x.35
  %3328 = load i32, i32* @y.36
  %3329 = sub i32 %3327, 1
  %3330 = mul i32 %3327, %3329
  %3331 = urem i32 %3330, 2
  %3332 = icmp eq i32 %3331, 0
  %3333 = icmp slt i32 %3328, 10
  %3334 = or i1 %3332, %3333
  br i1 %3334, label %originalBB995, label %originalBB995alteredBB

originalBB995:                                    ; preds = %3326, %originalBB995alteredBB
  %3335 = load i8, i8* %39, align 1, !dbg !2211
  %3336 = zext i8 %3335 to i32, !dbg !2211
  %3337 = ashr i32 %3336, 6, !dbg !2211
  %3338 = add nsw i32 48, %3337, !dbg !2211
  %3339 = trunc i32 %3338 to i8, !dbg !2211
  %3340 = load i8*, i8** %19, align 8, !dbg !2211
  %3341 = load i64, i64* %29, align 8, !dbg !2211
  %3342 = getelementptr inbounds i8, i8* %3340, i64 %3341, !dbg !2211
  store i8 %3339, i8* %3342, align 1, !dbg !2211
  %3343 = load i32, i32* @x.35
  %3344 = load i32, i32* @y.36
  %3345 = sub i32 %3343, 1
  %3346 = mul i32 %3343, %3345
  %3347 = urem i32 %3346, 2
  %3348 = icmp eq i32 %3347, 0
  %3349 = icmp slt i32 %3344, 10
  %3350 = or i1 %3348, %3349
  br i1 %3350, label %originalBBpart21017, label %originalBB995alteredBB

originalBBpart21017:                              ; preds = %originalBB995
  br label %3351, !dbg !2211

3351:                                             ; preds = %originalBBpart21017, %originalBBpart2993
  %3352 = load i32, i32* @x.35
  %3353 = load i32, i32* @y.36
  %3354 = sub i32 %3352, 1
  %3355 = mul i32 %3352, %3354
  %3356 = urem i32 %3355, 2
  %3357 = icmp eq i32 %3356, 0
  %3358 = icmp slt i32 %3353, 10
  %3359 = or i1 %3357, %3358
  br i1 %3359, label %originalBB1019, label %originalBB1019alteredBB

originalBB1019:                                   ; preds = %3351, %originalBB1019alteredBB
  %3360 = load i64, i64* %29, align 8, !dbg !2214
  %3361 = add i64 %3360, 1, !dbg !2214
  store i64 %3361, i64* %29, align 8, !dbg !2214
  %3362 = load i32, i32* @x.35
  %3363 = load i32, i32* @y.36
  %3364 = sub i32 %3362, 1
  %3365 = mul i32 %3362, %3364
  %3366 = urem i32 %3365, 2
  %3367 = icmp eq i32 %3366, 0
  %3368 = icmp slt i32 %3363, 10
  %3369 = or i1 %3367, %3368
  br i1 %3369, label %originalBBpart21026, label %originalBB1019alteredBB

originalBBpart21026:                              ; preds = %originalBB1019
  br label %3370, !dbg !2214

3370:                                             ; preds = %originalBBpart21026
  br label %3371, !dbg !2215

3371:                                             ; preds = %3370
  %3372 = load i32, i32* @x.35
  %3373 = load i32, i32* @y.36
  %3374 = sub i32 %3372, 1
  %3375 = mul i32 %3372, %3374
  %3376 = urem i32 %3375, 2
  %3377 = icmp eq i32 %3376, 0
  %3378 = icmp slt i32 %3373, 10
  %3379 = or i1 %3377, %3378
  br i1 %3379, label %originalBB1028, label %originalBB1028alteredBB

originalBB1028:                                   ; preds = %3371, %originalBB1028alteredBB
  %3380 = load i64, i64* %29, align 8, !dbg !2216
  %3381 = load i64, i64* %20, align 8, !dbg !2216
  %3382 = icmp ult i64 %3380, %3381, !dbg !2216
  %3383 = load i32, i32* @x.35
  %3384 = load i32, i32* @y.36
  %3385 = sub i32 %3383, 1
  %3386 = mul i32 %3383, %3385
  %3387 = urem i32 %3386, 2
  %3388 = icmp eq i32 %3387, 0
  %3389 = icmp slt i32 %3384, 10
  %3390 = or i1 %3388, %3389
  br i1 %3390, label %originalBBpart21030, label %originalBB1028alteredBB

originalBBpart21030:                              ; preds = %originalBB1028
  br i1 %3382, label %3391, label %3401, !dbg !2219

3391:                                             ; preds = %originalBBpart21030
  %3392 = load i8, i8* %39, align 1, !dbg !2216
  %3393 = zext i8 %3392 to i32, !dbg !2216
  %3394 = ashr i32 %3393, 3, !dbg !2216
  %3395 = and i32 %3394, 7, !dbg !2216
  %3396 = add nsw i32 48, %3395, !dbg !2216
  %3397 = trunc i32 %3396 to i8, !dbg !2216
  %3398 = load i8*, i8** %19, align 8, !dbg !2216
  %3399 = load i64, i64* %29, align 8, !dbg !2216
  %3400 = getelementptr inbounds i8, i8* %3398, i64 %3399, !dbg !2216
  store i8 %3397, i8* %3400, align 1, !dbg !2216
  br label %3401, !dbg !2216

3401:                                             ; preds = %3391, %originalBBpart21030
  %3402 = load i64, i64* %29, align 8, !dbg !2219
  %3403 = add i64 %3402, 1, !dbg !2219
  store i64 %3403, i64* %29, align 8, !dbg !2219
  br label %3404, !dbg !2219

3404:                                             ; preds = %3401
  %3405 = load i8, i8* %39, align 1, !dbg !2220
  %3406 = zext i8 %3405 to i32, !dbg !2220
  %3407 = and i32 %3406, 7, !dbg !2221
  %3408 = add nsw i32 48, %3407, !dbg !2222
  %3409 = trunc i32 %3408 to i8, !dbg !2223
  store i8 %3409, i8* %39, align 1, !dbg !2224
  br label %3491, !dbg !2225

3410:                                             ; preds = %originalBBpart2910, %2966
  %3411 = load i32, i32* @x.35
  %3412 = load i32, i32* @y.36
  %3413 = sub i32 %3411, 1
  %3414 = mul i32 %3411, %3413
  %3415 = urem i32 %3414, 2
  %3416 = icmp eq i32 %3415, 0
  %3417 = icmp slt i32 %3412, 10
  %3418 = or i1 %3416, %3417
  br i1 %3418, label %originalBB1032, label %originalBB1032alteredBB

originalBB1032:                                   ; preds = %3410, %originalBB1032alteredBB
  %3419 = load i8, i8* %41, align 1, !dbg !2226
  %3420 = trunc i8 %3419 to i1, !dbg !2226
  %3421 = load i32, i32* @x.35
  %3422 = load i32, i32* @y.36
  %3423 = sub i32 %3421, 1
  %3424 = mul i32 %3421, %3423
  %3425 = urem i32 %3424, 2
  %3426 = icmp eq i32 %3425, 0
  %3427 = icmp slt i32 %3422, 10
  %3428 = or i1 %3426, %3427
  br i1 %3428, label %originalBBpart21034, label %originalBB1032alteredBB

originalBBpart21034:                              ; preds = %originalBB1032
  br i1 %3420, label %3429, label %3474, !dbg !2228

3429:                                             ; preds = %originalBBpart21034
  br label %3430, !dbg !2229

3430:                                             ; preds = %3429
  %3431 = load i64, i64* %29, align 8, !dbg !2231
  %3432 = load i64, i64* %20, align 8, !dbg !2231
  %3433 = icmp ult i64 %3431, %3432, !dbg !2231
  br i1 %3433, label %3434, label %3454, !dbg !2234

3434:                                             ; preds = %3430
  %3435 = load i32, i32* @x.35
  %3436 = load i32, i32* @y.36
  %3437 = sub i32 %3435, 1
  %3438 = mul i32 %3435, %3437
  %3439 = urem i32 %3438, 2
  %3440 = icmp eq i32 %3439, 0
  %3441 = icmp slt i32 %3436, 10
  %3442 = or i1 %3440, %3441
  br i1 %3442, label %originalBB1036, label %originalBB1036alteredBB

originalBB1036:                                   ; preds = %3434, %originalBB1036alteredBB
  %3443 = load i8*, i8** %19, align 8, !dbg !2231
  %3444 = load i64, i64* %29, align 8, !dbg !2231
  %3445 = getelementptr inbounds i8, i8* %3443, i64 %3444, !dbg !2231
  store i8 92, i8* %3445, align 1, !dbg !2231
  %3446 = load i32, i32* @x.35
  %3447 = load i32, i32* @y.36
  %3448 = sub i32 %3446, 1
  %3449 = mul i32 %3446, %3448
  %3450 = urem i32 %3449, 2
  %3451 = icmp eq i32 %3450, 0
  %3452 = icmp slt i32 %3447, 10
  %3453 = or i1 %3451, %3452
  br i1 %3453, label %originalBBpart21038, label %originalBB1036alteredBB

originalBBpart21038:                              ; preds = %originalBB1036
  br label %3454, !dbg !2231

3454:                                             ; preds = %originalBBpart21038, %3430
  %3455 = load i64, i64* %29, align 8, !dbg !2234
  %3456 = add i64 %3455, 1, !dbg !2234
  store i64 %3456, i64* %29, align 8, !dbg !2234
  br label %3457, !dbg !2234

3457:                                             ; preds = %3454
  %3458 = load i32, i32* @x.35
  %3459 = load i32, i32* @y.36
  %3460 = sub i32 %3458, 1
  %3461 = mul i32 %3458, %3460
  %3462 = urem i32 %3461, 2
  %3463 = icmp eq i32 %3462, 0
  %3464 = icmp slt i32 %3459, 10
  %3465 = or i1 %3463, %3464
  br i1 %3465, label %originalBB1040, label %originalBB1040alteredBB

originalBB1040:                                   ; preds = %3457, %originalBB1040alteredBB
  store i8 0, i8* %41, align 1, !dbg !2235
  %3466 = load i32, i32* @x.35
  %3467 = load i32, i32* @y.36
  %3468 = sub i32 %3466, 1
  %3469 = mul i32 %3466, %3468
  %3470 = urem i32 %3469, 2
  %3471 = icmp eq i32 %3470, 0
  %3472 = icmp slt i32 %3467, 10
  %3473 = or i1 %3471, %3472
  br i1 %3473, label %originalBBpart21042, label %originalBB1040alteredBB

originalBBpart21042:                              ; preds = %originalBB1040
  br label %3474, !dbg !2236

3474:                                             ; preds = %originalBBpart21042, %originalBBpart21034
  %3475 = load i32, i32* @x.35
  %3476 = load i32, i32* @y.36
  %3477 = sub i32 %3475, 1
  %3478 = mul i32 %3475, %3477
  %3479 = urem i32 %3478, 2
  %3480 = icmp eq i32 %3479, 0
  %3481 = icmp slt i32 %3476, 10
  %3482 = or i1 %3480, %3481
  br i1 %3482, label %originalBB1044, label %originalBB1044alteredBB

originalBB1044:                                   ; preds = %3474, %originalBB1044alteredBB
  %3483 = load i32, i32* @x.35
  %3484 = load i32, i32* @y.36
  %3485 = sub i32 %3483, 1
  %3486 = mul i32 %3483, %3485
  %3487 = urem i32 %3486, 2
  %3488 = icmp eq i32 %3487, 0
  %3489 = icmp slt i32 %3484, 10
  %3490 = or i1 %3488, %3489
  br i1 %3490, label %originalBBpart21046, label %originalBB1044alteredBB

originalBBpart21046:                              ; preds = %originalBB1044
  br label %3491

3491:                                             ; preds = %originalBBpart21046, %3404
  %3492 = load i32, i32* @x.35
  %3493 = load i32, i32* @y.36
  %3494 = sub i32 %3492, 1
  %3495 = mul i32 %3492, %3494
  %3496 = urem i32 %3495, 2
  %3497 = icmp eq i32 %3496, 0
  %3498 = icmp slt i32 %3493, 10
  %3499 = or i1 %3497, %3498
  br i1 %3499, label %originalBB1048, label %originalBB1048alteredBB

originalBB1048:                                   ; preds = %3491, %originalBB1048alteredBB
  %3500 = load i64, i64* %50, align 8, !dbg !2237
  %3501 = load i64, i64* %28, align 8, !dbg !2239
  %3502 = add i64 %3501, 1, !dbg !2240
  %3503 = icmp ule i64 %3500, %3502, !dbg !2241
  %3504 = load i32, i32* @x.35
  %3505 = load i32, i32* @y.36
  %3506 = sub i32 %3504, 1
  %3507 = mul i32 %3504, %3506
  %3508 = urem i32 %3507, 2
  %3509 = icmp eq i32 %3508, 0
  %3510 = icmp slt i32 %3505, 10
  %3511 = or i1 %3509, %3510
  br i1 %3511, label %originalBBpart21057, label %originalBB1048alteredBB

originalBBpart21057:                              ; preds = %originalBB1048
  br i1 %3503, label %3512, label %3513, !dbg !2242

3512:                                             ; preds = %originalBBpart21057
  br label %3725, !dbg !2243

3513:                                             ; preds = %originalBBpart21057
  %3514 = load i32, i32* @x.35
  %3515 = load i32, i32* @y.36
  %3516 = sub i32 %3514, 1
  %3517 = mul i32 %3514, %3516
  %3518 = urem i32 %3517, 2
  %3519 = icmp eq i32 %3518, 0
  %3520 = icmp slt i32 %3515, 10
  %3521 = or i1 %3519, %3520
  br i1 %3521, label %originalBB1059, label %originalBB1059alteredBB

originalBB1059:                                   ; preds = %3513, %originalBB1059alteredBB
  %3522 = load i32, i32* @x.35
  %3523 = load i32, i32* @y.36
  %3524 = sub i32 %3522, 1
  %3525 = mul i32 %3522, %3524
  %3526 = urem i32 %3525, 2
  %3527 = icmp eq i32 %3526, 0
  %3528 = icmp slt i32 %3523, 10
  %3529 = or i1 %3527, %3528
  br i1 %3529, label %originalBBpart21061, label %originalBB1059alteredBB

originalBBpart21061:                              ; preds = %originalBB1059
  br label %3530, !dbg !2244

3530:                                             ; preds = %originalBBpart21061
  %3531 = load i32, i32* @x.35
  %3532 = load i32, i32* @y.36
  %3533 = sub i32 %3531, 1
  %3534 = mul i32 %3531, %3533
  %3535 = urem i32 %3534, 2
  %3536 = icmp eq i32 %3535, 0
  %3537 = icmp slt i32 %3532, 10
  %3538 = or i1 %3536, %3537
  br i1 %3538, label %originalBB1063, label %originalBB1063alteredBB

originalBB1063:                                   ; preds = %3530, %originalBB1063alteredBB
  %3539 = load i8, i8* %36, align 1, !dbg !2245
  %3540 = trunc i8 %3539 to i1, !dbg !2245
  %3541 = load i32, i32* @x.35
  %3542 = load i32, i32* @y.36
  %3543 = sub i32 %3541, 1
  %3544 = mul i32 %3541, %3543
  %3545 = urem i32 %3544, 2
  %3546 = icmp eq i32 %3545, 0
  %3547 = icmp slt i32 %3542, 10
  %3548 = or i1 %3546, %3547
  br i1 %3548, label %originalBBpart21065, label %originalBB1063alteredBB

originalBBpart21065:                              ; preds = %originalBB1063
  br i1 %3540, label %3549, label %3657, !dbg !2245

3549:                                             ; preds = %originalBBpart21065
  %3550 = load i32, i32* @x.35
  %3551 = load i32, i32* @y.36
  %3552 = sub i32 %3550, 1
  %3553 = mul i32 %3550, %3552
  %3554 = urem i32 %3553, 2
  %3555 = icmp eq i32 %3554, 0
  %3556 = icmp slt i32 %3551, 10
  %3557 = or i1 %3555, %3556
  br i1 %3557, label %originalBB1067, label %originalBB1067alteredBB

originalBB1067:                                   ; preds = %3549, %originalBB1067alteredBB
  %3558 = load i8, i8* %42, align 1, !dbg !2245
  %3559 = trunc i8 %3558 to i1, !dbg !2245
  %3560 = load i32, i32* @x.35
  %3561 = load i32, i32* @y.36
  %3562 = sub i32 %3560, 1
  %3563 = mul i32 %3560, %3562
  %3564 = urem i32 %3563, 2
  %3565 = icmp eq i32 %3564, 0
  %3566 = icmp slt i32 %3561, 10
  %3567 = or i1 %3565, %3566
  br i1 %3567, label %originalBBpart21069, label %originalBB1067alteredBB

originalBBpart21069:                              ; preds = %originalBB1067
  br i1 %3559, label %3657, label %3568, !dbg !2248

3568:                                             ; preds = %originalBBpart21069
  br label %3569, !dbg !2249

3569:                                             ; preds = %3568
  %3570 = load i64, i64* %29, align 8, !dbg !2251
  %3571 = load i64, i64* %20, align 8, !dbg !2251
  %3572 = icmp ult i64 %3570, %3571, !dbg !2251
  br i1 %3572, label %3573, label %3577, !dbg !2254

3573:                                             ; preds = %3569
  %3574 = load i8*, i8** %19, align 8, !dbg !2251
  %3575 = load i64, i64* %29, align 8, !dbg !2251
  %3576 = getelementptr inbounds i8, i8* %3574, i64 %3575, !dbg !2251
  store i8 39, i8* %3576, align 1, !dbg !2251
  br label %3577, !dbg !2251

3577:                                             ; preds = %3573, %3569
  %3578 = load i32, i32* @x.35
  %3579 = load i32, i32* @y.36
  %3580 = sub i32 %3578, 1
  %3581 = mul i32 %3578, %3580
  %3582 = urem i32 %3581, 2
  %3583 = icmp eq i32 %3582, 0
  %3584 = icmp slt i32 %3579, 10
  %3585 = or i1 %3583, %3584
  br i1 %3585, label %originalBB1071, label %originalBB1071alteredBB

originalBB1071:                                   ; preds = %3577, %originalBB1071alteredBB
  %3586 = load i64, i64* %29, align 8, !dbg !2254
  %3587 = add i64 %3586, 1, !dbg !2254
  store i64 %3587, i64* %29, align 8, !dbg !2254
  %3588 = load i32, i32* @x.35
  %3589 = load i32, i32* @y.36
  %3590 = sub i32 %3588, 1
  %3591 = mul i32 %3588, %3590
  %3592 = urem i32 %3591, 2
  %3593 = icmp eq i32 %3592, 0
  %3594 = icmp slt i32 %3589, 10
  %3595 = or i1 %3593, %3594
  br i1 %3595, label %originalBBpart21079, label %originalBB1071alteredBB

originalBBpart21079:                              ; preds = %originalBB1071
  br label %3596, !dbg !2254

3596:                                             ; preds = %originalBBpart21079
  br label %3597, !dbg !2249

3597:                                             ; preds = %3596
  %3598 = load i64, i64* %29, align 8, !dbg !2255
  %3599 = load i64, i64* %20, align 8, !dbg !2255
  %3600 = icmp ult i64 %3598, %3599, !dbg !2255
  br i1 %3600, label %3601, label %3621, !dbg !2258

3601:                                             ; preds = %3597
  %3602 = load i32, i32* @x.35
  %3603 = load i32, i32* @y.36
  %3604 = sub i32 %3602, 1
  %3605 = mul i32 %3602, %3604
  %3606 = urem i32 %3605, 2
  %3607 = icmp eq i32 %3606, 0
  %3608 = icmp slt i32 %3603, 10
  %3609 = or i1 %3607, %3608
  br i1 %3609, label %originalBB1081, label %originalBB1081alteredBB

originalBB1081:                                   ; preds = %3601, %originalBB1081alteredBB
  %3610 = load i8*, i8** %19, align 8, !dbg !2255
  %3611 = load i64, i64* %29, align 8, !dbg !2255
  %3612 = getelementptr inbounds i8, i8* %3610, i64 %3611, !dbg !2255
  store i8 39, i8* %3612, align 1, !dbg !2255
  %3613 = load i32, i32* @x.35
  %3614 = load i32, i32* @y.36
  %3615 = sub i32 %3613, 1
  %3616 = mul i32 %3613, %3615
  %3617 = urem i32 %3616, 2
  %3618 = icmp eq i32 %3617, 0
  %3619 = icmp slt i32 %3614, 10
  %3620 = or i1 %3618, %3619
  br i1 %3620, label %originalBBpart21083, label %originalBB1081alteredBB

originalBBpart21083:                              ; preds = %originalBB1081
  br label %3621, !dbg !2255

3621:                                             ; preds = %originalBBpart21083, %3597
  %3622 = load i32, i32* @x.35
  %3623 = load i32, i32* @y.36
  %3624 = sub i32 %3622, 1
  %3625 = mul i32 %3622, %3624
  %3626 = urem i32 %3625, 2
  %3627 = icmp eq i32 %3626, 0
  %3628 = icmp slt i32 %3623, 10
  %3629 = or i1 %3627, %3628
  br i1 %3629, label %originalBB1085, label %originalBB1085alteredBB

originalBB1085:                                   ; preds = %3621, %originalBB1085alteredBB
  %3630 = load i64, i64* %29, align 8, !dbg !2258
  %3631 = add i64 %3630, 1, !dbg !2258
  store i64 %3631, i64* %29, align 8, !dbg !2258
  %3632 = load i32, i32* @x.35
  %3633 = load i32, i32* @y.36
  %3634 = sub i32 %3632, 1
  %3635 = mul i32 %3632, %3634
  %3636 = urem i32 %3635, 2
  %3637 = icmp eq i32 %3636, 0
  %3638 = icmp slt i32 %3633, 10
  %3639 = or i1 %3637, %3638
  br i1 %3639, label %originalBBpart21098, label %originalBB1085alteredBB

originalBBpart21098:                              ; preds = %originalBB1085
  br label %3640, !dbg !2258

3640:                                             ; preds = %originalBBpart21098
  %3641 = load i32, i32* @x.35
  %3642 = load i32, i32* @y.36
  %3643 = sub i32 %3641, 1
  %3644 = mul i32 %3641, %3643
  %3645 = urem i32 %3644, 2
  %3646 = icmp eq i32 %3645, 0
  %3647 = icmp slt i32 %3642, 10
  %3648 = or i1 %3646, %3647
  br i1 %3648, label %originalBB1100, label %originalBB1100alteredBB

originalBB1100:                                   ; preds = %3640, %originalBB1100alteredBB
  store i8 0, i8* %36, align 1, !dbg !2249
  %3649 = load i32, i32* @x.35
  %3650 = load i32, i32* @y.36
  %3651 = sub i32 %3649, 1
  %3652 = mul i32 %3649, %3651
  %3653 = urem i32 %3652, 2
  %3654 = icmp eq i32 %3653, 0
  %3655 = icmp slt i32 %3650, 10
  %3656 = or i1 %3654, %3655
  br i1 %3656, label %originalBBpart21102, label %originalBB1100alteredBB

originalBBpart21102:                              ; preds = %originalBB1100
  br label %3657, !dbg !2249

3657:                                             ; preds = %originalBBpart21102, %originalBBpart21069, %originalBBpart21065
  %3658 = load i32, i32* @x.35
  %3659 = load i32, i32* @y.36
  %3660 = sub i32 %3658, 1
  %3661 = mul i32 %3658, %3660
  %3662 = urem i32 %3661, 2
  %3663 = icmp eq i32 %3662, 0
  %3664 = icmp slt i32 %3659, 10
  %3665 = or i1 %3663, %3664
  br i1 %3665, label %originalBB1104, label %originalBB1104alteredBB

originalBB1104:                                   ; preds = %3657, %originalBB1104alteredBB
  %3666 = load i32, i32* @x.35
  %3667 = load i32, i32* @y.36
  %3668 = sub i32 %3666, 1
  %3669 = mul i32 %3666, %3668
  %3670 = urem i32 %3669, 2
  %3671 = icmp eq i32 %3670, 0
  %3672 = icmp slt i32 %3667, 10
  %3673 = or i1 %3671, %3672
  br i1 %3673, label %originalBBpart21106, label %originalBB1104alteredBB

originalBBpart21106:                              ; preds = %originalBB1104
  br label %3674, !dbg !2248

3674:                                             ; preds = %originalBBpart21106
  br label %3675, !dbg !2259

3675:                                             ; preds = %3674
  %3676 = load i32, i32* @x.35
  %3677 = load i32, i32* @y.36
  %3678 = sub i32 %3676, 1
  %3679 = mul i32 %3676, %3678
  %3680 = urem i32 %3679, 2
  %3681 = icmp eq i32 %3680, 0
  %3682 = icmp slt i32 %3677, 10
  %3683 = or i1 %3681, %3682
  br i1 %3683, label %originalBB1108, label %originalBB1108alteredBB

originalBB1108:                                   ; preds = %3675, %originalBB1108alteredBB
  %3684 = load i64, i64* %29, align 8, !dbg !2260
  %3685 = load i64, i64* %20, align 8, !dbg !2260
  %3686 = icmp ult i64 %3684, %3685, !dbg !2260
  %3687 = load i32, i32* @x.35
  %3688 = load i32, i32* @y.36
  %3689 = sub i32 %3687, 1
  %3690 = mul i32 %3687, %3689
  %3691 = urem i32 %3690, 2
  %3692 = icmp eq i32 %3691, 0
  %3693 = icmp slt i32 %3688, 10
  %3694 = or i1 %3692, %3693
  br i1 %3694, label %originalBBpart21110, label %originalBB1108alteredBB

originalBBpart21110:                              ; preds = %originalBB1108
  br i1 %3686, label %3695, label %3700, !dbg !2263

3695:                                             ; preds = %originalBBpart21110
  %3696 = load i8, i8* %39, align 1, !dbg !2260
  %3697 = load i8*, i8** %19, align 8, !dbg !2260
  %3698 = load i64, i64* %29, align 8, !dbg !2260
  %3699 = getelementptr inbounds i8, i8* %3697, i64 %3698, !dbg !2260
  store i8 %3696, i8* %3699, align 1, !dbg !2260
  br label %3700, !dbg !2260

3700:                                             ; preds = %3695, %originalBBpart21110
  %3701 = load i32, i32* @x.35
  %3702 = load i32, i32* @y.36
  %3703 = sub i32 %3701, 1
  %3704 = mul i32 %3701, %3703
  %3705 = urem i32 %3704, 2
  %3706 = icmp eq i32 %3705, 0
  %3707 = icmp slt i32 %3702, 10
  %3708 = or i1 %3706, %3707
  br i1 %3708, label %originalBB1112, label %originalBB1112alteredBB

originalBB1112:                                   ; preds = %3700, %originalBB1112alteredBB
  %3709 = load i64, i64* %29, align 8, !dbg !2263
  %3710 = add i64 %3709, 1, !dbg !2263
  store i64 %3710, i64* %29, align 8, !dbg !2263
  %3711 = load i32, i32* @x.35
  %3712 = load i32, i32* @y.36
  %3713 = sub i32 %3711, 1
  %3714 = mul i32 %3711, %3713
  %3715 = urem i32 %3714, 2
  %3716 = icmp eq i32 %3715, 0
  %3717 = icmp slt i32 %3712, 10
  %3718 = or i1 %3716, %3717
  br i1 %3718, label %originalBBpart21124, label %originalBB1112alteredBB

originalBBpart21124:                              ; preds = %originalBB1112
  br label %3719, !dbg !2263

3719:                                             ; preds = %originalBBpart21124
  %3720 = load i8*, i8** %21, align 8, !dbg !2264
  %3721 = load i64, i64* %28, align 8, !dbg !2265
  %3722 = add i64 %3721, 1, !dbg !2265
  store i64 %3722, i64* %28, align 8, !dbg !2265
  %3723 = getelementptr inbounds i8, i8* %3720, i64 %3722, !dbg !2264
  %3724 = load i8, i8* %3723, align 1, !dbg !2264
  store i8 %3724, i8* %39, align 1, !dbg !2266
  br label %2966, !dbg !2267, !llvm.loop !2268

3725:                                             ; preds = %3512
  %3726 = load i32, i32* @x.35
  %3727 = load i32, i32* @y.36
  %3728 = sub i32 %3726, 1
  %3729 = mul i32 %3726, %3728
  %3730 = urem i32 %3729, 2
  %3731 = icmp eq i32 %3730, 0
  %3732 = icmp slt i32 %3727, 10
  %3733 = or i1 %3731, %3732
  br i1 %3733, label %originalBB1126, label %originalBB1126alteredBB

originalBB1126:                                   ; preds = %3725, %originalBB1126alteredBB
  %3734 = load i32, i32* @x.35
  %3735 = load i32, i32* @y.36
  %3736 = sub i32 %3734, 1
  %3737 = mul i32 %3734, %3736
  %3738 = urem i32 %3737, 2
  %3739 = icmp eq i32 %3738, 0
  %3740 = icmp slt i32 %3735, 10
  %3741 = or i1 %3739, %3740
  br i1 %3741, label %originalBBpart21128, label %originalBB1126alteredBB

originalBBpart21128:                              ; preds = %originalBB1126
  br label %4060, !dbg !2271

3742:                                             ; preds = %2943, %originalBBpart2900
  br label %3743, !dbg !2272

3743:                                             ; preds = %3742, %originalBBpart2762, %2444, %2199, %originalBBpart2679, %2104, %2043, %1826, %originalBBpart2328
  %3744 = load i32, i32* @x.35
  %3745 = load i32, i32* @y.36
  %3746 = sub i32 %3744, 1
  %3747 = mul i32 %3744, %3746
  %3748 = urem i32 %3747, 2
  %3749 = icmp eq i32 %3748, 0
  %3750 = icmp slt i32 %3745, 10
  %3751 = or i1 %3749, %3750
  br i1 %3751, label %originalBB1130, label %originalBB1130alteredBB

originalBB1130:                                   ; preds = %3743, %originalBB1130alteredBB
  %3752 = load i8, i8* %33, align 1, !dbg !2273
  %3753 = trunc i8 %3752 to i1, !dbg !2273
  %3754 = load i32, i32* @x.35
  %3755 = load i32, i32* @y.36
  %3756 = sub i32 %3754, 1
  %3757 = mul i32 %3754, %3756
  %3758 = urem i32 %3757, 2
  %3759 = icmp eq i32 %3758, 0
  %3760 = icmp slt i32 %3755, 10
  %3761 = or i1 %3759, %3760
  br i1 %3761, label %originalBBpart21132, label %originalBB1130alteredBB

originalBBpart21132:                              ; preds = %originalBB1130
  br i1 %3753, label %3762, label %3765, !dbg !2275

3762:                                             ; preds = %originalBBpart21132
  %3763 = load i32, i32* %23, align 4, !dbg !2276
  %3764 = icmp ne i32 %3763, 2, !dbg !2277
  br i1 %3764, label %3768, label %3765, !dbg !2278

3765:                                             ; preds = %3762, %originalBBpart21132
  %3766 = load i8, i8* %35, align 1, !dbg !2279
  %3767 = trunc i8 %3766 to i1, !dbg !2279
  br i1 %3767, label %3768, label %3801, !dbg !2280

3768:                                             ; preds = %3765, %3762
  %3769 = load i32, i32* @x.35
  %3770 = load i32, i32* @y.36
  %3771 = sub i32 %3769, 1
  %3772 = mul i32 %3769, %3771
  %3773 = urem i32 %3772, 2
  %3774 = icmp eq i32 %3773, 0
  %3775 = icmp slt i32 %3770, 10
  %3776 = or i1 %3774, %3775
  br i1 %3776, label %originalBB1134, label %originalBB1134alteredBB

originalBB1134:                                   ; preds = %3768, %originalBB1134alteredBB
  %3777 = load i32*, i32** %25, align 8, !dbg !2281
  %3778 = icmp ne i32* %3777, null, !dbg !2281
  %3779 = load i32, i32* @x.35
  %3780 = load i32, i32* @y.36
  %3781 = sub i32 %3779, 1
  %3782 = mul i32 %3779, %3781
  %3783 = urem i32 %3782, 2
  %3784 = icmp eq i32 %3783, 0
  %3785 = icmp slt i32 %3780, 10
  %3786 = or i1 %3784, %3785
  br i1 %3786, label %originalBBpart21136, label %originalBB1134alteredBB

originalBBpart21136:                              ; preds = %originalBB1134
  br i1 %3778, label %3787, label %3801, !dbg !2282

3787:                                             ; preds = %originalBBpart21136
  %3788 = load i32*, i32** %25, align 8, !dbg !2283
  %3789 = load i8, i8* %39, align 1, !dbg !2284
  %3790 = zext i8 %3789 to i64, !dbg !2284
  %3791 = udiv i64 %3790, 32, !dbg !2285
  %3792 = getelementptr inbounds i32, i32* %3788, i64 %3791, !dbg !2283
  %3793 = load i32, i32* %3792, align 4, !dbg !2283
  %3794 = load i8, i8* %39, align 1, !dbg !2286
  %3795 = zext i8 %3794 to i64, !dbg !2286
  %3796 = urem i64 %3795, 32, !dbg !2287
  %3797 = trunc i64 %3796 to i32, !dbg !2288
  %3798 = lshr i32 %3793, %3797, !dbg !2288
  %3799 = and i32 %3798, 1, !dbg !2289
  %3800 = icmp ne i32 %3799, 0, !dbg !2289
  br i1 %3800, label %3821, label %3801, !dbg !2290

3801:                                             ; preds = %3787, %originalBBpart21136, %3765
  %3802 = load i32, i32* @x.35
  %3803 = load i32, i32* @y.36
  %3804 = sub i32 %3802, 1
  %3805 = mul i32 %3802, %3804
  %3806 = urem i32 %3805, 2
  %3807 = icmp eq i32 %3806, 0
  %3808 = icmp slt i32 %3803, 10
  %3809 = or i1 %3807, %3808
  br i1 %3809, label %originalBB1138, label %originalBB1138alteredBB

originalBB1138:                                   ; preds = %3801, %originalBB1138alteredBB
  %3810 = load i8, i8* %41, align 1, !dbg !2291
  %3811 = trunc i8 %3810 to i1, !dbg !2291
  %3812 = load i32, i32* @x.35
  %3813 = load i32, i32* @y.36
  %3814 = sub i32 %3812, 1
  %3815 = mul i32 %3812, %3814
  %3816 = urem i32 %3815, 2
  %3817 = icmp eq i32 %3816, 0
  %3818 = icmp slt i32 %3813, 10
  %3819 = or i1 %3817, %3818
  br i1 %3819, label %originalBBpart21140, label %originalBB1138alteredBB

originalBBpart21140:                              ; preds = %originalBB1138
  br i1 %3811, label %3821, label %3820, !dbg !2292

3820:                                             ; preds = %originalBBpart21140
  br label %4060, !dbg !2293

3821:                                             ; preds = %originalBBpart21140, %3787
  %3822 = load i32, i32* @x.35
  %3823 = load i32, i32* @y.36
  %3824 = sub i32 %3822, 1
  %3825 = mul i32 %3822, %3824
  %3826 = urem i32 %3825, 2
  %3827 = icmp eq i32 %3826, 0
  %3828 = icmp slt i32 %3823, 10
  %3829 = or i1 %3827, %3828
  br i1 %3829, label %originalBB1142, label %originalBB1142alteredBB

originalBB1142:                                   ; preds = %3821, %originalBB1142alteredBB
  %3830 = load i32, i32* @x.35
  %3831 = load i32, i32* @y.36
  %3832 = sub i32 %3830, 1
  %3833 = mul i32 %3830, %3832
  %3834 = urem i32 %3833, 2
  %3835 = icmp eq i32 %3834, 0
  %3836 = icmp slt i32 %3831, 10
  %3837 = or i1 %3835, %3836
  br i1 %3837, label %originalBBpart21144, label %originalBB1142alteredBB

originalBBpart21144:                              ; preds = %originalBB1142
  br label %3838, !dbg !2291

3838:                                             ; preds = %originalBBpart21144, %2041
  call void @llvm.dbg.label(metadata !2294), !dbg !2295
  br label %3839, !dbg !2296

3839:                                             ; preds = %3838
  %3840 = load i8, i8* %35, align 1, !dbg !2297
  %3841 = trunc i8 %3840 to i1, !dbg !2297
  br i1 %3841, label %3842, label %3843, !dbg !2300

3842:                                             ; preds = %3839
  br label %4725, !dbg !2297

3843:                                             ; preds = %3839
  %3844 = load i32, i32* @x.35
  %3845 = load i32, i32* @y.36
  %3846 = sub i32 %3844, 1
  %3847 = mul i32 %3844, %3846
  %3848 = urem i32 %3847, 2
  %3849 = icmp eq i32 %3848, 0
  %3850 = icmp slt i32 %3845, 10
  %3851 = or i1 %3849, %3850
  br i1 %3851, label %originalBB1146, label %originalBB1146alteredBB

originalBB1146:                                   ; preds = %3843, %originalBB1146alteredBB
  store i8 1, i8* %42, align 1, !dbg !2300
  %3852 = load i32, i32* %23, align 4, !dbg !2301
  %3853 = icmp eq i32 %3852, 2, !dbg !2301
  %3854 = load i32, i32* @x.35
  %3855 = load i32, i32* @y.36
  %3856 = sub i32 %3854, 1
  %3857 = mul i32 %3854, %3856
  %3858 = urem i32 %3857, 2
  %3859 = icmp eq i32 %3858, 0
  %3860 = icmp slt i32 %3855, 10
  %3861 = or i1 %3859, %3860
  br i1 %3861, label %originalBBpart21148, label %originalBB1146alteredBB

originalBBpart21148:                              ; preds = %originalBB1146
  br i1 %3853, label %3862, label %3966, !dbg !2301

3862:                                             ; preds = %originalBBpart21148
  %3863 = load i8, i8* %36, align 1, !dbg !2301
  %3864 = trunc i8 %3863 to i1, !dbg !2301
  br i1 %3864, label %3966, label %3865, !dbg !2300

3865:                                             ; preds = %3862
  %3866 = load i32, i32* @x.35
  %3867 = load i32, i32* @y.36
  %3868 = sub i32 %3866, 1
  %3869 = mul i32 %3866, %3868
  %3870 = urem i32 %3869, 2
  %3871 = icmp eq i32 %3870, 0
  %3872 = icmp slt i32 %3867, 10
  %3873 = or i1 %3871, %3872
  br i1 %3873, label %originalBB1150, label %originalBB1150alteredBB

originalBB1150:                                   ; preds = %3865, %originalBB1150alteredBB
  %3874 = load i32, i32* @x.35
  %3875 = load i32, i32* @y.36
  %3876 = sub i32 %3874, 1
  %3877 = mul i32 %3874, %3876
  %3878 = urem i32 %3877, 2
  %3879 = icmp eq i32 %3878, 0
  %3880 = icmp slt i32 %3875, 10
  %3881 = or i1 %3879, %3880
  br i1 %3881, label %originalBBpart21152, label %originalBB1150alteredBB

originalBBpart21152:                              ; preds = %originalBB1150
  br label %3882, !dbg !2303

3882:                                             ; preds = %originalBBpart21152
  %3883 = load i64, i64* %29, align 8, !dbg !2305
  %3884 = load i64, i64* %20, align 8, !dbg !2305
  %3885 = icmp ult i64 %3883, %3884, !dbg !2305
  br i1 %3885, label %3886, label %3890, !dbg !2308

3886:                                             ; preds = %3882
  %3887 = load i8*, i8** %19, align 8, !dbg !2305
  %3888 = load i64, i64* %29, align 8, !dbg !2305
  %3889 = getelementptr inbounds i8, i8* %3887, i64 %3888, !dbg !2305
  store i8 39, i8* %3889, align 1, !dbg !2305
  br label %3890, !dbg !2305

3890:                                             ; preds = %3886, %3882
  %3891 = load i64, i64* %29, align 8, !dbg !2308
  %3892 = add i64 %3891, 1, !dbg !2308
  store i64 %3892, i64* %29, align 8, !dbg !2308
  br label %3893, !dbg !2308

3893:                                             ; preds = %3890
  br label %3894, !dbg !2303

3894:                                             ; preds = %3893
  %3895 = load i64, i64* %29, align 8, !dbg !2309
  %3896 = load i64, i64* %20, align 8, !dbg !2309
  %3897 = icmp ult i64 %3895, %3896, !dbg !2309
  br i1 %3897, label %3898, label %3902, !dbg !2312

3898:                                             ; preds = %3894
  %3899 = load i8*, i8** %19, align 8, !dbg !2309
  %3900 = load i64, i64* %29, align 8, !dbg !2309
  %3901 = getelementptr inbounds i8, i8* %3899, i64 %3900, !dbg !2309
  store i8 36, i8* %3901, align 1, !dbg !2309
  br label %3902, !dbg !2309

3902:                                             ; preds = %3898, %3894
  %3903 = load i32, i32* @x.35
  %3904 = load i32, i32* @y.36
  %3905 = sub i32 %3903, 1
  %3906 = mul i32 %3903, %3905
  %3907 = urem i32 %3906, 2
  %3908 = icmp eq i32 %3907, 0
  %3909 = icmp slt i32 %3904, 10
  %3910 = or i1 %3908, %3909
  br i1 %3910, label %originalBB1154, label %originalBB1154alteredBB

originalBB1154:                                   ; preds = %3902, %originalBB1154alteredBB
  %3911 = load i64, i64* %29, align 8, !dbg !2312
  %3912 = add i64 %3911, 1, !dbg !2312
  store i64 %3912, i64* %29, align 8, !dbg !2312
  %3913 = load i32, i32* @x.35
  %3914 = load i32, i32* @y.36
  %3915 = sub i32 %3913, 1
  %3916 = mul i32 %3913, %3915
  %3917 = urem i32 %3916, 2
  %3918 = icmp eq i32 %3917, 0
  %3919 = icmp slt i32 %3914, 10
  %3920 = or i1 %3918, %3919
  br i1 %3920, label %originalBBpart21165, label %originalBB1154alteredBB

originalBBpart21165:                              ; preds = %originalBB1154
  br label %3921, !dbg !2312

3921:                                             ; preds = %originalBBpart21165
  %3922 = load i32, i32* @x.35
  %3923 = load i32, i32* @y.36
  %3924 = sub i32 %3922, 1
  %3925 = mul i32 %3922, %3924
  %3926 = urem i32 %3925, 2
  %3927 = icmp eq i32 %3926, 0
  %3928 = icmp slt i32 %3923, 10
  %3929 = or i1 %3927, %3928
  br i1 %3929, label %originalBB1167, label %originalBB1167alteredBB

originalBB1167:                                   ; preds = %3921, %originalBB1167alteredBB
  %3930 = load i32, i32* @x.35
  %3931 = load i32, i32* @y.36
  %3932 = sub i32 %3930, 1
  %3933 = mul i32 %3930, %3932
  %3934 = urem i32 %3933, 2
  %3935 = icmp eq i32 %3934, 0
  %3936 = icmp slt i32 %3931, 10
  %3937 = or i1 %3935, %3936
  br i1 %3937, label %originalBBpart21169, label %originalBB1167alteredBB

originalBBpart21169:                              ; preds = %originalBB1167
  br label %3938, !dbg !2303

3938:                                             ; preds = %originalBBpart21169
  %3939 = load i64, i64* %29, align 8, !dbg !2313
  %3940 = load i64, i64* %20, align 8, !dbg !2313
  %3941 = icmp ult i64 %3939, %3940, !dbg !2313
  br i1 %3941, label %3942, label %3962, !dbg !2316

3942:                                             ; preds = %3938
  %3943 = load i32, i32* @x.35
  %3944 = load i32, i32* @y.36
  %3945 = sub i32 %3943, 1
  %3946 = mul i32 %3943, %3945
  %3947 = urem i32 %3946, 2
  %3948 = icmp eq i32 %3947, 0
  %3949 = icmp slt i32 %3944, 10
  %3950 = or i1 %3948, %3949
  br i1 %3950, label %originalBB1171, label %originalBB1171alteredBB

originalBB1171:                                   ; preds = %3942, %originalBB1171alteredBB
  %3951 = load i8*, i8** %19, align 8, !dbg !2313
  %3952 = load i64, i64* %29, align 8, !dbg !2313
  %3953 = getelementptr inbounds i8, i8* %3951, i64 %3952, !dbg !2313
  store i8 39, i8* %3953, align 1, !dbg !2313
  %3954 = load i32, i32* @x.35
  %3955 = load i32, i32* @y.36
  %3956 = sub i32 %3954, 1
  %3957 = mul i32 %3954, %3956
  %3958 = urem i32 %3957, 2
  %3959 = icmp eq i32 %3958, 0
  %3960 = icmp slt i32 %3955, 10
  %3961 = or i1 %3959, %3960
  br i1 %3961, label %originalBBpart21173, label %originalBB1171alteredBB

originalBBpart21173:                              ; preds = %originalBB1171
  br label %3962, !dbg !2313

3962:                                             ; preds = %originalBBpart21173, %3938
  %3963 = load i64, i64* %29, align 8, !dbg !2316
  %3964 = add i64 %3963, 1, !dbg !2316
  store i64 %3964, i64* %29, align 8, !dbg !2316
  br label %3965, !dbg !2316

3965:                                             ; preds = %3962
  store i8 1, i8* %36, align 1, !dbg !2303
  br label %3966, !dbg !2303

3966:                                             ; preds = %3965, %3862, %originalBBpart21148
  %3967 = load i32, i32* @x.35
  %3968 = load i32, i32* @y.36
  %3969 = sub i32 %3967, 1
  %3970 = mul i32 %3967, %3969
  %3971 = urem i32 %3970, 2
  %3972 = icmp eq i32 %3971, 0
  %3973 = icmp slt i32 %3968, 10
  %3974 = or i1 %3972, %3973
  br i1 %3974, label %originalBB1175, label %originalBB1175alteredBB

originalBB1175:                                   ; preds = %3966, %originalBB1175alteredBB
  %3975 = load i32, i32* @x.35
  %3976 = load i32, i32* @y.36
  %3977 = sub i32 %3975, 1
  %3978 = mul i32 %3975, %3977
  %3979 = urem i32 %3978, 2
  %3980 = icmp eq i32 %3979, 0
  %3981 = icmp slt i32 %3976, 10
  %3982 = or i1 %3980, %3981
  br i1 %3982, label %originalBBpart21177, label %originalBB1175alteredBB

originalBBpart21177:                              ; preds = %originalBB1175
  br label %3983, !dbg !2300

3983:                                             ; preds = %originalBBpart21177
  %3984 = load i32, i32* @x.35
  %3985 = load i32, i32* @y.36
  %3986 = sub i32 %3984, 1
  %3987 = mul i32 %3984, %3986
  %3988 = urem i32 %3987, 2
  %3989 = icmp eq i32 %3988, 0
  %3990 = icmp slt i32 %3985, 10
  %3991 = or i1 %3989, %3990
  br i1 %3991, label %originalBB1179, label %originalBB1179alteredBB

originalBB1179:                                   ; preds = %3983, %originalBB1179alteredBB
  %3992 = load i64, i64* %29, align 8, !dbg !2317
  %3993 = load i64, i64* %20, align 8, !dbg !2317
  %3994 = icmp ult i64 %3992, %3993, !dbg !2317
  %3995 = load i32, i32* @x.35
  %3996 = load i32, i32* @y.36
  %3997 = sub i32 %3995, 1
  %3998 = mul i32 %3995, %3997
  %3999 = urem i32 %3998, 2
  %4000 = icmp eq i32 %3999, 0
  %4001 = icmp slt i32 %3996, 10
  %4002 = or i1 %4000, %4001
  br i1 %4002, label %originalBBpart21181, label %originalBB1179alteredBB

originalBBpart21181:                              ; preds = %originalBB1179
  br i1 %3994, label %4003, label %4023, !dbg !2320

4003:                                             ; preds = %originalBBpart21181
  %4004 = load i32, i32* @x.35
  %4005 = load i32, i32* @y.36
  %4006 = sub i32 %4004, 1
  %4007 = mul i32 %4004, %4006
  %4008 = urem i32 %4007, 2
  %4009 = icmp eq i32 %4008, 0
  %4010 = icmp slt i32 %4005, 10
  %4011 = or i1 %4009, %4010
  br i1 %4011, label %originalBB1183, label %originalBB1183alteredBB

originalBB1183:                                   ; preds = %4003, %originalBB1183alteredBB
  %4012 = load i8*, i8** %19, align 8, !dbg !2317
  %4013 = load i64, i64* %29, align 8, !dbg !2317
  %4014 = getelementptr inbounds i8, i8* %4012, i64 %4013, !dbg !2317
  store i8 92, i8* %4014, align 1, !dbg !2317
  %4015 = load i32, i32* @x.35
  %4016 = load i32, i32* @y.36
  %4017 = sub i32 %4015, 1
  %4018 = mul i32 %4015, %4017
  %4019 = urem i32 %4018, 2
  %4020 = icmp eq i32 %4019, 0
  %4021 = icmp slt i32 %4016, 10
  %4022 = or i1 %4020, %4021
  br i1 %4022, label %originalBBpart21185, label %originalBB1183alteredBB

originalBBpart21185:                              ; preds = %originalBB1183
  br label %4023, !dbg !2317

4023:                                             ; preds = %originalBBpart21185, %originalBBpart21181
  %4024 = load i32, i32* @x.35
  %4025 = load i32, i32* @y.36
  %4026 = sub i32 %4024, 1
  %4027 = mul i32 %4024, %4026
  %4028 = urem i32 %4027, 2
  %4029 = icmp eq i32 %4028, 0
  %4030 = icmp slt i32 %4025, 10
  %4031 = or i1 %4029, %4030
  br i1 %4031, label %originalBB1187, label %originalBB1187alteredBB

originalBB1187:                                   ; preds = %4023, %originalBB1187alteredBB
  %4032 = load i64, i64* %29, align 8, !dbg !2320
  %4033 = add i64 %4032, 1, !dbg !2320
  store i64 %4033, i64* %29, align 8, !dbg !2320
  %4034 = load i32, i32* @x.35
  %4035 = load i32, i32* @y.36
  %4036 = sub i32 %4034, 1
  %4037 = mul i32 %4034, %4036
  %4038 = urem i32 %4037, 2
  %4039 = icmp eq i32 %4038, 0
  %4040 = icmp slt i32 %4035, 10
  %4041 = or i1 %4039, %4040
  br i1 %4041, label %originalBBpart21196, label %originalBB1187alteredBB

originalBBpart21196:                              ; preds = %originalBB1187
  br label %4042, !dbg !2320

4042:                                             ; preds = %originalBBpart21196
  %4043 = load i32, i32* @x.35
  %4044 = load i32, i32* @y.36
  %4045 = sub i32 %4043, 1
  %4046 = mul i32 %4043, %4045
  %4047 = urem i32 %4046, 2
  %4048 = icmp eq i32 %4047, 0
  %4049 = icmp slt i32 %4044, 10
  %4050 = or i1 %4048, %4049
  br i1 %4050, label %originalBB1198, label %originalBB1198alteredBB

originalBB1198:                                   ; preds = %4042, %originalBB1198alteredBB
  %4051 = load i32, i32* @x.35
  %4052 = load i32, i32* @y.36
  %4053 = sub i32 %4051, 1
  %4054 = mul i32 %4051, %4053
  %4055 = urem i32 %4054, 2
  %4056 = icmp eq i32 %4055, 0
  %4057 = icmp slt i32 %4052, 10
  %4058 = or i1 %4056, %4057
  br i1 %4058, label %originalBBpart21200, label %originalBB1198alteredBB

originalBBpart21200:                              ; preds = %originalBB1198
  br label %4059, !dbg !2300

4059:                                             ; preds = %originalBBpart21200
  br label %4060, !dbg !2300

4060:                                             ; preds = %4059, %3820, %originalBBpart21128, %1964, %1938
  call void @llvm.dbg.label(metadata !2321), !dbg !2322
  br label %4061, !dbg !2323

4061:                                             ; preds = %4060
  %4062 = load i8, i8* %36, align 1, !dbg !2324
  %4063 = trunc i8 %4062 to i1, !dbg !2324
  br i1 %4063, label %4064, label %4220, !dbg !2324

4064:                                             ; preds = %4061
  %4065 = load i8, i8* %42, align 1, !dbg !2324
  %4066 = trunc i8 %4065 to i1, !dbg !2324
  br i1 %4066, label %4220, label %4067, !dbg !2327

4067:                                             ; preds = %4064
  %4068 = load i32, i32* @x.35
  %4069 = load i32, i32* @y.36
  %4070 = sub i32 %4068, 1
  %4071 = mul i32 %4068, %4070
  %4072 = urem i32 %4071, 2
  %4073 = icmp eq i32 %4072, 0
  %4074 = icmp slt i32 %4069, 10
  %4075 = or i1 %4073, %4074
  br i1 %4075, label %originalBB1202, label %originalBB1202alteredBB

originalBB1202:                                   ; preds = %4067, %originalBB1202alteredBB
  %4076 = load i32, i32* @x.35
  %4077 = load i32, i32* @y.36
  %4078 = sub i32 %4076, 1
  %4079 = mul i32 %4076, %4078
  %4080 = urem i32 %4079, 2
  %4081 = icmp eq i32 %4080, 0
  %4082 = icmp slt i32 %4077, 10
  %4083 = or i1 %4081, %4082
  br i1 %4083, label %originalBBpart21204, label %originalBB1202alteredBB

originalBBpart21204:                              ; preds = %originalBB1202
  br label %4084, !dbg !2328

4084:                                             ; preds = %originalBBpart21204
  %4085 = load i32, i32* @x.35
  %4086 = load i32, i32* @y.36
  %4087 = sub i32 %4085, 1
  %4088 = mul i32 %4085, %4087
  %4089 = urem i32 %4088, 2
  %4090 = icmp eq i32 %4089, 0
  %4091 = icmp slt i32 %4086, 10
  %4092 = or i1 %4090, %4091
  br i1 %4092, label %originalBB1206, label %originalBB1206alteredBB

originalBB1206:                                   ; preds = %4084, %originalBB1206alteredBB
  %4093 = load i64, i64* %29, align 8, !dbg !2330
  %4094 = load i64, i64* %20, align 8, !dbg !2330
  %4095 = icmp ult i64 %4093, %4094, !dbg !2330
  %4096 = load i32, i32* @x.35
  %4097 = load i32, i32* @y.36
  %4098 = sub i32 %4096, 1
  %4099 = mul i32 %4096, %4098
  %4100 = urem i32 %4099, 2
  %4101 = icmp eq i32 %4100, 0
  %4102 = icmp slt i32 %4097, 10
  %4103 = or i1 %4101, %4102
  br i1 %4103, label %originalBBpart21208, label %originalBB1206alteredBB

originalBBpart21208:                              ; preds = %originalBB1206
  br i1 %4095, label %4104, label %4124, !dbg !2333

4104:                                             ; preds = %originalBBpart21208
  %4105 = load i32, i32* @x.35
  %4106 = load i32, i32* @y.36
  %4107 = sub i32 %4105, 1
  %4108 = mul i32 %4105, %4107
  %4109 = urem i32 %4108, 2
  %4110 = icmp eq i32 %4109, 0
  %4111 = icmp slt i32 %4106, 10
  %4112 = or i1 %4110, %4111
  br i1 %4112, label %originalBB1210, label %originalBB1210alteredBB

originalBB1210:                                   ; preds = %4104, %originalBB1210alteredBB
  %4113 = load i8*, i8** %19, align 8, !dbg !2330
  %4114 = load i64, i64* %29, align 8, !dbg !2330
  %4115 = getelementptr inbounds i8, i8* %4113, i64 %4114, !dbg !2330
  store i8 39, i8* %4115, align 1, !dbg !2330
  %4116 = load i32, i32* @x.35
  %4117 = load i32, i32* @y.36
  %4118 = sub i32 %4116, 1
  %4119 = mul i32 %4116, %4118
  %4120 = urem i32 %4119, 2
  %4121 = icmp eq i32 %4120, 0
  %4122 = icmp slt i32 %4117, 10
  %4123 = or i1 %4121, %4122
  br i1 %4123, label %originalBBpart21212, label %originalBB1210alteredBB

originalBBpart21212:                              ; preds = %originalBB1210
  br label %4124, !dbg !2330

4124:                                             ; preds = %originalBBpart21212, %originalBBpart21208
  %4125 = load i32, i32* @x.35
  %4126 = load i32, i32* @y.36
  %4127 = sub i32 %4125, 1
  %4128 = mul i32 %4125, %4127
  %4129 = urem i32 %4128, 2
  %4130 = icmp eq i32 %4129, 0
  %4131 = icmp slt i32 %4126, 10
  %4132 = or i1 %4130, %4131
  br i1 %4132, label %originalBB1214, label %originalBB1214alteredBB

originalBB1214:                                   ; preds = %4124, %originalBB1214alteredBB
  %4133 = load i64, i64* %29, align 8, !dbg !2333
  %4134 = add i64 %4133, 1, !dbg !2333
  store i64 %4134, i64* %29, align 8, !dbg !2333
  %4135 = load i32, i32* @x.35
  %4136 = load i32, i32* @y.36
  %4137 = sub i32 %4135, 1
  %4138 = mul i32 %4135, %4137
  %4139 = urem i32 %4138, 2
  %4140 = icmp eq i32 %4139, 0
  %4141 = icmp slt i32 %4136, 10
  %4142 = or i1 %4140, %4141
  br i1 %4142, label %originalBBpart21218, label %originalBB1214alteredBB

originalBBpart21218:                              ; preds = %originalBB1214
  br label %4143, !dbg !2333

4143:                                             ; preds = %originalBBpart21218
  br label %4144, !dbg !2328

4144:                                             ; preds = %4143
  %4145 = load i32, i32* @x.35
  %4146 = load i32, i32* @y.36
  %4147 = sub i32 %4145, 1
  %4148 = mul i32 %4145, %4147
  %4149 = urem i32 %4148, 2
  %4150 = icmp eq i32 %4149, 0
  %4151 = icmp slt i32 %4146, 10
  %4152 = or i1 %4150, %4151
  br i1 %4152, label %originalBB1220, label %originalBB1220alteredBB

originalBB1220:                                   ; preds = %4144, %originalBB1220alteredBB
  %4153 = load i64, i64* %29, align 8, !dbg !2334
  %4154 = load i64, i64* %20, align 8, !dbg !2334
  %4155 = icmp ult i64 %4153, %4154, !dbg !2334
  %4156 = load i32, i32* @x.35
  %4157 = load i32, i32* @y.36
  %4158 = sub i32 %4156, 1
  %4159 = mul i32 %4156, %4158
  %4160 = urem i32 %4159, 2
  %4161 = icmp eq i32 %4160, 0
  %4162 = icmp slt i32 %4157, 10
  %4163 = or i1 %4161, %4162
  br i1 %4163, label %originalBBpart21222, label %originalBB1220alteredBB

originalBBpart21222:                              ; preds = %originalBB1220
  br i1 %4155, label %4164, label %4184, !dbg !2337

4164:                                             ; preds = %originalBBpart21222
  %4165 = load i32, i32* @x.35
  %4166 = load i32, i32* @y.36
  %4167 = sub i32 %4165, 1
  %4168 = mul i32 %4165, %4167
  %4169 = urem i32 %4168, 2
  %4170 = icmp eq i32 %4169, 0
  %4171 = icmp slt i32 %4166, 10
  %4172 = or i1 %4170, %4171
  br i1 %4172, label %originalBB1224, label %originalBB1224alteredBB

originalBB1224:                                   ; preds = %4164, %originalBB1224alteredBB
  %4173 = load i8*, i8** %19, align 8, !dbg !2334
  %4174 = load i64, i64* %29, align 8, !dbg !2334
  %4175 = getelementptr inbounds i8, i8* %4173, i64 %4174, !dbg !2334
  store i8 39, i8* %4175, align 1, !dbg !2334
  %4176 = load i32, i32* @x.35
  %4177 = load i32, i32* @y.36
  %4178 = sub i32 %4176, 1
  %4179 = mul i32 %4176, %4178
  %4180 = urem i32 %4179, 2
  %4181 = icmp eq i32 %4180, 0
  %4182 = icmp slt i32 %4177, 10
  %4183 = or i1 %4181, %4182
  br i1 %4183, label %originalBBpart21226, label %originalBB1224alteredBB

originalBBpart21226:                              ; preds = %originalBB1224
  br label %4184, !dbg !2334

4184:                                             ; preds = %originalBBpart21226, %originalBBpart21222
  %4185 = load i32, i32* @x.35
  %4186 = load i32, i32* @y.36
  %4187 = sub i32 %4185, 1
  %4188 = mul i32 %4185, %4187
  %4189 = urem i32 %4188, 2
  %4190 = icmp eq i32 %4189, 0
  %4191 = icmp slt i32 %4186, 10
  %4192 = or i1 %4190, %4191
  br i1 %4192, label %originalBB1228, label %originalBB1228alteredBB

originalBB1228:                                   ; preds = %4184, %originalBB1228alteredBB
  %4193 = load i64, i64* %29, align 8, !dbg !2337
  %4194 = add i64 %4193, 1, !dbg !2337
  store i64 %4194, i64* %29, align 8, !dbg !2337
  %4195 = load i32, i32* @x.35
  %4196 = load i32, i32* @y.36
  %4197 = sub i32 %4195, 1
  %4198 = mul i32 %4195, %4197
  %4199 = urem i32 %4198, 2
  %4200 = icmp eq i32 %4199, 0
  %4201 = icmp slt i32 %4196, 10
  %4202 = or i1 %4200, %4201
  br i1 %4202, label %originalBBpart21235, label %originalBB1228alteredBB

originalBBpart21235:                              ; preds = %originalBB1228
  br label %4203, !dbg !2337

4203:                                             ; preds = %originalBBpart21235
  %4204 = load i32, i32* @x.35
  %4205 = load i32, i32* @y.36
  %4206 = sub i32 %4204, 1
  %4207 = mul i32 %4204, %4206
  %4208 = urem i32 %4207, 2
  %4209 = icmp eq i32 %4208, 0
  %4210 = icmp slt i32 %4205, 10
  %4211 = or i1 %4209, %4210
  br i1 %4211, label %originalBB1237, label %originalBB1237alteredBB

originalBB1237:                                   ; preds = %4203, %originalBB1237alteredBB
  store i8 0, i8* %36, align 1, !dbg !2328
  %4212 = load i32, i32* @x.35
  %4213 = load i32, i32* @y.36
  %4214 = sub i32 %4212, 1
  %4215 = mul i32 %4212, %4214
  %4216 = urem i32 %4215, 2
  %4217 = icmp eq i32 %4216, 0
  %4218 = icmp slt i32 %4213, 10
  %4219 = or i1 %4217, %4218
  br i1 %4219, label %originalBBpart21239, label %originalBB1237alteredBB

originalBBpart21239:                              ; preds = %originalBB1237
  br label %4220, !dbg !2328

4220:                                             ; preds = %originalBBpart21239, %4064, %4061
  %4221 = load i32, i32* @x.35
  %4222 = load i32, i32* @y.36
  %4223 = sub i32 %4221, 1
  %4224 = mul i32 %4221, %4223
  %4225 = urem i32 %4224, 2
  %4226 = icmp eq i32 %4225, 0
  %4227 = icmp slt i32 %4222, 10
  %4228 = or i1 %4226, %4227
  br i1 %4228, label %originalBB1241, label %originalBB1241alteredBB

originalBB1241:                                   ; preds = %4220, %originalBB1241alteredBB
  %4229 = load i32, i32* @x.35
  %4230 = load i32, i32* @y.36
  %4231 = sub i32 %4229, 1
  %4232 = mul i32 %4229, %4231
  %4233 = urem i32 %4232, 2
  %4234 = icmp eq i32 %4233, 0
  %4235 = icmp slt i32 %4230, 10
  %4236 = or i1 %4234, %4235
  br i1 %4236, label %originalBBpart21243, label %originalBB1241alteredBB

originalBBpart21243:                              ; preds = %originalBB1241
  br label %4237, !dbg !2327

4237:                                             ; preds = %originalBBpart21243
  %4238 = load i32, i32* @x.35
  %4239 = load i32, i32* @y.36
  %4240 = sub i32 %4238, 1
  %4241 = mul i32 %4238, %4240
  %4242 = urem i32 %4241, 2
  %4243 = icmp eq i32 %4242, 0
  %4244 = icmp slt i32 %4239, 10
  %4245 = or i1 %4243, %4244
  br i1 %4245, label %originalBB1245, label %originalBB1245alteredBB

originalBB1245:                                   ; preds = %4237, %originalBB1245alteredBB
  %4246 = load i32, i32* @x.35
  %4247 = load i32, i32* @y.36
  %4248 = sub i32 %4246, 1
  %4249 = mul i32 %4246, %4248
  %4250 = urem i32 %4249, 2
  %4251 = icmp eq i32 %4250, 0
  %4252 = icmp slt i32 %4247, 10
  %4253 = or i1 %4251, %4252
  br i1 %4253, label %originalBBpart21247, label %originalBB1245alteredBB

originalBBpart21247:                              ; preds = %originalBB1245
  br label %4254, !dbg !2338

4254:                                             ; preds = %originalBBpart21247
  %4255 = load i64, i64* %29, align 8, !dbg !2339
  %4256 = load i64, i64* %20, align 8, !dbg !2339
  %4257 = trunc i64 %4255 to i32
  %4258 = mul i32 %4257, -2
  %4259 = add i32 %4258, -2
  %4260 = trunc i64 %4256 to i32
  %4261 = mul i32 %4260, 2
  %4262 = add i32 %4261, 3
  %4263 = mul i32 %4259, %4259
  %4264 = mul i32 %4262, %4262
  %4265 = add i32 %4263, %4264
  %4266 = mul i32 %4259, %4262
  %4267 = mul i32 %4266, 2
  %4268 = sub i32 %4265, %4267
  %4269 = mul i32 %4268, 3
  %4270 = add i32 %4269, -1
  %4271 = icmp eq i32 %4270, -4
  br i1 %4271, label %4272, label %4273

4272:                                             ; preds = %4254
  ret i64 0

4273:                                             ; preds = %4254
  %4274 = load i32, i32* @x.35
  %4275 = load i32, i32* @y.36
  %4276 = sub i32 %4274, 1
  %4277 = mul i32 %4274, %4276
  %4278 = urem i32 %4277, 2
  %4279 = icmp eq i32 %4278, 0
  %4280 = icmp slt i32 %4275, 10
  %4281 = or i1 %4279, %4280
  br i1 %4281, label %originalBB1249, label %originalBB1249alteredBB

originalBB1249:                                   ; preds = %4273, %originalBB1249alteredBB
  %4282 = icmp ult i64 %4255, %4256, !dbg !2339
  %4283 = load i32, i32* @x.35
  %4284 = load i32, i32* @y.36
  %4285 = sub i32 %4283, 1
  %4286 = mul i32 %4283, %4285
  %4287 = urem i32 %4286, 2
  %4288 = icmp eq i32 %4287, 0
  %4289 = icmp slt i32 %4284, 10
  %4290 = or i1 %4288, %4289
  br i1 %4290, label %originalBBpart21251, label %originalBB1249alteredBB

originalBBpart21251:                              ; preds = %originalBB1249
  br i1 %4282, label %4291, label %4312, !dbg !2342

4291:                                             ; preds = %originalBBpart21251
  %4292 = load i32, i32* @x.35
  %4293 = load i32, i32* @y.36
  %4294 = sub i32 %4292, 1
  %4295 = mul i32 %4292, %4294
  %4296 = urem i32 %4295, 2
  %4297 = icmp eq i32 %4296, 0
  %4298 = icmp slt i32 %4293, 10
  %4299 = or i1 %4297, %4298
  br i1 %4299, label %originalBB1253, label %originalBB1253alteredBB

originalBB1253:                                   ; preds = %4291, %originalBB1253alteredBB
  %4300 = load i8, i8* %39, align 1, !dbg !2339
  %4301 = load i8*, i8** %19, align 8, !dbg !2339
  %4302 = load i64, i64* %29, align 8, !dbg !2339
  %4303 = getelementptr inbounds i8, i8* %4301, i64 %4302, !dbg !2339
  store i8 %4300, i8* %4303, align 1, !dbg !2339
  %4304 = load i32, i32* @x.35
  %4305 = load i32, i32* @y.36
  %4306 = sub i32 %4304, 1
  %4307 = mul i32 %4304, %4306
  %4308 = urem i32 %4307, 2
  %4309 = icmp eq i32 %4308, 0
  %4310 = icmp slt i32 %4305, 10
  %4311 = or i1 %4309, %4310
  br i1 %4311, label %originalBBpart21255, label %originalBB1253alteredBB

originalBBpart21255:                              ; preds = %originalBB1253
  br label %4312, !dbg !2339

4312:                                             ; preds = %originalBBpart21255, %originalBBpart21251
  %4313 = load i32, i32* @x.35
  %4314 = load i32, i32* @y.36
  %4315 = sub i32 %4313, 1
  %4316 = mul i32 %4313, %4315
  %4317 = urem i32 %4316, 2
  %4318 = icmp eq i32 %4317, 0
  %4319 = icmp slt i32 %4314, 10
  %4320 = or i1 %4318, %4319
  br i1 %4320, label %originalBB1257, label %originalBB1257alteredBB

originalBB1257:                                   ; preds = %4312, %originalBB1257alteredBB
  %4321 = load i64, i64* %29, align 8, !dbg !2342
  %4322 = add i64 %4321, 1, !dbg !2342
  store i64 %4322, i64* %29, align 8, !dbg !2342
  %4323 = load i32, i32* @x.35
  %4324 = load i32, i32* @y.36
  %4325 = sub i32 %4323, 1
  %4326 = mul i32 %4323, %4325
  %4327 = urem i32 %4326, 2
  %4328 = icmp eq i32 %4327, 0
  %4329 = icmp slt i32 %4324, 10
  %4330 = or i1 %4328, %4329
  br i1 %4330, label %originalBBpart21264, label %originalBB1257alteredBB

originalBBpart21264:                              ; preds = %originalBB1257
  br label %4331, !dbg !2342

4331:                                             ; preds = %originalBBpart21264
  %4332 = load i32, i32* @x.35
  %4333 = load i32, i32* @y.36
  %4334 = sub i32 %4332, 1
  %4335 = mul i32 %4332, %4334
  %4336 = urem i32 %4335, 2
  %4337 = icmp eq i32 %4336, 0
  %4338 = icmp slt i32 %4333, 10
  %4339 = or i1 %4337, %4338
  br i1 %4339, label %originalBB1266, label %originalBB1266alteredBB

originalBB1266:                                   ; preds = %4331, %originalBB1266alteredBB
  %4340 = load i8, i8* %43, align 1, !dbg !2343
  %4341 = trunc i8 %4340 to i1, !dbg !2343
  %4342 = load i32, i32* @x.35
  %4343 = load i32, i32* @y.36
  %4344 = sub i32 %4342, 1
  %4345 = mul i32 %4342, %4344
  %4346 = urem i32 %4345, 2
  %4347 = icmp eq i32 %4346, 0
  %4348 = icmp slt i32 %4343, 10
  %4349 = or i1 %4347, %4348
  br i1 %4349, label %originalBBpart21268, label %originalBB1266alteredBB

originalBBpart21268:                              ; preds = %originalBB1266
  br i1 %4341, label %4367, label %4350, !dbg !2345

4350:                                             ; preds = %originalBBpart21268
  %4351 = load i32, i32* @x.35
  %4352 = load i32, i32* @y.36
  %4353 = sub i32 %4351, 1
  %4354 = mul i32 %4351, %4353
  %4355 = urem i32 %4354, 2
  %4356 = icmp eq i32 %4355, 0
  %4357 = icmp slt i32 %4352, 10
  %4358 = or i1 %4356, %4357
  br i1 %4358, label %originalBB1270, label %originalBB1270alteredBB

originalBB1270:                                   ; preds = %4350, %originalBB1270alteredBB
  store i8 0, i8* %38, align 1, !dbg !2346
  %4359 = load i32, i32* @x.35
  %4360 = load i32, i32* @y.36
  %4361 = sub i32 %4359, 1
  %4362 = mul i32 %4359, %4361
  %4363 = urem i32 %4362, 2
  %4364 = icmp eq i32 %4363, 0
  %4365 = icmp slt i32 %4360, 10
  %4366 = or i1 %4364, %4365
  br i1 %4366, label %originalBBpart21272, label %originalBB1270alteredBB

originalBBpart21272:                              ; preds = %originalBB1270
  br label %4367, !dbg !2347

4367:                                             ; preds = %originalBBpart21272, %originalBBpart21268
  %4368 = load i32, i32* @x.35
  %4369 = load i32, i32* @y.36
  %4370 = sub i32 %4368, 1
  %4371 = mul i32 %4368, %4370
  %4372 = urem i32 %4371, 2
  %4373 = icmp eq i32 %4372, 0
  %4374 = icmp slt i32 %4369, 10
  %4375 = or i1 %4373, %4374
  br i1 %4375, label %originalBB1274, label %originalBB1274alteredBB

originalBB1274:                                   ; preds = %4367, %originalBB1274alteredBB
  %4376 = load i32, i32* @x.35
  %4377 = load i32, i32* @y.36
  %4378 = sub i32 %4376, 1
  %4379 = mul i32 %4376, %4378
  %4380 = urem i32 %4379, 2
  %4381 = icmp eq i32 %4380, 0
  %4382 = icmp slt i32 %4377, 10
  %4383 = or i1 %4381, %4382
  br i1 %4383, label %originalBBpart21276, label %originalBB1274alteredBB

originalBBpart21276:                              ; preds = %originalBB1274
  br label %4384, !dbg !2348

4384:                                             ; preds = %originalBBpart21276, %1270
  %4385 = load i32, i32* @x.35
  %4386 = load i32, i32* @y.36
  %4387 = sub i32 %4385, 1
  %4388 = mul i32 %4385, %4387
  %4389 = urem i32 %4388, 2
  %4390 = icmp eq i32 %4389, 0
  %4391 = icmp slt i32 %4386, 10
  %4392 = or i1 %4390, %4391
  br i1 %4392, label %originalBB1278, label %originalBB1278alteredBB

originalBB1278:                                   ; preds = %4384, %originalBB1278alteredBB
  %4393 = load i64, i64* %28, align 8, !dbg !2349
  %4394 = add i64 %4393, 1, !dbg !2349
  store i64 %4394, i64* %28, align 8, !dbg !2349
  %4395 = load i32, i32* @x.35
  %4396 = load i32, i32* @y.36
  %4397 = sub i32 %4395, 1
  %4398 = mul i32 %4395, %4397
  %4399 = urem i32 %4398, 2
  %4400 = icmp eq i32 %4399, 0
  %4401 = icmp slt i32 %4396, 10
  %4402 = or i1 %4400, %4401
  br i1 %4402, label %originalBBpart21284, label %originalBB1278alteredBB

originalBBpart21284:                              ; preds = %originalBB1278
  br label %506, !dbg !2350, !llvm.loop !2351

4403:                                             ; preds = %570
  %4404 = load i32, i32* @x.35
  %4405 = load i32, i32* @y.36
  %4406 = sub i32 %4404, 1
  %4407 = mul i32 %4404, %4406
  %4408 = urem i32 %4407, 2
  %4409 = icmp eq i32 %4408, 0
  %4410 = icmp slt i32 %4405, 10
  %4411 = or i1 %4409, %4410
  br i1 %4411, label %originalBB1286, label %originalBB1286alteredBB

originalBB1286:                                   ; preds = %4403, %originalBB1286alteredBB
  %4412 = load i64, i64* %29, align 8, !dbg !2353
  %4413 = icmp eq i64 %4412, 0, !dbg !2355
  %4414 = load i32, i32* @x.35
  %4415 = load i32, i32* @y.36
  %4416 = sub i32 %4414, 1
  %4417 = mul i32 %4414, %4416
  %4418 = urem i32 %4417, 2
  %4419 = icmp eq i32 %4418, 0
  %4420 = icmp slt i32 %4415, 10
  %4421 = or i1 %4419, %4420
  br i1 %4421, label %originalBBpart21288, label %originalBB1286alteredBB

originalBBpart21288:                              ; preds = %originalBB1286
  br i1 %4413, label %4422, label %4445, !dbg !2356

4422:                                             ; preds = %originalBBpart21288
  %4423 = load i32, i32* %23, align 4, !dbg !2357
  %4424 = icmp eq i32 %4423, 2, !dbg !2358
  br i1 %4424, label %4425, label %4445, !dbg !2359

4425:                                             ; preds = %4422
  %4426 = load i32, i32* @x.35
  %4427 = load i32, i32* @y.36
  %4428 = sub i32 %4426, 1
  %4429 = mul i32 %4426, %4428
  %4430 = urem i32 %4429, 2
  %4431 = icmp eq i32 %4430, 0
  %4432 = icmp slt i32 %4427, 10
  %4433 = or i1 %4431, %4432
  br i1 %4433, label %originalBB1290, label %originalBB1290alteredBB

originalBB1290:                                   ; preds = %4425, %originalBB1290alteredBB
  %4434 = load i8, i8* %35, align 1, !dbg !2360
  %4435 = trunc i8 %4434 to i1, !dbg !2360
  %4436 = load i32, i32* @x.35
  %4437 = load i32, i32* @y.36
  %4438 = sub i32 %4436, 1
  %4439 = mul i32 %4436, %4438
  %4440 = urem i32 %4439, 2
  %4441 = icmp eq i32 %4440, 0
  %4442 = icmp slt i32 %4437, 10
  %4443 = or i1 %4441, %4442
  br i1 %4443, label %originalBBpart21292, label %originalBB1290alteredBB

originalBBpart21292:                              ; preds = %originalBB1290
  br i1 %4435, label %4444, label %4445, !dbg !2361

4444:                                             ; preds = %originalBBpart21292
  br label %4725, !dbg !2362

4445:                                             ; preds = %originalBBpart21292, %4422, %originalBBpart21288
  %4446 = load i32, i32* @x.35
  %4447 = load i32, i32* @y.36
  %4448 = sub i32 %4446, 1
  %4449 = mul i32 %4446, %4448
  %4450 = urem i32 %4449, 2
  %4451 = icmp eq i32 %4450, 0
  %4452 = icmp slt i32 %4447, 10
  %4453 = or i1 %4451, %4452
  br i1 %4453, label %originalBB1294, label %originalBB1294alteredBB

originalBB1294:                                   ; preds = %4445, %originalBB1294alteredBB
  %4454 = load i32, i32* %23, align 4, !dbg !2363
  %4455 = icmp eq i32 %4454, 2, !dbg !2365
  %4456 = load i32, i32* @x.35
  %4457 = load i32, i32* @y.36
  %4458 = sub i32 %4456, 1
  %4459 = mul i32 %4456, %4458
  %4460 = urem i32 %4459, 2
  %4461 = icmp eq i32 %4460, 0
  %4462 = icmp slt i32 %4457, 10
  %4463 = or i1 %4461, %4462
  br i1 %4463, label %originalBBpart21296, label %originalBB1294alteredBB

originalBBpart21296:                              ; preds = %originalBB1294
  br i1 %4455, label %4464, label %4557, !dbg !2366

4464:                                             ; preds = %originalBBpart21296
  %4465 = load i32, i32* @x.35
  %4466 = load i32, i32* @y.36
  %4467 = sub i32 %4465, 1
  %4468 = mul i32 %4465, %4467
  %4469 = urem i32 %4468, 2
  %4470 = icmp eq i32 %4469, 0
  %4471 = icmp slt i32 %4466, 10
  %4472 = or i1 %4470, %4471
  br i1 %4472, label %originalBB1298, label %originalBB1298alteredBB

originalBB1298:                                   ; preds = %4464, %originalBB1298alteredBB
  %4473 = load i8, i8* %35, align 1, !dbg !2367
  %4474 = trunc i8 %4473 to i1, !dbg !2367
  %4475 = load i32, i32* @x.35
  %4476 = load i32, i32* @y.36
  %4477 = sub i32 %4475, 1
  %4478 = mul i32 %4475, %4477
  %4479 = urem i32 %4478, 2
  %4480 = icmp eq i32 %4479, 0
  %4481 = icmp slt i32 %4476, 10
  %4482 = or i1 %4480, %4481
  br i1 %4482, label %originalBBpart21300, label %originalBB1298alteredBB

originalBBpart21300:                              ; preds = %originalBB1298
  br i1 %4474, label %4557, label %4483, !dbg !2368

4483:                                             ; preds = %originalBBpart21300
  %4484 = load i8, i8* %37, align 1, !dbg !2369
  %4485 = trunc i8 %4484 to i1, !dbg !2369
  br i1 %4485, label %4486, label %4557, !dbg !2370

4486:                                             ; preds = %4483
  %4487 = load i32, i32* @x.35
  %4488 = load i32, i32* @y.36
  %4489 = sub i32 %4487, 1
  %4490 = mul i32 %4487, %4489
  %4491 = urem i32 %4490, 2
  %4492 = icmp eq i32 %4491, 0
  %4493 = icmp slt i32 %4488, 10
  %4494 = or i1 %4492, %4493
  br i1 %4494, label %originalBB1302, label %originalBB1302alteredBB

originalBB1302:                                   ; preds = %4486, %originalBB1302alteredBB
  %4495 = load i8, i8* %38, align 1, !dbg !2371
  %4496 = trunc i8 %4495 to i1, !dbg !2371
  %4497 = load i32, i32* @x.35
  %4498 = load i32, i32* @y.36
  %4499 = sub i32 %4497, 1
  %4500 = mul i32 %4497, %4499
  %4501 = urem i32 %4500, 2
  %4502 = icmp eq i32 %4501, 0
  %4503 = icmp slt i32 %4498, 10
  %4504 = or i1 %4502, %4503
  br i1 %4504, label %originalBBpart21304, label %originalBB1302alteredBB

originalBBpart21304:                              ; preds = %originalBB1302
  br i1 %4496, label %4505, label %4515, !dbg !2374

4505:                                             ; preds = %originalBBpart21304
  %4506 = load i8*, i8** %19, align 8, !dbg !2375
  %4507 = load i64, i64* %30, align 8, !dbg !2376
  %4508 = load i8*, i8** %21, align 8, !dbg !2377
  %4509 = load i64, i64* %22, align 8, !dbg !2378
  %4510 = load i32, i32* %24, align 4, !dbg !2379
  %4511 = load i32*, i32** %25, align 8, !dbg !2380
  %4512 = load i8*, i8** %26, align 8, !dbg !2381
  %4513 = load i8*, i8** %27, align 8, !dbg !2382
  %4514 = call i64 @quotearg_buffer_restyled(i8* %4506, i64 %4507, i8* %4508, i64 %4509, i32 5, i32 %4510, i32* %4511, i8* %4512, i8* %4513), !dbg !2383
  store i64 %4514, i64* %18, align 8, !dbg !2384
  br label %4791, !dbg !2384

4515:                                             ; preds = %originalBBpart21304
  %4516 = load i64, i64* %20, align 8, !dbg !2385
  %4517 = icmp ne i64 %4516, 0, !dbg !2385
  br i1 %4517, label %4539, label %4518, !dbg !2387

4518:                                             ; preds = %4515
  %4519 = load i32, i32* @x.35
  %4520 = load i32, i32* @y.36
  %4521 = sub i32 %4519, 1
  %4522 = mul i32 %4519, %4521
  %4523 = urem i32 %4522, 2
  %4524 = icmp eq i32 %4523, 0
  %4525 = icmp slt i32 %4520, 10
  %4526 = or i1 %4524, %4525
  br i1 %4526, label %originalBB1306, label %originalBB1306alteredBB

originalBB1306:                                   ; preds = %4518, %originalBB1306alteredBB
  %4527 = load i64, i64* %30, align 8, !dbg !2388
  %4528 = icmp ne i64 %4527, 0, !dbg !2388
  %4529 = load i32, i32* @x.35
  %4530 = load i32, i32* @y.36
  %4531 = sub i32 %4529, 1
  %4532 = mul i32 %4529, %4531
  %4533 = urem i32 %4532, 2
  %4534 = icmp eq i32 %4533, 0
  %4535 = icmp slt i32 %4530, 10
  %4536 = or i1 %4534, %4535
  br i1 %4536, label %originalBBpart21308, label %originalBB1306alteredBB

originalBBpart21308:                              ; preds = %originalBB1306
  br i1 %4528, label %4537, label %4539, !dbg !2389

4537:                                             ; preds = %originalBBpart21308
  %4538 = load i64, i64* %30, align 8, !dbg !2390
  store i64 %4538, i64* %20, align 8, !dbg !2392
  store i64 0, i64* %29, align 8, !dbg !2393
  br label %66, !dbg !2394

4539:                                             ; preds = %originalBBpart21308, %4515
  %4540 = load i32, i32* @x.35
  %4541 = load i32, i32* @y.36
  %4542 = sub i32 %4540, 1
  %4543 = mul i32 %4540, %4542
  %4544 = urem i32 %4543, 2
  %4545 = icmp eq i32 %4544, 0
  %4546 = icmp slt i32 %4541, 10
  %4547 = or i1 %4545, %4546
  br i1 %4547, label %originalBB1310, label %originalBB1310alteredBB

originalBB1310:                                   ; preds = %4539, %originalBB1310alteredBB
  %4548 = load i32, i32* @x.35
  %4549 = load i32, i32* @y.36
  %4550 = sub i32 %4548, 1
  %4551 = mul i32 %4548, %4550
  %4552 = urem i32 %4551, 2
  %4553 = icmp eq i32 %4552, 0
  %4554 = icmp slt i32 %4549, 10
  %4555 = or i1 %4553, %4554
  br i1 %4555, label %originalBBpart21312, label %originalBB1310alteredBB

originalBBpart21312:                              ; preds = %originalBB1310
  br label %4556

4556:                                             ; preds = %originalBBpart21312
  br label %4557, !dbg !2395

4557:                                             ; preds = %4556, %4483, %originalBBpart21300, %originalBBpart21296
  %4558 = load i32, i32* @x.35
  %4559 = load i32, i32* @y.36
  %4560 = sub i32 %4558, 1
  %4561 = mul i32 %4558, %4560
  %4562 = urem i32 %4561, 2
  %4563 = icmp eq i32 %4562, 0
  %4564 = icmp slt i32 %4559, 10
  %4565 = or i1 %4563, %4564
  br i1 %4565, label %originalBB1314, label %originalBB1314alteredBB

originalBB1314:                                   ; preds = %4557, %originalBB1314alteredBB
  %4566 = load i8*, i8** %31, align 8, !dbg !2396
  %4567 = icmp ne i8* %4566, null, !dbg !2396
  %4568 = load i32, i32* @x.35
  %4569 = load i32, i32* @y.36
  %4570 = sub i32 %4568, 1
  %4571 = mul i32 %4568, %4570
  %4572 = urem i32 %4571, 2
  %4573 = icmp eq i32 %4572, 0
  %4574 = icmp slt i32 %4569, 10
  %4575 = or i1 %4573, %4574
  br i1 %4575, label %originalBBpart21316, label %originalBB1314alteredBB

originalBBpart21316:                              ; preds = %originalBB1314
  br i1 %4567, label %4576, label %4683, !dbg !2398

4576:                                             ; preds = %originalBBpart21316
  %4577 = load i8, i8* %35, align 1, !dbg !2399
  %4578 = trunc i8 %4577 to i1, !dbg !2399
  br i1 %4578, label %4683, label %4579, !dbg !2400

4579:                                             ; preds = %4576
  br label %4580, !dbg !2401

4580:                                             ; preds = %4663, %4579
  %4581 = load i32, i32* @x.35
  %4582 = load i32, i32* @y.36
  %4583 = sub i32 %4581, 1
  %4584 = mul i32 %4581, %4583
  %4585 = urem i32 %4584, 2
  %4586 = icmp eq i32 %4585, 0
  %4587 = icmp slt i32 %4582, 10
  %4588 = or i1 %4586, %4587
  br i1 %4588, label %originalBB1318, label %originalBB1318alteredBB

originalBB1318:                                   ; preds = %4580, %originalBB1318alteredBB
  %4589 = load i8*, i8** %31, align 8, !dbg !2402
  %4590 = load i8, i8* %4589, align 1, !dbg !2405
  %4591 = icmp ne i8 %4590, 0, !dbg !2406
  %4592 = load i32, i32* @x.35
  %4593 = load i32, i32* @y.36
  %4594 = sub i32 %4592, 1
  %4595 = mul i32 %4592, %4594
  %4596 = urem i32 %4595, 2
  %4597 = icmp eq i32 %4596, 0
  %4598 = icmp slt i32 %4593, 10
  %4599 = or i1 %4597, %4598
  br i1 %4599, label %originalBBpart21320, label %originalBB1318alteredBB

originalBBpart21320:                              ; preds = %originalBB1318
  br i1 %4591, label %4600, label %4666, !dbg !2406

4600:                                             ; preds = %originalBBpart21320
  %4601 = load i32, i32* @x.35
  %4602 = load i32, i32* @y.36
  %4603 = sub i32 %4601, 1
  %4604 = mul i32 %4601, %4603
  %4605 = urem i32 %4604, 2
  %4606 = icmp eq i32 %4605, 0
  %4607 = icmp slt i32 %4602, 10
  %4608 = or i1 %4606, %4607
  br i1 %4608, label %originalBB1322, label %originalBB1322alteredBB

originalBB1322:                                   ; preds = %4600, %originalBB1322alteredBB
  %4609 = load i32, i32* @x.35
  %4610 = load i32, i32* @y.36
  %4611 = sub i32 %4609, 1
  %4612 = mul i32 %4609, %4611
  %4613 = urem i32 %4612, 2
  %4614 = icmp eq i32 %4613, 0
  %4615 = icmp slt i32 %4610, 10
  %4616 = or i1 %4614, %4615
  br i1 %4616, label %originalBBpart21324, label %originalBB1322alteredBB

originalBBpart21324:                              ; preds = %originalBB1322
  br label %4617, !dbg !2407

4617:                                             ; preds = %originalBBpart21324
  %4618 = load i32, i32* @x.35
  %4619 = load i32, i32* @y.36
  %4620 = sub i32 %4618, 1
  %4621 = mul i32 %4618, %4620
  %4622 = urem i32 %4621, 2
  %4623 = icmp eq i32 %4622, 0
  %4624 = icmp slt i32 %4619, 10
  %4625 = or i1 %4623, %4624
  br i1 %4625, label %originalBB1326, label %originalBB1326alteredBB

originalBB1326:                                   ; preds = %4617, %originalBB1326alteredBB
  %4626 = load i64, i64* %29, align 8, !dbg !2408
  %4627 = load i64, i64* %20, align 8, !dbg !2408
  %4628 = icmp ult i64 %4626, %4627, !dbg !2408
  %4629 = load i32, i32* @x.35
  %4630 = load i32, i32* @y.36
  %4631 = sub i32 %4629, 1
  %4632 = mul i32 %4629, %4631
  %4633 = urem i32 %4632, 2
  %4634 = icmp eq i32 %4633, 0
  %4635 = icmp slt i32 %4630, 10
  %4636 = or i1 %4634, %4635
  br i1 %4636, label %originalBBpart21328, label %originalBB1326alteredBB

originalBBpart21328:                              ; preds = %originalBB1326
  br i1 %4628, label %4637, label %4643, !dbg !2411

4637:                                             ; preds = %originalBBpart21328
  %4638 = load i8*, i8** %31, align 8, !dbg !2408
  %4639 = load i8, i8* %4638, align 1, !dbg !2408
  %4640 = load i8*, i8** %19, align 8, !dbg !2408
  %4641 = load i64, i64* %29, align 8, !dbg !2408
  %4642 = getelementptr inbounds i8, i8* %4640, i64 %4641, !dbg !2408
  store i8 %4639, i8* %4642, align 1, !dbg !2408
  br label %4643, !dbg !2408

4643:                                             ; preds = %4637, %originalBBpart21328
  %4644 = load i64, i64* %29, align 8, !dbg !2411
  %4645 = add i64 %4644, 1, !dbg !2411
  store i64 %4645, i64* %29, align 8, !dbg !2411
  br label %4646, !dbg !2411

4646:                                             ; preds = %4643
  %4647 = load i32, i32* @x.35
  %4648 = load i32, i32* @y.36
  %4649 = sub i32 %4647, 1
  %4650 = mul i32 %4647, %4649
  %4651 = urem i32 %4650, 2
  %4652 = icmp eq i32 %4651, 0
  %4653 = icmp slt i32 %4648, 10
  %4654 = or i1 %4652, %4653
  br i1 %4654, label %originalBB1330, label %originalBB1330alteredBB

originalBB1330:                                   ; preds = %4646, %originalBB1330alteredBB
  %4655 = load i32, i32* @x.35
  %4656 = load i32, i32* @y.36
  %4657 = sub i32 %4655, 1
  %4658 = mul i32 %4655, %4657
  %4659 = urem i32 %4658, 2
  %4660 = icmp eq i32 %4659, 0
  %4661 = icmp slt i32 %4656, 10
  %4662 = or i1 %4660, %4661
  br i1 %4662, label %originalBBpart21332, label %originalBB1330alteredBB

originalBBpart21332:                              ; preds = %originalBB1330
  br label %4663, !dbg !2411

4663:                                             ; preds = %originalBBpart21332
  %4664 = load i8*, i8** %31, align 8, !dbg !2412
  %4665 = getelementptr inbounds i8, i8* %4664, i32 1, !dbg !2412
  store i8* %4665, i8** %31, align 8, !dbg !2412
  br label %4580, !dbg !2413, !llvm.loop !2414

4666:                                             ; preds = %originalBBpart21320
  %4667 = load i32, i32* @x.35
  %4668 = load i32, i32* @y.36
  %4669 = sub i32 %4667, 1
  %4670 = mul i32 %4667, %4669
  %4671 = urem i32 %4670, 2
  %4672 = icmp eq i32 %4671, 0
  %4673 = icmp slt i32 %4668, 10
  %4674 = or i1 %4672, %4673
  br i1 %4674, label %originalBB1334, label %originalBB1334alteredBB

originalBB1334:                                   ; preds = %4666, %originalBB1334alteredBB
  %4675 = load i32, i32* @x.35
  %4676 = load i32, i32* @y.36
  %4677 = sub i32 %4675, 1
  %4678 = mul i32 %4675, %4677
  %4679 = urem i32 %4678, 2
  %4680 = icmp eq i32 %4679, 0
  %4681 = icmp slt i32 %4676, 10
  %4682 = or i1 %4680, %4681
  br i1 %4682, label %originalBBpart21336, label %originalBB1334alteredBB

originalBBpart21336:                              ; preds = %originalBB1334
  br label %4683, !dbg !2415

4683:                                             ; preds = %originalBBpart21336, %4576, %originalBBpart21316
  %4684 = load i32, i32* @x.35
  %4685 = load i32, i32* @y.36
  %4686 = sub i32 %4684, 1
  %4687 = mul i32 %4684, %4686
  %4688 = urem i32 %4687, 2
  %4689 = icmp eq i32 %4688, 0
  %4690 = icmp slt i32 %4685, 10
  %4691 = or i1 %4689, %4690
  br i1 %4691, label %originalBB1338, label %originalBB1338alteredBB

originalBB1338:                                   ; preds = %4683, %originalBB1338alteredBB
  %4692 = load i64, i64* %29, align 8, !dbg !2416
  %4693 = load i64, i64* %20, align 8, !dbg !2418
  %4694 = icmp ult i64 %4692, %4693, !dbg !2419
  %4695 = load i32, i32* @x.35
  %4696 = load i32, i32* @y.36
  %4697 = sub i32 %4695, 1
  %4698 = mul i32 %4695, %4697
  %4699 = urem i32 %4698, 2
  %4700 = icmp eq i32 %4699, 0
  %4701 = icmp slt i32 %4696, 10
  %4702 = or i1 %4700, %4701
  br i1 %4702, label %originalBBpart21340, label %originalBB1338alteredBB

originalBBpart21340:                              ; preds = %originalBB1338
  br i1 %4694, label %4703, label %4707, !dbg !2420

4703:                                             ; preds = %originalBBpart21340
  %4704 = load i8*, i8** %19, align 8, !dbg !2421
  %4705 = load i64, i64* %29, align 8, !dbg !2422
  %4706 = getelementptr inbounds i8, i8* %4704, i64 %4705, !dbg !2421
  store i8 0, i8* %4706, align 1, !dbg !2423
  br label %4707, !dbg !2421

4707:                                             ; preds = %4703, %originalBBpart21340
  %4708 = load i32, i32* @x.35
  %4709 = load i32, i32* @y.36
  %4710 = sub i32 %4708, 1
  %4711 = mul i32 %4708, %4710
  %4712 = urem i32 %4711, 2
  %4713 = icmp eq i32 %4712, 0
  %4714 = icmp slt i32 %4709, 10
  %4715 = or i1 %4713, %4714
  br i1 %4715, label %originalBB1342, label %originalBB1342alteredBB

originalBB1342:                                   ; preds = %4707, %originalBB1342alteredBB
  %4716 = load i64, i64* %29, align 8, !dbg !2424
  store i64 %4716, i64* %18, align 8, !dbg !2425
  %4717 = load i32, i32* @x.35
  %4718 = load i32, i32* @y.36
  %4719 = sub i32 %4717, 1
  %4720 = mul i32 %4717, %4719
  %4721 = urem i32 %4720, 2
  %4722 = icmp eq i32 %4721, 0
  %4723 = icmp slt i32 %4718, 10
  %4724 = or i1 %4722, %4723
  br i1 %4724, label %originalBBpart21344, label %originalBB1342alteredBB

originalBBpart21344:                              ; preds = %originalBB1342
  br label %4791, !dbg !2425

4725:                                             ; preds = %4444, %3842, %originalBBpart2922, %originalBBpart2850, %originalBBpart2699, %originalBBpart2691, %originalBBpart2655, %originalBBpart2639, %originalBBpart2536, %originalBBpart2340, %originalBBpart2170, %691
  call void @llvm.dbg.label(metadata !2426), !dbg !2427
  %4726 = load i32, i32* %23, align 4, !dbg !2428
  %4727 = icmp eq i32 %4726, 2, !dbg !2430
  br i1 %4727, label %4728, label %4764, !dbg !2431

4728:                                             ; preds = %4725
  %4729 = load i32, i32* @x.35
  %4730 = load i32, i32* @y.36
  %4731 = sub i32 %4729, 1
  %4732 = mul i32 %4729, %4731
  %4733 = urem i32 %4732, 2
  %4734 = icmp eq i32 %4733, 0
  %4735 = icmp slt i32 %4730, 10
  %4736 = or i1 %4734, %4735
  br i1 %4736, label %originalBB1346, label %originalBB1346alteredBB

originalBB1346:                                   ; preds = %4728, %originalBB1346alteredBB
  %4737 = load i8, i8* %33, align 1, !dbg !2432
  %4738 = trunc i8 %4737 to i1, !dbg !2432
  %4739 = load i32, i32* @x.35
  %4740 = load i32, i32* @y.36
  %4741 = sub i32 %4739, 1
  %4742 = mul i32 %4739, %4741
  %4743 = urem i32 %4742, 2
  %4744 = icmp eq i32 %4743, 0
  %4745 = icmp slt i32 %4740, 10
  %4746 = or i1 %4744, %4745
  br i1 %4746, label %originalBBpart21348, label %originalBB1346alteredBB

originalBBpart21348:                              ; preds = %originalBB1346
  br i1 %4738, label %4747, label %4764, !dbg !2433

4747:                                             ; preds = %originalBBpart21348
  %4748 = load i32, i32* @x.35
  %4749 = load i32, i32* @y.36
  %4750 = sub i32 %4748, 1
  %4751 = mul i32 %4748, %4750
  %4752 = urem i32 %4751, 2
  %4753 = icmp eq i32 %4752, 0
  %4754 = icmp slt i32 %4749, 10
  %4755 = or i1 %4753, %4754
  br i1 %4755, label %originalBB1350, label %originalBB1350alteredBB

originalBB1350:                                   ; preds = %4747, %originalBB1350alteredBB
  store i32 4, i32* %23, align 4, !dbg !2434
  %4756 = load i32, i32* @x.35
  %4757 = load i32, i32* @y.36
  %4758 = sub i32 %4756, 1
  %4759 = mul i32 %4756, %4758
  %4760 = urem i32 %4759, 2
  %4761 = icmp eq i32 %4760, 0
  %4762 = icmp slt i32 %4757, 10
  %4763 = or i1 %4761, %4762
  br i1 %4763, label %originalBBpart21352, label %originalBB1350alteredBB

originalBBpart21352:                              ; preds = %originalBB1350
  br label %4764, !dbg !2435

4764:                                             ; preds = %originalBBpart21352, %originalBBpart21348, %4725
  %4765 = load i32, i32* @x.35
  %4766 = load i32, i32* @y.36
  %4767 = sub i32 %4765, 1
  %4768 = mul i32 %4765, %4767
  %4769 = urem i32 %4768, 2
  %4770 = icmp eq i32 %4769, 0
  %4771 = icmp slt i32 %4766, 10
  %4772 = or i1 %4770, %4771
  br i1 %4772, label %originalBB1354, label %originalBB1354alteredBB

originalBB1354:                                   ; preds = %4764, %originalBB1354alteredBB
  %4773 = load i8*, i8** %19, align 8, !dbg !2436
  %4774 = load i64, i64* %20, align 8, !dbg !2437
  %4775 = load i8*, i8** %21, align 8, !dbg !2438
  %4776 = load i64, i64* %22, align 8, !dbg !2439
  %4777 = load i32, i32* %23, align 4, !dbg !2440
  %4778 = load i32, i32* %24, align 4, !dbg !2441
  %4779 = and i32 %4778, -3, !dbg !2442
  %4780 = load i8*, i8** %26, align 8, !dbg !2443
  %4781 = load i8*, i8** %27, align 8, !dbg !2444
  %4782 = call i64 @quotearg_buffer_restyled(i8* %4773, i64 %4774, i8* %4775, i64 %4776, i32 %4777, i32 %4779, i32* null, i8* %4780, i8* %4781), !dbg !2445
  store i64 %4782, i64* %18, align 8, !dbg !2446
  %4783 = load i32, i32* @x.35
  %4784 = load i32, i32* @y.36
  %4785 = sub i32 %4783, 1
  %4786 = mul i32 %4783, %4785
  %4787 = urem i32 %4786, 2
  %4788 = icmp eq i32 %4787, 0
  %4789 = icmp slt i32 %4784, 10
  %4790 = or i1 %4788, %4789
  br i1 %4790, label %originalBBpart21358, label %originalBB1354alteredBB

originalBBpart21358:                              ; preds = %originalBB1354
  br label %4791, !dbg !2446

4791:                                             ; preds = %originalBBpart21358, %originalBBpart21344, %4505
  %4792 = load i64, i64* %18, align 8, !dbg !2447
  ret i64 %4792, !dbg !2447

originalBBalteredBB:                              ; preds = %originalBB, %9
  %4793 = alloca i64, align 8
  %4794 = alloca i8*, align 8
  %4795 = alloca i64, align 8
  %4796 = alloca i8*, align 8
  %4797 = alloca i64, align 8
  %4798 = alloca i32, align 4
  %4799 = alloca i32, align 4
  %4800 = alloca i32*, align 8
  %4801 = alloca i8*, align 8
  %4802 = alloca i8*, align 8
  %4803 = alloca i64, align 8
  %4804 = alloca i64, align 8
  %4805 = alloca i64, align 8
  %4806 = alloca i8*, align 8
  %4807 = alloca i64, align 8
  %4808 = alloca i8, align 1
  %4809 = alloca i8, align 1
  %4810 = alloca i8, align 1
  %4811 = alloca i8, align 1
  %4812 = alloca i8, align 1
  %4813 = alloca i8, align 1
  %4814 = alloca i8, align 1
  %4815 = alloca i8, align 1
  %4816 = alloca i8, align 1
  %4817 = alloca i8, align 1
  %4818 = alloca i8, align 1
  %4819 = alloca i64, align 8
  %4820 = alloca i8, align 1
  %4821 = alloca %struct.__mbstate_t, align 4
  %4822 = alloca i32, align 4
  %4823 = alloca i64, align 8
  %4824 = alloca i64, align 8
  %4825 = alloca i64, align 8
  store i8* %0, i8** %4794, align 8
  call void @llvm.dbg.declare(metadata i8** %4794, metadata !2448, metadata !DIExpression()), !dbg !1568
  store i64 %1, i64* %4795, align 8
  call void @llvm.dbg.declare(metadata i64* %4795, metadata !2480, metadata !DIExpression()), !dbg !1570
  store i8* %2, i8** %4796, align 8
  call void @llvm.dbg.declare(metadata i8** %4796, metadata !2481, metadata !DIExpression()), !dbg !1572
  store i64 %3, i64* %4797, align 8
  call void @llvm.dbg.declare(metadata i64* %4797, metadata !2482, metadata !DIExpression()), !dbg !1574
  store i32 %4, i32* %4798, align 4
  call void @llvm.dbg.declare(metadata i32* %4798, metadata !2483, metadata !DIExpression()), !dbg !1576
  store i32 %5, i32* %4799, align 4
  call void @llvm.dbg.declare(metadata i32* %4799, metadata !2484, metadata !DIExpression()), !dbg !1578
  store i32* %6, i32** %4800, align 8
  call void @llvm.dbg.declare(metadata i32** %4800, metadata !2485, metadata !DIExpression()), !dbg !1580
  store i8* %7, i8** %4801, align 8
  call void @llvm.dbg.declare(metadata i8** %4801, metadata !2486, metadata !DIExpression()), !dbg !1582
  store i8* %8, i8** %4802, align 8
  call void @llvm.dbg.declare(metadata i8** %4802, metadata !2487, metadata !DIExpression()), !dbg !1584
  call void @llvm.dbg.declare(metadata i64* %4803, metadata !2488, metadata !DIExpression()), !dbg !1586
  call void @llvm.dbg.declare(metadata i64* %4804, metadata !2489, metadata !DIExpression()), !dbg !1588
  store i64 0, i64* %4804, align 8, !dbg !1588
  call void @llvm.dbg.declare(metadata i64* %4805, metadata !2490, metadata !DIExpression()), !dbg !1590
  store i64 0, i64* %4805, align 8, !dbg !1590
  call void @llvm.dbg.declare(metadata i8** %4806, metadata !2491, metadata !DIExpression()), !dbg !1592
  store i8* null, i8** %4806, align 8, !dbg !1592
  call void @llvm.dbg.declare(metadata i64* %4807, metadata !2492, metadata !DIExpression()), !dbg !1594
  store i64 0, i64* %4807, align 8, !dbg !1594
  call void @llvm.dbg.declare(metadata i8* %4808, metadata !2493, metadata !DIExpression()), !dbg !1596
  store i8 0, i8* %4808, align 1, !dbg !1596
  call void @llvm.dbg.declare(metadata i8* %4809, metadata !2494, metadata !DIExpression()), !dbg !1598
  %4826 = call i64 @__ctype_get_mb_cur_max() #10, !dbg !1599
  %4827 = icmp eq i64 %4826, 1, !dbg !1600
  %4828 = zext i1 %4827 to i8, !dbg !1598
  store i8 %4828, i8* %4809, align 1, !dbg !1598
  call void @llvm.dbg.declare(metadata i8* %4810, metadata !2495, metadata !DIExpression()), !dbg !1602
  %4829 = load i32, i32* %4799, align 4, !dbg !1603
  %_ = sub i32 %4829, 2
  %gen = mul i32 %_, 2
  %_1 = sub i32 0, %4829
  %gen2 = add i32 %_1, 2
  %4830 = and i32 %4829, 2, !dbg !1604
  %4831 = icmp ne i32 %4830, 0, !dbg !1605
  %4832 = zext i1 %4831 to i8, !dbg !1602
  store i8 %4832, i8* %4810, align 1, !dbg !1602
  call void @llvm.dbg.declare(metadata i8* %4811, metadata !2496, metadata !DIExpression()), !dbg !1607
  store i8 0, i8* %4811, align 1, !dbg !1607
  call void @llvm.dbg.declare(metadata i8* %4812, metadata !2497, metadata !DIExpression()), !dbg !1609
  store i8 0, i8* %4812, align 1, !dbg !1609
  call void @llvm.dbg.declare(metadata i8* %4813, metadata !2498, metadata !DIExpression()), !dbg !1611
  store i8 1, i8* %4813, align 1, !dbg !1611
  br label %originalBB

originalBB3alteredBB:                             ; preds = %originalBB3, %77
  %4833 = load i8*, i8** %19, align 8, !dbg !1625
  %4834 = load i64, i64* %29, align 8, !dbg !1625
  %4835 = getelementptr inbounds i8, i8* %4833, i64 %4834, !dbg !1625
  store i8 34, i8* %4835, align 1, !dbg !1625
  br label %originalBB3

originalBB7alteredBB:                             ; preds = %originalBB7, %97
  %4836 = load i64, i64* %29, align 8, !dbg !1628
  %_8 = sub i64 %4836, 1
  %gen9 = mul i64 %_8, 1
  %_10 = sub i64 %4836, 1
  %gen11 = mul i64 %_10, 1
  %_12 = sub i64 0, %4836
  %gen13 = add i64 %_12, 1
  %_14 = sub i64 0, %4836
  %gen15 = add i64 %_14, 1
  %_16 = sub i64 0, %4836
  %gen17 = add i64 %_16, 1
  %_18 = shl i64 %4836, 1
  %4837 = add i64 %4836, 1, !dbg !1628
  store i64 %4837, i64* %29, align 8, !dbg !1628
  br label %originalBB7

originalBB22alteredBB:                            ; preds = %originalBB22, %116
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %134
  store i8 1, i8* %33, align 1, !dbg !1633
  store i8 0, i8* %35, align 1, !dbg !1634
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %154
  %4838 = load i32, i32* %23, align 4, !dbg !1641
  %4839 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.64, i64 0, i64 0), i32 %4838), !dbg !1643
  store i8* %4839, i8** %26, align 8, !dbg !1644
  %4840 = load i32, i32* %23, align 4, !dbg !1645
  %4841 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.65, i64 0, i64 0), i32 %4840), !dbg !1646
  store i8* %4841, i8** %27, align 8, !dbg !1647
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %175
  %4842 = load i8, i8* %35, align 1, !dbg !1649
  %4843 = trunc i8 %4842 to i1, !dbg !1649
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %194
  %4844 = load i8*, i8** %26, align 8, !dbg !1652
  store i8* %4844, i8** %31, align 8, !dbg !1654
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %212
  %4845 = load i8*, i8** %31, align 8, !dbg !1656
  %4846 = load i8, i8* %4845, align 1, !dbg !1658
  %4847 = icmp ne i8 %4846, 0, !dbg !1659
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %232
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %253
  %4848 = load i8*, i8** %31, align 8, !dbg !1661
  %4849 = load i8, i8* %4848, align 1, !dbg !1661
  %4850 = load i8*, i8** %19, align 8, !dbg !1661
  %4851 = load i64, i64* %29, align 8, !dbg !1661
  %4852 = getelementptr inbounds i8, i8* %4850, i64 %4851, !dbg !1661
  store i8 %4849, i8* %4852, align 1, !dbg !1661
  br label %originalBB50

originalBB54alteredBB:                            ; preds = %originalBB54, %275
  %4853 = load i64, i64* %29, align 8, !dbg !1664
  %_55 = sub i64 %4853, 1
  %gen56 = mul i64 %_55, 1
  %_57 = sub i64 %4853, 1
  %gen58 = mul i64 %_57, 1
  %_59 = shl i64 %4853, 1
  %4854 = add i64 %4853, 1, !dbg !1664
  store i64 %4854, i64* %29, align 8, !dbg !1664
  br label %originalBB54

originalBB63alteredBB:                            ; preds = %originalBB63, %294
  br label %originalBB63

originalBB67alteredBB:                            ; preds = %originalBB67, %311
  %4855 = load i8*, i8** %31, align 8, !dbg !1665
  %4856 = getelementptr inbounds i8, i8* %4855, i32 1, !dbg !1665
  store i8* %4856, i8** %31, align 8, !dbg !1665
  br label %originalBB67

originalBB71alteredBB:                            ; preds = %originalBB71, %330
  br label %originalBB71

originalBB75alteredBB:                            ; preds = %originalBB75, %351
  store i8 1, i8* %33, align 1, !dbg !1676
  br label %originalBB75

originalBB79alteredBB:                            ; preds = %originalBB79, %368
  store i8 1, i8* %35, align 1, !dbg !1678
  br label %originalBB79

originalBB83alteredBB:                            ; preds = %originalBB83, %393
  br label %originalBB83

originalBB87alteredBB:                            ; preds = %originalBB87, %410
  %4857 = load i64, i64* %29, align 8, !dbg !1691
  %4858 = load i64, i64* %20, align 8, !dbg !1691
  %4859 = icmp ult i64 %4857, %4858, !dbg !1691
  br label %originalBB87

originalBB91alteredBB:                            ; preds = %originalBB91, %434
  %4860 = load i64, i64* %29, align 8, !dbg !1694
  %_92 = shl i64 %4860, 1
  %_93 = shl i64 %4860, 1
  %_94 = sub i64 0, %4860
  %gen95 = add i64 %_94, 1
  %_96 = shl i64 %4860, 1
  %_97 = shl i64 %4860, 1
  %_98 = sub i64 %4860, 1
  %gen99 = mul i64 %_98, 1
  %4861 = add i64 %4860, 1, !dbg !1694
  store i64 %4861, i64* %29, align 8, !dbg !1694
  br label %originalBB91

originalBB103alteredBB:                           ; preds = %originalBB103, %453
  br label %originalBB103

originalBB107alteredBB:                           ; preds = %originalBB107, %471
  store i8 0, i8* %35, align 1, !dbg !1698
  br label %originalBB107

originalBB111alteredBB:                           ; preds = %originalBB111, %488
  call void @abort() #12, !dbg !1700
  br label %originalBB111

originalBB115alteredBB:                           ; preds = %originalBB115, %506
  %4862 = load i64, i64* %22, align 8, !dbg !1704
  %4863 = icmp eq i64 %4862, -1, !dbg !1706
  br label %originalBB115

originalBB119alteredBB:                           ; preds = %originalBB119, %525
  %4864 = load i8*, i8** %21, align 8, !dbg !1707
  %4865 = load i64, i64* %28, align 8, !dbg !1708
  %4866 = getelementptr inbounds i8, i8* %4864, i64 %4865, !dbg !1707
  %4867 = load i8, i8* %4866, align 1, !dbg !1707
  %4868 = sext i8 %4867 to i32, !dbg !1707
  %4869 = icmp eq i32 %4868, 0, !dbg !1709
  %4870 = zext i1 %4869 to i32, !dbg !1709
  br label %originalBB119

originalBB123alteredBB:                           ; preds = %originalBB123, %549
  %4871 = load i64, i64* %28, align 8, !dbg !1710
  %4872 = load i64, i64* %22, align 8, !dbg !1711
  %4873 = icmp eq i64 %4871, %4872, !dbg !1712
  %4874 = zext i1 %4873 to i32, !dbg !1712
  br label %originalBB123

originalBB127alteredBB:                           ; preds = %originalBB127, %577
  %4875 = load i32, i32* %23, align 4, !dbg !1729
  %4876 = icmp ne i32 %4875, 2, !dbg !1730
  br label %originalBB127

originalBB131alteredBB:                           ; preds = %originalBB131, %599
  %4877 = load i64, i64* %28, align 8, !dbg !1734
  %4878 = load i64, i64* %32, align 8, !dbg !1735
  %_132 = shl i64 %4877, %4878
  %_133 = sub i64 0, %4877
  %gen134 = add i64 %_133, %4878
  %_135 = sub i64 %4877, %4878
  %gen136 = mul i64 %_135, %4878
  %_137 = sub i64 0, %4877
  %gen138 = add i64 %_137, %4878
  %_139 = sub i64 %4877, %4878
  %gen140 = mul i64 %_139, %4878
  %4879 = add i64 %4877, %4878, !dbg !1736
  %4880 = load i64, i64* %22, align 8, !dbg !1737
  %4881 = icmp eq i64 %4880, -1, !dbg !1738
  br label %originalBB131

originalBB144alteredBB:                           ; preds = %originalBB144, %624
  %4882 = load i8*, i8** %21, align 8, !dbg !1742
  %4883 = call i64 @strlen(i8* %4882) #13, !dbg !1743
  store i64 %4883, i64* %22, align 8, !dbg !1744
  br label %originalBB144

originalBB148alteredBB:                           ; preds = %originalBB148, %645
  %4884 = icmp ule i64 %610, %646, !dbg !1746
  br label %originalBB148

originalBB152alteredBB:                           ; preds = %originalBB152, %664
  %4885 = load i8*, i8** %21, align 8, !dbg !1748
  %4886 = load i64, i64* %28, align 8, !dbg !1749
  %4887 = getelementptr inbounds i8, i8* %4885, i64 %4886, !dbg !1750
  %4888 = load i8*, i8** %31, align 8, !dbg !1751
  %4889 = load i64, i64* %32, align 8, !dbg !1752
  %4890 = call i32 @memcmp(i8* %4887, i8* %4888, i64 %4889) #13, !dbg !1753
  %4891 = icmp eq i32 %4890, 0, !dbg !1754
  br label %originalBB152

originalBB156alteredBB:                           ; preds = %originalBB156, %692
  store i8 1, i8* %41, align 1, !dbg !1761
  br label %originalBB156

originalBB160alteredBB:                           ; preds = %originalBB160, %709
  %4892 = load i8*, i8** %21, align 8, !dbg !1763
  %4893 = load i64, i64* %28, align 8, !dbg !1764
  %4894 = getelementptr inbounds i8, i8* %4892, i64 %4893, !dbg !1763
  %4895 = load i8, i8* %4894, align 1, !dbg !1763
  store i8 %4895, i8* %39, align 1, !dbg !1765
  %4896 = load i8, i8* %39, align 1, !dbg !1766
  %4897 = zext i8 %4896 to i32, !dbg !1766
  br label %originalBB160

originalBB164alteredBB:                           ; preds = %originalBB164, %736
  %4898 = load i8, i8* %35, align 1, !dbg !1774
  %4899 = trunc i8 %4898 to i1, !dbg !1774
  br label %originalBB164

originalBB168alteredBB:                           ; preds = %originalBB168, %755
  br label %originalBB168

originalBB172alteredBB:                           ; preds = %originalBB172, %775
  %4900 = load i8, i8* %36, align 1, !dbg !1778
  %4901 = trunc i8 %4900 to i1, !dbg !1778
  br label %originalBB172

originalBB176alteredBB:                           ; preds = %originalBB176, %794
  br label %originalBB176

originalBB180alteredBB:                           ; preds = %originalBB180, %815
  %4902 = load i8*, i8** %19, align 8, !dbg !1782
  %4903 = load i64, i64* %29, align 8, !dbg !1782
  %4904 = getelementptr inbounds i8, i8* %4902, i64 %4903, !dbg !1782
  store i8 39, i8* %4904, align 1, !dbg !1782
  br label %originalBB180

originalBB184alteredBB:                           ; preds = %originalBB184, %856
  br label %originalBB184

originalBB188alteredBB:                           ; preds = %originalBB188, %874
  br label %originalBB188

originalBB192alteredBB:                           ; preds = %originalBB192, %899
  %4905 = load i64, i64* %29, align 8, !dbg !1789
  %_193 = shl i64 %4905, 1
  %_194 = sub i64 0, %4905
  %gen195 = add i64 %_194, 1
  %_196 = sub i64 %4905, 1
  %gen197 = mul i64 %_196, 1
  %4906 = add i64 %4905, 1, !dbg !1789
  store i64 %4906, i64* %29, align 8, !dbg !1789
  br label %originalBB192

originalBB201alteredBB:                           ; preds = %originalBB201, %918
  br label %originalBB201

originalBB205alteredBB:                           ; preds = %originalBB205, %935
  %4907 = load i64, i64* %29, align 8, !dbg !1790
  %4908 = load i64, i64* %20, align 8, !dbg !1790
  %4909 = icmp ult i64 %4907, %4908, !dbg !1790
  br label %originalBB205

originalBB209alteredBB:                           ; preds = %originalBB209, %959
  %4910 = load i64, i64* %29, align 8, !dbg !1793
  %_210 = shl i64 %4910, 1
  %_211 = shl i64 %4910, 1
  %_212 = sub i64 %4910, 1
  %gen213 = mul i64 %_212, 1
  %4911 = add i64 %4910, 1, !dbg !1793
  store i64 %4911, i64* %29, align 8, !dbg !1793
  br label %originalBB209

originalBB217alteredBB:                           ; preds = %originalBB217, %978
  store i8 1, i8* %36, align 1, !dbg !1780
  br label %originalBB217

originalBB221alteredBB:                           ; preds = %originalBB221, %1000
  %4912 = load i8*, i8** %19, align 8, !dbg !1794
  %4913 = load i64, i64* %29, align 8, !dbg !1794
  %4914 = getelementptr inbounds i8, i8* %4912, i64 %4913, !dbg !1794
  store i8 92, i8* %4914, align 1, !dbg !1794
  br label %originalBB221

originalBB225alteredBB:                           ; preds = %originalBB225, %1020
  %4915 = load i64, i64* %29, align 8, !dbg !1797
  %_226 = sub i64 %4915, 1
  %gen227 = mul i64 %_226, 1
  %_228 = sub i64 0, %4915
  %gen229 = add i64 %_228, 1
  %_230 = sub i64 0, %4915
  %gen231 = add i64 %_230, 1
  %_232 = sub i64 0, %4915
  %gen233 = add i64 %_232, 1
  %4916 = add i64 %4915, 1, !dbg !1797
  store i64 %4916, i64* %29, align 8, !dbg !1797
  br label %originalBB225

originalBB237alteredBB:                           ; preds = %originalBB237, %1040
  %4917 = load i32, i32* %23, align 4, !dbg !1798
  %4918 = icmp ne i32 %4917, 2, !dbg !1800
  br label %originalBB237

originalBB241alteredBB:                           ; preds = %originalBB241, %1064
  %4919 = load i8*, i8** %21, align 8, !dbg !1807
  %4920 = load i64, i64* %28, align 8, !dbg !1808
  %_242 = shl i64 %4920, 1
  %_243 = sub i64 0, %4920
  %gen244 = add i64 %_243, 1
  %_245 = sub i64 0, %4920
  %gen246 = add i64 %_245, 1
  %_247 = sub i64 %4920, 1
  %gen248 = mul i64 %_247, 1
  %_249 = sub i64 0, %4920
  %gen250 = add i64 %_249, 1
  %_251 = sub i64 0, %4920
  %gen252 = add i64 %_251, 1
  %_253 = sub i64 %4920, 1
  %gen254 = mul i64 %_253, 1
  %4921 = add i64 %4920, 1, !dbg !1809
  %4922 = getelementptr inbounds i8, i8* %4919, i64 %4921, !dbg !1807
  %4923 = load i8, i8* %4922, align 1, !dbg !1807
  %4924 = sext i8 %4923 to i32, !dbg !1807
  %4925 = icmp sle i32 48, %4924, !dbg !1810
  br label %originalBB241

originalBB258alteredBB:                           ; preds = %originalBB258, %1097
  %4926 = load i64, i64* %29, align 8, !dbg !1819
  %4927 = load i64, i64* %20, align 8, !dbg !1819
  %4928 = icmp ult i64 %4926, %4927, !dbg !1819
  br label %originalBB258

originalBB262alteredBB:                           ; preds = %originalBB262, %1117
  %4929 = load i8*, i8** %19, align 8, !dbg !1819
  %4930 = load i64, i64* %29, align 8, !dbg !1819
  %4931 = getelementptr inbounds i8, i8* %4929, i64 %4930, !dbg !1819
  store i8 48, i8* %4931, align 1, !dbg !1819
  br label %originalBB262

originalBB266alteredBB:                           ; preds = %originalBB266, %1137
  %4932 = load i64, i64* %29, align 8, !dbg !1822
  %_267 = shl i64 %4932, 1
  %_268 = sub i64 0, %4932
  %gen269 = add i64 %_268, 1
  %_270 = sub i64 %4932, 1
  %gen271 = mul i64 %_270, 1
  %_272 = shl i64 %4932, 1
  %_273 = sub i64 0, %4932
  %gen274 = add i64 %_273, 1
  %_275 = sub i64 0, %4932
  %gen276 = add i64 %_275, 1
  %_277 = sub i64 0, %4932
  %gen278 = add i64 %_277, 1
  %_279 = sub i64 %4932, 1
  %gen280 = mul i64 %_279, 1
  %_281 = sub i64 0, %4932
  %gen282 = add i64 %_281, 1
  %4933 = add i64 %4932, 1, !dbg !1822
  store i64 %4933, i64* %29, align 8, !dbg !1822
  br label %originalBB266

originalBB286alteredBB:                           ; preds = %originalBB286, %1156
  br label %originalBB286

originalBB290alteredBB:                           ; preds = %originalBB290, %1173
  %4934 = load i64, i64* %29, align 8, !dbg !1824
  %4935 = load i64, i64* %20, align 8, !dbg !1824
  %4936 = icmp ult i64 %4934, %4935, !dbg !1824
  br label %originalBB290

originalBB294alteredBB:                           ; preds = %originalBB294, %1193
  %4937 = load i8*, i8** %19, align 8, !dbg !1824
  %4938 = load i64, i64* %29, align 8, !dbg !1824
  %4939 = getelementptr inbounds i8, i8* %4937, i64 %4938, !dbg !1824
  store i8 48, i8* %4939, align 1, !dbg !1824
  br label %originalBB294

originalBB298alteredBB:                           ; preds = %originalBB298, %1216
  br label %originalBB298

originalBB302alteredBB:                           ; preds = %originalBB302, %1233
  store i8 48, i8* %39, align 1, !dbg !1829
  br label %originalBB302

originalBB306alteredBB:                           ; preds = %originalBB306, %1250
  %4940 = load i32, i32* %24, align 4, !dbg !1831
  %_307 = shl i32 %4940, 1
  %_308 = sub i32 %4940, 1
  %gen309 = mul i32 %_308, 1
  %_310 = sub i32 0, %4940
  %gen311 = add i32 %_310, 1
  %_312 = sub i32 0, %4940
  %gen313 = add i32 %_312, 1
  %_314 = sub i32 0, %4940
  %gen315 = add i32 %_314, 1
  %_316 = sub i32 0, %4940
  %gen317 = add i32 %_316, 1
  %_318 = shl i32 %4940, 1
  %_319 = sub i32 %4940, 1
  %gen320 = mul i32 %_319, 1
  %_321 = sub i32 0, %4940
  %gen322 = add i32 %_321, 1
  %4941 = and i32 %4940, 1, !dbg !1833
  %4942 = icmp ne i32 %4941, 0, !dbg !1833
  br label %originalBB306

originalBB326alteredBB:                           ; preds = %originalBB326, %1272
  br label %originalBB326

originalBB330alteredBB:                           ; preds = %originalBB330, %1289
  %4943 = load i32, i32* %23, align 4, !dbg !1837
  br label %originalBB330

originalBB334alteredBB:                           ; preds = %originalBB334, %1307
  %4944 = load i8, i8* %35, align 1, !dbg !1839
  %4945 = trunc i8 %4944 to i1, !dbg !1839
  br label %originalBB334

originalBB338alteredBB:                           ; preds = %originalBB338, %1326
  br label %originalBB338

originalBB342alteredBB:                           ; preds = %originalBB342, %1343
  br label %originalBB342

originalBB346alteredBB:                           ; preds = %originalBB346, %1360
  %4946 = load i32, i32* %24, align 4, !dbg !1845
  %_347 = sub i32 0, %4946
  %gen348 = add i32 %_347, 4
  %_349 = sub i32 %4946, 4
  %gen350 = mul i32 %_349, 4
  %_351 = sub i32 %4946, 4
  %gen352 = mul i32 %_351, 4
  %_353 = sub i32 0, %4946
  %gen354 = add i32 %_353, 4
  %_355 = shl i32 %4946, 4
  %_356 = shl i32 %4946, 4
  %_357 = shl i32 %4946, 4
  %4947 = and i32 %4946, 4, !dbg !1847
  %4948 = icmp ne i32 %4947, 0, !dbg !1847
  br label %originalBB346

originalBB361alteredBB:                           ; preds = %originalBB361, %1380
  %4949 = load i64, i64* %28, align 8, !dbg !1849
  %_362 = shl i64 %4949, 2
  %_363 = sub i64 0, %4949
  %gen364 = add i64 %_363, 2
  %_365 = sub i64 0, %4949
  %gen366 = add i64 %_365, 2
  %_367 = shl i64 %4949, 2
  %4950 = add i64 %4949, 2, !dbg !1850
  %4951 = load i64, i64* %22, align 8, !dbg !1851
  %4952 = trunc i64 %4951 to i32
  %_368 = sub i32 %4952, -4
  %gen369 = mul i32 %_368, -4
  %_370 = shl i32 %4952, -4
  %_371 = sub i32 %4952, -4
  %gen372 = mul i32 %_371, -4
  %_373 = shl i32 %4952, -4
  %4953 = mul i32 %4952, -4
  %4954 = trunc i64 2 to i32
  %_374 = shl i32 %4954, 3
  %4955 = mul i32 %4954, 3
  %_375 = shl i32 %4955, -5
  %4956 = add i32 %4955, -5
  %_376 = sub i32 0, %4953
  %gen377 = add i32 %_376, %4953
  %_378 = shl i32 %4953, %4953
  %_379 = sub i32 0, %4953
  %gen380 = add i32 %_379, %4953
  %4957 = mul i32 %4953, %4953
  %_381 = sub i32 0, %4956
  %gen382 = add i32 %_381, %4956
  %_383 = sub i32 %4956, %4956
  %gen384 = mul i32 %_383, %4956
  %4958 = mul i32 %4956, %4956
  %_385 = sub i32 0, %4957
  %gen386 = add i32 %_385, %4958
  %_387 = sub i32 %4957, %4958
  %gen388 = mul i32 %_387, %4958
  %_389 = sub i32 0, %4957
  %gen390 = add i32 %_389, %4958
  %_391 = sub i32 0, %4957
  %gen392 = add i32 %_391, %4958
  %_393 = sub i32 0, %4957
  %gen394 = add i32 %_393, %4958
  %4959 = add i32 %4957, %4958
  %_395 = shl i32 %4953, %4956
  %_396 = sub i32 0, %4953
  %gen397 = add i32 %_396, %4956
  %_398 = sub i32 0, %4953
  %gen399 = add i32 %_398, %4956
  %_400 = shl i32 %4953, %4956
  %_401 = sub i32 0, %4953
  %gen402 = add i32 %_401, %4956
  %_403 = sub i32 %4953, %4956
  %gen404 = mul i32 %_403, %4956
  %_405 = shl i32 %4953, %4956
  %4960 = mul i32 %4953, %4956
  %_406 = shl i32 %4960, 2
  %_407 = sub i32 %4960, 2
  %gen408 = mul i32 %_407, 2
  %_409 = sub i32 %4960, 2
  %gen410 = mul i32 %_409, 2
  %4961 = mul i32 %4960, 2
  %_411 = shl i32 %4959, %4961
  %_412 = sub i32 0, %4959
  %gen413 = add i32 %_412, %4961
  %_414 = sub i32 %4959, %4961
  %gen415 = mul i32 %_414, %4961
  %_416 = sub i32 %4959, %4961
  %gen417 = mul i32 %_416, %4961
  %_418 = sub i32 0, %4959
  %gen419 = add i32 %_418, %4961
  %4962 = sub i32 %4959, %4961
  %_420 = sub i32 %4962, -2
  %gen421 = mul i32 %_420, -2
  %_422 = sub i32 0, %4962
  %gen423 = add i32 %_422, -2
  %_424 = sub i32 0, %4962
  %gen425 = add i32 %_424, -2
  %_426 = sub i32 %4962, -2
  %gen427 = mul i32 %_426, -2
  %_428 = sub i32 %4962, -2
  %gen429 = mul i32 %_428, -2
  %_430 = sub i32 %4962, -2
  %gen431 = mul i32 %_430, -2
  %_432 = sub i32 0, %4962
  %gen433 = add i32 %_432, -2
  %_434 = sub i32 %4962, -2
  %gen435 = mul i32 %_434, -2
  %4963 = mul i32 %4962, -2
  %_436 = sub i32 %4963, -4
  %gen437 = mul i32 %_436, -4
  %_438 = shl i32 %4963, -4
  %_439 = sub i32 0, %4963
  %gen440 = add i32 %_439, -4
  %_441 = sub i32 %4963, -4
  %gen442 = mul i32 %_441, -4
  %_443 = sub i32 0, %4963
  %gen444 = add i32 %_443, -4
  %_445 = sub i32 0, %4963
  %gen446 = add i32 %_445, -4
  %4964 = add i32 %4963, -4
  %4965 = icmp ne i32 %4964, -2
  br label %originalBB361

originalBB450alteredBB:                           ; preds = %originalBB450, %1415
  %4966 = icmp ult i64 %1390, %1391, !dbg !1852
  br label %originalBB450

originalBB454alteredBB:                           ; preds = %originalBB454, %1433
  %4967 = load i8*, i8** %21, align 8, !dbg !1854
  %4968 = load i64, i64* %28, align 8, !dbg !1855
  %_455 = sub i64 %4968, 1
  %gen456 = mul i64 %_455, 1
  %4969 = add i64 %4968, 1, !dbg !1856
  %4970 = trunc i64 1 to i32
  %_457 = sub i32 0, %4970
  %gen458 = add i32 %_457, 4
  %_459 = sub i32 0, %4970
  %gen460 = add i32 %_459, 4
  %_461 = sub i32 0, %4970
  %gen462 = add i32 %_461, 4
  %_463 = shl i32 %4970, 4
  %_464 = shl i32 %4970, 4
  %_465 = shl i32 %4970, 4
  %_466 = sub i32 0, %4970
  %gen467 = add i32 %_466, 4
  %4971 = mul i32 %4970, 4
  %_468 = shl i32 %4971, 3
  %4972 = add i32 %4971, 3
  %4973 = trunc i64 %4968 to i32
  %_469 = sub i32 %4973, 2
  %gen470 = mul i32 %_469, 2
  %_471 = sub i32 %4973, 2
  %gen472 = mul i32 %_471, 2
  %_473 = sub i32 %4973, 2
  %gen474 = mul i32 %_473, 2
  %_475 = sub i32 %4973, 2
  %gen476 = mul i32 %_475, 2
  %_477 = sub i32 %4973, 2
  %gen478 = mul i32 %_477, 2
  %4974 = mul i32 %4973, 2
  %_479 = shl i32 %4974, 1
  %_480 = sub i32 0, %4974
  %gen481 = add i32 %_480, 1
  %4975 = add i32 %4974, 1
  %_482 = sub i32 0, %4972
  %gen483 = add i32 %_482, %4972
  %_484 = sub i32 %4972, %4972
  %gen485 = mul i32 %_484, %4972
  %_486 = shl i32 %4972, %4972
  %_487 = sub i32 %4972, %4972
  %gen488 = mul i32 %_487, %4972
  %_489 = shl i32 %4972, %4972
  %_490 = shl i32 %4972, %4972
  %_491 = sub i32 0, %4972
  %gen492 = add i32 %_491, %4972
  %_493 = sub i32 0, %4972
  %gen494 = add i32 %_493, %4972
  %4976 = mul i32 %4972, %4972
  %_495 = sub i32 %4975, %4975
  %gen496 = mul i32 %_495, %4975
  %_497 = shl i32 %4975, %4975
  %_498 = shl i32 %4975, %4975
  %_499 = sub i32 0, %4975
  %gen500 = add i32 %_499, %4975
  %_501 = sub i32 0, %4975
  %gen502 = add i32 %_501, %4975
  %_503 = shl i32 %4975, %4975
  %4977 = mul i32 %4975, %4975
  %_504 = sub i32 %4977, 34
  %gen505 = mul i32 %_504, 34
  %4978 = mul i32 %4977, 34
  %_506 = sub i32 0, %4976
  %gen507 = add i32 %_506, %4978
  %_508 = sub i32 0, %4976
  %gen509 = add i32 %_508, %4978
  %_510 = shl i32 %4976, %4978
  %4979 = sub i32 %4976, %4978
  %_511 = sub i32 %4979, -2
  %gen512 = mul i32 %_511, -2
  %_513 = shl i32 %4979, -2
  %_514 = sub i32 %4979, -2
  %gen515 = mul i32 %_514, -2
  %_516 = shl i32 %4979, -2
  %_517 = sub i32 0, %4979
  %gen518 = add i32 %_517, -2
  %4980 = mul i32 %4979, -2
  %_519 = sub i32 0, %4980
  %gen520 = add i32 %_519, -2
  %_521 = sub i32 0, %4980
  %gen522 = add i32 %_521, -2
  %_523 = sub i32 0, %4980
  %gen524 = add i32 %_523, -2
  %_525 = sub i32 0, %4980
  %gen526 = add i32 %_525, -2
  %4981 = add i32 %4980, -2
  %4982 = icmp ne i32 %4981, -4
  br label %originalBB454

originalBB530alteredBB:                           ; preds = %originalBB530, %1479
  %4983 = load i8, i8* %35, align 1, !dbg !1863
  %4984 = trunc i8 %4983 to i1, !dbg !1863
  br label %originalBB530

originalBB534alteredBB:                           ; preds = %originalBB534, %1498
  br label %originalBB534

originalBB538alteredBB:                           ; preds = %originalBB538, %1523
  %4985 = load i64, i64* %29, align 8, !dbg !1874
  %4986 = load i64, i64* %20, align 8, !dbg !1874
  %4987 = icmp ult i64 %4985, %4986, !dbg !1874
  br label %originalBB538

originalBB542alteredBB:                           ; preds = %originalBB542, %1543
  %4988 = load i8*, i8** %19, align 8, !dbg !1874
  %4989 = load i64, i64* %29, align 8, !dbg !1874
  %4990 = getelementptr inbounds i8, i8* %4988, i64 %4989, !dbg !1874
  store i8 63, i8* %4990, align 1, !dbg !1874
  br label %originalBB542

originalBB546alteredBB:                           ; preds = %originalBB546, %1563
  %4991 = load i64, i64* %29, align 8, !dbg !1877
  %_547 = sub i64 0, %4991
  %gen548 = add i64 %_547, 1
  %_549 = sub i64 0, %4991
  %gen550 = add i64 %_549, 1
  %_551 = sub i64 0, %4991
  %gen552 = add i64 %_551, 1
  %_553 = sub i64 %4991, 1
  %gen554 = mul i64 %_553, 1
  %4992 = add i64 %4991, 1, !dbg !1877
  store i64 %4992, i64* %29, align 8, !dbg !1877
  br label %originalBB546

originalBB558alteredBB:                           ; preds = %originalBB558, %1582
  br label %originalBB558

originalBB562alteredBB:                           ; preds = %originalBB562, %1599
  %4993 = load i64, i64* %29, align 8, !dbg !1879
  %4994 = load i64, i64* %20, align 8, !dbg !1879
  %4995 = icmp ult i64 %4993, %4994, !dbg !1879
  br label %originalBB562

originalBB566alteredBB:                           ; preds = %originalBB566, %1635
  br label %originalBB566

originalBB570alteredBB:                           ; preds = %originalBB570, %1652
  store i64 %1625, i64* %29, align 8, !dbg !1882
  br label %originalBB570

originalBB574alteredBB:                           ; preds = %originalBB574, %1669
  br label %originalBB574

originalBB578alteredBB:                           ; preds = %originalBB578, %1686
  %4996 = load i64, i64* %29, align 8, !dbg !1884
  %4997 = load i64, i64* %20, align 8, !dbg !1884
  %4998 = icmp ult i64 %4996, %4997, !dbg !1884
  br label %originalBB578

originalBB582alteredBB:                           ; preds = %originalBB582, %1713
  br label %originalBB582

originalBB586alteredBB:                           ; preds = %originalBB586, %1730
  %4999 = load i64, i64* %29, align 8, !dbg !1889
  %5000 = load i64, i64* %20, align 8, !dbg !1889
  %5001 = icmp ult i64 %4999, %5000, !dbg !1889
  br label %originalBB586

originalBB590alteredBB:                           ; preds = %originalBB590, %1750
  %5002 = load i8*, i8** %19, align 8, !dbg !1889
  %5003 = load i64, i64* %29, align 8, !dbg !1889
  %5004 = getelementptr inbounds i8, i8* %5002, i64 %5003, !dbg !1889
  store i8 63, i8* %5004, align 1, !dbg !1889
  br label %originalBB590

originalBB594alteredBB:                           ; preds = %originalBB594, %1770
  %5005 = load i64, i64* %29, align 8, !dbg !1892
  %_595 = shl i64 %5005, 1
  %_596 = sub i64 0, %5005
  %gen597 = add i64 %_596, 1
  %_598 = sub i64 %5005, 1
  %gen599 = mul i64 %_598, 1
  %_600 = sub i64 %5005, 1
  %gen601 = mul i64 %_600, 1
  %_602 = sub i64 %5005, 1
  %gen603 = mul i64 %_602, 1
  %_604 = sub i64 %5005, 1
  %gen605 = mul i64 %_604, 1
  %5006 = add i64 %5005, 1, !dbg !1892
  store i64 %5006, i64* %29, align 8, !dbg !1892
  br label %originalBB594

originalBB609alteredBB:                           ; preds = %originalBB609, %1790
  br label %originalBB609

originalBB613alteredBB:                           ; preds = %originalBB613, %1807
  br label %originalBB613

originalBB617alteredBB:                           ; preds = %originalBB617, %1827
  store i8 97, i8* %40, align 1, !dbg !1899
  br label %originalBB617

originalBB621alteredBB:                           ; preds = %originalBB621, %1846
  store i8 110, i8* %40, align 1, !dbg !1905
  br label %originalBB621

originalBB625alteredBB:                           ; preds = %originalBB625, %1863
  store i8 114, i8* %40, align 1, !dbg !1907
  br label %originalBB625

originalBB629alteredBB:                           ; preds = %originalBB629, %1880
  store i8 116, i8* %40, align 1, !dbg !1909
  br label %originalBB629

originalBB633alteredBB:                           ; preds = %originalBB633, %1902
  %5007 = load i8, i8* %35, align 1, !dbg !1919
  %5008 = trunc i8 %5007 to i1, !dbg !1919
  br label %originalBB633

originalBB637alteredBB:                           ; preds = %originalBB637, %1921
  br label %originalBB637

originalBB641alteredBB:                           ; preds = %originalBB641, %1942
  %5009 = load i8, i8* %35, align 1, !dbg !1928
  %5010 = trunc i8 %5009 to i1, !dbg !1928
  br label %originalBB641

originalBB645alteredBB:                           ; preds = %originalBB645, %1965
  br label %originalBB645

originalBB649alteredBB:                           ; preds = %originalBB649, %1985
  %5011 = load i8, i8* %35, align 1, !dbg !1939
  %5012 = trunc i8 %5011 to i1, !dbg !1939
  br label %originalBB649

originalBB653alteredBB:                           ; preds = %originalBB653, %2004
  br label %originalBB653

originalBB657alteredBB:                           ; preds = %originalBB657, %2022
  %5013 = load i8, i8* %33, align 1, !dbg !1944
  %5014 = trunc i8 %5013 to i1, !dbg !1944
  br label %originalBB657

originalBB661alteredBB:                           ; preds = %originalBB661, %2044
  %5015 = load i64, i64* %22, align 8, !dbg !1952
  %5016 = icmp eq i64 %5015, -1, !dbg !1954
  br label %originalBB661

originalBB665alteredBB:                           ; preds = %originalBB665, %2063
  %5017 = load i8*, i8** %21, align 8, !dbg !1956
  %5018 = getelementptr inbounds i8, i8* %5017, i64 1, !dbg !1956
  %5019 = load i8, i8* %5018, align 1, !dbg !1956
  %5020 = sext i8 %5019 to i32, !dbg !1956
  %5021 = icmp eq i32 %5020, 0, !dbg !1957
  br label %originalBB665

originalBB669alteredBB:                           ; preds = %originalBB669, %2085
  %5022 = load i64, i64* %22, align 8, !dbg !1958
  %5023 = icmp eq i64 %5022, 1, !dbg !1959
  br label %originalBB669

originalBB673alteredBB:                           ; preds = %originalBB673, %2105
  br label %originalBB673

originalBB677alteredBB:                           ; preds = %originalBB677, %2125
  br label %originalBB677

originalBB681alteredBB:                           ; preds = %originalBB681, %2142
  br label %originalBB681

originalBB685alteredBB:                           ; preds = %originalBB685, %2159
  store i8 1, i8* %43, align 1, !dbg !1968
  br label %originalBB685

originalBB689alteredBB:                           ; preds = %originalBB689, %2182
  br label %originalBB689

originalBB693alteredBB:                           ; preds = %originalBB693, %2203
  %5024 = load i8, i8* %35, align 1, !dbg !1984
  %5025 = trunc i8 %5024 to i1, !dbg !1984
  br label %originalBB693

originalBB697alteredBB:                           ; preds = %originalBB697, %2222
  br label %originalBB697

originalBB701alteredBB:                           ; preds = %originalBB701, %2247
  br label %originalBB701

originalBB705alteredBB:                           ; preds = %originalBB705, %2268
  %5026 = load i8*, i8** %19, align 8, !dbg !2000
  %5027 = load i64, i64* %29, align 8, !dbg !2000
  %5028 = getelementptr inbounds i8, i8* %5026, i64 %5027, !dbg !2000
  store i8 39, i8* %5028, align 1, !dbg !2000
  br label %originalBB705

originalBB709alteredBB:                           ; preds = %originalBB709, %2288
  %5029 = load i64, i64* %29, align 8, !dbg !2003
  %_710 = sub i64 %5029, 1
  %gen711 = mul i64 %_710, 1
  %_712 = sub i64 %5029, 1
  %gen713 = mul i64 %_712, 1
  %_714 = sub i64 0, %5029
  %gen715 = add i64 %_714, 1
  %_716 = sub i64 %5029, 1
  %gen717 = mul i64 %_716, 1
  %5030 = add i64 %5029, 1, !dbg !2003
  store i64 %5030, i64* %29, align 8, !dbg !2003
  br label %originalBB709

originalBB721alteredBB:                           ; preds = %originalBB721, %2307
  br label %originalBB721

originalBB725alteredBB:                           ; preds = %originalBB725, %2324
  %5031 = load i64, i64* %29, align 8, !dbg !2005
  %5032 = load i64, i64* %20, align 8, !dbg !2005
  %5033 = icmp ult i64 %5031, %5032, !dbg !2005
  br label %originalBB725

originalBB729alteredBB:                           ; preds = %originalBB729, %2344
  %5034 = load i8*, i8** %19, align 8, !dbg !2005
  %5035 = load i64, i64* %29, align 8, !dbg !2005
  %5036 = getelementptr inbounds i8, i8* %5034, i64 %5035, !dbg !2005
  store i8 92, i8* %5036, align 1, !dbg !2005
  br label %originalBB729

originalBB733alteredBB:                           ; preds = %originalBB733, %2364
  %5037 = load i64, i64* %29, align 8, !dbg !2008
  %_734 = sub i64 %5037, 1
  %gen735 = mul i64 %_734, 1
  %_736 = shl i64 %5037, 1
  %_737 = sub i64 0, %5037
  %gen738 = add i64 %_737, 1
  %5038 = add i64 %5037, 1, !dbg !2008
  store i64 %5038, i64* %29, align 8, !dbg !2008
  br label %originalBB733

originalBB742alteredBB:                           ; preds = %originalBB742, %2384
  %5039 = load i64, i64* %29, align 8, !dbg !2010
  %5040 = load i64, i64* %20, align 8, !dbg !2010
  %5041 = icmp ult i64 %5039, %5040, !dbg !2010
  br label %originalBB742

originalBB746alteredBB:                           ; preds = %originalBB746, %2404
  %5042 = load i8*, i8** %19, align 8, !dbg !2010
  %5043 = load i64, i64* %29, align 8, !dbg !2010
  %5044 = getelementptr inbounds i8, i8* %5042, i64 %5043, !dbg !2010
  store i8 39, i8* %5044, align 1, !dbg !2010
  br label %originalBB746

originalBB750alteredBB:                           ; preds = %originalBB750, %2424
  %5045 = load i64, i64* %29, align 8, !dbg !2013
  %_751 = sub i64 0, %5045
  %gen752 = add i64 %_751, 1
  %_753 = sub i64 0, %5045
  %gen754 = add i64 %_753, 1
  %_755 = sub i64 0, %5045
  %gen756 = add i64 %_755, 1
  %5046 = add i64 %5045, 1, !dbg !2013
  store i64 %5046, i64* %29, align 8, !dbg !2013
  br label %originalBB750

originalBB760alteredBB:                           ; preds = %originalBB760, %2445
  store i8 1, i8* %43, align 1, !dbg !2017
  br label %originalBB760

originalBB764alteredBB:                           ; preds = %originalBB764, %2462
  %5047 = load i8, i8* %34, align 1, !dbg !2024
  %5048 = trunc i8 %5047 to i1, !dbg !2024
  br label %originalBB764

originalBB768alteredBB:                           ; preds = %originalBB768, %2493
  %5049 = bitcast %struct.__mbstate_t* %46 to i8*, !dbg !2051
  call void @llvm.memset.p0i8.i64(i8* align 4 %5049, i8 0, i64 8, i1 false), !dbg !2051
  store i64 0, i64* %44, align 8, !dbg !2052
  store i8 1, i8* %45, align 1, !dbg !2053
  %5050 = load i64, i64* %22, align 8, !dbg !2054
  %5051 = trunc i64 %5050 to i32
  %_769 = shl i32 %5051, -2
  %_770 = sub i32 %5051, -2
  %gen771 = mul i32 %_770, -2
  %5052 = mul i32 %5051, -2
  %_772 = shl i32 %5052, %5052
  %_773 = sub i32 %5052, %5052
  %gen774 = mul i32 %_773, %5052
  %_775 = sub i32 0, %5052
  %gen776 = add i32 %_775, %5052
  %5053 = mul i32 %5052, %5052
  %_777 = shl i32 %5053, %5052
  %5054 = sub i32 %5053, %5052
  %_778 = shl i32 %5054, 2
  %_779 = sub i32 0, %5054
  %gen780 = add i32 %_779, 2
  %_781 = sub i32 0, %5054
  %gen782 = add i32 %_781, 2
  %5055 = srem i32 %5054, 2
  %5056 = icmp ne i32 %5055, 0
  br label %originalBB768

originalBB786alteredBB:                           ; preds = %originalBB786, %2519
  %5057 = icmp eq i64 %2503, -1, !dbg !2056
  br label %originalBB786

originalBB790alteredBB:                           ; preds = %originalBB790, %2537
  %5058 = load i8*, i8** %21, align 8, !dbg !2058
  %5059 = call i64 @strlen(i8* %5058) #13, !dbg !2059
  store i64 %5059, i64* %22, align 8, !dbg !2060
  br label %originalBB790

originalBB794alteredBB:                           ; preds = %originalBB794, %2571
  br label %originalBB794

originalBB798alteredBB:                           ; preds = %originalBB798, %2591
  store i8 0, i8* %45, align 1, !dbg !2088
  br label %originalBB798

originalBB802alteredBB:                           ; preds = %originalBB802, %2608
  %5060 = load i64, i64* %48, align 8, !dbg !2091
  %5061 = icmp eq i64 %5060, -2, !dbg !2093
  br label %originalBB802

originalBB806alteredBB:                           ; preds = %originalBB806, %2627
  store i8 0, i8* %45, align 1, !dbg !2095
  br label %originalBB806

originalBB810alteredBB:                           ; preds = %originalBB810, %2659
  br label %originalBB810

originalBB814alteredBB:                           ; preds = %originalBB814, %2677
  %5062 = load i64, i64* %44, align 8, !dbg !2109
  %_815 = sub i64 %5062, 1
  %gen816 = mul i64 %_815, 1
  %_817 = shl i64 %5062, 1
  %_818 = sub i64 0, %5062
  %gen819 = add i64 %_818, 1
  %_820 = shl i64 %5062, 1
  %_821 = shl i64 %5062, 1
  %_822 = shl i64 %5062, 1
  %_823 = sub i64 %5062, 1
  %gen824 = mul i64 %_823, 1
  %5063 = add i64 %5062, 1, !dbg !2109
  store i64 %5063, i64* %44, align 8, !dbg !2109
  br label %originalBB814

originalBB828alteredBB:                           ; preds = %originalBB828, %2703
  store i64 1, i64* %49, align 8, !dbg !2122
  br label %originalBB828

originalBB832alteredBB:                           ; preds = %originalBB832, %2724
  %5064 = load i8*, i8** %21, align 8, !dbg !2130
  %5065 = load i64, i64* %28, align 8, !dbg !2131
  %5066 = load i64, i64* %44, align 8, !dbg !2132
  %5067 = add i64 %5065, %5066, !dbg !2133
  %5068 = load i64, i64* %49, align 8, !dbg !2134
  %_833 = sub i64 %5067, %5068
  %gen834 = mul i64 %_833, %5068
  %_835 = shl i64 %5067, %5068
  %_836 = sub i64 %5067, %5068
  %gen837 = mul i64 %_836, %5068
  %_838 = shl i64 %5067, %5068
  %_839 = sub i64 0, %5067
  %gen840 = add i64 %_839, %5068
  %_841 = sub i64 0, %5067
  %gen842 = add i64 %_841, %5068
  %_843 = sub i64 %5067, %5068
  %gen844 = mul i64 %_843, %5068
  %5069 = add i64 %5067, %5068, !dbg !2135
  %5070 = getelementptr inbounds i8, i8* %5064, i64 %5069, !dbg !2130
  %5071 = load i8, i8* %5070, align 1, !dbg !2130
  %5072 = sext i8 %5071 to i32, !dbg !2130
  br label %originalBB832

originalBB848alteredBB:                           ; preds = %originalBB848, %2750
  br label %originalBB848

originalBB852alteredBB:                           ; preds = %originalBB852, %2767
  br label %originalBB852

originalBB856alteredBB:                           ; preds = %originalBB856, %2784
  br label %originalBB856

originalBB860alteredBB:                           ; preds = %originalBB860, %2801
  %5073 = load i64, i64* %49, align 8, !dbg !2141
  %_861 = sub i64 0, %5073
  %gen862 = add i64 %_861, 1
  %_863 = sub i64 %5073, 1
  %gen864 = mul i64 %_863, 1
  %_865 = shl i64 %5073, 1
  %_866 = sub i64 0, %5073
  %gen867 = add i64 %_866, 1
  %_868 = sub i64 0, %5073
  %gen869 = add i64 %_868, 1
  %_870 = sub i64 %5073, 1
  %gen871 = mul i64 %_870, 1
  %_872 = shl i64 %5073, 1
  %5074 = add i64 %5073, 1, !dbg !2141
  store i64 %5074, i64* %49, align 8, !dbg !2141
  br label %originalBB860

originalBB876alteredBB:                           ; preds = %originalBB876, %2820
  br label %originalBB876

originalBB880alteredBB:                           ; preds = %originalBB880, %2837
  %5075 = load i32, i32* %47, align 4, !dbg !2146
  %5076 = call i32 @iswprint(i32 %5075) #10, !dbg !2148
  %5077 = icmp ne i32 %5076, 0, !dbg !2148
  br label %originalBB880

originalBB884alteredBB:                           ; preds = %originalBB884, %2857
  store i8 0, i8* %45, align 1, !dbg !2150
  br label %originalBB884

originalBB888alteredBB:                           ; preds = %originalBB888, %2878
  br label %originalBB888

originalBB892alteredBB:                           ; preds = %originalBB892, %2897
  %5078 = call i32 @mbsinit(%struct.__mbstate_t* %46) #13, !dbg !2155
  %5079 = icmp ne i32 %5078, 0, !dbg !2156
  %_893 = shl i1 %5079, true
  %_894 = shl i1 %5079, true
  %5080 = xor i1 %5079, true, !dbg !2156
  br label %originalBB892

originalBB898alteredBB:                           ; preds = %originalBB898, %2924
  %5081 = load i8, i8* %33, align 1, !dbg !2165
  %5082 = trunc i8 %5081 to i1, !dbg !2165
  br label %originalBB898

originalBB902alteredBB:                           ; preds = %originalBB902, %2946
  %5083 = load i64, i64* %28, align 8, !dbg !2172
  %5084 = load i64, i64* %44, align 8, !dbg !2173
  %_903 = shl i64 %5083, %5084
  %_904 = shl i64 %5083, %5084
  %5085 = add i64 %5083, %5084, !dbg !2174
  store i64 %5085, i64* %50, align 8, !dbg !2171
  br label %originalBB902

originalBB908alteredBB:                           ; preds = %originalBB908, %2969
  %5086 = load i8, i8* %45, align 1, !dbg !2182
  %5087 = trunc i8 %5086 to i1, !dbg !2182
  br label %originalBB908

originalBB912alteredBB:                           ; preds = %originalBB912, %2988
  br label %originalBB912

originalBB916alteredBB:                           ; preds = %originalBB916, %3005
  %5088 = load i8, i8* %35, align 1, !dbg !2186
  %5089 = trunc i8 %5088 to i1, !dbg !2186
  br label %originalBB916

originalBB920alteredBB:                           ; preds = %originalBB920, %3024
  br label %originalBB920

originalBB924alteredBB:                           ; preds = %originalBB924, %3041
  store i8 1, i8* %42, align 1, !dbg !2189
  %5090 = load i32, i32* %23, align 4, !dbg !2190
  %5091 = icmp eq i32 %5090, 2, !dbg !2190
  br label %originalBB924

originalBB928alteredBB:                           ; preds = %originalBB928, %3064
  %5092 = load i64, i64* %29, align 8, !dbg !2194
  %5093 = load i64, i64* %20, align 8, !dbg !2194
  %5094 = icmp ult i64 %5092, %5093, !dbg !2194
  br label %originalBB928

originalBB932alteredBB:                           ; preds = %originalBB932, %3088
  %5095 = load i64, i64* %29, align 8, !dbg !2197
  %_933 = shl i64 %5095, 1
  %_934 = sub i64 %5095, 1
  %gen935 = mul i64 %_934, 1
  %_936 = shl i64 %5095, 1
  %_937 = sub i64 %5095, 1
  %gen938 = mul i64 %_937, 1
  %5096 = add i64 %5095, 1, !dbg !2197
  store i64 %5096, i64* %29, align 8, !dbg !2197
  br label %originalBB932

originalBB942alteredBB:                           ; preds = %originalBB942, %3107
  br label %originalBB942

originalBB946alteredBB:                           ; preds = %originalBB946, %3128
  %5097 = load i8*, i8** %19, align 8, !dbg !2198
  %5098 = load i64, i64* %29, align 8, !dbg !2198
  %5099 = getelementptr inbounds i8, i8* %5097, i64 %5098, !dbg !2198
  store i8 36, i8* %5099, align 1, !dbg !2198
  br label %originalBB946

originalBB950alteredBB:                           ; preds = %originalBB950, %3148
  %5100 = load i64, i64* %29, align 8, !dbg !2201
  %_951 = sub i64 %5100, 1
  %gen952 = mul i64 %_951, 1
  %_953 = shl i64 %5100, 1
  %5101 = add i64 %5100, 1, !dbg !2201
  store i64 %5101, i64* %29, align 8, !dbg !2201
  br label %originalBB950

originalBB957alteredBB:                           ; preds = %originalBB957, %3167
  br label %originalBB957

originalBB961alteredBB:                           ; preds = %originalBB961, %3188
  %5102 = load i8*, i8** %19, align 8, !dbg !2202
  %5103 = load i64, i64* %29, align 8, !dbg !2202
  %5104 = getelementptr inbounds i8, i8* %5102, i64 %5103, !dbg !2202
  store i8 39, i8* %5104, align 1, !dbg !2202
  br label %originalBB961

originalBB965alteredBB:                           ; preds = %originalBB965, %3212
  br label %originalBB965

originalBB969alteredBB:                           ; preds = %originalBB969, %3229
  %5105 = load i64, i64* %29, align 8, !dbg !2206
  %5106 = load i64, i64* %20, align 8, !dbg !2206
  %5107 = icmp ult i64 %5105, %5106, !dbg !2206
  br label %originalBB969

originalBB973alteredBB:                           ; preds = %originalBB973, %3249
  %5108 = load i8*, i8** %19, align 8, !dbg !2206
  %5109 = load i64, i64* %29, align 8, !dbg !2206
  %5110 = getelementptr inbounds i8, i8* %5108, i64 %5109, !dbg !2206
  store i8 92, i8* %5110, align 1, !dbg !2206
  br label %originalBB973

originalBB977alteredBB:                           ; preds = %originalBB977, %3269
  %5111 = load i64, i64* %29, align 8, !dbg !2209
  %_978 = sub i64 %5111, 1
  %gen979 = mul i64 %_978, 1
  %_980 = shl i64 %5111, 1
  %_981 = shl i64 %5111, 1
  %_982 = sub i64 %5111, 1
  %gen983 = mul i64 %_982, 1
  %5112 = add i64 %5111, 1, !dbg !2209
  store i64 %5112, i64* %29, align 8, !dbg !2209
  br label %originalBB977

originalBB987alteredBB:                           ; preds = %originalBB987, %3289
  br label %originalBB987

originalBB991alteredBB:                           ; preds = %originalBB991, %3306
  %5113 = load i64, i64* %29, align 8, !dbg !2211
  %5114 = load i64, i64* %20, align 8, !dbg !2211
  %5115 = icmp ult i64 %5113, %5114, !dbg !2211
  br label %originalBB991

originalBB995alteredBB:                           ; preds = %originalBB995, %3326
  %5116 = load i8, i8* %39, align 1, !dbg !2211
  %5117 = zext i8 %5116 to i32, !dbg !2211
  %_996 = sub i32 0, %5117
  %gen997 = add i32 %_996, 6
  %_998 = shl i32 %5117, 6
  %_999 = sub i32 0, %5117
  %gen1000 = add i32 %_999, 6
  %_1001 = sub i32 %5117, 6
  %gen1002 = mul i32 %_1001, 6
  %5118 = ashr i32 %5117, 6, !dbg !2211
  %_1003 = sub i32 48, %5118
  %gen1004 = mul i32 %_1003, %5118
  %_1005 = sub i32 48, %5118
  %gen1006 = mul i32 %_1005, %5118
  %_1007 = sub i32 48, %5118
  %gen1008 = mul i32 %_1007, %5118
  %_1009 = sub i32 48, %5118
  %gen1010 = mul i32 %_1009, %5118
  %_1011 = sub i32 48, %5118
  %gen1012 = mul i32 %_1011, %5118
  %_1013 = shl i32 48, %5118
  %_1014 = sub i32 0, 48
  %gen1015 = add i32 %_1014, %5118
  %5119 = add nsw i32 48, %5118, !dbg !2211
  %5120 = trunc i32 %5119 to i8, !dbg !2211
  %5121 = load i8*, i8** %19, align 8, !dbg !2211
  %5122 = load i64, i64* %29, align 8, !dbg !2211
  %5123 = getelementptr inbounds i8, i8* %5121, i64 %5122, !dbg !2211
  store i8 %5120, i8* %5123, align 1, !dbg !2211
  br label %originalBB995

originalBB1019alteredBB:                          ; preds = %originalBB1019, %3351
  %5124 = load i64, i64* %29, align 8, !dbg !2214
  %_1020 = sub i64 %5124, 1
  %gen1021 = mul i64 %_1020, 1
  %_1022 = sub i64 %5124, 1
  %gen1023 = mul i64 %_1022, 1
  %_1024 = shl i64 %5124, 1
  %5125 = add i64 %5124, 1, !dbg !2214
  store i64 %5125, i64* %29, align 8, !dbg !2214
  br label %originalBB1019

originalBB1028alteredBB:                          ; preds = %originalBB1028, %3371
  %5126 = load i64, i64* %29, align 8, !dbg !2216
  %5127 = load i64, i64* %20, align 8, !dbg !2216
  %5128 = icmp ult i64 %5126, %5127, !dbg !2216
  br label %originalBB1028

originalBB1032alteredBB:                          ; preds = %originalBB1032, %3410
  %5129 = load i8, i8* %41, align 1, !dbg !2226
  %5130 = trunc i8 %5129 to i1, !dbg !2226
  br label %originalBB1032

originalBB1036alteredBB:                          ; preds = %originalBB1036, %3434
  %5131 = load i8*, i8** %19, align 8, !dbg !2231
  %5132 = load i64, i64* %29, align 8, !dbg !2231
  %5133 = getelementptr inbounds i8, i8* %5131, i64 %5132, !dbg !2231
  store i8 92, i8* %5133, align 1, !dbg !2231
  br label %originalBB1036

originalBB1040alteredBB:                          ; preds = %originalBB1040, %3457
  store i8 0, i8* %41, align 1, !dbg !2235
  br label %originalBB1040

originalBB1044alteredBB:                          ; preds = %originalBB1044, %3474
  br label %originalBB1044

originalBB1048alteredBB:                          ; preds = %originalBB1048, %3491
  %5134 = load i64, i64* %50, align 8, !dbg !2237
  %5135 = load i64, i64* %28, align 8, !dbg !2239
  %_1049 = sub i64 %5135, 1
  %gen1050 = mul i64 %_1049, 1
  %_1051 = shl i64 %5135, 1
  %_1052 = sub i64 0, %5135
  %gen1053 = add i64 %_1052, 1
  %_1054 = sub i64 %5135, 1
  %gen1055 = mul i64 %_1054, 1
  %5136 = add i64 %5135, 1, !dbg !2240
  %5137 = icmp ule i64 %5134, %5136, !dbg !2241
  br label %originalBB1048

originalBB1059alteredBB:                          ; preds = %originalBB1059, %3513
  br label %originalBB1059

originalBB1063alteredBB:                          ; preds = %originalBB1063, %3530
  %5138 = load i8, i8* %36, align 1, !dbg !2245
  %5139 = trunc i8 %5138 to i1, !dbg !2245
  br label %originalBB1063

originalBB1067alteredBB:                          ; preds = %originalBB1067, %3549
  %5140 = load i8, i8* %42, align 1, !dbg !2245
  %5141 = trunc i8 %5140 to i1, !dbg !2245
  br label %originalBB1067

originalBB1071alteredBB:                          ; preds = %originalBB1071, %3577
  %5142 = load i64, i64* %29, align 8, !dbg !2254
  %_1072 = sub i64 %5142, 1
  %gen1073 = mul i64 %_1072, 1
  %_1074 = shl i64 %5142, 1
  %_1075 = sub i64 %5142, 1
  %gen1076 = mul i64 %_1075, 1
  %_1077 = shl i64 %5142, 1
  %5143 = add i64 %5142, 1, !dbg !2254
  store i64 %5143, i64* %29, align 8, !dbg !2254
  br label %originalBB1071

originalBB1081alteredBB:                          ; preds = %originalBB1081, %3601
  %5144 = load i8*, i8** %19, align 8, !dbg !2255
  %5145 = load i64, i64* %29, align 8, !dbg !2255
  %5146 = getelementptr inbounds i8, i8* %5144, i64 %5145, !dbg !2255
  store i8 39, i8* %5146, align 1, !dbg !2255
  br label %originalBB1081

originalBB1085alteredBB:                          ; preds = %originalBB1085, %3621
  %5147 = load i64, i64* %29, align 8, !dbg !2258
  %_1086 = shl i64 %5147, 1
  %_1087 = sub i64 %5147, 1
  %gen1088 = mul i64 %_1087, 1
  %_1089 = shl i64 %5147, 1
  %_1090 = shl i64 %5147, 1
  %_1091 = shl i64 %5147, 1
  %_1092 = sub i64 %5147, 1
  %gen1093 = mul i64 %_1092, 1
  %_1094 = sub i64 %5147, 1
  %gen1095 = mul i64 %_1094, 1
  %_1096 = shl i64 %5147, 1
  %5148 = add i64 %5147, 1, !dbg !2258
  store i64 %5148, i64* %29, align 8, !dbg !2258
  br label %originalBB1085

originalBB1100alteredBB:                          ; preds = %originalBB1100, %3640
  store i8 0, i8* %36, align 1, !dbg !2249
  br label %originalBB1100

originalBB1104alteredBB:                          ; preds = %originalBB1104, %3657
  br label %originalBB1104

originalBB1108alteredBB:                          ; preds = %originalBB1108, %3675
  %5149 = load i64, i64* %29, align 8, !dbg !2260
  %5150 = load i64, i64* %20, align 8, !dbg !2260
  %5151 = icmp ult i64 %5149, %5150, !dbg !2260
  br label %originalBB1108

originalBB1112alteredBB:                          ; preds = %originalBB1112, %3700
  %5152 = load i64, i64* %29, align 8, !dbg !2263
  %_1113 = shl i64 %5152, 1
  %_1114 = sub i64 %5152, 1
  %gen1115 = mul i64 %_1114, 1
  %_1116 = shl i64 %5152, 1
  %_1117 = shl i64 %5152, 1
  %_1118 = shl i64 %5152, 1
  %_1119 = sub i64 %5152, 1
  %gen1120 = mul i64 %_1119, 1
  %_1121 = sub i64 %5152, 1
  %gen1122 = mul i64 %_1121, 1
  %5153 = add i64 %5152, 1, !dbg !2263
  store i64 %5153, i64* %29, align 8, !dbg !2263
  br label %originalBB1112

originalBB1126alteredBB:                          ; preds = %originalBB1126, %3725
  br label %originalBB1126

originalBB1130alteredBB:                          ; preds = %originalBB1130, %3743
  %5154 = load i8, i8* %33, align 1, !dbg !2273
  %5155 = trunc i8 %5154 to i1, !dbg !2273
  br label %originalBB1130

originalBB1134alteredBB:                          ; preds = %originalBB1134, %3768
  %5156 = load i32*, i32** %25, align 8, !dbg !2281
  %5157 = icmp ne i32* %5156, null, !dbg !2281
  br label %originalBB1134

originalBB1138alteredBB:                          ; preds = %originalBB1138, %3801
  %5158 = load i8, i8* %41, align 1, !dbg !2291
  %5159 = trunc i8 %5158 to i1, !dbg !2291
  br label %originalBB1138

originalBB1142alteredBB:                          ; preds = %originalBB1142, %3821
  br label %originalBB1142

originalBB1146alteredBB:                          ; preds = %originalBB1146, %3843
  store i8 1, i8* %42, align 1, !dbg !2300
  %5160 = load i32, i32* %23, align 4, !dbg !2301
  %5161 = icmp eq i32 %5160, 2, !dbg !2301
  br label %originalBB1146

originalBB1150alteredBB:                          ; preds = %originalBB1150, %3865
  br label %originalBB1150

originalBB1154alteredBB:                          ; preds = %originalBB1154, %3902
  %5162 = load i64, i64* %29, align 8, !dbg !2312
  %_1155 = shl i64 %5162, 1
  %_1156 = shl i64 %5162, 1
  %_1157 = shl i64 %5162, 1
  %_1158 = sub i64 0, %5162
  %gen1159 = add i64 %_1158, 1
  %_1160 = sub i64 0, %5162
  %gen1161 = add i64 %_1160, 1
  %_1162 = sub i64 0, %5162
  %gen1163 = add i64 %_1162, 1
  %5163 = add i64 %5162, 1, !dbg !2312
  store i64 %5163, i64* %29, align 8, !dbg !2312
  br label %originalBB1154

originalBB1167alteredBB:                          ; preds = %originalBB1167, %3921
  br label %originalBB1167

originalBB1171alteredBB:                          ; preds = %originalBB1171, %3942
  %5164 = load i8*, i8** %19, align 8, !dbg !2313
  %5165 = load i64, i64* %29, align 8, !dbg !2313
  %5166 = getelementptr inbounds i8, i8* %5164, i64 %5165, !dbg !2313
  store i8 39, i8* %5166, align 1, !dbg !2313
  br label %originalBB1171

originalBB1175alteredBB:                          ; preds = %originalBB1175, %3966
  br label %originalBB1175

originalBB1179alteredBB:                          ; preds = %originalBB1179, %3983
  %5167 = load i64, i64* %29, align 8, !dbg !2317
  %5168 = load i64, i64* %20, align 8, !dbg !2317
  %5169 = icmp ult i64 %5167, %5168, !dbg !2317
  br label %originalBB1179

originalBB1183alteredBB:                          ; preds = %originalBB1183, %4003
  %5170 = load i8*, i8** %19, align 8, !dbg !2317
  %5171 = load i64, i64* %29, align 8, !dbg !2317
  %5172 = getelementptr inbounds i8, i8* %5170, i64 %5171, !dbg !2317
  store i8 92, i8* %5172, align 1, !dbg !2317
  br label %originalBB1183

originalBB1187alteredBB:                          ; preds = %originalBB1187, %4023
  %5173 = load i64, i64* %29, align 8, !dbg !2320
  %_1188 = shl i64 %5173, 1
  %_1189 = sub i64 0, %5173
  %gen1190 = add i64 %_1189, 1
  %_1191 = sub i64 0, %5173
  %gen1192 = add i64 %_1191, 1
  %_1193 = sub i64 %5173, 1
  %gen1194 = mul i64 %_1193, 1
  %5174 = add i64 %5173, 1, !dbg !2320
  store i64 %5174, i64* %29, align 8, !dbg !2320
  br label %originalBB1187

originalBB1198alteredBB:                          ; preds = %originalBB1198, %4042
  br label %originalBB1198

originalBB1202alteredBB:                          ; preds = %originalBB1202, %4067
  br label %originalBB1202

originalBB1206alteredBB:                          ; preds = %originalBB1206, %4084
  %5175 = load i64, i64* %29, align 8, !dbg !2330
  %5176 = load i64, i64* %20, align 8, !dbg !2330
  %5177 = icmp ult i64 %5175, %5176, !dbg !2330
  br label %originalBB1206

originalBB1210alteredBB:                          ; preds = %originalBB1210, %4104
  %5178 = load i8*, i8** %19, align 8, !dbg !2330
  %5179 = load i64, i64* %29, align 8, !dbg !2330
  %5180 = getelementptr inbounds i8, i8* %5178, i64 %5179, !dbg !2330
  store i8 39, i8* %5180, align 1, !dbg !2330
  br label %originalBB1210

originalBB1214alteredBB:                          ; preds = %originalBB1214, %4124
  %5181 = load i64, i64* %29, align 8, !dbg !2333
  %_1215 = sub i64 %5181, 1
  %gen1216 = mul i64 %_1215, 1
  %5182 = add i64 %5181, 1, !dbg !2333
  store i64 %5182, i64* %29, align 8, !dbg !2333
  br label %originalBB1214

originalBB1220alteredBB:                          ; preds = %originalBB1220, %4144
  %5183 = load i64, i64* %29, align 8, !dbg !2334
  %5184 = load i64, i64* %20, align 8, !dbg !2334
  %5185 = icmp ult i64 %5183, %5184, !dbg !2334
  br label %originalBB1220

originalBB1224alteredBB:                          ; preds = %originalBB1224, %4164
  %5186 = load i8*, i8** %19, align 8, !dbg !2334
  %5187 = load i64, i64* %29, align 8, !dbg !2334
  %5188 = getelementptr inbounds i8, i8* %5186, i64 %5187, !dbg !2334
  store i8 39, i8* %5188, align 1, !dbg !2334
  br label %originalBB1224

originalBB1228alteredBB:                          ; preds = %originalBB1228, %4184
  %5189 = load i64, i64* %29, align 8, !dbg !2337
  %_1229 = sub i64 %5189, 1
  %gen1230 = mul i64 %_1229, 1
  %_1231 = shl i64 %5189, 1
  %_1232 = sub i64 0, %5189
  %gen1233 = add i64 %_1232, 1
  %5190 = add i64 %5189, 1, !dbg !2337
  store i64 %5190, i64* %29, align 8, !dbg !2337
  br label %originalBB1228

originalBB1237alteredBB:                          ; preds = %originalBB1237, %4203
  store i8 0, i8* %36, align 1, !dbg !2328
  br label %originalBB1237

originalBB1241alteredBB:                          ; preds = %originalBB1241, %4220
  br label %originalBB1241

originalBB1245alteredBB:                          ; preds = %originalBB1245, %4237
  br label %originalBB1245

originalBB1249alteredBB:                          ; preds = %originalBB1249, %4273
  %5191 = icmp ult i64 %4255, %4256, !dbg !2339
  br label %originalBB1249

originalBB1253alteredBB:                          ; preds = %originalBB1253, %4291
  %5192 = load i8, i8* %39, align 1, !dbg !2339
  %5193 = load i8*, i8** %19, align 8, !dbg !2339
  %5194 = load i64, i64* %29, align 8, !dbg !2339
  %5195 = getelementptr inbounds i8, i8* %5193, i64 %5194, !dbg !2339
  store i8 %5192, i8* %5195, align 1, !dbg !2339
  br label %originalBB1253

originalBB1257alteredBB:                          ; preds = %originalBB1257, %4312
  %5196 = load i64, i64* %29, align 8, !dbg !2342
  %_1258 = shl i64 %5196, 1
  %_1259 = shl i64 %5196, 1
  %_1260 = shl i64 %5196, 1
  %_1261 = sub i64 0, %5196
  %gen1262 = add i64 %_1261, 1
  %5197 = add i64 %5196, 1, !dbg !2342
  store i64 %5197, i64* %29, align 8, !dbg !2342
  br label %originalBB1257

originalBB1266alteredBB:                          ; preds = %originalBB1266, %4331
  %5198 = load i8, i8* %43, align 1, !dbg !2343
  %5199 = trunc i8 %5198 to i1, !dbg !2343
  br label %originalBB1266

originalBB1270alteredBB:                          ; preds = %originalBB1270, %4350
  store i8 0, i8* %38, align 1, !dbg !2346
  br label %originalBB1270

originalBB1274alteredBB:                          ; preds = %originalBB1274, %4367
  br label %originalBB1274

originalBB1278alteredBB:                          ; preds = %originalBB1278, %4384
  %5200 = load i64, i64* %28, align 8, !dbg !2349
  %_1279 = sub i64 0, %5200
  %gen1280 = add i64 %_1279, 1
  %_1281 = shl i64 %5200, 1
  %_1282 = shl i64 %5200, 1
  %5201 = add i64 %5200, 1, !dbg !2349
  store i64 %5201, i64* %28, align 8, !dbg !2349
  br label %originalBB1278

originalBB1286alteredBB:                          ; preds = %originalBB1286, %4403
  %5202 = load i64, i64* %29, align 8, !dbg !2353
  %5203 = icmp eq i64 %5202, 0, !dbg !2355
  br label %originalBB1286

originalBB1290alteredBB:                          ; preds = %originalBB1290, %4425
  %5204 = load i8, i8* %35, align 1, !dbg !2360
  %5205 = trunc i8 %5204 to i1, !dbg !2360
  br label %originalBB1290

originalBB1294alteredBB:                          ; preds = %originalBB1294, %4445
  %5206 = load i32, i32* %23, align 4, !dbg !2363
  %5207 = icmp eq i32 %5206, 2, !dbg !2365
  br label %originalBB1294

originalBB1298alteredBB:                          ; preds = %originalBB1298, %4464
  %5208 = load i8, i8* %35, align 1, !dbg !2367
  %5209 = trunc i8 %5208 to i1, !dbg !2367
  br label %originalBB1298

originalBB1302alteredBB:                          ; preds = %originalBB1302, %4486
  %5210 = load i8, i8* %38, align 1, !dbg !2371
  %5211 = trunc i8 %5210 to i1, !dbg !2371
  br label %originalBB1302

originalBB1306alteredBB:                          ; preds = %originalBB1306, %4518
  %5212 = load i64, i64* %30, align 8, !dbg !2388
  %5213 = icmp ne i64 %5212, 0, !dbg !2388
  br label %originalBB1306

originalBB1310alteredBB:                          ; preds = %originalBB1310, %4539
  br label %originalBB1310

originalBB1314alteredBB:                          ; preds = %originalBB1314, %4557
  %5214 = load i8*, i8** %31, align 8, !dbg !2396
  %5215 = icmp ne i8* %5214, null, !dbg !2396
  br label %originalBB1314

originalBB1318alteredBB:                          ; preds = %originalBB1318, %4580
  %5216 = load i8*, i8** %31, align 8, !dbg !2402
  %5217 = load i8, i8* %5216, align 1, !dbg !2405
  %5218 = icmp ne i8 %5217, 0, !dbg !2406
  br label %originalBB1318

originalBB1322alteredBB:                          ; preds = %originalBB1322, %4600
  br label %originalBB1322

originalBB1326alteredBB:                          ; preds = %originalBB1326, %4617
  %5219 = load i64, i64* %29, align 8, !dbg !2408
  %5220 = load i64, i64* %20, align 8, !dbg !2408
  %5221 = icmp ult i64 %5219, %5220, !dbg !2408
  br label %originalBB1326

originalBB1330alteredBB:                          ; preds = %originalBB1330, %4646
  br label %originalBB1330

originalBB1334alteredBB:                          ; preds = %originalBB1334, %4666
  br label %originalBB1334

originalBB1338alteredBB:                          ; preds = %originalBB1338, %4683
  %5222 = load i64, i64* %29, align 8, !dbg !2416
  %5223 = load i64, i64* %20, align 8, !dbg !2418
  %5224 = icmp ult i64 %5222, %5223, !dbg !2419
  br label %originalBB1338

originalBB1342alteredBB:                          ; preds = %originalBB1342, %4707
  %5225 = load i64, i64* %29, align 8, !dbg !2424
  store i64 %5225, i64* %18, align 8, !dbg !2425
  br label %originalBB1342

originalBB1346alteredBB:                          ; preds = %originalBB1346, %4728
  %5226 = load i8, i8* %33, align 1, !dbg !2432
  %5227 = trunc i8 %5226 to i1, !dbg !2432
  br label %originalBB1346

originalBB1350alteredBB:                          ; preds = %originalBB1350, %4747
  store i32 4, i32* %23, align 4, !dbg !2434
  br label %originalBB1350

originalBB1354alteredBB:                          ; preds = %originalBB1354, %4764
  %5228 = load i8*, i8** %19, align 8, !dbg !2436
  %5229 = load i64, i64* %20, align 8, !dbg !2437
  %5230 = load i8*, i8** %21, align 8, !dbg !2438
  %5231 = load i64, i64* %22, align 8, !dbg !2439
  %5232 = load i32, i32* %23, align 4, !dbg !2440
  %5233 = load i32, i32* %24, align 4, !dbg !2441
  %_1355 = sub i32 0, %5233
  %gen1356 = add i32 %_1355, -3
  %5234 = and i32 %5233, -3, !dbg !2442
  %5235 = load i8*, i8** %26, align 8, !dbg !2443
  %5236 = load i8*, i8** %27, align 8, !dbg !2444
  %5237 = call i64 @quotearg_buffer_restyled(i8* %5228, i64 %5229, i8* %5230, i64 %5231, i32 %5232, i32 %5234, i32* null, i8* %5235, i8* %5236), !dbg !2445
  store i64 %5237, i64* %18, align 8, !dbg !2446
  br label %originalBB1354
}

; Function Attrs: nounwind
declare dso_local i64 @__ctype_get_mb_cur_max() #2

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @gettext_quote(i8*, i32) #4 !dbg !2499 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !2502, metadata !DIExpression()), !dbg !2503
  store i32 %1, i32* %5, align 4
  call void @llvm.dbg.declare(metadata i32* %5, metadata !2504, metadata !DIExpression()), !dbg !2505
  call void @llvm.dbg.declare(metadata i8** %6, metadata !2506, metadata !DIExpression()), !dbg !2507
  %8 = load i8*, i8** %4, align 8, !dbg !2508
  %9 = call i8* @gettext(i8* %8) #10, !dbg !2508
  store i8* %9, i8** %6, align 8, !dbg !2507
  call void @llvm.dbg.declare(metadata i8** %7, metadata !2509, metadata !DIExpression()), !dbg !2510
  %10 = load i8*, i8** %6, align 8, !dbg !2511
  %11 = load i8*, i8** %4, align 8, !dbg !2513
  %12 = icmp ne i8* %10, %11, !dbg !2514
  br i1 %12, label %13, label %31, !dbg !2515

13:                                               ; preds = %2
  %14 = load i32, i32* @x.37
  %15 = load i32, i32* @y.38
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %13, %originalBBalteredBB
  %22 = load i8*, i8** %6, align 8, !dbg !2516
  store i8* %22, i8** %3, align 8, !dbg !2517
  %23 = load i32, i32* @x.37
  %24 = load i32, i32* @y.38
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %77, !dbg !2517

31:                                               ; preds = %2
  %32 = load i32, i32* @x.37
  %33 = load i32, i32* @y.38
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  %40 = call i8* @locale_charset(), !dbg !2518
  store i8* %40, i8** %7, align 8, !dbg !2519
  %41 = load i8*, i8** %7, align 8, !dbg !2520
  %42 = call i32 @c_strcasecmp(i8* %41, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13.66, i64 0, i64 0)) #13, !dbg !2520
  %43 = icmp eq i32 %42, 0, !dbg !2520
  %44 = load i32, i32* @x.37
  %45 = load i32, i32* @y.38
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %43, label %52, label %60, !dbg !2522

52:                                               ; preds = %originalBBpart24
  %53 = load i8*, i8** %4, align 8, !dbg !2523
  %54 = getelementptr inbounds i8, i8* %53, i64 0, !dbg !2523
  %55 = load i8, i8* %54, align 1, !dbg !2523
  %56 = sext i8 %55 to i32, !dbg !2523
  %57 = icmp eq i32 %56, 96, !dbg !2524
  %58 = zext i1 %57 to i64, !dbg !2523
  %59 = select i1 %57, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.67, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.68, i64 0, i64 0), !dbg !2523
  store i8* %59, i8** %3, align 8, !dbg !2525
  br label %77, !dbg !2525

60:                                               ; preds = %originalBBpart24
  %61 = load i8*, i8** %7, align 8, !dbg !2526
  %62 = call i32 @c_strcasecmp(i8* %61, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16.69, i64 0, i64 0)) #13, !dbg !2526
  %63 = icmp eq i32 %62, 0, !dbg !2526
  br i1 %63, label %64, label %72, !dbg !2528

64:                                               ; preds = %60
  %65 = load i8*, i8** %4, align 8, !dbg !2529
  %66 = getelementptr inbounds i8, i8* %65, i64 0, !dbg !2529
  %67 = load i8, i8* %66, align 1, !dbg !2529
  %68 = sext i8 %67 to i32, !dbg !2529
  %69 = icmp eq i32 %68, 96, !dbg !2530
  %70 = zext i1 %69 to i64, !dbg !2529
  %71 = select i1 %69, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17.70, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.71, i64 0, i64 0), !dbg !2529
  store i8* %71, i8** %3, align 8, !dbg !2531
  br label %77, !dbg !2531

72:                                               ; preds = %60
  %73 = load i32, i32* %5, align 4, !dbg !2532
  %74 = icmp eq i32 %73, 9, !dbg !2533
  %75 = zext i1 %74 to i64, !dbg !2532
  %76 = select i1 %74, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.63, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.65, i64 0, i64 0), !dbg !2532
  store i8* %76, i8** %3, align 8, !dbg !2534
  br label %77, !dbg !2534

77:                                               ; preds = %72, %64, %52, %originalBBpart2
  %78 = load i8*, i8** %3, align 8, !dbg !2535
  ret i8* %78, !dbg !2535

originalBBalteredBB:                              ; preds = %originalBB, %13
  %79 = load i8*, i8** %6, align 8, !dbg !2516
  store i8* %79, i8** %3, align 8, !dbg !2517
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  %80 = call i8* @locale_charset(), !dbg !2518
  store i8* %80, i8** %7, align 8, !dbg !2519
  %81 = load i8*, i8** %7, align 8, !dbg !2520
  %82 = call i32 @c_strcasecmp(i8* %81, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13.66, i64 0, i64 0)) #13, !dbg !2520
  %83 = icmp eq i32 %82, 0, !dbg !2520
  br label %originalBB1
}

; Function Attrs: nounwind readonly
declare dso_local i32 @memcmp(i8*, i8*, i64) #7

; Function Attrs: nounwind readnone
declare dso_local i16** @__ctype_b_loc() #8

; Function Attrs: nounwind
declare dso_local i32 @iswprint(i32) #2

; Function Attrs: nounwind readonly
declare dso_local i32 @mbsinit(%struct.__mbstate_t*) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_style(i32, i8*) #4 !dbg !2536 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  store i32 %0, i32* %3, align 4
  call void @llvm.dbg.declare(metadata i32* %3, metadata !2539, metadata !DIExpression()), !dbg !2540
  store i8* %1, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !2541, metadata !DIExpression()), !dbg !2542
  %5 = load i32, i32* %3, align 4, !dbg !2543
  %6 = mul i32 %0, -5
  %7 = add i32 %6, -3
  %8 = mul i32 %5, -3
  %9 = add i32 %8, -4
  %10 = mul i32 %5, 3
  %11 = add i32 %10, 1
  %12 = mul i32 %7, %7
  %13 = mul i32 %12, %12
  %14 = mul i32 %9, %9
  %15 = mul i32 %14, %14
  %16 = mul i32 %11, %11
  %17 = mul i32 %16, %16
  %18 = add i32 %13, %15
  %19 = sub i32 %18, %17
  %20 = mul i32 %19, 4
  %21 = add i32 %20, -5
  %22 = icmp eq i32 %21, -5
  br i1 %22, label %24, label %23

23:                                               ; preds = %2
  ret i8* null

24:                                               ; preds = %2
  %25 = load i8*, i8** %4, align 8, !dbg !2544
  %26 = call i8* @quotearg_n_style(i32 0, i32 %5, i8* %25), !dbg !2545
  ret i8* %26, !dbg !2546
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_char_mem(i8*, i64, i8 signext) #4 !dbg !2547 {
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i8, align 1
  %7 = alloca %struct.quoting_options, align 8
  store i8* %0, i8** %4, align 8
  call void @llvm.dbg.declare(metadata i8** %4, metadata !2550, metadata !DIExpression()), !dbg !2551
  store i64 %1, i64* %5, align 8
  call void @llvm.dbg.declare(metadata i64* %5, metadata !2552, metadata !DIExpression()), !dbg !2553
  store i8 %2, i8* %6, align 1
  call void @llvm.dbg.declare(metadata i8* %6, metadata !2554, metadata !DIExpression()), !dbg !2555
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %7, metadata !2556, metadata !DIExpression()), !dbg !2557
  %8 = bitcast %struct.quoting_options* %7 to i8*, !dbg !2558
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i1 false), !dbg !2558
  %9 = load i8, i8* %6, align 1, !dbg !2559
  %10 = call i32 @set_char_quoting(%struct.quoting_options* %7, i8 signext %9, i32 1), !dbg !2560
  %11 = load i8*, i8** %4, align 8, !dbg !2561
  %12 = load i64, i64* %5, align 8, !dbg !2562
  %13 = call i8* @quotearg_n_options(i32 0, i8* %11, i64 %12, %struct.quoting_options* %7), !dbg !2563
  ret i8* %13, !dbg !2564
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_char(i8*, i8 signext) #4 !dbg !2565 {
  %3 = alloca i8*, align 8
  %4 = alloca i8, align 1
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !2568, metadata !DIExpression()), !dbg !2569
  store i8 %1, i8* %4, align 1
  call void @llvm.dbg.declare(metadata i8* %4, metadata !2570, metadata !DIExpression()), !dbg !2571
  %5 = load i8*, i8** %3, align 8, !dbg !2572
  %6 = load i8, i8* %4, align 1, !dbg !2573
  %7 = call i8* @quotearg_char_mem(i8* %5, i64 -1, i8 signext %6), !dbg !2574
  ret i8* %7, !dbg !2575
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_colon(i8*) #4 !dbg !2576 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  call void @llvm.dbg.declare(metadata i8** %2, metadata !2579, metadata !DIExpression()), !dbg !2580
  %3 = load i8*, i8** %2, align 8, !dbg !2581
  %4 = call i8* @quotearg_char(i8* %3, i8 signext 58), !dbg !2582
  ret i8* %4, !dbg !2583
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote_n_mem(i32, i8*, i64) #4 !dbg !2584 {
  %4 = load i32, i32* @x.47
  %5 = load i32, i32* @y.48
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  store i32 %0, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !2587, metadata !DIExpression()), !dbg !2588
  store i8* %1, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !2589, metadata !DIExpression()), !dbg !2590
  store i64 %2, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !2591, metadata !DIExpression()), !dbg !2592
  %15 = load i32, i32* %12, align 4, !dbg !2593
  %16 = load i8*, i8** %13, align 8, !dbg !2594
  %17 = load i64, i64* %14, align 8, !dbg !2595
  %18 = call i8* @quotearg_n_options(i32 %15, i8* %16, i64 %17, %struct.quoting_options* @quote_quoting_options), !dbg !2596
  %19 = load i32, i32* @x.47
  %20 = load i32, i32* @y.48
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %18, !dbg !2597

originalBBalteredBB:                              ; preds = %originalBB, %3
  %27 = alloca i32, align 4
  %28 = alloca i8*, align 8
  %29 = alloca i64, align 8
  store i32 %0, i32* %27, align 4
  call void @llvm.dbg.declare(metadata i32* %27, metadata !2598, metadata !DIExpression()), !dbg !2588
  store i8* %1, i8** %28, align 8
  call void @llvm.dbg.declare(metadata i8** %28, metadata !2630, metadata !DIExpression()), !dbg !2590
  store i64 %2, i64* %29, align 8
  call void @llvm.dbg.declare(metadata i64* %29, metadata !2631, metadata !DIExpression()), !dbg !2592
  %30 = load i32, i32* %27, align 4, !dbg !2593
  %31 = load i8*, i8** %28, align 8, !dbg !2594
  %32 = load i64, i64* %29, align 8, !dbg !2595
  %33 = call i8* @quotearg_n_options(i32 %30, i8* %31, i64 %32, %struct.quoting_options* @quote_quoting_options), !dbg !2596
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote_n(i32, i8*) #4 !dbg !2632 {
  %3 = load i32, i32* @x.49
  %4 = load i32, i32* @y.50
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !2635, metadata !DIExpression()), !dbg !2636
  store i8* %1, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !2637, metadata !DIExpression()), !dbg !2638
  %13 = load i32, i32* %11, align 4, !dbg !2639
  %14 = load i8*, i8** %12, align 8, !dbg !2640
  %15 = call i8* @quote_n_mem(i32 %13, i8* %14, i64 -1), !dbg !2641
  %16 = load i32, i32* @x.49
  %17 = load i32, i32* @y.50
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %15, !dbg !2642

originalBBalteredBB:                              ; preds = %originalBB, %2
  %24 = alloca i32, align 4
  %25 = alloca i8*, align 8
  store i32 %0, i32* %24, align 4
  call void @llvm.dbg.declare(metadata i32* %24, metadata !2643, metadata !DIExpression()), !dbg !2636
  store i8* %1, i8** %25, align 8
  call void @llvm.dbg.declare(metadata i8** %25, metadata !2675, metadata !DIExpression()), !dbg !2638
  %26 = load i32, i32* %24, align 4, !dbg !2639
  %27 = load i8*, i8** %25, align 8, !dbg !2640
  %28 = call i8* @quote_n_mem(i32 %26, i8* %27, i64 -1), !dbg !2641
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote(i8*) #4 !dbg !2676 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  call void @llvm.dbg.declare(metadata i8** %2, metadata !2679, metadata !DIExpression()), !dbg !2680
  %3 = load i8*, i8** %2, align 8, !dbg !2681
  %4 = call i8* @quote_n(i32 0, i8* %3), !dbg !2682
  ret i8* %4, !dbg !2683
}

; Function Attrs: noinline nounwind optnone uwtable
define internal %struct.dev_ino* @get_root_dev_ino(%struct.dev_ino*) #4 !dbg !2684 {
  %2 = load i32, i32* @x.53
  %3 = load i32, i32* @y.54
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct.dev_ino*, align 8
  %11 = alloca %struct.dev_ino*, align 8
  %12 = alloca %struct.stat, align 8
  store %struct.dev_ino* %0, %struct.dev_ino** %11, align 8
  call void @llvm.dbg.declare(metadata %struct.dev_ino** %11, metadata !2693, metadata !DIExpression()), !dbg !2694
  call void @llvm.dbg.declare(metadata %struct.stat* %12, metadata !2695, metadata !DIExpression()), !dbg !2717
  %13 = call i32 @lstat(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.80, i64 0, i64 0), %struct.stat* %12) #10, !dbg !2718
  %14 = icmp ne i32 %13, 0, !dbg !2718
  %15 = load i32, i32* @x.53
  %16 = load i32, i32* @y.54
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %14, label %23, label %40, !dbg !2720

23:                                               ; preds = %originalBBpart2
  %24 = load i32, i32* @x.53
  %25 = load i32, i32* @y.54
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %23, %originalBB1alteredBB
  store %struct.dev_ino* null, %struct.dev_ino** %10, align 8, !dbg !2721
  %32 = load i32, i32* @x.53
  %33 = load i32, i32* @y.54
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %66, !dbg !2721

40:                                               ; preds = %originalBBpart2
  %41 = load i32, i32* @x.53
  %42 = load i32, i32* @y.54
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %40, %originalBB6alteredBB
  %49 = getelementptr inbounds %struct.stat, %struct.stat* %12, i32 0, i32 1, !dbg !2722
  %50 = load i64, i64* %49, align 8, !dbg !2722
  %51 = load %struct.dev_ino*, %struct.dev_ino** %11, align 8, !dbg !2723
  %52 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %51, i32 0, i32 0, !dbg !2724
  store i64 %50, i64* %52, align 8, !dbg !2725
  %53 = getelementptr inbounds %struct.stat, %struct.stat* %12, i32 0, i32 0, !dbg !2726
  %54 = load i64, i64* %53, align 8, !dbg !2726
  %55 = load %struct.dev_ino*, %struct.dev_ino** %11, align 8, !dbg !2727
  %56 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %55, i32 0, i32 1, !dbg !2728
  store i64 %54, i64* %56, align 8, !dbg !2729
  %57 = load %struct.dev_ino*, %struct.dev_ino** %11, align 8, !dbg !2730
  store %struct.dev_ino* %57, %struct.dev_ino** %10, align 8, !dbg !2731
  %58 = load i32, i32* @x.53
  %59 = load i32, i32* @y.54
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %66, !dbg !2731

66:                                               ; preds = %originalBBpart28, %originalBBpart24
  %67 = load i32, i32* @x.53
  %68 = load i32, i32* @y.54
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %66, %originalBB10alteredBB
  %75 = load %struct.dev_ino*, %struct.dev_ino** %10, align 8, !dbg !2732
  %76 = load i32, i32* @x.53
  %77 = load i32, i32* @y.54
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  ret %struct.dev_ino* %75, !dbg !2732

originalBBalteredBB:                              ; preds = %originalBB, %1
  %84 = alloca %struct.dev_ino*, align 8
  %85 = alloca %struct.dev_ino*, align 8
  %86 = alloca %struct.stat, align 8
  store %struct.dev_ino* %0, %struct.dev_ino** %85, align 8
  call void @llvm.dbg.declare(metadata %struct.dev_ino** %85, metadata !2733, metadata !DIExpression()), !dbg !2694
  call void @llvm.dbg.declare(metadata %struct.stat* %86, metadata !2743, metadata !DIExpression()), !dbg !2717
  %87 = call i32 @lstat(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.80, i64 0, i64 0), %struct.stat* %86) #10, !dbg !2718
  %88 = icmp ne i32 %87, 0, !dbg !2718
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %23
  store %struct.dev_ino* null, %struct.dev_ino** %10, align 8, !dbg !2721
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %40
  %89 = getelementptr inbounds %struct.stat, %struct.stat* %12, i32 0, i32 1, !dbg !2722
  %90 = load i64, i64* %89, align 8, !dbg !2722
  %91 = load %struct.dev_ino*, %struct.dev_ino** %11, align 8, !dbg !2723
  %92 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %91, i32 0, i32 0, !dbg !2724
  store i64 %90, i64* %92, align 8, !dbg !2725
  %93 = getelementptr inbounds %struct.stat, %struct.stat* %12, i32 0, i32 0, !dbg !2726
  %94 = load i64, i64* %93, align 8, !dbg !2726
  %95 = load %struct.dev_ino*, %struct.dev_ino** %11, align 8, !dbg !2727
  %96 = getelementptr inbounds %struct.dev_ino, %struct.dev_ino* %95, i32 0, i32 1, !dbg !2728
  store i64 %94, i64* %96, align 8, !dbg !2729
  %97 = load %struct.dev_ino*, %struct.dev_ino** %11, align 8, !dbg !2730
  store %struct.dev_ino* %97, %struct.dev_ino** %10, align 8, !dbg !2731
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %66
  %98 = load %struct.dev_ino*, %struct.dev_ino** %10, align 8, !dbg !2732
  br label %originalBB10
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc_arn(%struct._IO_FILE*, i8*, i8*, i8*, i8**, i64) #4 !dbg !2765 {
  %7 = load i32, i32* @x.55
  %8 = load i32, i32* @y.56
  %9 = sub i32 %7, 1
  %10 = mul i32 %7, %9
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  %13 = icmp slt i32 %8, 10
  %14 = or i1 %12, %13
  br i1 %14, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %6, %originalBBalteredBB
  %15 = alloca %struct._IO_FILE*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca i8*, align 8
  %19 = alloca i8**, align 8
  %20 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %15, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %15, metadata !2822, metadata !DIExpression()), !dbg !2823
  store i8* %1, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !2824, metadata !DIExpression()), !dbg !2825
  store i8* %2, i8** %17, align 8
  call void @llvm.dbg.declare(metadata i8** %17, metadata !2826, metadata !DIExpression()), !dbg !2827
  store i8* %3, i8** %18, align 8
  call void @llvm.dbg.declare(metadata i8** %18, metadata !2828, metadata !DIExpression()), !dbg !2829
  store i8** %4, i8*** %19, align 8
  call void @llvm.dbg.declare(metadata i8*** %19, metadata !2830, metadata !DIExpression()), !dbg !2831
  store i64 %5, i64* %20, align 8
  call void @llvm.dbg.declare(metadata i64* %20, metadata !2832, metadata !DIExpression()), !dbg !2833
  %21 = load i8*, i8** %16, align 8, !dbg !2834
  %22 = icmp ne i8* %21, null, !dbg !2834
  %23 = load i32, i32* @x.55
  %24 = load i32, i32* @y.56
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %31, label %37, !dbg !2836

31:                                               ; preds = %originalBBpart2
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2837
  %33 = load i8*, i8** %16, align 8, !dbg !2838
  %34 = load i8*, i8** %17, align 8, !dbg !2839
  %35 = load i8*, i8** %18, align 8, !dbg !2840
  %36 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %32, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.81, i64 0, i64 0), i8* %33, i8* %34, i8* %35), !dbg !2841
  br label %58, !dbg !2841

37:                                               ; preds = %originalBBpart2
  %38 = load i32, i32* @x.55
  %39 = load i32, i32* @y.56
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %37, %originalBB1alteredBB
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2842
  %47 = load i8*, i8** %17, align 8, !dbg !2843
  %48 = load i8*, i8** %18, align 8, !dbg !2844
  %49 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %46, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.82, i64 0, i64 0), i8* %47, i8* %48), !dbg !2845
  %50 = load i32, i32* @x.55
  %51 = load i32, i32* @y.56
  %52 = sub i32 %50, 1
  %53 = mul i32 %50, %52
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %55, %56
  br i1 %57, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %58

58:                                               ; preds = %originalBBpart24, %31
  %59 = load i32, i32* @x.55
  %60 = load i32, i32* @y.56
  %61 = sub i32 %59, 1
  %62 = mul i32 %59, %61
  %63 = urem i32 %62, 2
  %64 = icmp eq i32 %63, 0
  %65 = icmp slt i32 %60, 10
  %66 = or i1 %64, %65
  br i1 %66, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %58, %originalBB6alteredBB
  %67 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2846
  %68 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.83, i64 0, i64 0)) #10, !dbg !2847
  %69 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %67, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @version_etc_copyright, i64 0, i64 0), i8* %68, i32 2020), !dbg !2848
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2849
  %71 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.84, i64 0, i64 0), %struct._IO_FILE* %70), !dbg !2849
  %72 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2850
  %73 = call i8* @gettext(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.4.85, i64 0, i64 0)) #10, !dbg !2851
  %74 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %72, i8* %73, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5.86, i64 0, i64 0)), !dbg !2852
  %75 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2853
  %76 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.84, i64 0, i64 0), %struct._IO_FILE* %75), !dbg !2853
  %77 = load i64, i64* %20, align 8, !dbg !2854
  %78 = load i32, i32* @x.55
  %79 = load i32, i32* @y.56
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  switch i64 %77, label %354 [
    i64 0, label %86
    i64 1, label %103
    i64 2, label %126
    i64 3, label %152
    i64 4, label %181
    i64 5, label %197
    i64 6, label %232
    i64 7, label %254
    i64 8, label %295
    i64 9, label %323
  ], !dbg !2855

86:                                               ; preds = %originalBBpart28
  %87 = load i32, i32* @x.55
  %88 = load i32, i32* @y.56
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %86, %originalBB10alteredBB
  %95 = load i32, i32* @x.55
  %96 = load i32, i32* @y.56
  %97 = sub i32 %95, 1
  %98 = mul i32 %95, %97
  %99 = urem i32 %98, 2
  %100 = icmp eq i32 %99, 0
  %101 = icmp slt i32 %96, 10
  %102 = or i1 %100, %101
  br i1 %102, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %385, !dbg !2856

103:                                              ; preds = %originalBBpart28
  %104 = load i32, i32* @x.55
  %105 = load i32, i32* @y.56
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %103, %originalBB14alteredBB
  %112 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2858
  %113 = call i8* @gettext(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.87, i64 0, i64 0)) #10, !dbg !2859
  %114 = load i8**, i8*** %19, align 8, !dbg !2860
  %115 = getelementptr inbounds i8*, i8** %114, i64 0, !dbg !2860
  %116 = load i8*, i8** %115, align 8, !dbg !2860
  %117 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %112, i8* %113, i8* %116), !dbg !2861
  %118 = load i32, i32* @x.55
  %119 = load i32, i32* @y.56
  %120 = sub i32 %118, 1
  %121 = mul i32 %118, %120
  %122 = urem i32 %121, 2
  %123 = icmp eq i32 %122, 0
  %124 = icmp slt i32 %119, 10
  %125 = or i1 %123, %124
  br i1 %125, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %385, !dbg !2862

126:                                              ; preds = %originalBBpart28
  %127 = load i32, i32* @x.55
  %128 = load i32, i32* @y.56
  %129 = sub i32 %127, 1
  %130 = mul i32 %127, %129
  %131 = urem i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %132, %133
  br i1 %134, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %126, %originalBB18alteredBB
  %135 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2863
  %136 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7.88, i64 0, i64 0)) #10, !dbg !2864
  %137 = load i8**, i8*** %19, align 8, !dbg !2865
  %138 = getelementptr inbounds i8*, i8** %137, i64 0, !dbg !2865
  %139 = load i8*, i8** %138, align 8, !dbg !2865
  %140 = load i8**, i8*** %19, align 8, !dbg !2866
  %141 = getelementptr inbounds i8*, i8** %140, i64 1, !dbg !2866
  %142 = load i8*, i8** %141, align 8, !dbg !2866
  %143 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %135, i8* %136, i8* %139, i8* %142), !dbg !2867
  %144 = load i32, i32* @x.55
  %145 = load i32, i32* @y.56
  %146 = sub i32 %144, 1
  %147 = mul i32 %144, %146
  %148 = urem i32 %147, 2
  %149 = icmp eq i32 %148, 0
  %150 = icmp slt i32 %145, 10
  %151 = or i1 %149, %150
  br i1 %151, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %385, !dbg !2868

152:                                              ; preds = %originalBBpart28
  %153 = load i32, i32* @x.55
  %154 = load i32, i32* @y.56
  %155 = sub i32 %153, 1
  %156 = mul i32 %153, %155
  %157 = urem i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = icmp slt i32 %154, 10
  %160 = or i1 %158, %159
  br i1 %160, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %152, %originalBB22alteredBB
  %161 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2869
  %162 = call i8* @gettext(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8.89, i64 0, i64 0)) #10, !dbg !2870
  %163 = load i8**, i8*** %19, align 8, !dbg !2871
  %164 = getelementptr inbounds i8*, i8** %163, i64 0, !dbg !2871
  %165 = load i8*, i8** %164, align 8, !dbg !2871
  %166 = load i8**, i8*** %19, align 8, !dbg !2872
  %167 = getelementptr inbounds i8*, i8** %166, i64 1, !dbg !2872
  %168 = load i8*, i8** %167, align 8, !dbg !2872
  %169 = load i8**, i8*** %19, align 8, !dbg !2873
  %170 = getelementptr inbounds i8*, i8** %169, i64 2, !dbg !2873
  %171 = load i8*, i8** %170, align 8, !dbg !2873
  %172 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %161, i8* %162, i8* %165, i8* %168, i8* %171), !dbg !2874
  %173 = load i32, i32* @x.55
  %174 = load i32, i32* @y.56
  %175 = sub i32 %173, 1
  %176 = mul i32 %173, %175
  %177 = urem i32 %176, 2
  %178 = icmp eq i32 %177, 0
  %179 = icmp slt i32 %174, 10
  %180 = or i1 %178, %179
  br i1 %180, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %385, !dbg !2875

181:                                              ; preds = %originalBBpart28
  %182 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2876
  %183 = call i8* @gettext(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.9.90, i64 0, i64 0)) #10, !dbg !2877
  %184 = load i8**, i8*** %19, align 8, !dbg !2878
  %185 = getelementptr inbounds i8*, i8** %184, i64 0, !dbg !2878
  %186 = load i8*, i8** %185, align 8, !dbg !2878
  %187 = load i8**, i8*** %19, align 8, !dbg !2879
  %188 = getelementptr inbounds i8*, i8** %187, i64 1, !dbg !2879
  %189 = load i8*, i8** %188, align 8, !dbg !2879
  %190 = load i8**, i8*** %19, align 8, !dbg !2880
  %191 = getelementptr inbounds i8*, i8** %190, i64 2, !dbg !2880
  %192 = load i8*, i8** %191, align 8, !dbg !2880
  %193 = load i8**, i8*** %19, align 8, !dbg !2881
  %194 = getelementptr inbounds i8*, i8** %193, i64 3, !dbg !2881
  %195 = load i8*, i8** %194, align 8, !dbg !2881
  %196 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %182, i8* %183, i8* %186, i8* %189, i8* %192, i8* %195), !dbg !2882
  br label %385, !dbg !2883

197:                                              ; preds = %originalBBpart28
  %198 = load i32, i32* @x.55
  %199 = load i32, i32* @y.56
  %200 = sub i32 %198, 1
  %201 = mul i32 %198, %200
  %202 = urem i32 %201, 2
  %203 = icmp eq i32 %202, 0
  %204 = icmp slt i32 %199, 10
  %205 = or i1 %203, %204
  br i1 %205, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %197, %originalBB26alteredBB
  %206 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2884
  %207 = call i8* @gettext(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.10.91, i64 0, i64 0)) #10, !dbg !2885
  %208 = load i8**, i8*** %19, align 8, !dbg !2886
  %209 = getelementptr inbounds i8*, i8** %208, i64 0, !dbg !2886
  %210 = load i8*, i8** %209, align 8, !dbg !2886
  %211 = load i8**, i8*** %19, align 8, !dbg !2887
  %212 = getelementptr inbounds i8*, i8** %211, i64 1, !dbg !2887
  %213 = load i8*, i8** %212, align 8, !dbg !2887
  %214 = load i8**, i8*** %19, align 8, !dbg !2888
  %215 = getelementptr inbounds i8*, i8** %214, i64 2, !dbg !2888
  %216 = load i8*, i8** %215, align 8, !dbg !2888
  %217 = load i8**, i8*** %19, align 8, !dbg !2889
  %218 = getelementptr inbounds i8*, i8** %217, i64 3, !dbg !2889
  %219 = load i8*, i8** %218, align 8, !dbg !2889
  %220 = load i8**, i8*** %19, align 8, !dbg !2890
  %221 = getelementptr inbounds i8*, i8** %220, i64 4, !dbg !2890
  %222 = load i8*, i8** %221, align 8, !dbg !2890
  %223 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %206, i8* %207, i8* %210, i8* %213, i8* %216, i8* %219, i8* %222), !dbg !2891
  %224 = load i32, i32* @x.55
  %225 = load i32, i32* @y.56
  %226 = sub i32 %224, 1
  %227 = mul i32 %224, %226
  %228 = urem i32 %227, 2
  %229 = icmp eq i32 %228, 0
  %230 = icmp slt i32 %225, 10
  %231 = or i1 %229, %230
  br i1 %231, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %385, !dbg !2892

232:                                              ; preds = %originalBBpart28
  %233 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2893
  %234 = call i8* @gettext(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11.92, i64 0, i64 0)) #10, !dbg !2894
  %235 = load i8**, i8*** %19, align 8, !dbg !2895
  %236 = getelementptr inbounds i8*, i8** %235, i64 0, !dbg !2895
  %237 = load i8*, i8** %236, align 8, !dbg !2895
  %238 = load i8**, i8*** %19, align 8, !dbg !2896
  %239 = getelementptr inbounds i8*, i8** %238, i64 1, !dbg !2896
  %240 = load i8*, i8** %239, align 8, !dbg !2896
  %241 = load i8**, i8*** %19, align 8, !dbg !2897
  %242 = getelementptr inbounds i8*, i8** %241, i64 2, !dbg !2897
  %243 = load i8*, i8** %242, align 8, !dbg !2897
  %244 = load i8**, i8*** %19, align 8, !dbg !2898
  %245 = getelementptr inbounds i8*, i8** %244, i64 3, !dbg !2898
  %246 = load i8*, i8** %245, align 8, !dbg !2898
  %247 = load i8**, i8*** %19, align 8, !dbg !2899
  %248 = getelementptr inbounds i8*, i8** %247, i64 4, !dbg !2899
  %249 = load i8*, i8** %248, align 8, !dbg !2899
  %250 = load i8**, i8*** %19, align 8, !dbg !2900
  %251 = getelementptr inbounds i8*, i8** %250, i64 5, !dbg !2900
  %252 = load i8*, i8** %251, align 8, !dbg !2900
  %253 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %233, i8* %234, i8* %237, i8* %240, i8* %243, i8* %246, i8* %249, i8* %252), !dbg !2901
  br label %385, !dbg !2902

254:                                              ; preds = %originalBBpart28
  %255 = load i32, i32* @x.55
  %256 = load i32, i32* @y.56
  %257 = sub i32 %255, 1
  %258 = mul i32 %255, %257
  %259 = urem i32 %258, 2
  %260 = icmp eq i32 %259, 0
  %261 = icmp slt i32 %256, 10
  %262 = or i1 %260, %261
  br i1 %262, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %254, %originalBB30alteredBB
  %263 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2903
  %264 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.12.93, i64 0, i64 0)) #10, !dbg !2904
  %265 = load i8**, i8*** %19, align 8, !dbg !2905
  %266 = getelementptr inbounds i8*, i8** %265, i64 0, !dbg !2905
  %267 = load i8*, i8** %266, align 8, !dbg !2905
  %268 = load i8**, i8*** %19, align 8, !dbg !2906
  %269 = getelementptr inbounds i8*, i8** %268, i64 1, !dbg !2906
  %270 = load i8*, i8** %269, align 8, !dbg !2906
  %271 = load i8**, i8*** %19, align 8, !dbg !2907
  %272 = getelementptr inbounds i8*, i8** %271, i64 2, !dbg !2907
  %273 = load i8*, i8** %272, align 8, !dbg !2907
  %274 = load i8**, i8*** %19, align 8, !dbg !2908
  %275 = getelementptr inbounds i8*, i8** %274, i64 3, !dbg !2908
  %276 = load i8*, i8** %275, align 8, !dbg !2908
  %277 = load i8**, i8*** %19, align 8, !dbg !2909
  %278 = getelementptr inbounds i8*, i8** %277, i64 4, !dbg !2909
  %279 = load i8*, i8** %278, align 8, !dbg !2909
  %280 = load i8**, i8*** %19, align 8, !dbg !2910
  %281 = getelementptr inbounds i8*, i8** %280, i64 5, !dbg !2910
  %282 = load i8*, i8** %281, align 8, !dbg !2910
  %283 = load i8**, i8*** %19, align 8, !dbg !2911
  %284 = getelementptr inbounds i8*, i8** %283, i64 6, !dbg !2911
  %285 = load i8*, i8** %284, align 8, !dbg !2911
  %286 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %263, i8* %264, i8* %267, i8* %270, i8* %273, i8* %276, i8* %279, i8* %282, i8* %285), !dbg !2912
  %287 = load i32, i32* @x.55
  %288 = load i32, i32* @y.56
  %289 = sub i32 %287, 1
  %290 = mul i32 %287, %289
  %291 = urem i32 %290, 2
  %292 = icmp eq i32 %291, 0
  %293 = icmp slt i32 %288, 10
  %294 = or i1 %292, %293
  br i1 %294, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %385, !dbg !2913

295:                                              ; preds = %originalBBpart28
  %296 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2914
  %297 = call i8* @gettext(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.13.94, i64 0, i64 0)) #10, !dbg !2915
  %298 = load i8**, i8*** %19, align 8, !dbg !2916
  %299 = getelementptr inbounds i8*, i8** %298, i64 0, !dbg !2916
  %300 = load i8*, i8** %299, align 8, !dbg !2916
  %301 = load i8**, i8*** %19, align 8, !dbg !2917
  %302 = getelementptr inbounds i8*, i8** %301, i64 1, !dbg !2917
  %303 = load i8*, i8** %302, align 8, !dbg !2917
  %304 = load i8**, i8*** %19, align 8, !dbg !2918
  %305 = getelementptr inbounds i8*, i8** %304, i64 2, !dbg !2918
  %306 = load i8*, i8** %305, align 8, !dbg !2918
  %307 = load i8**, i8*** %19, align 8, !dbg !2919
  %308 = getelementptr inbounds i8*, i8** %307, i64 3, !dbg !2919
  %309 = load i8*, i8** %308, align 8, !dbg !2919
  %310 = load i8**, i8*** %19, align 8, !dbg !2920
  %311 = getelementptr inbounds i8*, i8** %310, i64 4, !dbg !2920
  %312 = load i8*, i8** %311, align 8, !dbg !2920
  %313 = load i8**, i8*** %19, align 8, !dbg !2921
  %314 = getelementptr inbounds i8*, i8** %313, i64 5, !dbg !2921
  %315 = load i8*, i8** %314, align 8, !dbg !2921
  %316 = load i8**, i8*** %19, align 8, !dbg !2922
  %317 = getelementptr inbounds i8*, i8** %316, i64 6, !dbg !2922
  %318 = load i8*, i8** %317, align 8, !dbg !2922
  %319 = load i8**, i8*** %19, align 8, !dbg !2923
  %320 = getelementptr inbounds i8*, i8** %319, i64 7, !dbg !2923
  %321 = load i8*, i8** %320, align 8, !dbg !2923
  %322 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %296, i8* %297, i8* %300, i8* %303, i8* %306, i8* %309, i8* %312, i8* %315, i8* %318, i8* %321), !dbg !2924
  br label %385, !dbg !2925

323:                                              ; preds = %originalBBpart28
  %324 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2926
  %325 = call i8* @gettext(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.14.95, i64 0, i64 0)) #10, !dbg !2927
  %326 = load i8**, i8*** %19, align 8, !dbg !2928
  %327 = getelementptr inbounds i8*, i8** %326, i64 0, !dbg !2928
  %328 = load i8*, i8** %327, align 8, !dbg !2928
  %329 = load i8**, i8*** %19, align 8, !dbg !2929
  %330 = getelementptr inbounds i8*, i8** %329, i64 1, !dbg !2929
  %331 = load i8*, i8** %330, align 8, !dbg !2929
  %332 = load i8**, i8*** %19, align 8, !dbg !2930
  %333 = getelementptr inbounds i8*, i8** %332, i64 2, !dbg !2930
  %334 = load i8*, i8** %333, align 8, !dbg !2930
  %335 = load i8**, i8*** %19, align 8, !dbg !2931
  %336 = getelementptr inbounds i8*, i8** %335, i64 3, !dbg !2931
  %337 = load i8*, i8** %336, align 8, !dbg !2931
  %338 = load i8**, i8*** %19, align 8, !dbg !2932
  %339 = getelementptr inbounds i8*, i8** %338, i64 4, !dbg !2932
  %340 = load i8*, i8** %339, align 8, !dbg !2932
  %341 = load i8**, i8*** %19, align 8, !dbg !2933
  %342 = getelementptr inbounds i8*, i8** %341, i64 5, !dbg !2933
  %343 = load i8*, i8** %342, align 8, !dbg !2933
  %344 = load i8**, i8*** %19, align 8, !dbg !2934
  %345 = getelementptr inbounds i8*, i8** %344, i64 6, !dbg !2934
  %346 = load i8*, i8** %345, align 8, !dbg !2934
  %347 = load i8**, i8*** %19, align 8, !dbg !2935
  %348 = getelementptr inbounds i8*, i8** %347, i64 7, !dbg !2935
  %349 = load i8*, i8** %348, align 8, !dbg !2935
  %350 = load i8**, i8*** %19, align 8, !dbg !2936
  %351 = getelementptr inbounds i8*, i8** %350, i64 8, !dbg !2936
  %352 = load i8*, i8** %351, align 8, !dbg !2936
  %353 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %324, i8* %325, i8* %328, i8* %331, i8* %334, i8* %337, i8* %340, i8* %343, i8* %346, i8* %349, i8* %352), !dbg !2937
  br label %385, !dbg !2938

354:                                              ; preds = %originalBBpart28
  %355 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2939
  %356 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.15.96, i64 0, i64 0)) #10, !dbg !2940
  %357 = load i8**, i8*** %19, align 8, !dbg !2941
  %358 = getelementptr inbounds i8*, i8** %357, i64 0, !dbg !2941
  %359 = load i8*, i8** %358, align 8, !dbg !2941
  %360 = load i8**, i8*** %19, align 8, !dbg !2942
  %361 = getelementptr inbounds i8*, i8** %360, i64 1, !dbg !2942
  %362 = load i8*, i8** %361, align 8, !dbg !2942
  %363 = load i8**, i8*** %19, align 8, !dbg !2943
  %364 = getelementptr inbounds i8*, i8** %363, i64 2, !dbg !2943
  %365 = load i8*, i8** %364, align 8, !dbg !2943
  %366 = load i8**, i8*** %19, align 8, !dbg !2944
  %367 = getelementptr inbounds i8*, i8** %366, i64 3, !dbg !2944
  %368 = load i8*, i8** %367, align 8, !dbg !2944
  %369 = load i8**, i8*** %19, align 8, !dbg !2945
  %370 = getelementptr inbounds i8*, i8** %369, i64 4, !dbg !2945
  %371 = load i8*, i8** %370, align 8, !dbg !2945
  %372 = load i8**, i8*** %19, align 8, !dbg !2946
  %373 = getelementptr inbounds i8*, i8** %372, i64 5, !dbg !2946
  %374 = load i8*, i8** %373, align 8, !dbg !2946
  %375 = load i8**, i8*** %19, align 8, !dbg !2947
  %376 = getelementptr inbounds i8*, i8** %375, i64 6, !dbg !2947
  %377 = load i8*, i8** %376, align 8, !dbg !2947
  %378 = load i8**, i8*** %19, align 8, !dbg !2948
  %379 = getelementptr inbounds i8*, i8** %378, i64 7, !dbg !2948
  %380 = load i8*, i8** %379, align 8, !dbg !2948
  %381 = load i8**, i8*** %19, align 8, !dbg !2949
  %382 = getelementptr inbounds i8*, i8** %381, i64 8, !dbg !2949
  %383 = load i8*, i8** %382, align 8, !dbg !2949
  %384 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %355, i8* %356, i8* %359, i8* %362, i8* %365, i8* %368, i8* %371, i8* %374, i8* %377, i8* %380, i8* %383), !dbg !2950
  br label %385, !dbg !2951

385:                                              ; preds = %354, %323, %295, %originalBBpart232, %232, %originalBBpart228, %181, %originalBBpart224, %originalBBpart220, %originalBBpart216, %originalBBpart212
  ret void, !dbg !2952

originalBBalteredBB:                              ; preds = %originalBB, %6
  %386 = alloca %struct._IO_FILE*, align 8
  %387 = alloca i8*, align 8
  %388 = alloca i8*, align 8
  %389 = alloca i8*, align 8
  %390 = alloca i8**, align 8
  %391 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %386, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %386, metadata !2953, metadata !DIExpression()), !dbg !2823
  store i8* %1, i8** %387, align 8
  call void @llvm.dbg.declare(metadata i8** %387, metadata !2992, metadata !DIExpression()), !dbg !2825
  store i8* %2, i8** %388, align 8
  call void @llvm.dbg.declare(metadata i8** %388, metadata !2993, metadata !DIExpression()), !dbg !2827
  store i8* %3, i8** %389, align 8
  call void @llvm.dbg.declare(metadata i8** %389, metadata !2994, metadata !DIExpression()), !dbg !2829
  store i8** %4, i8*** %390, align 8
  call void @llvm.dbg.declare(metadata i8*** %390, metadata !2995, metadata !DIExpression()), !dbg !2831
  store i64 %5, i64* %391, align 8
  call void @llvm.dbg.declare(metadata i64* %391, metadata !2996, metadata !DIExpression()), !dbg !2833
  %392 = load i8*, i8** %387, align 8, !dbg !2834
  %393 = icmp ne i8* %392, null, !dbg !2834
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %37
  %394 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2842
  %395 = load i8*, i8** %17, align 8, !dbg !2843
  %396 = load i8*, i8** %18, align 8, !dbg !2844
  %397 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %394, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.82, i64 0, i64 0), i8* %395, i8* %396), !dbg !2845
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %58
  %398 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2846
  %399 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.83, i64 0, i64 0)) #10, !dbg !2847
  %400 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %398, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @version_etc_copyright, i64 0, i64 0), i8* %399, i32 2020), !dbg !2848
  %401 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2849
  %402 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.84, i64 0, i64 0), %struct._IO_FILE* %401), !dbg !2849
  %403 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2850
  %404 = call i8* @gettext(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.4.85, i64 0, i64 0)) #10, !dbg !2851
  %405 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %403, i8* %404, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5.86, i64 0, i64 0)), !dbg !2852
  %406 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2853
  %407 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.84, i64 0, i64 0), %struct._IO_FILE* %406), !dbg !2853
  %408 = load i64, i64* %20, align 8, !dbg !2854
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %86
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %103
  %409 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2858
  %410 = call i8* @gettext(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.87, i64 0, i64 0)) #10, !dbg !2859
  %411 = load i8**, i8*** %19, align 8, !dbg !2860
  %412 = getelementptr inbounds i8*, i8** %411, i64 0, !dbg !2860
  %413 = load i8*, i8** %412, align 8, !dbg !2860
  %414 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %409, i8* %410, i8* %413), !dbg !2861
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %126
  %415 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2863
  %416 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7.88, i64 0, i64 0)) #10, !dbg !2864
  %417 = load i8**, i8*** %19, align 8, !dbg !2865
  %418 = getelementptr inbounds i8*, i8** %417, i64 0, !dbg !2865
  %419 = load i8*, i8** %418, align 8, !dbg !2865
  %420 = load i8**, i8*** %19, align 8, !dbg !2866
  %421 = getelementptr inbounds i8*, i8** %420, i64 1, !dbg !2866
  %422 = load i8*, i8** %421, align 8, !dbg !2866
  %423 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %415, i8* %416, i8* %419, i8* %422), !dbg !2867
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %152
  %424 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2869
  %425 = call i8* @gettext(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8.89, i64 0, i64 0)) #10, !dbg !2870
  %426 = load i8**, i8*** %19, align 8, !dbg !2871
  %427 = getelementptr inbounds i8*, i8** %426, i64 0, !dbg !2871
  %428 = load i8*, i8** %427, align 8, !dbg !2871
  %429 = load i8**, i8*** %19, align 8, !dbg !2872
  %430 = getelementptr inbounds i8*, i8** %429, i64 1, !dbg !2872
  %431 = load i8*, i8** %430, align 8, !dbg !2872
  %432 = load i8**, i8*** %19, align 8, !dbg !2873
  %433 = getelementptr inbounds i8*, i8** %432, i64 2, !dbg !2873
  %434 = load i8*, i8** %433, align 8, !dbg !2873
  %435 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %424, i8* %425, i8* %428, i8* %431, i8* %434), !dbg !2874
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %197
  %436 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2884
  %437 = call i8* @gettext(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.10.91, i64 0, i64 0)) #10, !dbg !2885
  %438 = load i8**, i8*** %19, align 8, !dbg !2886
  %439 = getelementptr inbounds i8*, i8** %438, i64 0, !dbg !2886
  %440 = load i8*, i8** %439, align 8, !dbg !2886
  %441 = load i8**, i8*** %19, align 8, !dbg !2887
  %442 = getelementptr inbounds i8*, i8** %441, i64 1, !dbg !2887
  %443 = load i8*, i8** %442, align 8, !dbg !2887
  %444 = load i8**, i8*** %19, align 8, !dbg !2888
  %445 = getelementptr inbounds i8*, i8** %444, i64 2, !dbg !2888
  %446 = load i8*, i8** %445, align 8, !dbg !2888
  %447 = load i8**, i8*** %19, align 8, !dbg !2889
  %448 = getelementptr inbounds i8*, i8** %447, i64 3, !dbg !2889
  %449 = load i8*, i8** %448, align 8, !dbg !2889
  %450 = load i8**, i8*** %19, align 8, !dbg !2890
  %451 = getelementptr inbounds i8*, i8** %450, i64 4, !dbg !2890
  %452 = load i8*, i8** %451, align 8, !dbg !2890
  %453 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %436, i8* %437, i8* %440, i8* %443, i8* %446, i8* %449, i8* %452), !dbg !2891
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %254
  %454 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2903
  %455 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.12.93, i64 0, i64 0)) #10, !dbg !2904
  %456 = load i8**, i8*** %19, align 8, !dbg !2905
  %457 = getelementptr inbounds i8*, i8** %456, i64 0, !dbg !2905
  %458 = load i8*, i8** %457, align 8, !dbg !2905
  %459 = load i8**, i8*** %19, align 8, !dbg !2906
  %460 = getelementptr inbounds i8*, i8** %459, i64 1, !dbg !2906
  %461 = load i8*, i8** %460, align 8, !dbg !2906
  %462 = load i8**, i8*** %19, align 8, !dbg !2907
  %463 = getelementptr inbounds i8*, i8** %462, i64 2, !dbg !2907
  %464 = load i8*, i8** %463, align 8, !dbg !2907
  %465 = load i8**, i8*** %19, align 8, !dbg !2908
  %466 = getelementptr inbounds i8*, i8** %465, i64 3, !dbg !2908
  %467 = load i8*, i8** %466, align 8, !dbg !2908
  %468 = load i8**, i8*** %19, align 8, !dbg !2909
  %469 = getelementptr inbounds i8*, i8** %468, i64 4, !dbg !2909
  %470 = load i8*, i8** %469, align 8, !dbg !2909
  %471 = load i8**, i8*** %19, align 8, !dbg !2910
  %472 = getelementptr inbounds i8*, i8** %471, i64 5, !dbg !2910
  %473 = load i8*, i8** %472, align 8, !dbg !2910
  %474 = load i8**, i8*** %19, align 8, !dbg !2911
  %475 = getelementptr inbounds i8*, i8** %474, i64 6, !dbg !2911
  %476 = load i8*, i8** %475, align 8, !dbg !2911
  %477 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %454, i8* %455, i8* %458, i8* %461, i8* %464, i8* %467, i8* %470, i8* %473, i8* %476), !dbg !2912
  br label %originalBB30
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc_va(%struct._IO_FILE*, i8*, i8*, i8*, %struct.__va_list_tag*) #4 !dbg !2997 {
  %6 = load i32, i32* @x.57
  %7 = load i32, i32* @y.58
  %8 = sub i32 %6, 1
  %9 = mul i32 %6, %8
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  %12 = icmp slt i32 %7, 10
  %13 = or i1 %11, %12
  br i1 %13, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %5, %originalBBalteredBB
  %14 = alloca %struct._IO_FILE*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca %struct.__va_list_tag*, align 8
  %19 = alloca i64, align 8
  %20 = alloca [10 x i8*], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %14, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %14, metadata !3007, metadata !DIExpression()), !dbg !3008
  store i8* %1, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !3009, metadata !DIExpression()), !dbg !3010
  store i8* %2, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !3011, metadata !DIExpression()), !dbg !3012
  store i8* %3, i8** %17, align 8
  call void @llvm.dbg.declare(metadata i8** %17, metadata !3013, metadata !DIExpression()), !dbg !3014
  store %struct.__va_list_tag* %4, %struct.__va_list_tag** %18, align 8
  call void @llvm.dbg.declare(metadata %struct.__va_list_tag** %18, metadata !3015, metadata !DIExpression()), !dbg !3016
  call void @llvm.dbg.declare(metadata i64* %19, metadata !3017, metadata !DIExpression()), !dbg !3018
  call void @llvm.dbg.declare(metadata [10 x i8*]* %20, metadata !3019, metadata !DIExpression()), !dbg !3021
  store i64 0, i64* %19, align 8, !dbg !3022
  %21 = load i32, i32* @x.57
  %22 = load i32, i32* @y.58
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %29, !dbg !3024

29:                                               ; preds = %121, %originalBBpart2
  %30 = load i64, i64* %19, align 8, !dbg !3025
  %31 = icmp ult i64 %30, 10, !dbg !3027
  br i1 %31, label %32, label %86, !dbg !3028

32:                                               ; preds = %29
  %33 = load %struct.__va_list_tag*, %struct.__va_list_tag** %18, align 8, !dbg !3029
  %34 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %33, i32 0, i32 0, !dbg !3029
  %35 = load i32, i32* %34, align 8, !dbg !3029
  %36 = icmp ule i32 %35, 40, !dbg !3029
  br i1 %36, label %37, label %43, !dbg !3029

37:                                               ; preds = %32
  %38 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %33, i32 0, i32 3, !dbg !3029
  %39 = load i8*, i8** %38, align 8, !dbg !3029
  %40 = getelementptr i8, i8* %39, i32 %35, !dbg !3029
  %41 = bitcast i8* %40 to i8**, !dbg !3029
  %42 = add i32 %35, 8, !dbg !3029
  store i32 %42, i32* %34, align 8, !dbg !3029
  br label %64, !dbg !3029

43:                                               ; preds = %32
  %44 = load i32, i32* @x.57
  %45 = load i32, i32* @y.58
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %43, %originalBB1alteredBB
  %52 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %33, i32 0, i32 2, !dbg !3029
  %53 = load i8*, i8** %52, align 8, !dbg !3029
  %54 = bitcast i8* %53 to i8**, !dbg !3029
  %55 = getelementptr i8, i8* %53, i32 8, !dbg !3029
  store i8* %55, i8** %52, align 8, !dbg !3029
  %56 = load i32, i32* @x.57
  %57 = load i32, i32* @y.58
  %58 = sub i32 %56, 1
  %59 = mul i32 %56, %58
  %60 = urem i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %57, 10
  %63 = or i1 %61, %62
  br i1 %63, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %64, !dbg !3029

64:                                               ; preds = %originalBBpart24, %37
  %65 = phi i8** [ %41, %37 ], [ %54, %originalBBpart24 ], !dbg !3029
  %66 = load i32, i32* @x.57
  %67 = load i32, i32* @y.58
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %64, %originalBB6alteredBB
  %74 = load i8*, i8** %65, align 8, !dbg !3029
  %75 = load i64, i64* %19, align 8, !dbg !3030
  %76 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 %75, !dbg !3031
  store i8* %74, i8** %76, align 8, !dbg !3032
  %77 = icmp ne i8* %74, null, !dbg !3033
  %78 = load i32, i32* @x.57
  %79 = load i32, i32* @y.58
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %86

86:                                               ; preds = %originalBBpart28, %29
  %87 = phi i1 [ false, %29 ], [ %77, %originalBBpart28 ], !dbg !3034
  %88 = load i32, i32* @x.57
  %89 = load i32, i32* @y.58
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %86, %originalBB10alteredBB
  %96 = load i32, i32* @x.57
  %97 = load i32, i32* @y.58
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %87, label %104, label %124, !dbg !3035

104:                                              ; preds = %originalBBpart212
  %105 = load i32, i32* @x.57
  %106 = load i32, i32* @y.58
  %107 = sub i32 %105, 1
  %108 = mul i32 %105, %107
  %109 = urem i32 %108, 2
  %110 = icmp eq i32 %109, 0
  %111 = icmp slt i32 %106, 10
  %112 = or i1 %110, %111
  br i1 %112, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %104, %originalBB14alteredBB
  %113 = load i32, i32* @x.57
  %114 = load i32, i32* @y.58
  %115 = sub i32 %113, 1
  %116 = mul i32 %113, %115
  %117 = urem i32 %116, 2
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %118, %119
  br i1 %120, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %121, !dbg !3035

121:                                              ; preds = %originalBBpart216
  %122 = load i64, i64* %19, align 8, !dbg !3036
  %123 = add i64 %122, 1, !dbg !3036
  store i64 %123, i64* %19, align 8, !dbg !3036
  br label %29, !dbg !3037, !llvm.loop !3038

124:                                              ; preds = %originalBBpart212
  %125 = load i32, i32* @x.57
  %126 = load i32, i32* @y.58
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %124, %originalBB18alteredBB
  %133 = load %struct._IO_FILE*, %struct._IO_FILE** %14, align 8, !dbg !3040
  %134 = load i8*, i8** %15, align 8, !dbg !3041
  %135 = load i8*, i8** %16, align 8, !dbg !3042
  %136 = load i8*, i8** %17, align 8, !dbg !3043
  %137 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 0, !dbg !3044
  %138 = load i64, i64* %19, align 8, !dbg !3045
  call void @version_etc_arn(%struct._IO_FILE* %133, i8* %134, i8* %135, i8* %136, i8** %137, i64 %138), !dbg !3046
  %139 = load i32, i32* @x.57
  %140 = load i32, i32* @y.58
  %141 = sub i32 %139, 1
  %142 = mul i32 %139, %141
  %143 = urem i32 %142, 2
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %144, %145
  br i1 %146, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  ret void, !dbg !3047

originalBBalteredBB:                              ; preds = %originalBB, %5
  %147 = alloca %struct._IO_FILE*, align 8
  %148 = alloca i8*, align 8
  %149 = alloca i8*, align 8
  %150 = alloca i8*, align 8
  %151 = alloca %struct.__va_list_tag*, align 8
  %152 = alloca i64, align 8
  %153 = alloca [10 x i8*], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %147, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %147, metadata !3048, metadata !DIExpression()), !dbg !3008
  store i8* %1, i8** %148, align 8
  call void @llvm.dbg.declare(metadata i8** %148, metadata !3094, metadata !DIExpression()), !dbg !3010
  store i8* %2, i8** %149, align 8
  call void @llvm.dbg.declare(metadata i8** %149, metadata !3095, metadata !DIExpression()), !dbg !3012
  store i8* %3, i8** %150, align 8
  call void @llvm.dbg.declare(metadata i8** %150, metadata !3096, metadata !DIExpression()), !dbg !3014
  store %struct.__va_list_tag* %4, %struct.__va_list_tag** %151, align 8
  call void @llvm.dbg.declare(metadata %struct.__va_list_tag** %151, metadata !3097, metadata !DIExpression()), !dbg !3016
  call void @llvm.dbg.declare(metadata i64* %152, metadata !3098, metadata !DIExpression()), !dbg !3018
  call void @llvm.dbg.declare(metadata [10 x i8*]* %153, metadata !3099, metadata !DIExpression()), !dbg !3021
  store i64 0, i64* %152, align 8, !dbg !3022
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %43
  %154 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %33, i32 0, i32 2, !dbg !3029
  %155 = load i8*, i8** %154, align 8, !dbg !3029
  %156 = bitcast i8* %155 to i8**, !dbg !3029
  %157 = getelementptr i8, i8* %155, i32 8, !dbg !3029
  store i8* %157, i8** %154, align 8, !dbg !3029
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %64
  %158 = load i8*, i8** %65, align 8, !dbg !3029
  %159 = load i64, i64* %19, align 8, !dbg !3030
  %160 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 %159, !dbg !3031
  store i8* %158, i8** %160, align 8, !dbg !3032
  %161 = icmp ne i8* %158, null, !dbg !3033
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %86
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %104
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %124
  %162 = load %struct._IO_FILE*, %struct._IO_FILE** %14, align 8, !dbg !3040
  %163 = load i8*, i8** %15, align 8, !dbg !3041
  %164 = load i8*, i8** %16, align 8, !dbg !3042
  %165 = load i8*, i8** %17, align 8, !dbg !3043
  %166 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 0, !dbg !3044
  %167 = load i64, i64* %19, align 8, !dbg !3045
  call void @version_etc_arn(%struct._IO_FILE* %162, i8* %163, i8* %164, i8* %165, i8** %166, i64 %167), !dbg !3046
  br label %originalBB18
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc(%struct._IO_FILE*, i8*, i8*, i8*, ...) #4 !dbg !3100 {
  %5 = load i32, i32* @x.59
  %6 = load i32, i32* @y.60
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %4, %originalBBalteredBB
  %13 = alloca %struct._IO_FILE*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca [1 x %struct.__va_list_tag], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %13, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %13, metadata !3103, metadata !DIExpression()), !dbg !3104
  store i8* %1, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !3105, metadata !DIExpression()), !dbg !3106
  store i8* %2, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !3107, metadata !DIExpression()), !dbg !3108
  store i8* %3, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !3109, metadata !DIExpression()), !dbg !3110
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %17, metadata !3111, metadata !DIExpression()), !dbg !3118
  %18 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %17, i64 0, i64 0, !dbg !3119
  %19 = bitcast %struct.__va_list_tag* %18 to i8*, !dbg !3119
  call void @llvm.va_start(i8* %19), !dbg !3119
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3120
  %21 = load i8*, i8** %14, align 8, !dbg !3121
  %22 = load i8*, i8** %15, align 8, !dbg !3122
  %23 = load i8*, i8** %16, align 8, !dbg !3123
  %24 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %17, i64 0, i64 0, !dbg !3124
  call void @version_etc_va(%struct._IO_FILE* %20, i8* %21, i8* %22, i8* %23, %struct.__va_list_tag* %24), !dbg !3125
  %25 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %17, i64 0, i64 0, !dbg !3126
  %26 = bitcast %struct.__va_list_tag* %25 to i8*, !dbg !3126
  call void @llvm.va_end(i8* %26), !dbg !3126
  %27 = load i32, i32* @x.59
  %28 = load i32, i32* @y.60
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret void, !dbg !3127

originalBBalteredBB:                              ; preds = %originalBB, %4
  %35 = alloca %struct._IO_FILE*, align 8
  %36 = alloca i8*, align 8
  %37 = alloca i8*, align 8
  %38 = alloca i8*, align 8
  %39 = alloca [1 x %struct.__va_list_tag], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %35, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %35, metadata !3128, metadata !DIExpression()), !dbg !3104
  store i8* %1, i8** %36, align 8
  call void @llvm.dbg.declare(metadata i8** %36, metadata !3167, metadata !DIExpression()), !dbg !3106
  store i8* %2, i8** %37, align 8
  call void @llvm.dbg.declare(metadata i8** %37, metadata !3168, metadata !DIExpression()), !dbg !3108
  store i8* %3, i8** %38, align 8
  call void @llvm.dbg.declare(metadata i8** %38, metadata !3169, metadata !DIExpression()), !dbg !3110
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %39, metadata !3170, metadata !DIExpression()), !dbg !3118
  %40 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %39, i64 0, i64 0, !dbg !3119
  %41 = bitcast %struct.__va_list_tag* %40 to i8*, !dbg !3119
  call void @llvm.va_start(i8* %41), !dbg !3119
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** %35, align 8, !dbg !3120
  %43 = load i8*, i8** %36, align 8, !dbg !3121
  %44 = load i8*, i8** %37, align 8, !dbg !3122
  %45 = load i8*, i8** %38, align 8, !dbg !3123
  %46 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %39, i64 0, i64 0, !dbg !3124
  call void @version_etc_va(%struct._IO_FILE* %42, i8* %43, i8* %44, i8* %45, %struct.__va_list_tag* %46), !dbg !3125
  %47 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %39, i64 0, i64 0, !dbg !3126
  %48 = bitcast %struct.__va_list_tag* %47 to i8*, !dbg !3126
  call void @llvm.va_end(i8* %48), !dbg !3126
  br label %originalBB
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #10

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #10

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xnmalloc(i64, i64) #4 !dbg !3181 {
  %3 = load i32, i32* @x.61
  %4 = load i32, i32* @y.62
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  store i64 %0, i64* %11, align 8
  call void @llvm.dbg.declare(metadata i64* %11, metadata !3185, metadata !DIExpression()), !dbg !3186
  store i64 %1, i64* %12, align 8
  call void @llvm.dbg.declare(metadata i64* %12, metadata !3187, metadata !DIExpression()), !dbg !3188
  %13 = load i64, i64* %12, align 8, !dbg !3189
  %14 = udiv i64 9223372036854775807, %13, !dbg !3189
  %15 = load i64, i64* %11, align 8, !dbg !3189
  %16 = icmp ult i64 %14, %15, !dbg !3189
  %17 = load i32, i32* @x.61
  %18 = load i32, i32* @y.62
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %16, label %25, label %42, !dbg !3191

25:                                               ; preds = %originalBBpart2
  %26 = load i32, i32* @x.61
  %27 = load i32, i32* @y.62
  %28 = sub i32 %26, 1
  %29 = mul i32 %26, %28
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %31, %32
  br i1 %33, label %originalBB7, label %originalBB7alteredBB

originalBB7:                                      ; preds = %25, %originalBB7alteredBB
  call void @xalloc_die() #14, !dbg !3192
  %34 = load i32, i32* @x.61
  %35 = load i32, i32* @y.62
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart29, label %originalBB7alteredBB

originalBBpart29:                                 ; preds = %originalBB7
  unreachable, !dbg !3192

42:                                               ; preds = %originalBBpart2
  %43 = load i32, i32* @x.61
  %44 = load i32, i32* @y.62
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB11, label %originalBB11alteredBB

originalBB11:                                     ; preds = %42, %originalBB11alteredBB
  %51 = load i64, i64* %11, align 8, !dbg !3193
  %52 = load i64, i64* %12, align 8, !dbg !3194
  %53 = mul i64 %51, %52, !dbg !3195
  %54 = call noalias i8* @xmalloc(i64 %53), !dbg !3196
  %55 = load i32, i32* @x.61
  %56 = load i32, i32* @y.62
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBBpart219, label %originalBB11alteredBB

originalBBpart219:                                ; preds = %originalBB11
  ret i8* %54, !dbg !3197

originalBBalteredBB:                              ; preds = %originalBB, %2
  %63 = alloca i64, align 8
  %64 = alloca i64, align 8
  store i64 %0, i64* %63, align 8
  call void @llvm.dbg.declare(metadata i64* %63, metadata !3198, metadata !DIExpression()), !dbg !3186
  store i64 %1, i64* %64, align 8
  call void @llvm.dbg.declare(metadata i64* %64, metadata !3201, metadata !DIExpression()), !dbg !3188
  %65 = load i64, i64* %64, align 8, !dbg !3189
  %_ = sub i64 0, 9223372036854775807
  %gen = add i64 %_, %65
  %_1 = sub i64 9223372036854775807, %65
  %gen2 = mul i64 %_1, %65
  %_3 = sub i64 9223372036854775807, %65
  %gen4 = mul i64 %_3, %65
  %_5 = sub i64 9223372036854775807, %65
  %gen6 = mul i64 %_5, %65
  %66 = udiv i64 9223372036854775807, %65, !dbg !3189
  %67 = load i64, i64* %63, align 8, !dbg !3189
  %68 = icmp ult i64 %66, %67, !dbg !3189
  br label %originalBB

originalBB7alteredBB:                             ; preds = %originalBB7, %25
  call void @xalloc_die() #14, !dbg !3192
  br label %originalBB7

originalBB11alteredBB:                            ; preds = %originalBB11, %42
  %69 = load i64, i64* %11, align 8, !dbg !3193
  %70 = load i64, i64* %12, align 8, !dbg !3194
  %_12 = sub i64 0, %69
  %gen13 = add i64 %_12, %70
  %_14 = shl i64 %69, %70
  %_15 = sub i64 %69, %70
  %gen16 = mul i64 %_15, %70
  %_17 = shl i64 %69, %70
  %71 = mul i64 %69, %70, !dbg !3195
  %72 = call noalias i8* @xmalloc(i64 %71), !dbg !3196
  br label %originalBB11
}

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xmalloc(i64) #4 !dbg !3202 {
  %2 = load i32, i32* @x.63
  %3 = load i32, i32* @y.64
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i64, align 8
  %11 = alloca i8*, align 8
  store i64 %0, i64* %10, align 8
  call void @llvm.dbg.declare(metadata i64* %10, metadata !3206, metadata !DIExpression()), !dbg !3207
  call void @llvm.dbg.declare(metadata i8** %11, metadata !3208, metadata !DIExpression()), !dbg !3209
  %12 = load i64, i64* %10, align 8, !dbg !3210
  %13 = call noalias i8* @malloc(i64 %12) #10, !dbg !3211
  store i8* %13, i8** %11, align 8, !dbg !3209
  %14 = load i8*, i8** %11, align 8, !dbg !3212
  %15 = icmp ne i8* %14, null, !dbg !3212
  %16 = load i32, i32* @x.63
  %17 = load i32, i32* @y.64
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %44, label %24, !dbg !3214

24:                                               ; preds = %originalBBpart2
  %25 = load i32, i32* @x.63
  %26 = load i32, i32* @y.64
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %24, %originalBB1alteredBB
  %33 = load i64, i64* %10, align 8, !dbg !3215
  %34 = icmp ne i64 %33, 0, !dbg !3216
  %35 = load i32, i32* @x.63
  %36 = load i32, i32* @y.64
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %34, label %43, label %44, !dbg !3217

43:                                               ; preds = %originalBBpart24
  call void @xalloc_die() #14, !dbg !3218
  unreachable, !dbg !3218

44:                                               ; preds = %originalBBpart24, %originalBBpart2
  %45 = load i32, i32* @x.63
  %46 = load i32, i32* @y.64
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %44, %originalBB6alteredBB
  %53 = load i8*, i8** %11, align 8, !dbg !3219
  %54 = load i32, i32* @x.63
  %55 = load i32, i32* @y.64
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  ret i8* %53, !dbg !3220

originalBBalteredBB:                              ; preds = %originalBB, %1
  %62 = alloca i64, align 8
  %63 = alloca i8*, align 8
  store i64 %0, i64* %62, align 8
  call void @llvm.dbg.declare(metadata i64* %62, metadata !3221, metadata !DIExpression()), !dbg !3207
  call void @llvm.dbg.declare(metadata i8** %63, metadata !3224, metadata !DIExpression()), !dbg !3209
  %64 = load i64, i64* %62, align 8, !dbg !3210
  %65 = call noalias i8* @malloc(i64 %64) #10, !dbg !3211
  store i8* %65, i8** %63, align 8, !dbg !3209
  %66 = load i8*, i8** %63, align 8, !dbg !3212
  %67 = icmp ne i8* %66, null, !dbg !3212
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %24
  %68 = load i64, i64* %10, align 8, !dbg !3215
  %69 = icmp ne i64 %68, 0, !dbg !3216
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %44
  %70 = load i8*, i8** %11, align 8, !dbg !3219
  br label %originalBB6
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @xrealloc(i8*, i64) #4 !dbg !3225 {
  %3 = load i32, i32* @x.65
  %4 = load i32, i32* @y.66
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !3228, metadata !DIExpression()), !dbg !3229
  store i64 %1, i64* %13, align 8
  call void @llvm.dbg.declare(metadata i64* %13, metadata !3230, metadata !DIExpression()), !dbg !3231
  %14 = load i64, i64* %13, align 8, !dbg !3232
  %15 = icmp ne i64 %14, 0, !dbg !3232
  %16 = load i32, i32* @x.65
  %17 = load i32, i32* @y.66
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %45, label %24, !dbg !3234

24:                                               ; preds = %originalBBpart2
  %25 = load i32, i32* @x.65
  %26 = load i32, i32* @y.66
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %24, %originalBB1alteredBB
  %33 = load i8*, i8** %12, align 8, !dbg !3235
  %34 = icmp ne i8* %33, null, !dbg !3235
  %35 = load i32, i32* @x.65
  %36 = load i32, i32* @y.66
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %34, label %43, label %45, !dbg !3236

43:                                               ; preds = %originalBBpart24
  %44 = load i8*, i8** %12, align 8, !dbg !3237
  call void @free(i8* %44) #10, !dbg !3239
  store i8* null, i8** %11, align 8, !dbg !3240
  br label %89, !dbg !3240

45:                                               ; preds = %originalBBpart24, %originalBBpart2
  %46 = load i8*, i8** %12, align 8, !dbg !3241
  %47 = load i64, i64* %13, align 8, !dbg !3242
  %48 = call i8* @realloc(i8* %46, i64 %47) #10, !dbg !3243
  store i8* %48, i8** %12, align 8, !dbg !3244
  %49 = load i8*, i8** %12, align 8, !dbg !3245
  %50 = icmp ne i8* %49, null, !dbg !3245
  br i1 %50, label %71, label %51, !dbg !3247

51:                                               ; preds = %45
  %52 = load i64, i64* %13, align 8, !dbg !3248
  %53 = icmp ne i64 %52, 0, !dbg !3248
  br i1 %53, label %54, label %71, !dbg !3249

54:                                               ; preds = %51
  %55 = load i32, i32* @x.65
  %56 = load i32, i32* @y.66
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %54, %originalBB6alteredBB
  call void @xalloc_die() #14, !dbg !3250
  %63 = load i32, i32* @x.65
  %64 = load i32, i32* @y.66
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  unreachable, !dbg !3250

71:                                               ; preds = %51, %45
  %72 = load i32, i32* @x.65
  %73 = load i32, i32* @y.66
  %74 = sub i32 %72, 1
  %75 = mul i32 %72, %74
  %76 = urem i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %77, %78
  br i1 %79, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %71, %originalBB10alteredBB
  %80 = load i8*, i8** %12, align 8, !dbg !3251
  store i8* %80, i8** %11, align 8, !dbg !3252
  %81 = load i32, i32* @x.65
  %82 = load i32, i32* @y.66
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %89, !dbg !3252

89:                                               ; preds = %originalBBpart212, %43
  %90 = load i8*, i8** %11, align 8, !dbg !3253
  ret i8* %90, !dbg !3253

originalBBalteredBB:                              ; preds = %originalBB, %2
  %91 = alloca i8*, align 8
  %92 = alloca i8*, align 8
  %93 = alloca i64, align 8
  store i8* %0, i8** %92, align 8
  call void @llvm.dbg.declare(metadata i8** %92, metadata !3254, metadata !DIExpression()), !dbg !3229
  store i64 %1, i64* %93, align 8
  call void @llvm.dbg.declare(metadata i64* %93, metadata !3257, metadata !DIExpression()), !dbg !3231
  %94 = load i64, i64* %93, align 8, !dbg !3232
  %95 = icmp ne i64 %94, 0, !dbg !3232
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %24
  %96 = load i8*, i8** %12, align 8, !dbg !3235
  %97 = icmp ne i8* %96, null, !dbg !3235
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %54
  call void @xalloc_die() #14, !dbg !3250
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %71
  %98 = load i8*, i8** %12, align 8, !dbg !3251
  store i8* %98, i8** %11, align 8, !dbg !3252
  br label %originalBB10
}

; Function Attrs: nounwind
declare dso_local i8* @realloc(i8*, i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xcharalloc(i64) #4 !dbg !3258 {
  %2 = load i32, i32* @x.67
  %3 = load i32, i32* @y.68
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i64, align 8
  store i64 %0, i64* %10, align 8
  call void @llvm.dbg.declare(metadata i64* %10, metadata !3259, metadata !DIExpression()), !dbg !3260
  %11 = load i64, i64* %10, align 8, !dbg !3261
  %12 = call noalias i8* @xmalloc(i64 %11), !dbg !3261
  %13 = load i32, i32* @x.67
  %14 = load i32, i32* @y.68
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %12, !dbg !3262

originalBBalteredBB:                              ; preds = %originalBB, %1
  %21 = alloca i64, align 8
  store i64 %0, i64* %21, align 8
  call void @llvm.dbg.declare(metadata i64* %21, metadata !3263, metadata !DIExpression()), !dbg !3260
  %22 = load i64, i64* %21, align 8, !dbg !3261
  %23 = call noalias i8* @xmalloc(i64 %22), !dbg !3261
  br label %originalBB
}

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @xalloc_die() #0 !dbg !3266 {
  %1 = load i32, i32* @x.69
  %2 = load i32, i32* @y.70
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = load volatile i32, i32* @exit_failure, align 4, !dbg !3268
  %10 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.111, i64 0, i64 0)) #10, !dbg !3269
  call void (i32, i32, i8*, ...) @error(i32 %9, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.112, i64 0, i64 0), i8* %10), !dbg !3270
  call void @abort() #12, !dbg !3271
  %11 = load i32, i32* @x.69
  %12 = load i32, i32* @y.70
  %13 = sub i32 %11, 1
  %14 = mul i32 %11, %13
  %15 = urem i32 %14, 2
  %16 = icmp eq i32 %15, 0
  %17 = icmp slt i32 %12, 10
  %18 = or i1 %16, %17
  br i1 %18, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  unreachable, !dbg !3271

originalBBalteredBB:                              ; preds = %originalBB, %0
  %19 = load volatile i32, i32* @exit_failure, align 4, !dbg !3268
  %20 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.111, i64 0, i64 0)) #10, !dbg !3269
  call void (i32, i32, i8*, ...) @error(i32 %19, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.112, i64 0, i64 0), i8* %20), !dbg !3270
  call void @abort() #12, !dbg !3271
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @xgetcwd() #4 !dbg !3272 {
  %1 = load i32, i32* @x.71
  %2 = load i32, i32* @y.72
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %9, metadata !3274, metadata !DIExpression()), !dbg !3275
  %10 = call i8* @getcwd(i8* null, i64 0) #10, !dbg !3276
  store i8* %10, i8** %9, align 8, !dbg !3275
  %11 = load i8*, i8** %9, align 8, !dbg !3277
  %12 = icmp ne i8* %11, null, !dbg !3277
  %13 = load i32, i32* @x.71
  %14 = load i32, i32* @y.72
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %58, label %21, !dbg !3279

21:                                               ; preds = %originalBBpart2
  %22 = load i32, i32* @x.71
  %23 = load i32, i32* @y.72
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  %30 = call i32* @__errno_location() #15, !dbg !3280
  %31 = load i32, i32* %30, align 4, !dbg !3280
  %32 = icmp eq i32 %31, 12, !dbg !3281
  %33 = load i32, i32* @x.71
  %34 = load i32, i32* @y.72
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %32, label %41, label %58, !dbg !3282

41:                                               ; preds = %originalBBpart24
  %42 = load i32, i32* @x.71
  %43 = load i32, i32* @y.72
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %41, %originalBB6alteredBB
  call void @xalloc_die() #14, !dbg !3283
  %50 = load i32, i32* @x.71
  %51 = load i32, i32* @y.72
  %52 = sub i32 %50, 1
  %53 = mul i32 %50, %52
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %55, %56
  br i1 %57, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  unreachable, !dbg !3283

58:                                               ; preds = %originalBBpart24, %originalBBpart2
  %59 = load i8*, i8** %9, align 8, !dbg !3284
  ret i8* %59, !dbg !3285

originalBBalteredBB:                              ; preds = %originalBB, %0
  %60 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %60, metadata !3286, metadata !DIExpression()), !dbg !3275
  %61 = call i8* @getcwd(i8* null, i64 0) #10, !dbg !3276
  store i8* %61, i8** %60, align 8, !dbg !3275
  %62 = load i8*, i8** %60, align 8, !dbg !3277
  %63 = icmp ne i8* %62, null, !dbg !3277
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  %64 = call i32* @__errno_location() #15, !dbg !3280
  %65 = load i32, i32* %64, align 4, !dbg !3280
  %66 = icmp eq i32 %65, 12, !dbg !3281
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %41
  call void @xalloc_die() #14, !dbg !3283
  br label %originalBB6
}

; Function Attrs: nounwind
declare dso_local i8* @getcwd(i8*, i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @rpl_mbrtowc(i32*, i8*, i64, %struct.__mbstate_t*) #4 !dbg !3289 {
  %5 = alloca i64, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca %struct.__mbstate_t*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = alloca i8, align 1
  store i32* %0, i32** %6, align 8
  call void @llvm.dbg.declare(metadata i32** %6, metadata !3305, metadata !DIExpression()), !dbg !3306
  store i8* %1, i8** %7, align 8
  call void @llvm.dbg.declare(metadata i8** %7, metadata !3307, metadata !DIExpression()), !dbg !3308
  store i64 %2, i64* %8, align 8
  call void @llvm.dbg.declare(metadata i64* %8, metadata !3309, metadata !DIExpression()), !dbg !3310
  store %struct.__mbstate_t* %3, %struct.__mbstate_t** %9, align 8
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t** %9, metadata !3311, metadata !DIExpression()), !dbg !3312
  call void @llvm.dbg.declare(metadata i64* %10, metadata !3313, metadata !DIExpression()), !dbg !3314
  call void @llvm.dbg.declare(metadata i32* %11, metadata !3315, metadata !DIExpression()), !dbg !3316
  %13 = load i32*, i32** %6, align 8, !dbg !3317
  %14 = icmp ne i32* %13, null, !dbg !3317
  br i1 %14, label %32, label %15, !dbg !3319

15:                                               ; preds = %4
  %16 = load i32, i32* @x.73
  %17 = load i32, i32* @y.74
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %15, %originalBBalteredBB
  store i32* %11, i32** %6, align 8, !dbg !3320
  %24 = load i32, i32* @x.73
  %25 = load i32, i32* @y.74
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %32, !dbg !3321

32:                                               ; preds = %originalBBpart2, %4
  %33 = load i32, i32* @x.73
  %34 = load i32, i32* @y.74
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %32, %originalBB1alteredBB
  %41 = load i32*, i32** %6, align 8, !dbg !3322
  %42 = load i8*, i8** %7, align 8, !dbg !3323
  %43 = load i64, i64* %8, align 8, !dbg !3324
  %44 = load %struct.__mbstate_t*, %struct.__mbstate_t** %9, align 8, !dbg !3325
  %45 = call i64 @mbrtowc(i32* %41, i8* %42, i64 %43, %struct.__mbstate_t* %44) #10, !dbg !3326
  store i64 %45, i64* %10, align 8, !dbg !3327
  %46 = load i64, i64* %10, align 8, !dbg !3328
  %47 = icmp ule i64 -2, %46, !dbg !3330
  %48 = load i32, i32* @x.73
  %49 = load i32, i32* @y.74
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %47, label %56, label %67, !dbg !3331

56:                                               ; preds = %originalBBpart24
  %57 = load i64, i64* %8, align 8, !dbg !3332
  %58 = icmp ne i64 %57, 0, !dbg !3333
  br i1 %58, label %59, label %67, !dbg !3334

59:                                               ; preds = %56
  %60 = call zeroext i1 @hard_locale(i32 0), !dbg !3335
  br i1 %60, label %67, label %61, !dbg !3336

61:                                               ; preds = %59
  call void @llvm.dbg.declare(metadata i8* %12, metadata !3337, metadata !DIExpression()), !dbg !3339
  %62 = load i8*, i8** %7, align 8, !dbg !3340
  %63 = load i8, i8* %62, align 1, !dbg !3341
  store i8 %63, i8* %12, align 1, !dbg !3339
  %64 = load i8, i8* %12, align 1, !dbg !3342
  %65 = zext i8 %64 to i32, !dbg !3342
  %66 = load i32*, i32** %6, align 8, !dbg !3343
  store i32 %65, i32* %66, align 4, !dbg !3344
  store i64 1, i64* %5, align 8, !dbg !3345
  br label %69, !dbg !3345

67:                                               ; preds = %59, %56, %originalBBpart24
  %68 = load i64, i64* %10, align 8, !dbg !3346
  store i64 %68, i64* %5, align 8, !dbg !3347
  br label %69, !dbg !3347

69:                                               ; preds = %67, %61
  %70 = load i64, i64* %5, align 8, !dbg !3348
  ret i64 %70, !dbg !3348

originalBBalteredBB:                              ; preds = %originalBB, %15
  store i32* %11, i32** %6, align 8, !dbg !3320
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %32
  %71 = load i32*, i32** %6, align 8, !dbg !3322
  %72 = load i8*, i8** %7, align 8, !dbg !3323
  %73 = load i64, i64* %8, align 8, !dbg !3324
  %74 = load %struct.__mbstate_t*, %struct.__mbstate_t** %9, align 8, !dbg !3325
  %75 = call i64 @mbrtowc(i32* %71, i8* %72, i64 %73, %struct.__mbstate_t* %74) #10, !dbg !3326
  store i64 %75, i64* %10, align 8, !dbg !3327
  %76 = load i64, i64* %10, align 8, !dbg !3328
  %77 = icmp ule i64 -2, %76, !dbg !3330
  br label %originalBB1
}

; Function Attrs: nounwind
declare dso_local i64 @mbrtowc(i32*, i8*, i64, %struct.__mbstate_t*) #2

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @c_strcasecmp(i8*, i8*) #11 !dbg !3349 {
  %3 = load i32, i32* @x.75
  %4 = load i32, i32* @y.76
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8, align 1
  %17 = alloca i8, align 1
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !3353, metadata !DIExpression()), !dbg !3354
  store i8* %1, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !3355, metadata !DIExpression()), !dbg !3356
  call void @llvm.dbg.declare(metadata i8** %14, metadata !3357, metadata !DIExpression()), !dbg !3358
  %18 = load i8*, i8** %12, align 8, !dbg !3359
  store i8* %18, i8** %14, align 8, !dbg !3358
  call void @llvm.dbg.declare(metadata i8** %15, metadata !3360, metadata !DIExpression()), !dbg !3361
  %19 = load i8*, i8** %13, align 8, !dbg !3362
  store i8* %19, i8** %15, align 8, !dbg !3361
  call void @llvm.dbg.declare(metadata i8* %16, metadata !3363, metadata !DIExpression()), !dbg !3364
  call void @llvm.dbg.declare(metadata i8* %17, metadata !3365, metadata !DIExpression()), !dbg !3366
  %20 = load i8*, i8** %14, align 8, !dbg !3367
  %21 = load i8*, i8** %15, align 8, !dbg !3369
  %22 = icmp eq i8* %20, %21, !dbg !3370
  %23 = load i32, i32* @x.75
  %24 = load i32, i32* @y.76
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %31, label %32, !dbg !3371

31:                                               ; preds = %originalBBpart2
  store i32 0, i32* %11, align 4, !dbg !3372
  br label %129, !dbg !3372

32:                                               ; preds = %originalBBpart2
  br label %33, !dbg !3373

33:                                               ; preds = %originalBBpart212, %32
  %34 = load i32, i32* @x.75
  %35 = load i32, i32* @y.76
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %33, %originalBB1alteredBB
  %42 = load i8*, i8** %14, align 8, !dbg !3374
  %43 = load i8, i8* %42, align 1, !dbg !3376
  %44 = zext i8 %43 to i32, !dbg !3376
  %45 = call i32 @c_tolower(i32 %44), !dbg !3377
  %46 = trunc i32 %45 to i8, !dbg !3377
  store i8 %46, i8* %16, align 1, !dbg !3378
  %47 = load i8*, i8** %15, align 8, !dbg !3379
  %48 = load i8, i8* %47, align 1, !dbg !3380
  %49 = zext i8 %48 to i32, !dbg !3380
  %50 = call i32 @c_tolower(i32 %49), !dbg !3381
  %51 = trunc i32 %50 to i8, !dbg !3381
  store i8 %51, i8* %17, align 1, !dbg !3382
  %52 = load i8, i8* %16, align 1, !dbg !3383
  %53 = zext i8 %52 to i32, !dbg !3383
  %54 = icmp eq i32 %53, 0, !dbg !3385
  %55 = load i32, i32* @x.75
  %56 = load i32, i32* @y.76
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %54, label %63, label %64, !dbg !3386

63:                                               ; preds = %originalBBpart24
  br label %107, !dbg !3387

64:                                               ; preds = %originalBBpart24
  %65 = load i32, i32* @x.75
  %66 = load i32, i32* @y.76
  %67 = sub i32 %65, 1
  %68 = mul i32 %65, %67
  %69 = urem i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %70, %71
  br i1 %72, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %64, %originalBB6alteredBB
  %73 = load i8*, i8** %14, align 8, !dbg !3388
  %74 = getelementptr inbounds i8, i8* %73, i32 1, !dbg !3388
  store i8* %74, i8** %14, align 8, !dbg !3388
  %75 = load i8*, i8** %15, align 8, !dbg !3389
  %76 = getelementptr inbounds i8, i8* %75, i32 1, !dbg !3389
  store i8* %76, i8** %15, align 8, !dbg !3389
  %77 = load i32, i32* @x.75
  %78 = load i32, i32* @y.76
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %85, !dbg !3390

85:                                               ; preds = %originalBBpart28
  %86 = load i32, i32* @x.75
  %87 = load i32, i32* @y.76
  %88 = sub i32 %86, 1
  %89 = mul i32 %86, %88
  %90 = urem i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %91, %92
  br i1 %93, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %85, %originalBB10alteredBB
  %94 = load i8, i8* %16, align 1, !dbg !3391
  %95 = zext i8 %94 to i32, !dbg !3391
  %96 = load i8, i8* %17, align 1, !dbg !3392
  %97 = zext i8 %96 to i32, !dbg !3392
  %98 = icmp eq i32 %95, %97, !dbg !3393
  %99 = load i32, i32* @x.75
  %100 = load i32, i32* @y.76
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %98, label %33, label %107, !dbg !3390, !llvm.loop !3394

107:                                              ; preds = %originalBBpart212, %63
  %108 = load i32, i32* @x.75
  %109 = load i32, i32* @y.76
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %107, %originalBB14alteredBB
  %116 = load i8, i8* %16, align 1, !dbg !3396
  %117 = zext i8 %116 to i32, !dbg !3396
  %118 = load i8, i8* %17, align 1, !dbg !3398
  %119 = zext i8 %118 to i32, !dbg !3398
  %120 = sub nsw i32 %117, %119, !dbg !3399
  store i32 %120, i32* %11, align 4, !dbg !3400
  %121 = load i32, i32* @x.75
  %122 = load i32, i32* @y.76
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %129, !dbg !3400

129:                                              ; preds = %originalBBpart216, %31
  %130 = load i32, i32* %11, align 4, !dbg !3401
  ret i32 %130, !dbg !3401

originalBBalteredBB:                              ; preds = %originalBB, %2
  %131 = alloca i32, align 4
  %132 = alloca i8*, align 8
  %133 = alloca i8*, align 8
  %134 = alloca i8*, align 8
  %135 = alloca i8*, align 8
  %136 = alloca i8, align 1
  %137 = alloca i8, align 1
  store i8* %0, i8** %132, align 8
  call void @llvm.dbg.declare(metadata i8** %132, metadata !3402, metadata !DIExpression()), !dbg !3354
  store i8* %1, i8** %133, align 8
  call void @llvm.dbg.declare(metadata i8** %133, metadata !3405, metadata !DIExpression()), !dbg !3356
  call void @llvm.dbg.declare(metadata i8** %134, metadata !3406, metadata !DIExpression()), !dbg !3358
  %138 = load i8*, i8** %132, align 8, !dbg !3359
  store i8* %138, i8** %134, align 8, !dbg !3358
  call void @llvm.dbg.declare(metadata i8** %135, metadata !3407, metadata !DIExpression()), !dbg !3361
  %139 = load i8*, i8** %133, align 8, !dbg !3362
  store i8* %139, i8** %135, align 8, !dbg !3361
  call void @llvm.dbg.declare(metadata i8* %136, metadata !3408, metadata !DIExpression()), !dbg !3364
  call void @llvm.dbg.declare(metadata i8* %137, metadata !3409, metadata !DIExpression()), !dbg !3366
  %140 = load i8*, i8** %134, align 8, !dbg !3367
  %141 = load i8*, i8** %135, align 8, !dbg !3369
  %142 = icmp eq i8* %140, %141, !dbg !3370
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %33
  %143 = load i8*, i8** %14, align 8, !dbg !3374
  %144 = load i8, i8* %143, align 1, !dbg !3376
  %145 = zext i8 %144 to i32, !dbg !3376
  %146 = call i32 @c_tolower(i32 %145), !dbg !3377
  %147 = trunc i32 %146 to i8, !dbg !3377
  store i8 %147, i8* %16, align 1, !dbg !3378
  %148 = load i8*, i8** %15, align 8, !dbg !3379
  %149 = load i8, i8* %148, align 1, !dbg !3380
  %150 = zext i8 %149 to i32, !dbg !3380
  %151 = call i32 @c_tolower(i32 %150), !dbg !3381
  %152 = trunc i32 %151 to i8, !dbg !3381
  store i8 %152, i8* %17, align 1, !dbg !3382
  %153 = load i8, i8* %16, align 1, !dbg !3383
  %154 = zext i8 %153 to i32, !dbg !3383
  %155 = icmp eq i32 %154, 0, !dbg !3385
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %64
  %156 = load i8*, i8** %14, align 8, !dbg !3388
  %157 = getelementptr inbounds i8, i8* %156, i32 1, !dbg !3388
  store i8* %157, i8** %14, align 8, !dbg !3388
  %158 = load i8*, i8** %15, align 8, !dbg !3389
  %159 = getelementptr inbounds i8, i8* %158, i32 1, !dbg !3389
  store i8* %159, i8** %15, align 8, !dbg !3389
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %85
  %160 = load i8, i8* %16, align 1, !dbg !3391
  %161 = zext i8 %160 to i32, !dbg !3391
  %162 = load i8, i8* %17, align 1, !dbg !3392
  %163 = zext i8 %162 to i32, !dbg !3392
  %164 = icmp eq i32 %161, %163, !dbg !3393
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %107
  %165 = load i8, i8* %16, align 1, !dbg !3396
  %166 = zext i8 %165 to i32, !dbg !3396
  %167 = load i8, i8* %17, align 1, !dbg !3398
  %168 = zext i8 %167 to i32, !dbg !3398
  %_ = sub i32 %166, %168
  %gen = mul i32 %_, %168
  %169 = sub nsw i32 %166, %168, !dbg !3399
  store i32 %169, i32* %11, align 4, !dbg !3400
  br label %originalBB14
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @close_stream(%struct._IO_FILE*) #4 !dbg !3410 {
  %2 = load i32, i32* @x.77
  %3 = load i32, i32* @y.78
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca %struct._IO_FILE*, align 8
  %12 = alloca i8, align 1
  %13 = alloca i8, align 1
  %14 = alloca i8, align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %11, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %11, metadata !3448, metadata !DIExpression()), !dbg !3449
  call void @llvm.dbg.declare(metadata i8* %12, metadata !3450, metadata !DIExpression()), !dbg !3452
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3453
  %16 = call i64 @__fpending(%struct._IO_FILE* %15) #10, !dbg !3454
  %17 = icmp ne i64 %16, 0, !dbg !3455
  %18 = zext i1 %17 to i8, !dbg !3452
  store i8 %18, i8* %12, align 1, !dbg !3452
  call void @llvm.dbg.declare(metadata i8* %13, metadata !3456, metadata !DIExpression()), !dbg !3457
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3458
  %20 = call i32 @ferror_unlocked(%struct._IO_FILE* %19) #10, !dbg !3458
  %21 = icmp ne i32 %20, 0, !dbg !3459
  %22 = zext i1 %21 to i8, !dbg !3457
  store i8 %22, i8* %13, align 1, !dbg !3457
  call void @llvm.dbg.declare(metadata i8* %14, metadata !3460, metadata !DIExpression()), !dbg !3461
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3462
  %24 = call i32 @rpl_fclose(%struct._IO_FILE* %23), !dbg !3463
  %25 = icmp ne i32 %24, 0, !dbg !3464
  %26 = zext i1 %25 to i8, !dbg !3461
  store i8 %26, i8* %14, align 1, !dbg !3461
  %27 = load i8, i8* %13, align 1, !dbg !3465
  %28 = trunc i8 %27 to i1, !dbg !3465
  %29 = load i32, i32* @x.77
  %30 = load i32, i32* @y.78
  %31 = sub i32 %29, 1
  %32 = mul i32 %29, %31
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %34, %35
  br i1 %36, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %28, label %79, label %37, !dbg !3467

37:                                               ; preds = %originalBBpart2
  %38 = load i8, i8* %14, align 1, !dbg !3468
  %39 = trunc i8 %38 to i1, !dbg !3468
  br i1 %39, label %40, label %101, !dbg !3469

40:                                               ; preds = %37
  %41 = load i32, i32* @x.77
  %42 = load i32, i32* @y.78
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %40, %originalBB1alteredBB
  %49 = load i8, i8* %12, align 1, !dbg !3470
  %50 = trunc i8 %49 to i1, !dbg !3470
  %51 = load i32, i32* @x.77
  %52 = load i32, i32* @y.78
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %50, label %79, label %59, !dbg !3471

59:                                               ; preds = %originalBBpart24
  %60 = load i32, i32* @x.77
  %61 = load i32, i32* @y.78
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %59, %originalBB6alteredBB
  %68 = call i32* @__errno_location() #15, !dbg !3472
  %69 = load i32, i32* %68, align 4, !dbg !3472
  %70 = icmp ne i32 %69, 9, !dbg !3473
  %71 = load i32, i32* @x.77
  %72 = load i32, i32* @y.78
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %70, label %79, label %101, !dbg !3474

79:                                               ; preds = %originalBBpart28, %originalBBpart24, %originalBBpart2
  %80 = load i8, i8* %14, align 1, !dbg !3475
  %81 = trunc i8 %80 to i1, !dbg !3475
  br i1 %81, label %84, label %82, !dbg !3478

82:                                               ; preds = %79
  %83 = call i32* @__errno_location() #15, !dbg !3479
  store i32 0, i32* %83, align 4, !dbg !3480
  br label %84, !dbg !3479

84:                                               ; preds = %82, %79
  %85 = load i32, i32* @x.77
  %86 = load i32, i32* @y.78
  %87 = sub i32 %85, 1
  %88 = mul i32 %85, %87
  %89 = urem i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %90, %91
  br i1 %92, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %84, %originalBB10alteredBB
  store i32 -1, i32* %10, align 4, !dbg !3481
  %93 = load i32, i32* @x.77
  %94 = load i32, i32* @y.78
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %102, !dbg !3481

101:                                              ; preds = %originalBBpart28, %37
  store i32 0, i32* %10, align 4, !dbg !3482
  br label %102, !dbg !3482

102:                                              ; preds = %101, %originalBBpart212
  %103 = load i32, i32* @x.77
  %104 = load i32, i32* @y.78
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %102, %originalBB14alteredBB
  %111 = load i32, i32* %10, align 4, !dbg !3483
  %112 = load i32, i32* @x.77
  %113 = load i32, i32* @y.78
  %114 = sub i32 %112, 1
  %115 = mul i32 %112, %114
  %116 = urem i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %113, 10
  %119 = or i1 %117, %118
  br i1 %119, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  ret i32 %111, !dbg !3483

originalBBalteredBB:                              ; preds = %originalBB, %1
  %120 = alloca i32, align 4
  %121 = alloca %struct._IO_FILE*, align 8
  %122 = alloca i8, align 1
  %123 = alloca i8, align 1
  %124 = alloca i8, align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %121, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %121, metadata !3484, metadata !DIExpression()), !dbg !3449
  call void @llvm.dbg.declare(metadata i8* %122, metadata !3523, metadata !DIExpression()), !dbg !3452
  %125 = load %struct._IO_FILE*, %struct._IO_FILE** %121, align 8, !dbg !3453
  %126 = call i64 @__fpending(%struct._IO_FILE* %125) #10, !dbg !3454
  %127 = icmp ne i64 %126, 0, !dbg !3455
  %128 = zext i1 %127 to i8, !dbg !3452
  store i8 %128, i8* %122, align 1, !dbg !3452
  call void @llvm.dbg.declare(metadata i8* %123, metadata !3524, metadata !DIExpression()), !dbg !3457
  %129 = load %struct._IO_FILE*, %struct._IO_FILE** %121, align 8, !dbg !3458
  %130 = call i32 @ferror_unlocked(%struct._IO_FILE* %129) #10, !dbg !3458
  %131 = icmp ne i32 %130, 0, !dbg !3459
  %132 = zext i1 %131 to i8, !dbg !3457
  store i8 %132, i8* %123, align 1, !dbg !3457
  call void @llvm.dbg.declare(metadata i8* %124, metadata !3525, metadata !DIExpression()), !dbg !3461
  %133 = load %struct._IO_FILE*, %struct._IO_FILE** %121, align 8, !dbg !3462
  %134 = call i32 @rpl_fclose(%struct._IO_FILE* %133), !dbg !3463
  %135 = icmp ne i32 %134, 0, !dbg !3464
  %136 = zext i1 %135 to i8, !dbg !3461
  store i8 %136, i8* %124, align 1, !dbg !3461
  %137 = load i8, i8* %123, align 1, !dbg !3465
  %138 = trunc i8 %137 to i1, !dbg !3465
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %40
  %139 = load i8, i8* %12, align 1, !dbg !3470
  %140 = trunc i8 %139 to i1, !dbg !3470
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %59
  %141 = call i32* @__errno_location() #15, !dbg !3472
  %142 = load i32, i32* %141, align 4, !dbg !3472
  %143 = icmp ne i32 %142, 9, !dbg !3473
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %84
  store i32 -1, i32* %10, align 4, !dbg !3481
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %102
  %144 = load i32, i32* %10, align 4, !dbg !3483
  br label %originalBB14
}

; Function Attrs: nounwind
declare dso_local i64 @__fpending(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare dso_local i32 @ferror_unlocked(%struct._IO_FILE*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @hard_locale(i32) #4 !dbg !3526 {
  %2 = alloca i1, align 1
  %3 = alloca i32, align 4
  %4 = alloca [257 x i8], align 16
  store i32 %0, i32* %3, align 4
  call void @llvm.dbg.declare(metadata i32* %3, metadata !3530, metadata !DIExpression()), !dbg !3531
  call void @llvm.dbg.declare(metadata [257 x i8]* %4, metadata !3532, metadata !DIExpression()), !dbg !3536
  %5 = load i32, i32* %3, align 4, !dbg !3537
  %6 = getelementptr inbounds [257 x i8], [257 x i8]* %4, i64 0, i64 0, !dbg !3539
  %7 = call i32 @setlocale_null_r(i32 %5, i8* %6, i64 257), !dbg !3540
  %8 = icmp ne i32 %7, 0, !dbg !3540
  br i1 %8, label %9, label %26, !dbg !3541

9:                                                ; preds = %1
  %10 = load i32, i32* @x.79
  %11 = load i32, i32* @y.80
  %12 = sub i32 %10, 1
  %13 = mul i32 %10, %12
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  %16 = icmp slt i32 %11, 10
  %17 = or i1 %15, %16
  br i1 %17, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %9, %originalBBalteredBB
  store i1 false, i1* %2, align 1, !dbg !3542
  %18 = load i32, i32* @x.79
  %19 = load i32, i32* @y.80
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %69, !dbg !3542

26:                                               ; preds = %1
  %27 = getelementptr inbounds [257 x i8], [257 x i8]* %4, i64 0, i64 0, !dbg !3543
  %28 = call i32 @strcmp(i8* %27, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.123, i64 0, i64 0)) #13, !dbg !3544
  %29 = icmp eq i32 %28, 0, !dbg !3545
  br i1 %29, label %50, label %30, !dbg !3546

30:                                               ; preds = %26
  %31 = load i32, i32* @x.79
  %32 = load i32, i32* @y.80
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %30, %originalBB1alteredBB
  %39 = getelementptr inbounds [257 x i8], [257 x i8]* %4, i64 0, i64 0, !dbg !3547
  %40 = call i32 @strcmp(i8* %39, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.124, i64 0, i64 0)) #13, !dbg !3548
  %41 = icmp eq i32 %40, 0, !dbg !3549
  %42 = load i32, i32* @x.79
  %43 = load i32, i32* @y.80
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %50, !dbg !3546

50:                                               ; preds = %originalBBpart24, %26
  %51 = phi i1 [ true, %26 ], [ %41, %originalBBpart24 ]
  %52 = load i32, i32* @x.79
  %53 = load i32, i32* @y.80
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %50, %originalBB6alteredBB
  %60 = xor i1 %51, true, !dbg !3550
  store i1 %60, i1* %2, align 1, !dbg !3551
  %61 = load i32, i32* @x.79
  %62 = load i32, i32* @y.80
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBBpart215, label %originalBB6alteredBB

originalBBpart215:                                ; preds = %originalBB6
  br label %69, !dbg !3551

69:                                               ; preds = %originalBBpart215, %originalBBpart2
  %70 = load i1, i1* %2, align 1, !dbg !3552
  ret i1 %70, !dbg !3552

originalBBalteredBB:                              ; preds = %originalBB, %9
  store i1 false, i1* %2, align 1, !dbg !3542
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %30
  %71 = getelementptr inbounds [257 x i8], [257 x i8]* %4, i64 0, i64 0, !dbg !3547
  %72 = call i32 @strcmp(i8* %71, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.124, i64 0, i64 0)) #13, !dbg !3548
  %73 = icmp eq i32 %72, 0, !dbg !3549
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %50
  %_ = sub i1 false, %51
  %gen = add i1 %_, true
  %_7 = shl i1 %51, true
  %_8 = sub i1 %51, true
  %gen9 = mul i1 %_8, true
  %_10 = sub i1 %51, true
  %gen11 = mul i1 %_10, true
  %_12 = shl i1 %51, true
  %_13 = shl i1 %51, true
  %74 = xor i1 %51, true, !dbg !3550
  store i1 %74, i1* %2, align 1, !dbg !3551
  br label %originalBB6
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @locale_charset() #4 !dbg !3553 {
  %1 = load i32, i32* @x.81
  %2 = load i32, i32* @y.82
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %9, metadata !3557, metadata !DIExpression()), !dbg !3558
  %10 = call i8* @nl_langinfo(i32 14) #10, !dbg !3559
  store i8* %10, i8** %9, align 8, !dbg !3560
  %11 = load i8*, i8** %9, align 8, !dbg !3561
  %12 = icmp eq i8* %11, null, !dbg !3563
  %13 = load i32, i32* @x.81
  %14 = load i32, i32* @y.82
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %21, label %22, !dbg !3564

21:                                               ; preds = %originalBBpart2
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.127, i64 0, i64 0), i8** %9, align 8, !dbg !3565
  br label %22, !dbg !3566

22:                                               ; preds = %21, %originalBBpart2
  %23 = load i32, i32* @x.81
  %24 = load i32, i32* @y.82
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %22, %originalBB1alteredBB
  %31 = load i8*, i8** %9, align 8, !dbg !3567
  %32 = getelementptr inbounds i8, i8* %31, i64 0, !dbg !3567
  %33 = load i8, i8* %32, align 1, !dbg !3567
  %34 = sext i8 %33 to i32, !dbg !3567
  %35 = icmp eq i32 %34, 0, !dbg !3571
  %36 = load i32, i32* @x.81
  %37 = load i32, i32* @y.82
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %35, label %44, label %45, !dbg !3572

44:                                               ; preds = %originalBBpart24
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.128, i64 0, i64 0), i8** %9, align 8, !dbg !3573
  br label %45, !dbg !3574

45:                                               ; preds = %44, %originalBBpart24
  %46 = load i32, i32* @x.81
  %47 = load i32, i32* @y.82
  %48 = sub i32 %46, 1
  %49 = mul i32 %46, %48
  %50 = urem i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %51, %52
  br i1 %53, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %45, %originalBB6alteredBB
  %54 = load i8*, i8** %9, align 8, !dbg !3575
  %55 = load i32, i32* @x.81
  %56 = load i32, i32* @y.82
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  ret i8* %54, !dbg !3576

originalBBalteredBB:                              ; preds = %originalBB, %0
  %63 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %63, metadata !3577, metadata !DIExpression()), !dbg !3558
  %64 = call i8* @nl_langinfo(i32 14) #10, !dbg !3559
  store i8* %64, i8** %63, align 8, !dbg !3560
  %65 = load i8*, i8** %63, align 8, !dbg !3561
  %66 = icmp eq i8* %65, null, !dbg !3563
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %22
  %67 = load i8*, i8** %9, align 8, !dbg !3567
  %68 = getelementptr inbounds i8, i8* %67, i64 0, !dbg !3567
  %69 = load i8, i8* %68, align 1, !dbg !3567
  %70 = sext i8 %69 to i32, !dbg !3567
  %71 = icmp eq i32 %70, 0, !dbg !3571
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %45
  %72 = load i8*, i8** %9, align 8, !dbg !3575
  br label %originalBB6
}

; Function Attrs: nounwind
declare dso_local i8* @nl_langinfo(i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @setlocale_null_r(i32, i8* nonnull, i64) #4 !dbg !3580 {
  %4 = load i32, i32* @x.83
  %5 = load i32, i32* @y.84
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  store i32 %0, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !3584, metadata !DIExpression()), !dbg !3585
  store i8* %1, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !3586, metadata !DIExpression()), !dbg !3587
  store i64 %2, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !3588, metadata !DIExpression()), !dbg !3589
  %15 = load i32, i32* %12, align 4, !dbg !3590
  %16 = load i8*, i8** %13, align 8, !dbg !3591
  %17 = load i64, i64* %14, align 8, !dbg !3592
  %18 = call i32 @setlocale_null_unlocked(i32 %15, i8* %16, i64 %17), !dbg !3593
  %19 = load i32, i32* @x.83
  %20 = load i32, i32* @y.84
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i32 %18, !dbg !3594

originalBBalteredBB:                              ; preds = %originalBB, %3
  %27 = alloca i32, align 4
  %28 = alloca i8*, align 8
  %29 = alloca i64, align 8
  store i32 %0, i32* %27, align 4
  call void @llvm.dbg.declare(metadata i32* %27, metadata !3595, metadata !DIExpression()), !dbg !3585
  store i8* %1, i8** %28, align 8
  call void @llvm.dbg.declare(metadata i8** %28, metadata !3598, metadata !DIExpression()), !dbg !3587
  store i64 %2, i64* %29, align 8
  call void @llvm.dbg.declare(metadata i64* %29, metadata !3599, metadata !DIExpression()), !dbg !3589
  %30 = load i32, i32* %27, align 4, !dbg !3590
  %31 = load i8*, i8** %28, align 8, !dbg !3591
  %32 = load i64, i64* %29, align 8, !dbg !3592
  %33 = call i32 @setlocale_null_unlocked(i32 %30, i8* %31, i64 %32), !dbg !3593
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @setlocale_null_unlocked(i32, i8*, i64) #4 !dbg !3600 {
  %4 = load i32, i32* @x.85
  %5 = load i32, i32* @y.86
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i64, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i64, align 8
  store i32 %0, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !3601, metadata !DIExpression()), !dbg !3602
  store i8* %1, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !3603, metadata !DIExpression()), !dbg !3604
  store i64 %2, i64* %15, align 8
  %18 = mul i32 %0, -3
  %19 = add i32 %18, 4
  %20 = trunc i64 %2 to i32
  %21 = mul i32 %20, -2
  %22 = add i32 %21, 1
  %23 = mul i32 %19, %19
  %24 = mul i32 %22, %22
  %25 = add i32 %23, %24
  %26 = mul i32 %19, %22
  %27 = mul i32 %26, 2
  %28 = sub i32 %25, %27
  %29 = mul i32 %28, -3
  %30 = add i32 %29, -1
  %31 = icmp eq i32 %30, 2
  %32 = load i32, i32* @x.85
  %33 = load i32, i32* @y.86
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %31, label %40, label %57

40:                                               ; preds = %originalBBpart2
  %41 = load i32, i32* @x.85
  %42 = load i32, i32* @y.86
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBB84, label %originalBB84alteredBB

originalBB84:                                     ; preds = %40, %originalBB84alteredBB
  %49 = load i32, i32* @x.85
  %50 = load i32, i32* @y.86
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBBpart286, label %originalBB84alteredBB

originalBBpart286:                                ; preds = %originalBB84
  ret i32 0

57:                                               ; preds = %originalBBpart2
  call void @llvm.dbg.declare(metadata i64* %15, metadata !3605, metadata !DIExpression()), !dbg !3606
  call void @llvm.dbg.declare(metadata i8** %16, metadata !3607, metadata !DIExpression()), !dbg !3608
  %58 = load i32, i32* %13, align 4, !dbg !3609
  %59 = call i8* @setlocale_null_androidfix(i32 %58), !dbg !3610
  store i8* %59, i8** %16, align 8, !dbg !3608
  %60 = load i8*, i8** %16, align 8, !dbg !3611
  %61 = icmp eq i8* %60, null, !dbg !3613
  br i1 %61, label %62, label %117, !dbg !3614

62:                                               ; preds = %57
  %63 = load i32, i32* @x.85
  %64 = load i32, i32* @y.86
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBB88, label %originalBB88alteredBB

originalBB88:                                     ; preds = %62, %originalBB88alteredBB
  %71 = load i64, i64* %15, align 8, !dbg !3615
  %72 = icmp ugt i64 %71, 0, !dbg !3618
  %73 = load i32, i32* @x.85
  %74 = load i32, i32* @y.86
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBBpart290, label %originalBB88alteredBB

originalBBpart290:                                ; preds = %originalBB88
  br i1 %72, label %81, label %100, !dbg !3619

81:                                               ; preds = %originalBBpart290
  %82 = load i32, i32* @x.85
  %83 = load i32, i32* @y.86
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBB92, label %originalBB92alteredBB

originalBB92:                                     ; preds = %81, %originalBB92alteredBB
  %90 = load i8*, i8** %14, align 8, !dbg !3620
  %91 = getelementptr inbounds i8, i8* %90, i64 0, !dbg !3620
  store i8 0, i8* %91, align 1, !dbg !3621
  %92 = load i32, i32* @x.85
  %93 = load i32, i32* @y.86
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBBpart294, label %originalBB92alteredBB

originalBBpart294:                                ; preds = %originalBB92
  br label %100, !dbg !3620

100:                                              ; preds = %originalBBpart294, %originalBBpart290
  %101 = load i32, i32* @x.85
  %102 = load i32, i32* @y.86
  %103 = sub i32 %101, 1
  %104 = mul i32 %101, %103
  %105 = urem i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %102, 10
  %108 = or i1 %106, %107
  br i1 %108, label %originalBB96, label %originalBB96alteredBB

originalBB96:                                     ; preds = %100, %originalBB96alteredBB
  store i32 22, i32* %12, align 4, !dbg !3622
  %109 = load i32, i32* @x.85
  %110 = load i32, i32* @y.86
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBBpart298, label %originalBB96alteredBB

originalBBpart298:                                ; preds = %originalBB96
  br label %189, !dbg !3622

117:                                              ; preds = %57
  call void @llvm.dbg.declare(metadata i64* %17, metadata !3623, metadata !DIExpression()), !dbg !3625
  %118 = load i8*, i8** %16, align 8, !dbg !3626
  %119 = call i64 @strlen(i8* %118) #13, !dbg !3627
  store i64 %119, i64* %17, align 8, !dbg !3625
  %120 = load i64, i64* %17, align 8, !dbg !3628
  %121 = load i64, i64* %15, align 8, !dbg !3630
  %122 = icmp ult i64 %120, %121, !dbg !3631
  br i1 %122, label %123, label %128, !dbg !3632

123:                                              ; preds = %117
  %124 = load i8*, i8** %14, align 8, !dbg !3633
  %125 = load i8*, i8** %16, align 8, !dbg !3635
  %126 = load i64, i64* %17, align 8, !dbg !3636
  %127 = add i64 %126, 1, !dbg !3637
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %124, i8* align 1 %125, i64 %127, i1 false), !dbg !3638
  store i32 0, i32* %12, align 4, !dbg !3639
  br label %189, !dbg !3639

128:                                              ; preds = %117
  %129 = load i32, i32* @x.85
  %130 = load i32, i32* @y.86
  %131 = sub i32 %129, 1
  %132 = mul i32 %129, %131
  %133 = urem i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %130, 10
  %136 = or i1 %134, %135
  br i1 %136, label %originalBB100, label %originalBB100alteredBB

originalBB100:                                    ; preds = %128, %originalBB100alteredBB
  %137 = load i64, i64* %15, align 8, !dbg !3640
  %138 = icmp ugt i64 %137, 0, !dbg !3643
  %139 = load i32, i32* @x.85
  %140 = load i32, i32* @y.86
  %141 = sub i32 %139, 1
  %142 = mul i32 %139, %141
  %143 = urem i32 %142, 2
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %144, %145
  br i1 %146, label %originalBBpart2102, label %originalBB100alteredBB

originalBBpart2102:                               ; preds = %originalBB100
  br i1 %138, label %147, label %172, !dbg !3644

147:                                              ; preds = %originalBBpart2102
  %148 = load i32, i32* @x.85
  %149 = load i32, i32* @y.86
  %150 = sub i32 %148, 1
  %151 = mul i32 %148, %150
  %152 = urem i32 %151, 2
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %153, %154
  br i1 %155, label %originalBB104, label %originalBB104alteredBB

originalBB104:                                    ; preds = %147, %originalBB104alteredBB
  %156 = load i8*, i8** %14, align 8, !dbg !3645
  %157 = load i8*, i8** %16, align 8, !dbg !3647
  %158 = load i64, i64* %15, align 8, !dbg !3648
  %159 = sub i64 %158, 1, !dbg !3649
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %156, i8* align 1 %157, i64 %159, i1 false), !dbg !3650
  %160 = load i8*, i8** %14, align 8, !dbg !3651
  %161 = load i64, i64* %15, align 8, !dbg !3652
  %162 = sub i64 %161, 1, !dbg !3653
  %163 = getelementptr inbounds i8, i8* %160, i64 %162, !dbg !3651
  store i8 0, i8* %163, align 1, !dbg !3654
  %164 = load i32, i32* @x.85
  %165 = load i32, i32* @y.86
  %166 = sub i32 %164, 1
  %167 = mul i32 %164, %166
  %168 = urem i32 %167, 2
  %169 = icmp eq i32 %168, 0
  %170 = icmp slt i32 %165, 10
  %171 = or i1 %169, %170
  br i1 %171, label %originalBBpart2120, label %originalBB104alteredBB

originalBBpart2120:                               ; preds = %originalBB104
  br label %172, !dbg !3655

172:                                              ; preds = %originalBBpart2120, %originalBBpart2102
  %173 = load i32, i32* @x.85
  %174 = load i32, i32* @y.86
  %175 = sub i32 %173, 1
  %176 = mul i32 %173, %175
  %177 = urem i32 %176, 2
  %178 = icmp eq i32 %177, 0
  %179 = icmp slt i32 %174, 10
  %180 = or i1 %178, %179
  br i1 %180, label %originalBB122, label %originalBB122alteredBB

originalBB122:                                    ; preds = %172, %originalBB122alteredBB
  store i32 34, i32* %12, align 4, !dbg !3656
  %181 = load i32, i32* @x.85
  %182 = load i32, i32* @y.86
  %183 = sub i32 %181, 1
  %184 = mul i32 %181, %183
  %185 = urem i32 %184, 2
  %186 = icmp eq i32 %185, 0
  %187 = icmp slt i32 %182, 10
  %188 = or i1 %186, %187
  br i1 %188, label %originalBBpart2124, label %originalBB122alteredBB

originalBBpart2124:                               ; preds = %originalBB122
  br label %189, !dbg !3656

189:                                              ; preds = %originalBBpart2124, %123, %originalBBpart298
  %190 = load i32, i32* %12, align 4, !dbg !3657
  ret i32 %190, !dbg !3657

originalBBalteredBB:                              ; preds = %originalBB, %3
  %191 = alloca i32, align 4
  %192 = alloca i32, align 4
  %193 = alloca i8*, align 8
  %194 = alloca i64, align 8
  %195 = alloca i8*, align 8
  %196 = alloca i64, align 8
  store i32 %0, i32* %192, align 4
  call void @llvm.dbg.declare(metadata i32* %192, metadata !3658, metadata !DIExpression()), !dbg !3602
  store i8* %1, i8** %193, align 8
  call void @llvm.dbg.declare(metadata i8** %193, metadata !3661, metadata !DIExpression()), !dbg !3604
  store i64 %2, i64* %194, align 8
  %_ = sub i32 0, %0
  %gen = add i32 %_, -3
  %_1 = sub i32 0, %0
  %gen2 = add i32 %_1, -3
  %_3 = sub i32 0, %0
  %gen4 = add i32 %_3, -3
  %_5 = shl i32 %0, -3
  %_6 = sub i32 0, %0
  %gen7 = add i32 %_6, -3
  %197 = mul i32 %0, -3
  %_8 = sub i32 0, %197
  %gen9 = add i32 %_8, 4
  %198 = add i32 %197, 4
  %199 = trunc i64 %2 to i32
  %_10 = shl i32 %199, -2
  %_11 = shl i32 %199, -2
  %_12 = sub i32 0, %199
  %gen13 = add i32 %_12, -2
  %_14 = shl i32 %199, -2
  %200 = mul i32 %199, -2
  %_15 = sub i32 0, %200
  %gen16 = add i32 %_15, 1
  %_17 = shl i32 %200, 1
  %_18 = sub i32 0, %200
  %gen19 = add i32 %_18, 1
  %_20 = sub i32 0, %200
  %gen21 = add i32 %_20, 1
  %_22 = sub i32 %200, 1
  %gen23 = mul i32 %_22, 1
  %201 = add i32 %200, 1
  %_24 = sub i32 0, %198
  %gen25 = add i32 %_24, %198
  %_26 = sub i32 %198, %198
  %gen27 = mul i32 %_26, %198
  %202 = mul i32 %198, %198
  %_28 = sub i32 %201, %201
  %gen29 = mul i32 %_28, %201
  %_30 = sub i32 %201, %201
  %gen31 = mul i32 %_30, %201
  %_32 = sub i32 %201, %201
  %gen33 = mul i32 %_32, %201
  %_34 = shl i32 %201, %201
  %_35 = sub i32 %201, %201
  %gen36 = mul i32 %_35, %201
  %203 = mul i32 %201, %201
  %204 = add i32 %202, %203
  %_37 = sub i32 %198, %201
  %gen38 = mul i32 %_37, %201
  %205 = mul i32 %198, %201
  %_39 = sub i32 %205, 2
  %gen40 = mul i32 %_39, 2
  %_41 = shl i32 %205, 2
  %_42 = sub i32 %205, 2
  %gen43 = mul i32 %_42, 2
  %_44 = sub i32 %205, 2
  %gen45 = mul i32 %_44, 2
  %_46 = shl i32 %205, 2
  %206 = mul i32 %205, 2
  %_47 = sub i32 0, %204
  %gen48 = add i32 %_47, %206
  %_49 = sub i32 %204, %206
  %gen50 = mul i32 %_49, %206
  %_51 = sub i32 %204, %206
  %gen52 = mul i32 %_51, %206
  %_53 = sub i32 0, %204
  %gen54 = add i32 %_53, %206
  %_55 = sub i32 %204, %206
  %gen56 = mul i32 %_55, %206
  %_57 = sub i32 0, %204
  %gen58 = add i32 %_57, %206
  %_59 = shl i32 %204, %206
  %_60 = shl i32 %204, %206
  %_61 = shl i32 %204, %206
  %_62 = sub i32 %204, %206
  %gen63 = mul i32 %_62, %206
  %207 = sub i32 %204, %206
  %_64 = sub i32 %207, -3
  %gen65 = mul i32 %_64, -3
  %_66 = sub i32 0, %207
  %gen67 = add i32 %_66, -3
  %_68 = sub i32 0, %207
  %gen69 = add i32 %_68, -3
  %_70 = shl i32 %207, -3
  %_71 = sub i32 %207, -3
  %gen72 = mul i32 %_71, -3
  %_73 = shl i32 %207, -3
  %208 = mul i32 %207, -3
  %_74 = shl i32 %208, -1
  %_75 = shl i32 %208, -1
  %_76 = sub i32 %208, -1
  %gen77 = mul i32 %_76, -1
  %_78 = sub i32 %208, -1
  %gen79 = mul i32 %_78, -1
  %_80 = sub i32 0, %208
  %gen81 = add i32 %_80, -1
  %_82 = sub i32 0, %208
  %gen83 = add i32 %_82, -1
  %209 = add i32 %208, -1
  %210 = icmp eq i32 %209, 2
  br label %originalBB

originalBB84alteredBB:                            ; preds = %originalBB84, %40
  br label %originalBB84

originalBB88alteredBB:                            ; preds = %originalBB88, %62
  %211 = load i64, i64* %15, align 8, !dbg !3615
  %212 = icmp ugt i64 %211, 0, !dbg !3618
  br label %originalBB88

originalBB92alteredBB:                            ; preds = %originalBB92, %81
  %213 = load i8*, i8** %14, align 8, !dbg !3620
  %214 = getelementptr inbounds i8, i8* %213, i64 0, !dbg !3620
  store i8 0, i8* %214, align 1, !dbg !3621
  br label %originalBB92

originalBB96alteredBB:                            ; preds = %originalBB96, %100
  store i32 22, i32* %12, align 4, !dbg !3622
  br label %originalBB96

originalBB100alteredBB:                           ; preds = %originalBB100, %128
  %215 = load i64, i64* %15, align 8, !dbg !3640
  %216 = icmp ugt i64 %215, 0, !dbg !3643
  br label %originalBB100

originalBB104alteredBB:                           ; preds = %originalBB104, %147
  %217 = load i8*, i8** %14, align 8, !dbg !3645
  %218 = load i8*, i8** %16, align 8, !dbg !3647
  %219 = load i64, i64* %15, align 8, !dbg !3648
  %_105 = sub i64 0, %219
  %gen106 = add i64 %_105, 1
  %_107 = sub i64 %219, 1
  %gen108 = mul i64 %_107, 1
  %_109 = sub i64 %219, 1
  %gen110 = mul i64 %_109, 1
  %_111 = sub i64 %219, 1
  %gen112 = mul i64 %_111, 1
  %_113 = sub i64 %219, 1
  %gen114 = mul i64 %_113, 1
  %220 = sub i64 %219, 1, !dbg !3649
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %217, i8* align 1 %218, i64 %220, i1 false), !dbg !3650
  %221 = load i8*, i8** %14, align 8, !dbg !3651
  %222 = load i64, i64* %15, align 8, !dbg !3652
  %_115 = sub i64 0, %222
  %gen116 = add i64 %_115, 1
  %_117 = sub i64 0, %222
  %gen118 = add i64 %_117, 1
  %223 = sub i64 %222, 1, !dbg !3653
  %224 = getelementptr inbounds i8, i8* %221, i64 %223, !dbg !3651
  store i8 0, i8* %224, align 1, !dbg !3654
  br label %originalBB104

originalBB122alteredBB:                           ; preds = %originalBB122, %172
  store i32 34, i32* %12, align 4, !dbg !3656
  br label %originalBB122
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @setlocale_null_androidfix(i32) #4 !dbg !3662 {
  %2 = load i32, i32* @x.87
  %3 = load i32, i32* @y.88
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  store i32 %0, i32* %10, align 4
  call void @llvm.dbg.declare(metadata i32* %10, metadata !3665, metadata !DIExpression()), !dbg !3666
  call void @llvm.dbg.declare(metadata i8** %11, metadata !3667, metadata !DIExpression()), !dbg !3668
  %12 = load i32, i32* %10, align 4, !dbg !3669
  %13 = call i8* @setlocale(i32 %12, i8* null) #10, !dbg !3670
  store i8* %13, i8** %11, align 8, !dbg !3668
  %14 = load i8*, i8** %11, align 8, !dbg !3671
  %15 = load i32, i32* @x.87
  %16 = load i32, i32* @y.88
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %14, !dbg !3672

originalBBalteredBB:                              ; preds = %originalBB, %1
  %23 = alloca i32, align 4
  %24 = alloca i8*, align 8
  store i32 %0, i32* %23, align 4
  call void @llvm.dbg.declare(metadata i32* %23, metadata !3673, metadata !DIExpression()), !dbg !3666
  call void @llvm.dbg.declare(metadata i8** %24, metadata !3676, metadata !DIExpression()), !dbg !3668
  %25 = load i32, i32* %23, align 4, !dbg !3669
  %26 = call i8* @setlocale(i32 %25, i8* null) #10, !dbg !3670
  store i8* %26, i8** %24, align 8, !dbg !3668
  %27 = load i8*, i8** %24, align 8, !dbg !3671
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fclose(%struct._IO_FILE* nonnull) #4 !dbg !3677 {
  %2 = load i32, i32* @x.89
  %3 = load i32, i32* @y.90
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca %struct._IO_FILE*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %11, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %11, metadata !3715, metadata !DIExpression()), !dbg !3716
  call void @llvm.dbg.declare(metadata i32* %12, metadata !3717, metadata !DIExpression()), !dbg !3718
  store i32 0, i32* %12, align 4, !dbg !3718
  call void @llvm.dbg.declare(metadata i32* %13, metadata !3719, metadata !DIExpression()), !dbg !3720
  call void @llvm.dbg.declare(metadata i32* %14, metadata !3721, metadata !DIExpression()), !dbg !3722
  store i32 0, i32* %14, align 4, !dbg !3722
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3723
  %16 = call i32 @fileno(%struct._IO_FILE* %15) #10, !dbg !3724
  store i32 %16, i32* %13, align 4, !dbg !3725
  %17 = add i32 %16, 1
  %18 = mul i32 %17, %17
  %19 = sub i32 %18, %17
  %20 = srem i32 %19, 2
  %21 = add i32 %20, -1
  %22 = load i32, i32* @x.89
  %23 = load i32, i32* @y.90
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %30

30:                                               ; preds = %originalBBpart2
  %31 = load i32, i32* @x.89
  %32 = load i32, i32* @y.90
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBB41, label %originalBB41alteredBB

originalBB41:                                     ; preds = %30, %originalBB41alteredBB
  %collatzVar = alloca i32
  %39 = load i32, i32* @x.89
  %40 = load i32, i32* @y.90
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart243, label %originalBB41alteredBB

originalBBpart243:                                ; preds = %originalBB41
  br label %47

47:                                               ; preds = %originalBBpart243
  %48 = load i32, i32* @inVal0
  %49 = icmp sgt i32 %48, 1
  br i1 %49, label %51, label %50

50:                                               ; preds = %47
  store i32 94, i32* %collatzVar
  br label %51

51:                                               ; preds = %50, %47
  %52 = load i32, i32* @x.89
  %53 = load i32, i32* @y.90
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBB45, label %originalBB45alteredBB

originalBB45:                                     ; preds = %51, %originalBB45alteredBB
  %60 = load i8**, i8*** @inVal1
  %61 = getelementptr inbounds i8*, i8** %60, i64 1
  %62 = load i8*, i8** %61
  %controle = call i32 @controle(i8* %62, i32 -1)
  store i32 %controle, i32* %collatzVar
  %63 = load i32, i32* @x.89
  %64 = load i32, i32* @y.90
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBBpart247, label %originalBB45alteredBB

originalBBpart247:                                ; preds = %originalBB45
  br label %71

71:                                               ; preds = %121, %originalBBpart266, %originalBBpart247
  %72 = load i32, i32* @x.89
  %73 = load i32, i32* @y.90
  %74 = sub i32 %72, 1
  %75 = mul i32 %72, %74
  %76 = urem i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %77, %78
  br i1 %79, label %originalBB49, label %originalBB49alteredBB

originalBB49:                                     ; preds = %71, %originalBB49alteredBB
  %80 = load i32, i32* %collatzVar
  %81 = icmp sgt i32 %80, 1
  %82 = load i32, i32* @x.89
  %83 = load i32, i32* @y.90
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBBpart251, label %originalBB49alteredBB

originalBBpart251:                                ; preds = %originalBB49
  br i1 %81, label %90, label %125

90:                                               ; preds = %originalBBpart251
  %91 = load i32, i32* %collatzVar
  %92 = srem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %94, label %97

94:                                               ; preds = %90
  %95 = load i32, i32* %collatzVar
  %96 = sdiv i32 %95, 2
  store i32 %96, i32* %collatzVar
  br label %101

97:                                               ; preds = %90
  %98 = load i32, i32* %collatzVar
  %99 = mul i32 %98, 3
  %100 = add i32 %99, 1
  store i32 %100, i32* %collatzVar
  br label %101

101:                                              ; preds = %97, %94
  %102 = load i32, i32* @x.89
  %103 = load i32, i32* @y.90
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB53, label %originalBB53alteredBB

originalBB53:                                     ; preds = %101, %originalBB53alteredBB
  %110 = load i32, i32* %collatzVar
  %111 = sub i32 %21, %110
  %112 = icmp sgt i32 %111, -3
  %113 = load i32, i32* @x.89
  %114 = load i32, i32* @y.90
  %115 = sub i32 %113, 1
  %116 = mul i32 %113, %115
  %117 = urem i32 %116, 2
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %118, %119
  br i1 %120, label %originalBBpart266, label %originalBB53alteredBB

originalBBpart266:                                ; preds = %originalBB53
  br i1 %112, label %121, label %71

121:                                              ; preds = %originalBBpart266
  %122 = load i32, i32* %collatzVar
  %123 = add i32 %21, %122
  %124 = icmp slt i32 %123, 1
  br i1 %124, label %126, label %71

125:                                              ; preds = %originalBBpart251
  ret i32 0

126:                                              ; preds = %121
  %127 = load i32, i32* %13, align 4, !dbg !3726
  %128 = icmp slt i32 %127, 0, !dbg !3728
  br i1 %128, label %129, label %132, !dbg !3729

129:                                              ; preds = %126
  %130 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3730
  %131 = call i32 @fclose(%struct._IO_FILE* %130), !dbg !3731
  store i32 %131, i32* %10, align 4, !dbg !3732
  br label %222, !dbg !3732

132:                                              ; preds = %126
  %133 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3733
  %134 = call i32 @__freading(%struct._IO_FILE* %133) #10, !dbg !3733
  %135 = icmp ne i32 %134, 0, !dbg !3733
  br i1 %135, label %136, label %141, !dbg !3735

136:                                              ; preds = %132
  %137 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3736
  %138 = call i32 @fileno(%struct._IO_FILE* %137) #10, !dbg !3737
  %139 = call i64 @lseek(i32 %138, i64 0, i32 1) #10, !dbg !3738
  %140 = icmp ne i64 %139, -1, !dbg !3739
  br i1 %140, label %141, label %180, !dbg !3740

141:                                              ; preds = %136, %132
  %142 = load i32, i32* @x.89
  %143 = load i32, i32* @y.90
  %144 = sub i32 %142, 1
  %145 = mul i32 %142, %144
  %146 = urem i32 %145, 2
  %147 = icmp eq i32 %146, 0
  %148 = icmp slt i32 %143, 10
  %149 = or i1 %147, %148
  br i1 %149, label %originalBB68, label %originalBB68alteredBB

originalBB68:                                     ; preds = %141, %originalBB68alteredBB
  %150 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3741
  %151 = call i32 @rpl_fflush(%struct._IO_FILE* %150), !dbg !3742
  %152 = icmp ne i32 %151, 0, !dbg !3742
  %153 = load i32, i32* @x.89
  %154 = load i32, i32* @y.90
  %155 = sub i32 %153, 1
  %156 = mul i32 %153, %155
  %157 = urem i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = icmp slt i32 %154, 10
  %160 = or i1 %158, %159
  br i1 %160, label %originalBBpart270, label %originalBB68alteredBB

originalBBpart270:                                ; preds = %originalBB68
  br i1 %152, label %161, label %180, !dbg !3743

161:                                              ; preds = %originalBBpart270
  %162 = load i32, i32* @x.89
  %163 = load i32, i32* @y.90
  %164 = sub i32 %162, 1
  %165 = mul i32 %162, %164
  %166 = urem i32 %165, 2
  %167 = icmp eq i32 %166, 0
  %168 = icmp slt i32 %163, 10
  %169 = or i1 %167, %168
  br i1 %169, label %originalBB72, label %originalBB72alteredBB

originalBB72:                                     ; preds = %161, %originalBB72alteredBB
  %170 = call i32* @__errno_location() #15, !dbg !3744
  %171 = load i32, i32* %170, align 4, !dbg !3744
  store i32 %171, i32* %12, align 4, !dbg !3745
  %172 = load i32, i32* @x.89
  %173 = load i32, i32* @y.90
  %174 = sub i32 %172, 1
  %175 = mul i32 %172, %174
  %176 = urem i32 %175, 2
  %177 = icmp eq i32 %176, 0
  %178 = icmp slt i32 %173, 10
  %179 = or i1 %177, %178
  br i1 %179, label %originalBBpart274, label %originalBB72alteredBB

originalBBpart274:                                ; preds = %originalBB72
  br label %180, !dbg !3746

180:                                              ; preds = %originalBBpart274, %originalBBpart270, %136
  %181 = load i32, i32* @x.89
  %182 = load i32, i32* @y.90
  %183 = sub i32 %181, 1
  %184 = mul i32 %181, %183
  %185 = urem i32 %184, 2
  %186 = icmp eq i32 %185, 0
  %187 = icmp slt i32 %182, 10
  %188 = or i1 %186, %187
  br i1 %188, label %originalBB76, label %originalBB76alteredBB

originalBB76:                                     ; preds = %180, %originalBB76alteredBB
  %189 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3747
  %190 = call i32 @fclose(%struct._IO_FILE* %189), !dbg !3748
  store i32 %190, i32* %14, align 4, !dbg !3749
  %191 = load i32, i32* %12, align 4, !dbg !3750
  %192 = icmp ne i32 %191, 0, !dbg !3752
  %193 = load i32, i32* @x.89
  %194 = load i32, i32* @y.90
  %195 = sub i32 %193, 1
  %196 = mul i32 %193, %195
  %197 = urem i32 %196, 2
  %198 = icmp eq i32 %197, 0
  %199 = icmp slt i32 %194, 10
  %200 = or i1 %198, %199
  br i1 %200, label %originalBBpart278, label %originalBB76alteredBB

originalBBpart278:                                ; preds = %originalBB76
  br i1 %192, label %201, label %220, !dbg !3753

201:                                              ; preds = %originalBBpart278
  %202 = load i32, i32* @x.89
  %203 = load i32, i32* @y.90
  %204 = sub i32 %202, 1
  %205 = mul i32 %202, %204
  %206 = urem i32 %205, 2
  %207 = icmp eq i32 %206, 0
  %208 = icmp slt i32 %203, 10
  %209 = or i1 %207, %208
  br i1 %209, label %originalBB80, label %originalBB80alteredBB

originalBB80:                                     ; preds = %201, %originalBB80alteredBB
  %210 = load i32, i32* %12, align 4, !dbg !3754
  %211 = call i32* @__errno_location() #15, !dbg !3756
  store i32 %210, i32* %211, align 4, !dbg !3757
  store i32 -1, i32* %14, align 4, !dbg !3758
  %212 = load i32, i32* @x.89
  %213 = load i32, i32* @y.90
  %214 = sub i32 %212, 1
  %215 = mul i32 %212, %214
  %216 = urem i32 %215, 2
  %217 = icmp eq i32 %216, 0
  %218 = icmp slt i32 %213, 10
  %219 = or i1 %217, %218
  br i1 %219, label %originalBBpart282, label %originalBB80alteredBB

originalBBpart282:                                ; preds = %originalBB80
  br label %220, !dbg !3759

220:                                              ; preds = %originalBBpart282, %originalBBpart278
  %221 = load i32, i32* %14, align 4, !dbg !3760
  store i32 %221, i32* %10, align 4, !dbg !3761
  br label %222, !dbg !3761

222:                                              ; preds = %220, %129
  %223 = load i32, i32* %10, align 4, !dbg !3762
  ret i32 %223, !dbg !3762

originalBBalteredBB:                              ; preds = %originalBB, %1
  %224 = alloca i32, align 4
  %225 = alloca %struct._IO_FILE*, align 8
  %226 = alloca i32, align 4
  %227 = alloca i32, align 4
  %228 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %225, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %225, metadata !3763, metadata !DIExpression()), !dbg !3716
  call void @llvm.dbg.declare(metadata i32* %226, metadata !3802, metadata !DIExpression()), !dbg !3718
  store i32 0, i32* %226, align 4, !dbg !3718
  call void @llvm.dbg.declare(metadata i32* %227, metadata !3803, metadata !DIExpression()), !dbg !3720
  call void @llvm.dbg.declare(metadata i32* %228, metadata !3804, metadata !DIExpression()), !dbg !3722
  store i32 0, i32* %228, align 4, !dbg !3722
  %229 = load %struct._IO_FILE*, %struct._IO_FILE** %225, align 8, !dbg !3723
  %230 = call i32 @fileno(%struct._IO_FILE* %229) #10, !dbg !3724
  store i32 %230, i32* %227, align 4, !dbg !3725
  %_ = sub i32 0, %230
  %gen = add i32 %_, 1
  %_1 = sub i32 %230, 1
  %gen2 = mul i32 %_1, 1
  %_3 = sub i32 0, %230
  %gen4 = add i32 %_3, 1
  %_5 = sub i32 %230, 1
  %gen6 = mul i32 %_5, 1
  %_7 = sub i32 0, %230
  %gen8 = add i32 %_7, 1
  %_9 = shl i32 %230, 1
  %_10 = sub i32 %230, 1
  %gen11 = mul i32 %_10, 1
  %_12 = sub i32 0, %230
  %gen13 = add i32 %_12, 1
  %231 = add i32 %230, 1
  %_14 = sub i32 0, %231
  %gen15 = add i32 %_14, %231
  %_16 = sub i32 %231, %231
  %gen17 = mul i32 %_16, %231
  %_18 = shl i32 %231, %231
  %_19 = sub i32 0, %231
  %gen20 = add i32 %_19, %231
  %_21 = sub i32 %231, %231
  %gen22 = mul i32 %_21, %231
  %_23 = sub i32 0, %231
  %gen24 = add i32 %_23, %231
  %232 = mul i32 %231, %231
  %_25 = sub i32 0, %232
  %gen26 = add i32 %_25, %231
  %_27 = sub i32 %232, %231
  %gen28 = mul i32 %_27, %231
  %_29 = sub i32 %232, %231
  %gen30 = mul i32 %_29, %231
  %_31 = sub i32 0, %232
  %gen32 = add i32 %_31, %231
  %_33 = sub i32 0, %232
  %gen34 = add i32 %_33, %231
  %_35 = sub i32 0, %232
  %gen36 = add i32 %_35, %231
  %233 = sub i32 %232, %231
  %_37 = shl i32 %233, 2
  %234 = srem i32 %233, 2
  %_38 = shl i32 %234, -1
  %_39 = sub i32 %234, -1
  %gen40 = mul i32 %_39, -1
  %235 = add i32 %234, -1
  br label %originalBB

originalBB41alteredBB:                            ; preds = %originalBB41, %30
  %collatzVaralteredBB = alloca i32
  br label %originalBB41

originalBB45alteredBB:                            ; preds = %originalBB45, %51
  %236 = load i8**, i8*** @inVal1
  %237 = getelementptr inbounds i8*, i8** %236, i64 1
  %238 = load i8*, i8** %237
  %controlealteredBB = call i32 @controle(i8* %238, i32 -1)
  store i32 %controlealteredBB, i32* %collatzVar
  br label %originalBB45

originalBB49alteredBB:                            ; preds = %originalBB49, %71
  %239 = load i32, i32* %collatzVar
  %240 = icmp sgt i32 %239, 1
  br label %originalBB49

originalBB53alteredBB:                            ; preds = %originalBB53, %101
  %241 = load i32, i32* %collatzVar
  %_54 = sub i32 0, %21
  %gen55 = add i32 %_54, %241
  %_56 = sub i32 0, %21
  %gen57 = add i32 %_56, %241
  %_58 = shl i32 %21, %241
  %_59 = sub i32 %21, %241
  %gen60 = mul i32 %_59, %241
  %_61 = sub i32 0, %21
  %gen62 = add i32 %_61, %241
  %_63 = sub i32 0, %21
  %gen64 = add i32 %_63, %241
  %242 = sub i32 %21, %241
  %243 = icmp sgt i32 %242, -3
  br label %originalBB53

originalBB68alteredBB:                            ; preds = %originalBB68, %141
  %244 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3741
  %245 = call i32 @rpl_fflush(%struct._IO_FILE* %244), !dbg !3742
  %246 = icmp ne i32 %245, 0, !dbg !3742
  br label %originalBB68

originalBB72alteredBB:                            ; preds = %originalBB72, %161
  %247 = call i32* @__errno_location() #15, !dbg !3744
  %248 = load i32, i32* %247, align 4, !dbg !3744
  store i32 %248, i32* %12, align 4, !dbg !3745
  br label %originalBB72

originalBB76alteredBB:                            ; preds = %originalBB76, %180
  %249 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3747
  %250 = call i32 @fclose(%struct._IO_FILE* %249), !dbg !3748
  store i32 %250, i32* %14, align 4, !dbg !3749
  %251 = load i32, i32* %12, align 4, !dbg !3750
  %252 = icmp ne i32 %251, 0, !dbg !3752
  br label %originalBB76

originalBB80alteredBB:                            ; preds = %originalBB80, %201
  %253 = load i32, i32* %12, align 4, !dbg !3754
  %254 = call i32* @__errno_location() #15, !dbg !3756
  store i32 %253, i32* %254, align 4, !dbg !3757
  store i32 -1, i32* %14, align 4, !dbg !3758
  br label %originalBB80
}

; Function Attrs: nounwind
declare dso_local i32 @fileno(%struct._IO_FILE*) #2

declare dso_local i32 @fclose(%struct._IO_FILE*) #3

; Function Attrs: nounwind
declare dso_local i32 @__freading(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare dso_local i64 @lseek(i32, i64, i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fflush(%struct._IO_FILE*) #4 !dbg !3805 {
  %2 = load i32, i32* @x.91
  %3 = load i32, i32* @y.92
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %11, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %11, metadata !3843, metadata !DIExpression()), !dbg !3844
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3845
  %13 = icmp eq %struct._IO_FILE* %12, null, !dbg !3847
  %14 = load i32, i32* @x.91
  %15 = load i32, i32* @y.92
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %13, label %42, label %22, !dbg !3848

22:                                               ; preds = %originalBBpart2
  %23 = load i32, i32* @x.91
  %24 = load i32, i32* @y.92
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %22, %originalBB1alteredBB
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3849
  %32 = call i32 @__freading(%struct._IO_FILE* %31) #10, !dbg !3849
  %33 = icmp ne i32 %32, 0, !dbg !3849
  %34 = load i32, i32* @x.91
  %35 = load i32, i32* @y.92
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %33, label %61, label %42, !dbg !3850

42:                                               ; preds = %originalBBpart24, %originalBBpart2
  %43 = load i32, i32* @x.91
  %44 = load i32, i32* @y.92
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %42, %originalBB6alteredBB
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3851
  %52 = call i32 @fflush(%struct._IO_FILE* %51), !dbg !3852
  store i32 %52, i32* %10, align 4, !dbg !3853
  %53 = load i32, i32* @x.91
  %54 = load i32, i32* @y.92
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %81, !dbg !3853

61:                                               ; preds = %originalBBpart24
  %62 = load i32, i32* @x.91
  %63 = load i32, i32* @y.92
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %61, %originalBB10alteredBB
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3854
  call void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE* %70), !dbg !3855
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3856
  %72 = call i32 @fflush(%struct._IO_FILE* %71), !dbg !3857
  store i32 %72, i32* %10, align 4, !dbg !3858
  %73 = load i32, i32* @x.91
  %74 = load i32, i32* @y.92
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %81, !dbg !3858

81:                                               ; preds = %originalBBpart212, %originalBBpart28
  %82 = load i32, i32* @x.91
  %83 = load i32, i32* @y.92
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %81, %originalBB14alteredBB
  %90 = load i32, i32* %10, align 4, !dbg !3859
  %91 = load i32, i32* @x.91
  %92 = load i32, i32* @y.92
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  ret i32 %90, !dbg !3859

originalBBalteredBB:                              ; preds = %originalBB, %1
  %99 = alloca i32, align 4
  %100 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %100, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %100, metadata !3860, metadata !DIExpression()), !dbg !3844
  %101 = load %struct._IO_FILE*, %struct._IO_FILE** %100, align 8, !dbg !3845
  %102 = icmp eq %struct._IO_FILE* %101, null, !dbg !3847
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %22
  %103 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3849
  %104 = call i32 @__freading(%struct._IO_FILE* %103) #10, !dbg !3849
  %105 = icmp ne i32 %104, 0, !dbg !3849
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %42
  %106 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3851
  %107 = call i32 @fflush(%struct._IO_FILE* %106), !dbg !3852
  store i32 %107, i32* %10, align 4, !dbg !3853
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %61
  %108 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3854
  call void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE* %108), !dbg !3855
  %109 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3856
  %110 = call i32 @fflush(%struct._IO_FILE* %109), !dbg !3857
  store i32 %110, i32* %10, align 4, !dbg !3858
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %81
  %111 = load i32, i32* %10, align 4, !dbg !3859
  br label %originalBB14
}

declare dso_local i32 @fflush(%struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE*) #4 !dbg !3899 {
  %2 = load i32, i32* @x.93
  %3 = load i32, i32* @y.94
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %10, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %10, metadata !3902, metadata !DIExpression()), !dbg !3903
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %10, align 8, !dbg !3904
  %12 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %11, i32 0, i32 0, !dbg !3906
  %13 = load i32, i32* %12, align 8, !dbg !3906
  %14 = and i32 %13, 256, !dbg !3907
  %15 = icmp ne i32 %14, 0, !dbg !3907
  %16 = load i32, i32* @x.93
  %17 = load i32, i32* @y.94
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %24, label %43, !dbg !3908

24:                                               ; preds = %originalBBpart2
  %25 = load i32, i32* @x.93
  %26 = load i32, i32* @y.94
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB5, label %originalBB5alteredBB

originalBB5:                                      ; preds = %24, %originalBB5alteredBB
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** %10, align 8, !dbg !3909
  %34 = call i32 @rpl_fseeko(%struct._IO_FILE* %33, i64 0, i32 1), !dbg !3910
  %35 = load i32, i32* @x.93
  %36 = load i32, i32* @y.94
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart27, label %originalBB5alteredBB

originalBBpart27:                                 ; preds = %originalBB5
  br label %43, !dbg !3910

43:                                               ; preds = %originalBBpart27, %originalBBpart2
  ret void, !dbg !3911

originalBBalteredBB:                              ; preds = %originalBB, %1
  %44 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %44, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %44, metadata !3912, metadata !DIExpression()), !dbg !3903
  %45 = load %struct._IO_FILE*, %struct._IO_FILE** %44, align 8, !dbg !3904
  %46 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %45, i32 0, i32 0, !dbg !3906
  %47 = load i32, i32* %46, align 8, !dbg !3906
  %_ = shl i32 %47, 256
  %_1 = shl i32 %47, 256
  %_2 = shl i32 %47, 256
  %_3 = sub i32 %47, 256
  %gen = mul i32 %_3, 256
  %_4 = shl i32 %47, 256
  %48 = and i32 %47, 256, !dbg !3907
  %49 = icmp ne i32 %48, 0, !dbg !3907
  br label %originalBB

originalBB5alteredBB:                             ; preds = %originalBB5, %24
  %50 = load %struct._IO_FILE*, %struct._IO_FILE** %10, align 8, !dbg !3909
  %51 = call i32 @rpl_fseeko(%struct._IO_FILE* %50, i64 0, i32 1), !dbg !3910
  br label %originalBB5
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fseeko(%struct._IO_FILE* nonnull, i64, i32) #4 !dbg !3951 {
  %4 = alloca i32, align 4
  %5 = alloca %struct._IO_FILE*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %5, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %5, metadata !3990, metadata !DIExpression()), !dbg !3991
  store i64 %1, i64* %6, align 8
  call void @llvm.dbg.declare(metadata i64* %6, metadata !3992, metadata !DIExpression()), !dbg !3993
  store i32 %2, i32* %7, align 4
  call void @llvm.dbg.declare(metadata i32* %7, metadata !3994, metadata !DIExpression()), !dbg !3995
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !3996
  %10 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %9, i32 0, i32 2, !dbg !3998
  %11 = load i8*, i8** %10, align 8, !dbg !3998
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !3999
  %13 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %12, i32 0, i32 1, !dbg !4000
  %14 = load i8*, i8** %13, align 8, !dbg !4000
  %15 = icmp eq i8* %11, %14, !dbg !4001
  br i1 %15, label %16, label %142, !dbg !4002

16:                                               ; preds = %3
  %17 = load i32, i32* @x.95
  %18 = load i32, i32* @y.96
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %16, %originalBBalteredBB
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !4003
  %26 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %25, i32 0, i32 5, !dbg !4004
  %27 = load i8*, i8** %26, align 8, !dbg !4004
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !4005
  %29 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %28, i32 0, i32 4, !dbg !4006
  %30 = load i8*, i8** %29, align 8, !dbg !4006
  %31 = icmp eq i8* %27, %30, !dbg !4007
  %32 = load i32, i32* @x.95
  %33 = load i32, i32* @y.96
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %31, label %40, label %142, !dbg !4008

40:                                               ; preds = %originalBBpart2
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !4009
  %42 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %41, i32 0, i32 9, !dbg !4010
  %43 = load i8*, i8** %42, align 8, !dbg !4010
  %44 = icmp eq i8* %43, null, !dbg !4011
  br i1 %44, label %45, label %142, !dbg !4012

45:                                               ; preds = %40
  call void @llvm.dbg.declare(metadata i64* %8, metadata !4013, metadata !DIExpression()), !dbg !4015
  %46 = load i32, i32* @x.95
  %47 = load i32, i32* @y.96
  %48 = sub i32 %46, 1
  %49 = mul i32 %46, %48
  %50 = urem i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %51, %52
  br i1 %53, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %45, %originalBB1alteredBB
  %54 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !4016
  %55 = call i32 @fileno(%struct._IO_FILE* %54) #10, !dbg !4017
  %56 = load i64, i64* %6, align 8, !dbg !4018
  %57 = load i32, i32* %7, align 4, !dbg !4019
  %58 = call i64 @lseek(i32 %55, i64 %56, i32 %57) #10, !dbg !4020
  store i64 %58, i64* %8, align 8, !dbg !4015
  %59 = load i64, i64* %8, align 8, !dbg !4021
  %60 = trunc i64 %59 to i32
  %61 = mul i32 %60, -3
  %62 = add i32 %61, -4
  %63 = trunc i64 %56 to i32
  %64 = mul i32 %63, 2
  %65 = add i32 %64, -5
  %66 = mul i32 %62, %62
  %67 = mul i32 %66, 7
  %68 = sub i32 %67, 1
  %69 = mul i32 %65, %65
  %70 = sub i32 %68, %69
  %71 = mul i32 %70, -2
  %72 = add i32 %71, -1
  %73 = icmp ne i32 %72, -1
  %74 = load i32, i32* @x.95
  %75 = load i32, i32* @y.96
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBBpart264, label %originalBB1alteredBB

originalBBpart264:                                ; preds = %originalBB1
  br i1 %73, label %99, label %82

82:                                               ; preds = %originalBBpart264
  %83 = load i32, i32* @x.95
  %84 = load i32, i32* @y.96
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBB66, label %originalBB66alteredBB

originalBB66:                                     ; preds = %82, %originalBB66alteredBB
  %91 = load i32, i32* @x.95
  %92 = load i32, i32* @y.96
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %originalBBpart268, label %originalBB66alteredBB

originalBBpart268:                                ; preds = %originalBB66
  ret i32 0

99:                                               ; preds = %originalBBpart264
  %100 = icmp eq i64 %59, -1, !dbg !4023
  br i1 %100, label %101, label %118, !dbg !4024

101:                                              ; preds = %99
  %102 = load i32, i32* @x.95
  %103 = load i32, i32* @y.96
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB70, label %originalBB70alteredBB

originalBB70:                                     ; preds = %101, %originalBB70alteredBB
  store i32 -1, i32* %4, align 4, !dbg !4025
  %110 = load i32, i32* @x.95
  %111 = load i32, i32* @y.96
  %112 = sub i32 %110, 1
  %113 = mul i32 %110, %112
  %114 = urem i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %115, %116
  br i1 %117, label %originalBBpart272, label %originalBB70alteredBB

originalBBpart272:                                ; preds = %originalBB70
  br label %163, !dbg !4025

118:                                              ; preds = %99
  %119 = load i32, i32* @x.95
  %120 = load i32, i32* @y.96
  %121 = sub i32 %119, 1
  %122 = mul i32 %119, %121
  %123 = urem i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %124, %125
  br i1 %126, label %originalBB74, label %originalBB74alteredBB

originalBB74:                                     ; preds = %118, %originalBB74alteredBB
  %127 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !4027
  %128 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %127, i32 0, i32 0, !dbg !4028
  %129 = load i32, i32* %128, align 8, !dbg !4029
  %130 = and i32 %129, -17, !dbg !4029
  store i32 %130, i32* %128, align 8, !dbg !4029
  %131 = load i64, i64* %8, align 8, !dbg !4030
  %132 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !4031
  %133 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %132, i32 0, i32 21, !dbg !4032
  store i64 %131, i64* %133, align 8, !dbg !4033
  store i32 0, i32* %4, align 4, !dbg !4034
  %134 = load i32, i32* @x.95
  %135 = load i32, i32* @y.96
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBBpart279, label %originalBB74alteredBB

originalBBpart279:                                ; preds = %originalBB74
  br label %163, !dbg !4034

142:                                              ; preds = %40, %originalBBpart2, %3
  %143 = load i32, i32* @x.95
  %144 = load i32, i32* @y.96
  %145 = sub i32 %143, 1
  %146 = mul i32 %143, %145
  %147 = urem i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %148, %149
  br i1 %150, label %originalBB81, label %originalBB81alteredBB

originalBB81:                                     ; preds = %142, %originalBB81alteredBB
  %151 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !4035
  %152 = load i64, i64* %6, align 8, !dbg !4036
  %153 = load i32, i32* %7, align 4, !dbg !4037
  %154 = call i32 @fseeko(%struct._IO_FILE* %151, i64 %152, i32 %153), !dbg !4038
  store i32 %154, i32* %4, align 4, !dbg !4039
  %155 = load i32, i32* @x.95
  %156 = load i32, i32* @y.96
  %157 = sub i32 %155, 1
  %158 = mul i32 %155, %157
  %159 = urem i32 %158, 2
  %160 = icmp eq i32 %159, 0
  %161 = icmp slt i32 %156, 10
  %162 = or i1 %160, %161
  br i1 %162, label %originalBBpart283, label %originalBB81alteredBB

originalBBpart283:                                ; preds = %originalBB81
  br label %163, !dbg !4039

163:                                              ; preds = %originalBBpart283, %originalBBpart279, %originalBBpart272
  %164 = load i32, i32* %4, align 4, !dbg !4040
  ret i32 %164, !dbg !4040

originalBBalteredBB:                              ; preds = %originalBB, %16
  %165 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !4003
  %166 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %165, i32 0, i32 5, !dbg !4004
  %167 = load i8*, i8** %166, align 8, !dbg !4004
  %168 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !4005
  %169 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %168, i32 0, i32 4, !dbg !4006
  %170 = load i8*, i8** %169, align 8, !dbg !4006
  %171 = icmp eq i8* %167, %170, !dbg !4007
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %45
  %172 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !4016
  %173 = call i32 @fileno(%struct._IO_FILE* %172) #10, !dbg !4017
  %174 = load i64, i64* %6, align 8, !dbg !4018
  %175 = load i32, i32* %7, align 4, !dbg !4019
  %176 = call i64 @lseek(i32 %173, i64 %174, i32 %175) #10, !dbg !4020
  store i64 %176, i64* %8, align 8, !dbg !4015
  %177 = load i64, i64* %8, align 8, !dbg !4021
  %178 = trunc i64 %177 to i32
  %_ = sub i32 %178, -3
  %gen = mul i32 %_, -3
  %179 = mul i32 %178, -3
  %_2 = shl i32 %179, -4
  %_3 = sub i32 %179, -4
  %gen4 = mul i32 %_3, -4
  %_5 = shl i32 %179, -4
  %_6 = shl i32 %179, -4
  %_7 = sub i32 0, %179
  %gen8 = add i32 %_7, -4
  %_9 = sub i32 %179, -4
  %gen10 = mul i32 %_9, -4
  %180 = add i32 %179, -4
  %181 = trunc i64 %174 to i32
  %_11 = shl i32 %181, 2
  %_12 = sub i32 0, %181
  %gen13 = add i32 %_12, 2
  %_14 = sub i32 0, %181
  %gen15 = add i32 %_14, 2
  %_16 = sub i32 %181, 2
  %gen17 = mul i32 %_16, 2
  %_18 = sub i32 %181, 2
  %gen19 = mul i32 %_18, 2
  %182 = mul i32 %181, 2
  %_20 = shl i32 %182, -5
  %183 = add i32 %182, -5
  %_21 = sub i32 %180, %180
  %gen22 = mul i32 %_21, %180
  %_23 = sub i32 0, %180
  %gen24 = add i32 %_23, %180
  %184 = mul i32 %180, %180
  %_25 = shl i32 %184, 7
  %_26 = shl i32 %184, 7
  %185 = mul i32 %184, 7
  %_27 = sub i32 %185, 1
  %gen28 = mul i32 %_27, 1
  %_29 = shl i32 %185, 1
  %_30 = sub i32 %185, 1
  %gen31 = mul i32 %_30, 1
  %_32 = shl i32 %185, 1
  %_33 = sub i32 %185, 1
  %gen34 = mul i32 %_33, 1
  %_35 = sub i32 0, %185
  %gen36 = add i32 %_35, 1
  %_37 = sub i32 0, %185
  %gen38 = add i32 %_37, 1
  %_39 = shl i32 %185, 1
  %_40 = sub i32 %185, 1
  %gen41 = mul i32 %_40, 1
  %186 = sub i32 %185, 1
  %_42 = sub i32 0, %183
  %gen43 = add i32 %_42, %183
  %187 = mul i32 %183, %183
  %_44 = shl i32 %186, %187
  %188 = sub i32 %186, %187
  %_45 = shl i32 %188, -2
  %_46 = sub i32 %188, -2
  %gen47 = mul i32 %_46, -2
  %_48 = shl i32 %188, -2
  %_49 = sub i32 %188, -2
  %gen50 = mul i32 %_49, -2
  %_51 = sub i32 %188, -2
  %gen52 = mul i32 %_51, -2
  %_53 = shl i32 %188, -2
  %189 = mul i32 %188, -2
  %_54 = sub i32 %189, -1
  %gen55 = mul i32 %_54, -1
  %_56 = shl i32 %189, -1
  %_57 = sub i32 %189, -1
  %gen58 = mul i32 %_57, -1
  %_59 = sub i32 0, %189
  %gen60 = add i32 %_59, -1
  %_61 = sub i32 0, %189
  %gen62 = add i32 %_61, -1
  %190 = add i32 %189, -1
  %191 = icmp ne i32 %190, -1
  br label %originalBB1

originalBB66alteredBB:                            ; preds = %originalBB66, %82
  br label %originalBB66

originalBB70alteredBB:                            ; preds = %originalBB70, %101
  store i32 -1, i32* %4, align 4, !dbg !4025
  br label %originalBB70

originalBB74alteredBB:                            ; preds = %originalBB74, %118
  %192 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !4027
  %193 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %192, i32 0, i32 0, !dbg !4028
  %194 = load i32, i32* %193, align 8, !dbg !4029
  %_75 = sub i32 0, %194
  %gen76 = add i32 %_75, -17
  %_77 = shl i32 %194, -17
  %195 = and i32 %194, -17, !dbg !4029
  store i32 %195, i32* %193, align 8, !dbg !4029
  %196 = load i64, i64* %8, align 8, !dbg !4030
  %197 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !4031
  %198 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %197, i32 0, i32 21, !dbg !4032
  store i64 %196, i64* %198, align 8, !dbg !4033
  store i32 0, i32* %4, align 4, !dbg !4034
  br label %originalBB74

originalBB81alteredBB:                            ; preds = %originalBB81, %142
  %199 = load %struct._IO_FILE*, %struct._IO_FILE** %5, align 8, !dbg !4035
  %200 = load i64, i64* %6, align 8, !dbg !4036
  %201 = load i32, i32* %7, align 4, !dbg !4037
  %202 = call i32 @fseeko(%struct._IO_FILE* %199, i64 %200, i32 %201), !dbg !4038
  store i32 %202, i32* %4, align 4, !dbg !4039
  br label %originalBB81
}

declare dso_local i32 @fseeko(%struct._IO_FILE*, i64, i32) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @c_tolower(i32) #4 !dbg !4041 {
  %2 = load i32, i32* @x.97
  %3 = load i32, i32* @y.98
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !4045, metadata !DIExpression()), !dbg !4046
  %12 = load i32, i32* %11, align 4, !dbg !4047
  %13 = load i32, i32* @x.97
  %14 = load i32, i32* @y.98
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  switch i32 %12, label %41 [
    i32 65, label %21
    i32 66, label %21
    i32 67, label %21
    i32 68, label %21
    i32 69, label %21
    i32 70, label %21
    i32 71, label %21
    i32 72, label %21
    i32 73, label %21
    i32 74, label %21
    i32 75, label %21
    i32 76, label %21
    i32 77, label %21
    i32 78, label %21
    i32 79, label %21
    i32 80, label %21
    i32 81, label %21
    i32 82, label %21
    i32 83, label %21
    i32 84, label %21
    i32 85, label %21
    i32 86, label %21
    i32 87, label %21
    i32 88, label %21
    i32 89, label %21
    i32 90, label %21
  ], !dbg !4048

21:                                               ; preds = %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2
  %22 = load i32, i32* @x.97
  %23 = load i32, i32* @y.98
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  %30 = load i32, i32* %11, align 4, !dbg !4049
  %31 = sub nsw i32 %30, 65, !dbg !4051
  %32 = add nsw i32 %31, 97, !dbg !4052
  store i32 %32, i32* %10, align 4, !dbg !4053
  %33 = load i32, i32* @x.97
  %34 = load i32, i32* @y.98
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBBpart26, label %originalBB1alteredBB

originalBBpart26:                                 ; preds = %originalBB1
  br label %43, !dbg !4053

41:                                               ; preds = %originalBBpart2
  %42 = load i32, i32* %11, align 4, !dbg !4054
  store i32 %42, i32* %10, align 4, !dbg !4055
  br label %43, !dbg !4055

43:                                               ; preds = %41, %originalBBpart26
  %44 = load i32, i32* @x.97
  %45 = load i32, i32* @y.98
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB8, label %originalBB8alteredBB

originalBB8:                                      ; preds = %43, %originalBB8alteredBB
  %52 = load i32, i32* %10, align 4, !dbg !4056
  %53 = load i32, i32* @x.97
  %54 = load i32, i32* @y.98
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart210, label %originalBB8alteredBB

originalBBpart210:                                ; preds = %originalBB8
  ret i32 %52, !dbg !4056

originalBBalteredBB:                              ; preds = %originalBB, %1
  %61 = alloca i32, align 4
  %62 = alloca i32, align 4
  store i32 %0, i32* %62, align 4
  call void @llvm.dbg.declare(metadata i32* %62, metadata !4057, metadata !DIExpression()), !dbg !4046
  %63 = load i32, i32* %62, align 4, !dbg !4047
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  %64 = load i32, i32* %11, align 4, !dbg !4049
  %_ = sub i32 0, %64
  %gen = add i32 %_, 65
  %65 = sub nsw i32 %64, 65, !dbg !4051
  %_2 = shl i32 %65, 97
  %_3 = sub i32 0, %65
  %gen4 = add i32 %_3, 97
  %66 = add nsw i32 %65, 97, !dbg !4052
  store i32 %66, i32* %10, align 4, !dbg !4053
  br label %originalBB1

originalBB8alteredBB:                             ; preds = %originalBB8, %43
  %67 = load i32, i32* %10, align 4, !dbg !4056
  br label %originalBB8
}

define private i32 @controle(i8*, i32) {
  %3 = load i32, i32* @x.99
  %4 = load i32, i32* @y.100
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = load i32, i32* @inVal0
  %12 = icmp sgt i32 %11, 0
  %13 = load i32, i32* @x.99
  %14 = load i32, i32* @y.100
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %41, label %21

21:                                               ; preds = %originalBBpart2
  %22 = load i32, i32* @x.99
  %23 = load i32, i32* @y.100
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  call void @srand(i32 %1)
  %30 = call i32 @rand()
  %31 = srem i32 %30, 50000
  %32 = add i32 %31, 2
  %33 = load i32, i32* @x.99
  %34 = load i32, i32* @y.100
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBBpart217, label %originalBB1alteredBB

originalBBpart217:                                ; preds = %originalBB1
  ret i32 %32

41:                                               ; preds = %originalBBpart2
  %42 = getelementptr inbounds [3 x i8], [3 x i8]* @.compVal2, i32 0, i32 0
  %43 = call i32 @strcmp(i8* %42, i8* %0)
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %45, label %64

45:                                               ; preds = %41
  %46 = load i32, i32* @x.99
  %47 = load i32, i32* @y.100
  %48 = sub i32 %46, 1
  %49 = mul i32 %46, %48
  %50 = urem i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %51, %52
  br i1 %53, label %originalBB19, label %originalBB19alteredBB

originalBB19:                                     ; preds = %45, %originalBB19alteredBB
  %54 = icmp eq i32 %1, 0
  %55 = load i32, i32* @x.99
  %56 = load i32, i32* @y.100
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBBpart221, label %originalBB19alteredBB

originalBBpart221:                                ; preds = %originalBB19
  br i1 %54, label %63, label %64

63:                                               ; preds = %originalBBpart221
  ret i32 5

64:                                               ; preds = %originalBBpart221, %41
  %65 = load i32, i32* @x.99
  %66 = load i32, i32* @y.100
  %67 = sub i32 %65, 1
  %68 = mul i32 %65, %67
  %69 = urem i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %70, %71
  br i1 %72, label %originalBB23, label %originalBB23alteredBB

originalBB23:                                     ; preds = %64, %originalBB23alteredBB
  %73 = getelementptr inbounds [1 x i8], [1 x i8]* @.compVal1, i32 0, i32 0
  %74 = call i32 @strcmp(i8* %73, i8* %0)
  %75 = icmp eq i32 %74, 0
  %76 = load i32, i32* @x.99
  %77 = load i32, i32* @y.100
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBBpart225, label %originalBB23alteredBB

originalBBpart225:                                ; preds = %originalBB23
  br i1 %75, label %84, label %103

84:                                               ; preds = %originalBBpart225
  %85 = load i32, i32* @x.99
  %86 = load i32, i32* @y.100
  %87 = sub i32 %85, 1
  %88 = mul i32 %85, %87
  %89 = urem i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %90, %91
  br i1 %92, label %originalBB27, label %originalBB27alteredBB

originalBB27:                                     ; preds = %84, %originalBB27alteredBB
  %93 = icmp eq i32 %1, -1
  %94 = load i32, i32* @x.99
  %95 = load i32, i32* @y.100
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart229, label %originalBB27alteredBB

originalBBpart229:                                ; preds = %originalBB27
  br i1 %93, label %102, label %103

102:                                              ; preds = %originalBBpart229
  ret i32 3

103:                                              ; preds = %originalBBpart229, %originalBBpart225
  %104 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal0, i32 0, i32 0
  %105 = call i32 @strcmp(i8* %104, i8* %0)
  %106 = icmp eq i32 %105, 0
  br i1 %106, label %107, label %110

107:                                              ; preds = %103
  %108 = icmp eq i32 %1, 0
  br i1 %108, label %109, label %110

109:                                              ; preds = %107
  ret i32 3

110:                                              ; preds = %107, %103
  %111 = load i32, i32* @x.99
  %112 = load i32, i32* @y.100
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBB31, label %originalBB31alteredBB

originalBB31:                                     ; preds = %110, %originalBB31alteredBB
  %119 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal0, i32 0, i32 0
  %120 = call i32 @strcmp(i8* %119, i8* %0)
  %121 = icmp eq i32 %120, 0
  %122 = load i32, i32* @x.99
  %123 = load i32, i32* @y.100
  %124 = sub i32 %122, 1
  %125 = mul i32 %122, %124
  %126 = urem i32 %125, 2
  %127 = icmp eq i32 %126, 0
  %128 = icmp slt i32 %123, 10
  %129 = or i1 %127, %128
  br i1 %129, label %originalBBpart233, label %originalBB31alteredBB

originalBBpart233:                                ; preds = %originalBB31
  br i1 %121, label %130, label %165

130:                                              ; preds = %originalBBpart233
  %131 = load i32, i32* @x.99
  %132 = load i32, i32* @y.100
  %133 = sub i32 %131, 1
  %134 = mul i32 %131, %133
  %135 = urem i32 %134, 2
  %136 = icmp eq i32 %135, 0
  %137 = icmp slt i32 %132, 10
  %138 = or i1 %136, %137
  br i1 %138, label %originalBB35, label %originalBB35alteredBB

originalBB35:                                     ; preds = %130, %originalBB35alteredBB
  %139 = icmp eq i32 %1, -1
  %140 = load i32, i32* @x.99
  %141 = load i32, i32* @y.100
  %142 = sub i32 %140, 1
  %143 = mul i32 %140, %142
  %144 = urem i32 %143, 2
  %145 = icmp eq i32 %144, 0
  %146 = icmp slt i32 %141, 10
  %147 = or i1 %145, %146
  br i1 %147, label %originalBBpart237, label %originalBB35alteredBB

originalBBpart237:                                ; preds = %originalBB35
  br i1 %139, label %148, label %165

148:                                              ; preds = %originalBBpart237
  %149 = load i32, i32* @x.99
  %150 = load i32, i32* @y.100
  %151 = sub i32 %149, 1
  %152 = mul i32 %149, %151
  %153 = urem i32 %152, 2
  %154 = icmp eq i32 %153, 0
  %155 = icmp slt i32 %150, 10
  %156 = or i1 %154, %155
  br i1 %156, label %originalBB39, label %originalBB39alteredBB

originalBB39:                                     ; preds = %148, %originalBB39alteredBB
  %157 = load i32, i32* @x.99
  %158 = load i32, i32* @y.100
  %159 = sub i32 %157, 1
  %160 = mul i32 %157, %159
  %161 = urem i32 %160, 2
  %162 = icmp eq i32 %161, 0
  %163 = icmp slt i32 %158, 10
  %164 = or i1 %162, %163
  br i1 %164, label %originalBBpart241, label %originalBB39alteredBB

originalBBpart241:                                ; preds = %originalBB39
  ret i32 5

165:                                              ; preds = %originalBBpart237, %originalBBpart233
  %166 = load i32, i32* @x.99
  %167 = load i32, i32* @y.100
  %168 = sub i32 %166, 1
  %169 = mul i32 %166, %168
  %170 = urem i32 %169, 2
  %171 = icmp eq i32 %170, 0
  %172 = icmp slt i32 %167, 10
  %173 = or i1 %171, %172
  br i1 %173, label %originalBB43, label %originalBB43alteredBB

originalBB43:                                     ; preds = %165, %originalBB43alteredBB
  call void @srand(i32 %1)
  %174 = call i32 @rand()
  %175 = srem i32 %174, 50000
  %176 = add i32 %175, 2
  %177 = load i32, i32* @x.99
  %178 = load i32, i32* @y.100
  %179 = sub i32 %177, 1
  %180 = mul i32 %177, %179
  %181 = urem i32 %180, 2
  %182 = icmp eq i32 %181, 0
  %183 = icmp slt i32 %178, 10
  %184 = or i1 %182, %183
  br i1 %184, label %originalBBpart252, label %originalBB43alteredBB

originalBBpart252:                                ; preds = %originalBB43
  ret i32 %176

originalBBalteredBB:                              ; preds = %originalBB, %2
  %185 = load i32, i32* @inVal0
  %186 = icmp sgt i32 %185, 0
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  call void @srand(i32 %1)
  %187 = call i32 @rand()
  %_ = sub i32 %187, 50000
  %gen = mul i32 %_, 50000
  %_2 = sub i32 0, %187
  %gen3 = add i32 %_2, 50000
  %188 = srem i32 %187, 50000
  %_4 = shl i32 %188, 2
  %_5 = sub i32 0, %188
  %gen6 = add i32 %_5, 2
  %_7 = sub i32 %188, 2
  %gen8 = mul i32 %_7, 2
  %_9 = sub i32 0, %188
  %gen10 = add i32 %_9, 2
  %_11 = shl i32 %188, 2
  %_12 = sub i32 %188, 2
  %gen13 = mul i32 %_12, 2
  %_14 = shl i32 %188, 2
  %_15 = shl i32 %188, 2
  %189 = add i32 %188, 2
  br label %originalBB1

originalBB19alteredBB:                            ; preds = %originalBB19, %45
  %190 = icmp eq i32 %1, 0
  br label %originalBB19

originalBB23alteredBB:                            ; preds = %originalBB23, %64
  %191 = getelementptr inbounds [1 x i8], [1 x i8]* @.compVal1, i32 0, i32 0
  %192 = call i32 @strcmp(i8* %191, i8* %0)
  %193 = icmp eq i32 %192, 0
  br label %originalBB23

originalBB27alteredBB:                            ; preds = %originalBB27, %84
  %194 = icmp eq i32 %1, -1
  br label %originalBB27

originalBB31alteredBB:                            ; preds = %originalBB31, %110
  %195 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal0, i32 0, i32 0
  %196 = call i32 @strcmp(i8* %195, i8* %0)
  %197 = icmp eq i32 %196, 0
  br label %originalBB31

originalBB35alteredBB:                            ; preds = %originalBB35, %130
  %198 = icmp eq i32 %1, -1
  br label %originalBB35

originalBB39alteredBB:                            ; preds = %originalBB39, %148
  br label %originalBB39

originalBB43alteredBB:                            ; preds = %originalBB43, %165
  call void @srand(i32 %1)
  %199 = call i32 @rand()
  %_44 = shl i32 %199, 50000
  %200 = srem i32 %199, 50000
  %_45 = shl i32 %200, 2
  %_46 = shl i32 %200, 2
  %_47 = shl i32 %200, 2
  %_48 = sub i32 %200, 2
  %gen49 = mul i32 %_48, 2
  %_50 = shl i32 %200, 2
  %201 = add i32 %200, 2
  br label %originalBB43
}

declare void @srand(i32)

declare i32 @rand()

attributes #0 = { noinline noreturn nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { noinline nounwind optnone readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noreturn nounwind }
attributes #13 = { nounwind readonly }
attributes #14 = { noreturn }
attributes #15 = { nounwind readnone }

!llvm.dbg.cu = !{!2, !27, !32, !41, !48, !54, !128, !130, !121, !133, !136, !138, !140, !143, !149, !151, !153, !155, !157, !159, !161, !163}
!llvm.ident = !{!165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165, !165}
!llvm.module.flags = !{!166, !167, !168, !169, !170}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "longopts", scope: !2, file: !3, line: 41, type: !10, isLocal: true, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !9, nameTableKind: None)
!3 = !DIFile(filename: "src/pwd.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4 = !{}
!5 = !{!6, !7}
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!7 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64)
!8 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!9 = !{!0}
!10 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11, size: 1280, elements: !23)
!11 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !12)
!12 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !14)
!13 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/getopt_ext.h", directory: "")
!14 = !{!15, !18, !20, !22}
!15 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !12, file: !13, line: 52, baseType: !16, size: 64)
!16 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !17, size: 64)
!17 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !8)
!18 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !12, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!19 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!20 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !12, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!21 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !19, size: 64)
!22 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !12, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!23 = !{!24}
!24 = !DISubrange(count: 5)
!25 = !DIGlobalVariableExpression(var: !26, expr: !DIExpression())
!26 = distinct !DIGlobalVariable(name: "Version", scope: !27, file: !28, line: 2, type: !16, isLocal: false, isDefinition: true)
!27 = distinct !DICompileUnit(language: DW_LANG_C99, file: !28, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !29, nameTableKind: None)
!28 = !DIFile(filename: "src/version.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!29 = !{!25}
!30 = !DIGlobalVariableExpression(var: !31, expr: !DIExpression())
!31 = distinct !DIGlobalVariable(name: "ignore_EPIPE", scope: !32, file: !37, line: 56, type: !38, isLocal: true, isDefinition: true)
!32 = distinct !DICompileUnit(language: DW_LANG_C99, file: !33, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !34, nameTableKind: None)
!33 = !DIFile(filename: "./lib/closeout.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!34 = !{!35, !30}
!35 = !DIGlobalVariableExpression(var: !36, expr: !DIExpression())
!36 = distinct !DIGlobalVariable(name: "file_name", scope: !32, file: !37, line: 46, type: !16, isLocal: true, isDefinition: true)
!37 = !DIFile(filename: "lib/closeout.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!38 = !DIBasicType(name: "_Bool", size: 8, encoding: DW_ATE_boolean)
!39 = !DIGlobalVariableExpression(var: !40, expr: !DIExpression())
!40 = distinct !DIGlobalVariable(name: "exit_failure", scope: !41, file: !44, line: 24, type: !45, isLocal: false, isDefinition: true)
!41 = distinct !DICompileUnit(language: DW_LANG_C99, file: !42, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !43, nameTableKind: None)
!42 = !DIFile(filename: "./lib/exitfail.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!43 = !{!39}
!44 = !DIFile(filename: "lib/exitfail.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!45 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !19)
!46 = !DIGlobalVariableExpression(var: !47, expr: !DIExpression())
!47 = distinct !DIGlobalVariable(name: "program_name", scope: !48, file: !51, line: 33, type: !16, isLocal: false, isDefinition: true)
!48 = distinct !DICompileUnit(language: DW_LANG_C99, file: !49, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !50, nameTableKind: None)
!49 = !DIFile(filename: "./lib/progname.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!50 = !{!46}
!51 = !DIFile(filename: "lib/progname.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!52 = !DIGlobalVariableExpression(var: !53, expr: !DIExpression())
!53 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !54, file: !80, line: 116, type: !93, isLocal: true, isDefinition: true)
!54 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !77, nameTableKind: None)
!55 = !DIFile(filename: "./lib/quotearg.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!56 = !{!57}
!57 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "quoting_style", file: !58, line: 32, baseType: !59, size: 32, elements: !60)
!58 = !DIFile(filename: "./lib/quotearg.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!59 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!60 = !{!61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71}
!61 = !DIEnumerator(name: "literal_quoting_style", value: 0, isUnsigned: true)
!62 = !DIEnumerator(name: "shell_quoting_style", value: 1, isUnsigned: true)
!63 = !DIEnumerator(name: "shell_always_quoting_style", value: 2, isUnsigned: true)
!64 = !DIEnumerator(name: "shell_escape_quoting_style", value: 3, isUnsigned: true)
!65 = !DIEnumerator(name: "shell_escape_always_quoting_style", value: 4, isUnsigned: true)
!66 = !DIEnumerator(name: "c_quoting_style", value: 5, isUnsigned: true)
!67 = !DIEnumerator(name: "c_maybe_quoting_style", value: 6, isUnsigned: true)
!68 = !DIEnumerator(name: "escape_quoting_style", value: 7, isUnsigned: true)
!69 = !DIEnumerator(name: "locale_quoting_style", value: 8, isUnsigned: true)
!70 = !DIEnumerator(name: "clocale_quoting_style", value: 9, isUnsigned: true)
!71 = !DIEnumerator(name: "custom_quoting_style", value: 10, isUnsigned: true)
!72 = !{!19, !73, !74}
!73 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!74 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !75, line: 46, baseType: !76)
!75 = !DIFile(filename: "/usr/lib/llvm-9/lib/clang/9.0.1/include/stddef.h", directory: "")
!76 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!77 = !{!78, !85, !91, !52, !103, !108, !115, !117}
!78 = !DIGlobalVariableExpression(var: !79, expr: !DIExpression())
!79 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !54, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!80 = !DIFile(filename: "lib/quotearg.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!81 = !DICompositeType(tag: DW_TAG_array_type, baseType: !82, size: 704, elements: !83)
!82 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !16)
!83 = !{!84}
!84 = !DISubrange(count: 11)
!85 = !DIGlobalVariableExpression(var: !86, expr: !DIExpression())
!86 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !54, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!87 = !DICompositeType(tag: DW_TAG_array_type, baseType: !88, size: 320, elements: !89)
!88 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !57)
!89 = !{!90}
!90 = !DISubrange(count: 10)
!91 = !DIGlobalVariableExpression(var: !92, expr: !DIExpression())
!92 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !54, file: !80, line: 1052, type: !93, isLocal: false, isDefinition: true)
!93 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !94)
!94 = !{!95, !96, !97, !101, !102}
!95 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !93, file: !80, line: 68, baseType: !57, size: 32)
!96 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !93, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!97 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !93, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!98 = !DICompositeType(tag: DW_TAG_array_type, baseType: !59, size: 256, elements: !99)
!99 = !{!100}
!100 = !DISubrange(count: 8)
!101 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !93, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!102 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !93, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!103 = !DIGlobalVariableExpression(var: !104, expr: !DIExpression())
!104 = distinct !DIGlobalVariable(name: "slot0", scope: !54, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!105 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 2048, elements: !106)
!106 = !{!107}
!107 = !DISubrange(count: 256)
!108 = !DIGlobalVariableExpression(var: !109, expr: !DIExpression())
!109 = distinct !DIGlobalVariable(name: "slotvec", scope: !54, file: !80, line: 845, type: !110, isLocal: true, isDefinition: true)
!110 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !111, size: 64)
!111 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !112)
!112 = !{!113, !114}
!113 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !111, file: !80, line: 836, baseType: !74, size: 64)
!114 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !111, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!115 = !DIGlobalVariableExpression(var: !116, expr: !DIExpression())
!116 = distinct !DIGlobalVariable(name: "nslots", scope: !54, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!117 = !DIGlobalVariableExpression(var: !118, expr: !DIExpression())
!118 = distinct !DIGlobalVariable(name: "slotvec0", scope: !54, file: !80, line: 844, type: !111, isLocal: true, isDefinition: true)
!119 = !DIGlobalVariableExpression(var: !120, expr: !DIExpression())
!120 = distinct !DIGlobalVariable(name: "version_etc_copyright", scope: !121, file: !124, line: 26, type: !125, isLocal: false, isDefinition: true)
!121 = distinct !DICompileUnit(language: DW_LANG_C99, file: !122, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, globals: !123, nameTableKind: None)
!122 = !DIFile(filename: "./lib/version-etc-fsf.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!123 = !{!119}
!124 = !DIFile(filename: "lib/version-etc-fsf.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!125 = !DICompositeType(tag: DW_TAG_array_type, baseType: !17, size: 376, elements: !126)
!126 = !{!127}
!127 = !DISubrange(count: 47)
!128 = distinct !DICompileUnit(language: DW_LANG_C99, file: !129, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!129 = !DIFile(filename: "./lib/root-dev-ino.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!130 = distinct !DICompileUnit(language: DW_LANG_C99, file: !131, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!131 = !DIFile(filename: "./lib/version-etc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!132 = !{!6}
!133 = distinct !DICompileUnit(language: DW_LANG_C99, file: !134, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !135, nameTableKind: None)
!134 = !DIFile(filename: "./lib/xmalloc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!135 = !{!74, !7, !6}
!136 = distinct !DICompileUnit(language: DW_LANG_C99, file: !137, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!137 = !DIFile(filename: "./lib/xalloc-die.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!138 = distinct !DICompileUnit(language: DW_LANG_C99, file: !139, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!139 = !DIFile(filename: "./lib/xgetcwd.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!140 = distinct !DICompileUnit(language: DW_LANG_C99, file: !141, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !142, nameTableKind: None)
!141 = !DIFile(filename: "./lib/mbrtowc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!142 = !{!74}
!143 = distinct !DICompileUnit(language: DW_LANG_C99, file: !144, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !145, nameTableKind: None)
!144 = !DIFile(filename: "./lib/c-strcasecmp.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!145 = !{!146}
!146 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !147, size: 64)
!147 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !148)
!148 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!149 = distinct !DICompileUnit(language: DW_LANG_C99, file: !150, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!150 = !DIFile(filename: "./lib/close-stream.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!151 = distinct !DICompileUnit(language: DW_LANG_C99, file: !152, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!152 = !DIFile(filename: "./lib/hard-locale.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!153 = distinct !DICompileUnit(language: DW_LANG_C99, file: !154, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!154 = !DIFile(filename: "./lib/localcharset.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!155 = distinct !DICompileUnit(language: DW_LANG_C99, file: !156, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!156 = !DIFile(filename: "./lib/setlocale_null.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!157 = distinct !DICompileUnit(language: DW_LANG_C99, file: !158, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!158 = !DIFile(filename: "./lib/fclose.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!159 = distinct !DICompileUnit(language: DW_LANG_C99, file: !160, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!160 = !DIFile(filename: "./lib/fflush.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!161 = distinct !DICompileUnit(language: DW_LANG_C99, file: !162, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!162 = !DIFile(filename: "./lib/fseeko.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!163 = distinct !DICompileUnit(language: DW_LANG_C99, file: !164, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!164 = !DIFile(filename: "./lib/c-ctype.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!165 = !{!"clang version 9.0.1-12 "}
!166 = !{i32 2, !"Dwarf Version", i32 4}
!167 = !{i32 2, !"Debug Info Version", i32 3}
!168 = !{i32 1, !"wchar_size", i32 4}
!169 = !{i32 1, !"ThinLTO", i32 0}
!170 = !{i32 1, !"EnableSplitLTOUnit", i32 0}
!171 = distinct !DISubprogram(name: "usage", scope: !3, file: !3, line: 51, type: !172, scopeLine: 52, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!172 = !DISubroutineType(types: !173)
!173 = !{null, !19}
!174 = !DILocalVariable(name: "status", arg: 1, scope: !171, file: !3, line: 51, type: !19)
!175 = !DILocation(line: 51, column: 12, scope: !171)
!176 = !DILocation(line: 53, column: 7, scope: !177)
!177 = distinct !DILexicalBlock(scope: !171, file: !3, line: 53, column: 7)
!178 = !DILocation(line: 53, column: 14, scope: !177)
!179 = !DILocation(line: 53, column: 7, scope: !171)
!180 = !DILocation(line: 54, column: 5, scope: !177)
!181 = !DILocation(line: 54, column: 5, scope: !182)
!182 = distinct !DILexicalBlock(scope: !177, file: !3, line: 54, column: 5)
!183 = !DILocation(line: 57, column: 15, scope: !184)
!184 = distinct !DILexicalBlock(scope: !177, file: !3, line: 56, column: 5)
!185 = !DILocation(line: 57, column: 45, scope: !184)
!186 = !DILocation(line: 57, column: 7, scope: !184)
!187 = !DILocation(line: 58, column: 7, scope: !184)
!188 = !DILocation(line: 62, column: 7, scope: !184)
!189 = !DILocation(line: 66, column: 7, scope: !184)
!190 = !DILocation(line: 67, column: 7, scope: !184)
!191 = !DILocation(line: 68, column: 7, scope: !184)
!192 = !DILocation(line: 71, column: 15, scope: !184)
!193 = !DILocation(line: 71, column: 7, scope: !184)
!194 = !DILocation(line: 72, column: 7, scope: !184)
!195 = !DILocation(line: 74, column: 9, scope: !171)
!196 = !DILocation(line: 74, column: 3, scope: !171)
!197 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !198, file: !198, line: 634, type: !199, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!198 = !DIFile(filename: "src/system.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!199 = !DISubroutineType(types: !200)
!200 = !{null, !16}
!201 = !DILocalVariable(name: "program", arg: 1, scope: !197, file: !198, line: 634, type: !16)
!202 = !DILocation(line: 634, column: 34, scope: !197)
!203 = !DILocalVariable(name: "infomap", scope: !197, file: !198, line: 636, type: !204)
!204 = !DICompositeType(tag: DW_TAG_array_type, baseType: !205, size: 896, elements: !210)
!205 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !206)
!206 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "infomap", scope: !197, file: !198, line: 636, size: 128, elements: !207)
!207 = !{!208, !209}
!208 = !DIDerivedType(tag: DW_TAG_member, name: "program", scope: !206, file: !198, line: 636, baseType: !16, size: 64)
!209 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !206, file: !198, line: 636, baseType: !16, size: 64, offset: 64)
!210 = !{!211}
!211 = !DISubrange(count: 7)
!212 = !DILocation(line: 636, column: 67, scope: !197)
!213 = !DILocalVariable(name: "node", scope: !197, file: !198, line: 646, type: !16)
!214 = !DILocation(line: 646, column: 15, scope: !197)
!215 = !DILocation(line: 646, column: 22, scope: !197)
!216 = !DILocalVariable(name: "map_prog", scope: !197, file: !198, line: 647, type: !217)
!217 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !205, size: 64)
!218 = !DILocation(line: 647, column: 25, scope: !197)
!219 = !DILocation(line: 647, column: 36, scope: !197)
!220 = !DILocation(line: 649, column: 3, scope: !197)
!221 = !DILocation(line: 649, column: 10, scope: !197)
!222 = !DILocation(line: 649, column: 20, scope: !197)
!223 = !DILocation(line: 649, column: 28, scope: !197)
!224 = !DILocation(line: 649, column: 33, scope: !197)
!225 = !DILocation(line: 649, column: 31, scope: !197)
!226 = !DILocation(line: 0, scope: !197)
!227 = !DILocation(line: 650, column: 13, scope: !197)
!228 = distinct !{!228, !220, !227}
!229 = !DILocation(line: 652, column: 7, scope: !230)
!230 = distinct !DILexicalBlock(scope: !197, file: !198, line: 652, column: 7)
!231 = !DILocation(line: 652, column: 17, scope: !230)
!232 = !DILocation(line: 652, column: 7, scope: !197)
!233 = !DILocation(line: 653, column: 12, scope: !230)
!234 = !DILocation(line: 653, column: 22, scope: !230)
!235 = !DILocation(line: 653, column: 10, scope: !230)
!236 = !DILocation(line: 653, column: 5, scope: !230)
!237 = !DILocation(line: 655, column: 11, scope: !197)
!238 = !DILocation(line: 655, column: 3, scope: !197)
!239 = !DILocalVariable(name: "lc_messages", scope: !197, file: !198, line: 659, type: !16)
!240 = !DILocation(line: 659, column: 15, scope: !197)
!241 = !DILocation(line: 659, column: 29, scope: !197)
!242 = !DILocation(line: 660, column: 7, scope: !243)
!243 = distinct !DILexicalBlock(scope: !197, file: !198, line: 660, column: 7)
!244 = !DILocation(line: 660, column: 19, scope: !243)
!245 = !DILocation(line: 660, column: 22, scope: !243)
!246 = !DILocation(line: 660, column: 7, scope: !197)
!247 = !DILocation(line: 666, column: 7, scope: !248)
!248 = distinct !DILexicalBlock(scope: !243, file: !198, line: 661, column: 5)
!249 = !DILocation(line: 668, column: 5, scope: !248)
!250 = !DILocation(line: 669, column: 11, scope: !197)
!251 = !DILocation(line: 670, column: 24, scope: !197)
!252 = !DILocation(line: 669, column: 3, scope: !197)
!253 = !DILocation(line: 671, column: 11, scope: !197)
!254 = !DILocation(line: 672, column: 11, scope: !197)
!255 = !DILocation(line: 672, column: 17, scope: !197)
!256 = !DILocation(line: 672, column: 25, scope: !197)
!257 = !DILocation(line: 672, column: 22, scope: !197)
!258 = !DILocation(line: 671, column: 3, scope: !197)
!259 = !DILocation(line: 673, column: 1, scope: !197)
!260 = !DILocalVariable(name: "lc_messages", scope: !261, file: !198, line: 659, type: !16)
!261 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !198, file: !198, line: 634, type: !199, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !262, retainedNodes: !4)
!262 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !263, nameTableKind: None)
!263 = !{!264}
!264 = !DIGlobalVariableExpression(var: !265, expr: !DIExpression())
!265 = distinct !DIGlobalVariable(name: "longopts", scope: !262, file: !3, line: 41, type: !266, isLocal: true, isDefinition: true)
!266 = !DICompositeType(tag: DW_TAG_array_type, baseType: !267, size: 1280, elements: !23)
!267 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !268)
!268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !269)
!269 = !{!270, !271, !272, !273}
!270 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !268, file: !13, line: 52, baseType: !16, size: 64)
!271 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !268, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!272 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !268, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!273 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !268, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!274 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 327, type: !275, scopeLine: 328, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !4)
!275 = !DISubroutineType(types: !276)
!276 = !{!19, !19, !277}
!277 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!278 = !DILocalVariable(name: "argc", arg: 1, scope: !274, file: !3, line: 327, type: !19)
!279 = !DILocation(line: 327, column: 11, scope: !274)
!280 = !DILocalVariable(name: "argv", arg: 2, scope: !274, file: !3, line: 327, type: !277)
!281 = !DILocation(line: 327, column: 24, scope: !274)
!282 = !DILocalVariable(name: "wd", scope: !274, file: !3, line: 329, type: !7)
!283 = !DILocation(line: 329, column: 9, scope: !274)
!284 = !DILocalVariable(name: "logical", scope: !274, file: !3, line: 333, type: !38)
!285 = !DILocation(line: 333, column: 8, scope: !274)
!286 = !DILocation(line: 333, column: 19, scope: !274)
!287 = !DILocation(line: 333, column: 46, scope: !274)
!288 = !DILocation(line: 336, column: 21, scope: !274)
!289 = !DILocation(line: 336, column: 3, scope: !274)
!290 = !DILocation(line: 337, column: 3, scope: !274)
!291 = !DILocation(line: 338, column: 3, scope: !274)
!292 = !DILocation(line: 339, column: 3, scope: !274)
!293 = !DILocation(line: 341, column: 3, scope: !274)
!294 = !DILocation(line: 343, column: 3, scope: !274)
!295 = !DILocalVariable(name: "c", scope: !296, file: !3, line: 345, type: !19)
!296 = distinct !DILexicalBlock(scope: !274, file: !3, line: 344, column: 5)
!297 = !DILocation(line: 345, column: 11, scope: !296)
!298 = !DILocation(line: 345, column: 28, scope: !296)
!299 = !DILocation(line: 345, column: 34, scope: !296)
!300 = !DILocation(line: 345, column: 15, scope: !296)
!301 = !DILocation(line: 346, column: 11, scope: !302)
!302 = distinct !DILexicalBlock(scope: !296, file: !3, line: 346, column: 11)
!303 = !DILocation(line: 346, column: 13, scope: !302)
!304 = !DILocation(line: 347, column: 9, scope: !302)
!305 = !DILocation(line: 348, column: 15, scope: !296)
!306 = !DILocation(line: 348, column: 7, scope: !296)
!307 = !DILocation(line: 351, column: 19, scope: !308)
!308 = distinct !DILexicalBlock(scope: !296, file: !3, line: 349, column: 9)
!309 = !DILocation(line: 352, column: 11, scope: !308)
!310 = !DILocation(line: 354, column: 19, scope: !308)
!311 = !DILocation(line: 355, column: 11, scope: !308)
!312 = !DILocation(line: 357, column: 9, scope: !308)
!313 = !DILocation(line: 359, column: 9, scope: !308)
!314 = !DILocation(line: 362, column: 11, scope: !308)
!315 = distinct !{!315, !294, !316}
!316 = !DILocation(line: 364, column: 5, scope: !274)
!317 = !DILocation(line: 366, column: 7, scope: !318)
!318 = distinct !DILexicalBlock(scope: !274, file: !3, line: 366, column: 7)
!319 = !DILocation(line: 366, column: 16, scope: !318)
!320 = !DILocation(line: 366, column: 14, scope: !318)
!321 = !DILocation(line: 366, column: 7, scope: !274)
!322 = !DILocation(line: 367, column: 18, scope: !318)
!323 = !DILocation(line: 367, column: 5, scope: !318)
!324 = !DILocation(line: 369, column: 7, scope: !325)
!325 = distinct !DILexicalBlock(scope: !274, file: !3, line: 369, column: 7)
!326 = !DILocation(line: 369, column: 7, scope: !274)
!327 = !DILocation(line: 371, column: 12, scope: !328)
!328 = distinct !DILexicalBlock(scope: !325, file: !3, line: 370, column: 5)
!329 = !DILocation(line: 371, column: 10, scope: !328)
!330 = !DILocation(line: 372, column: 11, scope: !331)
!331 = distinct !DILexicalBlock(scope: !328, file: !3, line: 372, column: 11)
!332 = !DILocation(line: 372, column: 11, scope: !328)
!333 = !DILocation(line: 374, column: 17, scope: !334)
!334 = distinct !DILexicalBlock(scope: !331, file: !3, line: 373, column: 9)
!335 = !DILocation(line: 374, column: 11, scope: !334)
!336 = !DILocation(line: 375, column: 11, scope: !334)
!337 = !DILocation(line: 377, column: 5, scope: !328)
!338 = !DILocation(line: 379, column: 8, scope: !274)
!339 = !DILocation(line: 379, column: 6, scope: !274)
!340 = !DILocation(line: 380, column: 7, scope: !341)
!341 = distinct !DILexicalBlock(scope: !274, file: !3, line: 380, column: 7)
!342 = !DILocation(line: 380, column: 10, scope: !341)
!343 = !DILocation(line: 380, column: 7, scope: !274)
!344 = !DILocation(line: 382, column: 13, scope: !345)
!345 = distinct !DILexicalBlock(scope: !341, file: !3, line: 381, column: 5)
!346 = !DILocation(line: 382, column: 7, scope: !345)
!347 = !DILocation(line: 383, column: 13, scope: !345)
!348 = !DILocation(line: 383, column: 7, scope: !345)
!349 = !DILocation(line: 384, column: 5, scope: !345)
!350 = !DILocalVariable(name: "file_name", scope: !351, file: !3, line: 387, type: !352)
!351 = distinct !DILexicalBlock(scope: !341, file: !3, line: 386, column: 5)
!352 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !353, size: 64)
!353 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "file_name", file: !3, line: 34, size: 192, elements: !354)
!354 = !{!355, !356, !357}
!355 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !353, file: !3, line: 36, baseType: !7, size: 64)
!356 = !DIDerivedType(tag: DW_TAG_member, name: "n_alloc", scope: !353, file: !3, line: 37, baseType: !74, size: 64, offset: 64)
!357 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !353, file: !3, line: 38, baseType: !7, size: 64, offset: 128)
!358 = !DILocation(line: 387, column: 25, scope: !351)
!359 = !DILocation(line: 387, column: 37, scope: !351)
!360 = !DILocation(line: 388, column: 22, scope: !351)
!361 = !DILocation(line: 388, column: 7, scope: !351)
!362 = !DILocation(line: 389, column: 13, scope: !351)
!363 = !DILocation(line: 389, column: 24, scope: !351)
!364 = !DILocation(line: 389, column: 7, scope: !351)
!365 = !DILocation(line: 390, column: 23, scope: !351)
!366 = !DILocation(line: 390, column: 7, scope: !351)
!367 = !DILocation(line: 393, column: 3, scope: !274)
!368 = !DILocation(line: 394, column: 1, scope: !274)
!369 = distinct !DISubprogram(name: "logical_getcwd", scope: !3, file: !3, line: 300, type: !370, scopeLine: 301, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!370 = !DISubroutineType(types: !371)
!371 = !{!7}
!372 = !DILocalVariable(name: "st1", scope: !369, file: !3, line: 302, type: !373)
!373 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !374, line: 46, size: 1152, elements: !375)
!374 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/stat.h", directory: "")
!375 = !{!376, !379, !381, !383, !385, !387, !389, !390, !391, !394, !396, !398, !406, !407, !408}
!376 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !373, file: !374, line: 48, baseType: !377, size: 64)
!377 = !DIDerivedType(tag: DW_TAG_typedef, name: "__dev_t", file: !378, line: 145, baseType: !76)
!378 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!379 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !373, file: !374, line: 53, baseType: !380, size: 64, offset: 64)
!380 = !DIDerivedType(tag: DW_TAG_typedef, name: "__ino_t", file: !378, line: 148, baseType: !76)
!381 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !373, file: !374, line: 61, baseType: !382, size: 64, offset: 128)
!382 = !DIDerivedType(tag: DW_TAG_typedef, name: "__nlink_t", file: !378, line: 151, baseType: !76)
!383 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !373, file: !374, line: 62, baseType: !384, size: 32, offset: 192)
!384 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mode_t", file: !378, line: 150, baseType: !59)
!385 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !373, file: !374, line: 64, baseType: !386, size: 32, offset: 224)
!386 = !DIDerivedType(tag: DW_TAG_typedef, name: "__uid_t", file: !378, line: 146, baseType: !59)
!387 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !373, file: !374, line: 65, baseType: !388, size: 32, offset: 256)
!388 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gid_t", file: !378, line: 147, baseType: !59)
!389 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !373, file: !374, line: 67, baseType: !19, size: 32, offset: 288)
!390 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !373, file: !374, line: 69, baseType: !377, size: 64, offset: 320)
!391 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !373, file: !374, line: 74, baseType: !392, size: 64, offset: 384)
!392 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !378, line: 152, baseType: !393)
!393 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!394 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !373, file: !374, line: 78, baseType: !395, size: 64, offset: 448)
!395 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blksize_t", file: !378, line: 174, baseType: !393)
!396 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !373, file: !374, line: 80, baseType: !397, size: 64, offset: 512)
!397 = !DIDerivedType(tag: DW_TAG_typedef, name: "__blkcnt_t", file: !378, line: 179, baseType: !393)
!398 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !373, file: !374, line: 91, baseType: !399, size: 128, offset: 576)
!399 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !400, line: 10, size: 128, elements: !401)
!400 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h", directory: "")
!401 = !{!402, !404}
!402 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !399, file: !400, line: 12, baseType: !403, size: 64)
!403 = !DIDerivedType(tag: DW_TAG_typedef, name: "__time_t", file: !378, line: 160, baseType: !393)
!404 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !399, file: !400, line: 16, baseType: !405, size: 64, offset: 64)
!405 = !DIDerivedType(tag: DW_TAG_typedef, name: "__syscall_slong_t", file: !378, line: 196, baseType: !393)
!406 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !373, file: !374, line: 92, baseType: !399, size: 128, offset: 704)
!407 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !373, file: !374, line: 93, baseType: !399, size: 128, offset: 832)
!408 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !373, file: !374, line: 106, baseType: !409, size: 192, offset: 960)
!409 = !DICompositeType(tag: DW_TAG_array_type, baseType: !405, size: 192, elements: !410)
!410 = !{!411}
!411 = !DISubrange(count: 3)
!412 = !DILocation(line: 302, column: 15, scope: !369)
!413 = !DILocalVariable(name: "st2", scope: !369, file: !3, line: 303, type: !373)
!414 = !DILocation(line: 303, column: 15, scope: !369)
!415 = !DILocalVariable(name: "wd", scope: !369, file: !3, line: 304, type: !7)
!416 = !DILocation(line: 304, column: 9, scope: !369)
!417 = !DILocation(line: 304, column: 14, scope: !369)
!418 = !DILocalVariable(name: "p", scope: !369, file: !3, line: 305, type: !7)
!419 = !DILocation(line: 305, column: 9, scope: !369)
!420 = !DILocation(line: 308, column: 8, scope: !421)
!421 = distinct !DILexicalBlock(scope: !369, file: !3, line: 308, column: 7)
!422 = !DILocation(line: 308, column: 11, scope: !421)
!423 = !DILocation(line: 308, column: 14, scope: !421)
!424 = !DILocation(line: 308, column: 20, scope: !421)
!425 = !DILocation(line: 308, column: 7, scope: !369)
!426 = !DILocation(line: 309, column: 5, scope: !421)
!427 = !DILocation(line: 310, column: 7, scope: !369)
!428 = !DILocation(line: 310, column: 5, scope: !369)
!429 = !DILocation(line: 311, column: 3, scope: !369)
!430 = !DILocation(line: 311, column: 23, scope: !369)
!431 = !DILocation(line: 311, column: 15, scope: !369)
!432 = !DILocation(line: 311, column: 13, scope: !369)
!433 = !DILocation(line: 313, column: 12, scope: !434)
!434 = distinct !DILexicalBlock(scope: !435, file: !3, line: 313, column: 11)
!435 = distinct !DILexicalBlock(scope: !369, file: !3, line: 312, column: 5)
!436 = !DILocation(line: 313, column: 17, scope: !434)
!437 = !DILocation(line: 313, column: 20, scope: !434)
!438 = !DILocation(line: 313, column: 25, scope: !434)
!439 = !DILocation(line: 314, column: 11, scope: !434)
!440 = !DILocation(line: 314, column: 15, scope: !434)
!441 = !DILocation(line: 314, column: 20, scope: !434)
!442 = !DILocation(line: 314, column: 27, scope: !434)
!443 = !DILocation(line: 314, column: 32, scope: !434)
!444 = !DILocation(line: 314, column: 37, scope: !434)
!445 = !DILocation(line: 314, column: 40, scope: !434)
!446 = !DILocation(line: 314, column: 45, scope: !434)
!447 = !DILocation(line: 313, column: 11, scope: !435)
!448 = !DILocation(line: 315, column: 9, scope: !434)
!449 = !DILocation(line: 316, column: 8, scope: !435)
!450 = distinct !{!450, !429, !451}
!451 = !DILocation(line: 317, column: 5, scope: !369)
!452 = !DILocation(line: 320, column: 13, scope: !453)
!453 = distinct !DILexicalBlock(scope: !369, file: !3, line: 320, column: 7)
!454 = !DILocation(line: 320, column: 7, scope: !453)
!455 = !DILocation(line: 320, column: 23, scope: !453)
!456 = !DILocation(line: 320, column: 31, scope: !453)
!457 = !DILocation(line: 320, column: 48, scope: !453)
!458 = !DILocation(line: 320, column: 56, scope: !453)
!459 = !DILocation(line: 320, column: 7, scope: !369)
!460 = !DILocation(line: 321, column: 12, scope: !453)
!461 = !DILocation(line: 321, column: 5, scope: !453)
!462 = !DILocation(line: 322, column: 3, scope: !369)
!463 = !DILocation(line: 323, column: 1, scope: !369)
!464 = !DILocalVariable(name: "st1", scope: !465, file: !3, line: 302, type: !478)
!465 = distinct !DISubprogram(name: "logical_getcwd", scope: !3, file: !3, line: 300, type: !370, scopeLine: 301, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !466, retainedNodes: !4)
!466 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !467, nameTableKind: None)
!467 = !{!468}
!468 = !DIGlobalVariableExpression(var: !469, expr: !DIExpression())
!469 = distinct !DIGlobalVariable(name: "longopts", scope: !466, file: !3, line: 41, type: !470, isLocal: true, isDefinition: true)
!470 = !DICompositeType(tag: DW_TAG_array_type, baseType: !471, size: 1280, elements: !23)
!471 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !472)
!472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !473)
!473 = !{!474, !475, !476, !477}
!474 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !472, file: !13, line: 52, baseType: !16, size: 64)
!475 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !472, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!476 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !472, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!477 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !472, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!478 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !374, line: 46, size: 1152, elements: !479)
!479 = !{!480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !496, !497, !498}
!480 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !478, file: !374, line: 48, baseType: !377, size: 64)
!481 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !478, file: !374, line: 53, baseType: !380, size: 64, offset: 64)
!482 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !478, file: !374, line: 61, baseType: !382, size: 64, offset: 128)
!483 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !478, file: !374, line: 62, baseType: !384, size: 32, offset: 192)
!484 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !478, file: !374, line: 64, baseType: !386, size: 32, offset: 224)
!485 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !478, file: !374, line: 65, baseType: !388, size: 32, offset: 256)
!486 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !478, file: !374, line: 67, baseType: !19, size: 32, offset: 288)
!487 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !478, file: !374, line: 69, baseType: !377, size: 64, offset: 320)
!488 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !478, file: !374, line: 74, baseType: !392, size: 64, offset: 384)
!489 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !478, file: !374, line: 78, baseType: !395, size: 64, offset: 448)
!490 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !478, file: !374, line: 80, baseType: !397, size: 64, offset: 512)
!491 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !478, file: !374, line: 91, baseType: !492, size: 128, offset: 576)
!492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !400, line: 10, size: 128, elements: !493)
!493 = !{!494, !495}
!494 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !492, file: !400, line: 12, baseType: !403, size: 64)
!495 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !492, file: !400, line: 16, baseType: !405, size: 64, offset: 64)
!496 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !478, file: !374, line: 92, baseType: !492, size: 128, offset: 704)
!497 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !478, file: !374, line: 93, baseType: !492, size: 128, offset: 832)
!498 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !478, file: !374, line: 106, baseType: !409, size: 192, offset: 960)
!499 = !DILocalVariable(name: "st2", scope: !465, file: !3, line: 303, type: !478)
!500 = !DILocalVariable(name: "wd", scope: !465, file: !3, line: 304, type: !7)
!501 = !DILocalVariable(name: "p", scope: !465, file: !3, line: 305, type: !7)
!502 = distinct !DISubprogram(name: "file_name_init", scope: !3, file: !3, line: 85, type: !503, scopeLine: 86, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!503 = !DISubroutineType(types: !504)
!504 = !{!352}
!505 = !DILocalVariable(name: "p", scope: !502, file: !3, line: 87, type: !352)
!506 = !DILocation(line: 87, column: 21, scope: !502)
!507 = !DILocation(line: 87, column: 25, scope: !502)
!508 = !DILocation(line: 91, column: 3, scope: !502)
!509 = !DILocation(line: 91, column: 6, scope: !502)
!510 = !DILocation(line: 91, column: 14, scope: !502)
!511 = !DILocation(line: 93, column: 21, scope: !502)
!512 = !DILocation(line: 93, column: 24, scope: !502)
!513 = !DILocation(line: 93, column: 12, scope: !502)
!514 = !DILocation(line: 93, column: 3, scope: !502)
!515 = !DILocation(line: 93, column: 6, scope: !502)
!516 = !DILocation(line: 93, column: 10, scope: !502)
!517 = !DILocation(line: 94, column: 14, scope: !502)
!518 = !DILocation(line: 94, column: 17, scope: !502)
!519 = !DILocation(line: 94, column: 24, scope: !502)
!520 = !DILocation(line: 94, column: 27, scope: !502)
!521 = !DILocation(line: 94, column: 35, scope: !502)
!522 = !DILocation(line: 94, column: 21, scope: !502)
!523 = !DILocation(line: 94, column: 3, scope: !502)
!524 = !DILocation(line: 94, column: 6, scope: !502)
!525 = !DILocation(line: 94, column: 12, scope: !502)
!526 = !DILocation(line: 95, column: 3, scope: !502)
!527 = !DILocation(line: 95, column: 6, scope: !502)
!528 = !DILocation(line: 95, column: 15, scope: !502)
!529 = !DILocation(line: 96, column: 10, scope: !502)
!530 = !DILocation(line: 96, column: 3, scope: !502)
!531 = distinct !DISubprogram(name: "robust_getcwd", scope: !3, file: !3, line: 268, type: !532, scopeLine: 269, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!532 = !DISubroutineType(types: !533)
!533 = !{null, !352}
!534 = !DILocalVariable(name: "file_name", arg: 1, scope: !531, file: !3, line: 268, type: !352)
!535 = !DILocation(line: 268, column: 34, scope: !531)
!536 = !DILocalVariable(name: "height", scope: !531, file: !3, line: 270, type: !74)
!537 = !DILocation(line: 270, column: 10, scope: !531)
!538 = !DILocalVariable(name: "dev_ino_buf", scope: !531, file: !3, line: 271, type: !539)
!539 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dev_ino", file: !540, line: 7, size: 128, elements: !541)
!540 = !DIFile(filename: "./lib/dev-ino.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!541 = !{!542, !545}
!542 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !539, file: !540, line: 9, baseType: !543, size: 64)
!543 = !DIDerivedType(tag: DW_TAG_typedef, name: "ino_t", file: !544, line: 47, baseType: !380)
!544 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/sys/types.h", directory: "")
!545 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !539, file: !540, line: 10, baseType: !546, size: 64, offset: 64)
!546 = !DIDerivedType(tag: DW_TAG_typedef, name: "dev_t", file: !544, line: 59, baseType: !377)
!547 = !DILocation(line: 271, column: 18, scope: !531)
!548 = !DILocalVariable(name: "root_dev_ino", scope: !531, file: !3, line: 272, type: !549)
!549 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !539, size: 64)
!550 = !DILocation(line: 272, column: 19, scope: !531)
!551 = !DILocation(line: 272, column: 34, scope: !531)
!552 = !DILocalVariable(name: "dot_sb", scope: !531, file: !3, line: 273, type: !373)
!553 = !DILocation(line: 273, column: 15, scope: !531)
!554 = !DILocation(line: 275, column: 7, scope: !555)
!555 = distinct !DILexicalBlock(scope: !531, file: !3, line: 275, column: 7)
!556 = !DILocation(line: 275, column: 20, scope: !555)
!557 = !DILocation(line: 275, column: 7, scope: !531)
!558 = !DILocation(line: 276, column: 5, scope: !555)
!559 = !DILocation(line: 279, column: 7, scope: !560)
!560 = distinct !DILexicalBlock(scope: !531, file: !3, line: 279, column: 7)
!561 = !DILocation(line: 279, column: 27, scope: !560)
!562 = !DILocation(line: 279, column: 7, scope: !531)
!563 = !DILocation(line: 280, column: 5, scope: !560)
!564 = !DILocation(line: 282, column: 3, scope: !531)
!565 = !DILocation(line: 285, column: 11, scope: !566)
!566 = distinct !DILexicalBlock(scope: !567, file: !3, line: 285, column: 11)
!567 = distinct !DILexicalBlock(scope: !531, file: !3, line: 283, column: 5)
!568 = !DILocation(line: 285, column: 11, scope: !567)
!569 = !DILocation(line: 286, column: 9, scope: !566)
!570 = !DILocation(line: 288, column: 32, scope: !567)
!571 = !DILocation(line: 288, column: 49, scope: !567)
!572 = !DILocation(line: 288, column: 7, scope: !567)
!573 = distinct !{!573, !564, !574}
!574 = !DILocation(line: 289, column: 5, scope: !531)
!575 = !DILocation(line: 292, column: 7, scope: !576)
!576 = distinct !DILexicalBlock(scope: !531, file: !3, line: 292, column: 7)
!577 = !DILocation(line: 292, column: 18, scope: !576)
!578 = !DILocation(line: 292, column: 27, scope: !576)
!579 = !DILocation(line: 292, column: 7, scope: !531)
!580 = !DILocation(line: 293, column: 24, scope: !576)
!581 = !DILocation(line: 293, column: 5, scope: !576)
!582 = !DILocation(line: 294, column: 1, scope: !531)
!583 = !DILocalVariable(name: "file_name", arg: 1, scope: !584, file: !3, line: 268, type: !587)
!584 = distinct !DISubprogram(name: "robust_getcwd", scope: !3, file: !3, line: 268, type: !585, scopeLine: 269, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !593, retainedNodes: !4)
!585 = !DISubroutineType(types: !586)
!586 = !{null, !587}
!587 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !588, size: 64)
!588 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "file_name", file: !3, line: 34, size: 192, elements: !589)
!589 = !{!590, !591, !592}
!590 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !588, file: !3, line: 36, baseType: !7, size: 64)
!591 = !DIDerivedType(tag: DW_TAG_member, name: "n_alloc", scope: !588, file: !3, line: 37, baseType: !74, size: 64, offset: 64)
!592 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !588, file: !3, line: 38, baseType: !7, size: 64, offset: 128)
!593 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !594, nameTableKind: None)
!594 = !{!595}
!595 = !DIGlobalVariableExpression(var: !596, expr: !DIExpression())
!596 = distinct !DIGlobalVariable(name: "longopts", scope: !593, file: !3, line: 41, type: !597, isLocal: true, isDefinition: true)
!597 = !DICompositeType(tag: DW_TAG_array_type, baseType: !598, size: 1280, elements: !23)
!598 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !599)
!599 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !600)
!600 = !{!601, !602, !603, !604}
!601 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !599, file: !13, line: 52, baseType: !16, size: 64)
!602 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !599, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!603 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !599, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!604 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !599, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!605 = !DILocalVariable(name: "height", scope: !584, file: !3, line: 270, type: !74)
!606 = !DILocalVariable(name: "dev_ino_buf", scope: !584, file: !3, line: 271, type: !607)
!607 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dev_ino", file: !540, line: 7, size: 128, elements: !608)
!608 = !{!609, !610}
!609 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !607, file: !540, line: 9, baseType: !543, size: 64)
!610 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !607, file: !540, line: 10, baseType: !546, size: 64, offset: 64)
!611 = !DILocalVariable(name: "root_dev_ino", scope: !584, file: !3, line: 272, type: !612)
!612 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !607, size: 64)
!613 = !DILocalVariable(name: "dot_sb", scope: !584, file: !3, line: 273, type: !614)
!614 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !374, line: 46, size: 1152, elements: !615)
!615 = !{!616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !632, !633, !634}
!616 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !614, file: !374, line: 48, baseType: !377, size: 64)
!617 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !614, file: !374, line: 53, baseType: !380, size: 64, offset: 64)
!618 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !614, file: !374, line: 61, baseType: !382, size: 64, offset: 128)
!619 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !614, file: !374, line: 62, baseType: !384, size: 32, offset: 192)
!620 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !614, file: !374, line: 64, baseType: !386, size: 32, offset: 224)
!621 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !614, file: !374, line: 65, baseType: !388, size: 32, offset: 256)
!622 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !614, file: !374, line: 67, baseType: !19, size: 32, offset: 288)
!623 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !614, file: !374, line: 69, baseType: !377, size: 64, offset: 320)
!624 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !614, file: !374, line: 74, baseType: !392, size: 64, offset: 384)
!625 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !614, file: !374, line: 78, baseType: !395, size: 64, offset: 448)
!626 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !614, file: !374, line: 80, baseType: !397, size: 64, offset: 512)
!627 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !614, file: !374, line: 91, baseType: !628, size: 128, offset: 576)
!628 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !400, line: 10, size: 128, elements: !629)
!629 = !{!630, !631}
!630 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !628, file: !400, line: 12, baseType: !403, size: 64)
!631 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !628, file: !400, line: 16, baseType: !405, size: 64, offset: 64)
!632 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !614, file: !374, line: 92, baseType: !628, size: 128, offset: 704)
!633 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !614, file: !374, line: 93, baseType: !628, size: 128, offset: 832)
!634 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !614, file: !374, line: 106, baseType: !409, size: 192, offset: 960)
!635 = distinct !DISubprogram(name: "file_name_free", scope: !3, file: !3, line: 78, type: !532, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!636 = !DILocalVariable(name: "p", arg: 1, scope: !635, file: !3, line: 78, type: !352)
!637 = !DILocation(line: 78, column: 35, scope: !635)
!638 = !DILocation(line: 80, column: 9, scope: !635)
!639 = !DILocation(line: 80, column: 12, scope: !635)
!640 = !DILocation(line: 80, column: 3, scope: !635)
!641 = !DILocation(line: 81, column: 9, scope: !635)
!642 = !DILocation(line: 81, column: 3, scope: !635)
!643 = !DILocation(line: 82, column: 1, scope: !635)
!644 = !DILocalVariable(name: "p", arg: 1, scope: !645, file: !3, line: 78, type: !648)
!645 = distinct !DISubprogram(name: "file_name_free", scope: !3, file: !3, line: 78, type: !646, scopeLine: 79, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !654, retainedNodes: !4)
!646 = !DISubroutineType(types: !647)
!647 = !{null, !648}
!648 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !649, size: 64)
!649 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "file_name", file: !3, line: 34, size: 192, elements: !650)
!650 = !{!651, !652, !653}
!651 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !649, file: !3, line: 36, baseType: !7, size: 64)
!652 = !DIDerivedType(tag: DW_TAG_member, name: "n_alloc", scope: !649, file: !3, line: 37, baseType: !74, size: 64, offset: 64)
!653 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !649, file: !3, line: 38, baseType: !7, size: 64, offset: 128)
!654 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !655, nameTableKind: None)
!655 = !{!656}
!656 = !DIGlobalVariableExpression(var: !657, expr: !DIExpression())
!657 = distinct !DIGlobalVariable(name: "longopts", scope: !654, file: !3, line: 41, type: !658, isLocal: true, isDefinition: true)
!658 = !DICompositeType(tag: DW_TAG_array_type, baseType: !659, size: 1280, elements: !23)
!659 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !660)
!660 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !661)
!661 = !{!662, !663, !664, !665}
!662 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !660, file: !13, line: 52, baseType: !16, size: 64)
!663 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !660, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!664 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !660, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!665 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !660, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!666 = distinct !DISubprogram(name: "find_dir_entry", scope: !3, file: !3, line: 153, type: !667, scopeLine: 155, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!667 = !DISubroutineType(types: !668)
!668 = !{null, !669, !352, !74}
!669 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !373, size: 64)
!670 = !DILocalVariable(name: "dot_sb", arg: 1, scope: !666, file: !3, line: 153, type: !669)
!671 = !DILocation(line: 153, column: 30, scope: !666)
!672 = !DILocalVariable(name: "file_name", arg: 2, scope: !666, file: !3, line: 153, type: !352)
!673 = !DILocation(line: 153, column: 56, scope: !666)
!674 = !DILocalVariable(name: "parent_height", arg: 3, scope: !666, file: !3, line: 154, type: !74)
!675 = !DILocation(line: 154, column: 24, scope: !666)
!676 = !DILocalVariable(name: "dirp", scope: !666, file: !3, line: 156, type: !677)
!677 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !678, size: 64)
!678 = !DIDerivedType(tag: DW_TAG_typedef, name: "DIR", file: !679, line: 127, baseType: !680)
!679 = !DIFile(filename: "/usr/include/dirent.h", directory: "")
!680 = !DICompositeType(tag: DW_TAG_structure_type, name: "__dirstream", file: !679, line: 127, flags: DIFlagFwdDecl)
!681 = !DILocation(line: 156, column: 8, scope: !666)
!682 = !DILocalVariable(name: "fd", scope: !666, file: !3, line: 157, type: !19)
!683 = !DILocation(line: 157, column: 7, scope: !666)
!684 = !DILocalVariable(name: "parent_sb", scope: !666, file: !3, line: 158, type: !373)
!685 = !DILocation(line: 158, column: 15, scope: !666)
!686 = !DILocalVariable(name: "use_lstat", scope: !666, file: !3, line: 159, type: !38)
!687 = !DILocation(line: 159, column: 8, scope: !666)
!688 = !DILocalVariable(name: "found", scope: !666, file: !3, line: 160, type: !38)
!689 = !DILocation(line: 160, column: 8, scope: !666)
!690 = !DILocation(line: 162, column: 10, scope: !666)
!691 = !DILocation(line: 162, column: 8, scope: !666)
!692 = !DILocation(line: 163, column: 7, scope: !693)
!693 = distinct !DILexicalBlock(scope: !666, file: !3, line: 163, column: 7)
!694 = !DILocation(line: 163, column: 12, scope: !693)
!695 = !DILocation(line: 163, column: 7, scope: !666)
!696 = !DILocation(line: 164, column: 5, scope: !693)
!697 = !DILocation(line: 167, column: 15, scope: !666)
!698 = !DILocation(line: 167, column: 8, scope: !666)
!699 = !DILocation(line: 167, column: 6, scope: !666)
!700 = !DILocation(line: 168, column: 13, scope: !701)
!701 = distinct !DILexicalBlock(scope: !666, file: !3, line: 168, column: 7)
!702 = !DILocation(line: 168, column: 10, scope: !701)
!703 = !DILocation(line: 168, column: 8, scope: !701)
!704 = !DILocation(line: 168, column: 26, scope: !701)
!705 = !DILocation(line: 168, column: 18, scope: !701)
!706 = !DILocation(line: 168, column: 32, scope: !701)
!707 = !DILocation(line: 168, column: 46, scope: !701)
!708 = !DILocation(line: 168, column: 7, scope: !666)
!709 = !DILocation(line: 169, column: 5, scope: !701)
!710 = !DILocation(line: 172, column: 13, scope: !711)
!711 = distinct !DILexicalBlock(scope: !666, file: !3, line: 172, column: 7)
!712 = !DILocation(line: 172, column: 10, scope: !711)
!713 = !DILocation(line: 172, column: 8, scope: !711)
!714 = !DILocation(line: 172, column: 25, scope: !711)
!715 = !DILocation(line: 172, column: 18, scope: !711)
!716 = !DILocation(line: 172, column: 43, scope: !711)
!717 = !DILocation(line: 172, column: 67, scope: !711)
!718 = !DILocation(line: 172, column: 7, scope: !666)
!719 = !DILocation(line: 173, column: 5, scope: !711)
!720 = !DILocation(line: 178, column: 26, scope: !666)
!721 = !DILocation(line: 178, column: 36, scope: !666)
!722 = !DILocation(line: 178, column: 44, scope: !666)
!723 = !DILocation(line: 178, column: 33, scope: !666)
!724 = !DILocation(line: 178, column: 13, scope: !666)
!725 = !DILocation(line: 180, column: 9, scope: !666)
!726 = !DILocation(line: 181, column: 3, scope: !666)
!727 = !DILocalVariable(name: "dp", scope: !728, file: !3, line: 183, type: !729)
!728 = distinct !DILexicalBlock(scope: !666, file: !3, line: 182, column: 5)
!729 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !730, size: 64)
!730 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !731)
!731 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dirent", file: !732, line: 22, size: 2240, elements: !733)
!732 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/dirent.h", directory: "")
!733 = !{!734, !735, !736, !737, !738}
!734 = !DIDerivedType(tag: DW_TAG_member, name: "d_ino", scope: !731, file: !732, line: 25, baseType: !380, size: 64)
!735 = !DIDerivedType(tag: DW_TAG_member, name: "d_off", scope: !731, file: !732, line: 26, baseType: !392, size: 64, offset: 64)
!736 = !DIDerivedType(tag: DW_TAG_member, name: "d_reclen", scope: !731, file: !732, line: 31, baseType: !73, size: 16, offset: 128)
!737 = !DIDerivedType(tag: DW_TAG_member, name: "d_type", scope: !731, file: !732, line: 32, baseType: !148, size: 8, offset: 144)
!738 = !DIDerivedType(tag: DW_TAG_member, name: "d_name", scope: !731, file: !732, line: 33, baseType: !105, size: 2048, offset: 152)
!739 = !DILocation(line: 183, column: 28, scope: !728)
!740 = !DILocalVariable(name: "ent_sb", scope: !728, file: !3, line: 184, type: !373)
!741 = !DILocation(line: 184, column: 19, scope: !728)
!742 = !DILocalVariable(name: "ino", scope: !728, file: !3, line: 185, type: !543)
!743 = !DILocation(line: 185, column: 13, scope: !728)
!744 = !DILocation(line: 187, column: 7, scope: !728)
!745 = !DILocation(line: 187, column: 13, scope: !728)
!746 = !DILocation(line: 188, column: 50, scope: !747)
!747 = distinct !DILexicalBlock(scope: !728, file: !3, line: 188, column: 11)
!748 = !DILocation(line: 188, column: 17, scope: !747)
!749 = !DILocation(line: 188, column: 15, scope: !747)
!750 = !DILocation(line: 188, column: 57, scope: !747)
!751 = !DILocation(line: 188, column: 11, scope: !728)
!752 = !DILocation(line: 190, column: 15, scope: !753)
!753 = distinct !DILexicalBlock(scope: !754, file: !3, line: 190, column: 15)
!754 = distinct !DILexicalBlock(scope: !747, file: !3, line: 189, column: 9)
!755 = !DILocation(line: 190, column: 15, scope: !754)
!756 = !DILocalVariable(name: "e", scope: !757, file: !3, line: 193, type: !19)
!757 = distinct !DILexicalBlock(scope: !753, file: !3, line: 191, column: 13)
!758 = !DILocation(line: 193, column: 19, scope: !757)
!759 = !DILocation(line: 193, column: 23, scope: !757)
!760 = !DILocation(line: 194, column: 25, scope: !757)
!761 = !DILocation(line: 194, column: 15, scope: !757)
!762 = !DILocation(line: 195, column: 23, scope: !757)
!763 = !DILocation(line: 195, column: 15, scope: !757)
!764 = !DILocation(line: 195, column: 21, scope: !757)
!765 = !DILocation(line: 198, column: 20, scope: !757)
!766 = !DILocation(line: 199, column: 13, scope: !757)
!767 = !DILocation(line: 200, column: 11, scope: !754)
!768 = !DILocation(line: 203, column: 13, scope: !728)
!769 = !DILocation(line: 203, column: 11, scope: !728)
!770 = !DILocation(line: 205, column: 11, scope: !771)
!771 = distinct !DILexicalBlock(scope: !728, file: !3, line: 205, column: 11)
!772 = !DILocation(line: 205, column: 15, scope: !771)
!773 = !DILocation(line: 205, column: 38, scope: !771)
!774 = !DILocation(line: 205, column: 41, scope: !771)
!775 = !DILocation(line: 205, column: 11, scope: !728)
!776 = !DILocation(line: 207, column: 22, scope: !777)
!777 = distinct !DILexicalBlock(scope: !778, file: !3, line: 207, column: 15)
!778 = distinct !DILexicalBlock(scope: !771, file: !3, line: 206, column: 9)
!779 = !DILocation(line: 207, column: 26, scope: !777)
!780 = !DILocation(line: 207, column: 15, scope: !777)
!781 = !DILocation(line: 207, column: 43, scope: !777)
!782 = !DILocation(line: 207, column: 15, scope: !778)
!783 = !DILocation(line: 210, column: 15, scope: !784)
!784 = distinct !DILexicalBlock(scope: !777, file: !3, line: 208, column: 13)
!785 = distinct !{!785, !726, !786}
!786 = !DILocation(line: 226, column: 5, scope: !666)
!787 = !DILocation(line: 212, column: 24, scope: !778)
!788 = !DILocation(line: 212, column: 15, scope: !778)
!789 = !DILocation(line: 213, column: 9, scope: !778)
!790 = !DILocation(line: 215, column: 11, scope: !791)
!791 = distinct !DILexicalBlock(scope: !728, file: !3, line: 215, column: 11)
!792 = !DILocation(line: 215, column: 18, scope: !791)
!793 = !DILocation(line: 215, column: 26, scope: !791)
!794 = !DILocation(line: 215, column: 15, scope: !791)
!795 = !DILocation(line: 215, column: 11, scope: !728)
!796 = !DILocation(line: 216, column: 9, scope: !791)
!797 = !DILocation(line: 220, column: 14, scope: !798)
!798 = distinct !DILexicalBlock(scope: !728, file: !3, line: 220, column: 12)
!799 = !DILocation(line: 220, column: 24, scope: !798)
!800 = !DILocation(line: 220, column: 34, scope: !798)
!801 = !DILocation(line: 220, column: 44, scope: !798)
!802 = !DILocation(line: 220, column: 52, scope: !798)
!803 = !DILocation(line: 220, column: 41, scope: !798)
!804 = !DILocation(line: 220, column: 12, scope: !728)
!805 = !DILocation(line: 222, column: 30, scope: !806)
!806 = distinct !DILexicalBlock(scope: !798, file: !3, line: 221, column: 9)
!807 = !DILocation(line: 222, column: 41, scope: !806)
!808 = !DILocation(line: 222, column: 45, scope: !806)
!809 = !DILocation(line: 222, column: 53, scope: !806)
!810 = !DILocation(line: 222, column: 11, scope: !806)
!811 = !DILocation(line: 223, column: 17, scope: !806)
!812 = !DILocation(line: 224, column: 11, scope: !806)
!813 = !DILocation(line: 228, column: 7, scope: !814)
!814 = distinct !DILexicalBlock(scope: !666, file: !3, line: 228, column: 7)
!815 = !DILocation(line: 228, column: 12, scope: !814)
!816 = !DILocation(line: 228, column: 20, scope: !814)
!817 = !DILocation(line: 228, column: 33, scope: !814)
!818 = !DILocation(line: 228, column: 23, scope: !814)
!819 = !DILocation(line: 228, column: 39, scope: !814)
!820 = !DILocation(line: 228, column: 7, scope: !666)
!821 = !DILocation(line: 232, column: 7, scope: !822)
!822 = distinct !DILexicalBlock(scope: !814, file: !3, line: 229, column: 5)
!823 = !DILocation(line: 236, column: 10, scope: !824)
!824 = distinct !DILexicalBlock(scope: !666, file: !3, line: 236, column: 8)
!825 = !DILocation(line: 236, column: 8, scope: !666)
!826 = !DILocation(line: 237, column: 5, scope: !824)
!827 = !DILocation(line: 241, column: 4, scope: !666)
!828 = !DILocation(line: 241, column: 13, scope: !666)
!829 = !DILocation(line: 242, column: 1, scope: !666)
!830 = distinct !DISubprogram(name: "file_name_prepend", scope: !3, file: !3, line: 101, type: !831, scopeLine: 102, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!831 = !DISubroutineType(types: !832)
!832 = !{null, !352, !16, !74}
!833 = !DILocalVariable(name: "p", arg: 1, scope: !830, file: !3, line: 101, type: !352)
!834 = !DILocation(line: 101, column: 38, scope: !830)
!835 = !DILocalVariable(name: "s", arg: 2, scope: !830, file: !3, line: 101, type: !16)
!836 = !DILocation(line: 101, column: 53, scope: !830)
!837 = !DILocalVariable(name: "s_len", arg: 3, scope: !830, file: !3, line: 101, type: !74)
!838 = !DILocation(line: 101, column: 63, scope: !830)
!839 = !DILocalVariable(name: "n_free", scope: !830, file: !3, line: 103, type: !74)
!840 = !DILocation(line: 103, column: 10, scope: !830)
!841 = !DILocation(line: 103, column: 19, scope: !830)
!842 = !DILocation(line: 103, column: 22, scope: !830)
!843 = !DILocation(line: 103, column: 30, scope: !830)
!844 = !DILocation(line: 103, column: 33, scope: !830)
!845 = !DILocation(line: 103, column: 28, scope: !830)
!846 = !DILocation(line: 104, column: 7, scope: !847)
!847 = distinct !DILexicalBlock(scope: !830, file: !3, line: 104, column: 7)
!848 = !DILocation(line: 104, column: 20, scope: !847)
!849 = !DILocation(line: 104, column: 18, scope: !847)
!850 = !DILocation(line: 104, column: 14, scope: !847)
!851 = !DILocation(line: 104, column: 7, scope: !830)
!852 = !DILocalVariable(name: "half", scope: !853, file: !3, line: 106, type: !74)
!853 = distinct !DILexicalBlock(scope: !847, file: !3, line: 105, column: 5)
!854 = !DILocation(line: 106, column: 14, scope: !853)
!855 = !DILocation(line: 106, column: 21, scope: !853)
!856 = !DILocation(line: 106, column: 24, scope: !853)
!857 = !DILocation(line: 106, column: 32, scope: !853)
!858 = !DILocation(line: 106, column: 38, scope: !853)
!859 = !DILocation(line: 106, column: 36, scope: !853)
!860 = !DILocalVariable(name: "q", scope: !853, file: !3, line: 111, type: !7)
!861 = !DILocation(line: 111, column: 13, scope: !853)
!862 = !DILocation(line: 111, column: 30, scope: !853)
!863 = !DILocation(line: 111, column: 17, scope: !853)
!864 = !DILocalVariable(name: "n_used", scope: !853, file: !3, line: 112, type: !74)
!865 = !DILocation(line: 112, column: 14, scope: !853)
!866 = !DILocation(line: 112, column: 23, scope: !853)
!867 = !DILocation(line: 112, column: 26, scope: !853)
!868 = !DILocation(line: 112, column: 36, scope: !853)
!869 = !DILocation(line: 112, column: 34, scope: !853)
!870 = !DILocation(line: 113, column: 18, scope: !853)
!871 = !DILocation(line: 113, column: 26, scope: !853)
!872 = !DILocation(line: 113, column: 24, scope: !853)
!873 = !DILocation(line: 113, column: 20, scope: !853)
!874 = !DILocation(line: 113, column: 33, scope: !853)
!875 = !DILocation(line: 113, column: 31, scope: !853)
!876 = !DILocation(line: 113, column: 7, scope: !853)
!877 = !DILocation(line: 113, column: 10, scope: !853)
!878 = !DILocation(line: 113, column: 16, scope: !853)
!879 = !DILocation(line: 114, column: 15, scope: !853)
!880 = !DILocation(line: 114, column: 18, scope: !853)
!881 = !DILocation(line: 114, column: 25, scope: !853)
!882 = !DILocation(line: 114, column: 28, scope: !853)
!883 = !DILocation(line: 114, column: 34, scope: !853)
!884 = !DILocation(line: 114, column: 32, scope: !853)
!885 = !DILocation(line: 114, column: 42, scope: !853)
!886 = !DILocation(line: 114, column: 7, scope: !853)
!887 = !DILocation(line: 115, column: 13, scope: !853)
!888 = !DILocation(line: 115, column: 16, scope: !853)
!889 = !DILocation(line: 115, column: 7, scope: !853)
!890 = !DILocation(line: 116, column: 16, scope: !853)
!891 = !DILocation(line: 116, column: 7, scope: !853)
!892 = !DILocation(line: 116, column: 10, scope: !853)
!893 = !DILocation(line: 116, column: 14, scope: !853)
!894 = !DILocation(line: 117, column: 24, scope: !853)
!895 = !DILocation(line: 117, column: 22, scope: !853)
!896 = !DILocation(line: 117, column: 7, scope: !853)
!897 = !DILocation(line: 117, column: 10, scope: !853)
!898 = !DILocation(line: 117, column: 18, scope: !853)
!899 = !DILocation(line: 118, column: 5, scope: !853)
!900 = !DILocation(line: 120, column: 19, scope: !830)
!901 = !DILocation(line: 120, column: 17, scope: !830)
!902 = !DILocation(line: 120, column: 3, scope: !830)
!903 = !DILocation(line: 120, column: 6, scope: !830)
!904 = !DILocation(line: 120, column: 12, scope: !830)
!905 = !DILocation(line: 121, column: 3, scope: !830)
!906 = !DILocation(line: 121, column: 6, scope: !830)
!907 = !DILocation(line: 121, column: 15, scope: !830)
!908 = !DILocation(line: 122, column: 11, scope: !830)
!909 = !DILocation(line: 122, column: 14, scope: !830)
!910 = !DILocation(line: 122, column: 20, scope: !830)
!911 = !DILocation(line: 122, column: 25, scope: !830)
!912 = !DILocation(line: 122, column: 28, scope: !830)
!913 = !DILocation(line: 122, column: 3, scope: !830)
!914 = !DILocation(line: 123, column: 1, scope: !830)
!915 = !DILocalVariable(name: "q", scope: !916, file: !3, line: 111, type: !7)
!916 = distinct !DILexicalBlock(scope: !917, file: !3, line: 105, column: 5)
!917 = distinct !DILexicalBlock(scope: !918, file: !3, line: 104, column: 7)
!918 = distinct !DISubprogram(name: "file_name_prepend", scope: !3, file: !3, line: 101, type: !919, scopeLine: 102, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !927, retainedNodes: !4)
!919 = !DISubroutineType(types: !920)
!920 = !{null, !921, !16, !74}
!921 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !922, size: 64)
!922 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "file_name", file: !3, line: 34, size: 192, elements: !923)
!923 = !{!924, !925, !926}
!924 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !922, file: !3, line: 36, baseType: !7, size: 64)
!925 = !DIDerivedType(tag: DW_TAG_member, name: "n_alloc", scope: !922, file: !3, line: 37, baseType: !74, size: 64, offset: 64)
!926 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !922, file: !3, line: 38, baseType: !7, size: 64, offset: 128)
!927 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !928, nameTableKind: None)
!928 = !{!929}
!929 = !DIGlobalVariableExpression(var: !930, expr: !DIExpression())
!930 = distinct !DIGlobalVariable(name: "longopts", scope: !927, file: !3, line: 41, type: !931, isLocal: true, isDefinition: true)
!931 = !DICompositeType(tag: DW_TAG_array_type, baseType: !932, size: 1280, elements: !23)
!932 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !933)
!933 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !934)
!934 = !{!935, !936, !937, !938}
!935 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !933, file: !13, line: 52, baseType: !16, size: 64)
!936 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !933, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!937 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !933, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!938 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !933, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!939 = !DILocalVariable(name: "n_used", scope: !916, file: !3, line: 112, type: !74)
!940 = distinct !DISubprogram(name: "nth_parent", scope: !3, file: !3, line: 127, type: !941, scopeLine: 128, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!941 = !DISubroutineType(types: !942)
!942 = !{!7, !74}
!943 = !DILocalVariable(name: "n", arg: 1, scope: !940, file: !3, line: 127, type: !74)
!944 = !DILocation(line: 127, column: 20, scope: !940)
!945 = !DILocalVariable(name: "buf", scope: !940, file: !3, line: 129, type: !7)
!946 = !DILocation(line: 129, column: 9, scope: !940)
!947 = !DILocation(line: 129, column: 28, scope: !940)
!948 = !DILocation(line: 129, column: 15, scope: !940)
!949 = !DILocalVariable(name: "p", scope: !940, file: !3, line: 130, type: !7)
!950 = !DILocation(line: 130, column: 9, scope: !940)
!951 = !DILocation(line: 130, column: 13, scope: !940)
!952 = !DILocalVariable(name: "i", scope: !953, file: !3, line: 132, type: !74)
!953 = distinct !DILexicalBlock(scope: !940, file: !3, line: 132, column: 3)
!954 = !DILocation(line: 132, column: 15, scope: !953)
!955 = !DILocation(line: 132, column: 8, scope: !953)
!956 = !DILocation(line: 132, column: 22, scope: !957)
!957 = distinct !DILexicalBlock(scope: !953, file: !3, line: 132, column: 3)
!958 = !DILocation(line: 132, column: 26, scope: !957)
!959 = !DILocation(line: 132, column: 24, scope: !957)
!960 = !DILocation(line: 132, column: 3, scope: !953)
!961 = !DILocation(line: 134, column: 15, scope: !962)
!962 = distinct !DILexicalBlock(scope: !957, file: !3, line: 133, column: 5)
!963 = !DILocation(line: 134, column: 7, scope: !962)
!964 = !DILocation(line: 135, column: 9, scope: !962)
!965 = !DILocation(line: 136, column: 5, scope: !962)
!966 = !DILocation(line: 132, column: 30, scope: !957)
!967 = !DILocation(line: 132, column: 3, scope: !957)
!968 = distinct !{!968, !960, !969}
!969 = !DILocation(line: 136, column: 5, scope: !953)
!970 = !DILocation(line: 137, column: 3, scope: !940)
!971 = !DILocation(line: 137, column: 9, scope: !940)
!972 = !DILocation(line: 138, column: 10, scope: !940)
!973 = !DILocation(line: 138, column: 3, scope: !940)
!974 = distinct !DISubprogram(name: "readdir_ignoring_dot_and_dotdot", scope: !198, file: !198, line: 278, type: !975, scopeLine: 279, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!975 = !DISubroutineType(types: !976)
!976 = !{!729, !677}
!977 = !DILocalVariable(name: "dirp", arg: 1, scope: !974, file: !198, line: 278, type: !677)
!978 = !DILocation(line: 278, column: 39, scope: !974)
!979 = !DILocation(line: 280, column: 3, scope: !974)
!980 = !DILocalVariable(name: "dp", scope: !981, file: !198, line: 282, type: !729)
!981 = distinct !DILexicalBlock(scope: !974, file: !198, line: 281, column: 5)
!982 = !DILocation(line: 282, column: 28, scope: !981)
!983 = !DILocation(line: 282, column: 42, scope: !981)
!984 = !DILocation(line: 282, column: 33, scope: !981)
!985 = !DILocation(line: 283, column: 11, scope: !986)
!986 = distinct !DILexicalBlock(scope: !981, file: !198, line: 283, column: 11)
!987 = !DILocation(line: 283, column: 14, scope: !986)
!988 = !DILocation(line: 283, column: 22, scope: !986)
!989 = !DILocation(line: 283, column: 42, scope: !986)
!990 = !DILocation(line: 283, column: 46, scope: !986)
!991 = !DILocation(line: 283, column: 27, scope: !986)
!992 = !DILocation(line: 283, column: 11, scope: !981)
!993 = !DILocation(line: 284, column: 16, scope: !986)
!994 = !DILocation(line: 284, column: 9, scope: !986)
!995 = distinct !{!995, !979, !996}
!996 = !DILocation(line: 285, column: 5, scope: !974)
!997 = !DILocalVariable(name: "dirp", arg: 1, scope: !998, file: !198, line: 278, type: !677)
!998 = distinct !DISubprogram(name: "readdir_ignoring_dot_and_dotdot", scope: !198, file: !198, line: 278, type: !999, scopeLine: 279, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1010, retainedNodes: !4)
!999 = !DISubroutineType(types: !1000)
!1000 = !{!1001, !677}
!1001 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1002, size: 64)
!1002 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1003)
!1003 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dirent", file: !732, line: 22, size: 2240, elements: !1004)
!1004 = !{!1005, !1006, !1007, !1008, !1009}
!1005 = !DIDerivedType(tag: DW_TAG_member, name: "d_ino", scope: !1003, file: !732, line: 25, baseType: !380, size: 64)
!1006 = !DIDerivedType(tag: DW_TAG_member, name: "d_off", scope: !1003, file: !732, line: 26, baseType: !392, size: 64, offset: 64)
!1007 = !DIDerivedType(tag: DW_TAG_member, name: "d_reclen", scope: !1003, file: !732, line: 31, baseType: !73, size: 16, offset: 128)
!1008 = !DIDerivedType(tag: DW_TAG_member, name: "d_type", scope: !1003, file: !732, line: 32, baseType: !148, size: 8, offset: 144)
!1009 = !DIDerivedType(tag: DW_TAG_member, name: "d_name", scope: !1003, file: !732, line: 33, baseType: !105, size: 2048, offset: 152)
!1010 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !1011, nameTableKind: None)
!1011 = !{!1012}
!1012 = !DIGlobalVariableExpression(var: !1013, expr: !DIExpression())
!1013 = distinct !DIGlobalVariable(name: "longopts", scope: !1010, file: !3, line: 41, type: !1014, isLocal: true, isDefinition: true)
!1014 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1015, size: 1280, elements: !23)
!1015 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1016)
!1016 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !13, line: 50, size: 256, elements: !1017)
!1017 = !{!1018, !1019, !1020, !1021}
!1018 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1016, file: !13, line: 52, baseType: !16, size: 64)
!1019 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !1016, file: !13, line: 55, baseType: !19, size: 32, offset: 64)
!1020 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !1016, file: !13, line: 56, baseType: !21, size: 64, offset: 128)
!1021 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1016, file: !13, line: 57, baseType: !19, size: 32, offset: 192)
!1022 = distinct !DISubprogram(name: "dot_or_dotdot", scope: !198, file: !198, line: 265, type: !1023, scopeLine: 266, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !4)
!1023 = !DISubroutineType(types: !1024)
!1024 = !{!38, !16}
!1025 = !DILocalVariable(name: "file_name", arg: 1, scope: !1022, file: !198, line: 265, type: !16)
!1026 = !DILocation(line: 265, column: 28, scope: !1022)
!1027 = !DILocation(line: 267, column: 7, scope: !1028)
!1028 = distinct !DILexicalBlock(scope: !1022, file: !198, line: 267, column: 7)
!1029 = !DILocation(line: 267, column: 20, scope: !1028)
!1030 = !DILocation(line: 267, column: 7, scope: !1022)
!1031 = !DILocalVariable(name: "sep", scope: !1032, file: !198, line: 269, type: !8)
!1032 = distinct !DILexicalBlock(scope: !1028, file: !198, line: 268, column: 5)
!1033 = !DILocation(line: 269, column: 12, scope: !1032)
!1034 = !DILocation(line: 269, column: 18, scope: !1032)
!1035 = !DILocation(line: 269, column: 29, scope: !1032)
!1036 = !DILocation(line: 269, column: 42, scope: !1032)
!1037 = !DILocation(line: 269, column: 50, scope: !1032)
!1038 = !DILocation(line: 270, column: 17, scope: !1032)
!1039 = !DILocation(line: 270, column: 21, scope: !1032)
!1040 = !DILocation(line: 270, column: 24, scope: !1032)
!1041 = !DILocation(line: 270, column: 7, scope: !1032)
!1042 = !DILocation(line: 273, column: 5, scope: !1028)
!1043 = !DILocation(line: 274, column: 1, scope: !1022)
!1044 = distinct !DISubprogram(name: "close_stdout", scope: !37, file: !37, line: 117, type: !1045, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !32, retainedNodes: !4)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{null}
!1047 = !DILocation(line: 119, column: 21, scope: !1048)
!1048 = distinct !DILexicalBlock(scope: !1044, file: !37, line: 119, column: 7)
!1049 = !DILocation(line: 119, column: 7, scope: !1048)
!1050 = !DILocation(line: 119, column: 29, scope: !1048)
!1051 = !DILocation(line: 120, column: 7, scope: !1048)
!1052 = !DILocation(line: 120, column: 12, scope: !1048)
!1053 = !DILocation(line: 120, column: 25, scope: !1048)
!1054 = !DILocation(line: 120, column: 28, scope: !1048)
!1055 = !DILocation(line: 120, column: 34, scope: !1048)
!1056 = !DILocation(line: 119, column: 7, scope: !1044)
!1057 = !DILocalVariable(name: "write_error", scope: !1058, file: !37, line: 122, type: !16)
!1058 = distinct !DILexicalBlock(scope: !1048, file: !37, line: 121, column: 5)
!1059 = !DILocation(line: 122, column: 19, scope: !1058)
!1060 = !DILocation(line: 122, column: 33, scope: !1058)
!1061 = !DILocation(line: 123, column: 11, scope: !1062)
!1062 = distinct !DILexicalBlock(scope: !1058, file: !37, line: 123, column: 11)
!1063 = !DILocation(line: 123, column: 11, scope: !1058)
!1064 = !DILocation(line: 124, column: 19, scope: !1062)
!1065 = !DILocation(line: 124, column: 52, scope: !1062)
!1066 = !DILocation(line: 124, column: 36, scope: !1062)
!1067 = !DILocation(line: 125, column: 16, scope: !1062)
!1068 = !DILocation(line: 124, column: 9, scope: !1062)
!1069 = !DILocation(line: 127, column: 19, scope: !1062)
!1070 = !DILocation(line: 127, column: 32, scope: !1062)
!1071 = !DILocation(line: 127, column: 9, scope: !1062)
!1072 = !DILocation(line: 129, column: 14, scope: !1058)
!1073 = !DILocation(line: 129, column: 7, scope: !1058)
!1074 = !DILocation(line: 134, column: 42, scope: !1075)
!1075 = distinct !DILexicalBlock(scope: !1044, file: !37, line: 134, column: 7)
!1076 = !DILocation(line: 134, column: 28, scope: !1075)
!1077 = !DILocation(line: 134, column: 50, scope: !1075)
!1078 = !DILocation(line: 134, column: 7, scope: !1044)
!1079 = !DILocation(line: 135, column: 12, scope: !1075)
!1080 = !DILocation(line: 135, column: 5, scope: !1075)
!1081 = !DILocation(line: 136, column: 1, scope: !1044)
!1082 = distinct !DISubprogram(name: "set_program_name", scope: !51, file: !51, line: 39, type: !199, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !48, retainedNodes: !4)
!1083 = !DILocalVariable(name: "argv0", arg: 1, scope: !1082, file: !51, line: 39, type: !16)
!1084 = !DILocation(line: 39, column: 31, scope: !1082)
!1085 = !DILocalVariable(name: "slash", scope: !1082, file: !51, line: 46, type: !16)
!1086 = !DILocation(line: 46, column: 15, scope: !1082)
!1087 = !DILocalVariable(name: "base", scope: !1082, file: !51, line: 47, type: !16)
!1088 = !DILocation(line: 47, column: 15, scope: !1082)
!1089 = !DILocation(line: 51, column: 7, scope: !1090)
!1090 = distinct !DILexicalBlock(scope: !1082, file: !51, line: 51, column: 7)
!1091 = !DILocation(line: 51, column: 13, scope: !1090)
!1092 = !DILocation(line: 51, column: 7, scope: !1082)
!1093 = !DILocation(line: 55, column: 14, scope: !1094)
!1094 = distinct !DILexicalBlock(scope: !1090, file: !51, line: 52, column: 5)
!1095 = !DILocation(line: 54, column: 7, scope: !1094)
!1096 = !DILocation(line: 56, column: 7, scope: !1094)
!1097 = !DILocation(line: 59, column: 20, scope: !1082)
!1098 = !DILocation(line: 59, column: 11, scope: !1082)
!1099 = !DILocation(line: 59, column: 9, scope: !1082)
!1100 = !DILocation(line: 60, column: 11, scope: !1082)
!1101 = !DILocation(line: 60, column: 17, scope: !1082)
!1102 = !DILocation(line: 60, column: 27, scope: !1082)
!1103 = !DILocation(line: 60, column: 33, scope: !1082)
!1104 = !DILocation(line: 60, column: 39, scope: !1082)
!1105 = !DILocation(line: 60, column: 8, scope: !1082)
!1106 = !DILocation(line: 61, column: 7, scope: !1107)
!1107 = distinct !DILexicalBlock(scope: !1082, file: !51, line: 61, column: 7)
!1108 = !DILocation(line: 61, column: 14, scope: !1107)
!1109 = !DILocation(line: 61, column: 12, scope: !1107)
!1110 = !DILocation(line: 61, column: 20, scope: !1107)
!1111 = !DILocation(line: 61, column: 25, scope: !1107)
!1112 = !DILocation(line: 61, column: 37, scope: !1107)
!1113 = !DILocation(line: 61, column: 42, scope: !1107)
!1114 = !DILocation(line: 61, column: 28, scope: !1107)
!1115 = !DILocation(line: 61, column: 61, scope: !1107)
!1116 = !DILocation(line: 61, column: 7, scope: !1082)
!1117 = !DILocation(line: 63, column: 15, scope: !1118)
!1118 = distinct !DILexicalBlock(scope: !1107, file: !51, line: 62, column: 5)
!1119 = !DILocation(line: 63, column: 13, scope: !1118)
!1120 = !DILocation(line: 64, column: 20, scope: !1121)
!1121 = distinct !DILexicalBlock(scope: !1118, file: !51, line: 64, column: 11)
!1122 = !DILocation(line: 64, column: 11, scope: !1121)
!1123 = !DILocation(line: 64, column: 36, scope: !1121)
!1124 = !DILocation(line: 64, column: 11, scope: !1118)
!1125 = !DILocation(line: 66, column: 19, scope: !1126)
!1126 = distinct !DILexicalBlock(scope: !1121, file: !51, line: 65, column: 9)
!1127 = !DILocation(line: 66, column: 24, scope: !1126)
!1128 = !DILocation(line: 66, column: 17, scope: !1126)
!1129 = !DILocation(line: 70, column: 52, scope: !1126)
!1130 = !DILocation(line: 70, column: 41, scope: !1126)
!1131 = !DILocation(line: 72, column: 9, scope: !1126)
!1132 = !DILocation(line: 73, column: 5, scope: !1118)
!1133 = !DILocation(line: 84, column: 18, scope: !1082)
!1134 = !DILocation(line: 84, column: 16, scope: !1082)
!1135 = !DILocation(line: 90, column: 38, scope: !1082)
!1136 = !DILocation(line: 90, column: 27, scope: !1082)
!1137 = !DILocation(line: 92, column: 1, scope: !1082)
!1138 = !DILocalVariable(name: "argv0", arg: 1, scope: !1139, file: !51, line: 39, type: !16)
!1139 = distinct !DISubprogram(name: "set_program_name", scope: !51, file: !51, line: 39, type: !199, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1140, retainedNodes: !4)
!1140 = distinct !DICompileUnit(language: DW_LANG_C99, file: !49, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !5, globals: !1141, nameTableKind: None)
!1141 = !{!1142}
!1142 = !DIGlobalVariableExpression(var: !1143, expr: !DIExpression())
!1143 = distinct !DIGlobalVariable(name: "program_name", scope: !1140, file: !51, line: 33, type: !16, isLocal: false, isDefinition: true)
!1144 = !DILocalVariable(name: "slash", scope: !1139, file: !51, line: 46, type: !16)
!1145 = !DILocalVariable(name: "base", scope: !1139, file: !51, line: 47, type: !16)
!1146 = distinct !DISubprogram(name: "set_char_quoting", scope: !80, file: !80, line: 152, type: !1147, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !4)
!1147 = !DISubroutineType(types: !1148)
!1148 = !{!19, !1149, !8, !19}
!1149 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !93, size: 64)
!1150 = !DILocalVariable(name: "o", arg: 1, scope: !1146, file: !80, line: 152, type: !1149)
!1151 = !DILocation(line: 152, column: 43, scope: !1146)
!1152 = !DILocalVariable(name: "c", arg: 2, scope: !1146, file: !80, line: 152, type: !8)
!1153 = !DILocation(line: 152, column: 51, scope: !1146)
!1154 = !DILocalVariable(name: "i", arg: 3, scope: !1146, file: !80, line: 152, type: !19)
!1155 = !DILocation(line: 152, column: 58, scope: !1146)
!1156 = !DILocalVariable(name: "uc", scope: !1146, file: !80, line: 154, type: !148)
!1157 = !DILocation(line: 154, column: 17, scope: !1146)
!1158 = !DILocation(line: 154, column: 22, scope: !1146)
!1159 = !DILocalVariable(name: "p", scope: !1146, file: !80, line: 155, type: !1160)
!1160 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !59, size: 64)
!1161 = !DILocation(line: 155, column: 17, scope: !1146)
!1162 = !DILocation(line: 156, column: 6, scope: !1146)
!1163 = !DILocation(line: 156, column: 10, scope: !1146)
!1164 = !DILocation(line: 156, column: 41, scope: !1146)
!1165 = !DILocation(line: 156, column: 5, scope: !1146)
!1166 = !DILocation(line: 156, column: 59, scope: !1146)
!1167 = !DILocation(line: 156, column: 62, scope: !1146)
!1168 = !DILocation(line: 156, column: 57, scope: !1146)
!1169 = !DILocalVariable(name: "shift", scope: !1146, file: !80, line: 157, type: !19)
!1170 = !DILocation(line: 157, column: 7, scope: !1146)
!1171 = !DILocation(line: 157, column: 15, scope: !1146)
!1172 = !DILocation(line: 157, column: 18, scope: !1146)
!1173 = !DILocalVariable(name: "r", scope: !1146, file: !80, line: 158, type: !19)
!1174 = !DILocation(line: 158, column: 7, scope: !1146)
!1175 = !DILocation(line: 158, column: 13, scope: !1146)
!1176 = !DILocation(line: 158, column: 12, scope: !1146)
!1177 = !DILocation(line: 158, column: 18, scope: !1146)
!1178 = !DILocation(line: 158, column: 15, scope: !1146)
!1179 = !DILocation(line: 158, column: 25, scope: !1146)
!1180 = !DILocation(line: 159, column: 11, scope: !1146)
!1181 = !DILocation(line: 159, column: 13, scope: !1146)
!1182 = !DILocation(line: 159, column: 20, scope: !1146)
!1183 = !DILocation(line: 159, column: 18, scope: !1146)
!1184 = !DILocation(line: 159, column: 26, scope: !1146)
!1185 = !DILocation(line: 159, column: 23, scope: !1146)
!1186 = !DILocation(line: 159, column: 4, scope: !1146)
!1187 = !DILocation(line: 159, column: 6, scope: !1146)
!1188 = !DILocation(line: 160, column: 10, scope: !1146)
!1189 = !DILocation(line: 160, column: 3, scope: !1146)
!1190 = !DILocalVariable(name: "shift", scope: !1191, file: !80, line: 157, type: !19)
!1191 = distinct !DISubprogram(name: "set_char_quoting", scope: !80, file: !80, line: 152, type: !1192, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1202, retainedNodes: !4)
!1192 = !DISubroutineType(types: !1193)
!1193 = !{!19, !1194, !8, !19}
!1194 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1195, size: 64)
!1195 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !1196)
!1196 = !{!1197, !1198, !1199, !1200, !1201}
!1197 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1195, file: !80, line: 68, baseType: !57, size: 32)
!1198 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1195, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!1199 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1195, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!1200 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1195, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!1201 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1195, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!1202 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !1203, nameTableKind: None)
!1203 = !{!1204, !1206, !1208, !1210, !1212, !1214, !1221, !1223}
!1204 = !DIGlobalVariableExpression(var: !1205, expr: !DIExpression())
!1205 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1202, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!1206 = !DIGlobalVariableExpression(var: !1207, expr: !DIExpression())
!1207 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1202, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!1208 = !DIGlobalVariableExpression(var: !1209, expr: !DIExpression())
!1209 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1202, file: !80, line: 1052, type: !1195, isLocal: false, isDefinition: true)
!1210 = !DIGlobalVariableExpression(var: !1211, expr: !DIExpression())
!1211 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1202, file: !80, line: 116, type: !1195, isLocal: true, isDefinition: true)
!1212 = !DIGlobalVariableExpression(var: !1213, expr: !DIExpression())
!1213 = distinct !DIGlobalVariable(name: "slot0", scope: !1202, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!1214 = !DIGlobalVariableExpression(var: !1215, expr: !DIExpression())
!1215 = distinct !DIGlobalVariable(name: "slotvec", scope: !1202, file: !80, line: 845, type: !1216, isLocal: true, isDefinition: true)
!1216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1217, size: 64)
!1217 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !1218)
!1218 = !{!1219, !1220}
!1219 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1217, file: !80, line: 836, baseType: !74, size: 64)
!1220 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1217, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!1221 = !DIGlobalVariableExpression(var: !1222, expr: !DIExpression())
!1222 = distinct !DIGlobalVariable(name: "nslots", scope: !1202, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!1223 = !DIGlobalVariableExpression(var: !1224, expr: !DIExpression())
!1224 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1202, file: !80, line: 844, type: !1217, isLocal: true, isDefinition: true)
!1225 = !DILocalVariable(name: "r", scope: !1191, file: !80, line: 158, type: !19)
!1226 = distinct !DISubprogram(name: "quotearg_n_style", scope: !80, file: !80, line: 955, type: !1227, scopeLine: 956, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !4)
!1227 = !DISubroutineType(types: !1228)
!1228 = !{!7, !19, !57, !16}
!1229 = !DILocalVariable(name: "n", arg: 1, scope: !1226, file: !80, line: 955, type: !19)
!1230 = !DILocation(line: 955, column: 23, scope: !1226)
!1231 = !DILocalVariable(name: "s", arg: 2, scope: !1226, file: !80, line: 955, type: !57)
!1232 = !DILocation(line: 955, column: 45, scope: !1226)
!1233 = !DILocalVariable(name: "arg", arg: 3, scope: !1226, file: !80, line: 955, type: !16)
!1234 = !DILocation(line: 955, column: 60, scope: !1226)
!1235 = !DILocalVariable(name: "o", scope: !1226, file: !80, line: 957, type: !1236)
!1236 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !93)
!1237 = !DILocation(line: 957, column: 32, scope: !1226)
!1238 = !DILocation(line: 957, column: 64, scope: !1226)
!1239 = !DILocation(line: 957, column: 36, scope: !1226)
!1240 = !DILocation(line: 958, column: 30, scope: !1226)
!1241 = !DILocation(line: 958, column: 33, scope: !1226)
!1242 = !DILocation(line: 958, column: 10, scope: !1226)
!1243 = !DILocation(line: 958, column: 3, scope: !1226)
!1244 = !DILocalVariable(name: "n", arg: 1, scope: !1245, file: !80, line: 955, type: !19)
!1245 = distinct !DISubprogram(name: "quotearg_n_style", scope: !80, file: !80, line: 955, type: !1227, scopeLine: 956, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1246, retainedNodes: !4)
!1246 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !1247, nameTableKind: None)
!1247 = !{!1248, !1250, !1252, !1261, !1263, !1265, !1272, !1274}
!1248 = !DIGlobalVariableExpression(var: !1249, expr: !DIExpression())
!1249 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1246, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!1250 = !DIGlobalVariableExpression(var: !1251, expr: !DIExpression())
!1251 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1246, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!1252 = !DIGlobalVariableExpression(var: !1253, expr: !DIExpression())
!1253 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1246, file: !80, line: 1052, type: !1254, isLocal: false, isDefinition: true)
!1254 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !1255)
!1255 = !{!1256, !1257, !1258, !1259, !1260}
!1256 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1254, file: !80, line: 68, baseType: !57, size: 32)
!1257 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1254, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!1258 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1254, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!1259 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1254, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!1260 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1254, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!1261 = !DIGlobalVariableExpression(var: !1262, expr: !DIExpression())
!1262 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1246, file: !80, line: 116, type: !1254, isLocal: true, isDefinition: true)
!1263 = !DIGlobalVariableExpression(var: !1264, expr: !DIExpression())
!1264 = distinct !DIGlobalVariable(name: "slot0", scope: !1246, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!1265 = !DIGlobalVariableExpression(var: !1266, expr: !DIExpression())
!1266 = distinct !DIGlobalVariable(name: "slotvec", scope: !1246, file: !80, line: 845, type: !1267, isLocal: true, isDefinition: true)
!1267 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1268, size: 64)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !1269)
!1269 = !{!1270, !1271}
!1270 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1268, file: !80, line: 836, baseType: !74, size: 64)
!1271 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1268, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!1272 = !DIGlobalVariableExpression(var: !1273, expr: !DIExpression())
!1273 = distinct !DIGlobalVariable(name: "nslots", scope: !1246, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!1274 = !DIGlobalVariableExpression(var: !1275, expr: !DIExpression())
!1275 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1246, file: !80, line: 844, type: !1268, isLocal: true, isDefinition: true)
!1276 = !DILocalVariable(name: "s", arg: 2, scope: !1245, file: !80, line: 955, type: !57)
!1277 = !DILocalVariable(name: "arg", arg: 3, scope: !1245, file: !80, line: 955, type: !16)
!1278 = !DILocalVariable(name: "o", scope: !1245, file: !80, line: 957, type: !1279)
!1279 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1254)
!1280 = distinct !DISubprogram(name: "quoting_options_from_style", scope: !80, file: !80, line: 193, type: !1281, scopeLine: 194, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !4)
!1281 = !DISubroutineType(types: !1282)
!1282 = !{!93, !57}
!1283 = !DILocalVariable(name: "style", arg: 1, scope: !1280, file: !80, line: 193, type: !57)
!1284 = !DILocation(line: 193, column: 48, scope: !1280)
!1285 = !DILocalVariable(name: "o", scope: !1280, file: !80, line: 195, type: !93)
!1286 = !DILocation(line: 195, column: 26, scope: !1280)
!1287 = !DILocation(line: 196, column: 7, scope: !1288)
!1288 = distinct !DILexicalBlock(scope: !1280, file: !80, line: 196, column: 7)
!1289 = !DILocation(line: 196, column: 13, scope: !1288)
!1290 = !DILocation(line: 196, column: 7, scope: !1280)
!1291 = !DILocation(line: 197, column: 5, scope: !1288)
!1292 = !DILocation(line: 198, column: 13, scope: !1280)
!1293 = !DILocation(line: 198, column: 5, scope: !1280)
!1294 = !DILocation(line: 198, column: 11, scope: !1280)
!1295 = !DILocation(line: 199, column: 3, scope: !1280)
!1296 = distinct !DISubprogram(name: "quotearg_n_options", scope: !80, file: !80, line: 877, type: !1297, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !4)
!1297 = !DISubroutineType(types: !1298)
!1298 = !{!7, !19, !16, !74, !1299}
!1299 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1236, size: 64)
!1300 = !DILocalVariable(name: "n", arg: 1, scope: !1296, file: !80, line: 877, type: !19)
!1301 = !DILocation(line: 877, column: 25, scope: !1296)
!1302 = !DILocalVariable(name: "arg", arg: 2, scope: !1296, file: !80, line: 877, type: !16)
!1303 = !DILocation(line: 877, column: 40, scope: !1296)
!1304 = !DILocalVariable(name: "argsize", arg: 3, scope: !1296, file: !80, line: 877, type: !74)
!1305 = !DILocation(line: 877, column: 52, scope: !1296)
!1306 = !DILocalVariable(name: "options", arg: 4, scope: !1296, file: !80, line: 878, type: !1299)
!1307 = !DILocation(line: 878, column: 51, scope: !1296)
!1308 = !DILocalVariable(name: "e", scope: !1296, file: !80, line: 880, type: !19)
!1309 = !DILocation(line: 880, column: 7, scope: !1296)
!1310 = !DILocation(line: 880, column: 11, scope: !1296)
!1311 = !DILocalVariable(name: "sv", scope: !1296, file: !80, line: 882, type: !110)
!1312 = !DILocation(line: 882, column: 19, scope: !1296)
!1313 = !DILocation(line: 882, column: 24, scope: !1296)
!1314 = !DILocation(line: 884, column: 7, scope: !1315)
!1315 = distinct !DILexicalBlock(scope: !1296, file: !80, line: 884, column: 7)
!1316 = !DILocation(line: 884, column: 9, scope: !1315)
!1317 = !DILocation(line: 884, column: 7, scope: !1296)
!1318 = !DILocation(line: 885, column: 5, scope: !1315)
!1319 = !DILocation(line: 887, column: 7, scope: !1320)
!1320 = distinct !DILexicalBlock(scope: !1296, file: !80, line: 887, column: 7)
!1321 = !DILocation(line: 887, column: 17, scope: !1320)
!1322 = !DILocation(line: 887, column: 14, scope: !1320)
!1323 = !DILocation(line: 887, column: 7, scope: !1296)
!1324 = !DILocalVariable(name: "preallocated", scope: !1325, file: !80, line: 889, type: !38)
!1325 = distinct !DILexicalBlock(scope: !1320, file: !80, line: 888, column: 5)
!1326 = !DILocation(line: 889, column: 12, scope: !1325)
!1327 = !DILocation(line: 889, column: 28, scope: !1325)
!1328 = !DILocation(line: 889, column: 31, scope: !1325)
!1329 = !DILocalVariable(name: "nmax", scope: !1325, file: !80, line: 890, type: !19)
!1330 = !DILocation(line: 890, column: 11, scope: !1325)
!1331 = !DILocation(line: 892, column: 11, scope: !1332)
!1332 = distinct !DILexicalBlock(scope: !1325, file: !80, line: 892, column: 11)
!1333 = !DILocation(line: 892, column: 18, scope: !1332)
!1334 = !DILocation(line: 892, column: 16, scope: !1332)
!1335 = !DILocation(line: 892, column: 11, scope: !1325)
!1336 = !DILocation(line: 893, column: 9, scope: !1332)
!1337 = !DILocation(line: 895, column: 32, scope: !1325)
!1338 = !DILocation(line: 895, column: 54, scope: !1325)
!1339 = !DILocation(line: 895, column: 59, scope: !1325)
!1340 = !DILocation(line: 895, column: 61, scope: !1325)
!1341 = !DILocation(line: 895, column: 58, scope: !1325)
!1342 = !DILocation(line: 895, column: 66, scope: !1325)
!1343 = !DILocation(line: 895, column: 22, scope: !1325)
!1344 = !DILocation(line: 895, column: 20, scope: !1325)
!1345 = !DILocation(line: 895, column: 15, scope: !1325)
!1346 = !DILocation(line: 896, column: 11, scope: !1347)
!1347 = distinct !DILexicalBlock(scope: !1325, file: !80, line: 896, column: 11)
!1348 = !DILocation(line: 896, column: 11, scope: !1325)
!1349 = !DILocation(line: 897, column: 10, scope: !1347)
!1350 = !DILocation(line: 897, column: 15, scope: !1347)
!1351 = !DILocation(line: 897, column: 9, scope: !1347)
!1352 = !DILocation(line: 898, column: 15, scope: !1325)
!1353 = !DILocation(line: 898, column: 20, scope: !1325)
!1354 = !DILocation(line: 898, column: 18, scope: !1325)
!1355 = !DILocation(line: 898, column: 7, scope: !1325)
!1356 = !DILocation(line: 898, column: 32, scope: !1325)
!1357 = !DILocation(line: 898, column: 34, scope: !1325)
!1358 = !DILocation(line: 898, column: 40, scope: !1325)
!1359 = !DILocation(line: 898, column: 38, scope: !1325)
!1360 = !DILocation(line: 898, column: 31, scope: !1325)
!1361 = !DILocation(line: 898, column: 48, scope: !1325)
!1362 = !DILocation(line: 899, column: 16, scope: !1325)
!1363 = !DILocation(line: 899, column: 18, scope: !1325)
!1364 = !DILocation(line: 899, column: 14, scope: !1325)
!1365 = !DILocation(line: 900, column: 5, scope: !1325)
!1366 = !DILocalVariable(name: "size", scope: !1367, file: !80, line: 903, type: !74)
!1367 = distinct !DILexicalBlock(scope: !1296, file: !80, line: 902, column: 3)
!1368 = !DILocation(line: 903, column: 12, scope: !1367)
!1369 = !DILocation(line: 903, column: 19, scope: !1367)
!1370 = !DILocation(line: 903, column: 22, scope: !1367)
!1371 = !DILocation(line: 903, column: 25, scope: !1367)
!1372 = !DILocalVariable(name: "val", scope: !1367, file: !80, line: 904, type: !7)
!1373 = !DILocation(line: 904, column: 11, scope: !1367)
!1374 = !DILocation(line: 904, column: 17, scope: !1367)
!1375 = !DILocation(line: 904, column: 20, scope: !1367)
!1376 = !DILocation(line: 904, column: 23, scope: !1367)
!1377 = !DILocalVariable(name: "flags", scope: !1367, file: !80, line: 906, type: !19)
!1378 = !DILocation(line: 906, column: 9, scope: !1367)
!1379 = !DILocation(line: 906, column: 17, scope: !1367)
!1380 = !DILocation(line: 906, column: 26, scope: !1367)
!1381 = !DILocation(line: 906, column: 32, scope: !1367)
!1382 = !DILocalVariable(name: "qsize", scope: !1367, file: !80, line: 907, type: !74)
!1383 = !DILocation(line: 907, column: 12, scope: !1367)
!1384 = !DILocation(line: 907, column: 46, scope: !1367)
!1385 = !DILocation(line: 907, column: 51, scope: !1367)
!1386 = !DILocation(line: 907, column: 57, scope: !1367)
!1387 = !DILocation(line: 907, column: 62, scope: !1367)
!1388 = !DILocation(line: 908, column: 46, scope: !1367)
!1389 = !DILocation(line: 908, column: 55, scope: !1367)
!1390 = !DILocation(line: 908, column: 62, scope: !1367)
!1391 = !DILocation(line: 909, column: 46, scope: !1367)
!1392 = !DILocation(line: 909, column: 55, scope: !1367)
!1393 = !DILocation(line: 910, column: 46, scope: !1367)
!1394 = !DILocation(line: 910, column: 55, scope: !1367)
!1395 = !DILocation(line: 911, column: 46, scope: !1367)
!1396 = !DILocation(line: 911, column: 55, scope: !1367)
!1397 = !DILocation(line: 907, column: 20, scope: !1367)
!1398 = !DILocation(line: 913, column: 9, scope: !1399)
!1399 = distinct !DILexicalBlock(scope: !1367, file: !80, line: 913, column: 9)
!1400 = !DILocation(line: 913, column: 17, scope: !1399)
!1401 = !DILocation(line: 913, column: 14, scope: !1399)
!1402 = !DILocation(line: 913, column: 9, scope: !1367)
!1403 = !DILocation(line: 915, column: 29, scope: !1404)
!1404 = distinct !DILexicalBlock(scope: !1399, file: !80, line: 914, column: 7)
!1405 = !DILocation(line: 915, column: 35, scope: !1404)
!1406 = !DILocation(line: 915, column: 27, scope: !1404)
!1407 = !DILocation(line: 915, column: 9, scope: !1404)
!1408 = !DILocation(line: 915, column: 12, scope: !1404)
!1409 = !DILocation(line: 915, column: 15, scope: !1404)
!1410 = !DILocation(line: 915, column: 20, scope: !1404)
!1411 = !DILocation(line: 916, column: 13, scope: !1412)
!1412 = distinct !DILexicalBlock(scope: !1404, file: !80, line: 916, column: 13)
!1413 = !DILocation(line: 916, column: 17, scope: !1412)
!1414 = !DILocation(line: 916, column: 13, scope: !1404)
!1415 = !DILocation(line: 917, column: 17, scope: !1412)
!1416 = !DILocation(line: 917, column: 11, scope: !1412)
!1417 = !DILocation(line: 918, column: 39, scope: !1404)
!1418 = !DILocation(line: 918, column: 27, scope: !1404)
!1419 = !DILocation(line: 918, column: 25, scope: !1404)
!1420 = !DILocation(line: 918, column: 9, scope: !1404)
!1421 = !DILocation(line: 918, column: 12, scope: !1404)
!1422 = !DILocation(line: 918, column: 15, scope: !1404)
!1423 = !DILocation(line: 918, column: 19, scope: !1404)
!1424 = !DILocation(line: 919, column: 35, scope: !1404)
!1425 = !DILocation(line: 919, column: 40, scope: !1404)
!1426 = !DILocation(line: 919, column: 46, scope: !1404)
!1427 = !DILocation(line: 919, column: 51, scope: !1404)
!1428 = !DILocation(line: 919, column: 60, scope: !1404)
!1429 = !DILocation(line: 919, column: 69, scope: !1404)
!1430 = !DILocation(line: 920, column: 35, scope: !1404)
!1431 = !DILocation(line: 920, column: 42, scope: !1404)
!1432 = !DILocation(line: 920, column: 51, scope: !1404)
!1433 = !DILocation(line: 921, column: 35, scope: !1404)
!1434 = !DILocation(line: 921, column: 44, scope: !1404)
!1435 = !DILocation(line: 922, column: 35, scope: !1404)
!1436 = !DILocation(line: 922, column: 44, scope: !1404)
!1437 = !DILocation(line: 919, column: 9, scope: !1404)
!1438 = !DILocation(line: 923, column: 7, scope: !1404)
!1439 = !DILocation(line: 925, column: 13, scope: !1367)
!1440 = !DILocation(line: 925, column: 5, scope: !1367)
!1441 = !DILocation(line: 925, column: 11, scope: !1367)
!1442 = !DILocation(line: 926, column: 12, scope: !1367)
!1443 = !DILocation(line: 926, column: 5, scope: !1367)
!1444 = !DILocalVariable(name: "n", arg: 1, scope: !1445, file: !80, line: 877, type: !19)
!1445 = distinct !DISubprogram(name: "quotearg_n_options", scope: !80, file: !80, line: 877, type: !1446, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1457, retainedNodes: !4)
!1446 = !DISubroutineType(types: !1447)
!1447 = !{!7, !19, !16, !74, !1448}
!1448 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1449, size: 64)
!1449 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1450)
!1450 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !1451)
!1451 = !{!1452, !1453, !1454, !1455, !1456}
!1452 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1450, file: !80, line: 68, baseType: !57, size: 32)
!1453 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1450, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1450, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!1455 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1450, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1450, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!1457 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !1458, nameTableKind: None)
!1458 = !{!1459, !1461, !1463, !1465, !1467, !1469, !1476, !1478}
!1459 = !DIGlobalVariableExpression(var: !1460, expr: !DIExpression())
!1460 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1457, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!1461 = !DIGlobalVariableExpression(var: !1462, expr: !DIExpression())
!1462 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1457, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!1463 = !DIGlobalVariableExpression(var: !1464, expr: !DIExpression())
!1464 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1457, file: !80, line: 1052, type: !1450, isLocal: false, isDefinition: true)
!1465 = !DIGlobalVariableExpression(var: !1466, expr: !DIExpression())
!1466 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1457, file: !80, line: 116, type: !1450, isLocal: true, isDefinition: true)
!1467 = !DIGlobalVariableExpression(var: !1468, expr: !DIExpression())
!1468 = distinct !DIGlobalVariable(name: "slot0", scope: !1457, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!1469 = !DIGlobalVariableExpression(var: !1470, expr: !DIExpression())
!1470 = distinct !DIGlobalVariable(name: "slotvec", scope: !1457, file: !80, line: 845, type: !1471, isLocal: true, isDefinition: true)
!1471 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1472, size: 64)
!1472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !1473)
!1473 = !{!1474, !1475}
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1472, file: !80, line: 836, baseType: !74, size: 64)
!1475 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1472, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!1476 = !DIGlobalVariableExpression(var: !1477, expr: !DIExpression())
!1477 = distinct !DIGlobalVariable(name: "nslots", scope: !1457, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!1478 = !DIGlobalVariableExpression(var: !1479, expr: !DIExpression())
!1479 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1457, file: !80, line: 844, type: !1472, isLocal: true, isDefinition: true)
!1480 = !DILocalVariable(name: "arg", arg: 2, scope: !1445, file: !80, line: 877, type: !16)
!1481 = !DILocalVariable(name: "argsize", arg: 3, scope: !1445, file: !80, line: 877, type: !74)
!1482 = !DILocalVariable(name: "options", arg: 4, scope: !1445, file: !80, line: 878, type: !1448)
!1483 = !DILocalVariable(name: "e", scope: !1445, file: !80, line: 880, type: !19)
!1484 = !DILocalVariable(name: "sv", scope: !1445, file: !80, line: 882, type: !1471)
!1485 = !DILocalVariable(name: "nmax", scope: !1486, file: !80, line: 890, type: !19)
!1486 = distinct !DILexicalBlock(scope: !1487, file: !80, line: 888, column: 5)
!1487 = distinct !DILexicalBlock(scope: !1488, file: !80, line: 887, column: 7)
!1488 = distinct !DISubprogram(name: "quotearg_n_options", scope: !80, file: !80, line: 877, type: !1489, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1500, retainedNodes: !4)
!1489 = !DISubroutineType(types: !1490)
!1490 = !{!7, !19, !16, !74, !1491}
!1491 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1492, size: 64)
!1492 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1493)
!1493 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !1494)
!1494 = !{!1495, !1496, !1497, !1498, !1499}
!1495 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1493, file: !80, line: 68, baseType: !57, size: 32)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1493, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1493, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1493, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1493, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!1500 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !1501, nameTableKind: None)
!1501 = !{!1502, !1504, !1506, !1508, !1510, !1512, !1519, !1521}
!1502 = !DIGlobalVariableExpression(var: !1503, expr: !DIExpression())
!1503 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1500, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!1504 = !DIGlobalVariableExpression(var: !1505, expr: !DIExpression())
!1505 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1500, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!1506 = !DIGlobalVariableExpression(var: !1507, expr: !DIExpression())
!1507 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1500, file: !80, line: 1052, type: !1493, isLocal: false, isDefinition: true)
!1508 = !DIGlobalVariableExpression(var: !1509, expr: !DIExpression())
!1509 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1500, file: !80, line: 116, type: !1493, isLocal: true, isDefinition: true)
!1510 = !DIGlobalVariableExpression(var: !1511, expr: !DIExpression())
!1511 = distinct !DIGlobalVariable(name: "slot0", scope: !1500, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!1512 = !DIGlobalVariableExpression(var: !1513, expr: !DIExpression())
!1513 = distinct !DIGlobalVariable(name: "slotvec", scope: !1500, file: !80, line: 845, type: !1514, isLocal: true, isDefinition: true)
!1514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1515, size: 64)
!1515 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !1516)
!1516 = !{!1517, !1518}
!1517 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1515, file: !80, line: 836, baseType: !74, size: 64)
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1515, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!1519 = !DIGlobalVariableExpression(var: !1520, expr: !DIExpression())
!1520 = distinct !DIGlobalVariable(name: "nslots", scope: !1500, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!1521 = !DIGlobalVariableExpression(var: !1522, expr: !DIExpression())
!1522 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1500, file: !80, line: 844, type: !1515, isLocal: true, isDefinition: true)
!1523 = !DILocalVariable(name: "val", scope: !1524, file: !80, line: 904, type: !7)
!1524 = distinct !DILexicalBlock(scope: !1525, file: !80, line: 902, column: 3)
!1525 = distinct !DISubprogram(name: "quotearg_n_options", scope: !80, file: !80, line: 877, type: !1526, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1537, retainedNodes: !4)
!1526 = !DISubroutineType(types: !1527)
!1527 = !{!7, !19, !16, !74, !1528}
!1528 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1529, size: 64)
!1529 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1530)
!1530 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !1531)
!1531 = !{!1532, !1533, !1534, !1535, !1536}
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1530, file: !80, line: 68, baseType: !57, size: 32)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1530, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1530, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1530, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1530, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!1537 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !1538, nameTableKind: None)
!1538 = !{!1539, !1541, !1543, !1545, !1547, !1549, !1556, !1558}
!1539 = !DIGlobalVariableExpression(var: !1540, expr: !DIExpression())
!1540 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1537, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!1541 = !DIGlobalVariableExpression(var: !1542, expr: !DIExpression())
!1542 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1537, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!1543 = !DIGlobalVariableExpression(var: !1544, expr: !DIExpression())
!1544 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1537, file: !80, line: 1052, type: !1530, isLocal: false, isDefinition: true)
!1545 = !DIGlobalVariableExpression(var: !1546, expr: !DIExpression())
!1546 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1537, file: !80, line: 116, type: !1530, isLocal: true, isDefinition: true)
!1547 = !DIGlobalVariableExpression(var: !1548, expr: !DIExpression())
!1548 = distinct !DIGlobalVariable(name: "slot0", scope: !1537, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!1549 = !DIGlobalVariableExpression(var: !1550, expr: !DIExpression())
!1550 = distinct !DIGlobalVariable(name: "slotvec", scope: !1537, file: !80, line: 845, type: !1551, isLocal: true, isDefinition: true)
!1551 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1552, size: 64)
!1552 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !1553)
!1553 = !{!1554, !1555}
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1552, file: !80, line: 836, baseType: !74, size: 64)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1552, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!1556 = !DIGlobalVariableExpression(var: !1557, expr: !DIExpression())
!1557 = distinct !DIGlobalVariable(name: "nslots", scope: !1537, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!1558 = !DIGlobalVariableExpression(var: !1559, expr: !DIExpression())
!1559 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1537, file: !80, line: 844, type: !1552, isLocal: true, isDefinition: true)
!1560 = !DILocalVariable(name: "flags", scope: !1524, file: !80, line: 906, type: !19)
!1561 = !DILocalVariable(name: "qsize", scope: !1524, file: !80, line: 907, type: !74)
!1562 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !80, file: !80, line: 256, type: !1563, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !4)
!1563 = !DISubroutineType(types: !1564)
!1564 = !{!74, !7, !74, !16, !74, !57, !19, !1565, !16, !16}
!1565 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1566, size: 64)
!1566 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !59)
!1567 = !DILocalVariable(name: "buffer", arg: 1, scope: !1562, file: !80, line: 256, type: !7)
!1568 = !DILocation(line: 256, column: 33, scope: !1562)
!1569 = !DILocalVariable(name: "buffersize", arg: 2, scope: !1562, file: !80, line: 256, type: !74)
!1570 = !DILocation(line: 256, column: 48, scope: !1562)
!1571 = !DILocalVariable(name: "arg", arg: 3, scope: !1562, file: !80, line: 257, type: !16)
!1572 = !DILocation(line: 257, column: 39, scope: !1562)
!1573 = !DILocalVariable(name: "argsize", arg: 4, scope: !1562, file: !80, line: 257, type: !74)
!1574 = !DILocation(line: 257, column: 51, scope: !1562)
!1575 = !DILocalVariable(name: "quoting_style", arg: 5, scope: !1562, file: !80, line: 258, type: !57)
!1576 = !DILocation(line: 258, column: 46, scope: !1562)
!1577 = !DILocalVariable(name: "flags", arg: 6, scope: !1562, file: !80, line: 258, type: !19)
!1578 = !DILocation(line: 258, column: 65, scope: !1562)
!1579 = !DILocalVariable(name: "quote_these_too", arg: 7, scope: !1562, file: !80, line: 259, type: !1565)
!1580 = !DILocation(line: 259, column: 47, scope: !1562)
!1581 = !DILocalVariable(name: "left_quote", arg: 8, scope: !1562, file: !80, line: 260, type: !16)
!1582 = !DILocation(line: 260, column: 39, scope: !1562)
!1583 = !DILocalVariable(name: "right_quote", arg: 9, scope: !1562, file: !80, line: 261, type: !16)
!1584 = !DILocation(line: 261, column: 39, scope: !1562)
!1585 = !DILocalVariable(name: "i", scope: !1562, file: !80, line: 263, type: !74)
!1586 = !DILocation(line: 263, column: 10, scope: !1562)
!1587 = !DILocalVariable(name: "len", scope: !1562, file: !80, line: 264, type: !74)
!1588 = !DILocation(line: 264, column: 10, scope: !1562)
!1589 = !DILocalVariable(name: "orig_buffersize", scope: !1562, file: !80, line: 265, type: !74)
!1590 = !DILocation(line: 265, column: 10, scope: !1562)
!1591 = !DILocalVariable(name: "quote_string", scope: !1562, file: !80, line: 266, type: !16)
!1592 = !DILocation(line: 266, column: 15, scope: !1562)
!1593 = !DILocalVariable(name: "quote_string_len", scope: !1562, file: !80, line: 267, type: !74)
!1594 = !DILocation(line: 267, column: 10, scope: !1562)
!1595 = !DILocalVariable(name: "backslash_escapes", scope: !1562, file: !80, line: 268, type: !38)
!1596 = !DILocation(line: 268, column: 8, scope: !1562)
!1597 = !DILocalVariable(name: "unibyte_locale", scope: !1562, file: !80, line: 269, type: !38)
!1598 = !DILocation(line: 269, column: 8, scope: !1562)
!1599 = !DILocation(line: 269, column: 25, scope: !1562)
!1600 = !DILocation(line: 269, column: 36, scope: !1562)
!1601 = !DILocalVariable(name: "elide_outer_quotes", scope: !1562, file: !80, line: 270, type: !38)
!1602 = !DILocation(line: 270, column: 8, scope: !1562)
!1603 = !DILocation(line: 270, column: 30, scope: !1562)
!1604 = !DILocation(line: 270, column: 36, scope: !1562)
!1605 = !DILocation(line: 270, column: 61, scope: !1562)
!1606 = !DILocalVariable(name: "pending_shell_escape_end", scope: !1562, file: !80, line: 271, type: !38)
!1607 = !DILocation(line: 271, column: 8, scope: !1562)
!1608 = !DILocalVariable(name: "encountered_single_quote", scope: !1562, file: !80, line: 272, type: !38)
!1609 = !DILocation(line: 272, column: 8, scope: !1562)
!1610 = !DILocalVariable(name: "all_c_and_shell_quote_compat", scope: !1562, file: !80, line: 273, type: !38)
!1611 = !DILocation(line: 273, column: 8, scope: !1562)
!1612 = !DILocation(line: 273, column: 3, scope: !1562)
!1613 = !DILabel(scope: !1562, name: "process_input", file: !80, line: 314)
!1614 = !DILocation(line: 314, column: 2, scope: !1562)
!1615 = !DILocation(line: 316, column: 11, scope: !1562)
!1616 = !DILocation(line: 316, column: 3, scope: !1562)
!1617 = !DILocation(line: 319, column: 21, scope: !1618)
!1618 = distinct !DILexicalBlock(scope: !1562, file: !80, line: 317, column: 5)
!1619 = !DILocation(line: 320, column: 26, scope: !1618)
!1620 = !DILocation(line: 321, column: 7, scope: !1618)
!1621 = !DILocation(line: 323, column: 12, scope: !1622)
!1622 = distinct !DILexicalBlock(scope: !1618, file: !80, line: 323, column: 11)
!1623 = !DILocation(line: 323, column: 11, scope: !1618)
!1624 = !DILocation(line: 324, column: 9, scope: !1622)
!1625 = !DILocation(line: 324, column: 9, scope: !1626)
!1626 = distinct !DILexicalBlock(scope: !1627, file: !80, line: 324, column: 9)
!1627 = distinct !DILexicalBlock(scope: !1622, file: !80, line: 324, column: 9)
!1628 = !DILocation(line: 324, column: 9, scope: !1627)
!1629 = !DILocation(line: 325, column: 25, scope: !1618)
!1630 = !DILocation(line: 326, column: 20, scope: !1618)
!1631 = !DILocation(line: 327, column: 24, scope: !1618)
!1632 = !DILocation(line: 328, column: 7, scope: !1618)
!1633 = !DILocation(line: 331, column: 25, scope: !1618)
!1634 = !DILocation(line: 332, column: 26, scope: !1618)
!1635 = !DILocation(line: 333, column: 7, scope: !1618)
!1636 = !DILocation(line: 339, column: 13, scope: !1637)
!1637 = distinct !DILexicalBlock(scope: !1638, file: !80, line: 339, column: 13)
!1638 = distinct !DILexicalBlock(scope: !1618, file: !80, line: 338, column: 7)
!1639 = !DILocation(line: 339, column: 27, scope: !1637)
!1640 = !DILocation(line: 339, column: 13, scope: !1638)
!1641 = !DILocation(line: 362, column: 50, scope: !1642)
!1642 = distinct !DILexicalBlock(scope: !1637, file: !80, line: 340, column: 11)
!1643 = !DILocation(line: 362, column: 26, scope: !1642)
!1644 = !DILocation(line: 362, column: 24, scope: !1642)
!1645 = !DILocation(line: 363, column: 51, scope: !1642)
!1646 = !DILocation(line: 363, column: 27, scope: !1642)
!1647 = !DILocation(line: 363, column: 25, scope: !1642)
!1648 = !DILocation(line: 364, column: 11, scope: !1642)
!1649 = !DILocation(line: 365, column: 14, scope: !1650)
!1650 = distinct !DILexicalBlock(scope: !1638, file: !80, line: 365, column: 13)
!1651 = !DILocation(line: 365, column: 13, scope: !1638)
!1652 = !DILocation(line: 366, column: 31, scope: !1653)
!1653 = distinct !DILexicalBlock(scope: !1650, file: !80, line: 366, column: 11)
!1654 = !DILocation(line: 366, column: 29, scope: !1653)
!1655 = !DILocation(line: 366, column: 16, scope: !1653)
!1656 = !DILocation(line: 366, column: 44, scope: !1657)
!1657 = distinct !DILexicalBlock(scope: !1653, file: !80, line: 366, column: 11)
!1658 = !DILocation(line: 366, column: 43, scope: !1657)
!1659 = !DILocation(line: 366, column: 11, scope: !1653)
!1660 = !DILocation(line: 367, column: 13, scope: !1657)
!1661 = !DILocation(line: 367, column: 13, scope: !1662)
!1662 = distinct !DILexicalBlock(scope: !1663, file: !80, line: 367, column: 13)
!1663 = distinct !DILexicalBlock(scope: !1657, file: !80, line: 367, column: 13)
!1664 = !DILocation(line: 367, column: 13, scope: !1663)
!1665 = !DILocation(line: 366, column: 70, scope: !1657)
!1666 = !DILocation(line: 366, column: 11, scope: !1657)
!1667 = distinct !{!1667, !1659, !1668}
!1668 = !DILocation(line: 367, column: 13, scope: !1653)
!1669 = !DILocation(line: 368, column: 27, scope: !1638)
!1670 = !DILocation(line: 369, column: 24, scope: !1638)
!1671 = !DILocation(line: 369, column: 22, scope: !1638)
!1672 = !DILocation(line: 370, column: 36, scope: !1638)
!1673 = !DILocation(line: 370, column: 28, scope: !1638)
!1674 = !DILocation(line: 370, column: 26, scope: !1638)
!1675 = !DILocation(line: 372, column: 7, scope: !1618)
!1676 = !DILocation(line: 375, column: 25, scope: !1618)
!1677 = !DILocation(line: 376, column: 7, scope: !1618)
!1678 = !DILocation(line: 378, column: 26, scope: !1618)
!1679 = !DILocation(line: 379, column: 7, scope: !1618)
!1680 = !DILocation(line: 381, column: 12, scope: !1681)
!1681 = distinct !DILexicalBlock(scope: !1618, file: !80, line: 381, column: 11)
!1682 = !DILocation(line: 381, column: 11, scope: !1618)
!1683 = !DILocation(line: 382, column: 27, scope: !1681)
!1684 = !DILocation(line: 382, column: 9, scope: !1681)
!1685 = !DILocation(line: 383, column: 7, scope: !1618)
!1686 = !DILocation(line: 385, column: 21, scope: !1618)
!1687 = !DILocation(line: 386, column: 12, scope: !1688)
!1688 = distinct !DILexicalBlock(scope: !1618, file: !80, line: 386, column: 11)
!1689 = !DILocation(line: 386, column: 11, scope: !1618)
!1690 = !DILocation(line: 387, column: 9, scope: !1688)
!1691 = !DILocation(line: 387, column: 9, scope: !1692)
!1692 = distinct !DILexicalBlock(scope: !1693, file: !80, line: 387, column: 9)
!1693 = distinct !DILexicalBlock(scope: !1688, file: !80, line: 387, column: 9)
!1694 = !DILocation(line: 387, column: 9, scope: !1693)
!1695 = !DILocation(line: 388, column: 20, scope: !1618)
!1696 = !DILocation(line: 389, column: 24, scope: !1618)
!1697 = !DILocation(line: 390, column: 7, scope: !1618)
!1698 = !DILocation(line: 393, column: 26, scope: !1618)
!1699 = !DILocation(line: 394, column: 7, scope: !1618)
!1700 = !DILocation(line: 397, column: 7, scope: !1618)
!1701 = !DILocation(line: 400, column: 10, scope: !1702)
!1702 = distinct !DILexicalBlock(scope: !1562, file: !80, line: 400, column: 3)
!1703 = !DILocation(line: 400, column: 8, scope: !1702)
!1704 = !DILocation(line: 400, column: 19, scope: !1705)
!1705 = distinct !DILexicalBlock(scope: !1702, file: !80, line: 400, column: 3)
!1706 = !DILocation(line: 400, column: 27, scope: !1705)
!1707 = !DILocation(line: 400, column: 41, scope: !1705)
!1708 = !DILocation(line: 400, column: 45, scope: !1705)
!1709 = !DILocation(line: 400, column: 48, scope: !1705)
!1710 = !DILocation(line: 400, column: 58, scope: !1705)
!1711 = !DILocation(line: 400, column: 63, scope: !1705)
!1712 = !DILocation(line: 400, column: 60, scope: !1705)
!1713 = !DILocation(line: 400, column: 16, scope: !1705)
!1714 = !DILocation(line: 400, column: 3, scope: !1702)
!1715 = !DILocalVariable(name: "c", scope: !1716, file: !80, line: 402, type: !148)
!1716 = distinct !DILexicalBlock(scope: !1705, file: !80, line: 401, column: 5)
!1717 = !DILocation(line: 402, column: 21, scope: !1716)
!1718 = !DILocalVariable(name: "esc", scope: !1716, file: !80, line: 403, type: !148)
!1719 = !DILocation(line: 403, column: 21, scope: !1716)
!1720 = !DILocalVariable(name: "is_right_quote", scope: !1716, file: !80, line: 404, type: !38)
!1721 = !DILocation(line: 404, column: 12, scope: !1716)
!1722 = !DILocalVariable(name: "escaping", scope: !1716, file: !80, line: 405, type: !38)
!1723 = !DILocation(line: 405, column: 12, scope: !1716)
!1724 = !DILocalVariable(name: "c_and_shell_quote_compat", scope: !1716, file: !80, line: 406, type: !38)
!1725 = !DILocation(line: 406, column: 12, scope: !1716)
!1726 = !DILocation(line: 408, column: 11, scope: !1727)
!1727 = distinct !DILexicalBlock(scope: !1716, file: !80, line: 408, column: 11)
!1728 = !DILocation(line: 409, column: 11, scope: !1727)
!1729 = !DILocation(line: 409, column: 14, scope: !1727)
!1730 = !DILocation(line: 409, column: 28, scope: !1727)
!1731 = !DILocation(line: 410, column: 11, scope: !1727)
!1732 = !DILocation(line: 410, column: 14, scope: !1727)
!1733 = !DILocation(line: 411, column: 11, scope: !1727)
!1734 = !DILocation(line: 411, column: 15, scope: !1727)
!1735 = !DILocation(line: 411, column: 19, scope: !1727)
!1736 = !DILocation(line: 411, column: 17, scope: !1727)
!1737 = !DILocation(line: 412, column: 19, scope: !1727)
!1738 = !DILocation(line: 412, column: 27, scope: !1727)
!1739 = !DILocation(line: 412, column: 39, scope: !1727)
!1740 = !DILocation(line: 412, column: 46, scope: !1727)
!1741 = !DILocation(line: 412, column: 44, scope: !1727)
!1742 = !DILocation(line: 416, column: 40, scope: !1727)
!1743 = !DILocation(line: 416, column: 32, scope: !1727)
!1744 = !DILocation(line: 416, column: 30, scope: !1727)
!1745 = !DILocation(line: 416, column: 48, scope: !1727)
!1746 = !DILocation(line: 412, column: 15, scope: !1727)
!1747 = !DILocation(line: 417, column: 11, scope: !1727)
!1748 = !DILocation(line: 417, column: 22, scope: !1727)
!1749 = !DILocation(line: 417, column: 28, scope: !1727)
!1750 = !DILocation(line: 417, column: 26, scope: !1727)
!1751 = !DILocation(line: 417, column: 31, scope: !1727)
!1752 = !DILocation(line: 417, column: 45, scope: !1727)
!1753 = !DILocation(line: 417, column: 14, scope: !1727)
!1754 = !DILocation(line: 417, column: 63, scope: !1727)
!1755 = !DILocation(line: 408, column: 11, scope: !1716)
!1756 = !DILocation(line: 419, column: 15, scope: !1757)
!1757 = distinct !DILexicalBlock(scope: !1758, file: !80, line: 419, column: 15)
!1758 = distinct !DILexicalBlock(scope: !1727, file: !80, line: 418, column: 9)
!1759 = !DILocation(line: 419, column: 15, scope: !1758)
!1760 = !DILocation(line: 420, column: 13, scope: !1757)
!1761 = !DILocation(line: 421, column: 26, scope: !1758)
!1762 = !DILocation(line: 422, column: 9, scope: !1758)
!1763 = !DILocation(line: 424, column: 11, scope: !1716)
!1764 = !DILocation(line: 424, column: 15, scope: !1716)
!1765 = !DILocation(line: 424, column: 9, scope: !1716)
!1766 = !DILocation(line: 425, column: 15, scope: !1716)
!1767 = !DILocation(line: 425, column: 7, scope: !1716)
!1768 = !DILocation(line: 428, column: 15, scope: !1769)
!1769 = distinct !DILexicalBlock(scope: !1770, file: !80, line: 428, column: 15)
!1770 = distinct !DILexicalBlock(scope: !1716, file: !80, line: 426, column: 9)
!1771 = !DILocation(line: 428, column: 15, scope: !1770)
!1772 = !DILocation(line: 430, column: 15, scope: !1773)
!1773 = distinct !DILexicalBlock(scope: !1769, file: !80, line: 429, column: 13)
!1774 = !DILocation(line: 430, column: 15, scope: !1775)
!1775 = distinct !DILexicalBlock(scope: !1776, file: !80, line: 430, column: 15)
!1776 = distinct !DILexicalBlock(scope: !1773, file: !80, line: 430, column: 15)
!1777 = !DILocation(line: 430, column: 15, scope: !1776)
!1778 = !DILocation(line: 430, column: 15, scope: !1779)
!1779 = distinct !DILexicalBlock(scope: !1776, file: !80, line: 430, column: 15)
!1780 = !DILocation(line: 430, column: 15, scope: !1781)
!1781 = distinct !DILexicalBlock(scope: !1779, file: !80, line: 430, column: 15)
!1782 = !DILocation(line: 430, column: 15, scope: !1783)
!1783 = distinct !DILexicalBlock(scope: !1784, file: !80, line: 430, column: 15)
!1784 = distinct !DILexicalBlock(scope: !1781, file: !80, line: 430, column: 15)
!1785 = !DILocation(line: 430, column: 15, scope: !1784)
!1786 = !DILocation(line: 430, column: 15, scope: !1787)
!1787 = distinct !DILexicalBlock(scope: !1788, file: !80, line: 430, column: 15)
!1788 = distinct !DILexicalBlock(scope: !1781, file: !80, line: 430, column: 15)
!1789 = !DILocation(line: 430, column: 15, scope: !1788)
!1790 = !DILocation(line: 430, column: 15, scope: !1791)
!1791 = distinct !DILexicalBlock(scope: !1792, file: !80, line: 430, column: 15)
!1792 = distinct !DILexicalBlock(scope: !1781, file: !80, line: 430, column: 15)
!1793 = !DILocation(line: 430, column: 15, scope: !1792)
!1794 = !DILocation(line: 430, column: 15, scope: !1795)
!1795 = distinct !DILexicalBlock(scope: !1796, file: !80, line: 430, column: 15)
!1796 = distinct !DILexicalBlock(scope: !1776, file: !80, line: 430, column: 15)
!1797 = !DILocation(line: 430, column: 15, scope: !1796)
!1798 = !DILocation(line: 437, column: 19, scope: !1799)
!1799 = distinct !DILexicalBlock(scope: !1773, file: !80, line: 437, column: 19)
!1800 = !DILocation(line: 437, column: 33, scope: !1799)
!1801 = !DILocation(line: 438, column: 19, scope: !1799)
!1802 = !DILocation(line: 438, column: 22, scope: !1799)
!1803 = !DILocation(line: 438, column: 24, scope: !1799)
!1804 = !DILocation(line: 438, column: 30, scope: !1799)
!1805 = !DILocation(line: 438, column: 28, scope: !1799)
!1806 = !DILocation(line: 438, column: 38, scope: !1799)
!1807 = !DILocation(line: 438, column: 48, scope: !1799)
!1808 = !DILocation(line: 438, column: 52, scope: !1799)
!1809 = !DILocation(line: 438, column: 54, scope: !1799)
!1810 = !DILocation(line: 438, column: 45, scope: !1799)
!1811 = !DILocation(line: 438, column: 59, scope: !1799)
!1812 = !DILocation(line: 438, column: 62, scope: !1799)
!1813 = !DILocation(line: 438, column: 66, scope: !1799)
!1814 = !DILocation(line: 438, column: 68, scope: !1799)
!1815 = !DILocation(line: 438, column: 73, scope: !1799)
!1816 = !DILocation(line: 437, column: 19, scope: !1773)
!1817 = !DILocation(line: 440, column: 19, scope: !1818)
!1818 = distinct !DILexicalBlock(scope: !1799, file: !80, line: 439, column: 17)
!1819 = !DILocation(line: 440, column: 19, scope: !1820)
!1820 = distinct !DILexicalBlock(scope: !1821, file: !80, line: 440, column: 19)
!1821 = distinct !DILexicalBlock(scope: !1818, file: !80, line: 440, column: 19)
!1822 = !DILocation(line: 440, column: 19, scope: !1821)
!1823 = !DILocation(line: 441, column: 19, scope: !1818)
!1824 = !DILocation(line: 441, column: 19, scope: !1825)
!1825 = distinct !DILexicalBlock(scope: !1826, file: !80, line: 441, column: 19)
!1826 = distinct !DILexicalBlock(scope: !1818, file: !80, line: 441, column: 19)
!1827 = !DILocation(line: 441, column: 19, scope: !1826)
!1828 = !DILocation(line: 442, column: 17, scope: !1818)
!1829 = !DILocation(line: 443, column: 17, scope: !1773)
!1830 = !DILocation(line: 448, column: 13, scope: !1773)
!1831 = !DILocation(line: 449, column: 20, scope: !1832)
!1832 = distinct !DILexicalBlock(scope: !1769, file: !80, line: 449, column: 20)
!1833 = !DILocation(line: 449, column: 26, scope: !1832)
!1834 = !DILocation(line: 449, column: 20, scope: !1769)
!1835 = !DILocation(line: 450, column: 13, scope: !1832)
!1836 = !DILocation(line: 451, column: 11, scope: !1770)
!1837 = !DILocation(line: 454, column: 19, scope: !1770)
!1838 = !DILocation(line: 454, column: 11, scope: !1770)
!1839 = !DILocation(line: 457, column: 19, scope: !1840)
!1840 = distinct !DILexicalBlock(scope: !1841, file: !80, line: 457, column: 19)
!1841 = distinct !DILexicalBlock(scope: !1770, file: !80, line: 455, column: 13)
!1842 = !DILocation(line: 457, column: 19, scope: !1841)
!1843 = !DILocation(line: 458, column: 17, scope: !1840)
!1844 = !DILocation(line: 459, column: 15, scope: !1841)
!1845 = !DILocation(line: 462, column: 20, scope: !1846)
!1846 = distinct !DILexicalBlock(scope: !1841, file: !80, line: 462, column: 19)
!1847 = !DILocation(line: 462, column: 26, scope: !1846)
!1848 = !DILocation(line: 463, column: 19, scope: !1846)
!1849 = !DILocation(line: 463, column: 22, scope: !1846)
!1850 = !DILocation(line: 463, column: 24, scope: !1846)
!1851 = !DILocation(line: 463, column: 30, scope: !1846)
!1852 = !DILocation(line: 463, column: 28, scope: !1846)
!1853 = !DILocation(line: 463, column: 38, scope: !1846)
!1854 = !DILocation(line: 463, column: 41, scope: !1846)
!1855 = !DILocation(line: 463, column: 45, scope: !1846)
!1856 = !DILocation(line: 463, column: 47, scope: !1846)
!1857 = !DILocation(line: 463, column: 52, scope: !1846)
!1858 = !DILocation(line: 462, column: 19, scope: !1841)
!1859 = !DILocation(line: 464, column: 25, scope: !1846)
!1860 = !DILocation(line: 464, column: 29, scope: !1846)
!1861 = !DILocation(line: 464, column: 31, scope: !1846)
!1862 = !DILocation(line: 464, column: 17, scope: !1846)
!1863 = !DILocation(line: 471, column: 25, scope: !1864)
!1864 = distinct !DILexicalBlock(scope: !1865, file: !80, line: 471, column: 25)
!1865 = distinct !DILexicalBlock(scope: !1846, file: !80, line: 465, column: 19)
!1866 = !DILocation(line: 471, column: 25, scope: !1865)
!1867 = !DILocation(line: 472, column: 23, scope: !1864)
!1868 = !DILocation(line: 473, column: 25, scope: !1865)
!1869 = !DILocation(line: 473, column: 29, scope: !1865)
!1870 = !DILocation(line: 473, column: 31, scope: !1865)
!1871 = !DILocation(line: 473, column: 23, scope: !1865)
!1872 = !DILocation(line: 474, column: 23, scope: !1865)
!1873 = !DILocation(line: 475, column: 21, scope: !1865)
!1874 = !DILocation(line: 475, column: 21, scope: !1875)
!1875 = distinct !DILexicalBlock(scope: !1876, file: !80, line: 475, column: 21)
!1876 = distinct !DILexicalBlock(scope: !1865, file: !80, line: 475, column: 21)
!1877 = !DILocation(line: 475, column: 21, scope: !1876)
!1878 = !DILocation(line: 476, column: 21, scope: !1865)
!1879 = !DILocation(line: 476, column: 21, scope: !1880)
!1880 = distinct !DILexicalBlock(scope: !1881, file: !80, line: 476, column: 21)
!1881 = distinct !DILexicalBlock(scope: !1865, file: !80, line: 476, column: 21)
!1882 = !DILocation(line: 476, column: 21, scope: !1881)
!1883 = !DILocation(line: 477, column: 21, scope: !1865)
!1884 = !DILocation(line: 477, column: 21, scope: !1885)
!1885 = distinct !DILexicalBlock(scope: !1886, file: !80, line: 477, column: 21)
!1886 = distinct !DILexicalBlock(scope: !1865, file: !80, line: 477, column: 21)
!1887 = !DILocation(line: 477, column: 21, scope: !1886)
!1888 = !DILocation(line: 478, column: 21, scope: !1865)
!1889 = !DILocation(line: 478, column: 21, scope: !1890)
!1890 = distinct !DILexicalBlock(scope: !1891, file: !80, line: 478, column: 21)
!1891 = distinct !DILexicalBlock(scope: !1865, file: !80, line: 478, column: 21)
!1892 = !DILocation(line: 478, column: 21, scope: !1891)
!1893 = !DILocation(line: 479, column: 21, scope: !1865)
!1894 = !DILocation(line: 482, column: 21, scope: !1865)
!1895 = !DILocation(line: 483, column: 19, scope: !1865)
!1896 = !DILocation(line: 484, column: 15, scope: !1841)
!1897 = !DILocation(line: 487, column: 15, scope: !1841)
!1898 = !DILocation(line: 489, column: 11, scope: !1770)
!1899 = !DILocation(line: 491, column: 24, scope: !1770)
!1900 = !DILocation(line: 491, column: 31, scope: !1770)
!1901 = !DILocation(line: 492, column: 24, scope: !1770)
!1902 = !DILocation(line: 492, column: 31, scope: !1770)
!1903 = !DILocation(line: 493, column: 24, scope: !1770)
!1904 = !DILocation(line: 493, column: 31, scope: !1770)
!1905 = !DILocation(line: 494, column: 24, scope: !1770)
!1906 = !DILocation(line: 494, column: 31, scope: !1770)
!1907 = !DILocation(line: 495, column: 24, scope: !1770)
!1908 = !DILocation(line: 495, column: 31, scope: !1770)
!1909 = !DILocation(line: 496, column: 24, scope: !1770)
!1910 = !DILocation(line: 496, column: 31, scope: !1770)
!1911 = !DILocation(line: 497, column: 24, scope: !1770)
!1912 = !DILocation(line: 497, column: 31, scope: !1770)
!1913 = !DILocation(line: 498, column: 26, scope: !1770)
!1914 = !DILocation(line: 498, column: 24, scope: !1770)
!1915 = !DILocation(line: 500, column: 15, scope: !1916)
!1916 = distinct !DILexicalBlock(scope: !1770, file: !80, line: 500, column: 15)
!1917 = !DILocation(line: 500, column: 29, scope: !1916)
!1918 = !DILocation(line: 500, column: 15, scope: !1770)
!1919 = !DILocation(line: 502, column: 19, scope: !1920)
!1920 = distinct !DILexicalBlock(scope: !1921, file: !80, line: 502, column: 19)
!1921 = distinct !DILexicalBlock(scope: !1916, file: !80, line: 501, column: 13)
!1922 = !DILocation(line: 502, column: 19, scope: !1921)
!1923 = !DILocation(line: 503, column: 17, scope: !1920)
!1924 = !DILocation(line: 504, column: 15, scope: !1921)
!1925 = !DILocation(line: 509, column: 15, scope: !1926)
!1926 = distinct !DILexicalBlock(scope: !1770, file: !80, line: 509, column: 15)
!1927 = !DILocation(line: 509, column: 33, scope: !1926)
!1928 = !DILocation(line: 509, column: 36, scope: !1926)
!1929 = !DILocation(line: 509, column: 55, scope: !1926)
!1930 = !DILocation(line: 509, column: 58, scope: !1926)
!1931 = !DILocation(line: 509, column: 15, scope: !1770)
!1932 = !DILocation(line: 510, column: 13, scope: !1926)
!1933 = !DILabel(scope: !1770, name: "c_and_shell_escape", file: !80, line: 512)
!1934 = !DILocation(line: 512, column: 9, scope: !1770)
!1935 = !DILocation(line: 513, column: 15, scope: !1936)
!1936 = distinct !DILexicalBlock(scope: !1770, file: !80, line: 513, column: 15)
!1937 = !DILocation(line: 513, column: 29, scope: !1936)
!1938 = !DILocation(line: 514, column: 15, scope: !1936)
!1939 = !DILocation(line: 514, column: 18, scope: !1936)
!1940 = !DILocation(line: 513, column: 15, scope: !1770)
!1941 = !DILocation(line: 515, column: 13, scope: !1936)
!1942 = !DILabel(scope: !1770, name: "c_escape", file: !80, line: 517)
!1943 = !DILocation(line: 517, column: 9, scope: !1770)
!1944 = !DILocation(line: 518, column: 15, scope: !1945)
!1945 = distinct !DILexicalBlock(scope: !1770, file: !80, line: 518, column: 15)
!1946 = !DILocation(line: 518, column: 15, scope: !1770)
!1947 = !DILocation(line: 520, column: 19, scope: !1948)
!1948 = distinct !DILexicalBlock(scope: !1945, file: !80, line: 519, column: 13)
!1949 = !DILocation(line: 520, column: 17, scope: !1948)
!1950 = !DILocation(line: 521, column: 15, scope: !1948)
!1951 = !DILocation(line: 523, column: 11, scope: !1770)
!1952 = !DILocation(line: 526, column: 18, scope: !1953)
!1953 = distinct !DILexicalBlock(scope: !1770, file: !80, line: 526, column: 15)
!1954 = !DILocation(line: 526, column: 26, scope: !1953)
!1955 = !DILocation(line: 526, column: 15, scope: !1770)
!1956 = !DILocation(line: 526, column: 40, scope: !1953)
!1957 = !DILocation(line: 526, column: 47, scope: !1953)
!1958 = !DILocation(line: 526, column: 57, scope: !1953)
!1959 = !DILocation(line: 526, column: 65, scope: !1953)
!1960 = !DILocation(line: 527, column: 13, scope: !1953)
!1961 = !DILocation(line: 528, column: 11, scope: !1770)
!1962 = !DILocation(line: 530, column: 15, scope: !1963)
!1963 = distinct !DILexicalBlock(scope: !1770, file: !80, line: 530, column: 15)
!1964 = !DILocation(line: 530, column: 17, scope: !1963)
!1965 = !DILocation(line: 530, column: 15, scope: !1770)
!1966 = !DILocation(line: 531, column: 13, scope: !1963)
!1967 = !DILocation(line: 532, column: 11, scope: !1770)
!1968 = !DILocation(line: 534, column: 36, scope: !1770)
!1969 = !DILocation(line: 535, column: 11, scope: !1770)
!1970 = !DILocation(line: 548, column: 15, scope: !1971)
!1971 = distinct !DILexicalBlock(scope: !1770, file: !80, line: 548, column: 15)
!1972 = !DILocation(line: 548, column: 29, scope: !1971)
!1973 = !DILocation(line: 549, column: 15, scope: !1971)
!1974 = !DILocation(line: 549, column: 18, scope: !1971)
!1975 = !DILocation(line: 548, column: 15, scope: !1770)
!1976 = !DILocation(line: 550, column: 13, scope: !1971)
!1977 = !DILocation(line: 551, column: 11, scope: !1770)
!1978 = !DILocation(line: 554, column: 36, scope: !1770)
!1979 = !DILocation(line: 555, column: 36, scope: !1770)
!1980 = !DILocation(line: 556, column: 15, scope: !1981)
!1981 = distinct !DILexicalBlock(scope: !1770, file: !80, line: 556, column: 15)
!1982 = !DILocation(line: 556, column: 29, scope: !1981)
!1983 = !DILocation(line: 556, column: 15, scope: !1770)
!1984 = !DILocation(line: 558, column: 19, scope: !1985)
!1985 = distinct !DILexicalBlock(scope: !1986, file: !80, line: 558, column: 19)
!1986 = distinct !DILexicalBlock(scope: !1981, file: !80, line: 557, column: 13)
!1987 = !DILocation(line: 558, column: 19, scope: !1986)
!1988 = !DILocation(line: 559, column: 17, scope: !1985)
!1989 = !DILocation(line: 561, column: 19, scope: !1990)
!1990 = distinct !DILexicalBlock(scope: !1986, file: !80, line: 561, column: 19)
!1991 = !DILocation(line: 561, column: 30, scope: !1990)
!1992 = !DILocation(line: 561, column: 35, scope: !1990)
!1993 = !DILocation(line: 561, column: 19, scope: !1986)
!1994 = !DILocation(line: 566, column: 37, scope: !1995)
!1995 = distinct !DILexicalBlock(scope: !1990, file: !80, line: 562, column: 17)
!1996 = !DILocation(line: 566, column: 35, scope: !1995)
!1997 = !DILocation(line: 567, column: 30, scope: !1995)
!1998 = !DILocation(line: 568, column: 17, scope: !1995)
!1999 = !DILocation(line: 570, column: 15, scope: !1986)
!2000 = !DILocation(line: 570, column: 15, scope: !2001)
!2001 = distinct !DILexicalBlock(scope: !2002, file: !80, line: 570, column: 15)
!2002 = distinct !DILexicalBlock(scope: !1986, file: !80, line: 570, column: 15)
!2003 = !DILocation(line: 570, column: 15, scope: !2002)
!2004 = !DILocation(line: 571, column: 15, scope: !1986)
!2005 = !DILocation(line: 571, column: 15, scope: !2006)
!2006 = distinct !DILexicalBlock(scope: !2007, file: !80, line: 571, column: 15)
!2007 = distinct !DILexicalBlock(scope: !1986, file: !80, line: 571, column: 15)
!2008 = !DILocation(line: 571, column: 15, scope: !2007)
!2009 = !DILocation(line: 572, column: 15, scope: !1986)
!2010 = !DILocation(line: 572, column: 15, scope: !2011)
!2011 = distinct !DILexicalBlock(scope: !2012, file: !80, line: 572, column: 15)
!2012 = distinct !DILexicalBlock(scope: !1986, file: !80, line: 572, column: 15)
!2013 = !DILocation(line: 572, column: 15, scope: !2012)
!2014 = !DILocation(line: 573, column: 40, scope: !1986)
!2015 = !DILocation(line: 574, column: 13, scope: !1986)
!2016 = !DILocation(line: 575, column: 11, scope: !1770)
!2017 = !DILocation(line: 599, column: 36, scope: !1770)
!2018 = !DILocation(line: 600, column: 11, scope: !1770)
!2019 = !DILocalVariable(name: "m", scope: !2020, file: !80, line: 610, type: !74)
!2020 = distinct !DILexicalBlock(scope: !1770, file: !80, line: 608, column: 11)
!2021 = !DILocation(line: 610, column: 20, scope: !2020)
!2022 = !DILocalVariable(name: "printable", scope: !2020, file: !80, line: 612, type: !38)
!2023 = !DILocation(line: 612, column: 18, scope: !2020)
!2024 = !DILocation(line: 614, column: 17, scope: !2025)
!2025 = distinct !DILexicalBlock(scope: !2020, file: !80, line: 614, column: 17)
!2026 = !DILocation(line: 614, column: 17, scope: !2020)
!2027 = !DILocation(line: 616, column: 19, scope: !2028)
!2028 = distinct !DILexicalBlock(scope: !2025, file: !80, line: 615, column: 15)
!2029 = !DILocation(line: 617, column: 29, scope: !2028)
!2030 = !DILocation(line: 617, column: 41, scope: !2028)
!2031 = !DILocation(line: 617, column: 27, scope: !2028)
!2032 = !DILocation(line: 618, column: 15, scope: !2028)
!2033 = !DILocalVariable(name: "mbstate", scope: !2034, file: !80, line: 621, type: !2035)
!2034 = distinct !DILexicalBlock(scope: !2025, file: !80, line: 620, column: 15)
!2035 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !2036, line: 6, baseType: !2037)
!2036 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "")
!2037 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !2038, line: 21, baseType: !2039)
!2038 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "")
!2039 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2038, line: 13, size: 64, elements: !2040)
!2040 = !{!2041, !2042}
!2041 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !2039, file: !2038, line: 15, baseType: !19, size: 32)
!2042 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !2039, file: !2038, line: 20, baseType: !2043, size: 32, offset: 32)
!2043 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2039, file: !2038, line: 16, size: 32, elements: !2044)
!2044 = !{!2045, !2046}
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !2043, file: !2038, line: 18, baseType: !59, size: 32)
!2046 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !2043, file: !2038, line: 19, baseType: !2047, size: 32)
!2047 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 32, elements: !2048)
!2048 = !{!2049}
!2049 = !DISubrange(count: 4)
!2050 = !DILocation(line: 621, column: 27, scope: !2034)
!2051 = !DILocation(line: 622, column: 17, scope: !2034)
!2052 = !DILocation(line: 624, column: 19, scope: !2034)
!2053 = !DILocation(line: 625, column: 27, scope: !2034)
!2054 = !DILocation(line: 626, column: 21, scope: !2055)
!2055 = distinct !DILexicalBlock(scope: !2034, file: !80, line: 626, column: 21)
!2056 = !DILocation(line: 626, column: 29, scope: !2055)
!2057 = !DILocation(line: 626, column: 21, scope: !2034)
!2058 = !DILocation(line: 627, column: 37, scope: !2055)
!2059 = !DILocation(line: 627, column: 29, scope: !2055)
!2060 = !DILocation(line: 627, column: 27, scope: !2055)
!2061 = !DILocation(line: 627, column: 19, scope: !2055)
!2062 = !DILocation(line: 629, column: 17, scope: !2034)
!2063 = !DILocalVariable(name: "w", scope: !2064, file: !80, line: 631, type: !2065)
!2064 = distinct !DILexicalBlock(scope: !2034, file: !80, line: 630, column: 19)
!2065 = !DIDerivedType(tag: DW_TAG_typedef, name: "wchar_t", file: !75, line: 74, baseType: !19)
!2066 = !DILocation(line: 631, column: 29, scope: !2064)
!2067 = !DILocalVariable(name: "bytes", scope: !2064, file: !80, line: 632, type: !74)
!2068 = !DILocation(line: 632, column: 28, scope: !2064)
!2069 = !DILocation(line: 632, column: 50, scope: !2064)
!2070 = !DILocation(line: 632, column: 54, scope: !2064)
!2071 = !DILocation(line: 632, column: 58, scope: !2064)
!2072 = !DILocation(line: 632, column: 56, scope: !2064)
!2073 = !DILocation(line: 633, column: 45, scope: !2064)
!2074 = !DILocation(line: 633, column: 56, scope: !2064)
!2075 = !DILocation(line: 633, column: 60, scope: !2064)
!2076 = !DILocation(line: 633, column: 58, scope: !2064)
!2077 = !DILocation(line: 633, column: 53, scope: !2064)
!2078 = !DILocation(line: 632, column: 36, scope: !2064)
!2079 = !DILocation(line: 634, column: 25, scope: !2080)
!2080 = distinct !DILexicalBlock(scope: !2064, file: !80, line: 634, column: 25)
!2081 = !DILocation(line: 634, column: 31, scope: !2080)
!2082 = !DILocation(line: 634, column: 25, scope: !2064)
!2083 = !DILocation(line: 635, column: 23, scope: !2080)
!2084 = !DILocation(line: 636, column: 30, scope: !2085)
!2085 = distinct !DILexicalBlock(scope: !2080, file: !80, line: 636, column: 30)
!2086 = !DILocation(line: 636, column: 36, scope: !2085)
!2087 = !DILocation(line: 636, column: 30, scope: !2080)
!2088 = !DILocation(line: 638, column: 35, scope: !2089)
!2089 = distinct !DILexicalBlock(scope: !2085, file: !80, line: 637, column: 23)
!2090 = !DILocation(line: 639, column: 25, scope: !2089)
!2091 = !DILocation(line: 641, column: 30, scope: !2092)
!2092 = distinct !DILexicalBlock(scope: !2085, file: !80, line: 641, column: 30)
!2093 = !DILocation(line: 641, column: 36, scope: !2092)
!2094 = !DILocation(line: 641, column: 30, scope: !2085)
!2095 = !DILocation(line: 643, column: 35, scope: !2096)
!2096 = distinct !DILexicalBlock(scope: !2092, file: !80, line: 642, column: 23)
!2097 = !DILocation(line: 644, column: 25, scope: !2096)
!2098 = !DILocation(line: 644, column: 32, scope: !2096)
!2099 = !DILocation(line: 644, column: 36, scope: !2096)
!2100 = !DILocation(line: 644, column: 34, scope: !2096)
!2101 = !DILocation(line: 644, column: 40, scope: !2096)
!2102 = !DILocation(line: 644, column: 38, scope: !2096)
!2103 = !DILocation(line: 644, column: 48, scope: !2096)
!2104 = !DILocation(line: 644, column: 51, scope: !2096)
!2105 = !DILocation(line: 644, column: 55, scope: !2096)
!2106 = !DILocation(line: 644, column: 59, scope: !2096)
!2107 = !DILocation(line: 644, column: 57, scope: !2096)
!2108 = !DILocation(line: 0, scope: !2096)
!2109 = !DILocation(line: 645, column: 28, scope: !2096)
!2110 = distinct !{!2110, !2097, !2109}
!2111 = !DILocation(line: 646, column: 25, scope: !2096)
!2112 = !DILocation(line: 654, column: 44, scope: !2113)
!2113 = distinct !DILexicalBlock(scope: !2114, file: !80, line: 654, column: 29)
!2114 = distinct !DILexicalBlock(scope: !2092, file: !80, line: 649, column: 23)
!2115 = !DILocation(line: 655, column: 29, scope: !2113)
!2116 = !DILocation(line: 655, column: 32, scope: !2113)
!2117 = !DILocation(line: 655, column: 46, scope: !2113)
!2118 = !DILocation(line: 654, column: 29, scope: !2114)
!2119 = !DILocalVariable(name: "j", scope: !2120, file: !80, line: 657, type: !74)
!2120 = distinct !DILexicalBlock(scope: !2113, file: !80, line: 656, column: 27)
!2121 = !DILocation(line: 657, column: 36, scope: !2120)
!2122 = !DILocation(line: 658, column: 36, scope: !2123)
!2123 = distinct !DILexicalBlock(scope: !2120, file: !80, line: 658, column: 29)
!2124 = !DILocation(line: 658, column: 34, scope: !2123)
!2125 = !DILocation(line: 658, column: 41, scope: !2126)
!2126 = distinct !DILexicalBlock(scope: !2123, file: !80, line: 658, column: 29)
!2127 = !DILocation(line: 658, column: 45, scope: !2126)
!2128 = !DILocation(line: 658, column: 43, scope: !2126)
!2129 = !DILocation(line: 658, column: 29, scope: !2123)
!2130 = !DILocation(line: 659, column: 39, scope: !2126)
!2131 = !DILocation(line: 659, column: 43, scope: !2126)
!2132 = !DILocation(line: 659, column: 47, scope: !2126)
!2133 = !DILocation(line: 659, column: 45, scope: !2126)
!2134 = !DILocation(line: 659, column: 51, scope: !2126)
!2135 = !DILocation(line: 659, column: 49, scope: !2126)
!2136 = !DILocation(line: 659, column: 31, scope: !2126)
!2137 = !DILocation(line: 663, column: 35, scope: !2138)
!2138 = distinct !DILexicalBlock(scope: !2126, file: !80, line: 660, column: 33)
!2139 = !DILocation(line: 666, column: 35, scope: !2138)
!2140 = !DILocation(line: 667, column: 33, scope: !2138)
!2141 = !DILocation(line: 658, column: 53, scope: !2126)
!2142 = !DILocation(line: 658, column: 29, scope: !2126)
!2143 = distinct !{!2143, !2129, !2144}
!2144 = !DILocation(line: 667, column: 33, scope: !2123)
!2145 = !DILocation(line: 668, column: 27, scope: !2120)
!2146 = !DILocation(line: 670, column: 41, scope: !2147)
!2147 = distinct !DILexicalBlock(scope: !2114, file: !80, line: 670, column: 29)
!2148 = !DILocation(line: 670, column: 31, scope: !2147)
!2149 = !DILocation(line: 670, column: 29, scope: !2114)
!2150 = !DILocation(line: 671, column: 37, scope: !2147)
!2151 = !DILocation(line: 671, column: 27, scope: !2147)
!2152 = !DILocation(line: 672, column: 30, scope: !2114)
!2153 = !DILocation(line: 672, column: 27, scope: !2114)
!2154 = !DILocation(line: 674, column: 19, scope: !2064)
!2155 = !DILocation(line: 675, column: 26, scope: !2034)
!2156 = !DILocation(line: 675, column: 24, scope: !2034)
!2157 = distinct !{!2157, !2062, !2158}
!2158 = !DILocation(line: 675, column: 44, scope: !2034)
!2159 = !DILocation(line: 678, column: 40, scope: !2020)
!2160 = !DILocation(line: 678, column: 38, scope: !2020)
!2161 = !DILocation(line: 680, column: 21, scope: !2162)
!2162 = distinct !DILexicalBlock(scope: !2020, file: !80, line: 680, column: 17)
!2163 = !DILocation(line: 680, column: 19, scope: !2162)
!2164 = !DILocation(line: 680, column: 23, scope: !2162)
!2165 = !DILocation(line: 680, column: 27, scope: !2162)
!2166 = !DILocation(line: 680, column: 45, scope: !2162)
!2167 = !DILocation(line: 680, column: 50, scope: !2162)
!2168 = !DILocation(line: 680, column: 17, scope: !2020)
!2169 = !DILocalVariable(name: "ilim", scope: !2170, file: !80, line: 684, type: !74)
!2170 = distinct !DILexicalBlock(scope: !2162, file: !80, line: 681, column: 15)
!2171 = !DILocation(line: 684, column: 24, scope: !2170)
!2172 = !DILocation(line: 684, column: 31, scope: !2170)
!2173 = !DILocation(line: 684, column: 35, scope: !2170)
!2174 = !DILocation(line: 684, column: 33, scope: !2170)
!2175 = !DILocation(line: 686, column: 17, scope: !2170)
!2176 = !DILocation(line: 688, column: 25, scope: !2177)
!2177 = distinct !DILexicalBlock(scope: !2178, file: !80, line: 688, column: 25)
!2178 = distinct !DILexicalBlock(scope: !2179, file: !80, line: 687, column: 19)
!2179 = distinct !DILexicalBlock(scope: !2180, file: !80, line: 686, column: 17)
!2180 = distinct !DILexicalBlock(scope: !2170, file: !80, line: 686, column: 17)
!2181 = !DILocation(line: 688, column: 43, scope: !2177)
!2182 = !DILocation(line: 688, column: 48, scope: !2177)
!2183 = !DILocation(line: 688, column: 25, scope: !2178)
!2184 = !DILocation(line: 690, column: 25, scope: !2185)
!2185 = distinct !DILexicalBlock(scope: !2177, file: !80, line: 689, column: 23)
!2186 = !DILocation(line: 690, column: 25, scope: !2187)
!2187 = distinct !DILexicalBlock(scope: !2188, file: !80, line: 690, column: 25)
!2188 = distinct !DILexicalBlock(scope: !2185, file: !80, line: 690, column: 25)
!2189 = !DILocation(line: 690, column: 25, scope: !2188)
!2190 = !DILocation(line: 690, column: 25, scope: !2191)
!2191 = distinct !DILexicalBlock(scope: !2188, file: !80, line: 690, column: 25)
!2192 = !DILocation(line: 690, column: 25, scope: !2193)
!2193 = distinct !DILexicalBlock(scope: !2191, file: !80, line: 690, column: 25)
!2194 = !DILocation(line: 690, column: 25, scope: !2195)
!2195 = distinct !DILexicalBlock(scope: !2196, file: !80, line: 690, column: 25)
!2196 = distinct !DILexicalBlock(scope: !2193, file: !80, line: 690, column: 25)
!2197 = !DILocation(line: 690, column: 25, scope: !2196)
!2198 = !DILocation(line: 690, column: 25, scope: !2199)
!2199 = distinct !DILexicalBlock(scope: !2200, file: !80, line: 690, column: 25)
!2200 = distinct !DILexicalBlock(scope: !2193, file: !80, line: 690, column: 25)
!2201 = !DILocation(line: 690, column: 25, scope: !2200)
!2202 = !DILocation(line: 690, column: 25, scope: !2203)
!2203 = distinct !DILexicalBlock(scope: !2204, file: !80, line: 690, column: 25)
!2204 = distinct !DILexicalBlock(scope: !2193, file: !80, line: 690, column: 25)
!2205 = !DILocation(line: 690, column: 25, scope: !2204)
!2206 = !DILocation(line: 690, column: 25, scope: !2207)
!2207 = distinct !DILexicalBlock(scope: !2208, file: !80, line: 690, column: 25)
!2208 = distinct !DILexicalBlock(scope: !2188, file: !80, line: 690, column: 25)
!2209 = !DILocation(line: 690, column: 25, scope: !2208)
!2210 = !DILocation(line: 691, column: 25, scope: !2185)
!2211 = !DILocation(line: 691, column: 25, scope: !2212)
!2212 = distinct !DILexicalBlock(scope: !2213, file: !80, line: 691, column: 25)
!2213 = distinct !DILexicalBlock(scope: !2185, file: !80, line: 691, column: 25)
!2214 = !DILocation(line: 691, column: 25, scope: !2213)
!2215 = !DILocation(line: 692, column: 25, scope: !2185)
!2216 = !DILocation(line: 692, column: 25, scope: !2217)
!2217 = distinct !DILexicalBlock(scope: !2218, file: !80, line: 692, column: 25)
!2218 = distinct !DILexicalBlock(scope: !2185, file: !80, line: 692, column: 25)
!2219 = !DILocation(line: 692, column: 25, scope: !2218)
!2220 = !DILocation(line: 693, column: 36, scope: !2185)
!2221 = !DILocation(line: 693, column: 38, scope: !2185)
!2222 = !DILocation(line: 693, column: 33, scope: !2185)
!2223 = !DILocation(line: 693, column: 29, scope: !2185)
!2224 = !DILocation(line: 693, column: 27, scope: !2185)
!2225 = !DILocation(line: 694, column: 23, scope: !2185)
!2226 = !DILocation(line: 695, column: 30, scope: !2227)
!2227 = distinct !DILexicalBlock(scope: !2177, file: !80, line: 695, column: 30)
!2228 = !DILocation(line: 695, column: 30, scope: !2177)
!2229 = !DILocation(line: 697, column: 25, scope: !2230)
!2230 = distinct !DILexicalBlock(scope: !2227, file: !80, line: 696, column: 23)
!2231 = !DILocation(line: 697, column: 25, scope: !2232)
!2232 = distinct !DILexicalBlock(scope: !2233, file: !80, line: 697, column: 25)
!2233 = distinct !DILexicalBlock(scope: !2230, file: !80, line: 697, column: 25)
!2234 = !DILocation(line: 697, column: 25, scope: !2233)
!2235 = !DILocation(line: 698, column: 40, scope: !2230)
!2236 = !DILocation(line: 699, column: 23, scope: !2230)
!2237 = !DILocation(line: 700, column: 25, scope: !2238)
!2238 = distinct !DILexicalBlock(scope: !2178, file: !80, line: 700, column: 25)
!2239 = !DILocation(line: 700, column: 33, scope: !2238)
!2240 = !DILocation(line: 700, column: 35, scope: !2238)
!2241 = !DILocation(line: 700, column: 30, scope: !2238)
!2242 = !DILocation(line: 700, column: 25, scope: !2178)
!2243 = !DILocation(line: 701, column: 23, scope: !2238)
!2244 = !DILocation(line: 702, column: 21, scope: !2178)
!2245 = !DILocation(line: 702, column: 21, scope: !2246)
!2246 = distinct !DILexicalBlock(scope: !2247, file: !80, line: 702, column: 21)
!2247 = distinct !DILexicalBlock(scope: !2178, file: !80, line: 702, column: 21)
!2248 = !DILocation(line: 702, column: 21, scope: !2247)
!2249 = !DILocation(line: 702, column: 21, scope: !2250)
!2250 = distinct !DILexicalBlock(scope: !2246, file: !80, line: 702, column: 21)
!2251 = !DILocation(line: 702, column: 21, scope: !2252)
!2252 = distinct !DILexicalBlock(scope: !2253, file: !80, line: 702, column: 21)
!2253 = distinct !DILexicalBlock(scope: !2250, file: !80, line: 702, column: 21)
!2254 = !DILocation(line: 702, column: 21, scope: !2253)
!2255 = !DILocation(line: 702, column: 21, scope: !2256)
!2256 = distinct !DILexicalBlock(scope: !2257, file: !80, line: 702, column: 21)
!2257 = distinct !DILexicalBlock(scope: !2250, file: !80, line: 702, column: 21)
!2258 = !DILocation(line: 702, column: 21, scope: !2257)
!2259 = !DILocation(line: 703, column: 21, scope: !2178)
!2260 = !DILocation(line: 703, column: 21, scope: !2261)
!2261 = distinct !DILexicalBlock(scope: !2262, file: !80, line: 703, column: 21)
!2262 = distinct !DILexicalBlock(scope: !2178, file: !80, line: 703, column: 21)
!2263 = !DILocation(line: 703, column: 21, scope: !2262)
!2264 = !DILocation(line: 704, column: 25, scope: !2178)
!2265 = !DILocation(line: 704, column: 29, scope: !2178)
!2266 = !DILocation(line: 704, column: 23, scope: !2178)
!2267 = !DILocation(line: 686, column: 17, scope: !2179)
!2268 = distinct !{!2268, !2269, !2270}
!2269 = !DILocation(line: 686, column: 17, scope: !2180)
!2270 = !DILocation(line: 705, column: 19, scope: !2180)
!2271 = !DILocation(line: 707, column: 17, scope: !2170)
!2272 = !DILocation(line: 710, column: 9, scope: !1770)
!2273 = !DILocation(line: 712, column: 16, scope: !2274)
!2274 = distinct !DILexicalBlock(scope: !1716, file: !80, line: 712, column: 11)
!2275 = !DILocation(line: 712, column: 34, scope: !2274)
!2276 = !DILocation(line: 712, column: 37, scope: !2274)
!2277 = !DILocation(line: 712, column: 51, scope: !2274)
!2278 = !DILocation(line: 713, column: 15, scope: !2274)
!2279 = !DILocation(line: 713, column: 18, scope: !2274)
!2280 = !DILocation(line: 714, column: 14, scope: !2274)
!2281 = !DILocation(line: 714, column: 17, scope: !2274)
!2282 = !DILocation(line: 715, column: 14, scope: !2274)
!2283 = !DILocation(line: 715, column: 17, scope: !2274)
!2284 = !DILocation(line: 715, column: 33, scope: !2274)
!2285 = !DILocation(line: 715, column: 35, scope: !2274)
!2286 = !DILocation(line: 715, column: 51, scope: !2274)
!2287 = !DILocation(line: 715, column: 53, scope: !2274)
!2288 = !DILocation(line: 715, column: 47, scope: !2274)
!2289 = !DILocation(line: 715, column: 65, scope: !2274)
!2290 = !DILocation(line: 716, column: 11, scope: !2274)
!2291 = !DILocation(line: 716, column: 15, scope: !2274)
!2292 = !DILocation(line: 712, column: 11, scope: !1716)
!2293 = !DILocation(line: 717, column: 9, scope: !2274)
!2294 = !DILabel(scope: !1716, name: "store_escape", file: !80, line: 719)
!2295 = !DILocation(line: 719, column: 5, scope: !1716)
!2296 = !DILocation(line: 720, column: 7, scope: !1716)
!2297 = !DILocation(line: 720, column: 7, scope: !2298)
!2298 = distinct !DILexicalBlock(scope: !2299, file: !80, line: 720, column: 7)
!2299 = distinct !DILexicalBlock(scope: !1716, file: !80, line: 720, column: 7)
!2300 = !DILocation(line: 720, column: 7, scope: !2299)
!2301 = !DILocation(line: 720, column: 7, scope: !2302)
!2302 = distinct !DILexicalBlock(scope: !2299, file: !80, line: 720, column: 7)
!2303 = !DILocation(line: 720, column: 7, scope: !2304)
!2304 = distinct !DILexicalBlock(scope: !2302, file: !80, line: 720, column: 7)
!2305 = !DILocation(line: 720, column: 7, scope: !2306)
!2306 = distinct !DILexicalBlock(scope: !2307, file: !80, line: 720, column: 7)
!2307 = distinct !DILexicalBlock(scope: !2304, file: !80, line: 720, column: 7)
!2308 = !DILocation(line: 720, column: 7, scope: !2307)
!2309 = !DILocation(line: 720, column: 7, scope: !2310)
!2310 = distinct !DILexicalBlock(scope: !2311, file: !80, line: 720, column: 7)
!2311 = distinct !DILexicalBlock(scope: !2304, file: !80, line: 720, column: 7)
!2312 = !DILocation(line: 720, column: 7, scope: !2311)
!2313 = !DILocation(line: 720, column: 7, scope: !2314)
!2314 = distinct !DILexicalBlock(scope: !2315, file: !80, line: 720, column: 7)
!2315 = distinct !DILexicalBlock(scope: !2304, file: !80, line: 720, column: 7)
!2316 = !DILocation(line: 720, column: 7, scope: !2315)
!2317 = !DILocation(line: 720, column: 7, scope: !2318)
!2318 = distinct !DILexicalBlock(scope: !2319, file: !80, line: 720, column: 7)
!2319 = distinct !DILexicalBlock(scope: !2299, file: !80, line: 720, column: 7)
!2320 = !DILocation(line: 720, column: 7, scope: !2319)
!2321 = !DILabel(scope: !1716, name: "store_c", file: !80, line: 722)
!2322 = !DILocation(line: 722, column: 5, scope: !1716)
!2323 = !DILocation(line: 723, column: 7, scope: !1716)
!2324 = !DILocation(line: 723, column: 7, scope: !2325)
!2325 = distinct !DILexicalBlock(scope: !2326, file: !80, line: 723, column: 7)
!2326 = distinct !DILexicalBlock(scope: !1716, file: !80, line: 723, column: 7)
!2327 = !DILocation(line: 723, column: 7, scope: !2326)
!2328 = !DILocation(line: 723, column: 7, scope: !2329)
!2329 = distinct !DILexicalBlock(scope: !2325, file: !80, line: 723, column: 7)
!2330 = !DILocation(line: 723, column: 7, scope: !2331)
!2331 = distinct !DILexicalBlock(scope: !2332, file: !80, line: 723, column: 7)
!2332 = distinct !DILexicalBlock(scope: !2329, file: !80, line: 723, column: 7)
!2333 = !DILocation(line: 723, column: 7, scope: !2332)
!2334 = !DILocation(line: 723, column: 7, scope: !2335)
!2335 = distinct !DILexicalBlock(scope: !2336, file: !80, line: 723, column: 7)
!2336 = distinct !DILexicalBlock(scope: !2329, file: !80, line: 723, column: 7)
!2337 = !DILocation(line: 723, column: 7, scope: !2336)
!2338 = !DILocation(line: 724, column: 7, scope: !1716)
!2339 = !DILocation(line: 724, column: 7, scope: !2340)
!2340 = distinct !DILexicalBlock(scope: !2341, file: !80, line: 724, column: 7)
!2341 = distinct !DILexicalBlock(scope: !1716, file: !80, line: 724, column: 7)
!2342 = !DILocation(line: 724, column: 7, scope: !2341)
!2343 = !DILocation(line: 726, column: 13, scope: !2344)
!2344 = distinct !DILexicalBlock(scope: !1716, file: !80, line: 726, column: 11)
!2345 = !DILocation(line: 726, column: 11, scope: !1716)
!2346 = !DILocation(line: 727, column: 38, scope: !2344)
!2347 = !DILocation(line: 727, column: 9, scope: !2344)
!2348 = !DILocation(line: 728, column: 5, scope: !1716)
!2349 = !DILocation(line: 400, column: 75, scope: !1705)
!2350 = !DILocation(line: 400, column: 3, scope: !1705)
!2351 = distinct !{!2351, !1714, !2352}
!2352 = !DILocation(line: 728, column: 5, scope: !1702)
!2353 = !DILocation(line: 730, column: 7, scope: !2354)
!2354 = distinct !DILexicalBlock(scope: !1562, file: !80, line: 730, column: 7)
!2355 = !DILocation(line: 730, column: 11, scope: !2354)
!2356 = !DILocation(line: 730, column: 16, scope: !2354)
!2357 = !DILocation(line: 730, column: 19, scope: !2354)
!2358 = !DILocation(line: 730, column: 33, scope: !2354)
!2359 = !DILocation(line: 731, column: 7, scope: !2354)
!2360 = !DILocation(line: 731, column: 10, scope: !2354)
!2361 = !DILocation(line: 730, column: 7, scope: !1562)
!2362 = !DILocation(line: 732, column: 5, scope: !2354)
!2363 = !DILocation(line: 738, column: 7, scope: !2364)
!2364 = distinct !DILexicalBlock(scope: !1562, file: !80, line: 738, column: 7)
!2365 = !DILocation(line: 738, column: 21, scope: !2364)
!2366 = !DILocation(line: 738, column: 51, scope: !2364)
!2367 = !DILocation(line: 738, column: 56, scope: !2364)
!2368 = !DILocation(line: 739, column: 7, scope: !2364)
!2369 = !DILocation(line: 739, column: 10, scope: !2364)
!2370 = !DILocation(line: 738, column: 7, scope: !1562)
!2371 = !DILocation(line: 741, column: 11, scope: !2372)
!2372 = distinct !DILexicalBlock(scope: !2373, file: !80, line: 741, column: 11)
!2373 = distinct !DILexicalBlock(scope: !2364, file: !80, line: 740, column: 5)
!2374 = !DILocation(line: 741, column: 11, scope: !2373)
!2375 = !DILocation(line: 742, column: 42, scope: !2372)
!2376 = !DILocation(line: 742, column: 50, scope: !2372)
!2377 = !DILocation(line: 742, column: 67, scope: !2372)
!2378 = !DILocation(line: 742, column: 72, scope: !2372)
!2379 = !DILocation(line: 744, column: 42, scope: !2372)
!2380 = !DILocation(line: 744, column: 49, scope: !2372)
!2381 = !DILocation(line: 745, column: 42, scope: !2372)
!2382 = !DILocation(line: 745, column: 54, scope: !2372)
!2383 = !DILocation(line: 742, column: 16, scope: !2372)
!2384 = !DILocation(line: 742, column: 9, scope: !2372)
!2385 = !DILocation(line: 746, column: 18, scope: !2386)
!2386 = distinct !DILexicalBlock(scope: !2372, file: !80, line: 746, column: 16)
!2387 = !DILocation(line: 746, column: 29, scope: !2386)
!2388 = !DILocation(line: 746, column: 32, scope: !2386)
!2389 = !DILocation(line: 746, column: 16, scope: !2372)
!2390 = !DILocation(line: 749, column: 24, scope: !2391)
!2391 = distinct !DILexicalBlock(scope: !2386, file: !80, line: 747, column: 9)
!2392 = !DILocation(line: 749, column: 22, scope: !2391)
!2393 = !DILocation(line: 750, column: 15, scope: !2391)
!2394 = !DILocation(line: 751, column: 11, scope: !2391)
!2395 = !DILocation(line: 753, column: 5, scope: !2373)
!2396 = !DILocation(line: 755, column: 7, scope: !2397)
!2397 = distinct !DILexicalBlock(scope: !1562, file: !80, line: 755, column: 7)
!2398 = !DILocation(line: 755, column: 20, scope: !2397)
!2399 = !DILocation(line: 755, column: 24, scope: !2397)
!2400 = !DILocation(line: 755, column: 7, scope: !1562)
!2401 = !DILocation(line: 756, column: 5, scope: !2397)
!2402 = !DILocation(line: 756, column: 13, scope: !2403)
!2403 = distinct !DILexicalBlock(scope: !2404, file: !80, line: 756, column: 5)
!2404 = distinct !DILexicalBlock(scope: !2397, file: !80, line: 756, column: 5)
!2405 = !DILocation(line: 756, column: 12, scope: !2403)
!2406 = !DILocation(line: 756, column: 5, scope: !2404)
!2407 = !DILocation(line: 757, column: 7, scope: !2403)
!2408 = !DILocation(line: 757, column: 7, scope: !2409)
!2409 = distinct !DILexicalBlock(scope: !2410, file: !80, line: 757, column: 7)
!2410 = distinct !DILexicalBlock(scope: !2403, file: !80, line: 757, column: 7)
!2411 = !DILocation(line: 757, column: 7, scope: !2410)
!2412 = !DILocation(line: 756, column: 39, scope: !2403)
!2413 = !DILocation(line: 756, column: 5, scope: !2403)
!2414 = distinct !{!2414, !2406, !2415}
!2415 = !DILocation(line: 757, column: 7, scope: !2404)
!2416 = !DILocation(line: 759, column: 7, scope: !2417)
!2417 = distinct !DILexicalBlock(scope: !1562, file: !80, line: 759, column: 7)
!2418 = !DILocation(line: 759, column: 13, scope: !2417)
!2419 = !DILocation(line: 759, column: 11, scope: !2417)
!2420 = !DILocation(line: 759, column: 7, scope: !1562)
!2421 = !DILocation(line: 760, column: 5, scope: !2417)
!2422 = !DILocation(line: 760, column: 12, scope: !2417)
!2423 = !DILocation(line: 760, column: 17, scope: !2417)
!2424 = !DILocation(line: 761, column: 10, scope: !1562)
!2425 = !DILocation(line: 761, column: 3, scope: !1562)
!2426 = !DILabel(scope: !1562, name: "force_outer_quoting_style", file: !80, line: 763)
!2427 = !DILocation(line: 763, column: 2, scope: !1562)
!2428 = !DILocation(line: 766, column: 7, scope: !2429)
!2429 = distinct !DILexicalBlock(scope: !1562, file: !80, line: 766, column: 7)
!2430 = !DILocation(line: 766, column: 21, scope: !2429)
!2431 = !DILocation(line: 766, column: 51, scope: !2429)
!2432 = !DILocation(line: 766, column: 54, scope: !2429)
!2433 = !DILocation(line: 766, column: 7, scope: !1562)
!2434 = !DILocation(line: 767, column: 19, scope: !2429)
!2435 = !DILocation(line: 767, column: 5, scope: !2429)
!2436 = !DILocation(line: 768, column: 36, scope: !1562)
!2437 = !DILocation(line: 768, column: 44, scope: !1562)
!2438 = !DILocation(line: 768, column: 56, scope: !1562)
!2439 = !DILocation(line: 768, column: 61, scope: !1562)
!2440 = !DILocation(line: 769, column: 36, scope: !1562)
!2441 = !DILocation(line: 770, column: 36, scope: !1562)
!2442 = !DILocation(line: 770, column: 42, scope: !1562)
!2443 = !DILocation(line: 771, column: 36, scope: !1562)
!2444 = !DILocation(line: 771, column: 48, scope: !1562)
!2445 = !DILocation(line: 768, column: 10, scope: !1562)
!2446 = !DILocation(line: 768, column: 3, scope: !1562)
!2447 = !DILocation(line: 772, column: 1, scope: !1562)
!2448 = !DILocalVariable(name: "buffer", arg: 1, scope: !2449, file: !80, line: 256, type: !7)
!2449 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !80, file: !80, line: 256, type: !1563, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2450, retainedNodes: !4)
!2450 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !2451, nameTableKind: None)
!2451 = !{!2452, !2454, !2456, !2465, !2467, !2469, !2476, !2478}
!2452 = !DIGlobalVariableExpression(var: !2453, expr: !DIExpression())
!2453 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2450, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!2454 = !DIGlobalVariableExpression(var: !2455, expr: !DIExpression())
!2455 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2450, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!2456 = !DIGlobalVariableExpression(var: !2457, expr: !DIExpression())
!2457 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2450, file: !80, line: 1052, type: !2458, isLocal: false, isDefinition: true)
!2458 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !2459)
!2459 = !{!2460, !2461, !2462, !2463, !2464}
!2460 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2458, file: !80, line: 68, baseType: !57, size: 32)
!2461 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2458, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!2462 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2458, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!2463 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2458, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!2464 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2458, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!2465 = !DIGlobalVariableExpression(var: !2466, expr: !DIExpression())
!2466 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2450, file: !80, line: 116, type: !2458, isLocal: true, isDefinition: true)
!2467 = !DIGlobalVariableExpression(var: !2468, expr: !DIExpression())
!2468 = distinct !DIGlobalVariable(name: "slot0", scope: !2450, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!2469 = !DIGlobalVariableExpression(var: !2470, expr: !DIExpression())
!2470 = distinct !DIGlobalVariable(name: "slotvec", scope: !2450, file: !80, line: 845, type: !2471, isLocal: true, isDefinition: true)
!2471 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2472, size: 64)
!2472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !2473)
!2473 = !{!2474, !2475}
!2474 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2472, file: !80, line: 836, baseType: !74, size: 64)
!2475 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2472, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!2476 = !DIGlobalVariableExpression(var: !2477, expr: !DIExpression())
!2477 = distinct !DIGlobalVariable(name: "nslots", scope: !2450, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!2478 = !DIGlobalVariableExpression(var: !2479, expr: !DIExpression())
!2479 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2450, file: !80, line: 844, type: !2472, isLocal: true, isDefinition: true)
!2480 = !DILocalVariable(name: "buffersize", arg: 2, scope: !2449, file: !80, line: 256, type: !74)
!2481 = !DILocalVariable(name: "arg", arg: 3, scope: !2449, file: !80, line: 257, type: !16)
!2482 = !DILocalVariable(name: "argsize", arg: 4, scope: !2449, file: !80, line: 257, type: !74)
!2483 = !DILocalVariable(name: "quoting_style", arg: 5, scope: !2449, file: !80, line: 258, type: !57)
!2484 = !DILocalVariable(name: "flags", arg: 6, scope: !2449, file: !80, line: 258, type: !19)
!2485 = !DILocalVariable(name: "quote_these_too", arg: 7, scope: !2449, file: !80, line: 259, type: !1565)
!2486 = !DILocalVariable(name: "left_quote", arg: 8, scope: !2449, file: !80, line: 260, type: !16)
!2487 = !DILocalVariable(name: "right_quote", arg: 9, scope: !2449, file: !80, line: 261, type: !16)
!2488 = !DILocalVariable(name: "i", scope: !2449, file: !80, line: 263, type: !74)
!2489 = !DILocalVariable(name: "len", scope: !2449, file: !80, line: 264, type: !74)
!2490 = !DILocalVariable(name: "orig_buffersize", scope: !2449, file: !80, line: 265, type: !74)
!2491 = !DILocalVariable(name: "quote_string", scope: !2449, file: !80, line: 266, type: !16)
!2492 = !DILocalVariable(name: "quote_string_len", scope: !2449, file: !80, line: 267, type: !74)
!2493 = !DILocalVariable(name: "backslash_escapes", scope: !2449, file: !80, line: 268, type: !38)
!2494 = !DILocalVariable(name: "unibyte_locale", scope: !2449, file: !80, line: 269, type: !38)
!2495 = !DILocalVariable(name: "elide_outer_quotes", scope: !2449, file: !80, line: 270, type: !38)
!2496 = !DILocalVariable(name: "pending_shell_escape_end", scope: !2449, file: !80, line: 271, type: !38)
!2497 = !DILocalVariable(name: "encountered_single_quote", scope: !2449, file: !80, line: 272, type: !38)
!2498 = !DILocalVariable(name: "all_c_and_shell_quote_compat", scope: !2449, file: !80, line: 273, type: !38)
!2499 = distinct !DISubprogram(name: "gettext_quote", scope: !80, file: !80, line: 207, type: !2500, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !54, retainedNodes: !4)
!2500 = !DISubroutineType(types: !2501)
!2501 = !{!16, !16, !57}
!2502 = !DILocalVariable(name: "msgid", arg: 1, scope: !2499, file: !80, line: 207, type: !16)
!2503 = !DILocation(line: 207, column: 28, scope: !2499)
!2504 = !DILocalVariable(name: "s", arg: 2, scope: !2499, file: !80, line: 207, type: !57)
!2505 = !DILocation(line: 207, column: 54, scope: !2499)
!2506 = !DILocalVariable(name: "translation", scope: !2499, file: !80, line: 209, type: !16)
!2507 = !DILocation(line: 209, column: 15, scope: !2499)
!2508 = !DILocation(line: 209, column: 29, scope: !2499)
!2509 = !DILocalVariable(name: "locale_code", scope: !2499, file: !80, line: 210, type: !16)
!2510 = !DILocation(line: 210, column: 15, scope: !2499)
!2511 = !DILocation(line: 212, column: 7, scope: !2512)
!2512 = distinct !DILexicalBlock(scope: !2499, file: !80, line: 212, column: 7)
!2513 = !DILocation(line: 212, column: 22, scope: !2512)
!2514 = !DILocation(line: 212, column: 19, scope: !2512)
!2515 = !DILocation(line: 212, column: 7, scope: !2499)
!2516 = !DILocation(line: 213, column: 12, scope: !2512)
!2517 = !DILocation(line: 213, column: 5, scope: !2512)
!2518 = !DILocation(line: 233, column: 17, scope: !2499)
!2519 = !DILocation(line: 233, column: 15, scope: !2499)
!2520 = !DILocation(line: 234, column: 7, scope: !2521)
!2521 = distinct !DILexicalBlock(scope: !2499, file: !80, line: 234, column: 7)
!2522 = !DILocation(line: 234, column: 7, scope: !2499)
!2523 = !DILocation(line: 235, column: 12, scope: !2521)
!2524 = !DILocation(line: 235, column: 21, scope: !2521)
!2525 = !DILocation(line: 235, column: 5, scope: !2521)
!2526 = !DILocation(line: 236, column: 7, scope: !2527)
!2527 = distinct !DILexicalBlock(scope: !2499, file: !80, line: 236, column: 7)
!2528 = !DILocation(line: 236, column: 7, scope: !2499)
!2529 = !DILocation(line: 237, column: 12, scope: !2527)
!2530 = !DILocation(line: 237, column: 21, scope: !2527)
!2531 = !DILocation(line: 237, column: 5, scope: !2527)
!2532 = !DILocation(line: 239, column: 11, scope: !2499)
!2533 = !DILocation(line: 239, column: 13, scope: !2499)
!2534 = !DILocation(line: 239, column: 3, scope: !2499)
!2535 = !DILocation(line: 240, column: 1, scope: !2499)
!2536 = distinct !DISubprogram(name: "quotearg_style", scope: !80, file: !80, line: 970, type: !2537, scopeLine: 971, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !4)
!2537 = !DISubroutineType(types: !2538)
!2538 = !{!7, !57, !16}
!2539 = !DILocalVariable(name: "s", arg: 1, scope: !2536, file: !80, line: 970, type: !57)
!2540 = !DILocation(line: 970, column: 36, scope: !2536)
!2541 = !DILocalVariable(name: "arg", arg: 2, scope: !2536, file: !80, line: 970, type: !16)
!2542 = !DILocation(line: 970, column: 51, scope: !2536)
!2543 = !DILocation(line: 972, column: 31, scope: !2536)
!2544 = !DILocation(line: 972, column: 34, scope: !2536)
!2545 = !DILocation(line: 972, column: 10, scope: !2536)
!2546 = !DILocation(line: 972, column: 3, scope: !2536)
!2547 = distinct !DISubprogram(name: "quotearg_char_mem", scope: !80, file: !80, line: 982, type: !2548, scopeLine: 983, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !4)
!2548 = !DISubroutineType(types: !2549)
!2549 = !{!7, !16, !74, !8}
!2550 = !DILocalVariable(name: "arg", arg: 1, scope: !2547, file: !80, line: 982, type: !16)
!2551 = !DILocation(line: 982, column: 32, scope: !2547)
!2552 = !DILocalVariable(name: "argsize", arg: 2, scope: !2547, file: !80, line: 982, type: !74)
!2553 = !DILocation(line: 982, column: 44, scope: !2547)
!2554 = !DILocalVariable(name: "ch", arg: 3, scope: !2547, file: !80, line: 982, type: !8)
!2555 = !DILocation(line: 982, column: 58, scope: !2547)
!2556 = !DILocalVariable(name: "options", scope: !2547, file: !80, line: 984, type: !93)
!2557 = !DILocation(line: 984, column: 26, scope: !2547)
!2558 = !DILocation(line: 985, column: 13, scope: !2547)
!2559 = !DILocation(line: 986, column: 31, scope: !2547)
!2560 = !DILocation(line: 986, column: 3, scope: !2547)
!2561 = !DILocation(line: 987, column: 33, scope: !2547)
!2562 = !DILocation(line: 987, column: 38, scope: !2547)
!2563 = !DILocation(line: 987, column: 10, scope: !2547)
!2564 = !DILocation(line: 987, column: 3, scope: !2547)
!2565 = distinct !DISubprogram(name: "quotearg_char", scope: !80, file: !80, line: 991, type: !2566, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !4)
!2566 = !DISubroutineType(types: !2567)
!2567 = !{!7, !16, !8}
!2568 = !DILocalVariable(name: "arg", arg: 1, scope: !2565, file: !80, line: 991, type: !16)
!2569 = !DILocation(line: 991, column: 28, scope: !2565)
!2570 = !DILocalVariable(name: "ch", arg: 2, scope: !2565, file: !80, line: 991, type: !8)
!2571 = !DILocation(line: 991, column: 38, scope: !2565)
!2572 = !DILocation(line: 993, column: 29, scope: !2565)
!2573 = !DILocation(line: 993, column: 44, scope: !2565)
!2574 = !DILocation(line: 993, column: 10, scope: !2565)
!2575 = !DILocation(line: 993, column: 3, scope: !2565)
!2576 = distinct !DISubprogram(name: "quotearg_colon", scope: !80, file: !80, line: 997, type: !2577, scopeLine: 998, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !4)
!2577 = !DISubroutineType(types: !2578)
!2578 = !{!7, !16}
!2579 = !DILocalVariable(name: "arg", arg: 1, scope: !2576, file: !80, line: 997, type: !16)
!2580 = !DILocation(line: 997, column: 29, scope: !2576)
!2581 = !DILocation(line: 999, column: 25, scope: !2576)
!2582 = !DILocation(line: 999, column: 10, scope: !2576)
!2583 = !DILocation(line: 999, column: 3, scope: !2576)
!2584 = distinct !DISubprogram(name: "quote_n_mem", scope: !80, file: !80, line: 1061, type: !2585, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !4)
!2585 = !DISubroutineType(types: !2586)
!2586 = !{!16, !19, !16, !74}
!2587 = !DILocalVariable(name: "n", arg: 1, scope: !2584, file: !80, line: 1061, type: !19)
!2588 = !DILocation(line: 1061, column: 18, scope: !2584)
!2589 = !DILocalVariable(name: "arg", arg: 2, scope: !2584, file: !80, line: 1061, type: !16)
!2590 = !DILocation(line: 1061, column: 33, scope: !2584)
!2591 = !DILocalVariable(name: "argsize", arg: 3, scope: !2584, file: !80, line: 1061, type: !74)
!2592 = !DILocation(line: 1061, column: 45, scope: !2584)
!2593 = !DILocation(line: 1063, column: 30, scope: !2584)
!2594 = !DILocation(line: 1063, column: 33, scope: !2584)
!2595 = !DILocation(line: 1063, column: 38, scope: !2584)
!2596 = !DILocation(line: 1063, column: 10, scope: !2584)
!2597 = !DILocation(line: 1063, column: 3, scope: !2584)
!2598 = !DILocalVariable(name: "n", arg: 1, scope: !2599, file: !80, line: 1061, type: !19)
!2599 = distinct !DISubprogram(name: "quote_n_mem", scope: !80, file: !80, line: 1061, type: !2585, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2600, retainedNodes: !4)
!2600 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !2601, nameTableKind: None)
!2601 = !{!2602, !2604, !2606, !2615, !2617, !2619, !2626, !2628}
!2602 = !DIGlobalVariableExpression(var: !2603, expr: !DIExpression())
!2603 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2600, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!2604 = !DIGlobalVariableExpression(var: !2605, expr: !DIExpression())
!2605 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2600, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!2606 = !DIGlobalVariableExpression(var: !2607, expr: !DIExpression())
!2607 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2600, file: !80, line: 1052, type: !2608, isLocal: false, isDefinition: true)
!2608 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !2609)
!2609 = !{!2610, !2611, !2612, !2613, !2614}
!2610 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2608, file: !80, line: 68, baseType: !57, size: 32)
!2611 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2608, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!2612 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2608, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!2613 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2608, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!2614 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2608, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!2615 = !DIGlobalVariableExpression(var: !2616, expr: !DIExpression())
!2616 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2600, file: !80, line: 116, type: !2608, isLocal: true, isDefinition: true)
!2617 = !DIGlobalVariableExpression(var: !2618, expr: !DIExpression())
!2618 = distinct !DIGlobalVariable(name: "slot0", scope: !2600, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!2619 = !DIGlobalVariableExpression(var: !2620, expr: !DIExpression())
!2620 = distinct !DIGlobalVariable(name: "slotvec", scope: !2600, file: !80, line: 845, type: !2621, isLocal: true, isDefinition: true)
!2621 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2622, size: 64)
!2622 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !2623)
!2623 = !{!2624, !2625}
!2624 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2622, file: !80, line: 836, baseType: !74, size: 64)
!2625 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2622, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!2626 = !DIGlobalVariableExpression(var: !2627, expr: !DIExpression())
!2627 = distinct !DIGlobalVariable(name: "nslots", scope: !2600, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!2628 = !DIGlobalVariableExpression(var: !2629, expr: !DIExpression())
!2629 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2600, file: !80, line: 844, type: !2622, isLocal: true, isDefinition: true)
!2630 = !DILocalVariable(name: "arg", arg: 2, scope: !2599, file: !80, line: 1061, type: !16)
!2631 = !DILocalVariable(name: "argsize", arg: 3, scope: !2599, file: !80, line: 1061, type: !74)
!2632 = distinct !DISubprogram(name: "quote_n", scope: !80, file: !80, line: 1073, type: !2633, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !4)
!2633 = !DISubroutineType(types: !2634)
!2634 = !{!16, !19, !16}
!2635 = !DILocalVariable(name: "n", arg: 1, scope: !2632, file: !80, line: 1073, type: !19)
!2636 = !DILocation(line: 1073, column: 14, scope: !2632)
!2637 = !DILocalVariable(name: "arg", arg: 2, scope: !2632, file: !80, line: 1073, type: !16)
!2638 = !DILocation(line: 1073, column: 29, scope: !2632)
!2639 = !DILocation(line: 1075, column: 23, scope: !2632)
!2640 = !DILocation(line: 1075, column: 26, scope: !2632)
!2641 = !DILocation(line: 1075, column: 10, scope: !2632)
!2642 = !DILocation(line: 1075, column: 3, scope: !2632)
!2643 = !DILocalVariable(name: "n", arg: 1, scope: !2644, file: !80, line: 1073, type: !19)
!2644 = distinct !DISubprogram(name: "quote_n", scope: !80, file: !80, line: 1073, type: !2633, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2645, retainedNodes: !4)
!2645 = distinct !DICompileUnit(language: DW_LANG_C99, file: !55, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !56, retainedTypes: !72, globals: !2646, nameTableKind: None)
!2646 = !{!2647, !2649, !2651, !2660, !2662, !2664, !2671, !2673}
!2647 = !DIGlobalVariableExpression(var: !2648, expr: !DIExpression())
!2648 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2645, file: !80, line: 85, type: !81, isLocal: false, isDefinition: true)
!2649 = !DIGlobalVariableExpression(var: !2650, expr: !DIExpression())
!2650 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2645, file: !80, line: 101, type: !87, isLocal: false, isDefinition: true)
!2651 = !DIGlobalVariableExpression(var: !2652, expr: !DIExpression())
!2652 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2645, file: !80, line: 1052, type: !2653, isLocal: false, isDefinition: true)
!2653 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !80, line: 65, size: 448, elements: !2654)
!2654 = !{!2655, !2656, !2657, !2658, !2659}
!2655 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2653, file: !80, line: 68, baseType: !57, size: 32)
!2656 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2653, file: !80, line: 71, baseType: !19, size: 32, offset: 32)
!2657 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2653, file: !80, line: 75, baseType: !98, size: 256, offset: 64)
!2658 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2653, file: !80, line: 78, baseType: !16, size: 64, offset: 320)
!2659 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2653, file: !80, line: 81, baseType: !16, size: 64, offset: 384)
!2660 = !DIGlobalVariableExpression(var: !2661, expr: !DIExpression())
!2661 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2645, file: !80, line: 116, type: !2653, isLocal: true, isDefinition: true)
!2662 = !DIGlobalVariableExpression(var: !2663, expr: !DIExpression())
!2663 = distinct !DIGlobalVariable(name: "slot0", scope: !2645, file: !80, line: 842, type: !105, isLocal: true, isDefinition: true)
!2664 = !DIGlobalVariableExpression(var: !2665, expr: !DIExpression())
!2665 = distinct !DIGlobalVariable(name: "slotvec", scope: !2645, file: !80, line: 845, type: !2666, isLocal: true, isDefinition: true)
!2666 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2667, size: 64)
!2667 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !80, line: 834, size: 128, elements: !2668)
!2668 = !{!2669, !2670}
!2669 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2667, file: !80, line: 836, baseType: !74, size: 64)
!2670 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2667, file: !80, line: 837, baseType: !7, size: 64, offset: 64)
!2671 = !DIGlobalVariableExpression(var: !2672, expr: !DIExpression())
!2672 = distinct !DIGlobalVariable(name: "nslots", scope: !2645, file: !80, line: 843, type: !19, isLocal: true, isDefinition: true)
!2673 = !DIGlobalVariableExpression(var: !2674, expr: !DIExpression())
!2674 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2645, file: !80, line: 844, type: !2667, isLocal: true, isDefinition: true)
!2675 = !DILocalVariable(name: "arg", arg: 2, scope: !2644, file: !80, line: 1073, type: !16)
!2676 = distinct !DISubprogram(name: "quote", scope: !80, file: !80, line: 1079, type: !2677, scopeLine: 1080, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !54, retainedNodes: !4)
!2677 = !DISubroutineType(types: !2678)
!2678 = !{!16, !16}
!2679 = !DILocalVariable(name: "arg", arg: 1, scope: !2676, file: !80, line: 1079, type: !16)
!2680 = !DILocation(line: 1079, column: 20, scope: !2676)
!2681 = !DILocation(line: 1081, column: 22, scope: !2676)
!2682 = !DILocation(line: 1081, column: 10, scope: !2676)
!2683 = !DILocation(line: 1081, column: 3, scope: !2676)
!2684 = distinct !DISubprogram(name: "get_root_dev_ino", scope: !2685, file: !2685, line: 29, type: !2686, scopeLine: 30, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !128, retainedNodes: !4)
!2685 = !DIFile(filename: "lib/root-dev-ino.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2686 = !DISubroutineType(types: !2687)
!2687 = !{!2688, !2688}
!2688 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2689, size: 64)
!2689 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dev_ino", file: !540, line: 7, size: 128, elements: !2690)
!2690 = !{!2691, !2692}
!2691 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !2689, file: !540, line: 9, baseType: !543, size: 64)
!2692 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !2689, file: !540, line: 10, baseType: !546, size: 64, offset: 64)
!2693 = !DILocalVariable(name: "root_d_i", arg: 1, scope: !2684, file: !2685, line: 29, type: !2688)
!2694 = !DILocation(line: 29, column: 35, scope: !2684)
!2695 = !DILocalVariable(name: "statbuf", scope: !2684, file: !2685, line: 31, type: !2696)
!2696 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !374, line: 46, size: 1152, elements: !2697)
!2697 = !{!2698, !2699, !2700, !2701, !2702, !2703, !2704, !2705, !2706, !2707, !2708, !2709, !2714, !2715, !2716}
!2698 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !2696, file: !374, line: 48, baseType: !377, size: 64)
!2699 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !2696, file: !374, line: 53, baseType: !380, size: 64, offset: 64)
!2700 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !2696, file: !374, line: 61, baseType: !382, size: 64, offset: 128)
!2701 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !2696, file: !374, line: 62, baseType: !384, size: 32, offset: 192)
!2702 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !2696, file: !374, line: 64, baseType: !386, size: 32, offset: 224)
!2703 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !2696, file: !374, line: 65, baseType: !388, size: 32, offset: 256)
!2704 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !2696, file: !374, line: 67, baseType: !19, size: 32, offset: 288)
!2705 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !2696, file: !374, line: 69, baseType: !377, size: 64, offset: 320)
!2706 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !2696, file: !374, line: 74, baseType: !392, size: 64, offset: 384)
!2707 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !2696, file: !374, line: 78, baseType: !395, size: 64, offset: 448)
!2708 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !2696, file: !374, line: 80, baseType: !397, size: 64, offset: 512)
!2709 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !2696, file: !374, line: 91, baseType: !2710, size: 128, offset: 576)
!2710 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !400, line: 10, size: 128, elements: !2711)
!2711 = !{!2712, !2713}
!2712 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !2710, file: !400, line: 12, baseType: !403, size: 64)
!2713 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !2710, file: !400, line: 16, baseType: !405, size: 64, offset: 64)
!2714 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !2696, file: !374, line: 92, baseType: !2710, size: 128, offset: 704)
!2715 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !2696, file: !374, line: 93, baseType: !2710, size: 128, offset: 832)
!2716 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !2696, file: !374, line: 106, baseType: !409, size: 192, offset: 960)
!2717 = !DILocation(line: 31, column: 15, scope: !2684)
!2718 = !DILocation(line: 32, column: 7, scope: !2719)
!2719 = distinct !DILexicalBlock(scope: !2684, file: !2685, line: 32, column: 7)
!2720 = !DILocation(line: 32, column: 7, scope: !2684)
!2721 = !DILocation(line: 33, column: 5, scope: !2719)
!2722 = !DILocation(line: 34, column: 30, scope: !2684)
!2723 = !DILocation(line: 34, column: 3, scope: !2684)
!2724 = !DILocation(line: 34, column: 13, scope: !2684)
!2725 = !DILocation(line: 34, column: 20, scope: !2684)
!2726 = !DILocation(line: 35, column: 30, scope: !2684)
!2727 = !DILocation(line: 35, column: 3, scope: !2684)
!2728 = !DILocation(line: 35, column: 13, scope: !2684)
!2729 = !DILocation(line: 35, column: 20, scope: !2684)
!2730 = !DILocation(line: 36, column: 10, scope: !2684)
!2731 = !DILocation(line: 36, column: 3, scope: !2684)
!2732 = !DILocation(line: 37, column: 1, scope: !2684)
!2733 = !DILocalVariable(name: "root_d_i", arg: 1, scope: !2734, file: !2685, line: 29, type: !2737)
!2734 = distinct !DISubprogram(name: "get_root_dev_ino", scope: !2685, file: !2685, line: 29, type: !2735, scopeLine: 30, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2742, retainedNodes: !4)
!2735 = !DISubroutineType(types: !2736)
!2736 = !{!2737, !2737}
!2737 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2738, size: 64)
!2738 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dev_ino", file: !540, line: 7, size: 128, elements: !2739)
!2739 = !{!2740, !2741}
!2740 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !2738, file: !540, line: 9, baseType: !543, size: 64)
!2741 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !2738, file: !540, line: 10, baseType: !546, size: 64, offset: 64)
!2742 = distinct !DICompileUnit(language: DW_LANG_C99, file: !129, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!2743 = !DILocalVariable(name: "statbuf", scope: !2734, file: !2685, line: 31, type: !2744)
!2744 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "stat", file: !374, line: 46, size: 1152, elements: !2745)
!2745 = !{!2746, !2747, !2748, !2749, !2750, !2751, !2752, !2753, !2754, !2755, !2756, !2757, !2762, !2763, !2764}
!2746 = !DIDerivedType(tag: DW_TAG_member, name: "st_dev", scope: !2744, file: !374, line: 48, baseType: !377, size: 64)
!2747 = !DIDerivedType(tag: DW_TAG_member, name: "st_ino", scope: !2744, file: !374, line: 53, baseType: !380, size: 64, offset: 64)
!2748 = !DIDerivedType(tag: DW_TAG_member, name: "st_nlink", scope: !2744, file: !374, line: 61, baseType: !382, size: 64, offset: 128)
!2749 = !DIDerivedType(tag: DW_TAG_member, name: "st_mode", scope: !2744, file: !374, line: 62, baseType: !384, size: 32, offset: 192)
!2750 = !DIDerivedType(tag: DW_TAG_member, name: "st_uid", scope: !2744, file: !374, line: 64, baseType: !386, size: 32, offset: 224)
!2751 = !DIDerivedType(tag: DW_TAG_member, name: "st_gid", scope: !2744, file: !374, line: 65, baseType: !388, size: 32, offset: 256)
!2752 = !DIDerivedType(tag: DW_TAG_member, name: "__pad0", scope: !2744, file: !374, line: 67, baseType: !19, size: 32, offset: 288)
!2753 = !DIDerivedType(tag: DW_TAG_member, name: "st_rdev", scope: !2744, file: !374, line: 69, baseType: !377, size: 64, offset: 320)
!2754 = !DIDerivedType(tag: DW_TAG_member, name: "st_size", scope: !2744, file: !374, line: 74, baseType: !392, size: 64, offset: 384)
!2755 = !DIDerivedType(tag: DW_TAG_member, name: "st_blksize", scope: !2744, file: !374, line: 78, baseType: !395, size: 64, offset: 448)
!2756 = !DIDerivedType(tag: DW_TAG_member, name: "st_blocks", scope: !2744, file: !374, line: 80, baseType: !397, size: 64, offset: 512)
!2757 = !DIDerivedType(tag: DW_TAG_member, name: "st_atim", scope: !2744, file: !374, line: 91, baseType: !2758, size: 128, offset: 576)
!2758 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec", file: !400, line: 10, size: 128, elements: !2759)
!2759 = !{!2760, !2761}
!2760 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !2758, file: !400, line: 12, baseType: !403, size: 64)
!2761 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !2758, file: !400, line: 16, baseType: !405, size: 64, offset: 64)
!2762 = !DIDerivedType(tag: DW_TAG_member, name: "st_mtim", scope: !2744, file: !374, line: 92, baseType: !2758, size: 128, offset: 704)
!2763 = !DIDerivedType(tag: DW_TAG_member, name: "st_ctim", scope: !2744, file: !374, line: 93, baseType: !2758, size: 128, offset: 832)
!2764 = !DIDerivedType(tag: DW_TAG_member, name: "__glibc_reserved", scope: !2744, file: !374, line: 106, baseType: !409, size: 192, offset: 960)
!2765 = distinct !DISubprogram(name: "version_etc_arn", scope: !2766, file: !2766, line: 61, type: !2767, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !130, retainedNodes: !4)
!2766 = !DIFile(filename: "lib/version-etc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2767 = !DISubroutineType(types: !2768)
!2768 = !{null, !2769, !16, !16, !16, !2821, !74}
!2769 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2770, size: 64)
!2770 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2771, line: 7, baseType: !2772)
!2771 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!2772 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2773, line: 49, size: 1728, elements: !2774)
!2773 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!2774 = !{!2775, !2776, !2777, !2778, !2779, !2780, !2781, !2782, !2783, !2784, !2785, !2786, !2787, !2790, !2792, !2793, !2794, !2795, !2796, !2798, !2802, !2805, !2807, !2810, !2813, !2814, !2815, !2816, !2817}
!2775 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2772, file: !2773, line: 51, baseType: !19, size: 32)
!2776 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2772, file: !2773, line: 54, baseType: !7, size: 64, offset: 64)
!2777 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2772, file: !2773, line: 55, baseType: !7, size: 64, offset: 128)
!2778 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2772, file: !2773, line: 56, baseType: !7, size: 64, offset: 192)
!2779 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2772, file: !2773, line: 57, baseType: !7, size: 64, offset: 256)
!2780 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2772, file: !2773, line: 58, baseType: !7, size: 64, offset: 320)
!2781 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2772, file: !2773, line: 59, baseType: !7, size: 64, offset: 384)
!2782 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2772, file: !2773, line: 60, baseType: !7, size: 64, offset: 448)
!2783 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2772, file: !2773, line: 61, baseType: !7, size: 64, offset: 512)
!2784 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2772, file: !2773, line: 64, baseType: !7, size: 64, offset: 576)
!2785 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2772, file: !2773, line: 65, baseType: !7, size: 64, offset: 640)
!2786 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2772, file: !2773, line: 66, baseType: !7, size: 64, offset: 704)
!2787 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2772, file: !2773, line: 68, baseType: !2788, size: 64, offset: 768)
!2788 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2789, size: 64)
!2789 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !2773, line: 36, flags: DIFlagFwdDecl)
!2790 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2772, file: !2773, line: 70, baseType: !2791, size: 64, offset: 832)
!2791 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2772, size: 64)
!2792 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2772, file: !2773, line: 72, baseType: !19, size: 32, offset: 896)
!2793 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2772, file: !2773, line: 73, baseType: !19, size: 32, offset: 928)
!2794 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2772, file: !2773, line: 74, baseType: !392, size: 64, offset: 960)
!2795 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2772, file: !2773, line: 77, baseType: !73, size: 16, offset: 1024)
!2796 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2772, file: !2773, line: 78, baseType: !2797, size: 8, offset: 1040)
!2797 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!2798 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2772, file: !2773, line: 79, baseType: !2799, size: 8, offset: 1048)
!2799 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 8, elements: !2800)
!2800 = !{!2801}
!2801 = !DISubrange(count: 1)
!2802 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2772, file: !2773, line: 81, baseType: !2803, size: 64, offset: 1088)
!2803 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2804, size: 64)
!2804 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !2773, line: 43, baseType: null)
!2805 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2772, file: !2773, line: 89, baseType: !2806, size: 64, offset: 1152)
!2806 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !378, line: 153, baseType: !393)
!2807 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2772, file: !2773, line: 91, baseType: !2808, size: 64, offset: 1216)
!2808 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2809, size: 64)
!2809 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !2773, line: 37, flags: DIFlagFwdDecl)
!2810 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2772, file: !2773, line: 92, baseType: !2811, size: 64, offset: 1280)
!2811 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2812, size: 64)
!2812 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !2773, line: 38, flags: DIFlagFwdDecl)
!2813 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2772, file: !2773, line: 93, baseType: !2791, size: 64, offset: 1344)
!2814 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2772, file: !2773, line: 94, baseType: !6, size: 64, offset: 1408)
!2815 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2772, file: !2773, line: 95, baseType: !74, size: 64, offset: 1472)
!2816 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2772, file: !2773, line: 96, baseType: !19, size: 32, offset: 1536)
!2817 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2772, file: !2773, line: 98, baseType: !2818, size: 160, offset: 1568)
!2818 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 160, elements: !2819)
!2819 = !{!2820}
!2820 = !DISubrange(count: 20)
!2821 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!2822 = !DILocalVariable(name: "stream", arg: 1, scope: !2765, file: !2766, line: 61, type: !2769)
!2823 = !DILocation(line: 61, column: 24, scope: !2765)
!2824 = !DILocalVariable(name: "command_name", arg: 2, scope: !2765, file: !2766, line: 62, type: !16)
!2825 = !DILocation(line: 62, column: 30, scope: !2765)
!2826 = !DILocalVariable(name: "package", arg: 3, scope: !2765, file: !2766, line: 62, type: !16)
!2827 = !DILocation(line: 62, column: 56, scope: !2765)
!2828 = !DILocalVariable(name: "version", arg: 4, scope: !2765, file: !2766, line: 63, type: !16)
!2829 = !DILocation(line: 63, column: 30, scope: !2765)
!2830 = !DILocalVariable(name: "authors", arg: 5, scope: !2765, file: !2766, line: 64, type: !2821)
!2831 = !DILocation(line: 64, column: 39, scope: !2765)
!2832 = !DILocalVariable(name: "n_authors", arg: 6, scope: !2765, file: !2766, line: 64, type: !74)
!2833 = !DILocation(line: 64, column: 55, scope: !2765)
!2834 = !DILocation(line: 66, column: 7, scope: !2835)
!2835 = distinct !DILexicalBlock(scope: !2765, file: !2766, line: 66, column: 7)
!2836 = !DILocation(line: 66, column: 7, scope: !2765)
!2837 = !DILocation(line: 67, column: 14, scope: !2835)
!2838 = !DILocation(line: 67, column: 38, scope: !2835)
!2839 = !DILocation(line: 67, column: 52, scope: !2835)
!2840 = !DILocation(line: 67, column: 61, scope: !2835)
!2841 = !DILocation(line: 67, column: 5, scope: !2835)
!2842 = !DILocation(line: 69, column: 14, scope: !2835)
!2843 = !DILocation(line: 69, column: 33, scope: !2835)
!2844 = !DILocation(line: 69, column: 42, scope: !2835)
!2845 = !DILocation(line: 69, column: 5, scope: !2835)
!2846 = !DILocation(line: 83, column: 12, scope: !2765)
!2847 = !DILocation(line: 83, column: 43, scope: !2765)
!2848 = !DILocation(line: 83, column: 3, scope: !2765)
!2849 = !DILocation(line: 85, column: 3, scope: !2765)
!2850 = !DILocation(line: 88, column: 12, scope: !2765)
!2851 = !DILocation(line: 88, column: 20, scope: !2765)
!2852 = !DILocation(line: 88, column: 3, scope: !2765)
!2853 = !DILocation(line: 95, column: 3, scope: !2765)
!2854 = !DILocation(line: 97, column: 11, scope: !2765)
!2855 = !DILocation(line: 97, column: 3, scope: !2765)
!2856 = !DILocation(line: 102, column: 7, scope: !2857)
!2857 = distinct !DILexicalBlock(scope: !2765, file: !2766, line: 98, column: 5)
!2858 = !DILocation(line: 105, column: 16, scope: !2857)
!2859 = !DILocation(line: 105, column: 24, scope: !2857)
!2860 = !DILocation(line: 105, column: 47, scope: !2857)
!2861 = !DILocation(line: 105, column: 7, scope: !2857)
!2862 = !DILocation(line: 106, column: 7, scope: !2857)
!2863 = !DILocation(line: 109, column: 16, scope: !2857)
!2864 = !DILocation(line: 109, column: 24, scope: !2857)
!2865 = !DILocation(line: 109, column: 54, scope: !2857)
!2866 = !DILocation(line: 109, column: 66, scope: !2857)
!2867 = !DILocation(line: 109, column: 7, scope: !2857)
!2868 = !DILocation(line: 110, column: 7, scope: !2857)
!2869 = !DILocation(line: 113, column: 16, scope: !2857)
!2870 = !DILocation(line: 113, column: 24, scope: !2857)
!2871 = !DILocation(line: 114, column: 16, scope: !2857)
!2872 = !DILocation(line: 114, column: 28, scope: !2857)
!2873 = !DILocation(line: 114, column: 40, scope: !2857)
!2874 = !DILocation(line: 113, column: 7, scope: !2857)
!2875 = !DILocation(line: 115, column: 7, scope: !2857)
!2876 = !DILocation(line: 120, column: 16, scope: !2857)
!2877 = !DILocation(line: 120, column: 24, scope: !2857)
!2878 = !DILocation(line: 121, column: 16, scope: !2857)
!2879 = !DILocation(line: 121, column: 28, scope: !2857)
!2880 = !DILocation(line: 121, column: 40, scope: !2857)
!2881 = !DILocation(line: 121, column: 52, scope: !2857)
!2882 = !DILocation(line: 120, column: 7, scope: !2857)
!2883 = !DILocation(line: 122, column: 7, scope: !2857)
!2884 = !DILocation(line: 127, column: 16, scope: !2857)
!2885 = !DILocation(line: 127, column: 24, scope: !2857)
!2886 = !DILocation(line: 128, column: 16, scope: !2857)
!2887 = !DILocation(line: 128, column: 28, scope: !2857)
!2888 = !DILocation(line: 128, column: 40, scope: !2857)
!2889 = !DILocation(line: 128, column: 52, scope: !2857)
!2890 = !DILocation(line: 128, column: 64, scope: !2857)
!2891 = !DILocation(line: 127, column: 7, scope: !2857)
!2892 = !DILocation(line: 129, column: 7, scope: !2857)
!2893 = !DILocation(line: 134, column: 16, scope: !2857)
!2894 = !DILocation(line: 134, column: 24, scope: !2857)
!2895 = !DILocation(line: 135, column: 16, scope: !2857)
!2896 = !DILocation(line: 135, column: 28, scope: !2857)
!2897 = !DILocation(line: 135, column: 40, scope: !2857)
!2898 = !DILocation(line: 135, column: 52, scope: !2857)
!2899 = !DILocation(line: 135, column: 64, scope: !2857)
!2900 = !DILocation(line: 136, column: 16, scope: !2857)
!2901 = !DILocation(line: 134, column: 7, scope: !2857)
!2902 = !DILocation(line: 137, column: 7, scope: !2857)
!2903 = !DILocation(line: 142, column: 16, scope: !2857)
!2904 = !DILocation(line: 142, column: 24, scope: !2857)
!2905 = !DILocation(line: 143, column: 16, scope: !2857)
!2906 = !DILocation(line: 143, column: 28, scope: !2857)
!2907 = !DILocation(line: 143, column: 40, scope: !2857)
!2908 = !DILocation(line: 143, column: 52, scope: !2857)
!2909 = !DILocation(line: 143, column: 64, scope: !2857)
!2910 = !DILocation(line: 144, column: 16, scope: !2857)
!2911 = !DILocation(line: 144, column: 28, scope: !2857)
!2912 = !DILocation(line: 142, column: 7, scope: !2857)
!2913 = !DILocation(line: 145, column: 7, scope: !2857)
!2914 = !DILocation(line: 150, column: 16, scope: !2857)
!2915 = !DILocation(line: 150, column: 24, scope: !2857)
!2916 = !DILocation(line: 152, column: 17, scope: !2857)
!2917 = !DILocation(line: 152, column: 29, scope: !2857)
!2918 = !DILocation(line: 152, column: 41, scope: !2857)
!2919 = !DILocation(line: 152, column: 53, scope: !2857)
!2920 = !DILocation(line: 152, column: 65, scope: !2857)
!2921 = !DILocation(line: 153, column: 17, scope: !2857)
!2922 = !DILocation(line: 153, column: 29, scope: !2857)
!2923 = !DILocation(line: 153, column: 41, scope: !2857)
!2924 = !DILocation(line: 150, column: 7, scope: !2857)
!2925 = !DILocation(line: 154, column: 7, scope: !2857)
!2926 = !DILocation(line: 159, column: 16, scope: !2857)
!2927 = !DILocation(line: 159, column: 24, scope: !2857)
!2928 = !DILocation(line: 161, column: 16, scope: !2857)
!2929 = !DILocation(line: 161, column: 28, scope: !2857)
!2930 = !DILocation(line: 161, column: 40, scope: !2857)
!2931 = !DILocation(line: 161, column: 52, scope: !2857)
!2932 = !DILocation(line: 161, column: 64, scope: !2857)
!2933 = !DILocation(line: 162, column: 16, scope: !2857)
!2934 = !DILocation(line: 162, column: 28, scope: !2857)
!2935 = !DILocation(line: 162, column: 40, scope: !2857)
!2936 = !DILocation(line: 162, column: 52, scope: !2857)
!2937 = !DILocation(line: 159, column: 7, scope: !2857)
!2938 = !DILocation(line: 163, column: 7, scope: !2857)
!2939 = !DILocation(line: 170, column: 16, scope: !2857)
!2940 = !DILocation(line: 170, column: 24, scope: !2857)
!2941 = !DILocation(line: 172, column: 17, scope: !2857)
!2942 = !DILocation(line: 172, column: 29, scope: !2857)
!2943 = !DILocation(line: 172, column: 41, scope: !2857)
!2944 = !DILocation(line: 172, column: 53, scope: !2857)
!2945 = !DILocation(line: 172, column: 65, scope: !2857)
!2946 = !DILocation(line: 173, column: 17, scope: !2857)
!2947 = !DILocation(line: 173, column: 29, scope: !2857)
!2948 = !DILocation(line: 173, column: 41, scope: !2857)
!2949 = !DILocation(line: 173, column: 53, scope: !2857)
!2950 = !DILocation(line: 170, column: 7, scope: !2857)
!2951 = !DILocation(line: 174, column: 7, scope: !2857)
!2952 = !DILocation(line: 176, column: 1, scope: !2765)
!2953 = !DILocalVariable(name: "stream", arg: 1, scope: !2954, file: !2766, line: 61, type: !2957)
!2954 = distinct !DISubprogram(name: "version_etc_arn", scope: !2766, file: !2766, line: 61, type: !2955, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2991, retainedNodes: !4)
!2955 = !DISubroutineType(types: !2956)
!2956 = !{null, !2957, !16, !16, !16, !2821, !74}
!2957 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2958, size: 64)
!2958 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2771, line: 7, baseType: !2959)
!2959 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2773, line: 49, size: 1728, elements: !2960)
!2960 = !{!2961, !2962, !2963, !2964, !2965, !2966, !2967, !2968, !2969, !2970, !2971, !2972, !2973, !2974, !2976, !2977, !2978, !2979, !2980, !2981, !2982, !2983, !2984, !2985, !2986, !2987, !2988, !2989, !2990}
!2961 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2959, file: !2773, line: 51, baseType: !19, size: 32)
!2962 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2959, file: !2773, line: 54, baseType: !7, size: 64, offset: 64)
!2963 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2959, file: !2773, line: 55, baseType: !7, size: 64, offset: 128)
!2964 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2959, file: !2773, line: 56, baseType: !7, size: 64, offset: 192)
!2965 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2959, file: !2773, line: 57, baseType: !7, size: 64, offset: 256)
!2966 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2959, file: !2773, line: 58, baseType: !7, size: 64, offset: 320)
!2967 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2959, file: !2773, line: 59, baseType: !7, size: 64, offset: 384)
!2968 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2959, file: !2773, line: 60, baseType: !7, size: 64, offset: 448)
!2969 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2959, file: !2773, line: 61, baseType: !7, size: 64, offset: 512)
!2970 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2959, file: !2773, line: 64, baseType: !7, size: 64, offset: 576)
!2971 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2959, file: !2773, line: 65, baseType: !7, size: 64, offset: 640)
!2972 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2959, file: !2773, line: 66, baseType: !7, size: 64, offset: 704)
!2973 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2959, file: !2773, line: 68, baseType: !2788, size: 64, offset: 768)
!2974 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2959, file: !2773, line: 70, baseType: !2975, size: 64, offset: 832)
!2975 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2959, size: 64)
!2976 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2959, file: !2773, line: 72, baseType: !19, size: 32, offset: 896)
!2977 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2959, file: !2773, line: 73, baseType: !19, size: 32, offset: 928)
!2978 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2959, file: !2773, line: 74, baseType: !392, size: 64, offset: 960)
!2979 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2959, file: !2773, line: 77, baseType: !73, size: 16, offset: 1024)
!2980 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2959, file: !2773, line: 78, baseType: !2797, size: 8, offset: 1040)
!2981 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2959, file: !2773, line: 79, baseType: !2799, size: 8, offset: 1048)
!2982 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2959, file: !2773, line: 81, baseType: !2803, size: 64, offset: 1088)
!2983 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2959, file: !2773, line: 89, baseType: !2806, size: 64, offset: 1152)
!2984 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2959, file: !2773, line: 91, baseType: !2808, size: 64, offset: 1216)
!2985 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2959, file: !2773, line: 92, baseType: !2811, size: 64, offset: 1280)
!2986 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2959, file: !2773, line: 93, baseType: !2975, size: 64, offset: 1344)
!2987 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2959, file: !2773, line: 94, baseType: !6, size: 64, offset: 1408)
!2988 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2959, file: !2773, line: 95, baseType: !74, size: 64, offset: 1472)
!2989 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2959, file: !2773, line: 96, baseType: !19, size: 32, offset: 1536)
!2990 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2959, file: !2773, line: 98, baseType: !2818, size: 160, offset: 1568)
!2991 = distinct !DICompileUnit(language: DW_LANG_C99, file: !131, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!2992 = !DILocalVariable(name: "command_name", arg: 2, scope: !2954, file: !2766, line: 62, type: !16)
!2993 = !DILocalVariable(name: "package", arg: 3, scope: !2954, file: !2766, line: 62, type: !16)
!2994 = !DILocalVariable(name: "version", arg: 4, scope: !2954, file: !2766, line: 63, type: !16)
!2995 = !DILocalVariable(name: "authors", arg: 5, scope: !2954, file: !2766, line: 64, type: !2821)
!2996 = !DILocalVariable(name: "n_authors", arg: 6, scope: !2954, file: !2766, line: 64, type: !74)
!2997 = distinct !DISubprogram(name: "version_etc_va", scope: !2766, file: !2766, line: 199, type: !2998, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !130, retainedNodes: !4)
!2998 = !DISubroutineType(types: !2999)
!2999 = !{null, !2769, !16, !16, !16, !3000}
!3000 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3001, size: 64)
!3001 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !131, line: 192, size: 192, elements: !3002)
!3002 = !{!3003, !3004, !3005, !3006}
!3003 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !3001, file: !131, line: 192, baseType: !59, size: 32)
!3004 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !3001, file: !131, line: 192, baseType: !59, size: 32, offset: 32)
!3005 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !3001, file: !131, line: 192, baseType: !6, size: 64, offset: 64)
!3006 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !3001, file: !131, line: 192, baseType: !6, size: 64, offset: 128)
!3007 = !DILocalVariable(name: "stream", arg: 1, scope: !2997, file: !2766, line: 199, type: !2769)
!3008 = !DILocation(line: 199, column: 23, scope: !2997)
!3009 = !DILocalVariable(name: "command_name", arg: 2, scope: !2997, file: !2766, line: 200, type: !16)
!3010 = !DILocation(line: 200, column: 29, scope: !2997)
!3011 = !DILocalVariable(name: "package", arg: 3, scope: !2997, file: !2766, line: 200, type: !16)
!3012 = !DILocation(line: 200, column: 55, scope: !2997)
!3013 = !DILocalVariable(name: "version", arg: 4, scope: !2997, file: !2766, line: 201, type: !16)
!3014 = !DILocation(line: 201, column: 29, scope: !2997)
!3015 = !DILocalVariable(name: "authors", arg: 5, scope: !2997, file: !2766, line: 201, type: !3000)
!3016 = !DILocation(line: 201, column: 46, scope: !2997)
!3017 = !DILocalVariable(name: "n_authors", scope: !2997, file: !2766, line: 203, type: !74)
!3018 = !DILocation(line: 203, column: 10, scope: !2997)
!3019 = !DILocalVariable(name: "authtab", scope: !2997, file: !2766, line: 204, type: !3020)
!3020 = !DICompositeType(tag: DW_TAG_array_type, baseType: !16, size: 640, elements: !89)
!3021 = !DILocation(line: 204, column: 15, scope: !2997)
!3022 = !DILocation(line: 206, column: 18, scope: !3023)
!3023 = distinct !DILexicalBlock(scope: !2997, file: !2766, line: 206, column: 3)
!3024 = !DILocation(line: 206, column: 8, scope: !3023)
!3025 = !DILocation(line: 207, column: 8, scope: !3026)
!3026 = distinct !DILexicalBlock(scope: !3023, file: !2766, line: 206, column: 3)
!3027 = !DILocation(line: 207, column: 18, scope: !3026)
!3028 = !DILocation(line: 208, column: 10, scope: !3026)
!3029 = !DILocation(line: 208, column: 35, scope: !3026)
!3030 = !DILocation(line: 208, column: 22, scope: !3026)
!3031 = !DILocation(line: 208, column: 14, scope: !3026)
!3032 = !DILocation(line: 208, column: 33, scope: !3026)
!3033 = !DILocation(line: 208, column: 67, scope: !3026)
!3034 = !DILocation(line: 0, scope: !3026)
!3035 = !DILocation(line: 206, column: 3, scope: !3023)
!3036 = !DILocation(line: 209, column: 17, scope: !3026)
!3037 = !DILocation(line: 206, column: 3, scope: !3026)
!3038 = distinct !{!3038, !3035, !3039}
!3039 = !DILocation(line: 210, column: 5, scope: !3023)
!3040 = !DILocation(line: 211, column: 20, scope: !2997)
!3041 = !DILocation(line: 211, column: 28, scope: !2997)
!3042 = !DILocation(line: 211, column: 42, scope: !2997)
!3043 = !DILocation(line: 211, column: 51, scope: !2997)
!3044 = !DILocation(line: 212, column: 20, scope: !2997)
!3045 = !DILocation(line: 212, column: 29, scope: !2997)
!3046 = !DILocation(line: 211, column: 3, scope: !2997)
!3047 = !DILocation(line: 213, column: 1, scope: !2997)
!3048 = !DILocalVariable(name: "stream", arg: 1, scope: !3049, file: !2766, line: 199, type: !3052)
!3049 = distinct !DISubprogram(name: "version_etc_va", scope: !2766, file: !2766, line: 199, type: !3050, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3093, retainedNodes: !4)
!3050 = !DISubroutineType(types: !3051)
!3051 = !{null, !3052, !16, !16, !16, !3086}
!3052 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3053, size: 64)
!3053 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2771, line: 7, baseType: !3054)
!3054 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2773, line: 49, size: 1728, elements: !3055)
!3055 = !{!3056, !3057, !3058, !3059, !3060, !3061, !3062, !3063, !3064, !3065, !3066, !3067, !3068, !3069, !3071, !3072, !3073, !3074, !3075, !3076, !3077, !3078, !3079, !3080, !3081, !3082, !3083, !3084, !3085}
!3056 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3054, file: !2773, line: 51, baseType: !19, size: 32)
!3057 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3054, file: !2773, line: 54, baseType: !7, size: 64, offset: 64)
!3058 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3054, file: !2773, line: 55, baseType: !7, size: 64, offset: 128)
!3059 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3054, file: !2773, line: 56, baseType: !7, size: 64, offset: 192)
!3060 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3054, file: !2773, line: 57, baseType: !7, size: 64, offset: 256)
!3061 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3054, file: !2773, line: 58, baseType: !7, size: 64, offset: 320)
!3062 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3054, file: !2773, line: 59, baseType: !7, size: 64, offset: 384)
!3063 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3054, file: !2773, line: 60, baseType: !7, size: 64, offset: 448)
!3064 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3054, file: !2773, line: 61, baseType: !7, size: 64, offset: 512)
!3065 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3054, file: !2773, line: 64, baseType: !7, size: 64, offset: 576)
!3066 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3054, file: !2773, line: 65, baseType: !7, size: 64, offset: 640)
!3067 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3054, file: !2773, line: 66, baseType: !7, size: 64, offset: 704)
!3068 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3054, file: !2773, line: 68, baseType: !2788, size: 64, offset: 768)
!3069 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3054, file: !2773, line: 70, baseType: !3070, size: 64, offset: 832)
!3070 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3054, size: 64)
!3071 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3054, file: !2773, line: 72, baseType: !19, size: 32, offset: 896)
!3072 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3054, file: !2773, line: 73, baseType: !19, size: 32, offset: 928)
!3073 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3054, file: !2773, line: 74, baseType: !392, size: 64, offset: 960)
!3074 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3054, file: !2773, line: 77, baseType: !73, size: 16, offset: 1024)
!3075 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3054, file: !2773, line: 78, baseType: !2797, size: 8, offset: 1040)
!3076 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3054, file: !2773, line: 79, baseType: !2799, size: 8, offset: 1048)
!3077 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3054, file: !2773, line: 81, baseType: !2803, size: 64, offset: 1088)
!3078 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3054, file: !2773, line: 89, baseType: !2806, size: 64, offset: 1152)
!3079 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3054, file: !2773, line: 91, baseType: !2808, size: 64, offset: 1216)
!3080 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3054, file: !2773, line: 92, baseType: !2811, size: 64, offset: 1280)
!3081 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3054, file: !2773, line: 93, baseType: !3070, size: 64, offset: 1344)
!3082 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3054, file: !2773, line: 94, baseType: !6, size: 64, offset: 1408)
!3083 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3054, file: !2773, line: 95, baseType: !74, size: 64, offset: 1472)
!3084 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3054, file: !2773, line: 96, baseType: !19, size: 32, offset: 1536)
!3085 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3054, file: !2773, line: 98, baseType: !2818, size: 160, offset: 1568)
!3086 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3087, size: 64)
!3087 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !131, line: 192, size: 192, elements: !3088)
!3088 = !{!3089, !3090, !3091, !3092}
!3089 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !3087, file: !131, line: 192, baseType: !59, size: 32)
!3090 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !3087, file: !131, line: 192, baseType: !59, size: 32, offset: 32)
!3091 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !3087, file: !131, line: 192, baseType: !6, size: 64, offset: 64)
!3092 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !3087, file: !131, line: 192, baseType: !6, size: 64, offset: 128)
!3093 = distinct !DICompileUnit(language: DW_LANG_C99, file: !131, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!3094 = !DILocalVariable(name: "command_name", arg: 2, scope: !3049, file: !2766, line: 200, type: !16)
!3095 = !DILocalVariable(name: "package", arg: 3, scope: !3049, file: !2766, line: 200, type: !16)
!3096 = !DILocalVariable(name: "version", arg: 4, scope: !3049, file: !2766, line: 201, type: !16)
!3097 = !DILocalVariable(name: "authors", arg: 5, scope: !3049, file: !2766, line: 201, type: !3086)
!3098 = !DILocalVariable(name: "n_authors", scope: !3049, file: !2766, line: 203, type: !74)
!3099 = !DILocalVariable(name: "authtab", scope: !3049, file: !2766, line: 204, type: !3020)
!3100 = distinct !DISubprogram(name: "version_etc", scope: !2766, file: !2766, line: 230, type: !3101, scopeLine: 233, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !130, retainedNodes: !4)
!3101 = !DISubroutineType(types: !3102)
!3102 = !{null, !2769, !16, !16, !16, null}
!3103 = !DILocalVariable(name: "stream", arg: 1, scope: !3100, file: !2766, line: 230, type: !2769)
!3104 = !DILocation(line: 230, column: 20, scope: !3100)
!3105 = !DILocalVariable(name: "command_name", arg: 2, scope: !3100, file: !2766, line: 231, type: !16)
!3106 = !DILocation(line: 231, column: 26, scope: !3100)
!3107 = !DILocalVariable(name: "package", arg: 3, scope: !3100, file: !2766, line: 231, type: !16)
!3108 = !DILocation(line: 231, column: 52, scope: !3100)
!3109 = !DILocalVariable(name: "version", arg: 4, scope: !3100, file: !2766, line: 232, type: !16)
!3110 = !DILocation(line: 232, column: 26, scope: !3100)
!3111 = !DILocalVariable(name: "authors", scope: !3100, file: !2766, line: 234, type: !3112)
!3112 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !3113, line: 52, baseType: !3114)
!3113 = !DIFile(filename: "/usr/include/stdio.h", directory: "")
!3114 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !3115, line: 32, baseType: !3116)
!3115 = !DIFile(filename: "/usr/lib/llvm-9/lib/clang/9.0.1/include/stdarg.h", directory: "")
!3116 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !131, line: 234, baseType: !3117)
!3117 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3001, size: 192, elements: !2800)
!3118 = !DILocation(line: 234, column: 11, scope: !3100)
!3119 = !DILocation(line: 236, column: 3, scope: !3100)
!3120 = !DILocation(line: 237, column: 19, scope: !3100)
!3121 = !DILocation(line: 237, column: 27, scope: !3100)
!3122 = !DILocation(line: 237, column: 41, scope: !3100)
!3123 = !DILocation(line: 237, column: 50, scope: !3100)
!3124 = !DILocation(line: 237, column: 59, scope: !3100)
!3125 = !DILocation(line: 237, column: 3, scope: !3100)
!3126 = !DILocation(line: 238, column: 3, scope: !3100)
!3127 = !DILocation(line: 239, column: 1, scope: !3100)
!3128 = !DILocalVariable(name: "stream", arg: 1, scope: !3129, file: !2766, line: 230, type: !3132)
!3129 = distinct !DISubprogram(name: "version_etc", scope: !2766, file: !2766, line: 230, type: !3130, scopeLine: 233, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3166, retainedNodes: !4)
!3130 = !DISubroutineType(types: !3131)
!3131 = !{null, !3132, !16, !16, !16, null}
!3132 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3133, size: 64)
!3133 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2771, line: 7, baseType: !3134)
!3134 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2773, line: 49, size: 1728, elements: !3135)
!3135 = !{!3136, !3137, !3138, !3139, !3140, !3141, !3142, !3143, !3144, !3145, !3146, !3147, !3148, !3149, !3151, !3152, !3153, !3154, !3155, !3156, !3157, !3158, !3159, !3160, !3161, !3162, !3163, !3164, !3165}
!3136 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3134, file: !2773, line: 51, baseType: !19, size: 32)
!3137 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3134, file: !2773, line: 54, baseType: !7, size: 64, offset: 64)
!3138 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3134, file: !2773, line: 55, baseType: !7, size: 64, offset: 128)
!3139 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3134, file: !2773, line: 56, baseType: !7, size: 64, offset: 192)
!3140 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3134, file: !2773, line: 57, baseType: !7, size: 64, offset: 256)
!3141 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3134, file: !2773, line: 58, baseType: !7, size: 64, offset: 320)
!3142 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3134, file: !2773, line: 59, baseType: !7, size: 64, offset: 384)
!3143 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3134, file: !2773, line: 60, baseType: !7, size: 64, offset: 448)
!3144 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3134, file: !2773, line: 61, baseType: !7, size: 64, offset: 512)
!3145 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3134, file: !2773, line: 64, baseType: !7, size: 64, offset: 576)
!3146 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3134, file: !2773, line: 65, baseType: !7, size: 64, offset: 640)
!3147 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3134, file: !2773, line: 66, baseType: !7, size: 64, offset: 704)
!3148 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3134, file: !2773, line: 68, baseType: !2788, size: 64, offset: 768)
!3149 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3134, file: !2773, line: 70, baseType: !3150, size: 64, offset: 832)
!3150 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3134, size: 64)
!3151 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3134, file: !2773, line: 72, baseType: !19, size: 32, offset: 896)
!3152 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3134, file: !2773, line: 73, baseType: !19, size: 32, offset: 928)
!3153 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3134, file: !2773, line: 74, baseType: !392, size: 64, offset: 960)
!3154 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3134, file: !2773, line: 77, baseType: !73, size: 16, offset: 1024)
!3155 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3134, file: !2773, line: 78, baseType: !2797, size: 8, offset: 1040)
!3156 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3134, file: !2773, line: 79, baseType: !2799, size: 8, offset: 1048)
!3157 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3134, file: !2773, line: 81, baseType: !2803, size: 64, offset: 1088)
!3158 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3134, file: !2773, line: 89, baseType: !2806, size: 64, offset: 1152)
!3159 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3134, file: !2773, line: 91, baseType: !2808, size: 64, offset: 1216)
!3160 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3134, file: !2773, line: 92, baseType: !2811, size: 64, offset: 1280)
!3161 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3134, file: !2773, line: 93, baseType: !3150, size: 64, offset: 1344)
!3162 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3134, file: !2773, line: 94, baseType: !6, size: 64, offset: 1408)
!3163 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3134, file: !2773, line: 95, baseType: !74, size: 64, offset: 1472)
!3164 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3134, file: !2773, line: 96, baseType: !19, size: 32, offset: 1536)
!3165 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3134, file: !2773, line: 98, baseType: !2818, size: 160, offset: 1568)
!3166 = distinct !DICompileUnit(language: DW_LANG_C99, file: !131, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!3167 = !DILocalVariable(name: "command_name", arg: 2, scope: !3129, file: !2766, line: 231, type: !16)
!3168 = !DILocalVariable(name: "package", arg: 3, scope: !3129, file: !2766, line: 231, type: !16)
!3169 = !DILocalVariable(name: "version", arg: 4, scope: !3129, file: !2766, line: 232, type: !16)
!3170 = !DILocalVariable(name: "authors", scope: !3129, file: !2766, line: 234, type: !3171)
!3171 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !3113, line: 52, baseType: !3172)
!3172 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !3115, line: 32, baseType: !3173)
!3173 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !131, line: 234, baseType: !3174)
!3174 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3175, size: 192, elements: !2800)
!3175 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !131, line: 192, size: 192, elements: !3176)
!3176 = !{!3177, !3178, !3179, !3180}
!3177 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !3175, file: !131, line: 192, baseType: !59, size: 32)
!3178 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !3175, file: !131, line: 192, baseType: !59, size: 32, offset: 32)
!3179 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !3175, file: !131, line: 192, baseType: !6, size: 64, offset: 64)
!3180 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !3175, file: !131, line: 192, baseType: !6, size: 64, offset: 128)
!3181 = distinct !DISubprogram(name: "xnmalloc", scope: !3182, file: !3182, line: 99, type: !3183, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !133, retainedNodes: !4)
!3182 = !DIFile(filename: "./lib/xalloc.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3183 = !DISubroutineType(types: !3184)
!3184 = !{!6, !74, !74}
!3185 = !DILocalVariable(name: "n", arg: 1, scope: !3181, file: !3182, line: 99, type: !74)
!3186 = !DILocation(line: 99, column: 18, scope: !3181)
!3187 = !DILocalVariable(name: "s", arg: 2, scope: !3181, file: !3182, line: 99, type: !74)
!3188 = !DILocation(line: 99, column: 28, scope: !3181)
!3189 = !DILocation(line: 101, column: 7, scope: !3190)
!3190 = distinct !DILexicalBlock(scope: !3181, file: !3182, line: 101, column: 7)
!3191 = !DILocation(line: 101, column: 7, scope: !3181)
!3192 = !DILocation(line: 102, column: 5, scope: !3190)
!3193 = !DILocation(line: 103, column: 19, scope: !3181)
!3194 = !DILocation(line: 103, column: 23, scope: !3181)
!3195 = !DILocation(line: 103, column: 21, scope: !3181)
!3196 = !DILocation(line: 103, column: 10, scope: !3181)
!3197 = !DILocation(line: 103, column: 3, scope: !3181)
!3198 = !DILocalVariable(name: "n", arg: 1, scope: !3199, file: !3182, line: 99, type: !74)
!3199 = distinct !DISubprogram(name: "xnmalloc", scope: !3182, file: !3182, line: 99, type: !3183, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3200, retainedNodes: !4)
!3200 = distinct !DICompileUnit(language: DW_LANG_C99, file: !134, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !135, nameTableKind: None)
!3201 = !DILocalVariable(name: "s", arg: 2, scope: !3199, file: !3182, line: 99, type: !74)
!3202 = distinct !DISubprogram(name: "xmalloc", scope: !3203, file: !3203, line: 39, type: !3204, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !133, retainedNodes: !4)
!3203 = !DIFile(filename: "lib/xmalloc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3204 = !DISubroutineType(types: !3205)
!3205 = !{!6, !74}
!3206 = !DILocalVariable(name: "n", arg: 1, scope: !3202, file: !3203, line: 39, type: !74)
!3207 = !DILocation(line: 39, column: 17, scope: !3202)
!3208 = !DILocalVariable(name: "p", scope: !3202, file: !3203, line: 41, type: !6)
!3209 = !DILocation(line: 41, column: 9, scope: !3202)
!3210 = !DILocation(line: 41, column: 21, scope: !3202)
!3211 = !DILocation(line: 41, column: 13, scope: !3202)
!3212 = !DILocation(line: 42, column: 8, scope: !3213)
!3213 = distinct !DILexicalBlock(scope: !3202, file: !3203, line: 42, column: 7)
!3214 = !DILocation(line: 42, column: 10, scope: !3213)
!3215 = !DILocation(line: 42, column: 13, scope: !3213)
!3216 = !DILocation(line: 42, column: 15, scope: !3213)
!3217 = !DILocation(line: 42, column: 7, scope: !3202)
!3218 = !DILocation(line: 43, column: 5, scope: !3213)
!3219 = !DILocation(line: 44, column: 10, scope: !3202)
!3220 = !DILocation(line: 44, column: 3, scope: !3202)
!3221 = !DILocalVariable(name: "n", arg: 1, scope: !3222, file: !3203, line: 39, type: !74)
!3222 = distinct !DISubprogram(name: "xmalloc", scope: !3203, file: !3203, line: 39, type: !3204, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3223, retainedNodes: !4)
!3223 = distinct !DICompileUnit(language: DW_LANG_C99, file: !134, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !135, nameTableKind: None)
!3224 = !DILocalVariable(name: "p", scope: !3222, file: !3203, line: 41, type: !6)
!3225 = distinct !DISubprogram(name: "xrealloc", scope: !3203, file: !3203, line: 51, type: !3226, scopeLine: 52, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !133, retainedNodes: !4)
!3226 = !DISubroutineType(types: !3227)
!3227 = !{!6, !6, !74}
!3228 = !DILocalVariable(name: "p", arg: 1, scope: !3225, file: !3203, line: 51, type: !6)
!3229 = !DILocation(line: 51, column: 17, scope: !3225)
!3230 = !DILocalVariable(name: "n", arg: 2, scope: !3225, file: !3203, line: 51, type: !74)
!3231 = !DILocation(line: 51, column: 27, scope: !3225)
!3232 = !DILocation(line: 53, column: 8, scope: !3233)
!3233 = distinct !DILexicalBlock(scope: !3225, file: !3203, line: 53, column: 7)
!3234 = !DILocation(line: 53, column: 10, scope: !3233)
!3235 = !DILocation(line: 53, column: 13, scope: !3233)
!3236 = !DILocation(line: 53, column: 7, scope: !3225)
!3237 = !DILocation(line: 57, column: 13, scope: !3238)
!3238 = distinct !DILexicalBlock(scope: !3233, file: !3203, line: 54, column: 5)
!3239 = !DILocation(line: 57, column: 7, scope: !3238)
!3240 = !DILocation(line: 58, column: 7, scope: !3238)
!3241 = !DILocation(line: 61, column: 16, scope: !3225)
!3242 = !DILocation(line: 61, column: 19, scope: !3225)
!3243 = !DILocation(line: 61, column: 7, scope: !3225)
!3244 = !DILocation(line: 61, column: 5, scope: !3225)
!3245 = !DILocation(line: 62, column: 8, scope: !3246)
!3246 = distinct !DILexicalBlock(scope: !3225, file: !3203, line: 62, column: 7)
!3247 = !DILocation(line: 62, column: 10, scope: !3246)
!3248 = !DILocation(line: 62, column: 13, scope: !3246)
!3249 = !DILocation(line: 62, column: 7, scope: !3225)
!3250 = !DILocation(line: 63, column: 5, scope: !3246)
!3251 = !DILocation(line: 64, column: 10, scope: !3225)
!3252 = !DILocation(line: 64, column: 3, scope: !3225)
!3253 = !DILocation(line: 65, column: 1, scope: !3225)
!3254 = !DILocalVariable(name: "p", arg: 1, scope: !3255, file: !3203, line: 51, type: !6)
!3255 = distinct !DISubprogram(name: "xrealloc", scope: !3203, file: !3203, line: 51, type: !3226, scopeLine: 52, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3256, retainedNodes: !4)
!3256 = distinct !DICompileUnit(language: DW_LANG_C99, file: !134, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !135, nameTableKind: None)
!3257 = !DILocalVariable(name: "n", arg: 2, scope: !3255, file: !3203, line: 51, type: !74)
!3258 = distinct !DISubprogram(name: "xcharalloc", scope: !3182, file: !3182, line: 216, type: !941, scopeLine: 217, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !133, retainedNodes: !4)
!3259 = !DILocalVariable(name: "n", arg: 1, scope: !3258, file: !3182, line: 216, type: !74)
!3260 = !DILocation(line: 216, column: 20, scope: !3258)
!3261 = !DILocation(line: 218, column: 10, scope: !3258)
!3262 = !DILocation(line: 218, column: 3, scope: !3258)
!3263 = !DILocalVariable(name: "n", arg: 1, scope: !3264, file: !3182, line: 216, type: !74)
!3264 = distinct !DISubprogram(name: "xcharalloc", scope: !3182, file: !3182, line: 216, type: !941, scopeLine: 217, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3265, retainedNodes: !4)
!3265 = distinct !DICompileUnit(language: DW_LANG_C99, file: !134, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !135, nameTableKind: None)
!3266 = distinct !DISubprogram(name: "xalloc_die", scope: !3267, file: !3267, line: 32, type: !1045, scopeLine: 33, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !136, retainedNodes: !4)
!3267 = !DIFile(filename: "lib/xalloc-die.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3268 = !DILocation(line: 34, column: 10, scope: !3266)
!3269 = !DILocation(line: 34, column: 33, scope: !3266)
!3270 = !DILocation(line: 34, column: 3, scope: !3266)
!3271 = !DILocation(line: 40, column: 3, scope: !3266)
!3272 = distinct !DISubprogram(name: "xgetcwd", scope: !3273, file: !3273, line: 35, type: !370, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !138, retainedNodes: !4)
!3273 = !DIFile(filename: "lib/xgetcwd.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3274 = !DILocalVariable(name: "cwd", scope: !3272, file: !3273, line: 37, type: !7)
!3275 = !DILocation(line: 37, column: 9, scope: !3272)
!3276 = !DILocation(line: 37, column: 15, scope: !3272)
!3277 = !DILocation(line: 38, column: 9, scope: !3278)
!3278 = distinct !DILexicalBlock(scope: !3272, file: !3273, line: 38, column: 7)
!3279 = !DILocation(line: 38, column: 13, scope: !3278)
!3280 = !DILocation(line: 38, column: 16, scope: !3278)
!3281 = !DILocation(line: 38, column: 22, scope: !3278)
!3282 = !DILocation(line: 38, column: 7, scope: !3272)
!3283 = !DILocation(line: 39, column: 5, scope: !3278)
!3284 = !DILocation(line: 40, column: 10, scope: !3272)
!3285 = !DILocation(line: 40, column: 3, scope: !3272)
!3286 = !DILocalVariable(name: "cwd", scope: !3287, file: !3273, line: 37, type: !7)
!3287 = distinct !DISubprogram(name: "xgetcwd", scope: !3273, file: !3273, line: 35, type: !370, scopeLine: 36, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3288, retainedNodes: !4)
!3288 = distinct !DICompileUnit(language: DW_LANG_C99, file: !139, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!3289 = distinct !DISubprogram(name: "rpl_mbrtowc", scope: !3290, file: !3290, line: 86, type: !3291, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !140, retainedNodes: !4)
!3290 = !DIFile(filename: "lib/mbrtowc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3291 = !DISubroutineType(types: !3292)
!3292 = !{!74, !3293, !16, !74, !3294}
!3293 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2065, size: 64)
!3294 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3295, size: 64)
!3295 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !2036, line: 6, baseType: !3296)
!3296 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !2038, line: 21, baseType: !3297)
!3297 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2038, line: 13, size: 64, elements: !3298)
!3298 = !{!3299, !3300}
!3299 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !3297, file: !2038, line: 15, baseType: !19, size: 32)
!3300 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !3297, file: !2038, line: 20, baseType: !3301, size: 32, offset: 32)
!3301 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !3297, file: !2038, line: 16, size: 32, elements: !3302)
!3302 = !{!3303, !3304}
!3303 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !3301, file: !2038, line: 18, baseType: !59, size: 32)
!3304 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !3301, file: !2038, line: 19, baseType: !2047, size: 32)
!3305 = !DILocalVariable(name: "pwc", arg: 1, scope: !3289, file: !3290, line: 86, type: !3293)
!3306 = !DILocation(line: 86, column: 23, scope: !3289)
!3307 = !DILocalVariable(name: "s", arg: 2, scope: !3289, file: !3290, line: 86, type: !16)
!3308 = !DILocation(line: 86, column: 40, scope: !3289)
!3309 = !DILocalVariable(name: "n", arg: 3, scope: !3289, file: !3290, line: 86, type: !74)
!3310 = !DILocation(line: 86, column: 50, scope: !3289)
!3311 = !DILocalVariable(name: "ps", arg: 4, scope: !3289, file: !3290, line: 86, type: !3294)
!3312 = !DILocation(line: 86, column: 64, scope: !3289)
!3313 = !DILocalVariable(name: "ret", scope: !3289, file: !3290, line: 88, type: !74)
!3314 = !DILocation(line: 88, column: 10, scope: !3289)
!3315 = !DILocalVariable(name: "wc", scope: !3289, file: !3290, line: 89, type: !2065)
!3316 = !DILocation(line: 89, column: 11, scope: !3289)
!3317 = !DILocation(line: 105, column: 9, scope: !3318)
!3318 = distinct !DILexicalBlock(scope: !3289, file: !3290, line: 105, column: 7)
!3319 = !DILocation(line: 105, column: 7, scope: !3289)
!3320 = !DILocation(line: 106, column: 9, scope: !3318)
!3321 = !DILocation(line: 106, column: 5, scope: !3318)
!3322 = !DILocation(line: 145, column: 18, scope: !3289)
!3323 = !DILocation(line: 145, column: 23, scope: !3289)
!3324 = !DILocation(line: 145, column: 26, scope: !3289)
!3325 = !DILocation(line: 145, column: 29, scope: !3289)
!3326 = !DILocation(line: 145, column: 9, scope: !3289)
!3327 = !DILocation(line: 145, column: 7, scope: !3289)
!3328 = !DILocation(line: 154, column: 22, scope: !3329)
!3329 = distinct !DILexicalBlock(scope: !3289, file: !3290, line: 154, column: 7)
!3330 = !DILocation(line: 154, column: 19, scope: !3329)
!3331 = !DILocation(line: 154, column: 26, scope: !3329)
!3332 = !DILocation(line: 154, column: 29, scope: !3329)
!3333 = !DILocation(line: 154, column: 31, scope: !3329)
!3334 = !DILocation(line: 154, column: 36, scope: !3329)
!3335 = !DILocation(line: 154, column: 41, scope: !3329)
!3336 = !DILocation(line: 154, column: 7, scope: !3289)
!3337 = !DILocalVariable(name: "uc", scope: !3338, file: !3290, line: 156, type: !148)
!3338 = distinct !DILexicalBlock(scope: !3329, file: !3290, line: 155, column: 5)
!3339 = !DILocation(line: 156, column: 21, scope: !3338)
!3340 = !DILocation(line: 156, column: 27, scope: !3338)
!3341 = !DILocation(line: 156, column: 26, scope: !3338)
!3342 = !DILocation(line: 157, column: 14, scope: !3338)
!3343 = !DILocation(line: 157, column: 8, scope: !3338)
!3344 = !DILocation(line: 157, column: 12, scope: !3338)
!3345 = !DILocation(line: 158, column: 7, scope: !3338)
!3346 = !DILocation(line: 162, column: 10, scope: !3289)
!3347 = !DILocation(line: 162, column: 3, scope: !3289)
!3348 = !DILocation(line: 163, column: 1, scope: !3289)
!3349 = distinct !DISubprogram(name: "c_strcasecmp", scope: !3350, file: !3350, line: 27, type: !3351, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !143, retainedNodes: !4)
!3350 = !DIFile(filename: "lib/c-strcasecmp.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3351 = !DISubroutineType(types: !3352)
!3352 = !{!19, !16, !16}
!3353 = !DILocalVariable(name: "s1", arg: 1, scope: !3349, file: !3350, line: 27, type: !16)
!3354 = !DILocation(line: 27, column: 27, scope: !3349)
!3355 = !DILocalVariable(name: "s2", arg: 2, scope: !3349, file: !3350, line: 27, type: !16)
!3356 = !DILocation(line: 27, column: 43, scope: !3349)
!3357 = !DILocalVariable(name: "p1", scope: !3349, file: !3350, line: 29, type: !146)
!3358 = !DILocation(line: 29, column: 33, scope: !3349)
!3359 = !DILocation(line: 29, column: 62, scope: !3349)
!3360 = !DILocalVariable(name: "p2", scope: !3349, file: !3350, line: 30, type: !146)
!3361 = !DILocation(line: 30, column: 33, scope: !3349)
!3362 = !DILocation(line: 30, column: 62, scope: !3349)
!3363 = !DILocalVariable(name: "c1", scope: !3349, file: !3350, line: 31, type: !148)
!3364 = !DILocation(line: 31, column: 17, scope: !3349)
!3365 = !DILocalVariable(name: "c2", scope: !3349, file: !3350, line: 31, type: !148)
!3366 = !DILocation(line: 31, column: 21, scope: !3349)
!3367 = !DILocation(line: 33, column: 7, scope: !3368)
!3368 = distinct !DILexicalBlock(scope: !3349, file: !3350, line: 33, column: 7)
!3369 = !DILocation(line: 33, column: 13, scope: !3368)
!3370 = !DILocation(line: 33, column: 10, scope: !3368)
!3371 = !DILocation(line: 33, column: 7, scope: !3349)
!3372 = !DILocation(line: 34, column: 5, scope: !3368)
!3373 = !DILocation(line: 36, column: 3, scope: !3349)
!3374 = !DILocation(line: 38, column: 24, scope: !3375)
!3375 = distinct !DILexicalBlock(scope: !3349, file: !3350, line: 37, column: 5)
!3376 = !DILocation(line: 38, column: 23, scope: !3375)
!3377 = !DILocation(line: 38, column: 12, scope: !3375)
!3378 = !DILocation(line: 38, column: 10, scope: !3375)
!3379 = !DILocation(line: 39, column: 24, scope: !3375)
!3380 = !DILocation(line: 39, column: 23, scope: !3375)
!3381 = !DILocation(line: 39, column: 12, scope: !3375)
!3382 = !DILocation(line: 39, column: 10, scope: !3375)
!3383 = !DILocation(line: 41, column: 11, scope: !3384)
!3384 = distinct !DILexicalBlock(scope: !3375, file: !3350, line: 41, column: 11)
!3385 = !DILocation(line: 41, column: 14, scope: !3384)
!3386 = !DILocation(line: 41, column: 11, scope: !3375)
!3387 = !DILocation(line: 42, column: 9, scope: !3384)
!3388 = !DILocation(line: 44, column: 7, scope: !3375)
!3389 = !DILocation(line: 45, column: 7, scope: !3375)
!3390 = !DILocation(line: 46, column: 5, scope: !3375)
!3391 = !DILocation(line: 47, column: 10, scope: !3349)
!3392 = !DILocation(line: 47, column: 16, scope: !3349)
!3393 = !DILocation(line: 47, column: 13, scope: !3349)
!3394 = distinct !{!3394, !3373, !3395}
!3395 = !DILocation(line: 47, column: 18, scope: !3349)
!3396 = !DILocation(line: 50, column: 12, scope: !3397)
!3397 = distinct !DILexicalBlock(scope: !3349, file: !3350, line: 49, column: 7)
!3398 = !DILocation(line: 50, column: 17, scope: !3397)
!3399 = !DILocation(line: 50, column: 15, scope: !3397)
!3400 = !DILocation(line: 50, column: 5, scope: !3397)
!3401 = !DILocation(line: 56, column: 1, scope: !3349)
!3402 = !DILocalVariable(name: "s1", arg: 1, scope: !3403, file: !3350, line: 27, type: !16)
!3403 = distinct !DISubprogram(name: "c_strcasecmp", scope: !3350, file: !3350, line: 27, type: !3351, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3404, retainedNodes: !4)
!3404 = distinct !DICompileUnit(language: DW_LANG_C99, file: !144, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !145, nameTableKind: None)
!3405 = !DILocalVariable(name: "s2", arg: 2, scope: !3403, file: !3350, line: 27, type: !16)
!3406 = !DILocalVariable(name: "p1", scope: !3403, file: !3350, line: 29, type: !146)
!3407 = !DILocalVariable(name: "p2", scope: !3403, file: !3350, line: 30, type: !146)
!3408 = !DILocalVariable(name: "c1", scope: !3403, file: !3350, line: 31, type: !148)
!3409 = !DILocalVariable(name: "c2", scope: !3403, file: !3350, line: 31, type: !148)
!3410 = distinct !DISubprogram(name: "close_stream", scope: !3411, file: !3411, line: 56, type: !3412, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !149, retainedNodes: !4)
!3411 = !DIFile(filename: "lib/close-stream.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3412 = !DISubroutineType(types: !3413)
!3413 = !{!19, !3414}
!3414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3415, size: 64)
!3415 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2771, line: 7, baseType: !3416)
!3416 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2773, line: 49, size: 1728, elements: !3417)
!3417 = !{!3418, !3419, !3420, !3421, !3422, !3423, !3424, !3425, !3426, !3427, !3428, !3429, !3430, !3431, !3433, !3434, !3435, !3436, !3437, !3438, !3439, !3440, !3441, !3442, !3443, !3444, !3445, !3446, !3447}
!3418 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3416, file: !2773, line: 51, baseType: !19, size: 32)
!3419 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3416, file: !2773, line: 54, baseType: !7, size: 64, offset: 64)
!3420 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3416, file: !2773, line: 55, baseType: !7, size: 64, offset: 128)
!3421 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3416, file: !2773, line: 56, baseType: !7, size: 64, offset: 192)
!3422 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3416, file: !2773, line: 57, baseType: !7, size: 64, offset: 256)
!3423 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3416, file: !2773, line: 58, baseType: !7, size: 64, offset: 320)
!3424 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3416, file: !2773, line: 59, baseType: !7, size: 64, offset: 384)
!3425 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3416, file: !2773, line: 60, baseType: !7, size: 64, offset: 448)
!3426 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3416, file: !2773, line: 61, baseType: !7, size: 64, offset: 512)
!3427 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3416, file: !2773, line: 64, baseType: !7, size: 64, offset: 576)
!3428 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3416, file: !2773, line: 65, baseType: !7, size: 64, offset: 640)
!3429 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3416, file: !2773, line: 66, baseType: !7, size: 64, offset: 704)
!3430 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3416, file: !2773, line: 68, baseType: !2788, size: 64, offset: 768)
!3431 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3416, file: !2773, line: 70, baseType: !3432, size: 64, offset: 832)
!3432 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3416, size: 64)
!3433 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3416, file: !2773, line: 72, baseType: !19, size: 32, offset: 896)
!3434 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3416, file: !2773, line: 73, baseType: !19, size: 32, offset: 928)
!3435 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3416, file: !2773, line: 74, baseType: !392, size: 64, offset: 960)
!3436 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3416, file: !2773, line: 77, baseType: !73, size: 16, offset: 1024)
!3437 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3416, file: !2773, line: 78, baseType: !2797, size: 8, offset: 1040)
!3438 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3416, file: !2773, line: 79, baseType: !2799, size: 8, offset: 1048)
!3439 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3416, file: !2773, line: 81, baseType: !2803, size: 64, offset: 1088)
!3440 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3416, file: !2773, line: 89, baseType: !2806, size: 64, offset: 1152)
!3441 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3416, file: !2773, line: 91, baseType: !2808, size: 64, offset: 1216)
!3442 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3416, file: !2773, line: 92, baseType: !2811, size: 64, offset: 1280)
!3443 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3416, file: !2773, line: 93, baseType: !3432, size: 64, offset: 1344)
!3444 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3416, file: !2773, line: 94, baseType: !6, size: 64, offset: 1408)
!3445 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3416, file: !2773, line: 95, baseType: !74, size: 64, offset: 1472)
!3446 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3416, file: !2773, line: 96, baseType: !19, size: 32, offset: 1536)
!3447 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3416, file: !2773, line: 98, baseType: !2818, size: 160, offset: 1568)
!3448 = !DILocalVariable(name: "stream", arg: 1, scope: !3410, file: !3411, line: 56, type: !3414)
!3449 = !DILocation(line: 56, column: 21, scope: !3410)
!3450 = !DILocalVariable(name: "some_pending", scope: !3410, file: !3411, line: 58, type: !3451)
!3451 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !38)
!3452 = !DILocation(line: 58, column: 14, scope: !3410)
!3453 = !DILocation(line: 58, column: 42, scope: !3410)
!3454 = !DILocation(line: 58, column: 30, scope: !3410)
!3455 = !DILocation(line: 58, column: 50, scope: !3410)
!3456 = !DILocalVariable(name: "prev_fail", scope: !3410, file: !3411, line: 59, type: !3451)
!3457 = !DILocation(line: 59, column: 14, scope: !3410)
!3458 = !DILocation(line: 59, column: 27, scope: !3410)
!3459 = !DILocation(line: 59, column: 43, scope: !3410)
!3460 = !DILocalVariable(name: "fclose_fail", scope: !3410, file: !3411, line: 60, type: !3451)
!3461 = !DILocation(line: 60, column: 14, scope: !3410)
!3462 = !DILocation(line: 60, column: 37, scope: !3410)
!3463 = !DILocation(line: 60, column: 29, scope: !3410)
!3464 = !DILocation(line: 60, column: 45, scope: !3410)
!3465 = !DILocation(line: 70, column: 7, scope: !3466)
!3466 = distinct !DILexicalBlock(scope: !3410, file: !3411, line: 70, column: 7)
!3467 = !DILocation(line: 70, column: 17, scope: !3466)
!3468 = !DILocation(line: 70, column: 21, scope: !3466)
!3469 = !DILocation(line: 70, column: 33, scope: !3466)
!3470 = !DILocation(line: 70, column: 37, scope: !3466)
!3471 = !DILocation(line: 70, column: 50, scope: !3466)
!3472 = !DILocation(line: 70, column: 53, scope: !3466)
!3473 = !DILocation(line: 70, column: 59, scope: !3466)
!3474 = !DILocation(line: 70, column: 7, scope: !3410)
!3475 = !DILocation(line: 72, column: 13, scope: !3476)
!3476 = distinct !DILexicalBlock(scope: !3477, file: !3411, line: 72, column: 11)
!3477 = distinct !DILexicalBlock(scope: !3466, file: !3411, line: 71, column: 5)
!3478 = !DILocation(line: 72, column: 11, scope: !3477)
!3479 = !DILocation(line: 73, column: 9, scope: !3476)
!3480 = !DILocation(line: 73, column: 15, scope: !3476)
!3481 = !DILocation(line: 74, column: 7, scope: !3477)
!3482 = !DILocation(line: 77, column: 3, scope: !3410)
!3483 = !DILocation(line: 78, column: 1, scope: !3410)
!3484 = !DILocalVariable(name: "stream", arg: 1, scope: !3485, file: !3411, line: 56, type: !3488)
!3485 = distinct !DISubprogram(name: "close_stream", scope: !3411, file: !3411, line: 56, type: !3486, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3522, retainedNodes: !4)
!3486 = !DISubroutineType(types: !3487)
!3487 = !{!19, !3488}
!3488 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3489, size: 64)
!3489 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2771, line: 7, baseType: !3490)
!3490 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2773, line: 49, size: 1728, elements: !3491)
!3491 = !{!3492, !3493, !3494, !3495, !3496, !3497, !3498, !3499, !3500, !3501, !3502, !3503, !3504, !3505, !3507, !3508, !3509, !3510, !3511, !3512, !3513, !3514, !3515, !3516, !3517, !3518, !3519, !3520, !3521}
!3492 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3490, file: !2773, line: 51, baseType: !19, size: 32)
!3493 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3490, file: !2773, line: 54, baseType: !7, size: 64, offset: 64)
!3494 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3490, file: !2773, line: 55, baseType: !7, size: 64, offset: 128)
!3495 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3490, file: !2773, line: 56, baseType: !7, size: 64, offset: 192)
!3496 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3490, file: !2773, line: 57, baseType: !7, size: 64, offset: 256)
!3497 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3490, file: !2773, line: 58, baseType: !7, size: 64, offset: 320)
!3498 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3490, file: !2773, line: 59, baseType: !7, size: 64, offset: 384)
!3499 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3490, file: !2773, line: 60, baseType: !7, size: 64, offset: 448)
!3500 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3490, file: !2773, line: 61, baseType: !7, size: 64, offset: 512)
!3501 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3490, file: !2773, line: 64, baseType: !7, size: 64, offset: 576)
!3502 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3490, file: !2773, line: 65, baseType: !7, size: 64, offset: 640)
!3503 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3490, file: !2773, line: 66, baseType: !7, size: 64, offset: 704)
!3504 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3490, file: !2773, line: 68, baseType: !2788, size: 64, offset: 768)
!3505 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3490, file: !2773, line: 70, baseType: !3506, size: 64, offset: 832)
!3506 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3490, size: 64)
!3507 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3490, file: !2773, line: 72, baseType: !19, size: 32, offset: 896)
!3508 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3490, file: !2773, line: 73, baseType: !19, size: 32, offset: 928)
!3509 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3490, file: !2773, line: 74, baseType: !392, size: 64, offset: 960)
!3510 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3490, file: !2773, line: 77, baseType: !73, size: 16, offset: 1024)
!3511 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3490, file: !2773, line: 78, baseType: !2797, size: 8, offset: 1040)
!3512 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3490, file: !2773, line: 79, baseType: !2799, size: 8, offset: 1048)
!3513 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3490, file: !2773, line: 81, baseType: !2803, size: 64, offset: 1088)
!3514 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3490, file: !2773, line: 89, baseType: !2806, size: 64, offset: 1152)
!3515 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3490, file: !2773, line: 91, baseType: !2808, size: 64, offset: 1216)
!3516 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3490, file: !2773, line: 92, baseType: !2811, size: 64, offset: 1280)
!3517 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3490, file: !2773, line: 93, baseType: !3506, size: 64, offset: 1344)
!3518 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3490, file: !2773, line: 94, baseType: !6, size: 64, offset: 1408)
!3519 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3490, file: !2773, line: 95, baseType: !74, size: 64, offset: 1472)
!3520 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3490, file: !2773, line: 96, baseType: !19, size: 32, offset: 1536)
!3521 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3490, file: !2773, line: 98, baseType: !2818, size: 160, offset: 1568)
!3522 = distinct !DICompileUnit(language: DW_LANG_C99, file: !150, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!3523 = !DILocalVariable(name: "some_pending", scope: !3485, file: !3411, line: 58, type: !3451)
!3524 = !DILocalVariable(name: "prev_fail", scope: !3485, file: !3411, line: 59, type: !3451)
!3525 = !DILocalVariable(name: "fclose_fail", scope: !3485, file: !3411, line: 60, type: !3451)
!3526 = distinct !DISubprogram(name: "hard_locale", scope: !3527, file: !3527, line: 27, type: !3528, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !151, retainedNodes: !4)
!3527 = !DIFile(filename: "lib/hard-locale.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3528 = !DISubroutineType(types: !3529)
!3529 = !{!38, !19}
!3530 = !DILocalVariable(name: "category", arg: 1, scope: !3526, file: !3527, line: 27, type: !19)
!3531 = !DILocation(line: 27, column: 18, scope: !3526)
!3532 = !DILocalVariable(name: "locale", scope: !3526, file: !3527, line: 29, type: !3533)
!3533 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8, size: 2056, elements: !3534)
!3534 = !{!3535}
!3535 = !DISubrange(count: 257)
!3536 = !DILocation(line: 29, column: 8, scope: !3526)
!3537 = !DILocation(line: 31, column: 25, scope: !3538)
!3538 = distinct !DILexicalBlock(scope: !3526, file: !3527, line: 31, column: 7)
!3539 = !DILocation(line: 31, column: 35, scope: !3538)
!3540 = !DILocation(line: 31, column: 7, scope: !3538)
!3541 = !DILocation(line: 31, column: 7, scope: !3526)
!3542 = !DILocation(line: 32, column: 5, scope: !3538)
!3543 = !DILocation(line: 34, column: 20, scope: !3526)
!3544 = !DILocation(line: 34, column: 12, scope: !3526)
!3545 = !DILocation(line: 34, column: 33, scope: !3526)
!3546 = !DILocation(line: 34, column: 38, scope: !3526)
!3547 = !DILocation(line: 34, column: 49, scope: !3526)
!3548 = !DILocation(line: 34, column: 41, scope: !3526)
!3549 = !DILocation(line: 34, column: 66, scope: !3526)
!3550 = !DILocation(line: 34, column: 10, scope: !3526)
!3551 = !DILocation(line: 34, column: 3, scope: !3526)
!3552 = !DILocation(line: 35, column: 1, scope: !3526)
!3553 = distinct !DISubprogram(name: "locale_charset", scope: !3554, file: !3554, line: 831, type: !3555, scopeLine: 832, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !153, retainedNodes: !4)
!3554 = !DIFile(filename: "lib/localcharset.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3555 = !DISubroutineType(types: !3556)
!3556 = !{!16}
!3557 = !DILocalVariable(name: "codeset", scope: !3553, file: !3554, line: 833, type: !16)
!3558 = !DILocation(line: 833, column: 15, scope: !3553)
!3559 = !DILocation(line: 847, column: 13, scope: !3553)
!3560 = !DILocation(line: 847, column: 11, scope: !3553)
!3561 = !DILocation(line: 911, column: 7, scope: !3562)
!3562 = distinct !DILexicalBlock(scope: !3553, file: !3554, line: 911, column: 7)
!3563 = !DILocation(line: 911, column: 15, scope: !3562)
!3564 = !DILocation(line: 911, column: 7, scope: !3553)
!3565 = !DILocation(line: 913, column: 13, scope: !3562)
!3566 = !DILocation(line: 913, column: 5, scope: !3562)
!3567 = !DILocation(line: 1070, column: 13, scope: !3568)
!3568 = distinct !DILexicalBlock(scope: !3569, file: !3554, line: 1070, column: 13)
!3569 = distinct !DILexicalBlock(scope: !3570, file: !3554, line: 1060, column: 7)
!3570 = distinct !DILexicalBlock(scope: !3553, file: !3554, line: 1019, column: 3)
!3571 = !DILocation(line: 1070, column: 24, scope: !3568)
!3572 = !DILocation(line: 1070, column: 13, scope: !3569)
!3573 = !DILocation(line: 1071, column: 19, scope: !3568)
!3574 = !DILocation(line: 1071, column: 11, scope: !3568)
!3575 = !DILocation(line: 1158, column: 10, scope: !3553)
!3576 = !DILocation(line: 1158, column: 3, scope: !3553)
!3577 = !DILocalVariable(name: "codeset", scope: !3578, file: !3554, line: 833, type: !16)
!3578 = distinct !DISubprogram(name: "locale_charset", scope: !3554, file: !3554, line: 831, type: !3555, scopeLine: 832, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3579, retainedNodes: !4)
!3579 = distinct !DICompileUnit(language: DW_LANG_C99, file: !154, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!3580 = distinct !DISubprogram(name: "setlocale_null_r", scope: !3581, file: !3581, line: 269, type: !3582, scopeLine: 270, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !155, retainedNodes: !4)
!3581 = !DIFile(filename: "lib/setlocale_null.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3582 = !DISubroutineType(types: !3583)
!3583 = !{!19, !19, !7, !74}
!3584 = !DILocalVariable(name: "category", arg: 1, scope: !3580, file: !3581, line: 269, type: !19)
!3585 = !DILocation(line: 269, column: 23, scope: !3580)
!3586 = !DILocalVariable(name: "buf", arg: 2, scope: !3580, file: !3581, line: 269, type: !7)
!3587 = !DILocation(line: 269, column: 39, scope: !3580)
!3588 = !DILocalVariable(name: "bufsize", arg: 3, scope: !3580, file: !3581, line: 269, type: !74)
!3589 = !DILocation(line: 269, column: 51, scope: !3580)
!3590 = !DILocation(line: 274, column: 35, scope: !3580)
!3591 = !DILocation(line: 274, column: 45, scope: !3580)
!3592 = !DILocation(line: 274, column: 50, scope: !3580)
!3593 = !DILocation(line: 274, column: 10, scope: !3580)
!3594 = !DILocation(line: 274, column: 3, scope: !3580)
!3595 = !DILocalVariable(name: "category", arg: 1, scope: !3596, file: !3581, line: 269, type: !19)
!3596 = distinct !DISubprogram(name: "setlocale_null_r", scope: !3581, file: !3581, line: 269, type: !3582, scopeLine: 270, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3597, retainedNodes: !4)
!3597 = distinct !DICompileUnit(language: DW_LANG_C99, file: !156, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!3598 = !DILocalVariable(name: "buf", arg: 2, scope: !3596, file: !3581, line: 269, type: !7)
!3599 = !DILocalVariable(name: "bufsize", arg: 3, scope: !3596, file: !3581, line: 269, type: !74)
!3600 = distinct !DISubprogram(name: "setlocale_null_unlocked", scope: !3581, file: !3581, line: 91, type: !3582, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !155, retainedNodes: !4)
!3601 = !DILocalVariable(name: "category", arg: 1, scope: !3600, file: !3581, line: 91, type: !19)
!3602 = !DILocation(line: 91, column: 30, scope: !3600)
!3603 = !DILocalVariable(name: "buf", arg: 2, scope: !3600, file: !3581, line: 91, type: !7)
!3604 = !DILocation(line: 91, column: 46, scope: !3600)
!3605 = !DILocalVariable(name: "bufsize", arg: 3, scope: !3600, file: !3581, line: 91, type: !74)
!3606 = !DILocation(line: 91, column: 58, scope: !3600)
!3607 = !DILocalVariable(name: "result", scope: !3600, file: !3581, line: 140, type: !16)
!3608 = !DILocation(line: 140, column: 15, scope: !3600)
!3609 = !DILocation(line: 140, column: 51, scope: !3600)
!3610 = !DILocation(line: 140, column: 24, scope: !3600)
!3611 = !DILocation(line: 142, column: 7, scope: !3612)
!3612 = distinct !DILexicalBlock(scope: !3600, file: !3581, line: 142, column: 7)
!3613 = !DILocation(line: 142, column: 14, scope: !3612)
!3614 = !DILocation(line: 142, column: 7, scope: !3600)
!3615 = !DILocation(line: 145, column: 11, scope: !3616)
!3616 = distinct !DILexicalBlock(scope: !3617, file: !3581, line: 145, column: 11)
!3617 = distinct !DILexicalBlock(scope: !3612, file: !3581, line: 143, column: 5)
!3618 = !DILocation(line: 145, column: 19, scope: !3616)
!3619 = !DILocation(line: 145, column: 11, scope: !3617)
!3620 = !DILocation(line: 149, column: 9, scope: !3616)
!3621 = !DILocation(line: 149, column: 16, scope: !3616)
!3622 = !DILocation(line: 150, column: 7, scope: !3617)
!3623 = !DILocalVariable(name: "length", scope: !3624, file: !3581, line: 154, type: !74)
!3624 = distinct !DILexicalBlock(scope: !3612, file: !3581, line: 153, column: 5)
!3625 = !DILocation(line: 154, column: 14, scope: !3624)
!3626 = !DILocation(line: 154, column: 31, scope: !3624)
!3627 = !DILocation(line: 154, column: 23, scope: !3624)
!3628 = !DILocation(line: 155, column: 11, scope: !3629)
!3629 = distinct !DILexicalBlock(scope: !3624, file: !3581, line: 155, column: 11)
!3630 = !DILocation(line: 155, column: 20, scope: !3629)
!3631 = !DILocation(line: 155, column: 18, scope: !3629)
!3632 = !DILocation(line: 155, column: 11, scope: !3624)
!3633 = !DILocation(line: 157, column: 19, scope: !3634)
!3634 = distinct !DILexicalBlock(scope: !3629, file: !3581, line: 156, column: 9)
!3635 = !DILocation(line: 157, column: 24, scope: !3634)
!3636 = !DILocation(line: 157, column: 32, scope: !3634)
!3637 = !DILocation(line: 157, column: 39, scope: !3634)
!3638 = !DILocation(line: 157, column: 11, scope: !3634)
!3639 = !DILocation(line: 158, column: 11, scope: !3634)
!3640 = !DILocation(line: 162, column: 15, scope: !3641)
!3641 = distinct !DILexicalBlock(scope: !3642, file: !3581, line: 162, column: 15)
!3642 = distinct !DILexicalBlock(scope: !3629, file: !3581, line: 161, column: 9)
!3643 = !DILocation(line: 162, column: 23, scope: !3641)
!3644 = !DILocation(line: 162, column: 15, scope: !3642)
!3645 = !DILocation(line: 167, column: 23, scope: !3646)
!3646 = distinct !DILexicalBlock(scope: !3641, file: !3581, line: 163, column: 13)
!3647 = !DILocation(line: 167, column: 28, scope: !3646)
!3648 = !DILocation(line: 167, column: 36, scope: !3646)
!3649 = !DILocation(line: 167, column: 44, scope: !3646)
!3650 = !DILocation(line: 167, column: 15, scope: !3646)
!3651 = !DILocation(line: 168, column: 15, scope: !3646)
!3652 = !DILocation(line: 168, column: 19, scope: !3646)
!3653 = !DILocation(line: 168, column: 27, scope: !3646)
!3654 = !DILocation(line: 168, column: 32, scope: !3646)
!3655 = !DILocation(line: 169, column: 13, scope: !3646)
!3656 = !DILocation(line: 170, column: 11, scope: !3642)
!3657 = !DILocation(line: 174, column: 1, scope: !3600)
!3658 = !DILocalVariable(name: "category", arg: 1, scope: !3659, file: !3581, line: 91, type: !19)
!3659 = distinct !DISubprogram(name: "setlocale_null_unlocked", scope: !3581, file: !3581, line: 91, type: !3582, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3660, retainedNodes: !4)
!3660 = distinct !DICompileUnit(language: DW_LANG_C99, file: !156, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!3661 = !DILocalVariable(name: "buf", arg: 2, scope: !3659, file: !3581, line: 91, type: !7)
!3662 = distinct !DISubprogram(name: "setlocale_null_androidfix", scope: !3581, file: !3581, line: 60, type: !3663, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !155, retainedNodes: !4)
!3663 = !DISubroutineType(types: !3664)
!3664 = !{!16, !19}
!3665 = !DILocalVariable(name: "category", arg: 1, scope: !3662, file: !3581, line: 60, type: !19)
!3666 = !DILocation(line: 60, column: 32, scope: !3662)
!3667 = !DILocalVariable(name: "result", scope: !3662, file: !3581, line: 62, type: !16)
!3668 = !DILocation(line: 62, column: 15, scope: !3662)
!3669 = !DILocation(line: 62, column: 35, scope: !3662)
!3670 = !DILocation(line: 62, column: 24, scope: !3662)
!3671 = !DILocation(line: 87, column: 10, scope: !3662)
!3672 = !DILocation(line: 87, column: 3, scope: !3662)
!3673 = !DILocalVariable(name: "category", arg: 1, scope: !3674, file: !3581, line: 60, type: !19)
!3674 = distinct !DISubprogram(name: "setlocale_null_androidfix", scope: !3581, file: !3581, line: 60, type: !3663, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3675, retainedNodes: !4)
!3675 = distinct !DICompileUnit(language: DW_LANG_C99, file: !156, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!3676 = !DILocalVariable(name: "result", scope: !3674, file: !3581, line: 62, type: !16)
!3677 = distinct !DISubprogram(name: "rpl_fclose", scope: !3678, file: !3678, line: 58, type: !3679, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !157, retainedNodes: !4)
!3678 = !DIFile(filename: "lib/fclose.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3679 = !DISubroutineType(types: !3680)
!3680 = !{!19, !3681}
!3681 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3682, size: 64)
!3682 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2771, line: 7, baseType: !3683)
!3683 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2773, line: 49, size: 1728, elements: !3684)
!3684 = !{!3685, !3686, !3687, !3688, !3689, !3690, !3691, !3692, !3693, !3694, !3695, !3696, !3697, !3698, !3700, !3701, !3702, !3703, !3704, !3705, !3706, !3707, !3708, !3709, !3710, !3711, !3712, !3713, !3714}
!3685 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3683, file: !2773, line: 51, baseType: !19, size: 32)
!3686 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3683, file: !2773, line: 54, baseType: !7, size: 64, offset: 64)
!3687 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3683, file: !2773, line: 55, baseType: !7, size: 64, offset: 128)
!3688 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3683, file: !2773, line: 56, baseType: !7, size: 64, offset: 192)
!3689 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3683, file: !2773, line: 57, baseType: !7, size: 64, offset: 256)
!3690 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3683, file: !2773, line: 58, baseType: !7, size: 64, offset: 320)
!3691 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3683, file: !2773, line: 59, baseType: !7, size: 64, offset: 384)
!3692 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3683, file: !2773, line: 60, baseType: !7, size: 64, offset: 448)
!3693 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3683, file: !2773, line: 61, baseType: !7, size: 64, offset: 512)
!3694 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3683, file: !2773, line: 64, baseType: !7, size: 64, offset: 576)
!3695 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3683, file: !2773, line: 65, baseType: !7, size: 64, offset: 640)
!3696 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3683, file: !2773, line: 66, baseType: !7, size: 64, offset: 704)
!3697 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3683, file: !2773, line: 68, baseType: !2788, size: 64, offset: 768)
!3698 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3683, file: !2773, line: 70, baseType: !3699, size: 64, offset: 832)
!3699 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3683, size: 64)
!3700 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3683, file: !2773, line: 72, baseType: !19, size: 32, offset: 896)
!3701 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3683, file: !2773, line: 73, baseType: !19, size: 32, offset: 928)
!3702 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3683, file: !2773, line: 74, baseType: !392, size: 64, offset: 960)
!3703 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3683, file: !2773, line: 77, baseType: !73, size: 16, offset: 1024)
!3704 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3683, file: !2773, line: 78, baseType: !2797, size: 8, offset: 1040)
!3705 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3683, file: !2773, line: 79, baseType: !2799, size: 8, offset: 1048)
!3706 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3683, file: !2773, line: 81, baseType: !2803, size: 64, offset: 1088)
!3707 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3683, file: !2773, line: 89, baseType: !2806, size: 64, offset: 1152)
!3708 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3683, file: !2773, line: 91, baseType: !2808, size: 64, offset: 1216)
!3709 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3683, file: !2773, line: 92, baseType: !2811, size: 64, offset: 1280)
!3710 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3683, file: !2773, line: 93, baseType: !3699, size: 64, offset: 1344)
!3711 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3683, file: !2773, line: 94, baseType: !6, size: 64, offset: 1408)
!3712 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3683, file: !2773, line: 95, baseType: !74, size: 64, offset: 1472)
!3713 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3683, file: !2773, line: 96, baseType: !19, size: 32, offset: 1536)
!3714 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3683, file: !2773, line: 98, baseType: !2818, size: 160, offset: 1568)
!3715 = !DILocalVariable(name: "fp", arg: 1, scope: !3677, file: !3678, line: 58, type: !3681)
!3716 = !DILocation(line: 58, column: 19, scope: !3677)
!3717 = !DILocalVariable(name: "saved_errno", scope: !3677, file: !3678, line: 60, type: !19)
!3718 = !DILocation(line: 60, column: 7, scope: !3677)
!3719 = !DILocalVariable(name: "fd", scope: !3677, file: !3678, line: 61, type: !19)
!3720 = !DILocation(line: 61, column: 7, scope: !3677)
!3721 = !DILocalVariable(name: "result", scope: !3677, file: !3678, line: 62, type: !19)
!3722 = !DILocation(line: 62, column: 7, scope: !3677)
!3723 = !DILocation(line: 65, column: 16, scope: !3677)
!3724 = !DILocation(line: 65, column: 8, scope: !3677)
!3725 = !DILocation(line: 65, column: 6, scope: !3677)
!3726 = !DILocation(line: 66, column: 7, scope: !3727)
!3727 = distinct !DILexicalBlock(scope: !3677, file: !3678, line: 66, column: 7)
!3728 = !DILocation(line: 66, column: 10, scope: !3727)
!3729 = !DILocation(line: 66, column: 7, scope: !3677)
!3730 = !DILocation(line: 67, column: 28, scope: !3727)
!3731 = !DILocation(line: 67, column: 12, scope: !3727)
!3732 = !DILocation(line: 67, column: 5, scope: !3727)
!3733 = !DILocation(line: 72, column: 9, scope: !3734)
!3734 = distinct !DILexicalBlock(scope: !3677, file: !3678, line: 72, column: 7)
!3735 = !DILocation(line: 72, column: 23, scope: !3734)
!3736 = !DILocation(line: 72, column: 41, scope: !3734)
!3737 = !DILocation(line: 72, column: 33, scope: !3734)
!3738 = !DILocation(line: 72, column: 26, scope: !3734)
!3739 = !DILocation(line: 72, column: 59, scope: !3734)
!3740 = !DILocation(line: 73, column: 7, scope: !3734)
!3741 = !DILocation(line: 73, column: 18, scope: !3734)
!3742 = !DILocation(line: 73, column: 10, scope: !3734)
!3743 = !DILocation(line: 72, column: 7, scope: !3677)
!3744 = !DILocation(line: 74, column: 19, scope: !3734)
!3745 = !DILocation(line: 74, column: 17, scope: !3734)
!3746 = !DILocation(line: 74, column: 5, scope: !3734)
!3747 = !DILocation(line: 100, column: 28, scope: !3677)
!3748 = !DILocation(line: 100, column: 12, scope: !3677)
!3749 = !DILocation(line: 100, column: 10, scope: !3677)
!3750 = !DILocation(line: 105, column: 7, scope: !3751)
!3751 = distinct !DILexicalBlock(scope: !3677, file: !3678, line: 105, column: 7)
!3752 = !DILocation(line: 105, column: 19, scope: !3751)
!3753 = !DILocation(line: 105, column: 7, scope: !3677)
!3754 = !DILocation(line: 107, column: 15, scope: !3755)
!3755 = distinct !DILexicalBlock(scope: !3751, file: !3678, line: 106, column: 5)
!3756 = !DILocation(line: 107, column: 7, scope: !3755)
!3757 = !DILocation(line: 107, column: 13, scope: !3755)
!3758 = !DILocation(line: 108, column: 14, scope: !3755)
!3759 = !DILocation(line: 109, column: 5, scope: !3755)
!3760 = !DILocation(line: 111, column: 10, scope: !3677)
!3761 = !DILocation(line: 111, column: 3, scope: !3677)
!3762 = !DILocation(line: 112, column: 1, scope: !3677)
!3763 = !DILocalVariable(name: "fp", arg: 1, scope: !3764, file: !3678, line: 58, type: !3767)
!3764 = distinct !DISubprogram(name: "rpl_fclose", scope: !3678, file: !3678, line: 58, type: !3765, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3801, retainedNodes: !4)
!3765 = !DISubroutineType(types: !3766)
!3766 = !{!19, !3767}
!3767 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3768, size: 64)
!3768 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2771, line: 7, baseType: !3769)
!3769 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2773, line: 49, size: 1728, elements: !3770)
!3770 = !{!3771, !3772, !3773, !3774, !3775, !3776, !3777, !3778, !3779, !3780, !3781, !3782, !3783, !3784, !3786, !3787, !3788, !3789, !3790, !3791, !3792, !3793, !3794, !3795, !3796, !3797, !3798, !3799, !3800}
!3771 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3769, file: !2773, line: 51, baseType: !19, size: 32)
!3772 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3769, file: !2773, line: 54, baseType: !7, size: 64, offset: 64)
!3773 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3769, file: !2773, line: 55, baseType: !7, size: 64, offset: 128)
!3774 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3769, file: !2773, line: 56, baseType: !7, size: 64, offset: 192)
!3775 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3769, file: !2773, line: 57, baseType: !7, size: 64, offset: 256)
!3776 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3769, file: !2773, line: 58, baseType: !7, size: 64, offset: 320)
!3777 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3769, file: !2773, line: 59, baseType: !7, size: 64, offset: 384)
!3778 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3769, file: !2773, line: 60, baseType: !7, size: 64, offset: 448)
!3779 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3769, file: !2773, line: 61, baseType: !7, size: 64, offset: 512)
!3780 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3769, file: !2773, line: 64, baseType: !7, size: 64, offset: 576)
!3781 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3769, file: !2773, line: 65, baseType: !7, size: 64, offset: 640)
!3782 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3769, file: !2773, line: 66, baseType: !7, size: 64, offset: 704)
!3783 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3769, file: !2773, line: 68, baseType: !2788, size: 64, offset: 768)
!3784 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3769, file: !2773, line: 70, baseType: !3785, size: 64, offset: 832)
!3785 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3769, size: 64)
!3786 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3769, file: !2773, line: 72, baseType: !19, size: 32, offset: 896)
!3787 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3769, file: !2773, line: 73, baseType: !19, size: 32, offset: 928)
!3788 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3769, file: !2773, line: 74, baseType: !392, size: 64, offset: 960)
!3789 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3769, file: !2773, line: 77, baseType: !73, size: 16, offset: 1024)
!3790 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3769, file: !2773, line: 78, baseType: !2797, size: 8, offset: 1040)
!3791 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3769, file: !2773, line: 79, baseType: !2799, size: 8, offset: 1048)
!3792 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3769, file: !2773, line: 81, baseType: !2803, size: 64, offset: 1088)
!3793 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3769, file: !2773, line: 89, baseType: !2806, size: 64, offset: 1152)
!3794 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3769, file: !2773, line: 91, baseType: !2808, size: 64, offset: 1216)
!3795 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3769, file: !2773, line: 92, baseType: !2811, size: 64, offset: 1280)
!3796 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3769, file: !2773, line: 93, baseType: !3785, size: 64, offset: 1344)
!3797 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3769, file: !2773, line: 94, baseType: !6, size: 64, offset: 1408)
!3798 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3769, file: !2773, line: 95, baseType: !74, size: 64, offset: 1472)
!3799 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3769, file: !2773, line: 96, baseType: !19, size: 32, offset: 1536)
!3800 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3769, file: !2773, line: 98, baseType: !2818, size: 160, offset: 1568)
!3801 = distinct !DICompileUnit(language: DW_LANG_C99, file: !158, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
!3802 = !DILocalVariable(name: "saved_errno", scope: !3764, file: !3678, line: 60, type: !19)
!3803 = !DILocalVariable(name: "fd", scope: !3764, file: !3678, line: 61, type: !19)
!3804 = !DILocalVariable(name: "result", scope: !3764, file: !3678, line: 62, type: !19)
!3805 = distinct !DISubprogram(name: "rpl_fflush", scope: !3806, file: !3806, line: 129, type: !3807, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !159, retainedNodes: !4)
!3806 = !DIFile(filename: "lib/fflush.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3807 = !DISubroutineType(types: !3808)
!3808 = !{!19, !3809}
!3809 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3810, size: 64)
!3810 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2771, line: 7, baseType: !3811)
!3811 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2773, line: 49, size: 1728, elements: !3812)
!3812 = !{!3813, !3814, !3815, !3816, !3817, !3818, !3819, !3820, !3821, !3822, !3823, !3824, !3825, !3826, !3828, !3829, !3830, !3831, !3832, !3833, !3834, !3835, !3836, !3837, !3838, !3839, !3840, !3841, !3842}
!3813 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3811, file: !2773, line: 51, baseType: !19, size: 32)
!3814 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3811, file: !2773, line: 54, baseType: !7, size: 64, offset: 64)
!3815 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3811, file: !2773, line: 55, baseType: !7, size: 64, offset: 128)
!3816 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3811, file: !2773, line: 56, baseType: !7, size: 64, offset: 192)
!3817 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3811, file: !2773, line: 57, baseType: !7, size: 64, offset: 256)
!3818 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3811, file: !2773, line: 58, baseType: !7, size: 64, offset: 320)
!3819 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3811, file: !2773, line: 59, baseType: !7, size: 64, offset: 384)
!3820 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3811, file: !2773, line: 60, baseType: !7, size: 64, offset: 448)
!3821 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3811, file: !2773, line: 61, baseType: !7, size: 64, offset: 512)
!3822 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3811, file: !2773, line: 64, baseType: !7, size: 64, offset: 576)
!3823 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3811, file: !2773, line: 65, baseType: !7, size: 64, offset: 640)
!3824 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3811, file: !2773, line: 66, baseType: !7, size: 64, offset: 704)
!3825 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3811, file: !2773, line: 68, baseType: !2788, size: 64, offset: 768)
!3826 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3811, file: !2773, line: 70, baseType: !3827, size: 64, offset: 832)
!3827 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3811, size: 64)
!3828 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3811, file: !2773, line: 72, baseType: !19, size: 32, offset: 896)
!3829 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3811, file: !2773, line: 73, baseType: !19, size: 32, offset: 928)
!3830 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3811, file: !2773, line: 74, baseType: !392, size: 64, offset: 960)
!3831 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3811, file: !2773, line: 77, baseType: !73, size: 16, offset: 1024)
!3832 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3811, file: !2773, line: 78, baseType: !2797, size: 8, offset: 1040)
!3833 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3811, file: !2773, line: 79, baseType: !2799, size: 8, offset: 1048)
!3834 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3811, file: !2773, line: 81, baseType: !2803, size: 64, offset: 1088)
!3835 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3811, file: !2773, line: 89, baseType: !2806, size: 64, offset: 1152)
!3836 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3811, file: !2773, line: 91, baseType: !2808, size: 64, offset: 1216)
!3837 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3811, file: !2773, line: 92, baseType: !2811, size: 64, offset: 1280)
!3838 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3811, file: !2773, line: 93, baseType: !3827, size: 64, offset: 1344)
!3839 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3811, file: !2773, line: 94, baseType: !6, size: 64, offset: 1408)
!3840 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3811, file: !2773, line: 95, baseType: !74, size: 64, offset: 1472)
!3841 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3811, file: !2773, line: 96, baseType: !19, size: 32, offset: 1536)
!3842 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3811, file: !2773, line: 98, baseType: !2818, size: 160, offset: 1568)
!3843 = !DILocalVariable(name: "stream", arg: 1, scope: !3805, file: !3806, line: 129, type: !3809)
!3844 = !DILocation(line: 129, column: 19, scope: !3805)
!3845 = !DILocation(line: 150, column: 7, scope: !3846)
!3846 = distinct !DILexicalBlock(scope: !3805, file: !3806, line: 150, column: 7)
!3847 = !DILocation(line: 150, column: 14, scope: !3846)
!3848 = !DILocation(line: 150, column: 22, scope: !3846)
!3849 = !DILocation(line: 150, column: 27, scope: !3846)
!3850 = !DILocation(line: 150, column: 7, scope: !3805)
!3851 = !DILocation(line: 151, column: 20, scope: !3846)
!3852 = !DILocation(line: 151, column: 12, scope: !3846)
!3853 = !DILocation(line: 151, column: 5, scope: !3846)
!3854 = !DILocation(line: 156, column: 44, scope: !3805)
!3855 = !DILocation(line: 156, column: 3, scope: !3805)
!3856 = !DILocation(line: 158, column: 18, scope: !3805)
!3857 = !DILocation(line: 158, column: 10, scope: !3805)
!3858 = !DILocation(line: 158, column: 3, scope: !3805)
!3859 = !DILocation(line: 235, column: 1, scope: !3805)
!3860 = !DILocalVariable(name: "stream", arg: 1, scope: !3861, file: !3806, line: 129, type: !3864)
!3861 = distinct !DISubprogram(name: "rpl_fflush", scope: !3806, file: !3806, line: 129, type: !3862, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3898, retainedNodes: !4)
!3862 = !DISubroutineType(types: !3863)
!3863 = !{!19, !3864}
!3864 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3865, size: 64)
!3865 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2771, line: 7, baseType: !3866)
!3866 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2773, line: 49, size: 1728, elements: !3867)
!3867 = !{!3868, !3869, !3870, !3871, !3872, !3873, !3874, !3875, !3876, !3877, !3878, !3879, !3880, !3881, !3883, !3884, !3885, !3886, !3887, !3888, !3889, !3890, !3891, !3892, !3893, !3894, !3895, !3896, !3897}
!3868 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3866, file: !2773, line: 51, baseType: !19, size: 32)
!3869 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3866, file: !2773, line: 54, baseType: !7, size: 64, offset: 64)
!3870 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3866, file: !2773, line: 55, baseType: !7, size: 64, offset: 128)
!3871 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3866, file: !2773, line: 56, baseType: !7, size: 64, offset: 192)
!3872 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3866, file: !2773, line: 57, baseType: !7, size: 64, offset: 256)
!3873 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3866, file: !2773, line: 58, baseType: !7, size: 64, offset: 320)
!3874 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3866, file: !2773, line: 59, baseType: !7, size: 64, offset: 384)
!3875 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3866, file: !2773, line: 60, baseType: !7, size: 64, offset: 448)
!3876 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3866, file: !2773, line: 61, baseType: !7, size: 64, offset: 512)
!3877 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3866, file: !2773, line: 64, baseType: !7, size: 64, offset: 576)
!3878 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3866, file: !2773, line: 65, baseType: !7, size: 64, offset: 640)
!3879 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3866, file: !2773, line: 66, baseType: !7, size: 64, offset: 704)
!3880 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3866, file: !2773, line: 68, baseType: !2788, size: 64, offset: 768)
!3881 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3866, file: !2773, line: 70, baseType: !3882, size: 64, offset: 832)
!3882 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3866, size: 64)
!3883 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3866, file: !2773, line: 72, baseType: !19, size: 32, offset: 896)
!3884 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3866, file: !2773, line: 73, baseType: !19, size: 32, offset: 928)
!3885 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3866, file: !2773, line: 74, baseType: !392, size: 64, offset: 960)
!3886 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3866, file: !2773, line: 77, baseType: !73, size: 16, offset: 1024)
!3887 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3866, file: !2773, line: 78, baseType: !2797, size: 8, offset: 1040)
!3888 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3866, file: !2773, line: 79, baseType: !2799, size: 8, offset: 1048)
!3889 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3866, file: !2773, line: 81, baseType: !2803, size: 64, offset: 1088)
!3890 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3866, file: !2773, line: 89, baseType: !2806, size: 64, offset: 1152)
!3891 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3866, file: !2773, line: 91, baseType: !2808, size: 64, offset: 1216)
!3892 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3866, file: !2773, line: 92, baseType: !2811, size: 64, offset: 1280)
!3893 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3866, file: !2773, line: 93, baseType: !3882, size: 64, offset: 1344)
!3894 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3866, file: !2773, line: 94, baseType: !6, size: 64, offset: 1408)
!3895 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3866, file: !2773, line: 95, baseType: !74, size: 64, offset: 1472)
!3896 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3866, file: !2773, line: 96, baseType: !19, size: 32, offset: 1536)
!3897 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3866, file: !2773, line: 98, baseType: !2818, size: 160, offset: 1568)
!3898 = distinct !DICompileUnit(language: DW_LANG_C99, file: !160, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!3899 = distinct !DISubprogram(name: "clear_ungetc_buffer_preserving_position", scope: !3806, file: !3806, line: 41, type: !3900, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !159, retainedNodes: !4)
!3900 = !DISubroutineType(types: !3901)
!3901 = !{null, !3809}
!3902 = !DILocalVariable(name: "fp", arg: 1, scope: !3899, file: !3806, line: 41, type: !3809)
!3903 = !DILocation(line: 41, column: 48, scope: !3899)
!3904 = !DILocation(line: 43, column: 7, scope: !3905)
!3905 = distinct !DILexicalBlock(scope: !3899, file: !3806, line: 43, column: 7)
!3906 = !DILocation(line: 43, column: 11, scope: !3905)
!3907 = !DILocation(line: 43, column: 18, scope: !3905)
!3908 = !DILocation(line: 43, column: 7, scope: !3899)
!3909 = !DILocation(line: 45, column: 13, scope: !3905)
!3910 = !DILocation(line: 45, column: 5, scope: !3905)
!3911 = !DILocation(line: 46, column: 1, scope: !3899)
!3912 = !DILocalVariable(name: "fp", arg: 1, scope: !3913, file: !3806, line: 41, type: !3916)
!3913 = distinct !DISubprogram(name: "clear_ungetc_buffer_preserving_position", scope: !3806, file: !3806, line: 41, type: !3914, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3950, retainedNodes: !4)
!3914 = !DISubroutineType(types: !3915)
!3915 = !{null, !3916}
!3916 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3917, size: 64)
!3917 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2771, line: 7, baseType: !3918)
!3918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2773, line: 49, size: 1728, elements: !3919)
!3919 = !{!3920, !3921, !3922, !3923, !3924, !3925, !3926, !3927, !3928, !3929, !3930, !3931, !3932, !3933, !3935, !3936, !3937, !3938, !3939, !3940, !3941, !3942, !3943, !3944, !3945, !3946, !3947, !3948, !3949}
!3920 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3918, file: !2773, line: 51, baseType: !19, size: 32)
!3921 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3918, file: !2773, line: 54, baseType: !7, size: 64, offset: 64)
!3922 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3918, file: !2773, line: 55, baseType: !7, size: 64, offset: 128)
!3923 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3918, file: !2773, line: 56, baseType: !7, size: 64, offset: 192)
!3924 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3918, file: !2773, line: 57, baseType: !7, size: 64, offset: 256)
!3925 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3918, file: !2773, line: 58, baseType: !7, size: 64, offset: 320)
!3926 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3918, file: !2773, line: 59, baseType: !7, size: 64, offset: 384)
!3927 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3918, file: !2773, line: 60, baseType: !7, size: 64, offset: 448)
!3928 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3918, file: !2773, line: 61, baseType: !7, size: 64, offset: 512)
!3929 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3918, file: !2773, line: 64, baseType: !7, size: 64, offset: 576)
!3930 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3918, file: !2773, line: 65, baseType: !7, size: 64, offset: 640)
!3931 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3918, file: !2773, line: 66, baseType: !7, size: 64, offset: 704)
!3932 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3918, file: !2773, line: 68, baseType: !2788, size: 64, offset: 768)
!3933 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3918, file: !2773, line: 70, baseType: !3934, size: 64, offset: 832)
!3934 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3918, size: 64)
!3935 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3918, file: !2773, line: 72, baseType: !19, size: 32, offset: 896)
!3936 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3918, file: !2773, line: 73, baseType: !19, size: 32, offset: 928)
!3937 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3918, file: !2773, line: 74, baseType: !392, size: 64, offset: 960)
!3938 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3918, file: !2773, line: 77, baseType: !73, size: 16, offset: 1024)
!3939 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3918, file: !2773, line: 78, baseType: !2797, size: 8, offset: 1040)
!3940 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3918, file: !2773, line: 79, baseType: !2799, size: 8, offset: 1048)
!3941 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3918, file: !2773, line: 81, baseType: !2803, size: 64, offset: 1088)
!3942 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3918, file: !2773, line: 89, baseType: !2806, size: 64, offset: 1152)
!3943 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3918, file: !2773, line: 91, baseType: !2808, size: 64, offset: 1216)
!3944 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3918, file: !2773, line: 92, baseType: !2811, size: 64, offset: 1280)
!3945 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3918, file: !2773, line: 93, baseType: !3934, size: 64, offset: 1344)
!3946 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3918, file: !2773, line: 94, baseType: !6, size: 64, offset: 1408)
!3947 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3918, file: !2773, line: 95, baseType: !74, size: 64, offset: 1472)
!3948 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3918, file: !2773, line: 96, baseType: !19, size: 32, offset: 1536)
!3949 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3918, file: !2773, line: 98, baseType: !2818, size: 160, offset: 1568)
!3950 = distinct !DICompileUnit(language: DW_LANG_C99, file: !160, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !132, nameTableKind: None)
!3951 = distinct !DISubprogram(name: "rpl_fseeko", scope: !3952, file: !3952, line: 28, type: !3953, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !161, retainedNodes: !4)
!3952 = !DIFile(filename: "lib/fseeko.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3953 = !DISubroutineType(types: !3954)
!3954 = !{!19, !3955, !3989, !19}
!3955 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3956, size: 64)
!3956 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2771, line: 7, baseType: !3957)
!3957 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2773, line: 49, size: 1728, elements: !3958)
!3958 = !{!3959, !3960, !3961, !3962, !3963, !3964, !3965, !3966, !3967, !3968, !3969, !3970, !3971, !3972, !3974, !3975, !3976, !3977, !3978, !3979, !3980, !3981, !3982, !3983, !3984, !3985, !3986, !3987, !3988}
!3959 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3957, file: !2773, line: 51, baseType: !19, size: 32)
!3960 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3957, file: !2773, line: 54, baseType: !7, size: 64, offset: 64)
!3961 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3957, file: !2773, line: 55, baseType: !7, size: 64, offset: 128)
!3962 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3957, file: !2773, line: 56, baseType: !7, size: 64, offset: 192)
!3963 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3957, file: !2773, line: 57, baseType: !7, size: 64, offset: 256)
!3964 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3957, file: !2773, line: 58, baseType: !7, size: 64, offset: 320)
!3965 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3957, file: !2773, line: 59, baseType: !7, size: 64, offset: 384)
!3966 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3957, file: !2773, line: 60, baseType: !7, size: 64, offset: 448)
!3967 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3957, file: !2773, line: 61, baseType: !7, size: 64, offset: 512)
!3968 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3957, file: !2773, line: 64, baseType: !7, size: 64, offset: 576)
!3969 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3957, file: !2773, line: 65, baseType: !7, size: 64, offset: 640)
!3970 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3957, file: !2773, line: 66, baseType: !7, size: 64, offset: 704)
!3971 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3957, file: !2773, line: 68, baseType: !2788, size: 64, offset: 768)
!3972 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3957, file: !2773, line: 70, baseType: !3973, size: 64, offset: 832)
!3973 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3957, size: 64)
!3974 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3957, file: !2773, line: 72, baseType: !19, size: 32, offset: 896)
!3975 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3957, file: !2773, line: 73, baseType: !19, size: 32, offset: 928)
!3976 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3957, file: !2773, line: 74, baseType: !392, size: 64, offset: 960)
!3977 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3957, file: !2773, line: 77, baseType: !73, size: 16, offset: 1024)
!3978 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3957, file: !2773, line: 78, baseType: !2797, size: 8, offset: 1040)
!3979 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3957, file: !2773, line: 79, baseType: !2799, size: 8, offset: 1048)
!3980 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3957, file: !2773, line: 81, baseType: !2803, size: 64, offset: 1088)
!3981 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3957, file: !2773, line: 89, baseType: !2806, size: 64, offset: 1152)
!3982 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3957, file: !2773, line: 91, baseType: !2808, size: 64, offset: 1216)
!3983 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3957, file: !2773, line: 92, baseType: !2811, size: 64, offset: 1280)
!3984 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3957, file: !2773, line: 93, baseType: !3973, size: 64, offset: 1344)
!3985 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3957, file: !2773, line: 94, baseType: !6, size: 64, offset: 1408)
!3986 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3957, file: !2773, line: 95, baseType: !74, size: 64, offset: 1472)
!3987 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3957, file: !2773, line: 96, baseType: !19, size: 32, offset: 1536)
!3988 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3957, file: !2773, line: 98, baseType: !2818, size: 160, offset: 1568)
!3989 = !DIDerivedType(tag: DW_TAG_typedef, name: "off_t", file: !3113, line: 63, baseType: !392)
!3990 = !DILocalVariable(name: "fp", arg: 1, scope: !3951, file: !3952, line: 28, type: !3955)
!3991 = !DILocation(line: 28, column: 15, scope: !3951)
!3992 = !DILocalVariable(name: "offset", arg: 2, scope: !3951, file: !3952, line: 28, type: !3989)
!3993 = !DILocation(line: 28, column: 25, scope: !3951)
!3994 = !DILocalVariable(name: "whence", arg: 3, scope: !3951, file: !3952, line: 28, type: !19)
!3995 = !DILocation(line: 28, column: 37, scope: !3951)
!3996 = !DILocation(line: 52, column: 7, scope: !3997)
!3997 = distinct !DILexicalBlock(scope: !3951, file: !3952, line: 52, column: 7)
!3998 = !DILocation(line: 52, column: 11, scope: !3997)
!3999 = !DILocation(line: 52, column: 27, scope: !3997)
!4000 = !DILocation(line: 52, column: 31, scope: !3997)
!4001 = !DILocation(line: 52, column: 24, scope: !3997)
!4002 = !DILocation(line: 53, column: 7, scope: !3997)
!4003 = !DILocation(line: 53, column: 10, scope: !3997)
!4004 = !DILocation(line: 53, column: 14, scope: !3997)
!4005 = !DILocation(line: 53, column: 31, scope: !3997)
!4006 = !DILocation(line: 53, column: 35, scope: !3997)
!4007 = !DILocation(line: 53, column: 28, scope: !3997)
!4008 = !DILocation(line: 54, column: 7, scope: !3997)
!4009 = !DILocation(line: 54, column: 10, scope: !3997)
!4010 = !DILocation(line: 54, column: 14, scope: !3997)
!4011 = !DILocation(line: 54, column: 28, scope: !3997)
!4012 = !DILocation(line: 52, column: 7, scope: !3951)
!4013 = !DILocalVariable(name: "pos", scope: !4014, file: !3952, line: 117, type: !3989)
!4014 = distinct !DILexicalBlock(scope: !3997, file: !3952, line: 113, column: 5)
!4015 = !DILocation(line: 117, column: 13, scope: !4014)
!4016 = !DILocation(line: 117, column: 34, scope: !4014)
!4017 = !DILocation(line: 117, column: 26, scope: !4014)
!4018 = !DILocation(line: 117, column: 39, scope: !4014)
!4019 = !DILocation(line: 117, column: 47, scope: !4014)
!4020 = !DILocation(line: 117, column: 19, scope: !4014)
!4021 = !DILocation(line: 118, column: 11, scope: !4022)
!4022 = distinct !DILexicalBlock(scope: !4014, file: !3952, line: 118, column: 11)
!4023 = !DILocation(line: 118, column: 15, scope: !4022)
!4024 = !DILocation(line: 118, column: 11, scope: !4014)
!4025 = !DILocation(line: 124, column: 11, scope: !4026)
!4026 = distinct !DILexicalBlock(scope: !4022, file: !3952, line: 119, column: 9)
!4027 = !DILocation(line: 129, column: 7, scope: !4014)
!4028 = !DILocation(line: 129, column: 11, scope: !4014)
!4029 = !DILocation(line: 129, column: 18, scope: !4014)
!4030 = !DILocation(line: 130, column: 21, scope: !4014)
!4031 = !DILocation(line: 130, column: 7, scope: !4014)
!4032 = !DILocation(line: 130, column: 11, scope: !4014)
!4033 = !DILocation(line: 130, column: 19, scope: !4014)
!4034 = !DILocation(line: 161, column: 7, scope: !4014)
!4035 = !DILocation(line: 163, column: 18, scope: !3951)
!4036 = !DILocation(line: 163, column: 22, scope: !3951)
!4037 = !DILocation(line: 163, column: 30, scope: !3951)
!4038 = !DILocation(line: 163, column: 10, scope: !3951)
!4039 = !DILocation(line: 163, column: 3, scope: !3951)
!4040 = !DILocation(line: 164, column: 1, scope: !3951)
!4041 = distinct !DISubprogram(name: "c_tolower", scope: !4042, file: !4042, line: 337, type: !4043, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !163, retainedNodes: !4)
!4042 = !DIFile(filename: "./lib/c-ctype.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4043 = !DISubroutineType(types: !4044)
!4044 = !{!19, !19}
!4045 = !DILocalVariable(name: "c", arg: 1, scope: !4041, file: !4042, line: 337, type: !19)
!4046 = !DILocation(line: 337, column: 16, scope: !4041)
!4047 = !DILocation(line: 339, column: 11, scope: !4041)
!4048 = !DILocation(line: 339, column: 3, scope: !4041)
!4049 = !DILocation(line: 342, column: 14, scope: !4050)
!4050 = distinct !DILexicalBlock(scope: !4041, file: !4042, line: 340, column: 5)
!4051 = !DILocation(line: 342, column: 16, scope: !4050)
!4052 = !DILocation(line: 342, column: 22, scope: !4050)
!4053 = !DILocation(line: 342, column: 7, scope: !4050)
!4054 = !DILocation(line: 344, column: 14, scope: !4050)
!4055 = !DILocation(line: 344, column: 7, scope: !4050)
!4056 = !DILocation(line: 346, column: 1, scope: !4041)
!4057 = !DILocalVariable(name: "c", arg: 1, scope: !4058, file: !4042, line: 337, type: !19)
!4058 = distinct !DISubprogram(name: "c_tolower", scope: !4042, file: !4042, line: 337, type: !4043, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !4059, retainedNodes: !4)
!4059 = distinct !DICompileUnit(language: DW_LANG_C99, file: !164, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, nameTableKind: None)
