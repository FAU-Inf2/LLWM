; ModuleID = '<stdin>'
source_filename = "ld-temp.o"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.infomap = type { i8*, i8* }
%struct.option = type { i8*, i32, i32*, i32 }
%struct.quoting_options = type { i32, i32, [8 x i32], i8*, i8* }
%struct.slotvec = type { i64, i8* }
%struct.utsname = type { [65 x i8], [65 x i8], [65 x i8], [65 x i8], [65 x i8], [65 x i8] }
%struct.__mbstate_t = type { i32, %union.anon }
%union.anon = type { i32 }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }

@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [39 x i8] c"Try '%s --help' for more information.\0A\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"Usage: %s [OPTION]...\0A\00", align 1
@.str.2 = private unnamed_addr constant [362 x i8] c"Print certain system information.  With no OPTION, same as -s.\0A\0A  -a, --all                print all information, in the following order,\0A                             except omit -p and -i if unknown:\0A  -s, --kernel-name        print the kernel name\0A  -n, --nodename           print the network node hostname\0A  -r, --kernel-release     print the kernel release\0A\00", align 1
@stdout = external dso_local global %struct._IO_FILE*, align 8
@.str.3 = private unnamed_addr constant [303 x i8] c"  -v, --kernel-version     print the kernel version\0A  -m, --machine            print the machine hardware name\0A  -p, --processor          print the processor type (non-portable)\0A  -i, --hardware-platform  print the hardware platform (non-portable)\0A  -o, --operating-system   print the operating system\0A\00", align 1
@.str.4 = private unnamed_addr constant [30 x i8] c"Print machine architecture.\0A\0A\00", align 1
@.str.5 = private unnamed_addr constant [45 x i8] c"      --help     display this help and exit\0A\00", align 1
@.str.6 = private unnamed_addr constant [54 x i8] c"      --version  output version information and exit\0A\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"uname\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"arch\00", align 1
@__const.emit_ancillary_info.infomap = private unnamed_addr constant [7 x %struct.infomap] [%struct.infomap { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.16, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.18, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.18, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.18, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.18, i32 0, i32 0) }, %struct.infomap zeroinitializer], align 16
@.str.22 = private unnamed_addr constant [23 x i8] c"\0A%s online help: <%s>\0A\00", align 1
@.str.23 = private unnamed_addr constant [14 x i8] c"GNU coreutils\00", align 1
@.str.24 = private unnamed_addr constant [40 x i8] c"https://www.gnu.org/software/coreutils/\00", align 1
@.str.25 = private unnamed_addr constant [4 x i8] c"en_\00", align 1
@.str.26 = private unnamed_addr constant [71 x i8] c"Report any translation bugs to <https://translationproject.org/team/>\0A\00", align 1
@.str.27 = private unnamed_addr constant [27 x i8] c"Full documentation <%s%s>\0A\00", align 1
@.str.28 = private unnamed_addr constant [51 x i8] c"or available locally via: info '(coreutils) %s%s'\0A\00", align 1
@.str.29 = private unnamed_addr constant [12 x i8] c" invocation\00", align 1
@.str.9 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.14 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.15 = private unnamed_addr constant [16 x i8] c"test invocation\00", align 1
@.str.10 = private unnamed_addr constant [10 x i8] c"coreutils\00", align 1
@.str.16 = private unnamed_addr constant [22 x i8] c"Multi-call invocation\00", align 1
@.str.17 = private unnamed_addr constant [10 x i8] c"sha224sum\00", align 1
@.str.18 = private unnamed_addr constant [15 x i8] c"sha2 utilities\00", align 1
@.str.19 = private unnamed_addr constant [10 x i8] c"sha256sum\00", align 1
@.str.20 = private unnamed_addr constant [10 x i8] c"sha384sum\00", align 1
@.str.21 = private unnamed_addr constant [10 x i8] c"sha512sum\00", align 1
@.str.11 = private unnamed_addr constant [24 x i8] c"/usr/local/share/locale\00", align 1
@.str.12 = private unnamed_addr constant [23 x i8] c"cannot get system name\00", align 1
@main.unknown = internal constant [8 x i8] c"unknown\00", align 1, !dbg !0
@.str.13 = private unnamed_addr constant [10 x i8] c"GNU/Linux\00", align 1
@print_element.printed = internal global i8 0, align 1, !dbg !36
@arch_long_options = internal constant [3 x %struct.option] [%struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.34, i32 0, i32 0), i32 0, i32* null, i32 -130 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.35, i32 0, i32 0), i32 0, i32* null, i32 -131 }, %struct.option zeroinitializer], align 16, !dbg !15
@.str.30 = private unnamed_addr constant [16 x i8] c"David MacKenzie\00", align 1
@.str.31 = private unnamed_addr constant [10 x i8] c"Karel Zak\00", align 1
@.str.32 = private unnamed_addr constant [10 x i8] c"asnrvmpio\00", align 1
@uname_long_options = internal constant [14 x %struct.option] [%struct.option { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.36, i32 0, i32 0), i32 0, i32* null, i32 97 }, %struct.option { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.37, i32 0, i32 0), i32 0, i32* null, i32 115 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.38, i32 0, i32 0), i32 0, i32* null, i32 115 }, %struct.option { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.39, i32 0, i32 0), i32 0, i32* null, i32 110 }, %struct.option { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.40, i32 0, i32 0), i32 0, i32* null, i32 114 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.41, i32 0, i32 0), i32 0, i32* null, i32 114 }, %struct.option { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.42, i32 0, i32 0), i32 0, i32* null, i32 118 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.43, i32 0, i32 0), i32 0, i32* null, i32 109 }, %struct.option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.44, i32 0, i32 0), i32 0, i32* null, i32 112 }, %struct.option { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.45, i32 0, i32 0), i32 0, i32* null, i32 105 }, %struct.option { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.46, i32 0, i32 0), i32 0, i32* null, i32 111 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.34, i32 0, i32 0), i32 0, i32* null, i32 -130 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.35, i32 0, i32 0), i32 0, i32* null, i32 -131 }, %struct.option zeroinitializer], align 16, !dbg !31
@optind = external dso_local global i32, align 4
@.str.33 = private unnamed_addr constant [17 x i8] c"extra operand %s\00", align 1
@.str.36 = private unnamed_addr constant [4 x i8] c"all\00", align 1
@.str.37 = private unnamed_addr constant [12 x i8] c"kernel-name\00", align 1
@.str.38 = private unnamed_addr constant [8 x i8] c"sysname\00", align 1
@.str.39 = private unnamed_addr constant [9 x i8] c"nodename\00", align 1
@.str.40 = private unnamed_addr constant [15 x i8] c"kernel-release\00", align 1
@.str.41 = private unnamed_addr constant [8 x i8] c"release\00", align 1
@.str.42 = private unnamed_addr constant [15 x i8] c"kernel-version\00", align 1
@.str.43 = private unnamed_addr constant [8 x i8] c"machine\00", align 1
@.str.44 = private unnamed_addr constant [10 x i8] c"processor\00", align 1
@.str.45 = private unnamed_addr constant [18 x i8] c"hardware-platform\00", align 1
@.str.46 = private unnamed_addr constant [17 x i8] c"operating-system\00", align 1
@.str.34 = private unnamed_addr constant [5 x i8] c"help\00", align 1
@.str.35 = private unnamed_addr constant [8 x i8] c"version\00", align 1
@uname_mode = internal global i32 1, align 4, !dbg !45
@Version = internal global i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.47, i32 0, i32 0), align 8, !dbg !50
@.str.47 = private unnamed_addr constant [5 x i8] c"8.32\00", align 1
@ignore_EPIPE = internal global i8 0, align 1, !dbg !55
@.str.50 = private unnamed_addr constant [12 x i8] c"write error\00", align 1
@file_name = internal global i8* null, align 8, !dbg !60
@.str.1.51 = private unnamed_addr constant [7 x i8] c"%s: %s\00", align 1
@.str.2.52 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@exit_failure = internal global i32 1, align 4, !dbg !63
@.str.57 = private unnamed_addr constant [56 x i8] c"A NULL argv[0] was passed through an exec system call.\0A\00", align 1
@.str.1.58 = private unnamed_addr constant [8 x i8] c"/.libs/\00", align 1
@.str.2.59 = private unnamed_addr constant [4 x i8] c"lt-\00", align 1
@program_invocation_short_name = external dso_local global i8*, align 8
@program_name = internal global i8* null, align 8, !dbg !70
@program_invocation_name = external dso_local global i8*, align 8
@default_quoting_options = internal global %struct.quoting_options zeroinitializer, align 8, !dbg !77
@slotvec = internal global %struct.slotvec* @slotvec0, align 8, !dbg !131
@nslots = internal global i32 1, align 4, !dbg !138
@slotvec0 = internal global %struct.slotvec { i64 256, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i32 0, i32 0) }, align 8, !dbg !140
@slot0 = internal global [256 x i8] zeroinitializer, align 16, !dbg !126
@.str.10.62 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.11.63 = private unnamed_addr constant [2 x i8] c"`\00", align 1
@.str.12.64 = private unnamed_addr constant [2 x i8] c"'\00", align 1
@.str.13.65 = private unnamed_addr constant [6 x i8] c"UTF-8\00", align 1
@.str.14.66 = private unnamed_addr constant [4 x i8] c"\E2\80\98\00", align 1
@.str.15.67 = private unnamed_addr constant [4 x i8] c"\E2\80\99\00", align 1
@.str.16.68 = private unnamed_addr constant [8 x i8] c"GB18030\00", align 1
@.str.17.69 = private unnamed_addr constant [4 x i8] c"\A1\07e\00", align 1
@.str.18.70 = private unnamed_addr constant [3 x i8] c"\A1\AF\00", align 1
@quote_quoting_options = internal global %struct.quoting_options { i32 8, i32 0, [8 x i32] zeroinitializer, i8* null, i8* null }, align 8, !dbg !116
@.str.75 = private unnamed_addr constant [12 x i8] c"%s (%s) %s\0A\00", align 1
@.str.1.76 = private unnamed_addr constant [7 x i8] c"%s %s\0A\00", align 1
@.str.2.77 = private unnamed_addr constant [4 x i8] c"(C)\00", align 1
@.str.3.78 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.4.79 = private unnamed_addr constant [171 x i8] c"License GPLv3+: GNU GPL version 3 or later <%s>.\0AThis is free software: you are free to change and redistribute it.\0AThere is NO WARRANTY, to the extent permitted by law.\0A\00", align 1
@.str.5.80 = private unnamed_addr constant [34 x i8] c"https://gnu.org/licenses/gpl.html\00", align 1
@.str.6.81 = private unnamed_addr constant [16 x i8] c"Written by %s.\0A\00", align 1
@.str.7.82 = private unnamed_addr constant [23 x i8] c"Written by %s and %s.\0A\00", align 1
@.str.8.83 = private unnamed_addr constant [28 x i8] c"Written by %s, %s, and %s.\0A\00", align 1
@.str.9.84 = private unnamed_addr constant [32 x i8] c"Written by %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.10.85 = private unnamed_addr constant [36 x i8] c"Written by %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.11.86 = private unnamed_addr constant [40 x i8] c"Written by %s, %s, %s,\0A%s, %s, and %s.\0A\00", align 1
@.str.12.87 = private unnamed_addr constant [44 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, and %s.\0A\00", align 1
@.str.13.88 = private unnamed_addr constant [48 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.14.89 = private unnamed_addr constant [52 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.15.90 = private unnamed_addr constant [60 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, %s, and others.\0A\00", align 1
@version_etc_copyright = internal constant [47 x i8] c"Copyright %s %d Free Software Foundation, Inc.\00", align 16, !dbg !142
@.str.1.101 = private unnamed_addr constant [17 x i8] c"memory exhausted\00", align 1
@.str.102 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.111 = private unnamed_addr constant [2 x i8] c"C\00", align 1
@.str.1.112 = private unnamed_addr constant [6 x i8] c"POSIX\00", align 1
@.str.115 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1.116 = private unnamed_addr constant [6 x i8] c"ASCII\00", align 1
@inVal0 = global i32 0
@inVal1 = global i8** null
@.compVal0 = private global [3 x i8] c"-a\00"
@.compVal1 = private global [4 x i8] c"-aa\00"
@.compVal2 = private global [3 x i8] c"--\00"
@x = common global i32 0
@y = common global i32 0
@x.1 = common global i32 0
@y.2 = common global i32 0
@x.3 = common global i32 0
@y.4 = common global i32 0
@x.5 = common global i32 0
@y.6 = common global i32 0
@x.7 = common global i32 0
@y.8 = common global i32 0
@x.9 = common global i32 0
@y.10 = common global i32 0
@x.11 = common global i32 0
@y.12 = common global i32 0
@x.13 = common global i32 0
@y.14 = common global i32 0
@x.15 = common global i32 0
@y.16 = common global i32 0
@x.17 = common global i32 0
@y.18 = common global i32 0
@x.19 = common global i32 0
@y.20 = common global i32 0
@x.21 = common global i32 0
@y.22 = common global i32 0
@x.23 = common global i32 0
@y.24 = common global i32 0
@x.25 = common global i32 0
@y.26 = common global i32 0
@x.27 = common global i32 0
@y.28 = common global i32 0
@x.29 = common global i32 0
@y.30 = common global i32 0
@x.31 = common global i32 0
@y.32 = common global i32 0
@x.33 = common global i32 0
@y.34 = common global i32 0
@x.35 = common global i32 0
@y.36 = common global i32 0
@x.37 = common global i32 0
@y.38 = common global i32 0
@x.39 = common global i32 0
@y.40 = common global i32 0
@x.41 = common global i32 0
@y.42 = common global i32 0
@x.43 = common global i32 0
@y.44 = common global i32 0
@x.45 = common global i32 0
@y.46 = common global i32 0
@x.47 = common global i32 0
@y.48 = common global i32 0
@x.49 = common global i32 0
@y.50 = common global i32 0
@x.51 = common global i32 0
@y.52 = common global i32 0
@x.53 = common global i32 0
@y.54 = common global i32 0
@x.55 = common global i32 0
@y.56 = common global i32 0
@x.57 = common global i32 0
@y.58 = common global i32 0
@x.59 = common global i32 0
@y.60 = common global i32 0
@x.61 = common global i32 0
@y.62 = common global i32 0
@x.63 = common global i32 0
@y.64 = common global i32 0
@x.65 = common global i32 0
@y.66 = common global i32 0
@x.67 = common global i32 0
@y.68 = common global i32 0
@x.69 = common global i32 0
@y.70 = common global i32 0
@x.71 = common global i32 0
@y.72 = common global i32 0
@x.73 = common global i32 0
@y.74 = common global i32 0

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @usage(i32) #0 !dbg !190 {
  %2 = load i32, i32* @x
  %3 = load i32, i32* @y
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  store i32 %0, i32* %10, align 4
  call void @llvm.dbg.declare(metadata i32* %10, metadata !193, metadata !DIExpression()), !dbg !194
  %11 = load i32, i32* %10, align 4, !dbg !195
  %12 = icmp ne i32 %11, 0, !dbg !197
  %13 = load i32, i32* @x
  %14 = load i32, i32* @y
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %21, label %76, !dbg !198

21:                                               ; preds = %originalBBpart2
  %22 = load i32, i32* @x
  %23 = load i32, i32* @y
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  %30 = load i32, i32* @x
  %31 = load i32, i32* @y
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %38, !dbg !199

38:                                               ; preds = %originalBBpart24
  %39 = load i32, i32* @x
  %40 = load i32, i32* @y
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %38, %originalBB6alteredBB
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !200
  %48 = call i8* @gettext(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0)) #10, !dbg !200
  %49 = load i8*, i8** @program_name, align 8, !dbg !200
  %50 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %47, i8* %48, i8* %49), !dbg !200
  %51 = load i32, i32* @x
  %52 = load i32, i32* @y
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %59, !dbg !200

59:                                               ; preds = %originalBBpart28
  %60 = load i32, i32* @x
  %61 = load i32, i32* @y
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %59, %originalBB10alteredBB
  %68 = load i32, i32* @x
  %69 = load i32, i32* @y
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %168, !dbg !200

76:                                               ; preds = %originalBBpart2
  %77 = load i32, i32* @x
  %78 = load i32, i32* @y
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %76, %originalBB14alteredBB
  %85 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0)) #10, !dbg !202
  %86 = load i8*, i8** @program_name, align 8, !dbg !204
  %87 = call i32 (i8*, ...) @printf(i8* %85, i8* %86), !dbg !205
  %88 = load i32, i32* @uname_mode, align 4, !dbg !206
  %89 = icmp eq i32 %88, 1, !dbg !208
  %90 = load i32, i32* @x
  %91 = load i32, i32* @y
  %92 = sub i32 %90, 1
  %93 = mul i32 %90, %92
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %91, 10
  %97 = or i1 %95, %96
  br i1 %97, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %89, label %98, label %121, !dbg !209

98:                                               ; preds = %originalBBpart216
  %99 = load i32, i32* @x
  %100 = load i32, i32* @y
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %98, %originalBB18alteredBB
  %107 = call i8* @gettext(i8* getelementptr inbounds ([362 x i8], [362 x i8]* @.str.2, i64 0, i64 0)) #10, !dbg !210
  %108 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !210
  %109 = call i32 @fputs_unlocked(i8* %107, %struct._IO_FILE* %108), !dbg !210
  %110 = call i8* @gettext(i8* getelementptr inbounds ([303 x i8], [303 x i8]* @.str.3, i64 0, i64 0)) #10, !dbg !212
  %111 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !212
  %112 = call i32 @fputs_unlocked(i8* %110, %struct._IO_FILE* %111), !dbg !212
  %113 = load i32, i32* @x
  %114 = load i32, i32* @y
  %115 = sub i32 %113, 1
  %116 = mul i32 %113, %115
  %117 = urem i32 %116, 2
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %118, %119
  br i1 %120, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %141, !dbg !213

121:                                              ; preds = %originalBBpart216
  %122 = load i32, i32* @x
  %123 = load i32, i32* @y
  %124 = sub i32 %122, 1
  %125 = mul i32 %122, %124
  %126 = urem i32 %125, 2
  %127 = icmp eq i32 %126, 0
  %128 = icmp slt i32 %123, 10
  %129 = or i1 %127, %128
  br i1 %129, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %121, %originalBB22alteredBB
  %130 = call i8* @gettext(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i64 0, i64 0)) #10, !dbg !214
  %131 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !214
  %132 = call i32 @fputs_unlocked(i8* %130, %struct._IO_FILE* %131), !dbg !214
  %133 = load i32, i32* @x
  %134 = load i32, i32* @y
  %135 = sub i32 %133, 1
  %136 = mul i32 %133, %135
  %137 = urem i32 %136, 2
  %138 = icmp eq i32 %137, 0
  %139 = icmp slt i32 %134, 10
  %140 = or i1 %138, %139
  br i1 %140, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %141

141:                                              ; preds = %originalBBpart224, %originalBBpart220
  %142 = load i32, i32* @x
  %143 = load i32, i32* @y
  %144 = sub i32 %142, 1
  %145 = mul i32 %142, %144
  %146 = urem i32 %145, 2
  %147 = icmp eq i32 %146, 0
  %148 = icmp slt i32 %143, 10
  %149 = or i1 %147, %148
  br i1 %149, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %141, %originalBB26alteredBB
  %150 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.5, i64 0, i64 0)) #10, !dbg !216
  %151 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !216
  %152 = call i32 @fputs_unlocked(i8* %150, %struct._IO_FILE* %151), !dbg !216
  %153 = call i8* @gettext(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.6, i64 0, i64 0)) #10, !dbg !217
  %154 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !217
  %155 = call i32 @fputs_unlocked(i8* %153, %struct._IO_FILE* %154), !dbg !217
  %156 = load i32, i32* @uname_mode, align 4, !dbg !218
  %157 = icmp eq i32 %156, 1, !dbg !218
  %158 = zext i1 %157 to i64, !dbg !218
  %159 = select i1 %157, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), !dbg !218
  call void @emit_ancillary_info(i8* %159), !dbg !219
  %160 = load i32, i32* @x
  %161 = load i32, i32* @y
  %162 = sub i32 %160, 1
  %163 = mul i32 %160, %162
  %164 = urem i32 %163, 2
  %165 = icmp eq i32 %164, 0
  %166 = icmp slt i32 %161, 10
  %167 = or i1 %165, %166
  br i1 %167, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %168

168:                                              ; preds = %originalBBpart228, %originalBBpart212
  %169 = load i32, i32* @x
  %170 = load i32, i32* @y
  %171 = sub i32 %169, 1
  %172 = mul i32 %169, %171
  %173 = urem i32 %172, 2
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %174, %175
  br i1 %176, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %168, %originalBB30alteredBB
  %177 = load i32, i32* %10, align 4, !dbg !220
  call void @exit(i32 %177) #12, !dbg !221
  %178 = load i32, i32* @x
  %179 = load i32, i32* @y
  %180 = sub i32 %178, 1
  %181 = mul i32 %178, %180
  %182 = urem i32 %181, 2
  %183 = icmp eq i32 %182, 0
  %184 = icmp slt i32 %179, 10
  %185 = or i1 %183, %184
  br i1 %185, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  unreachable, !dbg !221

originalBBalteredBB:                              ; preds = %originalBB, %1
  %186 = alloca i32, align 4
  store i32 %0, i32* %186, align 4
  call void @llvm.dbg.declare(metadata i32* %186, metadata !222, metadata !DIExpression()), !dbg !194
  %187 = load i32, i32* %186, align 4, !dbg !195
  %188 = icmp ne i32 %187, 0, !dbg !197
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %38
  %189 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !200
  %190 = call i8* @gettext(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0)) #10, !dbg !200
  %191 = load i8*, i8** @program_name, align 8, !dbg !200
  %192 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %189, i8* %190, i8* %191), !dbg !200
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %59
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %76
  %193 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0)) #10, !dbg !202
  %194 = load i8*, i8** @program_name, align 8, !dbg !204
  %195 = call i32 (i8*, ...) @printf(i8* %193, i8* %194), !dbg !205
  %196 = load i32, i32* @uname_mode, align 4, !dbg !206
  %197 = icmp eq i32 %196, 1, !dbg !208
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %98
  %198 = call i8* @gettext(i8* getelementptr inbounds ([362 x i8], [362 x i8]* @.str.2, i64 0, i64 0)) #10, !dbg !210
  %199 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !210
  %200 = call i32 @fputs_unlocked(i8* %198, %struct._IO_FILE* %199), !dbg !210
  %201 = call i8* @gettext(i8* getelementptr inbounds ([303 x i8], [303 x i8]* @.str.3, i64 0, i64 0)) #10, !dbg !212
  %202 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !212
  %203 = call i32 @fputs_unlocked(i8* %201, %struct._IO_FILE* %202), !dbg !212
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %121
  %204 = call i8* @gettext(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i64 0, i64 0)) #10, !dbg !214
  %205 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !214
  %206 = call i32 @fputs_unlocked(i8* %204, %struct._IO_FILE* %205), !dbg !214
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %141
  %207 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.5, i64 0, i64 0)) #10, !dbg !216
  %208 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !216
  %209 = call i32 @fputs_unlocked(i8* %207, %struct._IO_FILE* %208), !dbg !216
  %210 = call i8* @gettext(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.6, i64 0, i64 0)) #10, !dbg !217
  %211 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !217
  %212 = call i32 @fputs_unlocked(i8* %210, %struct._IO_FILE* %211), !dbg !217
  %213 = load i32, i32* @uname_mode, align 4, !dbg !218
  %214 = icmp eq i32 %213, 1, !dbg !218
  %215 = zext i1 %214 to i64, !dbg !218
  %216 = select i1 %214, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), !dbg !218
  call void @emit_ancillary_info(i8* %216), !dbg !219
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %168
  %217 = load i32, i32* %10, align 4, !dbg !220
  call void @exit(i32 %217) #12, !dbg !221
  br label %originalBB30
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare dso_local i8* @gettext(i8*) #2

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #3

declare dso_local i32 @printf(i8*, ...) #3

declare dso_local i32 @fputs_unlocked(i8*, %struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @emit_ancillary_info(i8*) #4 !dbg !245 {
  %2 = load i32, i32* @x.1
  %3 = load i32, i32* @y.2
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  %11 = alloca [7 x %struct.infomap], align 16
  %12 = alloca i8*, align 8
  %13 = alloca %struct.infomap*, align 8
  %14 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !247, metadata !DIExpression()), !dbg !248
  call void @llvm.dbg.declare(metadata [7 x %struct.infomap]* %11, metadata !249, metadata !DIExpression()), !dbg !258
  %15 = bitcast [7 x %struct.infomap]* %11 to i8*, !dbg !258
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %15, i8* align 16 bitcast ([7 x %struct.infomap]* @__const.emit_ancillary_info.infomap to i8*), i64 112, i1 false), !dbg !258
  call void @llvm.dbg.declare(metadata i8** %12, metadata !259, metadata !DIExpression()), !dbg !260
  %16 = load i8*, i8** %10, align 8, !dbg !261
  store i8* %16, i8** %12, align 8, !dbg !260
  call void @llvm.dbg.declare(metadata %struct.infomap** %13, metadata !262, metadata !DIExpression()), !dbg !264
  %17 = getelementptr inbounds [7 x %struct.infomap], [7 x %struct.infomap]* %11, i64 0, i64 0, !dbg !265
  store %struct.infomap* %17, %struct.infomap** %13, align 8, !dbg !264
  %18 = load i32, i32* @x.1
  %19 = load i32, i32* @y.2
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %26, !dbg !266

26:                                               ; preds = %originalBBpart223, %originalBBpart2
  %27 = load i32, i32* @x.1
  %28 = load i32, i32* @y.2
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %26, %originalBB1alteredBB
  %35 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !267
  %36 = getelementptr inbounds %struct.infomap, %struct.infomap* %35, i32 0, i32 0, !dbg !268
  %37 = load i8*, i8** %36, align 8, !dbg !268
  %38 = icmp ne i8* %37, null, !dbg !267
  %39 = load i32, i32* @x.1
  %40 = load i32, i32* @y.2
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %38, label %47, label %71, !dbg !269

47:                                               ; preds = %originalBBpart24
  %48 = load i32, i32* @x.1
  %49 = load i32, i32* @y.2
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %47, %originalBB6alteredBB
  %56 = load i8*, i8** %10, align 8, !dbg !270
  %57 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !270
  %58 = getelementptr inbounds %struct.infomap, %struct.infomap* %57, i32 0, i32 0, !dbg !270
  %59 = load i8*, i8** %58, align 8, !dbg !270
  %60 = call i32 @strcmp(i8* %56, i8* %59) #13, !dbg !270
  %61 = icmp eq i32 %60, 0, !dbg !270
  %62 = xor i1 %61, true, !dbg !271
  %63 = load i32, i32* @x.1
  %64 = load i32, i32* @y.2
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBBpart215, label %originalBB6alteredBB

originalBBpart215:                                ; preds = %originalBB6
  br label %71

71:                                               ; preds = %originalBBpart215, %originalBBpart24
  %72 = phi i1 [ false, %originalBBpart24 ], [ %62, %originalBBpart215 ], !dbg !272
  %73 = load i32, i32* @x.1
  %74 = load i32, i32* @y.2
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBB17, label %originalBB17alteredBB

originalBB17:                                     ; preds = %71, %originalBB17alteredBB
  %81 = load i32, i32* @x.1
  %82 = load i32, i32* @y.2
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBBpart219, label %originalBB17alteredBB

originalBBpart219:                                ; preds = %originalBB17
  br i1 %72, label %89, label %108, !dbg !266

89:                                               ; preds = %originalBBpart219
  %90 = load i32, i32* @x.1
  %91 = load i32, i32* @y.2
  %92 = sub i32 %90, 1
  %93 = mul i32 %90, %92
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %91, 10
  %97 = or i1 %95, %96
  br i1 %97, label %originalBB21, label %originalBB21alteredBB

originalBB21:                                     ; preds = %89, %originalBB21alteredBB
  %98 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !273
  %99 = getelementptr inbounds %struct.infomap, %struct.infomap* %98, i32 1, !dbg !273
  store %struct.infomap* %99, %struct.infomap** %13, align 8, !dbg !273
  %100 = load i32, i32* @x.1
  %101 = load i32, i32* @y.2
  %102 = sub i32 %100, 1
  %103 = mul i32 %100, %102
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %105, %106
  br i1 %107, label %originalBBpart223, label %originalBB21alteredBB

originalBBpart223:                                ; preds = %originalBB21
  br label %26, !dbg !266, !llvm.loop !274

108:                                              ; preds = %originalBBpart219
  %109 = load i32, i32* @x.1
  %110 = load i32, i32* @y.2
  %111 = sub i32 %109, 1
  %112 = mul i32 %109, %111
  %113 = urem i32 %112, 2
  %114 = icmp eq i32 %113, 0
  %115 = icmp slt i32 %110, 10
  %116 = or i1 %114, %115
  br i1 %116, label %originalBB25, label %originalBB25alteredBB

originalBB25:                                     ; preds = %108, %originalBB25alteredBB
  %117 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !275
  %118 = getelementptr inbounds %struct.infomap, %struct.infomap* %117, i32 0, i32 1, !dbg !277
  %119 = load i8*, i8** %118, align 8, !dbg !277
  %120 = icmp ne i8* %119, null, !dbg !275
  %121 = load i32, i32* @x.1
  %122 = load i32, i32* @y.2
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBBpart227, label %originalBB25alteredBB

originalBBpart227:                                ; preds = %originalBB25
  br i1 %120, label %129, label %149, !dbg !278

129:                                              ; preds = %originalBBpart227
  %130 = load i32, i32* @x.1
  %131 = load i32, i32* @y.2
  %132 = sub i32 %130, 1
  %133 = mul i32 %130, %132
  %134 = urem i32 %133, 2
  %135 = icmp eq i32 %134, 0
  %136 = icmp slt i32 %131, 10
  %137 = or i1 %135, %136
  br i1 %137, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %129, %originalBB29alteredBB
  %138 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !279
  %139 = getelementptr inbounds %struct.infomap, %struct.infomap* %138, i32 0, i32 1, !dbg !280
  %140 = load i8*, i8** %139, align 8, !dbg !280
  store i8* %140, i8** %12, align 8, !dbg !281
  %141 = load i32, i32* @x.1
  %142 = load i32, i32* @y.2
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBBpart231, label %originalBB29alteredBB

originalBBpart231:                                ; preds = %originalBB29
  br label %149, !dbg !282

149:                                              ; preds = %originalBBpart231, %originalBBpart227
  %150 = load i32, i32* @x.1
  %151 = load i32, i32* @y.2
  %152 = sub i32 %150, 1
  %153 = mul i32 %150, %152
  %154 = urem i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %155, %156
  br i1 %157, label %originalBB33, label %originalBB33alteredBB

originalBB33:                                     ; preds = %149, %originalBB33alteredBB
  %158 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.22, i64 0, i64 0)) #10, !dbg !283
  %159 = call i32 (i8*, ...) @printf(i8* %158, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.23, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.24, i64 0, i64 0)), !dbg !284
  call void @llvm.dbg.declare(metadata i8** %14, metadata !285, metadata !DIExpression()), !dbg !286
  %160 = call i8* @setlocale(i32 5, i8* null) #10, !dbg !287
  store i8* %160, i8** %14, align 8, !dbg !286
  %161 = load i8*, i8** %14, align 8, !dbg !288
  %162 = icmp ne i8* %161, null, !dbg !288
  %163 = load i32, i32* @x.1
  %164 = load i32, i32* @y.2
  %165 = sub i32 %163, 1
  %166 = mul i32 %163, %165
  %167 = urem i32 %166, 2
  %168 = icmp eq i32 %167, 0
  %169 = icmp slt i32 %164, 10
  %170 = or i1 %168, %169
  br i1 %170, label %originalBBpart235, label %originalBB33alteredBB

originalBBpart235:                                ; preds = %originalBB33
  br i1 %162, label %171, label %211, !dbg !290

171:                                              ; preds = %originalBBpart235
  %172 = load i32, i32* @x.1
  %173 = load i32, i32* @y.2
  %174 = sub i32 %172, 1
  %175 = mul i32 %172, %174
  %176 = urem i32 %175, 2
  %177 = icmp eq i32 %176, 0
  %178 = icmp slt i32 %173, 10
  %179 = or i1 %177, %178
  br i1 %179, label %originalBB37, label %originalBB37alteredBB

originalBB37:                                     ; preds = %171, %originalBB37alteredBB
  %180 = load i8*, i8** %14, align 8, !dbg !291
  %181 = call i32 @strncmp(i8* %180, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.25, i64 0, i64 0), i64 3) #13, !dbg !291
  %182 = icmp ne i32 %181, 0, !dbg !291
  %183 = load i32, i32* @x.1
  %184 = load i32, i32* @y.2
  %185 = sub i32 %183, 1
  %186 = mul i32 %183, %185
  %187 = urem i32 %186, 2
  %188 = icmp eq i32 %187, 0
  %189 = icmp slt i32 %184, 10
  %190 = or i1 %188, %189
  br i1 %190, label %originalBBpart239, label %originalBB37alteredBB

originalBBpart239:                                ; preds = %originalBB37
  br i1 %182, label %191, label %211, !dbg !292

191:                                              ; preds = %originalBBpart239
  %192 = load i32, i32* @x.1
  %193 = load i32, i32* @y.2
  %194 = sub i32 %192, 1
  %195 = mul i32 %192, %194
  %196 = urem i32 %195, 2
  %197 = icmp eq i32 %196, 0
  %198 = icmp slt i32 %193, 10
  %199 = or i1 %197, %198
  br i1 %199, label %originalBB41, label %originalBB41alteredBB

originalBB41:                                     ; preds = %191, %originalBB41alteredBB
  %200 = call i8* @gettext(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.26, i64 0, i64 0)) #10, !dbg !293
  %201 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !293
  %202 = call i32 @fputs_unlocked(i8* %200, %struct._IO_FILE* %201), !dbg !293
  %203 = load i32, i32* @x.1
  %204 = load i32, i32* @y.2
  %205 = sub i32 %203, 1
  %206 = mul i32 %203, %205
  %207 = urem i32 %206, 2
  %208 = icmp eq i32 %207, 0
  %209 = icmp slt i32 %204, 10
  %210 = or i1 %208, %209
  br i1 %210, label %originalBBpart243, label %originalBB41alteredBB

originalBBpart243:                                ; preds = %originalBB41
  br label %211, !dbg !295

211:                                              ; preds = %originalBBpart243, %originalBBpart239, %originalBBpart235
  %212 = load i32, i32* @x.1
  %213 = load i32, i32* @y.2
  %214 = sub i32 %212, 1
  %215 = mul i32 %212, %214
  %216 = urem i32 %215, 2
  %217 = icmp eq i32 %216, 0
  %218 = icmp slt i32 %213, 10
  %219 = or i1 %217, %218
  br i1 %219, label %originalBB45, label %originalBB45alteredBB

originalBB45:                                     ; preds = %211, %originalBB45alteredBB
  %220 = call i8* @gettext(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.27, i64 0, i64 0)) #10, !dbg !296
  %221 = load i8*, i8** %10, align 8, !dbg !297
  %222 = call i32 (i8*, ...) @printf(i8* %220, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.24, i64 0, i64 0), i8* %221), !dbg !298
  %223 = call i8* @gettext(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.28, i64 0, i64 0)) #10, !dbg !299
  %224 = load i8*, i8** %12, align 8, !dbg !300
  %225 = load i8*, i8** %12, align 8, !dbg !301
  %226 = load i8*, i8** %10, align 8, !dbg !302
  %227 = icmp eq i8* %225, %226, !dbg !303
  %228 = zext i1 %227 to i64, !dbg !301
  %229 = select i1 %227, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.29, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.9, i64 0, i64 0), !dbg !301
  %230 = call i32 (i8*, ...) @printf(i8* %223, i8* %224, i8* %229), !dbg !304
  %231 = load i32, i32* @x.1
  %232 = load i32, i32* @y.2
  %233 = sub i32 %231, 1
  %234 = mul i32 %231, %233
  %235 = urem i32 %234, 2
  %236 = icmp eq i32 %235, 0
  %237 = icmp slt i32 %232, 10
  %238 = or i1 %236, %237
  br i1 %238, label %originalBBpart247, label %originalBB45alteredBB

originalBBpart247:                                ; preds = %originalBB45
  ret void, !dbg !305

originalBBalteredBB:                              ; preds = %originalBB, %1
  %239 = alloca i8*, align 8
  %240 = alloca [7 x %struct.infomap], align 16
  %241 = alloca i8*, align 8
  %242 = alloca %struct.infomap*, align 8
  %243 = alloca i8*, align 8
  store i8* %0, i8** %239, align 8
  call void @llvm.dbg.declare(metadata i8** %239, metadata !306, metadata !DIExpression()), !dbg !248
  call void @llvm.dbg.declare(metadata [7 x %struct.infomap]* %240, metadata !329, metadata !DIExpression()), !dbg !258
  %244 = bitcast [7 x %struct.infomap]* %240 to i8*, !dbg !258
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %244, i8* align 16 bitcast ([7 x %struct.infomap]* @__const.emit_ancillary_info.infomap to i8*), i64 112, i1 false), !dbg !258
  call void @llvm.dbg.declare(metadata i8** %241, metadata !336, metadata !DIExpression()), !dbg !260
  %245 = load i8*, i8** %239, align 8, !dbg !261
  store i8* %245, i8** %241, align 8, !dbg !260
  call void @llvm.dbg.declare(metadata %struct.infomap** %242, metadata !337, metadata !DIExpression()), !dbg !264
  %246 = getelementptr inbounds [7 x %struct.infomap], [7 x %struct.infomap]* %240, i64 0, i64 0, !dbg !265
  store %struct.infomap* %246, %struct.infomap** %242, align 8, !dbg !264
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %26
  %247 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !267
  %248 = getelementptr inbounds %struct.infomap, %struct.infomap* %247, i32 0, i32 0, !dbg !268
  %249 = load i8*, i8** %248, align 8, !dbg !268
  %250 = icmp ne i8* %249, null, !dbg !267
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %47
  %251 = load i8*, i8** %10, align 8, !dbg !270
  %252 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !270
  %253 = getelementptr inbounds %struct.infomap, %struct.infomap* %252, i32 0, i32 0, !dbg !270
  %254 = load i8*, i8** %253, align 8, !dbg !270
  %255 = call i32 @strcmp(i8* %251, i8* %254) #13, !dbg !270
  %256 = icmp eq i32 %255, 0, !dbg !270
  %_ = sub i1 false, %256
  %gen = add i1 %_, true
  %_7 = shl i1 %256, true
  %_8 = sub i1 false, %256
  %gen9 = add i1 %_8, true
  %_10 = shl i1 %256, true
  %_11 = shl i1 %256, true
  %_12 = sub i1 false, %256
  %gen13 = add i1 %_12, true
  %257 = xor i1 %256, true, !dbg !271
  br label %originalBB6

originalBB17alteredBB:                            ; preds = %originalBB17, %71
  br label %originalBB17

originalBB21alteredBB:                            ; preds = %originalBB21, %89
  %258 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !273
  %259 = getelementptr inbounds %struct.infomap, %struct.infomap* %258, i32 1, !dbg !273
  store %struct.infomap* %259, %struct.infomap** %13, align 8, !dbg !273
  br label %originalBB21

originalBB25alteredBB:                            ; preds = %originalBB25, %108
  %260 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !275
  %261 = getelementptr inbounds %struct.infomap, %struct.infomap* %260, i32 0, i32 1, !dbg !277
  %262 = load i8*, i8** %261, align 8, !dbg !277
  %263 = icmp ne i8* %262, null, !dbg !275
  br label %originalBB25

originalBB29alteredBB:                            ; preds = %originalBB29, %129
  %264 = load %struct.infomap*, %struct.infomap** %13, align 8, !dbg !279
  %265 = getelementptr inbounds %struct.infomap, %struct.infomap* %264, i32 0, i32 1, !dbg !280
  %266 = load i8*, i8** %265, align 8, !dbg !280
  store i8* %266, i8** %12, align 8, !dbg !281
  br label %originalBB29

originalBB33alteredBB:                            ; preds = %originalBB33, %149
  %267 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.22, i64 0, i64 0)) #10, !dbg !283
  %268 = call i32 (i8*, ...) @printf(i8* %267, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.23, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.24, i64 0, i64 0)), !dbg !284
  call void @llvm.dbg.declare(metadata !11, metadata !339, metadata !DIExpression()), !dbg !286
  %269 = call i8* @setlocale(i32 5, i8* null) #10, !dbg !287
  store i8* %269, i8** %14, align 8, !dbg !286
  %270 = load i8*, i8** %14, align 8, !dbg !288
  %271 = icmp ne i8* %270, null, !dbg !288
  br label %originalBB33

originalBB37alteredBB:                            ; preds = %originalBB37, %171
  %272 = load i8*, i8** %14, align 8, !dbg !291
  %273 = call i32 @strncmp(i8* %272, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.25, i64 0, i64 0), i64 3) #13, !dbg !291
  %274 = icmp ne i32 %273, 0, !dbg !291
  br label %originalBB37

originalBB41alteredBB:                            ; preds = %originalBB41, %191
  %275 = call i8* @gettext(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.26, i64 0, i64 0)) #10, !dbg !293
  %276 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !293
  %277 = call i32 @fputs_unlocked(i8* %275, %struct._IO_FILE* %276), !dbg !293
  br label %originalBB41

originalBB45alteredBB:                            ; preds = %originalBB45, %211
  %278 = call i8* @gettext(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.27, i64 0, i64 0)) #10, !dbg !296
  %279 = load i8*, i8** %10, align 8, !dbg !297
  %280 = call i32 (i8*, ...) @printf(i8* %278, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.24, i64 0, i64 0), i8* %279), !dbg !298
  %281 = call i8* @gettext(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.28, i64 0, i64 0)) #10, !dbg !299
  %282 = load i8*, i8** %12, align 8, !dbg !300
  %283 = load i8*, i8** %12, align 8, !dbg !301
  %284 = load i8*, i8** %10, align 8, !dbg !302
  %285 = icmp eq i8* %283, %284, !dbg !303
  %286 = zext i1 %285 to i64, !dbg !301
  %287 = select i1 %285, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.29, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.9, i64 0, i64 0), !dbg !301
  %288 = call i32 (i8*, ...) @printf(i8* %281, i8* %282, i8* %287), !dbg !304
  br label %originalBB45
}

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

; Function Attrs: nounwind readonly
declare dso_local i32 @strcmp(i8*, i8*) #7

; Function Attrs: nounwind
declare dso_local i8* @setlocale(i32, i8*) #2

; Function Attrs: nounwind readonly
declare dso_local i32 @strncmp(i8*, i8*, i64) #7

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32, i8**) #4 !dbg !2 {
  %3 = load i32, i32* @x.3
  %4 = load i32, i32* @y.4
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  store i8** %1, i8*** @inVal1
  store i32 %0, i32* @inVal0
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i8**, align 8
  %14 = alloca i32, align 4
  %15 = alloca %struct.utsname, align 1
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  store i32 0, i32* %11, align 4
  store i32 %0, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !362, metadata !DIExpression()), !dbg !363
  store i8** %1, i8*** %13, align 8
  call void @llvm.dbg.declare(metadata i8*** %13, metadata !364, metadata !DIExpression()), !dbg !365
  call void @llvm.dbg.declare(metadata i32* %14, metadata !366, metadata !DIExpression()), !dbg !367
  store i32 0, i32* %14, align 4, !dbg !367
  %18 = load i8**, i8*** %13, align 8, !dbg !368
  %19 = getelementptr inbounds i8*, i8** %18, i64 0, !dbg !368
  %20 = load i8*, i8** %19, align 8, !dbg !368
  call void @set_program_name(i8* %20), !dbg !369
  %21 = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.9, i64 0, i64 0)) #10, !dbg !370
  %22 = call i8* @bindtextdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.11, i64 0, i64 0)) #10, !dbg !371
  %23 = call i8* @textdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10, i64 0, i64 0)) #10, !dbg !372
  %24 = call i32 @atexit(void ()* @close_stdout) #10, !dbg !373
  %25 = load i32, i32* %12, align 4, !dbg !374
  %26 = load i8**, i8*** %13, align 8, !dbg !375
  %27 = call i32 @decode_switches(i32 %25, i8** %26), !dbg !376
  store i32 %27, i32* %14, align 4, !dbg !377
  %28 = load i32, i32* %14, align 4, !dbg !378
  %29 = load i32, i32* @x.3
  %30 = load i32, i32* @y.4
  %31 = sub i32 %29, 1
  %32 = mul i32 %29, %31
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %34, %35
  br i1 %36, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %37, !dbg !380

37:                                               ; preds = %originalBBpart2
  %38 = load i32, i32* @x.3
  %39 = load i32, i32* @y.4
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %37, %originalBB1alteredBB
  %collatzVar = alloca i32
  %46 = load i32, i32* @x.3
  %47 = load i32, i32* @y.4
  %48 = sub i32 %46, 1
  %49 = mul i32 %46, %48
  %50 = urem i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %51, %52
  br i1 %53, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %54

54:                                               ; preds = %originalBBpart24
  %55 = load i32, i32* @x.3
  %56 = load i32, i32* @y.4
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %54, %originalBB6alteredBB
  %63 = load i32, i32* @inVal0
  %64 = icmp sgt i32 %63, 1
  %65 = load i32, i32* @x.3
  %66 = load i32, i32* @y.4
  %67 = sub i32 %65, 1
  %68 = mul i32 %65, %67
  %69 = urem i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %70, %71
  br i1 %72, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %64, label %90, label %73

73:                                               ; preds = %originalBBpart28
  %74 = load i32, i32* @x.3
  %75 = load i32, i32* @y.4
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %73, %originalBB10alteredBB
  store i32 49, i32* %collatzVar
  %82 = load i32, i32* @x.3
  %83 = load i32, i32* @y.4
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %90

90:                                               ; preds = %originalBBpart212, %originalBBpart28
  %91 = load i32, i32* @x.3
  %92 = load i32, i32* @y.4
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %90, %originalBB14alteredBB
  %99 = load i8**, i8*** @inVal1
  %100 = getelementptr inbounds i8*, i8** %99, i64 1
  %101 = load i8*, i8** %100
  %controle = call i32 @controle(i8* %101, i32 0)
  store i32 %controle, i32* %collatzVar
  %102 = load i32, i32* @x.3
  %103 = load i32, i32* @y.4
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %110

110:                                              ; preds = %originalBBpart262, %originalBBpart256, %originalBBpart216
  %111 = load i32, i32* @x.3
  %112 = load i32, i32* @y.4
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %110, %originalBB18alteredBB
  %119 = load i32, i32* %collatzVar
  %120 = icmp sgt i32 %119, 1
  %121 = load i32, i32* @x.3
  %122 = load i32, i32* @y.4
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %120, label %129, label %245

129:                                              ; preds = %originalBBpart220
  %130 = load i32, i32* @x.3
  %131 = load i32, i32* @y.4
  %132 = sub i32 %130, 1
  %133 = mul i32 %130, %132
  %134 = urem i32 %133, 2
  %135 = icmp eq i32 %134, 0
  %136 = icmp slt i32 %131, 10
  %137 = or i1 %135, %136
  br i1 %137, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %129, %originalBB22alteredBB
  %138 = load i32, i32* %collatzVar
  %139 = srem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = load i32, i32* @x.3
  %142 = load i32, i32* @y.4
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBBpart231, label %originalBB22alteredBB

originalBBpart231:                                ; preds = %originalBB22
  br i1 %140, label %149, label %168

149:                                              ; preds = %originalBBpart231
  %150 = load i32, i32* @x.3
  %151 = load i32, i32* @y.4
  %152 = sub i32 %150, 1
  %153 = mul i32 %150, %152
  %154 = urem i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %155, %156
  br i1 %157, label %originalBB33, label %originalBB33alteredBB

originalBB33:                                     ; preds = %149, %originalBB33alteredBB
  %158 = load i32, i32* %collatzVar
  %159 = sdiv i32 %158, 2
  store i32 %159, i32* %collatzVar
  %160 = load i32, i32* @x.3
  %161 = load i32, i32* @y.4
  %162 = sub i32 %160, 1
  %163 = mul i32 %160, %162
  %164 = urem i32 %163, 2
  %165 = icmp eq i32 %164, 0
  %166 = icmp slt i32 %161, 10
  %167 = or i1 %165, %166
  br i1 %167, label %originalBBpart237, label %originalBB33alteredBB

originalBBpart237:                                ; preds = %originalBB33
  br label %188

168:                                              ; preds = %originalBBpart231
  %169 = load i32, i32* @x.3
  %170 = load i32, i32* @y.4
  %171 = sub i32 %169, 1
  %172 = mul i32 %169, %171
  %173 = urem i32 %172, 2
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %174, %175
  br i1 %176, label %originalBB39, label %originalBB39alteredBB

originalBB39:                                     ; preds = %168, %originalBB39alteredBB
  %177 = load i32, i32* %collatzVar
  %178 = mul i32 %177, 3
  %179 = add i32 %178, 1
  store i32 %179, i32* %collatzVar
  %180 = load i32, i32* @x.3
  %181 = load i32, i32* @y.4
  %182 = sub i32 %180, 1
  %183 = mul i32 %180, %182
  %184 = urem i32 %183, 2
  %185 = icmp eq i32 %184, 0
  %186 = icmp slt i32 %181, 10
  %187 = or i1 %185, %186
  br i1 %187, label %originalBBpart246, label %originalBB39alteredBB

originalBBpart246:                                ; preds = %originalBB39
  br label %188

188:                                              ; preds = %originalBBpart246, %originalBBpart237
  %189 = load i32, i32* @x.3
  %190 = load i32, i32* @y.4
  %191 = sub i32 %189, 1
  %192 = mul i32 %189, %191
  %193 = urem i32 %192, 2
  %194 = icmp eq i32 %193, 0
  %195 = icmp slt i32 %190, 10
  %196 = or i1 %194, %195
  br i1 %196, label %originalBB48, label %originalBB48alteredBB

originalBB48:                                     ; preds = %188, %originalBB48alteredBB
  %197 = load i32, i32* %collatzVar
  %198 = sub i32 %28, %197
  %199 = icmp sgt i32 %198, -2
  %200 = load i32, i32* @x.3
  %201 = load i32, i32* @y.4
  %202 = sub i32 %200, 1
  %203 = mul i32 %200, %202
  %204 = urem i32 %203, 2
  %205 = icmp eq i32 %204, 0
  %206 = icmp slt i32 %201, 10
  %207 = or i1 %205, %206
  br i1 %207, label %originalBBpart256, label %originalBB48alteredBB

originalBBpart256:                                ; preds = %originalBB48
  br i1 %199, label %208, label %110

208:                                              ; preds = %originalBBpart256
  %209 = load i32, i32* @x.3
  %210 = load i32, i32* @y.4
  %211 = sub i32 %209, 1
  %212 = mul i32 %209, %211
  %213 = urem i32 %212, 2
  %214 = icmp eq i32 %213, 0
  %215 = icmp slt i32 %210, 10
  %216 = or i1 %214, %215
  br i1 %216, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %208, %originalBB58alteredBB
  %217 = load i32, i32* %collatzVar
  %218 = add i32 %28, %217
  %219 = icmp slt i32 %218, 2
  %220 = load i32, i32* @x.3
  %221 = load i32, i32* @y.4
  %222 = sub i32 %220, 1
  %223 = mul i32 %220, %222
  %224 = urem i32 %223, 2
  %225 = icmp eq i32 %224, 0
  %226 = icmp slt i32 %221, 10
  %227 = or i1 %225, %226
  br i1 %227, label %originalBBpart262, label %originalBB58alteredBB

originalBBpart262:                                ; preds = %originalBB58
  br i1 %219, label %228, label %110

228:                                              ; preds = %originalBBpart262
  %229 = load i32, i32* @x.3
  %230 = load i32, i32* @y.4
  %231 = sub i32 %229, 1
  %232 = mul i32 %229, %231
  %233 = urem i32 %232, 2
  %234 = icmp eq i32 %233, 0
  %235 = icmp slt i32 %230, 10
  %236 = or i1 %234, %235
  br i1 %236, label %originalBB64, label %originalBB64alteredBB

originalBB64:                                     ; preds = %228, %originalBB64alteredBB
  store i32 1, i32* %14, align 4, !dbg !381
  %237 = load i32, i32* @x.3
  %238 = load i32, i32* @y.4
  %239 = sub i32 %237, 1
  %240 = mul i32 %237, %239
  %241 = urem i32 %240, 2
  %242 = icmp eq i32 %241, 0
  %243 = icmp slt i32 %238, 10
  %244 = or i1 %242, %243
  br i1 %244, label %originalBBpart266, label %originalBB64alteredBB

originalBBpart266:                                ; preds = %originalBB64
  br label %245, !dbg !382

245:                                              ; preds = %originalBBpart266, %originalBBpart220
  %246 = load i32, i32* @x.3
  %247 = load i32, i32* @y.4
  %248 = sub i32 %246, 1
  %249 = mul i32 %246, %248
  %250 = urem i32 %249, 2
  %251 = icmp eq i32 %250, 0
  %252 = icmp slt i32 %247, 10
  %253 = or i1 %251, %252
  br i1 %253, label %originalBB68, label %originalBB68alteredBB

originalBB68:                                     ; preds = %245, %originalBB68alteredBB
  %254 = load i32, i32* %14, align 4, !dbg !383
  %255 = and i32 %254, 31, !dbg !385
  %256 = icmp ne i32 %255, 0, !dbg !385
  %257 = load i32, i32* @x.3
  %258 = load i32, i32* @y.4
  %259 = sub i32 %257, 1
  %260 = mul i32 %257, %259
  %261 = urem i32 %260, 2
  %262 = icmp eq i32 %261, 0
  %263 = icmp slt i32 %258, 10
  %264 = or i1 %262, %263
  br i1 %264, label %originalBBpart277, label %originalBB68alteredBB

originalBBpart277:                                ; preds = %originalBB68
  br i1 %256, label %265, label %706, !dbg !386

265:                                              ; preds = %originalBBpart277
  call void @llvm.dbg.declare(metadata %struct.utsname* %15, metadata !387, metadata !DIExpression()), !dbg !401
  %266 = load i32, i32* @x.3
  %267 = load i32, i32* @y.4
  %268 = sub i32 %266, 1
  %269 = mul i32 %266, %268
  %270 = urem i32 %269, 2
  %271 = icmp eq i32 %270, 0
  %272 = icmp slt i32 %267, 10
  %273 = or i1 %271, %272
  br i1 %273, label %originalBB79, label %originalBB79alteredBB

originalBB79:                                     ; preds = %265, %originalBB79alteredBB
  %274 = call i32 @uname(%struct.utsname* %15) #10, !dbg !402
  %275 = load i32, i32* @x.3
  %276 = load i32, i32* @y.4
  %277 = sub i32 %275, 1
  %278 = mul i32 %275, %277
  %279 = urem i32 %278, 2
  %280 = icmp eq i32 %279, 0
  %281 = icmp slt i32 %276, 10
  %282 = or i1 %280, %281
  br i1 %282, label %originalBBpart281, label %originalBB79alteredBB

originalBBpart281:                                ; preds = %originalBB79
  br label %283, !dbg !404

283:                                              ; preds = %originalBBpart281
  %284 = load i32, i32* @x.3
  %285 = load i32, i32* @y.4
  %286 = sub i32 %284, 1
  %287 = mul i32 %284, %286
  %288 = urem i32 %287, 2
  %289 = icmp eq i32 %288, 0
  %290 = icmp slt i32 %285, 10
  %291 = or i1 %289, %290
  br i1 %291, label %originalBB83, label %originalBB83alteredBB

originalBB83:                                     ; preds = %283, %originalBB83alteredBB
  %collatzVar5 = alloca i32
  %292 = load i32, i32* @x.3
  %293 = load i32, i32* @y.4
  %294 = sub i32 %292, 1
  %295 = mul i32 %292, %294
  %296 = urem i32 %295, 2
  %297 = icmp eq i32 %296, 0
  %298 = icmp slt i32 %293, 10
  %299 = or i1 %297, %298
  br i1 %299, label %originalBBpart285, label %originalBB83alteredBB

originalBBpart285:                                ; preds = %originalBB83
  br label %300

300:                                              ; preds = %originalBBpart285
  %301 = load i32, i32* @x.3
  %302 = load i32, i32* @y.4
  %303 = sub i32 %301, 1
  %304 = mul i32 %301, %303
  %305 = urem i32 %304, 2
  %306 = icmp eq i32 %305, 0
  %307 = icmp slt i32 %302, 10
  %308 = or i1 %306, %307
  br i1 %308, label %originalBB87, label %originalBB87alteredBB

originalBB87:                                     ; preds = %300, %originalBB87alteredBB
  %309 = load i32, i32* @inVal0
  %310 = icmp sgt i32 %309, 1
  %311 = load i32, i32* @x.3
  %312 = load i32, i32* @y.4
  %313 = sub i32 %311, 1
  %314 = mul i32 %311, %313
  %315 = urem i32 %314, 2
  %316 = icmp eq i32 %315, 0
  %317 = icmp slt i32 %312, 10
  %318 = or i1 %316, %317
  br i1 %318, label %originalBBpart289, label %originalBB87alteredBB

originalBBpart289:                                ; preds = %originalBB87
  br i1 %310, label %336, label %319

319:                                              ; preds = %originalBBpart289
  %320 = load i32, i32* @x.3
  %321 = load i32, i32* @y.4
  %322 = sub i32 %320, 1
  %323 = mul i32 %320, %322
  %324 = urem i32 %323, 2
  %325 = icmp eq i32 %324, 0
  %326 = icmp slt i32 %321, 10
  %327 = or i1 %325, %326
  br i1 %327, label %originalBB91, label %originalBB91alteredBB

originalBB91:                                     ; preds = %319, %originalBB91alteredBB
  store i32 28, i32* %collatzVar5
  %328 = load i32, i32* @x.3
  %329 = load i32, i32* @y.4
  %330 = sub i32 %328, 1
  %331 = mul i32 %328, %330
  %332 = urem i32 %331, 2
  %333 = icmp eq i32 %332, 0
  %334 = icmp slt i32 %329, 10
  %335 = or i1 %333, %334
  br i1 %335, label %originalBBpart293, label %originalBB91alteredBB

originalBBpart293:                                ; preds = %originalBB91
  br label %336

336:                                              ; preds = %originalBBpart293, %originalBBpart289
  %337 = load i32, i32* @x.3
  %338 = load i32, i32* @y.4
  %339 = sub i32 %337, 1
  %340 = mul i32 %337, %339
  %341 = urem i32 %340, 2
  %342 = icmp eq i32 %341, 0
  %343 = icmp slt i32 %338, 10
  %344 = or i1 %342, %343
  br i1 %344, label %originalBB95, label %originalBB95alteredBB

originalBB95:                                     ; preds = %336, %originalBB95alteredBB
  %345 = load i8**, i8*** @inVal1
  %346 = getelementptr inbounds i8*, i8** %345, i64 1
  %347 = load i8*, i8** %346
  %controle6 = call i32 @controle(i8* %347, i32 -1)
  store i32 %controle6, i32* %collatzVar5
  %348 = load i32, i32* @x.3
  %349 = load i32, i32* @y.4
  %350 = sub i32 %348, 1
  %351 = mul i32 %348, %350
  %352 = urem i32 %351, 2
  %353 = icmp eq i32 %352, 0
  %354 = icmp slt i32 %349, 10
  %355 = or i1 %353, %354
  br i1 %355, label %originalBBpart297, label %originalBB95alteredBB

originalBBpart297:                                ; preds = %originalBB95
  br label %356

356:                                              ; preds = %originalBBpart2157, %originalBBpart2143, %originalBBpart297
  %357 = load i32, i32* @x.3
  %358 = load i32, i32* @y.4
  %359 = sub i32 %357, 1
  %360 = mul i32 %357, %359
  %361 = urem i32 %360, 2
  %362 = icmp eq i32 %361, 0
  %363 = icmp slt i32 %358, 10
  %364 = or i1 %362, %363
  br i1 %364, label %originalBB99, label %originalBB99alteredBB

originalBB99:                                     ; preds = %356, %originalBB99alteredBB
  %365 = load i32, i32* %collatzVar5
  %366 = icmp sgt i32 %365, 1
  %367 = load i32, i32* @x.3
  %368 = load i32, i32* @y.4
  %369 = sub i32 %367, 1
  %370 = mul i32 %367, %369
  %371 = urem i32 %370, 2
  %372 = icmp eq i32 %371, 0
  %373 = icmp slt i32 %368, 10
  %374 = or i1 %372, %373
  br i1 %374, label %originalBBpart2101, label %originalBB99alteredBB

originalBBpart2101:                               ; preds = %originalBB99
  br i1 %366, label %375, label %494

375:                                              ; preds = %originalBBpart2101
  %376 = load i32, i32* @x.3
  %377 = load i32, i32* @y.4
  %378 = sub i32 %376, 1
  %379 = mul i32 %376, %378
  %380 = urem i32 %379, 2
  %381 = icmp eq i32 %380, 0
  %382 = icmp slt i32 %377, 10
  %383 = or i1 %381, %382
  br i1 %383, label %originalBB103, label %originalBB103alteredBB

originalBB103:                                    ; preds = %375, %originalBB103alteredBB
  %384 = load i32, i32* %collatzVar5
  %385 = srem i32 %384, 2
  %386 = icmp eq i32 %385, 0
  %387 = load i32, i32* @x.3
  %388 = load i32, i32* @y.4
  %389 = sub i32 %387, 1
  %390 = mul i32 %387, %389
  %391 = urem i32 %390, 2
  %392 = icmp eq i32 %391, 0
  %393 = icmp slt i32 %388, 10
  %394 = or i1 %392, %393
  br i1 %394, label %originalBBpart2111, label %originalBB103alteredBB

originalBBpart2111:                               ; preds = %originalBB103
  br i1 %386, label %395, label %414

395:                                              ; preds = %originalBBpart2111
  %396 = load i32, i32* @x.3
  %397 = load i32, i32* @y.4
  %398 = sub i32 %396, 1
  %399 = mul i32 %396, %398
  %400 = urem i32 %399, 2
  %401 = icmp eq i32 %400, 0
  %402 = icmp slt i32 %397, 10
  %403 = or i1 %401, %402
  br i1 %403, label %originalBB113, label %originalBB113alteredBB

originalBB113:                                    ; preds = %395, %originalBB113alteredBB
  %404 = load i32, i32* %collatzVar5
  %405 = sdiv i32 %404, 2
  store i32 %405, i32* %collatzVar5
  %406 = load i32, i32* @x.3
  %407 = load i32, i32* @y.4
  %408 = sub i32 %406, 1
  %409 = mul i32 %406, %408
  %410 = urem i32 %409, 2
  %411 = icmp eq i32 %410, 0
  %412 = icmp slt i32 %407, 10
  %413 = or i1 %411, %412
  br i1 %413, label %originalBBpart2121, label %originalBB113alteredBB

originalBBpart2121:                               ; preds = %originalBB113
  br label %434

414:                                              ; preds = %originalBBpart2111
  %415 = load i32, i32* @x.3
  %416 = load i32, i32* @y.4
  %417 = sub i32 %415, 1
  %418 = mul i32 %415, %417
  %419 = urem i32 %418, 2
  %420 = icmp eq i32 %419, 0
  %421 = icmp slt i32 %416, 10
  %422 = or i1 %420, %421
  br i1 %422, label %originalBB123, label %originalBB123alteredBB

originalBB123:                                    ; preds = %414, %originalBB123alteredBB
  %423 = load i32, i32* %collatzVar5
  %424 = mul i32 %423, 3
  %425 = add i32 %424, 1
  store i32 %425, i32* %collatzVar5
  %426 = load i32, i32* @x.3
  %427 = load i32, i32* @y.4
  %428 = sub i32 %426, 1
  %429 = mul i32 %426, %428
  %430 = urem i32 %429, 2
  %431 = icmp eq i32 %430, 0
  %432 = icmp slt i32 %427, 10
  %433 = or i1 %431, %432
  br i1 %433, label %originalBBpart2135, label %originalBB123alteredBB

originalBBpart2135:                               ; preds = %originalBB123
  br label %434

434:                                              ; preds = %originalBBpart2135, %originalBBpart2121
  %435 = load i32, i32* @x.3
  %436 = load i32, i32* @y.4
  %437 = sub i32 %435, 1
  %438 = mul i32 %435, %437
  %439 = urem i32 %438, 2
  %440 = icmp eq i32 %439, 0
  %441 = icmp slt i32 %436, 10
  %442 = or i1 %440, %441
  br i1 %442, label %originalBB137, label %originalBB137alteredBB

originalBB137:                                    ; preds = %434, %originalBB137alteredBB
  %443 = load i32, i32* %collatzVar5
  %444 = sub i32 %274, %443
  %445 = icmp sgt i32 %444, -3
  %446 = load i32, i32* @x.3
  %447 = load i32, i32* @y.4
  %448 = sub i32 %446, 1
  %449 = mul i32 %446, %448
  %450 = urem i32 %449, 2
  %451 = icmp eq i32 %450, 0
  %452 = icmp slt i32 %447, 10
  %453 = or i1 %451, %452
  br i1 %453, label %originalBBpart2143, label %originalBB137alteredBB

originalBBpart2143:                               ; preds = %originalBB137
  br i1 %445, label %454, label %356

454:                                              ; preds = %originalBBpart2143
  %455 = load i32, i32* @x.3
  %456 = load i32, i32* @y.4
  %457 = sub i32 %455, 1
  %458 = mul i32 %455, %457
  %459 = urem i32 %458, 2
  %460 = icmp eq i32 %459, 0
  %461 = icmp slt i32 %456, 10
  %462 = or i1 %460, %461
  br i1 %462, label %originalBB145, label %originalBB145alteredBB

originalBB145:                                    ; preds = %454, %originalBB145alteredBB
  %463 = load i32, i32* %collatzVar5
  %464 = add i32 %274, %463
  %465 = icmp slt i32 %464, 1
  %466 = load i32, i32* @x.3
  %467 = load i32, i32* @y.4
  %468 = sub i32 %466, 1
  %469 = mul i32 %466, %468
  %470 = urem i32 %469, 2
  %471 = icmp eq i32 %470, 0
  %472 = icmp slt i32 %467, 10
  %473 = or i1 %471, %472
  br i1 %473, label %originalBBpart2157, label %originalBB145alteredBB

originalBBpart2157:                               ; preds = %originalBB145
  br i1 %465, label %474, label %356

474:                                              ; preds = %originalBBpart2157
  %475 = load i32, i32* @x.3
  %476 = load i32, i32* @y.4
  %477 = sub i32 %475, 1
  %478 = mul i32 %475, %477
  %479 = urem i32 %478, 2
  %480 = icmp eq i32 %479, 0
  %481 = icmp slt i32 %476, 10
  %482 = or i1 %480, %481
  br i1 %482, label %originalBB159, label %originalBB159alteredBB

originalBB159:                                    ; preds = %474, %originalBB159alteredBB
  %483 = call i32* @__errno_location() #14, !dbg !405
  %484 = load i32, i32* %483, align 4, !dbg !405
  %485 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0)) #10, !dbg !405
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %484, i8* %485), !dbg !405
  %486 = load i32, i32* @x.3
  %487 = load i32, i32* @y.4
  %488 = sub i32 %486, 1
  %489 = mul i32 %486, %488
  %490 = urem i32 %489, 2
  %491 = icmp eq i32 %490, 0
  %492 = icmp slt i32 %487, 10
  %493 = or i1 %491, %492
  br i1 %493, label %originalBBpart2161, label %originalBB159alteredBB

originalBBpart2161:                               ; preds = %originalBB159
  unreachable, !dbg !405

494:                                              ; preds = %originalBBpart2101
  %495 = load i32, i32* @x.3
  %496 = load i32, i32* @y.4
  %497 = sub i32 %495, 1
  %498 = mul i32 %495, %497
  %499 = urem i32 %498, 2
  %500 = icmp eq i32 %499, 0
  %501 = icmp slt i32 %496, 10
  %502 = or i1 %500, %501
  br i1 %502, label %originalBB163, label %originalBB163alteredBB

originalBB163:                                    ; preds = %494, %originalBB163alteredBB
  %503 = load i32, i32* %14, align 4, !dbg !406
  %504 = and i32 %503, 1, !dbg !408
  %505 = icmp ne i32 %504, 0, !dbg !408
  %506 = load i32, i32* @x.3
  %507 = load i32, i32* @y.4
  %508 = sub i32 %506, 1
  %509 = mul i32 %506, %508
  %510 = urem i32 %509, 2
  %511 = icmp eq i32 %510, 0
  %512 = icmp slt i32 %507, 10
  %513 = or i1 %511, %512
  br i1 %513, label %originalBBpart2172, label %originalBB163alteredBB

originalBBpart2172:                               ; preds = %originalBB163
  br i1 %505, label %514, label %533, !dbg !409

514:                                              ; preds = %originalBBpart2172
  %515 = load i32, i32* @x.3
  %516 = load i32, i32* @y.4
  %517 = sub i32 %515, 1
  %518 = mul i32 %515, %517
  %519 = urem i32 %518, 2
  %520 = icmp eq i32 %519, 0
  %521 = icmp slt i32 %516, 10
  %522 = or i1 %520, %521
  br i1 %522, label %originalBB174, label %originalBB174alteredBB

originalBB174:                                    ; preds = %514, %originalBB174alteredBB
  %523 = getelementptr inbounds %struct.utsname, %struct.utsname* %15, i32 0, i32 0, !dbg !410
  %524 = getelementptr inbounds [65 x i8], [65 x i8]* %523, i64 0, i64 0, !dbg !411
  call void @print_element(i8* %524), !dbg !412
  %525 = load i32, i32* @x.3
  %526 = load i32, i32* @y.4
  %527 = sub i32 %525, 1
  %528 = mul i32 %525, %527
  %529 = urem i32 %528, 2
  %530 = icmp eq i32 %529, 0
  %531 = icmp slt i32 %526, 10
  %532 = or i1 %530, %531
  br i1 %532, label %originalBBpart2176, label %originalBB174alteredBB

originalBBpart2176:                               ; preds = %originalBB174
  br label %533, !dbg !412

533:                                              ; preds = %originalBBpart2176, %originalBBpart2172
  %534 = load i32, i32* @x.3
  %535 = load i32, i32* @y.4
  %536 = sub i32 %534, 1
  %537 = mul i32 %534, %536
  %538 = urem i32 %537, 2
  %539 = icmp eq i32 %538, 0
  %540 = icmp slt i32 %535, 10
  %541 = or i1 %539, %540
  br i1 %541, label %originalBB178, label %originalBB178alteredBB

originalBB178:                                    ; preds = %533, %originalBB178alteredBB
  %542 = load i32, i32* %14, align 4, !dbg !413
  %543 = and i32 %542, 2, !dbg !415
  %544 = icmp ne i32 %543, 0, !dbg !415
  %545 = load i32, i32* @x.3
  %546 = load i32, i32* @y.4
  %547 = sub i32 %545, 1
  %548 = mul i32 %545, %547
  %549 = urem i32 %548, 2
  %550 = icmp eq i32 %549, 0
  %551 = icmp slt i32 %546, 10
  %552 = or i1 %550, %551
  br i1 %552, label %originalBBpart2189, label %originalBB178alteredBB

originalBBpart2189:                               ; preds = %originalBB178
  br i1 %544, label %553, label %572, !dbg !416

553:                                              ; preds = %originalBBpart2189
  %554 = load i32, i32* @x.3
  %555 = load i32, i32* @y.4
  %556 = sub i32 %554, 1
  %557 = mul i32 %554, %556
  %558 = urem i32 %557, 2
  %559 = icmp eq i32 %558, 0
  %560 = icmp slt i32 %555, 10
  %561 = or i1 %559, %560
  br i1 %561, label %originalBB191, label %originalBB191alteredBB

originalBB191:                                    ; preds = %553, %originalBB191alteredBB
  %562 = getelementptr inbounds %struct.utsname, %struct.utsname* %15, i32 0, i32 1, !dbg !417
  %563 = getelementptr inbounds [65 x i8], [65 x i8]* %562, i64 0, i64 0, !dbg !418
  call void @print_element(i8* %563), !dbg !419
  %564 = load i32, i32* @x.3
  %565 = load i32, i32* @y.4
  %566 = sub i32 %564, 1
  %567 = mul i32 %564, %566
  %568 = urem i32 %567, 2
  %569 = icmp eq i32 %568, 0
  %570 = icmp slt i32 %565, 10
  %571 = or i1 %569, %570
  br i1 %571, label %originalBBpart2193, label %originalBB191alteredBB

originalBBpart2193:                               ; preds = %originalBB191
  br label %572, !dbg !419

572:                                              ; preds = %originalBBpart2193, %originalBBpart2189
  %573 = load i32, i32* @x.3
  %574 = load i32, i32* @y.4
  %575 = sub i32 %573, 1
  %576 = mul i32 %573, %575
  %577 = urem i32 %576, 2
  %578 = icmp eq i32 %577, 0
  %579 = icmp slt i32 %574, 10
  %580 = or i1 %578, %579
  br i1 %580, label %originalBB195, label %originalBB195alteredBB

originalBB195:                                    ; preds = %572, %originalBB195alteredBB
  %581 = load i32, i32* %14, align 4, !dbg !420
  %582 = and i32 %581, 4, !dbg !422
  %583 = icmp ne i32 %582, 0, !dbg !422
  %584 = load i32, i32* @x.3
  %585 = load i32, i32* @y.4
  %586 = sub i32 %584, 1
  %587 = mul i32 %584, %586
  %588 = urem i32 %587, 2
  %589 = icmp eq i32 %588, 0
  %590 = icmp slt i32 %585, 10
  %591 = or i1 %589, %590
  br i1 %591, label %originalBBpart2200, label %originalBB195alteredBB

originalBBpart2200:                               ; preds = %originalBB195
  br i1 %583, label %592, label %611, !dbg !423

592:                                              ; preds = %originalBBpart2200
  %593 = load i32, i32* @x.3
  %594 = load i32, i32* @y.4
  %595 = sub i32 %593, 1
  %596 = mul i32 %593, %595
  %597 = urem i32 %596, 2
  %598 = icmp eq i32 %597, 0
  %599 = icmp slt i32 %594, 10
  %600 = or i1 %598, %599
  br i1 %600, label %originalBB202, label %originalBB202alteredBB

originalBB202:                                    ; preds = %592, %originalBB202alteredBB
  %601 = getelementptr inbounds %struct.utsname, %struct.utsname* %15, i32 0, i32 2, !dbg !424
  %602 = getelementptr inbounds [65 x i8], [65 x i8]* %601, i64 0, i64 0, !dbg !425
  call void @print_element(i8* %602), !dbg !426
  %603 = load i32, i32* @x.3
  %604 = load i32, i32* @y.4
  %605 = sub i32 %603, 1
  %606 = mul i32 %603, %605
  %607 = urem i32 %606, 2
  %608 = icmp eq i32 %607, 0
  %609 = icmp slt i32 %604, 10
  %610 = or i1 %608, %609
  br i1 %610, label %originalBBpart2204, label %originalBB202alteredBB

originalBBpart2204:                               ; preds = %originalBB202
  br label %611, !dbg !426

611:                                              ; preds = %originalBBpart2204, %originalBBpart2200
  %612 = load i32, i32* @x.3
  %613 = load i32, i32* @y.4
  %614 = sub i32 %612, 1
  %615 = mul i32 %612, %614
  %616 = urem i32 %615, 2
  %617 = icmp eq i32 %616, 0
  %618 = icmp slt i32 %613, 10
  %619 = or i1 %617, %618
  br i1 %619, label %originalBB206, label %originalBB206alteredBB

originalBB206:                                    ; preds = %611, %originalBB206alteredBB
  %620 = load i32, i32* %14, align 4, !dbg !427
  %621 = and i32 %620, 8, !dbg !429
  %622 = icmp ne i32 %621, 0, !dbg !429
  %623 = load i32, i32* @x.3
  %624 = load i32, i32* @y.4
  %625 = sub i32 %623, 1
  %626 = mul i32 %623, %625
  %627 = urem i32 %626, 2
  %628 = icmp eq i32 %627, 0
  %629 = icmp slt i32 %624, 10
  %630 = or i1 %628, %629
  br i1 %630, label %originalBBpart2216, label %originalBB206alteredBB

originalBBpart2216:                               ; preds = %originalBB206
  br i1 %622, label %631, label %650, !dbg !430

631:                                              ; preds = %originalBBpart2216
  %632 = load i32, i32* @x.3
  %633 = load i32, i32* @y.4
  %634 = sub i32 %632, 1
  %635 = mul i32 %632, %634
  %636 = urem i32 %635, 2
  %637 = icmp eq i32 %636, 0
  %638 = icmp slt i32 %633, 10
  %639 = or i1 %637, %638
  br i1 %639, label %originalBB218, label %originalBB218alteredBB

originalBB218:                                    ; preds = %631, %originalBB218alteredBB
  %640 = getelementptr inbounds %struct.utsname, %struct.utsname* %15, i32 0, i32 3, !dbg !431
  %641 = getelementptr inbounds [65 x i8], [65 x i8]* %640, i64 0, i64 0, !dbg !432
  call void @print_element(i8* %641), !dbg !433
  %642 = load i32, i32* @x.3
  %643 = load i32, i32* @y.4
  %644 = sub i32 %642, 1
  %645 = mul i32 %642, %644
  %646 = urem i32 %645, 2
  %647 = icmp eq i32 %646, 0
  %648 = icmp slt i32 %643, 10
  %649 = or i1 %647, %648
  br i1 %649, label %originalBBpart2220, label %originalBB218alteredBB

originalBBpart2220:                               ; preds = %originalBB218
  br label %650, !dbg !433

650:                                              ; preds = %originalBBpart2220, %originalBBpart2216
  %651 = load i32, i32* @x.3
  %652 = load i32, i32* @y.4
  %653 = sub i32 %651, 1
  %654 = mul i32 %651, %653
  %655 = urem i32 %654, 2
  %656 = icmp eq i32 %655, 0
  %657 = icmp slt i32 %652, 10
  %658 = or i1 %656, %657
  br i1 %658, label %originalBB222, label %originalBB222alteredBB

originalBB222:                                    ; preds = %650, %originalBB222alteredBB
  %659 = load i32, i32* %14, align 4, !dbg !434
  %660 = and i32 %659, 16, !dbg !436
  %661 = icmp ne i32 %660, 0, !dbg !436
  %662 = load i32, i32* @x.3
  %663 = load i32, i32* @y.4
  %664 = sub i32 %662, 1
  %665 = mul i32 %662, %664
  %666 = urem i32 %665, 2
  %667 = icmp eq i32 %666, 0
  %668 = icmp slt i32 %663, 10
  %669 = or i1 %667, %668
  br i1 %669, label %originalBBpart2227, label %originalBB222alteredBB

originalBBpart2227:                               ; preds = %originalBB222
  br i1 %661, label %670, label %689, !dbg !437

670:                                              ; preds = %originalBBpart2227
  %671 = load i32, i32* @x.3
  %672 = load i32, i32* @y.4
  %673 = sub i32 %671, 1
  %674 = mul i32 %671, %673
  %675 = urem i32 %674, 2
  %676 = icmp eq i32 %675, 0
  %677 = icmp slt i32 %672, 10
  %678 = or i1 %676, %677
  br i1 %678, label %originalBB229, label %originalBB229alteredBB

originalBB229:                                    ; preds = %670, %originalBB229alteredBB
  %679 = getelementptr inbounds %struct.utsname, %struct.utsname* %15, i32 0, i32 4, !dbg !438
  %680 = getelementptr inbounds [65 x i8], [65 x i8]* %679, i64 0, i64 0, !dbg !439
  call void @print_element(i8* %680), !dbg !440
  %681 = load i32, i32* @x.3
  %682 = load i32, i32* @y.4
  %683 = sub i32 %681, 1
  %684 = mul i32 %681, %683
  %685 = urem i32 %684, 2
  %686 = icmp eq i32 %685, 0
  %687 = icmp slt i32 %682, 10
  %688 = or i1 %686, %687
  br i1 %688, label %originalBBpart2231, label %originalBB229alteredBB

originalBBpart2231:                               ; preds = %originalBB229
  br label %689, !dbg !440

689:                                              ; preds = %originalBBpart2231, %originalBBpart2227
  %690 = load i32, i32* @x.3
  %691 = load i32, i32* @y.4
  %692 = sub i32 %690, 1
  %693 = mul i32 %690, %692
  %694 = urem i32 %693, 2
  %695 = icmp eq i32 %694, 0
  %696 = icmp slt i32 %691, 10
  %697 = or i1 %695, %696
  br i1 %697, label %originalBB233, label %originalBB233alteredBB

originalBB233:                                    ; preds = %689, %originalBB233alteredBB
  %698 = load i32, i32* @x.3
  %699 = load i32, i32* @y.4
  %700 = sub i32 %698, 1
  %701 = mul i32 %698, %700
  %702 = urem i32 %701, 2
  %703 = icmp eq i32 %702, 0
  %704 = icmp slt i32 %699, 10
  %705 = or i1 %703, %704
  br i1 %705, label %originalBBpart2235, label %originalBB233alteredBB

originalBBpart2235:                               ; preds = %originalBB233
  br label %706, !dbg !441

706:                                              ; preds = %originalBBpart2235, %originalBBpart277
  %707 = load i32, i32* @x.3
  %708 = load i32, i32* @y.4
  %709 = sub i32 %707, 1
  %710 = mul i32 %707, %709
  %711 = urem i32 %710, 2
  %712 = icmp eq i32 %711, 0
  %713 = icmp slt i32 %708, 10
  %714 = or i1 %712, %713
  br i1 %714, label %originalBB237, label %originalBB237alteredBB

originalBB237:                                    ; preds = %706, %originalBB237alteredBB
  %715 = load i32, i32* %14, align 4, !dbg !442
  %716 = and i32 %715, 32, !dbg !444
  %717 = icmp ne i32 %716, 0, !dbg !444
  %718 = load i32, i32* @x.3
  %719 = load i32, i32* @y.4
  %720 = sub i32 %718, 1
  %721 = mul i32 %718, %720
  %722 = urem i32 %721, 2
  %723 = icmp eq i32 %722, 0
  %724 = icmp slt i32 %719, 10
  %725 = or i1 %723, %724
  br i1 %725, label %originalBBpart2241, label %originalBB237alteredBB

originalBBpart2241:                               ; preds = %originalBB237
  br i1 %717, label %726, label %989, !dbg !445

726:                                              ; preds = %originalBBpart2241
  call void @llvm.dbg.declare(metadata i8** %16, metadata !446, metadata !DIExpression()), !dbg !448
  %727 = load i32, i32* @x.3
  %728 = load i32, i32* @y.4
  %729 = sub i32 %727, 1
  %730 = mul i32 %727, %729
  %731 = urem i32 %730, 2
  %732 = icmp eq i32 %731, 0
  %733 = icmp slt i32 %728, 10
  %734 = or i1 %732, %733
  br i1 %734, label %originalBB243, label %originalBB243alteredBB

originalBB243:                                    ; preds = %726, %originalBB243alteredBB
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @main.unknown, i64 0, i64 0), i8** %16, align 8, !dbg !448
  %735 = load i32, i32* %14, align 4, !dbg !449
  %736 = load i32, i32* @x.3
  %737 = load i32, i32* @y.4
  %738 = sub i32 %736, 1
  %739 = mul i32 %736, %738
  %740 = urem i32 %739, 2
  %741 = icmp eq i32 %740, 0
  %742 = icmp slt i32 %737, 10
  %743 = or i1 %741, %742
  br i1 %743, label %originalBBpart2245, label %originalBB243alteredBB

originalBBpart2245:                               ; preds = %originalBB243
  br label %744, !dbg !451

744:                                              ; preds = %originalBBpart2245
  %745 = load i32, i32* @x.3
  %746 = load i32, i32* @y.4
  %747 = sub i32 %745, 1
  %748 = mul i32 %745, %747
  %749 = urem i32 %748, 2
  %750 = icmp eq i32 %749, 0
  %751 = icmp slt i32 %746, 10
  %752 = or i1 %750, %751
  br i1 %752, label %originalBB247, label %originalBB247alteredBB

originalBB247:                                    ; preds = %744, %originalBB247alteredBB
  %collatzVar1 = alloca i32
  %753 = load i32, i32* @x.3
  %754 = load i32, i32* @y.4
  %755 = sub i32 %753, 1
  %756 = mul i32 %753, %755
  %757 = urem i32 %756, 2
  %758 = icmp eq i32 %757, 0
  %759 = icmp slt i32 %754, 10
  %760 = or i1 %758, %759
  br i1 %760, label %originalBBpart2249, label %originalBB247alteredBB

originalBBpart2249:                               ; preds = %originalBB247
  br label %761

761:                                              ; preds = %originalBBpart2249
  %762 = load i32, i32* @x.3
  %763 = load i32, i32* @y.4
  %764 = sub i32 %762, 1
  %765 = mul i32 %762, %764
  %766 = urem i32 %765, 2
  %767 = icmp eq i32 %766, 0
  %768 = icmp slt i32 %763, 10
  %769 = or i1 %767, %768
  br i1 %769, label %originalBB251, label %originalBB251alteredBB

originalBB251:                                    ; preds = %761, %originalBB251alteredBB
  %770 = load i32, i32* @inVal0
  %771 = icmp sgt i32 %770, 1
  %772 = load i32, i32* @x.3
  %773 = load i32, i32* @y.4
  %774 = sub i32 %772, 1
  %775 = mul i32 %772, %774
  %776 = urem i32 %775, 2
  %777 = icmp eq i32 %776, 0
  %778 = icmp slt i32 %773, 10
  %779 = or i1 %777, %778
  br i1 %779, label %originalBBpart2253, label %originalBB251alteredBB

originalBBpart2253:                               ; preds = %originalBB251
  br i1 %771, label %797, label %780

780:                                              ; preds = %originalBBpart2253
  %781 = load i32, i32* @x.3
  %782 = load i32, i32* @y.4
  %783 = sub i32 %781, 1
  %784 = mul i32 %781, %783
  %785 = urem i32 %784, 2
  %786 = icmp eq i32 %785, 0
  %787 = icmp slt i32 %782, 10
  %788 = or i1 %786, %787
  br i1 %788, label %originalBB255, label %originalBB255alteredBB

originalBB255:                                    ; preds = %780, %originalBB255alteredBB
  store i32 59, i32* %collatzVar1
  %789 = load i32, i32* @x.3
  %790 = load i32, i32* @y.4
  %791 = sub i32 %789, 1
  %792 = mul i32 %789, %791
  %793 = urem i32 %792, 2
  %794 = icmp eq i32 %793, 0
  %795 = icmp slt i32 %790, 10
  %796 = or i1 %794, %795
  br i1 %796, label %originalBBpart2257, label %originalBB255alteredBB

originalBBpart2257:                               ; preds = %originalBB255
  br label %797

797:                                              ; preds = %originalBBpart2257, %originalBBpart2253
  %798 = load i32, i32* @x.3
  %799 = load i32, i32* @y.4
  %800 = sub i32 %798, 1
  %801 = mul i32 %798, %800
  %802 = urem i32 %801, 2
  %803 = icmp eq i32 %802, 0
  %804 = icmp slt i32 %799, 10
  %805 = or i1 %803, %804
  br i1 %805, label %originalBB259, label %originalBB259alteredBB

originalBB259:                                    ; preds = %797, %originalBB259alteredBB
  %806 = load i8**, i8*** @inVal1
  %807 = getelementptr inbounds i8*, i8** %806, i64 1
  %808 = load i8*, i8** %807
  %controle2 = call i32 @controle(i8* %808, i32 -1)
  store i32 %controle2, i32* %collatzVar1
  %809 = load i32, i32* @x.3
  %810 = load i32, i32* @y.4
  %811 = sub i32 %809, 1
  %812 = mul i32 %809, %811
  %813 = urem i32 %812, 2
  %814 = icmp eq i32 %813, 0
  %815 = icmp slt i32 %810, 10
  %816 = or i1 %814, %815
  br i1 %816, label %originalBBpart2261, label %originalBB259alteredBB

originalBBpart2261:                               ; preds = %originalBB259
  br label %817

817:                                              ; preds = %originalBBpart2342, %originalBBpart2323, %originalBBpart2261
  %818 = load i32, i32* @x.3
  %819 = load i32, i32* @y.4
  %820 = sub i32 %818, 1
  %821 = mul i32 %818, %820
  %822 = urem i32 %821, 2
  %823 = icmp eq i32 %822, 0
  %824 = icmp slt i32 %819, 10
  %825 = or i1 %823, %824
  br i1 %825, label %originalBB263, label %originalBB263alteredBB

originalBB263:                                    ; preds = %817, %originalBB263alteredBB
  %826 = load i32, i32* %collatzVar1
  %827 = icmp sgt i32 %826, 1
  %828 = load i32, i32* @x.3
  %829 = load i32, i32* @y.4
  %830 = sub i32 %828, 1
  %831 = mul i32 %828, %830
  %832 = urem i32 %831, 2
  %833 = icmp eq i32 %832, 0
  %834 = icmp slt i32 %829, 10
  %835 = or i1 %833, %834
  br i1 %835, label %originalBBpart2265, label %originalBB263alteredBB

originalBBpart2265:                               ; preds = %originalBB263
  br i1 %827, label %836, label %954

836:                                              ; preds = %originalBBpart2265
  %837 = load i32, i32* @x.3
  %838 = load i32, i32* @y.4
  %839 = sub i32 %837, 1
  %840 = mul i32 %837, %839
  %841 = urem i32 %840, 2
  %842 = icmp eq i32 %841, 0
  %843 = icmp slt i32 %838, 10
  %844 = or i1 %842, %843
  br i1 %844, label %originalBB267, label %originalBB267alteredBB

originalBB267:                                    ; preds = %836, %originalBB267alteredBB
  %845 = load i32, i32* %collatzVar1
  %846 = srem i32 %845, 2
  %847 = icmp eq i32 %846, 0
  %848 = load i32, i32* @x.3
  %849 = load i32, i32* @y.4
  %850 = sub i32 %848, 1
  %851 = mul i32 %848, %850
  %852 = urem i32 %851, 2
  %853 = icmp eq i32 %852, 0
  %854 = icmp slt i32 %849, 10
  %855 = or i1 %853, %854
  br i1 %855, label %originalBBpart2275, label %originalBB267alteredBB

originalBBpart2275:                               ; preds = %originalBB267
  br i1 %847, label %856, label %875

856:                                              ; preds = %originalBBpart2275
  %857 = load i32, i32* @x.3
  %858 = load i32, i32* @y.4
  %859 = sub i32 %857, 1
  %860 = mul i32 %857, %859
  %861 = urem i32 %860, 2
  %862 = icmp eq i32 %861, 0
  %863 = icmp slt i32 %858, 10
  %864 = or i1 %862, %863
  br i1 %864, label %originalBB277, label %originalBB277alteredBB

originalBB277:                                    ; preds = %856, %originalBB277alteredBB
  %865 = load i32, i32* %collatzVar1
  %866 = sdiv i32 %865, 2
  store i32 %866, i32* %collatzVar1
  %867 = load i32, i32* @x.3
  %868 = load i32, i32* @y.4
  %869 = sub i32 %867, 1
  %870 = mul i32 %867, %869
  %871 = urem i32 %870, 2
  %872 = icmp eq i32 %871, 0
  %873 = icmp slt i32 %868, 10
  %874 = or i1 %872, %873
  br i1 %874, label %originalBBpart2280, label %originalBB277alteredBB

originalBBpart2280:                               ; preds = %originalBB277
  br label %895

875:                                              ; preds = %originalBBpart2275
  %876 = load i32, i32* @x.3
  %877 = load i32, i32* @y.4
  %878 = sub i32 %876, 1
  %879 = mul i32 %876, %878
  %880 = urem i32 %879, 2
  %881 = icmp eq i32 %880, 0
  %882 = icmp slt i32 %877, 10
  %883 = or i1 %881, %882
  br i1 %883, label %originalBB282, label %originalBB282alteredBB

originalBB282:                                    ; preds = %875, %originalBB282alteredBB
  %884 = load i32, i32* %collatzVar1
  %885 = mul i32 %884, 3
  %886 = add i32 %885, 1
  store i32 %886, i32* %collatzVar1
  %887 = load i32, i32* @x.3
  %888 = load i32, i32* @y.4
  %889 = sub i32 %887, 1
  %890 = mul i32 %887, %889
  %891 = urem i32 %890, 2
  %892 = icmp eq i32 %891, 0
  %893 = icmp slt i32 %888, 10
  %894 = or i1 %892, %893
  br i1 %894, label %originalBBpart2301, label %originalBB282alteredBB

originalBBpart2301:                               ; preds = %originalBB282
  br label %895

895:                                              ; preds = %originalBBpart2301, %originalBBpart2280
  %896 = load i32, i32* @x.3
  %897 = load i32, i32* @y.4
  %898 = sub i32 %896, 1
  %899 = mul i32 %896, %898
  %900 = urem i32 %899, 2
  %901 = icmp eq i32 %900, 0
  %902 = icmp slt i32 %897, 10
  %903 = or i1 %901, %902
  br i1 %903, label %originalBB303, label %originalBB303alteredBB

originalBB303:                                    ; preds = %895, %originalBB303alteredBB
  %904 = load i32, i32* %collatzVar1
  %905 = sub i32 %735, %904
  %906 = icmp sgt i32 %905, -3
  %907 = load i32, i32* @x.3
  %908 = load i32, i32* @y.4
  %909 = sub i32 %907, 1
  %910 = mul i32 %907, %909
  %911 = urem i32 %910, 2
  %912 = icmp eq i32 %911, 0
  %913 = icmp slt i32 %908, 10
  %914 = or i1 %912, %913
  br i1 %914, label %originalBBpart2323, label %originalBB303alteredBB

originalBBpart2323:                               ; preds = %originalBB303
  br i1 %906, label %915, label %817

915:                                              ; preds = %originalBBpart2323
  %916 = load i32, i32* @x.3
  %917 = load i32, i32* @y.4
  %918 = sub i32 %916, 1
  %919 = mul i32 %916, %918
  %920 = urem i32 %919, 2
  %921 = icmp eq i32 %920, 0
  %922 = icmp slt i32 %917, 10
  %923 = or i1 %921, %922
  br i1 %923, label %originalBB325, label %originalBB325alteredBB

originalBB325:                                    ; preds = %915, %originalBB325alteredBB
  %924 = load i32, i32* %collatzVar1
  %925 = add i32 %735, %924
  %926 = icmp slt i32 %925, 1
  %927 = load i32, i32* @x.3
  %928 = load i32, i32* @y.4
  %929 = sub i32 %927, 1
  %930 = mul i32 %927, %929
  %931 = urem i32 %930, 2
  %932 = icmp eq i32 %931, 0
  %933 = icmp slt i32 %928, 10
  %934 = or i1 %932, %933
  br i1 %934, label %originalBBpart2342, label %originalBB325alteredBB

originalBBpart2342:                               ; preds = %originalBB325
  br i1 %926, label %935, label %817

935:                                              ; preds = %originalBBpart2342
  %936 = load i32, i32* @x.3
  %937 = load i32, i32* @y.4
  %938 = sub i32 %936, 1
  %939 = mul i32 %936, %938
  %940 = urem i32 %939, 2
  %941 = icmp eq i32 %940, 0
  %942 = icmp slt i32 %937, 10
  %943 = or i1 %941, %942
  br i1 %943, label %originalBB344, label %originalBB344alteredBB

originalBB344:                                    ; preds = %935, %originalBB344alteredBB
  %944 = load i8*, i8** %16, align 8, !dbg !452
  %945 = icmp eq i8* %944, getelementptr inbounds ([8 x i8], [8 x i8]* @main.unknown, i64 0, i64 0), !dbg !453
  %946 = load i32, i32* @x.3
  %947 = load i32, i32* @y.4
  %948 = sub i32 %946, 1
  %949 = mul i32 %946, %948
  %950 = urem i32 %949, 2
  %951 = icmp eq i32 %950, 0
  %952 = icmp slt i32 %947, 10
  %953 = or i1 %951, %952
  br i1 %953, label %originalBBpart2346, label %originalBB344alteredBB

originalBBpart2346:                               ; preds = %originalBB344
  br i1 %945, label %972, label %954, !dbg !454

954:                                              ; preds = %originalBBpart2346, %originalBBpart2265
  %955 = load i32, i32* @x.3
  %956 = load i32, i32* @y.4
  %957 = sub i32 %955, 1
  %958 = mul i32 %955, %957
  %959 = urem i32 %958, 2
  %960 = icmp eq i32 %959, 0
  %961 = icmp slt i32 %956, 10
  %962 = or i1 %960, %961
  br i1 %962, label %originalBB348, label %originalBB348alteredBB

originalBB348:                                    ; preds = %954, %originalBB348alteredBB
  %963 = load i8*, i8** %16, align 8, !dbg !455
  call void @print_element(i8* %963), !dbg !456
  %964 = load i32, i32* @x.3
  %965 = load i32, i32* @y.4
  %966 = sub i32 %964, 1
  %967 = mul i32 %964, %966
  %968 = urem i32 %967, 2
  %969 = icmp eq i32 %968, 0
  %970 = icmp slt i32 %965, 10
  %971 = or i1 %969, %970
  br i1 %971, label %originalBBpart2350, label %originalBB348alteredBB

originalBBpart2350:                               ; preds = %originalBB348
  br label %972, !dbg !456

972:                                              ; preds = %originalBBpart2350, %originalBBpart2346
  %973 = load i32, i32* @x.3
  %974 = load i32, i32* @y.4
  %975 = sub i32 %973, 1
  %976 = mul i32 %973, %975
  %977 = urem i32 %976, 2
  %978 = icmp eq i32 %977, 0
  %979 = icmp slt i32 %974, 10
  %980 = or i1 %978, %979
  br i1 %980, label %originalBB352, label %originalBB352alteredBB

originalBB352:                                    ; preds = %972, %originalBB352alteredBB
  %981 = load i32, i32* @x.3
  %982 = load i32, i32* @y.4
  %983 = sub i32 %981, 1
  %984 = mul i32 %981, %983
  %985 = urem i32 %984, 2
  %986 = icmp eq i32 %985, 0
  %987 = icmp slt i32 %982, 10
  %988 = or i1 %986, %987
  br i1 %988, label %originalBBpart2354, label %originalBB352alteredBB

originalBBpart2354:                               ; preds = %originalBB352
  br label %989, !dbg !457

989:                                              ; preds = %originalBBpart2354, %originalBBpart2241
  %990 = load i32, i32* @x.3
  %991 = load i32, i32* @y.4
  %992 = sub i32 %990, 1
  %993 = mul i32 %990, %992
  %994 = urem i32 %993, 2
  %995 = icmp eq i32 %994, 0
  %996 = icmp slt i32 %991, 10
  %997 = or i1 %995, %996
  br i1 %997, label %originalBB356, label %originalBB356alteredBB

originalBB356:                                    ; preds = %989, %originalBB356alteredBB
  %998 = load i32, i32* %14, align 4, !dbg !458
  %999 = and i32 %998, 64, !dbg !460
  %1000 = icmp ne i32 %999, 0, !dbg !460
  %1001 = load i32, i32* @x.3
  %1002 = load i32, i32* @y.4
  %1003 = sub i32 %1001, 1
  %1004 = mul i32 %1001, %1003
  %1005 = urem i32 %1004, 2
  %1006 = icmp eq i32 %1005, 0
  %1007 = icmp slt i32 %1002, 10
  %1008 = or i1 %1006, %1007
  br i1 %1008, label %originalBBpart2358, label %originalBB356alteredBB

originalBBpart2358:                               ; preds = %originalBB356
  br i1 %1000, label %1009, label %1272, !dbg !461

1009:                                             ; preds = %originalBBpart2358
  call void @llvm.dbg.declare(metadata i8** %17, metadata !462, metadata !DIExpression()), !dbg !464
  %1010 = load i32, i32* @x.3
  %1011 = load i32, i32* @y.4
  %1012 = sub i32 %1010, 1
  %1013 = mul i32 %1010, %1012
  %1014 = urem i32 %1013, 2
  %1015 = icmp eq i32 %1014, 0
  %1016 = icmp slt i32 %1011, 10
  %1017 = or i1 %1015, %1016
  br i1 %1017, label %originalBB360, label %originalBB360alteredBB

originalBB360:                                    ; preds = %1009, %originalBB360alteredBB
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @main.unknown, i64 0, i64 0), i8** %17, align 8, !dbg !464
  %1018 = load i32, i32* %14, align 4, !dbg !465
  %1019 = load i32, i32* @x.3
  %1020 = load i32, i32* @y.4
  %1021 = sub i32 %1019, 1
  %1022 = mul i32 %1019, %1021
  %1023 = urem i32 %1022, 2
  %1024 = icmp eq i32 %1023, 0
  %1025 = icmp slt i32 %1020, 10
  %1026 = or i1 %1024, %1025
  br i1 %1026, label %originalBBpart2362, label %originalBB360alteredBB

originalBBpart2362:                               ; preds = %originalBB360
  br label %1027, !dbg !467

1027:                                             ; preds = %originalBBpart2362
  %1028 = load i32, i32* @x.3
  %1029 = load i32, i32* @y.4
  %1030 = sub i32 %1028, 1
  %1031 = mul i32 %1028, %1030
  %1032 = urem i32 %1031, 2
  %1033 = icmp eq i32 %1032, 0
  %1034 = icmp slt i32 %1029, 10
  %1035 = or i1 %1033, %1034
  br i1 %1035, label %originalBB364, label %originalBB364alteredBB

originalBB364:                                    ; preds = %1027, %originalBB364alteredBB
  %collatzVar3 = alloca i32
  %1036 = load i32, i32* @x.3
  %1037 = load i32, i32* @y.4
  %1038 = sub i32 %1036, 1
  %1039 = mul i32 %1036, %1038
  %1040 = urem i32 %1039, 2
  %1041 = icmp eq i32 %1040, 0
  %1042 = icmp slt i32 %1037, 10
  %1043 = or i1 %1041, %1042
  br i1 %1043, label %originalBBpart2366, label %originalBB364alteredBB

originalBBpart2366:                               ; preds = %originalBB364
  br label %1044

1044:                                             ; preds = %originalBBpart2366
  %1045 = load i32, i32* @x.3
  %1046 = load i32, i32* @y.4
  %1047 = sub i32 %1045, 1
  %1048 = mul i32 %1045, %1047
  %1049 = urem i32 %1048, 2
  %1050 = icmp eq i32 %1049, 0
  %1051 = icmp slt i32 %1046, 10
  %1052 = or i1 %1050, %1051
  br i1 %1052, label %originalBB368, label %originalBB368alteredBB

originalBB368:                                    ; preds = %1044, %originalBB368alteredBB
  %1053 = load i32, i32* @inVal0
  %1054 = icmp sgt i32 %1053, 1
  %1055 = load i32, i32* @x.3
  %1056 = load i32, i32* @y.4
  %1057 = sub i32 %1055, 1
  %1058 = mul i32 %1055, %1057
  %1059 = urem i32 %1058, 2
  %1060 = icmp eq i32 %1059, 0
  %1061 = icmp slt i32 %1056, 10
  %1062 = or i1 %1060, %1061
  br i1 %1062, label %originalBBpart2370, label %originalBB368alteredBB

originalBBpart2370:                               ; preds = %originalBB368
  br i1 %1054, label %1080, label %1063

1063:                                             ; preds = %originalBBpart2370
  %1064 = load i32, i32* @x.3
  %1065 = load i32, i32* @y.4
  %1066 = sub i32 %1064, 1
  %1067 = mul i32 %1064, %1066
  %1068 = urem i32 %1067, 2
  %1069 = icmp eq i32 %1068, 0
  %1070 = icmp slt i32 %1065, 10
  %1071 = or i1 %1069, %1070
  br i1 %1071, label %originalBB372, label %originalBB372alteredBB

originalBB372:                                    ; preds = %1063, %originalBB372alteredBB
  store i32 89, i32* %collatzVar3
  %1072 = load i32, i32* @x.3
  %1073 = load i32, i32* @y.4
  %1074 = sub i32 %1072, 1
  %1075 = mul i32 %1072, %1074
  %1076 = urem i32 %1075, 2
  %1077 = icmp eq i32 %1076, 0
  %1078 = icmp slt i32 %1073, 10
  %1079 = or i1 %1077, %1078
  br i1 %1079, label %originalBBpart2374, label %originalBB372alteredBB

originalBBpart2374:                               ; preds = %originalBB372
  br label %1080

1080:                                             ; preds = %originalBBpart2374, %originalBBpart2370
  %1081 = load i32, i32* @x.3
  %1082 = load i32, i32* @y.4
  %1083 = sub i32 %1081, 1
  %1084 = mul i32 %1081, %1083
  %1085 = urem i32 %1084, 2
  %1086 = icmp eq i32 %1085, 0
  %1087 = icmp slt i32 %1082, 10
  %1088 = or i1 %1086, %1087
  br i1 %1088, label %originalBB376, label %originalBB376alteredBB

originalBB376:                                    ; preds = %1080, %originalBB376alteredBB
  %1089 = load i8**, i8*** @inVal1
  %1090 = getelementptr inbounds i8*, i8** %1089, i64 1
  %1091 = load i8*, i8** %1090
  %controle4 = call i32 @controle(i8* %1091, i32 -1)
  store i32 %controle4, i32* %collatzVar3
  %1092 = load i32, i32* @x.3
  %1093 = load i32, i32* @y.4
  %1094 = sub i32 %1092, 1
  %1095 = mul i32 %1092, %1094
  %1096 = urem i32 %1095, 2
  %1097 = icmp eq i32 %1096, 0
  %1098 = icmp slt i32 %1093, 10
  %1099 = or i1 %1097, %1098
  br i1 %1099, label %originalBBpart2378, label %originalBB376alteredBB

originalBBpart2378:                               ; preds = %originalBB376
  br label %1100

1100:                                             ; preds = %originalBBpart2425, %originalBBpart2414, %originalBBpart2378
  %1101 = load i32, i32* @x.3
  %1102 = load i32, i32* @y.4
  %1103 = sub i32 %1101, 1
  %1104 = mul i32 %1101, %1103
  %1105 = urem i32 %1104, 2
  %1106 = icmp eq i32 %1105, 0
  %1107 = icmp slt i32 %1102, 10
  %1108 = or i1 %1106, %1107
  br i1 %1108, label %originalBB380, label %originalBB380alteredBB

originalBB380:                                    ; preds = %1100, %originalBB380alteredBB
  %1109 = load i32, i32* %collatzVar3
  %1110 = icmp sgt i32 %1109, 1
  %1111 = load i32, i32* @x.3
  %1112 = load i32, i32* @y.4
  %1113 = sub i32 %1111, 1
  %1114 = mul i32 %1111, %1113
  %1115 = urem i32 %1114, 2
  %1116 = icmp eq i32 %1115, 0
  %1117 = icmp slt i32 %1112, 10
  %1118 = or i1 %1116, %1117
  br i1 %1118, label %originalBBpart2382, label %originalBB380alteredBB

originalBBpart2382:                               ; preds = %originalBB380
  br i1 %1110, label %1119, label %1237

1119:                                             ; preds = %originalBBpart2382
  %1120 = load i32, i32* @x.3
  %1121 = load i32, i32* @y.4
  %1122 = sub i32 %1120, 1
  %1123 = mul i32 %1120, %1122
  %1124 = urem i32 %1123, 2
  %1125 = icmp eq i32 %1124, 0
  %1126 = icmp slt i32 %1121, 10
  %1127 = or i1 %1125, %1126
  br i1 %1127, label %originalBB384, label %originalBB384alteredBB

originalBB384:                                    ; preds = %1119, %originalBB384alteredBB
  %1128 = load i32, i32* %collatzVar3
  %1129 = srem i32 %1128, 2
  %1130 = icmp eq i32 %1129, 0
  %1131 = load i32, i32* @x.3
  %1132 = load i32, i32* @y.4
  %1133 = sub i32 %1131, 1
  %1134 = mul i32 %1131, %1133
  %1135 = urem i32 %1134, 2
  %1136 = icmp eq i32 %1135, 0
  %1137 = icmp slt i32 %1132, 10
  %1138 = or i1 %1136, %1137
  br i1 %1138, label %originalBBpart2387, label %originalBB384alteredBB

originalBBpart2387:                               ; preds = %originalBB384
  br i1 %1130, label %1139, label %1158

1139:                                             ; preds = %originalBBpart2387
  %1140 = load i32, i32* @x.3
  %1141 = load i32, i32* @y.4
  %1142 = sub i32 %1140, 1
  %1143 = mul i32 %1140, %1142
  %1144 = urem i32 %1143, 2
  %1145 = icmp eq i32 %1144, 0
  %1146 = icmp slt i32 %1141, 10
  %1147 = or i1 %1145, %1146
  br i1 %1147, label %originalBB389, label %originalBB389alteredBB

originalBB389:                                    ; preds = %1139, %originalBB389alteredBB
  %1148 = load i32, i32* %collatzVar3
  %1149 = sdiv i32 %1148, 2
  store i32 %1149, i32* %collatzVar3
  %1150 = load i32, i32* @x.3
  %1151 = load i32, i32* @y.4
  %1152 = sub i32 %1150, 1
  %1153 = mul i32 %1150, %1152
  %1154 = urem i32 %1153, 2
  %1155 = icmp eq i32 %1154, 0
  %1156 = icmp slt i32 %1151, 10
  %1157 = or i1 %1155, %1156
  br i1 %1157, label %originalBBpart2397, label %originalBB389alteredBB

originalBBpart2397:                               ; preds = %originalBB389
  br label %1178

1158:                                             ; preds = %originalBBpart2387
  %1159 = load i32, i32* @x.3
  %1160 = load i32, i32* @y.4
  %1161 = sub i32 %1159, 1
  %1162 = mul i32 %1159, %1161
  %1163 = urem i32 %1162, 2
  %1164 = icmp eq i32 %1163, 0
  %1165 = icmp slt i32 %1160, 10
  %1166 = or i1 %1164, %1165
  br i1 %1166, label %originalBB399, label %originalBB399alteredBB

originalBB399:                                    ; preds = %1158, %originalBB399alteredBB
  %1167 = load i32, i32* %collatzVar3
  %1168 = mul i32 %1167, 3
  %1169 = add i32 %1168, 1
  store i32 %1169, i32* %collatzVar3
  %1170 = load i32, i32* @x.3
  %1171 = load i32, i32* @y.4
  %1172 = sub i32 %1170, 1
  %1173 = mul i32 %1170, %1172
  %1174 = urem i32 %1173, 2
  %1175 = icmp eq i32 %1174, 0
  %1176 = icmp slt i32 %1171, 10
  %1177 = or i1 %1175, %1176
  br i1 %1177, label %originalBBpart2407, label %originalBB399alteredBB

originalBBpart2407:                               ; preds = %originalBB399
  br label %1178

1178:                                             ; preds = %originalBBpart2407, %originalBBpart2397
  %1179 = load i32, i32* @x.3
  %1180 = load i32, i32* @y.4
  %1181 = sub i32 %1179, 1
  %1182 = mul i32 %1179, %1181
  %1183 = urem i32 %1182, 2
  %1184 = icmp eq i32 %1183, 0
  %1185 = icmp slt i32 %1180, 10
  %1186 = or i1 %1184, %1185
  br i1 %1186, label %originalBB409, label %originalBB409alteredBB

originalBB409:                                    ; preds = %1178, %originalBB409alteredBB
  %1187 = load i32, i32* %collatzVar3
  %1188 = sub i32 %1018, %1187
  %1189 = icmp sgt i32 %1188, -3
  %1190 = load i32, i32* @x.3
  %1191 = load i32, i32* @y.4
  %1192 = sub i32 %1190, 1
  %1193 = mul i32 %1190, %1192
  %1194 = urem i32 %1193, 2
  %1195 = icmp eq i32 %1194, 0
  %1196 = icmp slt i32 %1191, 10
  %1197 = or i1 %1195, %1196
  br i1 %1197, label %originalBBpart2414, label %originalBB409alteredBB

originalBBpart2414:                               ; preds = %originalBB409
  br i1 %1189, label %1198, label %1100

1198:                                             ; preds = %originalBBpart2414
  %1199 = load i32, i32* @x.3
  %1200 = load i32, i32* @y.4
  %1201 = sub i32 %1199, 1
  %1202 = mul i32 %1199, %1201
  %1203 = urem i32 %1202, 2
  %1204 = icmp eq i32 %1203, 0
  %1205 = icmp slt i32 %1200, 10
  %1206 = or i1 %1204, %1205
  br i1 %1206, label %originalBB416, label %originalBB416alteredBB

originalBB416:                                    ; preds = %1198, %originalBB416alteredBB
  %1207 = load i32, i32* %collatzVar3
  %1208 = add i32 %1018, %1207
  %1209 = icmp slt i32 %1208, 1
  %1210 = load i32, i32* @x.3
  %1211 = load i32, i32* @y.4
  %1212 = sub i32 %1210, 1
  %1213 = mul i32 %1210, %1212
  %1214 = urem i32 %1213, 2
  %1215 = icmp eq i32 %1214, 0
  %1216 = icmp slt i32 %1211, 10
  %1217 = or i1 %1215, %1216
  br i1 %1217, label %originalBBpart2425, label %originalBB416alteredBB

originalBBpart2425:                               ; preds = %originalBB416
  br i1 %1209, label %1218, label %1100

1218:                                             ; preds = %originalBBpart2425
  %1219 = load i32, i32* @x.3
  %1220 = load i32, i32* @y.4
  %1221 = sub i32 %1219, 1
  %1222 = mul i32 %1219, %1221
  %1223 = urem i32 %1222, 2
  %1224 = icmp eq i32 %1223, 0
  %1225 = icmp slt i32 %1220, 10
  %1226 = or i1 %1224, %1225
  br i1 %1226, label %originalBB427, label %originalBB427alteredBB

originalBB427:                                    ; preds = %1218, %originalBB427alteredBB
  %1227 = load i8*, i8** %17, align 8, !dbg !468
  %1228 = icmp eq i8* %1227, getelementptr inbounds ([8 x i8], [8 x i8]* @main.unknown, i64 0, i64 0), !dbg !469
  %1229 = load i32, i32* @x.3
  %1230 = load i32, i32* @y.4
  %1231 = sub i32 %1229, 1
  %1232 = mul i32 %1229, %1231
  %1233 = urem i32 %1232, 2
  %1234 = icmp eq i32 %1233, 0
  %1235 = icmp slt i32 %1230, 10
  %1236 = or i1 %1234, %1235
  br i1 %1236, label %originalBBpart2429, label %originalBB427alteredBB

originalBBpart2429:                               ; preds = %originalBB427
  br i1 %1228, label %1255, label %1237, !dbg !470

1237:                                             ; preds = %originalBBpart2429, %originalBBpart2382
  %1238 = load i32, i32* @x.3
  %1239 = load i32, i32* @y.4
  %1240 = sub i32 %1238, 1
  %1241 = mul i32 %1238, %1240
  %1242 = urem i32 %1241, 2
  %1243 = icmp eq i32 %1242, 0
  %1244 = icmp slt i32 %1239, 10
  %1245 = or i1 %1243, %1244
  br i1 %1245, label %originalBB431, label %originalBB431alteredBB

originalBB431:                                    ; preds = %1237, %originalBB431alteredBB
  %1246 = load i8*, i8** %17, align 8, !dbg !471
  call void @print_element(i8* %1246), !dbg !472
  %1247 = load i32, i32* @x.3
  %1248 = load i32, i32* @y.4
  %1249 = sub i32 %1247, 1
  %1250 = mul i32 %1247, %1249
  %1251 = urem i32 %1250, 2
  %1252 = icmp eq i32 %1251, 0
  %1253 = icmp slt i32 %1248, 10
  %1254 = or i1 %1252, %1253
  br i1 %1254, label %originalBBpart2433, label %originalBB431alteredBB

originalBBpart2433:                               ; preds = %originalBB431
  br label %1255, !dbg !472

1255:                                             ; preds = %originalBBpart2433, %originalBBpart2429
  %1256 = load i32, i32* @x.3
  %1257 = load i32, i32* @y.4
  %1258 = sub i32 %1256, 1
  %1259 = mul i32 %1256, %1258
  %1260 = urem i32 %1259, 2
  %1261 = icmp eq i32 %1260, 0
  %1262 = icmp slt i32 %1257, 10
  %1263 = or i1 %1261, %1262
  br i1 %1263, label %originalBB435, label %originalBB435alteredBB

originalBB435:                                    ; preds = %1255, %originalBB435alteredBB
  %1264 = load i32, i32* @x.3
  %1265 = load i32, i32* @y.4
  %1266 = sub i32 %1264, 1
  %1267 = mul i32 %1264, %1266
  %1268 = urem i32 %1267, 2
  %1269 = icmp eq i32 %1268, 0
  %1270 = icmp slt i32 %1265, 10
  %1271 = or i1 %1269, %1270
  br i1 %1271, label %originalBBpart2437, label %originalBB435alteredBB

originalBBpart2437:                               ; preds = %originalBB435
  br label %1272, !dbg !473

1272:                                             ; preds = %originalBBpart2437, %originalBBpart2358
  %1273 = load i32, i32* @x.3
  %1274 = load i32, i32* @y.4
  %1275 = sub i32 %1273, 1
  %1276 = mul i32 %1273, %1275
  %1277 = urem i32 %1276, 2
  %1278 = icmp eq i32 %1277, 0
  %1279 = icmp slt i32 %1274, 10
  %1280 = or i1 %1278, %1279
  br i1 %1280, label %originalBB439, label %originalBB439alteredBB

originalBB439:                                    ; preds = %1272, %originalBB439alteredBB
  %1281 = load i32, i32* %14, align 4, !dbg !474
  %1282 = and i32 %1281, 128, !dbg !476
  %1283 = icmp ne i32 %1282, 0, !dbg !476
  %1284 = load i32, i32* @x.3
  %1285 = load i32, i32* @y.4
  %1286 = sub i32 %1284, 1
  %1287 = mul i32 %1284, %1286
  %1288 = urem i32 %1287, 2
  %1289 = icmp eq i32 %1288, 0
  %1290 = icmp slt i32 %1285, 10
  %1291 = or i1 %1289, %1290
  br i1 %1291, label %originalBBpart2447, label %originalBB439alteredBB

originalBBpart2447:                               ; preds = %originalBB439
  br i1 %1283, label %1292, label %1309, !dbg !477

1292:                                             ; preds = %originalBBpart2447
  %1293 = load i32, i32* @x.3
  %1294 = load i32, i32* @y.4
  %1295 = sub i32 %1293, 1
  %1296 = mul i32 %1293, %1295
  %1297 = urem i32 %1296, 2
  %1298 = icmp eq i32 %1297, 0
  %1299 = icmp slt i32 %1294, 10
  %1300 = or i1 %1298, %1299
  br i1 %1300, label %originalBB449, label %originalBB449alteredBB

originalBB449:                                    ; preds = %1292, %originalBB449alteredBB
  call void @print_element(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i64 0, i64 0)), !dbg !478
  %1301 = load i32, i32* @x.3
  %1302 = load i32, i32* @y.4
  %1303 = sub i32 %1301, 1
  %1304 = mul i32 %1301, %1303
  %1305 = urem i32 %1304, 2
  %1306 = icmp eq i32 %1305, 0
  %1307 = icmp slt i32 %1302, 10
  %1308 = or i1 %1306, %1307
  br i1 %1308, label %originalBBpart2451, label %originalBB449alteredBB

originalBBpart2451:                               ; preds = %originalBB449
  br label %1309, !dbg !478

1309:                                             ; preds = %originalBBpart2451, %originalBBpart2447
  %1310 = load i32, i32* @x.3
  %1311 = load i32, i32* @y.4
  %1312 = sub i32 %1310, 1
  %1313 = mul i32 %1310, %1312
  %1314 = urem i32 %1313, 2
  %1315 = icmp eq i32 %1314, 0
  %1316 = icmp slt i32 %1311, 10
  %1317 = or i1 %1315, %1316
  br i1 %1317, label %originalBB453, label %originalBB453alteredBB

originalBB453:                                    ; preds = %1309, %originalBB453alteredBB
  %1318 = call i32 @putchar_unlocked(i32 10), !dbg !479
  %1319 = load i32, i32* @x.3
  %1320 = load i32, i32* @y.4
  %1321 = sub i32 %1319, 1
  %1322 = mul i32 %1319, %1321
  %1323 = urem i32 %1322, 2
  %1324 = icmp eq i32 %1323, 0
  %1325 = icmp slt i32 %1320, 10
  %1326 = or i1 %1324, %1325
  br i1 %1326, label %originalBBpart2455, label %originalBB453alteredBB

originalBBpart2455:                               ; preds = %originalBB453
  ret i32 0, !dbg !480

originalBBalteredBB:                              ; preds = %originalBB, %2
  store i8** %1, i8*** @inVal1
  store i32 %0, i32* @inVal0
  %1327 = alloca i32, align 4
  %1328 = alloca i32, align 4
  %1329 = alloca i8**, align 8
  %1330 = alloca i32, align 4
  %1331 = alloca %struct.utsname, align 1
  %1332 = alloca i8*, align 8
  %1333 = alloca i8*, align 8
  store i32 0, i32* %1327, align 4
  store i32 %0, i32* %1328, align 4
  call void @llvm.dbg.declare(metadata i32* %1328, metadata !481, metadata !DIExpression()), !dbg !363
  store i8** %1, i8*** %1329, align 8
  call void @llvm.dbg.declare(metadata i8*** %1329, metadata !503, metadata !DIExpression()), !dbg !365
  call void @llvm.dbg.declare(metadata i32* %1330, metadata !504, metadata !DIExpression()), !dbg !367
  store i32 0, i32* %1330, align 4, !dbg !367
  %1334 = load i8**, i8*** %1329, align 8, !dbg !368
  %1335 = getelementptr inbounds i8*, i8** %1334, i64 0, !dbg !368
  %1336 = load i8*, i8** %1335, align 8, !dbg !368
  call void @set_program_name(i8* %1336), !dbg !369
  %1337 = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.9, i64 0, i64 0)) #10, !dbg !370
  %1338 = call i8* @bindtextdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.11, i64 0, i64 0)) #10, !dbg !371
  %1339 = call i8* @textdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10, i64 0, i64 0)) #10, !dbg !372
  %1340 = call i32 @atexit(void ()* @close_stdout) #10, !dbg !373
  %1341 = load i32, i32* %1328, align 4, !dbg !374
  %1342 = load i8**, i8*** %1329, align 8, !dbg !375
  %1343 = call i32 @decode_switches(i32 %1341, i8** %1342), !dbg !376
  store i32 %1343, i32* %1330, align 4, !dbg !377
  %1344 = load i32, i32* %1330, align 4, !dbg !378
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %37
  %collatzVaralteredBB = alloca i32
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %54
  %1345 = load i32, i32* @inVal0
  %1346 = icmp sgt i32 %1345, 1
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %73
  store i32 49, i32* %collatzVar
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %90
  %1347 = load i8**, i8*** @inVal1
  %1348 = getelementptr inbounds i8*, i8** %1347, i64 1
  %1349 = load i8*, i8** %1348
  %controlealteredBB = call i32 @controle(i8* %1349, i32 0)
  store i32 %controlealteredBB, i32* %collatzVar
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %110
  %1350 = load i32, i32* %collatzVar
  %1351 = icmp sgt i32 %1350, 1
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %129
  %1352 = load i32, i32* %collatzVar
  %_ = sub i32 0, %1352
  %gen = add i32 %_, 2
  %_23 = sub i32 0, %1352
  %gen24 = add i32 %_23, 2
  %_25 = shl i32 %1352, 2
  %_26 = shl i32 %1352, 2
  %_27 = sub i32 0, %1352
  %gen28 = add i32 %_27, 2
  %1353 = srem i32 %1352, 2
  %1354 = icmp eq i32 %1353, 0
  br label %originalBB22

originalBB33alteredBB:                            ; preds = %originalBB33, %149
  %1355 = load i32, i32* %collatzVar
  %_34 = sub i32 %1355, 2
  %gen35 = mul i32 %_34, 2
  %1356 = sdiv i32 %1355, 2
  store i32 %1356, i32* %collatzVar
  br label %originalBB33

originalBB39alteredBB:                            ; preds = %originalBB39, %168
  %1357 = load i32, i32* %collatzVar
  %_40 = sub i32 %1357, 3
  %gen41 = mul i32 %_40, 3
  %1358 = mul i32 %1357, 3
  %_42 = shl i32 %1358, 1
  %_43 = shl i32 %1358, 1
  %_44 = shl i32 %1358, 1
  %1359 = add i32 %1358, 1
  store i32 %1359, i32* %collatzVar
  br label %originalBB39

originalBB48alteredBB:                            ; preds = %originalBB48, %188
  %1360 = load i32, i32* %collatzVar
  %_49 = sub i32 0, %28
  %gen50 = add i32 %_49, %1360
  %_51 = sub i32 0, %28
  %gen52 = add i32 %_51, %1360
  %_53 = sub i32 %28, %1360
  %gen54 = mul i32 %_53, %1360
  %1361 = sub i32 %28, %1360
  %1362 = icmp sgt i32 %1361, -2
  br label %originalBB48

originalBB58alteredBB:                            ; preds = %originalBB58, %208
  %1363 = load i32, i32* %collatzVar
  %_59 = sub i32 0, %28
  %gen60 = add i32 %_59, %1363
  %1364 = add i32 %28, %1363
  %1365 = icmp slt i32 %1364, 2
  br label %originalBB58

originalBB64alteredBB:                            ; preds = %originalBB64, %228
  store i32 1, i32* %14, align 4, !dbg !381
  br label %originalBB64

originalBB68alteredBB:                            ; preds = %originalBB68, %245
  %1366 = load i32, i32* %14, align 4, !dbg !383
  %_69 = sub i32 0, %1366
  %gen70 = add i32 %_69, 31
  %_71 = sub i32 %1366, 31
  %gen72 = mul i32 %_71, 31
  %_73 = shl i32 %1366, 31
  %_74 = sub i32 %1366, 31
  %gen75 = mul i32 %_74, 31
  %1367 = and i32 %1366, 31, !dbg !385
  %1368 = icmp ne i32 %1367, 0, !dbg !385
  br label %originalBB68

originalBB79alteredBB:                            ; preds = %originalBB79, %265
  %1369 = call i32 @uname(%struct.utsname* %15) #10, !dbg !402
  br label %originalBB79

originalBB83alteredBB:                            ; preds = %originalBB83, %283
  %collatzVar5alteredBB = alloca i32
  br label %originalBB83

originalBB87alteredBB:                            ; preds = %originalBB87, %300
  %1370 = load i32, i32* @inVal0
  %1371 = icmp sgt i32 %1370, 1
  br label %originalBB87

originalBB91alteredBB:                            ; preds = %originalBB91, %319
  store i32 28, i32* %collatzVar5
  br label %originalBB91

originalBB95alteredBB:                            ; preds = %originalBB95, %336
  %1372 = load i8**, i8*** @inVal1
  %1373 = getelementptr inbounds i8*, i8** %1372, i64 1
  %1374 = load i8*, i8** %1373
  %controle6alteredBB = call i32 @controle(i8* %1374, i32 -1)
  store i32 %controle6alteredBB, i32* %collatzVar5
  br label %originalBB95

originalBB99alteredBB:                            ; preds = %originalBB99, %356
  %1375 = load i32, i32* %collatzVar5
  %1376 = icmp sgt i32 %1375, 1
  br label %originalBB99

originalBB103alteredBB:                           ; preds = %originalBB103, %375
  %1377 = load i32, i32* %collatzVar5
  %_104 = sub i32 0, %1377
  %gen105 = add i32 %_104, 2
  %_106 = sub i32 0, %1377
  %gen107 = add i32 %_106, 2
  %_108 = sub i32 %1377, 2
  %gen109 = mul i32 %_108, 2
  %1378 = srem i32 %1377, 2
  %1379 = icmp eq i32 %1378, 0
  br label %originalBB103

originalBB113alteredBB:                           ; preds = %originalBB113, %395
  %1380 = load i32, i32* %collatzVar5
  %_114 = sub i32 0, %1380
  %gen115 = add i32 %_114, 2
  %_116 = shl i32 %1380, 2
  %_117 = shl i32 %1380, 2
  %_118 = sub i32 %1380, 2
  %gen119 = mul i32 %_118, 2
  %1381 = sdiv i32 %1380, 2
  store i32 %1381, i32* %collatzVar5
  br label %originalBB113

originalBB123alteredBB:                           ; preds = %originalBB123, %414
  %1382 = load i32, i32* %collatzVar5
  %_124 = shl i32 %1382, 3
  %1383 = mul i32 %1382, 3
  %_125 = sub i32 %1383, 1
  %gen126 = mul i32 %_125, 1
  %_127 = sub i32 0, %1383
  %gen128 = add i32 %_127, 1
  %_129 = sub i32 %1383, 1
  %gen130 = mul i32 %_129, 1
  %_131 = sub i32 0, %1383
  %gen132 = add i32 %_131, 1
  %_133 = shl i32 %1383, 1
  %1384 = add i32 %1383, 1
  store i32 %1384, i32* %collatzVar5
  br label %originalBB123

originalBB137alteredBB:                           ; preds = %originalBB137, %434
  %1385 = load i32, i32* %collatzVar5
  %_138 = sub i32 0, %274
  %gen139 = add i32 %_138, %1385
  %_140 = sub i32 0, %274
  %gen141 = add i32 %_140, %1385
  %1386 = sub i32 %274, %1385
  %1387 = icmp sgt i32 %1386, -3
  br label %originalBB137

originalBB145alteredBB:                           ; preds = %originalBB145, %454
  %1388 = load i32, i32* %collatzVar5
  %_146 = shl i32 %274, %1388
  %_147 = shl i32 %274, %1388
  %_148 = sub i32 0, %274
  %gen149 = add i32 %_148, %1388
  %_150 = sub i32 %274, %1388
  %gen151 = mul i32 %_150, %1388
  %_152 = shl i32 %274, %1388
  %_153 = sub i32 0, %274
  %gen154 = add i32 %_153, %1388
  %_155 = shl i32 %274, %1388
  %1389 = add i32 %274, %1388
  %1390 = icmp slt i32 %1389, 1
  br label %originalBB145

originalBB159alteredBB:                           ; preds = %originalBB159, %474
  %1391 = call i32* @__errno_location() #14, !dbg !405
  %1392 = load i32, i32* %1391, align 4, !dbg !405
  %1393 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0)) #10, !dbg !405
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %1392, i8* %1393), !dbg !405
  br label %originalBB159

originalBB163alteredBB:                           ; preds = %originalBB163, %494
  %1394 = load i32, i32* %14, align 4, !dbg !406
  %_164 = shl i32 %1394, 1
  %_165 = sub i32 %1394, 1
  %gen166 = mul i32 %_165, 1
  %_167 = sub i32 %1394, 1
  %gen168 = mul i32 %_167, 1
  %_169 = sub i32 0, %1394
  %gen170 = add i32 %_169, 1
  %1395 = and i32 %1394, 1, !dbg !408
  %1396 = icmp ne i32 %1395, 0, !dbg !408
  br label %originalBB163

originalBB174alteredBB:                           ; preds = %originalBB174, %514
  %1397 = getelementptr inbounds %struct.utsname, %struct.utsname* %15, i32 0, i32 0, !dbg !410
  %1398 = getelementptr inbounds [65 x i8], [65 x i8]* %1397, i64 0, i64 0, !dbg !411
  call void @print_element(i8* %1398), !dbg !412
  br label %originalBB174

originalBB178alteredBB:                           ; preds = %originalBB178, %533
  %1399 = load i32, i32* %14, align 4, !dbg !413
  %_179 = sub i32 0, %1399
  %gen180 = add i32 %_179, 2
  %_181 = sub i32 %1399, 2
  %gen182 = mul i32 %_181, 2
  %_183 = sub i32 0, %1399
  %gen184 = add i32 %_183, 2
  %_185 = shl i32 %1399, 2
  %_186 = sub i32 0, %1399
  %gen187 = add i32 %_186, 2
  %1400 = and i32 %1399, 2, !dbg !415
  %1401 = icmp ne i32 %1400, 0, !dbg !415
  br label %originalBB178

originalBB191alteredBB:                           ; preds = %originalBB191, %553
  %1402 = getelementptr inbounds %struct.utsname, %struct.utsname* %15, i32 0, i32 1, !dbg !417
  %1403 = getelementptr inbounds [65 x i8], [65 x i8]* %1402, i64 0, i64 0, !dbg !418
  call void @print_element(i8* %1403), !dbg !419
  br label %originalBB191

originalBB195alteredBB:                           ; preds = %originalBB195, %572
  %1404 = load i32, i32* %14, align 4, !dbg !420
  %_196 = sub i32 %1404, 4
  %gen197 = mul i32 %_196, 4
  %_198 = shl i32 %1404, 4
  %1405 = and i32 %1404, 4, !dbg !422
  %1406 = icmp ne i32 %1405, 0, !dbg !422
  br label %originalBB195

originalBB202alteredBB:                           ; preds = %originalBB202, %592
  %1407 = getelementptr inbounds %struct.utsname, %struct.utsname* %15, i32 0, i32 2, !dbg !424
  %1408 = getelementptr inbounds [65 x i8], [65 x i8]* %1407, i64 0, i64 0, !dbg !425
  call void @print_element(i8* %1408), !dbg !426
  br label %originalBB202

originalBB206alteredBB:                           ; preds = %originalBB206, %611
  %1409 = load i32, i32* %14, align 4, !dbg !427
  %_207 = sub i32 %1409, 8
  %gen208 = mul i32 %_207, 8
  %_209 = shl i32 %1409, 8
  %_210 = sub i32 %1409, 8
  %gen211 = mul i32 %_210, 8
  %_212 = shl i32 %1409, 8
  %_213 = sub i32 %1409, 8
  %gen214 = mul i32 %_213, 8
  %1410 = and i32 %1409, 8, !dbg !429
  %1411 = icmp ne i32 %1410, 0, !dbg !429
  br label %originalBB206

originalBB218alteredBB:                           ; preds = %originalBB218, %631
  %1412 = getelementptr inbounds %struct.utsname, %struct.utsname* %15, i32 0, i32 3, !dbg !431
  %1413 = getelementptr inbounds [65 x i8], [65 x i8]* %1412, i64 0, i64 0, !dbg !432
  call void @print_element(i8* %1413), !dbg !433
  br label %originalBB218

originalBB222alteredBB:                           ; preds = %originalBB222, %650
  %1414 = load i32, i32* %14, align 4, !dbg !434
  %_223 = shl i32 %1414, 16
  %_224 = sub i32 %1414, 16
  %gen225 = mul i32 %_224, 16
  %1415 = and i32 %1414, 16, !dbg !436
  %1416 = icmp ne i32 %1415, 0, !dbg !436
  br label %originalBB222

originalBB229alteredBB:                           ; preds = %originalBB229, %670
  %1417 = getelementptr inbounds %struct.utsname, %struct.utsname* %15, i32 0, i32 4, !dbg !438
  %1418 = getelementptr inbounds [65 x i8], [65 x i8]* %1417, i64 0, i64 0, !dbg !439
  call void @print_element(i8* %1418), !dbg !440
  br label %originalBB229

originalBB233alteredBB:                           ; preds = %originalBB233, %689
  br label %originalBB233

originalBB237alteredBB:                           ; preds = %originalBB237, %706
  %1419 = load i32, i32* %14, align 4, !dbg !442
  %_238 = sub i32 0, %1419
  %gen239 = add i32 %_238, 32
  %1420 = and i32 %1419, 32, !dbg !444
  %1421 = icmp ne i32 %1420, 0, !dbg !444
  br label %originalBB237

originalBB243alteredBB:                           ; preds = %originalBB243, %726
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @main.unknown, i64 0, i64 0), i8** %16, align 8, !dbg !448
  %1422 = load i32, i32* %14, align 4, !dbg !449
  br label %originalBB243

originalBB247alteredBB:                           ; preds = %originalBB247, %744
  %collatzVar1alteredBB = alloca i32
  br label %originalBB247

originalBB251alteredBB:                           ; preds = %originalBB251, %761
  %1423 = load i32, i32* @inVal0
  %1424 = icmp sgt i32 %1423, 1
  br label %originalBB251

originalBB255alteredBB:                           ; preds = %originalBB255, %780
  store i32 59, i32* %collatzVar1
  br label %originalBB255

originalBB259alteredBB:                           ; preds = %originalBB259, %797
  %1425 = load i8**, i8*** @inVal1
  %1426 = getelementptr inbounds i8*, i8** %1425, i64 1
  %1427 = load i8*, i8** %1426
  %controle2alteredBB = call i32 @controle(i8* %1427, i32 -1)
  store i32 %controle2alteredBB, i32* %collatzVar1
  br label %originalBB259

originalBB263alteredBB:                           ; preds = %originalBB263, %817
  %1428 = load i32, i32* %collatzVar1
  %1429 = icmp sgt i32 %1428, 1
  br label %originalBB263

originalBB267alteredBB:                           ; preds = %originalBB267, %836
  %1430 = load i32, i32* %collatzVar1
  %_268 = sub i32 0, %1430
  %gen269 = add i32 %_268, 2
  %_270 = sub i32 %1430, 2
  %gen271 = mul i32 %_270, 2
  %_272 = shl i32 %1430, 2
  %_273 = shl i32 %1430, 2
  %1431 = srem i32 %1430, 2
  %1432 = icmp eq i32 %1431, 0
  br label %originalBB267

originalBB277alteredBB:                           ; preds = %originalBB277, %856
  %1433 = load i32, i32* %collatzVar1
  %1434 = sdiv i32 %1433, 2
  store i32 %1434, i32* %collatzVar1
  br label %originalBB277

originalBB282alteredBB:                           ; preds = %originalBB282, %875
  %1435 = load i32, i32* %collatzVar1
  %_283 = sub i32 %1435, 3
  %gen284 = mul i32 %_283, 3
  %_285 = sub i32 0, %1435
  %gen286 = add i32 %_285, 3
  %_287 = shl i32 %1435, 3
  %_288 = sub i32 %1435, 3
  %gen289 = mul i32 %_288, 3
  %_290 = sub i32 %1435, 3
  %gen291 = mul i32 %_290, 3
  %1436 = mul i32 %1435, 3
  %_292 = sub i32 %1436, 1
  %gen293 = mul i32 %_292, 1
  %_294 = sub i32 %1436, 1
  %gen295 = mul i32 %_294, 1
  %_296 = sub i32 0, %1436
  %gen297 = add i32 %_296, 1
  %_298 = sub i32 %1436, 1
  %gen299 = mul i32 %_298, 1
  %1437 = add i32 %1436, 1
  store i32 %1437, i32* %collatzVar1
  br label %originalBB282

originalBB303alteredBB:                           ; preds = %originalBB303, %895
  %1438 = load i32, i32* %collatzVar1
  %_304 = sub i32 0, %735
  %gen305 = add i32 %_304, %1438
  %_306 = sub i32 %735, %1438
  %gen307 = mul i32 %_306, %1438
  %_308 = sub i32 %735, %1438
  %gen309 = mul i32 %_308, %1438
  %_310 = sub i32 %735, %1438
  %gen311 = mul i32 %_310, %1438
  %_312 = sub i32 %735, %1438
  %gen313 = mul i32 %_312, %1438
  %_314 = sub i32 %735, %1438
  %gen315 = mul i32 %_314, %1438
  %_316 = sub i32 0, %735
  %gen317 = add i32 %_316, %1438
  %_318 = sub i32 0, %735
  %gen319 = add i32 %_318, %1438
  %_320 = sub i32 0, %735
  %gen321 = add i32 %_320, %1438
  %1439 = sub i32 %735, %1438
  %1440 = icmp sgt i32 %1439, -3
  br label %originalBB303

originalBB325alteredBB:                           ; preds = %originalBB325, %915
  %1441 = load i32, i32* %collatzVar1
  %_326 = shl i32 %735, %1441
  %_327 = sub i32 %735, %1441
  %gen328 = mul i32 %_327, %1441
  %_329 = sub i32 0, %735
  %gen330 = add i32 %_329, %1441
  %_331 = sub i32 %735, %1441
  %gen332 = mul i32 %_331, %1441
  %_333 = shl i32 %735, %1441
  %_334 = sub i32 %735, %1441
  %gen335 = mul i32 %_334, %1441
  %_336 = sub i32 0, %735
  %gen337 = add i32 %_336, %1441
  %_338 = sub i32 0, %735
  %gen339 = add i32 %_338, %1441
  %_340 = shl i32 %735, %1441
  %1442 = add i32 %735, %1441
  %1443 = icmp slt i32 %1442, 1
  br label %originalBB325

originalBB344alteredBB:                           ; preds = %originalBB344, %935
  %1444 = load i8*, i8** %16, align 8, !dbg !452
  %1445 = icmp eq i8* %1444, getelementptr inbounds ([8 x i8], [8 x i8]* @main.unknown, i64 0, i64 0), !dbg !453
  br label %originalBB344

originalBB348alteredBB:                           ; preds = %originalBB348, %954
  %1446 = load i8*, i8** %16, align 8, !dbg !455
  call void @print_element(i8* %1446), !dbg !456
  br label %originalBB348

originalBB352alteredBB:                           ; preds = %originalBB352, %972
  br label %originalBB352

originalBB356alteredBB:                           ; preds = %originalBB356, %989
  %1447 = load i32, i32* %14, align 4, !dbg !458
  %1448 = and i32 %1447, 64, !dbg !460
  %1449 = icmp ne i32 %1448, 0, !dbg !460
  br label %originalBB356

originalBB360alteredBB:                           ; preds = %originalBB360, %1009
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @main.unknown, i64 0, i64 0), i8** %17, align 8, !dbg !464
  %1450 = load i32, i32* %14, align 4, !dbg !465
  br label %originalBB360

originalBB364alteredBB:                           ; preds = %originalBB364, %1027
  %collatzVar3alteredBB = alloca i32
  br label %originalBB364

originalBB368alteredBB:                           ; preds = %originalBB368, %1044
  %1451 = load i32, i32* @inVal0
  %1452 = icmp sgt i32 %1451, 1
  br label %originalBB368

originalBB372alteredBB:                           ; preds = %originalBB372, %1063
  store i32 89, i32* %collatzVar3
  br label %originalBB372

originalBB376alteredBB:                           ; preds = %originalBB376, %1080
  %1453 = load i8**, i8*** @inVal1
  %1454 = getelementptr inbounds i8*, i8** %1453, i64 1
  %1455 = load i8*, i8** %1454
  %controle4alteredBB = call i32 @controle(i8* %1455, i32 -1)
  store i32 %controle4alteredBB, i32* %collatzVar3
  br label %originalBB376

originalBB380alteredBB:                           ; preds = %originalBB380, %1100
  %1456 = load i32, i32* %collatzVar3
  %1457 = icmp sgt i32 %1456, 1
  br label %originalBB380

originalBB384alteredBB:                           ; preds = %originalBB384, %1119
  %1458 = load i32, i32* %collatzVar3
  %_385 = shl i32 %1458, 2
  %1459 = srem i32 %1458, 2
  %1460 = icmp eq i32 %1459, 0
  br label %originalBB384

originalBB389alteredBB:                           ; preds = %originalBB389, %1139
  %1461 = load i32, i32* %collatzVar3
  %_390 = sub i32 %1461, 2
  %gen391 = mul i32 %_390, 2
  %_392 = shl i32 %1461, 2
  %_393 = sub i32 %1461, 2
  %gen394 = mul i32 %_393, 2
  %_395 = shl i32 %1461, 2
  %1462 = sdiv i32 %1461, 2
  store i32 %1462, i32* %collatzVar3
  br label %originalBB389

originalBB399alteredBB:                           ; preds = %originalBB399, %1158
  %1463 = load i32, i32* %collatzVar3
  %1464 = mul i32 %1463, 3
  %_400 = shl i32 %1464, 1
  %_401 = sub i32 %1464, 1
  %gen402 = mul i32 %_401, 1
  %_403 = sub i32 0, %1464
  %gen404 = add i32 %_403, 1
  %_405 = shl i32 %1464, 1
  %1465 = add i32 %1464, 1
  store i32 %1465, i32* %collatzVar3
  br label %originalBB399

originalBB409alteredBB:                           ; preds = %originalBB409, %1178
  %1466 = load i32, i32* %collatzVar3
  %_410 = shl i32 %1018, %1466
  %_411 = sub i32 0, %1018
  %gen412 = add i32 %_411, %1466
  %1467 = sub i32 %1018, %1466
  %1468 = icmp sgt i32 %1467, -3
  br label %originalBB409

originalBB416alteredBB:                           ; preds = %originalBB416, %1198
  %1469 = load i32, i32* %collatzVar3
  %_417 = sub i32 0, %1018
  %gen418 = add i32 %_417, %1469
  %_419 = sub i32 %1018, %1469
  %gen420 = mul i32 %_419, %1469
  %_421 = shl i32 %1018, %1469
  %_422 = shl i32 %1018, %1469
  %_423 = shl i32 %1018, %1469
  %1470 = add i32 %1018, %1469
  %1471 = icmp slt i32 %1470, 1
  br label %originalBB416

originalBB427alteredBB:                           ; preds = %originalBB427, %1218
  %1472 = load i8*, i8** %17, align 8, !dbg !468
  %1473 = icmp eq i8* %1472, getelementptr inbounds ([8 x i8], [8 x i8]* @main.unknown, i64 0, i64 0), !dbg !469
  br label %originalBB427

originalBB431alteredBB:                           ; preds = %originalBB431, %1237
  %1474 = load i8*, i8** %17, align 8, !dbg !471
  call void @print_element(i8* %1474), !dbg !472
  br label %originalBB431

originalBB435alteredBB:                           ; preds = %originalBB435, %1255
  br label %originalBB435

originalBB439alteredBB:                           ; preds = %originalBB439, %1272
  %1475 = load i32, i32* %14, align 4, !dbg !474
  %_440 = sub i32 %1475, 128
  %gen441 = mul i32 %_440, 128
  %_442 = sub i32 0, %1475
  %gen443 = add i32 %_442, 128
  %_444 = sub i32 0, %1475
  %gen445 = add i32 %_444, 128
  %1476 = and i32 %1475, 128, !dbg !476
  %1477 = icmp ne i32 %1476, 0, !dbg !476
  br label %originalBB439

originalBB449alteredBB:                           ; preds = %originalBB449, %1292
  call void @print_element(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i64 0, i64 0)), !dbg !478
  br label %originalBB449

originalBB453alteredBB:                           ; preds = %originalBB453, %1309
  %1478 = call i32 @putchar_unlocked(i32 10), !dbg !479
  br label %originalBB453
}

; Function Attrs: nounwind
declare dso_local i8* @bindtextdomain(i8*, i8*) #2

; Function Attrs: nounwind
declare dso_local i8* @textdomain(i8*) #2

; Function Attrs: nounwind
declare dso_local i32 @atexit(void ()*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @decode_switches(i32, i8**) #4 !dbg !505 {
  %3 = load i32, i32* @x.5
  %4 = load i32, i32* @y.6
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32, align 4
  %12 = alloca i8**, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !506, metadata !DIExpression()), !dbg !507
  store i8** %1, i8*** %12, align 8
  call void @llvm.dbg.declare(metadata i8*** %12, metadata !508, metadata !DIExpression()), !dbg !509
  call void @llvm.dbg.declare(metadata i32* %13, metadata !510, metadata !DIExpression()), !dbg !511
  call void @llvm.dbg.declare(metadata i32* %14, metadata !512, metadata !DIExpression()), !dbg !513
  store i32 0, i32* %14, align 4, !dbg !513
  %15 = load i32, i32* @uname_mode, align 4, !dbg !514
  %16 = icmp eq i32 %15, 2, !dbg !516
  %17 = load i32, i32* @x.5
  %18 = load i32, i32* @y.6
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %16, label %25, label %155, !dbg !517

25:                                               ; preds = %originalBBpart2
  %26 = load i32, i32* @x.5
  %27 = load i32, i32* @y.6
  %28 = sub i32 %26, 1
  %29 = mul i32 %26, %28
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %31, %32
  br i1 %33, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %25, %originalBB1alteredBB
  %34 = load i32, i32* @x.5
  %35 = load i32, i32* @y.6
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %42, !dbg !518

42:                                               ; preds = %originalBBpart24
  %43 = load i32, i32* @x.5
  %44 = load i32, i32* @y.6
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %42, %originalBB6alteredBB
  %51 = load i32, i32* %11, align 4, !dbg !520
  %52 = load i8**, i8*** %12, align 8, !dbg !521
  %53 = call i32 @getopt_long(i32 %51, i8** %52, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.9, i64 0, i64 0), %struct.option* getelementptr inbounds ([3 x %struct.option], [3 x %struct.option]* @arch_long_options, i64 0, i64 0), i32* null) #10, !dbg !522
  store i32 %53, i32* %13, align 4, !dbg !523
  %54 = icmp ne i32 %53, -1, !dbg !524
  %55 = load i32, i32* @x.5
  %56 = load i32, i32* @y.6
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %54, label %63, label %138, !dbg !518

63:                                               ; preds = %originalBBpart28
  %64 = load i32, i32* @x.5
  %65 = load i32, i32* @y.6
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %63, %originalBB10alteredBB
  %72 = load i32, i32* %13, align 4, !dbg !525
  %73 = load i32, i32* @x.5
  %74 = load i32, i32* @y.6
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  switch i32 %72, label %121 [
    i32 -130, label %81
    i32 -131, label %98
  ], !dbg !527

81:                                               ; preds = %originalBBpart212
  %82 = load i32, i32* @x.5
  %83 = load i32, i32* @y.6
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %81, %originalBB14alteredBB
  call void @usage(i32 0) #15, !dbg !528
  %90 = load i32, i32* @x.5
  %91 = load i32, i32* @y.6
  %92 = sub i32 %90, 1
  %93 = mul i32 %90, %92
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %91, 10
  %97 = or i1 %95, %96
  br i1 %97, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  unreachable, !dbg !528

98:                                               ; preds = %originalBBpart212
  %99 = load i32, i32* @x.5
  %100 = load i32, i32* @y.6
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %98, %originalBB18alteredBB
  %107 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !530
  %108 = load i32, i32* @uname_mode, align 4, !dbg !530
  %109 = icmp eq i32 %108, 1, !dbg !530
  %110 = zext i1 %109 to i64, !dbg !530
  %111 = select i1 %109, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), !dbg !530
  %112 = load i8*, i8** @Version, align 8, !dbg !530
  call void (%struct._IO_FILE*, i8*, i8*, i8*, ...) @version_etc(%struct._IO_FILE* %107, i8* %111, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.23, i64 0, i64 0), i8* %112, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.30, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.31, i64 0, i64 0), i8* null), !dbg !530
  call void @exit(i32 0) #12, !dbg !530
  %113 = load i32, i32* @x.5
  %114 = load i32, i32* @y.6
  %115 = sub i32 %113, 1
  %116 = mul i32 %113, %115
  %117 = urem i32 %116, 2
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %118, %119
  br i1 %120, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  unreachable, !dbg !530

121:                                              ; preds = %originalBBpart212
  %122 = load i32, i32* @x.5
  %123 = load i32, i32* @y.6
  %124 = sub i32 %122, 1
  %125 = mul i32 %122, %124
  %126 = urem i32 %125, 2
  %127 = icmp eq i32 %126, 0
  %128 = icmp slt i32 %123, 10
  %129 = or i1 %127, %128
  br i1 %129, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %121, %originalBB22alteredBB
  call void @usage(i32 1) #15, !dbg !531
  %130 = load i32, i32* @x.5
  %131 = load i32, i32* @y.6
  %132 = sub i32 %130, 1
  %133 = mul i32 %130, %132
  %134 = urem i32 %133, 2
  %135 = icmp eq i32 %134, 0
  %136 = icmp slt i32 %131, 10
  %137 = or i1 %135, %136
  br i1 %137, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  unreachable, !dbg !531

138:                                              ; preds = %originalBBpart28
  %139 = load i32, i32* @x.5
  %140 = load i32, i32* @y.6
  %141 = sub i32 %139, 1
  %142 = mul i32 %139, %141
  %143 = urem i32 %142, 2
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %144, %145
  br i1 %146, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %138, %originalBB26alteredBB
  store i32 16, i32* %14, align 4, !dbg !532
  %147 = load i32, i32* @x.5
  %148 = load i32, i32* @y.6
  %149 = sub i32 %147, 1
  %150 = mul i32 %147, %149
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %152, %153
  br i1 %154, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %471, !dbg !533

155:                                              ; preds = %originalBBpart2
  %156 = load i32, i32* @x.5
  %157 = load i32, i32* @y.6
  %158 = sub i32 %156, 1
  %159 = mul i32 %156, %158
  %160 = urem i32 %159, 2
  %161 = icmp eq i32 %160, 0
  %162 = icmp slt i32 %157, 10
  %163 = or i1 %161, %162
  br i1 %163, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %155, %originalBB30alteredBB
  %164 = load i32, i32* @x.5
  %165 = load i32, i32* @y.6
  %166 = sub i32 %164, 1
  %167 = mul i32 %164, %166
  %168 = urem i32 %167, 2
  %169 = icmp eq i32 %168, 0
  %170 = icmp slt i32 %165, 10
  %171 = or i1 %169, %170
  br i1 %171, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %172, !dbg !534

172:                                              ; preds = %originalBBpart2145, %originalBBpart232
  %173 = load i32, i32* @x.5
  %174 = load i32, i32* @y.6
  %175 = sub i32 %173, 1
  %176 = mul i32 %173, %175
  %177 = urem i32 %176, 2
  %178 = icmp eq i32 %177, 0
  %179 = icmp slt i32 %174, 10
  %180 = or i1 %178, %179
  br i1 %180, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %172, %originalBB34alteredBB
  %181 = load i32, i32* %11, align 4, !dbg !536
  %182 = load i8**, i8*** %12, align 8, !dbg !537
  %183 = call i32 @getopt_long(i32 %181, i8** %182, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.32, i64 0, i64 0), %struct.option* getelementptr inbounds ([14 x %struct.option], [14 x %struct.option]* @uname_long_options, i64 0, i64 0), i32* null) #10, !dbg !538
  store i32 %183, i32* %13, align 4, !dbg !539
  %184 = icmp ne i32 %183, -1, !dbg !540
  %185 = load i32, i32* @x.5
  %186 = load i32, i32* @y.6
  %187 = sub i32 %185, 1
  %188 = mul i32 %185, %187
  %189 = urem i32 %188, 2
  %190 = icmp eq i32 %189, 0
  %191 = icmp slt i32 %186, 10
  %192 = or i1 %190, %191
  br i1 %192, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br i1 %184, label %193, label %454, !dbg !534

193:                                              ; preds = %originalBBpart236
  %194 = load i32, i32* @x.5
  %195 = load i32, i32* @y.6
  %196 = sub i32 %194, 1
  %197 = mul i32 %194, %196
  %198 = urem i32 %197, 2
  %199 = icmp eq i32 %198, 0
  %200 = icmp slt i32 %195, 10
  %201 = or i1 %199, %200
  br i1 %201, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %193, %originalBB38alteredBB
  %202 = load i32, i32* %13, align 4, !dbg !541
  %203 = load i32, i32* @x.5
  %204 = load i32, i32* @y.6
  %205 = sub i32 %203, 1
  %206 = mul i32 %203, %205
  %207 = urem i32 %206, 2
  %208 = icmp eq i32 %207, 0
  %209 = icmp slt i32 %204, 10
  %210 = or i1 %208, %209
  br i1 %210, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  switch i32 %202, label %420 [
    i32 97, label %211
    i32 115, label %228
    i32 110, label %247
    i32 114, label %266
    i32 118, label %285
    i32 109, label %304
    i32 112, label %323
    i32 105, label %342
    i32 111, label %361
    i32 -130, label %380
    i32 -131, label %397
  ], !dbg !543

211:                                              ; preds = %originalBBpart240
  %212 = load i32, i32* @x.5
  %213 = load i32, i32* @y.6
  %214 = sub i32 %212, 1
  %215 = mul i32 %212, %214
  %216 = urem i32 %215, 2
  %217 = icmp eq i32 %216, 0
  %218 = icmp slt i32 %213, 10
  %219 = or i1 %217, %218
  br i1 %219, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %211, %originalBB42alteredBB
  store i32 -1, i32* %14, align 4, !dbg !544
  %220 = load i32, i32* @x.5
  %221 = load i32, i32* @y.6
  %222 = sub i32 %220, 1
  %223 = mul i32 %220, %222
  %224 = urem i32 %223, 2
  %225 = icmp eq i32 %224, 0
  %226 = icmp slt i32 %221, 10
  %227 = or i1 %225, %226
  br i1 %227, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br label %437, !dbg !546

228:                                              ; preds = %originalBBpart240
  %229 = load i32, i32* @x.5
  %230 = load i32, i32* @y.6
  %231 = sub i32 %229, 1
  %232 = mul i32 %229, %231
  %233 = urem i32 %232, 2
  %234 = icmp eq i32 %233, 0
  %235 = icmp slt i32 %230, 10
  %236 = or i1 %234, %235
  br i1 %236, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %228, %originalBB46alteredBB
  %237 = load i32, i32* %14, align 4, !dbg !547
  %238 = or i32 %237, 1, !dbg !547
  store i32 %238, i32* %14, align 4, !dbg !547
  %239 = load i32, i32* @x.5
  %240 = load i32, i32* @y.6
  %241 = sub i32 %239, 1
  %242 = mul i32 %239, %241
  %243 = urem i32 %242, 2
  %244 = icmp eq i32 %243, 0
  %245 = icmp slt i32 %240, 10
  %246 = or i1 %244, %245
  br i1 %246, label %originalBBpart253, label %originalBB46alteredBB

originalBBpart253:                                ; preds = %originalBB46
  br label %437, !dbg !548

247:                                              ; preds = %originalBBpart240
  %248 = load i32, i32* @x.5
  %249 = load i32, i32* @y.6
  %250 = sub i32 %248, 1
  %251 = mul i32 %248, %250
  %252 = urem i32 %251, 2
  %253 = icmp eq i32 %252, 0
  %254 = icmp slt i32 %249, 10
  %255 = or i1 %253, %254
  br i1 %255, label %originalBB55, label %originalBB55alteredBB

originalBB55:                                     ; preds = %247, %originalBB55alteredBB
  %256 = load i32, i32* %14, align 4, !dbg !549
  %257 = or i32 %256, 2, !dbg !549
  store i32 %257, i32* %14, align 4, !dbg !549
  %258 = load i32, i32* @x.5
  %259 = load i32, i32* @y.6
  %260 = sub i32 %258, 1
  %261 = mul i32 %258, %260
  %262 = urem i32 %261, 2
  %263 = icmp eq i32 %262, 0
  %264 = icmp slt i32 %259, 10
  %265 = or i1 %263, %264
  br i1 %265, label %originalBBpart261, label %originalBB55alteredBB

originalBBpart261:                                ; preds = %originalBB55
  br label %437, !dbg !550

266:                                              ; preds = %originalBBpart240
  %267 = load i32, i32* @x.5
  %268 = load i32, i32* @y.6
  %269 = sub i32 %267, 1
  %270 = mul i32 %267, %269
  %271 = urem i32 %270, 2
  %272 = icmp eq i32 %271, 0
  %273 = icmp slt i32 %268, 10
  %274 = or i1 %272, %273
  br i1 %274, label %originalBB63, label %originalBB63alteredBB

originalBB63:                                     ; preds = %266, %originalBB63alteredBB
  %275 = load i32, i32* %14, align 4, !dbg !551
  %276 = or i32 %275, 4, !dbg !551
  store i32 %276, i32* %14, align 4, !dbg !551
  %277 = load i32, i32* @x.5
  %278 = load i32, i32* @y.6
  %279 = sub i32 %277, 1
  %280 = mul i32 %277, %279
  %281 = urem i32 %280, 2
  %282 = icmp eq i32 %281, 0
  %283 = icmp slt i32 %278, 10
  %284 = or i1 %282, %283
  br i1 %284, label %originalBBpart265, label %originalBB63alteredBB

originalBBpart265:                                ; preds = %originalBB63
  br label %437, !dbg !552

285:                                              ; preds = %originalBBpart240
  %286 = load i32, i32* @x.5
  %287 = load i32, i32* @y.6
  %288 = sub i32 %286, 1
  %289 = mul i32 %286, %288
  %290 = urem i32 %289, 2
  %291 = icmp eq i32 %290, 0
  %292 = icmp slt i32 %287, 10
  %293 = or i1 %291, %292
  br i1 %293, label %originalBB67, label %originalBB67alteredBB

originalBB67:                                     ; preds = %285, %originalBB67alteredBB
  %294 = load i32, i32* %14, align 4, !dbg !553
  %295 = or i32 %294, 8, !dbg !553
  store i32 %295, i32* %14, align 4, !dbg !553
  %296 = load i32, i32* @x.5
  %297 = load i32, i32* @y.6
  %298 = sub i32 %296, 1
  %299 = mul i32 %296, %298
  %300 = urem i32 %299, 2
  %301 = icmp eq i32 %300, 0
  %302 = icmp slt i32 %297, 10
  %303 = or i1 %301, %302
  br i1 %303, label %originalBBpart277, label %originalBB67alteredBB

originalBBpart277:                                ; preds = %originalBB67
  br label %437, !dbg !554

304:                                              ; preds = %originalBBpart240
  %305 = load i32, i32* @x.5
  %306 = load i32, i32* @y.6
  %307 = sub i32 %305, 1
  %308 = mul i32 %305, %307
  %309 = urem i32 %308, 2
  %310 = icmp eq i32 %309, 0
  %311 = icmp slt i32 %306, 10
  %312 = or i1 %310, %311
  br i1 %312, label %originalBB79, label %originalBB79alteredBB

originalBB79:                                     ; preds = %304, %originalBB79alteredBB
  %313 = load i32, i32* %14, align 4, !dbg !555
  %314 = or i32 %313, 16, !dbg !555
  store i32 %314, i32* %14, align 4, !dbg !555
  %315 = load i32, i32* @x.5
  %316 = load i32, i32* @y.6
  %317 = sub i32 %315, 1
  %318 = mul i32 %315, %317
  %319 = urem i32 %318, 2
  %320 = icmp eq i32 %319, 0
  %321 = icmp slt i32 %316, 10
  %322 = or i1 %320, %321
  br i1 %322, label %originalBBpart293, label %originalBB79alteredBB

originalBBpart293:                                ; preds = %originalBB79
  br label %437, !dbg !556

323:                                              ; preds = %originalBBpart240
  %324 = load i32, i32* @x.5
  %325 = load i32, i32* @y.6
  %326 = sub i32 %324, 1
  %327 = mul i32 %324, %326
  %328 = urem i32 %327, 2
  %329 = icmp eq i32 %328, 0
  %330 = icmp slt i32 %325, 10
  %331 = or i1 %329, %330
  br i1 %331, label %originalBB95, label %originalBB95alteredBB

originalBB95:                                     ; preds = %323, %originalBB95alteredBB
  %332 = load i32, i32* %14, align 4, !dbg !557
  %333 = or i32 %332, 32, !dbg !557
  store i32 %333, i32* %14, align 4, !dbg !557
  %334 = load i32, i32* @x.5
  %335 = load i32, i32* @y.6
  %336 = sub i32 %334, 1
  %337 = mul i32 %334, %336
  %338 = urem i32 %337, 2
  %339 = icmp eq i32 %338, 0
  %340 = icmp slt i32 %335, 10
  %341 = or i1 %339, %340
  br i1 %341, label %originalBBpart2107, label %originalBB95alteredBB

originalBBpart2107:                               ; preds = %originalBB95
  br label %437, !dbg !558

342:                                              ; preds = %originalBBpart240
  %343 = load i32, i32* @x.5
  %344 = load i32, i32* @y.6
  %345 = sub i32 %343, 1
  %346 = mul i32 %343, %345
  %347 = urem i32 %346, 2
  %348 = icmp eq i32 %347, 0
  %349 = icmp slt i32 %344, 10
  %350 = or i1 %348, %349
  br i1 %350, label %originalBB109, label %originalBB109alteredBB

originalBB109:                                    ; preds = %342, %originalBB109alteredBB
  %351 = load i32, i32* %14, align 4, !dbg !559
  %352 = or i32 %351, 64, !dbg !559
  store i32 %352, i32* %14, align 4, !dbg !559
  %353 = load i32, i32* @x.5
  %354 = load i32, i32* @y.6
  %355 = sub i32 %353, 1
  %356 = mul i32 %353, %355
  %357 = urem i32 %356, 2
  %358 = icmp eq i32 %357, 0
  %359 = icmp slt i32 %354, 10
  %360 = or i1 %358, %359
  br i1 %360, label %originalBBpart2116, label %originalBB109alteredBB

originalBBpart2116:                               ; preds = %originalBB109
  br label %437, !dbg !560

361:                                              ; preds = %originalBBpart240
  %362 = load i32, i32* @x.5
  %363 = load i32, i32* @y.6
  %364 = sub i32 %362, 1
  %365 = mul i32 %362, %364
  %366 = urem i32 %365, 2
  %367 = icmp eq i32 %366, 0
  %368 = icmp slt i32 %363, 10
  %369 = or i1 %367, %368
  br i1 %369, label %originalBB118, label %originalBB118alteredBB

originalBB118:                                    ; preds = %361, %originalBB118alteredBB
  %370 = load i32, i32* %14, align 4, !dbg !561
  %371 = or i32 %370, 128, !dbg !561
  store i32 %371, i32* %14, align 4, !dbg !561
  %372 = load i32, i32* @x.5
  %373 = load i32, i32* @y.6
  %374 = sub i32 %372, 1
  %375 = mul i32 %372, %374
  %376 = urem i32 %375, 2
  %377 = icmp eq i32 %376, 0
  %378 = icmp slt i32 %373, 10
  %379 = or i1 %377, %378
  br i1 %379, label %originalBBpart2129, label %originalBB118alteredBB

originalBBpart2129:                               ; preds = %originalBB118
  br label %437, !dbg !562

380:                                              ; preds = %originalBBpart240
  %381 = load i32, i32* @x.5
  %382 = load i32, i32* @y.6
  %383 = sub i32 %381, 1
  %384 = mul i32 %381, %383
  %385 = urem i32 %384, 2
  %386 = icmp eq i32 %385, 0
  %387 = icmp slt i32 %382, 10
  %388 = or i1 %386, %387
  br i1 %388, label %originalBB131, label %originalBB131alteredBB

originalBB131:                                    ; preds = %380, %originalBB131alteredBB
  call void @usage(i32 0) #15, !dbg !563
  %389 = load i32, i32* @x.5
  %390 = load i32, i32* @y.6
  %391 = sub i32 %389, 1
  %392 = mul i32 %389, %391
  %393 = urem i32 %392, 2
  %394 = icmp eq i32 %393, 0
  %395 = icmp slt i32 %390, 10
  %396 = or i1 %394, %395
  br i1 %396, label %originalBBpart2133, label %originalBB131alteredBB

originalBBpart2133:                               ; preds = %originalBB131
  unreachable, !dbg !563

397:                                              ; preds = %originalBBpart240
  %398 = load i32, i32* @x.5
  %399 = load i32, i32* @y.6
  %400 = sub i32 %398, 1
  %401 = mul i32 %398, %400
  %402 = urem i32 %401, 2
  %403 = icmp eq i32 %402, 0
  %404 = icmp slt i32 %399, 10
  %405 = or i1 %403, %404
  br i1 %405, label %originalBB135, label %originalBB135alteredBB

originalBB135:                                    ; preds = %397, %originalBB135alteredBB
  %406 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !564
  %407 = load i32, i32* @uname_mode, align 4, !dbg !564
  %408 = icmp eq i32 %407, 1, !dbg !564
  %409 = zext i1 %408 to i64, !dbg !564
  %410 = select i1 %408, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), !dbg !564
  %411 = load i8*, i8** @Version, align 8, !dbg !564
  call void (%struct._IO_FILE*, i8*, i8*, i8*, ...) @version_etc(%struct._IO_FILE* %406, i8* %410, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.23, i64 0, i64 0), i8* %411, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.30, i64 0, i64 0), i8* null), !dbg !564
  call void @exit(i32 0) #12, !dbg !564
  %412 = load i32, i32* @x.5
  %413 = load i32, i32* @y.6
  %414 = sub i32 %412, 1
  %415 = mul i32 %412, %414
  %416 = urem i32 %415, 2
  %417 = icmp eq i32 %416, 0
  %418 = icmp slt i32 %413, 10
  %419 = or i1 %417, %418
  br i1 %419, label %originalBBpart2137, label %originalBB135alteredBB

originalBBpart2137:                               ; preds = %originalBB135
  unreachable, !dbg !564

420:                                              ; preds = %originalBBpart240
  %421 = load i32, i32* @x.5
  %422 = load i32, i32* @y.6
  %423 = sub i32 %421, 1
  %424 = mul i32 %421, %423
  %425 = urem i32 %424, 2
  %426 = icmp eq i32 %425, 0
  %427 = icmp slt i32 %422, 10
  %428 = or i1 %426, %427
  br i1 %428, label %originalBB139, label %originalBB139alteredBB

originalBB139:                                    ; preds = %420, %originalBB139alteredBB
  call void @usage(i32 1) #15, !dbg !565
  %429 = load i32, i32* @x.5
  %430 = load i32, i32* @y.6
  %431 = sub i32 %429, 1
  %432 = mul i32 %429, %431
  %433 = urem i32 %432, 2
  %434 = icmp eq i32 %433, 0
  %435 = icmp slt i32 %430, 10
  %436 = or i1 %434, %435
  br i1 %436, label %originalBBpart2141, label %originalBB139alteredBB

originalBBpart2141:                               ; preds = %originalBB139
  unreachable, !dbg !565

437:                                              ; preds = %originalBBpart2129, %originalBBpart2116, %originalBBpart2107, %originalBBpart293, %originalBBpart277, %originalBBpart265, %originalBBpart261, %originalBBpart253, %originalBBpart244
  %438 = load i32, i32* @x.5
  %439 = load i32, i32* @y.6
  %440 = sub i32 %438, 1
  %441 = mul i32 %438, %440
  %442 = urem i32 %441, 2
  %443 = icmp eq i32 %442, 0
  %444 = icmp slt i32 %439, 10
  %445 = or i1 %443, %444
  br i1 %445, label %originalBB143, label %originalBB143alteredBB

originalBB143:                                    ; preds = %437, %originalBB143alteredBB
  %446 = load i32, i32* @x.5
  %447 = load i32, i32* @y.6
  %448 = sub i32 %446, 1
  %449 = mul i32 %446, %448
  %450 = urem i32 %449, 2
  %451 = icmp eq i32 %450, 0
  %452 = icmp slt i32 %447, 10
  %453 = or i1 %451, %452
  br i1 %453, label %originalBBpart2145, label %originalBB143alteredBB

originalBBpart2145:                               ; preds = %originalBB143
  br label %172, !dbg !534, !llvm.loop !566

454:                                              ; preds = %originalBBpart236
  %455 = load i32, i32* @x.5
  %456 = load i32, i32* @y.6
  %457 = sub i32 %455, 1
  %458 = mul i32 %455, %457
  %459 = urem i32 %458, 2
  %460 = icmp eq i32 %459, 0
  %461 = icmp slt i32 %456, 10
  %462 = or i1 %460, %461
  br i1 %462, label %originalBB147, label %originalBB147alteredBB

originalBB147:                                    ; preds = %454, %originalBB147alteredBB
  %463 = load i32, i32* @x.5
  %464 = load i32, i32* @y.6
  %465 = sub i32 %463, 1
  %466 = mul i32 %463, %465
  %467 = urem i32 %466, 2
  %468 = icmp eq i32 %467, 0
  %469 = icmp slt i32 %464, 10
  %470 = or i1 %468, %469
  br i1 %470, label %originalBBpart2149, label %originalBB147alteredBB

originalBBpart2149:                               ; preds = %originalBB147
  br label %471

471:                                              ; preds = %originalBBpart2149, %originalBBpart228
  %472 = load i32, i32* @x.5
  %473 = load i32, i32* @y.6
  %474 = sub i32 %472, 1
  %475 = mul i32 %472, %474
  %476 = urem i32 %475, 2
  %477 = icmp eq i32 %476, 0
  %478 = icmp slt i32 %473, 10
  %479 = or i1 %477, %478
  br i1 %479, label %originalBB151, label %originalBB151alteredBB

originalBB151:                                    ; preds = %471, %originalBB151alteredBB
  %480 = load i32, i32* %11, align 4, !dbg !568
  %481 = load i32, i32* @optind, align 4, !dbg !570
  %482 = icmp ne i32 %480, %481, !dbg !571
  %483 = load i32, i32* @x.5
  %484 = load i32, i32* @y.6
  %485 = sub i32 %483, 1
  %486 = mul i32 %483, %485
  %487 = urem i32 %486, 2
  %488 = icmp eq i32 %487, 0
  %489 = icmp slt i32 %484, 10
  %490 = or i1 %488, %489
  br i1 %490, label %originalBBpart2153, label %originalBB151alteredBB

originalBBpart2153:                               ; preds = %originalBB151
  br i1 %482, label %491, label %515, !dbg !572

491:                                              ; preds = %originalBBpart2153
  %492 = load i32, i32* @x.5
  %493 = load i32, i32* @y.6
  %494 = sub i32 %492, 1
  %495 = mul i32 %492, %494
  %496 = urem i32 %495, 2
  %497 = icmp eq i32 %496, 0
  %498 = icmp slt i32 %493, 10
  %499 = or i1 %497, %498
  br i1 %499, label %originalBB155, label %originalBB155alteredBB

originalBB155:                                    ; preds = %491, %originalBB155alteredBB
  %500 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.33, i64 0, i64 0)) #10, !dbg !573
  %501 = load i8**, i8*** %12, align 8, !dbg !575
  %502 = load i32, i32* @optind, align 4, !dbg !576
  %503 = sext i32 %502 to i64, !dbg !575
  %504 = getelementptr inbounds i8*, i8** %501, i64 %503, !dbg !575
  %505 = load i8*, i8** %504, align 8, !dbg !575
  %506 = call i8* @quote(i8* %505), !dbg !577
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %500, i8* %506), !dbg !578
  call void @usage(i32 1) #15, !dbg !579
  %507 = load i32, i32* @x.5
  %508 = load i32, i32* @y.6
  %509 = sub i32 %507, 1
  %510 = mul i32 %507, %509
  %511 = urem i32 %510, 2
  %512 = icmp eq i32 %511, 0
  %513 = icmp slt i32 %508, 10
  %514 = or i1 %512, %513
  br i1 %514, label %originalBBpart2157, label %originalBB155alteredBB

originalBBpart2157:                               ; preds = %originalBB155
  unreachable, !dbg !579

515:                                              ; preds = %originalBBpart2153
  %516 = load i32, i32* @x.5
  %517 = load i32, i32* @y.6
  %518 = sub i32 %516, 1
  %519 = mul i32 %516, %518
  %520 = urem i32 %519, 2
  %521 = icmp eq i32 %520, 0
  %522 = icmp slt i32 %517, 10
  %523 = or i1 %521, %522
  br i1 %523, label %originalBB159, label %originalBB159alteredBB

originalBB159:                                    ; preds = %515, %originalBB159alteredBB
  %524 = load i32, i32* %14, align 4, !dbg !580
  %525 = load i32, i32* @x.5
  %526 = load i32, i32* @y.6
  %527 = sub i32 %525, 1
  %528 = mul i32 %525, %527
  %529 = urem i32 %528, 2
  %530 = icmp eq i32 %529, 0
  %531 = icmp slt i32 %526, 10
  %532 = or i1 %530, %531
  br i1 %532, label %originalBBpart2161, label %originalBB159alteredBB

originalBBpart2161:                               ; preds = %originalBB159
  ret i32 %524, !dbg !581

originalBBalteredBB:                              ; preds = %originalBB, %2
  %533 = alloca i32, align 4
  %534 = alloca i8**, align 8
  %535 = alloca i32, align 4
  %536 = alloca i32, align 4
  store i32 %0, i32* %533, align 4
  call void @llvm.dbg.declare(metadata i32* %533, metadata !582, metadata !DIExpression()), !dbg !507
  store i8** %1, i8*** %534, align 8
  call void @llvm.dbg.declare(metadata i8*** %534, metadata !605, metadata !DIExpression()), !dbg !509
  call void @llvm.dbg.declare(metadata i32* %535, metadata !606, metadata !DIExpression()), !dbg !511
  call void @llvm.dbg.declare(metadata i32* %536, metadata !607, metadata !DIExpression()), !dbg !513
  store i32 0, i32* %536, align 4, !dbg !513
  %537 = load i32, i32* @uname_mode, align 4, !dbg !514
  %538 = icmp eq i32 %537, 2, !dbg !516
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %25
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %42
  %539 = load i32, i32* %11, align 4, !dbg !520
  %540 = load i8**, i8*** %12, align 8, !dbg !521
  %541 = call i32 @getopt_long(i32 %539, i8** %540, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.9, i64 0, i64 0), %struct.option* getelementptr inbounds ([3 x %struct.option], [3 x %struct.option]* @arch_long_options, i64 0, i64 0), i32* null) #10, !dbg !522
  store i32 %541, i32* %13, align 4, !dbg !523
  %542 = icmp ne i32 %541, -1, !dbg !524
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %63
  %543 = load i32, i32* %13, align 4, !dbg !525
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %81
  call void @usage(i32 0) #15, !dbg !528
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %98
  %544 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !530
  %545 = load i32, i32* @uname_mode, align 4, !dbg !530
  %546 = icmp eq i32 %545, 1, !dbg !530
  %547 = zext i1 %546 to i64, !dbg !530
  %548 = select i1 %546, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), !dbg !530
  %549 = load i8*, i8** @Version, align 8, !dbg !530
  call void (%struct._IO_FILE*, i8*, i8*, i8*, ...) @version_etc(%struct._IO_FILE* %544, i8* %548, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.23, i64 0, i64 0), i8* %549, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.30, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.31, i64 0, i64 0), i8* null), !dbg !530
  call void @exit(i32 0) #12, !dbg !530
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %121
  call void @usage(i32 1) #15, !dbg !531
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %138
  store i32 16, i32* %14, align 4, !dbg !532
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %155
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %172
  %550 = load i32, i32* %11, align 4, !dbg !536
  %551 = load i8**, i8*** %12, align 8, !dbg !537
  %552 = call i32 @getopt_long(i32 %550, i8** %551, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.32, i64 0, i64 0), %struct.option* getelementptr inbounds ([14 x %struct.option], [14 x %struct.option]* @uname_long_options, i64 0, i64 0), i32* null) #10, !dbg !538
  store i32 %552, i32* %13, align 4, !dbg !539
  %553 = icmp ne i32 %552, -1, !dbg !540
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %193
  %554 = load i32, i32* %13, align 4, !dbg !541
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %211
  store i32 -1, i32* %14, align 4, !dbg !544
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %228
  %555 = load i32, i32* %14, align 4, !dbg !547
  %_ = sub i32 0, %555
  %gen = add i32 %_, 1
  %_47 = sub i32 %555, 1
  %gen48 = mul i32 %_47, 1
  %_49 = shl i32 %555, 1
  %_50 = sub i32 %555, 1
  %gen51 = mul i32 %_50, 1
  %556 = or i32 %555, 1, !dbg !547
  store i32 %556, i32* %14, align 4, !dbg !547
  br label %originalBB46

originalBB55alteredBB:                            ; preds = %originalBB55, %247
  %557 = load i32, i32* %14, align 4, !dbg !549
  %_56 = sub i32 0, %557
  %gen57 = add i32 %_56, 2
  %_58 = sub i32 %557, 2
  %gen59 = mul i32 %_58, 2
  %558 = or i32 %557, 2, !dbg !549
  store i32 %558, i32* %14, align 4, !dbg !549
  br label %originalBB55

originalBB63alteredBB:                            ; preds = %originalBB63, %266
  %559 = load i32, i32* %14, align 4, !dbg !551
  %560 = or i32 %559, 4, !dbg !551
  store i32 %560, i32* %14, align 4, !dbg !551
  br label %originalBB63

originalBB67alteredBB:                            ; preds = %originalBB67, %285
  %561 = load i32, i32* %14, align 4, !dbg !553
  %_68 = shl i32 %561, 8
  %_69 = sub i32 0, %561
  %gen70 = add i32 %_69, 8
  %_71 = shl i32 %561, 8
  %_72 = sub i32 0, %561
  %gen73 = add i32 %_72, 8
  %_74 = sub i32 0, %561
  %gen75 = add i32 %_74, 8
  %562 = or i32 %561, 8, !dbg !553
  store i32 %562, i32* %14, align 4, !dbg !553
  br label %originalBB67

originalBB79alteredBB:                            ; preds = %originalBB79, %304
  %563 = load i32, i32* %14, align 4, !dbg !555
  %_80 = sub i32 %563, 16
  %gen81 = mul i32 %_80, 16
  %_82 = sub i32 0, %563
  %gen83 = add i32 %_82, 16
  %_84 = shl i32 %563, 16
  %_85 = shl i32 %563, 16
  %_86 = sub i32 %563, 16
  %gen87 = mul i32 %_86, 16
  %_88 = sub i32 0, %563
  %gen89 = add i32 %_88, 16
  %_90 = sub i32 0, %563
  %gen91 = add i32 %_90, 16
  %564 = or i32 %563, 16, !dbg !555
  store i32 %564, i32* %14, align 4, !dbg !555
  br label %originalBB79

originalBB95alteredBB:                            ; preds = %originalBB95, %323
  %565 = load i32, i32* %14, align 4, !dbg !557
  %_96 = sub i32 %565, 32
  %gen97 = mul i32 %_96, 32
  %_98 = sub i32 %565, 32
  %gen99 = mul i32 %_98, 32
  %_100 = sub i32 0, %565
  %gen101 = add i32 %_100, 32
  %_102 = sub i32 0, %565
  %gen103 = add i32 %_102, 32
  %_104 = sub i32 %565, 32
  %gen105 = mul i32 %_104, 32
  %566 = or i32 %565, 32, !dbg !557
  store i32 %566, i32* %14, align 4, !dbg !557
  br label %originalBB95

originalBB109alteredBB:                           ; preds = %originalBB109, %342
  %567 = load i32, i32* %14, align 4, !dbg !559
  %_110 = sub i32 0, %567
  %gen111 = add i32 %_110, 64
  %_112 = shl i32 %567, 64
  %_113 = sub i32 0, %567
  %gen114 = add i32 %_113, 64
  %568 = or i32 %567, 64, !dbg !559
  store i32 %568, i32* %14, align 4, !dbg !559
  br label %originalBB109

originalBB118alteredBB:                           ; preds = %originalBB118, %361
  %569 = load i32, i32* %14, align 4, !dbg !561
  %_119 = sub i32 %569, 128
  %gen120 = mul i32 %_119, 128
  %_121 = sub i32 0, %569
  %gen122 = add i32 %_121, 128
  %_123 = sub i32 0, %569
  %gen124 = add i32 %_123, 128
  %_125 = sub i32 0, %569
  %gen126 = add i32 %_125, 128
  %_127 = shl i32 %569, 128
  %570 = or i32 %569, 128, !dbg !561
  store i32 %570, i32* %14, align 4, !dbg !561
  br label %originalBB118

originalBB131alteredBB:                           ; preds = %originalBB131, %380
  call void @usage(i32 0) #15, !dbg !563
  br label %originalBB131

originalBB135alteredBB:                           ; preds = %originalBB135, %397
  %571 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !564
  %572 = load i32, i32* @uname_mode, align 4, !dbg !564
  %573 = icmp eq i32 %572, 1, !dbg !564
  %574 = zext i1 %573 to i64, !dbg !564
  %575 = select i1 %573, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), !dbg !564
  %576 = load i8*, i8** @Version, align 8, !dbg !564
  call void (%struct._IO_FILE*, i8*, i8*, i8*, ...) @version_etc(%struct._IO_FILE* %571, i8* %575, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.23, i64 0, i64 0), i8* %576, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.30, i64 0, i64 0), i8* null), !dbg !564
  call void @exit(i32 0) #12, !dbg !564
  br label %originalBB135

originalBB139alteredBB:                           ; preds = %originalBB139, %420
  call void @usage(i32 1) #15, !dbg !565
  br label %originalBB139

originalBB143alteredBB:                           ; preds = %originalBB143, %437
  br label %originalBB143

originalBB147alteredBB:                           ; preds = %originalBB147, %454
  br label %originalBB147

originalBB151alteredBB:                           ; preds = %originalBB151, %471
  %577 = load i32, i32* %11, align 4, !dbg !568
  %578 = load i32, i32* @optind, align 4, !dbg !570
  %579 = icmp ne i32 %577, %578, !dbg !571
  br label %originalBB151

originalBB155alteredBB:                           ; preds = %originalBB155, %491
  %580 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.33, i64 0, i64 0)) #10, !dbg !573
  %581 = load i8**, i8*** %12, align 8, !dbg !575
  %582 = load i32, i32* @optind, align 4, !dbg !576
  %583 = sext i32 %582 to i64, !dbg !575
  %584 = getelementptr inbounds i8*, i8** %581, i64 %583, !dbg !575
  %585 = load i8*, i8** %584, align 8, !dbg !575
  %586 = call i8* @quote(i8* %585), !dbg !577
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %580, i8* %586), !dbg !578
  call void @usage(i32 1) #15, !dbg !579
  br label %originalBB155

originalBB159alteredBB:                           ; preds = %originalBB159, %515
  %587 = load i32, i32* %14, align 4, !dbg !580
  br label %originalBB159
}

; Function Attrs: nounwind
declare dso_local i32 @uname(%struct.utsname*) #2

; Function Attrs: nounwind readnone
declare dso_local i32* @__errno_location() #8

declare dso_local void @error(i32, i32, i8*, ...) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_element(i8*) #4 !dbg !38 {
  %2 = load i32, i32* @x.7
  %3 = load i32, i32* @y.8
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !608, metadata !DIExpression()), !dbg !609
  %11 = load i8, i8* @print_element.printed, align 1, !dbg !610
  %12 = trunc i8 %11 to i1, !dbg !610
  %13 = load i32, i32* @x.7
  %14 = load i32, i32* @y.8
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %21, label %39, !dbg !612

21:                                               ; preds = %originalBBpart2
  %22 = load i32, i32* @x.7
  %23 = load i32, i32* @y.8
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  %30 = call i32 @putchar_unlocked(i32 32), !dbg !613
  %31 = load i32, i32* @x.7
  %32 = load i32, i32* @y.8
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %39, !dbg !613

39:                                               ; preds = %originalBBpart24, %originalBBpart2
  %40 = load i32, i32* @x.7
  %41 = load i32, i32* @y.8
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %39, %originalBB6alteredBB
  store i8 1, i8* @print_element.printed, align 1, !dbg !614
  %48 = load i8*, i8** %10, align 8, !dbg !615
  %49 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !615
  %50 = call i32 @fputs_unlocked(i8* %48, %struct._IO_FILE* %49), !dbg !615
  %51 = load i32, i32* @x.7
  %52 = load i32, i32* @y.8
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  ret void, !dbg !616

originalBBalteredBB:                              ; preds = %originalBB, %1
  %59 = alloca i8*, align 8
  store i8* %0, i8** %59, align 8
  call void @llvm.dbg.declare(metadata i8** %59, metadata !617, metadata !DIExpression()), !dbg !609
  %60 = load i8, i8* @print_element.printed, align 1, !dbg !610
  %61 = trunc i8 %60 to i1, !dbg !610
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  %62 = call i32 @putchar_unlocked(i32 32), !dbg !613
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %39
  store i8 1, i8* @print_element.printed, align 1, !dbg !614
  %63 = load i8*, i8** %10, align 8, !dbg !615
  %64 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !615
  %65 = call i32 @fputs_unlocked(i8* %63, %struct._IO_FILE* %64), !dbg !615
  br label %originalBB6
}

declare dso_local i32 @putchar_unlocked(i32) #3

; Function Attrs: nounwind
declare dso_local i32 @getopt_long(i32, i8**, i8*, %struct.option*, i32*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @close_stdout() #4 !dbg !639 {
  %1 = load i32, i32* @x.9
  %2 = load i32, i32* @y.10
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = alloca i8*, align 8
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !642
  %11 = call i32 @close_stream(%struct._IO_FILE* %10), !dbg !644
  %12 = icmp ne i32 %11, 0, !dbg !645
  %13 = load i32, i32* @x.9
  %14 = load i32, i32* @y.10
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %21, label %140, !dbg !646

21:                                               ; preds = %originalBBpart2
  %22 = load i32, i32* @x.9
  %23 = load i32, i32* @y.10
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  %30 = load i8, i8* @ignore_EPIPE, align 1, !dbg !647
  %31 = trunc i8 %30 to i1, !dbg !647
  %32 = load i32, i32* @x.9
  %33 = load i32, i32* @y.10
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %31, label %40, label %60, !dbg !648

40:                                               ; preds = %originalBBpart24
  %41 = load i32, i32* @x.9
  %42 = load i32, i32* @y.10
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %40, %originalBB6alteredBB
  %49 = call i32* @__errno_location() #14, !dbg !649
  %50 = load i32, i32* %49, align 4, !dbg !649
  %51 = icmp eq i32 %50, 32, !dbg !650
  %52 = load i32, i32* @x.9
  %53 = load i32, i32* @y.10
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %51, label %140, label %60, !dbg !651

60:                                               ; preds = %originalBBpart28, %originalBBpart24
  call void @llvm.dbg.declare(metadata i8** %9, metadata !652, metadata !DIExpression()), !dbg !654
  %61 = load i32, i32* @x.9
  %62 = load i32, i32* @y.10
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %60, %originalBB10alteredBB
  %69 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.50, i64 0, i64 0)) #10, !dbg !655
  store i8* %69, i8** %9, align 8, !dbg !654
  %70 = load i8*, i8** @file_name, align 8, !dbg !656
  %71 = icmp ne i8* %70, null, !dbg !656
  %72 = load i32, i32* @x.9
  %73 = load i32, i32* @y.10
  %74 = sub i32 %72, 1
  %75 = mul i32 %72, %74
  %76 = urem i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %77, %78
  br i1 %79, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %71, label %80, label %102, !dbg !658

80:                                               ; preds = %originalBBpart212
  %81 = load i32, i32* @x.9
  %82 = load i32, i32* @y.10
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %80, %originalBB14alteredBB
  %89 = call i32* @__errno_location() #14, !dbg !659
  %90 = load i32, i32* %89, align 4, !dbg !659
  %91 = load i8*, i8** @file_name, align 8, !dbg !660
  %92 = call i8* @quotearg_colon(i8* %91), !dbg !661
  %93 = load i8*, i8** %9, align 8, !dbg !662
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %90, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.51, i64 0, i64 0), i8* %92, i8* %93), !dbg !663
  %94 = load i32, i32* @x.9
  %95 = load i32, i32* @y.10
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %122, !dbg !663

102:                                              ; preds = %originalBBpart212
  %103 = load i32, i32* @x.9
  %104 = load i32, i32* @y.10
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %102, %originalBB18alteredBB
  %111 = call i32* @__errno_location() #14, !dbg !664
  %112 = load i32, i32* %111, align 4, !dbg !664
  %113 = load i8*, i8** %9, align 8, !dbg !665
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %112, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.52, i64 0, i64 0), i8* %113), !dbg !666
  %114 = load i32, i32* @x.9
  %115 = load i32, i32* @y.10
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %122

122:                                              ; preds = %originalBBpart220, %originalBBpart216
  %123 = load i32, i32* @x.9
  %124 = load i32, i32* @y.10
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %122, %originalBB22alteredBB
  %131 = load volatile i32, i32* @exit_failure, align 4, !dbg !667
  call void @_exit(i32 %131) #15, !dbg !668
  %132 = load i32, i32* @x.9
  %133 = load i32, i32* @y.10
  %134 = sub i32 %132, 1
  %135 = mul i32 %132, %134
  %136 = urem i32 %135, 2
  %137 = icmp eq i32 %136, 0
  %138 = icmp slt i32 %133, 10
  %139 = or i1 %137, %138
  br i1 %139, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  unreachable, !dbg !668

140:                                              ; preds = %originalBBpart28, %originalBBpart2
  %141 = load i32, i32* @x.9
  %142 = load i32, i32* @y.10
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %140, %originalBB26alteredBB
  %149 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !669
  %150 = call i32 @close_stream(%struct._IO_FILE* %149), !dbg !671
  %151 = icmp ne i32 %150, 0, !dbg !672
  %152 = load i32, i32* @x.9
  %153 = load i32, i32* @y.10
  %154 = sub i32 %152, 1
  %155 = mul i32 %152, %154
  %156 = urem i32 %155, 2
  %157 = icmp eq i32 %156, 0
  %158 = icmp slt i32 %153, 10
  %159 = or i1 %157, %158
  br i1 %159, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %151, label %160, label %178, !dbg !673

160:                                              ; preds = %originalBBpart228
  %161 = load i32, i32* @x.9
  %162 = load i32, i32* @y.10
  %163 = sub i32 %161, 1
  %164 = mul i32 %161, %163
  %165 = urem i32 %164, 2
  %166 = icmp eq i32 %165, 0
  %167 = icmp slt i32 %162, 10
  %168 = or i1 %166, %167
  br i1 %168, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %160, %originalBB30alteredBB
  %169 = load volatile i32, i32* @exit_failure, align 4, !dbg !674
  call void @_exit(i32 %169) #15, !dbg !675
  %170 = load i32, i32* @x.9
  %171 = load i32, i32* @y.10
  %172 = sub i32 %170, 1
  %173 = mul i32 %170, %172
  %174 = urem i32 %173, 2
  %175 = icmp eq i32 %174, 0
  %176 = icmp slt i32 %171, 10
  %177 = or i1 %175, %176
  br i1 %177, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  unreachable, !dbg !675

178:                                              ; preds = %originalBBpart228
  %179 = load i32, i32* @x.9
  %180 = load i32, i32* @y.10
  %181 = sub i32 %179, 1
  %182 = mul i32 %179, %181
  %183 = urem i32 %182, 2
  %184 = icmp eq i32 %183, 0
  %185 = icmp slt i32 %180, 10
  %186 = or i1 %184, %185
  br i1 %186, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %178, %originalBB34alteredBB
  %187 = load i32, i32* @x.9
  %188 = load i32, i32* @y.10
  %189 = sub i32 %187, 1
  %190 = mul i32 %187, %189
  %191 = urem i32 %190, 2
  %192 = icmp eq i32 %191, 0
  %193 = icmp slt i32 %188, 10
  %194 = or i1 %192, %193
  br i1 %194, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  ret void, !dbg !676

originalBBalteredBB:                              ; preds = %originalBB, %0
  %195 = alloca i8*, align 8
  %196 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !642
  %197 = call i32 @close_stream(%struct._IO_FILE* %196), !dbg !644
  %198 = icmp ne i32 %197, 0, !dbg !645
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  %199 = load i8, i8* @ignore_EPIPE, align 1, !dbg !647
  %200 = trunc i8 %199 to i1, !dbg !647
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %40
  %201 = call i32* @__errno_location() #14, !dbg !649
  %202 = load i32, i32* %201, align 4, !dbg !649
  %203 = icmp eq i32 %202, 32, !dbg !650
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %60
  %204 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.50, i64 0, i64 0)) #10, !dbg !655
  store i8* %204, i8** %9, align 8, !dbg !654
  %205 = load i8*, i8** @file_name, align 8, !dbg !656
  %206 = icmp ne i8* %205, null, !dbg !656
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %80
  %207 = call i32* @__errno_location() #14, !dbg !659
  %208 = load i32, i32* %207, align 4, !dbg !659
  %209 = load i8*, i8** @file_name, align 8, !dbg !660
  %210 = call i8* @quotearg_colon(i8* %209), !dbg !661
  %211 = load i8*, i8** %9, align 8, !dbg !662
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %208, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.51, i64 0, i64 0), i8* %210, i8* %211), !dbg !663
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %102
  %212 = call i32* @__errno_location() #14, !dbg !664
  %213 = load i32, i32* %212, align 4, !dbg !664
  %214 = load i8*, i8** %9, align 8, !dbg !665
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %213, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.52, i64 0, i64 0), i8* %214), !dbg !666
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %122
  %215 = load volatile i32, i32* @exit_failure, align 4, !dbg !667
  call void @_exit(i32 %215) #15, !dbg !668
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %140
  %216 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !669
  %217 = call i32 @close_stream(%struct._IO_FILE* %216), !dbg !671
  %218 = icmp ne i32 %217, 0, !dbg !672
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %160
  %219 = load volatile i32, i32* @exit_failure, align 4, !dbg !674
  call void @_exit(i32 %219) #15, !dbg !675
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %178
  br label %originalBB34
}

; Function Attrs: noreturn
declare dso_local void @_exit(i32) #9

; Function Attrs: noinline nounwind optnone uwtable
define internal void @set_program_name(i8*) #4 !dbg !677 {
  %2 = load i32, i32* @x.11
  %3 = load i32, i32* @y.12
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !678, metadata !DIExpression()), !dbg !679
  call void @llvm.dbg.declare(metadata i8** %11, metadata !680, metadata !DIExpression()), !dbg !681
  call void @llvm.dbg.declare(metadata i8** %12, metadata !682, metadata !DIExpression()), !dbg !683
  %13 = load i8*, i8** %10, align 8, !dbg !684
  %14 = icmp eq i8* %13, null, !dbg !686
  %15 = load i32, i32* @x.11
  %16 = load i32, i32* @y.12
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %14, label %23, label %42, !dbg !687

23:                                               ; preds = %originalBBpart2
  %24 = load i32, i32* @x.11
  %25 = load i32, i32* @y.12
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %23, %originalBB1alteredBB
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !688
  %33 = call i32 @fputs(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.57, i64 0, i64 0), %struct._IO_FILE* %32), !dbg !690
  call void @abort() #12, !dbg !691
  %34 = load i32, i32* @x.11
  %35 = load i32, i32* @y.12
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  unreachable, !dbg !691

42:                                               ; preds = %originalBBpart2
  %43 = load i32, i32* @x.11
  %44 = load i32, i32* @y.12
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %42, %originalBB6alteredBB
  %51 = load i8*, i8** %10, align 8, !dbg !692
  %52 = call i8* @strrchr(i8* %51, i32 47) #13, !dbg !693
  store i8* %52, i8** %11, align 8, !dbg !694
  %53 = load i8*, i8** %11, align 8, !dbg !695
  %54 = icmp ne i8* %53, null, !dbg !696
  %55 = load i32, i32* @x.11
  %56 = load i32, i32* @y.12
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %54, label %63, label %82, !dbg !695

63:                                               ; preds = %originalBBpart28
  %64 = load i32, i32* @x.11
  %65 = load i32, i32* @y.12
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %63, %originalBB10alteredBB
  %72 = load i8*, i8** %11, align 8, !dbg !697
  %73 = getelementptr inbounds i8, i8* %72, i64 1, !dbg !698
  %74 = load i32, i32* @x.11
  %75 = load i32, i32* @y.12
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %100, !dbg !695

82:                                               ; preds = %originalBBpart28
  %83 = load i32, i32* @x.11
  %84 = load i32, i32* @y.12
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %82, %originalBB14alteredBB
  %91 = load i8*, i8** %10, align 8, !dbg !699
  %92 = load i32, i32* @x.11
  %93 = load i32, i32* @y.12
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %100, !dbg !695

100:                                              ; preds = %originalBBpart216, %originalBBpart212
  %101 = phi i8* [ %73, %originalBBpart212 ], [ %91, %originalBBpart216 ], !dbg !695
  %102 = load i32, i32* @x.11
  %103 = load i32, i32* @y.12
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %100, %originalBB18alteredBB
  store i8* %101, i8** %12, align 8, !dbg !700
  %110 = load i8*, i8** %12, align 8, !dbg !701
  %111 = load i8*, i8** %10, align 8, !dbg !703
  %112 = ptrtoint i8* %110 to i64, !dbg !704
  %113 = ptrtoint i8* %111 to i64, !dbg !704
  %114 = sub i64 %112, %113, !dbg !704
  %115 = icmp sge i64 %114, 7, !dbg !705
  %116 = load i32, i32* @x.11
  %117 = load i32, i32* @y.12
  %118 = sub i32 %116, 1
  %119 = mul i32 %116, %118
  %120 = urem i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %117, 10
  %123 = or i1 %121, %122
  br i1 %123, label %originalBBpart223, label %originalBB18alteredBB

originalBBpart223:                                ; preds = %originalBB18
  br i1 %115, label %124, label %203, !dbg !706

124:                                              ; preds = %originalBBpart223
  %125 = load i32, i32* @x.11
  %126 = load i32, i32* @y.12
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBB25, label %originalBB25alteredBB

originalBB25:                                     ; preds = %124, %originalBB25alteredBB
  %133 = load i8*, i8** %12, align 8, !dbg !707
  %134 = getelementptr inbounds i8, i8* %133, i64 -7, !dbg !708
  %135 = call i32 @strncmp(i8* %134, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1.58, i64 0, i64 0), i64 7) #13, !dbg !709
  %136 = icmp eq i32 %135, 0, !dbg !710
  %137 = load i32, i32* @x.11
  %138 = load i32, i32* @y.12
  %139 = sub i32 %137, 1
  %140 = mul i32 %137, %139
  %141 = urem i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %142, %143
  br i1 %144, label %originalBBpart227, label %originalBB25alteredBB

originalBBpart227:                                ; preds = %originalBB25
  br i1 %136, label %145, label %203, !dbg !711

145:                                              ; preds = %originalBBpart227
  %146 = load i32, i32* @x.11
  %147 = load i32, i32* @y.12
  %148 = sub i32 %146, 1
  %149 = mul i32 %146, %148
  %150 = urem i32 %149, 2
  %151 = icmp eq i32 %150, 0
  %152 = icmp slt i32 %147, 10
  %153 = or i1 %151, %152
  br i1 %153, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %145, %originalBB29alteredBB
  %154 = load i8*, i8** %12, align 8, !dbg !712
  store i8* %154, i8** %10, align 8, !dbg !714
  %155 = load i8*, i8** %12, align 8, !dbg !715
  %156 = call i32 @strncmp(i8* %155, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.59, i64 0, i64 0), i64 3) #13, !dbg !717
  %157 = icmp eq i32 %156, 0, !dbg !718
  %158 = load i32, i32* @x.11
  %159 = load i32, i32* @y.12
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBBpart231, label %originalBB29alteredBB

originalBBpart231:                                ; preds = %originalBB29
  br i1 %157, label %166, label %186, !dbg !719

166:                                              ; preds = %originalBBpart231
  %167 = load i32, i32* @x.11
  %168 = load i32, i32* @y.12
  %169 = sub i32 %167, 1
  %170 = mul i32 %167, %169
  %171 = urem i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %172, %173
  br i1 %174, label %originalBB33, label %originalBB33alteredBB

originalBB33:                                     ; preds = %166, %originalBB33alteredBB
  %175 = load i8*, i8** %12, align 8, !dbg !720
  %176 = getelementptr inbounds i8, i8* %175, i64 3, !dbg !722
  store i8* %176, i8** %10, align 8, !dbg !723
  %177 = load i8*, i8** %10, align 8, !dbg !724
  store i8* %177, i8** @program_invocation_short_name, align 8, !dbg !725
  %178 = load i32, i32* @x.11
  %179 = load i32, i32* @y.12
  %180 = sub i32 %178, 1
  %181 = mul i32 %178, %180
  %182 = urem i32 %181, 2
  %183 = icmp eq i32 %182, 0
  %184 = icmp slt i32 %179, 10
  %185 = or i1 %183, %184
  br i1 %185, label %originalBBpart235, label %originalBB33alteredBB

originalBBpart235:                                ; preds = %originalBB33
  br label %186, !dbg !726

186:                                              ; preds = %originalBBpart235, %originalBBpart231
  %187 = load i32, i32* @x.11
  %188 = load i32, i32* @y.12
  %189 = sub i32 %187, 1
  %190 = mul i32 %187, %189
  %191 = urem i32 %190, 2
  %192 = icmp eq i32 %191, 0
  %193 = icmp slt i32 %188, 10
  %194 = or i1 %192, %193
  br i1 %194, label %originalBB37, label %originalBB37alteredBB

originalBB37:                                     ; preds = %186, %originalBB37alteredBB
  %195 = load i32, i32* @x.11
  %196 = load i32, i32* @y.12
  %197 = sub i32 %195, 1
  %198 = mul i32 %195, %197
  %199 = urem i32 %198, 2
  %200 = icmp eq i32 %199, 0
  %201 = icmp slt i32 %196, 10
  %202 = or i1 %200, %201
  br i1 %202, label %originalBBpart239, label %originalBB37alteredBB

originalBBpart239:                                ; preds = %originalBB37
  br label %203, !dbg !727

203:                                              ; preds = %originalBBpart239, %originalBBpart227, %originalBBpart223
  %204 = load i32, i32* @x.11
  %205 = load i32, i32* @y.12
  %206 = sub i32 %204, 1
  %207 = mul i32 %204, %206
  %208 = urem i32 %207, 2
  %209 = icmp eq i32 %208, 0
  %210 = icmp slt i32 %205, 10
  %211 = or i1 %209, %210
  br i1 %211, label %originalBB41, label %originalBB41alteredBB

originalBB41:                                     ; preds = %203, %originalBB41alteredBB
  %212 = load i8*, i8** %10, align 8, !dbg !728
  store i8* %212, i8** @program_name, align 8, !dbg !729
  %213 = load i8*, i8** %10, align 8, !dbg !730
  store i8* %213, i8** @program_invocation_name, align 8, !dbg !731
  %214 = load i32, i32* @x.11
  %215 = load i32, i32* @y.12
  %216 = sub i32 %214, 1
  %217 = mul i32 %214, %216
  %218 = urem i32 %217, 2
  %219 = icmp eq i32 %218, 0
  %220 = icmp slt i32 %215, 10
  %221 = or i1 %219, %220
  br i1 %221, label %originalBBpart243, label %originalBB41alteredBB

originalBBpart243:                                ; preds = %originalBB41
  ret void, !dbg !732

originalBBalteredBB:                              ; preds = %originalBB, %1
  %222 = alloca i8*, align 8
  %223 = alloca i8*, align 8
  %224 = alloca i8*, align 8
  store i8* %0, i8** %222, align 8
  call void @llvm.dbg.declare(metadata i8** %222, metadata !733, metadata !DIExpression()), !dbg !679
  call void @llvm.dbg.declare(metadata i8** %223, metadata !739, metadata !DIExpression()), !dbg !681
  call void @llvm.dbg.declare(metadata i8** %224, metadata !740, metadata !DIExpression()), !dbg !683
  %225 = load i8*, i8** %222, align 8, !dbg !684
  %226 = icmp eq i8* %225, null, !dbg !686
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %23
  %227 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !688
  %228 = call i32 @fputs(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.57, i64 0, i64 0), %struct._IO_FILE* %227), !dbg !690
  call void @abort() #12, !dbg !691
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %42
  %229 = load i8*, i8** %10, align 8, !dbg !692
  %230 = call i8* @strrchr(i8* %229, i32 47) #13, !dbg !693
  store i8* %230, i8** %11, align 8, !dbg !694
  %231 = load i8*, i8** %11, align 8, !dbg !695
  %232 = icmp ne i8* %231, null, !dbg !696
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %63
  %233 = load i8*, i8** %11, align 8, !dbg !697
  %234 = getelementptr inbounds i8, i8* %233, i64 1, !dbg !698
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %82
  %235 = load i8*, i8** %10, align 8, !dbg !699
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %100
  store i8* %101, i8** %12, align 8, !dbg !700
  %236 = load i8*, i8** %12, align 8, !dbg !701
  %237 = load i8*, i8** %10, align 8, !dbg !703
  %238 = ptrtoint i8* %236 to i64, !dbg !704
  %239 = ptrtoint i8* %237 to i64, !dbg !704
  %_ = sub i64 0, %238
  %gen = add i64 %_, %239
  %_19 = shl i64 %238, %239
  %_20 = sub i64 %238, %239
  %gen21 = mul i64 %_20, %239
  %240 = sub i64 %238, %239, !dbg !704
  %241 = icmp sge i64 %240, 7, !dbg !705
  br label %originalBB18

originalBB25alteredBB:                            ; preds = %originalBB25, %124
  %242 = load i8*, i8** %12, align 8, !dbg !707
  %243 = getelementptr inbounds i8, i8* %242, i64 -7, !dbg !708
  %244 = call i32 @strncmp(i8* %243, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1.58, i64 0, i64 0), i64 7) #13, !dbg !709
  %245 = icmp eq i32 %244, 0, !dbg !710
  br label %originalBB25

originalBB29alteredBB:                            ; preds = %originalBB29, %145
  %246 = load i8*, i8** %12, align 8, !dbg !712
  store i8* %246, i8** %10, align 8, !dbg !714
  %247 = load i8*, i8** %12, align 8, !dbg !715
  %248 = call i32 @strncmp(i8* %247, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.59, i64 0, i64 0), i64 3) #13, !dbg !717
  %249 = icmp eq i32 %248, 0, !dbg !718
  br label %originalBB29

originalBB33alteredBB:                            ; preds = %originalBB33, %166
  %250 = load i8*, i8** %12, align 8, !dbg !720
  %251 = getelementptr inbounds i8, i8* %250, i64 3, !dbg !722
  store i8* %251, i8** %10, align 8, !dbg !723
  %252 = load i8*, i8** %10, align 8, !dbg !724
  store i8* %252, i8** @program_invocation_short_name, align 8, !dbg !725
  br label %originalBB33

originalBB37alteredBB:                            ; preds = %originalBB37, %186
  br label %originalBB37

originalBB41alteredBB:                            ; preds = %originalBB41, %203
  %253 = load i8*, i8** %10, align 8, !dbg !728
  store i8* %253, i8** @program_name, align 8, !dbg !729
  %254 = load i8*, i8** %10, align 8, !dbg !730
  store i8* %254, i8** @program_invocation_name, align 8, !dbg !731
  br label %originalBB41
}

declare dso_local i32 @fputs(i8*, %struct._IO_FILE*) #3

; Function Attrs: noreturn nounwind
declare dso_local void @abort() #5

; Function Attrs: nounwind readonly
declare dso_local i8* @strrchr(i8*, i32) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @set_char_quoting(%struct.quoting_options*, i8 signext, i32) #4 !dbg !741 {
  %4 = load i32, i32* @x.13
  %5 = load i32, i32* @y.14
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca %struct.quoting_options*, align 8
  %13 = alloca i8, align 1
  %14 = alloca i32, align 4
  %15 = alloca i8, align 1
  %16 = alloca i32*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  store %struct.quoting_options* %0, %struct.quoting_options** %12, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %12, metadata !745, metadata !DIExpression()), !dbg !746
  store i8 %1, i8* %13, align 1
  call void @llvm.dbg.declare(metadata i8* %13, metadata !747, metadata !DIExpression()), !dbg !748
  store i32 %2, i32* %14, align 4
  call void @llvm.dbg.declare(metadata i32* %14, metadata !749, metadata !DIExpression()), !dbg !750
  call void @llvm.dbg.declare(metadata i8* %15, metadata !751, metadata !DIExpression()), !dbg !752
  %19 = load i8, i8* %13, align 1, !dbg !753
  store i8 %19, i8* %15, align 1, !dbg !752
  call void @llvm.dbg.declare(metadata i32** %16, metadata !754, metadata !DIExpression()), !dbg !756
  %20 = load %struct.quoting_options*, %struct.quoting_options** %12, align 8, !dbg !757
  %21 = icmp ne %struct.quoting_options* %20, null, !dbg !757
  %22 = load i32, i32* @x.13
  %23 = load i32, i32* @y.14
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %21, label %30, label %48, !dbg !757

30:                                               ; preds = %originalBBpart2
  %31 = load i32, i32* @x.13
  %32 = load i32, i32* @y.14
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %30, %originalBB1alteredBB
  %39 = load %struct.quoting_options*, %struct.quoting_options** %12, align 8, !dbg !758
  %40 = load i32, i32* @x.13
  %41 = load i32, i32* @y.14
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %65, !dbg !757

48:                                               ; preds = %originalBBpart2
  %49 = load i32, i32* @x.13
  %50 = load i32, i32* @y.14
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load i32, i32* @x.13
  %58 = load i32, i32* @y.14
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %65, !dbg !757

65:                                               ; preds = %originalBBpart28, %originalBBpart24
  %66 = phi %struct.quoting_options* [ %39, %originalBBpart24 ], [ @default_quoting_options, %originalBBpart28 ], !dbg !757
  %67 = load i32, i32* @x.13
  %68 = load i32, i32* @y.14
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %65, %originalBB10alteredBB
  %75 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %66, i32 0, i32 2, !dbg !759
  %76 = getelementptr inbounds [8 x i32], [8 x i32]* %75, i64 0, i64 0, !dbg !760
  %77 = load i8, i8* %15, align 1, !dbg !761
  %78 = zext i8 %77 to i64, !dbg !761
  %79 = udiv i64 %78, 32, !dbg !762
  %80 = getelementptr inbounds i32, i32* %76, i64 %79, !dbg !763
  store i32* %80, i32** %16, align 8, !dbg !756
  call void @llvm.dbg.declare(metadata i32* %17, metadata !764, metadata !DIExpression()), !dbg !765
  %81 = load i8, i8* %15, align 1, !dbg !766
  %82 = zext i8 %81 to i64, !dbg !766
  %83 = urem i64 %82, 32, !dbg !767
  %84 = trunc i64 %83 to i32, !dbg !766
  store i32 %84, i32* %17, align 4, !dbg !765
  call void @llvm.dbg.declare(metadata i32* %18, metadata !768, metadata !DIExpression()), !dbg !769
  %85 = load i32*, i32** %16, align 8, !dbg !770
  %86 = load i32, i32* %85, align 4, !dbg !771
  %87 = load i32, i32* %17, align 4, !dbg !772
  %88 = lshr i32 %86, %87, !dbg !773
  %89 = and i32 %88, 1, !dbg !774
  store i32 %89, i32* %18, align 4, !dbg !769
  %90 = load i32, i32* %14, align 4, !dbg !775
  %91 = and i32 %90, 1, !dbg !776
  %92 = load i32, i32* %18, align 4, !dbg !777
  %93 = xor i32 %91, %92, !dbg !778
  %94 = load i32, i32* %17, align 4, !dbg !779
  %95 = shl i32 %93, %94, !dbg !780
  %96 = load i32*, i32** %16, align 8, !dbg !781
  %97 = load i32, i32* %96, align 4, !dbg !782
  %98 = xor i32 %97, %95, !dbg !782
  store i32 %98, i32* %96, align 4, !dbg !782
  %99 = load i32, i32* %18, align 4, !dbg !783
  %100 = load i32, i32* @x.13
  %101 = load i32, i32* @y.14
  %102 = sub i32 %100, 1
  %103 = mul i32 %100, %102
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %105, %106
  br i1 %107, label %originalBBpart255, label %originalBB10alteredBB

originalBBpart255:                                ; preds = %originalBB10
  ret i32 %99, !dbg !784

originalBBalteredBB:                              ; preds = %originalBB, %3
  %108 = alloca %struct.quoting_options*, align 8
  %109 = alloca i8, align 1
  %110 = alloca i32, align 4
  %111 = alloca i8, align 1
  %112 = alloca i32*, align 8
  %113 = alloca i32, align 4
  %114 = alloca i32, align 4
  store %struct.quoting_options* %0, %struct.quoting_options** %108, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %108, metadata !785, metadata !DIExpression()), !dbg !746
  store i8 %1, i8* %109, align 1
  call void @llvm.dbg.declare(metadata i8* %109, metadata !820, metadata !DIExpression()), !dbg !748
  store i32 %2, i32* %110, align 4
  call void @llvm.dbg.declare(metadata i32* %110, metadata !821, metadata !DIExpression()), !dbg !750
  call void @llvm.dbg.declare(metadata i8* %111, metadata !822, metadata !DIExpression()), !dbg !752
  %115 = load i8, i8* %109, align 1, !dbg !753
  store i8 %115, i8* %111, align 1, !dbg !752
  call void @llvm.dbg.declare(metadata i32** %112, metadata !823, metadata !DIExpression()), !dbg !756
  %116 = load %struct.quoting_options*, %struct.quoting_options** %108, align 8, !dbg !757
  %117 = icmp ne %struct.quoting_options* %116, null, !dbg !757
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %30
  %118 = load %struct.quoting_options*, %struct.quoting_options** %12, align 8, !dbg !758
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %65
  %119 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %66, i32 0, i32 2, !dbg !759
  %120 = getelementptr inbounds [8 x i32], [8 x i32]* %119, i64 0, i64 0, !dbg !760
  %121 = load i8, i8* %15, align 1, !dbg !761
  %122 = zext i8 %121 to i64, !dbg !761
  %_ = shl i64 %122, 32
  %_11 = sub i64 0, %122
  %gen = add i64 %_11, 32
  %_12 = sub i64 %122, 32
  %gen13 = mul i64 %_12, 32
  %_14 = sub i64 0, %122
  %gen15 = add i64 %_14, 32
  %123 = udiv i64 %122, 32, !dbg !762
  %124 = getelementptr inbounds i32, i32* %120, i64 %123, !dbg !763
  store i32* %124, i32** %16, align 8, !dbg !756
  call void @llvm.dbg.declare(metadata !11, metadata !824, metadata !DIExpression()), !dbg !765
  %125 = load i8, i8* %15, align 1, !dbg !766
  %126 = zext i8 %125 to i64, !dbg !766
  %_16 = sub i64 0, %126
  %gen17 = add i64 %_16, 32
  %127 = urem i64 %126, 32, !dbg !767
  %128 = trunc i64 %127 to i32, !dbg !766
  store i32 %128, i32* %17, align 4, !dbg !765
  call void @llvm.dbg.declare(metadata !11, metadata !859, metadata !DIExpression()), !dbg !769
  %129 = load i32*, i32** %16, align 8, !dbg !770
  %130 = load i32, i32* %129, align 4, !dbg !771
  %131 = load i32, i32* %17, align 4, !dbg !772
  %132 = lshr i32 %130, %131, !dbg !773
  %_18 = sub i32 %132, 1
  %gen19 = mul i32 %_18, 1
  %_20 = sub i32 %132, 1
  %gen21 = mul i32 %_20, 1
  %_22 = shl i32 %132, 1
  %_23 = sub i32 0, %132
  %gen24 = add i32 %_23, 1
  %_25 = sub i32 %132, 1
  %gen26 = mul i32 %_25, 1
  %133 = and i32 %132, 1, !dbg !774
  store i32 %133, i32* %18, align 4, !dbg !769
  %134 = load i32, i32* %14, align 4, !dbg !775
  %_27 = sub i32 %134, 1
  %gen28 = mul i32 %_27, 1
  %_29 = sub i32 0, %134
  %gen30 = add i32 %_29, 1
  %_31 = shl i32 %134, 1
  %135 = and i32 %134, 1, !dbg !776
  %136 = load i32, i32* %18, align 4, !dbg !777
  %_32 = sub i32 %135, %136
  %gen33 = mul i32 %_32, %136
  %_34 = sub i32 0, %135
  %gen35 = add i32 %_34, %136
  %137 = xor i32 %135, %136, !dbg !778
  %138 = load i32, i32* %17, align 4, !dbg !779
  %_36 = shl i32 %137, %138
  %_37 = sub i32 0, %137
  %gen38 = add i32 %_37, %138
  %_39 = shl i32 %137, %138
  %_40 = sub i32 %137, %138
  %gen41 = mul i32 %_40, %138
  %_42 = sub i32 0, %137
  %gen43 = add i32 %_42, %138
  %_44 = sub i32 0, %137
  %gen45 = add i32 %_44, %138
  %139 = shl i32 %137, %138, !dbg !780
  %140 = load i32*, i32** %16, align 8, !dbg !781
  %141 = load i32, i32* %140, align 4, !dbg !782
  %_46 = shl i32 %141, %139
  %_47 = shl i32 %141, %139
  %_48 = sub i32 %141, %139
  %gen49 = mul i32 %_48, %139
  %_50 = sub i32 %141, %139
  %gen51 = mul i32 %_50, %139
  %_52 = shl i32 %141, %139
  %_53 = shl i32 %141, %139
  %142 = xor i32 %141, %139, !dbg !782
  store i32 %142, i32* %140, align 4, !dbg !782
  %143 = load i32, i32* %18, align 4, !dbg !783
  br label %originalBB10
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_char_mem(i8*, i64, i8 signext) #4 !dbg !860 {
  %4 = load i32, i32* @x.15
  %5 = load i32, i32* @y.16
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i8, align 1
  %15 = alloca %struct.quoting_options, align 8
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !863, metadata !DIExpression()), !dbg !864
  store i64 %1, i64* %13, align 8
  call void @llvm.dbg.declare(metadata i64* %13, metadata !865, metadata !DIExpression()), !dbg !866
  store i8 %2, i8* %14, align 1
  call void @llvm.dbg.declare(metadata i8* %14, metadata !867, metadata !DIExpression()), !dbg !868
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %15, metadata !869, metadata !DIExpression()), !dbg !870
  %16 = bitcast %struct.quoting_options* %15 to i8*, !dbg !871
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i1 false), !dbg !871
  %17 = load i8, i8* %14, align 1, !dbg !872
  %18 = call i32 @set_char_quoting(%struct.quoting_options* %15, i8 signext %17, i32 1), !dbg !873
  %19 = load i8*, i8** %12, align 8, !dbg !874
  %20 = load i64, i64* %13, align 8, !dbg !875
  %21 = call i8* @quotearg_n_options(i32 0, i8* %19, i64 %20, %struct.quoting_options* %15), !dbg !876
  %22 = load i32, i32* @x.15
  %23 = load i32, i32* @y.16
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %21, !dbg !877

originalBBalteredBB:                              ; preds = %originalBB, %3
  %30 = alloca i8*, align 8
  %31 = alloca i64, align 8
  %32 = alloca i8, align 1
  %33 = alloca %struct.quoting_options, align 8
  store i8* %0, i8** %30, align 8
  call void @llvm.dbg.declare(metadata i8** %30, metadata !878, metadata !DIExpression()), !dbg !864
  store i64 %1, i64* %31, align 8
  call void @llvm.dbg.declare(metadata i64* %31, metadata !910, metadata !DIExpression()), !dbg !866
  store i8 %2, i8* %32, align 1
  call void @llvm.dbg.declare(metadata i8* %32, metadata !911, metadata !DIExpression()), !dbg !868
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %33, metadata !912, metadata !DIExpression()), !dbg !870
  %34 = bitcast %struct.quoting_options* %33 to i8*, !dbg !871
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %34, i8* align 8 bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i1 false), !dbg !871
  %35 = load i8, i8* %32, align 1, !dbg !872
  %36 = call i32 @set_char_quoting(%struct.quoting_options* %33, i8 signext %35, i32 1), !dbg !873
  %37 = load i8*, i8** %30, align 8, !dbg !874
  %38 = load i64, i64* %31, align 8, !dbg !875
  %39 = call i8* @quotearg_n_options(i32 0, i8* %37, i64 %38, %struct.quoting_options* %33), !dbg !876
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_n_options(i32, i8*, i64, %struct.quoting_options*) #4 !dbg !913 {
  %5 = load i32, i32* @x.17
  %6 = load i32, i32* @y.18
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %4, %originalBBalteredBB
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i64, align 8
  %16 = alloca %struct.quoting_options*, align 8
  %17 = alloca i32, align 4
  %18 = alloca %struct.slotvec*, align 8
  %19 = alloca i8, align 1
  %20 = alloca i32, align 4
  %21 = alloca i64, align 8
  %22 = alloca i8*, align 8
  %23 = alloca i32, align 4
  %24 = alloca i64, align 8
  store i32 %0, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !918, metadata !DIExpression()), !dbg !919
  store i8* %1, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !920, metadata !DIExpression()), !dbg !921
  store i64 %2, i64* %15, align 8
  call void @llvm.dbg.declare(metadata i64* %15, metadata !922, metadata !DIExpression()), !dbg !923
  store %struct.quoting_options* %3, %struct.quoting_options** %16, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %16, metadata !924, metadata !DIExpression()), !dbg !925
  call void @llvm.dbg.declare(metadata i32* %17, metadata !926, metadata !DIExpression()), !dbg !927
  %25 = call i32* @__errno_location() #14, !dbg !928
  %26 = load i32, i32* %25, align 4, !dbg !928
  store i32 %26, i32* %17, align 4, !dbg !927
  call void @llvm.dbg.declare(metadata %struct.slotvec** %18, metadata !929, metadata !DIExpression()), !dbg !930
  %27 = load %struct.slotvec*, %struct.slotvec** @slotvec, align 8, !dbg !931
  store %struct.slotvec* %27, %struct.slotvec** %18, align 8, !dbg !930
  %28 = load i32, i32* %13, align 4, !dbg !932
  %29 = icmp slt i32 %28, 0, !dbg !934
  %30 = load i32, i32* @x.17
  %31 = load i32, i32* @y.18
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %29, label %38, label %55, !dbg !935

38:                                               ; preds = %originalBBpart2
  %39 = load i32, i32* @x.17
  %40 = load i32, i32* @y.18
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %38, %originalBB1alteredBB
  call void @abort() #12, !dbg !936
  %47 = load i32, i32* @x.17
  %48 = load i32, i32* @y.18
  %49 = sub i32 %47, 1
  %50 = mul i32 %47, %49
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %52, %53
  br i1 %54, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  unreachable, !dbg !936

55:                                               ; preds = %originalBBpart2
  %56 = load i32, i32* @x.17
  %57 = load i32, i32* @y.18
  %58 = sub i32 %56, 1
  %59 = mul i32 %56, %58
  %60 = urem i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %57, 10
  %63 = or i1 %61, %62
  br i1 %63, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %55, %originalBB6alteredBB
  %64 = load i32, i32* @nslots, align 4, !dbg !937
  %65 = load i32, i32* %13, align 4, !dbg !939
  %66 = icmp sle i32 %64, %65, !dbg !940
  %67 = load i32, i32* @x.17
  %68 = load i32, i32* @y.18
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %66, label %75, label %245, !dbg !941

75:                                               ; preds = %originalBBpart28
  call void @llvm.dbg.declare(metadata i8* %19, metadata !942, metadata !DIExpression()), !dbg !944
  %76 = load i32, i32* @x.17
  %77 = load i32, i32* @y.18
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %75, %originalBB10alteredBB
  %84 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !945
  %85 = icmp eq %struct.slotvec* %84, @slotvec0, !dbg !946
  %86 = zext i1 %85 to i8, !dbg !944
  store i8 %86, i8* %19, align 1, !dbg !944
  call void @llvm.dbg.declare(metadata i32* %20, metadata !947, metadata !DIExpression()), !dbg !948
  store i32 2147483646, i32* %20, align 4, !dbg !948
  %87 = load i32, i32* %20, align 4, !dbg !949
  %88 = load i32, i32* %13, align 4, !dbg !951
  %89 = icmp slt i32 %87, %88, !dbg !952
  %90 = load i32, i32* @x.17
  %91 = load i32, i32* @y.18
  %92 = sub i32 %90, 1
  %93 = mul i32 %90, %92
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %91, 10
  %97 = or i1 %95, %96
  br i1 %97, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %89, label %98, label %115, !dbg !953

98:                                               ; preds = %originalBBpart212
  %99 = load i32, i32* @x.17
  %100 = load i32, i32* @y.18
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %98, %originalBB14alteredBB
  call void @xalloc_die() #15, !dbg !954
  %107 = load i32, i32* @x.17
  %108 = load i32, i32* @y.18
  %109 = sub i32 %107, 1
  %110 = mul i32 %107, %109
  %111 = urem i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %108, 10
  %114 = or i1 %112, %113
  br i1 %114, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  unreachable, !dbg !954

115:                                              ; preds = %originalBBpart212
  %116 = load i32, i32* @x.17
  %117 = load i32, i32* @y.18
  %118 = sub i32 %116, 1
  %119 = mul i32 %116, %118
  %120 = urem i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %117, 10
  %123 = or i1 %121, %122
  br i1 %123, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %115, %originalBB18alteredBB
  %124 = load i8, i8* %19, align 1, !dbg !955
  %125 = trunc i8 %124 to i1, !dbg !955
  %126 = load i32, i32* @x.17
  %127 = load i32, i32* @y.18
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %125, label %134, label %151, !dbg !955

134:                                              ; preds = %originalBBpart220
  %135 = load i32, i32* @x.17
  %136 = load i32, i32* @y.18
  %137 = sub i32 %135, 1
  %138 = mul i32 %135, %137
  %139 = urem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %140, %141
  br i1 %142, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %134, %originalBB22alteredBB
  %143 = load i32, i32* @x.17
  %144 = load i32, i32* @y.18
  %145 = sub i32 %143, 1
  %146 = mul i32 %143, %145
  %147 = urem i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %148, %149
  br i1 %150, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %169, !dbg !955

151:                                              ; preds = %originalBBpart220
  %152 = load i32, i32* @x.17
  %153 = load i32, i32* @y.18
  %154 = sub i32 %152, 1
  %155 = mul i32 %152, %154
  %156 = urem i32 %155, 2
  %157 = icmp eq i32 %156, 0
  %158 = icmp slt i32 %153, 10
  %159 = or i1 %157, %158
  br i1 %159, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %151, %originalBB26alteredBB
  %160 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !956
  %161 = load i32, i32* @x.17
  %162 = load i32, i32* @y.18
  %163 = sub i32 %161, 1
  %164 = mul i32 %161, %163
  %165 = urem i32 %164, 2
  %166 = icmp eq i32 %165, 0
  %167 = icmp slt i32 %162, 10
  %168 = or i1 %166, %167
  br i1 %168, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %169, !dbg !955

169:                                              ; preds = %originalBBpart228, %originalBBpart224
  %170 = phi %struct.slotvec* [ null, %originalBBpart224 ], [ %160, %originalBBpart228 ], !dbg !955
  %171 = load i32, i32* @x.17
  %172 = load i32, i32* @y.18
  %173 = sub i32 %171, 1
  %174 = mul i32 %171, %173
  %175 = urem i32 %174, 2
  %176 = icmp eq i32 %175, 0
  %177 = icmp slt i32 %172, 10
  %178 = or i1 %176, %177
  br i1 %178, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %169, %originalBB30alteredBB
  %179 = bitcast %struct.slotvec* %170 to i8*, !dbg !955
  %180 = load i32, i32* %13, align 4, !dbg !957
  %181 = add nsw i32 %180, 1, !dbg !958
  %182 = sext i32 %181 to i64, !dbg !959
  %183 = mul i64 %182, 16, !dbg !960
  %184 = call i8* @xrealloc(i8* %179, i64 %183), !dbg !961
  %185 = bitcast i8* %184 to %struct.slotvec*, !dbg !961
  store %struct.slotvec* %185, %struct.slotvec** %18, align 8, !dbg !962
  store %struct.slotvec* %185, %struct.slotvec** @slotvec, align 8, !dbg !963
  %186 = load i8, i8* %19, align 1, !dbg !964
  %187 = trunc i8 %186 to i1, !dbg !964
  %188 = load i32, i32* @x.17
  %189 = load i32, i32* @y.18
  %190 = sub i32 %188, 1
  %191 = mul i32 %188, %190
  %192 = urem i32 %191, 2
  %193 = icmp eq i32 %192, 0
  %194 = icmp slt i32 %189, 10
  %195 = or i1 %193, %194
  br i1 %195, label %originalBBpart241, label %originalBB30alteredBB

originalBBpart241:                                ; preds = %originalBB30
  br i1 %187, label %196, label %215, !dbg !966

196:                                              ; preds = %originalBBpart241
  %197 = load i32, i32* @x.17
  %198 = load i32, i32* @y.18
  %199 = sub i32 %197, 1
  %200 = mul i32 %197, %199
  %201 = urem i32 %200, 2
  %202 = icmp eq i32 %201, 0
  %203 = icmp slt i32 %198, 10
  %204 = or i1 %202, %203
  br i1 %204, label %originalBB43, label %originalBB43alteredBB

originalBB43:                                     ; preds = %196, %originalBB43alteredBB
  %205 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !967
  %206 = bitcast %struct.slotvec* %205 to i8*, !dbg !968
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %206, i8* align 8 bitcast (%struct.slotvec* @slotvec0 to i8*), i64 16, i1 false), !dbg !968
  %207 = load i32, i32* @x.17
  %208 = load i32, i32* @y.18
  %209 = sub i32 %207, 1
  %210 = mul i32 %207, %209
  %211 = urem i32 %210, 2
  %212 = icmp eq i32 %211, 0
  %213 = icmp slt i32 %208, 10
  %214 = or i1 %212, %213
  br i1 %214, label %originalBBpart245, label %originalBB43alteredBB

originalBBpart245:                                ; preds = %originalBB43
  br label %215, !dbg !969

215:                                              ; preds = %originalBBpart245, %originalBBpart241
  %216 = load i32, i32* @x.17
  %217 = load i32, i32* @y.18
  %218 = sub i32 %216, 1
  %219 = mul i32 %216, %218
  %220 = urem i32 %219, 2
  %221 = icmp eq i32 %220, 0
  %222 = icmp slt i32 %217, 10
  %223 = or i1 %221, %222
  br i1 %223, label %originalBB47, label %originalBB47alteredBB

originalBB47:                                     ; preds = %215, %originalBB47alteredBB
  %224 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !970
  %225 = load i32, i32* @nslots, align 4, !dbg !971
  %226 = sext i32 %225 to i64, !dbg !972
  %227 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %224, i64 %226, !dbg !972
  %228 = bitcast %struct.slotvec* %227 to i8*, !dbg !973
  %229 = load i32, i32* %13, align 4, !dbg !974
  %230 = add nsw i32 %229, 1, !dbg !975
  %231 = load i32, i32* @nslots, align 4, !dbg !976
  %232 = sub nsw i32 %230, %231, !dbg !977
  %233 = sext i32 %232 to i64, !dbg !978
  %234 = mul i64 %233, 16, !dbg !979
  call void @llvm.memset.p0i8.i64(i8* align 8 %228, i8 0, i64 %234, i1 false), !dbg !973
  %235 = load i32, i32* %13, align 4, !dbg !980
  %236 = add nsw i32 %235, 1, !dbg !981
  store i32 %236, i32* @nslots, align 4, !dbg !982
  %237 = load i32, i32* @x.17
  %238 = load i32, i32* @y.18
  %239 = sub i32 %237, 1
  %240 = mul i32 %237, %239
  %241 = urem i32 %240, 2
  %242 = icmp eq i32 %241, 0
  %243 = icmp slt i32 %238, 10
  %244 = or i1 %242, %243
  br i1 %244, label %originalBBpart280, label %originalBB47alteredBB

originalBBpart280:                                ; preds = %originalBB47
  br label %245, !dbg !983

245:                                              ; preds = %originalBBpart280, %originalBBpart28
  call void @llvm.dbg.declare(metadata i64* %21, metadata !984, metadata !DIExpression()), !dbg !986
  %246 = load i32, i32* @x.17
  %247 = load i32, i32* @y.18
  %248 = sub i32 %246, 1
  %249 = mul i32 %246, %248
  %250 = urem i32 %249, 2
  %251 = icmp eq i32 %250, 0
  %252 = icmp slt i32 %247, 10
  %253 = or i1 %251, %252
  br i1 %253, label %originalBB82, label %originalBB82alteredBB

originalBB82:                                     ; preds = %245, %originalBB82alteredBB
  %254 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !987
  %255 = load i32, i32* %13, align 4, !dbg !988
  %256 = sext i32 %255 to i64, !dbg !987
  %257 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %254, i64 %256, !dbg !987
  %258 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %257, i32 0, i32 0, !dbg !989
  %259 = load i64, i64* %258, align 8, !dbg !989
  store i64 %259, i64* %21, align 8, !dbg !986
  call void @llvm.dbg.declare(metadata i8** %22, metadata !990, metadata !DIExpression()), !dbg !991
  %260 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !992
  %261 = load i32, i32* %13, align 4, !dbg !993
  %262 = sext i32 %261 to i64, !dbg !992
  %263 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %260, i64 %262, !dbg !992
  %264 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %263, i32 0, i32 1, !dbg !994
  %265 = load i8*, i8** %264, align 8, !dbg !994
  store i8* %265, i8** %22, align 8, !dbg !991
  call void @llvm.dbg.declare(metadata i32* %23, metadata !995, metadata !DIExpression()), !dbg !996
  %266 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !997
  %267 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %266, i32 0, i32 1, !dbg !998
  %268 = load i32, i32* %267, align 4, !dbg !998
  %269 = or i32 %268, 1, !dbg !999
  store i32 %269, i32* %23, align 4, !dbg !996
  call void @llvm.dbg.declare(metadata i64* %24, metadata !1000, metadata !DIExpression()), !dbg !1001
  %270 = load i8*, i8** %22, align 8, !dbg !1002
  %271 = load i64, i64* %21, align 8, !dbg !1003
  %272 = load i8*, i8** %14, align 8, !dbg !1004
  %273 = load i64, i64* %15, align 8, !dbg !1005
  %274 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1006
  %275 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %274, i32 0, i32 0, !dbg !1007
  %276 = load i32, i32* %275, align 8, !dbg !1007
  %277 = load i32, i32* %23, align 4, !dbg !1008
  %278 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1009
  %279 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %278, i32 0, i32 2, !dbg !1010
  %280 = getelementptr inbounds [8 x i32], [8 x i32]* %279, i64 0, i64 0, !dbg !1009
  %281 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1011
  %282 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %281, i32 0, i32 3, !dbg !1012
  %283 = load i8*, i8** %282, align 8, !dbg !1012
  %284 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1013
  %285 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %284, i32 0, i32 4, !dbg !1014
  %286 = load i8*, i8** %285, align 8, !dbg !1014
  %287 = call i64 @quotearg_buffer_restyled(i8* %270, i64 %271, i8* %272, i64 %273, i32 %276, i32 %277, i32* %280, i8* %283, i8* %286), !dbg !1015
  store i64 %287, i64* %24, align 8, !dbg !1001
  %288 = load i64, i64* %21, align 8, !dbg !1016
  %289 = load i64, i64* %24, align 8, !dbg !1018
  %290 = icmp ule i64 %288, %289, !dbg !1019
  %291 = load i32, i32* @x.17
  %292 = load i32, i32* @y.18
  %293 = sub i32 %291, 1
  %294 = mul i32 %291, %293
  %295 = urem i32 %294, 2
  %296 = icmp eq i32 %295, 0
  %297 = icmp slt i32 %292, 10
  %298 = or i1 %296, %297
  br i1 %298, label %originalBBpart296, label %originalBB82alteredBB

originalBBpart296:                                ; preds = %originalBB82
  br i1 %290, label %299, label %385, !dbg !1020

299:                                              ; preds = %originalBBpart296
  %300 = load i32, i32* @x.17
  %301 = load i32, i32* @y.18
  %302 = sub i32 %300, 1
  %303 = mul i32 %300, %302
  %304 = urem i32 %303, 2
  %305 = icmp eq i32 %304, 0
  %306 = icmp slt i32 %301, 10
  %307 = or i1 %305, %306
  br i1 %307, label %originalBB98, label %originalBB98alteredBB

originalBB98:                                     ; preds = %299, %originalBB98alteredBB
  %308 = load i64, i64* %24, align 8, !dbg !1021
  %309 = add i64 %308, 1, !dbg !1023
  store i64 %309, i64* %21, align 8, !dbg !1024
  %310 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !1025
  %311 = load i32, i32* %13, align 4, !dbg !1026
  %312 = sext i32 %311 to i64, !dbg !1025
  %313 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %310, i64 %312, !dbg !1025
  %314 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %313, i32 0, i32 0, !dbg !1027
  store i64 %309, i64* %314, align 8, !dbg !1028
  %315 = load i8*, i8** %22, align 8, !dbg !1029
  %316 = icmp ne i8* %315, getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0), !dbg !1031
  %317 = load i32, i32* @x.17
  %318 = load i32, i32* @y.18
  %319 = sub i32 %317, 1
  %320 = mul i32 %317, %319
  %321 = urem i32 %320, 2
  %322 = icmp eq i32 %321, 0
  %323 = icmp slt i32 %318, 10
  %324 = or i1 %322, %323
  br i1 %324, label %originalBBpart2106, label %originalBB98alteredBB

originalBBpart2106:                               ; preds = %originalBB98
  br i1 %316, label %325, label %343, !dbg !1032

325:                                              ; preds = %originalBBpart2106
  %326 = load i32, i32* @x.17
  %327 = load i32, i32* @y.18
  %328 = sub i32 %326, 1
  %329 = mul i32 %326, %328
  %330 = urem i32 %329, 2
  %331 = icmp eq i32 %330, 0
  %332 = icmp slt i32 %327, 10
  %333 = or i1 %331, %332
  br i1 %333, label %originalBB108, label %originalBB108alteredBB

originalBB108:                                    ; preds = %325, %originalBB108alteredBB
  %334 = load i8*, i8** %22, align 8, !dbg !1033
  call void @free(i8* %334) #10, !dbg !1034
  %335 = load i32, i32* @x.17
  %336 = load i32, i32* @y.18
  %337 = sub i32 %335, 1
  %338 = mul i32 %335, %337
  %339 = urem i32 %338, 2
  %340 = icmp eq i32 %339, 0
  %341 = icmp slt i32 %336, 10
  %342 = or i1 %340, %341
  br i1 %342, label %originalBBpart2110, label %originalBB108alteredBB

originalBBpart2110:                               ; preds = %originalBB108
  br label %343, !dbg !1034

343:                                              ; preds = %originalBBpart2110, %originalBBpart2106
  %344 = load i32, i32* @x.17
  %345 = load i32, i32* @y.18
  %346 = sub i32 %344, 1
  %347 = mul i32 %344, %346
  %348 = urem i32 %347, 2
  %349 = icmp eq i32 %348, 0
  %350 = icmp slt i32 %345, 10
  %351 = or i1 %349, %350
  br i1 %351, label %originalBB112, label %originalBB112alteredBB

originalBB112:                                    ; preds = %343, %originalBB112alteredBB
  %352 = load i64, i64* %21, align 8, !dbg !1035
  %353 = call noalias i8* @xcharalloc(i64 %352), !dbg !1036
  store i8* %353, i8** %22, align 8, !dbg !1037
  %354 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !1038
  %355 = load i32, i32* %13, align 4, !dbg !1039
  %356 = sext i32 %355 to i64, !dbg !1038
  %357 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %354, i64 %356, !dbg !1038
  %358 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %357, i32 0, i32 1, !dbg !1040
  store i8* %353, i8** %358, align 8, !dbg !1041
  %359 = load i8*, i8** %22, align 8, !dbg !1042
  %360 = load i64, i64* %21, align 8, !dbg !1043
  %361 = load i8*, i8** %14, align 8, !dbg !1044
  %362 = load i64, i64* %15, align 8, !dbg !1045
  %363 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1046
  %364 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %363, i32 0, i32 0, !dbg !1047
  %365 = load i32, i32* %364, align 8, !dbg !1047
  %366 = load i32, i32* %23, align 4, !dbg !1048
  %367 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1049
  %368 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %367, i32 0, i32 2, !dbg !1050
  %369 = getelementptr inbounds [8 x i32], [8 x i32]* %368, i64 0, i64 0, !dbg !1049
  %370 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1051
  %371 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %370, i32 0, i32 3, !dbg !1052
  %372 = load i8*, i8** %371, align 8, !dbg !1052
  %373 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1053
  %374 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %373, i32 0, i32 4, !dbg !1054
  %375 = load i8*, i8** %374, align 8, !dbg !1054
  %376 = call i64 @quotearg_buffer_restyled(i8* %359, i64 %360, i8* %361, i64 %362, i32 %365, i32 %366, i32* %369, i8* %372, i8* %375), !dbg !1055
  %377 = load i32, i32* @x.17
  %378 = load i32, i32* @y.18
  %379 = sub i32 %377, 1
  %380 = mul i32 %377, %379
  %381 = urem i32 %380, 2
  %382 = icmp eq i32 %381, 0
  %383 = icmp slt i32 %378, 10
  %384 = or i1 %382, %383
  br i1 %384, label %originalBBpart2114, label %originalBB112alteredBB

originalBBpart2114:                               ; preds = %originalBB112
  br label %385, !dbg !1056

385:                                              ; preds = %originalBBpart2114, %originalBBpart296
  %386 = load i32, i32* @x.17
  %387 = load i32, i32* @y.18
  %388 = sub i32 %386, 1
  %389 = mul i32 %386, %388
  %390 = urem i32 %389, 2
  %391 = icmp eq i32 %390, 0
  %392 = icmp slt i32 %387, 10
  %393 = or i1 %391, %392
  br i1 %393, label %originalBB116, label %originalBB116alteredBB

originalBB116:                                    ; preds = %385, %originalBB116alteredBB
  %394 = load i32, i32* %17, align 4, !dbg !1057
  %395 = call i32* @__errno_location() #14, !dbg !1058
  store i32 %394, i32* %395, align 4, !dbg !1059
  %396 = load i8*, i8** %22, align 8, !dbg !1060
  %397 = load i32, i32* @x.17
  %398 = load i32, i32* @y.18
  %399 = sub i32 %397, 1
  %400 = mul i32 %397, %399
  %401 = urem i32 %400, 2
  %402 = icmp eq i32 %401, 0
  %403 = icmp slt i32 %398, 10
  %404 = or i1 %402, %403
  br i1 %404, label %originalBBpart2118, label %originalBB116alteredBB

originalBBpart2118:                               ; preds = %originalBB116
  ret i8* %396, !dbg !1061

originalBBalteredBB:                              ; preds = %originalBB, %4
  %405 = alloca i32, align 4
  %406 = alloca i8*, align 8
  %407 = alloca i64, align 8
  %408 = alloca %struct.quoting_options*, align 8
  %409 = alloca i32, align 4
  %410 = alloca %struct.slotvec*, align 8
  %411 = alloca i8, align 1
  %412 = alloca i32, align 4
  %413 = alloca i64, align 8
  %414 = alloca i8*, align 8
  %415 = alloca i32, align 4
  %416 = alloca i64, align 8
  store i32 %0, i32* %405, align 4
  call void @llvm.dbg.declare(metadata i32* %405, metadata !1062, metadata !DIExpression()), !dbg !919
  store i8* %1, i8** %406, align 8
  call void @llvm.dbg.declare(metadata i8** %406, metadata !1098, metadata !DIExpression()), !dbg !921
  store i64 %2, i64* %407, align 8
  call void @llvm.dbg.declare(metadata i64* %407, metadata !1099, metadata !DIExpression()), !dbg !923
  store %struct.quoting_options* %3, %struct.quoting_options** %408, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %408, metadata !1100, metadata !DIExpression()), !dbg !925
  call void @llvm.dbg.declare(metadata i32* %409, metadata !1101, metadata !DIExpression()), !dbg !927
  %417 = call i32* @__errno_location() #14, !dbg !928
  %418 = load i32, i32* %417, align 4, !dbg !928
  store i32 %418, i32* %409, align 4, !dbg !927
  call void @llvm.dbg.declare(metadata %struct.slotvec** %410, metadata !1102, metadata !DIExpression()), !dbg !930
  %419 = load %struct.slotvec*, %struct.slotvec** @slotvec, align 8, !dbg !931
  store %struct.slotvec* %419, %struct.slotvec** %410, align 8, !dbg !930
  %420 = load i32, i32* %405, align 4, !dbg !932
  %421 = icmp slt i32 %420, 0, !dbg !934
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %38
  call void @abort() #12, !dbg !936
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %55
  %422 = load i32, i32* @nslots, align 4, !dbg !937
  %423 = load i32, i32* %13, align 4, !dbg !939
  %424 = icmp sle i32 %422, %423, !dbg !940
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %75
  %425 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !945
  %426 = icmp eq %struct.slotvec* %425, @slotvec0, !dbg !946
  %427 = zext i1 %426 to i8, !dbg !944
  store i8 %427, i8* %19, align 1, !dbg !944
  call void @llvm.dbg.declare(metadata !11, metadata !1103, metadata !DIExpression()), !dbg !948
  store i32 2147483646, i32* %20, align 4, !dbg !948
  %428 = load i32, i32* %20, align 4, !dbg !949
  %429 = load i32, i32* %13, align 4, !dbg !951
  %430 = icmp slt i32 %428, %429, !dbg !952
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %98
  call void @xalloc_die() #15, !dbg !954
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %115
  %431 = load i8, i8* %19, align 1, !dbg !955
  %432 = trunc i8 %431 to i1, !dbg !955
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %134
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %151
  %433 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !956
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %169
  %434 = bitcast %struct.slotvec* %170 to i8*, !dbg !955
  %435 = load i32, i32* %13, align 4, !dbg !957
  %_ = sub i32 %435, 1
  %gen = mul i32 %_, 1
  %_31 = shl i32 %435, 1
  %_32 = sub i32 0, %435
  %gen33 = add i32 %_32, 1
  %_34 = sub i32 %435, 1
  %gen35 = mul i32 %_34, 1
  %436 = add nsw i32 %435, 1, !dbg !958
  %437 = sext i32 %436 to i64, !dbg !959
  %_36 = sub i64 0, %437
  %gen37 = add i64 %_36, 16
  %_38 = sub i64 %437, 16
  %gen39 = mul i64 %_38, 16
  %438 = mul i64 %437, 16, !dbg !960
  %439 = call i8* @xrealloc(i8* %434, i64 %438), !dbg !961
  %440 = bitcast i8* %439 to %struct.slotvec*, !dbg !961
  store %struct.slotvec* %440, %struct.slotvec** %18, align 8, !dbg !962
  store %struct.slotvec* %440, %struct.slotvec** @slotvec, align 8, !dbg !963
  %441 = load i8, i8* %19, align 1, !dbg !964
  %442 = trunc i8 %441 to i1, !dbg !964
  br label %originalBB30

originalBB43alteredBB:                            ; preds = %originalBB43, %196
  %443 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !967
  %444 = bitcast %struct.slotvec* %443 to i8*, !dbg !968
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %444, i8* align 8 bitcast (%struct.slotvec* @slotvec0 to i8*), i64 16, i1 false), !dbg !968
  br label %originalBB43

originalBB47alteredBB:                            ; preds = %originalBB47, %215
  %445 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !970
  %446 = load i32, i32* @nslots, align 4, !dbg !971
  %447 = sext i32 %446 to i64, !dbg !972
  %448 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %445, i64 %447, !dbg !972
  %449 = bitcast %struct.slotvec* %448 to i8*, !dbg !973
  %450 = load i32, i32* %13, align 4, !dbg !974
  %_48 = shl i32 %450, 1
  %_49 = sub i32 0, %450
  %gen50 = add i32 %_49, 1
  %_51 = sub i32 0, %450
  %gen52 = add i32 %_51, 1
  %_53 = sub i32 0, %450
  %gen54 = add i32 %_53, 1
  %_55 = sub i32 %450, 1
  %gen56 = mul i32 %_55, 1
  %_57 = sub i32 0, %450
  %gen58 = add i32 %_57, 1
  %451 = add nsw i32 %450, 1, !dbg !975
  %452 = load i32, i32* @nslots, align 4, !dbg !976
  %_59 = sub i32 0, %451
  %gen60 = add i32 %_59, %452
  %_61 = shl i32 %451, %452
  %_62 = sub i32 0, %451
  %gen63 = add i32 %_62, %452
  %453 = sub nsw i32 %451, %452, !dbg !977
  %454 = sext i32 %453 to i64, !dbg !978
  %_64 = shl i64 %454, 16
  %455 = mul i64 %454, 16, !dbg !979
  call void @llvm.memset.p0i8.i64(i8* align 8 %449, i8 0, i64 %455, i1 false), !dbg !973
  %456 = load i32, i32* %13, align 4, !dbg !980
  %_65 = sub i32 %456, 1
  %gen66 = mul i32 %_65, 1
  %_67 = shl i32 %456, 1
  %_68 = sub i32 %456, 1
  %gen69 = mul i32 %_68, 1
  %_70 = shl i32 %456, 1
  %_71 = sub i32 0, %456
  %gen72 = add i32 %_71, 1
  %_73 = sub i32 %456, 1
  %gen74 = mul i32 %_73, 1
  %_75 = sub i32 %456, 1
  %gen76 = mul i32 %_75, 1
  %_77 = sub i32 0, %456
  %gen78 = add i32 %_77, 1
  %457 = add nsw i32 %456, 1, !dbg !981
  store i32 %457, i32* @nslots, align 4, !dbg !982
  br label %originalBB47

originalBB82alteredBB:                            ; preds = %originalBB82, %245
  %458 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !987
  %459 = load i32, i32* %13, align 4, !dbg !988
  %460 = sext i32 %459 to i64, !dbg !987
  %461 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %458, i64 %460, !dbg !987
  %462 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %461, i32 0, i32 0, !dbg !989
  %463 = load i64, i64* %462, align 8, !dbg !989
  store i64 %463, i64* %21, align 8, !dbg !986
  call void @llvm.dbg.declare(metadata !11, metadata !1141, metadata !DIExpression()), !dbg !991
  %464 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !992
  %465 = load i32, i32* %13, align 4, !dbg !993
  %466 = sext i32 %465 to i64, !dbg !992
  %467 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %464, i64 %466, !dbg !992
  %468 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %467, i32 0, i32 1, !dbg !994
  %469 = load i8*, i8** %468, align 8, !dbg !994
  store i8* %469, i8** %22, align 8, !dbg !991
  call void @llvm.dbg.declare(metadata !11, metadata !1178, metadata !DIExpression()), !dbg !996
  %470 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !997
  %471 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %470, i32 0, i32 1, !dbg !998
  %472 = load i32, i32* %471, align 4, !dbg !998
  %_83 = sub i32 0, %472
  %gen84 = add i32 %_83, 1
  %_85 = sub i32 0, %472
  %gen86 = add i32 %_85, 1
  %_87 = shl i32 %472, 1
  %_88 = sub i32 %472, 1
  %gen89 = mul i32 %_88, 1
  %_90 = shl i32 %472, 1
  %_91 = sub i32 0, %472
  %gen92 = add i32 %_91, 1
  %_93 = sub i32 %472, 1
  %gen94 = mul i32 %_93, 1
  %473 = or i32 %472, 1, !dbg !999
  store i32 %473, i32* %23, align 4, !dbg !996
  call void @llvm.dbg.declare(metadata !11, metadata !1179, metadata !DIExpression()), !dbg !1001
  %474 = load i8*, i8** %22, align 8, !dbg !1002
  %475 = load i64, i64* %21, align 8, !dbg !1003
  %476 = load i8*, i8** %14, align 8, !dbg !1004
  %477 = load i64, i64* %15, align 8, !dbg !1005
  %478 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1006
  %479 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %478, i32 0, i32 0, !dbg !1007
  %480 = load i32, i32* %479, align 8, !dbg !1007
  %481 = load i32, i32* %23, align 4, !dbg !1008
  %482 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1009
  %483 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %482, i32 0, i32 2, !dbg !1010
  %484 = getelementptr inbounds [8 x i32], [8 x i32]* %483, i64 0, i64 0, !dbg !1009
  %485 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1011
  %486 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %485, i32 0, i32 3, !dbg !1012
  %487 = load i8*, i8** %486, align 8, !dbg !1012
  %488 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1013
  %489 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %488, i32 0, i32 4, !dbg !1014
  %490 = load i8*, i8** %489, align 8, !dbg !1014
  %491 = call i64 @quotearg_buffer_restyled(i8* %474, i64 %475, i8* %476, i64 %477, i32 %480, i32 %481, i32* %484, i8* %487, i8* %490), !dbg !1015
  store i64 %491, i64* %24, align 8, !dbg !1001
  %492 = load i64, i64* %21, align 8, !dbg !1016
  %493 = load i64, i64* %24, align 8, !dbg !1018
  %494 = icmp ule i64 %492, %493, !dbg !1019
  br label %originalBB82

originalBB98alteredBB:                            ; preds = %originalBB98, %299
  %495 = load i64, i64* %24, align 8, !dbg !1021
  %_99 = sub i64 %495, 1
  %gen100 = mul i64 %_99, 1
  %_101 = shl i64 %495, 1
  %_102 = shl i64 %495, 1
  %_103 = sub i64 %495, 1
  %gen104 = mul i64 %_103, 1
  %496 = add i64 %495, 1, !dbg !1023
  store i64 %496, i64* %21, align 8, !dbg !1024
  %497 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !1025
  %498 = load i32, i32* %13, align 4, !dbg !1026
  %499 = sext i32 %498 to i64, !dbg !1025
  %500 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %497, i64 %499, !dbg !1025
  %501 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %500, i32 0, i32 0, !dbg !1027
  store i64 %496, i64* %501, align 8, !dbg !1028
  %502 = load i8*, i8** %22, align 8, !dbg !1029
  %503 = icmp ne i8* %502, getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0), !dbg !1031
  br label %originalBB98

originalBB108alteredBB:                           ; preds = %originalBB108, %325
  %504 = load i8*, i8** %22, align 8, !dbg !1033
  call void @free(i8* %504) #10, !dbg !1034
  br label %originalBB108

originalBB112alteredBB:                           ; preds = %originalBB112, %343
  %505 = load i64, i64* %21, align 8, !dbg !1035
  %506 = call noalias i8* @xcharalloc(i64 %505), !dbg !1036
  store i8* %506, i8** %22, align 8, !dbg !1037
  %507 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !1038
  %508 = load i32, i32* %13, align 4, !dbg !1039
  %509 = sext i32 %508 to i64, !dbg !1038
  %510 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %507, i64 %509, !dbg !1038
  %511 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %510, i32 0, i32 1, !dbg !1040
  store i8* %506, i8** %511, align 8, !dbg !1041
  %512 = load i8*, i8** %22, align 8, !dbg !1042
  %513 = load i64, i64* %21, align 8, !dbg !1043
  %514 = load i8*, i8** %14, align 8, !dbg !1044
  %515 = load i64, i64* %15, align 8, !dbg !1045
  %516 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1046
  %517 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %516, i32 0, i32 0, !dbg !1047
  %518 = load i32, i32* %517, align 8, !dbg !1047
  %519 = load i32, i32* %23, align 4, !dbg !1048
  %520 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1049
  %521 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %520, i32 0, i32 2, !dbg !1050
  %522 = getelementptr inbounds [8 x i32], [8 x i32]* %521, i64 0, i64 0, !dbg !1049
  %523 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1051
  %524 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %523, i32 0, i32 3, !dbg !1052
  %525 = load i8*, i8** %524, align 8, !dbg !1052
  %526 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !1053
  %527 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %526, i32 0, i32 4, !dbg !1054
  %528 = load i8*, i8** %527, align 8, !dbg !1054
  %529 = call i64 @quotearg_buffer_restyled(i8* %512, i64 %513, i8* %514, i64 %515, i32 %518, i32 %519, i32* %522, i8* %525, i8* %528), !dbg !1055
  br label %originalBB112

originalBB116alteredBB:                           ; preds = %originalBB116, %385
  %530 = load i32, i32* %17, align 4, !dbg !1057
  %531 = call i32* @__errno_location() #14, !dbg !1058
  store i32 %530, i32* %531, align 4, !dbg !1059
  %532 = load i8*, i8** %22, align 8, !dbg !1060
  br label %originalBB116
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @quotearg_buffer_restyled(i8*, i64, i8*, i64, i32, i32, i32*, i8*, i8*) #4 !dbg !1180 {
  %10 = load i32, i32* @x.19
  %11 = load i32, i32* @y.20
  %12 = sub i32 %10, 1
  %13 = mul i32 %10, %12
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  %16 = icmp slt i32 %11, 10
  %17 = or i1 %15, %16
  br i1 %17, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %9, %originalBBalteredBB
  %18 = alloca i64, align 8
  %19 = alloca i8*, align 8
  %20 = alloca i64, align 8
  %21 = alloca i8*, align 8
  %22 = alloca i64, align 8
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32*, align 8
  %26 = alloca i8*, align 8
  %27 = alloca i8*, align 8
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  %30 = alloca i64, align 8
  %31 = alloca i8*, align 8
  %32 = alloca i64, align 8
  %33 = alloca i8, align 1
  %34 = alloca i8, align 1
  %35 = alloca i8, align 1
  %36 = alloca i8, align 1
  %37 = alloca i8, align 1
  %38 = alloca i8, align 1
  %39 = alloca i8, align 1
  %40 = alloca i8, align 1
  %41 = alloca i8, align 1
  %42 = alloca i8, align 1
  %43 = alloca i8, align 1
  %44 = alloca i64, align 8
  %45 = alloca i8, align 1
  %46 = alloca %struct.__mbstate_t, align 4
  %47 = alloca i32, align 4
  %48 = alloca i64, align 8
  %49 = alloca i64, align 8
  %50 = alloca i64, align 8
  store i8* %0, i8** %19, align 8
  call void @llvm.dbg.declare(metadata i8** %19, metadata !1185, metadata !DIExpression()), !dbg !1186
  store i64 %1, i64* %20, align 8
  call void @llvm.dbg.declare(metadata i64* %20, metadata !1187, metadata !DIExpression()), !dbg !1188
  store i8* %2, i8** %21, align 8
  call void @llvm.dbg.declare(metadata i8** %21, metadata !1189, metadata !DIExpression()), !dbg !1190
  store i64 %3, i64* %22, align 8
  call void @llvm.dbg.declare(metadata i64* %22, metadata !1191, metadata !DIExpression()), !dbg !1192
  store i32 %4, i32* %23, align 4
  call void @llvm.dbg.declare(metadata i32* %23, metadata !1193, metadata !DIExpression()), !dbg !1194
  store i32 %5, i32* %24, align 4
  call void @llvm.dbg.declare(metadata i32* %24, metadata !1195, metadata !DIExpression()), !dbg !1196
  store i32* %6, i32** %25, align 8
  call void @llvm.dbg.declare(metadata i32** %25, metadata !1197, metadata !DIExpression()), !dbg !1198
  store i8* %7, i8** %26, align 8
  call void @llvm.dbg.declare(metadata i8** %26, metadata !1199, metadata !DIExpression()), !dbg !1200
  store i8* %8, i8** %27, align 8
  call void @llvm.dbg.declare(metadata i8** %27, metadata !1201, metadata !DIExpression()), !dbg !1202
  call void @llvm.dbg.declare(metadata i64* %28, metadata !1203, metadata !DIExpression()), !dbg !1204
  call void @llvm.dbg.declare(metadata i64* %29, metadata !1205, metadata !DIExpression()), !dbg !1206
  store i64 0, i64* %29, align 8, !dbg !1206
  call void @llvm.dbg.declare(metadata i64* %30, metadata !1207, metadata !DIExpression()), !dbg !1208
  store i64 0, i64* %30, align 8, !dbg !1208
  call void @llvm.dbg.declare(metadata i8** %31, metadata !1209, metadata !DIExpression()), !dbg !1210
  store i8* null, i8** %31, align 8, !dbg !1210
  call void @llvm.dbg.declare(metadata i64* %32, metadata !1211, metadata !DIExpression()), !dbg !1212
  store i64 0, i64* %32, align 8, !dbg !1212
  call void @llvm.dbg.declare(metadata i8* %33, metadata !1213, metadata !DIExpression()), !dbg !1214
  store i8 0, i8* %33, align 1, !dbg !1214
  call void @llvm.dbg.declare(metadata i8* %34, metadata !1215, metadata !DIExpression()), !dbg !1216
  %51 = call i64 @__ctype_get_mb_cur_max() #10, !dbg !1217
  %52 = icmp eq i64 %51, 1, !dbg !1218
  %53 = zext i1 %52 to i8, !dbg !1216
  store i8 %53, i8* %34, align 1, !dbg !1216
  call void @llvm.dbg.declare(metadata i8* %35, metadata !1219, metadata !DIExpression()), !dbg !1220
  %54 = load i32, i32* %24, align 4, !dbg !1221
  %55 = and i32 %54, 2, !dbg !1222
  %56 = icmp ne i32 %55, 0, !dbg !1223
  %57 = zext i1 %56 to i8, !dbg !1220
  store i8 %57, i8* %35, align 1, !dbg !1220
  call void @llvm.dbg.declare(metadata i8* %36, metadata !1224, metadata !DIExpression()), !dbg !1225
  store i8 0, i8* %36, align 1, !dbg !1225
  call void @llvm.dbg.declare(metadata i8* %37, metadata !1226, metadata !DIExpression()), !dbg !1227
  store i8 0, i8* %37, align 1, !dbg !1227
  call void @llvm.dbg.declare(metadata i8* %38, metadata !1228, metadata !DIExpression()), !dbg !1229
  store i8 1, i8* %38, align 1, !dbg !1229
  %58 = load i32, i32* @x.19
  %59 = load i32, i32* @y.20
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %66, !dbg !1230

66:                                               ; preds = %originalBBpart21919, %originalBBpart2
  call void @llvm.dbg.label(metadata !1231), !dbg !1232
  %67 = load i32, i32* @x.19
  %68 = load i32, i32* @y.20
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %66, %originalBB10alteredBB
  %75 = load i32, i32* %23, align 4, !dbg !1233
  %76 = load i32, i32* @x.19
  %77 = load i32, i32* @y.20
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  switch i32 %75, label %728 [
    i32 6, label %84
    i32 5, label %101
    i32 7, label %230
    i32 8, label %247
    i32 9, label %247
    i32 10, label %247
    i32 3, label %495
    i32 1, label %512
    i32 4, label %529
    i32 2, label %582
    i32 0, label %711
  ], !dbg !1234

84:                                               ; preds = %originalBBpart212
  %85 = load i32, i32* @x.19
  %86 = load i32, i32* @y.20
  %87 = sub i32 %85, 1
  %88 = mul i32 %85, %87
  %89 = urem i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %90, %91
  br i1 %92, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %84, %originalBB14alteredBB
  store i32 5, i32* %23, align 4, !dbg !1235
  store i8 1, i8* %35, align 1, !dbg !1237
  %93 = load i32, i32* @x.19
  %94 = load i32, i32* @y.20
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %101, !dbg !1238

101:                                              ; preds = %originalBBpart216, %originalBBpart212
  %102 = load i32, i32* @x.19
  %103 = load i32, i32* @y.20
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %101, %originalBB18alteredBB
  %110 = load i8, i8* %35, align 1, !dbg !1239
  %111 = trunc i8 %110 to i1, !dbg !1239
  %112 = load i32, i32* @x.19
  %113 = load i32, i32* @y.20
  %114 = sub i32 %112, 1
  %115 = mul i32 %112, %114
  %116 = urem i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %113, 10
  %119 = or i1 %117, %118
  br i1 %119, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %111, label %213, label %120, !dbg !1241

120:                                              ; preds = %originalBBpart220
  %121 = load i32, i32* @x.19
  %122 = load i32, i32* @y.20
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %120, %originalBB22alteredBB
  %129 = load i32, i32* @x.19
  %130 = load i32, i32* @y.20
  %131 = sub i32 %129, 1
  %132 = mul i32 %129, %131
  %133 = urem i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %130, 10
  %136 = or i1 %134, %135
  br i1 %136, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %137, !dbg !1242

137:                                              ; preds = %originalBBpart224
  %138 = load i32, i32* @x.19
  %139 = load i32, i32* @y.20
  %140 = sub i32 %138, 1
  %141 = mul i32 %138, %140
  %142 = urem i32 %141, 2
  %143 = icmp eq i32 %142, 0
  %144 = icmp slt i32 %139, 10
  %145 = or i1 %143, %144
  br i1 %145, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %137, %originalBB26alteredBB
  %146 = load i64, i64* %29, align 8, !dbg !1243
  %147 = load i64, i64* %20, align 8, !dbg !1243
  %148 = icmp ult i64 %146, %147, !dbg !1243
  %149 = load i32, i32* @x.19
  %150 = load i32, i32* @y.20
  %151 = sub i32 %149, 1
  %152 = mul i32 %149, %151
  %153 = urem i32 %152, 2
  %154 = icmp eq i32 %153, 0
  %155 = icmp slt i32 %150, 10
  %156 = or i1 %154, %155
  br i1 %156, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %148, label %157, label %177, !dbg !1246

157:                                              ; preds = %originalBBpart228
  %158 = load i32, i32* @x.19
  %159 = load i32, i32* @y.20
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %157, %originalBB30alteredBB
  %166 = load i8*, i8** %19, align 8, !dbg !1243
  %167 = load i64, i64* %29, align 8, !dbg !1243
  %168 = getelementptr inbounds i8, i8* %166, i64 %167, !dbg !1243
  store i8 34, i8* %168, align 1, !dbg !1243
  %169 = load i32, i32* @x.19
  %170 = load i32, i32* @y.20
  %171 = sub i32 %169, 1
  %172 = mul i32 %169, %171
  %173 = urem i32 %172, 2
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %174, %175
  br i1 %176, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %177, !dbg !1243

177:                                              ; preds = %originalBBpart232, %originalBBpart228
  %178 = load i32, i32* @x.19
  %179 = load i32, i32* @y.20
  %180 = sub i32 %178, 1
  %181 = mul i32 %178, %180
  %182 = urem i32 %181, 2
  %183 = icmp eq i32 %182, 0
  %184 = icmp slt i32 %179, 10
  %185 = or i1 %183, %184
  br i1 %185, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %177, %originalBB34alteredBB
  %186 = load i64, i64* %29, align 8, !dbg !1246
  %187 = add i64 %186, 1, !dbg !1246
  store i64 %187, i64* %29, align 8, !dbg !1246
  %188 = load i32, i32* @x.19
  %189 = load i32, i32* @y.20
  %190 = sub i32 %188, 1
  %191 = mul i32 %188, %190
  %192 = urem i32 %191, 2
  %193 = icmp eq i32 %192, 0
  %194 = icmp slt i32 %189, 10
  %195 = or i1 %193, %194
  br i1 %195, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %196, !dbg !1246

196:                                              ; preds = %originalBBpart236
  %197 = load i32, i32* @x.19
  %198 = load i32, i32* @y.20
  %199 = sub i32 %197, 1
  %200 = mul i32 %197, %199
  %201 = urem i32 %200, 2
  %202 = icmp eq i32 %201, 0
  %203 = icmp slt i32 %198, 10
  %204 = or i1 %202, %203
  br i1 %204, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %196, %originalBB38alteredBB
  %205 = load i32, i32* @x.19
  %206 = load i32, i32* @y.20
  %207 = sub i32 %205, 1
  %208 = mul i32 %205, %207
  %209 = urem i32 %208, 2
  %210 = icmp eq i32 %209, 0
  %211 = icmp slt i32 %206, 10
  %212 = or i1 %210, %211
  br i1 %212, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br label %213, !dbg !1246

213:                                              ; preds = %originalBBpart240, %originalBBpart220
  %214 = load i32, i32* @x.19
  %215 = load i32, i32* @y.20
  %216 = sub i32 %214, 1
  %217 = mul i32 %214, %216
  %218 = urem i32 %217, 2
  %219 = icmp eq i32 %218, 0
  %220 = icmp slt i32 %215, 10
  %221 = or i1 %219, %220
  br i1 %221, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %213, %originalBB42alteredBB
  store i8 1, i8* %33, align 1, !dbg !1247
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.62, i64 0, i64 0), i8** %31, align 8, !dbg !1248
  store i64 1, i64* %32, align 8, !dbg !1249
  %222 = load i32, i32* @x.19
  %223 = load i32, i32* @y.20
  %224 = sub i32 %222, 1
  %225 = mul i32 %222, %224
  %226 = urem i32 %225, 2
  %227 = icmp eq i32 %226, 0
  %228 = icmp slt i32 %223, 10
  %229 = or i1 %227, %228
  br i1 %229, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br label %745, !dbg !1250

230:                                              ; preds = %originalBBpart212
  %231 = load i32, i32* @x.19
  %232 = load i32, i32* @y.20
  %233 = sub i32 %231, 1
  %234 = mul i32 %231, %233
  %235 = urem i32 %234, 2
  %236 = icmp eq i32 %235, 0
  %237 = icmp slt i32 %232, 10
  %238 = or i1 %236, %237
  br i1 %238, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %230, %originalBB46alteredBB
  store i8 1, i8* %33, align 1, !dbg !1251
  store i8 0, i8* %35, align 1, !dbg !1252
  %239 = load i32, i32* @x.19
  %240 = load i32, i32* @y.20
  %241 = sub i32 %239, 1
  %242 = mul i32 %239, %241
  %243 = urem i32 %242, 2
  %244 = icmp eq i32 %243, 0
  %245 = icmp slt i32 %240, 10
  %246 = or i1 %244, %245
  br i1 %246, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br label %745, !dbg !1253

247:                                              ; preds = %originalBBpart212, %originalBBpart212, %originalBBpart212
  %248 = load i32, i32* @x.19
  %249 = load i32, i32* @y.20
  %250 = sub i32 %248, 1
  %251 = mul i32 %248, %250
  %252 = urem i32 %251, 2
  %253 = icmp eq i32 %252, 0
  %254 = icmp slt i32 %249, 10
  %255 = or i1 %253, %254
  br i1 %255, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %247, %originalBB50alteredBB
  %256 = load i32, i32* %23, align 4, !dbg !1254
  %257 = icmp ne i32 %256, 10, !dbg !1257
  %258 = load i32, i32* @x.19
  %259 = load i32, i32* @y.20
  %260 = sub i32 %258, 1
  %261 = mul i32 %258, %260
  %262 = urem i32 %261, 2
  %263 = icmp eq i32 %262, 0
  %264 = icmp slt i32 %259, 10
  %265 = or i1 %263, %264
  br i1 %265, label %originalBBpart252, label %originalBB50alteredBB

originalBBpart252:                                ; preds = %originalBB50
  br i1 %257, label %266, label %287, !dbg !1258

266:                                              ; preds = %originalBBpart252
  %267 = load i32, i32* @x.19
  %268 = load i32, i32* @y.20
  %269 = sub i32 %267, 1
  %270 = mul i32 %267, %269
  %271 = urem i32 %270, 2
  %272 = icmp eq i32 %271, 0
  %273 = icmp slt i32 %268, 10
  %274 = or i1 %272, %273
  br i1 %274, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %266, %originalBB54alteredBB
  %275 = load i32, i32* %23, align 4, !dbg !1259
  %276 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.63, i64 0, i64 0), i32 %275), !dbg !1261
  store i8* %276, i8** %26, align 8, !dbg !1262
  %277 = load i32, i32* %23, align 4, !dbg !1263
  %278 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.64, i64 0, i64 0), i32 %277), !dbg !1264
  store i8* %278, i8** %27, align 8, !dbg !1265
  %279 = load i32, i32* @x.19
  %280 = load i32, i32* @y.20
  %281 = sub i32 %279, 1
  %282 = mul i32 %279, %281
  %283 = urem i32 %282, 2
  %284 = icmp eq i32 %283, 0
  %285 = icmp slt i32 %280, 10
  %286 = or i1 %284, %285
  br i1 %286, label %originalBBpart256, label %originalBB54alteredBB

originalBBpart256:                                ; preds = %originalBB54
  br label %287, !dbg !1266

287:                                              ; preds = %originalBBpart256, %originalBBpart252
  %288 = load i32, i32* @x.19
  %289 = load i32, i32* @y.20
  %290 = sub i32 %288, 1
  %291 = mul i32 %288, %290
  %292 = urem i32 %291, 2
  %293 = icmp eq i32 %292, 0
  %294 = icmp slt i32 %289, 10
  %295 = or i1 %293, %294
  br i1 %295, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %287, %originalBB58alteredBB
  %296 = load i8, i8* %35, align 1, !dbg !1267
  %297 = trunc i8 %296 to i1, !dbg !1267
  %298 = load i32, i32* @x.19
  %299 = load i32, i32* @y.20
  %300 = sub i32 %298, 1
  %301 = mul i32 %298, %300
  %302 = urem i32 %301, 2
  %303 = icmp eq i32 %302, 0
  %304 = icmp slt i32 %299, 10
  %305 = or i1 %303, %304
  br i1 %305, label %originalBBpart260, label %originalBB58alteredBB

originalBBpart260:                                ; preds = %originalBB58
  br i1 %297, label %475, label %306, !dbg !1269

306:                                              ; preds = %originalBBpart260
  %307 = load i32, i32* @x.19
  %308 = load i32, i32* @y.20
  %309 = sub i32 %307, 1
  %310 = mul i32 %307, %309
  %311 = urem i32 %310, 2
  %312 = icmp eq i32 %311, 0
  %313 = icmp slt i32 %308, 10
  %314 = or i1 %312, %313
  br i1 %314, label %originalBB62, label %originalBB62alteredBB

originalBB62:                                     ; preds = %306, %originalBB62alteredBB
  %315 = load i8*, i8** %26, align 8, !dbg !1270
  store i8* %315, i8** %31, align 8, !dbg !1272
  %316 = load i32, i32* @x.19
  %317 = load i32, i32* @y.20
  %318 = sub i32 %316, 1
  %319 = mul i32 %316, %318
  %320 = urem i32 %319, 2
  %321 = icmp eq i32 %320, 0
  %322 = icmp slt i32 %317, 10
  %323 = or i1 %321, %322
  br i1 %323, label %originalBBpart264, label %originalBB62alteredBB

originalBBpart264:                                ; preds = %originalBB62
  br label %324, !dbg !1273

324:                                              ; preds = %originalBBpart296, %originalBBpart264
  %325 = load i32, i32* @x.19
  %326 = load i32, i32* @y.20
  %327 = sub i32 %325, 1
  %328 = mul i32 %325, %327
  %329 = urem i32 %328, 2
  %330 = icmp eq i32 %329, 0
  %331 = icmp slt i32 %326, 10
  %332 = or i1 %330, %331
  br i1 %332, label %originalBB66, label %originalBB66alteredBB

originalBB66:                                     ; preds = %324, %originalBB66alteredBB
  %333 = load i8*, i8** %31, align 8, !dbg !1274
  %334 = load i8, i8* %333, align 1, !dbg !1276
  %335 = icmp ne i8 %334, 0, !dbg !1277
  %336 = load i32, i32* @x.19
  %337 = load i32, i32* @y.20
  %338 = sub i32 %336, 1
  %339 = mul i32 %336, %338
  %340 = urem i32 %339, 2
  %341 = icmp eq i32 %340, 0
  %342 = icmp slt i32 %337, 10
  %343 = or i1 %341, %342
  br i1 %343, label %originalBBpart268, label %originalBB66alteredBB

originalBBpart268:                                ; preds = %originalBB66
  br i1 %335, label %344, label %458, !dbg !1277

344:                                              ; preds = %originalBBpart268
  %345 = load i32, i32* @x.19
  %346 = load i32, i32* @y.20
  %347 = sub i32 %345, 1
  %348 = mul i32 %345, %347
  %349 = urem i32 %348, 2
  %350 = icmp eq i32 %349, 0
  %351 = icmp slt i32 %346, 10
  %352 = or i1 %350, %351
  br i1 %352, label %originalBB70, label %originalBB70alteredBB

originalBB70:                                     ; preds = %344, %originalBB70alteredBB
  %353 = load i32, i32* @x.19
  %354 = load i32, i32* @y.20
  %355 = sub i32 %353, 1
  %356 = mul i32 %353, %355
  %357 = urem i32 %356, 2
  %358 = icmp eq i32 %357, 0
  %359 = icmp slt i32 %354, 10
  %360 = or i1 %358, %359
  br i1 %360, label %originalBBpart272, label %originalBB70alteredBB

originalBBpart272:                                ; preds = %originalBB70
  br label %361, !dbg !1278

361:                                              ; preds = %originalBBpart272
  %362 = load i32, i32* @x.19
  %363 = load i32, i32* @y.20
  %364 = sub i32 %362, 1
  %365 = mul i32 %362, %364
  %366 = urem i32 %365, 2
  %367 = icmp eq i32 %366, 0
  %368 = icmp slt i32 %363, 10
  %369 = or i1 %367, %368
  br i1 %369, label %originalBB74, label %originalBB74alteredBB

originalBB74:                                     ; preds = %361, %originalBB74alteredBB
  %370 = load i64, i64* %29, align 8, !dbg !1279
  %371 = load i64, i64* %20, align 8, !dbg !1279
  %372 = icmp ult i64 %370, %371, !dbg !1279
  %373 = load i32, i32* @x.19
  %374 = load i32, i32* @y.20
  %375 = sub i32 %373, 1
  %376 = mul i32 %373, %375
  %377 = urem i32 %376, 2
  %378 = icmp eq i32 %377, 0
  %379 = icmp slt i32 %374, 10
  %380 = or i1 %378, %379
  br i1 %380, label %originalBBpart276, label %originalBB74alteredBB

originalBBpart276:                                ; preds = %originalBB74
  br i1 %372, label %381, label %403, !dbg !1282

381:                                              ; preds = %originalBBpart276
  %382 = load i32, i32* @x.19
  %383 = load i32, i32* @y.20
  %384 = sub i32 %382, 1
  %385 = mul i32 %382, %384
  %386 = urem i32 %385, 2
  %387 = icmp eq i32 %386, 0
  %388 = icmp slt i32 %383, 10
  %389 = or i1 %387, %388
  br i1 %389, label %originalBB78, label %originalBB78alteredBB

originalBB78:                                     ; preds = %381, %originalBB78alteredBB
  %390 = load i8*, i8** %31, align 8, !dbg !1279
  %391 = load i8, i8* %390, align 1, !dbg !1279
  %392 = load i8*, i8** %19, align 8, !dbg !1279
  %393 = load i64, i64* %29, align 8, !dbg !1279
  %394 = getelementptr inbounds i8, i8* %392, i64 %393, !dbg !1279
  store i8 %391, i8* %394, align 1, !dbg !1279
  %395 = load i32, i32* @x.19
  %396 = load i32, i32* @y.20
  %397 = sub i32 %395, 1
  %398 = mul i32 %395, %397
  %399 = urem i32 %398, 2
  %400 = icmp eq i32 %399, 0
  %401 = icmp slt i32 %396, 10
  %402 = or i1 %400, %401
  br i1 %402, label %originalBBpart280, label %originalBB78alteredBB

originalBBpart280:                                ; preds = %originalBB78
  br label %403, !dbg !1279

403:                                              ; preds = %originalBBpart280, %originalBBpart276
  %404 = load i32, i32* @x.19
  %405 = load i32, i32* @y.20
  %406 = sub i32 %404, 1
  %407 = mul i32 %404, %406
  %408 = urem i32 %407, 2
  %409 = icmp eq i32 %408, 0
  %410 = icmp slt i32 %405, 10
  %411 = or i1 %409, %410
  br i1 %411, label %originalBB82, label %originalBB82alteredBB

originalBB82:                                     ; preds = %403, %originalBB82alteredBB
  %412 = load i64, i64* %29, align 8, !dbg !1282
  %413 = add i64 %412, 1, !dbg !1282
  store i64 %413, i64* %29, align 8, !dbg !1282
  %414 = load i32, i32* @x.19
  %415 = load i32, i32* @y.20
  %416 = sub i32 %414, 1
  %417 = mul i32 %414, %416
  %418 = urem i32 %417, 2
  %419 = icmp eq i32 %418, 0
  %420 = icmp slt i32 %415, 10
  %421 = or i1 %419, %420
  br i1 %421, label %originalBBpart288, label %originalBB82alteredBB

originalBBpart288:                                ; preds = %originalBB82
  br label %422, !dbg !1282

422:                                              ; preds = %originalBBpart288
  %423 = load i32, i32* @x.19
  %424 = load i32, i32* @y.20
  %425 = sub i32 %423, 1
  %426 = mul i32 %423, %425
  %427 = urem i32 %426, 2
  %428 = icmp eq i32 %427, 0
  %429 = icmp slt i32 %424, 10
  %430 = or i1 %428, %429
  br i1 %430, label %originalBB90, label %originalBB90alteredBB

originalBB90:                                     ; preds = %422, %originalBB90alteredBB
  %431 = load i32, i32* @x.19
  %432 = load i32, i32* @y.20
  %433 = sub i32 %431, 1
  %434 = mul i32 %431, %433
  %435 = urem i32 %434, 2
  %436 = icmp eq i32 %435, 0
  %437 = icmp slt i32 %432, 10
  %438 = or i1 %436, %437
  br i1 %438, label %originalBBpart292, label %originalBB90alteredBB

originalBBpart292:                                ; preds = %originalBB90
  br label %439, !dbg !1282

439:                                              ; preds = %originalBBpart292
  %440 = load i32, i32* @x.19
  %441 = load i32, i32* @y.20
  %442 = sub i32 %440, 1
  %443 = mul i32 %440, %442
  %444 = urem i32 %443, 2
  %445 = icmp eq i32 %444, 0
  %446 = icmp slt i32 %441, 10
  %447 = or i1 %445, %446
  br i1 %447, label %originalBB94, label %originalBB94alteredBB

originalBB94:                                     ; preds = %439, %originalBB94alteredBB
  %448 = load i8*, i8** %31, align 8, !dbg !1283
  %449 = getelementptr inbounds i8, i8* %448, i32 1, !dbg !1283
  store i8* %449, i8** %31, align 8, !dbg !1283
  %450 = load i32, i32* @x.19
  %451 = load i32, i32* @y.20
  %452 = sub i32 %450, 1
  %453 = mul i32 %450, %452
  %454 = urem i32 %453, 2
  %455 = icmp eq i32 %454, 0
  %456 = icmp slt i32 %451, 10
  %457 = or i1 %455, %456
  br i1 %457, label %originalBBpart296, label %originalBB94alteredBB

originalBBpart296:                                ; preds = %originalBB94
  br label %324, !dbg !1284, !llvm.loop !1285

458:                                              ; preds = %originalBBpart268
  %459 = load i32, i32* @x.19
  %460 = load i32, i32* @y.20
  %461 = sub i32 %459, 1
  %462 = mul i32 %459, %461
  %463 = urem i32 %462, 2
  %464 = icmp eq i32 %463, 0
  %465 = icmp slt i32 %460, 10
  %466 = or i1 %464, %465
  br i1 %466, label %originalBB98, label %originalBB98alteredBB

originalBB98:                                     ; preds = %458, %originalBB98alteredBB
  %467 = load i32, i32* @x.19
  %468 = load i32, i32* @y.20
  %469 = sub i32 %467, 1
  %470 = mul i32 %467, %469
  %471 = urem i32 %470, 2
  %472 = icmp eq i32 %471, 0
  %473 = icmp slt i32 %468, 10
  %474 = or i1 %472, %473
  br i1 %474, label %originalBBpart2100, label %originalBB98alteredBB

originalBBpart2100:                               ; preds = %originalBB98
  br label %475, !dbg !1286

475:                                              ; preds = %originalBBpart2100, %originalBBpart260
  %476 = load i32, i32* @x.19
  %477 = load i32, i32* @y.20
  %478 = sub i32 %476, 1
  %479 = mul i32 %476, %478
  %480 = urem i32 %479, 2
  %481 = icmp eq i32 %480, 0
  %482 = icmp slt i32 %477, 10
  %483 = or i1 %481, %482
  br i1 %483, label %originalBB102, label %originalBB102alteredBB

originalBB102:                                    ; preds = %475, %originalBB102alteredBB
  store i8 1, i8* %33, align 1, !dbg !1287
  %484 = load i8*, i8** %27, align 8, !dbg !1288
  store i8* %484, i8** %31, align 8, !dbg !1289
  %485 = load i8*, i8** %31, align 8, !dbg !1290
  %486 = call i64 @strlen(i8* %485) #13, !dbg !1291
  store i64 %486, i64* %32, align 8, !dbg !1292
  %487 = load i32, i32* @x.19
  %488 = load i32, i32* @y.20
  %489 = sub i32 %487, 1
  %490 = mul i32 %487, %489
  %491 = urem i32 %490, 2
  %492 = icmp eq i32 %491, 0
  %493 = icmp slt i32 %488, 10
  %494 = or i1 %492, %493
  br i1 %494, label %originalBBpart2104, label %originalBB102alteredBB

originalBBpart2104:                               ; preds = %originalBB102
  br label %745, !dbg !1293

495:                                              ; preds = %originalBBpart212
  %496 = load i32, i32* @x.19
  %497 = load i32, i32* @y.20
  %498 = sub i32 %496, 1
  %499 = mul i32 %496, %498
  %500 = urem i32 %499, 2
  %501 = icmp eq i32 %500, 0
  %502 = icmp slt i32 %497, 10
  %503 = or i1 %501, %502
  br i1 %503, label %originalBB106, label %originalBB106alteredBB

originalBB106:                                    ; preds = %495, %originalBB106alteredBB
  store i8 1, i8* %33, align 1, !dbg !1294
  %504 = load i32, i32* @x.19
  %505 = load i32, i32* @y.20
  %506 = sub i32 %504, 1
  %507 = mul i32 %504, %506
  %508 = urem i32 %507, 2
  %509 = icmp eq i32 %508, 0
  %510 = icmp slt i32 %505, 10
  %511 = or i1 %509, %510
  br i1 %511, label %originalBBpart2108, label %originalBB106alteredBB

originalBBpart2108:                               ; preds = %originalBB106
  br label %512, !dbg !1295

512:                                              ; preds = %originalBBpart2108, %originalBBpart212
  %513 = load i32, i32* @x.19
  %514 = load i32, i32* @y.20
  %515 = sub i32 %513, 1
  %516 = mul i32 %513, %515
  %517 = urem i32 %516, 2
  %518 = icmp eq i32 %517, 0
  %519 = icmp slt i32 %514, 10
  %520 = or i1 %518, %519
  br i1 %520, label %originalBB110, label %originalBB110alteredBB

originalBB110:                                    ; preds = %512, %originalBB110alteredBB
  store i8 1, i8* %35, align 1, !dbg !1296
  %521 = load i32, i32* @x.19
  %522 = load i32, i32* @y.20
  %523 = sub i32 %521, 1
  %524 = mul i32 %521, %523
  %525 = urem i32 %524, 2
  %526 = icmp eq i32 %525, 0
  %527 = icmp slt i32 %522, 10
  %528 = or i1 %526, %527
  br i1 %528, label %originalBBpart2112, label %originalBB110alteredBB

originalBBpart2112:                               ; preds = %originalBB110
  br label %529, !dbg !1297

529:                                              ; preds = %originalBBpart2112, %originalBBpart212
  %530 = load i32, i32* @x.19
  %531 = load i32, i32* @y.20
  %532 = sub i32 %530, 1
  %533 = mul i32 %530, %532
  %534 = urem i32 %533, 2
  %535 = icmp eq i32 %534, 0
  %536 = icmp slt i32 %531, 10
  %537 = or i1 %535, %536
  br i1 %537, label %originalBB114, label %originalBB114alteredBB

originalBB114:                                    ; preds = %529, %originalBB114alteredBB
  %538 = load i8, i8* %35, align 1, !dbg !1298
  %539 = trunc i8 %538 to i1, !dbg !1298
  %540 = load i32, i32* @x.19
  %541 = load i32, i32* @y.20
  %542 = sub i32 %540, 1
  %543 = mul i32 %540, %542
  %544 = urem i32 %543, 2
  %545 = icmp eq i32 %544, 0
  %546 = icmp slt i32 %541, 10
  %547 = or i1 %545, %546
  br i1 %547, label %originalBBpart2116, label %originalBB114alteredBB

originalBBpart2116:                               ; preds = %originalBB114
  br i1 %539, label %565, label %548, !dbg !1300

548:                                              ; preds = %originalBBpart2116
  %549 = load i32, i32* @x.19
  %550 = load i32, i32* @y.20
  %551 = sub i32 %549, 1
  %552 = mul i32 %549, %551
  %553 = urem i32 %552, 2
  %554 = icmp eq i32 %553, 0
  %555 = icmp slt i32 %550, 10
  %556 = or i1 %554, %555
  br i1 %556, label %originalBB118, label %originalBB118alteredBB

originalBB118:                                    ; preds = %548, %originalBB118alteredBB
  store i8 1, i8* %33, align 1, !dbg !1301
  %557 = load i32, i32* @x.19
  %558 = load i32, i32* @y.20
  %559 = sub i32 %557, 1
  %560 = mul i32 %557, %559
  %561 = urem i32 %560, 2
  %562 = icmp eq i32 %561, 0
  %563 = icmp slt i32 %558, 10
  %564 = or i1 %562, %563
  br i1 %564, label %originalBBpart2120, label %originalBB118alteredBB

originalBBpart2120:                               ; preds = %originalBB118
  br label %565, !dbg !1302

565:                                              ; preds = %originalBBpart2120, %originalBBpart2116
  %566 = load i32, i32* @x.19
  %567 = load i32, i32* @y.20
  %568 = sub i32 %566, 1
  %569 = mul i32 %566, %568
  %570 = urem i32 %569, 2
  %571 = icmp eq i32 %570, 0
  %572 = icmp slt i32 %567, 10
  %573 = or i1 %571, %572
  br i1 %573, label %originalBB122, label %originalBB122alteredBB

originalBB122:                                    ; preds = %565, %originalBB122alteredBB
  %574 = load i32, i32* @x.19
  %575 = load i32, i32* @y.20
  %576 = sub i32 %574, 1
  %577 = mul i32 %574, %576
  %578 = urem i32 %577, 2
  %579 = icmp eq i32 %578, 0
  %580 = icmp slt i32 %575, 10
  %581 = or i1 %579, %580
  br i1 %581, label %originalBBpart2124, label %originalBB122alteredBB

originalBBpart2124:                               ; preds = %originalBB122
  br label %582, !dbg !1303

582:                                              ; preds = %originalBBpart2124, %originalBBpart212
  %583 = load i32, i32* @x.19
  %584 = load i32, i32* @y.20
  %585 = sub i32 %583, 1
  %586 = mul i32 %583, %585
  %587 = urem i32 %586, 2
  %588 = icmp eq i32 %587, 0
  %589 = icmp slt i32 %584, 10
  %590 = or i1 %588, %589
  br i1 %590, label %originalBB126, label %originalBB126alteredBB

originalBB126:                                    ; preds = %582, %originalBB126alteredBB
  store i32 2, i32* %23, align 4, !dbg !1304
  %591 = load i8, i8* %35, align 1, !dbg !1305
  %592 = trunc i8 %591 to i1, !dbg !1305
  %593 = load i32, i32* @x.19
  %594 = load i32, i32* @y.20
  %595 = sub i32 %593, 1
  %596 = mul i32 %593, %595
  %597 = urem i32 %596, 2
  %598 = icmp eq i32 %597, 0
  %599 = icmp slt i32 %594, 10
  %600 = or i1 %598, %599
  br i1 %600, label %originalBBpart2128, label %originalBB126alteredBB

originalBBpart2128:                               ; preds = %originalBB126
  br i1 %592, label %694, label %601, !dbg !1307

601:                                              ; preds = %originalBBpart2128
  %602 = load i32, i32* @x.19
  %603 = load i32, i32* @y.20
  %604 = sub i32 %602, 1
  %605 = mul i32 %602, %604
  %606 = urem i32 %605, 2
  %607 = icmp eq i32 %606, 0
  %608 = icmp slt i32 %603, 10
  %609 = or i1 %607, %608
  br i1 %609, label %originalBB130, label %originalBB130alteredBB

originalBB130:                                    ; preds = %601, %originalBB130alteredBB
  %610 = load i32, i32* @x.19
  %611 = load i32, i32* @y.20
  %612 = sub i32 %610, 1
  %613 = mul i32 %610, %612
  %614 = urem i32 %613, 2
  %615 = icmp eq i32 %614, 0
  %616 = icmp slt i32 %611, 10
  %617 = or i1 %615, %616
  br i1 %617, label %originalBBpart2132, label %originalBB130alteredBB

originalBBpart2132:                               ; preds = %originalBB130
  br label %618, !dbg !1308

618:                                              ; preds = %originalBBpart2132
  %619 = load i32, i32* @x.19
  %620 = load i32, i32* @y.20
  %621 = sub i32 %619, 1
  %622 = mul i32 %619, %621
  %623 = urem i32 %622, 2
  %624 = icmp eq i32 %623, 0
  %625 = icmp slt i32 %620, 10
  %626 = or i1 %624, %625
  br i1 %626, label %originalBB134, label %originalBB134alteredBB

originalBB134:                                    ; preds = %618, %originalBB134alteredBB
  %627 = load i64, i64* %29, align 8, !dbg !1309
  %628 = load i64, i64* %20, align 8, !dbg !1309
  %629 = icmp ult i64 %627, %628, !dbg !1309
  %630 = load i32, i32* @x.19
  %631 = load i32, i32* @y.20
  %632 = sub i32 %630, 1
  %633 = mul i32 %630, %632
  %634 = urem i32 %633, 2
  %635 = icmp eq i32 %634, 0
  %636 = icmp slt i32 %631, 10
  %637 = or i1 %635, %636
  br i1 %637, label %originalBBpart2136, label %originalBB134alteredBB

originalBBpart2136:                               ; preds = %originalBB134
  br i1 %629, label %638, label %658, !dbg !1312

638:                                              ; preds = %originalBBpart2136
  %639 = load i32, i32* @x.19
  %640 = load i32, i32* @y.20
  %641 = sub i32 %639, 1
  %642 = mul i32 %639, %641
  %643 = urem i32 %642, 2
  %644 = icmp eq i32 %643, 0
  %645 = icmp slt i32 %640, 10
  %646 = or i1 %644, %645
  br i1 %646, label %originalBB138, label %originalBB138alteredBB

originalBB138:                                    ; preds = %638, %originalBB138alteredBB
  %647 = load i8*, i8** %19, align 8, !dbg !1309
  %648 = load i64, i64* %29, align 8, !dbg !1309
  %649 = getelementptr inbounds i8, i8* %647, i64 %648, !dbg !1309
  store i8 39, i8* %649, align 1, !dbg !1309
  %650 = load i32, i32* @x.19
  %651 = load i32, i32* @y.20
  %652 = sub i32 %650, 1
  %653 = mul i32 %650, %652
  %654 = urem i32 %653, 2
  %655 = icmp eq i32 %654, 0
  %656 = icmp slt i32 %651, 10
  %657 = or i1 %655, %656
  br i1 %657, label %originalBBpart2140, label %originalBB138alteredBB

originalBBpart2140:                               ; preds = %originalBB138
  br label %658, !dbg !1309

658:                                              ; preds = %originalBBpart2140, %originalBBpart2136
  %659 = load i32, i32* @x.19
  %660 = load i32, i32* @y.20
  %661 = sub i32 %659, 1
  %662 = mul i32 %659, %661
  %663 = urem i32 %662, 2
  %664 = icmp eq i32 %663, 0
  %665 = icmp slt i32 %660, 10
  %666 = or i1 %664, %665
  br i1 %666, label %originalBB142, label %originalBB142alteredBB

originalBB142:                                    ; preds = %658, %originalBB142alteredBB
  %667 = load i64, i64* %29, align 8, !dbg !1312
  %668 = add i64 %667, 1, !dbg !1312
  store i64 %668, i64* %29, align 8, !dbg !1312
  %669 = load i32, i32* @x.19
  %670 = load i32, i32* @y.20
  %671 = sub i32 %669, 1
  %672 = mul i32 %669, %671
  %673 = urem i32 %672, 2
  %674 = icmp eq i32 %673, 0
  %675 = icmp slt i32 %670, 10
  %676 = or i1 %674, %675
  br i1 %676, label %originalBBpart2155, label %originalBB142alteredBB

originalBBpart2155:                               ; preds = %originalBB142
  br label %677, !dbg !1312

677:                                              ; preds = %originalBBpart2155
  %678 = load i32, i32* @x.19
  %679 = load i32, i32* @y.20
  %680 = sub i32 %678, 1
  %681 = mul i32 %678, %680
  %682 = urem i32 %681, 2
  %683 = icmp eq i32 %682, 0
  %684 = icmp slt i32 %679, 10
  %685 = or i1 %683, %684
  br i1 %685, label %originalBB157, label %originalBB157alteredBB

originalBB157:                                    ; preds = %677, %originalBB157alteredBB
  %686 = load i32, i32* @x.19
  %687 = load i32, i32* @y.20
  %688 = sub i32 %686, 1
  %689 = mul i32 %686, %688
  %690 = urem i32 %689, 2
  %691 = icmp eq i32 %690, 0
  %692 = icmp slt i32 %687, 10
  %693 = or i1 %691, %692
  br i1 %693, label %originalBBpart2159, label %originalBB157alteredBB

originalBBpart2159:                               ; preds = %originalBB157
  br label %694, !dbg !1312

694:                                              ; preds = %originalBBpart2159, %originalBBpart2128
  %695 = load i32, i32* @x.19
  %696 = load i32, i32* @y.20
  %697 = sub i32 %695, 1
  %698 = mul i32 %695, %697
  %699 = urem i32 %698, 2
  %700 = icmp eq i32 %699, 0
  %701 = icmp slt i32 %696, 10
  %702 = or i1 %700, %701
  br i1 %702, label %originalBB161, label %originalBB161alteredBB

originalBB161:                                    ; preds = %694, %originalBB161alteredBB
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.64, i64 0, i64 0), i8** %31, align 8, !dbg !1313
  store i64 1, i64* %32, align 8, !dbg !1314
  %703 = load i32, i32* @x.19
  %704 = load i32, i32* @y.20
  %705 = sub i32 %703, 1
  %706 = mul i32 %703, %705
  %707 = urem i32 %706, 2
  %708 = icmp eq i32 %707, 0
  %709 = icmp slt i32 %704, 10
  %710 = or i1 %708, %709
  br i1 %710, label %originalBBpart2163, label %originalBB161alteredBB

originalBBpart2163:                               ; preds = %originalBB161
  br label %745, !dbg !1315

711:                                              ; preds = %originalBBpart212
  %712 = load i32, i32* @x.19
  %713 = load i32, i32* @y.20
  %714 = sub i32 %712, 1
  %715 = mul i32 %712, %714
  %716 = urem i32 %715, 2
  %717 = icmp eq i32 %716, 0
  %718 = icmp slt i32 %713, 10
  %719 = or i1 %717, %718
  br i1 %719, label %originalBB165, label %originalBB165alteredBB

originalBB165:                                    ; preds = %711, %originalBB165alteredBB
  store i8 0, i8* %35, align 1, !dbg !1316
  %720 = load i32, i32* @x.19
  %721 = load i32, i32* @y.20
  %722 = sub i32 %720, 1
  %723 = mul i32 %720, %722
  %724 = urem i32 %723, 2
  %725 = icmp eq i32 %724, 0
  %726 = icmp slt i32 %721, 10
  %727 = or i1 %725, %726
  br i1 %727, label %originalBBpart2167, label %originalBB165alteredBB

originalBBpart2167:                               ; preds = %originalBB165
  br label %745, !dbg !1317

728:                                              ; preds = %originalBBpart212
  %729 = load i32, i32* @x.19
  %730 = load i32, i32* @y.20
  %731 = sub i32 %729, 1
  %732 = mul i32 %729, %731
  %733 = urem i32 %732, 2
  %734 = icmp eq i32 %733, 0
  %735 = icmp slt i32 %730, 10
  %736 = or i1 %734, %735
  br i1 %736, label %originalBB169, label %originalBB169alteredBB

originalBB169:                                    ; preds = %728, %originalBB169alteredBB
  call void @abort() #12, !dbg !1318
  %737 = load i32, i32* @x.19
  %738 = load i32, i32* @y.20
  %739 = sub i32 %737, 1
  %740 = mul i32 %737, %739
  %741 = urem i32 %740, 2
  %742 = icmp eq i32 %741, 0
  %743 = icmp slt i32 %738, 10
  %744 = or i1 %742, %743
  br i1 %744, label %originalBBpart2171, label %originalBB169alteredBB

originalBBpart2171:                               ; preds = %originalBB169
  unreachable, !dbg !1318

745:                                              ; preds = %originalBBpart2167, %originalBBpart2163, %originalBBpart2104, %originalBBpart248, %originalBBpart244
  %746 = load i32, i32* @x.19
  %747 = load i32, i32* @y.20
  %748 = sub i32 %746, 1
  %749 = mul i32 %746, %748
  %750 = urem i32 %749, 2
  %751 = icmp eq i32 %750, 0
  %752 = icmp slt i32 %747, 10
  %753 = or i1 %751, %752
  br i1 %753, label %originalBB173, label %originalBB173alteredBB

originalBB173:                                    ; preds = %745, %originalBB173alteredBB
  store i64 0, i64* %28, align 8, !dbg !1319
  %754 = load i32, i32* @x.19
  %755 = load i32, i32* @y.20
  %756 = sub i32 %754, 1
  %757 = mul i32 %754, %756
  %758 = urem i32 %757, 2
  %759 = icmp eq i32 %758, 0
  %760 = icmp slt i32 %755, 10
  %761 = or i1 %759, %760
  br i1 %761, label %originalBBpart2175, label %originalBB173alteredBB

originalBBpart2175:                               ; preds = %originalBB173
  br label %762, !dbg !1321

762:                                              ; preds = %originalBBpart21871, %originalBBpart2175
  %763 = load i32, i32* @x.19
  %764 = load i32, i32* @y.20
  %765 = sub i32 %763, 1
  %766 = mul i32 %763, %765
  %767 = urem i32 %766, 2
  %768 = icmp eq i32 %767, 0
  %769 = icmp slt i32 %764, 10
  %770 = or i1 %768, %769
  br i1 %770, label %originalBB177, label %originalBB177alteredBB

originalBB177:                                    ; preds = %762, %originalBB177alteredBB
  %771 = load i64, i64* %22, align 8, !dbg !1322
  %772 = icmp eq i64 %771, -1, !dbg !1324
  %773 = load i32, i32* @x.19
  %774 = load i32, i32* @y.20
  %775 = sub i32 %773, 1
  %776 = mul i32 %773, %775
  %777 = urem i32 %776, 2
  %778 = icmp eq i32 %777, 0
  %779 = icmp slt i32 %774, 10
  %780 = or i1 %778, %779
  br i1 %780, label %originalBBpart2179, label %originalBB177alteredBB

originalBBpart2179:                               ; preds = %originalBB177
  br i1 %772, label %781, label %805, !dbg !1322

781:                                              ; preds = %originalBBpart2179
  %782 = load i32, i32* @x.19
  %783 = load i32, i32* @y.20
  %784 = sub i32 %782, 1
  %785 = mul i32 %782, %784
  %786 = urem i32 %785, 2
  %787 = icmp eq i32 %786, 0
  %788 = icmp slt i32 %783, 10
  %789 = or i1 %787, %788
  br i1 %789, label %originalBB181, label %originalBB181alteredBB

originalBB181:                                    ; preds = %781, %originalBB181alteredBB
  %790 = load i8*, i8** %21, align 8, !dbg !1325
  %791 = load i64, i64* %28, align 8, !dbg !1326
  %792 = getelementptr inbounds i8, i8* %790, i64 %791, !dbg !1325
  %793 = load i8, i8* %792, align 1, !dbg !1325
  %794 = sext i8 %793 to i32, !dbg !1325
  %795 = icmp eq i32 %794, 0, !dbg !1327
  %796 = zext i1 %795 to i32, !dbg !1327
  %797 = load i32, i32* @x.19
  %798 = load i32, i32* @y.20
  %799 = sub i32 %797, 1
  %800 = mul i32 %797, %799
  %801 = urem i32 %800, 2
  %802 = icmp eq i32 %801, 0
  %803 = icmp slt i32 %798, 10
  %804 = or i1 %802, %803
  br i1 %804, label %originalBBpart2183, label %originalBB181alteredBB

originalBBpart2183:                               ; preds = %originalBB181
  br label %826, !dbg !1322

805:                                              ; preds = %originalBBpart2179
  %806 = load i32, i32* @x.19
  %807 = load i32, i32* @y.20
  %808 = sub i32 %806, 1
  %809 = mul i32 %806, %808
  %810 = urem i32 %809, 2
  %811 = icmp eq i32 %810, 0
  %812 = icmp slt i32 %807, 10
  %813 = or i1 %811, %812
  br i1 %813, label %originalBB185, label %originalBB185alteredBB

originalBB185:                                    ; preds = %805, %originalBB185alteredBB
  %814 = load i64, i64* %28, align 8, !dbg !1328
  %815 = load i64, i64* %22, align 8, !dbg !1329
  %816 = icmp eq i64 %814, %815, !dbg !1330
  %817 = zext i1 %816 to i32, !dbg !1330
  %818 = load i32, i32* @x.19
  %819 = load i32, i32* @y.20
  %820 = sub i32 %818, 1
  %821 = mul i32 %818, %820
  %822 = urem i32 %821, 2
  %823 = icmp eq i32 %822, 0
  %824 = icmp slt i32 %819, 10
  %825 = or i1 %823, %824
  br i1 %825, label %originalBBpart2187, label %originalBB185alteredBB

originalBBpart2187:                               ; preds = %originalBB185
  br label %826, !dbg !1322

826:                                              ; preds = %originalBBpart2187, %originalBBpart2183
  %827 = phi i32 [ %796, %originalBBpart2183 ], [ %817, %originalBBpart2187 ], !dbg !1322
  %828 = load i32, i32* @x.19
  %829 = load i32, i32* @y.20
  %830 = sub i32 %828, 1
  %831 = mul i32 %828, %830
  %832 = urem i32 %831, 2
  %833 = icmp eq i32 %832, 0
  %834 = icmp slt i32 %829, 10
  %835 = or i1 %833, %834
  br i1 %835, label %originalBB189, label %originalBB189alteredBB

originalBB189:                                    ; preds = %826, %originalBB189alteredBB
  %836 = icmp ne i32 %827, 0, !dbg !1331
  %837 = xor i1 %836, true, !dbg !1331
  %838 = load i32, i32* @x.19
  %839 = load i32, i32* @y.20
  %840 = sub i32 %838, 1
  %841 = mul i32 %838, %840
  %842 = urem i32 %841, 2
  %843 = icmp eq i32 %842, 0
  %844 = icmp slt i32 %839, 10
  %845 = or i1 %843, %844
  br i1 %845, label %originalBBpart2201, label %originalBB189alteredBB

originalBBpart2201:                               ; preds = %originalBB189
  br i1 %837, label %846, label %6460, !dbg !1332

846:                                              ; preds = %originalBBpart2201
  call void @llvm.dbg.declare(metadata i8* %39, metadata !1333, metadata !DIExpression()), !dbg !1335
  call void @llvm.dbg.declare(metadata i8* %40, metadata !1336, metadata !DIExpression()), !dbg !1337
  call void @llvm.dbg.declare(metadata i8* %41, metadata !1338, metadata !DIExpression()), !dbg !1339
  %847 = load i32, i32* @x.19
  %848 = load i32, i32* @y.20
  %849 = sub i32 %847, 1
  %850 = mul i32 %847, %849
  %851 = urem i32 %850, 2
  %852 = icmp eq i32 %851, 0
  %853 = icmp slt i32 %848, 10
  %854 = or i1 %852, %853
  br i1 %854, label %originalBB203, label %originalBB203alteredBB

originalBB203:                                    ; preds = %846, %originalBB203alteredBB
  store i8 0, i8* %41, align 1, !dbg !1339
  call void @llvm.dbg.declare(metadata i8* %42, metadata !1340, metadata !DIExpression()), !dbg !1341
  store i8 0, i8* %42, align 1, !dbg !1341
  call void @llvm.dbg.declare(metadata i8* %43, metadata !1342, metadata !DIExpression()), !dbg !1343
  store i8 0, i8* %43, align 1, !dbg !1343
  %855 = load i8, i8* %33, align 1, !dbg !1344
  %856 = trunc i8 %855 to i1, !dbg !1344
  %857 = load i32, i32* @x.19
  %858 = load i32, i32* @y.20
  %859 = sub i32 %857, 1
  %860 = mul i32 %857, %859
  %861 = urem i32 %860, 2
  %862 = icmp eq i32 %861, 0
  %863 = icmp slt i32 %858, 10
  %864 = or i1 %862, %863
  br i1 %864, label %originalBBpart2205, label %originalBB203alteredBB

originalBBpart2205:                               ; preds = %originalBB203
  br i1 %856, label %865, label %1077, !dbg !1346

865:                                              ; preds = %originalBBpart2205
  %866 = load i32, i32* @x.19
  %867 = load i32, i32* @y.20
  %868 = sub i32 %866, 1
  %869 = mul i32 %866, %868
  %870 = urem i32 %869, 2
  %871 = icmp eq i32 %870, 0
  %872 = icmp slt i32 %867, 10
  %873 = or i1 %871, %872
  br i1 %873, label %originalBB207, label %originalBB207alteredBB

originalBB207:                                    ; preds = %865, %originalBB207alteredBB
  %874 = load i32, i32* %23, align 4, !dbg !1347
  %875 = icmp ne i32 %874, 2, !dbg !1348
  %876 = load i32, i32* @x.19
  %877 = load i32, i32* @y.20
  %878 = sub i32 %876, 1
  %879 = mul i32 %876, %878
  %880 = urem i32 %879, 2
  %881 = icmp eq i32 %880, 0
  %882 = icmp slt i32 %877, 10
  %883 = or i1 %881, %882
  br i1 %883, label %originalBBpart2209, label %originalBB207alteredBB

originalBBpart2209:                               ; preds = %originalBB207
  br i1 %875, label %884, label %1077, !dbg !1349

884:                                              ; preds = %originalBBpart2209
  %885 = load i32, i32* @x.19
  %886 = load i32, i32* @y.20
  %887 = sub i32 %885, 1
  %888 = mul i32 %885, %887
  %889 = urem i32 %888, 2
  %890 = icmp eq i32 %889, 0
  %891 = icmp slt i32 %886, 10
  %892 = or i1 %890, %891
  br i1 %892, label %originalBB211, label %originalBB211alteredBB

originalBB211:                                    ; preds = %884, %originalBB211alteredBB
  %893 = load i64, i64* %32, align 8, !dbg !1350
  %894 = icmp ne i64 %893, 0, !dbg !1350
  %895 = load i32, i32* @x.19
  %896 = load i32, i32* @y.20
  %897 = sub i32 %895, 1
  %898 = mul i32 %895, %897
  %899 = urem i32 %898, 2
  %900 = icmp eq i32 %899, 0
  %901 = icmp slt i32 %896, 10
  %902 = or i1 %900, %901
  br i1 %902, label %originalBBpart2213, label %originalBB211alteredBB

originalBBpart2213:                               ; preds = %originalBB211
  br i1 %894, label %903, label %1077, !dbg !1351

903:                                              ; preds = %originalBBpart2213
  %904 = load i32, i32* @x.19
  %905 = load i32, i32* @y.20
  %906 = sub i32 %904, 1
  %907 = mul i32 %904, %906
  %908 = urem i32 %907, 2
  %909 = icmp eq i32 %908, 0
  %910 = icmp slt i32 %905, 10
  %911 = or i1 %909, %910
  br i1 %911, label %originalBB215, label %originalBB215alteredBB

originalBB215:                                    ; preds = %903, %originalBB215alteredBB
  %912 = load i64, i64* %28, align 8, !dbg !1352
  %913 = load i64, i64* %32, align 8, !dbg !1353
  %914 = add i64 %912, %913, !dbg !1354
  %915 = load i64, i64* %22, align 8, !dbg !1355
  %916 = icmp eq i64 %915, -1, !dbg !1356
  %917 = load i32, i32* @x.19
  %918 = load i32, i32* @y.20
  %919 = sub i32 %917, 1
  %920 = mul i32 %917, %919
  %921 = urem i32 %920, 2
  %922 = icmp eq i32 %921, 0
  %923 = icmp slt i32 %918, 10
  %924 = or i1 %922, %923
  br i1 %924, label %originalBBpart2233, label %originalBB215alteredBB

originalBBpart2233:                               ; preds = %originalBB215
  br i1 %916, label %925, label %963, !dbg !1357

925:                                              ; preds = %originalBBpart2233
  %926 = load i32, i32* @x.19
  %927 = load i32, i32* @y.20
  %928 = sub i32 %926, 1
  %929 = mul i32 %926, %928
  %930 = urem i32 %929, 2
  %931 = icmp eq i32 %930, 0
  %932 = icmp slt i32 %927, 10
  %933 = or i1 %931, %932
  br i1 %933, label %originalBB235, label %originalBB235alteredBB

originalBB235:                                    ; preds = %925, %originalBB235alteredBB
  %934 = load i64, i64* %32, align 8, !dbg !1358
  %935 = icmp ult i64 1, %934, !dbg !1359
  %936 = load i32, i32* @x.19
  %937 = load i32, i32* @y.20
  %938 = sub i32 %936, 1
  %939 = mul i32 %936, %938
  %940 = urem i32 %939, 2
  %941 = icmp eq i32 %940, 0
  %942 = icmp slt i32 %937, 10
  %943 = or i1 %941, %942
  br i1 %943, label %originalBBpart2237, label %originalBB235alteredBB

originalBBpart2237:                               ; preds = %originalBB235
  br i1 %935, label %944, label %963, !dbg !1355

944:                                              ; preds = %originalBBpart2237
  %945 = load i32, i32* @x.19
  %946 = load i32, i32* @y.20
  %947 = sub i32 %945, 1
  %948 = mul i32 %945, %947
  %949 = urem i32 %948, 2
  %950 = icmp eq i32 %949, 0
  %951 = icmp slt i32 %946, 10
  %952 = or i1 %950, %951
  br i1 %952, label %originalBB239, label %originalBB239alteredBB

originalBB239:                                    ; preds = %944, %originalBB239alteredBB
  %953 = load i8*, i8** %21, align 8, !dbg !1360
  %954 = call i64 @strlen(i8* %953) #13, !dbg !1361
  store i64 %954, i64* %22, align 8, !dbg !1362
  %955 = load i32, i32* @x.19
  %956 = load i32, i32* @y.20
  %957 = sub i32 %955, 1
  %958 = mul i32 %955, %957
  %959 = urem i32 %958, 2
  %960 = icmp eq i32 %959, 0
  %961 = icmp slt i32 %956, 10
  %962 = or i1 %960, %961
  br i1 %962, label %originalBBpart2241, label %originalBB239alteredBB

originalBBpart2241:                               ; preds = %originalBB239
  br label %981, !dbg !1355

963:                                              ; preds = %originalBBpart2237, %originalBBpart2233
  %964 = load i32, i32* @x.19
  %965 = load i32, i32* @y.20
  %966 = sub i32 %964, 1
  %967 = mul i32 %964, %966
  %968 = urem i32 %967, 2
  %969 = icmp eq i32 %968, 0
  %970 = icmp slt i32 %965, 10
  %971 = or i1 %969, %970
  br i1 %971, label %originalBB243, label %originalBB243alteredBB

originalBB243:                                    ; preds = %963, %originalBB243alteredBB
  %972 = load i64, i64* %22, align 8, !dbg !1363
  %973 = load i32, i32* @x.19
  %974 = load i32, i32* @y.20
  %975 = sub i32 %973, 1
  %976 = mul i32 %973, %975
  %977 = urem i32 %976, 2
  %978 = icmp eq i32 %977, 0
  %979 = icmp slt i32 %974, 10
  %980 = or i1 %978, %979
  br i1 %980, label %originalBBpart2245, label %originalBB243alteredBB

originalBBpart2245:                               ; preds = %originalBB243
  br label %981, !dbg !1355

981:                                              ; preds = %originalBBpart2245, %originalBBpart2241
  %982 = phi i64 [ %954, %originalBBpart2241 ], [ %972, %originalBBpart2245 ], !dbg !1355
  %983 = load i32, i32* @x.19
  %984 = load i32, i32* @y.20
  %985 = sub i32 %983, 1
  %986 = mul i32 %983, %985
  %987 = urem i32 %986, 2
  %988 = icmp eq i32 %987, 0
  %989 = icmp slt i32 %984, 10
  %990 = or i1 %988, %989
  br i1 %990, label %originalBB247, label %originalBB247alteredBB

originalBB247:                                    ; preds = %981, %originalBB247alteredBB
  %991 = icmp ule i64 %914, %982, !dbg !1364
  %992 = load i32, i32* @x.19
  %993 = load i32, i32* @y.20
  %994 = sub i32 %992, 1
  %995 = mul i32 %992, %994
  %996 = urem i32 %995, 2
  %997 = icmp eq i32 %996, 0
  %998 = icmp slt i32 %993, 10
  %999 = or i1 %997, %998
  br i1 %999, label %originalBBpart2249, label %originalBB247alteredBB

originalBBpart2249:                               ; preds = %originalBB247
  br i1 %991, label %1000, label %1077, !dbg !1365

1000:                                             ; preds = %originalBBpart2249
  %1001 = load i32, i32* @x.19
  %1002 = load i32, i32* @y.20
  %1003 = sub i32 %1001, 1
  %1004 = mul i32 %1001, %1003
  %1005 = urem i32 %1004, 2
  %1006 = icmp eq i32 %1005, 0
  %1007 = icmp slt i32 %1002, 10
  %1008 = or i1 %1006, %1007
  br i1 %1008, label %originalBB251, label %originalBB251alteredBB

originalBB251:                                    ; preds = %1000, %originalBB251alteredBB
  %1009 = load i8*, i8** %21, align 8, !dbg !1366
  %1010 = load i64, i64* %28, align 8, !dbg !1367
  %1011 = getelementptr inbounds i8, i8* %1009, i64 %1010, !dbg !1368
  %1012 = load i8*, i8** %31, align 8, !dbg !1369
  %1013 = load i64, i64* %32, align 8, !dbg !1370
  %1014 = call i32 @memcmp(i8* %1011, i8* %1012, i64 %1013) #13, !dbg !1371
  %1015 = icmp eq i32 %1014, 0, !dbg !1372
  %1016 = load i32, i32* @x.19
  %1017 = load i32, i32* @y.20
  %1018 = sub i32 %1016, 1
  %1019 = mul i32 %1016, %1018
  %1020 = urem i32 %1019, 2
  %1021 = icmp eq i32 %1020, 0
  %1022 = icmp slt i32 %1017, 10
  %1023 = or i1 %1021, %1022
  br i1 %1023, label %originalBBpart2253, label %originalBB251alteredBB

originalBBpart2253:                               ; preds = %originalBB251
  br i1 %1015, label %1024, label %1077, !dbg !1373

1024:                                             ; preds = %originalBBpart2253
  %1025 = load i32, i32* @x.19
  %1026 = load i32, i32* @y.20
  %1027 = sub i32 %1025, 1
  %1028 = mul i32 %1025, %1027
  %1029 = urem i32 %1028, 2
  %1030 = icmp eq i32 %1029, 0
  %1031 = icmp slt i32 %1026, 10
  %1032 = or i1 %1030, %1031
  br i1 %1032, label %originalBB255, label %originalBB255alteredBB

originalBB255:                                    ; preds = %1024, %originalBB255alteredBB
  %1033 = load i8, i8* %35, align 1, !dbg !1374
  %1034 = trunc i8 %1033 to i1, !dbg !1374
  %1035 = load i32, i32* @x.19
  %1036 = load i32, i32* @y.20
  %1037 = sub i32 %1035, 1
  %1038 = mul i32 %1035, %1037
  %1039 = urem i32 %1038, 2
  %1040 = icmp eq i32 %1039, 0
  %1041 = icmp slt i32 %1036, 10
  %1042 = or i1 %1040, %1041
  br i1 %1042, label %originalBBpart2257, label %originalBB255alteredBB

originalBBpart2257:                               ; preds = %originalBB255
  br i1 %1034, label %1043, label %1060, !dbg !1377

1043:                                             ; preds = %originalBBpart2257
  %1044 = load i32, i32* @x.19
  %1045 = load i32, i32* @y.20
  %1046 = sub i32 %1044, 1
  %1047 = mul i32 %1044, %1046
  %1048 = urem i32 %1047, 2
  %1049 = icmp eq i32 %1048, 0
  %1050 = icmp slt i32 %1045, 10
  %1051 = or i1 %1049, %1050
  br i1 %1051, label %originalBB259, label %originalBB259alteredBB

originalBB259:                                    ; preds = %1043, %originalBB259alteredBB
  %1052 = load i32, i32* @x.19
  %1053 = load i32, i32* @y.20
  %1054 = sub i32 %1052, 1
  %1055 = mul i32 %1052, %1054
  %1056 = urem i32 %1055, 2
  %1057 = icmp eq i32 %1056, 0
  %1058 = icmp slt i32 %1053, 10
  %1059 = or i1 %1057, %1058
  br i1 %1059, label %originalBBpart2261, label %originalBB259alteredBB

originalBBpart2261:                               ; preds = %originalBB259
  br label %6990, !dbg !1378

1060:                                             ; preds = %originalBBpart2257
  %1061 = load i32, i32* @x.19
  %1062 = load i32, i32* @y.20
  %1063 = sub i32 %1061, 1
  %1064 = mul i32 %1061, %1063
  %1065 = urem i32 %1064, 2
  %1066 = icmp eq i32 %1065, 0
  %1067 = icmp slt i32 %1062, 10
  %1068 = or i1 %1066, %1067
  br i1 %1068, label %originalBB263, label %originalBB263alteredBB

originalBB263:                                    ; preds = %1060, %originalBB263alteredBB
  store i8 1, i8* %41, align 1, !dbg !1379
  %1069 = load i32, i32* @x.19
  %1070 = load i32, i32* @y.20
  %1071 = sub i32 %1069, 1
  %1072 = mul i32 %1069, %1071
  %1073 = urem i32 %1072, 2
  %1074 = icmp eq i32 %1073, 0
  %1075 = icmp slt i32 %1070, 10
  %1076 = or i1 %1074, %1075
  br i1 %1076, label %originalBBpart2265, label %originalBB263alteredBB

originalBBpart2265:                               ; preds = %originalBB263
  br label %1077, !dbg !1380

1077:                                             ; preds = %originalBBpart2265, %originalBBpart2253, %originalBBpart2249, %originalBBpart2213, %originalBBpart2209, %originalBBpart2205
  %1078 = load i32, i32* @x.19
  %1079 = load i32, i32* @y.20
  %1080 = sub i32 %1078, 1
  %1081 = mul i32 %1078, %1080
  %1082 = urem i32 %1081, 2
  %1083 = icmp eq i32 %1082, 0
  %1084 = icmp slt i32 %1079, 10
  %1085 = or i1 %1083, %1084
  br i1 %1085, label %originalBB267, label %originalBB267alteredBB

originalBB267:                                    ; preds = %1077, %originalBB267alteredBB
  %1086 = load i8*, i8** %21, align 8, !dbg !1381
  %1087 = load i64, i64* %28, align 8, !dbg !1382
  %1088 = getelementptr inbounds i8, i8* %1086, i64 %1087, !dbg !1381
  %1089 = load i8, i8* %1088, align 1, !dbg !1381
  store i8 %1089, i8* %39, align 1, !dbg !1383
  %1090 = load i8, i8* %39, align 1, !dbg !1384
  %1091 = zext i8 %1090 to i32, !dbg !1384
  %1092 = load i32, i32* @x.19
  %1093 = load i32, i32* @y.20
  %1094 = sub i32 %1092, 1
  %1095 = mul i32 %1092, %1094
  %1096 = urem i32 %1095, 2
  %1097 = icmp eq i32 %1096, 0
  %1098 = icmp slt i32 %1093, 10
  %1099 = or i1 %1097, %1098
  br i1 %1099, label %originalBBpart2269, label %originalBB267alteredBB

originalBBpart2269:                               ; preds = %originalBB267
  switch i32 %1091, label %3536 [
    i32 0, label %1100
    i32 63, label %1893
    i32 7, label %2501
    i32 8, label %2518
    i32 12, label %2535
    i32 10, label %2552
    i32 13, label %2569
    i32 9, label %2586
    i32 11, label %2603
    i32 92, label %2620
    i32 123, label %2910
    i32 125, label %2910
    i32 35, label %3004
    i32 126, label %3004
    i32 32, label %3057
    i32 33, label %3074
    i32 34, label %3074
    i32 36, label %3074
    i32 38, label %3074
    i32 40, label %3074
    i32 41, label %3074
    i32 42, label %3074
    i32 59, label %3074
    i32 60, label %3074
    i32 61, label %3074
    i32 62, label %3074
    i32 91, label %3074
    i32 94, label %3074
    i32 96, label %3074
    i32 124, label %3074
    i32 39, label %3146
    i32 37, label %3519
    i32 43, label %3519
    i32 44, label %3519
    i32 45, label %3519
    i32 46, label %3519
    i32 47, label %3519
    i32 48, label %3519
    i32 49, label %3519
    i32 50, label %3519
    i32 51, label %3519
    i32 52, label %3519
    i32 53, label %3519
    i32 54, label %3519
    i32 55, label %3519
    i32 56, label %3519
    i32 57, label %3519
    i32 58, label %3519
    i32 65, label %3519
    i32 66, label %3519
    i32 67, label %3519
    i32 68, label %3519
    i32 69, label %3519
    i32 70, label %3519
    i32 71, label %3519
    i32 72, label %3519
    i32 73, label %3519
    i32 74, label %3519
    i32 75, label %3519
    i32 76, label %3519
    i32 77, label %3519
    i32 78, label %3519
    i32 79, label %3519
    i32 80, label %3519
    i32 81, label %3519
    i32 82, label %3519
    i32 83, label %3519
    i32 84, label %3519
    i32 85, label %3519
    i32 86, label %3519
    i32 87, label %3519
    i32 88, label %3519
    i32 89, label %3519
    i32 90, label %3519
    i32 93, label %3519
    i32 95, label %3519
    i32 97, label %3519
    i32 98, label %3519
    i32 99, label %3519
    i32 100, label %3519
    i32 101, label %3519
    i32 102, label %3519
    i32 103, label %3519
    i32 104, label %3519
    i32 105, label %3519
    i32 106, label %3519
    i32 107, label %3519
    i32 108, label %3519
    i32 109, label %3519
    i32 110, label %3519
    i32 111, label %3519
    i32 112, label %3519
    i32 113, label %3519
    i32 114, label %3519
    i32 115, label %3519
    i32 116, label %3519
    i32 117, label %3519
    i32 118, label %3519
    i32 119, label %3519
    i32 120, label %3519
    i32 121, label %3519
    i32 122, label %3519
  ], !dbg !1385

1100:                                             ; preds = %originalBBpart2269
  %1101 = load i32, i32* @x.19
  %1102 = load i32, i32* @y.20
  %1103 = sub i32 %1101, 1
  %1104 = mul i32 %1101, %1103
  %1105 = urem i32 %1104, 2
  %1106 = icmp eq i32 %1105, 0
  %1107 = icmp slt i32 %1102, 10
  %1108 = or i1 %1106, %1107
  br i1 %1108, label %originalBB271, label %originalBB271alteredBB

originalBB271:                                    ; preds = %1100, %originalBB271alteredBB
  %1109 = load i8, i8* %33, align 1, !dbg !1386
  %1110 = trunc i8 %1109 to i1, !dbg !1386
  %1111 = load i32, i32* @x.19
  %1112 = load i32, i32* @y.20
  %1113 = sub i32 %1111, 1
  %1114 = mul i32 %1111, %1113
  %1115 = urem i32 %1114, 2
  %1116 = icmp eq i32 %1115, 0
  %1117 = icmp slt i32 %1112, 10
  %1118 = or i1 %1116, %1117
  br i1 %1118, label %originalBBpart2273, label %originalBB271alteredBB

originalBBpart2273:                               ; preds = %originalBB271
  br i1 %1110, label %1119, label %1822, !dbg !1389

1119:                                             ; preds = %originalBBpart2273
  %1120 = load i32, i32* @x.19
  %1121 = load i32, i32* @y.20
  %1122 = sub i32 %1120, 1
  %1123 = mul i32 %1120, %1122
  %1124 = urem i32 %1123, 2
  %1125 = icmp eq i32 %1124, 0
  %1126 = icmp slt i32 %1121, 10
  %1127 = or i1 %1125, %1126
  br i1 %1127, label %originalBB275, label %originalBB275alteredBB

originalBB275:                                    ; preds = %1119, %originalBB275alteredBB
  %1128 = load i32, i32* @x.19
  %1129 = load i32, i32* @y.20
  %1130 = sub i32 %1128, 1
  %1131 = mul i32 %1128, %1130
  %1132 = urem i32 %1131, 2
  %1133 = icmp eq i32 %1132, 0
  %1134 = icmp slt i32 %1129, 10
  %1135 = or i1 %1133, %1134
  br i1 %1135, label %originalBBpart2277, label %originalBB275alteredBB

originalBBpart2277:                               ; preds = %originalBB275
  br label %1136, !dbg !1390

1136:                                             ; preds = %originalBBpart2277
  %1137 = load i32, i32* @x.19
  %1138 = load i32, i32* @y.20
  %1139 = sub i32 %1137, 1
  %1140 = mul i32 %1137, %1139
  %1141 = urem i32 %1140, 2
  %1142 = icmp eq i32 %1141, 0
  %1143 = icmp slt i32 %1138, 10
  %1144 = or i1 %1142, %1143
  br i1 %1144, label %originalBB279, label %originalBB279alteredBB

originalBB279:                                    ; preds = %1136, %originalBB279alteredBB
  %1145 = load i8, i8* %35, align 1, !dbg !1392
  %1146 = trunc i8 %1145 to i1, !dbg !1392
  %1147 = load i32, i32* @x.19
  %1148 = load i32, i32* @y.20
  %1149 = sub i32 %1147, 1
  %1150 = mul i32 %1147, %1149
  %1151 = urem i32 %1150, 2
  %1152 = icmp eq i32 %1151, 0
  %1153 = icmp slt i32 %1148, 10
  %1154 = or i1 %1152, %1153
  br i1 %1154, label %originalBBpart2281, label %originalBB279alteredBB

originalBBpart2281:                               ; preds = %originalBB279
  br i1 %1146, label %1155, label %1172, !dbg !1395

1155:                                             ; preds = %originalBBpart2281
  %1156 = load i32, i32* @x.19
  %1157 = load i32, i32* @y.20
  %1158 = sub i32 %1156, 1
  %1159 = mul i32 %1156, %1158
  %1160 = urem i32 %1159, 2
  %1161 = icmp eq i32 %1160, 0
  %1162 = icmp slt i32 %1157, 10
  %1163 = or i1 %1161, %1162
  br i1 %1163, label %originalBB283, label %originalBB283alteredBB

originalBB283:                                    ; preds = %1155, %originalBB283alteredBB
  %1164 = load i32, i32* @x.19
  %1165 = load i32, i32* @y.20
  %1166 = sub i32 %1164, 1
  %1167 = mul i32 %1164, %1166
  %1168 = urem i32 %1167, 2
  %1169 = icmp eq i32 %1168, 0
  %1170 = icmp slt i32 %1165, 10
  %1171 = or i1 %1169, %1170
  br i1 %1171, label %originalBBpart2285, label %originalBB283alteredBB

originalBBpart2285:                               ; preds = %originalBB283
  br label %6990, !dbg !1392

1172:                                             ; preds = %originalBBpart2281
  %1173 = load i32, i32* @x.19
  %1174 = load i32, i32* @y.20
  %1175 = sub i32 %1173, 1
  %1176 = mul i32 %1173, %1175
  %1177 = urem i32 %1176, 2
  %1178 = icmp eq i32 %1177, 0
  %1179 = icmp slt i32 %1174, 10
  %1180 = or i1 %1178, %1179
  br i1 %1180, label %originalBB287, label %originalBB287alteredBB

originalBB287:                                    ; preds = %1172, %originalBB287alteredBB
  store i8 1, i8* %42, align 1, !dbg !1395
  %1181 = load i32, i32* %23, align 4, !dbg !1396
  %1182 = icmp eq i32 %1181, 2, !dbg !1396
  %1183 = load i32, i32* @x.19
  %1184 = load i32, i32* @y.20
  %1185 = sub i32 %1183, 1
  %1186 = mul i32 %1183, %1185
  %1187 = urem i32 %1186, 2
  %1188 = icmp eq i32 %1187, 0
  %1189 = icmp slt i32 %1184, 10
  %1190 = or i1 %1188, %1189
  br i1 %1190, label %originalBBpart2289, label %originalBB287alteredBB

originalBBpart2289:                               ; preds = %originalBB287
  br i1 %1182, label %1191, label %1455, !dbg !1396

1191:                                             ; preds = %originalBBpart2289
  %1192 = load i32, i32* @x.19
  %1193 = load i32, i32* @y.20
  %1194 = sub i32 %1192, 1
  %1195 = mul i32 %1192, %1194
  %1196 = urem i32 %1195, 2
  %1197 = icmp eq i32 %1196, 0
  %1198 = icmp slt i32 %1193, 10
  %1199 = or i1 %1197, %1198
  br i1 %1199, label %originalBB291, label %originalBB291alteredBB

originalBB291:                                    ; preds = %1191, %originalBB291alteredBB
  %1200 = load i8, i8* %36, align 1, !dbg !1396
  %1201 = trunc i8 %1200 to i1, !dbg !1396
  %1202 = load i32, i32* @x.19
  %1203 = load i32, i32* @y.20
  %1204 = sub i32 %1202, 1
  %1205 = mul i32 %1202, %1204
  %1206 = urem i32 %1205, 2
  %1207 = icmp eq i32 %1206, 0
  %1208 = icmp slt i32 %1203, 10
  %1209 = or i1 %1207, %1208
  br i1 %1209, label %originalBBpart2293, label %originalBB291alteredBB

originalBBpart2293:                               ; preds = %originalBB291
  br i1 %1201, label %1455, label %1210, !dbg !1395

1210:                                             ; preds = %originalBBpart2293
  %1211 = load i32, i32* @x.19
  %1212 = load i32, i32* @y.20
  %1213 = sub i32 %1211, 1
  %1214 = mul i32 %1211, %1213
  %1215 = urem i32 %1214, 2
  %1216 = icmp eq i32 %1215, 0
  %1217 = icmp slt i32 %1212, 10
  %1218 = or i1 %1216, %1217
  br i1 %1218, label %originalBB295, label %originalBB295alteredBB

originalBB295:                                    ; preds = %1210, %originalBB295alteredBB
  %1219 = load i32, i32* @x.19
  %1220 = load i32, i32* @y.20
  %1221 = sub i32 %1219, 1
  %1222 = mul i32 %1219, %1221
  %1223 = urem i32 %1222, 2
  %1224 = icmp eq i32 %1223, 0
  %1225 = icmp slt i32 %1220, 10
  %1226 = or i1 %1224, %1225
  br i1 %1226, label %originalBBpart2297, label %originalBB295alteredBB

originalBBpart2297:                               ; preds = %originalBB295
  br label %1227, !dbg !1398

1227:                                             ; preds = %originalBBpart2297
  %1228 = load i32, i32* @x.19
  %1229 = load i32, i32* @y.20
  %1230 = sub i32 %1228, 1
  %1231 = mul i32 %1228, %1230
  %1232 = urem i32 %1231, 2
  %1233 = icmp eq i32 %1232, 0
  %1234 = icmp slt i32 %1229, 10
  %1235 = or i1 %1233, %1234
  br i1 %1235, label %originalBB299, label %originalBB299alteredBB

originalBB299:                                    ; preds = %1227, %originalBB299alteredBB
  %1236 = load i64, i64* %29, align 8, !dbg !1400
  %1237 = load i64, i64* %20, align 8, !dbg !1400
  %1238 = icmp ult i64 %1236, %1237, !dbg !1400
  %1239 = load i32, i32* @x.19
  %1240 = load i32, i32* @y.20
  %1241 = sub i32 %1239, 1
  %1242 = mul i32 %1239, %1241
  %1243 = urem i32 %1242, 2
  %1244 = icmp eq i32 %1243, 0
  %1245 = icmp slt i32 %1240, 10
  %1246 = or i1 %1244, %1245
  br i1 %1246, label %originalBBpart2301, label %originalBB299alteredBB

originalBBpart2301:                               ; preds = %originalBB299
  br i1 %1238, label %1247, label %1267, !dbg !1403

1247:                                             ; preds = %originalBBpart2301
  %1248 = load i32, i32* @x.19
  %1249 = load i32, i32* @y.20
  %1250 = sub i32 %1248, 1
  %1251 = mul i32 %1248, %1250
  %1252 = urem i32 %1251, 2
  %1253 = icmp eq i32 %1252, 0
  %1254 = icmp slt i32 %1249, 10
  %1255 = or i1 %1253, %1254
  br i1 %1255, label %originalBB303, label %originalBB303alteredBB

originalBB303:                                    ; preds = %1247, %originalBB303alteredBB
  %1256 = load i8*, i8** %19, align 8, !dbg !1400
  %1257 = load i64, i64* %29, align 8, !dbg !1400
  %1258 = getelementptr inbounds i8, i8* %1256, i64 %1257, !dbg !1400
  store i8 39, i8* %1258, align 1, !dbg !1400
  %1259 = load i32, i32* @x.19
  %1260 = load i32, i32* @y.20
  %1261 = sub i32 %1259, 1
  %1262 = mul i32 %1259, %1261
  %1263 = urem i32 %1262, 2
  %1264 = icmp eq i32 %1263, 0
  %1265 = icmp slt i32 %1260, 10
  %1266 = or i1 %1264, %1265
  br i1 %1266, label %originalBBpart2305, label %originalBB303alteredBB

originalBBpart2305:                               ; preds = %originalBB303
  br label %1267, !dbg !1400

1267:                                             ; preds = %originalBBpart2305, %originalBBpart2301
  %1268 = load i32, i32* @x.19
  %1269 = load i32, i32* @y.20
  %1270 = sub i32 %1268, 1
  %1271 = mul i32 %1268, %1270
  %1272 = urem i32 %1271, 2
  %1273 = icmp eq i32 %1272, 0
  %1274 = icmp slt i32 %1269, 10
  %1275 = or i1 %1273, %1274
  br i1 %1275, label %originalBB307, label %originalBB307alteredBB

originalBB307:                                    ; preds = %1267, %originalBB307alteredBB
  %1276 = load i64, i64* %29, align 8, !dbg !1403
  %1277 = add i64 %1276, 1, !dbg !1403
  store i64 %1277, i64* %29, align 8, !dbg !1403
  %1278 = load i32, i32* @x.19
  %1279 = load i32, i32* @y.20
  %1280 = sub i32 %1278, 1
  %1281 = mul i32 %1278, %1280
  %1282 = urem i32 %1281, 2
  %1283 = icmp eq i32 %1282, 0
  %1284 = icmp slt i32 %1279, 10
  %1285 = or i1 %1283, %1284
  br i1 %1285, label %originalBBpart2323, label %originalBB307alteredBB

originalBBpart2323:                               ; preds = %originalBB307
  br label %1286, !dbg !1403

1286:                                             ; preds = %originalBBpart2323
  %1287 = load i32, i32* @x.19
  %1288 = load i32, i32* @y.20
  %1289 = sub i32 %1287, 1
  %1290 = mul i32 %1287, %1289
  %1291 = urem i32 %1290, 2
  %1292 = icmp eq i32 %1291, 0
  %1293 = icmp slt i32 %1288, 10
  %1294 = or i1 %1292, %1293
  br i1 %1294, label %originalBB325, label %originalBB325alteredBB

originalBB325:                                    ; preds = %1286, %originalBB325alteredBB
  %1295 = load i32, i32* @x.19
  %1296 = load i32, i32* @y.20
  %1297 = sub i32 %1295, 1
  %1298 = mul i32 %1295, %1297
  %1299 = urem i32 %1298, 2
  %1300 = icmp eq i32 %1299, 0
  %1301 = icmp slt i32 %1296, 10
  %1302 = or i1 %1300, %1301
  br i1 %1302, label %originalBBpart2327, label %originalBB325alteredBB

originalBBpart2327:                               ; preds = %originalBB325
  br label %1303, !dbg !1398

1303:                                             ; preds = %originalBBpart2327
  %1304 = load i32, i32* @x.19
  %1305 = load i32, i32* @y.20
  %1306 = sub i32 %1304, 1
  %1307 = mul i32 %1304, %1306
  %1308 = urem i32 %1307, 2
  %1309 = icmp eq i32 %1308, 0
  %1310 = icmp slt i32 %1305, 10
  %1311 = or i1 %1309, %1310
  br i1 %1311, label %originalBB329, label %originalBB329alteredBB

originalBB329:                                    ; preds = %1303, %originalBB329alteredBB
  %1312 = load i64, i64* %29, align 8, !dbg !1404
  %1313 = load i64, i64* %20, align 8, !dbg !1404
  %1314 = icmp ult i64 %1312, %1313, !dbg !1404
  %1315 = load i32, i32* @x.19
  %1316 = load i32, i32* @y.20
  %1317 = sub i32 %1315, 1
  %1318 = mul i32 %1315, %1317
  %1319 = urem i32 %1318, 2
  %1320 = icmp eq i32 %1319, 0
  %1321 = icmp slt i32 %1316, 10
  %1322 = or i1 %1320, %1321
  br i1 %1322, label %originalBBpart2331, label %originalBB329alteredBB

originalBBpart2331:                               ; preds = %originalBB329
  br i1 %1314, label %1323, label %1343, !dbg !1407

1323:                                             ; preds = %originalBBpart2331
  %1324 = load i32, i32* @x.19
  %1325 = load i32, i32* @y.20
  %1326 = sub i32 %1324, 1
  %1327 = mul i32 %1324, %1326
  %1328 = urem i32 %1327, 2
  %1329 = icmp eq i32 %1328, 0
  %1330 = icmp slt i32 %1325, 10
  %1331 = or i1 %1329, %1330
  br i1 %1331, label %originalBB333, label %originalBB333alteredBB

originalBB333:                                    ; preds = %1323, %originalBB333alteredBB
  %1332 = load i8*, i8** %19, align 8, !dbg !1404
  %1333 = load i64, i64* %29, align 8, !dbg !1404
  %1334 = getelementptr inbounds i8, i8* %1332, i64 %1333, !dbg !1404
  store i8 36, i8* %1334, align 1, !dbg !1404
  %1335 = load i32, i32* @x.19
  %1336 = load i32, i32* @y.20
  %1337 = sub i32 %1335, 1
  %1338 = mul i32 %1335, %1337
  %1339 = urem i32 %1338, 2
  %1340 = icmp eq i32 %1339, 0
  %1341 = icmp slt i32 %1336, 10
  %1342 = or i1 %1340, %1341
  br i1 %1342, label %originalBBpart2335, label %originalBB333alteredBB

originalBBpart2335:                               ; preds = %originalBB333
  br label %1343, !dbg !1404

1343:                                             ; preds = %originalBBpart2335, %originalBBpart2331
  %1344 = load i32, i32* @x.19
  %1345 = load i32, i32* @y.20
  %1346 = sub i32 %1344, 1
  %1347 = mul i32 %1344, %1346
  %1348 = urem i32 %1347, 2
  %1349 = icmp eq i32 %1348, 0
  %1350 = icmp slt i32 %1345, 10
  %1351 = or i1 %1349, %1350
  br i1 %1351, label %originalBB337, label %originalBB337alteredBB

originalBB337:                                    ; preds = %1343, %originalBB337alteredBB
  %1352 = load i64, i64* %29, align 8, !dbg !1407
  %1353 = add i64 %1352, 1, !dbg !1407
  store i64 %1353, i64* %29, align 8, !dbg !1407
  %1354 = load i32, i32* @x.19
  %1355 = load i32, i32* @y.20
  %1356 = sub i32 %1354, 1
  %1357 = mul i32 %1354, %1356
  %1358 = urem i32 %1357, 2
  %1359 = icmp eq i32 %1358, 0
  %1360 = icmp slt i32 %1355, 10
  %1361 = or i1 %1359, %1360
  br i1 %1361, label %originalBBpart2347, label %originalBB337alteredBB

originalBBpart2347:                               ; preds = %originalBB337
  br label %1362, !dbg !1407

1362:                                             ; preds = %originalBBpart2347
  %1363 = load i32, i32* @x.19
  %1364 = load i32, i32* @y.20
  %1365 = sub i32 %1363, 1
  %1366 = mul i32 %1363, %1365
  %1367 = urem i32 %1366, 2
  %1368 = icmp eq i32 %1367, 0
  %1369 = icmp slt i32 %1364, 10
  %1370 = or i1 %1368, %1369
  br i1 %1370, label %originalBB349, label %originalBB349alteredBB

originalBB349:                                    ; preds = %1362, %originalBB349alteredBB
  %1371 = load i32, i32* @x.19
  %1372 = load i32, i32* @y.20
  %1373 = sub i32 %1371, 1
  %1374 = mul i32 %1371, %1373
  %1375 = urem i32 %1374, 2
  %1376 = icmp eq i32 %1375, 0
  %1377 = icmp slt i32 %1372, 10
  %1378 = or i1 %1376, %1377
  br i1 %1378, label %originalBBpart2351, label %originalBB349alteredBB

originalBBpart2351:                               ; preds = %originalBB349
  br label %1379, !dbg !1398

1379:                                             ; preds = %originalBBpart2351
  %1380 = load i32, i32* @x.19
  %1381 = load i32, i32* @y.20
  %1382 = sub i32 %1380, 1
  %1383 = mul i32 %1380, %1382
  %1384 = urem i32 %1383, 2
  %1385 = icmp eq i32 %1384, 0
  %1386 = icmp slt i32 %1381, 10
  %1387 = or i1 %1385, %1386
  br i1 %1387, label %originalBB353, label %originalBB353alteredBB

originalBB353:                                    ; preds = %1379, %originalBB353alteredBB
  %1388 = load i64, i64* %29, align 8, !dbg !1408
  %1389 = load i64, i64* %20, align 8, !dbg !1408
  %1390 = icmp ult i64 %1388, %1389, !dbg !1408
  %1391 = load i32, i32* @x.19
  %1392 = load i32, i32* @y.20
  %1393 = sub i32 %1391, 1
  %1394 = mul i32 %1391, %1393
  %1395 = urem i32 %1394, 2
  %1396 = icmp eq i32 %1395, 0
  %1397 = icmp slt i32 %1392, 10
  %1398 = or i1 %1396, %1397
  br i1 %1398, label %originalBBpart2355, label %originalBB353alteredBB

originalBBpart2355:                               ; preds = %originalBB353
  br i1 %1390, label %1399, label %1419, !dbg !1411

1399:                                             ; preds = %originalBBpart2355
  %1400 = load i32, i32* @x.19
  %1401 = load i32, i32* @y.20
  %1402 = sub i32 %1400, 1
  %1403 = mul i32 %1400, %1402
  %1404 = urem i32 %1403, 2
  %1405 = icmp eq i32 %1404, 0
  %1406 = icmp slt i32 %1401, 10
  %1407 = or i1 %1405, %1406
  br i1 %1407, label %originalBB357, label %originalBB357alteredBB

originalBB357:                                    ; preds = %1399, %originalBB357alteredBB
  %1408 = load i8*, i8** %19, align 8, !dbg !1408
  %1409 = load i64, i64* %29, align 8, !dbg !1408
  %1410 = getelementptr inbounds i8, i8* %1408, i64 %1409, !dbg !1408
  store i8 39, i8* %1410, align 1, !dbg !1408
  %1411 = load i32, i32* @x.19
  %1412 = load i32, i32* @y.20
  %1413 = sub i32 %1411, 1
  %1414 = mul i32 %1411, %1413
  %1415 = urem i32 %1414, 2
  %1416 = icmp eq i32 %1415, 0
  %1417 = icmp slt i32 %1412, 10
  %1418 = or i1 %1416, %1417
  br i1 %1418, label %originalBBpart2359, label %originalBB357alteredBB

originalBBpart2359:                               ; preds = %originalBB357
  br label %1419, !dbg !1408

1419:                                             ; preds = %originalBBpart2359, %originalBBpart2355
  %1420 = load i32, i32* @x.19
  %1421 = load i32, i32* @y.20
  %1422 = sub i32 %1420, 1
  %1423 = mul i32 %1420, %1422
  %1424 = urem i32 %1423, 2
  %1425 = icmp eq i32 %1424, 0
  %1426 = icmp slt i32 %1421, 10
  %1427 = or i1 %1425, %1426
  br i1 %1427, label %originalBB361, label %originalBB361alteredBB

originalBB361:                                    ; preds = %1419, %originalBB361alteredBB
  %1428 = load i64, i64* %29, align 8, !dbg !1411
  %1429 = add i64 %1428, 1, !dbg !1411
  store i64 %1429, i64* %29, align 8, !dbg !1411
  %1430 = load i32, i32* @x.19
  %1431 = load i32, i32* @y.20
  %1432 = sub i32 %1430, 1
  %1433 = mul i32 %1430, %1432
  %1434 = urem i32 %1433, 2
  %1435 = icmp eq i32 %1434, 0
  %1436 = icmp slt i32 %1431, 10
  %1437 = or i1 %1435, %1436
  br i1 %1437, label %originalBBpart2368, label %originalBB361alteredBB

originalBBpart2368:                               ; preds = %originalBB361
  br label %1438, !dbg !1411

1438:                                             ; preds = %originalBBpart2368
  %1439 = load i32, i32* @x.19
  %1440 = load i32, i32* @y.20
  %1441 = sub i32 %1439, 1
  %1442 = mul i32 %1439, %1441
  %1443 = urem i32 %1442, 2
  %1444 = icmp eq i32 %1443, 0
  %1445 = icmp slt i32 %1440, 10
  %1446 = or i1 %1444, %1445
  br i1 %1446, label %originalBB370, label %originalBB370alteredBB

originalBB370:                                    ; preds = %1438, %originalBB370alteredBB
  store i8 1, i8* %36, align 1, !dbg !1398
  %1447 = load i32, i32* @x.19
  %1448 = load i32, i32* @y.20
  %1449 = sub i32 %1447, 1
  %1450 = mul i32 %1447, %1449
  %1451 = urem i32 %1450, 2
  %1452 = icmp eq i32 %1451, 0
  %1453 = icmp slt i32 %1448, 10
  %1454 = or i1 %1452, %1453
  br i1 %1454, label %originalBBpart2372, label %originalBB370alteredBB

originalBBpart2372:                               ; preds = %originalBB370
  br label %1455, !dbg !1398

1455:                                             ; preds = %originalBBpart2372, %originalBBpart2293, %originalBBpart2289
  %1456 = load i32, i32* @x.19
  %1457 = load i32, i32* @y.20
  %1458 = sub i32 %1456, 1
  %1459 = mul i32 %1456, %1458
  %1460 = urem i32 %1459, 2
  %1461 = icmp eq i32 %1460, 0
  %1462 = icmp slt i32 %1457, 10
  %1463 = or i1 %1461, %1462
  br i1 %1463, label %originalBB374, label %originalBB374alteredBB

originalBB374:                                    ; preds = %1455, %originalBB374alteredBB
  %1464 = load i32, i32* @x.19
  %1465 = load i32, i32* @y.20
  %1466 = sub i32 %1464, 1
  %1467 = mul i32 %1464, %1466
  %1468 = urem i32 %1467, 2
  %1469 = icmp eq i32 %1468, 0
  %1470 = icmp slt i32 %1465, 10
  %1471 = or i1 %1469, %1470
  br i1 %1471, label %originalBBpart2376, label %originalBB374alteredBB

originalBBpart2376:                               ; preds = %originalBB374
  br label %1472, !dbg !1395

1472:                                             ; preds = %originalBBpart2376
  %1473 = load i32, i32* @x.19
  %1474 = load i32, i32* @y.20
  %1475 = sub i32 %1473, 1
  %1476 = mul i32 %1473, %1475
  %1477 = urem i32 %1476, 2
  %1478 = icmp eq i32 %1477, 0
  %1479 = icmp slt i32 %1474, 10
  %1480 = or i1 %1478, %1479
  br i1 %1480, label %originalBB378, label %originalBB378alteredBB

originalBB378:                                    ; preds = %1472, %originalBB378alteredBB
  %1481 = load i64, i64* %29, align 8, !dbg !1412
  %1482 = load i64, i64* %20, align 8, !dbg !1412
  %1483 = icmp ult i64 %1481, %1482, !dbg !1412
  %1484 = load i32, i32* @x.19
  %1485 = load i32, i32* @y.20
  %1486 = sub i32 %1484, 1
  %1487 = mul i32 %1484, %1486
  %1488 = urem i32 %1487, 2
  %1489 = icmp eq i32 %1488, 0
  %1490 = icmp slt i32 %1485, 10
  %1491 = or i1 %1489, %1490
  br i1 %1491, label %originalBBpart2380, label %originalBB378alteredBB

originalBBpart2380:                               ; preds = %originalBB378
  br i1 %1483, label %1492, label %1512, !dbg !1415

1492:                                             ; preds = %originalBBpart2380
  %1493 = load i32, i32* @x.19
  %1494 = load i32, i32* @y.20
  %1495 = sub i32 %1493, 1
  %1496 = mul i32 %1493, %1495
  %1497 = urem i32 %1496, 2
  %1498 = icmp eq i32 %1497, 0
  %1499 = icmp slt i32 %1494, 10
  %1500 = or i1 %1498, %1499
  br i1 %1500, label %originalBB382, label %originalBB382alteredBB

originalBB382:                                    ; preds = %1492, %originalBB382alteredBB
  %1501 = load i8*, i8** %19, align 8, !dbg !1412
  %1502 = load i64, i64* %29, align 8, !dbg !1412
  %1503 = getelementptr inbounds i8, i8* %1501, i64 %1502, !dbg !1412
  store i8 92, i8* %1503, align 1, !dbg !1412
  %1504 = load i32, i32* @x.19
  %1505 = load i32, i32* @y.20
  %1506 = sub i32 %1504, 1
  %1507 = mul i32 %1504, %1506
  %1508 = urem i32 %1507, 2
  %1509 = icmp eq i32 %1508, 0
  %1510 = icmp slt i32 %1505, 10
  %1511 = or i1 %1509, %1510
  br i1 %1511, label %originalBBpart2384, label %originalBB382alteredBB

originalBBpart2384:                               ; preds = %originalBB382
  br label %1512, !dbg !1412

1512:                                             ; preds = %originalBBpart2384, %originalBBpart2380
  %1513 = load i32, i32* @x.19
  %1514 = load i32, i32* @y.20
  %1515 = sub i32 %1513, 1
  %1516 = mul i32 %1513, %1515
  %1517 = urem i32 %1516, 2
  %1518 = icmp eq i32 %1517, 0
  %1519 = icmp slt i32 %1514, 10
  %1520 = or i1 %1518, %1519
  br i1 %1520, label %originalBB386, label %originalBB386alteredBB

originalBB386:                                    ; preds = %1512, %originalBB386alteredBB
  %1521 = load i64, i64* %29, align 8, !dbg !1415
  %1522 = add i64 %1521, 1, !dbg !1415
  store i64 %1522, i64* %29, align 8, !dbg !1415
  %1523 = load i32, i32* @x.19
  %1524 = load i32, i32* @y.20
  %1525 = sub i32 %1523, 1
  %1526 = mul i32 %1523, %1525
  %1527 = urem i32 %1526, 2
  %1528 = icmp eq i32 %1527, 0
  %1529 = icmp slt i32 %1524, 10
  %1530 = or i1 %1528, %1529
  br i1 %1530, label %originalBBpart2395, label %originalBB386alteredBB

originalBBpart2395:                               ; preds = %originalBB386
  br label %1531, !dbg !1415

1531:                                             ; preds = %originalBBpart2395
  %1532 = load i32, i32* @x.19
  %1533 = load i32, i32* @y.20
  %1534 = sub i32 %1532, 1
  %1535 = mul i32 %1532, %1534
  %1536 = urem i32 %1535, 2
  %1537 = icmp eq i32 %1536, 0
  %1538 = icmp slt i32 %1533, 10
  %1539 = or i1 %1537, %1538
  br i1 %1539, label %originalBB397, label %originalBB397alteredBB

originalBB397:                                    ; preds = %1531, %originalBB397alteredBB
  %1540 = load i32, i32* @x.19
  %1541 = load i32, i32* @y.20
  %1542 = sub i32 %1540, 1
  %1543 = mul i32 %1540, %1542
  %1544 = urem i32 %1543, 2
  %1545 = icmp eq i32 %1544, 0
  %1546 = icmp slt i32 %1541, 10
  %1547 = or i1 %1545, %1546
  br i1 %1547, label %originalBBpart2399, label %originalBB397alteredBB

originalBBpart2399:                               ; preds = %originalBB397
  br label %1548, !dbg !1395

1548:                                             ; preds = %originalBBpart2399
  %1549 = load i32, i32* @x.19
  %1550 = load i32, i32* @y.20
  %1551 = sub i32 %1549, 1
  %1552 = mul i32 %1549, %1551
  %1553 = urem i32 %1552, 2
  %1554 = icmp eq i32 %1553, 0
  %1555 = icmp slt i32 %1550, 10
  %1556 = or i1 %1554, %1555
  br i1 %1556, label %originalBB401, label %originalBB401alteredBB

originalBB401:                                    ; preds = %1548, %originalBB401alteredBB
  %1557 = load i32, i32* %23, align 4, !dbg !1416
  %1558 = icmp ne i32 %1557, 2, !dbg !1418
  %1559 = load i32, i32* @x.19
  %1560 = load i32, i32* @y.20
  %1561 = sub i32 %1559, 1
  %1562 = mul i32 %1559, %1561
  %1563 = urem i32 %1562, 2
  %1564 = icmp eq i32 %1563, 0
  %1565 = icmp slt i32 %1560, 10
  %1566 = or i1 %1564, %1565
  br i1 %1566, label %originalBBpart2403, label %originalBB401alteredBB

originalBBpart2403:                               ; preds = %originalBB401
  br i1 %1558, label %1567, label %1805, !dbg !1419

1567:                                             ; preds = %originalBBpart2403
  %1568 = load i32, i32* @x.19
  %1569 = load i32, i32* @y.20
  %1570 = sub i32 %1568, 1
  %1571 = mul i32 %1568, %1570
  %1572 = urem i32 %1571, 2
  %1573 = icmp eq i32 %1572, 0
  %1574 = icmp slt i32 %1569, 10
  %1575 = or i1 %1573, %1574
  br i1 %1575, label %originalBB405, label %originalBB405alteredBB

originalBB405:                                    ; preds = %1567, %originalBB405alteredBB
  %1576 = load i64, i64* %28, align 8, !dbg !1420
  %1577 = add i64 %1576, 1, !dbg !1421
  %1578 = load i64, i64* %22, align 8, !dbg !1422
  %1579 = icmp ult i64 %1577, %1578, !dbg !1423
  %1580 = load i32, i32* @x.19
  %1581 = load i32, i32* @y.20
  %1582 = sub i32 %1580, 1
  %1583 = mul i32 %1580, %1582
  %1584 = urem i32 %1583, 2
  %1585 = icmp eq i32 %1584, 0
  %1586 = icmp slt i32 %1581, 10
  %1587 = or i1 %1585, %1586
  br i1 %1587, label %originalBBpart2408, label %originalBB405alteredBB

originalBBpart2408:                               ; preds = %originalBB405
  br i1 %1579, label %1588, label %1805, !dbg !1424

1588:                                             ; preds = %originalBBpart2408
  %1589 = load i32, i32* @x.19
  %1590 = load i32, i32* @y.20
  %1591 = sub i32 %1589, 1
  %1592 = mul i32 %1589, %1591
  %1593 = urem i32 %1592, 2
  %1594 = icmp eq i32 %1593, 0
  %1595 = icmp slt i32 %1590, 10
  %1596 = or i1 %1594, %1595
  br i1 %1596, label %originalBB410, label %originalBB410alteredBB

originalBB410:                                    ; preds = %1588, %originalBB410alteredBB
  %1597 = load i8*, i8** %21, align 8, !dbg !1425
  %1598 = load i64, i64* %28, align 8, !dbg !1426
  %1599 = add i64 %1598, 1, !dbg !1427
  %1600 = getelementptr inbounds i8, i8* %1597, i64 %1599, !dbg !1425
  %1601 = load i8, i8* %1600, align 1, !dbg !1425
  %1602 = sext i8 %1601 to i32, !dbg !1425
  %1603 = icmp sle i32 48, %1602, !dbg !1428
  %1604 = load i32, i32* @x.19
  %1605 = load i32, i32* @y.20
  %1606 = sub i32 %1604, 1
  %1607 = mul i32 %1604, %1606
  %1608 = urem i32 %1607, 2
  %1609 = icmp eq i32 %1608, 0
  %1610 = icmp slt i32 %1605, 10
  %1611 = or i1 %1609, %1610
  br i1 %1611, label %originalBBpart2417, label %originalBB410alteredBB

originalBBpart2417:                               ; preds = %originalBB410
  br i1 %1603, label %1612, label %1805, !dbg !1429

1612:                                             ; preds = %originalBBpart2417
  %1613 = load i32, i32* @x.19
  %1614 = load i32, i32* @y.20
  %1615 = sub i32 %1613, 1
  %1616 = mul i32 %1613, %1615
  %1617 = urem i32 %1616, 2
  %1618 = icmp eq i32 %1617, 0
  %1619 = icmp slt i32 %1614, 10
  %1620 = or i1 %1618, %1619
  br i1 %1620, label %originalBB419, label %originalBB419alteredBB

originalBB419:                                    ; preds = %1612, %originalBB419alteredBB
  %1621 = load i8*, i8** %21, align 8, !dbg !1430
  %1622 = load i64, i64* %28, align 8, !dbg !1431
  %1623 = add i64 %1622, 1, !dbg !1432
  %1624 = getelementptr inbounds i8, i8* %1621, i64 %1623, !dbg !1430
  %1625 = load i8, i8* %1624, align 1, !dbg !1430
  %1626 = sext i8 %1625 to i32, !dbg !1430
  %1627 = icmp sle i32 %1626, 57, !dbg !1433
  %1628 = load i32, i32* @x.19
  %1629 = load i32, i32* @y.20
  %1630 = sub i32 %1628, 1
  %1631 = mul i32 %1628, %1630
  %1632 = urem i32 %1631, 2
  %1633 = icmp eq i32 %1632, 0
  %1634 = icmp slt i32 %1629, 10
  %1635 = or i1 %1633, %1634
  br i1 %1635, label %originalBBpart2422, label %originalBB419alteredBB

originalBBpart2422:                               ; preds = %originalBB419
  br i1 %1627, label %1636, label %1805, !dbg !1434

1636:                                             ; preds = %originalBBpart2422
  %1637 = load i32, i32* @x.19
  %1638 = load i32, i32* @y.20
  %1639 = sub i32 %1637, 1
  %1640 = mul i32 %1637, %1639
  %1641 = urem i32 %1640, 2
  %1642 = icmp eq i32 %1641, 0
  %1643 = icmp slt i32 %1638, 10
  %1644 = or i1 %1642, %1643
  br i1 %1644, label %originalBB424, label %originalBB424alteredBB

originalBB424:                                    ; preds = %1636, %originalBB424alteredBB
  %1645 = load i32, i32* @x.19
  %1646 = load i32, i32* @y.20
  %1647 = sub i32 %1645, 1
  %1648 = mul i32 %1645, %1647
  %1649 = urem i32 %1648, 2
  %1650 = icmp eq i32 %1649, 0
  %1651 = icmp slt i32 %1646, 10
  %1652 = or i1 %1650, %1651
  br i1 %1652, label %originalBBpart2426, label %originalBB424alteredBB

originalBBpart2426:                               ; preds = %originalBB424
  br label %1653, !dbg !1435

1653:                                             ; preds = %originalBBpart2426
  %1654 = load i32, i32* @x.19
  %1655 = load i32, i32* @y.20
  %1656 = sub i32 %1654, 1
  %1657 = mul i32 %1654, %1656
  %1658 = urem i32 %1657, 2
  %1659 = icmp eq i32 %1658, 0
  %1660 = icmp slt i32 %1655, 10
  %1661 = or i1 %1659, %1660
  br i1 %1661, label %originalBB428, label %originalBB428alteredBB

originalBB428:                                    ; preds = %1653, %originalBB428alteredBB
  %1662 = load i64, i64* %29, align 8, !dbg !1437
  %1663 = load i64, i64* %20, align 8, !dbg !1437
  %1664 = icmp ult i64 %1662, %1663, !dbg !1437
  %1665 = load i32, i32* @x.19
  %1666 = load i32, i32* @y.20
  %1667 = sub i32 %1665, 1
  %1668 = mul i32 %1665, %1667
  %1669 = urem i32 %1668, 2
  %1670 = icmp eq i32 %1669, 0
  %1671 = icmp slt i32 %1666, 10
  %1672 = or i1 %1670, %1671
  br i1 %1672, label %originalBBpart2430, label %originalBB428alteredBB

originalBBpart2430:                               ; preds = %originalBB428
  br i1 %1664, label %1673, label %1693, !dbg !1440

1673:                                             ; preds = %originalBBpart2430
  %1674 = load i32, i32* @x.19
  %1675 = load i32, i32* @y.20
  %1676 = sub i32 %1674, 1
  %1677 = mul i32 %1674, %1676
  %1678 = urem i32 %1677, 2
  %1679 = icmp eq i32 %1678, 0
  %1680 = icmp slt i32 %1675, 10
  %1681 = or i1 %1679, %1680
  br i1 %1681, label %originalBB432, label %originalBB432alteredBB

originalBB432:                                    ; preds = %1673, %originalBB432alteredBB
  %1682 = load i8*, i8** %19, align 8, !dbg !1437
  %1683 = load i64, i64* %29, align 8, !dbg !1437
  %1684 = getelementptr inbounds i8, i8* %1682, i64 %1683, !dbg !1437
  store i8 48, i8* %1684, align 1, !dbg !1437
  %1685 = load i32, i32* @x.19
  %1686 = load i32, i32* @y.20
  %1687 = sub i32 %1685, 1
  %1688 = mul i32 %1685, %1687
  %1689 = urem i32 %1688, 2
  %1690 = icmp eq i32 %1689, 0
  %1691 = icmp slt i32 %1686, 10
  %1692 = or i1 %1690, %1691
  br i1 %1692, label %originalBBpart2434, label %originalBB432alteredBB

originalBBpart2434:                               ; preds = %originalBB432
  br label %1693, !dbg !1437

1693:                                             ; preds = %originalBBpart2434, %originalBBpart2430
  %1694 = load i32, i32* @x.19
  %1695 = load i32, i32* @y.20
  %1696 = sub i32 %1694, 1
  %1697 = mul i32 %1694, %1696
  %1698 = urem i32 %1697, 2
  %1699 = icmp eq i32 %1698, 0
  %1700 = icmp slt i32 %1695, 10
  %1701 = or i1 %1699, %1700
  br i1 %1701, label %originalBB436, label %originalBB436alteredBB

originalBB436:                                    ; preds = %1693, %originalBB436alteredBB
  %1702 = load i64, i64* %29, align 8, !dbg !1440
  %1703 = add i64 %1702, 1, !dbg !1440
  store i64 %1703, i64* %29, align 8, !dbg !1440
  %1704 = load i32, i32* @x.19
  %1705 = load i32, i32* @y.20
  %1706 = sub i32 %1704, 1
  %1707 = mul i32 %1704, %1706
  %1708 = urem i32 %1707, 2
  %1709 = icmp eq i32 %1708, 0
  %1710 = icmp slt i32 %1705, 10
  %1711 = or i1 %1709, %1710
  br i1 %1711, label %originalBBpart2453, label %originalBB436alteredBB

originalBBpart2453:                               ; preds = %originalBB436
  br label %1712, !dbg !1440

1712:                                             ; preds = %originalBBpart2453
  %1713 = load i32, i32* @x.19
  %1714 = load i32, i32* @y.20
  %1715 = sub i32 %1713, 1
  %1716 = mul i32 %1713, %1715
  %1717 = urem i32 %1716, 2
  %1718 = icmp eq i32 %1717, 0
  %1719 = icmp slt i32 %1714, 10
  %1720 = or i1 %1718, %1719
  br i1 %1720, label %originalBB455, label %originalBB455alteredBB

originalBB455:                                    ; preds = %1712, %originalBB455alteredBB
  %1721 = load i32, i32* @x.19
  %1722 = load i32, i32* @y.20
  %1723 = sub i32 %1721, 1
  %1724 = mul i32 %1721, %1723
  %1725 = urem i32 %1724, 2
  %1726 = icmp eq i32 %1725, 0
  %1727 = icmp slt i32 %1722, 10
  %1728 = or i1 %1726, %1727
  br i1 %1728, label %originalBBpart2457, label %originalBB455alteredBB

originalBBpart2457:                               ; preds = %originalBB455
  br label %1729, !dbg !1441

1729:                                             ; preds = %originalBBpart2457
  %1730 = load i32, i32* @x.19
  %1731 = load i32, i32* @y.20
  %1732 = sub i32 %1730, 1
  %1733 = mul i32 %1730, %1732
  %1734 = urem i32 %1733, 2
  %1735 = icmp eq i32 %1734, 0
  %1736 = icmp slt i32 %1731, 10
  %1737 = or i1 %1735, %1736
  br i1 %1737, label %originalBB459, label %originalBB459alteredBB

originalBB459:                                    ; preds = %1729, %originalBB459alteredBB
  %1738 = load i64, i64* %29, align 8, !dbg !1442
  %1739 = load i64, i64* %20, align 8, !dbg !1442
  %1740 = icmp ult i64 %1738, %1739, !dbg !1442
  %1741 = load i32, i32* @x.19
  %1742 = load i32, i32* @y.20
  %1743 = sub i32 %1741, 1
  %1744 = mul i32 %1741, %1743
  %1745 = urem i32 %1744, 2
  %1746 = icmp eq i32 %1745, 0
  %1747 = icmp slt i32 %1742, 10
  %1748 = or i1 %1746, %1747
  br i1 %1748, label %originalBBpart2461, label %originalBB459alteredBB

originalBBpart2461:                               ; preds = %originalBB459
  br i1 %1740, label %1749, label %1769, !dbg !1445

1749:                                             ; preds = %originalBBpart2461
  %1750 = load i32, i32* @x.19
  %1751 = load i32, i32* @y.20
  %1752 = sub i32 %1750, 1
  %1753 = mul i32 %1750, %1752
  %1754 = urem i32 %1753, 2
  %1755 = icmp eq i32 %1754, 0
  %1756 = icmp slt i32 %1751, 10
  %1757 = or i1 %1755, %1756
  br i1 %1757, label %originalBB463, label %originalBB463alteredBB

originalBB463:                                    ; preds = %1749, %originalBB463alteredBB
  %1758 = load i8*, i8** %19, align 8, !dbg !1442
  %1759 = load i64, i64* %29, align 8, !dbg !1442
  %1760 = getelementptr inbounds i8, i8* %1758, i64 %1759, !dbg !1442
  store i8 48, i8* %1760, align 1, !dbg !1442
  %1761 = load i32, i32* @x.19
  %1762 = load i32, i32* @y.20
  %1763 = sub i32 %1761, 1
  %1764 = mul i32 %1761, %1763
  %1765 = urem i32 %1764, 2
  %1766 = icmp eq i32 %1765, 0
  %1767 = icmp slt i32 %1762, 10
  %1768 = or i1 %1766, %1767
  br i1 %1768, label %originalBBpart2465, label %originalBB463alteredBB

originalBBpart2465:                               ; preds = %originalBB463
  br label %1769, !dbg !1442

1769:                                             ; preds = %originalBBpart2465, %originalBBpart2461
  %1770 = load i32, i32* @x.19
  %1771 = load i32, i32* @y.20
  %1772 = sub i32 %1770, 1
  %1773 = mul i32 %1770, %1772
  %1774 = urem i32 %1773, 2
  %1775 = icmp eq i32 %1774, 0
  %1776 = icmp slt i32 %1771, 10
  %1777 = or i1 %1775, %1776
  br i1 %1777, label %originalBB467, label %originalBB467alteredBB

originalBB467:                                    ; preds = %1769, %originalBB467alteredBB
  %1778 = load i64, i64* %29, align 8, !dbg !1445
  %1779 = add i64 %1778, 1, !dbg !1445
  store i64 %1779, i64* %29, align 8, !dbg !1445
  %1780 = load i32, i32* @x.19
  %1781 = load i32, i32* @y.20
  %1782 = sub i32 %1780, 1
  %1783 = mul i32 %1780, %1782
  %1784 = urem i32 %1783, 2
  %1785 = icmp eq i32 %1784, 0
  %1786 = icmp slt i32 %1781, 10
  %1787 = or i1 %1785, %1786
  br i1 %1787, label %originalBBpart2480, label %originalBB467alteredBB

originalBBpart2480:                               ; preds = %originalBB467
  br label %1788, !dbg !1445

1788:                                             ; preds = %originalBBpart2480
  %1789 = load i32, i32* @x.19
  %1790 = load i32, i32* @y.20
  %1791 = sub i32 %1789, 1
  %1792 = mul i32 %1789, %1791
  %1793 = urem i32 %1792, 2
  %1794 = icmp eq i32 %1793, 0
  %1795 = icmp slt i32 %1790, 10
  %1796 = or i1 %1794, %1795
  br i1 %1796, label %originalBB482, label %originalBB482alteredBB

originalBB482:                                    ; preds = %1788, %originalBB482alteredBB
  %1797 = load i32, i32* @x.19
  %1798 = load i32, i32* @y.20
  %1799 = sub i32 %1797, 1
  %1800 = mul i32 %1797, %1799
  %1801 = urem i32 %1800, 2
  %1802 = icmp eq i32 %1801, 0
  %1803 = icmp slt i32 %1798, 10
  %1804 = or i1 %1802, %1803
  br i1 %1804, label %originalBBpart2484, label %originalBB482alteredBB

originalBBpart2484:                               ; preds = %originalBB482
  br label %1805, !dbg !1446

1805:                                             ; preds = %originalBBpart2484, %originalBBpart2422, %originalBBpart2417, %originalBBpart2408, %originalBBpart2403
  %1806 = load i32, i32* @x.19
  %1807 = load i32, i32* @y.20
  %1808 = sub i32 %1806, 1
  %1809 = mul i32 %1806, %1808
  %1810 = urem i32 %1809, 2
  %1811 = icmp eq i32 %1810, 0
  %1812 = icmp slt i32 %1807, 10
  %1813 = or i1 %1811, %1812
  br i1 %1813, label %originalBB486, label %originalBB486alteredBB

originalBB486:                                    ; preds = %1805, %originalBB486alteredBB
  store i8 48, i8* %39, align 1, !dbg !1447
  %1814 = load i32, i32* @x.19
  %1815 = load i32, i32* @y.20
  %1816 = sub i32 %1814, 1
  %1817 = mul i32 %1814, %1816
  %1818 = urem i32 %1817, 2
  %1819 = icmp eq i32 %1818, 0
  %1820 = icmp slt i32 %1815, 10
  %1821 = or i1 %1819, %1820
  br i1 %1821, label %originalBBpart2488, label %originalBB486alteredBB

originalBBpart2488:                               ; preds = %originalBB486
  br label %1876, !dbg !1448

1822:                                             ; preds = %originalBBpart2273
  %1823 = load i32, i32* @x.19
  %1824 = load i32, i32* @y.20
  %1825 = sub i32 %1823, 1
  %1826 = mul i32 %1823, %1825
  %1827 = urem i32 %1826, 2
  %1828 = icmp eq i32 %1827, 0
  %1829 = icmp slt i32 %1824, 10
  %1830 = or i1 %1828, %1829
  br i1 %1830, label %originalBB490, label %originalBB490alteredBB

originalBB490:                                    ; preds = %1822, %originalBB490alteredBB
  %1831 = load i32, i32* %24, align 4, !dbg !1449
  %1832 = and i32 %1831, 1, !dbg !1451
  %1833 = icmp ne i32 %1832, 0, !dbg !1451
  %1834 = load i32, i32* @x.19
  %1835 = load i32, i32* @y.20
  %1836 = sub i32 %1834, 1
  %1837 = mul i32 %1834, %1836
  %1838 = urem i32 %1837, 2
  %1839 = icmp eq i32 %1838, 0
  %1840 = icmp slt i32 %1835, 10
  %1841 = or i1 %1839, %1840
  br i1 %1841, label %originalBBpart2501, label %originalBB490alteredBB

originalBBpart2501:                               ; preds = %originalBB490
  br i1 %1833, label %1842, label %1859, !dbg !1452

1842:                                             ; preds = %originalBBpart2501
  %1843 = load i32, i32* @x.19
  %1844 = load i32, i32* @y.20
  %1845 = sub i32 %1843, 1
  %1846 = mul i32 %1843, %1845
  %1847 = urem i32 %1846, 2
  %1848 = icmp eq i32 %1847, 0
  %1849 = icmp slt i32 %1844, 10
  %1850 = or i1 %1848, %1849
  br i1 %1850, label %originalBB503, label %originalBB503alteredBB

originalBB503:                                    ; preds = %1842, %originalBB503alteredBB
  %1851 = load i32, i32* @x.19
  %1852 = load i32, i32* @y.20
  %1853 = sub i32 %1851, 1
  %1854 = mul i32 %1851, %1853
  %1855 = urem i32 %1854, 2
  %1856 = icmp eq i32 %1855, 0
  %1857 = icmp slt i32 %1852, 10
  %1858 = or i1 %1856, %1857
  br i1 %1858, label %originalBBpart2505, label %originalBB503alteredBB

originalBBpart2505:                               ; preds = %originalBB503
  br label %6441, !dbg !1453

1859:                                             ; preds = %originalBBpart2501
  %1860 = load i32, i32* @x.19
  %1861 = load i32, i32* @y.20
  %1862 = sub i32 %1860, 1
  %1863 = mul i32 %1860, %1862
  %1864 = urem i32 %1863, 2
  %1865 = icmp eq i32 %1864, 0
  %1866 = icmp slt i32 %1861, 10
  %1867 = or i1 %1865, %1866
  br i1 %1867, label %originalBB507, label %originalBB507alteredBB

originalBB507:                                    ; preds = %1859, %originalBB507alteredBB
  %1868 = load i32, i32* @x.19
  %1869 = load i32, i32* @y.20
  %1870 = sub i32 %1868, 1
  %1871 = mul i32 %1868, %1870
  %1872 = urem i32 %1871, 2
  %1873 = icmp eq i32 %1872, 0
  %1874 = icmp slt i32 %1869, 10
  %1875 = or i1 %1873, %1874
  br i1 %1875, label %originalBBpart2509, label %originalBB507alteredBB

originalBBpart2509:                               ; preds = %originalBB507
  br label %1876

1876:                                             ; preds = %originalBBpart2509, %originalBBpart2488
  %1877 = load i32, i32* @x.19
  %1878 = load i32, i32* @y.20
  %1879 = sub i32 %1877, 1
  %1880 = mul i32 %1877, %1879
  %1881 = urem i32 %1880, 2
  %1882 = icmp eq i32 %1881, 0
  %1883 = icmp slt i32 %1878, 10
  %1884 = or i1 %1882, %1883
  br i1 %1884, label %originalBB511, label %originalBB511alteredBB

originalBB511:                                    ; preds = %1876, %originalBB511alteredBB
  %1885 = load i32, i32* @x.19
  %1886 = load i32, i32* @y.20
  %1887 = sub i32 %1885, 1
  %1888 = mul i32 %1885, %1887
  %1889 = urem i32 %1888, 2
  %1890 = icmp eq i32 %1889, 0
  %1891 = icmp slt i32 %1886, 10
  %1892 = or i1 %1890, %1891
  br i1 %1892, label %originalBBpart2513, label %originalBB511alteredBB

originalBBpart2513:                               ; preds = %originalBB511
  br label %5465, !dbg !1454

1893:                                             ; preds = %originalBBpart2269
  %1894 = load i32, i32* @x.19
  %1895 = load i32, i32* @y.20
  %1896 = sub i32 %1894, 1
  %1897 = mul i32 %1894, %1896
  %1898 = urem i32 %1897, 2
  %1899 = icmp eq i32 %1898, 0
  %1900 = icmp slt i32 %1895, 10
  %1901 = or i1 %1899, %1900
  br i1 %1901, label %originalBB515, label %originalBB515alteredBB

originalBB515:                                    ; preds = %1893, %originalBB515alteredBB
  %1902 = load i32, i32* %23, align 4, !dbg !1455
  %1903 = load i32, i32* @x.19
  %1904 = load i32, i32* @y.20
  %1905 = sub i32 %1903, 1
  %1906 = mul i32 %1903, %1905
  %1907 = urem i32 %1906, 2
  %1908 = icmp eq i32 %1907, 0
  %1909 = icmp slt i32 %1904, 10
  %1910 = or i1 %1908, %1909
  br i1 %1910, label %originalBBpart2517, label %originalBB515alteredBB

originalBBpart2517:                               ; preds = %originalBB515
  switch i32 %1902, label %2467 [
    i32 2, label %1911
    i32 5, label %1964
  ], !dbg !1456

1911:                                             ; preds = %originalBBpart2517
  %1912 = load i32, i32* @x.19
  %1913 = load i32, i32* @y.20
  %1914 = sub i32 %1912, 1
  %1915 = mul i32 %1912, %1914
  %1916 = urem i32 %1915, 2
  %1917 = icmp eq i32 %1916, 0
  %1918 = icmp slt i32 %1913, 10
  %1919 = or i1 %1917, %1918
  br i1 %1919, label %originalBB519, label %originalBB519alteredBB

originalBB519:                                    ; preds = %1911, %originalBB519alteredBB
  %1920 = load i8, i8* %35, align 1, !dbg !1457
  %1921 = trunc i8 %1920 to i1, !dbg !1457
  %1922 = load i32, i32* @x.19
  %1923 = load i32, i32* @y.20
  %1924 = sub i32 %1922, 1
  %1925 = mul i32 %1922, %1924
  %1926 = urem i32 %1925, 2
  %1927 = icmp eq i32 %1926, 0
  %1928 = icmp slt i32 %1923, 10
  %1929 = or i1 %1927, %1928
  br i1 %1929, label %originalBBpart2521, label %originalBB519alteredBB

originalBBpart2521:                               ; preds = %originalBB519
  br i1 %1921, label %1930, label %1947, !dbg !1460

1930:                                             ; preds = %originalBBpart2521
  %1931 = load i32, i32* @x.19
  %1932 = load i32, i32* @y.20
  %1933 = sub i32 %1931, 1
  %1934 = mul i32 %1931, %1933
  %1935 = urem i32 %1934, 2
  %1936 = icmp eq i32 %1935, 0
  %1937 = icmp slt i32 %1932, 10
  %1938 = or i1 %1936, %1937
  br i1 %1938, label %originalBB523, label %originalBB523alteredBB

originalBB523:                                    ; preds = %1930, %originalBB523alteredBB
  %1939 = load i32, i32* @x.19
  %1940 = load i32, i32* @y.20
  %1941 = sub i32 %1939, 1
  %1942 = mul i32 %1939, %1941
  %1943 = urem i32 %1942, 2
  %1944 = icmp eq i32 %1943, 0
  %1945 = icmp slt i32 %1940, 10
  %1946 = or i1 %1944, %1945
  br i1 %1946, label %originalBBpart2525, label %originalBB523alteredBB

originalBBpart2525:                               ; preds = %originalBB523
  br label %6990, !dbg !1461

1947:                                             ; preds = %originalBBpart2521
  %1948 = load i32, i32* @x.19
  %1949 = load i32, i32* @y.20
  %1950 = sub i32 %1948, 1
  %1951 = mul i32 %1948, %1950
  %1952 = urem i32 %1951, 2
  %1953 = icmp eq i32 %1952, 0
  %1954 = icmp slt i32 %1949, 10
  %1955 = or i1 %1953, %1954
  br i1 %1955, label %originalBB527, label %originalBB527alteredBB

originalBB527:                                    ; preds = %1947, %originalBB527alteredBB
  %1956 = load i32, i32* @x.19
  %1957 = load i32, i32* @y.20
  %1958 = sub i32 %1956, 1
  %1959 = mul i32 %1956, %1958
  %1960 = urem i32 %1959, 2
  %1961 = icmp eq i32 %1960, 0
  %1962 = icmp slt i32 %1957, 10
  %1963 = or i1 %1961, %1962
  br i1 %1963, label %originalBBpart2529, label %originalBB527alteredBB

originalBBpart2529:                               ; preds = %originalBB527
  br label %2484, !dbg !1462

1964:                                             ; preds = %originalBBpart2517
  %1965 = load i32, i32* @x.19
  %1966 = load i32, i32* @y.20
  %1967 = sub i32 %1965, 1
  %1968 = mul i32 %1965, %1967
  %1969 = urem i32 %1968, 2
  %1970 = icmp eq i32 %1969, 0
  %1971 = icmp slt i32 %1966, 10
  %1972 = or i1 %1970, %1971
  br i1 %1972, label %originalBB531, label %originalBB531alteredBB

originalBB531:                                    ; preds = %1964, %originalBB531alteredBB
  %1973 = load i32, i32* %24, align 4, !dbg !1463
  %1974 = and i32 %1973, 4, !dbg !1465
  %1975 = icmp ne i32 %1974, 0, !dbg !1465
  %1976 = load i32, i32* @x.19
  %1977 = load i32, i32* @y.20
  %1978 = sub i32 %1976, 1
  %1979 = mul i32 %1976, %1978
  %1980 = urem i32 %1979, 2
  %1981 = icmp eq i32 %1980, 0
  %1982 = icmp slt i32 %1977, 10
  %1983 = or i1 %1981, %1982
  br i1 %1983, label %originalBBpart2536, label %originalBB531alteredBB

originalBBpart2536:                               ; preds = %originalBB531
  br i1 %1975, label %1984, label %2450, !dbg !1466

1984:                                             ; preds = %originalBBpart2536
  %1985 = load i32, i32* @x.19
  %1986 = load i32, i32* @y.20
  %1987 = sub i32 %1985, 1
  %1988 = mul i32 %1985, %1987
  %1989 = urem i32 %1988, 2
  %1990 = icmp eq i32 %1989, 0
  %1991 = icmp slt i32 %1986, 10
  %1992 = or i1 %1990, %1991
  br i1 %1992, label %originalBB538, label %originalBB538alteredBB

originalBB538:                                    ; preds = %1984, %originalBB538alteredBB
  %1993 = load i64, i64* %28, align 8, !dbg !1467
  %1994 = add i64 %1993, 2, !dbg !1468
  %1995 = load i64, i64* %22, align 8, !dbg !1469
  %1996 = icmp ult i64 %1994, %1995, !dbg !1470
  %1997 = load i32, i32* @x.19
  %1998 = load i32, i32* @y.20
  %1999 = sub i32 %1997, 1
  %2000 = mul i32 %1997, %1999
  %2001 = urem i32 %2000, 2
  %2002 = icmp eq i32 %2001, 0
  %2003 = icmp slt i32 %1998, 10
  %2004 = or i1 %2002, %2003
  br i1 %2004, label %originalBBpart2547, label %originalBB538alteredBB

originalBBpart2547:                               ; preds = %originalBB538
  br i1 %1996, label %2005, label %2450, !dbg !1471

2005:                                             ; preds = %originalBBpart2547
  %2006 = load i32, i32* @x.19
  %2007 = load i32, i32* @y.20
  %2008 = sub i32 %2006, 1
  %2009 = mul i32 %2006, %2008
  %2010 = urem i32 %2009, 2
  %2011 = icmp eq i32 %2010, 0
  %2012 = icmp slt i32 %2007, 10
  %2013 = or i1 %2011, %2012
  br i1 %2013, label %originalBB549, label %originalBB549alteredBB

originalBB549:                                    ; preds = %2005, %originalBB549alteredBB
  %2014 = load i8*, i8** %21, align 8, !dbg !1472
  %2015 = load i64, i64* %28, align 8, !dbg !1473
  %2016 = add i64 %2015, 1, !dbg !1474
  %2017 = getelementptr inbounds i8, i8* %2014, i64 %2016, !dbg !1472
  %2018 = load i8, i8* %2017, align 1, !dbg !1472
  %2019 = sext i8 %2018 to i32, !dbg !1472
  %2020 = icmp eq i32 %2019, 63, !dbg !1475
  %2021 = load i32, i32* @x.19
  %2022 = load i32, i32* @y.20
  %2023 = sub i32 %2021, 1
  %2024 = mul i32 %2021, %2023
  %2025 = urem i32 %2024, 2
  %2026 = icmp eq i32 %2025, 0
  %2027 = icmp slt i32 %2022, 10
  %2028 = or i1 %2026, %2027
  br i1 %2028, label %originalBBpart2556, label %originalBB549alteredBB

originalBBpart2556:                               ; preds = %originalBB549
  br i1 %2020, label %2029, label %2450, !dbg !1476

2029:                                             ; preds = %originalBBpart2556
  %2030 = load i32, i32* @x.19
  %2031 = load i32, i32* @y.20
  %2032 = sub i32 %2030, 1
  %2033 = mul i32 %2030, %2032
  %2034 = urem i32 %2033, 2
  %2035 = icmp eq i32 %2034, 0
  %2036 = icmp slt i32 %2031, 10
  %2037 = or i1 %2035, %2036
  br i1 %2037, label %originalBB558, label %originalBB558alteredBB

originalBB558:                                    ; preds = %2029, %originalBB558alteredBB
  %2038 = load i8*, i8** %21, align 8, !dbg !1477
  %2039 = load i64, i64* %28, align 8, !dbg !1478
  %2040 = add i64 %2039, 2, !dbg !1479
  %2041 = getelementptr inbounds i8, i8* %2038, i64 %2040, !dbg !1477
  %2042 = load i8, i8* %2041, align 1, !dbg !1477
  %2043 = sext i8 %2042 to i32, !dbg !1477
  %2044 = load i32, i32* @x.19
  %2045 = load i32, i32* @y.20
  %2046 = sub i32 %2044, 1
  %2047 = mul i32 %2044, %2046
  %2048 = urem i32 %2047, 2
  %2049 = icmp eq i32 %2048, 0
  %2050 = icmp slt i32 %2045, 10
  %2051 = or i1 %2049, %2050
  br i1 %2051, label %originalBBpart2564, label %originalBB558alteredBB

originalBBpart2564:                               ; preds = %originalBB558
  switch i32 %2043, label %2416 [
    i32 33, label %2052
    i32 39, label %2052
    i32 40, label %2052
    i32 41, label %2052
    i32 45, label %2052
    i32 47, label %2052
    i32 60, label %2052
    i32 61, label %2052
    i32 62, label %2052
  ], !dbg !1480

2052:                                             ; preds = %originalBBpart2564, %originalBBpart2564, %originalBBpart2564, %originalBBpart2564, %originalBBpart2564, %originalBBpart2564, %originalBBpart2564, %originalBBpart2564, %originalBBpart2564
  %2053 = load i32, i32* @x.19
  %2054 = load i32, i32* @y.20
  %2055 = sub i32 %2053, 1
  %2056 = mul i32 %2053, %2055
  %2057 = urem i32 %2056, 2
  %2058 = icmp eq i32 %2057, 0
  %2059 = icmp slt i32 %2054, 10
  %2060 = or i1 %2058, %2059
  br i1 %2060, label %originalBB566, label %originalBB566alteredBB

originalBB566:                                    ; preds = %2052, %originalBB566alteredBB
  %2061 = load i8, i8* %35, align 1, !dbg !1481
  %2062 = trunc i8 %2061 to i1, !dbg !1481
  %2063 = load i32, i32* @x.19
  %2064 = load i32, i32* @y.20
  %2065 = sub i32 %2063, 1
  %2066 = mul i32 %2063, %2065
  %2067 = urem i32 %2066, 2
  %2068 = icmp eq i32 %2067, 0
  %2069 = icmp slt i32 %2064, 10
  %2070 = or i1 %2068, %2069
  br i1 %2070, label %originalBBpart2568, label %originalBB566alteredBB

originalBBpart2568:                               ; preds = %originalBB566
  br i1 %2062, label %2071, label %2088, !dbg !1484

2071:                                             ; preds = %originalBBpart2568
  %2072 = load i32, i32* @x.19
  %2073 = load i32, i32* @y.20
  %2074 = sub i32 %2072, 1
  %2075 = mul i32 %2072, %2074
  %2076 = urem i32 %2075, 2
  %2077 = icmp eq i32 %2076, 0
  %2078 = icmp slt i32 %2073, 10
  %2079 = or i1 %2077, %2078
  br i1 %2079, label %originalBB570, label %originalBB570alteredBB

originalBB570:                                    ; preds = %2071, %originalBB570alteredBB
  %2080 = load i32, i32* @x.19
  %2081 = load i32, i32* @y.20
  %2082 = sub i32 %2080, 1
  %2083 = mul i32 %2080, %2082
  %2084 = urem i32 %2083, 2
  %2085 = icmp eq i32 %2084, 0
  %2086 = icmp slt i32 %2081, 10
  %2087 = or i1 %2085, %2086
  br i1 %2087, label %originalBBpart2572, label %originalBB570alteredBB

originalBBpart2572:                               ; preds = %originalBB570
  br label %6990, !dbg !1485

2088:                                             ; preds = %originalBBpart2568
  %2089 = load i32, i32* @x.19
  %2090 = load i32, i32* @y.20
  %2091 = sub i32 %2089, 1
  %2092 = mul i32 %2089, %2091
  %2093 = urem i32 %2092, 2
  %2094 = icmp eq i32 %2093, 0
  %2095 = icmp slt i32 %2090, 10
  %2096 = or i1 %2094, %2095
  br i1 %2096, label %originalBB574, label %originalBB574alteredBB

originalBB574:                                    ; preds = %2088, %originalBB574alteredBB
  %2097 = load i8*, i8** %21, align 8, !dbg !1486
  %2098 = load i64, i64* %28, align 8, !dbg !1487
  %2099 = add i64 %2098, 2, !dbg !1488
  %2100 = getelementptr inbounds i8, i8* %2097, i64 %2099, !dbg !1486
  %2101 = load i8, i8* %2100, align 1, !dbg !1486
  store i8 %2101, i8* %39, align 1, !dbg !1489
  %2102 = load i64, i64* %28, align 8, !dbg !1490
  %2103 = add i64 %2102, 2, !dbg !1490
  store i64 %2103, i64* %28, align 8, !dbg !1490
  %2104 = load i32, i32* @x.19
  %2105 = load i32, i32* @y.20
  %2106 = sub i32 %2104, 1
  %2107 = mul i32 %2104, %2106
  %2108 = urem i32 %2107, 2
  %2109 = icmp eq i32 %2108, 0
  %2110 = icmp slt i32 %2105, 10
  %2111 = or i1 %2109, %2110
  br i1 %2111, label %originalBBpart2585, label %originalBB574alteredBB

originalBBpart2585:                               ; preds = %originalBB574
  br label %2112, !dbg !1491

2112:                                             ; preds = %originalBBpart2585
  %2113 = load i32, i32* @x.19
  %2114 = load i32, i32* @y.20
  %2115 = sub i32 %2113, 1
  %2116 = mul i32 %2113, %2115
  %2117 = urem i32 %2116, 2
  %2118 = icmp eq i32 %2117, 0
  %2119 = icmp slt i32 %2114, 10
  %2120 = or i1 %2118, %2119
  br i1 %2120, label %originalBB587, label %originalBB587alteredBB

originalBB587:                                    ; preds = %2112, %originalBB587alteredBB
  %2121 = load i64, i64* %29, align 8, !dbg !1492
  %2122 = load i64, i64* %20, align 8, !dbg !1492
  %2123 = icmp ult i64 %2121, %2122, !dbg !1492
  %2124 = load i32, i32* @x.19
  %2125 = load i32, i32* @y.20
  %2126 = sub i32 %2124, 1
  %2127 = mul i32 %2124, %2126
  %2128 = urem i32 %2127, 2
  %2129 = icmp eq i32 %2128, 0
  %2130 = icmp slt i32 %2125, 10
  %2131 = or i1 %2129, %2130
  br i1 %2131, label %originalBBpart2589, label %originalBB587alteredBB

originalBBpart2589:                               ; preds = %originalBB587
  br i1 %2123, label %2132, label %2152, !dbg !1495

2132:                                             ; preds = %originalBBpart2589
  %2133 = load i32, i32* @x.19
  %2134 = load i32, i32* @y.20
  %2135 = sub i32 %2133, 1
  %2136 = mul i32 %2133, %2135
  %2137 = urem i32 %2136, 2
  %2138 = icmp eq i32 %2137, 0
  %2139 = icmp slt i32 %2134, 10
  %2140 = or i1 %2138, %2139
  br i1 %2140, label %originalBB591, label %originalBB591alteredBB

originalBB591:                                    ; preds = %2132, %originalBB591alteredBB
  %2141 = load i8*, i8** %19, align 8, !dbg !1492
  %2142 = load i64, i64* %29, align 8, !dbg !1492
  %2143 = getelementptr inbounds i8, i8* %2141, i64 %2142, !dbg !1492
  store i8 63, i8* %2143, align 1, !dbg !1492
  %2144 = load i32, i32* @x.19
  %2145 = load i32, i32* @y.20
  %2146 = sub i32 %2144, 1
  %2147 = mul i32 %2144, %2146
  %2148 = urem i32 %2147, 2
  %2149 = icmp eq i32 %2148, 0
  %2150 = icmp slt i32 %2145, 10
  %2151 = or i1 %2149, %2150
  br i1 %2151, label %originalBBpart2593, label %originalBB591alteredBB

originalBBpart2593:                               ; preds = %originalBB591
  br label %2152, !dbg !1492

2152:                                             ; preds = %originalBBpart2593, %originalBBpart2589
  %2153 = load i32, i32* @x.19
  %2154 = load i32, i32* @y.20
  %2155 = sub i32 %2153, 1
  %2156 = mul i32 %2153, %2155
  %2157 = urem i32 %2156, 2
  %2158 = icmp eq i32 %2157, 0
  %2159 = icmp slt i32 %2154, 10
  %2160 = or i1 %2158, %2159
  br i1 %2160, label %originalBB595, label %originalBB595alteredBB

originalBB595:                                    ; preds = %2152, %originalBB595alteredBB
  %2161 = load i64, i64* %29, align 8, !dbg !1495
  %2162 = add i64 %2161, 1, !dbg !1495
  store i64 %2162, i64* %29, align 8, !dbg !1495
  %2163 = load i32, i32* @x.19
  %2164 = load i32, i32* @y.20
  %2165 = sub i32 %2163, 1
  %2166 = mul i32 %2163, %2165
  %2167 = urem i32 %2166, 2
  %2168 = icmp eq i32 %2167, 0
  %2169 = icmp slt i32 %2164, 10
  %2170 = or i1 %2168, %2169
  br i1 %2170, label %originalBBpart2601, label %originalBB595alteredBB

originalBBpart2601:                               ; preds = %originalBB595
  br label %2171, !dbg !1495

2171:                                             ; preds = %originalBBpart2601
  %2172 = load i32, i32* @x.19
  %2173 = load i32, i32* @y.20
  %2174 = sub i32 %2172, 1
  %2175 = mul i32 %2172, %2174
  %2176 = urem i32 %2175, 2
  %2177 = icmp eq i32 %2176, 0
  %2178 = icmp slt i32 %2173, 10
  %2179 = or i1 %2177, %2178
  br i1 %2179, label %originalBB603, label %originalBB603alteredBB

originalBB603:                                    ; preds = %2171, %originalBB603alteredBB
  %2180 = load i32, i32* @x.19
  %2181 = load i32, i32* @y.20
  %2182 = sub i32 %2180, 1
  %2183 = mul i32 %2180, %2182
  %2184 = urem i32 %2183, 2
  %2185 = icmp eq i32 %2184, 0
  %2186 = icmp slt i32 %2181, 10
  %2187 = or i1 %2185, %2186
  br i1 %2187, label %originalBBpart2605, label %originalBB603alteredBB

originalBBpart2605:                               ; preds = %originalBB603
  br label %2188, !dbg !1496

2188:                                             ; preds = %originalBBpart2605
  %2189 = load i32, i32* @x.19
  %2190 = load i32, i32* @y.20
  %2191 = sub i32 %2189, 1
  %2192 = mul i32 %2189, %2191
  %2193 = urem i32 %2192, 2
  %2194 = icmp eq i32 %2193, 0
  %2195 = icmp slt i32 %2190, 10
  %2196 = or i1 %2194, %2195
  br i1 %2196, label %originalBB607, label %originalBB607alteredBB

originalBB607:                                    ; preds = %2188, %originalBB607alteredBB
  %2197 = load i64, i64* %29, align 8, !dbg !1497
  %2198 = load i64, i64* %20, align 8, !dbg !1497
  %2199 = icmp ult i64 %2197, %2198, !dbg !1497
  %2200 = load i32, i32* @x.19
  %2201 = load i32, i32* @y.20
  %2202 = sub i32 %2200, 1
  %2203 = mul i32 %2200, %2202
  %2204 = urem i32 %2203, 2
  %2205 = icmp eq i32 %2204, 0
  %2206 = icmp slt i32 %2201, 10
  %2207 = or i1 %2205, %2206
  br i1 %2207, label %originalBBpart2609, label %originalBB607alteredBB

originalBBpart2609:                               ; preds = %originalBB607
  br i1 %2199, label %2208, label %2228, !dbg !1500

2208:                                             ; preds = %originalBBpart2609
  %2209 = load i32, i32* @x.19
  %2210 = load i32, i32* @y.20
  %2211 = sub i32 %2209, 1
  %2212 = mul i32 %2209, %2211
  %2213 = urem i32 %2212, 2
  %2214 = icmp eq i32 %2213, 0
  %2215 = icmp slt i32 %2210, 10
  %2216 = or i1 %2214, %2215
  br i1 %2216, label %originalBB611, label %originalBB611alteredBB

originalBB611:                                    ; preds = %2208, %originalBB611alteredBB
  %2217 = load i8*, i8** %19, align 8, !dbg !1497
  %2218 = load i64, i64* %29, align 8, !dbg !1497
  %2219 = getelementptr inbounds i8, i8* %2217, i64 %2218, !dbg !1497
  store i8 34, i8* %2219, align 1, !dbg !1497
  %2220 = load i32, i32* @x.19
  %2221 = load i32, i32* @y.20
  %2222 = sub i32 %2220, 1
  %2223 = mul i32 %2220, %2222
  %2224 = urem i32 %2223, 2
  %2225 = icmp eq i32 %2224, 0
  %2226 = icmp slt i32 %2221, 10
  %2227 = or i1 %2225, %2226
  br i1 %2227, label %originalBBpart2613, label %originalBB611alteredBB

originalBBpart2613:                               ; preds = %originalBB611
  br label %2228, !dbg !1497

2228:                                             ; preds = %originalBBpart2613, %originalBBpart2609
  %2229 = load i32, i32* @x.19
  %2230 = load i32, i32* @y.20
  %2231 = sub i32 %2229, 1
  %2232 = mul i32 %2229, %2231
  %2233 = urem i32 %2232, 2
  %2234 = icmp eq i32 %2233, 0
  %2235 = icmp slt i32 %2230, 10
  %2236 = or i1 %2234, %2235
  br i1 %2236, label %originalBB615, label %originalBB615alteredBB

originalBB615:                                    ; preds = %2228, %originalBB615alteredBB
  %2237 = load i64, i64* %29, align 8, !dbg !1500
  %2238 = add i64 %2237, 1, !dbg !1500
  store i64 %2238, i64* %29, align 8, !dbg !1500
  %2239 = load i32, i32* @x.19
  %2240 = load i32, i32* @y.20
  %2241 = sub i32 %2239, 1
  %2242 = mul i32 %2239, %2241
  %2243 = urem i32 %2242, 2
  %2244 = icmp eq i32 %2243, 0
  %2245 = icmp slt i32 %2240, 10
  %2246 = or i1 %2244, %2245
  br i1 %2246, label %originalBBpart2627, label %originalBB615alteredBB

originalBBpart2627:                               ; preds = %originalBB615
  br label %2247, !dbg !1500

2247:                                             ; preds = %originalBBpart2627
  %2248 = load i32, i32* @x.19
  %2249 = load i32, i32* @y.20
  %2250 = sub i32 %2248, 1
  %2251 = mul i32 %2248, %2250
  %2252 = urem i32 %2251, 2
  %2253 = icmp eq i32 %2252, 0
  %2254 = icmp slt i32 %2249, 10
  %2255 = or i1 %2253, %2254
  br i1 %2255, label %originalBB629, label %originalBB629alteredBB

originalBB629:                                    ; preds = %2247, %originalBB629alteredBB
  %2256 = load i32, i32* @x.19
  %2257 = load i32, i32* @y.20
  %2258 = sub i32 %2256, 1
  %2259 = mul i32 %2256, %2258
  %2260 = urem i32 %2259, 2
  %2261 = icmp eq i32 %2260, 0
  %2262 = icmp slt i32 %2257, 10
  %2263 = or i1 %2261, %2262
  br i1 %2263, label %originalBBpart2631, label %originalBB629alteredBB

originalBBpart2631:                               ; preds = %originalBB629
  br label %2264, !dbg !1501

2264:                                             ; preds = %originalBBpart2631
  %2265 = load i32, i32* @x.19
  %2266 = load i32, i32* @y.20
  %2267 = sub i32 %2265, 1
  %2268 = mul i32 %2265, %2267
  %2269 = urem i32 %2268, 2
  %2270 = icmp eq i32 %2269, 0
  %2271 = icmp slt i32 %2266, 10
  %2272 = or i1 %2270, %2271
  br i1 %2272, label %originalBB633, label %originalBB633alteredBB

originalBB633:                                    ; preds = %2264, %originalBB633alteredBB
  %2273 = load i64, i64* %29, align 8, !dbg !1502
  %2274 = load i64, i64* %20, align 8, !dbg !1502
  %2275 = icmp ult i64 %2273, %2274, !dbg !1502
  %2276 = load i32, i32* @x.19
  %2277 = load i32, i32* @y.20
  %2278 = sub i32 %2276, 1
  %2279 = mul i32 %2276, %2278
  %2280 = urem i32 %2279, 2
  %2281 = icmp eq i32 %2280, 0
  %2282 = icmp slt i32 %2277, 10
  %2283 = or i1 %2281, %2282
  br i1 %2283, label %originalBBpart2635, label %originalBB633alteredBB

originalBBpart2635:                               ; preds = %originalBB633
  br i1 %2275, label %2284, label %2304, !dbg !1505

2284:                                             ; preds = %originalBBpart2635
  %2285 = load i32, i32* @x.19
  %2286 = load i32, i32* @y.20
  %2287 = sub i32 %2285, 1
  %2288 = mul i32 %2285, %2287
  %2289 = urem i32 %2288, 2
  %2290 = icmp eq i32 %2289, 0
  %2291 = icmp slt i32 %2286, 10
  %2292 = or i1 %2290, %2291
  br i1 %2292, label %originalBB637, label %originalBB637alteredBB

originalBB637:                                    ; preds = %2284, %originalBB637alteredBB
  %2293 = load i8*, i8** %19, align 8, !dbg !1502
  %2294 = load i64, i64* %29, align 8, !dbg !1502
  %2295 = getelementptr inbounds i8, i8* %2293, i64 %2294, !dbg !1502
  store i8 34, i8* %2295, align 1, !dbg !1502
  %2296 = load i32, i32* @x.19
  %2297 = load i32, i32* @y.20
  %2298 = sub i32 %2296, 1
  %2299 = mul i32 %2296, %2298
  %2300 = urem i32 %2299, 2
  %2301 = icmp eq i32 %2300, 0
  %2302 = icmp slt i32 %2297, 10
  %2303 = or i1 %2301, %2302
  br i1 %2303, label %originalBBpart2639, label %originalBB637alteredBB

originalBBpart2639:                               ; preds = %originalBB637
  br label %2304, !dbg !1502

2304:                                             ; preds = %originalBBpart2639, %originalBBpart2635
  %2305 = load i32, i32* @x.19
  %2306 = load i32, i32* @y.20
  %2307 = sub i32 %2305, 1
  %2308 = mul i32 %2305, %2307
  %2309 = urem i32 %2308, 2
  %2310 = icmp eq i32 %2309, 0
  %2311 = icmp slt i32 %2306, 10
  %2312 = or i1 %2310, %2311
  br i1 %2312, label %originalBB641, label %originalBB641alteredBB

originalBB641:                                    ; preds = %2304, %originalBB641alteredBB
  %2313 = load i64, i64* %29, align 8, !dbg !1505
  %2314 = add i64 %2313, 1, !dbg !1505
  store i64 %2314, i64* %29, align 8, !dbg !1505
  %2315 = load i32, i32* @x.19
  %2316 = load i32, i32* @y.20
  %2317 = sub i32 %2315, 1
  %2318 = mul i32 %2315, %2317
  %2319 = urem i32 %2318, 2
  %2320 = icmp eq i32 %2319, 0
  %2321 = icmp slt i32 %2316, 10
  %2322 = or i1 %2320, %2321
  br i1 %2322, label %originalBBpart2645, label %originalBB641alteredBB

originalBBpart2645:                               ; preds = %originalBB641
  br label %2323, !dbg !1505

2323:                                             ; preds = %originalBBpart2645
  %2324 = load i32, i32* @x.19
  %2325 = load i32, i32* @y.20
  %2326 = sub i32 %2324, 1
  %2327 = mul i32 %2324, %2326
  %2328 = urem i32 %2327, 2
  %2329 = icmp eq i32 %2328, 0
  %2330 = icmp slt i32 %2325, 10
  %2331 = or i1 %2329, %2330
  br i1 %2331, label %originalBB647, label %originalBB647alteredBB

originalBB647:                                    ; preds = %2323, %originalBB647alteredBB
  %2332 = load i32, i32* @x.19
  %2333 = load i32, i32* @y.20
  %2334 = sub i32 %2332, 1
  %2335 = mul i32 %2332, %2334
  %2336 = urem i32 %2335, 2
  %2337 = icmp eq i32 %2336, 0
  %2338 = icmp slt i32 %2333, 10
  %2339 = or i1 %2337, %2338
  br i1 %2339, label %originalBBpart2649, label %originalBB647alteredBB

originalBBpart2649:                               ; preds = %originalBB647
  br label %2340, !dbg !1506

2340:                                             ; preds = %originalBBpart2649
  %2341 = load i32, i32* @x.19
  %2342 = load i32, i32* @y.20
  %2343 = sub i32 %2341, 1
  %2344 = mul i32 %2341, %2343
  %2345 = urem i32 %2344, 2
  %2346 = icmp eq i32 %2345, 0
  %2347 = icmp slt i32 %2342, 10
  %2348 = or i1 %2346, %2347
  br i1 %2348, label %originalBB651, label %originalBB651alteredBB

originalBB651:                                    ; preds = %2340, %originalBB651alteredBB
  %2349 = load i64, i64* %29, align 8, !dbg !1507
  %2350 = load i64, i64* %20, align 8, !dbg !1507
  %2351 = icmp ult i64 %2349, %2350, !dbg !1507
  %2352 = load i32, i32* @x.19
  %2353 = load i32, i32* @y.20
  %2354 = sub i32 %2352, 1
  %2355 = mul i32 %2352, %2354
  %2356 = urem i32 %2355, 2
  %2357 = icmp eq i32 %2356, 0
  %2358 = icmp slt i32 %2353, 10
  %2359 = or i1 %2357, %2358
  br i1 %2359, label %originalBBpart2653, label %originalBB651alteredBB

originalBBpart2653:                               ; preds = %originalBB651
  br i1 %2351, label %2360, label %2380, !dbg !1510

2360:                                             ; preds = %originalBBpart2653
  %2361 = load i32, i32* @x.19
  %2362 = load i32, i32* @y.20
  %2363 = sub i32 %2361, 1
  %2364 = mul i32 %2361, %2363
  %2365 = urem i32 %2364, 2
  %2366 = icmp eq i32 %2365, 0
  %2367 = icmp slt i32 %2362, 10
  %2368 = or i1 %2366, %2367
  br i1 %2368, label %originalBB655, label %originalBB655alteredBB

originalBB655:                                    ; preds = %2360, %originalBB655alteredBB
  %2369 = load i8*, i8** %19, align 8, !dbg !1507
  %2370 = load i64, i64* %29, align 8, !dbg !1507
  %2371 = getelementptr inbounds i8, i8* %2369, i64 %2370, !dbg !1507
  store i8 63, i8* %2371, align 1, !dbg !1507
  %2372 = load i32, i32* @x.19
  %2373 = load i32, i32* @y.20
  %2374 = sub i32 %2372, 1
  %2375 = mul i32 %2372, %2374
  %2376 = urem i32 %2375, 2
  %2377 = icmp eq i32 %2376, 0
  %2378 = icmp slt i32 %2373, 10
  %2379 = or i1 %2377, %2378
  br i1 %2379, label %originalBBpart2657, label %originalBB655alteredBB

originalBBpart2657:                               ; preds = %originalBB655
  br label %2380, !dbg !1507

2380:                                             ; preds = %originalBBpart2657, %originalBBpart2653
  %2381 = load i32, i32* @x.19
  %2382 = load i32, i32* @y.20
  %2383 = sub i32 %2381, 1
  %2384 = mul i32 %2381, %2383
  %2385 = urem i32 %2384, 2
  %2386 = icmp eq i32 %2385, 0
  %2387 = icmp slt i32 %2382, 10
  %2388 = or i1 %2386, %2387
  br i1 %2388, label %originalBB659, label %originalBB659alteredBB

originalBB659:                                    ; preds = %2380, %originalBB659alteredBB
  %2389 = load i64, i64* %29, align 8, !dbg !1510
  %2390 = add i64 %2389, 1, !dbg !1510
  store i64 %2390, i64* %29, align 8, !dbg !1510
  %2391 = load i32, i32* @x.19
  %2392 = load i32, i32* @y.20
  %2393 = sub i32 %2391, 1
  %2394 = mul i32 %2391, %2393
  %2395 = urem i32 %2394, 2
  %2396 = icmp eq i32 %2395, 0
  %2397 = icmp slt i32 %2392, 10
  %2398 = or i1 %2396, %2397
  br i1 %2398, label %originalBBpart2666, label %originalBB659alteredBB

originalBBpart2666:                               ; preds = %originalBB659
  br label %2399, !dbg !1510

2399:                                             ; preds = %originalBBpart2666
  %2400 = load i32, i32* @x.19
  %2401 = load i32, i32* @y.20
  %2402 = sub i32 %2400, 1
  %2403 = mul i32 %2400, %2402
  %2404 = urem i32 %2403, 2
  %2405 = icmp eq i32 %2404, 0
  %2406 = icmp slt i32 %2401, 10
  %2407 = or i1 %2405, %2406
  br i1 %2407, label %originalBB668, label %originalBB668alteredBB

originalBB668:                                    ; preds = %2399, %originalBB668alteredBB
  %2408 = load i32, i32* @x.19
  %2409 = load i32, i32* @y.20
  %2410 = sub i32 %2408, 1
  %2411 = mul i32 %2408, %2410
  %2412 = urem i32 %2411, 2
  %2413 = icmp eq i32 %2412, 0
  %2414 = icmp slt i32 %2409, 10
  %2415 = or i1 %2413, %2414
  br i1 %2415, label %originalBBpart2670, label %originalBB668alteredBB

originalBBpart2670:                               ; preds = %originalBB668
  br label %2433, !dbg !1511

2416:                                             ; preds = %originalBBpart2564
  %2417 = load i32, i32* @x.19
  %2418 = load i32, i32* @y.20
  %2419 = sub i32 %2417, 1
  %2420 = mul i32 %2417, %2419
  %2421 = urem i32 %2420, 2
  %2422 = icmp eq i32 %2421, 0
  %2423 = icmp slt i32 %2418, 10
  %2424 = or i1 %2422, %2423
  br i1 %2424, label %originalBB672, label %originalBB672alteredBB

originalBB672:                                    ; preds = %2416, %originalBB672alteredBB
  %2425 = load i32, i32* @x.19
  %2426 = load i32, i32* @y.20
  %2427 = sub i32 %2425, 1
  %2428 = mul i32 %2425, %2427
  %2429 = urem i32 %2428, 2
  %2430 = icmp eq i32 %2429, 0
  %2431 = icmp slt i32 %2426, 10
  %2432 = or i1 %2430, %2431
  br i1 %2432, label %originalBBpart2674, label %originalBB672alteredBB

originalBBpart2674:                               ; preds = %originalBB672
  br label %2433, !dbg !1512

2433:                                             ; preds = %originalBBpart2674, %originalBBpart2670
  %2434 = load i32, i32* @x.19
  %2435 = load i32, i32* @y.20
  %2436 = sub i32 %2434, 1
  %2437 = mul i32 %2434, %2436
  %2438 = urem i32 %2437, 2
  %2439 = icmp eq i32 %2438, 0
  %2440 = icmp slt i32 %2435, 10
  %2441 = or i1 %2439, %2440
  br i1 %2441, label %originalBB676, label %originalBB676alteredBB

originalBB676:                                    ; preds = %2433, %originalBB676alteredBB
  %2442 = load i32, i32* @x.19
  %2443 = load i32, i32* @y.20
  %2444 = sub i32 %2442, 1
  %2445 = mul i32 %2442, %2444
  %2446 = urem i32 %2445, 2
  %2447 = icmp eq i32 %2446, 0
  %2448 = icmp slt i32 %2443, 10
  %2449 = or i1 %2447, %2448
  br i1 %2449, label %originalBBpart2678, label %originalBB676alteredBB

originalBBpart2678:                               ; preds = %originalBB676
  br label %2450, !dbg !1513

2450:                                             ; preds = %originalBBpart2678, %originalBBpart2556, %originalBBpart2547, %originalBBpart2536
  %2451 = load i32, i32* @x.19
  %2452 = load i32, i32* @y.20
  %2453 = sub i32 %2451, 1
  %2454 = mul i32 %2451, %2453
  %2455 = urem i32 %2454, 2
  %2456 = icmp eq i32 %2455, 0
  %2457 = icmp slt i32 %2452, 10
  %2458 = or i1 %2456, %2457
  br i1 %2458, label %originalBB680, label %originalBB680alteredBB

originalBB680:                                    ; preds = %2450, %originalBB680alteredBB
  %2459 = load i32, i32* @x.19
  %2460 = load i32, i32* @y.20
  %2461 = sub i32 %2459, 1
  %2462 = mul i32 %2459, %2461
  %2463 = urem i32 %2462, 2
  %2464 = icmp eq i32 %2463, 0
  %2465 = icmp slt i32 %2460, 10
  %2466 = or i1 %2464, %2465
  br i1 %2466, label %originalBBpart2682, label %originalBB680alteredBB

originalBBpart2682:                               ; preds = %originalBB680
  br label %2484, !dbg !1514

2467:                                             ; preds = %originalBBpart2517
  %2468 = load i32, i32* @x.19
  %2469 = load i32, i32* @y.20
  %2470 = sub i32 %2468, 1
  %2471 = mul i32 %2468, %2470
  %2472 = urem i32 %2471, 2
  %2473 = icmp eq i32 %2472, 0
  %2474 = icmp slt i32 %2469, 10
  %2475 = or i1 %2473, %2474
  br i1 %2475, label %originalBB684, label %originalBB684alteredBB

originalBB684:                                    ; preds = %2467, %originalBB684alteredBB
  %2476 = load i32, i32* @x.19
  %2477 = load i32, i32* @y.20
  %2478 = sub i32 %2476, 1
  %2479 = mul i32 %2476, %2478
  %2480 = urem i32 %2479, 2
  %2481 = icmp eq i32 %2480, 0
  %2482 = icmp slt i32 %2477, 10
  %2483 = or i1 %2481, %2482
  br i1 %2483, label %originalBBpart2686, label %originalBB684alteredBB

originalBBpart2686:                               ; preds = %originalBB684
  br label %2484, !dbg !1515

2484:                                             ; preds = %originalBBpart2686, %originalBBpart2682, %originalBBpart2529
  %2485 = load i32, i32* @x.19
  %2486 = load i32, i32* @y.20
  %2487 = sub i32 %2485, 1
  %2488 = mul i32 %2485, %2487
  %2489 = urem i32 %2488, 2
  %2490 = icmp eq i32 %2489, 0
  %2491 = icmp slt i32 %2486, 10
  %2492 = or i1 %2490, %2491
  br i1 %2492, label %originalBB688, label %originalBB688alteredBB

originalBB688:                                    ; preds = %2484, %originalBB688alteredBB
  %2493 = load i32, i32* @x.19
  %2494 = load i32, i32* @y.20
  %2495 = sub i32 %2493, 1
  %2496 = mul i32 %2493, %2495
  %2497 = urem i32 %2496, 2
  %2498 = icmp eq i32 %2497, 0
  %2499 = icmp slt i32 %2494, 10
  %2500 = or i1 %2498, %2499
  br i1 %2500, label %originalBBpart2690, label %originalBB688alteredBB

originalBBpart2690:                               ; preds = %originalBB688
  br label %5465, !dbg !1516

2501:                                             ; preds = %originalBBpart2269
  %2502 = load i32, i32* @x.19
  %2503 = load i32, i32* @y.20
  %2504 = sub i32 %2502, 1
  %2505 = mul i32 %2502, %2504
  %2506 = urem i32 %2505, 2
  %2507 = icmp eq i32 %2506, 0
  %2508 = icmp slt i32 %2503, 10
  %2509 = or i1 %2507, %2508
  br i1 %2509, label %originalBB692, label %originalBB692alteredBB

originalBB692:                                    ; preds = %2501, %originalBB692alteredBB
  store i8 97, i8* %40, align 1, !dbg !1517
  %2510 = load i32, i32* @x.19
  %2511 = load i32, i32* @y.20
  %2512 = sub i32 %2510, 1
  %2513 = mul i32 %2510, %2512
  %2514 = urem i32 %2513, 2
  %2515 = icmp eq i32 %2514, 0
  %2516 = icmp slt i32 %2511, 10
  %2517 = or i1 %2515, %2516
  br i1 %2517, label %originalBBpart2694, label %originalBB692alteredBB

originalBBpart2694:                               ; preds = %originalBB692
  br label %2856, !dbg !1518

2518:                                             ; preds = %originalBBpart2269
  %2519 = load i32, i32* @x.19
  %2520 = load i32, i32* @y.20
  %2521 = sub i32 %2519, 1
  %2522 = mul i32 %2519, %2521
  %2523 = urem i32 %2522, 2
  %2524 = icmp eq i32 %2523, 0
  %2525 = icmp slt i32 %2520, 10
  %2526 = or i1 %2524, %2525
  br i1 %2526, label %originalBB696, label %originalBB696alteredBB

originalBB696:                                    ; preds = %2518, %originalBB696alteredBB
  store i8 98, i8* %40, align 1, !dbg !1519
  %2527 = load i32, i32* @x.19
  %2528 = load i32, i32* @y.20
  %2529 = sub i32 %2527, 1
  %2530 = mul i32 %2527, %2529
  %2531 = urem i32 %2530, 2
  %2532 = icmp eq i32 %2531, 0
  %2533 = icmp slt i32 %2528, 10
  %2534 = or i1 %2532, %2533
  br i1 %2534, label %originalBBpart2698, label %originalBB696alteredBB

originalBBpart2698:                               ; preds = %originalBB696
  br label %2856, !dbg !1520

2535:                                             ; preds = %originalBBpart2269
  %2536 = load i32, i32* @x.19
  %2537 = load i32, i32* @y.20
  %2538 = sub i32 %2536, 1
  %2539 = mul i32 %2536, %2538
  %2540 = urem i32 %2539, 2
  %2541 = icmp eq i32 %2540, 0
  %2542 = icmp slt i32 %2537, 10
  %2543 = or i1 %2541, %2542
  br i1 %2543, label %originalBB700, label %originalBB700alteredBB

originalBB700:                                    ; preds = %2535, %originalBB700alteredBB
  store i8 102, i8* %40, align 1, !dbg !1521
  %2544 = load i32, i32* @x.19
  %2545 = load i32, i32* @y.20
  %2546 = sub i32 %2544, 1
  %2547 = mul i32 %2544, %2546
  %2548 = urem i32 %2547, 2
  %2549 = icmp eq i32 %2548, 0
  %2550 = icmp slt i32 %2545, 10
  %2551 = or i1 %2549, %2550
  br i1 %2551, label %originalBBpart2702, label %originalBB700alteredBB

originalBBpart2702:                               ; preds = %originalBB700
  br label %2856, !dbg !1522

2552:                                             ; preds = %originalBBpart2269
  %2553 = load i32, i32* @x.19
  %2554 = load i32, i32* @y.20
  %2555 = sub i32 %2553, 1
  %2556 = mul i32 %2553, %2555
  %2557 = urem i32 %2556, 2
  %2558 = icmp eq i32 %2557, 0
  %2559 = icmp slt i32 %2554, 10
  %2560 = or i1 %2558, %2559
  br i1 %2560, label %originalBB704, label %originalBB704alteredBB

originalBB704:                                    ; preds = %2552, %originalBB704alteredBB
  store i8 110, i8* %40, align 1, !dbg !1523
  %2561 = load i32, i32* @x.19
  %2562 = load i32, i32* @y.20
  %2563 = sub i32 %2561, 1
  %2564 = mul i32 %2561, %2563
  %2565 = urem i32 %2564, 2
  %2566 = icmp eq i32 %2565, 0
  %2567 = icmp slt i32 %2562, 10
  %2568 = or i1 %2566, %2567
  br i1 %2568, label %originalBBpart2706, label %originalBB704alteredBB

originalBBpart2706:                               ; preds = %originalBB704
  br label %2784, !dbg !1524

2569:                                             ; preds = %originalBBpart2269
  %2570 = load i32, i32* @x.19
  %2571 = load i32, i32* @y.20
  %2572 = sub i32 %2570, 1
  %2573 = mul i32 %2570, %2572
  %2574 = urem i32 %2573, 2
  %2575 = icmp eq i32 %2574, 0
  %2576 = icmp slt i32 %2571, 10
  %2577 = or i1 %2575, %2576
  br i1 %2577, label %originalBB708, label %originalBB708alteredBB

originalBB708:                                    ; preds = %2569, %originalBB708alteredBB
  store i8 114, i8* %40, align 1, !dbg !1525
  %2578 = load i32, i32* @x.19
  %2579 = load i32, i32* @y.20
  %2580 = sub i32 %2578, 1
  %2581 = mul i32 %2578, %2580
  %2582 = urem i32 %2581, 2
  %2583 = icmp eq i32 %2582, 0
  %2584 = icmp slt i32 %2579, 10
  %2585 = or i1 %2583, %2584
  br i1 %2585, label %originalBBpart2710, label %originalBB708alteredBB

originalBBpart2710:                               ; preds = %originalBB708
  br label %2784, !dbg !1526

2586:                                             ; preds = %originalBBpart2269
  %2587 = load i32, i32* @x.19
  %2588 = load i32, i32* @y.20
  %2589 = sub i32 %2587, 1
  %2590 = mul i32 %2587, %2589
  %2591 = urem i32 %2590, 2
  %2592 = icmp eq i32 %2591, 0
  %2593 = icmp slt i32 %2588, 10
  %2594 = or i1 %2592, %2593
  br i1 %2594, label %originalBB712, label %originalBB712alteredBB

originalBB712:                                    ; preds = %2586, %originalBB712alteredBB
  store i8 116, i8* %40, align 1, !dbg !1527
  %2595 = load i32, i32* @x.19
  %2596 = load i32, i32* @y.20
  %2597 = sub i32 %2595, 1
  %2598 = mul i32 %2595, %2597
  %2599 = urem i32 %2598, 2
  %2600 = icmp eq i32 %2599, 0
  %2601 = icmp slt i32 %2596, 10
  %2602 = or i1 %2600, %2601
  br i1 %2602, label %originalBBpart2714, label %originalBB712alteredBB

originalBBpart2714:                               ; preds = %originalBB712
  br label %2784, !dbg !1528

2603:                                             ; preds = %originalBBpart2269
  %2604 = load i32, i32* @x.19
  %2605 = load i32, i32* @y.20
  %2606 = sub i32 %2604, 1
  %2607 = mul i32 %2604, %2606
  %2608 = urem i32 %2607, 2
  %2609 = icmp eq i32 %2608, 0
  %2610 = icmp slt i32 %2605, 10
  %2611 = or i1 %2609, %2610
  br i1 %2611, label %originalBB716, label %originalBB716alteredBB

originalBB716:                                    ; preds = %2603, %originalBB716alteredBB
  store i8 118, i8* %40, align 1, !dbg !1529
  %2612 = load i32, i32* @x.19
  %2613 = load i32, i32* @y.20
  %2614 = sub i32 %2612, 1
  %2615 = mul i32 %2612, %2614
  %2616 = urem i32 %2615, 2
  %2617 = icmp eq i32 %2616, 0
  %2618 = icmp slt i32 %2613, 10
  %2619 = or i1 %2617, %2618
  br i1 %2619, label %originalBBpart2718, label %originalBB716alteredBB

originalBBpart2718:                               ; preds = %originalBB716
  br label %2856, !dbg !1530

2620:                                             ; preds = %originalBBpart2269
  %2621 = load i32, i32* @x.19
  %2622 = load i32, i32* @y.20
  %2623 = sub i32 %2621, 1
  %2624 = mul i32 %2621, %2623
  %2625 = urem i32 %2624, 2
  %2626 = icmp eq i32 %2625, 0
  %2627 = icmp slt i32 %2622, 10
  %2628 = or i1 %2626, %2627
  br i1 %2628, label %originalBB720, label %originalBB720alteredBB

originalBB720:                                    ; preds = %2620, %originalBB720alteredBB
  %2629 = load i8, i8* %39, align 1, !dbg !1531
  store i8 %2629, i8* %40, align 1, !dbg !1532
  %2630 = load i32, i32* %23, align 4, !dbg !1533
  %2631 = icmp eq i32 %2630, 2, !dbg !1535
  %2632 = load i32, i32* @x.19
  %2633 = load i32, i32* @y.20
  %2634 = sub i32 %2632, 1
  %2635 = mul i32 %2632, %2634
  %2636 = urem i32 %2635, 2
  %2637 = icmp eq i32 %2636, 0
  %2638 = icmp slt i32 %2633, 10
  %2639 = or i1 %2637, %2638
  br i1 %2639, label %originalBBpart2722, label %originalBB720alteredBB

originalBBpart2722:                               ; preds = %originalBB720
  br i1 %2631, label %2640, label %2693, !dbg !1536

2640:                                             ; preds = %originalBBpart2722
  %2641 = load i32, i32* @x.19
  %2642 = load i32, i32* @y.20
  %2643 = sub i32 %2641, 1
  %2644 = mul i32 %2641, %2643
  %2645 = urem i32 %2644, 2
  %2646 = icmp eq i32 %2645, 0
  %2647 = icmp slt i32 %2642, 10
  %2648 = or i1 %2646, %2647
  br i1 %2648, label %originalBB724, label %originalBB724alteredBB

originalBB724:                                    ; preds = %2640, %originalBB724alteredBB
  %2649 = load i8, i8* %35, align 1, !dbg !1537
  %2650 = trunc i8 %2649 to i1, !dbg !1537
  %2651 = load i32, i32* @x.19
  %2652 = load i32, i32* @y.20
  %2653 = sub i32 %2651, 1
  %2654 = mul i32 %2651, %2653
  %2655 = urem i32 %2654, 2
  %2656 = icmp eq i32 %2655, 0
  %2657 = icmp slt i32 %2652, 10
  %2658 = or i1 %2656, %2657
  br i1 %2658, label %originalBBpart2726, label %originalBB724alteredBB

originalBBpart2726:                               ; preds = %originalBB724
  br i1 %2650, label %2659, label %2676, !dbg !1540

2659:                                             ; preds = %originalBBpart2726
  %2660 = load i32, i32* @x.19
  %2661 = load i32, i32* @y.20
  %2662 = sub i32 %2660, 1
  %2663 = mul i32 %2660, %2662
  %2664 = urem i32 %2663, 2
  %2665 = icmp eq i32 %2664, 0
  %2666 = icmp slt i32 %2661, 10
  %2667 = or i1 %2665, %2666
  br i1 %2667, label %originalBB728, label %originalBB728alteredBB

originalBB728:                                    ; preds = %2659, %originalBB728alteredBB
  %2668 = load i32, i32* @x.19
  %2669 = load i32, i32* @y.20
  %2670 = sub i32 %2668, 1
  %2671 = mul i32 %2668, %2670
  %2672 = urem i32 %2671, 2
  %2673 = icmp eq i32 %2672, 0
  %2674 = icmp slt i32 %2669, 10
  %2675 = or i1 %2673, %2674
  br i1 %2675, label %originalBBpart2730, label %originalBB728alteredBB

originalBBpart2730:                               ; preds = %originalBB728
  br label %6990, !dbg !1541

2676:                                             ; preds = %originalBBpart2726
  %2677 = load i32, i32* @x.19
  %2678 = load i32, i32* @y.20
  %2679 = sub i32 %2677, 1
  %2680 = mul i32 %2677, %2679
  %2681 = urem i32 %2680, 2
  %2682 = icmp eq i32 %2681, 0
  %2683 = icmp slt i32 %2678, 10
  %2684 = or i1 %2682, %2683
  br i1 %2684, label %originalBB732, label %originalBB732alteredBB

originalBB732:                                    ; preds = %2676, %originalBB732alteredBB
  %2685 = load i32, i32* @x.19
  %2686 = load i32, i32* @y.20
  %2687 = sub i32 %2685, 1
  %2688 = mul i32 %2685, %2687
  %2689 = urem i32 %2688, 2
  %2690 = icmp eq i32 %2689, 0
  %2691 = icmp slt i32 %2686, 10
  %2692 = or i1 %2690, %2691
  br i1 %2692, label %originalBBpart2734, label %originalBB732alteredBB

originalBBpart2734:                               ; preds = %originalBB732
  br label %6070, !dbg !1542

2693:                                             ; preds = %originalBBpart2722
  %2694 = load i32, i32* @x.19
  %2695 = load i32, i32* @y.20
  %2696 = sub i32 %2694, 1
  %2697 = mul i32 %2694, %2696
  %2698 = urem i32 %2697, 2
  %2699 = icmp eq i32 %2698, 0
  %2700 = icmp slt i32 %2695, 10
  %2701 = or i1 %2699, %2700
  br i1 %2701, label %originalBB736, label %originalBB736alteredBB

originalBB736:                                    ; preds = %2693, %originalBB736alteredBB
  %2702 = load i8, i8* %33, align 1, !dbg !1543
  %2703 = trunc i8 %2702 to i1, !dbg !1543
  %2704 = load i32, i32* @x.19
  %2705 = load i32, i32* @y.20
  %2706 = sub i32 %2704, 1
  %2707 = mul i32 %2704, %2706
  %2708 = urem i32 %2707, 2
  %2709 = icmp eq i32 %2708, 0
  %2710 = icmp slt i32 %2705, 10
  %2711 = or i1 %2709, %2710
  br i1 %2711, label %originalBBpart2738, label %originalBB736alteredBB

originalBBpart2738:                               ; preds = %originalBB736
  br i1 %2703, label %2712, label %2767, !dbg !1545

2712:                                             ; preds = %originalBBpart2738
  %2713 = load i32, i32* @x.19
  %2714 = load i32, i32* @y.20
  %2715 = sub i32 %2713, 1
  %2716 = mul i32 %2713, %2715
  %2717 = urem i32 %2716, 2
  %2718 = icmp eq i32 %2717, 0
  %2719 = icmp slt i32 %2714, 10
  %2720 = or i1 %2718, %2719
  br i1 %2720, label %originalBB740, label %originalBB740alteredBB

originalBB740:                                    ; preds = %2712, %originalBB740alteredBB
  %2721 = load i8, i8* %35, align 1, !dbg !1546
  %2722 = trunc i8 %2721 to i1, !dbg !1546
  %2723 = load i32, i32* @x.19
  %2724 = load i32, i32* @y.20
  %2725 = sub i32 %2723, 1
  %2726 = mul i32 %2723, %2725
  %2727 = urem i32 %2726, 2
  %2728 = icmp eq i32 %2727, 0
  %2729 = icmp slt i32 %2724, 10
  %2730 = or i1 %2728, %2729
  br i1 %2730, label %originalBBpart2742, label %originalBB740alteredBB

originalBBpart2742:                               ; preds = %originalBB740
  br i1 %2722, label %2731, label %2767, !dbg !1547

2731:                                             ; preds = %originalBBpart2742
  %2732 = load i32, i32* @x.19
  %2733 = load i32, i32* @y.20
  %2734 = sub i32 %2732, 1
  %2735 = mul i32 %2732, %2734
  %2736 = urem i32 %2735, 2
  %2737 = icmp eq i32 %2736, 0
  %2738 = icmp slt i32 %2733, 10
  %2739 = or i1 %2737, %2738
  br i1 %2739, label %originalBB744, label %originalBB744alteredBB

originalBB744:                                    ; preds = %2731, %originalBB744alteredBB
  %2740 = load i64, i64* %32, align 8, !dbg !1548
  %2741 = icmp ne i64 %2740, 0, !dbg !1548
  %2742 = load i32, i32* @x.19
  %2743 = load i32, i32* @y.20
  %2744 = sub i32 %2742, 1
  %2745 = mul i32 %2742, %2744
  %2746 = urem i32 %2745, 2
  %2747 = icmp eq i32 %2746, 0
  %2748 = icmp slt i32 %2743, 10
  %2749 = or i1 %2747, %2748
  br i1 %2749, label %originalBBpart2746, label %originalBB744alteredBB

originalBBpart2746:                               ; preds = %originalBB744
  br i1 %2741, label %2750, label %2767, !dbg !1549

2750:                                             ; preds = %originalBBpart2746
  %2751 = load i32, i32* @x.19
  %2752 = load i32, i32* @y.20
  %2753 = sub i32 %2751, 1
  %2754 = mul i32 %2751, %2753
  %2755 = urem i32 %2754, 2
  %2756 = icmp eq i32 %2755, 0
  %2757 = icmp slt i32 %2752, 10
  %2758 = or i1 %2756, %2757
  br i1 %2758, label %originalBB748, label %originalBB748alteredBB

originalBB748:                                    ; preds = %2750, %originalBB748alteredBB
  %2759 = load i32, i32* @x.19
  %2760 = load i32, i32* @y.20
  %2761 = sub i32 %2759, 1
  %2762 = mul i32 %2759, %2761
  %2763 = urem i32 %2762, 2
  %2764 = icmp eq i32 %2763, 0
  %2765 = icmp slt i32 %2760, 10
  %2766 = or i1 %2764, %2765
  br i1 %2766, label %originalBBpart2750, label %originalBB748alteredBB

originalBBpart2750:                               ; preds = %originalBB748
  br label %6070, !dbg !1550

2767:                                             ; preds = %originalBBpart2746, %originalBBpart2742, %originalBBpart2738
  %2768 = load i32, i32* @x.19
  %2769 = load i32, i32* @y.20
  %2770 = sub i32 %2768, 1
  %2771 = mul i32 %2768, %2770
  %2772 = urem i32 %2771, 2
  %2773 = icmp eq i32 %2772, 0
  %2774 = icmp slt i32 %2769, 10
  %2775 = or i1 %2773, %2774
  br i1 %2775, label %originalBB752, label %originalBB752alteredBB

originalBB752:                                    ; preds = %2767, %originalBB752alteredBB
  %2776 = load i32, i32* @x.19
  %2777 = load i32, i32* @y.20
  %2778 = sub i32 %2776, 1
  %2779 = mul i32 %2776, %2778
  %2780 = urem i32 %2779, 2
  %2781 = icmp eq i32 %2780, 0
  %2782 = icmp slt i32 %2777, 10
  %2783 = or i1 %2781, %2782
  br i1 %2783, label %originalBBpart2754, label %originalBB752alteredBB

originalBBpart2754:                               ; preds = %originalBB752
  br label %2784, !dbg !1548

2784:                                             ; preds = %originalBBpart2754, %originalBBpart2714, %originalBBpart2710, %originalBBpart2706
  call void @llvm.dbg.label(metadata !1551), !dbg !1552
  %2785 = load i32, i32* @x.19
  %2786 = load i32, i32* @y.20
  %2787 = sub i32 %2785, 1
  %2788 = mul i32 %2785, %2787
  %2789 = urem i32 %2788, 2
  %2790 = icmp eq i32 %2789, 0
  %2791 = icmp slt i32 %2786, 10
  %2792 = or i1 %2790, %2791
  br i1 %2792, label %originalBB756, label %originalBB756alteredBB

originalBB756:                                    ; preds = %2784, %originalBB756alteredBB
  %2793 = load i32, i32* %23, align 4, !dbg !1553
  %2794 = icmp eq i32 %2793, 2, !dbg !1555
  %2795 = load i32, i32* @x.19
  %2796 = load i32, i32* @y.20
  %2797 = sub i32 %2795, 1
  %2798 = mul i32 %2795, %2797
  %2799 = urem i32 %2798, 2
  %2800 = icmp eq i32 %2799, 0
  %2801 = icmp slt i32 %2796, 10
  %2802 = or i1 %2800, %2801
  br i1 %2802, label %originalBBpart2758, label %originalBB756alteredBB

originalBBpart2758:                               ; preds = %originalBB756
  br i1 %2794, label %2803, label %2839, !dbg !1556

2803:                                             ; preds = %originalBBpart2758
  %2804 = load i32, i32* @x.19
  %2805 = load i32, i32* @y.20
  %2806 = sub i32 %2804, 1
  %2807 = mul i32 %2804, %2806
  %2808 = urem i32 %2807, 2
  %2809 = icmp eq i32 %2808, 0
  %2810 = icmp slt i32 %2805, 10
  %2811 = or i1 %2809, %2810
  br i1 %2811, label %originalBB760, label %originalBB760alteredBB

originalBB760:                                    ; preds = %2803, %originalBB760alteredBB
  %2812 = load i8, i8* %35, align 1, !dbg !1557
  %2813 = trunc i8 %2812 to i1, !dbg !1557
  %2814 = load i32, i32* @x.19
  %2815 = load i32, i32* @y.20
  %2816 = sub i32 %2814, 1
  %2817 = mul i32 %2814, %2816
  %2818 = urem i32 %2817, 2
  %2819 = icmp eq i32 %2818, 0
  %2820 = icmp slt i32 %2815, 10
  %2821 = or i1 %2819, %2820
  br i1 %2821, label %originalBBpart2762, label %originalBB760alteredBB

originalBBpart2762:                               ; preds = %originalBB760
  br i1 %2813, label %2822, label %2839, !dbg !1558

2822:                                             ; preds = %originalBBpart2762
  %2823 = load i32, i32* @x.19
  %2824 = load i32, i32* @y.20
  %2825 = sub i32 %2823, 1
  %2826 = mul i32 %2823, %2825
  %2827 = urem i32 %2826, 2
  %2828 = icmp eq i32 %2827, 0
  %2829 = icmp slt i32 %2824, 10
  %2830 = or i1 %2828, %2829
  br i1 %2830, label %originalBB764, label %originalBB764alteredBB

originalBB764:                                    ; preds = %2822, %originalBB764alteredBB
  %2831 = load i32, i32* @x.19
  %2832 = load i32, i32* @y.20
  %2833 = sub i32 %2831, 1
  %2834 = mul i32 %2831, %2833
  %2835 = urem i32 %2834, 2
  %2836 = icmp eq i32 %2835, 0
  %2837 = icmp slt i32 %2832, 10
  %2838 = or i1 %2836, %2837
  br i1 %2838, label %originalBBpart2766, label %originalBB764alteredBB

originalBBpart2766:                               ; preds = %originalBB764
  br label %6990, !dbg !1559

2839:                                             ; preds = %originalBBpart2762, %originalBBpart2758
  %2840 = load i32, i32* @x.19
  %2841 = load i32, i32* @y.20
  %2842 = sub i32 %2840, 1
  %2843 = mul i32 %2840, %2842
  %2844 = urem i32 %2843, 2
  %2845 = icmp eq i32 %2844, 0
  %2846 = icmp slt i32 %2841, 10
  %2847 = or i1 %2845, %2846
  br i1 %2847, label %originalBB768, label %originalBB768alteredBB

originalBB768:                                    ; preds = %2839, %originalBB768alteredBB
  %2848 = load i32, i32* @x.19
  %2849 = load i32, i32* @y.20
  %2850 = sub i32 %2848, 1
  %2851 = mul i32 %2848, %2850
  %2852 = urem i32 %2851, 2
  %2853 = icmp eq i32 %2852, 0
  %2854 = icmp slt i32 %2849, 10
  %2855 = or i1 %2853, %2854
  br i1 %2855, label %originalBBpart2770, label %originalBB768alteredBB

originalBBpart2770:                               ; preds = %originalBB768
  br label %2856, !dbg !1557

2856:                                             ; preds = %originalBBpart2770, %originalBBpart2718, %originalBBpart2702, %originalBBpart2698, %originalBBpart2694
  call void @llvm.dbg.label(metadata !1560), !dbg !1561
  %2857 = load i32, i32* @x.19
  %2858 = load i32, i32* @y.20
  %2859 = sub i32 %2857, 1
  %2860 = mul i32 %2857, %2859
  %2861 = urem i32 %2860, 2
  %2862 = icmp eq i32 %2861, 0
  %2863 = icmp slt i32 %2858, 10
  %2864 = or i1 %2862, %2863
  br i1 %2864, label %originalBB772, label %originalBB772alteredBB

originalBB772:                                    ; preds = %2856, %originalBB772alteredBB
  %2865 = load i8, i8* %33, align 1, !dbg !1562
  %2866 = trunc i8 %2865 to i1, !dbg !1562
  %2867 = load i32, i32* @x.19
  %2868 = load i32, i32* @y.20
  %2869 = sub i32 %2867, 1
  %2870 = mul i32 %2867, %2869
  %2871 = urem i32 %2870, 2
  %2872 = icmp eq i32 %2871, 0
  %2873 = icmp slt i32 %2868, 10
  %2874 = or i1 %2872, %2873
  br i1 %2874, label %originalBBpart2774, label %originalBB772alteredBB

originalBBpart2774:                               ; preds = %originalBB772
  br i1 %2866, label %2875, label %2893, !dbg !1564

2875:                                             ; preds = %originalBBpart2774
  %2876 = load i32, i32* @x.19
  %2877 = load i32, i32* @y.20
  %2878 = sub i32 %2876, 1
  %2879 = mul i32 %2876, %2878
  %2880 = urem i32 %2879, 2
  %2881 = icmp eq i32 %2880, 0
  %2882 = icmp slt i32 %2877, 10
  %2883 = or i1 %2881, %2882
  br i1 %2883, label %originalBB776, label %originalBB776alteredBB

originalBB776:                                    ; preds = %2875, %originalBB776alteredBB
  %2884 = load i8, i8* %40, align 1, !dbg !1565
  store i8 %2884, i8* %39, align 1, !dbg !1567
  %2885 = load i32, i32* @x.19
  %2886 = load i32, i32* @y.20
  %2887 = sub i32 %2885, 1
  %2888 = mul i32 %2885, %2887
  %2889 = urem i32 %2888, 2
  %2890 = icmp eq i32 %2889, 0
  %2891 = icmp slt i32 %2886, 10
  %2892 = or i1 %2890, %2891
  br i1 %2892, label %originalBBpart2778, label %originalBB776alteredBB

originalBBpart2778:                               ; preds = %originalBB776
  br label %5624, !dbg !1568

2893:                                             ; preds = %originalBBpart2774
  %2894 = load i32, i32* @x.19
  %2895 = load i32, i32* @y.20
  %2896 = sub i32 %2894, 1
  %2897 = mul i32 %2894, %2896
  %2898 = urem i32 %2897, 2
  %2899 = icmp eq i32 %2898, 0
  %2900 = icmp slt i32 %2895, 10
  %2901 = or i1 %2899, %2900
  br i1 %2901, label %originalBB780, label %originalBB780alteredBB

originalBB780:                                    ; preds = %2893, %originalBB780alteredBB
  %2902 = load i32, i32* @x.19
  %2903 = load i32, i32* @y.20
  %2904 = sub i32 %2902, 1
  %2905 = mul i32 %2902, %2904
  %2906 = urem i32 %2905, 2
  %2907 = icmp eq i32 %2906, 0
  %2908 = icmp slt i32 %2903, 10
  %2909 = or i1 %2907, %2908
  br i1 %2909, label %originalBBpart2782, label %originalBB780alteredBB

originalBBpart2782:                               ; preds = %originalBB780
  br label %5465, !dbg !1569

2910:                                             ; preds = %originalBBpart2269, %originalBBpart2269
  %2911 = load i32, i32* @x.19
  %2912 = load i32, i32* @y.20
  %2913 = sub i32 %2911, 1
  %2914 = mul i32 %2911, %2913
  %2915 = urem i32 %2914, 2
  %2916 = icmp eq i32 %2915, 0
  %2917 = icmp slt i32 %2912, 10
  %2918 = or i1 %2916, %2917
  br i1 %2918, label %originalBB784, label %originalBB784alteredBB

originalBB784:                                    ; preds = %2910, %originalBB784alteredBB
  %2919 = load i64, i64* %22, align 8, !dbg !1570
  %2920 = icmp eq i64 %2919, -1, !dbg !1572
  %2921 = load i32, i32* @x.19
  %2922 = load i32, i32* @y.20
  %2923 = sub i32 %2921, 1
  %2924 = mul i32 %2921, %2923
  %2925 = urem i32 %2924, 2
  %2926 = icmp eq i32 %2925, 0
  %2927 = icmp slt i32 %2922, 10
  %2928 = or i1 %2926, %2927
  br i1 %2928, label %originalBBpart2786, label %originalBB784alteredBB

originalBBpart2786:                               ; preds = %originalBB784
  br i1 %2920, label %2929, label %2951, !dbg !1573

2929:                                             ; preds = %originalBBpart2786
  %2930 = load i32, i32* @x.19
  %2931 = load i32, i32* @y.20
  %2932 = sub i32 %2930, 1
  %2933 = mul i32 %2930, %2932
  %2934 = urem i32 %2933, 2
  %2935 = icmp eq i32 %2934, 0
  %2936 = icmp slt i32 %2931, 10
  %2937 = or i1 %2935, %2936
  br i1 %2937, label %originalBB788, label %originalBB788alteredBB

originalBB788:                                    ; preds = %2929, %originalBB788alteredBB
  %2938 = load i8*, i8** %21, align 8, !dbg !1574
  %2939 = getelementptr inbounds i8, i8* %2938, i64 1, !dbg !1574
  %2940 = load i8, i8* %2939, align 1, !dbg !1574
  %2941 = sext i8 %2940 to i32, !dbg !1574
  %2942 = icmp eq i32 %2941, 0, !dbg !1575
  %2943 = load i32, i32* @x.19
  %2944 = load i32, i32* @y.20
  %2945 = sub i32 %2943, 1
  %2946 = mul i32 %2943, %2945
  %2947 = urem i32 %2946, 2
  %2948 = icmp eq i32 %2947, 0
  %2949 = icmp slt i32 %2944, 10
  %2950 = or i1 %2948, %2949
  br i1 %2950, label %originalBBpart2790, label %originalBB788alteredBB

originalBBpart2790:                               ; preds = %originalBB788
  br i1 %2942, label %2987, label %2970, !dbg !1570

2951:                                             ; preds = %originalBBpart2786
  %2952 = load i32, i32* @x.19
  %2953 = load i32, i32* @y.20
  %2954 = sub i32 %2952, 1
  %2955 = mul i32 %2952, %2954
  %2956 = urem i32 %2955, 2
  %2957 = icmp eq i32 %2956, 0
  %2958 = icmp slt i32 %2953, 10
  %2959 = or i1 %2957, %2958
  br i1 %2959, label %originalBB792, label %originalBB792alteredBB

originalBB792:                                    ; preds = %2951, %originalBB792alteredBB
  %2960 = load i64, i64* %22, align 8, !dbg !1576
  %2961 = icmp eq i64 %2960, 1, !dbg !1577
  %2962 = load i32, i32* @x.19
  %2963 = load i32, i32* @y.20
  %2964 = sub i32 %2962, 1
  %2965 = mul i32 %2962, %2964
  %2966 = urem i32 %2965, 2
  %2967 = icmp eq i32 %2966, 0
  %2968 = icmp slt i32 %2963, 10
  %2969 = or i1 %2967, %2968
  br i1 %2969, label %originalBBpart2794, label %originalBB792alteredBB

originalBBpart2794:                               ; preds = %originalBB792
  br i1 %2961, label %2987, label %2970, !dbg !1573

2970:                                             ; preds = %originalBBpart2794, %originalBBpart2790
  %2971 = load i32, i32* @x.19
  %2972 = load i32, i32* @y.20
  %2973 = sub i32 %2971, 1
  %2974 = mul i32 %2971, %2973
  %2975 = urem i32 %2974, 2
  %2976 = icmp eq i32 %2975, 0
  %2977 = icmp slt i32 %2972, 10
  %2978 = or i1 %2976, %2977
  br i1 %2978, label %originalBB796, label %originalBB796alteredBB

originalBB796:                                    ; preds = %2970, %originalBB796alteredBB
  %2979 = load i32, i32* @x.19
  %2980 = load i32, i32* @y.20
  %2981 = sub i32 %2979, 1
  %2982 = mul i32 %2979, %2981
  %2983 = urem i32 %2982, 2
  %2984 = icmp eq i32 %2983, 0
  %2985 = icmp slt i32 %2980, 10
  %2986 = or i1 %2984, %2985
  br i1 %2986, label %originalBBpart2798, label %originalBB796alteredBB

originalBBpart2798:                               ; preds = %originalBB796
  br label %5465, !dbg !1578

2987:                                             ; preds = %originalBBpart2794, %originalBBpart2790
  %2988 = load i32, i32* @x.19
  %2989 = load i32, i32* @y.20
  %2990 = sub i32 %2988, 1
  %2991 = mul i32 %2988, %2990
  %2992 = urem i32 %2991, 2
  %2993 = icmp eq i32 %2992, 0
  %2994 = icmp slt i32 %2989, 10
  %2995 = or i1 %2993, %2994
  br i1 %2995, label %originalBB800, label %originalBB800alteredBB

originalBB800:                                    ; preds = %2987, %originalBB800alteredBB
  %2996 = load i32, i32* @x.19
  %2997 = load i32, i32* @y.20
  %2998 = sub i32 %2996, 1
  %2999 = mul i32 %2996, %2998
  %3000 = urem i32 %2999, 2
  %3001 = icmp eq i32 %3000, 0
  %3002 = icmp slt i32 %2997, 10
  %3003 = or i1 %3001, %3002
  br i1 %3003, label %originalBBpart2802, label %originalBB800alteredBB

originalBBpart2802:                               ; preds = %originalBB800
  br label %3004, !dbg !1579

3004:                                             ; preds = %originalBBpart2802, %originalBBpart2269, %originalBBpart2269
  %3005 = load i32, i32* @x.19
  %3006 = load i32, i32* @y.20
  %3007 = sub i32 %3005, 1
  %3008 = mul i32 %3005, %3007
  %3009 = urem i32 %3008, 2
  %3010 = icmp eq i32 %3009, 0
  %3011 = icmp slt i32 %3006, 10
  %3012 = or i1 %3010, %3011
  br i1 %3012, label %originalBB804, label %originalBB804alteredBB

originalBB804:                                    ; preds = %3004, %originalBB804alteredBB
  %3013 = load i64, i64* %28, align 8, !dbg !1580
  %3014 = icmp ne i64 %3013, 0, !dbg !1582
  %3015 = load i32, i32* @x.19
  %3016 = load i32, i32* @y.20
  %3017 = sub i32 %3015, 1
  %3018 = mul i32 %3015, %3017
  %3019 = urem i32 %3018, 2
  %3020 = icmp eq i32 %3019, 0
  %3021 = icmp slt i32 %3016, 10
  %3022 = or i1 %3020, %3021
  br i1 %3022, label %originalBBpart2806, label %originalBB804alteredBB

originalBBpart2806:                               ; preds = %originalBB804
  br i1 %3014, label %3023, label %3040, !dbg !1583

3023:                                             ; preds = %originalBBpart2806
  %3024 = load i32, i32* @x.19
  %3025 = load i32, i32* @y.20
  %3026 = sub i32 %3024, 1
  %3027 = mul i32 %3024, %3026
  %3028 = urem i32 %3027, 2
  %3029 = icmp eq i32 %3028, 0
  %3030 = icmp slt i32 %3025, 10
  %3031 = or i1 %3029, %3030
  br i1 %3031, label %originalBB808, label %originalBB808alteredBB

originalBB808:                                    ; preds = %3023, %originalBB808alteredBB
  %3032 = load i32, i32* @x.19
  %3033 = load i32, i32* @y.20
  %3034 = sub i32 %3032, 1
  %3035 = mul i32 %3032, %3034
  %3036 = urem i32 %3035, 2
  %3037 = icmp eq i32 %3036, 0
  %3038 = icmp slt i32 %3033, 10
  %3039 = or i1 %3037, %3038
  br i1 %3039, label %originalBBpart2810, label %originalBB808alteredBB

originalBBpart2810:                               ; preds = %originalBB808
  br label %5465, !dbg !1584

3040:                                             ; preds = %originalBBpart2806
  %3041 = load i32, i32* @x.19
  %3042 = load i32, i32* @y.20
  %3043 = sub i32 %3041, 1
  %3044 = mul i32 %3041, %3043
  %3045 = urem i32 %3044, 2
  %3046 = icmp eq i32 %3045, 0
  %3047 = icmp slt i32 %3042, 10
  %3048 = or i1 %3046, %3047
  br i1 %3048, label %originalBB812, label %originalBB812alteredBB

originalBB812:                                    ; preds = %3040, %originalBB812alteredBB
  %3049 = load i32, i32* @x.19
  %3050 = load i32, i32* @y.20
  %3051 = sub i32 %3049, 1
  %3052 = mul i32 %3049, %3051
  %3053 = urem i32 %3052, 2
  %3054 = icmp eq i32 %3053, 0
  %3055 = icmp slt i32 %3050, 10
  %3056 = or i1 %3054, %3055
  br i1 %3056, label %originalBBpart2814, label %originalBB812alteredBB

originalBBpart2814:                               ; preds = %originalBB812
  br label %3057, !dbg !1585

3057:                                             ; preds = %originalBBpart2814, %originalBBpart2269
  %3058 = load i32, i32* @x.19
  %3059 = load i32, i32* @y.20
  %3060 = sub i32 %3058, 1
  %3061 = mul i32 %3058, %3060
  %3062 = urem i32 %3061, 2
  %3063 = icmp eq i32 %3062, 0
  %3064 = icmp slt i32 %3059, 10
  %3065 = or i1 %3063, %3064
  br i1 %3065, label %originalBB816, label %originalBB816alteredBB

originalBB816:                                    ; preds = %3057, %originalBB816alteredBB
  store i8 1, i8* %43, align 1, !dbg !1586
  %3066 = load i32, i32* @x.19
  %3067 = load i32, i32* @y.20
  %3068 = sub i32 %3066, 1
  %3069 = mul i32 %3066, %3068
  %3070 = urem i32 %3069, 2
  %3071 = icmp eq i32 %3070, 0
  %3072 = icmp slt i32 %3067, 10
  %3073 = or i1 %3071, %3072
  br i1 %3073, label %originalBBpart2818, label %originalBB816alteredBB

originalBBpart2818:                               ; preds = %originalBB816
  br label %3074, !dbg !1587

3074:                                             ; preds = %originalBBpart2818, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269
  %3075 = load i32, i32* @x.19
  %3076 = load i32, i32* @y.20
  %3077 = sub i32 %3075, 1
  %3078 = mul i32 %3075, %3077
  %3079 = urem i32 %3078, 2
  %3080 = icmp eq i32 %3079, 0
  %3081 = icmp slt i32 %3076, 10
  %3082 = or i1 %3080, %3081
  br i1 %3082, label %originalBB820, label %originalBB820alteredBB

originalBB820:                                    ; preds = %3074, %originalBB820alteredBB
  %3083 = load i32, i32* %23, align 4, !dbg !1588
  %3084 = icmp eq i32 %3083, 2, !dbg !1590
  %3085 = load i32, i32* @x.19
  %3086 = load i32, i32* @y.20
  %3087 = sub i32 %3085, 1
  %3088 = mul i32 %3085, %3087
  %3089 = urem i32 %3088, 2
  %3090 = icmp eq i32 %3089, 0
  %3091 = icmp slt i32 %3086, 10
  %3092 = or i1 %3090, %3091
  br i1 %3092, label %originalBBpart2822, label %originalBB820alteredBB

originalBBpart2822:                               ; preds = %originalBB820
  br i1 %3084, label %3093, label %3129, !dbg !1591

3093:                                             ; preds = %originalBBpart2822
  %3094 = load i32, i32* @x.19
  %3095 = load i32, i32* @y.20
  %3096 = sub i32 %3094, 1
  %3097 = mul i32 %3094, %3096
  %3098 = urem i32 %3097, 2
  %3099 = icmp eq i32 %3098, 0
  %3100 = icmp slt i32 %3095, 10
  %3101 = or i1 %3099, %3100
  br i1 %3101, label %originalBB824, label %originalBB824alteredBB

originalBB824:                                    ; preds = %3093, %originalBB824alteredBB
  %3102 = load i8, i8* %35, align 1, !dbg !1592
  %3103 = trunc i8 %3102 to i1, !dbg !1592
  %3104 = load i32, i32* @x.19
  %3105 = load i32, i32* @y.20
  %3106 = sub i32 %3104, 1
  %3107 = mul i32 %3104, %3106
  %3108 = urem i32 %3107, 2
  %3109 = icmp eq i32 %3108, 0
  %3110 = icmp slt i32 %3105, 10
  %3111 = or i1 %3109, %3110
  br i1 %3111, label %originalBBpart2826, label %originalBB824alteredBB

originalBBpart2826:                               ; preds = %originalBB824
  br i1 %3103, label %3112, label %3129, !dbg !1593

3112:                                             ; preds = %originalBBpart2826
  %3113 = load i32, i32* @x.19
  %3114 = load i32, i32* @y.20
  %3115 = sub i32 %3113, 1
  %3116 = mul i32 %3113, %3115
  %3117 = urem i32 %3116, 2
  %3118 = icmp eq i32 %3117, 0
  %3119 = icmp slt i32 %3114, 10
  %3120 = or i1 %3118, %3119
  br i1 %3120, label %originalBB828, label %originalBB828alteredBB

originalBB828:                                    ; preds = %3112, %originalBB828alteredBB
  %3121 = load i32, i32* @x.19
  %3122 = load i32, i32* @y.20
  %3123 = sub i32 %3121, 1
  %3124 = mul i32 %3121, %3123
  %3125 = urem i32 %3124, 2
  %3126 = icmp eq i32 %3125, 0
  %3127 = icmp slt i32 %3122, 10
  %3128 = or i1 %3126, %3127
  br i1 %3128, label %originalBBpart2830, label %originalBB828alteredBB

originalBBpart2830:                               ; preds = %originalBB828
  br label %6990, !dbg !1594

3129:                                             ; preds = %originalBBpart2826, %originalBBpart2822
  %3130 = load i32, i32* @x.19
  %3131 = load i32, i32* @y.20
  %3132 = sub i32 %3130, 1
  %3133 = mul i32 %3130, %3132
  %3134 = urem i32 %3133, 2
  %3135 = icmp eq i32 %3134, 0
  %3136 = icmp slt i32 %3131, 10
  %3137 = or i1 %3135, %3136
  br i1 %3137, label %originalBB832, label %originalBB832alteredBB

originalBB832:                                    ; preds = %3129, %originalBB832alteredBB
  %3138 = load i32, i32* @x.19
  %3139 = load i32, i32* @y.20
  %3140 = sub i32 %3138, 1
  %3141 = mul i32 %3138, %3140
  %3142 = urem i32 %3141, 2
  %3143 = icmp eq i32 %3142, 0
  %3144 = icmp slt i32 %3139, 10
  %3145 = or i1 %3143, %3144
  br i1 %3145, label %originalBBpart2834, label %originalBB832alteredBB

originalBBpart2834:                               ; preds = %originalBB832
  br label %5465, !dbg !1595

3146:                                             ; preds = %originalBBpart2269
  %3147 = load i32, i32* @x.19
  %3148 = load i32, i32* @y.20
  %3149 = sub i32 %3147, 1
  %3150 = mul i32 %3147, %3149
  %3151 = urem i32 %3150, 2
  %3152 = icmp eq i32 %3151, 0
  %3153 = icmp slt i32 %3148, 10
  %3154 = or i1 %3152, %3153
  br i1 %3154, label %originalBB836, label %originalBB836alteredBB

originalBB836:                                    ; preds = %3146, %originalBB836alteredBB
  store i8 1, i8* %37, align 1, !dbg !1596
  store i8 1, i8* %43, align 1, !dbg !1597
  %3155 = load i32, i32* %23, align 4, !dbg !1598
  %3156 = icmp eq i32 %3155, 2, !dbg !1600
  %3157 = load i32, i32* @x.19
  %3158 = load i32, i32* @y.20
  %3159 = sub i32 %3157, 1
  %3160 = mul i32 %3157, %3159
  %3161 = urem i32 %3160, 2
  %3162 = icmp eq i32 %3161, 0
  %3163 = icmp slt i32 %3158, 10
  %3164 = or i1 %3162, %3163
  br i1 %3164, label %originalBBpart2838, label %originalBB836alteredBB

originalBBpart2838:                               ; preds = %originalBB836
  br i1 %3156, label %3165, label %3502, !dbg !1601

3165:                                             ; preds = %originalBBpart2838
  %3166 = load i32, i32* @x.19
  %3167 = load i32, i32* @y.20
  %3168 = sub i32 %3166, 1
  %3169 = mul i32 %3166, %3168
  %3170 = urem i32 %3169, 2
  %3171 = icmp eq i32 %3170, 0
  %3172 = icmp slt i32 %3167, 10
  %3173 = or i1 %3171, %3172
  br i1 %3173, label %originalBB840, label %originalBB840alteredBB

originalBB840:                                    ; preds = %3165, %originalBB840alteredBB
  %3174 = load i8, i8* %35, align 1, !dbg !1602
  %3175 = trunc i8 %3174 to i1, !dbg !1602
  %3176 = load i32, i32* @x.19
  %3177 = load i32, i32* @y.20
  %3178 = sub i32 %3176, 1
  %3179 = mul i32 %3176, %3178
  %3180 = urem i32 %3179, 2
  %3181 = icmp eq i32 %3180, 0
  %3182 = icmp slt i32 %3177, 10
  %3183 = or i1 %3181, %3182
  br i1 %3183, label %originalBBpart2842, label %originalBB840alteredBB

originalBBpart2842:                               ; preds = %originalBB840
  br i1 %3175, label %3184, label %3201, !dbg !1605

3184:                                             ; preds = %originalBBpart2842
  %3185 = load i32, i32* @x.19
  %3186 = load i32, i32* @y.20
  %3187 = sub i32 %3185, 1
  %3188 = mul i32 %3185, %3187
  %3189 = urem i32 %3188, 2
  %3190 = icmp eq i32 %3189, 0
  %3191 = icmp slt i32 %3186, 10
  %3192 = or i1 %3190, %3191
  br i1 %3192, label %originalBB844, label %originalBB844alteredBB

originalBB844:                                    ; preds = %3184, %originalBB844alteredBB
  %3193 = load i32, i32* @x.19
  %3194 = load i32, i32* @y.20
  %3195 = sub i32 %3193, 1
  %3196 = mul i32 %3193, %3195
  %3197 = urem i32 %3196, 2
  %3198 = icmp eq i32 %3197, 0
  %3199 = icmp slt i32 %3194, 10
  %3200 = or i1 %3198, %3199
  br i1 %3200, label %originalBBpart2846, label %originalBB844alteredBB

originalBBpart2846:                               ; preds = %originalBB844
  br label %6990, !dbg !1606

3201:                                             ; preds = %originalBBpart2842
  %3202 = load i32, i32* @x.19
  %3203 = load i32, i32* @y.20
  %3204 = sub i32 %3202, 1
  %3205 = mul i32 %3202, %3204
  %3206 = urem i32 %3205, 2
  %3207 = icmp eq i32 %3206, 0
  %3208 = icmp slt i32 %3203, 10
  %3209 = or i1 %3207, %3208
  br i1 %3209, label %originalBB848, label %originalBB848alteredBB

originalBB848:                                    ; preds = %3201, %originalBB848alteredBB
  %3210 = load i64, i64* %20, align 8, !dbg !1607
  %3211 = icmp ne i64 %3210, 0, !dbg !1607
  %3212 = load i32, i32* @x.19
  %3213 = load i32, i32* @y.20
  %3214 = sub i32 %3212, 1
  %3215 = mul i32 %3212, %3214
  %3216 = urem i32 %3215, 2
  %3217 = icmp eq i32 %3216, 0
  %3218 = icmp slt i32 %3213, 10
  %3219 = or i1 %3217, %3218
  br i1 %3219, label %originalBBpart2850, label %originalBB848alteredBB

originalBBpart2850:                               ; preds = %originalBB848
  br i1 %3211, label %3220, label %3257, !dbg !1609

3220:                                             ; preds = %originalBBpart2850
  %3221 = load i32, i32* @x.19
  %3222 = load i32, i32* @y.20
  %3223 = sub i32 %3221, 1
  %3224 = mul i32 %3221, %3223
  %3225 = urem i32 %3224, 2
  %3226 = icmp eq i32 %3225, 0
  %3227 = icmp slt i32 %3222, 10
  %3228 = or i1 %3226, %3227
  br i1 %3228, label %originalBB852, label %originalBB852alteredBB

originalBB852:                                    ; preds = %3220, %originalBB852alteredBB
  %3229 = load i64, i64* %30, align 8, !dbg !1610
  %3230 = icmp ne i64 %3229, 0, !dbg !1610
  %3231 = load i32, i32* @x.19
  %3232 = load i32, i32* @y.20
  %3233 = sub i32 %3231, 1
  %3234 = mul i32 %3231, %3233
  %3235 = urem i32 %3234, 2
  %3236 = icmp eq i32 %3235, 0
  %3237 = icmp slt i32 %3232, 10
  %3238 = or i1 %3236, %3237
  br i1 %3238, label %originalBBpart2854, label %originalBB852alteredBB

originalBBpart2854:                               ; preds = %originalBB852
  br i1 %3230, label %3257, label %3239, !dbg !1611

3239:                                             ; preds = %originalBBpart2854
  %3240 = load i32, i32* @x.19
  %3241 = load i32, i32* @y.20
  %3242 = sub i32 %3240, 1
  %3243 = mul i32 %3240, %3242
  %3244 = urem i32 %3243, 2
  %3245 = icmp eq i32 %3244, 0
  %3246 = icmp slt i32 %3241, 10
  %3247 = or i1 %3245, %3246
  br i1 %3247, label %originalBB856, label %originalBB856alteredBB

originalBB856:                                    ; preds = %3239, %originalBB856alteredBB
  %3248 = load i64, i64* %20, align 8, !dbg !1612
  store i64 %3248, i64* %30, align 8, !dbg !1614
  store i64 0, i64* %20, align 8, !dbg !1615
  %3249 = load i32, i32* @x.19
  %3250 = load i32, i32* @y.20
  %3251 = sub i32 %3249, 1
  %3252 = mul i32 %3249, %3251
  %3253 = urem i32 %3252, 2
  %3254 = icmp eq i32 %3253, 0
  %3255 = icmp slt i32 %3250, 10
  %3256 = or i1 %3254, %3255
  br i1 %3256, label %originalBBpart2858, label %originalBB856alteredBB

originalBBpart2858:                               ; preds = %originalBB856
  br label %3257, !dbg !1616

3257:                                             ; preds = %originalBBpart2858, %originalBBpart2854, %originalBBpart2850
  %3258 = load i32, i32* @x.19
  %3259 = load i32, i32* @y.20
  %3260 = sub i32 %3258, 1
  %3261 = mul i32 %3258, %3260
  %3262 = urem i32 %3261, 2
  %3263 = icmp eq i32 %3262, 0
  %3264 = icmp slt i32 %3259, 10
  %3265 = or i1 %3263, %3264
  br i1 %3265, label %originalBB860, label %originalBB860alteredBB

originalBB860:                                    ; preds = %3257, %originalBB860alteredBB
  %3266 = load i32, i32* @x.19
  %3267 = load i32, i32* @y.20
  %3268 = sub i32 %3266, 1
  %3269 = mul i32 %3266, %3268
  %3270 = urem i32 %3269, 2
  %3271 = icmp eq i32 %3270, 0
  %3272 = icmp slt i32 %3267, 10
  %3273 = or i1 %3271, %3272
  br i1 %3273, label %originalBBpart2862, label %originalBB860alteredBB

originalBBpart2862:                               ; preds = %originalBB860
  br label %3274, !dbg !1617

3274:                                             ; preds = %originalBBpart2862
  %3275 = load i32, i32* @x.19
  %3276 = load i32, i32* @y.20
  %3277 = sub i32 %3275, 1
  %3278 = mul i32 %3275, %3277
  %3279 = urem i32 %3278, 2
  %3280 = icmp eq i32 %3279, 0
  %3281 = icmp slt i32 %3276, 10
  %3282 = or i1 %3280, %3281
  br i1 %3282, label %originalBB864, label %originalBB864alteredBB

originalBB864:                                    ; preds = %3274, %originalBB864alteredBB
  %3283 = load i64, i64* %29, align 8, !dbg !1618
  %3284 = load i64, i64* %20, align 8, !dbg !1618
  %3285 = icmp ult i64 %3283, %3284, !dbg !1618
  %3286 = load i32, i32* @x.19
  %3287 = load i32, i32* @y.20
  %3288 = sub i32 %3286, 1
  %3289 = mul i32 %3286, %3288
  %3290 = urem i32 %3289, 2
  %3291 = icmp eq i32 %3290, 0
  %3292 = icmp slt i32 %3287, 10
  %3293 = or i1 %3291, %3292
  br i1 %3293, label %originalBBpart2866, label %originalBB864alteredBB

originalBBpart2866:                               ; preds = %originalBB864
  br i1 %3285, label %3294, label %3314, !dbg !1621

3294:                                             ; preds = %originalBBpart2866
  %3295 = load i32, i32* @x.19
  %3296 = load i32, i32* @y.20
  %3297 = sub i32 %3295, 1
  %3298 = mul i32 %3295, %3297
  %3299 = urem i32 %3298, 2
  %3300 = icmp eq i32 %3299, 0
  %3301 = icmp slt i32 %3296, 10
  %3302 = or i1 %3300, %3301
  br i1 %3302, label %originalBB868, label %originalBB868alteredBB

originalBB868:                                    ; preds = %3294, %originalBB868alteredBB
  %3303 = load i8*, i8** %19, align 8, !dbg !1618
  %3304 = load i64, i64* %29, align 8, !dbg !1618
  %3305 = getelementptr inbounds i8, i8* %3303, i64 %3304, !dbg !1618
  store i8 39, i8* %3305, align 1, !dbg !1618
  %3306 = load i32, i32* @x.19
  %3307 = load i32, i32* @y.20
  %3308 = sub i32 %3306, 1
  %3309 = mul i32 %3306, %3308
  %3310 = urem i32 %3309, 2
  %3311 = icmp eq i32 %3310, 0
  %3312 = icmp slt i32 %3307, 10
  %3313 = or i1 %3311, %3312
  br i1 %3313, label %originalBBpart2870, label %originalBB868alteredBB

originalBBpart2870:                               ; preds = %originalBB868
  br label %3314, !dbg !1618

3314:                                             ; preds = %originalBBpart2870, %originalBBpart2866
  %3315 = load i32, i32* @x.19
  %3316 = load i32, i32* @y.20
  %3317 = sub i32 %3315, 1
  %3318 = mul i32 %3315, %3317
  %3319 = urem i32 %3318, 2
  %3320 = icmp eq i32 %3319, 0
  %3321 = icmp slt i32 %3316, 10
  %3322 = or i1 %3320, %3321
  br i1 %3322, label %originalBB872, label %originalBB872alteredBB

originalBB872:                                    ; preds = %3314, %originalBB872alteredBB
  %3323 = load i64, i64* %29, align 8, !dbg !1621
  %3324 = add i64 %3323, 1, !dbg !1621
  store i64 %3324, i64* %29, align 8, !dbg !1621
  %3325 = load i32, i32* @x.19
  %3326 = load i32, i32* @y.20
  %3327 = sub i32 %3325, 1
  %3328 = mul i32 %3325, %3327
  %3329 = urem i32 %3328, 2
  %3330 = icmp eq i32 %3329, 0
  %3331 = icmp slt i32 %3326, 10
  %3332 = or i1 %3330, %3331
  br i1 %3332, label %originalBBpart2888, label %originalBB872alteredBB

originalBBpart2888:                               ; preds = %originalBB872
  br label %3333, !dbg !1621

3333:                                             ; preds = %originalBBpart2888
  %3334 = load i32, i32* @x.19
  %3335 = load i32, i32* @y.20
  %3336 = sub i32 %3334, 1
  %3337 = mul i32 %3334, %3336
  %3338 = urem i32 %3337, 2
  %3339 = icmp eq i32 %3338, 0
  %3340 = icmp slt i32 %3335, 10
  %3341 = or i1 %3339, %3340
  br i1 %3341, label %originalBB890, label %originalBB890alteredBB

originalBB890:                                    ; preds = %3333, %originalBB890alteredBB
  %3342 = load i32, i32* @x.19
  %3343 = load i32, i32* @y.20
  %3344 = sub i32 %3342, 1
  %3345 = mul i32 %3342, %3344
  %3346 = urem i32 %3345, 2
  %3347 = icmp eq i32 %3346, 0
  %3348 = icmp slt i32 %3343, 10
  %3349 = or i1 %3347, %3348
  br i1 %3349, label %originalBBpart2892, label %originalBB890alteredBB

originalBBpart2892:                               ; preds = %originalBB890
  br label %3350, !dbg !1622

3350:                                             ; preds = %originalBBpart2892
  %3351 = load i32, i32* @x.19
  %3352 = load i32, i32* @y.20
  %3353 = sub i32 %3351, 1
  %3354 = mul i32 %3351, %3353
  %3355 = urem i32 %3354, 2
  %3356 = icmp eq i32 %3355, 0
  %3357 = icmp slt i32 %3352, 10
  %3358 = or i1 %3356, %3357
  br i1 %3358, label %originalBB894, label %originalBB894alteredBB

originalBB894:                                    ; preds = %3350, %originalBB894alteredBB
  %3359 = load i64, i64* %29, align 8, !dbg !1623
  %3360 = load i64, i64* %20, align 8, !dbg !1623
  %3361 = icmp ult i64 %3359, %3360, !dbg !1623
  %3362 = load i32, i32* @x.19
  %3363 = load i32, i32* @y.20
  %3364 = sub i32 %3362, 1
  %3365 = mul i32 %3362, %3364
  %3366 = urem i32 %3365, 2
  %3367 = icmp eq i32 %3366, 0
  %3368 = icmp slt i32 %3363, 10
  %3369 = or i1 %3367, %3368
  br i1 %3369, label %originalBBpart2896, label %originalBB894alteredBB

originalBBpart2896:                               ; preds = %originalBB894
  br i1 %3361, label %3370, label %3390, !dbg !1626

3370:                                             ; preds = %originalBBpart2896
  %3371 = load i32, i32* @x.19
  %3372 = load i32, i32* @y.20
  %3373 = sub i32 %3371, 1
  %3374 = mul i32 %3371, %3373
  %3375 = urem i32 %3374, 2
  %3376 = icmp eq i32 %3375, 0
  %3377 = icmp slt i32 %3372, 10
  %3378 = or i1 %3376, %3377
  br i1 %3378, label %originalBB898, label %originalBB898alteredBB

originalBB898:                                    ; preds = %3370, %originalBB898alteredBB
  %3379 = load i8*, i8** %19, align 8, !dbg !1623
  %3380 = load i64, i64* %29, align 8, !dbg !1623
  %3381 = getelementptr inbounds i8, i8* %3379, i64 %3380, !dbg !1623
  store i8 92, i8* %3381, align 1, !dbg !1623
  %3382 = load i32, i32* @x.19
  %3383 = load i32, i32* @y.20
  %3384 = sub i32 %3382, 1
  %3385 = mul i32 %3382, %3384
  %3386 = urem i32 %3385, 2
  %3387 = icmp eq i32 %3386, 0
  %3388 = icmp slt i32 %3383, 10
  %3389 = or i1 %3387, %3388
  br i1 %3389, label %originalBBpart2900, label %originalBB898alteredBB

originalBBpart2900:                               ; preds = %originalBB898
  br label %3390, !dbg !1623

3390:                                             ; preds = %originalBBpart2900, %originalBBpart2896
  %3391 = load i32, i32* @x.19
  %3392 = load i32, i32* @y.20
  %3393 = sub i32 %3391, 1
  %3394 = mul i32 %3391, %3393
  %3395 = urem i32 %3394, 2
  %3396 = icmp eq i32 %3395, 0
  %3397 = icmp slt i32 %3392, 10
  %3398 = or i1 %3396, %3397
  br i1 %3398, label %originalBB902, label %originalBB902alteredBB

originalBB902:                                    ; preds = %3390, %originalBB902alteredBB
  %3399 = load i64, i64* %29, align 8, !dbg !1626
  %3400 = add i64 %3399, 1, !dbg !1626
  store i64 %3400, i64* %29, align 8, !dbg !1626
  %3401 = load i32, i32* @x.19
  %3402 = load i32, i32* @y.20
  %3403 = sub i32 %3401, 1
  %3404 = mul i32 %3401, %3403
  %3405 = urem i32 %3404, 2
  %3406 = icmp eq i32 %3405, 0
  %3407 = icmp slt i32 %3402, 10
  %3408 = or i1 %3406, %3407
  br i1 %3408, label %originalBBpart2904, label %originalBB902alteredBB

originalBBpart2904:                               ; preds = %originalBB902
  br label %3409, !dbg !1626

3409:                                             ; preds = %originalBBpart2904
  %3410 = load i32, i32* @x.19
  %3411 = load i32, i32* @y.20
  %3412 = sub i32 %3410, 1
  %3413 = mul i32 %3410, %3412
  %3414 = urem i32 %3413, 2
  %3415 = icmp eq i32 %3414, 0
  %3416 = icmp slt i32 %3411, 10
  %3417 = or i1 %3415, %3416
  br i1 %3417, label %originalBB906, label %originalBB906alteredBB

originalBB906:                                    ; preds = %3409, %originalBB906alteredBB
  %3418 = load i32, i32* @x.19
  %3419 = load i32, i32* @y.20
  %3420 = sub i32 %3418, 1
  %3421 = mul i32 %3418, %3420
  %3422 = urem i32 %3421, 2
  %3423 = icmp eq i32 %3422, 0
  %3424 = icmp slt i32 %3419, 10
  %3425 = or i1 %3423, %3424
  br i1 %3425, label %originalBBpart2908, label %originalBB906alteredBB

originalBBpart2908:                               ; preds = %originalBB906
  br label %3426, !dbg !1627

3426:                                             ; preds = %originalBBpart2908
  %3427 = load i32, i32* @x.19
  %3428 = load i32, i32* @y.20
  %3429 = sub i32 %3427, 1
  %3430 = mul i32 %3427, %3429
  %3431 = urem i32 %3430, 2
  %3432 = icmp eq i32 %3431, 0
  %3433 = icmp slt i32 %3428, 10
  %3434 = or i1 %3432, %3433
  br i1 %3434, label %originalBB910, label %originalBB910alteredBB

originalBB910:                                    ; preds = %3426, %originalBB910alteredBB
  %3435 = load i64, i64* %29, align 8, !dbg !1628
  %3436 = load i64, i64* %20, align 8, !dbg !1628
  %3437 = icmp ult i64 %3435, %3436, !dbg !1628
  %3438 = load i32, i32* @x.19
  %3439 = load i32, i32* @y.20
  %3440 = sub i32 %3438, 1
  %3441 = mul i32 %3438, %3440
  %3442 = urem i32 %3441, 2
  %3443 = icmp eq i32 %3442, 0
  %3444 = icmp slt i32 %3439, 10
  %3445 = or i1 %3443, %3444
  br i1 %3445, label %originalBBpart2912, label %originalBB910alteredBB

originalBBpart2912:                               ; preds = %originalBB910
  br i1 %3437, label %3446, label %3466, !dbg !1631

3446:                                             ; preds = %originalBBpart2912
  %3447 = load i32, i32* @x.19
  %3448 = load i32, i32* @y.20
  %3449 = sub i32 %3447, 1
  %3450 = mul i32 %3447, %3449
  %3451 = urem i32 %3450, 2
  %3452 = icmp eq i32 %3451, 0
  %3453 = icmp slt i32 %3448, 10
  %3454 = or i1 %3452, %3453
  br i1 %3454, label %originalBB914, label %originalBB914alteredBB

originalBB914:                                    ; preds = %3446, %originalBB914alteredBB
  %3455 = load i8*, i8** %19, align 8, !dbg !1628
  %3456 = load i64, i64* %29, align 8, !dbg !1628
  %3457 = getelementptr inbounds i8, i8* %3455, i64 %3456, !dbg !1628
  store i8 39, i8* %3457, align 1, !dbg !1628
  %3458 = load i32, i32* @x.19
  %3459 = load i32, i32* @y.20
  %3460 = sub i32 %3458, 1
  %3461 = mul i32 %3458, %3460
  %3462 = urem i32 %3461, 2
  %3463 = icmp eq i32 %3462, 0
  %3464 = icmp slt i32 %3459, 10
  %3465 = or i1 %3463, %3464
  br i1 %3465, label %originalBBpart2916, label %originalBB914alteredBB

originalBBpart2916:                               ; preds = %originalBB914
  br label %3466, !dbg !1628

3466:                                             ; preds = %originalBBpart2916, %originalBBpart2912
  %3467 = load i32, i32* @x.19
  %3468 = load i32, i32* @y.20
  %3469 = sub i32 %3467, 1
  %3470 = mul i32 %3467, %3469
  %3471 = urem i32 %3470, 2
  %3472 = icmp eq i32 %3471, 0
  %3473 = icmp slt i32 %3468, 10
  %3474 = or i1 %3472, %3473
  br i1 %3474, label %originalBB918, label %originalBB918alteredBB

originalBB918:                                    ; preds = %3466, %originalBB918alteredBB
  %3475 = load i64, i64* %29, align 8, !dbg !1631
  %3476 = add i64 %3475, 1, !dbg !1631
  store i64 %3476, i64* %29, align 8, !dbg !1631
  %3477 = load i32, i32* @x.19
  %3478 = load i32, i32* @y.20
  %3479 = sub i32 %3477, 1
  %3480 = mul i32 %3477, %3479
  %3481 = urem i32 %3480, 2
  %3482 = icmp eq i32 %3481, 0
  %3483 = icmp slt i32 %3478, 10
  %3484 = or i1 %3482, %3483
  br i1 %3484, label %originalBBpart2931, label %originalBB918alteredBB

originalBBpart2931:                               ; preds = %originalBB918
  br label %3485, !dbg !1631

3485:                                             ; preds = %originalBBpart2931
  %3486 = load i32, i32* @x.19
  %3487 = load i32, i32* @y.20
  %3488 = sub i32 %3486, 1
  %3489 = mul i32 %3486, %3488
  %3490 = urem i32 %3489, 2
  %3491 = icmp eq i32 %3490, 0
  %3492 = icmp slt i32 %3487, 10
  %3493 = or i1 %3491, %3492
  br i1 %3493, label %originalBB933, label %originalBB933alteredBB

originalBB933:                                    ; preds = %3485, %originalBB933alteredBB
  store i8 0, i8* %36, align 1, !dbg !1632
  %3494 = load i32, i32* @x.19
  %3495 = load i32, i32* @y.20
  %3496 = sub i32 %3494, 1
  %3497 = mul i32 %3494, %3496
  %3498 = urem i32 %3497, 2
  %3499 = icmp eq i32 %3498, 0
  %3500 = icmp slt i32 %3495, 10
  %3501 = or i1 %3499, %3500
  br i1 %3501, label %originalBBpart2935, label %originalBB933alteredBB

originalBBpart2935:                               ; preds = %originalBB933
  br label %3502, !dbg !1633

3502:                                             ; preds = %originalBBpart2935, %originalBBpart2838
  %3503 = load i32, i32* @x.19
  %3504 = load i32, i32* @y.20
  %3505 = sub i32 %3503, 1
  %3506 = mul i32 %3503, %3505
  %3507 = urem i32 %3506, 2
  %3508 = icmp eq i32 %3507, 0
  %3509 = icmp slt i32 %3504, 10
  %3510 = or i1 %3508, %3509
  br i1 %3510, label %originalBB937, label %originalBB937alteredBB

originalBB937:                                    ; preds = %3502, %originalBB937alteredBB
  %3511 = load i32, i32* @x.19
  %3512 = load i32, i32* @y.20
  %3513 = sub i32 %3511, 1
  %3514 = mul i32 %3511, %3513
  %3515 = urem i32 %3514, 2
  %3516 = icmp eq i32 %3515, 0
  %3517 = icmp slt i32 %3512, 10
  %3518 = or i1 %3516, %3517
  br i1 %3518, label %originalBBpart2939, label %originalBB937alteredBB

originalBBpart2939:                               ; preds = %originalBB937
  br label %5465, !dbg !1634

3519:                                             ; preds = %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269, %originalBBpart2269
  %3520 = load i32, i32* @x.19
  %3521 = load i32, i32* @y.20
  %3522 = sub i32 %3520, 1
  %3523 = mul i32 %3520, %3522
  %3524 = urem i32 %3523, 2
  %3525 = icmp eq i32 %3524, 0
  %3526 = icmp slt i32 %3521, 10
  %3527 = or i1 %3525, %3526
  br i1 %3527, label %originalBB941, label %originalBB941alteredBB

originalBB941:                                    ; preds = %3519, %originalBB941alteredBB
  store i8 1, i8* %43, align 1, !dbg !1635
  %3528 = load i32, i32* @x.19
  %3529 = load i32, i32* @y.20
  %3530 = sub i32 %3528, 1
  %3531 = mul i32 %3528, %3530
  %3532 = urem i32 %3531, 2
  %3533 = icmp eq i32 %3532, 0
  %3534 = icmp slt i32 %3529, 10
  %3535 = or i1 %3533, %3534
  br i1 %3535, label %originalBBpart2943, label %originalBB941alteredBB

originalBBpart2943:                               ; preds = %originalBB941
  br label %5465, !dbg !1636

3536:                                             ; preds = %originalBBpart2269
  call void @llvm.dbg.declare(metadata i64* %44, metadata !1637, metadata !DIExpression()), !dbg !1639
  call void @llvm.dbg.declare(metadata i8* %45, metadata !1640, metadata !DIExpression()), !dbg !1641
  %3537 = load i32, i32* @x.19
  %3538 = load i32, i32* @y.20
  %3539 = sub i32 %3537, 1
  %3540 = mul i32 %3537, %3539
  %3541 = urem i32 %3540, 2
  %3542 = icmp eq i32 %3541, 0
  %3543 = icmp slt i32 %3538, 10
  %3544 = or i1 %3542, %3543
  br i1 %3544, label %originalBB945, label %originalBB945alteredBB

originalBB945:                                    ; preds = %3536, %originalBB945alteredBB
  %3545 = load i8, i8* %34, align 1, !dbg !1642
  %3546 = trunc i8 %3545 to i1, !dbg !1642
  %3547 = load i32, i32* @x.19
  %3548 = load i32, i32* @y.20
  %3549 = sub i32 %3547, 1
  %3550 = mul i32 %3547, %3549
  %3551 = urem i32 %3550, 2
  %3552 = icmp eq i32 %3551, 0
  %3553 = icmp slt i32 %3548, 10
  %3554 = or i1 %3552, %3553
  br i1 %3554, label %originalBBpart2947, label %originalBB945alteredBB

originalBBpart2947:                               ; preds = %originalBB945
  br i1 %3546, label %3555, label %3583, !dbg !1644

3555:                                             ; preds = %originalBBpart2947
  %3556 = load i32, i32* @x.19
  %3557 = load i32, i32* @y.20
  %3558 = sub i32 %3556, 1
  %3559 = mul i32 %3556, %3558
  %3560 = urem i32 %3559, 2
  %3561 = icmp eq i32 %3560, 0
  %3562 = icmp slt i32 %3557, 10
  %3563 = or i1 %3561, %3562
  br i1 %3563, label %originalBB949, label %originalBB949alteredBB

originalBB949:                                    ; preds = %3555, %originalBB949alteredBB
  store i64 1, i64* %44, align 8, !dbg !1645
  %3564 = call i16** @__ctype_b_loc() #14, !dbg !1647
  %3565 = load i16*, i16** %3564, align 8, !dbg !1647
  %3566 = load i8, i8* %39, align 1, !dbg !1647
  %3567 = zext i8 %3566 to i32, !dbg !1647
  %3568 = sext i32 %3567 to i64, !dbg !1647
  %3569 = getelementptr inbounds i16, i16* %3565, i64 %3568, !dbg !1647
  %3570 = load i16, i16* %3569, align 2, !dbg !1647
  %3571 = zext i16 %3570 to i32, !dbg !1647
  %3572 = and i32 %3571, 16384, !dbg !1647
  %3573 = icmp ne i32 %3572, 0, !dbg !1648
  %3574 = zext i1 %3573 to i8, !dbg !1649
  store i8 %3574, i8* %45, align 1, !dbg !1649
  %3575 = load i32, i32* @x.19
  %3576 = load i32, i32* @y.20
  %3577 = sub i32 %3575, 1
  %3578 = mul i32 %3575, %3577
  %3579 = urem i32 %3578, 2
  %3580 = icmp eq i32 %3579, 0
  %3581 = icmp slt i32 %3576, 10
  %3582 = or i1 %3580, %3581
  br i1 %3582, label %originalBBpart2953, label %originalBB949alteredBB

originalBBpart2953:                               ; preds = %originalBB949
  br label %4192, !dbg !1650

3583:                                             ; preds = %originalBBpart2947
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t* %46, metadata !1651, metadata !DIExpression()), !dbg !1668
  %3584 = load i32, i32* @x.19
  %3585 = load i32, i32* @y.20
  %3586 = sub i32 %3584, 1
  %3587 = mul i32 %3584, %3586
  %3588 = urem i32 %3587, 2
  %3589 = icmp eq i32 %3588, 0
  %3590 = icmp slt i32 %3585, 10
  %3591 = or i1 %3589, %3590
  br i1 %3591, label %originalBB955, label %originalBB955alteredBB

originalBB955:                                    ; preds = %3583, %originalBB955alteredBB
  %3592 = bitcast %struct.__mbstate_t* %46 to i8*, !dbg !1669
  call void @llvm.memset.p0i8.i64(i8* align 4 %3592, i8 0, i64 8, i1 false), !dbg !1669
  store i64 0, i64* %44, align 8, !dbg !1670
  store i8 1, i8* %45, align 1, !dbg !1671
  %3593 = load i64, i64* %22, align 8, !dbg !1672
  %3594 = icmp eq i64 %3593, -1, !dbg !1674
  %3595 = load i32, i32* @x.19
  %3596 = load i32, i32* @y.20
  %3597 = sub i32 %3595, 1
  %3598 = mul i32 %3595, %3597
  %3599 = urem i32 %3598, 2
  %3600 = icmp eq i32 %3599, 0
  %3601 = icmp slt i32 %3596, 10
  %3602 = or i1 %3600, %3601
  br i1 %3602, label %originalBBpart2957, label %originalBB955alteredBB

originalBBpart2957:                               ; preds = %originalBB955
  br i1 %3594, label %3603, label %3622, !dbg !1675

3603:                                             ; preds = %originalBBpart2957
  %3604 = load i32, i32* @x.19
  %3605 = load i32, i32* @y.20
  %3606 = sub i32 %3604, 1
  %3607 = mul i32 %3604, %3606
  %3608 = urem i32 %3607, 2
  %3609 = icmp eq i32 %3608, 0
  %3610 = icmp slt i32 %3605, 10
  %3611 = or i1 %3609, %3610
  br i1 %3611, label %originalBB959, label %originalBB959alteredBB

originalBB959:                                    ; preds = %3603, %originalBB959alteredBB
  %3612 = load i8*, i8** %21, align 8, !dbg !1676
  %3613 = call i64 @strlen(i8* %3612) #13, !dbg !1677
  store i64 %3613, i64* %22, align 8, !dbg !1678
  %3614 = load i32, i32* @x.19
  %3615 = load i32, i32* @y.20
  %3616 = sub i32 %3614, 1
  %3617 = mul i32 %3614, %3616
  %3618 = urem i32 %3617, 2
  %3619 = icmp eq i32 %3618, 0
  %3620 = icmp slt i32 %3615, 10
  %3621 = or i1 %3619, %3620
  br i1 %3621, label %originalBBpart2961, label %originalBB959alteredBB

originalBBpart2961:                               ; preds = %originalBB959
  br label %3622, !dbg !1679

3622:                                             ; preds = %originalBBpart2961, %originalBBpart2957
  %3623 = load i32, i32* @x.19
  %3624 = load i32, i32* @y.20
  %3625 = sub i32 %3623, 1
  %3626 = mul i32 %3623, %3625
  %3627 = urem i32 %3626, 2
  %3628 = icmp eq i32 %3627, 0
  %3629 = icmp slt i32 %3624, 10
  %3630 = or i1 %3628, %3629
  br i1 %3630, label %originalBB963, label %originalBB963alteredBB

originalBB963:                                    ; preds = %3622, %originalBB963alteredBB
  %3631 = load i32, i32* @x.19
  %3632 = load i32, i32* @y.20
  %3633 = sub i32 %3631, 1
  %3634 = mul i32 %3631, %3633
  %3635 = urem i32 %3634, 2
  %3636 = icmp eq i32 %3635, 0
  %3637 = icmp slt i32 %3632, 10
  %3638 = or i1 %3636, %3637
  br i1 %3638, label %originalBBpart2965, label %originalBB963alteredBB

originalBBpart2965:                               ; preds = %originalBB963
  br label %3639, !dbg !1680

3639:                                             ; preds = %originalBBpart21144, %originalBBpart2965
  call void @llvm.dbg.declare(metadata i32* %47, metadata !1681, metadata !DIExpression()), !dbg !1684
  call void @llvm.dbg.declare(metadata i64* %48, metadata !1685, metadata !DIExpression()), !dbg !1686
  %3640 = load i32, i32* @x.19
  %3641 = load i32, i32* @y.20
  %3642 = sub i32 %3640, 1
  %3643 = mul i32 %3640, %3642
  %3644 = urem i32 %3643, 2
  %3645 = icmp eq i32 %3644, 0
  %3646 = icmp slt i32 %3641, 10
  %3647 = or i1 %3645, %3646
  br i1 %3647, label %originalBB967, label %originalBB967alteredBB

originalBB967:                                    ; preds = %3639, %originalBB967alteredBB
  %3648 = load i8*, i8** %21, align 8, !dbg !1687
  %3649 = load i64, i64* %28, align 8, !dbg !1688
  %3650 = load i64, i64* %44, align 8, !dbg !1689
  %3651 = add i64 %3649, %3650, !dbg !1690
  %3652 = getelementptr inbounds i8, i8* %3648, i64 %3651, !dbg !1687
  %3653 = load i64, i64* %22, align 8, !dbg !1691
  %3654 = load i64, i64* %28, align 8, !dbg !1692
  %3655 = load i64, i64* %44, align 8, !dbg !1693
  %3656 = add i64 %3654, %3655, !dbg !1694
  %3657 = sub i64 %3653, %3656, !dbg !1695
  %3658 = call i64 @rpl_mbrtowc(i32* %47, i8* %3652, i64 %3657, %struct.__mbstate_t* %46), !dbg !1696
  store i64 %3658, i64* %48, align 8, !dbg !1686
  %3659 = load i64, i64* %48, align 8, !dbg !1697
  %3660 = icmp eq i64 %3659, 0, !dbg !1699
  %3661 = load i32, i32* @x.19
  %3662 = load i32, i32* @y.20
  %3663 = sub i32 %3661, 1
  %3664 = mul i32 %3661, %3663
  %3665 = urem i32 %3664, 2
  %3666 = icmp eq i32 %3665, 0
  %3667 = icmp slt i32 %3662, 10
  %3668 = or i1 %3666, %3667
  br i1 %3668, label %originalBBpart2990, label %originalBB967alteredBB

originalBBpart2990:                               ; preds = %originalBB967
  br i1 %3660, label %3669, label %3686, !dbg !1700

3669:                                             ; preds = %originalBBpart2990
  %3670 = load i32, i32* @x.19
  %3671 = load i32, i32* @y.20
  %3672 = sub i32 %3670, 1
  %3673 = mul i32 %3670, %3672
  %3674 = urem i32 %3673, 2
  %3675 = icmp eq i32 %3674, 0
  %3676 = icmp slt i32 %3671, 10
  %3677 = or i1 %3675, %3676
  br i1 %3677, label %originalBB992, label %originalBB992alteredBB

originalBB992:                                    ; preds = %3669, %originalBB992alteredBB
  %3678 = load i32, i32* @x.19
  %3679 = load i32, i32* @y.20
  %3680 = sub i32 %3678, 1
  %3681 = mul i32 %3678, %3680
  %3682 = urem i32 %3681, 2
  %3683 = icmp eq i32 %3682, 0
  %3684 = icmp slt i32 %3679, 10
  %3685 = or i1 %3683, %3684
  br i1 %3685, label %originalBBpart2994, label %originalBB992alteredBB

originalBBpart2994:                               ; preds = %originalBB992
  br label %4175, !dbg !1701

3686:                                             ; preds = %originalBBpart2990
  %3687 = load i32, i32* @x.19
  %3688 = load i32, i32* @y.20
  %3689 = sub i32 %3687, 1
  %3690 = mul i32 %3687, %3689
  %3691 = urem i32 %3690, 2
  %3692 = icmp eq i32 %3691, 0
  %3693 = icmp slt i32 %3688, 10
  %3694 = or i1 %3692, %3693
  br i1 %3694, label %originalBB996, label %originalBB996alteredBB

originalBB996:                                    ; preds = %3686, %originalBB996alteredBB
  %3695 = load i64, i64* %48, align 8, !dbg !1702
  %3696 = icmp eq i64 %3695, -1, !dbg !1704
  %3697 = load i32, i32* @x.19
  %3698 = load i32, i32* @y.20
  %3699 = sub i32 %3697, 1
  %3700 = mul i32 %3697, %3699
  %3701 = urem i32 %3700, 2
  %3702 = icmp eq i32 %3701, 0
  %3703 = icmp slt i32 %3698, 10
  %3704 = or i1 %3702, %3703
  br i1 %3704, label %originalBBpart2998, label %originalBB996alteredBB

originalBBpart2998:                               ; preds = %originalBB996
  br i1 %3696, label %3705, label %3722, !dbg !1705

3705:                                             ; preds = %originalBBpart2998
  %3706 = load i32, i32* @x.19
  %3707 = load i32, i32* @y.20
  %3708 = sub i32 %3706, 1
  %3709 = mul i32 %3706, %3708
  %3710 = urem i32 %3709, 2
  %3711 = icmp eq i32 %3710, 0
  %3712 = icmp slt i32 %3707, 10
  %3713 = or i1 %3711, %3712
  br i1 %3713, label %originalBB1000, label %originalBB1000alteredBB

originalBB1000:                                   ; preds = %3705, %originalBB1000alteredBB
  store i8 0, i8* %45, align 1, !dbg !1706
  %3714 = load i32, i32* @x.19
  %3715 = load i32, i32* @y.20
  %3716 = sub i32 %3714, 1
  %3717 = mul i32 %3714, %3716
  %3718 = urem i32 %3717, 2
  %3719 = icmp eq i32 %3718, 0
  %3720 = icmp slt i32 %3715, 10
  %3721 = or i1 %3719, %3720
  br i1 %3721, label %originalBBpart21002, label %originalBB1000alteredBB

originalBBpart21002:                              ; preds = %originalBB1000
  br label %4175, !dbg !1708

3722:                                             ; preds = %originalBBpart2998
  %3723 = load i32, i32* @x.19
  %3724 = load i32, i32* @y.20
  %3725 = sub i32 %3723, 1
  %3726 = mul i32 %3723, %3725
  %3727 = urem i32 %3726, 2
  %3728 = icmp eq i32 %3727, 0
  %3729 = icmp slt i32 %3724, 10
  %3730 = or i1 %3728, %3729
  br i1 %3730, label %originalBB1004, label %originalBB1004alteredBB

originalBB1004:                                   ; preds = %3722, %originalBB1004alteredBB
  %3731 = load i64, i64* %48, align 8, !dbg !1709
  %3732 = icmp eq i64 %3731, -2, !dbg !1711
  %3733 = load i32, i32* @x.19
  %3734 = load i32, i32* @y.20
  %3735 = sub i32 %3733, 1
  %3736 = mul i32 %3733, %3735
  %3737 = urem i32 %3736, 2
  %3738 = icmp eq i32 %3737, 0
  %3739 = icmp slt i32 %3734, 10
  %3740 = or i1 %3738, %3739
  br i1 %3740, label %originalBBpart21006, label %originalBB1004alteredBB

originalBBpart21006:                              ; preds = %originalBB1004
  br i1 %3732, label %3741, label %3859, !dbg !1712

3741:                                             ; preds = %originalBBpart21006
  %3742 = load i32, i32* @x.19
  %3743 = load i32, i32* @y.20
  %3744 = sub i32 %3742, 1
  %3745 = mul i32 %3742, %3744
  %3746 = urem i32 %3745, 2
  %3747 = icmp eq i32 %3746, 0
  %3748 = icmp slt i32 %3743, 10
  %3749 = or i1 %3747, %3748
  br i1 %3749, label %originalBB1008, label %originalBB1008alteredBB

originalBB1008:                                   ; preds = %3741, %originalBB1008alteredBB
  store i8 0, i8* %45, align 1, !dbg !1713
  %3750 = load i32, i32* @x.19
  %3751 = load i32, i32* @y.20
  %3752 = sub i32 %3750, 1
  %3753 = mul i32 %3750, %3752
  %3754 = urem i32 %3753, 2
  %3755 = icmp eq i32 %3754, 0
  %3756 = icmp slt i32 %3751, 10
  %3757 = or i1 %3755, %3756
  br i1 %3757, label %originalBBpart21010, label %originalBB1008alteredBB

originalBBpart21010:                              ; preds = %originalBB1008
  br label %3758, !dbg !1715

3758:                                             ; preds = %originalBBpart21041, %originalBBpart21010
  %3759 = load i32, i32* @x.19
  %3760 = load i32, i32* @y.20
  %3761 = sub i32 %3759, 1
  %3762 = mul i32 %3759, %3761
  %3763 = urem i32 %3762, 2
  %3764 = icmp eq i32 %3763, 0
  %3765 = icmp slt i32 %3760, 10
  %3766 = or i1 %3764, %3765
  br i1 %3766, label %originalBB1012, label %originalBB1012alteredBB

originalBB1012:                                   ; preds = %3758, %originalBB1012alteredBB
  %3767 = load i64, i64* %28, align 8, !dbg !1716
  %3768 = load i64, i64* %44, align 8, !dbg !1717
  %3769 = add i64 %3767, %3768, !dbg !1718
  %3770 = load i64, i64* %22, align 8, !dbg !1719
  %3771 = icmp ult i64 %3769, %3770, !dbg !1720
  %3772 = load i32, i32* @x.19
  %3773 = load i32, i32* @y.20
  %3774 = sub i32 %3772, 1
  %3775 = mul i32 %3772, %3774
  %3776 = urem i32 %3775, 2
  %3777 = icmp eq i32 %3776, 0
  %3778 = icmp slt i32 %3773, 10
  %3779 = or i1 %3777, %3778
  br i1 %3779, label %originalBBpart21017, label %originalBB1012alteredBB

originalBBpart21017:                              ; preds = %originalBB1012
  br i1 %3771, label %3780, label %3805, !dbg !1721

3780:                                             ; preds = %originalBBpart21017
  %3781 = load i32, i32* @x.19
  %3782 = load i32, i32* @y.20
  %3783 = sub i32 %3781, 1
  %3784 = mul i32 %3781, %3783
  %3785 = urem i32 %3784, 2
  %3786 = icmp eq i32 %3785, 0
  %3787 = icmp slt i32 %3782, 10
  %3788 = or i1 %3786, %3787
  br i1 %3788, label %originalBB1019, label %originalBB1019alteredBB

originalBB1019:                                   ; preds = %3780, %originalBB1019alteredBB
  %3789 = load i8*, i8** %21, align 8, !dbg !1722
  %3790 = load i64, i64* %28, align 8, !dbg !1723
  %3791 = load i64, i64* %44, align 8, !dbg !1724
  %3792 = add i64 %3790, %3791, !dbg !1725
  %3793 = getelementptr inbounds i8, i8* %3789, i64 %3792, !dbg !1722
  %3794 = load i8, i8* %3793, align 1, !dbg !1722
  %3795 = sext i8 %3794 to i32, !dbg !1722
  %3796 = icmp ne i32 %3795, 0, !dbg !1721
  %3797 = load i32, i32* @x.19
  %3798 = load i32, i32* @y.20
  %3799 = sub i32 %3797, 1
  %3800 = mul i32 %3797, %3799
  %3801 = urem i32 %3800, 2
  %3802 = icmp eq i32 %3801, 0
  %3803 = icmp slt i32 %3798, 10
  %3804 = or i1 %3802, %3803
  br i1 %3804, label %originalBBpart21021, label %originalBB1019alteredBB

originalBBpart21021:                              ; preds = %originalBB1019
  br label %3805

3805:                                             ; preds = %originalBBpart21021, %originalBBpart21017
  %3806 = phi i1 [ false, %originalBBpart21017 ], [ %3796, %originalBBpart21021 ], !dbg !1726
  %3807 = load i32, i32* @x.19
  %3808 = load i32, i32* @y.20
  %3809 = sub i32 %3807, 1
  %3810 = mul i32 %3807, %3809
  %3811 = urem i32 %3810, 2
  %3812 = icmp eq i32 %3811, 0
  %3813 = icmp slt i32 %3808, 10
  %3814 = or i1 %3812, %3813
  br i1 %3814, label %originalBB1023, label %originalBB1023alteredBB

originalBB1023:                                   ; preds = %3805, %originalBB1023alteredBB
  %3815 = load i32, i32* @x.19
  %3816 = load i32, i32* @y.20
  %3817 = sub i32 %3815, 1
  %3818 = mul i32 %3815, %3817
  %3819 = urem i32 %3818, 2
  %3820 = icmp eq i32 %3819, 0
  %3821 = icmp slt i32 %3816, 10
  %3822 = or i1 %3820, %3821
  br i1 %3822, label %originalBBpart21025, label %originalBB1023alteredBB

originalBBpart21025:                              ; preds = %originalBB1023
  br i1 %3806, label %3823, label %3842, !dbg !1715

3823:                                             ; preds = %originalBBpart21025
  %3824 = load i32, i32* @x.19
  %3825 = load i32, i32* @y.20
  %3826 = sub i32 %3824, 1
  %3827 = mul i32 %3824, %3826
  %3828 = urem i32 %3827, 2
  %3829 = icmp eq i32 %3828, 0
  %3830 = icmp slt i32 %3825, 10
  %3831 = or i1 %3829, %3830
  br i1 %3831, label %originalBB1027, label %originalBB1027alteredBB

originalBB1027:                                   ; preds = %3823, %originalBB1027alteredBB
  %3832 = load i64, i64* %44, align 8, !dbg !1727
  %3833 = add i64 %3832, 1, !dbg !1727
  store i64 %3833, i64* %44, align 8, !dbg !1727
  %3834 = load i32, i32* @x.19
  %3835 = load i32, i32* @y.20
  %3836 = sub i32 %3834, 1
  %3837 = mul i32 %3834, %3836
  %3838 = urem i32 %3837, 2
  %3839 = icmp eq i32 %3838, 0
  %3840 = icmp slt i32 %3835, 10
  %3841 = or i1 %3839, %3840
  br i1 %3841, label %originalBBpart21041, label %originalBB1027alteredBB

originalBBpart21041:                              ; preds = %originalBB1027
  br label %3758, !dbg !1715, !llvm.loop !1728

3842:                                             ; preds = %originalBBpart21025
  %3843 = load i32, i32* @x.19
  %3844 = load i32, i32* @y.20
  %3845 = sub i32 %3843, 1
  %3846 = mul i32 %3843, %3845
  %3847 = urem i32 %3846, 2
  %3848 = icmp eq i32 %3847, 0
  %3849 = icmp slt i32 %3844, 10
  %3850 = or i1 %3848, %3849
  br i1 %3850, label %originalBB1043, label %originalBB1043alteredBB

originalBB1043:                                   ; preds = %3842, %originalBB1043alteredBB
  %3851 = load i32, i32* @x.19
  %3852 = load i32, i32* @y.20
  %3853 = sub i32 %3851, 1
  %3854 = mul i32 %3851, %3853
  %3855 = urem i32 %3854, 2
  %3856 = icmp eq i32 %3855, 0
  %3857 = icmp slt i32 %3852, 10
  %3858 = or i1 %3856, %3857
  br i1 %3858, label %originalBBpart21045, label %originalBB1043alteredBB

originalBBpart21045:                              ; preds = %originalBB1043
  br label %4175, !dbg !1729

3859:                                             ; preds = %originalBBpart21006
  %3860 = load i32, i32* @x.19
  %3861 = load i32, i32* @y.20
  %3862 = sub i32 %3860, 1
  %3863 = mul i32 %3860, %3862
  %3864 = urem i32 %3863, 2
  %3865 = icmp eq i32 %3864, 0
  %3866 = icmp slt i32 %3861, 10
  %3867 = or i1 %3865, %3866
  br i1 %3867, label %originalBB1047, label %originalBB1047alteredBB

originalBB1047:                                   ; preds = %3859, %originalBB1047alteredBB
  %3868 = load i8, i8* %35, align 1, !dbg !1730
  %3869 = trunc i8 %3868 to i1, !dbg !1730
  %3870 = load i32, i32* @x.19
  %3871 = load i32, i32* @y.20
  %3872 = sub i32 %3870, 1
  %3873 = mul i32 %3870, %3872
  %3874 = urem i32 %3873, 2
  %3875 = icmp eq i32 %3874, 0
  %3876 = icmp slt i32 %3871, 10
  %3877 = or i1 %3875, %3876
  br i1 %3877, label %originalBBpart21049, label %originalBB1047alteredBB

originalBBpart21049:                              ; preds = %originalBB1047
  br i1 %3869, label %3878, label %4047, !dbg !1733

3878:                                             ; preds = %originalBBpart21049
  %3879 = load i32, i32* @x.19
  %3880 = load i32, i32* @y.20
  %3881 = sub i32 %3879, 1
  %3882 = mul i32 %3879, %3881
  %3883 = urem i32 %3882, 2
  %3884 = icmp eq i32 %3883, 0
  %3885 = icmp slt i32 %3880, 10
  %3886 = or i1 %3884, %3885
  br i1 %3886, label %originalBB1051, label %originalBB1051alteredBB

originalBB1051:                                   ; preds = %3878, %originalBB1051alteredBB
  %3887 = load i32, i32* %23, align 4, !dbg !1734
  %3888 = icmp eq i32 %3887, 2, !dbg !1735
  %3889 = load i32, i32* @x.19
  %3890 = load i32, i32* @y.20
  %3891 = sub i32 %3889, 1
  %3892 = mul i32 %3889, %3891
  %3893 = urem i32 %3892, 2
  %3894 = icmp eq i32 %3893, 0
  %3895 = icmp slt i32 %3890, 10
  %3896 = or i1 %3894, %3895
  br i1 %3896, label %originalBBpart21053, label %originalBB1051alteredBB

originalBBpart21053:                              ; preds = %originalBB1051
  br i1 %3888, label %3897, label %4047, !dbg !1736

3897:                                             ; preds = %originalBBpart21053
  call void @llvm.dbg.declare(metadata i64* %49, metadata !1737, metadata !DIExpression()), !dbg !1739
  %3898 = load i32, i32* @x.19
  %3899 = load i32, i32* @y.20
  %3900 = sub i32 %3898, 1
  %3901 = mul i32 %3898, %3900
  %3902 = urem i32 %3901, 2
  %3903 = icmp eq i32 %3902, 0
  %3904 = icmp slt i32 %3899, 10
  %3905 = or i1 %3903, %3904
  br i1 %3905, label %originalBB1055, label %originalBB1055alteredBB

originalBB1055:                                   ; preds = %3897, %originalBB1055alteredBB
  store i64 1, i64* %49, align 8, !dbg !1740
  %3906 = load i32, i32* @x.19
  %3907 = load i32, i32* @y.20
  %3908 = sub i32 %3906, 1
  %3909 = mul i32 %3906, %3908
  %3910 = urem i32 %3909, 2
  %3911 = icmp eq i32 %3910, 0
  %3912 = icmp slt i32 %3907, 10
  %3913 = or i1 %3911, %3912
  br i1 %3913, label %originalBBpart21057, label %originalBB1055alteredBB

originalBBpart21057:                              ; preds = %originalBB1055
  br label %3914, !dbg !1742

3914:                                             ; preds = %originalBBpart21099, %originalBBpart21057
  %3915 = load i32, i32* @x.19
  %3916 = load i32, i32* @y.20
  %3917 = sub i32 %3915, 1
  %3918 = mul i32 %3915, %3917
  %3919 = urem i32 %3918, 2
  %3920 = icmp eq i32 %3919, 0
  %3921 = icmp slt i32 %3916, 10
  %3922 = or i1 %3920, %3921
  br i1 %3922, label %originalBB1059, label %originalBB1059alteredBB

originalBB1059:                                   ; preds = %3914, %originalBB1059alteredBB
  %3923 = load i64, i64* %49, align 8, !dbg !1743
  %3924 = load i64, i64* %48, align 8, !dbg !1745
  %3925 = icmp ult i64 %3923, %3924, !dbg !1746
  %3926 = load i32, i32* @x.19
  %3927 = load i32, i32* @y.20
  %3928 = sub i32 %3926, 1
  %3929 = mul i32 %3926, %3928
  %3930 = urem i32 %3929, 2
  %3931 = icmp eq i32 %3930, 0
  %3932 = icmp slt i32 %3927, 10
  %3933 = or i1 %3931, %3932
  br i1 %3933, label %originalBBpart21061, label %originalBB1059alteredBB

originalBBpart21061:                              ; preds = %originalBB1059
  br i1 %3925, label %3934, label %4030, !dbg !1747

3934:                                             ; preds = %originalBBpart21061
  %3935 = load i32, i32* @x.19
  %3936 = load i32, i32* @y.20
  %3937 = sub i32 %3935, 1
  %3938 = mul i32 %3935, %3937
  %3939 = urem i32 %3938, 2
  %3940 = icmp eq i32 %3939, 0
  %3941 = icmp slt i32 %3936, 10
  %3942 = or i1 %3940, %3941
  br i1 %3942, label %originalBB1063, label %originalBB1063alteredBB

originalBB1063:                                   ; preds = %3934, %originalBB1063alteredBB
  %3943 = load i8*, i8** %21, align 8, !dbg !1748
  %3944 = load i64, i64* %28, align 8, !dbg !1749
  %3945 = load i64, i64* %44, align 8, !dbg !1750
  %3946 = add i64 %3944, %3945, !dbg !1751
  %3947 = load i64, i64* %49, align 8, !dbg !1752
  %3948 = add i64 %3946, %3947, !dbg !1753
  %3949 = getelementptr inbounds i8, i8* %3943, i64 %3948, !dbg !1748
  %3950 = load i8, i8* %3949, align 1, !dbg !1748
  %3951 = sext i8 %3950 to i32, !dbg !1748
  %3952 = load i32, i32* @x.19
  %3953 = load i32, i32* @y.20
  %3954 = sub i32 %3952, 1
  %3955 = mul i32 %3952, %3954
  %3956 = urem i32 %3955, 2
  %3957 = icmp eq i32 %3956, 0
  %3958 = icmp slt i32 %3953, 10
  %3959 = or i1 %3957, %3958
  br i1 %3959, label %originalBBpart21073, label %originalBB1063alteredBB

originalBBpart21073:                              ; preds = %originalBB1063
  switch i32 %3951, label %3977 [
    i32 91, label %3960
    i32 92, label %3960
    i32 94, label %3960
    i32 96, label %3960
    i32 124, label %3960
  ], !dbg !1754

3960:                                             ; preds = %originalBBpart21073, %originalBBpart21073, %originalBBpart21073, %originalBBpart21073, %originalBBpart21073
  %3961 = load i32, i32* @x.19
  %3962 = load i32, i32* @y.20
  %3963 = sub i32 %3961, 1
  %3964 = mul i32 %3961, %3963
  %3965 = urem i32 %3964, 2
  %3966 = icmp eq i32 %3965, 0
  %3967 = icmp slt i32 %3962, 10
  %3968 = or i1 %3966, %3967
  br i1 %3968, label %originalBB1075, label %originalBB1075alteredBB

originalBB1075:                                   ; preds = %3960, %originalBB1075alteredBB
  %3969 = load i32, i32* @x.19
  %3970 = load i32, i32* @y.20
  %3971 = sub i32 %3969, 1
  %3972 = mul i32 %3969, %3971
  %3973 = urem i32 %3972, 2
  %3974 = icmp eq i32 %3973, 0
  %3975 = icmp slt i32 %3970, 10
  %3976 = or i1 %3974, %3975
  br i1 %3976, label %originalBBpart21077, label %originalBB1075alteredBB

originalBBpart21077:                              ; preds = %originalBB1075
  br label %6990, !dbg !1755

3977:                                             ; preds = %originalBBpart21073
  %3978 = load i32, i32* @x.19
  %3979 = load i32, i32* @y.20
  %3980 = sub i32 %3978, 1
  %3981 = mul i32 %3978, %3980
  %3982 = urem i32 %3981, 2
  %3983 = icmp eq i32 %3982, 0
  %3984 = icmp slt i32 %3979, 10
  %3985 = or i1 %3983, %3984
  br i1 %3985, label %originalBB1079, label %originalBB1079alteredBB

originalBB1079:                                   ; preds = %3977, %originalBB1079alteredBB
  %3986 = load i32, i32* @x.19
  %3987 = load i32, i32* @y.20
  %3988 = sub i32 %3986, 1
  %3989 = mul i32 %3986, %3988
  %3990 = urem i32 %3989, 2
  %3991 = icmp eq i32 %3990, 0
  %3992 = icmp slt i32 %3987, 10
  %3993 = or i1 %3991, %3992
  br i1 %3993, label %originalBBpart21081, label %originalBB1079alteredBB

originalBBpart21081:                              ; preds = %originalBB1079
  br label %3994, !dbg !1757

3994:                                             ; preds = %originalBBpart21081
  %3995 = load i32, i32* @x.19
  %3996 = load i32, i32* @y.20
  %3997 = sub i32 %3995, 1
  %3998 = mul i32 %3995, %3997
  %3999 = urem i32 %3998, 2
  %4000 = icmp eq i32 %3999, 0
  %4001 = icmp slt i32 %3996, 10
  %4002 = or i1 %4000, %4001
  br i1 %4002, label %originalBB1083, label %originalBB1083alteredBB

originalBB1083:                                   ; preds = %3994, %originalBB1083alteredBB
  %4003 = load i32, i32* @x.19
  %4004 = load i32, i32* @y.20
  %4005 = sub i32 %4003, 1
  %4006 = mul i32 %4003, %4005
  %4007 = urem i32 %4006, 2
  %4008 = icmp eq i32 %4007, 0
  %4009 = icmp slt i32 %4004, 10
  %4010 = or i1 %4008, %4009
  br i1 %4010, label %originalBBpart21085, label %originalBB1083alteredBB

originalBBpart21085:                              ; preds = %originalBB1083
  br label %4011, !dbg !1758

4011:                                             ; preds = %originalBBpart21085
  %4012 = load i32, i32* @x.19
  %4013 = load i32, i32* @y.20
  %4014 = sub i32 %4012, 1
  %4015 = mul i32 %4012, %4014
  %4016 = urem i32 %4015, 2
  %4017 = icmp eq i32 %4016, 0
  %4018 = icmp slt i32 %4013, 10
  %4019 = or i1 %4017, %4018
  br i1 %4019, label %originalBB1087, label %originalBB1087alteredBB

originalBB1087:                                   ; preds = %4011, %originalBB1087alteredBB
  %4020 = load i64, i64* %49, align 8, !dbg !1759
  %4021 = add i64 %4020, 1, !dbg !1759
  store i64 %4021, i64* %49, align 8, !dbg !1759
  %4022 = load i32, i32* @x.19
  %4023 = load i32, i32* @y.20
  %4024 = sub i32 %4022, 1
  %4025 = mul i32 %4022, %4024
  %4026 = urem i32 %4025, 2
  %4027 = icmp eq i32 %4026, 0
  %4028 = icmp slt i32 %4023, 10
  %4029 = or i1 %4027, %4028
  br i1 %4029, label %originalBBpart21099, label %originalBB1087alteredBB

originalBBpart21099:                              ; preds = %originalBB1087
  br label %3914, !dbg !1760, !llvm.loop !1761

4030:                                             ; preds = %originalBBpart21061
  %4031 = load i32, i32* @x.19
  %4032 = load i32, i32* @y.20
  %4033 = sub i32 %4031, 1
  %4034 = mul i32 %4031, %4033
  %4035 = urem i32 %4034, 2
  %4036 = icmp eq i32 %4035, 0
  %4037 = icmp slt i32 %4032, 10
  %4038 = or i1 %4036, %4037
  br i1 %4038, label %originalBB1101, label %originalBB1101alteredBB

originalBB1101:                                   ; preds = %4030, %originalBB1101alteredBB
  %4039 = load i32, i32* @x.19
  %4040 = load i32, i32* @y.20
  %4041 = sub i32 %4039, 1
  %4042 = mul i32 %4039, %4041
  %4043 = urem i32 %4042, 2
  %4044 = icmp eq i32 %4043, 0
  %4045 = icmp slt i32 %4040, 10
  %4046 = or i1 %4044, %4045
  br i1 %4046, label %originalBBpart21103, label %originalBB1101alteredBB

originalBBpart21103:                              ; preds = %originalBB1101
  br label %4047, !dbg !1763

4047:                                             ; preds = %originalBBpart21103, %originalBBpart21053, %originalBBpart21049
  %4048 = load i32, i32* @x.19
  %4049 = load i32, i32* @y.20
  %4050 = sub i32 %4048, 1
  %4051 = mul i32 %4048, %4050
  %4052 = urem i32 %4051, 2
  %4053 = icmp eq i32 %4052, 0
  %4054 = icmp slt i32 %4049, 10
  %4055 = or i1 %4053, %4054
  br i1 %4055, label %originalBB1105, label %originalBB1105alteredBB

originalBB1105:                                   ; preds = %4047, %originalBB1105alteredBB
  %4056 = load i32, i32* %47, align 4, !dbg !1764
  %4057 = call i32 @iswprint(i32 %4056) #10, !dbg !1766
  %4058 = icmp ne i32 %4057, 0, !dbg !1766
  %4059 = load i32, i32* @x.19
  %4060 = load i32, i32* @y.20
  %4061 = sub i32 %4059, 1
  %4062 = mul i32 %4059, %4061
  %4063 = urem i32 %4062, 2
  %4064 = icmp eq i32 %4063, 0
  %4065 = icmp slt i32 %4060, 10
  %4066 = or i1 %4064, %4065
  br i1 %4066, label %originalBBpart21107, label %originalBB1105alteredBB

originalBBpart21107:                              ; preds = %originalBB1105
  br i1 %4058, label %4084, label %4067, !dbg !1767

4067:                                             ; preds = %originalBBpart21107
  %4068 = load i32, i32* @x.19
  %4069 = load i32, i32* @y.20
  %4070 = sub i32 %4068, 1
  %4071 = mul i32 %4068, %4070
  %4072 = urem i32 %4071, 2
  %4073 = icmp eq i32 %4072, 0
  %4074 = icmp slt i32 %4069, 10
  %4075 = or i1 %4073, %4074
  br i1 %4075, label %originalBB1109, label %originalBB1109alteredBB

originalBB1109:                                   ; preds = %4067, %originalBB1109alteredBB
  store i8 0, i8* %45, align 1, !dbg !1768
  %4076 = load i32, i32* @x.19
  %4077 = load i32, i32* @y.20
  %4078 = sub i32 %4076, 1
  %4079 = mul i32 %4076, %4078
  %4080 = urem i32 %4079, 2
  %4081 = icmp eq i32 %4080, 0
  %4082 = icmp slt i32 %4077, 10
  %4083 = or i1 %4081, %4082
  br i1 %4083, label %originalBBpart21111, label %originalBB1109alteredBB

originalBBpart21111:                              ; preds = %originalBB1109
  br label %4084, !dbg !1769

4084:                                             ; preds = %originalBBpart21111, %originalBBpart21107
  %4085 = load i32, i32* @x.19
  %4086 = load i32, i32* @y.20
  %4087 = sub i32 %4085, 1
  %4088 = mul i32 %4085, %4087
  %4089 = urem i32 %4088, 2
  %4090 = icmp eq i32 %4089, 0
  %4091 = icmp slt i32 %4086, 10
  %4092 = or i1 %4090, %4091
  br i1 %4092, label %originalBB1113, label %originalBB1113alteredBB

originalBB1113:                                   ; preds = %4084, %originalBB1113alteredBB
  %4093 = load i64, i64* %48, align 8, !dbg !1770
  %4094 = load i64, i64* %44, align 8, !dbg !1771
  %4095 = add i64 %4094, %4093, !dbg !1771
  store i64 %4095, i64* %44, align 8, !dbg !1771
  %4096 = load i32, i32* @x.19
  %4097 = load i32, i32* @y.20
  %4098 = sub i32 %4096, 1
  %4099 = mul i32 %4096, %4098
  %4100 = urem i32 %4099, 2
  %4101 = icmp eq i32 %4100, 0
  %4102 = icmp slt i32 %4097, 10
  %4103 = or i1 %4101, %4102
  br i1 %4103, label %originalBBpart21122, label %originalBB1113alteredBB

originalBBpart21122:                              ; preds = %originalBB1113
  br label %4104

4104:                                             ; preds = %originalBBpart21122
  %4105 = load i32, i32* @x.19
  %4106 = load i32, i32* @y.20
  %4107 = sub i32 %4105, 1
  %4108 = mul i32 %4105, %4107
  %4109 = urem i32 %4108, 2
  %4110 = icmp eq i32 %4109, 0
  %4111 = icmp slt i32 %4106, 10
  %4112 = or i1 %4110, %4111
  br i1 %4112, label %originalBB1124, label %originalBB1124alteredBB

originalBB1124:                                   ; preds = %4104, %originalBB1124alteredBB
  %4113 = load i32, i32* @x.19
  %4114 = load i32, i32* @y.20
  %4115 = sub i32 %4113, 1
  %4116 = mul i32 %4113, %4115
  %4117 = urem i32 %4116, 2
  %4118 = icmp eq i32 %4117, 0
  %4119 = icmp slt i32 %4114, 10
  %4120 = or i1 %4118, %4119
  br i1 %4120, label %originalBBpart21126, label %originalBB1124alteredBB

originalBBpart21126:                              ; preds = %originalBB1124
  br label %4121

4121:                                             ; preds = %originalBBpart21126
  %4122 = load i32, i32* @x.19
  %4123 = load i32, i32* @y.20
  %4124 = sub i32 %4122, 1
  %4125 = mul i32 %4122, %4124
  %4126 = urem i32 %4125, 2
  %4127 = icmp eq i32 %4126, 0
  %4128 = icmp slt i32 %4123, 10
  %4129 = or i1 %4127, %4128
  br i1 %4129, label %originalBB1128, label %originalBB1128alteredBB

originalBB1128:                                   ; preds = %4121, %originalBB1128alteredBB
  %4130 = load i32, i32* @x.19
  %4131 = load i32, i32* @y.20
  %4132 = sub i32 %4130, 1
  %4133 = mul i32 %4130, %4132
  %4134 = urem i32 %4133, 2
  %4135 = icmp eq i32 %4134, 0
  %4136 = icmp slt i32 %4131, 10
  %4137 = or i1 %4135, %4136
  br i1 %4137, label %originalBBpart21130, label %originalBB1128alteredBB

originalBBpart21130:                              ; preds = %originalBB1128
  br label %4138

4138:                                             ; preds = %originalBBpart21130
  %4139 = load i32, i32* @x.19
  %4140 = load i32, i32* @y.20
  %4141 = sub i32 %4139, 1
  %4142 = mul i32 %4139, %4141
  %4143 = urem i32 %4142, 2
  %4144 = icmp eq i32 %4143, 0
  %4145 = icmp slt i32 %4140, 10
  %4146 = or i1 %4144, %4145
  br i1 %4146, label %originalBB1132, label %originalBB1132alteredBB

originalBB1132:                                   ; preds = %4138, %originalBB1132alteredBB
  %4147 = load i32, i32* @x.19
  %4148 = load i32, i32* @y.20
  %4149 = sub i32 %4147, 1
  %4150 = mul i32 %4147, %4149
  %4151 = urem i32 %4150, 2
  %4152 = icmp eq i32 %4151, 0
  %4153 = icmp slt i32 %4148, 10
  %4154 = or i1 %4152, %4153
  br i1 %4154, label %originalBBpart21134, label %originalBB1132alteredBB

originalBBpart21134:                              ; preds = %originalBB1132
  br label %4155, !dbg !1772

4155:                                             ; preds = %originalBBpart21134
  %4156 = load i32, i32* @x.19
  %4157 = load i32, i32* @y.20
  %4158 = sub i32 %4156, 1
  %4159 = mul i32 %4156, %4158
  %4160 = urem i32 %4159, 2
  %4161 = icmp eq i32 %4160, 0
  %4162 = icmp slt i32 %4157, 10
  %4163 = or i1 %4161, %4162
  br i1 %4163, label %originalBB1136, label %originalBB1136alteredBB

originalBB1136:                                   ; preds = %4155, %originalBB1136alteredBB
  %4164 = call i32 @mbsinit(%struct.__mbstate_t* %46) #13, !dbg !1773
  %4165 = icmp ne i32 %4164, 0, !dbg !1774
  %4166 = xor i1 %4165, true, !dbg !1774
  %4167 = load i32, i32* @x.19
  %4168 = load i32, i32* @y.20
  %4169 = sub i32 %4167, 1
  %4170 = mul i32 %4167, %4169
  %4171 = urem i32 %4170, 2
  %4172 = icmp eq i32 %4171, 0
  %4173 = icmp slt i32 %4168, 10
  %4174 = or i1 %4172, %4173
  br i1 %4174, label %originalBBpart21144, label %originalBB1136alteredBB

originalBBpart21144:                              ; preds = %originalBB1136
  br i1 %4166, label %3639, label %4175, !dbg !1772, !llvm.loop !1775

4175:                                             ; preds = %originalBBpart21144, %originalBBpart21045, %originalBBpart21002, %originalBBpart2994
  %4176 = load i32, i32* @x.19
  %4177 = load i32, i32* @y.20
  %4178 = sub i32 %4176, 1
  %4179 = mul i32 %4176, %4178
  %4180 = urem i32 %4179, 2
  %4181 = icmp eq i32 %4180, 0
  %4182 = icmp slt i32 %4177, 10
  %4183 = or i1 %4181, %4182
  br i1 %4183, label %originalBB1146, label %originalBB1146alteredBB

originalBB1146:                                   ; preds = %4175, %originalBB1146alteredBB
  %4184 = load i32, i32* @x.19
  %4185 = load i32, i32* @y.20
  %4186 = sub i32 %4184, 1
  %4187 = mul i32 %4184, %4186
  %4188 = urem i32 %4187, 2
  %4189 = icmp eq i32 %4188, 0
  %4190 = icmp slt i32 %4185, 10
  %4191 = or i1 %4189, %4190
  br i1 %4191, label %originalBBpart21148, label %originalBB1146alteredBB

originalBBpart21148:                              ; preds = %originalBB1146
  br label %4192

4192:                                             ; preds = %originalBBpart21148, %originalBBpart2953
  %4193 = load i32, i32* @x.19
  %4194 = load i32, i32* @y.20
  %4195 = sub i32 %4193, 1
  %4196 = mul i32 %4193, %4195
  %4197 = urem i32 %4196, 2
  %4198 = icmp eq i32 %4197, 0
  %4199 = icmp slt i32 %4194, 10
  %4200 = or i1 %4198, %4199
  br i1 %4200, label %originalBB1150, label %originalBB1150alteredBB

originalBB1150:                                   ; preds = %4192, %originalBB1150alteredBB
  %4201 = load i8, i8* %45, align 1, !dbg !1777
  %4202 = trunc i8 %4201 to i1, !dbg !1777
  %4203 = zext i1 %4202 to i8, !dbg !1778
  store i8 %4203, i8* %43, align 1, !dbg !1778
  %4204 = load i64, i64* %44, align 8, !dbg !1779
  %4205 = icmp ult i64 1, %4204, !dbg !1781
  %4206 = load i32, i32* @x.19
  %4207 = load i32, i32* @y.20
  %4208 = sub i32 %4206, 1
  %4209 = mul i32 %4206, %4208
  %4210 = urem i32 %4209, 2
  %4211 = icmp eq i32 %4210, 0
  %4212 = icmp slt i32 %4207, 10
  %4213 = or i1 %4211, %4212
  br i1 %4213, label %originalBBpart21152, label %originalBB1150alteredBB

originalBBpart21152:                              ; preds = %originalBB1150
  br i1 %4205, label %4252, label %4214, !dbg !1782

4214:                                             ; preds = %originalBBpart21152
  %4215 = load i32, i32* @x.19
  %4216 = load i32, i32* @y.20
  %4217 = sub i32 %4215, 1
  %4218 = mul i32 %4215, %4217
  %4219 = urem i32 %4218, 2
  %4220 = icmp eq i32 %4219, 0
  %4221 = icmp slt i32 %4216, 10
  %4222 = or i1 %4220, %4221
  br i1 %4222, label %originalBB1154, label %originalBB1154alteredBB

originalBB1154:                                   ; preds = %4214, %originalBB1154alteredBB
  %4223 = load i8, i8* %33, align 1, !dbg !1783
  %4224 = trunc i8 %4223 to i1, !dbg !1783
  %4225 = load i32, i32* @x.19
  %4226 = load i32, i32* @y.20
  %4227 = sub i32 %4225, 1
  %4228 = mul i32 %4225, %4227
  %4229 = urem i32 %4228, 2
  %4230 = icmp eq i32 %4229, 0
  %4231 = icmp slt i32 %4226, 10
  %4232 = or i1 %4230, %4231
  br i1 %4232, label %originalBBpart21156, label %originalBB1154alteredBB

originalBBpart21156:                              ; preds = %originalBB1154
  br i1 %4224, label %4233, label %5448, !dbg !1784

4233:                                             ; preds = %originalBBpart21156
  %4234 = load i32, i32* @x.19
  %4235 = load i32, i32* @y.20
  %4236 = sub i32 %4234, 1
  %4237 = mul i32 %4234, %4236
  %4238 = urem i32 %4237, 2
  %4239 = icmp eq i32 %4238, 0
  %4240 = icmp slt i32 %4235, 10
  %4241 = or i1 %4239, %4240
  br i1 %4241, label %originalBB1158, label %originalBB1158alteredBB

originalBB1158:                                   ; preds = %4233, %originalBB1158alteredBB
  %4242 = load i8, i8* %45, align 1, !dbg !1785
  %4243 = trunc i8 %4242 to i1, !dbg !1785
  %4244 = load i32, i32* @x.19
  %4245 = load i32, i32* @y.20
  %4246 = sub i32 %4244, 1
  %4247 = mul i32 %4244, %4246
  %4248 = urem i32 %4247, 2
  %4249 = icmp eq i32 %4248, 0
  %4250 = icmp slt i32 %4245, 10
  %4251 = or i1 %4249, %4250
  br i1 %4251, label %originalBBpart21160, label %originalBB1158alteredBB

originalBBpart21160:                              ; preds = %originalBB1158
  br i1 %4243, label %5448, label %4252, !dbg !1786

4252:                                             ; preds = %originalBBpart21160, %originalBBpart21152
  call void @llvm.dbg.declare(metadata i64* %50, metadata !1787, metadata !DIExpression()), !dbg !1789
  %4253 = load i32, i32* @x.19
  %4254 = load i32, i32* @y.20
  %4255 = sub i32 %4253, 1
  %4256 = mul i32 %4253, %4255
  %4257 = urem i32 %4256, 2
  %4258 = icmp eq i32 %4257, 0
  %4259 = icmp slt i32 %4254, 10
  %4260 = or i1 %4258, %4259
  br i1 %4260, label %originalBB1162, label %originalBB1162alteredBB

originalBB1162:                                   ; preds = %4252, %originalBB1162alteredBB
  %4261 = load i64, i64* %28, align 8, !dbg !1790
  %4262 = load i64, i64* %44, align 8, !dbg !1791
  %4263 = add i64 %4261, %4262, !dbg !1792
  store i64 %4263, i64* %50, align 8, !dbg !1789
  %4264 = load i32, i32* @x.19
  %4265 = load i32, i32* @y.20
  %4266 = sub i32 %4264, 1
  %4267 = mul i32 %4264, %4266
  %4268 = urem i32 %4267, 2
  %4269 = icmp eq i32 %4268, 0
  %4270 = icmp slt i32 %4265, 10
  %4271 = or i1 %4269, %4270
  br i1 %4271, label %originalBBpart21166, label %originalBB1162alteredBB

originalBBpart21166:                              ; preds = %originalBB1162
  br label %4272, !dbg !1793

4272:                                             ; preds = %originalBBpart21543, %originalBBpart21166
  %4273 = load i32, i32* @x.19
  %4274 = load i32, i32* @y.20
  %4275 = sub i32 %4273, 1
  %4276 = mul i32 %4273, %4275
  %4277 = urem i32 %4276, 2
  %4278 = icmp eq i32 %4277, 0
  %4279 = icmp slt i32 %4274, 10
  %4280 = or i1 %4278, %4279
  br i1 %4280, label %originalBB1168, label %originalBB1168alteredBB

originalBB1168:                                   ; preds = %4272, %originalBB1168alteredBB
  %4281 = load i8, i8* %33, align 1, !dbg !1794
  %4282 = trunc i8 %4281 to i1, !dbg !1794
  %4283 = load i32, i32* @x.19
  %4284 = load i32, i32* @y.20
  %4285 = sub i32 %4283, 1
  %4286 = mul i32 %4283, %4285
  %4287 = urem i32 %4286, 2
  %4288 = icmp eq i32 %4287, 0
  %4289 = icmp slt i32 %4284, 10
  %4290 = or i1 %4288, %4289
  br i1 %4290, label %originalBBpart21170, label %originalBB1168alteredBB

originalBBpart21170:                              ; preds = %originalBB1168
  br i1 %4282, label %4291, label %4924, !dbg !1799

4291:                                             ; preds = %originalBBpart21170
  %4292 = load i32, i32* @x.19
  %4293 = load i32, i32* @y.20
  %4294 = sub i32 %4292, 1
  %4295 = mul i32 %4292, %4294
  %4296 = urem i32 %4295, 2
  %4297 = icmp eq i32 %4296, 0
  %4298 = icmp slt i32 %4293, 10
  %4299 = or i1 %4297, %4298
  br i1 %4299, label %originalBB1172, label %originalBB1172alteredBB

originalBB1172:                                   ; preds = %4291, %originalBB1172alteredBB
  %4300 = load i8, i8* %45, align 1, !dbg !1800
  %4301 = trunc i8 %4300 to i1, !dbg !1800
  %4302 = load i32, i32* @x.19
  %4303 = load i32, i32* @y.20
  %4304 = sub i32 %4302, 1
  %4305 = mul i32 %4302, %4304
  %4306 = urem i32 %4305, 2
  %4307 = icmp eq i32 %4306, 0
  %4308 = icmp slt i32 %4303, 10
  %4309 = or i1 %4307, %4308
  br i1 %4309, label %originalBBpart21174, label %originalBB1172alteredBB

originalBBpart21174:                              ; preds = %originalBB1172
  br i1 %4301, label %4924, label %4310, !dbg !1801

4310:                                             ; preds = %originalBBpart21174
  %4311 = load i32, i32* @x.19
  %4312 = load i32, i32* @y.20
  %4313 = sub i32 %4311, 1
  %4314 = mul i32 %4311, %4313
  %4315 = urem i32 %4314, 2
  %4316 = icmp eq i32 %4315, 0
  %4317 = icmp slt i32 %4312, 10
  %4318 = or i1 %4316, %4317
  br i1 %4318, label %originalBB1176, label %originalBB1176alteredBB

originalBB1176:                                   ; preds = %4310, %originalBB1176alteredBB
  %4319 = load i32, i32* @x.19
  %4320 = load i32, i32* @y.20
  %4321 = sub i32 %4319, 1
  %4322 = mul i32 %4319, %4321
  %4323 = urem i32 %4322, 2
  %4324 = icmp eq i32 %4323, 0
  %4325 = icmp slt i32 %4320, 10
  %4326 = or i1 %4324, %4325
  br i1 %4326, label %originalBBpart21178, label %originalBB1176alteredBB

originalBBpart21178:                              ; preds = %originalBB1176
  br label %4327, !dbg !1802

4327:                                             ; preds = %originalBBpart21178
  %4328 = load i32, i32* @x.19
  %4329 = load i32, i32* @y.20
  %4330 = sub i32 %4328, 1
  %4331 = mul i32 %4328, %4330
  %4332 = urem i32 %4331, 2
  %4333 = icmp eq i32 %4332, 0
  %4334 = icmp slt i32 %4329, 10
  %4335 = or i1 %4333, %4334
  br i1 %4335, label %originalBB1180, label %originalBB1180alteredBB

originalBB1180:                                   ; preds = %4327, %originalBB1180alteredBB
  %4336 = load i8, i8* %35, align 1, !dbg !1804
  %4337 = trunc i8 %4336 to i1, !dbg !1804
  %4338 = load i32, i32* @x.19
  %4339 = load i32, i32* @y.20
  %4340 = sub i32 %4338, 1
  %4341 = mul i32 %4338, %4340
  %4342 = urem i32 %4341, 2
  %4343 = icmp eq i32 %4342, 0
  %4344 = icmp slt i32 %4339, 10
  %4345 = or i1 %4343, %4344
  br i1 %4345, label %originalBBpart21182, label %originalBB1180alteredBB

originalBBpart21182:                              ; preds = %originalBB1180
  br i1 %4337, label %4346, label %4363, !dbg !1807

4346:                                             ; preds = %originalBBpart21182
  %4347 = load i32, i32* @x.19
  %4348 = load i32, i32* @y.20
  %4349 = sub i32 %4347, 1
  %4350 = mul i32 %4347, %4349
  %4351 = urem i32 %4350, 2
  %4352 = icmp eq i32 %4351, 0
  %4353 = icmp slt i32 %4348, 10
  %4354 = or i1 %4352, %4353
  br i1 %4354, label %originalBB1184, label %originalBB1184alteredBB

originalBB1184:                                   ; preds = %4346, %originalBB1184alteredBB
  %4355 = load i32, i32* @x.19
  %4356 = load i32, i32* @y.20
  %4357 = sub i32 %4355, 1
  %4358 = mul i32 %4355, %4357
  %4359 = urem i32 %4358, 2
  %4360 = icmp eq i32 %4359, 0
  %4361 = icmp slt i32 %4356, 10
  %4362 = or i1 %4360, %4361
  br i1 %4362, label %originalBBpart21186, label %originalBB1184alteredBB

originalBBpart21186:                              ; preds = %originalBB1184
  br label %6990, !dbg !1804

4363:                                             ; preds = %originalBBpart21182
  %4364 = load i32, i32* @x.19
  %4365 = load i32, i32* @y.20
  %4366 = sub i32 %4364, 1
  %4367 = mul i32 %4364, %4366
  %4368 = urem i32 %4367, 2
  %4369 = icmp eq i32 %4368, 0
  %4370 = icmp slt i32 %4365, 10
  %4371 = or i1 %4369, %4370
  br i1 %4371, label %originalBB1188, label %originalBB1188alteredBB

originalBB1188:                                   ; preds = %4363, %originalBB1188alteredBB
  store i8 1, i8* %42, align 1, !dbg !1807
  %4372 = load i32, i32* %23, align 4, !dbg !1808
  %4373 = icmp eq i32 %4372, 2, !dbg !1808
  %4374 = load i32, i32* @x.19
  %4375 = load i32, i32* @y.20
  %4376 = sub i32 %4374, 1
  %4377 = mul i32 %4374, %4376
  %4378 = urem i32 %4377, 2
  %4379 = icmp eq i32 %4378, 0
  %4380 = icmp slt i32 %4375, 10
  %4381 = or i1 %4379, %4380
  br i1 %4381, label %originalBBpart21190, label %originalBB1188alteredBB

originalBBpart21190:                              ; preds = %originalBB1188
  br i1 %4373, label %4382, label %4646, !dbg !1808

4382:                                             ; preds = %originalBBpart21190
  %4383 = load i32, i32* @x.19
  %4384 = load i32, i32* @y.20
  %4385 = sub i32 %4383, 1
  %4386 = mul i32 %4383, %4385
  %4387 = urem i32 %4386, 2
  %4388 = icmp eq i32 %4387, 0
  %4389 = icmp slt i32 %4384, 10
  %4390 = or i1 %4388, %4389
  br i1 %4390, label %originalBB1192, label %originalBB1192alteredBB

originalBB1192:                                   ; preds = %4382, %originalBB1192alteredBB
  %4391 = load i8, i8* %36, align 1, !dbg !1808
  %4392 = trunc i8 %4391 to i1, !dbg !1808
  %4393 = load i32, i32* @x.19
  %4394 = load i32, i32* @y.20
  %4395 = sub i32 %4393, 1
  %4396 = mul i32 %4393, %4395
  %4397 = urem i32 %4396, 2
  %4398 = icmp eq i32 %4397, 0
  %4399 = icmp slt i32 %4394, 10
  %4400 = or i1 %4398, %4399
  br i1 %4400, label %originalBBpart21194, label %originalBB1192alteredBB

originalBBpart21194:                              ; preds = %originalBB1192
  br i1 %4392, label %4646, label %4401, !dbg !1807

4401:                                             ; preds = %originalBBpart21194
  %4402 = load i32, i32* @x.19
  %4403 = load i32, i32* @y.20
  %4404 = sub i32 %4402, 1
  %4405 = mul i32 %4402, %4404
  %4406 = urem i32 %4405, 2
  %4407 = icmp eq i32 %4406, 0
  %4408 = icmp slt i32 %4403, 10
  %4409 = or i1 %4407, %4408
  br i1 %4409, label %originalBB1196, label %originalBB1196alteredBB

originalBB1196:                                   ; preds = %4401, %originalBB1196alteredBB
  %4410 = load i32, i32* @x.19
  %4411 = load i32, i32* @y.20
  %4412 = sub i32 %4410, 1
  %4413 = mul i32 %4410, %4412
  %4414 = urem i32 %4413, 2
  %4415 = icmp eq i32 %4414, 0
  %4416 = icmp slt i32 %4411, 10
  %4417 = or i1 %4415, %4416
  br i1 %4417, label %originalBBpart21198, label %originalBB1196alteredBB

originalBBpart21198:                              ; preds = %originalBB1196
  br label %4418, !dbg !1810

4418:                                             ; preds = %originalBBpart21198
  %4419 = load i32, i32* @x.19
  %4420 = load i32, i32* @y.20
  %4421 = sub i32 %4419, 1
  %4422 = mul i32 %4419, %4421
  %4423 = urem i32 %4422, 2
  %4424 = icmp eq i32 %4423, 0
  %4425 = icmp slt i32 %4420, 10
  %4426 = or i1 %4424, %4425
  br i1 %4426, label %originalBB1200, label %originalBB1200alteredBB

originalBB1200:                                   ; preds = %4418, %originalBB1200alteredBB
  %4427 = load i64, i64* %29, align 8, !dbg !1812
  %4428 = load i64, i64* %20, align 8, !dbg !1812
  %4429 = icmp ult i64 %4427, %4428, !dbg !1812
  %4430 = load i32, i32* @x.19
  %4431 = load i32, i32* @y.20
  %4432 = sub i32 %4430, 1
  %4433 = mul i32 %4430, %4432
  %4434 = urem i32 %4433, 2
  %4435 = icmp eq i32 %4434, 0
  %4436 = icmp slt i32 %4431, 10
  %4437 = or i1 %4435, %4436
  br i1 %4437, label %originalBBpart21202, label %originalBB1200alteredBB

originalBBpart21202:                              ; preds = %originalBB1200
  br i1 %4429, label %4438, label %4458, !dbg !1815

4438:                                             ; preds = %originalBBpart21202
  %4439 = load i32, i32* @x.19
  %4440 = load i32, i32* @y.20
  %4441 = sub i32 %4439, 1
  %4442 = mul i32 %4439, %4441
  %4443 = urem i32 %4442, 2
  %4444 = icmp eq i32 %4443, 0
  %4445 = icmp slt i32 %4440, 10
  %4446 = or i1 %4444, %4445
  br i1 %4446, label %originalBB1204, label %originalBB1204alteredBB

originalBB1204:                                   ; preds = %4438, %originalBB1204alteredBB
  %4447 = load i8*, i8** %19, align 8, !dbg !1812
  %4448 = load i64, i64* %29, align 8, !dbg !1812
  %4449 = getelementptr inbounds i8, i8* %4447, i64 %4448, !dbg !1812
  store i8 39, i8* %4449, align 1, !dbg !1812
  %4450 = load i32, i32* @x.19
  %4451 = load i32, i32* @y.20
  %4452 = sub i32 %4450, 1
  %4453 = mul i32 %4450, %4452
  %4454 = urem i32 %4453, 2
  %4455 = icmp eq i32 %4454, 0
  %4456 = icmp slt i32 %4451, 10
  %4457 = or i1 %4455, %4456
  br i1 %4457, label %originalBBpart21206, label %originalBB1204alteredBB

originalBBpart21206:                              ; preds = %originalBB1204
  br label %4458, !dbg !1812

4458:                                             ; preds = %originalBBpart21206, %originalBBpart21202
  %4459 = load i32, i32* @x.19
  %4460 = load i32, i32* @y.20
  %4461 = sub i32 %4459, 1
  %4462 = mul i32 %4459, %4461
  %4463 = urem i32 %4462, 2
  %4464 = icmp eq i32 %4463, 0
  %4465 = icmp slt i32 %4460, 10
  %4466 = or i1 %4464, %4465
  br i1 %4466, label %originalBB1208, label %originalBB1208alteredBB

originalBB1208:                                   ; preds = %4458, %originalBB1208alteredBB
  %4467 = load i64, i64* %29, align 8, !dbg !1815
  %4468 = add i64 %4467, 1, !dbg !1815
  store i64 %4468, i64* %29, align 8, !dbg !1815
  %4469 = load i32, i32* @x.19
  %4470 = load i32, i32* @y.20
  %4471 = sub i32 %4469, 1
  %4472 = mul i32 %4469, %4471
  %4473 = urem i32 %4472, 2
  %4474 = icmp eq i32 %4473, 0
  %4475 = icmp slt i32 %4470, 10
  %4476 = or i1 %4474, %4475
  br i1 %4476, label %originalBBpart21213, label %originalBB1208alteredBB

originalBBpart21213:                              ; preds = %originalBB1208
  br label %4477, !dbg !1815

4477:                                             ; preds = %originalBBpart21213
  %4478 = load i32, i32* @x.19
  %4479 = load i32, i32* @y.20
  %4480 = sub i32 %4478, 1
  %4481 = mul i32 %4478, %4480
  %4482 = urem i32 %4481, 2
  %4483 = icmp eq i32 %4482, 0
  %4484 = icmp slt i32 %4479, 10
  %4485 = or i1 %4483, %4484
  br i1 %4485, label %originalBB1215, label %originalBB1215alteredBB

originalBB1215:                                   ; preds = %4477, %originalBB1215alteredBB
  %4486 = load i32, i32* @x.19
  %4487 = load i32, i32* @y.20
  %4488 = sub i32 %4486, 1
  %4489 = mul i32 %4486, %4488
  %4490 = urem i32 %4489, 2
  %4491 = icmp eq i32 %4490, 0
  %4492 = icmp slt i32 %4487, 10
  %4493 = or i1 %4491, %4492
  br i1 %4493, label %originalBBpart21217, label %originalBB1215alteredBB

originalBBpart21217:                              ; preds = %originalBB1215
  br label %4494, !dbg !1810

4494:                                             ; preds = %originalBBpart21217
  %4495 = load i32, i32* @x.19
  %4496 = load i32, i32* @y.20
  %4497 = sub i32 %4495, 1
  %4498 = mul i32 %4495, %4497
  %4499 = urem i32 %4498, 2
  %4500 = icmp eq i32 %4499, 0
  %4501 = icmp slt i32 %4496, 10
  %4502 = or i1 %4500, %4501
  br i1 %4502, label %originalBB1219, label %originalBB1219alteredBB

originalBB1219:                                   ; preds = %4494, %originalBB1219alteredBB
  %4503 = load i64, i64* %29, align 8, !dbg !1816
  %4504 = load i64, i64* %20, align 8, !dbg !1816
  %4505 = icmp ult i64 %4503, %4504, !dbg !1816
  %4506 = load i32, i32* @x.19
  %4507 = load i32, i32* @y.20
  %4508 = sub i32 %4506, 1
  %4509 = mul i32 %4506, %4508
  %4510 = urem i32 %4509, 2
  %4511 = icmp eq i32 %4510, 0
  %4512 = icmp slt i32 %4507, 10
  %4513 = or i1 %4511, %4512
  br i1 %4513, label %originalBBpart21221, label %originalBB1219alteredBB

originalBBpart21221:                              ; preds = %originalBB1219
  br i1 %4505, label %4514, label %4534, !dbg !1819

4514:                                             ; preds = %originalBBpart21221
  %4515 = load i32, i32* @x.19
  %4516 = load i32, i32* @y.20
  %4517 = sub i32 %4515, 1
  %4518 = mul i32 %4515, %4517
  %4519 = urem i32 %4518, 2
  %4520 = icmp eq i32 %4519, 0
  %4521 = icmp slt i32 %4516, 10
  %4522 = or i1 %4520, %4521
  br i1 %4522, label %originalBB1223, label %originalBB1223alteredBB

originalBB1223:                                   ; preds = %4514, %originalBB1223alteredBB
  %4523 = load i8*, i8** %19, align 8, !dbg !1816
  %4524 = load i64, i64* %29, align 8, !dbg !1816
  %4525 = getelementptr inbounds i8, i8* %4523, i64 %4524, !dbg !1816
  store i8 36, i8* %4525, align 1, !dbg !1816
  %4526 = load i32, i32* @x.19
  %4527 = load i32, i32* @y.20
  %4528 = sub i32 %4526, 1
  %4529 = mul i32 %4526, %4528
  %4530 = urem i32 %4529, 2
  %4531 = icmp eq i32 %4530, 0
  %4532 = icmp slt i32 %4527, 10
  %4533 = or i1 %4531, %4532
  br i1 %4533, label %originalBBpart21225, label %originalBB1223alteredBB

originalBBpart21225:                              ; preds = %originalBB1223
  br label %4534, !dbg !1816

4534:                                             ; preds = %originalBBpart21225, %originalBBpart21221
  %4535 = load i32, i32* @x.19
  %4536 = load i32, i32* @y.20
  %4537 = sub i32 %4535, 1
  %4538 = mul i32 %4535, %4537
  %4539 = urem i32 %4538, 2
  %4540 = icmp eq i32 %4539, 0
  %4541 = icmp slt i32 %4536, 10
  %4542 = or i1 %4540, %4541
  br i1 %4542, label %originalBB1227, label %originalBB1227alteredBB

originalBB1227:                                   ; preds = %4534, %originalBB1227alteredBB
  %4543 = load i64, i64* %29, align 8, !dbg !1819
  %4544 = add i64 %4543, 1, !dbg !1819
  store i64 %4544, i64* %29, align 8, !dbg !1819
  %4545 = load i32, i32* @x.19
  %4546 = load i32, i32* @y.20
  %4547 = sub i32 %4545, 1
  %4548 = mul i32 %4545, %4547
  %4549 = urem i32 %4548, 2
  %4550 = icmp eq i32 %4549, 0
  %4551 = icmp slt i32 %4546, 10
  %4552 = or i1 %4550, %4551
  br i1 %4552, label %originalBBpart21242, label %originalBB1227alteredBB

originalBBpart21242:                              ; preds = %originalBB1227
  br label %4553, !dbg !1819

4553:                                             ; preds = %originalBBpart21242
  %4554 = load i32, i32* @x.19
  %4555 = load i32, i32* @y.20
  %4556 = sub i32 %4554, 1
  %4557 = mul i32 %4554, %4556
  %4558 = urem i32 %4557, 2
  %4559 = icmp eq i32 %4558, 0
  %4560 = icmp slt i32 %4555, 10
  %4561 = or i1 %4559, %4560
  br i1 %4561, label %originalBB1244, label %originalBB1244alteredBB

originalBB1244:                                   ; preds = %4553, %originalBB1244alteredBB
  %4562 = load i32, i32* @x.19
  %4563 = load i32, i32* @y.20
  %4564 = sub i32 %4562, 1
  %4565 = mul i32 %4562, %4564
  %4566 = urem i32 %4565, 2
  %4567 = icmp eq i32 %4566, 0
  %4568 = icmp slt i32 %4563, 10
  %4569 = or i1 %4567, %4568
  br i1 %4569, label %originalBBpart21246, label %originalBB1244alteredBB

originalBBpart21246:                              ; preds = %originalBB1244
  br label %4570, !dbg !1810

4570:                                             ; preds = %originalBBpart21246
  %4571 = load i32, i32* @x.19
  %4572 = load i32, i32* @y.20
  %4573 = sub i32 %4571, 1
  %4574 = mul i32 %4571, %4573
  %4575 = urem i32 %4574, 2
  %4576 = icmp eq i32 %4575, 0
  %4577 = icmp slt i32 %4572, 10
  %4578 = or i1 %4576, %4577
  br i1 %4578, label %originalBB1248, label %originalBB1248alteredBB

originalBB1248:                                   ; preds = %4570, %originalBB1248alteredBB
  %4579 = load i64, i64* %29, align 8, !dbg !1820
  %4580 = load i64, i64* %20, align 8, !dbg !1820
  %4581 = icmp ult i64 %4579, %4580, !dbg !1820
  %4582 = load i32, i32* @x.19
  %4583 = load i32, i32* @y.20
  %4584 = sub i32 %4582, 1
  %4585 = mul i32 %4582, %4584
  %4586 = urem i32 %4585, 2
  %4587 = icmp eq i32 %4586, 0
  %4588 = icmp slt i32 %4583, 10
  %4589 = or i1 %4587, %4588
  br i1 %4589, label %originalBBpart21250, label %originalBB1248alteredBB

originalBBpart21250:                              ; preds = %originalBB1248
  br i1 %4581, label %4590, label %4610, !dbg !1823

4590:                                             ; preds = %originalBBpart21250
  %4591 = load i32, i32* @x.19
  %4592 = load i32, i32* @y.20
  %4593 = sub i32 %4591, 1
  %4594 = mul i32 %4591, %4593
  %4595 = urem i32 %4594, 2
  %4596 = icmp eq i32 %4595, 0
  %4597 = icmp slt i32 %4592, 10
  %4598 = or i1 %4596, %4597
  br i1 %4598, label %originalBB1252, label %originalBB1252alteredBB

originalBB1252:                                   ; preds = %4590, %originalBB1252alteredBB
  %4599 = load i8*, i8** %19, align 8, !dbg !1820
  %4600 = load i64, i64* %29, align 8, !dbg !1820
  %4601 = getelementptr inbounds i8, i8* %4599, i64 %4600, !dbg !1820
  store i8 39, i8* %4601, align 1, !dbg !1820
  %4602 = load i32, i32* @x.19
  %4603 = load i32, i32* @y.20
  %4604 = sub i32 %4602, 1
  %4605 = mul i32 %4602, %4604
  %4606 = urem i32 %4605, 2
  %4607 = icmp eq i32 %4606, 0
  %4608 = icmp slt i32 %4603, 10
  %4609 = or i1 %4607, %4608
  br i1 %4609, label %originalBBpart21254, label %originalBB1252alteredBB

originalBBpart21254:                              ; preds = %originalBB1252
  br label %4610, !dbg !1820

4610:                                             ; preds = %originalBBpart21254, %originalBBpart21250
  %4611 = load i32, i32* @x.19
  %4612 = load i32, i32* @y.20
  %4613 = sub i32 %4611, 1
  %4614 = mul i32 %4611, %4613
  %4615 = urem i32 %4614, 2
  %4616 = icmp eq i32 %4615, 0
  %4617 = icmp slt i32 %4612, 10
  %4618 = or i1 %4616, %4617
  br i1 %4618, label %originalBB1256, label %originalBB1256alteredBB

originalBB1256:                                   ; preds = %4610, %originalBB1256alteredBB
  %4619 = load i64, i64* %29, align 8, !dbg !1823
  %4620 = add i64 %4619, 1, !dbg !1823
  store i64 %4620, i64* %29, align 8, !dbg !1823
  %4621 = load i32, i32* @x.19
  %4622 = load i32, i32* @y.20
  %4623 = sub i32 %4621, 1
  %4624 = mul i32 %4621, %4623
  %4625 = urem i32 %4624, 2
  %4626 = icmp eq i32 %4625, 0
  %4627 = icmp slt i32 %4622, 10
  %4628 = or i1 %4626, %4627
  br i1 %4628, label %originalBBpart21266, label %originalBB1256alteredBB

originalBBpart21266:                              ; preds = %originalBB1256
  br label %4629, !dbg !1823

4629:                                             ; preds = %originalBBpart21266
  %4630 = load i32, i32* @x.19
  %4631 = load i32, i32* @y.20
  %4632 = sub i32 %4630, 1
  %4633 = mul i32 %4630, %4632
  %4634 = urem i32 %4633, 2
  %4635 = icmp eq i32 %4634, 0
  %4636 = icmp slt i32 %4631, 10
  %4637 = or i1 %4635, %4636
  br i1 %4637, label %originalBB1268, label %originalBB1268alteredBB

originalBB1268:                                   ; preds = %4629, %originalBB1268alteredBB
  store i8 1, i8* %36, align 1, !dbg !1810
  %4638 = load i32, i32* @x.19
  %4639 = load i32, i32* @y.20
  %4640 = sub i32 %4638, 1
  %4641 = mul i32 %4638, %4640
  %4642 = urem i32 %4641, 2
  %4643 = icmp eq i32 %4642, 0
  %4644 = icmp slt i32 %4639, 10
  %4645 = or i1 %4643, %4644
  br i1 %4645, label %originalBBpart21270, label %originalBB1268alteredBB

originalBBpart21270:                              ; preds = %originalBB1268
  br label %4646, !dbg !1810

4646:                                             ; preds = %originalBBpart21270, %originalBBpart21194, %originalBBpart21190
  %4647 = load i32, i32* @x.19
  %4648 = load i32, i32* @y.20
  %4649 = sub i32 %4647, 1
  %4650 = mul i32 %4647, %4649
  %4651 = urem i32 %4650, 2
  %4652 = icmp eq i32 %4651, 0
  %4653 = icmp slt i32 %4648, 10
  %4654 = or i1 %4652, %4653
  br i1 %4654, label %originalBB1272, label %originalBB1272alteredBB

originalBB1272:                                   ; preds = %4646, %originalBB1272alteredBB
  %4655 = load i32, i32* @x.19
  %4656 = load i32, i32* @y.20
  %4657 = sub i32 %4655, 1
  %4658 = mul i32 %4655, %4657
  %4659 = urem i32 %4658, 2
  %4660 = icmp eq i32 %4659, 0
  %4661 = icmp slt i32 %4656, 10
  %4662 = or i1 %4660, %4661
  br i1 %4662, label %originalBBpart21274, label %originalBB1272alteredBB

originalBBpart21274:                              ; preds = %originalBB1272
  br label %4663, !dbg !1807

4663:                                             ; preds = %originalBBpart21274
  %4664 = load i32, i32* @x.19
  %4665 = load i32, i32* @y.20
  %4666 = sub i32 %4664, 1
  %4667 = mul i32 %4664, %4666
  %4668 = urem i32 %4667, 2
  %4669 = icmp eq i32 %4668, 0
  %4670 = icmp slt i32 %4665, 10
  %4671 = or i1 %4669, %4670
  br i1 %4671, label %originalBB1276, label %originalBB1276alteredBB

originalBB1276:                                   ; preds = %4663, %originalBB1276alteredBB
  %4672 = load i64, i64* %29, align 8, !dbg !1824
  %4673 = load i64, i64* %20, align 8, !dbg !1824
  %4674 = icmp ult i64 %4672, %4673, !dbg !1824
  %4675 = load i32, i32* @x.19
  %4676 = load i32, i32* @y.20
  %4677 = sub i32 %4675, 1
  %4678 = mul i32 %4675, %4677
  %4679 = urem i32 %4678, 2
  %4680 = icmp eq i32 %4679, 0
  %4681 = icmp slt i32 %4676, 10
  %4682 = or i1 %4680, %4681
  br i1 %4682, label %originalBBpart21278, label %originalBB1276alteredBB

originalBBpart21278:                              ; preds = %originalBB1276
  br i1 %4674, label %4683, label %4703, !dbg !1827

4683:                                             ; preds = %originalBBpart21278
  %4684 = load i32, i32* @x.19
  %4685 = load i32, i32* @y.20
  %4686 = sub i32 %4684, 1
  %4687 = mul i32 %4684, %4686
  %4688 = urem i32 %4687, 2
  %4689 = icmp eq i32 %4688, 0
  %4690 = icmp slt i32 %4685, 10
  %4691 = or i1 %4689, %4690
  br i1 %4691, label %originalBB1280, label %originalBB1280alteredBB

originalBB1280:                                   ; preds = %4683, %originalBB1280alteredBB
  %4692 = load i8*, i8** %19, align 8, !dbg !1824
  %4693 = load i64, i64* %29, align 8, !dbg !1824
  %4694 = getelementptr inbounds i8, i8* %4692, i64 %4693, !dbg !1824
  store i8 92, i8* %4694, align 1, !dbg !1824
  %4695 = load i32, i32* @x.19
  %4696 = load i32, i32* @y.20
  %4697 = sub i32 %4695, 1
  %4698 = mul i32 %4695, %4697
  %4699 = urem i32 %4698, 2
  %4700 = icmp eq i32 %4699, 0
  %4701 = icmp slt i32 %4696, 10
  %4702 = or i1 %4700, %4701
  br i1 %4702, label %originalBBpart21282, label %originalBB1280alteredBB

originalBBpart21282:                              ; preds = %originalBB1280
  br label %4703, !dbg !1824

4703:                                             ; preds = %originalBBpart21282, %originalBBpart21278
  %4704 = load i32, i32* @x.19
  %4705 = load i32, i32* @y.20
  %4706 = sub i32 %4704, 1
  %4707 = mul i32 %4704, %4706
  %4708 = urem i32 %4707, 2
  %4709 = icmp eq i32 %4708, 0
  %4710 = icmp slt i32 %4705, 10
  %4711 = or i1 %4709, %4710
  br i1 %4711, label %originalBB1284, label %originalBB1284alteredBB

originalBB1284:                                   ; preds = %4703, %originalBB1284alteredBB
  %4712 = load i64, i64* %29, align 8, !dbg !1827
  %4713 = add i64 %4712, 1, !dbg !1827
  store i64 %4713, i64* %29, align 8, !dbg !1827
  %4714 = load i32, i32* @x.19
  %4715 = load i32, i32* @y.20
  %4716 = sub i32 %4714, 1
  %4717 = mul i32 %4714, %4716
  %4718 = urem i32 %4717, 2
  %4719 = icmp eq i32 %4718, 0
  %4720 = icmp slt i32 %4715, 10
  %4721 = or i1 %4719, %4720
  br i1 %4721, label %originalBBpart21291, label %originalBB1284alteredBB

originalBBpart21291:                              ; preds = %originalBB1284
  br label %4722, !dbg !1827

4722:                                             ; preds = %originalBBpart21291
  %4723 = load i32, i32* @x.19
  %4724 = load i32, i32* @y.20
  %4725 = sub i32 %4723, 1
  %4726 = mul i32 %4723, %4725
  %4727 = urem i32 %4726, 2
  %4728 = icmp eq i32 %4727, 0
  %4729 = icmp slt i32 %4724, 10
  %4730 = or i1 %4728, %4729
  br i1 %4730, label %originalBB1293, label %originalBB1293alteredBB

originalBB1293:                                   ; preds = %4722, %originalBB1293alteredBB
  %4731 = load i32, i32* @x.19
  %4732 = load i32, i32* @y.20
  %4733 = sub i32 %4731, 1
  %4734 = mul i32 %4731, %4733
  %4735 = urem i32 %4734, 2
  %4736 = icmp eq i32 %4735, 0
  %4737 = icmp slt i32 %4732, 10
  %4738 = or i1 %4736, %4737
  br i1 %4738, label %originalBBpart21295, label %originalBB1293alteredBB

originalBBpart21295:                              ; preds = %originalBB1293
  br label %4739, !dbg !1807

4739:                                             ; preds = %originalBBpart21295
  %4740 = load i32, i32* @x.19
  %4741 = load i32, i32* @y.20
  %4742 = sub i32 %4740, 1
  %4743 = mul i32 %4740, %4742
  %4744 = urem i32 %4743, 2
  %4745 = icmp eq i32 %4744, 0
  %4746 = icmp slt i32 %4741, 10
  %4747 = or i1 %4745, %4746
  br i1 %4747, label %originalBB1297, label %originalBB1297alteredBB

originalBB1297:                                   ; preds = %4739, %originalBB1297alteredBB
  %4748 = load i32, i32* @x.19
  %4749 = load i32, i32* @y.20
  %4750 = sub i32 %4748, 1
  %4751 = mul i32 %4748, %4750
  %4752 = urem i32 %4751, 2
  %4753 = icmp eq i32 %4752, 0
  %4754 = icmp slt i32 %4749, 10
  %4755 = or i1 %4753, %4754
  br i1 %4755, label %originalBBpart21299, label %originalBB1297alteredBB

originalBBpart21299:                              ; preds = %originalBB1297
  br label %4756, !dbg !1828

4756:                                             ; preds = %originalBBpart21299
  %4757 = load i32, i32* @x.19
  %4758 = load i32, i32* @y.20
  %4759 = sub i32 %4757, 1
  %4760 = mul i32 %4757, %4759
  %4761 = urem i32 %4760, 2
  %4762 = icmp eq i32 %4761, 0
  %4763 = icmp slt i32 %4758, 10
  %4764 = or i1 %4762, %4763
  br i1 %4764, label %originalBB1301, label %originalBB1301alteredBB

originalBB1301:                                   ; preds = %4756, %originalBB1301alteredBB
  %4765 = load i64, i64* %29, align 8, !dbg !1829
  %4766 = load i64, i64* %20, align 8, !dbg !1829
  %4767 = icmp ult i64 %4765, %4766, !dbg !1829
  %4768 = load i32, i32* @x.19
  %4769 = load i32, i32* @y.20
  %4770 = sub i32 %4768, 1
  %4771 = mul i32 %4768, %4770
  %4772 = urem i32 %4771, 2
  %4773 = icmp eq i32 %4772, 0
  %4774 = icmp slt i32 %4769, 10
  %4775 = or i1 %4773, %4774
  br i1 %4775, label %originalBBpart21303, label %originalBB1301alteredBB

originalBBpart21303:                              ; preds = %originalBB1301
  br i1 %4767, label %4776, label %4801, !dbg !1832

4776:                                             ; preds = %originalBBpart21303
  %4777 = load i32, i32* @x.19
  %4778 = load i32, i32* @y.20
  %4779 = sub i32 %4777, 1
  %4780 = mul i32 %4777, %4779
  %4781 = urem i32 %4780, 2
  %4782 = icmp eq i32 %4781, 0
  %4783 = icmp slt i32 %4778, 10
  %4784 = or i1 %4782, %4783
  br i1 %4784, label %originalBB1305, label %originalBB1305alteredBB

originalBB1305:                                   ; preds = %4776, %originalBB1305alteredBB
  %4785 = load i8, i8* %39, align 1, !dbg !1829
  %4786 = zext i8 %4785 to i32, !dbg !1829
  %4787 = ashr i32 %4786, 6, !dbg !1829
  %4788 = add nsw i32 48, %4787, !dbg !1829
  %4789 = trunc i32 %4788 to i8, !dbg !1829
  %4790 = load i8*, i8** %19, align 8, !dbg !1829
  %4791 = load i64, i64* %29, align 8, !dbg !1829
  %4792 = getelementptr inbounds i8, i8* %4790, i64 %4791, !dbg !1829
  store i8 %4789, i8* %4792, align 1, !dbg !1829
  %4793 = load i32, i32* @x.19
  %4794 = load i32, i32* @y.20
  %4795 = sub i32 %4793, 1
  %4796 = mul i32 %4793, %4795
  %4797 = urem i32 %4796, 2
  %4798 = icmp eq i32 %4797, 0
  %4799 = icmp slt i32 %4794, 10
  %4800 = or i1 %4798, %4799
  br i1 %4800, label %originalBBpart21326, label %originalBB1305alteredBB

originalBBpart21326:                              ; preds = %originalBB1305
  br label %4801, !dbg !1829

4801:                                             ; preds = %originalBBpart21326, %originalBBpart21303
  %4802 = load i32, i32* @x.19
  %4803 = load i32, i32* @y.20
  %4804 = sub i32 %4802, 1
  %4805 = mul i32 %4802, %4804
  %4806 = urem i32 %4805, 2
  %4807 = icmp eq i32 %4806, 0
  %4808 = icmp slt i32 %4803, 10
  %4809 = or i1 %4807, %4808
  br i1 %4809, label %originalBB1328, label %originalBB1328alteredBB

originalBB1328:                                   ; preds = %4801, %originalBB1328alteredBB
  %4810 = load i64, i64* %29, align 8, !dbg !1832
  %4811 = add i64 %4810, 1, !dbg !1832
  store i64 %4811, i64* %29, align 8, !dbg !1832
  %4812 = load i32, i32* @x.19
  %4813 = load i32, i32* @y.20
  %4814 = sub i32 %4812, 1
  %4815 = mul i32 %4812, %4814
  %4816 = urem i32 %4815, 2
  %4817 = icmp eq i32 %4816, 0
  %4818 = icmp slt i32 %4813, 10
  %4819 = or i1 %4817, %4818
  br i1 %4819, label %originalBBpart21345, label %originalBB1328alteredBB

originalBBpart21345:                              ; preds = %originalBB1328
  br label %4820, !dbg !1832

4820:                                             ; preds = %originalBBpart21345
  %4821 = load i32, i32* @x.19
  %4822 = load i32, i32* @y.20
  %4823 = sub i32 %4821, 1
  %4824 = mul i32 %4821, %4823
  %4825 = urem i32 %4824, 2
  %4826 = icmp eq i32 %4825, 0
  %4827 = icmp slt i32 %4822, 10
  %4828 = or i1 %4826, %4827
  br i1 %4828, label %originalBB1347, label %originalBB1347alteredBB

originalBB1347:                                   ; preds = %4820, %originalBB1347alteredBB
  %4829 = load i32, i32* @x.19
  %4830 = load i32, i32* @y.20
  %4831 = sub i32 %4829, 1
  %4832 = mul i32 %4829, %4831
  %4833 = urem i32 %4832, 2
  %4834 = icmp eq i32 %4833, 0
  %4835 = icmp slt i32 %4830, 10
  %4836 = or i1 %4834, %4835
  br i1 %4836, label %originalBBpart21349, label %originalBB1347alteredBB

originalBBpart21349:                              ; preds = %originalBB1347
  br label %4837, !dbg !1833

4837:                                             ; preds = %originalBBpart21349
  %4838 = load i32, i32* @x.19
  %4839 = load i32, i32* @y.20
  %4840 = sub i32 %4838, 1
  %4841 = mul i32 %4838, %4840
  %4842 = urem i32 %4841, 2
  %4843 = icmp eq i32 %4842, 0
  %4844 = icmp slt i32 %4839, 10
  %4845 = or i1 %4843, %4844
  br i1 %4845, label %originalBB1351, label %originalBB1351alteredBB

originalBB1351:                                   ; preds = %4837, %originalBB1351alteredBB
  %4846 = load i64, i64* %29, align 8, !dbg !1834
  %4847 = load i64, i64* %20, align 8, !dbg !1834
  %4848 = icmp ult i64 %4846, %4847, !dbg !1834
  %4849 = load i32, i32* @x.19
  %4850 = load i32, i32* @y.20
  %4851 = sub i32 %4849, 1
  %4852 = mul i32 %4849, %4851
  %4853 = urem i32 %4852, 2
  %4854 = icmp eq i32 %4853, 0
  %4855 = icmp slt i32 %4850, 10
  %4856 = or i1 %4854, %4855
  br i1 %4856, label %originalBBpart21353, label %originalBB1351alteredBB

originalBBpart21353:                              ; preds = %originalBB1351
  br i1 %4848, label %4857, label %4883, !dbg !1837

4857:                                             ; preds = %originalBBpart21353
  %4858 = load i32, i32* @x.19
  %4859 = load i32, i32* @y.20
  %4860 = sub i32 %4858, 1
  %4861 = mul i32 %4858, %4860
  %4862 = urem i32 %4861, 2
  %4863 = icmp eq i32 %4862, 0
  %4864 = icmp slt i32 %4859, 10
  %4865 = or i1 %4863, %4864
  br i1 %4865, label %originalBB1355, label %originalBB1355alteredBB

originalBB1355:                                   ; preds = %4857, %originalBB1355alteredBB
  %4866 = load i8, i8* %39, align 1, !dbg !1834
  %4867 = zext i8 %4866 to i32, !dbg !1834
  %4868 = ashr i32 %4867, 3, !dbg !1834
  %4869 = and i32 %4868, 7, !dbg !1834
  %4870 = add nsw i32 48, %4869, !dbg !1834
  %4871 = trunc i32 %4870 to i8, !dbg !1834
  %4872 = load i8*, i8** %19, align 8, !dbg !1834
  %4873 = load i64, i64* %29, align 8, !dbg !1834
  %4874 = getelementptr inbounds i8, i8* %4872, i64 %4873, !dbg !1834
  store i8 %4871, i8* %4874, align 1, !dbg !1834
  %4875 = load i32, i32* @x.19
  %4876 = load i32, i32* @y.20
  %4877 = sub i32 %4875, 1
  %4878 = mul i32 %4875, %4877
  %4879 = urem i32 %4878, 2
  %4880 = icmp eq i32 %4879, 0
  %4881 = icmp slt i32 %4876, 10
  %4882 = or i1 %4880, %4881
  br i1 %4882, label %originalBBpart21377, label %originalBB1355alteredBB

originalBBpart21377:                              ; preds = %originalBB1355
  br label %4883, !dbg !1834

4883:                                             ; preds = %originalBBpart21377, %originalBBpart21353
  %4884 = load i32, i32* @x.19
  %4885 = load i32, i32* @y.20
  %4886 = sub i32 %4884, 1
  %4887 = mul i32 %4884, %4886
  %4888 = urem i32 %4887, 2
  %4889 = icmp eq i32 %4888, 0
  %4890 = icmp slt i32 %4885, 10
  %4891 = or i1 %4889, %4890
  br i1 %4891, label %originalBB1379, label %originalBB1379alteredBB

originalBB1379:                                   ; preds = %4883, %originalBB1379alteredBB
  %4892 = load i64, i64* %29, align 8, !dbg !1837
  %4893 = add i64 %4892, 1, !dbg !1837
  store i64 %4893, i64* %29, align 8, !dbg !1837
  %4894 = load i32, i32* @x.19
  %4895 = load i32, i32* @y.20
  %4896 = sub i32 %4894, 1
  %4897 = mul i32 %4894, %4896
  %4898 = urem i32 %4897, 2
  %4899 = icmp eq i32 %4898, 0
  %4900 = icmp slt i32 %4895, 10
  %4901 = or i1 %4899, %4900
  br i1 %4901, label %originalBBpart21392, label %originalBB1379alteredBB

originalBBpart21392:                              ; preds = %originalBB1379
  br label %4902, !dbg !1837

4902:                                             ; preds = %originalBBpart21392
  %4903 = load i32, i32* @x.19
  %4904 = load i32, i32* @y.20
  %4905 = sub i32 %4903, 1
  %4906 = mul i32 %4903, %4905
  %4907 = urem i32 %4906, 2
  %4908 = icmp eq i32 %4907, 0
  %4909 = icmp slt i32 %4904, 10
  %4910 = or i1 %4908, %4909
  br i1 %4910, label %originalBB1394, label %originalBB1394alteredBB

originalBB1394:                                   ; preds = %4902, %originalBB1394alteredBB
  %4911 = load i8, i8* %39, align 1, !dbg !1838
  %4912 = zext i8 %4911 to i32, !dbg !1838
  %4913 = and i32 %4912, 7, !dbg !1839
  %4914 = add nsw i32 48, %4913, !dbg !1840
  %4915 = trunc i32 %4914 to i8, !dbg !1841
  store i8 %4915, i8* %39, align 1, !dbg !1842
  %4916 = load i32, i32* @x.19
  %4917 = load i32, i32* @y.20
  %4918 = sub i32 %4916, 1
  %4919 = mul i32 %4916, %4918
  %4920 = urem i32 %4919, 2
  %4921 = icmp eq i32 %4920, 0
  %4922 = icmp slt i32 %4917, 10
  %4923 = or i1 %4921, %4922
  br i1 %4923, label %originalBBpart21406, label %originalBB1394alteredBB

originalBBpart21406:                              ; preds = %originalBB1394
  br label %5053, !dbg !1843

4924:                                             ; preds = %originalBBpart21174, %originalBBpart21170
  %4925 = load i32, i32* @x.19
  %4926 = load i32, i32* @y.20
  %4927 = sub i32 %4925, 1
  %4928 = mul i32 %4925, %4927
  %4929 = urem i32 %4928, 2
  %4930 = icmp eq i32 %4929, 0
  %4931 = icmp slt i32 %4926, 10
  %4932 = or i1 %4930, %4931
  br i1 %4932, label %originalBB1408, label %originalBB1408alteredBB

originalBB1408:                                   ; preds = %4924, %originalBB1408alteredBB
  %4933 = load i8, i8* %41, align 1, !dbg !1844
  %4934 = trunc i8 %4933 to i1, !dbg !1844
  %4935 = load i32, i32* @x.19
  %4936 = load i32, i32* @y.20
  %4937 = sub i32 %4935, 1
  %4938 = mul i32 %4935, %4937
  %4939 = urem i32 %4938, 2
  %4940 = icmp eq i32 %4939, 0
  %4941 = icmp slt i32 %4936, 10
  %4942 = or i1 %4940, %4941
  br i1 %4942, label %originalBBpart21410, label %originalBB1408alteredBB

originalBBpart21410:                              ; preds = %originalBB1408
  br i1 %4934, label %4943, label %5036, !dbg !1846

4943:                                             ; preds = %originalBBpart21410
  %4944 = load i32, i32* @x.19
  %4945 = load i32, i32* @y.20
  %4946 = sub i32 %4944, 1
  %4947 = mul i32 %4944, %4946
  %4948 = urem i32 %4947, 2
  %4949 = icmp eq i32 %4948, 0
  %4950 = icmp slt i32 %4945, 10
  %4951 = or i1 %4949, %4950
  br i1 %4951, label %originalBB1412, label %originalBB1412alteredBB

originalBB1412:                                   ; preds = %4943, %originalBB1412alteredBB
  %4952 = load i32, i32* @x.19
  %4953 = load i32, i32* @y.20
  %4954 = sub i32 %4952, 1
  %4955 = mul i32 %4952, %4954
  %4956 = urem i32 %4955, 2
  %4957 = icmp eq i32 %4956, 0
  %4958 = icmp slt i32 %4953, 10
  %4959 = or i1 %4957, %4958
  br i1 %4959, label %originalBBpart21414, label %originalBB1412alteredBB

originalBBpart21414:                              ; preds = %originalBB1412
  br label %4960, !dbg !1847

4960:                                             ; preds = %originalBBpart21414
  %4961 = load i32, i32* @x.19
  %4962 = load i32, i32* @y.20
  %4963 = sub i32 %4961, 1
  %4964 = mul i32 %4961, %4963
  %4965 = urem i32 %4964, 2
  %4966 = icmp eq i32 %4965, 0
  %4967 = icmp slt i32 %4962, 10
  %4968 = or i1 %4966, %4967
  br i1 %4968, label %originalBB1416, label %originalBB1416alteredBB

originalBB1416:                                   ; preds = %4960, %originalBB1416alteredBB
  %4969 = load i64, i64* %29, align 8, !dbg !1849
  %4970 = load i64, i64* %20, align 8, !dbg !1849
  %4971 = icmp ult i64 %4969, %4970, !dbg !1849
  %4972 = load i32, i32* @x.19
  %4973 = load i32, i32* @y.20
  %4974 = sub i32 %4972, 1
  %4975 = mul i32 %4972, %4974
  %4976 = urem i32 %4975, 2
  %4977 = icmp eq i32 %4976, 0
  %4978 = icmp slt i32 %4973, 10
  %4979 = or i1 %4977, %4978
  br i1 %4979, label %originalBBpart21418, label %originalBB1416alteredBB

originalBBpart21418:                              ; preds = %originalBB1416
  br i1 %4971, label %4980, label %5000, !dbg !1852

4980:                                             ; preds = %originalBBpart21418
  %4981 = load i32, i32* @x.19
  %4982 = load i32, i32* @y.20
  %4983 = sub i32 %4981, 1
  %4984 = mul i32 %4981, %4983
  %4985 = urem i32 %4984, 2
  %4986 = icmp eq i32 %4985, 0
  %4987 = icmp slt i32 %4982, 10
  %4988 = or i1 %4986, %4987
  br i1 %4988, label %originalBB1420, label %originalBB1420alteredBB

originalBB1420:                                   ; preds = %4980, %originalBB1420alteredBB
  %4989 = load i8*, i8** %19, align 8, !dbg !1849
  %4990 = load i64, i64* %29, align 8, !dbg !1849
  %4991 = getelementptr inbounds i8, i8* %4989, i64 %4990, !dbg !1849
  store i8 92, i8* %4991, align 1, !dbg !1849
  %4992 = load i32, i32* @x.19
  %4993 = load i32, i32* @y.20
  %4994 = sub i32 %4992, 1
  %4995 = mul i32 %4992, %4994
  %4996 = urem i32 %4995, 2
  %4997 = icmp eq i32 %4996, 0
  %4998 = icmp slt i32 %4993, 10
  %4999 = or i1 %4997, %4998
  br i1 %4999, label %originalBBpart21422, label %originalBB1420alteredBB

originalBBpart21422:                              ; preds = %originalBB1420
  br label %5000, !dbg !1849

5000:                                             ; preds = %originalBBpart21422, %originalBBpart21418
  %5001 = load i32, i32* @x.19
  %5002 = load i32, i32* @y.20
  %5003 = sub i32 %5001, 1
  %5004 = mul i32 %5001, %5003
  %5005 = urem i32 %5004, 2
  %5006 = icmp eq i32 %5005, 0
  %5007 = icmp slt i32 %5002, 10
  %5008 = or i1 %5006, %5007
  br i1 %5008, label %originalBB1424, label %originalBB1424alteredBB

originalBB1424:                                   ; preds = %5000, %originalBB1424alteredBB
  %5009 = load i64, i64* %29, align 8, !dbg !1852
  %5010 = add i64 %5009, 1, !dbg !1852
  store i64 %5010, i64* %29, align 8, !dbg !1852
  %5011 = load i32, i32* @x.19
  %5012 = load i32, i32* @y.20
  %5013 = sub i32 %5011, 1
  %5014 = mul i32 %5011, %5013
  %5015 = urem i32 %5014, 2
  %5016 = icmp eq i32 %5015, 0
  %5017 = icmp slt i32 %5012, 10
  %5018 = or i1 %5016, %5017
  br i1 %5018, label %originalBBpart21433, label %originalBB1424alteredBB

originalBBpart21433:                              ; preds = %originalBB1424
  br label %5019, !dbg !1852

5019:                                             ; preds = %originalBBpart21433
  %5020 = load i32, i32* @x.19
  %5021 = load i32, i32* @y.20
  %5022 = sub i32 %5020, 1
  %5023 = mul i32 %5020, %5022
  %5024 = urem i32 %5023, 2
  %5025 = icmp eq i32 %5024, 0
  %5026 = icmp slt i32 %5021, 10
  %5027 = or i1 %5025, %5026
  br i1 %5027, label %originalBB1435, label %originalBB1435alteredBB

originalBB1435:                                   ; preds = %5019, %originalBB1435alteredBB
  store i8 0, i8* %41, align 1, !dbg !1853
  %5028 = load i32, i32* @x.19
  %5029 = load i32, i32* @y.20
  %5030 = sub i32 %5028, 1
  %5031 = mul i32 %5028, %5030
  %5032 = urem i32 %5031, 2
  %5033 = icmp eq i32 %5032, 0
  %5034 = icmp slt i32 %5029, 10
  %5035 = or i1 %5033, %5034
  br i1 %5035, label %originalBBpart21437, label %originalBB1435alteredBB

originalBBpart21437:                              ; preds = %originalBB1435
  br label %5036, !dbg !1854

5036:                                             ; preds = %originalBBpart21437, %originalBBpart21410
  %5037 = load i32, i32* @x.19
  %5038 = load i32, i32* @y.20
  %5039 = sub i32 %5037, 1
  %5040 = mul i32 %5037, %5039
  %5041 = urem i32 %5040, 2
  %5042 = icmp eq i32 %5041, 0
  %5043 = icmp slt i32 %5038, 10
  %5044 = or i1 %5042, %5043
  br i1 %5044, label %originalBB1439, label %originalBB1439alteredBB

originalBB1439:                                   ; preds = %5036, %originalBB1439alteredBB
  %5045 = load i32, i32* @x.19
  %5046 = load i32, i32* @y.20
  %5047 = sub i32 %5045, 1
  %5048 = mul i32 %5045, %5047
  %5049 = urem i32 %5048, 2
  %5050 = icmp eq i32 %5049, 0
  %5051 = icmp slt i32 %5046, 10
  %5052 = or i1 %5050, %5051
  br i1 %5052, label %originalBBpart21441, label %originalBB1439alteredBB

originalBBpart21441:                              ; preds = %originalBB1439
  br label %5053

5053:                                             ; preds = %originalBBpart21441, %originalBBpart21406
  %5054 = load i32, i32* @x.19
  %5055 = load i32, i32* @y.20
  %5056 = sub i32 %5054, 1
  %5057 = mul i32 %5054, %5056
  %5058 = urem i32 %5057, 2
  %5059 = icmp eq i32 %5058, 0
  %5060 = icmp slt i32 %5055, 10
  %5061 = or i1 %5059, %5060
  br i1 %5061, label %originalBB1443, label %originalBB1443alteredBB

originalBB1443:                                   ; preds = %5053, %originalBB1443alteredBB
  %5062 = load i64, i64* %50, align 8, !dbg !1855
  %5063 = load i64, i64* %28, align 8, !dbg !1857
  %5064 = add i64 %5063, 1, !dbg !1858
  %5065 = icmp ule i64 %5062, %5064, !dbg !1859
  %5066 = load i32, i32* @x.19
  %5067 = load i32, i32* @y.20
  %5068 = sub i32 %5066, 1
  %5069 = mul i32 %5066, %5068
  %5070 = urem i32 %5069, 2
  %5071 = icmp eq i32 %5070, 0
  %5072 = icmp slt i32 %5067, 10
  %5073 = or i1 %5071, %5072
  br i1 %5073, label %originalBBpart21454, label %originalBB1443alteredBB

originalBBpart21454:                              ; preds = %originalBB1443
  br i1 %5065, label %5074, label %5091, !dbg !1860

5074:                                             ; preds = %originalBBpart21454
  %5075 = load i32, i32* @x.19
  %5076 = load i32, i32* @y.20
  %5077 = sub i32 %5075, 1
  %5078 = mul i32 %5075, %5077
  %5079 = urem i32 %5078, 2
  %5080 = icmp eq i32 %5079, 0
  %5081 = icmp slt i32 %5076, 10
  %5082 = or i1 %5080, %5081
  br i1 %5082, label %originalBB1456, label %originalBB1456alteredBB

originalBB1456:                                   ; preds = %5074, %originalBB1456alteredBB
  %5083 = load i32, i32* @x.19
  %5084 = load i32, i32* @y.20
  %5085 = sub i32 %5083, 1
  %5086 = mul i32 %5083, %5085
  %5087 = urem i32 %5086, 2
  %5088 = icmp eq i32 %5087, 0
  %5089 = icmp slt i32 %5084, 10
  %5090 = or i1 %5088, %5089
  br i1 %5090, label %originalBBpart21458, label %originalBB1456alteredBB

originalBBpart21458:                              ; preds = %originalBB1456
  br label %5431, !dbg !1861

5091:                                             ; preds = %originalBBpart21454
  %5092 = load i32, i32* @x.19
  %5093 = load i32, i32* @y.20
  %5094 = sub i32 %5092, 1
  %5095 = mul i32 %5092, %5094
  %5096 = urem i32 %5095, 2
  %5097 = icmp eq i32 %5096, 0
  %5098 = icmp slt i32 %5093, 10
  %5099 = or i1 %5097, %5098
  br i1 %5099, label %originalBB1460, label %originalBB1460alteredBB

originalBB1460:                                   ; preds = %5091, %originalBB1460alteredBB
  %5100 = load i32, i32* @x.19
  %5101 = load i32, i32* @y.20
  %5102 = sub i32 %5100, 1
  %5103 = mul i32 %5100, %5102
  %5104 = urem i32 %5103, 2
  %5105 = icmp eq i32 %5104, 0
  %5106 = icmp slt i32 %5101, 10
  %5107 = or i1 %5105, %5106
  br i1 %5107, label %originalBBpart21462, label %originalBB1460alteredBB

originalBBpart21462:                              ; preds = %originalBB1460
  br label %5108, !dbg !1862

5108:                                             ; preds = %originalBBpart21462
  %5109 = load i32, i32* @x.19
  %5110 = load i32, i32* @y.20
  %5111 = sub i32 %5109, 1
  %5112 = mul i32 %5109, %5111
  %5113 = urem i32 %5112, 2
  %5114 = icmp eq i32 %5113, 0
  %5115 = icmp slt i32 %5110, 10
  %5116 = or i1 %5114, %5115
  br i1 %5116, label %originalBB1464, label %originalBB1464alteredBB

originalBB1464:                                   ; preds = %5108, %originalBB1464alteredBB
  %5117 = load i8, i8* %36, align 1, !dbg !1863
  %5118 = trunc i8 %5117 to i1, !dbg !1863
  %5119 = load i32, i32* @x.19
  %5120 = load i32, i32* @y.20
  %5121 = sub i32 %5119, 1
  %5122 = mul i32 %5119, %5121
  %5123 = urem i32 %5122, 2
  %5124 = icmp eq i32 %5123, 0
  %5125 = icmp slt i32 %5120, 10
  %5126 = or i1 %5124, %5125
  br i1 %5126, label %originalBBpart21466, label %originalBB1464alteredBB

originalBBpart21466:                              ; preds = %originalBB1464
  br i1 %5118, label %5127, label %5315, !dbg !1863

5127:                                             ; preds = %originalBBpart21466
  %5128 = load i32, i32* @x.19
  %5129 = load i32, i32* @y.20
  %5130 = sub i32 %5128, 1
  %5131 = mul i32 %5128, %5130
  %5132 = urem i32 %5131, 2
  %5133 = icmp eq i32 %5132, 0
  %5134 = icmp slt i32 %5129, 10
  %5135 = or i1 %5133, %5134
  br i1 %5135, label %originalBB1468, label %originalBB1468alteredBB

originalBB1468:                                   ; preds = %5127, %originalBB1468alteredBB
  %5136 = load i8, i8* %42, align 1, !dbg !1863
  %5137 = trunc i8 %5136 to i1, !dbg !1863
  %5138 = load i32, i32* @x.19
  %5139 = load i32, i32* @y.20
  %5140 = sub i32 %5138, 1
  %5141 = mul i32 %5138, %5140
  %5142 = urem i32 %5141, 2
  %5143 = icmp eq i32 %5142, 0
  %5144 = icmp slt i32 %5139, 10
  %5145 = or i1 %5143, %5144
  br i1 %5145, label %originalBBpart21470, label %originalBB1468alteredBB

originalBBpart21470:                              ; preds = %originalBB1468
  br i1 %5137, label %5315, label %5146, !dbg !1866

5146:                                             ; preds = %originalBBpart21470
  %5147 = load i32, i32* @x.19
  %5148 = load i32, i32* @y.20
  %5149 = sub i32 %5147, 1
  %5150 = mul i32 %5147, %5149
  %5151 = urem i32 %5150, 2
  %5152 = icmp eq i32 %5151, 0
  %5153 = icmp slt i32 %5148, 10
  %5154 = or i1 %5152, %5153
  br i1 %5154, label %originalBB1472, label %originalBB1472alteredBB

originalBB1472:                                   ; preds = %5146, %originalBB1472alteredBB
  %5155 = load i32, i32* @x.19
  %5156 = load i32, i32* @y.20
  %5157 = sub i32 %5155, 1
  %5158 = mul i32 %5155, %5157
  %5159 = urem i32 %5158, 2
  %5160 = icmp eq i32 %5159, 0
  %5161 = icmp slt i32 %5156, 10
  %5162 = or i1 %5160, %5161
  br i1 %5162, label %originalBBpart21474, label %originalBB1472alteredBB

originalBBpart21474:                              ; preds = %originalBB1472
  br label %5163, !dbg !1867

5163:                                             ; preds = %originalBBpart21474
  %5164 = load i32, i32* @x.19
  %5165 = load i32, i32* @y.20
  %5166 = sub i32 %5164, 1
  %5167 = mul i32 %5164, %5166
  %5168 = urem i32 %5167, 2
  %5169 = icmp eq i32 %5168, 0
  %5170 = icmp slt i32 %5165, 10
  %5171 = or i1 %5169, %5170
  br i1 %5171, label %originalBB1476, label %originalBB1476alteredBB

originalBB1476:                                   ; preds = %5163, %originalBB1476alteredBB
  %5172 = load i64, i64* %29, align 8, !dbg !1869
  %5173 = load i64, i64* %20, align 8, !dbg !1869
  %5174 = icmp ult i64 %5172, %5173, !dbg !1869
  %5175 = load i32, i32* @x.19
  %5176 = load i32, i32* @y.20
  %5177 = sub i32 %5175, 1
  %5178 = mul i32 %5175, %5177
  %5179 = urem i32 %5178, 2
  %5180 = icmp eq i32 %5179, 0
  %5181 = icmp slt i32 %5176, 10
  %5182 = or i1 %5180, %5181
  br i1 %5182, label %originalBBpart21478, label %originalBB1476alteredBB

originalBBpart21478:                              ; preds = %originalBB1476
  br i1 %5174, label %5183, label %5203, !dbg !1872

5183:                                             ; preds = %originalBBpart21478
  %5184 = load i32, i32* @x.19
  %5185 = load i32, i32* @y.20
  %5186 = sub i32 %5184, 1
  %5187 = mul i32 %5184, %5186
  %5188 = urem i32 %5187, 2
  %5189 = icmp eq i32 %5188, 0
  %5190 = icmp slt i32 %5185, 10
  %5191 = or i1 %5189, %5190
  br i1 %5191, label %originalBB1480, label %originalBB1480alteredBB

originalBB1480:                                   ; preds = %5183, %originalBB1480alteredBB
  %5192 = load i8*, i8** %19, align 8, !dbg !1869
  %5193 = load i64, i64* %29, align 8, !dbg !1869
  %5194 = getelementptr inbounds i8, i8* %5192, i64 %5193, !dbg !1869
  store i8 39, i8* %5194, align 1, !dbg !1869
  %5195 = load i32, i32* @x.19
  %5196 = load i32, i32* @y.20
  %5197 = sub i32 %5195, 1
  %5198 = mul i32 %5195, %5197
  %5199 = urem i32 %5198, 2
  %5200 = icmp eq i32 %5199, 0
  %5201 = icmp slt i32 %5196, 10
  %5202 = or i1 %5200, %5201
  br i1 %5202, label %originalBBpart21482, label %originalBB1480alteredBB

originalBBpart21482:                              ; preds = %originalBB1480
  br label %5203, !dbg !1869

5203:                                             ; preds = %originalBBpart21482, %originalBBpart21478
  %5204 = load i32, i32* @x.19
  %5205 = load i32, i32* @y.20
  %5206 = sub i32 %5204, 1
  %5207 = mul i32 %5204, %5206
  %5208 = urem i32 %5207, 2
  %5209 = icmp eq i32 %5208, 0
  %5210 = icmp slt i32 %5205, 10
  %5211 = or i1 %5209, %5210
  br i1 %5211, label %originalBB1484, label %originalBB1484alteredBB

originalBB1484:                                   ; preds = %5203, %originalBB1484alteredBB
  %5212 = load i64, i64* %29, align 8, !dbg !1872
  %5213 = add i64 %5212, 1, !dbg !1872
  store i64 %5213, i64* %29, align 8, !dbg !1872
  %5214 = load i32, i32* @x.19
  %5215 = load i32, i32* @y.20
  %5216 = sub i32 %5214, 1
  %5217 = mul i32 %5214, %5216
  %5218 = urem i32 %5217, 2
  %5219 = icmp eq i32 %5218, 0
  %5220 = icmp slt i32 %5215, 10
  %5221 = or i1 %5219, %5220
  br i1 %5221, label %originalBBpart21488, label %originalBB1484alteredBB

originalBBpart21488:                              ; preds = %originalBB1484
  br label %5222, !dbg !1872

5222:                                             ; preds = %originalBBpart21488
  %5223 = load i32, i32* @x.19
  %5224 = load i32, i32* @y.20
  %5225 = sub i32 %5223, 1
  %5226 = mul i32 %5223, %5225
  %5227 = urem i32 %5226, 2
  %5228 = icmp eq i32 %5227, 0
  %5229 = icmp slt i32 %5224, 10
  %5230 = or i1 %5228, %5229
  br i1 %5230, label %originalBB1490, label %originalBB1490alteredBB

originalBB1490:                                   ; preds = %5222, %originalBB1490alteredBB
  %5231 = load i32, i32* @x.19
  %5232 = load i32, i32* @y.20
  %5233 = sub i32 %5231, 1
  %5234 = mul i32 %5231, %5233
  %5235 = urem i32 %5234, 2
  %5236 = icmp eq i32 %5235, 0
  %5237 = icmp slt i32 %5232, 10
  %5238 = or i1 %5236, %5237
  br i1 %5238, label %originalBBpart21492, label %originalBB1490alteredBB

originalBBpart21492:                              ; preds = %originalBB1490
  br label %5239, !dbg !1867

5239:                                             ; preds = %originalBBpart21492
  %5240 = load i32, i32* @x.19
  %5241 = load i32, i32* @y.20
  %5242 = sub i32 %5240, 1
  %5243 = mul i32 %5240, %5242
  %5244 = urem i32 %5243, 2
  %5245 = icmp eq i32 %5244, 0
  %5246 = icmp slt i32 %5241, 10
  %5247 = or i1 %5245, %5246
  br i1 %5247, label %originalBB1494, label %originalBB1494alteredBB

originalBB1494:                                   ; preds = %5239, %originalBB1494alteredBB
  %5248 = load i64, i64* %29, align 8, !dbg !1873
  %5249 = load i64, i64* %20, align 8, !dbg !1873
  %5250 = icmp ult i64 %5248, %5249, !dbg !1873
  %5251 = load i32, i32* @x.19
  %5252 = load i32, i32* @y.20
  %5253 = sub i32 %5251, 1
  %5254 = mul i32 %5251, %5253
  %5255 = urem i32 %5254, 2
  %5256 = icmp eq i32 %5255, 0
  %5257 = icmp slt i32 %5252, 10
  %5258 = or i1 %5256, %5257
  br i1 %5258, label %originalBBpart21496, label %originalBB1494alteredBB

originalBBpart21496:                              ; preds = %originalBB1494
  br i1 %5250, label %5259, label %5279, !dbg !1876

5259:                                             ; preds = %originalBBpart21496
  %5260 = load i32, i32* @x.19
  %5261 = load i32, i32* @y.20
  %5262 = sub i32 %5260, 1
  %5263 = mul i32 %5260, %5262
  %5264 = urem i32 %5263, 2
  %5265 = icmp eq i32 %5264, 0
  %5266 = icmp slt i32 %5261, 10
  %5267 = or i1 %5265, %5266
  br i1 %5267, label %originalBB1498, label %originalBB1498alteredBB

originalBB1498:                                   ; preds = %5259, %originalBB1498alteredBB
  %5268 = load i8*, i8** %19, align 8, !dbg !1873
  %5269 = load i64, i64* %29, align 8, !dbg !1873
  %5270 = getelementptr inbounds i8, i8* %5268, i64 %5269, !dbg !1873
  store i8 39, i8* %5270, align 1, !dbg !1873
  %5271 = load i32, i32* @x.19
  %5272 = load i32, i32* @y.20
  %5273 = sub i32 %5271, 1
  %5274 = mul i32 %5271, %5273
  %5275 = urem i32 %5274, 2
  %5276 = icmp eq i32 %5275, 0
  %5277 = icmp slt i32 %5272, 10
  %5278 = or i1 %5276, %5277
  br i1 %5278, label %originalBBpart21500, label %originalBB1498alteredBB

originalBBpart21500:                              ; preds = %originalBB1498
  br label %5279, !dbg !1873

5279:                                             ; preds = %originalBBpart21500, %originalBBpart21496
  %5280 = load i32, i32* @x.19
  %5281 = load i32, i32* @y.20
  %5282 = sub i32 %5280, 1
  %5283 = mul i32 %5280, %5282
  %5284 = urem i32 %5283, 2
  %5285 = icmp eq i32 %5284, 0
  %5286 = icmp slt i32 %5281, 10
  %5287 = or i1 %5285, %5286
  br i1 %5287, label %originalBB1502, label %originalBB1502alteredBB

originalBB1502:                                   ; preds = %5279, %originalBB1502alteredBB
  %5288 = load i64, i64* %29, align 8, !dbg !1876
  %5289 = add i64 %5288, 1, !dbg !1876
  store i64 %5289, i64* %29, align 8, !dbg !1876
  %5290 = load i32, i32* @x.19
  %5291 = load i32, i32* @y.20
  %5292 = sub i32 %5290, 1
  %5293 = mul i32 %5290, %5292
  %5294 = urem i32 %5293, 2
  %5295 = icmp eq i32 %5294, 0
  %5296 = icmp slt i32 %5291, 10
  %5297 = or i1 %5295, %5296
  br i1 %5297, label %originalBBpart21507, label %originalBB1502alteredBB

originalBBpart21507:                              ; preds = %originalBB1502
  br label %5298, !dbg !1876

5298:                                             ; preds = %originalBBpart21507
  %5299 = load i32, i32* @x.19
  %5300 = load i32, i32* @y.20
  %5301 = sub i32 %5299, 1
  %5302 = mul i32 %5299, %5301
  %5303 = urem i32 %5302, 2
  %5304 = icmp eq i32 %5303, 0
  %5305 = icmp slt i32 %5300, 10
  %5306 = or i1 %5304, %5305
  br i1 %5306, label %originalBB1509, label %originalBB1509alteredBB

originalBB1509:                                   ; preds = %5298, %originalBB1509alteredBB
  store i8 0, i8* %36, align 1, !dbg !1867
  %5307 = load i32, i32* @x.19
  %5308 = load i32, i32* @y.20
  %5309 = sub i32 %5307, 1
  %5310 = mul i32 %5307, %5309
  %5311 = urem i32 %5310, 2
  %5312 = icmp eq i32 %5311, 0
  %5313 = icmp slt i32 %5308, 10
  %5314 = or i1 %5312, %5313
  br i1 %5314, label %originalBBpart21511, label %originalBB1509alteredBB

originalBBpart21511:                              ; preds = %originalBB1509
  br label %5315, !dbg !1867

5315:                                             ; preds = %originalBBpart21511, %originalBBpart21470, %originalBBpart21466
  %5316 = load i32, i32* @x.19
  %5317 = load i32, i32* @y.20
  %5318 = sub i32 %5316, 1
  %5319 = mul i32 %5316, %5318
  %5320 = urem i32 %5319, 2
  %5321 = icmp eq i32 %5320, 0
  %5322 = icmp slt i32 %5317, 10
  %5323 = or i1 %5321, %5322
  br i1 %5323, label %originalBB1513, label %originalBB1513alteredBB

originalBB1513:                                   ; preds = %5315, %originalBB1513alteredBB
  %5324 = load i32, i32* @x.19
  %5325 = load i32, i32* @y.20
  %5326 = sub i32 %5324, 1
  %5327 = mul i32 %5324, %5326
  %5328 = urem i32 %5327, 2
  %5329 = icmp eq i32 %5328, 0
  %5330 = icmp slt i32 %5325, 10
  %5331 = or i1 %5329, %5330
  br i1 %5331, label %originalBBpart21515, label %originalBB1513alteredBB

originalBBpart21515:                              ; preds = %originalBB1513
  br label %5332, !dbg !1866

5332:                                             ; preds = %originalBBpart21515
  %5333 = load i32, i32* @x.19
  %5334 = load i32, i32* @y.20
  %5335 = sub i32 %5333, 1
  %5336 = mul i32 %5333, %5335
  %5337 = urem i32 %5336, 2
  %5338 = icmp eq i32 %5337, 0
  %5339 = icmp slt i32 %5334, 10
  %5340 = or i1 %5338, %5339
  br i1 %5340, label %originalBB1517, label %originalBB1517alteredBB

originalBB1517:                                   ; preds = %5332, %originalBB1517alteredBB
  %5341 = load i32, i32* @x.19
  %5342 = load i32, i32* @y.20
  %5343 = sub i32 %5341, 1
  %5344 = mul i32 %5341, %5343
  %5345 = urem i32 %5344, 2
  %5346 = icmp eq i32 %5345, 0
  %5347 = icmp slt i32 %5342, 10
  %5348 = or i1 %5346, %5347
  br i1 %5348, label %originalBBpart21519, label %originalBB1517alteredBB

originalBBpart21519:                              ; preds = %originalBB1517
  br label %5349, !dbg !1877

5349:                                             ; preds = %originalBBpart21519
  %5350 = load i32, i32* @x.19
  %5351 = load i32, i32* @y.20
  %5352 = sub i32 %5350, 1
  %5353 = mul i32 %5350, %5352
  %5354 = urem i32 %5353, 2
  %5355 = icmp eq i32 %5354, 0
  %5356 = icmp slt i32 %5351, 10
  %5357 = or i1 %5355, %5356
  br i1 %5357, label %originalBB1521, label %originalBB1521alteredBB

originalBB1521:                                   ; preds = %5349, %originalBB1521alteredBB
  %5358 = load i64, i64* %29, align 8, !dbg !1878
  %5359 = load i64, i64* %20, align 8, !dbg !1878
  %5360 = icmp ult i64 %5358, %5359, !dbg !1878
  %5361 = load i32, i32* @x.19
  %5362 = load i32, i32* @y.20
  %5363 = sub i32 %5361, 1
  %5364 = mul i32 %5361, %5363
  %5365 = urem i32 %5364, 2
  %5366 = icmp eq i32 %5365, 0
  %5367 = icmp slt i32 %5362, 10
  %5368 = or i1 %5366, %5367
  br i1 %5368, label %originalBBpart21523, label %originalBB1521alteredBB

originalBBpart21523:                              ; preds = %originalBB1521
  br i1 %5360, label %5369, label %5390, !dbg !1881

5369:                                             ; preds = %originalBBpart21523
  %5370 = load i32, i32* @x.19
  %5371 = load i32, i32* @y.20
  %5372 = sub i32 %5370, 1
  %5373 = mul i32 %5370, %5372
  %5374 = urem i32 %5373, 2
  %5375 = icmp eq i32 %5374, 0
  %5376 = icmp slt i32 %5371, 10
  %5377 = or i1 %5375, %5376
  br i1 %5377, label %originalBB1525, label %originalBB1525alteredBB

originalBB1525:                                   ; preds = %5369, %originalBB1525alteredBB
  %5378 = load i8, i8* %39, align 1, !dbg !1878
  %5379 = load i8*, i8** %19, align 8, !dbg !1878
  %5380 = load i64, i64* %29, align 8, !dbg !1878
  %5381 = getelementptr inbounds i8, i8* %5379, i64 %5380, !dbg !1878
  store i8 %5378, i8* %5381, align 1, !dbg !1878
  %5382 = load i32, i32* @x.19
  %5383 = load i32, i32* @y.20
  %5384 = sub i32 %5382, 1
  %5385 = mul i32 %5382, %5384
  %5386 = urem i32 %5385, 2
  %5387 = icmp eq i32 %5386, 0
  %5388 = icmp slt i32 %5383, 10
  %5389 = or i1 %5387, %5388
  br i1 %5389, label %originalBBpart21527, label %originalBB1525alteredBB

originalBBpart21527:                              ; preds = %originalBB1525
  br label %5390, !dbg !1878

5390:                                             ; preds = %originalBBpart21527, %originalBBpart21523
  %5391 = load i32, i32* @x.19
  %5392 = load i32, i32* @y.20
  %5393 = sub i32 %5391, 1
  %5394 = mul i32 %5391, %5393
  %5395 = urem i32 %5394, 2
  %5396 = icmp eq i32 %5395, 0
  %5397 = icmp slt i32 %5392, 10
  %5398 = or i1 %5396, %5397
  br i1 %5398, label %originalBB1529, label %originalBB1529alteredBB

originalBB1529:                                   ; preds = %5390, %originalBB1529alteredBB
  %5399 = load i64, i64* %29, align 8, !dbg !1881
  %5400 = add i64 %5399, 1, !dbg !1881
  store i64 %5400, i64* %29, align 8, !dbg !1881
  %5401 = load i32, i32* @x.19
  %5402 = load i32, i32* @y.20
  %5403 = sub i32 %5401, 1
  %5404 = mul i32 %5401, %5403
  %5405 = urem i32 %5404, 2
  %5406 = icmp eq i32 %5405, 0
  %5407 = icmp slt i32 %5402, 10
  %5408 = or i1 %5406, %5407
  br i1 %5408, label %originalBBpart21533, label %originalBB1529alteredBB

originalBBpart21533:                              ; preds = %originalBB1529
  br label %5409, !dbg !1881

5409:                                             ; preds = %originalBBpart21533
  %5410 = load i32, i32* @x.19
  %5411 = load i32, i32* @y.20
  %5412 = sub i32 %5410, 1
  %5413 = mul i32 %5410, %5412
  %5414 = urem i32 %5413, 2
  %5415 = icmp eq i32 %5414, 0
  %5416 = icmp slt i32 %5411, 10
  %5417 = or i1 %5415, %5416
  br i1 %5417, label %originalBB1535, label %originalBB1535alteredBB

originalBB1535:                                   ; preds = %5409, %originalBB1535alteredBB
  %5418 = load i8*, i8** %21, align 8, !dbg !1882
  %5419 = load i64, i64* %28, align 8, !dbg !1883
  %5420 = add i64 %5419, 1, !dbg !1883
  store i64 %5420, i64* %28, align 8, !dbg !1883
  %5421 = getelementptr inbounds i8, i8* %5418, i64 %5420, !dbg !1882
  %5422 = load i8, i8* %5421, align 1, !dbg !1882
  store i8 %5422, i8* %39, align 1, !dbg !1884
  %5423 = load i32, i32* @x.19
  %5424 = load i32, i32* @y.20
  %5425 = sub i32 %5423, 1
  %5426 = mul i32 %5423, %5425
  %5427 = urem i32 %5426, 2
  %5428 = icmp eq i32 %5427, 0
  %5429 = icmp slt i32 %5424, 10
  %5430 = or i1 %5428, %5429
  br i1 %5430, label %originalBBpart21543, label %originalBB1535alteredBB

originalBBpart21543:                              ; preds = %originalBB1535
  br label %4272, !dbg !1885, !llvm.loop !1886

5431:                                             ; preds = %originalBBpart21458
  %5432 = load i32, i32* @x.19
  %5433 = load i32, i32* @y.20
  %5434 = sub i32 %5432, 1
  %5435 = mul i32 %5432, %5434
  %5436 = urem i32 %5435, 2
  %5437 = icmp eq i32 %5436, 0
  %5438 = icmp slt i32 %5433, 10
  %5439 = or i1 %5437, %5438
  br i1 %5439, label %originalBB1545, label %originalBB1545alteredBB

originalBB1545:                                   ; preds = %5431, %originalBB1545alteredBB
  %5440 = load i32, i32* @x.19
  %5441 = load i32, i32* @y.20
  %5442 = sub i32 %5440, 1
  %5443 = mul i32 %5440, %5442
  %5444 = urem i32 %5443, 2
  %5445 = icmp eq i32 %5444, 0
  %5446 = icmp slt i32 %5441, 10
  %5447 = or i1 %5445, %5446
  br i1 %5447, label %originalBBpart21547, label %originalBB1545alteredBB

originalBBpart21547:                              ; preds = %originalBB1545
  br label %6070, !dbg !1889

5448:                                             ; preds = %originalBBpart21160, %originalBBpart21156
  %5449 = load i32, i32* @x.19
  %5450 = load i32, i32* @y.20
  %5451 = sub i32 %5449, 1
  %5452 = mul i32 %5449, %5451
  %5453 = urem i32 %5452, 2
  %5454 = icmp eq i32 %5453, 0
  %5455 = icmp slt i32 %5450, 10
  %5456 = or i1 %5454, %5455
  br i1 %5456, label %originalBB1549, label %originalBB1549alteredBB

originalBB1549:                                   ; preds = %5448, %originalBB1549alteredBB
  %5457 = load i32, i32* @x.19
  %5458 = load i32, i32* @y.20
  %5459 = sub i32 %5457, 1
  %5460 = mul i32 %5457, %5459
  %5461 = urem i32 %5460, 2
  %5462 = icmp eq i32 %5461, 0
  %5463 = icmp slt i32 %5458, 10
  %5464 = or i1 %5462, %5463
  br i1 %5464, label %originalBBpart21551, label %originalBB1549alteredBB

originalBBpart21551:                              ; preds = %originalBB1549
  br label %5465, !dbg !1890

5465:                                             ; preds = %originalBBpart21551, %originalBBpart2943, %originalBBpart2939, %originalBBpart2834, %originalBBpart2810, %originalBBpart2798, %originalBBpart2782, %originalBBpart2690, %originalBBpart2513
  %5466 = load i32, i32* @x.19
  %5467 = load i32, i32* @y.20
  %5468 = sub i32 %5466, 1
  %5469 = mul i32 %5466, %5468
  %5470 = urem i32 %5469, 2
  %5471 = icmp eq i32 %5470, 0
  %5472 = icmp slt i32 %5467, 10
  %5473 = or i1 %5471, %5472
  br i1 %5473, label %originalBB1553, label %originalBB1553alteredBB

originalBB1553:                                   ; preds = %5465, %originalBB1553alteredBB
  %5474 = load i8, i8* %33, align 1, !dbg !1891
  %5475 = trunc i8 %5474 to i1, !dbg !1891
  %5476 = load i32, i32* @x.19
  %5477 = load i32, i32* @y.20
  %5478 = sub i32 %5476, 1
  %5479 = mul i32 %5476, %5478
  %5480 = urem i32 %5479, 2
  %5481 = icmp eq i32 %5480, 0
  %5482 = icmp slt i32 %5477, 10
  %5483 = or i1 %5481, %5482
  br i1 %5483, label %originalBBpart21555, label %originalBB1553alteredBB

originalBBpart21555:                              ; preds = %originalBB1553
  br i1 %5475, label %5484, label %5503, !dbg !1893

5484:                                             ; preds = %originalBBpart21555
  %5485 = load i32, i32* @x.19
  %5486 = load i32, i32* @y.20
  %5487 = sub i32 %5485, 1
  %5488 = mul i32 %5485, %5487
  %5489 = urem i32 %5488, 2
  %5490 = icmp eq i32 %5489, 0
  %5491 = icmp slt i32 %5486, 10
  %5492 = or i1 %5490, %5491
  br i1 %5492, label %originalBB1557, label %originalBB1557alteredBB

originalBB1557:                                   ; preds = %5484, %originalBB1557alteredBB
  %5493 = load i32, i32* %23, align 4, !dbg !1894
  %5494 = icmp ne i32 %5493, 2, !dbg !1895
  %5495 = load i32, i32* @x.19
  %5496 = load i32, i32* @y.20
  %5497 = sub i32 %5495, 1
  %5498 = mul i32 %5495, %5497
  %5499 = urem i32 %5498, 2
  %5500 = icmp eq i32 %5499, 0
  %5501 = icmp slt i32 %5496, 10
  %5502 = or i1 %5500, %5501
  br i1 %5502, label %originalBBpart21559, label %originalBB1557alteredBB

originalBBpart21559:                              ; preds = %originalBB1557
  br i1 %5494, label %5522, label %5503, !dbg !1896

5503:                                             ; preds = %originalBBpart21559, %originalBBpart21555
  %5504 = load i32, i32* @x.19
  %5505 = load i32, i32* @y.20
  %5506 = sub i32 %5504, 1
  %5507 = mul i32 %5504, %5506
  %5508 = urem i32 %5507, 2
  %5509 = icmp eq i32 %5508, 0
  %5510 = icmp slt i32 %5505, 10
  %5511 = or i1 %5509, %5510
  br i1 %5511, label %originalBB1561, label %originalBB1561alteredBB

originalBB1561:                                   ; preds = %5503, %originalBB1561alteredBB
  %5512 = load i8, i8* %35, align 1, !dbg !1897
  %5513 = trunc i8 %5512 to i1, !dbg !1897
  %5514 = load i32, i32* @x.19
  %5515 = load i32, i32* @y.20
  %5516 = sub i32 %5514, 1
  %5517 = mul i32 %5514, %5516
  %5518 = urem i32 %5517, 2
  %5519 = icmp eq i32 %5518, 0
  %5520 = icmp slt i32 %5515, 10
  %5521 = or i1 %5519, %5520
  br i1 %5521, label %originalBBpart21563, label %originalBB1561alteredBB

originalBBpart21563:                              ; preds = %originalBB1561
  br i1 %5513, label %5522, label %5571, !dbg !1898

5522:                                             ; preds = %originalBBpart21563, %originalBBpart21559
  %5523 = load i32, i32* @x.19
  %5524 = load i32, i32* @y.20
  %5525 = sub i32 %5523, 1
  %5526 = mul i32 %5523, %5525
  %5527 = urem i32 %5526, 2
  %5528 = icmp eq i32 %5527, 0
  %5529 = icmp slt i32 %5524, 10
  %5530 = or i1 %5528, %5529
  br i1 %5530, label %originalBB1565, label %originalBB1565alteredBB

originalBB1565:                                   ; preds = %5522, %originalBB1565alteredBB
  %5531 = load i32*, i32** %25, align 8, !dbg !1899
  %5532 = icmp ne i32* %5531, null, !dbg !1899
  %5533 = load i32, i32* @x.19
  %5534 = load i32, i32* @y.20
  %5535 = sub i32 %5533, 1
  %5536 = mul i32 %5533, %5535
  %5537 = urem i32 %5536, 2
  %5538 = icmp eq i32 %5537, 0
  %5539 = icmp slt i32 %5534, 10
  %5540 = or i1 %5538, %5539
  br i1 %5540, label %originalBBpart21567, label %originalBB1565alteredBB

originalBBpart21567:                              ; preds = %originalBB1565
  br i1 %5532, label %5541, label %5571, !dbg !1900

5541:                                             ; preds = %originalBBpart21567
  %5542 = load i32, i32* @x.19
  %5543 = load i32, i32* @y.20
  %5544 = sub i32 %5542, 1
  %5545 = mul i32 %5542, %5544
  %5546 = urem i32 %5545, 2
  %5547 = icmp eq i32 %5546, 0
  %5548 = icmp slt i32 %5543, 10
  %5549 = or i1 %5547, %5548
  br i1 %5549, label %originalBB1569, label %originalBB1569alteredBB

originalBB1569:                                   ; preds = %5541, %originalBB1569alteredBB
  %5550 = load i32*, i32** %25, align 8, !dbg !1901
  %5551 = load i8, i8* %39, align 1, !dbg !1902
  %5552 = zext i8 %5551 to i64, !dbg !1902
  %5553 = udiv i64 %5552, 32, !dbg !1903
  %5554 = getelementptr inbounds i32, i32* %5550, i64 %5553, !dbg !1901
  %5555 = load i32, i32* %5554, align 4, !dbg !1901
  %5556 = load i8, i8* %39, align 1, !dbg !1904
  %5557 = zext i8 %5556 to i64, !dbg !1904
  %5558 = urem i64 %5557, 32, !dbg !1905
  %5559 = trunc i64 %5558 to i32, !dbg !1906
  %5560 = lshr i32 %5555, %5559, !dbg !1906
  %5561 = and i32 %5560, 1, !dbg !1907
  %5562 = icmp ne i32 %5561, 0, !dbg !1907
  %5563 = load i32, i32* @x.19
  %5564 = load i32, i32* @y.20
  %5565 = sub i32 %5563, 1
  %5566 = mul i32 %5563, %5565
  %5567 = urem i32 %5566, 2
  %5568 = icmp eq i32 %5567, 0
  %5569 = icmp slt i32 %5564, 10
  %5570 = or i1 %5568, %5569
  br i1 %5570, label %originalBBpart21599, label %originalBB1569alteredBB

originalBBpart21599:                              ; preds = %originalBB1569
  br i1 %5562, label %5607, label %5571, !dbg !1908

5571:                                             ; preds = %originalBBpart21599, %originalBBpart21567, %originalBBpart21563
  %5572 = load i32, i32* @x.19
  %5573 = load i32, i32* @y.20
  %5574 = sub i32 %5572, 1
  %5575 = mul i32 %5572, %5574
  %5576 = urem i32 %5575, 2
  %5577 = icmp eq i32 %5576, 0
  %5578 = icmp slt i32 %5573, 10
  %5579 = or i1 %5577, %5578
  br i1 %5579, label %originalBB1601, label %originalBB1601alteredBB

originalBB1601:                                   ; preds = %5571, %originalBB1601alteredBB
  %5580 = load i8, i8* %41, align 1, !dbg !1909
  %5581 = trunc i8 %5580 to i1, !dbg !1909
  %5582 = load i32, i32* @x.19
  %5583 = load i32, i32* @y.20
  %5584 = sub i32 %5582, 1
  %5585 = mul i32 %5582, %5584
  %5586 = urem i32 %5585, 2
  %5587 = icmp eq i32 %5586, 0
  %5588 = icmp slt i32 %5583, 10
  %5589 = or i1 %5587, %5588
  br i1 %5589, label %originalBBpart21603, label %originalBB1601alteredBB

originalBBpart21603:                              ; preds = %originalBB1601
  br i1 %5581, label %5607, label %5590, !dbg !1910

5590:                                             ; preds = %originalBBpart21603
  %5591 = load i32, i32* @x.19
  %5592 = load i32, i32* @y.20
  %5593 = sub i32 %5591, 1
  %5594 = mul i32 %5591, %5593
  %5595 = urem i32 %5594, 2
  %5596 = icmp eq i32 %5595, 0
  %5597 = icmp slt i32 %5592, 10
  %5598 = or i1 %5596, %5597
  br i1 %5598, label %originalBB1605, label %originalBB1605alteredBB

originalBB1605:                                   ; preds = %5590, %originalBB1605alteredBB
  %5599 = load i32, i32* @x.19
  %5600 = load i32, i32* @y.20
  %5601 = sub i32 %5599, 1
  %5602 = mul i32 %5599, %5601
  %5603 = urem i32 %5602, 2
  %5604 = icmp eq i32 %5603, 0
  %5605 = icmp slt i32 %5600, 10
  %5606 = or i1 %5604, %5605
  br i1 %5606, label %originalBBpart21607, label %originalBB1605alteredBB

originalBBpart21607:                              ; preds = %originalBB1605
  br label %6070, !dbg !1911

5607:                                             ; preds = %originalBBpart21603, %originalBBpart21599
  %5608 = load i32, i32* @x.19
  %5609 = load i32, i32* @y.20
  %5610 = sub i32 %5608, 1
  %5611 = mul i32 %5608, %5610
  %5612 = urem i32 %5611, 2
  %5613 = icmp eq i32 %5612, 0
  %5614 = icmp slt i32 %5609, 10
  %5615 = or i1 %5613, %5614
  br i1 %5615, label %originalBB1609, label %originalBB1609alteredBB

originalBB1609:                                   ; preds = %5607, %originalBB1609alteredBB
  %5616 = load i32, i32* @x.19
  %5617 = load i32, i32* @y.20
  %5618 = sub i32 %5616, 1
  %5619 = mul i32 %5616, %5618
  %5620 = urem i32 %5619, 2
  %5621 = icmp eq i32 %5620, 0
  %5622 = icmp slt i32 %5617, 10
  %5623 = or i1 %5621, %5622
  br i1 %5623, label %originalBBpart21611, label %originalBB1609alteredBB

originalBBpart21611:                              ; preds = %originalBB1609
  br label %5624, !dbg !1909

5624:                                             ; preds = %originalBBpart21611, %originalBBpart2778
  call void @llvm.dbg.label(metadata !1912), !dbg !1913
  %5625 = load i32, i32* @x.19
  %5626 = load i32, i32* @y.20
  %5627 = sub i32 %5625, 1
  %5628 = mul i32 %5625, %5627
  %5629 = urem i32 %5628, 2
  %5630 = icmp eq i32 %5629, 0
  %5631 = icmp slt i32 %5626, 10
  %5632 = or i1 %5630, %5631
  br i1 %5632, label %originalBB1613, label %originalBB1613alteredBB

originalBB1613:                                   ; preds = %5624, %originalBB1613alteredBB
  %5633 = load i32, i32* @x.19
  %5634 = load i32, i32* @y.20
  %5635 = sub i32 %5633, 1
  %5636 = mul i32 %5633, %5635
  %5637 = urem i32 %5636, 2
  %5638 = icmp eq i32 %5637, 0
  %5639 = icmp slt i32 %5634, 10
  %5640 = or i1 %5638, %5639
  br i1 %5640, label %originalBBpart21615, label %originalBB1613alteredBB

originalBBpart21615:                              ; preds = %originalBB1613
  br label %5641, !dbg !1914

5641:                                             ; preds = %originalBBpart21615
  %5642 = load i32, i32* @x.19
  %5643 = load i32, i32* @y.20
  %5644 = sub i32 %5642, 1
  %5645 = mul i32 %5642, %5644
  %5646 = urem i32 %5645, 2
  %5647 = icmp eq i32 %5646, 0
  %5648 = icmp slt i32 %5643, 10
  %5649 = or i1 %5647, %5648
  br i1 %5649, label %originalBB1617, label %originalBB1617alteredBB

originalBB1617:                                   ; preds = %5641, %originalBB1617alteredBB
  %5650 = load i8, i8* %35, align 1, !dbg !1915
  %5651 = trunc i8 %5650 to i1, !dbg !1915
  %5652 = load i32, i32* @x.19
  %5653 = load i32, i32* @y.20
  %5654 = sub i32 %5652, 1
  %5655 = mul i32 %5652, %5654
  %5656 = urem i32 %5655, 2
  %5657 = icmp eq i32 %5656, 0
  %5658 = icmp slt i32 %5653, 10
  %5659 = or i1 %5657, %5658
  br i1 %5659, label %originalBBpart21619, label %originalBB1617alteredBB

originalBBpart21619:                              ; preds = %originalBB1617
  br i1 %5651, label %5660, label %5677, !dbg !1918

5660:                                             ; preds = %originalBBpart21619
  %5661 = load i32, i32* @x.19
  %5662 = load i32, i32* @y.20
  %5663 = sub i32 %5661, 1
  %5664 = mul i32 %5661, %5663
  %5665 = urem i32 %5664, 2
  %5666 = icmp eq i32 %5665, 0
  %5667 = icmp slt i32 %5662, 10
  %5668 = or i1 %5666, %5667
  br i1 %5668, label %originalBB1621, label %originalBB1621alteredBB

originalBB1621:                                   ; preds = %5660, %originalBB1621alteredBB
  %5669 = load i32, i32* @x.19
  %5670 = load i32, i32* @y.20
  %5671 = sub i32 %5669, 1
  %5672 = mul i32 %5669, %5671
  %5673 = urem i32 %5672, 2
  %5674 = icmp eq i32 %5673, 0
  %5675 = icmp slt i32 %5670, 10
  %5676 = or i1 %5674, %5675
  br i1 %5676, label %originalBBpart21623, label %originalBB1621alteredBB

originalBBpart21623:                              ; preds = %originalBB1621
  br label %6990, !dbg !1915

5677:                                             ; preds = %originalBBpart21619
  %5678 = load i32, i32* @x.19
  %5679 = load i32, i32* @y.20
  %5680 = sub i32 %5678, 1
  %5681 = mul i32 %5678, %5680
  %5682 = urem i32 %5681, 2
  %5683 = icmp eq i32 %5682, 0
  %5684 = icmp slt i32 %5679, 10
  %5685 = or i1 %5683, %5684
  br i1 %5685, label %originalBB1625, label %originalBB1625alteredBB

originalBB1625:                                   ; preds = %5677, %originalBB1625alteredBB
  store i8 1, i8* %42, align 1, !dbg !1918
  %5686 = load i32, i32* %23, align 4, !dbg !1919
  %5687 = icmp eq i32 %5686, 2, !dbg !1919
  %5688 = load i32, i32* @x.19
  %5689 = load i32, i32* @y.20
  %5690 = sub i32 %5688, 1
  %5691 = mul i32 %5688, %5690
  %5692 = urem i32 %5691, 2
  %5693 = icmp eq i32 %5692, 0
  %5694 = icmp slt i32 %5689, 10
  %5695 = or i1 %5693, %5694
  br i1 %5695, label %originalBBpart21627, label %originalBB1625alteredBB

originalBBpart21627:                              ; preds = %originalBB1625
  br i1 %5687, label %5696, label %5960, !dbg !1919

5696:                                             ; preds = %originalBBpart21627
  %5697 = load i32, i32* @x.19
  %5698 = load i32, i32* @y.20
  %5699 = sub i32 %5697, 1
  %5700 = mul i32 %5697, %5699
  %5701 = urem i32 %5700, 2
  %5702 = icmp eq i32 %5701, 0
  %5703 = icmp slt i32 %5698, 10
  %5704 = or i1 %5702, %5703
  br i1 %5704, label %originalBB1629, label %originalBB1629alteredBB

originalBB1629:                                   ; preds = %5696, %originalBB1629alteredBB
  %5705 = load i8, i8* %36, align 1, !dbg !1919
  %5706 = trunc i8 %5705 to i1, !dbg !1919
  %5707 = load i32, i32* @x.19
  %5708 = load i32, i32* @y.20
  %5709 = sub i32 %5707, 1
  %5710 = mul i32 %5707, %5709
  %5711 = urem i32 %5710, 2
  %5712 = icmp eq i32 %5711, 0
  %5713 = icmp slt i32 %5708, 10
  %5714 = or i1 %5712, %5713
  br i1 %5714, label %originalBBpart21631, label %originalBB1629alteredBB

originalBBpart21631:                              ; preds = %originalBB1629
  br i1 %5706, label %5960, label %5715, !dbg !1918

5715:                                             ; preds = %originalBBpart21631
  %5716 = load i32, i32* @x.19
  %5717 = load i32, i32* @y.20
  %5718 = sub i32 %5716, 1
  %5719 = mul i32 %5716, %5718
  %5720 = urem i32 %5719, 2
  %5721 = icmp eq i32 %5720, 0
  %5722 = icmp slt i32 %5717, 10
  %5723 = or i1 %5721, %5722
  br i1 %5723, label %originalBB1633, label %originalBB1633alteredBB

originalBB1633:                                   ; preds = %5715, %originalBB1633alteredBB
  %5724 = load i32, i32* @x.19
  %5725 = load i32, i32* @y.20
  %5726 = sub i32 %5724, 1
  %5727 = mul i32 %5724, %5726
  %5728 = urem i32 %5727, 2
  %5729 = icmp eq i32 %5728, 0
  %5730 = icmp slt i32 %5725, 10
  %5731 = or i1 %5729, %5730
  br i1 %5731, label %originalBBpart21635, label %originalBB1633alteredBB

originalBBpart21635:                              ; preds = %originalBB1633
  br label %5732, !dbg !1921

5732:                                             ; preds = %originalBBpart21635
  %5733 = load i32, i32* @x.19
  %5734 = load i32, i32* @y.20
  %5735 = sub i32 %5733, 1
  %5736 = mul i32 %5733, %5735
  %5737 = urem i32 %5736, 2
  %5738 = icmp eq i32 %5737, 0
  %5739 = icmp slt i32 %5734, 10
  %5740 = or i1 %5738, %5739
  br i1 %5740, label %originalBB1637, label %originalBB1637alteredBB

originalBB1637:                                   ; preds = %5732, %originalBB1637alteredBB
  %5741 = load i64, i64* %29, align 8, !dbg !1923
  %5742 = load i64, i64* %20, align 8, !dbg !1923
  %5743 = icmp ult i64 %5741, %5742, !dbg !1923
  %5744 = load i32, i32* @x.19
  %5745 = load i32, i32* @y.20
  %5746 = sub i32 %5744, 1
  %5747 = mul i32 %5744, %5746
  %5748 = urem i32 %5747, 2
  %5749 = icmp eq i32 %5748, 0
  %5750 = icmp slt i32 %5745, 10
  %5751 = or i1 %5749, %5750
  br i1 %5751, label %originalBBpart21639, label %originalBB1637alteredBB

originalBBpart21639:                              ; preds = %originalBB1637
  br i1 %5743, label %5752, label %5772, !dbg !1926

5752:                                             ; preds = %originalBBpart21639
  %5753 = load i32, i32* @x.19
  %5754 = load i32, i32* @y.20
  %5755 = sub i32 %5753, 1
  %5756 = mul i32 %5753, %5755
  %5757 = urem i32 %5756, 2
  %5758 = icmp eq i32 %5757, 0
  %5759 = icmp slt i32 %5754, 10
  %5760 = or i1 %5758, %5759
  br i1 %5760, label %originalBB1641, label %originalBB1641alteredBB

originalBB1641:                                   ; preds = %5752, %originalBB1641alteredBB
  %5761 = load i8*, i8** %19, align 8, !dbg !1923
  %5762 = load i64, i64* %29, align 8, !dbg !1923
  %5763 = getelementptr inbounds i8, i8* %5761, i64 %5762, !dbg !1923
  store i8 39, i8* %5763, align 1, !dbg !1923
  %5764 = load i32, i32* @x.19
  %5765 = load i32, i32* @y.20
  %5766 = sub i32 %5764, 1
  %5767 = mul i32 %5764, %5766
  %5768 = urem i32 %5767, 2
  %5769 = icmp eq i32 %5768, 0
  %5770 = icmp slt i32 %5765, 10
  %5771 = or i1 %5769, %5770
  br i1 %5771, label %originalBBpart21643, label %originalBB1641alteredBB

originalBBpart21643:                              ; preds = %originalBB1641
  br label %5772, !dbg !1923

5772:                                             ; preds = %originalBBpart21643, %originalBBpart21639
  %5773 = load i32, i32* @x.19
  %5774 = load i32, i32* @y.20
  %5775 = sub i32 %5773, 1
  %5776 = mul i32 %5773, %5775
  %5777 = urem i32 %5776, 2
  %5778 = icmp eq i32 %5777, 0
  %5779 = icmp slt i32 %5774, 10
  %5780 = or i1 %5778, %5779
  br i1 %5780, label %originalBB1645, label %originalBB1645alteredBB

originalBB1645:                                   ; preds = %5772, %originalBB1645alteredBB
  %5781 = load i64, i64* %29, align 8, !dbg !1926
  %5782 = add i64 %5781, 1, !dbg !1926
  store i64 %5782, i64* %29, align 8, !dbg !1926
  %5783 = load i32, i32* @x.19
  %5784 = load i32, i32* @y.20
  %5785 = sub i32 %5783, 1
  %5786 = mul i32 %5783, %5785
  %5787 = urem i32 %5786, 2
  %5788 = icmp eq i32 %5787, 0
  %5789 = icmp slt i32 %5784, 10
  %5790 = or i1 %5788, %5789
  br i1 %5790, label %originalBBpart21659, label %originalBB1645alteredBB

originalBBpart21659:                              ; preds = %originalBB1645
  br label %5791, !dbg !1926

5791:                                             ; preds = %originalBBpart21659
  %5792 = load i32, i32* @x.19
  %5793 = load i32, i32* @y.20
  %5794 = sub i32 %5792, 1
  %5795 = mul i32 %5792, %5794
  %5796 = urem i32 %5795, 2
  %5797 = icmp eq i32 %5796, 0
  %5798 = icmp slt i32 %5793, 10
  %5799 = or i1 %5797, %5798
  br i1 %5799, label %originalBB1661, label %originalBB1661alteredBB

originalBB1661:                                   ; preds = %5791, %originalBB1661alteredBB
  %5800 = load i32, i32* @x.19
  %5801 = load i32, i32* @y.20
  %5802 = sub i32 %5800, 1
  %5803 = mul i32 %5800, %5802
  %5804 = urem i32 %5803, 2
  %5805 = icmp eq i32 %5804, 0
  %5806 = icmp slt i32 %5801, 10
  %5807 = or i1 %5805, %5806
  br i1 %5807, label %originalBBpart21663, label %originalBB1661alteredBB

originalBBpart21663:                              ; preds = %originalBB1661
  br label %5808, !dbg !1921

5808:                                             ; preds = %originalBBpart21663
  %5809 = load i32, i32* @x.19
  %5810 = load i32, i32* @y.20
  %5811 = sub i32 %5809, 1
  %5812 = mul i32 %5809, %5811
  %5813 = urem i32 %5812, 2
  %5814 = icmp eq i32 %5813, 0
  %5815 = icmp slt i32 %5810, 10
  %5816 = or i1 %5814, %5815
  br i1 %5816, label %originalBB1665, label %originalBB1665alteredBB

originalBB1665:                                   ; preds = %5808, %originalBB1665alteredBB
  %5817 = load i64, i64* %29, align 8, !dbg !1927
  %5818 = load i64, i64* %20, align 8, !dbg !1927
  %5819 = icmp ult i64 %5817, %5818, !dbg !1927
  %5820 = load i32, i32* @x.19
  %5821 = load i32, i32* @y.20
  %5822 = sub i32 %5820, 1
  %5823 = mul i32 %5820, %5822
  %5824 = urem i32 %5823, 2
  %5825 = icmp eq i32 %5824, 0
  %5826 = icmp slt i32 %5821, 10
  %5827 = or i1 %5825, %5826
  br i1 %5827, label %originalBBpart21667, label %originalBB1665alteredBB

originalBBpart21667:                              ; preds = %originalBB1665
  br i1 %5819, label %5828, label %5848, !dbg !1930

5828:                                             ; preds = %originalBBpart21667
  %5829 = load i32, i32* @x.19
  %5830 = load i32, i32* @y.20
  %5831 = sub i32 %5829, 1
  %5832 = mul i32 %5829, %5831
  %5833 = urem i32 %5832, 2
  %5834 = icmp eq i32 %5833, 0
  %5835 = icmp slt i32 %5830, 10
  %5836 = or i1 %5834, %5835
  br i1 %5836, label %originalBB1669, label %originalBB1669alteredBB

originalBB1669:                                   ; preds = %5828, %originalBB1669alteredBB
  %5837 = load i8*, i8** %19, align 8, !dbg !1927
  %5838 = load i64, i64* %29, align 8, !dbg !1927
  %5839 = getelementptr inbounds i8, i8* %5837, i64 %5838, !dbg !1927
  store i8 36, i8* %5839, align 1, !dbg !1927
  %5840 = load i32, i32* @x.19
  %5841 = load i32, i32* @y.20
  %5842 = sub i32 %5840, 1
  %5843 = mul i32 %5840, %5842
  %5844 = urem i32 %5843, 2
  %5845 = icmp eq i32 %5844, 0
  %5846 = icmp slt i32 %5841, 10
  %5847 = or i1 %5845, %5846
  br i1 %5847, label %originalBBpart21671, label %originalBB1669alteredBB

originalBBpart21671:                              ; preds = %originalBB1669
  br label %5848, !dbg !1927

5848:                                             ; preds = %originalBBpart21671, %originalBBpart21667
  %5849 = load i32, i32* @x.19
  %5850 = load i32, i32* @y.20
  %5851 = sub i32 %5849, 1
  %5852 = mul i32 %5849, %5851
  %5853 = urem i32 %5852, 2
  %5854 = icmp eq i32 %5853, 0
  %5855 = icmp slt i32 %5850, 10
  %5856 = or i1 %5854, %5855
  br i1 %5856, label %originalBB1673, label %originalBB1673alteredBB

originalBB1673:                                   ; preds = %5848, %originalBB1673alteredBB
  %5857 = load i64, i64* %29, align 8, !dbg !1930
  %5858 = add i64 %5857, 1, !dbg !1930
  store i64 %5858, i64* %29, align 8, !dbg !1930
  %5859 = load i32, i32* @x.19
  %5860 = load i32, i32* @y.20
  %5861 = sub i32 %5859, 1
  %5862 = mul i32 %5859, %5861
  %5863 = urem i32 %5862, 2
  %5864 = icmp eq i32 %5863, 0
  %5865 = icmp slt i32 %5860, 10
  %5866 = or i1 %5864, %5865
  br i1 %5866, label %originalBBpart21690, label %originalBB1673alteredBB

originalBBpart21690:                              ; preds = %originalBB1673
  br label %5867, !dbg !1930

5867:                                             ; preds = %originalBBpart21690
  %5868 = load i32, i32* @x.19
  %5869 = load i32, i32* @y.20
  %5870 = sub i32 %5868, 1
  %5871 = mul i32 %5868, %5870
  %5872 = urem i32 %5871, 2
  %5873 = icmp eq i32 %5872, 0
  %5874 = icmp slt i32 %5869, 10
  %5875 = or i1 %5873, %5874
  br i1 %5875, label %originalBB1692, label %originalBB1692alteredBB

originalBB1692:                                   ; preds = %5867, %originalBB1692alteredBB
  %5876 = load i32, i32* @x.19
  %5877 = load i32, i32* @y.20
  %5878 = sub i32 %5876, 1
  %5879 = mul i32 %5876, %5878
  %5880 = urem i32 %5879, 2
  %5881 = icmp eq i32 %5880, 0
  %5882 = icmp slt i32 %5877, 10
  %5883 = or i1 %5881, %5882
  br i1 %5883, label %originalBBpart21694, label %originalBB1692alteredBB

originalBBpart21694:                              ; preds = %originalBB1692
  br label %5884, !dbg !1921

5884:                                             ; preds = %originalBBpart21694
  %5885 = load i32, i32* @x.19
  %5886 = load i32, i32* @y.20
  %5887 = sub i32 %5885, 1
  %5888 = mul i32 %5885, %5887
  %5889 = urem i32 %5888, 2
  %5890 = icmp eq i32 %5889, 0
  %5891 = icmp slt i32 %5886, 10
  %5892 = or i1 %5890, %5891
  br i1 %5892, label %originalBB1696, label %originalBB1696alteredBB

originalBB1696:                                   ; preds = %5884, %originalBB1696alteredBB
  %5893 = load i64, i64* %29, align 8, !dbg !1931
  %5894 = load i64, i64* %20, align 8, !dbg !1931
  %5895 = icmp ult i64 %5893, %5894, !dbg !1931
  %5896 = load i32, i32* @x.19
  %5897 = load i32, i32* @y.20
  %5898 = sub i32 %5896, 1
  %5899 = mul i32 %5896, %5898
  %5900 = urem i32 %5899, 2
  %5901 = icmp eq i32 %5900, 0
  %5902 = icmp slt i32 %5897, 10
  %5903 = or i1 %5901, %5902
  br i1 %5903, label %originalBBpart21698, label %originalBB1696alteredBB

originalBBpart21698:                              ; preds = %originalBB1696
  br i1 %5895, label %5904, label %5924, !dbg !1934

5904:                                             ; preds = %originalBBpart21698
  %5905 = load i32, i32* @x.19
  %5906 = load i32, i32* @y.20
  %5907 = sub i32 %5905, 1
  %5908 = mul i32 %5905, %5907
  %5909 = urem i32 %5908, 2
  %5910 = icmp eq i32 %5909, 0
  %5911 = icmp slt i32 %5906, 10
  %5912 = or i1 %5910, %5911
  br i1 %5912, label %originalBB1700, label %originalBB1700alteredBB

originalBB1700:                                   ; preds = %5904, %originalBB1700alteredBB
  %5913 = load i8*, i8** %19, align 8, !dbg !1931
  %5914 = load i64, i64* %29, align 8, !dbg !1931
  %5915 = getelementptr inbounds i8, i8* %5913, i64 %5914, !dbg !1931
  store i8 39, i8* %5915, align 1, !dbg !1931
  %5916 = load i32, i32* @x.19
  %5917 = load i32, i32* @y.20
  %5918 = sub i32 %5916, 1
  %5919 = mul i32 %5916, %5918
  %5920 = urem i32 %5919, 2
  %5921 = icmp eq i32 %5920, 0
  %5922 = icmp slt i32 %5917, 10
  %5923 = or i1 %5921, %5922
  br i1 %5923, label %originalBBpart21702, label %originalBB1700alteredBB

originalBBpart21702:                              ; preds = %originalBB1700
  br label %5924, !dbg !1931

5924:                                             ; preds = %originalBBpart21702, %originalBBpart21698
  %5925 = load i32, i32* @x.19
  %5926 = load i32, i32* @y.20
  %5927 = sub i32 %5925, 1
  %5928 = mul i32 %5925, %5927
  %5929 = urem i32 %5928, 2
  %5930 = icmp eq i32 %5929, 0
  %5931 = icmp slt i32 %5926, 10
  %5932 = or i1 %5930, %5931
  br i1 %5932, label %originalBB1704, label %originalBB1704alteredBB

originalBB1704:                                   ; preds = %5924, %originalBB1704alteredBB
  %5933 = load i64, i64* %29, align 8, !dbg !1934
  %5934 = add i64 %5933, 1, !dbg !1934
  store i64 %5934, i64* %29, align 8, !dbg !1934
  %5935 = load i32, i32* @x.19
  %5936 = load i32, i32* @y.20
  %5937 = sub i32 %5935, 1
  %5938 = mul i32 %5935, %5937
  %5939 = urem i32 %5938, 2
  %5940 = icmp eq i32 %5939, 0
  %5941 = icmp slt i32 %5936, 10
  %5942 = or i1 %5940, %5941
  br i1 %5942, label %originalBBpart21723, label %originalBB1704alteredBB

originalBBpart21723:                              ; preds = %originalBB1704
  br label %5943, !dbg !1934

5943:                                             ; preds = %originalBBpart21723
  %5944 = load i32, i32* @x.19
  %5945 = load i32, i32* @y.20
  %5946 = sub i32 %5944, 1
  %5947 = mul i32 %5944, %5946
  %5948 = urem i32 %5947, 2
  %5949 = icmp eq i32 %5948, 0
  %5950 = icmp slt i32 %5945, 10
  %5951 = or i1 %5949, %5950
  br i1 %5951, label %originalBB1725, label %originalBB1725alteredBB

originalBB1725:                                   ; preds = %5943, %originalBB1725alteredBB
  store i8 1, i8* %36, align 1, !dbg !1921
  %5952 = load i32, i32* @x.19
  %5953 = load i32, i32* @y.20
  %5954 = sub i32 %5952, 1
  %5955 = mul i32 %5952, %5954
  %5956 = urem i32 %5955, 2
  %5957 = icmp eq i32 %5956, 0
  %5958 = icmp slt i32 %5953, 10
  %5959 = or i1 %5957, %5958
  br i1 %5959, label %originalBBpart21727, label %originalBB1725alteredBB

originalBBpart21727:                              ; preds = %originalBB1725
  br label %5960, !dbg !1921

5960:                                             ; preds = %originalBBpart21727, %originalBBpart21631, %originalBBpart21627
  %5961 = load i32, i32* @x.19
  %5962 = load i32, i32* @y.20
  %5963 = sub i32 %5961, 1
  %5964 = mul i32 %5961, %5963
  %5965 = urem i32 %5964, 2
  %5966 = icmp eq i32 %5965, 0
  %5967 = icmp slt i32 %5962, 10
  %5968 = or i1 %5966, %5967
  br i1 %5968, label %originalBB1729, label %originalBB1729alteredBB

originalBB1729:                                   ; preds = %5960, %originalBB1729alteredBB
  %5969 = load i32, i32* @x.19
  %5970 = load i32, i32* @y.20
  %5971 = sub i32 %5969, 1
  %5972 = mul i32 %5969, %5971
  %5973 = urem i32 %5972, 2
  %5974 = icmp eq i32 %5973, 0
  %5975 = icmp slt i32 %5970, 10
  %5976 = or i1 %5974, %5975
  br i1 %5976, label %originalBBpart21731, label %originalBB1729alteredBB

originalBBpart21731:                              ; preds = %originalBB1729
  br label %5977, !dbg !1918

5977:                                             ; preds = %originalBBpart21731
  %5978 = load i32, i32* @x.19
  %5979 = load i32, i32* @y.20
  %5980 = sub i32 %5978, 1
  %5981 = mul i32 %5978, %5980
  %5982 = urem i32 %5981, 2
  %5983 = icmp eq i32 %5982, 0
  %5984 = icmp slt i32 %5979, 10
  %5985 = or i1 %5983, %5984
  br i1 %5985, label %originalBB1733, label %originalBB1733alteredBB

originalBB1733:                                   ; preds = %5977, %originalBB1733alteredBB
  %5986 = load i64, i64* %29, align 8, !dbg !1935
  %5987 = load i64, i64* %20, align 8, !dbg !1935
  %5988 = icmp ult i64 %5986, %5987, !dbg !1935
  %5989 = load i32, i32* @x.19
  %5990 = load i32, i32* @y.20
  %5991 = sub i32 %5989, 1
  %5992 = mul i32 %5989, %5991
  %5993 = urem i32 %5992, 2
  %5994 = icmp eq i32 %5993, 0
  %5995 = icmp slt i32 %5990, 10
  %5996 = or i1 %5994, %5995
  br i1 %5996, label %originalBBpart21735, label %originalBB1733alteredBB

originalBBpart21735:                              ; preds = %originalBB1733
  br i1 %5988, label %5997, label %6017, !dbg !1938

5997:                                             ; preds = %originalBBpart21735
  %5998 = load i32, i32* @x.19
  %5999 = load i32, i32* @y.20
  %6000 = sub i32 %5998, 1
  %6001 = mul i32 %5998, %6000
  %6002 = urem i32 %6001, 2
  %6003 = icmp eq i32 %6002, 0
  %6004 = icmp slt i32 %5999, 10
  %6005 = or i1 %6003, %6004
  br i1 %6005, label %originalBB1737, label %originalBB1737alteredBB

originalBB1737:                                   ; preds = %5997, %originalBB1737alteredBB
  %6006 = load i8*, i8** %19, align 8, !dbg !1935
  %6007 = load i64, i64* %29, align 8, !dbg !1935
  %6008 = getelementptr inbounds i8, i8* %6006, i64 %6007, !dbg !1935
  store i8 92, i8* %6008, align 1, !dbg !1935
  %6009 = load i32, i32* @x.19
  %6010 = load i32, i32* @y.20
  %6011 = sub i32 %6009, 1
  %6012 = mul i32 %6009, %6011
  %6013 = urem i32 %6012, 2
  %6014 = icmp eq i32 %6013, 0
  %6015 = icmp slt i32 %6010, 10
  %6016 = or i1 %6014, %6015
  br i1 %6016, label %originalBBpart21739, label %originalBB1737alteredBB

originalBBpart21739:                              ; preds = %originalBB1737
  br label %6017, !dbg !1935

6017:                                             ; preds = %originalBBpart21739, %originalBBpart21735
  %6018 = load i32, i32* @x.19
  %6019 = load i32, i32* @y.20
  %6020 = sub i32 %6018, 1
  %6021 = mul i32 %6018, %6020
  %6022 = urem i32 %6021, 2
  %6023 = icmp eq i32 %6022, 0
  %6024 = icmp slt i32 %6019, 10
  %6025 = or i1 %6023, %6024
  br i1 %6025, label %originalBB1741, label %originalBB1741alteredBB

originalBB1741:                                   ; preds = %6017, %originalBB1741alteredBB
  %6026 = load i64, i64* %29, align 8, !dbg !1938
  %6027 = add i64 %6026, 1, !dbg !1938
  store i64 %6027, i64* %29, align 8, !dbg !1938
  %6028 = load i32, i32* @x.19
  %6029 = load i32, i32* @y.20
  %6030 = sub i32 %6028, 1
  %6031 = mul i32 %6028, %6030
  %6032 = urem i32 %6031, 2
  %6033 = icmp eq i32 %6032, 0
  %6034 = icmp slt i32 %6029, 10
  %6035 = or i1 %6033, %6034
  br i1 %6035, label %originalBBpart21747, label %originalBB1741alteredBB

originalBBpart21747:                              ; preds = %originalBB1741
  br label %6036, !dbg !1938

6036:                                             ; preds = %originalBBpart21747
  %6037 = load i32, i32* @x.19
  %6038 = load i32, i32* @y.20
  %6039 = sub i32 %6037, 1
  %6040 = mul i32 %6037, %6039
  %6041 = urem i32 %6040, 2
  %6042 = icmp eq i32 %6041, 0
  %6043 = icmp slt i32 %6038, 10
  %6044 = or i1 %6042, %6043
  br i1 %6044, label %originalBB1749, label %originalBB1749alteredBB

originalBB1749:                                   ; preds = %6036, %originalBB1749alteredBB
  %6045 = load i32, i32* @x.19
  %6046 = load i32, i32* @y.20
  %6047 = sub i32 %6045, 1
  %6048 = mul i32 %6045, %6047
  %6049 = urem i32 %6048, 2
  %6050 = icmp eq i32 %6049, 0
  %6051 = icmp slt i32 %6046, 10
  %6052 = or i1 %6050, %6051
  br i1 %6052, label %originalBBpart21751, label %originalBB1749alteredBB

originalBBpart21751:                              ; preds = %originalBB1749
  br label %6053, !dbg !1918

6053:                                             ; preds = %originalBBpart21751
  %6054 = load i32, i32* @x.19
  %6055 = load i32, i32* @y.20
  %6056 = sub i32 %6054, 1
  %6057 = mul i32 %6054, %6056
  %6058 = urem i32 %6057, 2
  %6059 = icmp eq i32 %6058, 0
  %6060 = icmp slt i32 %6055, 10
  %6061 = or i1 %6059, %6060
  br i1 %6061, label %originalBB1753, label %originalBB1753alteredBB

originalBB1753:                                   ; preds = %6053, %originalBB1753alteredBB
  %6062 = load i32, i32* @x.19
  %6063 = load i32, i32* @y.20
  %6064 = sub i32 %6062, 1
  %6065 = mul i32 %6062, %6064
  %6066 = urem i32 %6065, 2
  %6067 = icmp eq i32 %6066, 0
  %6068 = icmp slt i32 %6063, 10
  %6069 = or i1 %6067, %6068
  br i1 %6069, label %originalBBpart21755, label %originalBB1753alteredBB

originalBBpart21755:                              ; preds = %originalBB1753
  br label %6070, !dbg !1918

6070:                                             ; preds = %originalBBpart21755, %originalBBpart21607, %originalBBpart21547, %originalBBpart2750, %originalBBpart2734
  call void @llvm.dbg.label(metadata !1939), !dbg !1940
  %6071 = load i32, i32* @x.19
  %6072 = load i32, i32* @y.20
  %6073 = sub i32 %6071, 1
  %6074 = mul i32 %6071, %6073
  %6075 = urem i32 %6074, 2
  %6076 = icmp eq i32 %6075, 0
  %6077 = icmp slt i32 %6072, 10
  %6078 = or i1 %6076, %6077
  br i1 %6078, label %originalBB1757, label %originalBB1757alteredBB

originalBB1757:                                   ; preds = %6070, %originalBB1757alteredBB
  %6079 = load i32, i32* @x.19
  %6080 = load i32, i32* @y.20
  %6081 = sub i32 %6079, 1
  %6082 = mul i32 %6079, %6081
  %6083 = urem i32 %6082, 2
  %6084 = icmp eq i32 %6083, 0
  %6085 = icmp slt i32 %6080, 10
  %6086 = or i1 %6084, %6085
  br i1 %6086, label %originalBBpart21759, label %originalBB1757alteredBB

originalBBpart21759:                              ; preds = %originalBB1757
  br label %6087, !dbg !1941

6087:                                             ; preds = %originalBBpart21759
  %6088 = load i32, i32* @x.19
  %6089 = load i32, i32* @y.20
  %6090 = sub i32 %6088, 1
  %6091 = mul i32 %6088, %6090
  %6092 = urem i32 %6091, 2
  %6093 = icmp eq i32 %6092, 0
  %6094 = icmp slt i32 %6089, 10
  %6095 = or i1 %6093, %6094
  br i1 %6095, label %originalBB1761, label %originalBB1761alteredBB

originalBB1761:                                   ; preds = %6087, %originalBB1761alteredBB
  %6096 = load i8, i8* %36, align 1, !dbg !1942
  %6097 = trunc i8 %6096 to i1, !dbg !1942
  %6098 = load i32, i32* @x.19
  %6099 = load i32, i32* @y.20
  %6100 = sub i32 %6098, 1
  %6101 = mul i32 %6098, %6100
  %6102 = urem i32 %6101, 2
  %6103 = icmp eq i32 %6102, 0
  %6104 = icmp slt i32 %6099, 10
  %6105 = or i1 %6103, %6104
  br i1 %6105, label %originalBBpart21763, label %originalBB1761alteredBB

originalBBpart21763:                              ; preds = %originalBB1761
  br i1 %6097, label %6106, label %6294, !dbg !1942

6106:                                             ; preds = %originalBBpart21763
  %6107 = load i32, i32* @x.19
  %6108 = load i32, i32* @y.20
  %6109 = sub i32 %6107, 1
  %6110 = mul i32 %6107, %6109
  %6111 = urem i32 %6110, 2
  %6112 = icmp eq i32 %6111, 0
  %6113 = icmp slt i32 %6108, 10
  %6114 = or i1 %6112, %6113
  br i1 %6114, label %originalBB1765, label %originalBB1765alteredBB

originalBB1765:                                   ; preds = %6106, %originalBB1765alteredBB
  %6115 = load i8, i8* %42, align 1, !dbg !1942
  %6116 = trunc i8 %6115 to i1, !dbg !1942
  %6117 = load i32, i32* @x.19
  %6118 = load i32, i32* @y.20
  %6119 = sub i32 %6117, 1
  %6120 = mul i32 %6117, %6119
  %6121 = urem i32 %6120, 2
  %6122 = icmp eq i32 %6121, 0
  %6123 = icmp slt i32 %6118, 10
  %6124 = or i1 %6122, %6123
  br i1 %6124, label %originalBBpart21767, label %originalBB1765alteredBB

originalBBpart21767:                              ; preds = %originalBB1765
  br i1 %6116, label %6294, label %6125, !dbg !1945

6125:                                             ; preds = %originalBBpart21767
  %6126 = load i32, i32* @x.19
  %6127 = load i32, i32* @y.20
  %6128 = sub i32 %6126, 1
  %6129 = mul i32 %6126, %6128
  %6130 = urem i32 %6129, 2
  %6131 = icmp eq i32 %6130, 0
  %6132 = icmp slt i32 %6127, 10
  %6133 = or i1 %6131, %6132
  br i1 %6133, label %originalBB1769, label %originalBB1769alteredBB

originalBB1769:                                   ; preds = %6125, %originalBB1769alteredBB
  %6134 = load i32, i32* @x.19
  %6135 = load i32, i32* @y.20
  %6136 = sub i32 %6134, 1
  %6137 = mul i32 %6134, %6136
  %6138 = urem i32 %6137, 2
  %6139 = icmp eq i32 %6138, 0
  %6140 = icmp slt i32 %6135, 10
  %6141 = or i1 %6139, %6140
  br i1 %6141, label %originalBBpart21771, label %originalBB1769alteredBB

originalBBpart21771:                              ; preds = %originalBB1769
  br label %6142, !dbg !1946

6142:                                             ; preds = %originalBBpart21771
  %6143 = load i32, i32* @x.19
  %6144 = load i32, i32* @y.20
  %6145 = sub i32 %6143, 1
  %6146 = mul i32 %6143, %6145
  %6147 = urem i32 %6146, 2
  %6148 = icmp eq i32 %6147, 0
  %6149 = icmp slt i32 %6144, 10
  %6150 = or i1 %6148, %6149
  br i1 %6150, label %originalBB1773, label %originalBB1773alteredBB

originalBB1773:                                   ; preds = %6142, %originalBB1773alteredBB
  %6151 = load i64, i64* %29, align 8, !dbg !1948
  %6152 = load i64, i64* %20, align 8, !dbg !1948
  %6153 = icmp ult i64 %6151, %6152, !dbg !1948
  %6154 = load i32, i32* @x.19
  %6155 = load i32, i32* @y.20
  %6156 = sub i32 %6154, 1
  %6157 = mul i32 %6154, %6156
  %6158 = urem i32 %6157, 2
  %6159 = icmp eq i32 %6158, 0
  %6160 = icmp slt i32 %6155, 10
  %6161 = or i1 %6159, %6160
  br i1 %6161, label %originalBBpart21775, label %originalBB1773alteredBB

originalBBpart21775:                              ; preds = %originalBB1773
  br i1 %6153, label %6162, label %6182, !dbg !1951

6162:                                             ; preds = %originalBBpart21775
  %6163 = load i32, i32* @x.19
  %6164 = load i32, i32* @y.20
  %6165 = sub i32 %6163, 1
  %6166 = mul i32 %6163, %6165
  %6167 = urem i32 %6166, 2
  %6168 = icmp eq i32 %6167, 0
  %6169 = icmp slt i32 %6164, 10
  %6170 = or i1 %6168, %6169
  br i1 %6170, label %originalBB1777, label %originalBB1777alteredBB

originalBB1777:                                   ; preds = %6162, %originalBB1777alteredBB
  %6171 = load i8*, i8** %19, align 8, !dbg !1948
  %6172 = load i64, i64* %29, align 8, !dbg !1948
  %6173 = getelementptr inbounds i8, i8* %6171, i64 %6172, !dbg !1948
  store i8 39, i8* %6173, align 1, !dbg !1948
  %6174 = load i32, i32* @x.19
  %6175 = load i32, i32* @y.20
  %6176 = sub i32 %6174, 1
  %6177 = mul i32 %6174, %6176
  %6178 = urem i32 %6177, 2
  %6179 = icmp eq i32 %6178, 0
  %6180 = icmp slt i32 %6175, 10
  %6181 = or i1 %6179, %6180
  br i1 %6181, label %originalBBpart21779, label %originalBB1777alteredBB

originalBBpart21779:                              ; preds = %originalBB1777
  br label %6182, !dbg !1948

6182:                                             ; preds = %originalBBpart21779, %originalBBpart21775
  %6183 = load i32, i32* @x.19
  %6184 = load i32, i32* @y.20
  %6185 = sub i32 %6183, 1
  %6186 = mul i32 %6183, %6185
  %6187 = urem i32 %6186, 2
  %6188 = icmp eq i32 %6187, 0
  %6189 = icmp slt i32 %6184, 10
  %6190 = or i1 %6188, %6189
  br i1 %6190, label %originalBB1781, label %originalBB1781alteredBB

originalBB1781:                                   ; preds = %6182, %originalBB1781alteredBB
  %6191 = load i64, i64* %29, align 8, !dbg !1951
  %6192 = add i64 %6191, 1, !dbg !1951
  store i64 %6192, i64* %29, align 8, !dbg !1951
  %6193 = load i32, i32* @x.19
  %6194 = load i32, i32* @y.20
  %6195 = sub i32 %6193, 1
  %6196 = mul i32 %6193, %6195
  %6197 = urem i32 %6196, 2
  %6198 = icmp eq i32 %6197, 0
  %6199 = icmp slt i32 %6194, 10
  %6200 = or i1 %6198, %6199
  br i1 %6200, label %originalBBpart21789, label %originalBB1781alteredBB

originalBBpart21789:                              ; preds = %originalBB1781
  br label %6201, !dbg !1951

6201:                                             ; preds = %originalBBpart21789
  %6202 = load i32, i32* @x.19
  %6203 = load i32, i32* @y.20
  %6204 = sub i32 %6202, 1
  %6205 = mul i32 %6202, %6204
  %6206 = urem i32 %6205, 2
  %6207 = icmp eq i32 %6206, 0
  %6208 = icmp slt i32 %6203, 10
  %6209 = or i1 %6207, %6208
  br i1 %6209, label %originalBB1791, label %originalBB1791alteredBB

originalBB1791:                                   ; preds = %6201, %originalBB1791alteredBB
  %6210 = load i32, i32* @x.19
  %6211 = load i32, i32* @y.20
  %6212 = sub i32 %6210, 1
  %6213 = mul i32 %6210, %6212
  %6214 = urem i32 %6213, 2
  %6215 = icmp eq i32 %6214, 0
  %6216 = icmp slt i32 %6211, 10
  %6217 = or i1 %6215, %6216
  br i1 %6217, label %originalBBpart21793, label %originalBB1791alteredBB

originalBBpart21793:                              ; preds = %originalBB1791
  br label %6218, !dbg !1946

6218:                                             ; preds = %originalBBpart21793
  %6219 = load i32, i32* @x.19
  %6220 = load i32, i32* @y.20
  %6221 = sub i32 %6219, 1
  %6222 = mul i32 %6219, %6221
  %6223 = urem i32 %6222, 2
  %6224 = icmp eq i32 %6223, 0
  %6225 = icmp slt i32 %6220, 10
  %6226 = or i1 %6224, %6225
  br i1 %6226, label %originalBB1795, label %originalBB1795alteredBB

originalBB1795:                                   ; preds = %6218, %originalBB1795alteredBB
  %6227 = load i64, i64* %29, align 8, !dbg !1952
  %6228 = load i64, i64* %20, align 8, !dbg !1952
  %6229 = icmp ult i64 %6227, %6228, !dbg !1952
  %6230 = load i32, i32* @x.19
  %6231 = load i32, i32* @y.20
  %6232 = sub i32 %6230, 1
  %6233 = mul i32 %6230, %6232
  %6234 = urem i32 %6233, 2
  %6235 = icmp eq i32 %6234, 0
  %6236 = icmp slt i32 %6231, 10
  %6237 = or i1 %6235, %6236
  br i1 %6237, label %originalBBpart21797, label %originalBB1795alteredBB

originalBBpart21797:                              ; preds = %originalBB1795
  br i1 %6229, label %6238, label %6258, !dbg !1955

6238:                                             ; preds = %originalBBpart21797
  %6239 = load i32, i32* @x.19
  %6240 = load i32, i32* @y.20
  %6241 = sub i32 %6239, 1
  %6242 = mul i32 %6239, %6241
  %6243 = urem i32 %6242, 2
  %6244 = icmp eq i32 %6243, 0
  %6245 = icmp slt i32 %6240, 10
  %6246 = or i1 %6244, %6245
  br i1 %6246, label %originalBB1799, label %originalBB1799alteredBB

originalBB1799:                                   ; preds = %6238, %originalBB1799alteredBB
  %6247 = load i8*, i8** %19, align 8, !dbg !1952
  %6248 = load i64, i64* %29, align 8, !dbg !1952
  %6249 = getelementptr inbounds i8, i8* %6247, i64 %6248, !dbg !1952
  store i8 39, i8* %6249, align 1, !dbg !1952
  %6250 = load i32, i32* @x.19
  %6251 = load i32, i32* @y.20
  %6252 = sub i32 %6250, 1
  %6253 = mul i32 %6250, %6252
  %6254 = urem i32 %6253, 2
  %6255 = icmp eq i32 %6254, 0
  %6256 = icmp slt i32 %6251, 10
  %6257 = or i1 %6255, %6256
  br i1 %6257, label %originalBBpart21801, label %originalBB1799alteredBB

originalBBpart21801:                              ; preds = %originalBB1799
  br label %6258, !dbg !1952

6258:                                             ; preds = %originalBBpart21801, %originalBBpart21797
  %6259 = load i32, i32* @x.19
  %6260 = load i32, i32* @y.20
  %6261 = sub i32 %6259, 1
  %6262 = mul i32 %6259, %6261
  %6263 = urem i32 %6262, 2
  %6264 = icmp eq i32 %6263, 0
  %6265 = icmp slt i32 %6260, 10
  %6266 = or i1 %6264, %6265
  br i1 %6266, label %originalBB1803, label %originalBB1803alteredBB

originalBB1803:                                   ; preds = %6258, %originalBB1803alteredBB
  %6267 = load i64, i64* %29, align 8, !dbg !1955
  %6268 = add i64 %6267, 1, !dbg !1955
  store i64 %6268, i64* %29, align 8, !dbg !1955
  %6269 = load i32, i32* @x.19
  %6270 = load i32, i32* @y.20
  %6271 = sub i32 %6269, 1
  %6272 = mul i32 %6269, %6271
  %6273 = urem i32 %6272, 2
  %6274 = icmp eq i32 %6273, 0
  %6275 = icmp slt i32 %6270, 10
  %6276 = or i1 %6274, %6275
  br i1 %6276, label %originalBBpart21813, label %originalBB1803alteredBB

originalBBpart21813:                              ; preds = %originalBB1803
  br label %6277, !dbg !1955

6277:                                             ; preds = %originalBBpart21813
  %6278 = load i32, i32* @x.19
  %6279 = load i32, i32* @y.20
  %6280 = sub i32 %6278, 1
  %6281 = mul i32 %6278, %6280
  %6282 = urem i32 %6281, 2
  %6283 = icmp eq i32 %6282, 0
  %6284 = icmp slt i32 %6279, 10
  %6285 = or i1 %6283, %6284
  br i1 %6285, label %originalBB1815, label %originalBB1815alteredBB

originalBB1815:                                   ; preds = %6277, %originalBB1815alteredBB
  store i8 0, i8* %36, align 1, !dbg !1946
  %6286 = load i32, i32* @x.19
  %6287 = load i32, i32* @y.20
  %6288 = sub i32 %6286, 1
  %6289 = mul i32 %6286, %6288
  %6290 = urem i32 %6289, 2
  %6291 = icmp eq i32 %6290, 0
  %6292 = icmp slt i32 %6287, 10
  %6293 = or i1 %6291, %6292
  br i1 %6293, label %originalBBpart21817, label %originalBB1815alteredBB

originalBBpart21817:                              ; preds = %originalBB1815
  br label %6294, !dbg !1946

6294:                                             ; preds = %originalBBpart21817, %originalBBpart21767, %originalBBpart21763
  %6295 = load i32, i32* @x.19
  %6296 = load i32, i32* @y.20
  %6297 = sub i32 %6295, 1
  %6298 = mul i32 %6295, %6297
  %6299 = urem i32 %6298, 2
  %6300 = icmp eq i32 %6299, 0
  %6301 = icmp slt i32 %6296, 10
  %6302 = or i1 %6300, %6301
  br i1 %6302, label %originalBB1819, label %originalBB1819alteredBB

originalBB1819:                                   ; preds = %6294, %originalBB1819alteredBB
  %6303 = load i32, i32* @x.19
  %6304 = load i32, i32* @y.20
  %6305 = sub i32 %6303, 1
  %6306 = mul i32 %6303, %6305
  %6307 = urem i32 %6306, 2
  %6308 = icmp eq i32 %6307, 0
  %6309 = icmp slt i32 %6304, 10
  %6310 = or i1 %6308, %6309
  br i1 %6310, label %originalBBpart21821, label %originalBB1819alteredBB

originalBBpart21821:                              ; preds = %originalBB1819
  br label %6311, !dbg !1945

6311:                                             ; preds = %originalBBpart21821
  %6312 = load i32, i32* @x.19
  %6313 = load i32, i32* @y.20
  %6314 = sub i32 %6312, 1
  %6315 = mul i32 %6312, %6314
  %6316 = urem i32 %6315, 2
  %6317 = icmp eq i32 %6316, 0
  %6318 = icmp slt i32 %6313, 10
  %6319 = or i1 %6317, %6318
  br i1 %6319, label %originalBB1823, label %originalBB1823alteredBB

originalBB1823:                                   ; preds = %6311, %originalBB1823alteredBB
  %6320 = load i32, i32* @x.19
  %6321 = load i32, i32* @y.20
  %6322 = sub i32 %6320, 1
  %6323 = mul i32 %6320, %6322
  %6324 = urem i32 %6323, 2
  %6325 = icmp eq i32 %6324, 0
  %6326 = icmp slt i32 %6321, 10
  %6327 = or i1 %6325, %6326
  br i1 %6327, label %originalBBpart21825, label %originalBB1823alteredBB

originalBBpart21825:                              ; preds = %originalBB1823
  br label %6328, !dbg !1956

6328:                                             ; preds = %originalBBpart21825
  %6329 = load i32, i32* @x.19
  %6330 = load i32, i32* @y.20
  %6331 = sub i32 %6329, 1
  %6332 = mul i32 %6329, %6331
  %6333 = urem i32 %6332, 2
  %6334 = icmp eq i32 %6333, 0
  %6335 = icmp slt i32 %6330, 10
  %6336 = or i1 %6334, %6335
  br i1 %6336, label %originalBB1827, label %originalBB1827alteredBB

originalBB1827:                                   ; preds = %6328, %originalBB1827alteredBB
  %6337 = load i64, i64* %29, align 8, !dbg !1957
  %6338 = load i64, i64* %20, align 8, !dbg !1957
  %6339 = icmp ult i64 %6337, %6338, !dbg !1957
  %6340 = load i32, i32* @x.19
  %6341 = load i32, i32* @y.20
  %6342 = sub i32 %6340, 1
  %6343 = mul i32 %6340, %6342
  %6344 = urem i32 %6343, 2
  %6345 = icmp eq i32 %6344, 0
  %6346 = icmp slt i32 %6341, 10
  %6347 = or i1 %6345, %6346
  br i1 %6347, label %originalBBpart21829, label %originalBB1827alteredBB

originalBBpart21829:                              ; preds = %originalBB1827
  br i1 %6339, label %6348, label %6369, !dbg !1960

6348:                                             ; preds = %originalBBpart21829
  %6349 = load i32, i32* @x.19
  %6350 = load i32, i32* @y.20
  %6351 = sub i32 %6349, 1
  %6352 = mul i32 %6349, %6351
  %6353 = urem i32 %6352, 2
  %6354 = icmp eq i32 %6353, 0
  %6355 = icmp slt i32 %6350, 10
  %6356 = or i1 %6354, %6355
  br i1 %6356, label %originalBB1831, label %originalBB1831alteredBB

originalBB1831:                                   ; preds = %6348, %originalBB1831alteredBB
  %6357 = load i8, i8* %39, align 1, !dbg !1957
  %6358 = load i8*, i8** %19, align 8, !dbg !1957
  %6359 = load i64, i64* %29, align 8, !dbg !1957
  %6360 = getelementptr inbounds i8, i8* %6358, i64 %6359, !dbg !1957
  store i8 %6357, i8* %6360, align 1, !dbg !1957
  %6361 = load i32, i32* @x.19
  %6362 = load i32, i32* @y.20
  %6363 = sub i32 %6361, 1
  %6364 = mul i32 %6361, %6363
  %6365 = urem i32 %6364, 2
  %6366 = icmp eq i32 %6365, 0
  %6367 = icmp slt i32 %6362, 10
  %6368 = or i1 %6366, %6367
  br i1 %6368, label %originalBBpart21833, label %originalBB1831alteredBB

originalBBpart21833:                              ; preds = %originalBB1831
  br label %6369, !dbg !1957

6369:                                             ; preds = %originalBBpart21833, %originalBBpart21829
  %6370 = load i32, i32* @x.19
  %6371 = load i32, i32* @y.20
  %6372 = sub i32 %6370, 1
  %6373 = mul i32 %6370, %6372
  %6374 = urem i32 %6373, 2
  %6375 = icmp eq i32 %6374, 0
  %6376 = icmp slt i32 %6371, 10
  %6377 = or i1 %6375, %6376
  br i1 %6377, label %originalBB1835, label %originalBB1835alteredBB

originalBB1835:                                   ; preds = %6369, %originalBB1835alteredBB
  %6378 = load i64, i64* %29, align 8, !dbg !1960
  %6379 = add i64 %6378, 1, !dbg !1960
  store i64 %6379, i64* %29, align 8, !dbg !1960
  %6380 = load i32, i32* @x.19
  %6381 = load i32, i32* @y.20
  %6382 = sub i32 %6380, 1
  %6383 = mul i32 %6380, %6382
  %6384 = urem i32 %6383, 2
  %6385 = icmp eq i32 %6384, 0
  %6386 = icmp slt i32 %6381, 10
  %6387 = or i1 %6385, %6386
  br i1 %6387, label %originalBBpart21848, label %originalBB1835alteredBB

originalBBpart21848:                              ; preds = %originalBB1835
  br label %6388, !dbg !1960

6388:                                             ; preds = %originalBBpart21848
  %6389 = load i32, i32* @x.19
  %6390 = load i32, i32* @y.20
  %6391 = sub i32 %6389, 1
  %6392 = mul i32 %6389, %6391
  %6393 = urem i32 %6392, 2
  %6394 = icmp eq i32 %6393, 0
  %6395 = icmp slt i32 %6390, 10
  %6396 = or i1 %6394, %6395
  br i1 %6396, label %originalBB1850, label %originalBB1850alteredBB

originalBB1850:                                   ; preds = %6388, %originalBB1850alteredBB
  %6397 = load i8, i8* %43, align 1, !dbg !1961
  %6398 = trunc i8 %6397 to i1, !dbg !1961
  %6399 = load i32, i32* @x.19
  %6400 = load i32, i32* @y.20
  %6401 = sub i32 %6399, 1
  %6402 = mul i32 %6399, %6401
  %6403 = urem i32 %6402, 2
  %6404 = icmp eq i32 %6403, 0
  %6405 = icmp slt i32 %6400, 10
  %6406 = or i1 %6404, %6405
  br i1 %6406, label %originalBBpart21852, label %originalBB1850alteredBB

originalBBpart21852:                              ; preds = %originalBB1850
  br i1 %6398, label %6424, label %6407, !dbg !1963

6407:                                             ; preds = %originalBBpart21852
  %6408 = load i32, i32* @x.19
  %6409 = load i32, i32* @y.20
  %6410 = sub i32 %6408, 1
  %6411 = mul i32 %6408, %6410
  %6412 = urem i32 %6411, 2
  %6413 = icmp eq i32 %6412, 0
  %6414 = icmp slt i32 %6409, 10
  %6415 = or i1 %6413, %6414
  br i1 %6415, label %originalBB1854, label %originalBB1854alteredBB

originalBB1854:                                   ; preds = %6407, %originalBB1854alteredBB
  store i8 0, i8* %38, align 1, !dbg !1964
  %6416 = load i32, i32* @x.19
  %6417 = load i32, i32* @y.20
  %6418 = sub i32 %6416, 1
  %6419 = mul i32 %6416, %6418
  %6420 = urem i32 %6419, 2
  %6421 = icmp eq i32 %6420, 0
  %6422 = icmp slt i32 %6417, 10
  %6423 = or i1 %6421, %6422
  br i1 %6423, label %originalBBpart21856, label %originalBB1854alteredBB

originalBBpart21856:                              ; preds = %originalBB1854
  br label %6424, !dbg !1965

6424:                                             ; preds = %originalBBpart21856, %originalBBpart21852
  %6425 = load i32, i32* @x.19
  %6426 = load i32, i32* @y.20
  %6427 = sub i32 %6425, 1
  %6428 = mul i32 %6425, %6427
  %6429 = urem i32 %6428, 2
  %6430 = icmp eq i32 %6429, 0
  %6431 = icmp slt i32 %6426, 10
  %6432 = or i1 %6430, %6431
  br i1 %6432, label %originalBB1858, label %originalBB1858alteredBB

originalBB1858:                                   ; preds = %6424, %originalBB1858alteredBB
  %6433 = load i32, i32* @x.19
  %6434 = load i32, i32* @y.20
  %6435 = sub i32 %6433, 1
  %6436 = mul i32 %6433, %6435
  %6437 = urem i32 %6436, 2
  %6438 = icmp eq i32 %6437, 0
  %6439 = icmp slt i32 %6434, 10
  %6440 = or i1 %6438, %6439
  br i1 %6440, label %originalBBpart21860, label %originalBB1858alteredBB

originalBBpart21860:                              ; preds = %originalBB1858
  br label %6441, !dbg !1966

6441:                                             ; preds = %originalBBpart21860, %originalBBpart2505
  %6442 = load i32, i32* @x.19
  %6443 = load i32, i32* @y.20
  %6444 = sub i32 %6442, 1
  %6445 = mul i32 %6442, %6444
  %6446 = urem i32 %6445, 2
  %6447 = icmp eq i32 %6446, 0
  %6448 = icmp slt i32 %6443, 10
  %6449 = or i1 %6447, %6448
  br i1 %6449, label %originalBB1862, label %originalBB1862alteredBB

originalBB1862:                                   ; preds = %6441, %originalBB1862alteredBB
  %6450 = load i64, i64* %28, align 8, !dbg !1967
  %6451 = add i64 %6450, 1, !dbg !1967
  store i64 %6451, i64* %28, align 8, !dbg !1967
  %6452 = load i32, i32* @x.19
  %6453 = load i32, i32* @y.20
  %6454 = sub i32 %6452, 1
  %6455 = mul i32 %6452, %6454
  %6456 = urem i32 %6455, 2
  %6457 = icmp eq i32 %6456, 0
  %6458 = icmp slt i32 %6453, 10
  %6459 = or i1 %6457, %6458
  br i1 %6459, label %originalBBpart21871, label %originalBB1862alteredBB

originalBBpart21871:                              ; preds = %originalBB1862
  br label %762, !dbg !1968, !llvm.loop !1969

6460:                                             ; preds = %originalBBpart2201
  %6461 = load i32, i32* @x.19
  %6462 = load i32, i32* @y.20
  %6463 = sub i32 %6461, 1
  %6464 = mul i32 %6461, %6463
  %6465 = urem i32 %6464, 2
  %6466 = icmp eq i32 %6465, 0
  %6467 = icmp slt i32 %6462, 10
  %6468 = or i1 %6466, %6467
  br i1 %6468, label %originalBB1873, label %originalBB1873alteredBB

originalBB1873:                                   ; preds = %6460, %originalBB1873alteredBB
  %6469 = load i64, i64* %29, align 8, !dbg !1971
  %6470 = icmp eq i64 %6469, 0, !dbg !1973
  %6471 = load i32, i32* @x.19
  %6472 = load i32, i32* @y.20
  %6473 = sub i32 %6471, 1
  %6474 = mul i32 %6471, %6473
  %6475 = urem i32 %6474, 2
  %6476 = icmp eq i32 %6475, 0
  %6477 = icmp slt i32 %6472, 10
  %6478 = or i1 %6476, %6477
  br i1 %6478, label %originalBBpart21875, label %originalBB1873alteredBB

originalBBpart21875:                              ; preds = %originalBB1873
  br i1 %6470, label %6479, label %6534, !dbg !1974

6479:                                             ; preds = %originalBBpart21875
  %6480 = load i32, i32* @x.19
  %6481 = load i32, i32* @y.20
  %6482 = sub i32 %6480, 1
  %6483 = mul i32 %6480, %6482
  %6484 = urem i32 %6483, 2
  %6485 = icmp eq i32 %6484, 0
  %6486 = icmp slt i32 %6481, 10
  %6487 = or i1 %6485, %6486
  br i1 %6487, label %originalBB1877, label %originalBB1877alteredBB

originalBB1877:                                   ; preds = %6479, %originalBB1877alteredBB
  %6488 = load i32, i32* %23, align 4, !dbg !1975
  %6489 = icmp eq i32 %6488, 2, !dbg !1976
  %6490 = load i32, i32* @x.19
  %6491 = load i32, i32* @y.20
  %6492 = sub i32 %6490, 1
  %6493 = mul i32 %6490, %6492
  %6494 = urem i32 %6493, 2
  %6495 = icmp eq i32 %6494, 0
  %6496 = icmp slt i32 %6491, 10
  %6497 = or i1 %6495, %6496
  br i1 %6497, label %originalBBpart21879, label %originalBB1877alteredBB

originalBBpart21879:                              ; preds = %originalBB1877
  br i1 %6489, label %6498, label %6534, !dbg !1977

6498:                                             ; preds = %originalBBpart21879
  %6499 = load i32, i32* @x.19
  %6500 = load i32, i32* @y.20
  %6501 = sub i32 %6499, 1
  %6502 = mul i32 %6499, %6501
  %6503 = urem i32 %6502, 2
  %6504 = icmp eq i32 %6503, 0
  %6505 = icmp slt i32 %6500, 10
  %6506 = or i1 %6504, %6505
  br i1 %6506, label %originalBB1881, label %originalBB1881alteredBB

originalBB1881:                                   ; preds = %6498, %originalBB1881alteredBB
  %6507 = load i8, i8* %35, align 1, !dbg !1978
  %6508 = trunc i8 %6507 to i1, !dbg !1978
  %6509 = load i32, i32* @x.19
  %6510 = load i32, i32* @y.20
  %6511 = sub i32 %6509, 1
  %6512 = mul i32 %6509, %6511
  %6513 = urem i32 %6512, 2
  %6514 = icmp eq i32 %6513, 0
  %6515 = icmp slt i32 %6510, 10
  %6516 = or i1 %6514, %6515
  br i1 %6516, label %originalBBpart21883, label %originalBB1881alteredBB

originalBBpart21883:                              ; preds = %originalBB1881
  br i1 %6508, label %6517, label %6534, !dbg !1979

6517:                                             ; preds = %originalBBpart21883
  %6518 = load i32, i32* @x.19
  %6519 = load i32, i32* @y.20
  %6520 = sub i32 %6518, 1
  %6521 = mul i32 %6518, %6520
  %6522 = urem i32 %6521, 2
  %6523 = icmp eq i32 %6522, 0
  %6524 = icmp slt i32 %6519, 10
  %6525 = or i1 %6523, %6524
  br i1 %6525, label %originalBB1885, label %originalBB1885alteredBB

originalBB1885:                                   ; preds = %6517, %originalBB1885alteredBB
  %6526 = load i32, i32* @x.19
  %6527 = load i32, i32* @y.20
  %6528 = sub i32 %6526, 1
  %6529 = mul i32 %6526, %6528
  %6530 = urem i32 %6529, 2
  %6531 = icmp eq i32 %6530, 0
  %6532 = icmp slt i32 %6527, 10
  %6533 = or i1 %6531, %6532
  br i1 %6533, label %originalBBpart21887, label %originalBB1885alteredBB

originalBBpart21887:                              ; preds = %originalBB1885
  br label %6990, !dbg !1980

6534:                                             ; preds = %originalBBpart21883, %originalBBpart21879, %originalBBpart21875
  %6535 = load i32, i32* @x.19
  %6536 = load i32, i32* @y.20
  %6537 = sub i32 %6535, 1
  %6538 = mul i32 %6535, %6537
  %6539 = urem i32 %6538, 2
  %6540 = icmp eq i32 %6539, 0
  %6541 = icmp slt i32 %6536, 10
  %6542 = or i1 %6540, %6541
  br i1 %6542, label %originalBB1889, label %originalBB1889alteredBB

originalBB1889:                                   ; preds = %6534, %originalBB1889alteredBB
  %6543 = load i32, i32* %23, align 4, !dbg !1981
  %6544 = icmp eq i32 %6543, 2, !dbg !1983
  %6545 = load i32, i32* @x.19
  %6546 = load i32, i32* @y.20
  %6547 = sub i32 %6545, 1
  %6548 = mul i32 %6545, %6547
  %6549 = urem i32 %6548, 2
  %6550 = icmp eq i32 %6549, 0
  %6551 = icmp slt i32 %6546, 10
  %6552 = or i1 %6550, %6551
  br i1 %6552, label %originalBBpart21891, label %originalBB1889alteredBB

originalBBpart21891:                              ; preds = %originalBB1889
  br i1 %6544, label %6553, label %6726, !dbg !1984

6553:                                             ; preds = %originalBBpart21891
  %6554 = load i32, i32* @x.19
  %6555 = load i32, i32* @y.20
  %6556 = sub i32 %6554, 1
  %6557 = mul i32 %6554, %6556
  %6558 = urem i32 %6557, 2
  %6559 = icmp eq i32 %6558, 0
  %6560 = icmp slt i32 %6555, 10
  %6561 = or i1 %6559, %6560
  br i1 %6561, label %originalBB1893, label %originalBB1893alteredBB

originalBB1893:                                   ; preds = %6553, %originalBB1893alteredBB
  %6562 = load i8, i8* %35, align 1, !dbg !1985
  %6563 = trunc i8 %6562 to i1, !dbg !1985
  %6564 = load i32, i32* @x.19
  %6565 = load i32, i32* @y.20
  %6566 = sub i32 %6564, 1
  %6567 = mul i32 %6564, %6566
  %6568 = urem i32 %6567, 2
  %6569 = icmp eq i32 %6568, 0
  %6570 = icmp slt i32 %6565, 10
  %6571 = or i1 %6569, %6570
  br i1 %6571, label %originalBBpart21895, label %originalBB1893alteredBB

originalBBpart21895:                              ; preds = %originalBB1893
  br i1 %6563, label %6726, label %6572, !dbg !1986

6572:                                             ; preds = %originalBBpart21895
  %6573 = load i32, i32* @x.19
  %6574 = load i32, i32* @y.20
  %6575 = sub i32 %6573, 1
  %6576 = mul i32 %6573, %6575
  %6577 = urem i32 %6576, 2
  %6578 = icmp eq i32 %6577, 0
  %6579 = icmp slt i32 %6574, 10
  %6580 = or i1 %6578, %6579
  br i1 %6580, label %originalBB1897, label %originalBB1897alteredBB

originalBB1897:                                   ; preds = %6572, %originalBB1897alteredBB
  %6581 = load i8, i8* %37, align 1, !dbg !1987
  %6582 = trunc i8 %6581 to i1, !dbg !1987
  %6583 = load i32, i32* @x.19
  %6584 = load i32, i32* @y.20
  %6585 = sub i32 %6583, 1
  %6586 = mul i32 %6583, %6585
  %6587 = urem i32 %6586, 2
  %6588 = icmp eq i32 %6587, 0
  %6589 = icmp slt i32 %6584, 10
  %6590 = or i1 %6588, %6589
  br i1 %6590, label %originalBBpart21899, label %originalBB1897alteredBB

originalBBpart21899:                              ; preds = %originalBB1897
  br i1 %6582, label %6591, label %6726, !dbg !1988

6591:                                             ; preds = %originalBBpart21899
  %6592 = load i32, i32* @x.19
  %6593 = load i32, i32* @y.20
  %6594 = sub i32 %6592, 1
  %6595 = mul i32 %6592, %6594
  %6596 = urem i32 %6595, 2
  %6597 = icmp eq i32 %6596, 0
  %6598 = icmp slt i32 %6593, 10
  %6599 = or i1 %6597, %6598
  br i1 %6599, label %originalBB1901, label %originalBB1901alteredBB

originalBB1901:                                   ; preds = %6591, %originalBB1901alteredBB
  %6600 = load i8, i8* %38, align 1, !dbg !1989
  %6601 = trunc i8 %6600 to i1, !dbg !1989
  %6602 = load i32, i32* @x.19
  %6603 = load i32, i32* @y.20
  %6604 = sub i32 %6602, 1
  %6605 = mul i32 %6602, %6604
  %6606 = urem i32 %6605, 2
  %6607 = icmp eq i32 %6606, 0
  %6608 = icmp slt i32 %6603, 10
  %6609 = or i1 %6607, %6608
  br i1 %6609, label %originalBBpart21903, label %originalBB1901alteredBB

originalBBpart21903:                              ; preds = %originalBB1901
  br i1 %6601, label %6610, label %6636, !dbg !1992

6610:                                             ; preds = %originalBBpart21903
  %6611 = load i32, i32* @x.19
  %6612 = load i32, i32* @y.20
  %6613 = sub i32 %6611, 1
  %6614 = mul i32 %6611, %6613
  %6615 = urem i32 %6614, 2
  %6616 = icmp eq i32 %6615, 0
  %6617 = icmp slt i32 %6612, 10
  %6618 = or i1 %6616, %6617
  br i1 %6618, label %originalBB1905, label %originalBB1905alteredBB

originalBB1905:                                   ; preds = %6610, %originalBB1905alteredBB
  %6619 = load i8*, i8** %19, align 8, !dbg !1993
  %6620 = load i64, i64* %30, align 8, !dbg !1994
  %6621 = load i8*, i8** %21, align 8, !dbg !1995
  %6622 = load i64, i64* %22, align 8, !dbg !1996
  %6623 = load i32, i32* %24, align 4, !dbg !1997
  %6624 = load i32*, i32** %25, align 8, !dbg !1998
  %6625 = load i8*, i8** %26, align 8, !dbg !1999
  %6626 = load i8*, i8** %27, align 8, !dbg !2000
  %6627 = call i64 @quotearg_buffer_restyled(i8* %6619, i64 %6620, i8* %6621, i64 %6622, i32 5, i32 %6623, i32* %6624, i8* %6625, i8* %6626), !dbg !2001
  store i64 %6627, i64* %18, align 8, !dbg !2002
  %6628 = load i32, i32* @x.19
  %6629 = load i32, i32* @y.20
  %6630 = sub i32 %6628, 1
  %6631 = mul i32 %6628, %6630
  %6632 = urem i32 %6631, 2
  %6633 = icmp eq i32 %6632, 0
  %6634 = icmp slt i32 %6629, 10
  %6635 = or i1 %6633, %6634
  br i1 %6635, label %originalBBpart21907, label %originalBB1905alteredBB

originalBBpart21907:                              ; preds = %originalBB1905
  br label %7072, !dbg !2002

6636:                                             ; preds = %originalBBpart21903
  %6637 = load i32, i32* @x.19
  %6638 = load i32, i32* @y.20
  %6639 = sub i32 %6637, 1
  %6640 = mul i32 %6637, %6639
  %6641 = urem i32 %6640, 2
  %6642 = icmp eq i32 %6641, 0
  %6643 = icmp slt i32 %6638, 10
  %6644 = or i1 %6642, %6643
  br i1 %6644, label %originalBB1909, label %originalBB1909alteredBB

originalBB1909:                                   ; preds = %6636, %originalBB1909alteredBB
  %6645 = load i64, i64* %20, align 8, !dbg !2003
  %6646 = icmp ne i64 %6645, 0, !dbg !2003
  %6647 = load i32, i32* @x.19
  %6648 = load i32, i32* @y.20
  %6649 = sub i32 %6647, 1
  %6650 = mul i32 %6647, %6649
  %6651 = urem i32 %6650, 2
  %6652 = icmp eq i32 %6651, 0
  %6653 = icmp slt i32 %6648, 10
  %6654 = or i1 %6652, %6653
  br i1 %6654, label %originalBBpart21911, label %originalBB1909alteredBB

originalBBpart21911:                              ; preds = %originalBB1909
  br i1 %6646, label %6692, label %6655, !dbg !2005

6655:                                             ; preds = %originalBBpart21911
  %6656 = load i32, i32* @x.19
  %6657 = load i32, i32* @y.20
  %6658 = sub i32 %6656, 1
  %6659 = mul i32 %6656, %6658
  %6660 = urem i32 %6659, 2
  %6661 = icmp eq i32 %6660, 0
  %6662 = icmp slt i32 %6657, 10
  %6663 = or i1 %6661, %6662
  br i1 %6663, label %originalBB1913, label %originalBB1913alteredBB

originalBB1913:                                   ; preds = %6655, %originalBB1913alteredBB
  %6664 = load i64, i64* %30, align 8, !dbg !2006
  %6665 = icmp ne i64 %6664, 0, !dbg !2006
  %6666 = load i32, i32* @x.19
  %6667 = load i32, i32* @y.20
  %6668 = sub i32 %6666, 1
  %6669 = mul i32 %6666, %6668
  %6670 = urem i32 %6669, 2
  %6671 = icmp eq i32 %6670, 0
  %6672 = icmp slt i32 %6667, 10
  %6673 = or i1 %6671, %6672
  br i1 %6673, label %originalBBpart21915, label %originalBB1913alteredBB

originalBBpart21915:                              ; preds = %originalBB1913
  br i1 %6665, label %6674, label %6692, !dbg !2007

6674:                                             ; preds = %originalBBpart21915
  %6675 = load i32, i32* @x.19
  %6676 = load i32, i32* @y.20
  %6677 = sub i32 %6675, 1
  %6678 = mul i32 %6675, %6677
  %6679 = urem i32 %6678, 2
  %6680 = icmp eq i32 %6679, 0
  %6681 = icmp slt i32 %6676, 10
  %6682 = or i1 %6680, %6681
  br i1 %6682, label %originalBB1917, label %originalBB1917alteredBB

originalBB1917:                                   ; preds = %6674, %originalBB1917alteredBB
  %6683 = load i64, i64* %30, align 8, !dbg !2008
  store i64 %6683, i64* %20, align 8, !dbg !2010
  store i64 0, i64* %29, align 8, !dbg !2011
  %6684 = load i32, i32* @x.19
  %6685 = load i32, i32* @y.20
  %6686 = sub i32 %6684, 1
  %6687 = mul i32 %6684, %6686
  %6688 = urem i32 %6687, 2
  %6689 = icmp eq i32 %6688, 0
  %6690 = icmp slt i32 %6685, 10
  %6691 = or i1 %6689, %6690
  br i1 %6691, label %originalBBpart21919, label %originalBB1917alteredBB

originalBBpart21919:                              ; preds = %originalBB1917
  br label %66, !dbg !2012

6692:                                             ; preds = %originalBBpart21915, %originalBBpart21911
  %6693 = load i32, i32* @x.19
  %6694 = load i32, i32* @y.20
  %6695 = sub i32 %6693, 1
  %6696 = mul i32 %6693, %6695
  %6697 = urem i32 %6696, 2
  %6698 = icmp eq i32 %6697, 0
  %6699 = icmp slt i32 %6694, 10
  %6700 = or i1 %6698, %6699
  br i1 %6700, label %originalBB1921, label %originalBB1921alteredBB

originalBB1921:                                   ; preds = %6692, %originalBB1921alteredBB
  %6701 = load i32, i32* @x.19
  %6702 = load i32, i32* @y.20
  %6703 = sub i32 %6701, 1
  %6704 = mul i32 %6701, %6703
  %6705 = urem i32 %6704, 2
  %6706 = icmp eq i32 %6705, 0
  %6707 = icmp slt i32 %6702, 10
  %6708 = or i1 %6706, %6707
  br i1 %6708, label %originalBBpart21923, label %originalBB1921alteredBB

originalBBpart21923:                              ; preds = %originalBB1921
  br label %6709

6709:                                             ; preds = %originalBBpart21923
  %6710 = load i32, i32* @x.19
  %6711 = load i32, i32* @y.20
  %6712 = sub i32 %6710, 1
  %6713 = mul i32 %6710, %6712
  %6714 = urem i32 %6713, 2
  %6715 = icmp eq i32 %6714, 0
  %6716 = icmp slt i32 %6711, 10
  %6717 = or i1 %6715, %6716
  br i1 %6717, label %originalBB1925, label %originalBB1925alteredBB

originalBB1925:                                   ; preds = %6709, %originalBB1925alteredBB
  %6718 = load i32, i32* @x.19
  %6719 = load i32, i32* @y.20
  %6720 = sub i32 %6718, 1
  %6721 = mul i32 %6718, %6720
  %6722 = urem i32 %6721, 2
  %6723 = icmp eq i32 %6722, 0
  %6724 = icmp slt i32 %6719, 10
  %6725 = or i1 %6723, %6724
  br i1 %6725, label %originalBBpart21927, label %originalBB1925alteredBB

originalBBpart21927:                              ; preds = %originalBB1925
  br label %6726, !dbg !2013

6726:                                             ; preds = %originalBBpart21927, %originalBBpart21899, %originalBBpart21895, %originalBBpart21891
  %6727 = load i32, i32* @x.19
  %6728 = load i32, i32* @y.20
  %6729 = sub i32 %6727, 1
  %6730 = mul i32 %6727, %6729
  %6731 = urem i32 %6730, 2
  %6732 = icmp eq i32 %6731, 0
  %6733 = icmp slt i32 %6728, 10
  %6734 = or i1 %6732, %6733
  br i1 %6734, label %originalBB1929, label %originalBB1929alteredBB

originalBB1929:                                   ; preds = %6726, %originalBB1929alteredBB
  %6735 = load i8*, i8** %31, align 8, !dbg !2014
  %6736 = icmp ne i8* %6735, null, !dbg !2014
  %6737 = load i32, i32* @x.19
  %6738 = load i32, i32* @y.20
  %6739 = sub i32 %6737, 1
  %6740 = mul i32 %6737, %6739
  %6741 = urem i32 %6740, 2
  %6742 = icmp eq i32 %6741, 0
  %6743 = icmp slt i32 %6738, 10
  %6744 = or i1 %6742, %6743
  br i1 %6744, label %originalBBpart21931, label %originalBB1929alteredBB

originalBBpart21931:                              ; preds = %originalBB1929
  br i1 %6736, label %6745, label %6932, !dbg !2016

6745:                                             ; preds = %originalBBpart21931
  %6746 = load i32, i32* @x.19
  %6747 = load i32, i32* @y.20
  %6748 = sub i32 %6746, 1
  %6749 = mul i32 %6746, %6748
  %6750 = urem i32 %6749, 2
  %6751 = icmp eq i32 %6750, 0
  %6752 = icmp slt i32 %6747, 10
  %6753 = or i1 %6751, %6752
  br i1 %6753, label %originalBB1933, label %originalBB1933alteredBB

originalBB1933:                                   ; preds = %6745, %originalBB1933alteredBB
  %6754 = load i8, i8* %35, align 1, !dbg !2017
  %6755 = trunc i8 %6754 to i1, !dbg !2017
  %6756 = load i32, i32* @x.19
  %6757 = load i32, i32* @y.20
  %6758 = sub i32 %6756, 1
  %6759 = mul i32 %6756, %6758
  %6760 = urem i32 %6759, 2
  %6761 = icmp eq i32 %6760, 0
  %6762 = icmp slt i32 %6757, 10
  %6763 = or i1 %6761, %6762
  br i1 %6763, label %originalBBpart21935, label %originalBB1933alteredBB

originalBBpart21935:                              ; preds = %originalBB1933
  br i1 %6755, label %6932, label %6764, !dbg !2018

6764:                                             ; preds = %originalBBpart21935
  %6765 = load i32, i32* @x.19
  %6766 = load i32, i32* @y.20
  %6767 = sub i32 %6765, 1
  %6768 = mul i32 %6765, %6767
  %6769 = urem i32 %6768, 2
  %6770 = icmp eq i32 %6769, 0
  %6771 = icmp slt i32 %6766, 10
  %6772 = or i1 %6770, %6771
  br i1 %6772, label %originalBB1937, label %originalBB1937alteredBB

originalBB1937:                                   ; preds = %6764, %originalBB1937alteredBB
  %6773 = load i32, i32* @x.19
  %6774 = load i32, i32* @y.20
  %6775 = sub i32 %6773, 1
  %6776 = mul i32 %6773, %6775
  %6777 = urem i32 %6776, 2
  %6778 = icmp eq i32 %6777, 0
  %6779 = icmp slt i32 %6774, 10
  %6780 = or i1 %6778, %6779
  br i1 %6780, label %originalBBpart21939, label %originalBB1937alteredBB

originalBBpart21939:                              ; preds = %originalBB1937
  br label %6781, !dbg !2019

6781:                                             ; preds = %originalBBpart21978, %originalBBpart21939
  %6782 = load i32, i32* @x.19
  %6783 = load i32, i32* @y.20
  %6784 = sub i32 %6782, 1
  %6785 = mul i32 %6782, %6784
  %6786 = urem i32 %6785, 2
  %6787 = icmp eq i32 %6786, 0
  %6788 = icmp slt i32 %6783, 10
  %6789 = or i1 %6787, %6788
  br i1 %6789, label %originalBB1941, label %originalBB1941alteredBB

originalBB1941:                                   ; preds = %6781, %originalBB1941alteredBB
  %6790 = load i8*, i8** %31, align 8, !dbg !2020
  %6791 = load i8, i8* %6790, align 1, !dbg !2023
  %6792 = icmp ne i8 %6791, 0, !dbg !2024
  %6793 = load i32, i32* @x.19
  %6794 = load i32, i32* @y.20
  %6795 = sub i32 %6793, 1
  %6796 = mul i32 %6793, %6795
  %6797 = urem i32 %6796, 2
  %6798 = icmp eq i32 %6797, 0
  %6799 = icmp slt i32 %6794, 10
  %6800 = or i1 %6798, %6799
  br i1 %6800, label %originalBBpart21943, label %originalBB1941alteredBB

originalBBpart21943:                              ; preds = %originalBB1941
  br i1 %6792, label %6801, label %6915, !dbg !2024

6801:                                             ; preds = %originalBBpart21943
  %6802 = load i32, i32* @x.19
  %6803 = load i32, i32* @y.20
  %6804 = sub i32 %6802, 1
  %6805 = mul i32 %6802, %6804
  %6806 = urem i32 %6805, 2
  %6807 = icmp eq i32 %6806, 0
  %6808 = icmp slt i32 %6803, 10
  %6809 = or i1 %6807, %6808
  br i1 %6809, label %originalBB1945, label %originalBB1945alteredBB

originalBB1945:                                   ; preds = %6801, %originalBB1945alteredBB
  %6810 = load i32, i32* @x.19
  %6811 = load i32, i32* @y.20
  %6812 = sub i32 %6810, 1
  %6813 = mul i32 %6810, %6812
  %6814 = urem i32 %6813, 2
  %6815 = icmp eq i32 %6814, 0
  %6816 = icmp slt i32 %6811, 10
  %6817 = or i1 %6815, %6816
  br i1 %6817, label %originalBBpart21947, label %originalBB1945alteredBB

originalBBpart21947:                              ; preds = %originalBB1945
  br label %6818, !dbg !2025

6818:                                             ; preds = %originalBBpart21947
  %6819 = load i32, i32* @x.19
  %6820 = load i32, i32* @y.20
  %6821 = sub i32 %6819, 1
  %6822 = mul i32 %6819, %6821
  %6823 = urem i32 %6822, 2
  %6824 = icmp eq i32 %6823, 0
  %6825 = icmp slt i32 %6820, 10
  %6826 = or i1 %6824, %6825
  br i1 %6826, label %originalBB1949, label %originalBB1949alteredBB

originalBB1949:                                   ; preds = %6818, %originalBB1949alteredBB
  %6827 = load i64, i64* %29, align 8, !dbg !2026
  %6828 = load i64, i64* %20, align 8, !dbg !2026
  %6829 = icmp ult i64 %6827, %6828, !dbg !2026
  %6830 = load i32, i32* @x.19
  %6831 = load i32, i32* @y.20
  %6832 = sub i32 %6830, 1
  %6833 = mul i32 %6830, %6832
  %6834 = urem i32 %6833, 2
  %6835 = icmp eq i32 %6834, 0
  %6836 = icmp slt i32 %6831, 10
  %6837 = or i1 %6835, %6836
  br i1 %6837, label %originalBBpart21951, label %originalBB1949alteredBB

originalBBpart21951:                              ; preds = %originalBB1949
  br i1 %6829, label %6838, label %6860, !dbg !2029

6838:                                             ; preds = %originalBBpart21951
  %6839 = load i32, i32* @x.19
  %6840 = load i32, i32* @y.20
  %6841 = sub i32 %6839, 1
  %6842 = mul i32 %6839, %6841
  %6843 = urem i32 %6842, 2
  %6844 = icmp eq i32 %6843, 0
  %6845 = icmp slt i32 %6840, 10
  %6846 = or i1 %6844, %6845
  br i1 %6846, label %originalBB1953, label %originalBB1953alteredBB

originalBB1953:                                   ; preds = %6838, %originalBB1953alteredBB
  %6847 = load i8*, i8** %31, align 8, !dbg !2026
  %6848 = load i8, i8* %6847, align 1, !dbg !2026
  %6849 = load i8*, i8** %19, align 8, !dbg !2026
  %6850 = load i64, i64* %29, align 8, !dbg !2026
  %6851 = getelementptr inbounds i8, i8* %6849, i64 %6850, !dbg !2026
  store i8 %6848, i8* %6851, align 1, !dbg !2026
  %6852 = load i32, i32* @x.19
  %6853 = load i32, i32* @y.20
  %6854 = sub i32 %6852, 1
  %6855 = mul i32 %6852, %6854
  %6856 = urem i32 %6855, 2
  %6857 = icmp eq i32 %6856, 0
  %6858 = icmp slt i32 %6853, 10
  %6859 = or i1 %6857, %6858
  br i1 %6859, label %originalBBpart21955, label %originalBB1953alteredBB

originalBBpart21955:                              ; preds = %originalBB1953
  br label %6860, !dbg !2026

6860:                                             ; preds = %originalBBpart21955, %originalBBpart21951
  %6861 = load i32, i32* @x.19
  %6862 = load i32, i32* @y.20
  %6863 = sub i32 %6861, 1
  %6864 = mul i32 %6861, %6863
  %6865 = urem i32 %6864, 2
  %6866 = icmp eq i32 %6865, 0
  %6867 = icmp slt i32 %6862, 10
  %6868 = or i1 %6866, %6867
  br i1 %6868, label %originalBB1957, label %originalBB1957alteredBB

originalBB1957:                                   ; preds = %6860, %originalBB1957alteredBB
  %6869 = load i64, i64* %29, align 8, !dbg !2029
  %6870 = add i64 %6869, 1, !dbg !2029
  store i64 %6870, i64* %29, align 8, !dbg !2029
  %6871 = load i32, i32* @x.19
  %6872 = load i32, i32* @y.20
  %6873 = sub i32 %6871, 1
  %6874 = mul i32 %6871, %6873
  %6875 = urem i32 %6874, 2
  %6876 = icmp eq i32 %6875, 0
  %6877 = icmp slt i32 %6872, 10
  %6878 = or i1 %6876, %6877
  br i1 %6878, label %originalBBpart21970, label %originalBB1957alteredBB

originalBBpart21970:                              ; preds = %originalBB1957
  br label %6879, !dbg !2029

6879:                                             ; preds = %originalBBpart21970
  %6880 = load i32, i32* @x.19
  %6881 = load i32, i32* @y.20
  %6882 = sub i32 %6880, 1
  %6883 = mul i32 %6880, %6882
  %6884 = urem i32 %6883, 2
  %6885 = icmp eq i32 %6884, 0
  %6886 = icmp slt i32 %6881, 10
  %6887 = or i1 %6885, %6886
  br i1 %6887, label %originalBB1972, label %originalBB1972alteredBB

originalBB1972:                                   ; preds = %6879, %originalBB1972alteredBB
  %6888 = load i32, i32* @x.19
  %6889 = load i32, i32* @y.20
  %6890 = sub i32 %6888, 1
  %6891 = mul i32 %6888, %6890
  %6892 = urem i32 %6891, 2
  %6893 = icmp eq i32 %6892, 0
  %6894 = icmp slt i32 %6889, 10
  %6895 = or i1 %6893, %6894
  br i1 %6895, label %originalBBpart21974, label %originalBB1972alteredBB

originalBBpart21974:                              ; preds = %originalBB1972
  br label %6896, !dbg !2029

6896:                                             ; preds = %originalBBpart21974
  %6897 = load i32, i32* @x.19
  %6898 = load i32, i32* @y.20
  %6899 = sub i32 %6897, 1
  %6900 = mul i32 %6897, %6899
  %6901 = urem i32 %6900, 2
  %6902 = icmp eq i32 %6901, 0
  %6903 = icmp slt i32 %6898, 10
  %6904 = or i1 %6902, %6903
  br i1 %6904, label %originalBB1976, label %originalBB1976alteredBB

originalBB1976:                                   ; preds = %6896, %originalBB1976alteredBB
  %6905 = load i8*, i8** %31, align 8, !dbg !2030
  %6906 = getelementptr inbounds i8, i8* %6905, i32 1, !dbg !2030
  store i8* %6906, i8** %31, align 8, !dbg !2030
  %6907 = load i32, i32* @x.19
  %6908 = load i32, i32* @y.20
  %6909 = sub i32 %6907, 1
  %6910 = mul i32 %6907, %6909
  %6911 = urem i32 %6910, 2
  %6912 = icmp eq i32 %6911, 0
  %6913 = icmp slt i32 %6908, 10
  %6914 = or i1 %6912, %6913
  br i1 %6914, label %originalBBpart21978, label %originalBB1976alteredBB

originalBBpart21978:                              ; preds = %originalBB1976
  br label %6781, !dbg !2031, !llvm.loop !2032

6915:                                             ; preds = %originalBBpart21943
  %6916 = load i32, i32* @x.19
  %6917 = load i32, i32* @y.20
  %6918 = sub i32 %6916, 1
  %6919 = mul i32 %6916, %6918
  %6920 = urem i32 %6919, 2
  %6921 = icmp eq i32 %6920, 0
  %6922 = icmp slt i32 %6917, 10
  %6923 = or i1 %6921, %6922
  br i1 %6923, label %originalBB1980, label %originalBB1980alteredBB

originalBB1980:                                   ; preds = %6915, %originalBB1980alteredBB
  %6924 = load i32, i32* @x.19
  %6925 = load i32, i32* @y.20
  %6926 = sub i32 %6924, 1
  %6927 = mul i32 %6924, %6926
  %6928 = urem i32 %6927, 2
  %6929 = icmp eq i32 %6928, 0
  %6930 = icmp slt i32 %6925, 10
  %6931 = or i1 %6929, %6930
  br i1 %6931, label %originalBBpart21982, label %originalBB1980alteredBB

originalBBpart21982:                              ; preds = %originalBB1980
  br label %6932, !dbg !2033

6932:                                             ; preds = %originalBBpart21982, %originalBBpart21935, %originalBBpart21931
  %6933 = load i32, i32* @x.19
  %6934 = load i32, i32* @y.20
  %6935 = sub i32 %6933, 1
  %6936 = mul i32 %6933, %6935
  %6937 = urem i32 %6936, 2
  %6938 = icmp eq i32 %6937, 0
  %6939 = icmp slt i32 %6934, 10
  %6940 = or i1 %6938, %6939
  br i1 %6940, label %originalBB1984, label %originalBB1984alteredBB

originalBB1984:                                   ; preds = %6932, %originalBB1984alteredBB
  %6941 = load i64, i64* %29, align 8, !dbg !2034
  %6942 = load i64, i64* %20, align 8, !dbg !2036
  %6943 = icmp ult i64 %6941, %6942, !dbg !2037
  %6944 = load i32, i32* @x.19
  %6945 = load i32, i32* @y.20
  %6946 = sub i32 %6944, 1
  %6947 = mul i32 %6944, %6946
  %6948 = urem i32 %6947, 2
  %6949 = icmp eq i32 %6948, 0
  %6950 = icmp slt i32 %6945, 10
  %6951 = or i1 %6949, %6950
  br i1 %6951, label %originalBBpart21986, label %originalBB1984alteredBB

originalBBpart21986:                              ; preds = %originalBB1984
  br i1 %6943, label %6952, label %6972, !dbg !2038

6952:                                             ; preds = %originalBBpart21986
  %6953 = load i32, i32* @x.19
  %6954 = load i32, i32* @y.20
  %6955 = sub i32 %6953, 1
  %6956 = mul i32 %6953, %6955
  %6957 = urem i32 %6956, 2
  %6958 = icmp eq i32 %6957, 0
  %6959 = icmp slt i32 %6954, 10
  %6960 = or i1 %6958, %6959
  br i1 %6960, label %originalBB1988, label %originalBB1988alteredBB

originalBB1988:                                   ; preds = %6952, %originalBB1988alteredBB
  %6961 = load i8*, i8** %19, align 8, !dbg !2039
  %6962 = load i64, i64* %29, align 8, !dbg !2040
  %6963 = getelementptr inbounds i8, i8* %6961, i64 %6962, !dbg !2039
  store i8 0, i8* %6963, align 1, !dbg !2041
  %6964 = load i32, i32* @x.19
  %6965 = load i32, i32* @y.20
  %6966 = sub i32 %6964, 1
  %6967 = mul i32 %6964, %6966
  %6968 = urem i32 %6967, 2
  %6969 = icmp eq i32 %6968, 0
  %6970 = icmp slt i32 %6965, 10
  %6971 = or i1 %6969, %6970
  br i1 %6971, label %originalBBpart21990, label %originalBB1988alteredBB

originalBBpart21990:                              ; preds = %originalBB1988
  br label %6972, !dbg !2039

6972:                                             ; preds = %originalBBpart21990, %originalBBpart21986
  %6973 = load i32, i32* @x.19
  %6974 = load i32, i32* @y.20
  %6975 = sub i32 %6973, 1
  %6976 = mul i32 %6973, %6975
  %6977 = urem i32 %6976, 2
  %6978 = icmp eq i32 %6977, 0
  %6979 = icmp slt i32 %6974, 10
  %6980 = or i1 %6978, %6979
  br i1 %6980, label %originalBB1992, label %originalBB1992alteredBB

originalBB1992:                                   ; preds = %6972, %originalBB1992alteredBB
  %6981 = load i64, i64* %29, align 8, !dbg !2042
  store i64 %6981, i64* %18, align 8, !dbg !2043
  %6982 = load i32, i32* @x.19
  %6983 = load i32, i32* @y.20
  %6984 = sub i32 %6982, 1
  %6985 = mul i32 %6982, %6984
  %6986 = urem i32 %6985, 2
  %6987 = icmp eq i32 %6986, 0
  %6988 = icmp slt i32 %6983, 10
  %6989 = or i1 %6987, %6988
  br i1 %6989, label %originalBBpart21994, label %originalBB1992alteredBB

originalBBpart21994:                              ; preds = %originalBB1992
  br label %7072, !dbg !2043

6990:                                             ; preds = %originalBBpart21887, %originalBBpart21623, %originalBBpart21186, %originalBBpart21077, %originalBBpart2846, %originalBBpart2830, %originalBBpart2766, %originalBBpart2730, %originalBBpart2572, %originalBBpart2525, %originalBBpart2285, %originalBBpart2261
  call void @llvm.dbg.label(metadata !2044), !dbg !2045
  %6991 = load i32, i32* @x.19
  %6992 = load i32, i32* @y.20
  %6993 = sub i32 %6991, 1
  %6994 = mul i32 %6991, %6993
  %6995 = urem i32 %6994, 2
  %6996 = icmp eq i32 %6995, 0
  %6997 = icmp slt i32 %6992, 10
  %6998 = or i1 %6996, %6997
  br i1 %6998, label %originalBB1996, label %originalBB1996alteredBB

originalBB1996:                                   ; preds = %6990, %originalBB1996alteredBB
  %6999 = load i32, i32* %23, align 4, !dbg !2046
  %7000 = icmp eq i32 %6999, 2, !dbg !2048
  %7001 = load i32, i32* @x.19
  %7002 = load i32, i32* @y.20
  %7003 = sub i32 %7001, 1
  %7004 = mul i32 %7001, %7003
  %7005 = urem i32 %7004, 2
  %7006 = icmp eq i32 %7005, 0
  %7007 = icmp slt i32 %7002, 10
  %7008 = or i1 %7006, %7007
  br i1 %7008, label %originalBBpart21998, label %originalBB1996alteredBB

originalBBpart21998:                              ; preds = %originalBB1996
  br i1 %7000, label %7009, label %7045, !dbg !2049

7009:                                             ; preds = %originalBBpart21998
  %7010 = load i32, i32* @x.19
  %7011 = load i32, i32* @y.20
  %7012 = sub i32 %7010, 1
  %7013 = mul i32 %7010, %7012
  %7014 = urem i32 %7013, 2
  %7015 = icmp eq i32 %7014, 0
  %7016 = icmp slt i32 %7011, 10
  %7017 = or i1 %7015, %7016
  br i1 %7017, label %originalBB2000, label %originalBB2000alteredBB

originalBB2000:                                   ; preds = %7009, %originalBB2000alteredBB
  %7018 = load i8, i8* %33, align 1, !dbg !2050
  %7019 = trunc i8 %7018 to i1, !dbg !2050
  %7020 = load i32, i32* @x.19
  %7021 = load i32, i32* @y.20
  %7022 = sub i32 %7020, 1
  %7023 = mul i32 %7020, %7022
  %7024 = urem i32 %7023, 2
  %7025 = icmp eq i32 %7024, 0
  %7026 = icmp slt i32 %7021, 10
  %7027 = or i1 %7025, %7026
  br i1 %7027, label %originalBBpart22002, label %originalBB2000alteredBB

originalBBpart22002:                              ; preds = %originalBB2000
  br i1 %7019, label %7028, label %7045, !dbg !2051

7028:                                             ; preds = %originalBBpart22002
  %7029 = load i32, i32* @x.19
  %7030 = load i32, i32* @y.20
  %7031 = sub i32 %7029, 1
  %7032 = mul i32 %7029, %7031
  %7033 = urem i32 %7032, 2
  %7034 = icmp eq i32 %7033, 0
  %7035 = icmp slt i32 %7030, 10
  %7036 = or i1 %7034, %7035
  br i1 %7036, label %originalBB2004, label %originalBB2004alteredBB

originalBB2004:                                   ; preds = %7028, %originalBB2004alteredBB
  store i32 4, i32* %23, align 4, !dbg !2052
  %7037 = load i32, i32* @x.19
  %7038 = load i32, i32* @y.20
  %7039 = sub i32 %7037, 1
  %7040 = mul i32 %7037, %7039
  %7041 = urem i32 %7040, 2
  %7042 = icmp eq i32 %7041, 0
  %7043 = icmp slt i32 %7038, 10
  %7044 = or i1 %7042, %7043
  br i1 %7044, label %originalBBpart22006, label %originalBB2004alteredBB

originalBBpart22006:                              ; preds = %originalBB2004
  br label %7045, !dbg !2053

7045:                                             ; preds = %originalBBpart22006, %originalBBpart22002, %originalBBpart21998
  %7046 = load i32, i32* @x.19
  %7047 = load i32, i32* @y.20
  %7048 = sub i32 %7046, 1
  %7049 = mul i32 %7046, %7048
  %7050 = urem i32 %7049, 2
  %7051 = icmp eq i32 %7050, 0
  %7052 = icmp slt i32 %7047, 10
  %7053 = or i1 %7051, %7052
  br i1 %7053, label %originalBB2008, label %originalBB2008alteredBB

originalBB2008:                                   ; preds = %7045, %originalBB2008alteredBB
  %7054 = load i8*, i8** %19, align 8, !dbg !2054
  %7055 = load i64, i64* %20, align 8, !dbg !2055
  %7056 = load i8*, i8** %21, align 8, !dbg !2056
  %7057 = load i64, i64* %22, align 8, !dbg !2057
  %7058 = load i32, i32* %23, align 4, !dbg !2058
  %7059 = load i32, i32* %24, align 4, !dbg !2059
  %7060 = and i32 %7059, -3, !dbg !2060
  %7061 = load i8*, i8** %26, align 8, !dbg !2061
  %7062 = load i8*, i8** %27, align 8, !dbg !2062
  %7063 = call i64 @quotearg_buffer_restyled(i8* %7054, i64 %7055, i8* %7056, i64 %7057, i32 %7058, i32 %7060, i32* null, i8* %7061, i8* %7062), !dbg !2063
  store i64 %7063, i64* %18, align 8, !dbg !2064
  %7064 = load i32, i32* @x.19
  %7065 = load i32, i32* @y.20
  %7066 = sub i32 %7064, 1
  %7067 = mul i32 %7064, %7066
  %7068 = urem i32 %7067, 2
  %7069 = icmp eq i32 %7068, 0
  %7070 = icmp slt i32 %7065, 10
  %7071 = or i1 %7069, %7070
  br i1 %7071, label %originalBBpart22022, label %originalBB2008alteredBB

originalBBpart22022:                              ; preds = %originalBB2008
  br label %7072, !dbg !2064

7072:                                             ; preds = %originalBBpart22022, %originalBBpart21994, %originalBBpart21907
  %7073 = load i32, i32* @x.19
  %7074 = load i32, i32* @y.20
  %7075 = sub i32 %7073, 1
  %7076 = mul i32 %7073, %7075
  %7077 = urem i32 %7076, 2
  %7078 = icmp eq i32 %7077, 0
  %7079 = icmp slt i32 %7074, 10
  %7080 = or i1 %7078, %7079
  br i1 %7080, label %originalBB2024, label %originalBB2024alteredBB

originalBB2024:                                   ; preds = %7072, %originalBB2024alteredBB
  %7081 = load i64, i64* %18, align 8, !dbg !2065
  %7082 = load i32, i32* @x.19
  %7083 = load i32, i32* @y.20
  %7084 = sub i32 %7082, 1
  %7085 = mul i32 %7082, %7084
  %7086 = urem i32 %7085, 2
  %7087 = icmp eq i32 %7086, 0
  %7088 = icmp slt i32 %7083, 10
  %7089 = or i1 %7087, %7088
  br i1 %7089, label %originalBBpart22026, label %originalBB2024alteredBB

originalBBpart22026:                              ; preds = %originalBB2024
  ret i64 %7081, !dbg !2065

originalBBalteredBB:                              ; preds = %originalBB, %9
  %7090 = alloca i64, align 8
  %7091 = alloca i8*, align 8
  %7092 = alloca i64, align 8
  %7093 = alloca i8*, align 8
  %7094 = alloca i64, align 8
  %7095 = alloca i32, align 4
  %7096 = alloca i32, align 4
  %7097 = alloca i32*, align 8
  %7098 = alloca i8*, align 8
  %7099 = alloca i8*, align 8
  %7100 = alloca i64, align 8
  %7101 = alloca i64, align 8
  %7102 = alloca i64, align 8
  %7103 = alloca i8*, align 8
  %7104 = alloca i64, align 8
  %7105 = alloca i8, align 1
  %7106 = alloca i8, align 1
  %7107 = alloca i8, align 1
  %7108 = alloca i8, align 1
  %7109 = alloca i8, align 1
  %7110 = alloca i8, align 1
  %7111 = alloca i8, align 1
  %7112 = alloca i8, align 1
  %7113 = alloca i8, align 1
  %7114 = alloca i8, align 1
  %7115 = alloca i8, align 1
  %7116 = alloca i64, align 8
  %7117 = alloca i8, align 1
  %7118 = alloca %struct.__mbstate_t, align 4
  %7119 = alloca i32, align 4
  %7120 = alloca i64, align 8
  %7121 = alloca i64, align 8
  %7122 = alloca i64, align 8
  store i8* %0, i8** %7091, align 8
  call void @llvm.dbg.declare(metadata i8** %7091, metadata !2066, metadata !DIExpression()), !dbg !1186
  store i64 %1, i64* %7092, align 8
  call void @llvm.dbg.declare(metadata i64* %7092, metadata !2098, metadata !DIExpression()), !dbg !1188
  store i8* %2, i8** %7093, align 8
  call void @llvm.dbg.declare(metadata i8** %7093, metadata !2099, metadata !DIExpression()), !dbg !1190
  store i64 %3, i64* %7094, align 8
  call void @llvm.dbg.declare(metadata i64* %7094, metadata !2100, metadata !DIExpression()), !dbg !1192
  store i32 %4, i32* %7095, align 4
  call void @llvm.dbg.declare(metadata i32* %7095, metadata !2101, metadata !DIExpression()), !dbg !1194
  store i32 %5, i32* %7096, align 4
  call void @llvm.dbg.declare(metadata i32* %7096, metadata !2102, metadata !DIExpression()), !dbg !1196
  store i32* %6, i32** %7097, align 8
  call void @llvm.dbg.declare(metadata i32** %7097, metadata !2103, metadata !DIExpression()), !dbg !1198
  store i8* %7, i8** %7098, align 8
  call void @llvm.dbg.declare(metadata i8** %7098, metadata !2104, metadata !DIExpression()), !dbg !1200
  store i8* %8, i8** %7099, align 8
  call void @llvm.dbg.declare(metadata i8** %7099, metadata !2105, metadata !DIExpression()), !dbg !1202
  call void @llvm.dbg.declare(metadata i64* %7100, metadata !2106, metadata !DIExpression()), !dbg !1204
  call void @llvm.dbg.declare(metadata i64* %7101, metadata !2107, metadata !DIExpression()), !dbg !1206
  store i64 0, i64* %7101, align 8, !dbg !1206
  call void @llvm.dbg.declare(metadata i64* %7102, metadata !2108, metadata !DIExpression()), !dbg !1208
  store i64 0, i64* %7102, align 8, !dbg !1208
  call void @llvm.dbg.declare(metadata i8** %7103, metadata !2109, metadata !DIExpression()), !dbg !1210
  store i8* null, i8** %7103, align 8, !dbg !1210
  call void @llvm.dbg.declare(metadata i64* %7104, metadata !2110, metadata !DIExpression()), !dbg !1212
  store i64 0, i64* %7104, align 8, !dbg !1212
  call void @llvm.dbg.declare(metadata i8* %7105, metadata !2111, metadata !DIExpression()), !dbg !1214
  store i8 0, i8* %7105, align 1, !dbg !1214
  call void @llvm.dbg.declare(metadata i8* %7106, metadata !2112, metadata !DIExpression()), !dbg !1216
  %7123 = call i64 @__ctype_get_mb_cur_max() #10, !dbg !1217
  %7124 = icmp eq i64 %7123, 1, !dbg !1218
  %7125 = zext i1 %7124 to i8, !dbg !1216
  store i8 %7125, i8* %7106, align 1, !dbg !1216
  call void @llvm.dbg.declare(metadata i8* %7107, metadata !2113, metadata !DIExpression()), !dbg !1220
  %7126 = load i32, i32* %7096, align 4, !dbg !1221
  %_ = shl i32 %7126, 2
  %_1 = sub i32 0, %7126
  %gen = add i32 %_1, 2
  %_2 = sub i32 0, %7126
  %gen3 = add i32 %_2, 2
  %_4 = sub i32 %7126, 2
  %gen5 = mul i32 %_4, 2
  %_6 = sub i32 %7126, 2
  %gen7 = mul i32 %_6, 2
  %_8 = sub i32 0, %7126
  %gen9 = add i32 %_8, 2
  %7127 = and i32 %7126, 2, !dbg !1222
  %7128 = icmp ne i32 %7127, 0, !dbg !1223
  %7129 = zext i1 %7128 to i8, !dbg !1220
  store i8 %7129, i8* %7107, align 1, !dbg !1220
  call void @llvm.dbg.declare(metadata i8* %7108, metadata !2114, metadata !DIExpression()), !dbg !1225
  store i8 0, i8* %7108, align 1, !dbg !1225
  call void @llvm.dbg.declare(metadata i8* %7109, metadata !2115, metadata !DIExpression()), !dbg !1227
  store i8 0, i8* %7109, align 1, !dbg !1227
  call void @llvm.dbg.declare(metadata i8* %7110, metadata !2116, metadata !DIExpression()), !dbg !1229
  store i8 1, i8* %7110, align 1, !dbg !1229
  br label %originalBB

originalBB10alteredBB:                            ; preds = %originalBB10, %66
  %7130 = load i32, i32* %23, align 4, !dbg !1233
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %84
  store i32 5, i32* %23, align 4, !dbg !1235
  store i8 1, i8* %35, align 1, !dbg !1237
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %101
  %7131 = load i8, i8* %35, align 1, !dbg !1239
  %7132 = trunc i8 %7131 to i1, !dbg !1239
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %120
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %137
  %7133 = load i64, i64* %29, align 8, !dbg !1243
  %7134 = load i64, i64* %20, align 8, !dbg !1243
  %7135 = icmp ult i64 %7133, %7134, !dbg !1243
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %157
  %7136 = load i8*, i8** %19, align 8, !dbg !1243
  %7137 = load i64, i64* %29, align 8, !dbg !1243
  %7138 = getelementptr inbounds i8, i8* %7136, i64 %7137, !dbg !1243
  store i8 34, i8* %7138, align 1, !dbg !1243
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %177
  %7139 = load i64, i64* %29, align 8, !dbg !1246
  %7140 = add i64 %7139, 1, !dbg !1246
  store i64 %7140, i64* %29, align 8, !dbg !1246
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %196
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %213
  store i8 1, i8* %33, align 1, !dbg !1247
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.62, i64 0, i64 0), i8** %31, align 8, !dbg !1248
  store i64 1, i64* %32, align 8, !dbg !1249
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %230
  store i8 1, i8* %33, align 1, !dbg !1251
  store i8 0, i8* %35, align 1, !dbg !1252
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %247
  %7141 = load i32, i32* %23, align 4, !dbg !1254
  %7142 = icmp ne i32 %7141, 10, !dbg !1257
  br label %originalBB50

originalBB54alteredBB:                            ; preds = %originalBB54, %266
  %7143 = load i32, i32* %23, align 4, !dbg !1259
  %7144 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.63, i64 0, i64 0), i32 %7143), !dbg !1261
  store i8* %7144, i8** %26, align 8, !dbg !1262
  %7145 = load i32, i32* %23, align 4, !dbg !1263
  %7146 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.64, i64 0, i64 0), i32 %7145), !dbg !1264
  store i8* %7146, i8** %27, align 8, !dbg !1265
  br label %originalBB54

originalBB58alteredBB:                            ; preds = %originalBB58, %287
  %7147 = load i8, i8* %35, align 1, !dbg !1267
  %7148 = trunc i8 %7147 to i1, !dbg !1267
  br label %originalBB58

originalBB62alteredBB:                            ; preds = %originalBB62, %306
  %7149 = load i8*, i8** %26, align 8, !dbg !1270
  store i8* %7149, i8** %31, align 8, !dbg !1272
  br label %originalBB62

originalBB66alteredBB:                            ; preds = %originalBB66, %324
  %7150 = load i8*, i8** %31, align 8, !dbg !1274
  %7151 = load i8, i8* %7150, align 1, !dbg !1276
  %7152 = icmp ne i8 %7151, 0, !dbg !1277
  br label %originalBB66

originalBB70alteredBB:                            ; preds = %originalBB70, %344
  br label %originalBB70

originalBB74alteredBB:                            ; preds = %originalBB74, %361
  %7153 = load i64, i64* %29, align 8, !dbg !1279
  %7154 = load i64, i64* %20, align 8, !dbg !1279
  %7155 = icmp ult i64 %7153, %7154, !dbg !1279
  br label %originalBB74

originalBB78alteredBB:                            ; preds = %originalBB78, %381
  %7156 = load i8*, i8** %31, align 8, !dbg !1279
  %7157 = load i8, i8* %7156, align 1, !dbg !1279
  %7158 = load i8*, i8** %19, align 8, !dbg !1279
  %7159 = load i64, i64* %29, align 8, !dbg !1279
  %7160 = getelementptr inbounds i8, i8* %7158, i64 %7159, !dbg !1279
  store i8 %7157, i8* %7160, align 1, !dbg !1279
  br label %originalBB78

originalBB82alteredBB:                            ; preds = %originalBB82, %403
  %7161 = load i64, i64* %29, align 8, !dbg !1282
  %_83 = sub i64 0, %7161
  %gen84 = add i64 %_83, 1
  %_85 = shl i64 %7161, 1
  %_86 = shl i64 %7161, 1
  %7162 = add i64 %7161, 1, !dbg !1282
  store i64 %7162, i64* %29, align 8, !dbg !1282
  br label %originalBB82

originalBB90alteredBB:                            ; preds = %originalBB90, %422
  br label %originalBB90

originalBB94alteredBB:                            ; preds = %originalBB94, %439
  %7163 = load i8*, i8** %31, align 8, !dbg !1283
  %7164 = getelementptr inbounds i8, i8* %7163, i32 1, !dbg !1283
  store i8* %7164, i8** %31, align 8, !dbg !1283
  br label %originalBB94

originalBB98alteredBB:                            ; preds = %originalBB98, %458
  br label %originalBB98

originalBB102alteredBB:                           ; preds = %originalBB102, %475
  store i8 1, i8* %33, align 1, !dbg !1287
  %7165 = load i8*, i8** %27, align 8, !dbg !1288
  store i8* %7165, i8** %31, align 8, !dbg !1289
  %7166 = load i8*, i8** %31, align 8, !dbg !1290
  %7167 = call i64 @strlen(i8* %7166) #13, !dbg !1291
  store i64 %7167, i64* %32, align 8, !dbg !1292
  br label %originalBB102

originalBB106alteredBB:                           ; preds = %originalBB106, %495
  store i8 1, i8* %33, align 1, !dbg !1294
  br label %originalBB106

originalBB110alteredBB:                           ; preds = %originalBB110, %512
  store i8 1, i8* %35, align 1, !dbg !1296
  br label %originalBB110

originalBB114alteredBB:                           ; preds = %originalBB114, %529
  %7168 = load i8, i8* %35, align 1, !dbg !1298
  %7169 = trunc i8 %7168 to i1, !dbg !1298
  br label %originalBB114

originalBB118alteredBB:                           ; preds = %originalBB118, %548
  store i8 1, i8* %33, align 1, !dbg !1301
  br label %originalBB118

originalBB122alteredBB:                           ; preds = %originalBB122, %565
  br label %originalBB122

originalBB126alteredBB:                           ; preds = %originalBB126, %582
  store i32 2, i32* %23, align 4, !dbg !1304
  %7170 = load i8, i8* %35, align 1, !dbg !1305
  %7171 = trunc i8 %7170 to i1, !dbg !1305
  br label %originalBB126

originalBB130alteredBB:                           ; preds = %originalBB130, %601
  br label %originalBB130

originalBB134alteredBB:                           ; preds = %originalBB134, %618
  %7172 = load i64, i64* %29, align 8, !dbg !1309
  %7173 = load i64, i64* %20, align 8, !dbg !1309
  %7174 = icmp ult i64 %7172, %7173, !dbg !1309
  br label %originalBB134

originalBB138alteredBB:                           ; preds = %originalBB138, %638
  %7175 = load i8*, i8** %19, align 8, !dbg !1309
  %7176 = load i64, i64* %29, align 8, !dbg !1309
  %7177 = getelementptr inbounds i8, i8* %7175, i64 %7176, !dbg !1309
  store i8 39, i8* %7177, align 1, !dbg !1309
  br label %originalBB138

originalBB142alteredBB:                           ; preds = %originalBB142, %658
  %7178 = load i64, i64* %29, align 8, !dbg !1312
  %_143 = shl i64 %7178, 1
  %_144 = sub i64 %7178, 1
  %gen145 = mul i64 %_144, 1
  %_146 = sub i64 %7178, 1
  %gen147 = mul i64 %_146, 1
  %_148 = sub i64 %7178, 1
  %gen149 = mul i64 %_148, 1
  %_150 = shl i64 %7178, 1
  %_151 = sub i64 0, %7178
  %gen152 = add i64 %_151, 1
  %_153 = shl i64 %7178, 1
  %7179 = add i64 %7178, 1, !dbg !1312
  store i64 %7179, i64* %29, align 8, !dbg !1312
  br label %originalBB142

originalBB157alteredBB:                           ; preds = %originalBB157, %677
  br label %originalBB157

originalBB161alteredBB:                           ; preds = %originalBB161, %694
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.64, i64 0, i64 0), i8** %31, align 8, !dbg !1313
  store i64 1, i64* %32, align 8, !dbg !1314
  br label %originalBB161

originalBB165alteredBB:                           ; preds = %originalBB165, %711
  store i8 0, i8* %35, align 1, !dbg !1316
  br label %originalBB165

originalBB169alteredBB:                           ; preds = %originalBB169, %728
  call void @abort() #12, !dbg !1318
  br label %originalBB169

originalBB173alteredBB:                           ; preds = %originalBB173, %745
  store i64 0, i64* %28, align 8, !dbg !1319
  br label %originalBB173

originalBB177alteredBB:                           ; preds = %originalBB177, %762
  %7180 = load i64, i64* %22, align 8, !dbg !1322
  %7181 = icmp eq i64 %7180, -1, !dbg !1324
  br label %originalBB177

originalBB181alteredBB:                           ; preds = %originalBB181, %781
  %7182 = load i8*, i8** %21, align 8, !dbg !1325
  %7183 = load i64, i64* %28, align 8, !dbg !1326
  %7184 = getelementptr inbounds i8, i8* %7182, i64 %7183, !dbg !1325
  %7185 = load i8, i8* %7184, align 1, !dbg !1325
  %7186 = sext i8 %7185 to i32, !dbg !1325
  %7187 = icmp eq i32 %7186, 0, !dbg !1327
  %7188 = zext i1 %7187 to i32, !dbg !1327
  br label %originalBB181

originalBB185alteredBB:                           ; preds = %originalBB185, %805
  %7189 = load i64, i64* %28, align 8, !dbg !1328
  %7190 = load i64, i64* %22, align 8, !dbg !1329
  %7191 = icmp eq i64 %7189, %7190, !dbg !1330
  %7192 = zext i1 %7191 to i32, !dbg !1330
  br label %originalBB185

originalBB189alteredBB:                           ; preds = %originalBB189, %826
  %7193 = icmp ne i32 %827, 0, !dbg !1331
  %_190 = sub i1 false, %7193
  %gen191 = add i1 %_190, true
  %_192 = shl i1 %7193, true
  %_193 = sub i1 %7193, true
  %gen194 = mul i1 %_193, true
  %_195 = sub i1 false, %7193
  %gen196 = add i1 %_195, true
  %_197 = shl i1 %7193, true
  %_198 = sub i1 false, %7193
  %gen199 = add i1 %_198, true
  %7194 = xor i1 %7193, true, !dbg !1331
  br label %originalBB189

originalBB203alteredBB:                           ; preds = %originalBB203, %846
  store i8 0, i8* %41, align 1, !dbg !1339
  call void @llvm.dbg.declare(metadata !11, metadata !2117, metadata !DIExpression()), !dbg !1341
  store i8 0, i8* %42, align 1, !dbg !1341
  call void @llvm.dbg.declare(metadata !11, metadata !2152, metadata !DIExpression()), !dbg !1343
  store i8 0, i8* %43, align 1, !dbg !1343
  %7195 = load i8, i8* %33, align 1, !dbg !1344
  %7196 = trunc i8 %7195 to i1, !dbg !1344
  br label %originalBB203

originalBB207alteredBB:                           ; preds = %originalBB207, %865
  %7197 = load i32, i32* %23, align 4, !dbg !1347
  %7198 = icmp ne i32 %7197, 2, !dbg !1348
  br label %originalBB207

originalBB211alteredBB:                           ; preds = %originalBB211, %884
  %7199 = load i64, i64* %32, align 8, !dbg !1350
  %7200 = icmp ne i64 %7199, 0, !dbg !1350
  br label %originalBB211

originalBB215alteredBB:                           ; preds = %originalBB215, %903
  %7201 = load i64, i64* %28, align 8, !dbg !1352
  %7202 = load i64, i64* %32, align 8, !dbg !1353
  %_216 = sub i64 %7201, %7202
  %gen217 = mul i64 %_216, %7202
  %_218 = sub i64 0, %7201
  %gen219 = add i64 %_218, %7202
  %_220 = sub i64 0, %7201
  %gen221 = add i64 %_220, %7202
  %_222 = sub i64 0, %7201
  %gen223 = add i64 %_222, %7202
  %_224 = sub i64 %7201, %7202
  %gen225 = mul i64 %_224, %7202
  %_226 = shl i64 %7201, %7202
  %_227 = sub i64 %7201, %7202
  %gen228 = mul i64 %_227, %7202
  %_229 = sub i64 0, %7201
  %gen230 = add i64 %_229, %7202
  %_231 = shl i64 %7201, %7202
  %7203 = add i64 %7201, %7202, !dbg !1354
  %7204 = load i64, i64* %22, align 8, !dbg !1355
  %7205 = icmp eq i64 %7204, -1, !dbg !1356
  br label %originalBB215

originalBB235alteredBB:                           ; preds = %originalBB235, %925
  %7206 = load i64, i64* %32, align 8, !dbg !1358
  %7207 = icmp ult i64 1, %7206, !dbg !1359
  br label %originalBB235

originalBB239alteredBB:                           ; preds = %originalBB239, %944
  %7208 = load i8*, i8** %21, align 8, !dbg !1360
  %7209 = call i64 @strlen(i8* %7208) #13, !dbg !1361
  store i64 %7209, i64* %22, align 8, !dbg !1362
  br label %originalBB239

originalBB243alteredBB:                           ; preds = %originalBB243, %963
  %7210 = load i64, i64* %22, align 8, !dbg !1363
  br label %originalBB243

originalBB247alteredBB:                           ; preds = %originalBB247, %981
  %7211 = icmp ule i64 %914, %982, !dbg !1364
  br label %originalBB247

originalBB251alteredBB:                           ; preds = %originalBB251, %1000
  %7212 = load i8*, i8** %21, align 8, !dbg !1366
  %7213 = load i64, i64* %28, align 8, !dbg !1367
  %7214 = getelementptr inbounds i8, i8* %7212, i64 %7213, !dbg !1368
  %7215 = load i8*, i8** %31, align 8, !dbg !1369
  %7216 = load i64, i64* %32, align 8, !dbg !1370
  %7217 = call i32 @memcmp(i8* %7214, i8* %7215, i64 %7216) #13, !dbg !1371
  %7218 = icmp eq i32 %7217, 0, !dbg !1372
  br label %originalBB251

originalBB255alteredBB:                           ; preds = %originalBB255, %1024
  %7219 = load i8, i8* %35, align 1, !dbg !1374
  %7220 = trunc i8 %7219 to i1, !dbg !1374
  br label %originalBB255

originalBB259alteredBB:                           ; preds = %originalBB259, %1043
  br label %originalBB259

originalBB263alteredBB:                           ; preds = %originalBB263, %1060
  store i8 1, i8* %41, align 1, !dbg !1379
  br label %originalBB263

originalBB267alteredBB:                           ; preds = %originalBB267, %1077
  %7221 = load i8*, i8** %21, align 8, !dbg !1381
  %7222 = load i64, i64* %28, align 8, !dbg !1382
  %7223 = getelementptr inbounds i8, i8* %7221, i64 %7222, !dbg !1381
  %7224 = load i8, i8* %7223, align 1, !dbg !1381
  store i8 %7224, i8* %39, align 1, !dbg !1383
  %7225 = load i8, i8* %39, align 1, !dbg !1384
  %7226 = zext i8 %7225 to i32, !dbg !1384
  br label %originalBB267

originalBB271alteredBB:                           ; preds = %originalBB271, %1100
  %7227 = load i8, i8* %33, align 1, !dbg !1386
  %7228 = trunc i8 %7227 to i1, !dbg !1386
  br label %originalBB271

originalBB275alteredBB:                           ; preds = %originalBB275, %1119
  br label %originalBB275

originalBB279alteredBB:                           ; preds = %originalBB279, %1136
  %7229 = load i8, i8* %35, align 1, !dbg !1392
  %7230 = trunc i8 %7229 to i1, !dbg !1392
  br label %originalBB279

originalBB283alteredBB:                           ; preds = %originalBB283, %1155
  br label %originalBB283

originalBB287alteredBB:                           ; preds = %originalBB287, %1172
  store i8 1, i8* %42, align 1, !dbg !1395
  %7231 = load i32, i32* %23, align 4, !dbg !1396
  %7232 = icmp eq i32 %7231, 2, !dbg !1396
  br label %originalBB287

originalBB291alteredBB:                           ; preds = %originalBB291, %1191
  %7233 = load i8, i8* %36, align 1, !dbg !1396
  %7234 = trunc i8 %7233 to i1, !dbg !1396
  br label %originalBB291

originalBB295alteredBB:                           ; preds = %originalBB295, %1210
  br label %originalBB295

originalBB299alteredBB:                           ; preds = %originalBB299, %1227
  %7235 = load i64, i64* %29, align 8, !dbg !1400
  %7236 = load i64, i64* %20, align 8, !dbg !1400
  %7237 = icmp ult i64 %7235, %7236, !dbg !1400
  br label %originalBB299

originalBB303alteredBB:                           ; preds = %originalBB303, %1247
  %7238 = load i8*, i8** %19, align 8, !dbg !1400
  %7239 = load i64, i64* %29, align 8, !dbg !1400
  %7240 = getelementptr inbounds i8, i8* %7238, i64 %7239, !dbg !1400
  store i8 39, i8* %7240, align 1, !dbg !1400
  br label %originalBB303

originalBB307alteredBB:                           ; preds = %originalBB307, %1267
  %7241 = load i64, i64* %29, align 8, !dbg !1403
  %_308 = sub i64 %7241, 1
  %gen309 = mul i64 %_308, 1
  %_310 = sub i64 %7241, 1
  %gen311 = mul i64 %_310, 1
  %_312 = shl i64 %7241, 1
  %_313 = sub i64 %7241, 1
  %gen314 = mul i64 %_313, 1
  %_315 = sub i64 0, %7241
  %gen316 = add i64 %_315, 1
  %_317 = sub i64 0, %7241
  %gen318 = add i64 %_317, 1
  %_319 = sub i64 %7241, 1
  %gen320 = mul i64 %_319, 1
  %_321 = shl i64 %7241, 1
  %7242 = add i64 %7241, 1, !dbg !1403
  store i64 %7242, i64* %29, align 8, !dbg !1403
  br label %originalBB307

originalBB325alteredBB:                           ; preds = %originalBB325, %1286
  br label %originalBB325

originalBB329alteredBB:                           ; preds = %originalBB329, %1303
  %7243 = load i64, i64* %29, align 8, !dbg !1404
  %7244 = load i64, i64* %20, align 8, !dbg !1404
  %7245 = icmp ult i64 %7243, %7244, !dbg !1404
  br label %originalBB329

originalBB333alteredBB:                           ; preds = %originalBB333, %1323
  %7246 = load i8*, i8** %19, align 8, !dbg !1404
  %7247 = load i64, i64* %29, align 8, !dbg !1404
  %7248 = getelementptr inbounds i8, i8* %7246, i64 %7247, !dbg !1404
  store i8 36, i8* %7248, align 1, !dbg !1404
  br label %originalBB333

originalBB337alteredBB:                           ; preds = %originalBB337, %1343
  %7249 = load i64, i64* %29, align 8, !dbg !1407
  %_338 = sub i64 0, %7249
  %gen339 = add i64 %_338, 1
  %_340 = shl i64 %7249, 1
  %_341 = sub i64 %7249, 1
  %gen342 = mul i64 %_341, 1
  %_343 = shl i64 %7249, 1
  %_344 = sub i64 %7249, 1
  %gen345 = mul i64 %_344, 1
  %7250 = add i64 %7249, 1, !dbg !1407
  store i64 %7250, i64* %29, align 8, !dbg !1407
  br label %originalBB337

originalBB349alteredBB:                           ; preds = %originalBB349, %1362
  br label %originalBB349

originalBB353alteredBB:                           ; preds = %originalBB353, %1379
  %7251 = load i64, i64* %29, align 8, !dbg !1408
  %7252 = load i64, i64* %20, align 8, !dbg !1408
  %7253 = icmp ult i64 %7251, %7252, !dbg !1408
  br label %originalBB353

originalBB357alteredBB:                           ; preds = %originalBB357, %1399
  %7254 = load i8*, i8** %19, align 8, !dbg !1408
  %7255 = load i64, i64* %29, align 8, !dbg !1408
  %7256 = getelementptr inbounds i8, i8* %7254, i64 %7255, !dbg !1408
  store i8 39, i8* %7256, align 1, !dbg !1408
  br label %originalBB357

originalBB361alteredBB:                           ; preds = %originalBB361, %1419
  %7257 = load i64, i64* %29, align 8, !dbg !1411
  %_362 = shl i64 %7257, 1
  %_363 = sub i64 %7257, 1
  %gen364 = mul i64 %_363, 1
  %_365 = shl i64 %7257, 1
  %_366 = shl i64 %7257, 1
  %7258 = add i64 %7257, 1, !dbg !1411
  store i64 %7258, i64* %29, align 8, !dbg !1411
  br label %originalBB361

originalBB370alteredBB:                           ; preds = %originalBB370, %1438
  store i8 1, i8* %36, align 1, !dbg !1398
  br label %originalBB370

originalBB374alteredBB:                           ; preds = %originalBB374, %1455
  br label %originalBB374

originalBB378alteredBB:                           ; preds = %originalBB378, %1472
  %7259 = load i64, i64* %29, align 8, !dbg !1412
  %7260 = load i64, i64* %20, align 8, !dbg !1412
  %7261 = icmp ult i64 %7259, %7260, !dbg !1412
  br label %originalBB378

originalBB382alteredBB:                           ; preds = %originalBB382, %1492
  %7262 = load i8*, i8** %19, align 8, !dbg !1412
  %7263 = load i64, i64* %29, align 8, !dbg !1412
  %7264 = getelementptr inbounds i8, i8* %7262, i64 %7263, !dbg !1412
  store i8 92, i8* %7264, align 1, !dbg !1412
  br label %originalBB382

originalBB386alteredBB:                           ; preds = %originalBB386, %1512
  %7265 = load i64, i64* %29, align 8, !dbg !1415
  %_387 = sub i64 0, %7265
  %gen388 = add i64 %_387, 1
  %_389 = shl i64 %7265, 1
  %_390 = sub i64 0, %7265
  %gen391 = add i64 %_390, 1
  %_392 = sub i64 %7265, 1
  %gen393 = mul i64 %_392, 1
  %7266 = add i64 %7265, 1, !dbg !1415
  store i64 %7266, i64* %29, align 8, !dbg !1415
  br label %originalBB386

originalBB397alteredBB:                           ; preds = %originalBB397, %1531
  br label %originalBB397

originalBB401alteredBB:                           ; preds = %originalBB401, %1548
  %7267 = load i32, i32* %23, align 4, !dbg !1416
  %7268 = icmp ne i32 %7267, 2, !dbg !1418
  br label %originalBB401

originalBB405alteredBB:                           ; preds = %originalBB405, %1567
  %7269 = load i64, i64* %28, align 8, !dbg !1420
  %_406 = shl i64 %7269, 1
  %7270 = add i64 %7269, 1, !dbg !1421
  %7271 = load i64, i64* %22, align 8, !dbg !1422
  %7272 = icmp ult i64 %7270, %7271, !dbg !1423
  br label %originalBB405

originalBB410alteredBB:                           ; preds = %originalBB410, %1588
  %7273 = load i8*, i8** %21, align 8, !dbg !1425
  %7274 = load i64, i64* %28, align 8, !dbg !1426
  %_411 = shl i64 %7274, 1
  %_412 = sub i64 0, %7274
  %gen413 = add i64 %_412, 1
  %_414 = sub i64 0, %7274
  %gen415 = add i64 %_414, 1
  %7275 = add i64 %7274, 1, !dbg !1427
  %7276 = getelementptr inbounds i8, i8* %7273, i64 %7275, !dbg !1425
  %7277 = load i8, i8* %7276, align 1, !dbg !1425
  %7278 = sext i8 %7277 to i32, !dbg !1425
  %7279 = icmp sle i32 48, %7278, !dbg !1428
  br label %originalBB410

originalBB419alteredBB:                           ; preds = %originalBB419, %1612
  %7280 = load i8*, i8** %21, align 8, !dbg !1430
  %7281 = load i64, i64* %28, align 8, !dbg !1431
  %_420 = shl i64 %7281, 1
  %7282 = add i64 %7281, 1, !dbg !1432
  %7283 = getelementptr inbounds i8, i8* %7280, i64 %7282, !dbg !1430
  %7284 = load i8, i8* %7283, align 1, !dbg !1430
  %7285 = sext i8 %7284 to i32, !dbg !1430
  %7286 = icmp sle i32 %7285, 57, !dbg !1433
  br label %originalBB419

originalBB424alteredBB:                           ; preds = %originalBB424, %1636
  br label %originalBB424

originalBB428alteredBB:                           ; preds = %originalBB428, %1653
  %7287 = load i64, i64* %29, align 8, !dbg !1437
  %7288 = load i64, i64* %20, align 8, !dbg !1437
  %7289 = icmp ult i64 %7287, %7288, !dbg !1437
  br label %originalBB428

originalBB432alteredBB:                           ; preds = %originalBB432, %1673
  %7290 = load i8*, i8** %19, align 8, !dbg !1437
  %7291 = load i64, i64* %29, align 8, !dbg !1437
  %7292 = getelementptr inbounds i8, i8* %7290, i64 %7291, !dbg !1437
  store i8 48, i8* %7292, align 1, !dbg !1437
  br label %originalBB432

originalBB436alteredBB:                           ; preds = %originalBB436, %1693
  %7293 = load i64, i64* %29, align 8, !dbg !1440
  %_437 = sub i64 %7293, 1
  %gen438 = mul i64 %_437, 1
  %_439 = sub i64 0, %7293
  %gen440 = add i64 %_439, 1
  %_441 = shl i64 %7293, 1
  %_442 = sub i64 0, %7293
  %gen443 = add i64 %_442, 1
  %_444 = sub i64 0, %7293
  %gen445 = add i64 %_444, 1
  %_446 = sub i64 0, %7293
  %gen447 = add i64 %_446, 1
  %_448 = sub i64 0, %7293
  %gen449 = add i64 %_448, 1
  %_450 = sub i64 %7293, 1
  %gen451 = mul i64 %_450, 1
  %7294 = add i64 %7293, 1, !dbg !1440
  store i64 %7294, i64* %29, align 8, !dbg !1440
  br label %originalBB436

originalBB455alteredBB:                           ; preds = %originalBB455, %1712
  br label %originalBB455

originalBB459alteredBB:                           ; preds = %originalBB459, %1729
  %7295 = load i64, i64* %29, align 8, !dbg !1442
  %7296 = load i64, i64* %20, align 8, !dbg !1442
  %7297 = icmp ult i64 %7295, %7296, !dbg !1442
  br label %originalBB459

originalBB463alteredBB:                           ; preds = %originalBB463, %1749
  %7298 = load i8*, i8** %19, align 8, !dbg !1442
  %7299 = load i64, i64* %29, align 8, !dbg !1442
  %7300 = getelementptr inbounds i8, i8* %7298, i64 %7299, !dbg !1442
  store i8 48, i8* %7300, align 1, !dbg !1442
  br label %originalBB463

originalBB467alteredBB:                           ; preds = %originalBB467, %1769
  %7301 = load i64, i64* %29, align 8, !dbg !1445
  %_468 = sub i64 %7301, 1
  %gen469 = mul i64 %_468, 1
  %_470 = sub i64 %7301, 1
  %gen471 = mul i64 %_470, 1
  %_472 = sub i64 0, %7301
  %gen473 = add i64 %_472, 1
  %_474 = shl i64 %7301, 1
  %_475 = shl i64 %7301, 1
  %_476 = shl i64 %7301, 1
  %_477 = sub i64 %7301, 1
  %gen478 = mul i64 %_477, 1
  %7302 = add i64 %7301, 1, !dbg !1445
  store i64 %7302, i64* %29, align 8, !dbg !1445
  br label %originalBB467

originalBB482alteredBB:                           ; preds = %originalBB482, %1788
  br label %originalBB482

originalBB486alteredBB:                           ; preds = %originalBB486, %1805
  store i8 48, i8* %39, align 1, !dbg !1447
  br label %originalBB486

originalBB490alteredBB:                           ; preds = %originalBB490, %1822
  %7303 = load i32, i32* %24, align 4, !dbg !1449
  %_491 = sub i32 %7303, 1
  %gen492 = mul i32 %_491, 1
  %_493 = sub i32 0, %7303
  %gen494 = add i32 %_493, 1
  %_495 = sub i32 %7303, 1
  %gen496 = mul i32 %_495, 1
  %_497 = sub i32 0, %7303
  %gen498 = add i32 %_497, 1
  %_499 = shl i32 %7303, 1
  %7304 = and i32 %7303, 1, !dbg !1451
  %7305 = icmp ne i32 %7304, 0, !dbg !1451
  br label %originalBB490

originalBB503alteredBB:                           ; preds = %originalBB503, %1842
  br label %originalBB503

originalBB507alteredBB:                           ; preds = %originalBB507, %1859
  br label %originalBB507

originalBB511alteredBB:                           ; preds = %originalBB511, %1876
  br label %originalBB511

originalBB515alteredBB:                           ; preds = %originalBB515, %1893
  %7306 = load i32, i32* %23, align 4, !dbg !1455
  br label %originalBB515

originalBB519alteredBB:                           ; preds = %originalBB519, %1911
  %7307 = load i8, i8* %35, align 1, !dbg !1457
  %7308 = trunc i8 %7307 to i1, !dbg !1457
  br label %originalBB519

originalBB523alteredBB:                           ; preds = %originalBB523, %1930
  br label %originalBB523

originalBB527alteredBB:                           ; preds = %originalBB527, %1947
  br label %originalBB527

originalBB531alteredBB:                           ; preds = %originalBB531, %1964
  %7309 = load i32, i32* %24, align 4, !dbg !1463
  %_532 = shl i32 %7309, 4
  %_533 = shl i32 %7309, 4
  %_534 = shl i32 %7309, 4
  %7310 = and i32 %7309, 4, !dbg !1465
  %7311 = icmp ne i32 %7310, 0, !dbg !1465
  br label %originalBB531

originalBB538alteredBB:                           ; preds = %originalBB538, %1984
  %7312 = load i64, i64* %28, align 8, !dbg !1467
  %_539 = sub i64 %7312, 2
  %gen540 = mul i64 %_539, 2
  %_541 = sub i64 0, %7312
  %gen542 = add i64 %_541, 2
  %_543 = sub i64 %7312, 2
  %gen544 = mul i64 %_543, 2
  %_545 = shl i64 %7312, 2
  %7313 = add i64 %7312, 2, !dbg !1468
  %7314 = load i64, i64* %22, align 8, !dbg !1469
  %7315 = icmp ult i64 %7313, %7314, !dbg !1470
  br label %originalBB538

originalBB549alteredBB:                           ; preds = %originalBB549, %2005
  %7316 = load i8*, i8** %21, align 8, !dbg !1472
  %7317 = load i64, i64* %28, align 8, !dbg !1473
  %_550 = shl i64 %7317, 1
  %_551 = sub i64 %7317, 1
  %gen552 = mul i64 %_551, 1
  %_553 = sub i64 0, %7317
  %gen554 = add i64 %_553, 1
  %7318 = add i64 %7317, 1, !dbg !1474
  %7319 = getelementptr inbounds i8, i8* %7316, i64 %7318, !dbg !1472
  %7320 = load i8, i8* %7319, align 1, !dbg !1472
  %7321 = sext i8 %7320 to i32, !dbg !1472
  %7322 = icmp eq i32 %7321, 63, !dbg !1475
  br label %originalBB549

originalBB558alteredBB:                           ; preds = %originalBB558, %2029
  %7323 = load i8*, i8** %21, align 8, !dbg !1477
  %7324 = load i64, i64* %28, align 8, !dbg !1478
  %_559 = sub i64 0, %7324
  %gen560 = add i64 %_559, 2
  %_561 = shl i64 %7324, 2
  %_562 = shl i64 %7324, 2
  %7325 = add i64 %7324, 2, !dbg !1479
  %7326 = getelementptr inbounds i8, i8* %7323, i64 %7325, !dbg !1477
  %7327 = load i8, i8* %7326, align 1, !dbg !1477
  %7328 = sext i8 %7327 to i32, !dbg !1477
  br label %originalBB558

originalBB566alteredBB:                           ; preds = %originalBB566, %2052
  %7329 = load i8, i8* %35, align 1, !dbg !1481
  %7330 = trunc i8 %7329 to i1, !dbg !1481
  br label %originalBB566

originalBB570alteredBB:                           ; preds = %originalBB570, %2071
  br label %originalBB570

originalBB574alteredBB:                           ; preds = %originalBB574, %2088
  %7331 = load i8*, i8** %21, align 8, !dbg !1486
  %7332 = load i64, i64* %28, align 8, !dbg !1487
  %_575 = sub i64 %7332, 2
  %gen576 = mul i64 %_575, 2
  %7333 = add i64 %7332, 2, !dbg !1488
  %7334 = getelementptr inbounds i8, i8* %7331, i64 %7333, !dbg !1486
  %7335 = load i8, i8* %7334, align 1, !dbg !1486
  store i8 %7335, i8* %39, align 1, !dbg !1489
  %7336 = load i64, i64* %28, align 8, !dbg !1490
  %_577 = shl i64 %7336, 2
  %_578 = shl i64 %7336, 2
  %_579 = shl i64 %7336, 2
  %_580 = sub i64 0, %7336
  %gen581 = add i64 %_580, 2
  %_582 = shl i64 %7336, 2
  %_583 = shl i64 %7336, 2
  %7337 = add i64 %7336, 2, !dbg !1490
  store i64 %7337, i64* %28, align 8, !dbg !1490
  br label %originalBB574

originalBB587alteredBB:                           ; preds = %originalBB587, %2112
  %7338 = load i64, i64* %29, align 8, !dbg !1492
  %7339 = load i64, i64* %20, align 8, !dbg !1492
  %7340 = icmp ult i64 %7338, %7339, !dbg !1492
  br label %originalBB587

originalBB591alteredBB:                           ; preds = %originalBB591, %2132
  %7341 = load i8*, i8** %19, align 8, !dbg !1492
  %7342 = load i64, i64* %29, align 8, !dbg !1492
  %7343 = getelementptr inbounds i8, i8* %7341, i64 %7342, !dbg !1492
  store i8 63, i8* %7343, align 1, !dbg !1492
  br label %originalBB591

originalBB595alteredBB:                           ; preds = %originalBB595, %2152
  %7344 = load i64, i64* %29, align 8, !dbg !1495
  %_596 = sub i64 0, %7344
  %gen597 = add i64 %_596, 1
  %_598 = sub i64 0, %7344
  %gen599 = add i64 %_598, 1
  %7345 = add i64 %7344, 1, !dbg !1495
  store i64 %7345, i64* %29, align 8, !dbg !1495
  br label %originalBB595

originalBB603alteredBB:                           ; preds = %originalBB603, %2171
  br label %originalBB603

originalBB607alteredBB:                           ; preds = %originalBB607, %2188
  %7346 = load i64, i64* %29, align 8, !dbg !1497
  %7347 = load i64, i64* %20, align 8, !dbg !1497
  %7348 = icmp ult i64 %7346, %7347, !dbg !1497
  br label %originalBB607

originalBB611alteredBB:                           ; preds = %originalBB611, %2208
  %7349 = load i8*, i8** %19, align 8, !dbg !1497
  %7350 = load i64, i64* %29, align 8, !dbg !1497
  %7351 = getelementptr inbounds i8, i8* %7349, i64 %7350, !dbg !1497
  store i8 34, i8* %7351, align 1, !dbg !1497
  br label %originalBB611

originalBB615alteredBB:                           ; preds = %originalBB615, %2228
  %7352 = load i64, i64* %29, align 8, !dbg !1500
  %_616 = sub i64 0, %7352
  %gen617 = add i64 %_616, 1
  %_618 = sub i64 0, %7352
  %gen619 = add i64 %_618, 1
  %_620 = sub i64 0, %7352
  %gen621 = add i64 %_620, 1
  %_622 = shl i64 %7352, 1
  %_623 = shl i64 %7352, 1
  %_624 = sub i64 %7352, 1
  %gen625 = mul i64 %_624, 1
  %7353 = add i64 %7352, 1, !dbg !1500
  store i64 %7353, i64* %29, align 8, !dbg !1500
  br label %originalBB615

originalBB629alteredBB:                           ; preds = %originalBB629, %2247
  br label %originalBB629

originalBB633alteredBB:                           ; preds = %originalBB633, %2264
  %7354 = load i64, i64* %29, align 8, !dbg !1502
  %7355 = load i64, i64* %20, align 8, !dbg !1502
  %7356 = icmp ult i64 %7354, %7355, !dbg !1502
  br label %originalBB633

originalBB637alteredBB:                           ; preds = %originalBB637, %2284
  %7357 = load i8*, i8** %19, align 8, !dbg !1502
  %7358 = load i64, i64* %29, align 8, !dbg !1502
  %7359 = getelementptr inbounds i8, i8* %7357, i64 %7358, !dbg !1502
  store i8 34, i8* %7359, align 1, !dbg !1502
  br label %originalBB637

originalBB641alteredBB:                           ; preds = %originalBB641, %2304
  %7360 = load i64, i64* %29, align 8, !dbg !1505
  %_642 = sub i64 %7360, 1
  %gen643 = mul i64 %_642, 1
  %7361 = add i64 %7360, 1, !dbg !1505
  store i64 %7361, i64* %29, align 8, !dbg !1505
  br label %originalBB641

originalBB647alteredBB:                           ; preds = %originalBB647, %2323
  br label %originalBB647

originalBB651alteredBB:                           ; preds = %originalBB651, %2340
  %7362 = load i64, i64* %29, align 8, !dbg !1507
  %7363 = load i64, i64* %20, align 8, !dbg !1507
  %7364 = icmp ult i64 %7362, %7363, !dbg !1507
  br label %originalBB651

originalBB655alteredBB:                           ; preds = %originalBB655, %2360
  %7365 = load i8*, i8** %19, align 8, !dbg !1507
  %7366 = load i64, i64* %29, align 8, !dbg !1507
  %7367 = getelementptr inbounds i8, i8* %7365, i64 %7366, !dbg !1507
  store i8 63, i8* %7367, align 1, !dbg !1507
  br label %originalBB655

originalBB659alteredBB:                           ; preds = %originalBB659, %2380
  %7368 = load i64, i64* %29, align 8, !dbg !1510
  %_660 = shl i64 %7368, 1
  %_661 = sub i64 %7368, 1
  %gen662 = mul i64 %_661, 1
  %_663 = sub i64 0, %7368
  %gen664 = add i64 %_663, 1
  %7369 = add i64 %7368, 1, !dbg !1510
  store i64 %7369, i64* %29, align 8, !dbg !1510
  br label %originalBB659

originalBB668alteredBB:                           ; preds = %originalBB668, %2399
  br label %originalBB668

originalBB672alteredBB:                           ; preds = %originalBB672, %2416
  br label %originalBB672

originalBB676alteredBB:                           ; preds = %originalBB676, %2433
  br label %originalBB676

originalBB680alteredBB:                           ; preds = %originalBB680, %2450
  br label %originalBB680

originalBB684alteredBB:                           ; preds = %originalBB684, %2467
  br label %originalBB684

originalBB688alteredBB:                           ; preds = %originalBB688, %2484
  br label %originalBB688

originalBB692alteredBB:                           ; preds = %originalBB692, %2501
  store i8 97, i8* %40, align 1, !dbg !1517
  br label %originalBB692

originalBB696alteredBB:                           ; preds = %originalBB696, %2518
  store i8 98, i8* %40, align 1, !dbg !1519
  br label %originalBB696

originalBB700alteredBB:                           ; preds = %originalBB700, %2535
  store i8 102, i8* %40, align 1, !dbg !1521
  br label %originalBB700

originalBB704alteredBB:                           ; preds = %originalBB704, %2552
  store i8 110, i8* %40, align 1, !dbg !1523
  br label %originalBB704

originalBB708alteredBB:                           ; preds = %originalBB708, %2569
  store i8 114, i8* %40, align 1, !dbg !1525
  br label %originalBB708

originalBB712alteredBB:                           ; preds = %originalBB712, %2586
  store i8 116, i8* %40, align 1, !dbg !1527
  br label %originalBB712

originalBB716alteredBB:                           ; preds = %originalBB716, %2603
  store i8 118, i8* %40, align 1, !dbg !1529
  br label %originalBB716

originalBB720alteredBB:                           ; preds = %originalBB720, %2620
  %7370 = load i8, i8* %39, align 1, !dbg !1531
  store i8 %7370, i8* %40, align 1, !dbg !1532
  %7371 = load i32, i32* %23, align 4, !dbg !1533
  %7372 = icmp eq i32 %7371, 2, !dbg !1535
  br label %originalBB720

originalBB724alteredBB:                           ; preds = %originalBB724, %2640
  %7373 = load i8, i8* %35, align 1, !dbg !1537
  %7374 = trunc i8 %7373 to i1, !dbg !1537
  br label %originalBB724

originalBB728alteredBB:                           ; preds = %originalBB728, %2659
  br label %originalBB728

originalBB732alteredBB:                           ; preds = %originalBB732, %2676
  br label %originalBB732

originalBB736alteredBB:                           ; preds = %originalBB736, %2693
  %7375 = load i8, i8* %33, align 1, !dbg !1543
  %7376 = trunc i8 %7375 to i1, !dbg !1543
  br label %originalBB736

originalBB740alteredBB:                           ; preds = %originalBB740, %2712
  %7377 = load i8, i8* %35, align 1, !dbg !1546
  %7378 = trunc i8 %7377 to i1, !dbg !1546
  br label %originalBB740

originalBB744alteredBB:                           ; preds = %originalBB744, %2731
  %7379 = load i64, i64* %32, align 8, !dbg !1548
  %7380 = icmp ne i64 %7379, 0, !dbg !1548
  br label %originalBB744

originalBB748alteredBB:                           ; preds = %originalBB748, %2750
  br label %originalBB748

originalBB752alteredBB:                           ; preds = %originalBB752, %2767
  br label %originalBB752

originalBB756alteredBB:                           ; preds = %originalBB756, %2784
  %7381 = load i32, i32* %23, align 4, !dbg !1553
  %7382 = icmp eq i32 %7381, 2, !dbg !1555
  br label %originalBB756

originalBB760alteredBB:                           ; preds = %originalBB760, %2803
  %7383 = load i8, i8* %35, align 1, !dbg !1557
  %7384 = trunc i8 %7383 to i1, !dbg !1557
  br label %originalBB760

originalBB764alteredBB:                           ; preds = %originalBB764, %2822
  br label %originalBB764

originalBB768alteredBB:                           ; preds = %originalBB768, %2839
  br label %originalBB768

originalBB772alteredBB:                           ; preds = %originalBB772, %2856
  %7385 = load i8, i8* %33, align 1, !dbg !1562
  %7386 = trunc i8 %7385 to i1, !dbg !1562
  br label %originalBB772

originalBB776alteredBB:                           ; preds = %originalBB776, %2875
  %7387 = load i8, i8* %40, align 1, !dbg !1565
  store i8 %7387, i8* %39, align 1, !dbg !1567
  br label %originalBB776

originalBB780alteredBB:                           ; preds = %originalBB780, %2893
  br label %originalBB780

originalBB784alteredBB:                           ; preds = %originalBB784, %2910
  %7388 = load i64, i64* %22, align 8, !dbg !1570
  %7389 = icmp eq i64 %7388, -1, !dbg !1572
  br label %originalBB784

originalBB788alteredBB:                           ; preds = %originalBB788, %2929
  %7390 = load i8*, i8** %21, align 8, !dbg !1574
  %7391 = getelementptr inbounds i8, i8* %7390, i64 1, !dbg !1574
  %7392 = load i8, i8* %7391, align 1, !dbg !1574
  %7393 = sext i8 %7392 to i32, !dbg !1574
  %7394 = icmp eq i32 %7393, 0, !dbg !1575
  br label %originalBB788

originalBB792alteredBB:                           ; preds = %originalBB792, %2951
  %7395 = load i64, i64* %22, align 8, !dbg !1576
  %7396 = icmp eq i64 %7395, 1, !dbg !1577
  br label %originalBB792

originalBB796alteredBB:                           ; preds = %originalBB796, %2970
  br label %originalBB796

originalBB800alteredBB:                           ; preds = %originalBB800, %2987
  br label %originalBB800

originalBB804alteredBB:                           ; preds = %originalBB804, %3004
  %7397 = load i64, i64* %28, align 8, !dbg !1580
  %7398 = icmp ne i64 %7397, 0, !dbg !1582
  br label %originalBB804

originalBB808alteredBB:                           ; preds = %originalBB808, %3023
  br label %originalBB808

originalBB812alteredBB:                           ; preds = %originalBB812, %3040
  br label %originalBB812

originalBB816alteredBB:                           ; preds = %originalBB816, %3057
  store i8 1, i8* %43, align 1, !dbg !1586
  br label %originalBB816

originalBB820alteredBB:                           ; preds = %originalBB820, %3074
  %7399 = load i32, i32* %23, align 4, !dbg !1588
  %7400 = icmp eq i32 %7399, 2, !dbg !1590
  br label %originalBB820

originalBB824alteredBB:                           ; preds = %originalBB824, %3093
  %7401 = load i8, i8* %35, align 1, !dbg !1592
  %7402 = trunc i8 %7401 to i1, !dbg !1592
  br label %originalBB824

originalBB828alteredBB:                           ; preds = %originalBB828, %3112
  br label %originalBB828

originalBB832alteredBB:                           ; preds = %originalBB832, %3129
  br label %originalBB832

originalBB836alteredBB:                           ; preds = %originalBB836, %3146
  store i8 1, i8* %37, align 1, !dbg !1596
  store i8 1, i8* %43, align 1, !dbg !1597
  %7403 = load i32, i32* %23, align 4, !dbg !1598
  %7404 = icmp eq i32 %7403, 2, !dbg !1600
  br label %originalBB836

originalBB840alteredBB:                           ; preds = %originalBB840, %3165
  %7405 = load i8, i8* %35, align 1, !dbg !1602
  %7406 = trunc i8 %7405 to i1, !dbg !1602
  br label %originalBB840

originalBB844alteredBB:                           ; preds = %originalBB844, %3184
  br label %originalBB844

originalBB848alteredBB:                           ; preds = %originalBB848, %3201
  %7407 = load i64, i64* %20, align 8, !dbg !1607
  %7408 = icmp ne i64 %7407, 0, !dbg !1607
  br label %originalBB848

originalBB852alteredBB:                           ; preds = %originalBB852, %3220
  %7409 = load i64, i64* %30, align 8, !dbg !1610
  %7410 = icmp ne i64 %7409, 0, !dbg !1610
  br label %originalBB852

originalBB856alteredBB:                           ; preds = %originalBB856, %3239
  %7411 = load i64, i64* %20, align 8, !dbg !1612
  store i64 %7411, i64* %30, align 8, !dbg !1614
  store i64 0, i64* %20, align 8, !dbg !1615
  br label %originalBB856

originalBB860alteredBB:                           ; preds = %originalBB860, %3257
  br label %originalBB860

originalBB864alteredBB:                           ; preds = %originalBB864, %3274
  %7412 = load i64, i64* %29, align 8, !dbg !1618
  %7413 = load i64, i64* %20, align 8, !dbg !1618
  %7414 = icmp ult i64 %7412, %7413, !dbg !1618
  br label %originalBB864

originalBB868alteredBB:                           ; preds = %originalBB868, %3294
  %7415 = load i8*, i8** %19, align 8, !dbg !1618
  %7416 = load i64, i64* %29, align 8, !dbg !1618
  %7417 = getelementptr inbounds i8, i8* %7415, i64 %7416, !dbg !1618
  store i8 39, i8* %7417, align 1, !dbg !1618
  br label %originalBB868

originalBB872alteredBB:                           ; preds = %originalBB872, %3314
  %7418 = load i64, i64* %29, align 8, !dbg !1621
  %_873 = sub i64 %7418, 1
  %gen874 = mul i64 %_873, 1
  %_875 = sub i64 %7418, 1
  %gen876 = mul i64 %_875, 1
  %_877 = sub i64 %7418, 1
  %gen878 = mul i64 %_877, 1
  %_879 = sub i64 0, %7418
  %gen880 = add i64 %_879, 1
  %_881 = shl i64 %7418, 1
  %_882 = sub i64 %7418, 1
  %gen883 = mul i64 %_882, 1
  %_884 = sub i64 %7418, 1
  %gen885 = mul i64 %_884, 1
  %_886 = shl i64 %7418, 1
  %7419 = add i64 %7418, 1, !dbg !1621
  store i64 %7419, i64* %29, align 8, !dbg !1621
  br label %originalBB872

originalBB890alteredBB:                           ; preds = %originalBB890, %3333
  br label %originalBB890

originalBB894alteredBB:                           ; preds = %originalBB894, %3350
  %7420 = load i64, i64* %29, align 8, !dbg !1623
  %7421 = load i64, i64* %20, align 8, !dbg !1623
  %7422 = icmp ult i64 %7420, %7421, !dbg !1623
  br label %originalBB894

originalBB898alteredBB:                           ; preds = %originalBB898, %3370
  %7423 = load i8*, i8** %19, align 8, !dbg !1623
  %7424 = load i64, i64* %29, align 8, !dbg !1623
  %7425 = getelementptr inbounds i8, i8* %7423, i64 %7424, !dbg !1623
  store i8 92, i8* %7425, align 1, !dbg !1623
  br label %originalBB898

originalBB902alteredBB:                           ; preds = %originalBB902, %3390
  %7426 = load i64, i64* %29, align 8, !dbg !1626
  %7427 = add i64 %7426, 1, !dbg !1626
  store i64 %7427, i64* %29, align 8, !dbg !1626
  br label %originalBB902

originalBB906alteredBB:                           ; preds = %originalBB906, %3409
  br label %originalBB906

originalBB910alteredBB:                           ; preds = %originalBB910, %3426
  %7428 = load i64, i64* %29, align 8, !dbg !1628
  %7429 = load i64, i64* %20, align 8, !dbg !1628
  %7430 = icmp ult i64 %7428, %7429, !dbg !1628
  br label %originalBB910

originalBB914alteredBB:                           ; preds = %originalBB914, %3446
  %7431 = load i8*, i8** %19, align 8, !dbg !1628
  %7432 = load i64, i64* %29, align 8, !dbg !1628
  %7433 = getelementptr inbounds i8, i8* %7431, i64 %7432, !dbg !1628
  store i8 39, i8* %7433, align 1, !dbg !1628
  br label %originalBB914

originalBB918alteredBB:                           ; preds = %originalBB918, %3466
  %7434 = load i64, i64* %29, align 8, !dbg !1631
  %_919 = sub i64 %7434, 1
  %gen920 = mul i64 %_919, 1
  %_921 = sub i64 0, %7434
  %gen922 = add i64 %_921, 1
  %_923 = shl i64 %7434, 1
  %_924 = sub i64 0, %7434
  %gen925 = add i64 %_924, 1
  %_926 = sub i64 %7434, 1
  %gen927 = mul i64 %_926, 1
  %_928 = sub i64 0, %7434
  %gen929 = add i64 %_928, 1
  %7435 = add i64 %7434, 1, !dbg !1631
  store i64 %7435, i64* %29, align 8, !dbg !1631
  br label %originalBB918

originalBB933alteredBB:                           ; preds = %originalBB933, %3485
  store i8 0, i8* %36, align 1, !dbg !1632
  br label %originalBB933

originalBB937alteredBB:                           ; preds = %originalBB937, %3502
  br label %originalBB937

originalBB941alteredBB:                           ; preds = %originalBB941, %3519
  store i8 1, i8* %43, align 1, !dbg !1635
  br label %originalBB941

originalBB945alteredBB:                           ; preds = %originalBB945, %3536
  %7436 = load i8, i8* %34, align 1, !dbg !1642
  %7437 = trunc i8 %7436 to i1, !dbg !1642
  br label %originalBB945

originalBB949alteredBB:                           ; preds = %originalBB949, %3555
  store i64 1, i64* %44, align 8, !dbg !1645
  %7438 = call i16** @__ctype_b_loc() #14, !dbg !1647
  %7439 = load i16*, i16** %7438, align 8, !dbg !1647
  %7440 = load i8, i8* %39, align 1, !dbg !1647
  %7441 = zext i8 %7440 to i32, !dbg !1647
  %7442 = sext i32 %7441 to i64, !dbg !1647
  %7443 = getelementptr inbounds i16, i16* %7439, i64 %7442, !dbg !1647
  %7444 = load i16, i16* %7443, align 2, !dbg !1647
  %7445 = zext i16 %7444 to i32, !dbg !1647
  %_950 = sub i32 0, %7445
  %gen951 = add i32 %_950, 16384
  %7446 = and i32 %7445, 16384, !dbg !1647
  %7447 = icmp ne i32 %7446, 0, !dbg !1648
  %7448 = zext i1 %7447 to i8, !dbg !1649
  store i8 %7448, i8* %45, align 1, !dbg !1649
  br label %originalBB949

originalBB955alteredBB:                           ; preds = %originalBB955, %3583
  %7449 = bitcast %struct.__mbstate_t* %46 to i8*, !dbg !1669
  call void @llvm.memset.p0i8.i64(i8* align 4 %7449, i8 0, i64 8, i1 false), !dbg !1669
  store i64 0, i64* %44, align 8, !dbg !1670
  store i8 1, i8* %45, align 1, !dbg !1671
  %7450 = load i64, i64* %22, align 8, !dbg !1672
  %7451 = icmp eq i64 %7450, -1, !dbg !1674
  br label %originalBB955

originalBB959alteredBB:                           ; preds = %originalBB959, %3603
  %7452 = load i8*, i8** %21, align 8, !dbg !1676
  %7453 = call i64 @strlen(i8* %7452) #13, !dbg !1677
  store i64 %7453, i64* %22, align 8, !dbg !1678
  br label %originalBB959

originalBB963alteredBB:                           ; preds = %originalBB963, %3622
  br label %originalBB963

originalBB967alteredBB:                           ; preds = %originalBB967, %3639
  %7454 = load i8*, i8** %21, align 8, !dbg !1687
  %7455 = load i64, i64* %28, align 8, !dbg !1688
  %7456 = load i64, i64* %44, align 8, !dbg !1689
  %_968 = sub i64 %7455, %7456
  %gen969 = mul i64 %_968, %7456
  %_970 = sub i64 0, %7455
  %gen971 = add i64 %_970, %7456
  %_972 = sub i64 %7455, %7456
  %gen973 = mul i64 %_972, %7456
  %7457 = add i64 %7455, %7456, !dbg !1690
  %7458 = getelementptr inbounds i8, i8* %7454, i64 %7457, !dbg !1687
  %7459 = load i64, i64* %22, align 8, !dbg !1691
  %7460 = load i64, i64* %28, align 8, !dbg !1692
  %7461 = load i64, i64* %44, align 8, !dbg !1693
  %_974 = sub i64 %7460, %7461
  %gen975 = mul i64 %_974, %7461
  %_976 = sub i64 0, %7460
  %gen977 = add i64 %_976, %7461
  %_978 = sub i64 0, %7460
  %gen979 = add i64 %_978, %7461
  %_980 = sub i64 %7460, %7461
  %gen981 = mul i64 %_980, %7461
  %_982 = sub i64 %7460, %7461
  %gen983 = mul i64 %_982, %7461
  %7462 = add i64 %7460, %7461, !dbg !1694
  %_984 = sub i64 %7459, %7462
  %gen985 = mul i64 %_984, %7462
  %_986 = sub i64 0, %7459
  %gen987 = add i64 %_986, %7462
  %_988 = shl i64 %7459, %7462
  %7463 = sub i64 %7459, %7462, !dbg !1695
  %7464 = call i64 @rpl_mbrtowc(i32* %47, i8* %7458, i64 %7463, %struct.__mbstate_t* %46), !dbg !1696
  store i64 %7464, i64* %48, align 8, !dbg !1686
  %7465 = load i64, i64* %48, align 8, !dbg !1697
  %7466 = icmp eq i64 %7465, 0, !dbg !1699
  br label %originalBB967

originalBB992alteredBB:                           ; preds = %originalBB992, %3669
  br label %originalBB992

originalBB996alteredBB:                           ; preds = %originalBB996, %3686
  %7467 = load i64, i64* %48, align 8, !dbg !1702
  %7468 = icmp eq i64 %7467, -1, !dbg !1704
  br label %originalBB996

originalBB1000alteredBB:                          ; preds = %originalBB1000, %3705
  store i8 0, i8* %45, align 1, !dbg !1706
  br label %originalBB1000

originalBB1004alteredBB:                          ; preds = %originalBB1004, %3722
  %7469 = load i64, i64* %48, align 8, !dbg !1709
  %7470 = icmp eq i64 %7469, -2, !dbg !1711
  br label %originalBB1004

originalBB1008alteredBB:                          ; preds = %originalBB1008, %3741
  store i8 0, i8* %45, align 1, !dbg !1713
  br label %originalBB1008

originalBB1012alteredBB:                          ; preds = %originalBB1012, %3758
  %7471 = load i64, i64* %28, align 8, !dbg !1716
  %7472 = load i64, i64* %44, align 8, !dbg !1717
  %_1013 = shl i64 %7471, %7472
  %_1014 = sub i64 %7471, %7472
  %gen1015 = mul i64 %_1014, %7472
  %7473 = add i64 %7471, %7472, !dbg !1718
  %7474 = load i64, i64* %22, align 8, !dbg !1719
  %7475 = icmp ult i64 %7473, %7474, !dbg !1720
  br label %originalBB1012

originalBB1019alteredBB:                          ; preds = %originalBB1019, %3780
  %7476 = load i8*, i8** %21, align 8, !dbg !1722
  %7477 = load i64, i64* %28, align 8, !dbg !1723
  %7478 = load i64, i64* %44, align 8, !dbg !1724
  %7479 = add i64 %7477, %7478, !dbg !1725
  %7480 = getelementptr inbounds i8, i8* %7476, i64 %7479, !dbg !1722
  %7481 = load i8, i8* %7480, align 1, !dbg !1722
  %7482 = sext i8 %7481 to i32, !dbg !1722
  %7483 = icmp ne i32 %7482, 0, !dbg !1721
  br label %originalBB1019

originalBB1023alteredBB:                          ; preds = %originalBB1023, %3805
  br label %originalBB1023

originalBB1027alteredBB:                          ; preds = %originalBB1027, %3823
  %7484 = load i64, i64* %44, align 8, !dbg !1727
  %_1028 = shl i64 %7484, 1
  %_1029 = sub i64 0, %7484
  %gen1030 = add i64 %_1029, 1
  %_1031 = sub i64 0, %7484
  %gen1032 = add i64 %_1031, 1
  %_1033 = sub i64 0, %7484
  %gen1034 = add i64 %_1033, 1
  %_1035 = sub i64 %7484, 1
  %gen1036 = mul i64 %_1035, 1
  %_1037 = sub i64 %7484, 1
  %gen1038 = mul i64 %_1037, 1
  %_1039 = shl i64 %7484, 1
  %7485 = add i64 %7484, 1, !dbg !1727
  store i64 %7485, i64* %44, align 8, !dbg !1727
  br label %originalBB1027

originalBB1043alteredBB:                          ; preds = %originalBB1043, %3842
  br label %originalBB1043

originalBB1047alteredBB:                          ; preds = %originalBB1047, %3859
  %7486 = load i8, i8* %35, align 1, !dbg !1730
  %7487 = trunc i8 %7486 to i1, !dbg !1730
  br label %originalBB1047

originalBB1051alteredBB:                          ; preds = %originalBB1051, %3878
  %7488 = load i32, i32* %23, align 4, !dbg !1734
  %7489 = icmp eq i32 %7488, 2, !dbg !1735
  br label %originalBB1051

originalBB1055alteredBB:                          ; preds = %originalBB1055, %3897
  store i64 1, i64* %49, align 8, !dbg !1740
  br label %originalBB1055

originalBB1059alteredBB:                          ; preds = %originalBB1059, %3914
  %7490 = load i64, i64* %49, align 8, !dbg !1743
  %7491 = load i64, i64* %48, align 8, !dbg !1745
  %7492 = icmp ult i64 %7490, %7491, !dbg !1746
  br label %originalBB1059

originalBB1063alteredBB:                          ; preds = %originalBB1063, %3934
  %7493 = load i8*, i8** %21, align 8, !dbg !1748
  %7494 = load i64, i64* %28, align 8, !dbg !1749
  %7495 = load i64, i64* %44, align 8, !dbg !1750
  %_1064 = sub i64 0, %7494
  %gen1065 = add i64 %_1064, %7495
  %_1066 = shl i64 %7494, %7495
  %_1067 = sub i64 %7494, %7495
  %gen1068 = mul i64 %_1067, %7495
  %7496 = add i64 %7494, %7495, !dbg !1751
  %7497 = load i64, i64* %49, align 8, !dbg !1752
  %_1069 = sub i64 0, %7496
  %gen1070 = add i64 %_1069, %7497
  %_1071 = shl i64 %7496, %7497
  %7498 = add i64 %7496, %7497, !dbg !1753
  %7499 = getelementptr inbounds i8, i8* %7493, i64 %7498, !dbg !1748
  %7500 = load i8, i8* %7499, align 1, !dbg !1748
  %7501 = sext i8 %7500 to i32, !dbg !1748
  br label %originalBB1063

originalBB1075alteredBB:                          ; preds = %originalBB1075, %3960
  br label %originalBB1075

originalBB1079alteredBB:                          ; preds = %originalBB1079, %3977
  br label %originalBB1079

originalBB1083alteredBB:                          ; preds = %originalBB1083, %3994
  br label %originalBB1083

originalBB1087alteredBB:                          ; preds = %originalBB1087, %4011
  %7502 = load i64, i64* %49, align 8, !dbg !1759
  %_1088 = sub i64 0, %7502
  %gen1089 = add i64 %_1088, 1
  %_1090 = sub i64 0, %7502
  %gen1091 = add i64 %_1090, 1
  %_1092 = sub i64 0, %7502
  %gen1093 = add i64 %_1092, 1
  %_1094 = sub i64 %7502, 1
  %gen1095 = mul i64 %_1094, 1
  %_1096 = shl i64 %7502, 1
  %_1097 = shl i64 %7502, 1
  %7503 = add i64 %7502, 1, !dbg !1759
  store i64 %7503, i64* %49, align 8, !dbg !1759
  br label %originalBB1087

originalBB1101alteredBB:                          ; preds = %originalBB1101, %4030
  br label %originalBB1101

originalBB1105alteredBB:                          ; preds = %originalBB1105, %4047
  %7504 = load i32, i32* %47, align 4, !dbg !1764
  %7505 = call i32 @iswprint(i32 %7504) #10, !dbg !1766
  %7506 = icmp ne i32 %7505, 0, !dbg !1766
  br label %originalBB1105

originalBB1109alteredBB:                          ; preds = %originalBB1109, %4067
  store i8 0, i8* %45, align 1, !dbg !1768
  br label %originalBB1109

originalBB1113alteredBB:                          ; preds = %originalBB1113, %4084
  %7507 = load i64, i64* %48, align 8, !dbg !1770
  %7508 = load i64, i64* %44, align 8, !dbg !1771
  %_1114 = sub i64 %7508, %7507
  %gen1115 = mul i64 %_1114, %7507
  %_1116 = sub i64 0, %7508
  %gen1117 = add i64 %_1116, %7507
  %_1118 = shl i64 %7508, %7507
  %_1119 = sub i64 0, %7508
  %gen1120 = add i64 %_1119, %7507
  %7509 = add i64 %7508, %7507, !dbg !1771
  store i64 %7509, i64* %44, align 8, !dbg !1771
  br label %originalBB1113

originalBB1124alteredBB:                          ; preds = %originalBB1124, %4104
  br label %originalBB1124

originalBB1128alteredBB:                          ; preds = %originalBB1128, %4121
  br label %originalBB1128

originalBB1132alteredBB:                          ; preds = %originalBB1132, %4138
  br label %originalBB1132

originalBB1136alteredBB:                          ; preds = %originalBB1136, %4155
  %7510 = call i32 @mbsinit(%struct.__mbstate_t* %46) #13, !dbg !1773
  %7511 = icmp ne i32 %7510, 0, !dbg !1774
  %_1137 = sub i1 %7511, true
  %gen1138 = mul i1 %_1137, true
  %_1139 = sub i1 %7511, true
  %gen1140 = mul i1 %_1139, true
  %_1141 = sub i1 false, %7511
  %gen1142 = add i1 %_1141, true
  %7512 = xor i1 %7511, true, !dbg !1774
  br label %originalBB1136

originalBB1146alteredBB:                          ; preds = %originalBB1146, %4175
  br label %originalBB1146

originalBB1150alteredBB:                          ; preds = %originalBB1150, %4192
  %7513 = load i8, i8* %45, align 1, !dbg !1777
  %7514 = trunc i8 %7513 to i1, !dbg !1777
  %7515 = zext i1 %7514 to i8, !dbg !1778
  store i8 %7515, i8* %43, align 1, !dbg !1778
  %7516 = load i64, i64* %44, align 8, !dbg !1779
  %7517 = icmp ult i64 1, %7516, !dbg !1781
  br label %originalBB1150

originalBB1154alteredBB:                          ; preds = %originalBB1154, %4214
  %7518 = load i8, i8* %33, align 1, !dbg !1783
  %7519 = trunc i8 %7518 to i1, !dbg !1783
  br label %originalBB1154

originalBB1158alteredBB:                          ; preds = %originalBB1158, %4233
  %7520 = load i8, i8* %45, align 1, !dbg !1785
  %7521 = trunc i8 %7520 to i1, !dbg !1785
  br label %originalBB1158

originalBB1162alteredBB:                          ; preds = %originalBB1162, %4252
  %7522 = load i64, i64* %28, align 8, !dbg !1790
  %7523 = load i64, i64* %44, align 8, !dbg !1791
  %_1163 = sub i64 0, %7522
  %gen1164 = add i64 %_1163, %7523
  %7524 = add i64 %7522, %7523, !dbg !1792
  store i64 %7524, i64* %50, align 8, !dbg !1789
  br label %originalBB1162

originalBB1168alteredBB:                          ; preds = %originalBB1168, %4272
  %7525 = load i8, i8* %33, align 1, !dbg !1794
  %7526 = trunc i8 %7525 to i1, !dbg !1794
  br label %originalBB1168

originalBB1172alteredBB:                          ; preds = %originalBB1172, %4291
  %7527 = load i8, i8* %45, align 1, !dbg !1800
  %7528 = trunc i8 %7527 to i1, !dbg !1800
  br label %originalBB1172

originalBB1176alteredBB:                          ; preds = %originalBB1176, %4310
  br label %originalBB1176

originalBB1180alteredBB:                          ; preds = %originalBB1180, %4327
  %7529 = load i8, i8* %35, align 1, !dbg !1804
  %7530 = trunc i8 %7529 to i1, !dbg !1804
  br label %originalBB1180

originalBB1184alteredBB:                          ; preds = %originalBB1184, %4346
  br label %originalBB1184

originalBB1188alteredBB:                          ; preds = %originalBB1188, %4363
  store i8 1, i8* %42, align 1, !dbg !1807
  %7531 = load i32, i32* %23, align 4, !dbg !1808
  %7532 = icmp eq i32 %7531, 2, !dbg !1808
  br label %originalBB1188

originalBB1192alteredBB:                          ; preds = %originalBB1192, %4382
  %7533 = load i8, i8* %36, align 1, !dbg !1808
  %7534 = trunc i8 %7533 to i1, !dbg !1808
  br label %originalBB1192

originalBB1196alteredBB:                          ; preds = %originalBB1196, %4401
  br label %originalBB1196

originalBB1200alteredBB:                          ; preds = %originalBB1200, %4418
  %7535 = load i64, i64* %29, align 8, !dbg !1812
  %7536 = load i64, i64* %20, align 8, !dbg !1812
  %7537 = icmp ult i64 %7535, %7536, !dbg !1812
  br label %originalBB1200

originalBB1204alteredBB:                          ; preds = %originalBB1204, %4438
  %7538 = load i8*, i8** %19, align 8, !dbg !1812
  %7539 = load i64, i64* %29, align 8, !dbg !1812
  %7540 = getelementptr inbounds i8, i8* %7538, i64 %7539, !dbg !1812
  store i8 39, i8* %7540, align 1, !dbg !1812
  br label %originalBB1204

originalBB1208alteredBB:                          ; preds = %originalBB1208, %4458
  %7541 = load i64, i64* %29, align 8, !dbg !1815
  %_1209 = shl i64 %7541, 1
  %_1210 = shl i64 %7541, 1
  %_1211 = shl i64 %7541, 1
  %7542 = add i64 %7541, 1, !dbg !1815
  store i64 %7542, i64* %29, align 8, !dbg !1815
  br label %originalBB1208

originalBB1215alteredBB:                          ; preds = %originalBB1215, %4477
  br label %originalBB1215

originalBB1219alteredBB:                          ; preds = %originalBB1219, %4494
  %7543 = load i64, i64* %29, align 8, !dbg !1816
  %7544 = load i64, i64* %20, align 8, !dbg !1816
  %7545 = icmp ult i64 %7543, %7544, !dbg !1816
  br label %originalBB1219

originalBB1223alteredBB:                          ; preds = %originalBB1223, %4514
  %7546 = load i8*, i8** %19, align 8, !dbg !1816
  %7547 = load i64, i64* %29, align 8, !dbg !1816
  %7548 = getelementptr inbounds i8, i8* %7546, i64 %7547, !dbg !1816
  store i8 36, i8* %7548, align 1, !dbg !1816
  br label %originalBB1223

originalBB1227alteredBB:                          ; preds = %originalBB1227, %4534
  %7549 = load i64, i64* %29, align 8, !dbg !1819
  %_1228 = sub i64 %7549, 1
  %gen1229 = mul i64 %_1228, 1
  %_1230 = sub i64 0, %7549
  %gen1231 = add i64 %_1230, 1
  %_1232 = sub i64 0, %7549
  %gen1233 = add i64 %_1232, 1
  %_1234 = shl i64 %7549, 1
  %_1235 = sub i64 %7549, 1
  %gen1236 = mul i64 %_1235, 1
  %_1237 = sub i64 0, %7549
  %gen1238 = add i64 %_1237, 1
  %_1239 = sub i64 %7549, 1
  %gen1240 = mul i64 %_1239, 1
  %7550 = add i64 %7549, 1, !dbg !1819
  store i64 %7550, i64* %29, align 8, !dbg !1819
  br label %originalBB1227

originalBB1244alteredBB:                          ; preds = %originalBB1244, %4553
  br label %originalBB1244

originalBB1248alteredBB:                          ; preds = %originalBB1248, %4570
  %7551 = load i64, i64* %29, align 8, !dbg !1820
  %7552 = load i64, i64* %20, align 8, !dbg !1820
  %7553 = icmp ult i64 %7551, %7552, !dbg !1820
  br label %originalBB1248

originalBB1252alteredBB:                          ; preds = %originalBB1252, %4590
  %7554 = load i8*, i8** %19, align 8, !dbg !1820
  %7555 = load i64, i64* %29, align 8, !dbg !1820
  %7556 = getelementptr inbounds i8, i8* %7554, i64 %7555, !dbg !1820
  store i8 39, i8* %7556, align 1, !dbg !1820
  br label %originalBB1252

originalBB1256alteredBB:                          ; preds = %originalBB1256, %4610
  %7557 = load i64, i64* %29, align 8, !dbg !1823
  %_1257 = sub i64 %7557, 1
  %gen1258 = mul i64 %_1257, 1
  %_1259 = sub i64 0, %7557
  %gen1260 = add i64 %_1259, 1
  %_1261 = sub i64 0, %7557
  %gen1262 = add i64 %_1261, 1
  %_1263 = sub i64 %7557, 1
  %gen1264 = mul i64 %_1263, 1
  %7558 = add i64 %7557, 1, !dbg !1823
  store i64 %7558, i64* %29, align 8, !dbg !1823
  br label %originalBB1256

originalBB1268alteredBB:                          ; preds = %originalBB1268, %4629
  store i8 1, i8* %36, align 1, !dbg !1810
  br label %originalBB1268

originalBB1272alteredBB:                          ; preds = %originalBB1272, %4646
  br label %originalBB1272

originalBB1276alteredBB:                          ; preds = %originalBB1276, %4663
  %7559 = load i64, i64* %29, align 8, !dbg !1824
  %7560 = load i64, i64* %20, align 8, !dbg !1824
  %7561 = icmp ult i64 %7559, %7560, !dbg !1824
  br label %originalBB1276

originalBB1280alteredBB:                          ; preds = %originalBB1280, %4683
  %7562 = load i8*, i8** %19, align 8, !dbg !1824
  %7563 = load i64, i64* %29, align 8, !dbg !1824
  %7564 = getelementptr inbounds i8, i8* %7562, i64 %7563, !dbg !1824
  store i8 92, i8* %7564, align 1, !dbg !1824
  br label %originalBB1280

originalBB1284alteredBB:                          ; preds = %originalBB1284, %4703
  %7565 = load i64, i64* %29, align 8, !dbg !1827
  %_1285 = sub i64 %7565, 1
  %gen1286 = mul i64 %_1285, 1
  %_1287 = shl i64 %7565, 1
  %_1288 = sub i64 0, %7565
  %gen1289 = add i64 %_1288, 1
  %7566 = add i64 %7565, 1, !dbg !1827
  store i64 %7566, i64* %29, align 8, !dbg !1827
  br label %originalBB1284

originalBB1293alteredBB:                          ; preds = %originalBB1293, %4722
  br label %originalBB1293

originalBB1297alteredBB:                          ; preds = %originalBB1297, %4739
  br label %originalBB1297

originalBB1301alteredBB:                          ; preds = %originalBB1301, %4756
  %7567 = load i64, i64* %29, align 8, !dbg !1829
  %7568 = load i64, i64* %20, align 8, !dbg !1829
  %7569 = icmp ult i64 %7567, %7568, !dbg !1829
  br label %originalBB1301

originalBB1305alteredBB:                          ; preds = %originalBB1305, %4776
  %7570 = load i8, i8* %39, align 1, !dbg !1829
  %7571 = zext i8 %7570 to i32, !dbg !1829
  %_1306 = sub i32 0, %7571
  %gen1307 = add i32 %_1306, 6
  %_1308 = sub i32 0, %7571
  %gen1309 = add i32 %_1308, 6
  %_1310 = shl i32 %7571, 6
  %_1311 = sub i32 %7571, 6
  %gen1312 = mul i32 %_1311, 6
  %_1313 = sub i32 %7571, 6
  %gen1314 = mul i32 %_1313, 6
  %_1315 = sub i32 %7571, 6
  %gen1316 = mul i32 %_1315, 6
  %_1317 = sub i32 0, %7571
  %gen1318 = add i32 %_1317, 6
  %_1319 = sub i32 %7571, 6
  %gen1320 = mul i32 %_1319, 6
  %7572 = ashr i32 %7571, 6, !dbg !1829
  %_1321 = shl i32 48, %7572
  %_1322 = shl i32 48, %7572
  %_1323 = sub i32 0, 48
  %gen1324 = add i32 %_1323, %7572
  %7573 = add nsw i32 48, %7572, !dbg !1829
  %7574 = trunc i32 %7573 to i8, !dbg !1829
  %7575 = load i8*, i8** %19, align 8, !dbg !1829
  %7576 = load i64, i64* %29, align 8, !dbg !1829
  %7577 = getelementptr inbounds i8, i8* %7575, i64 %7576, !dbg !1829
  store i8 %7574, i8* %7577, align 1, !dbg !1829
  br label %originalBB1305

originalBB1328alteredBB:                          ; preds = %originalBB1328, %4801
  %7578 = load i64, i64* %29, align 8, !dbg !1832
  %_1329 = sub i64 0, %7578
  %gen1330 = add i64 %_1329, 1
  %_1331 = shl i64 %7578, 1
  %_1332 = shl i64 %7578, 1
  %_1333 = shl i64 %7578, 1
  %_1334 = sub i64 0, %7578
  %gen1335 = add i64 %_1334, 1
  %_1336 = sub i64 0, %7578
  %gen1337 = add i64 %_1336, 1
  %_1338 = sub i64 %7578, 1
  %gen1339 = mul i64 %_1338, 1
  %_1340 = sub i64 %7578, 1
  %gen1341 = mul i64 %_1340, 1
  %_1342 = sub i64 %7578, 1
  %gen1343 = mul i64 %_1342, 1
  %7579 = add i64 %7578, 1, !dbg !1832
  store i64 %7579, i64* %29, align 8, !dbg !1832
  br label %originalBB1328

originalBB1347alteredBB:                          ; preds = %originalBB1347, %4820
  br label %originalBB1347

originalBB1351alteredBB:                          ; preds = %originalBB1351, %4837
  %7580 = load i64, i64* %29, align 8, !dbg !1834
  %7581 = load i64, i64* %20, align 8, !dbg !1834
  %7582 = icmp ult i64 %7580, %7581, !dbg !1834
  br label %originalBB1351

originalBB1355alteredBB:                          ; preds = %originalBB1355, %4857
  %7583 = load i8, i8* %39, align 1, !dbg !1834
  %7584 = zext i8 %7583 to i32, !dbg !1834
  %_1356 = shl i32 %7584, 3
  %_1357 = sub i32 %7584, 3
  %gen1358 = mul i32 %_1357, 3
  %7585 = ashr i32 %7584, 3, !dbg !1834
  %_1359 = shl i32 %7585, 7
  %_1360 = sub i32 %7585, 7
  %gen1361 = mul i32 %_1360, 7
  %_1362 = shl i32 %7585, 7
  %_1363 = sub i32 %7585, 7
  %gen1364 = mul i32 %_1363, 7
  %_1365 = shl i32 %7585, 7
  %7586 = and i32 %7585, 7, !dbg !1834
  %_1366 = shl i32 48, %7586
  %_1367 = shl i32 48, %7586
  %_1368 = sub i32 0, 48
  %gen1369 = add i32 %_1368, %7586
  %_1370 = sub i32 0, 48
  %gen1371 = add i32 %_1370, %7586
  %_1372 = sub i32 0, 48
  %gen1373 = add i32 %_1372, %7586
  %_1374 = sub i32 0, 48
  %gen1375 = add i32 %_1374, %7586
  %7587 = add nsw i32 48, %7586, !dbg !1834
  %7588 = trunc i32 %7587 to i8, !dbg !1834
  %7589 = load i8*, i8** %19, align 8, !dbg !1834
  %7590 = load i64, i64* %29, align 8, !dbg !1834
  %7591 = getelementptr inbounds i8, i8* %7589, i64 %7590, !dbg !1834
  store i8 %7588, i8* %7591, align 1, !dbg !1834
  br label %originalBB1355

originalBB1379alteredBB:                          ; preds = %originalBB1379, %4883
  %7592 = load i64, i64* %29, align 8, !dbg !1837
  %_1380 = sub i64 0, %7592
  %gen1381 = add i64 %_1380, 1
  %_1382 = shl i64 %7592, 1
  %_1383 = sub i64 %7592, 1
  %gen1384 = mul i64 %_1383, 1
  %_1385 = sub i64 %7592, 1
  %gen1386 = mul i64 %_1385, 1
  %_1387 = sub i64 %7592, 1
  %gen1388 = mul i64 %_1387, 1
  %_1389 = sub i64 0, %7592
  %gen1390 = add i64 %_1389, 1
  %7593 = add i64 %7592, 1, !dbg !1837
  store i64 %7593, i64* %29, align 8, !dbg !1837
  br label %originalBB1379

originalBB1394alteredBB:                          ; preds = %originalBB1394, %4902
  %7594 = load i8, i8* %39, align 1, !dbg !1838
  %7595 = zext i8 %7594 to i32, !dbg !1838
  %7596 = and i32 %7595, 7, !dbg !1839
  %_1395 = sub i32 48, %7596
  %gen1396 = mul i32 %_1395, %7596
  %_1397 = shl i32 48, %7596
  %_1398 = shl i32 48, %7596
  %_1399 = sub i32 0, 48
  %gen1400 = add i32 %_1399, %7596
  %_1401 = sub i32 0, 48
  %gen1402 = add i32 %_1401, %7596
  %_1403 = sub i32 48, %7596
  %gen1404 = mul i32 %_1403, %7596
  %7597 = add nsw i32 48, %7596, !dbg !1840
  %7598 = trunc i32 %7597 to i8, !dbg !1841
  store i8 %7598, i8* %39, align 1, !dbg !1842
  br label %originalBB1394

originalBB1408alteredBB:                          ; preds = %originalBB1408, %4924
  %7599 = load i8, i8* %41, align 1, !dbg !1844
  %7600 = trunc i8 %7599 to i1, !dbg !1844
  br label %originalBB1408

originalBB1412alteredBB:                          ; preds = %originalBB1412, %4943
  br label %originalBB1412

originalBB1416alteredBB:                          ; preds = %originalBB1416, %4960
  %7601 = load i64, i64* %29, align 8, !dbg !1849
  %7602 = load i64, i64* %20, align 8, !dbg !1849
  %7603 = icmp ult i64 %7601, %7602, !dbg !1849
  br label %originalBB1416

originalBB1420alteredBB:                          ; preds = %originalBB1420, %4980
  %7604 = load i8*, i8** %19, align 8, !dbg !1849
  %7605 = load i64, i64* %29, align 8, !dbg !1849
  %7606 = getelementptr inbounds i8, i8* %7604, i64 %7605, !dbg !1849
  store i8 92, i8* %7606, align 1, !dbg !1849
  br label %originalBB1420

originalBB1424alteredBB:                          ; preds = %originalBB1424, %5000
  %7607 = load i64, i64* %29, align 8, !dbg !1852
  %_1425 = shl i64 %7607, 1
  %_1426 = sub i64 0, %7607
  %gen1427 = add i64 %_1426, 1
  %_1428 = shl i64 %7607, 1
  %_1429 = shl i64 %7607, 1
  %_1430 = sub i64 0, %7607
  %gen1431 = add i64 %_1430, 1
  %7608 = add i64 %7607, 1, !dbg !1852
  store i64 %7608, i64* %29, align 8, !dbg !1852
  br label %originalBB1424

originalBB1435alteredBB:                          ; preds = %originalBB1435, %5019
  store i8 0, i8* %41, align 1, !dbg !1853
  br label %originalBB1435

originalBB1439alteredBB:                          ; preds = %originalBB1439, %5036
  br label %originalBB1439

originalBB1443alteredBB:                          ; preds = %originalBB1443, %5053
  %7609 = load i64, i64* %50, align 8, !dbg !1855
  %7610 = load i64, i64* %28, align 8, !dbg !1857
  %_1444 = shl i64 %7610, 1
  %_1445 = sub i64 0, %7610
  %gen1446 = add i64 %_1445, 1
  %_1447 = sub i64 0, %7610
  %gen1448 = add i64 %_1447, 1
  %_1449 = sub i64 0, %7610
  %gen1450 = add i64 %_1449, 1
  %_1451 = sub i64 %7610, 1
  %gen1452 = mul i64 %_1451, 1
  %7611 = add i64 %7610, 1, !dbg !1858
  %7612 = icmp ule i64 %7609, %7611, !dbg !1859
  br label %originalBB1443

originalBB1456alteredBB:                          ; preds = %originalBB1456, %5074
  br label %originalBB1456

originalBB1460alteredBB:                          ; preds = %originalBB1460, %5091
  br label %originalBB1460

originalBB1464alteredBB:                          ; preds = %originalBB1464, %5108
  %7613 = load i8, i8* %36, align 1, !dbg !1863
  %7614 = trunc i8 %7613 to i1, !dbg !1863
  br label %originalBB1464

originalBB1468alteredBB:                          ; preds = %originalBB1468, %5127
  %7615 = load i8, i8* %42, align 1, !dbg !1863
  %7616 = trunc i8 %7615 to i1, !dbg !1863
  br label %originalBB1468

originalBB1472alteredBB:                          ; preds = %originalBB1472, %5146
  br label %originalBB1472

originalBB1476alteredBB:                          ; preds = %originalBB1476, %5163
  %7617 = load i64, i64* %29, align 8, !dbg !1869
  %7618 = load i64, i64* %20, align 8, !dbg !1869
  %7619 = icmp ult i64 %7617, %7618, !dbg !1869
  br label %originalBB1476

originalBB1480alteredBB:                          ; preds = %originalBB1480, %5183
  %7620 = load i8*, i8** %19, align 8, !dbg !1869
  %7621 = load i64, i64* %29, align 8, !dbg !1869
  %7622 = getelementptr inbounds i8, i8* %7620, i64 %7621, !dbg !1869
  store i8 39, i8* %7622, align 1, !dbg !1869
  br label %originalBB1480

originalBB1484alteredBB:                          ; preds = %originalBB1484, %5203
  %7623 = load i64, i64* %29, align 8, !dbg !1872
  %_1485 = shl i64 %7623, 1
  %_1486 = shl i64 %7623, 1
  %7624 = add i64 %7623, 1, !dbg !1872
  store i64 %7624, i64* %29, align 8, !dbg !1872
  br label %originalBB1484

originalBB1490alteredBB:                          ; preds = %originalBB1490, %5222
  br label %originalBB1490

originalBB1494alteredBB:                          ; preds = %originalBB1494, %5239
  %7625 = load i64, i64* %29, align 8, !dbg !1873
  %7626 = load i64, i64* %20, align 8, !dbg !1873
  %7627 = icmp ult i64 %7625, %7626, !dbg !1873
  br label %originalBB1494

originalBB1498alteredBB:                          ; preds = %originalBB1498, %5259
  %7628 = load i8*, i8** %19, align 8, !dbg !1873
  %7629 = load i64, i64* %29, align 8, !dbg !1873
  %7630 = getelementptr inbounds i8, i8* %7628, i64 %7629, !dbg !1873
  store i8 39, i8* %7630, align 1, !dbg !1873
  br label %originalBB1498

originalBB1502alteredBB:                          ; preds = %originalBB1502, %5279
  %7631 = load i64, i64* %29, align 8, !dbg !1876
  %_1503 = shl i64 %7631, 1
  %_1504 = sub i64 %7631, 1
  %gen1505 = mul i64 %_1504, 1
  %7632 = add i64 %7631, 1, !dbg !1876
  store i64 %7632, i64* %29, align 8, !dbg !1876
  br label %originalBB1502

originalBB1509alteredBB:                          ; preds = %originalBB1509, %5298
  store i8 0, i8* %36, align 1, !dbg !1867
  br label %originalBB1509

originalBB1513alteredBB:                          ; preds = %originalBB1513, %5315
  br label %originalBB1513

originalBB1517alteredBB:                          ; preds = %originalBB1517, %5332
  br label %originalBB1517

originalBB1521alteredBB:                          ; preds = %originalBB1521, %5349
  %7633 = load i64, i64* %29, align 8, !dbg !1878
  %7634 = load i64, i64* %20, align 8, !dbg !1878
  %7635 = icmp ult i64 %7633, %7634, !dbg !1878
  br label %originalBB1521

originalBB1525alteredBB:                          ; preds = %originalBB1525, %5369
  %7636 = load i8, i8* %39, align 1, !dbg !1878
  %7637 = load i8*, i8** %19, align 8, !dbg !1878
  %7638 = load i64, i64* %29, align 8, !dbg !1878
  %7639 = getelementptr inbounds i8, i8* %7637, i64 %7638, !dbg !1878
  store i8 %7636, i8* %7639, align 1, !dbg !1878
  br label %originalBB1525

originalBB1529alteredBB:                          ; preds = %originalBB1529, %5390
  %7640 = load i64, i64* %29, align 8, !dbg !1881
  %_1530 = sub i64 %7640, 1
  %gen1531 = mul i64 %_1530, 1
  %7641 = add i64 %7640, 1, !dbg !1881
  store i64 %7641, i64* %29, align 8, !dbg !1881
  br label %originalBB1529

originalBB1535alteredBB:                          ; preds = %originalBB1535, %5409
  %7642 = load i8*, i8** %21, align 8, !dbg !1882
  %7643 = load i64, i64* %28, align 8, !dbg !1883
  %_1536 = sub i64 %7643, 1
  %gen1537 = mul i64 %_1536, 1
  %_1538 = sub i64 %7643, 1
  %gen1539 = mul i64 %_1538, 1
  %_1540 = sub i64 %7643, 1
  %gen1541 = mul i64 %_1540, 1
  %7644 = add i64 %7643, 1, !dbg !1883
  store i64 %7644, i64* %28, align 8, !dbg !1883
  %7645 = getelementptr inbounds i8, i8* %7642, i64 %7644, !dbg !1882
  %7646 = load i8, i8* %7645, align 1, !dbg !1882
  store i8 %7646, i8* %39, align 1, !dbg !1884
  br label %originalBB1535

originalBB1545alteredBB:                          ; preds = %originalBB1545, %5431
  br label %originalBB1545

originalBB1549alteredBB:                          ; preds = %originalBB1549, %5448
  br label %originalBB1549

originalBB1553alteredBB:                          ; preds = %originalBB1553, %5465
  %7647 = load i8, i8* %33, align 1, !dbg !1891
  %7648 = trunc i8 %7647 to i1, !dbg !1891
  br label %originalBB1553

originalBB1557alteredBB:                          ; preds = %originalBB1557, %5484
  %7649 = load i32, i32* %23, align 4, !dbg !1894
  %7650 = icmp ne i32 %7649, 2, !dbg !1895
  br label %originalBB1557

originalBB1561alteredBB:                          ; preds = %originalBB1561, %5503
  %7651 = load i8, i8* %35, align 1, !dbg !1897
  %7652 = trunc i8 %7651 to i1, !dbg !1897
  br label %originalBB1561

originalBB1565alteredBB:                          ; preds = %originalBB1565, %5522
  %7653 = load i32*, i32** %25, align 8, !dbg !1899
  %7654 = icmp ne i32* %7653, null, !dbg !1899
  br label %originalBB1565

originalBB1569alteredBB:                          ; preds = %originalBB1569, %5541
  %7655 = load i32*, i32** %25, align 8, !dbg !1901
  %7656 = load i8, i8* %39, align 1, !dbg !1902
  %7657 = zext i8 %7656 to i64, !dbg !1902
  %_1570 = shl i64 %7657, 32
  %7658 = udiv i64 %7657, 32, !dbg !1903
  %7659 = getelementptr inbounds i32, i32* %7655, i64 %7658, !dbg !1901
  %7660 = load i32, i32* %7659, align 4, !dbg !1901
  %7661 = load i8, i8* %39, align 1, !dbg !1904
  %7662 = zext i8 %7661 to i64, !dbg !1904
  %_1571 = sub i64 0, %7662
  %gen1572 = add i64 %_1571, 32
  %_1573 = sub i64 0, %7662
  %gen1574 = add i64 %_1573, 32
  %_1575 = shl i64 %7662, 32
  %_1576 = sub i64 0, %7662
  %gen1577 = add i64 %_1576, 32
  %_1578 = sub i64 %7662, 32
  %gen1579 = mul i64 %_1578, 32
  %_1580 = sub i64 %7662, 32
  %gen1581 = mul i64 %_1580, 32
  %7663 = urem i64 %7662, 32, !dbg !1905
  %7664 = trunc i64 %7663 to i32, !dbg !1906
  %_1582 = shl i32 %7660, %7664
  %_1583 = sub i32 0, %7660
  %gen1584 = add i32 %_1583, %7664
  %_1585 = sub i32 %7660, %7664
  %gen1586 = mul i32 %_1585, %7664
  %_1587 = shl i32 %7660, %7664
  %_1588 = sub i32 %7660, %7664
  %gen1589 = mul i32 %_1588, %7664
  %7665 = lshr i32 %7660, %7664, !dbg !1906
  %_1590 = sub i32 %7665, 1
  %gen1591 = mul i32 %_1590, 1
  %_1592 = sub i32 0, %7665
  %gen1593 = add i32 %_1592, 1
  %_1594 = sub i32 0, %7665
  %gen1595 = add i32 %_1594, 1
  %_1596 = sub i32 %7665, 1
  %gen1597 = mul i32 %_1596, 1
  %7666 = and i32 %7665, 1, !dbg !1907
  %7667 = icmp ne i32 %7666, 0, !dbg !1907
  br label %originalBB1569

originalBB1601alteredBB:                          ; preds = %originalBB1601, %5571
  %7668 = load i8, i8* %41, align 1, !dbg !1909
  %7669 = trunc i8 %7668 to i1, !dbg !1909
  br label %originalBB1601

originalBB1605alteredBB:                          ; preds = %originalBB1605, %5590
  br label %originalBB1605

originalBB1609alteredBB:                          ; preds = %originalBB1609, %5607
  br label %originalBB1609

originalBB1613alteredBB:                          ; preds = %originalBB1613, %5624
  br label %originalBB1613

originalBB1617alteredBB:                          ; preds = %originalBB1617, %5641
  %7670 = load i8, i8* %35, align 1, !dbg !1915
  %7671 = trunc i8 %7670 to i1, !dbg !1915
  br label %originalBB1617

originalBB1621alteredBB:                          ; preds = %originalBB1621, %5660
  br label %originalBB1621

originalBB1625alteredBB:                          ; preds = %originalBB1625, %5677
  store i8 1, i8* %42, align 1, !dbg !1918
  %7672 = load i32, i32* %23, align 4, !dbg !1919
  %7673 = icmp eq i32 %7672, 2, !dbg !1919
  br label %originalBB1625

originalBB1629alteredBB:                          ; preds = %originalBB1629, %5696
  %7674 = load i8, i8* %36, align 1, !dbg !1919
  %7675 = trunc i8 %7674 to i1, !dbg !1919
  br label %originalBB1629

originalBB1633alteredBB:                          ; preds = %originalBB1633, %5715
  br label %originalBB1633

originalBB1637alteredBB:                          ; preds = %originalBB1637, %5732
  %7676 = load i64, i64* %29, align 8, !dbg !1923
  %7677 = load i64, i64* %20, align 8, !dbg !1923
  %7678 = icmp ult i64 %7676, %7677, !dbg !1923
  br label %originalBB1637

originalBB1641alteredBB:                          ; preds = %originalBB1641, %5752
  %7679 = load i8*, i8** %19, align 8, !dbg !1923
  %7680 = load i64, i64* %29, align 8, !dbg !1923
  %7681 = getelementptr inbounds i8, i8* %7679, i64 %7680, !dbg !1923
  store i8 39, i8* %7681, align 1, !dbg !1923
  br label %originalBB1641

originalBB1645alteredBB:                          ; preds = %originalBB1645, %5772
  %7682 = load i64, i64* %29, align 8, !dbg !1926
  %_1646 = shl i64 %7682, 1
  %_1647 = sub i64 0, %7682
  %gen1648 = add i64 %_1647, 1
  %_1649 = shl i64 %7682, 1
  %_1650 = sub i64 0, %7682
  %gen1651 = add i64 %_1650, 1
  %_1652 = sub i64 %7682, 1
  %gen1653 = mul i64 %_1652, 1
  %_1654 = sub i64 0, %7682
  %gen1655 = add i64 %_1654, 1
  %_1656 = sub i64 0, %7682
  %gen1657 = add i64 %_1656, 1
  %7683 = add i64 %7682, 1, !dbg !1926
  store i64 %7683, i64* %29, align 8, !dbg !1926
  br label %originalBB1645

originalBB1661alteredBB:                          ; preds = %originalBB1661, %5791
  br label %originalBB1661

originalBB1665alteredBB:                          ; preds = %originalBB1665, %5808
  %7684 = load i64, i64* %29, align 8, !dbg !1927
  %7685 = load i64, i64* %20, align 8, !dbg !1927
  %7686 = icmp ult i64 %7684, %7685, !dbg !1927
  br label %originalBB1665

originalBB1669alteredBB:                          ; preds = %originalBB1669, %5828
  %7687 = load i8*, i8** %19, align 8, !dbg !1927
  %7688 = load i64, i64* %29, align 8, !dbg !1927
  %7689 = getelementptr inbounds i8, i8* %7687, i64 %7688, !dbg !1927
  store i8 36, i8* %7689, align 1, !dbg !1927
  br label %originalBB1669

originalBB1673alteredBB:                          ; preds = %originalBB1673, %5848
  %7690 = load i64, i64* %29, align 8, !dbg !1930
  %_1674 = sub i64 0, %7690
  %gen1675 = add i64 %_1674, 1
  %_1676 = sub i64 %7690, 1
  %gen1677 = mul i64 %_1676, 1
  %_1678 = sub i64 0, %7690
  %gen1679 = add i64 %_1678, 1
  %_1680 = sub i64 0, %7690
  %gen1681 = add i64 %_1680, 1
  %_1682 = sub i64 %7690, 1
  %gen1683 = mul i64 %_1682, 1
  %_1684 = sub i64 0, %7690
  %gen1685 = add i64 %_1684, 1
  %_1686 = sub i64 0, %7690
  %gen1687 = add i64 %_1686, 1
  %_1688 = shl i64 %7690, 1
  %7691 = add i64 %7690, 1, !dbg !1930
  store i64 %7691, i64* %29, align 8, !dbg !1930
  br label %originalBB1673

originalBB1692alteredBB:                          ; preds = %originalBB1692, %5867
  br label %originalBB1692

originalBB1696alteredBB:                          ; preds = %originalBB1696, %5884
  %7692 = load i64, i64* %29, align 8, !dbg !1931
  %7693 = load i64, i64* %20, align 8, !dbg !1931
  %7694 = icmp ult i64 %7692, %7693, !dbg !1931
  br label %originalBB1696

originalBB1700alteredBB:                          ; preds = %originalBB1700, %5904
  %7695 = load i8*, i8** %19, align 8, !dbg !1931
  %7696 = load i64, i64* %29, align 8, !dbg !1931
  %7697 = getelementptr inbounds i8, i8* %7695, i64 %7696, !dbg !1931
  store i8 39, i8* %7697, align 1, !dbg !1931
  br label %originalBB1700

originalBB1704alteredBB:                          ; preds = %originalBB1704, %5924
  %7698 = load i64, i64* %29, align 8, !dbg !1934
  %_1705 = sub i64 %7698, 1
  %gen1706 = mul i64 %_1705, 1
  %_1707 = sub i64 0, %7698
  %gen1708 = add i64 %_1707, 1
  %_1709 = sub i64 %7698, 1
  %gen1710 = mul i64 %_1709, 1
  %_1711 = sub i64 0, %7698
  %gen1712 = add i64 %_1711, 1
  %_1713 = sub i64 %7698, 1
  %gen1714 = mul i64 %_1713, 1
  %_1715 = sub i64 0, %7698
  %gen1716 = add i64 %_1715, 1
  %_1717 = sub i64 %7698, 1
  %gen1718 = mul i64 %_1717, 1
  %_1719 = shl i64 %7698, 1
  %_1720 = sub i64 0, %7698
  %gen1721 = add i64 %_1720, 1
  %7699 = add i64 %7698, 1, !dbg !1934
  store i64 %7699, i64* %29, align 8, !dbg !1934
  br label %originalBB1704

originalBB1725alteredBB:                          ; preds = %originalBB1725, %5943
  store i8 1, i8* %36, align 1, !dbg !1921
  br label %originalBB1725

originalBB1729alteredBB:                          ; preds = %originalBB1729, %5960
  br label %originalBB1729

originalBB1733alteredBB:                          ; preds = %originalBB1733, %5977
  %7700 = load i64, i64* %29, align 8, !dbg !1935
  %7701 = load i64, i64* %20, align 8, !dbg !1935
  %7702 = icmp ult i64 %7700, %7701, !dbg !1935
  br label %originalBB1733

originalBB1737alteredBB:                          ; preds = %originalBB1737, %5997
  %7703 = load i8*, i8** %19, align 8, !dbg !1935
  %7704 = load i64, i64* %29, align 8, !dbg !1935
  %7705 = getelementptr inbounds i8, i8* %7703, i64 %7704, !dbg !1935
  store i8 92, i8* %7705, align 1, !dbg !1935
  br label %originalBB1737

originalBB1741alteredBB:                          ; preds = %originalBB1741, %6017
  %7706 = load i64, i64* %29, align 8, !dbg !1938
  %_1742 = sub i64 0, %7706
  %gen1743 = add i64 %_1742, 1
  %_1744 = sub i64 %7706, 1
  %gen1745 = mul i64 %_1744, 1
  %7707 = add i64 %7706, 1, !dbg !1938
  store i64 %7707, i64* %29, align 8, !dbg !1938
  br label %originalBB1741

originalBB1749alteredBB:                          ; preds = %originalBB1749, %6036
  br label %originalBB1749

originalBB1753alteredBB:                          ; preds = %originalBB1753, %6053
  br label %originalBB1753

originalBB1757alteredBB:                          ; preds = %originalBB1757, %6070
  br label %originalBB1757

originalBB1761alteredBB:                          ; preds = %originalBB1761, %6087
  %7708 = load i8, i8* %36, align 1, !dbg !1942
  %7709 = trunc i8 %7708 to i1, !dbg !1942
  br label %originalBB1761

originalBB1765alteredBB:                          ; preds = %originalBB1765, %6106
  %7710 = load i8, i8* %42, align 1, !dbg !1942
  %7711 = trunc i8 %7710 to i1, !dbg !1942
  br label %originalBB1765

originalBB1769alteredBB:                          ; preds = %originalBB1769, %6125
  br label %originalBB1769

originalBB1773alteredBB:                          ; preds = %originalBB1773, %6142
  %7712 = load i64, i64* %29, align 8, !dbg !1948
  %7713 = load i64, i64* %20, align 8, !dbg !1948
  %7714 = icmp ult i64 %7712, %7713, !dbg !1948
  br label %originalBB1773

originalBB1777alteredBB:                          ; preds = %originalBB1777, %6162
  %7715 = load i8*, i8** %19, align 8, !dbg !1948
  %7716 = load i64, i64* %29, align 8, !dbg !1948
  %7717 = getelementptr inbounds i8, i8* %7715, i64 %7716, !dbg !1948
  store i8 39, i8* %7717, align 1, !dbg !1948
  br label %originalBB1777

originalBB1781alteredBB:                          ; preds = %originalBB1781, %6182
  %7718 = load i64, i64* %29, align 8, !dbg !1951
  %_1782 = shl i64 %7718, 1
  %_1783 = sub i64 0, %7718
  %gen1784 = add i64 %_1783, 1
  %_1785 = shl i64 %7718, 1
  %_1786 = sub i64 0, %7718
  %gen1787 = add i64 %_1786, 1
  %7719 = add i64 %7718, 1, !dbg !1951
  store i64 %7719, i64* %29, align 8, !dbg !1951
  br label %originalBB1781

originalBB1791alteredBB:                          ; preds = %originalBB1791, %6201
  br label %originalBB1791

originalBB1795alteredBB:                          ; preds = %originalBB1795, %6218
  %7720 = load i64, i64* %29, align 8, !dbg !1952
  %7721 = load i64, i64* %20, align 8, !dbg !1952
  %7722 = icmp ult i64 %7720, %7721, !dbg !1952
  br label %originalBB1795

originalBB1799alteredBB:                          ; preds = %originalBB1799, %6238
  %7723 = load i8*, i8** %19, align 8, !dbg !1952
  %7724 = load i64, i64* %29, align 8, !dbg !1952
  %7725 = getelementptr inbounds i8, i8* %7723, i64 %7724, !dbg !1952
  store i8 39, i8* %7725, align 1, !dbg !1952
  br label %originalBB1799

originalBB1803alteredBB:                          ; preds = %originalBB1803, %6258
  %7726 = load i64, i64* %29, align 8, !dbg !1955
  %_1804 = sub i64 0, %7726
  %gen1805 = add i64 %_1804, 1
  %_1806 = sub i64 0, %7726
  %gen1807 = add i64 %_1806, 1
  %_1808 = sub i64 %7726, 1
  %gen1809 = mul i64 %_1808, 1
  %_1810 = sub i64 %7726, 1
  %gen1811 = mul i64 %_1810, 1
  %7727 = add i64 %7726, 1, !dbg !1955
  store i64 %7727, i64* %29, align 8, !dbg !1955
  br label %originalBB1803

originalBB1815alteredBB:                          ; preds = %originalBB1815, %6277
  store i8 0, i8* %36, align 1, !dbg !1946
  br label %originalBB1815

originalBB1819alteredBB:                          ; preds = %originalBB1819, %6294
  br label %originalBB1819

originalBB1823alteredBB:                          ; preds = %originalBB1823, %6311
  br label %originalBB1823

originalBB1827alteredBB:                          ; preds = %originalBB1827, %6328
  %7728 = load i64, i64* %29, align 8, !dbg !1957
  %7729 = load i64, i64* %20, align 8, !dbg !1957
  %7730 = icmp ult i64 %7728, %7729, !dbg !1957
  br label %originalBB1827

originalBB1831alteredBB:                          ; preds = %originalBB1831, %6348
  %7731 = load i8, i8* %39, align 1, !dbg !1957
  %7732 = load i8*, i8** %19, align 8, !dbg !1957
  %7733 = load i64, i64* %29, align 8, !dbg !1957
  %7734 = getelementptr inbounds i8, i8* %7732, i64 %7733, !dbg !1957
  store i8 %7731, i8* %7734, align 1, !dbg !1957
  br label %originalBB1831

originalBB1835alteredBB:                          ; preds = %originalBB1835, %6369
  %7735 = load i64, i64* %29, align 8, !dbg !1960
  %_1836 = shl i64 %7735, 1
  %_1837 = sub i64 %7735, 1
  %gen1838 = mul i64 %_1837, 1
  %_1839 = sub i64 0, %7735
  %gen1840 = add i64 %_1839, 1
  %_1841 = sub i64 %7735, 1
  %gen1842 = mul i64 %_1841, 1
  %_1843 = sub i64 %7735, 1
  %gen1844 = mul i64 %_1843, 1
  %_1845 = sub i64 %7735, 1
  %gen1846 = mul i64 %_1845, 1
  %7736 = add i64 %7735, 1, !dbg !1960
  store i64 %7736, i64* %29, align 8, !dbg !1960
  br label %originalBB1835

originalBB1850alteredBB:                          ; preds = %originalBB1850, %6388
  %7737 = load i8, i8* %43, align 1, !dbg !1961
  %7738 = trunc i8 %7737 to i1, !dbg !1961
  br label %originalBB1850

originalBB1854alteredBB:                          ; preds = %originalBB1854, %6407
  store i8 0, i8* %38, align 1, !dbg !1964
  br label %originalBB1854

originalBB1858alteredBB:                          ; preds = %originalBB1858, %6424
  br label %originalBB1858

originalBB1862alteredBB:                          ; preds = %originalBB1862, %6441
  %7739 = load i64, i64* %28, align 8, !dbg !1967
  %_1863 = sub i64 0, %7739
  %gen1864 = add i64 %_1863, 1
  %_1865 = shl i64 %7739, 1
  %_1866 = sub i64 %7739, 1
  %gen1867 = mul i64 %_1866, 1
  %_1868 = sub i64 %7739, 1
  %gen1869 = mul i64 %_1868, 1
  %7740 = add i64 %7739, 1, !dbg !1967
  store i64 %7740, i64* %28, align 8, !dbg !1967
  br label %originalBB1862

originalBB1873alteredBB:                          ; preds = %originalBB1873, %6460
  %7741 = load i64, i64* %29, align 8, !dbg !1971
  %7742 = icmp eq i64 %7741, 0, !dbg !1973
  br label %originalBB1873

originalBB1877alteredBB:                          ; preds = %originalBB1877, %6479
  %7743 = load i32, i32* %23, align 4, !dbg !1975
  %7744 = icmp eq i32 %7743, 2, !dbg !1976
  br label %originalBB1877

originalBB1881alteredBB:                          ; preds = %originalBB1881, %6498
  %7745 = load i8, i8* %35, align 1, !dbg !1978
  %7746 = trunc i8 %7745 to i1, !dbg !1978
  br label %originalBB1881

originalBB1885alteredBB:                          ; preds = %originalBB1885, %6517
  br label %originalBB1885

originalBB1889alteredBB:                          ; preds = %originalBB1889, %6534
  %7747 = load i32, i32* %23, align 4, !dbg !1981
  %7748 = icmp eq i32 %7747, 2, !dbg !1983
  br label %originalBB1889

originalBB1893alteredBB:                          ; preds = %originalBB1893, %6553
  %7749 = load i8, i8* %35, align 1, !dbg !1985
  %7750 = trunc i8 %7749 to i1, !dbg !1985
  br label %originalBB1893

originalBB1897alteredBB:                          ; preds = %originalBB1897, %6572
  %7751 = load i8, i8* %37, align 1, !dbg !1987
  %7752 = trunc i8 %7751 to i1, !dbg !1987
  br label %originalBB1897

originalBB1901alteredBB:                          ; preds = %originalBB1901, %6591
  %7753 = load i8, i8* %38, align 1, !dbg !1989
  %7754 = trunc i8 %7753 to i1, !dbg !1989
  br label %originalBB1901

originalBB1905alteredBB:                          ; preds = %originalBB1905, %6610
  %7755 = load i8*, i8** %19, align 8, !dbg !1993
  %7756 = load i64, i64* %30, align 8, !dbg !1994
  %7757 = load i8*, i8** %21, align 8, !dbg !1995
  %7758 = load i64, i64* %22, align 8, !dbg !1996
  %7759 = load i32, i32* %24, align 4, !dbg !1997
  %7760 = load i32*, i32** %25, align 8, !dbg !1998
  %7761 = load i8*, i8** %26, align 8, !dbg !1999
  %7762 = load i8*, i8** %27, align 8, !dbg !2000
  %7763 = call i64 @quotearg_buffer_restyled(i8* %7755, i64 %7756, i8* %7757, i64 %7758, i32 5, i32 %7759, i32* %7760, i8* %7761, i8* %7762), !dbg !2001
  store i64 %7763, i64* %18, align 8, !dbg !2002
  br label %originalBB1905

originalBB1909alteredBB:                          ; preds = %originalBB1909, %6636
  %7764 = load i64, i64* %20, align 8, !dbg !2003
  %7765 = icmp ne i64 %7764, 0, !dbg !2003
  br label %originalBB1909

originalBB1913alteredBB:                          ; preds = %originalBB1913, %6655
  %7766 = load i64, i64* %30, align 8, !dbg !2006
  %7767 = icmp ne i64 %7766, 0, !dbg !2006
  br label %originalBB1913

originalBB1917alteredBB:                          ; preds = %originalBB1917, %6674
  %7768 = load i64, i64* %30, align 8, !dbg !2008
  store i64 %7768, i64* %20, align 8, !dbg !2010
  store i64 0, i64* %29, align 8, !dbg !2011
  br label %originalBB1917

originalBB1921alteredBB:                          ; preds = %originalBB1921, %6692
  br label %originalBB1921

originalBB1925alteredBB:                          ; preds = %originalBB1925, %6709
  br label %originalBB1925

originalBB1929alteredBB:                          ; preds = %originalBB1929, %6726
  %7769 = load i8*, i8** %31, align 8, !dbg !2014
  %7770 = icmp ne i8* %7769, null, !dbg !2014
  br label %originalBB1929

originalBB1933alteredBB:                          ; preds = %originalBB1933, %6745
  %7771 = load i8, i8* %35, align 1, !dbg !2017
  %7772 = trunc i8 %7771 to i1, !dbg !2017
  br label %originalBB1933

originalBB1937alteredBB:                          ; preds = %originalBB1937, %6764
  br label %originalBB1937

originalBB1941alteredBB:                          ; preds = %originalBB1941, %6781
  %7773 = load i8*, i8** %31, align 8, !dbg !2020
  %7774 = load i8, i8* %7773, align 1, !dbg !2023
  %7775 = icmp ne i8 %7774, 0, !dbg !2024
  br label %originalBB1941

originalBB1945alteredBB:                          ; preds = %originalBB1945, %6801
  br label %originalBB1945

originalBB1949alteredBB:                          ; preds = %originalBB1949, %6818
  %7776 = load i64, i64* %29, align 8, !dbg !2026
  %7777 = load i64, i64* %20, align 8, !dbg !2026
  %7778 = icmp ult i64 %7776, %7777, !dbg !2026
  br label %originalBB1949

originalBB1953alteredBB:                          ; preds = %originalBB1953, %6838
  %7779 = load i8*, i8** %31, align 8, !dbg !2026
  %7780 = load i8, i8* %7779, align 1, !dbg !2026
  %7781 = load i8*, i8** %19, align 8, !dbg !2026
  %7782 = load i64, i64* %29, align 8, !dbg !2026
  %7783 = getelementptr inbounds i8, i8* %7781, i64 %7782, !dbg !2026
  store i8 %7780, i8* %7783, align 1, !dbg !2026
  br label %originalBB1953

originalBB1957alteredBB:                          ; preds = %originalBB1957, %6860
  %7784 = load i64, i64* %29, align 8, !dbg !2029
  %_1958 = sub i64 0, %7784
  %gen1959 = add i64 %_1958, 1
  %_1960 = sub i64 %7784, 1
  %gen1961 = mul i64 %_1960, 1
  %_1962 = shl i64 %7784, 1
  %_1963 = sub i64 0, %7784
  %gen1964 = add i64 %_1963, 1
  %_1965 = sub i64 %7784, 1
  %gen1966 = mul i64 %_1965, 1
  %_1967 = sub i64 %7784, 1
  %gen1968 = mul i64 %_1967, 1
  %7785 = add i64 %7784, 1, !dbg !2029
  store i64 %7785, i64* %29, align 8, !dbg !2029
  br label %originalBB1957

originalBB1972alteredBB:                          ; preds = %originalBB1972, %6879
  br label %originalBB1972

originalBB1976alteredBB:                          ; preds = %originalBB1976, %6896
  %7786 = load i8*, i8** %31, align 8, !dbg !2030
  %7787 = getelementptr inbounds i8, i8* %7786, i32 1, !dbg !2030
  store i8* %7787, i8** %31, align 8, !dbg !2030
  br label %originalBB1976

originalBB1980alteredBB:                          ; preds = %originalBB1980, %6915
  br label %originalBB1980

originalBB1984alteredBB:                          ; preds = %originalBB1984, %6932
  %7788 = load i64, i64* %29, align 8, !dbg !2034
  %7789 = load i64, i64* %20, align 8, !dbg !2036
  %7790 = icmp ult i64 %7788, %7789, !dbg !2037
  br label %originalBB1984

originalBB1988alteredBB:                          ; preds = %originalBB1988, %6952
  %7791 = load i8*, i8** %19, align 8, !dbg !2039
  %7792 = load i64, i64* %29, align 8, !dbg !2040
  %7793 = getelementptr inbounds i8, i8* %7791, i64 %7792, !dbg !2039
  store i8 0, i8* %7793, align 1, !dbg !2041
  br label %originalBB1988

originalBB1992alteredBB:                          ; preds = %originalBB1992, %6972
  %7794 = load i64, i64* %29, align 8, !dbg !2042
  store i64 %7794, i64* %18, align 8, !dbg !2043
  br label %originalBB1992

originalBB1996alteredBB:                          ; preds = %originalBB1996, %6990
  %7795 = load i32, i32* %23, align 4, !dbg !2046
  %7796 = icmp eq i32 %7795, 2, !dbg !2048
  br label %originalBB1996

originalBB2000alteredBB:                          ; preds = %originalBB2000, %7009
  %7797 = load i8, i8* %33, align 1, !dbg !2050
  %7798 = trunc i8 %7797 to i1, !dbg !2050
  br label %originalBB2000

originalBB2004alteredBB:                          ; preds = %originalBB2004, %7028
  store i32 4, i32* %23, align 4, !dbg !2052
  br label %originalBB2004

originalBB2008alteredBB:                          ; preds = %originalBB2008, %7045
  %7799 = load i8*, i8** %19, align 8, !dbg !2054
  %7800 = load i64, i64* %20, align 8, !dbg !2055
  %7801 = load i8*, i8** %21, align 8, !dbg !2056
  %7802 = load i64, i64* %22, align 8, !dbg !2057
  %7803 = load i32, i32* %23, align 4, !dbg !2058
  %7804 = load i32, i32* %24, align 4, !dbg !2059
  %_2009 = shl i32 %7804, -3
  %_2010 = sub i32 0, %7804
  %gen2011 = add i32 %_2010, -3
  %_2012 = shl i32 %7804, -3
  %_2013 = sub i32 %7804, -3
  %gen2014 = mul i32 %_2013, -3
  %_2015 = shl i32 %7804, -3
  %_2016 = sub i32 %7804, -3
  %gen2017 = mul i32 %_2016, -3
  %_2018 = sub i32 %7804, -3
  %gen2019 = mul i32 %_2018, -3
  %_2020 = shl i32 %7804, -3
  %7805 = and i32 %7804, -3, !dbg !2060
  %7806 = load i8*, i8** %26, align 8, !dbg !2061
  %7807 = load i8*, i8** %27, align 8, !dbg !2062
  %7808 = call i64 @quotearg_buffer_restyled(i8* %7799, i64 %7800, i8* %7801, i64 %7802, i32 %7803, i32 %7805, i32* null, i8* %7806, i8* %7807), !dbg !2063
  store i64 %7808, i64* %18, align 8, !dbg !2064
  br label %originalBB2008

originalBB2024alteredBB:                          ; preds = %originalBB2024, %7072
  %7809 = load i64, i64* %18, align 8, !dbg !2065
  br label %originalBB2024
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #2

; Function Attrs: nounwind
declare dso_local i64 @__ctype_get_mb_cur_max() #2

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @gettext_quote(i8*, i32) #4 !dbg !2153 {
  %3 = load i32, i32* @x.21
  %4 = load i32, i32* @y.22
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !2156, metadata !DIExpression()), !dbg !2157
  store i32 %1, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !2158, metadata !DIExpression()), !dbg !2159
  call void @llvm.dbg.declare(metadata i8** %14, metadata !2160, metadata !DIExpression()), !dbg !2161
  %16 = load i8*, i8** %12, align 8, !dbg !2162
  %17 = call i8* @gettext(i8* %16) #10, !dbg !2162
  store i8* %17, i8** %14, align 8, !dbg !2161
  call void @llvm.dbg.declare(metadata i8** %15, metadata !2163, metadata !DIExpression()), !dbg !2164
  %18 = load i8*, i8** %14, align 8, !dbg !2165
  %19 = load i8*, i8** %12, align 8, !dbg !2167
  %20 = icmp ne i8* %18, %19, !dbg !2168
  %21 = load i32, i32* @x.21
  %22 = load i32, i32* @y.22
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %20, label %29, label %47, !dbg !2169

29:                                               ; preds = %originalBBpart2
  %30 = load i32, i32* @x.21
  %31 = load i32, i32* @y.22
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %29, %originalBB1alteredBB
  %38 = load i8*, i8** %14, align 8, !dbg !2170
  store i8* %38, i8** %11, align 8, !dbg !2171
  %39 = load i32, i32* @x.21
  %40 = load i32, i32* @y.22
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %157, !dbg !2171

47:                                               ; preds = %originalBBpart2
  %48 = load i32, i32* @x.21
  %49 = load i32, i32* @y.22
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %47, %originalBB6alteredBB
  %56 = call i8* @locale_charset(), !dbg !2172
  store i8* %56, i8** %15, align 8, !dbg !2173
  %57 = load i8*, i8** %15, align 8, !dbg !2174
  %58 = call i32 @c_strcasecmp(i8* %57, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13.65, i64 0, i64 0)) #13, !dbg !2174
  %59 = icmp eq i32 %58, 0, !dbg !2174
  %60 = load i32, i32* @x.21
  %61 = load i32, i32* @y.22
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %59, label %68, label %92, !dbg !2176

68:                                               ; preds = %originalBBpart28
  %69 = load i32, i32* @x.21
  %70 = load i32, i32* @y.22
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %68, %originalBB10alteredBB
  %77 = load i8*, i8** %12, align 8, !dbg !2177
  %78 = getelementptr inbounds i8, i8* %77, i64 0, !dbg !2177
  %79 = load i8, i8* %78, align 1, !dbg !2177
  %80 = sext i8 %79 to i32, !dbg !2177
  %81 = icmp eq i32 %80, 96, !dbg !2178
  %82 = zext i1 %81 to i64, !dbg !2177
  %83 = select i1 %81, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.66, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.67, i64 0, i64 0), !dbg !2177
  store i8* %83, i8** %11, align 8, !dbg !2179
  %84 = load i32, i32* @x.21
  %85 = load i32, i32* @y.22
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %157, !dbg !2179

92:                                               ; preds = %originalBBpart28
  %93 = load i32, i32* @x.21
  %94 = load i32, i32* @y.22
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %92, %originalBB14alteredBB
  %101 = load i8*, i8** %15, align 8, !dbg !2180
  %102 = call i32 @c_strcasecmp(i8* %101, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16.68, i64 0, i64 0)) #13, !dbg !2180
  %103 = icmp eq i32 %102, 0, !dbg !2180
  %104 = load i32, i32* @x.21
  %105 = load i32, i32* @y.22
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %103, label %112, label %136, !dbg !2182

112:                                              ; preds = %originalBBpart216
  %113 = load i32, i32* @x.21
  %114 = load i32, i32* @y.22
  %115 = sub i32 %113, 1
  %116 = mul i32 %113, %115
  %117 = urem i32 %116, 2
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %118, %119
  br i1 %120, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %112, %originalBB18alteredBB
  %121 = load i8*, i8** %12, align 8, !dbg !2183
  %122 = getelementptr inbounds i8, i8* %121, i64 0, !dbg !2183
  %123 = load i8, i8* %122, align 1, !dbg !2183
  %124 = sext i8 %123 to i32, !dbg !2183
  %125 = icmp eq i32 %124, 96, !dbg !2184
  %126 = zext i1 %125 to i64, !dbg !2183
  %127 = select i1 %125, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17.69, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.70, i64 0, i64 0), !dbg !2183
  store i8* %127, i8** %11, align 8, !dbg !2185
  %128 = load i32, i32* @x.21
  %129 = load i32, i32* @y.22
  %130 = sub i32 %128, 1
  %131 = mul i32 %128, %130
  %132 = urem i32 %131, 2
  %133 = icmp eq i32 %132, 0
  %134 = icmp slt i32 %129, 10
  %135 = or i1 %133, %134
  br i1 %135, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %157, !dbg !2185

136:                                              ; preds = %originalBBpart216
  %137 = load i32, i32* @x.21
  %138 = load i32, i32* @y.22
  %139 = sub i32 %137, 1
  %140 = mul i32 %137, %139
  %141 = urem i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %142, %143
  br i1 %144, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %136, %originalBB22alteredBB
  %145 = load i32, i32* %13, align 4, !dbg !2186
  %146 = icmp eq i32 %145, 9, !dbg !2187
  %147 = zext i1 %146 to i64, !dbg !2186
  %148 = select i1 %146, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.62, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.64, i64 0, i64 0), !dbg !2186
  store i8* %148, i8** %11, align 8, !dbg !2188
  %149 = load i32, i32* @x.21
  %150 = load i32, i32* @y.22
  %151 = sub i32 %149, 1
  %152 = mul i32 %149, %151
  %153 = urem i32 %152, 2
  %154 = icmp eq i32 %153, 0
  %155 = icmp slt i32 %150, 10
  %156 = or i1 %154, %155
  br i1 %156, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %157, !dbg !2188

157:                                              ; preds = %originalBBpart224, %originalBBpart220, %originalBBpart212, %originalBBpart24
  %158 = load i32, i32* @x.21
  %159 = load i32, i32* @y.22
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %157, %originalBB26alteredBB
  %166 = load i8*, i8** %11, align 8, !dbg !2189
  %167 = load i32, i32* @x.21
  %168 = load i32, i32* @y.22
  %169 = sub i32 %167, 1
  %170 = mul i32 %167, %169
  %171 = urem i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %172, %173
  br i1 %174, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  ret i8* %166, !dbg !2189

originalBBalteredBB:                              ; preds = %originalBB, %2
  %175 = alloca i8*, align 8
  %176 = alloca i8*, align 8
  %177 = alloca i32, align 4
  %178 = alloca i8*, align 8
  %179 = alloca i8*, align 8
  store i8* %0, i8** %176, align 8
  call void @llvm.dbg.declare(metadata i8** %176, metadata !2190, metadata !DIExpression()), !dbg !2157
  store i32 %1, i32* %177, align 4
  call void @llvm.dbg.declare(metadata i32* %177, metadata !2222, metadata !DIExpression()), !dbg !2159
  call void @llvm.dbg.declare(metadata i8** %178, metadata !2223, metadata !DIExpression()), !dbg !2161
  %180 = load i8*, i8** %176, align 8, !dbg !2162
  %181 = call i8* @gettext(i8* %180) #10, !dbg !2162
  store i8* %181, i8** %178, align 8, !dbg !2161
  call void @llvm.dbg.declare(metadata i8** %179, metadata !2224, metadata !DIExpression()), !dbg !2164
  %182 = load i8*, i8** %178, align 8, !dbg !2165
  %183 = load i8*, i8** %176, align 8, !dbg !2167
  %184 = icmp ne i8* %182, %183, !dbg !2168
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %29
  %185 = load i8*, i8** %14, align 8, !dbg !2170
  store i8* %185, i8** %11, align 8, !dbg !2171
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %47
  %186 = call i8* @locale_charset(), !dbg !2172
  store i8* %186, i8** %15, align 8, !dbg !2173
  %187 = load i8*, i8** %15, align 8, !dbg !2174
  %188 = call i32 @c_strcasecmp(i8* %187, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13.65, i64 0, i64 0)) #13, !dbg !2174
  %189 = icmp eq i32 %188, 0, !dbg !2174
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %68
  %190 = load i8*, i8** %12, align 8, !dbg !2177
  %191 = getelementptr inbounds i8, i8* %190, i64 0, !dbg !2177
  %192 = load i8, i8* %191, align 1, !dbg !2177
  %193 = sext i8 %192 to i32, !dbg !2177
  %194 = icmp eq i32 %193, 96, !dbg !2178
  %195 = zext i1 %194 to i64, !dbg !2177
  %196 = select i1 %194, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.66, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.67, i64 0, i64 0), !dbg !2177
  store i8* %196, i8** %11, align 8, !dbg !2179
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %92
  %197 = load i8*, i8** %15, align 8, !dbg !2180
  %198 = call i32 @c_strcasecmp(i8* %197, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16.68, i64 0, i64 0)) #13, !dbg !2180
  %199 = icmp eq i32 %198, 0, !dbg !2180
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %112
  %200 = load i8*, i8** %12, align 8, !dbg !2183
  %201 = getelementptr inbounds i8, i8* %200, i64 0, !dbg !2183
  %202 = load i8, i8* %201, align 1, !dbg !2183
  %203 = sext i8 %202 to i32, !dbg !2183
  %204 = icmp eq i32 %203, 96, !dbg !2184
  %205 = zext i1 %204 to i64, !dbg !2183
  %206 = select i1 %204, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17.69, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.70, i64 0, i64 0), !dbg !2183
  store i8* %206, i8** %11, align 8, !dbg !2185
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %136
  %207 = load i32, i32* %13, align 4, !dbg !2186
  %208 = icmp eq i32 %207, 9, !dbg !2187
  %209 = zext i1 %208 to i64, !dbg !2186
  %210 = select i1 %208, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.62, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.64, i64 0, i64 0), !dbg !2186
  store i8* %210, i8** %11, align 8, !dbg !2188
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %157
  %211 = load i8*, i8** %11, align 8, !dbg !2189
  br label %originalBB26
}

; Function Attrs: nounwind readonly
declare dso_local i64 @strlen(i8*) #7

; Function Attrs: nounwind readonly
declare dso_local i32 @memcmp(i8*, i8*, i64) #7

; Function Attrs: nounwind readnone
declare dso_local i16** @__ctype_b_loc() #8

; Function Attrs: nounwind
declare dso_local i32 @iswprint(i32) #2

; Function Attrs: nounwind readonly
declare dso_local i32 @mbsinit(%struct.__mbstate_t*) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_char(i8*, i8 signext) #4 !dbg !2225 {
  %3 = load i32, i32* @x.23
  %4 = load i32, i32* @y.24
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i8, align 1
  store i8* %0, i8** %11, align 8
  call void @llvm.dbg.declare(metadata i8** %11, metadata !2228, metadata !DIExpression()), !dbg !2229
  store i8 %1, i8* %12, align 1
  call void @llvm.dbg.declare(metadata i8* %12, metadata !2230, metadata !DIExpression()), !dbg !2231
  %13 = load i8*, i8** %11, align 8, !dbg !2232
  %14 = load i8, i8* %12, align 1, !dbg !2233
  %15 = call i8* @quotearg_char_mem(i8* %13, i64 -1, i8 signext %14), !dbg !2234
  %16 = load i32, i32* @x.23
  %17 = load i32, i32* @y.24
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %15, !dbg !2235

originalBBalteredBB:                              ; preds = %originalBB, %2
  %24 = alloca i8*, align 8
  %25 = alloca i8, align 1
  store i8* %0, i8** %24, align 8
  call void @llvm.dbg.declare(metadata i8** %24, metadata !2236, metadata !DIExpression()), !dbg !2229
  store i8 %1, i8* %25, align 1
  call void @llvm.dbg.declare(metadata i8* %25, metadata !2268, metadata !DIExpression()), !dbg !2231
  %26 = load i8*, i8** %24, align 8, !dbg !2232
  %27 = load i8, i8* %25, align 1, !dbg !2233
  %28 = call i8* @quotearg_char_mem(i8* %26, i64 -1, i8 signext %27), !dbg !2234
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_colon(i8*) #4 !dbg !2269 {
  %2 = load i32, i32* @x.25
  %3 = load i32, i32* @y.26
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !2272, metadata !DIExpression()), !dbg !2273
  %11 = load i8*, i8** %10, align 8, !dbg !2274
  %12 = call i8* @quotearg_char(i8* %11, i8 signext 58), !dbg !2275
  %13 = load i32, i32* @x.25
  %14 = load i32, i32* @y.26
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %12, !dbg !2276

originalBBalteredBB:                              ; preds = %originalBB, %1
  %21 = alloca i8*, align 8
  store i8* %0, i8** %21, align 8
  call void @llvm.dbg.declare(metadata i8** %21, metadata !2277, metadata !DIExpression()), !dbg !2273
  %22 = load i8*, i8** %21, align 8, !dbg !2274
  %23 = call i8* @quotearg_char(i8* %22, i8 signext 58), !dbg !2275
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote_n_mem(i32, i8*, i64) #4 !dbg !2309 {
  %4 = load i32, i32* @x.27
  %5 = load i32, i32* @y.28
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  store i32 %0, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !2312, metadata !DIExpression()), !dbg !2313
  store i8* %1, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !2314, metadata !DIExpression()), !dbg !2315
  store i64 %2, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !2316, metadata !DIExpression()), !dbg !2317
  %15 = load i32, i32* %12, align 4, !dbg !2318
  %16 = load i8*, i8** %13, align 8, !dbg !2319
  %17 = load i64, i64* %14, align 8, !dbg !2320
  %18 = call i8* @quotearg_n_options(i32 %15, i8* %16, i64 %17, %struct.quoting_options* @quote_quoting_options), !dbg !2321
  %19 = load i32, i32* @x.27
  %20 = load i32, i32* @y.28
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %18, !dbg !2322

originalBBalteredBB:                              ; preds = %originalBB, %3
  %27 = alloca i32, align 4
  %28 = alloca i8*, align 8
  %29 = alloca i64, align 8
  store i32 %0, i32* %27, align 4
  call void @llvm.dbg.declare(metadata i32* %27, metadata !2323, metadata !DIExpression()), !dbg !2313
  store i8* %1, i8** %28, align 8
  call void @llvm.dbg.declare(metadata i8** %28, metadata !2355, metadata !DIExpression()), !dbg !2315
  store i64 %2, i64* %29, align 8
  call void @llvm.dbg.declare(metadata i64* %29, metadata !2356, metadata !DIExpression()), !dbg !2317
  %30 = load i32, i32* %27, align 4, !dbg !2318
  %31 = load i8*, i8** %28, align 8, !dbg !2319
  %32 = load i64, i64* %29, align 8, !dbg !2320
  %33 = call i8* @quotearg_n_options(i32 %30, i8* %31, i64 %32, %struct.quoting_options* @quote_quoting_options), !dbg !2321
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote_n(i32, i8*) #4 !dbg !2357 {
  %3 = load i32, i32* @x.29
  %4 = load i32, i32* @y.30
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !2360, metadata !DIExpression()), !dbg !2361
  store i8* %1, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !2362, metadata !DIExpression()), !dbg !2363
  %13 = load i32, i32* %11, align 4, !dbg !2364
  %14 = load i8*, i8** %12, align 8, !dbg !2365
  %15 = call i8* @quote_n_mem(i32 %13, i8* %14, i64 -1), !dbg !2366
  %16 = load i32, i32* @x.29
  %17 = load i32, i32* @y.30
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %15, !dbg !2367

originalBBalteredBB:                              ; preds = %originalBB, %2
  %24 = alloca i32, align 4
  %25 = alloca i8*, align 8
  store i32 %0, i32* %24, align 4
  call void @llvm.dbg.declare(metadata i32* %24, metadata !2368, metadata !DIExpression()), !dbg !2361
  store i8* %1, i8** %25, align 8
  call void @llvm.dbg.declare(metadata i8** %25, metadata !2400, metadata !DIExpression()), !dbg !2363
  %26 = load i32, i32* %24, align 4, !dbg !2364
  %27 = load i8*, i8** %25, align 8, !dbg !2365
  %28 = call i8* @quote_n_mem(i32 %26, i8* %27, i64 -1), !dbg !2366
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote(i8*) #4 !dbg !2401 {
  %2 = load i32, i32* @x.31
  %3 = load i32, i32* @y.32
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !2404, metadata !DIExpression()), !dbg !2405
  %11 = load i8*, i8** %10, align 8, !dbg !2406
  %12 = call i8* @quote_n(i32 0, i8* %11), !dbg !2407
  %13 = load i32, i32* @x.31
  %14 = load i32, i32* @y.32
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %12, !dbg !2408

originalBBalteredBB:                              ; preds = %originalBB, %1
  %21 = alloca i8*, align 8
  store i8* %0, i8** %21, align 8
  call void @llvm.dbg.declare(metadata i8** %21, metadata !2409, metadata !DIExpression()), !dbg !2405
  %22 = load i8*, i8** %21, align 8, !dbg !2406
  %23 = call i8* @quote_n(i32 0, i8* %22), !dbg !2407
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc_arn(%struct._IO_FILE*, i8*, i8*, i8*, i8**, i64) #4 !dbg !2441 {
  %7 = load i32, i32* @x.33
  %8 = load i32, i32* @y.34
  %9 = sub i32 %7, 1
  %10 = mul i32 %7, %9
  %11 = urem i32 %10, 2
  %12 = icmp eq i32 %11, 0
  %13 = icmp slt i32 %8, 10
  %14 = or i1 %12, %13
  br i1 %14, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %6, %originalBBalteredBB
  %15 = alloca %struct._IO_FILE*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca i8*, align 8
  %19 = alloca i8**, align 8
  %20 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %15, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %15, metadata !2501, metadata !DIExpression()), !dbg !2502
  store i8* %1, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !2503, metadata !DIExpression()), !dbg !2504
  store i8* %2, i8** %17, align 8
  call void @llvm.dbg.declare(metadata i8** %17, metadata !2505, metadata !DIExpression()), !dbg !2506
  store i8* %3, i8** %18, align 8
  call void @llvm.dbg.declare(metadata i8** %18, metadata !2507, metadata !DIExpression()), !dbg !2508
  store i8** %4, i8*** %19, align 8
  call void @llvm.dbg.declare(metadata i8*** %19, metadata !2509, metadata !DIExpression()), !dbg !2510
  store i64 %5, i64* %20, align 8
  call void @llvm.dbg.declare(metadata i64* %20, metadata !2511, metadata !DIExpression()), !dbg !2512
  %21 = load i8*, i8** %16, align 8, !dbg !2513
  %22 = icmp ne i8* %21, null, !dbg !2513
  %23 = load i32, i32* @x.33
  %24 = load i32, i32* @y.34
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %31, label %53, !dbg !2515

31:                                               ; preds = %originalBBpart2
  %32 = load i32, i32* @x.33
  %33 = load i32, i32* @y.34
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  %40 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2516
  %41 = load i8*, i8** %16, align 8, !dbg !2517
  %42 = load i8*, i8** %17, align 8, !dbg !2518
  %43 = load i8*, i8** %18, align 8, !dbg !2519
  %44 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %40, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.75, i64 0, i64 0), i8* %41, i8* %42, i8* %43), !dbg !2520
  %45 = load i32, i32* @x.33
  %46 = load i32, i32* @y.34
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %74, !dbg !2520

53:                                               ; preds = %originalBBpart2
  %54 = load i32, i32* @x.33
  %55 = load i32, i32* @y.34
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %53, %originalBB6alteredBB
  %62 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2521
  %63 = load i8*, i8** %17, align 8, !dbg !2522
  %64 = load i8*, i8** %18, align 8, !dbg !2523
  %65 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %62, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.76, i64 0, i64 0), i8* %63, i8* %64), !dbg !2524
  %66 = load i32, i32* @x.33
  %67 = load i32, i32* @y.34
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %74

74:                                               ; preds = %originalBBpart28, %originalBBpart24
  %75 = load i32, i32* @x.33
  %76 = load i32, i32* @y.34
  %77 = sub i32 %75, 1
  %78 = mul i32 %75, %77
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %80, %81
  br i1 %82, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %74, %originalBB10alteredBB
  %83 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2525
  %84 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.77, i64 0, i64 0)) #10, !dbg !2526
  %85 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %83, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @version_etc_copyright, i64 0, i64 0), i8* %84, i32 2020), !dbg !2527
  %86 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2528
  %87 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.78, i64 0, i64 0), %struct._IO_FILE* %86), !dbg !2528
  %88 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2529
  %89 = call i8* @gettext(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.4.79, i64 0, i64 0)) #10, !dbg !2530
  %90 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %88, i8* %89, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5.80, i64 0, i64 0)), !dbg !2531
  %91 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2532
  %92 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.78, i64 0, i64 0), %struct._IO_FILE* %91), !dbg !2532
  %93 = load i64, i64* %20, align 8, !dbg !2533
  %94 = load i32, i32* @x.33
  %95 = load i32, i32* @y.34
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  switch i64 %93, label %434 [
    i64 0, label %102
    i64 1, label %119
    i64 2, label %142
    i64 3, label %168
    i64 4, label %197
    i64 5, label %229
    i64 6, label %264
    i64 7, label %302
    i64 8, label %343
    i64 9, label %387
  ], !dbg !2534

102:                                              ; preds = %originalBBpart212
  %103 = load i32, i32* @x.33
  %104 = load i32, i32* @y.34
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %102, %originalBB14alteredBB
  %111 = load i32, i32* @x.33
  %112 = load i32, i32* @y.34
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %481, !dbg !2535

119:                                              ; preds = %originalBBpart212
  %120 = load i32, i32* @x.33
  %121 = load i32, i32* @y.34
  %122 = sub i32 %120, 1
  %123 = mul i32 %120, %122
  %124 = urem i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %125, %126
  br i1 %127, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %119, %originalBB18alteredBB
  %128 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2537
  %129 = call i8* @gettext(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.81, i64 0, i64 0)) #10, !dbg !2538
  %130 = load i8**, i8*** %19, align 8, !dbg !2539
  %131 = getelementptr inbounds i8*, i8** %130, i64 0, !dbg !2539
  %132 = load i8*, i8** %131, align 8, !dbg !2539
  %133 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %128, i8* %129, i8* %132), !dbg !2540
  %134 = load i32, i32* @x.33
  %135 = load i32, i32* @y.34
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %481, !dbg !2541

142:                                              ; preds = %originalBBpart212
  %143 = load i32, i32* @x.33
  %144 = load i32, i32* @y.34
  %145 = sub i32 %143, 1
  %146 = mul i32 %143, %145
  %147 = urem i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %148, %149
  br i1 %150, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %142, %originalBB22alteredBB
  %151 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2542
  %152 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7.82, i64 0, i64 0)) #10, !dbg !2543
  %153 = load i8**, i8*** %19, align 8, !dbg !2544
  %154 = getelementptr inbounds i8*, i8** %153, i64 0, !dbg !2544
  %155 = load i8*, i8** %154, align 8, !dbg !2544
  %156 = load i8**, i8*** %19, align 8, !dbg !2545
  %157 = getelementptr inbounds i8*, i8** %156, i64 1, !dbg !2545
  %158 = load i8*, i8** %157, align 8, !dbg !2545
  %159 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %151, i8* %152, i8* %155, i8* %158), !dbg !2546
  %160 = load i32, i32* @x.33
  %161 = load i32, i32* @y.34
  %162 = sub i32 %160, 1
  %163 = mul i32 %160, %162
  %164 = urem i32 %163, 2
  %165 = icmp eq i32 %164, 0
  %166 = icmp slt i32 %161, 10
  %167 = or i1 %165, %166
  br i1 %167, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %481, !dbg !2547

168:                                              ; preds = %originalBBpart212
  %169 = load i32, i32* @x.33
  %170 = load i32, i32* @y.34
  %171 = sub i32 %169, 1
  %172 = mul i32 %169, %171
  %173 = urem i32 %172, 2
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %174, %175
  br i1 %176, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %168, %originalBB26alteredBB
  %177 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2548
  %178 = call i8* @gettext(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8.83, i64 0, i64 0)) #10, !dbg !2549
  %179 = load i8**, i8*** %19, align 8, !dbg !2550
  %180 = getelementptr inbounds i8*, i8** %179, i64 0, !dbg !2550
  %181 = load i8*, i8** %180, align 8, !dbg !2550
  %182 = load i8**, i8*** %19, align 8, !dbg !2551
  %183 = getelementptr inbounds i8*, i8** %182, i64 1, !dbg !2551
  %184 = load i8*, i8** %183, align 8, !dbg !2551
  %185 = load i8**, i8*** %19, align 8, !dbg !2552
  %186 = getelementptr inbounds i8*, i8** %185, i64 2, !dbg !2552
  %187 = load i8*, i8** %186, align 8, !dbg !2552
  %188 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %177, i8* %178, i8* %181, i8* %184, i8* %187), !dbg !2553
  %189 = load i32, i32* @x.33
  %190 = load i32, i32* @y.34
  %191 = sub i32 %189, 1
  %192 = mul i32 %189, %191
  %193 = urem i32 %192, 2
  %194 = icmp eq i32 %193, 0
  %195 = icmp slt i32 %190, 10
  %196 = or i1 %194, %195
  br i1 %196, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %481, !dbg !2554

197:                                              ; preds = %originalBBpart212
  %198 = load i32, i32* @x.33
  %199 = load i32, i32* @y.34
  %200 = sub i32 %198, 1
  %201 = mul i32 %198, %200
  %202 = urem i32 %201, 2
  %203 = icmp eq i32 %202, 0
  %204 = icmp slt i32 %199, 10
  %205 = or i1 %203, %204
  br i1 %205, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %197, %originalBB30alteredBB
  %206 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2555
  %207 = call i8* @gettext(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.9.84, i64 0, i64 0)) #10, !dbg !2556
  %208 = load i8**, i8*** %19, align 8, !dbg !2557
  %209 = getelementptr inbounds i8*, i8** %208, i64 0, !dbg !2557
  %210 = load i8*, i8** %209, align 8, !dbg !2557
  %211 = load i8**, i8*** %19, align 8, !dbg !2558
  %212 = getelementptr inbounds i8*, i8** %211, i64 1, !dbg !2558
  %213 = load i8*, i8** %212, align 8, !dbg !2558
  %214 = load i8**, i8*** %19, align 8, !dbg !2559
  %215 = getelementptr inbounds i8*, i8** %214, i64 2, !dbg !2559
  %216 = load i8*, i8** %215, align 8, !dbg !2559
  %217 = load i8**, i8*** %19, align 8, !dbg !2560
  %218 = getelementptr inbounds i8*, i8** %217, i64 3, !dbg !2560
  %219 = load i8*, i8** %218, align 8, !dbg !2560
  %220 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %206, i8* %207, i8* %210, i8* %213, i8* %216, i8* %219), !dbg !2561
  %221 = load i32, i32* @x.33
  %222 = load i32, i32* @y.34
  %223 = sub i32 %221, 1
  %224 = mul i32 %221, %223
  %225 = urem i32 %224, 2
  %226 = icmp eq i32 %225, 0
  %227 = icmp slt i32 %222, 10
  %228 = or i1 %226, %227
  br i1 %228, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %481, !dbg !2562

229:                                              ; preds = %originalBBpart212
  %230 = load i32, i32* @x.33
  %231 = load i32, i32* @y.34
  %232 = sub i32 %230, 1
  %233 = mul i32 %230, %232
  %234 = urem i32 %233, 2
  %235 = icmp eq i32 %234, 0
  %236 = icmp slt i32 %231, 10
  %237 = or i1 %235, %236
  br i1 %237, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %229, %originalBB34alteredBB
  %238 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2563
  %239 = call i8* @gettext(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.10.85, i64 0, i64 0)) #10, !dbg !2564
  %240 = load i8**, i8*** %19, align 8, !dbg !2565
  %241 = getelementptr inbounds i8*, i8** %240, i64 0, !dbg !2565
  %242 = load i8*, i8** %241, align 8, !dbg !2565
  %243 = load i8**, i8*** %19, align 8, !dbg !2566
  %244 = getelementptr inbounds i8*, i8** %243, i64 1, !dbg !2566
  %245 = load i8*, i8** %244, align 8, !dbg !2566
  %246 = load i8**, i8*** %19, align 8, !dbg !2567
  %247 = getelementptr inbounds i8*, i8** %246, i64 2, !dbg !2567
  %248 = load i8*, i8** %247, align 8, !dbg !2567
  %249 = load i8**, i8*** %19, align 8, !dbg !2568
  %250 = getelementptr inbounds i8*, i8** %249, i64 3, !dbg !2568
  %251 = load i8*, i8** %250, align 8, !dbg !2568
  %252 = load i8**, i8*** %19, align 8, !dbg !2569
  %253 = getelementptr inbounds i8*, i8** %252, i64 4, !dbg !2569
  %254 = load i8*, i8** %253, align 8, !dbg !2569
  %255 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %238, i8* %239, i8* %242, i8* %245, i8* %248, i8* %251, i8* %254), !dbg !2570
  %256 = load i32, i32* @x.33
  %257 = load i32, i32* @y.34
  %258 = sub i32 %256, 1
  %259 = mul i32 %256, %258
  %260 = urem i32 %259, 2
  %261 = icmp eq i32 %260, 0
  %262 = icmp slt i32 %257, 10
  %263 = or i1 %261, %262
  br i1 %263, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %481, !dbg !2571

264:                                              ; preds = %originalBBpart212
  %265 = load i32, i32* @x.33
  %266 = load i32, i32* @y.34
  %267 = sub i32 %265, 1
  %268 = mul i32 %265, %267
  %269 = urem i32 %268, 2
  %270 = icmp eq i32 %269, 0
  %271 = icmp slt i32 %266, 10
  %272 = or i1 %270, %271
  br i1 %272, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %264, %originalBB38alteredBB
  %273 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2572
  %274 = call i8* @gettext(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11.86, i64 0, i64 0)) #10, !dbg !2573
  %275 = load i8**, i8*** %19, align 8, !dbg !2574
  %276 = getelementptr inbounds i8*, i8** %275, i64 0, !dbg !2574
  %277 = load i8*, i8** %276, align 8, !dbg !2574
  %278 = load i8**, i8*** %19, align 8, !dbg !2575
  %279 = getelementptr inbounds i8*, i8** %278, i64 1, !dbg !2575
  %280 = load i8*, i8** %279, align 8, !dbg !2575
  %281 = load i8**, i8*** %19, align 8, !dbg !2576
  %282 = getelementptr inbounds i8*, i8** %281, i64 2, !dbg !2576
  %283 = load i8*, i8** %282, align 8, !dbg !2576
  %284 = load i8**, i8*** %19, align 8, !dbg !2577
  %285 = getelementptr inbounds i8*, i8** %284, i64 3, !dbg !2577
  %286 = load i8*, i8** %285, align 8, !dbg !2577
  %287 = load i8**, i8*** %19, align 8, !dbg !2578
  %288 = getelementptr inbounds i8*, i8** %287, i64 4, !dbg !2578
  %289 = load i8*, i8** %288, align 8, !dbg !2578
  %290 = load i8**, i8*** %19, align 8, !dbg !2579
  %291 = getelementptr inbounds i8*, i8** %290, i64 5, !dbg !2579
  %292 = load i8*, i8** %291, align 8, !dbg !2579
  %293 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %273, i8* %274, i8* %277, i8* %280, i8* %283, i8* %286, i8* %289, i8* %292), !dbg !2580
  %294 = load i32, i32* @x.33
  %295 = load i32, i32* @y.34
  %296 = sub i32 %294, 1
  %297 = mul i32 %294, %296
  %298 = urem i32 %297, 2
  %299 = icmp eq i32 %298, 0
  %300 = icmp slt i32 %295, 10
  %301 = or i1 %299, %300
  br i1 %301, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br label %481, !dbg !2581

302:                                              ; preds = %originalBBpart212
  %303 = load i32, i32* @x.33
  %304 = load i32, i32* @y.34
  %305 = sub i32 %303, 1
  %306 = mul i32 %303, %305
  %307 = urem i32 %306, 2
  %308 = icmp eq i32 %307, 0
  %309 = icmp slt i32 %304, 10
  %310 = or i1 %308, %309
  br i1 %310, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %302, %originalBB42alteredBB
  %311 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2582
  %312 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.12.87, i64 0, i64 0)) #10, !dbg !2583
  %313 = load i8**, i8*** %19, align 8, !dbg !2584
  %314 = getelementptr inbounds i8*, i8** %313, i64 0, !dbg !2584
  %315 = load i8*, i8** %314, align 8, !dbg !2584
  %316 = load i8**, i8*** %19, align 8, !dbg !2585
  %317 = getelementptr inbounds i8*, i8** %316, i64 1, !dbg !2585
  %318 = load i8*, i8** %317, align 8, !dbg !2585
  %319 = load i8**, i8*** %19, align 8, !dbg !2586
  %320 = getelementptr inbounds i8*, i8** %319, i64 2, !dbg !2586
  %321 = load i8*, i8** %320, align 8, !dbg !2586
  %322 = load i8**, i8*** %19, align 8, !dbg !2587
  %323 = getelementptr inbounds i8*, i8** %322, i64 3, !dbg !2587
  %324 = load i8*, i8** %323, align 8, !dbg !2587
  %325 = load i8**, i8*** %19, align 8, !dbg !2588
  %326 = getelementptr inbounds i8*, i8** %325, i64 4, !dbg !2588
  %327 = load i8*, i8** %326, align 8, !dbg !2588
  %328 = load i8**, i8*** %19, align 8, !dbg !2589
  %329 = getelementptr inbounds i8*, i8** %328, i64 5, !dbg !2589
  %330 = load i8*, i8** %329, align 8, !dbg !2589
  %331 = load i8**, i8*** %19, align 8, !dbg !2590
  %332 = getelementptr inbounds i8*, i8** %331, i64 6, !dbg !2590
  %333 = load i8*, i8** %332, align 8, !dbg !2590
  %334 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %311, i8* %312, i8* %315, i8* %318, i8* %321, i8* %324, i8* %327, i8* %330, i8* %333), !dbg !2591
  %335 = load i32, i32* @x.33
  %336 = load i32, i32* @y.34
  %337 = sub i32 %335, 1
  %338 = mul i32 %335, %337
  %339 = urem i32 %338, 2
  %340 = icmp eq i32 %339, 0
  %341 = icmp slt i32 %336, 10
  %342 = or i1 %340, %341
  br i1 %342, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br label %481, !dbg !2592

343:                                              ; preds = %originalBBpart212
  %344 = load i32, i32* @x.33
  %345 = load i32, i32* @y.34
  %346 = sub i32 %344, 1
  %347 = mul i32 %344, %346
  %348 = urem i32 %347, 2
  %349 = icmp eq i32 %348, 0
  %350 = icmp slt i32 %345, 10
  %351 = or i1 %349, %350
  br i1 %351, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %343, %originalBB46alteredBB
  %352 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2593
  %353 = call i8* @gettext(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.13.88, i64 0, i64 0)) #10, !dbg !2594
  %354 = load i8**, i8*** %19, align 8, !dbg !2595
  %355 = getelementptr inbounds i8*, i8** %354, i64 0, !dbg !2595
  %356 = load i8*, i8** %355, align 8, !dbg !2595
  %357 = load i8**, i8*** %19, align 8, !dbg !2596
  %358 = getelementptr inbounds i8*, i8** %357, i64 1, !dbg !2596
  %359 = load i8*, i8** %358, align 8, !dbg !2596
  %360 = load i8**, i8*** %19, align 8, !dbg !2597
  %361 = getelementptr inbounds i8*, i8** %360, i64 2, !dbg !2597
  %362 = load i8*, i8** %361, align 8, !dbg !2597
  %363 = load i8**, i8*** %19, align 8, !dbg !2598
  %364 = getelementptr inbounds i8*, i8** %363, i64 3, !dbg !2598
  %365 = load i8*, i8** %364, align 8, !dbg !2598
  %366 = load i8**, i8*** %19, align 8, !dbg !2599
  %367 = getelementptr inbounds i8*, i8** %366, i64 4, !dbg !2599
  %368 = load i8*, i8** %367, align 8, !dbg !2599
  %369 = load i8**, i8*** %19, align 8, !dbg !2600
  %370 = getelementptr inbounds i8*, i8** %369, i64 5, !dbg !2600
  %371 = load i8*, i8** %370, align 8, !dbg !2600
  %372 = load i8**, i8*** %19, align 8, !dbg !2601
  %373 = getelementptr inbounds i8*, i8** %372, i64 6, !dbg !2601
  %374 = load i8*, i8** %373, align 8, !dbg !2601
  %375 = load i8**, i8*** %19, align 8, !dbg !2602
  %376 = getelementptr inbounds i8*, i8** %375, i64 7, !dbg !2602
  %377 = load i8*, i8** %376, align 8, !dbg !2602
  %378 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %352, i8* %353, i8* %356, i8* %359, i8* %362, i8* %365, i8* %368, i8* %371, i8* %374, i8* %377), !dbg !2603
  %379 = load i32, i32* @x.33
  %380 = load i32, i32* @y.34
  %381 = sub i32 %379, 1
  %382 = mul i32 %379, %381
  %383 = urem i32 %382, 2
  %384 = icmp eq i32 %383, 0
  %385 = icmp slt i32 %380, 10
  %386 = or i1 %384, %385
  br i1 %386, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br label %481, !dbg !2604

387:                                              ; preds = %originalBBpart212
  %388 = load i32, i32* @x.33
  %389 = load i32, i32* @y.34
  %390 = sub i32 %388, 1
  %391 = mul i32 %388, %390
  %392 = urem i32 %391, 2
  %393 = icmp eq i32 %392, 0
  %394 = icmp slt i32 %389, 10
  %395 = or i1 %393, %394
  br i1 %395, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %387, %originalBB50alteredBB
  %396 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2605
  %397 = call i8* @gettext(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.14.89, i64 0, i64 0)) #10, !dbg !2606
  %398 = load i8**, i8*** %19, align 8, !dbg !2607
  %399 = getelementptr inbounds i8*, i8** %398, i64 0, !dbg !2607
  %400 = load i8*, i8** %399, align 8, !dbg !2607
  %401 = load i8**, i8*** %19, align 8, !dbg !2608
  %402 = getelementptr inbounds i8*, i8** %401, i64 1, !dbg !2608
  %403 = load i8*, i8** %402, align 8, !dbg !2608
  %404 = load i8**, i8*** %19, align 8, !dbg !2609
  %405 = getelementptr inbounds i8*, i8** %404, i64 2, !dbg !2609
  %406 = load i8*, i8** %405, align 8, !dbg !2609
  %407 = load i8**, i8*** %19, align 8, !dbg !2610
  %408 = getelementptr inbounds i8*, i8** %407, i64 3, !dbg !2610
  %409 = load i8*, i8** %408, align 8, !dbg !2610
  %410 = load i8**, i8*** %19, align 8, !dbg !2611
  %411 = getelementptr inbounds i8*, i8** %410, i64 4, !dbg !2611
  %412 = load i8*, i8** %411, align 8, !dbg !2611
  %413 = load i8**, i8*** %19, align 8, !dbg !2612
  %414 = getelementptr inbounds i8*, i8** %413, i64 5, !dbg !2612
  %415 = load i8*, i8** %414, align 8, !dbg !2612
  %416 = load i8**, i8*** %19, align 8, !dbg !2613
  %417 = getelementptr inbounds i8*, i8** %416, i64 6, !dbg !2613
  %418 = load i8*, i8** %417, align 8, !dbg !2613
  %419 = load i8**, i8*** %19, align 8, !dbg !2614
  %420 = getelementptr inbounds i8*, i8** %419, i64 7, !dbg !2614
  %421 = load i8*, i8** %420, align 8, !dbg !2614
  %422 = load i8**, i8*** %19, align 8, !dbg !2615
  %423 = getelementptr inbounds i8*, i8** %422, i64 8, !dbg !2615
  %424 = load i8*, i8** %423, align 8, !dbg !2615
  %425 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %396, i8* %397, i8* %400, i8* %403, i8* %406, i8* %409, i8* %412, i8* %415, i8* %418, i8* %421, i8* %424), !dbg !2616
  %426 = load i32, i32* @x.33
  %427 = load i32, i32* @y.34
  %428 = sub i32 %426, 1
  %429 = mul i32 %426, %428
  %430 = urem i32 %429, 2
  %431 = icmp eq i32 %430, 0
  %432 = icmp slt i32 %427, 10
  %433 = or i1 %431, %432
  br i1 %433, label %originalBBpart252, label %originalBB50alteredBB

originalBBpart252:                                ; preds = %originalBB50
  br label %481, !dbg !2617

434:                                              ; preds = %originalBBpart212
  %435 = load i32, i32* @x.33
  %436 = load i32, i32* @y.34
  %437 = sub i32 %435, 1
  %438 = mul i32 %435, %437
  %439 = urem i32 %438, 2
  %440 = icmp eq i32 %439, 0
  %441 = icmp slt i32 %436, 10
  %442 = or i1 %440, %441
  br i1 %442, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %434, %originalBB54alteredBB
  %443 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2618
  %444 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.15.90, i64 0, i64 0)) #10, !dbg !2619
  %445 = load i8**, i8*** %19, align 8, !dbg !2620
  %446 = getelementptr inbounds i8*, i8** %445, i64 0, !dbg !2620
  %447 = load i8*, i8** %446, align 8, !dbg !2620
  %448 = load i8**, i8*** %19, align 8, !dbg !2621
  %449 = getelementptr inbounds i8*, i8** %448, i64 1, !dbg !2621
  %450 = load i8*, i8** %449, align 8, !dbg !2621
  %451 = load i8**, i8*** %19, align 8, !dbg !2622
  %452 = getelementptr inbounds i8*, i8** %451, i64 2, !dbg !2622
  %453 = load i8*, i8** %452, align 8, !dbg !2622
  %454 = load i8**, i8*** %19, align 8, !dbg !2623
  %455 = getelementptr inbounds i8*, i8** %454, i64 3, !dbg !2623
  %456 = load i8*, i8** %455, align 8, !dbg !2623
  %457 = load i8**, i8*** %19, align 8, !dbg !2624
  %458 = getelementptr inbounds i8*, i8** %457, i64 4, !dbg !2624
  %459 = load i8*, i8** %458, align 8, !dbg !2624
  %460 = load i8**, i8*** %19, align 8, !dbg !2625
  %461 = getelementptr inbounds i8*, i8** %460, i64 5, !dbg !2625
  %462 = load i8*, i8** %461, align 8, !dbg !2625
  %463 = load i8**, i8*** %19, align 8, !dbg !2626
  %464 = getelementptr inbounds i8*, i8** %463, i64 6, !dbg !2626
  %465 = load i8*, i8** %464, align 8, !dbg !2626
  %466 = load i8**, i8*** %19, align 8, !dbg !2627
  %467 = getelementptr inbounds i8*, i8** %466, i64 7, !dbg !2627
  %468 = load i8*, i8** %467, align 8, !dbg !2627
  %469 = load i8**, i8*** %19, align 8, !dbg !2628
  %470 = getelementptr inbounds i8*, i8** %469, i64 8, !dbg !2628
  %471 = load i8*, i8** %470, align 8, !dbg !2628
  %472 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %443, i8* %444, i8* %447, i8* %450, i8* %453, i8* %456, i8* %459, i8* %462, i8* %465, i8* %468, i8* %471), !dbg !2629
  %473 = load i32, i32* @x.33
  %474 = load i32, i32* @y.34
  %475 = sub i32 %473, 1
  %476 = mul i32 %473, %475
  %477 = urem i32 %476, 2
  %478 = icmp eq i32 %477, 0
  %479 = icmp slt i32 %474, 10
  %480 = or i1 %478, %479
  br i1 %480, label %originalBBpart256, label %originalBB54alteredBB

originalBBpart256:                                ; preds = %originalBB54
  br label %481, !dbg !2630

481:                                              ; preds = %originalBBpart256, %originalBBpart252, %originalBBpart248, %originalBBpart244, %originalBBpart240, %originalBBpart236, %originalBBpart232, %originalBBpart228, %originalBBpart224, %originalBBpart220, %originalBBpart216
  %482 = load i32, i32* @x.33
  %483 = load i32, i32* @y.34
  %484 = sub i32 %482, 1
  %485 = mul i32 %482, %484
  %486 = urem i32 %485, 2
  %487 = icmp eq i32 %486, 0
  %488 = icmp slt i32 %483, 10
  %489 = or i1 %487, %488
  br i1 %489, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %481, %originalBB58alteredBB
  %490 = load i32, i32* @x.33
  %491 = load i32, i32* @y.34
  %492 = sub i32 %490, 1
  %493 = mul i32 %490, %492
  %494 = urem i32 %493, 2
  %495 = icmp eq i32 %494, 0
  %496 = icmp slt i32 %491, 10
  %497 = or i1 %495, %496
  br i1 %497, label %originalBBpart260, label %originalBB58alteredBB

originalBBpart260:                                ; preds = %originalBB58
  ret void, !dbg !2631

originalBBalteredBB:                              ; preds = %originalBB, %6
  %498 = alloca %struct._IO_FILE*, align 8
  %499 = alloca i8*, align 8
  %500 = alloca i8*, align 8
  %501 = alloca i8*, align 8
  %502 = alloca i8**, align 8
  %503 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %498, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %498, metadata !2632, metadata !DIExpression()), !dbg !2502
  store i8* %1, i8** %499, align 8
  call void @llvm.dbg.declare(metadata i8** %499, metadata !2671, metadata !DIExpression()), !dbg !2504
  store i8* %2, i8** %500, align 8
  call void @llvm.dbg.declare(metadata i8** %500, metadata !2672, metadata !DIExpression()), !dbg !2506
  store i8* %3, i8** %501, align 8
  call void @llvm.dbg.declare(metadata i8** %501, metadata !2673, metadata !DIExpression()), !dbg !2508
  store i8** %4, i8*** %502, align 8
  call void @llvm.dbg.declare(metadata i8*** %502, metadata !2674, metadata !DIExpression()), !dbg !2510
  store i64 %5, i64* %503, align 8
  call void @llvm.dbg.declare(metadata i64* %503, metadata !2675, metadata !DIExpression()), !dbg !2512
  %504 = load i8*, i8** %499, align 8, !dbg !2513
  %505 = icmp ne i8* %504, null, !dbg !2513
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  %506 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2516
  %507 = load i8*, i8** %16, align 8, !dbg !2517
  %508 = load i8*, i8** %17, align 8, !dbg !2518
  %509 = load i8*, i8** %18, align 8, !dbg !2519
  %510 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %506, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.75, i64 0, i64 0), i8* %507, i8* %508, i8* %509), !dbg !2520
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %53
  %511 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2521
  %512 = load i8*, i8** %17, align 8, !dbg !2522
  %513 = load i8*, i8** %18, align 8, !dbg !2523
  %514 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %511, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.76, i64 0, i64 0), i8* %512, i8* %513), !dbg !2524
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %74
  %515 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2525
  %516 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.77, i64 0, i64 0)) #10, !dbg !2526
  %517 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %515, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @version_etc_copyright, i64 0, i64 0), i8* %516, i32 2020), !dbg !2527
  %518 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2528
  %519 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.78, i64 0, i64 0), %struct._IO_FILE* %518), !dbg !2528
  %520 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2529
  %521 = call i8* @gettext(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.4.79, i64 0, i64 0)) #10, !dbg !2530
  %522 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %520, i8* %521, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5.80, i64 0, i64 0)), !dbg !2531
  %523 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2532
  %524 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.78, i64 0, i64 0), %struct._IO_FILE* %523), !dbg !2532
  %525 = load i64, i64* %20, align 8, !dbg !2533
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %102
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %119
  %526 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2537
  %527 = call i8* @gettext(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.81, i64 0, i64 0)) #10, !dbg !2538
  %528 = load i8**, i8*** %19, align 8, !dbg !2539
  %529 = getelementptr inbounds i8*, i8** %528, i64 0, !dbg !2539
  %530 = load i8*, i8** %529, align 8, !dbg !2539
  %531 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %526, i8* %527, i8* %530), !dbg !2540
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %142
  %532 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2542
  %533 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7.82, i64 0, i64 0)) #10, !dbg !2543
  %534 = load i8**, i8*** %19, align 8, !dbg !2544
  %535 = getelementptr inbounds i8*, i8** %534, i64 0, !dbg !2544
  %536 = load i8*, i8** %535, align 8, !dbg !2544
  %537 = load i8**, i8*** %19, align 8, !dbg !2545
  %538 = getelementptr inbounds i8*, i8** %537, i64 1, !dbg !2545
  %539 = load i8*, i8** %538, align 8, !dbg !2545
  %540 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %532, i8* %533, i8* %536, i8* %539), !dbg !2546
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %168
  %541 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2548
  %542 = call i8* @gettext(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8.83, i64 0, i64 0)) #10, !dbg !2549
  %543 = load i8**, i8*** %19, align 8, !dbg !2550
  %544 = getelementptr inbounds i8*, i8** %543, i64 0, !dbg !2550
  %545 = load i8*, i8** %544, align 8, !dbg !2550
  %546 = load i8**, i8*** %19, align 8, !dbg !2551
  %547 = getelementptr inbounds i8*, i8** %546, i64 1, !dbg !2551
  %548 = load i8*, i8** %547, align 8, !dbg !2551
  %549 = load i8**, i8*** %19, align 8, !dbg !2552
  %550 = getelementptr inbounds i8*, i8** %549, i64 2, !dbg !2552
  %551 = load i8*, i8** %550, align 8, !dbg !2552
  %552 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %541, i8* %542, i8* %545, i8* %548, i8* %551), !dbg !2553
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %197
  %553 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2555
  %554 = call i8* @gettext(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.9.84, i64 0, i64 0)) #10, !dbg !2556
  %555 = load i8**, i8*** %19, align 8, !dbg !2557
  %556 = getelementptr inbounds i8*, i8** %555, i64 0, !dbg !2557
  %557 = load i8*, i8** %556, align 8, !dbg !2557
  %558 = load i8**, i8*** %19, align 8, !dbg !2558
  %559 = getelementptr inbounds i8*, i8** %558, i64 1, !dbg !2558
  %560 = load i8*, i8** %559, align 8, !dbg !2558
  %561 = load i8**, i8*** %19, align 8, !dbg !2559
  %562 = getelementptr inbounds i8*, i8** %561, i64 2, !dbg !2559
  %563 = load i8*, i8** %562, align 8, !dbg !2559
  %564 = load i8**, i8*** %19, align 8, !dbg !2560
  %565 = getelementptr inbounds i8*, i8** %564, i64 3, !dbg !2560
  %566 = load i8*, i8** %565, align 8, !dbg !2560
  %567 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %553, i8* %554, i8* %557, i8* %560, i8* %563, i8* %566), !dbg !2561
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %229
  %568 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2563
  %569 = call i8* @gettext(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.10.85, i64 0, i64 0)) #10, !dbg !2564
  %570 = load i8**, i8*** %19, align 8, !dbg !2565
  %571 = getelementptr inbounds i8*, i8** %570, i64 0, !dbg !2565
  %572 = load i8*, i8** %571, align 8, !dbg !2565
  %573 = load i8**, i8*** %19, align 8, !dbg !2566
  %574 = getelementptr inbounds i8*, i8** %573, i64 1, !dbg !2566
  %575 = load i8*, i8** %574, align 8, !dbg !2566
  %576 = load i8**, i8*** %19, align 8, !dbg !2567
  %577 = getelementptr inbounds i8*, i8** %576, i64 2, !dbg !2567
  %578 = load i8*, i8** %577, align 8, !dbg !2567
  %579 = load i8**, i8*** %19, align 8, !dbg !2568
  %580 = getelementptr inbounds i8*, i8** %579, i64 3, !dbg !2568
  %581 = load i8*, i8** %580, align 8, !dbg !2568
  %582 = load i8**, i8*** %19, align 8, !dbg !2569
  %583 = getelementptr inbounds i8*, i8** %582, i64 4, !dbg !2569
  %584 = load i8*, i8** %583, align 8, !dbg !2569
  %585 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %568, i8* %569, i8* %572, i8* %575, i8* %578, i8* %581, i8* %584), !dbg !2570
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %264
  %586 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2572
  %587 = call i8* @gettext(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11.86, i64 0, i64 0)) #10, !dbg !2573
  %588 = load i8**, i8*** %19, align 8, !dbg !2574
  %589 = getelementptr inbounds i8*, i8** %588, i64 0, !dbg !2574
  %590 = load i8*, i8** %589, align 8, !dbg !2574
  %591 = load i8**, i8*** %19, align 8, !dbg !2575
  %592 = getelementptr inbounds i8*, i8** %591, i64 1, !dbg !2575
  %593 = load i8*, i8** %592, align 8, !dbg !2575
  %594 = load i8**, i8*** %19, align 8, !dbg !2576
  %595 = getelementptr inbounds i8*, i8** %594, i64 2, !dbg !2576
  %596 = load i8*, i8** %595, align 8, !dbg !2576
  %597 = load i8**, i8*** %19, align 8, !dbg !2577
  %598 = getelementptr inbounds i8*, i8** %597, i64 3, !dbg !2577
  %599 = load i8*, i8** %598, align 8, !dbg !2577
  %600 = load i8**, i8*** %19, align 8, !dbg !2578
  %601 = getelementptr inbounds i8*, i8** %600, i64 4, !dbg !2578
  %602 = load i8*, i8** %601, align 8, !dbg !2578
  %603 = load i8**, i8*** %19, align 8, !dbg !2579
  %604 = getelementptr inbounds i8*, i8** %603, i64 5, !dbg !2579
  %605 = load i8*, i8** %604, align 8, !dbg !2579
  %606 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %586, i8* %587, i8* %590, i8* %593, i8* %596, i8* %599, i8* %602, i8* %605), !dbg !2580
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %302
  %607 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2582
  %608 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.12.87, i64 0, i64 0)) #10, !dbg !2583
  %609 = load i8**, i8*** %19, align 8, !dbg !2584
  %610 = getelementptr inbounds i8*, i8** %609, i64 0, !dbg !2584
  %611 = load i8*, i8** %610, align 8, !dbg !2584
  %612 = load i8**, i8*** %19, align 8, !dbg !2585
  %613 = getelementptr inbounds i8*, i8** %612, i64 1, !dbg !2585
  %614 = load i8*, i8** %613, align 8, !dbg !2585
  %615 = load i8**, i8*** %19, align 8, !dbg !2586
  %616 = getelementptr inbounds i8*, i8** %615, i64 2, !dbg !2586
  %617 = load i8*, i8** %616, align 8, !dbg !2586
  %618 = load i8**, i8*** %19, align 8, !dbg !2587
  %619 = getelementptr inbounds i8*, i8** %618, i64 3, !dbg !2587
  %620 = load i8*, i8** %619, align 8, !dbg !2587
  %621 = load i8**, i8*** %19, align 8, !dbg !2588
  %622 = getelementptr inbounds i8*, i8** %621, i64 4, !dbg !2588
  %623 = load i8*, i8** %622, align 8, !dbg !2588
  %624 = load i8**, i8*** %19, align 8, !dbg !2589
  %625 = getelementptr inbounds i8*, i8** %624, i64 5, !dbg !2589
  %626 = load i8*, i8** %625, align 8, !dbg !2589
  %627 = load i8**, i8*** %19, align 8, !dbg !2590
  %628 = getelementptr inbounds i8*, i8** %627, i64 6, !dbg !2590
  %629 = load i8*, i8** %628, align 8, !dbg !2590
  %630 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %607, i8* %608, i8* %611, i8* %614, i8* %617, i8* %620, i8* %623, i8* %626, i8* %629), !dbg !2591
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %343
  %631 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2593
  %632 = call i8* @gettext(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.13.88, i64 0, i64 0)) #10, !dbg !2594
  %633 = load i8**, i8*** %19, align 8, !dbg !2595
  %634 = getelementptr inbounds i8*, i8** %633, i64 0, !dbg !2595
  %635 = load i8*, i8** %634, align 8, !dbg !2595
  %636 = load i8**, i8*** %19, align 8, !dbg !2596
  %637 = getelementptr inbounds i8*, i8** %636, i64 1, !dbg !2596
  %638 = load i8*, i8** %637, align 8, !dbg !2596
  %639 = load i8**, i8*** %19, align 8, !dbg !2597
  %640 = getelementptr inbounds i8*, i8** %639, i64 2, !dbg !2597
  %641 = load i8*, i8** %640, align 8, !dbg !2597
  %642 = load i8**, i8*** %19, align 8, !dbg !2598
  %643 = getelementptr inbounds i8*, i8** %642, i64 3, !dbg !2598
  %644 = load i8*, i8** %643, align 8, !dbg !2598
  %645 = load i8**, i8*** %19, align 8, !dbg !2599
  %646 = getelementptr inbounds i8*, i8** %645, i64 4, !dbg !2599
  %647 = load i8*, i8** %646, align 8, !dbg !2599
  %648 = load i8**, i8*** %19, align 8, !dbg !2600
  %649 = getelementptr inbounds i8*, i8** %648, i64 5, !dbg !2600
  %650 = load i8*, i8** %649, align 8, !dbg !2600
  %651 = load i8**, i8*** %19, align 8, !dbg !2601
  %652 = getelementptr inbounds i8*, i8** %651, i64 6, !dbg !2601
  %653 = load i8*, i8** %652, align 8, !dbg !2601
  %654 = load i8**, i8*** %19, align 8, !dbg !2602
  %655 = getelementptr inbounds i8*, i8** %654, i64 7, !dbg !2602
  %656 = load i8*, i8** %655, align 8, !dbg !2602
  %657 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %631, i8* %632, i8* %635, i8* %638, i8* %641, i8* %644, i8* %647, i8* %650, i8* %653, i8* %656), !dbg !2603
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %387
  %658 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2605
  %659 = call i8* @gettext(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.14.89, i64 0, i64 0)) #10, !dbg !2606
  %660 = load i8**, i8*** %19, align 8, !dbg !2607
  %661 = getelementptr inbounds i8*, i8** %660, i64 0, !dbg !2607
  %662 = load i8*, i8** %661, align 8, !dbg !2607
  %663 = load i8**, i8*** %19, align 8, !dbg !2608
  %664 = getelementptr inbounds i8*, i8** %663, i64 1, !dbg !2608
  %665 = load i8*, i8** %664, align 8, !dbg !2608
  %666 = load i8**, i8*** %19, align 8, !dbg !2609
  %667 = getelementptr inbounds i8*, i8** %666, i64 2, !dbg !2609
  %668 = load i8*, i8** %667, align 8, !dbg !2609
  %669 = load i8**, i8*** %19, align 8, !dbg !2610
  %670 = getelementptr inbounds i8*, i8** %669, i64 3, !dbg !2610
  %671 = load i8*, i8** %670, align 8, !dbg !2610
  %672 = load i8**, i8*** %19, align 8, !dbg !2611
  %673 = getelementptr inbounds i8*, i8** %672, i64 4, !dbg !2611
  %674 = load i8*, i8** %673, align 8, !dbg !2611
  %675 = load i8**, i8*** %19, align 8, !dbg !2612
  %676 = getelementptr inbounds i8*, i8** %675, i64 5, !dbg !2612
  %677 = load i8*, i8** %676, align 8, !dbg !2612
  %678 = load i8**, i8*** %19, align 8, !dbg !2613
  %679 = getelementptr inbounds i8*, i8** %678, i64 6, !dbg !2613
  %680 = load i8*, i8** %679, align 8, !dbg !2613
  %681 = load i8**, i8*** %19, align 8, !dbg !2614
  %682 = getelementptr inbounds i8*, i8** %681, i64 7, !dbg !2614
  %683 = load i8*, i8** %682, align 8, !dbg !2614
  %684 = load i8**, i8*** %19, align 8, !dbg !2615
  %685 = getelementptr inbounds i8*, i8** %684, i64 8, !dbg !2615
  %686 = load i8*, i8** %685, align 8, !dbg !2615
  %687 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %658, i8* %659, i8* %662, i8* %665, i8* %668, i8* %671, i8* %674, i8* %677, i8* %680, i8* %683, i8* %686), !dbg !2616
  br label %originalBB50

originalBB54alteredBB:                            ; preds = %originalBB54, %434
  %688 = load %struct._IO_FILE*, %struct._IO_FILE** %15, align 8, !dbg !2618
  %689 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.15.90, i64 0, i64 0)) #10, !dbg !2619
  %690 = load i8**, i8*** %19, align 8, !dbg !2620
  %691 = getelementptr inbounds i8*, i8** %690, i64 0, !dbg !2620
  %692 = load i8*, i8** %691, align 8, !dbg !2620
  %693 = load i8**, i8*** %19, align 8, !dbg !2621
  %694 = getelementptr inbounds i8*, i8** %693, i64 1, !dbg !2621
  %695 = load i8*, i8** %694, align 8, !dbg !2621
  %696 = load i8**, i8*** %19, align 8, !dbg !2622
  %697 = getelementptr inbounds i8*, i8** %696, i64 2, !dbg !2622
  %698 = load i8*, i8** %697, align 8, !dbg !2622
  %699 = load i8**, i8*** %19, align 8, !dbg !2623
  %700 = getelementptr inbounds i8*, i8** %699, i64 3, !dbg !2623
  %701 = load i8*, i8** %700, align 8, !dbg !2623
  %702 = load i8**, i8*** %19, align 8, !dbg !2624
  %703 = getelementptr inbounds i8*, i8** %702, i64 4, !dbg !2624
  %704 = load i8*, i8** %703, align 8, !dbg !2624
  %705 = load i8**, i8*** %19, align 8, !dbg !2625
  %706 = getelementptr inbounds i8*, i8** %705, i64 5, !dbg !2625
  %707 = load i8*, i8** %706, align 8, !dbg !2625
  %708 = load i8**, i8*** %19, align 8, !dbg !2626
  %709 = getelementptr inbounds i8*, i8** %708, i64 6, !dbg !2626
  %710 = load i8*, i8** %709, align 8, !dbg !2626
  %711 = load i8**, i8*** %19, align 8, !dbg !2627
  %712 = getelementptr inbounds i8*, i8** %711, i64 7, !dbg !2627
  %713 = load i8*, i8** %712, align 8, !dbg !2627
  %714 = load i8**, i8*** %19, align 8, !dbg !2628
  %715 = getelementptr inbounds i8*, i8** %714, i64 8, !dbg !2628
  %716 = load i8*, i8** %715, align 8, !dbg !2628
  %717 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %688, i8* %689, i8* %692, i8* %695, i8* %698, i8* %701, i8* %704, i8* %707, i8* %710, i8* %713, i8* %716), !dbg !2629
  br label %originalBB54

originalBB58alteredBB:                            ; preds = %originalBB58, %481
  br label %originalBB58
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc_va(%struct._IO_FILE*, i8*, i8*, i8*, %struct.__va_list_tag*) #4 !dbg !2676 {
  %6 = load i32, i32* @x.35
  %7 = load i32, i32* @y.36
  %8 = sub i32 %6, 1
  %9 = mul i32 %6, %8
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  %12 = icmp slt i32 %7, 10
  %13 = or i1 %11, %12
  br i1 %13, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %5, %originalBBalteredBB
  %14 = alloca %struct._IO_FILE*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca %struct.__va_list_tag*, align 8
  %19 = alloca i64, align 8
  %20 = alloca [10 x i8*], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %14, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %14, metadata !2686, metadata !DIExpression()), !dbg !2687
  store i8* %1, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !2688, metadata !DIExpression()), !dbg !2689
  store i8* %2, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !2690, metadata !DIExpression()), !dbg !2691
  store i8* %3, i8** %17, align 8
  call void @llvm.dbg.declare(metadata i8** %17, metadata !2692, metadata !DIExpression()), !dbg !2693
  store %struct.__va_list_tag* %4, %struct.__va_list_tag** %18, align 8
  call void @llvm.dbg.declare(metadata %struct.__va_list_tag** %18, metadata !2694, metadata !DIExpression()), !dbg !2695
  call void @llvm.dbg.declare(metadata i64* %19, metadata !2696, metadata !DIExpression()), !dbg !2697
  call void @llvm.dbg.declare(metadata [10 x i8*]* %20, metadata !2698, metadata !DIExpression()), !dbg !2700
  store i64 0, i64* %19, align 8, !dbg !2701
  %21 = load i32, i32* @x.35
  %22 = load i32, i32* @y.36
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %29, !dbg !2703

29:                                               ; preds = %originalBBpart245, %originalBBpart2
  %30 = load i32, i32* @x.35
  %31 = load i32, i32* @y.36
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %29, %originalBB1alteredBB
  %38 = load i64, i64* %19, align 8, !dbg !2704
  %39 = icmp ult i64 %38, 10, !dbg !2706
  %40 = load i32, i32* @x.35
  %41 = load i32, i32* @y.36
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %39, label %48, label %134, !dbg !2707

48:                                               ; preds = %originalBBpart24
  %49 = load i32, i32* @x.35
  %50 = load i32, i32* @y.36
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load %struct.__va_list_tag*, %struct.__va_list_tag** %18, align 8, !dbg !2708
  %58 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 0, !dbg !2708
  %59 = load i32, i32* %58, align 8, !dbg !2708
  %60 = icmp ule i32 %59, 40, !dbg !2708
  %61 = load i32, i32* @x.35
  %62 = load i32, i32* @y.36
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %60, label %69, label %91, !dbg !2708

69:                                               ; preds = %originalBBpart28
  %70 = load i32, i32* @x.35
  %71 = load i32, i32* @y.36
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %69, %originalBB10alteredBB
  %78 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 3, !dbg !2708
  %79 = load i8*, i8** %78, align 8, !dbg !2708
  %80 = getelementptr i8, i8* %79, i32 %59, !dbg !2708
  %81 = bitcast i8* %80 to i8**, !dbg !2708
  %82 = add i32 %59, 8, !dbg !2708
  store i32 %82, i32* %58, align 8, !dbg !2708
  %83 = load i32, i32* @x.35
  %84 = load i32, i32* @y.36
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBBpart221, label %originalBB10alteredBB

originalBBpart221:                                ; preds = %originalBB10
  br label %112, !dbg !2708

91:                                               ; preds = %originalBBpart28
  %92 = load i32, i32* @x.35
  %93 = load i32, i32* @y.36
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBB23, label %originalBB23alteredBB

originalBB23:                                     ; preds = %91, %originalBB23alteredBB
  %100 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 2, !dbg !2708
  %101 = load i8*, i8** %100, align 8, !dbg !2708
  %102 = bitcast i8* %101 to i8**, !dbg !2708
  %103 = getelementptr i8, i8* %101, i32 8, !dbg !2708
  store i8* %103, i8** %100, align 8, !dbg !2708
  %104 = load i32, i32* @x.35
  %105 = load i32, i32* @y.36
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBBpart225, label %originalBB23alteredBB

originalBBpart225:                                ; preds = %originalBB23
  br label %112, !dbg !2708

112:                                              ; preds = %originalBBpart225, %originalBBpart221
  %113 = phi i8** [ %81, %originalBBpart221 ], [ %102, %originalBBpart225 ], !dbg !2708
  %114 = load i32, i32* @x.35
  %115 = load i32, i32* @y.36
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBB27, label %originalBB27alteredBB

originalBB27:                                     ; preds = %112, %originalBB27alteredBB
  %122 = load i8*, i8** %113, align 8, !dbg !2708
  %123 = load i64, i64* %19, align 8, !dbg !2709
  %124 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 %123, !dbg !2710
  store i8* %122, i8** %124, align 8, !dbg !2711
  %125 = icmp ne i8* %122, null, !dbg !2712
  %126 = load i32, i32* @x.35
  %127 = load i32, i32* @y.36
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBBpart229, label %originalBB27alteredBB

originalBBpart229:                                ; preds = %originalBB27
  br label %134

134:                                              ; preds = %originalBBpart229, %originalBBpart24
  %135 = phi i1 [ false, %originalBBpart24 ], [ %125, %originalBBpart229 ], !dbg !2713
  %136 = load i32, i32* @x.35
  %137 = load i32, i32* @y.36
  %138 = sub i32 %136, 1
  %139 = mul i32 %136, %138
  %140 = urem i32 %139, 2
  %141 = icmp eq i32 %140, 0
  %142 = icmp slt i32 %137, 10
  %143 = or i1 %141, %142
  br i1 %143, label %originalBB31, label %originalBB31alteredBB

originalBB31:                                     ; preds = %134, %originalBB31alteredBB
  %144 = load i32, i32* @x.35
  %145 = load i32, i32* @y.36
  %146 = sub i32 %144, 1
  %147 = mul i32 %144, %146
  %148 = urem i32 %147, 2
  %149 = icmp eq i32 %148, 0
  %150 = icmp slt i32 %145, 10
  %151 = or i1 %149, %150
  br i1 %151, label %originalBBpart233, label %originalBB31alteredBB

originalBBpart233:                                ; preds = %originalBB31
  br i1 %135, label %152, label %188, !dbg !2714

152:                                              ; preds = %originalBBpart233
  %153 = load i32, i32* @x.35
  %154 = load i32, i32* @y.36
  %155 = sub i32 %153, 1
  %156 = mul i32 %153, %155
  %157 = urem i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = icmp slt i32 %154, 10
  %160 = or i1 %158, %159
  br i1 %160, label %originalBB35, label %originalBB35alteredBB

originalBB35:                                     ; preds = %152, %originalBB35alteredBB
  %161 = load i32, i32* @x.35
  %162 = load i32, i32* @y.36
  %163 = sub i32 %161, 1
  %164 = mul i32 %161, %163
  %165 = urem i32 %164, 2
  %166 = icmp eq i32 %165, 0
  %167 = icmp slt i32 %162, 10
  %168 = or i1 %166, %167
  br i1 %168, label %originalBBpart237, label %originalBB35alteredBB

originalBBpart237:                                ; preds = %originalBB35
  br label %169, !dbg !2714

169:                                              ; preds = %originalBBpart237
  %170 = load i32, i32* @x.35
  %171 = load i32, i32* @y.36
  %172 = sub i32 %170, 1
  %173 = mul i32 %170, %172
  %174 = urem i32 %173, 2
  %175 = icmp eq i32 %174, 0
  %176 = icmp slt i32 %171, 10
  %177 = or i1 %175, %176
  br i1 %177, label %originalBB39, label %originalBB39alteredBB

originalBB39:                                     ; preds = %169, %originalBB39alteredBB
  %178 = load i64, i64* %19, align 8, !dbg !2715
  %179 = add i64 %178, 1, !dbg !2715
  store i64 %179, i64* %19, align 8, !dbg !2715
  %180 = load i32, i32* @x.35
  %181 = load i32, i32* @y.36
  %182 = sub i32 %180, 1
  %183 = mul i32 %180, %182
  %184 = urem i32 %183, 2
  %185 = icmp eq i32 %184, 0
  %186 = icmp slt i32 %181, 10
  %187 = or i1 %185, %186
  br i1 %187, label %originalBBpart245, label %originalBB39alteredBB

originalBBpart245:                                ; preds = %originalBB39
  br label %29, !dbg !2716, !llvm.loop !2717

188:                                              ; preds = %originalBBpart233
  %189 = load i32, i32* @x.35
  %190 = load i32, i32* @y.36
  %191 = sub i32 %189, 1
  %192 = mul i32 %189, %191
  %193 = urem i32 %192, 2
  %194 = icmp eq i32 %193, 0
  %195 = icmp slt i32 %190, 10
  %196 = or i1 %194, %195
  br i1 %196, label %originalBB47, label %originalBB47alteredBB

originalBB47:                                     ; preds = %188, %originalBB47alteredBB
  %197 = load %struct._IO_FILE*, %struct._IO_FILE** %14, align 8, !dbg !2719
  %198 = load i8*, i8** %15, align 8, !dbg !2720
  %199 = load i8*, i8** %16, align 8, !dbg !2721
  %200 = load i8*, i8** %17, align 8, !dbg !2722
  %201 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 0, !dbg !2723
  %202 = load i64, i64* %19, align 8, !dbg !2724
  call void @version_etc_arn(%struct._IO_FILE* %197, i8* %198, i8* %199, i8* %200, i8** %201, i64 %202), !dbg !2725
  %203 = load i32, i32* @x.35
  %204 = load i32, i32* @y.36
  %205 = sub i32 %203, 1
  %206 = mul i32 %203, %205
  %207 = urem i32 %206, 2
  %208 = icmp eq i32 %207, 0
  %209 = icmp slt i32 %204, 10
  %210 = or i1 %208, %209
  br i1 %210, label %originalBBpart249, label %originalBB47alteredBB

originalBBpart249:                                ; preds = %originalBB47
  ret void, !dbg !2726

originalBBalteredBB:                              ; preds = %originalBB, %5
  %211 = alloca %struct._IO_FILE*, align 8
  %212 = alloca i8*, align 8
  %213 = alloca i8*, align 8
  %214 = alloca i8*, align 8
  %215 = alloca %struct.__va_list_tag*, align 8
  %216 = alloca i64, align 8
  %217 = alloca [10 x i8*], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %211, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %211, metadata !2727, metadata !DIExpression()), !dbg !2687
  store i8* %1, i8** %212, align 8
  call void @llvm.dbg.declare(metadata i8** %212, metadata !2773, metadata !DIExpression()), !dbg !2689
  store i8* %2, i8** %213, align 8
  call void @llvm.dbg.declare(metadata i8** %213, metadata !2774, metadata !DIExpression()), !dbg !2691
  store i8* %3, i8** %214, align 8
  call void @llvm.dbg.declare(metadata i8** %214, metadata !2775, metadata !DIExpression()), !dbg !2693
  store %struct.__va_list_tag* %4, %struct.__va_list_tag** %215, align 8
  call void @llvm.dbg.declare(metadata %struct.__va_list_tag** %215, metadata !2776, metadata !DIExpression()), !dbg !2695
  call void @llvm.dbg.declare(metadata i64* %216, metadata !2777, metadata !DIExpression()), !dbg !2697
  call void @llvm.dbg.declare(metadata [10 x i8*]* %217, metadata !2778, metadata !DIExpression()), !dbg !2700
  store i64 0, i64* %216, align 8, !dbg !2701
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %29
  %218 = load i64, i64* %19, align 8, !dbg !2704
  %219 = icmp ult i64 %218, 10, !dbg !2706
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  %220 = load %struct.__va_list_tag*, %struct.__va_list_tag** %18, align 8, !dbg !2708
  %221 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %220, i32 0, i32 0, !dbg !2708
  %222 = load i32, i32* %221, align 8, !dbg !2708
  %223 = icmp ule i32 %222, 40, !dbg !2708
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %69
  %224 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 3, !dbg !2708
  %225 = load i8*, i8** %224, align 8, !dbg !2708
  %226 = getelementptr i8, i8* %225, i32 %59, !dbg !2708
  %227 = bitcast i8* %226 to i8**, !dbg !2708
  %_ = sub i32 0, %59
  %gen = add i32 %_, 8
  %_11 = sub i32 %59, 8
  %gen12 = mul i32 %_11, 8
  %_13 = sub i32 %59, 8
  %gen14 = mul i32 %_13, 8
  %_15 = shl i32 %59, 8
  %_16 = sub i32 %59, 8
  %gen17 = mul i32 %_16, 8
  %_18 = shl i32 %59, 8
  %_19 = shl i32 %59, 8
  %228 = add i32 %59, 8, !dbg !2708
  store i32 %228, i32* %58, align 8, !dbg !2708
  br label %originalBB10

originalBB23alteredBB:                            ; preds = %originalBB23, %91
  %229 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 2, !dbg !2708
  %230 = load i8*, i8** %229, align 8, !dbg !2708
  %231 = bitcast i8* %230 to i8**, !dbg !2708
  %232 = getelementptr i8, i8* %230, i32 8, !dbg !2708
  store i8* %232, i8** %229, align 8, !dbg !2708
  br label %originalBB23

originalBB27alteredBB:                            ; preds = %originalBB27, %112
  %233 = load i8*, i8** %113, align 8, !dbg !2708
  %234 = load i64, i64* %19, align 8, !dbg !2709
  %235 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 %234, !dbg !2710
  store i8* %233, i8** %235, align 8, !dbg !2711
  %236 = icmp ne i8* %233, null, !dbg !2712
  br label %originalBB27

originalBB31alteredBB:                            ; preds = %originalBB31, %134
  br label %originalBB31

originalBB35alteredBB:                            ; preds = %originalBB35, %152
  br label %originalBB35

originalBB39alteredBB:                            ; preds = %originalBB39, %169
  %237 = load i64, i64* %19, align 8, !dbg !2715
  %_40 = sub i64 %237, 1
  %gen41 = mul i64 %_40, 1
  %_42 = sub i64 0, %237
  %gen43 = add i64 %_42, 1
  %238 = add i64 %237, 1, !dbg !2715
  store i64 %238, i64* %19, align 8, !dbg !2715
  br label %originalBB39

originalBB47alteredBB:                            ; preds = %originalBB47, %188
  %239 = load %struct._IO_FILE*, %struct._IO_FILE** %14, align 8, !dbg !2719
  %240 = load i8*, i8** %15, align 8, !dbg !2720
  %241 = load i8*, i8** %16, align 8, !dbg !2721
  %242 = load i8*, i8** %17, align 8, !dbg !2722
  %243 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 0, !dbg !2723
  %244 = load i64, i64* %19, align 8, !dbg !2724
  call void @version_etc_arn(%struct._IO_FILE* %239, i8* %240, i8* %241, i8* %242, i8** %243, i64 %244), !dbg !2725
  br label %originalBB47
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc(%struct._IO_FILE*, i8*, i8*, i8*, ...) #4 !dbg !2779 {
  %5 = load i32, i32* @x.37
  %6 = load i32, i32* @y.38
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %4, %originalBBalteredBB
  %13 = alloca %struct._IO_FILE*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca [1 x %struct.__va_list_tag], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %13, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %13, metadata !2782, metadata !DIExpression()), !dbg !2783
  store i8* %1, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !2784, metadata !DIExpression()), !dbg !2785
  store i8* %2, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !2786, metadata !DIExpression()), !dbg !2787
  store i8* %3, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !2788, metadata !DIExpression()), !dbg !2789
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %17, metadata !2790, metadata !DIExpression()), !dbg !2797
  %18 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %17, i64 0, i64 0, !dbg !2798
  %19 = bitcast %struct.__va_list_tag* %18 to i8*, !dbg !2798
  call void @llvm.va_start(i8* %19), !dbg !2798
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !2799
  %21 = load i8*, i8** %14, align 8, !dbg !2800
  %22 = load i8*, i8** %15, align 8, !dbg !2801
  %23 = load i8*, i8** %16, align 8, !dbg !2802
  %24 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %17, i64 0, i64 0, !dbg !2803
  call void @version_etc_va(%struct._IO_FILE* %20, i8* %21, i8* %22, i8* %23, %struct.__va_list_tag* %24), !dbg !2804
  %25 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %17, i64 0, i64 0, !dbg !2805
  %26 = bitcast %struct.__va_list_tag* %25 to i8*, !dbg !2805
  call void @llvm.va_end(i8* %26), !dbg !2805
  %27 = load i32, i32* @x.37
  %28 = load i32, i32* @y.38
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret void, !dbg !2806

originalBBalteredBB:                              ; preds = %originalBB, %4
  %35 = alloca %struct._IO_FILE*, align 8
  %36 = alloca i8*, align 8
  %37 = alloca i8*, align 8
  %38 = alloca i8*, align 8
  %39 = alloca [1 x %struct.__va_list_tag], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %35, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %35, metadata !2807, metadata !DIExpression()), !dbg !2783
  store i8* %1, i8** %36, align 8
  call void @llvm.dbg.declare(metadata i8** %36, metadata !2846, metadata !DIExpression()), !dbg !2785
  store i8* %2, i8** %37, align 8
  call void @llvm.dbg.declare(metadata i8** %37, metadata !2847, metadata !DIExpression()), !dbg !2787
  store i8* %3, i8** %38, align 8
  call void @llvm.dbg.declare(metadata i8** %38, metadata !2848, metadata !DIExpression()), !dbg !2789
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %39, metadata !2849, metadata !DIExpression()), !dbg !2797
  %40 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %39, i64 0, i64 0, !dbg !2798
  %41 = bitcast %struct.__va_list_tag* %40 to i8*, !dbg !2798
  call void @llvm.va_start(i8* %41), !dbg !2798
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** %35, align 8, !dbg !2799
  %43 = load i8*, i8** %36, align 8, !dbg !2800
  %44 = load i8*, i8** %37, align 8, !dbg !2801
  %45 = load i8*, i8** %38, align 8, !dbg !2802
  %46 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %39, i64 0, i64 0, !dbg !2803
  call void @version_etc_va(%struct._IO_FILE* %42, i8* %43, i8* %44, i8* %45, %struct.__va_list_tag* %46), !dbg !2804
  %47 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %39, i64 0, i64 0, !dbg !2805
  %48 = bitcast %struct.__va_list_tag* %47 to i8*, !dbg !2805
  call void @llvm.va_end(i8* %48), !dbg !2805
  br label %originalBB
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #10

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #10

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xmalloc(i64) #4 !dbg !2860 {
  %2 = load i32, i32* @x.39
  %3 = load i32, i32* @y.40
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i64, align 8
  %11 = alloca i8*, align 8
  store i64 %0, i64* %10, align 8
  call void @llvm.dbg.declare(metadata i64* %10, metadata !2864, metadata !DIExpression()), !dbg !2865
  call void @llvm.dbg.declare(metadata i8** %11, metadata !2866, metadata !DIExpression()), !dbg !2867
  %12 = load i64, i64* %10, align 8, !dbg !2868
  %13 = call noalias i8* @malloc(i64 %12) #10, !dbg !2869
  store i8* %13, i8** %11, align 8, !dbg !2867
  %14 = load i8*, i8** %11, align 8, !dbg !2870
  %15 = icmp ne i8* %14, null, !dbg !2870
  %16 = load i32, i32* @x.39
  %17 = load i32, i32* @y.40
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %60, label %24, !dbg !2872

24:                                               ; preds = %originalBBpart2
  %25 = load i32, i32* @x.39
  %26 = load i32, i32* @y.40
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %24, %originalBB1alteredBB
  %33 = load i64, i64* %10, align 8, !dbg !2873
  %34 = icmp ne i64 %33, 0, !dbg !2874
  %35 = load i32, i32* @x.39
  %36 = load i32, i32* @y.40
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %34, label %43, label %60, !dbg !2875

43:                                               ; preds = %originalBBpart24
  %44 = load i32, i32* @x.39
  %45 = load i32, i32* @y.40
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %43, %originalBB6alteredBB
  call void @xalloc_die() #15, !dbg !2876
  %52 = load i32, i32* @x.39
  %53 = load i32, i32* @y.40
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  unreachable, !dbg !2876

60:                                               ; preds = %originalBBpart24, %originalBBpart2
  %61 = load i32, i32* @x.39
  %62 = load i32, i32* @y.40
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %60, %originalBB10alteredBB
  %69 = load i8*, i8** %11, align 8, !dbg !2877
  %70 = load i32, i32* @x.39
  %71 = load i32, i32* @y.40
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  ret i8* %69, !dbg !2878

originalBBalteredBB:                              ; preds = %originalBB, %1
  %78 = alloca i64, align 8
  %79 = alloca i8*, align 8
  store i64 %0, i64* %78, align 8
  call void @llvm.dbg.declare(metadata i64* %78, metadata !2879, metadata !DIExpression()), !dbg !2865
  call void @llvm.dbg.declare(metadata i8** %79, metadata !2882, metadata !DIExpression()), !dbg !2867
  %80 = load i64, i64* %78, align 8, !dbg !2868
  %81 = call noalias i8* @malloc(i64 %80) #10, !dbg !2869
  store i8* %81, i8** %79, align 8, !dbg !2867
  %82 = load i8*, i8** %79, align 8, !dbg !2870
  %83 = icmp ne i8* %82, null, !dbg !2870
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %24
  %84 = load i64, i64* %10, align 8, !dbg !2873
  %85 = icmp ne i64 %84, 0, !dbg !2874
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %43
  call void @xalloc_die() #15, !dbg !2876
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %60
  %86 = load i8*, i8** %11, align 8, !dbg !2877
  br label %originalBB10
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @xrealloc(i8*, i64) #4 !dbg !2883 {
  %3 = load i32, i32* @x.41
  %4 = load i32, i32* @y.42
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !2886, metadata !DIExpression()), !dbg !2887
  store i64 %1, i64* %13, align 8
  call void @llvm.dbg.declare(metadata i64* %13, metadata !2888, metadata !DIExpression()), !dbg !2889
  %14 = load i64, i64* %13, align 8, !dbg !2890
  %15 = icmp ne i64 %14, 0, !dbg !2890
  %16 = load i32, i32* @x.41
  %17 = load i32, i32* @y.42
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %61, label %24, !dbg !2892

24:                                               ; preds = %originalBBpart2
  %25 = load i32, i32* @x.41
  %26 = load i32, i32* @y.42
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %24, %originalBB1alteredBB
  %33 = load i8*, i8** %12, align 8, !dbg !2893
  %34 = icmp ne i8* %33, null, !dbg !2893
  %35 = load i32, i32* @x.41
  %36 = load i32, i32* @y.42
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %34, label %43, label %61, !dbg !2894

43:                                               ; preds = %originalBBpart24
  %44 = load i32, i32* @x.41
  %45 = load i32, i32* @y.42
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %43, %originalBB6alteredBB
  %52 = load i8*, i8** %12, align 8, !dbg !2895
  call void @free(i8* %52) #10, !dbg !2897
  store i8* null, i8** %11, align 8, !dbg !2898
  %53 = load i32, i32* @x.41
  %54 = load i32, i32* @y.42
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %137, !dbg !2898

61:                                               ; preds = %originalBBpart24, %originalBBpart2
  %62 = load i32, i32* @x.41
  %63 = load i32, i32* @y.42
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %61, %originalBB10alteredBB
  %70 = load i8*, i8** %12, align 8, !dbg !2899
  %71 = load i64, i64* %13, align 8, !dbg !2900
  %72 = call i8* @realloc(i8* %70, i64 %71) #10, !dbg !2901
  store i8* %72, i8** %12, align 8, !dbg !2902
  %73 = load i8*, i8** %12, align 8, !dbg !2903
  %74 = icmp ne i8* %73, null, !dbg !2903
  %75 = load i32, i32* @x.41
  %76 = load i32, i32* @y.42
  %77 = sub i32 %75, 1
  %78 = mul i32 %75, %77
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %80, %81
  br i1 %82, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %74, label %119, label %83, !dbg !2905

83:                                               ; preds = %originalBBpart212
  %84 = load i32, i32* @x.41
  %85 = load i32, i32* @y.42
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %83, %originalBB14alteredBB
  %92 = load i64, i64* %13, align 8, !dbg !2906
  %93 = icmp ne i64 %92, 0, !dbg !2906
  %94 = load i32, i32* @x.41
  %95 = load i32, i32* @y.42
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %93, label %102, label %119, !dbg !2907

102:                                              ; preds = %originalBBpart216
  %103 = load i32, i32* @x.41
  %104 = load i32, i32* @y.42
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %102, %originalBB18alteredBB
  call void @xalloc_die() #15, !dbg !2908
  %111 = load i32, i32* @x.41
  %112 = load i32, i32* @y.42
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  unreachable, !dbg !2908

119:                                              ; preds = %originalBBpart216, %originalBBpart212
  %120 = load i32, i32* @x.41
  %121 = load i32, i32* @y.42
  %122 = sub i32 %120, 1
  %123 = mul i32 %120, %122
  %124 = urem i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %125, %126
  br i1 %127, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %119, %originalBB22alteredBB
  %128 = load i8*, i8** %12, align 8, !dbg !2909
  store i8* %128, i8** %11, align 8, !dbg !2910
  %129 = load i32, i32* @x.41
  %130 = load i32, i32* @y.42
  %131 = sub i32 %129, 1
  %132 = mul i32 %129, %131
  %133 = urem i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %130, 10
  %136 = or i1 %134, %135
  br i1 %136, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %137, !dbg !2910

137:                                              ; preds = %originalBBpart224, %originalBBpart28
  %138 = load i32, i32* @x.41
  %139 = load i32, i32* @y.42
  %140 = sub i32 %138, 1
  %141 = mul i32 %138, %140
  %142 = urem i32 %141, 2
  %143 = icmp eq i32 %142, 0
  %144 = icmp slt i32 %139, 10
  %145 = or i1 %143, %144
  br i1 %145, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %137, %originalBB26alteredBB
  %146 = load i8*, i8** %11, align 8, !dbg !2911
  %147 = load i32, i32* @x.41
  %148 = load i32, i32* @y.42
  %149 = sub i32 %147, 1
  %150 = mul i32 %147, %149
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %152, %153
  br i1 %154, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  ret i8* %146, !dbg !2911

originalBBalteredBB:                              ; preds = %originalBB, %2
  %155 = alloca i8*, align 8
  %156 = alloca i8*, align 8
  %157 = alloca i64, align 8
  store i8* %0, i8** %156, align 8
  call void @llvm.dbg.declare(metadata i8** %156, metadata !2912, metadata !DIExpression()), !dbg !2887
  store i64 %1, i64* %157, align 8
  call void @llvm.dbg.declare(metadata i64* %157, metadata !2915, metadata !DIExpression()), !dbg !2889
  %158 = load i64, i64* %157, align 8, !dbg !2890
  %159 = icmp ne i64 %158, 0, !dbg !2890
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %24
  %160 = load i8*, i8** %12, align 8, !dbg !2893
  %161 = icmp ne i8* %160, null, !dbg !2893
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %43
  %162 = load i8*, i8** %12, align 8, !dbg !2895
  call void @free(i8* %162) #10, !dbg !2897
  store i8* null, i8** %11, align 8, !dbg !2898
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %61
  %163 = load i8*, i8** %12, align 8, !dbg !2899
  %164 = load i64, i64* %13, align 8, !dbg !2900
  %165 = call i8* @realloc(i8* %163, i64 %164) #10, !dbg !2901
  store i8* %165, i8** %12, align 8, !dbg !2902
  %166 = load i8*, i8** %12, align 8, !dbg !2903
  %167 = icmp ne i8* %166, null, !dbg !2903
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %83
  %168 = load i64, i64* %13, align 8, !dbg !2906
  %169 = icmp ne i64 %168, 0, !dbg !2906
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %102
  call void @xalloc_die() #15, !dbg !2908
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %119
  %170 = load i8*, i8** %12, align 8, !dbg !2909
  store i8* %170, i8** %11, align 8, !dbg !2910
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %137
  %171 = load i8*, i8** %11, align 8, !dbg !2911
  br label %originalBB26
}

; Function Attrs: nounwind
declare dso_local i8* @realloc(i8*, i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xcharalloc(i64) #4 !dbg !2916 {
  %2 = load i32, i32* @x.43
  %3 = load i32, i32* @y.44
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i64, align 8
  store i64 %0, i64* %10, align 8
  call void @llvm.dbg.declare(metadata i64* %10, metadata !2920, metadata !DIExpression()), !dbg !2921
  %11 = load i64, i64* %10, align 8, !dbg !2922
  %12 = call noalias i8* @xmalloc(i64 %11), !dbg !2922
  %13 = load i32, i32* @x.43
  %14 = load i32, i32* @y.44
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %12, !dbg !2923

originalBBalteredBB:                              ; preds = %originalBB, %1
  %21 = alloca i64, align 8
  store i64 %0, i64* %21, align 8
  call void @llvm.dbg.declare(metadata i64* %21, metadata !2924, metadata !DIExpression()), !dbg !2921
  %22 = load i64, i64* %21, align 8, !dbg !2922
  %23 = call noalias i8* @xmalloc(i64 %22), !dbg !2922
  br label %originalBB
}

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @xalloc_die() #0 !dbg !2927 {
  %1 = load i32, i32* @x.45
  %2 = load i32, i32* @y.46
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = load volatile i32, i32* @exit_failure, align 4, !dbg !2929
  %10 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.101, i64 0, i64 0)) #10, !dbg !2930
  call void (i32, i32, i8*, ...) @error(i32 %9, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.102, i64 0, i64 0), i8* %10), !dbg !2931
  call void @abort() #12, !dbg !2932
  %11 = load i32, i32* @x.45
  %12 = load i32, i32* @y.46
  %13 = sub i32 %11, 1
  %14 = mul i32 %11, %13
  %15 = urem i32 %14, 2
  %16 = icmp eq i32 %15, 0
  %17 = icmp slt i32 %12, 10
  %18 = or i1 %16, %17
  br i1 %18, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  unreachable, !dbg !2932

originalBBalteredBB:                              ; preds = %originalBB, %0
  %19 = load volatile i32, i32* @exit_failure, align 4, !dbg !2929
  %20 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.101, i64 0, i64 0)) #10, !dbg !2930
  call void (i32, i32, i8*, ...) @error(i32 %19, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.102, i64 0, i64 0), i8* %20), !dbg !2931
  call void @abort() #12, !dbg !2932
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @rpl_mbrtowc(i32*, i8*, i64, %struct.__mbstate_t*) #4 !dbg !2933 {
  %5 = load i32, i32* @x.47
  %6 = load i32, i32* @y.48
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %4, %originalBBalteredBB
  %13 = alloca i64, align 8
  %14 = alloca i32*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i64, align 8
  %17 = alloca %struct.__mbstate_t*, align 8
  %18 = alloca i64, align 8
  %19 = alloca i32, align 4
  %20 = alloca i8, align 1
  store i32* %0, i32** %14, align 8
  call void @llvm.dbg.declare(metadata i32** %14, metadata !2949, metadata !DIExpression()), !dbg !2950
  store i8* %1, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !2951, metadata !DIExpression()), !dbg !2952
  store i64 %2, i64* %16, align 8
  call void @llvm.dbg.declare(metadata i64* %16, metadata !2953, metadata !DIExpression()), !dbg !2954
  store %struct.__mbstate_t* %3, %struct.__mbstate_t** %17, align 8
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t** %17, metadata !2955, metadata !DIExpression()), !dbg !2956
  call void @llvm.dbg.declare(metadata i64* %18, metadata !2957, metadata !DIExpression()), !dbg !2958
  call void @llvm.dbg.declare(metadata i32* %19, metadata !2959, metadata !DIExpression()), !dbg !2960
  %21 = load i32*, i32** %14, align 8, !dbg !2961
  %22 = icmp ne i32* %21, null, !dbg !2961
  %23 = load i32, i32* @x.47
  %24 = load i32, i32* @y.48
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %48, label %31, !dbg !2963

31:                                               ; preds = %originalBBpart2
  %32 = load i32, i32* @x.47
  %33 = load i32, i32* @y.48
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  store i32* %19, i32** %14, align 8, !dbg !2964
  %40 = load i32, i32* @x.47
  %41 = load i32, i32* @y.48
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %48, !dbg !2965

48:                                               ; preds = %originalBBpart24, %originalBBpart2
  %49 = load i32, i32* @x.47
  %50 = load i32, i32* @y.48
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load i32*, i32** %14, align 8, !dbg !2966
  %58 = load i8*, i8** %15, align 8, !dbg !2967
  %59 = load i64, i64* %16, align 8, !dbg !2968
  %60 = load %struct.__mbstate_t*, %struct.__mbstate_t** %17, align 8, !dbg !2969
  %61 = call i64 @mbrtowc(i32* %57, i8* %58, i64 %59, %struct.__mbstate_t* %60) #10, !dbg !2970
  store i64 %61, i64* %18, align 8, !dbg !2971
  %62 = load i64, i64* %18, align 8, !dbg !2972
  %63 = icmp ule i64 -2, %62, !dbg !2974
  %64 = load i32, i32* @x.47
  %65 = load i32, i32* @y.48
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %63, label %72, label %131, !dbg !2975

72:                                               ; preds = %originalBBpart28
  %73 = load i32, i32* @x.47
  %74 = load i32, i32* @y.48
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %72, %originalBB10alteredBB
  %81 = load i64, i64* %16, align 8, !dbg !2976
  %82 = icmp ne i64 %81, 0, !dbg !2977
  %83 = load i32, i32* @x.47
  %84 = load i32, i32* @y.48
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %82, label %91, label %131, !dbg !2978

91:                                               ; preds = %originalBBpart212
  %92 = load i32, i32* @x.47
  %93 = load i32, i32* @y.48
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %91, %originalBB14alteredBB
  %100 = call zeroext i1 @hard_locale(i32 0), !dbg !2979
  %101 = load i32, i32* @x.47
  %102 = load i32, i32* @y.48
  %103 = sub i32 %101, 1
  %104 = mul i32 %101, %103
  %105 = urem i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %102, 10
  %108 = or i1 %106, %107
  br i1 %108, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %100, label %131, label %109, !dbg !2980

109:                                              ; preds = %originalBBpart216
  call void @llvm.dbg.declare(metadata i8* %20, metadata !2981, metadata !DIExpression()), !dbg !2983
  %110 = load i32, i32* @x.47
  %111 = load i32, i32* @y.48
  %112 = sub i32 %110, 1
  %113 = mul i32 %110, %112
  %114 = urem i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %115, %116
  br i1 %117, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %109, %originalBB18alteredBB
  %118 = load i8*, i8** %15, align 8, !dbg !2984
  %119 = load i8, i8* %118, align 1, !dbg !2985
  store i8 %119, i8* %20, align 1, !dbg !2983
  %120 = load i8, i8* %20, align 1, !dbg !2986
  %121 = zext i8 %120 to i32, !dbg !2986
  %122 = load i32*, i32** %14, align 8, !dbg !2987
  store i32 %121, i32* %122, align 4, !dbg !2988
  store i64 1, i64* %13, align 8, !dbg !2989
  %123 = load i32, i32* @x.47
  %124 = load i32, i32* @y.48
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %149, !dbg !2989

131:                                              ; preds = %originalBBpart216, %originalBBpart212, %originalBBpart28
  %132 = load i32, i32* @x.47
  %133 = load i32, i32* @y.48
  %134 = sub i32 %132, 1
  %135 = mul i32 %132, %134
  %136 = urem i32 %135, 2
  %137 = icmp eq i32 %136, 0
  %138 = icmp slt i32 %133, 10
  %139 = or i1 %137, %138
  br i1 %139, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %131, %originalBB22alteredBB
  %140 = load i64, i64* %18, align 8, !dbg !2990
  store i64 %140, i64* %13, align 8, !dbg !2991
  %141 = load i32, i32* @x.47
  %142 = load i32, i32* @y.48
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %149, !dbg !2991

149:                                              ; preds = %originalBBpart224, %originalBBpart220
  %150 = load i32, i32* @x.47
  %151 = load i32, i32* @y.48
  %152 = sub i32 %150, 1
  %153 = mul i32 %150, %152
  %154 = urem i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %155, %156
  br i1 %157, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %149, %originalBB26alteredBB
  %158 = load i64, i64* %13, align 8, !dbg !2992
  %159 = load i32, i32* @x.47
  %160 = load i32, i32* @y.48
  %161 = sub i32 %159, 1
  %162 = mul i32 %159, %161
  %163 = urem i32 %162, 2
  %164 = icmp eq i32 %163, 0
  %165 = icmp slt i32 %160, 10
  %166 = or i1 %164, %165
  br i1 %166, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  ret i64 %158, !dbg !2992

originalBBalteredBB:                              ; preds = %originalBB, %4
  %167 = alloca i64, align 8
  %168 = alloca i32*, align 8
  %169 = alloca i8*, align 8
  %170 = alloca i64, align 8
  %171 = alloca %struct.__mbstate_t*, align 8
  %172 = alloca i64, align 8
  %173 = alloca i32, align 4
  %174 = alloca i8, align 1
  store i32* %0, i32** %168, align 8
  call void @llvm.dbg.declare(metadata i32** %168, metadata !2993, metadata !DIExpression()), !dbg !2950
  store i8* %1, i8** %169, align 8
  call void @llvm.dbg.declare(metadata i8** %169, metadata !3009, metadata !DIExpression()), !dbg !2952
  store i64 %2, i64* %170, align 8
  call void @llvm.dbg.declare(metadata i64* %170, metadata !3010, metadata !DIExpression()), !dbg !2954
  store %struct.__mbstate_t* %3, %struct.__mbstate_t** %171, align 8
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t** %171, metadata !3011, metadata !DIExpression()), !dbg !2956
  call void @llvm.dbg.declare(metadata i64* %172, metadata !3012, metadata !DIExpression()), !dbg !2958
  call void @llvm.dbg.declare(metadata i32* %173, metadata !3013, metadata !DIExpression()), !dbg !2960
  %175 = load i32*, i32** %168, align 8, !dbg !2961
  %176 = icmp ne i32* %175, null, !dbg !2961
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  store i32* %19, i32** %14, align 8, !dbg !2964
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  %177 = load i32*, i32** %14, align 8, !dbg !2966
  %178 = load i8*, i8** %15, align 8, !dbg !2967
  %179 = load i64, i64* %16, align 8, !dbg !2968
  %180 = load %struct.__mbstate_t*, %struct.__mbstate_t** %17, align 8, !dbg !2969
  %181 = call i64 @mbrtowc(i32* %177, i8* %178, i64 %179, %struct.__mbstate_t* %180) #10, !dbg !2970
  store i64 %181, i64* %18, align 8, !dbg !2971
  %182 = load i64, i64* %18, align 8, !dbg !2972
  %183 = icmp ule i64 -2, %182, !dbg !2974
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %72
  %184 = load i64, i64* %16, align 8, !dbg !2976
  %185 = icmp ne i64 %184, 0, !dbg !2977
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %91
  %186 = call zeroext i1 @hard_locale(i32 0), !dbg !2979
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %109
  %187 = load i8*, i8** %15, align 8, !dbg !2984
  %188 = load i8, i8* %187, align 1, !dbg !2985
  store i8 %188, i8* %20, align 1, !dbg !2983
  %189 = load i8, i8* %20, align 1, !dbg !2986
  %190 = zext i8 %189 to i32, !dbg !2986
  %191 = load i32*, i32** %14, align 8, !dbg !2987
  store i32 %190, i32* %191, align 4, !dbg !2988
  store i64 1, i64* %13, align 8, !dbg !2989
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %131
  %192 = load i64, i64* %18, align 8, !dbg !2990
  store i64 %192, i64* %13, align 8, !dbg !2991
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %149
  %193 = load i64, i64* %13, align 8, !dbg !2992
  br label %originalBB26
}

; Function Attrs: nounwind
declare dso_local i64 @mbrtowc(i32*, i8*, i64, %struct.__mbstate_t*) #2

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @c_strcasecmp(i8*, i8*) #11 !dbg !3014 {
  %3 = load i32, i32* @x.49
  %4 = load i32, i32* @y.50
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8, align 1
  %17 = alloca i8, align 1
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !3018, metadata !DIExpression()), !dbg !3019
  store i8* %1, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !3020, metadata !DIExpression()), !dbg !3021
  call void @llvm.dbg.declare(metadata i8** %14, metadata !3022, metadata !DIExpression()), !dbg !3023
  %18 = load i8*, i8** %12, align 8, !dbg !3024
  store i8* %18, i8** %14, align 8, !dbg !3023
  call void @llvm.dbg.declare(metadata i8** %15, metadata !3025, metadata !DIExpression()), !dbg !3026
  %19 = load i8*, i8** %13, align 8, !dbg !3027
  store i8* %19, i8** %15, align 8, !dbg !3026
  call void @llvm.dbg.declare(metadata i8* %16, metadata !3028, metadata !DIExpression()), !dbg !3029
  call void @llvm.dbg.declare(metadata i8* %17, metadata !3030, metadata !DIExpression()), !dbg !3031
  %20 = load i8*, i8** %14, align 8, !dbg !3032
  %21 = load i8*, i8** %15, align 8, !dbg !3034
  %22 = icmp eq i8* %20, %21, !dbg !3035
  %23 = load i32, i32* @x.49
  %24 = load i32, i32* @y.50
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %31, label %48, !dbg !3036

31:                                               ; preds = %originalBBpart2
  %32 = load i32, i32* @x.49
  %33 = load i32, i32* @y.50
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  store i32 0, i32* %11, align 4, !dbg !3037
  %40 = load i32, i32* @x.49
  %41 = load i32, i32* @y.50
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %177, !dbg !3037

48:                                               ; preds = %originalBBpart2
  %49 = load i32, i32* @x.49
  %50 = load i32, i32* @y.50
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load i32, i32* @x.49
  %58 = load i32, i32* @y.50
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %65, !dbg !3038

65:                                               ; preds = %originalBBpart224, %originalBBpart28
  %66 = load i32, i32* @x.49
  %67 = load i32, i32* @y.50
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %65, %originalBB10alteredBB
  %74 = load i8*, i8** %14, align 8, !dbg !3039
  %75 = load i8, i8* %74, align 1, !dbg !3041
  %76 = zext i8 %75 to i32, !dbg !3041
  %77 = call i32 @c_tolower(i32 %76), !dbg !3042
  %78 = trunc i32 %77 to i8, !dbg !3042
  store i8 %78, i8* %16, align 1, !dbg !3043
  %79 = load i8*, i8** %15, align 8, !dbg !3044
  %80 = load i8, i8* %79, align 1, !dbg !3045
  %81 = zext i8 %80 to i32, !dbg !3045
  %82 = call i32 @c_tolower(i32 %81), !dbg !3046
  %83 = trunc i32 %82 to i8, !dbg !3046
  store i8 %83, i8* %17, align 1, !dbg !3047
  %84 = load i8, i8* %16, align 1, !dbg !3048
  %85 = zext i8 %84 to i32, !dbg !3048
  %86 = icmp eq i32 %85, 0, !dbg !3050
  %87 = load i32, i32* @x.49
  %88 = load i32, i32* @y.50
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %86, label %95, label %112, !dbg !3051

95:                                               ; preds = %originalBBpart212
  %96 = load i32, i32* @x.49
  %97 = load i32, i32* @y.50
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %95, %originalBB14alteredBB
  %104 = load i32, i32* @x.49
  %105 = load i32, i32* @y.50
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %155, !dbg !3052

112:                                              ; preds = %originalBBpart212
  %113 = load i32, i32* @x.49
  %114 = load i32, i32* @y.50
  %115 = sub i32 %113, 1
  %116 = mul i32 %113, %115
  %117 = urem i32 %116, 2
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %118, %119
  br i1 %120, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %112, %originalBB18alteredBB
  %121 = load i8*, i8** %14, align 8, !dbg !3053
  %122 = getelementptr inbounds i8, i8* %121, i32 1, !dbg !3053
  store i8* %122, i8** %14, align 8, !dbg !3053
  %123 = load i8*, i8** %15, align 8, !dbg !3054
  %124 = getelementptr inbounds i8, i8* %123, i32 1, !dbg !3054
  store i8* %124, i8** %15, align 8, !dbg !3054
  %125 = load i32, i32* @x.49
  %126 = load i32, i32* @y.50
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %133, !dbg !3055

133:                                              ; preds = %originalBBpart220
  %134 = load i32, i32* @x.49
  %135 = load i32, i32* @y.50
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %133, %originalBB22alteredBB
  %142 = load i8, i8* %16, align 1, !dbg !3056
  %143 = zext i8 %142 to i32, !dbg !3056
  %144 = load i8, i8* %17, align 1, !dbg !3057
  %145 = zext i8 %144 to i32, !dbg !3057
  %146 = icmp eq i32 %143, %145, !dbg !3058
  %147 = load i32, i32* @x.49
  %148 = load i32, i32* @y.50
  %149 = sub i32 %147, 1
  %150 = mul i32 %147, %149
  %151 = urem i32 %150, 2
  %152 = icmp eq i32 %151, 0
  %153 = icmp slt i32 %148, 10
  %154 = or i1 %152, %153
  br i1 %154, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %146, label %65, label %155, !dbg !3055, !llvm.loop !3059

155:                                              ; preds = %originalBBpart224, %originalBBpart216
  %156 = load i32, i32* @x.49
  %157 = load i32, i32* @y.50
  %158 = sub i32 %156, 1
  %159 = mul i32 %156, %158
  %160 = urem i32 %159, 2
  %161 = icmp eq i32 %160, 0
  %162 = icmp slt i32 %157, 10
  %163 = or i1 %161, %162
  br i1 %163, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %155, %originalBB26alteredBB
  %164 = load i8, i8* %16, align 1, !dbg !3061
  %165 = zext i8 %164 to i32, !dbg !3061
  %166 = load i8, i8* %17, align 1, !dbg !3063
  %167 = zext i8 %166 to i32, !dbg !3063
  %168 = sub nsw i32 %165, %167, !dbg !3064
  store i32 %168, i32* %11, align 4, !dbg !3065
  %169 = load i32, i32* @x.49
  %170 = load i32, i32* @y.50
  %171 = sub i32 %169, 1
  %172 = mul i32 %169, %171
  %173 = urem i32 %172, 2
  %174 = icmp eq i32 %173, 0
  %175 = icmp slt i32 %170, 10
  %176 = or i1 %174, %175
  br i1 %176, label %originalBBpart229, label %originalBB26alteredBB

originalBBpart229:                                ; preds = %originalBB26
  br label %177, !dbg !3065

177:                                              ; preds = %originalBBpart229, %originalBBpart24
  %178 = load i32, i32* @x.49
  %179 = load i32, i32* @y.50
  %180 = sub i32 %178, 1
  %181 = mul i32 %178, %180
  %182 = urem i32 %181, 2
  %183 = icmp eq i32 %182, 0
  %184 = icmp slt i32 %179, 10
  %185 = or i1 %183, %184
  br i1 %185, label %originalBB31, label %originalBB31alteredBB

originalBB31:                                     ; preds = %177, %originalBB31alteredBB
  %186 = load i32, i32* %11, align 4, !dbg !3066
  %187 = load i32, i32* @x.49
  %188 = load i32, i32* @y.50
  %189 = sub i32 %187, 1
  %190 = mul i32 %187, %189
  %191 = urem i32 %190, 2
  %192 = icmp eq i32 %191, 0
  %193 = icmp slt i32 %188, 10
  %194 = or i1 %192, %193
  br i1 %194, label %originalBBpart233, label %originalBB31alteredBB

originalBBpart233:                                ; preds = %originalBB31
  ret i32 %186, !dbg !3066

originalBBalteredBB:                              ; preds = %originalBB, %2
  %195 = alloca i32, align 4
  %196 = alloca i8*, align 8
  %197 = alloca i8*, align 8
  %198 = alloca i8*, align 8
  %199 = alloca i8*, align 8
  %200 = alloca i8, align 1
  %201 = alloca i8, align 1
  store i8* %0, i8** %196, align 8
  call void @llvm.dbg.declare(metadata i8** %196, metadata !3067, metadata !DIExpression()), !dbg !3019
  store i8* %1, i8** %197, align 8
  call void @llvm.dbg.declare(metadata i8** %197, metadata !3070, metadata !DIExpression()), !dbg !3021
  call void @llvm.dbg.declare(metadata i8** %198, metadata !3071, metadata !DIExpression()), !dbg !3023
  %202 = load i8*, i8** %196, align 8, !dbg !3024
  store i8* %202, i8** %198, align 8, !dbg !3023
  call void @llvm.dbg.declare(metadata i8** %199, metadata !3072, metadata !DIExpression()), !dbg !3026
  %203 = load i8*, i8** %197, align 8, !dbg !3027
  store i8* %203, i8** %199, align 8, !dbg !3026
  call void @llvm.dbg.declare(metadata i8* %200, metadata !3073, metadata !DIExpression()), !dbg !3029
  call void @llvm.dbg.declare(metadata i8* %201, metadata !3074, metadata !DIExpression()), !dbg !3031
  %204 = load i8*, i8** %198, align 8, !dbg !3032
  %205 = load i8*, i8** %199, align 8, !dbg !3034
  %206 = icmp eq i8* %204, %205, !dbg !3035
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  store i32 0, i32* %11, align 4, !dbg !3037
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %65
  %207 = load i8*, i8** %14, align 8, !dbg !3039
  %208 = load i8, i8* %207, align 1, !dbg !3041
  %209 = zext i8 %208 to i32, !dbg !3041
  %210 = call i32 @c_tolower(i32 %209), !dbg !3042
  %211 = trunc i32 %210 to i8, !dbg !3042
  store i8 %211, i8* %16, align 1, !dbg !3043
  %212 = load i8*, i8** %15, align 8, !dbg !3044
  %213 = load i8, i8* %212, align 1, !dbg !3045
  %214 = zext i8 %213 to i32, !dbg !3045
  %215 = call i32 @c_tolower(i32 %214), !dbg !3046
  %216 = trunc i32 %215 to i8, !dbg !3046
  store i8 %216, i8* %17, align 1, !dbg !3047
  %217 = load i8, i8* %16, align 1, !dbg !3048
  %218 = zext i8 %217 to i32, !dbg !3048
  %219 = icmp eq i32 %218, 0, !dbg !3050
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %95
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %112
  %220 = load i8*, i8** %14, align 8, !dbg !3053
  %221 = getelementptr inbounds i8, i8* %220, i32 1, !dbg !3053
  store i8* %221, i8** %14, align 8, !dbg !3053
  %222 = load i8*, i8** %15, align 8, !dbg !3054
  %223 = getelementptr inbounds i8, i8* %222, i32 1, !dbg !3054
  store i8* %223, i8** %15, align 8, !dbg !3054
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %133
  %224 = load i8, i8* %16, align 1, !dbg !3056
  %225 = zext i8 %224 to i32, !dbg !3056
  %226 = load i8, i8* %17, align 1, !dbg !3057
  %227 = zext i8 %226 to i32, !dbg !3057
  %228 = icmp eq i32 %225, %227, !dbg !3058
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %155
  %229 = load i8, i8* %16, align 1, !dbg !3061
  %230 = zext i8 %229 to i32, !dbg !3061
  %231 = load i8, i8* %17, align 1, !dbg !3063
  %232 = zext i8 %231 to i32, !dbg !3063
  %_ = shl i32 %230, %232
  %_27 = sub i32 0, %230
  %gen = add i32 %_27, %232
  %233 = sub nsw i32 %230, %232, !dbg !3064
  store i32 %233, i32* %11, align 4, !dbg !3065
  br label %originalBB26

originalBB31alteredBB:                            ; preds = %originalBB31, %177
  %234 = load i32, i32* %11, align 4, !dbg !3066
  br label %originalBB31
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @close_stream(%struct._IO_FILE*) #4 !dbg !3075 {
  %2 = load i32, i32* @x.51
  %3 = load i32, i32* @y.52
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca %struct._IO_FILE*, align 8
  %12 = alloca i8, align 1
  %13 = alloca i8, align 1
  %14 = alloca i8, align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %11, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %11, metadata !3113, metadata !DIExpression()), !dbg !3114
  call void @llvm.dbg.declare(metadata i8* %12, metadata !3115, metadata !DIExpression()), !dbg !3117
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3118
  %16 = call i64 @__fpending(%struct._IO_FILE* %15) #10, !dbg !3119
  %17 = icmp ne i64 %16, 0, !dbg !3120
  %18 = zext i1 %17 to i8, !dbg !3117
  store i8 %18, i8* %12, align 1, !dbg !3117
  call void @llvm.dbg.declare(metadata i8* %13, metadata !3121, metadata !DIExpression()), !dbg !3122
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3123
  %20 = call i32 @ferror_unlocked(%struct._IO_FILE* %19) #10, !dbg !3123
  %21 = icmp ne i32 %20, 0, !dbg !3124
  %22 = zext i1 %21 to i8, !dbg !3122
  store i8 %22, i8* %13, align 1, !dbg !3122
  call void @llvm.dbg.declare(metadata i8* %14, metadata !3125, metadata !DIExpression()), !dbg !3126
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3127
  %24 = call i32 @rpl_fclose(%struct._IO_FILE* %23), !dbg !3128
  %25 = icmp ne i32 %24, 0, !dbg !3129
  %26 = zext i1 %25 to i8, !dbg !3126
  store i8 %26, i8* %14, align 1, !dbg !3126
  %27 = load i8, i8* %13, align 1, !dbg !3130
  %28 = trunc i8 %27 to i1, !dbg !3130
  %29 = load i32, i32* @x.51
  %30 = load i32, i32* @y.52
  %31 = sub i32 %29, 1
  %32 = mul i32 %29, %31
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %34, %35
  br i1 %36, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %28, label %95, label %37, !dbg !3132

37:                                               ; preds = %originalBBpart2
  %38 = load i32, i32* @x.51
  %39 = load i32, i32* @y.52
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %37, %originalBB1alteredBB
  %46 = load i8, i8* %14, align 1, !dbg !3133
  %47 = trunc i8 %46 to i1, !dbg !3133
  %48 = load i32, i32* @x.51
  %49 = load i32, i32* @y.52
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %47, label %56, label %149, !dbg !3134

56:                                               ; preds = %originalBBpart24
  %57 = load i32, i32* @x.51
  %58 = load i32, i32* @y.52
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %56, %originalBB6alteredBB
  %65 = load i8, i8* %12, align 1, !dbg !3135
  %66 = trunc i8 %65 to i1, !dbg !3135
  %67 = load i32, i32* @x.51
  %68 = load i32, i32* @y.52
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %66, label %95, label %75, !dbg !3136

75:                                               ; preds = %originalBBpart28
  %76 = load i32, i32* @x.51
  %77 = load i32, i32* @y.52
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %75, %originalBB10alteredBB
  %84 = call i32* @__errno_location() #14, !dbg !3137
  %85 = load i32, i32* %84, align 4, !dbg !3137
  %86 = icmp ne i32 %85, 9, !dbg !3138
  %87 = load i32, i32* @x.51
  %88 = load i32, i32* @y.52
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %86, label %95, label %149, !dbg !3139

95:                                               ; preds = %originalBBpart212, %originalBBpart28, %originalBBpart2
  %96 = load i32, i32* @x.51
  %97 = load i32, i32* @y.52
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %95, %originalBB14alteredBB
  %104 = load i8, i8* %14, align 1, !dbg !3140
  %105 = trunc i8 %104 to i1, !dbg !3140
  %106 = load i32, i32* @x.51
  %107 = load i32, i32* @y.52
  %108 = sub i32 %106, 1
  %109 = mul i32 %106, %108
  %110 = urem i32 %109, 2
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %111, %112
  br i1 %113, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %105, label %132, label %114, !dbg !3143

114:                                              ; preds = %originalBBpart216
  %115 = load i32, i32* @x.51
  %116 = load i32, i32* @y.52
  %117 = sub i32 %115, 1
  %118 = mul i32 %115, %117
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %120, %121
  br i1 %122, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %114, %originalBB18alteredBB
  %123 = call i32* @__errno_location() #14, !dbg !3144
  store i32 0, i32* %123, align 4, !dbg !3145
  %124 = load i32, i32* @x.51
  %125 = load i32, i32* @y.52
  %126 = sub i32 %124, 1
  %127 = mul i32 %124, %126
  %128 = urem i32 %127, 2
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %125, 10
  %131 = or i1 %129, %130
  br i1 %131, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %132, !dbg !3144

132:                                              ; preds = %originalBBpart220, %originalBBpart216
  %133 = load i32, i32* @x.51
  %134 = load i32, i32* @y.52
  %135 = sub i32 %133, 1
  %136 = mul i32 %133, %135
  %137 = urem i32 %136, 2
  %138 = icmp eq i32 %137, 0
  %139 = icmp slt i32 %134, 10
  %140 = or i1 %138, %139
  br i1 %140, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %132, %originalBB22alteredBB
  store i32 -1, i32* %10, align 4, !dbg !3146
  %141 = load i32, i32* @x.51
  %142 = load i32, i32* @y.52
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %166, !dbg !3146

149:                                              ; preds = %originalBBpart212, %originalBBpart24
  %150 = load i32, i32* @x.51
  %151 = load i32, i32* @y.52
  %152 = sub i32 %150, 1
  %153 = mul i32 %150, %152
  %154 = urem i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %155, %156
  br i1 %157, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %149, %originalBB26alteredBB
  store i32 0, i32* %10, align 4, !dbg !3147
  %158 = load i32, i32* @x.51
  %159 = load i32, i32* @y.52
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %166, !dbg !3147

166:                                              ; preds = %originalBBpart228, %originalBBpart224
  %167 = load i32, i32* @x.51
  %168 = load i32, i32* @y.52
  %169 = sub i32 %167, 1
  %170 = mul i32 %167, %169
  %171 = urem i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %172, %173
  br i1 %174, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %166, %originalBB30alteredBB
  %175 = load i32, i32* %10, align 4, !dbg !3148
  %176 = load i32, i32* @x.51
  %177 = load i32, i32* @y.52
  %178 = sub i32 %176, 1
  %179 = mul i32 %176, %178
  %180 = urem i32 %179, 2
  %181 = icmp eq i32 %180, 0
  %182 = icmp slt i32 %177, 10
  %183 = or i1 %181, %182
  br i1 %183, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  ret i32 %175, !dbg !3148

originalBBalteredBB:                              ; preds = %originalBB, %1
  %184 = alloca i32, align 4
  %185 = alloca %struct._IO_FILE*, align 8
  %186 = alloca i8, align 1
  %187 = alloca i8, align 1
  %188 = alloca i8, align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %185, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %185, metadata !3149, metadata !DIExpression()), !dbg !3114
  call void @llvm.dbg.declare(metadata i8* %186, metadata !3188, metadata !DIExpression()), !dbg !3117
  %189 = load %struct._IO_FILE*, %struct._IO_FILE** %185, align 8, !dbg !3118
  %190 = call i64 @__fpending(%struct._IO_FILE* %189) #10, !dbg !3119
  %191 = icmp ne i64 %190, 0, !dbg !3120
  %192 = zext i1 %191 to i8, !dbg !3117
  store i8 %192, i8* %186, align 1, !dbg !3117
  call void @llvm.dbg.declare(metadata i8* %187, metadata !3189, metadata !DIExpression()), !dbg !3122
  %193 = load %struct._IO_FILE*, %struct._IO_FILE** %185, align 8, !dbg !3123
  %194 = call i32 @ferror_unlocked(%struct._IO_FILE* %193) #10, !dbg !3123
  %195 = icmp ne i32 %194, 0, !dbg !3124
  %196 = zext i1 %195 to i8, !dbg !3122
  store i8 %196, i8* %187, align 1, !dbg !3122
  call void @llvm.dbg.declare(metadata i8* %188, metadata !3190, metadata !DIExpression()), !dbg !3126
  %197 = load %struct._IO_FILE*, %struct._IO_FILE** %185, align 8, !dbg !3127
  %198 = call i32 @rpl_fclose(%struct._IO_FILE* %197), !dbg !3128
  %199 = icmp ne i32 %198, 0, !dbg !3129
  %200 = zext i1 %199 to i8, !dbg !3126
  store i8 %200, i8* %188, align 1, !dbg !3126
  %201 = load i8, i8* %187, align 1, !dbg !3130
  %202 = trunc i8 %201 to i1, !dbg !3130
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %37
  %203 = load i8, i8* %14, align 1, !dbg !3133
  %204 = trunc i8 %203 to i1, !dbg !3133
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %56
  %205 = load i8, i8* %12, align 1, !dbg !3135
  %206 = trunc i8 %205 to i1, !dbg !3135
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %75
  %207 = call i32* @__errno_location() #14, !dbg !3137
  %208 = load i32, i32* %207, align 4, !dbg !3137
  %209 = icmp ne i32 %208, 9, !dbg !3138
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %95
  %210 = load i8, i8* %14, align 1, !dbg !3140
  %211 = trunc i8 %210 to i1, !dbg !3140
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %114
  %212 = call i32* @__errno_location() #14, !dbg !3144
  store i32 0, i32* %212, align 4, !dbg !3145
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %132
  store i32 -1, i32* %10, align 4, !dbg !3146
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %149
  store i32 0, i32* %10, align 4, !dbg !3147
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %166
  %213 = load i32, i32* %10, align 4, !dbg !3148
  br label %originalBB30
}

; Function Attrs: nounwind
declare dso_local i64 @__fpending(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare dso_local i32 @ferror_unlocked(%struct._IO_FILE*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @hard_locale(i32) #4 !dbg !3191 {
  %2 = load i32, i32* @x.53
  %3 = load i32, i32* @y.54
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i1, align 1
  %11 = alloca i32, align 4
  %12 = alloca [257 x i8], align 16
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !3195, metadata !DIExpression()), !dbg !3196
  call void @llvm.dbg.declare(metadata [257 x i8]* %12, metadata !3197, metadata !DIExpression()), !dbg !3201
  %13 = load i32, i32* %11, align 4, !dbg !3202
  %14 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !3204
  %15 = call i32 @setlocale_null_r(i32 %13, i8* %14, i64 257), !dbg !3205
  %16 = icmp ne i32 %15, 0, !dbg !3205
  %17 = load i32, i32* @x.53
  %18 = load i32, i32* @y.54
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %16, label %25, label %42, !dbg !3206

25:                                               ; preds = %originalBBpart2
  %26 = load i32, i32* @x.53
  %27 = load i32, i32* @y.54
  %28 = sub i32 %26, 1
  %29 = mul i32 %26, %28
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %31, %32
  br i1 %33, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %25, %originalBB1alteredBB
  store i1 false, i1* %10, align 1, !dbg !3207
  %34 = load i32, i32* @x.53
  %35 = load i32, i32* @y.54
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %101, !dbg !3207

42:                                               ; preds = %originalBBpart2
  %43 = load i32, i32* @x.53
  %44 = load i32, i32* @y.54
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %42, %originalBB6alteredBB
  %51 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !3208
  %52 = call i32 @strcmp(i8* %51, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.111, i64 0, i64 0)) #13, !dbg !3209
  %53 = icmp eq i32 %52, 0, !dbg !3210
  %54 = load i32, i32* @x.53
  %55 = load i32, i32* @y.54
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %53, label %82, label %62, !dbg !3211

62:                                               ; preds = %originalBBpart28
  %63 = load i32, i32* @x.53
  %64 = load i32, i32* @y.54
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %62, %originalBB10alteredBB
  %71 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !3212
  %72 = call i32 @strcmp(i8* %71, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.112, i64 0, i64 0)) #13, !dbg !3213
  %73 = icmp eq i32 %72, 0, !dbg !3214
  %74 = load i32, i32* @x.53
  %75 = load i32, i32* @y.54
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %82, !dbg !3211

82:                                               ; preds = %originalBBpart212, %originalBBpart28
  %83 = phi i1 [ true, %originalBBpart28 ], [ %73, %originalBBpart212 ]
  %84 = load i32, i32* @x.53
  %85 = load i32, i32* @y.54
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %82, %originalBB14alteredBB
  %92 = xor i1 %83, true, !dbg !3215
  store i1 %92, i1* %10, align 1, !dbg !3216
  %93 = load i32, i32* @x.53
  %94 = load i32, i32* @y.54
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBBpart218, label %originalBB14alteredBB

originalBBpart218:                                ; preds = %originalBB14
  br label %101, !dbg !3216

101:                                              ; preds = %originalBBpart218, %originalBBpart24
  %102 = load i32, i32* @x.53
  %103 = load i32, i32* @y.54
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB20, label %originalBB20alteredBB

originalBB20:                                     ; preds = %101, %originalBB20alteredBB
  %110 = load i1, i1* %10, align 1, !dbg !3217
  %111 = load i32, i32* @x.53
  %112 = load i32, i32* @y.54
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBBpart222, label %originalBB20alteredBB

originalBBpart222:                                ; preds = %originalBB20
  ret i1 %110, !dbg !3217

originalBBalteredBB:                              ; preds = %originalBB, %1
  %119 = alloca i1, align 1
  %120 = alloca i32, align 4
  %121 = alloca [257 x i8], align 16
  store i32 %0, i32* %120, align 4
  call void @llvm.dbg.declare(metadata i32* %120, metadata !3218, metadata !DIExpression()), !dbg !3196
  call void @llvm.dbg.declare(metadata [257 x i8]* %121, metadata !3221, metadata !DIExpression()), !dbg !3201
  %122 = load i32, i32* %120, align 4, !dbg !3202
  %123 = getelementptr inbounds [257 x i8], [257 x i8]* %121, i64 0, i64 0, !dbg !3204
  %124 = call i32 @setlocale_null_r(i32 %122, i8* %123, i64 257), !dbg !3205
  %125 = icmp ne i32 %124, 0, !dbg !3205
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %25
  store i1 false, i1* %10, align 1, !dbg !3207
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %42
  %126 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !3208
  %127 = call i32 @strcmp(i8* %126, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.111, i64 0, i64 0)) #13, !dbg !3209
  %128 = icmp eq i32 %127, 0, !dbg !3210
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %62
  %129 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !3212
  %130 = call i32 @strcmp(i8* %129, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.112, i64 0, i64 0)) #13, !dbg !3213
  %131 = icmp eq i32 %130, 0, !dbg !3214
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %82
  %_ = sub i1 false, %83
  %gen = add i1 %_, true
  %_15 = sub i1 false, %83
  %gen16 = add i1 %_15, true
  %132 = xor i1 %83, true, !dbg !3215
  store i1 %132, i1* %10, align 1, !dbg !3216
  br label %originalBB14

originalBB20alteredBB:                            ; preds = %originalBB20, %101
  %133 = load i1, i1* %10, align 1, !dbg !3217
  br label %originalBB20
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @locale_charset() #4 !dbg !3222 {
  %1 = load i32, i32* @x.55
  %2 = load i32, i32* @y.56
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %9, metadata !3226, metadata !DIExpression()), !dbg !3227
  %10 = call i8* @nl_langinfo(i32 14) #10, !dbg !3228
  store i8* %10, i8** %9, align 8, !dbg !3229
  %11 = load i8*, i8** %9, align 8, !dbg !3230
  %12 = icmp eq i8* %11, null, !dbg !3232
  %13 = load i32, i32* @x.55
  %14 = load i32, i32* @y.56
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %21, label %38, !dbg !3233

21:                                               ; preds = %originalBBpart2
  %22 = load i32, i32* @x.55
  %23 = load i32, i32* @y.56
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.115, i64 0, i64 0), i8** %9, align 8, !dbg !3234
  %30 = load i32, i32* @x.55
  %31 = load i32, i32* @y.56
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %38, !dbg !3235

38:                                               ; preds = %originalBBpart24, %originalBBpart2
  %39 = load i32, i32* @x.55
  %40 = load i32, i32* @y.56
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %38, %originalBB6alteredBB
  %47 = load i8*, i8** %9, align 8, !dbg !3236
  %48 = getelementptr inbounds i8, i8* %47, i64 0, !dbg !3236
  %49 = load i8, i8* %48, align 1, !dbg !3236
  %50 = sext i8 %49 to i32, !dbg !3236
  %51 = icmp eq i32 %50, 0, !dbg !3240
  %52 = load i32, i32* @x.55
  %53 = load i32, i32* @y.56
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %51, label %60, label %77, !dbg !3241

60:                                               ; preds = %originalBBpart28
  %61 = load i32, i32* @x.55
  %62 = load i32, i32* @y.56
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %60, %originalBB10alteredBB
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.116, i64 0, i64 0), i8** %9, align 8, !dbg !3242
  %69 = load i32, i32* @x.55
  %70 = load i32, i32* @y.56
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %77, !dbg !3243

77:                                               ; preds = %originalBBpart212, %originalBBpart28
  %78 = load i32, i32* @x.55
  %79 = load i32, i32* @y.56
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %77, %originalBB14alteredBB
  %86 = load i8*, i8** %9, align 8, !dbg !3244
  %87 = load i32, i32* @x.55
  %88 = load i32, i32* @y.56
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  ret i8* %86, !dbg !3245

originalBBalteredBB:                              ; preds = %originalBB, %0
  %95 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %95, metadata !3246, metadata !DIExpression()), !dbg !3227
  %96 = call i8* @nl_langinfo(i32 14) #10, !dbg !3228
  store i8* %96, i8** %95, align 8, !dbg !3229
  %97 = load i8*, i8** %95, align 8, !dbg !3230
  %98 = icmp eq i8* %97, null, !dbg !3232
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.115, i64 0, i64 0), i8** %9, align 8, !dbg !3234
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %38
  %99 = load i8*, i8** %9, align 8, !dbg !3236
  %100 = getelementptr inbounds i8, i8* %99, i64 0, !dbg !3236
  %101 = load i8, i8* %100, align 1, !dbg !3236
  %102 = sext i8 %101 to i32, !dbg !3236
  %103 = icmp eq i32 %102, 0, !dbg !3240
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %60
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.116, i64 0, i64 0), i8** %9, align 8, !dbg !3242
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %77
  %104 = load i8*, i8** %9, align 8, !dbg !3244
  br label %originalBB14
}

; Function Attrs: nounwind
declare dso_local i8* @nl_langinfo(i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @setlocale_null_r(i32, i8* nonnull, i64) #4 !dbg !3249 {
  %4 = load i32, i32* @x.57
  %5 = load i32, i32* @y.58
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  store i32 %0, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !3253, metadata !DIExpression()), !dbg !3254
  store i8* %1, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !3255, metadata !DIExpression()), !dbg !3256
  store i64 %2, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !3257, metadata !DIExpression()), !dbg !3258
  %15 = load i32, i32* %12, align 4, !dbg !3259
  %16 = load i8*, i8** %13, align 8, !dbg !3260
  %17 = load i64, i64* %14, align 8, !dbg !3261
  %18 = call i32 @setlocale_null_unlocked(i32 %15, i8* %16, i64 %17), !dbg !3262
  %19 = load i32, i32* @x.57
  %20 = load i32, i32* @y.58
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i32 %18, !dbg !3263

originalBBalteredBB:                              ; preds = %originalBB, %3
  %27 = alloca i32, align 4
  %28 = alloca i8*, align 8
  %29 = alloca i64, align 8
  store i32 %0, i32* %27, align 4
  call void @llvm.dbg.declare(metadata i32* %27, metadata !3264, metadata !DIExpression()), !dbg !3254
  store i8* %1, i8** %28, align 8
  call void @llvm.dbg.declare(metadata i8** %28, metadata !3267, metadata !DIExpression()), !dbg !3256
  store i64 %2, i64* %29, align 8
  call void @llvm.dbg.declare(metadata i64* %29, metadata !3268, metadata !DIExpression()), !dbg !3258
  %30 = load i32, i32* %27, align 4, !dbg !3259
  %31 = load i8*, i8** %28, align 8, !dbg !3260
  %32 = load i64, i64* %29, align 8, !dbg !3261
  %33 = call i32 @setlocale_null_unlocked(i32 %30, i8* %31, i64 %32), !dbg !3262
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @setlocale_null_unlocked(i32, i8*, i64) #4 !dbg !3269 {
  %4 = load i32, i32* @x.59
  %5 = load i32, i32* @y.60
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i64, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i64, align 8
  store i32 %0, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !3270, metadata !DIExpression()), !dbg !3271
  store i8* %1, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !3272, metadata !DIExpression()), !dbg !3273
  store i64 %2, i64* %15, align 8
  call void @llvm.dbg.declare(metadata i64* %15, metadata !3274, metadata !DIExpression()), !dbg !3275
  call void @llvm.dbg.declare(metadata i8** %16, metadata !3276, metadata !DIExpression()), !dbg !3277
  %18 = load i32, i32* %13, align 4, !dbg !3278
  %19 = call i8* @setlocale_null_androidfix(i32 %18), !dbg !3279
  store i8* %19, i8** %16, align 8, !dbg !3277
  %20 = load i8*, i8** %16, align 8, !dbg !3280
  %21 = icmp eq i8* %20, null, !dbg !3282
  %22 = load i32, i32* @x.59
  %23 = load i32, i32* @y.60
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %21, label %30, label %85, !dbg !3283

30:                                               ; preds = %originalBBpart2
  %31 = load i32, i32* @x.59
  %32 = load i32, i32* @y.60
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %30, %originalBB1alteredBB
  %39 = load i64, i64* %15, align 8, !dbg !3284
  %40 = icmp ugt i64 %39, 0, !dbg !3287
  %41 = load i32, i32* @x.59
  %42 = load i32, i32* @y.60
  %43 = sub i32 %41, 1
  %44 = mul i32 %41, %43
  %45 = urem i32 %44, 2
  %46 = icmp eq i32 %45, 0
  %47 = icmp slt i32 %42, 10
  %48 = or i1 %46, %47
  br i1 %48, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %40, label %49, label %68, !dbg !3288

49:                                               ; preds = %originalBBpart24
  %50 = load i32, i32* @x.59
  %51 = load i32, i32* @y.60
  %52 = sub i32 %50, 1
  %53 = mul i32 %50, %52
  %54 = urem i32 %53, 2
  %55 = icmp eq i32 %54, 0
  %56 = icmp slt i32 %51, 10
  %57 = or i1 %55, %56
  br i1 %57, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %49, %originalBB6alteredBB
  %58 = load i8*, i8** %14, align 8, !dbg !3289
  %59 = getelementptr inbounds i8, i8* %58, i64 0, !dbg !3289
  store i8 0, i8* %59, align 1, !dbg !3290
  %60 = load i32, i32* @x.59
  %61 = load i32, i32* @y.60
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %68, !dbg !3289

68:                                               ; preds = %originalBBpart28, %originalBBpart24
  %69 = load i32, i32* @x.59
  %70 = load i32, i32* @y.60
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %68, %originalBB10alteredBB
  store i32 22, i32* %12, align 4, !dbg !3291
  %77 = load i32, i32* @x.59
  %78 = load i32, i32* @y.60
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %189, !dbg !3291

85:                                               ; preds = %originalBBpart2
  call void @llvm.dbg.declare(metadata i64* %17, metadata !3292, metadata !DIExpression()), !dbg !3294
  %86 = load i32, i32* @x.59
  %87 = load i32, i32* @y.60
  %88 = sub i32 %86, 1
  %89 = mul i32 %86, %88
  %90 = urem i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %91, %92
  br i1 %93, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %85, %originalBB14alteredBB
  %94 = load i8*, i8** %16, align 8, !dbg !3295
  %95 = call i64 @strlen(i8* %94) #13, !dbg !3296
  store i64 %95, i64* %17, align 8, !dbg !3294
  %96 = load i64, i64* %17, align 8, !dbg !3297
  %97 = load i64, i64* %15, align 8, !dbg !3299
  %98 = icmp ult i64 %96, %97, !dbg !3300
  %99 = load i32, i32* @x.59
  %100 = load i32, i32* @y.60
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %98, label %107, label %128, !dbg !3301

107:                                              ; preds = %originalBBpart216
  %108 = load i32, i32* @x.59
  %109 = load i32, i32* @y.60
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %107, %originalBB18alteredBB
  %116 = load i8*, i8** %14, align 8, !dbg !3302
  %117 = load i8*, i8** %16, align 8, !dbg !3304
  %118 = load i64, i64* %17, align 8, !dbg !3305
  %119 = add i64 %118, 1, !dbg !3306
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %116, i8* align 1 %117, i64 %119, i1 false), !dbg !3307
  store i32 0, i32* %12, align 4, !dbg !3308
  %120 = load i32, i32* @x.59
  %121 = load i32, i32* @y.60
  %122 = sub i32 %120, 1
  %123 = mul i32 %120, %122
  %124 = urem i32 %123, 2
  %125 = icmp eq i32 %124, 0
  %126 = icmp slt i32 %121, 10
  %127 = or i1 %125, %126
  br i1 %127, label %originalBBpart221, label %originalBB18alteredBB

originalBBpart221:                                ; preds = %originalBB18
  br label %189, !dbg !3308

128:                                              ; preds = %originalBBpart216
  %129 = load i32, i32* @x.59
  %130 = load i32, i32* @y.60
  %131 = sub i32 %129, 1
  %132 = mul i32 %129, %131
  %133 = urem i32 %132, 2
  %134 = icmp eq i32 %133, 0
  %135 = icmp slt i32 %130, 10
  %136 = or i1 %134, %135
  br i1 %136, label %originalBB23, label %originalBB23alteredBB

originalBB23:                                     ; preds = %128, %originalBB23alteredBB
  %137 = load i64, i64* %15, align 8, !dbg !3309
  %138 = icmp ugt i64 %137, 0, !dbg !3312
  %139 = load i32, i32* @x.59
  %140 = load i32, i32* @y.60
  %141 = sub i32 %139, 1
  %142 = mul i32 %139, %141
  %143 = urem i32 %142, 2
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %144, %145
  br i1 %146, label %originalBBpart225, label %originalBB23alteredBB

originalBBpart225:                                ; preds = %originalBB23
  br i1 %138, label %147, label %172, !dbg !3313

147:                                              ; preds = %originalBBpart225
  %148 = load i32, i32* @x.59
  %149 = load i32, i32* @y.60
  %150 = sub i32 %148, 1
  %151 = mul i32 %148, %150
  %152 = urem i32 %151, 2
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %153, %154
  br i1 %155, label %originalBB27, label %originalBB27alteredBB

originalBB27:                                     ; preds = %147, %originalBB27alteredBB
  %156 = load i8*, i8** %14, align 8, !dbg !3314
  %157 = load i8*, i8** %16, align 8, !dbg !3316
  %158 = load i64, i64* %15, align 8, !dbg !3317
  %159 = sub i64 %158, 1, !dbg !3318
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %156, i8* align 1 %157, i64 %159, i1 false), !dbg !3319
  %160 = load i8*, i8** %14, align 8, !dbg !3320
  %161 = load i64, i64* %15, align 8, !dbg !3321
  %162 = sub i64 %161, 1, !dbg !3322
  %163 = getelementptr inbounds i8, i8* %160, i64 %162, !dbg !3320
  store i8 0, i8* %163, align 1, !dbg !3323
  %164 = load i32, i32* @x.59
  %165 = load i32, i32* @y.60
  %166 = sub i32 %164, 1
  %167 = mul i32 %164, %166
  %168 = urem i32 %167, 2
  %169 = icmp eq i32 %168, 0
  %170 = icmp slt i32 %165, 10
  %171 = or i1 %169, %170
  br i1 %171, label %originalBBpart240, label %originalBB27alteredBB

originalBBpart240:                                ; preds = %originalBB27
  br label %172, !dbg !3324

172:                                              ; preds = %originalBBpart240, %originalBBpart225
  %173 = load i32, i32* @x.59
  %174 = load i32, i32* @y.60
  %175 = sub i32 %173, 1
  %176 = mul i32 %173, %175
  %177 = urem i32 %176, 2
  %178 = icmp eq i32 %177, 0
  %179 = icmp slt i32 %174, 10
  %180 = or i1 %178, %179
  br i1 %180, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %172, %originalBB42alteredBB
  store i32 34, i32* %12, align 4, !dbg !3325
  %181 = load i32, i32* @x.59
  %182 = load i32, i32* @y.60
  %183 = sub i32 %181, 1
  %184 = mul i32 %181, %183
  %185 = urem i32 %184, 2
  %186 = icmp eq i32 %185, 0
  %187 = icmp slt i32 %182, 10
  %188 = or i1 %186, %187
  br i1 %188, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br label %189, !dbg !3325

189:                                              ; preds = %originalBBpart244, %originalBBpart221, %originalBBpart212
  %190 = load i32, i32* @x.59
  %191 = load i32, i32* @y.60
  %192 = sub i32 %190, 1
  %193 = mul i32 %190, %192
  %194 = urem i32 %193, 2
  %195 = icmp eq i32 %194, 0
  %196 = icmp slt i32 %191, 10
  %197 = or i1 %195, %196
  br i1 %197, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %189, %originalBB46alteredBB
  %198 = load i32, i32* %12, align 4, !dbg !3326
  %199 = load i32, i32* @x.59
  %200 = load i32, i32* @y.60
  %201 = sub i32 %199, 1
  %202 = mul i32 %199, %201
  %203 = urem i32 %202, 2
  %204 = icmp eq i32 %203, 0
  %205 = icmp slt i32 %200, 10
  %206 = or i1 %204, %205
  br i1 %206, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  ret i32 %198, !dbg !3326

originalBBalteredBB:                              ; preds = %originalBB, %3
  %207 = alloca i32, align 4
  %208 = alloca i32, align 4
  %209 = alloca i8*, align 8
  %210 = alloca i64, align 8
  %211 = alloca i8*, align 8
  %212 = alloca i64, align 8
  store i32 %0, i32* %208, align 4
  call void @llvm.dbg.declare(metadata i32* %208, metadata !3327, metadata !DIExpression()), !dbg !3271
  store i8* %1, i8** %209, align 8
  call void @llvm.dbg.declare(metadata i8** %209, metadata !3330, metadata !DIExpression()), !dbg !3273
  store i64 %2, i64* %210, align 8
  call void @llvm.dbg.declare(metadata i64* %210, metadata !3331, metadata !DIExpression()), !dbg !3275
  call void @llvm.dbg.declare(metadata i8** %211, metadata !3332, metadata !DIExpression()), !dbg !3277
  %213 = load i32, i32* %208, align 4, !dbg !3278
  %214 = call i8* @setlocale_null_androidfix(i32 %213), !dbg !3279
  store i8* %214, i8** %211, align 8, !dbg !3277
  %215 = load i8*, i8** %211, align 8, !dbg !3280
  %216 = icmp eq i8* %215, null, !dbg !3282
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %30
  %217 = load i64, i64* %15, align 8, !dbg !3284
  %218 = icmp ugt i64 %217, 0, !dbg !3287
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %49
  %219 = load i8*, i8** %14, align 8, !dbg !3289
  %220 = getelementptr inbounds i8, i8* %219, i64 0, !dbg !3289
  store i8 0, i8* %220, align 1, !dbg !3290
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %68
  store i32 22, i32* %12, align 4, !dbg !3291
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %85
  %221 = load i8*, i8** %16, align 8, !dbg !3295
  %222 = call i64 @strlen(i8* %221) #13, !dbg !3296
  store i64 %222, i64* %17, align 8, !dbg !3294
  %223 = load i64, i64* %17, align 8, !dbg !3297
  %224 = load i64, i64* %15, align 8, !dbg !3299
  %225 = icmp ult i64 %223, %224, !dbg !3300
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %107
  %226 = load i8*, i8** %14, align 8, !dbg !3302
  %227 = load i8*, i8** %16, align 8, !dbg !3304
  %228 = load i64, i64* %17, align 8, !dbg !3305
  %_ = shl i64 %228, 1
  %_19 = sub i64 %228, 1
  %gen = mul i64 %_19, 1
  %229 = add i64 %228, 1, !dbg !3306
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %226, i8* align 1 %227, i64 %229, i1 false), !dbg !3307
  store i32 0, i32* %12, align 4, !dbg !3308
  br label %originalBB18

originalBB23alteredBB:                            ; preds = %originalBB23, %128
  %230 = load i64, i64* %15, align 8, !dbg !3309
  %231 = icmp ugt i64 %230, 0, !dbg !3312
  br label %originalBB23

originalBB27alteredBB:                            ; preds = %originalBB27, %147
  %232 = load i8*, i8** %14, align 8, !dbg !3314
  %233 = load i8*, i8** %16, align 8, !dbg !3316
  %234 = load i64, i64* %15, align 8, !dbg !3317
  %_28 = sub i64 0, %234
  %gen29 = add i64 %_28, 1
  %_30 = sub i64 %234, 1
  %gen31 = mul i64 %_30, 1
  %_32 = shl i64 %234, 1
  %235 = sub i64 %234, 1, !dbg !3318
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %232, i8* align 1 %233, i64 %235, i1 false), !dbg !3319
  %236 = load i8*, i8** %14, align 8, !dbg !3320
  %237 = load i64, i64* %15, align 8, !dbg !3321
  %_33 = sub i64 %237, 1
  %gen34 = mul i64 %_33, 1
  %_35 = sub i64 %237, 1
  %gen36 = mul i64 %_35, 1
  %_37 = sub i64 0, %237
  %gen38 = add i64 %_37, 1
  %238 = sub i64 %237, 1, !dbg !3322
  %239 = getelementptr inbounds i8, i8* %236, i64 %238, !dbg !3320
  store i8 0, i8* %239, align 1, !dbg !3323
  br label %originalBB27

originalBB42alteredBB:                            ; preds = %originalBB42, %172
  store i32 34, i32* %12, align 4, !dbg !3325
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %189
  %240 = load i32, i32* %12, align 4, !dbg !3326
  br label %originalBB46
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @setlocale_null_androidfix(i32) #4 !dbg !3333 {
  %2 = load i32, i32* @x.61
  %3 = load i32, i32* @y.62
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  store i32 %0, i32* %10, align 4
  call void @llvm.dbg.declare(metadata i32* %10, metadata !3336, metadata !DIExpression()), !dbg !3337
  call void @llvm.dbg.declare(metadata i8** %11, metadata !3338, metadata !DIExpression()), !dbg !3339
  %12 = load i32, i32* %10, align 4, !dbg !3340
  %13 = call i8* @setlocale(i32 %12, i8* null) #10, !dbg !3341
  store i8* %13, i8** %11, align 8, !dbg !3339
  %14 = load i8*, i8** %11, align 8, !dbg !3342
  %15 = load i32, i32* @x.61
  %16 = load i32, i32* @y.62
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %14, !dbg !3343

originalBBalteredBB:                              ; preds = %originalBB, %1
  %23 = alloca i32, align 4
  %24 = alloca i8*, align 8
  store i32 %0, i32* %23, align 4
  call void @llvm.dbg.declare(metadata i32* %23, metadata !3344, metadata !DIExpression()), !dbg !3337
  call void @llvm.dbg.declare(metadata i8** %24, metadata !3347, metadata !DIExpression()), !dbg !3339
  %25 = load i32, i32* %23, align 4, !dbg !3340
  %26 = call i8* @setlocale(i32 %25, i8* null) #10, !dbg !3341
  store i8* %26, i8** %24, align 8, !dbg !3339
  %27 = load i8*, i8** %24, align 8, !dbg !3342
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fclose(%struct._IO_FILE* nonnull) #4 !dbg !3348 {
  %2 = load i32, i32* @x.63
  %3 = load i32, i32* @y.64
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca %struct._IO_FILE*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %11, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %11, metadata !3386, metadata !DIExpression()), !dbg !3387
  call void @llvm.dbg.declare(metadata i32* %12, metadata !3388, metadata !DIExpression()), !dbg !3389
  store i32 0, i32* %12, align 4, !dbg !3389
  call void @llvm.dbg.declare(metadata i32* %13, metadata !3390, metadata !DIExpression()), !dbg !3391
  call void @llvm.dbg.declare(metadata i32* %14, metadata !3392, metadata !DIExpression()), !dbg !3393
  store i32 0, i32* %14, align 4, !dbg !3393
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3394
  %16 = call i32 @fileno(%struct._IO_FILE* %15) #10, !dbg !3395
  store i32 %16, i32* %13, align 4, !dbg !3396
  %17 = load i32, i32* %13, align 4, !dbg !3397
  %18 = icmp slt i32 %17, 0, !dbg !3399
  %19 = load i32, i32* @x.63
  %20 = load i32, i32* @y.64
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %18, label %27, label %46, !dbg !3400

27:                                               ; preds = %originalBBpart2
  %28 = load i32, i32* @x.63
  %29 = load i32, i32* @y.64
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %27, %originalBB1alteredBB
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3401
  %37 = call i32 @fclose(%struct._IO_FILE* %36), !dbg !3402
  store i32 %37, i32* %10, align 4, !dbg !3403
  %38 = load i32, i32* @x.63
  %39 = load i32, i32* @y.64
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %184, !dbg !3403

46:                                               ; preds = %originalBBpart2
  %47 = load i32, i32* @x.63
  %48 = load i32, i32* @y.64
  %49 = sub i32 %47, 1
  %50 = mul i32 %47, %49
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %52, %53
  br i1 %54, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %46, %originalBB6alteredBB
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3404
  %56 = call i32 @__freading(%struct._IO_FILE* %55) #10, !dbg !3404
  %57 = icmp ne i32 %56, 0, !dbg !3404
  %58 = load i32, i32* @x.63
  %59 = load i32, i32* @y.64
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %57, label %66, label %87, !dbg !3406

66:                                               ; preds = %originalBBpart28
  %67 = load i32, i32* @x.63
  %68 = load i32, i32* @y.64
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %66, %originalBB10alteredBB
  %75 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3407
  %76 = call i32 @fileno(%struct._IO_FILE* %75) #10, !dbg !3408
  %77 = call i64 @lseek(i32 %76, i64 0, i32 1) #10, !dbg !3409
  %78 = icmp ne i64 %77, -1, !dbg !3410
  %79 = load i32, i32* @x.63
  %80 = load i32, i32* @y.64
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %78, label %87, label %126, !dbg !3411

87:                                               ; preds = %originalBBpart212, %originalBBpart28
  %88 = load i32, i32* @x.63
  %89 = load i32, i32* @y.64
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %87, %originalBB14alteredBB
  %96 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3412
  %97 = call i32 @rpl_fflush(%struct._IO_FILE* %96), !dbg !3413
  %98 = icmp ne i32 %97, 0, !dbg !3413
  %99 = load i32, i32* @x.63
  %100 = load i32, i32* @y.64
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %98, label %107, label %126, !dbg !3414

107:                                              ; preds = %originalBBpart216
  %108 = load i32, i32* @x.63
  %109 = load i32, i32* @y.64
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %107, %originalBB18alteredBB
  %116 = call i32* @__errno_location() #14, !dbg !3415
  %117 = load i32, i32* %116, align 4, !dbg !3415
  store i32 %117, i32* %12, align 4, !dbg !3416
  %118 = load i32, i32* @x.63
  %119 = load i32, i32* @y.64
  %120 = sub i32 %118, 1
  %121 = mul i32 %118, %120
  %122 = urem i32 %121, 2
  %123 = icmp eq i32 %122, 0
  %124 = icmp slt i32 %119, 10
  %125 = or i1 %123, %124
  br i1 %125, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %126, !dbg !3417

126:                                              ; preds = %originalBBpart220, %originalBBpart216, %originalBBpart212
  %127 = load i32, i32* @x.63
  %128 = load i32, i32* @y.64
  %129 = sub i32 %127, 1
  %130 = mul i32 %127, %129
  %131 = urem i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %132, %133
  br i1 %134, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %126, %originalBB22alteredBB
  %135 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3418
  %136 = call i32 @fclose(%struct._IO_FILE* %135), !dbg !3419
  store i32 %136, i32* %14, align 4, !dbg !3420
  %137 = load i32, i32* %12, align 4, !dbg !3421
  %138 = icmp ne i32 %137, 0, !dbg !3423
  %139 = load i32, i32* @x.63
  %140 = load i32, i32* @y.64
  %141 = sub i32 %139, 1
  %142 = mul i32 %139, %141
  %143 = urem i32 %142, 2
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %144, %145
  br i1 %146, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %138, label %147, label %166, !dbg !3424

147:                                              ; preds = %originalBBpart224
  %148 = load i32, i32* @x.63
  %149 = load i32, i32* @y.64
  %150 = sub i32 %148, 1
  %151 = mul i32 %148, %150
  %152 = urem i32 %151, 2
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %153, %154
  br i1 %155, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %147, %originalBB26alteredBB
  %156 = load i32, i32* %12, align 4, !dbg !3425
  %157 = call i32* @__errno_location() #14, !dbg !3427
  store i32 %156, i32* %157, align 4, !dbg !3428
  store i32 -1, i32* %14, align 4, !dbg !3429
  %158 = load i32, i32* @x.63
  %159 = load i32, i32* @y.64
  %160 = sub i32 %158, 1
  %161 = mul i32 %158, %160
  %162 = urem i32 %161, 2
  %163 = icmp eq i32 %162, 0
  %164 = icmp slt i32 %159, 10
  %165 = or i1 %163, %164
  br i1 %165, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %166, !dbg !3430

166:                                              ; preds = %originalBBpart228, %originalBBpart224
  %167 = load i32, i32* @x.63
  %168 = load i32, i32* @y.64
  %169 = sub i32 %167, 1
  %170 = mul i32 %167, %169
  %171 = urem i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %172, %173
  br i1 %174, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %166, %originalBB30alteredBB
  %175 = load i32, i32* %14, align 4, !dbg !3431
  store i32 %175, i32* %10, align 4, !dbg !3432
  %176 = load i32, i32* @x.63
  %177 = load i32, i32* @y.64
  %178 = sub i32 %176, 1
  %179 = mul i32 %176, %178
  %180 = urem i32 %179, 2
  %181 = icmp eq i32 %180, 0
  %182 = icmp slt i32 %177, 10
  %183 = or i1 %181, %182
  br i1 %183, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %184, !dbg !3432

184:                                              ; preds = %originalBBpart232, %originalBBpart24
  %185 = load i32, i32* @x.63
  %186 = load i32, i32* @y.64
  %187 = sub i32 %185, 1
  %188 = mul i32 %185, %187
  %189 = urem i32 %188, 2
  %190 = icmp eq i32 %189, 0
  %191 = icmp slt i32 %186, 10
  %192 = or i1 %190, %191
  br i1 %192, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %184, %originalBB34alteredBB
  %193 = load i32, i32* %10, align 4, !dbg !3433
  %194 = load i32, i32* @x.63
  %195 = load i32, i32* @y.64
  %196 = sub i32 %194, 1
  %197 = mul i32 %194, %196
  %198 = urem i32 %197, 2
  %199 = icmp eq i32 %198, 0
  %200 = icmp slt i32 %195, 10
  %201 = or i1 %199, %200
  br i1 %201, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  ret i32 %193, !dbg !3433

originalBBalteredBB:                              ; preds = %originalBB, %1
  %202 = alloca i32, align 4
  %203 = alloca %struct._IO_FILE*, align 8
  %204 = alloca i32, align 4
  %205 = alloca i32, align 4
  %206 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %203, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %203, metadata !3434, metadata !DIExpression()), !dbg !3387
  call void @llvm.dbg.declare(metadata i32* %204, metadata !3473, metadata !DIExpression()), !dbg !3389
  store i32 0, i32* %204, align 4, !dbg !3389
  call void @llvm.dbg.declare(metadata i32* %205, metadata !3474, metadata !DIExpression()), !dbg !3391
  call void @llvm.dbg.declare(metadata i32* %206, metadata !3475, metadata !DIExpression()), !dbg !3393
  store i32 0, i32* %206, align 4, !dbg !3393
  %207 = load %struct._IO_FILE*, %struct._IO_FILE** %203, align 8, !dbg !3394
  %208 = call i32 @fileno(%struct._IO_FILE* %207) #10, !dbg !3395
  store i32 %208, i32* %205, align 4, !dbg !3396
  %209 = load i32, i32* %205, align 4, !dbg !3397
  %210 = icmp slt i32 %209, 0, !dbg !3399
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %27
  %211 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3401
  %212 = call i32 @fclose(%struct._IO_FILE* %211), !dbg !3402
  store i32 %212, i32* %10, align 4, !dbg !3403
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %46
  %213 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3404
  %214 = call i32 @__freading(%struct._IO_FILE* %213) #10, !dbg !3404
  %215 = icmp ne i32 %214, 0, !dbg !3404
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %66
  %216 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3407
  %217 = call i32 @fileno(%struct._IO_FILE* %216) #10, !dbg !3408
  %218 = call i64 @lseek(i32 %217, i64 0, i32 1) #10, !dbg !3409
  %219 = icmp ne i64 %218, -1, !dbg !3410
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %87
  %220 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3412
  %221 = call i32 @rpl_fflush(%struct._IO_FILE* %220), !dbg !3413
  %222 = icmp ne i32 %221, 0, !dbg !3413
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %107
  %223 = call i32* @__errno_location() #14, !dbg !3415
  %224 = load i32, i32* %223, align 4, !dbg !3415
  store i32 %224, i32* %12, align 4, !dbg !3416
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %126
  %225 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3418
  %226 = call i32 @fclose(%struct._IO_FILE* %225), !dbg !3419
  store i32 %226, i32* %14, align 4, !dbg !3420
  %227 = load i32, i32* %12, align 4, !dbg !3421
  %228 = icmp ne i32 %227, 0, !dbg !3423
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %147
  %229 = load i32, i32* %12, align 4, !dbg !3425
  %230 = call i32* @__errno_location() #14, !dbg !3427
  store i32 %229, i32* %230, align 4, !dbg !3428
  store i32 -1, i32* %14, align 4, !dbg !3429
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %166
  %231 = load i32, i32* %14, align 4, !dbg !3431
  store i32 %231, i32* %10, align 4, !dbg !3432
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %184
  %232 = load i32, i32* %10, align 4, !dbg !3433
  br label %originalBB34
}

; Function Attrs: nounwind
declare dso_local i32 @fileno(%struct._IO_FILE*) #2

declare dso_local i32 @fclose(%struct._IO_FILE*) #3

; Function Attrs: nounwind
declare dso_local i32 @__freading(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare dso_local i64 @lseek(i32, i64, i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fflush(%struct._IO_FILE*) #4 !dbg !3476 {
  %2 = load i32, i32* @x.65
  %3 = load i32, i32* @y.66
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %11, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %11, metadata !3514, metadata !DIExpression()), !dbg !3515
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3516
  %13 = icmp eq %struct._IO_FILE* %12, null, !dbg !3518
  %14 = load i32, i32* @x.65
  %15 = load i32, i32* @y.66
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %13, label %42, label %22, !dbg !3519

22:                                               ; preds = %originalBBpart2
  %23 = load i32, i32* @x.65
  %24 = load i32, i32* @y.66
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %22, %originalBB1alteredBB
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3520
  %32 = call i32 @__freading(%struct._IO_FILE* %31) #10, !dbg !3520
  %33 = icmp ne i32 %32, 0, !dbg !3520
  %34 = load i32, i32* @x.65
  %35 = load i32, i32* @y.66
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %33, label %61, label %42, !dbg !3521

42:                                               ; preds = %originalBBpart24, %originalBBpart2
  %43 = load i32, i32* @x.65
  %44 = load i32, i32* @y.66
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %42, %originalBB6alteredBB
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3522
  %52 = call i32 @fflush(%struct._IO_FILE* %51), !dbg !3523
  store i32 %52, i32* %10, align 4, !dbg !3524
  %53 = load i32, i32* @x.65
  %54 = load i32, i32* @y.66
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %81, !dbg !3524

61:                                               ; preds = %originalBBpart24
  %62 = load i32, i32* @x.65
  %63 = load i32, i32* @y.66
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %61, %originalBB10alteredBB
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3525
  call void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE* %70), !dbg !3526
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3527
  %72 = call i32 @fflush(%struct._IO_FILE* %71), !dbg !3528
  store i32 %72, i32* %10, align 4, !dbg !3529
  %73 = load i32, i32* @x.65
  %74 = load i32, i32* @y.66
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %81, !dbg !3529

81:                                               ; preds = %originalBBpart212, %originalBBpart28
  %82 = load i32, i32* @x.65
  %83 = load i32, i32* @y.66
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %81, %originalBB14alteredBB
  %90 = load i32, i32* %10, align 4, !dbg !3530
  %91 = load i32, i32* @x.65
  %92 = load i32, i32* @y.66
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  ret i32 %90, !dbg !3530

originalBBalteredBB:                              ; preds = %originalBB, %1
  %99 = alloca i32, align 4
  %100 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %100, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %100, metadata !3531, metadata !DIExpression()), !dbg !3515
  %101 = load %struct._IO_FILE*, %struct._IO_FILE** %100, align 8, !dbg !3516
  %102 = icmp eq %struct._IO_FILE* %101, null, !dbg !3518
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %22
  %103 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3520
  %104 = call i32 @__freading(%struct._IO_FILE* %103) #10, !dbg !3520
  %105 = icmp ne i32 %104, 0, !dbg !3520
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %42
  %106 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3522
  %107 = call i32 @fflush(%struct._IO_FILE* %106), !dbg !3523
  store i32 %107, i32* %10, align 4, !dbg !3524
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %61
  %108 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3525
  call void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE* %108), !dbg !3526
  %109 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3527
  %110 = call i32 @fflush(%struct._IO_FILE* %109), !dbg !3528
  store i32 %110, i32* %10, align 4, !dbg !3529
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %81
  %111 = load i32, i32* %10, align 4, !dbg !3530
  br label %originalBB14
}

declare dso_local i32 @fflush(%struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE*) #4 !dbg !3570 {
  %2 = load i32, i32* @x.67
  %3 = load i32, i32* @y.68
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %10, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %10, metadata !3573, metadata !DIExpression()), !dbg !3574
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %10, align 8, !dbg !3575
  %12 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %11, i32 0, i32 0, !dbg !3577
  %13 = load i32, i32* %12, align 8, !dbg !3577
  %14 = and i32 %13, 256, !dbg !3578
  %15 = icmp ne i32 %14, 0, !dbg !3578
  %16 = load i32, i32* @x.67
  %17 = load i32, i32* @y.68
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %24, label %43, !dbg !3579

24:                                               ; preds = %originalBBpart2
  %25 = load i32, i32* @x.67
  %26 = load i32, i32* @y.68
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB8, label %originalBB8alteredBB

originalBB8:                                      ; preds = %24, %originalBB8alteredBB
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** %10, align 8, !dbg !3580
  %34 = call i32 @rpl_fseeko(%struct._IO_FILE* %33, i64 0, i32 1), !dbg !3581
  %35 = load i32, i32* @x.67
  %36 = load i32, i32* @y.68
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart210, label %originalBB8alteredBB

originalBBpart210:                                ; preds = %originalBB8
  br label %43, !dbg !3581

43:                                               ; preds = %originalBBpart210, %originalBBpart2
  %44 = load i32, i32* @x.67
  %45 = load i32, i32* @y.68
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB12, label %originalBB12alteredBB

originalBB12:                                     ; preds = %43, %originalBB12alteredBB
  %52 = load i32, i32* @x.67
  %53 = load i32, i32* @y.68
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart214, label %originalBB12alteredBB

originalBBpart214:                                ; preds = %originalBB12
  ret void, !dbg !3582

originalBBalteredBB:                              ; preds = %originalBB, %1
  %60 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %60, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %60, metadata !3583, metadata !DIExpression()), !dbg !3574
  %61 = load %struct._IO_FILE*, %struct._IO_FILE** %60, align 8, !dbg !3575
  %62 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %61, i32 0, i32 0, !dbg !3577
  %63 = load i32, i32* %62, align 8, !dbg !3577
  %_ = shl i32 %63, 256
  %_1 = shl i32 %63, 256
  %_2 = sub i32 %63, 256
  %gen = mul i32 %_2, 256
  %_3 = sub i32 %63, 256
  %gen4 = mul i32 %_3, 256
  %_5 = shl i32 %63, 256
  %_6 = sub i32 %63, 256
  %gen7 = mul i32 %_6, 256
  %64 = and i32 %63, 256, !dbg !3578
  %65 = icmp ne i32 %64, 0, !dbg !3578
  br label %originalBB

originalBB8alteredBB:                             ; preds = %originalBB8, %24
  %66 = load %struct._IO_FILE*, %struct._IO_FILE** %10, align 8, !dbg !3580
  %67 = call i32 @rpl_fseeko(%struct._IO_FILE* %66, i64 0, i32 1), !dbg !3581
  br label %originalBB8

originalBB12alteredBB:                            ; preds = %originalBB12, %43
  br label %originalBB12
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fseeko(%struct._IO_FILE* nonnull, i64, i32) #4 !dbg !3622 {
  %4 = load i32, i32* @x.69
  %5 = load i32, i32* @y.70
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca %struct._IO_FILE*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i32, align 4
  %16 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %13, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %13, metadata !3661, metadata !DIExpression()), !dbg !3662
  store i64 %1, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !3663, metadata !DIExpression()), !dbg !3664
  store i32 %2, i32* %15, align 4
  call void @llvm.dbg.declare(metadata i32* %15, metadata !3665, metadata !DIExpression()), !dbg !3666
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3667
  %18 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %17, i32 0, i32 2, !dbg !3669
  %19 = load i8*, i8** %18, align 8, !dbg !3669
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3670
  %21 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %20, i32 0, i32 1, !dbg !3671
  %22 = load i8*, i8** %21, align 8, !dbg !3671
  %23 = icmp eq i8* %19, %22, !dbg !3672
  %24 = load i32, i32* @x.69
  %25 = load i32, i32* @y.70
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %23, label %32, label %142, !dbg !3673

32:                                               ; preds = %originalBBpart2
  %33 = load i32, i32* @x.69
  %34 = load i32, i32* @y.70
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %32, %originalBB1alteredBB
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3674
  %42 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %41, i32 0, i32 5, !dbg !3675
  %43 = load i8*, i8** %42, align 8, !dbg !3675
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3676
  %45 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %44, i32 0, i32 4, !dbg !3677
  %46 = load i8*, i8** %45, align 8, !dbg !3677
  %47 = icmp eq i8* %43, %46, !dbg !3678
  %48 = load i32, i32* @x.69
  %49 = load i32, i32* @y.70
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %47, label %56, label %142, !dbg !3679

56:                                               ; preds = %originalBBpart24
  %57 = load i32, i32* @x.69
  %58 = load i32, i32* @y.70
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %56, %originalBB6alteredBB
  %65 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3680
  %66 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %65, i32 0, i32 9, !dbg !3681
  %67 = load i8*, i8** %66, align 8, !dbg !3681
  %68 = icmp eq i8* %67, null, !dbg !3682
  %69 = load i32, i32* @x.69
  %70 = load i32, i32* @y.70
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %68, label %77, label %142, !dbg !3683

77:                                               ; preds = %originalBBpart28
  call void @llvm.dbg.declare(metadata i64* %16, metadata !3684, metadata !DIExpression()), !dbg !3686
  %78 = load i32, i32* @x.69
  %79 = load i32, i32* @y.70
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %77, %originalBB10alteredBB
  %86 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3687
  %87 = call i32 @fileno(%struct._IO_FILE* %86) #10, !dbg !3688
  %88 = load i64, i64* %14, align 8, !dbg !3689
  %89 = load i32, i32* %15, align 4, !dbg !3690
  %90 = call i64 @lseek(i32 %87, i64 %88, i32 %89) #10, !dbg !3691
  store i64 %90, i64* %16, align 8, !dbg !3686
  %91 = load i64, i64* %16, align 8, !dbg !3692
  %92 = icmp eq i64 %91, -1, !dbg !3694
  %93 = load i32, i32* @x.69
  %94 = load i32, i32* @y.70
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %92, label %101, label %118, !dbg !3695

101:                                              ; preds = %originalBBpart212
  %102 = load i32, i32* @x.69
  %103 = load i32, i32* @y.70
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %101, %originalBB14alteredBB
  store i32 -1, i32* %12, align 4, !dbg !3696
  %110 = load i32, i32* @x.69
  %111 = load i32, i32* @y.70
  %112 = sub i32 %110, 1
  %113 = mul i32 %110, %112
  %114 = urem i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %115, %116
  br i1 %117, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %163, !dbg !3696

118:                                              ; preds = %originalBBpart212
  %119 = load i32, i32* @x.69
  %120 = load i32, i32* @y.70
  %121 = sub i32 %119, 1
  %122 = mul i32 %119, %121
  %123 = urem i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %124, %125
  br i1 %126, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %118, %originalBB18alteredBB
  %127 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3698
  %128 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %127, i32 0, i32 0, !dbg !3699
  %129 = load i32, i32* %128, align 8, !dbg !3700
  %130 = and i32 %129, -17, !dbg !3700
  store i32 %130, i32* %128, align 8, !dbg !3700
  %131 = load i64, i64* %16, align 8, !dbg !3701
  %132 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3702
  %133 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %132, i32 0, i32 21, !dbg !3703
  store i64 %131, i64* %133, align 8, !dbg !3704
  store i32 0, i32* %12, align 4, !dbg !3705
  %134 = load i32, i32* @x.69
  %135 = load i32, i32* @y.70
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBBpart227, label %originalBB18alteredBB

originalBBpart227:                                ; preds = %originalBB18
  br label %163, !dbg !3705

142:                                              ; preds = %originalBBpart28, %originalBBpart24, %originalBBpart2
  %143 = load i32, i32* @x.69
  %144 = load i32, i32* @y.70
  %145 = sub i32 %143, 1
  %146 = mul i32 %143, %145
  %147 = urem i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %148, %149
  br i1 %150, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %142, %originalBB29alteredBB
  %151 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3706
  %152 = load i64, i64* %14, align 8, !dbg !3707
  %153 = load i32, i32* %15, align 4, !dbg !3708
  %154 = call i32 @fseeko(%struct._IO_FILE* %151, i64 %152, i32 %153), !dbg !3709
  store i32 %154, i32* %12, align 4, !dbg !3710
  %155 = load i32, i32* @x.69
  %156 = load i32, i32* @y.70
  %157 = sub i32 %155, 1
  %158 = mul i32 %155, %157
  %159 = urem i32 %158, 2
  %160 = icmp eq i32 %159, 0
  %161 = icmp slt i32 %156, 10
  %162 = or i1 %160, %161
  br i1 %162, label %originalBBpart231, label %originalBB29alteredBB

originalBBpart231:                                ; preds = %originalBB29
  br label %163, !dbg !3710

163:                                              ; preds = %originalBBpart231, %originalBBpart227, %originalBBpart216
  %164 = load i32, i32* @x.69
  %165 = load i32, i32* @y.70
  %166 = sub i32 %164, 1
  %167 = mul i32 %164, %166
  %168 = urem i32 %167, 2
  %169 = icmp eq i32 %168, 0
  %170 = icmp slt i32 %165, 10
  %171 = or i1 %169, %170
  br i1 %171, label %originalBB33, label %originalBB33alteredBB

originalBB33:                                     ; preds = %163, %originalBB33alteredBB
  %172 = load i32, i32* %12, align 4, !dbg !3711
  %173 = load i32, i32* @x.69
  %174 = load i32, i32* @y.70
  %175 = sub i32 %173, 1
  %176 = mul i32 %173, %175
  %177 = urem i32 %176, 2
  %178 = icmp eq i32 %177, 0
  %179 = icmp slt i32 %174, 10
  %180 = or i1 %178, %179
  br i1 %180, label %originalBBpart235, label %originalBB33alteredBB

originalBBpart235:                                ; preds = %originalBB33
  ret i32 %172, !dbg !3711

originalBBalteredBB:                              ; preds = %originalBB, %3
  %181 = alloca i32, align 4
  %182 = alloca %struct._IO_FILE*, align 8
  %183 = alloca i64, align 8
  %184 = alloca i32, align 4
  %185 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %182, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %182, metadata !3712, metadata !DIExpression()), !dbg !3662
  store i64 %1, i64* %183, align 8
  call void @llvm.dbg.declare(metadata i64* %183, metadata !3751, metadata !DIExpression()), !dbg !3664
  store i32 %2, i32* %184, align 4
  call void @llvm.dbg.declare(metadata i32* %184, metadata !3752, metadata !DIExpression()), !dbg !3666
  %186 = load %struct._IO_FILE*, %struct._IO_FILE** %182, align 8, !dbg !3667
  %187 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %186, i32 0, i32 2, !dbg !3669
  %188 = load i8*, i8** %187, align 8, !dbg !3669
  %189 = load %struct._IO_FILE*, %struct._IO_FILE** %182, align 8, !dbg !3670
  %190 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %189, i32 0, i32 1, !dbg !3671
  %191 = load i8*, i8** %190, align 8, !dbg !3671
  %192 = icmp eq i8* %188, %191, !dbg !3672
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %32
  %193 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3674
  %194 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %193, i32 0, i32 5, !dbg !3675
  %195 = load i8*, i8** %194, align 8, !dbg !3675
  %196 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3676
  %197 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %196, i32 0, i32 4, !dbg !3677
  %198 = load i8*, i8** %197, align 8, !dbg !3677
  %199 = icmp eq i8* %195, %198, !dbg !3678
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %56
  %200 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3680
  %201 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %200, i32 0, i32 9, !dbg !3681
  %202 = load i8*, i8** %201, align 8, !dbg !3681
  %203 = icmp eq i8* %202, null, !dbg !3682
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %77
  %204 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3687
  %205 = call i32 @fileno(%struct._IO_FILE* %204) #10, !dbg !3688
  %206 = load i64, i64* %14, align 8, !dbg !3689
  %207 = load i32, i32* %15, align 4, !dbg !3690
  %208 = call i64 @lseek(i32 %205, i64 %206, i32 %207) #10, !dbg !3691
  store i64 %208, i64* %16, align 8, !dbg !3686
  %209 = load i64, i64* %16, align 8, !dbg !3692
  %210 = icmp eq i64 %209, -1, !dbg !3694
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %101
  store i32 -1, i32* %12, align 4, !dbg !3696
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %118
  %211 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3698
  %212 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %211, i32 0, i32 0, !dbg !3699
  %213 = load i32, i32* %212, align 8, !dbg !3700
  %_ = shl i32 %213, -17
  %_19 = sub i32 0, %213
  %gen = add i32 %_19, -17
  %_20 = sub i32 %213, -17
  %gen21 = mul i32 %_20, -17
  %_22 = shl i32 %213, -17
  %_23 = sub i32 0, %213
  %gen24 = add i32 %_23, -17
  %214 = and i32 %213, -17, !dbg !3700
  store i32 %214, i32* %212, align 8, !dbg !3700
  %215 = load i64, i64* %16, align 8, !dbg !3701
  %216 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3702
  %217 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %216, i32 0, i32 21, !dbg !3703
  store i64 %215, i64* %217, align 8, !dbg !3704
  store i32 0, i32* %12, align 4, !dbg !3705
  br label %originalBB18

originalBB29alteredBB:                            ; preds = %originalBB29, %142
  %218 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3706
  %219 = load i64, i64* %14, align 8, !dbg !3707
  %220 = load i32, i32* %15, align 4, !dbg !3708
  %221 = call i32 @fseeko(%struct._IO_FILE* %218, i64 %219, i32 %220), !dbg !3709
  store i32 %221, i32* %12, align 4, !dbg !3710
  br label %originalBB29

originalBB33alteredBB:                            ; preds = %originalBB33, %163
  %222 = load i32, i32* %12, align 4, !dbg !3711
  br label %originalBB33
}

declare dso_local i32 @fseeko(%struct._IO_FILE*, i64, i32) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @c_tolower(i32) #4 !dbg !3753 {
  %2 = load i32, i32* @x.71
  %3 = load i32, i32* @y.72
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !3757, metadata !DIExpression()), !dbg !3758
  %12 = load i32, i32* %11, align 4, !dbg !3759
  %13 = load i32, i32* @x.71
  %14 = load i32, i32* @y.72
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  switch i32 %12, label %41 [
    i32 65, label %21
    i32 66, label %21
    i32 67, label %21
    i32 68, label %21
    i32 69, label %21
    i32 70, label %21
    i32 71, label %21
    i32 72, label %21
    i32 73, label %21
    i32 74, label %21
    i32 75, label %21
    i32 76, label %21
    i32 77, label %21
    i32 78, label %21
    i32 79, label %21
    i32 80, label %21
    i32 81, label %21
    i32 82, label %21
    i32 83, label %21
    i32 84, label %21
    i32 85, label %21
    i32 86, label %21
    i32 87, label %21
    i32 88, label %21
    i32 89, label %21
    i32 90, label %21
  ], !dbg !3760

21:                                               ; preds = %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2
  %22 = load i32, i32* @x.71
  %23 = load i32, i32* @y.72
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  %30 = load i32, i32* %11, align 4, !dbg !3761
  %31 = sub nsw i32 %30, 65, !dbg !3763
  %32 = add nsw i32 %31, 97, !dbg !3764
  store i32 %32, i32* %10, align 4, !dbg !3765
  %33 = load i32, i32* @x.71
  %34 = load i32, i32* @y.72
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBBpart217, label %originalBB1alteredBB

originalBBpart217:                                ; preds = %originalBB1
  br label %59, !dbg !3765

41:                                               ; preds = %originalBBpart2
  %42 = load i32, i32* @x.71
  %43 = load i32, i32* @y.72
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBB19, label %originalBB19alteredBB

originalBB19:                                     ; preds = %41, %originalBB19alteredBB
  %50 = load i32, i32* %11, align 4, !dbg !3766
  store i32 %50, i32* %10, align 4, !dbg !3767
  %51 = load i32, i32* @x.71
  %52 = load i32, i32* @y.72
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart221, label %originalBB19alteredBB

originalBBpart221:                                ; preds = %originalBB19
  br label %59, !dbg !3767

59:                                               ; preds = %originalBBpart221, %originalBBpart217
  %60 = load i32, i32* @x.71
  %61 = load i32, i32* @y.72
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBB23, label %originalBB23alteredBB

originalBB23:                                     ; preds = %59, %originalBB23alteredBB
  %68 = load i32, i32* %10, align 4, !dbg !3768
  %69 = load i32, i32* @x.71
  %70 = load i32, i32* @y.72
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBBpart225, label %originalBB23alteredBB

originalBBpart225:                                ; preds = %originalBB23
  ret i32 %68, !dbg !3768

originalBBalteredBB:                              ; preds = %originalBB, %1
  %77 = alloca i32, align 4
  %78 = alloca i32, align 4
  store i32 %0, i32* %78, align 4
  call void @llvm.dbg.declare(metadata i32* %78, metadata !3769, metadata !DIExpression()), !dbg !3758
  %79 = load i32, i32* %78, align 4, !dbg !3759
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  %80 = load i32, i32* %11, align 4, !dbg !3761
  %_ = sub i32 0, %80
  %gen = add i32 %_, 65
  %_2 = sub i32 %80, 65
  %gen3 = mul i32 %_2, 65
  %_4 = sub i32 0, %80
  %gen5 = add i32 %_4, 65
  %_6 = sub i32 0, %80
  %gen7 = add i32 %_6, 65
  %_8 = sub i32 0, %80
  %gen9 = add i32 %_8, 65
  %81 = sub nsw i32 %80, 65, !dbg !3763
  %_10 = shl i32 %81, 97
  %_11 = shl i32 %81, 97
  %_12 = sub i32 0, %81
  %gen13 = add i32 %_12, 97
  %_14 = sub i32 0, %81
  %gen15 = add i32 %_14, 97
  %82 = add nsw i32 %81, 97, !dbg !3764
  store i32 %82, i32* %10, align 4, !dbg !3765
  br label %originalBB1

originalBB19alteredBB:                            ; preds = %originalBB19, %41
  %83 = load i32, i32* %11, align 4, !dbg !3766
  store i32 %83, i32* %10, align 4, !dbg !3767
  br label %originalBB19

originalBB23alteredBB:                            ; preds = %originalBB23, %59
  %84 = load i32, i32* %10, align 4, !dbg !3768
  br label %originalBB23
}

define private i32 @controle(i8*, i32) {
  %3 = load i32, i32* @x.73
  %4 = load i32, i32* @y.74
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = load i32, i32* @inVal0
  %12 = icmp sgt i32 %11, 0
  %13 = load i32, i32* @x.73
  %14 = load i32, i32* @y.74
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %41, label %21

21:                                               ; preds = %originalBBpart2
  %22 = load i32, i32* @x.73
  %23 = load i32, i32* @y.74
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  call void @srand(i32 %1)
  %30 = call i32 @rand()
  %31 = srem i32 %30, 50000
  %32 = add i32 %31, 2
  %33 = load i32, i32* @x.73
  %34 = load i32, i32* @y.74
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBBpart28, label %originalBB1alteredBB

originalBBpart28:                                 ; preds = %originalBB1
  ret i32 %32

41:                                               ; preds = %originalBBpart2
  %42 = load i32, i32* @x.73
  %43 = load i32, i32* @y.74
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %41, %originalBB10alteredBB
  %50 = getelementptr inbounds [3 x i8], [3 x i8]* @.compVal2, i32 0, i32 0
  %51 = call i32 @strcmp(i8* %50, i8* %0)
  %52 = icmp eq i32 %51, 0
  %53 = load i32, i32* @x.73
  %54 = load i32, i32* @y.74
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %52, label %61, label %96

61:                                               ; preds = %originalBBpart212
  %62 = load i32, i32* @x.73
  %63 = load i32, i32* @y.74
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %61, %originalBB14alteredBB
  %70 = icmp eq i32 %1, -1
  %71 = load i32, i32* @x.73
  %72 = load i32, i32* @y.74
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %70, label %79, label %96

79:                                               ; preds = %originalBBpart216
  %80 = load i32, i32* @x.73
  %81 = load i32, i32* @y.74
  %82 = sub i32 %80, 1
  %83 = mul i32 %80, %82
  %84 = urem i32 %83, 2
  %85 = icmp eq i32 %84, 0
  %86 = icmp slt i32 %81, 10
  %87 = or i1 %85, %86
  br i1 %87, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %79, %originalBB18alteredBB
  %88 = load i32, i32* @x.73
  %89 = load i32, i32* @y.74
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  ret i32 5

96:                                               ; preds = %originalBBpart216, %originalBBpart212
  %97 = load i32, i32* @x.73
  %98 = load i32, i32* @y.74
  %99 = sub i32 %97, 1
  %100 = mul i32 %97, %99
  %101 = urem i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %102, %103
  br i1 %104, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %96, %originalBB22alteredBB
  %105 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal1, i32 0, i32 0
  %106 = call i32 @strcmp(i8* %105, i8* %0)
  %107 = icmp eq i32 %106, 0
  %108 = load i32, i32* @x.73
  %109 = load i32, i32* @y.74
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %107, label %116, label %151

116:                                              ; preds = %originalBBpart224
  %117 = load i32, i32* @x.73
  %118 = load i32, i32* @y.74
  %119 = sub i32 %117, 1
  %120 = mul i32 %117, %119
  %121 = urem i32 %120, 2
  %122 = icmp eq i32 %121, 0
  %123 = icmp slt i32 %118, 10
  %124 = or i1 %122, %123
  br i1 %124, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %116, %originalBB26alteredBB
  %125 = icmp eq i32 %1, -1
  %126 = load i32, i32* @x.73
  %127 = load i32, i32* @y.74
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br i1 %125, label %134, label %151

134:                                              ; preds = %originalBBpart228
  %135 = load i32, i32* @x.73
  %136 = load i32, i32* @y.74
  %137 = sub i32 %135, 1
  %138 = mul i32 %135, %137
  %139 = urem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %140, %141
  br i1 %142, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %134, %originalBB30alteredBB
  %143 = load i32, i32* @x.73
  %144 = load i32, i32* @y.74
  %145 = sub i32 %143, 1
  %146 = mul i32 %143, %145
  %147 = urem i32 %146, 2
  %148 = icmp eq i32 %147, 0
  %149 = icmp slt i32 %144, 10
  %150 = or i1 %148, %149
  br i1 %150, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  ret i32 3

151:                                              ; preds = %originalBBpart228, %originalBBpart224
  %152 = load i32, i32* @x.73
  %153 = load i32, i32* @y.74
  %154 = sub i32 %152, 1
  %155 = mul i32 %152, %154
  %156 = urem i32 %155, 2
  %157 = icmp eq i32 %156, 0
  %158 = icmp slt i32 %153, 10
  %159 = or i1 %157, %158
  br i1 %159, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %151, %originalBB34alteredBB
  %160 = getelementptr inbounds [3 x i8], [3 x i8]* @.compVal0, i32 0, i32 0
  %161 = call i32 @strcmp(i8* %160, i8* %0)
  %162 = icmp eq i32 %161, 0
  %163 = load i32, i32* @x.73
  %164 = load i32, i32* @y.74
  %165 = sub i32 %163, 1
  %166 = mul i32 %163, %165
  %167 = urem i32 %166, 2
  %168 = icmp eq i32 %167, 0
  %169 = icmp slt i32 %164, 10
  %170 = or i1 %168, %169
  br i1 %170, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br i1 %162, label %171, label %206

171:                                              ; preds = %originalBBpart236
  %172 = load i32, i32* @x.73
  %173 = load i32, i32* @y.74
  %174 = sub i32 %172, 1
  %175 = mul i32 %172, %174
  %176 = urem i32 %175, 2
  %177 = icmp eq i32 %176, 0
  %178 = icmp slt i32 %173, 10
  %179 = or i1 %177, %178
  br i1 %179, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %171, %originalBB38alteredBB
  %180 = icmp eq i32 %1, -1
  %181 = load i32, i32* @x.73
  %182 = load i32, i32* @y.74
  %183 = sub i32 %181, 1
  %184 = mul i32 %181, %183
  %185 = urem i32 %184, 2
  %186 = icmp eq i32 %185, 0
  %187 = icmp slt i32 %182, 10
  %188 = or i1 %186, %187
  br i1 %188, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br i1 %180, label %189, label %206

189:                                              ; preds = %originalBBpart240
  %190 = load i32, i32* @x.73
  %191 = load i32, i32* @y.74
  %192 = sub i32 %190, 1
  %193 = mul i32 %190, %192
  %194 = urem i32 %193, 2
  %195 = icmp eq i32 %194, 0
  %196 = icmp slt i32 %191, 10
  %197 = or i1 %195, %196
  br i1 %197, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %189, %originalBB42alteredBB
  %198 = load i32, i32* @x.73
  %199 = load i32, i32* @y.74
  %200 = sub i32 %198, 1
  %201 = mul i32 %198, %200
  %202 = urem i32 %201, 2
  %203 = icmp eq i32 %202, 0
  %204 = icmp slt i32 %199, 10
  %205 = or i1 %203, %204
  br i1 %205, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  ret i32 3

206:                                              ; preds = %originalBBpart240, %originalBBpart236
  %207 = load i32, i32* @x.73
  %208 = load i32, i32* @y.74
  %209 = sub i32 %207, 1
  %210 = mul i32 %207, %209
  %211 = urem i32 %210, 2
  %212 = icmp eq i32 %211, 0
  %213 = icmp slt i32 %208, 10
  %214 = or i1 %212, %213
  br i1 %214, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %206, %originalBB46alteredBB
  %215 = getelementptr inbounds [3 x i8], [3 x i8]* @.compVal0, i32 0, i32 0
  %216 = call i32 @strcmp(i8* %215, i8* %0)
  %217 = icmp eq i32 %216, 0
  %218 = load i32, i32* @x.73
  %219 = load i32, i32* @y.74
  %220 = sub i32 %218, 1
  %221 = mul i32 %218, %220
  %222 = urem i32 %221, 2
  %223 = icmp eq i32 %222, 0
  %224 = icmp slt i32 %219, 10
  %225 = or i1 %223, %224
  br i1 %225, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br i1 %217, label %226, label %261

226:                                              ; preds = %originalBBpart248
  %227 = load i32, i32* @x.73
  %228 = load i32, i32* @y.74
  %229 = sub i32 %227, 1
  %230 = mul i32 %227, %229
  %231 = urem i32 %230, 2
  %232 = icmp eq i32 %231, 0
  %233 = icmp slt i32 %228, 10
  %234 = or i1 %232, %233
  br i1 %234, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %226, %originalBB50alteredBB
  %235 = icmp eq i32 %1, 0
  %236 = load i32, i32* @x.73
  %237 = load i32, i32* @y.74
  %238 = sub i32 %236, 1
  %239 = mul i32 %236, %238
  %240 = urem i32 %239, 2
  %241 = icmp eq i32 %240, 0
  %242 = icmp slt i32 %237, 10
  %243 = or i1 %241, %242
  br i1 %243, label %originalBBpart252, label %originalBB50alteredBB

originalBBpart252:                                ; preds = %originalBB50
  br i1 %235, label %244, label %261

244:                                              ; preds = %originalBBpart252
  %245 = load i32, i32* @x.73
  %246 = load i32, i32* @y.74
  %247 = sub i32 %245, 1
  %248 = mul i32 %245, %247
  %249 = urem i32 %248, 2
  %250 = icmp eq i32 %249, 0
  %251 = icmp slt i32 %246, 10
  %252 = or i1 %250, %251
  br i1 %252, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %244, %originalBB54alteredBB
  %253 = load i32, i32* @x.73
  %254 = load i32, i32* @y.74
  %255 = sub i32 %253, 1
  %256 = mul i32 %253, %255
  %257 = urem i32 %256, 2
  %258 = icmp eq i32 %257, 0
  %259 = icmp slt i32 %254, 10
  %260 = or i1 %258, %259
  br i1 %260, label %originalBBpart256, label %originalBB54alteredBB

originalBBpart256:                                ; preds = %originalBB54
  ret i32 5

261:                                              ; preds = %originalBBpart252, %originalBBpart248
  %262 = load i32, i32* @x.73
  %263 = load i32, i32* @y.74
  %264 = sub i32 %262, 1
  %265 = mul i32 %262, %264
  %266 = urem i32 %265, 2
  %267 = icmp eq i32 %266, 0
  %268 = icmp slt i32 %263, 10
  %269 = or i1 %267, %268
  br i1 %269, label %originalBB58, label %originalBB58alteredBB

originalBB58:                                     ; preds = %261, %originalBB58alteredBB
  call void @srand(i32 %1)
  %270 = call i32 @rand()
  %271 = srem i32 %270, 50000
  %272 = add i32 %271, 2
  %273 = load i32, i32* @x.73
  %274 = load i32, i32* @y.74
  %275 = sub i32 %273, 1
  %276 = mul i32 %273, %275
  %277 = urem i32 %276, 2
  %278 = icmp eq i32 %277, 0
  %279 = icmp slt i32 %274, 10
  %280 = or i1 %278, %279
  br i1 %280, label %originalBBpart272, label %originalBB58alteredBB

originalBBpart272:                                ; preds = %originalBB58
  ret i32 %272

originalBBalteredBB:                              ; preds = %originalBB, %2
  %281 = load i32, i32* @inVal0
  %282 = icmp sgt i32 %281, 0
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  call void @srand(i32 %1)
  %283 = call i32 @rand()
  %_ = sub i32 0, %283
  %gen = add i32 %_, 50000
  %284 = srem i32 %283, 50000
  %_2 = shl i32 %284, 2
  %_3 = sub i32 0, %284
  %gen4 = add i32 %_3, 2
  %_5 = shl i32 %284, 2
  %_6 = shl i32 %284, 2
  %285 = add i32 %284, 2
  br label %originalBB1

originalBB10alteredBB:                            ; preds = %originalBB10, %41
  %286 = getelementptr inbounds [3 x i8], [3 x i8]* @.compVal2, i32 0, i32 0
  %287 = call i32 @strcmp(i8* %286, i8* %0)
  %288 = icmp eq i32 %287, 0
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %61
  %289 = icmp eq i32 %1, -1
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %79
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %96
  %290 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal1, i32 0, i32 0
  %291 = call i32 @strcmp(i8* %290, i8* %0)
  %292 = icmp eq i32 %291, 0
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %116
  %293 = icmp eq i32 %1, -1
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %134
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %151
  %294 = getelementptr inbounds [3 x i8], [3 x i8]* @.compVal0, i32 0, i32 0
  %295 = call i32 @strcmp(i8* %294, i8* %0)
  %296 = icmp eq i32 %295, 0
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %171
  %297 = icmp eq i32 %1, -1
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %189
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %206
  %298 = getelementptr inbounds [3 x i8], [3 x i8]* @.compVal0, i32 0, i32 0
  %299 = call i32 @strcmp(i8* %298, i8* %0)
  %300 = icmp eq i32 %299, 0
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %226
  %301 = icmp eq i32 %1, 0
  br label %originalBB50

originalBB54alteredBB:                            ; preds = %originalBB54, %244
  br label %originalBB54

originalBB58alteredBB:                            ; preds = %originalBB58, %261
  call void @srand(i32 %1)
  %302 = call i32 @rand()
  %_59 = shl i32 %302, 50000
  %_60 = shl i32 %302, 50000
  %_61 = sub i32 %302, 50000
  %gen62 = mul i32 %_61, 50000
  %_63 = shl i32 %302, 50000
  %303 = srem i32 %302, 50000
  %_64 = shl i32 %303, 2
  %_65 = sub i32 %303, 2
  %gen66 = mul i32 %_65, 2
  %_67 = shl i32 %303, 2
  %_68 = shl i32 %303, 2
  %_69 = sub i32 0, %303
  %gen70 = add i32 %_69, 2
  %304 = add i32 %303, 2
  br label %originalBB58
}

declare void @srand(i32)

declare i32 @rand()

attributes #0 = { noinline noreturn nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { noinline nounwind optnone readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noreturn nounwind }
attributes #13 = { nounwind readonly }
attributes #14 = { nounwind readnone }
attributes #15 = { noreturn }

!llvm.dbg.cu = !{!10, !47, !52, !57, !65, !72, !79, !151, !144, !154, !157, !159, !162, !168, !170, !172, !174, !176, !178, !180, !182}
!llvm.ident = !{!184, !184, !184, !184, !184, !184, !184, !184, !184, !184, !184, !184, !184, !184, !184, !184, !184, !184, !184, !184, !184}
!llvm.module.flags = !{!185, !186, !187, !188, !189}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "unknown", scope: !2, file: !3, line: 262, type: !42, isLocal: true, isDefinition: true)
!2 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 260, type: !4, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !10, retainedNodes: !11)
!3 = !DIFile(filename: "src/uname.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4 = !DISubroutineType(types: !5)
!5 = !{!6, !6, !7}
!6 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!7 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64)
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9, size: 64)
!9 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!10 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !12, globals: !14, nameTableKind: None)
!11 = !{}
!12 = !{!8, !13}
!13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!14 = !{!0, !15, !31, !36}
!15 = !DIGlobalVariableExpression(var: !16, expr: !DIExpression())
!16 = distinct !DIGlobalVariable(name: "arch_long_options", scope: !10, file: !3, line: 107, type: !17, isLocal: true, isDefinition: true)
!17 = !DICompositeType(tag: DW_TAG_array_type, baseType: !18, size: 768, elements: !29)
!18 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !19)
!19 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !20, line: 50, size: 256, elements: !21)
!20 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/getopt_ext.h", directory: "")
!21 = !{!22, !25, !26, !28}
!22 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !19, file: !20, line: 52, baseType: !23, size: 64)
!23 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !24, size: 64)
!24 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !9)
!25 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !19, file: !20, line: 55, baseType: !6, size: 32, offset: 64)
!26 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !19, file: !20, line: 56, baseType: !27, size: 64, offset: 128)
!27 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6, size: 64)
!28 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !19, file: !20, line: 57, baseType: !6, size: 32, offset: 192)
!29 = !{!30}
!30 = !DISubrange(count: 3)
!31 = !DIGlobalVariableExpression(var: !32, expr: !DIExpression())
!32 = distinct !DIGlobalVariable(name: "uname_long_options", scope: !10, file: !3, line: 89, type: !33, isLocal: true, isDefinition: true)
!33 = !DICompositeType(tag: DW_TAG_array_type, baseType: !18, size: 3584, elements: !34)
!34 = !{!35}
!35 = !DISubrange(count: 14)
!36 = !DIGlobalVariableExpression(var: !37, expr: !DIExpression())
!37 = distinct !DIGlobalVariable(name: "printed", scope: !38, file: !3, line: 163, type: !41, isLocal: true, isDefinition: true)
!38 = distinct !DISubprogram(name: "print_element", scope: !3, file: !3, line: 161, type: !39, scopeLine: 162, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !10, retainedNodes: !11)
!39 = !DISubroutineType(types: !40)
!40 = !{null, !23}
!41 = !DIBasicType(name: "_Bool", size: 8, encoding: DW_ATE_boolean)
!42 = !DICompositeType(tag: DW_TAG_array_type, baseType: !24, size: 64, elements: !43)
!43 = !{!44}
!44 = !DISubrange(count: 8)
!45 = !DIGlobalVariableExpression(var: !46, expr: !DIExpression())
!46 = distinct !DIGlobalVariable(name: "uname_mode", scope: !47, file: !48, line: 2, type: !6, isLocal: false, isDefinition: true)
!47 = distinct !DICompileUnit(language: DW_LANG_C99, file: !48, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, globals: !49, nameTableKind: None)
!48 = !DIFile(filename: "src/uname-uname.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!49 = !{!45}
!50 = !DIGlobalVariableExpression(var: !51, expr: !DIExpression())
!51 = distinct !DIGlobalVariable(name: "Version", scope: !52, file: !53, line: 2, type: !23, isLocal: false, isDefinition: true)
!52 = distinct !DICompileUnit(language: DW_LANG_C99, file: !53, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, globals: !54, nameTableKind: None)
!53 = !DIFile(filename: "src/version.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!54 = !{!50}
!55 = !DIGlobalVariableExpression(var: !56, expr: !DIExpression())
!56 = distinct !DIGlobalVariable(name: "ignore_EPIPE", scope: !57, file: !62, line: 56, type: !41, isLocal: true, isDefinition: true)
!57 = distinct !DICompileUnit(language: DW_LANG_C99, file: !58, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, globals: !59, nameTableKind: None)
!58 = !DIFile(filename: "./lib/closeout.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!59 = !{!60, !55}
!60 = !DIGlobalVariableExpression(var: !61, expr: !DIExpression())
!61 = distinct !DIGlobalVariable(name: "file_name", scope: !57, file: !62, line: 46, type: !23, isLocal: true, isDefinition: true)
!62 = !DIFile(filename: "lib/closeout.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!63 = !DIGlobalVariableExpression(var: !64, expr: !DIExpression())
!64 = distinct !DIGlobalVariable(name: "exit_failure", scope: !65, file: !68, line: 24, type: !69, isLocal: false, isDefinition: true)
!65 = distinct !DICompileUnit(language: DW_LANG_C99, file: !66, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, globals: !67, nameTableKind: None)
!66 = !DIFile(filename: "./lib/exitfail.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!67 = !{!63}
!68 = !DIFile(filename: "lib/exitfail.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!69 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !6)
!70 = !DIGlobalVariableExpression(var: !71, expr: !DIExpression())
!71 = distinct !DIGlobalVariable(name: "program_name", scope: !72, file: !76, line: 33, type: !23, isLocal: false, isDefinition: true)
!72 = distinct !DICompileUnit(language: DW_LANG_C99, file: !73, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !74, globals: !75, nameTableKind: None)
!73 = !DIFile(filename: "./lib/progname.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!74 = !{!13, !8}
!75 = !{!70}
!76 = !DIFile(filename: "lib/progname.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!77 = !DIGlobalVariableExpression(var: !78, expr: !DIExpression())
!78 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !79, file: !105, line: 116, type: !118, isLocal: true, isDefinition: true)
!79 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !102, nameTableKind: None)
!80 = !DIFile(filename: "./lib/quotearg.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!81 = !{!82}
!82 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "quoting_style", file: !83, line: 32, baseType: !84, size: 32, elements: !85)
!83 = !DIFile(filename: "./lib/quotearg.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!84 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!85 = !{!86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96}
!86 = !DIEnumerator(name: "literal_quoting_style", value: 0, isUnsigned: true)
!87 = !DIEnumerator(name: "shell_quoting_style", value: 1, isUnsigned: true)
!88 = !DIEnumerator(name: "shell_always_quoting_style", value: 2, isUnsigned: true)
!89 = !DIEnumerator(name: "shell_escape_quoting_style", value: 3, isUnsigned: true)
!90 = !DIEnumerator(name: "shell_escape_always_quoting_style", value: 4, isUnsigned: true)
!91 = !DIEnumerator(name: "c_quoting_style", value: 5, isUnsigned: true)
!92 = !DIEnumerator(name: "c_maybe_quoting_style", value: 6, isUnsigned: true)
!93 = !DIEnumerator(name: "escape_quoting_style", value: 7, isUnsigned: true)
!94 = !DIEnumerator(name: "locale_quoting_style", value: 8, isUnsigned: true)
!95 = !DIEnumerator(name: "clocale_quoting_style", value: 9, isUnsigned: true)
!96 = !DIEnumerator(name: "custom_quoting_style", value: 10, isUnsigned: true)
!97 = !{!6, !98, !99}
!98 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!99 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !100, line: 46, baseType: !101)
!100 = !DIFile(filename: "/usr/lib/llvm-9/lib/clang/9.0.1/include/stddef.h", directory: "")
!101 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!102 = !{!103, !110, !116, !77, !126, !131, !138, !140}
!103 = !DIGlobalVariableExpression(var: !104, expr: !DIExpression())
!104 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !79, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!105 = !DIFile(filename: "lib/quotearg.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!106 = !DICompositeType(tag: DW_TAG_array_type, baseType: !107, size: 704, elements: !108)
!107 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !23)
!108 = !{!109}
!109 = !DISubrange(count: 11)
!110 = !DIGlobalVariableExpression(var: !111, expr: !DIExpression())
!111 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !79, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!112 = !DICompositeType(tag: DW_TAG_array_type, baseType: !113, size: 320, elements: !114)
!113 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !82)
!114 = !{!115}
!115 = !DISubrange(count: 10)
!116 = !DIGlobalVariableExpression(var: !117, expr: !DIExpression())
!117 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !79, file: !105, line: 1052, type: !118, isLocal: false, isDefinition: true)
!118 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !119)
!119 = !{!120, !121, !122, !124, !125}
!120 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !118, file: !105, line: 68, baseType: !82, size: 32)
!121 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !118, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!122 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !118, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!123 = !DICompositeType(tag: DW_TAG_array_type, baseType: !84, size: 256, elements: !43)
!124 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !118, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!125 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !118, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!126 = !DIGlobalVariableExpression(var: !127, expr: !DIExpression())
!127 = distinct !DIGlobalVariable(name: "slot0", scope: !79, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!128 = !DICompositeType(tag: DW_TAG_array_type, baseType: !9, size: 2048, elements: !129)
!129 = !{!130}
!130 = !DISubrange(count: 256)
!131 = !DIGlobalVariableExpression(var: !132, expr: !DIExpression())
!132 = distinct !DIGlobalVariable(name: "slotvec", scope: !79, file: !105, line: 845, type: !133, isLocal: true, isDefinition: true)
!133 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !134, size: 64)
!134 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !135)
!135 = !{!136, !137}
!136 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !134, file: !105, line: 836, baseType: !99, size: 64)
!137 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !134, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!138 = !DIGlobalVariableExpression(var: !139, expr: !DIExpression())
!139 = distinct !DIGlobalVariable(name: "nslots", scope: !79, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!140 = !DIGlobalVariableExpression(var: !141, expr: !DIExpression())
!141 = distinct !DIGlobalVariable(name: "slotvec0", scope: !79, file: !105, line: 844, type: !134, isLocal: true, isDefinition: true)
!142 = !DIGlobalVariableExpression(var: !143, expr: !DIExpression())
!143 = distinct !DIGlobalVariable(name: "version_etc_copyright", scope: !144, file: !147, line: 26, type: !148, isLocal: false, isDefinition: true)
!144 = distinct !DICompileUnit(language: DW_LANG_C99, file: !145, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, globals: !146, nameTableKind: None)
!145 = !DIFile(filename: "./lib/version-etc-fsf.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!146 = !{!142}
!147 = !DIFile(filename: "lib/version-etc-fsf.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!148 = !DICompositeType(tag: DW_TAG_array_type, baseType: !24, size: 376, elements: !149)
!149 = !{!150}
!150 = !DISubrange(count: 47)
!151 = distinct !DICompileUnit(language: DW_LANG_C99, file: !152, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!152 = !DIFile(filename: "./lib/version-etc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!153 = !{!13}
!154 = distinct !DICompileUnit(language: DW_LANG_C99, file: !155, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !156, nameTableKind: None)
!155 = !DIFile(filename: "./lib/xmalloc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!156 = !{!99, !8, !13}
!157 = distinct !DICompileUnit(language: DW_LANG_C99, file: !158, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, nameTableKind: None)
!158 = !DIFile(filename: "./lib/xalloc-die.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!159 = distinct !DICompileUnit(language: DW_LANG_C99, file: !160, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !161, nameTableKind: None)
!160 = !DIFile(filename: "./lib/mbrtowc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!161 = !{!99}
!162 = distinct !DICompileUnit(language: DW_LANG_C99, file: !163, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !164, nameTableKind: None)
!163 = !DIFile(filename: "./lib/c-strcasecmp.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!164 = !{!165}
!165 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !166, size: 64)
!166 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !167)
!167 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!168 = distinct !DICompileUnit(language: DW_LANG_C99, file: !169, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, nameTableKind: None)
!169 = !DIFile(filename: "./lib/close-stream.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!170 = distinct !DICompileUnit(language: DW_LANG_C99, file: !171, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, nameTableKind: None)
!171 = !DIFile(filename: "./lib/hard-locale.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!172 = distinct !DICompileUnit(language: DW_LANG_C99, file: !173, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!173 = !DIFile(filename: "./lib/localcharset.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!174 = distinct !DICompileUnit(language: DW_LANG_C99, file: !175, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!175 = !DIFile(filename: "./lib/setlocale_null.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!176 = distinct !DICompileUnit(language: DW_LANG_C99, file: !177, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, nameTableKind: None)
!177 = !DIFile(filename: "./lib/fclose.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!178 = distinct !DICompileUnit(language: DW_LANG_C99, file: !179, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!179 = !DIFile(filename: "./lib/fflush.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!180 = distinct !DICompileUnit(language: DW_LANG_C99, file: !181, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!181 = !DIFile(filename: "./lib/fseeko.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!182 = distinct !DICompileUnit(language: DW_LANG_C99, file: !183, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, nameTableKind: None)
!183 = !DIFile(filename: "./lib/c-ctype.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!184 = !{!"clang version 9.0.1-12 "}
!185 = !{i32 2, !"Dwarf Version", i32 4}
!186 = !{i32 2, !"Debug Info Version", i32 3}
!187 = !{i32 1, !"wchar_size", i32 4}
!188 = !{i32 1, !"ThinLTO", i32 0}
!189 = !{i32 1, !"EnableSplitLTOUnit", i32 0}
!190 = distinct !DISubprogram(name: "usage", scope: !3, file: !3, line: 115, type: !191, scopeLine: 116, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !10, retainedNodes: !11)
!191 = !DISubroutineType(types: !192)
!192 = !{null, !6}
!193 = !DILocalVariable(name: "status", arg: 1, scope: !190, file: !3, line: 115, type: !6)
!194 = !DILocation(line: 115, column: 12, scope: !190)
!195 = !DILocation(line: 117, column: 7, scope: !196)
!196 = distinct !DILexicalBlock(scope: !190, file: !3, line: 117, column: 7)
!197 = !DILocation(line: 117, column: 14, scope: !196)
!198 = !DILocation(line: 117, column: 7, scope: !190)
!199 = !DILocation(line: 118, column: 5, scope: !196)
!200 = !DILocation(line: 118, column: 5, scope: !201)
!201 = distinct !DILexicalBlock(scope: !196, file: !3, line: 118, column: 5)
!202 = !DILocation(line: 121, column: 15, scope: !203)
!203 = distinct !DILexicalBlock(scope: !196, file: !3, line: 120, column: 5)
!204 = !DILocation(line: 121, column: 45, scope: !203)
!205 = !DILocation(line: 121, column: 7, scope: !203)
!206 = !DILocation(line: 123, column: 11, scope: !207)
!207 = distinct !DILexicalBlock(scope: !203, file: !3, line: 123, column: 11)
!208 = !DILocation(line: 123, column: 22, scope: !207)
!209 = !DILocation(line: 123, column: 11, scope: !203)
!210 = !DILocation(line: 125, column: 11, scope: !211)
!211 = distinct !DILexicalBlock(scope: !207, file: !3, line: 124, column: 9)
!212 = !DILocation(line: 134, column: 11, scope: !211)
!213 = !DILocation(line: 141, column: 9, scope: !211)
!214 = !DILocation(line: 144, column: 11, scope: !215)
!215 = distinct !DILexicalBlock(scope: !207, file: !3, line: 143, column: 9)
!216 = !DILocation(line: 150, column: 7, scope: !203)
!217 = !DILocation(line: 151, column: 7, scope: !203)
!218 = !DILocation(line: 152, column: 28, scope: !203)
!219 = !DILocation(line: 152, column: 7, scope: !203)
!220 = !DILocation(line: 154, column: 9, scope: !190)
!221 = !DILocation(line: 154, column: 3, scope: !190)
!222 = !DILocalVariable(name: "status", arg: 1, scope: !223, file: !3, line: 115, type: !6)
!223 = distinct !DISubprogram(name: "usage", scope: !3, file: !3, line: 115, type: !191, scopeLine: 116, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !224, retainedNodes: !11)
!224 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !12, globals: !225, nameTableKind: None)
!225 = !{!226, !229, !239, !242}
!226 = !DIGlobalVariableExpression(var: !227, expr: !DIExpression())
!227 = distinct !DIGlobalVariable(name: "unknown", scope: !228, file: !3, line: 262, type: !42, isLocal: true, isDefinition: true)
!228 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 260, type: !4, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !224, retainedNodes: !11)
!229 = !DIGlobalVariableExpression(var: !230, expr: !DIExpression())
!230 = distinct !DIGlobalVariable(name: "arch_long_options", scope: !224, file: !3, line: 107, type: !231, isLocal: true, isDefinition: true)
!231 = !DICompositeType(tag: DW_TAG_array_type, baseType: !232, size: 768, elements: !29)
!232 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !233)
!233 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !20, line: 50, size: 256, elements: !234)
!234 = !{!235, !236, !237, !238}
!235 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !233, file: !20, line: 52, baseType: !23, size: 64)
!236 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !233, file: !20, line: 55, baseType: !6, size: 32, offset: 64)
!237 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !233, file: !20, line: 56, baseType: !27, size: 64, offset: 128)
!238 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !233, file: !20, line: 57, baseType: !6, size: 32, offset: 192)
!239 = !DIGlobalVariableExpression(var: !240, expr: !DIExpression())
!240 = distinct !DIGlobalVariable(name: "uname_long_options", scope: !224, file: !3, line: 89, type: !241, isLocal: true, isDefinition: true)
!241 = !DICompositeType(tag: DW_TAG_array_type, baseType: !232, size: 3584, elements: !34)
!242 = !DIGlobalVariableExpression(var: !243, expr: !DIExpression())
!243 = distinct !DIGlobalVariable(name: "printed", scope: !244, file: !3, line: 163, type: !41, isLocal: true, isDefinition: true)
!244 = distinct !DISubprogram(name: "print_element", scope: !3, file: !3, line: 161, type: !39, scopeLine: 162, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !224, retainedNodes: !11)
!245 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !246, file: !246, line: 634, type: !39, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !10, retainedNodes: !11)
!246 = !DIFile(filename: "src/system.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!247 = !DILocalVariable(name: "program", arg: 1, scope: !245, file: !246, line: 634, type: !23)
!248 = !DILocation(line: 634, column: 34, scope: !245)
!249 = !DILocalVariable(name: "infomap", scope: !245, file: !246, line: 636, type: !250)
!250 = !DICompositeType(tag: DW_TAG_array_type, baseType: !251, size: 896, elements: !256)
!251 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !252)
!252 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "infomap", scope: !245, file: !246, line: 636, size: 128, elements: !253)
!253 = !{!254, !255}
!254 = !DIDerivedType(tag: DW_TAG_member, name: "program", scope: !252, file: !246, line: 636, baseType: !23, size: 64)
!255 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !252, file: !246, line: 636, baseType: !23, size: 64, offset: 64)
!256 = !{!257}
!257 = !DISubrange(count: 7)
!258 = !DILocation(line: 636, column: 67, scope: !245)
!259 = !DILocalVariable(name: "node", scope: !245, file: !246, line: 646, type: !23)
!260 = !DILocation(line: 646, column: 15, scope: !245)
!261 = !DILocation(line: 646, column: 22, scope: !245)
!262 = !DILocalVariable(name: "map_prog", scope: !245, file: !246, line: 647, type: !263)
!263 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !251, size: 64)
!264 = !DILocation(line: 647, column: 25, scope: !245)
!265 = !DILocation(line: 647, column: 36, scope: !245)
!266 = !DILocation(line: 649, column: 3, scope: !245)
!267 = !DILocation(line: 649, column: 10, scope: !245)
!268 = !DILocation(line: 649, column: 20, scope: !245)
!269 = !DILocation(line: 649, column: 28, scope: !245)
!270 = !DILocation(line: 649, column: 33, scope: !245)
!271 = !DILocation(line: 649, column: 31, scope: !245)
!272 = !DILocation(line: 0, scope: !245)
!273 = !DILocation(line: 650, column: 13, scope: !245)
!274 = distinct !{!274, !266, !273}
!275 = !DILocation(line: 652, column: 7, scope: !276)
!276 = distinct !DILexicalBlock(scope: !245, file: !246, line: 652, column: 7)
!277 = !DILocation(line: 652, column: 17, scope: !276)
!278 = !DILocation(line: 652, column: 7, scope: !245)
!279 = !DILocation(line: 653, column: 12, scope: !276)
!280 = !DILocation(line: 653, column: 22, scope: !276)
!281 = !DILocation(line: 653, column: 10, scope: !276)
!282 = !DILocation(line: 653, column: 5, scope: !276)
!283 = !DILocation(line: 655, column: 11, scope: !245)
!284 = !DILocation(line: 655, column: 3, scope: !245)
!285 = !DILocalVariable(name: "lc_messages", scope: !245, file: !246, line: 659, type: !23)
!286 = !DILocation(line: 659, column: 15, scope: !245)
!287 = !DILocation(line: 659, column: 29, scope: !245)
!288 = !DILocation(line: 660, column: 7, scope: !289)
!289 = distinct !DILexicalBlock(scope: !245, file: !246, line: 660, column: 7)
!290 = !DILocation(line: 660, column: 19, scope: !289)
!291 = !DILocation(line: 660, column: 22, scope: !289)
!292 = !DILocation(line: 660, column: 7, scope: !245)
!293 = !DILocation(line: 666, column: 7, scope: !294)
!294 = distinct !DILexicalBlock(scope: !289, file: !246, line: 661, column: 5)
!295 = !DILocation(line: 668, column: 5, scope: !294)
!296 = !DILocation(line: 669, column: 11, scope: !245)
!297 = !DILocation(line: 670, column: 24, scope: !245)
!298 = !DILocation(line: 669, column: 3, scope: !245)
!299 = !DILocation(line: 671, column: 11, scope: !245)
!300 = !DILocation(line: 672, column: 11, scope: !245)
!301 = !DILocation(line: 672, column: 17, scope: !245)
!302 = !DILocation(line: 672, column: 25, scope: !245)
!303 = !DILocation(line: 672, column: 22, scope: !245)
!304 = !DILocation(line: 671, column: 3, scope: !245)
!305 = !DILocation(line: 673, column: 1, scope: !245)
!306 = !DILocalVariable(name: "program", arg: 1, scope: !307, file: !246, line: 634, type: !23)
!307 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !246, file: !246, line: 634, type: !39, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !308, retainedNodes: !11)
!308 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !12, globals: !309, nameTableKind: None)
!309 = !{!310, !313, !323, !326}
!310 = !DIGlobalVariableExpression(var: !311, expr: !DIExpression())
!311 = distinct !DIGlobalVariable(name: "unknown", scope: !312, file: !3, line: 262, type: !42, isLocal: true, isDefinition: true)
!312 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 260, type: !4, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !308, retainedNodes: !11)
!313 = !DIGlobalVariableExpression(var: !314, expr: !DIExpression())
!314 = distinct !DIGlobalVariable(name: "arch_long_options", scope: !308, file: !3, line: 107, type: !315, isLocal: true, isDefinition: true)
!315 = !DICompositeType(tag: DW_TAG_array_type, baseType: !316, size: 768, elements: !29)
!316 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !317)
!317 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !20, line: 50, size: 256, elements: !318)
!318 = !{!319, !320, !321, !322}
!319 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !317, file: !20, line: 52, baseType: !23, size: 64)
!320 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !317, file: !20, line: 55, baseType: !6, size: 32, offset: 64)
!321 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !317, file: !20, line: 56, baseType: !27, size: 64, offset: 128)
!322 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !317, file: !20, line: 57, baseType: !6, size: 32, offset: 192)
!323 = !DIGlobalVariableExpression(var: !324, expr: !DIExpression())
!324 = distinct !DIGlobalVariable(name: "uname_long_options", scope: !308, file: !3, line: 89, type: !325, isLocal: true, isDefinition: true)
!325 = !DICompositeType(tag: DW_TAG_array_type, baseType: !316, size: 3584, elements: !34)
!326 = !DIGlobalVariableExpression(var: !327, expr: !DIExpression())
!327 = distinct !DIGlobalVariable(name: "printed", scope: !328, file: !3, line: 163, type: !41, isLocal: true, isDefinition: true)
!328 = distinct !DISubprogram(name: "print_element", scope: !3, file: !3, line: 161, type: !39, scopeLine: 162, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !308, retainedNodes: !11)
!329 = !DILocalVariable(name: "infomap", scope: !307, file: !246, line: 636, type: !330)
!330 = !DICompositeType(tag: DW_TAG_array_type, baseType: !331, size: 896, elements: !256)
!331 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !332)
!332 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "infomap", scope: !307, file: !246, line: 636, size: 128, elements: !333)
!333 = !{!334, !335}
!334 = !DIDerivedType(tag: DW_TAG_member, name: "program", scope: !332, file: !246, line: 636, baseType: !23, size: 64)
!335 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !332, file: !246, line: 636, baseType: !23, size: 64, offset: 64)
!336 = !DILocalVariable(name: "node", scope: !307, file: !246, line: 646, type: !23)
!337 = !DILocalVariable(name: "map_prog", scope: !307, file: !246, line: 647, type: !338)
!338 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !331, size: 64)
!339 = !DILocalVariable(name: "lc_messages", scope: !340, file: !246, line: 659, type: !23)
!340 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !246, file: !246, line: 634, type: !39, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !341, retainedNodes: !11)
!341 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !12, globals: !342, nameTableKind: None)
!342 = !{!343, !346, !356, !359}
!343 = !DIGlobalVariableExpression(var: !344, expr: !DIExpression())
!344 = distinct !DIGlobalVariable(name: "unknown", scope: !345, file: !3, line: 262, type: !42, isLocal: true, isDefinition: true)
!345 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 260, type: !4, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !341, retainedNodes: !11)
!346 = !DIGlobalVariableExpression(var: !347, expr: !DIExpression())
!347 = distinct !DIGlobalVariable(name: "arch_long_options", scope: !341, file: !3, line: 107, type: !348, isLocal: true, isDefinition: true)
!348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !349, size: 768, elements: !29)
!349 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !350)
!350 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !20, line: 50, size: 256, elements: !351)
!351 = !{!352, !353, !354, !355}
!352 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !350, file: !20, line: 52, baseType: !23, size: 64)
!353 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !350, file: !20, line: 55, baseType: !6, size: 32, offset: 64)
!354 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !350, file: !20, line: 56, baseType: !27, size: 64, offset: 128)
!355 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !350, file: !20, line: 57, baseType: !6, size: 32, offset: 192)
!356 = !DIGlobalVariableExpression(var: !357, expr: !DIExpression())
!357 = distinct !DIGlobalVariable(name: "uname_long_options", scope: !341, file: !3, line: 89, type: !358, isLocal: true, isDefinition: true)
!358 = !DICompositeType(tag: DW_TAG_array_type, baseType: !349, size: 3584, elements: !34)
!359 = !DIGlobalVariableExpression(var: !360, expr: !DIExpression())
!360 = distinct !DIGlobalVariable(name: "printed", scope: !361, file: !3, line: 163, type: !41, isLocal: true, isDefinition: true)
!361 = distinct !DISubprogram(name: "print_element", scope: !3, file: !3, line: 161, type: !39, scopeLine: 162, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !341, retainedNodes: !11)
!362 = !DILocalVariable(name: "argc", arg: 1, scope: !2, file: !3, line: 260, type: !6)
!363 = !DILocation(line: 260, column: 11, scope: !2)
!364 = !DILocalVariable(name: "argv", arg: 2, scope: !2, file: !3, line: 260, type: !7)
!365 = !DILocation(line: 260, column: 24, scope: !2)
!366 = !DILocalVariable(name: "toprint", scope: !2, file: !3, line: 265, type: !84)
!367 = !DILocation(line: 265, column: 16, scope: !2)
!368 = !DILocation(line: 268, column: 21, scope: !2)
!369 = !DILocation(line: 268, column: 3, scope: !2)
!370 = !DILocation(line: 269, column: 3, scope: !2)
!371 = !DILocation(line: 270, column: 3, scope: !2)
!372 = !DILocation(line: 271, column: 3, scope: !2)
!373 = !DILocation(line: 273, column: 3, scope: !2)
!374 = !DILocation(line: 275, column: 30, scope: !2)
!375 = !DILocation(line: 275, column: 36, scope: !2)
!376 = !DILocation(line: 275, column: 13, scope: !2)
!377 = !DILocation(line: 275, column: 11, scope: !2)
!378 = !DILocation(line: 277, column: 7, scope: !379)
!379 = distinct !DILexicalBlock(scope: !2, file: !3, line: 277, column: 7)
!380 = !DILocation(line: 277, column: 15, scope: !379)
!381 = !DILocation(line: 278, column: 13, scope: !379)
!382 = !DILocation(line: 278, column: 5, scope: !379)
!383 = !DILocation(line: 280, column: 7, scope: !384)
!384 = distinct !DILexicalBlock(scope: !2, file: !3, line: 280, column: 7)
!385 = !DILocation(line: 281, column: 8, scope: !384)
!386 = !DILocation(line: 280, column: 7, scope: !2)
!387 = !DILocalVariable(name: "name", scope: !388, file: !3, line: 284, type: !389)
!388 = distinct !DILexicalBlock(scope: !384, file: !3, line: 283, column: 5)
!389 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utsname", file: !390, line: 48, size: 3120, elements: !391)
!390 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/sys/utsname.h", directory: "")
!391 = !{!392, !396, !397, !398, !399, !400}
!392 = !DIDerivedType(tag: DW_TAG_member, name: "sysname", scope: !389, file: !390, line: 51, baseType: !393, size: 520)
!393 = !DICompositeType(tag: DW_TAG_array_type, baseType: !9, size: 520, elements: !394)
!394 = !{!395}
!395 = !DISubrange(count: 65)
!396 = !DIDerivedType(tag: DW_TAG_member, name: "nodename", scope: !389, file: !390, line: 54, baseType: !393, size: 520, offset: 520)
!397 = !DIDerivedType(tag: DW_TAG_member, name: "release", scope: !389, file: !390, line: 57, baseType: !393, size: 520, offset: 1040)
!398 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !389, file: !390, line: 59, baseType: !393, size: 520, offset: 1560)
!399 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !389, file: !390, line: 62, baseType: !393, size: 520, offset: 2080)
!400 = !DIDerivedType(tag: DW_TAG_member, name: "domainname", scope: !389, file: !390, line: 67, baseType: !393, size: 520, offset: 2600)
!401 = !DILocation(line: 284, column: 22, scope: !388)
!402 = !DILocation(line: 286, column: 11, scope: !403)
!403 = distinct !DILexicalBlock(scope: !388, file: !3, line: 286, column: 11)
!404 = !DILocation(line: 286, column: 25, scope: !403)
!405 = !DILocation(line: 287, column: 9, scope: !403)
!406 = !DILocation(line: 289, column: 11, scope: !407)
!407 = distinct !DILexicalBlock(scope: !388, file: !3, line: 289, column: 11)
!408 = !DILocation(line: 289, column: 19, scope: !407)
!409 = !DILocation(line: 289, column: 11, scope: !388)
!410 = !DILocation(line: 290, column: 29, scope: !407)
!411 = !DILocation(line: 290, column: 24, scope: !407)
!412 = !DILocation(line: 290, column: 9, scope: !407)
!413 = !DILocation(line: 291, column: 11, scope: !414)
!414 = distinct !DILexicalBlock(scope: !388, file: !3, line: 291, column: 11)
!415 = !DILocation(line: 291, column: 19, scope: !414)
!416 = !DILocation(line: 291, column: 11, scope: !388)
!417 = !DILocation(line: 292, column: 29, scope: !414)
!418 = !DILocation(line: 292, column: 24, scope: !414)
!419 = !DILocation(line: 292, column: 9, scope: !414)
!420 = !DILocation(line: 293, column: 11, scope: !421)
!421 = distinct !DILexicalBlock(scope: !388, file: !3, line: 293, column: 11)
!422 = !DILocation(line: 293, column: 19, scope: !421)
!423 = !DILocation(line: 293, column: 11, scope: !388)
!424 = !DILocation(line: 294, column: 29, scope: !421)
!425 = !DILocation(line: 294, column: 24, scope: !421)
!426 = !DILocation(line: 294, column: 9, scope: !421)
!427 = !DILocation(line: 295, column: 11, scope: !428)
!428 = distinct !DILexicalBlock(scope: !388, file: !3, line: 295, column: 11)
!429 = !DILocation(line: 295, column: 19, scope: !428)
!430 = !DILocation(line: 295, column: 11, scope: !388)
!431 = !DILocation(line: 296, column: 29, scope: !428)
!432 = !DILocation(line: 296, column: 24, scope: !428)
!433 = !DILocation(line: 296, column: 9, scope: !428)
!434 = !DILocation(line: 297, column: 11, scope: !435)
!435 = distinct !DILexicalBlock(scope: !388, file: !3, line: 297, column: 11)
!436 = !DILocation(line: 297, column: 19, scope: !435)
!437 = !DILocation(line: 297, column: 11, scope: !388)
!438 = !DILocation(line: 298, column: 29, scope: !435)
!439 = !DILocation(line: 298, column: 24, scope: !435)
!440 = !DILocation(line: 298, column: 9, scope: !435)
!441 = !DILocation(line: 299, column: 5, scope: !388)
!442 = !DILocation(line: 301, column: 7, scope: !443)
!443 = distinct !DILexicalBlock(scope: !2, file: !3, line: 301, column: 7)
!444 = !DILocation(line: 301, column: 15, scope: !443)
!445 = !DILocation(line: 301, column: 7, scope: !2)
!446 = !DILocalVariable(name: "element", scope: !447, file: !3, line: 303, type: !23)
!447 = distinct !DILexicalBlock(scope: !443, file: !3, line: 302, column: 5)
!448 = !DILocation(line: 303, column: 19, scope: !447)
!449 = !DILocation(line: 341, column: 14, scope: !450)
!450 = distinct !DILexicalBlock(scope: !447, file: !3, line: 341, column: 11)
!451 = !DILocation(line: 341, column: 22, scope: !450)
!452 = !DILocation(line: 341, column: 37, scope: !450)
!453 = !DILocation(line: 341, column: 45, scope: !450)
!454 = !DILocation(line: 341, column: 11, scope: !447)
!455 = !DILocation(line: 342, column: 24, scope: !450)
!456 = !DILocation(line: 342, column: 9, scope: !450)
!457 = !DILocation(line: 343, column: 5, scope: !447)
!458 = !DILocation(line: 345, column: 7, scope: !459)
!459 = distinct !DILexicalBlock(scope: !2, file: !3, line: 345, column: 7)
!460 = !DILocation(line: 345, column: 15, scope: !459)
!461 = !DILocation(line: 345, column: 7, scope: !2)
!462 = !DILocalVariable(name: "element", scope: !463, file: !3, line: 347, type: !23)
!463 = distinct !DILexicalBlock(scope: !459, file: !3, line: 346, column: 5)
!464 = !DILocation(line: 347, column: 19, scope: !463)
!465 = !DILocation(line: 366, column: 14, scope: !466)
!466 = distinct !DILexicalBlock(scope: !463, file: !3, line: 366, column: 11)
!467 = !DILocation(line: 366, column: 22, scope: !466)
!468 = !DILocation(line: 366, column: 37, scope: !466)
!469 = !DILocation(line: 366, column: 45, scope: !466)
!470 = !DILocation(line: 366, column: 11, scope: !463)
!471 = !DILocation(line: 367, column: 24, scope: !466)
!472 = !DILocation(line: 367, column: 9, scope: !466)
!473 = !DILocation(line: 368, column: 5, scope: !463)
!474 = !DILocation(line: 370, column: 7, scope: !475)
!475 = distinct !DILexicalBlock(scope: !2, file: !3, line: 370, column: 7)
!476 = !DILocation(line: 370, column: 15, scope: !475)
!477 = !DILocation(line: 370, column: 7, scope: !2)
!478 = !DILocation(line: 371, column: 5, scope: !475)
!479 = !DILocation(line: 373, column: 3, scope: !2)
!480 = !DILocation(line: 375, column: 3, scope: !2)
!481 = !DILocalVariable(name: "argc", arg: 1, scope: !482, file: !3, line: 260, type: !6)
!482 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 260, type: !4, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !483, retainedNodes: !11)
!483 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !12, globals: !484, nameTableKind: None)
!484 = !{!485, !487, !497, !500}
!485 = !DIGlobalVariableExpression(var: !486, expr: !DIExpression())
!486 = distinct !DIGlobalVariable(name: "unknown", scope: !482, file: !3, line: 262, type: !42, isLocal: true, isDefinition: true)
!487 = !DIGlobalVariableExpression(var: !488, expr: !DIExpression())
!488 = distinct !DIGlobalVariable(name: "arch_long_options", scope: !483, file: !3, line: 107, type: !489, isLocal: true, isDefinition: true)
!489 = !DICompositeType(tag: DW_TAG_array_type, baseType: !490, size: 768, elements: !29)
!490 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !491)
!491 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !20, line: 50, size: 256, elements: !492)
!492 = !{!493, !494, !495, !496}
!493 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !491, file: !20, line: 52, baseType: !23, size: 64)
!494 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !491, file: !20, line: 55, baseType: !6, size: 32, offset: 64)
!495 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !491, file: !20, line: 56, baseType: !27, size: 64, offset: 128)
!496 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !491, file: !20, line: 57, baseType: !6, size: 32, offset: 192)
!497 = !DIGlobalVariableExpression(var: !498, expr: !DIExpression())
!498 = distinct !DIGlobalVariable(name: "uname_long_options", scope: !483, file: !3, line: 89, type: !499, isLocal: true, isDefinition: true)
!499 = !DICompositeType(tag: DW_TAG_array_type, baseType: !490, size: 3584, elements: !34)
!500 = !DIGlobalVariableExpression(var: !501, expr: !DIExpression())
!501 = distinct !DIGlobalVariable(name: "printed", scope: !502, file: !3, line: 163, type: !41, isLocal: true, isDefinition: true)
!502 = distinct !DISubprogram(name: "print_element", scope: !3, file: !3, line: 161, type: !39, scopeLine: 162, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !483, retainedNodes: !11)
!503 = !DILocalVariable(name: "argv", arg: 2, scope: !482, file: !3, line: 260, type: !7)
!504 = !DILocalVariable(name: "toprint", scope: !482, file: !3, line: 265, type: !84)
!505 = distinct !DISubprogram(name: "decode_switches", scope: !3, file: !3, line: 175, type: !4, scopeLine: 176, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !10, retainedNodes: !11)
!506 = !DILocalVariable(name: "argc", arg: 1, scope: !505, file: !3, line: 175, type: !6)
!507 = !DILocation(line: 175, column: 22, scope: !505)
!508 = !DILocalVariable(name: "argv", arg: 2, scope: !505, file: !3, line: 175, type: !7)
!509 = !DILocation(line: 175, column: 35, scope: !505)
!510 = !DILocalVariable(name: "c", scope: !505, file: !3, line: 177, type: !6)
!511 = !DILocation(line: 177, column: 7, scope: !505)
!512 = !DILocalVariable(name: "toprint", scope: !505, file: !3, line: 178, type: !84)
!513 = !DILocation(line: 178, column: 16, scope: !505)
!514 = !DILocation(line: 180, column: 7, scope: !515)
!515 = distinct !DILexicalBlock(scope: !505, file: !3, line: 180, column: 7)
!516 = !DILocation(line: 180, column: 18, scope: !515)
!517 = !DILocation(line: 180, column: 7, scope: !505)
!518 = !DILocation(line: 182, column: 7, scope: !519)
!519 = distinct !DILexicalBlock(scope: !515, file: !3, line: 181, column: 5)
!520 = !DILocation(line: 182, column: 32, scope: !519)
!521 = !DILocation(line: 182, column: 38, scope: !519)
!522 = !DILocation(line: 182, column: 19, scope: !519)
!523 = !DILocation(line: 182, column: 17, scope: !519)
!524 = !DILocation(line: 183, column: 58, scope: !519)
!525 = !DILocation(line: 185, column: 19, scope: !526)
!526 = distinct !DILexicalBlock(scope: !519, file: !3, line: 184, column: 9)
!527 = !DILocation(line: 185, column: 11, scope: !526)
!528 = !DILocation(line: 187, column: 13, scope: !529)
!529 = distinct !DILexicalBlock(scope: !526, file: !3, line: 186, column: 13)
!530 = !DILocation(line: 189, column: 13, scope: !529)
!531 = !DILocation(line: 192, column: 15, scope: !529)
!532 = !DILocation(line: 195, column: 15, scope: !519)
!533 = !DILocation(line: 196, column: 5, scope: !519)
!534 = !DILocation(line: 199, column: 7, scope: !535)
!535 = distinct !DILexicalBlock(scope: !515, file: !3, line: 198, column: 5)
!536 = !DILocation(line: 199, column: 32, scope: !535)
!537 = !DILocation(line: 199, column: 38, scope: !535)
!538 = !DILocation(line: 199, column: 19, scope: !535)
!539 = !DILocation(line: 199, column: 17, scope: !535)
!540 = !DILocation(line: 200, column: 59, scope: !535)
!541 = !DILocation(line: 202, column: 19, scope: !542)
!542 = distinct !DILexicalBlock(scope: !535, file: !3, line: 201, column: 9)
!543 = !DILocation(line: 202, column: 11, scope: !542)
!544 = !DILocation(line: 205, column: 23, scope: !545)
!545 = distinct !DILexicalBlock(scope: !542, file: !3, line: 203, column: 13)
!546 = !DILocation(line: 206, column: 15, scope: !545)
!547 = !DILocation(line: 209, column: 23, scope: !545)
!548 = !DILocation(line: 210, column: 15, scope: !545)
!549 = !DILocation(line: 213, column: 23, scope: !545)
!550 = !DILocation(line: 214, column: 15, scope: !545)
!551 = !DILocation(line: 217, column: 23, scope: !545)
!552 = !DILocation(line: 218, column: 15, scope: !545)
!553 = !DILocation(line: 221, column: 23, scope: !545)
!554 = !DILocation(line: 222, column: 15, scope: !545)
!555 = !DILocation(line: 225, column: 23, scope: !545)
!556 = !DILocation(line: 226, column: 15, scope: !545)
!557 = !DILocation(line: 229, column: 23, scope: !545)
!558 = !DILocation(line: 230, column: 15, scope: !545)
!559 = !DILocation(line: 233, column: 23, scope: !545)
!560 = !DILocation(line: 234, column: 15, scope: !545)
!561 = !DILocation(line: 237, column: 23, scope: !545)
!562 = !DILocation(line: 238, column: 15, scope: !545)
!563 = !DILocation(line: 240, column: 13, scope: !545)
!564 = !DILocation(line: 242, column: 13, scope: !545)
!565 = !DILocation(line: 245, column: 15, scope: !545)
!566 = distinct !{!566, !534, !567}
!567 = !DILocation(line: 247, column: 9, scope: !535)
!568 = !DILocation(line: 250, column: 7, scope: !569)
!569 = distinct !DILexicalBlock(scope: !505, file: !3, line: 250, column: 7)
!570 = !DILocation(line: 250, column: 15, scope: !569)
!571 = !DILocation(line: 250, column: 12, scope: !569)
!572 = !DILocation(line: 250, column: 7, scope: !505)
!573 = !DILocation(line: 252, column: 20, scope: !574)
!574 = distinct !DILexicalBlock(scope: !569, file: !3, line: 251, column: 5)
!575 = !DILocation(line: 252, column: 50, scope: !574)
!576 = !DILocation(line: 252, column: 55, scope: !574)
!577 = !DILocation(line: 252, column: 43, scope: !574)
!578 = !DILocation(line: 252, column: 7, scope: !574)
!579 = !DILocation(line: 253, column: 7, scope: !574)
!580 = !DILocation(line: 256, column: 10, scope: !505)
!581 = !DILocation(line: 256, column: 3, scope: !505)
!582 = !DILocalVariable(name: "argc", arg: 1, scope: !583, file: !3, line: 175, type: !6)
!583 = distinct !DISubprogram(name: "decode_switches", scope: !3, file: !3, line: 175, type: !4, scopeLine: 176, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !584, retainedNodes: !11)
!584 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !12, globals: !585, nameTableKind: None)
!585 = !{!586, !589, !599, !602}
!586 = !DIGlobalVariableExpression(var: !587, expr: !DIExpression())
!587 = distinct !DIGlobalVariable(name: "unknown", scope: !588, file: !3, line: 262, type: !42, isLocal: true, isDefinition: true)
!588 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 260, type: !4, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !584, retainedNodes: !11)
!589 = !DIGlobalVariableExpression(var: !590, expr: !DIExpression())
!590 = distinct !DIGlobalVariable(name: "arch_long_options", scope: !584, file: !3, line: 107, type: !591, isLocal: true, isDefinition: true)
!591 = !DICompositeType(tag: DW_TAG_array_type, baseType: !592, size: 768, elements: !29)
!592 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !593)
!593 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !20, line: 50, size: 256, elements: !594)
!594 = !{!595, !596, !597, !598}
!595 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !593, file: !20, line: 52, baseType: !23, size: 64)
!596 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !593, file: !20, line: 55, baseType: !6, size: 32, offset: 64)
!597 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !593, file: !20, line: 56, baseType: !27, size: 64, offset: 128)
!598 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !593, file: !20, line: 57, baseType: !6, size: 32, offset: 192)
!599 = !DIGlobalVariableExpression(var: !600, expr: !DIExpression())
!600 = distinct !DIGlobalVariable(name: "uname_long_options", scope: !584, file: !3, line: 89, type: !601, isLocal: true, isDefinition: true)
!601 = !DICompositeType(tag: DW_TAG_array_type, baseType: !592, size: 3584, elements: !34)
!602 = !DIGlobalVariableExpression(var: !603, expr: !DIExpression())
!603 = distinct !DIGlobalVariable(name: "printed", scope: !604, file: !3, line: 163, type: !41, isLocal: true, isDefinition: true)
!604 = distinct !DISubprogram(name: "print_element", scope: !3, file: !3, line: 161, type: !39, scopeLine: 162, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !584, retainedNodes: !11)
!605 = !DILocalVariable(name: "argv", arg: 2, scope: !583, file: !3, line: 175, type: !7)
!606 = !DILocalVariable(name: "c", scope: !583, file: !3, line: 177, type: !6)
!607 = !DILocalVariable(name: "toprint", scope: !583, file: !3, line: 178, type: !84)
!608 = !DILocalVariable(name: "element", arg: 1, scope: !38, file: !3, line: 161, type: !23)
!609 = !DILocation(line: 161, column: 28, scope: !38)
!610 = !DILocation(line: 164, column: 7, scope: !611)
!611 = distinct !DILexicalBlock(scope: !38, file: !3, line: 164, column: 7)
!612 = !DILocation(line: 164, column: 7, scope: !38)
!613 = !DILocation(line: 165, column: 5, scope: !611)
!614 = !DILocation(line: 166, column: 11, scope: !38)
!615 = !DILocation(line: 167, column: 3, scope: !38)
!616 = !DILocation(line: 168, column: 1, scope: !38)
!617 = !DILocalVariable(name: "element", arg: 1, scope: !618, file: !3, line: 161, type: !23)
!618 = distinct !DISubprogram(name: "print_element", scope: !3, file: !3, line: 161, type: !39, scopeLine: 162, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !619, retainedNodes: !11)
!619 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !12, globals: !620, nameTableKind: None)
!620 = !{!621, !624, !634, !637}
!621 = !DIGlobalVariableExpression(var: !622, expr: !DIExpression())
!622 = distinct !DIGlobalVariable(name: "unknown", scope: !623, file: !3, line: 262, type: !42, isLocal: true, isDefinition: true)
!623 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 260, type: !4, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !619, retainedNodes: !11)
!624 = !DIGlobalVariableExpression(var: !625, expr: !DIExpression())
!625 = distinct !DIGlobalVariable(name: "arch_long_options", scope: !619, file: !3, line: 107, type: !626, isLocal: true, isDefinition: true)
!626 = !DICompositeType(tag: DW_TAG_array_type, baseType: !627, size: 768, elements: !29)
!627 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !628)
!628 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !20, line: 50, size: 256, elements: !629)
!629 = !{!630, !631, !632, !633}
!630 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !628, file: !20, line: 52, baseType: !23, size: 64)
!631 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !628, file: !20, line: 55, baseType: !6, size: 32, offset: 64)
!632 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !628, file: !20, line: 56, baseType: !27, size: 64, offset: 128)
!633 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !628, file: !20, line: 57, baseType: !6, size: 32, offset: 192)
!634 = !DIGlobalVariableExpression(var: !635, expr: !DIExpression())
!635 = distinct !DIGlobalVariable(name: "uname_long_options", scope: !619, file: !3, line: 89, type: !636, isLocal: true, isDefinition: true)
!636 = !DICompositeType(tag: DW_TAG_array_type, baseType: !627, size: 3584, elements: !34)
!637 = !DIGlobalVariableExpression(var: !638, expr: !DIExpression())
!638 = distinct !DIGlobalVariable(name: "printed", scope: !618, file: !3, line: 163, type: !41, isLocal: true, isDefinition: true)
!639 = distinct !DISubprogram(name: "close_stdout", scope: !62, file: !62, line: 117, type: !640, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !57, retainedNodes: !11)
!640 = !DISubroutineType(types: !641)
!641 = !{null}
!642 = !DILocation(line: 119, column: 21, scope: !643)
!643 = distinct !DILexicalBlock(scope: !639, file: !62, line: 119, column: 7)
!644 = !DILocation(line: 119, column: 7, scope: !643)
!645 = !DILocation(line: 119, column: 29, scope: !643)
!646 = !DILocation(line: 120, column: 7, scope: !643)
!647 = !DILocation(line: 120, column: 12, scope: !643)
!648 = !DILocation(line: 120, column: 25, scope: !643)
!649 = !DILocation(line: 120, column: 28, scope: !643)
!650 = !DILocation(line: 120, column: 34, scope: !643)
!651 = !DILocation(line: 119, column: 7, scope: !639)
!652 = !DILocalVariable(name: "write_error", scope: !653, file: !62, line: 122, type: !23)
!653 = distinct !DILexicalBlock(scope: !643, file: !62, line: 121, column: 5)
!654 = !DILocation(line: 122, column: 19, scope: !653)
!655 = !DILocation(line: 122, column: 33, scope: !653)
!656 = !DILocation(line: 123, column: 11, scope: !657)
!657 = distinct !DILexicalBlock(scope: !653, file: !62, line: 123, column: 11)
!658 = !DILocation(line: 123, column: 11, scope: !653)
!659 = !DILocation(line: 124, column: 19, scope: !657)
!660 = !DILocation(line: 124, column: 52, scope: !657)
!661 = !DILocation(line: 124, column: 36, scope: !657)
!662 = !DILocation(line: 125, column: 16, scope: !657)
!663 = !DILocation(line: 124, column: 9, scope: !657)
!664 = !DILocation(line: 127, column: 19, scope: !657)
!665 = !DILocation(line: 127, column: 32, scope: !657)
!666 = !DILocation(line: 127, column: 9, scope: !657)
!667 = !DILocation(line: 129, column: 14, scope: !653)
!668 = !DILocation(line: 129, column: 7, scope: !653)
!669 = !DILocation(line: 134, column: 42, scope: !670)
!670 = distinct !DILexicalBlock(scope: !639, file: !62, line: 134, column: 7)
!671 = !DILocation(line: 134, column: 28, scope: !670)
!672 = !DILocation(line: 134, column: 50, scope: !670)
!673 = !DILocation(line: 134, column: 7, scope: !639)
!674 = !DILocation(line: 135, column: 12, scope: !670)
!675 = !DILocation(line: 135, column: 5, scope: !670)
!676 = !DILocation(line: 136, column: 1, scope: !639)
!677 = distinct !DISubprogram(name: "set_program_name", scope: !76, file: !76, line: 39, type: !39, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !72, retainedNodes: !11)
!678 = !DILocalVariable(name: "argv0", arg: 1, scope: !677, file: !76, line: 39, type: !23)
!679 = !DILocation(line: 39, column: 31, scope: !677)
!680 = !DILocalVariable(name: "slash", scope: !677, file: !76, line: 46, type: !23)
!681 = !DILocation(line: 46, column: 15, scope: !677)
!682 = !DILocalVariable(name: "base", scope: !677, file: !76, line: 47, type: !23)
!683 = !DILocation(line: 47, column: 15, scope: !677)
!684 = !DILocation(line: 51, column: 7, scope: !685)
!685 = distinct !DILexicalBlock(scope: !677, file: !76, line: 51, column: 7)
!686 = !DILocation(line: 51, column: 13, scope: !685)
!687 = !DILocation(line: 51, column: 7, scope: !677)
!688 = !DILocation(line: 55, column: 14, scope: !689)
!689 = distinct !DILexicalBlock(scope: !685, file: !76, line: 52, column: 5)
!690 = !DILocation(line: 54, column: 7, scope: !689)
!691 = !DILocation(line: 56, column: 7, scope: !689)
!692 = !DILocation(line: 59, column: 20, scope: !677)
!693 = !DILocation(line: 59, column: 11, scope: !677)
!694 = !DILocation(line: 59, column: 9, scope: !677)
!695 = !DILocation(line: 60, column: 11, scope: !677)
!696 = !DILocation(line: 60, column: 17, scope: !677)
!697 = !DILocation(line: 60, column: 27, scope: !677)
!698 = !DILocation(line: 60, column: 33, scope: !677)
!699 = !DILocation(line: 60, column: 39, scope: !677)
!700 = !DILocation(line: 60, column: 8, scope: !677)
!701 = !DILocation(line: 61, column: 7, scope: !702)
!702 = distinct !DILexicalBlock(scope: !677, file: !76, line: 61, column: 7)
!703 = !DILocation(line: 61, column: 14, scope: !702)
!704 = !DILocation(line: 61, column: 12, scope: !702)
!705 = !DILocation(line: 61, column: 20, scope: !702)
!706 = !DILocation(line: 61, column: 25, scope: !702)
!707 = !DILocation(line: 61, column: 37, scope: !702)
!708 = !DILocation(line: 61, column: 42, scope: !702)
!709 = !DILocation(line: 61, column: 28, scope: !702)
!710 = !DILocation(line: 61, column: 61, scope: !702)
!711 = !DILocation(line: 61, column: 7, scope: !677)
!712 = !DILocation(line: 63, column: 15, scope: !713)
!713 = distinct !DILexicalBlock(scope: !702, file: !76, line: 62, column: 5)
!714 = !DILocation(line: 63, column: 13, scope: !713)
!715 = !DILocation(line: 64, column: 20, scope: !716)
!716 = distinct !DILexicalBlock(scope: !713, file: !76, line: 64, column: 11)
!717 = !DILocation(line: 64, column: 11, scope: !716)
!718 = !DILocation(line: 64, column: 36, scope: !716)
!719 = !DILocation(line: 64, column: 11, scope: !713)
!720 = !DILocation(line: 66, column: 19, scope: !721)
!721 = distinct !DILexicalBlock(scope: !716, file: !76, line: 65, column: 9)
!722 = !DILocation(line: 66, column: 24, scope: !721)
!723 = !DILocation(line: 66, column: 17, scope: !721)
!724 = !DILocation(line: 70, column: 52, scope: !721)
!725 = !DILocation(line: 70, column: 41, scope: !721)
!726 = !DILocation(line: 72, column: 9, scope: !721)
!727 = !DILocation(line: 73, column: 5, scope: !713)
!728 = !DILocation(line: 84, column: 18, scope: !677)
!729 = !DILocation(line: 84, column: 16, scope: !677)
!730 = !DILocation(line: 90, column: 38, scope: !677)
!731 = !DILocation(line: 90, column: 27, scope: !677)
!732 = !DILocation(line: 92, column: 1, scope: !677)
!733 = !DILocalVariable(name: "argv0", arg: 1, scope: !734, file: !76, line: 39, type: !23)
!734 = distinct !DISubprogram(name: "set_program_name", scope: !76, file: !76, line: 39, type: !39, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !735, retainedNodes: !11)
!735 = distinct !DICompileUnit(language: DW_LANG_C99, file: !73, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !74, globals: !736, nameTableKind: None)
!736 = !{!737}
!737 = !DIGlobalVariableExpression(var: !738, expr: !DIExpression())
!738 = distinct !DIGlobalVariable(name: "program_name", scope: !735, file: !76, line: 33, type: !23, isLocal: false, isDefinition: true)
!739 = !DILocalVariable(name: "slash", scope: !734, file: !76, line: 46, type: !23)
!740 = !DILocalVariable(name: "base", scope: !734, file: !76, line: 47, type: !23)
!741 = distinct !DISubprogram(name: "set_char_quoting", scope: !105, file: !105, line: 152, type: !742, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !79, retainedNodes: !11)
!742 = !DISubroutineType(types: !743)
!743 = !{!6, !744, !9, !6}
!744 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !118, size: 64)
!745 = !DILocalVariable(name: "o", arg: 1, scope: !741, file: !105, line: 152, type: !744)
!746 = !DILocation(line: 152, column: 43, scope: !741)
!747 = !DILocalVariable(name: "c", arg: 2, scope: !741, file: !105, line: 152, type: !9)
!748 = !DILocation(line: 152, column: 51, scope: !741)
!749 = !DILocalVariable(name: "i", arg: 3, scope: !741, file: !105, line: 152, type: !6)
!750 = !DILocation(line: 152, column: 58, scope: !741)
!751 = !DILocalVariable(name: "uc", scope: !741, file: !105, line: 154, type: !167)
!752 = !DILocation(line: 154, column: 17, scope: !741)
!753 = !DILocation(line: 154, column: 22, scope: !741)
!754 = !DILocalVariable(name: "p", scope: !741, file: !105, line: 155, type: !755)
!755 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !84, size: 64)
!756 = !DILocation(line: 155, column: 17, scope: !741)
!757 = !DILocation(line: 156, column: 6, scope: !741)
!758 = !DILocation(line: 156, column: 10, scope: !741)
!759 = !DILocation(line: 156, column: 41, scope: !741)
!760 = !DILocation(line: 156, column: 5, scope: !741)
!761 = !DILocation(line: 156, column: 59, scope: !741)
!762 = !DILocation(line: 156, column: 62, scope: !741)
!763 = !DILocation(line: 156, column: 57, scope: !741)
!764 = !DILocalVariable(name: "shift", scope: !741, file: !105, line: 157, type: !6)
!765 = !DILocation(line: 157, column: 7, scope: !741)
!766 = !DILocation(line: 157, column: 15, scope: !741)
!767 = !DILocation(line: 157, column: 18, scope: !741)
!768 = !DILocalVariable(name: "r", scope: !741, file: !105, line: 158, type: !6)
!769 = !DILocation(line: 158, column: 7, scope: !741)
!770 = !DILocation(line: 158, column: 13, scope: !741)
!771 = !DILocation(line: 158, column: 12, scope: !741)
!772 = !DILocation(line: 158, column: 18, scope: !741)
!773 = !DILocation(line: 158, column: 15, scope: !741)
!774 = !DILocation(line: 158, column: 25, scope: !741)
!775 = !DILocation(line: 159, column: 11, scope: !741)
!776 = !DILocation(line: 159, column: 13, scope: !741)
!777 = !DILocation(line: 159, column: 20, scope: !741)
!778 = !DILocation(line: 159, column: 18, scope: !741)
!779 = !DILocation(line: 159, column: 26, scope: !741)
!780 = !DILocation(line: 159, column: 23, scope: !741)
!781 = !DILocation(line: 159, column: 4, scope: !741)
!782 = !DILocation(line: 159, column: 6, scope: !741)
!783 = !DILocation(line: 160, column: 10, scope: !741)
!784 = !DILocation(line: 160, column: 3, scope: !741)
!785 = !DILocalVariable(name: "o", arg: 1, scope: !786, file: !105, line: 152, type: !789)
!786 = distinct !DISubprogram(name: "set_char_quoting", scope: !105, file: !105, line: 152, type: !787, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !797, retainedNodes: !11)
!787 = !DISubroutineType(types: !788)
!788 = !{!6, !789, !9, !6}
!789 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !790, size: 64)
!790 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !791)
!791 = !{!792, !793, !794, !795, !796}
!792 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !790, file: !105, line: 68, baseType: !82, size: 32)
!793 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !790, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!794 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !790, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!795 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !790, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!796 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !790, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!797 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !798, nameTableKind: None)
!798 = !{!799, !801, !803, !805, !807, !809, !816, !818}
!799 = !DIGlobalVariableExpression(var: !800, expr: !DIExpression())
!800 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !797, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!801 = !DIGlobalVariableExpression(var: !802, expr: !DIExpression())
!802 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !797, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!803 = !DIGlobalVariableExpression(var: !804, expr: !DIExpression())
!804 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !797, file: !105, line: 1052, type: !790, isLocal: false, isDefinition: true)
!805 = !DIGlobalVariableExpression(var: !806, expr: !DIExpression())
!806 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !797, file: !105, line: 116, type: !790, isLocal: true, isDefinition: true)
!807 = !DIGlobalVariableExpression(var: !808, expr: !DIExpression())
!808 = distinct !DIGlobalVariable(name: "slot0", scope: !797, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!809 = !DIGlobalVariableExpression(var: !810, expr: !DIExpression())
!810 = distinct !DIGlobalVariable(name: "slotvec", scope: !797, file: !105, line: 845, type: !811, isLocal: true, isDefinition: true)
!811 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !812, size: 64)
!812 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !813)
!813 = !{!814, !815}
!814 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !812, file: !105, line: 836, baseType: !99, size: 64)
!815 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !812, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!816 = !DIGlobalVariableExpression(var: !817, expr: !DIExpression())
!817 = distinct !DIGlobalVariable(name: "nslots", scope: !797, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!818 = !DIGlobalVariableExpression(var: !819, expr: !DIExpression())
!819 = distinct !DIGlobalVariable(name: "slotvec0", scope: !797, file: !105, line: 844, type: !812, isLocal: true, isDefinition: true)
!820 = !DILocalVariable(name: "c", arg: 2, scope: !786, file: !105, line: 152, type: !9)
!821 = !DILocalVariable(name: "i", arg: 3, scope: !786, file: !105, line: 152, type: !6)
!822 = !DILocalVariable(name: "uc", scope: !786, file: !105, line: 154, type: !167)
!823 = !DILocalVariable(name: "p", scope: !786, file: !105, line: 155, type: !755)
!824 = !DILocalVariable(name: "shift", scope: !825, file: !105, line: 157, type: !6)
!825 = distinct !DISubprogram(name: "set_char_quoting", scope: !105, file: !105, line: 152, type: !826, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !836, retainedNodes: !11)
!826 = !DISubroutineType(types: !827)
!827 = !{!6, !828, !9, !6}
!828 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !829, size: 64)
!829 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !830)
!830 = !{!831, !832, !833, !834, !835}
!831 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !829, file: !105, line: 68, baseType: !82, size: 32)
!832 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !829, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!833 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !829, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!834 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !829, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!835 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !829, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!836 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !837, nameTableKind: None)
!837 = !{!838, !840, !842, !844, !846, !848, !855, !857}
!838 = !DIGlobalVariableExpression(var: !839, expr: !DIExpression())
!839 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !836, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!840 = !DIGlobalVariableExpression(var: !841, expr: !DIExpression())
!841 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !836, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!842 = !DIGlobalVariableExpression(var: !843, expr: !DIExpression())
!843 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !836, file: !105, line: 1052, type: !829, isLocal: false, isDefinition: true)
!844 = !DIGlobalVariableExpression(var: !845, expr: !DIExpression())
!845 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !836, file: !105, line: 116, type: !829, isLocal: true, isDefinition: true)
!846 = !DIGlobalVariableExpression(var: !847, expr: !DIExpression())
!847 = distinct !DIGlobalVariable(name: "slot0", scope: !836, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!848 = !DIGlobalVariableExpression(var: !849, expr: !DIExpression())
!849 = distinct !DIGlobalVariable(name: "slotvec", scope: !836, file: !105, line: 845, type: !850, isLocal: true, isDefinition: true)
!850 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !851, size: 64)
!851 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !852)
!852 = !{!853, !854}
!853 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !851, file: !105, line: 836, baseType: !99, size: 64)
!854 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !851, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!855 = !DIGlobalVariableExpression(var: !856, expr: !DIExpression())
!856 = distinct !DIGlobalVariable(name: "nslots", scope: !836, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!857 = !DIGlobalVariableExpression(var: !858, expr: !DIExpression())
!858 = distinct !DIGlobalVariable(name: "slotvec0", scope: !836, file: !105, line: 844, type: !851, isLocal: true, isDefinition: true)
!859 = !DILocalVariable(name: "r", scope: !825, file: !105, line: 158, type: !6)
!860 = distinct !DISubprogram(name: "quotearg_char_mem", scope: !105, file: !105, line: 982, type: !861, scopeLine: 983, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !79, retainedNodes: !11)
!861 = !DISubroutineType(types: !862)
!862 = !{!8, !23, !99, !9}
!863 = !DILocalVariable(name: "arg", arg: 1, scope: !860, file: !105, line: 982, type: !23)
!864 = !DILocation(line: 982, column: 32, scope: !860)
!865 = !DILocalVariable(name: "argsize", arg: 2, scope: !860, file: !105, line: 982, type: !99)
!866 = !DILocation(line: 982, column: 44, scope: !860)
!867 = !DILocalVariable(name: "ch", arg: 3, scope: !860, file: !105, line: 982, type: !9)
!868 = !DILocation(line: 982, column: 58, scope: !860)
!869 = !DILocalVariable(name: "options", scope: !860, file: !105, line: 984, type: !118)
!870 = !DILocation(line: 984, column: 26, scope: !860)
!871 = !DILocation(line: 985, column: 13, scope: !860)
!872 = !DILocation(line: 986, column: 31, scope: !860)
!873 = !DILocation(line: 986, column: 3, scope: !860)
!874 = !DILocation(line: 987, column: 33, scope: !860)
!875 = !DILocation(line: 987, column: 38, scope: !860)
!876 = !DILocation(line: 987, column: 10, scope: !860)
!877 = !DILocation(line: 987, column: 3, scope: !860)
!878 = !DILocalVariable(name: "arg", arg: 1, scope: !879, file: !105, line: 982, type: !23)
!879 = distinct !DISubprogram(name: "quotearg_char_mem", scope: !105, file: !105, line: 982, type: !861, scopeLine: 983, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !880, retainedNodes: !11)
!880 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !881, nameTableKind: None)
!881 = !{!882, !884, !886, !895, !897, !899, !906, !908}
!882 = !DIGlobalVariableExpression(var: !883, expr: !DIExpression())
!883 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !880, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!884 = !DIGlobalVariableExpression(var: !885, expr: !DIExpression())
!885 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !880, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!886 = !DIGlobalVariableExpression(var: !887, expr: !DIExpression())
!887 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !880, file: !105, line: 1052, type: !888, isLocal: false, isDefinition: true)
!888 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !889)
!889 = !{!890, !891, !892, !893, !894}
!890 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !888, file: !105, line: 68, baseType: !82, size: 32)
!891 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !888, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!892 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !888, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!893 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !888, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!894 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !888, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!895 = !DIGlobalVariableExpression(var: !896, expr: !DIExpression())
!896 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !880, file: !105, line: 116, type: !888, isLocal: true, isDefinition: true)
!897 = !DIGlobalVariableExpression(var: !898, expr: !DIExpression())
!898 = distinct !DIGlobalVariable(name: "slot0", scope: !880, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!899 = !DIGlobalVariableExpression(var: !900, expr: !DIExpression())
!900 = distinct !DIGlobalVariable(name: "slotvec", scope: !880, file: !105, line: 845, type: !901, isLocal: true, isDefinition: true)
!901 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !902, size: 64)
!902 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !903)
!903 = !{!904, !905}
!904 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !902, file: !105, line: 836, baseType: !99, size: 64)
!905 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !902, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!906 = !DIGlobalVariableExpression(var: !907, expr: !DIExpression())
!907 = distinct !DIGlobalVariable(name: "nslots", scope: !880, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!908 = !DIGlobalVariableExpression(var: !909, expr: !DIExpression())
!909 = distinct !DIGlobalVariable(name: "slotvec0", scope: !880, file: !105, line: 844, type: !902, isLocal: true, isDefinition: true)
!910 = !DILocalVariable(name: "argsize", arg: 2, scope: !879, file: !105, line: 982, type: !99)
!911 = !DILocalVariable(name: "ch", arg: 3, scope: !879, file: !105, line: 982, type: !9)
!912 = !DILocalVariable(name: "options", scope: !879, file: !105, line: 984, type: !888)
!913 = distinct !DISubprogram(name: "quotearg_n_options", scope: !105, file: !105, line: 877, type: !914, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !79, retainedNodes: !11)
!914 = !DISubroutineType(types: !915)
!915 = !{!8, !6, !23, !99, !916}
!916 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !917, size: 64)
!917 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !118)
!918 = !DILocalVariable(name: "n", arg: 1, scope: !913, file: !105, line: 877, type: !6)
!919 = !DILocation(line: 877, column: 25, scope: !913)
!920 = !DILocalVariable(name: "arg", arg: 2, scope: !913, file: !105, line: 877, type: !23)
!921 = !DILocation(line: 877, column: 40, scope: !913)
!922 = !DILocalVariable(name: "argsize", arg: 3, scope: !913, file: !105, line: 877, type: !99)
!923 = !DILocation(line: 877, column: 52, scope: !913)
!924 = !DILocalVariable(name: "options", arg: 4, scope: !913, file: !105, line: 878, type: !916)
!925 = !DILocation(line: 878, column: 51, scope: !913)
!926 = !DILocalVariable(name: "e", scope: !913, file: !105, line: 880, type: !6)
!927 = !DILocation(line: 880, column: 7, scope: !913)
!928 = !DILocation(line: 880, column: 11, scope: !913)
!929 = !DILocalVariable(name: "sv", scope: !913, file: !105, line: 882, type: !133)
!930 = !DILocation(line: 882, column: 19, scope: !913)
!931 = !DILocation(line: 882, column: 24, scope: !913)
!932 = !DILocation(line: 884, column: 7, scope: !933)
!933 = distinct !DILexicalBlock(scope: !913, file: !105, line: 884, column: 7)
!934 = !DILocation(line: 884, column: 9, scope: !933)
!935 = !DILocation(line: 884, column: 7, scope: !913)
!936 = !DILocation(line: 885, column: 5, scope: !933)
!937 = !DILocation(line: 887, column: 7, scope: !938)
!938 = distinct !DILexicalBlock(scope: !913, file: !105, line: 887, column: 7)
!939 = !DILocation(line: 887, column: 17, scope: !938)
!940 = !DILocation(line: 887, column: 14, scope: !938)
!941 = !DILocation(line: 887, column: 7, scope: !913)
!942 = !DILocalVariable(name: "preallocated", scope: !943, file: !105, line: 889, type: !41)
!943 = distinct !DILexicalBlock(scope: !938, file: !105, line: 888, column: 5)
!944 = !DILocation(line: 889, column: 12, scope: !943)
!945 = !DILocation(line: 889, column: 28, scope: !943)
!946 = !DILocation(line: 889, column: 31, scope: !943)
!947 = !DILocalVariable(name: "nmax", scope: !943, file: !105, line: 890, type: !6)
!948 = !DILocation(line: 890, column: 11, scope: !943)
!949 = !DILocation(line: 892, column: 11, scope: !950)
!950 = distinct !DILexicalBlock(scope: !943, file: !105, line: 892, column: 11)
!951 = !DILocation(line: 892, column: 18, scope: !950)
!952 = !DILocation(line: 892, column: 16, scope: !950)
!953 = !DILocation(line: 892, column: 11, scope: !943)
!954 = !DILocation(line: 893, column: 9, scope: !950)
!955 = !DILocation(line: 895, column: 32, scope: !943)
!956 = !DILocation(line: 895, column: 54, scope: !943)
!957 = !DILocation(line: 895, column: 59, scope: !943)
!958 = !DILocation(line: 895, column: 61, scope: !943)
!959 = !DILocation(line: 895, column: 58, scope: !943)
!960 = !DILocation(line: 895, column: 66, scope: !943)
!961 = !DILocation(line: 895, column: 22, scope: !943)
!962 = !DILocation(line: 895, column: 20, scope: !943)
!963 = !DILocation(line: 895, column: 15, scope: !943)
!964 = !DILocation(line: 896, column: 11, scope: !965)
!965 = distinct !DILexicalBlock(scope: !943, file: !105, line: 896, column: 11)
!966 = !DILocation(line: 896, column: 11, scope: !943)
!967 = !DILocation(line: 897, column: 10, scope: !965)
!968 = !DILocation(line: 897, column: 15, scope: !965)
!969 = !DILocation(line: 897, column: 9, scope: !965)
!970 = !DILocation(line: 898, column: 15, scope: !943)
!971 = !DILocation(line: 898, column: 20, scope: !943)
!972 = !DILocation(line: 898, column: 18, scope: !943)
!973 = !DILocation(line: 898, column: 7, scope: !943)
!974 = !DILocation(line: 898, column: 32, scope: !943)
!975 = !DILocation(line: 898, column: 34, scope: !943)
!976 = !DILocation(line: 898, column: 40, scope: !943)
!977 = !DILocation(line: 898, column: 38, scope: !943)
!978 = !DILocation(line: 898, column: 31, scope: !943)
!979 = !DILocation(line: 898, column: 48, scope: !943)
!980 = !DILocation(line: 899, column: 16, scope: !943)
!981 = !DILocation(line: 899, column: 18, scope: !943)
!982 = !DILocation(line: 899, column: 14, scope: !943)
!983 = !DILocation(line: 900, column: 5, scope: !943)
!984 = !DILocalVariable(name: "size", scope: !985, file: !105, line: 903, type: !99)
!985 = distinct !DILexicalBlock(scope: !913, file: !105, line: 902, column: 3)
!986 = !DILocation(line: 903, column: 12, scope: !985)
!987 = !DILocation(line: 903, column: 19, scope: !985)
!988 = !DILocation(line: 903, column: 22, scope: !985)
!989 = !DILocation(line: 903, column: 25, scope: !985)
!990 = !DILocalVariable(name: "val", scope: !985, file: !105, line: 904, type: !8)
!991 = !DILocation(line: 904, column: 11, scope: !985)
!992 = !DILocation(line: 904, column: 17, scope: !985)
!993 = !DILocation(line: 904, column: 20, scope: !985)
!994 = !DILocation(line: 904, column: 23, scope: !985)
!995 = !DILocalVariable(name: "flags", scope: !985, file: !105, line: 906, type: !6)
!996 = !DILocation(line: 906, column: 9, scope: !985)
!997 = !DILocation(line: 906, column: 17, scope: !985)
!998 = !DILocation(line: 906, column: 26, scope: !985)
!999 = !DILocation(line: 906, column: 32, scope: !985)
!1000 = !DILocalVariable(name: "qsize", scope: !985, file: !105, line: 907, type: !99)
!1001 = !DILocation(line: 907, column: 12, scope: !985)
!1002 = !DILocation(line: 907, column: 46, scope: !985)
!1003 = !DILocation(line: 907, column: 51, scope: !985)
!1004 = !DILocation(line: 907, column: 57, scope: !985)
!1005 = !DILocation(line: 907, column: 62, scope: !985)
!1006 = !DILocation(line: 908, column: 46, scope: !985)
!1007 = !DILocation(line: 908, column: 55, scope: !985)
!1008 = !DILocation(line: 908, column: 62, scope: !985)
!1009 = !DILocation(line: 909, column: 46, scope: !985)
!1010 = !DILocation(line: 909, column: 55, scope: !985)
!1011 = !DILocation(line: 910, column: 46, scope: !985)
!1012 = !DILocation(line: 910, column: 55, scope: !985)
!1013 = !DILocation(line: 911, column: 46, scope: !985)
!1014 = !DILocation(line: 911, column: 55, scope: !985)
!1015 = !DILocation(line: 907, column: 20, scope: !985)
!1016 = !DILocation(line: 913, column: 9, scope: !1017)
!1017 = distinct !DILexicalBlock(scope: !985, file: !105, line: 913, column: 9)
!1018 = !DILocation(line: 913, column: 17, scope: !1017)
!1019 = !DILocation(line: 913, column: 14, scope: !1017)
!1020 = !DILocation(line: 913, column: 9, scope: !985)
!1021 = !DILocation(line: 915, column: 29, scope: !1022)
!1022 = distinct !DILexicalBlock(scope: !1017, file: !105, line: 914, column: 7)
!1023 = !DILocation(line: 915, column: 35, scope: !1022)
!1024 = !DILocation(line: 915, column: 27, scope: !1022)
!1025 = !DILocation(line: 915, column: 9, scope: !1022)
!1026 = !DILocation(line: 915, column: 12, scope: !1022)
!1027 = !DILocation(line: 915, column: 15, scope: !1022)
!1028 = !DILocation(line: 915, column: 20, scope: !1022)
!1029 = !DILocation(line: 916, column: 13, scope: !1030)
!1030 = distinct !DILexicalBlock(scope: !1022, file: !105, line: 916, column: 13)
!1031 = !DILocation(line: 916, column: 17, scope: !1030)
!1032 = !DILocation(line: 916, column: 13, scope: !1022)
!1033 = !DILocation(line: 917, column: 17, scope: !1030)
!1034 = !DILocation(line: 917, column: 11, scope: !1030)
!1035 = !DILocation(line: 918, column: 39, scope: !1022)
!1036 = !DILocation(line: 918, column: 27, scope: !1022)
!1037 = !DILocation(line: 918, column: 25, scope: !1022)
!1038 = !DILocation(line: 918, column: 9, scope: !1022)
!1039 = !DILocation(line: 918, column: 12, scope: !1022)
!1040 = !DILocation(line: 918, column: 15, scope: !1022)
!1041 = !DILocation(line: 918, column: 19, scope: !1022)
!1042 = !DILocation(line: 919, column: 35, scope: !1022)
!1043 = !DILocation(line: 919, column: 40, scope: !1022)
!1044 = !DILocation(line: 919, column: 46, scope: !1022)
!1045 = !DILocation(line: 919, column: 51, scope: !1022)
!1046 = !DILocation(line: 919, column: 60, scope: !1022)
!1047 = !DILocation(line: 919, column: 69, scope: !1022)
!1048 = !DILocation(line: 920, column: 35, scope: !1022)
!1049 = !DILocation(line: 920, column: 42, scope: !1022)
!1050 = !DILocation(line: 920, column: 51, scope: !1022)
!1051 = !DILocation(line: 921, column: 35, scope: !1022)
!1052 = !DILocation(line: 921, column: 44, scope: !1022)
!1053 = !DILocation(line: 922, column: 35, scope: !1022)
!1054 = !DILocation(line: 922, column: 44, scope: !1022)
!1055 = !DILocation(line: 919, column: 9, scope: !1022)
!1056 = !DILocation(line: 923, column: 7, scope: !1022)
!1057 = !DILocation(line: 925, column: 13, scope: !985)
!1058 = !DILocation(line: 925, column: 5, scope: !985)
!1059 = !DILocation(line: 925, column: 11, scope: !985)
!1060 = !DILocation(line: 926, column: 12, scope: !985)
!1061 = !DILocation(line: 926, column: 5, scope: !985)
!1062 = !DILocalVariable(name: "n", arg: 1, scope: !1063, file: !105, line: 877, type: !6)
!1063 = distinct !DISubprogram(name: "quotearg_n_options", scope: !105, file: !105, line: 877, type: !1064, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1075, retainedNodes: !11)
!1064 = !DISubroutineType(types: !1065)
!1065 = !{!8, !6, !23, !99, !1066}
!1066 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1067, size: 64)
!1067 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1068)
!1068 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !1069)
!1069 = !{!1070, !1071, !1072, !1073, !1074}
!1070 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1068, file: !105, line: 68, baseType: !82, size: 32)
!1071 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1068, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!1072 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1068, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!1073 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1068, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!1074 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1068, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!1075 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !1076, nameTableKind: None)
!1076 = !{!1077, !1079, !1081, !1083, !1085, !1087, !1094, !1096}
!1077 = !DIGlobalVariableExpression(var: !1078, expr: !DIExpression())
!1078 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1075, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!1079 = !DIGlobalVariableExpression(var: !1080, expr: !DIExpression())
!1080 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1075, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!1081 = !DIGlobalVariableExpression(var: !1082, expr: !DIExpression())
!1082 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1075, file: !105, line: 1052, type: !1068, isLocal: false, isDefinition: true)
!1083 = !DIGlobalVariableExpression(var: !1084, expr: !DIExpression())
!1084 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1075, file: !105, line: 116, type: !1068, isLocal: true, isDefinition: true)
!1085 = !DIGlobalVariableExpression(var: !1086, expr: !DIExpression())
!1086 = distinct !DIGlobalVariable(name: "slot0", scope: !1075, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!1087 = !DIGlobalVariableExpression(var: !1088, expr: !DIExpression())
!1088 = distinct !DIGlobalVariable(name: "slotvec", scope: !1075, file: !105, line: 845, type: !1089, isLocal: true, isDefinition: true)
!1089 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1090, size: 64)
!1090 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !1091)
!1091 = !{!1092, !1093}
!1092 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1090, file: !105, line: 836, baseType: !99, size: 64)
!1093 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1090, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!1094 = !DIGlobalVariableExpression(var: !1095, expr: !DIExpression())
!1095 = distinct !DIGlobalVariable(name: "nslots", scope: !1075, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!1096 = !DIGlobalVariableExpression(var: !1097, expr: !DIExpression())
!1097 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1075, file: !105, line: 844, type: !1090, isLocal: true, isDefinition: true)
!1098 = !DILocalVariable(name: "arg", arg: 2, scope: !1063, file: !105, line: 877, type: !23)
!1099 = !DILocalVariable(name: "argsize", arg: 3, scope: !1063, file: !105, line: 877, type: !99)
!1100 = !DILocalVariable(name: "options", arg: 4, scope: !1063, file: !105, line: 878, type: !1066)
!1101 = !DILocalVariable(name: "e", scope: !1063, file: !105, line: 880, type: !6)
!1102 = !DILocalVariable(name: "sv", scope: !1063, file: !105, line: 882, type: !1089)
!1103 = !DILocalVariable(name: "nmax", scope: !1104, file: !105, line: 890, type: !6)
!1104 = distinct !DILexicalBlock(scope: !1105, file: !105, line: 888, column: 5)
!1105 = distinct !DILexicalBlock(scope: !1106, file: !105, line: 887, column: 7)
!1106 = distinct !DISubprogram(name: "quotearg_n_options", scope: !105, file: !105, line: 877, type: !1107, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1118, retainedNodes: !11)
!1107 = !DISubroutineType(types: !1108)
!1108 = !{!8, !6, !23, !99, !1109}
!1109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1110, size: 64)
!1110 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1111)
!1111 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !1112)
!1112 = !{!1113, !1114, !1115, !1116, !1117}
!1113 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1111, file: !105, line: 68, baseType: !82, size: 32)
!1114 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1111, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!1115 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1111, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!1116 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1111, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!1117 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1111, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!1118 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !1119, nameTableKind: None)
!1119 = !{!1120, !1122, !1124, !1126, !1128, !1130, !1137, !1139}
!1120 = !DIGlobalVariableExpression(var: !1121, expr: !DIExpression())
!1121 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1118, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!1122 = !DIGlobalVariableExpression(var: !1123, expr: !DIExpression())
!1123 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1118, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!1124 = !DIGlobalVariableExpression(var: !1125, expr: !DIExpression())
!1125 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1118, file: !105, line: 1052, type: !1111, isLocal: false, isDefinition: true)
!1126 = !DIGlobalVariableExpression(var: !1127, expr: !DIExpression())
!1127 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1118, file: !105, line: 116, type: !1111, isLocal: true, isDefinition: true)
!1128 = !DIGlobalVariableExpression(var: !1129, expr: !DIExpression())
!1129 = distinct !DIGlobalVariable(name: "slot0", scope: !1118, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!1130 = !DIGlobalVariableExpression(var: !1131, expr: !DIExpression())
!1131 = distinct !DIGlobalVariable(name: "slotvec", scope: !1118, file: !105, line: 845, type: !1132, isLocal: true, isDefinition: true)
!1132 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1133, size: 64)
!1133 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !1134)
!1134 = !{!1135, !1136}
!1135 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1133, file: !105, line: 836, baseType: !99, size: 64)
!1136 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1133, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!1137 = !DIGlobalVariableExpression(var: !1138, expr: !DIExpression())
!1138 = distinct !DIGlobalVariable(name: "nslots", scope: !1118, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!1139 = !DIGlobalVariableExpression(var: !1140, expr: !DIExpression())
!1140 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1118, file: !105, line: 844, type: !1133, isLocal: true, isDefinition: true)
!1141 = !DILocalVariable(name: "val", scope: !1142, file: !105, line: 904, type: !8)
!1142 = distinct !DILexicalBlock(scope: !1143, file: !105, line: 902, column: 3)
!1143 = distinct !DISubprogram(name: "quotearg_n_options", scope: !105, file: !105, line: 877, type: !1144, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1155, retainedNodes: !11)
!1144 = !DISubroutineType(types: !1145)
!1145 = !{!8, !6, !23, !99, !1146}
!1146 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1147, size: 64)
!1147 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1148)
!1148 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !1149)
!1149 = !{!1150, !1151, !1152, !1153, !1154}
!1150 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1148, file: !105, line: 68, baseType: !82, size: 32)
!1151 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1148, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!1152 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1148, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!1153 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1148, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!1154 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1148, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!1155 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !1156, nameTableKind: None)
!1156 = !{!1157, !1159, !1161, !1163, !1165, !1167, !1174, !1176}
!1157 = !DIGlobalVariableExpression(var: !1158, expr: !DIExpression())
!1158 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1155, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!1159 = !DIGlobalVariableExpression(var: !1160, expr: !DIExpression())
!1160 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1155, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!1161 = !DIGlobalVariableExpression(var: !1162, expr: !DIExpression())
!1162 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1155, file: !105, line: 1052, type: !1148, isLocal: false, isDefinition: true)
!1163 = !DIGlobalVariableExpression(var: !1164, expr: !DIExpression())
!1164 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1155, file: !105, line: 116, type: !1148, isLocal: true, isDefinition: true)
!1165 = !DIGlobalVariableExpression(var: !1166, expr: !DIExpression())
!1166 = distinct !DIGlobalVariable(name: "slot0", scope: !1155, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!1167 = !DIGlobalVariableExpression(var: !1168, expr: !DIExpression())
!1168 = distinct !DIGlobalVariable(name: "slotvec", scope: !1155, file: !105, line: 845, type: !1169, isLocal: true, isDefinition: true)
!1169 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1170, size: 64)
!1170 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !1171)
!1171 = !{!1172, !1173}
!1172 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1170, file: !105, line: 836, baseType: !99, size: 64)
!1173 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1170, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!1174 = !DIGlobalVariableExpression(var: !1175, expr: !DIExpression())
!1175 = distinct !DIGlobalVariable(name: "nslots", scope: !1155, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!1176 = !DIGlobalVariableExpression(var: !1177, expr: !DIExpression())
!1177 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1155, file: !105, line: 844, type: !1170, isLocal: true, isDefinition: true)
!1178 = !DILocalVariable(name: "flags", scope: !1142, file: !105, line: 906, type: !6)
!1179 = !DILocalVariable(name: "qsize", scope: !1142, file: !105, line: 907, type: !99)
!1180 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !105, file: !105, line: 256, type: !1181, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !79, retainedNodes: !11)
!1181 = !DISubroutineType(types: !1182)
!1182 = !{!99, !8, !99, !23, !99, !82, !6, !1183, !23, !23}
!1183 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1184, size: 64)
!1184 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !84)
!1185 = !DILocalVariable(name: "buffer", arg: 1, scope: !1180, file: !105, line: 256, type: !8)
!1186 = !DILocation(line: 256, column: 33, scope: !1180)
!1187 = !DILocalVariable(name: "buffersize", arg: 2, scope: !1180, file: !105, line: 256, type: !99)
!1188 = !DILocation(line: 256, column: 48, scope: !1180)
!1189 = !DILocalVariable(name: "arg", arg: 3, scope: !1180, file: !105, line: 257, type: !23)
!1190 = !DILocation(line: 257, column: 39, scope: !1180)
!1191 = !DILocalVariable(name: "argsize", arg: 4, scope: !1180, file: !105, line: 257, type: !99)
!1192 = !DILocation(line: 257, column: 51, scope: !1180)
!1193 = !DILocalVariable(name: "quoting_style", arg: 5, scope: !1180, file: !105, line: 258, type: !82)
!1194 = !DILocation(line: 258, column: 46, scope: !1180)
!1195 = !DILocalVariable(name: "flags", arg: 6, scope: !1180, file: !105, line: 258, type: !6)
!1196 = !DILocation(line: 258, column: 65, scope: !1180)
!1197 = !DILocalVariable(name: "quote_these_too", arg: 7, scope: !1180, file: !105, line: 259, type: !1183)
!1198 = !DILocation(line: 259, column: 47, scope: !1180)
!1199 = !DILocalVariable(name: "left_quote", arg: 8, scope: !1180, file: !105, line: 260, type: !23)
!1200 = !DILocation(line: 260, column: 39, scope: !1180)
!1201 = !DILocalVariable(name: "right_quote", arg: 9, scope: !1180, file: !105, line: 261, type: !23)
!1202 = !DILocation(line: 261, column: 39, scope: !1180)
!1203 = !DILocalVariable(name: "i", scope: !1180, file: !105, line: 263, type: !99)
!1204 = !DILocation(line: 263, column: 10, scope: !1180)
!1205 = !DILocalVariable(name: "len", scope: !1180, file: !105, line: 264, type: !99)
!1206 = !DILocation(line: 264, column: 10, scope: !1180)
!1207 = !DILocalVariable(name: "orig_buffersize", scope: !1180, file: !105, line: 265, type: !99)
!1208 = !DILocation(line: 265, column: 10, scope: !1180)
!1209 = !DILocalVariable(name: "quote_string", scope: !1180, file: !105, line: 266, type: !23)
!1210 = !DILocation(line: 266, column: 15, scope: !1180)
!1211 = !DILocalVariable(name: "quote_string_len", scope: !1180, file: !105, line: 267, type: !99)
!1212 = !DILocation(line: 267, column: 10, scope: !1180)
!1213 = !DILocalVariable(name: "backslash_escapes", scope: !1180, file: !105, line: 268, type: !41)
!1214 = !DILocation(line: 268, column: 8, scope: !1180)
!1215 = !DILocalVariable(name: "unibyte_locale", scope: !1180, file: !105, line: 269, type: !41)
!1216 = !DILocation(line: 269, column: 8, scope: !1180)
!1217 = !DILocation(line: 269, column: 25, scope: !1180)
!1218 = !DILocation(line: 269, column: 36, scope: !1180)
!1219 = !DILocalVariable(name: "elide_outer_quotes", scope: !1180, file: !105, line: 270, type: !41)
!1220 = !DILocation(line: 270, column: 8, scope: !1180)
!1221 = !DILocation(line: 270, column: 30, scope: !1180)
!1222 = !DILocation(line: 270, column: 36, scope: !1180)
!1223 = !DILocation(line: 270, column: 61, scope: !1180)
!1224 = !DILocalVariable(name: "pending_shell_escape_end", scope: !1180, file: !105, line: 271, type: !41)
!1225 = !DILocation(line: 271, column: 8, scope: !1180)
!1226 = !DILocalVariable(name: "encountered_single_quote", scope: !1180, file: !105, line: 272, type: !41)
!1227 = !DILocation(line: 272, column: 8, scope: !1180)
!1228 = !DILocalVariable(name: "all_c_and_shell_quote_compat", scope: !1180, file: !105, line: 273, type: !41)
!1229 = !DILocation(line: 273, column: 8, scope: !1180)
!1230 = !DILocation(line: 273, column: 3, scope: !1180)
!1231 = !DILabel(scope: !1180, name: "process_input", file: !105, line: 314)
!1232 = !DILocation(line: 314, column: 2, scope: !1180)
!1233 = !DILocation(line: 316, column: 11, scope: !1180)
!1234 = !DILocation(line: 316, column: 3, scope: !1180)
!1235 = !DILocation(line: 319, column: 21, scope: !1236)
!1236 = distinct !DILexicalBlock(scope: !1180, file: !105, line: 317, column: 5)
!1237 = !DILocation(line: 320, column: 26, scope: !1236)
!1238 = !DILocation(line: 321, column: 7, scope: !1236)
!1239 = !DILocation(line: 323, column: 12, scope: !1240)
!1240 = distinct !DILexicalBlock(scope: !1236, file: !105, line: 323, column: 11)
!1241 = !DILocation(line: 323, column: 11, scope: !1236)
!1242 = !DILocation(line: 324, column: 9, scope: !1240)
!1243 = !DILocation(line: 324, column: 9, scope: !1244)
!1244 = distinct !DILexicalBlock(scope: !1245, file: !105, line: 324, column: 9)
!1245 = distinct !DILexicalBlock(scope: !1240, file: !105, line: 324, column: 9)
!1246 = !DILocation(line: 324, column: 9, scope: !1245)
!1247 = !DILocation(line: 325, column: 25, scope: !1236)
!1248 = !DILocation(line: 326, column: 20, scope: !1236)
!1249 = !DILocation(line: 327, column: 24, scope: !1236)
!1250 = !DILocation(line: 328, column: 7, scope: !1236)
!1251 = !DILocation(line: 331, column: 25, scope: !1236)
!1252 = !DILocation(line: 332, column: 26, scope: !1236)
!1253 = !DILocation(line: 333, column: 7, scope: !1236)
!1254 = !DILocation(line: 339, column: 13, scope: !1255)
!1255 = distinct !DILexicalBlock(scope: !1256, file: !105, line: 339, column: 13)
!1256 = distinct !DILexicalBlock(scope: !1236, file: !105, line: 338, column: 7)
!1257 = !DILocation(line: 339, column: 27, scope: !1255)
!1258 = !DILocation(line: 339, column: 13, scope: !1256)
!1259 = !DILocation(line: 362, column: 50, scope: !1260)
!1260 = distinct !DILexicalBlock(scope: !1255, file: !105, line: 340, column: 11)
!1261 = !DILocation(line: 362, column: 26, scope: !1260)
!1262 = !DILocation(line: 362, column: 24, scope: !1260)
!1263 = !DILocation(line: 363, column: 51, scope: !1260)
!1264 = !DILocation(line: 363, column: 27, scope: !1260)
!1265 = !DILocation(line: 363, column: 25, scope: !1260)
!1266 = !DILocation(line: 364, column: 11, scope: !1260)
!1267 = !DILocation(line: 365, column: 14, scope: !1268)
!1268 = distinct !DILexicalBlock(scope: !1256, file: !105, line: 365, column: 13)
!1269 = !DILocation(line: 365, column: 13, scope: !1256)
!1270 = !DILocation(line: 366, column: 31, scope: !1271)
!1271 = distinct !DILexicalBlock(scope: !1268, file: !105, line: 366, column: 11)
!1272 = !DILocation(line: 366, column: 29, scope: !1271)
!1273 = !DILocation(line: 366, column: 16, scope: !1271)
!1274 = !DILocation(line: 366, column: 44, scope: !1275)
!1275 = distinct !DILexicalBlock(scope: !1271, file: !105, line: 366, column: 11)
!1276 = !DILocation(line: 366, column: 43, scope: !1275)
!1277 = !DILocation(line: 366, column: 11, scope: !1271)
!1278 = !DILocation(line: 367, column: 13, scope: !1275)
!1279 = !DILocation(line: 367, column: 13, scope: !1280)
!1280 = distinct !DILexicalBlock(scope: !1281, file: !105, line: 367, column: 13)
!1281 = distinct !DILexicalBlock(scope: !1275, file: !105, line: 367, column: 13)
!1282 = !DILocation(line: 367, column: 13, scope: !1281)
!1283 = !DILocation(line: 366, column: 70, scope: !1275)
!1284 = !DILocation(line: 366, column: 11, scope: !1275)
!1285 = distinct !{!1285, !1277, !1286}
!1286 = !DILocation(line: 367, column: 13, scope: !1271)
!1287 = !DILocation(line: 368, column: 27, scope: !1256)
!1288 = !DILocation(line: 369, column: 24, scope: !1256)
!1289 = !DILocation(line: 369, column: 22, scope: !1256)
!1290 = !DILocation(line: 370, column: 36, scope: !1256)
!1291 = !DILocation(line: 370, column: 28, scope: !1256)
!1292 = !DILocation(line: 370, column: 26, scope: !1256)
!1293 = !DILocation(line: 372, column: 7, scope: !1236)
!1294 = !DILocation(line: 375, column: 25, scope: !1236)
!1295 = !DILocation(line: 376, column: 7, scope: !1236)
!1296 = !DILocation(line: 378, column: 26, scope: !1236)
!1297 = !DILocation(line: 379, column: 7, scope: !1236)
!1298 = !DILocation(line: 381, column: 12, scope: !1299)
!1299 = distinct !DILexicalBlock(scope: !1236, file: !105, line: 381, column: 11)
!1300 = !DILocation(line: 381, column: 11, scope: !1236)
!1301 = !DILocation(line: 382, column: 27, scope: !1299)
!1302 = !DILocation(line: 382, column: 9, scope: !1299)
!1303 = !DILocation(line: 383, column: 7, scope: !1236)
!1304 = !DILocation(line: 385, column: 21, scope: !1236)
!1305 = !DILocation(line: 386, column: 12, scope: !1306)
!1306 = distinct !DILexicalBlock(scope: !1236, file: !105, line: 386, column: 11)
!1307 = !DILocation(line: 386, column: 11, scope: !1236)
!1308 = !DILocation(line: 387, column: 9, scope: !1306)
!1309 = !DILocation(line: 387, column: 9, scope: !1310)
!1310 = distinct !DILexicalBlock(scope: !1311, file: !105, line: 387, column: 9)
!1311 = distinct !DILexicalBlock(scope: !1306, file: !105, line: 387, column: 9)
!1312 = !DILocation(line: 387, column: 9, scope: !1311)
!1313 = !DILocation(line: 388, column: 20, scope: !1236)
!1314 = !DILocation(line: 389, column: 24, scope: !1236)
!1315 = !DILocation(line: 390, column: 7, scope: !1236)
!1316 = !DILocation(line: 393, column: 26, scope: !1236)
!1317 = !DILocation(line: 394, column: 7, scope: !1236)
!1318 = !DILocation(line: 397, column: 7, scope: !1236)
!1319 = !DILocation(line: 400, column: 10, scope: !1320)
!1320 = distinct !DILexicalBlock(scope: !1180, file: !105, line: 400, column: 3)
!1321 = !DILocation(line: 400, column: 8, scope: !1320)
!1322 = !DILocation(line: 400, column: 19, scope: !1323)
!1323 = distinct !DILexicalBlock(scope: !1320, file: !105, line: 400, column: 3)
!1324 = !DILocation(line: 400, column: 27, scope: !1323)
!1325 = !DILocation(line: 400, column: 41, scope: !1323)
!1326 = !DILocation(line: 400, column: 45, scope: !1323)
!1327 = !DILocation(line: 400, column: 48, scope: !1323)
!1328 = !DILocation(line: 400, column: 58, scope: !1323)
!1329 = !DILocation(line: 400, column: 63, scope: !1323)
!1330 = !DILocation(line: 400, column: 60, scope: !1323)
!1331 = !DILocation(line: 400, column: 16, scope: !1323)
!1332 = !DILocation(line: 400, column: 3, scope: !1320)
!1333 = !DILocalVariable(name: "c", scope: !1334, file: !105, line: 402, type: !167)
!1334 = distinct !DILexicalBlock(scope: !1323, file: !105, line: 401, column: 5)
!1335 = !DILocation(line: 402, column: 21, scope: !1334)
!1336 = !DILocalVariable(name: "esc", scope: !1334, file: !105, line: 403, type: !167)
!1337 = !DILocation(line: 403, column: 21, scope: !1334)
!1338 = !DILocalVariable(name: "is_right_quote", scope: !1334, file: !105, line: 404, type: !41)
!1339 = !DILocation(line: 404, column: 12, scope: !1334)
!1340 = !DILocalVariable(name: "escaping", scope: !1334, file: !105, line: 405, type: !41)
!1341 = !DILocation(line: 405, column: 12, scope: !1334)
!1342 = !DILocalVariable(name: "c_and_shell_quote_compat", scope: !1334, file: !105, line: 406, type: !41)
!1343 = !DILocation(line: 406, column: 12, scope: !1334)
!1344 = !DILocation(line: 408, column: 11, scope: !1345)
!1345 = distinct !DILexicalBlock(scope: !1334, file: !105, line: 408, column: 11)
!1346 = !DILocation(line: 409, column: 11, scope: !1345)
!1347 = !DILocation(line: 409, column: 14, scope: !1345)
!1348 = !DILocation(line: 409, column: 28, scope: !1345)
!1349 = !DILocation(line: 410, column: 11, scope: !1345)
!1350 = !DILocation(line: 410, column: 14, scope: !1345)
!1351 = !DILocation(line: 411, column: 11, scope: !1345)
!1352 = !DILocation(line: 411, column: 15, scope: !1345)
!1353 = !DILocation(line: 411, column: 19, scope: !1345)
!1354 = !DILocation(line: 411, column: 17, scope: !1345)
!1355 = !DILocation(line: 412, column: 19, scope: !1345)
!1356 = !DILocation(line: 412, column: 27, scope: !1345)
!1357 = !DILocation(line: 412, column: 39, scope: !1345)
!1358 = !DILocation(line: 412, column: 46, scope: !1345)
!1359 = !DILocation(line: 412, column: 44, scope: !1345)
!1360 = !DILocation(line: 416, column: 40, scope: !1345)
!1361 = !DILocation(line: 416, column: 32, scope: !1345)
!1362 = !DILocation(line: 416, column: 30, scope: !1345)
!1363 = !DILocation(line: 416, column: 48, scope: !1345)
!1364 = !DILocation(line: 412, column: 15, scope: !1345)
!1365 = !DILocation(line: 417, column: 11, scope: !1345)
!1366 = !DILocation(line: 417, column: 22, scope: !1345)
!1367 = !DILocation(line: 417, column: 28, scope: !1345)
!1368 = !DILocation(line: 417, column: 26, scope: !1345)
!1369 = !DILocation(line: 417, column: 31, scope: !1345)
!1370 = !DILocation(line: 417, column: 45, scope: !1345)
!1371 = !DILocation(line: 417, column: 14, scope: !1345)
!1372 = !DILocation(line: 417, column: 63, scope: !1345)
!1373 = !DILocation(line: 408, column: 11, scope: !1334)
!1374 = !DILocation(line: 419, column: 15, scope: !1375)
!1375 = distinct !DILexicalBlock(scope: !1376, file: !105, line: 419, column: 15)
!1376 = distinct !DILexicalBlock(scope: !1345, file: !105, line: 418, column: 9)
!1377 = !DILocation(line: 419, column: 15, scope: !1376)
!1378 = !DILocation(line: 420, column: 13, scope: !1375)
!1379 = !DILocation(line: 421, column: 26, scope: !1376)
!1380 = !DILocation(line: 422, column: 9, scope: !1376)
!1381 = !DILocation(line: 424, column: 11, scope: !1334)
!1382 = !DILocation(line: 424, column: 15, scope: !1334)
!1383 = !DILocation(line: 424, column: 9, scope: !1334)
!1384 = !DILocation(line: 425, column: 15, scope: !1334)
!1385 = !DILocation(line: 425, column: 7, scope: !1334)
!1386 = !DILocation(line: 428, column: 15, scope: !1387)
!1387 = distinct !DILexicalBlock(scope: !1388, file: !105, line: 428, column: 15)
!1388 = distinct !DILexicalBlock(scope: !1334, file: !105, line: 426, column: 9)
!1389 = !DILocation(line: 428, column: 15, scope: !1388)
!1390 = !DILocation(line: 430, column: 15, scope: !1391)
!1391 = distinct !DILexicalBlock(scope: !1387, file: !105, line: 429, column: 13)
!1392 = !DILocation(line: 430, column: 15, scope: !1393)
!1393 = distinct !DILexicalBlock(scope: !1394, file: !105, line: 430, column: 15)
!1394 = distinct !DILexicalBlock(scope: !1391, file: !105, line: 430, column: 15)
!1395 = !DILocation(line: 430, column: 15, scope: !1394)
!1396 = !DILocation(line: 430, column: 15, scope: !1397)
!1397 = distinct !DILexicalBlock(scope: !1394, file: !105, line: 430, column: 15)
!1398 = !DILocation(line: 430, column: 15, scope: !1399)
!1399 = distinct !DILexicalBlock(scope: !1397, file: !105, line: 430, column: 15)
!1400 = !DILocation(line: 430, column: 15, scope: !1401)
!1401 = distinct !DILexicalBlock(scope: !1402, file: !105, line: 430, column: 15)
!1402 = distinct !DILexicalBlock(scope: !1399, file: !105, line: 430, column: 15)
!1403 = !DILocation(line: 430, column: 15, scope: !1402)
!1404 = !DILocation(line: 430, column: 15, scope: !1405)
!1405 = distinct !DILexicalBlock(scope: !1406, file: !105, line: 430, column: 15)
!1406 = distinct !DILexicalBlock(scope: !1399, file: !105, line: 430, column: 15)
!1407 = !DILocation(line: 430, column: 15, scope: !1406)
!1408 = !DILocation(line: 430, column: 15, scope: !1409)
!1409 = distinct !DILexicalBlock(scope: !1410, file: !105, line: 430, column: 15)
!1410 = distinct !DILexicalBlock(scope: !1399, file: !105, line: 430, column: 15)
!1411 = !DILocation(line: 430, column: 15, scope: !1410)
!1412 = !DILocation(line: 430, column: 15, scope: !1413)
!1413 = distinct !DILexicalBlock(scope: !1414, file: !105, line: 430, column: 15)
!1414 = distinct !DILexicalBlock(scope: !1394, file: !105, line: 430, column: 15)
!1415 = !DILocation(line: 430, column: 15, scope: !1414)
!1416 = !DILocation(line: 437, column: 19, scope: !1417)
!1417 = distinct !DILexicalBlock(scope: !1391, file: !105, line: 437, column: 19)
!1418 = !DILocation(line: 437, column: 33, scope: !1417)
!1419 = !DILocation(line: 438, column: 19, scope: !1417)
!1420 = !DILocation(line: 438, column: 22, scope: !1417)
!1421 = !DILocation(line: 438, column: 24, scope: !1417)
!1422 = !DILocation(line: 438, column: 30, scope: !1417)
!1423 = !DILocation(line: 438, column: 28, scope: !1417)
!1424 = !DILocation(line: 438, column: 38, scope: !1417)
!1425 = !DILocation(line: 438, column: 48, scope: !1417)
!1426 = !DILocation(line: 438, column: 52, scope: !1417)
!1427 = !DILocation(line: 438, column: 54, scope: !1417)
!1428 = !DILocation(line: 438, column: 45, scope: !1417)
!1429 = !DILocation(line: 438, column: 59, scope: !1417)
!1430 = !DILocation(line: 438, column: 62, scope: !1417)
!1431 = !DILocation(line: 438, column: 66, scope: !1417)
!1432 = !DILocation(line: 438, column: 68, scope: !1417)
!1433 = !DILocation(line: 438, column: 73, scope: !1417)
!1434 = !DILocation(line: 437, column: 19, scope: !1391)
!1435 = !DILocation(line: 440, column: 19, scope: !1436)
!1436 = distinct !DILexicalBlock(scope: !1417, file: !105, line: 439, column: 17)
!1437 = !DILocation(line: 440, column: 19, scope: !1438)
!1438 = distinct !DILexicalBlock(scope: !1439, file: !105, line: 440, column: 19)
!1439 = distinct !DILexicalBlock(scope: !1436, file: !105, line: 440, column: 19)
!1440 = !DILocation(line: 440, column: 19, scope: !1439)
!1441 = !DILocation(line: 441, column: 19, scope: !1436)
!1442 = !DILocation(line: 441, column: 19, scope: !1443)
!1443 = distinct !DILexicalBlock(scope: !1444, file: !105, line: 441, column: 19)
!1444 = distinct !DILexicalBlock(scope: !1436, file: !105, line: 441, column: 19)
!1445 = !DILocation(line: 441, column: 19, scope: !1444)
!1446 = !DILocation(line: 442, column: 17, scope: !1436)
!1447 = !DILocation(line: 443, column: 17, scope: !1391)
!1448 = !DILocation(line: 448, column: 13, scope: !1391)
!1449 = !DILocation(line: 449, column: 20, scope: !1450)
!1450 = distinct !DILexicalBlock(scope: !1387, file: !105, line: 449, column: 20)
!1451 = !DILocation(line: 449, column: 26, scope: !1450)
!1452 = !DILocation(line: 449, column: 20, scope: !1387)
!1453 = !DILocation(line: 450, column: 13, scope: !1450)
!1454 = !DILocation(line: 451, column: 11, scope: !1388)
!1455 = !DILocation(line: 454, column: 19, scope: !1388)
!1456 = !DILocation(line: 454, column: 11, scope: !1388)
!1457 = !DILocation(line: 457, column: 19, scope: !1458)
!1458 = distinct !DILexicalBlock(scope: !1459, file: !105, line: 457, column: 19)
!1459 = distinct !DILexicalBlock(scope: !1388, file: !105, line: 455, column: 13)
!1460 = !DILocation(line: 457, column: 19, scope: !1459)
!1461 = !DILocation(line: 458, column: 17, scope: !1458)
!1462 = !DILocation(line: 459, column: 15, scope: !1459)
!1463 = !DILocation(line: 462, column: 20, scope: !1464)
!1464 = distinct !DILexicalBlock(scope: !1459, file: !105, line: 462, column: 19)
!1465 = !DILocation(line: 462, column: 26, scope: !1464)
!1466 = !DILocation(line: 463, column: 19, scope: !1464)
!1467 = !DILocation(line: 463, column: 22, scope: !1464)
!1468 = !DILocation(line: 463, column: 24, scope: !1464)
!1469 = !DILocation(line: 463, column: 30, scope: !1464)
!1470 = !DILocation(line: 463, column: 28, scope: !1464)
!1471 = !DILocation(line: 463, column: 38, scope: !1464)
!1472 = !DILocation(line: 463, column: 41, scope: !1464)
!1473 = !DILocation(line: 463, column: 45, scope: !1464)
!1474 = !DILocation(line: 463, column: 47, scope: !1464)
!1475 = !DILocation(line: 463, column: 52, scope: !1464)
!1476 = !DILocation(line: 462, column: 19, scope: !1459)
!1477 = !DILocation(line: 464, column: 25, scope: !1464)
!1478 = !DILocation(line: 464, column: 29, scope: !1464)
!1479 = !DILocation(line: 464, column: 31, scope: !1464)
!1480 = !DILocation(line: 464, column: 17, scope: !1464)
!1481 = !DILocation(line: 471, column: 25, scope: !1482)
!1482 = distinct !DILexicalBlock(scope: !1483, file: !105, line: 471, column: 25)
!1483 = distinct !DILexicalBlock(scope: !1464, file: !105, line: 465, column: 19)
!1484 = !DILocation(line: 471, column: 25, scope: !1483)
!1485 = !DILocation(line: 472, column: 23, scope: !1482)
!1486 = !DILocation(line: 473, column: 25, scope: !1483)
!1487 = !DILocation(line: 473, column: 29, scope: !1483)
!1488 = !DILocation(line: 473, column: 31, scope: !1483)
!1489 = !DILocation(line: 473, column: 23, scope: !1483)
!1490 = !DILocation(line: 474, column: 23, scope: !1483)
!1491 = !DILocation(line: 475, column: 21, scope: !1483)
!1492 = !DILocation(line: 475, column: 21, scope: !1493)
!1493 = distinct !DILexicalBlock(scope: !1494, file: !105, line: 475, column: 21)
!1494 = distinct !DILexicalBlock(scope: !1483, file: !105, line: 475, column: 21)
!1495 = !DILocation(line: 475, column: 21, scope: !1494)
!1496 = !DILocation(line: 476, column: 21, scope: !1483)
!1497 = !DILocation(line: 476, column: 21, scope: !1498)
!1498 = distinct !DILexicalBlock(scope: !1499, file: !105, line: 476, column: 21)
!1499 = distinct !DILexicalBlock(scope: !1483, file: !105, line: 476, column: 21)
!1500 = !DILocation(line: 476, column: 21, scope: !1499)
!1501 = !DILocation(line: 477, column: 21, scope: !1483)
!1502 = !DILocation(line: 477, column: 21, scope: !1503)
!1503 = distinct !DILexicalBlock(scope: !1504, file: !105, line: 477, column: 21)
!1504 = distinct !DILexicalBlock(scope: !1483, file: !105, line: 477, column: 21)
!1505 = !DILocation(line: 477, column: 21, scope: !1504)
!1506 = !DILocation(line: 478, column: 21, scope: !1483)
!1507 = !DILocation(line: 478, column: 21, scope: !1508)
!1508 = distinct !DILexicalBlock(scope: !1509, file: !105, line: 478, column: 21)
!1509 = distinct !DILexicalBlock(scope: !1483, file: !105, line: 478, column: 21)
!1510 = !DILocation(line: 478, column: 21, scope: !1509)
!1511 = !DILocation(line: 479, column: 21, scope: !1483)
!1512 = !DILocation(line: 482, column: 21, scope: !1483)
!1513 = !DILocation(line: 483, column: 19, scope: !1483)
!1514 = !DILocation(line: 484, column: 15, scope: !1459)
!1515 = !DILocation(line: 487, column: 15, scope: !1459)
!1516 = !DILocation(line: 489, column: 11, scope: !1388)
!1517 = !DILocation(line: 491, column: 24, scope: !1388)
!1518 = !DILocation(line: 491, column: 31, scope: !1388)
!1519 = !DILocation(line: 492, column: 24, scope: !1388)
!1520 = !DILocation(line: 492, column: 31, scope: !1388)
!1521 = !DILocation(line: 493, column: 24, scope: !1388)
!1522 = !DILocation(line: 493, column: 31, scope: !1388)
!1523 = !DILocation(line: 494, column: 24, scope: !1388)
!1524 = !DILocation(line: 494, column: 31, scope: !1388)
!1525 = !DILocation(line: 495, column: 24, scope: !1388)
!1526 = !DILocation(line: 495, column: 31, scope: !1388)
!1527 = !DILocation(line: 496, column: 24, scope: !1388)
!1528 = !DILocation(line: 496, column: 31, scope: !1388)
!1529 = !DILocation(line: 497, column: 24, scope: !1388)
!1530 = !DILocation(line: 497, column: 31, scope: !1388)
!1531 = !DILocation(line: 498, column: 26, scope: !1388)
!1532 = !DILocation(line: 498, column: 24, scope: !1388)
!1533 = !DILocation(line: 500, column: 15, scope: !1534)
!1534 = distinct !DILexicalBlock(scope: !1388, file: !105, line: 500, column: 15)
!1535 = !DILocation(line: 500, column: 29, scope: !1534)
!1536 = !DILocation(line: 500, column: 15, scope: !1388)
!1537 = !DILocation(line: 502, column: 19, scope: !1538)
!1538 = distinct !DILexicalBlock(scope: !1539, file: !105, line: 502, column: 19)
!1539 = distinct !DILexicalBlock(scope: !1534, file: !105, line: 501, column: 13)
!1540 = !DILocation(line: 502, column: 19, scope: !1539)
!1541 = !DILocation(line: 503, column: 17, scope: !1538)
!1542 = !DILocation(line: 504, column: 15, scope: !1539)
!1543 = !DILocation(line: 509, column: 15, scope: !1544)
!1544 = distinct !DILexicalBlock(scope: !1388, file: !105, line: 509, column: 15)
!1545 = !DILocation(line: 509, column: 33, scope: !1544)
!1546 = !DILocation(line: 509, column: 36, scope: !1544)
!1547 = !DILocation(line: 509, column: 55, scope: !1544)
!1548 = !DILocation(line: 509, column: 58, scope: !1544)
!1549 = !DILocation(line: 509, column: 15, scope: !1388)
!1550 = !DILocation(line: 510, column: 13, scope: !1544)
!1551 = !DILabel(scope: !1388, name: "c_and_shell_escape", file: !105, line: 512)
!1552 = !DILocation(line: 512, column: 9, scope: !1388)
!1553 = !DILocation(line: 513, column: 15, scope: !1554)
!1554 = distinct !DILexicalBlock(scope: !1388, file: !105, line: 513, column: 15)
!1555 = !DILocation(line: 513, column: 29, scope: !1554)
!1556 = !DILocation(line: 514, column: 15, scope: !1554)
!1557 = !DILocation(line: 514, column: 18, scope: !1554)
!1558 = !DILocation(line: 513, column: 15, scope: !1388)
!1559 = !DILocation(line: 515, column: 13, scope: !1554)
!1560 = !DILabel(scope: !1388, name: "c_escape", file: !105, line: 517)
!1561 = !DILocation(line: 517, column: 9, scope: !1388)
!1562 = !DILocation(line: 518, column: 15, scope: !1563)
!1563 = distinct !DILexicalBlock(scope: !1388, file: !105, line: 518, column: 15)
!1564 = !DILocation(line: 518, column: 15, scope: !1388)
!1565 = !DILocation(line: 520, column: 19, scope: !1566)
!1566 = distinct !DILexicalBlock(scope: !1563, file: !105, line: 519, column: 13)
!1567 = !DILocation(line: 520, column: 17, scope: !1566)
!1568 = !DILocation(line: 521, column: 15, scope: !1566)
!1569 = !DILocation(line: 523, column: 11, scope: !1388)
!1570 = !DILocation(line: 526, column: 18, scope: !1571)
!1571 = distinct !DILexicalBlock(scope: !1388, file: !105, line: 526, column: 15)
!1572 = !DILocation(line: 526, column: 26, scope: !1571)
!1573 = !DILocation(line: 526, column: 15, scope: !1388)
!1574 = !DILocation(line: 526, column: 40, scope: !1571)
!1575 = !DILocation(line: 526, column: 47, scope: !1571)
!1576 = !DILocation(line: 526, column: 57, scope: !1571)
!1577 = !DILocation(line: 526, column: 65, scope: !1571)
!1578 = !DILocation(line: 527, column: 13, scope: !1571)
!1579 = !DILocation(line: 528, column: 11, scope: !1388)
!1580 = !DILocation(line: 530, column: 15, scope: !1581)
!1581 = distinct !DILexicalBlock(scope: !1388, file: !105, line: 530, column: 15)
!1582 = !DILocation(line: 530, column: 17, scope: !1581)
!1583 = !DILocation(line: 530, column: 15, scope: !1388)
!1584 = !DILocation(line: 531, column: 13, scope: !1581)
!1585 = !DILocation(line: 532, column: 11, scope: !1388)
!1586 = !DILocation(line: 534, column: 36, scope: !1388)
!1587 = !DILocation(line: 535, column: 11, scope: !1388)
!1588 = !DILocation(line: 548, column: 15, scope: !1589)
!1589 = distinct !DILexicalBlock(scope: !1388, file: !105, line: 548, column: 15)
!1590 = !DILocation(line: 548, column: 29, scope: !1589)
!1591 = !DILocation(line: 549, column: 15, scope: !1589)
!1592 = !DILocation(line: 549, column: 18, scope: !1589)
!1593 = !DILocation(line: 548, column: 15, scope: !1388)
!1594 = !DILocation(line: 550, column: 13, scope: !1589)
!1595 = !DILocation(line: 551, column: 11, scope: !1388)
!1596 = !DILocation(line: 554, column: 36, scope: !1388)
!1597 = !DILocation(line: 555, column: 36, scope: !1388)
!1598 = !DILocation(line: 556, column: 15, scope: !1599)
!1599 = distinct !DILexicalBlock(scope: !1388, file: !105, line: 556, column: 15)
!1600 = !DILocation(line: 556, column: 29, scope: !1599)
!1601 = !DILocation(line: 556, column: 15, scope: !1388)
!1602 = !DILocation(line: 558, column: 19, scope: !1603)
!1603 = distinct !DILexicalBlock(scope: !1604, file: !105, line: 558, column: 19)
!1604 = distinct !DILexicalBlock(scope: !1599, file: !105, line: 557, column: 13)
!1605 = !DILocation(line: 558, column: 19, scope: !1604)
!1606 = !DILocation(line: 559, column: 17, scope: !1603)
!1607 = !DILocation(line: 561, column: 19, scope: !1608)
!1608 = distinct !DILexicalBlock(scope: !1604, file: !105, line: 561, column: 19)
!1609 = !DILocation(line: 561, column: 30, scope: !1608)
!1610 = !DILocation(line: 561, column: 35, scope: !1608)
!1611 = !DILocation(line: 561, column: 19, scope: !1604)
!1612 = !DILocation(line: 566, column: 37, scope: !1613)
!1613 = distinct !DILexicalBlock(scope: !1608, file: !105, line: 562, column: 17)
!1614 = !DILocation(line: 566, column: 35, scope: !1613)
!1615 = !DILocation(line: 567, column: 30, scope: !1613)
!1616 = !DILocation(line: 568, column: 17, scope: !1613)
!1617 = !DILocation(line: 570, column: 15, scope: !1604)
!1618 = !DILocation(line: 570, column: 15, scope: !1619)
!1619 = distinct !DILexicalBlock(scope: !1620, file: !105, line: 570, column: 15)
!1620 = distinct !DILexicalBlock(scope: !1604, file: !105, line: 570, column: 15)
!1621 = !DILocation(line: 570, column: 15, scope: !1620)
!1622 = !DILocation(line: 571, column: 15, scope: !1604)
!1623 = !DILocation(line: 571, column: 15, scope: !1624)
!1624 = distinct !DILexicalBlock(scope: !1625, file: !105, line: 571, column: 15)
!1625 = distinct !DILexicalBlock(scope: !1604, file: !105, line: 571, column: 15)
!1626 = !DILocation(line: 571, column: 15, scope: !1625)
!1627 = !DILocation(line: 572, column: 15, scope: !1604)
!1628 = !DILocation(line: 572, column: 15, scope: !1629)
!1629 = distinct !DILexicalBlock(scope: !1630, file: !105, line: 572, column: 15)
!1630 = distinct !DILexicalBlock(scope: !1604, file: !105, line: 572, column: 15)
!1631 = !DILocation(line: 572, column: 15, scope: !1630)
!1632 = !DILocation(line: 573, column: 40, scope: !1604)
!1633 = !DILocation(line: 574, column: 13, scope: !1604)
!1634 = !DILocation(line: 575, column: 11, scope: !1388)
!1635 = !DILocation(line: 599, column: 36, scope: !1388)
!1636 = !DILocation(line: 600, column: 11, scope: !1388)
!1637 = !DILocalVariable(name: "m", scope: !1638, file: !105, line: 610, type: !99)
!1638 = distinct !DILexicalBlock(scope: !1388, file: !105, line: 608, column: 11)
!1639 = !DILocation(line: 610, column: 20, scope: !1638)
!1640 = !DILocalVariable(name: "printable", scope: !1638, file: !105, line: 612, type: !41)
!1641 = !DILocation(line: 612, column: 18, scope: !1638)
!1642 = !DILocation(line: 614, column: 17, scope: !1643)
!1643 = distinct !DILexicalBlock(scope: !1638, file: !105, line: 614, column: 17)
!1644 = !DILocation(line: 614, column: 17, scope: !1638)
!1645 = !DILocation(line: 616, column: 19, scope: !1646)
!1646 = distinct !DILexicalBlock(scope: !1643, file: !105, line: 615, column: 15)
!1647 = !DILocation(line: 617, column: 29, scope: !1646)
!1648 = !DILocation(line: 617, column: 41, scope: !1646)
!1649 = !DILocation(line: 617, column: 27, scope: !1646)
!1650 = !DILocation(line: 618, column: 15, scope: !1646)
!1651 = !DILocalVariable(name: "mbstate", scope: !1652, file: !105, line: 621, type: !1653)
!1652 = distinct !DILexicalBlock(scope: !1643, file: !105, line: 620, column: 15)
!1653 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !1654, line: 6, baseType: !1655)
!1654 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "")
!1655 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !1656, line: 21, baseType: !1657)
!1656 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "")
!1657 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1656, line: 13, size: 64, elements: !1658)
!1658 = !{!1659, !1660}
!1659 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !1657, file: !1656, line: 15, baseType: !6, size: 32)
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !1657, file: !1656, line: 20, baseType: !1661, size: 32, offset: 32)
!1661 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1657, file: !1656, line: 16, size: 32, elements: !1662)
!1662 = !{!1663, !1664}
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !1661, file: !1656, line: 18, baseType: !84, size: 32)
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !1661, file: !1656, line: 19, baseType: !1665, size: 32)
!1665 = !DICompositeType(tag: DW_TAG_array_type, baseType: !9, size: 32, elements: !1666)
!1666 = !{!1667}
!1667 = !DISubrange(count: 4)
!1668 = !DILocation(line: 621, column: 27, scope: !1652)
!1669 = !DILocation(line: 622, column: 17, scope: !1652)
!1670 = !DILocation(line: 624, column: 19, scope: !1652)
!1671 = !DILocation(line: 625, column: 27, scope: !1652)
!1672 = !DILocation(line: 626, column: 21, scope: !1673)
!1673 = distinct !DILexicalBlock(scope: !1652, file: !105, line: 626, column: 21)
!1674 = !DILocation(line: 626, column: 29, scope: !1673)
!1675 = !DILocation(line: 626, column: 21, scope: !1652)
!1676 = !DILocation(line: 627, column: 37, scope: !1673)
!1677 = !DILocation(line: 627, column: 29, scope: !1673)
!1678 = !DILocation(line: 627, column: 27, scope: !1673)
!1679 = !DILocation(line: 627, column: 19, scope: !1673)
!1680 = !DILocation(line: 629, column: 17, scope: !1652)
!1681 = !DILocalVariable(name: "w", scope: !1682, file: !105, line: 631, type: !1683)
!1682 = distinct !DILexicalBlock(scope: !1652, file: !105, line: 630, column: 19)
!1683 = !DIDerivedType(tag: DW_TAG_typedef, name: "wchar_t", file: !100, line: 74, baseType: !6)
!1684 = !DILocation(line: 631, column: 29, scope: !1682)
!1685 = !DILocalVariable(name: "bytes", scope: !1682, file: !105, line: 632, type: !99)
!1686 = !DILocation(line: 632, column: 28, scope: !1682)
!1687 = !DILocation(line: 632, column: 50, scope: !1682)
!1688 = !DILocation(line: 632, column: 54, scope: !1682)
!1689 = !DILocation(line: 632, column: 58, scope: !1682)
!1690 = !DILocation(line: 632, column: 56, scope: !1682)
!1691 = !DILocation(line: 633, column: 45, scope: !1682)
!1692 = !DILocation(line: 633, column: 56, scope: !1682)
!1693 = !DILocation(line: 633, column: 60, scope: !1682)
!1694 = !DILocation(line: 633, column: 58, scope: !1682)
!1695 = !DILocation(line: 633, column: 53, scope: !1682)
!1696 = !DILocation(line: 632, column: 36, scope: !1682)
!1697 = !DILocation(line: 634, column: 25, scope: !1698)
!1698 = distinct !DILexicalBlock(scope: !1682, file: !105, line: 634, column: 25)
!1699 = !DILocation(line: 634, column: 31, scope: !1698)
!1700 = !DILocation(line: 634, column: 25, scope: !1682)
!1701 = !DILocation(line: 635, column: 23, scope: !1698)
!1702 = !DILocation(line: 636, column: 30, scope: !1703)
!1703 = distinct !DILexicalBlock(scope: !1698, file: !105, line: 636, column: 30)
!1704 = !DILocation(line: 636, column: 36, scope: !1703)
!1705 = !DILocation(line: 636, column: 30, scope: !1698)
!1706 = !DILocation(line: 638, column: 35, scope: !1707)
!1707 = distinct !DILexicalBlock(scope: !1703, file: !105, line: 637, column: 23)
!1708 = !DILocation(line: 639, column: 25, scope: !1707)
!1709 = !DILocation(line: 641, column: 30, scope: !1710)
!1710 = distinct !DILexicalBlock(scope: !1703, file: !105, line: 641, column: 30)
!1711 = !DILocation(line: 641, column: 36, scope: !1710)
!1712 = !DILocation(line: 641, column: 30, scope: !1703)
!1713 = !DILocation(line: 643, column: 35, scope: !1714)
!1714 = distinct !DILexicalBlock(scope: !1710, file: !105, line: 642, column: 23)
!1715 = !DILocation(line: 644, column: 25, scope: !1714)
!1716 = !DILocation(line: 644, column: 32, scope: !1714)
!1717 = !DILocation(line: 644, column: 36, scope: !1714)
!1718 = !DILocation(line: 644, column: 34, scope: !1714)
!1719 = !DILocation(line: 644, column: 40, scope: !1714)
!1720 = !DILocation(line: 644, column: 38, scope: !1714)
!1721 = !DILocation(line: 644, column: 48, scope: !1714)
!1722 = !DILocation(line: 644, column: 51, scope: !1714)
!1723 = !DILocation(line: 644, column: 55, scope: !1714)
!1724 = !DILocation(line: 644, column: 59, scope: !1714)
!1725 = !DILocation(line: 644, column: 57, scope: !1714)
!1726 = !DILocation(line: 0, scope: !1714)
!1727 = !DILocation(line: 645, column: 28, scope: !1714)
!1728 = distinct !{!1728, !1715, !1727}
!1729 = !DILocation(line: 646, column: 25, scope: !1714)
!1730 = !DILocation(line: 654, column: 44, scope: !1731)
!1731 = distinct !DILexicalBlock(scope: !1732, file: !105, line: 654, column: 29)
!1732 = distinct !DILexicalBlock(scope: !1710, file: !105, line: 649, column: 23)
!1733 = !DILocation(line: 655, column: 29, scope: !1731)
!1734 = !DILocation(line: 655, column: 32, scope: !1731)
!1735 = !DILocation(line: 655, column: 46, scope: !1731)
!1736 = !DILocation(line: 654, column: 29, scope: !1732)
!1737 = !DILocalVariable(name: "j", scope: !1738, file: !105, line: 657, type: !99)
!1738 = distinct !DILexicalBlock(scope: !1731, file: !105, line: 656, column: 27)
!1739 = !DILocation(line: 657, column: 36, scope: !1738)
!1740 = !DILocation(line: 658, column: 36, scope: !1741)
!1741 = distinct !DILexicalBlock(scope: !1738, file: !105, line: 658, column: 29)
!1742 = !DILocation(line: 658, column: 34, scope: !1741)
!1743 = !DILocation(line: 658, column: 41, scope: !1744)
!1744 = distinct !DILexicalBlock(scope: !1741, file: !105, line: 658, column: 29)
!1745 = !DILocation(line: 658, column: 45, scope: !1744)
!1746 = !DILocation(line: 658, column: 43, scope: !1744)
!1747 = !DILocation(line: 658, column: 29, scope: !1741)
!1748 = !DILocation(line: 659, column: 39, scope: !1744)
!1749 = !DILocation(line: 659, column: 43, scope: !1744)
!1750 = !DILocation(line: 659, column: 47, scope: !1744)
!1751 = !DILocation(line: 659, column: 45, scope: !1744)
!1752 = !DILocation(line: 659, column: 51, scope: !1744)
!1753 = !DILocation(line: 659, column: 49, scope: !1744)
!1754 = !DILocation(line: 659, column: 31, scope: !1744)
!1755 = !DILocation(line: 663, column: 35, scope: !1756)
!1756 = distinct !DILexicalBlock(scope: !1744, file: !105, line: 660, column: 33)
!1757 = !DILocation(line: 666, column: 35, scope: !1756)
!1758 = !DILocation(line: 667, column: 33, scope: !1756)
!1759 = !DILocation(line: 658, column: 53, scope: !1744)
!1760 = !DILocation(line: 658, column: 29, scope: !1744)
!1761 = distinct !{!1761, !1747, !1762}
!1762 = !DILocation(line: 667, column: 33, scope: !1741)
!1763 = !DILocation(line: 668, column: 27, scope: !1738)
!1764 = !DILocation(line: 670, column: 41, scope: !1765)
!1765 = distinct !DILexicalBlock(scope: !1732, file: !105, line: 670, column: 29)
!1766 = !DILocation(line: 670, column: 31, scope: !1765)
!1767 = !DILocation(line: 670, column: 29, scope: !1732)
!1768 = !DILocation(line: 671, column: 37, scope: !1765)
!1769 = !DILocation(line: 671, column: 27, scope: !1765)
!1770 = !DILocation(line: 672, column: 30, scope: !1732)
!1771 = !DILocation(line: 672, column: 27, scope: !1732)
!1772 = !DILocation(line: 674, column: 19, scope: !1682)
!1773 = !DILocation(line: 675, column: 26, scope: !1652)
!1774 = !DILocation(line: 675, column: 24, scope: !1652)
!1775 = distinct !{!1775, !1680, !1776}
!1776 = !DILocation(line: 675, column: 44, scope: !1652)
!1777 = !DILocation(line: 678, column: 40, scope: !1638)
!1778 = !DILocation(line: 678, column: 38, scope: !1638)
!1779 = !DILocation(line: 680, column: 21, scope: !1780)
!1780 = distinct !DILexicalBlock(scope: !1638, file: !105, line: 680, column: 17)
!1781 = !DILocation(line: 680, column: 19, scope: !1780)
!1782 = !DILocation(line: 680, column: 23, scope: !1780)
!1783 = !DILocation(line: 680, column: 27, scope: !1780)
!1784 = !DILocation(line: 680, column: 45, scope: !1780)
!1785 = !DILocation(line: 680, column: 50, scope: !1780)
!1786 = !DILocation(line: 680, column: 17, scope: !1638)
!1787 = !DILocalVariable(name: "ilim", scope: !1788, file: !105, line: 684, type: !99)
!1788 = distinct !DILexicalBlock(scope: !1780, file: !105, line: 681, column: 15)
!1789 = !DILocation(line: 684, column: 24, scope: !1788)
!1790 = !DILocation(line: 684, column: 31, scope: !1788)
!1791 = !DILocation(line: 684, column: 35, scope: !1788)
!1792 = !DILocation(line: 684, column: 33, scope: !1788)
!1793 = !DILocation(line: 686, column: 17, scope: !1788)
!1794 = !DILocation(line: 688, column: 25, scope: !1795)
!1795 = distinct !DILexicalBlock(scope: !1796, file: !105, line: 688, column: 25)
!1796 = distinct !DILexicalBlock(scope: !1797, file: !105, line: 687, column: 19)
!1797 = distinct !DILexicalBlock(scope: !1798, file: !105, line: 686, column: 17)
!1798 = distinct !DILexicalBlock(scope: !1788, file: !105, line: 686, column: 17)
!1799 = !DILocation(line: 688, column: 43, scope: !1795)
!1800 = !DILocation(line: 688, column: 48, scope: !1795)
!1801 = !DILocation(line: 688, column: 25, scope: !1796)
!1802 = !DILocation(line: 690, column: 25, scope: !1803)
!1803 = distinct !DILexicalBlock(scope: !1795, file: !105, line: 689, column: 23)
!1804 = !DILocation(line: 690, column: 25, scope: !1805)
!1805 = distinct !DILexicalBlock(scope: !1806, file: !105, line: 690, column: 25)
!1806 = distinct !DILexicalBlock(scope: !1803, file: !105, line: 690, column: 25)
!1807 = !DILocation(line: 690, column: 25, scope: !1806)
!1808 = !DILocation(line: 690, column: 25, scope: !1809)
!1809 = distinct !DILexicalBlock(scope: !1806, file: !105, line: 690, column: 25)
!1810 = !DILocation(line: 690, column: 25, scope: !1811)
!1811 = distinct !DILexicalBlock(scope: !1809, file: !105, line: 690, column: 25)
!1812 = !DILocation(line: 690, column: 25, scope: !1813)
!1813 = distinct !DILexicalBlock(scope: !1814, file: !105, line: 690, column: 25)
!1814 = distinct !DILexicalBlock(scope: !1811, file: !105, line: 690, column: 25)
!1815 = !DILocation(line: 690, column: 25, scope: !1814)
!1816 = !DILocation(line: 690, column: 25, scope: !1817)
!1817 = distinct !DILexicalBlock(scope: !1818, file: !105, line: 690, column: 25)
!1818 = distinct !DILexicalBlock(scope: !1811, file: !105, line: 690, column: 25)
!1819 = !DILocation(line: 690, column: 25, scope: !1818)
!1820 = !DILocation(line: 690, column: 25, scope: !1821)
!1821 = distinct !DILexicalBlock(scope: !1822, file: !105, line: 690, column: 25)
!1822 = distinct !DILexicalBlock(scope: !1811, file: !105, line: 690, column: 25)
!1823 = !DILocation(line: 690, column: 25, scope: !1822)
!1824 = !DILocation(line: 690, column: 25, scope: !1825)
!1825 = distinct !DILexicalBlock(scope: !1826, file: !105, line: 690, column: 25)
!1826 = distinct !DILexicalBlock(scope: !1806, file: !105, line: 690, column: 25)
!1827 = !DILocation(line: 690, column: 25, scope: !1826)
!1828 = !DILocation(line: 691, column: 25, scope: !1803)
!1829 = !DILocation(line: 691, column: 25, scope: !1830)
!1830 = distinct !DILexicalBlock(scope: !1831, file: !105, line: 691, column: 25)
!1831 = distinct !DILexicalBlock(scope: !1803, file: !105, line: 691, column: 25)
!1832 = !DILocation(line: 691, column: 25, scope: !1831)
!1833 = !DILocation(line: 692, column: 25, scope: !1803)
!1834 = !DILocation(line: 692, column: 25, scope: !1835)
!1835 = distinct !DILexicalBlock(scope: !1836, file: !105, line: 692, column: 25)
!1836 = distinct !DILexicalBlock(scope: !1803, file: !105, line: 692, column: 25)
!1837 = !DILocation(line: 692, column: 25, scope: !1836)
!1838 = !DILocation(line: 693, column: 36, scope: !1803)
!1839 = !DILocation(line: 693, column: 38, scope: !1803)
!1840 = !DILocation(line: 693, column: 33, scope: !1803)
!1841 = !DILocation(line: 693, column: 29, scope: !1803)
!1842 = !DILocation(line: 693, column: 27, scope: !1803)
!1843 = !DILocation(line: 694, column: 23, scope: !1803)
!1844 = !DILocation(line: 695, column: 30, scope: !1845)
!1845 = distinct !DILexicalBlock(scope: !1795, file: !105, line: 695, column: 30)
!1846 = !DILocation(line: 695, column: 30, scope: !1795)
!1847 = !DILocation(line: 697, column: 25, scope: !1848)
!1848 = distinct !DILexicalBlock(scope: !1845, file: !105, line: 696, column: 23)
!1849 = !DILocation(line: 697, column: 25, scope: !1850)
!1850 = distinct !DILexicalBlock(scope: !1851, file: !105, line: 697, column: 25)
!1851 = distinct !DILexicalBlock(scope: !1848, file: !105, line: 697, column: 25)
!1852 = !DILocation(line: 697, column: 25, scope: !1851)
!1853 = !DILocation(line: 698, column: 40, scope: !1848)
!1854 = !DILocation(line: 699, column: 23, scope: !1848)
!1855 = !DILocation(line: 700, column: 25, scope: !1856)
!1856 = distinct !DILexicalBlock(scope: !1796, file: !105, line: 700, column: 25)
!1857 = !DILocation(line: 700, column: 33, scope: !1856)
!1858 = !DILocation(line: 700, column: 35, scope: !1856)
!1859 = !DILocation(line: 700, column: 30, scope: !1856)
!1860 = !DILocation(line: 700, column: 25, scope: !1796)
!1861 = !DILocation(line: 701, column: 23, scope: !1856)
!1862 = !DILocation(line: 702, column: 21, scope: !1796)
!1863 = !DILocation(line: 702, column: 21, scope: !1864)
!1864 = distinct !DILexicalBlock(scope: !1865, file: !105, line: 702, column: 21)
!1865 = distinct !DILexicalBlock(scope: !1796, file: !105, line: 702, column: 21)
!1866 = !DILocation(line: 702, column: 21, scope: !1865)
!1867 = !DILocation(line: 702, column: 21, scope: !1868)
!1868 = distinct !DILexicalBlock(scope: !1864, file: !105, line: 702, column: 21)
!1869 = !DILocation(line: 702, column: 21, scope: !1870)
!1870 = distinct !DILexicalBlock(scope: !1871, file: !105, line: 702, column: 21)
!1871 = distinct !DILexicalBlock(scope: !1868, file: !105, line: 702, column: 21)
!1872 = !DILocation(line: 702, column: 21, scope: !1871)
!1873 = !DILocation(line: 702, column: 21, scope: !1874)
!1874 = distinct !DILexicalBlock(scope: !1875, file: !105, line: 702, column: 21)
!1875 = distinct !DILexicalBlock(scope: !1868, file: !105, line: 702, column: 21)
!1876 = !DILocation(line: 702, column: 21, scope: !1875)
!1877 = !DILocation(line: 703, column: 21, scope: !1796)
!1878 = !DILocation(line: 703, column: 21, scope: !1879)
!1879 = distinct !DILexicalBlock(scope: !1880, file: !105, line: 703, column: 21)
!1880 = distinct !DILexicalBlock(scope: !1796, file: !105, line: 703, column: 21)
!1881 = !DILocation(line: 703, column: 21, scope: !1880)
!1882 = !DILocation(line: 704, column: 25, scope: !1796)
!1883 = !DILocation(line: 704, column: 29, scope: !1796)
!1884 = !DILocation(line: 704, column: 23, scope: !1796)
!1885 = !DILocation(line: 686, column: 17, scope: !1797)
!1886 = distinct !{!1886, !1887, !1888}
!1887 = !DILocation(line: 686, column: 17, scope: !1798)
!1888 = !DILocation(line: 705, column: 19, scope: !1798)
!1889 = !DILocation(line: 707, column: 17, scope: !1788)
!1890 = !DILocation(line: 710, column: 9, scope: !1388)
!1891 = !DILocation(line: 712, column: 16, scope: !1892)
!1892 = distinct !DILexicalBlock(scope: !1334, file: !105, line: 712, column: 11)
!1893 = !DILocation(line: 712, column: 34, scope: !1892)
!1894 = !DILocation(line: 712, column: 37, scope: !1892)
!1895 = !DILocation(line: 712, column: 51, scope: !1892)
!1896 = !DILocation(line: 713, column: 15, scope: !1892)
!1897 = !DILocation(line: 713, column: 18, scope: !1892)
!1898 = !DILocation(line: 714, column: 14, scope: !1892)
!1899 = !DILocation(line: 714, column: 17, scope: !1892)
!1900 = !DILocation(line: 715, column: 14, scope: !1892)
!1901 = !DILocation(line: 715, column: 17, scope: !1892)
!1902 = !DILocation(line: 715, column: 33, scope: !1892)
!1903 = !DILocation(line: 715, column: 35, scope: !1892)
!1904 = !DILocation(line: 715, column: 51, scope: !1892)
!1905 = !DILocation(line: 715, column: 53, scope: !1892)
!1906 = !DILocation(line: 715, column: 47, scope: !1892)
!1907 = !DILocation(line: 715, column: 65, scope: !1892)
!1908 = !DILocation(line: 716, column: 11, scope: !1892)
!1909 = !DILocation(line: 716, column: 15, scope: !1892)
!1910 = !DILocation(line: 712, column: 11, scope: !1334)
!1911 = !DILocation(line: 717, column: 9, scope: !1892)
!1912 = !DILabel(scope: !1334, name: "store_escape", file: !105, line: 719)
!1913 = !DILocation(line: 719, column: 5, scope: !1334)
!1914 = !DILocation(line: 720, column: 7, scope: !1334)
!1915 = !DILocation(line: 720, column: 7, scope: !1916)
!1916 = distinct !DILexicalBlock(scope: !1917, file: !105, line: 720, column: 7)
!1917 = distinct !DILexicalBlock(scope: !1334, file: !105, line: 720, column: 7)
!1918 = !DILocation(line: 720, column: 7, scope: !1917)
!1919 = !DILocation(line: 720, column: 7, scope: !1920)
!1920 = distinct !DILexicalBlock(scope: !1917, file: !105, line: 720, column: 7)
!1921 = !DILocation(line: 720, column: 7, scope: !1922)
!1922 = distinct !DILexicalBlock(scope: !1920, file: !105, line: 720, column: 7)
!1923 = !DILocation(line: 720, column: 7, scope: !1924)
!1924 = distinct !DILexicalBlock(scope: !1925, file: !105, line: 720, column: 7)
!1925 = distinct !DILexicalBlock(scope: !1922, file: !105, line: 720, column: 7)
!1926 = !DILocation(line: 720, column: 7, scope: !1925)
!1927 = !DILocation(line: 720, column: 7, scope: !1928)
!1928 = distinct !DILexicalBlock(scope: !1929, file: !105, line: 720, column: 7)
!1929 = distinct !DILexicalBlock(scope: !1922, file: !105, line: 720, column: 7)
!1930 = !DILocation(line: 720, column: 7, scope: !1929)
!1931 = !DILocation(line: 720, column: 7, scope: !1932)
!1932 = distinct !DILexicalBlock(scope: !1933, file: !105, line: 720, column: 7)
!1933 = distinct !DILexicalBlock(scope: !1922, file: !105, line: 720, column: 7)
!1934 = !DILocation(line: 720, column: 7, scope: !1933)
!1935 = !DILocation(line: 720, column: 7, scope: !1936)
!1936 = distinct !DILexicalBlock(scope: !1937, file: !105, line: 720, column: 7)
!1937 = distinct !DILexicalBlock(scope: !1917, file: !105, line: 720, column: 7)
!1938 = !DILocation(line: 720, column: 7, scope: !1937)
!1939 = !DILabel(scope: !1334, name: "store_c", file: !105, line: 722)
!1940 = !DILocation(line: 722, column: 5, scope: !1334)
!1941 = !DILocation(line: 723, column: 7, scope: !1334)
!1942 = !DILocation(line: 723, column: 7, scope: !1943)
!1943 = distinct !DILexicalBlock(scope: !1944, file: !105, line: 723, column: 7)
!1944 = distinct !DILexicalBlock(scope: !1334, file: !105, line: 723, column: 7)
!1945 = !DILocation(line: 723, column: 7, scope: !1944)
!1946 = !DILocation(line: 723, column: 7, scope: !1947)
!1947 = distinct !DILexicalBlock(scope: !1943, file: !105, line: 723, column: 7)
!1948 = !DILocation(line: 723, column: 7, scope: !1949)
!1949 = distinct !DILexicalBlock(scope: !1950, file: !105, line: 723, column: 7)
!1950 = distinct !DILexicalBlock(scope: !1947, file: !105, line: 723, column: 7)
!1951 = !DILocation(line: 723, column: 7, scope: !1950)
!1952 = !DILocation(line: 723, column: 7, scope: !1953)
!1953 = distinct !DILexicalBlock(scope: !1954, file: !105, line: 723, column: 7)
!1954 = distinct !DILexicalBlock(scope: !1947, file: !105, line: 723, column: 7)
!1955 = !DILocation(line: 723, column: 7, scope: !1954)
!1956 = !DILocation(line: 724, column: 7, scope: !1334)
!1957 = !DILocation(line: 724, column: 7, scope: !1958)
!1958 = distinct !DILexicalBlock(scope: !1959, file: !105, line: 724, column: 7)
!1959 = distinct !DILexicalBlock(scope: !1334, file: !105, line: 724, column: 7)
!1960 = !DILocation(line: 724, column: 7, scope: !1959)
!1961 = !DILocation(line: 726, column: 13, scope: !1962)
!1962 = distinct !DILexicalBlock(scope: !1334, file: !105, line: 726, column: 11)
!1963 = !DILocation(line: 726, column: 11, scope: !1334)
!1964 = !DILocation(line: 727, column: 38, scope: !1962)
!1965 = !DILocation(line: 727, column: 9, scope: !1962)
!1966 = !DILocation(line: 728, column: 5, scope: !1334)
!1967 = !DILocation(line: 400, column: 75, scope: !1323)
!1968 = !DILocation(line: 400, column: 3, scope: !1323)
!1969 = distinct !{!1969, !1332, !1970}
!1970 = !DILocation(line: 728, column: 5, scope: !1320)
!1971 = !DILocation(line: 730, column: 7, scope: !1972)
!1972 = distinct !DILexicalBlock(scope: !1180, file: !105, line: 730, column: 7)
!1973 = !DILocation(line: 730, column: 11, scope: !1972)
!1974 = !DILocation(line: 730, column: 16, scope: !1972)
!1975 = !DILocation(line: 730, column: 19, scope: !1972)
!1976 = !DILocation(line: 730, column: 33, scope: !1972)
!1977 = !DILocation(line: 731, column: 7, scope: !1972)
!1978 = !DILocation(line: 731, column: 10, scope: !1972)
!1979 = !DILocation(line: 730, column: 7, scope: !1180)
!1980 = !DILocation(line: 732, column: 5, scope: !1972)
!1981 = !DILocation(line: 738, column: 7, scope: !1982)
!1982 = distinct !DILexicalBlock(scope: !1180, file: !105, line: 738, column: 7)
!1983 = !DILocation(line: 738, column: 21, scope: !1982)
!1984 = !DILocation(line: 738, column: 51, scope: !1982)
!1985 = !DILocation(line: 738, column: 56, scope: !1982)
!1986 = !DILocation(line: 739, column: 7, scope: !1982)
!1987 = !DILocation(line: 739, column: 10, scope: !1982)
!1988 = !DILocation(line: 738, column: 7, scope: !1180)
!1989 = !DILocation(line: 741, column: 11, scope: !1990)
!1990 = distinct !DILexicalBlock(scope: !1991, file: !105, line: 741, column: 11)
!1991 = distinct !DILexicalBlock(scope: !1982, file: !105, line: 740, column: 5)
!1992 = !DILocation(line: 741, column: 11, scope: !1991)
!1993 = !DILocation(line: 742, column: 42, scope: !1990)
!1994 = !DILocation(line: 742, column: 50, scope: !1990)
!1995 = !DILocation(line: 742, column: 67, scope: !1990)
!1996 = !DILocation(line: 742, column: 72, scope: !1990)
!1997 = !DILocation(line: 744, column: 42, scope: !1990)
!1998 = !DILocation(line: 744, column: 49, scope: !1990)
!1999 = !DILocation(line: 745, column: 42, scope: !1990)
!2000 = !DILocation(line: 745, column: 54, scope: !1990)
!2001 = !DILocation(line: 742, column: 16, scope: !1990)
!2002 = !DILocation(line: 742, column: 9, scope: !1990)
!2003 = !DILocation(line: 746, column: 18, scope: !2004)
!2004 = distinct !DILexicalBlock(scope: !1990, file: !105, line: 746, column: 16)
!2005 = !DILocation(line: 746, column: 29, scope: !2004)
!2006 = !DILocation(line: 746, column: 32, scope: !2004)
!2007 = !DILocation(line: 746, column: 16, scope: !1990)
!2008 = !DILocation(line: 749, column: 24, scope: !2009)
!2009 = distinct !DILexicalBlock(scope: !2004, file: !105, line: 747, column: 9)
!2010 = !DILocation(line: 749, column: 22, scope: !2009)
!2011 = !DILocation(line: 750, column: 15, scope: !2009)
!2012 = !DILocation(line: 751, column: 11, scope: !2009)
!2013 = !DILocation(line: 753, column: 5, scope: !1991)
!2014 = !DILocation(line: 755, column: 7, scope: !2015)
!2015 = distinct !DILexicalBlock(scope: !1180, file: !105, line: 755, column: 7)
!2016 = !DILocation(line: 755, column: 20, scope: !2015)
!2017 = !DILocation(line: 755, column: 24, scope: !2015)
!2018 = !DILocation(line: 755, column: 7, scope: !1180)
!2019 = !DILocation(line: 756, column: 5, scope: !2015)
!2020 = !DILocation(line: 756, column: 13, scope: !2021)
!2021 = distinct !DILexicalBlock(scope: !2022, file: !105, line: 756, column: 5)
!2022 = distinct !DILexicalBlock(scope: !2015, file: !105, line: 756, column: 5)
!2023 = !DILocation(line: 756, column: 12, scope: !2021)
!2024 = !DILocation(line: 756, column: 5, scope: !2022)
!2025 = !DILocation(line: 757, column: 7, scope: !2021)
!2026 = !DILocation(line: 757, column: 7, scope: !2027)
!2027 = distinct !DILexicalBlock(scope: !2028, file: !105, line: 757, column: 7)
!2028 = distinct !DILexicalBlock(scope: !2021, file: !105, line: 757, column: 7)
!2029 = !DILocation(line: 757, column: 7, scope: !2028)
!2030 = !DILocation(line: 756, column: 39, scope: !2021)
!2031 = !DILocation(line: 756, column: 5, scope: !2021)
!2032 = distinct !{!2032, !2024, !2033}
!2033 = !DILocation(line: 757, column: 7, scope: !2022)
!2034 = !DILocation(line: 759, column: 7, scope: !2035)
!2035 = distinct !DILexicalBlock(scope: !1180, file: !105, line: 759, column: 7)
!2036 = !DILocation(line: 759, column: 13, scope: !2035)
!2037 = !DILocation(line: 759, column: 11, scope: !2035)
!2038 = !DILocation(line: 759, column: 7, scope: !1180)
!2039 = !DILocation(line: 760, column: 5, scope: !2035)
!2040 = !DILocation(line: 760, column: 12, scope: !2035)
!2041 = !DILocation(line: 760, column: 17, scope: !2035)
!2042 = !DILocation(line: 761, column: 10, scope: !1180)
!2043 = !DILocation(line: 761, column: 3, scope: !1180)
!2044 = !DILabel(scope: !1180, name: "force_outer_quoting_style", file: !105, line: 763)
!2045 = !DILocation(line: 763, column: 2, scope: !1180)
!2046 = !DILocation(line: 766, column: 7, scope: !2047)
!2047 = distinct !DILexicalBlock(scope: !1180, file: !105, line: 766, column: 7)
!2048 = !DILocation(line: 766, column: 21, scope: !2047)
!2049 = !DILocation(line: 766, column: 51, scope: !2047)
!2050 = !DILocation(line: 766, column: 54, scope: !2047)
!2051 = !DILocation(line: 766, column: 7, scope: !1180)
!2052 = !DILocation(line: 767, column: 19, scope: !2047)
!2053 = !DILocation(line: 767, column: 5, scope: !2047)
!2054 = !DILocation(line: 768, column: 36, scope: !1180)
!2055 = !DILocation(line: 768, column: 44, scope: !1180)
!2056 = !DILocation(line: 768, column: 56, scope: !1180)
!2057 = !DILocation(line: 768, column: 61, scope: !1180)
!2058 = !DILocation(line: 769, column: 36, scope: !1180)
!2059 = !DILocation(line: 770, column: 36, scope: !1180)
!2060 = !DILocation(line: 770, column: 42, scope: !1180)
!2061 = !DILocation(line: 771, column: 36, scope: !1180)
!2062 = !DILocation(line: 771, column: 48, scope: !1180)
!2063 = !DILocation(line: 768, column: 10, scope: !1180)
!2064 = !DILocation(line: 768, column: 3, scope: !1180)
!2065 = !DILocation(line: 772, column: 1, scope: !1180)
!2066 = !DILocalVariable(name: "buffer", arg: 1, scope: !2067, file: !105, line: 256, type: !8)
!2067 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !105, file: !105, line: 256, type: !1181, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2068, retainedNodes: !11)
!2068 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !2069, nameTableKind: None)
!2069 = !{!2070, !2072, !2074, !2083, !2085, !2087, !2094, !2096}
!2070 = !DIGlobalVariableExpression(var: !2071, expr: !DIExpression())
!2071 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2068, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!2072 = !DIGlobalVariableExpression(var: !2073, expr: !DIExpression())
!2073 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2068, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!2074 = !DIGlobalVariableExpression(var: !2075, expr: !DIExpression())
!2075 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2068, file: !105, line: 1052, type: !2076, isLocal: false, isDefinition: true)
!2076 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !2077)
!2077 = !{!2078, !2079, !2080, !2081, !2082}
!2078 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2076, file: !105, line: 68, baseType: !82, size: 32)
!2079 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2076, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!2080 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2076, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!2081 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2076, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!2082 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2076, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!2083 = !DIGlobalVariableExpression(var: !2084, expr: !DIExpression())
!2084 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2068, file: !105, line: 116, type: !2076, isLocal: true, isDefinition: true)
!2085 = !DIGlobalVariableExpression(var: !2086, expr: !DIExpression())
!2086 = distinct !DIGlobalVariable(name: "slot0", scope: !2068, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!2087 = !DIGlobalVariableExpression(var: !2088, expr: !DIExpression())
!2088 = distinct !DIGlobalVariable(name: "slotvec", scope: !2068, file: !105, line: 845, type: !2089, isLocal: true, isDefinition: true)
!2089 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2090, size: 64)
!2090 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !2091)
!2091 = !{!2092, !2093}
!2092 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2090, file: !105, line: 836, baseType: !99, size: 64)
!2093 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2090, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!2094 = !DIGlobalVariableExpression(var: !2095, expr: !DIExpression())
!2095 = distinct !DIGlobalVariable(name: "nslots", scope: !2068, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!2096 = !DIGlobalVariableExpression(var: !2097, expr: !DIExpression())
!2097 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2068, file: !105, line: 844, type: !2090, isLocal: true, isDefinition: true)
!2098 = !DILocalVariable(name: "buffersize", arg: 2, scope: !2067, file: !105, line: 256, type: !99)
!2099 = !DILocalVariable(name: "arg", arg: 3, scope: !2067, file: !105, line: 257, type: !23)
!2100 = !DILocalVariable(name: "argsize", arg: 4, scope: !2067, file: !105, line: 257, type: !99)
!2101 = !DILocalVariable(name: "quoting_style", arg: 5, scope: !2067, file: !105, line: 258, type: !82)
!2102 = !DILocalVariable(name: "flags", arg: 6, scope: !2067, file: !105, line: 258, type: !6)
!2103 = !DILocalVariable(name: "quote_these_too", arg: 7, scope: !2067, file: !105, line: 259, type: !1183)
!2104 = !DILocalVariable(name: "left_quote", arg: 8, scope: !2067, file: !105, line: 260, type: !23)
!2105 = !DILocalVariable(name: "right_quote", arg: 9, scope: !2067, file: !105, line: 261, type: !23)
!2106 = !DILocalVariable(name: "i", scope: !2067, file: !105, line: 263, type: !99)
!2107 = !DILocalVariable(name: "len", scope: !2067, file: !105, line: 264, type: !99)
!2108 = !DILocalVariable(name: "orig_buffersize", scope: !2067, file: !105, line: 265, type: !99)
!2109 = !DILocalVariable(name: "quote_string", scope: !2067, file: !105, line: 266, type: !23)
!2110 = !DILocalVariable(name: "quote_string_len", scope: !2067, file: !105, line: 267, type: !99)
!2111 = !DILocalVariable(name: "backslash_escapes", scope: !2067, file: !105, line: 268, type: !41)
!2112 = !DILocalVariable(name: "unibyte_locale", scope: !2067, file: !105, line: 269, type: !41)
!2113 = !DILocalVariable(name: "elide_outer_quotes", scope: !2067, file: !105, line: 270, type: !41)
!2114 = !DILocalVariable(name: "pending_shell_escape_end", scope: !2067, file: !105, line: 271, type: !41)
!2115 = !DILocalVariable(name: "encountered_single_quote", scope: !2067, file: !105, line: 272, type: !41)
!2116 = !DILocalVariable(name: "all_c_and_shell_quote_compat", scope: !2067, file: !105, line: 273, type: !41)
!2117 = !DILocalVariable(name: "escaping", scope: !2118, file: !105, line: 405, type: !41)
!2118 = distinct !DILexicalBlock(scope: !2119, file: !105, line: 401, column: 5)
!2119 = distinct !DILexicalBlock(scope: !2120, file: !105, line: 400, column: 3)
!2120 = distinct !DILexicalBlock(scope: !2121, file: !105, line: 400, column: 3)
!2121 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !105, file: !105, line: 256, type: !1181, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2122, retainedNodes: !11)
!2122 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !2123, nameTableKind: None)
!2123 = !{!2124, !2126, !2128, !2137, !2139, !2141, !2148, !2150}
!2124 = !DIGlobalVariableExpression(var: !2125, expr: !DIExpression())
!2125 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2122, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!2126 = !DIGlobalVariableExpression(var: !2127, expr: !DIExpression())
!2127 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2122, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!2128 = !DIGlobalVariableExpression(var: !2129, expr: !DIExpression())
!2129 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2122, file: !105, line: 1052, type: !2130, isLocal: false, isDefinition: true)
!2130 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !2131)
!2131 = !{!2132, !2133, !2134, !2135, !2136}
!2132 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2130, file: !105, line: 68, baseType: !82, size: 32)
!2133 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2130, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!2134 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2130, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!2135 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2130, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!2136 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2130, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!2137 = !DIGlobalVariableExpression(var: !2138, expr: !DIExpression())
!2138 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2122, file: !105, line: 116, type: !2130, isLocal: true, isDefinition: true)
!2139 = !DIGlobalVariableExpression(var: !2140, expr: !DIExpression())
!2140 = distinct !DIGlobalVariable(name: "slot0", scope: !2122, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!2141 = !DIGlobalVariableExpression(var: !2142, expr: !DIExpression())
!2142 = distinct !DIGlobalVariable(name: "slotvec", scope: !2122, file: !105, line: 845, type: !2143, isLocal: true, isDefinition: true)
!2143 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2144, size: 64)
!2144 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !2145)
!2145 = !{!2146, !2147}
!2146 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2144, file: !105, line: 836, baseType: !99, size: 64)
!2147 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2144, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!2148 = !DIGlobalVariableExpression(var: !2149, expr: !DIExpression())
!2149 = distinct !DIGlobalVariable(name: "nslots", scope: !2122, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!2150 = !DIGlobalVariableExpression(var: !2151, expr: !DIExpression())
!2151 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2122, file: !105, line: 844, type: !2144, isLocal: true, isDefinition: true)
!2152 = !DILocalVariable(name: "c_and_shell_quote_compat", scope: !2118, file: !105, line: 406, type: !41)
!2153 = distinct !DISubprogram(name: "gettext_quote", scope: !105, file: !105, line: 207, type: !2154, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !79, retainedNodes: !11)
!2154 = !DISubroutineType(types: !2155)
!2155 = !{!23, !23, !82}
!2156 = !DILocalVariable(name: "msgid", arg: 1, scope: !2153, file: !105, line: 207, type: !23)
!2157 = !DILocation(line: 207, column: 28, scope: !2153)
!2158 = !DILocalVariable(name: "s", arg: 2, scope: !2153, file: !105, line: 207, type: !82)
!2159 = !DILocation(line: 207, column: 54, scope: !2153)
!2160 = !DILocalVariable(name: "translation", scope: !2153, file: !105, line: 209, type: !23)
!2161 = !DILocation(line: 209, column: 15, scope: !2153)
!2162 = !DILocation(line: 209, column: 29, scope: !2153)
!2163 = !DILocalVariable(name: "locale_code", scope: !2153, file: !105, line: 210, type: !23)
!2164 = !DILocation(line: 210, column: 15, scope: !2153)
!2165 = !DILocation(line: 212, column: 7, scope: !2166)
!2166 = distinct !DILexicalBlock(scope: !2153, file: !105, line: 212, column: 7)
!2167 = !DILocation(line: 212, column: 22, scope: !2166)
!2168 = !DILocation(line: 212, column: 19, scope: !2166)
!2169 = !DILocation(line: 212, column: 7, scope: !2153)
!2170 = !DILocation(line: 213, column: 12, scope: !2166)
!2171 = !DILocation(line: 213, column: 5, scope: !2166)
!2172 = !DILocation(line: 233, column: 17, scope: !2153)
!2173 = !DILocation(line: 233, column: 15, scope: !2153)
!2174 = !DILocation(line: 234, column: 7, scope: !2175)
!2175 = distinct !DILexicalBlock(scope: !2153, file: !105, line: 234, column: 7)
!2176 = !DILocation(line: 234, column: 7, scope: !2153)
!2177 = !DILocation(line: 235, column: 12, scope: !2175)
!2178 = !DILocation(line: 235, column: 21, scope: !2175)
!2179 = !DILocation(line: 235, column: 5, scope: !2175)
!2180 = !DILocation(line: 236, column: 7, scope: !2181)
!2181 = distinct !DILexicalBlock(scope: !2153, file: !105, line: 236, column: 7)
!2182 = !DILocation(line: 236, column: 7, scope: !2153)
!2183 = !DILocation(line: 237, column: 12, scope: !2181)
!2184 = !DILocation(line: 237, column: 21, scope: !2181)
!2185 = !DILocation(line: 237, column: 5, scope: !2181)
!2186 = !DILocation(line: 239, column: 11, scope: !2153)
!2187 = !DILocation(line: 239, column: 13, scope: !2153)
!2188 = !DILocation(line: 239, column: 3, scope: !2153)
!2189 = !DILocation(line: 240, column: 1, scope: !2153)
!2190 = !DILocalVariable(name: "msgid", arg: 1, scope: !2191, file: !105, line: 207, type: !23)
!2191 = distinct !DISubprogram(name: "gettext_quote", scope: !105, file: !105, line: 207, type: !2154, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2192, retainedNodes: !11)
!2192 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !2193, nameTableKind: None)
!2193 = !{!2194, !2196, !2198, !2207, !2209, !2211, !2218, !2220}
!2194 = !DIGlobalVariableExpression(var: !2195, expr: !DIExpression())
!2195 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2192, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!2196 = !DIGlobalVariableExpression(var: !2197, expr: !DIExpression())
!2197 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2192, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!2198 = !DIGlobalVariableExpression(var: !2199, expr: !DIExpression())
!2199 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2192, file: !105, line: 1052, type: !2200, isLocal: false, isDefinition: true)
!2200 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !2201)
!2201 = !{!2202, !2203, !2204, !2205, !2206}
!2202 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2200, file: !105, line: 68, baseType: !82, size: 32)
!2203 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2200, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!2204 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2200, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!2205 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2200, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!2206 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2200, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!2207 = !DIGlobalVariableExpression(var: !2208, expr: !DIExpression())
!2208 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2192, file: !105, line: 116, type: !2200, isLocal: true, isDefinition: true)
!2209 = !DIGlobalVariableExpression(var: !2210, expr: !DIExpression())
!2210 = distinct !DIGlobalVariable(name: "slot0", scope: !2192, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!2211 = !DIGlobalVariableExpression(var: !2212, expr: !DIExpression())
!2212 = distinct !DIGlobalVariable(name: "slotvec", scope: !2192, file: !105, line: 845, type: !2213, isLocal: true, isDefinition: true)
!2213 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2214, size: 64)
!2214 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !2215)
!2215 = !{!2216, !2217}
!2216 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2214, file: !105, line: 836, baseType: !99, size: 64)
!2217 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2214, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!2218 = !DIGlobalVariableExpression(var: !2219, expr: !DIExpression())
!2219 = distinct !DIGlobalVariable(name: "nslots", scope: !2192, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!2220 = !DIGlobalVariableExpression(var: !2221, expr: !DIExpression())
!2221 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2192, file: !105, line: 844, type: !2214, isLocal: true, isDefinition: true)
!2222 = !DILocalVariable(name: "s", arg: 2, scope: !2191, file: !105, line: 207, type: !82)
!2223 = !DILocalVariable(name: "translation", scope: !2191, file: !105, line: 209, type: !23)
!2224 = !DILocalVariable(name: "locale_code", scope: !2191, file: !105, line: 210, type: !23)
!2225 = distinct !DISubprogram(name: "quotearg_char", scope: !105, file: !105, line: 991, type: !2226, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !79, retainedNodes: !11)
!2226 = !DISubroutineType(types: !2227)
!2227 = !{!8, !23, !9}
!2228 = !DILocalVariable(name: "arg", arg: 1, scope: !2225, file: !105, line: 991, type: !23)
!2229 = !DILocation(line: 991, column: 28, scope: !2225)
!2230 = !DILocalVariable(name: "ch", arg: 2, scope: !2225, file: !105, line: 991, type: !9)
!2231 = !DILocation(line: 991, column: 38, scope: !2225)
!2232 = !DILocation(line: 993, column: 29, scope: !2225)
!2233 = !DILocation(line: 993, column: 44, scope: !2225)
!2234 = !DILocation(line: 993, column: 10, scope: !2225)
!2235 = !DILocation(line: 993, column: 3, scope: !2225)
!2236 = !DILocalVariable(name: "arg", arg: 1, scope: !2237, file: !105, line: 991, type: !23)
!2237 = distinct !DISubprogram(name: "quotearg_char", scope: !105, file: !105, line: 991, type: !2226, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2238, retainedNodes: !11)
!2238 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !2239, nameTableKind: None)
!2239 = !{!2240, !2242, !2244, !2253, !2255, !2257, !2264, !2266}
!2240 = !DIGlobalVariableExpression(var: !2241, expr: !DIExpression())
!2241 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2238, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!2242 = !DIGlobalVariableExpression(var: !2243, expr: !DIExpression())
!2243 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2238, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!2244 = !DIGlobalVariableExpression(var: !2245, expr: !DIExpression())
!2245 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2238, file: !105, line: 1052, type: !2246, isLocal: false, isDefinition: true)
!2246 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !2247)
!2247 = !{!2248, !2249, !2250, !2251, !2252}
!2248 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2246, file: !105, line: 68, baseType: !82, size: 32)
!2249 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2246, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!2250 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2246, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!2251 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2246, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!2252 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2246, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!2253 = !DIGlobalVariableExpression(var: !2254, expr: !DIExpression())
!2254 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2238, file: !105, line: 116, type: !2246, isLocal: true, isDefinition: true)
!2255 = !DIGlobalVariableExpression(var: !2256, expr: !DIExpression())
!2256 = distinct !DIGlobalVariable(name: "slot0", scope: !2238, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!2257 = !DIGlobalVariableExpression(var: !2258, expr: !DIExpression())
!2258 = distinct !DIGlobalVariable(name: "slotvec", scope: !2238, file: !105, line: 845, type: !2259, isLocal: true, isDefinition: true)
!2259 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2260, size: 64)
!2260 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !2261)
!2261 = !{!2262, !2263}
!2262 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2260, file: !105, line: 836, baseType: !99, size: 64)
!2263 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2260, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!2264 = !DIGlobalVariableExpression(var: !2265, expr: !DIExpression())
!2265 = distinct !DIGlobalVariable(name: "nslots", scope: !2238, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!2266 = !DIGlobalVariableExpression(var: !2267, expr: !DIExpression())
!2267 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2238, file: !105, line: 844, type: !2260, isLocal: true, isDefinition: true)
!2268 = !DILocalVariable(name: "ch", arg: 2, scope: !2237, file: !105, line: 991, type: !9)
!2269 = distinct !DISubprogram(name: "quotearg_colon", scope: !105, file: !105, line: 997, type: !2270, scopeLine: 998, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !79, retainedNodes: !11)
!2270 = !DISubroutineType(types: !2271)
!2271 = !{!8, !23}
!2272 = !DILocalVariable(name: "arg", arg: 1, scope: !2269, file: !105, line: 997, type: !23)
!2273 = !DILocation(line: 997, column: 29, scope: !2269)
!2274 = !DILocation(line: 999, column: 25, scope: !2269)
!2275 = !DILocation(line: 999, column: 10, scope: !2269)
!2276 = !DILocation(line: 999, column: 3, scope: !2269)
!2277 = !DILocalVariable(name: "arg", arg: 1, scope: !2278, file: !105, line: 997, type: !23)
!2278 = distinct !DISubprogram(name: "quotearg_colon", scope: !105, file: !105, line: 997, type: !2270, scopeLine: 998, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2279, retainedNodes: !11)
!2279 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !2280, nameTableKind: None)
!2280 = !{!2281, !2283, !2285, !2294, !2296, !2298, !2305, !2307}
!2281 = !DIGlobalVariableExpression(var: !2282, expr: !DIExpression())
!2282 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2279, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!2283 = !DIGlobalVariableExpression(var: !2284, expr: !DIExpression())
!2284 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2279, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!2285 = !DIGlobalVariableExpression(var: !2286, expr: !DIExpression())
!2286 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2279, file: !105, line: 1052, type: !2287, isLocal: false, isDefinition: true)
!2287 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !2288)
!2288 = !{!2289, !2290, !2291, !2292, !2293}
!2289 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2287, file: !105, line: 68, baseType: !82, size: 32)
!2290 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2287, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!2291 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2287, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!2292 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2287, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!2293 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2287, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!2294 = !DIGlobalVariableExpression(var: !2295, expr: !DIExpression())
!2295 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2279, file: !105, line: 116, type: !2287, isLocal: true, isDefinition: true)
!2296 = !DIGlobalVariableExpression(var: !2297, expr: !DIExpression())
!2297 = distinct !DIGlobalVariable(name: "slot0", scope: !2279, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!2298 = !DIGlobalVariableExpression(var: !2299, expr: !DIExpression())
!2299 = distinct !DIGlobalVariable(name: "slotvec", scope: !2279, file: !105, line: 845, type: !2300, isLocal: true, isDefinition: true)
!2300 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2301, size: 64)
!2301 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !2302)
!2302 = !{!2303, !2304}
!2303 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2301, file: !105, line: 836, baseType: !99, size: 64)
!2304 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2301, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!2305 = !DIGlobalVariableExpression(var: !2306, expr: !DIExpression())
!2306 = distinct !DIGlobalVariable(name: "nslots", scope: !2279, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!2307 = !DIGlobalVariableExpression(var: !2308, expr: !DIExpression())
!2308 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2279, file: !105, line: 844, type: !2301, isLocal: true, isDefinition: true)
!2309 = distinct !DISubprogram(name: "quote_n_mem", scope: !105, file: !105, line: 1061, type: !2310, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !79, retainedNodes: !11)
!2310 = !DISubroutineType(types: !2311)
!2311 = !{!23, !6, !23, !99}
!2312 = !DILocalVariable(name: "n", arg: 1, scope: !2309, file: !105, line: 1061, type: !6)
!2313 = !DILocation(line: 1061, column: 18, scope: !2309)
!2314 = !DILocalVariable(name: "arg", arg: 2, scope: !2309, file: !105, line: 1061, type: !23)
!2315 = !DILocation(line: 1061, column: 33, scope: !2309)
!2316 = !DILocalVariable(name: "argsize", arg: 3, scope: !2309, file: !105, line: 1061, type: !99)
!2317 = !DILocation(line: 1061, column: 45, scope: !2309)
!2318 = !DILocation(line: 1063, column: 30, scope: !2309)
!2319 = !DILocation(line: 1063, column: 33, scope: !2309)
!2320 = !DILocation(line: 1063, column: 38, scope: !2309)
!2321 = !DILocation(line: 1063, column: 10, scope: !2309)
!2322 = !DILocation(line: 1063, column: 3, scope: !2309)
!2323 = !DILocalVariable(name: "n", arg: 1, scope: !2324, file: !105, line: 1061, type: !6)
!2324 = distinct !DISubprogram(name: "quote_n_mem", scope: !105, file: !105, line: 1061, type: !2310, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2325, retainedNodes: !11)
!2325 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !2326, nameTableKind: None)
!2326 = !{!2327, !2329, !2331, !2340, !2342, !2344, !2351, !2353}
!2327 = !DIGlobalVariableExpression(var: !2328, expr: !DIExpression())
!2328 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2325, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!2329 = !DIGlobalVariableExpression(var: !2330, expr: !DIExpression())
!2330 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2325, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!2331 = !DIGlobalVariableExpression(var: !2332, expr: !DIExpression())
!2332 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2325, file: !105, line: 1052, type: !2333, isLocal: false, isDefinition: true)
!2333 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !2334)
!2334 = !{!2335, !2336, !2337, !2338, !2339}
!2335 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2333, file: !105, line: 68, baseType: !82, size: 32)
!2336 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2333, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!2337 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2333, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!2338 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2333, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!2339 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2333, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!2340 = !DIGlobalVariableExpression(var: !2341, expr: !DIExpression())
!2341 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2325, file: !105, line: 116, type: !2333, isLocal: true, isDefinition: true)
!2342 = !DIGlobalVariableExpression(var: !2343, expr: !DIExpression())
!2343 = distinct !DIGlobalVariable(name: "slot0", scope: !2325, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!2344 = !DIGlobalVariableExpression(var: !2345, expr: !DIExpression())
!2345 = distinct !DIGlobalVariable(name: "slotvec", scope: !2325, file: !105, line: 845, type: !2346, isLocal: true, isDefinition: true)
!2346 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2347, size: 64)
!2347 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !2348)
!2348 = !{!2349, !2350}
!2349 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2347, file: !105, line: 836, baseType: !99, size: 64)
!2350 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2347, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!2351 = !DIGlobalVariableExpression(var: !2352, expr: !DIExpression())
!2352 = distinct !DIGlobalVariable(name: "nslots", scope: !2325, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!2353 = !DIGlobalVariableExpression(var: !2354, expr: !DIExpression())
!2354 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2325, file: !105, line: 844, type: !2347, isLocal: true, isDefinition: true)
!2355 = !DILocalVariable(name: "arg", arg: 2, scope: !2324, file: !105, line: 1061, type: !23)
!2356 = !DILocalVariable(name: "argsize", arg: 3, scope: !2324, file: !105, line: 1061, type: !99)
!2357 = distinct !DISubprogram(name: "quote_n", scope: !105, file: !105, line: 1073, type: !2358, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !79, retainedNodes: !11)
!2358 = !DISubroutineType(types: !2359)
!2359 = !{!23, !6, !23}
!2360 = !DILocalVariable(name: "n", arg: 1, scope: !2357, file: !105, line: 1073, type: !6)
!2361 = !DILocation(line: 1073, column: 14, scope: !2357)
!2362 = !DILocalVariable(name: "arg", arg: 2, scope: !2357, file: !105, line: 1073, type: !23)
!2363 = !DILocation(line: 1073, column: 29, scope: !2357)
!2364 = !DILocation(line: 1075, column: 23, scope: !2357)
!2365 = !DILocation(line: 1075, column: 26, scope: !2357)
!2366 = !DILocation(line: 1075, column: 10, scope: !2357)
!2367 = !DILocation(line: 1075, column: 3, scope: !2357)
!2368 = !DILocalVariable(name: "n", arg: 1, scope: !2369, file: !105, line: 1073, type: !6)
!2369 = distinct !DISubprogram(name: "quote_n", scope: !105, file: !105, line: 1073, type: !2358, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2370, retainedNodes: !11)
!2370 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !2371, nameTableKind: None)
!2371 = !{!2372, !2374, !2376, !2385, !2387, !2389, !2396, !2398}
!2372 = !DIGlobalVariableExpression(var: !2373, expr: !DIExpression())
!2373 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2370, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!2374 = !DIGlobalVariableExpression(var: !2375, expr: !DIExpression())
!2375 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2370, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!2376 = !DIGlobalVariableExpression(var: !2377, expr: !DIExpression())
!2377 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2370, file: !105, line: 1052, type: !2378, isLocal: false, isDefinition: true)
!2378 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !2379)
!2379 = !{!2380, !2381, !2382, !2383, !2384}
!2380 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2378, file: !105, line: 68, baseType: !82, size: 32)
!2381 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2378, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!2382 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2378, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!2383 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2378, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!2384 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2378, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!2385 = !DIGlobalVariableExpression(var: !2386, expr: !DIExpression())
!2386 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2370, file: !105, line: 116, type: !2378, isLocal: true, isDefinition: true)
!2387 = !DIGlobalVariableExpression(var: !2388, expr: !DIExpression())
!2388 = distinct !DIGlobalVariable(name: "slot0", scope: !2370, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!2389 = !DIGlobalVariableExpression(var: !2390, expr: !DIExpression())
!2390 = distinct !DIGlobalVariable(name: "slotvec", scope: !2370, file: !105, line: 845, type: !2391, isLocal: true, isDefinition: true)
!2391 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2392, size: 64)
!2392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !2393)
!2393 = !{!2394, !2395}
!2394 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2392, file: !105, line: 836, baseType: !99, size: 64)
!2395 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2392, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!2396 = !DIGlobalVariableExpression(var: !2397, expr: !DIExpression())
!2397 = distinct !DIGlobalVariable(name: "nslots", scope: !2370, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!2398 = !DIGlobalVariableExpression(var: !2399, expr: !DIExpression())
!2399 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2370, file: !105, line: 844, type: !2392, isLocal: true, isDefinition: true)
!2400 = !DILocalVariable(name: "arg", arg: 2, scope: !2369, file: !105, line: 1073, type: !23)
!2401 = distinct !DISubprogram(name: "quote", scope: !105, file: !105, line: 1079, type: !2402, scopeLine: 1080, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !79, retainedNodes: !11)
!2402 = !DISubroutineType(types: !2403)
!2403 = !{!23, !23}
!2404 = !DILocalVariable(name: "arg", arg: 1, scope: !2401, file: !105, line: 1079, type: !23)
!2405 = !DILocation(line: 1079, column: 20, scope: !2401)
!2406 = !DILocation(line: 1081, column: 22, scope: !2401)
!2407 = !DILocation(line: 1081, column: 10, scope: !2401)
!2408 = !DILocation(line: 1081, column: 3, scope: !2401)
!2409 = !DILocalVariable(name: "arg", arg: 1, scope: !2410, file: !105, line: 1079, type: !23)
!2410 = distinct !DISubprogram(name: "quote", scope: !105, file: !105, line: 1079, type: !2402, scopeLine: 1080, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2411, retainedNodes: !11)
!2411 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !2412, nameTableKind: None)
!2412 = !{!2413, !2415, !2417, !2426, !2428, !2430, !2437, !2439}
!2413 = !DIGlobalVariableExpression(var: !2414, expr: !DIExpression())
!2414 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2411, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!2415 = !DIGlobalVariableExpression(var: !2416, expr: !DIExpression())
!2416 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2411, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!2417 = !DIGlobalVariableExpression(var: !2418, expr: !DIExpression())
!2418 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2411, file: !105, line: 1052, type: !2419, isLocal: false, isDefinition: true)
!2419 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !2420)
!2420 = !{!2421, !2422, !2423, !2424, !2425}
!2421 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2419, file: !105, line: 68, baseType: !82, size: 32)
!2422 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2419, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!2423 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2419, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!2424 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2419, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!2425 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2419, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!2426 = !DIGlobalVariableExpression(var: !2427, expr: !DIExpression())
!2427 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2411, file: !105, line: 116, type: !2419, isLocal: true, isDefinition: true)
!2428 = !DIGlobalVariableExpression(var: !2429, expr: !DIExpression())
!2429 = distinct !DIGlobalVariable(name: "slot0", scope: !2411, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!2430 = !DIGlobalVariableExpression(var: !2431, expr: !DIExpression())
!2431 = distinct !DIGlobalVariable(name: "slotvec", scope: !2411, file: !105, line: 845, type: !2432, isLocal: true, isDefinition: true)
!2432 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2433, size: 64)
!2433 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !2434)
!2434 = !{!2435, !2436}
!2435 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2433, file: !105, line: 836, baseType: !99, size: 64)
!2436 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2433, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!2437 = !DIGlobalVariableExpression(var: !2438, expr: !DIExpression())
!2438 = distinct !DIGlobalVariable(name: "nslots", scope: !2411, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!2439 = !DIGlobalVariableExpression(var: !2440, expr: !DIExpression())
!2440 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2411, file: !105, line: 844, type: !2433, isLocal: true, isDefinition: true)
!2441 = distinct !DISubprogram(name: "version_etc_arn", scope: !2442, file: !2442, line: 61, type: !2443, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !151, retainedNodes: !11)
!2442 = !DIFile(filename: "lib/version-etc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2443 = !DISubroutineType(types: !2444)
!2444 = !{null, !2445, !23, !23, !23, !2500, !99}
!2445 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2446, size: 64)
!2446 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2447, line: 7, baseType: !2448)
!2447 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!2448 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2449, line: 49, size: 1728, elements: !2450)
!2449 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!2450 = !{!2451, !2452, !2453, !2454, !2455, !2456, !2457, !2458, !2459, !2460, !2461, !2462, !2463, !2466, !2468, !2469, !2470, !2474, !2475, !2477, !2481, !2484, !2486, !2489, !2492, !2493, !2494, !2495, !2496}
!2451 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2448, file: !2449, line: 51, baseType: !6, size: 32)
!2452 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2448, file: !2449, line: 54, baseType: !8, size: 64, offset: 64)
!2453 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2448, file: !2449, line: 55, baseType: !8, size: 64, offset: 128)
!2454 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2448, file: !2449, line: 56, baseType: !8, size: 64, offset: 192)
!2455 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2448, file: !2449, line: 57, baseType: !8, size: 64, offset: 256)
!2456 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2448, file: !2449, line: 58, baseType: !8, size: 64, offset: 320)
!2457 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2448, file: !2449, line: 59, baseType: !8, size: 64, offset: 384)
!2458 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2448, file: !2449, line: 60, baseType: !8, size: 64, offset: 448)
!2459 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2448, file: !2449, line: 61, baseType: !8, size: 64, offset: 512)
!2460 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2448, file: !2449, line: 64, baseType: !8, size: 64, offset: 576)
!2461 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2448, file: !2449, line: 65, baseType: !8, size: 64, offset: 640)
!2462 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2448, file: !2449, line: 66, baseType: !8, size: 64, offset: 704)
!2463 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2448, file: !2449, line: 68, baseType: !2464, size: 64, offset: 768)
!2464 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2465, size: 64)
!2465 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !2449, line: 36, flags: DIFlagFwdDecl)
!2466 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2448, file: !2449, line: 70, baseType: !2467, size: 64, offset: 832)
!2467 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2448, size: 64)
!2468 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2448, file: !2449, line: 72, baseType: !6, size: 32, offset: 896)
!2469 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2448, file: !2449, line: 73, baseType: !6, size: 32, offset: 928)
!2470 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2448, file: !2449, line: 74, baseType: !2471, size: 64, offset: 960)
!2471 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !2472, line: 152, baseType: !2473)
!2472 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!2473 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!2474 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2448, file: !2449, line: 77, baseType: !98, size: 16, offset: 1024)
!2475 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2448, file: !2449, line: 78, baseType: !2476, size: 8, offset: 1040)
!2476 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!2477 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2448, file: !2449, line: 79, baseType: !2478, size: 8, offset: 1048)
!2478 = !DICompositeType(tag: DW_TAG_array_type, baseType: !9, size: 8, elements: !2479)
!2479 = !{!2480}
!2480 = !DISubrange(count: 1)
!2481 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2448, file: !2449, line: 81, baseType: !2482, size: 64, offset: 1088)
!2482 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2483, size: 64)
!2483 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !2449, line: 43, baseType: null)
!2484 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2448, file: !2449, line: 89, baseType: !2485, size: 64, offset: 1152)
!2485 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !2472, line: 153, baseType: !2473)
!2486 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2448, file: !2449, line: 91, baseType: !2487, size: 64, offset: 1216)
!2487 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2488, size: 64)
!2488 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !2449, line: 37, flags: DIFlagFwdDecl)
!2489 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2448, file: !2449, line: 92, baseType: !2490, size: 64, offset: 1280)
!2490 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2491, size: 64)
!2491 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !2449, line: 38, flags: DIFlagFwdDecl)
!2492 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2448, file: !2449, line: 93, baseType: !2467, size: 64, offset: 1344)
!2493 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2448, file: !2449, line: 94, baseType: !13, size: 64, offset: 1408)
!2494 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2448, file: !2449, line: 95, baseType: !99, size: 64, offset: 1472)
!2495 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2448, file: !2449, line: 96, baseType: !6, size: 32, offset: 1536)
!2496 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2448, file: !2449, line: 98, baseType: !2497, size: 160, offset: 1568)
!2497 = !DICompositeType(tag: DW_TAG_array_type, baseType: !9, size: 160, elements: !2498)
!2498 = !{!2499}
!2499 = !DISubrange(count: 20)
!2500 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !107, size: 64)
!2501 = !DILocalVariable(name: "stream", arg: 1, scope: !2441, file: !2442, line: 61, type: !2445)
!2502 = !DILocation(line: 61, column: 24, scope: !2441)
!2503 = !DILocalVariable(name: "command_name", arg: 2, scope: !2441, file: !2442, line: 62, type: !23)
!2504 = !DILocation(line: 62, column: 30, scope: !2441)
!2505 = !DILocalVariable(name: "package", arg: 3, scope: !2441, file: !2442, line: 62, type: !23)
!2506 = !DILocation(line: 62, column: 56, scope: !2441)
!2507 = !DILocalVariable(name: "version", arg: 4, scope: !2441, file: !2442, line: 63, type: !23)
!2508 = !DILocation(line: 63, column: 30, scope: !2441)
!2509 = !DILocalVariable(name: "authors", arg: 5, scope: !2441, file: !2442, line: 64, type: !2500)
!2510 = !DILocation(line: 64, column: 39, scope: !2441)
!2511 = !DILocalVariable(name: "n_authors", arg: 6, scope: !2441, file: !2442, line: 64, type: !99)
!2512 = !DILocation(line: 64, column: 55, scope: !2441)
!2513 = !DILocation(line: 66, column: 7, scope: !2514)
!2514 = distinct !DILexicalBlock(scope: !2441, file: !2442, line: 66, column: 7)
!2515 = !DILocation(line: 66, column: 7, scope: !2441)
!2516 = !DILocation(line: 67, column: 14, scope: !2514)
!2517 = !DILocation(line: 67, column: 38, scope: !2514)
!2518 = !DILocation(line: 67, column: 52, scope: !2514)
!2519 = !DILocation(line: 67, column: 61, scope: !2514)
!2520 = !DILocation(line: 67, column: 5, scope: !2514)
!2521 = !DILocation(line: 69, column: 14, scope: !2514)
!2522 = !DILocation(line: 69, column: 33, scope: !2514)
!2523 = !DILocation(line: 69, column: 42, scope: !2514)
!2524 = !DILocation(line: 69, column: 5, scope: !2514)
!2525 = !DILocation(line: 83, column: 12, scope: !2441)
!2526 = !DILocation(line: 83, column: 43, scope: !2441)
!2527 = !DILocation(line: 83, column: 3, scope: !2441)
!2528 = !DILocation(line: 85, column: 3, scope: !2441)
!2529 = !DILocation(line: 88, column: 12, scope: !2441)
!2530 = !DILocation(line: 88, column: 20, scope: !2441)
!2531 = !DILocation(line: 88, column: 3, scope: !2441)
!2532 = !DILocation(line: 95, column: 3, scope: !2441)
!2533 = !DILocation(line: 97, column: 11, scope: !2441)
!2534 = !DILocation(line: 97, column: 3, scope: !2441)
!2535 = !DILocation(line: 102, column: 7, scope: !2536)
!2536 = distinct !DILexicalBlock(scope: !2441, file: !2442, line: 98, column: 5)
!2537 = !DILocation(line: 105, column: 16, scope: !2536)
!2538 = !DILocation(line: 105, column: 24, scope: !2536)
!2539 = !DILocation(line: 105, column: 47, scope: !2536)
!2540 = !DILocation(line: 105, column: 7, scope: !2536)
!2541 = !DILocation(line: 106, column: 7, scope: !2536)
!2542 = !DILocation(line: 109, column: 16, scope: !2536)
!2543 = !DILocation(line: 109, column: 24, scope: !2536)
!2544 = !DILocation(line: 109, column: 54, scope: !2536)
!2545 = !DILocation(line: 109, column: 66, scope: !2536)
!2546 = !DILocation(line: 109, column: 7, scope: !2536)
!2547 = !DILocation(line: 110, column: 7, scope: !2536)
!2548 = !DILocation(line: 113, column: 16, scope: !2536)
!2549 = !DILocation(line: 113, column: 24, scope: !2536)
!2550 = !DILocation(line: 114, column: 16, scope: !2536)
!2551 = !DILocation(line: 114, column: 28, scope: !2536)
!2552 = !DILocation(line: 114, column: 40, scope: !2536)
!2553 = !DILocation(line: 113, column: 7, scope: !2536)
!2554 = !DILocation(line: 115, column: 7, scope: !2536)
!2555 = !DILocation(line: 120, column: 16, scope: !2536)
!2556 = !DILocation(line: 120, column: 24, scope: !2536)
!2557 = !DILocation(line: 121, column: 16, scope: !2536)
!2558 = !DILocation(line: 121, column: 28, scope: !2536)
!2559 = !DILocation(line: 121, column: 40, scope: !2536)
!2560 = !DILocation(line: 121, column: 52, scope: !2536)
!2561 = !DILocation(line: 120, column: 7, scope: !2536)
!2562 = !DILocation(line: 122, column: 7, scope: !2536)
!2563 = !DILocation(line: 127, column: 16, scope: !2536)
!2564 = !DILocation(line: 127, column: 24, scope: !2536)
!2565 = !DILocation(line: 128, column: 16, scope: !2536)
!2566 = !DILocation(line: 128, column: 28, scope: !2536)
!2567 = !DILocation(line: 128, column: 40, scope: !2536)
!2568 = !DILocation(line: 128, column: 52, scope: !2536)
!2569 = !DILocation(line: 128, column: 64, scope: !2536)
!2570 = !DILocation(line: 127, column: 7, scope: !2536)
!2571 = !DILocation(line: 129, column: 7, scope: !2536)
!2572 = !DILocation(line: 134, column: 16, scope: !2536)
!2573 = !DILocation(line: 134, column: 24, scope: !2536)
!2574 = !DILocation(line: 135, column: 16, scope: !2536)
!2575 = !DILocation(line: 135, column: 28, scope: !2536)
!2576 = !DILocation(line: 135, column: 40, scope: !2536)
!2577 = !DILocation(line: 135, column: 52, scope: !2536)
!2578 = !DILocation(line: 135, column: 64, scope: !2536)
!2579 = !DILocation(line: 136, column: 16, scope: !2536)
!2580 = !DILocation(line: 134, column: 7, scope: !2536)
!2581 = !DILocation(line: 137, column: 7, scope: !2536)
!2582 = !DILocation(line: 142, column: 16, scope: !2536)
!2583 = !DILocation(line: 142, column: 24, scope: !2536)
!2584 = !DILocation(line: 143, column: 16, scope: !2536)
!2585 = !DILocation(line: 143, column: 28, scope: !2536)
!2586 = !DILocation(line: 143, column: 40, scope: !2536)
!2587 = !DILocation(line: 143, column: 52, scope: !2536)
!2588 = !DILocation(line: 143, column: 64, scope: !2536)
!2589 = !DILocation(line: 144, column: 16, scope: !2536)
!2590 = !DILocation(line: 144, column: 28, scope: !2536)
!2591 = !DILocation(line: 142, column: 7, scope: !2536)
!2592 = !DILocation(line: 145, column: 7, scope: !2536)
!2593 = !DILocation(line: 150, column: 16, scope: !2536)
!2594 = !DILocation(line: 150, column: 24, scope: !2536)
!2595 = !DILocation(line: 152, column: 17, scope: !2536)
!2596 = !DILocation(line: 152, column: 29, scope: !2536)
!2597 = !DILocation(line: 152, column: 41, scope: !2536)
!2598 = !DILocation(line: 152, column: 53, scope: !2536)
!2599 = !DILocation(line: 152, column: 65, scope: !2536)
!2600 = !DILocation(line: 153, column: 17, scope: !2536)
!2601 = !DILocation(line: 153, column: 29, scope: !2536)
!2602 = !DILocation(line: 153, column: 41, scope: !2536)
!2603 = !DILocation(line: 150, column: 7, scope: !2536)
!2604 = !DILocation(line: 154, column: 7, scope: !2536)
!2605 = !DILocation(line: 159, column: 16, scope: !2536)
!2606 = !DILocation(line: 159, column: 24, scope: !2536)
!2607 = !DILocation(line: 161, column: 16, scope: !2536)
!2608 = !DILocation(line: 161, column: 28, scope: !2536)
!2609 = !DILocation(line: 161, column: 40, scope: !2536)
!2610 = !DILocation(line: 161, column: 52, scope: !2536)
!2611 = !DILocation(line: 161, column: 64, scope: !2536)
!2612 = !DILocation(line: 162, column: 16, scope: !2536)
!2613 = !DILocation(line: 162, column: 28, scope: !2536)
!2614 = !DILocation(line: 162, column: 40, scope: !2536)
!2615 = !DILocation(line: 162, column: 52, scope: !2536)
!2616 = !DILocation(line: 159, column: 7, scope: !2536)
!2617 = !DILocation(line: 163, column: 7, scope: !2536)
!2618 = !DILocation(line: 170, column: 16, scope: !2536)
!2619 = !DILocation(line: 170, column: 24, scope: !2536)
!2620 = !DILocation(line: 172, column: 17, scope: !2536)
!2621 = !DILocation(line: 172, column: 29, scope: !2536)
!2622 = !DILocation(line: 172, column: 41, scope: !2536)
!2623 = !DILocation(line: 172, column: 53, scope: !2536)
!2624 = !DILocation(line: 172, column: 65, scope: !2536)
!2625 = !DILocation(line: 173, column: 17, scope: !2536)
!2626 = !DILocation(line: 173, column: 29, scope: !2536)
!2627 = !DILocation(line: 173, column: 41, scope: !2536)
!2628 = !DILocation(line: 173, column: 53, scope: !2536)
!2629 = !DILocation(line: 170, column: 7, scope: !2536)
!2630 = !DILocation(line: 174, column: 7, scope: !2536)
!2631 = !DILocation(line: 176, column: 1, scope: !2441)
!2632 = !DILocalVariable(name: "stream", arg: 1, scope: !2633, file: !2442, line: 61, type: !2636)
!2633 = distinct !DISubprogram(name: "version_etc_arn", scope: !2442, file: !2442, line: 61, type: !2634, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2670, retainedNodes: !11)
!2634 = !DISubroutineType(types: !2635)
!2635 = !{null, !2636, !23, !23, !23, !2500, !99}
!2636 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2637, size: 64)
!2637 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2447, line: 7, baseType: !2638)
!2638 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2449, line: 49, size: 1728, elements: !2639)
!2639 = !{!2640, !2641, !2642, !2643, !2644, !2645, !2646, !2647, !2648, !2649, !2650, !2651, !2652, !2653, !2655, !2656, !2657, !2658, !2659, !2660, !2661, !2662, !2663, !2664, !2665, !2666, !2667, !2668, !2669}
!2640 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2638, file: !2449, line: 51, baseType: !6, size: 32)
!2641 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2638, file: !2449, line: 54, baseType: !8, size: 64, offset: 64)
!2642 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2638, file: !2449, line: 55, baseType: !8, size: 64, offset: 128)
!2643 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2638, file: !2449, line: 56, baseType: !8, size: 64, offset: 192)
!2644 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2638, file: !2449, line: 57, baseType: !8, size: 64, offset: 256)
!2645 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2638, file: !2449, line: 58, baseType: !8, size: 64, offset: 320)
!2646 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2638, file: !2449, line: 59, baseType: !8, size: 64, offset: 384)
!2647 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2638, file: !2449, line: 60, baseType: !8, size: 64, offset: 448)
!2648 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2638, file: !2449, line: 61, baseType: !8, size: 64, offset: 512)
!2649 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2638, file: !2449, line: 64, baseType: !8, size: 64, offset: 576)
!2650 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2638, file: !2449, line: 65, baseType: !8, size: 64, offset: 640)
!2651 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2638, file: !2449, line: 66, baseType: !8, size: 64, offset: 704)
!2652 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2638, file: !2449, line: 68, baseType: !2464, size: 64, offset: 768)
!2653 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2638, file: !2449, line: 70, baseType: !2654, size: 64, offset: 832)
!2654 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2638, size: 64)
!2655 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2638, file: !2449, line: 72, baseType: !6, size: 32, offset: 896)
!2656 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2638, file: !2449, line: 73, baseType: !6, size: 32, offset: 928)
!2657 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2638, file: !2449, line: 74, baseType: !2471, size: 64, offset: 960)
!2658 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2638, file: !2449, line: 77, baseType: !98, size: 16, offset: 1024)
!2659 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2638, file: !2449, line: 78, baseType: !2476, size: 8, offset: 1040)
!2660 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2638, file: !2449, line: 79, baseType: !2478, size: 8, offset: 1048)
!2661 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2638, file: !2449, line: 81, baseType: !2482, size: 64, offset: 1088)
!2662 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2638, file: !2449, line: 89, baseType: !2485, size: 64, offset: 1152)
!2663 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2638, file: !2449, line: 91, baseType: !2487, size: 64, offset: 1216)
!2664 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2638, file: !2449, line: 92, baseType: !2490, size: 64, offset: 1280)
!2665 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2638, file: !2449, line: 93, baseType: !2654, size: 64, offset: 1344)
!2666 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2638, file: !2449, line: 94, baseType: !13, size: 64, offset: 1408)
!2667 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2638, file: !2449, line: 95, baseType: !99, size: 64, offset: 1472)
!2668 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2638, file: !2449, line: 96, baseType: !6, size: 32, offset: 1536)
!2669 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2638, file: !2449, line: 98, baseType: !2497, size: 160, offset: 1568)
!2670 = distinct !DICompileUnit(language: DW_LANG_C99, file: !152, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!2671 = !DILocalVariable(name: "command_name", arg: 2, scope: !2633, file: !2442, line: 62, type: !23)
!2672 = !DILocalVariable(name: "package", arg: 3, scope: !2633, file: !2442, line: 62, type: !23)
!2673 = !DILocalVariable(name: "version", arg: 4, scope: !2633, file: !2442, line: 63, type: !23)
!2674 = !DILocalVariable(name: "authors", arg: 5, scope: !2633, file: !2442, line: 64, type: !2500)
!2675 = !DILocalVariable(name: "n_authors", arg: 6, scope: !2633, file: !2442, line: 64, type: !99)
!2676 = distinct !DISubprogram(name: "version_etc_va", scope: !2442, file: !2442, line: 199, type: !2677, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !151, retainedNodes: !11)
!2677 = !DISubroutineType(types: !2678)
!2678 = !{null, !2445, !23, !23, !23, !2679}
!2679 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2680, size: 64)
!2680 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !152, line: 192, size: 192, elements: !2681)
!2681 = !{!2682, !2683, !2684, !2685}
!2682 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !2680, file: !152, line: 192, baseType: !84, size: 32)
!2683 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !2680, file: !152, line: 192, baseType: !84, size: 32, offset: 32)
!2684 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !2680, file: !152, line: 192, baseType: !13, size: 64, offset: 64)
!2685 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !2680, file: !152, line: 192, baseType: !13, size: 64, offset: 128)
!2686 = !DILocalVariable(name: "stream", arg: 1, scope: !2676, file: !2442, line: 199, type: !2445)
!2687 = !DILocation(line: 199, column: 23, scope: !2676)
!2688 = !DILocalVariable(name: "command_name", arg: 2, scope: !2676, file: !2442, line: 200, type: !23)
!2689 = !DILocation(line: 200, column: 29, scope: !2676)
!2690 = !DILocalVariable(name: "package", arg: 3, scope: !2676, file: !2442, line: 200, type: !23)
!2691 = !DILocation(line: 200, column: 55, scope: !2676)
!2692 = !DILocalVariable(name: "version", arg: 4, scope: !2676, file: !2442, line: 201, type: !23)
!2693 = !DILocation(line: 201, column: 29, scope: !2676)
!2694 = !DILocalVariable(name: "authors", arg: 5, scope: !2676, file: !2442, line: 201, type: !2679)
!2695 = !DILocation(line: 201, column: 46, scope: !2676)
!2696 = !DILocalVariable(name: "n_authors", scope: !2676, file: !2442, line: 203, type: !99)
!2697 = !DILocation(line: 203, column: 10, scope: !2676)
!2698 = !DILocalVariable(name: "authtab", scope: !2676, file: !2442, line: 204, type: !2699)
!2699 = !DICompositeType(tag: DW_TAG_array_type, baseType: !23, size: 640, elements: !114)
!2700 = !DILocation(line: 204, column: 15, scope: !2676)
!2701 = !DILocation(line: 206, column: 18, scope: !2702)
!2702 = distinct !DILexicalBlock(scope: !2676, file: !2442, line: 206, column: 3)
!2703 = !DILocation(line: 206, column: 8, scope: !2702)
!2704 = !DILocation(line: 207, column: 8, scope: !2705)
!2705 = distinct !DILexicalBlock(scope: !2702, file: !2442, line: 206, column: 3)
!2706 = !DILocation(line: 207, column: 18, scope: !2705)
!2707 = !DILocation(line: 208, column: 10, scope: !2705)
!2708 = !DILocation(line: 208, column: 35, scope: !2705)
!2709 = !DILocation(line: 208, column: 22, scope: !2705)
!2710 = !DILocation(line: 208, column: 14, scope: !2705)
!2711 = !DILocation(line: 208, column: 33, scope: !2705)
!2712 = !DILocation(line: 208, column: 67, scope: !2705)
!2713 = !DILocation(line: 0, scope: !2705)
!2714 = !DILocation(line: 206, column: 3, scope: !2702)
!2715 = !DILocation(line: 209, column: 17, scope: !2705)
!2716 = !DILocation(line: 206, column: 3, scope: !2705)
!2717 = distinct !{!2717, !2714, !2718}
!2718 = !DILocation(line: 210, column: 5, scope: !2702)
!2719 = !DILocation(line: 211, column: 20, scope: !2676)
!2720 = !DILocation(line: 211, column: 28, scope: !2676)
!2721 = !DILocation(line: 211, column: 42, scope: !2676)
!2722 = !DILocation(line: 211, column: 51, scope: !2676)
!2723 = !DILocation(line: 212, column: 20, scope: !2676)
!2724 = !DILocation(line: 212, column: 29, scope: !2676)
!2725 = !DILocation(line: 211, column: 3, scope: !2676)
!2726 = !DILocation(line: 213, column: 1, scope: !2676)
!2727 = !DILocalVariable(name: "stream", arg: 1, scope: !2728, file: !2442, line: 199, type: !2731)
!2728 = distinct !DISubprogram(name: "version_etc_va", scope: !2442, file: !2442, line: 199, type: !2729, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2772, retainedNodes: !11)
!2729 = !DISubroutineType(types: !2730)
!2730 = !{null, !2731, !23, !23, !23, !2765}
!2731 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2732, size: 64)
!2732 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2447, line: 7, baseType: !2733)
!2733 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2449, line: 49, size: 1728, elements: !2734)
!2734 = !{!2735, !2736, !2737, !2738, !2739, !2740, !2741, !2742, !2743, !2744, !2745, !2746, !2747, !2748, !2750, !2751, !2752, !2753, !2754, !2755, !2756, !2757, !2758, !2759, !2760, !2761, !2762, !2763, !2764}
!2735 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2733, file: !2449, line: 51, baseType: !6, size: 32)
!2736 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2733, file: !2449, line: 54, baseType: !8, size: 64, offset: 64)
!2737 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2733, file: !2449, line: 55, baseType: !8, size: 64, offset: 128)
!2738 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2733, file: !2449, line: 56, baseType: !8, size: 64, offset: 192)
!2739 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2733, file: !2449, line: 57, baseType: !8, size: 64, offset: 256)
!2740 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2733, file: !2449, line: 58, baseType: !8, size: 64, offset: 320)
!2741 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2733, file: !2449, line: 59, baseType: !8, size: 64, offset: 384)
!2742 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2733, file: !2449, line: 60, baseType: !8, size: 64, offset: 448)
!2743 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2733, file: !2449, line: 61, baseType: !8, size: 64, offset: 512)
!2744 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2733, file: !2449, line: 64, baseType: !8, size: 64, offset: 576)
!2745 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2733, file: !2449, line: 65, baseType: !8, size: 64, offset: 640)
!2746 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2733, file: !2449, line: 66, baseType: !8, size: 64, offset: 704)
!2747 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2733, file: !2449, line: 68, baseType: !2464, size: 64, offset: 768)
!2748 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2733, file: !2449, line: 70, baseType: !2749, size: 64, offset: 832)
!2749 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2733, size: 64)
!2750 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2733, file: !2449, line: 72, baseType: !6, size: 32, offset: 896)
!2751 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2733, file: !2449, line: 73, baseType: !6, size: 32, offset: 928)
!2752 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2733, file: !2449, line: 74, baseType: !2471, size: 64, offset: 960)
!2753 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2733, file: !2449, line: 77, baseType: !98, size: 16, offset: 1024)
!2754 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2733, file: !2449, line: 78, baseType: !2476, size: 8, offset: 1040)
!2755 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2733, file: !2449, line: 79, baseType: !2478, size: 8, offset: 1048)
!2756 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2733, file: !2449, line: 81, baseType: !2482, size: 64, offset: 1088)
!2757 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2733, file: !2449, line: 89, baseType: !2485, size: 64, offset: 1152)
!2758 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2733, file: !2449, line: 91, baseType: !2487, size: 64, offset: 1216)
!2759 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2733, file: !2449, line: 92, baseType: !2490, size: 64, offset: 1280)
!2760 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2733, file: !2449, line: 93, baseType: !2749, size: 64, offset: 1344)
!2761 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2733, file: !2449, line: 94, baseType: !13, size: 64, offset: 1408)
!2762 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2733, file: !2449, line: 95, baseType: !99, size: 64, offset: 1472)
!2763 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2733, file: !2449, line: 96, baseType: !6, size: 32, offset: 1536)
!2764 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2733, file: !2449, line: 98, baseType: !2497, size: 160, offset: 1568)
!2765 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2766, size: 64)
!2766 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !152, line: 192, size: 192, elements: !2767)
!2767 = !{!2768, !2769, !2770, !2771}
!2768 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !2766, file: !152, line: 192, baseType: !84, size: 32)
!2769 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !2766, file: !152, line: 192, baseType: !84, size: 32, offset: 32)
!2770 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !2766, file: !152, line: 192, baseType: !13, size: 64, offset: 64)
!2771 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !2766, file: !152, line: 192, baseType: !13, size: 64, offset: 128)
!2772 = distinct !DICompileUnit(language: DW_LANG_C99, file: !152, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!2773 = !DILocalVariable(name: "command_name", arg: 2, scope: !2728, file: !2442, line: 200, type: !23)
!2774 = !DILocalVariable(name: "package", arg: 3, scope: !2728, file: !2442, line: 200, type: !23)
!2775 = !DILocalVariable(name: "version", arg: 4, scope: !2728, file: !2442, line: 201, type: !23)
!2776 = !DILocalVariable(name: "authors", arg: 5, scope: !2728, file: !2442, line: 201, type: !2765)
!2777 = !DILocalVariable(name: "n_authors", scope: !2728, file: !2442, line: 203, type: !99)
!2778 = !DILocalVariable(name: "authtab", scope: !2728, file: !2442, line: 204, type: !2699)
!2779 = distinct !DISubprogram(name: "version_etc", scope: !2442, file: !2442, line: 230, type: !2780, scopeLine: 233, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !151, retainedNodes: !11)
!2780 = !DISubroutineType(types: !2781)
!2781 = !{null, !2445, !23, !23, !23, null}
!2782 = !DILocalVariable(name: "stream", arg: 1, scope: !2779, file: !2442, line: 230, type: !2445)
!2783 = !DILocation(line: 230, column: 20, scope: !2779)
!2784 = !DILocalVariable(name: "command_name", arg: 2, scope: !2779, file: !2442, line: 231, type: !23)
!2785 = !DILocation(line: 231, column: 26, scope: !2779)
!2786 = !DILocalVariable(name: "package", arg: 3, scope: !2779, file: !2442, line: 231, type: !23)
!2787 = !DILocation(line: 231, column: 52, scope: !2779)
!2788 = !DILocalVariable(name: "version", arg: 4, scope: !2779, file: !2442, line: 232, type: !23)
!2789 = !DILocation(line: 232, column: 26, scope: !2779)
!2790 = !DILocalVariable(name: "authors", scope: !2779, file: !2442, line: 234, type: !2791)
!2791 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !2792, line: 52, baseType: !2793)
!2792 = !DIFile(filename: "/usr/include/stdio.h", directory: "")
!2793 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !2794, line: 32, baseType: !2795)
!2794 = !DIFile(filename: "/usr/lib/llvm-9/lib/clang/9.0.1/include/stdarg.h", directory: "")
!2795 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !152, line: 234, baseType: !2796)
!2796 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2680, size: 192, elements: !2479)
!2797 = !DILocation(line: 234, column: 11, scope: !2779)
!2798 = !DILocation(line: 236, column: 3, scope: !2779)
!2799 = !DILocation(line: 237, column: 19, scope: !2779)
!2800 = !DILocation(line: 237, column: 27, scope: !2779)
!2801 = !DILocation(line: 237, column: 41, scope: !2779)
!2802 = !DILocation(line: 237, column: 50, scope: !2779)
!2803 = !DILocation(line: 237, column: 59, scope: !2779)
!2804 = !DILocation(line: 237, column: 3, scope: !2779)
!2805 = !DILocation(line: 238, column: 3, scope: !2779)
!2806 = !DILocation(line: 239, column: 1, scope: !2779)
!2807 = !DILocalVariable(name: "stream", arg: 1, scope: !2808, file: !2442, line: 230, type: !2811)
!2808 = distinct !DISubprogram(name: "version_etc", scope: !2442, file: !2442, line: 230, type: !2809, scopeLine: 233, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2845, retainedNodes: !11)
!2809 = !DISubroutineType(types: !2810)
!2810 = !{null, !2811, !23, !23, !23, null}
!2811 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2812, size: 64)
!2812 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2447, line: 7, baseType: !2813)
!2813 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2449, line: 49, size: 1728, elements: !2814)
!2814 = !{!2815, !2816, !2817, !2818, !2819, !2820, !2821, !2822, !2823, !2824, !2825, !2826, !2827, !2828, !2830, !2831, !2832, !2833, !2834, !2835, !2836, !2837, !2838, !2839, !2840, !2841, !2842, !2843, !2844}
!2815 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2813, file: !2449, line: 51, baseType: !6, size: 32)
!2816 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2813, file: !2449, line: 54, baseType: !8, size: 64, offset: 64)
!2817 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2813, file: !2449, line: 55, baseType: !8, size: 64, offset: 128)
!2818 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2813, file: !2449, line: 56, baseType: !8, size: 64, offset: 192)
!2819 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2813, file: !2449, line: 57, baseType: !8, size: 64, offset: 256)
!2820 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2813, file: !2449, line: 58, baseType: !8, size: 64, offset: 320)
!2821 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2813, file: !2449, line: 59, baseType: !8, size: 64, offset: 384)
!2822 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2813, file: !2449, line: 60, baseType: !8, size: 64, offset: 448)
!2823 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2813, file: !2449, line: 61, baseType: !8, size: 64, offset: 512)
!2824 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2813, file: !2449, line: 64, baseType: !8, size: 64, offset: 576)
!2825 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2813, file: !2449, line: 65, baseType: !8, size: 64, offset: 640)
!2826 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2813, file: !2449, line: 66, baseType: !8, size: 64, offset: 704)
!2827 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2813, file: !2449, line: 68, baseType: !2464, size: 64, offset: 768)
!2828 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2813, file: !2449, line: 70, baseType: !2829, size: 64, offset: 832)
!2829 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2813, size: 64)
!2830 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2813, file: !2449, line: 72, baseType: !6, size: 32, offset: 896)
!2831 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2813, file: !2449, line: 73, baseType: !6, size: 32, offset: 928)
!2832 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2813, file: !2449, line: 74, baseType: !2471, size: 64, offset: 960)
!2833 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2813, file: !2449, line: 77, baseType: !98, size: 16, offset: 1024)
!2834 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2813, file: !2449, line: 78, baseType: !2476, size: 8, offset: 1040)
!2835 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2813, file: !2449, line: 79, baseType: !2478, size: 8, offset: 1048)
!2836 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2813, file: !2449, line: 81, baseType: !2482, size: 64, offset: 1088)
!2837 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2813, file: !2449, line: 89, baseType: !2485, size: 64, offset: 1152)
!2838 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2813, file: !2449, line: 91, baseType: !2487, size: 64, offset: 1216)
!2839 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2813, file: !2449, line: 92, baseType: !2490, size: 64, offset: 1280)
!2840 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2813, file: !2449, line: 93, baseType: !2829, size: 64, offset: 1344)
!2841 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2813, file: !2449, line: 94, baseType: !13, size: 64, offset: 1408)
!2842 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2813, file: !2449, line: 95, baseType: !99, size: 64, offset: 1472)
!2843 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2813, file: !2449, line: 96, baseType: !6, size: 32, offset: 1536)
!2844 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2813, file: !2449, line: 98, baseType: !2497, size: 160, offset: 1568)
!2845 = distinct !DICompileUnit(language: DW_LANG_C99, file: !152, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!2846 = !DILocalVariable(name: "command_name", arg: 2, scope: !2808, file: !2442, line: 231, type: !23)
!2847 = !DILocalVariable(name: "package", arg: 3, scope: !2808, file: !2442, line: 231, type: !23)
!2848 = !DILocalVariable(name: "version", arg: 4, scope: !2808, file: !2442, line: 232, type: !23)
!2849 = !DILocalVariable(name: "authors", scope: !2808, file: !2442, line: 234, type: !2850)
!2850 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !2792, line: 52, baseType: !2851)
!2851 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !2794, line: 32, baseType: !2852)
!2852 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !152, line: 234, baseType: !2853)
!2853 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2854, size: 192, elements: !2479)
!2854 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !152, line: 192, size: 192, elements: !2855)
!2855 = !{!2856, !2857, !2858, !2859}
!2856 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !2854, file: !152, line: 192, baseType: !84, size: 32)
!2857 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !2854, file: !152, line: 192, baseType: !84, size: 32, offset: 32)
!2858 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !2854, file: !152, line: 192, baseType: !13, size: 64, offset: 64)
!2859 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !2854, file: !152, line: 192, baseType: !13, size: 64, offset: 128)
!2860 = distinct !DISubprogram(name: "xmalloc", scope: !2861, file: !2861, line: 39, type: !2862, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !154, retainedNodes: !11)
!2861 = !DIFile(filename: "lib/xmalloc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2862 = !DISubroutineType(types: !2863)
!2863 = !{!13, !99}
!2864 = !DILocalVariable(name: "n", arg: 1, scope: !2860, file: !2861, line: 39, type: !99)
!2865 = !DILocation(line: 39, column: 17, scope: !2860)
!2866 = !DILocalVariable(name: "p", scope: !2860, file: !2861, line: 41, type: !13)
!2867 = !DILocation(line: 41, column: 9, scope: !2860)
!2868 = !DILocation(line: 41, column: 21, scope: !2860)
!2869 = !DILocation(line: 41, column: 13, scope: !2860)
!2870 = !DILocation(line: 42, column: 8, scope: !2871)
!2871 = distinct !DILexicalBlock(scope: !2860, file: !2861, line: 42, column: 7)
!2872 = !DILocation(line: 42, column: 10, scope: !2871)
!2873 = !DILocation(line: 42, column: 13, scope: !2871)
!2874 = !DILocation(line: 42, column: 15, scope: !2871)
!2875 = !DILocation(line: 42, column: 7, scope: !2860)
!2876 = !DILocation(line: 43, column: 5, scope: !2871)
!2877 = !DILocation(line: 44, column: 10, scope: !2860)
!2878 = !DILocation(line: 44, column: 3, scope: !2860)
!2879 = !DILocalVariable(name: "n", arg: 1, scope: !2880, file: !2861, line: 39, type: !99)
!2880 = distinct !DISubprogram(name: "xmalloc", scope: !2861, file: !2861, line: 39, type: !2862, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2881, retainedNodes: !11)
!2881 = distinct !DICompileUnit(language: DW_LANG_C99, file: !155, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !156, nameTableKind: None)
!2882 = !DILocalVariable(name: "p", scope: !2880, file: !2861, line: 41, type: !13)
!2883 = distinct !DISubprogram(name: "xrealloc", scope: !2861, file: !2861, line: 51, type: !2884, scopeLine: 52, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !154, retainedNodes: !11)
!2884 = !DISubroutineType(types: !2885)
!2885 = !{!13, !13, !99}
!2886 = !DILocalVariable(name: "p", arg: 1, scope: !2883, file: !2861, line: 51, type: !13)
!2887 = !DILocation(line: 51, column: 17, scope: !2883)
!2888 = !DILocalVariable(name: "n", arg: 2, scope: !2883, file: !2861, line: 51, type: !99)
!2889 = !DILocation(line: 51, column: 27, scope: !2883)
!2890 = !DILocation(line: 53, column: 8, scope: !2891)
!2891 = distinct !DILexicalBlock(scope: !2883, file: !2861, line: 53, column: 7)
!2892 = !DILocation(line: 53, column: 10, scope: !2891)
!2893 = !DILocation(line: 53, column: 13, scope: !2891)
!2894 = !DILocation(line: 53, column: 7, scope: !2883)
!2895 = !DILocation(line: 57, column: 13, scope: !2896)
!2896 = distinct !DILexicalBlock(scope: !2891, file: !2861, line: 54, column: 5)
!2897 = !DILocation(line: 57, column: 7, scope: !2896)
!2898 = !DILocation(line: 58, column: 7, scope: !2896)
!2899 = !DILocation(line: 61, column: 16, scope: !2883)
!2900 = !DILocation(line: 61, column: 19, scope: !2883)
!2901 = !DILocation(line: 61, column: 7, scope: !2883)
!2902 = !DILocation(line: 61, column: 5, scope: !2883)
!2903 = !DILocation(line: 62, column: 8, scope: !2904)
!2904 = distinct !DILexicalBlock(scope: !2883, file: !2861, line: 62, column: 7)
!2905 = !DILocation(line: 62, column: 10, scope: !2904)
!2906 = !DILocation(line: 62, column: 13, scope: !2904)
!2907 = !DILocation(line: 62, column: 7, scope: !2883)
!2908 = !DILocation(line: 63, column: 5, scope: !2904)
!2909 = !DILocation(line: 64, column: 10, scope: !2883)
!2910 = !DILocation(line: 64, column: 3, scope: !2883)
!2911 = !DILocation(line: 65, column: 1, scope: !2883)
!2912 = !DILocalVariable(name: "p", arg: 1, scope: !2913, file: !2861, line: 51, type: !13)
!2913 = distinct !DISubprogram(name: "xrealloc", scope: !2861, file: !2861, line: 51, type: !2884, scopeLine: 52, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2914, retainedNodes: !11)
!2914 = distinct !DICompileUnit(language: DW_LANG_C99, file: !155, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !156, nameTableKind: None)
!2915 = !DILocalVariable(name: "n", arg: 2, scope: !2913, file: !2861, line: 51, type: !99)
!2916 = distinct !DISubprogram(name: "xcharalloc", scope: !2917, file: !2917, line: 216, type: !2918, scopeLine: 217, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !154, retainedNodes: !11)
!2917 = !DIFile(filename: "./lib/xalloc.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2918 = !DISubroutineType(types: !2919)
!2919 = !{!8, !99}
!2920 = !DILocalVariable(name: "n", arg: 1, scope: !2916, file: !2917, line: 216, type: !99)
!2921 = !DILocation(line: 216, column: 20, scope: !2916)
!2922 = !DILocation(line: 218, column: 10, scope: !2916)
!2923 = !DILocation(line: 218, column: 3, scope: !2916)
!2924 = !DILocalVariable(name: "n", arg: 1, scope: !2925, file: !2917, line: 216, type: !99)
!2925 = distinct !DISubprogram(name: "xcharalloc", scope: !2917, file: !2917, line: 216, type: !2918, scopeLine: 217, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2926, retainedNodes: !11)
!2926 = distinct !DICompileUnit(language: DW_LANG_C99, file: !155, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !156, nameTableKind: None)
!2927 = distinct !DISubprogram(name: "xalloc_die", scope: !2928, file: !2928, line: 32, type: !640, scopeLine: 33, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !157, retainedNodes: !11)
!2928 = !DIFile(filename: "lib/xalloc-die.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2929 = !DILocation(line: 34, column: 10, scope: !2927)
!2930 = !DILocation(line: 34, column: 33, scope: !2927)
!2931 = !DILocation(line: 34, column: 3, scope: !2927)
!2932 = !DILocation(line: 40, column: 3, scope: !2927)
!2933 = distinct !DISubprogram(name: "rpl_mbrtowc", scope: !2934, file: !2934, line: 86, type: !2935, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !159, retainedNodes: !11)
!2934 = !DIFile(filename: "lib/mbrtowc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2935 = !DISubroutineType(types: !2936)
!2936 = !{!99, !2937, !23, !99, !2938}
!2937 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1683, size: 64)
!2938 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2939, size: 64)
!2939 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !1654, line: 6, baseType: !2940)
!2940 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !1656, line: 21, baseType: !2941)
!2941 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1656, line: 13, size: 64, elements: !2942)
!2942 = !{!2943, !2944}
!2943 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !2941, file: !1656, line: 15, baseType: !6, size: 32)
!2944 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !2941, file: !1656, line: 20, baseType: !2945, size: 32, offset: 32)
!2945 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2941, file: !1656, line: 16, size: 32, elements: !2946)
!2946 = !{!2947, !2948}
!2947 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !2945, file: !1656, line: 18, baseType: !84, size: 32)
!2948 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !2945, file: !1656, line: 19, baseType: !1665, size: 32)
!2949 = !DILocalVariable(name: "pwc", arg: 1, scope: !2933, file: !2934, line: 86, type: !2937)
!2950 = !DILocation(line: 86, column: 23, scope: !2933)
!2951 = !DILocalVariable(name: "s", arg: 2, scope: !2933, file: !2934, line: 86, type: !23)
!2952 = !DILocation(line: 86, column: 40, scope: !2933)
!2953 = !DILocalVariable(name: "n", arg: 3, scope: !2933, file: !2934, line: 86, type: !99)
!2954 = !DILocation(line: 86, column: 50, scope: !2933)
!2955 = !DILocalVariable(name: "ps", arg: 4, scope: !2933, file: !2934, line: 86, type: !2938)
!2956 = !DILocation(line: 86, column: 64, scope: !2933)
!2957 = !DILocalVariable(name: "ret", scope: !2933, file: !2934, line: 88, type: !99)
!2958 = !DILocation(line: 88, column: 10, scope: !2933)
!2959 = !DILocalVariable(name: "wc", scope: !2933, file: !2934, line: 89, type: !1683)
!2960 = !DILocation(line: 89, column: 11, scope: !2933)
!2961 = !DILocation(line: 105, column: 9, scope: !2962)
!2962 = distinct !DILexicalBlock(scope: !2933, file: !2934, line: 105, column: 7)
!2963 = !DILocation(line: 105, column: 7, scope: !2933)
!2964 = !DILocation(line: 106, column: 9, scope: !2962)
!2965 = !DILocation(line: 106, column: 5, scope: !2962)
!2966 = !DILocation(line: 145, column: 18, scope: !2933)
!2967 = !DILocation(line: 145, column: 23, scope: !2933)
!2968 = !DILocation(line: 145, column: 26, scope: !2933)
!2969 = !DILocation(line: 145, column: 29, scope: !2933)
!2970 = !DILocation(line: 145, column: 9, scope: !2933)
!2971 = !DILocation(line: 145, column: 7, scope: !2933)
!2972 = !DILocation(line: 154, column: 22, scope: !2973)
!2973 = distinct !DILexicalBlock(scope: !2933, file: !2934, line: 154, column: 7)
!2974 = !DILocation(line: 154, column: 19, scope: !2973)
!2975 = !DILocation(line: 154, column: 26, scope: !2973)
!2976 = !DILocation(line: 154, column: 29, scope: !2973)
!2977 = !DILocation(line: 154, column: 31, scope: !2973)
!2978 = !DILocation(line: 154, column: 36, scope: !2973)
!2979 = !DILocation(line: 154, column: 41, scope: !2973)
!2980 = !DILocation(line: 154, column: 7, scope: !2933)
!2981 = !DILocalVariable(name: "uc", scope: !2982, file: !2934, line: 156, type: !167)
!2982 = distinct !DILexicalBlock(scope: !2973, file: !2934, line: 155, column: 5)
!2983 = !DILocation(line: 156, column: 21, scope: !2982)
!2984 = !DILocation(line: 156, column: 27, scope: !2982)
!2985 = !DILocation(line: 156, column: 26, scope: !2982)
!2986 = !DILocation(line: 157, column: 14, scope: !2982)
!2987 = !DILocation(line: 157, column: 8, scope: !2982)
!2988 = !DILocation(line: 157, column: 12, scope: !2982)
!2989 = !DILocation(line: 158, column: 7, scope: !2982)
!2990 = !DILocation(line: 162, column: 10, scope: !2933)
!2991 = !DILocation(line: 162, column: 3, scope: !2933)
!2992 = !DILocation(line: 163, column: 1, scope: !2933)
!2993 = !DILocalVariable(name: "pwc", arg: 1, scope: !2994, file: !2934, line: 86, type: !2937)
!2994 = distinct !DISubprogram(name: "rpl_mbrtowc", scope: !2934, file: !2934, line: 86, type: !2995, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3008, retainedNodes: !11)
!2995 = !DISubroutineType(types: !2996)
!2996 = !{!99, !2937, !23, !99, !2997}
!2997 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2998, size: 64)
!2998 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !1654, line: 6, baseType: !2999)
!2999 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !1656, line: 21, baseType: !3000)
!3000 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1656, line: 13, size: 64, elements: !3001)
!3001 = !{!3002, !3003}
!3002 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !3000, file: !1656, line: 15, baseType: !6, size: 32)
!3003 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !3000, file: !1656, line: 20, baseType: !3004, size: 32, offset: 32)
!3004 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !3000, file: !1656, line: 16, size: 32, elements: !3005)
!3005 = !{!3006, !3007}
!3006 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !3004, file: !1656, line: 18, baseType: !84, size: 32)
!3007 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !3004, file: !1656, line: 19, baseType: !1665, size: 32)
!3008 = distinct !DICompileUnit(language: DW_LANG_C99, file: !160, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !161, nameTableKind: None)
!3009 = !DILocalVariable(name: "s", arg: 2, scope: !2994, file: !2934, line: 86, type: !23)
!3010 = !DILocalVariable(name: "n", arg: 3, scope: !2994, file: !2934, line: 86, type: !99)
!3011 = !DILocalVariable(name: "ps", arg: 4, scope: !2994, file: !2934, line: 86, type: !2997)
!3012 = !DILocalVariable(name: "ret", scope: !2994, file: !2934, line: 88, type: !99)
!3013 = !DILocalVariable(name: "wc", scope: !2994, file: !2934, line: 89, type: !1683)
!3014 = distinct !DISubprogram(name: "c_strcasecmp", scope: !3015, file: !3015, line: 27, type: !3016, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !162, retainedNodes: !11)
!3015 = !DIFile(filename: "lib/c-strcasecmp.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3016 = !DISubroutineType(types: !3017)
!3017 = !{!6, !23, !23}
!3018 = !DILocalVariable(name: "s1", arg: 1, scope: !3014, file: !3015, line: 27, type: !23)
!3019 = !DILocation(line: 27, column: 27, scope: !3014)
!3020 = !DILocalVariable(name: "s2", arg: 2, scope: !3014, file: !3015, line: 27, type: !23)
!3021 = !DILocation(line: 27, column: 43, scope: !3014)
!3022 = !DILocalVariable(name: "p1", scope: !3014, file: !3015, line: 29, type: !165)
!3023 = !DILocation(line: 29, column: 33, scope: !3014)
!3024 = !DILocation(line: 29, column: 62, scope: !3014)
!3025 = !DILocalVariable(name: "p2", scope: !3014, file: !3015, line: 30, type: !165)
!3026 = !DILocation(line: 30, column: 33, scope: !3014)
!3027 = !DILocation(line: 30, column: 62, scope: !3014)
!3028 = !DILocalVariable(name: "c1", scope: !3014, file: !3015, line: 31, type: !167)
!3029 = !DILocation(line: 31, column: 17, scope: !3014)
!3030 = !DILocalVariable(name: "c2", scope: !3014, file: !3015, line: 31, type: !167)
!3031 = !DILocation(line: 31, column: 21, scope: !3014)
!3032 = !DILocation(line: 33, column: 7, scope: !3033)
!3033 = distinct !DILexicalBlock(scope: !3014, file: !3015, line: 33, column: 7)
!3034 = !DILocation(line: 33, column: 13, scope: !3033)
!3035 = !DILocation(line: 33, column: 10, scope: !3033)
!3036 = !DILocation(line: 33, column: 7, scope: !3014)
!3037 = !DILocation(line: 34, column: 5, scope: !3033)
!3038 = !DILocation(line: 36, column: 3, scope: !3014)
!3039 = !DILocation(line: 38, column: 24, scope: !3040)
!3040 = distinct !DILexicalBlock(scope: !3014, file: !3015, line: 37, column: 5)
!3041 = !DILocation(line: 38, column: 23, scope: !3040)
!3042 = !DILocation(line: 38, column: 12, scope: !3040)
!3043 = !DILocation(line: 38, column: 10, scope: !3040)
!3044 = !DILocation(line: 39, column: 24, scope: !3040)
!3045 = !DILocation(line: 39, column: 23, scope: !3040)
!3046 = !DILocation(line: 39, column: 12, scope: !3040)
!3047 = !DILocation(line: 39, column: 10, scope: !3040)
!3048 = !DILocation(line: 41, column: 11, scope: !3049)
!3049 = distinct !DILexicalBlock(scope: !3040, file: !3015, line: 41, column: 11)
!3050 = !DILocation(line: 41, column: 14, scope: !3049)
!3051 = !DILocation(line: 41, column: 11, scope: !3040)
!3052 = !DILocation(line: 42, column: 9, scope: !3049)
!3053 = !DILocation(line: 44, column: 7, scope: !3040)
!3054 = !DILocation(line: 45, column: 7, scope: !3040)
!3055 = !DILocation(line: 46, column: 5, scope: !3040)
!3056 = !DILocation(line: 47, column: 10, scope: !3014)
!3057 = !DILocation(line: 47, column: 16, scope: !3014)
!3058 = !DILocation(line: 47, column: 13, scope: !3014)
!3059 = distinct !{!3059, !3038, !3060}
!3060 = !DILocation(line: 47, column: 18, scope: !3014)
!3061 = !DILocation(line: 50, column: 12, scope: !3062)
!3062 = distinct !DILexicalBlock(scope: !3014, file: !3015, line: 49, column: 7)
!3063 = !DILocation(line: 50, column: 17, scope: !3062)
!3064 = !DILocation(line: 50, column: 15, scope: !3062)
!3065 = !DILocation(line: 50, column: 5, scope: !3062)
!3066 = !DILocation(line: 56, column: 1, scope: !3014)
!3067 = !DILocalVariable(name: "s1", arg: 1, scope: !3068, file: !3015, line: 27, type: !23)
!3068 = distinct !DISubprogram(name: "c_strcasecmp", scope: !3015, file: !3015, line: 27, type: !3016, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3069, retainedNodes: !11)
!3069 = distinct !DICompileUnit(language: DW_LANG_C99, file: !163, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !164, nameTableKind: None)
!3070 = !DILocalVariable(name: "s2", arg: 2, scope: !3068, file: !3015, line: 27, type: !23)
!3071 = !DILocalVariable(name: "p1", scope: !3068, file: !3015, line: 29, type: !165)
!3072 = !DILocalVariable(name: "p2", scope: !3068, file: !3015, line: 30, type: !165)
!3073 = !DILocalVariable(name: "c1", scope: !3068, file: !3015, line: 31, type: !167)
!3074 = !DILocalVariable(name: "c2", scope: !3068, file: !3015, line: 31, type: !167)
!3075 = distinct !DISubprogram(name: "close_stream", scope: !3076, file: !3076, line: 56, type: !3077, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !168, retainedNodes: !11)
!3076 = !DIFile(filename: "lib/close-stream.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3077 = !DISubroutineType(types: !3078)
!3078 = !{!6, !3079}
!3079 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3080, size: 64)
!3080 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2447, line: 7, baseType: !3081)
!3081 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2449, line: 49, size: 1728, elements: !3082)
!3082 = !{!3083, !3084, !3085, !3086, !3087, !3088, !3089, !3090, !3091, !3092, !3093, !3094, !3095, !3096, !3098, !3099, !3100, !3101, !3102, !3103, !3104, !3105, !3106, !3107, !3108, !3109, !3110, !3111, !3112}
!3083 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3081, file: !2449, line: 51, baseType: !6, size: 32)
!3084 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3081, file: !2449, line: 54, baseType: !8, size: 64, offset: 64)
!3085 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3081, file: !2449, line: 55, baseType: !8, size: 64, offset: 128)
!3086 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3081, file: !2449, line: 56, baseType: !8, size: 64, offset: 192)
!3087 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3081, file: !2449, line: 57, baseType: !8, size: 64, offset: 256)
!3088 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3081, file: !2449, line: 58, baseType: !8, size: 64, offset: 320)
!3089 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3081, file: !2449, line: 59, baseType: !8, size: 64, offset: 384)
!3090 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3081, file: !2449, line: 60, baseType: !8, size: 64, offset: 448)
!3091 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3081, file: !2449, line: 61, baseType: !8, size: 64, offset: 512)
!3092 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3081, file: !2449, line: 64, baseType: !8, size: 64, offset: 576)
!3093 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3081, file: !2449, line: 65, baseType: !8, size: 64, offset: 640)
!3094 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3081, file: !2449, line: 66, baseType: !8, size: 64, offset: 704)
!3095 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3081, file: !2449, line: 68, baseType: !2464, size: 64, offset: 768)
!3096 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3081, file: !2449, line: 70, baseType: !3097, size: 64, offset: 832)
!3097 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3081, size: 64)
!3098 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3081, file: !2449, line: 72, baseType: !6, size: 32, offset: 896)
!3099 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3081, file: !2449, line: 73, baseType: !6, size: 32, offset: 928)
!3100 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3081, file: !2449, line: 74, baseType: !2471, size: 64, offset: 960)
!3101 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3081, file: !2449, line: 77, baseType: !98, size: 16, offset: 1024)
!3102 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3081, file: !2449, line: 78, baseType: !2476, size: 8, offset: 1040)
!3103 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3081, file: !2449, line: 79, baseType: !2478, size: 8, offset: 1048)
!3104 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3081, file: !2449, line: 81, baseType: !2482, size: 64, offset: 1088)
!3105 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3081, file: !2449, line: 89, baseType: !2485, size: 64, offset: 1152)
!3106 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3081, file: !2449, line: 91, baseType: !2487, size: 64, offset: 1216)
!3107 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3081, file: !2449, line: 92, baseType: !2490, size: 64, offset: 1280)
!3108 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3081, file: !2449, line: 93, baseType: !3097, size: 64, offset: 1344)
!3109 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3081, file: !2449, line: 94, baseType: !13, size: 64, offset: 1408)
!3110 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3081, file: !2449, line: 95, baseType: !99, size: 64, offset: 1472)
!3111 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3081, file: !2449, line: 96, baseType: !6, size: 32, offset: 1536)
!3112 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3081, file: !2449, line: 98, baseType: !2497, size: 160, offset: 1568)
!3113 = !DILocalVariable(name: "stream", arg: 1, scope: !3075, file: !3076, line: 56, type: !3079)
!3114 = !DILocation(line: 56, column: 21, scope: !3075)
!3115 = !DILocalVariable(name: "some_pending", scope: !3075, file: !3076, line: 58, type: !3116)
!3116 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !41)
!3117 = !DILocation(line: 58, column: 14, scope: !3075)
!3118 = !DILocation(line: 58, column: 42, scope: !3075)
!3119 = !DILocation(line: 58, column: 30, scope: !3075)
!3120 = !DILocation(line: 58, column: 50, scope: !3075)
!3121 = !DILocalVariable(name: "prev_fail", scope: !3075, file: !3076, line: 59, type: !3116)
!3122 = !DILocation(line: 59, column: 14, scope: !3075)
!3123 = !DILocation(line: 59, column: 27, scope: !3075)
!3124 = !DILocation(line: 59, column: 43, scope: !3075)
!3125 = !DILocalVariable(name: "fclose_fail", scope: !3075, file: !3076, line: 60, type: !3116)
!3126 = !DILocation(line: 60, column: 14, scope: !3075)
!3127 = !DILocation(line: 60, column: 37, scope: !3075)
!3128 = !DILocation(line: 60, column: 29, scope: !3075)
!3129 = !DILocation(line: 60, column: 45, scope: !3075)
!3130 = !DILocation(line: 70, column: 7, scope: !3131)
!3131 = distinct !DILexicalBlock(scope: !3075, file: !3076, line: 70, column: 7)
!3132 = !DILocation(line: 70, column: 17, scope: !3131)
!3133 = !DILocation(line: 70, column: 21, scope: !3131)
!3134 = !DILocation(line: 70, column: 33, scope: !3131)
!3135 = !DILocation(line: 70, column: 37, scope: !3131)
!3136 = !DILocation(line: 70, column: 50, scope: !3131)
!3137 = !DILocation(line: 70, column: 53, scope: !3131)
!3138 = !DILocation(line: 70, column: 59, scope: !3131)
!3139 = !DILocation(line: 70, column: 7, scope: !3075)
!3140 = !DILocation(line: 72, column: 13, scope: !3141)
!3141 = distinct !DILexicalBlock(scope: !3142, file: !3076, line: 72, column: 11)
!3142 = distinct !DILexicalBlock(scope: !3131, file: !3076, line: 71, column: 5)
!3143 = !DILocation(line: 72, column: 11, scope: !3142)
!3144 = !DILocation(line: 73, column: 9, scope: !3141)
!3145 = !DILocation(line: 73, column: 15, scope: !3141)
!3146 = !DILocation(line: 74, column: 7, scope: !3142)
!3147 = !DILocation(line: 77, column: 3, scope: !3075)
!3148 = !DILocation(line: 78, column: 1, scope: !3075)
!3149 = !DILocalVariable(name: "stream", arg: 1, scope: !3150, file: !3076, line: 56, type: !3153)
!3150 = distinct !DISubprogram(name: "close_stream", scope: !3076, file: !3076, line: 56, type: !3151, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3187, retainedNodes: !11)
!3151 = !DISubroutineType(types: !3152)
!3152 = !{!6, !3153}
!3153 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3154, size: 64)
!3154 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2447, line: 7, baseType: !3155)
!3155 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2449, line: 49, size: 1728, elements: !3156)
!3156 = !{!3157, !3158, !3159, !3160, !3161, !3162, !3163, !3164, !3165, !3166, !3167, !3168, !3169, !3170, !3172, !3173, !3174, !3175, !3176, !3177, !3178, !3179, !3180, !3181, !3182, !3183, !3184, !3185, !3186}
!3157 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3155, file: !2449, line: 51, baseType: !6, size: 32)
!3158 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3155, file: !2449, line: 54, baseType: !8, size: 64, offset: 64)
!3159 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3155, file: !2449, line: 55, baseType: !8, size: 64, offset: 128)
!3160 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3155, file: !2449, line: 56, baseType: !8, size: 64, offset: 192)
!3161 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3155, file: !2449, line: 57, baseType: !8, size: 64, offset: 256)
!3162 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3155, file: !2449, line: 58, baseType: !8, size: 64, offset: 320)
!3163 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3155, file: !2449, line: 59, baseType: !8, size: 64, offset: 384)
!3164 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3155, file: !2449, line: 60, baseType: !8, size: 64, offset: 448)
!3165 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3155, file: !2449, line: 61, baseType: !8, size: 64, offset: 512)
!3166 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3155, file: !2449, line: 64, baseType: !8, size: 64, offset: 576)
!3167 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3155, file: !2449, line: 65, baseType: !8, size: 64, offset: 640)
!3168 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3155, file: !2449, line: 66, baseType: !8, size: 64, offset: 704)
!3169 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3155, file: !2449, line: 68, baseType: !2464, size: 64, offset: 768)
!3170 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3155, file: !2449, line: 70, baseType: !3171, size: 64, offset: 832)
!3171 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3155, size: 64)
!3172 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3155, file: !2449, line: 72, baseType: !6, size: 32, offset: 896)
!3173 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3155, file: !2449, line: 73, baseType: !6, size: 32, offset: 928)
!3174 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3155, file: !2449, line: 74, baseType: !2471, size: 64, offset: 960)
!3175 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3155, file: !2449, line: 77, baseType: !98, size: 16, offset: 1024)
!3176 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3155, file: !2449, line: 78, baseType: !2476, size: 8, offset: 1040)
!3177 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3155, file: !2449, line: 79, baseType: !2478, size: 8, offset: 1048)
!3178 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3155, file: !2449, line: 81, baseType: !2482, size: 64, offset: 1088)
!3179 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3155, file: !2449, line: 89, baseType: !2485, size: 64, offset: 1152)
!3180 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3155, file: !2449, line: 91, baseType: !2487, size: 64, offset: 1216)
!3181 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3155, file: !2449, line: 92, baseType: !2490, size: 64, offset: 1280)
!3182 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3155, file: !2449, line: 93, baseType: !3171, size: 64, offset: 1344)
!3183 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3155, file: !2449, line: 94, baseType: !13, size: 64, offset: 1408)
!3184 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3155, file: !2449, line: 95, baseType: !99, size: 64, offset: 1472)
!3185 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3155, file: !2449, line: 96, baseType: !6, size: 32, offset: 1536)
!3186 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3155, file: !2449, line: 98, baseType: !2497, size: 160, offset: 1568)
!3187 = distinct !DICompileUnit(language: DW_LANG_C99, file: !169, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, nameTableKind: None)
!3188 = !DILocalVariable(name: "some_pending", scope: !3150, file: !3076, line: 58, type: !3116)
!3189 = !DILocalVariable(name: "prev_fail", scope: !3150, file: !3076, line: 59, type: !3116)
!3190 = !DILocalVariable(name: "fclose_fail", scope: !3150, file: !3076, line: 60, type: !3116)
!3191 = distinct !DISubprogram(name: "hard_locale", scope: !3192, file: !3192, line: 27, type: !3193, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !170, retainedNodes: !11)
!3192 = !DIFile(filename: "lib/hard-locale.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3193 = !DISubroutineType(types: !3194)
!3194 = !{!41, !6}
!3195 = !DILocalVariable(name: "category", arg: 1, scope: !3191, file: !3192, line: 27, type: !6)
!3196 = !DILocation(line: 27, column: 18, scope: !3191)
!3197 = !DILocalVariable(name: "locale", scope: !3191, file: !3192, line: 29, type: !3198)
!3198 = !DICompositeType(tag: DW_TAG_array_type, baseType: !9, size: 2056, elements: !3199)
!3199 = !{!3200}
!3200 = !DISubrange(count: 257)
!3201 = !DILocation(line: 29, column: 8, scope: !3191)
!3202 = !DILocation(line: 31, column: 25, scope: !3203)
!3203 = distinct !DILexicalBlock(scope: !3191, file: !3192, line: 31, column: 7)
!3204 = !DILocation(line: 31, column: 35, scope: !3203)
!3205 = !DILocation(line: 31, column: 7, scope: !3203)
!3206 = !DILocation(line: 31, column: 7, scope: !3191)
!3207 = !DILocation(line: 32, column: 5, scope: !3203)
!3208 = !DILocation(line: 34, column: 20, scope: !3191)
!3209 = !DILocation(line: 34, column: 12, scope: !3191)
!3210 = !DILocation(line: 34, column: 33, scope: !3191)
!3211 = !DILocation(line: 34, column: 38, scope: !3191)
!3212 = !DILocation(line: 34, column: 49, scope: !3191)
!3213 = !DILocation(line: 34, column: 41, scope: !3191)
!3214 = !DILocation(line: 34, column: 66, scope: !3191)
!3215 = !DILocation(line: 34, column: 10, scope: !3191)
!3216 = !DILocation(line: 34, column: 3, scope: !3191)
!3217 = !DILocation(line: 35, column: 1, scope: !3191)
!3218 = !DILocalVariable(name: "category", arg: 1, scope: !3219, file: !3192, line: 27, type: !6)
!3219 = distinct !DISubprogram(name: "hard_locale", scope: !3192, file: !3192, line: 27, type: !3193, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3220, retainedNodes: !11)
!3220 = distinct !DICompileUnit(language: DW_LANG_C99, file: !171, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, nameTableKind: None)
!3221 = !DILocalVariable(name: "locale", scope: !3219, file: !3192, line: 29, type: !3198)
!3222 = distinct !DISubprogram(name: "locale_charset", scope: !3223, file: !3223, line: 831, type: !3224, scopeLine: 832, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !172, retainedNodes: !11)
!3223 = !DIFile(filename: "lib/localcharset.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3224 = !DISubroutineType(types: !3225)
!3225 = !{!23}
!3226 = !DILocalVariable(name: "codeset", scope: !3222, file: !3223, line: 833, type: !23)
!3227 = !DILocation(line: 833, column: 15, scope: !3222)
!3228 = !DILocation(line: 847, column: 13, scope: !3222)
!3229 = !DILocation(line: 847, column: 11, scope: !3222)
!3230 = !DILocation(line: 911, column: 7, scope: !3231)
!3231 = distinct !DILexicalBlock(scope: !3222, file: !3223, line: 911, column: 7)
!3232 = !DILocation(line: 911, column: 15, scope: !3231)
!3233 = !DILocation(line: 911, column: 7, scope: !3222)
!3234 = !DILocation(line: 913, column: 13, scope: !3231)
!3235 = !DILocation(line: 913, column: 5, scope: !3231)
!3236 = !DILocation(line: 1070, column: 13, scope: !3237)
!3237 = distinct !DILexicalBlock(scope: !3238, file: !3223, line: 1070, column: 13)
!3238 = distinct !DILexicalBlock(scope: !3239, file: !3223, line: 1060, column: 7)
!3239 = distinct !DILexicalBlock(scope: !3222, file: !3223, line: 1019, column: 3)
!3240 = !DILocation(line: 1070, column: 24, scope: !3237)
!3241 = !DILocation(line: 1070, column: 13, scope: !3238)
!3242 = !DILocation(line: 1071, column: 19, scope: !3237)
!3243 = !DILocation(line: 1071, column: 11, scope: !3237)
!3244 = !DILocation(line: 1158, column: 10, scope: !3222)
!3245 = !DILocation(line: 1158, column: 3, scope: !3222)
!3246 = !DILocalVariable(name: "codeset", scope: !3247, file: !3223, line: 833, type: !23)
!3247 = distinct !DISubprogram(name: "locale_charset", scope: !3223, file: !3223, line: 831, type: !3224, scopeLine: 832, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3248, retainedNodes: !11)
!3248 = distinct !DICompileUnit(language: DW_LANG_C99, file: !173, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!3249 = distinct !DISubprogram(name: "setlocale_null_r", scope: !3250, file: !3250, line: 269, type: !3251, scopeLine: 270, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !174, retainedNodes: !11)
!3250 = !DIFile(filename: "lib/setlocale_null.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3251 = !DISubroutineType(types: !3252)
!3252 = !{!6, !6, !8, !99}
!3253 = !DILocalVariable(name: "category", arg: 1, scope: !3249, file: !3250, line: 269, type: !6)
!3254 = !DILocation(line: 269, column: 23, scope: !3249)
!3255 = !DILocalVariable(name: "buf", arg: 2, scope: !3249, file: !3250, line: 269, type: !8)
!3256 = !DILocation(line: 269, column: 39, scope: !3249)
!3257 = !DILocalVariable(name: "bufsize", arg: 3, scope: !3249, file: !3250, line: 269, type: !99)
!3258 = !DILocation(line: 269, column: 51, scope: !3249)
!3259 = !DILocation(line: 274, column: 35, scope: !3249)
!3260 = !DILocation(line: 274, column: 45, scope: !3249)
!3261 = !DILocation(line: 274, column: 50, scope: !3249)
!3262 = !DILocation(line: 274, column: 10, scope: !3249)
!3263 = !DILocation(line: 274, column: 3, scope: !3249)
!3264 = !DILocalVariable(name: "category", arg: 1, scope: !3265, file: !3250, line: 269, type: !6)
!3265 = distinct !DISubprogram(name: "setlocale_null_r", scope: !3250, file: !3250, line: 269, type: !3251, scopeLine: 270, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3266, retainedNodes: !11)
!3266 = distinct !DICompileUnit(language: DW_LANG_C99, file: !175, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!3267 = !DILocalVariable(name: "buf", arg: 2, scope: !3265, file: !3250, line: 269, type: !8)
!3268 = !DILocalVariable(name: "bufsize", arg: 3, scope: !3265, file: !3250, line: 269, type: !99)
!3269 = distinct !DISubprogram(name: "setlocale_null_unlocked", scope: !3250, file: !3250, line: 91, type: !3251, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !174, retainedNodes: !11)
!3270 = !DILocalVariable(name: "category", arg: 1, scope: !3269, file: !3250, line: 91, type: !6)
!3271 = !DILocation(line: 91, column: 30, scope: !3269)
!3272 = !DILocalVariable(name: "buf", arg: 2, scope: !3269, file: !3250, line: 91, type: !8)
!3273 = !DILocation(line: 91, column: 46, scope: !3269)
!3274 = !DILocalVariable(name: "bufsize", arg: 3, scope: !3269, file: !3250, line: 91, type: !99)
!3275 = !DILocation(line: 91, column: 58, scope: !3269)
!3276 = !DILocalVariable(name: "result", scope: !3269, file: !3250, line: 140, type: !23)
!3277 = !DILocation(line: 140, column: 15, scope: !3269)
!3278 = !DILocation(line: 140, column: 51, scope: !3269)
!3279 = !DILocation(line: 140, column: 24, scope: !3269)
!3280 = !DILocation(line: 142, column: 7, scope: !3281)
!3281 = distinct !DILexicalBlock(scope: !3269, file: !3250, line: 142, column: 7)
!3282 = !DILocation(line: 142, column: 14, scope: !3281)
!3283 = !DILocation(line: 142, column: 7, scope: !3269)
!3284 = !DILocation(line: 145, column: 11, scope: !3285)
!3285 = distinct !DILexicalBlock(scope: !3286, file: !3250, line: 145, column: 11)
!3286 = distinct !DILexicalBlock(scope: !3281, file: !3250, line: 143, column: 5)
!3287 = !DILocation(line: 145, column: 19, scope: !3285)
!3288 = !DILocation(line: 145, column: 11, scope: !3286)
!3289 = !DILocation(line: 149, column: 9, scope: !3285)
!3290 = !DILocation(line: 149, column: 16, scope: !3285)
!3291 = !DILocation(line: 150, column: 7, scope: !3286)
!3292 = !DILocalVariable(name: "length", scope: !3293, file: !3250, line: 154, type: !99)
!3293 = distinct !DILexicalBlock(scope: !3281, file: !3250, line: 153, column: 5)
!3294 = !DILocation(line: 154, column: 14, scope: !3293)
!3295 = !DILocation(line: 154, column: 31, scope: !3293)
!3296 = !DILocation(line: 154, column: 23, scope: !3293)
!3297 = !DILocation(line: 155, column: 11, scope: !3298)
!3298 = distinct !DILexicalBlock(scope: !3293, file: !3250, line: 155, column: 11)
!3299 = !DILocation(line: 155, column: 20, scope: !3298)
!3300 = !DILocation(line: 155, column: 18, scope: !3298)
!3301 = !DILocation(line: 155, column: 11, scope: !3293)
!3302 = !DILocation(line: 157, column: 19, scope: !3303)
!3303 = distinct !DILexicalBlock(scope: !3298, file: !3250, line: 156, column: 9)
!3304 = !DILocation(line: 157, column: 24, scope: !3303)
!3305 = !DILocation(line: 157, column: 32, scope: !3303)
!3306 = !DILocation(line: 157, column: 39, scope: !3303)
!3307 = !DILocation(line: 157, column: 11, scope: !3303)
!3308 = !DILocation(line: 158, column: 11, scope: !3303)
!3309 = !DILocation(line: 162, column: 15, scope: !3310)
!3310 = distinct !DILexicalBlock(scope: !3311, file: !3250, line: 162, column: 15)
!3311 = distinct !DILexicalBlock(scope: !3298, file: !3250, line: 161, column: 9)
!3312 = !DILocation(line: 162, column: 23, scope: !3310)
!3313 = !DILocation(line: 162, column: 15, scope: !3311)
!3314 = !DILocation(line: 167, column: 23, scope: !3315)
!3315 = distinct !DILexicalBlock(scope: !3310, file: !3250, line: 163, column: 13)
!3316 = !DILocation(line: 167, column: 28, scope: !3315)
!3317 = !DILocation(line: 167, column: 36, scope: !3315)
!3318 = !DILocation(line: 167, column: 44, scope: !3315)
!3319 = !DILocation(line: 167, column: 15, scope: !3315)
!3320 = !DILocation(line: 168, column: 15, scope: !3315)
!3321 = !DILocation(line: 168, column: 19, scope: !3315)
!3322 = !DILocation(line: 168, column: 27, scope: !3315)
!3323 = !DILocation(line: 168, column: 32, scope: !3315)
!3324 = !DILocation(line: 169, column: 13, scope: !3315)
!3325 = !DILocation(line: 170, column: 11, scope: !3311)
!3326 = !DILocation(line: 174, column: 1, scope: !3269)
!3327 = !DILocalVariable(name: "category", arg: 1, scope: !3328, file: !3250, line: 91, type: !6)
!3328 = distinct !DISubprogram(name: "setlocale_null_unlocked", scope: !3250, file: !3250, line: 91, type: !3251, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3329, retainedNodes: !11)
!3329 = distinct !DICompileUnit(language: DW_LANG_C99, file: !175, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!3330 = !DILocalVariable(name: "buf", arg: 2, scope: !3328, file: !3250, line: 91, type: !8)
!3331 = !DILocalVariable(name: "bufsize", arg: 3, scope: !3328, file: !3250, line: 91, type: !99)
!3332 = !DILocalVariable(name: "result", scope: !3328, file: !3250, line: 140, type: !23)
!3333 = distinct !DISubprogram(name: "setlocale_null_androidfix", scope: !3250, file: !3250, line: 60, type: !3334, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !174, retainedNodes: !11)
!3334 = !DISubroutineType(types: !3335)
!3335 = !{!23, !6}
!3336 = !DILocalVariable(name: "category", arg: 1, scope: !3333, file: !3250, line: 60, type: !6)
!3337 = !DILocation(line: 60, column: 32, scope: !3333)
!3338 = !DILocalVariable(name: "result", scope: !3333, file: !3250, line: 62, type: !23)
!3339 = !DILocation(line: 62, column: 15, scope: !3333)
!3340 = !DILocation(line: 62, column: 35, scope: !3333)
!3341 = !DILocation(line: 62, column: 24, scope: !3333)
!3342 = !DILocation(line: 87, column: 10, scope: !3333)
!3343 = !DILocation(line: 87, column: 3, scope: !3333)
!3344 = !DILocalVariable(name: "category", arg: 1, scope: !3345, file: !3250, line: 60, type: !6)
!3345 = distinct !DISubprogram(name: "setlocale_null_androidfix", scope: !3250, file: !3250, line: 60, type: !3334, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3346, retainedNodes: !11)
!3346 = distinct !DICompileUnit(language: DW_LANG_C99, file: !175, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!3347 = !DILocalVariable(name: "result", scope: !3345, file: !3250, line: 62, type: !23)
!3348 = distinct !DISubprogram(name: "rpl_fclose", scope: !3349, file: !3349, line: 58, type: !3350, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !176, retainedNodes: !11)
!3349 = !DIFile(filename: "lib/fclose.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3350 = !DISubroutineType(types: !3351)
!3351 = !{!6, !3352}
!3352 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3353, size: 64)
!3353 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2447, line: 7, baseType: !3354)
!3354 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2449, line: 49, size: 1728, elements: !3355)
!3355 = !{!3356, !3357, !3358, !3359, !3360, !3361, !3362, !3363, !3364, !3365, !3366, !3367, !3368, !3369, !3371, !3372, !3373, !3374, !3375, !3376, !3377, !3378, !3379, !3380, !3381, !3382, !3383, !3384, !3385}
!3356 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3354, file: !2449, line: 51, baseType: !6, size: 32)
!3357 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3354, file: !2449, line: 54, baseType: !8, size: 64, offset: 64)
!3358 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3354, file: !2449, line: 55, baseType: !8, size: 64, offset: 128)
!3359 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3354, file: !2449, line: 56, baseType: !8, size: 64, offset: 192)
!3360 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3354, file: !2449, line: 57, baseType: !8, size: 64, offset: 256)
!3361 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3354, file: !2449, line: 58, baseType: !8, size: 64, offset: 320)
!3362 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3354, file: !2449, line: 59, baseType: !8, size: 64, offset: 384)
!3363 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3354, file: !2449, line: 60, baseType: !8, size: 64, offset: 448)
!3364 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3354, file: !2449, line: 61, baseType: !8, size: 64, offset: 512)
!3365 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3354, file: !2449, line: 64, baseType: !8, size: 64, offset: 576)
!3366 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3354, file: !2449, line: 65, baseType: !8, size: 64, offset: 640)
!3367 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3354, file: !2449, line: 66, baseType: !8, size: 64, offset: 704)
!3368 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3354, file: !2449, line: 68, baseType: !2464, size: 64, offset: 768)
!3369 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3354, file: !2449, line: 70, baseType: !3370, size: 64, offset: 832)
!3370 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3354, size: 64)
!3371 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3354, file: !2449, line: 72, baseType: !6, size: 32, offset: 896)
!3372 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3354, file: !2449, line: 73, baseType: !6, size: 32, offset: 928)
!3373 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3354, file: !2449, line: 74, baseType: !2471, size: 64, offset: 960)
!3374 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3354, file: !2449, line: 77, baseType: !98, size: 16, offset: 1024)
!3375 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3354, file: !2449, line: 78, baseType: !2476, size: 8, offset: 1040)
!3376 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3354, file: !2449, line: 79, baseType: !2478, size: 8, offset: 1048)
!3377 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3354, file: !2449, line: 81, baseType: !2482, size: 64, offset: 1088)
!3378 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3354, file: !2449, line: 89, baseType: !2485, size: 64, offset: 1152)
!3379 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3354, file: !2449, line: 91, baseType: !2487, size: 64, offset: 1216)
!3380 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3354, file: !2449, line: 92, baseType: !2490, size: 64, offset: 1280)
!3381 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3354, file: !2449, line: 93, baseType: !3370, size: 64, offset: 1344)
!3382 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3354, file: !2449, line: 94, baseType: !13, size: 64, offset: 1408)
!3383 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3354, file: !2449, line: 95, baseType: !99, size: 64, offset: 1472)
!3384 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3354, file: !2449, line: 96, baseType: !6, size: 32, offset: 1536)
!3385 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3354, file: !2449, line: 98, baseType: !2497, size: 160, offset: 1568)
!3386 = !DILocalVariable(name: "fp", arg: 1, scope: !3348, file: !3349, line: 58, type: !3352)
!3387 = !DILocation(line: 58, column: 19, scope: !3348)
!3388 = !DILocalVariable(name: "saved_errno", scope: !3348, file: !3349, line: 60, type: !6)
!3389 = !DILocation(line: 60, column: 7, scope: !3348)
!3390 = !DILocalVariable(name: "fd", scope: !3348, file: !3349, line: 61, type: !6)
!3391 = !DILocation(line: 61, column: 7, scope: !3348)
!3392 = !DILocalVariable(name: "result", scope: !3348, file: !3349, line: 62, type: !6)
!3393 = !DILocation(line: 62, column: 7, scope: !3348)
!3394 = !DILocation(line: 65, column: 16, scope: !3348)
!3395 = !DILocation(line: 65, column: 8, scope: !3348)
!3396 = !DILocation(line: 65, column: 6, scope: !3348)
!3397 = !DILocation(line: 66, column: 7, scope: !3398)
!3398 = distinct !DILexicalBlock(scope: !3348, file: !3349, line: 66, column: 7)
!3399 = !DILocation(line: 66, column: 10, scope: !3398)
!3400 = !DILocation(line: 66, column: 7, scope: !3348)
!3401 = !DILocation(line: 67, column: 28, scope: !3398)
!3402 = !DILocation(line: 67, column: 12, scope: !3398)
!3403 = !DILocation(line: 67, column: 5, scope: !3398)
!3404 = !DILocation(line: 72, column: 9, scope: !3405)
!3405 = distinct !DILexicalBlock(scope: !3348, file: !3349, line: 72, column: 7)
!3406 = !DILocation(line: 72, column: 23, scope: !3405)
!3407 = !DILocation(line: 72, column: 41, scope: !3405)
!3408 = !DILocation(line: 72, column: 33, scope: !3405)
!3409 = !DILocation(line: 72, column: 26, scope: !3405)
!3410 = !DILocation(line: 72, column: 59, scope: !3405)
!3411 = !DILocation(line: 73, column: 7, scope: !3405)
!3412 = !DILocation(line: 73, column: 18, scope: !3405)
!3413 = !DILocation(line: 73, column: 10, scope: !3405)
!3414 = !DILocation(line: 72, column: 7, scope: !3348)
!3415 = !DILocation(line: 74, column: 19, scope: !3405)
!3416 = !DILocation(line: 74, column: 17, scope: !3405)
!3417 = !DILocation(line: 74, column: 5, scope: !3405)
!3418 = !DILocation(line: 100, column: 28, scope: !3348)
!3419 = !DILocation(line: 100, column: 12, scope: !3348)
!3420 = !DILocation(line: 100, column: 10, scope: !3348)
!3421 = !DILocation(line: 105, column: 7, scope: !3422)
!3422 = distinct !DILexicalBlock(scope: !3348, file: !3349, line: 105, column: 7)
!3423 = !DILocation(line: 105, column: 19, scope: !3422)
!3424 = !DILocation(line: 105, column: 7, scope: !3348)
!3425 = !DILocation(line: 107, column: 15, scope: !3426)
!3426 = distinct !DILexicalBlock(scope: !3422, file: !3349, line: 106, column: 5)
!3427 = !DILocation(line: 107, column: 7, scope: !3426)
!3428 = !DILocation(line: 107, column: 13, scope: !3426)
!3429 = !DILocation(line: 108, column: 14, scope: !3426)
!3430 = !DILocation(line: 109, column: 5, scope: !3426)
!3431 = !DILocation(line: 111, column: 10, scope: !3348)
!3432 = !DILocation(line: 111, column: 3, scope: !3348)
!3433 = !DILocation(line: 112, column: 1, scope: !3348)
!3434 = !DILocalVariable(name: "fp", arg: 1, scope: !3435, file: !3349, line: 58, type: !3438)
!3435 = distinct !DISubprogram(name: "rpl_fclose", scope: !3349, file: !3349, line: 58, type: !3436, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3472, retainedNodes: !11)
!3436 = !DISubroutineType(types: !3437)
!3437 = !{!6, !3438}
!3438 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3439, size: 64)
!3439 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2447, line: 7, baseType: !3440)
!3440 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2449, line: 49, size: 1728, elements: !3441)
!3441 = !{!3442, !3443, !3444, !3445, !3446, !3447, !3448, !3449, !3450, !3451, !3452, !3453, !3454, !3455, !3457, !3458, !3459, !3460, !3461, !3462, !3463, !3464, !3465, !3466, !3467, !3468, !3469, !3470, !3471}
!3442 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3440, file: !2449, line: 51, baseType: !6, size: 32)
!3443 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3440, file: !2449, line: 54, baseType: !8, size: 64, offset: 64)
!3444 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3440, file: !2449, line: 55, baseType: !8, size: 64, offset: 128)
!3445 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3440, file: !2449, line: 56, baseType: !8, size: 64, offset: 192)
!3446 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3440, file: !2449, line: 57, baseType: !8, size: 64, offset: 256)
!3447 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3440, file: !2449, line: 58, baseType: !8, size: 64, offset: 320)
!3448 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3440, file: !2449, line: 59, baseType: !8, size: 64, offset: 384)
!3449 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3440, file: !2449, line: 60, baseType: !8, size: 64, offset: 448)
!3450 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3440, file: !2449, line: 61, baseType: !8, size: 64, offset: 512)
!3451 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3440, file: !2449, line: 64, baseType: !8, size: 64, offset: 576)
!3452 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3440, file: !2449, line: 65, baseType: !8, size: 64, offset: 640)
!3453 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3440, file: !2449, line: 66, baseType: !8, size: 64, offset: 704)
!3454 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3440, file: !2449, line: 68, baseType: !2464, size: 64, offset: 768)
!3455 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3440, file: !2449, line: 70, baseType: !3456, size: 64, offset: 832)
!3456 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3440, size: 64)
!3457 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3440, file: !2449, line: 72, baseType: !6, size: 32, offset: 896)
!3458 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3440, file: !2449, line: 73, baseType: !6, size: 32, offset: 928)
!3459 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3440, file: !2449, line: 74, baseType: !2471, size: 64, offset: 960)
!3460 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3440, file: !2449, line: 77, baseType: !98, size: 16, offset: 1024)
!3461 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3440, file: !2449, line: 78, baseType: !2476, size: 8, offset: 1040)
!3462 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3440, file: !2449, line: 79, baseType: !2478, size: 8, offset: 1048)
!3463 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3440, file: !2449, line: 81, baseType: !2482, size: 64, offset: 1088)
!3464 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3440, file: !2449, line: 89, baseType: !2485, size: 64, offset: 1152)
!3465 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3440, file: !2449, line: 91, baseType: !2487, size: 64, offset: 1216)
!3466 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3440, file: !2449, line: 92, baseType: !2490, size: 64, offset: 1280)
!3467 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3440, file: !2449, line: 93, baseType: !3456, size: 64, offset: 1344)
!3468 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3440, file: !2449, line: 94, baseType: !13, size: 64, offset: 1408)
!3469 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3440, file: !2449, line: 95, baseType: !99, size: 64, offset: 1472)
!3470 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3440, file: !2449, line: 96, baseType: !6, size: 32, offset: 1536)
!3471 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3440, file: !2449, line: 98, baseType: !2497, size: 160, offset: 1568)
!3472 = distinct !DICompileUnit(language: DW_LANG_C99, file: !177, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, nameTableKind: None)
!3473 = !DILocalVariable(name: "saved_errno", scope: !3435, file: !3349, line: 60, type: !6)
!3474 = !DILocalVariable(name: "fd", scope: !3435, file: !3349, line: 61, type: !6)
!3475 = !DILocalVariable(name: "result", scope: !3435, file: !3349, line: 62, type: !6)
!3476 = distinct !DISubprogram(name: "rpl_fflush", scope: !3477, file: !3477, line: 129, type: !3478, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !178, retainedNodes: !11)
!3477 = !DIFile(filename: "lib/fflush.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3478 = !DISubroutineType(types: !3479)
!3479 = !{!6, !3480}
!3480 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3481, size: 64)
!3481 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2447, line: 7, baseType: !3482)
!3482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2449, line: 49, size: 1728, elements: !3483)
!3483 = !{!3484, !3485, !3486, !3487, !3488, !3489, !3490, !3491, !3492, !3493, !3494, !3495, !3496, !3497, !3499, !3500, !3501, !3502, !3503, !3504, !3505, !3506, !3507, !3508, !3509, !3510, !3511, !3512, !3513}
!3484 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3482, file: !2449, line: 51, baseType: !6, size: 32)
!3485 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3482, file: !2449, line: 54, baseType: !8, size: 64, offset: 64)
!3486 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3482, file: !2449, line: 55, baseType: !8, size: 64, offset: 128)
!3487 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3482, file: !2449, line: 56, baseType: !8, size: 64, offset: 192)
!3488 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3482, file: !2449, line: 57, baseType: !8, size: 64, offset: 256)
!3489 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3482, file: !2449, line: 58, baseType: !8, size: 64, offset: 320)
!3490 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3482, file: !2449, line: 59, baseType: !8, size: 64, offset: 384)
!3491 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3482, file: !2449, line: 60, baseType: !8, size: 64, offset: 448)
!3492 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3482, file: !2449, line: 61, baseType: !8, size: 64, offset: 512)
!3493 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3482, file: !2449, line: 64, baseType: !8, size: 64, offset: 576)
!3494 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3482, file: !2449, line: 65, baseType: !8, size: 64, offset: 640)
!3495 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3482, file: !2449, line: 66, baseType: !8, size: 64, offset: 704)
!3496 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3482, file: !2449, line: 68, baseType: !2464, size: 64, offset: 768)
!3497 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3482, file: !2449, line: 70, baseType: !3498, size: 64, offset: 832)
!3498 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3482, size: 64)
!3499 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3482, file: !2449, line: 72, baseType: !6, size: 32, offset: 896)
!3500 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3482, file: !2449, line: 73, baseType: !6, size: 32, offset: 928)
!3501 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3482, file: !2449, line: 74, baseType: !2471, size: 64, offset: 960)
!3502 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3482, file: !2449, line: 77, baseType: !98, size: 16, offset: 1024)
!3503 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3482, file: !2449, line: 78, baseType: !2476, size: 8, offset: 1040)
!3504 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3482, file: !2449, line: 79, baseType: !2478, size: 8, offset: 1048)
!3505 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3482, file: !2449, line: 81, baseType: !2482, size: 64, offset: 1088)
!3506 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3482, file: !2449, line: 89, baseType: !2485, size: 64, offset: 1152)
!3507 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3482, file: !2449, line: 91, baseType: !2487, size: 64, offset: 1216)
!3508 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3482, file: !2449, line: 92, baseType: !2490, size: 64, offset: 1280)
!3509 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3482, file: !2449, line: 93, baseType: !3498, size: 64, offset: 1344)
!3510 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3482, file: !2449, line: 94, baseType: !13, size: 64, offset: 1408)
!3511 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3482, file: !2449, line: 95, baseType: !99, size: 64, offset: 1472)
!3512 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3482, file: !2449, line: 96, baseType: !6, size: 32, offset: 1536)
!3513 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3482, file: !2449, line: 98, baseType: !2497, size: 160, offset: 1568)
!3514 = !DILocalVariable(name: "stream", arg: 1, scope: !3476, file: !3477, line: 129, type: !3480)
!3515 = !DILocation(line: 129, column: 19, scope: !3476)
!3516 = !DILocation(line: 150, column: 7, scope: !3517)
!3517 = distinct !DILexicalBlock(scope: !3476, file: !3477, line: 150, column: 7)
!3518 = !DILocation(line: 150, column: 14, scope: !3517)
!3519 = !DILocation(line: 150, column: 22, scope: !3517)
!3520 = !DILocation(line: 150, column: 27, scope: !3517)
!3521 = !DILocation(line: 150, column: 7, scope: !3476)
!3522 = !DILocation(line: 151, column: 20, scope: !3517)
!3523 = !DILocation(line: 151, column: 12, scope: !3517)
!3524 = !DILocation(line: 151, column: 5, scope: !3517)
!3525 = !DILocation(line: 156, column: 44, scope: !3476)
!3526 = !DILocation(line: 156, column: 3, scope: !3476)
!3527 = !DILocation(line: 158, column: 18, scope: !3476)
!3528 = !DILocation(line: 158, column: 10, scope: !3476)
!3529 = !DILocation(line: 158, column: 3, scope: !3476)
!3530 = !DILocation(line: 235, column: 1, scope: !3476)
!3531 = !DILocalVariable(name: "stream", arg: 1, scope: !3532, file: !3477, line: 129, type: !3535)
!3532 = distinct !DISubprogram(name: "rpl_fflush", scope: !3477, file: !3477, line: 129, type: !3533, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3569, retainedNodes: !11)
!3533 = !DISubroutineType(types: !3534)
!3534 = !{!6, !3535}
!3535 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3536, size: 64)
!3536 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2447, line: 7, baseType: !3537)
!3537 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2449, line: 49, size: 1728, elements: !3538)
!3538 = !{!3539, !3540, !3541, !3542, !3543, !3544, !3545, !3546, !3547, !3548, !3549, !3550, !3551, !3552, !3554, !3555, !3556, !3557, !3558, !3559, !3560, !3561, !3562, !3563, !3564, !3565, !3566, !3567, !3568}
!3539 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3537, file: !2449, line: 51, baseType: !6, size: 32)
!3540 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3537, file: !2449, line: 54, baseType: !8, size: 64, offset: 64)
!3541 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3537, file: !2449, line: 55, baseType: !8, size: 64, offset: 128)
!3542 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3537, file: !2449, line: 56, baseType: !8, size: 64, offset: 192)
!3543 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3537, file: !2449, line: 57, baseType: !8, size: 64, offset: 256)
!3544 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3537, file: !2449, line: 58, baseType: !8, size: 64, offset: 320)
!3545 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3537, file: !2449, line: 59, baseType: !8, size: 64, offset: 384)
!3546 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3537, file: !2449, line: 60, baseType: !8, size: 64, offset: 448)
!3547 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3537, file: !2449, line: 61, baseType: !8, size: 64, offset: 512)
!3548 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3537, file: !2449, line: 64, baseType: !8, size: 64, offset: 576)
!3549 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3537, file: !2449, line: 65, baseType: !8, size: 64, offset: 640)
!3550 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3537, file: !2449, line: 66, baseType: !8, size: 64, offset: 704)
!3551 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3537, file: !2449, line: 68, baseType: !2464, size: 64, offset: 768)
!3552 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3537, file: !2449, line: 70, baseType: !3553, size: 64, offset: 832)
!3553 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3537, size: 64)
!3554 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3537, file: !2449, line: 72, baseType: !6, size: 32, offset: 896)
!3555 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3537, file: !2449, line: 73, baseType: !6, size: 32, offset: 928)
!3556 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3537, file: !2449, line: 74, baseType: !2471, size: 64, offset: 960)
!3557 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3537, file: !2449, line: 77, baseType: !98, size: 16, offset: 1024)
!3558 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3537, file: !2449, line: 78, baseType: !2476, size: 8, offset: 1040)
!3559 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3537, file: !2449, line: 79, baseType: !2478, size: 8, offset: 1048)
!3560 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3537, file: !2449, line: 81, baseType: !2482, size: 64, offset: 1088)
!3561 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3537, file: !2449, line: 89, baseType: !2485, size: 64, offset: 1152)
!3562 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3537, file: !2449, line: 91, baseType: !2487, size: 64, offset: 1216)
!3563 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3537, file: !2449, line: 92, baseType: !2490, size: 64, offset: 1280)
!3564 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3537, file: !2449, line: 93, baseType: !3553, size: 64, offset: 1344)
!3565 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3537, file: !2449, line: 94, baseType: !13, size: 64, offset: 1408)
!3566 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3537, file: !2449, line: 95, baseType: !99, size: 64, offset: 1472)
!3567 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3537, file: !2449, line: 96, baseType: !6, size: 32, offset: 1536)
!3568 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3537, file: !2449, line: 98, baseType: !2497, size: 160, offset: 1568)
!3569 = distinct !DICompileUnit(language: DW_LANG_C99, file: !179, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!3570 = distinct !DISubprogram(name: "clear_ungetc_buffer_preserving_position", scope: !3477, file: !3477, line: 41, type: !3571, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !178, retainedNodes: !11)
!3571 = !DISubroutineType(types: !3572)
!3572 = !{null, !3480}
!3573 = !DILocalVariable(name: "fp", arg: 1, scope: !3570, file: !3477, line: 41, type: !3480)
!3574 = !DILocation(line: 41, column: 48, scope: !3570)
!3575 = !DILocation(line: 43, column: 7, scope: !3576)
!3576 = distinct !DILexicalBlock(scope: !3570, file: !3477, line: 43, column: 7)
!3577 = !DILocation(line: 43, column: 11, scope: !3576)
!3578 = !DILocation(line: 43, column: 18, scope: !3576)
!3579 = !DILocation(line: 43, column: 7, scope: !3570)
!3580 = !DILocation(line: 45, column: 13, scope: !3576)
!3581 = !DILocation(line: 45, column: 5, scope: !3576)
!3582 = !DILocation(line: 46, column: 1, scope: !3570)
!3583 = !DILocalVariable(name: "fp", arg: 1, scope: !3584, file: !3477, line: 41, type: !3587)
!3584 = distinct !DISubprogram(name: "clear_ungetc_buffer_preserving_position", scope: !3477, file: !3477, line: 41, type: !3585, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3621, retainedNodes: !11)
!3585 = !DISubroutineType(types: !3586)
!3586 = !{null, !3587}
!3587 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3588, size: 64)
!3588 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2447, line: 7, baseType: !3589)
!3589 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2449, line: 49, size: 1728, elements: !3590)
!3590 = !{!3591, !3592, !3593, !3594, !3595, !3596, !3597, !3598, !3599, !3600, !3601, !3602, !3603, !3604, !3606, !3607, !3608, !3609, !3610, !3611, !3612, !3613, !3614, !3615, !3616, !3617, !3618, !3619, !3620}
!3591 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3589, file: !2449, line: 51, baseType: !6, size: 32)
!3592 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3589, file: !2449, line: 54, baseType: !8, size: 64, offset: 64)
!3593 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3589, file: !2449, line: 55, baseType: !8, size: 64, offset: 128)
!3594 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3589, file: !2449, line: 56, baseType: !8, size: 64, offset: 192)
!3595 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3589, file: !2449, line: 57, baseType: !8, size: 64, offset: 256)
!3596 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3589, file: !2449, line: 58, baseType: !8, size: 64, offset: 320)
!3597 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3589, file: !2449, line: 59, baseType: !8, size: 64, offset: 384)
!3598 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3589, file: !2449, line: 60, baseType: !8, size: 64, offset: 448)
!3599 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3589, file: !2449, line: 61, baseType: !8, size: 64, offset: 512)
!3600 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3589, file: !2449, line: 64, baseType: !8, size: 64, offset: 576)
!3601 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3589, file: !2449, line: 65, baseType: !8, size: 64, offset: 640)
!3602 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3589, file: !2449, line: 66, baseType: !8, size: 64, offset: 704)
!3603 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3589, file: !2449, line: 68, baseType: !2464, size: 64, offset: 768)
!3604 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3589, file: !2449, line: 70, baseType: !3605, size: 64, offset: 832)
!3605 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3589, size: 64)
!3606 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3589, file: !2449, line: 72, baseType: !6, size: 32, offset: 896)
!3607 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3589, file: !2449, line: 73, baseType: !6, size: 32, offset: 928)
!3608 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3589, file: !2449, line: 74, baseType: !2471, size: 64, offset: 960)
!3609 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3589, file: !2449, line: 77, baseType: !98, size: 16, offset: 1024)
!3610 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3589, file: !2449, line: 78, baseType: !2476, size: 8, offset: 1040)
!3611 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3589, file: !2449, line: 79, baseType: !2478, size: 8, offset: 1048)
!3612 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3589, file: !2449, line: 81, baseType: !2482, size: 64, offset: 1088)
!3613 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3589, file: !2449, line: 89, baseType: !2485, size: 64, offset: 1152)
!3614 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3589, file: !2449, line: 91, baseType: !2487, size: 64, offset: 1216)
!3615 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3589, file: !2449, line: 92, baseType: !2490, size: 64, offset: 1280)
!3616 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3589, file: !2449, line: 93, baseType: !3605, size: 64, offset: 1344)
!3617 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3589, file: !2449, line: 94, baseType: !13, size: 64, offset: 1408)
!3618 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3589, file: !2449, line: 95, baseType: !99, size: 64, offset: 1472)
!3619 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3589, file: !2449, line: 96, baseType: !6, size: 32, offset: 1536)
!3620 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3589, file: !2449, line: 98, baseType: !2497, size: 160, offset: 1568)
!3621 = distinct !DICompileUnit(language: DW_LANG_C99, file: !179, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!3622 = distinct !DISubprogram(name: "rpl_fseeko", scope: !3623, file: !3623, line: 28, type: !3624, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !180, retainedNodes: !11)
!3623 = !DIFile(filename: "lib/fseeko.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3624 = !DISubroutineType(types: !3625)
!3625 = !{!6, !3626, !3660, !6}
!3626 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3627, size: 64)
!3627 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2447, line: 7, baseType: !3628)
!3628 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2449, line: 49, size: 1728, elements: !3629)
!3629 = !{!3630, !3631, !3632, !3633, !3634, !3635, !3636, !3637, !3638, !3639, !3640, !3641, !3642, !3643, !3645, !3646, !3647, !3648, !3649, !3650, !3651, !3652, !3653, !3654, !3655, !3656, !3657, !3658, !3659}
!3630 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3628, file: !2449, line: 51, baseType: !6, size: 32)
!3631 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3628, file: !2449, line: 54, baseType: !8, size: 64, offset: 64)
!3632 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3628, file: !2449, line: 55, baseType: !8, size: 64, offset: 128)
!3633 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3628, file: !2449, line: 56, baseType: !8, size: 64, offset: 192)
!3634 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3628, file: !2449, line: 57, baseType: !8, size: 64, offset: 256)
!3635 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3628, file: !2449, line: 58, baseType: !8, size: 64, offset: 320)
!3636 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3628, file: !2449, line: 59, baseType: !8, size: 64, offset: 384)
!3637 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3628, file: !2449, line: 60, baseType: !8, size: 64, offset: 448)
!3638 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3628, file: !2449, line: 61, baseType: !8, size: 64, offset: 512)
!3639 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3628, file: !2449, line: 64, baseType: !8, size: 64, offset: 576)
!3640 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3628, file: !2449, line: 65, baseType: !8, size: 64, offset: 640)
!3641 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3628, file: !2449, line: 66, baseType: !8, size: 64, offset: 704)
!3642 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3628, file: !2449, line: 68, baseType: !2464, size: 64, offset: 768)
!3643 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3628, file: !2449, line: 70, baseType: !3644, size: 64, offset: 832)
!3644 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3628, size: 64)
!3645 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3628, file: !2449, line: 72, baseType: !6, size: 32, offset: 896)
!3646 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3628, file: !2449, line: 73, baseType: !6, size: 32, offset: 928)
!3647 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3628, file: !2449, line: 74, baseType: !2471, size: 64, offset: 960)
!3648 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3628, file: !2449, line: 77, baseType: !98, size: 16, offset: 1024)
!3649 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3628, file: !2449, line: 78, baseType: !2476, size: 8, offset: 1040)
!3650 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3628, file: !2449, line: 79, baseType: !2478, size: 8, offset: 1048)
!3651 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3628, file: !2449, line: 81, baseType: !2482, size: 64, offset: 1088)
!3652 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3628, file: !2449, line: 89, baseType: !2485, size: 64, offset: 1152)
!3653 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3628, file: !2449, line: 91, baseType: !2487, size: 64, offset: 1216)
!3654 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3628, file: !2449, line: 92, baseType: !2490, size: 64, offset: 1280)
!3655 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3628, file: !2449, line: 93, baseType: !3644, size: 64, offset: 1344)
!3656 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3628, file: !2449, line: 94, baseType: !13, size: 64, offset: 1408)
!3657 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3628, file: !2449, line: 95, baseType: !99, size: 64, offset: 1472)
!3658 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3628, file: !2449, line: 96, baseType: !6, size: 32, offset: 1536)
!3659 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3628, file: !2449, line: 98, baseType: !2497, size: 160, offset: 1568)
!3660 = !DIDerivedType(tag: DW_TAG_typedef, name: "off_t", file: !2792, line: 63, baseType: !2471)
!3661 = !DILocalVariable(name: "fp", arg: 1, scope: !3622, file: !3623, line: 28, type: !3626)
!3662 = !DILocation(line: 28, column: 15, scope: !3622)
!3663 = !DILocalVariable(name: "offset", arg: 2, scope: !3622, file: !3623, line: 28, type: !3660)
!3664 = !DILocation(line: 28, column: 25, scope: !3622)
!3665 = !DILocalVariable(name: "whence", arg: 3, scope: !3622, file: !3623, line: 28, type: !6)
!3666 = !DILocation(line: 28, column: 37, scope: !3622)
!3667 = !DILocation(line: 52, column: 7, scope: !3668)
!3668 = distinct !DILexicalBlock(scope: !3622, file: !3623, line: 52, column: 7)
!3669 = !DILocation(line: 52, column: 11, scope: !3668)
!3670 = !DILocation(line: 52, column: 27, scope: !3668)
!3671 = !DILocation(line: 52, column: 31, scope: !3668)
!3672 = !DILocation(line: 52, column: 24, scope: !3668)
!3673 = !DILocation(line: 53, column: 7, scope: !3668)
!3674 = !DILocation(line: 53, column: 10, scope: !3668)
!3675 = !DILocation(line: 53, column: 14, scope: !3668)
!3676 = !DILocation(line: 53, column: 31, scope: !3668)
!3677 = !DILocation(line: 53, column: 35, scope: !3668)
!3678 = !DILocation(line: 53, column: 28, scope: !3668)
!3679 = !DILocation(line: 54, column: 7, scope: !3668)
!3680 = !DILocation(line: 54, column: 10, scope: !3668)
!3681 = !DILocation(line: 54, column: 14, scope: !3668)
!3682 = !DILocation(line: 54, column: 28, scope: !3668)
!3683 = !DILocation(line: 52, column: 7, scope: !3622)
!3684 = !DILocalVariable(name: "pos", scope: !3685, file: !3623, line: 117, type: !3660)
!3685 = distinct !DILexicalBlock(scope: !3668, file: !3623, line: 113, column: 5)
!3686 = !DILocation(line: 117, column: 13, scope: !3685)
!3687 = !DILocation(line: 117, column: 34, scope: !3685)
!3688 = !DILocation(line: 117, column: 26, scope: !3685)
!3689 = !DILocation(line: 117, column: 39, scope: !3685)
!3690 = !DILocation(line: 117, column: 47, scope: !3685)
!3691 = !DILocation(line: 117, column: 19, scope: !3685)
!3692 = !DILocation(line: 118, column: 11, scope: !3693)
!3693 = distinct !DILexicalBlock(scope: !3685, file: !3623, line: 118, column: 11)
!3694 = !DILocation(line: 118, column: 15, scope: !3693)
!3695 = !DILocation(line: 118, column: 11, scope: !3685)
!3696 = !DILocation(line: 124, column: 11, scope: !3697)
!3697 = distinct !DILexicalBlock(scope: !3693, file: !3623, line: 119, column: 9)
!3698 = !DILocation(line: 129, column: 7, scope: !3685)
!3699 = !DILocation(line: 129, column: 11, scope: !3685)
!3700 = !DILocation(line: 129, column: 18, scope: !3685)
!3701 = !DILocation(line: 130, column: 21, scope: !3685)
!3702 = !DILocation(line: 130, column: 7, scope: !3685)
!3703 = !DILocation(line: 130, column: 11, scope: !3685)
!3704 = !DILocation(line: 130, column: 19, scope: !3685)
!3705 = !DILocation(line: 161, column: 7, scope: !3685)
!3706 = !DILocation(line: 163, column: 18, scope: !3622)
!3707 = !DILocation(line: 163, column: 22, scope: !3622)
!3708 = !DILocation(line: 163, column: 30, scope: !3622)
!3709 = !DILocation(line: 163, column: 10, scope: !3622)
!3710 = !DILocation(line: 163, column: 3, scope: !3622)
!3711 = !DILocation(line: 164, column: 1, scope: !3622)
!3712 = !DILocalVariable(name: "fp", arg: 1, scope: !3713, file: !3623, line: 28, type: !3716)
!3713 = distinct !DISubprogram(name: "rpl_fseeko", scope: !3623, file: !3623, line: 28, type: !3714, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3750, retainedNodes: !11)
!3714 = !DISubroutineType(types: !3715)
!3715 = !{!6, !3716, !3660, !6}
!3716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3717, size: 64)
!3717 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2447, line: 7, baseType: !3718)
!3718 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2449, line: 49, size: 1728, elements: !3719)
!3719 = !{!3720, !3721, !3722, !3723, !3724, !3725, !3726, !3727, !3728, !3729, !3730, !3731, !3732, !3733, !3735, !3736, !3737, !3738, !3739, !3740, !3741, !3742, !3743, !3744, !3745, !3746, !3747, !3748, !3749}
!3720 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3718, file: !2449, line: 51, baseType: !6, size: 32)
!3721 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3718, file: !2449, line: 54, baseType: !8, size: 64, offset: 64)
!3722 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3718, file: !2449, line: 55, baseType: !8, size: 64, offset: 128)
!3723 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3718, file: !2449, line: 56, baseType: !8, size: 64, offset: 192)
!3724 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3718, file: !2449, line: 57, baseType: !8, size: 64, offset: 256)
!3725 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3718, file: !2449, line: 58, baseType: !8, size: 64, offset: 320)
!3726 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3718, file: !2449, line: 59, baseType: !8, size: 64, offset: 384)
!3727 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3718, file: !2449, line: 60, baseType: !8, size: 64, offset: 448)
!3728 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3718, file: !2449, line: 61, baseType: !8, size: 64, offset: 512)
!3729 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3718, file: !2449, line: 64, baseType: !8, size: 64, offset: 576)
!3730 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3718, file: !2449, line: 65, baseType: !8, size: 64, offset: 640)
!3731 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3718, file: !2449, line: 66, baseType: !8, size: 64, offset: 704)
!3732 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3718, file: !2449, line: 68, baseType: !2464, size: 64, offset: 768)
!3733 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3718, file: !2449, line: 70, baseType: !3734, size: 64, offset: 832)
!3734 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3718, size: 64)
!3735 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3718, file: !2449, line: 72, baseType: !6, size: 32, offset: 896)
!3736 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3718, file: !2449, line: 73, baseType: !6, size: 32, offset: 928)
!3737 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3718, file: !2449, line: 74, baseType: !2471, size: 64, offset: 960)
!3738 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3718, file: !2449, line: 77, baseType: !98, size: 16, offset: 1024)
!3739 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3718, file: !2449, line: 78, baseType: !2476, size: 8, offset: 1040)
!3740 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3718, file: !2449, line: 79, baseType: !2478, size: 8, offset: 1048)
!3741 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3718, file: !2449, line: 81, baseType: !2482, size: 64, offset: 1088)
!3742 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3718, file: !2449, line: 89, baseType: !2485, size: 64, offset: 1152)
!3743 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3718, file: !2449, line: 91, baseType: !2487, size: 64, offset: 1216)
!3744 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3718, file: !2449, line: 92, baseType: !2490, size: 64, offset: 1280)
!3745 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3718, file: !2449, line: 93, baseType: !3734, size: 64, offset: 1344)
!3746 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3718, file: !2449, line: 94, baseType: !13, size: 64, offset: 1408)
!3747 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3718, file: !2449, line: 95, baseType: !99, size: 64, offset: 1472)
!3748 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3718, file: !2449, line: 96, baseType: !6, size: 32, offset: 1536)
!3749 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3718, file: !2449, line: 98, baseType: !2497, size: 160, offset: 1568)
!3750 = distinct !DICompileUnit(language: DW_LANG_C99, file: !181, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!3751 = !DILocalVariable(name: "offset", arg: 2, scope: !3713, file: !3623, line: 28, type: !3660)
!3752 = !DILocalVariable(name: "whence", arg: 3, scope: !3713, file: !3623, line: 28, type: !6)
!3753 = distinct !DISubprogram(name: "c_tolower", scope: !3754, file: !3754, line: 337, type: !3755, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !182, retainedNodes: !11)
!3754 = !DIFile(filename: "./lib/c-ctype.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3755 = !DISubroutineType(types: !3756)
!3756 = !{!6, !6}
!3757 = !DILocalVariable(name: "c", arg: 1, scope: !3753, file: !3754, line: 337, type: !6)
!3758 = !DILocation(line: 337, column: 16, scope: !3753)
!3759 = !DILocation(line: 339, column: 11, scope: !3753)
!3760 = !DILocation(line: 339, column: 3, scope: !3753)
!3761 = !DILocation(line: 342, column: 14, scope: !3762)
!3762 = distinct !DILexicalBlock(scope: !3753, file: !3754, line: 340, column: 5)
!3763 = !DILocation(line: 342, column: 16, scope: !3762)
!3764 = !DILocation(line: 342, column: 22, scope: !3762)
!3765 = !DILocation(line: 342, column: 7, scope: !3762)
!3766 = !DILocation(line: 344, column: 14, scope: !3762)
!3767 = !DILocation(line: 344, column: 7, scope: !3762)
!3768 = !DILocation(line: 346, column: 1, scope: !3753)
!3769 = !DILocalVariable(name: "c", arg: 1, scope: !3770, file: !3754, line: 337, type: !6)
!3770 = distinct !DISubprogram(name: "c_tolower", scope: !3754, file: !3754, line: 337, type: !3755, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3771, retainedNodes: !11)
!3771 = distinct !DICompileUnit(language: DW_LANG_C99, file: !183, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, nameTableKind: None)
