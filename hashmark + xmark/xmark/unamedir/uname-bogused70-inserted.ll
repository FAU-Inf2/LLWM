; ModuleID = '<stdin>'
source_filename = "ld-temp.o"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.infomap = type { i8*, i8* }
%struct.option = type { i8*, i32, i32*, i32 }
%struct.quoting_options = type { i32, i32, [8 x i32], i8*, i8* }
%struct.slotvec = type { i64, i8* }
%struct.utsname = type { [65 x i8], [65 x i8], [65 x i8], [65 x i8], [65 x i8], [65 x i8] }
%struct.__mbstate_t = type { i32, %union.anon }
%union.anon = type { i32 }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }

@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str = private unnamed_addr constant [39 x i8] c"Try '%s --help' for more information.\0A\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"Usage: %s [OPTION]...\0A\00", align 1
@.str.2 = private unnamed_addr constant [362 x i8] c"Print certain system information.  With no OPTION, same as -s.\0A\0A  -a, --all                print all information, in the following order,\0A                             except omit -p and -i if unknown:\0A  -s, --kernel-name        print the kernel name\0A  -n, --nodename           print the network node hostname\0A  -r, --kernel-release     print the kernel release\0A\00", align 1
@stdout = external dso_local global %struct._IO_FILE*, align 8
@.str.3 = private unnamed_addr constant [303 x i8] c"  -v, --kernel-version     print the kernel version\0A  -m, --machine            print the machine hardware name\0A  -p, --processor          print the processor type (non-portable)\0A  -i, --hardware-platform  print the hardware platform (non-portable)\0A  -o, --operating-system   print the operating system\0A\00", align 1
@.str.4 = private unnamed_addr constant [30 x i8] c"Print machine architecture.\0A\0A\00", align 1
@.str.5 = private unnamed_addr constant [45 x i8] c"      --help     display this help and exit\0A\00", align 1
@.str.6 = private unnamed_addr constant [54 x i8] c"      --version  output version information and exit\0A\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"uname\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"arch\00", align 1
@__const.emit_ancillary_info.infomap = private unnamed_addr constant [7 x %struct.infomap] [%struct.infomap { i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14, i32 0, i32 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10, i32 0, i32 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.16, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.17, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.18, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.19, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.18, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.20, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.18, i32 0, i32 0) }, %struct.infomap { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.21, i32 0, i32 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.18, i32 0, i32 0) }, %struct.infomap zeroinitializer], align 16
@.str.22 = private unnamed_addr constant [23 x i8] c"\0A%s online help: <%s>\0A\00", align 1
@.str.23 = private unnamed_addr constant [14 x i8] c"GNU coreutils\00", align 1
@.str.24 = private unnamed_addr constant [40 x i8] c"https://www.gnu.org/software/coreutils/\00", align 1
@.str.25 = private unnamed_addr constant [4 x i8] c"en_\00", align 1
@.str.26 = private unnamed_addr constant [71 x i8] c"Report any translation bugs to <https://translationproject.org/team/>\0A\00", align 1
@.str.27 = private unnamed_addr constant [27 x i8] c"Full documentation <%s%s>\0A\00", align 1
@.str.28 = private unnamed_addr constant [51 x i8] c"or available locally via: info '(coreutils) %s%s'\0A\00", align 1
@.str.29 = private unnamed_addr constant [12 x i8] c" invocation\00", align 1
@.str.9 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.14 = private unnamed_addr constant [2 x i8] c"[\00", align 1
@.str.15 = private unnamed_addr constant [16 x i8] c"test invocation\00", align 1
@.str.10 = private unnamed_addr constant [10 x i8] c"coreutils\00", align 1
@.str.16 = private unnamed_addr constant [22 x i8] c"Multi-call invocation\00", align 1
@.str.17 = private unnamed_addr constant [10 x i8] c"sha224sum\00", align 1
@.str.18 = private unnamed_addr constant [15 x i8] c"sha2 utilities\00", align 1
@.str.19 = private unnamed_addr constant [10 x i8] c"sha256sum\00", align 1
@.str.20 = private unnamed_addr constant [10 x i8] c"sha384sum\00", align 1
@.str.21 = private unnamed_addr constant [10 x i8] c"sha512sum\00", align 1
@.str.11 = private unnamed_addr constant [24 x i8] c"/usr/local/share/locale\00", align 1
@.str.12 = private unnamed_addr constant [23 x i8] c"cannot get system name\00", align 1
@main.unknown = internal constant [8 x i8] c"unknown\00", align 1, !dbg !0
@.str.13 = private unnamed_addr constant [10 x i8] c"GNU/Linux\00", align 1
@print_element.printed = internal global i8 0, align 1, !dbg !36
@arch_long_options = internal constant [3 x %struct.option] [%struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.34, i32 0, i32 0), i32 0, i32* null, i32 -130 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.35, i32 0, i32 0), i32 0, i32* null, i32 -131 }, %struct.option zeroinitializer], align 16, !dbg !15
@.str.30 = private unnamed_addr constant [16 x i8] c"David MacKenzie\00", align 1
@.str.31 = private unnamed_addr constant [10 x i8] c"Karel Zak\00", align 1
@.str.32 = private unnamed_addr constant [10 x i8] c"asnrvmpio\00", align 1
@uname_long_options = internal constant [14 x %struct.option] [%struct.option { i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.36, i32 0, i32 0), i32 0, i32* null, i32 97 }, %struct.option { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.37, i32 0, i32 0), i32 0, i32* null, i32 115 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.38, i32 0, i32 0), i32 0, i32* null, i32 115 }, %struct.option { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.39, i32 0, i32 0), i32 0, i32* null, i32 110 }, %struct.option { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.40, i32 0, i32 0), i32 0, i32* null, i32 114 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.41, i32 0, i32 0), i32 0, i32* null, i32 114 }, %struct.option { i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.42, i32 0, i32 0), i32 0, i32* null, i32 118 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.43, i32 0, i32 0), i32 0, i32* null, i32 109 }, %struct.option { i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.44, i32 0, i32 0), i32 0, i32* null, i32 112 }, %struct.option { i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.45, i32 0, i32 0), i32 0, i32* null, i32 105 }, %struct.option { i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.46, i32 0, i32 0), i32 0, i32* null, i32 111 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.34, i32 0, i32 0), i32 0, i32* null, i32 -130 }, %struct.option { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.35, i32 0, i32 0), i32 0, i32* null, i32 -131 }, %struct.option zeroinitializer], align 16, !dbg !31
@optind = external dso_local global i32, align 4
@.str.33 = private unnamed_addr constant [17 x i8] c"extra operand %s\00", align 1
@.str.36 = private unnamed_addr constant [4 x i8] c"all\00", align 1
@.str.37 = private unnamed_addr constant [12 x i8] c"kernel-name\00", align 1
@.str.38 = private unnamed_addr constant [8 x i8] c"sysname\00", align 1
@.str.39 = private unnamed_addr constant [9 x i8] c"nodename\00", align 1
@.str.40 = private unnamed_addr constant [15 x i8] c"kernel-release\00", align 1
@.str.41 = private unnamed_addr constant [8 x i8] c"release\00", align 1
@.str.42 = private unnamed_addr constant [15 x i8] c"kernel-version\00", align 1
@.str.43 = private unnamed_addr constant [8 x i8] c"machine\00", align 1
@.str.44 = private unnamed_addr constant [10 x i8] c"processor\00", align 1
@.str.45 = private unnamed_addr constant [18 x i8] c"hardware-platform\00", align 1
@.str.46 = private unnamed_addr constant [17 x i8] c"operating-system\00", align 1
@.str.34 = private unnamed_addr constant [5 x i8] c"help\00", align 1
@.str.35 = private unnamed_addr constant [8 x i8] c"version\00", align 1
@uname_mode = internal global i32 1, align 4, !dbg !45
@Version = internal global i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.47, i32 0, i32 0), align 8, !dbg !50
@.str.47 = private unnamed_addr constant [5 x i8] c"8.32\00", align 1
@ignore_EPIPE = internal global i8 0, align 1, !dbg !55
@.str.50 = private unnamed_addr constant [12 x i8] c"write error\00", align 1
@file_name = internal global i8* null, align 8, !dbg !60
@.str.1.51 = private unnamed_addr constant [7 x i8] c"%s: %s\00", align 1
@.str.2.52 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@exit_failure = internal global i32 1, align 4, !dbg !63
@.str.57 = private unnamed_addr constant [56 x i8] c"A NULL argv[0] was passed through an exec system call.\0A\00", align 1
@.str.1.58 = private unnamed_addr constant [8 x i8] c"/.libs/\00", align 1
@.str.2.59 = private unnamed_addr constant [4 x i8] c"lt-\00", align 1
@program_invocation_short_name = external dso_local global i8*, align 8
@program_name = internal global i8* null, align 8, !dbg !70
@program_invocation_name = external dso_local global i8*, align 8
@default_quoting_options = internal global %struct.quoting_options zeroinitializer, align 8, !dbg !77
@slotvec = internal global %struct.slotvec* @slotvec0, align 8, !dbg !131
@nslots = internal global i32 1, align 4, !dbg !138
@slotvec0 = internal global %struct.slotvec { i64 256, i8* getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i32 0, i32 0) }, align 8, !dbg !140
@slot0 = internal global [256 x i8] zeroinitializer, align 16, !dbg !126
@.str.10.62 = private unnamed_addr constant [2 x i8] c"\22\00", align 1
@.str.11.63 = private unnamed_addr constant [2 x i8] c"`\00", align 1
@.str.12.64 = private unnamed_addr constant [2 x i8] c"'\00", align 1
@.str.13.65 = private unnamed_addr constant [6 x i8] c"UTF-8\00", align 1
@.str.14.66 = private unnamed_addr constant [4 x i8] c"\E2\80\98\00", align 1
@.str.15.67 = private unnamed_addr constant [4 x i8] c"\E2\80\99\00", align 1
@.str.16.68 = private unnamed_addr constant [8 x i8] c"GB18030\00", align 1
@.str.17.69 = private unnamed_addr constant [4 x i8] c"\A1\07e\00", align 1
@.str.18.70 = private unnamed_addr constant [3 x i8] c"\A1\AF\00", align 1
@quote_quoting_options = internal global %struct.quoting_options { i32 8, i32 0, [8 x i32] zeroinitializer, i8* null, i8* null }, align 8, !dbg !116
@.str.75 = private unnamed_addr constant [12 x i8] c"%s (%s) %s\0A\00", align 1
@.str.1.76 = private unnamed_addr constant [7 x i8] c"%s %s\0A\00", align 1
@.str.2.77 = private unnamed_addr constant [4 x i8] c"(C)\00", align 1
@.str.3.78 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.4.79 = private unnamed_addr constant [171 x i8] c"License GPLv3+: GNU GPL version 3 or later <%s>.\0AThis is free software: you are free to change and redistribute it.\0AThere is NO WARRANTY, to the extent permitted by law.\0A\00", align 1
@.str.5.80 = private unnamed_addr constant [34 x i8] c"https://gnu.org/licenses/gpl.html\00", align 1
@.str.6.81 = private unnamed_addr constant [16 x i8] c"Written by %s.\0A\00", align 1
@.str.7.82 = private unnamed_addr constant [23 x i8] c"Written by %s and %s.\0A\00", align 1
@.str.8.83 = private unnamed_addr constant [28 x i8] c"Written by %s, %s, and %s.\0A\00", align 1
@.str.9.84 = private unnamed_addr constant [32 x i8] c"Written by %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.10.85 = private unnamed_addr constant [36 x i8] c"Written by %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.11.86 = private unnamed_addr constant [40 x i8] c"Written by %s, %s, %s,\0A%s, %s, and %s.\0A\00", align 1
@.str.12.87 = private unnamed_addr constant [44 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, and %s.\0A\00", align 1
@.str.13.88 = private unnamed_addr constant [48 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0Aand %s.\0A\00", align 1
@.str.14.89 = private unnamed_addr constant [52 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, and %s.\0A\00", align 1
@.str.15.90 = private unnamed_addr constant [60 x i8] c"Written by %s, %s, %s,\0A%s, %s, %s, %s,\0A%s, %s, and others.\0A\00", align 1
@version_etc_copyright = internal constant [47 x i8] c"Copyright %s %d Free Software Foundation, Inc.\00", align 16, !dbg !142
@.str.1.101 = private unnamed_addr constant [17 x i8] c"memory exhausted\00", align 1
@.str.102 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.111 = private unnamed_addr constant [2 x i8] c"C\00", align 1
@.str.1.112 = private unnamed_addr constant [6 x i8] c"POSIX\00", align 1
@.str.115 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1.116 = private unnamed_addr constant [6 x i8] c"ASCII\00", align 1
@inVal0 = global i32 0
@inVal1 = global i8** null
@.compVal0 = private global [3 x i8] c"-a\00"
@.compVal1 = private global [4 x i8] c"-aa\00"
@.compVal2 = private global [3 x i8] c"--\00"
@x = common global i32 0
@y = common global i32 0
@x.1 = common global i32 0
@y.2 = common global i32 0
@x.3 = common global i32 0
@y.4 = common global i32 0
@x.5 = common global i32 0
@y.6 = common global i32 0
@x.7 = common global i32 0
@y.8 = common global i32 0
@x.9 = common global i32 0
@y.10 = common global i32 0
@x.11 = common global i32 0
@y.12 = common global i32 0
@x.13 = common global i32 0
@y.14 = common global i32 0
@x.15 = common global i32 0
@y.16 = common global i32 0
@x.17 = common global i32 0
@y.18 = common global i32 0
@x.19 = common global i32 0
@y.20 = common global i32 0
@x.21 = common global i32 0
@y.22 = common global i32 0
@x.23 = common global i32 0
@y.24 = common global i32 0
@x.25 = common global i32 0
@y.26 = common global i32 0
@x.27 = common global i32 0
@y.28 = common global i32 0
@x.29 = common global i32 0
@y.30 = common global i32 0
@x.31 = common global i32 0
@y.32 = common global i32 0
@x.33 = common global i32 0
@y.34 = common global i32 0
@x.35 = common global i32 0
@y.36 = common global i32 0
@x.37 = common global i32 0
@y.38 = common global i32 0
@x.39 = common global i32 0
@y.40 = common global i32 0
@x.41 = common global i32 0
@y.42 = common global i32 0
@x.43 = common global i32 0
@y.44 = common global i32 0
@x.45 = common global i32 0
@y.46 = common global i32 0
@x.47 = common global i32 0
@y.48 = common global i32 0
@x.49 = common global i32 0
@y.50 = common global i32 0
@x.51 = common global i32 0
@y.52 = common global i32 0
@x.53 = common global i32 0
@y.54 = common global i32 0
@x.55 = common global i32 0
@y.56 = common global i32 0
@x.57 = common global i32 0
@y.58 = common global i32 0
@x.59 = common global i32 0
@y.60 = common global i32 0
@x.61 = common global i32 0
@y.62 = common global i32 0
@x.63 = common global i32 0
@y.64 = common global i32 0
@x.65 = common global i32 0
@y.66 = common global i32 0
@x.67 = common global i32 0
@y.68 = common global i32 0
@x.69 = common global i32 0
@y.70 = common global i32 0
@x.71 = common global i32 0
@y.72 = common global i32 0
@x.73 = common global i32 0
@y.74 = common global i32 0

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @usage(i32) #0 !dbg !190 {
  %2 = load i32, i32* @x
  %3 = load i32, i32* @y
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  store i32 %0, i32* %10, align 4
  call void @llvm.dbg.declare(metadata i32* %10, metadata !193, metadata !DIExpression()), !dbg !194
  %11 = load i32, i32* %10, align 4, !dbg !195
  %12 = icmp ne i32 %11, 0, !dbg !197
  %13 = load i32, i32* @x
  %14 = load i32, i32* @y
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %21, label %44, !dbg !198

21:                                               ; preds = %originalBBpart2
  br label %22, !dbg !199

22:                                               ; preds = %21
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !200
  %24 = call i8* @gettext(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0)) #10, !dbg !200
  %25 = load i8*, i8** @program_name, align 8, !dbg !200
  %26 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %23, i8* %24, i8* %25), !dbg !200
  br label %27, !dbg !200

27:                                               ; preds = %22
  %28 = load i32, i32* @x
  %29 = load i32, i32* @y
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %27, %originalBB1alteredBB
  %36 = load i32, i32* @x
  %37 = load i32, i32* @y
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %136, !dbg !200

44:                                               ; preds = %originalBBpart2
  %45 = load i32, i32* @x
  %46 = load i32, i32* @y
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %44, %originalBB6alteredBB
  %53 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0)) #10, !dbg !202
  %54 = load i8*, i8** @program_name, align 8, !dbg !204
  %55 = call i32 (i8*, ...) @printf(i8* %53, i8* %54), !dbg !205
  %56 = load i32, i32* @uname_mode, align 4, !dbg !206
  %57 = icmp eq i32 %56, 1, !dbg !208
  %58 = load i32, i32* @x
  %59 = load i32, i32* @y
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %57, label %66, label %89, !dbg !209

66:                                               ; preds = %originalBBpart28
  %67 = load i32, i32* @x
  %68 = load i32, i32* @y
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %66, %originalBB10alteredBB
  %75 = call i8* @gettext(i8* getelementptr inbounds ([362 x i8], [362 x i8]* @.str.2, i64 0, i64 0)) #10, !dbg !210
  %76 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !210
  %77 = call i32 @fputs_unlocked(i8* %75, %struct._IO_FILE* %76), !dbg !210
  %78 = call i8* @gettext(i8* getelementptr inbounds ([303 x i8], [303 x i8]* @.str.3, i64 0, i64 0)) #10, !dbg !212
  %79 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !212
  %80 = call i32 @fputs_unlocked(i8* %78, %struct._IO_FILE* %79), !dbg !212
  %81 = load i32, i32* @x
  %82 = load i32, i32* @y
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %109, !dbg !213

89:                                               ; preds = %originalBBpart28
  %90 = load i32, i32* @x
  %91 = load i32, i32* @y
  %92 = sub i32 %90, 1
  %93 = mul i32 %90, %92
  %94 = urem i32 %93, 2
  %95 = icmp eq i32 %94, 0
  %96 = icmp slt i32 %91, 10
  %97 = or i1 %95, %96
  br i1 %97, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %89, %originalBB14alteredBB
  %98 = call i8* @gettext(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i64 0, i64 0)) #10, !dbg !214
  %99 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !214
  %100 = call i32 @fputs_unlocked(i8* %98, %struct._IO_FILE* %99), !dbg !214
  %101 = load i32, i32* @x
  %102 = load i32, i32* @y
  %103 = sub i32 %101, 1
  %104 = mul i32 %101, %103
  %105 = urem i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %102, 10
  %108 = or i1 %106, %107
  br i1 %108, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %109

109:                                              ; preds = %originalBBpart216, %originalBBpart212
  %110 = load i32, i32* @x
  %111 = load i32, i32* @y
  %112 = sub i32 %110, 1
  %113 = mul i32 %110, %112
  %114 = urem i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %115, %116
  br i1 %117, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %109, %originalBB18alteredBB
  %118 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.5, i64 0, i64 0)) #10, !dbg !216
  %119 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !216
  %120 = call i32 @fputs_unlocked(i8* %118, %struct._IO_FILE* %119), !dbg !216
  %121 = call i8* @gettext(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.6, i64 0, i64 0)) #10, !dbg !217
  %122 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !217
  %123 = call i32 @fputs_unlocked(i8* %121, %struct._IO_FILE* %122), !dbg !217
  %124 = load i32, i32* @uname_mode, align 4, !dbg !218
  %125 = icmp eq i32 %124, 1, !dbg !218
  %126 = zext i1 %125 to i64, !dbg !218
  %127 = select i1 %125, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), !dbg !218
  call void @emit_ancillary_info(i8* %127), !dbg !219
  %128 = load i32, i32* @x
  %129 = load i32, i32* @y
  %130 = sub i32 %128, 1
  %131 = mul i32 %128, %130
  %132 = urem i32 %131, 2
  %133 = icmp eq i32 %132, 0
  %134 = icmp slt i32 %129, 10
  %135 = or i1 %133, %134
  br i1 %135, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %136

136:                                              ; preds = %originalBBpart220, %originalBBpart24
  %137 = load i32, i32* @x
  %138 = load i32, i32* @y
  %139 = sub i32 %137, 1
  %140 = mul i32 %137, %139
  %141 = urem i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %142, %143
  br i1 %144, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %136, %originalBB22alteredBB
  %145 = load i32, i32* %10, align 4, !dbg !220
  call void @exit(i32 %145) #12, !dbg !221
  %146 = load i32, i32* @x
  %147 = load i32, i32* @y
  %148 = sub i32 %146, 1
  %149 = mul i32 %146, %148
  %150 = urem i32 %149, 2
  %151 = icmp eq i32 %150, 0
  %152 = icmp slt i32 %147, 10
  %153 = or i1 %151, %152
  br i1 %153, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  unreachable, !dbg !221

originalBBalteredBB:                              ; preds = %originalBB, %1
  %154 = alloca i32, align 4
  store i32 %0, i32* %154, align 4
  call void @llvm.dbg.declare(metadata i32* %154, metadata !222, metadata !DIExpression()), !dbg !194
  %155 = load i32, i32* %154, align 4, !dbg !195
  %156 = icmp ne i32 %155, 0, !dbg !197
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %27
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %44
  %157 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0)) #10, !dbg !202
  %158 = load i8*, i8** @program_name, align 8, !dbg !204
  %159 = call i32 (i8*, ...) @printf(i8* %157, i8* %158), !dbg !205
  %160 = load i32, i32* @uname_mode, align 4, !dbg !206
  %161 = icmp eq i32 %160, 1, !dbg !208
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %66
  %162 = call i8* @gettext(i8* getelementptr inbounds ([362 x i8], [362 x i8]* @.str.2, i64 0, i64 0)) #10, !dbg !210
  %163 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !210
  %164 = call i32 @fputs_unlocked(i8* %162, %struct._IO_FILE* %163), !dbg !210
  %165 = call i8* @gettext(i8* getelementptr inbounds ([303 x i8], [303 x i8]* @.str.3, i64 0, i64 0)) #10, !dbg !212
  %166 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !212
  %167 = call i32 @fputs_unlocked(i8* %165, %struct._IO_FILE* %166), !dbg !212
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %89
  %168 = call i8* @gettext(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i64 0, i64 0)) #10, !dbg !214
  %169 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !214
  %170 = call i32 @fputs_unlocked(i8* %168, %struct._IO_FILE* %169), !dbg !214
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %109
  %171 = call i8* @gettext(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.5, i64 0, i64 0)) #10, !dbg !216
  %172 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !216
  %173 = call i32 @fputs_unlocked(i8* %171, %struct._IO_FILE* %172), !dbg !216
  %174 = call i8* @gettext(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.6, i64 0, i64 0)) #10, !dbg !217
  %175 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !217
  %176 = call i32 @fputs_unlocked(i8* %174, %struct._IO_FILE* %175), !dbg !217
  %177 = load i32, i32* @uname_mode, align 4, !dbg !218
  %178 = icmp eq i32 %177, 1, !dbg !218
  %179 = zext i1 %178 to i64, !dbg !218
  %180 = select i1 %178, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), !dbg !218
  call void @emit_ancillary_info(i8* %180), !dbg !219
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %136
  %181 = load i32, i32* %10, align 4, !dbg !220
  call void @exit(i32 %181) #12, !dbg !221
  br label %originalBB22
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: nounwind
declare dso_local i8* @gettext(i8*) #2

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #3

declare dso_local i32 @printf(i8*, ...) #3

declare dso_local i32 @fputs_unlocked(i8*, %struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @emit_ancillary_info(i8*) #4 !dbg !245 {
  %2 = alloca i8*, align 8
  %3 = alloca [7 x %struct.infomap], align 16
  %4 = alloca i8*, align 8
  %5 = alloca %struct.infomap*, align 8
  %6 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  call void @llvm.dbg.declare(metadata i8** %2, metadata !247, metadata !DIExpression()), !dbg !248
  call void @llvm.dbg.declare(metadata [7 x %struct.infomap]* %3, metadata !249, metadata !DIExpression()), !dbg !258
  %7 = bitcast [7 x %struct.infomap]* %3 to i8*, !dbg !258
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %7, i8* align 16 bitcast ([7 x %struct.infomap]* @__const.emit_ancillary_info.infomap to i8*), i64 112, i1 false), !dbg !258
  call void @llvm.dbg.declare(metadata i8** %4, metadata !259, metadata !DIExpression()), !dbg !260
  %8 = load i8*, i8** %2, align 8, !dbg !261
  store i8* %8, i8** %4, align 8, !dbg !260
  call void @llvm.dbg.declare(metadata %struct.infomap** %5, metadata !262, metadata !DIExpression()), !dbg !264
  %9 = getelementptr inbounds [7 x %struct.infomap], [7 x %struct.infomap]* %3, i64 0, i64 0, !dbg !265
  store %struct.infomap* %9, %struct.infomap** %5, align 8, !dbg !264
  br label %10, !dbg !266

10:                                               ; preds = %41, %1
  %11 = load %struct.infomap*, %struct.infomap** %5, align 8, !dbg !267
  %12 = getelementptr inbounds %struct.infomap, %struct.infomap* %11, i32 0, i32 0, !dbg !268
  %13 = load i8*, i8** %12, align 8, !dbg !268
  %14 = icmp ne i8* %13, null, !dbg !267
  br i1 %14, label %15, label %39, !dbg !269

15:                                               ; preds = %10
  %16 = load i32, i32* @x.1
  %17 = load i32, i32* @y.2
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %15, %originalBBalteredBB
  %24 = load i8*, i8** %2, align 8, !dbg !270
  %25 = load %struct.infomap*, %struct.infomap** %5, align 8, !dbg !270
  %26 = getelementptr inbounds %struct.infomap, %struct.infomap* %25, i32 0, i32 0, !dbg !270
  %27 = load i8*, i8** %26, align 8, !dbg !270
  %28 = call i32 @strcmp(i8* %24, i8* %27) #13, !dbg !270
  %29 = icmp eq i32 %28, 0, !dbg !270
  %30 = xor i1 %29, true, !dbg !271
  %31 = load i32, i32* @x.1
  %32 = load i32, i32* @y.2
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %39

39:                                               ; preds = %originalBBpart2, %10
  %40 = phi i1 [ false, %10 ], [ %30, %originalBBpart2 ], !dbg !272
  br i1 %40, label %41, label %44, !dbg !266

41:                                               ; preds = %39
  %42 = load %struct.infomap*, %struct.infomap** %5, align 8, !dbg !273
  %43 = getelementptr inbounds %struct.infomap, %struct.infomap* %42, i32 1, !dbg !273
  store %struct.infomap* %43, %struct.infomap** %5, align 8, !dbg !273
  br label %10, !dbg !266, !llvm.loop !274

44:                                               ; preds = %39
  %45 = load i32, i32* @x.1
  %46 = load i32, i32* @y.2
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBB3, label %originalBB3alteredBB

originalBB3:                                      ; preds = %44, %originalBB3alteredBB
  %53 = load %struct.infomap*, %struct.infomap** %5, align 8, !dbg !275
  %54 = getelementptr inbounds %struct.infomap, %struct.infomap* %53, i32 0, i32 1, !dbg !277
  %55 = load i8*, i8** %54, align 8, !dbg !277
  %56 = icmp ne i8* %55, null, !dbg !275
  %57 = load i32, i32* @x.1
  %58 = load i32, i32* @y.2
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBBpart25, label %originalBB3alteredBB

originalBBpart25:                                 ; preds = %originalBB3
  br i1 %56, label %65, label %85, !dbg !278

65:                                               ; preds = %originalBBpart25
  %66 = load i32, i32* @x.1
  %67 = load i32, i32* @y.2
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBB7, label %originalBB7alteredBB

originalBB7:                                      ; preds = %65, %originalBB7alteredBB
  %74 = load %struct.infomap*, %struct.infomap** %5, align 8, !dbg !279
  %75 = getelementptr inbounds %struct.infomap, %struct.infomap* %74, i32 0, i32 1, !dbg !280
  %76 = load i8*, i8** %75, align 8, !dbg !280
  store i8* %76, i8** %4, align 8, !dbg !281
  %77 = load i32, i32* @x.1
  %78 = load i32, i32* @y.2
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBBpart29, label %originalBB7alteredBB

originalBBpart29:                                 ; preds = %originalBB7
  br label %85, !dbg !282

85:                                               ; preds = %originalBBpart29, %originalBBpart25
  %86 = load i32, i32* @x.1
  %87 = load i32, i32* @y.2
  %88 = sub i32 %86, 1
  %89 = mul i32 %86, %88
  %90 = urem i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %91, %92
  br i1 %93, label %originalBB11, label %originalBB11alteredBB

originalBB11:                                     ; preds = %85, %originalBB11alteredBB
  %94 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.22, i64 0, i64 0)) #10, !dbg !283
  %95 = call i32 (i8*, ...) @printf(i8* %94, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.23, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.24, i64 0, i64 0)), !dbg !284
  call void @llvm.dbg.declare(metadata i8** %6, metadata !285, metadata !DIExpression()), !dbg !286
  %96 = call i8* @setlocale(i32 5, i8* null) #10, !dbg !287
  store i8* %96, i8** %6, align 8, !dbg !286
  %97 = load i8*, i8** %6, align 8, !dbg !288
  %98 = icmp ne i8* %97, null, !dbg !288
  %99 = load i32, i32* @x.1
  %100 = load i32, i32* @y.2
  %101 = sub i32 %99, 1
  %102 = mul i32 %99, %101
  %103 = urem i32 %102, 2
  %104 = icmp eq i32 %103, 0
  %105 = icmp slt i32 %100, 10
  %106 = or i1 %104, %105
  br i1 %106, label %originalBBpart213, label %originalBB11alteredBB

originalBBpart213:                                ; preds = %originalBB11
  br i1 %98, label %107, label %147, !dbg !290

107:                                              ; preds = %originalBBpart213
  %108 = load i32, i32* @x.1
  %109 = load i32, i32* @y.2
  %110 = sub i32 %108, 1
  %111 = mul i32 %108, %110
  %112 = urem i32 %111, 2
  %113 = icmp eq i32 %112, 0
  %114 = icmp slt i32 %109, 10
  %115 = or i1 %113, %114
  br i1 %115, label %originalBB15, label %originalBB15alteredBB

originalBB15:                                     ; preds = %107, %originalBB15alteredBB
  %116 = load i8*, i8** %6, align 8, !dbg !291
  %117 = call i32 @strncmp(i8* %116, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.25, i64 0, i64 0), i64 3) #13, !dbg !291
  %118 = icmp ne i32 %117, 0, !dbg !291
  %119 = load i32, i32* @x.1
  %120 = load i32, i32* @y.2
  %121 = sub i32 %119, 1
  %122 = mul i32 %119, %121
  %123 = urem i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = icmp slt i32 %120, 10
  %126 = or i1 %124, %125
  br i1 %126, label %originalBBpart217, label %originalBB15alteredBB

originalBBpart217:                                ; preds = %originalBB15
  br i1 %118, label %127, label %147, !dbg !292

127:                                              ; preds = %originalBBpart217
  %128 = load i32, i32* @x.1
  %129 = load i32, i32* @y.2
  %130 = sub i32 %128, 1
  %131 = mul i32 %128, %130
  %132 = urem i32 %131, 2
  %133 = icmp eq i32 %132, 0
  %134 = icmp slt i32 %129, 10
  %135 = or i1 %133, %134
  br i1 %135, label %originalBB19, label %originalBB19alteredBB

originalBB19:                                     ; preds = %127, %originalBB19alteredBB
  %136 = call i8* @gettext(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.26, i64 0, i64 0)) #10, !dbg !293
  %137 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !293
  %138 = call i32 @fputs_unlocked(i8* %136, %struct._IO_FILE* %137), !dbg !293
  %139 = load i32, i32* @x.1
  %140 = load i32, i32* @y.2
  %141 = sub i32 %139, 1
  %142 = mul i32 %139, %141
  %143 = urem i32 %142, 2
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %144, %145
  br i1 %146, label %originalBBpart221, label %originalBB19alteredBB

originalBBpart221:                                ; preds = %originalBB19
  br label %147, !dbg !295

147:                                              ; preds = %originalBBpart221, %originalBBpart217, %originalBBpart213
  %148 = load i32, i32* @x.1
  %149 = load i32, i32* @y.2
  %150 = sub i32 %148, 1
  %151 = mul i32 %148, %150
  %152 = urem i32 %151, 2
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %153, %154
  br i1 %155, label %originalBB23, label %originalBB23alteredBB

originalBB23:                                     ; preds = %147, %originalBB23alteredBB
  %156 = call i8* @gettext(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.27, i64 0, i64 0)) #10, !dbg !296
  %157 = load i8*, i8** %2, align 8, !dbg !297
  %158 = call i32 (i8*, ...) @printf(i8* %156, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.24, i64 0, i64 0), i8* %157), !dbg !298
  %159 = call i8* @gettext(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.28, i64 0, i64 0)) #10, !dbg !299
  %160 = load i8*, i8** %4, align 8, !dbg !300
  %161 = load i8*, i8** %4, align 8, !dbg !301
  %162 = load i8*, i8** %2, align 8, !dbg !302
  %163 = icmp eq i8* %161, %162, !dbg !303
  %164 = zext i1 %163 to i64, !dbg !301
  %165 = select i1 %163, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.29, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.9, i64 0, i64 0), !dbg !301
  %166 = call i32 (i8*, ...) @printf(i8* %159, i8* %160, i8* %165), !dbg !304
  %167 = load i32, i32* @x.1
  %168 = load i32, i32* @y.2
  %169 = sub i32 %167, 1
  %170 = mul i32 %167, %169
  %171 = urem i32 %170, 2
  %172 = icmp eq i32 %171, 0
  %173 = icmp slt i32 %168, 10
  %174 = or i1 %172, %173
  br i1 %174, label %originalBBpart225, label %originalBB23alteredBB

originalBBpart225:                                ; preds = %originalBB23
  ret void, !dbg !305

originalBBalteredBB:                              ; preds = %originalBB, %15
  %175 = load i8*, i8** %2, align 8, !dbg !270
  %176 = load %struct.infomap*, %struct.infomap** %5, align 8, !dbg !270
  %177 = getelementptr inbounds %struct.infomap, %struct.infomap* %176, i32 0, i32 0, !dbg !270
  %178 = load i8*, i8** %177, align 8, !dbg !270
  %179 = call i32 @strcmp(i8* %175, i8* %178) #13, !dbg !270
  %180 = icmp eq i32 %179, 0, !dbg !270
  %_ = sub i1 %180, true
  %gen = mul i1 %_, true
  %_1 = sub i1 false, %180
  %gen2 = add i1 %_1, true
  %181 = xor i1 %180, true, !dbg !271
  br label %originalBB

originalBB3alteredBB:                             ; preds = %originalBB3, %44
  %182 = load %struct.infomap*, %struct.infomap** %5, align 8, !dbg !275
  %183 = getelementptr inbounds %struct.infomap, %struct.infomap* %182, i32 0, i32 1, !dbg !277
  %184 = load i8*, i8** %183, align 8, !dbg !277
  %185 = icmp ne i8* %184, null, !dbg !275
  br label %originalBB3

originalBB7alteredBB:                             ; preds = %originalBB7, %65
  %186 = load %struct.infomap*, %struct.infomap** %5, align 8, !dbg !279
  %187 = getelementptr inbounds %struct.infomap, %struct.infomap* %186, i32 0, i32 1, !dbg !280
  %188 = load i8*, i8** %187, align 8, !dbg !280
  store i8* %188, i8** %4, align 8, !dbg !281
  br label %originalBB7

originalBB11alteredBB:                            ; preds = %originalBB11, %85
  %189 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.22, i64 0, i64 0)) #10, !dbg !283
  %190 = call i32 (i8*, ...) @printf(i8* %189, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.23, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.24, i64 0, i64 0)), !dbg !284
  call void @llvm.dbg.declare(metadata !11, metadata !306, metadata !DIExpression()), !dbg !286
  %191 = call i8* @setlocale(i32 5, i8* null) #10, !dbg !287
  store i8* %191, i8** %6, align 8, !dbg !286
  %192 = load i8*, i8** %6, align 8, !dbg !288
  %193 = icmp ne i8* %192, null, !dbg !288
  br label %originalBB11

originalBB15alteredBB:                            ; preds = %originalBB15, %107
  %194 = load i8*, i8** %6, align 8, !dbg !291
  %195 = call i32 @strncmp(i8* %194, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.25, i64 0, i64 0), i64 3) #13, !dbg !291
  %196 = icmp ne i32 %195, 0, !dbg !291
  br label %originalBB15

originalBB19alteredBB:                            ; preds = %originalBB19, %127
  %197 = call i8* @gettext(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.26, i64 0, i64 0)) #10, !dbg !293
  %198 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !293
  %199 = call i32 @fputs_unlocked(i8* %197, %struct._IO_FILE* %198), !dbg !293
  br label %originalBB19

originalBB23alteredBB:                            ; preds = %originalBB23, %147
  %200 = call i8* @gettext(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.27, i64 0, i64 0)) #10, !dbg !296
  %201 = load i8*, i8** %2, align 8, !dbg !297
  %202 = call i32 (i8*, ...) @printf(i8* %200, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.24, i64 0, i64 0), i8* %201), !dbg !298
  %203 = call i8* @gettext(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.28, i64 0, i64 0)) #10, !dbg !299
  %204 = load i8*, i8** %4, align 8, !dbg !300
  %205 = load i8*, i8** %4, align 8, !dbg !301
  %206 = load i8*, i8** %2, align 8, !dbg !302
  %207 = icmp eq i8* %205, %206, !dbg !303
  %208 = zext i1 %207 to i64, !dbg !301
  %209 = select i1 %207, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.29, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.9, i64 0, i64 0), !dbg !301
  %210 = call i32 (i8*, ...) @printf(i8* %203, i8* %204, i8* %209), !dbg !304
  br label %originalBB23
}

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) #5

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #6

; Function Attrs: nounwind readonly
declare dso_local i32 @strcmp(i8*, i8*) #7

; Function Attrs: nounwind
declare dso_local i8* @setlocale(i32, i8*) #2

; Function Attrs: nounwind readonly
declare dso_local i32 @strncmp(i8*, i8*, i64) #7

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32, i8**) #4 !dbg !2 {
  %3 = load i32, i32* @x.3
  %4 = load i32, i32* @y.4
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  store i8** %1, i8*** @inVal1
  store i32 %0, i32* @inVal0
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i8**, align 8
  %14 = alloca i32, align 4
  %15 = alloca %struct.utsname, align 1
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  store i32 0, i32* %11, align 4
  store i32 %0, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !329, metadata !DIExpression()), !dbg !330
  store i8** %1, i8*** %13, align 8
  call void @llvm.dbg.declare(metadata i8*** %13, metadata !331, metadata !DIExpression()), !dbg !332
  call void @llvm.dbg.declare(metadata i32* %14, metadata !333, metadata !DIExpression()), !dbg !334
  store i32 0, i32* %14, align 4, !dbg !334
  %18 = load i8**, i8*** %13, align 8, !dbg !335
  %19 = getelementptr inbounds i8*, i8** %18, i64 0, !dbg !335
  %20 = load i8*, i8** %19, align 8, !dbg !335
  call void @set_program_name(i8* %20), !dbg !336
  %21 = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.9, i64 0, i64 0)) #10, !dbg !337
  %22 = call i8* @bindtextdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.11, i64 0, i64 0)) #10, !dbg !338
  %23 = call i8* @textdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10, i64 0, i64 0)) #10, !dbg !339
  %24 = call i32 @atexit(void ()* @close_stdout) #10, !dbg !340
  %25 = load i32, i32* %12, align 4, !dbg !341
  %26 = load i8**, i8*** %13, align 8, !dbg !342
  %27 = call i32 @decode_switches(i32 %25, i8** %26), !dbg !343
  store i32 %27, i32* %14, align 4, !dbg !344
  %28 = load i32, i32* %14, align 4, !dbg !345
  %29 = load i32, i32* @x.3
  %30 = load i32, i32* @y.4
  %31 = sub i32 %29, 1
  %32 = mul i32 %29, %31
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %34, %35
  br i1 %36, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %37, !dbg !347

37:                                               ; preds = %originalBBpart2
  %38 = load i32, i32* @x.3
  %39 = load i32, i32* @y.4
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %37, %originalBB1alteredBB
  %collatzVar = alloca i32
  %46 = load i32, i32* @x.3
  %47 = load i32, i32* @y.4
  %48 = sub i32 %46, 1
  %49 = mul i32 %46, %48
  %50 = urem i32 %49, 2
  %51 = icmp eq i32 %50, 0
  %52 = icmp slt i32 %47, 10
  %53 = or i1 %51, %52
  br i1 %53, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %54

54:                                               ; preds = %originalBBpart24
  %55 = load i32, i32* @x.3
  %56 = load i32, i32* @y.4
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %54, %originalBB6alteredBB
  %63 = load i32, i32* @inVal0
  %64 = icmp sgt i32 %63, 1
  %65 = load i32, i32* @x.3
  %66 = load i32, i32* @y.4
  %67 = sub i32 %65, 1
  %68 = mul i32 %65, %67
  %69 = urem i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %70, %71
  br i1 %72, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %64, label %90, label %73

73:                                               ; preds = %originalBBpart28
  %74 = load i32, i32* @x.3
  %75 = load i32, i32* @y.4
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %73, %originalBB10alteredBB
  store i32 49, i32* %collatzVar
  %82 = load i32, i32* @x.3
  %83 = load i32, i32* @y.4
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %90

90:                                               ; preds = %originalBBpart212, %originalBBpart28
  %91 = load i32, i32* @x.3
  %92 = load i32, i32* @y.4
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %90, %originalBB14alteredBB
  %99 = load i8**, i8*** @inVal1
  %100 = getelementptr inbounds i8*, i8** %99, i64 1
  %101 = load i8*, i8** %100
  %controle = call i32 @controle(i8* %101, i32 0)
  store i32 %controle, i32* %collatzVar
  %102 = load i32, i32* @x.3
  %103 = load i32, i32* @y.4
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %110

110:                                              ; preds = %originalBBpart246, %originalBBpart234, %originalBBpart216
  %111 = load i32, i32* %collatzVar
  %112 = icmp sgt i32 %111, 1
  br i1 %112, label %113, label %197

113:                                              ; preds = %110
  %114 = load i32, i32* @x.3
  %115 = load i32, i32* @y.4
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %113, %originalBB18alteredBB
  %122 = load i32, i32* %collatzVar
  %123 = srem i32 %122, 2
  %124 = icmp eq i32 %123, 0
  %125 = load i32, i32* @x.3
  %126 = load i32, i32* @y.4
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBBpart228, label %originalBB18alteredBB

originalBBpart228:                                ; preds = %originalBB18
  br i1 %124, label %133, label %136

133:                                              ; preds = %originalBBpart228
  %134 = load i32, i32* %collatzVar
  %135 = sdiv i32 %134, 2
  store i32 %135, i32* %collatzVar
  br label %140

136:                                              ; preds = %originalBBpart228
  %137 = load i32, i32* %collatzVar
  %138 = mul i32 %137, 3
  %139 = add i32 %138, 1
  store i32 %139, i32* %collatzVar
  br label %140

140:                                              ; preds = %136, %133
  %141 = load i32, i32* @x.3
  %142 = load i32, i32* @y.4
  %143 = sub i32 %141, 1
  %144 = mul i32 %141, %143
  %145 = urem i32 %144, 2
  %146 = icmp eq i32 %145, 0
  %147 = icmp slt i32 %142, 10
  %148 = or i1 %146, %147
  br i1 %148, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %140, %originalBB30alteredBB
  %149 = load i32, i32* %collatzVar
  %150 = sub i32 %28, %149
  %151 = icmp sgt i32 %150, -2
  %152 = load i32, i32* @x.3
  %153 = load i32, i32* @y.4
  %154 = sub i32 %152, 1
  %155 = mul i32 %152, %154
  %156 = urem i32 %155, 2
  %157 = icmp eq i32 %156, 0
  %158 = icmp slt i32 %153, 10
  %159 = or i1 %157, %158
  br i1 %159, label %originalBBpart234, label %originalBB30alteredBB

originalBBpart234:                                ; preds = %originalBB30
  br i1 %151, label %160, label %110

160:                                              ; preds = %originalBBpart234
  %161 = load i32, i32* @x.3
  %162 = load i32, i32* @y.4
  %163 = sub i32 %161, 1
  %164 = mul i32 %161, %163
  %165 = urem i32 %164, 2
  %166 = icmp eq i32 %165, 0
  %167 = icmp slt i32 %162, 10
  %168 = or i1 %166, %167
  br i1 %168, label %originalBB36, label %originalBB36alteredBB

originalBB36:                                     ; preds = %160, %originalBB36alteredBB
  %169 = load i32, i32* %collatzVar
  %170 = add i32 %28, %169
  %171 = icmp slt i32 %170, 2
  %172 = load i32, i32* @x.3
  %173 = load i32, i32* @y.4
  %174 = sub i32 %172, 1
  %175 = mul i32 %172, %174
  %176 = urem i32 %175, 2
  %177 = icmp eq i32 %176, 0
  %178 = icmp slt i32 %173, 10
  %179 = or i1 %177, %178
  br i1 %179, label %originalBBpart246, label %originalBB36alteredBB

originalBBpart246:                                ; preds = %originalBB36
  br i1 %171, label %180, label %110

180:                                              ; preds = %originalBBpart246
  %181 = load i32, i32* @x.3
  %182 = load i32, i32* @y.4
  %183 = sub i32 %181, 1
  %184 = mul i32 %181, %183
  %185 = urem i32 %184, 2
  %186 = icmp eq i32 %185, 0
  %187 = icmp slt i32 %182, 10
  %188 = or i1 %186, %187
  br i1 %188, label %originalBB48, label %originalBB48alteredBB

originalBB48:                                     ; preds = %180, %originalBB48alteredBB
  store i32 1, i32* %14, align 4, !dbg !348
  %189 = load i32, i32* @x.3
  %190 = load i32, i32* @y.4
  %191 = sub i32 %189, 1
  %192 = mul i32 %189, %191
  %193 = urem i32 %192, 2
  %194 = icmp eq i32 %193, 0
  %195 = icmp slt i32 %190, 10
  %196 = or i1 %194, %195
  br i1 %196, label %originalBBpart250, label %originalBB48alteredBB

originalBBpart250:                                ; preds = %originalBB48
  br label %197, !dbg !349

197:                                              ; preds = %originalBBpart250, %110
  %198 = load i32, i32* @x.3
  %199 = load i32, i32* @y.4
  %200 = sub i32 %198, 1
  %201 = mul i32 %198, %200
  %202 = urem i32 %201, 2
  %203 = icmp eq i32 %202, 0
  %204 = icmp slt i32 %199, 10
  %205 = or i1 %203, %204
  br i1 %205, label %originalBB52, label %originalBB52alteredBB

originalBB52:                                     ; preds = %197, %originalBB52alteredBB
  %206 = load i32, i32* %14, align 4, !dbg !350
  %207 = and i32 %206, 31, !dbg !352
  %208 = icmp ne i32 %207, 0, !dbg !352
  %209 = load i32, i32* @x.3
  %210 = load i32, i32* @y.4
  %211 = sub i32 %209, 1
  %212 = mul i32 %209, %211
  %213 = urem i32 %212, 2
  %214 = icmp eq i32 %213, 0
  %215 = icmp slt i32 %210, 10
  %216 = or i1 %214, %215
  br i1 %216, label %originalBBpart260, label %originalBB52alteredBB

originalBBpart260:                                ; preds = %originalBB52
  br i1 %208, label %217, label %546, !dbg !353

217:                                              ; preds = %originalBBpart260
  call void @llvm.dbg.declare(metadata %struct.utsname* %15, metadata !354, metadata !DIExpression()), !dbg !368
  %218 = call i32 @uname(%struct.utsname* %15) #10, !dbg !369
  br label %219, !dbg !371

219:                                              ; preds = %217
  %220 = load i32, i32* @x.3
  %221 = load i32, i32* @y.4
  %222 = sub i32 %220, 1
  %223 = mul i32 %220, %222
  %224 = urem i32 %223, 2
  %225 = icmp eq i32 %224, 0
  %226 = icmp slt i32 %221, 10
  %227 = or i1 %225, %226
  br i1 %227, label %originalBB62, label %originalBB62alteredBB

originalBB62:                                     ; preds = %219, %originalBB62alteredBB
  %collatzVar5 = alloca i32
  %228 = load i32, i32* @x.3
  %229 = load i32, i32* @y.4
  %230 = sub i32 %228, 1
  %231 = mul i32 %228, %230
  %232 = urem i32 %231, 2
  %233 = icmp eq i32 %232, 0
  %234 = icmp slt i32 %229, 10
  %235 = or i1 %233, %234
  br i1 %235, label %originalBBpart264, label %originalBB62alteredBB

originalBBpart264:                                ; preds = %originalBB62
  br label %236

236:                                              ; preds = %originalBBpart264
  %237 = load i32, i32* @x.3
  %238 = load i32, i32* @y.4
  %239 = sub i32 %237, 1
  %240 = mul i32 %237, %239
  %241 = urem i32 %240, 2
  %242 = icmp eq i32 %241, 0
  %243 = icmp slt i32 %238, 10
  %244 = or i1 %242, %243
  br i1 %244, label %originalBB66, label %originalBB66alteredBB

originalBB66:                                     ; preds = %236, %originalBB66alteredBB
  %245 = load i32, i32* @inVal0
  %246 = icmp sgt i32 %245, 1
  %247 = load i32, i32* @x.3
  %248 = load i32, i32* @y.4
  %249 = sub i32 %247, 1
  %250 = mul i32 %247, %249
  %251 = urem i32 %250, 2
  %252 = icmp eq i32 %251, 0
  %253 = icmp slt i32 %248, 10
  %254 = or i1 %252, %253
  br i1 %254, label %originalBBpart268, label %originalBB66alteredBB

originalBBpart268:                                ; preds = %originalBB66
  br i1 %246, label %272, label %255

255:                                              ; preds = %originalBBpart268
  %256 = load i32, i32* @x.3
  %257 = load i32, i32* @y.4
  %258 = sub i32 %256, 1
  %259 = mul i32 %256, %258
  %260 = urem i32 %259, 2
  %261 = icmp eq i32 %260, 0
  %262 = icmp slt i32 %257, 10
  %263 = or i1 %261, %262
  br i1 %263, label %originalBB70, label %originalBB70alteredBB

originalBB70:                                     ; preds = %255, %originalBB70alteredBB
  store i32 28, i32* %collatzVar5
  %264 = load i32, i32* @x.3
  %265 = load i32, i32* @y.4
  %266 = sub i32 %264, 1
  %267 = mul i32 %264, %266
  %268 = urem i32 %267, 2
  %269 = icmp eq i32 %268, 0
  %270 = icmp slt i32 %265, 10
  %271 = or i1 %269, %270
  br i1 %271, label %originalBBpart272, label %originalBB70alteredBB

originalBBpart272:                                ; preds = %originalBB70
  br label %272

272:                                              ; preds = %originalBBpart272, %originalBBpart268
  %273 = load i32, i32* @x.3
  %274 = load i32, i32* @y.4
  %275 = sub i32 %273, 1
  %276 = mul i32 %273, %275
  %277 = urem i32 %276, 2
  %278 = icmp eq i32 %277, 0
  %279 = icmp slt i32 %274, 10
  %280 = or i1 %278, %279
  br i1 %280, label %originalBB74, label %originalBB74alteredBB

originalBB74:                                     ; preds = %272, %originalBB74alteredBB
  %281 = load i8**, i8*** @inVal1
  %282 = getelementptr inbounds i8*, i8** %281, i64 1
  %283 = load i8*, i8** %282
  %controle6 = call i32 @controle(i8* %283, i32 -1)
  store i32 %controle6, i32* %collatzVar5
  %284 = load i32, i32* @x.3
  %285 = load i32, i32* @y.4
  %286 = sub i32 %284, 1
  %287 = mul i32 %284, %286
  %288 = urem i32 %287, 2
  %289 = icmp eq i32 %288, 0
  %290 = icmp slt i32 %285, 10
  %291 = or i1 %289, %290
  br i1 %291, label %originalBBpart276, label %originalBB74alteredBB

originalBBpart276:                                ; preds = %originalBB74
  br label %292

292:                                              ; preds = %358, %originalBBpart2118, %originalBBpart276
  %293 = load i32, i32* @x.3
  %294 = load i32, i32* @y.4
  %295 = sub i32 %293, 1
  %296 = mul i32 %293, %295
  %297 = urem i32 %296, 2
  %298 = icmp eq i32 %297, 0
  %299 = icmp slt i32 %294, 10
  %300 = or i1 %298, %299
  br i1 %300, label %originalBB78, label %originalBB78alteredBB

originalBB78:                                     ; preds = %292, %originalBB78alteredBB
  %301 = load i32, i32* %collatzVar5
  %302 = icmp sgt i32 %301, 1
  %303 = load i32, i32* @x.3
  %304 = load i32, i32* @y.4
  %305 = sub i32 %303, 1
  %306 = mul i32 %303, %305
  %307 = urem i32 %306, 2
  %308 = icmp eq i32 %307, 0
  %309 = icmp slt i32 %304, 10
  %310 = or i1 %308, %309
  br i1 %310, label %originalBBpart280, label %originalBB78alteredBB

originalBBpart280:                                ; preds = %originalBB78
  br i1 %302, label %311, label %382

311:                                              ; preds = %originalBBpart280
  %312 = load i32, i32* %collatzVar5
  %313 = srem i32 %312, 2
  %314 = icmp eq i32 %313, 0
  br i1 %314, label %315, label %318

315:                                              ; preds = %311
  %316 = load i32, i32* %collatzVar5
  %317 = sdiv i32 %316, 2
  store i32 %317, i32* %collatzVar5
  br label %338

318:                                              ; preds = %311
  %319 = load i32, i32* @x.3
  %320 = load i32, i32* @y.4
  %321 = sub i32 %319, 1
  %322 = mul i32 %319, %321
  %323 = urem i32 %322, 2
  %324 = icmp eq i32 %323, 0
  %325 = icmp slt i32 %320, 10
  %326 = or i1 %324, %325
  br i1 %326, label %originalBB82, label %originalBB82alteredBB

originalBB82:                                     ; preds = %318, %originalBB82alteredBB
  %327 = load i32, i32* %collatzVar5
  %328 = mul i32 %327, 3
  %329 = add i32 %328, 1
  store i32 %329, i32* %collatzVar5
  %330 = load i32, i32* @x.3
  %331 = load i32, i32* @y.4
  %332 = sub i32 %330, 1
  %333 = mul i32 %330, %332
  %334 = urem i32 %333, 2
  %335 = icmp eq i32 %334, 0
  %336 = icmp slt i32 %331, 10
  %337 = or i1 %335, %336
  br i1 %337, label %originalBBpart2102, label %originalBB82alteredBB

originalBBpart2102:                               ; preds = %originalBB82
  br label %338

338:                                              ; preds = %originalBBpart2102, %315
  %339 = load i32, i32* @x.3
  %340 = load i32, i32* @y.4
  %341 = sub i32 %339, 1
  %342 = mul i32 %339, %341
  %343 = urem i32 %342, 2
  %344 = icmp eq i32 %343, 0
  %345 = icmp slt i32 %340, 10
  %346 = or i1 %344, %345
  br i1 %346, label %originalBB104, label %originalBB104alteredBB

originalBB104:                                    ; preds = %338, %originalBB104alteredBB
  %347 = load i32, i32* %collatzVar5
  %348 = sub i32 %218, %347
  %349 = icmp sgt i32 %348, -3
  %350 = load i32, i32* @x.3
  %351 = load i32, i32* @y.4
  %352 = sub i32 %350, 1
  %353 = mul i32 %350, %352
  %354 = urem i32 %353, 2
  %355 = icmp eq i32 %354, 0
  %356 = icmp slt i32 %351, 10
  %357 = or i1 %355, %356
  br i1 %357, label %originalBBpart2118, label %originalBB104alteredBB

originalBBpart2118:                               ; preds = %originalBB104
  br i1 %349, label %358, label %292

358:                                              ; preds = %originalBBpart2118
  %359 = load i32, i32* %collatzVar5
  %360 = add i32 %218, %359
  %361 = icmp slt i32 %360, 1
  br i1 %361, label %362, label %292

362:                                              ; preds = %358
  %363 = load i32, i32* @x.3
  %364 = load i32, i32* @y.4
  %365 = sub i32 %363, 1
  %366 = mul i32 %363, %365
  %367 = urem i32 %366, 2
  %368 = icmp eq i32 %367, 0
  %369 = icmp slt i32 %364, 10
  %370 = or i1 %368, %369
  br i1 %370, label %originalBB120, label %originalBB120alteredBB

originalBB120:                                    ; preds = %362, %originalBB120alteredBB
  %371 = call i32* @__errno_location() #14, !dbg !372
  %372 = load i32, i32* %371, align 4, !dbg !372
  %373 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0)) #10, !dbg !372
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %372, i8* %373), !dbg !372
  %374 = load i32, i32* @x.3
  %375 = load i32, i32* @y.4
  %376 = sub i32 %374, 1
  %377 = mul i32 %374, %376
  %378 = urem i32 %377, 2
  %379 = icmp eq i32 %378, 0
  %380 = icmp slt i32 %375, 10
  %381 = or i1 %379, %380
  br i1 %381, label %originalBBpart2122, label %originalBB120alteredBB

originalBBpart2122:                               ; preds = %originalBB120
  unreachable, !dbg !372

382:                                              ; preds = %originalBBpart280
  %383 = load i32, i32* %14, align 4, !dbg !373
  %384 = and i32 %383, 1, !dbg !375
  %385 = icmp ne i32 %384, 0, !dbg !375
  br i1 %385, label %386, label %389, !dbg !376

386:                                              ; preds = %382
  %387 = getelementptr inbounds %struct.utsname, %struct.utsname* %15, i32 0, i32 0, !dbg !377
  %388 = getelementptr inbounds [65 x i8], [65 x i8]* %387, i64 0, i64 0, !dbg !378
  call void @print_element(i8* %388), !dbg !379
  br label %389, !dbg !379

389:                                              ; preds = %386, %382
  %390 = load i32, i32* @x.3
  %391 = load i32, i32* @y.4
  %392 = sub i32 %390, 1
  %393 = mul i32 %390, %392
  %394 = urem i32 %393, 2
  %395 = icmp eq i32 %394, 0
  %396 = icmp slt i32 %391, 10
  %397 = or i1 %395, %396
  br i1 %397, label %originalBB124, label %originalBB124alteredBB

originalBB124:                                    ; preds = %389, %originalBB124alteredBB
  %398 = load i32, i32* %14, align 4, !dbg !380
  %399 = and i32 %398, 2, !dbg !382
  %400 = icmp ne i32 %399, 0, !dbg !382
  %401 = load i32, i32* @x.3
  %402 = load i32, i32* @y.4
  %403 = sub i32 %401, 1
  %404 = mul i32 %401, %403
  %405 = urem i32 %404, 2
  %406 = icmp eq i32 %405, 0
  %407 = icmp slt i32 %402, 10
  %408 = or i1 %406, %407
  br i1 %408, label %originalBBpart2134, label %originalBB124alteredBB

originalBBpart2134:                               ; preds = %originalBB124
  br i1 %400, label %409, label %428, !dbg !383

409:                                              ; preds = %originalBBpart2134
  %410 = load i32, i32* @x.3
  %411 = load i32, i32* @y.4
  %412 = sub i32 %410, 1
  %413 = mul i32 %410, %412
  %414 = urem i32 %413, 2
  %415 = icmp eq i32 %414, 0
  %416 = icmp slt i32 %411, 10
  %417 = or i1 %415, %416
  br i1 %417, label %originalBB136, label %originalBB136alteredBB

originalBB136:                                    ; preds = %409, %originalBB136alteredBB
  %418 = getelementptr inbounds %struct.utsname, %struct.utsname* %15, i32 0, i32 1, !dbg !384
  %419 = getelementptr inbounds [65 x i8], [65 x i8]* %418, i64 0, i64 0, !dbg !385
  call void @print_element(i8* %419), !dbg !386
  %420 = load i32, i32* @x.3
  %421 = load i32, i32* @y.4
  %422 = sub i32 %420, 1
  %423 = mul i32 %420, %422
  %424 = urem i32 %423, 2
  %425 = icmp eq i32 %424, 0
  %426 = icmp slt i32 %421, 10
  %427 = or i1 %425, %426
  br i1 %427, label %originalBBpart2138, label %originalBB136alteredBB

originalBBpart2138:                               ; preds = %originalBB136
  br label %428, !dbg !386

428:                                              ; preds = %originalBBpart2138, %originalBBpart2134
  %429 = load i32, i32* @x.3
  %430 = load i32, i32* @y.4
  %431 = sub i32 %429, 1
  %432 = mul i32 %429, %431
  %433 = urem i32 %432, 2
  %434 = icmp eq i32 %433, 0
  %435 = icmp slt i32 %430, 10
  %436 = or i1 %434, %435
  br i1 %436, label %originalBB140, label %originalBB140alteredBB

originalBB140:                                    ; preds = %428, %originalBB140alteredBB
  %437 = load i32, i32* %14, align 4, !dbg !387
  %438 = and i32 %437, 4, !dbg !389
  %439 = icmp ne i32 %438, 0, !dbg !389
  %440 = load i32, i32* @x.3
  %441 = load i32, i32* @y.4
  %442 = sub i32 %440, 1
  %443 = mul i32 %440, %442
  %444 = urem i32 %443, 2
  %445 = icmp eq i32 %444, 0
  %446 = icmp slt i32 %441, 10
  %447 = or i1 %445, %446
  br i1 %447, label %originalBBpart2145, label %originalBB140alteredBB

originalBBpart2145:                               ; preds = %originalBB140
  br i1 %439, label %448, label %467, !dbg !390

448:                                              ; preds = %originalBBpart2145
  %449 = load i32, i32* @x.3
  %450 = load i32, i32* @y.4
  %451 = sub i32 %449, 1
  %452 = mul i32 %449, %451
  %453 = urem i32 %452, 2
  %454 = icmp eq i32 %453, 0
  %455 = icmp slt i32 %450, 10
  %456 = or i1 %454, %455
  br i1 %456, label %originalBB147, label %originalBB147alteredBB

originalBB147:                                    ; preds = %448, %originalBB147alteredBB
  %457 = getelementptr inbounds %struct.utsname, %struct.utsname* %15, i32 0, i32 2, !dbg !391
  %458 = getelementptr inbounds [65 x i8], [65 x i8]* %457, i64 0, i64 0, !dbg !392
  call void @print_element(i8* %458), !dbg !393
  %459 = load i32, i32* @x.3
  %460 = load i32, i32* @y.4
  %461 = sub i32 %459, 1
  %462 = mul i32 %459, %461
  %463 = urem i32 %462, 2
  %464 = icmp eq i32 %463, 0
  %465 = icmp slt i32 %460, 10
  %466 = or i1 %464, %465
  br i1 %466, label %originalBBpart2149, label %originalBB147alteredBB

originalBBpart2149:                               ; preds = %originalBB147
  br label %467, !dbg !393

467:                                              ; preds = %originalBBpart2149, %originalBBpart2145
  %468 = load i32, i32* @x.3
  %469 = load i32, i32* @y.4
  %470 = sub i32 %468, 1
  %471 = mul i32 %468, %470
  %472 = urem i32 %471, 2
  %473 = icmp eq i32 %472, 0
  %474 = icmp slt i32 %469, 10
  %475 = or i1 %473, %474
  br i1 %475, label %originalBB151, label %originalBB151alteredBB

originalBB151:                                    ; preds = %467, %originalBB151alteredBB
  %476 = load i32, i32* %14, align 4, !dbg !394
  %477 = and i32 %476, 8, !dbg !396
  %478 = icmp ne i32 %477, 0, !dbg !396
  %479 = load i32, i32* @x.3
  %480 = load i32, i32* @y.4
  %481 = sub i32 %479, 1
  %482 = mul i32 %479, %481
  %483 = urem i32 %482, 2
  %484 = icmp eq i32 %483, 0
  %485 = icmp slt i32 %480, 10
  %486 = or i1 %484, %485
  br i1 %486, label %originalBBpart2161, label %originalBB151alteredBB

originalBBpart2161:                               ; preds = %originalBB151
  br i1 %478, label %487, label %506, !dbg !397

487:                                              ; preds = %originalBBpart2161
  %488 = load i32, i32* @x.3
  %489 = load i32, i32* @y.4
  %490 = sub i32 %488, 1
  %491 = mul i32 %488, %490
  %492 = urem i32 %491, 2
  %493 = icmp eq i32 %492, 0
  %494 = icmp slt i32 %489, 10
  %495 = or i1 %493, %494
  br i1 %495, label %originalBB163, label %originalBB163alteredBB

originalBB163:                                    ; preds = %487, %originalBB163alteredBB
  %496 = getelementptr inbounds %struct.utsname, %struct.utsname* %15, i32 0, i32 3, !dbg !398
  %497 = getelementptr inbounds [65 x i8], [65 x i8]* %496, i64 0, i64 0, !dbg !399
  call void @print_element(i8* %497), !dbg !400
  %498 = load i32, i32* @x.3
  %499 = load i32, i32* @y.4
  %500 = sub i32 %498, 1
  %501 = mul i32 %498, %500
  %502 = urem i32 %501, 2
  %503 = icmp eq i32 %502, 0
  %504 = icmp slt i32 %499, 10
  %505 = or i1 %503, %504
  br i1 %505, label %originalBBpart2165, label %originalBB163alteredBB

originalBBpart2165:                               ; preds = %originalBB163
  br label %506, !dbg !400

506:                                              ; preds = %originalBBpart2165, %originalBBpart2161
  %507 = load i32, i32* %14, align 4, !dbg !401
  %508 = and i32 %507, 16, !dbg !403
  %509 = icmp ne i32 %508, 0, !dbg !403
  br i1 %509, label %510, label %529, !dbg !404

510:                                              ; preds = %506
  %511 = load i32, i32* @x.3
  %512 = load i32, i32* @y.4
  %513 = sub i32 %511, 1
  %514 = mul i32 %511, %513
  %515 = urem i32 %514, 2
  %516 = icmp eq i32 %515, 0
  %517 = icmp slt i32 %512, 10
  %518 = or i1 %516, %517
  br i1 %518, label %originalBB167, label %originalBB167alteredBB

originalBB167:                                    ; preds = %510, %originalBB167alteredBB
  %519 = getelementptr inbounds %struct.utsname, %struct.utsname* %15, i32 0, i32 4, !dbg !405
  %520 = getelementptr inbounds [65 x i8], [65 x i8]* %519, i64 0, i64 0, !dbg !406
  call void @print_element(i8* %520), !dbg !407
  %521 = load i32, i32* @x.3
  %522 = load i32, i32* @y.4
  %523 = sub i32 %521, 1
  %524 = mul i32 %521, %523
  %525 = urem i32 %524, 2
  %526 = icmp eq i32 %525, 0
  %527 = icmp slt i32 %522, 10
  %528 = or i1 %526, %527
  br i1 %528, label %originalBBpart2169, label %originalBB167alteredBB

originalBBpart2169:                               ; preds = %originalBB167
  br label %529, !dbg !407

529:                                              ; preds = %originalBBpart2169, %506
  %530 = load i32, i32* @x.3
  %531 = load i32, i32* @y.4
  %532 = sub i32 %530, 1
  %533 = mul i32 %530, %532
  %534 = urem i32 %533, 2
  %535 = icmp eq i32 %534, 0
  %536 = icmp slt i32 %531, 10
  %537 = or i1 %535, %536
  br i1 %537, label %originalBB171, label %originalBB171alteredBB

originalBB171:                                    ; preds = %529, %originalBB171alteredBB
  %538 = load i32, i32* @x.3
  %539 = load i32, i32* @y.4
  %540 = sub i32 %538, 1
  %541 = mul i32 %538, %540
  %542 = urem i32 %541, 2
  %543 = icmp eq i32 %542, 0
  %544 = icmp slt i32 %539, 10
  %545 = or i1 %543, %544
  br i1 %545, label %originalBBpart2173, label %originalBB171alteredBB

originalBBpart2173:                               ; preds = %originalBB171
  br label %546, !dbg !408

546:                                              ; preds = %originalBBpart2173, %originalBBpart260
  %547 = load i32, i32* %14, align 4, !dbg !409
  %548 = and i32 %547, 32, !dbg !411
  %549 = icmp ne i32 %548, 0, !dbg !411
  br i1 %549, label %550, label %717, !dbg !412

550:                                              ; preds = %546
  call void @llvm.dbg.declare(metadata i8** %16, metadata !413, metadata !DIExpression()), !dbg !415
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @main.unknown, i64 0, i64 0), i8** %16, align 8, !dbg !415
  %551 = load i32, i32* %14, align 4, !dbg !416
  br label %552, !dbg !418

552:                                              ; preds = %550
  %553 = load i32, i32* @x.3
  %554 = load i32, i32* @y.4
  %555 = sub i32 %553, 1
  %556 = mul i32 %553, %555
  %557 = urem i32 %556, 2
  %558 = icmp eq i32 %557, 0
  %559 = icmp slt i32 %554, 10
  %560 = or i1 %558, %559
  br i1 %560, label %originalBB175, label %originalBB175alteredBB

originalBB175:                                    ; preds = %552, %originalBB175alteredBB
  %collatzVar1 = alloca i32
  %561 = load i32, i32* @x.3
  %562 = load i32, i32* @y.4
  %563 = sub i32 %561, 1
  %564 = mul i32 %561, %563
  %565 = urem i32 %564, 2
  %566 = icmp eq i32 %565, 0
  %567 = icmp slt i32 %562, 10
  %568 = or i1 %566, %567
  br i1 %568, label %originalBBpart2177, label %originalBB175alteredBB

originalBBpart2177:                               ; preds = %originalBB175
  br label %569

569:                                              ; preds = %originalBBpart2177
  %570 = load i32, i32* @inVal0
  %571 = icmp sgt i32 %570, 1
  br i1 %571, label %573, label %572

572:                                              ; preds = %569
  store i32 59, i32* %collatzVar1
  br label %573

573:                                              ; preds = %572, %569
  %574 = load i8**, i8*** @inVal1
  %575 = getelementptr inbounds i8*, i8** %574, i64 1
  %576 = load i8*, i8** %575
  %controle2 = call i32 @controle(i8* %576, i32 -1)
  store i32 %controle2, i32* %collatzVar1
  br label %577

577:                                              ; preds = %originalBBpart2226, %originalBBpart2216, %573
  %578 = load i32, i32* @x.3
  %579 = load i32, i32* @y.4
  %580 = sub i32 %578, 1
  %581 = mul i32 %578, %580
  %582 = urem i32 %581, 2
  %583 = icmp eq i32 %582, 0
  %584 = icmp slt i32 %579, 10
  %585 = or i1 %583, %584
  br i1 %585, label %originalBB179, label %originalBB179alteredBB

originalBB179:                                    ; preds = %577, %originalBB179alteredBB
  %586 = load i32, i32* %collatzVar1
  %587 = icmp sgt i32 %586, 1
  %588 = load i32, i32* @x.3
  %589 = load i32, i32* @y.4
  %590 = sub i32 %588, 1
  %591 = mul i32 %588, %590
  %592 = urem i32 %591, 2
  %593 = icmp eq i32 %592, 0
  %594 = icmp slt i32 %589, 10
  %595 = or i1 %593, %594
  br i1 %595, label %originalBBpart2181, label %originalBB179alteredBB

originalBBpart2181:                               ; preds = %originalBB179
  br i1 %587, label %596, label %698

596:                                              ; preds = %originalBBpart2181
  %597 = load i32, i32* %collatzVar1
  %598 = srem i32 %597, 2
  %599 = icmp eq i32 %598, 0
  br i1 %599, label %600, label %619

600:                                              ; preds = %596
  %601 = load i32, i32* @x.3
  %602 = load i32, i32* @y.4
  %603 = sub i32 %601, 1
  %604 = mul i32 %601, %603
  %605 = urem i32 %604, 2
  %606 = icmp eq i32 %605, 0
  %607 = icmp slt i32 %602, 10
  %608 = or i1 %606, %607
  br i1 %608, label %originalBB183, label %originalBB183alteredBB

originalBB183:                                    ; preds = %600, %originalBB183alteredBB
  %609 = load i32, i32* %collatzVar1
  %610 = sdiv i32 %609, 2
  store i32 %610, i32* %collatzVar1
  %611 = load i32, i32* @x.3
  %612 = load i32, i32* @y.4
  %613 = sub i32 %611, 1
  %614 = mul i32 %611, %613
  %615 = urem i32 %614, 2
  %616 = icmp eq i32 %615, 0
  %617 = icmp slt i32 %612, 10
  %618 = or i1 %616, %617
  br i1 %618, label %originalBBpart2190, label %originalBB183alteredBB

originalBBpart2190:                               ; preds = %originalBB183
  br label %639

619:                                              ; preds = %596
  %620 = load i32, i32* @x.3
  %621 = load i32, i32* @y.4
  %622 = sub i32 %620, 1
  %623 = mul i32 %620, %622
  %624 = urem i32 %623, 2
  %625 = icmp eq i32 %624, 0
  %626 = icmp slt i32 %621, 10
  %627 = or i1 %625, %626
  br i1 %627, label %originalBB192, label %originalBB192alteredBB

originalBB192:                                    ; preds = %619, %originalBB192alteredBB
  %628 = load i32, i32* %collatzVar1
  %629 = mul i32 %628, 3
  %630 = add i32 %629, 1
  store i32 %630, i32* %collatzVar1
  %631 = load i32, i32* @x.3
  %632 = load i32, i32* @y.4
  %633 = sub i32 %631, 1
  %634 = mul i32 %631, %633
  %635 = urem i32 %634, 2
  %636 = icmp eq i32 %635, 0
  %637 = icmp slt i32 %632, 10
  %638 = or i1 %636, %637
  br i1 %638, label %originalBBpart2209, label %originalBB192alteredBB

originalBBpart2209:                               ; preds = %originalBB192
  br label %639

639:                                              ; preds = %originalBBpart2209, %originalBBpart2190
  %640 = load i32, i32* @x.3
  %641 = load i32, i32* @y.4
  %642 = sub i32 %640, 1
  %643 = mul i32 %640, %642
  %644 = urem i32 %643, 2
  %645 = icmp eq i32 %644, 0
  %646 = icmp slt i32 %641, 10
  %647 = or i1 %645, %646
  br i1 %647, label %originalBB211, label %originalBB211alteredBB

originalBB211:                                    ; preds = %639, %originalBB211alteredBB
  %648 = load i32, i32* %collatzVar1
  %649 = sub i32 %551, %648
  %650 = icmp sgt i32 %649, -3
  %651 = load i32, i32* @x.3
  %652 = load i32, i32* @y.4
  %653 = sub i32 %651, 1
  %654 = mul i32 %651, %653
  %655 = urem i32 %654, 2
  %656 = icmp eq i32 %655, 0
  %657 = icmp slt i32 %652, 10
  %658 = or i1 %656, %657
  br i1 %658, label %originalBBpart2216, label %originalBB211alteredBB

originalBBpart2216:                               ; preds = %originalBB211
  br i1 %650, label %659, label %577

659:                                              ; preds = %originalBBpart2216
  %660 = load i32, i32* @x.3
  %661 = load i32, i32* @y.4
  %662 = sub i32 %660, 1
  %663 = mul i32 %660, %662
  %664 = urem i32 %663, 2
  %665 = icmp eq i32 %664, 0
  %666 = icmp slt i32 %661, 10
  %667 = or i1 %665, %666
  br i1 %667, label %originalBB218, label %originalBB218alteredBB

originalBB218:                                    ; preds = %659, %originalBB218alteredBB
  %668 = load i32, i32* %collatzVar1
  %669 = add i32 %551, %668
  %670 = icmp slt i32 %669, 1
  %671 = load i32, i32* @x.3
  %672 = load i32, i32* @y.4
  %673 = sub i32 %671, 1
  %674 = mul i32 %671, %673
  %675 = urem i32 %674, 2
  %676 = icmp eq i32 %675, 0
  %677 = icmp slt i32 %672, 10
  %678 = or i1 %676, %677
  br i1 %678, label %originalBBpart2226, label %originalBB218alteredBB

originalBBpart2226:                               ; preds = %originalBB218
  br i1 %670, label %679, label %577

679:                                              ; preds = %originalBBpart2226
  %680 = load i32, i32* @x.3
  %681 = load i32, i32* @y.4
  %682 = sub i32 %680, 1
  %683 = mul i32 %680, %682
  %684 = urem i32 %683, 2
  %685 = icmp eq i32 %684, 0
  %686 = icmp slt i32 %681, 10
  %687 = or i1 %685, %686
  br i1 %687, label %originalBB228, label %originalBB228alteredBB

originalBB228:                                    ; preds = %679, %originalBB228alteredBB
  %688 = load i8*, i8** %16, align 8, !dbg !419
  %689 = icmp eq i8* %688, getelementptr inbounds ([8 x i8], [8 x i8]* @main.unknown, i64 0, i64 0), !dbg !420
  %690 = load i32, i32* @x.3
  %691 = load i32, i32* @y.4
  %692 = sub i32 %690, 1
  %693 = mul i32 %690, %692
  %694 = urem i32 %693, 2
  %695 = icmp eq i32 %694, 0
  %696 = icmp slt i32 %691, 10
  %697 = or i1 %695, %696
  br i1 %697, label %originalBBpart2231, label %originalBB228alteredBB

originalBBpart2231:                               ; preds = %originalBB228
  br i1 %689, label %716, label %698, !dbg !421

698:                                              ; preds = %originalBBpart2231, %originalBBpart2181
  %699 = load i32, i32* @x.3
  %700 = load i32, i32* @y.4
  %701 = sub i32 %699, 1
  %702 = mul i32 %699, %701
  %703 = urem i32 %702, 2
  %704 = icmp eq i32 %703, 0
  %705 = icmp slt i32 %700, 10
  %706 = or i1 %704, %705
  br i1 %706, label %originalBB233, label %originalBB233alteredBB

originalBB233:                                    ; preds = %698, %originalBB233alteredBB
  %707 = load i8*, i8** %16, align 8, !dbg !422
  call void @print_element(i8* %707), !dbg !423
  %708 = load i32, i32* @x.3
  %709 = load i32, i32* @y.4
  %710 = sub i32 %708, 1
  %711 = mul i32 %708, %710
  %712 = urem i32 %711, 2
  %713 = icmp eq i32 %712, 0
  %714 = icmp slt i32 %709, 10
  %715 = or i1 %713, %714
  br i1 %715, label %originalBBpart2235, label %originalBB233alteredBB

originalBBpart2235:                               ; preds = %originalBB233
  br label %716, !dbg !423

716:                                              ; preds = %originalBBpart2235, %originalBBpart2231
  br label %717, !dbg !424

717:                                              ; preds = %716, %546
  %718 = load i32, i32* %14, align 4, !dbg !425
  %719 = and i32 %718, 64, !dbg !427
  %720 = icmp ne i32 %719, 0, !dbg !427
  br i1 %720, label %721, label %936, !dbg !428

721:                                              ; preds = %717
  call void @llvm.dbg.declare(metadata i8** %17, metadata !429, metadata !DIExpression()), !dbg !431
  %722 = load i32, i32* @x.3
  %723 = load i32, i32* @y.4
  %724 = sub i32 %722, 1
  %725 = mul i32 %722, %724
  %726 = urem i32 %725, 2
  %727 = icmp eq i32 %726, 0
  %728 = icmp slt i32 %723, 10
  %729 = or i1 %727, %728
  br i1 %729, label %originalBB237, label %originalBB237alteredBB

originalBB237:                                    ; preds = %721, %originalBB237alteredBB
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @main.unknown, i64 0, i64 0), i8** %17, align 8, !dbg !431
  %730 = load i32, i32* %14, align 4, !dbg !432
  %731 = load i32, i32* @x.3
  %732 = load i32, i32* @y.4
  %733 = sub i32 %731, 1
  %734 = mul i32 %731, %733
  %735 = urem i32 %734, 2
  %736 = icmp eq i32 %735, 0
  %737 = icmp slt i32 %732, 10
  %738 = or i1 %736, %737
  br i1 %738, label %originalBBpart2239, label %originalBB237alteredBB

originalBBpart2239:                               ; preds = %originalBB237
  br label %739, !dbg !434

739:                                              ; preds = %originalBBpart2239
  %collatzVar3 = alloca i32
  br label %740

740:                                              ; preds = %739
  %741 = load i32, i32* @x.3
  %742 = load i32, i32* @y.4
  %743 = sub i32 %741, 1
  %744 = mul i32 %741, %743
  %745 = urem i32 %744, 2
  %746 = icmp eq i32 %745, 0
  %747 = icmp slt i32 %742, 10
  %748 = or i1 %746, %747
  br i1 %748, label %originalBB241, label %originalBB241alteredBB

originalBB241:                                    ; preds = %740, %originalBB241alteredBB
  %749 = load i32, i32* @inVal0
  %750 = icmp sgt i32 %749, 1
  %751 = load i32, i32* @x.3
  %752 = load i32, i32* @y.4
  %753 = sub i32 %751, 1
  %754 = mul i32 %751, %753
  %755 = urem i32 %754, 2
  %756 = icmp eq i32 %755, 0
  %757 = icmp slt i32 %752, 10
  %758 = or i1 %756, %757
  br i1 %758, label %originalBBpart2243, label %originalBB241alteredBB

originalBBpart2243:                               ; preds = %originalBB241
  br i1 %750, label %776, label %759

759:                                              ; preds = %originalBBpart2243
  %760 = load i32, i32* @x.3
  %761 = load i32, i32* @y.4
  %762 = sub i32 %760, 1
  %763 = mul i32 %760, %762
  %764 = urem i32 %763, 2
  %765 = icmp eq i32 %764, 0
  %766 = icmp slt i32 %761, 10
  %767 = or i1 %765, %766
  br i1 %767, label %originalBB245, label %originalBB245alteredBB

originalBB245:                                    ; preds = %759, %originalBB245alteredBB
  store i32 89, i32* %collatzVar3
  %768 = load i32, i32* @x.3
  %769 = load i32, i32* @y.4
  %770 = sub i32 %768, 1
  %771 = mul i32 %768, %770
  %772 = urem i32 %771, 2
  %773 = icmp eq i32 %772, 0
  %774 = icmp slt i32 %769, 10
  %775 = or i1 %773, %774
  br i1 %775, label %originalBBpart2247, label %originalBB245alteredBB

originalBBpart2247:                               ; preds = %originalBB245
  br label %776

776:                                              ; preds = %originalBBpart2247, %originalBBpart2243
  %777 = load i32, i32* @x.3
  %778 = load i32, i32* @y.4
  %779 = sub i32 %777, 1
  %780 = mul i32 %777, %779
  %781 = urem i32 %780, 2
  %782 = icmp eq i32 %781, 0
  %783 = icmp slt i32 %778, 10
  %784 = or i1 %782, %783
  br i1 %784, label %originalBB249, label %originalBB249alteredBB

originalBB249:                                    ; preds = %776, %originalBB249alteredBB
  %785 = load i8**, i8*** @inVal1
  %786 = getelementptr inbounds i8*, i8** %785, i64 1
  %787 = load i8*, i8** %786
  %controle4 = call i32 @controle(i8* %787, i32 -1)
  store i32 %controle4, i32* %collatzVar3
  %788 = load i32, i32* @x.3
  %789 = load i32, i32* @y.4
  %790 = sub i32 %788, 1
  %791 = mul i32 %788, %790
  %792 = urem i32 %791, 2
  %793 = icmp eq i32 %792, 0
  %794 = icmp slt i32 %789, 10
  %795 = or i1 %793, %794
  br i1 %795, label %originalBBpart2251, label %originalBB249alteredBB

originalBBpart2251:                               ; preds = %originalBB249
  br label %796

796:                                              ; preds = %878, %874, %originalBBpart2251
  %797 = load i32, i32* @x.3
  %798 = load i32, i32* @y.4
  %799 = sub i32 %797, 1
  %800 = mul i32 %797, %799
  %801 = urem i32 %800, 2
  %802 = icmp eq i32 %801, 0
  %803 = icmp slt i32 %798, 10
  %804 = or i1 %802, %803
  br i1 %804, label %originalBB253, label %originalBB253alteredBB

originalBB253:                                    ; preds = %796, %originalBB253alteredBB
  %805 = load i32, i32* %collatzVar3
  %806 = icmp sgt i32 %805, 1
  %807 = load i32, i32* @x.3
  %808 = load i32, i32* @y.4
  %809 = sub i32 %807, 1
  %810 = mul i32 %807, %809
  %811 = urem i32 %810, 2
  %812 = icmp eq i32 %811, 0
  %813 = icmp slt i32 %808, 10
  %814 = or i1 %812, %813
  br i1 %814, label %originalBBpart2255, label %originalBB253alteredBB

originalBBpart2255:                               ; preds = %originalBB253
  br i1 %806, label %815, label %901

815:                                              ; preds = %originalBBpart2255
  %816 = load i32, i32* @x.3
  %817 = load i32, i32* @y.4
  %818 = sub i32 %816, 1
  %819 = mul i32 %816, %818
  %820 = urem i32 %819, 2
  %821 = icmp eq i32 %820, 0
  %822 = icmp slt i32 %817, 10
  %823 = or i1 %821, %822
  br i1 %823, label %originalBB257, label %originalBB257alteredBB

originalBB257:                                    ; preds = %815, %originalBB257alteredBB
  %824 = load i32, i32* %collatzVar3
  %825 = srem i32 %824, 2
  %826 = icmp eq i32 %825, 0
  %827 = load i32, i32* @x.3
  %828 = load i32, i32* @y.4
  %829 = sub i32 %827, 1
  %830 = mul i32 %827, %829
  %831 = urem i32 %830, 2
  %832 = icmp eq i32 %831, 0
  %833 = icmp slt i32 %828, 10
  %834 = or i1 %832, %833
  br i1 %834, label %originalBBpart2261, label %originalBB257alteredBB

originalBBpart2261:                               ; preds = %originalBB257
  br i1 %826, label %835, label %854

835:                                              ; preds = %originalBBpart2261
  %836 = load i32, i32* @x.3
  %837 = load i32, i32* @y.4
  %838 = sub i32 %836, 1
  %839 = mul i32 %836, %838
  %840 = urem i32 %839, 2
  %841 = icmp eq i32 %840, 0
  %842 = icmp slt i32 %837, 10
  %843 = or i1 %841, %842
  br i1 %843, label %originalBB263, label %originalBB263alteredBB

originalBB263:                                    ; preds = %835, %originalBB263alteredBB
  %844 = load i32, i32* %collatzVar3
  %845 = sdiv i32 %844, 2
  store i32 %845, i32* %collatzVar3
  %846 = load i32, i32* @x.3
  %847 = load i32, i32* @y.4
  %848 = sub i32 %846, 1
  %849 = mul i32 %846, %848
  %850 = urem i32 %849, 2
  %851 = icmp eq i32 %850, 0
  %852 = icmp slt i32 %847, 10
  %853 = or i1 %851, %852
  br i1 %853, label %originalBBpart2267, label %originalBB263alteredBB

originalBBpart2267:                               ; preds = %originalBB263
  br label %874

854:                                              ; preds = %originalBBpart2261
  %855 = load i32, i32* @x.3
  %856 = load i32, i32* @y.4
  %857 = sub i32 %855, 1
  %858 = mul i32 %855, %857
  %859 = urem i32 %858, 2
  %860 = icmp eq i32 %859, 0
  %861 = icmp slt i32 %856, 10
  %862 = or i1 %860, %861
  br i1 %862, label %originalBB269, label %originalBB269alteredBB

originalBB269:                                    ; preds = %854, %originalBB269alteredBB
  %863 = load i32, i32* %collatzVar3
  %864 = mul i32 %863, 3
  %865 = add i32 %864, 1
  store i32 %865, i32* %collatzVar3
  %866 = load i32, i32* @x.3
  %867 = load i32, i32* @y.4
  %868 = sub i32 %866, 1
  %869 = mul i32 %866, %868
  %870 = urem i32 %869, 2
  %871 = icmp eq i32 %870, 0
  %872 = icmp slt i32 %867, 10
  %873 = or i1 %871, %872
  br i1 %873, label %originalBBpart2283, label %originalBB269alteredBB

originalBBpart2283:                               ; preds = %originalBB269
  br label %874

874:                                              ; preds = %originalBBpart2283, %originalBBpart2267
  %875 = load i32, i32* %collatzVar3
  %876 = sub i32 %730, %875
  %877 = icmp sgt i32 %876, -3
  br i1 %877, label %878, label %796

878:                                              ; preds = %874
  %879 = load i32, i32* %collatzVar3
  %880 = add i32 %730, %879
  %881 = icmp slt i32 %880, 1
  br i1 %881, label %882, label %796

882:                                              ; preds = %878
  %883 = load i32, i32* @x.3
  %884 = load i32, i32* @y.4
  %885 = sub i32 %883, 1
  %886 = mul i32 %883, %885
  %887 = urem i32 %886, 2
  %888 = icmp eq i32 %887, 0
  %889 = icmp slt i32 %884, 10
  %890 = or i1 %888, %889
  br i1 %890, label %originalBB285, label %originalBB285alteredBB

originalBB285:                                    ; preds = %882, %originalBB285alteredBB
  %891 = load i8*, i8** %17, align 8, !dbg !435
  %892 = icmp eq i8* %891, getelementptr inbounds ([8 x i8], [8 x i8]* @main.unknown, i64 0, i64 0), !dbg !436
  %893 = load i32, i32* @x.3
  %894 = load i32, i32* @y.4
  %895 = sub i32 %893, 1
  %896 = mul i32 %893, %895
  %897 = urem i32 %896, 2
  %898 = icmp eq i32 %897, 0
  %899 = icmp slt i32 %894, 10
  %900 = or i1 %898, %899
  br i1 %900, label %originalBBpart2287, label %originalBB285alteredBB

originalBBpart2287:                               ; preds = %originalBB285
  br i1 %892, label %919, label %901, !dbg !437

901:                                              ; preds = %originalBBpart2287, %originalBBpart2255
  %902 = load i32, i32* @x.3
  %903 = load i32, i32* @y.4
  %904 = sub i32 %902, 1
  %905 = mul i32 %902, %904
  %906 = urem i32 %905, 2
  %907 = icmp eq i32 %906, 0
  %908 = icmp slt i32 %903, 10
  %909 = or i1 %907, %908
  br i1 %909, label %originalBB289, label %originalBB289alteredBB

originalBB289:                                    ; preds = %901, %originalBB289alteredBB
  %910 = load i8*, i8** %17, align 8, !dbg !438
  call void @print_element(i8* %910), !dbg !439
  %911 = load i32, i32* @x.3
  %912 = load i32, i32* @y.4
  %913 = sub i32 %911, 1
  %914 = mul i32 %911, %913
  %915 = urem i32 %914, 2
  %916 = icmp eq i32 %915, 0
  %917 = icmp slt i32 %912, 10
  %918 = or i1 %916, %917
  br i1 %918, label %originalBBpart2291, label %originalBB289alteredBB

originalBBpart2291:                               ; preds = %originalBB289
  br label %919, !dbg !439

919:                                              ; preds = %originalBBpart2291, %originalBBpart2287
  %920 = load i32, i32* @x.3
  %921 = load i32, i32* @y.4
  %922 = sub i32 %920, 1
  %923 = mul i32 %920, %922
  %924 = urem i32 %923, 2
  %925 = icmp eq i32 %924, 0
  %926 = icmp slt i32 %921, 10
  %927 = or i1 %925, %926
  br i1 %927, label %originalBB293, label %originalBB293alteredBB

originalBB293:                                    ; preds = %919, %originalBB293alteredBB
  %928 = load i32, i32* @x.3
  %929 = load i32, i32* @y.4
  %930 = sub i32 %928, 1
  %931 = mul i32 %928, %930
  %932 = urem i32 %931, 2
  %933 = icmp eq i32 %932, 0
  %934 = icmp slt i32 %929, 10
  %935 = or i1 %933, %934
  br i1 %935, label %originalBBpart2295, label %originalBB293alteredBB

originalBBpart2295:                               ; preds = %originalBB293
  br label %936, !dbg !440

936:                                              ; preds = %originalBBpart2295, %717
  %937 = load i32, i32* @x.3
  %938 = load i32, i32* @y.4
  %939 = sub i32 %937, 1
  %940 = mul i32 %937, %939
  %941 = urem i32 %940, 2
  %942 = icmp eq i32 %941, 0
  %943 = icmp slt i32 %938, 10
  %944 = or i1 %942, %943
  br i1 %944, label %originalBB297, label %originalBB297alteredBB

originalBB297:                                    ; preds = %936, %originalBB297alteredBB
  %945 = load i32, i32* %14, align 4, !dbg !441
  %946 = and i32 %945, 128, !dbg !443
  %947 = icmp ne i32 %946, 0, !dbg !443
  %948 = load i32, i32* @x.3
  %949 = load i32, i32* @y.4
  %950 = sub i32 %948, 1
  %951 = mul i32 %948, %950
  %952 = urem i32 %951, 2
  %953 = icmp eq i32 %952, 0
  %954 = icmp slt i32 %949, 10
  %955 = or i1 %953, %954
  br i1 %955, label %originalBBpart2302, label %originalBB297alteredBB

originalBBpart2302:                               ; preds = %originalBB297
  br i1 %947, label %956, label %973, !dbg !444

956:                                              ; preds = %originalBBpart2302
  %957 = load i32, i32* @x.3
  %958 = load i32, i32* @y.4
  %959 = sub i32 %957, 1
  %960 = mul i32 %957, %959
  %961 = urem i32 %960, 2
  %962 = icmp eq i32 %961, 0
  %963 = icmp slt i32 %958, 10
  %964 = or i1 %962, %963
  br i1 %964, label %originalBB304, label %originalBB304alteredBB

originalBB304:                                    ; preds = %956, %originalBB304alteredBB
  call void @print_element(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i64 0, i64 0)), !dbg !445
  %965 = load i32, i32* @x.3
  %966 = load i32, i32* @y.4
  %967 = sub i32 %965, 1
  %968 = mul i32 %965, %967
  %969 = urem i32 %968, 2
  %970 = icmp eq i32 %969, 0
  %971 = icmp slt i32 %966, 10
  %972 = or i1 %970, %971
  br i1 %972, label %originalBBpart2306, label %originalBB304alteredBB

originalBBpart2306:                               ; preds = %originalBB304
  br label %973, !dbg !445

973:                                              ; preds = %originalBBpart2306, %originalBBpart2302
  %974 = load i32, i32* @x.3
  %975 = load i32, i32* @y.4
  %976 = sub i32 %974, 1
  %977 = mul i32 %974, %976
  %978 = urem i32 %977, 2
  %979 = icmp eq i32 %978, 0
  %980 = icmp slt i32 %975, 10
  %981 = or i1 %979, %980
  br i1 %981, label %originalBB308, label %originalBB308alteredBB

originalBB308:                                    ; preds = %973, %originalBB308alteredBB
  %982 = call i32 @putchar_unlocked(i32 10), !dbg !446
  %983 = load i32, i32* @x.3
  %984 = load i32, i32* @y.4
  %985 = sub i32 %983, 1
  %986 = mul i32 %983, %985
  %987 = urem i32 %986, 2
  %988 = icmp eq i32 %987, 0
  %989 = icmp slt i32 %984, 10
  %990 = or i1 %988, %989
  br i1 %990, label %originalBBpart2310, label %originalBB308alteredBB

originalBBpart2310:                               ; preds = %originalBB308
  ret i32 0, !dbg !447

originalBBalteredBB:                              ; preds = %originalBB, %2
  store i8** %1, i8*** @inVal1
  store i32 %0, i32* @inVal0
  %991 = alloca i32, align 4
  %992 = alloca i32, align 4
  %993 = alloca i8**, align 8
  %994 = alloca i32, align 4
  %995 = alloca %struct.utsname, align 1
  %996 = alloca i8*, align 8
  %997 = alloca i8*, align 8
  store i32 0, i32* %991, align 4
  store i32 %0, i32* %992, align 4
  call void @llvm.dbg.declare(metadata i32* %992, metadata !448, metadata !DIExpression()), !dbg !330
  store i8** %1, i8*** %993, align 8
  call void @llvm.dbg.declare(metadata i8*** %993, metadata !470, metadata !DIExpression()), !dbg !332
  call void @llvm.dbg.declare(metadata i32* %994, metadata !471, metadata !DIExpression()), !dbg !334
  store i32 0, i32* %994, align 4, !dbg !334
  %998 = load i8**, i8*** %993, align 8, !dbg !335
  %999 = getelementptr inbounds i8*, i8** %998, i64 0, !dbg !335
  %1000 = load i8*, i8** %999, align 8, !dbg !335
  call void @set_program_name(i8* %1000), !dbg !336
  %1001 = call i8* @setlocale(i32 6, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.9, i64 0, i64 0)) #10, !dbg !337
  %1002 = call i8* @bindtextdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.11, i64 0, i64 0)) #10, !dbg !338
  %1003 = call i8* @textdomain(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10, i64 0, i64 0)) #10, !dbg !339
  %1004 = call i32 @atexit(void ()* @close_stdout) #10, !dbg !340
  %1005 = load i32, i32* %992, align 4, !dbg !341
  %1006 = load i8**, i8*** %993, align 8, !dbg !342
  %1007 = call i32 @decode_switches(i32 %1005, i8** %1006), !dbg !343
  store i32 %1007, i32* %994, align 4, !dbg !344
  %1008 = load i32, i32* %994, align 4, !dbg !345
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %37
  %collatzVaralteredBB = alloca i32
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %54
  %1009 = load i32, i32* @inVal0
  %1010 = icmp sgt i32 %1009, 1
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %73
  store i32 49, i32* %collatzVar
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %90
  %1011 = load i8**, i8*** @inVal1
  %1012 = getelementptr inbounds i8*, i8** %1011, i64 1
  %1013 = load i8*, i8** %1012
  %controlealteredBB = call i32 @controle(i8* %1013, i32 0)
  store i32 %controlealteredBB, i32* %collatzVar
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %113
  %1014 = load i32, i32* %collatzVar
  %_ = sub i32 0, %1014
  %gen = add i32 %_, 2
  %_19 = sub i32 0, %1014
  %gen20 = add i32 %_19, 2
  %_21 = sub i32 0, %1014
  %gen22 = add i32 %_21, 2
  %_23 = sub i32 %1014, 2
  %gen24 = mul i32 %_23, 2
  %_25 = sub i32 0, %1014
  %gen26 = add i32 %_25, 2
  %1015 = srem i32 %1014, 2
  %1016 = icmp eq i32 %1015, 0
  br label %originalBB18

originalBB30alteredBB:                            ; preds = %originalBB30, %140
  %1017 = load i32, i32* %collatzVar
  %_31 = sub i32 %28, %1017
  %gen32 = mul i32 %_31, %1017
  %1018 = sub i32 %28, %1017
  %1019 = icmp sgt i32 %1018, -2
  br label %originalBB30

originalBB36alteredBB:                            ; preds = %originalBB36, %160
  %1020 = load i32, i32* %collatzVar
  %_37 = sub i32 0, %28
  %gen38 = add i32 %_37, %1020
  %_39 = shl i32 %28, %1020
  %_40 = sub i32 0, %28
  %gen41 = add i32 %_40, %1020
  %_42 = shl i32 %28, %1020
  %_43 = sub i32 %28, %1020
  %gen44 = mul i32 %_43, %1020
  %1021 = add i32 %28, %1020
  %1022 = icmp slt i32 %1021, 2
  br label %originalBB36

originalBB48alteredBB:                            ; preds = %originalBB48, %180
  store i32 1, i32* %14, align 4, !dbg !348
  br label %originalBB48

originalBB52alteredBB:                            ; preds = %originalBB52, %197
  %1023 = load i32, i32* %14, align 4, !dbg !350
  %_53 = sub i32 %1023, 31
  %gen54 = mul i32 %_53, 31
  %_55 = sub i32 %1023, 31
  %gen56 = mul i32 %_55, 31
  %_57 = shl i32 %1023, 31
  %_58 = shl i32 %1023, 31
  %1024 = and i32 %1023, 31, !dbg !352
  %1025 = icmp ne i32 %1024, 0, !dbg !352
  br label %originalBB52

originalBB62alteredBB:                            ; preds = %originalBB62, %219
  %collatzVar5alteredBB = alloca i32
  br label %originalBB62

originalBB66alteredBB:                            ; preds = %originalBB66, %236
  %1026 = load i32, i32* @inVal0
  %1027 = icmp sgt i32 %1026, 1
  br label %originalBB66

originalBB70alteredBB:                            ; preds = %originalBB70, %255
  store i32 28, i32* %collatzVar5
  br label %originalBB70

originalBB74alteredBB:                            ; preds = %originalBB74, %272
  %1028 = load i8**, i8*** @inVal1
  %1029 = getelementptr inbounds i8*, i8** %1028, i64 1
  %1030 = load i8*, i8** %1029
  %controle6alteredBB = call i32 @controle(i8* %1030, i32 -1)
  store i32 %controle6alteredBB, i32* %collatzVar5
  br label %originalBB74

originalBB78alteredBB:                            ; preds = %originalBB78, %292
  %1031 = load i32, i32* %collatzVar5
  %1032 = icmp sgt i32 %1031, 1
  br label %originalBB78

originalBB82alteredBB:                            ; preds = %originalBB82, %318
  %1033 = load i32, i32* %collatzVar5
  %_83 = sub i32 0, %1033
  %gen84 = add i32 %_83, 3
  %_85 = sub i32 %1033, 3
  %gen86 = mul i32 %_85, 3
  %_87 = sub i32 %1033, 3
  %gen88 = mul i32 %_87, 3
  %1034 = mul i32 %1033, 3
  %_89 = sub i32 0, %1034
  %gen90 = add i32 %_89, 1
  %_91 = sub i32 0, %1034
  %gen92 = add i32 %_91, 1
  %_93 = sub i32 %1034, 1
  %gen94 = mul i32 %_93, 1
  %_95 = sub i32 %1034, 1
  %gen96 = mul i32 %_95, 1
  %_97 = sub i32 0, %1034
  %gen98 = add i32 %_97, 1
  %_99 = shl i32 %1034, 1
  %_100 = shl i32 %1034, 1
  %1035 = add i32 %1034, 1
  store i32 %1035, i32* %collatzVar5
  br label %originalBB82

originalBB104alteredBB:                           ; preds = %originalBB104, %338
  %1036 = load i32, i32* %collatzVar5
  %_105 = sub i32 0, %218
  %gen106 = add i32 %_105, %1036
  %_107 = sub i32 0, %218
  %gen108 = add i32 %_107, %1036
  %_109 = shl i32 %218, %1036
  %_110 = shl i32 %218, %1036
  %_111 = sub i32 0, %218
  %gen112 = add i32 %_111, %1036
  %_113 = sub i32 %218, %1036
  %gen114 = mul i32 %_113, %1036
  %_115 = sub i32 0, %218
  %gen116 = add i32 %_115, %1036
  %1037 = sub i32 %218, %1036
  %1038 = icmp sgt i32 %1037, -3
  br label %originalBB104

originalBB120alteredBB:                           ; preds = %originalBB120, %362
  %1039 = call i32* @__errno_location() #14, !dbg !372
  %1040 = load i32, i32* %1039, align 4, !dbg !372
  %1041 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.12, i64 0, i64 0)) #10, !dbg !372
  call void (i32, i32, i8*, ...) @error(i32 1, i32 %1040, i8* %1041), !dbg !372
  br label %originalBB120

originalBB124alteredBB:                           ; preds = %originalBB124, %389
  %1042 = load i32, i32* %14, align 4, !dbg !380
  %_125 = shl i32 %1042, 2
  %_126 = sub i32 0, %1042
  %gen127 = add i32 %_126, 2
  %_128 = sub i32 %1042, 2
  %gen129 = mul i32 %_128, 2
  %_130 = sub i32 0, %1042
  %gen131 = add i32 %_130, 2
  %_132 = shl i32 %1042, 2
  %1043 = and i32 %1042, 2, !dbg !382
  %1044 = icmp ne i32 %1043, 0, !dbg !382
  br label %originalBB124

originalBB136alteredBB:                           ; preds = %originalBB136, %409
  %1045 = getelementptr inbounds %struct.utsname, %struct.utsname* %15, i32 0, i32 1, !dbg !384
  %1046 = getelementptr inbounds [65 x i8], [65 x i8]* %1045, i64 0, i64 0, !dbg !385
  call void @print_element(i8* %1046), !dbg !386
  br label %originalBB136

originalBB140alteredBB:                           ; preds = %originalBB140, %428
  %1047 = load i32, i32* %14, align 4, !dbg !387
  %_141 = sub i32 0, %1047
  %gen142 = add i32 %_141, 4
  %_143 = shl i32 %1047, 4
  %1048 = and i32 %1047, 4, !dbg !389
  %1049 = icmp ne i32 %1048, 0, !dbg !389
  br label %originalBB140

originalBB147alteredBB:                           ; preds = %originalBB147, %448
  %1050 = getelementptr inbounds %struct.utsname, %struct.utsname* %15, i32 0, i32 2, !dbg !391
  %1051 = getelementptr inbounds [65 x i8], [65 x i8]* %1050, i64 0, i64 0, !dbg !392
  call void @print_element(i8* %1051), !dbg !393
  br label %originalBB147

originalBB151alteredBB:                           ; preds = %originalBB151, %467
  %1052 = load i32, i32* %14, align 4, !dbg !394
  %_152 = sub i32 0, %1052
  %gen153 = add i32 %_152, 8
  %_154 = sub i32 %1052, 8
  %gen155 = mul i32 %_154, 8
  %_156 = sub i32 %1052, 8
  %gen157 = mul i32 %_156, 8
  %_158 = sub i32 %1052, 8
  %gen159 = mul i32 %_158, 8
  %1053 = and i32 %1052, 8, !dbg !396
  %1054 = icmp ne i32 %1053, 0, !dbg !396
  br label %originalBB151

originalBB163alteredBB:                           ; preds = %originalBB163, %487
  %1055 = getelementptr inbounds %struct.utsname, %struct.utsname* %15, i32 0, i32 3, !dbg !398
  %1056 = getelementptr inbounds [65 x i8], [65 x i8]* %1055, i64 0, i64 0, !dbg !399
  call void @print_element(i8* %1056), !dbg !400
  br label %originalBB163

originalBB167alteredBB:                           ; preds = %originalBB167, %510
  %1057 = getelementptr inbounds %struct.utsname, %struct.utsname* %15, i32 0, i32 4, !dbg !405
  %1058 = getelementptr inbounds [65 x i8], [65 x i8]* %1057, i64 0, i64 0, !dbg !406
  call void @print_element(i8* %1058), !dbg !407
  br label %originalBB167

originalBB171alteredBB:                           ; preds = %originalBB171, %529
  br label %originalBB171

originalBB175alteredBB:                           ; preds = %originalBB175, %552
  %collatzVar1alteredBB = alloca i32
  br label %originalBB175

originalBB179alteredBB:                           ; preds = %originalBB179, %577
  %1059 = load i32, i32* %collatzVar1
  %1060 = icmp sgt i32 %1059, 1
  br label %originalBB179

originalBB183alteredBB:                           ; preds = %originalBB183, %600
  %1061 = load i32, i32* %collatzVar1
  %_184 = shl i32 %1061, 2
  %_185 = sub i32 0, %1061
  %gen186 = add i32 %_185, 2
  %_187 = shl i32 %1061, 2
  %_188 = shl i32 %1061, 2
  %1062 = sdiv i32 %1061, 2
  store i32 %1062, i32* %collatzVar1
  br label %originalBB183

originalBB192alteredBB:                           ; preds = %originalBB192, %619
  %1063 = load i32, i32* %collatzVar1
  %_193 = sub i32 0, %1063
  %gen194 = add i32 %_193, 3
  %_195 = shl i32 %1063, 3
  %_196 = shl i32 %1063, 3
  %_197 = shl i32 %1063, 3
  %_198 = sub i32 %1063, 3
  %gen199 = mul i32 %_198, 3
  %_200 = sub i32 %1063, 3
  %gen201 = mul i32 %_200, 3
  %1064 = mul i32 %1063, 3
  %_202 = sub i32 0, %1064
  %gen203 = add i32 %_202, 1
  %_204 = sub i32 0, %1064
  %gen205 = add i32 %_204, 1
  %_206 = sub i32 0, %1064
  %gen207 = add i32 %_206, 1
  %1065 = add i32 %1064, 1
  store i32 %1065, i32* %collatzVar1
  br label %originalBB192

originalBB211alteredBB:                           ; preds = %originalBB211, %639
  %1066 = load i32, i32* %collatzVar1
  %_212 = shl i32 %551, %1066
  %_213 = sub i32 0, %551
  %gen214 = add i32 %_213, %1066
  %1067 = sub i32 %551, %1066
  %1068 = icmp sgt i32 %1067, -3
  br label %originalBB211

originalBB218alteredBB:                           ; preds = %originalBB218, %659
  %1069 = load i32, i32* %collatzVar1
  %_219 = shl i32 %551, %1069
  %_220 = shl i32 %551, %1069
  %_221 = shl i32 %551, %1069
  %_222 = shl i32 %551, %1069
  %_223 = sub i32 %551, %1069
  %gen224 = mul i32 %_223, %1069
  %1070 = add i32 %551, %1069
  %1071 = icmp slt i32 %1070, 1
  br label %originalBB218

originalBB228alteredBB:                           ; preds = %originalBB228, %679
  %1072 = load i8*, i8** %16, align 8, !dbg !419
  %1073 = icmp eq i8* %1072, getelementptr inbounds ([8 x i8], [8 x i8]* @main.unknown, i64 0, i64 0), !dbg !420
  br label %originalBB228

originalBB233alteredBB:                           ; preds = %originalBB233, %698
  %1074 = load i8*, i8** %16, align 8, !dbg !422
  call void @print_element(i8* %1074), !dbg !423
  br label %originalBB233

originalBB237alteredBB:                           ; preds = %originalBB237, %721
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @main.unknown, i64 0, i64 0), i8** %17, align 8, !dbg !431
  %1075 = load i32, i32* %14, align 4, !dbg !432
  br label %originalBB237

originalBB241alteredBB:                           ; preds = %originalBB241, %740
  %1076 = load i32, i32* @inVal0
  %1077 = icmp sgt i32 %1076, 1
  br label %originalBB241

originalBB245alteredBB:                           ; preds = %originalBB245, %759
  store i32 89, i32* %collatzVar3
  br label %originalBB245

originalBB249alteredBB:                           ; preds = %originalBB249, %776
  %1078 = load i8**, i8*** @inVal1
  %1079 = getelementptr inbounds i8*, i8** %1078, i64 1
  %1080 = load i8*, i8** %1079
  %controle4alteredBB = call i32 @controle(i8* %1080, i32 -1)
  store i32 %controle4alteredBB, i32* %collatzVar3
  br label %originalBB249

originalBB253alteredBB:                           ; preds = %originalBB253, %796
  %1081 = load i32, i32* %collatzVar3
  %1082 = icmp sgt i32 %1081, 1
  br label %originalBB253

originalBB257alteredBB:                           ; preds = %originalBB257, %815
  %1083 = load i32, i32* %collatzVar3
  %_258 = shl i32 %1083, 2
  %_259 = shl i32 %1083, 2
  %1084 = srem i32 %1083, 2
  %1085 = icmp eq i32 %1084, 0
  br label %originalBB257

originalBB263alteredBB:                           ; preds = %originalBB263, %835
  %1086 = load i32, i32* %collatzVar3
  %_264 = shl i32 %1086, 2
  %1087 = sdiv i32 %1086, 2
  store i32 %1087, i32* %collatzVar3
  br label %originalBB263

originalBB269alteredBB:                           ; preds = %originalBB269, %854
  %1088 = load i32, i32* %collatzVar3
  %_270 = shl i32 %1088, 3
  %_271 = shl i32 %1088, 3
  %_272 = sub i32 0, %1088
  %gen273 = add i32 %_272, 3
  %_274 = shl i32 %1088, 3
  %_275 = shl i32 %1088, 3
  %_276 = sub i32 %1088, 3
  %gen277 = mul i32 %_276, 3
  %_278 = sub i32 0, %1088
  %gen279 = add i32 %_278, 3
  %1089 = mul i32 %1088, 3
  %_280 = sub i32 0, %1089
  %gen281 = add i32 %_280, 1
  %1090 = add i32 %1089, 1
  store i32 %1090, i32* %collatzVar3
  br label %originalBB269

originalBB285alteredBB:                           ; preds = %originalBB285, %882
  %1091 = load i8*, i8** %17, align 8, !dbg !435
  %1092 = icmp eq i8* %1091, getelementptr inbounds ([8 x i8], [8 x i8]* @main.unknown, i64 0, i64 0), !dbg !436
  br label %originalBB285

originalBB289alteredBB:                           ; preds = %originalBB289, %901
  %1093 = load i8*, i8** %17, align 8, !dbg !438
  call void @print_element(i8* %1093), !dbg !439
  br label %originalBB289

originalBB293alteredBB:                           ; preds = %originalBB293, %919
  br label %originalBB293

originalBB297alteredBB:                           ; preds = %originalBB297, %936
  %1094 = load i32, i32* %14, align 4, !dbg !441
  %_298 = sub i32 0, %1094
  %gen299 = add i32 %_298, 128
  %_300 = shl i32 %1094, 128
  %1095 = and i32 %1094, 128, !dbg !443
  %1096 = icmp ne i32 %1095, 0, !dbg !443
  br label %originalBB297

originalBB304alteredBB:                           ; preds = %originalBB304, %956
  call void @print_element(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i64 0, i64 0)), !dbg !445
  br label %originalBB304

originalBB308alteredBB:                           ; preds = %originalBB308, %973
  %1097 = call i32 @putchar_unlocked(i32 10), !dbg !446
  br label %originalBB308
}

; Function Attrs: nounwind
declare dso_local i8* @bindtextdomain(i8*, i8*) #2

; Function Attrs: nounwind
declare dso_local i8* @textdomain(i8*) #2

; Function Attrs: nounwind
declare dso_local i32 @atexit(void ()*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @decode_switches(i32, i8**) #4 !dbg !472 {
  %3 = load i32, i32* @x.5
  %4 = load i32, i32* @y.6
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32, align 4
  %12 = alloca i8**, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !473, metadata !DIExpression()), !dbg !474
  store i8** %1, i8*** %12, align 8
  call void @llvm.dbg.declare(metadata i8*** %12, metadata !475, metadata !DIExpression()), !dbg !476
  call void @llvm.dbg.declare(metadata i32* %13, metadata !477, metadata !DIExpression()), !dbg !478
  call void @llvm.dbg.declare(metadata i32* %14, metadata !479, metadata !DIExpression()), !dbg !480
  store i32 0, i32* %14, align 4, !dbg !480
  %15 = load i32, i32* @uname_mode, align 4, !dbg !481
  %16 = icmp eq i32 %15, 2, !dbg !483
  %17 = load i32, i32* @x.5
  %18 = load i32, i32* @y.6
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %16, label %25, label %123, !dbg !484

25:                                               ; preds = %originalBBpart2
  %26 = load i32, i32* @x.5
  %27 = load i32, i32* @y.6
  %28 = sub i32 %26, 1
  %29 = mul i32 %26, %28
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %31, %32
  br i1 %33, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %25, %originalBB1alteredBB
  %34 = load i32, i32* @x.5
  %35 = load i32, i32* @y.6
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %42, !dbg !485

42:                                               ; preds = %originalBBpart24
  %43 = load i32, i32* @x.5
  %44 = load i32, i32* @y.6
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %42, %originalBB6alteredBB
  %51 = load i32, i32* %11, align 4, !dbg !487
  %52 = load i8**, i8*** %12, align 8, !dbg !488
  %53 = call i32 @getopt_long(i32 %51, i8** %52, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.9, i64 0, i64 0), %struct.option* getelementptr inbounds ([3 x %struct.option], [3 x %struct.option]* @arch_long_options, i64 0, i64 0), i32* null) #10, !dbg !489
  store i32 %53, i32* %13, align 4, !dbg !490
  %54 = icmp ne i32 %53, -1, !dbg !491
  %55 = load i32, i32* @x.5
  %56 = load i32, i32* @y.6
  %57 = sub i32 %55, 1
  %58 = mul i32 %55, %57
  %59 = urem i32 %58, 2
  %60 = icmp eq i32 %59, 0
  %61 = icmp slt i32 %56, 10
  %62 = or i1 %60, %61
  br i1 %62, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %54, label %63, label %106, !dbg !485

63:                                               ; preds = %originalBBpart28
  %64 = load i32, i32* @x.5
  %65 = load i32, i32* @y.6
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %63, %originalBB10alteredBB
  %72 = load i32, i32* %13, align 4, !dbg !492
  %73 = load i32, i32* @x.5
  %74 = load i32, i32* @y.6
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  switch i32 %72, label %105 [
    i32 -130, label %81
    i32 -131, label %82
  ], !dbg !494

81:                                               ; preds = %originalBBpart212
  call void @usage(i32 0) #15, !dbg !495
  unreachable, !dbg !495

82:                                               ; preds = %originalBBpart212
  %83 = load i32, i32* @x.5
  %84 = load i32, i32* @y.6
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %82, %originalBB14alteredBB
  %91 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !497
  %92 = load i32, i32* @uname_mode, align 4, !dbg !497
  %93 = icmp eq i32 %92, 1, !dbg !497
  %94 = zext i1 %93 to i64, !dbg !497
  %95 = select i1 %93, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), !dbg !497
  %96 = load i8*, i8** @Version, align 8, !dbg !497
  call void (%struct._IO_FILE*, i8*, i8*, i8*, ...) @version_etc(%struct._IO_FILE* %91, i8* %95, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.23, i64 0, i64 0), i8* %96, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.30, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.31, i64 0, i64 0), i8* null), !dbg !497
  call void @exit(i32 0) #12, !dbg !497
  %97 = load i32, i32* @x.5
  %98 = load i32, i32* @y.6
  %99 = sub i32 %97, 1
  %100 = mul i32 %97, %99
  %101 = urem i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %102, %103
  br i1 %104, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  unreachable, !dbg !497

105:                                              ; preds = %originalBBpart212
  call void @usage(i32 1) #15, !dbg !498
  unreachable, !dbg !498

106:                                              ; preds = %originalBBpart28
  %107 = load i32, i32* @x.5
  %108 = load i32, i32* @y.6
  %109 = sub i32 %107, 1
  %110 = mul i32 %107, %109
  %111 = urem i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %108, 10
  %114 = or i1 %112, %113
  br i1 %114, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %106, %originalBB18alteredBB
  store i32 16, i32* %14, align 4, !dbg !499
  %115 = load i32, i32* @x.5
  %116 = load i32, i32* @y.6
  %117 = sub i32 %115, 1
  %118 = mul i32 %115, %117
  %119 = urem i32 %118, 2
  %120 = icmp eq i32 %119, 0
  %121 = icmp slt i32 %116, 10
  %122 = or i1 %120, %121
  br i1 %122, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %343, !dbg !500

123:                                              ; preds = %originalBBpart2
  br label %124, !dbg !501

124:                                              ; preds = %325, %123
  %125 = load i32, i32* @x.5
  %126 = load i32, i32* @y.6
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %124, %originalBB22alteredBB
  %133 = load i32, i32* %11, align 4, !dbg !503
  %134 = load i8**, i8*** %12, align 8, !dbg !504
  %135 = call i32 @getopt_long(i32 %133, i8** %134, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.32, i64 0, i64 0), %struct.option* getelementptr inbounds ([14 x %struct.option], [14 x %struct.option]* @uname_long_options, i64 0, i64 0), i32* null) #10, !dbg !505
  store i32 %135, i32* %13, align 4, !dbg !506
  %136 = icmp ne i32 %135, -1, !dbg !507
  %137 = load i32, i32* @x.5
  %138 = load i32, i32* @y.6
  %139 = sub i32 %137, 1
  %140 = mul i32 %137, %139
  %141 = urem i32 %140, 2
  %142 = icmp eq i32 %141, 0
  %143 = icmp slt i32 %138, 10
  %144 = or i1 %142, %143
  br i1 %144, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %136, label %145, label %326, !dbg !501

145:                                              ; preds = %originalBBpart224
  %146 = load i32, i32* %13, align 4, !dbg !508
  switch i32 %146, label %308 [
    i32 97, label %147
    i32 115, label %164
    i32 110, label %183
    i32 114, label %186
    i32 118, label %205
    i32 109, label %224
    i32 112, label %243
    i32 105, label %246
    i32 111, label %265
    i32 -130, label %284
    i32 -131, label %301
  ], !dbg !510

147:                                              ; preds = %145
  %148 = load i32, i32* @x.5
  %149 = load i32, i32* @y.6
  %150 = sub i32 %148, 1
  %151 = mul i32 %148, %150
  %152 = urem i32 %151, 2
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %153, %154
  br i1 %155, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %147, %originalBB26alteredBB
  store i32 -1, i32* %14, align 4, !dbg !511
  %156 = load i32, i32* @x.5
  %157 = load i32, i32* @y.6
  %158 = sub i32 %156, 1
  %159 = mul i32 %156, %158
  %160 = urem i32 %159, 2
  %161 = icmp eq i32 %160, 0
  %162 = icmp slt i32 %157, 10
  %163 = or i1 %161, %162
  br i1 %163, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %325, !dbg !513

164:                                              ; preds = %145
  %165 = load i32, i32* @x.5
  %166 = load i32, i32* @y.6
  %167 = sub i32 %165, 1
  %168 = mul i32 %165, %167
  %169 = urem i32 %168, 2
  %170 = icmp eq i32 %169, 0
  %171 = icmp slt i32 %166, 10
  %172 = or i1 %170, %171
  br i1 %172, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %164, %originalBB30alteredBB
  %173 = load i32, i32* %14, align 4, !dbg !514
  %174 = or i32 %173, 1, !dbg !514
  store i32 %174, i32* %14, align 4, !dbg !514
  %175 = load i32, i32* @x.5
  %176 = load i32, i32* @y.6
  %177 = sub i32 %175, 1
  %178 = mul i32 %175, %177
  %179 = urem i32 %178, 2
  %180 = icmp eq i32 %179, 0
  %181 = icmp slt i32 %176, 10
  %182 = or i1 %180, %181
  br i1 %182, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %325, !dbg !515

183:                                              ; preds = %145
  %184 = load i32, i32* %14, align 4, !dbg !516
  %185 = or i32 %184, 2, !dbg !516
  store i32 %185, i32* %14, align 4, !dbg !516
  br label %325, !dbg !517

186:                                              ; preds = %145
  %187 = load i32, i32* @x.5
  %188 = load i32, i32* @y.6
  %189 = sub i32 %187, 1
  %190 = mul i32 %187, %189
  %191 = urem i32 %190, 2
  %192 = icmp eq i32 %191, 0
  %193 = icmp slt i32 %188, 10
  %194 = or i1 %192, %193
  br i1 %194, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %186, %originalBB34alteredBB
  %195 = load i32, i32* %14, align 4, !dbg !518
  %196 = or i32 %195, 4, !dbg !518
  store i32 %196, i32* %14, align 4, !dbg !518
  %197 = load i32, i32* @x.5
  %198 = load i32, i32* @y.6
  %199 = sub i32 %197, 1
  %200 = mul i32 %197, %199
  %201 = urem i32 %200, 2
  %202 = icmp eq i32 %201, 0
  %203 = icmp slt i32 %198, 10
  %204 = or i1 %202, %203
  br i1 %204, label %originalBBpart247, label %originalBB34alteredBB

originalBBpart247:                                ; preds = %originalBB34
  br label %325, !dbg !519

205:                                              ; preds = %145
  %206 = load i32, i32* @x.5
  %207 = load i32, i32* @y.6
  %208 = sub i32 %206, 1
  %209 = mul i32 %206, %208
  %210 = urem i32 %209, 2
  %211 = icmp eq i32 %210, 0
  %212 = icmp slt i32 %207, 10
  %213 = or i1 %211, %212
  br i1 %213, label %originalBB49, label %originalBB49alteredBB

originalBB49:                                     ; preds = %205, %originalBB49alteredBB
  %214 = load i32, i32* %14, align 4, !dbg !520
  %215 = or i32 %214, 8, !dbg !520
  store i32 %215, i32* %14, align 4, !dbg !520
  %216 = load i32, i32* @x.5
  %217 = load i32, i32* @y.6
  %218 = sub i32 %216, 1
  %219 = mul i32 %216, %218
  %220 = urem i32 %219, 2
  %221 = icmp eq i32 %220, 0
  %222 = icmp slt i32 %217, 10
  %223 = or i1 %221, %222
  br i1 %223, label %originalBBpart252, label %originalBB49alteredBB

originalBBpart252:                                ; preds = %originalBB49
  br label %325, !dbg !521

224:                                              ; preds = %145
  %225 = load i32, i32* @x.5
  %226 = load i32, i32* @y.6
  %227 = sub i32 %225, 1
  %228 = mul i32 %225, %227
  %229 = urem i32 %228, 2
  %230 = icmp eq i32 %229, 0
  %231 = icmp slt i32 %226, 10
  %232 = or i1 %230, %231
  br i1 %232, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %224, %originalBB54alteredBB
  %233 = load i32, i32* %14, align 4, !dbg !522
  %234 = or i32 %233, 16, !dbg !522
  store i32 %234, i32* %14, align 4, !dbg !522
  %235 = load i32, i32* @x.5
  %236 = load i32, i32* @y.6
  %237 = sub i32 %235, 1
  %238 = mul i32 %235, %237
  %239 = urem i32 %238, 2
  %240 = icmp eq i32 %239, 0
  %241 = icmp slt i32 %236, 10
  %242 = or i1 %240, %241
  br i1 %242, label %originalBBpart267, label %originalBB54alteredBB

originalBBpart267:                                ; preds = %originalBB54
  br label %325, !dbg !523

243:                                              ; preds = %145
  %244 = load i32, i32* %14, align 4, !dbg !524
  %245 = or i32 %244, 32, !dbg !524
  store i32 %245, i32* %14, align 4, !dbg !524
  br label %325, !dbg !525

246:                                              ; preds = %145
  %247 = load i32, i32* @x.5
  %248 = load i32, i32* @y.6
  %249 = sub i32 %247, 1
  %250 = mul i32 %247, %249
  %251 = urem i32 %250, 2
  %252 = icmp eq i32 %251, 0
  %253 = icmp slt i32 %248, 10
  %254 = or i1 %252, %253
  br i1 %254, label %originalBB69, label %originalBB69alteredBB

originalBB69:                                     ; preds = %246, %originalBB69alteredBB
  %255 = load i32, i32* %14, align 4, !dbg !526
  %256 = or i32 %255, 64, !dbg !526
  store i32 %256, i32* %14, align 4, !dbg !526
  %257 = load i32, i32* @x.5
  %258 = load i32, i32* @y.6
  %259 = sub i32 %257, 1
  %260 = mul i32 %257, %259
  %261 = urem i32 %260, 2
  %262 = icmp eq i32 %261, 0
  %263 = icmp slt i32 %258, 10
  %264 = or i1 %262, %263
  br i1 %264, label %originalBBpart271, label %originalBB69alteredBB

originalBBpart271:                                ; preds = %originalBB69
  br label %325, !dbg !527

265:                                              ; preds = %145
  %266 = load i32, i32* @x.5
  %267 = load i32, i32* @y.6
  %268 = sub i32 %266, 1
  %269 = mul i32 %266, %268
  %270 = urem i32 %269, 2
  %271 = icmp eq i32 %270, 0
  %272 = icmp slt i32 %267, 10
  %273 = or i1 %271, %272
  br i1 %273, label %originalBB73, label %originalBB73alteredBB

originalBB73:                                     ; preds = %265, %originalBB73alteredBB
  %274 = load i32, i32* %14, align 4, !dbg !528
  %275 = or i32 %274, 128, !dbg !528
  store i32 %275, i32* %14, align 4, !dbg !528
  %276 = load i32, i32* @x.5
  %277 = load i32, i32* @y.6
  %278 = sub i32 %276, 1
  %279 = mul i32 %276, %278
  %280 = urem i32 %279, 2
  %281 = icmp eq i32 %280, 0
  %282 = icmp slt i32 %277, 10
  %283 = or i1 %281, %282
  br i1 %283, label %originalBBpart283, label %originalBB73alteredBB

originalBBpart283:                                ; preds = %originalBB73
  br label %325, !dbg !529

284:                                              ; preds = %145
  %285 = load i32, i32* @x.5
  %286 = load i32, i32* @y.6
  %287 = sub i32 %285, 1
  %288 = mul i32 %285, %287
  %289 = urem i32 %288, 2
  %290 = icmp eq i32 %289, 0
  %291 = icmp slt i32 %286, 10
  %292 = or i1 %290, %291
  br i1 %292, label %originalBB85, label %originalBB85alteredBB

originalBB85:                                     ; preds = %284, %originalBB85alteredBB
  call void @usage(i32 0) #15, !dbg !530
  %293 = load i32, i32* @x.5
  %294 = load i32, i32* @y.6
  %295 = sub i32 %293, 1
  %296 = mul i32 %293, %295
  %297 = urem i32 %296, 2
  %298 = icmp eq i32 %297, 0
  %299 = icmp slt i32 %294, 10
  %300 = or i1 %298, %299
  br i1 %300, label %originalBBpart287, label %originalBB85alteredBB

originalBBpart287:                                ; preds = %originalBB85
  unreachable, !dbg !530

301:                                              ; preds = %145
  %302 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !531
  %303 = load i32, i32* @uname_mode, align 4, !dbg !531
  %304 = icmp eq i32 %303, 1, !dbg !531
  %305 = zext i1 %304 to i64, !dbg !531
  %306 = select i1 %304, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), !dbg !531
  %307 = load i8*, i8** @Version, align 8, !dbg !531
  call void (%struct._IO_FILE*, i8*, i8*, i8*, ...) @version_etc(%struct._IO_FILE* %302, i8* %306, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.23, i64 0, i64 0), i8* %307, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.30, i64 0, i64 0), i8* null), !dbg !531
  call void @exit(i32 0) #12, !dbg !531
  unreachable, !dbg !531

308:                                              ; preds = %145
  %309 = load i32, i32* @x.5
  %310 = load i32, i32* @y.6
  %311 = sub i32 %309, 1
  %312 = mul i32 %309, %311
  %313 = urem i32 %312, 2
  %314 = icmp eq i32 %313, 0
  %315 = icmp slt i32 %310, 10
  %316 = or i1 %314, %315
  br i1 %316, label %originalBB89, label %originalBB89alteredBB

originalBB89:                                     ; preds = %308, %originalBB89alteredBB
  call void @usage(i32 1) #15, !dbg !532
  %317 = load i32, i32* @x.5
  %318 = load i32, i32* @y.6
  %319 = sub i32 %317, 1
  %320 = mul i32 %317, %319
  %321 = urem i32 %320, 2
  %322 = icmp eq i32 %321, 0
  %323 = icmp slt i32 %318, 10
  %324 = or i1 %322, %323
  br i1 %324, label %originalBBpart291, label %originalBB89alteredBB

originalBBpart291:                                ; preds = %originalBB89
  unreachable, !dbg !532

325:                                              ; preds = %originalBBpart283, %originalBBpart271, %243, %originalBBpart267, %originalBBpart252, %originalBBpart247, %183, %originalBBpart232, %originalBBpart228
  br label %124, !dbg !501, !llvm.loop !533

326:                                              ; preds = %originalBBpart224
  %327 = load i32, i32* @x.5
  %328 = load i32, i32* @y.6
  %329 = sub i32 %327, 1
  %330 = mul i32 %327, %329
  %331 = urem i32 %330, 2
  %332 = icmp eq i32 %331, 0
  %333 = icmp slt i32 %328, 10
  %334 = or i1 %332, %333
  br i1 %334, label %originalBB93, label %originalBB93alteredBB

originalBB93:                                     ; preds = %326, %originalBB93alteredBB
  %335 = load i32, i32* @x.5
  %336 = load i32, i32* @y.6
  %337 = sub i32 %335, 1
  %338 = mul i32 %335, %337
  %339 = urem i32 %338, 2
  %340 = icmp eq i32 %339, 0
  %341 = icmp slt i32 %336, 10
  %342 = or i1 %340, %341
  br i1 %342, label %originalBBpart295, label %originalBB93alteredBB

originalBBpart295:                                ; preds = %originalBB93
  br label %343

343:                                              ; preds = %originalBBpart295, %originalBBpart220
  %344 = load i32, i32* %11, align 4, !dbg !535
  %345 = load i32, i32* @optind, align 4, !dbg !537
  %346 = icmp ne i32 %344, %345, !dbg !538
  br i1 %346, label %347, label %371, !dbg !539

347:                                              ; preds = %343
  %348 = load i32, i32* @x.5
  %349 = load i32, i32* @y.6
  %350 = sub i32 %348, 1
  %351 = mul i32 %348, %350
  %352 = urem i32 %351, 2
  %353 = icmp eq i32 %352, 0
  %354 = icmp slt i32 %349, 10
  %355 = or i1 %353, %354
  br i1 %355, label %originalBB97, label %originalBB97alteredBB

originalBB97:                                     ; preds = %347, %originalBB97alteredBB
  %356 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.33, i64 0, i64 0)) #10, !dbg !540
  %357 = load i8**, i8*** %12, align 8, !dbg !542
  %358 = load i32, i32* @optind, align 4, !dbg !543
  %359 = sext i32 %358 to i64, !dbg !542
  %360 = getelementptr inbounds i8*, i8** %357, i64 %359, !dbg !542
  %361 = load i8*, i8** %360, align 8, !dbg !542
  %362 = call i8* @quote(i8* %361), !dbg !544
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %356, i8* %362), !dbg !545
  call void @usage(i32 1) #15, !dbg !546
  %363 = load i32, i32* @x.5
  %364 = load i32, i32* @y.6
  %365 = sub i32 %363, 1
  %366 = mul i32 %363, %365
  %367 = urem i32 %366, 2
  %368 = icmp eq i32 %367, 0
  %369 = icmp slt i32 %364, 10
  %370 = or i1 %368, %369
  br i1 %370, label %originalBBpart299, label %originalBB97alteredBB

originalBBpart299:                                ; preds = %originalBB97
  unreachable, !dbg !546

371:                                              ; preds = %343
  %372 = load i32, i32* %14, align 4, !dbg !547
  ret i32 %372, !dbg !548

originalBBalteredBB:                              ; preds = %originalBB, %2
  %373 = alloca i32, align 4
  %374 = alloca i8**, align 8
  %375 = alloca i32, align 4
  %376 = alloca i32, align 4
  store i32 %0, i32* %373, align 4
  call void @llvm.dbg.declare(metadata i32* %373, metadata !549, metadata !DIExpression()), !dbg !474
  store i8** %1, i8*** %374, align 8
  call void @llvm.dbg.declare(metadata i8*** %374, metadata !572, metadata !DIExpression()), !dbg !476
  call void @llvm.dbg.declare(metadata i32* %375, metadata !573, metadata !DIExpression()), !dbg !478
  call void @llvm.dbg.declare(metadata i32* %376, metadata !574, metadata !DIExpression()), !dbg !480
  store i32 0, i32* %376, align 4, !dbg !480
  %377 = load i32, i32* @uname_mode, align 4, !dbg !481
  %378 = icmp eq i32 %377, 2, !dbg !483
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %25
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %42
  %379 = load i32, i32* %11, align 4, !dbg !487
  %380 = load i8**, i8*** %12, align 8, !dbg !488
  %381 = call i32 @getopt_long(i32 %379, i8** %380, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.9, i64 0, i64 0), %struct.option* getelementptr inbounds ([3 x %struct.option], [3 x %struct.option]* @arch_long_options, i64 0, i64 0), i32* null) #10, !dbg !489
  store i32 %381, i32* %13, align 4, !dbg !490
  %382 = icmp ne i32 %381, -1, !dbg !491
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %63
  %383 = load i32, i32* %13, align 4, !dbg !492
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %82
  %384 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !497
  %385 = load i32, i32* @uname_mode, align 4, !dbg !497
  %386 = icmp eq i32 %385, 1, !dbg !497
  %387 = zext i1 %386 to i64, !dbg !497
  %388 = select i1 %386, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), !dbg !497
  %389 = load i8*, i8** @Version, align 8, !dbg !497
  call void (%struct._IO_FILE*, i8*, i8*, i8*, ...) @version_etc(%struct._IO_FILE* %384, i8* %388, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.23, i64 0, i64 0), i8* %389, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.30, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.31, i64 0, i64 0), i8* null), !dbg !497
  call void @exit(i32 0) #12, !dbg !497
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %106
  store i32 16, i32* %14, align 4, !dbg !499
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %124
  %390 = load i32, i32* %11, align 4, !dbg !503
  %391 = load i8**, i8*** %12, align 8, !dbg !504
  %392 = call i32 @getopt_long(i32 %390, i8** %391, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.32, i64 0, i64 0), %struct.option* getelementptr inbounds ([14 x %struct.option], [14 x %struct.option]* @uname_long_options, i64 0, i64 0), i32* null) #10, !dbg !505
  store i32 %392, i32* %13, align 4, !dbg !506
  %393 = icmp ne i32 %392, -1, !dbg !507
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %147
  store i32 -1, i32* %14, align 4, !dbg !511
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %164
  %394 = load i32, i32* %14, align 4, !dbg !514
  %_ = shl i32 %394, 1
  %395 = or i32 %394, 1, !dbg !514
  store i32 %395, i32* %14, align 4, !dbg !514
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %186
  %396 = load i32, i32* %14, align 4, !dbg !518
  %_35 = shl i32 %396, 4
  %_36 = sub i32 %396, 4
  %gen = mul i32 %_36, 4
  %_37 = sub i32 0, %396
  %gen38 = add i32 %_37, 4
  %_39 = sub i32 %396, 4
  %gen40 = mul i32 %_39, 4
  %_41 = sub i32 0, %396
  %gen42 = add i32 %_41, 4
  %_43 = shl i32 %396, 4
  %_44 = sub i32 %396, 4
  %gen45 = mul i32 %_44, 4
  %397 = or i32 %396, 4, !dbg !518
  store i32 %397, i32* %14, align 4, !dbg !518
  br label %originalBB34

originalBB49alteredBB:                            ; preds = %originalBB49, %205
  %398 = load i32, i32* %14, align 4, !dbg !520
  %_50 = shl i32 %398, 8
  %399 = or i32 %398, 8, !dbg !520
  store i32 %399, i32* %14, align 4, !dbg !520
  br label %originalBB49

originalBB54alteredBB:                            ; preds = %originalBB54, %224
  %400 = load i32, i32* %14, align 4, !dbg !522
  %_55 = sub i32 0, %400
  %gen56 = add i32 %_55, 16
  %_57 = shl i32 %400, 16
  %_58 = sub i32 0, %400
  %gen59 = add i32 %_58, 16
  %_60 = sub i32 %400, 16
  %gen61 = mul i32 %_60, 16
  %_62 = sub i32 0, %400
  %gen63 = add i32 %_62, 16
  %_64 = sub i32 %400, 16
  %gen65 = mul i32 %_64, 16
  %401 = or i32 %400, 16, !dbg !522
  store i32 %401, i32* %14, align 4, !dbg !522
  br label %originalBB54

originalBB69alteredBB:                            ; preds = %originalBB69, %246
  %402 = load i32, i32* %14, align 4, !dbg !526
  %403 = or i32 %402, 64, !dbg !526
  store i32 %403, i32* %14, align 4, !dbg !526
  br label %originalBB69

originalBB73alteredBB:                            ; preds = %originalBB73, %265
  %404 = load i32, i32* %14, align 4, !dbg !528
  %_74 = sub i32 0, %404
  %gen75 = add i32 %_74, 128
  %_76 = sub i32 %404, 128
  %gen77 = mul i32 %_76, 128
  %_78 = shl i32 %404, 128
  %_79 = shl i32 %404, 128
  %_80 = sub i32 %404, 128
  %gen81 = mul i32 %_80, 128
  %405 = or i32 %404, 128, !dbg !528
  store i32 %405, i32* %14, align 4, !dbg !528
  br label %originalBB73

originalBB85alteredBB:                            ; preds = %originalBB85, %284
  call void @usage(i32 0) #15, !dbg !530
  br label %originalBB85

originalBB89alteredBB:                            ; preds = %originalBB89, %308
  call void @usage(i32 1) #15, !dbg !532
  br label %originalBB89

originalBB93alteredBB:                            ; preds = %originalBB93, %326
  br label %originalBB93

originalBB97alteredBB:                            ; preds = %originalBB97, %347
  %406 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.33, i64 0, i64 0)) #10, !dbg !540
  %407 = load i8**, i8*** %12, align 8, !dbg !542
  %408 = load i32, i32* @optind, align 4, !dbg !543
  %409 = sext i32 %408 to i64, !dbg !542
  %410 = getelementptr inbounds i8*, i8** %407, i64 %409, !dbg !542
  %411 = load i8*, i8** %410, align 8, !dbg !542
  %412 = call i8* @quote(i8* %411), !dbg !544
  call void (i32, i32, i8*, ...) @error(i32 0, i32 0, i8* %406, i8* %412), !dbg !545
  call void @usage(i32 1) #15, !dbg !546
  br label %originalBB97
}

; Function Attrs: nounwind
declare dso_local i32 @uname(%struct.utsname*) #2

; Function Attrs: nounwind readnone
declare dso_local i32* @__errno_location() #8

declare dso_local void @error(i32, i32, i8*, ...) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_element(i8*) #4 !dbg !38 {
  %2 = load i32, i32* @x.7
  %3 = load i32, i32* @y.8
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !575, metadata !DIExpression()), !dbg !576
  %11 = load i8, i8* @print_element.printed, align 1, !dbg !577
  %12 = trunc i8 %11 to i1, !dbg !577
  %13 = load i32, i32* @x.7
  %14 = load i32, i32* @y.8
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %21, label %39, !dbg !579

21:                                               ; preds = %originalBBpart2
  %22 = load i32, i32* @x.7
  %23 = load i32, i32* @y.8
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  %30 = call i32 @putchar_unlocked(i32 32), !dbg !580
  %31 = load i32, i32* @x.7
  %32 = load i32, i32* @y.8
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %39, !dbg !580

39:                                               ; preds = %originalBBpart24, %originalBBpart2
  %40 = load i32, i32* @x.7
  %41 = load i32, i32* @y.8
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %39, %originalBB6alteredBB
  store i8 1, i8* @print_element.printed, align 1, !dbg !581
  %48 = load i8*, i8** %10, align 8, !dbg !582
  %49 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !582
  %50 = call i32 @fputs_unlocked(i8* %48, %struct._IO_FILE* %49), !dbg !582
  %51 = load i32, i32* @x.7
  %52 = load i32, i32* @y.8
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  ret void, !dbg !583

originalBBalteredBB:                              ; preds = %originalBB, %1
  %59 = alloca i8*, align 8
  store i8* %0, i8** %59, align 8
  call void @llvm.dbg.declare(metadata i8** %59, metadata !584, metadata !DIExpression()), !dbg !576
  %60 = load i8, i8* @print_element.printed, align 1, !dbg !577
  %61 = trunc i8 %60 to i1, !dbg !577
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  %62 = call i32 @putchar_unlocked(i32 32), !dbg !580
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %39
  store i8 1, i8* @print_element.printed, align 1, !dbg !581
  %63 = load i8*, i8** %10, align 8, !dbg !582
  %64 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !582
  %65 = call i32 @fputs_unlocked(i8* %63, %struct._IO_FILE* %64), !dbg !582
  br label %originalBB6
}

declare dso_local i32 @putchar_unlocked(i32) #3

; Function Attrs: nounwind
declare dso_local i32 @getopt_long(i32, i8**, i8*, %struct.option*, i32*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @close_stdout() #4 !dbg !606 {
  %1 = load i32, i32* @x.9
  %2 = load i32, i32* @y.10
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = alloca i8*, align 8
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !609
  %11 = call i32 @close_stream(%struct._IO_FILE* %10), !dbg !611
  %12 = icmp ne i32 %11, 0, !dbg !612
  %13 = load i32, i32* @x.9
  %14 = load i32, i32* @y.10
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %21, label %124, !dbg !613

21:                                               ; preds = %originalBBpart2
  %22 = load i8, i8* @ignore_EPIPE, align 1, !dbg !614
  %23 = trunc i8 %22 to i1, !dbg !614
  br i1 %23, label %24, label %44, !dbg !615

24:                                               ; preds = %21
  %25 = load i32, i32* @x.9
  %26 = load i32, i32* @y.10
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %24, %originalBB1alteredBB
  %33 = call i32* @__errno_location() #14, !dbg !616
  %34 = load i32, i32* %33, align 4, !dbg !616
  %35 = icmp eq i32 %34, 32, !dbg !617
  %36 = load i32, i32* @x.9
  %37 = load i32, i32* @y.10
  %38 = sub i32 %36, 1
  %39 = mul i32 %36, %38
  %40 = urem i32 %39, 2
  %41 = icmp eq i32 %40, 0
  %42 = icmp slt i32 %37, 10
  %43 = or i1 %41, %42
  br i1 %43, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %35, label %124, label %44, !dbg !618

44:                                               ; preds = %originalBBpart24, %21
  call void @llvm.dbg.declare(metadata i8** %9, metadata !619, metadata !DIExpression()), !dbg !621
  %45 = load i32, i32* @x.9
  %46 = load i32, i32* @y.10
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %44, %originalBB6alteredBB
  %53 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.50, i64 0, i64 0)) #10, !dbg !622
  store i8* %53, i8** %9, align 8, !dbg !621
  %54 = load i8*, i8** @file_name, align 8, !dbg !623
  %55 = icmp ne i8* %54, null, !dbg !623
  %56 = load i32, i32* @x.9
  %57 = load i32, i32* @y.10
  %58 = sub i32 %56, 1
  %59 = mul i32 %56, %58
  %60 = urem i32 %59, 2
  %61 = icmp eq i32 %60, 0
  %62 = icmp slt i32 %57, 10
  %63 = or i1 %61, %62
  br i1 %63, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %55, label %64, label %86, !dbg !625

64:                                               ; preds = %originalBBpart28
  %65 = load i32, i32* @x.9
  %66 = load i32, i32* @y.10
  %67 = sub i32 %65, 1
  %68 = mul i32 %65, %67
  %69 = urem i32 %68, 2
  %70 = icmp eq i32 %69, 0
  %71 = icmp slt i32 %66, 10
  %72 = or i1 %70, %71
  br i1 %72, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %64, %originalBB10alteredBB
  %73 = call i32* @__errno_location() #14, !dbg !626
  %74 = load i32, i32* %73, align 4, !dbg !626
  %75 = load i8*, i8** @file_name, align 8, !dbg !627
  %76 = call i8* @quotearg_colon(i8* %75), !dbg !628
  %77 = load i8*, i8** %9, align 8, !dbg !629
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %74, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.51, i64 0, i64 0), i8* %76, i8* %77), !dbg !630
  %78 = load i32, i32* @x.9
  %79 = load i32, i32* @y.10
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %106, !dbg !630

86:                                               ; preds = %originalBBpart28
  %87 = load i32, i32* @x.9
  %88 = load i32, i32* @y.10
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %86, %originalBB14alteredBB
  %95 = call i32* @__errno_location() #14, !dbg !631
  %96 = load i32, i32* %95, align 4, !dbg !631
  %97 = load i8*, i8** %9, align 8, !dbg !632
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %96, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.52, i64 0, i64 0), i8* %97), !dbg !633
  %98 = load i32, i32* @x.9
  %99 = load i32, i32* @y.10
  %100 = sub i32 %98, 1
  %101 = mul i32 %98, %100
  %102 = urem i32 %101, 2
  %103 = icmp eq i32 %102, 0
  %104 = icmp slt i32 %99, 10
  %105 = or i1 %103, %104
  br i1 %105, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %106

106:                                              ; preds = %originalBBpart216, %originalBBpart212
  %107 = load i32, i32* @x.9
  %108 = load i32, i32* @y.10
  %109 = sub i32 %107, 1
  %110 = mul i32 %107, %109
  %111 = urem i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %108, 10
  %114 = or i1 %112, %113
  br i1 %114, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %106, %originalBB18alteredBB
  %115 = load volatile i32, i32* @exit_failure, align 4, !dbg !634
  call void @_exit(i32 %115) #15, !dbg !635
  %116 = load i32, i32* @x.9
  %117 = load i32, i32* @y.10
  %118 = sub i32 %116, 1
  %119 = mul i32 %116, %118
  %120 = urem i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %117, 10
  %123 = or i1 %121, %122
  br i1 %123, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  unreachable, !dbg !635

124:                                              ; preds = %originalBBpart24, %originalBBpart2
  %125 = load i32, i32* @x.9
  %126 = load i32, i32* @y.10
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %124, %originalBB22alteredBB
  %133 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !636
  %134 = call i32 @close_stream(%struct._IO_FILE* %133), !dbg !638
  %135 = icmp ne i32 %134, 0, !dbg !639
  %136 = load i32, i32* @x.9
  %137 = load i32, i32* @y.10
  %138 = sub i32 %136, 1
  %139 = mul i32 %136, %138
  %140 = urem i32 %139, 2
  %141 = icmp eq i32 %140, 0
  %142 = icmp slt i32 %137, 10
  %143 = or i1 %141, %142
  br i1 %143, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br i1 %135, label %144, label %162, !dbg !640

144:                                              ; preds = %originalBBpart224
  %145 = load i32, i32* @x.9
  %146 = load i32, i32* @y.10
  %147 = sub i32 %145, 1
  %148 = mul i32 %145, %147
  %149 = urem i32 %148, 2
  %150 = icmp eq i32 %149, 0
  %151 = icmp slt i32 %146, 10
  %152 = or i1 %150, %151
  br i1 %152, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %144, %originalBB26alteredBB
  %153 = load volatile i32, i32* @exit_failure, align 4, !dbg !641
  call void @_exit(i32 %153) #15, !dbg !642
  %154 = load i32, i32* @x.9
  %155 = load i32, i32* @y.10
  %156 = sub i32 %154, 1
  %157 = mul i32 %154, %156
  %158 = urem i32 %157, 2
  %159 = icmp eq i32 %158, 0
  %160 = icmp slt i32 %155, 10
  %161 = or i1 %159, %160
  br i1 %161, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  unreachable, !dbg !642

162:                                              ; preds = %originalBBpart224
  %163 = load i32, i32* @x.9
  %164 = load i32, i32* @y.10
  %165 = sub i32 %163, 1
  %166 = mul i32 %163, %165
  %167 = urem i32 %166, 2
  %168 = icmp eq i32 %167, 0
  %169 = icmp slt i32 %164, 10
  %170 = or i1 %168, %169
  br i1 %170, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %162, %originalBB30alteredBB
  %171 = load i32, i32* @x.9
  %172 = load i32, i32* @y.10
  %173 = sub i32 %171, 1
  %174 = mul i32 %171, %173
  %175 = urem i32 %174, 2
  %176 = icmp eq i32 %175, 0
  %177 = icmp slt i32 %172, 10
  %178 = or i1 %176, %177
  br i1 %178, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  ret void, !dbg !643

originalBBalteredBB:                              ; preds = %originalBB, %0
  %179 = alloca i8*, align 8
  %180 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8, !dbg !609
  %181 = call i32 @close_stream(%struct._IO_FILE* %180), !dbg !611
  %182 = icmp ne i32 %181, 0, !dbg !612
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %24
  %183 = call i32* @__errno_location() #14, !dbg !616
  %184 = load i32, i32* %183, align 4, !dbg !616
  %185 = icmp eq i32 %184, 32, !dbg !617
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %44
  %186 = call i8* @gettext(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.50, i64 0, i64 0)) #10, !dbg !622
  store i8* %186, i8** %9, align 8, !dbg !621
  %187 = load i8*, i8** @file_name, align 8, !dbg !623
  %188 = icmp ne i8* %187, null, !dbg !623
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %64
  %189 = call i32* @__errno_location() #14, !dbg !626
  %190 = load i32, i32* %189, align 4, !dbg !626
  %191 = load i8*, i8** @file_name, align 8, !dbg !627
  %192 = call i8* @quotearg_colon(i8* %191), !dbg !628
  %193 = load i8*, i8** %9, align 8, !dbg !629
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %190, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.51, i64 0, i64 0), i8* %192, i8* %193), !dbg !630
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %86
  %194 = call i32* @__errno_location() #14, !dbg !631
  %195 = load i32, i32* %194, align 4, !dbg !631
  %196 = load i8*, i8** %9, align 8, !dbg !632
  call void (i32, i32, i8*, ...) @error(i32 0, i32 %195, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.52, i64 0, i64 0), i8* %196), !dbg !633
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %106
  %197 = load volatile i32, i32* @exit_failure, align 4, !dbg !634
  call void @_exit(i32 %197) #15, !dbg !635
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %124
  %198 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !636
  %199 = call i32 @close_stream(%struct._IO_FILE* %198), !dbg !638
  %200 = icmp ne i32 %199, 0, !dbg !639
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %144
  %201 = load volatile i32, i32* @exit_failure, align 4, !dbg !641
  call void @_exit(i32 %201) #15, !dbg !642
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %162
  br label %originalBB30
}

; Function Attrs: noreturn
declare dso_local void @_exit(i32) #9

; Function Attrs: noinline nounwind optnone uwtable
define internal void @set_program_name(i8*) #4 !dbg !644 {
  %2 = alloca i8*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  call void @llvm.dbg.declare(metadata i8** %2, metadata !645, metadata !DIExpression()), !dbg !646
  call void @llvm.dbg.declare(metadata i8** %3, metadata !647, metadata !DIExpression()), !dbg !648
  call void @llvm.dbg.declare(metadata i8** %4, metadata !649, metadata !DIExpression()), !dbg !650
  %5 = load i8*, i8** %2, align 8, !dbg !651
  %6 = icmp eq i8* %5, null, !dbg !653
  br i1 %6, label %7, label %26, !dbg !654

7:                                                ; preds = %1
  %8 = load i32, i32* @x.11
  %9 = load i32, i32* @y.12
  %10 = sub i32 %8, 1
  %11 = mul i32 %8, %10
  %12 = urem i32 %11, 2
  %13 = icmp eq i32 %12, 0
  %14 = icmp slt i32 %9, 10
  %15 = or i1 %13, %14
  br i1 %15, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %7, %originalBBalteredBB
  %16 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !655
  %17 = call i32 @fputs(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.57, i64 0, i64 0), %struct._IO_FILE* %16), !dbg !657
  call void @abort() #12, !dbg !658
  %18 = load i32, i32* @x.11
  %19 = load i32, i32* @y.12
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  unreachable, !dbg !658

26:                                               ; preds = %1
  %27 = load i8*, i8** %2, align 8, !dbg !659
  %28 = call i8* @strrchr(i8* %27, i32 47) #13, !dbg !660
  store i8* %28, i8** %3, align 8, !dbg !661
  %29 = load i8*, i8** %3, align 8, !dbg !662
  %30 = icmp ne i8* %29, null, !dbg !663
  br i1 %30, label %31, label %34, !dbg !662

31:                                               ; preds = %26
  %32 = load i8*, i8** %3, align 8, !dbg !664
  %33 = getelementptr inbounds i8, i8* %32, i64 1, !dbg !665
  br label %52, !dbg !662

34:                                               ; preds = %26
  %35 = load i32, i32* @x.11
  %36 = load i32, i32* @y.12
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %34, %originalBB1alteredBB
  %43 = load i8*, i8** %2, align 8, !dbg !666
  %44 = load i32, i32* @x.11
  %45 = load i32, i32* @y.12
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %52, !dbg !662

52:                                               ; preds = %originalBBpart24, %31
  %53 = phi i8* [ %33, %31 ], [ %43, %originalBBpart24 ], !dbg !662
  store i8* %53, i8** %4, align 8, !dbg !667
  %54 = load i8*, i8** %4, align 8, !dbg !668
  %55 = load i8*, i8** %2, align 8, !dbg !670
  %56 = ptrtoint i8* %54 to i64, !dbg !671
  %57 = ptrtoint i8* %55 to i64, !dbg !671
  %58 = sub i64 %56, %57, !dbg !671
  %59 = icmp sge i64 %58, 7, !dbg !672
  br i1 %59, label %60, label %139, !dbg !673

60:                                               ; preds = %52
  %61 = load i32, i32* @x.11
  %62 = load i32, i32* @y.12
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %60, %originalBB6alteredBB
  %69 = load i8*, i8** %4, align 8, !dbg !674
  %70 = getelementptr inbounds i8, i8* %69, i64 -7, !dbg !675
  %71 = call i32 @strncmp(i8* %70, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1.58, i64 0, i64 0), i64 7) #13, !dbg !676
  %72 = icmp eq i32 %71, 0, !dbg !677
  %73 = load i32, i32* @x.11
  %74 = load i32, i32* @y.12
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %72, label %81, label %139, !dbg !678

81:                                               ; preds = %originalBBpart28
  %82 = load i32, i32* @x.11
  %83 = load i32, i32* @y.12
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %81, %originalBB10alteredBB
  %90 = load i8*, i8** %4, align 8, !dbg !679
  store i8* %90, i8** %2, align 8, !dbg !681
  %91 = load i8*, i8** %4, align 8, !dbg !682
  %92 = call i32 @strncmp(i8* %91, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.59, i64 0, i64 0), i64 3) #13, !dbg !684
  %93 = icmp eq i32 %92, 0, !dbg !685
  %94 = load i32, i32* @x.11
  %95 = load i32, i32* @y.12
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %93, label %102, label %122, !dbg !686

102:                                              ; preds = %originalBBpart212
  %103 = load i32, i32* @x.11
  %104 = load i32, i32* @y.12
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %102, %originalBB14alteredBB
  %111 = load i8*, i8** %4, align 8, !dbg !687
  %112 = getelementptr inbounds i8, i8* %111, i64 3, !dbg !689
  store i8* %112, i8** %2, align 8, !dbg !690
  %113 = load i8*, i8** %2, align 8, !dbg !691
  store i8* %113, i8** @program_invocation_short_name, align 8, !dbg !692
  %114 = load i32, i32* @x.11
  %115 = load i32, i32* @y.12
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %122, !dbg !693

122:                                              ; preds = %originalBBpart216, %originalBBpart212
  %123 = load i32, i32* @x.11
  %124 = load i32, i32* @y.12
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %122, %originalBB18alteredBB
  %131 = load i32, i32* @x.11
  %132 = load i32, i32* @y.12
  %133 = sub i32 %131, 1
  %134 = mul i32 %131, %133
  %135 = urem i32 %134, 2
  %136 = icmp eq i32 %135, 0
  %137 = icmp slt i32 %132, 10
  %138 = or i1 %136, %137
  br i1 %138, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %139, !dbg !694

139:                                              ; preds = %originalBBpart220, %originalBBpart28, %52
  %140 = load i32, i32* @x.11
  %141 = load i32, i32* @y.12
  %142 = sub i32 %140, 1
  %143 = mul i32 %140, %142
  %144 = urem i32 %143, 2
  %145 = icmp eq i32 %144, 0
  %146 = icmp slt i32 %141, 10
  %147 = or i1 %145, %146
  br i1 %147, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %139, %originalBB22alteredBB
  %148 = load i8*, i8** %2, align 8, !dbg !695
  store i8* %148, i8** @program_name, align 8, !dbg !696
  %149 = load i8*, i8** %2, align 8, !dbg !697
  store i8* %149, i8** @program_invocation_name, align 8, !dbg !698
  %150 = load i32, i32* @x.11
  %151 = load i32, i32* @y.12
  %152 = sub i32 %150, 1
  %153 = mul i32 %150, %152
  %154 = urem i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %155, %156
  br i1 %157, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  ret void, !dbg !699

originalBBalteredBB:                              ; preds = %originalBB, %7
  %158 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !655
  %159 = call i32 @fputs(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.57, i64 0, i64 0), %struct._IO_FILE* %158), !dbg !657
  call void @abort() #12, !dbg !658
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %34
  %160 = load i8*, i8** %2, align 8, !dbg !666
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %60
  %161 = load i8*, i8** %4, align 8, !dbg !674
  %162 = getelementptr inbounds i8, i8* %161, i64 -7, !dbg !675
  %163 = call i32 @strncmp(i8* %162, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1.58, i64 0, i64 0), i64 7) #13, !dbg !676
  %164 = icmp eq i32 %163, 0, !dbg !677
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %81
  %165 = load i8*, i8** %4, align 8, !dbg !679
  store i8* %165, i8** %2, align 8, !dbg !681
  %166 = load i8*, i8** %4, align 8, !dbg !682
  %167 = call i32 @strncmp(i8* %166, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.59, i64 0, i64 0), i64 3) #13, !dbg !684
  %168 = icmp eq i32 %167, 0, !dbg !685
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %102
  %169 = load i8*, i8** %4, align 8, !dbg !687
  %170 = getelementptr inbounds i8, i8* %169, i64 3, !dbg !689
  store i8* %170, i8** %2, align 8, !dbg !690
  %171 = load i8*, i8** %2, align 8, !dbg !691
  store i8* %171, i8** @program_invocation_short_name, align 8, !dbg !692
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %122
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %139
  %172 = load i8*, i8** %2, align 8, !dbg !695
  store i8* %172, i8** @program_name, align 8, !dbg !696
  %173 = load i8*, i8** %2, align 8, !dbg !697
  store i8* %173, i8** @program_invocation_name, align 8, !dbg !698
  br label %originalBB22
}

declare dso_local i32 @fputs(i8*, %struct._IO_FILE*) #3

; Function Attrs: noreturn nounwind
declare dso_local void @abort() #5

; Function Attrs: nounwind readonly
declare dso_local i8* @strrchr(i8*, i32) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @set_char_quoting(%struct.quoting_options*, i8 signext, i32) #4 !dbg !700 {
  %4 = load i32, i32* @x.13
  %5 = load i32, i32* @y.14
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca %struct.quoting_options*, align 8
  %13 = alloca i8, align 1
  %14 = alloca i32, align 4
  %15 = alloca i8, align 1
  %16 = alloca i32*, align 8
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  store %struct.quoting_options* %0, %struct.quoting_options** %12, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %12, metadata !704, metadata !DIExpression()), !dbg !705
  store i8 %1, i8* %13, align 1
  call void @llvm.dbg.declare(metadata i8* %13, metadata !706, metadata !DIExpression()), !dbg !707
  store i32 %2, i32* %14, align 4
  call void @llvm.dbg.declare(metadata i32* %14, metadata !708, metadata !DIExpression()), !dbg !709
  call void @llvm.dbg.declare(metadata i8* %15, metadata !710, metadata !DIExpression()), !dbg !711
  %19 = load i8, i8* %13, align 1, !dbg !712
  store i8 %19, i8* %15, align 1, !dbg !711
  call void @llvm.dbg.declare(metadata i32** %16, metadata !713, metadata !DIExpression()), !dbg !715
  %20 = load %struct.quoting_options*, %struct.quoting_options** %12, align 8, !dbg !716
  %21 = icmp ne %struct.quoting_options* %20, null, !dbg !716
  %22 = load i32, i32* @x.13
  %23 = load i32, i32* @y.14
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %21, label %30, label %48, !dbg !716

30:                                               ; preds = %originalBBpart2
  %31 = load i32, i32* @x.13
  %32 = load i32, i32* @y.14
  %33 = sub i32 %31, 1
  %34 = mul i32 %31, %33
  %35 = urem i32 %34, 2
  %36 = icmp eq i32 %35, 0
  %37 = icmp slt i32 %32, 10
  %38 = or i1 %36, %37
  br i1 %38, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %30, %originalBB1alteredBB
  %39 = load %struct.quoting_options*, %struct.quoting_options** %12, align 8, !dbg !717
  %40 = load i32, i32* @x.13
  %41 = load i32, i32* @y.14
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %65, !dbg !716

48:                                               ; preds = %originalBBpart2
  %49 = load i32, i32* @x.13
  %50 = load i32, i32* @y.14
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load i32, i32* @x.13
  %58 = load i32, i32* @y.14
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %65, !dbg !716

65:                                               ; preds = %originalBBpart28, %originalBBpart24
  %66 = phi %struct.quoting_options* [ %39, %originalBBpart24 ], [ @default_quoting_options, %originalBBpart28 ], !dbg !716
  %67 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %66, i32 0, i32 2, !dbg !718
  %68 = getelementptr inbounds [8 x i32], [8 x i32]* %67, i64 0, i64 0, !dbg !719
  %69 = load i8, i8* %15, align 1, !dbg !720
  %70 = zext i8 %69 to i64, !dbg !720
  %71 = udiv i64 %70, 32, !dbg !721
  %72 = getelementptr inbounds i32, i32* %68, i64 %71, !dbg !722
  store i32* %72, i32** %16, align 8, !dbg !715
  call void @llvm.dbg.declare(metadata i32* %17, metadata !723, metadata !DIExpression()), !dbg !724
  %73 = load i8, i8* %15, align 1, !dbg !725
  %74 = zext i8 %73 to i64, !dbg !725
  %75 = urem i64 %74, 32, !dbg !726
  %76 = trunc i64 %75 to i32, !dbg !725
  store i32 %76, i32* %17, align 4, !dbg !724
  call void @llvm.dbg.declare(metadata i32* %18, metadata !727, metadata !DIExpression()), !dbg !728
  %77 = load i32*, i32** %16, align 8, !dbg !729
  %78 = load i32, i32* %77, align 4, !dbg !730
  %79 = load i32, i32* %17, align 4, !dbg !731
  %80 = lshr i32 %78, %79, !dbg !732
  %81 = and i32 %80, 1, !dbg !733
  store i32 %81, i32* %18, align 4, !dbg !728
  %82 = load i32, i32* %14, align 4, !dbg !734
  %83 = and i32 %82, 1, !dbg !735
  %84 = load i32, i32* %18, align 4, !dbg !736
  %85 = xor i32 %83, %84, !dbg !737
  %86 = load i32, i32* %17, align 4, !dbg !738
  %87 = shl i32 %85, %86, !dbg !739
  %88 = load i32*, i32** %16, align 8, !dbg !740
  %89 = load i32, i32* %88, align 4, !dbg !741
  %90 = xor i32 %89, %87, !dbg !741
  store i32 %90, i32* %88, align 4, !dbg !741
  %91 = load i32, i32* %18, align 4, !dbg !742
  ret i32 %91, !dbg !743

originalBBalteredBB:                              ; preds = %originalBB, %3
  %92 = alloca %struct.quoting_options*, align 8
  %93 = alloca i8, align 1
  %94 = alloca i32, align 4
  %95 = alloca i8, align 1
  %96 = alloca i32*, align 8
  %97 = alloca i32, align 4
  %98 = alloca i32, align 4
  store %struct.quoting_options* %0, %struct.quoting_options** %92, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %92, metadata !744, metadata !DIExpression()), !dbg !705
  store i8 %1, i8* %93, align 1
  call void @llvm.dbg.declare(metadata i8* %93, metadata !779, metadata !DIExpression()), !dbg !707
  store i32 %2, i32* %94, align 4
  call void @llvm.dbg.declare(metadata i32* %94, metadata !780, metadata !DIExpression()), !dbg !709
  call void @llvm.dbg.declare(metadata i8* %95, metadata !781, metadata !DIExpression()), !dbg !711
  %99 = load i8, i8* %93, align 1, !dbg !712
  store i8 %99, i8* %95, align 1, !dbg !711
  call void @llvm.dbg.declare(metadata i32** %96, metadata !782, metadata !DIExpression()), !dbg !715
  %100 = load %struct.quoting_options*, %struct.quoting_options** %92, align 8, !dbg !716
  %101 = icmp ne %struct.quoting_options* %100, null, !dbg !716
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %30
  %102 = load %struct.quoting_options*, %struct.quoting_options** %12, align 8, !dbg !717
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  br label %originalBB6
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_char_mem(i8*, i64, i8 signext) #4 !dbg !783 {
  %4 = load i32, i32* @x.15
  %5 = load i32, i32* @y.16
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i8, align 1
  %15 = alloca %struct.quoting_options, align 8
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !786, metadata !DIExpression()), !dbg !787
  store i64 %1, i64* %13, align 8
  call void @llvm.dbg.declare(metadata i64* %13, metadata !788, metadata !DIExpression()), !dbg !789
  store i8 %2, i8* %14, align 1
  call void @llvm.dbg.declare(metadata i8* %14, metadata !790, metadata !DIExpression()), !dbg !791
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %15, metadata !792, metadata !DIExpression()), !dbg !793
  %16 = bitcast %struct.quoting_options* %15 to i8*, !dbg !794
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i1 false), !dbg !794
  %17 = load i8, i8* %14, align 1, !dbg !795
  %18 = call i32 @set_char_quoting(%struct.quoting_options* %15, i8 signext %17, i32 1), !dbg !796
  %19 = load i8*, i8** %12, align 8, !dbg !797
  %20 = load i64, i64* %13, align 8, !dbg !798
  %21 = call i8* @quotearg_n_options(i32 0, i8* %19, i64 %20, %struct.quoting_options* %15), !dbg !799
  %22 = load i32, i32* @x.15
  %23 = load i32, i32* @y.16
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %21, !dbg !800

originalBBalteredBB:                              ; preds = %originalBB, %3
  %30 = alloca i8*, align 8
  %31 = alloca i64, align 8
  %32 = alloca i8, align 1
  %33 = alloca %struct.quoting_options, align 8
  store i8* %0, i8** %30, align 8
  call void @llvm.dbg.declare(metadata i8** %30, metadata !801, metadata !DIExpression()), !dbg !787
  store i64 %1, i64* %31, align 8
  call void @llvm.dbg.declare(metadata i64* %31, metadata !833, metadata !DIExpression()), !dbg !789
  store i8 %2, i8* %32, align 1
  call void @llvm.dbg.declare(metadata i8* %32, metadata !834, metadata !DIExpression()), !dbg !791
  call void @llvm.dbg.declare(metadata %struct.quoting_options* %33, metadata !835, metadata !DIExpression()), !dbg !793
  %34 = bitcast %struct.quoting_options* %33 to i8*, !dbg !794
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %34, i8* align 8 bitcast (%struct.quoting_options* @default_quoting_options to i8*), i64 56, i1 false), !dbg !794
  %35 = load i8, i8* %32, align 1, !dbg !795
  %36 = call i32 @set_char_quoting(%struct.quoting_options* %33, i8 signext %35, i32 1), !dbg !796
  %37 = load i8*, i8** %30, align 8, !dbg !797
  %38 = load i64, i64* %31, align 8, !dbg !798
  %39 = call i8* @quotearg_n_options(i32 0, i8* %37, i64 %38, %struct.quoting_options* %33), !dbg !799
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_n_options(i32, i8*, i64, %struct.quoting_options*) #4 !dbg !836 {
  %5 = load i32, i32* @x.17
  %6 = load i32, i32* @y.18
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %4, %originalBBalteredBB
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i64, align 8
  %16 = alloca %struct.quoting_options*, align 8
  %17 = alloca i32, align 4
  %18 = alloca %struct.slotvec*, align 8
  %19 = alloca i8, align 1
  %20 = alloca i32, align 4
  %21 = alloca i64, align 8
  %22 = alloca i8*, align 8
  %23 = alloca i32, align 4
  %24 = alloca i64, align 8
  store i32 %0, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !841, metadata !DIExpression()), !dbg !842
  store i8* %1, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !843, metadata !DIExpression()), !dbg !844
  store i64 %2, i64* %15, align 8
  call void @llvm.dbg.declare(metadata i64* %15, metadata !845, metadata !DIExpression()), !dbg !846
  store %struct.quoting_options* %3, %struct.quoting_options** %16, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %16, metadata !847, metadata !DIExpression()), !dbg !848
  call void @llvm.dbg.declare(metadata i32* %17, metadata !849, metadata !DIExpression()), !dbg !850
  %25 = call i32* @__errno_location() #14, !dbg !851
  %26 = load i32, i32* %25, align 4, !dbg !851
  store i32 %26, i32* %17, align 4, !dbg !850
  call void @llvm.dbg.declare(metadata %struct.slotvec** %18, metadata !852, metadata !DIExpression()), !dbg !853
  %27 = load %struct.slotvec*, %struct.slotvec** @slotvec, align 8, !dbg !854
  store %struct.slotvec* %27, %struct.slotvec** %18, align 8, !dbg !853
  %28 = load i32, i32* %13, align 4, !dbg !855
  %29 = icmp slt i32 %28, 0, !dbg !857
  %30 = load i32, i32* @x.17
  %31 = load i32, i32* @y.18
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %29, label %38, label %55, !dbg !858

38:                                               ; preds = %originalBBpart2
  %39 = load i32, i32* @x.17
  %40 = load i32, i32* @y.18
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %38, %originalBB1alteredBB
  call void @abort() #12, !dbg !859
  %47 = load i32, i32* @x.17
  %48 = load i32, i32* @y.18
  %49 = sub i32 %47, 1
  %50 = mul i32 %47, %49
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %52, %53
  br i1 %54, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  unreachable, !dbg !859

55:                                               ; preds = %originalBBpart2
  %56 = load i32, i32* @nslots, align 4, !dbg !860
  %57 = load i32, i32* %13, align 4, !dbg !862
  %58 = icmp sle i32 %56, %57, !dbg !863
  br i1 %58, label %59, label %197, !dbg !864

59:                                               ; preds = %55
  call void @llvm.dbg.declare(metadata i8* %19, metadata !865, metadata !DIExpression()), !dbg !867
  %60 = load i32, i32* @x.17
  %61 = load i32, i32* @y.18
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %59, %originalBB6alteredBB
  %68 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !868
  %69 = icmp eq %struct.slotvec* %68, @slotvec0, !dbg !869
  %70 = zext i1 %69 to i8, !dbg !867
  store i8 %70, i8* %19, align 1, !dbg !867
  call void @llvm.dbg.declare(metadata i32* %20, metadata !870, metadata !DIExpression()), !dbg !871
  store i32 2147483646, i32* %20, align 4, !dbg !871
  %71 = load i32, i32* %20, align 4, !dbg !872
  %72 = load i32, i32* %13, align 4, !dbg !874
  %73 = icmp slt i32 %71, %72, !dbg !875
  %74 = load i32, i32* @x.17
  %75 = load i32, i32* @y.18
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %73, label %82, label %83, !dbg !876

82:                                               ; preds = %originalBBpart28
  call void @xalloc_die() #15, !dbg !877
  unreachable, !dbg !877

83:                                               ; preds = %originalBBpart28
  %84 = load i32, i32* @x.17
  %85 = load i32, i32* @y.18
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %83, %originalBB10alteredBB
  %92 = load i8, i8* %19, align 1, !dbg !878
  %93 = trunc i8 %92 to i1, !dbg !878
  %94 = load i32, i32* @x.17
  %95 = load i32, i32* @y.18
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %93, label %102, label %119, !dbg !878

102:                                              ; preds = %originalBBpart212
  %103 = load i32, i32* @x.17
  %104 = load i32, i32* @y.18
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %102, %originalBB14alteredBB
  %111 = load i32, i32* @x.17
  %112 = load i32, i32* @y.18
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %121, !dbg !878

119:                                              ; preds = %originalBBpart212
  %120 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !879
  br label %121, !dbg !878

121:                                              ; preds = %119, %originalBBpart216
  %122 = phi %struct.slotvec* [ null, %originalBBpart216 ], [ %120, %119 ], !dbg !878
  %123 = load i32, i32* @x.17
  %124 = load i32, i32* @y.18
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %121, %originalBB18alteredBB
  %131 = bitcast %struct.slotvec* %122 to i8*, !dbg !878
  %132 = load i32, i32* %13, align 4, !dbg !880
  %133 = add nsw i32 %132, 1, !dbg !881
  %134 = sext i32 %133 to i64, !dbg !882
  %135 = mul i64 %134, 16, !dbg !883
  %136 = call i8* @xrealloc(i8* %131, i64 %135), !dbg !884
  %137 = bitcast i8* %136 to %struct.slotvec*, !dbg !884
  store %struct.slotvec* %137, %struct.slotvec** %18, align 8, !dbg !885
  store %struct.slotvec* %137, %struct.slotvec** @slotvec, align 8, !dbg !886
  %138 = load i8, i8* %19, align 1, !dbg !887
  %139 = trunc i8 %138 to i1, !dbg !887
  %140 = load i32, i32* @x.17
  %141 = load i32, i32* @y.18
  %142 = sub i32 %140, 1
  %143 = mul i32 %140, %142
  %144 = urem i32 %143, 2
  %145 = icmp eq i32 %144, 0
  %146 = icmp slt i32 %141, 10
  %147 = or i1 %145, %146
  br i1 %147, label %originalBBpart228, label %originalBB18alteredBB

originalBBpart228:                                ; preds = %originalBB18
  br i1 %139, label %148, label %167, !dbg !889

148:                                              ; preds = %originalBBpart228
  %149 = load i32, i32* @x.17
  %150 = load i32, i32* @y.18
  %151 = sub i32 %149, 1
  %152 = mul i32 %149, %151
  %153 = urem i32 %152, 2
  %154 = icmp eq i32 %153, 0
  %155 = icmp slt i32 %150, 10
  %156 = or i1 %154, %155
  br i1 %156, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %148, %originalBB30alteredBB
  %157 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !890
  %158 = bitcast %struct.slotvec* %157 to i8*, !dbg !891
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %158, i8* align 8 bitcast (%struct.slotvec* @slotvec0 to i8*), i64 16, i1 false), !dbg !891
  %159 = load i32, i32* @x.17
  %160 = load i32, i32* @y.18
  %161 = sub i32 %159, 1
  %162 = mul i32 %159, %161
  %163 = urem i32 %162, 2
  %164 = icmp eq i32 %163, 0
  %165 = icmp slt i32 %160, 10
  %166 = or i1 %164, %165
  br i1 %166, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %167, !dbg !892

167:                                              ; preds = %originalBBpart232, %originalBBpart228
  %168 = load i32, i32* @x.17
  %169 = load i32, i32* @y.18
  %170 = sub i32 %168, 1
  %171 = mul i32 %168, %170
  %172 = urem i32 %171, 2
  %173 = icmp eq i32 %172, 0
  %174 = icmp slt i32 %169, 10
  %175 = or i1 %173, %174
  br i1 %175, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %167, %originalBB34alteredBB
  %176 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !893
  %177 = load i32, i32* @nslots, align 4, !dbg !894
  %178 = sext i32 %177 to i64, !dbg !895
  %179 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %176, i64 %178, !dbg !895
  %180 = bitcast %struct.slotvec* %179 to i8*, !dbg !896
  %181 = load i32, i32* %13, align 4, !dbg !897
  %182 = add nsw i32 %181, 1, !dbg !898
  %183 = load i32, i32* @nslots, align 4, !dbg !899
  %184 = sub nsw i32 %182, %183, !dbg !900
  %185 = sext i32 %184 to i64, !dbg !901
  %186 = mul i64 %185, 16, !dbg !902
  call void @llvm.memset.p0i8.i64(i8* align 8 %180, i8 0, i64 %186, i1 false), !dbg !896
  %187 = load i32, i32* %13, align 4, !dbg !903
  %188 = add nsw i32 %187, 1, !dbg !904
  store i32 %188, i32* @nslots, align 4, !dbg !905
  %189 = load i32, i32* @x.17
  %190 = load i32, i32* @y.18
  %191 = sub i32 %189, 1
  %192 = mul i32 %189, %191
  %193 = urem i32 %192, 2
  %194 = icmp eq i32 %193, 0
  %195 = icmp slt i32 %190, 10
  %196 = or i1 %194, %195
  br i1 %196, label %originalBBpart275, label %originalBB34alteredBB

originalBBpart275:                                ; preds = %originalBB34
  br label %197, !dbg !906

197:                                              ; preds = %originalBBpart275, %55
  call void @llvm.dbg.declare(metadata i64* %21, metadata !907, metadata !DIExpression()), !dbg !909
  %198 = load i32, i32* @x.17
  %199 = load i32, i32* @y.18
  %200 = sub i32 %198, 1
  %201 = mul i32 %198, %200
  %202 = urem i32 %201, 2
  %203 = icmp eq i32 %202, 0
  %204 = icmp slt i32 %199, 10
  %205 = or i1 %203, %204
  br i1 %205, label %originalBB77, label %originalBB77alteredBB

originalBB77:                                     ; preds = %197, %originalBB77alteredBB
  %206 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !910
  %207 = load i32, i32* %13, align 4, !dbg !911
  %208 = sext i32 %207 to i64, !dbg !910
  %209 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %206, i64 %208, !dbg !910
  %210 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %209, i32 0, i32 0, !dbg !912
  %211 = load i64, i64* %210, align 8, !dbg !912
  store i64 %211, i64* %21, align 8, !dbg !909
  call void @llvm.dbg.declare(metadata i8** %22, metadata !913, metadata !DIExpression()), !dbg !914
  %212 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !915
  %213 = load i32, i32* %13, align 4, !dbg !916
  %214 = sext i32 %213 to i64, !dbg !915
  %215 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %212, i64 %214, !dbg !915
  %216 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %215, i32 0, i32 1, !dbg !917
  %217 = load i8*, i8** %216, align 8, !dbg !917
  store i8* %217, i8** %22, align 8, !dbg !914
  call void @llvm.dbg.declare(metadata i32* %23, metadata !918, metadata !DIExpression()), !dbg !919
  %218 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !920
  %219 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %218, i32 0, i32 1, !dbg !921
  %220 = load i32, i32* %219, align 4, !dbg !921
  %221 = or i32 %220, 1, !dbg !922
  store i32 %221, i32* %23, align 4, !dbg !919
  call void @llvm.dbg.declare(metadata i64* %24, metadata !923, metadata !DIExpression()), !dbg !924
  %222 = load i8*, i8** %22, align 8, !dbg !925
  %223 = load i64, i64* %21, align 8, !dbg !926
  %224 = load i8*, i8** %14, align 8, !dbg !927
  %225 = load i64, i64* %15, align 8, !dbg !928
  %226 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !929
  %227 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %226, i32 0, i32 0, !dbg !930
  %228 = load i32, i32* %227, align 8, !dbg !930
  %229 = load i32, i32* %23, align 4, !dbg !931
  %230 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !932
  %231 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %230, i32 0, i32 2, !dbg !933
  %232 = getelementptr inbounds [8 x i32], [8 x i32]* %231, i64 0, i64 0, !dbg !932
  %233 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !934
  %234 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %233, i32 0, i32 3, !dbg !935
  %235 = load i8*, i8** %234, align 8, !dbg !935
  %236 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !936
  %237 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %236, i32 0, i32 4, !dbg !937
  %238 = load i8*, i8** %237, align 8, !dbg !937
  %239 = call i64 @quotearg_buffer_restyled(i8* %222, i64 %223, i8* %224, i64 %225, i32 %228, i32 %229, i32* %232, i8* %235, i8* %238), !dbg !938
  store i64 %239, i64* %24, align 8, !dbg !924
  %240 = load i64, i64* %21, align 8, !dbg !939
  %241 = load i64, i64* %24, align 8, !dbg !941
  %242 = icmp ule i64 %240, %241, !dbg !942
  %243 = load i32, i32* @x.17
  %244 = load i32, i32* @y.18
  %245 = sub i32 %243, 1
  %246 = mul i32 %243, %245
  %247 = urem i32 %246, 2
  %248 = icmp eq i32 %247, 0
  %249 = icmp slt i32 %244, 10
  %250 = or i1 %248, %249
  br i1 %250, label %originalBBpart287, label %originalBB77alteredBB

originalBBpart287:                                ; preds = %originalBB77
  br i1 %242, label %251, label %337, !dbg !943

251:                                              ; preds = %originalBBpart287
  %252 = load i32, i32* @x.17
  %253 = load i32, i32* @y.18
  %254 = sub i32 %252, 1
  %255 = mul i32 %252, %254
  %256 = urem i32 %255, 2
  %257 = icmp eq i32 %256, 0
  %258 = icmp slt i32 %253, 10
  %259 = or i1 %257, %258
  br i1 %259, label %originalBB89, label %originalBB89alteredBB

originalBB89:                                     ; preds = %251, %originalBB89alteredBB
  %260 = load i64, i64* %24, align 8, !dbg !944
  %261 = add i64 %260, 1, !dbg !946
  store i64 %261, i64* %21, align 8, !dbg !947
  %262 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !948
  %263 = load i32, i32* %13, align 4, !dbg !949
  %264 = sext i32 %263 to i64, !dbg !948
  %265 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %262, i64 %264, !dbg !948
  %266 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %265, i32 0, i32 0, !dbg !950
  store i64 %261, i64* %266, align 8, !dbg !951
  %267 = load i8*, i8** %22, align 8, !dbg !952
  %268 = icmp ne i8* %267, getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0), !dbg !954
  %269 = load i32, i32* @x.17
  %270 = load i32, i32* @y.18
  %271 = sub i32 %269, 1
  %272 = mul i32 %269, %271
  %273 = urem i32 %272, 2
  %274 = icmp eq i32 %273, 0
  %275 = icmp slt i32 %270, 10
  %276 = or i1 %274, %275
  br i1 %276, label %originalBBpart2105, label %originalBB89alteredBB

originalBBpart2105:                               ; preds = %originalBB89
  br i1 %268, label %277, label %295, !dbg !955

277:                                              ; preds = %originalBBpart2105
  %278 = load i32, i32* @x.17
  %279 = load i32, i32* @y.18
  %280 = sub i32 %278, 1
  %281 = mul i32 %278, %280
  %282 = urem i32 %281, 2
  %283 = icmp eq i32 %282, 0
  %284 = icmp slt i32 %279, 10
  %285 = or i1 %283, %284
  br i1 %285, label %originalBB107, label %originalBB107alteredBB

originalBB107:                                    ; preds = %277, %originalBB107alteredBB
  %286 = load i8*, i8** %22, align 8, !dbg !956
  call void @free(i8* %286) #10, !dbg !957
  %287 = load i32, i32* @x.17
  %288 = load i32, i32* @y.18
  %289 = sub i32 %287, 1
  %290 = mul i32 %287, %289
  %291 = urem i32 %290, 2
  %292 = icmp eq i32 %291, 0
  %293 = icmp slt i32 %288, 10
  %294 = or i1 %292, %293
  br i1 %294, label %originalBBpart2109, label %originalBB107alteredBB

originalBBpart2109:                               ; preds = %originalBB107
  br label %295, !dbg !957

295:                                              ; preds = %originalBBpart2109, %originalBBpart2105
  %296 = load i32, i32* @x.17
  %297 = load i32, i32* @y.18
  %298 = sub i32 %296, 1
  %299 = mul i32 %296, %298
  %300 = urem i32 %299, 2
  %301 = icmp eq i32 %300, 0
  %302 = icmp slt i32 %297, 10
  %303 = or i1 %301, %302
  br i1 %303, label %originalBB111, label %originalBB111alteredBB

originalBB111:                                    ; preds = %295, %originalBB111alteredBB
  %304 = load i64, i64* %21, align 8, !dbg !958
  %305 = call noalias i8* @xcharalloc(i64 %304), !dbg !959
  store i8* %305, i8** %22, align 8, !dbg !960
  %306 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !961
  %307 = load i32, i32* %13, align 4, !dbg !962
  %308 = sext i32 %307 to i64, !dbg !961
  %309 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %306, i64 %308, !dbg !961
  %310 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %309, i32 0, i32 1, !dbg !963
  store i8* %305, i8** %310, align 8, !dbg !964
  %311 = load i8*, i8** %22, align 8, !dbg !965
  %312 = load i64, i64* %21, align 8, !dbg !966
  %313 = load i8*, i8** %14, align 8, !dbg !967
  %314 = load i64, i64* %15, align 8, !dbg !968
  %315 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !969
  %316 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %315, i32 0, i32 0, !dbg !970
  %317 = load i32, i32* %316, align 8, !dbg !970
  %318 = load i32, i32* %23, align 4, !dbg !971
  %319 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !972
  %320 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %319, i32 0, i32 2, !dbg !973
  %321 = getelementptr inbounds [8 x i32], [8 x i32]* %320, i64 0, i64 0, !dbg !972
  %322 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !974
  %323 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %322, i32 0, i32 3, !dbg !975
  %324 = load i8*, i8** %323, align 8, !dbg !975
  %325 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !976
  %326 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %325, i32 0, i32 4, !dbg !977
  %327 = load i8*, i8** %326, align 8, !dbg !977
  %328 = call i64 @quotearg_buffer_restyled(i8* %311, i64 %312, i8* %313, i64 %314, i32 %317, i32 %318, i32* %321, i8* %324, i8* %327), !dbg !978
  %329 = load i32, i32* @x.17
  %330 = load i32, i32* @y.18
  %331 = sub i32 %329, 1
  %332 = mul i32 %329, %331
  %333 = urem i32 %332, 2
  %334 = icmp eq i32 %333, 0
  %335 = icmp slt i32 %330, 10
  %336 = or i1 %334, %335
  br i1 %336, label %originalBBpart2113, label %originalBB111alteredBB

originalBBpart2113:                               ; preds = %originalBB111
  br label %337, !dbg !979

337:                                              ; preds = %originalBBpart2113, %originalBBpart287
  %338 = load i32, i32* %17, align 4, !dbg !980
  %339 = call i32* @__errno_location() #14, !dbg !981
  store i32 %338, i32* %339, align 4, !dbg !982
  %340 = load i8*, i8** %22, align 8, !dbg !983
  ret i8* %340, !dbg !984

originalBBalteredBB:                              ; preds = %originalBB, %4
  %341 = alloca i32, align 4
  %342 = alloca i8*, align 8
  %343 = alloca i64, align 8
  %344 = alloca %struct.quoting_options*, align 8
  %345 = alloca i32, align 4
  %346 = alloca %struct.slotvec*, align 8
  %347 = alloca i8, align 1
  %348 = alloca i32, align 4
  %349 = alloca i64, align 8
  %350 = alloca i8*, align 8
  %351 = alloca i32, align 4
  %352 = alloca i64, align 8
  store i32 %0, i32* %341, align 4
  call void @llvm.dbg.declare(metadata i32* %341, metadata !985, metadata !DIExpression()), !dbg !842
  store i8* %1, i8** %342, align 8
  call void @llvm.dbg.declare(metadata i8** %342, metadata !1021, metadata !DIExpression()), !dbg !844
  store i64 %2, i64* %343, align 8
  call void @llvm.dbg.declare(metadata i64* %343, metadata !1022, metadata !DIExpression()), !dbg !846
  store %struct.quoting_options* %3, %struct.quoting_options** %344, align 8
  call void @llvm.dbg.declare(metadata %struct.quoting_options** %344, metadata !1023, metadata !DIExpression()), !dbg !848
  call void @llvm.dbg.declare(metadata i32* %345, metadata !1024, metadata !DIExpression()), !dbg !850
  %353 = call i32* @__errno_location() #14, !dbg !851
  %354 = load i32, i32* %353, align 4, !dbg !851
  store i32 %354, i32* %345, align 4, !dbg !850
  call void @llvm.dbg.declare(metadata %struct.slotvec** %346, metadata !1025, metadata !DIExpression()), !dbg !853
  %355 = load %struct.slotvec*, %struct.slotvec** @slotvec, align 8, !dbg !854
  store %struct.slotvec* %355, %struct.slotvec** %346, align 8, !dbg !853
  %356 = load i32, i32* %341, align 4, !dbg !855
  %357 = icmp slt i32 %356, 0, !dbg !857
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %38
  call void @abort() #12, !dbg !859
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %59
  %358 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !868
  %359 = icmp eq %struct.slotvec* %358, @slotvec0, !dbg !869
  %360 = zext i1 %359 to i8, !dbg !867
  store i8 %360, i8* %19, align 1, !dbg !867
  call void @llvm.dbg.declare(metadata !11, metadata !1026, metadata !DIExpression()), !dbg !871
  store i32 2147483646, i32* %20, align 4, !dbg !871
  %361 = load i32, i32* %20, align 4, !dbg !872
  %362 = load i32, i32* %13, align 4, !dbg !874
  %363 = icmp slt i32 %361, %362, !dbg !875
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %83
  %364 = load i8, i8* %19, align 1, !dbg !878
  %365 = trunc i8 %364 to i1, !dbg !878
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %102
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %121
  %366 = bitcast %struct.slotvec* %122 to i8*, !dbg !878
  %367 = load i32, i32* %13, align 4, !dbg !880
  %_ = sub i32 0, %367
  %gen = add i32 %_, 1
  %_19 = sub i32 0, %367
  %gen20 = add i32 %_19, 1
  %368 = add nsw i32 %367, 1, !dbg !881
  %369 = sext i32 %368 to i64, !dbg !882
  %_21 = shl i64 %369, 16
  %_22 = shl i64 %369, 16
  %_23 = sub i64 0, %369
  %gen24 = add i64 %_23, 16
  %_25 = shl i64 %369, 16
  %_26 = shl i64 %369, 16
  %370 = mul i64 %369, 16, !dbg !883
  %371 = call i8* @xrealloc(i8* %366, i64 %370), !dbg !884
  %372 = bitcast i8* %371 to %struct.slotvec*, !dbg !884
  store %struct.slotvec* %372, %struct.slotvec** %18, align 8, !dbg !885
  store %struct.slotvec* %372, %struct.slotvec** @slotvec, align 8, !dbg !886
  %373 = load i8, i8* %19, align 1, !dbg !887
  %374 = trunc i8 %373 to i1, !dbg !887
  br label %originalBB18

originalBB30alteredBB:                            ; preds = %originalBB30, %148
  %375 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !890
  %376 = bitcast %struct.slotvec* %375 to i8*, !dbg !891
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %376, i8* align 8 bitcast (%struct.slotvec* @slotvec0 to i8*), i64 16, i1 false), !dbg !891
  br label %originalBB30

originalBB34alteredBB:                            ; preds = %originalBB34, %167
  %377 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !893
  %378 = load i32, i32* @nslots, align 4, !dbg !894
  %379 = sext i32 %378 to i64, !dbg !895
  %380 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %377, i64 %379, !dbg !895
  %381 = bitcast %struct.slotvec* %380 to i8*, !dbg !896
  %382 = load i32, i32* %13, align 4, !dbg !897
  %_35 = sub i32 %382, 1
  %gen36 = mul i32 %_35, 1
  %_37 = sub i32 %382, 1
  %gen38 = mul i32 %_37, 1
  %_39 = shl i32 %382, 1
  %_40 = shl i32 %382, 1
  %_41 = sub i32 %382, 1
  %gen42 = mul i32 %_41, 1
  %_43 = sub i32 %382, 1
  %gen44 = mul i32 %_43, 1
  %383 = add nsw i32 %382, 1, !dbg !898
  %384 = load i32, i32* @nslots, align 4, !dbg !899
  %_45 = sub i32 %383, %384
  %gen46 = mul i32 %_45, %384
  %_47 = sub i32 0, %383
  %gen48 = add i32 %_47, %384
  %_49 = sub i32 %383, %384
  %gen50 = mul i32 %_49, %384
  %_51 = sub i32 %383, %384
  %gen52 = mul i32 %_51, %384
  %385 = sub nsw i32 %383, %384, !dbg !900
  %386 = sext i32 %385 to i64, !dbg !901
  %_53 = shl i64 %386, 16
  %_54 = shl i64 %386, 16
  %_55 = sub i64 %386, 16
  %gen56 = mul i64 %_55, 16
  %_57 = sub i64 %386, 16
  %gen58 = mul i64 %_57, 16
  %_59 = sub i64 %386, 16
  %gen60 = mul i64 %_59, 16
  %_61 = shl i64 %386, 16
  %_62 = sub i64 %386, 16
  %gen63 = mul i64 %_62, 16
  %387 = mul i64 %386, 16, !dbg !902
  call void @llvm.memset.p0i8.i64(i8* align 8 %381, i8 0, i64 %387, i1 false), !dbg !896
  %388 = load i32, i32* %13, align 4, !dbg !903
  %_64 = sub i32 0, %388
  %gen65 = add i32 %_64, 1
  %_66 = sub i32 0, %388
  %gen67 = add i32 %_66, 1
  %_68 = shl i32 %388, 1
  %_69 = sub i32 0, %388
  %gen70 = add i32 %_69, 1
  %_71 = sub i32 0, %388
  %gen72 = add i32 %_71, 1
  %_73 = shl i32 %388, 1
  %389 = add nsw i32 %388, 1, !dbg !904
  store i32 %389, i32* @nslots, align 4, !dbg !905
  br label %originalBB34

originalBB77alteredBB:                            ; preds = %originalBB77, %197
  %390 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !910
  %391 = load i32, i32* %13, align 4, !dbg !911
  %392 = sext i32 %391 to i64, !dbg !910
  %393 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %390, i64 %392, !dbg !910
  %394 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %393, i32 0, i32 0, !dbg !912
  %395 = load i64, i64* %394, align 8, !dbg !912
  store i64 %395, i64* %21, align 8, !dbg !909
  call void @llvm.dbg.declare(metadata !11, metadata !1064, metadata !DIExpression()), !dbg !914
  %396 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !915
  %397 = load i32, i32* %13, align 4, !dbg !916
  %398 = sext i32 %397 to i64, !dbg !915
  %399 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %396, i64 %398, !dbg !915
  %400 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %399, i32 0, i32 1, !dbg !917
  %401 = load i8*, i8** %400, align 8, !dbg !917
  store i8* %401, i8** %22, align 8, !dbg !914
  call void @llvm.dbg.declare(metadata !11, metadata !1101, metadata !DIExpression()), !dbg !919
  %402 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !920
  %403 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %402, i32 0, i32 1, !dbg !921
  %404 = load i32, i32* %403, align 4, !dbg !921
  %_78 = sub i32 %404, 1
  %gen79 = mul i32 %_78, 1
  %_80 = shl i32 %404, 1
  %_81 = shl i32 %404, 1
  %_82 = sub i32 %404, 1
  %gen83 = mul i32 %_82, 1
  %_84 = shl i32 %404, 1
  %_85 = shl i32 %404, 1
  %405 = or i32 %404, 1, !dbg !922
  store i32 %405, i32* %23, align 4, !dbg !919
  call void @llvm.dbg.declare(metadata !11, metadata !1102, metadata !DIExpression()), !dbg !924
  %406 = load i8*, i8** %22, align 8, !dbg !925
  %407 = load i64, i64* %21, align 8, !dbg !926
  %408 = load i8*, i8** %14, align 8, !dbg !927
  %409 = load i64, i64* %15, align 8, !dbg !928
  %410 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !929
  %411 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %410, i32 0, i32 0, !dbg !930
  %412 = load i32, i32* %411, align 8, !dbg !930
  %413 = load i32, i32* %23, align 4, !dbg !931
  %414 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !932
  %415 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %414, i32 0, i32 2, !dbg !933
  %416 = getelementptr inbounds [8 x i32], [8 x i32]* %415, i64 0, i64 0, !dbg !932
  %417 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !934
  %418 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %417, i32 0, i32 3, !dbg !935
  %419 = load i8*, i8** %418, align 8, !dbg !935
  %420 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !936
  %421 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %420, i32 0, i32 4, !dbg !937
  %422 = load i8*, i8** %421, align 8, !dbg !937
  %423 = call i64 @quotearg_buffer_restyled(i8* %406, i64 %407, i8* %408, i64 %409, i32 %412, i32 %413, i32* %416, i8* %419, i8* %422), !dbg !938
  store i64 %423, i64* %24, align 8, !dbg !924
  %424 = load i64, i64* %21, align 8, !dbg !939
  %425 = load i64, i64* %24, align 8, !dbg !941
  %426 = icmp ule i64 %424, %425, !dbg !942
  br label %originalBB77

originalBB89alteredBB:                            ; preds = %originalBB89, %251
  %427 = load i64, i64* %24, align 8, !dbg !944
  %_90 = shl i64 %427, 1
  %_91 = shl i64 %427, 1
  %_92 = sub i64 0, %427
  %gen93 = add i64 %_92, 1
  %_94 = sub i64 %427, 1
  %gen95 = mul i64 %_94, 1
  %_96 = sub i64 0, %427
  %gen97 = add i64 %_96, 1
  %_98 = sub i64 %427, 1
  %gen99 = mul i64 %_98, 1
  %_100 = sub i64 0, %427
  %gen101 = add i64 %_100, 1
  %_102 = sub i64 0, %427
  %gen103 = add i64 %_102, 1
  %428 = add i64 %427, 1, !dbg !946
  store i64 %428, i64* %21, align 8, !dbg !947
  %429 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !948
  %430 = load i32, i32* %13, align 4, !dbg !949
  %431 = sext i32 %430 to i64, !dbg !948
  %432 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %429, i64 %431, !dbg !948
  %433 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %432, i32 0, i32 0, !dbg !950
  store i64 %428, i64* %433, align 8, !dbg !951
  %434 = load i8*, i8** %22, align 8, !dbg !952
  %435 = icmp ne i8* %434, getelementptr inbounds ([256 x i8], [256 x i8]* @slot0, i64 0, i64 0), !dbg !954
  br label %originalBB89

originalBB107alteredBB:                           ; preds = %originalBB107, %277
  %436 = load i8*, i8** %22, align 8, !dbg !956
  call void @free(i8* %436) #10, !dbg !957
  br label %originalBB107

originalBB111alteredBB:                           ; preds = %originalBB111, %295
  %437 = load i64, i64* %21, align 8, !dbg !958
  %438 = call noalias i8* @xcharalloc(i64 %437), !dbg !959
  store i8* %438, i8** %22, align 8, !dbg !960
  %439 = load %struct.slotvec*, %struct.slotvec** %18, align 8, !dbg !961
  %440 = load i32, i32* %13, align 4, !dbg !962
  %441 = sext i32 %440 to i64, !dbg !961
  %442 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %439, i64 %441, !dbg !961
  %443 = getelementptr inbounds %struct.slotvec, %struct.slotvec* %442, i32 0, i32 1, !dbg !963
  store i8* %438, i8** %443, align 8, !dbg !964
  %444 = load i8*, i8** %22, align 8, !dbg !965
  %445 = load i64, i64* %21, align 8, !dbg !966
  %446 = load i8*, i8** %14, align 8, !dbg !967
  %447 = load i64, i64* %15, align 8, !dbg !968
  %448 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !969
  %449 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %448, i32 0, i32 0, !dbg !970
  %450 = load i32, i32* %449, align 8, !dbg !970
  %451 = load i32, i32* %23, align 4, !dbg !971
  %452 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !972
  %453 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %452, i32 0, i32 2, !dbg !973
  %454 = getelementptr inbounds [8 x i32], [8 x i32]* %453, i64 0, i64 0, !dbg !972
  %455 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !974
  %456 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %455, i32 0, i32 3, !dbg !975
  %457 = load i8*, i8** %456, align 8, !dbg !975
  %458 = load %struct.quoting_options*, %struct.quoting_options** %16, align 8, !dbg !976
  %459 = getelementptr inbounds %struct.quoting_options, %struct.quoting_options* %458, i32 0, i32 4, !dbg !977
  %460 = load i8*, i8** %459, align 8, !dbg !977
  %461 = call i64 @quotearg_buffer_restyled(i8* %444, i64 %445, i8* %446, i64 %447, i32 %450, i32 %451, i32* %454, i8* %457, i8* %460), !dbg !978
  br label %originalBB111
}

; Function Attrs: argmemonly nounwind
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #6

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @quotearg_buffer_restyled(i8*, i64, i8*, i64, i32, i32, i32*, i8*, i8*) #4 !dbg !1103 {
  %10 = load i32, i32* @x.19
  %11 = load i32, i32* @y.20
  %12 = sub i32 %10, 1
  %13 = mul i32 %10, %12
  %14 = urem i32 %13, 2
  %15 = icmp eq i32 %14, 0
  %16 = icmp slt i32 %11, 10
  %17 = or i1 %15, %16
  br i1 %17, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %9, %originalBBalteredBB
  %18 = alloca i64, align 8
  %19 = alloca i8*, align 8
  %20 = alloca i64, align 8
  %21 = alloca i8*, align 8
  %22 = alloca i64, align 8
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32*, align 8
  %26 = alloca i8*, align 8
  %27 = alloca i8*, align 8
  %28 = alloca i64, align 8
  %29 = alloca i64, align 8
  %30 = alloca i64, align 8
  %31 = alloca i8*, align 8
  %32 = alloca i64, align 8
  %33 = alloca i8, align 1
  %34 = alloca i8, align 1
  %35 = alloca i8, align 1
  %36 = alloca i8, align 1
  %37 = alloca i8, align 1
  %38 = alloca i8, align 1
  %39 = alloca i8, align 1
  %40 = alloca i8, align 1
  %41 = alloca i8, align 1
  %42 = alloca i8, align 1
  %43 = alloca i8, align 1
  %44 = alloca i64, align 8
  %45 = alloca i8, align 1
  %46 = alloca %struct.__mbstate_t, align 4
  %47 = alloca i32, align 4
  %48 = alloca i64, align 8
  %49 = alloca i64, align 8
  %50 = alloca i64, align 8
  store i8* %0, i8** %19, align 8
  call void @llvm.dbg.declare(metadata i8** %19, metadata !1108, metadata !DIExpression()), !dbg !1109
  store i64 %1, i64* %20, align 8
  call void @llvm.dbg.declare(metadata i64* %20, metadata !1110, metadata !DIExpression()), !dbg !1111
  store i8* %2, i8** %21, align 8
  call void @llvm.dbg.declare(metadata i8** %21, metadata !1112, metadata !DIExpression()), !dbg !1113
  store i64 %3, i64* %22, align 8
  call void @llvm.dbg.declare(metadata i64* %22, metadata !1114, metadata !DIExpression()), !dbg !1115
  store i32 %4, i32* %23, align 4
  call void @llvm.dbg.declare(metadata i32* %23, metadata !1116, metadata !DIExpression()), !dbg !1117
  store i32 %5, i32* %24, align 4
  call void @llvm.dbg.declare(metadata i32* %24, metadata !1118, metadata !DIExpression()), !dbg !1119
  store i32* %6, i32** %25, align 8
  call void @llvm.dbg.declare(metadata i32** %25, metadata !1120, metadata !DIExpression()), !dbg !1121
  store i8* %7, i8** %26, align 8
  call void @llvm.dbg.declare(metadata i8** %26, metadata !1122, metadata !DIExpression()), !dbg !1123
  store i8* %8, i8** %27, align 8
  call void @llvm.dbg.declare(metadata i8** %27, metadata !1124, metadata !DIExpression()), !dbg !1125
  call void @llvm.dbg.declare(metadata i64* %28, metadata !1126, metadata !DIExpression()), !dbg !1127
  call void @llvm.dbg.declare(metadata i64* %29, metadata !1128, metadata !DIExpression()), !dbg !1129
  store i64 0, i64* %29, align 8, !dbg !1129
  call void @llvm.dbg.declare(metadata i64* %30, metadata !1130, metadata !DIExpression()), !dbg !1131
  store i64 0, i64* %30, align 8, !dbg !1131
  call void @llvm.dbg.declare(metadata i8** %31, metadata !1132, metadata !DIExpression()), !dbg !1133
  store i8* null, i8** %31, align 8, !dbg !1133
  call void @llvm.dbg.declare(metadata i64* %32, metadata !1134, metadata !DIExpression()), !dbg !1135
  store i64 0, i64* %32, align 8, !dbg !1135
  call void @llvm.dbg.declare(metadata i8* %33, metadata !1136, metadata !DIExpression()), !dbg !1137
  store i8 0, i8* %33, align 1, !dbg !1137
  call void @llvm.dbg.declare(metadata i8* %34, metadata !1138, metadata !DIExpression()), !dbg !1139
  %51 = call i64 @__ctype_get_mb_cur_max() #10, !dbg !1140
  %52 = icmp eq i64 %51, 1, !dbg !1141
  %53 = zext i1 %52 to i8, !dbg !1139
  store i8 %53, i8* %34, align 1, !dbg !1139
  call void @llvm.dbg.declare(metadata i8* %35, metadata !1142, metadata !DIExpression()), !dbg !1143
  %54 = load i32, i32* %24, align 4, !dbg !1144
  %55 = and i32 %54, 2, !dbg !1145
  %56 = icmp ne i32 %55, 0, !dbg !1146
  %57 = zext i1 %56 to i8, !dbg !1143
  store i8 %57, i8* %35, align 1, !dbg !1143
  call void @llvm.dbg.declare(metadata i8* %36, metadata !1147, metadata !DIExpression()), !dbg !1148
  store i8 0, i8* %36, align 1, !dbg !1148
  call void @llvm.dbg.declare(metadata i8* %37, metadata !1149, metadata !DIExpression()), !dbg !1150
  store i8 0, i8* %37, align 1, !dbg !1150
  call void @llvm.dbg.declare(metadata i8* %38, metadata !1151, metadata !DIExpression()), !dbg !1152
  store i8 1, i8* %38, align 1, !dbg !1152
  %58 = load i32, i32* @x.19
  %59 = load i32, i32* @y.20
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %66, !dbg !1153

66:                                               ; preds = %5138, %originalBBpart2
  call void @llvm.dbg.label(metadata !1154), !dbg !1155
  %67 = load i32, i32* @x.19
  %68 = load i32, i32* @y.20
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %66, %originalBB1alteredBB
  %75 = load i32, i32* %23, align 4, !dbg !1156
  %76 = load i32, i32* @x.19
  %77 = load i32, i32* @y.20
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  switch i32 %75, label %536 [
    i32 6, label %84
    i32 5, label %101
    i32 7, label %198
    i32 8, label %215
    i32 9, label %215
    i32 10, label %215
    i32 3, label %351
    i32 1, label %368
    i32 4, label %369
    i32 2, label %422
    i32 0, label %535
  ], !dbg !1157

84:                                               ; preds = %originalBBpart24
  %85 = load i32, i32* @x.19
  %86 = load i32, i32* @y.20
  %87 = sub i32 %85, 1
  %88 = mul i32 %85, %87
  %89 = urem i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %90, %91
  br i1 %92, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %84, %originalBB6alteredBB
  store i32 5, i32* %23, align 4, !dbg !1158
  store i8 1, i8* %35, align 1, !dbg !1160
  %93 = load i32, i32* @x.19
  %94 = load i32, i32* @y.20
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %101, !dbg !1161

101:                                              ; preds = %originalBBpart28, %originalBBpart24
  %102 = load i32, i32* @x.19
  %103 = load i32, i32* @y.20
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %101, %originalBB10alteredBB
  %110 = load i8, i8* %35, align 1, !dbg !1162
  %111 = trunc i8 %110 to i1, !dbg !1162
  %112 = load i32, i32* @x.19
  %113 = load i32, i32* @y.20
  %114 = sub i32 %112, 1
  %115 = mul i32 %112, %114
  %116 = urem i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %113, 10
  %119 = or i1 %117, %118
  br i1 %119, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %111, label %181, label %120, !dbg !1164

120:                                              ; preds = %originalBBpart212
  br label %121, !dbg !1165

121:                                              ; preds = %120
  %122 = load i32, i32* @x.19
  %123 = load i32, i32* @y.20
  %124 = sub i32 %122, 1
  %125 = mul i32 %122, %124
  %126 = urem i32 %125, 2
  %127 = icmp eq i32 %126, 0
  %128 = icmp slt i32 %123, 10
  %129 = or i1 %127, %128
  br i1 %129, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %121, %originalBB14alteredBB
  %130 = load i64, i64* %29, align 8, !dbg !1166
  %131 = load i64, i64* %20, align 8, !dbg !1166
  %132 = icmp ult i64 %130, %131, !dbg !1166
  %133 = load i32, i32* @x.19
  %134 = load i32, i32* @y.20
  %135 = sub i32 %133, 1
  %136 = mul i32 %133, %135
  %137 = urem i32 %136, 2
  %138 = icmp eq i32 %137, 0
  %139 = icmp slt i32 %134, 10
  %140 = or i1 %138, %139
  br i1 %140, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %132, label %141, label %145, !dbg !1169

141:                                              ; preds = %originalBBpart216
  %142 = load i8*, i8** %19, align 8, !dbg !1166
  %143 = load i64, i64* %29, align 8, !dbg !1166
  %144 = getelementptr inbounds i8, i8* %142, i64 %143, !dbg !1166
  store i8 34, i8* %144, align 1, !dbg !1166
  br label %145, !dbg !1166

145:                                              ; preds = %141, %originalBBpart216
  %146 = load i32, i32* @x.19
  %147 = load i32, i32* @y.20
  %148 = sub i32 %146, 1
  %149 = mul i32 %146, %148
  %150 = urem i32 %149, 2
  %151 = icmp eq i32 %150, 0
  %152 = icmp slt i32 %147, 10
  %153 = or i1 %151, %152
  br i1 %153, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %145, %originalBB18alteredBB
  %154 = load i64, i64* %29, align 8, !dbg !1169
  %155 = add i64 %154, 1, !dbg !1169
  store i64 %155, i64* %29, align 8, !dbg !1169
  %156 = load i32, i32* @x.19
  %157 = load i32, i32* @y.20
  %158 = sub i32 %156, 1
  %159 = mul i32 %156, %158
  %160 = urem i32 %159, 2
  %161 = icmp eq i32 %160, 0
  %162 = icmp slt i32 %157, 10
  %163 = or i1 %161, %162
  br i1 %163, label %originalBBpart232, label %originalBB18alteredBB

originalBBpart232:                                ; preds = %originalBB18
  br label %164, !dbg !1169

164:                                              ; preds = %originalBBpart232
  %165 = load i32, i32* @x.19
  %166 = load i32, i32* @y.20
  %167 = sub i32 %165, 1
  %168 = mul i32 %165, %167
  %169 = urem i32 %168, 2
  %170 = icmp eq i32 %169, 0
  %171 = icmp slt i32 %166, 10
  %172 = or i1 %170, %171
  br i1 %172, label %originalBB34, label %originalBB34alteredBB

originalBB34:                                     ; preds = %164, %originalBB34alteredBB
  %173 = load i32, i32* @x.19
  %174 = load i32, i32* @y.20
  %175 = sub i32 %173, 1
  %176 = mul i32 %173, %175
  %177 = urem i32 %176, 2
  %178 = icmp eq i32 %177, 0
  %179 = icmp slt i32 %174, 10
  %180 = or i1 %178, %179
  br i1 %180, label %originalBBpart236, label %originalBB34alteredBB

originalBBpart236:                                ; preds = %originalBB34
  br label %181, !dbg !1169

181:                                              ; preds = %originalBBpart236, %originalBBpart212
  %182 = load i32, i32* @x.19
  %183 = load i32, i32* @y.20
  %184 = sub i32 %182, 1
  %185 = mul i32 %182, %184
  %186 = urem i32 %185, 2
  %187 = icmp eq i32 %186, 0
  %188 = icmp slt i32 %183, 10
  %189 = or i1 %187, %188
  br i1 %189, label %originalBB38, label %originalBB38alteredBB

originalBB38:                                     ; preds = %181, %originalBB38alteredBB
  store i8 1, i8* %33, align 1, !dbg !1170
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.62, i64 0, i64 0), i8** %31, align 8, !dbg !1171
  store i64 1, i64* %32, align 8, !dbg !1172
  %190 = load i32, i32* @x.19
  %191 = load i32, i32* @y.20
  %192 = sub i32 %190, 1
  %193 = mul i32 %190, %192
  %194 = urem i32 %193, 2
  %195 = icmp eq i32 %194, 0
  %196 = icmp slt i32 %191, 10
  %197 = or i1 %195, %196
  br i1 %197, label %originalBBpart240, label %originalBB38alteredBB

originalBBpart240:                                ; preds = %originalBB38
  br label %553, !dbg !1173

198:                                              ; preds = %originalBBpart24
  %199 = load i32, i32* @x.19
  %200 = load i32, i32* @y.20
  %201 = sub i32 %199, 1
  %202 = mul i32 %199, %201
  %203 = urem i32 %202, 2
  %204 = icmp eq i32 %203, 0
  %205 = icmp slt i32 %200, 10
  %206 = or i1 %204, %205
  br i1 %206, label %originalBB42, label %originalBB42alteredBB

originalBB42:                                     ; preds = %198, %originalBB42alteredBB
  store i8 1, i8* %33, align 1, !dbg !1174
  store i8 0, i8* %35, align 1, !dbg !1175
  %207 = load i32, i32* @x.19
  %208 = load i32, i32* @y.20
  %209 = sub i32 %207, 1
  %210 = mul i32 %207, %209
  %211 = urem i32 %210, 2
  %212 = icmp eq i32 %211, 0
  %213 = icmp slt i32 %208, 10
  %214 = or i1 %212, %213
  br i1 %214, label %originalBBpart244, label %originalBB42alteredBB

originalBBpart244:                                ; preds = %originalBB42
  br label %553, !dbg !1176

215:                                              ; preds = %originalBBpart24, %originalBBpart24, %originalBBpart24
  %216 = load i32, i32* %23, align 4, !dbg !1177
  %217 = icmp ne i32 %216, 10, !dbg !1180
  br i1 %217, label %218, label %239, !dbg !1181

218:                                              ; preds = %215
  %219 = load i32, i32* @x.19
  %220 = load i32, i32* @y.20
  %221 = sub i32 %219, 1
  %222 = mul i32 %219, %221
  %223 = urem i32 %222, 2
  %224 = icmp eq i32 %223, 0
  %225 = icmp slt i32 %220, 10
  %226 = or i1 %224, %225
  br i1 %226, label %originalBB46, label %originalBB46alteredBB

originalBB46:                                     ; preds = %218, %originalBB46alteredBB
  %227 = load i32, i32* %23, align 4, !dbg !1182
  %228 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.63, i64 0, i64 0), i32 %227), !dbg !1184
  store i8* %228, i8** %26, align 8, !dbg !1185
  %229 = load i32, i32* %23, align 4, !dbg !1186
  %230 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.64, i64 0, i64 0), i32 %229), !dbg !1187
  store i8* %230, i8** %27, align 8, !dbg !1188
  %231 = load i32, i32* @x.19
  %232 = load i32, i32* @y.20
  %233 = sub i32 %231, 1
  %234 = mul i32 %231, %233
  %235 = urem i32 %234, 2
  %236 = icmp eq i32 %235, 0
  %237 = icmp slt i32 %232, 10
  %238 = or i1 %236, %237
  br i1 %238, label %originalBBpart248, label %originalBB46alteredBB

originalBBpart248:                                ; preds = %originalBB46
  br label %239, !dbg !1189

239:                                              ; preds = %originalBBpart248, %215
  %240 = load i8, i8* %35, align 1, !dbg !1190
  %241 = trunc i8 %240 to i1, !dbg !1190
  br i1 %241, label %331, label %242, !dbg !1192

242:                                              ; preds = %239
  %243 = load i32, i32* @x.19
  %244 = load i32, i32* @y.20
  %245 = sub i32 %243, 1
  %246 = mul i32 %243, %245
  %247 = urem i32 %246, 2
  %248 = icmp eq i32 %247, 0
  %249 = icmp slt i32 %244, 10
  %250 = or i1 %248, %249
  br i1 %250, label %originalBB50, label %originalBB50alteredBB

originalBB50:                                     ; preds = %242, %originalBB50alteredBB
  %251 = load i8*, i8** %26, align 8, !dbg !1193
  store i8* %251, i8** %31, align 8, !dbg !1195
  %252 = load i32, i32* @x.19
  %253 = load i32, i32* @y.20
  %254 = sub i32 %252, 1
  %255 = mul i32 %252, %254
  %256 = urem i32 %255, 2
  %257 = icmp eq i32 %256, 0
  %258 = icmp slt i32 %253, 10
  %259 = or i1 %257, %258
  br i1 %259, label %originalBBpart252, label %originalBB50alteredBB

originalBBpart252:                                ; preds = %originalBB50
  br label %260, !dbg !1196

260:                                              ; preds = %originalBBpart269, %originalBBpart252
  %261 = load i8*, i8** %31, align 8, !dbg !1197
  %262 = load i8, i8* %261, align 1, !dbg !1199
  %263 = icmp ne i8 %262, 0, !dbg !1200
  br i1 %263, label %264, label %330, !dbg !1200

264:                                              ; preds = %260
  br label %265, !dbg !1201

265:                                              ; preds = %264
  %266 = load i64, i64* %29, align 8, !dbg !1202
  %267 = load i64, i64* %20, align 8, !dbg !1202
  %268 = icmp ult i64 %266, %267, !dbg !1202
  br i1 %268, label %269, label %275, !dbg !1205

269:                                              ; preds = %265
  %270 = load i8*, i8** %31, align 8, !dbg !1202
  %271 = load i8, i8* %270, align 1, !dbg !1202
  %272 = load i8*, i8** %19, align 8, !dbg !1202
  %273 = load i64, i64* %29, align 8, !dbg !1202
  %274 = getelementptr inbounds i8, i8* %272, i64 %273, !dbg !1202
  store i8 %271, i8* %274, align 1, !dbg !1202
  br label %275, !dbg !1202

275:                                              ; preds = %269, %265
  %276 = load i32, i32* @x.19
  %277 = load i32, i32* @y.20
  %278 = sub i32 %276, 1
  %279 = mul i32 %276, %278
  %280 = urem i32 %279, 2
  %281 = icmp eq i32 %280, 0
  %282 = icmp slt i32 %277, 10
  %283 = or i1 %281, %282
  br i1 %283, label %originalBB54, label %originalBB54alteredBB

originalBB54:                                     ; preds = %275, %originalBB54alteredBB
  %284 = load i64, i64* %29, align 8, !dbg !1205
  %285 = add i64 %284, 1, !dbg !1205
  store i64 %285, i64* %29, align 8, !dbg !1205
  %286 = load i32, i32* @x.19
  %287 = load i32, i32* @y.20
  %288 = sub i32 %286, 1
  %289 = mul i32 %286, %288
  %290 = urem i32 %289, 2
  %291 = icmp eq i32 %290, 0
  %292 = icmp slt i32 %287, 10
  %293 = or i1 %291, %292
  br i1 %293, label %originalBBpart261, label %originalBB54alteredBB

originalBBpart261:                                ; preds = %originalBB54
  br label %294, !dbg !1205

294:                                              ; preds = %originalBBpart261
  %295 = load i32, i32* @x.19
  %296 = load i32, i32* @y.20
  %297 = sub i32 %295, 1
  %298 = mul i32 %295, %297
  %299 = urem i32 %298, 2
  %300 = icmp eq i32 %299, 0
  %301 = icmp slt i32 %296, 10
  %302 = or i1 %300, %301
  br i1 %302, label %originalBB63, label %originalBB63alteredBB

originalBB63:                                     ; preds = %294, %originalBB63alteredBB
  %303 = load i32, i32* @x.19
  %304 = load i32, i32* @y.20
  %305 = sub i32 %303, 1
  %306 = mul i32 %303, %305
  %307 = urem i32 %306, 2
  %308 = icmp eq i32 %307, 0
  %309 = icmp slt i32 %304, 10
  %310 = or i1 %308, %309
  br i1 %310, label %originalBBpart265, label %originalBB63alteredBB

originalBBpart265:                                ; preds = %originalBB63
  br label %311, !dbg !1205

311:                                              ; preds = %originalBBpart265
  %312 = load i32, i32* @x.19
  %313 = load i32, i32* @y.20
  %314 = sub i32 %312, 1
  %315 = mul i32 %312, %314
  %316 = urem i32 %315, 2
  %317 = icmp eq i32 %316, 0
  %318 = icmp slt i32 %313, 10
  %319 = or i1 %317, %318
  br i1 %319, label %originalBB67, label %originalBB67alteredBB

originalBB67:                                     ; preds = %311, %originalBB67alteredBB
  %320 = load i8*, i8** %31, align 8, !dbg !1206
  %321 = getelementptr inbounds i8, i8* %320, i32 1, !dbg !1206
  store i8* %321, i8** %31, align 8, !dbg !1206
  %322 = load i32, i32* @x.19
  %323 = load i32, i32* @y.20
  %324 = sub i32 %322, 1
  %325 = mul i32 %322, %324
  %326 = urem i32 %325, 2
  %327 = icmp eq i32 %326, 0
  %328 = icmp slt i32 %323, 10
  %329 = or i1 %327, %328
  br i1 %329, label %originalBBpart269, label %originalBB67alteredBB

originalBBpart269:                                ; preds = %originalBB67
  br label %260, !dbg !1207, !llvm.loop !1208

330:                                              ; preds = %260
  br label %331, !dbg !1209

331:                                              ; preds = %330, %239
  %332 = load i32, i32* @x.19
  %333 = load i32, i32* @y.20
  %334 = sub i32 %332, 1
  %335 = mul i32 %332, %334
  %336 = urem i32 %335, 2
  %337 = icmp eq i32 %336, 0
  %338 = icmp slt i32 %333, 10
  %339 = or i1 %337, %338
  br i1 %339, label %originalBB71, label %originalBB71alteredBB

originalBB71:                                     ; preds = %331, %originalBB71alteredBB
  store i8 1, i8* %33, align 1, !dbg !1210
  %340 = load i8*, i8** %27, align 8, !dbg !1211
  store i8* %340, i8** %31, align 8, !dbg !1212
  %341 = load i8*, i8** %31, align 8, !dbg !1213
  %342 = call i64 @strlen(i8* %341) #13, !dbg !1214
  store i64 %342, i64* %32, align 8, !dbg !1215
  %343 = load i32, i32* @x.19
  %344 = load i32, i32* @y.20
  %345 = sub i32 %343, 1
  %346 = mul i32 %343, %345
  %347 = urem i32 %346, 2
  %348 = icmp eq i32 %347, 0
  %349 = icmp slt i32 %344, 10
  %350 = or i1 %348, %349
  br i1 %350, label %originalBBpart273, label %originalBB71alteredBB

originalBBpart273:                                ; preds = %originalBB71
  br label %553, !dbg !1216

351:                                              ; preds = %originalBBpart24
  %352 = load i32, i32* @x.19
  %353 = load i32, i32* @y.20
  %354 = sub i32 %352, 1
  %355 = mul i32 %352, %354
  %356 = urem i32 %355, 2
  %357 = icmp eq i32 %356, 0
  %358 = icmp slt i32 %353, 10
  %359 = or i1 %357, %358
  br i1 %359, label %originalBB75, label %originalBB75alteredBB

originalBB75:                                     ; preds = %351, %originalBB75alteredBB
  store i8 1, i8* %33, align 1, !dbg !1217
  %360 = load i32, i32* @x.19
  %361 = load i32, i32* @y.20
  %362 = sub i32 %360, 1
  %363 = mul i32 %360, %362
  %364 = urem i32 %363, 2
  %365 = icmp eq i32 %364, 0
  %366 = icmp slt i32 %361, 10
  %367 = or i1 %365, %366
  br i1 %367, label %originalBBpart277, label %originalBB75alteredBB

originalBBpart277:                                ; preds = %originalBB75
  br label %368, !dbg !1218

368:                                              ; preds = %originalBBpart277, %originalBBpart24
  store i8 1, i8* %35, align 1, !dbg !1219
  br label %369, !dbg !1220

369:                                              ; preds = %368, %originalBBpart24
  %370 = load i32, i32* @x.19
  %371 = load i32, i32* @y.20
  %372 = sub i32 %370, 1
  %373 = mul i32 %370, %372
  %374 = urem i32 %373, 2
  %375 = icmp eq i32 %374, 0
  %376 = icmp slt i32 %371, 10
  %377 = or i1 %375, %376
  br i1 %377, label %originalBB79, label %originalBB79alteredBB

originalBB79:                                     ; preds = %369, %originalBB79alteredBB
  %378 = load i8, i8* %35, align 1, !dbg !1221
  %379 = trunc i8 %378 to i1, !dbg !1221
  %380 = load i32, i32* @x.19
  %381 = load i32, i32* @y.20
  %382 = sub i32 %380, 1
  %383 = mul i32 %380, %382
  %384 = urem i32 %383, 2
  %385 = icmp eq i32 %384, 0
  %386 = icmp slt i32 %381, 10
  %387 = or i1 %385, %386
  br i1 %387, label %originalBBpart281, label %originalBB79alteredBB

originalBBpart281:                                ; preds = %originalBB79
  br i1 %379, label %405, label %388, !dbg !1223

388:                                              ; preds = %originalBBpart281
  %389 = load i32, i32* @x.19
  %390 = load i32, i32* @y.20
  %391 = sub i32 %389, 1
  %392 = mul i32 %389, %391
  %393 = urem i32 %392, 2
  %394 = icmp eq i32 %393, 0
  %395 = icmp slt i32 %390, 10
  %396 = or i1 %394, %395
  br i1 %396, label %originalBB83, label %originalBB83alteredBB

originalBB83:                                     ; preds = %388, %originalBB83alteredBB
  store i8 1, i8* %33, align 1, !dbg !1224
  %397 = load i32, i32* @x.19
  %398 = load i32, i32* @y.20
  %399 = sub i32 %397, 1
  %400 = mul i32 %397, %399
  %401 = urem i32 %400, 2
  %402 = icmp eq i32 %401, 0
  %403 = icmp slt i32 %398, 10
  %404 = or i1 %402, %403
  br i1 %404, label %originalBBpart285, label %originalBB83alteredBB

originalBBpart285:                                ; preds = %originalBB83
  br label %405, !dbg !1225

405:                                              ; preds = %originalBBpart285, %originalBBpart281
  %406 = load i32, i32* @x.19
  %407 = load i32, i32* @y.20
  %408 = sub i32 %406, 1
  %409 = mul i32 %406, %408
  %410 = urem i32 %409, 2
  %411 = icmp eq i32 %410, 0
  %412 = icmp slt i32 %407, 10
  %413 = or i1 %411, %412
  br i1 %413, label %originalBB87, label %originalBB87alteredBB

originalBB87:                                     ; preds = %405, %originalBB87alteredBB
  %414 = load i32, i32* @x.19
  %415 = load i32, i32* @y.20
  %416 = sub i32 %414, 1
  %417 = mul i32 %414, %416
  %418 = urem i32 %417, 2
  %419 = icmp eq i32 %418, 0
  %420 = icmp slt i32 %415, 10
  %421 = or i1 %419, %420
  br i1 %421, label %originalBBpart289, label %originalBB87alteredBB

originalBBpart289:                                ; preds = %originalBB87
  br label %422, !dbg !1226

422:                                              ; preds = %originalBBpart289, %originalBBpart24
  %423 = load i32, i32* @x.19
  %424 = load i32, i32* @y.20
  %425 = sub i32 %423, 1
  %426 = mul i32 %423, %425
  %427 = urem i32 %426, 2
  %428 = icmp eq i32 %427, 0
  %429 = icmp slt i32 %424, 10
  %430 = or i1 %428, %429
  br i1 %430, label %originalBB91, label %originalBB91alteredBB

originalBB91:                                     ; preds = %422, %originalBB91alteredBB
  store i32 2, i32* %23, align 4, !dbg !1227
  %431 = load i8, i8* %35, align 1, !dbg !1228
  %432 = trunc i8 %431 to i1, !dbg !1228
  %433 = load i32, i32* @x.19
  %434 = load i32, i32* @y.20
  %435 = sub i32 %433, 1
  %436 = mul i32 %433, %435
  %437 = urem i32 %436, 2
  %438 = icmp eq i32 %437, 0
  %439 = icmp slt i32 %434, 10
  %440 = or i1 %438, %439
  br i1 %440, label %originalBBpart293, label %originalBB91alteredBB

originalBBpart293:                                ; preds = %originalBB91
  br i1 %432, label %518, label %441, !dbg !1230

441:                                              ; preds = %originalBBpart293
  %442 = load i32, i32* @x.19
  %443 = load i32, i32* @y.20
  %444 = sub i32 %442, 1
  %445 = mul i32 %442, %444
  %446 = urem i32 %445, 2
  %447 = icmp eq i32 %446, 0
  %448 = icmp slt i32 %443, 10
  %449 = or i1 %447, %448
  br i1 %449, label %originalBB95, label %originalBB95alteredBB

originalBB95:                                     ; preds = %441, %originalBB95alteredBB
  %450 = load i32, i32* @x.19
  %451 = load i32, i32* @y.20
  %452 = sub i32 %450, 1
  %453 = mul i32 %450, %452
  %454 = urem i32 %453, 2
  %455 = icmp eq i32 %454, 0
  %456 = icmp slt i32 %451, 10
  %457 = or i1 %455, %456
  br i1 %457, label %originalBBpart297, label %originalBB95alteredBB

originalBBpart297:                                ; preds = %originalBB95
  br label %458, !dbg !1231

458:                                              ; preds = %originalBBpart297
  %459 = load i32, i32* @x.19
  %460 = load i32, i32* @y.20
  %461 = sub i32 %459, 1
  %462 = mul i32 %459, %461
  %463 = urem i32 %462, 2
  %464 = icmp eq i32 %463, 0
  %465 = icmp slt i32 %460, 10
  %466 = or i1 %464, %465
  br i1 %466, label %originalBB99, label %originalBB99alteredBB

originalBB99:                                     ; preds = %458, %originalBB99alteredBB
  %467 = load i64, i64* %29, align 8, !dbg !1232
  %468 = load i64, i64* %20, align 8, !dbg !1232
  %469 = icmp ult i64 %467, %468, !dbg !1232
  %470 = load i32, i32* @x.19
  %471 = load i32, i32* @y.20
  %472 = sub i32 %470, 1
  %473 = mul i32 %470, %472
  %474 = urem i32 %473, 2
  %475 = icmp eq i32 %474, 0
  %476 = icmp slt i32 %471, 10
  %477 = or i1 %475, %476
  br i1 %477, label %originalBBpart2101, label %originalBB99alteredBB

originalBBpart2101:                               ; preds = %originalBB99
  br i1 %469, label %478, label %498, !dbg !1235

478:                                              ; preds = %originalBBpart2101
  %479 = load i32, i32* @x.19
  %480 = load i32, i32* @y.20
  %481 = sub i32 %479, 1
  %482 = mul i32 %479, %481
  %483 = urem i32 %482, 2
  %484 = icmp eq i32 %483, 0
  %485 = icmp slt i32 %480, 10
  %486 = or i1 %484, %485
  br i1 %486, label %originalBB103, label %originalBB103alteredBB

originalBB103:                                    ; preds = %478, %originalBB103alteredBB
  %487 = load i8*, i8** %19, align 8, !dbg !1232
  %488 = load i64, i64* %29, align 8, !dbg !1232
  %489 = getelementptr inbounds i8, i8* %487, i64 %488, !dbg !1232
  store i8 39, i8* %489, align 1, !dbg !1232
  %490 = load i32, i32* @x.19
  %491 = load i32, i32* @y.20
  %492 = sub i32 %490, 1
  %493 = mul i32 %490, %492
  %494 = urem i32 %493, 2
  %495 = icmp eq i32 %494, 0
  %496 = icmp slt i32 %491, 10
  %497 = or i1 %495, %496
  br i1 %497, label %originalBBpart2105, label %originalBB103alteredBB

originalBBpart2105:                               ; preds = %originalBB103
  br label %498, !dbg !1232

498:                                              ; preds = %originalBBpart2105, %originalBBpart2101
  %499 = load i64, i64* %29, align 8, !dbg !1235
  %500 = add i64 %499, 1, !dbg !1235
  store i64 %500, i64* %29, align 8, !dbg !1235
  br label %501, !dbg !1235

501:                                              ; preds = %498
  %502 = load i32, i32* @x.19
  %503 = load i32, i32* @y.20
  %504 = sub i32 %502, 1
  %505 = mul i32 %502, %504
  %506 = urem i32 %505, 2
  %507 = icmp eq i32 %506, 0
  %508 = icmp slt i32 %503, 10
  %509 = or i1 %507, %508
  br i1 %509, label %originalBB107, label %originalBB107alteredBB

originalBB107:                                    ; preds = %501, %originalBB107alteredBB
  %510 = load i32, i32* @x.19
  %511 = load i32, i32* @y.20
  %512 = sub i32 %510, 1
  %513 = mul i32 %510, %512
  %514 = urem i32 %513, 2
  %515 = icmp eq i32 %514, 0
  %516 = icmp slt i32 %511, 10
  %517 = or i1 %515, %516
  br i1 %517, label %originalBBpart2109, label %originalBB107alteredBB

originalBBpart2109:                               ; preds = %originalBB107
  br label %518, !dbg !1235

518:                                              ; preds = %originalBBpart2109, %originalBBpart293
  %519 = load i32, i32* @x.19
  %520 = load i32, i32* @y.20
  %521 = sub i32 %519, 1
  %522 = mul i32 %519, %521
  %523 = urem i32 %522, 2
  %524 = icmp eq i32 %523, 0
  %525 = icmp slt i32 %520, 10
  %526 = or i1 %524, %525
  br i1 %526, label %originalBB111, label %originalBB111alteredBB

originalBB111:                                    ; preds = %518, %originalBB111alteredBB
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.64, i64 0, i64 0), i8** %31, align 8, !dbg !1236
  store i64 1, i64* %32, align 8, !dbg !1237
  %527 = load i32, i32* @x.19
  %528 = load i32, i32* @y.20
  %529 = sub i32 %527, 1
  %530 = mul i32 %527, %529
  %531 = urem i32 %530, 2
  %532 = icmp eq i32 %531, 0
  %533 = icmp slt i32 %528, 10
  %534 = or i1 %532, %533
  br i1 %534, label %originalBBpart2113, label %originalBB111alteredBB

originalBBpart2113:                               ; preds = %originalBB111
  br label %553, !dbg !1238

535:                                              ; preds = %originalBBpart24
  store i8 0, i8* %35, align 1, !dbg !1239
  br label %553, !dbg !1240

536:                                              ; preds = %originalBBpart24
  %537 = load i32, i32* @x.19
  %538 = load i32, i32* @y.20
  %539 = sub i32 %537, 1
  %540 = mul i32 %537, %539
  %541 = urem i32 %540, 2
  %542 = icmp eq i32 %541, 0
  %543 = icmp slt i32 %538, 10
  %544 = or i1 %542, %543
  br i1 %544, label %originalBB115, label %originalBB115alteredBB

originalBB115:                                    ; preds = %536, %originalBB115alteredBB
  call void @abort() #12, !dbg !1241
  %545 = load i32, i32* @x.19
  %546 = load i32, i32* @y.20
  %547 = sub i32 %545, 1
  %548 = mul i32 %545, %547
  %549 = urem i32 %548, 2
  %550 = icmp eq i32 %549, 0
  %551 = icmp slt i32 %546, 10
  %552 = or i1 %550, %551
  br i1 %552, label %originalBBpart2117, label %originalBB115alteredBB

originalBBpart2117:                               ; preds = %originalBB115
  unreachable, !dbg !1241

553:                                              ; preds = %535, %originalBBpart2113, %originalBBpart273, %originalBBpart244, %originalBBpart240
  %554 = load i32, i32* @x.19
  %555 = load i32, i32* @y.20
  %556 = sub i32 %554, 1
  %557 = mul i32 %554, %556
  %558 = urem i32 %557, 2
  %559 = icmp eq i32 %558, 0
  %560 = icmp slt i32 %555, 10
  %561 = or i1 %559, %560
  br i1 %561, label %originalBB119, label %originalBB119alteredBB

originalBB119:                                    ; preds = %553, %originalBB119alteredBB
  store i64 0, i64* %28, align 8, !dbg !1242
  %562 = load i32, i32* @x.19
  %563 = load i32, i32* @y.20
  %564 = sub i32 %562, 1
  %565 = mul i32 %562, %564
  %566 = urem i32 %565, 2
  %567 = icmp eq i32 %566, 0
  %568 = icmp slt i32 %563, 10
  %569 = or i1 %567, %568
  br i1 %569, label %originalBBpart2121, label %originalBB119alteredBB

originalBBpart2121:                               ; preds = %originalBB119
  br label %570, !dbg !1244

570:                                              ; preds = %originalBBpart21285, %originalBBpart2121
  %571 = load i32, i32* @x.19
  %572 = load i32, i32* @y.20
  %573 = sub i32 %571, 1
  %574 = mul i32 %571, %573
  %575 = urem i32 %574, 2
  %576 = icmp eq i32 %575, 0
  %577 = icmp slt i32 %572, 10
  %578 = or i1 %576, %577
  br i1 %578, label %originalBB123, label %originalBB123alteredBB

originalBB123:                                    ; preds = %570, %originalBB123alteredBB
  %579 = load i64, i64* %22, align 8, !dbg !1245
  %580 = icmp eq i64 %579, -1, !dbg !1247
  %581 = load i32, i32* @x.19
  %582 = load i32, i32* @y.20
  %583 = sub i32 %581, 1
  %584 = mul i32 %581, %583
  %585 = urem i32 %584, 2
  %586 = icmp eq i32 %585, 0
  %587 = icmp slt i32 %582, 10
  %588 = or i1 %586, %587
  br i1 %588, label %originalBBpart2125, label %originalBB123alteredBB

originalBBpart2125:                               ; preds = %originalBB123
  br i1 %580, label %589, label %613, !dbg !1245

589:                                              ; preds = %originalBBpart2125
  %590 = load i32, i32* @x.19
  %591 = load i32, i32* @y.20
  %592 = sub i32 %590, 1
  %593 = mul i32 %590, %592
  %594 = urem i32 %593, 2
  %595 = icmp eq i32 %594, 0
  %596 = icmp slt i32 %591, 10
  %597 = or i1 %595, %596
  br i1 %597, label %originalBB127, label %originalBB127alteredBB

originalBB127:                                    ; preds = %589, %originalBB127alteredBB
  %598 = load i8*, i8** %21, align 8, !dbg !1248
  %599 = load i64, i64* %28, align 8, !dbg !1249
  %600 = getelementptr inbounds i8, i8* %598, i64 %599, !dbg !1248
  %601 = load i8, i8* %600, align 1, !dbg !1248
  %602 = sext i8 %601 to i32, !dbg !1248
  %603 = icmp eq i32 %602, 0, !dbg !1250
  %604 = zext i1 %603 to i32, !dbg !1250
  %605 = load i32, i32* @x.19
  %606 = load i32, i32* @y.20
  %607 = sub i32 %605, 1
  %608 = mul i32 %605, %607
  %609 = urem i32 %608, 2
  %610 = icmp eq i32 %609, 0
  %611 = icmp slt i32 %606, 10
  %612 = or i1 %610, %611
  br i1 %612, label %originalBBpart2129, label %originalBB127alteredBB

originalBBpart2129:                               ; preds = %originalBB127
  br label %634, !dbg !1245

613:                                              ; preds = %originalBBpart2125
  %614 = load i32, i32* @x.19
  %615 = load i32, i32* @y.20
  %616 = sub i32 %614, 1
  %617 = mul i32 %614, %616
  %618 = urem i32 %617, 2
  %619 = icmp eq i32 %618, 0
  %620 = icmp slt i32 %615, 10
  %621 = or i1 %619, %620
  br i1 %621, label %originalBB131, label %originalBB131alteredBB

originalBB131:                                    ; preds = %613, %originalBB131alteredBB
  %622 = load i64, i64* %28, align 8, !dbg !1251
  %623 = load i64, i64* %22, align 8, !dbg !1252
  %624 = icmp eq i64 %622, %623, !dbg !1253
  %625 = zext i1 %624 to i32, !dbg !1253
  %626 = load i32, i32* @x.19
  %627 = load i32, i32* @y.20
  %628 = sub i32 %626, 1
  %629 = mul i32 %626, %628
  %630 = urem i32 %629, 2
  %631 = icmp eq i32 %630, 0
  %632 = icmp slt i32 %627, 10
  %633 = or i1 %631, %632
  br i1 %633, label %originalBBpart2133, label %originalBB131alteredBB

originalBBpart2133:                               ; preds = %originalBB131
  br label %634, !dbg !1245

634:                                              ; preds = %originalBBpart2133, %originalBBpart2129
  %635 = phi i32 [ %604, %originalBBpart2129 ], [ %625, %originalBBpart2133 ], !dbg !1245
  %636 = load i32, i32* @x.19
  %637 = load i32, i32* @y.20
  %638 = sub i32 %636, 1
  %639 = mul i32 %636, %638
  %640 = urem i32 %639, 2
  %641 = icmp eq i32 %640, 0
  %642 = icmp slt i32 %637, 10
  %643 = or i1 %641, %642
  br i1 %643, label %originalBB135, label %originalBB135alteredBB

originalBB135:                                    ; preds = %634, %originalBB135alteredBB
  %644 = icmp ne i32 %635, 0, !dbg !1254
  %645 = xor i1 %644, true, !dbg !1254
  %646 = load i32, i32* @x.19
  %647 = load i32, i32* @y.20
  %648 = sub i32 %646, 1
  %649 = mul i32 %646, %648
  %650 = urem i32 %649, 2
  %651 = icmp eq i32 %650, 0
  %652 = icmp slt i32 %647, 10
  %653 = or i1 %651, %652
  br i1 %653, label %originalBBpart2147, label %originalBB135alteredBB

originalBBpart2147:                               ; preds = %originalBB135
  br i1 %645, label %654, label %4972, !dbg !1255

654:                                              ; preds = %originalBBpart2147
  call void @llvm.dbg.declare(metadata i8* %39, metadata !1256, metadata !DIExpression()), !dbg !1258
  call void @llvm.dbg.declare(metadata i8* %40, metadata !1259, metadata !DIExpression()), !dbg !1260
  call void @llvm.dbg.declare(metadata i8* %41, metadata !1261, metadata !DIExpression()), !dbg !1262
  store i8 0, i8* %41, align 1, !dbg !1262
  call void @llvm.dbg.declare(metadata i8* %42, metadata !1263, metadata !DIExpression()), !dbg !1264
  store i8 0, i8* %42, align 1, !dbg !1264
  call void @llvm.dbg.declare(metadata i8* %43, metadata !1265, metadata !DIExpression()), !dbg !1266
  store i8 0, i8* %43, align 1, !dbg !1266
  %655 = load i8, i8* %33, align 1, !dbg !1267
  %656 = trunc i8 %655 to i1, !dbg !1267
  br i1 %656, label %657, label %837, !dbg !1269

657:                                              ; preds = %654
  %658 = load i32, i32* @x.19
  %659 = load i32, i32* @y.20
  %660 = sub i32 %658, 1
  %661 = mul i32 %658, %660
  %662 = urem i32 %661, 2
  %663 = icmp eq i32 %662, 0
  %664 = icmp slt i32 %659, 10
  %665 = or i1 %663, %664
  br i1 %665, label %originalBB149, label %originalBB149alteredBB

originalBB149:                                    ; preds = %657, %originalBB149alteredBB
  %666 = load i32, i32* %23, align 4, !dbg !1270
  %667 = icmp ne i32 %666, 2, !dbg !1271
  %668 = load i32, i32* @x.19
  %669 = load i32, i32* @y.20
  %670 = sub i32 %668, 1
  %671 = mul i32 %668, %670
  %672 = urem i32 %671, 2
  %673 = icmp eq i32 %672, 0
  %674 = icmp slt i32 %669, 10
  %675 = or i1 %673, %674
  br i1 %675, label %originalBBpart2151, label %originalBB149alteredBB

originalBBpart2151:                               ; preds = %originalBB149
  br i1 %667, label %676, label %837, !dbg !1272

676:                                              ; preds = %originalBBpart2151
  %677 = load i32, i32* @x.19
  %678 = load i32, i32* @y.20
  %679 = sub i32 %677, 1
  %680 = mul i32 %677, %679
  %681 = urem i32 %680, 2
  %682 = icmp eq i32 %681, 0
  %683 = icmp slt i32 %678, 10
  %684 = or i1 %682, %683
  br i1 %684, label %originalBB153, label %originalBB153alteredBB

originalBB153:                                    ; preds = %676, %originalBB153alteredBB
  %685 = load i64, i64* %32, align 8, !dbg !1273
  %686 = icmp ne i64 %685, 0, !dbg !1273
  %687 = load i32, i32* @x.19
  %688 = load i32, i32* @y.20
  %689 = sub i32 %687, 1
  %690 = mul i32 %687, %689
  %691 = urem i32 %690, 2
  %692 = icmp eq i32 %691, 0
  %693 = icmp slt i32 %688, 10
  %694 = or i1 %692, %693
  br i1 %694, label %originalBBpart2155, label %originalBB153alteredBB

originalBBpart2155:                               ; preds = %originalBB153
  br i1 %686, label %695, label %837, !dbg !1274

695:                                              ; preds = %originalBBpart2155
  %696 = load i32, i32* @x.19
  %697 = load i32, i32* @y.20
  %698 = sub i32 %696, 1
  %699 = mul i32 %696, %698
  %700 = urem i32 %699, 2
  %701 = icmp eq i32 %700, 0
  %702 = icmp slt i32 %697, 10
  %703 = or i1 %701, %702
  br i1 %703, label %originalBB157, label %originalBB157alteredBB

originalBB157:                                    ; preds = %695, %originalBB157alteredBB
  %704 = load i64, i64* %28, align 8, !dbg !1275
  %705 = load i64, i64* %32, align 8, !dbg !1276
  %706 = add i64 %704, %705, !dbg !1277
  %707 = load i64, i64* %22, align 8, !dbg !1278
  %708 = icmp eq i64 %707, -1, !dbg !1279
  %709 = load i32, i32* @x.19
  %710 = load i32, i32* @y.20
  %711 = sub i32 %709, 1
  %712 = mul i32 %709, %711
  %713 = urem i32 %712, 2
  %714 = icmp eq i32 %713, 0
  %715 = icmp slt i32 %710, 10
  %716 = or i1 %714, %715
  br i1 %716, label %originalBBpart2172, label %originalBB157alteredBB

originalBBpart2172:                               ; preds = %originalBB157
  br i1 %708, label %717, label %739, !dbg !1280

717:                                              ; preds = %originalBBpart2172
  %718 = load i64, i64* %32, align 8, !dbg !1281
  %719 = icmp ult i64 1, %718, !dbg !1282
  br i1 %719, label %720, label %739, !dbg !1278

720:                                              ; preds = %717
  %721 = load i32, i32* @x.19
  %722 = load i32, i32* @y.20
  %723 = sub i32 %721, 1
  %724 = mul i32 %721, %723
  %725 = urem i32 %724, 2
  %726 = icmp eq i32 %725, 0
  %727 = icmp slt i32 %722, 10
  %728 = or i1 %726, %727
  br i1 %728, label %originalBB174, label %originalBB174alteredBB

originalBB174:                                    ; preds = %720, %originalBB174alteredBB
  %729 = load i8*, i8** %21, align 8, !dbg !1283
  %730 = call i64 @strlen(i8* %729) #13, !dbg !1284
  store i64 %730, i64* %22, align 8, !dbg !1285
  %731 = load i32, i32* @x.19
  %732 = load i32, i32* @y.20
  %733 = sub i32 %731, 1
  %734 = mul i32 %731, %733
  %735 = urem i32 %734, 2
  %736 = icmp eq i32 %735, 0
  %737 = icmp slt i32 %732, 10
  %738 = or i1 %736, %737
  br i1 %738, label %originalBBpart2176, label %originalBB174alteredBB

originalBBpart2176:                               ; preds = %originalBB174
  br label %757, !dbg !1278

739:                                              ; preds = %717, %originalBBpart2172
  %740 = load i32, i32* @x.19
  %741 = load i32, i32* @y.20
  %742 = sub i32 %740, 1
  %743 = mul i32 %740, %742
  %744 = urem i32 %743, 2
  %745 = icmp eq i32 %744, 0
  %746 = icmp slt i32 %741, 10
  %747 = or i1 %745, %746
  br i1 %747, label %originalBB178, label %originalBB178alteredBB

originalBB178:                                    ; preds = %739, %originalBB178alteredBB
  %748 = load i64, i64* %22, align 8, !dbg !1286
  %749 = load i32, i32* @x.19
  %750 = load i32, i32* @y.20
  %751 = sub i32 %749, 1
  %752 = mul i32 %749, %751
  %753 = urem i32 %752, 2
  %754 = icmp eq i32 %753, 0
  %755 = icmp slt i32 %750, 10
  %756 = or i1 %754, %755
  br i1 %756, label %originalBBpart2180, label %originalBB178alteredBB

originalBBpart2180:                               ; preds = %originalBB178
  br label %757, !dbg !1278

757:                                              ; preds = %originalBBpart2180, %originalBBpart2176
  %758 = phi i64 [ %730, %originalBBpart2176 ], [ %748, %originalBBpart2180 ], !dbg !1278
  %759 = load i32, i32* @x.19
  %760 = load i32, i32* @y.20
  %761 = sub i32 %759, 1
  %762 = mul i32 %759, %761
  %763 = urem i32 %762, 2
  %764 = icmp eq i32 %763, 0
  %765 = icmp slt i32 %760, 10
  %766 = or i1 %764, %765
  br i1 %766, label %originalBB182, label %originalBB182alteredBB

originalBB182:                                    ; preds = %757, %originalBB182alteredBB
  %767 = icmp ule i64 %706, %758, !dbg !1287
  %768 = load i32, i32* @x.19
  %769 = load i32, i32* @y.20
  %770 = sub i32 %768, 1
  %771 = mul i32 %768, %770
  %772 = urem i32 %771, 2
  %773 = icmp eq i32 %772, 0
  %774 = icmp slt i32 %769, 10
  %775 = or i1 %773, %774
  br i1 %775, label %originalBBpart2184, label %originalBB182alteredBB

originalBBpart2184:                               ; preds = %originalBB182
  br i1 %767, label %776, label %837, !dbg !1288

776:                                              ; preds = %originalBBpart2184
  %777 = load i32, i32* @x.19
  %778 = load i32, i32* @y.20
  %779 = sub i32 %777, 1
  %780 = mul i32 %777, %779
  %781 = urem i32 %780, 2
  %782 = icmp eq i32 %781, 0
  %783 = icmp slt i32 %778, 10
  %784 = or i1 %782, %783
  br i1 %784, label %originalBB186, label %originalBB186alteredBB

originalBB186:                                    ; preds = %776, %originalBB186alteredBB
  %785 = load i8*, i8** %21, align 8, !dbg !1289
  %786 = load i64, i64* %28, align 8, !dbg !1290
  %787 = getelementptr inbounds i8, i8* %785, i64 %786, !dbg !1291
  %788 = load i8*, i8** %31, align 8, !dbg !1292
  %789 = load i64, i64* %32, align 8, !dbg !1293
  %790 = call i32 @memcmp(i8* %787, i8* %788, i64 %789) #13, !dbg !1294
  %791 = icmp eq i32 %790, 0, !dbg !1295
  %792 = load i32, i32* @x.19
  %793 = load i32, i32* @y.20
  %794 = sub i32 %792, 1
  %795 = mul i32 %792, %794
  %796 = urem i32 %795, 2
  %797 = icmp eq i32 %796, 0
  %798 = icmp slt i32 %793, 10
  %799 = or i1 %797, %798
  br i1 %799, label %originalBBpart2188, label %originalBB186alteredBB

originalBBpart2188:                               ; preds = %originalBB186
  br i1 %791, label %800, label %837, !dbg !1296

800:                                              ; preds = %originalBBpart2188
  %801 = load i32, i32* @x.19
  %802 = load i32, i32* @y.20
  %803 = sub i32 %801, 1
  %804 = mul i32 %801, %803
  %805 = urem i32 %804, 2
  %806 = icmp eq i32 %805, 0
  %807 = icmp slt i32 %802, 10
  %808 = or i1 %806, %807
  br i1 %808, label %originalBB190, label %originalBB190alteredBB

originalBB190:                                    ; preds = %800, %originalBB190alteredBB
  %809 = load i8, i8* %35, align 1, !dbg !1297
  %810 = trunc i8 %809 to i1, !dbg !1297
  %811 = load i32, i32* @x.19
  %812 = load i32, i32* @y.20
  %813 = sub i32 %811, 1
  %814 = mul i32 %811, %813
  %815 = urem i32 %814, 2
  %816 = icmp eq i32 %815, 0
  %817 = icmp slt i32 %812, 10
  %818 = or i1 %816, %817
  br i1 %818, label %originalBBpart2192, label %originalBB190alteredBB

originalBBpart2192:                               ; preds = %originalBB190
  br i1 %810, label %819, label %820, !dbg !1300

819:                                              ; preds = %originalBBpart2192
  br label %5326, !dbg !1301

820:                                              ; preds = %originalBBpart2192
  %821 = load i32, i32* @x.19
  %822 = load i32, i32* @y.20
  %823 = sub i32 %821, 1
  %824 = mul i32 %821, %823
  %825 = urem i32 %824, 2
  %826 = icmp eq i32 %825, 0
  %827 = icmp slt i32 %822, 10
  %828 = or i1 %826, %827
  br i1 %828, label %originalBB194, label %originalBB194alteredBB

originalBB194:                                    ; preds = %820, %originalBB194alteredBB
  store i8 1, i8* %41, align 1, !dbg !1302
  %829 = load i32, i32* @x.19
  %830 = load i32, i32* @y.20
  %831 = sub i32 %829, 1
  %832 = mul i32 %829, %831
  %833 = urem i32 %832, 2
  %834 = icmp eq i32 %833, 0
  %835 = icmp slt i32 %830, 10
  %836 = or i1 %834, %835
  br i1 %836, label %originalBBpart2196, label %originalBB194alteredBB

originalBBpart2196:                               ; preds = %originalBB194
  br label %837, !dbg !1303

837:                                              ; preds = %originalBBpart2196, %originalBBpart2188, %originalBBpart2184, %originalBBpart2155, %originalBBpart2151, %654
  %838 = load i32, i32* @x.19
  %839 = load i32, i32* @y.20
  %840 = sub i32 %838, 1
  %841 = mul i32 %838, %840
  %842 = urem i32 %841, 2
  %843 = icmp eq i32 %842, 0
  %844 = icmp slt i32 %839, 10
  %845 = or i1 %843, %844
  br i1 %845, label %originalBB198, label %originalBB198alteredBB

originalBB198:                                    ; preds = %837, %originalBB198alteredBB
  %846 = load i8*, i8** %21, align 8, !dbg !1304
  %847 = load i64, i64* %28, align 8, !dbg !1305
  %848 = getelementptr inbounds i8, i8* %846, i64 %847, !dbg !1304
  %849 = load i8, i8* %848, align 1, !dbg !1304
  store i8 %849, i8* %39, align 1, !dbg !1306
  %850 = load i8, i8* %39, align 1, !dbg !1307
  %851 = zext i8 %850 to i32, !dbg !1307
  %852 = load i32, i32* @x.19
  %853 = load i32, i32* @y.20
  %854 = sub i32 %852, 1
  %855 = mul i32 %852, %854
  %856 = urem i32 %855, 2
  %857 = icmp eq i32 %856, 0
  %858 = icmp slt i32 %853, 10
  %859 = or i1 %857, %858
  br i1 %859, label %originalBBpart2200, label %originalBB198alteredBB

originalBBpart2200:                               ; preds = %originalBB198
  switch i32 %851, label %2736 [
    i32 0, label %860
    i32 63, label %1445
    i32 7, label %1941
    i32 8, label %1958
    i32 12, label %1975
    i32 10, label %1992
    i32 13, label %2009
    i32 9, label %2026
    i32 11, label %2027
    i32 92, label %2028
    i32 123, label %2222
    i32 125, label %2222
    i32 35, label %2300
    i32 126, label %2300
    i32 32, label %2353
    i32 33, label %2370
    i32 34, label %2370
    i32 36, label %2370
    i32 38, label %2370
    i32 40, label %2370
    i32 41, label %2370
    i32 42, label %2370
    i32 59, label %2370
    i32 60, label %2370
    i32 61, label %2370
    i32 62, label %2370
    i32 91, label %2370
    i32 94, label %2370
    i32 96, label %2370
    i32 124, label %2370
    i32 39, label %2410
    i32 37, label %2719
    i32 43, label %2719
    i32 44, label %2719
    i32 45, label %2719
    i32 46, label %2719
    i32 47, label %2719
    i32 48, label %2719
    i32 49, label %2719
    i32 50, label %2719
    i32 51, label %2719
    i32 52, label %2719
    i32 53, label %2719
    i32 54, label %2719
    i32 55, label %2719
    i32 56, label %2719
    i32 57, label %2719
    i32 58, label %2719
    i32 65, label %2719
    i32 66, label %2719
    i32 67, label %2719
    i32 68, label %2719
    i32 69, label %2719
    i32 70, label %2719
    i32 71, label %2719
    i32 72, label %2719
    i32 73, label %2719
    i32 74, label %2719
    i32 75, label %2719
    i32 76, label %2719
    i32 77, label %2719
    i32 78, label %2719
    i32 79, label %2719
    i32 80, label %2719
    i32 81, label %2719
    i32 82, label %2719
    i32 83, label %2719
    i32 84, label %2719
    i32 85, label %2719
    i32 86, label %2719
    i32 87, label %2719
    i32 88, label %2719
    i32 89, label %2719
    i32 90, label %2719
    i32 93, label %2719
    i32 95, label %2719
    i32 97, label %2719
    i32 98, label %2719
    i32 99, label %2719
    i32 100, label %2719
    i32 101, label %2719
    i32 102, label %2719
    i32 103, label %2719
    i32 104, label %2719
    i32 105, label %2719
    i32 106, label %2719
    i32 107, label %2719
    i32 108, label %2719
    i32 109, label %2719
    i32 110, label %2719
    i32 111, label %2719
    i32 112, label %2719
    i32 113, label %2719
    i32 114, label %2719
    i32 115, label %2719
    i32 116, label %2719
    i32 117, label %2719
    i32 118, label %2719
    i32 119, label %2719
    i32 120, label %2719
    i32 121, label %2719
    i32 122, label %2719
  ], !dbg !1308

860:                                              ; preds = %originalBBpart2200
  %861 = load i8, i8* %33, align 1, !dbg !1309
  %862 = trunc i8 %861 to i1, !dbg !1309
  br i1 %862, label %863, label %1374, !dbg !1312

863:                                              ; preds = %860
  %864 = load i32, i32* @x.19
  %865 = load i32, i32* @y.20
  %866 = sub i32 %864, 1
  %867 = mul i32 %864, %866
  %868 = urem i32 %867, 2
  %869 = icmp eq i32 %868, 0
  %870 = icmp slt i32 %865, 10
  %871 = or i1 %869, %870
  br i1 %871, label %originalBB202, label %originalBB202alteredBB

originalBB202:                                    ; preds = %863, %originalBB202alteredBB
  %872 = load i32, i32* @x.19
  %873 = load i32, i32* @y.20
  %874 = sub i32 %872, 1
  %875 = mul i32 %872, %874
  %876 = urem i32 %875, 2
  %877 = icmp eq i32 %876, 0
  %878 = icmp slt i32 %873, 10
  %879 = or i1 %877, %878
  br i1 %879, label %originalBBpart2204, label %originalBB202alteredBB

originalBBpart2204:                               ; preds = %originalBB202
  br label %880, !dbg !1313

880:                                              ; preds = %originalBBpart2204
  %881 = load i32, i32* @x.19
  %882 = load i32, i32* @y.20
  %883 = sub i32 %881, 1
  %884 = mul i32 %881, %883
  %885 = urem i32 %884, 2
  %886 = icmp eq i32 %885, 0
  %887 = icmp slt i32 %882, 10
  %888 = or i1 %886, %887
  br i1 %888, label %originalBB206, label %originalBB206alteredBB

originalBB206:                                    ; preds = %880, %originalBB206alteredBB
  %889 = load i8, i8* %35, align 1, !dbg !1315
  %890 = trunc i8 %889 to i1, !dbg !1315
  %891 = load i32, i32* @x.19
  %892 = load i32, i32* @y.20
  %893 = sub i32 %891, 1
  %894 = mul i32 %891, %893
  %895 = urem i32 %894, 2
  %896 = icmp eq i32 %895, 0
  %897 = icmp slt i32 %892, 10
  %898 = or i1 %896, %897
  br i1 %898, label %originalBBpart2208, label %originalBB206alteredBB

originalBBpart2208:                               ; preds = %originalBB206
  br i1 %890, label %899, label %900, !dbg !1318

899:                                              ; preds = %originalBBpart2208
  br label %5326, !dbg !1315

900:                                              ; preds = %originalBBpart2208
  store i8 1, i8* %42, align 1, !dbg !1318
  %901 = load i32, i32* %23, align 4, !dbg !1319
  %902 = icmp eq i32 %901, 2, !dbg !1319
  br i1 %902, label %903, label %1071, !dbg !1319

903:                                              ; preds = %900
  %904 = load i32, i32* @x.19
  %905 = load i32, i32* @y.20
  %906 = sub i32 %904, 1
  %907 = mul i32 %904, %906
  %908 = urem i32 %907, 2
  %909 = icmp eq i32 %908, 0
  %910 = icmp slt i32 %905, 10
  %911 = or i1 %909, %910
  br i1 %911, label %originalBB210, label %originalBB210alteredBB

originalBB210:                                    ; preds = %903, %originalBB210alteredBB
  %912 = load i8, i8* %36, align 1, !dbg !1319
  %913 = trunc i8 %912 to i1, !dbg !1319
  %914 = load i32, i32* @x.19
  %915 = load i32, i32* @y.20
  %916 = sub i32 %914, 1
  %917 = mul i32 %914, %916
  %918 = urem i32 %917, 2
  %919 = icmp eq i32 %918, 0
  %920 = icmp slt i32 %915, 10
  %921 = or i1 %919, %920
  br i1 %921, label %originalBBpart2212, label %originalBB210alteredBB

originalBBpart2212:                               ; preds = %originalBB210
  br i1 %913, label %1071, label %922, !dbg !1318

922:                                              ; preds = %originalBBpart2212
  br label %923, !dbg !1321

923:                                              ; preds = %922
  %924 = load i64, i64* %29, align 8, !dbg !1323
  %925 = load i64, i64* %20, align 8, !dbg !1323
  %926 = icmp ult i64 %924, %925, !dbg !1323
  br i1 %926, label %927, label %931, !dbg !1326

927:                                              ; preds = %923
  %928 = load i8*, i8** %19, align 8, !dbg !1323
  %929 = load i64, i64* %29, align 8, !dbg !1323
  %930 = getelementptr inbounds i8, i8* %928, i64 %929, !dbg !1323
  store i8 39, i8* %930, align 1, !dbg !1323
  br label %931, !dbg !1323

931:                                              ; preds = %927, %923
  %932 = load i32, i32* @x.19
  %933 = load i32, i32* @y.20
  %934 = sub i32 %932, 1
  %935 = mul i32 %932, %934
  %936 = urem i32 %935, 2
  %937 = icmp eq i32 %936, 0
  %938 = icmp slt i32 %933, 10
  %939 = or i1 %937, %938
  br i1 %939, label %originalBB214, label %originalBB214alteredBB

originalBB214:                                    ; preds = %931, %originalBB214alteredBB
  %940 = load i64, i64* %29, align 8, !dbg !1326
  %941 = add i64 %940, 1, !dbg !1326
  store i64 %941, i64* %29, align 8, !dbg !1326
  %942 = load i32, i32* @x.19
  %943 = load i32, i32* @y.20
  %944 = sub i32 %942, 1
  %945 = mul i32 %942, %944
  %946 = urem i32 %945, 2
  %947 = icmp eq i32 %946, 0
  %948 = icmp slt i32 %943, 10
  %949 = or i1 %947, %948
  br i1 %949, label %originalBBpart2224, label %originalBB214alteredBB

originalBBpart2224:                               ; preds = %originalBB214
  br label %950, !dbg !1326

950:                                              ; preds = %originalBBpart2224
  %951 = load i32, i32* @x.19
  %952 = load i32, i32* @y.20
  %953 = sub i32 %951, 1
  %954 = mul i32 %951, %953
  %955 = urem i32 %954, 2
  %956 = icmp eq i32 %955, 0
  %957 = icmp slt i32 %952, 10
  %958 = or i1 %956, %957
  br i1 %958, label %originalBB226, label %originalBB226alteredBB

originalBB226:                                    ; preds = %950, %originalBB226alteredBB
  %959 = load i32, i32* @x.19
  %960 = load i32, i32* @y.20
  %961 = sub i32 %959, 1
  %962 = mul i32 %959, %961
  %963 = urem i32 %962, 2
  %964 = icmp eq i32 %963, 0
  %965 = icmp slt i32 %960, 10
  %966 = or i1 %964, %965
  br i1 %966, label %originalBBpart2228, label %originalBB226alteredBB

originalBBpart2228:                               ; preds = %originalBB226
  br label %967, !dbg !1321

967:                                              ; preds = %originalBBpart2228
  %968 = load i32, i32* @x.19
  %969 = load i32, i32* @y.20
  %970 = sub i32 %968, 1
  %971 = mul i32 %968, %970
  %972 = urem i32 %971, 2
  %973 = icmp eq i32 %972, 0
  %974 = icmp slt i32 %969, 10
  %975 = or i1 %973, %974
  br i1 %975, label %originalBB230, label %originalBB230alteredBB

originalBB230:                                    ; preds = %967, %originalBB230alteredBB
  %976 = load i64, i64* %29, align 8, !dbg !1327
  %977 = load i64, i64* %20, align 8, !dbg !1327
  %978 = icmp ult i64 %976, %977, !dbg !1327
  %979 = load i32, i32* @x.19
  %980 = load i32, i32* @y.20
  %981 = sub i32 %979, 1
  %982 = mul i32 %979, %981
  %983 = urem i32 %982, 2
  %984 = icmp eq i32 %983, 0
  %985 = icmp slt i32 %980, 10
  %986 = or i1 %984, %985
  br i1 %986, label %originalBBpart2232, label %originalBB230alteredBB

originalBBpart2232:                               ; preds = %originalBB230
  br i1 %978, label %987, label %1007, !dbg !1330

987:                                              ; preds = %originalBBpart2232
  %988 = load i32, i32* @x.19
  %989 = load i32, i32* @y.20
  %990 = sub i32 %988, 1
  %991 = mul i32 %988, %990
  %992 = urem i32 %991, 2
  %993 = icmp eq i32 %992, 0
  %994 = icmp slt i32 %989, 10
  %995 = or i1 %993, %994
  br i1 %995, label %originalBB234, label %originalBB234alteredBB

originalBB234:                                    ; preds = %987, %originalBB234alteredBB
  %996 = load i8*, i8** %19, align 8, !dbg !1327
  %997 = load i64, i64* %29, align 8, !dbg !1327
  %998 = getelementptr inbounds i8, i8* %996, i64 %997, !dbg !1327
  store i8 36, i8* %998, align 1, !dbg !1327
  %999 = load i32, i32* @x.19
  %1000 = load i32, i32* @y.20
  %1001 = sub i32 %999, 1
  %1002 = mul i32 %999, %1001
  %1003 = urem i32 %1002, 2
  %1004 = icmp eq i32 %1003, 0
  %1005 = icmp slt i32 %1000, 10
  %1006 = or i1 %1004, %1005
  br i1 %1006, label %originalBBpart2236, label %originalBB234alteredBB

originalBBpart2236:                               ; preds = %originalBB234
  br label %1007, !dbg !1327

1007:                                             ; preds = %originalBBpart2236, %originalBBpart2232
  %1008 = load i64, i64* %29, align 8, !dbg !1330
  %1009 = add i64 %1008, 1, !dbg !1330
  store i64 %1009, i64* %29, align 8, !dbg !1330
  br label %1010, !dbg !1330

1010:                                             ; preds = %1007
  %1011 = load i32, i32* @x.19
  %1012 = load i32, i32* @y.20
  %1013 = sub i32 %1011, 1
  %1014 = mul i32 %1011, %1013
  %1015 = urem i32 %1014, 2
  %1016 = icmp eq i32 %1015, 0
  %1017 = icmp slt i32 %1012, 10
  %1018 = or i1 %1016, %1017
  br i1 %1018, label %originalBB238, label %originalBB238alteredBB

originalBB238:                                    ; preds = %1010, %originalBB238alteredBB
  %1019 = load i32, i32* @x.19
  %1020 = load i32, i32* @y.20
  %1021 = sub i32 %1019, 1
  %1022 = mul i32 %1019, %1021
  %1023 = urem i32 %1022, 2
  %1024 = icmp eq i32 %1023, 0
  %1025 = icmp slt i32 %1020, 10
  %1026 = or i1 %1024, %1025
  br i1 %1026, label %originalBBpart2240, label %originalBB238alteredBB

originalBBpart2240:                               ; preds = %originalBB238
  br label %1027, !dbg !1321

1027:                                             ; preds = %originalBBpart2240
  %1028 = load i64, i64* %29, align 8, !dbg !1331
  %1029 = load i64, i64* %20, align 8, !dbg !1331
  %1030 = icmp ult i64 %1028, %1029, !dbg !1331
  br i1 %1030, label %1031, label %1051, !dbg !1334

1031:                                             ; preds = %1027
  %1032 = load i32, i32* @x.19
  %1033 = load i32, i32* @y.20
  %1034 = sub i32 %1032, 1
  %1035 = mul i32 %1032, %1034
  %1036 = urem i32 %1035, 2
  %1037 = icmp eq i32 %1036, 0
  %1038 = icmp slt i32 %1033, 10
  %1039 = or i1 %1037, %1038
  br i1 %1039, label %originalBB242, label %originalBB242alteredBB

originalBB242:                                    ; preds = %1031, %originalBB242alteredBB
  %1040 = load i8*, i8** %19, align 8, !dbg !1331
  %1041 = load i64, i64* %29, align 8, !dbg !1331
  %1042 = getelementptr inbounds i8, i8* %1040, i64 %1041, !dbg !1331
  store i8 39, i8* %1042, align 1, !dbg !1331
  %1043 = load i32, i32* @x.19
  %1044 = load i32, i32* @y.20
  %1045 = sub i32 %1043, 1
  %1046 = mul i32 %1043, %1045
  %1047 = urem i32 %1046, 2
  %1048 = icmp eq i32 %1047, 0
  %1049 = icmp slt i32 %1044, 10
  %1050 = or i1 %1048, %1049
  br i1 %1050, label %originalBBpart2244, label %originalBB242alteredBB

originalBBpart2244:                               ; preds = %originalBB242
  br label %1051, !dbg !1331

1051:                                             ; preds = %originalBBpart2244, %1027
  %1052 = load i64, i64* %29, align 8, !dbg !1334
  %1053 = add i64 %1052, 1, !dbg !1334
  store i64 %1053, i64* %29, align 8, !dbg !1334
  br label %1054, !dbg !1334

1054:                                             ; preds = %1051
  %1055 = load i32, i32* @x.19
  %1056 = load i32, i32* @y.20
  %1057 = sub i32 %1055, 1
  %1058 = mul i32 %1055, %1057
  %1059 = urem i32 %1058, 2
  %1060 = icmp eq i32 %1059, 0
  %1061 = icmp slt i32 %1056, 10
  %1062 = or i1 %1060, %1061
  br i1 %1062, label %originalBB246, label %originalBB246alteredBB

originalBB246:                                    ; preds = %1054, %originalBB246alteredBB
  store i8 1, i8* %36, align 1, !dbg !1321
  %1063 = load i32, i32* @x.19
  %1064 = load i32, i32* @y.20
  %1065 = sub i32 %1063, 1
  %1066 = mul i32 %1063, %1065
  %1067 = urem i32 %1066, 2
  %1068 = icmp eq i32 %1067, 0
  %1069 = icmp slt i32 %1064, 10
  %1070 = or i1 %1068, %1069
  br i1 %1070, label %originalBBpart2248, label %originalBB246alteredBB

originalBBpart2248:                               ; preds = %originalBB246
  br label %1071, !dbg !1321

1071:                                             ; preds = %originalBBpart2248, %originalBBpart2212, %900
  %1072 = load i32, i32* @x.19
  %1073 = load i32, i32* @y.20
  %1074 = sub i32 %1072, 1
  %1075 = mul i32 %1072, %1074
  %1076 = urem i32 %1075, 2
  %1077 = icmp eq i32 %1076, 0
  %1078 = icmp slt i32 %1073, 10
  %1079 = or i1 %1077, %1078
  br i1 %1079, label %originalBB250, label %originalBB250alteredBB

originalBB250:                                    ; preds = %1071, %originalBB250alteredBB
  %1080 = load i32, i32* @x.19
  %1081 = load i32, i32* @y.20
  %1082 = sub i32 %1080, 1
  %1083 = mul i32 %1080, %1082
  %1084 = urem i32 %1083, 2
  %1085 = icmp eq i32 %1084, 0
  %1086 = icmp slt i32 %1081, 10
  %1087 = or i1 %1085, %1086
  br i1 %1087, label %originalBBpart2252, label %originalBB250alteredBB

originalBBpart2252:                               ; preds = %originalBB250
  br label %1088, !dbg !1318

1088:                                             ; preds = %originalBBpart2252
  %1089 = load i32, i32* @x.19
  %1090 = load i32, i32* @y.20
  %1091 = sub i32 %1089, 1
  %1092 = mul i32 %1089, %1091
  %1093 = urem i32 %1092, 2
  %1094 = icmp eq i32 %1093, 0
  %1095 = icmp slt i32 %1090, 10
  %1096 = or i1 %1094, %1095
  br i1 %1096, label %originalBB254, label %originalBB254alteredBB

originalBB254:                                    ; preds = %1088, %originalBB254alteredBB
  %1097 = load i64, i64* %29, align 8, !dbg !1335
  %1098 = load i64, i64* %20, align 8, !dbg !1335
  %1099 = icmp ult i64 %1097, %1098, !dbg !1335
  %1100 = load i32, i32* @x.19
  %1101 = load i32, i32* @y.20
  %1102 = sub i32 %1100, 1
  %1103 = mul i32 %1100, %1102
  %1104 = urem i32 %1103, 2
  %1105 = icmp eq i32 %1104, 0
  %1106 = icmp slt i32 %1101, 10
  %1107 = or i1 %1105, %1106
  br i1 %1107, label %originalBBpart2256, label %originalBB254alteredBB

originalBBpart2256:                               ; preds = %originalBB254
  br i1 %1099, label %1108, label %1128, !dbg !1338

1108:                                             ; preds = %originalBBpart2256
  %1109 = load i32, i32* @x.19
  %1110 = load i32, i32* @y.20
  %1111 = sub i32 %1109, 1
  %1112 = mul i32 %1109, %1111
  %1113 = urem i32 %1112, 2
  %1114 = icmp eq i32 %1113, 0
  %1115 = icmp slt i32 %1110, 10
  %1116 = or i1 %1114, %1115
  br i1 %1116, label %originalBB258, label %originalBB258alteredBB

originalBB258:                                    ; preds = %1108, %originalBB258alteredBB
  %1117 = load i8*, i8** %19, align 8, !dbg !1335
  %1118 = load i64, i64* %29, align 8, !dbg !1335
  %1119 = getelementptr inbounds i8, i8* %1117, i64 %1118, !dbg !1335
  store i8 92, i8* %1119, align 1, !dbg !1335
  %1120 = load i32, i32* @x.19
  %1121 = load i32, i32* @y.20
  %1122 = sub i32 %1120, 1
  %1123 = mul i32 %1120, %1122
  %1124 = urem i32 %1123, 2
  %1125 = icmp eq i32 %1124, 0
  %1126 = icmp slt i32 %1121, 10
  %1127 = or i1 %1125, %1126
  br i1 %1127, label %originalBBpart2260, label %originalBB258alteredBB

originalBBpart2260:                               ; preds = %originalBB258
  br label %1128, !dbg !1335

1128:                                             ; preds = %originalBBpart2260, %originalBBpart2256
  %1129 = load i32, i32* @x.19
  %1130 = load i32, i32* @y.20
  %1131 = sub i32 %1129, 1
  %1132 = mul i32 %1129, %1131
  %1133 = urem i32 %1132, 2
  %1134 = icmp eq i32 %1133, 0
  %1135 = icmp slt i32 %1130, 10
  %1136 = or i1 %1134, %1135
  br i1 %1136, label %originalBB262, label %originalBB262alteredBB

originalBB262:                                    ; preds = %1128, %originalBB262alteredBB
  %1137 = load i64, i64* %29, align 8, !dbg !1338
  %1138 = add i64 %1137, 1, !dbg !1338
  store i64 %1138, i64* %29, align 8, !dbg !1338
  %1139 = load i32, i32* @x.19
  %1140 = load i32, i32* @y.20
  %1141 = sub i32 %1139, 1
  %1142 = mul i32 %1139, %1141
  %1143 = urem i32 %1142, 2
  %1144 = icmp eq i32 %1143, 0
  %1145 = icmp slt i32 %1140, 10
  %1146 = or i1 %1144, %1145
  br i1 %1146, label %originalBBpart2268, label %originalBB262alteredBB

originalBBpart2268:                               ; preds = %originalBB262
  br label %1147, !dbg !1338

1147:                                             ; preds = %originalBBpart2268
  %1148 = load i32, i32* @x.19
  %1149 = load i32, i32* @y.20
  %1150 = sub i32 %1148, 1
  %1151 = mul i32 %1148, %1150
  %1152 = urem i32 %1151, 2
  %1153 = icmp eq i32 %1152, 0
  %1154 = icmp slt i32 %1149, 10
  %1155 = or i1 %1153, %1154
  br i1 %1155, label %originalBB270, label %originalBB270alteredBB

originalBB270:                                    ; preds = %1147, %originalBB270alteredBB
  %1156 = load i32, i32* @x.19
  %1157 = load i32, i32* @y.20
  %1158 = sub i32 %1156, 1
  %1159 = mul i32 %1156, %1158
  %1160 = urem i32 %1159, 2
  %1161 = icmp eq i32 %1160, 0
  %1162 = icmp slt i32 %1157, 10
  %1163 = or i1 %1161, %1162
  br i1 %1163, label %originalBBpart2272, label %originalBB270alteredBB

originalBBpart2272:                               ; preds = %originalBB270
  br label %1164, !dbg !1318

1164:                                             ; preds = %originalBBpart2272
  %1165 = load i32, i32* %23, align 4, !dbg !1339
  %1166 = icmp ne i32 %1165, 2, !dbg !1341
  br i1 %1166, label %1167, label %1357, !dbg !1342

1167:                                             ; preds = %1164
  %1168 = load i64, i64* %28, align 8, !dbg !1343
  %1169 = add i64 %1168, 1, !dbg !1344
  %1170 = load i64, i64* %22, align 8, !dbg !1345
  %1171 = icmp ult i64 %1169, %1170, !dbg !1346
  br i1 %1171, label %1172, label %1357, !dbg !1347

1172:                                             ; preds = %1167
  %1173 = load i32, i32* @x.19
  %1174 = load i32, i32* @y.20
  %1175 = sub i32 %1173, 1
  %1176 = mul i32 %1173, %1175
  %1177 = urem i32 %1176, 2
  %1178 = icmp eq i32 %1177, 0
  %1179 = icmp slt i32 %1174, 10
  %1180 = or i1 %1178, %1179
  br i1 %1180, label %originalBB274, label %originalBB274alteredBB

originalBB274:                                    ; preds = %1172, %originalBB274alteredBB
  %1181 = load i8*, i8** %21, align 8, !dbg !1348
  %1182 = load i64, i64* %28, align 8, !dbg !1349
  %1183 = add i64 %1182, 1, !dbg !1350
  %1184 = getelementptr inbounds i8, i8* %1181, i64 %1183, !dbg !1348
  %1185 = load i8, i8* %1184, align 1, !dbg !1348
  %1186 = sext i8 %1185 to i32, !dbg !1348
  %1187 = icmp sle i32 48, %1186, !dbg !1351
  %1188 = load i32, i32* @x.19
  %1189 = load i32, i32* @y.20
  %1190 = sub i32 %1188, 1
  %1191 = mul i32 %1188, %1190
  %1192 = urem i32 %1191, 2
  %1193 = icmp eq i32 %1192, 0
  %1194 = icmp slt i32 %1189, 10
  %1195 = or i1 %1193, %1194
  br i1 %1195, label %originalBBpart2277, label %originalBB274alteredBB

originalBBpart2277:                               ; preds = %originalBB274
  br i1 %1187, label %1196, label %1357, !dbg !1352

1196:                                             ; preds = %originalBBpart2277
  %1197 = load i32, i32* @x.19
  %1198 = load i32, i32* @y.20
  %1199 = sub i32 %1197, 1
  %1200 = mul i32 %1197, %1199
  %1201 = urem i32 %1200, 2
  %1202 = icmp eq i32 %1201, 0
  %1203 = icmp slt i32 %1198, 10
  %1204 = or i1 %1202, %1203
  br i1 %1204, label %originalBB279, label %originalBB279alteredBB

originalBB279:                                    ; preds = %1196, %originalBB279alteredBB
  %1205 = load i8*, i8** %21, align 8, !dbg !1353
  %1206 = load i64, i64* %28, align 8, !dbg !1354
  %1207 = add i64 %1206, 1, !dbg !1355
  %1208 = getelementptr inbounds i8, i8* %1205, i64 %1207, !dbg !1353
  %1209 = load i8, i8* %1208, align 1, !dbg !1353
  %1210 = sext i8 %1209 to i32, !dbg !1353
  %1211 = icmp sle i32 %1210, 57, !dbg !1356
  %1212 = load i32, i32* @x.19
  %1213 = load i32, i32* @y.20
  %1214 = sub i32 %1212, 1
  %1215 = mul i32 %1212, %1214
  %1216 = urem i32 %1215, 2
  %1217 = icmp eq i32 %1216, 0
  %1218 = icmp slt i32 %1213, 10
  %1219 = or i1 %1217, %1218
  br i1 %1219, label %originalBBpart2296, label %originalBB279alteredBB

originalBBpart2296:                               ; preds = %originalBB279
  br i1 %1211, label %1220, label %1357, !dbg !1357

1220:                                             ; preds = %originalBBpart2296
  %1221 = load i32, i32* @x.19
  %1222 = load i32, i32* @y.20
  %1223 = sub i32 %1221, 1
  %1224 = mul i32 %1221, %1223
  %1225 = urem i32 %1224, 2
  %1226 = icmp eq i32 %1225, 0
  %1227 = icmp slt i32 %1222, 10
  %1228 = or i1 %1226, %1227
  br i1 %1228, label %originalBB298, label %originalBB298alteredBB

originalBB298:                                    ; preds = %1220, %originalBB298alteredBB
  %1229 = load i32, i32* @x.19
  %1230 = load i32, i32* @y.20
  %1231 = sub i32 %1229, 1
  %1232 = mul i32 %1229, %1231
  %1233 = urem i32 %1232, 2
  %1234 = icmp eq i32 %1233, 0
  %1235 = icmp slt i32 %1230, 10
  %1236 = or i1 %1234, %1235
  br i1 %1236, label %originalBBpart2300, label %originalBB298alteredBB

originalBBpart2300:                               ; preds = %originalBB298
  br label %1237, !dbg !1358

1237:                                             ; preds = %originalBBpart2300
  %1238 = load i32, i32* @x.19
  %1239 = load i32, i32* @y.20
  %1240 = sub i32 %1238, 1
  %1241 = mul i32 %1238, %1240
  %1242 = urem i32 %1241, 2
  %1243 = icmp eq i32 %1242, 0
  %1244 = icmp slt i32 %1239, 10
  %1245 = or i1 %1243, %1244
  br i1 %1245, label %originalBB302, label %originalBB302alteredBB

originalBB302:                                    ; preds = %1237, %originalBB302alteredBB
  %1246 = load i64, i64* %29, align 8, !dbg !1360
  %1247 = load i64, i64* %20, align 8, !dbg !1360
  %1248 = icmp ult i64 %1246, %1247, !dbg !1360
  %1249 = load i32, i32* @x.19
  %1250 = load i32, i32* @y.20
  %1251 = sub i32 %1249, 1
  %1252 = mul i32 %1249, %1251
  %1253 = urem i32 %1252, 2
  %1254 = icmp eq i32 %1253, 0
  %1255 = icmp slt i32 %1250, 10
  %1256 = or i1 %1254, %1255
  br i1 %1256, label %originalBBpart2304, label %originalBB302alteredBB

originalBBpart2304:                               ; preds = %originalBB302
  br i1 %1248, label %1257, label %1277, !dbg !1363

1257:                                             ; preds = %originalBBpart2304
  %1258 = load i32, i32* @x.19
  %1259 = load i32, i32* @y.20
  %1260 = sub i32 %1258, 1
  %1261 = mul i32 %1258, %1260
  %1262 = urem i32 %1261, 2
  %1263 = icmp eq i32 %1262, 0
  %1264 = icmp slt i32 %1259, 10
  %1265 = or i1 %1263, %1264
  br i1 %1265, label %originalBB306, label %originalBB306alteredBB

originalBB306:                                    ; preds = %1257, %originalBB306alteredBB
  %1266 = load i8*, i8** %19, align 8, !dbg !1360
  %1267 = load i64, i64* %29, align 8, !dbg !1360
  %1268 = getelementptr inbounds i8, i8* %1266, i64 %1267, !dbg !1360
  store i8 48, i8* %1268, align 1, !dbg !1360
  %1269 = load i32, i32* @x.19
  %1270 = load i32, i32* @y.20
  %1271 = sub i32 %1269, 1
  %1272 = mul i32 %1269, %1271
  %1273 = urem i32 %1272, 2
  %1274 = icmp eq i32 %1273, 0
  %1275 = icmp slt i32 %1270, 10
  %1276 = or i1 %1274, %1275
  br i1 %1276, label %originalBBpart2308, label %originalBB306alteredBB

originalBBpart2308:                               ; preds = %originalBB306
  br label %1277, !dbg !1360

1277:                                             ; preds = %originalBBpart2308, %originalBBpart2304
  %1278 = load i32, i32* @x.19
  %1279 = load i32, i32* @y.20
  %1280 = sub i32 %1278, 1
  %1281 = mul i32 %1278, %1280
  %1282 = urem i32 %1281, 2
  %1283 = icmp eq i32 %1282, 0
  %1284 = icmp slt i32 %1279, 10
  %1285 = or i1 %1283, %1284
  br i1 %1285, label %originalBB310, label %originalBB310alteredBB

originalBB310:                                    ; preds = %1277, %originalBB310alteredBB
  %1286 = load i64, i64* %29, align 8, !dbg !1363
  %1287 = add i64 %1286, 1, !dbg !1363
  store i64 %1287, i64* %29, align 8, !dbg !1363
  %1288 = load i32, i32* @x.19
  %1289 = load i32, i32* @y.20
  %1290 = sub i32 %1288, 1
  %1291 = mul i32 %1288, %1290
  %1292 = urem i32 %1291, 2
  %1293 = icmp eq i32 %1292, 0
  %1294 = icmp slt i32 %1289, 10
  %1295 = or i1 %1293, %1294
  br i1 %1295, label %originalBBpart2321, label %originalBB310alteredBB

originalBBpart2321:                               ; preds = %originalBB310
  br label %1296, !dbg !1363

1296:                                             ; preds = %originalBBpart2321
  br label %1297, !dbg !1364

1297:                                             ; preds = %1296
  %1298 = load i64, i64* %29, align 8, !dbg !1365
  %1299 = load i64, i64* %20, align 8, !dbg !1365
  %1300 = icmp ult i64 %1298, %1299, !dbg !1365
  br i1 %1300, label %1301, label %1321, !dbg !1368

1301:                                             ; preds = %1297
  %1302 = load i32, i32* @x.19
  %1303 = load i32, i32* @y.20
  %1304 = sub i32 %1302, 1
  %1305 = mul i32 %1302, %1304
  %1306 = urem i32 %1305, 2
  %1307 = icmp eq i32 %1306, 0
  %1308 = icmp slt i32 %1303, 10
  %1309 = or i1 %1307, %1308
  br i1 %1309, label %originalBB323, label %originalBB323alteredBB

originalBB323:                                    ; preds = %1301, %originalBB323alteredBB
  %1310 = load i8*, i8** %19, align 8, !dbg !1365
  %1311 = load i64, i64* %29, align 8, !dbg !1365
  %1312 = getelementptr inbounds i8, i8* %1310, i64 %1311, !dbg !1365
  store i8 48, i8* %1312, align 1, !dbg !1365
  %1313 = load i32, i32* @x.19
  %1314 = load i32, i32* @y.20
  %1315 = sub i32 %1313, 1
  %1316 = mul i32 %1313, %1315
  %1317 = urem i32 %1316, 2
  %1318 = icmp eq i32 %1317, 0
  %1319 = icmp slt i32 %1314, 10
  %1320 = or i1 %1318, %1319
  br i1 %1320, label %originalBBpart2325, label %originalBB323alteredBB

originalBBpart2325:                               ; preds = %originalBB323
  br label %1321, !dbg !1365

1321:                                             ; preds = %originalBBpart2325, %1297
  %1322 = load i32, i32* @x.19
  %1323 = load i32, i32* @y.20
  %1324 = sub i32 %1322, 1
  %1325 = mul i32 %1322, %1324
  %1326 = urem i32 %1325, 2
  %1327 = icmp eq i32 %1326, 0
  %1328 = icmp slt i32 %1323, 10
  %1329 = or i1 %1327, %1328
  br i1 %1329, label %originalBB327, label %originalBB327alteredBB

originalBB327:                                    ; preds = %1321, %originalBB327alteredBB
  %1330 = load i64, i64* %29, align 8, !dbg !1368
  %1331 = add i64 %1330, 1, !dbg !1368
  store i64 %1331, i64* %29, align 8, !dbg !1368
  %1332 = load i32, i32* @x.19
  %1333 = load i32, i32* @y.20
  %1334 = sub i32 %1332, 1
  %1335 = mul i32 %1332, %1334
  %1336 = urem i32 %1335, 2
  %1337 = icmp eq i32 %1336, 0
  %1338 = icmp slt i32 %1333, 10
  %1339 = or i1 %1337, %1338
  br i1 %1339, label %originalBBpart2337, label %originalBB327alteredBB

originalBBpart2337:                               ; preds = %originalBB327
  br label %1340, !dbg !1368

1340:                                             ; preds = %originalBBpart2337
  %1341 = load i32, i32* @x.19
  %1342 = load i32, i32* @y.20
  %1343 = sub i32 %1341, 1
  %1344 = mul i32 %1341, %1343
  %1345 = urem i32 %1344, 2
  %1346 = icmp eq i32 %1345, 0
  %1347 = icmp slt i32 %1342, 10
  %1348 = or i1 %1346, %1347
  br i1 %1348, label %originalBB339, label %originalBB339alteredBB

originalBB339:                                    ; preds = %1340, %originalBB339alteredBB
  %1349 = load i32, i32* @x.19
  %1350 = load i32, i32* @y.20
  %1351 = sub i32 %1349, 1
  %1352 = mul i32 %1349, %1351
  %1353 = urem i32 %1352, 2
  %1354 = icmp eq i32 %1353, 0
  %1355 = icmp slt i32 %1350, 10
  %1356 = or i1 %1354, %1355
  br i1 %1356, label %originalBBpart2341, label %originalBB339alteredBB

originalBBpart2341:                               ; preds = %originalBB339
  br label %1357, !dbg !1369

1357:                                             ; preds = %originalBBpart2341, %originalBBpart2296, %originalBBpart2277, %1167, %1164
  %1358 = load i32, i32* @x.19
  %1359 = load i32, i32* @y.20
  %1360 = sub i32 %1358, 1
  %1361 = mul i32 %1358, %1360
  %1362 = urem i32 %1361, 2
  %1363 = icmp eq i32 %1362, 0
  %1364 = icmp slt i32 %1359, 10
  %1365 = or i1 %1363, %1364
  br i1 %1365, label %originalBB343, label %originalBB343alteredBB

originalBB343:                                    ; preds = %1357, %originalBB343alteredBB
  store i8 48, i8* %39, align 1, !dbg !1370
  %1366 = load i32, i32* @x.19
  %1367 = load i32, i32* @y.20
  %1368 = sub i32 %1366, 1
  %1369 = mul i32 %1366, %1368
  %1370 = urem i32 %1369, 2
  %1371 = icmp eq i32 %1370, 0
  %1372 = icmp slt i32 %1367, 10
  %1373 = or i1 %1371, %1372
  br i1 %1373, label %originalBBpart2345, label %originalBB343alteredBB

originalBBpart2345:                               ; preds = %originalBB343
  br label %1428, !dbg !1371

1374:                                             ; preds = %860
  %1375 = load i32, i32* @x.19
  %1376 = load i32, i32* @y.20
  %1377 = sub i32 %1375, 1
  %1378 = mul i32 %1375, %1377
  %1379 = urem i32 %1378, 2
  %1380 = icmp eq i32 %1379, 0
  %1381 = icmp slt i32 %1376, 10
  %1382 = or i1 %1380, %1381
  br i1 %1382, label %originalBB347, label %originalBB347alteredBB

originalBB347:                                    ; preds = %1374, %originalBB347alteredBB
  %1383 = load i32, i32* %24, align 4, !dbg !1372
  %1384 = and i32 %1383, 1, !dbg !1374
  %1385 = icmp ne i32 %1384, 0, !dbg !1374
  %1386 = load i32, i32* @x.19
  %1387 = load i32, i32* @y.20
  %1388 = sub i32 %1386, 1
  %1389 = mul i32 %1386, %1388
  %1390 = urem i32 %1389, 2
  %1391 = icmp eq i32 %1390, 0
  %1392 = icmp slt i32 %1387, 10
  %1393 = or i1 %1391, %1392
  br i1 %1393, label %originalBBpart2351, label %originalBB347alteredBB

originalBBpart2351:                               ; preds = %originalBB347
  br i1 %1385, label %1394, label %1411, !dbg !1375

1394:                                             ; preds = %originalBBpart2351
  %1395 = load i32, i32* @x.19
  %1396 = load i32, i32* @y.20
  %1397 = sub i32 %1395, 1
  %1398 = mul i32 %1395, %1397
  %1399 = urem i32 %1398, 2
  %1400 = icmp eq i32 %1399, 0
  %1401 = icmp slt i32 %1396, 10
  %1402 = or i1 %1400, %1401
  br i1 %1402, label %originalBB353, label %originalBB353alteredBB

originalBB353:                                    ; preds = %1394, %originalBB353alteredBB
  %1403 = load i32, i32* @x.19
  %1404 = load i32, i32* @y.20
  %1405 = sub i32 %1403, 1
  %1406 = mul i32 %1403, %1405
  %1407 = urem i32 %1406, 2
  %1408 = icmp eq i32 %1407, 0
  %1409 = icmp slt i32 %1404, 10
  %1410 = or i1 %1408, %1409
  br i1 %1410, label %originalBBpart2355, label %originalBB353alteredBB

originalBBpart2355:                               ; preds = %originalBB353
  br label %4953, !dbg !1376

1411:                                             ; preds = %originalBBpart2351
  %1412 = load i32, i32* @x.19
  %1413 = load i32, i32* @y.20
  %1414 = sub i32 %1412, 1
  %1415 = mul i32 %1412, %1414
  %1416 = urem i32 %1415, 2
  %1417 = icmp eq i32 %1416, 0
  %1418 = icmp slt i32 %1413, 10
  %1419 = or i1 %1417, %1418
  br i1 %1419, label %originalBB357, label %originalBB357alteredBB

originalBB357:                                    ; preds = %1411, %originalBB357alteredBB
  %1420 = load i32, i32* @x.19
  %1421 = load i32, i32* @y.20
  %1422 = sub i32 %1420, 1
  %1423 = mul i32 %1420, %1422
  %1424 = urem i32 %1423, 2
  %1425 = icmp eq i32 %1424, 0
  %1426 = icmp slt i32 %1421, 10
  %1427 = or i1 %1425, %1426
  br i1 %1427, label %originalBBpart2359, label %originalBB357alteredBB

originalBBpart2359:                               ; preds = %originalBB357
  br label %1428

1428:                                             ; preds = %originalBBpart2359, %originalBBpart2345
  %1429 = load i32, i32* @x.19
  %1430 = load i32, i32* @y.20
  %1431 = sub i32 %1429, 1
  %1432 = mul i32 %1429, %1431
  %1433 = urem i32 %1432, 2
  %1434 = icmp eq i32 %1433, 0
  %1435 = icmp slt i32 %1430, 10
  %1436 = or i1 %1434, %1435
  br i1 %1436, label %originalBB361, label %originalBB361alteredBB

originalBB361:                                    ; preds = %1428, %originalBB361alteredBB
  %1437 = load i32, i32* @x.19
  %1438 = load i32, i32* @y.20
  %1439 = sub i32 %1437, 1
  %1440 = mul i32 %1437, %1439
  %1441 = urem i32 %1440, 2
  %1442 = icmp eq i32 %1441, 0
  %1443 = icmp slt i32 %1438, 10
  %1444 = or i1 %1442, %1443
  br i1 %1444, label %originalBBpart2363, label %originalBB361alteredBB

originalBBpart2363:                               ; preds = %originalBB361
  br label %4201, !dbg !1377

1445:                                             ; preds = %originalBBpart2200
  %1446 = load i32, i32* @x.19
  %1447 = load i32, i32* @y.20
  %1448 = sub i32 %1446, 1
  %1449 = mul i32 %1446, %1448
  %1450 = urem i32 %1449, 2
  %1451 = icmp eq i32 %1450, 0
  %1452 = icmp slt i32 %1447, 10
  %1453 = or i1 %1451, %1452
  br i1 %1453, label %originalBB365, label %originalBB365alteredBB

originalBB365:                                    ; preds = %1445, %originalBB365alteredBB
  %1454 = load i32, i32* %23, align 4, !dbg !1378
  %1455 = load i32, i32* @x.19
  %1456 = load i32, i32* @y.20
  %1457 = sub i32 %1455, 1
  %1458 = mul i32 %1455, %1457
  %1459 = urem i32 %1458, 2
  %1460 = icmp eq i32 %1459, 0
  %1461 = icmp slt i32 %1456, 10
  %1462 = or i1 %1460, %1461
  br i1 %1462, label %originalBBpart2367, label %originalBB365alteredBB

originalBBpart2367:                               ; preds = %originalBB365
  switch i32 %1454, label %1907 [
    i32 2, label %1463
    i32 5, label %1500
  ], !dbg !1379

1463:                                             ; preds = %originalBBpart2367
  %1464 = load i8, i8* %35, align 1, !dbg !1380
  %1465 = trunc i8 %1464 to i1, !dbg !1380
  br i1 %1465, label %1466, label %1483, !dbg !1383

1466:                                             ; preds = %1463
  %1467 = load i32, i32* @x.19
  %1468 = load i32, i32* @y.20
  %1469 = sub i32 %1467, 1
  %1470 = mul i32 %1467, %1469
  %1471 = urem i32 %1470, 2
  %1472 = icmp eq i32 %1471, 0
  %1473 = icmp slt i32 %1468, 10
  %1474 = or i1 %1472, %1473
  br i1 %1474, label %originalBB369, label %originalBB369alteredBB

originalBB369:                                    ; preds = %1466, %originalBB369alteredBB
  %1475 = load i32, i32* @x.19
  %1476 = load i32, i32* @y.20
  %1477 = sub i32 %1475, 1
  %1478 = mul i32 %1475, %1477
  %1479 = urem i32 %1478, 2
  %1480 = icmp eq i32 %1479, 0
  %1481 = icmp slt i32 %1476, 10
  %1482 = or i1 %1480, %1481
  br i1 %1482, label %originalBBpart2371, label %originalBB369alteredBB

originalBBpart2371:                               ; preds = %originalBB369
  br label %5326, !dbg !1384

1483:                                             ; preds = %1463
  %1484 = load i32, i32* @x.19
  %1485 = load i32, i32* @y.20
  %1486 = sub i32 %1484, 1
  %1487 = mul i32 %1484, %1486
  %1488 = urem i32 %1487, 2
  %1489 = icmp eq i32 %1488, 0
  %1490 = icmp slt i32 %1485, 10
  %1491 = or i1 %1489, %1490
  br i1 %1491, label %originalBB373, label %originalBB373alteredBB

originalBB373:                                    ; preds = %1483, %originalBB373alteredBB
  %1492 = load i32, i32* @x.19
  %1493 = load i32, i32* @y.20
  %1494 = sub i32 %1492, 1
  %1495 = mul i32 %1492, %1494
  %1496 = urem i32 %1495, 2
  %1497 = icmp eq i32 %1496, 0
  %1498 = icmp slt i32 %1493, 10
  %1499 = or i1 %1497, %1498
  br i1 %1499, label %originalBBpart2375, label %originalBB373alteredBB

originalBBpart2375:                               ; preds = %originalBB373
  br label %1924, !dbg !1385

1500:                                             ; preds = %originalBBpart2367
  %1501 = load i32, i32* @x.19
  %1502 = load i32, i32* @y.20
  %1503 = sub i32 %1501, 1
  %1504 = mul i32 %1501, %1503
  %1505 = urem i32 %1504, 2
  %1506 = icmp eq i32 %1505, 0
  %1507 = icmp slt i32 %1502, 10
  %1508 = or i1 %1506, %1507
  br i1 %1508, label %originalBB377, label %originalBB377alteredBB

originalBB377:                                    ; preds = %1500, %originalBB377alteredBB
  %1509 = load i32, i32* %24, align 4, !dbg !1386
  %1510 = and i32 %1509, 4, !dbg !1388
  %1511 = icmp ne i32 %1510, 0, !dbg !1388
  %1512 = load i32, i32* @x.19
  %1513 = load i32, i32* @y.20
  %1514 = sub i32 %1512, 1
  %1515 = mul i32 %1512, %1514
  %1516 = urem i32 %1515, 2
  %1517 = icmp eq i32 %1516, 0
  %1518 = icmp slt i32 %1513, 10
  %1519 = or i1 %1517, %1518
  br i1 %1519, label %originalBBpart2389, label %originalBB377alteredBB

originalBBpart2389:                               ; preds = %originalBB377
  br i1 %1511, label %1520, label %1890, !dbg !1389

1520:                                             ; preds = %originalBBpart2389
  %1521 = load i32, i32* @x.19
  %1522 = load i32, i32* @y.20
  %1523 = sub i32 %1521, 1
  %1524 = mul i32 %1521, %1523
  %1525 = urem i32 %1524, 2
  %1526 = icmp eq i32 %1525, 0
  %1527 = icmp slt i32 %1522, 10
  %1528 = or i1 %1526, %1527
  br i1 %1528, label %originalBB391, label %originalBB391alteredBB

originalBB391:                                    ; preds = %1520, %originalBB391alteredBB
  %1529 = load i64, i64* %28, align 8, !dbg !1390
  %1530 = add i64 %1529, 2, !dbg !1391
  %1531 = load i64, i64* %22, align 8, !dbg !1392
  %1532 = icmp ult i64 %1530, %1531, !dbg !1393
  %1533 = load i32, i32* @x.19
  %1534 = load i32, i32* @y.20
  %1535 = sub i32 %1533, 1
  %1536 = mul i32 %1533, %1535
  %1537 = urem i32 %1536, 2
  %1538 = icmp eq i32 %1537, 0
  %1539 = icmp slt i32 %1534, 10
  %1540 = or i1 %1538, %1539
  br i1 %1540, label %originalBBpart2403, label %originalBB391alteredBB

originalBBpart2403:                               ; preds = %originalBB391
  br i1 %1532, label %1541, label %1890, !dbg !1394

1541:                                             ; preds = %originalBBpart2403
  %1542 = load i32, i32* @x.19
  %1543 = load i32, i32* @y.20
  %1544 = sub i32 %1542, 1
  %1545 = mul i32 %1542, %1544
  %1546 = urem i32 %1545, 2
  %1547 = icmp eq i32 %1546, 0
  %1548 = icmp slt i32 %1543, 10
  %1549 = or i1 %1547, %1548
  br i1 %1549, label %originalBB405, label %originalBB405alteredBB

originalBB405:                                    ; preds = %1541, %originalBB405alteredBB
  %1550 = load i8*, i8** %21, align 8, !dbg !1395
  %1551 = load i64, i64* %28, align 8, !dbg !1396
  %1552 = add i64 %1551, 1, !dbg !1397
  %1553 = getelementptr inbounds i8, i8* %1550, i64 %1552, !dbg !1395
  %1554 = load i8, i8* %1553, align 1, !dbg !1395
  %1555 = sext i8 %1554 to i32, !dbg !1395
  %1556 = icmp eq i32 %1555, 63, !dbg !1398
  %1557 = load i32, i32* @x.19
  %1558 = load i32, i32* @y.20
  %1559 = sub i32 %1557, 1
  %1560 = mul i32 %1557, %1559
  %1561 = urem i32 %1560, 2
  %1562 = icmp eq i32 %1561, 0
  %1563 = icmp slt i32 %1558, 10
  %1564 = or i1 %1562, %1563
  br i1 %1564, label %originalBBpart2415, label %originalBB405alteredBB

originalBBpart2415:                               ; preds = %originalBB405
  br i1 %1556, label %1565, label %1890, !dbg !1399

1565:                                             ; preds = %originalBBpart2415
  %1566 = load i32, i32* @x.19
  %1567 = load i32, i32* @y.20
  %1568 = sub i32 %1566, 1
  %1569 = mul i32 %1566, %1568
  %1570 = urem i32 %1569, 2
  %1571 = icmp eq i32 %1570, 0
  %1572 = icmp slt i32 %1567, 10
  %1573 = or i1 %1571, %1572
  br i1 %1573, label %originalBB417, label %originalBB417alteredBB

originalBB417:                                    ; preds = %1565, %originalBB417alteredBB
  %1574 = load i8*, i8** %21, align 8, !dbg !1400
  %1575 = load i64, i64* %28, align 8, !dbg !1401
  %1576 = add i64 %1575, 2, !dbg !1402
  %1577 = getelementptr inbounds i8, i8* %1574, i64 %1576, !dbg !1400
  %1578 = load i8, i8* %1577, align 1, !dbg !1400
  %1579 = sext i8 %1578 to i32, !dbg !1400
  %1580 = load i32, i32* @x.19
  %1581 = load i32, i32* @y.20
  %1582 = sub i32 %1580, 1
  %1583 = mul i32 %1580, %1582
  %1584 = urem i32 %1583, 2
  %1585 = icmp eq i32 %1584, 0
  %1586 = icmp slt i32 %1581, 10
  %1587 = or i1 %1585, %1586
  br i1 %1587, label %originalBBpart2422, label %originalBB417alteredBB

originalBBpart2422:                               ; preds = %originalBB417
  switch i32 %1579, label %1856 [
    i32 33, label %1588
    i32 39, label %1588
    i32 40, label %1588
    i32 41, label %1588
    i32 45, label %1588
    i32 47, label %1588
    i32 60, label %1588
    i32 61, label %1588
    i32 62, label %1588
  ], !dbg !1403

1588:                                             ; preds = %originalBBpart2422, %originalBBpart2422, %originalBBpart2422, %originalBBpart2422, %originalBBpart2422, %originalBBpart2422, %originalBBpart2422, %originalBBpart2422, %originalBBpart2422
  %1589 = load i32, i32* @x.19
  %1590 = load i32, i32* @y.20
  %1591 = sub i32 %1589, 1
  %1592 = mul i32 %1589, %1591
  %1593 = urem i32 %1592, 2
  %1594 = icmp eq i32 %1593, 0
  %1595 = icmp slt i32 %1590, 10
  %1596 = or i1 %1594, %1595
  br i1 %1596, label %originalBB424, label %originalBB424alteredBB

originalBB424:                                    ; preds = %1588, %originalBB424alteredBB
  %1597 = load i8, i8* %35, align 1, !dbg !1404
  %1598 = trunc i8 %1597 to i1, !dbg !1404
  %1599 = load i32, i32* @x.19
  %1600 = load i32, i32* @y.20
  %1601 = sub i32 %1599, 1
  %1602 = mul i32 %1599, %1601
  %1603 = urem i32 %1602, 2
  %1604 = icmp eq i32 %1603, 0
  %1605 = icmp slt i32 %1600, 10
  %1606 = or i1 %1604, %1605
  br i1 %1606, label %originalBBpart2426, label %originalBB424alteredBB

originalBBpart2426:                               ; preds = %originalBB424
  br i1 %1598, label %1607, label %1608, !dbg !1407

1607:                                             ; preds = %originalBBpart2426
  br label %5326, !dbg !1408

1608:                                             ; preds = %originalBBpart2426
  %1609 = load i32, i32* @x.19
  %1610 = load i32, i32* @y.20
  %1611 = sub i32 %1609, 1
  %1612 = mul i32 %1609, %1611
  %1613 = urem i32 %1612, 2
  %1614 = icmp eq i32 %1613, 0
  %1615 = icmp slt i32 %1610, 10
  %1616 = or i1 %1614, %1615
  br i1 %1616, label %originalBB428, label %originalBB428alteredBB

originalBB428:                                    ; preds = %1608, %originalBB428alteredBB
  %1617 = load i8*, i8** %21, align 8, !dbg !1409
  %1618 = load i64, i64* %28, align 8, !dbg !1410
  %1619 = add i64 %1618, 2, !dbg !1411
  %1620 = getelementptr inbounds i8, i8* %1617, i64 %1619, !dbg !1409
  %1621 = load i8, i8* %1620, align 1, !dbg !1409
  store i8 %1621, i8* %39, align 1, !dbg !1412
  %1622 = load i64, i64* %28, align 8, !dbg !1413
  %1623 = add i64 %1622, 2, !dbg !1413
  store i64 %1623, i64* %28, align 8, !dbg !1413
  %1624 = load i32, i32* @x.19
  %1625 = load i32, i32* @y.20
  %1626 = sub i32 %1624, 1
  %1627 = mul i32 %1624, %1626
  %1628 = urem i32 %1627, 2
  %1629 = icmp eq i32 %1628, 0
  %1630 = icmp slt i32 %1625, 10
  %1631 = or i1 %1629, %1630
  br i1 %1631, label %originalBBpart2437, label %originalBB428alteredBB

originalBBpart2437:                               ; preds = %originalBB428
  br label %1632, !dbg !1414

1632:                                             ; preds = %originalBBpart2437
  %1633 = load i32, i32* @x.19
  %1634 = load i32, i32* @y.20
  %1635 = sub i32 %1633, 1
  %1636 = mul i32 %1633, %1635
  %1637 = urem i32 %1636, 2
  %1638 = icmp eq i32 %1637, 0
  %1639 = icmp slt i32 %1634, 10
  %1640 = or i1 %1638, %1639
  br i1 %1640, label %originalBB439, label %originalBB439alteredBB

originalBB439:                                    ; preds = %1632, %originalBB439alteredBB
  %1641 = load i64, i64* %29, align 8, !dbg !1415
  %1642 = load i64, i64* %20, align 8, !dbg !1415
  %1643 = icmp ult i64 %1641, %1642, !dbg !1415
  %1644 = load i32, i32* @x.19
  %1645 = load i32, i32* @y.20
  %1646 = sub i32 %1644, 1
  %1647 = mul i32 %1644, %1646
  %1648 = urem i32 %1647, 2
  %1649 = icmp eq i32 %1648, 0
  %1650 = icmp slt i32 %1645, 10
  %1651 = or i1 %1649, %1650
  br i1 %1651, label %originalBBpart2441, label %originalBB439alteredBB

originalBBpart2441:                               ; preds = %originalBB439
  br i1 %1643, label %1652, label %1656, !dbg !1418

1652:                                             ; preds = %originalBBpart2441
  %1653 = load i8*, i8** %19, align 8, !dbg !1415
  %1654 = load i64, i64* %29, align 8, !dbg !1415
  %1655 = getelementptr inbounds i8, i8* %1653, i64 %1654, !dbg !1415
  store i8 63, i8* %1655, align 1, !dbg !1415
  br label %1656, !dbg !1415

1656:                                             ; preds = %1652, %originalBBpart2441
  %1657 = load i32, i32* @x.19
  %1658 = load i32, i32* @y.20
  %1659 = sub i32 %1657, 1
  %1660 = mul i32 %1657, %1659
  %1661 = urem i32 %1660, 2
  %1662 = icmp eq i32 %1661, 0
  %1663 = icmp slt i32 %1658, 10
  %1664 = or i1 %1662, %1663
  br i1 %1664, label %originalBB443, label %originalBB443alteredBB

originalBB443:                                    ; preds = %1656, %originalBB443alteredBB
  %1665 = load i64, i64* %29, align 8, !dbg !1418
  %1666 = add i64 %1665, 1, !dbg !1418
  store i64 %1666, i64* %29, align 8, !dbg !1418
  %1667 = load i32, i32* @x.19
  %1668 = load i32, i32* @y.20
  %1669 = sub i32 %1667, 1
  %1670 = mul i32 %1667, %1669
  %1671 = urem i32 %1670, 2
  %1672 = icmp eq i32 %1671, 0
  %1673 = icmp slt i32 %1668, 10
  %1674 = or i1 %1672, %1673
  br i1 %1674, label %originalBBpart2453, label %originalBB443alteredBB

originalBBpart2453:                               ; preds = %originalBB443
  br label %1675, !dbg !1418

1675:                                             ; preds = %originalBBpart2453
  %1676 = load i32, i32* @x.19
  %1677 = load i32, i32* @y.20
  %1678 = sub i32 %1676, 1
  %1679 = mul i32 %1676, %1678
  %1680 = urem i32 %1679, 2
  %1681 = icmp eq i32 %1680, 0
  %1682 = icmp slt i32 %1677, 10
  %1683 = or i1 %1681, %1682
  br i1 %1683, label %originalBB455, label %originalBB455alteredBB

originalBB455:                                    ; preds = %1675, %originalBB455alteredBB
  %1684 = load i32, i32* @x.19
  %1685 = load i32, i32* @y.20
  %1686 = sub i32 %1684, 1
  %1687 = mul i32 %1684, %1686
  %1688 = urem i32 %1687, 2
  %1689 = icmp eq i32 %1688, 0
  %1690 = icmp slt i32 %1685, 10
  %1691 = or i1 %1689, %1690
  br i1 %1691, label %originalBBpart2457, label %originalBB455alteredBB

originalBBpart2457:                               ; preds = %originalBB455
  br label %1692, !dbg !1419

1692:                                             ; preds = %originalBBpart2457
  %1693 = load i32, i32* @x.19
  %1694 = load i32, i32* @y.20
  %1695 = sub i32 %1693, 1
  %1696 = mul i32 %1693, %1695
  %1697 = urem i32 %1696, 2
  %1698 = icmp eq i32 %1697, 0
  %1699 = icmp slt i32 %1694, 10
  %1700 = or i1 %1698, %1699
  br i1 %1700, label %originalBB459, label %originalBB459alteredBB

originalBB459:                                    ; preds = %1692, %originalBB459alteredBB
  %1701 = load i64, i64* %29, align 8, !dbg !1420
  %1702 = load i64, i64* %20, align 8, !dbg !1420
  %1703 = icmp ult i64 %1701, %1702, !dbg !1420
  %1704 = load i32, i32* @x.19
  %1705 = load i32, i32* @y.20
  %1706 = sub i32 %1704, 1
  %1707 = mul i32 %1704, %1706
  %1708 = urem i32 %1707, 2
  %1709 = icmp eq i32 %1708, 0
  %1710 = icmp slt i32 %1705, 10
  %1711 = or i1 %1709, %1710
  br i1 %1711, label %originalBBpart2461, label %originalBB459alteredBB

originalBBpart2461:                               ; preds = %originalBB459
  br i1 %1703, label %1712, label %1716, !dbg !1423

1712:                                             ; preds = %originalBBpart2461
  %1713 = load i8*, i8** %19, align 8, !dbg !1420
  %1714 = load i64, i64* %29, align 8, !dbg !1420
  %1715 = getelementptr inbounds i8, i8* %1713, i64 %1714, !dbg !1420
  store i8 34, i8* %1715, align 1, !dbg !1420
  br label %1716, !dbg !1420

1716:                                             ; preds = %1712, %originalBBpart2461
  %1717 = load i32, i32* @x.19
  %1718 = load i32, i32* @y.20
  %1719 = sub i32 %1717, 1
  %1720 = mul i32 %1717, %1719
  %1721 = urem i32 %1720, 2
  %1722 = icmp eq i32 %1721, 0
  %1723 = icmp slt i32 %1718, 10
  %1724 = or i1 %1722, %1723
  br i1 %1724, label %originalBB463, label %originalBB463alteredBB

originalBB463:                                    ; preds = %1716, %originalBB463alteredBB
  %1725 = load i64, i64* %29, align 8, !dbg !1423
  %1726 = add i64 %1725, 1, !dbg !1423
  store i64 %1726, i64* %29, align 8, !dbg !1423
  %1727 = load i32, i32* @x.19
  %1728 = load i32, i32* @y.20
  %1729 = sub i32 %1727, 1
  %1730 = mul i32 %1727, %1729
  %1731 = urem i32 %1730, 2
  %1732 = icmp eq i32 %1731, 0
  %1733 = icmp slt i32 %1728, 10
  %1734 = or i1 %1732, %1733
  br i1 %1734, label %originalBBpart2466, label %originalBB463alteredBB

originalBBpart2466:                               ; preds = %originalBB463
  br label %1735, !dbg !1423

1735:                                             ; preds = %originalBBpart2466
  br label %1736, !dbg !1424

1736:                                             ; preds = %1735
  %1737 = load i32, i32* @x.19
  %1738 = load i32, i32* @y.20
  %1739 = sub i32 %1737, 1
  %1740 = mul i32 %1737, %1739
  %1741 = urem i32 %1740, 2
  %1742 = icmp eq i32 %1741, 0
  %1743 = icmp slt i32 %1738, 10
  %1744 = or i1 %1742, %1743
  br i1 %1744, label %originalBB468, label %originalBB468alteredBB

originalBB468:                                    ; preds = %1736, %originalBB468alteredBB
  %1745 = load i64, i64* %29, align 8, !dbg !1425
  %1746 = load i64, i64* %20, align 8, !dbg !1425
  %1747 = icmp ult i64 %1745, %1746, !dbg !1425
  %1748 = load i32, i32* @x.19
  %1749 = load i32, i32* @y.20
  %1750 = sub i32 %1748, 1
  %1751 = mul i32 %1748, %1750
  %1752 = urem i32 %1751, 2
  %1753 = icmp eq i32 %1752, 0
  %1754 = icmp slt i32 %1749, 10
  %1755 = or i1 %1753, %1754
  br i1 %1755, label %originalBBpart2470, label %originalBB468alteredBB

originalBBpart2470:                               ; preds = %originalBB468
  br i1 %1747, label %1756, label %1760, !dbg !1428

1756:                                             ; preds = %originalBBpart2470
  %1757 = load i8*, i8** %19, align 8, !dbg !1425
  %1758 = load i64, i64* %29, align 8, !dbg !1425
  %1759 = getelementptr inbounds i8, i8* %1757, i64 %1758, !dbg !1425
  store i8 34, i8* %1759, align 1, !dbg !1425
  br label %1760, !dbg !1425

1760:                                             ; preds = %1756, %originalBBpart2470
  %1761 = load i32, i32* @x.19
  %1762 = load i32, i32* @y.20
  %1763 = sub i32 %1761, 1
  %1764 = mul i32 %1761, %1763
  %1765 = urem i32 %1764, 2
  %1766 = icmp eq i32 %1765, 0
  %1767 = icmp slt i32 %1762, 10
  %1768 = or i1 %1766, %1767
  br i1 %1768, label %originalBB472, label %originalBB472alteredBB

originalBB472:                                    ; preds = %1760, %originalBB472alteredBB
  %1769 = load i64, i64* %29, align 8, !dbg !1428
  %1770 = add i64 %1769, 1, !dbg !1428
  store i64 %1770, i64* %29, align 8, !dbg !1428
  %1771 = load i32, i32* @x.19
  %1772 = load i32, i32* @y.20
  %1773 = sub i32 %1771, 1
  %1774 = mul i32 %1771, %1773
  %1775 = urem i32 %1774, 2
  %1776 = icmp eq i32 %1775, 0
  %1777 = icmp slt i32 %1772, 10
  %1778 = or i1 %1776, %1777
  br i1 %1778, label %originalBBpart2483, label %originalBB472alteredBB

originalBBpart2483:                               ; preds = %originalBB472
  br label %1779, !dbg !1428

1779:                                             ; preds = %originalBBpart2483
  %1780 = load i32, i32* @x.19
  %1781 = load i32, i32* @y.20
  %1782 = sub i32 %1780, 1
  %1783 = mul i32 %1780, %1782
  %1784 = urem i32 %1783, 2
  %1785 = icmp eq i32 %1784, 0
  %1786 = icmp slt i32 %1781, 10
  %1787 = or i1 %1785, %1786
  br i1 %1787, label %originalBB485, label %originalBB485alteredBB

originalBB485:                                    ; preds = %1779, %originalBB485alteredBB
  %1788 = load i32, i32* @x.19
  %1789 = load i32, i32* @y.20
  %1790 = sub i32 %1788, 1
  %1791 = mul i32 %1788, %1790
  %1792 = urem i32 %1791, 2
  %1793 = icmp eq i32 %1792, 0
  %1794 = icmp slt i32 %1789, 10
  %1795 = or i1 %1793, %1794
  br i1 %1795, label %originalBBpart2487, label %originalBB485alteredBB

originalBBpart2487:                               ; preds = %originalBB485
  br label %1796, !dbg !1429

1796:                                             ; preds = %originalBBpart2487
  %1797 = load i64, i64* %29, align 8, !dbg !1430
  %1798 = load i64, i64* %20, align 8, !dbg !1430
  %1799 = icmp ult i64 %1797, %1798, !dbg !1430
  br i1 %1799, label %1800, label %1820, !dbg !1433

1800:                                             ; preds = %1796
  %1801 = load i32, i32* @x.19
  %1802 = load i32, i32* @y.20
  %1803 = sub i32 %1801, 1
  %1804 = mul i32 %1801, %1803
  %1805 = urem i32 %1804, 2
  %1806 = icmp eq i32 %1805, 0
  %1807 = icmp slt i32 %1802, 10
  %1808 = or i1 %1806, %1807
  br i1 %1808, label %originalBB489, label %originalBB489alteredBB

originalBB489:                                    ; preds = %1800, %originalBB489alteredBB
  %1809 = load i8*, i8** %19, align 8, !dbg !1430
  %1810 = load i64, i64* %29, align 8, !dbg !1430
  %1811 = getelementptr inbounds i8, i8* %1809, i64 %1810, !dbg !1430
  store i8 63, i8* %1811, align 1, !dbg !1430
  %1812 = load i32, i32* @x.19
  %1813 = load i32, i32* @y.20
  %1814 = sub i32 %1812, 1
  %1815 = mul i32 %1812, %1814
  %1816 = urem i32 %1815, 2
  %1817 = icmp eq i32 %1816, 0
  %1818 = icmp slt i32 %1813, 10
  %1819 = or i1 %1817, %1818
  br i1 %1819, label %originalBBpart2491, label %originalBB489alteredBB

originalBBpart2491:                               ; preds = %originalBB489
  br label %1820, !dbg !1430

1820:                                             ; preds = %originalBBpart2491, %1796
  %1821 = load i32, i32* @x.19
  %1822 = load i32, i32* @y.20
  %1823 = sub i32 %1821, 1
  %1824 = mul i32 %1821, %1823
  %1825 = urem i32 %1824, 2
  %1826 = icmp eq i32 %1825, 0
  %1827 = icmp slt i32 %1822, 10
  %1828 = or i1 %1826, %1827
  br i1 %1828, label %originalBB493, label %originalBB493alteredBB

originalBB493:                                    ; preds = %1820, %originalBB493alteredBB
  %1829 = load i64, i64* %29, align 8, !dbg !1433
  %1830 = add i64 %1829, 1, !dbg !1433
  store i64 %1830, i64* %29, align 8, !dbg !1433
  %1831 = load i32, i32* @x.19
  %1832 = load i32, i32* @y.20
  %1833 = sub i32 %1831, 1
  %1834 = mul i32 %1831, %1833
  %1835 = urem i32 %1834, 2
  %1836 = icmp eq i32 %1835, 0
  %1837 = icmp slt i32 %1832, 10
  %1838 = or i1 %1836, %1837
  br i1 %1838, label %originalBBpart2498, label %originalBB493alteredBB

originalBBpart2498:                               ; preds = %originalBB493
  br label %1839, !dbg !1433

1839:                                             ; preds = %originalBBpart2498
  %1840 = load i32, i32* @x.19
  %1841 = load i32, i32* @y.20
  %1842 = sub i32 %1840, 1
  %1843 = mul i32 %1840, %1842
  %1844 = urem i32 %1843, 2
  %1845 = icmp eq i32 %1844, 0
  %1846 = icmp slt i32 %1841, 10
  %1847 = or i1 %1845, %1846
  br i1 %1847, label %originalBB500, label %originalBB500alteredBB

originalBB500:                                    ; preds = %1839, %originalBB500alteredBB
  %1848 = load i32, i32* @x.19
  %1849 = load i32, i32* @y.20
  %1850 = sub i32 %1848, 1
  %1851 = mul i32 %1848, %1850
  %1852 = urem i32 %1851, 2
  %1853 = icmp eq i32 %1852, 0
  %1854 = icmp slt i32 %1849, 10
  %1855 = or i1 %1853, %1854
  br i1 %1855, label %originalBBpart2502, label %originalBB500alteredBB

originalBBpart2502:                               ; preds = %originalBB500
  br label %1873, !dbg !1434

1856:                                             ; preds = %originalBBpart2422
  %1857 = load i32, i32* @x.19
  %1858 = load i32, i32* @y.20
  %1859 = sub i32 %1857, 1
  %1860 = mul i32 %1857, %1859
  %1861 = urem i32 %1860, 2
  %1862 = icmp eq i32 %1861, 0
  %1863 = icmp slt i32 %1858, 10
  %1864 = or i1 %1862, %1863
  br i1 %1864, label %originalBB504, label %originalBB504alteredBB

originalBB504:                                    ; preds = %1856, %originalBB504alteredBB
  %1865 = load i32, i32* @x.19
  %1866 = load i32, i32* @y.20
  %1867 = sub i32 %1865, 1
  %1868 = mul i32 %1865, %1867
  %1869 = urem i32 %1868, 2
  %1870 = icmp eq i32 %1869, 0
  %1871 = icmp slt i32 %1866, 10
  %1872 = or i1 %1870, %1871
  br i1 %1872, label %originalBBpart2506, label %originalBB504alteredBB

originalBBpart2506:                               ; preds = %originalBB504
  br label %1873, !dbg !1435

1873:                                             ; preds = %originalBBpart2506, %originalBBpart2502
  %1874 = load i32, i32* @x.19
  %1875 = load i32, i32* @y.20
  %1876 = sub i32 %1874, 1
  %1877 = mul i32 %1874, %1876
  %1878 = urem i32 %1877, 2
  %1879 = icmp eq i32 %1878, 0
  %1880 = icmp slt i32 %1875, 10
  %1881 = or i1 %1879, %1880
  br i1 %1881, label %originalBB508, label %originalBB508alteredBB

originalBB508:                                    ; preds = %1873, %originalBB508alteredBB
  %1882 = load i32, i32* @x.19
  %1883 = load i32, i32* @y.20
  %1884 = sub i32 %1882, 1
  %1885 = mul i32 %1882, %1884
  %1886 = urem i32 %1885, 2
  %1887 = icmp eq i32 %1886, 0
  %1888 = icmp slt i32 %1883, 10
  %1889 = or i1 %1887, %1888
  br i1 %1889, label %originalBBpart2510, label %originalBB508alteredBB

originalBBpart2510:                               ; preds = %originalBB508
  br label %1890, !dbg !1436

1890:                                             ; preds = %originalBBpart2510, %originalBBpart2415, %originalBBpart2403, %originalBBpart2389
  %1891 = load i32, i32* @x.19
  %1892 = load i32, i32* @y.20
  %1893 = sub i32 %1891, 1
  %1894 = mul i32 %1891, %1893
  %1895 = urem i32 %1894, 2
  %1896 = icmp eq i32 %1895, 0
  %1897 = icmp slt i32 %1892, 10
  %1898 = or i1 %1896, %1897
  br i1 %1898, label %originalBB512, label %originalBB512alteredBB

originalBB512:                                    ; preds = %1890, %originalBB512alteredBB
  %1899 = load i32, i32* @x.19
  %1900 = load i32, i32* @y.20
  %1901 = sub i32 %1899, 1
  %1902 = mul i32 %1899, %1901
  %1903 = urem i32 %1902, 2
  %1904 = icmp eq i32 %1903, 0
  %1905 = icmp slt i32 %1900, 10
  %1906 = or i1 %1904, %1905
  br i1 %1906, label %originalBBpart2514, label %originalBB512alteredBB

originalBBpart2514:                               ; preds = %originalBB512
  br label %1924, !dbg !1437

1907:                                             ; preds = %originalBBpart2367
  %1908 = load i32, i32* @x.19
  %1909 = load i32, i32* @y.20
  %1910 = sub i32 %1908, 1
  %1911 = mul i32 %1908, %1910
  %1912 = urem i32 %1911, 2
  %1913 = icmp eq i32 %1912, 0
  %1914 = icmp slt i32 %1909, 10
  %1915 = or i1 %1913, %1914
  br i1 %1915, label %originalBB516, label %originalBB516alteredBB

originalBB516:                                    ; preds = %1907, %originalBB516alteredBB
  %1916 = load i32, i32* @x.19
  %1917 = load i32, i32* @y.20
  %1918 = sub i32 %1916, 1
  %1919 = mul i32 %1916, %1918
  %1920 = urem i32 %1919, 2
  %1921 = icmp eq i32 %1920, 0
  %1922 = icmp slt i32 %1917, 10
  %1923 = or i1 %1921, %1922
  br i1 %1923, label %originalBBpart2518, label %originalBB516alteredBB

originalBBpart2518:                               ; preds = %originalBB516
  br label %1924, !dbg !1438

1924:                                             ; preds = %originalBBpart2518, %originalBBpart2514, %originalBBpart2375
  %1925 = load i32, i32* @x.19
  %1926 = load i32, i32* @y.20
  %1927 = sub i32 %1925, 1
  %1928 = mul i32 %1925, %1927
  %1929 = urem i32 %1928, 2
  %1930 = icmp eq i32 %1929, 0
  %1931 = icmp slt i32 %1926, 10
  %1932 = or i1 %1930, %1931
  br i1 %1932, label %originalBB520, label %originalBB520alteredBB

originalBB520:                                    ; preds = %1924, %originalBB520alteredBB
  %1933 = load i32, i32* @x.19
  %1934 = load i32, i32* @y.20
  %1935 = sub i32 %1933, 1
  %1936 = mul i32 %1933, %1935
  %1937 = urem i32 %1936, 2
  %1938 = icmp eq i32 %1937, 0
  %1939 = icmp slt i32 %1934, 10
  %1940 = or i1 %1938, %1939
  br i1 %1940, label %originalBBpart2522, label %originalBB520alteredBB

originalBBpart2522:                               ; preds = %originalBB520
  br label %4201, !dbg !1439

1941:                                             ; preds = %originalBBpart2200
  %1942 = load i32, i32* @x.19
  %1943 = load i32, i32* @y.20
  %1944 = sub i32 %1942, 1
  %1945 = mul i32 %1942, %1944
  %1946 = urem i32 %1945, 2
  %1947 = icmp eq i32 %1946, 0
  %1948 = icmp slt i32 %1943, 10
  %1949 = or i1 %1947, %1948
  br i1 %1949, label %originalBB524, label %originalBB524alteredBB

originalBB524:                                    ; preds = %1941, %originalBB524alteredBB
  store i8 97, i8* %40, align 1, !dbg !1440
  %1950 = load i32, i32* @x.19
  %1951 = load i32, i32* @y.20
  %1952 = sub i32 %1950, 1
  %1953 = mul i32 %1950, %1952
  %1954 = urem i32 %1953, 2
  %1955 = icmp eq i32 %1954, 0
  %1956 = icmp slt i32 %1951, 10
  %1957 = or i1 %1955, %1956
  br i1 %1957, label %originalBBpart2526, label %originalBB524alteredBB

originalBBpart2526:                               ; preds = %originalBB524
  br label %2184, !dbg !1441

1958:                                             ; preds = %originalBBpart2200
  %1959 = load i32, i32* @x.19
  %1960 = load i32, i32* @y.20
  %1961 = sub i32 %1959, 1
  %1962 = mul i32 %1959, %1961
  %1963 = urem i32 %1962, 2
  %1964 = icmp eq i32 %1963, 0
  %1965 = icmp slt i32 %1960, 10
  %1966 = or i1 %1964, %1965
  br i1 %1966, label %originalBB528, label %originalBB528alteredBB

originalBB528:                                    ; preds = %1958, %originalBB528alteredBB
  store i8 98, i8* %40, align 1, !dbg !1442
  %1967 = load i32, i32* @x.19
  %1968 = load i32, i32* @y.20
  %1969 = sub i32 %1967, 1
  %1970 = mul i32 %1967, %1969
  %1971 = urem i32 %1970, 2
  %1972 = icmp eq i32 %1971, 0
  %1973 = icmp slt i32 %1968, 10
  %1974 = or i1 %1972, %1973
  br i1 %1974, label %originalBBpart2530, label %originalBB528alteredBB

originalBBpart2530:                               ; preds = %originalBB528
  br label %2184, !dbg !1443

1975:                                             ; preds = %originalBBpart2200
  %1976 = load i32, i32* @x.19
  %1977 = load i32, i32* @y.20
  %1978 = sub i32 %1976, 1
  %1979 = mul i32 %1976, %1978
  %1980 = urem i32 %1979, 2
  %1981 = icmp eq i32 %1980, 0
  %1982 = icmp slt i32 %1977, 10
  %1983 = or i1 %1981, %1982
  br i1 %1983, label %originalBB532, label %originalBB532alteredBB

originalBB532:                                    ; preds = %1975, %originalBB532alteredBB
  store i8 102, i8* %40, align 1, !dbg !1444
  %1984 = load i32, i32* @x.19
  %1985 = load i32, i32* @y.20
  %1986 = sub i32 %1984, 1
  %1987 = mul i32 %1984, %1986
  %1988 = urem i32 %1987, 2
  %1989 = icmp eq i32 %1988, 0
  %1990 = icmp slt i32 %1985, 10
  %1991 = or i1 %1989, %1990
  br i1 %1991, label %originalBBpart2534, label %originalBB532alteredBB

originalBBpart2534:                               ; preds = %originalBB532
  br label %2184, !dbg !1445

1992:                                             ; preds = %originalBBpart2200
  %1993 = load i32, i32* @x.19
  %1994 = load i32, i32* @y.20
  %1995 = sub i32 %1993, 1
  %1996 = mul i32 %1993, %1995
  %1997 = urem i32 %1996, 2
  %1998 = icmp eq i32 %1997, 0
  %1999 = icmp slt i32 %1994, 10
  %2000 = or i1 %1998, %1999
  br i1 %2000, label %originalBB536, label %originalBB536alteredBB

originalBB536:                                    ; preds = %1992, %originalBB536alteredBB
  store i8 110, i8* %40, align 1, !dbg !1446
  %2001 = load i32, i32* @x.19
  %2002 = load i32, i32* @y.20
  %2003 = sub i32 %2001, 1
  %2004 = mul i32 %2001, %2003
  %2005 = urem i32 %2004, 2
  %2006 = icmp eq i32 %2005, 0
  %2007 = icmp slt i32 %2002, 10
  %2008 = or i1 %2006, %2007
  br i1 %2008, label %originalBBpart2538, label %originalBB536alteredBB

originalBBpart2538:                               ; preds = %originalBB536
  br label %2112, !dbg !1447

2009:                                             ; preds = %originalBBpart2200
  %2010 = load i32, i32* @x.19
  %2011 = load i32, i32* @y.20
  %2012 = sub i32 %2010, 1
  %2013 = mul i32 %2010, %2012
  %2014 = urem i32 %2013, 2
  %2015 = icmp eq i32 %2014, 0
  %2016 = icmp slt i32 %2011, 10
  %2017 = or i1 %2015, %2016
  br i1 %2017, label %originalBB540, label %originalBB540alteredBB

originalBB540:                                    ; preds = %2009, %originalBB540alteredBB
  store i8 114, i8* %40, align 1, !dbg !1448
  %2018 = load i32, i32* @x.19
  %2019 = load i32, i32* @y.20
  %2020 = sub i32 %2018, 1
  %2021 = mul i32 %2018, %2020
  %2022 = urem i32 %2021, 2
  %2023 = icmp eq i32 %2022, 0
  %2024 = icmp slt i32 %2019, 10
  %2025 = or i1 %2023, %2024
  br i1 %2025, label %originalBBpart2542, label %originalBB540alteredBB

originalBBpart2542:                               ; preds = %originalBB540
  br label %2112, !dbg !1449

2026:                                             ; preds = %originalBBpart2200
  store i8 116, i8* %40, align 1, !dbg !1450
  br label %2112, !dbg !1451

2027:                                             ; preds = %originalBBpart2200
  store i8 118, i8* %40, align 1, !dbg !1452
  br label %2184, !dbg !1453

2028:                                             ; preds = %originalBBpart2200
  %2029 = load i32, i32* @x.19
  %2030 = load i32, i32* @y.20
  %2031 = sub i32 %2029, 1
  %2032 = mul i32 %2029, %2031
  %2033 = urem i32 %2032, 2
  %2034 = icmp eq i32 %2033, 0
  %2035 = icmp slt i32 %2030, 10
  %2036 = or i1 %2034, %2035
  br i1 %2036, label %originalBB544, label %originalBB544alteredBB

originalBB544:                                    ; preds = %2028, %originalBB544alteredBB
  %2037 = load i8, i8* %39, align 1, !dbg !1454
  store i8 %2037, i8* %40, align 1, !dbg !1455
  %2038 = load i32, i32* %23, align 4, !dbg !1456
  %2039 = icmp eq i32 %2038, 2, !dbg !1458
  %2040 = load i32, i32* @x.19
  %2041 = load i32, i32* @y.20
  %2042 = sub i32 %2040, 1
  %2043 = mul i32 %2040, %2042
  %2044 = urem i32 %2043, 2
  %2045 = icmp eq i32 %2044, 0
  %2046 = icmp slt i32 %2041, 10
  %2047 = or i1 %2045, %2046
  br i1 %2047, label %originalBBpart2546, label %originalBB544alteredBB

originalBBpart2546:                               ; preds = %originalBB544
  br i1 %2039, label %2048, label %2053, !dbg !1459

2048:                                             ; preds = %originalBBpart2546
  %2049 = load i8, i8* %35, align 1, !dbg !1460
  %2050 = trunc i8 %2049 to i1, !dbg !1460
  br i1 %2050, label %2051, label %2052, !dbg !1463

2051:                                             ; preds = %2048
  br label %5326, !dbg !1464

2052:                                             ; preds = %2048
  br label %4614, !dbg !1465

2053:                                             ; preds = %originalBBpart2546
  %2054 = load i8, i8* %33, align 1, !dbg !1466
  %2055 = trunc i8 %2054 to i1, !dbg !1466
  br i1 %2055, label %2056, label %2111, !dbg !1468

2056:                                             ; preds = %2053
  %2057 = load i32, i32* @x.19
  %2058 = load i32, i32* @y.20
  %2059 = sub i32 %2057, 1
  %2060 = mul i32 %2057, %2059
  %2061 = urem i32 %2060, 2
  %2062 = icmp eq i32 %2061, 0
  %2063 = icmp slt i32 %2058, 10
  %2064 = or i1 %2062, %2063
  br i1 %2064, label %originalBB548, label %originalBB548alteredBB

originalBB548:                                    ; preds = %2056, %originalBB548alteredBB
  %2065 = load i8, i8* %35, align 1, !dbg !1469
  %2066 = trunc i8 %2065 to i1, !dbg !1469
  %2067 = load i32, i32* @x.19
  %2068 = load i32, i32* @y.20
  %2069 = sub i32 %2067, 1
  %2070 = mul i32 %2067, %2069
  %2071 = urem i32 %2070, 2
  %2072 = icmp eq i32 %2071, 0
  %2073 = icmp slt i32 %2068, 10
  %2074 = or i1 %2072, %2073
  br i1 %2074, label %originalBBpart2550, label %originalBB548alteredBB

originalBBpart2550:                               ; preds = %originalBB548
  br i1 %2066, label %2075, label %2111, !dbg !1470

2075:                                             ; preds = %originalBBpart2550
  %2076 = load i32, i32* @x.19
  %2077 = load i32, i32* @y.20
  %2078 = sub i32 %2076, 1
  %2079 = mul i32 %2076, %2078
  %2080 = urem i32 %2079, 2
  %2081 = icmp eq i32 %2080, 0
  %2082 = icmp slt i32 %2077, 10
  %2083 = or i1 %2081, %2082
  br i1 %2083, label %originalBB552, label %originalBB552alteredBB

originalBB552:                                    ; preds = %2075, %originalBB552alteredBB
  %2084 = load i64, i64* %32, align 8, !dbg !1471
  %2085 = icmp ne i64 %2084, 0, !dbg !1471
  %2086 = load i32, i32* @x.19
  %2087 = load i32, i32* @y.20
  %2088 = sub i32 %2086, 1
  %2089 = mul i32 %2086, %2088
  %2090 = urem i32 %2089, 2
  %2091 = icmp eq i32 %2090, 0
  %2092 = icmp slt i32 %2087, 10
  %2093 = or i1 %2091, %2092
  br i1 %2093, label %originalBBpart2554, label %originalBB552alteredBB

originalBBpart2554:                               ; preds = %originalBB552
  br i1 %2085, label %2094, label %2111, !dbg !1472

2094:                                             ; preds = %originalBBpart2554
  %2095 = load i32, i32* @x.19
  %2096 = load i32, i32* @y.20
  %2097 = sub i32 %2095, 1
  %2098 = mul i32 %2095, %2097
  %2099 = urem i32 %2098, 2
  %2100 = icmp eq i32 %2099, 0
  %2101 = icmp slt i32 %2096, 10
  %2102 = or i1 %2100, %2101
  br i1 %2102, label %originalBB556, label %originalBB556alteredBB

originalBB556:                                    ; preds = %2094, %originalBB556alteredBB
  %2103 = load i32, i32* @x.19
  %2104 = load i32, i32* @y.20
  %2105 = sub i32 %2103, 1
  %2106 = mul i32 %2103, %2105
  %2107 = urem i32 %2106, 2
  %2108 = icmp eq i32 %2107, 0
  %2109 = icmp slt i32 %2104, 10
  %2110 = or i1 %2108, %2109
  br i1 %2110, label %originalBBpart2558, label %originalBB556alteredBB

originalBBpart2558:                               ; preds = %originalBB556
  br label %4614, !dbg !1473

2111:                                             ; preds = %originalBBpart2554, %originalBBpart2550, %2053
  br label %2112, !dbg !1471

2112:                                             ; preds = %2111, %2026, %originalBBpart2542, %originalBBpart2538
  call void @llvm.dbg.label(metadata !1474), !dbg !1475
  %2113 = load i32, i32* @x.19
  %2114 = load i32, i32* @y.20
  %2115 = sub i32 %2113, 1
  %2116 = mul i32 %2113, %2115
  %2117 = urem i32 %2116, 2
  %2118 = icmp eq i32 %2117, 0
  %2119 = icmp slt i32 %2114, 10
  %2120 = or i1 %2118, %2119
  br i1 %2120, label %originalBB560, label %originalBB560alteredBB

originalBB560:                                    ; preds = %2112, %originalBB560alteredBB
  %2121 = load i32, i32* %23, align 4, !dbg !1476
  %2122 = icmp eq i32 %2121, 2, !dbg !1478
  %2123 = load i32, i32* @x.19
  %2124 = load i32, i32* @y.20
  %2125 = sub i32 %2123, 1
  %2126 = mul i32 %2123, %2125
  %2127 = urem i32 %2126, 2
  %2128 = icmp eq i32 %2127, 0
  %2129 = icmp slt i32 %2124, 10
  %2130 = or i1 %2128, %2129
  br i1 %2130, label %originalBBpart2562, label %originalBB560alteredBB

originalBBpart2562:                               ; preds = %originalBB560
  br i1 %2122, label %2131, label %2167, !dbg !1479

2131:                                             ; preds = %originalBBpart2562
  %2132 = load i32, i32* @x.19
  %2133 = load i32, i32* @y.20
  %2134 = sub i32 %2132, 1
  %2135 = mul i32 %2132, %2134
  %2136 = urem i32 %2135, 2
  %2137 = icmp eq i32 %2136, 0
  %2138 = icmp slt i32 %2133, 10
  %2139 = or i1 %2137, %2138
  br i1 %2139, label %originalBB564, label %originalBB564alteredBB

originalBB564:                                    ; preds = %2131, %originalBB564alteredBB
  %2140 = load i8, i8* %35, align 1, !dbg !1480
  %2141 = trunc i8 %2140 to i1, !dbg !1480
  %2142 = load i32, i32* @x.19
  %2143 = load i32, i32* @y.20
  %2144 = sub i32 %2142, 1
  %2145 = mul i32 %2142, %2144
  %2146 = urem i32 %2145, 2
  %2147 = icmp eq i32 %2146, 0
  %2148 = icmp slt i32 %2143, 10
  %2149 = or i1 %2147, %2148
  br i1 %2149, label %originalBBpart2566, label %originalBB564alteredBB

originalBBpart2566:                               ; preds = %originalBB564
  br i1 %2141, label %2150, label %2167, !dbg !1481

2150:                                             ; preds = %originalBBpart2566
  %2151 = load i32, i32* @x.19
  %2152 = load i32, i32* @y.20
  %2153 = sub i32 %2151, 1
  %2154 = mul i32 %2151, %2153
  %2155 = urem i32 %2154, 2
  %2156 = icmp eq i32 %2155, 0
  %2157 = icmp slt i32 %2152, 10
  %2158 = or i1 %2156, %2157
  br i1 %2158, label %originalBB568, label %originalBB568alteredBB

originalBB568:                                    ; preds = %2150, %originalBB568alteredBB
  %2159 = load i32, i32* @x.19
  %2160 = load i32, i32* @y.20
  %2161 = sub i32 %2159, 1
  %2162 = mul i32 %2159, %2161
  %2163 = urem i32 %2162, 2
  %2164 = icmp eq i32 %2163, 0
  %2165 = icmp slt i32 %2160, 10
  %2166 = or i1 %2164, %2165
  br i1 %2166, label %originalBBpart2570, label %originalBB568alteredBB

originalBBpart2570:                               ; preds = %originalBB568
  br label %5326, !dbg !1482

2167:                                             ; preds = %originalBBpart2566, %originalBBpart2562
  %2168 = load i32, i32* @x.19
  %2169 = load i32, i32* @y.20
  %2170 = sub i32 %2168, 1
  %2171 = mul i32 %2168, %2170
  %2172 = urem i32 %2171, 2
  %2173 = icmp eq i32 %2172, 0
  %2174 = icmp slt i32 %2169, 10
  %2175 = or i1 %2173, %2174
  br i1 %2175, label %originalBB572, label %originalBB572alteredBB

originalBB572:                                    ; preds = %2167, %originalBB572alteredBB
  %2176 = load i32, i32* @x.19
  %2177 = load i32, i32* @y.20
  %2178 = sub i32 %2176, 1
  %2179 = mul i32 %2176, %2178
  %2180 = urem i32 %2179, 2
  %2181 = icmp eq i32 %2180, 0
  %2182 = icmp slt i32 %2177, 10
  %2183 = or i1 %2181, %2182
  br i1 %2183, label %originalBBpart2574, label %originalBB572alteredBB

originalBBpart2574:                               ; preds = %originalBB572
  br label %2184, !dbg !1480

2184:                                             ; preds = %originalBBpart2574, %2027, %originalBBpart2534, %originalBBpart2530, %originalBBpart2526
  call void @llvm.dbg.label(metadata !1483), !dbg !1484
  %2185 = load i32, i32* @x.19
  %2186 = load i32, i32* @y.20
  %2187 = sub i32 %2185, 1
  %2188 = mul i32 %2185, %2187
  %2189 = urem i32 %2188, 2
  %2190 = icmp eq i32 %2189, 0
  %2191 = icmp slt i32 %2186, 10
  %2192 = or i1 %2190, %2191
  br i1 %2192, label %originalBB576, label %originalBB576alteredBB

originalBB576:                                    ; preds = %2184, %originalBB576alteredBB
  %2193 = load i8, i8* %33, align 1, !dbg !1485
  %2194 = trunc i8 %2193 to i1, !dbg !1485
  %2195 = load i32, i32* @x.19
  %2196 = load i32, i32* @y.20
  %2197 = sub i32 %2195, 1
  %2198 = mul i32 %2195, %2197
  %2199 = urem i32 %2198, 2
  %2200 = icmp eq i32 %2199, 0
  %2201 = icmp slt i32 %2196, 10
  %2202 = or i1 %2200, %2201
  br i1 %2202, label %originalBBpart2578, label %originalBB576alteredBB

originalBBpart2578:                               ; preds = %originalBB576
  br i1 %2194, label %2203, label %2205, !dbg !1487

2203:                                             ; preds = %originalBBpart2578
  %2204 = load i8, i8* %40, align 1, !dbg !1488
  store i8 %2204, i8* %39, align 1, !dbg !1490
  br label %4312, !dbg !1491

2205:                                             ; preds = %originalBBpart2578
  %2206 = load i32, i32* @x.19
  %2207 = load i32, i32* @y.20
  %2208 = sub i32 %2206, 1
  %2209 = mul i32 %2206, %2208
  %2210 = urem i32 %2209, 2
  %2211 = icmp eq i32 %2210, 0
  %2212 = icmp slt i32 %2207, 10
  %2213 = or i1 %2211, %2212
  br i1 %2213, label %originalBB580, label %originalBB580alteredBB

originalBB580:                                    ; preds = %2205, %originalBB580alteredBB
  %2214 = load i32, i32* @x.19
  %2215 = load i32, i32* @y.20
  %2216 = sub i32 %2214, 1
  %2217 = mul i32 %2214, %2216
  %2218 = urem i32 %2217, 2
  %2219 = icmp eq i32 %2218, 0
  %2220 = icmp slt i32 %2215, 10
  %2221 = or i1 %2219, %2220
  br i1 %2221, label %originalBBpart2582, label %originalBB580alteredBB

originalBBpart2582:                               ; preds = %originalBB580
  br label %4201, !dbg !1492

2222:                                             ; preds = %originalBBpart2200, %originalBBpart2200
  %2223 = load i32, i32* @x.19
  %2224 = load i32, i32* @y.20
  %2225 = sub i32 %2223, 1
  %2226 = mul i32 %2223, %2225
  %2227 = urem i32 %2226, 2
  %2228 = icmp eq i32 %2227, 0
  %2229 = icmp slt i32 %2224, 10
  %2230 = or i1 %2228, %2229
  br i1 %2230, label %originalBB584, label %originalBB584alteredBB

originalBB584:                                    ; preds = %2222, %originalBB584alteredBB
  %2231 = load i64, i64* %22, align 8, !dbg !1493
  %2232 = icmp eq i64 %2231, -1, !dbg !1495
  %2233 = load i32, i32* @x.19
  %2234 = load i32, i32* @y.20
  %2235 = sub i32 %2233, 1
  %2236 = mul i32 %2233, %2235
  %2237 = urem i32 %2236, 2
  %2238 = icmp eq i32 %2237, 0
  %2239 = icmp slt i32 %2234, 10
  %2240 = or i1 %2238, %2239
  br i1 %2240, label %originalBBpart2586, label %originalBB584alteredBB

originalBBpart2586:                               ; preds = %originalBB584
  br i1 %2232, label %2241, label %2247, !dbg !1496

2241:                                             ; preds = %originalBBpart2586
  %2242 = load i8*, i8** %21, align 8, !dbg !1497
  %2243 = getelementptr inbounds i8, i8* %2242, i64 1, !dbg !1497
  %2244 = load i8, i8* %2243, align 1, !dbg !1497
  %2245 = sext i8 %2244 to i32, !dbg !1497
  %2246 = icmp eq i32 %2245, 0, !dbg !1498
  br i1 %2246, label %2283, label %2266, !dbg !1493

2247:                                             ; preds = %originalBBpart2586
  %2248 = load i32, i32* @x.19
  %2249 = load i32, i32* @y.20
  %2250 = sub i32 %2248, 1
  %2251 = mul i32 %2248, %2250
  %2252 = urem i32 %2251, 2
  %2253 = icmp eq i32 %2252, 0
  %2254 = icmp slt i32 %2249, 10
  %2255 = or i1 %2253, %2254
  br i1 %2255, label %originalBB588, label %originalBB588alteredBB

originalBB588:                                    ; preds = %2247, %originalBB588alteredBB
  %2256 = load i64, i64* %22, align 8, !dbg !1499
  %2257 = icmp eq i64 %2256, 1, !dbg !1500
  %2258 = load i32, i32* @x.19
  %2259 = load i32, i32* @y.20
  %2260 = sub i32 %2258, 1
  %2261 = mul i32 %2258, %2260
  %2262 = urem i32 %2261, 2
  %2263 = icmp eq i32 %2262, 0
  %2264 = icmp slt i32 %2259, 10
  %2265 = or i1 %2263, %2264
  br i1 %2265, label %originalBBpart2590, label %originalBB588alteredBB

originalBBpart2590:                               ; preds = %originalBB588
  br i1 %2257, label %2283, label %2266, !dbg !1496

2266:                                             ; preds = %originalBBpart2590, %2241
  %2267 = load i32, i32* @x.19
  %2268 = load i32, i32* @y.20
  %2269 = sub i32 %2267, 1
  %2270 = mul i32 %2267, %2269
  %2271 = urem i32 %2270, 2
  %2272 = icmp eq i32 %2271, 0
  %2273 = icmp slt i32 %2268, 10
  %2274 = or i1 %2272, %2273
  br i1 %2274, label %originalBB592, label %originalBB592alteredBB

originalBB592:                                    ; preds = %2266, %originalBB592alteredBB
  %2275 = load i32, i32* @x.19
  %2276 = load i32, i32* @y.20
  %2277 = sub i32 %2275, 1
  %2278 = mul i32 %2275, %2277
  %2279 = urem i32 %2278, 2
  %2280 = icmp eq i32 %2279, 0
  %2281 = icmp slt i32 %2276, 10
  %2282 = or i1 %2280, %2281
  br i1 %2282, label %originalBBpart2594, label %originalBB592alteredBB

originalBBpart2594:                               ; preds = %originalBB592
  br label %4201, !dbg !1501

2283:                                             ; preds = %originalBBpart2590, %2241
  %2284 = load i32, i32* @x.19
  %2285 = load i32, i32* @y.20
  %2286 = sub i32 %2284, 1
  %2287 = mul i32 %2284, %2286
  %2288 = urem i32 %2287, 2
  %2289 = icmp eq i32 %2288, 0
  %2290 = icmp slt i32 %2285, 10
  %2291 = or i1 %2289, %2290
  br i1 %2291, label %originalBB596, label %originalBB596alteredBB

originalBB596:                                    ; preds = %2283, %originalBB596alteredBB
  %2292 = load i32, i32* @x.19
  %2293 = load i32, i32* @y.20
  %2294 = sub i32 %2292, 1
  %2295 = mul i32 %2292, %2294
  %2296 = urem i32 %2295, 2
  %2297 = icmp eq i32 %2296, 0
  %2298 = icmp slt i32 %2293, 10
  %2299 = or i1 %2297, %2298
  br i1 %2299, label %originalBBpart2598, label %originalBB596alteredBB

originalBBpart2598:                               ; preds = %originalBB596
  br label %2300, !dbg !1502

2300:                                             ; preds = %originalBBpart2598, %originalBBpart2200, %originalBBpart2200
  %2301 = load i32, i32* @x.19
  %2302 = load i32, i32* @y.20
  %2303 = sub i32 %2301, 1
  %2304 = mul i32 %2301, %2303
  %2305 = urem i32 %2304, 2
  %2306 = icmp eq i32 %2305, 0
  %2307 = icmp slt i32 %2302, 10
  %2308 = or i1 %2306, %2307
  br i1 %2308, label %originalBB600, label %originalBB600alteredBB

originalBB600:                                    ; preds = %2300, %originalBB600alteredBB
  %2309 = load i64, i64* %28, align 8, !dbg !1503
  %2310 = icmp ne i64 %2309, 0, !dbg !1505
  %2311 = load i32, i32* @x.19
  %2312 = load i32, i32* @y.20
  %2313 = sub i32 %2311, 1
  %2314 = mul i32 %2311, %2313
  %2315 = urem i32 %2314, 2
  %2316 = icmp eq i32 %2315, 0
  %2317 = icmp slt i32 %2312, 10
  %2318 = or i1 %2316, %2317
  br i1 %2318, label %originalBBpart2602, label %originalBB600alteredBB

originalBBpart2602:                               ; preds = %originalBB600
  br i1 %2310, label %2319, label %2336, !dbg !1506

2319:                                             ; preds = %originalBBpart2602
  %2320 = load i32, i32* @x.19
  %2321 = load i32, i32* @y.20
  %2322 = sub i32 %2320, 1
  %2323 = mul i32 %2320, %2322
  %2324 = urem i32 %2323, 2
  %2325 = icmp eq i32 %2324, 0
  %2326 = icmp slt i32 %2321, 10
  %2327 = or i1 %2325, %2326
  br i1 %2327, label %originalBB604, label %originalBB604alteredBB

originalBB604:                                    ; preds = %2319, %originalBB604alteredBB
  %2328 = load i32, i32* @x.19
  %2329 = load i32, i32* @y.20
  %2330 = sub i32 %2328, 1
  %2331 = mul i32 %2328, %2330
  %2332 = urem i32 %2331, 2
  %2333 = icmp eq i32 %2332, 0
  %2334 = icmp slt i32 %2329, 10
  %2335 = or i1 %2333, %2334
  br i1 %2335, label %originalBBpart2606, label %originalBB604alteredBB

originalBBpart2606:                               ; preds = %originalBB604
  br label %4201, !dbg !1507

2336:                                             ; preds = %originalBBpart2602
  %2337 = load i32, i32* @x.19
  %2338 = load i32, i32* @y.20
  %2339 = sub i32 %2337, 1
  %2340 = mul i32 %2337, %2339
  %2341 = urem i32 %2340, 2
  %2342 = icmp eq i32 %2341, 0
  %2343 = icmp slt i32 %2338, 10
  %2344 = or i1 %2342, %2343
  br i1 %2344, label %originalBB608, label %originalBB608alteredBB

originalBB608:                                    ; preds = %2336, %originalBB608alteredBB
  %2345 = load i32, i32* @x.19
  %2346 = load i32, i32* @y.20
  %2347 = sub i32 %2345, 1
  %2348 = mul i32 %2345, %2347
  %2349 = urem i32 %2348, 2
  %2350 = icmp eq i32 %2349, 0
  %2351 = icmp slt i32 %2346, 10
  %2352 = or i1 %2350, %2351
  br i1 %2352, label %originalBBpart2610, label %originalBB608alteredBB

originalBBpart2610:                               ; preds = %originalBB608
  br label %2353, !dbg !1508

2353:                                             ; preds = %originalBBpart2610, %originalBBpart2200
  %2354 = load i32, i32* @x.19
  %2355 = load i32, i32* @y.20
  %2356 = sub i32 %2354, 1
  %2357 = mul i32 %2354, %2356
  %2358 = urem i32 %2357, 2
  %2359 = icmp eq i32 %2358, 0
  %2360 = icmp slt i32 %2355, 10
  %2361 = or i1 %2359, %2360
  br i1 %2361, label %originalBB612, label %originalBB612alteredBB

originalBB612:                                    ; preds = %2353, %originalBB612alteredBB
  store i8 1, i8* %43, align 1, !dbg !1509
  %2362 = load i32, i32* @x.19
  %2363 = load i32, i32* @y.20
  %2364 = sub i32 %2362, 1
  %2365 = mul i32 %2362, %2364
  %2366 = urem i32 %2365, 2
  %2367 = icmp eq i32 %2366, 0
  %2368 = icmp slt i32 %2363, 10
  %2369 = or i1 %2367, %2368
  br i1 %2369, label %originalBBpart2614, label %originalBB612alteredBB

originalBBpart2614:                               ; preds = %originalBB612
  br label %2370, !dbg !1510

2370:                                             ; preds = %originalBBpart2614, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200
  %2371 = load i32, i32* @x.19
  %2372 = load i32, i32* @y.20
  %2373 = sub i32 %2371, 1
  %2374 = mul i32 %2371, %2373
  %2375 = urem i32 %2374, 2
  %2376 = icmp eq i32 %2375, 0
  %2377 = icmp slt i32 %2372, 10
  %2378 = or i1 %2376, %2377
  br i1 %2378, label %originalBB616, label %originalBB616alteredBB

originalBB616:                                    ; preds = %2370, %originalBB616alteredBB
  %2379 = load i32, i32* %23, align 4, !dbg !1511
  %2380 = icmp eq i32 %2379, 2, !dbg !1513
  %2381 = load i32, i32* @x.19
  %2382 = load i32, i32* @y.20
  %2383 = sub i32 %2381, 1
  %2384 = mul i32 %2381, %2383
  %2385 = urem i32 %2384, 2
  %2386 = icmp eq i32 %2385, 0
  %2387 = icmp slt i32 %2382, 10
  %2388 = or i1 %2386, %2387
  br i1 %2388, label %originalBBpart2618, label %originalBB616alteredBB

originalBBpart2618:                               ; preds = %originalBB616
  br i1 %2380, label %2389, label %2393, !dbg !1514

2389:                                             ; preds = %originalBBpart2618
  %2390 = load i8, i8* %35, align 1, !dbg !1515
  %2391 = trunc i8 %2390 to i1, !dbg !1515
  br i1 %2391, label %2392, label %2393, !dbg !1516

2392:                                             ; preds = %2389
  br label %5326, !dbg !1517

2393:                                             ; preds = %2389, %originalBBpart2618
  %2394 = load i32, i32* @x.19
  %2395 = load i32, i32* @y.20
  %2396 = sub i32 %2394, 1
  %2397 = mul i32 %2394, %2396
  %2398 = urem i32 %2397, 2
  %2399 = icmp eq i32 %2398, 0
  %2400 = icmp slt i32 %2395, 10
  %2401 = or i1 %2399, %2400
  br i1 %2401, label %originalBB620, label %originalBB620alteredBB

originalBB620:                                    ; preds = %2393, %originalBB620alteredBB
  %2402 = load i32, i32* @x.19
  %2403 = load i32, i32* @y.20
  %2404 = sub i32 %2402, 1
  %2405 = mul i32 %2402, %2404
  %2406 = urem i32 %2405, 2
  %2407 = icmp eq i32 %2406, 0
  %2408 = icmp slt i32 %2403, 10
  %2409 = or i1 %2407, %2408
  br i1 %2409, label %originalBBpart2622, label %originalBB620alteredBB

originalBBpart2622:                               ; preds = %originalBB620
  br label %4201, !dbg !1518

2410:                                             ; preds = %originalBBpart2200
  %2411 = load i32, i32* @x.19
  %2412 = load i32, i32* @y.20
  %2413 = sub i32 %2411, 1
  %2414 = mul i32 %2411, %2413
  %2415 = urem i32 %2414, 2
  %2416 = icmp eq i32 %2415, 0
  %2417 = icmp slt i32 %2412, 10
  %2418 = or i1 %2416, %2417
  br i1 %2418, label %originalBB624, label %originalBB624alteredBB

originalBB624:                                    ; preds = %2410, %originalBB624alteredBB
  store i8 1, i8* %37, align 1, !dbg !1519
  store i8 1, i8* %43, align 1, !dbg !1520
  %2419 = load i32, i32* %23, align 4, !dbg !1521
  %2420 = icmp eq i32 %2419, 2, !dbg !1523
  %2421 = load i32, i32* @x.19
  %2422 = load i32, i32* @y.20
  %2423 = sub i32 %2421, 1
  %2424 = mul i32 %2421, %2423
  %2425 = urem i32 %2424, 2
  %2426 = icmp eq i32 %2425, 0
  %2427 = icmp slt i32 %2422, 10
  %2428 = or i1 %2426, %2427
  br i1 %2428, label %originalBBpart2626, label %originalBB624alteredBB

originalBBpart2626:                               ; preds = %originalBB624
  br i1 %2420, label %2429, label %2702, !dbg !1524

2429:                                             ; preds = %originalBBpart2626
  %2430 = load i8, i8* %35, align 1, !dbg !1525
  %2431 = trunc i8 %2430 to i1, !dbg !1525
  br i1 %2431, label %2432, label %2433, !dbg !1528

2432:                                             ; preds = %2429
  br label %5326, !dbg !1529

2433:                                             ; preds = %2429
  %2434 = load i32, i32* @x.19
  %2435 = load i32, i32* @y.20
  %2436 = sub i32 %2434, 1
  %2437 = mul i32 %2434, %2436
  %2438 = urem i32 %2437, 2
  %2439 = icmp eq i32 %2438, 0
  %2440 = icmp slt i32 %2435, 10
  %2441 = or i1 %2439, %2440
  br i1 %2441, label %originalBB628, label %originalBB628alteredBB

originalBB628:                                    ; preds = %2433, %originalBB628alteredBB
  %2442 = load i64, i64* %20, align 8, !dbg !1530
  %2443 = icmp ne i64 %2442, 0, !dbg !1530
  %2444 = load i32, i32* @x.19
  %2445 = load i32, i32* @y.20
  %2446 = sub i32 %2444, 1
  %2447 = mul i32 %2444, %2446
  %2448 = urem i32 %2447, 2
  %2449 = icmp eq i32 %2448, 0
  %2450 = icmp slt i32 %2445, 10
  %2451 = or i1 %2449, %2450
  br i1 %2451, label %originalBBpart2630, label %originalBB628alteredBB

originalBBpart2630:                               ; preds = %originalBB628
  br i1 %2443, label %2452, label %2489, !dbg !1532

2452:                                             ; preds = %originalBBpart2630
  %2453 = load i32, i32* @x.19
  %2454 = load i32, i32* @y.20
  %2455 = sub i32 %2453, 1
  %2456 = mul i32 %2453, %2455
  %2457 = urem i32 %2456, 2
  %2458 = icmp eq i32 %2457, 0
  %2459 = icmp slt i32 %2454, 10
  %2460 = or i1 %2458, %2459
  br i1 %2460, label %originalBB632, label %originalBB632alteredBB

originalBB632:                                    ; preds = %2452, %originalBB632alteredBB
  %2461 = load i64, i64* %30, align 8, !dbg !1533
  %2462 = icmp ne i64 %2461, 0, !dbg !1533
  %2463 = load i32, i32* @x.19
  %2464 = load i32, i32* @y.20
  %2465 = sub i32 %2463, 1
  %2466 = mul i32 %2463, %2465
  %2467 = urem i32 %2466, 2
  %2468 = icmp eq i32 %2467, 0
  %2469 = icmp slt i32 %2464, 10
  %2470 = or i1 %2468, %2469
  br i1 %2470, label %originalBBpart2634, label %originalBB632alteredBB

originalBBpart2634:                               ; preds = %originalBB632
  br i1 %2462, label %2489, label %2471, !dbg !1534

2471:                                             ; preds = %originalBBpart2634
  %2472 = load i32, i32* @x.19
  %2473 = load i32, i32* @y.20
  %2474 = sub i32 %2472, 1
  %2475 = mul i32 %2472, %2474
  %2476 = urem i32 %2475, 2
  %2477 = icmp eq i32 %2476, 0
  %2478 = icmp slt i32 %2473, 10
  %2479 = or i1 %2477, %2478
  br i1 %2479, label %originalBB636, label %originalBB636alteredBB

originalBB636:                                    ; preds = %2471, %originalBB636alteredBB
  %2480 = load i64, i64* %20, align 8, !dbg !1535
  store i64 %2480, i64* %30, align 8, !dbg !1537
  store i64 0, i64* %20, align 8, !dbg !1538
  %2481 = load i32, i32* @x.19
  %2482 = load i32, i32* @y.20
  %2483 = sub i32 %2481, 1
  %2484 = mul i32 %2481, %2483
  %2485 = urem i32 %2484, 2
  %2486 = icmp eq i32 %2485, 0
  %2487 = icmp slt i32 %2482, 10
  %2488 = or i1 %2486, %2487
  br i1 %2488, label %originalBBpart2638, label %originalBB636alteredBB

originalBBpart2638:                               ; preds = %originalBB636
  br label %2489, !dbg !1539

2489:                                             ; preds = %originalBBpart2638, %originalBBpart2634, %originalBBpart2630
  %2490 = load i32, i32* @x.19
  %2491 = load i32, i32* @y.20
  %2492 = sub i32 %2490, 1
  %2493 = mul i32 %2490, %2492
  %2494 = urem i32 %2493, 2
  %2495 = icmp eq i32 %2494, 0
  %2496 = icmp slt i32 %2491, 10
  %2497 = or i1 %2495, %2496
  br i1 %2497, label %originalBB640, label %originalBB640alteredBB

originalBB640:                                    ; preds = %2489, %originalBB640alteredBB
  %2498 = load i32, i32* @x.19
  %2499 = load i32, i32* @y.20
  %2500 = sub i32 %2498, 1
  %2501 = mul i32 %2498, %2500
  %2502 = urem i32 %2501, 2
  %2503 = icmp eq i32 %2502, 0
  %2504 = icmp slt i32 %2499, 10
  %2505 = or i1 %2503, %2504
  br i1 %2505, label %originalBBpart2642, label %originalBB640alteredBB

originalBBpart2642:                               ; preds = %originalBB640
  br label %2506, !dbg !1540

2506:                                             ; preds = %originalBBpart2642
  %2507 = load i32, i32* @x.19
  %2508 = load i32, i32* @y.20
  %2509 = sub i32 %2507, 1
  %2510 = mul i32 %2507, %2509
  %2511 = urem i32 %2510, 2
  %2512 = icmp eq i32 %2511, 0
  %2513 = icmp slt i32 %2508, 10
  %2514 = or i1 %2512, %2513
  br i1 %2514, label %originalBB644, label %originalBB644alteredBB

originalBB644:                                    ; preds = %2506, %originalBB644alteredBB
  %2515 = load i64, i64* %29, align 8, !dbg !1541
  %2516 = load i64, i64* %20, align 8, !dbg !1541
  %2517 = icmp ult i64 %2515, %2516, !dbg !1541
  %2518 = load i32, i32* @x.19
  %2519 = load i32, i32* @y.20
  %2520 = sub i32 %2518, 1
  %2521 = mul i32 %2518, %2520
  %2522 = urem i32 %2521, 2
  %2523 = icmp eq i32 %2522, 0
  %2524 = icmp slt i32 %2519, 10
  %2525 = or i1 %2523, %2524
  br i1 %2525, label %originalBBpart2646, label %originalBB644alteredBB

originalBBpart2646:                               ; preds = %originalBB644
  br i1 %2517, label %2526, label %2546, !dbg !1544

2526:                                             ; preds = %originalBBpart2646
  %2527 = load i32, i32* @x.19
  %2528 = load i32, i32* @y.20
  %2529 = sub i32 %2527, 1
  %2530 = mul i32 %2527, %2529
  %2531 = urem i32 %2530, 2
  %2532 = icmp eq i32 %2531, 0
  %2533 = icmp slt i32 %2528, 10
  %2534 = or i1 %2532, %2533
  br i1 %2534, label %originalBB648, label %originalBB648alteredBB

originalBB648:                                    ; preds = %2526, %originalBB648alteredBB
  %2535 = load i8*, i8** %19, align 8, !dbg !1541
  %2536 = load i64, i64* %29, align 8, !dbg !1541
  %2537 = getelementptr inbounds i8, i8* %2535, i64 %2536, !dbg !1541
  store i8 39, i8* %2537, align 1, !dbg !1541
  %2538 = load i32, i32* @x.19
  %2539 = load i32, i32* @y.20
  %2540 = sub i32 %2538, 1
  %2541 = mul i32 %2538, %2540
  %2542 = urem i32 %2541, 2
  %2543 = icmp eq i32 %2542, 0
  %2544 = icmp slt i32 %2539, 10
  %2545 = or i1 %2543, %2544
  br i1 %2545, label %originalBBpart2650, label %originalBB648alteredBB

originalBBpart2650:                               ; preds = %originalBB648
  br label %2546, !dbg !1541

2546:                                             ; preds = %originalBBpart2650, %originalBBpart2646
  %2547 = load i32, i32* @x.19
  %2548 = load i32, i32* @y.20
  %2549 = sub i32 %2547, 1
  %2550 = mul i32 %2547, %2549
  %2551 = urem i32 %2550, 2
  %2552 = icmp eq i32 %2551, 0
  %2553 = icmp slt i32 %2548, 10
  %2554 = or i1 %2552, %2553
  br i1 %2554, label %originalBB652, label %originalBB652alteredBB

originalBB652:                                    ; preds = %2546, %originalBB652alteredBB
  %2555 = load i64, i64* %29, align 8, !dbg !1544
  %2556 = add i64 %2555, 1, !dbg !1544
  store i64 %2556, i64* %29, align 8, !dbg !1544
  %2557 = load i32, i32* @x.19
  %2558 = load i32, i32* @y.20
  %2559 = sub i32 %2557, 1
  %2560 = mul i32 %2557, %2559
  %2561 = urem i32 %2560, 2
  %2562 = icmp eq i32 %2561, 0
  %2563 = icmp slt i32 %2558, 10
  %2564 = or i1 %2562, %2563
  br i1 %2564, label %originalBBpart2665, label %originalBB652alteredBB

originalBBpart2665:                               ; preds = %originalBB652
  br label %2565, !dbg !1544

2565:                                             ; preds = %originalBBpart2665
  %2566 = load i32, i32* @x.19
  %2567 = load i32, i32* @y.20
  %2568 = sub i32 %2566, 1
  %2569 = mul i32 %2566, %2568
  %2570 = urem i32 %2569, 2
  %2571 = icmp eq i32 %2570, 0
  %2572 = icmp slt i32 %2567, 10
  %2573 = or i1 %2571, %2572
  br i1 %2573, label %originalBB667, label %originalBB667alteredBB

originalBB667:                                    ; preds = %2565, %originalBB667alteredBB
  %2574 = load i32, i32* @x.19
  %2575 = load i32, i32* @y.20
  %2576 = sub i32 %2574, 1
  %2577 = mul i32 %2574, %2576
  %2578 = urem i32 %2577, 2
  %2579 = icmp eq i32 %2578, 0
  %2580 = icmp slt i32 %2575, 10
  %2581 = or i1 %2579, %2580
  br i1 %2581, label %originalBBpart2669, label %originalBB667alteredBB

originalBBpart2669:                               ; preds = %originalBB667
  br label %2582, !dbg !1545

2582:                                             ; preds = %originalBBpart2669
  %2583 = load i32, i32* @x.19
  %2584 = load i32, i32* @y.20
  %2585 = sub i32 %2583, 1
  %2586 = mul i32 %2583, %2585
  %2587 = urem i32 %2586, 2
  %2588 = icmp eq i32 %2587, 0
  %2589 = icmp slt i32 %2584, 10
  %2590 = or i1 %2588, %2589
  br i1 %2590, label %originalBB671, label %originalBB671alteredBB

originalBB671:                                    ; preds = %2582, %originalBB671alteredBB
  %2591 = load i64, i64* %29, align 8, !dbg !1546
  %2592 = load i64, i64* %20, align 8, !dbg !1546
  %2593 = icmp ult i64 %2591, %2592, !dbg !1546
  %2594 = load i32, i32* @x.19
  %2595 = load i32, i32* @y.20
  %2596 = sub i32 %2594, 1
  %2597 = mul i32 %2594, %2596
  %2598 = urem i32 %2597, 2
  %2599 = icmp eq i32 %2598, 0
  %2600 = icmp slt i32 %2595, 10
  %2601 = or i1 %2599, %2600
  br i1 %2601, label %originalBBpart2673, label %originalBB671alteredBB

originalBBpart2673:                               ; preds = %originalBB671
  br i1 %2593, label %2602, label %2606, !dbg !1549

2602:                                             ; preds = %originalBBpart2673
  %2603 = load i8*, i8** %19, align 8, !dbg !1546
  %2604 = load i64, i64* %29, align 8, !dbg !1546
  %2605 = getelementptr inbounds i8, i8* %2603, i64 %2604, !dbg !1546
  store i8 92, i8* %2605, align 1, !dbg !1546
  br label %2606, !dbg !1546

2606:                                             ; preds = %2602, %originalBBpart2673
  %2607 = load i32, i32* @x.19
  %2608 = load i32, i32* @y.20
  %2609 = sub i32 %2607, 1
  %2610 = mul i32 %2607, %2609
  %2611 = urem i32 %2610, 2
  %2612 = icmp eq i32 %2611, 0
  %2613 = icmp slt i32 %2608, 10
  %2614 = or i1 %2612, %2613
  br i1 %2614, label %originalBB675, label %originalBB675alteredBB

originalBB675:                                    ; preds = %2606, %originalBB675alteredBB
  %2615 = load i64, i64* %29, align 8, !dbg !1549
  %2616 = add i64 %2615, 1, !dbg !1549
  store i64 %2616, i64* %29, align 8, !dbg !1549
  %2617 = load i32, i32* @x.19
  %2618 = load i32, i32* @y.20
  %2619 = sub i32 %2617, 1
  %2620 = mul i32 %2617, %2619
  %2621 = urem i32 %2620, 2
  %2622 = icmp eq i32 %2621, 0
  %2623 = icmp slt i32 %2618, 10
  %2624 = or i1 %2622, %2623
  br i1 %2624, label %originalBBpart2679, label %originalBB675alteredBB

originalBBpart2679:                               ; preds = %originalBB675
  br label %2625, !dbg !1549

2625:                                             ; preds = %originalBBpart2679
  %2626 = load i32, i32* @x.19
  %2627 = load i32, i32* @y.20
  %2628 = sub i32 %2626, 1
  %2629 = mul i32 %2626, %2628
  %2630 = urem i32 %2629, 2
  %2631 = icmp eq i32 %2630, 0
  %2632 = icmp slt i32 %2627, 10
  %2633 = or i1 %2631, %2632
  br i1 %2633, label %originalBB681, label %originalBB681alteredBB

originalBB681:                                    ; preds = %2625, %originalBB681alteredBB
  %2634 = load i32, i32* @x.19
  %2635 = load i32, i32* @y.20
  %2636 = sub i32 %2634, 1
  %2637 = mul i32 %2634, %2636
  %2638 = urem i32 %2637, 2
  %2639 = icmp eq i32 %2638, 0
  %2640 = icmp slt i32 %2635, 10
  %2641 = or i1 %2639, %2640
  br i1 %2641, label %originalBBpart2683, label %originalBB681alteredBB

originalBBpart2683:                               ; preds = %originalBB681
  br label %2642, !dbg !1550

2642:                                             ; preds = %originalBBpart2683
  %2643 = load i32, i32* @x.19
  %2644 = load i32, i32* @y.20
  %2645 = sub i32 %2643, 1
  %2646 = mul i32 %2643, %2645
  %2647 = urem i32 %2646, 2
  %2648 = icmp eq i32 %2647, 0
  %2649 = icmp slt i32 %2644, 10
  %2650 = or i1 %2648, %2649
  br i1 %2650, label %originalBB685, label %originalBB685alteredBB

originalBB685:                                    ; preds = %2642, %originalBB685alteredBB
  %2651 = load i64, i64* %29, align 8, !dbg !1551
  %2652 = load i64, i64* %20, align 8, !dbg !1551
  %2653 = icmp ult i64 %2651, %2652, !dbg !1551
  %2654 = load i32, i32* @x.19
  %2655 = load i32, i32* @y.20
  %2656 = sub i32 %2654, 1
  %2657 = mul i32 %2654, %2656
  %2658 = urem i32 %2657, 2
  %2659 = icmp eq i32 %2658, 0
  %2660 = icmp slt i32 %2655, 10
  %2661 = or i1 %2659, %2660
  br i1 %2661, label %originalBBpart2687, label %originalBB685alteredBB

originalBBpart2687:                               ; preds = %originalBB685
  br i1 %2653, label %2662, label %2666, !dbg !1554

2662:                                             ; preds = %originalBBpart2687
  %2663 = load i8*, i8** %19, align 8, !dbg !1551
  %2664 = load i64, i64* %29, align 8, !dbg !1551
  %2665 = getelementptr inbounds i8, i8* %2663, i64 %2664, !dbg !1551
  store i8 39, i8* %2665, align 1, !dbg !1551
  br label %2666, !dbg !1551

2666:                                             ; preds = %2662, %originalBBpart2687
  %2667 = load i32, i32* @x.19
  %2668 = load i32, i32* @y.20
  %2669 = sub i32 %2667, 1
  %2670 = mul i32 %2667, %2669
  %2671 = urem i32 %2670, 2
  %2672 = icmp eq i32 %2671, 0
  %2673 = icmp slt i32 %2668, 10
  %2674 = or i1 %2672, %2673
  br i1 %2674, label %originalBB689, label %originalBB689alteredBB

originalBB689:                                    ; preds = %2666, %originalBB689alteredBB
  %2675 = load i64, i64* %29, align 8, !dbg !1554
  %2676 = add i64 %2675, 1, !dbg !1554
  store i64 %2676, i64* %29, align 8, !dbg !1554
  %2677 = load i32, i32* @x.19
  %2678 = load i32, i32* @y.20
  %2679 = sub i32 %2677, 1
  %2680 = mul i32 %2677, %2679
  %2681 = urem i32 %2680, 2
  %2682 = icmp eq i32 %2681, 0
  %2683 = icmp slt i32 %2678, 10
  %2684 = or i1 %2682, %2683
  br i1 %2684, label %originalBBpart2703, label %originalBB689alteredBB

originalBBpart2703:                               ; preds = %originalBB689
  br label %2685, !dbg !1554

2685:                                             ; preds = %originalBBpart2703
  %2686 = load i32, i32* @x.19
  %2687 = load i32, i32* @y.20
  %2688 = sub i32 %2686, 1
  %2689 = mul i32 %2686, %2688
  %2690 = urem i32 %2689, 2
  %2691 = icmp eq i32 %2690, 0
  %2692 = icmp slt i32 %2687, 10
  %2693 = or i1 %2691, %2692
  br i1 %2693, label %originalBB705, label %originalBB705alteredBB

originalBB705:                                    ; preds = %2685, %originalBB705alteredBB
  store i8 0, i8* %36, align 1, !dbg !1555
  %2694 = load i32, i32* @x.19
  %2695 = load i32, i32* @y.20
  %2696 = sub i32 %2694, 1
  %2697 = mul i32 %2694, %2696
  %2698 = urem i32 %2697, 2
  %2699 = icmp eq i32 %2698, 0
  %2700 = icmp slt i32 %2695, 10
  %2701 = or i1 %2699, %2700
  br i1 %2701, label %originalBBpart2707, label %originalBB705alteredBB

originalBBpart2707:                               ; preds = %originalBB705
  br label %2702, !dbg !1556

2702:                                             ; preds = %originalBBpart2707, %originalBBpart2626
  %2703 = load i32, i32* @x.19
  %2704 = load i32, i32* @y.20
  %2705 = sub i32 %2703, 1
  %2706 = mul i32 %2703, %2705
  %2707 = urem i32 %2706, 2
  %2708 = icmp eq i32 %2707, 0
  %2709 = icmp slt i32 %2704, 10
  %2710 = or i1 %2708, %2709
  br i1 %2710, label %originalBB709, label %originalBB709alteredBB

originalBB709:                                    ; preds = %2702, %originalBB709alteredBB
  %2711 = load i32, i32* @x.19
  %2712 = load i32, i32* @y.20
  %2713 = sub i32 %2711, 1
  %2714 = mul i32 %2711, %2713
  %2715 = urem i32 %2714, 2
  %2716 = icmp eq i32 %2715, 0
  %2717 = icmp slt i32 %2712, 10
  %2718 = or i1 %2716, %2717
  br i1 %2718, label %originalBBpart2711, label %originalBB709alteredBB

originalBBpart2711:                               ; preds = %originalBB709
  br label %4201, !dbg !1557

2719:                                             ; preds = %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200, %originalBBpart2200
  %2720 = load i32, i32* @x.19
  %2721 = load i32, i32* @y.20
  %2722 = sub i32 %2720, 1
  %2723 = mul i32 %2720, %2722
  %2724 = urem i32 %2723, 2
  %2725 = icmp eq i32 %2724, 0
  %2726 = icmp slt i32 %2721, 10
  %2727 = or i1 %2725, %2726
  br i1 %2727, label %originalBB713, label %originalBB713alteredBB

originalBB713:                                    ; preds = %2719, %originalBB713alteredBB
  store i8 1, i8* %43, align 1, !dbg !1558
  %2728 = load i32, i32* @x.19
  %2729 = load i32, i32* @y.20
  %2730 = sub i32 %2728, 1
  %2731 = mul i32 %2728, %2730
  %2732 = urem i32 %2731, 2
  %2733 = icmp eq i32 %2732, 0
  %2734 = icmp slt i32 %2729, 10
  %2735 = or i1 %2733, %2734
  br i1 %2735, label %originalBBpart2715, label %originalBB713alteredBB

originalBBpart2715:                               ; preds = %originalBB713
  br label %4201, !dbg !1559

2736:                                             ; preds = %originalBBpart2200
  call void @llvm.dbg.declare(metadata i64* %44, metadata !1560, metadata !DIExpression()), !dbg !1562
  call void @llvm.dbg.declare(metadata i8* %45, metadata !1563, metadata !DIExpression()), !dbg !1564
  %2737 = load i32, i32* @x.19
  %2738 = load i32, i32* @y.20
  %2739 = sub i32 %2737, 1
  %2740 = mul i32 %2737, %2739
  %2741 = urem i32 %2740, 2
  %2742 = icmp eq i32 %2741, 0
  %2743 = icmp slt i32 %2738, 10
  %2744 = or i1 %2742, %2743
  br i1 %2744, label %originalBB717, label %originalBB717alteredBB

originalBB717:                                    ; preds = %2736, %originalBB717alteredBB
  %2745 = load i8, i8* %34, align 1, !dbg !1565
  %2746 = trunc i8 %2745 to i1, !dbg !1565
  %2747 = load i32, i32* @x.19
  %2748 = load i32, i32* @y.20
  %2749 = sub i32 %2747, 1
  %2750 = mul i32 %2747, %2749
  %2751 = urem i32 %2750, 2
  %2752 = icmp eq i32 %2751, 0
  %2753 = icmp slt i32 %2748, 10
  %2754 = or i1 %2752, %2753
  br i1 %2754, label %originalBBpart2719, label %originalBB717alteredBB

originalBBpart2719:                               ; preds = %originalBB717
  br i1 %2746, label %2755, label %2767, !dbg !1567

2755:                                             ; preds = %originalBBpart2719
  store i64 1, i64* %44, align 8, !dbg !1568
  %2756 = call i16** @__ctype_b_loc() #14, !dbg !1570
  %2757 = load i16*, i16** %2756, align 8, !dbg !1570
  %2758 = load i8, i8* %39, align 1, !dbg !1570
  %2759 = zext i8 %2758 to i32, !dbg !1570
  %2760 = sext i32 %2759 to i64, !dbg !1570
  %2761 = getelementptr inbounds i16, i16* %2757, i64 %2760, !dbg !1570
  %2762 = load i16, i16* %2761, align 2, !dbg !1570
  %2763 = zext i16 %2762 to i32, !dbg !1570
  %2764 = and i32 %2763, 16384, !dbg !1570
  %2765 = icmp ne i32 %2764, 0, !dbg !1571
  %2766 = zext i1 %2765 to i8, !dbg !1572
  store i8 %2766, i8* %45, align 1, !dbg !1572
  br label %3152, !dbg !1573

2767:                                             ; preds = %originalBBpart2719
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t* %46, metadata !1574, metadata !DIExpression()), !dbg !1591
  %2768 = load i32, i32* @x.19
  %2769 = load i32, i32* @y.20
  %2770 = sub i32 %2768, 1
  %2771 = mul i32 %2768, %2770
  %2772 = urem i32 %2771, 2
  %2773 = icmp eq i32 %2772, 0
  %2774 = icmp slt i32 %2769, 10
  %2775 = or i1 %2773, %2774
  br i1 %2775, label %originalBB721, label %originalBB721alteredBB

originalBB721:                                    ; preds = %2767, %originalBB721alteredBB
  %2776 = bitcast %struct.__mbstate_t* %46 to i8*, !dbg !1592
  call void @llvm.memset.p0i8.i64(i8* align 4 %2776, i8 0, i64 8, i1 false), !dbg !1592
  store i64 0, i64* %44, align 8, !dbg !1593
  store i8 1, i8* %45, align 1, !dbg !1594
  %2777 = load i64, i64* %22, align 8, !dbg !1595
  %2778 = icmp eq i64 %2777, -1, !dbg !1597
  %2779 = load i32, i32* @x.19
  %2780 = load i32, i32* @y.20
  %2781 = sub i32 %2779, 1
  %2782 = mul i32 %2779, %2781
  %2783 = urem i32 %2782, 2
  %2784 = icmp eq i32 %2783, 0
  %2785 = icmp slt i32 %2780, 10
  %2786 = or i1 %2784, %2785
  br i1 %2786, label %originalBBpart2723, label %originalBB721alteredBB

originalBBpart2723:                               ; preds = %originalBB721
  br i1 %2778, label %2787, label %2790, !dbg !1598

2787:                                             ; preds = %originalBBpart2723
  %2788 = load i8*, i8** %21, align 8, !dbg !1599
  %2789 = call i64 @strlen(i8* %2788) #13, !dbg !1600
  store i64 %2789, i64* %22, align 8, !dbg !1601
  br label %2790, !dbg !1602

2790:                                             ; preds = %2787, %originalBBpart2723
  %2791 = load i32, i32* @x.19
  %2792 = load i32, i32* @y.20
  %2793 = sub i32 %2791, 1
  %2794 = mul i32 %2791, %2793
  %2795 = urem i32 %2794, 2
  %2796 = icmp eq i32 %2795, 0
  %2797 = icmp slt i32 %2792, 10
  %2798 = or i1 %2796, %2797
  br i1 %2798, label %originalBB725, label %originalBB725alteredBB

originalBB725:                                    ; preds = %2790, %originalBB725alteredBB
  %2799 = load i32, i32* @x.19
  %2800 = load i32, i32* @y.20
  %2801 = sub i32 %2799, 1
  %2802 = mul i32 %2799, %2801
  %2803 = urem i32 %2802, 2
  %2804 = icmp eq i32 %2803, 0
  %2805 = icmp slt i32 %2800, 10
  %2806 = or i1 %2804, %2805
  br i1 %2806, label %originalBBpart2727, label %originalBB725alteredBB

originalBBpart2727:                               ; preds = %originalBB725
  br label %2807, !dbg !1603

2807:                                             ; preds = %3147, %originalBBpart2727
  call void @llvm.dbg.declare(metadata i32* %47, metadata !1604, metadata !DIExpression()), !dbg !1607
  call void @llvm.dbg.declare(metadata i64* %48, metadata !1608, metadata !DIExpression()), !dbg !1609
  %2808 = load i8*, i8** %21, align 8, !dbg !1610
  %2809 = load i64, i64* %28, align 8, !dbg !1611
  %2810 = load i64, i64* %44, align 8, !dbg !1612
  %2811 = add i64 %2809, %2810, !dbg !1613
  %2812 = getelementptr inbounds i8, i8* %2808, i64 %2811, !dbg !1610
  %2813 = load i64, i64* %22, align 8, !dbg !1614
  %2814 = load i64, i64* %28, align 8, !dbg !1615
  %2815 = load i64, i64* %44, align 8, !dbg !1616
  %2816 = add i64 %2814, %2815, !dbg !1617
  %2817 = sub i64 %2813, %2816, !dbg !1618
  %2818 = call i64 @rpl_mbrtowc(i32* %47, i8* %2812, i64 %2817, %struct.__mbstate_t* %46), !dbg !1619
  store i64 %2818, i64* %48, align 8, !dbg !1609
  %2819 = load i64, i64* %48, align 8, !dbg !1620
  %2820 = icmp eq i64 %2819, 0, !dbg !1622
  br i1 %2820, label %2821, label %2838, !dbg !1623

2821:                                             ; preds = %2807
  %2822 = load i32, i32* @x.19
  %2823 = load i32, i32* @y.20
  %2824 = sub i32 %2822, 1
  %2825 = mul i32 %2822, %2824
  %2826 = urem i32 %2825, 2
  %2827 = icmp eq i32 %2826, 0
  %2828 = icmp slt i32 %2823, 10
  %2829 = or i1 %2827, %2828
  br i1 %2829, label %originalBB729, label %originalBB729alteredBB

originalBB729:                                    ; preds = %2821, %originalBB729alteredBB
  %2830 = load i32, i32* @x.19
  %2831 = load i32, i32* @y.20
  %2832 = sub i32 %2830, 1
  %2833 = mul i32 %2830, %2832
  %2834 = urem i32 %2833, 2
  %2835 = icmp eq i32 %2834, 0
  %2836 = icmp slt i32 %2831, 10
  %2837 = or i1 %2835, %2836
  br i1 %2837, label %originalBBpart2731, label %originalBB729alteredBB

originalBBpart2731:                               ; preds = %originalBB729
  br label %3151, !dbg !1624

2838:                                             ; preds = %2807
  %2839 = load i64, i64* %48, align 8, !dbg !1625
  %2840 = icmp eq i64 %2839, -1, !dbg !1627
  br i1 %2840, label %2841, label %2858, !dbg !1628

2841:                                             ; preds = %2838
  %2842 = load i32, i32* @x.19
  %2843 = load i32, i32* @y.20
  %2844 = sub i32 %2842, 1
  %2845 = mul i32 %2842, %2844
  %2846 = urem i32 %2845, 2
  %2847 = icmp eq i32 %2846, 0
  %2848 = icmp slt i32 %2843, 10
  %2849 = or i1 %2847, %2848
  br i1 %2849, label %originalBB733, label %originalBB733alteredBB

originalBB733:                                    ; preds = %2841, %originalBB733alteredBB
  store i8 0, i8* %45, align 1, !dbg !1629
  %2850 = load i32, i32* @x.19
  %2851 = load i32, i32* @y.20
  %2852 = sub i32 %2850, 1
  %2853 = mul i32 %2850, %2852
  %2854 = urem i32 %2853, 2
  %2855 = icmp eq i32 %2854, 0
  %2856 = icmp slt i32 %2851, 10
  %2857 = or i1 %2855, %2856
  br i1 %2857, label %originalBBpart2735, label %originalBB733alteredBB

originalBBpart2735:                               ; preds = %originalBB733
  br label %3151, !dbg !1631

2858:                                             ; preds = %2838
  %2859 = load i32, i32* @x.19
  %2860 = load i32, i32* @y.20
  %2861 = sub i32 %2859, 1
  %2862 = mul i32 %2859, %2861
  %2863 = urem i32 %2862, 2
  %2864 = icmp eq i32 %2863, 0
  %2865 = icmp slt i32 %2860, 10
  %2866 = or i1 %2864, %2865
  br i1 %2866, label %originalBB737, label %originalBB737alteredBB

originalBB737:                                    ; preds = %2858, %originalBB737alteredBB
  %2867 = load i64, i64* %48, align 8, !dbg !1632
  %2868 = icmp eq i64 %2867, -2, !dbg !1634
  %2869 = load i32, i32* @x.19
  %2870 = load i32, i32* @y.20
  %2871 = sub i32 %2869, 1
  %2872 = mul i32 %2869, %2871
  %2873 = urem i32 %2872, 2
  %2874 = icmp eq i32 %2873, 0
  %2875 = icmp slt i32 %2870, 10
  %2876 = or i1 %2874, %2875
  br i1 %2876, label %originalBBpart2739, label %originalBB737alteredBB

originalBBpart2739:                               ; preds = %originalBB737
  br i1 %2868, label %2877, label %2947, !dbg !1635

2877:                                             ; preds = %originalBBpart2739
  store i8 0, i8* %45, align 1, !dbg !1636
  br label %2878, !dbg !1638

2878:                                             ; preds = %originalBBpart2760, %2877
  %2879 = load i32, i32* @x.19
  %2880 = load i32, i32* @y.20
  %2881 = sub i32 %2879, 1
  %2882 = mul i32 %2879, %2881
  %2883 = urem i32 %2882, 2
  %2884 = icmp eq i32 %2883, 0
  %2885 = icmp slt i32 %2880, 10
  %2886 = or i1 %2884, %2885
  br i1 %2886, label %originalBB741, label %originalBB741alteredBB

originalBB741:                                    ; preds = %2878, %originalBB741alteredBB
  %2887 = load i64, i64* %28, align 8, !dbg !1639
  %2888 = load i64, i64* %44, align 8, !dbg !1640
  %2889 = add i64 %2887, %2888, !dbg !1641
  %2890 = load i64, i64* %22, align 8, !dbg !1642
  %2891 = icmp ult i64 %2889, %2890, !dbg !1643
  %2892 = load i32, i32* @x.19
  %2893 = load i32, i32* @y.20
  %2894 = sub i32 %2892, 1
  %2895 = mul i32 %2892, %2894
  %2896 = urem i32 %2895, 2
  %2897 = icmp eq i32 %2896, 0
  %2898 = icmp slt i32 %2893, 10
  %2899 = or i1 %2897, %2898
  br i1 %2899, label %originalBBpart2748, label %originalBB741alteredBB

originalBBpart2748:                               ; preds = %originalBB741
  br i1 %2891, label %2900, label %2909, !dbg !1644

2900:                                             ; preds = %originalBBpart2748
  %2901 = load i8*, i8** %21, align 8, !dbg !1645
  %2902 = load i64, i64* %28, align 8, !dbg !1646
  %2903 = load i64, i64* %44, align 8, !dbg !1647
  %2904 = add i64 %2902, %2903, !dbg !1648
  %2905 = getelementptr inbounds i8, i8* %2901, i64 %2904, !dbg !1645
  %2906 = load i8, i8* %2905, align 1, !dbg !1645
  %2907 = sext i8 %2906 to i32, !dbg !1645
  %2908 = icmp ne i32 %2907, 0, !dbg !1644
  br label %2909

2909:                                             ; preds = %2900, %originalBBpart2748
  %2910 = phi i1 [ false, %originalBBpart2748 ], [ %2908, %2900 ], !dbg !1649
  %2911 = load i32, i32* @x.19
  %2912 = load i32, i32* @y.20
  %2913 = sub i32 %2911, 1
  %2914 = mul i32 %2911, %2913
  %2915 = urem i32 %2914, 2
  %2916 = icmp eq i32 %2915, 0
  %2917 = icmp slt i32 %2912, 10
  %2918 = or i1 %2916, %2917
  br i1 %2918, label %originalBB750, label %originalBB750alteredBB

originalBB750:                                    ; preds = %2909, %originalBB750alteredBB
  %2919 = load i32, i32* @x.19
  %2920 = load i32, i32* @y.20
  %2921 = sub i32 %2919, 1
  %2922 = mul i32 %2919, %2921
  %2923 = urem i32 %2922, 2
  %2924 = icmp eq i32 %2923, 0
  %2925 = icmp slt i32 %2920, 10
  %2926 = or i1 %2924, %2925
  br i1 %2926, label %originalBBpart2752, label %originalBB750alteredBB

originalBBpart2752:                               ; preds = %originalBB750
  br i1 %2910, label %2927, label %2946, !dbg !1638

2927:                                             ; preds = %originalBBpart2752
  %2928 = load i32, i32* @x.19
  %2929 = load i32, i32* @y.20
  %2930 = sub i32 %2928, 1
  %2931 = mul i32 %2928, %2930
  %2932 = urem i32 %2931, 2
  %2933 = icmp eq i32 %2932, 0
  %2934 = icmp slt i32 %2929, 10
  %2935 = or i1 %2933, %2934
  br i1 %2935, label %originalBB754, label %originalBB754alteredBB

originalBB754:                                    ; preds = %2927, %originalBB754alteredBB
  %2936 = load i64, i64* %44, align 8, !dbg !1650
  %2937 = add i64 %2936, 1, !dbg !1650
  store i64 %2937, i64* %44, align 8, !dbg !1650
  %2938 = load i32, i32* @x.19
  %2939 = load i32, i32* @y.20
  %2940 = sub i32 %2938, 1
  %2941 = mul i32 %2938, %2940
  %2942 = urem i32 %2941, 2
  %2943 = icmp eq i32 %2942, 0
  %2944 = icmp slt i32 %2939, 10
  %2945 = or i1 %2943, %2944
  br i1 %2945, label %originalBBpart2760, label %originalBB754alteredBB

originalBBpart2760:                               ; preds = %originalBB754
  br label %2878, !dbg !1638, !llvm.loop !1651

2946:                                             ; preds = %originalBBpart2752
  br label %3151, !dbg !1652

2947:                                             ; preds = %originalBBpart2739
  %2948 = load i32, i32* @x.19
  %2949 = load i32, i32* @y.20
  %2950 = sub i32 %2948, 1
  %2951 = mul i32 %2948, %2950
  %2952 = urem i32 %2951, 2
  %2953 = icmp eq i32 %2952, 0
  %2954 = icmp slt i32 %2949, 10
  %2955 = or i1 %2953, %2954
  br i1 %2955, label %originalBB762, label %originalBB762alteredBB

originalBB762:                                    ; preds = %2947, %originalBB762alteredBB
  %2956 = load i8, i8* %35, align 1, !dbg !1653
  %2957 = trunc i8 %2956 to i1, !dbg !1653
  %2958 = load i32, i32* @x.19
  %2959 = load i32, i32* @y.20
  %2960 = sub i32 %2958, 1
  %2961 = mul i32 %2958, %2960
  %2962 = urem i32 %2961, 2
  %2963 = icmp eq i32 %2962, 0
  %2964 = icmp slt i32 %2959, 10
  %2965 = or i1 %2963, %2964
  br i1 %2965, label %originalBBpart2764, label %originalBB762alteredBB

originalBBpart2764:                               ; preds = %originalBB762
  br i1 %2957, label %2966, label %3039, !dbg !1656

2966:                                             ; preds = %originalBBpart2764
  %2967 = load i32, i32* %23, align 4, !dbg !1657
  %2968 = icmp eq i32 %2967, 2, !dbg !1658
  br i1 %2968, label %2969, label %3039, !dbg !1659

2969:                                             ; preds = %2966
  call void @llvm.dbg.declare(metadata i64* %49, metadata !1660, metadata !DIExpression()), !dbg !1662
  store i64 1, i64* %49, align 8, !dbg !1663
  br label %2970, !dbg !1665

2970:                                             ; preds = %3019, %2969
  %2971 = load i64, i64* %49, align 8, !dbg !1666
  %2972 = load i64, i64* %48, align 8, !dbg !1668
  %2973 = icmp ult i64 %2971, %2972, !dbg !1669
  br i1 %2973, label %2974, label %3022, !dbg !1670

2974:                                             ; preds = %2970
  %2975 = load i8*, i8** %21, align 8, !dbg !1671
  %2976 = load i64, i64* %28, align 8, !dbg !1672
  %2977 = load i64, i64* %44, align 8, !dbg !1673
  %2978 = add i64 %2976, %2977, !dbg !1674
  %2979 = load i64, i64* %49, align 8, !dbg !1675
  %2980 = add i64 %2978, %2979, !dbg !1676
  %2981 = getelementptr inbounds i8, i8* %2975, i64 %2980, !dbg !1671
  %2982 = load i8, i8* %2981, align 1, !dbg !1671
  %2983 = sext i8 %2982 to i32, !dbg !1671
  switch i32 %2983, label %2985 [
    i32 91, label %2984
    i32 92, label %2984
    i32 94, label %2984
    i32 96, label %2984
    i32 124, label %2984
  ], !dbg !1677

2984:                                             ; preds = %2974, %2974, %2974, %2974, %2974
  br label %5326, !dbg !1678

2985:                                             ; preds = %2974
  %2986 = load i32, i32* @x.19
  %2987 = load i32, i32* @y.20
  %2988 = sub i32 %2986, 1
  %2989 = mul i32 %2986, %2988
  %2990 = urem i32 %2989, 2
  %2991 = icmp eq i32 %2990, 0
  %2992 = icmp slt i32 %2987, 10
  %2993 = or i1 %2991, %2992
  br i1 %2993, label %originalBB766, label %originalBB766alteredBB

originalBB766:                                    ; preds = %2985, %originalBB766alteredBB
  %2994 = load i32, i32* @x.19
  %2995 = load i32, i32* @y.20
  %2996 = sub i32 %2994, 1
  %2997 = mul i32 %2994, %2996
  %2998 = urem i32 %2997, 2
  %2999 = icmp eq i32 %2998, 0
  %3000 = icmp slt i32 %2995, 10
  %3001 = or i1 %2999, %3000
  br i1 %3001, label %originalBBpart2768, label %originalBB766alteredBB

originalBBpart2768:                               ; preds = %originalBB766
  br label %3002, !dbg !1680

3002:                                             ; preds = %originalBBpart2768
  %3003 = load i32, i32* @x.19
  %3004 = load i32, i32* @y.20
  %3005 = sub i32 %3003, 1
  %3006 = mul i32 %3003, %3005
  %3007 = urem i32 %3006, 2
  %3008 = icmp eq i32 %3007, 0
  %3009 = icmp slt i32 %3004, 10
  %3010 = or i1 %3008, %3009
  br i1 %3010, label %originalBB770, label %originalBB770alteredBB

originalBB770:                                    ; preds = %3002, %originalBB770alteredBB
  %3011 = load i32, i32* @x.19
  %3012 = load i32, i32* @y.20
  %3013 = sub i32 %3011, 1
  %3014 = mul i32 %3011, %3013
  %3015 = urem i32 %3014, 2
  %3016 = icmp eq i32 %3015, 0
  %3017 = icmp slt i32 %3012, 10
  %3018 = or i1 %3016, %3017
  br i1 %3018, label %originalBBpart2772, label %originalBB770alteredBB

originalBBpart2772:                               ; preds = %originalBB770
  br label %3019, !dbg !1681

3019:                                             ; preds = %originalBBpart2772
  %3020 = load i64, i64* %49, align 8, !dbg !1682
  %3021 = add i64 %3020, 1, !dbg !1682
  store i64 %3021, i64* %49, align 8, !dbg !1682
  br label %2970, !dbg !1683, !llvm.loop !1684

3022:                                             ; preds = %2970
  %3023 = load i32, i32* @x.19
  %3024 = load i32, i32* @y.20
  %3025 = sub i32 %3023, 1
  %3026 = mul i32 %3023, %3025
  %3027 = urem i32 %3026, 2
  %3028 = icmp eq i32 %3027, 0
  %3029 = icmp slt i32 %3024, 10
  %3030 = or i1 %3028, %3029
  br i1 %3030, label %originalBB774, label %originalBB774alteredBB

originalBB774:                                    ; preds = %3022, %originalBB774alteredBB
  %3031 = load i32, i32* @x.19
  %3032 = load i32, i32* @y.20
  %3033 = sub i32 %3031, 1
  %3034 = mul i32 %3031, %3033
  %3035 = urem i32 %3034, 2
  %3036 = icmp eq i32 %3035, 0
  %3037 = icmp slt i32 %3032, 10
  %3038 = or i1 %3036, %3037
  br i1 %3038, label %originalBBpart2776, label %originalBB774alteredBB

originalBBpart2776:                               ; preds = %originalBB774
  br label %3039, !dbg !1686

3039:                                             ; preds = %originalBBpart2776, %2966, %originalBBpart2764
  %3040 = load i32, i32* @x.19
  %3041 = load i32, i32* @y.20
  %3042 = sub i32 %3040, 1
  %3043 = mul i32 %3040, %3042
  %3044 = urem i32 %3043, 2
  %3045 = icmp eq i32 %3044, 0
  %3046 = icmp slt i32 %3041, 10
  %3047 = or i1 %3045, %3046
  br i1 %3047, label %originalBB778, label %originalBB778alteredBB

originalBB778:                                    ; preds = %3039, %originalBB778alteredBB
  %3048 = load i32, i32* %47, align 4, !dbg !1687
  %3049 = call i32 @iswprint(i32 %3048) #10, !dbg !1689
  %3050 = icmp ne i32 %3049, 0, !dbg !1689
  %3051 = load i32, i32* @x.19
  %3052 = load i32, i32* @y.20
  %3053 = sub i32 %3051, 1
  %3054 = mul i32 %3051, %3053
  %3055 = urem i32 %3054, 2
  %3056 = icmp eq i32 %3055, 0
  %3057 = icmp slt i32 %3052, 10
  %3058 = or i1 %3056, %3057
  br i1 %3058, label %originalBBpart2780, label %originalBB778alteredBB

originalBBpart2780:                               ; preds = %originalBB778
  br i1 %3050, label %3076, label %3059, !dbg !1690

3059:                                             ; preds = %originalBBpart2780
  %3060 = load i32, i32* @x.19
  %3061 = load i32, i32* @y.20
  %3062 = sub i32 %3060, 1
  %3063 = mul i32 %3060, %3062
  %3064 = urem i32 %3063, 2
  %3065 = icmp eq i32 %3064, 0
  %3066 = icmp slt i32 %3061, 10
  %3067 = or i1 %3065, %3066
  br i1 %3067, label %originalBB782, label %originalBB782alteredBB

originalBB782:                                    ; preds = %3059, %originalBB782alteredBB
  store i8 0, i8* %45, align 1, !dbg !1691
  %3068 = load i32, i32* @x.19
  %3069 = load i32, i32* @y.20
  %3070 = sub i32 %3068, 1
  %3071 = mul i32 %3068, %3070
  %3072 = urem i32 %3071, 2
  %3073 = icmp eq i32 %3072, 0
  %3074 = icmp slt i32 %3069, 10
  %3075 = or i1 %3073, %3074
  br i1 %3075, label %originalBBpart2784, label %originalBB782alteredBB

originalBBpart2784:                               ; preds = %originalBB782
  br label %3076, !dbg !1692

3076:                                             ; preds = %originalBBpart2784, %originalBBpart2780
  %3077 = load i32, i32* @x.19
  %3078 = load i32, i32* @y.20
  %3079 = sub i32 %3077, 1
  %3080 = mul i32 %3077, %3079
  %3081 = urem i32 %3080, 2
  %3082 = icmp eq i32 %3081, 0
  %3083 = icmp slt i32 %3078, 10
  %3084 = or i1 %3082, %3083
  br i1 %3084, label %originalBB786, label %originalBB786alteredBB

originalBB786:                                    ; preds = %3076, %originalBB786alteredBB
  %3085 = load i64, i64* %48, align 8, !dbg !1693
  %3086 = load i64, i64* %44, align 8, !dbg !1694
  %3087 = add i64 %3086, %3085, !dbg !1694
  store i64 %3087, i64* %44, align 8, !dbg !1694
  %3088 = load i32, i32* @x.19
  %3089 = load i32, i32* @y.20
  %3090 = sub i32 %3088, 1
  %3091 = mul i32 %3088, %3090
  %3092 = urem i32 %3091, 2
  %3093 = icmp eq i32 %3092, 0
  %3094 = icmp slt i32 %3089, 10
  %3095 = or i1 %3093, %3094
  br i1 %3095, label %originalBBpart2797, label %originalBB786alteredBB

originalBBpart2797:                               ; preds = %originalBB786
  br label %3096

3096:                                             ; preds = %originalBBpart2797
  %3097 = load i32, i32* @x.19
  %3098 = load i32, i32* @y.20
  %3099 = sub i32 %3097, 1
  %3100 = mul i32 %3097, %3099
  %3101 = urem i32 %3100, 2
  %3102 = icmp eq i32 %3101, 0
  %3103 = icmp slt i32 %3098, 10
  %3104 = or i1 %3102, %3103
  br i1 %3104, label %originalBB799, label %originalBB799alteredBB

originalBB799:                                    ; preds = %3096, %originalBB799alteredBB
  %3105 = load i32, i32* @x.19
  %3106 = load i32, i32* @y.20
  %3107 = sub i32 %3105, 1
  %3108 = mul i32 %3105, %3107
  %3109 = urem i32 %3108, 2
  %3110 = icmp eq i32 %3109, 0
  %3111 = icmp slt i32 %3106, 10
  %3112 = or i1 %3110, %3111
  br i1 %3112, label %originalBBpart2801, label %originalBB799alteredBB

originalBBpart2801:                               ; preds = %originalBB799
  br label %3113

3113:                                             ; preds = %originalBBpart2801
  %3114 = load i32, i32* @x.19
  %3115 = load i32, i32* @y.20
  %3116 = sub i32 %3114, 1
  %3117 = mul i32 %3114, %3116
  %3118 = urem i32 %3117, 2
  %3119 = icmp eq i32 %3118, 0
  %3120 = icmp slt i32 %3115, 10
  %3121 = or i1 %3119, %3120
  br i1 %3121, label %originalBB803, label %originalBB803alteredBB

originalBB803:                                    ; preds = %3113, %originalBB803alteredBB
  %3122 = load i32, i32* @x.19
  %3123 = load i32, i32* @y.20
  %3124 = sub i32 %3122, 1
  %3125 = mul i32 %3122, %3124
  %3126 = urem i32 %3125, 2
  %3127 = icmp eq i32 %3126, 0
  %3128 = icmp slt i32 %3123, 10
  %3129 = or i1 %3127, %3128
  br i1 %3129, label %originalBBpart2805, label %originalBB803alteredBB

originalBBpart2805:                               ; preds = %originalBB803
  br label %3130

3130:                                             ; preds = %originalBBpart2805
  %3131 = load i32, i32* @x.19
  %3132 = load i32, i32* @y.20
  %3133 = sub i32 %3131, 1
  %3134 = mul i32 %3131, %3133
  %3135 = urem i32 %3134, 2
  %3136 = icmp eq i32 %3135, 0
  %3137 = icmp slt i32 %3132, 10
  %3138 = or i1 %3136, %3137
  br i1 %3138, label %originalBB807, label %originalBB807alteredBB

originalBB807:                                    ; preds = %3130, %originalBB807alteredBB
  %3139 = load i32, i32* @x.19
  %3140 = load i32, i32* @y.20
  %3141 = sub i32 %3139, 1
  %3142 = mul i32 %3139, %3141
  %3143 = urem i32 %3142, 2
  %3144 = icmp eq i32 %3143, 0
  %3145 = icmp slt i32 %3140, 10
  %3146 = or i1 %3144, %3145
  br i1 %3146, label %originalBBpart2809, label %originalBB807alteredBB

originalBBpart2809:                               ; preds = %originalBB807
  br label %3147, !dbg !1695

3147:                                             ; preds = %originalBBpart2809
  %3148 = call i32 @mbsinit(%struct.__mbstate_t* %46) #13, !dbg !1696
  %3149 = icmp ne i32 %3148, 0, !dbg !1697
  %3150 = xor i1 %3149, true, !dbg !1697
  br i1 %3150, label %2807, label %3151, !dbg !1695, !llvm.loop !1698

3151:                                             ; preds = %3147, %2946, %originalBBpart2735, %originalBBpart2731
  br label %3152

3152:                                             ; preds = %3151, %2755
  %3153 = load i32, i32* @x.19
  %3154 = load i32, i32* @y.20
  %3155 = sub i32 %3153, 1
  %3156 = mul i32 %3153, %3155
  %3157 = urem i32 %3156, 2
  %3158 = icmp eq i32 %3157, 0
  %3159 = icmp slt i32 %3154, 10
  %3160 = or i1 %3158, %3159
  br i1 %3160, label %originalBB811, label %originalBB811alteredBB

originalBB811:                                    ; preds = %3152, %originalBB811alteredBB
  %3161 = load i8, i8* %45, align 1, !dbg !1700
  %3162 = trunc i8 %3161 to i1, !dbg !1700
  %3163 = zext i1 %3162 to i8, !dbg !1701
  store i8 %3163, i8* %43, align 1, !dbg !1701
  %3164 = load i64, i64* %44, align 8, !dbg !1702
  %3165 = icmp ult i64 1, %3164, !dbg !1704
  %3166 = load i32, i32* @x.19
  %3167 = load i32, i32* @y.20
  %3168 = sub i32 %3166, 1
  %3169 = mul i32 %3166, %3168
  %3170 = urem i32 %3169, 2
  %3171 = icmp eq i32 %3170, 0
  %3172 = icmp slt i32 %3167, 10
  %3173 = or i1 %3171, %3172
  br i1 %3173, label %originalBBpart2813, label %originalBB811alteredBB

originalBBpart2813:                               ; preds = %originalBB811
  br i1 %3165, label %3196, label %3174, !dbg !1705

3174:                                             ; preds = %originalBBpart2813
  %3175 = load i32, i32* @x.19
  %3176 = load i32, i32* @y.20
  %3177 = sub i32 %3175, 1
  %3178 = mul i32 %3175, %3177
  %3179 = urem i32 %3178, 2
  %3180 = icmp eq i32 %3179, 0
  %3181 = icmp slt i32 %3176, 10
  %3182 = or i1 %3180, %3181
  br i1 %3182, label %originalBB815, label %originalBB815alteredBB

originalBB815:                                    ; preds = %3174, %originalBB815alteredBB
  %3183 = load i8, i8* %33, align 1, !dbg !1706
  %3184 = trunc i8 %3183 to i1, !dbg !1706
  %3185 = load i32, i32* @x.19
  %3186 = load i32, i32* @y.20
  %3187 = sub i32 %3185, 1
  %3188 = mul i32 %3185, %3187
  %3189 = urem i32 %3188, 2
  %3190 = icmp eq i32 %3189, 0
  %3191 = icmp slt i32 %3186, 10
  %3192 = or i1 %3190, %3191
  br i1 %3192, label %originalBBpart2817, label %originalBB815alteredBB

originalBBpart2817:                               ; preds = %originalBB815
  br i1 %3184, label %3193, label %4184, !dbg !1707

3193:                                             ; preds = %originalBBpart2817
  %3194 = load i8, i8* %45, align 1, !dbg !1708
  %3195 = trunc i8 %3194 to i1, !dbg !1708
  br i1 %3195, label %4184, label %3196, !dbg !1709

3196:                                             ; preds = %3193, %originalBBpart2813
  call void @llvm.dbg.declare(metadata i64* %50, metadata !1710, metadata !DIExpression()), !dbg !1712
  %3197 = load i64, i64* %28, align 8, !dbg !1713
  %3198 = load i64, i64* %44, align 8, !dbg !1714
  %3199 = add i64 %3197, %3198, !dbg !1715
  store i64 %3199, i64* %50, align 8, !dbg !1712
  br label %3200, !dbg !1716

3200:                                             ; preds = %4161, %3196
  %3201 = load i32, i32* @x.19
  %3202 = load i32, i32* @y.20
  %3203 = sub i32 %3201, 1
  %3204 = mul i32 %3201, %3203
  %3205 = urem i32 %3204, 2
  %3206 = icmp eq i32 %3205, 0
  %3207 = icmp slt i32 %3202, 10
  %3208 = or i1 %3206, %3207
  br i1 %3208, label %originalBB819, label %originalBB819alteredBB

originalBB819:                                    ; preds = %3200, %originalBB819alteredBB
  %3209 = load i8, i8* %33, align 1, !dbg !1717
  %3210 = trunc i8 %3209 to i1, !dbg !1717
  %3211 = load i32, i32* @x.19
  %3212 = load i32, i32* @y.20
  %3213 = sub i32 %3211, 1
  %3214 = mul i32 %3211, %3213
  %3215 = urem i32 %3214, 2
  %3216 = icmp eq i32 %3215, 0
  %3217 = icmp slt i32 %3212, 10
  %3218 = or i1 %3216, %3217
  br i1 %3218, label %originalBBpart2821, label %originalBB819alteredBB

originalBBpart2821:                               ; preds = %originalBB819
  br i1 %3210, label %3219, label %3740, !dbg !1722

3219:                                             ; preds = %originalBBpart2821
  %3220 = load i32, i32* @x.19
  %3221 = load i32, i32* @y.20
  %3222 = sub i32 %3220, 1
  %3223 = mul i32 %3220, %3222
  %3224 = urem i32 %3223, 2
  %3225 = icmp eq i32 %3224, 0
  %3226 = icmp slt i32 %3221, 10
  %3227 = or i1 %3225, %3226
  br i1 %3227, label %originalBB823, label %originalBB823alteredBB

originalBB823:                                    ; preds = %3219, %originalBB823alteredBB
  %3228 = load i8, i8* %45, align 1, !dbg !1723
  %3229 = trunc i8 %3228 to i1, !dbg !1723
  %3230 = load i32, i32* @x.19
  %3231 = load i32, i32* @y.20
  %3232 = sub i32 %3230, 1
  %3233 = mul i32 %3230, %3232
  %3234 = urem i32 %3233, 2
  %3235 = icmp eq i32 %3234, 0
  %3236 = icmp slt i32 %3231, 10
  %3237 = or i1 %3235, %3236
  br i1 %3237, label %originalBBpart2825, label %originalBB823alteredBB

originalBBpart2825:                               ; preds = %originalBB823
  br i1 %3229, label %3740, label %3238, !dbg !1724

3238:                                             ; preds = %originalBBpart2825
  %3239 = load i32, i32* @x.19
  %3240 = load i32, i32* @y.20
  %3241 = sub i32 %3239, 1
  %3242 = mul i32 %3239, %3241
  %3243 = urem i32 %3242, 2
  %3244 = icmp eq i32 %3243, 0
  %3245 = icmp slt i32 %3240, 10
  %3246 = or i1 %3244, %3245
  br i1 %3246, label %originalBB827, label %originalBB827alteredBB

originalBB827:                                    ; preds = %3238, %originalBB827alteredBB
  %3247 = load i32, i32* @x.19
  %3248 = load i32, i32* @y.20
  %3249 = sub i32 %3247, 1
  %3250 = mul i32 %3247, %3249
  %3251 = urem i32 %3250, 2
  %3252 = icmp eq i32 %3251, 0
  %3253 = icmp slt i32 %3248, 10
  %3254 = or i1 %3252, %3253
  br i1 %3254, label %originalBBpart2829, label %originalBB827alteredBB

originalBBpart2829:                               ; preds = %originalBB827
  br label %3255, !dbg !1725

3255:                                             ; preds = %originalBBpart2829
  %3256 = load i8, i8* %35, align 1, !dbg !1727
  %3257 = trunc i8 %3256 to i1, !dbg !1727
  br i1 %3257, label %3258, label %3275, !dbg !1730

3258:                                             ; preds = %3255
  %3259 = load i32, i32* @x.19
  %3260 = load i32, i32* @y.20
  %3261 = sub i32 %3259, 1
  %3262 = mul i32 %3259, %3261
  %3263 = urem i32 %3262, 2
  %3264 = icmp eq i32 %3263, 0
  %3265 = icmp slt i32 %3260, 10
  %3266 = or i1 %3264, %3265
  br i1 %3266, label %originalBB831, label %originalBB831alteredBB

originalBB831:                                    ; preds = %3258, %originalBB831alteredBB
  %3267 = load i32, i32* @x.19
  %3268 = load i32, i32* @y.20
  %3269 = sub i32 %3267, 1
  %3270 = mul i32 %3267, %3269
  %3271 = urem i32 %3270, 2
  %3272 = icmp eq i32 %3271, 0
  %3273 = icmp slt i32 %3268, 10
  %3274 = or i1 %3272, %3273
  br i1 %3274, label %originalBBpart2833, label %originalBB831alteredBB

originalBBpart2833:                               ; preds = %originalBB831
  br label %5326, !dbg !1727

3275:                                             ; preds = %3255
  %3276 = load i32, i32* @x.19
  %3277 = load i32, i32* @y.20
  %3278 = sub i32 %3276, 1
  %3279 = mul i32 %3276, %3278
  %3280 = urem i32 %3279, 2
  %3281 = icmp eq i32 %3280, 0
  %3282 = icmp slt i32 %3277, 10
  %3283 = or i1 %3281, %3282
  br i1 %3283, label %originalBB835, label %originalBB835alteredBB

originalBB835:                                    ; preds = %3275, %originalBB835alteredBB
  store i8 1, i8* %42, align 1, !dbg !1730
  %3284 = load i32, i32* %23, align 4, !dbg !1731
  %3285 = icmp eq i32 %3284, 2, !dbg !1731
  %3286 = load i32, i32* @x.19
  %3287 = load i32, i32* @y.20
  %3288 = sub i32 %3286, 1
  %3289 = mul i32 %3286, %3288
  %3290 = urem i32 %3289, 2
  %3291 = icmp eq i32 %3290, 0
  %3292 = icmp slt i32 %3287, 10
  %3293 = or i1 %3291, %3292
  br i1 %3293, label %originalBBpart2837, label %originalBB835alteredBB

originalBBpart2837:                               ; preds = %originalBB835
  br i1 %3285, label %3294, label %3494, !dbg !1731

3294:                                             ; preds = %originalBBpart2837
  %3295 = load i32, i32* @x.19
  %3296 = load i32, i32* @y.20
  %3297 = sub i32 %3295, 1
  %3298 = mul i32 %3295, %3297
  %3299 = urem i32 %3298, 2
  %3300 = icmp eq i32 %3299, 0
  %3301 = icmp slt i32 %3296, 10
  %3302 = or i1 %3300, %3301
  br i1 %3302, label %originalBB839, label %originalBB839alteredBB

originalBB839:                                    ; preds = %3294, %originalBB839alteredBB
  %3303 = load i8, i8* %36, align 1, !dbg !1731
  %3304 = trunc i8 %3303 to i1, !dbg !1731
  %3305 = load i32, i32* @x.19
  %3306 = load i32, i32* @y.20
  %3307 = sub i32 %3305, 1
  %3308 = mul i32 %3305, %3307
  %3309 = urem i32 %3308, 2
  %3310 = icmp eq i32 %3309, 0
  %3311 = icmp slt i32 %3306, 10
  %3312 = or i1 %3310, %3311
  br i1 %3312, label %originalBBpart2841, label %originalBB839alteredBB

originalBBpart2841:                               ; preds = %originalBB839
  br i1 %3304, label %3494, label %3313, !dbg !1730

3313:                                             ; preds = %originalBBpart2841
  %3314 = load i32, i32* @x.19
  %3315 = load i32, i32* @y.20
  %3316 = sub i32 %3314, 1
  %3317 = mul i32 %3314, %3316
  %3318 = urem i32 %3317, 2
  %3319 = icmp eq i32 %3318, 0
  %3320 = icmp slt i32 %3315, 10
  %3321 = or i1 %3319, %3320
  br i1 %3321, label %originalBB843, label %originalBB843alteredBB

originalBB843:                                    ; preds = %3313, %originalBB843alteredBB
  %3322 = load i32, i32* @x.19
  %3323 = load i32, i32* @y.20
  %3324 = sub i32 %3322, 1
  %3325 = mul i32 %3322, %3324
  %3326 = urem i32 %3325, 2
  %3327 = icmp eq i32 %3326, 0
  %3328 = icmp slt i32 %3323, 10
  %3329 = or i1 %3327, %3328
  br i1 %3329, label %originalBBpart2845, label %originalBB843alteredBB

originalBBpart2845:                               ; preds = %originalBB843
  br label %3330, !dbg !1733

3330:                                             ; preds = %originalBBpart2845
  %3331 = load i64, i64* %29, align 8, !dbg !1735
  %3332 = load i64, i64* %20, align 8, !dbg !1735
  %3333 = icmp ult i64 %3331, %3332, !dbg !1735
  br i1 %3333, label %3334, label %3354, !dbg !1738

3334:                                             ; preds = %3330
  %3335 = load i32, i32* @x.19
  %3336 = load i32, i32* @y.20
  %3337 = sub i32 %3335, 1
  %3338 = mul i32 %3335, %3337
  %3339 = urem i32 %3338, 2
  %3340 = icmp eq i32 %3339, 0
  %3341 = icmp slt i32 %3336, 10
  %3342 = or i1 %3340, %3341
  br i1 %3342, label %originalBB847, label %originalBB847alteredBB

originalBB847:                                    ; preds = %3334, %originalBB847alteredBB
  %3343 = load i8*, i8** %19, align 8, !dbg !1735
  %3344 = load i64, i64* %29, align 8, !dbg !1735
  %3345 = getelementptr inbounds i8, i8* %3343, i64 %3344, !dbg !1735
  store i8 39, i8* %3345, align 1, !dbg !1735
  %3346 = load i32, i32* @x.19
  %3347 = load i32, i32* @y.20
  %3348 = sub i32 %3346, 1
  %3349 = mul i32 %3346, %3348
  %3350 = urem i32 %3349, 2
  %3351 = icmp eq i32 %3350, 0
  %3352 = icmp slt i32 %3347, 10
  %3353 = or i1 %3351, %3352
  br i1 %3353, label %originalBBpart2849, label %originalBB847alteredBB

originalBBpart2849:                               ; preds = %originalBB847
  br label %3354, !dbg !1735

3354:                                             ; preds = %originalBBpart2849, %3330
  %3355 = load i64, i64* %29, align 8, !dbg !1738
  %3356 = add i64 %3355, 1, !dbg !1738
  store i64 %3356, i64* %29, align 8, !dbg !1738
  br label %3357, !dbg !1738

3357:                                             ; preds = %3354
  %3358 = load i32, i32* @x.19
  %3359 = load i32, i32* @y.20
  %3360 = sub i32 %3358, 1
  %3361 = mul i32 %3358, %3360
  %3362 = urem i32 %3361, 2
  %3363 = icmp eq i32 %3362, 0
  %3364 = icmp slt i32 %3359, 10
  %3365 = or i1 %3363, %3364
  br i1 %3365, label %originalBB851, label %originalBB851alteredBB

originalBB851:                                    ; preds = %3357, %originalBB851alteredBB
  %3366 = load i32, i32* @x.19
  %3367 = load i32, i32* @y.20
  %3368 = sub i32 %3366, 1
  %3369 = mul i32 %3366, %3368
  %3370 = urem i32 %3369, 2
  %3371 = icmp eq i32 %3370, 0
  %3372 = icmp slt i32 %3367, 10
  %3373 = or i1 %3371, %3372
  br i1 %3373, label %originalBBpart2853, label %originalBB851alteredBB

originalBBpart2853:                               ; preds = %originalBB851
  br label %3374, !dbg !1733

3374:                                             ; preds = %originalBBpart2853
  %3375 = load i32, i32* @x.19
  %3376 = load i32, i32* @y.20
  %3377 = sub i32 %3375, 1
  %3378 = mul i32 %3375, %3377
  %3379 = urem i32 %3378, 2
  %3380 = icmp eq i32 %3379, 0
  %3381 = icmp slt i32 %3376, 10
  %3382 = or i1 %3380, %3381
  br i1 %3382, label %originalBB855, label %originalBB855alteredBB

originalBB855:                                    ; preds = %3374, %originalBB855alteredBB
  %3383 = load i64, i64* %29, align 8, !dbg !1739
  %3384 = load i64, i64* %20, align 8, !dbg !1739
  %3385 = icmp ult i64 %3383, %3384, !dbg !1739
  %3386 = load i32, i32* @x.19
  %3387 = load i32, i32* @y.20
  %3388 = sub i32 %3386, 1
  %3389 = mul i32 %3386, %3388
  %3390 = urem i32 %3389, 2
  %3391 = icmp eq i32 %3390, 0
  %3392 = icmp slt i32 %3387, 10
  %3393 = or i1 %3391, %3392
  br i1 %3393, label %originalBBpart2857, label %originalBB855alteredBB

originalBBpart2857:                               ; preds = %originalBB855
  br i1 %3385, label %3394, label %3414, !dbg !1742

3394:                                             ; preds = %originalBBpart2857
  %3395 = load i32, i32* @x.19
  %3396 = load i32, i32* @y.20
  %3397 = sub i32 %3395, 1
  %3398 = mul i32 %3395, %3397
  %3399 = urem i32 %3398, 2
  %3400 = icmp eq i32 %3399, 0
  %3401 = icmp slt i32 %3396, 10
  %3402 = or i1 %3400, %3401
  br i1 %3402, label %originalBB859, label %originalBB859alteredBB

originalBB859:                                    ; preds = %3394, %originalBB859alteredBB
  %3403 = load i8*, i8** %19, align 8, !dbg !1739
  %3404 = load i64, i64* %29, align 8, !dbg !1739
  %3405 = getelementptr inbounds i8, i8* %3403, i64 %3404, !dbg !1739
  store i8 36, i8* %3405, align 1, !dbg !1739
  %3406 = load i32, i32* @x.19
  %3407 = load i32, i32* @y.20
  %3408 = sub i32 %3406, 1
  %3409 = mul i32 %3406, %3408
  %3410 = urem i32 %3409, 2
  %3411 = icmp eq i32 %3410, 0
  %3412 = icmp slt i32 %3407, 10
  %3413 = or i1 %3411, %3412
  br i1 %3413, label %originalBBpart2861, label %originalBB859alteredBB

originalBBpart2861:                               ; preds = %originalBB859
  br label %3414, !dbg !1739

3414:                                             ; preds = %originalBBpart2861, %originalBBpart2857
  %3415 = load i32, i32* @x.19
  %3416 = load i32, i32* @y.20
  %3417 = sub i32 %3415, 1
  %3418 = mul i32 %3415, %3417
  %3419 = urem i32 %3418, 2
  %3420 = icmp eq i32 %3419, 0
  %3421 = icmp slt i32 %3416, 10
  %3422 = or i1 %3420, %3421
  br i1 %3422, label %originalBB863, label %originalBB863alteredBB

originalBB863:                                    ; preds = %3414, %originalBB863alteredBB
  %3423 = load i64, i64* %29, align 8, !dbg !1742
  %3424 = add i64 %3423, 1, !dbg !1742
  store i64 %3424, i64* %29, align 8, !dbg !1742
  %3425 = load i32, i32* @x.19
  %3426 = load i32, i32* @y.20
  %3427 = sub i32 %3425, 1
  %3428 = mul i32 %3425, %3427
  %3429 = urem i32 %3428, 2
  %3430 = icmp eq i32 %3429, 0
  %3431 = icmp slt i32 %3426, 10
  %3432 = or i1 %3430, %3431
  br i1 %3432, label %originalBBpart2869, label %originalBB863alteredBB

originalBBpart2869:                               ; preds = %originalBB863
  br label %3433, !dbg !1742

3433:                                             ; preds = %originalBBpart2869
  %3434 = load i32, i32* @x.19
  %3435 = load i32, i32* @y.20
  %3436 = sub i32 %3434, 1
  %3437 = mul i32 %3434, %3436
  %3438 = urem i32 %3437, 2
  %3439 = icmp eq i32 %3438, 0
  %3440 = icmp slt i32 %3435, 10
  %3441 = or i1 %3439, %3440
  br i1 %3441, label %originalBB871, label %originalBB871alteredBB

originalBB871:                                    ; preds = %3433, %originalBB871alteredBB
  %3442 = load i32, i32* @x.19
  %3443 = load i32, i32* @y.20
  %3444 = sub i32 %3442, 1
  %3445 = mul i32 %3442, %3444
  %3446 = urem i32 %3445, 2
  %3447 = icmp eq i32 %3446, 0
  %3448 = icmp slt i32 %3443, 10
  %3449 = or i1 %3447, %3448
  br i1 %3449, label %originalBBpart2873, label %originalBB871alteredBB

originalBBpart2873:                               ; preds = %originalBB871
  br label %3450, !dbg !1733

3450:                                             ; preds = %originalBBpart2873
  %3451 = load i32, i32* @x.19
  %3452 = load i32, i32* @y.20
  %3453 = sub i32 %3451, 1
  %3454 = mul i32 %3451, %3453
  %3455 = urem i32 %3454, 2
  %3456 = icmp eq i32 %3455, 0
  %3457 = icmp slt i32 %3452, 10
  %3458 = or i1 %3456, %3457
  br i1 %3458, label %originalBB875, label %originalBB875alteredBB

originalBB875:                                    ; preds = %3450, %originalBB875alteredBB
  %3459 = load i64, i64* %29, align 8, !dbg !1743
  %3460 = load i64, i64* %20, align 8, !dbg !1743
  %3461 = icmp ult i64 %3459, %3460, !dbg !1743
  %3462 = load i32, i32* @x.19
  %3463 = load i32, i32* @y.20
  %3464 = sub i32 %3462, 1
  %3465 = mul i32 %3462, %3464
  %3466 = urem i32 %3465, 2
  %3467 = icmp eq i32 %3466, 0
  %3468 = icmp slt i32 %3463, 10
  %3469 = or i1 %3467, %3468
  br i1 %3469, label %originalBBpart2877, label %originalBB875alteredBB

originalBBpart2877:                               ; preds = %originalBB875
  br i1 %3461, label %3470, label %3490, !dbg !1746

3470:                                             ; preds = %originalBBpart2877
  %3471 = load i32, i32* @x.19
  %3472 = load i32, i32* @y.20
  %3473 = sub i32 %3471, 1
  %3474 = mul i32 %3471, %3473
  %3475 = urem i32 %3474, 2
  %3476 = icmp eq i32 %3475, 0
  %3477 = icmp slt i32 %3472, 10
  %3478 = or i1 %3476, %3477
  br i1 %3478, label %originalBB879, label %originalBB879alteredBB

originalBB879:                                    ; preds = %3470, %originalBB879alteredBB
  %3479 = load i8*, i8** %19, align 8, !dbg !1743
  %3480 = load i64, i64* %29, align 8, !dbg !1743
  %3481 = getelementptr inbounds i8, i8* %3479, i64 %3480, !dbg !1743
  store i8 39, i8* %3481, align 1, !dbg !1743
  %3482 = load i32, i32* @x.19
  %3483 = load i32, i32* @y.20
  %3484 = sub i32 %3482, 1
  %3485 = mul i32 %3482, %3484
  %3486 = urem i32 %3485, 2
  %3487 = icmp eq i32 %3486, 0
  %3488 = icmp slt i32 %3483, 10
  %3489 = or i1 %3487, %3488
  br i1 %3489, label %originalBBpart2881, label %originalBB879alteredBB

originalBBpart2881:                               ; preds = %originalBB879
  br label %3490, !dbg !1743

3490:                                             ; preds = %originalBBpart2881, %originalBBpart2877
  %3491 = load i64, i64* %29, align 8, !dbg !1746
  %3492 = add i64 %3491, 1, !dbg !1746
  store i64 %3492, i64* %29, align 8, !dbg !1746
  br label %3493, !dbg !1746

3493:                                             ; preds = %3490
  store i8 1, i8* %36, align 1, !dbg !1733
  br label %3494, !dbg !1733

3494:                                             ; preds = %3493, %originalBBpart2841, %originalBBpart2837
  %3495 = load i32, i32* @x.19
  %3496 = load i32, i32* @y.20
  %3497 = sub i32 %3495, 1
  %3498 = mul i32 %3495, %3497
  %3499 = urem i32 %3498, 2
  %3500 = icmp eq i32 %3499, 0
  %3501 = icmp slt i32 %3496, 10
  %3502 = or i1 %3500, %3501
  br i1 %3502, label %originalBB883, label %originalBB883alteredBB

originalBB883:                                    ; preds = %3494, %originalBB883alteredBB
  %3503 = load i32, i32* @x.19
  %3504 = load i32, i32* @y.20
  %3505 = sub i32 %3503, 1
  %3506 = mul i32 %3503, %3505
  %3507 = urem i32 %3506, 2
  %3508 = icmp eq i32 %3507, 0
  %3509 = icmp slt i32 %3504, 10
  %3510 = or i1 %3508, %3509
  br i1 %3510, label %originalBBpart2885, label %originalBB883alteredBB

originalBBpart2885:                               ; preds = %originalBB883
  br label %3511, !dbg !1730

3511:                                             ; preds = %originalBBpart2885
  %3512 = load i32, i32* @x.19
  %3513 = load i32, i32* @y.20
  %3514 = sub i32 %3512, 1
  %3515 = mul i32 %3512, %3514
  %3516 = urem i32 %3515, 2
  %3517 = icmp eq i32 %3516, 0
  %3518 = icmp slt i32 %3513, 10
  %3519 = or i1 %3517, %3518
  br i1 %3519, label %originalBB887, label %originalBB887alteredBB

originalBB887:                                    ; preds = %3511, %originalBB887alteredBB
  %3520 = load i64, i64* %29, align 8, !dbg !1747
  %3521 = load i64, i64* %20, align 8, !dbg !1747
  %3522 = icmp ult i64 %3520, %3521, !dbg !1747
  %3523 = load i32, i32* @x.19
  %3524 = load i32, i32* @y.20
  %3525 = sub i32 %3523, 1
  %3526 = mul i32 %3523, %3525
  %3527 = urem i32 %3526, 2
  %3528 = icmp eq i32 %3527, 0
  %3529 = icmp slt i32 %3524, 10
  %3530 = or i1 %3528, %3529
  br i1 %3530, label %originalBBpart2889, label %originalBB887alteredBB

originalBBpart2889:                               ; preds = %originalBB887
  br i1 %3522, label %3531, label %3551, !dbg !1750

3531:                                             ; preds = %originalBBpart2889
  %3532 = load i32, i32* @x.19
  %3533 = load i32, i32* @y.20
  %3534 = sub i32 %3532, 1
  %3535 = mul i32 %3532, %3534
  %3536 = urem i32 %3535, 2
  %3537 = icmp eq i32 %3536, 0
  %3538 = icmp slt i32 %3533, 10
  %3539 = or i1 %3537, %3538
  br i1 %3539, label %originalBB891, label %originalBB891alteredBB

originalBB891:                                    ; preds = %3531, %originalBB891alteredBB
  %3540 = load i8*, i8** %19, align 8, !dbg !1747
  %3541 = load i64, i64* %29, align 8, !dbg !1747
  %3542 = getelementptr inbounds i8, i8* %3540, i64 %3541, !dbg !1747
  store i8 92, i8* %3542, align 1, !dbg !1747
  %3543 = load i32, i32* @x.19
  %3544 = load i32, i32* @y.20
  %3545 = sub i32 %3543, 1
  %3546 = mul i32 %3543, %3545
  %3547 = urem i32 %3546, 2
  %3548 = icmp eq i32 %3547, 0
  %3549 = icmp slt i32 %3544, 10
  %3550 = or i1 %3548, %3549
  br i1 %3550, label %originalBBpart2893, label %originalBB891alteredBB

originalBBpart2893:                               ; preds = %originalBB891
  br label %3551, !dbg !1747

3551:                                             ; preds = %originalBBpart2893, %originalBBpart2889
  %3552 = load i32, i32* @x.19
  %3553 = load i32, i32* @y.20
  %3554 = sub i32 %3552, 1
  %3555 = mul i32 %3552, %3554
  %3556 = urem i32 %3555, 2
  %3557 = icmp eq i32 %3556, 0
  %3558 = icmp slt i32 %3553, 10
  %3559 = or i1 %3557, %3558
  br i1 %3559, label %originalBB895, label %originalBB895alteredBB

originalBB895:                                    ; preds = %3551, %originalBB895alteredBB
  %3560 = load i64, i64* %29, align 8, !dbg !1750
  %3561 = add i64 %3560, 1, !dbg !1750
  store i64 %3561, i64* %29, align 8, !dbg !1750
  %3562 = load i32, i32* @x.19
  %3563 = load i32, i32* @y.20
  %3564 = sub i32 %3562, 1
  %3565 = mul i32 %3562, %3564
  %3566 = urem i32 %3565, 2
  %3567 = icmp eq i32 %3566, 0
  %3568 = icmp slt i32 %3563, 10
  %3569 = or i1 %3567, %3568
  br i1 %3569, label %originalBBpart2902, label %originalBB895alteredBB

originalBBpart2902:                               ; preds = %originalBB895
  br label %3570, !dbg !1750

3570:                                             ; preds = %originalBBpart2902
  %3571 = load i32, i32* @x.19
  %3572 = load i32, i32* @y.20
  %3573 = sub i32 %3571, 1
  %3574 = mul i32 %3571, %3573
  %3575 = urem i32 %3574, 2
  %3576 = icmp eq i32 %3575, 0
  %3577 = icmp slt i32 %3572, 10
  %3578 = or i1 %3576, %3577
  br i1 %3578, label %originalBB904, label %originalBB904alteredBB

originalBB904:                                    ; preds = %3570, %originalBB904alteredBB
  %3579 = load i32, i32* @x.19
  %3580 = load i32, i32* @y.20
  %3581 = sub i32 %3579, 1
  %3582 = mul i32 %3579, %3581
  %3583 = urem i32 %3582, 2
  %3584 = icmp eq i32 %3583, 0
  %3585 = icmp slt i32 %3580, 10
  %3586 = or i1 %3584, %3585
  br i1 %3586, label %originalBBpart2906, label %originalBB904alteredBB

originalBBpart2906:                               ; preds = %originalBB904
  br label %3587, !dbg !1730

3587:                                             ; preds = %originalBBpart2906
  br label %3588, !dbg !1751

3588:                                             ; preds = %3587
  %3589 = load i32, i32* @x.19
  %3590 = load i32, i32* @y.20
  %3591 = sub i32 %3589, 1
  %3592 = mul i32 %3589, %3591
  %3593 = urem i32 %3592, 2
  %3594 = icmp eq i32 %3593, 0
  %3595 = icmp slt i32 %3590, 10
  %3596 = or i1 %3594, %3595
  br i1 %3596, label %originalBB908, label %originalBB908alteredBB

originalBB908:                                    ; preds = %3588, %originalBB908alteredBB
  %3597 = load i64, i64* %29, align 8, !dbg !1752
  %3598 = load i64, i64* %20, align 8, !dbg !1752
  %3599 = icmp ult i64 %3597, %3598, !dbg !1752
  %3600 = load i32, i32* @x.19
  %3601 = load i32, i32* @y.20
  %3602 = sub i32 %3600, 1
  %3603 = mul i32 %3600, %3602
  %3604 = urem i32 %3603, 2
  %3605 = icmp eq i32 %3604, 0
  %3606 = icmp slt i32 %3601, 10
  %3607 = or i1 %3605, %3606
  br i1 %3607, label %originalBBpart2910, label %originalBB908alteredBB

originalBBpart2910:                               ; preds = %originalBB908
  br i1 %3599, label %3608, label %3633, !dbg !1755

3608:                                             ; preds = %originalBBpart2910
  %3609 = load i32, i32* @x.19
  %3610 = load i32, i32* @y.20
  %3611 = sub i32 %3609, 1
  %3612 = mul i32 %3609, %3611
  %3613 = urem i32 %3612, 2
  %3614 = icmp eq i32 %3613, 0
  %3615 = icmp slt i32 %3610, 10
  %3616 = or i1 %3614, %3615
  br i1 %3616, label %originalBB912, label %originalBB912alteredBB

originalBB912:                                    ; preds = %3608, %originalBB912alteredBB
  %3617 = load i8, i8* %39, align 1, !dbg !1752
  %3618 = zext i8 %3617 to i32, !dbg !1752
  %3619 = ashr i32 %3618, 6, !dbg !1752
  %3620 = add nsw i32 48, %3619, !dbg !1752
  %3621 = trunc i32 %3620 to i8, !dbg !1752
  %3622 = load i8*, i8** %19, align 8, !dbg !1752
  %3623 = load i64, i64* %29, align 8, !dbg !1752
  %3624 = getelementptr inbounds i8, i8* %3622, i64 %3623, !dbg !1752
  store i8 %3621, i8* %3624, align 1, !dbg !1752
  %3625 = load i32, i32* @x.19
  %3626 = load i32, i32* @y.20
  %3627 = sub i32 %3625, 1
  %3628 = mul i32 %3625, %3627
  %3629 = urem i32 %3628, 2
  %3630 = icmp eq i32 %3629, 0
  %3631 = icmp slt i32 %3626, 10
  %3632 = or i1 %3630, %3631
  br i1 %3632, label %originalBBpart2927, label %originalBB912alteredBB

originalBBpart2927:                               ; preds = %originalBB912
  br label %3633, !dbg !1752

3633:                                             ; preds = %originalBBpart2927, %originalBBpart2910
  %3634 = load i32, i32* @x.19
  %3635 = load i32, i32* @y.20
  %3636 = sub i32 %3634, 1
  %3637 = mul i32 %3634, %3636
  %3638 = urem i32 %3637, 2
  %3639 = icmp eq i32 %3638, 0
  %3640 = icmp slt i32 %3635, 10
  %3641 = or i1 %3639, %3640
  br i1 %3641, label %originalBB929, label %originalBB929alteredBB

originalBB929:                                    ; preds = %3633, %originalBB929alteredBB
  %3642 = load i64, i64* %29, align 8, !dbg !1755
  %3643 = add i64 %3642, 1, !dbg !1755
  store i64 %3643, i64* %29, align 8, !dbg !1755
  %3644 = load i32, i32* @x.19
  %3645 = load i32, i32* @y.20
  %3646 = sub i32 %3644, 1
  %3647 = mul i32 %3644, %3646
  %3648 = urem i32 %3647, 2
  %3649 = icmp eq i32 %3648, 0
  %3650 = icmp slt i32 %3645, 10
  %3651 = or i1 %3649, %3650
  br i1 %3651, label %originalBBpart2939, label %originalBB929alteredBB

originalBBpart2939:                               ; preds = %originalBB929
  br label %3652, !dbg !1755

3652:                                             ; preds = %originalBBpart2939
  br label %3653, !dbg !1756

3653:                                             ; preds = %3652
  %3654 = load i32, i32* @x.19
  %3655 = load i32, i32* @y.20
  %3656 = sub i32 %3654, 1
  %3657 = mul i32 %3654, %3656
  %3658 = urem i32 %3657, 2
  %3659 = icmp eq i32 %3658, 0
  %3660 = icmp slt i32 %3655, 10
  %3661 = or i1 %3659, %3660
  br i1 %3661, label %originalBB941, label %originalBB941alteredBB

originalBB941:                                    ; preds = %3653, %originalBB941alteredBB
  %3662 = load i64, i64* %29, align 8, !dbg !1757
  %3663 = load i64, i64* %20, align 8, !dbg !1757
  %3664 = icmp ult i64 %3662, %3663, !dbg !1757
  %3665 = load i32, i32* @x.19
  %3666 = load i32, i32* @y.20
  %3667 = sub i32 %3665, 1
  %3668 = mul i32 %3665, %3667
  %3669 = urem i32 %3668, 2
  %3670 = icmp eq i32 %3669, 0
  %3671 = icmp slt i32 %3666, 10
  %3672 = or i1 %3670, %3671
  br i1 %3672, label %originalBBpart2943, label %originalBB941alteredBB

originalBBpart2943:                               ; preds = %originalBB941
  br i1 %3664, label %3673, label %3699, !dbg !1760

3673:                                             ; preds = %originalBBpart2943
  %3674 = load i32, i32* @x.19
  %3675 = load i32, i32* @y.20
  %3676 = sub i32 %3674, 1
  %3677 = mul i32 %3674, %3676
  %3678 = urem i32 %3677, 2
  %3679 = icmp eq i32 %3678, 0
  %3680 = icmp slt i32 %3675, 10
  %3681 = or i1 %3679, %3680
  br i1 %3681, label %originalBB945, label %originalBB945alteredBB

originalBB945:                                    ; preds = %3673, %originalBB945alteredBB
  %3682 = load i8, i8* %39, align 1, !dbg !1757
  %3683 = zext i8 %3682 to i32, !dbg !1757
  %3684 = ashr i32 %3683, 3, !dbg !1757
  %3685 = and i32 %3684, 7, !dbg !1757
  %3686 = add nsw i32 48, %3685, !dbg !1757
  %3687 = trunc i32 %3686 to i8, !dbg !1757
  %3688 = load i8*, i8** %19, align 8, !dbg !1757
  %3689 = load i64, i64* %29, align 8, !dbg !1757
  %3690 = getelementptr inbounds i8, i8* %3688, i64 %3689, !dbg !1757
  store i8 %3687, i8* %3690, align 1, !dbg !1757
  %3691 = load i32, i32* @x.19
  %3692 = load i32, i32* @y.20
  %3693 = sub i32 %3691, 1
  %3694 = mul i32 %3691, %3693
  %3695 = urem i32 %3694, 2
  %3696 = icmp eq i32 %3695, 0
  %3697 = icmp slt i32 %3692, 10
  %3698 = or i1 %3696, %3697
  br i1 %3698, label %originalBBpart2954, label %originalBB945alteredBB

originalBBpart2954:                               ; preds = %originalBB945
  br label %3699, !dbg !1757

3699:                                             ; preds = %originalBBpart2954, %originalBBpart2943
  %3700 = load i32, i32* @x.19
  %3701 = load i32, i32* @y.20
  %3702 = sub i32 %3700, 1
  %3703 = mul i32 %3700, %3702
  %3704 = urem i32 %3703, 2
  %3705 = icmp eq i32 %3704, 0
  %3706 = icmp slt i32 %3701, 10
  %3707 = or i1 %3705, %3706
  br i1 %3707, label %originalBB956, label %originalBB956alteredBB

originalBB956:                                    ; preds = %3699, %originalBB956alteredBB
  %3708 = load i64, i64* %29, align 8, !dbg !1760
  %3709 = add i64 %3708, 1, !dbg !1760
  store i64 %3709, i64* %29, align 8, !dbg !1760
  %3710 = load i32, i32* @x.19
  %3711 = load i32, i32* @y.20
  %3712 = sub i32 %3710, 1
  %3713 = mul i32 %3710, %3712
  %3714 = urem i32 %3713, 2
  %3715 = icmp eq i32 %3714, 0
  %3716 = icmp slt i32 %3711, 10
  %3717 = or i1 %3715, %3716
  br i1 %3717, label %originalBBpart2960, label %originalBB956alteredBB

originalBBpart2960:                               ; preds = %originalBB956
  br label %3718, !dbg !1760

3718:                                             ; preds = %originalBBpart2960
  %3719 = load i32, i32* @x.19
  %3720 = load i32, i32* @y.20
  %3721 = sub i32 %3719, 1
  %3722 = mul i32 %3719, %3721
  %3723 = urem i32 %3722, 2
  %3724 = icmp eq i32 %3723, 0
  %3725 = icmp slt i32 %3720, 10
  %3726 = or i1 %3724, %3725
  br i1 %3726, label %originalBB962, label %originalBB962alteredBB

originalBB962:                                    ; preds = %3718, %originalBB962alteredBB
  %3727 = load i8, i8* %39, align 1, !dbg !1761
  %3728 = zext i8 %3727 to i32, !dbg !1761
  %3729 = and i32 %3728, 7, !dbg !1762
  %3730 = add nsw i32 48, %3729, !dbg !1763
  %3731 = trunc i32 %3730 to i8, !dbg !1764
  store i8 %3731, i8* %39, align 1, !dbg !1765
  %3732 = load i32, i32* @x.19
  %3733 = load i32, i32* @y.20
  %3734 = sub i32 %3732, 1
  %3735 = mul i32 %3732, %3734
  %3736 = urem i32 %3735, 2
  %3737 = icmp eq i32 %3736, 0
  %3738 = icmp slt i32 %3733, 10
  %3739 = or i1 %3737, %3738
  br i1 %3739, label %originalBBpart2972, label %originalBB962alteredBB

originalBBpart2972:                               ; preds = %originalBB962
  br label %3853, !dbg !1766

3740:                                             ; preds = %originalBBpart2825, %originalBBpart2821
  %3741 = load i32, i32* @x.19
  %3742 = load i32, i32* @y.20
  %3743 = sub i32 %3741, 1
  %3744 = mul i32 %3741, %3743
  %3745 = urem i32 %3744, 2
  %3746 = icmp eq i32 %3745, 0
  %3747 = icmp slt i32 %3742, 10
  %3748 = or i1 %3746, %3747
  br i1 %3748, label %originalBB974, label %originalBB974alteredBB

originalBB974:                                    ; preds = %3740, %originalBB974alteredBB
  %3749 = load i8, i8* %41, align 1, !dbg !1767
  %3750 = trunc i8 %3749 to i1, !dbg !1767
  %3751 = load i32, i32* @x.19
  %3752 = load i32, i32* @y.20
  %3753 = sub i32 %3751, 1
  %3754 = mul i32 %3751, %3753
  %3755 = urem i32 %3754, 2
  %3756 = icmp eq i32 %3755, 0
  %3757 = icmp slt i32 %3752, 10
  %3758 = or i1 %3756, %3757
  br i1 %3758, label %originalBBpart2976, label %originalBB974alteredBB

originalBBpart2976:                               ; preds = %originalBB974
  br i1 %3750, label %3759, label %3836, !dbg !1769

3759:                                             ; preds = %originalBBpart2976
  %3760 = load i32, i32* @x.19
  %3761 = load i32, i32* @y.20
  %3762 = sub i32 %3760, 1
  %3763 = mul i32 %3760, %3762
  %3764 = urem i32 %3763, 2
  %3765 = icmp eq i32 %3764, 0
  %3766 = icmp slt i32 %3761, 10
  %3767 = or i1 %3765, %3766
  br i1 %3767, label %originalBB978, label %originalBB978alteredBB

originalBB978:                                    ; preds = %3759, %originalBB978alteredBB
  %3768 = load i32, i32* @x.19
  %3769 = load i32, i32* @y.20
  %3770 = sub i32 %3768, 1
  %3771 = mul i32 %3768, %3770
  %3772 = urem i32 %3771, 2
  %3773 = icmp eq i32 %3772, 0
  %3774 = icmp slt i32 %3769, 10
  %3775 = or i1 %3773, %3774
  br i1 %3775, label %originalBBpart2980, label %originalBB978alteredBB

originalBBpart2980:                               ; preds = %originalBB978
  br label %3776, !dbg !1770

3776:                                             ; preds = %originalBBpart2980
  %3777 = load i32, i32* @x.19
  %3778 = load i32, i32* @y.20
  %3779 = sub i32 %3777, 1
  %3780 = mul i32 %3777, %3779
  %3781 = urem i32 %3780, 2
  %3782 = icmp eq i32 %3781, 0
  %3783 = icmp slt i32 %3778, 10
  %3784 = or i1 %3782, %3783
  br i1 %3784, label %originalBB982, label %originalBB982alteredBB

originalBB982:                                    ; preds = %3776, %originalBB982alteredBB
  %3785 = load i64, i64* %29, align 8, !dbg !1772
  %3786 = load i64, i64* %20, align 8, !dbg !1772
  %3787 = icmp ult i64 %3785, %3786, !dbg !1772
  %3788 = load i32, i32* @x.19
  %3789 = load i32, i32* @y.20
  %3790 = sub i32 %3788, 1
  %3791 = mul i32 %3788, %3790
  %3792 = urem i32 %3791, 2
  %3793 = icmp eq i32 %3792, 0
  %3794 = icmp slt i32 %3789, 10
  %3795 = or i1 %3793, %3794
  br i1 %3795, label %originalBBpart2984, label %originalBB982alteredBB

originalBBpart2984:                               ; preds = %originalBB982
  br i1 %3787, label %3796, label %3800, !dbg !1775

3796:                                             ; preds = %originalBBpart2984
  %3797 = load i8*, i8** %19, align 8, !dbg !1772
  %3798 = load i64, i64* %29, align 8, !dbg !1772
  %3799 = getelementptr inbounds i8, i8* %3797, i64 %3798, !dbg !1772
  store i8 92, i8* %3799, align 1, !dbg !1772
  br label %3800, !dbg !1772

3800:                                             ; preds = %3796, %originalBBpart2984
  %3801 = load i32, i32* @x.19
  %3802 = load i32, i32* @y.20
  %3803 = sub i32 %3801, 1
  %3804 = mul i32 %3801, %3803
  %3805 = urem i32 %3804, 2
  %3806 = icmp eq i32 %3805, 0
  %3807 = icmp slt i32 %3802, 10
  %3808 = or i1 %3806, %3807
  br i1 %3808, label %originalBB986, label %originalBB986alteredBB

originalBB986:                                    ; preds = %3800, %originalBB986alteredBB
  %3809 = load i64, i64* %29, align 8, !dbg !1775
  %3810 = add i64 %3809, 1, !dbg !1775
  store i64 %3810, i64* %29, align 8, !dbg !1775
  %3811 = load i32, i32* @x.19
  %3812 = load i32, i32* @y.20
  %3813 = sub i32 %3811, 1
  %3814 = mul i32 %3811, %3813
  %3815 = urem i32 %3814, 2
  %3816 = icmp eq i32 %3815, 0
  %3817 = icmp slt i32 %3812, 10
  %3818 = or i1 %3816, %3817
  br i1 %3818, label %originalBBpart2995, label %originalBB986alteredBB

originalBBpart2995:                               ; preds = %originalBB986
  br label %3819, !dbg !1775

3819:                                             ; preds = %originalBBpart2995
  %3820 = load i32, i32* @x.19
  %3821 = load i32, i32* @y.20
  %3822 = sub i32 %3820, 1
  %3823 = mul i32 %3820, %3822
  %3824 = urem i32 %3823, 2
  %3825 = icmp eq i32 %3824, 0
  %3826 = icmp slt i32 %3821, 10
  %3827 = or i1 %3825, %3826
  br i1 %3827, label %originalBB997, label %originalBB997alteredBB

originalBB997:                                    ; preds = %3819, %originalBB997alteredBB
  store i8 0, i8* %41, align 1, !dbg !1776
  %3828 = load i32, i32* @x.19
  %3829 = load i32, i32* @y.20
  %3830 = sub i32 %3828, 1
  %3831 = mul i32 %3828, %3830
  %3832 = urem i32 %3831, 2
  %3833 = icmp eq i32 %3832, 0
  %3834 = icmp slt i32 %3829, 10
  %3835 = or i1 %3833, %3834
  br i1 %3835, label %originalBBpart2999, label %originalBB997alteredBB

originalBBpart2999:                               ; preds = %originalBB997
  br label %3836, !dbg !1777

3836:                                             ; preds = %originalBBpart2999, %originalBBpart2976
  %3837 = load i32, i32* @x.19
  %3838 = load i32, i32* @y.20
  %3839 = sub i32 %3837, 1
  %3840 = mul i32 %3837, %3839
  %3841 = urem i32 %3840, 2
  %3842 = icmp eq i32 %3841, 0
  %3843 = icmp slt i32 %3838, 10
  %3844 = or i1 %3842, %3843
  br i1 %3844, label %originalBB1001, label %originalBB1001alteredBB

originalBB1001:                                   ; preds = %3836, %originalBB1001alteredBB
  %3845 = load i32, i32* @x.19
  %3846 = load i32, i32* @y.20
  %3847 = sub i32 %3845, 1
  %3848 = mul i32 %3845, %3847
  %3849 = urem i32 %3848, 2
  %3850 = icmp eq i32 %3849, 0
  %3851 = icmp slt i32 %3846, 10
  %3852 = or i1 %3850, %3851
  br i1 %3852, label %originalBBpart21003, label %originalBB1001alteredBB

originalBBpart21003:                              ; preds = %originalBB1001
  br label %3853

3853:                                             ; preds = %originalBBpart21003, %originalBBpart2972
  %3854 = load i64, i64* %50, align 8, !dbg !1778
  %3855 = load i64, i64* %28, align 8, !dbg !1780
  %3856 = add i64 %3855, 1, !dbg !1781
  %3857 = icmp ule i64 %3854, %3856, !dbg !1782
  br i1 %3857, label %3858, label %3875, !dbg !1783

3858:                                             ; preds = %3853
  %3859 = load i32, i32* @x.19
  %3860 = load i32, i32* @y.20
  %3861 = sub i32 %3859, 1
  %3862 = mul i32 %3859, %3861
  %3863 = urem i32 %3862, 2
  %3864 = icmp eq i32 %3863, 0
  %3865 = icmp slt i32 %3860, 10
  %3866 = or i1 %3864, %3865
  br i1 %3866, label %originalBB1005, label %originalBB1005alteredBB

originalBB1005:                                   ; preds = %3858, %originalBB1005alteredBB
  %3867 = load i32, i32* @x.19
  %3868 = load i32, i32* @y.20
  %3869 = sub i32 %3867, 1
  %3870 = mul i32 %3867, %3869
  %3871 = urem i32 %3870, 2
  %3872 = icmp eq i32 %3871, 0
  %3873 = icmp slt i32 %3868, 10
  %3874 = or i1 %3872, %3873
  br i1 %3874, label %originalBBpart21007, label %originalBB1005alteredBB

originalBBpart21007:                              ; preds = %originalBB1005
  br label %4167, !dbg !1784

3875:                                             ; preds = %3853
  %3876 = load i32, i32* @x.19
  %3877 = load i32, i32* @y.20
  %3878 = sub i32 %3876, 1
  %3879 = mul i32 %3876, %3878
  %3880 = urem i32 %3879, 2
  %3881 = icmp eq i32 %3880, 0
  %3882 = icmp slt i32 %3877, 10
  %3883 = or i1 %3881, %3882
  br i1 %3883, label %originalBB1009, label %originalBB1009alteredBB

originalBB1009:                                   ; preds = %3875, %originalBB1009alteredBB
  %3884 = load i32, i32* @x.19
  %3885 = load i32, i32* @y.20
  %3886 = sub i32 %3884, 1
  %3887 = mul i32 %3884, %3886
  %3888 = urem i32 %3887, 2
  %3889 = icmp eq i32 %3888, 0
  %3890 = icmp slt i32 %3885, 10
  %3891 = or i1 %3889, %3890
  br i1 %3891, label %originalBBpart21011, label %originalBB1009alteredBB

originalBBpart21011:                              ; preds = %originalBB1009
  br label %3892, !dbg !1785

3892:                                             ; preds = %originalBBpart21011
  %3893 = load i32, i32* @x.19
  %3894 = load i32, i32* @y.20
  %3895 = sub i32 %3893, 1
  %3896 = mul i32 %3893, %3895
  %3897 = urem i32 %3896, 2
  %3898 = icmp eq i32 %3897, 0
  %3899 = icmp slt i32 %3894, 10
  %3900 = or i1 %3898, %3899
  br i1 %3900, label %originalBB1013, label %originalBB1013alteredBB

originalBB1013:                                   ; preds = %3892, %originalBB1013alteredBB
  %3901 = load i8, i8* %36, align 1, !dbg !1786
  %3902 = trunc i8 %3901 to i1, !dbg !1786
  %3903 = load i32, i32* @x.19
  %3904 = load i32, i32* @y.20
  %3905 = sub i32 %3903, 1
  %3906 = mul i32 %3903, %3905
  %3907 = urem i32 %3906, 2
  %3908 = icmp eq i32 %3907, 0
  %3909 = icmp slt i32 %3904, 10
  %3910 = or i1 %3908, %3909
  br i1 %3910, label %originalBBpart21015, label %originalBB1013alteredBB

originalBBpart21015:                              ; preds = %originalBB1013
  br i1 %3902, label %3911, label %4067, !dbg !1786

3911:                                             ; preds = %originalBBpart21015
  %3912 = load i32, i32* @x.19
  %3913 = load i32, i32* @y.20
  %3914 = sub i32 %3912, 1
  %3915 = mul i32 %3912, %3914
  %3916 = urem i32 %3915, 2
  %3917 = icmp eq i32 %3916, 0
  %3918 = icmp slt i32 %3913, 10
  %3919 = or i1 %3917, %3918
  br i1 %3919, label %originalBB1017, label %originalBB1017alteredBB

originalBB1017:                                   ; preds = %3911, %originalBB1017alteredBB
  %3920 = load i8, i8* %42, align 1, !dbg !1786
  %3921 = trunc i8 %3920 to i1, !dbg !1786
  %3922 = load i32, i32* @x.19
  %3923 = load i32, i32* @y.20
  %3924 = sub i32 %3922, 1
  %3925 = mul i32 %3922, %3924
  %3926 = urem i32 %3925, 2
  %3927 = icmp eq i32 %3926, 0
  %3928 = icmp slt i32 %3923, 10
  %3929 = or i1 %3927, %3928
  br i1 %3929, label %originalBBpart21019, label %originalBB1017alteredBB

originalBBpart21019:                              ; preds = %originalBB1017
  br i1 %3921, label %4067, label %3930, !dbg !1789

3930:                                             ; preds = %originalBBpart21019
  %3931 = load i32, i32* @x.19
  %3932 = load i32, i32* @y.20
  %3933 = sub i32 %3931, 1
  %3934 = mul i32 %3931, %3933
  %3935 = urem i32 %3934, 2
  %3936 = icmp eq i32 %3935, 0
  %3937 = icmp slt i32 %3932, 10
  %3938 = or i1 %3936, %3937
  br i1 %3938, label %originalBB1021, label %originalBB1021alteredBB

originalBB1021:                                   ; preds = %3930, %originalBB1021alteredBB
  %3939 = load i32, i32* @x.19
  %3940 = load i32, i32* @y.20
  %3941 = sub i32 %3939, 1
  %3942 = mul i32 %3939, %3941
  %3943 = urem i32 %3942, 2
  %3944 = icmp eq i32 %3943, 0
  %3945 = icmp slt i32 %3940, 10
  %3946 = or i1 %3944, %3945
  br i1 %3946, label %originalBBpart21023, label %originalBB1021alteredBB

originalBBpart21023:                              ; preds = %originalBB1021
  br label %3947, !dbg !1790

3947:                                             ; preds = %originalBBpart21023
  %3948 = load i64, i64* %29, align 8, !dbg !1792
  %3949 = load i64, i64* %20, align 8, !dbg !1792
  %3950 = icmp ult i64 %3948, %3949, !dbg !1792
  br i1 %3950, label %3951, label %3971, !dbg !1795

3951:                                             ; preds = %3947
  %3952 = load i32, i32* @x.19
  %3953 = load i32, i32* @y.20
  %3954 = sub i32 %3952, 1
  %3955 = mul i32 %3952, %3954
  %3956 = urem i32 %3955, 2
  %3957 = icmp eq i32 %3956, 0
  %3958 = icmp slt i32 %3953, 10
  %3959 = or i1 %3957, %3958
  br i1 %3959, label %originalBB1025, label %originalBB1025alteredBB

originalBB1025:                                   ; preds = %3951, %originalBB1025alteredBB
  %3960 = load i8*, i8** %19, align 8, !dbg !1792
  %3961 = load i64, i64* %29, align 8, !dbg !1792
  %3962 = getelementptr inbounds i8, i8* %3960, i64 %3961, !dbg !1792
  store i8 39, i8* %3962, align 1, !dbg !1792
  %3963 = load i32, i32* @x.19
  %3964 = load i32, i32* @y.20
  %3965 = sub i32 %3963, 1
  %3966 = mul i32 %3963, %3965
  %3967 = urem i32 %3966, 2
  %3968 = icmp eq i32 %3967, 0
  %3969 = icmp slt i32 %3964, 10
  %3970 = or i1 %3968, %3969
  br i1 %3970, label %originalBBpart21027, label %originalBB1025alteredBB

originalBBpart21027:                              ; preds = %originalBB1025
  br label %3971, !dbg !1792

3971:                                             ; preds = %originalBBpart21027, %3947
  %3972 = load i32, i32* @x.19
  %3973 = load i32, i32* @y.20
  %3974 = sub i32 %3972, 1
  %3975 = mul i32 %3972, %3974
  %3976 = urem i32 %3975, 2
  %3977 = icmp eq i32 %3976, 0
  %3978 = icmp slt i32 %3973, 10
  %3979 = or i1 %3977, %3978
  br i1 %3979, label %originalBB1029, label %originalBB1029alteredBB

originalBB1029:                                   ; preds = %3971, %originalBB1029alteredBB
  %3980 = load i64, i64* %29, align 8, !dbg !1795
  %3981 = add i64 %3980, 1, !dbg !1795
  store i64 %3981, i64* %29, align 8, !dbg !1795
  %3982 = load i32, i32* @x.19
  %3983 = load i32, i32* @y.20
  %3984 = sub i32 %3982, 1
  %3985 = mul i32 %3982, %3984
  %3986 = urem i32 %3985, 2
  %3987 = icmp eq i32 %3986, 0
  %3988 = icmp slt i32 %3983, 10
  %3989 = or i1 %3987, %3988
  br i1 %3989, label %originalBBpart21039, label %originalBB1029alteredBB

originalBBpart21039:                              ; preds = %originalBB1029
  br label %3990, !dbg !1795

3990:                                             ; preds = %originalBBpart21039
  %3991 = load i32, i32* @x.19
  %3992 = load i32, i32* @y.20
  %3993 = sub i32 %3991, 1
  %3994 = mul i32 %3991, %3993
  %3995 = urem i32 %3994, 2
  %3996 = icmp eq i32 %3995, 0
  %3997 = icmp slt i32 %3992, 10
  %3998 = or i1 %3996, %3997
  br i1 %3998, label %originalBB1041, label %originalBB1041alteredBB

originalBB1041:                                   ; preds = %3990, %originalBB1041alteredBB
  %3999 = load i32, i32* @x.19
  %4000 = load i32, i32* @y.20
  %4001 = sub i32 %3999, 1
  %4002 = mul i32 %3999, %4001
  %4003 = urem i32 %4002, 2
  %4004 = icmp eq i32 %4003, 0
  %4005 = icmp slt i32 %4000, 10
  %4006 = or i1 %4004, %4005
  br i1 %4006, label %originalBBpart21043, label %originalBB1041alteredBB

originalBBpart21043:                              ; preds = %originalBB1041
  br label %4007, !dbg !1790

4007:                                             ; preds = %originalBBpart21043
  %4008 = load i32, i32* @x.19
  %4009 = load i32, i32* @y.20
  %4010 = sub i32 %4008, 1
  %4011 = mul i32 %4008, %4010
  %4012 = urem i32 %4011, 2
  %4013 = icmp eq i32 %4012, 0
  %4014 = icmp slt i32 %4009, 10
  %4015 = or i1 %4013, %4014
  br i1 %4015, label %originalBB1045, label %originalBB1045alteredBB

originalBB1045:                                   ; preds = %4007, %originalBB1045alteredBB
  %4016 = load i64, i64* %29, align 8, !dbg !1796
  %4017 = load i64, i64* %20, align 8, !dbg !1796
  %4018 = icmp ult i64 %4016, %4017, !dbg !1796
  %4019 = load i32, i32* @x.19
  %4020 = load i32, i32* @y.20
  %4021 = sub i32 %4019, 1
  %4022 = mul i32 %4019, %4021
  %4023 = urem i32 %4022, 2
  %4024 = icmp eq i32 %4023, 0
  %4025 = icmp slt i32 %4020, 10
  %4026 = or i1 %4024, %4025
  br i1 %4026, label %originalBBpart21047, label %originalBB1045alteredBB

originalBBpart21047:                              ; preds = %originalBB1045
  br i1 %4018, label %4027, label %4031, !dbg !1799

4027:                                             ; preds = %originalBBpart21047
  %4028 = load i8*, i8** %19, align 8, !dbg !1796
  %4029 = load i64, i64* %29, align 8, !dbg !1796
  %4030 = getelementptr inbounds i8, i8* %4028, i64 %4029, !dbg !1796
  store i8 39, i8* %4030, align 1, !dbg !1796
  br label %4031, !dbg !1796

4031:                                             ; preds = %4027, %originalBBpart21047
  %4032 = load i32, i32* @x.19
  %4033 = load i32, i32* @y.20
  %4034 = sub i32 %4032, 1
  %4035 = mul i32 %4032, %4034
  %4036 = urem i32 %4035, 2
  %4037 = icmp eq i32 %4036, 0
  %4038 = icmp slt i32 %4033, 10
  %4039 = or i1 %4037, %4038
  br i1 %4039, label %originalBB1049, label %originalBB1049alteredBB

originalBB1049:                                   ; preds = %4031, %originalBB1049alteredBB
  %4040 = load i64, i64* %29, align 8, !dbg !1799
  %4041 = add i64 %4040, 1, !dbg !1799
  store i64 %4041, i64* %29, align 8, !dbg !1799
  %4042 = load i32, i32* @x.19
  %4043 = load i32, i32* @y.20
  %4044 = sub i32 %4042, 1
  %4045 = mul i32 %4042, %4044
  %4046 = urem i32 %4045, 2
  %4047 = icmp eq i32 %4046, 0
  %4048 = icmp slt i32 %4043, 10
  %4049 = or i1 %4047, %4048
  br i1 %4049, label %originalBBpart21060, label %originalBB1049alteredBB

originalBBpart21060:                              ; preds = %originalBB1049
  br label %4050, !dbg !1799

4050:                                             ; preds = %originalBBpart21060
  %4051 = load i32, i32* @x.19
  %4052 = load i32, i32* @y.20
  %4053 = sub i32 %4051, 1
  %4054 = mul i32 %4051, %4053
  %4055 = urem i32 %4054, 2
  %4056 = icmp eq i32 %4055, 0
  %4057 = icmp slt i32 %4052, 10
  %4058 = or i1 %4056, %4057
  br i1 %4058, label %originalBB1062, label %originalBB1062alteredBB

originalBB1062:                                   ; preds = %4050, %originalBB1062alteredBB
  store i8 0, i8* %36, align 1, !dbg !1790
  %4059 = load i32, i32* @x.19
  %4060 = load i32, i32* @y.20
  %4061 = sub i32 %4059, 1
  %4062 = mul i32 %4059, %4061
  %4063 = urem i32 %4062, 2
  %4064 = icmp eq i32 %4063, 0
  %4065 = icmp slt i32 %4060, 10
  %4066 = or i1 %4064, %4065
  br i1 %4066, label %originalBBpart21064, label %originalBB1062alteredBB

originalBBpart21064:                              ; preds = %originalBB1062
  br label %4067, !dbg !1790

4067:                                             ; preds = %originalBBpart21064, %originalBBpart21019, %originalBBpart21015
  %4068 = load i32, i32* @x.19
  %4069 = load i32, i32* @y.20
  %4070 = sub i32 %4068, 1
  %4071 = mul i32 %4068, %4070
  %4072 = urem i32 %4071, 2
  %4073 = icmp eq i32 %4072, 0
  %4074 = icmp slt i32 %4069, 10
  %4075 = or i1 %4073, %4074
  br i1 %4075, label %originalBB1066, label %originalBB1066alteredBB

originalBB1066:                                   ; preds = %4067, %originalBB1066alteredBB
  %4076 = load i32, i32* @x.19
  %4077 = load i32, i32* @y.20
  %4078 = sub i32 %4076, 1
  %4079 = mul i32 %4076, %4078
  %4080 = urem i32 %4079, 2
  %4081 = icmp eq i32 %4080, 0
  %4082 = icmp slt i32 %4077, 10
  %4083 = or i1 %4081, %4082
  br i1 %4083, label %originalBBpart21068, label %originalBB1066alteredBB

originalBBpart21068:                              ; preds = %originalBB1066
  br label %4084, !dbg !1789

4084:                                             ; preds = %originalBBpart21068
  %4085 = load i32, i32* @x.19
  %4086 = load i32, i32* @y.20
  %4087 = sub i32 %4085, 1
  %4088 = mul i32 %4085, %4087
  %4089 = urem i32 %4088, 2
  %4090 = icmp eq i32 %4089, 0
  %4091 = icmp slt i32 %4086, 10
  %4092 = or i1 %4090, %4091
  br i1 %4092, label %originalBB1070, label %originalBB1070alteredBB

originalBB1070:                                   ; preds = %4084, %originalBB1070alteredBB
  %4093 = load i32, i32* @x.19
  %4094 = load i32, i32* @y.20
  %4095 = sub i32 %4093, 1
  %4096 = mul i32 %4093, %4095
  %4097 = urem i32 %4096, 2
  %4098 = icmp eq i32 %4097, 0
  %4099 = icmp slt i32 %4094, 10
  %4100 = or i1 %4098, %4099
  br i1 %4100, label %originalBBpart21072, label %originalBB1070alteredBB

originalBBpart21072:                              ; preds = %originalBB1070
  br label %4101, !dbg !1800

4101:                                             ; preds = %originalBBpart21072
  %4102 = load i32, i32* @x.19
  %4103 = load i32, i32* @y.20
  %4104 = sub i32 %4102, 1
  %4105 = mul i32 %4102, %4104
  %4106 = urem i32 %4105, 2
  %4107 = icmp eq i32 %4106, 0
  %4108 = icmp slt i32 %4103, 10
  %4109 = or i1 %4107, %4108
  br i1 %4109, label %originalBB1074, label %originalBB1074alteredBB

originalBB1074:                                   ; preds = %4101, %originalBB1074alteredBB
  %4110 = load i64, i64* %29, align 8, !dbg !1801
  %4111 = load i64, i64* %20, align 8, !dbg !1801
  %4112 = icmp ult i64 %4110, %4111, !dbg !1801
  %4113 = load i32, i32* @x.19
  %4114 = load i32, i32* @y.20
  %4115 = sub i32 %4113, 1
  %4116 = mul i32 %4113, %4115
  %4117 = urem i32 %4116, 2
  %4118 = icmp eq i32 %4117, 0
  %4119 = icmp slt i32 %4114, 10
  %4120 = or i1 %4118, %4119
  br i1 %4120, label %originalBBpart21076, label %originalBB1074alteredBB

originalBBpart21076:                              ; preds = %originalBB1074
  br i1 %4112, label %4121, label %4142, !dbg !1804

4121:                                             ; preds = %originalBBpart21076
  %4122 = load i32, i32* @x.19
  %4123 = load i32, i32* @y.20
  %4124 = sub i32 %4122, 1
  %4125 = mul i32 %4122, %4124
  %4126 = urem i32 %4125, 2
  %4127 = icmp eq i32 %4126, 0
  %4128 = icmp slt i32 %4123, 10
  %4129 = or i1 %4127, %4128
  br i1 %4129, label %originalBB1078, label %originalBB1078alteredBB

originalBB1078:                                   ; preds = %4121, %originalBB1078alteredBB
  %4130 = load i8, i8* %39, align 1, !dbg !1801
  %4131 = load i8*, i8** %19, align 8, !dbg !1801
  %4132 = load i64, i64* %29, align 8, !dbg !1801
  %4133 = getelementptr inbounds i8, i8* %4131, i64 %4132, !dbg !1801
  store i8 %4130, i8* %4133, align 1, !dbg !1801
  %4134 = load i32, i32* @x.19
  %4135 = load i32, i32* @y.20
  %4136 = sub i32 %4134, 1
  %4137 = mul i32 %4134, %4136
  %4138 = urem i32 %4137, 2
  %4139 = icmp eq i32 %4138, 0
  %4140 = icmp slt i32 %4135, 10
  %4141 = or i1 %4139, %4140
  br i1 %4141, label %originalBBpart21080, label %originalBB1078alteredBB

originalBBpart21080:                              ; preds = %originalBB1078
  br label %4142, !dbg !1801

4142:                                             ; preds = %originalBBpart21080, %originalBBpart21076
  %4143 = load i32, i32* @x.19
  %4144 = load i32, i32* @y.20
  %4145 = sub i32 %4143, 1
  %4146 = mul i32 %4143, %4145
  %4147 = urem i32 %4146, 2
  %4148 = icmp eq i32 %4147, 0
  %4149 = icmp slt i32 %4144, 10
  %4150 = or i1 %4148, %4149
  br i1 %4150, label %originalBB1082, label %originalBB1082alteredBB

originalBB1082:                                   ; preds = %4142, %originalBB1082alteredBB
  %4151 = load i64, i64* %29, align 8, !dbg !1804
  %4152 = add i64 %4151, 1, !dbg !1804
  store i64 %4152, i64* %29, align 8, !dbg !1804
  %4153 = load i32, i32* @x.19
  %4154 = load i32, i32* @y.20
  %4155 = sub i32 %4153, 1
  %4156 = mul i32 %4153, %4155
  %4157 = urem i32 %4156, 2
  %4158 = icmp eq i32 %4157, 0
  %4159 = icmp slt i32 %4154, 10
  %4160 = or i1 %4158, %4159
  br i1 %4160, label %originalBBpart21090, label %originalBB1082alteredBB

originalBBpart21090:                              ; preds = %originalBB1082
  br label %4161, !dbg !1804

4161:                                             ; preds = %originalBBpart21090
  %4162 = load i8*, i8** %21, align 8, !dbg !1805
  %4163 = load i64, i64* %28, align 8, !dbg !1806
  %4164 = add i64 %4163, 1, !dbg !1806
  store i64 %4164, i64* %28, align 8, !dbg !1806
  %4165 = getelementptr inbounds i8, i8* %4162, i64 %4164, !dbg !1805
  %4166 = load i8, i8* %4165, align 1, !dbg !1805
  store i8 %4166, i8* %39, align 1, !dbg !1807
  br label %3200, !dbg !1808, !llvm.loop !1809

4167:                                             ; preds = %originalBBpart21007
  %4168 = load i32, i32* @x.19
  %4169 = load i32, i32* @y.20
  %4170 = sub i32 %4168, 1
  %4171 = mul i32 %4168, %4170
  %4172 = urem i32 %4171, 2
  %4173 = icmp eq i32 %4172, 0
  %4174 = icmp slt i32 %4169, 10
  %4175 = or i1 %4173, %4174
  br i1 %4175, label %originalBB1092, label %originalBB1092alteredBB

originalBB1092:                                   ; preds = %4167, %originalBB1092alteredBB
  %4176 = load i32, i32* @x.19
  %4177 = load i32, i32* @y.20
  %4178 = sub i32 %4176, 1
  %4179 = mul i32 %4176, %4178
  %4180 = urem i32 %4179, 2
  %4181 = icmp eq i32 %4180, 0
  %4182 = icmp slt i32 %4177, 10
  %4183 = or i1 %4181, %4182
  br i1 %4183, label %originalBBpart21094, label %originalBB1092alteredBB

originalBBpart21094:                              ; preds = %originalBB1092
  br label %4614, !dbg !1812

4184:                                             ; preds = %3193, %originalBBpart2817
  %4185 = load i32, i32* @x.19
  %4186 = load i32, i32* @y.20
  %4187 = sub i32 %4185, 1
  %4188 = mul i32 %4185, %4187
  %4189 = urem i32 %4188, 2
  %4190 = icmp eq i32 %4189, 0
  %4191 = icmp slt i32 %4186, 10
  %4192 = or i1 %4190, %4191
  br i1 %4192, label %originalBB1096, label %originalBB1096alteredBB

originalBB1096:                                   ; preds = %4184, %originalBB1096alteredBB
  %4193 = load i32, i32* @x.19
  %4194 = load i32, i32* @y.20
  %4195 = sub i32 %4193, 1
  %4196 = mul i32 %4193, %4195
  %4197 = urem i32 %4196, 2
  %4198 = icmp eq i32 %4197, 0
  %4199 = icmp slt i32 %4194, 10
  %4200 = or i1 %4198, %4199
  br i1 %4200, label %originalBBpart21098, label %originalBB1096alteredBB

originalBBpart21098:                              ; preds = %originalBB1096
  br label %4201, !dbg !1813

4201:                                             ; preds = %originalBBpart21098, %originalBBpart2715, %originalBBpart2711, %originalBBpart2622, %originalBBpart2606, %originalBBpart2594, %originalBBpart2582, %originalBBpart2522, %originalBBpart2363
  %4202 = load i32, i32* @x.19
  %4203 = load i32, i32* @y.20
  %4204 = sub i32 %4202, 1
  %4205 = mul i32 %4202, %4204
  %4206 = urem i32 %4205, 2
  %4207 = icmp eq i32 %4206, 0
  %4208 = icmp slt i32 %4203, 10
  %4209 = or i1 %4207, %4208
  br i1 %4209, label %originalBB1100, label %originalBB1100alteredBB

originalBB1100:                                   ; preds = %4201, %originalBB1100alteredBB
  %4210 = load i8, i8* %33, align 1, !dbg !1814
  %4211 = trunc i8 %4210 to i1, !dbg !1814
  %4212 = load i32, i32* @x.19
  %4213 = load i32, i32* @y.20
  %4214 = sub i32 %4212, 1
  %4215 = mul i32 %4212, %4214
  %4216 = urem i32 %4215, 2
  %4217 = icmp eq i32 %4216, 0
  %4218 = icmp slt i32 %4213, 10
  %4219 = or i1 %4217, %4218
  br i1 %4219, label %originalBBpart21102, label %originalBB1100alteredBB

originalBBpart21102:                              ; preds = %originalBB1100
  br i1 %4211, label %4220, label %4239, !dbg !1816

4220:                                             ; preds = %originalBBpart21102
  %4221 = load i32, i32* @x.19
  %4222 = load i32, i32* @y.20
  %4223 = sub i32 %4221, 1
  %4224 = mul i32 %4221, %4223
  %4225 = urem i32 %4224, 2
  %4226 = icmp eq i32 %4225, 0
  %4227 = icmp slt i32 %4222, 10
  %4228 = or i1 %4226, %4227
  br i1 %4228, label %originalBB1104, label %originalBB1104alteredBB

originalBB1104:                                   ; preds = %4220, %originalBB1104alteredBB
  %4229 = load i32, i32* %23, align 4, !dbg !1817
  %4230 = icmp ne i32 %4229, 2, !dbg !1818
  %4231 = load i32, i32* @x.19
  %4232 = load i32, i32* @y.20
  %4233 = sub i32 %4231, 1
  %4234 = mul i32 %4231, %4233
  %4235 = urem i32 %4234, 2
  %4236 = icmp eq i32 %4235, 0
  %4237 = icmp slt i32 %4232, 10
  %4238 = or i1 %4236, %4237
  br i1 %4238, label %originalBBpart21106, label %originalBB1104alteredBB

originalBBpart21106:                              ; preds = %originalBB1104
  br i1 %4230, label %4258, label %4239, !dbg !1819

4239:                                             ; preds = %originalBBpart21106, %originalBBpart21102
  %4240 = load i32, i32* @x.19
  %4241 = load i32, i32* @y.20
  %4242 = sub i32 %4240, 1
  %4243 = mul i32 %4240, %4242
  %4244 = urem i32 %4243, 2
  %4245 = icmp eq i32 %4244, 0
  %4246 = icmp slt i32 %4241, 10
  %4247 = or i1 %4245, %4246
  br i1 %4247, label %originalBB1108, label %originalBB1108alteredBB

originalBB1108:                                   ; preds = %4239, %originalBB1108alteredBB
  %4248 = load i8, i8* %35, align 1, !dbg !1820
  %4249 = trunc i8 %4248 to i1, !dbg !1820
  %4250 = load i32, i32* @x.19
  %4251 = load i32, i32* @y.20
  %4252 = sub i32 %4250, 1
  %4253 = mul i32 %4250, %4252
  %4254 = urem i32 %4253, 2
  %4255 = icmp eq i32 %4254, 0
  %4256 = icmp slt i32 %4251, 10
  %4257 = or i1 %4255, %4256
  br i1 %4257, label %originalBBpart21110, label %originalBB1108alteredBB

originalBBpart21110:                              ; preds = %originalBB1108
  br i1 %4249, label %4258, label %4275, !dbg !1821

4258:                                             ; preds = %originalBBpart21110, %originalBBpart21106
  %4259 = load i32*, i32** %25, align 8, !dbg !1822
  %4260 = icmp ne i32* %4259, null, !dbg !1822
  br i1 %4260, label %4261, label %4275, !dbg !1823

4261:                                             ; preds = %4258
  %4262 = load i32*, i32** %25, align 8, !dbg !1824
  %4263 = load i8, i8* %39, align 1, !dbg !1825
  %4264 = zext i8 %4263 to i64, !dbg !1825
  %4265 = udiv i64 %4264, 32, !dbg !1826
  %4266 = getelementptr inbounds i32, i32* %4262, i64 %4265, !dbg !1824
  %4267 = load i32, i32* %4266, align 4, !dbg !1824
  %4268 = load i8, i8* %39, align 1, !dbg !1827
  %4269 = zext i8 %4268 to i64, !dbg !1827
  %4270 = urem i64 %4269, 32, !dbg !1828
  %4271 = trunc i64 %4270 to i32, !dbg !1829
  %4272 = lshr i32 %4267, %4271, !dbg !1829
  %4273 = and i32 %4272, 1, !dbg !1830
  %4274 = icmp ne i32 %4273, 0, !dbg !1830
  br i1 %4274, label %4311, label %4275, !dbg !1831

4275:                                             ; preds = %4261, %4258, %originalBBpart21110
  %4276 = load i32, i32* @x.19
  %4277 = load i32, i32* @y.20
  %4278 = sub i32 %4276, 1
  %4279 = mul i32 %4276, %4278
  %4280 = urem i32 %4279, 2
  %4281 = icmp eq i32 %4280, 0
  %4282 = icmp slt i32 %4277, 10
  %4283 = or i1 %4281, %4282
  br i1 %4283, label %originalBB1112, label %originalBB1112alteredBB

originalBB1112:                                   ; preds = %4275, %originalBB1112alteredBB
  %4284 = load i8, i8* %41, align 1, !dbg !1832
  %4285 = trunc i8 %4284 to i1, !dbg !1832
  %4286 = load i32, i32* @x.19
  %4287 = load i32, i32* @y.20
  %4288 = sub i32 %4286, 1
  %4289 = mul i32 %4286, %4288
  %4290 = urem i32 %4289, 2
  %4291 = icmp eq i32 %4290, 0
  %4292 = icmp slt i32 %4287, 10
  %4293 = or i1 %4291, %4292
  br i1 %4293, label %originalBBpart21114, label %originalBB1112alteredBB

originalBBpart21114:                              ; preds = %originalBB1112
  br i1 %4285, label %4311, label %4294, !dbg !1833

4294:                                             ; preds = %originalBBpart21114
  %4295 = load i32, i32* @x.19
  %4296 = load i32, i32* @y.20
  %4297 = sub i32 %4295, 1
  %4298 = mul i32 %4295, %4297
  %4299 = urem i32 %4298, 2
  %4300 = icmp eq i32 %4299, 0
  %4301 = icmp slt i32 %4296, 10
  %4302 = or i1 %4300, %4301
  br i1 %4302, label %originalBB1116, label %originalBB1116alteredBB

originalBB1116:                                   ; preds = %4294, %originalBB1116alteredBB
  %4303 = load i32, i32* @x.19
  %4304 = load i32, i32* @y.20
  %4305 = sub i32 %4303, 1
  %4306 = mul i32 %4303, %4305
  %4307 = urem i32 %4306, 2
  %4308 = icmp eq i32 %4307, 0
  %4309 = icmp slt i32 %4304, 10
  %4310 = or i1 %4308, %4309
  br i1 %4310, label %originalBBpart21118, label %originalBB1116alteredBB

originalBBpart21118:                              ; preds = %originalBB1116
  br label %4614, !dbg !1834

4311:                                             ; preds = %originalBBpart21114, %4261
  br label %4312, !dbg !1832

4312:                                             ; preds = %4311, %2203
  call void @llvm.dbg.label(metadata !1835), !dbg !1836
  br label %4313, !dbg !1837

4313:                                             ; preds = %4312
  %4314 = load i32, i32* @x.19
  %4315 = load i32, i32* @y.20
  %4316 = sub i32 %4314, 1
  %4317 = mul i32 %4314, %4316
  %4318 = urem i32 %4317, 2
  %4319 = icmp eq i32 %4318, 0
  %4320 = icmp slt i32 %4315, 10
  %4321 = or i1 %4319, %4320
  br i1 %4321, label %originalBB1120, label %originalBB1120alteredBB

originalBB1120:                                   ; preds = %4313, %originalBB1120alteredBB
  %4322 = load i8, i8* %35, align 1, !dbg !1838
  %4323 = trunc i8 %4322 to i1, !dbg !1838
  %4324 = load i32, i32* @x.19
  %4325 = load i32, i32* @y.20
  %4326 = sub i32 %4324, 1
  %4327 = mul i32 %4324, %4326
  %4328 = urem i32 %4327, 2
  %4329 = icmp eq i32 %4328, 0
  %4330 = icmp slt i32 %4325, 10
  %4331 = or i1 %4329, %4330
  br i1 %4331, label %originalBBpart21122, label %originalBB1120alteredBB

originalBBpart21122:                              ; preds = %originalBB1120
  br i1 %4323, label %4332, label %4349, !dbg !1841

4332:                                             ; preds = %originalBBpart21122
  %4333 = load i32, i32* @x.19
  %4334 = load i32, i32* @y.20
  %4335 = sub i32 %4333, 1
  %4336 = mul i32 %4333, %4335
  %4337 = urem i32 %4336, 2
  %4338 = icmp eq i32 %4337, 0
  %4339 = icmp slt i32 %4334, 10
  %4340 = or i1 %4338, %4339
  br i1 %4340, label %originalBB1124, label %originalBB1124alteredBB

originalBB1124:                                   ; preds = %4332, %originalBB1124alteredBB
  %4341 = load i32, i32* @x.19
  %4342 = load i32, i32* @y.20
  %4343 = sub i32 %4341, 1
  %4344 = mul i32 %4341, %4343
  %4345 = urem i32 %4344, 2
  %4346 = icmp eq i32 %4345, 0
  %4347 = icmp slt i32 %4342, 10
  %4348 = or i1 %4346, %4347
  br i1 %4348, label %originalBBpart21126, label %originalBB1124alteredBB

originalBBpart21126:                              ; preds = %originalBB1124
  br label %5326, !dbg !1838

4349:                                             ; preds = %originalBBpart21122
  store i8 1, i8* %42, align 1, !dbg !1841
  %4350 = load i32, i32* %23, align 4, !dbg !1842
  %4351 = icmp eq i32 %4350, 2, !dbg !1842
  br i1 %4351, label %4352, label %4520, !dbg !1842

4352:                                             ; preds = %4349
  %4353 = load i32, i32* @x.19
  %4354 = load i32, i32* @y.20
  %4355 = sub i32 %4353, 1
  %4356 = mul i32 %4353, %4355
  %4357 = urem i32 %4356, 2
  %4358 = icmp eq i32 %4357, 0
  %4359 = icmp slt i32 %4354, 10
  %4360 = or i1 %4358, %4359
  br i1 %4360, label %originalBB1128, label %originalBB1128alteredBB

originalBB1128:                                   ; preds = %4352, %originalBB1128alteredBB
  %4361 = load i8, i8* %36, align 1, !dbg !1842
  %4362 = trunc i8 %4361 to i1, !dbg !1842
  %4363 = load i32, i32* @x.19
  %4364 = load i32, i32* @y.20
  %4365 = sub i32 %4363, 1
  %4366 = mul i32 %4363, %4365
  %4367 = urem i32 %4366, 2
  %4368 = icmp eq i32 %4367, 0
  %4369 = icmp slt i32 %4364, 10
  %4370 = or i1 %4368, %4369
  br i1 %4370, label %originalBBpart21130, label %originalBB1128alteredBB

originalBBpart21130:                              ; preds = %originalBB1128
  br i1 %4362, label %4520, label %4371, !dbg !1841

4371:                                             ; preds = %originalBBpart21130
  %4372 = load i32, i32* @x.19
  %4373 = load i32, i32* @y.20
  %4374 = sub i32 %4372, 1
  %4375 = mul i32 %4372, %4374
  %4376 = urem i32 %4375, 2
  %4377 = icmp eq i32 %4376, 0
  %4378 = icmp slt i32 %4373, 10
  %4379 = or i1 %4377, %4378
  br i1 %4379, label %originalBB1132, label %originalBB1132alteredBB

originalBB1132:                                   ; preds = %4371, %originalBB1132alteredBB
  %4380 = load i32, i32* @x.19
  %4381 = load i32, i32* @y.20
  %4382 = sub i32 %4380, 1
  %4383 = mul i32 %4380, %4382
  %4384 = urem i32 %4383, 2
  %4385 = icmp eq i32 %4384, 0
  %4386 = icmp slt i32 %4381, 10
  %4387 = or i1 %4385, %4386
  br i1 %4387, label %originalBBpart21134, label %originalBB1132alteredBB

originalBBpart21134:                              ; preds = %originalBB1132
  br label %4388, !dbg !1844

4388:                                             ; preds = %originalBBpart21134
  %4389 = load i32, i32* @x.19
  %4390 = load i32, i32* @y.20
  %4391 = sub i32 %4389, 1
  %4392 = mul i32 %4389, %4391
  %4393 = urem i32 %4392, 2
  %4394 = icmp eq i32 %4393, 0
  %4395 = icmp slt i32 %4390, 10
  %4396 = or i1 %4394, %4395
  br i1 %4396, label %originalBB1136, label %originalBB1136alteredBB

originalBB1136:                                   ; preds = %4388, %originalBB1136alteredBB
  %4397 = load i64, i64* %29, align 8, !dbg !1846
  %4398 = load i64, i64* %20, align 8, !dbg !1846
  %4399 = icmp ult i64 %4397, %4398, !dbg !1846
  %4400 = load i32, i32* @x.19
  %4401 = load i32, i32* @y.20
  %4402 = sub i32 %4400, 1
  %4403 = mul i32 %4400, %4402
  %4404 = urem i32 %4403, 2
  %4405 = icmp eq i32 %4404, 0
  %4406 = icmp slt i32 %4401, 10
  %4407 = or i1 %4405, %4406
  br i1 %4407, label %originalBBpart21138, label %originalBB1136alteredBB

originalBBpart21138:                              ; preds = %originalBB1136
  br i1 %4399, label %4408, label %4412, !dbg !1849

4408:                                             ; preds = %originalBBpart21138
  %4409 = load i8*, i8** %19, align 8, !dbg !1846
  %4410 = load i64, i64* %29, align 8, !dbg !1846
  %4411 = getelementptr inbounds i8, i8* %4409, i64 %4410, !dbg !1846
  store i8 39, i8* %4411, align 1, !dbg !1846
  br label %4412, !dbg !1846

4412:                                             ; preds = %4408, %originalBBpart21138
  %4413 = load i64, i64* %29, align 8, !dbg !1849
  %4414 = add i64 %4413, 1, !dbg !1849
  store i64 %4414, i64* %29, align 8, !dbg !1849
  br label %4415, !dbg !1849

4415:                                             ; preds = %4412
  br label %4416, !dbg !1844

4416:                                             ; preds = %4415
  %4417 = load i64, i64* %29, align 8, !dbg !1850
  %4418 = load i64, i64* %20, align 8, !dbg !1850
  %4419 = icmp ult i64 %4417, %4418, !dbg !1850
  br i1 %4419, label %4420, label %4440, !dbg !1853

4420:                                             ; preds = %4416
  %4421 = load i32, i32* @x.19
  %4422 = load i32, i32* @y.20
  %4423 = sub i32 %4421, 1
  %4424 = mul i32 %4421, %4423
  %4425 = urem i32 %4424, 2
  %4426 = icmp eq i32 %4425, 0
  %4427 = icmp slt i32 %4422, 10
  %4428 = or i1 %4426, %4427
  br i1 %4428, label %originalBB1140, label %originalBB1140alteredBB

originalBB1140:                                   ; preds = %4420, %originalBB1140alteredBB
  %4429 = load i8*, i8** %19, align 8, !dbg !1850
  %4430 = load i64, i64* %29, align 8, !dbg !1850
  %4431 = getelementptr inbounds i8, i8* %4429, i64 %4430, !dbg !1850
  store i8 36, i8* %4431, align 1, !dbg !1850
  %4432 = load i32, i32* @x.19
  %4433 = load i32, i32* @y.20
  %4434 = sub i32 %4432, 1
  %4435 = mul i32 %4432, %4434
  %4436 = urem i32 %4435, 2
  %4437 = icmp eq i32 %4436, 0
  %4438 = icmp slt i32 %4433, 10
  %4439 = or i1 %4437, %4438
  br i1 %4439, label %originalBBpart21142, label %originalBB1140alteredBB

originalBBpart21142:                              ; preds = %originalBB1140
  br label %4440, !dbg !1850

4440:                                             ; preds = %originalBBpart21142, %4416
  %4441 = load i32, i32* @x.19
  %4442 = load i32, i32* @y.20
  %4443 = sub i32 %4441, 1
  %4444 = mul i32 %4441, %4443
  %4445 = urem i32 %4444, 2
  %4446 = icmp eq i32 %4445, 0
  %4447 = icmp slt i32 %4442, 10
  %4448 = or i1 %4446, %4447
  br i1 %4448, label %originalBB1144, label %originalBB1144alteredBB

originalBB1144:                                   ; preds = %4440, %originalBB1144alteredBB
  %4449 = load i64, i64* %29, align 8, !dbg !1853
  %4450 = add i64 %4449, 1, !dbg !1853
  store i64 %4450, i64* %29, align 8, !dbg !1853
  %4451 = load i32, i32* @x.19
  %4452 = load i32, i32* @y.20
  %4453 = sub i32 %4451, 1
  %4454 = mul i32 %4451, %4453
  %4455 = urem i32 %4454, 2
  %4456 = icmp eq i32 %4455, 0
  %4457 = icmp slt i32 %4452, 10
  %4458 = or i1 %4456, %4457
  br i1 %4458, label %originalBBpart21149, label %originalBB1144alteredBB

originalBBpart21149:                              ; preds = %originalBB1144
  br label %4459, !dbg !1853

4459:                                             ; preds = %originalBBpart21149
  %4460 = load i32, i32* @x.19
  %4461 = load i32, i32* @y.20
  %4462 = sub i32 %4460, 1
  %4463 = mul i32 %4460, %4462
  %4464 = urem i32 %4463, 2
  %4465 = icmp eq i32 %4464, 0
  %4466 = icmp slt i32 %4461, 10
  %4467 = or i1 %4465, %4466
  br i1 %4467, label %originalBB1151, label %originalBB1151alteredBB

originalBB1151:                                   ; preds = %4459, %originalBB1151alteredBB
  %4468 = load i32, i32* @x.19
  %4469 = load i32, i32* @y.20
  %4470 = sub i32 %4468, 1
  %4471 = mul i32 %4468, %4470
  %4472 = urem i32 %4471, 2
  %4473 = icmp eq i32 %4472, 0
  %4474 = icmp slt i32 %4469, 10
  %4475 = or i1 %4473, %4474
  br i1 %4475, label %originalBBpart21153, label %originalBB1151alteredBB

originalBBpart21153:                              ; preds = %originalBB1151
  br label %4476, !dbg !1844

4476:                                             ; preds = %originalBBpart21153
  %4477 = load i32, i32* @x.19
  %4478 = load i32, i32* @y.20
  %4479 = sub i32 %4477, 1
  %4480 = mul i32 %4477, %4479
  %4481 = urem i32 %4480, 2
  %4482 = icmp eq i32 %4481, 0
  %4483 = icmp slt i32 %4478, 10
  %4484 = or i1 %4482, %4483
  br i1 %4484, label %originalBB1155, label %originalBB1155alteredBB

originalBB1155:                                   ; preds = %4476, %originalBB1155alteredBB
  %4485 = load i64, i64* %29, align 8, !dbg !1854
  %4486 = load i64, i64* %20, align 8, !dbg !1854
  %4487 = icmp ult i64 %4485, %4486, !dbg !1854
  %4488 = load i32, i32* @x.19
  %4489 = load i32, i32* @y.20
  %4490 = sub i32 %4488, 1
  %4491 = mul i32 %4488, %4490
  %4492 = urem i32 %4491, 2
  %4493 = icmp eq i32 %4492, 0
  %4494 = icmp slt i32 %4489, 10
  %4495 = or i1 %4493, %4494
  br i1 %4495, label %originalBBpart21157, label %originalBB1155alteredBB

originalBBpart21157:                              ; preds = %originalBB1155
  br i1 %4487, label %4496, label %4516, !dbg !1857

4496:                                             ; preds = %originalBBpart21157
  %4497 = load i32, i32* @x.19
  %4498 = load i32, i32* @y.20
  %4499 = sub i32 %4497, 1
  %4500 = mul i32 %4497, %4499
  %4501 = urem i32 %4500, 2
  %4502 = icmp eq i32 %4501, 0
  %4503 = icmp slt i32 %4498, 10
  %4504 = or i1 %4502, %4503
  br i1 %4504, label %originalBB1159, label %originalBB1159alteredBB

originalBB1159:                                   ; preds = %4496, %originalBB1159alteredBB
  %4505 = load i8*, i8** %19, align 8, !dbg !1854
  %4506 = load i64, i64* %29, align 8, !dbg !1854
  %4507 = getelementptr inbounds i8, i8* %4505, i64 %4506, !dbg !1854
  store i8 39, i8* %4507, align 1, !dbg !1854
  %4508 = load i32, i32* @x.19
  %4509 = load i32, i32* @y.20
  %4510 = sub i32 %4508, 1
  %4511 = mul i32 %4508, %4510
  %4512 = urem i32 %4511, 2
  %4513 = icmp eq i32 %4512, 0
  %4514 = icmp slt i32 %4509, 10
  %4515 = or i1 %4513, %4514
  br i1 %4515, label %originalBBpart21161, label %originalBB1159alteredBB

originalBBpart21161:                              ; preds = %originalBB1159
  br label %4516, !dbg !1854

4516:                                             ; preds = %originalBBpart21161, %originalBBpart21157
  %4517 = load i64, i64* %29, align 8, !dbg !1857
  %4518 = add i64 %4517, 1, !dbg !1857
  store i64 %4518, i64* %29, align 8, !dbg !1857
  br label %4519, !dbg !1857

4519:                                             ; preds = %4516
  store i8 1, i8* %36, align 1, !dbg !1844
  br label %4520, !dbg !1844

4520:                                             ; preds = %4519, %originalBBpart21130, %4349
  %4521 = load i32, i32* @x.19
  %4522 = load i32, i32* @y.20
  %4523 = sub i32 %4521, 1
  %4524 = mul i32 %4521, %4523
  %4525 = urem i32 %4524, 2
  %4526 = icmp eq i32 %4525, 0
  %4527 = icmp slt i32 %4522, 10
  %4528 = or i1 %4526, %4527
  br i1 %4528, label %originalBB1163, label %originalBB1163alteredBB

originalBB1163:                                   ; preds = %4520, %originalBB1163alteredBB
  %4529 = load i32, i32* @x.19
  %4530 = load i32, i32* @y.20
  %4531 = sub i32 %4529, 1
  %4532 = mul i32 %4529, %4531
  %4533 = urem i32 %4532, 2
  %4534 = icmp eq i32 %4533, 0
  %4535 = icmp slt i32 %4530, 10
  %4536 = or i1 %4534, %4535
  br i1 %4536, label %originalBBpart21165, label %originalBB1163alteredBB

originalBBpart21165:                              ; preds = %originalBB1163
  br label %4537, !dbg !1841

4537:                                             ; preds = %originalBBpart21165
  %4538 = load i32, i32* @x.19
  %4539 = load i32, i32* @y.20
  %4540 = sub i32 %4538, 1
  %4541 = mul i32 %4538, %4540
  %4542 = urem i32 %4541, 2
  %4543 = icmp eq i32 %4542, 0
  %4544 = icmp slt i32 %4539, 10
  %4545 = or i1 %4543, %4544
  br i1 %4545, label %originalBB1167, label %originalBB1167alteredBB

originalBB1167:                                   ; preds = %4537, %originalBB1167alteredBB
  %4546 = load i64, i64* %29, align 8, !dbg !1858
  %4547 = load i64, i64* %20, align 8, !dbg !1858
  %4548 = icmp ult i64 %4546, %4547, !dbg !1858
  %4549 = load i32, i32* @x.19
  %4550 = load i32, i32* @y.20
  %4551 = sub i32 %4549, 1
  %4552 = mul i32 %4549, %4551
  %4553 = urem i32 %4552, 2
  %4554 = icmp eq i32 %4553, 0
  %4555 = icmp slt i32 %4550, 10
  %4556 = or i1 %4554, %4555
  br i1 %4556, label %originalBBpart21169, label %originalBB1167alteredBB

originalBBpart21169:                              ; preds = %originalBB1167
  br i1 %4548, label %4557, label %4577, !dbg !1861

4557:                                             ; preds = %originalBBpart21169
  %4558 = load i32, i32* @x.19
  %4559 = load i32, i32* @y.20
  %4560 = sub i32 %4558, 1
  %4561 = mul i32 %4558, %4560
  %4562 = urem i32 %4561, 2
  %4563 = icmp eq i32 %4562, 0
  %4564 = icmp slt i32 %4559, 10
  %4565 = or i1 %4563, %4564
  br i1 %4565, label %originalBB1171, label %originalBB1171alteredBB

originalBB1171:                                   ; preds = %4557, %originalBB1171alteredBB
  %4566 = load i8*, i8** %19, align 8, !dbg !1858
  %4567 = load i64, i64* %29, align 8, !dbg !1858
  %4568 = getelementptr inbounds i8, i8* %4566, i64 %4567, !dbg !1858
  store i8 92, i8* %4568, align 1, !dbg !1858
  %4569 = load i32, i32* @x.19
  %4570 = load i32, i32* @y.20
  %4571 = sub i32 %4569, 1
  %4572 = mul i32 %4569, %4571
  %4573 = urem i32 %4572, 2
  %4574 = icmp eq i32 %4573, 0
  %4575 = icmp slt i32 %4570, 10
  %4576 = or i1 %4574, %4575
  br i1 %4576, label %originalBBpart21173, label %originalBB1171alteredBB

originalBBpart21173:                              ; preds = %originalBB1171
  br label %4577, !dbg !1858

4577:                                             ; preds = %originalBBpart21173, %originalBBpart21169
  %4578 = load i64, i64* %29, align 8, !dbg !1861
  %4579 = add i64 %4578, 1, !dbg !1861
  store i64 %4579, i64* %29, align 8, !dbg !1861
  br label %4580, !dbg !1861

4580:                                             ; preds = %4577
  %4581 = load i32, i32* @x.19
  %4582 = load i32, i32* @y.20
  %4583 = sub i32 %4581, 1
  %4584 = mul i32 %4581, %4583
  %4585 = urem i32 %4584, 2
  %4586 = icmp eq i32 %4585, 0
  %4587 = icmp slt i32 %4582, 10
  %4588 = or i1 %4586, %4587
  br i1 %4588, label %originalBB1175, label %originalBB1175alteredBB

originalBB1175:                                   ; preds = %4580, %originalBB1175alteredBB
  %4589 = load i32, i32* @x.19
  %4590 = load i32, i32* @y.20
  %4591 = sub i32 %4589, 1
  %4592 = mul i32 %4589, %4591
  %4593 = urem i32 %4592, 2
  %4594 = icmp eq i32 %4593, 0
  %4595 = icmp slt i32 %4590, 10
  %4596 = or i1 %4594, %4595
  br i1 %4596, label %originalBBpart21177, label %originalBB1175alteredBB

originalBBpart21177:                              ; preds = %originalBB1175
  br label %4597, !dbg !1841

4597:                                             ; preds = %originalBBpart21177
  %4598 = load i32, i32* @x.19
  %4599 = load i32, i32* @y.20
  %4600 = sub i32 %4598, 1
  %4601 = mul i32 %4598, %4600
  %4602 = urem i32 %4601, 2
  %4603 = icmp eq i32 %4602, 0
  %4604 = icmp slt i32 %4599, 10
  %4605 = or i1 %4603, %4604
  br i1 %4605, label %originalBB1179, label %originalBB1179alteredBB

originalBB1179:                                   ; preds = %4597, %originalBB1179alteredBB
  %4606 = load i32, i32* @x.19
  %4607 = load i32, i32* @y.20
  %4608 = sub i32 %4606, 1
  %4609 = mul i32 %4606, %4608
  %4610 = urem i32 %4609, 2
  %4611 = icmp eq i32 %4610, 0
  %4612 = icmp slt i32 %4607, 10
  %4613 = or i1 %4611, %4612
  br i1 %4613, label %originalBBpart21181, label %originalBB1179alteredBB

originalBBpart21181:                              ; preds = %originalBB1179
  br label %4614, !dbg !1841

4614:                                             ; preds = %originalBBpart21181, %originalBBpart21118, %originalBBpart21094, %originalBBpart2558, %2052
  call void @llvm.dbg.label(metadata !1862), !dbg !1863
  %4615 = load i32, i32* @x.19
  %4616 = load i32, i32* @y.20
  %4617 = sub i32 %4615, 1
  %4618 = mul i32 %4615, %4617
  %4619 = urem i32 %4618, 2
  %4620 = icmp eq i32 %4619, 0
  %4621 = icmp slt i32 %4616, 10
  %4622 = or i1 %4620, %4621
  br i1 %4622, label %originalBB1183, label %originalBB1183alteredBB

originalBB1183:                                   ; preds = %4614, %originalBB1183alteredBB
  %4623 = load i32, i32* @x.19
  %4624 = load i32, i32* @y.20
  %4625 = sub i32 %4623, 1
  %4626 = mul i32 %4623, %4625
  %4627 = urem i32 %4626, 2
  %4628 = icmp eq i32 %4627, 0
  %4629 = icmp slt i32 %4624, 10
  %4630 = or i1 %4628, %4629
  br i1 %4630, label %originalBBpart21185, label %originalBB1183alteredBB

originalBBpart21185:                              ; preds = %originalBB1183
  br label %4631, !dbg !1864

4631:                                             ; preds = %originalBBpart21185
  %4632 = load i32, i32* @x.19
  %4633 = load i32, i32* @y.20
  %4634 = sub i32 %4632, 1
  %4635 = mul i32 %4632, %4634
  %4636 = urem i32 %4635, 2
  %4637 = icmp eq i32 %4636, 0
  %4638 = icmp slt i32 %4633, 10
  %4639 = or i1 %4637, %4638
  br i1 %4639, label %originalBB1187, label %originalBB1187alteredBB

originalBB1187:                                   ; preds = %4631, %originalBB1187alteredBB
  %4640 = load i8, i8* %36, align 1, !dbg !1865
  %4641 = trunc i8 %4640 to i1, !dbg !1865
  %4642 = load i32, i32* @x.19
  %4643 = load i32, i32* @y.20
  %4644 = sub i32 %4642, 1
  %4645 = mul i32 %4642, %4644
  %4646 = urem i32 %4645, 2
  %4647 = icmp eq i32 %4646, 0
  %4648 = icmp slt i32 %4643, 10
  %4649 = or i1 %4647, %4648
  br i1 %4649, label %originalBBpart21189, label %originalBB1187alteredBB

originalBBpart21189:                              ; preds = %originalBB1187
  br i1 %4641, label %4650, label %4822, !dbg !1865

4650:                                             ; preds = %originalBBpart21189
  %4651 = load i32, i32* @x.19
  %4652 = load i32, i32* @y.20
  %4653 = sub i32 %4651, 1
  %4654 = mul i32 %4651, %4653
  %4655 = urem i32 %4654, 2
  %4656 = icmp eq i32 %4655, 0
  %4657 = icmp slt i32 %4652, 10
  %4658 = or i1 %4656, %4657
  br i1 %4658, label %originalBB1191, label %originalBB1191alteredBB

originalBB1191:                                   ; preds = %4650, %originalBB1191alteredBB
  %4659 = load i8, i8* %42, align 1, !dbg !1865
  %4660 = trunc i8 %4659 to i1, !dbg !1865
  %4661 = load i32, i32* @x.19
  %4662 = load i32, i32* @y.20
  %4663 = sub i32 %4661, 1
  %4664 = mul i32 %4661, %4663
  %4665 = urem i32 %4664, 2
  %4666 = icmp eq i32 %4665, 0
  %4667 = icmp slt i32 %4662, 10
  %4668 = or i1 %4666, %4667
  br i1 %4668, label %originalBBpart21193, label %originalBB1191alteredBB

originalBBpart21193:                              ; preds = %originalBB1191
  br i1 %4660, label %4822, label %4669, !dbg !1868

4669:                                             ; preds = %originalBBpart21193
  %4670 = load i32, i32* @x.19
  %4671 = load i32, i32* @y.20
  %4672 = sub i32 %4670, 1
  %4673 = mul i32 %4670, %4672
  %4674 = urem i32 %4673, 2
  %4675 = icmp eq i32 %4674, 0
  %4676 = icmp slt i32 %4671, 10
  %4677 = or i1 %4675, %4676
  br i1 %4677, label %originalBB1195, label %originalBB1195alteredBB

originalBB1195:                                   ; preds = %4669, %originalBB1195alteredBB
  %4678 = load i32, i32* @x.19
  %4679 = load i32, i32* @y.20
  %4680 = sub i32 %4678, 1
  %4681 = mul i32 %4678, %4680
  %4682 = urem i32 %4681, 2
  %4683 = icmp eq i32 %4682, 0
  %4684 = icmp slt i32 %4679, 10
  %4685 = or i1 %4683, %4684
  br i1 %4685, label %originalBBpart21197, label %originalBB1195alteredBB

originalBBpart21197:                              ; preds = %originalBB1195
  br label %4686, !dbg !1869

4686:                                             ; preds = %originalBBpart21197
  %4687 = load i32, i32* @x.19
  %4688 = load i32, i32* @y.20
  %4689 = sub i32 %4687, 1
  %4690 = mul i32 %4687, %4689
  %4691 = urem i32 %4690, 2
  %4692 = icmp eq i32 %4691, 0
  %4693 = icmp slt i32 %4688, 10
  %4694 = or i1 %4692, %4693
  br i1 %4694, label %originalBB1199, label %originalBB1199alteredBB

originalBB1199:                                   ; preds = %4686, %originalBB1199alteredBB
  %4695 = load i64, i64* %29, align 8, !dbg !1871
  %4696 = load i64, i64* %20, align 8, !dbg !1871
  %4697 = icmp ult i64 %4695, %4696, !dbg !1871
  %4698 = load i32, i32* @x.19
  %4699 = load i32, i32* @y.20
  %4700 = sub i32 %4698, 1
  %4701 = mul i32 %4698, %4700
  %4702 = urem i32 %4701, 2
  %4703 = icmp eq i32 %4702, 0
  %4704 = icmp slt i32 %4699, 10
  %4705 = or i1 %4703, %4704
  br i1 %4705, label %originalBBpart21201, label %originalBB1199alteredBB

originalBBpart21201:                              ; preds = %originalBB1199
  br i1 %4697, label %4706, label %4726, !dbg !1874

4706:                                             ; preds = %originalBBpart21201
  %4707 = load i32, i32* @x.19
  %4708 = load i32, i32* @y.20
  %4709 = sub i32 %4707, 1
  %4710 = mul i32 %4707, %4709
  %4711 = urem i32 %4710, 2
  %4712 = icmp eq i32 %4711, 0
  %4713 = icmp slt i32 %4708, 10
  %4714 = or i1 %4712, %4713
  br i1 %4714, label %originalBB1203, label %originalBB1203alteredBB

originalBB1203:                                   ; preds = %4706, %originalBB1203alteredBB
  %4715 = load i8*, i8** %19, align 8, !dbg !1871
  %4716 = load i64, i64* %29, align 8, !dbg !1871
  %4717 = getelementptr inbounds i8, i8* %4715, i64 %4716, !dbg !1871
  store i8 39, i8* %4717, align 1, !dbg !1871
  %4718 = load i32, i32* @x.19
  %4719 = load i32, i32* @y.20
  %4720 = sub i32 %4718, 1
  %4721 = mul i32 %4718, %4720
  %4722 = urem i32 %4721, 2
  %4723 = icmp eq i32 %4722, 0
  %4724 = icmp slt i32 %4719, 10
  %4725 = or i1 %4723, %4724
  br i1 %4725, label %originalBBpart21205, label %originalBB1203alteredBB

originalBBpart21205:                              ; preds = %originalBB1203
  br label %4726, !dbg !1871

4726:                                             ; preds = %originalBBpart21205, %originalBBpart21201
  %4727 = load i32, i32* @x.19
  %4728 = load i32, i32* @y.20
  %4729 = sub i32 %4727, 1
  %4730 = mul i32 %4727, %4729
  %4731 = urem i32 %4730, 2
  %4732 = icmp eq i32 %4731, 0
  %4733 = icmp slt i32 %4728, 10
  %4734 = or i1 %4732, %4733
  br i1 %4734, label %originalBB1207, label %originalBB1207alteredBB

originalBB1207:                                   ; preds = %4726, %originalBB1207alteredBB
  %4735 = load i64, i64* %29, align 8, !dbg !1874
  %4736 = add i64 %4735, 1, !dbg !1874
  store i64 %4736, i64* %29, align 8, !dbg !1874
  %4737 = load i32, i32* @x.19
  %4738 = load i32, i32* @y.20
  %4739 = sub i32 %4737, 1
  %4740 = mul i32 %4737, %4739
  %4741 = urem i32 %4740, 2
  %4742 = icmp eq i32 %4741, 0
  %4743 = icmp slt i32 %4738, 10
  %4744 = or i1 %4742, %4743
  br i1 %4744, label %originalBBpart21218, label %originalBB1207alteredBB

originalBBpart21218:                              ; preds = %originalBB1207
  br label %4745, !dbg !1874

4745:                                             ; preds = %originalBBpart21218
  br label %4746, !dbg !1869

4746:                                             ; preds = %4745
  %4747 = load i32, i32* @x.19
  %4748 = load i32, i32* @y.20
  %4749 = sub i32 %4747, 1
  %4750 = mul i32 %4747, %4749
  %4751 = urem i32 %4750, 2
  %4752 = icmp eq i32 %4751, 0
  %4753 = icmp slt i32 %4748, 10
  %4754 = or i1 %4752, %4753
  br i1 %4754, label %originalBB1220, label %originalBB1220alteredBB

originalBB1220:                                   ; preds = %4746, %originalBB1220alteredBB
  %4755 = load i64, i64* %29, align 8, !dbg !1875
  %4756 = load i64, i64* %20, align 8, !dbg !1875
  %4757 = icmp ult i64 %4755, %4756, !dbg !1875
  %4758 = load i32, i32* @x.19
  %4759 = load i32, i32* @y.20
  %4760 = sub i32 %4758, 1
  %4761 = mul i32 %4758, %4760
  %4762 = urem i32 %4761, 2
  %4763 = icmp eq i32 %4762, 0
  %4764 = icmp slt i32 %4759, 10
  %4765 = or i1 %4763, %4764
  br i1 %4765, label %originalBBpart21222, label %originalBB1220alteredBB

originalBBpart21222:                              ; preds = %originalBB1220
  br i1 %4757, label %4766, label %4786, !dbg !1878

4766:                                             ; preds = %originalBBpart21222
  %4767 = load i32, i32* @x.19
  %4768 = load i32, i32* @y.20
  %4769 = sub i32 %4767, 1
  %4770 = mul i32 %4767, %4769
  %4771 = urem i32 %4770, 2
  %4772 = icmp eq i32 %4771, 0
  %4773 = icmp slt i32 %4768, 10
  %4774 = or i1 %4772, %4773
  br i1 %4774, label %originalBB1224, label %originalBB1224alteredBB

originalBB1224:                                   ; preds = %4766, %originalBB1224alteredBB
  %4775 = load i8*, i8** %19, align 8, !dbg !1875
  %4776 = load i64, i64* %29, align 8, !dbg !1875
  %4777 = getelementptr inbounds i8, i8* %4775, i64 %4776, !dbg !1875
  store i8 39, i8* %4777, align 1, !dbg !1875
  %4778 = load i32, i32* @x.19
  %4779 = load i32, i32* @y.20
  %4780 = sub i32 %4778, 1
  %4781 = mul i32 %4778, %4780
  %4782 = urem i32 %4781, 2
  %4783 = icmp eq i32 %4782, 0
  %4784 = icmp slt i32 %4779, 10
  %4785 = or i1 %4783, %4784
  br i1 %4785, label %originalBBpart21226, label %originalBB1224alteredBB

originalBBpart21226:                              ; preds = %originalBB1224
  br label %4786, !dbg !1875

4786:                                             ; preds = %originalBBpart21226, %originalBBpart21222
  %4787 = load i32, i32* @x.19
  %4788 = load i32, i32* @y.20
  %4789 = sub i32 %4787, 1
  %4790 = mul i32 %4787, %4789
  %4791 = urem i32 %4790, 2
  %4792 = icmp eq i32 %4791, 0
  %4793 = icmp slt i32 %4788, 10
  %4794 = or i1 %4792, %4793
  br i1 %4794, label %originalBB1228, label %originalBB1228alteredBB

originalBB1228:                                   ; preds = %4786, %originalBB1228alteredBB
  %4795 = load i64, i64* %29, align 8, !dbg !1878
  %4796 = add i64 %4795, 1, !dbg !1878
  store i64 %4796, i64* %29, align 8, !dbg !1878
  %4797 = load i32, i32* @x.19
  %4798 = load i32, i32* @y.20
  %4799 = sub i32 %4797, 1
  %4800 = mul i32 %4797, %4799
  %4801 = urem i32 %4800, 2
  %4802 = icmp eq i32 %4801, 0
  %4803 = icmp slt i32 %4798, 10
  %4804 = or i1 %4802, %4803
  br i1 %4804, label %originalBBpart21237, label %originalBB1228alteredBB

originalBBpart21237:                              ; preds = %originalBB1228
  br label %4805, !dbg !1878

4805:                                             ; preds = %originalBBpart21237
  %4806 = load i32, i32* @x.19
  %4807 = load i32, i32* @y.20
  %4808 = sub i32 %4806, 1
  %4809 = mul i32 %4806, %4808
  %4810 = urem i32 %4809, 2
  %4811 = icmp eq i32 %4810, 0
  %4812 = icmp slt i32 %4807, 10
  %4813 = or i1 %4811, %4812
  br i1 %4813, label %originalBB1239, label %originalBB1239alteredBB

originalBB1239:                                   ; preds = %4805, %originalBB1239alteredBB
  store i8 0, i8* %36, align 1, !dbg !1869
  %4814 = load i32, i32* @x.19
  %4815 = load i32, i32* @y.20
  %4816 = sub i32 %4814, 1
  %4817 = mul i32 %4814, %4816
  %4818 = urem i32 %4817, 2
  %4819 = icmp eq i32 %4818, 0
  %4820 = icmp slt i32 %4815, 10
  %4821 = or i1 %4819, %4820
  br i1 %4821, label %originalBBpart21241, label %originalBB1239alteredBB

originalBBpart21241:                              ; preds = %originalBB1239
  br label %4822, !dbg !1869

4822:                                             ; preds = %originalBBpart21241, %originalBBpart21193, %originalBBpart21189
  %4823 = load i32, i32* @x.19
  %4824 = load i32, i32* @y.20
  %4825 = sub i32 %4823, 1
  %4826 = mul i32 %4823, %4825
  %4827 = urem i32 %4826, 2
  %4828 = icmp eq i32 %4827, 0
  %4829 = icmp slt i32 %4824, 10
  %4830 = or i1 %4828, %4829
  br i1 %4830, label %originalBB1243, label %originalBB1243alteredBB

originalBB1243:                                   ; preds = %4822, %originalBB1243alteredBB
  %4831 = load i32, i32* @x.19
  %4832 = load i32, i32* @y.20
  %4833 = sub i32 %4831, 1
  %4834 = mul i32 %4831, %4833
  %4835 = urem i32 %4834, 2
  %4836 = icmp eq i32 %4835, 0
  %4837 = icmp slt i32 %4832, 10
  %4838 = or i1 %4836, %4837
  br i1 %4838, label %originalBBpart21245, label %originalBB1243alteredBB

originalBBpart21245:                              ; preds = %originalBB1243
  br label %4839, !dbg !1868

4839:                                             ; preds = %originalBBpart21245
  %4840 = load i32, i32* @x.19
  %4841 = load i32, i32* @y.20
  %4842 = sub i32 %4840, 1
  %4843 = mul i32 %4840, %4842
  %4844 = urem i32 %4843, 2
  %4845 = icmp eq i32 %4844, 0
  %4846 = icmp slt i32 %4841, 10
  %4847 = or i1 %4845, %4846
  br i1 %4847, label %originalBB1247, label %originalBB1247alteredBB

originalBB1247:                                   ; preds = %4839, %originalBB1247alteredBB
  %4848 = load i32, i32* @x.19
  %4849 = load i32, i32* @y.20
  %4850 = sub i32 %4848, 1
  %4851 = mul i32 %4848, %4850
  %4852 = urem i32 %4851, 2
  %4853 = icmp eq i32 %4852, 0
  %4854 = icmp slt i32 %4849, 10
  %4855 = or i1 %4853, %4854
  br i1 %4855, label %originalBBpart21249, label %originalBB1247alteredBB

originalBBpart21249:                              ; preds = %originalBB1247
  br label %4856, !dbg !1879

4856:                                             ; preds = %originalBBpart21249
  %4857 = load i64, i64* %29, align 8, !dbg !1880
  %4858 = load i64, i64* %20, align 8, !dbg !1880
  %4859 = icmp ult i64 %4857, %4858, !dbg !1880
  br i1 %4859, label %4860, label %4881, !dbg !1883

4860:                                             ; preds = %4856
  %4861 = load i32, i32* @x.19
  %4862 = load i32, i32* @y.20
  %4863 = sub i32 %4861, 1
  %4864 = mul i32 %4861, %4863
  %4865 = urem i32 %4864, 2
  %4866 = icmp eq i32 %4865, 0
  %4867 = icmp slt i32 %4862, 10
  %4868 = or i1 %4866, %4867
  br i1 %4868, label %originalBB1251, label %originalBB1251alteredBB

originalBB1251:                                   ; preds = %4860, %originalBB1251alteredBB
  %4869 = load i8, i8* %39, align 1, !dbg !1880
  %4870 = load i8*, i8** %19, align 8, !dbg !1880
  %4871 = load i64, i64* %29, align 8, !dbg !1880
  %4872 = getelementptr inbounds i8, i8* %4870, i64 %4871, !dbg !1880
  store i8 %4869, i8* %4872, align 1, !dbg !1880
  %4873 = load i32, i32* @x.19
  %4874 = load i32, i32* @y.20
  %4875 = sub i32 %4873, 1
  %4876 = mul i32 %4873, %4875
  %4877 = urem i32 %4876, 2
  %4878 = icmp eq i32 %4877, 0
  %4879 = icmp slt i32 %4874, 10
  %4880 = or i1 %4878, %4879
  br i1 %4880, label %originalBBpart21253, label %originalBB1251alteredBB

originalBBpart21253:                              ; preds = %originalBB1251
  br label %4881, !dbg !1880

4881:                                             ; preds = %originalBBpart21253, %4856
  %4882 = load i32, i32* @x.19
  %4883 = load i32, i32* @y.20
  %4884 = sub i32 %4882, 1
  %4885 = mul i32 %4882, %4884
  %4886 = urem i32 %4885, 2
  %4887 = icmp eq i32 %4886, 0
  %4888 = icmp slt i32 %4883, 10
  %4889 = or i1 %4887, %4888
  br i1 %4889, label %originalBB1255, label %originalBB1255alteredBB

originalBB1255:                                   ; preds = %4881, %originalBB1255alteredBB
  %4890 = load i64, i64* %29, align 8, !dbg !1883
  %4891 = add i64 %4890, 1, !dbg !1883
  store i64 %4891, i64* %29, align 8, !dbg !1883
  %4892 = load i32, i32* @x.19
  %4893 = load i32, i32* @y.20
  %4894 = sub i32 %4892, 1
  %4895 = mul i32 %4892, %4894
  %4896 = urem i32 %4895, 2
  %4897 = icmp eq i32 %4896, 0
  %4898 = icmp slt i32 %4893, 10
  %4899 = or i1 %4897, %4898
  br i1 %4899, label %originalBBpart21264, label %originalBB1255alteredBB

originalBBpart21264:                              ; preds = %originalBB1255
  br label %4900, !dbg !1883

4900:                                             ; preds = %originalBBpart21264
  %4901 = load i32, i32* @x.19
  %4902 = load i32, i32* @y.20
  %4903 = sub i32 %4901, 1
  %4904 = mul i32 %4901, %4903
  %4905 = urem i32 %4904, 2
  %4906 = icmp eq i32 %4905, 0
  %4907 = icmp slt i32 %4902, 10
  %4908 = or i1 %4906, %4907
  br i1 %4908, label %originalBB1266, label %originalBB1266alteredBB

originalBB1266:                                   ; preds = %4900, %originalBB1266alteredBB
  %4909 = load i8, i8* %43, align 1, !dbg !1884
  %4910 = trunc i8 %4909 to i1, !dbg !1884
  %4911 = load i32, i32* @x.19
  %4912 = load i32, i32* @y.20
  %4913 = sub i32 %4911, 1
  %4914 = mul i32 %4911, %4913
  %4915 = urem i32 %4914, 2
  %4916 = icmp eq i32 %4915, 0
  %4917 = icmp slt i32 %4912, 10
  %4918 = or i1 %4916, %4917
  br i1 %4918, label %originalBBpart21268, label %originalBB1266alteredBB

originalBBpart21268:                              ; preds = %originalBB1266
  br i1 %4910, label %4936, label %4919, !dbg !1886

4919:                                             ; preds = %originalBBpart21268
  %4920 = load i32, i32* @x.19
  %4921 = load i32, i32* @y.20
  %4922 = sub i32 %4920, 1
  %4923 = mul i32 %4920, %4922
  %4924 = urem i32 %4923, 2
  %4925 = icmp eq i32 %4924, 0
  %4926 = icmp slt i32 %4921, 10
  %4927 = or i1 %4925, %4926
  br i1 %4927, label %originalBB1270, label %originalBB1270alteredBB

originalBB1270:                                   ; preds = %4919, %originalBB1270alteredBB
  store i8 0, i8* %38, align 1, !dbg !1887
  %4928 = load i32, i32* @x.19
  %4929 = load i32, i32* @y.20
  %4930 = sub i32 %4928, 1
  %4931 = mul i32 %4928, %4930
  %4932 = urem i32 %4931, 2
  %4933 = icmp eq i32 %4932, 0
  %4934 = icmp slt i32 %4929, 10
  %4935 = or i1 %4933, %4934
  br i1 %4935, label %originalBBpart21272, label %originalBB1270alteredBB

originalBBpart21272:                              ; preds = %originalBB1270
  br label %4936, !dbg !1888

4936:                                             ; preds = %originalBBpart21272, %originalBBpart21268
  %4937 = load i32, i32* @x.19
  %4938 = load i32, i32* @y.20
  %4939 = sub i32 %4937, 1
  %4940 = mul i32 %4937, %4939
  %4941 = urem i32 %4940, 2
  %4942 = icmp eq i32 %4941, 0
  %4943 = icmp slt i32 %4938, 10
  %4944 = or i1 %4942, %4943
  br i1 %4944, label %originalBB1274, label %originalBB1274alteredBB

originalBB1274:                                   ; preds = %4936, %originalBB1274alteredBB
  %4945 = load i32, i32* @x.19
  %4946 = load i32, i32* @y.20
  %4947 = sub i32 %4945, 1
  %4948 = mul i32 %4945, %4947
  %4949 = urem i32 %4948, 2
  %4950 = icmp eq i32 %4949, 0
  %4951 = icmp slt i32 %4946, 10
  %4952 = or i1 %4950, %4951
  br i1 %4952, label %originalBBpart21276, label %originalBB1274alteredBB

originalBBpart21276:                              ; preds = %originalBB1274
  br label %4953, !dbg !1889

4953:                                             ; preds = %originalBBpart21276, %originalBBpart2355
  %4954 = load i32, i32* @x.19
  %4955 = load i32, i32* @y.20
  %4956 = sub i32 %4954, 1
  %4957 = mul i32 %4954, %4956
  %4958 = urem i32 %4957, 2
  %4959 = icmp eq i32 %4958, 0
  %4960 = icmp slt i32 %4955, 10
  %4961 = or i1 %4959, %4960
  br i1 %4961, label %originalBB1278, label %originalBB1278alteredBB

originalBB1278:                                   ; preds = %4953, %originalBB1278alteredBB
  %4962 = load i64, i64* %28, align 8, !dbg !1890
  %4963 = add i64 %4962, 1, !dbg !1890
  store i64 %4963, i64* %28, align 8, !dbg !1890
  %4964 = load i32, i32* @x.19
  %4965 = load i32, i32* @y.20
  %4966 = sub i32 %4964, 1
  %4967 = mul i32 %4964, %4966
  %4968 = urem i32 %4967, 2
  %4969 = icmp eq i32 %4968, 0
  %4970 = icmp slt i32 %4965, 10
  %4971 = or i1 %4969, %4970
  br i1 %4971, label %originalBBpart21285, label %originalBB1278alteredBB

originalBBpart21285:                              ; preds = %originalBB1278
  br label %570, !dbg !1891, !llvm.loop !1892

4972:                                             ; preds = %originalBBpart2147
  %4973 = load i64, i64* %29, align 8, !dbg !1894
  %4974 = icmp eq i64 %4973, 0, !dbg !1896
  br i1 %4974, label %4975, label %5030, !dbg !1897

4975:                                             ; preds = %4972
  %4976 = load i32, i32* @x.19
  %4977 = load i32, i32* @y.20
  %4978 = sub i32 %4976, 1
  %4979 = mul i32 %4976, %4978
  %4980 = urem i32 %4979, 2
  %4981 = icmp eq i32 %4980, 0
  %4982 = icmp slt i32 %4977, 10
  %4983 = or i1 %4981, %4982
  br i1 %4983, label %originalBB1287, label %originalBB1287alteredBB

originalBB1287:                                   ; preds = %4975, %originalBB1287alteredBB
  %4984 = load i32, i32* %23, align 4, !dbg !1898
  %4985 = icmp eq i32 %4984, 2, !dbg !1899
  %4986 = load i32, i32* @x.19
  %4987 = load i32, i32* @y.20
  %4988 = sub i32 %4986, 1
  %4989 = mul i32 %4986, %4988
  %4990 = urem i32 %4989, 2
  %4991 = icmp eq i32 %4990, 0
  %4992 = icmp slt i32 %4987, 10
  %4993 = or i1 %4991, %4992
  br i1 %4993, label %originalBBpart21289, label %originalBB1287alteredBB

originalBBpart21289:                              ; preds = %originalBB1287
  br i1 %4985, label %4994, label %5030, !dbg !1900

4994:                                             ; preds = %originalBBpart21289
  %4995 = load i32, i32* @x.19
  %4996 = load i32, i32* @y.20
  %4997 = sub i32 %4995, 1
  %4998 = mul i32 %4995, %4997
  %4999 = urem i32 %4998, 2
  %5000 = icmp eq i32 %4999, 0
  %5001 = icmp slt i32 %4996, 10
  %5002 = or i1 %5000, %5001
  br i1 %5002, label %originalBB1291, label %originalBB1291alteredBB

originalBB1291:                                   ; preds = %4994, %originalBB1291alteredBB
  %5003 = load i8, i8* %35, align 1, !dbg !1901
  %5004 = trunc i8 %5003 to i1, !dbg !1901
  %5005 = load i32, i32* @x.19
  %5006 = load i32, i32* @y.20
  %5007 = sub i32 %5005, 1
  %5008 = mul i32 %5005, %5007
  %5009 = urem i32 %5008, 2
  %5010 = icmp eq i32 %5009, 0
  %5011 = icmp slt i32 %5006, 10
  %5012 = or i1 %5010, %5011
  br i1 %5012, label %originalBBpart21293, label %originalBB1291alteredBB

originalBBpart21293:                              ; preds = %originalBB1291
  br i1 %5004, label %5013, label %5030, !dbg !1902

5013:                                             ; preds = %originalBBpart21293
  %5014 = load i32, i32* @x.19
  %5015 = load i32, i32* @y.20
  %5016 = sub i32 %5014, 1
  %5017 = mul i32 %5014, %5016
  %5018 = urem i32 %5017, 2
  %5019 = icmp eq i32 %5018, 0
  %5020 = icmp slt i32 %5015, 10
  %5021 = or i1 %5019, %5020
  br i1 %5021, label %originalBB1295, label %originalBB1295alteredBB

originalBB1295:                                   ; preds = %5013, %originalBB1295alteredBB
  %5022 = load i32, i32* @x.19
  %5023 = load i32, i32* @y.20
  %5024 = sub i32 %5022, 1
  %5025 = mul i32 %5022, %5024
  %5026 = urem i32 %5025, 2
  %5027 = icmp eq i32 %5026, 0
  %5028 = icmp slt i32 %5023, 10
  %5029 = or i1 %5027, %5028
  br i1 %5029, label %originalBBpart21297, label %originalBB1295alteredBB

originalBBpart21297:                              ; preds = %originalBB1295
  br label %5326, !dbg !1903

5030:                                             ; preds = %originalBBpart21293, %originalBBpart21289, %4972
  %5031 = load i32, i32* @x.19
  %5032 = load i32, i32* @y.20
  %5033 = sub i32 %5031, 1
  %5034 = mul i32 %5031, %5033
  %5035 = urem i32 %5034, 2
  %5036 = icmp eq i32 %5035, 0
  %5037 = icmp slt i32 %5032, 10
  %5038 = or i1 %5036, %5037
  br i1 %5038, label %originalBB1299, label %originalBB1299alteredBB

originalBB1299:                                   ; preds = %5030, %originalBB1299alteredBB
  %5039 = load i32, i32* %23, align 4, !dbg !1904
  %5040 = icmp eq i32 %5039, 2, !dbg !1906
  %5041 = load i32, i32* @x.19
  %5042 = load i32, i32* @y.20
  %5043 = sub i32 %5041, 1
  %5044 = mul i32 %5041, %5043
  %5045 = urem i32 %5044, 2
  %5046 = icmp eq i32 %5045, 0
  %5047 = icmp slt i32 %5042, 10
  %5048 = or i1 %5046, %5047
  br i1 %5048, label %originalBBpart21301, label %originalBB1299alteredBB

originalBBpart21301:                              ; preds = %originalBB1299
  br i1 %5040, label %5049, label %5158, !dbg !1907

5049:                                             ; preds = %originalBBpart21301
  %5050 = load i8, i8* %35, align 1, !dbg !1908
  %5051 = trunc i8 %5050 to i1, !dbg !1908
  br i1 %5051, label %5158, label %5052, !dbg !1909

5052:                                             ; preds = %5049
  %5053 = load i32, i32* @x.19
  %5054 = load i32, i32* @y.20
  %5055 = sub i32 %5053, 1
  %5056 = mul i32 %5053, %5055
  %5057 = urem i32 %5056, 2
  %5058 = icmp eq i32 %5057, 0
  %5059 = icmp slt i32 %5054, 10
  %5060 = or i1 %5058, %5059
  br i1 %5060, label %originalBB1303, label %originalBB1303alteredBB

originalBB1303:                                   ; preds = %5052, %originalBB1303alteredBB
  %5061 = load i8, i8* %37, align 1, !dbg !1910
  %5062 = trunc i8 %5061 to i1, !dbg !1910
  %5063 = load i32, i32* @x.19
  %5064 = load i32, i32* @y.20
  %5065 = sub i32 %5063, 1
  %5066 = mul i32 %5063, %5065
  %5067 = urem i32 %5066, 2
  %5068 = icmp eq i32 %5067, 0
  %5069 = icmp slt i32 %5064, 10
  %5070 = or i1 %5068, %5069
  br i1 %5070, label %originalBBpart21305, label %originalBB1303alteredBB

originalBBpart21305:                              ; preds = %originalBB1303
  br i1 %5062, label %5071, label %5158, !dbg !1911

5071:                                             ; preds = %originalBBpart21305
  %5072 = load i32, i32* @x.19
  %5073 = load i32, i32* @y.20
  %5074 = sub i32 %5072, 1
  %5075 = mul i32 %5072, %5074
  %5076 = urem i32 %5075, 2
  %5077 = icmp eq i32 %5076, 0
  %5078 = icmp slt i32 %5073, 10
  %5079 = or i1 %5077, %5078
  br i1 %5079, label %originalBB1307, label %originalBB1307alteredBB

originalBB1307:                                   ; preds = %5071, %originalBB1307alteredBB
  %5080 = load i8, i8* %38, align 1, !dbg !1912
  %5081 = trunc i8 %5080 to i1, !dbg !1912
  %5082 = load i32, i32* @x.19
  %5083 = load i32, i32* @y.20
  %5084 = sub i32 %5082, 1
  %5085 = mul i32 %5082, %5084
  %5086 = urem i32 %5085, 2
  %5087 = icmp eq i32 %5086, 0
  %5088 = icmp slt i32 %5083, 10
  %5089 = or i1 %5087, %5088
  br i1 %5089, label %originalBBpart21309, label %originalBB1307alteredBB

originalBBpart21309:                              ; preds = %originalBB1307
  br i1 %5081, label %5090, label %5116, !dbg !1915

5090:                                             ; preds = %originalBBpart21309
  %5091 = load i32, i32* @x.19
  %5092 = load i32, i32* @y.20
  %5093 = sub i32 %5091, 1
  %5094 = mul i32 %5091, %5093
  %5095 = urem i32 %5094, 2
  %5096 = icmp eq i32 %5095, 0
  %5097 = icmp slt i32 %5092, 10
  %5098 = or i1 %5096, %5097
  br i1 %5098, label %originalBB1311, label %originalBB1311alteredBB

originalBB1311:                                   ; preds = %5090, %originalBB1311alteredBB
  %5099 = load i8*, i8** %19, align 8, !dbg !1916
  %5100 = load i64, i64* %30, align 8, !dbg !1917
  %5101 = load i8*, i8** %21, align 8, !dbg !1918
  %5102 = load i64, i64* %22, align 8, !dbg !1919
  %5103 = load i32, i32* %24, align 4, !dbg !1920
  %5104 = load i32*, i32** %25, align 8, !dbg !1921
  %5105 = load i8*, i8** %26, align 8, !dbg !1922
  %5106 = load i8*, i8** %27, align 8, !dbg !1923
  %5107 = call i64 @quotearg_buffer_restyled(i8* %5099, i64 %5100, i8* %5101, i64 %5102, i32 5, i32 %5103, i32* %5104, i8* %5105, i8* %5106), !dbg !1924
  store i64 %5107, i64* %18, align 8, !dbg !1925
  %5108 = load i32, i32* @x.19
  %5109 = load i32, i32* @y.20
  %5110 = sub i32 %5108, 1
  %5111 = mul i32 %5108, %5110
  %5112 = urem i32 %5111, 2
  %5113 = icmp eq i32 %5112, 0
  %5114 = icmp slt i32 %5109, 10
  %5115 = or i1 %5113, %5114
  br i1 %5115, label %originalBBpart21313, label %originalBB1311alteredBB

originalBBpart21313:                              ; preds = %originalBB1311
  br label %5408, !dbg !1925

5116:                                             ; preds = %originalBBpart21309
  %5117 = load i64, i64* %20, align 8, !dbg !1926
  %5118 = icmp ne i64 %5117, 0, !dbg !1926
  br i1 %5118, label %5140, label %5119, !dbg !1928

5119:                                             ; preds = %5116
  %5120 = load i32, i32* @x.19
  %5121 = load i32, i32* @y.20
  %5122 = sub i32 %5120, 1
  %5123 = mul i32 %5120, %5122
  %5124 = urem i32 %5123, 2
  %5125 = icmp eq i32 %5124, 0
  %5126 = icmp slt i32 %5121, 10
  %5127 = or i1 %5125, %5126
  br i1 %5127, label %originalBB1315, label %originalBB1315alteredBB

originalBB1315:                                   ; preds = %5119, %originalBB1315alteredBB
  %5128 = load i64, i64* %30, align 8, !dbg !1929
  %5129 = icmp ne i64 %5128, 0, !dbg !1929
  %5130 = load i32, i32* @x.19
  %5131 = load i32, i32* @y.20
  %5132 = sub i32 %5130, 1
  %5133 = mul i32 %5130, %5132
  %5134 = urem i32 %5133, 2
  %5135 = icmp eq i32 %5134, 0
  %5136 = icmp slt i32 %5131, 10
  %5137 = or i1 %5135, %5136
  br i1 %5137, label %originalBBpart21317, label %originalBB1315alteredBB

originalBBpart21317:                              ; preds = %originalBB1315
  br i1 %5129, label %5138, label %5140, !dbg !1930

5138:                                             ; preds = %originalBBpart21317
  %5139 = load i64, i64* %30, align 8, !dbg !1931
  store i64 %5139, i64* %20, align 8, !dbg !1933
  store i64 0, i64* %29, align 8, !dbg !1934
  br label %66, !dbg !1935

5140:                                             ; preds = %originalBBpart21317, %5116
  %5141 = load i32, i32* @x.19
  %5142 = load i32, i32* @y.20
  %5143 = sub i32 %5141, 1
  %5144 = mul i32 %5141, %5143
  %5145 = urem i32 %5144, 2
  %5146 = icmp eq i32 %5145, 0
  %5147 = icmp slt i32 %5142, 10
  %5148 = or i1 %5146, %5147
  br i1 %5148, label %originalBB1319, label %originalBB1319alteredBB

originalBB1319:                                   ; preds = %5140, %originalBB1319alteredBB
  %5149 = load i32, i32* @x.19
  %5150 = load i32, i32* @y.20
  %5151 = sub i32 %5149, 1
  %5152 = mul i32 %5149, %5151
  %5153 = urem i32 %5152, 2
  %5154 = icmp eq i32 %5153, 0
  %5155 = icmp slt i32 %5150, 10
  %5156 = or i1 %5154, %5155
  br i1 %5156, label %originalBBpart21321, label %originalBB1319alteredBB

originalBBpart21321:                              ; preds = %originalBB1319
  br label %5157

5157:                                             ; preds = %originalBBpart21321
  br label %5158, !dbg !1936

5158:                                             ; preds = %5157, %originalBBpart21305, %5049, %originalBBpart21301
  %5159 = load i32, i32* @x.19
  %5160 = load i32, i32* @y.20
  %5161 = sub i32 %5159, 1
  %5162 = mul i32 %5159, %5161
  %5163 = urem i32 %5162, 2
  %5164 = icmp eq i32 %5163, 0
  %5165 = icmp slt i32 %5160, 10
  %5166 = or i1 %5164, %5165
  br i1 %5166, label %originalBB1323, label %originalBB1323alteredBB

originalBB1323:                                   ; preds = %5158, %originalBB1323alteredBB
  %5167 = load i8*, i8** %31, align 8, !dbg !1937
  %5168 = icmp ne i8* %5167, null, !dbg !1937
  %5169 = load i32, i32* @x.19
  %5170 = load i32, i32* @y.20
  %5171 = sub i32 %5169, 1
  %5172 = mul i32 %5169, %5171
  %5173 = urem i32 %5172, 2
  %5174 = icmp eq i32 %5173, 0
  %5175 = icmp slt i32 %5170, 10
  %5176 = or i1 %5174, %5175
  br i1 %5176, label %originalBBpart21325, label %originalBB1323alteredBB

originalBBpart21325:                              ; preds = %originalBB1323
  br i1 %5168, label %5177, label %5300, !dbg !1939

5177:                                             ; preds = %originalBBpart21325
  %5178 = load i8, i8* %35, align 1, !dbg !1940
  %5179 = trunc i8 %5178 to i1, !dbg !1940
  br i1 %5179, label %5300, label %5180, !dbg !1941

5180:                                             ; preds = %5177
  br label %5181, !dbg !1942

5181:                                             ; preds = %originalBBpart21350, %5180
  %5182 = load i32, i32* @x.19
  %5183 = load i32, i32* @y.20
  %5184 = sub i32 %5182, 1
  %5185 = mul i32 %5182, %5184
  %5186 = urem i32 %5185, 2
  %5187 = icmp eq i32 %5186, 0
  %5188 = icmp slt i32 %5183, 10
  %5189 = or i1 %5187, %5188
  br i1 %5189, label %originalBB1327, label %originalBB1327alteredBB

originalBB1327:                                   ; preds = %5181, %originalBB1327alteredBB
  %5190 = load i8*, i8** %31, align 8, !dbg !1943
  %5191 = load i8, i8* %5190, align 1, !dbg !1946
  %5192 = icmp ne i8 %5191, 0, !dbg !1947
  %5193 = load i32, i32* @x.19
  %5194 = load i32, i32* @y.20
  %5195 = sub i32 %5193, 1
  %5196 = mul i32 %5193, %5195
  %5197 = urem i32 %5196, 2
  %5198 = icmp eq i32 %5197, 0
  %5199 = icmp slt i32 %5194, 10
  %5200 = or i1 %5198, %5199
  br i1 %5200, label %originalBBpart21329, label %originalBB1327alteredBB

originalBBpart21329:                              ; preds = %originalBB1327
  br i1 %5192, label %5201, label %5283, !dbg !1947

5201:                                             ; preds = %originalBBpart21329
  %5202 = load i32, i32* @x.19
  %5203 = load i32, i32* @y.20
  %5204 = sub i32 %5202, 1
  %5205 = mul i32 %5202, %5204
  %5206 = urem i32 %5205, 2
  %5207 = icmp eq i32 %5206, 0
  %5208 = icmp slt i32 %5203, 10
  %5209 = or i1 %5207, %5208
  br i1 %5209, label %originalBB1331, label %originalBB1331alteredBB

originalBB1331:                                   ; preds = %5201, %originalBB1331alteredBB
  %5210 = load i32, i32* @x.19
  %5211 = load i32, i32* @y.20
  %5212 = sub i32 %5210, 1
  %5213 = mul i32 %5210, %5212
  %5214 = urem i32 %5213, 2
  %5215 = icmp eq i32 %5214, 0
  %5216 = icmp slt i32 %5211, 10
  %5217 = or i1 %5215, %5216
  br i1 %5217, label %originalBBpart21333, label %originalBB1331alteredBB

originalBBpart21333:                              ; preds = %originalBB1331
  br label %5218, !dbg !1948

5218:                                             ; preds = %originalBBpart21333
  %5219 = load i32, i32* @x.19
  %5220 = load i32, i32* @y.20
  %5221 = sub i32 %5219, 1
  %5222 = mul i32 %5219, %5221
  %5223 = urem i32 %5222, 2
  %5224 = icmp eq i32 %5223, 0
  %5225 = icmp slt i32 %5220, 10
  %5226 = or i1 %5224, %5225
  br i1 %5226, label %originalBB1335, label %originalBB1335alteredBB

originalBB1335:                                   ; preds = %5218, %originalBB1335alteredBB
  %5227 = load i64, i64* %29, align 8, !dbg !1949
  %5228 = load i64, i64* %20, align 8, !dbg !1949
  %5229 = icmp ult i64 %5227, %5228, !dbg !1949
  %5230 = load i32, i32* @x.19
  %5231 = load i32, i32* @y.20
  %5232 = sub i32 %5230, 1
  %5233 = mul i32 %5230, %5232
  %5234 = urem i32 %5233, 2
  %5235 = icmp eq i32 %5234, 0
  %5236 = icmp slt i32 %5231, 10
  %5237 = or i1 %5235, %5236
  br i1 %5237, label %originalBBpart21337, label %originalBB1335alteredBB

originalBBpart21337:                              ; preds = %originalBB1335
  br i1 %5229, label %5238, label %5244, !dbg !1952

5238:                                             ; preds = %originalBBpart21337
  %5239 = load i8*, i8** %31, align 8, !dbg !1949
  %5240 = load i8, i8* %5239, align 1, !dbg !1949
  %5241 = load i8*, i8** %19, align 8, !dbg !1949
  %5242 = load i64, i64* %29, align 8, !dbg !1949
  %5243 = getelementptr inbounds i8, i8* %5241, i64 %5242, !dbg !1949
  store i8 %5240, i8* %5243, align 1, !dbg !1949
  br label %5244, !dbg !1949

5244:                                             ; preds = %5238, %originalBBpart21337
  %5245 = load i32, i32* @x.19
  %5246 = load i32, i32* @y.20
  %5247 = sub i32 %5245, 1
  %5248 = mul i32 %5245, %5247
  %5249 = urem i32 %5248, 2
  %5250 = icmp eq i32 %5249, 0
  %5251 = icmp slt i32 %5246, 10
  %5252 = or i1 %5250, %5251
  br i1 %5252, label %originalBB1339, label %originalBB1339alteredBB

originalBB1339:                                   ; preds = %5244, %originalBB1339alteredBB
  %5253 = load i64, i64* %29, align 8, !dbg !1952
  %5254 = add i64 %5253, 1, !dbg !1952
  store i64 %5254, i64* %29, align 8, !dbg !1952
  %5255 = load i32, i32* @x.19
  %5256 = load i32, i32* @y.20
  %5257 = sub i32 %5255, 1
  %5258 = mul i32 %5255, %5257
  %5259 = urem i32 %5258, 2
  %5260 = icmp eq i32 %5259, 0
  %5261 = icmp slt i32 %5256, 10
  %5262 = or i1 %5260, %5261
  br i1 %5262, label %originalBBpart21346, label %originalBB1339alteredBB

originalBBpart21346:                              ; preds = %originalBB1339
  br label %5263, !dbg !1952

5263:                                             ; preds = %originalBBpart21346
  br label %5264, !dbg !1952

5264:                                             ; preds = %5263
  %5265 = load i32, i32* @x.19
  %5266 = load i32, i32* @y.20
  %5267 = sub i32 %5265, 1
  %5268 = mul i32 %5265, %5267
  %5269 = urem i32 %5268, 2
  %5270 = icmp eq i32 %5269, 0
  %5271 = icmp slt i32 %5266, 10
  %5272 = or i1 %5270, %5271
  br i1 %5272, label %originalBB1348, label %originalBB1348alteredBB

originalBB1348:                                   ; preds = %5264, %originalBB1348alteredBB
  %5273 = load i8*, i8** %31, align 8, !dbg !1953
  %5274 = getelementptr inbounds i8, i8* %5273, i32 1, !dbg !1953
  store i8* %5274, i8** %31, align 8, !dbg !1953
  %5275 = load i32, i32* @x.19
  %5276 = load i32, i32* @y.20
  %5277 = sub i32 %5275, 1
  %5278 = mul i32 %5275, %5277
  %5279 = urem i32 %5278, 2
  %5280 = icmp eq i32 %5279, 0
  %5281 = icmp slt i32 %5276, 10
  %5282 = or i1 %5280, %5281
  br i1 %5282, label %originalBBpart21350, label %originalBB1348alteredBB

originalBBpart21350:                              ; preds = %originalBB1348
  br label %5181, !dbg !1954, !llvm.loop !1955

5283:                                             ; preds = %originalBBpart21329
  %5284 = load i32, i32* @x.19
  %5285 = load i32, i32* @y.20
  %5286 = sub i32 %5284, 1
  %5287 = mul i32 %5284, %5286
  %5288 = urem i32 %5287, 2
  %5289 = icmp eq i32 %5288, 0
  %5290 = icmp slt i32 %5285, 10
  %5291 = or i1 %5289, %5290
  br i1 %5291, label %originalBB1352, label %originalBB1352alteredBB

originalBB1352:                                   ; preds = %5283, %originalBB1352alteredBB
  %5292 = load i32, i32* @x.19
  %5293 = load i32, i32* @y.20
  %5294 = sub i32 %5292, 1
  %5295 = mul i32 %5292, %5294
  %5296 = urem i32 %5295, 2
  %5297 = icmp eq i32 %5296, 0
  %5298 = icmp slt i32 %5293, 10
  %5299 = or i1 %5297, %5298
  br i1 %5299, label %originalBBpart21354, label %originalBB1352alteredBB

originalBBpart21354:                              ; preds = %originalBB1352
  br label %5300, !dbg !1956

5300:                                             ; preds = %originalBBpart21354, %5177, %originalBBpart21325
  %5301 = load i64, i64* %29, align 8, !dbg !1957
  %5302 = load i64, i64* %20, align 8, !dbg !1959
  %5303 = icmp ult i64 %5301, %5302, !dbg !1960
  br i1 %5303, label %5304, label %5308, !dbg !1961

5304:                                             ; preds = %5300
  %5305 = load i8*, i8** %19, align 8, !dbg !1962
  %5306 = load i64, i64* %29, align 8, !dbg !1963
  %5307 = getelementptr inbounds i8, i8* %5305, i64 %5306, !dbg !1962
  store i8 0, i8* %5307, align 1, !dbg !1964
  br label %5308, !dbg !1962

5308:                                             ; preds = %5304, %5300
  %5309 = load i32, i32* @x.19
  %5310 = load i32, i32* @y.20
  %5311 = sub i32 %5309, 1
  %5312 = mul i32 %5309, %5311
  %5313 = urem i32 %5312, 2
  %5314 = icmp eq i32 %5313, 0
  %5315 = icmp slt i32 %5310, 10
  %5316 = or i1 %5314, %5315
  br i1 %5316, label %originalBB1356, label %originalBB1356alteredBB

originalBB1356:                                   ; preds = %5308, %originalBB1356alteredBB
  %5317 = load i64, i64* %29, align 8, !dbg !1965
  store i64 %5317, i64* %18, align 8, !dbg !1966
  %5318 = load i32, i32* @x.19
  %5319 = load i32, i32* @y.20
  %5320 = sub i32 %5318, 1
  %5321 = mul i32 %5318, %5320
  %5322 = urem i32 %5321, 2
  %5323 = icmp eq i32 %5322, 0
  %5324 = icmp slt i32 %5319, 10
  %5325 = or i1 %5323, %5324
  br i1 %5325, label %originalBBpart21358, label %originalBB1356alteredBB

originalBBpart21358:                              ; preds = %originalBB1356
  br label %5408, !dbg !1966

5326:                                             ; preds = %originalBBpart21297, %originalBBpart21126, %originalBBpart2833, %2984, %2432, %2392, %originalBBpart2570, %2051, %1607, %originalBBpart2371, %899, %819
  call void @llvm.dbg.label(metadata !1967), !dbg !1968
  %5327 = load i32, i32* @x.19
  %5328 = load i32, i32* @y.20
  %5329 = sub i32 %5327, 1
  %5330 = mul i32 %5327, %5329
  %5331 = urem i32 %5330, 2
  %5332 = icmp eq i32 %5331, 0
  %5333 = icmp slt i32 %5328, 10
  %5334 = or i1 %5332, %5333
  br i1 %5334, label %originalBB1360, label %originalBB1360alteredBB

originalBB1360:                                   ; preds = %5326, %originalBB1360alteredBB
  %5335 = load i32, i32* %23, align 4, !dbg !1969
  %5336 = icmp eq i32 %5335, 2, !dbg !1971
  %5337 = load i32, i32* @x.19
  %5338 = load i32, i32* @y.20
  %5339 = sub i32 %5337, 1
  %5340 = mul i32 %5337, %5339
  %5341 = urem i32 %5340, 2
  %5342 = icmp eq i32 %5341, 0
  %5343 = icmp slt i32 %5338, 10
  %5344 = or i1 %5342, %5343
  br i1 %5344, label %originalBBpart21362, label %originalBB1360alteredBB

originalBBpart21362:                              ; preds = %originalBB1360
  br i1 %5336, label %5345, label %5381, !dbg !1972

5345:                                             ; preds = %originalBBpart21362
  %5346 = load i32, i32* @x.19
  %5347 = load i32, i32* @y.20
  %5348 = sub i32 %5346, 1
  %5349 = mul i32 %5346, %5348
  %5350 = urem i32 %5349, 2
  %5351 = icmp eq i32 %5350, 0
  %5352 = icmp slt i32 %5347, 10
  %5353 = or i1 %5351, %5352
  br i1 %5353, label %originalBB1364, label %originalBB1364alteredBB

originalBB1364:                                   ; preds = %5345, %originalBB1364alteredBB
  %5354 = load i8, i8* %33, align 1, !dbg !1973
  %5355 = trunc i8 %5354 to i1, !dbg !1973
  %5356 = load i32, i32* @x.19
  %5357 = load i32, i32* @y.20
  %5358 = sub i32 %5356, 1
  %5359 = mul i32 %5356, %5358
  %5360 = urem i32 %5359, 2
  %5361 = icmp eq i32 %5360, 0
  %5362 = icmp slt i32 %5357, 10
  %5363 = or i1 %5361, %5362
  br i1 %5363, label %originalBBpart21366, label %originalBB1364alteredBB

originalBBpart21366:                              ; preds = %originalBB1364
  br i1 %5355, label %5364, label %5381, !dbg !1974

5364:                                             ; preds = %originalBBpart21366
  %5365 = load i32, i32* @x.19
  %5366 = load i32, i32* @y.20
  %5367 = sub i32 %5365, 1
  %5368 = mul i32 %5365, %5367
  %5369 = urem i32 %5368, 2
  %5370 = icmp eq i32 %5369, 0
  %5371 = icmp slt i32 %5366, 10
  %5372 = or i1 %5370, %5371
  br i1 %5372, label %originalBB1368, label %originalBB1368alteredBB

originalBB1368:                                   ; preds = %5364, %originalBB1368alteredBB
  store i32 4, i32* %23, align 4, !dbg !1975
  %5373 = load i32, i32* @x.19
  %5374 = load i32, i32* @y.20
  %5375 = sub i32 %5373, 1
  %5376 = mul i32 %5373, %5375
  %5377 = urem i32 %5376, 2
  %5378 = icmp eq i32 %5377, 0
  %5379 = icmp slt i32 %5374, 10
  %5380 = or i1 %5378, %5379
  br i1 %5380, label %originalBBpart21370, label %originalBB1368alteredBB

originalBBpart21370:                              ; preds = %originalBB1368
  br label %5381, !dbg !1976

5381:                                             ; preds = %originalBBpart21370, %originalBBpart21366, %originalBBpart21362
  %5382 = load i32, i32* @x.19
  %5383 = load i32, i32* @y.20
  %5384 = sub i32 %5382, 1
  %5385 = mul i32 %5382, %5384
  %5386 = urem i32 %5385, 2
  %5387 = icmp eq i32 %5386, 0
  %5388 = icmp slt i32 %5383, 10
  %5389 = or i1 %5387, %5388
  br i1 %5389, label %originalBB1372, label %originalBB1372alteredBB

originalBB1372:                                   ; preds = %5381, %originalBB1372alteredBB
  %5390 = load i8*, i8** %19, align 8, !dbg !1977
  %5391 = load i64, i64* %20, align 8, !dbg !1978
  %5392 = load i8*, i8** %21, align 8, !dbg !1979
  %5393 = load i64, i64* %22, align 8, !dbg !1980
  %5394 = load i32, i32* %23, align 4, !dbg !1981
  %5395 = load i32, i32* %24, align 4, !dbg !1982
  %5396 = and i32 %5395, -3, !dbg !1983
  %5397 = load i8*, i8** %26, align 8, !dbg !1984
  %5398 = load i8*, i8** %27, align 8, !dbg !1985
  %5399 = call i64 @quotearg_buffer_restyled(i8* %5390, i64 %5391, i8* %5392, i64 %5393, i32 %5394, i32 %5396, i32* null, i8* %5397, i8* %5398), !dbg !1986
  store i64 %5399, i64* %18, align 8, !dbg !1987
  %5400 = load i32, i32* @x.19
  %5401 = load i32, i32* @y.20
  %5402 = sub i32 %5400, 1
  %5403 = mul i32 %5400, %5402
  %5404 = urem i32 %5403, 2
  %5405 = icmp eq i32 %5404, 0
  %5406 = icmp slt i32 %5401, 10
  %5407 = or i1 %5405, %5406
  br i1 %5407, label %originalBBpart21390, label %originalBB1372alteredBB

originalBBpart21390:                              ; preds = %originalBB1372
  br label %5408, !dbg !1987

5408:                                             ; preds = %originalBBpart21390, %originalBBpart21358, %originalBBpart21313
  %5409 = load i32, i32* @x.19
  %5410 = load i32, i32* @y.20
  %5411 = sub i32 %5409, 1
  %5412 = mul i32 %5409, %5411
  %5413 = urem i32 %5412, 2
  %5414 = icmp eq i32 %5413, 0
  %5415 = icmp slt i32 %5410, 10
  %5416 = or i1 %5414, %5415
  br i1 %5416, label %originalBB1392, label %originalBB1392alteredBB

originalBB1392:                                   ; preds = %5408, %originalBB1392alteredBB
  %5417 = load i64, i64* %18, align 8, !dbg !1988
  %5418 = load i32, i32* @x.19
  %5419 = load i32, i32* @y.20
  %5420 = sub i32 %5418, 1
  %5421 = mul i32 %5418, %5420
  %5422 = urem i32 %5421, 2
  %5423 = icmp eq i32 %5422, 0
  %5424 = icmp slt i32 %5419, 10
  %5425 = or i1 %5423, %5424
  br i1 %5425, label %originalBBpart21394, label %originalBB1392alteredBB

originalBBpart21394:                              ; preds = %originalBB1392
  ret i64 %5417, !dbg !1988

originalBBalteredBB:                              ; preds = %originalBB, %9
  %5426 = alloca i64, align 8
  %5427 = alloca i8*, align 8
  %5428 = alloca i64, align 8
  %5429 = alloca i8*, align 8
  %5430 = alloca i64, align 8
  %5431 = alloca i32, align 4
  %5432 = alloca i32, align 4
  %5433 = alloca i32*, align 8
  %5434 = alloca i8*, align 8
  %5435 = alloca i8*, align 8
  %5436 = alloca i64, align 8
  %5437 = alloca i64, align 8
  %5438 = alloca i64, align 8
  %5439 = alloca i8*, align 8
  %5440 = alloca i64, align 8
  %5441 = alloca i8, align 1
  %5442 = alloca i8, align 1
  %5443 = alloca i8, align 1
  %5444 = alloca i8, align 1
  %5445 = alloca i8, align 1
  %5446 = alloca i8, align 1
  %5447 = alloca i8, align 1
  %5448 = alloca i8, align 1
  %5449 = alloca i8, align 1
  %5450 = alloca i8, align 1
  %5451 = alloca i8, align 1
  %5452 = alloca i64, align 8
  %5453 = alloca i8, align 1
  %5454 = alloca %struct.__mbstate_t, align 4
  %5455 = alloca i32, align 4
  %5456 = alloca i64, align 8
  %5457 = alloca i64, align 8
  %5458 = alloca i64, align 8
  store i8* %0, i8** %5427, align 8
  call void @llvm.dbg.declare(metadata i8** %5427, metadata !1989, metadata !DIExpression()), !dbg !1109
  store i64 %1, i64* %5428, align 8
  call void @llvm.dbg.declare(metadata i64* %5428, metadata !2021, metadata !DIExpression()), !dbg !1111
  store i8* %2, i8** %5429, align 8
  call void @llvm.dbg.declare(metadata i8** %5429, metadata !2022, metadata !DIExpression()), !dbg !1113
  store i64 %3, i64* %5430, align 8
  call void @llvm.dbg.declare(metadata i64* %5430, metadata !2023, metadata !DIExpression()), !dbg !1115
  store i32 %4, i32* %5431, align 4
  call void @llvm.dbg.declare(metadata i32* %5431, metadata !2024, metadata !DIExpression()), !dbg !1117
  store i32 %5, i32* %5432, align 4
  call void @llvm.dbg.declare(metadata i32* %5432, metadata !2025, metadata !DIExpression()), !dbg !1119
  store i32* %6, i32** %5433, align 8
  call void @llvm.dbg.declare(metadata i32** %5433, metadata !2026, metadata !DIExpression()), !dbg !1121
  store i8* %7, i8** %5434, align 8
  call void @llvm.dbg.declare(metadata i8** %5434, metadata !2027, metadata !DIExpression()), !dbg !1123
  store i8* %8, i8** %5435, align 8
  call void @llvm.dbg.declare(metadata i8** %5435, metadata !2028, metadata !DIExpression()), !dbg !1125
  call void @llvm.dbg.declare(metadata i64* %5436, metadata !2029, metadata !DIExpression()), !dbg !1127
  call void @llvm.dbg.declare(metadata i64* %5437, metadata !2030, metadata !DIExpression()), !dbg !1129
  store i64 0, i64* %5437, align 8, !dbg !1129
  call void @llvm.dbg.declare(metadata i64* %5438, metadata !2031, metadata !DIExpression()), !dbg !1131
  store i64 0, i64* %5438, align 8, !dbg !1131
  call void @llvm.dbg.declare(metadata i8** %5439, metadata !2032, metadata !DIExpression()), !dbg !1133
  store i8* null, i8** %5439, align 8, !dbg !1133
  call void @llvm.dbg.declare(metadata i64* %5440, metadata !2033, metadata !DIExpression()), !dbg !1135
  store i64 0, i64* %5440, align 8, !dbg !1135
  call void @llvm.dbg.declare(metadata i8* %5441, metadata !2034, metadata !DIExpression()), !dbg !1137
  store i8 0, i8* %5441, align 1, !dbg !1137
  call void @llvm.dbg.declare(metadata i8* %5442, metadata !2035, metadata !DIExpression()), !dbg !1139
  %5459 = call i64 @__ctype_get_mb_cur_max() #10, !dbg !1140
  %5460 = icmp eq i64 %5459, 1, !dbg !1141
  %5461 = zext i1 %5460 to i8, !dbg !1139
  store i8 %5461, i8* %5442, align 1, !dbg !1139
  call void @llvm.dbg.declare(metadata i8* %5443, metadata !2036, metadata !DIExpression()), !dbg !1143
  %5462 = load i32, i32* %5432, align 4, !dbg !1144
  %_ = sub i32 0, %5462
  %gen = add i32 %_, 2
  %5463 = and i32 %5462, 2, !dbg !1145
  %5464 = icmp ne i32 %5463, 0, !dbg !1146
  %5465 = zext i1 %5464 to i8, !dbg !1143
  store i8 %5465, i8* %5443, align 1, !dbg !1143
  call void @llvm.dbg.declare(metadata i8* %5444, metadata !2037, metadata !DIExpression()), !dbg !1148
  store i8 0, i8* %5444, align 1, !dbg !1148
  call void @llvm.dbg.declare(metadata i8* %5445, metadata !2038, metadata !DIExpression()), !dbg !1150
  store i8 0, i8* %5445, align 1, !dbg !1150
  call void @llvm.dbg.declare(metadata i8* %5446, metadata !2039, metadata !DIExpression()), !dbg !1152
  store i8 1, i8* %5446, align 1, !dbg !1152
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %66
  %5466 = load i32, i32* %23, align 4, !dbg !1156
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %84
  store i32 5, i32* %23, align 4, !dbg !1158
  store i8 1, i8* %35, align 1, !dbg !1160
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %101
  %5467 = load i8, i8* %35, align 1, !dbg !1162
  %5468 = trunc i8 %5467 to i1, !dbg !1162
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %121
  %5469 = load i64, i64* %29, align 8, !dbg !1166
  %5470 = load i64, i64* %20, align 8, !dbg !1166
  %5471 = icmp ult i64 %5469, %5470, !dbg !1166
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %145
  %5472 = load i64, i64* %29, align 8, !dbg !1169
  %_19 = sub i64 0, %5472
  %gen20 = add i64 %_19, 1
  %_21 = shl i64 %5472, 1
  %_22 = sub i64 0, %5472
  %gen23 = add i64 %_22, 1
  %_24 = sub i64 0, %5472
  %gen25 = add i64 %_24, 1
  %_26 = sub i64 0, %5472
  %gen27 = add i64 %_26, 1
  %_28 = shl i64 %5472, 1
  %_29 = sub i64 %5472, 1
  %gen30 = mul i64 %_29, 1
  %5473 = add i64 %5472, 1, !dbg !1169
  store i64 %5473, i64* %29, align 8, !dbg !1169
  br label %originalBB18

originalBB34alteredBB:                            ; preds = %originalBB34, %164
  br label %originalBB34

originalBB38alteredBB:                            ; preds = %originalBB38, %181
  store i8 1, i8* %33, align 1, !dbg !1170
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.62, i64 0, i64 0), i8** %31, align 8, !dbg !1171
  store i64 1, i64* %32, align 8, !dbg !1172
  br label %originalBB38

originalBB42alteredBB:                            ; preds = %originalBB42, %198
  store i8 1, i8* %33, align 1, !dbg !1174
  store i8 0, i8* %35, align 1, !dbg !1175
  br label %originalBB42

originalBB46alteredBB:                            ; preds = %originalBB46, %218
  %5474 = load i32, i32* %23, align 4, !dbg !1182
  %5475 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11.63, i64 0, i64 0), i32 %5474), !dbg !1184
  store i8* %5475, i8** %26, align 8, !dbg !1185
  %5476 = load i32, i32* %23, align 4, !dbg !1186
  %5477 = call i8* @gettext_quote(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.64, i64 0, i64 0), i32 %5476), !dbg !1187
  store i8* %5477, i8** %27, align 8, !dbg !1188
  br label %originalBB46

originalBB50alteredBB:                            ; preds = %originalBB50, %242
  %5478 = load i8*, i8** %26, align 8, !dbg !1193
  store i8* %5478, i8** %31, align 8, !dbg !1195
  br label %originalBB50

originalBB54alteredBB:                            ; preds = %originalBB54, %275
  %5479 = load i64, i64* %29, align 8, !dbg !1205
  %_55 = sub i64 0, %5479
  %gen56 = add i64 %_55, 1
  %_57 = shl i64 %5479, 1
  %_58 = sub i64 %5479, 1
  %gen59 = mul i64 %_58, 1
  %5480 = add i64 %5479, 1, !dbg !1205
  store i64 %5480, i64* %29, align 8, !dbg !1205
  br label %originalBB54

originalBB63alteredBB:                            ; preds = %originalBB63, %294
  br label %originalBB63

originalBB67alteredBB:                            ; preds = %originalBB67, %311
  %5481 = load i8*, i8** %31, align 8, !dbg !1206
  %5482 = getelementptr inbounds i8, i8* %5481, i32 1, !dbg !1206
  store i8* %5482, i8** %31, align 8, !dbg !1206
  br label %originalBB67

originalBB71alteredBB:                            ; preds = %originalBB71, %331
  store i8 1, i8* %33, align 1, !dbg !1210
  %5483 = load i8*, i8** %27, align 8, !dbg !1211
  store i8* %5483, i8** %31, align 8, !dbg !1212
  %5484 = load i8*, i8** %31, align 8, !dbg !1213
  %5485 = call i64 @strlen(i8* %5484) #13, !dbg !1214
  store i64 %5485, i64* %32, align 8, !dbg !1215
  br label %originalBB71

originalBB75alteredBB:                            ; preds = %originalBB75, %351
  store i8 1, i8* %33, align 1, !dbg !1217
  br label %originalBB75

originalBB79alteredBB:                            ; preds = %originalBB79, %369
  %5486 = load i8, i8* %35, align 1, !dbg !1221
  %5487 = trunc i8 %5486 to i1, !dbg !1221
  br label %originalBB79

originalBB83alteredBB:                            ; preds = %originalBB83, %388
  store i8 1, i8* %33, align 1, !dbg !1224
  br label %originalBB83

originalBB87alteredBB:                            ; preds = %originalBB87, %405
  br label %originalBB87

originalBB91alteredBB:                            ; preds = %originalBB91, %422
  store i32 2, i32* %23, align 4, !dbg !1227
  %5488 = load i8, i8* %35, align 1, !dbg !1228
  %5489 = trunc i8 %5488 to i1, !dbg !1228
  br label %originalBB91

originalBB95alteredBB:                            ; preds = %originalBB95, %441
  br label %originalBB95

originalBB99alteredBB:                            ; preds = %originalBB99, %458
  %5490 = load i64, i64* %29, align 8, !dbg !1232
  %5491 = load i64, i64* %20, align 8, !dbg !1232
  %5492 = icmp ult i64 %5490, %5491, !dbg !1232
  br label %originalBB99

originalBB103alteredBB:                           ; preds = %originalBB103, %478
  %5493 = load i8*, i8** %19, align 8, !dbg !1232
  %5494 = load i64, i64* %29, align 8, !dbg !1232
  %5495 = getelementptr inbounds i8, i8* %5493, i64 %5494, !dbg !1232
  store i8 39, i8* %5495, align 1, !dbg !1232
  br label %originalBB103

originalBB107alteredBB:                           ; preds = %originalBB107, %501
  br label %originalBB107

originalBB111alteredBB:                           ; preds = %originalBB111, %518
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.64, i64 0, i64 0), i8** %31, align 8, !dbg !1236
  store i64 1, i64* %32, align 8, !dbg !1237
  br label %originalBB111

originalBB115alteredBB:                           ; preds = %originalBB115, %536
  call void @abort() #12, !dbg !1241
  br label %originalBB115

originalBB119alteredBB:                           ; preds = %originalBB119, %553
  store i64 0, i64* %28, align 8, !dbg !1242
  br label %originalBB119

originalBB123alteredBB:                           ; preds = %originalBB123, %570
  %5496 = load i64, i64* %22, align 8, !dbg !1245
  %5497 = icmp eq i64 %5496, -1, !dbg !1247
  br label %originalBB123

originalBB127alteredBB:                           ; preds = %originalBB127, %589
  %5498 = load i8*, i8** %21, align 8, !dbg !1248
  %5499 = load i64, i64* %28, align 8, !dbg !1249
  %5500 = getelementptr inbounds i8, i8* %5498, i64 %5499, !dbg !1248
  %5501 = load i8, i8* %5500, align 1, !dbg !1248
  %5502 = sext i8 %5501 to i32, !dbg !1248
  %5503 = icmp eq i32 %5502, 0, !dbg !1250
  %5504 = zext i1 %5503 to i32, !dbg !1250
  br label %originalBB127

originalBB131alteredBB:                           ; preds = %originalBB131, %613
  %5505 = load i64, i64* %28, align 8, !dbg !1251
  %5506 = load i64, i64* %22, align 8, !dbg !1252
  %5507 = icmp eq i64 %5505, %5506, !dbg !1253
  %5508 = zext i1 %5507 to i32, !dbg !1253
  br label %originalBB131

originalBB135alteredBB:                           ; preds = %originalBB135, %634
  %5509 = icmp ne i32 %635, 0, !dbg !1254
  %_136 = sub i1 false, %5509
  %gen137 = add i1 %_136, true
  %_138 = sub i1 false, %5509
  %gen139 = add i1 %_138, true
  %_140 = sub i1 false, %5509
  %gen141 = add i1 %_140, true
  %_142 = sub i1 %5509, true
  %gen143 = mul i1 %_142, true
  %_144 = sub i1 false, %5509
  %gen145 = add i1 %_144, true
  %5510 = xor i1 %5509, true, !dbg !1254
  br label %originalBB135

originalBB149alteredBB:                           ; preds = %originalBB149, %657
  %5511 = load i32, i32* %23, align 4, !dbg !1270
  %5512 = icmp ne i32 %5511, 2, !dbg !1271
  br label %originalBB149

originalBB153alteredBB:                           ; preds = %originalBB153, %676
  %5513 = load i64, i64* %32, align 8, !dbg !1273
  %5514 = icmp ne i64 %5513, 0, !dbg !1273
  br label %originalBB153

originalBB157alteredBB:                           ; preds = %originalBB157, %695
  %5515 = load i64, i64* %28, align 8, !dbg !1275
  %5516 = load i64, i64* %32, align 8, !dbg !1276
  %_158 = sub i64 %5515, %5516
  %gen159 = mul i64 %_158, %5516
  %_160 = sub i64 %5515, %5516
  %gen161 = mul i64 %_160, %5516
  %_162 = sub i64 0, %5515
  %gen163 = add i64 %_162, %5516
  %_164 = sub i64 0, %5515
  %gen165 = add i64 %_164, %5516
  %_166 = shl i64 %5515, %5516
  %_167 = shl i64 %5515, %5516
  %_168 = sub i64 0, %5515
  %gen169 = add i64 %_168, %5516
  %_170 = shl i64 %5515, %5516
  %5517 = add i64 %5515, %5516, !dbg !1277
  %5518 = load i64, i64* %22, align 8, !dbg !1278
  %5519 = icmp eq i64 %5518, -1, !dbg !1279
  br label %originalBB157

originalBB174alteredBB:                           ; preds = %originalBB174, %720
  %5520 = load i8*, i8** %21, align 8, !dbg !1283
  %5521 = call i64 @strlen(i8* %5520) #13, !dbg !1284
  store i64 %5521, i64* %22, align 8, !dbg !1285
  br label %originalBB174

originalBB178alteredBB:                           ; preds = %originalBB178, %739
  %5522 = load i64, i64* %22, align 8, !dbg !1286
  br label %originalBB178

originalBB182alteredBB:                           ; preds = %originalBB182, %757
  %5523 = icmp ule i64 %706, %758, !dbg !1287
  br label %originalBB182

originalBB186alteredBB:                           ; preds = %originalBB186, %776
  %5524 = load i8*, i8** %21, align 8, !dbg !1289
  %5525 = load i64, i64* %28, align 8, !dbg !1290
  %5526 = getelementptr inbounds i8, i8* %5524, i64 %5525, !dbg !1291
  %5527 = load i8*, i8** %31, align 8, !dbg !1292
  %5528 = load i64, i64* %32, align 8, !dbg !1293
  %5529 = call i32 @memcmp(i8* %5526, i8* %5527, i64 %5528) #13, !dbg !1294
  %5530 = icmp eq i32 %5529, 0, !dbg !1295
  br label %originalBB186

originalBB190alteredBB:                           ; preds = %originalBB190, %800
  %5531 = load i8, i8* %35, align 1, !dbg !1297
  %5532 = trunc i8 %5531 to i1, !dbg !1297
  br label %originalBB190

originalBB194alteredBB:                           ; preds = %originalBB194, %820
  store i8 1, i8* %41, align 1, !dbg !1302
  br label %originalBB194

originalBB198alteredBB:                           ; preds = %originalBB198, %837
  %5533 = load i8*, i8** %21, align 8, !dbg !1304
  %5534 = load i64, i64* %28, align 8, !dbg !1305
  %5535 = getelementptr inbounds i8, i8* %5533, i64 %5534, !dbg !1304
  %5536 = load i8, i8* %5535, align 1, !dbg !1304
  store i8 %5536, i8* %39, align 1, !dbg !1306
  %5537 = load i8, i8* %39, align 1, !dbg !1307
  %5538 = zext i8 %5537 to i32, !dbg !1307
  br label %originalBB198

originalBB202alteredBB:                           ; preds = %originalBB202, %863
  br label %originalBB202

originalBB206alteredBB:                           ; preds = %originalBB206, %880
  %5539 = load i8, i8* %35, align 1, !dbg !1315
  %5540 = trunc i8 %5539 to i1, !dbg !1315
  br label %originalBB206

originalBB210alteredBB:                           ; preds = %originalBB210, %903
  %5541 = load i8, i8* %36, align 1, !dbg !1319
  %5542 = trunc i8 %5541 to i1, !dbg !1319
  br label %originalBB210

originalBB214alteredBB:                           ; preds = %originalBB214, %931
  %5543 = load i64, i64* %29, align 8, !dbg !1326
  %_215 = shl i64 %5543, 1
  %_216 = sub i64 %5543, 1
  %gen217 = mul i64 %_216, 1
  %_218 = sub i64 0, %5543
  %gen219 = add i64 %_218, 1
  %_220 = sub i64 %5543, 1
  %gen221 = mul i64 %_220, 1
  %_222 = shl i64 %5543, 1
  %5544 = add i64 %5543, 1, !dbg !1326
  store i64 %5544, i64* %29, align 8, !dbg !1326
  br label %originalBB214

originalBB226alteredBB:                           ; preds = %originalBB226, %950
  br label %originalBB226

originalBB230alteredBB:                           ; preds = %originalBB230, %967
  %5545 = load i64, i64* %29, align 8, !dbg !1327
  %5546 = load i64, i64* %20, align 8, !dbg !1327
  %5547 = icmp ult i64 %5545, %5546, !dbg !1327
  br label %originalBB230

originalBB234alteredBB:                           ; preds = %originalBB234, %987
  %5548 = load i8*, i8** %19, align 8, !dbg !1327
  %5549 = load i64, i64* %29, align 8, !dbg !1327
  %5550 = getelementptr inbounds i8, i8* %5548, i64 %5549, !dbg !1327
  store i8 36, i8* %5550, align 1, !dbg !1327
  br label %originalBB234

originalBB238alteredBB:                           ; preds = %originalBB238, %1010
  br label %originalBB238

originalBB242alteredBB:                           ; preds = %originalBB242, %1031
  %5551 = load i8*, i8** %19, align 8, !dbg !1331
  %5552 = load i64, i64* %29, align 8, !dbg !1331
  %5553 = getelementptr inbounds i8, i8* %5551, i64 %5552, !dbg !1331
  store i8 39, i8* %5553, align 1, !dbg !1331
  br label %originalBB242

originalBB246alteredBB:                           ; preds = %originalBB246, %1054
  store i8 1, i8* %36, align 1, !dbg !1321
  br label %originalBB246

originalBB250alteredBB:                           ; preds = %originalBB250, %1071
  br label %originalBB250

originalBB254alteredBB:                           ; preds = %originalBB254, %1088
  %5554 = load i64, i64* %29, align 8, !dbg !1335
  %5555 = load i64, i64* %20, align 8, !dbg !1335
  %5556 = icmp ult i64 %5554, %5555, !dbg !1335
  br label %originalBB254

originalBB258alteredBB:                           ; preds = %originalBB258, %1108
  %5557 = load i8*, i8** %19, align 8, !dbg !1335
  %5558 = load i64, i64* %29, align 8, !dbg !1335
  %5559 = getelementptr inbounds i8, i8* %5557, i64 %5558, !dbg !1335
  store i8 92, i8* %5559, align 1, !dbg !1335
  br label %originalBB258

originalBB262alteredBB:                           ; preds = %originalBB262, %1128
  %5560 = load i64, i64* %29, align 8, !dbg !1338
  %_263 = shl i64 %5560, 1
  %_264 = sub i64 %5560, 1
  %gen265 = mul i64 %_264, 1
  %5561 = add i64 %5560, 1, !dbg !1338
  store i64 %5561, i64* %29, align 8, !dbg !1338
  br label %originalBB262

originalBB270alteredBB:                           ; preds = %originalBB270, %1147
  br label %originalBB270

originalBB274alteredBB:                           ; preds = %originalBB274, %1172
  %5562 = load i8*, i8** %21, align 8, !dbg !1348
  %5563 = load i64, i64* %28, align 8, !dbg !1349
  %_275 = shl i64 %5563, 1
  %5564 = add i64 %5563, 1, !dbg !1350
  %5565 = getelementptr inbounds i8, i8* %5562, i64 %5564, !dbg !1348
  %5566 = load i8, i8* %5565, align 1, !dbg !1348
  %5567 = sext i8 %5566 to i32, !dbg !1348
  %5568 = icmp sle i32 48, %5567, !dbg !1351
  br label %originalBB274

originalBB279alteredBB:                           ; preds = %originalBB279, %1196
  %5569 = load i8*, i8** %21, align 8, !dbg !1353
  %5570 = load i64, i64* %28, align 8, !dbg !1354
  %_280 = sub i64 %5570, 1
  %gen281 = mul i64 %_280, 1
  %_282 = sub i64 %5570, 1
  %gen283 = mul i64 %_282, 1
  %_284 = sub i64 0, %5570
  %gen285 = add i64 %_284, 1
  %_286 = shl i64 %5570, 1
  %_287 = sub i64 %5570, 1
  %gen288 = mul i64 %_287, 1
  %_289 = shl i64 %5570, 1
  %_290 = sub i64 0, %5570
  %gen291 = add i64 %_290, 1
  %_292 = sub i64 %5570, 1
  %gen293 = mul i64 %_292, 1
  %5571 = add i64 %5570, 1, !dbg !1355
  %5572 = getelementptr inbounds i8, i8* %5569, i64 %5571, !dbg !1353
  %5573 = load i8, i8* %5572, align 1, !dbg !1353
  %5574 = sext i8 %5573 to i32, !dbg !1353
  %5575 = icmp sle i32 %5574, 57, !dbg !1356
  br label %originalBB279

originalBB298alteredBB:                           ; preds = %originalBB298, %1220
  br label %originalBB298

originalBB302alteredBB:                           ; preds = %originalBB302, %1237
  %5576 = load i64, i64* %29, align 8, !dbg !1360
  %5577 = load i64, i64* %20, align 8, !dbg !1360
  %5578 = icmp ult i64 %5576, %5577, !dbg !1360
  br label %originalBB302

originalBB306alteredBB:                           ; preds = %originalBB306, %1257
  %5579 = load i8*, i8** %19, align 8, !dbg !1360
  %5580 = load i64, i64* %29, align 8, !dbg !1360
  %5581 = getelementptr inbounds i8, i8* %5579, i64 %5580, !dbg !1360
  store i8 48, i8* %5581, align 1, !dbg !1360
  br label %originalBB306

originalBB310alteredBB:                           ; preds = %originalBB310, %1277
  %5582 = load i64, i64* %29, align 8, !dbg !1363
  %_311 = shl i64 %5582, 1
  %_312 = sub i64 0, %5582
  %gen313 = add i64 %_312, 1
  %_314 = sub i64 0, %5582
  %gen315 = add i64 %_314, 1
  %_316 = shl i64 %5582, 1
  %_317 = sub i64 0, %5582
  %gen318 = add i64 %_317, 1
  %_319 = shl i64 %5582, 1
  %5583 = add i64 %5582, 1, !dbg !1363
  store i64 %5583, i64* %29, align 8, !dbg !1363
  br label %originalBB310

originalBB323alteredBB:                           ; preds = %originalBB323, %1301
  %5584 = load i8*, i8** %19, align 8, !dbg !1365
  %5585 = load i64, i64* %29, align 8, !dbg !1365
  %5586 = getelementptr inbounds i8, i8* %5584, i64 %5585, !dbg !1365
  store i8 48, i8* %5586, align 1, !dbg !1365
  br label %originalBB323

originalBB327alteredBB:                           ; preds = %originalBB327, %1321
  %5587 = load i64, i64* %29, align 8, !dbg !1368
  %_328 = sub i64 %5587, 1
  %gen329 = mul i64 %_328, 1
  %_330 = sub i64 %5587, 1
  %gen331 = mul i64 %_330, 1
  %_332 = sub i64 0, %5587
  %gen333 = add i64 %_332, 1
  %_334 = sub i64 %5587, 1
  %gen335 = mul i64 %_334, 1
  %5588 = add i64 %5587, 1, !dbg !1368
  store i64 %5588, i64* %29, align 8, !dbg !1368
  br label %originalBB327

originalBB339alteredBB:                           ; preds = %originalBB339, %1340
  br label %originalBB339

originalBB343alteredBB:                           ; preds = %originalBB343, %1357
  store i8 48, i8* %39, align 1, !dbg !1370
  br label %originalBB343

originalBB347alteredBB:                           ; preds = %originalBB347, %1374
  %5589 = load i32, i32* %24, align 4, !dbg !1372
  %_348 = sub i32 %5589, 1
  %gen349 = mul i32 %_348, 1
  %5590 = and i32 %5589, 1, !dbg !1374
  %5591 = icmp ne i32 %5590, 0, !dbg !1374
  br label %originalBB347

originalBB353alteredBB:                           ; preds = %originalBB353, %1394
  br label %originalBB353

originalBB357alteredBB:                           ; preds = %originalBB357, %1411
  br label %originalBB357

originalBB361alteredBB:                           ; preds = %originalBB361, %1428
  br label %originalBB361

originalBB365alteredBB:                           ; preds = %originalBB365, %1445
  %5592 = load i32, i32* %23, align 4, !dbg !1378
  br label %originalBB365

originalBB369alteredBB:                           ; preds = %originalBB369, %1466
  br label %originalBB369

originalBB373alteredBB:                           ; preds = %originalBB373, %1483
  br label %originalBB373

originalBB377alteredBB:                           ; preds = %originalBB377, %1500
  %5593 = load i32, i32* %24, align 4, !dbg !1386
  %_378 = sub i32 %5593, 4
  %gen379 = mul i32 %_378, 4
  %_380 = sub i32 %5593, 4
  %gen381 = mul i32 %_380, 4
  %_382 = sub i32 %5593, 4
  %gen383 = mul i32 %_382, 4
  %_384 = sub i32 %5593, 4
  %gen385 = mul i32 %_384, 4
  %_386 = sub i32 %5593, 4
  %gen387 = mul i32 %_386, 4
  %5594 = and i32 %5593, 4, !dbg !1388
  %5595 = icmp ne i32 %5594, 0, !dbg !1388
  br label %originalBB377

originalBB391alteredBB:                           ; preds = %originalBB391, %1520
  %5596 = load i64, i64* %28, align 8, !dbg !1390
  %_392 = sub i64 %5596, 2
  %gen393 = mul i64 %_392, 2
  %_394 = shl i64 %5596, 2
  %_395 = shl i64 %5596, 2
  %_396 = sub i64 0, %5596
  %gen397 = add i64 %_396, 2
  %_398 = shl i64 %5596, 2
  %_399 = shl i64 %5596, 2
  %_400 = sub i64 %5596, 2
  %gen401 = mul i64 %_400, 2
  %5597 = add i64 %5596, 2, !dbg !1391
  %5598 = load i64, i64* %22, align 8, !dbg !1392
  %5599 = icmp ult i64 %5597, %5598, !dbg !1393
  br label %originalBB391

originalBB405alteredBB:                           ; preds = %originalBB405, %1541
  %5600 = load i8*, i8** %21, align 8, !dbg !1395
  %5601 = load i64, i64* %28, align 8, !dbg !1396
  %_406 = sub i64 0, %5601
  %gen407 = add i64 %_406, 1
  %_408 = shl i64 %5601, 1
  %_409 = shl i64 %5601, 1
  %_410 = shl i64 %5601, 1
  %_411 = shl i64 %5601, 1
  %_412 = shl i64 %5601, 1
  %_413 = shl i64 %5601, 1
  %5602 = add i64 %5601, 1, !dbg !1397
  %5603 = getelementptr inbounds i8, i8* %5600, i64 %5602, !dbg !1395
  %5604 = load i8, i8* %5603, align 1, !dbg !1395
  %5605 = sext i8 %5604 to i32, !dbg !1395
  %5606 = icmp eq i32 %5605, 63, !dbg !1398
  br label %originalBB405

originalBB417alteredBB:                           ; preds = %originalBB417, %1565
  %5607 = load i8*, i8** %21, align 8, !dbg !1400
  %5608 = load i64, i64* %28, align 8, !dbg !1401
  %_418 = shl i64 %5608, 2
  %_419 = sub i64 %5608, 2
  %gen420 = mul i64 %_419, 2
  %5609 = add i64 %5608, 2, !dbg !1402
  %5610 = getelementptr inbounds i8, i8* %5607, i64 %5609, !dbg !1400
  %5611 = load i8, i8* %5610, align 1, !dbg !1400
  %5612 = sext i8 %5611 to i32, !dbg !1400
  br label %originalBB417

originalBB424alteredBB:                           ; preds = %originalBB424, %1588
  %5613 = load i8, i8* %35, align 1, !dbg !1404
  %5614 = trunc i8 %5613 to i1, !dbg !1404
  br label %originalBB424

originalBB428alteredBB:                           ; preds = %originalBB428, %1608
  %5615 = load i8*, i8** %21, align 8, !dbg !1409
  %5616 = load i64, i64* %28, align 8, !dbg !1410
  %_429 = sub i64 %5616, 2
  %gen430 = mul i64 %_429, 2
  %5617 = add i64 %5616, 2, !dbg !1411
  %5618 = getelementptr inbounds i8, i8* %5615, i64 %5617, !dbg !1409
  %5619 = load i8, i8* %5618, align 1, !dbg !1409
  store i8 %5619, i8* %39, align 1, !dbg !1412
  %5620 = load i64, i64* %28, align 8, !dbg !1413
  %_431 = shl i64 %5620, 2
  %_432 = sub i64 %5620, 2
  %gen433 = mul i64 %_432, 2
  %_434 = sub i64 %5620, 2
  %gen435 = mul i64 %_434, 2
  %5621 = add i64 %5620, 2, !dbg !1413
  store i64 %5621, i64* %28, align 8, !dbg !1413
  br label %originalBB428

originalBB439alteredBB:                           ; preds = %originalBB439, %1632
  %5622 = load i64, i64* %29, align 8, !dbg !1415
  %5623 = load i64, i64* %20, align 8, !dbg !1415
  %5624 = icmp ult i64 %5622, %5623, !dbg !1415
  br label %originalBB439

originalBB443alteredBB:                           ; preds = %originalBB443, %1656
  %5625 = load i64, i64* %29, align 8, !dbg !1418
  %_444 = sub i64 0, %5625
  %gen445 = add i64 %_444, 1
  %_446 = sub i64 %5625, 1
  %gen447 = mul i64 %_446, 1
  %_448 = sub i64 0, %5625
  %gen449 = add i64 %_448, 1
  %_450 = sub i64 %5625, 1
  %gen451 = mul i64 %_450, 1
  %5626 = add i64 %5625, 1, !dbg !1418
  store i64 %5626, i64* %29, align 8, !dbg !1418
  br label %originalBB443

originalBB455alteredBB:                           ; preds = %originalBB455, %1675
  br label %originalBB455

originalBB459alteredBB:                           ; preds = %originalBB459, %1692
  %5627 = load i64, i64* %29, align 8, !dbg !1420
  %5628 = load i64, i64* %20, align 8, !dbg !1420
  %5629 = icmp ult i64 %5627, %5628, !dbg !1420
  br label %originalBB459

originalBB463alteredBB:                           ; preds = %originalBB463, %1716
  %5630 = load i64, i64* %29, align 8, !dbg !1423
  %_464 = shl i64 %5630, 1
  %5631 = add i64 %5630, 1, !dbg !1423
  store i64 %5631, i64* %29, align 8, !dbg !1423
  br label %originalBB463

originalBB468alteredBB:                           ; preds = %originalBB468, %1736
  %5632 = load i64, i64* %29, align 8, !dbg !1425
  %5633 = load i64, i64* %20, align 8, !dbg !1425
  %5634 = icmp ult i64 %5632, %5633, !dbg !1425
  br label %originalBB468

originalBB472alteredBB:                           ; preds = %originalBB472, %1760
  %5635 = load i64, i64* %29, align 8, !dbg !1428
  %_473 = shl i64 %5635, 1
  %_474 = sub i64 0, %5635
  %gen475 = add i64 %_474, 1
  %_476 = sub i64 %5635, 1
  %gen477 = mul i64 %_476, 1
  %_478 = sub i64 %5635, 1
  %gen479 = mul i64 %_478, 1
  %_480 = sub i64 0, %5635
  %gen481 = add i64 %_480, 1
  %5636 = add i64 %5635, 1, !dbg !1428
  store i64 %5636, i64* %29, align 8, !dbg !1428
  br label %originalBB472

originalBB485alteredBB:                           ; preds = %originalBB485, %1779
  br label %originalBB485

originalBB489alteredBB:                           ; preds = %originalBB489, %1800
  %5637 = load i8*, i8** %19, align 8, !dbg !1430
  %5638 = load i64, i64* %29, align 8, !dbg !1430
  %5639 = getelementptr inbounds i8, i8* %5637, i64 %5638, !dbg !1430
  store i8 63, i8* %5639, align 1, !dbg !1430
  br label %originalBB489

originalBB493alteredBB:                           ; preds = %originalBB493, %1820
  %5640 = load i64, i64* %29, align 8, !dbg !1433
  %_494 = sub i64 0, %5640
  %gen495 = add i64 %_494, 1
  %_496 = shl i64 %5640, 1
  %5641 = add i64 %5640, 1, !dbg !1433
  store i64 %5641, i64* %29, align 8, !dbg !1433
  br label %originalBB493

originalBB500alteredBB:                           ; preds = %originalBB500, %1839
  br label %originalBB500

originalBB504alteredBB:                           ; preds = %originalBB504, %1856
  br label %originalBB504

originalBB508alteredBB:                           ; preds = %originalBB508, %1873
  br label %originalBB508

originalBB512alteredBB:                           ; preds = %originalBB512, %1890
  br label %originalBB512

originalBB516alteredBB:                           ; preds = %originalBB516, %1907
  br label %originalBB516

originalBB520alteredBB:                           ; preds = %originalBB520, %1924
  br label %originalBB520

originalBB524alteredBB:                           ; preds = %originalBB524, %1941
  store i8 97, i8* %40, align 1, !dbg !1440
  br label %originalBB524

originalBB528alteredBB:                           ; preds = %originalBB528, %1958
  store i8 98, i8* %40, align 1, !dbg !1442
  br label %originalBB528

originalBB532alteredBB:                           ; preds = %originalBB532, %1975
  store i8 102, i8* %40, align 1, !dbg !1444
  br label %originalBB532

originalBB536alteredBB:                           ; preds = %originalBB536, %1992
  store i8 110, i8* %40, align 1, !dbg !1446
  br label %originalBB536

originalBB540alteredBB:                           ; preds = %originalBB540, %2009
  store i8 114, i8* %40, align 1, !dbg !1448
  br label %originalBB540

originalBB544alteredBB:                           ; preds = %originalBB544, %2028
  %5642 = load i8, i8* %39, align 1, !dbg !1454
  store i8 %5642, i8* %40, align 1, !dbg !1455
  %5643 = load i32, i32* %23, align 4, !dbg !1456
  %5644 = icmp eq i32 %5643, 2, !dbg !1458
  br label %originalBB544

originalBB548alteredBB:                           ; preds = %originalBB548, %2056
  %5645 = load i8, i8* %35, align 1, !dbg !1469
  %5646 = trunc i8 %5645 to i1, !dbg !1469
  br label %originalBB548

originalBB552alteredBB:                           ; preds = %originalBB552, %2075
  %5647 = load i64, i64* %32, align 8, !dbg !1471
  %5648 = icmp ne i64 %5647, 0, !dbg !1471
  br label %originalBB552

originalBB556alteredBB:                           ; preds = %originalBB556, %2094
  br label %originalBB556

originalBB560alteredBB:                           ; preds = %originalBB560, %2112
  %5649 = load i32, i32* %23, align 4, !dbg !1476
  %5650 = icmp eq i32 %5649, 2, !dbg !1478
  br label %originalBB560

originalBB564alteredBB:                           ; preds = %originalBB564, %2131
  %5651 = load i8, i8* %35, align 1, !dbg !1480
  %5652 = trunc i8 %5651 to i1, !dbg !1480
  br label %originalBB564

originalBB568alteredBB:                           ; preds = %originalBB568, %2150
  br label %originalBB568

originalBB572alteredBB:                           ; preds = %originalBB572, %2167
  br label %originalBB572

originalBB576alteredBB:                           ; preds = %originalBB576, %2184
  %5653 = load i8, i8* %33, align 1, !dbg !1485
  %5654 = trunc i8 %5653 to i1, !dbg !1485
  br label %originalBB576

originalBB580alteredBB:                           ; preds = %originalBB580, %2205
  br label %originalBB580

originalBB584alteredBB:                           ; preds = %originalBB584, %2222
  %5655 = load i64, i64* %22, align 8, !dbg !1493
  %5656 = icmp eq i64 %5655, -1, !dbg !1495
  br label %originalBB584

originalBB588alteredBB:                           ; preds = %originalBB588, %2247
  %5657 = load i64, i64* %22, align 8, !dbg !1499
  %5658 = icmp eq i64 %5657, 1, !dbg !1500
  br label %originalBB588

originalBB592alteredBB:                           ; preds = %originalBB592, %2266
  br label %originalBB592

originalBB596alteredBB:                           ; preds = %originalBB596, %2283
  br label %originalBB596

originalBB600alteredBB:                           ; preds = %originalBB600, %2300
  %5659 = load i64, i64* %28, align 8, !dbg !1503
  %5660 = icmp ne i64 %5659, 0, !dbg !1505
  br label %originalBB600

originalBB604alteredBB:                           ; preds = %originalBB604, %2319
  br label %originalBB604

originalBB608alteredBB:                           ; preds = %originalBB608, %2336
  br label %originalBB608

originalBB612alteredBB:                           ; preds = %originalBB612, %2353
  store i8 1, i8* %43, align 1, !dbg !1509
  br label %originalBB612

originalBB616alteredBB:                           ; preds = %originalBB616, %2370
  %5661 = load i32, i32* %23, align 4, !dbg !1511
  %5662 = icmp eq i32 %5661, 2, !dbg !1513
  br label %originalBB616

originalBB620alteredBB:                           ; preds = %originalBB620, %2393
  br label %originalBB620

originalBB624alteredBB:                           ; preds = %originalBB624, %2410
  store i8 1, i8* %37, align 1, !dbg !1519
  store i8 1, i8* %43, align 1, !dbg !1520
  %5663 = load i32, i32* %23, align 4, !dbg !1521
  %5664 = icmp eq i32 %5663, 2, !dbg !1523
  br label %originalBB624

originalBB628alteredBB:                           ; preds = %originalBB628, %2433
  %5665 = load i64, i64* %20, align 8, !dbg !1530
  %5666 = icmp ne i64 %5665, 0, !dbg !1530
  br label %originalBB628

originalBB632alteredBB:                           ; preds = %originalBB632, %2452
  %5667 = load i64, i64* %30, align 8, !dbg !1533
  %5668 = icmp ne i64 %5667, 0, !dbg !1533
  br label %originalBB632

originalBB636alteredBB:                           ; preds = %originalBB636, %2471
  %5669 = load i64, i64* %20, align 8, !dbg !1535
  store i64 %5669, i64* %30, align 8, !dbg !1537
  store i64 0, i64* %20, align 8, !dbg !1538
  br label %originalBB636

originalBB640alteredBB:                           ; preds = %originalBB640, %2489
  br label %originalBB640

originalBB644alteredBB:                           ; preds = %originalBB644, %2506
  %5670 = load i64, i64* %29, align 8, !dbg !1541
  %5671 = load i64, i64* %20, align 8, !dbg !1541
  %5672 = icmp ult i64 %5670, %5671, !dbg !1541
  br label %originalBB644

originalBB648alteredBB:                           ; preds = %originalBB648, %2526
  %5673 = load i8*, i8** %19, align 8, !dbg !1541
  %5674 = load i64, i64* %29, align 8, !dbg !1541
  %5675 = getelementptr inbounds i8, i8* %5673, i64 %5674, !dbg !1541
  store i8 39, i8* %5675, align 1, !dbg !1541
  br label %originalBB648

originalBB652alteredBB:                           ; preds = %originalBB652, %2546
  %5676 = load i64, i64* %29, align 8, !dbg !1544
  %_653 = sub i64 %5676, 1
  %gen654 = mul i64 %_653, 1
  %_655 = shl i64 %5676, 1
  %_656 = sub i64 0, %5676
  %gen657 = add i64 %_656, 1
  %_658 = sub i64 0, %5676
  %gen659 = add i64 %_658, 1
  %_660 = sub i64 %5676, 1
  %gen661 = mul i64 %_660, 1
  %_662 = sub i64 %5676, 1
  %gen663 = mul i64 %_662, 1
  %5677 = add i64 %5676, 1, !dbg !1544
  store i64 %5677, i64* %29, align 8, !dbg !1544
  br label %originalBB652

originalBB667alteredBB:                           ; preds = %originalBB667, %2565
  br label %originalBB667

originalBB671alteredBB:                           ; preds = %originalBB671, %2582
  %5678 = load i64, i64* %29, align 8, !dbg !1546
  %5679 = load i64, i64* %20, align 8, !dbg !1546
  %5680 = icmp ult i64 %5678, %5679, !dbg !1546
  br label %originalBB671

originalBB675alteredBB:                           ; preds = %originalBB675, %2606
  %5681 = load i64, i64* %29, align 8, !dbg !1549
  %_676 = sub i64 %5681, 1
  %gen677 = mul i64 %_676, 1
  %5682 = add i64 %5681, 1, !dbg !1549
  store i64 %5682, i64* %29, align 8, !dbg !1549
  br label %originalBB675

originalBB681alteredBB:                           ; preds = %originalBB681, %2625
  br label %originalBB681

originalBB685alteredBB:                           ; preds = %originalBB685, %2642
  %5683 = load i64, i64* %29, align 8, !dbg !1551
  %5684 = load i64, i64* %20, align 8, !dbg !1551
  %5685 = icmp ult i64 %5683, %5684, !dbg !1551
  br label %originalBB685

originalBB689alteredBB:                           ; preds = %originalBB689, %2666
  %5686 = load i64, i64* %29, align 8, !dbg !1554
  %_690 = shl i64 %5686, 1
  %_691 = sub i64 0, %5686
  %gen692 = add i64 %_691, 1
  %_693 = sub i64 %5686, 1
  %gen694 = mul i64 %_693, 1
  %_695 = sub i64 %5686, 1
  %gen696 = mul i64 %_695, 1
  %_697 = shl i64 %5686, 1
  %_698 = sub i64 %5686, 1
  %gen699 = mul i64 %_698, 1
  %_700 = sub i64 0, %5686
  %gen701 = add i64 %_700, 1
  %5687 = add i64 %5686, 1, !dbg !1554
  store i64 %5687, i64* %29, align 8, !dbg !1554
  br label %originalBB689

originalBB705alteredBB:                           ; preds = %originalBB705, %2685
  store i8 0, i8* %36, align 1, !dbg !1555
  br label %originalBB705

originalBB709alteredBB:                           ; preds = %originalBB709, %2702
  br label %originalBB709

originalBB713alteredBB:                           ; preds = %originalBB713, %2719
  store i8 1, i8* %43, align 1, !dbg !1558
  br label %originalBB713

originalBB717alteredBB:                           ; preds = %originalBB717, %2736
  %5688 = load i8, i8* %34, align 1, !dbg !1565
  %5689 = trunc i8 %5688 to i1, !dbg !1565
  br label %originalBB717

originalBB721alteredBB:                           ; preds = %originalBB721, %2767
  %5690 = bitcast %struct.__mbstate_t* %46 to i8*, !dbg !1592
  call void @llvm.memset.p0i8.i64(i8* align 4 %5690, i8 0, i64 8, i1 false), !dbg !1592
  store i64 0, i64* %44, align 8, !dbg !1593
  store i8 1, i8* %45, align 1, !dbg !1594
  %5691 = load i64, i64* %22, align 8, !dbg !1595
  %5692 = icmp eq i64 %5691, -1, !dbg !1597
  br label %originalBB721

originalBB725alteredBB:                           ; preds = %originalBB725, %2790
  br label %originalBB725

originalBB729alteredBB:                           ; preds = %originalBB729, %2821
  br label %originalBB729

originalBB733alteredBB:                           ; preds = %originalBB733, %2841
  store i8 0, i8* %45, align 1, !dbg !1629
  br label %originalBB733

originalBB737alteredBB:                           ; preds = %originalBB737, %2858
  %5693 = load i64, i64* %48, align 8, !dbg !1632
  %5694 = icmp eq i64 %5693, -2, !dbg !1634
  br label %originalBB737

originalBB741alteredBB:                           ; preds = %originalBB741, %2878
  %5695 = load i64, i64* %28, align 8, !dbg !1639
  %5696 = load i64, i64* %44, align 8, !dbg !1640
  %_742 = sub i64 %5695, %5696
  %gen743 = mul i64 %_742, %5696
  %_744 = shl i64 %5695, %5696
  %_745 = sub i64 0, %5695
  %gen746 = add i64 %_745, %5696
  %5697 = add i64 %5695, %5696, !dbg !1641
  %5698 = load i64, i64* %22, align 8, !dbg !1642
  %5699 = icmp ult i64 %5697, %5698, !dbg !1643
  br label %originalBB741

originalBB750alteredBB:                           ; preds = %originalBB750, %2909
  br label %originalBB750

originalBB754alteredBB:                           ; preds = %originalBB754, %2927
  %5700 = load i64, i64* %44, align 8, !dbg !1650
  %_755 = sub i64 0, %5700
  %gen756 = add i64 %_755, 1
  %_757 = shl i64 %5700, 1
  %_758 = shl i64 %5700, 1
  %5701 = add i64 %5700, 1, !dbg !1650
  store i64 %5701, i64* %44, align 8, !dbg !1650
  br label %originalBB754

originalBB762alteredBB:                           ; preds = %originalBB762, %2947
  %5702 = load i8, i8* %35, align 1, !dbg !1653
  %5703 = trunc i8 %5702 to i1, !dbg !1653
  br label %originalBB762

originalBB766alteredBB:                           ; preds = %originalBB766, %2985
  br label %originalBB766

originalBB770alteredBB:                           ; preds = %originalBB770, %3002
  br label %originalBB770

originalBB774alteredBB:                           ; preds = %originalBB774, %3022
  br label %originalBB774

originalBB778alteredBB:                           ; preds = %originalBB778, %3039
  %5704 = load i32, i32* %47, align 4, !dbg !1687
  %5705 = call i32 @iswprint(i32 %5704) #10, !dbg !1689
  %5706 = icmp ne i32 %5705, 0, !dbg !1689
  br label %originalBB778

originalBB782alteredBB:                           ; preds = %originalBB782, %3059
  store i8 0, i8* %45, align 1, !dbg !1691
  br label %originalBB782

originalBB786alteredBB:                           ; preds = %originalBB786, %3076
  %5707 = load i64, i64* %48, align 8, !dbg !1693
  %5708 = load i64, i64* %44, align 8, !dbg !1694
  %_787 = sub i64 0, %5708
  %gen788 = add i64 %_787, %5707
  %_789 = sub i64 %5708, %5707
  %gen790 = mul i64 %_789, %5707
  %_791 = sub i64 0, %5708
  %gen792 = add i64 %_791, %5707
  %_793 = shl i64 %5708, %5707
  %_794 = sub i64 0, %5708
  %gen795 = add i64 %_794, %5707
  %5709 = add i64 %5708, %5707, !dbg !1694
  store i64 %5709, i64* %44, align 8, !dbg !1694
  br label %originalBB786

originalBB799alteredBB:                           ; preds = %originalBB799, %3096
  br label %originalBB799

originalBB803alteredBB:                           ; preds = %originalBB803, %3113
  br label %originalBB803

originalBB807alteredBB:                           ; preds = %originalBB807, %3130
  br label %originalBB807

originalBB811alteredBB:                           ; preds = %originalBB811, %3152
  %5710 = load i8, i8* %45, align 1, !dbg !1700
  %5711 = trunc i8 %5710 to i1, !dbg !1700
  %5712 = zext i1 %5711 to i8, !dbg !1701
  store i8 %5712, i8* %43, align 1, !dbg !1701
  %5713 = load i64, i64* %44, align 8, !dbg !1702
  %5714 = icmp ult i64 1, %5713, !dbg !1704
  br label %originalBB811

originalBB815alteredBB:                           ; preds = %originalBB815, %3174
  %5715 = load i8, i8* %33, align 1, !dbg !1706
  %5716 = trunc i8 %5715 to i1, !dbg !1706
  br label %originalBB815

originalBB819alteredBB:                           ; preds = %originalBB819, %3200
  %5717 = load i8, i8* %33, align 1, !dbg !1717
  %5718 = trunc i8 %5717 to i1, !dbg !1717
  br label %originalBB819

originalBB823alteredBB:                           ; preds = %originalBB823, %3219
  %5719 = load i8, i8* %45, align 1, !dbg !1723
  %5720 = trunc i8 %5719 to i1, !dbg !1723
  br label %originalBB823

originalBB827alteredBB:                           ; preds = %originalBB827, %3238
  br label %originalBB827

originalBB831alteredBB:                           ; preds = %originalBB831, %3258
  br label %originalBB831

originalBB835alteredBB:                           ; preds = %originalBB835, %3275
  store i8 1, i8* %42, align 1, !dbg !1730
  %5721 = load i32, i32* %23, align 4, !dbg !1731
  %5722 = icmp eq i32 %5721, 2, !dbg !1731
  br label %originalBB835

originalBB839alteredBB:                           ; preds = %originalBB839, %3294
  %5723 = load i8, i8* %36, align 1, !dbg !1731
  %5724 = trunc i8 %5723 to i1, !dbg !1731
  br label %originalBB839

originalBB843alteredBB:                           ; preds = %originalBB843, %3313
  br label %originalBB843

originalBB847alteredBB:                           ; preds = %originalBB847, %3334
  %5725 = load i8*, i8** %19, align 8, !dbg !1735
  %5726 = load i64, i64* %29, align 8, !dbg !1735
  %5727 = getelementptr inbounds i8, i8* %5725, i64 %5726, !dbg !1735
  store i8 39, i8* %5727, align 1, !dbg !1735
  br label %originalBB847

originalBB851alteredBB:                           ; preds = %originalBB851, %3357
  br label %originalBB851

originalBB855alteredBB:                           ; preds = %originalBB855, %3374
  %5728 = load i64, i64* %29, align 8, !dbg !1739
  %5729 = load i64, i64* %20, align 8, !dbg !1739
  %5730 = icmp ult i64 %5728, %5729, !dbg !1739
  br label %originalBB855

originalBB859alteredBB:                           ; preds = %originalBB859, %3394
  %5731 = load i8*, i8** %19, align 8, !dbg !1739
  %5732 = load i64, i64* %29, align 8, !dbg !1739
  %5733 = getelementptr inbounds i8, i8* %5731, i64 %5732, !dbg !1739
  store i8 36, i8* %5733, align 1, !dbg !1739
  br label %originalBB859

originalBB863alteredBB:                           ; preds = %originalBB863, %3414
  %5734 = load i64, i64* %29, align 8, !dbg !1742
  %_864 = shl i64 %5734, 1
  %_865 = sub i64 %5734, 1
  %gen866 = mul i64 %_865, 1
  %_867 = shl i64 %5734, 1
  %5735 = add i64 %5734, 1, !dbg !1742
  store i64 %5735, i64* %29, align 8, !dbg !1742
  br label %originalBB863

originalBB871alteredBB:                           ; preds = %originalBB871, %3433
  br label %originalBB871

originalBB875alteredBB:                           ; preds = %originalBB875, %3450
  %5736 = load i64, i64* %29, align 8, !dbg !1743
  %5737 = load i64, i64* %20, align 8, !dbg !1743
  %5738 = icmp ult i64 %5736, %5737, !dbg !1743
  br label %originalBB875

originalBB879alteredBB:                           ; preds = %originalBB879, %3470
  %5739 = load i8*, i8** %19, align 8, !dbg !1743
  %5740 = load i64, i64* %29, align 8, !dbg !1743
  %5741 = getelementptr inbounds i8, i8* %5739, i64 %5740, !dbg !1743
  store i8 39, i8* %5741, align 1, !dbg !1743
  br label %originalBB879

originalBB883alteredBB:                           ; preds = %originalBB883, %3494
  br label %originalBB883

originalBB887alteredBB:                           ; preds = %originalBB887, %3511
  %5742 = load i64, i64* %29, align 8, !dbg !1747
  %5743 = load i64, i64* %20, align 8, !dbg !1747
  %5744 = icmp ult i64 %5742, %5743, !dbg !1747
  br label %originalBB887

originalBB891alteredBB:                           ; preds = %originalBB891, %3531
  %5745 = load i8*, i8** %19, align 8, !dbg !1747
  %5746 = load i64, i64* %29, align 8, !dbg !1747
  %5747 = getelementptr inbounds i8, i8* %5745, i64 %5746, !dbg !1747
  store i8 92, i8* %5747, align 1, !dbg !1747
  br label %originalBB891

originalBB895alteredBB:                           ; preds = %originalBB895, %3551
  %5748 = load i64, i64* %29, align 8, !dbg !1750
  %_896 = sub i64 0, %5748
  %gen897 = add i64 %_896, 1
  %_898 = shl i64 %5748, 1
  %_899 = sub i64 0, %5748
  %gen900 = add i64 %_899, 1
  %5749 = add i64 %5748, 1, !dbg !1750
  store i64 %5749, i64* %29, align 8, !dbg !1750
  br label %originalBB895

originalBB904alteredBB:                           ; preds = %originalBB904, %3570
  br label %originalBB904

originalBB908alteredBB:                           ; preds = %originalBB908, %3588
  %5750 = load i64, i64* %29, align 8, !dbg !1752
  %5751 = load i64, i64* %20, align 8, !dbg !1752
  %5752 = icmp ult i64 %5750, %5751, !dbg !1752
  br label %originalBB908

originalBB912alteredBB:                           ; preds = %originalBB912, %3608
  %5753 = load i8, i8* %39, align 1, !dbg !1752
  %5754 = zext i8 %5753 to i32, !dbg !1752
  %_913 = sub i32 %5754, 6
  %gen914 = mul i32 %_913, 6
  %_915 = sub i32 %5754, 6
  %gen916 = mul i32 %_915, 6
  %5755 = ashr i32 %5754, 6, !dbg !1752
  %_917 = sub i32 48, %5755
  %gen918 = mul i32 %_917, %5755
  %_919 = sub i32 0, 48
  %gen920 = add i32 %_919, %5755
  %_921 = sub i32 48, %5755
  %gen922 = mul i32 %_921, %5755
  %_923 = shl i32 48, %5755
  %_924 = sub i32 0, 48
  %gen925 = add i32 %_924, %5755
  %5756 = add nsw i32 48, %5755, !dbg !1752
  %5757 = trunc i32 %5756 to i8, !dbg !1752
  %5758 = load i8*, i8** %19, align 8, !dbg !1752
  %5759 = load i64, i64* %29, align 8, !dbg !1752
  %5760 = getelementptr inbounds i8, i8* %5758, i64 %5759, !dbg !1752
  store i8 %5757, i8* %5760, align 1, !dbg !1752
  br label %originalBB912

originalBB929alteredBB:                           ; preds = %originalBB929, %3633
  %5761 = load i64, i64* %29, align 8, !dbg !1755
  %_930 = sub i64 %5761, 1
  %gen931 = mul i64 %_930, 1
  %_932 = sub i64 0, %5761
  %gen933 = add i64 %_932, 1
  %_934 = sub i64 0, %5761
  %gen935 = add i64 %_934, 1
  %_936 = sub i64 %5761, 1
  %gen937 = mul i64 %_936, 1
  %5762 = add i64 %5761, 1, !dbg !1755
  store i64 %5762, i64* %29, align 8, !dbg !1755
  br label %originalBB929

originalBB941alteredBB:                           ; preds = %originalBB941, %3653
  %5763 = load i64, i64* %29, align 8, !dbg !1757
  %5764 = load i64, i64* %20, align 8, !dbg !1757
  %5765 = icmp ult i64 %5763, %5764, !dbg !1757
  br label %originalBB941

originalBB945alteredBB:                           ; preds = %originalBB945, %3673
  %5766 = load i8, i8* %39, align 1, !dbg !1757
  %5767 = zext i8 %5766 to i32, !dbg !1757
  %_946 = shl i32 %5767, 3
  %_947 = sub i32 0, %5767
  %gen948 = add i32 %_947, 3
  %5768 = ashr i32 %5767, 3, !dbg !1757
  %_949 = sub i32 0, %5768
  %gen950 = add i32 %_949, 7
  %5769 = and i32 %5768, 7, !dbg !1757
  %_951 = shl i32 48, %5769
  %_952 = shl i32 48, %5769
  %5770 = add nsw i32 48, %5769, !dbg !1757
  %5771 = trunc i32 %5770 to i8, !dbg !1757
  %5772 = load i8*, i8** %19, align 8, !dbg !1757
  %5773 = load i64, i64* %29, align 8, !dbg !1757
  %5774 = getelementptr inbounds i8, i8* %5772, i64 %5773, !dbg !1757
  store i8 %5771, i8* %5774, align 1, !dbg !1757
  br label %originalBB945

originalBB956alteredBB:                           ; preds = %originalBB956, %3699
  %5775 = load i64, i64* %29, align 8, !dbg !1760
  %_957 = sub i64 %5775, 1
  %gen958 = mul i64 %_957, 1
  %5776 = add i64 %5775, 1, !dbg !1760
  store i64 %5776, i64* %29, align 8, !dbg !1760
  br label %originalBB956

originalBB962alteredBB:                           ; preds = %originalBB962, %3718
  %5777 = load i8, i8* %39, align 1, !dbg !1761
  %5778 = zext i8 %5777 to i32, !dbg !1761
  %_963 = shl i32 %5778, 7
  %_964 = sub i32 0, %5778
  %gen965 = add i32 %_964, 7
  %_966 = shl i32 %5778, 7
  %5779 = and i32 %5778, 7, !dbg !1762
  %_967 = sub i32 48, %5779
  %gen968 = mul i32 %_967, %5779
  %_969 = sub i32 0, 48
  %gen970 = add i32 %_969, %5779
  %5780 = add nsw i32 48, %5779, !dbg !1763
  %5781 = trunc i32 %5780 to i8, !dbg !1764
  store i8 %5781, i8* %39, align 1, !dbg !1765
  br label %originalBB962

originalBB974alteredBB:                           ; preds = %originalBB974, %3740
  %5782 = load i8, i8* %41, align 1, !dbg !1767
  %5783 = trunc i8 %5782 to i1, !dbg !1767
  br label %originalBB974

originalBB978alteredBB:                           ; preds = %originalBB978, %3759
  br label %originalBB978

originalBB982alteredBB:                           ; preds = %originalBB982, %3776
  %5784 = load i64, i64* %29, align 8, !dbg !1772
  %5785 = load i64, i64* %20, align 8, !dbg !1772
  %5786 = icmp ult i64 %5784, %5785, !dbg !1772
  br label %originalBB982

originalBB986alteredBB:                           ; preds = %originalBB986, %3800
  %5787 = load i64, i64* %29, align 8, !dbg !1775
  %_987 = sub i64 0, %5787
  %gen988 = add i64 %_987, 1
  %_989 = shl i64 %5787, 1
  %_990 = shl i64 %5787, 1
  %_991 = shl i64 %5787, 1
  %_992 = sub i64 0, %5787
  %gen993 = add i64 %_992, 1
  %5788 = add i64 %5787, 1, !dbg !1775
  store i64 %5788, i64* %29, align 8, !dbg !1775
  br label %originalBB986

originalBB997alteredBB:                           ; preds = %originalBB997, %3819
  store i8 0, i8* %41, align 1, !dbg !1776
  br label %originalBB997

originalBB1001alteredBB:                          ; preds = %originalBB1001, %3836
  br label %originalBB1001

originalBB1005alteredBB:                          ; preds = %originalBB1005, %3858
  br label %originalBB1005

originalBB1009alteredBB:                          ; preds = %originalBB1009, %3875
  br label %originalBB1009

originalBB1013alteredBB:                          ; preds = %originalBB1013, %3892
  %5789 = load i8, i8* %36, align 1, !dbg !1786
  %5790 = trunc i8 %5789 to i1, !dbg !1786
  br label %originalBB1013

originalBB1017alteredBB:                          ; preds = %originalBB1017, %3911
  %5791 = load i8, i8* %42, align 1, !dbg !1786
  %5792 = trunc i8 %5791 to i1, !dbg !1786
  br label %originalBB1017

originalBB1021alteredBB:                          ; preds = %originalBB1021, %3930
  br label %originalBB1021

originalBB1025alteredBB:                          ; preds = %originalBB1025, %3951
  %5793 = load i8*, i8** %19, align 8, !dbg !1792
  %5794 = load i64, i64* %29, align 8, !dbg !1792
  %5795 = getelementptr inbounds i8, i8* %5793, i64 %5794, !dbg !1792
  store i8 39, i8* %5795, align 1, !dbg !1792
  br label %originalBB1025

originalBB1029alteredBB:                          ; preds = %originalBB1029, %3971
  %5796 = load i64, i64* %29, align 8, !dbg !1795
  %_1030 = sub i64 0, %5796
  %gen1031 = add i64 %_1030, 1
  %_1032 = sub i64 %5796, 1
  %gen1033 = mul i64 %_1032, 1
  %_1034 = sub i64 0, %5796
  %gen1035 = add i64 %_1034, 1
  %_1036 = sub i64 %5796, 1
  %gen1037 = mul i64 %_1036, 1
  %5797 = add i64 %5796, 1, !dbg !1795
  store i64 %5797, i64* %29, align 8, !dbg !1795
  br label %originalBB1029

originalBB1041alteredBB:                          ; preds = %originalBB1041, %3990
  br label %originalBB1041

originalBB1045alteredBB:                          ; preds = %originalBB1045, %4007
  %5798 = load i64, i64* %29, align 8, !dbg !1796
  %5799 = load i64, i64* %20, align 8, !dbg !1796
  %5800 = icmp ult i64 %5798, %5799, !dbg !1796
  br label %originalBB1045

originalBB1049alteredBB:                          ; preds = %originalBB1049, %4031
  %5801 = load i64, i64* %29, align 8, !dbg !1799
  %_1050 = sub i64 %5801, 1
  %gen1051 = mul i64 %_1050, 1
  %_1052 = shl i64 %5801, 1
  %_1053 = sub i64 0, %5801
  %gen1054 = add i64 %_1053, 1
  %_1055 = sub i64 0, %5801
  %gen1056 = add i64 %_1055, 1
  %_1057 = sub i64 0, %5801
  %gen1058 = add i64 %_1057, 1
  %5802 = add i64 %5801, 1, !dbg !1799
  store i64 %5802, i64* %29, align 8, !dbg !1799
  br label %originalBB1049

originalBB1062alteredBB:                          ; preds = %originalBB1062, %4050
  store i8 0, i8* %36, align 1, !dbg !1790
  br label %originalBB1062

originalBB1066alteredBB:                          ; preds = %originalBB1066, %4067
  br label %originalBB1066

originalBB1070alteredBB:                          ; preds = %originalBB1070, %4084
  br label %originalBB1070

originalBB1074alteredBB:                          ; preds = %originalBB1074, %4101
  %5803 = load i64, i64* %29, align 8, !dbg !1801
  %5804 = load i64, i64* %20, align 8, !dbg !1801
  %5805 = icmp ult i64 %5803, %5804, !dbg !1801
  br label %originalBB1074

originalBB1078alteredBB:                          ; preds = %originalBB1078, %4121
  %5806 = load i8, i8* %39, align 1, !dbg !1801
  %5807 = load i8*, i8** %19, align 8, !dbg !1801
  %5808 = load i64, i64* %29, align 8, !dbg !1801
  %5809 = getelementptr inbounds i8, i8* %5807, i64 %5808, !dbg !1801
  store i8 %5806, i8* %5809, align 1, !dbg !1801
  br label %originalBB1078

originalBB1082alteredBB:                          ; preds = %originalBB1082, %4142
  %5810 = load i64, i64* %29, align 8, !dbg !1804
  %_1083 = shl i64 %5810, 1
  %_1084 = sub i64 0, %5810
  %gen1085 = add i64 %_1084, 1
  %_1086 = shl i64 %5810, 1
  %_1087 = shl i64 %5810, 1
  %_1088 = shl i64 %5810, 1
  %5811 = add i64 %5810, 1, !dbg !1804
  store i64 %5811, i64* %29, align 8, !dbg !1804
  br label %originalBB1082

originalBB1092alteredBB:                          ; preds = %originalBB1092, %4167
  br label %originalBB1092

originalBB1096alteredBB:                          ; preds = %originalBB1096, %4184
  br label %originalBB1096

originalBB1100alteredBB:                          ; preds = %originalBB1100, %4201
  %5812 = load i8, i8* %33, align 1, !dbg !1814
  %5813 = trunc i8 %5812 to i1, !dbg !1814
  br label %originalBB1100

originalBB1104alteredBB:                          ; preds = %originalBB1104, %4220
  %5814 = load i32, i32* %23, align 4, !dbg !1817
  %5815 = icmp ne i32 %5814, 2, !dbg !1818
  br label %originalBB1104

originalBB1108alteredBB:                          ; preds = %originalBB1108, %4239
  %5816 = load i8, i8* %35, align 1, !dbg !1820
  %5817 = trunc i8 %5816 to i1, !dbg !1820
  br label %originalBB1108

originalBB1112alteredBB:                          ; preds = %originalBB1112, %4275
  %5818 = load i8, i8* %41, align 1, !dbg !1832
  %5819 = trunc i8 %5818 to i1, !dbg !1832
  br label %originalBB1112

originalBB1116alteredBB:                          ; preds = %originalBB1116, %4294
  br label %originalBB1116

originalBB1120alteredBB:                          ; preds = %originalBB1120, %4313
  %5820 = load i8, i8* %35, align 1, !dbg !1838
  %5821 = trunc i8 %5820 to i1, !dbg !1838
  br label %originalBB1120

originalBB1124alteredBB:                          ; preds = %originalBB1124, %4332
  br label %originalBB1124

originalBB1128alteredBB:                          ; preds = %originalBB1128, %4352
  %5822 = load i8, i8* %36, align 1, !dbg !1842
  %5823 = trunc i8 %5822 to i1, !dbg !1842
  br label %originalBB1128

originalBB1132alteredBB:                          ; preds = %originalBB1132, %4371
  br label %originalBB1132

originalBB1136alteredBB:                          ; preds = %originalBB1136, %4388
  %5824 = load i64, i64* %29, align 8, !dbg !1846
  %5825 = load i64, i64* %20, align 8, !dbg !1846
  %5826 = icmp ult i64 %5824, %5825, !dbg !1846
  br label %originalBB1136

originalBB1140alteredBB:                          ; preds = %originalBB1140, %4420
  %5827 = load i8*, i8** %19, align 8, !dbg !1850
  %5828 = load i64, i64* %29, align 8, !dbg !1850
  %5829 = getelementptr inbounds i8, i8* %5827, i64 %5828, !dbg !1850
  store i8 36, i8* %5829, align 1, !dbg !1850
  br label %originalBB1140

originalBB1144alteredBB:                          ; preds = %originalBB1144, %4440
  %5830 = load i64, i64* %29, align 8, !dbg !1853
  %_1145 = shl i64 %5830, 1
  %_1146 = sub i64 %5830, 1
  %gen1147 = mul i64 %_1146, 1
  %5831 = add i64 %5830, 1, !dbg !1853
  store i64 %5831, i64* %29, align 8, !dbg !1853
  br label %originalBB1144

originalBB1151alteredBB:                          ; preds = %originalBB1151, %4459
  br label %originalBB1151

originalBB1155alteredBB:                          ; preds = %originalBB1155, %4476
  %5832 = load i64, i64* %29, align 8, !dbg !1854
  %5833 = load i64, i64* %20, align 8, !dbg !1854
  %5834 = icmp ult i64 %5832, %5833, !dbg !1854
  br label %originalBB1155

originalBB1159alteredBB:                          ; preds = %originalBB1159, %4496
  %5835 = load i8*, i8** %19, align 8, !dbg !1854
  %5836 = load i64, i64* %29, align 8, !dbg !1854
  %5837 = getelementptr inbounds i8, i8* %5835, i64 %5836, !dbg !1854
  store i8 39, i8* %5837, align 1, !dbg !1854
  br label %originalBB1159

originalBB1163alteredBB:                          ; preds = %originalBB1163, %4520
  br label %originalBB1163

originalBB1167alteredBB:                          ; preds = %originalBB1167, %4537
  %5838 = load i64, i64* %29, align 8, !dbg !1858
  %5839 = load i64, i64* %20, align 8, !dbg !1858
  %5840 = icmp ult i64 %5838, %5839, !dbg !1858
  br label %originalBB1167

originalBB1171alteredBB:                          ; preds = %originalBB1171, %4557
  %5841 = load i8*, i8** %19, align 8, !dbg !1858
  %5842 = load i64, i64* %29, align 8, !dbg !1858
  %5843 = getelementptr inbounds i8, i8* %5841, i64 %5842, !dbg !1858
  store i8 92, i8* %5843, align 1, !dbg !1858
  br label %originalBB1171

originalBB1175alteredBB:                          ; preds = %originalBB1175, %4580
  br label %originalBB1175

originalBB1179alteredBB:                          ; preds = %originalBB1179, %4597
  br label %originalBB1179

originalBB1183alteredBB:                          ; preds = %originalBB1183, %4614
  br label %originalBB1183

originalBB1187alteredBB:                          ; preds = %originalBB1187, %4631
  %5844 = load i8, i8* %36, align 1, !dbg !1865
  %5845 = trunc i8 %5844 to i1, !dbg !1865
  br label %originalBB1187

originalBB1191alteredBB:                          ; preds = %originalBB1191, %4650
  %5846 = load i8, i8* %42, align 1, !dbg !1865
  %5847 = trunc i8 %5846 to i1, !dbg !1865
  br label %originalBB1191

originalBB1195alteredBB:                          ; preds = %originalBB1195, %4669
  br label %originalBB1195

originalBB1199alteredBB:                          ; preds = %originalBB1199, %4686
  %5848 = load i64, i64* %29, align 8, !dbg !1871
  %5849 = load i64, i64* %20, align 8, !dbg !1871
  %5850 = icmp ult i64 %5848, %5849, !dbg !1871
  br label %originalBB1199

originalBB1203alteredBB:                          ; preds = %originalBB1203, %4706
  %5851 = load i8*, i8** %19, align 8, !dbg !1871
  %5852 = load i64, i64* %29, align 8, !dbg !1871
  %5853 = getelementptr inbounds i8, i8* %5851, i64 %5852, !dbg !1871
  store i8 39, i8* %5853, align 1, !dbg !1871
  br label %originalBB1203

originalBB1207alteredBB:                          ; preds = %originalBB1207, %4726
  %5854 = load i64, i64* %29, align 8, !dbg !1874
  %_1208 = sub i64 %5854, 1
  %gen1209 = mul i64 %_1208, 1
  %_1210 = sub i64 %5854, 1
  %gen1211 = mul i64 %_1210, 1
  %_1212 = shl i64 %5854, 1
  %_1213 = sub i64 0, %5854
  %gen1214 = add i64 %_1213, 1
  %_1215 = sub i64 0, %5854
  %gen1216 = add i64 %_1215, 1
  %5855 = add i64 %5854, 1, !dbg !1874
  store i64 %5855, i64* %29, align 8, !dbg !1874
  br label %originalBB1207

originalBB1220alteredBB:                          ; preds = %originalBB1220, %4746
  %5856 = load i64, i64* %29, align 8, !dbg !1875
  %5857 = load i64, i64* %20, align 8, !dbg !1875
  %5858 = icmp ult i64 %5856, %5857, !dbg !1875
  br label %originalBB1220

originalBB1224alteredBB:                          ; preds = %originalBB1224, %4766
  %5859 = load i8*, i8** %19, align 8, !dbg !1875
  %5860 = load i64, i64* %29, align 8, !dbg !1875
  %5861 = getelementptr inbounds i8, i8* %5859, i64 %5860, !dbg !1875
  store i8 39, i8* %5861, align 1, !dbg !1875
  br label %originalBB1224

originalBB1228alteredBB:                          ; preds = %originalBB1228, %4786
  %5862 = load i64, i64* %29, align 8, !dbg !1878
  %_1229 = shl i64 %5862, 1
  %_1230 = shl i64 %5862, 1
  %_1231 = sub i64 %5862, 1
  %gen1232 = mul i64 %_1231, 1
  %_1233 = shl i64 %5862, 1
  %_1234 = sub i64 %5862, 1
  %gen1235 = mul i64 %_1234, 1
  %5863 = add i64 %5862, 1, !dbg !1878
  store i64 %5863, i64* %29, align 8, !dbg !1878
  br label %originalBB1228

originalBB1239alteredBB:                          ; preds = %originalBB1239, %4805
  store i8 0, i8* %36, align 1, !dbg !1869
  br label %originalBB1239

originalBB1243alteredBB:                          ; preds = %originalBB1243, %4822
  br label %originalBB1243

originalBB1247alteredBB:                          ; preds = %originalBB1247, %4839
  br label %originalBB1247

originalBB1251alteredBB:                          ; preds = %originalBB1251, %4860
  %5864 = load i8, i8* %39, align 1, !dbg !1880
  %5865 = load i8*, i8** %19, align 8, !dbg !1880
  %5866 = load i64, i64* %29, align 8, !dbg !1880
  %5867 = getelementptr inbounds i8, i8* %5865, i64 %5866, !dbg !1880
  store i8 %5864, i8* %5867, align 1, !dbg !1880
  br label %originalBB1251

originalBB1255alteredBB:                          ; preds = %originalBB1255, %4881
  %5868 = load i64, i64* %29, align 8, !dbg !1883
  %_1256 = shl i64 %5868, 1
  %_1257 = shl i64 %5868, 1
  %_1258 = shl i64 %5868, 1
  %_1259 = sub i64 %5868, 1
  %gen1260 = mul i64 %_1259, 1
  %_1261 = sub i64 0, %5868
  %gen1262 = add i64 %_1261, 1
  %5869 = add i64 %5868, 1, !dbg !1883
  store i64 %5869, i64* %29, align 8, !dbg !1883
  br label %originalBB1255

originalBB1266alteredBB:                          ; preds = %originalBB1266, %4900
  %5870 = load i8, i8* %43, align 1, !dbg !1884
  %5871 = trunc i8 %5870 to i1, !dbg !1884
  br label %originalBB1266

originalBB1270alteredBB:                          ; preds = %originalBB1270, %4919
  store i8 0, i8* %38, align 1, !dbg !1887
  br label %originalBB1270

originalBB1274alteredBB:                          ; preds = %originalBB1274, %4936
  br label %originalBB1274

originalBB1278alteredBB:                          ; preds = %originalBB1278, %4953
  %5872 = load i64, i64* %28, align 8, !dbg !1890
  %_1279 = sub i64 %5872, 1
  %gen1280 = mul i64 %_1279, 1
  %_1281 = shl i64 %5872, 1
  %_1282 = sub i64 %5872, 1
  %gen1283 = mul i64 %_1282, 1
  %5873 = add i64 %5872, 1, !dbg !1890
  store i64 %5873, i64* %28, align 8, !dbg !1890
  br label %originalBB1278

originalBB1287alteredBB:                          ; preds = %originalBB1287, %4975
  %5874 = load i32, i32* %23, align 4, !dbg !1898
  %5875 = icmp eq i32 %5874, 2, !dbg !1899
  br label %originalBB1287

originalBB1291alteredBB:                          ; preds = %originalBB1291, %4994
  %5876 = load i8, i8* %35, align 1, !dbg !1901
  %5877 = trunc i8 %5876 to i1, !dbg !1901
  br label %originalBB1291

originalBB1295alteredBB:                          ; preds = %originalBB1295, %5013
  br label %originalBB1295

originalBB1299alteredBB:                          ; preds = %originalBB1299, %5030
  %5878 = load i32, i32* %23, align 4, !dbg !1904
  %5879 = icmp eq i32 %5878, 2, !dbg !1906
  br label %originalBB1299

originalBB1303alteredBB:                          ; preds = %originalBB1303, %5052
  %5880 = load i8, i8* %37, align 1, !dbg !1910
  %5881 = trunc i8 %5880 to i1, !dbg !1910
  br label %originalBB1303

originalBB1307alteredBB:                          ; preds = %originalBB1307, %5071
  %5882 = load i8, i8* %38, align 1, !dbg !1912
  %5883 = trunc i8 %5882 to i1, !dbg !1912
  br label %originalBB1307

originalBB1311alteredBB:                          ; preds = %originalBB1311, %5090
  %5884 = load i8*, i8** %19, align 8, !dbg !1916
  %5885 = load i64, i64* %30, align 8, !dbg !1917
  %5886 = load i8*, i8** %21, align 8, !dbg !1918
  %5887 = load i64, i64* %22, align 8, !dbg !1919
  %5888 = load i32, i32* %24, align 4, !dbg !1920
  %5889 = load i32*, i32** %25, align 8, !dbg !1921
  %5890 = load i8*, i8** %26, align 8, !dbg !1922
  %5891 = load i8*, i8** %27, align 8, !dbg !1923
  %5892 = call i64 @quotearg_buffer_restyled(i8* %5884, i64 %5885, i8* %5886, i64 %5887, i32 5, i32 %5888, i32* %5889, i8* %5890, i8* %5891), !dbg !1924
  store i64 %5892, i64* %18, align 8, !dbg !1925
  br label %originalBB1311

originalBB1315alteredBB:                          ; preds = %originalBB1315, %5119
  %5893 = load i64, i64* %30, align 8, !dbg !1929
  %5894 = icmp ne i64 %5893, 0, !dbg !1929
  br label %originalBB1315

originalBB1319alteredBB:                          ; preds = %originalBB1319, %5140
  br label %originalBB1319

originalBB1323alteredBB:                          ; preds = %originalBB1323, %5158
  %5895 = load i8*, i8** %31, align 8, !dbg !1937
  %5896 = icmp ne i8* %5895, null, !dbg !1937
  br label %originalBB1323

originalBB1327alteredBB:                          ; preds = %originalBB1327, %5181
  %5897 = load i8*, i8** %31, align 8, !dbg !1943
  %5898 = load i8, i8* %5897, align 1, !dbg !1946
  %5899 = icmp ne i8 %5898, 0, !dbg !1947
  br label %originalBB1327

originalBB1331alteredBB:                          ; preds = %originalBB1331, %5201
  br label %originalBB1331

originalBB1335alteredBB:                          ; preds = %originalBB1335, %5218
  %5900 = load i64, i64* %29, align 8, !dbg !1949
  %5901 = load i64, i64* %20, align 8, !dbg !1949
  %5902 = icmp ult i64 %5900, %5901, !dbg !1949
  br label %originalBB1335

originalBB1339alteredBB:                          ; preds = %originalBB1339, %5244
  %5903 = load i64, i64* %29, align 8, !dbg !1952
  %_1340 = sub i64 %5903, 1
  %gen1341 = mul i64 %_1340, 1
  %_1342 = sub i64 %5903, 1
  %gen1343 = mul i64 %_1342, 1
  %_1344 = shl i64 %5903, 1
  %5904 = add i64 %5903, 1, !dbg !1952
  store i64 %5904, i64* %29, align 8, !dbg !1952
  br label %originalBB1339

originalBB1348alteredBB:                          ; preds = %originalBB1348, %5264
  %5905 = load i8*, i8** %31, align 8, !dbg !1953
  %5906 = getelementptr inbounds i8, i8* %5905, i32 1, !dbg !1953
  store i8* %5906, i8** %31, align 8, !dbg !1953
  br label %originalBB1348

originalBB1352alteredBB:                          ; preds = %originalBB1352, %5283
  br label %originalBB1352

originalBB1356alteredBB:                          ; preds = %originalBB1356, %5308
  %5907 = load i64, i64* %29, align 8, !dbg !1965
  store i64 %5907, i64* %18, align 8, !dbg !1966
  br label %originalBB1356

originalBB1360alteredBB:                          ; preds = %originalBB1360, %5326
  %5908 = load i32, i32* %23, align 4, !dbg !1969
  %5909 = icmp eq i32 %5908, 2, !dbg !1971
  br label %originalBB1360

originalBB1364alteredBB:                          ; preds = %originalBB1364, %5345
  %5910 = load i8, i8* %33, align 1, !dbg !1973
  %5911 = trunc i8 %5910 to i1, !dbg !1973
  br label %originalBB1364

originalBB1368alteredBB:                          ; preds = %originalBB1368, %5364
  store i32 4, i32* %23, align 4, !dbg !1975
  br label %originalBB1368

originalBB1372alteredBB:                          ; preds = %originalBB1372, %5381
  %5912 = load i8*, i8** %19, align 8, !dbg !1977
  %5913 = load i64, i64* %20, align 8, !dbg !1978
  %5914 = load i8*, i8** %21, align 8, !dbg !1979
  %5915 = load i64, i64* %22, align 8, !dbg !1980
  %5916 = load i32, i32* %23, align 4, !dbg !1981
  %5917 = load i32, i32* %24, align 4, !dbg !1982
  %_1373 = sub i32 %5917, -3
  %gen1374 = mul i32 %_1373, -3
  %_1375 = shl i32 %5917, -3
  %_1376 = sub i32 %5917, -3
  %gen1377 = mul i32 %_1376, -3
  %_1378 = sub i32 %5917, -3
  %gen1379 = mul i32 %_1378, -3
  %_1380 = shl i32 %5917, -3
  %_1381 = sub i32 %5917, -3
  %gen1382 = mul i32 %_1381, -3
  %_1383 = sub i32 0, %5917
  %gen1384 = add i32 %_1383, -3
  %_1385 = sub i32 %5917, -3
  %gen1386 = mul i32 %_1385, -3
  %_1387 = sub i32 0, %5917
  %gen1388 = add i32 %_1387, -3
  %5918 = and i32 %5917, -3, !dbg !1983
  %5919 = load i8*, i8** %26, align 8, !dbg !1984
  %5920 = load i8*, i8** %27, align 8, !dbg !1985
  %5921 = call i64 @quotearg_buffer_restyled(i8* %5912, i64 %5913, i8* %5914, i64 %5915, i32 %5916, i32 %5918, i32* null, i8* %5919, i8* %5920), !dbg !1986
  store i64 %5921, i64* %18, align 8, !dbg !1987
  br label %originalBB1372

originalBB1392alteredBB:                          ; preds = %originalBB1392, %5408
  %5922 = load i64, i64* %18, align 8, !dbg !1988
  br label %originalBB1392
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #2

; Function Attrs: nounwind
declare dso_local i64 @__ctype_get_mb_cur_max() #2

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @gettext_quote(i8*, i32) #4 !dbg !2040 {
  %3 = load i32, i32* @x.21
  %4 = load i32, i32* @y.22
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !2043, metadata !DIExpression()), !dbg !2044
  store i32 %1, i32* %13, align 4
  call void @llvm.dbg.declare(metadata i32* %13, metadata !2045, metadata !DIExpression()), !dbg !2046
  call void @llvm.dbg.declare(metadata i8** %14, metadata !2047, metadata !DIExpression()), !dbg !2048
  %16 = load i8*, i8** %12, align 8, !dbg !2049
  %17 = call i8* @gettext(i8* %16) #10, !dbg !2049
  store i8* %17, i8** %14, align 8, !dbg !2048
  call void @llvm.dbg.declare(metadata i8** %15, metadata !2050, metadata !DIExpression()), !dbg !2051
  %18 = load i8*, i8** %14, align 8, !dbg !2052
  %19 = load i8*, i8** %12, align 8, !dbg !2054
  %20 = icmp ne i8* %18, %19, !dbg !2055
  %21 = load i32, i32* @x.21
  %22 = load i32, i32* @y.22
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %20, label %29, label %47, !dbg !2056

29:                                               ; preds = %originalBBpart2
  %30 = load i32, i32* @x.21
  %31 = load i32, i32* @y.22
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %29, %originalBB1alteredBB
  %38 = load i8*, i8** %14, align 8, !dbg !2057
  store i8* %38, i8** %11, align 8, !dbg !2058
  %39 = load i32, i32* @x.21
  %40 = load i32, i32* @y.22
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %141, !dbg !2058

47:                                               ; preds = %originalBBpart2
  %48 = call i8* @locale_charset(), !dbg !2059
  store i8* %48, i8** %15, align 8, !dbg !2060
  %49 = load i8*, i8** %15, align 8, !dbg !2061
  %50 = call i32 @c_strcasecmp(i8* %49, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13.65, i64 0, i64 0)) #13, !dbg !2061
  %51 = icmp eq i32 %50, 0, !dbg !2061
  br i1 %51, label %52, label %76, !dbg !2063

52:                                               ; preds = %47
  %53 = load i32, i32* @x.21
  %54 = load i32, i32* @y.22
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %52, %originalBB6alteredBB
  %61 = load i8*, i8** %12, align 8, !dbg !2064
  %62 = getelementptr inbounds i8, i8* %61, i64 0, !dbg !2064
  %63 = load i8, i8* %62, align 1, !dbg !2064
  %64 = sext i8 %63 to i32, !dbg !2064
  %65 = icmp eq i32 %64, 96, !dbg !2065
  %66 = zext i1 %65 to i64, !dbg !2064
  %67 = select i1 %65, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.66, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.67, i64 0, i64 0), !dbg !2064
  store i8* %67, i8** %11, align 8, !dbg !2066
  %68 = load i32, i32* @x.21
  %69 = load i32, i32* @y.22
  %70 = sub i32 %68, 1
  %71 = mul i32 %68, %70
  %72 = urem i32 %71, 2
  %73 = icmp eq i32 %72, 0
  %74 = icmp slt i32 %69, 10
  %75 = or i1 %73, %74
  br i1 %75, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %141, !dbg !2066

76:                                               ; preds = %47
  %77 = load i32, i32* @x.21
  %78 = load i32, i32* @y.22
  %79 = sub i32 %77, 1
  %80 = mul i32 %77, %79
  %81 = urem i32 %80, 2
  %82 = icmp eq i32 %81, 0
  %83 = icmp slt i32 %78, 10
  %84 = or i1 %82, %83
  br i1 %84, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %76, %originalBB10alteredBB
  %85 = load i8*, i8** %15, align 8, !dbg !2067
  %86 = call i32 @c_strcasecmp(i8* %85, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16.68, i64 0, i64 0)) #13, !dbg !2067
  %87 = icmp eq i32 %86, 0, !dbg !2067
  %88 = load i32, i32* @x.21
  %89 = load i32, i32* @y.22
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %87, label %96, label %120, !dbg !2069

96:                                               ; preds = %originalBBpart212
  %97 = load i32, i32* @x.21
  %98 = load i32, i32* @y.22
  %99 = sub i32 %97, 1
  %100 = mul i32 %97, %99
  %101 = urem i32 %100, 2
  %102 = icmp eq i32 %101, 0
  %103 = icmp slt i32 %98, 10
  %104 = or i1 %102, %103
  br i1 %104, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %96, %originalBB14alteredBB
  %105 = load i8*, i8** %12, align 8, !dbg !2070
  %106 = getelementptr inbounds i8, i8* %105, i64 0, !dbg !2070
  %107 = load i8, i8* %106, align 1, !dbg !2070
  %108 = sext i8 %107 to i32, !dbg !2070
  %109 = icmp eq i32 %108, 96, !dbg !2071
  %110 = zext i1 %109 to i64, !dbg !2070
  %111 = select i1 %109, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17.69, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.70, i64 0, i64 0), !dbg !2070
  store i8* %111, i8** %11, align 8, !dbg !2072
  %112 = load i32, i32* @x.21
  %113 = load i32, i32* @y.22
  %114 = sub i32 %112, 1
  %115 = mul i32 %112, %114
  %116 = urem i32 %115, 2
  %117 = icmp eq i32 %116, 0
  %118 = icmp slt i32 %113, 10
  %119 = or i1 %117, %118
  br i1 %119, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %141, !dbg !2072

120:                                              ; preds = %originalBBpart212
  %121 = load i32, i32* @x.21
  %122 = load i32, i32* @y.22
  %123 = sub i32 %121, 1
  %124 = mul i32 %121, %123
  %125 = urem i32 %124, 2
  %126 = icmp eq i32 %125, 0
  %127 = icmp slt i32 %122, 10
  %128 = or i1 %126, %127
  br i1 %128, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %120, %originalBB18alteredBB
  %129 = load i32, i32* %13, align 4, !dbg !2073
  %130 = icmp eq i32 %129, 9, !dbg !2074
  %131 = zext i1 %130 to i64, !dbg !2073
  %132 = select i1 %130, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.62, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.64, i64 0, i64 0), !dbg !2073
  store i8* %132, i8** %11, align 8, !dbg !2075
  %133 = load i32, i32* @x.21
  %134 = load i32, i32* @y.22
  %135 = sub i32 %133, 1
  %136 = mul i32 %133, %135
  %137 = urem i32 %136, 2
  %138 = icmp eq i32 %137, 0
  %139 = icmp slt i32 %134, 10
  %140 = or i1 %138, %139
  br i1 %140, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %141, !dbg !2075

141:                                              ; preds = %originalBBpart220, %originalBBpart216, %originalBBpart28, %originalBBpart24
  %142 = load i32, i32* @x.21
  %143 = load i32, i32* @y.22
  %144 = sub i32 %142, 1
  %145 = mul i32 %142, %144
  %146 = urem i32 %145, 2
  %147 = icmp eq i32 %146, 0
  %148 = icmp slt i32 %143, 10
  %149 = or i1 %147, %148
  br i1 %149, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %141, %originalBB22alteredBB
  %150 = load i8*, i8** %11, align 8, !dbg !2076
  %151 = load i32, i32* @x.21
  %152 = load i32, i32* @y.22
  %153 = sub i32 %151, 1
  %154 = mul i32 %151, %153
  %155 = urem i32 %154, 2
  %156 = icmp eq i32 %155, 0
  %157 = icmp slt i32 %152, 10
  %158 = or i1 %156, %157
  br i1 %158, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  ret i8* %150, !dbg !2076

originalBBalteredBB:                              ; preds = %originalBB, %2
  %159 = alloca i8*, align 8
  %160 = alloca i8*, align 8
  %161 = alloca i32, align 4
  %162 = alloca i8*, align 8
  %163 = alloca i8*, align 8
  store i8* %0, i8** %160, align 8
  call void @llvm.dbg.declare(metadata i8** %160, metadata !2077, metadata !DIExpression()), !dbg !2044
  store i32 %1, i32* %161, align 4
  call void @llvm.dbg.declare(metadata i32* %161, metadata !2109, metadata !DIExpression()), !dbg !2046
  call void @llvm.dbg.declare(metadata i8** %162, metadata !2110, metadata !DIExpression()), !dbg !2048
  %164 = load i8*, i8** %160, align 8, !dbg !2049
  %165 = call i8* @gettext(i8* %164) #10, !dbg !2049
  store i8* %165, i8** %162, align 8, !dbg !2048
  call void @llvm.dbg.declare(metadata i8** %163, metadata !2111, metadata !DIExpression()), !dbg !2051
  %166 = load i8*, i8** %162, align 8, !dbg !2052
  %167 = load i8*, i8** %160, align 8, !dbg !2054
  %168 = icmp ne i8* %166, %167, !dbg !2055
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %29
  %169 = load i8*, i8** %14, align 8, !dbg !2057
  store i8* %169, i8** %11, align 8, !dbg !2058
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %52
  %170 = load i8*, i8** %12, align 8, !dbg !2064
  %171 = getelementptr inbounds i8, i8* %170, i64 0, !dbg !2064
  %172 = load i8, i8* %171, align 1, !dbg !2064
  %173 = sext i8 %172 to i32, !dbg !2064
  %174 = icmp eq i32 %173, 96, !dbg !2065
  %175 = zext i1 %174 to i64, !dbg !2064
  %176 = select i1 %174, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14.66, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15.67, i64 0, i64 0), !dbg !2064
  store i8* %176, i8** %11, align 8, !dbg !2066
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %76
  %177 = load i8*, i8** %15, align 8, !dbg !2067
  %178 = call i32 @c_strcasecmp(i8* %177, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.16.68, i64 0, i64 0)) #13, !dbg !2067
  %179 = icmp eq i32 %178, 0, !dbg !2067
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %96
  %180 = load i8*, i8** %12, align 8, !dbg !2070
  %181 = getelementptr inbounds i8, i8* %180, i64 0, !dbg !2070
  %182 = load i8, i8* %181, align 1, !dbg !2070
  %183 = sext i8 %182 to i32, !dbg !2070
  %184 = icmp eq i32 %183, 96, !dbg !2071
  %185 = zext i1 %184 to i64, !dbg !2070
  %186 = select i1 %184, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.17.69, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.18.70, i64 0, i64 0), !dbg !2070
  store i8* %186, i8** %11, align 8, !dbg !2072
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %120
  %187 = load i32, i32* %13, align 4, !dbg !2073
  %188 = icmp eq i32 %187, 9, !dbg !2074
  %189 = zext i1 %188 to i64, !dbg !2073
  %190 = select i1 %188, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.62, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12.64, i64 0, i64 0), !dbg !2073
  store i8* %190, i8** %11, align 8, !dbg !2075
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %141
  %191 = load i8*, i8** %11, align 8, !dbg !2076
  br label %originalBB22
}

; Function Attrs: nounwind readonly
declare dso_local i64 @strlen(i8*) #7

; Function Attrs: nounwind readonly
declare dso_local i32 @memcmp(i8*, i8*, i64) #7

; Function Attrs: nounwind readnone
declare dso_local i16** @__ctype_b_loc() #8

; Function Attrs: nounwind
declare dso_local i32 @iswprint(i32) #2

; Function Attrs: nounwind readonly
declare dso_local i32 @mbsinit(%struct.__mbstate_t*) #7

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_char(i8*, i8 signext) #4 !dbg !2112 {
  %3 = alloca i8*, align 8
  %4 = alloca i8, align 1
  store i8* %0, i8** %3, align 8
  call void @llvm.dbg.declare(metadata i8** %3, metadata !2115, metadata !DIExpression()), !dbg !2116
  store i8 %1, i8* %4, align 1
  call void @llvm.dbg.declare(metadata i8* %4, metadata !2117, metadata !DIExpression()), !dbg !2118
  %5 = load i8*, i8** %3, align 8, !dbg !2119
  %6 = load i8, i8* %4, align 1, !dbg !2120
  %7 = call i8* @quotearg_char_mem(i8* %5, i64 -1, i8 signext %6), !dbg !2121
  ret i8* %7, !dbg !2122
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quotearg_colon(i8*) #4 !dbg !2123 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  call void @llvm.dbg.declare(metadata i8** %2, metadata !2126, metadata !DIExpression()), !dbg !2127
  %3 = load i8*, i8** %2, align 8, !dbg !2128
  %4 = call i8* @quotearg_char(i8* %3, i8 signext 58), !dbg !2129
  ret i8* %4, !dbg !2130
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote_n_mem(i32, i8*, i64) #4 !dbg !2131 {
  %4 = load i32, i32* @x.27
  %5 = load i32, i32* @y.28
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  store i32 %0, i32* %12, align 4
  call void @llvm.dbg.declare(metadata i32* %12, metadata !2134, metadata !DIExpression()), !dbg !2135
  store i8* %1, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !2136, metadata !DIExpression()), !dbg !2137
  store i64 %2, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !2138, metadata !DIExpression()), !dbg !2139
  %15 = load i32, i32* %12, align 4, !dbg !2140
  %16 = load i8*, i8** %13, align 8, !dbg !2141
  %17 = load i64, i64* %14, align 8, !dbg !2142
  %18 = call i8* @quotearg_n_options(i32 %15, i8* %16, i64 %17, %struct.quoting_options* @quote_quoting_options), !dbg !2143
  %19 = load i32, i32* @x.27
  %20 = load i32, i32* @y.28
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %18, !dbg !2144

originalBBalteredBB:                              ; preds = %originalBB, %3
  %27 = alloca i32, align 4
  %28 = alloca i8*, align 8
  %29 = alloca i64, align 8
  store i32 %0, i32* %27, align 4
  call void @llvm.dbg.declare(metadata i32* %27, metadata !2145, metadata !DIExpression()), !dbg !2135
  store i8* %1, i8** %28, align 8
  call void @llvm.dbg.declare(metadata i8** %28, metadata !2177, metadata !DIExpression()), !dbg !2137
  store i64 %2, i64* %29, align 8
  call void @llvm.dbg.declare(metadata i64* %29, metadata !2178, metadata !DIExpression()), !dbg !2139
  %30 = load i32, i32* %27, align 4, !dbg !2140
  %31 = load i8*, i8** %28, align 8, !dbg !2141
  %32 = load i64, i64* %29, align 8, !dbg !2142
  %33 = call i8* @quotearg_n_options(i32 %30, i8* %31, i64 %32, %struct.quoting_options* @quote_quoting_options), !dbg !2143
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote_n(i32, i8*) #4 !dbg !2179 {
  %3 = load i32, i32* @x.29
  %4 = load i32, i32* @y.30
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !2182, metadata !DIExpression()), !dbg !2183
  store i8* %1, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !2184, metadata !DIExpression()), !dbg !2185
  %13 = load i32, i32* %11, align 4, !dbg !2186
  %14 = load i8*, i8** %12, align 8, !dbg !2187
  %15 = call i8* @quote_n_mem(i32 %13, i8* %14, i64 -1), !dbg !2188
  %16 = load i32, i32* @x.29
  %17 = load i32, i32* @y.30
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %15, !dbg !2189

originalBBalteredBB:                              ; preds = %originalBB, %2
  %24 = alloca i32, align 4
  %25 = alloca i8*, align 8
  store i32 %0, i32* %24, align 4
  call void @llvm.dbg.declare(metadata i32* %24, metadata !2190, metadata !DIExpression()), !dbg !2183
  store i8* %1, i8** %25, align 8
  call void @llvm.dbg.declare(metadata i8** %25, metadata !2222, metadata !DIExpression()), !dbg !2185
  %26 = load i32, i32* %24, align 4, !dbg !2186
  %27 = load i8*, i8** %25, align 8, !dbg !2187
  %28 = call i8* @quote_n_mem(i32 %26, i8* %27, i64 -1), !dbg !2188
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @quote(i8*) #4 !dbg !2223 {
  %2 = load i32, i32* @x.31
  %3 = load i32, i32* @y.32
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i8*, align 8
  store i8* %0, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !2226, metadata !DIExpression()), !dbg !2227
  %11 = load i8*, i8** %10, align 8, !dbg !2228
  %12 = call i8* @quote_n(i32 0, i8* %11), !dbg !2229
  %13 = load i32, i32* @x.31
  %14 = load i32, i32* @y.32
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %12, !dbg !2230

originalBBalteredBB:                              ; preds = %originalBB, %1
  %21 = alloca i8*, align 8
  store i8* %0, i8** %21, align 8
  call void @llvm.dbg.declare(metadata i8** %21, metadata !2231, metadata !DIExpression()), !dbg !2227
  %22 = load i8*, i8** %21, align 8, !dbg !2228
  %23 = call i8* @quote_n(i32 0, i8* %22), !dbg !2229
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc_arn(%struct._IO_FILE*, i8*, i8*, i8*, i8**, i64) #4 !dbg !2263 {
  %7 = alloca %struct._IO_FILE*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i8**, align 8
  %12 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %7, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %7, metadata !2323, metadata !DIExpression()), !dbg !2324
  store i8* %1, i8** %8, align 8
  call void @llvm.dbg.declare(metadata i8** %8, metadata !2325, metadata !DIExpression()), !dbg !2326
  store i8* %2, i8** %9, align 8
  call void @llvm.dbg.declare(metadata i8** %9, metadata !2327, metadata !DIExpression()), !dbg !2328
  store i8* %3, i8** %10, align 8
  call void @llvm.dbg.declare(metadata i8** %10, metadata !2329, metadata !DIExpression()), !dbg !2330
  store i8** %4, i8*** %11, align 8
  call void @llvm.dbg.declare(metadata i8*** %11, metadata !2331, metadata !DIExpression()), !dbg !2332
  store i64 %5, i64* %12, align 8
  call void @llvm.dbg.declare(metadata i64* %12, metadata !2333, metadata !DIExpression()), !dbg !2334
  %13 = load i8*, i8** %8, align 8, !dbg !2335
  %14 = icmp ne i8* %13, null, !dbg !2335
  br i1 %14, label %15, label %37, !dbg !2337

15:                                               ; preds = %6
  %16 = load i32, i32* @x.33
  %17 = load i32, i32* @y.34
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %15, %originalBBalteredBB
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2338
  %25 = load i8*, i8** %8, align 8, !dbg !2339
  %26 = load i8*, i8** %9, align 8, !dbg !2340
  %27 = load i8*, i8** %10, align 8, !dbg !2341
  %28 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %24, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.75, i64 0, i64 0), i8* %25, i8* %26, i8* %27), !dbg !2342
  %29 = load i32, i32* @x.33
  %30 = load i32, i32* @y.34
  %31 = sub i32 %29, 1
  %32 = mul i32 %29, %31
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %34, %35
  br i1 %36, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %42, !dbg !2342

37:                                               ; preds = %6
  %38 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2343
  %39 = load i8*, i8** %9, align 8, !dbg !2344
  %40 = load i8*, i8** %10, align 8, !dbg !2345
  %41 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %38, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1.76, i64 0, i64 0), i8* %39, i8* %40), !dbg !2346
  br label %42

42:                                               ; preds = %37, %originalBBpart2
  %43 = load i32, i32* @x.33
  %44 = load i32, i32* @y.34
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %42, %originalBB1alteredBB
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2347
  %52 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.77, i64 0, i64 0)) #10, !dbg !2348
  %53 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %51, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @version_etc_copyright, i64 0, i64 0), i8* %52, i32 2020), !dbg !2349
  %54 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2350
  %55 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.78, i64 0, i64 0), %struct._IO_FILE* %54), !dbg !2350
  %56 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2351
  %57 = call i8* @gettext(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.4.79, i64 0, i64 0)) #10, !dbg !2352
  %58 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %56, i8* %57, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5.80, i64 0, i64 0)), !dbg !2353
  %59 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2354
  %60 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.78, i64 0, i64 0), %struct._IO_FILE* %59), !dbg !2354
  %61 = load i64, i64* %12, align 8, !dbg !2355
  %62 = load i32, i32* @x.33
  %63 = load i32, i32* @y.34
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  switch i64 %61, label %354 [
    i64 0, label %70
    i64 1, label %87
    i64 2, label %110
    i64 3, label %120
    i64 4, label %133
    i64 5, label %165
    i64 6, label %200
    i64 7, label %238
    i64 8, label %279
    i64 9, label %307
  ], !dbg !2356

70:                                               ; preds = %originalBBpart24
  %71 = load i32, i32* @x.33
  %72 = load i32, i32* @y.34
  %73 = sub i32 %71, 1
  %74 = mul i32 %71, %73
  %75 = urem i32 %74, 2
  %76 = icmp eq i32 %75, 0
  %77 = icmp slt i32 %72, 10
  %78 = or i1 %76, %77
  br i1 %78, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %70, %originalBB6alteredBB
  %79 = load i32, i32* @x.33
  %80 = load i32, i32* @y.34
  %81 = sub i32 %79, 1
  %82 = mul i32 %79, %81
  %83 = urem i32 %82, 2
  %84 = icmp eq i32 %83, 0
  %85 = icmp slt i32 %80, 10
  %86 = or i1 %84, %85
  br i1 %86, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %385, !dbg !2357

87:                                               ; preds = %originalBBpart24
  %88 = load i32, i32* @x.33
  %89 = load i32, i32* @y.34
  %90 = sub i32 %88, 1
  %91 = mul i32 %88, %90
  %92 = urem i32 %91, 2
  %93 = icmp eq i32 %92, 0
  %94 = icmp slt i32 %89, 10
  %95 = or i1 %93, %94
  br i1 %95, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %87, %originalBB10alteredBB
  %96 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2359
  %97 = call i8* @gettext(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.81, i64 0, i64 0)) #10, !dbg !2360
  %98 = load i8**, i8*** %11, align 8, !dbg !2361
  %99 = getelementptr inbounds i8*, i8** %98, i64 0, !dbg !2361
  %100 = load i8*, i8** %99, align 8, !dbg !2361
  %101 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %96, i8* %97, i8* %100), !dbg !2362
  %102 = load i32, i32* @x.33
  %103 = load i32, i32* @y.34
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %385, !dbg !2363

110:                                              ; preds = %originalBBpart24
  %111 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2364
  %112 = call i8* @gettext(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7.82, i64 0, i64 0)) #10, !dbg !2365
  %113 = load i8**, i8*** %11, align 8, !dbg !2366
  %114 = getelementptr inbounds i8*, i8** %113, i64 0, !dbg !2366
  %115 = load i8*, i8** %114, align 8, !dbg !2366
  %116 = load i8**, i8*** %11, align 8, !dbg !2367
  %117 = getelementptr inbounds i8*, i8** %116, i64 1, !dbg !2367
  %118 = load i8*, i8** %117, align 8, !dbg !2367
  %119 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %111, i8* %112, i8* %115, i8* %118), !dbg !2368
  br label %385, !dbg !2369

120:                                              ; preds = %originalBBpart24
  %121 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2370
  %122 = call i8* @gettext(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8.83, i64 0, i64 0)) #10, !dbg !2371
  %123 = load i8**, i8*** %11, align 8, !dbg !2372
  %124 = getelementptr inbounds i8*, i8** %123, i64 0, !dbg !2372
  %125 = load i8*, i8** %124, align 8, !dbg !2372
  %126 = load i8**, i8*** %11, align 8, !dbg !2373
  %127 = getelementptr inbounds i8*, i8** %126, i64 1, !dbg !2373
  %128 = load i8*, i8** %127, align 8, !dbg !2373
  %129 = load i8**, i8*** %11, align 8, !dbg !2374
  %130 = getelementptr inbounds i8*, i8** %129, i64 2, !dbg !2374
  %131 = load i8*, i8** %130, align 8, !dbg !2374
  %132 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %121, i8* %122, i8* %125, i8* %128, i8* %131), !dbg !2375
  br label %385, !dbg !2376

133:                                              ; preds = %originalBBpart24
  %134 = load i32, i32* @x.33
  %135 = load i32, i32* @y.34
  %136 = sub i32 %134, 1
  %137 = mul i32 %134, %136
  %138 = urem i32 %137, 2
  %139 = icmp eq i32 %138, 0
  %140 = icmp slt i32 %135, 10
  %141 = or i1 %139, %140
  br i1 %141, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %133, %originalBB14alteredBB
  %142 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2377
  %143 = call i8* @gettext(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.9.84, i64 0, i64 0)) #10, !dbg !2378
  %144 = load i8**, i8*** %11, align 8, !dbg !2379
  %145 = getelementptr inbounds i8*, i8** %144, i64 0, !dbg !2379
  %146 = load i8*, i8** %145, align 8, !dbg !2379
  %147 = load i8**, i8*** %11, align 8, !dbg !2380
  %148 = getelementptr inbounds i8*, i8** %147, i64 1, !dbg !2380
  %149 = load i8*, i8** %148, align 8, !dbg !2380
  %150 = load i8**, i8*** %11, align 8, !dbg !2381
  %151 = getelementptr inbounds i8*, i8** %150, i64 2, !dbg !2381
  %152 = load i8*, i8** %151, align 8, !dbg !2381
  %153 = load i8**, i8*** %11, align 8, !dbg !2382
  %154 = getelementptr inbounds i8*, i8** %153, i64 3, !dbg !2382
  %155 = load i8*, i8** %154, align 8, !dbg !2382
  %156 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %142, i8* %143, i8* %146, i8* %149, i8* %152, i8* %155), !dbg !2383
  %157 = load i32, i32* @x.33
  %158 = load i32, i32* @y.34
  %159 = sub i32 %157, 1
  %160 = mul i32 %157, %159
  %161 = urem i32 %160, 2
  %162 = icmp eq i32 %161, 0
  %163 = icmp slt i32 %158, 10
  %164 = or i1 %162, %163
  br i1 %164, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %385, !dbg !2384

165:                                              ; preds = %originalBBpart24
  %166 = load i32, i32* @x.33
  %167 = load i32, i32* @y.34
  %168 = sub i32 %166, 1
  %169 = mul i32 %166, %168
  %170 = urem i32 %169, 2
  %171 = icmp eq i32 %170, 0
  %172 = icmp slt i32 %167, 10
  %173 = or i1 %171, %172
  br i1 %173, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %165, %originalBB18alteredBB
  %174 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2385
  %175 = call i8* @gettext(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.10.85, i64 0, i64 0)) #10, !dbg !2386
  %176 = load i8**, i8*** %11, align 8, !dbg !2387
  %177 = getelementptr inbounds i8*, i8** %176, i64 0, !dbg !2387
  %178 = load i8*, i8** %177, align 8, !dbg !2387
  %179 = load i8**, i8*** %11, align 8, !dbg !2388
  %180 = getelementptr inbounds i8*, i8** %179, i64 1, !dbg !2388
  %181 = load i8*, i8** %180, align 8, !dbg !2388
  %182 = load i8**, i8*** %11, align 8, !dbg !2389
  %183 = getelementptr inbounds i8*, i8** %182, i64 2, !dbg !2389
  %184 = load i8*, i8** %183, align 8, !dbg !2389
  %185 = load i8**, i8*** %11, align 8, !dbg !2390
  %186 = getelementptr inbounds i8*, i8** %185, i64 3, !dbg !2390
  %187 = load i8*, i8** %186, align 8, !dbg !2390
  %188 = load i8**, i8*** %11, align 8, !dbg !2391
  %189 = getelementptr inbounds i8*, i8** %188, i64 4, !dbg !2391
  %190 = load i8*, i8** %189, align 8, !dbg !2391
  %191 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %174, i8* %175, i8* %178, i8* %181, i8* %184, i8* %187, i8* %190), !dbg !2392
  %192 = load i32, i32* @x.33
  %193 = load i32, i32* @y.34
  %194 = sub i32 %192, 1
  %195 = mul i32 %192, %194
  %196 = urem i32 %195, 2
  %197 = icmp eq i32 %196, 0
  %198 = icmp slt i32 %193, 10
  %199 = or i1 %197, %198
  br i1 %199, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %385, !dbg !2393

200:                                              ; preds = %originalBBpart24
  %201 = load i32, i32* @x.33
  %202 = load i32, i32* @y.34
  %203 = sub i32 %201, 1
  %204 = mul i32 %201, %203
  %205 = urem i32 %204, 2
  %206 = icmp eq i32 %205, 0
  %207 = icmp slt i32 %202, 10
  %208 = or i1 %206, %207
  br i1 %208, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %200, %originalBB22alteredBB
  %209 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2394
  %210 = call i8* @gettext(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11.86, i64 0, i64 0)) #10, !dbg !2395
  %211 = load i8**, i8*** %11, align 8, !dbg !2396
  %212 = getelementptr inbounds i8*, i8** %211, i64 0, !dbg !2396
  %213 = load i8*, i8** %212, align 8, !dbg !2396
  %214 = load i8**, i8*** %11, align 8, !dbg !2397
  %215 = getelementptr inbounds i8*, i8** %214, i64 1, !dbg !2397
  %216 = load i8*, i8** %215, align 8, !dbg !2397
  %217 = load i8**, i8*** %11, align 8, !dbg !2398
  %218 = getelementptr inbounds i8*, i8** %217, i64 2, !dbg !2398
  %219 = load i8*, i8** %218, align 8, !dbg !2398
  %220 = load i8**, i8*** %11, align 8, !dbg !2399
  %221 = getelementptr inbounds i8*, i8** %220, i64 3, !dbg !2399
  %222 = load i8*, i8** %221, align 8, !dbg !2399
  %223 = load i8**, i8*** %11, align 8, !dbg !2400
  %224 = getelementptr inbounds i8*, i8** %223, i64 4, !dbg !2400
  %225 = load i8*, i8** %224, align 8, !dbg !2400
  %226 = load i8**, i8*** %11, align 8, !dbg !2401
  %227 = getelementptr inbounds i8*, i8** %226, i64 5, !dbg !2401
  %228 = load i8*, i8** %227, align 8, !dbg !2401
  %229 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %209, i8* %210, i8* %213, i8* %216, i8* %219, i8* %222, i8* %225, i8* %228), !dbg !2402
  %230 = load i32, i32* @x.33
  %231 = load i32, i32* @y.34
  %232 = sub i32 %230, 1
  %233 = mul i32 %230, %232
  %234 = urem i32 %233, 2
  %235 = icmp eq i32 %234, 0
  %236 = icmp slt i32 %231, 10
  %237 = or i1 %235, %236
  br i1 %237, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %385, !dbg !2403

238:                                              ; preds = %originalBBpart24
  %239 = load i32, i32* @x.33
  %240 = load i32, i32* @y.34
  %241 = sub i32 %239, 1
  %242 = mul i32 %239, %241
  %243 = urem i32 %242, 2
  %244 = icmp eq i32 %243, 0
  %245 = icmp slt i32 %240, 10
  %246 = or i1 %244, %245
  br i1 %246, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %238, %originalBB26alteredBB
  %247 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2404
  %248 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.12.87, i64 0, i64 0)) #10, !dbg !2405
  %249 = load i8**, i8*** %11, align 8, !dbg !2406
  %250 = getelementptr inbounds i8*, i8** %249, i64 0, !dbg !2406
  %251 = load i8*, i8** %250, align 8, !dbg !2406
  %252 = load i8**, i8*** %11, align 8, !dbg !2407
  %253 = getelementptr inbounds i8*, i8** %252, i64 1, !dbg !2407
  %254 = load i8*, i8** %253, align 8, !dbg !2407
  %255 = load i8**, i8*** %11, align 8, !dbg !2408
  %256 = getelementptr inbounds i8*, i8** %255, i64 2, !dbg !2408
  %257 = load i8*, i8** %256, align 8, !dbg !2408
  %258 = load i8**, i8*** %11, align 8, !dbg !2409
  %259 = getelementptr inbounds i8*, i8** %258, i64 3, !dbg !2409
  %260 = load i8*, i8** %259, align 8, !dbg !2409
  %261 = load i8**, i8*** %11, align 8, !dbg !2410
  %262 = getelementptr inbounds i8*, i8** %261, i64 4, !dbg !2410
  %263 = load i8*, i8** %262, align 8, !dbg !2410
  %264 = load i8**, i8*** %11, align 8, !dbg !2411
  %265 = getelementptr inbounds i8*, i8** %264, i64 5, !dbg !2411
  %266 = load i8*, i8** %265, align 8, !dbg !2411
  %267 = load i8**, i8*** %11, align 8, !dbg !2412
  %268 = getelementptr inbounds i8*, i8** %267, i64 6, !dbg !2412
  %269 = load i8*, i8** %268, align 8, !dbg !2412
  %270 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %247, i8* %248, i8* %251, i8* %254, i8* %257, i8* %260, i8* %263, i8* %266, i8* %269), !dbg !2413
  %271 = load i32, i32* @x.33
  %272 = load i32, i32* @y.34
  %273 = sub i32 %271, 1
  %274 = mul i32 %271, %273
  %275 = urem i32 %274, 2
  %276 = icmp eq i32 %275, 0
  %277 = icmp slt i32 %272, 10
  %278 = or i1 %276, %277
  br i1 %278, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %385, !dbg !2414

279:                                              ; preds = %originalBBpart24
  %280 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2415
  %281 = call i8* @gettext(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.13.88, i64 0, i64 0)) #10, !dbg !2416
  %282 = load i8**, i8*** %11, align 8, !dbg !2417
  %283 = getelementptr inbounds i8*, i8** %282, i64 0, !dbg !2417
  %284 = load i8*, i8** %283, align 8, !dbg !2417
  %285 = load i8**, i8*** %11, align 8, !dbg !2418
  %286 = getelementptr inbounds i8*, i8** %285, i64 1, !dbg !2418
  %287 = load i8*, i8** %286, align 8, !dbg !2418
  %288 = load i8**, i8*** %11, align 8, !dbg !2419
  %289 = getelementptr inbounds i8*, i8** %288, i64 2, !dbg !2419
  %290 = load i8*, i8** %289, align 8, !dbg !2419
  %291 = load i8**, i8*** %11, align 8, !dbg !2420
  %292 = getelementptr inbounds i8*, i8** %291, i64 3, !dbg !2420
  %293 = load i8*, i8** %292, align 8, !dbg !2420
  %294 = load i8**, i8*** %11, align 8, !dbg !2421
  %295 = getelementptr inbounds i8*, i8** %294, i64 4, !dbg !2421
  %296 = load i8*, i8** %295, align 8, !dbg !2421
  %297 = load i8**, i8*** %11, align 8, !dbg !2422
  %298 = getelementptr inbounds i8*, i8** %297, i64 5, !dbg !2422
  %299 = load i8*, i8** %298, align 8, !dbg !2422
  %300 = load i8**, i8*** %11, align 8, !dbg !2423
  %301 = getelementptr inbounds i8*, i8** %300, i64 6, !dbg !2423
  %302 = load i8*, i8** %301, align 8, !dbg !2423
  %303 = load i8**, i8*** %11, align 8, !dbg !2424
  %304 = getelementptr inbounds i8*, i8** %303, i64 7, !dbg !2424
  %305 = load i8*, i8** %304, align 8, !dbg !2424
  %306 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %280, i8* %281, i8* %284, i8* %287, i8* %290, i8* %293, i8* %296, i8* %299, i8* %302, i8* %305), !dbg !2425
  br label %385, !dbg !2426

307:                                              ; preds = %originalBBpart24
  %308 = load i32, i32* @x.33
  %309 = load i32, i32* @y.34
  %310 = sub i32 %308, 1
  %311 = mul i32 %308, %310
  %312 = urem i32 %311, 2
  %313 = icmp eq i32 %312, 0
  %314 = icmp slt i32 %309, 10
  %315 = or i1 %313, %314
  br i1 %315, label %originalBB30, label %originalBB30alteredBB

originalBB30:                                     ; preds = %307, %originalBB30alteredBB
  %316 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2427
  %317 = call i8* @gettext(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.14.89, i64 0, i64 0)) #10, !dbg !2428
  %318 = load i8**, i8*** %11, align 8, !dbg !2429
  %319 = getelementptr inbounds i8*, i8** %318, i64 0, !dbg !2429
  %320 = load i8*, i8** %319, align 8, !dbg !2429
  %321 = load i8**, i8*** %11, align 8, !dbg !2430
  %322 = getelementptr inbounds i8*, i8** %321, i64 1, !dbg !2430
  %323 = load i8*, i8** %322, align 8, !dbg !2430
  %324 = load i8**, i8*** %11, align 8, !dbg !2431
  %325 = getelementptr inbounds i8*, i8** %324, i64 2, !dbg !2431
  %326 = load i8*, i8** %325, align 8, !dbg !2431
  %327 = load i8**, i8*** %11, align 8, !dbg !2432
  %328 = getelementptr inbounds i8*, i8** %327, i64 3, !dbg !2432
  %329 = load i8*, i8** %328, align 8, !dbg !2432
  %330 = load i8**, i8*** %11, align 8, !dbg !2433
  %331 = getelementptr inbounds i8*, i8** %330, i64 4, !dbg !2433
  %332 = load i8*, i8** %331, align 8, !dbg !2433
  %333 = load i8**, i8*** %11, align 8, !dbg !2434
  %334 = getelementptr inbounds i8*, i8** %333, i64 5, !dbg !2434
  %335 = load i8*, i8** %334, align 8, !dbg !2434
  %336 = load i8**, i8*** %11, align 8, !dbg !2435
  %337 = getelementptr inbounds i8*, i8** %336, i64 6, !dbg !2435
  %338 = load i8*, i8** %337, align 8, !dbg !2435
  %339 = load i8**, i8*** %11, align 8, !dbg !2436
  %340 = getelementptr inbounds i8*, i8** %339, i64 7, !dbg !2436
  %341 = load i8*, i8** %340, align 8, !dbg !2436
  %342 = load i8**, i8*** %11, align 8, !dbg !2437
  %343 = getelementptr inbounds i8*, i8** %342, i64 8, !dbg !2437
  %344 = load i8*, i8** %343, align 8, !dbg !2437
  %345 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %316, i8* %317, i8* %320, i8* %323, i8* %326, i8* %329, i8* %332, i8* %335, i8* %338, i8* %341, i8* %344), !dbg !2438
  %346 = load i32, i32* @x.33
  %347 = load i32, i32* @y.34
  %348 = sub i32 %346, 1
  %349 = mul i32 %346, %348
  %350 = urem i32 %349, 2
  %351 = icmp eq i32 %350, 0
  %352 = icmp slt i32 %347, 10
  %353 = or i1 %351, %352
  br i1 %353, label %originalBBpart232, label %originalBB30alteredBB

originalBBpart232:                                ; preds = %originalBB30
  br label %385, !dbg !2439

354:                                              ; preds = %originalBBpart24
  %355 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2440
  %356 = call i8* @gettext(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.15.90, i64 0, i64 0)) #10, !dbg !2441
  %357 = load i8**, i8*** %11, align 8, !dbg !2442
  %358 = getelementptr inbounds i8*, i8** %357, i64 0, !dbg !2442
  %359 = load i8*, i8** %358, align 8, !dbg !2442
  %360 = load i8**, i8*** %11, align 8, !dbg !2443
  %361 = getelementptr inbounds i8*, i8** %360, i64 1, !dbg !2443
  %362 = load i8*, i8** %361, align 8, !dbg !2443
  %363 = load i8**, i8*** %11, align 8, !dbg !2444
  %364 = getelementptr inbounds i8*, i8** %363, i64 2, !dbg !2444
  %365 = load i8*, i8** %364, align 8, !dbg !2444
  %366 = load i8**, i8*** %11, align 8, !dbg !2445
  %367 = getelementptr inbounds i8*, i8** %366, i64 3, !dbg !2445
  %368 = load i8*, i8** %367, align 8, !dbg !2445
  %369 = load i8**, i8*** %11, align 8, !dbg !2446
  %370 = getelementptr inbounds i8*, i8** %369, i64 4, !dbg !2446
  %371 = load i8*, i8** %370, align 8, !dbg !2446
  %372 = load i8**, i8*** %11, align 8, !dbg !2447
  %373 = getelementptr inbounds i8*, i8** %372, i64 5, !dbg !2447
  %374 = load i8*, i8** %373, align 8, !dbg !2447
  %375 = load i8**, i8*** %11, align 8, !dbg !2448
  %376 = getelementptr inbounds i8*, i8** %375, i64 6, !dbg !2448
  %377 = load i8*, i8** %376, align 8, !dbg !2448
  %378 = load i8**, i8*** %11, align 8, !dbg !2449
  %379 = getelementptr inbounds i8*, i8** %378, i64 7, !dbg !2449
  %380 = load i8*, i8** %379, align 8, !dbg !2449
  %381 = load i8**, i8*** %11, align 8, !dbg !2450
  %382 = getelementptr inbounds i8*, i8** %381, i64 8, !dbg !2450
  %383 = load i8*, i8** %382, align 8, !dbg !2450
  %384 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %355, i8* %356, i8* %359, i8* %362, i8* %365, i8* %368, i8* %371, i8* %374, i8* %377, i8* %380, i8* %383), !dbg !2451
  br label %385, !dbg !2452

385:                                              ; preds = %354, %originalBBpart232, %279, %originalBBpart228, %originalBBpart224, %originalBBpart220, %originalBBpart216, %120, %110, %originalBBpart212, %originalBBpart28
  ret void, !dbg !2453

originalBBalteredBB:                              ; preds = %originalBB, %15
  %386 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2338
  %387 = load i8*, i8** %8, align 8, !dbg !2339
  %388 = load i8*, i8** %9, align 8, !dbg !2340
  %389 = load i8*, i8** %10, align 8, !dbg !2341
  %390 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %386, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.75, i64 0, i64 0), i8* %387, i8* %388, i8* %389), !dbg !2342
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %42
  %391 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2347
  %392 = call i8* @gettext(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2.77, i64 0, i64 0)) #10, !dbg !2348
  %393 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %391, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @version_etc_copyright, i64 0, i64 0), i8* %392, i32 2020), !dbg !2349
  %394 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2350
  %395 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.78, i64 0, i64 0), %struct._IO_FILE* %394), !dbg !2350
  %396 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2351
  %397 = call i8* @gettext(i8* getelementptr inbounds ([171 x i8], [171 x i8]* @.str.4.79, i64 0, i64 0)) #10, !dbg !2352
  %398 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %396, i8* %397, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5.80, i64 0, i64 0)), !dbg !2353
  %399 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2354
  %400 = call i32 @fputs_unlocked(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3.78, i64 0, i64 0), %struct._IO_FILE* %399), !dbg !2354
  %401 = load i64, i64* %12, align 8, !dbg !2355
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %70
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %87
  %402 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2359
  %403 = call i8* @gettext(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6.81, i64 0, i64 0)) #10, !dbg !2360
  %404 = load i8**, i8*** %11, align 8, !dbg !2361
  %405 = getelementptr inbounds i8*, i8** %404, i64 0, !dbg !2361
  %406 = load i8*, i8** %405, align 8, !dbg !2361
  %407 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %402, i8* %403, i8* %406), !dbg !2362
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %133
  %408 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2377
  %409 = call i8* @gettext(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.9.84, i64 0, i64 0)) #10, !dbg !2378
  %410 = load i8**, i8*** %11, align 8, !dbg !2379
  %411 = getelementptr inbounds i8*, i8** %410, i64 0, !dbg !2379
  %412 = load i8*, i8** %411, align 8, !dbg !2379
  %413 = load i8**, i8*** %11, align 8, !dbg !2380
  %414 = getelementptr inbounds i8*, i8** %413, i64 1, !dbg !2380
  %415 = load i8*, i8** %414, align 8, !dbg !2380
  %416 = load i8**, i8*** %11, align 8, !dbg !2381
  %417 = getelementptr inbounds i8*, i8** %416, i64 2, !dbg !2381
  %418 = load i8*, i8** %417, align 8, !dbg !2381
  %419 = load i8**, i8*** %11, align 8, !dbg !2382
  %420 = getelementptr inbounds i8*, i8** %419, i64 3, !dbg !2382
  %421 = load i8*, i8** %420, align 8, !dbg !2382
  %422 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %408, i8* %409, i8* %412, i8* %415, i8* %418, i8* %421), !dbg !2383
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %165
  %423 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2385
  %424 = call i8* @gettext(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.10.85, i64 0, i64 0)) #10, !dbg !2386
  %425 = load i8**, i8*** %11, align 8, !dbg !2387
  %426 = getelementptr inbounds i8*, i8** %425, i64 0, !dbg !2387
  %427 = load i8*, i8** %426, align 8, !dbg !2387
  %428 = load i8**, i8*** %11, align 8, !dbg !2388
  %429 = getelementptr inbounds i8*, i8** %428, i64 1, !dbg !2388
  %430 = load i8*, i8** %429, align 8, !dbg !2388
  %431 = load i8**, i8*** %11, align 8, !dbg !2389
  %432 = getelementptr inbounds i8*, i8** %431, i64 2, !dbg !2389
  %433 = load i8*, i8** %432, align 8, !dbg !2389
  %434 = load i8**, i8*** %11, align 8, !dbg !2390
  %435 = getelementptr inbounds i8*, i8** %434, i64 3, !dbg !2390
  %436 = load i8*, i8** %435, align 8, !dbg !2390
  %437 = load i8**, i8*** %11, align 8, !dbg !2391
  %438 = getelementptr inbounds i8*, i8** %437, i64 4, !dbg !2391
  %439 = load i8*, i8** %438, align 8, !dbg !2391
  %440 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %423, i8* %424, i8* %427, i8* %430, i8* %433, i8* %436, i8* %439), !dbg !2392
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %200
  %441 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2394
  %442 = call i8* @gettext(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11.86, i64 0, i64 0)) #10, !dbg !2395
  %443 = load i8**, i8*** %11, align 8, !dbg !2396
  %444 = getelementptr inbounds i8*, i8** %443, i64 0, !dbg !2396
  %445 = load i8*, i8** %444, align 8, !dbg !2396
  %446 = load i8**, i8*** %11, align 8, !dbg !2397
  %447 = getelementptr inbounds i8*, i8** %446, i64 1, !dbg !2397
  %448 = load i8*, i8** %447, align 8, !dbg !2397
  %449 = load i8**, i8*** %11, align 8, !dbg !2398
  %450 = getelementptr inbounds i8*, i8** %449, i64 2, !dbg !2398
  %451 = load i8*, i8** %450, align 8, !dbg !2398
  %452 = load i8**, i8*** %11, align 8, !dbg !2399
  %453 = getelementptr inbounds i8*, i8** %452, i64 3, !dbg !2399
  %454 = load i8*, i8** %453, align 8, !dbg !2399
  %455 = load i8**, i8*** %11, align 8, !dbg !2400
  %456 = getelementptr inbounds i8*, i8** %455, i64 4, !dbg !2400
  %457 = load i8*, i8** %456, align 8, !dbg !2400
  %458 = load i8**, i8*** %11, align 8, !dbg !2401
  %459 = getelementptr inbounds i8*, i8** %458, i64 5, !dbg !2401
  %460 = load i8*, i8** %459, align 8, !dbg !2401
  %461 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %441, i8* %442, i8* %445, i8* %448, i8* %451, i8* %454, i8* %457, i8* %460), !dbg !2402
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %238
  %462 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2404
  %463 = call i8* @gettext(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.12.87, i64 0, i64 0)) #10, !dbg !2405
  %464 = load i8**, i8*** %11, align 8, !dbg !2406
  %465 = getelementptr inbounds i8*, i8** %464, i64 0, !dbg !2406
  %466 = load i8*, i8** %465, align 8, !dbg !2406
  %467 = load i8**, i8*** %11, align 8, !dbg !2407
  %468 = getelementptr inbounds i8*, i8** %467, i64 1, !dbg !2407
  %469 = load i8*, i8** %468, align 8, !dbg !2407
  %470 = load i8**, i8*** %11, align 8, !dbg !2408
  %471 = getelementptr inbounds i8*, i8** %470, i64 2, !dbg !2408
  %472 = load i8*, i8** %471, align 8, !dbg !2408
  %473 = load i8**, i8*** %11, align 8, !dbg !2409
  %474 = getelementptr inbounds i8*, i8** %473, i64 3, !dbg !2409
  %475 = load i8*, i8** %474, align 8, !dbg !2409
  %476 = load i8**, i8*** %11, align 8, !dbg !2410
  %477 = getelementptr inbounds i8*, i8** %476, i64 4, !dbg !2410
  %478 = load i8*, i8** %477, align 8, !dbg !2410
  %479 = load i8**, i8*** %11, align 8, !dbg !2411
  %480 = getelementptr inbounds i8*, i8** %479, i64 5, !dbg !2411
  %481 = load i8*, i8** %480, align 8, !dbg !2411
  %482 = load i8**, i8*** %11, align 8, !dbg !2412
  %483 = getelementptr inbounds i8*, i8** %482, i64 6, !dbg !2412
  %484 = load i8*, i8** %483, align 8, !dbg !2412
  %485 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %462, i8* %463, i8* %466, i8* %469, i8* %472, i8* %475, i8* %478, i8* %481, i8* %484), !dbg !2413
  br label %originalBB26

originalBB30alteredBB:                            ; preds = %originalBB30, %307
  %486 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8, !dbg !2427
  %487 = call i8* @gettext(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.14.89, i64 0, i64 0)) #10, !dbg !2428
  %488 = load i8**, i8*** %11, align 8, !dbg !2429
  %489 = getelementptr inbounds i8*, i8** %488, i64 0, !dbg !2429
  %490 = load i8*, i8** %489, align 8, !dbg !2429
  %491 = load i8**, i8*** %11, align 8, !dbg !2430
  %492 = getelementptr inbounds i8*, i8** %491, i64 1, !dbg !2430
  %493 = load i8*, i8** %492, align 8, !dbg !2430
  %494 = load i8**, i8*** %11, align 8, !dbg !2431
  %495 = getelementptr inbounds i8*, i8** %494, i64 2, !dbg !2431
  %496 = load i8*, i8** %495, align 8, !dbg !2431
  %497 = load i8**, i8*** %11, align 8, !dbg !2432
  %498 = getelementptr inbounds i8*, i8** %497, i64 3, !dbg !2432
  %499 = load i8*, i8** %498, align 8, !dbg !2432
  %500 = load i8**, i8*** %11, align 8, !dbg !2433
  %501 = getelementptr inbounds i8*, i8** %500, i64 4, !dbg !2433
  %502 = load i8*, i8** %501, align 8, !dbg !2433
  %503 = load i8**, i8*** %11, align 8, !dbg !2434
  %504 = getelementptr inbounds i8*, i8** %503, i64 5, !dbg !2434
  %505 = load i8*, i8** %504, align 8, !dbg !2434
  %506 = load i8**, i8*** %11, align 8, !dbg !2435
  %507 = getelementptr inbounds i8*, i8** %506, i64 6, !dbg !2435
  %508 = load i8*, i8** %507, align 8, !dbg !2435
  %509 = load i8**, i8*** %11, align 8, !dbg !2436
  %510 = getelementptr inbounds i8*, i8** %509, i64 7, !dbg !2436
  %511 = load i8*, i8** %510, align 8, !dbg !2436
  %512 = load i8**, i8*** %11, align 8, !dbg !2437
  %513 = getelementptr inbounds i8*, i8** %512, i64 8, !dbg !2437
  %514 = load i8*, i8** %513, align 8, !dbg !2437
  %515 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %486, i8* %487, i8* %490, i8* %493, i8* %496, i8* %499, i8* %502, i8* %505, i8* %508, i8* %511, i8* %514), !dbg !2438
  br label %originalBB30
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc_va(%struct._IO_FILE*, i8*, i8*, i8*, %struct.__va_list_tag*) #4 !dbg !2454 {
  %6 = load i32, i32* @x.35
  %7 = load i32, i32* @y.36
  %8 = sub i32 %6, 1
  %9 = mul i32 %6, %8
  %10 = urem i32 %9, 2
  %11 = icmp eq i32 %10, 0
  %12 = icmp slt i32 %7, 10
  %13 = or i1 %11, %12
  br i1 %13, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %5, %originalBBalteredBB
  %14 = alloca %struct._IO_FILE*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca i8*, align 8
  %18 = alloca %struct.__va_list_tag*, align 8
  %19 = alloca i64, align 8
  %20 = alloca [10 x i8*], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %14, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %14, metadata !2464, metadata !DIExpression()), !dbg !2465
  store i8* %1, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !2466, metadata !DIExpression()), !dbg !2467
  store i8* %2, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !2468, metadata !DIExpression()), !dbg !2469
  store i8* %3, i8** %17, align 8
  call void @llvm.dbg.declare(metadata i8** %17, metadata !2470, metadata !DIExpression()), !dbg !2471
  store %struct.__va_list_tag* %4, %struct.__va_list_tag** %18, align 8
  call void @llvm.dbg.declare(metadata %struct.__va_list_tag** %18, metadata !2472, metadata !DIExpression()), !dbg !2473
  call void @llvm.dbg.declare(metadata i64* %19, metadata !2474, metadata !DIExpression()), !dbg !2475
  call void @llvm.dbg.declare(metadata [10 x i8*]* %20, metadata !2476, metadata !DIExpression()), !dbg !2478
  store i64 0, i64* %19, align 8, !dbg !2479
  %21 = load i32, i32* @x.35
  %22 = load i32, i32* @y.36
  %23 = sub i32 %21, 1
  %24 = mul i32 %21, %23
  %25 = urem i32 %24, 2
  %26 = icmp eq i32 %25, 0
  %27 = icmp slt i32 %22, 10
  %28 = or i1 %26, %27
  br i1 %28, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %29, !dbg !2481

29:                                               ; preds = %169, %originalBBpart2
  %30 = load i32, i32* @x.35
  %31 = load i32, i32* @y.36
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %29, %originalBB1alteredBB
  %38 = load i64, i64* %19, align 8, !dbg !2482
  %39 = icmp ult i64 %38, 10, !dbg !2484
  %40 = load i32, i32* @x.35
  %41 = load i32, i32* @y.36
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %39, label %48, label %134, !dbg !2485

48:                                               ; preds = %originalBBpart24
  %49 = load i32, i32* @x.35
  %50 = load i32, i32* @y.36
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load %struct.__va_list_tag*, %struct.__va_list_tag** %18, align 8, !dbg !2486
  %58 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 0, !dbg !2486
  %59 = load i32, i32* %58, align 8, !dbg !2486
  %60 = icmp ule i32 %59, 40, !dbg !2486
  %61 = load i32, i32* @x.35
  %62 = load i32, i32* @y.36
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %60, label %69, label %91, !dbg !2486

69:                                               ; preds = %originalBBpart28
  %70 = load i32, i32* @x.35
  %71 = load i32, i32* @y.36
  %72 = sub i32 %70, 1
  %73 = mul i32 %70, %72
  %74 = urem i32 %73, 2
  %75 = icmp eq i32 %74, 0
  %76 = icmp slt i32 %71, 10
  %77 = or i1 %75, %76
  br i1 %77, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %69, %originalBB10alteredBB
  %78 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 3, !dbg !2486
  %79 = load i8*, i8** %78, align 8, !dbg !2486
  %80 = getelementptr i8, i8* %79, i32 %59, !dbg !2486
  %81 = bitcast i8* %80 to i8**, !dbg !2486
  %82 = add i32 %59, 8, !dbg !2486
  store i32 %82, i32* %58, align 8, !dbg !2486
  %83 = load i32, i32* @x.35
  %84 = load i32, i32* @y.36
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBBpart219, label %originalBB10alteredBB

originalBBpart219:                                ; preds = %originalBB10
  br label %112, !dbg !2486

91:                                               ; preds = %originalBBpart28
  %92 = load i32, i32* @x.35
  %93 = load i32, i32* @y.36
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBB21, label %originalBB21alteredBB

originalBB21:                                     ; preds = %91, %originalBB21alteredBB
  %100 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 2, !dbg !2486
  %101 = load i8*, i8** %100, align 8, !dbg !2486
  %102 = bitcast i8* %101 to i8**, !dbg !2486
  %103 = getelementptr i8, i8* %101, i32 8, !dbg !2486
  store i8* %103, i8** %100, align 8, !dbg !2486
  %104 = load i32, i32* @x.35
  %105 = load i32, i32* @y.36
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBBpart223, label %originalBB21alteredBB

originalBBpart223:                                ; preds = %originalBB21
  br label %112, !dbg !2486

112:                                              ; preds = %originalBBpart223, %originalBBpart219
  %113 = phi i8** [ %81, %originalBBpart219 ], [ %102, %originalBBpart223 ], !dbg !2486
  %114 = load i32, i32* @x.35
  %115 = load i32, i32* @y.36
  %116 = sub i32 %114, 1
  %117 = mul i32 %114, %116
  %118 = urem i32 %117, 2
  %119 = icmp eq i32 %118, 0
  %120 = icmp slt i32 %115, 10
  %121 = or i1 %119, %120
  br i1 %121, label %originalBB25, label %originalBB25alteredBB

originalBB25:                                     ; preds = %112, %originalBB25alteredBB
  %122 = load i8*, i8** %113, align 8, !dbg !2486
  %123 = load i64, i64* %19, align 8, !dbg !2487
  %124 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 %123, !dbg !2488
  store i8* %122, i8** %124, align 8, !dbg !2489
  %125 = icmp ne i8* %122, null, !dbg !2490
  %126 = load i32, i32* @x.35
  %127 = load i32, i32* @y.36
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBBpart227, label %originalBB25alteredBB

originalBBpart227:                                ; preds = %originalBB25
  br label %134

134:                                              ; preds = %originalBBpart227, %originalBBpart24
  %135 = phi i1 [ false, %originalBBpart24 ], [ %125, %originalBBpart227 ], !dbg !2491
  %136 = load i32, i32* @x.35
  %137 = load i32, i32* @y.36
  %138 = sub i32 %136, 1
  %139 = mul i32 %136, %138
  %140 = urem i32 %139, 2
  %141 = icmp eq i32 %140, 0
  %142 = icmp slt i32 %137, 10
  %143 = or i1 %141, %142
  br i1 %143, label %originalBB29, label %originalBB29alteredBB

originalBB29:                                     ; preds = %134, %originalBB29alteredBB
  %144 = load i32, i32* @x.35
  %145 = load i32, i32* @y.36
  %146 = sub i32 %144, 1
  %147 = mul i32 %144, %146
  %148 = urem i32 %147, 2
  %149 = icmp eq i32 %148, 0
  %150 = icmp slt i32 %145, 10
  %151 = or i1 %149, %150
  br i1 %151, label %originalBBpart231, label %originalBB29alteredBB

originalBBpart231:                                ; preds = %originalBB29
  br i1 %135, label %152, label %172, !dbg !2492

152:                                              ; preds = %originalBBpart231
  %153 = load i32, i32* @x.35
  %154 = load i32, i32* @y.36
  %155 = sub i32 %153, 1
  %156 = mul i32 %153, %155
  %157 = urem i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = icmp slt i32 %154, 10
  %160 = or i1 %158, %159
  br i1 %160, label %originalBB33, label %originalBB33alteredBB

originalBB33:                                     ; preds = %152, %originalBB33alteredBB
  %161 = load i32, i32* @x.35
  %162 = load i32, i32* @y.36
  %163 = sub i32 %161, 1
  %164 = mul i32 %161, %163
  %165 = urem i32 %164, 2
  %166 = icmp eq i32 %165, 0
  %167 = icmp slt i32 %162, 10
  %168 = or i1 %166, %167
  br i1 %168, label %originalBBpart235, label %originalBB33alteredBB

originalBBpart235:                                ; preds = %originalBB33
  br label %169, !dbg !2492

169:                                              ; preds = %originalBBpart235
  %170 = load i64, i64* %19, align 8, !dbg !2493
  %171 = add i64 %170, 1, !dbg !2493
  store i64 %171, i64* %19, align 8, !dbg !2493
  br label %29, !dbg !2494, !llvm.loop !2495

172:                                              ; preds = %originalBBpart231
  %173 = load i32, i32* @x.35
  %174 = load i32, i32* @y.36
  %175 = sub i32 %173, 1
  %176 = mul i32 %173, %175
  %177 = urem i32 %176, 2
  %178 = icmp eq i32 %177, 0
  %179 = icmp slt i32 %174, 10
  %180 = or i1 %178, %179
  br i1 %180, label %originalBB37, label %originalBB37alteredBB

originalBB37:                                     ; preds = %172, %originalBB37alteredBB
  %181 = load %struct._IO_FILE*, %struct._IO_FILE** %14, align 8, !dbg !2497
  %182 = load i8*, i8** %15, align 8, !dbg !2498
  %183 = load i8*, i8** %16, align 8, !dbg !2499
  %184 = load i8*, i8** %17, align 8, !dbg !2500
  %185 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 0, !dbg !2501
  %186 = load i64, i64* %19, align 8, !dbg !2502
  call void @version_etc_arn(%struct._IO_FILE* %181, i8* %182, i8* %183, i8* %184, i8** %185, i64 %186), !dbg !2503
  %187 = load i32, i32* @x.35
  %188 = load i32, i32* @y.36
  %189 = sub i32 %187, 1
  %190 = mul i32 %187, %189
  %191 = urem i32 %190, 2
  %192 = icmp eq i32 %191, 0
  %193 = icmp slt i32 %188, 10
  %194 = or i1 %192, %193
  br i1 %194, label %originalBBpart239, label %originalBB37alteredBB

originalBBpart239:                                ; preds = %originalBB37
  ret void, !dbg !2504

originalBBalteredBB:                              ; preds = %originalBB, %5
  %195 = alloca %struct._IO_FILE*, align 8
  %196 = alloca i8*, align 8
  %197 = alloca i8*, align 8
  %198 = alloca i8*, align 8
  %199 = alloca %struct.__va_list_tag*, align 8
  %200 = alloca i64, align 8
  %201 = alloca [10 x i8*], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %195, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %195, metadata !2505, metadata !DIExpression()), !dbg !2465
  store i8* %1, i8** %196, align 8
  call void @llvm.dbg.declare(metadata i8** %196, metadata !2551, metadata !DIExpression()), !dbg !2467
  store i8* %2, i8** %197, align 8
  call void @llvm.dbg.declare(metadata i8** %197, metadata !2552, metadata !DIExpression()), !dbg !2469
  store i8* %3, i8** %198, align 8
  call void @llvm.dbg.declare(metadata i8** %198, metadata !2553, metadata !DIExpression()), !dbg !2471
  store %struct.__va_list_tag* %4, %struct.__va_list_tag** %199, align 8
  call void @llvm.dbg.declare(metadata %struct.__va_list_tag** %199, metadata !2554, metadata !DIExpression()), !dbg !2473
  call void @llvm.dbg.declare(metadata i64* %200, metadata !2555, metadata !DIExpression()), !dbg !2475
  call void @llvm.dbg.declare(metadata [10 x i8*]* %201, metadata !2556, metadata !DIExpression()), !dbg !2478
  store i64 0, i64* %200, align 8, !dbg !2479
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %29
  %202 = load i64, i64* %19, align 8, !dbg !2482
  %203 = icmp ult i64 %202, 10, !dbg !2484
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  %204 = load %struct.__va_list_tag*, %struct.__va_list_tag** %18, align 8, !dbg !2486
  %205 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %204, i32 0, i32 0, !dbg !2486
  %206 = load i32, i32* %205, align 8, !dbg !2486
  %207 = icmp ule i32 %206, 40, !dbg !2486
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %69
  %208 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 3, !dbg !2486
  %209 = load i8*, i8** %208, align 8, !dbg !2486
  %210 = getelementptr i8, i8* %209, i32 %59, !dbg !2486
  %211 = bitcast i8* %210 to i8**, !dbg !2486
  %_ = sub i32 %59, 8
  %gen = mul i32 %_, 8
  %_11 = sub i32 %59, 8
  %gen12 = mul i32 %_11, 8
  %_13 = sub i32 0, %59
  %gen14 = add i32 %_13, 8
  %_15 = shl i32 %59, 8
  %_16 = sub i32 %59, 8
  %gen17 = mul i32 %_16, 8
  %212 = add i32 %59, 8, !dbg !2486
  store i32 %212, i32* %58, align 8, !dbg !2486
  br label %originalBB10

originalBB21alteredBB:                            ; preds = %originalBB21, %91
  %213 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %57, i32 0, i32 2, !dbg !2486
  %214 = load i8*, i8** %213, align 8, !dbg !2486
  %215 = bitcast i8* %214 to i8**, !dbg !2486
  %216 = getelementptr i8, i8* %214, i32 8, !dbg !2486
  store i8* %216, i8** %213, align 8, !dbg !2486
  br label %originalBB21

originalBB25alteredBB:                            ; preds = %originalBB25, %112
  %217 = load i8*, i8** %113, align 8, !dbg !2486
  %218 = load i64, i64* %19, align 8, !dbg !2487
  %219 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 %218, !dbg !2488
  store i8* %217, i8** %219, align 8, !dbg !2489
  %220 = icmp ne i8* %217, null, !dbg !2490
  br label %originalBB25

originalBB29alteredBB:                            ; preds = %originalBB29, %134
  br label %originalBB29

originalBB33alteredBB:                            ; preds = %originalBB33, %152
  br label %originalBB33

originalBB37alteredBB:                            ; preds = %originalBB37, %172
  %221 = load %struct._IO_FILE*, %struct._IO_FILE** %14, align 8, !dbg !2497
  %222 = load i8*, i8** %15, align 8, !dbg !2498
  %223 = load i8*, i8** %16, align 8, !dbg !2499
  %224 = load i8*, i8** %17, align 8, !dbg !2500
  %225 = getelementptr inbounds [10 x i8*], [10 x i8*]* %20, i64 0, i64 0, !dbg !2501
  %226 = load i64, i64* %19, align 8, !dbg !2502
  call void @version_etc_arn(%struct._IO_FILE* %221, i8* %222, i8* %223, i8* %224, i8** %225, i64 %226), !dbg !2503
  br label %originalBB37
}

; Function Attrs: noinline nounwind optnone uwtable
define internal void @version_etc(%struct._IO_FILE*, i8*, i8*, i8*, ...) #4 !dbg !2557 {
  %5 = load i32, i32* @x.37
  %6 = load i32, i32* @y.38
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %4, %originalBBalteredBB
  %13 = alloca %struct._IO_FILE*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8*, align 8
  %17 = alloca [1 x %struct.__va_list_tag], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %13, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %13, metadata !2560, metadata !DIExpression()), !dbg !2561
  store i8* %1, i8** %14, align 8
  call void @llvm.dbg.declare(metadata i8** %14, metadata !2562, metadata !DIExpression()), !dbg !2563
  store i8* %2, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !2564, metadata !DIExpression()), !dbg !2565
  store i8* %3, i8** %16, align 8
  call void @llvm.dbg.declare(metadata i8** %16, metadata !2566, metadata !DIExpression()), !dbg !2567
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %17, metadata !2568, metadata !DIExpression()), !dbg !2575
  %18 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %17, i64 0, i64 0, !dbg !2576
  %19 = bitcast %struct.__va_list_tag* %18 to i8*, !dbg !2576
  call void @llvm.va_start(i8* %19), !dbg !2576
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !2577
  %21 = load i8*, i8** %14, align 8, !dbg !2578
  %22 = load i8*, i8** %15, align 8, !dbg !2579
  %23 = load i8*, i8** %16, align 8, !dbg !2580
  %24 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %17, i64 0, i64 0, !dbg !2581
  call void @version_etc_va(%struct._IO_FILE* %20, i8* %21, i8* %22, i8* %23, %struct.__va_list_tag* %24), !dbg !2582
  %25 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %17, i64 0, i64 0, !dbg !2583
  %26 = bitcast %struct.__va_list_tag* %25 to i8*, !dbg !2583
  call void @llvm.va_end(i8* %26), !dbg !2583
  %27 = load i32, i32* @x.37
  %28 = load i32, i32* @y.38
  %29 = sub i32 %27, 1
  %30 = mul i32 %27, %29
  %31 = urem i32 %30, 2
  %32 = icmp eq i32 %31, 0
  %33 = icmp slt i32 %28, 10
  %34 = or i1 %32, %33
  br i1 %34, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret void, !dbg !2584

originalBBalteredBB:                              ; preds = %originalBB, %4
  %35 = alloca %struct._IO_FILE*, align 8
  %36 = alloca i8*, align 8
  %37 = alloca i8*, align 8
  %38 = alloca i8*, align 8
  %39 = alloca [1 x %struct.__va_list_tag], align 16
  store %struct._IO_FILE* %0, %struct._IO_FILE** %35, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %35, metadata !2585, metadata !DIExpression()), !dbg !2561
  store i8* %1, i8** %36, align 8
  call void @llvm.dbg.declare(metadata i8** %36, metadata !2624, metadata !DIExpression()), !dbg !2563
  store i8* %2, i8** %37, align 8
  call void @llvm.dbg.declare(metadata i8** %37, metadata !2625, metadata !DIExpression()), !dbg !2565
  store i8* %3, i8** %38, align 8
  call void @llvm.dbg.declare(metadata i8** %38, metadata !2626, metadata !DIExpression()), !dbg !2567
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %39, metadata !2627, metadata !DIExpression()), !dbg !2575
  %40 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %39, i64 0, i64 0, !dbg !2576
  %41 = bitcast %struct.__va_list_tag* %40 to i8*, !dbg !2576
  call void @llvm.va_start(i8* %41), !dbg !2576
  %42 = load %struct._IO_FILE*, %struct._IO_FILE** %35, align 8, !dbg !2577
  %43 = load i8*, i8** %36, align 8, !dbg !2578
  %44 = load i8*, i8** %37, align 8, !dbg !2579
  %45 = load i8*, i8** %38, align 8, !dbg !2580
  %46 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %39, i64 0, i64 0, !dbg !2581
  call void @version_etc_va(%struct._IO_FILE* %42, i8* %43, i8* %44, i8* %45, %struct.__va_list_tag* %46), !dbg !2582
  %47 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %39, i64 0, i64 0, !dbg !2583
  %48 = bitcast %struct.__va_list_tag* %47 to i8*, !dbg !2583
  call void @llvm.va_end(i8* %48), !dbg !2583
  br label %originalBB
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #10

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #10

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xmalloc(i64) #4 !dbg !2638 {
  %2 = load i32, i32* @x.39
  %3 = load i32, i32* @y.40
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i64, align 8
  %11 = alloca i8*, align 8
  store i64 %0, i64* %10, align 8
  call void @llvm.dbg.declare(metadata i64* %10, metadata !2642, metadata !DIExpression()), !dbg !2643
  call void @llvm.dbg.declare(metadata i8** %11, metadata !2644, metadata !DIExpression()), !dbg !2645
  %12 = load i64, i64* %10, align 8, !dbg !2646
  %13 = call noalias i8* @malloc(i64 %12) #10, !dbg !2647
  store i8* %13, i8** %11, align 8, !dbg !2645
  %14 = load i8*, i8** %11, align 8, !dbg !2648
  %15 = icmp ne i8* %14, null, !dbg !2648
  %16 = load i32, i32* @x.39
  %17 = load i32, i32* @y.40
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %44, label %24, !dbg !2650

24:                                               ; preds = %originalBBpart2
  %25 = load i32, i32* @x.39
  %26 = load i32, i32* @y.40
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %24, %originalBB1alteredBB
  %33 = load i64, i64* %10, align 8, !dbg !2651
  %34 = icmp ne i64 %33, 0, !dbg !2652
  %35 = load i32, i32* @x.39
  %36 = load i32, i32* @y.40
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %34, label %43, label %44, !dbg !2653

43:                                               ; preds = %originalBBpart24
  call void @xalloc_die() #15, !dbg !2654
  unreachable, !dbg !2654

44:                                               ; preds = %originalBBpart24, %originalBBpart2
  %45 = load i8*, i8** %11, align 8, !dbg !2655
  ret i8* %45, !dbg !2656

originalBBalteredBB:                              ; preds = %originalBB, %1
  %46 = alloca i64, align 8
  %47 = alloca i8*, align 8
  store i64 %0, i64* %46, align 8
  call void @llvm.dbg.declare(metadata i64* %46, metadata !2657, metadata !DIExpression()), !dbg !2643
  call void @llvm.dbg.declare(metadata i8** %47, metadata !2660, metadata !DIExpression()), !dbg !2645
  %48 = load i64, i64* %46, align 8, !dbg !2646
  %49 = call noalias i8* @malloc(i64 %48) #10, !dbg !2647
  store i8* %49, i8** %47, align 8, !dbg !2645
  %50 = load i8*, i8** %47, align 8, !dbg !2648
  %51 = icmp ne i8* %50, null, !dbg !2648
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %24
  %52 = load i64, i64* %10, align 8, !dbg !2651
  %53 = icmp ne i64 %52, 0, !dbg !2652
  br label %originalBB1
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @xrealloc(i8*, i64) #4 !dbg !2661 {
  %3 = load i32, i32* @x.41
  %4 = load i32, i32* @y.42
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !2664, metadata !DIExpression()), !dbg !2665
  store i64 %1, i64* %13, align 8
  call void @llvm.dbg.declare(metadata i64* %13, metadata !2666, metadata !DIExpression()), !dbg !2667
  %14 = load i64, i64* %13, align 8, !dbg !2668
  %15 = icmp ne i64 %14, 0, !dbg !2668
  %16 = load i32, i32* @x.41
  %17 = load i32, i32* @y.42
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %61, label %24, !dbg !2670

24:                                               ; preds = %originalBBpart2
  %25 = load i32, i32* @x.41
  %26 = load i32, i32* @y.42
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %24, %originalBB1alteredBB
  %33 = load i8*, i8** %12, align 8, !dbg !2671
  %34 = icmp ne i8* %33, null, !dbg !2671
  %35 = load i32, i32* @x.41
  %36 = load i32, i32* @y.42
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %34, label %43, label %61, !dbg !2672

43:                                               ; preds = %originalBBpart24
  %44 = load i32, i32* @x.41
  %45 = load i32, i32* @y.42
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %43, %originalBB6alteredBB
  %52 = load i8*, i8** %12, align 8, !dbg !2673
  call void @free(i8* %52) #10, !dbg !2675
  store i8* null, i8** %11, align 8, !dbg !2676
  %53 = load i32, i32* @x.41
  %54 = load i32, i32* @y.42
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %121, !dbg !2676

61:                                               ; preds = %originalBBpart24, %originalBBpart2
  %62 = load i32, i32* @x.41
  %63 = load i32, i32* @y.42
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %61, %originalBB10alteredBB
  %70 = load i8*, i8** %12, align 8, !dbg !2677
  %71 = load i64, i64* %13, align 8, !dbg !2678
  %72 = call i8* @realloc(i8* %70, i64 %71) #10, !dbg !2679
  store i8* %72, i8** %12, align 8, !dbg !2680
  %73 = load i8*, i8** %12, align 8, !dbg !2681
  %74 = icmp ne i8* %73, null, !dbg !2681
  %75 = load i32, i32* @x.41
  %76 = load i32, i32* @y.42
  %77 = sub i32 %75, 1
  %78 = mul i32 %75, %77
  %79 = urem i32 %78, 2
  %80 = icmp eq i32 %79, 0
  %81 = icmp slt i32 %76, 10
  %82 = or i1 %80, %81
  br i1 %82, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %74, label %119, label %83, !dbg !2683

83:                                               ; preds = %originalBBpart212
  %84 = load i32, i32* @x.41
  %85 = load i32, i32* @y.42
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %83, %originalBB14alteredBB
  %92 = load i64, i64* %13, align 8, !dbg !2684
  %93 = icmp ne i64 %92, 0, !dbg !2684
  %94 = load i32, i32* @x.41
  %95 = load i32, i32* @y.42
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %93, label %102, label %119, !dbg !2685

102:                                              ; preds = %originalBBpart216
  %103 = load i32, i32* @x.41
  %104 = load i32, i32* @y.42
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %102, %originalBB18alteredBB
  call void @xalloc_die() #15, !dbg !2686
  %111 = load i32, i32* @x.41
  %112 = load i32, i32* @y.42
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  unreachable, !dbg !2686

119:                                              ; preds = %originalBBpart216, %originalBBpart212
  %120 = load i8*, i8** %12, align 8, !dbg !2687
  store i8* %120, i8** %11, align 8, !dbg !2688
  br label %121, !dbg !2688

121:                                              ; preds = %119, %originalBBpart28
  %122 = load i32, i32* @x.41
  %123 = load i32, i32* @y.42
  %124 = sub i32 %122, 1
  %125 = mul i32 %122, %124
  %126 = urem i32 %125, 2
  %127 = icmp eq i32 %126, 0
  %128 = icmp slt i32 %123, 10
  %129 = or i1 %127, %128
  br i1 %129, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %121, %originalBB22alteredBB
  %130 = load i8*, i8** %11, align 8, !dbg !2689
  %131 = load i32, i32* @x.41
  %132 = load i32, i32* @y.42
  %133 = sub i32 %131, 1
  %134 = mul i32 %131, %133
  %135 = urem i32 %134, 2
  %136 = icmp eq i32 %135, 0
  %137 = icmp slt i32 %132, 10
  %138 = or i1 %136, %137
  br i1 %138, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  ret i8* %130, !dbg !2689

originalBBalteredBB:                              ; preds = %originalBB, %2
  %139 = alloca i8*, align 8
  %140 = alloca i8*, align 8
  %141 = alloca i64, align 8
  store i8* %0, i8** %140, align 8
  call void @llvm.dbg.declare(metadata i8** %140, metadata !2690, metadata !DIExpression()), !dbg !2665
  store i64 %1, i64* %141, align 8
  call void @llvm.dbg.declare(metadata i64* %141, metadata !2693, metadata !DIExpression()), !dbg !2667
  %142 = load i64, i64* %141, align 8, !dbg !2668
  %143 = icmp ne i64 %142, 0, !dbg !2668
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %24
  %144 = load i8*, i8** %12, align 8, !dbg !2671
  %145 = icmp ne i8* %144, null, !dbg !2671
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %43
  %146 = load i8*, i8** %12, align 8, !dbg !2673
  call void @free(i8* %146) #10, !dbg !2675
  store i8* null, i8** %11, align 8, !dbg !2676
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %61
  %147 = load i8*, i8** %12, align 8, !dbg !2677
  %148 = load i64, i64* %13, align 8, !dbg !2678
  %149 = call i8* @realloc(i8* %147, i64 %148) #10, !dbg !2679
  store i8* %149, i8** %12, align 8, !dbg !2680
  %150 = load i8*, i8** %12, align 8, !dbg !2681
  %151 = icmp ne i8* %150, null, !dbg !2681
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %83
  %152 = load i64, i64* %13, align 8, !dbg !2684
  %153 = icmp ne i64 %152, 0, !dbg !2684
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %102
  call void @xalloc_die() #15, !dbg !2686
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %121
  %154 = load i8*, i8** %11, align 8, !dbg !2689
  br label %originalBB22
}

; Function Attrs: nounwind
declare dso_local i8* @realloc(i8*, i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal noalias i8* @xcharalloc(i64) #4 !dbg !2694 {
  %2 = alloca i64, align 8
  store i64 %0, i64* %2, align 8
  call void @llvm.dbg.declare(metadata i64* %2, metadata !2698, metadata !DIExpression()), !dbg !2699
  %3 = load i64, i64* %2, align 8, !dbg !2700
  %4 = call noalias i8* @xmalloc(i64 %3), !dbg !2700
  ret i8* %4, !dbg !2701
}

; Function Attrs: noinline noreturn nounwind optnone uwtable
define internal void @xalloc_die() #0 !dbg !2702 {
  %1 = load i32, i32* @x.45
  %2 = load i32, i32* @y.46
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = load volatile i32, i32* @exit_failure, align 4, !dbg !2704
  %10 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.101, i64 0, i64 0)) #10, !dbg !2705
  call void (i32, i32, i8*, ...) @error(i32 %9, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.102, i64 0, i64 0), i8* %10), !dbg !2706
  call void @abort() #12, !dbg !2707
  %11 = load i32, i32* @x.45
  %12 = load i32, i32* @y.46
  %13 = sub i32 %11, 1
  %14 = mul i32 %11, %13
  %15 = urem i32 %14, 2
  %16 = icmp eq i32 %15, 0
  %17 = icmp slt i32 %12, 10
  %18 = or i1 %16, %17
  br i1 %18, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  unreachable, !dbg !2707

originalBBalteredBB:                              ; preds = %originalBB, %0
  %19 = load volatile i32, i32* @exit_failure, align 4, !dbg !2704
  %20 = call i8* @gettext(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1.101, i64 0, i64 0)) #10, !dbg !2705
  call void (i32, i32, i8*, ...) @error(i32 %19, i32 0, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.102, i64 0, i64 0), i8* %20), !dbg !2706
  call void @abort() #12, !dbg !2707
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i64 @rpl_mbrtowc(i32*, i8*, i64, %struct.__mbstate_t*) #4 !dbg !2708 {
  %5 = load i32, i32* @x.47
  %6 = load i32, i32* @y.48
  %7 = sub i32 %5, 1
  %8 = mul i32 %5, %7
  %9 = urem i32 %8, 2
  %10 = icmp eq i32 %9, 0
  %11 = icmp slt i32 %6, 10
  %12 = or i1 %10, %11
  br i1 %12, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %4, %originalBBalteredBB
  %13 = alloca i64, align 8
  %14 = alloca i32*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i64, align 8
  %17 = alloca %struct.__mbstate_t*, align 8
  %18 = alloca i64, align 8
  %19 = alloca i32, align 4
  %20 = alloca i8, align 1
  store i32* %0, i32** %14, align 8
  call void @llvm.dbg.declare(metadata i32** %14, metadata !2724, metadata !DIExpression()), !dbg !2725
  store i8* %1, i8** %15, align 8
  call void @llvm.dbg.declare(metadata i8** %15, metadata !2726, metadata !DIExpression()), !dbg !2727
  store i64 %2, i64* %16, align 8
  call void @llvm.dbg.declare(metadata i64* %16, metadata !2728, metadata !DIExpression()), !dbg !2729
  store %struct.__mbstate_t* %3, %struct.__mbstate_t** %17, align 8
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t** %17, metadata !2730, metadata !DIExpression()), !dbg !2731
  call void @llvm.dbg.declare(metadata i64* %18, metadata !2732, metadata !DIExpression()), !dbg !2733
  call void @llvm.dbg.declare(metadata i32* %19, metadata !2734, metadata !DIExpression()), !dbg !2735
  %21 = load i32*, i32** %14, align 8, !dbg !2736
  %22 = icmp ne i32* %21, null, !dbg !2736
  %23 = load i32, i32* @x.47
  %24 = load i32, i32* @y.48
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %48, label %31, !dbg !2738

31:                                               ; preds = %originalBBpart2
  %32 = load i32, i32* @x.47
  %33 = load i32, i32* @y.48
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  store i32* %19, i32** %14, align 8, !dbg !2739
  %40 = load i32, i32* @x.47
  %41 = load i32, i32* @y.48
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %48, !dbg !2740

48:                                               ; preds = %originalBBpart24, %originalBBpart2
  %49 = load i32*, i32** %14, align 8, !dbg !2741
  %50 = load i8*, i8** %15, align 8, !dbg !2742
  %51 = load i64, i64* %16, align 8, !dbg !2743
  %52 = load %struct.__mbstate_t*, %struct.__mbstate_t** %17, align 8, !dbg !2744
  %53 = call i64 @mbrtowc(i32* %49, i8* %50, i64 %51, %struct.__mbstate_t* %52) #10, !dbg !2745
  store i64 %53, i64* %18, align 8, !dbg !2746
  %54 = load i64, i64* %18, align 8, !dbg !2747
  %55 = icmp ule i64 -2, %54, !dbg !2749
  br i1 %55, label %56, label %115, !dbg !2750

56:                                               ; preds = %48
  %57 = load i32, i32* @x.47
  %58 = load i32, i32* @y.48
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %56, %originalBB6alteredBB
  %65 = load i64, i64* %16, align 8, !dbg !2751
  %66 = icmp ne i64 %65, 0, !dbg !2752
  %67 = load i32, i32* @x.47
  %68 = load i32, i32* @y.48
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %66, label %75, label %115, !dbg !2753

75:                                               ; preds = %originalBBpart28
  %76 = load i32, i32* @x.47
  %77 = load i32, i32* @y.48
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %75, %originalBB10alteredBB
  %84 = call zeroext i1 @hard_locale(i32 0), !dbg !2754
  %85 = load i32, i32* @x.47
  %86 = load i32, i32* @y.48
  %87 = sub i32 %85, 1
  %88 = mul i32 %85, %87
  %89 = urem i32 %88, 2
  %90 = icmp eq i32 %89, 0
  %91 = icmp slt i32 %86, 10
  %92 = or i1 %90, %91
  br i1 %92, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %84, label %115, label %93, !dbg !2755

93:                                               ; preds = %originalBBpart212
  call void @llvm.dbg.declare(metadata i8* %20, metadata !2756, metadata !DIExpression()), !dbg !2758
  %94 = load i32, i32* @x.47
  %95 = load i32, i32* @y.48
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %93, %originalBB14alteredBB
  %102 = load i8*, i8** %15, align 8, !dbg !2759
  %103 = load i8, i8* %102, align 1, !dbg !2760
  store i8 %103, i8* %20, align 1, !dbg !2758
  %104 = load i8, i8* %20, align 1, !dbg !2761
  %105 = zext i8 %104 to i32, !dbg !2761
  %106 = load i32*, i32** %14, align 8, !dbg !2762
  store i32 %105, i32* %106, align 4, !dbg !2763
  store i64 1, i64* %13, align 8, !dbg !2764
  %107 = load i32, i32* @x.47
  %108 = load i32, i32* @y.48
  %109 = sub i32 %107, 1
  %110 = mul i32 %107, %109
  %111 = urem i32 %110, 2
  %112 = icmp eq i32 %111, 0
  %113 = icmp slt i32 %108, 10
  %114 = or i1 %112, %113
  br i1 %114, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %133, !dbg !2764

115:                                              ; preds = %originalBBpart212, %originalBBpart28, %48
  %116 = load i32, i32* @x.47
  %117 = load i32, i32* @y.48
  %118 = sub i32 %116, 1
  %119 = mul i32 %116, %118
  %120 = urem i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %117, 10
  %123 = or i1 %121, %122
  br i1 %123, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %115, %originalBB18alteredBB
  %124 = load i64, i64* %18, align 8, !dbg !2765
  store i64 %124, i64* %13, align 8, !dbg !2766
  %125 = load i32, i32* @x.47
  %126 = load i32, i32* @y.48
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %133, !dbg !2766

133:                                              ; preds = %originalBBpart220, %originalBBpart216
  %134 = load i64, i64* %13, align 8, !dbg !2767
  ret i64 %134, !dbg !2767

originalBBalteredBB:                              ; preds = %originalBB, %4
  %135 = alloca i64, align 8
  %136 = alloca i32*, align 8
  %137 = alloca i8*, align 8
  %138 = alloca i64, align 8
  %139 = alloca %struct.__mbstate_t*, align 8
  %140 = alloca i64, align 8
  %141 = alloca i32, align 4
  %142 = alloca i8, align 1
  store i32* %0, i32** %136, align 8
  call void @llvm.dbg.declare(metadata i32** %136, metadata !2768, metadata !DIExpression()), !dbg !2725
  store i8* %1, i8** %137, align 8
  call void @llvm.dbg.declare(metadata i8** %137, metadata !2784, metadata !DIExpression()), !dbg !2727
  store i64 %2, i64* %138, align 8
  call void @llvm.dbg.declare(metadata i64* %138, metadata !2785, metadata !DIExpression()), !dbg !2729
  store %struct.__mbstate_t* %3, %struct.__mbstate_t** %139, align 8
  call void @llvm.dbg.declare(metadata %struct.__mbstate_t** %139, metadata !2786, metadata !DIExpression()), !dbg !2731
  call void @llvm.dbg.declare(metadata i64* %140, metadata !2787, metadata !DIExpression()), !dbg !2733
  call void @llvm.dbg.declare(metadata i32* %141, metadata !2788, metadata !DIExpression()), !dbg !2735
  %143 = load i32*, i32** %136, align 8, !dbg !2736
  %144 = icmp ne i32* %143, null, !dbg !2736
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  store i32* %19, i32** %14, align 8, !dbg !2739
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %56
  %145 = load i64, i64* %16, align 8, !dbg !2751
  %146 = icmp ne i64 %145, 0, !dbg !2752
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %75
  %147 = call zeroext i1 @hard_locale(i32 0), !dbg !2754
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %93
  %148 = load i8*, i8** %15, align 8, !dbg !2759
  %149 = load i8, i8* %148, align 1, !dbg !2760
  store i8 %149, i8* %20, align 1, !dbg !2758
  %150 = load i8, i8* %20, align 1, !dbg !2761
  %151 = zext i8 %150 to i32, !dbg !2761
  %152 = load i32*, i32** %14, align 8, !dbg !2762
  store i32 %151, i32* %152, align 4, !dbg !2763
  store i64 1, i64* %13, align 8, !dbg !2764
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %115
  %153 = load i64, i64* %18, align 8, !dbg !2765
  store i64 %153, i64* %13, align 8, !dbg !2766
  br label %originalBB18
}

; Function Attrs: nounwind
declare dso_local i64 @mbrtowc(i32*, i8*, i64, %struct.__mbstate_t*) #2

; Function Attrs: noinline nounwind optnone readonly uwtable
define internal i32 @c_strcasecmp(i8*, i8*) #11 !dbg !2789 {
  %3 = load i32, i32* @x.49
  %4 = load i32, i32* @y.50
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i8*, align 8
  %16 = alloca i8, align 1
  %17 = alloca i8, align 1
  store i8* %0, i8** %12, align 8
  call void @llvm.dbg.declare(metadata i8** %12, metadata !2793, metadata !DIExpression()), !dbg !2794
  store i8* %1, i8** %13, align 8
  call void @llvm.dbg.declare(metadata i8** %13, metadata !2795, metadata !DIExpression()), !dbg !2796
  call void @llvm.dbg.declare(metadata i8** %14, metadata !2797, metadata !DIExpression()), !dbg !2798
  %18 = load i8*, i8** %12, align 8, !dbg !2799
  store i8* %18, i8** %14, align 8, !dbg !2798
  call void @llvm.dbg.declare(metadata i8** %15, metadata !2800, metadata !DIExpression()), !dbg !2801
  %19 = load i8*, i8** %13, align 8, !dbg !2802
  store i8* %19, i8** %15, align 8, !dbg !2801
  call void @llvm.dbg.declare(metadata i8* %16, metadata !2803, metadata !DIExpression()), !dbg !2804
  call void @llvm.dbg.declare(metadata i8* %17, metadata !2805, metadata !DIExpression()), !dbg !2806
  %20 = load i8*, i8** %14, align 8, !dbg !2807
  %21 = load i8*, i8** %15, align 8, !dbg !2809
  %22 = icmp eq i8* %20, %21, !dbg !2810
  %23 = load i32, i32* @x.49
  %24 = load i32, i32* @y.50
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %22, label %31, label %48, !dbg !2811

31:                                               ; preds = %originalBBpart2
  %32 = load i32, i32* @x.49
  %33 = load i32, i32* @y.50
  %34 = sub i32 %32, 1
  %35 = mul i32 %32, %34
  %36 = urem i32 %35, 2
  %37 = icmp eq i32 %36, 0
  %38 = icmp slt i32 %33, 10
  %39 = or i1 %37, %38
  br i1 %39, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %31, %originalBB1alteredBB
  store i32 0, i32* %11, align 4, !dbg !2812
  %40 = load i32, i32* @x.49
  %41 = load i32, i32* @y.50
  %42 = sub i32 %40, 1
  %43 = mul i32 %40, %42
  %44 = urem i32 %43, 2
  %45 = icmp eq i32 %44, 0
  %46 = icmp slt i32 %41, 10
  %47 = or i1 %45, %46
  br i1 %47, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %161, !dbg !2812

48:                                               ; preds = %originalBBpart2
  %49 = load i32, i32* @x.49
  %50 = load i32, i32* @y.50
  %51 = sub i32 %49, 1
  %52 = mul i32 %49, %51
  %53 = urem i32 %52, 2
  %54 = icmp eq i32 %53, 0
  %55 = icmp slt i32 %50, 10
  %56 = or i1 %54, %55
  br i1 %56, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %48, %originalBB6alteredBB
  %57 = load i32, i32* @x.49
  %58 = load i32, i32* @y.50
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %65, !dbg !2813

65:                                               ; preds = %133, %originalBBpart28
  %66 = load i32, i32* @x.49
  %67 = load i32, i32* @y.50
  %68 = sub i32 %66, 1
  %69 = mul i32 %66, %68
  %70 = urem i32 %69, 2
  %71 = icmp eq i32 %70, 0
  %72 = icmp slt i32 %67, 10
  %73 = or i1 %71, %72
  br i1 %73, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %65, %originalBB10alteredBB
  %74 = load i8*, i8** %14, align 8, !dbg !2814
  %75 = load i8, i8* %74, align 1, !dbg !2816
  %76 = zext i8 %75 to i32, !dbg !2816
  %77 = call i32 @c_tolower(i32 %76), !dbg !2817
  %78 = trunc i32 %77 to i8, !dbg !2817
  store i8 %78, i8* %16, align 1, !dbg !2818
  %79 = load i8*, i8** %15, align 8, !dbg !2819
  %80 = load i8, i8* %79, align 1, !dbg !2820
  %81 = zext i8 %80 to i32, !dbg !2820
  %82 = call i32 @c_tolower(i32 %81), !dbg !2821
  %83 = trunc i32 %82 to i8, !dbg !2821
  store i8 %83, i8* %17, align 1, !dbg !2822
  %84 = load i8, i8* %16, align 1, !dbg !2823
  %85 = zext i8 %84 to i32, !dbg !2823
  %86 = icmp eq i32 %85, 0, !dbg !2825
  %87 = load i32, i32* @x.49
  %88 = load i32, i32* @y.50
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %86, label %95, label %112, !dbg !2826

95:                                               ; preds = %originalBBpart212
  %96 = load i32, i32* @x.49
  %97 = load i32, i32* @y.50
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %95, %originalBB14alteredBB
  %104 = load i32, i32* @x.49
  %105 = load i32, i32* @y.50
  %106 = sub i32 %104, 1
  %107 = mul i32 %104, %106
  %108 = urem i32 %107, 2
  %109 = icmp eq i32 %108, 0
  %110 = icmp slt i32 %105, 10
  %111 = or i1 %109, %110
  br i1 %111, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %139, !dbg !2827

112:                                              ; preds = %originalBBpart212
  %113 = load i32, i32* @x.49
  %114 = load i32, i32* @y.50
  %115 = sub i32 %113, 1
  %116 = mul i32 %113, %115
  %117 = urem i32 %116, 2
  %118 = icmp eq i32 %117, 0
  %119 = icmp slt i32 %114, 10
  %120 = or i1 %118, %119
  br i1 %120, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %112, %originalBB18alteredBB
  %121 = load i8*, i8** %14, align 8, !dbg !2828
  %122 = getelementptr inbounds i8, i8* %121, i32 1, !dbg !2828
  store i8* %122, i8** %14, align 8, !dbg !2828
  %123 = load i8*, i8** %15, align 8, !dbg !2829
  %124 = getelementptr inbounds i8, i8* %123, i32 1, !dbg !2829
  store i8* %124, i8** %15, align 8, !dbg !2829
  %125 = load i32, i32* @x.49
  %126 = load i32, i32* @y.50
  %127 = sub i32 %125, 1
  %128 = mul i32 %125, %127
  %129 = urem i32 %128, 2
  %130 = icmp eq i32 %129, 0
  %131 = icmp slt i32 %126, 10
  %132 = or i1 %130, %131
  br i1 %132, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %133, !dbg !2830

133:                                              ; preds = %originalBBpart220
  %134 = load i8, i8* %16, align 1, !dbg !2831
  %135 = zext i8 %134 to i32, !dbg !2831
  %136 = load i8, i8* %17, align 1, !dbg !2832
  %137 = zext i8 %136 to i32, !dbg !2832
  %138 = icmp eq i32 %135, %137, !dbg !2833
  br i1 %138, label %65, label %139, !dbg !2830, !llvm.loop !2834

139:                                              ; preds = %133, %originalBBpart216
  %140 = load i32, i32* @x.49
  %141 = load i32, i32* @y.50
  %142 = sub i32 %140, 1
  %143 = mul i32 %140, %142
  %144 = urem i32 %143, 2
  %145 = icmp eq i32 %144, 0
  %146 = icmp slt i32 %141, 10
  %147 = or i1 %145, %146
  br i1 %147, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %139, %originalBB22alteredBB
  %148 = load i8, i8* %16, align 1, !dbg !2836
  %149 = zext i8 %148 to i32, !dbg !2836
  %150 = load i8, i8* %17, align 1, !dbg !2838
  %151 = zext i8 %150 to i32, !dbg !2838
  %152 = sub nsw i32 %149, %151, !dbg !2839
  store i32 %152, i32* %11, align 4, !dbg !2840
  %153 = load i32, i32* @x.49
  %154 = load i32, i32* @y.50
  %155 = sub i32 %153, 1
  %156 = mul i32 %153, %155
  %157 = urem i32 %156, 2
  %158 = icmp eq i32 %157, 0
  %159 = icmp slt i32 %154, 10
  %160 = or i1 %158, %159
  br i1 %160, label %originalBBpart225, label %originalBB22alteredBB

originalBBpart225:                                ; preds = %originalBB22
  br label %161, !dbg !2840

161:                                              ; preds = %originalBBpart225, %originalBBpart24
  %162 = load i32, i32* @x.49
  %163 = load i32, i32* @y.50
  %164 = sub i32 %162, 1
  %165 = mul i32 %162, %164
  %166 = urem i32 %165, 2
  %167 = icmp eq i32 %166, 0
  %168 = icmp slt i32 %163, 10
  %169 = or i1 %167, %168
  br i1 %169, label %originalBB27, label %originalBB27alteredBB

originalBB27:                                     ; preds = %161, %originalBB27alteredBB
  %170 = load i32, i32* %11, align 4, !dbg !2841
  %171 = load i32, i32* @x.49
  %172 = load i32, i32* @y.50
  %173 = sub i32 %171, 1
  %174 = mul i32 %171, %173
  %175 = urem i32 %174, 2
  %176 = icmp eq i32 %175, 0
  %177 = icmp slt i32 %172, 10
  %178 = or i1 %176, %177
  br i1 %178, label %originalBBpart229, label %originalBB27alteredBB

originalBBpart229:                                ; preds = %originalBB27
  ret i32 %170, !dbg !2841

originalBBalteredBB:                              ; preds = %originalBB, %2
  %179 = alloca i32, align 4
  %180 = alloca i8*, align 8
  %181 = alloca i8*, align 8
  %182 = alloca i8*, align 8
  %183 = alloca i8*, align 8
  %184 = alloca i8, align 1
  %185 = alloca i8, align 1
  store i8* %0, i8** %180, align 8
  call void @llvm.dbg.declare(metadata i8** %180, metadata !2842, metadata !DIExpression()), !dbg !2794
  store i8* %1, i8** %181, align 8
  call void @llvm.dbg.declare(metadata i8** %181, metadata !2845, metadata !DIExpression()), !dbg !2796
  call void @llvm.dbg.declare(metadata i8** %182, metadata !2846, metadata !DIExpression()), !dbg !2798
  %186 = load i8*, i8** %180, align 8, !dbg !2799
  store i8* %186, i8** %182, align 8, !dbg !2798
  call void @llvm.dbg.declare(metadata i8** %183, metadata !2847, metadata !DIExpression()), !dbg !2801
  %187 = load i8*, i8** %181, align 8, !dbg !2802
  store i8* %187, i8** %183, align 8, !dbg !2801
  call void @llvm.dbg.declare(metadata i8* %184, metadata !2848, metadata !DIExpression()), !dbg !2804
  call void @llvm.dbg.declare(metadata i8* %185, metadata !2849, metadata !DIExpression()), !dbg !2806
  %188 = load i8*, i8** %182, align 8, !dbg !2807
  %189 = load i8*, i8** %183, align 8, !dbg !2809
  %190 = icmp eq i8* %188, %189, !dbg !2810
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %31
  store i32 0, i32* %11, align 4, !dbg !2812
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %48
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %65
  %191 = load i8*, i8** %14, align 8, !dbg !2814
  %192 = load i8, i8* %191, align 1, !dbg !2816
  %193 = zext i8 %192 to i32, !dbg !2816
  %194 = call i32 @c_tolower(i32 %193), !dbg !2817
  %195 = trunc i32 %194 to i8, !dbg !2817
  store i8 %195, i8* %16, align 1, !dbg !2818
  %196 = load i8*, i8** %15, align 8, !dbg !2819
  %197 = load i8, i8* %196, align 1, !dbg !2820
  %198 = zext i8 %197 to i32, !dbg !2820
  %199 = call i32 @c_tolower(i32 %198), !dbg !2821
  %200 = trunc i32 %199 to i8, !dbg !2821
  store i8 %200, i8* %17, align 1, !dbg !2822
  %201 = load i8, i8* %16, align 1, !dbg !2823
  %202 = zext i8 %201 to i32, !dbg !2823
  %203 = icmp eq i32 %202, 0, !dbg !2825
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %95
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %112
  %204 = load i8*, i8** %14, align 8, !dbg !2828
  %205 = getelementptr inbounds i8, i8* %204, i32 1, !dbg !2828
  store i8* %205, i8** %14, align 8, !dbg !2828
  %206 = load i8*, i8** %15, align 8, !dbg !2829
  %207 = getelementptr inbounds i8, i8* %206, i32 1, !dbg !2829
  store i8* %207, i8** %15, align 8, !dbg !2829
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %139
  %208 = load i8, i8* %16, align 1, !dbg !2836
  %209 = zext i8 %208 to i32, !dbg !2836
  %210 = load i8, i8* %17, align 1, !dbg !2838
  %211 = zext i8 %210 to i32, !dbg !2838
  %_ = shl i32 %209, %211
  %_23 = sub i32 %209, %211
  %gen = mul i32 %_23, %211
  %212 = sub nsw i32 %209, %211, !dbg !2839
  store i32 %212, i32* %11, align 4, !dbg !2840
  br label %originalBB22

originalBB27alteredBB:                            ; preds = %originalBB27, %161
  %213 = load i32, i32* %11, align 4, !dbg !2841
  br label %originalBB27
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @close_stream(%struct._IO_FILE*) #4 !dbg !2850 {
  %2 = load i32, i32* @x.51
  %3 = load i32, i32* @y.52
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca %struct._IO_FILE*, align 8
  %12 = alloca i8, align 1
  %13 = alloca i8, align 1
  %14 = alloca i8, align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %11, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %11, metadata !2888, metadata !DIExpression()), !dbg !2889
  call void @llvm.dbg.declare(metadata i8* %12, metadata !2890, metadata !DIExpression()), !dbg !2892
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !2893
  %16 = call i64 @__fpending(%struct._IO_FILE* %15) #10, !dbg !2894
  %17 = icmp ne i64 %16, 0, !dbg !2895
  %18 = zext i1 %17 to i8, !dbg !2892
  store i8 %18, i8* %12, align 1, !dbg !2892
  call void @llvm.dbg.declare(metadata i8* %13, metadata !2896, metadata !DIExpression()), !dbg !2897
  %19 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !2898
  %20 = call i32 @ferror_unlocked(%struct._IO_FILE* %19) #10, !dbg !2898
  %21 = icmp ne i32 %20, 0, !dbg !2899
  %22 = zext i1 %21 to i8, !dbg !2897
  store i8 %22, i8* %13, align 1, !dbg !2897
  call void @llvm.dbg.declare(metadata i8* %14, metadata !2900, metadata !DIExpression()), !dbg !2901
  %23 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !2902
  %24 = call i32 @rpl_fclose(%struct._IO_FILE* %23), !dbg !2903
  %25 = icmp ne i32 %24, 0, !dbg !2904
  %26 = zext i1 %25 to i8, !dbg !2901
  store i8 %26, i8* %14, align 1, !dbg !2901
  %27 = load i8, i8* %13, align 1, !dbg !2905
  %28 = trunc i8 %27 to i1, !dbg !2905
  %29 = load i32, i32* @x.51
  %30 = load i32, i32* @y.52
  %31 = sub i32 %29, 1
  %32 = mul i32 %29, %31
  %33 = urem i32 %32, 2
  %34 = icmp eq i32 %33, 0
  %35 = icmp slt i32 %30, 10
  %36 = or i1 %34, %35
  br i1 %36, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %28, label %95, label %37, !dbg !2907

37:                                               ; preds = %originalBBpart2
  %38 = load i32, i32* @x.51
  %39 = load i32, i32* @y.52
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %37, %originalBB1alteredBB
  %46 = load i8, i8* %14, align 1, !dbg !2908
  %47 = trunc i8 %46 to i1, !dbg !2908
  %48 = load i32, i32* @x.51
  %49 = load i32, i32* @y.52
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %47, label %56, label %117, !dbg !2909

56:                                               ; preds = %originalBBpart24
  %57 = load i32, i32* @x.51
  %58 = load i32, i32* @y.52
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %56, %originalBB6alteredBB
  %65 = load i8, i8* %12, align 1, !dbg !2910
  %66 = trunc i8 %65 to i1, !dbg !2910
  %67 = load i32, i32* @x.51
  %68 = load i32, i32* @y.52
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %66, label %95, label %75, !dbg !2911

75:                                               ; preds = %originalBBpart28
  %76 = load i32, i32* @x.51
  %77 = load i32, i32* @y.52
  %78 = sub i32 %76, 1
  %79 = mul i32 %76, %78
  %80 = urem i32 %79, 2
  %81 = icmp eq i32 %80, 0
  %82 = icmp slt i32 %77, 10
  %83 = or i1 %81, %82
  br i1 %83, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %75, %originalBB10alteredBB
  %84 = call i32* @__errno_location() #14, !dbg !2912
  %85 = load i32, i32* %84, align 4, !dbg !2912
  %86 = icmp ne i32 %85, 9, !dbg !2913
  %87 = load i32, i32* @x.51
  %88 = load i32, i32* @y.52
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %86, label %95, label %117, !dbg !2914

95:                                               ; preds = %originalBBpart212, %originalBBpart28, %originalBBpart2
  %96 = load i32, i32* @x.51
  %97 = load i32, i32* @y.52
  %98 = sub i32 %96, 1
  %99 = mul i32 %96, %98
  %100 = urem i32 %99, 2
  %101 = icmp eq i32 %100, 0
  %102 = icmp slt i32 %97, 10
  %103 = or i1 %101, %102
  br i1 %103, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %95, %originalBB14alteredBB
  %104 = load i8, i8* %14, align 1, !dbg !2915
  %105 = trunc i8 %104 to i1, !dbg !2915
  %106 = load i32, i32* @x.51
  %107 = load i32, i32* @y.52
  %108 = sub i32 %106, 1
  %109 = mul i32 %106, %108
  %110 = urem i32 %109, 2
  %111 = icmp eq i32 %110, 0
  %112 = icmp slt i32 %107, 10
  %113 = or i1 %111, %112
  br i1 %113, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br i1 %105, label %116, label %114, !dbg !2918

114:                                              ; preds = %originalBBpart216
  %115 = call i32* @__errno_location() #14, !dbg !2919
  store i32 0, i32* %115, align 4, !dbg !2920
  br label %116, !dbg !2919

116:                                              ; preds = %114, %originalBBpart216
  store i32 -1, i32* %10, align 4, !dbg !2921
  br label %134, !dbg !2921

117:                                              ; preds = %originalBBpart212, %originalBBpart24
  %118 = load i32, i32* @x.51
  %119 = load i32, i32* @y.52
  %120 = sub i32 %118, 1
  %121 = mul i32 %118, %120
  %122 = urem i32 %121, 2
  %123 = icmp eq i32 %122, 0
  %124 = icmp slt i32 %119, 10
  %125 = or i1 %123, %124
  br i1 %125, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %117, %originalBB18alteredBB
  store i32 0, i32* %10, align 4, !dbg !2922
  %126 = load i32, i32* @x.51
  %127 = load i32, i32* @y.52
  %128 = sub i32 %126, 1
  %129 = mul i32 %126, %128
  %130 = urem i32 %129, 2
  %131 = icmp eq i32 %130, 0
  %132 = icmp slt i32 %127, 10
  %133 = or i1 %131, %132
  br i1 %133, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %134, !dbg !2922

134:                                              ; preds = %originalBBpart220, %116
  %135 = load i32, i32* @x.51
  %136 = load i32, i32* @y.52
  %137 = sub i32 %135, 1
  %138 = mul i32 %135, %137
  %139 = urem i32 %138, 2
  %140 = icmp eq i32 %139, 0
  %141 = icmp slt i32 %136, 10
  %142 = or i1 %140, %141
  br i1 %142, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %134, %originalBB22alteredBB
  %143 = load i32, i32* %10, align 4, !dbg !2923
  %144 = load i32, i32* @x.51
  %145 = load i32, i32* @y.52
  %146 = sub i32 %144, 1
  %147 = mul i32 %144, %146
  %148 = urem i32 %147, 2
  %149 = icmp eq i32 %148, 0
  %150 = icmp slt i32 %145, 10
  %151 = or i1 %149, %150
  br i1 %151, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  ret i32 %143, !dbg !2923

originalBBalteredBB:                              ; preds = %originalBB, %1
  %152 = alloca i32, align 4
  %153 = alloca %struct._IO_FILE*, align 8
  %154 = alloca i8, align 1
  %155 = alloca i8, align 1
  %156 = alloca i8, align 1
  store %struct._IO_FILE* %0, %struct._IO_FILE** %153, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %153, metadata !2924, metadata !DIExpression()), !dbg !2889
  call void @llvm.dbg.declare(metadata i8* %154, metadata !2963, metadata !DIExpression()), !dbg !2892
  %157 = load %struct._IO_FILE*, %struct._IO_FILE** %153, align 8, !dbg !2893
  %158 = call i64 @__fpending(%struct._IO_FILE* %157) #10, !dbg !2894
  %159 = icmp ne i64 %158, 0, !dbg !2895
  %160 = zext i1 %159 to i8, !dbg !2892
  store i8 %160, i8* %154, align 1, !dbg !2892
  call void @llvm.dbg.declare(metadata i8* %155, metadata !2964, metadata !DIExpression()), !dbg !2897
  %161 = load %struct._IO_FILE*, %struct._IO_FILE** %153, align 8, !dbg !2898
  %162 = call i32 @ferror_unlocked(%struct._IO_FILE* %161) #10, !dbg !2898
  %163 = icmp ne i32 %162, 0, !dbg !2899
  %164 = zext i1 %163 to i8, !dbg !2897
  store i8 %164, i8* %155, align 1, !dbg !2897
  call void @llvm.dbg.declare(metadata i8* %156, metadata !2965, metadata !DIExpression()), !dbg !2901
  %165 = load %struct._IO_FILE*, %struct._IO_FILE** %153, align 8, !dbg !2902
  %166 = call i32 @rpl_fclose(%struct._IO_FILE* %165), !dbg !2903
  %167 = icmp ne i32 %166, 0, !dbg !2904
  %168 = zext i1 %167 to i8, !dbg !2901
  store i8 %168, i8* %156, align 1, !dbg !2901
  %169 = load i8, i8* %155, align 1, !dbg !2905
  %170 = trunc i8 %169 to i1, !dbg !2905
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %37
  %171 = load i8, i8* %14, align 1, !dbg !2908
  %172 = trunc i8 %171 to i1, !dbg !2908
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %56
  %173 = load i8, i8* %12, align 1, !dbg !2910
  %174 = trunc i8 %173 to i1, !dbg !2910
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %75
  %175 = call i32* @__errno_location() #14, !dbg !2912
  %176 = load i32, i32* %175, align 4, !dbg !2912
  %177 = icmp ne i32 %176, 9, !dbg !2913
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %95
  %178 = load i8, i8* %14, align 1, !dbg !2915
  %179 = trunc i8 %178 to i1, !dbg !2915
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %117
  store i32 0, i32* %10, align 4, !dbg !2922
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %134
  %180 = load i32, i32* %10, align 4, !dbg !2923
  br label %originalBB22
}

; Function Attrs: nounwind
declare dso_local i64 @__fpending(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare dso_local i32 @ferror_unlocked(%struct._IO_FILE*) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal zeroext i1 @hard_locale(i32) #4 !dbg !2966 {
  %2 = load i32, i32* @x.53
  %3 = load i32, i32* @y.54
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i1, align 1
  %11 = alloca i32, align 4
  %12 = alloca [257 x i8], align 16
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !2970, metadata !DIExpression()), !dbg !2971
  call void @llvm.dbg.declare(metadata [257 x i8]* %12, metadata !2972, metadata !DIExpression()), !dbg !2976
  %13 = load i32, i32* %11, align 4, !dbg !2977
  %14 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !2979
  %15 = call i32 @setlocale_null_r(i32 %13, i8* %14, i64 257), !dbg !2980
  %16 = icmp ne i32 %15, 0, !dbg !2980
  %17 = load i32, i32* @x.53
  %18 = load i32, i32* @y.54
  %19 = sub i32 %17, 1
  %20 = mul i32 %17, %19
  %21 = urem i32 %20, 2
  %22 = icmp eq i32 %21, 0
  %23 = icmp slt i32 %18, 10
  %24 = or i1 %22, %23
  br i1 %24, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %16, label %25, label %42, !dbg !2981

25:                                               ; preds = %originalBBpart2
  %26 = load i32, i32* @x.53
  %27 = load i32, i32* @y.54
  %28 = sub i32 %26, 1
  %29 = mul i32 %26, %28
  %30 = urem i32 %29, 2
  %31 = icmp eq i32 %30, 0
  %32 = icmp slt i32 %27, 10
  %33 = or i1 %31, %32
  br i1 %33, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %25, %originalBB1alteredBB
  store i1 false, i1* %10, align 1, !dbg !2982
  %34 = load i32, i32* @x.53
  %35 = load i32, i32* @y.54
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %101, !dbg !2982

42:                                               ; preds = %originalBBpart2
  %43 = load i32, i32* @x.53
  %44 = load i32, i32* @y.54
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %42, %originalBB6alteredBB
  %51 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !2983
  %52 = call i32 @strcmp(i8* %51, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.111, i64 0, i64 0)) #13, !dbg !2984
  %53 = icmp eq i32 %52, 0, !dbg !2985
  %54 = load i32, i32* @x.53
  %55 = load i32, i32* @y.54
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %53, label %82, label %62, !dbg !2986

62:                                               ; preds = %originalBBpart28
  %63 = load i32, i32* @x.53
  %64 = load i32, i32* @y.54
  %65 = sub i32 %63, 1
  %66 = mul i32 %63, %65
  %67 = urem i32 %66, 2
  %68 = icmp eq i32 %67, 0
  %69 = icmp slt i32 %64, 10
  %70 = or i1 %68, %69
  br i1 %70, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %62, %originalBB10alteredBB
  %71 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !2987
  %72 = call i32 @strcmp(i8* %71, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.112, i64 0, i64 0)) #13, !dbg !2988
  %73 = icmp eq i32 %72, 0, !dbg !2989
  %74 = load i32, i32* @x.53
  %75 = load i32, i32* @y.54
  %76 = sub i32 %74, 1
  %77 = mul i32 %74, %76
  %78 = urem i32 %77, 2
  %79 = icmp eq i32 %78, 0
  %80 = icmp slt i32 %75, 10
  %81 = or i1 %79, %80
  br i1 %81, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %82, !dbg !2986

82:                                               ; preds = %originalBBpart212, %originalBBpart28
  %83 = phi i1 [ true, %originalBBpart28 ], [ %73, %originalBBpart212 ]
  %84 = load i32, i32* @x.53
  %85 = load i32, i32* @y.54
  %86 = sub i32 %84, 1
  %87 = mul i32 %84, %86
  %88 = urem i32 %87, 2
  %89 = icmp eq i32 %88, 0
  %90 = icmp slt i32 %85, 10
  %91 = or i1 %89, %90
  br i1 %91, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %82, %originalBB14alteredBB
  %92 = xor i1 %83, true, !dbg !2990
  store i1 %92, i1* %10, align 1, !dbg !2991
  %93 = load i32, i32* @x.53
  %94 = load i32, i32* @y.54
  %95 = sub i32 %93, 1
  %96 = mul i32 %93, %95
  %97 = urem i32 %96, 2
  %98 = icmp eq i32 %97, 0
  %99 = icmp slt i32 %94, 10
  %100 = or i1 %98, %99
  br i1 %100, label %originalBBpart219, label %originalBB14alteredBB

originalBBpart219:                                ; preds = %originalBB14
  br label %101, !dbg !2991

101:                                              ; preds = %originalBBpart219, %originalBBpart24
  %102 = load i32, i32* @x.53
  %103 = load i32, i32* @y.54
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBB21, label %originalBB21alteredBB

originalBB21:                                     ; preds = %101, %originalBB21alteredBB
  %110 = load i1, i1* %10, align 1, !dbg !2992
  %111 = load i32, i32* @x.53
  %112 = load i32, i32* @y.54
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBBpart223, label %originalBB21alteredBB

originalBBpart223:                                ; preds = %originalBB21
  ret i1 %110, !dbg !2992

originalBBalteredBB:                              ; preds = %originalBB, %1
  %119 = alloca i1, align 1
  %120 = alloca i32, align 4
  %121 = alloca [257 x i8], align 16
  store i32 %0, i32* %120, align 4
  call void @llvm.dbg.declare(metadata i32* %120, metadata !2993, metadata !DIExpression()), !dbg !2971
  call void @llvm.dbg.declare(metadata [257 x i8]* %121, metadata !2996, metadata !DIExpression()), !dbg !2976
  %122 = load i32, i32* %120, align 4, !dbg !2977
  %123 = getelementptr inbounds [257 x i8], [257 x i8]* %121, i64 0, i64 0, !dbg !2979
  %124 = call i32 @setlocale_null_r(i32 %122, i8* %123, i64 257), !dbg !2980
  %125 = icmp ne i32 %124, 0, !dbg !2980
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %25
  store i1 false, i1* %10, align 1, !dbg !2982
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %42
  %126 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !2983
  %127 = call i32 @strcmp(i8* %126, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.111, i64 0, i64 0)) #13, !dbg !2984
  %128 = icmp eq i32 %127, 0, !dbg !2985
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %62
  %129 = getelementptr inbounds [257 x i8], [257 x i8]* %12, i64 0, i64 0, !dbg !2987
  %130 = call i32 @strcmp(i8* %129, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.112, i64 0, i64 0)) #13, !dbg !2988
  %131 = icmp eq i32 %130, 0, !dbg !2989
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %82
  %_ = sub i1 false, %83
  %gen = add i1 %_, true
  %_15 = sub i1 false, %83
  %gen16 = add i1 %_15, true
  %_17 = shl i1 %83, true
  %132 = xor i1 %83, true, !dbg !2990
  store i1 %132, i1* %10, align 1, !dbg !2991
  br label %originalBB14

originalBB21alteredBB:                            ; preds = %originalBB21, %101
  %133 = load i1, i1* %10, align 1, !dbg !2992
  br label %originalBB21
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @locale_charset() #4 !dbg !2997 {
  %1 = load i32, i32* @x.55
  %2 = load i32, i32* @y.56
  %3 = sub i32 %1, 1
  %4 = mul i32 %1, %3
  %5 = urem i32 %4, 2
  %6 = icmp eq i32 %5, 0
  %7 = icmp slt i32 %2, 10
  %8 = or i1 %6, %7
  br i1 %8, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %0, %originalBBalteredBB
  %9 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %9, metadata !3001, metadata !DIExpression()), !dbg !3002
  %10 = call i8* @nl_langinfo(i32 14) #10, !dbg !3003
  store i8* %10, i8** %9, align 8, !dbg !3004
  %11 = load i8*, i8** %9, align 8, !dbg !3005
  %12 = icmp eq i8* %11, null, !dbg !3007
  %13 = load i32, i32* @x.55
  %14 = load i32, i32* @y.56
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %21, label %38, !dbg !3008

21:                                               ; preds = %originalBBpart2
  %22 = load i32, i32* @x.55
  %23 = load i32, i32* @y.56
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.115, i64 0, i64 0), i8** %9, align 8, !dbg !3009
  %30 = load i32, i32* @x.55
  %31 = load i32, i32* @y.56
  %32 = sub i32 %30, 1
  %33 = mul i32 %30, %32
  %34 = urem i32 %33, 2
  %35 = icmp eq i32 %34, 0
  %36 = icmp slt i32 %31, 10
  %37 = or i1 %35, %36
  br i1 %37, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %38, !dbg !3010

38:                                               ; preds = %originalBBpart24, %originalBBpart2
  %39 = load i32, i32* @x.55
  %40 = load i32, i32* @y.56
  %41 = sub i32 %39, 1
  %42 = mul i32 %39, %41
  %43 = urem i32 %42, 2
  %44 = icmp eq i32 %43, 0
  %45 = icmp slt i32 %40, 10
  %46 = or i1 %44, %45
  br i1 %46, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %38, %originalBB6alteredBB
  %47 = load i8*, i8** %9, align 8, !dbg !3011
  %48 = getelementptr inbounds i8, i8* %47, i64 0, !dbg !3011
  %49 = load i8, i8* %48, align 1, !dbg !3011
  %50 = sext i8 %49 to i32, !dbg !3011
  %51 = icmp eq i32 %50, 0, !dbg !3015
  %52 = load i32, i32* @x.55
  %53 = load i32, i32* @y.56
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %51, label %60, label %77, !dbg !3016

60:                                               ; preds = %originalBBpart28
  %61 = load i32, i32* @x.55
  %62 = load i32, i32* @y.56
  %63 = sub i32 %61, 1
  %64 = mul i32 %61, %63
  %65 = urem i32 %64, 2
  %66 = icmp eq i32 %65, 0
  %67 = icmp slt i32 %62, 10
  %68 = or i1 %66, %67
  br i1 %68, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %60, %originalBB10alteredBB
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.116, i64 0, i64 0), i8** %9, align 8, !dbg !3017
  %69 = load i32, i32* @x.55
  %70 = load i32, i32* @y.56
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %77, !dbg !3018

77:                                               ; preds = %originalBBpart212, %originalBBpart28
  %78 = load i32, i32* @x.55
  %79 = load i32, i32* @y.56
  %80 = sub i32 %78, 1
  %81 = mul i32 %78, %80
  %82 = urem i32 %81, 2
  %83 = icmp eq i32 %82, 0
  %84 = icmp slt i32 %79, 10
  %85 = or i1 %83, %84
  br i1 %85, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %77, %originalBB14alteredBB
  %86 = load i8*, i8** %9, align 8, !dbg !3019
  %87 = load i32, i32* @x.55
  %88 = load i32, i32* @y.56
  %89 = sub i32 %87, 1
  %90 = mul i32 %87, %89
  %91 = urem i32 %90, 2
  %92 = icmp eq i32 %91, 0
  %93 = icmp slt i32 %88, 10
  %94 = or i1 %92, %93
  br i1 %94, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  ret i8* %86, !dbg !3020

originalBBalteredBB:                              ; preds = %originalBB, %0
  %95 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %95, metadata !3021, metadata !DIExpression()), !dbg !3002
  %96 = call i8* @nl_langinfo(i32 14) #10, !dbg !3003
  store i8* %96, i8** %95, align 8, !dbg !3004
  %97 = load i8*, i8** %95, align 8, !dbg !3005
  %98 = icmp eq i8* %97, null, !dbg !3007
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  store i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.115, i64 0, i64 0), i8** %9, align 8, !dbg !3009
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %38
  %99 = load i8*, i8** %9, align 8, !dbg !3011
  %100 = getelementptr inbounds i8, i8* %99, i64 0, !dbg !3011
  %101 = load i8, i8* %100, align 1, !dbg !3011
  %102 = sext i8 %101 to i32, !dbg !3011
  %103 = icmp eq i32 %102, 0, !dbg !3015
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %60
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1.116, i64 0, i64 0), i8** %9, align 8, !dbg !3017
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %77
  %104 = load i8*, i8** %9, align 8, !dbg !3019
  br label %originalBB14
}

; Function Attrs: nounwind
declare dso_local i8* @nl_langinfo(i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @setlocale_null_r(i32, i8* nonnull, i64) #4 !dbg !3024 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  store i32 %0, i32* %4, align 4
  call void @llvm.dbg.declare(metadata i32* %4, metadata !3028, metadata !DIExpression()), !dbg !3029
  store i8* %1, i8** %5, align 8
  call void @llvm.dbg.declare(metadata i8** %5, metadata !3030, metadata !DIExpression()), !dbg !3031
  store i64 %2, i64* %6, align 8
  call void @llvm.dbg.declare(metadata i64* %6, metadata !3032, metadata !DIExpression()), !dbg !3033
  %7 = load i32, i32* %4, align 4, !dbg !3034
  %8 = load i8*, i8** %5, align 8, !dbg !3035
  %9 = load i64, i64* %6, align 8, !dbg !3036
  %10 = call i32 @setlocale_null_unlocked(i32 %7, i8* %8, i64 %9), !dbg !3037
  ret i32 %10, !dbg !3038
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @setlocale_null_unlocked(i32, i8*, i64) #4 !dbg !3039 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  store i32 %0, i32* %5, align 4
  call void @llvm.dbg.declare(metadata i32* %5, metadata !3040, metadata !DIExpression()), !dbg !3041
  store i8* %1, i8** %6, align 8
  call void @llvm.dbg.declare(metadata i8** %6, metadata !3042, metadata !DIExpression()), !dbg !3043
  store i64 %2, i64* %7, align 8
  call void @llvm.dbg.declare(metadata i64* %7, metadata !3044, metadata !DIExpression()), !dbg !3045
  call void @llvm.dbg.declare(metadata i8** %8, metadata !3046, metadata !DIExpression()), !dbg !3047
  %10 = load i32, i32* %5, align 4, !dbg !3048
  %11 = call i8* @setlocale_null_androidfix(i32 %10), !dbg !3049
  store i8* %11, i8** %8, align 8, !dbg !3047
  %12 = load i8*, i8** %8, align 8, !dbg !3050
  %13 = icmp eq i8* %12, null, !dbg !3052
  br i1 %13, label %14, label %53, !dbg !3053

14:                                               ; preds = %3
  %15 = load i64, i64* %7, align 8, !dbg !3054
  %16 = icmp ugt i64 %15, 0, !dbg !3057
  br i1 %16, label %17, label %36, !dbg !3058

17:                                               ; preds = %14
  %18 = load i32, i32* @x.59
  %19 = load i32, i32* @y.60
  %20 = sub i32 %18, 1
  %21 = mul i32 %18, %20
  %22 = urem i32 %21, 2
  %23 = icmp eq i32 %22, 0
  %24 = icmp slt i32 %19, 10
  %25 = or i1 %23, %24
  br i1 %25, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %17, %originalBBalteredBB
  %26 = load i8*, i8** %6, align 8, !dbg !3059
  %27 = getelementptr inbounds i8, i8* %26, i64 0, !dbg !3059
  store i8 0, i8* %27, align 1, !dbg !3060
  %28 = load i32, i32* @x.59
  %29 = load i32, i32* @y.60
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br label %36, !dbg !3059

36:                                               ; preds = %originalBBpart2, %14
  %37 = load i32, i32* @x.59
  %38 = load i32, i32* @y.60
  %39 = sub i32 %37, 1
  %40 = mul i32 %37, %39
  %41 = urem i32 %40, 2
  %42 = icmp eq i32 %41, 0
  %43 = icmp slt i32 %38, 10
  %44 = or i1 %42, %43
  br i1 %44, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %36, %originalBB1alteredBB
  store i32 22, i32* %4, align 4, !dbg !3061
  %45 = load i32, i32* @x.59
  %46 = load i32, i32* @y.60
  %47 = sub i32 %45, 1
  %48 = mul i32 %45, %47
  %49 = urem i32 %48, 2
  %50 = icmp eq i32 %49, 0
  %51 = icmp slt i32 %46, 10
  %52 = or i1 %50, %51
  br i1 %52, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %125, !dbg !3061

53:                                               ; preds = %3
  call void @llvm.dbg.declare(metadata i64* %9, metadata !3062, metadata !DIExpression()), !dbg !3064
  %54 = load i32, i32* @x.59
  %55 = load i32, i32* @y.60
  %56 = sub i32 %54, 1
  %57 = mul i32 %54, %56
  %58 = urem i32 %57, 2
  %59 = icmp eq i32 %58, 0
  %60 = icmp slt i32 %55, 10
  %61 = or i1 %59, %60
  br i1 %61, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %53, %originalBB6alteredBB
  %62 = load i8*, i8** %8, align 8, !dbg !3065
  %63 = call i64 @strlen(i8* %62) #13, !dbg !3066
  store i64 %63, i64* %9, align 8, !dbg !3064
  %64 = load i64, i64* %9, align 8, !dbg !3067
  %65 = load i64, i64* %7, align 8, !dbg !3069
  %66 = icmp ult i64 %64, %65, !dbg !3070
  %67 = load i32, i32* @x.59
  %68 = load i32, i32* @y.60
  %69 = sub i32 %67, 1
  %70 = mul i32 %67, %69
  %71 = urem i32 %70, 2
  %72 = icmp eq i32 %71, 0
  %73 = icmp slt i32 %68, 10
  %74 = or i1 %72, %73
  br i1 %74, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %66, label %75, label %80, !dbg !3071

75:                                               ; preds = %originalBBpart28
  %76 = load i8*, i8** %6, align 8, !dbg !3072
  %77 = load i8*, i8** %8, align 8, !dbg !3074
  %78 = load i64, i64* %9, align 8, !dbg !3075
  %79 = add i64 %78, 1, !dbg !3076
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %76, i8* align 1 %77, i64 %79, i1 false), !dbg !3077
  store i32 0, i32* %4, align 4, !dbg !3078
  br label %125, !dbg !3078

80:                                               ; preds = %originalBBpart28
  %81 = load i32, i32* @x.59
  %82 = load i32, i32* @y.60
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %80, %originalBB10alteredBB
  %89 = load i64, i64* %7, align 8, !dbg !3079
  %90 = icmp ugt i64 %89, 0, !dbg !3082
  %91 = load i32, i32* @x.59
  %92 = load i32, i32* @y.60
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %90, label %99, label %124, !dbg !3083

99:                                               ; preds = %originalBBpart212
  %100 = load i32, i32* @x.59
  %101 = load i32, i32* @y.60
  %102 = sub i32 %100, 1
  %103 = mul i32 %100, %102
  %104 = urem i32 %103, 2
  %105 = icmp eq i32 %104, 0
  %106 = icmp slt i32 %101, 10
  %107 = or i1 %105, %106
  br i1 %107, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %99, %originalBB14alteredBB
  %108 = load i8*, i8** %6, align 8, !dbg !3084
  %109 = load i8*, i8** %8, align 8, !dbg !3086
  %110 = load i64, i64* %7, align 8, !dbg !3087
  %111 = sub i64 %110, 1, !dbg !3088
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %108, i8* align 1 %109, i64 %111, i1 false), !dbg !3089
  %112 = load i8*, i8** %6, align 8, !dbg !3090
  %113 = load i64, i64* %7, align 8, !dbg !3091
  %114 = sub i64 %113, 1, !dbg !3092
  %115 = getelementptr inbounds i8, i8* %112, i64 %114, !dbg !3090
  store i8 0, i8* %115, align 1, !dbg !3093
  %116 = load i32, i32* @x.59
  %117 = load i32, i32* @y.60
  %118 = sub i32 %116, 1
  %119 = mul i32 %116, %118
  %120 = urem i32 %119, 2
  %121 = icmp eq i32 %120, 0
  %122 = icmp slt i32 %117, 10
  %123 = or i1 %121, %122
  br i1 %123, label %originalBBpart222, label %originalBB14alteredBB

originalBBpart222:                                ; preds = %originalBB14
  br label %124, !dbg !3094

124:                                              ; preds = %originalBBpart222, %originalBBpart212
  store i32 34, i32* %4, align 4, !dbg !3095
  br label %125, !dbg !3095

125:                                              ; preds = %124, %75, %originalBBpart24
  %126 = load i32, i32* %4, align 4, !dbg !3096
  ret i32 %126, !dbg !3096

originalBBalteredBB:                              ; preds = %originalBB, %17
  %127 = load i8*, i8** %6, align 8, !dbg !3059
  %128 = getelementptr inbounds i8, i8* %127, i64 0, !dbg !3059
  store i8 0, i8* %128, align 1, !dbg !3060
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %36
  store i32 22, i32* %4, align 4, !dbg !3061
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %53
  %129 = load i8*, i8** %8, align 8, !dbg !3065
  %130 = call i64 @strlen(i8* %129) #13, !dbg !3066
  store i64 %130, i64* %9, align 8, !dbg !3064
  %131 = load i64, i64* %9, align 8, !dbg !3067
  %132 = load i64, i64* %7, align 8, !dbg !3069
  %133 = icmp ult i64 %131, %132, !dbg !3070
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %80
  %134 = load i64, i64* %7, align 8, !dbg !3079
  %135 = icmp ugt i64 %134, 0, !dbg !3082
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %99
  %136 = load i8*, i8** %6, align 8, !dbg !3084
  %137 = load i8*, i8** %8, align 8, !dbg !3086
  %138 = load i64, i64* %7, align 8, !dbg !3087
  %_ = shl i64 %138, 1
  %_15 = shl i64 %138, 1
  %_16 = sub i64 %138, 1
  %gen = mul i64 %_16, 1
  %_17 = shl i64 %138, 1
  %_18 = shl i64 %138, 1
  %139 = sub i64 %138, 1, !dbg !3088
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %136, i8* align 1 %137, i64 %139, i1 false), !dbg !3089
  %140 = load i8*, i8** %6, align 8, !dbg !3090
  %141 = load i64, i64* %7, align 8, !dbg !3091
  %_19 = sub i64 %141, 1
  %gen20 = mul i64 %_19, 1
  %142 = sub i64 %141, 1, !dbg !3092
  %143 = getelementptr inbounds i8, i8* %140, i64 %142, !dbg !3090
  store i8 0, i8* %143, align 1, !dbg !3093
  br label %originalBB14
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i8* @setlocale_null_androidfix(i32) #4 !dbg !3097 {
  %2 = load i32, i32* @x.61
  %3 = load i32, i32* @y.62
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  store i32 %0, i32* %10, align 4
  call void @llvm.dbg.declare(metadata i32* %10, metadata !3100, metadata !DIExpression()), !dbg !3101
  call void @llvm.dbg.declare(metadata i8** %11, metadata !3102, metadata !DIExpression()), !dbg !3103
  %12 = load i32, i32* %10, align 4, !dbg !3104
  %13 = call i8* @setlocale(i32 %12, i8* null) #10, !dbg !3105
  store i8* %13, i8** %11, align 8, !dbg !3103
  %14 = load i8*, i8** %11, align 8, !dbg !3106
  %15 = load i32, i32* @x.61
  %16 = load i32, i32* @y.62
  %17 = sub i32 %15, 1
  %18 = mul i32 %15, %17
  %19 = urem i32 %18, 2
  %20 = icmp eq i32 %19, 0
  %21 = icmp slt i32 %16, 10
  %22 = or i1 %20, %21
  br i1 %22, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  ret i8* %14, !dbg !3107

originalBBalteredBB:                              ; preds = %originalBB, %1
  %23 = alloca i32, align 4
  %24 = alloca i8*, align 8
  store i32 %0, i32* %23, align 4
  call void @llvm.dbg.declare(metadata i32* %23, metadata !3108, metadata !DIExpression()), !dbg !3101
  call void @llvm.dbg.declare(metadata i8** %24, metadata !3111, metadata !DIExpression()), !dbg !3103
  %25 = load i32, i32* %23, align 4, !dbg !3104
  %26 = call i8* @setlocale(i32 %25, i8* null) #10, !dbg !3105
  store i8* %26, i8** %24, align 8, !dbg !3103
  %27 = load i8*, i8** %24, align 8, !dbg !3106
  br label %originalBB
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fclose(%struct._IO_FILE* nonnull) #4 !dbg !3112 {
  %2 = load i32, i32* @x.63
  %3 = load i32, i32* @y.64
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca %struct._IO_FILE*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %11, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %11, metadata !3150, metadata !DIExpression()), !dbg !3151
  call void @llvm.dbg.declare(metadata i32* %12, metadata !3152, metadata !DIExpression()), !dbg !3153
  store i32 0, i32* %12, align 4, !dbg !3153
  call void @llvm.dbg.declare(metadata i32* %13, metadata !3154, metadata !DIExpression()), !dbg !3155
  call void @llvm.dbg.declare(metadata i32* %14, metadata !3156, metadata !DIExpression()), !dbg !3157
  store i32 0, i32* %14, align 4, !dbg !3157
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3158
  %16 = call i32 @fileno(%struct._IO_FILE* %15) #10, !dbg !3159
  store i32 %16, i32* %13, align 4, !dbg !3160
  %17 = load i32, i32* %13, align 4, !dbg !3161
  %18 = icmp slt i32 %17, 0, !dbg !3163
  %19 = load i32, i32* @x.63
  %20 = load i32, i32* @y.64
  %21 = sub i32 %19, 1
  %22 = mul i32 %19, %21
  %23 = urem i32 %22, 2
  %24 = icmp eq i32 %23, 0
  %25 = icmp slt i32 %20, 10
  %26 = or i1 %24, %25
  br i1 %26, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %18, label %27, label %46, !dbg !3164

27:                                               ; preds = %originalBBpart2
  %28 = load i32, i32* @x.63
  %29 = load i32, i32* @y.64
  %30 = sub i32 %28, 1
  %31 = mul i32 %28, %30
  %32 = urem i32 %31, 2
  %33 = icmp eq i32 %32, 0
  %34 = icmp slt i32 %29, 10
  %35 = or i1 %33, %34
  br i1 %35, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %27, %originalBB1alteredBB
  %36 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3165
  %37 = call i32 @fclose(%struct._IO_FILE* %36), !dbg !3166
  store i32 %37, i32* %10, align 4, !dbg !3167
  %38 = load i32, i32* @x.63
  %39 = load i32, i32* @y.64
  %40 = sub i32 %38, 1
  %41 = mul i32 %38, %40
  %42 = urem i32 %41, 2
  %43 = icmp eq i32 %42, 0
  %44 = icmp slt i32 %39, 10
  %45 = or i1 %43, %44
  br i1 %45, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br label %168, !dbg !3167

46:                                               ; preds = %originalBBpart2
  %47 = load i32, i32* @x.63
  %48 = load i32, i32* @y.64
  %49 = sub i32 %47, 1
  %50 = mul i32 %47, %49
  %51 = urem i32 %50, 2
  %52 = icmp eq i32 %51, 0
  %53 = icmp slt i32 %48, 10
  %54 = or i1 %52, %53
  br i1 %54, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %46, %originalBB6alteredBB
  %55 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3168
  %56 = call i32 @__freading(%struct._IO_FILE* %55) #10, !dbg !3168
  %57 = icmp ne i32 %56, 0, !dbg !3168
  %58 = load i32, i32* @x.63
  %59 = load i32, i32* @y.64
  %60 = sub i32 %58, 1
  %61 = mul i32 %58, %60
  %62 = urem i32 %61, 2
  %63 = icmp eq i32 %62, 0
  %64 = icmp slt i32 %59, 10
  %65 = or i1 %63, %64
  br i1 %65, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %57, label %66, label %71, !dbg !3170

66:                                               ; preds = %originalBBpart28
  %67 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3171
  %68 = call i32 @fileno(%struct._IO_FILE* %67) #10, !dbg !3172
  %69 = call i64 @lseek(i32 %68, i64 0, i32 1) #10, !dbg !3173
  %70 = icmp ne i64 %69, -1, !dbg !3174
  br i1 %70, label %71, label %110, !dbg !3175

71:                                               ; preds = %66, %originalBBpart28
  %72 = load i32, i32* @x.63
  %73 = load i32, i32* @y.64
  %74 = sub i32 %72, 1
  %75 = mul i32 %72, %74
  %76 = urem i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %77, %78
  br i1 %79, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %71, %originalBB10alteredBB
  %80 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3176
  %81 = call i32 @rpl_fflush(%struct._IO_FILE* %80), !dbg !3177
  %82 = icmp ne i32 %81, 0, !dbg !3177
  %83 = load i32, i32* @x.63
  %84 = load i32, i32* @y.64
  %85 = sub i32 %83, 1
  %86 = mul i32 %83, %85
  %87 = urem i32 %86, 2
  %88 = icmp eq i32 %87, 0
  %89 = icmp slt i32 %84, 10
  %90 = or i1 %88, %89
  br i1 %90, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br i1 %82, label %91, label %110, !dbg !3178

91:                                               ; preds = %originalBBpart212
  %92 = load i32, i32* @x.63
  %93 = load i32, i32* @y.64
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %91, %originalBB14alteredBB
  %100 = call i32* @__errno_location() #14, !dbg !3179
  %101 = load i32, i32* %100, align 4, !dbg !3179
  store i32 %101, i32* %12, align 4, !dbg !3180
  %102 = load i32, i32* @x.63
  %103 = load i32, i32* @y.64
  %104 = sub i32 %102, 1
  %105 = mul i32 %102, %104
  %106 = urem i32 %105, 2
  %107 = icmp eq i32 %106, 0
  %108 = icmp slt i32 %103, 10
  %109 = or i1 %107, %108
  br i1 %109, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %110, !dbg !3181

110:                                              ; preds = %originalBBpart216, %originalBBpart212, %66
  %111 = load i32, i32* @x.63
  %112 = load i32, i32* @y.64
  %113 = sub i32 %111, 1
  %114 = mul i32 %111, %113
  %115 = urem i32 %114, 2
  %116 = icmp eq i32 %115, 0
  %117 = icmp slt i32 %112, 10
  %118 = or i1 %116, %117
  br i1 %118, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %110, %originalBB18alteredBB
  %119 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3182
  %120 = call i32 @fclose(%struct._IO_FILE* %119), !dbg !3183
  store i32 %120, i32* %14, align 4, !dbg !3184
  %121 = load i32, i32* %12, align 4, !dbg !3185
  %122 = icmp ne i32 %121, 0, !dbg !3187
  %123 = load i32, i32* @x.63
  %124 = load i32, i32* @y.64
  %125 = sub i32 %123, 1
  %126 = mul i32 %123, %125
  %127 = urem i32 %126, 2
  %128 = icmp eq i32 %127, 0
  %129 = icmp slt i32 %124, 10
  %130 = or i1 %128, %129
  br i1 %130, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br i1 %122, label %131, label %150, !dbg !3188

131:                                              ; preds = %originalBBpart220
  %132 = load i32, i32* @x.63
  %133 = load i32, i32* @y.64
  %134 = sub i32 %132, 1
  %135 = mul i32 %132, %134
  %136 = urem i32 %135, 2
  %137 = icmp eq i32 %136, 0
  %138 = icmp slt i32 %133, 10
  %139 = or i1 %137, %138
  br i1 %139, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %131, %originalBB22alteredBB
  %140 = load i32, i32* %12, align 4, !dbg !3189
  %141 = call i32* @__errno_location() #14, !dbg !3191
  store i32 %140, i32* %141, align 4, !dbg !3192
  store i32 -1, i32* %14, align 4, !dbg !3193
  %142 = load i32, i32* @x.63
  %143 = load i32, i32* @y.64
  %144 = sub i32 %142, 1
  %145 = mul i32 %142, %144
  %146 = urem i32 %145, 2
  %147 = icmp eq i32 %146, 0
  %148 = icmp slt i32 %143, 10
  %149 = or i1 %147, %148
  br i1 %149, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  br label %150, !dbg !3194

150:                                              ; preds = %originalBBpart224, %originalBBpart220
  %151 = load i32, i32* @x.63
  %152 = load i32, i32* @y.64
  %153 = sub i32 %151, 1
  %154 = mul i32 %151, %153
  %155 = urem i32 %154, 2
  %156 = icmp eq i32 %155, 0
  %157 = icmp slt i32 %152, 10
  %158 = or i1 %156, %157
  br i1 %158, label %originalBB26, label %originalBB26alteredBB

originalBB26:                                     ; preds = %150, %originalBB26alteredBB
  %159 = load i32, i32* %14, align 4, !dbg !3195
  store i32 %159, i32* %10, align 4, !dbg !3196
  %160 = load i32, i32* @x.63
  %161 = load i32, i32* @y.64
  %162 = sub i32 %160, 1
  %163 = mul i32 %160, %162
  %164 = urem i32 %163, 2
  %165 = icmp eq i32 %164, 0
  %166 = icmp slt i32 %161, 10
  %167 = or i1 %165, %166
  br i1 %167, label %originalBBpart228, label %originalBB26alteredBB

originalBBpart228:                                ; preds = %originalBB26
  br label %168, !dbg !3196

168:                                              ; preds = %originalBBpart228, %originalBBpart24
  %169 = load i32, i32* %10, align 4, !dbg !3197
  ret i32 %169, !dbg !3197

originalBBalteredBB:                              ; preds = %originalBB, %1
  %170 = alloca i32, align 4
  %171 = alloca %struct._IO_FILE*, align 8
  %172 = alloca i32, align 4
  %173 = alloca i32, align 4
  %174 = alloca i32, align 4
  store %struct._IO_FILE* %0, %struct._IO_FILE** %171, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %171, metadata !3198, metadata !DIExpression()), !dbg !3151
  call void @llvm.dbg.declare(metadata i32* %172, metadata !3237, metadata !DIExpression()), !dbg !3153
  store i32 0, i32* %172, align 4, !dbg !3153
  call void @llvm.dbg.declare(metadata i32* %173, metadata !3238, metadata !DIExpression()), !dbg !3155
  call void @llvm.dbg.declare(metadata i32* %174, metadata !3239, metadata !DIExpression()), !dbg !3157
  store i32 0, i32* %174, align 4, !dbg !3157
  %175 = load %struct._IO_FILE*, %struct._IO_FILE** %171, align 8, !dbg !3158
  %176 = call i32 @fileno(%struct._IO_FILE* %175) #10, !dbg !3159
  store i32 %176, i32* %173, align 4, !dbg !3160
  %177 = load i32, i32* %173, align 4, !dbg !3161
  %178 = icmp slt i32 %177, 0, !dbg !3163
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %27
  %179 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3165
  %180 = call i32 @fclose(%struct._IO_FILE* %179), !dbg !3166
  store i32 %180, i32* %10, align 4, !dbg !3167
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %46
  %181 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3168
  %182 = call i32 @__freading(%struct._IO_FILE* %181) #10, !dbg !3168
  %183 = icmp ne i32 %182, 0, !dbg !3168
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %71
  %184 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3176
  %185 = call i32 @rpl_fflush(%struct._IO_FILE* %184), !dbg !3177
  %186 = icmp ne i32 %185, 0, !dbg !3177
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %91
  %187 = call i32* @__errno_location() #14, !dbg !3179
  %188 = load i32, i32* %187, align 4, !dbg !3179
  store i32 %188, i32* %12, align 4, !dbg !3180
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %110
  %189 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3182
  %190 = call i32 @fclose(%struct._IO_FILE* %189), !dbg !3183
  store i32 %190, i32* %14, align 4, !dbg !3184
  %191 = load i32, i32* %12, align 4, !dbg !3185
  %192 = icmp ne i32 %191, 0, !dbg !3187
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %131
  %193 = load i32, i32* %12, align 4, !dbg !3189
  %194 = call i32* @__errno_location() #14, !dbg !3191
  store i32 %193, i32* %194, align 4, !dbg !3192
  store i32 -1, i32* %14, align 4, !dbg !3193
  br label %originalBB22

originalBB26alteredBB:                            ; preds = %originalBB26, %150
  %195 = load i32, i32* %14, align 4, !dbg !3195
  store i32 %195, i32* %10, align 4, !dbg !3196
  br label %originalBB26
}

; Function Attrs: nounwind
declare dso_local i32 @fileno(%struct._IO_FILE*) #2

declare dso_local i32 @fclose(%struct._IO_FILE*) #3

; Function Attrs: nounwind
declare dso_local i32 @__freading(%struct._IO_FILE*) #2

; Function Attrs: nounwind
declare dso_local i64 @lseek(i32, i64, i32) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fflush(%struct._IO_FILE*) #4 !dbg !3240 {
  %2 = load i32, i32* @x.65
  %3 = load i32, i32* @y.66
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %11, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %11, metadata !3278, metadata !DIExpression()), !dbg !3279
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3280
  %13 = icmp eq %struct._IO_FILE* %12, null, !dbg !3282
  %14 = load i32, i32* @x.65
  %15 = load i32, i32* @y.66
  %16 = sub i32 %14, 1
  %17 = mul i32 %14, %16
  %18 = urem i32 %17, 2
  %19 = icmp eq i32 %18, 0
  %20 = icmp slt i32 %15, 10
  %21 = or i1 %19, %20
  br i1 %21, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %13, label %42, label %22, !dbg !3283

22:                                               ; preds = %originalBBpart2
  %23 = load i32, i32* @x.65
  %24 = load i32, i32* @y.66
  %25 = sub i32 %23, 1
  %26 = mul i32 %23, %25
  %27 = urem i32 %26, 2
  %28 = icmp eq i32 %27, 0
  %29 = icmp slt i32 %24, 10
  %30 = or i1 %28, %29
  br i1 %30, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %22, %originalBB1alteredBB
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3284
  %32 = call i32 @__freading(%struct._IO_FILE* %31) #10, !dbg !3284
  %33 = icmp ne i32 %32, 0, !dbg !3284
  %34 = load i32, i32* @x.65
  %35 = load i32, i32* @y.66
  %36 = sub i32 %34, 1
  %37 = mul i32 %34, %36
  %38 = urem i32 %37, 2
  %39 = icmp eq i32 %38, 0
  %40 = icmp slt i32 %35, 10
  %41 = or i1 %39, %40
  br i1 %41, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %33, label %61, label %42, !dbg !3285

42:                                               ; preds = %originalBBpart24, %originalBBpart2
  %43 = load i32, i32* @x.65
  %44 = load i32, i32* @y.66
  %45 = sub i32 %43, 1
  %46 = mul i32 %43, %45
  %47 = urem i32 %46, 2
  %48 = icmp eq i32 %47, 0
  %49 = icmp slt i32 %44, 10
  %50 = or i1 %48, %49
  br i1 %50, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %42, %originalBB6alteredBB
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3286
  %52 = call i32 @fflush(%struct._IO_FILE* %51), !dbg !3287
  store i32 %52, i32* %10, align 4, !dbg !3288
  %53 = load i32, i32* @x.65
  %54 = load i32, i32* @y.66
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br label %81, !dbg !3288

61:                                               ; preds = %originalBBpart24
  %62 = load i32, i32* @x.65
  %63 = load i32, i32* @y.66
  %64 = sub i32 %62, 1
  %65 = mul i32 %62, %64
  %66 = urem i32 %65, 2
  %67 = icmp eq i32 %66, 0
  %68 = icmp slt i32 %63, 10
  %69 = or i1 %67, %68
  br i1 %69, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %61, %originalBB10alteredBB
  %70 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3289
  call void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE* %70), !dbg !3290
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3291
  %72 = call i32 @fflush(%struct._IO_FILE* %71), !dbg !3292
  store i32 %72, i32* %10, align 4, !dbg !3293
  %73 = load i32, i32* @x.65
  %74 = load i32, i32* @y.66
  %75 = sub i32 %73, 1
  %76 = mul i32 %73, %75
  %77 = urem i32 %76, 2
  %78 = icmp eq i32 %77, 0
  %79 = icmp slt i32 %74, 10
  %80 = or i1 %78, %79
  br i1 %80, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %81, !dbg !3293

81:                                               ; preds = %originalBBpart212, %originalBBpart28
  %82 = load i32, i32* @x.65
  %83 = load i32, i32* @y.66
  %84 = sub i32 %82, 1
  %85 = mul i32 %82, %84
  %86 = urem i32 %85, 2
  %87 = icmp eq i32 %86, 0
  %88 = icmp slt i32 %83, 10
  %89 = or i1 %87, %88
  br i1 %89, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %81, %originalBB14alteredBB
  %90 = load i32, i32* %10, align 4, !dbg !3294
  %91 = load i32, i32* @x.65
  %92 = load i32, i32* @y.66
  %93 = sub i32 %91, 1
  %94 = mul i32 %91, %93
  %95 = urem i32 %94, 2
  %96 = icmp eq i32 %95, 0
  %97 = icmp slt i32 %92, 10
  %98 = or i1 %96, %97
  br i1 %98, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  ret i32 %90, !dbg !3294

originalBBalteredBB:                              ; preds = %originalBB, %1
  %99 = alloca i32, align 4
  %100 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %100, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %100, metadata !3295, metadata !DIExpression()), !dbg !3279
  %101 = load %struct._IO_FILE*, %struct._IO_FILE** %100, align 8, !dbg !3280
  %102 = icmp eq %struct._IO_FILE* %101, null, !dbg !3282
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %22
  %103 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3284
  %104 = call i32 @__freading(%struct._IO_FILE* %103) #10, !dbg !3284
  %105 = icmp ne i32 %104, 0, !dbg !3284
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %42
  %106 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3286
  %107 = call i32 @fflush(%struct._IO_FILE* %106), !dbg !3287
  store i32 %107, i32* %10, align 4, !dbg !3288
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %61
  %108 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3289
  call void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE* %108), !dbg !3290
  %109 = load %struct._IO_FILE*, %struct._IO_FILE** %11, align 8, !dbg !3291
  %110 = call i32 @fflush(%struct._IO_FILE* %109), !dbg !3292
  store i32 %110, i32* %10, align 4, !dbg !3293
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %81
  %111 = load i32, i32* %10, align 4, !dbg !3294
  br label %originalBB14
}

declare dso_local i32 @fflush(%struct._IO_FILE*) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal void @clear_ungetc_buffer_preserving_position(%struct._IO_FILE*) #4 !dbg !3334 {
  %2 = load i32, i32* @x.67
  %3 = load i32, i32* @y.68
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %10, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %10, metadata !3337, metadata !DIExpression()), !dbg !3338
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** %10, align 8, !dbg !3339
  %12 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %11, i32 0, i32 0, !dbg !3341
  %13 = load i32, i32* %12, align 8, !dbg !3341
  %14 = and i32 %13, 256, !dbg !3342
  %15 = icmp ne i32 %14, 0, !dbg !3342
  %16 = load i32, i32* @x.67
  %17 = load i32, i32* @y.68
  %18 = sub i32 %16, 1
  %19 = mul i32 %16, %18
  %20 = urem i32 %19, 2
  %21 = icmp eq i32 %20, 0
  %22 = icmp slt i32 %17, 10
  %23 = or i1 %21, %22
  br i1 %23, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %15, label %24, label %43, !dbg !3343

24:                                               ; preds = %originalBBpart2
  %25 = load i32, i32* @x.67
  %26 = load i32, i32* @y.68
  %27 = sub i32 %25, 1
  %28 = mul i32 %25, %27
  %29 = urem i32 %28, 2
  %30 = icmp eq i32 %29, 0
  %31 = icmp slt i32 %26, 10
  %32 = or i1 %30, %31
  br i1 %32, label %originalBB2, label %originalBB2alteredBB

originalBB2:                                      ; preds = %24, %originalBB2alteredBB
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** %10, align 8, !dbg !3344
  %34 = call i32 @rpl_fseeko(%struct._IO_FILE* %33, i64 0, i32 1), !dbg !3345
  %35 = load i32, i32* @x.67
  %36 = load i32, i32* @y.68
  %37 = sub i32 %35, 1
  %38 = mul i32 %35, %37
  %39 = urem i32 %38, 2
  %40 = icmp eq i32 %39, 0
  %41 = icmp slt i32 %36, 10
  %42 = or i1 %40, %41
  br i1 %42, label %originalBBpart24, label %originalBB2alteredBB

originalBBpart24:                                 ; preds = %originalBB2
  br label %43, !dbg !3345

43:                                               ; preds = %originalBBpart24, %originalBBpart2
  %44 = load i32, i32* @x.67
  %45 = load i32, i32* @y.68
  %46 = sub i32 %44, 1
  %47 = mul i32 %44, %46
  %48 = urem i32 %47, 2
  %49 = icmp eq i32 %48, 0
  %50 = icmp slt i32 %45, 10
  %51 = or i1 %49, %50
  br i1 %51, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %43, %originalBB6alteredBB
  %52 = load i32, i32* @x.67
  %53 = load i32, i32* @y.68
  %54 = sub i32 %52, 1
  %55 = mul i32 %52, %54
  %56 = urem i32 %55, 2
  %57 = icmp eq i32 %56, 0
  %58 = icmp slt i32 %53, 10
  %59 = or i1 %57, %58
  br i1 %59, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  ret void, !dbg !3346

originalBBalteredBB:                              ; preds = %originalBB, %1
  %60 = alloca %struct._IO_FILE*, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %60, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %60, metadata !3347, metadata !DIExpression()), !dbg !3338
  %61 = load %struct._IO_FILE*, %struct._IO_FILE** %60, align 8, !dbg !3339
  %62 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %61, i32 0, i32 0, !dbg !3341
  %63 = load i32, i32* %62, align 8, !dbg !3341
  %_ = shl i32 %63, 256
  %_1 = shl i32 %63, 256
  %64 = and i32 %63, 256, !dbg !3342
  %65 = icmp ne i32 %64, 0, !dbg !3342
  br label %originalBB

originalBB2alteredBB:                             ; preds = %originalBB2, %24
  %66 = load %struct._IO_FILE*, %struct._IO_FILE** %10, align 8, !dbg !3344
  %67 = call i32 @rpl_fseeko(%struct._IO_FILE* %66, i64 0, i32 1), !dbg !3345
  br label %originalBB2

originalBB6alteredBB:                             ; preds = %originalBB6, %43
  br label %originalBB6
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @rpl_fseeko(%struct._IO_FILE* nonnull, i64, i32) #4 !dbg !3386 {
  %4 = load i32, i32* @x.69
  %5 = load i32, i32* @y.70
  %6 = sub i32 %4, 1
  %7 = mul i32 %4, %6
  %8 = urem i32 %7, 2
  %9 = icmp eq i32 %8, 0
  %10 = icmp slt i32 %5, 10
  %11 = or i1 %9, %10
  br i1 %11, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %3, %originalBBalteredBB
  %12 = alloca i32, align 4
  %13 = alloca %struct._IO_FILE*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i32, align 4
  %16 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %13, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %13, metadata !3425, metadata !DIExpression()), !dbg !3426
  store i64 %1, i64* %14, align 8
  call void @llvm.dbg.declare(metadata i64* %14, metadata !3427, metadata !DIExpression()), !dbg !3428
  store i32 %2, i32* %15, align 4
  call void @llvm.dbg.declare(metadata i32* %15, metadata !3429, metadata !DIExpression()), !dbg !3430
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3431
  %18 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %17, i32 0, i32 2, !dbg !3433
  %19 = load i8*, i8** %18, align 8, !dbg !3433
  %20 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3434
  %21 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %20, i32 0, i32 1, !dbg !3435
  %22 = load i8*, i8** %21, align 8, !dbg !3435
  %23 = icmp eq i8* %19, %22, !dbg !3436
  %24 = load i32, i32* @x.69
  %25 = load i32, i32* @y.70
  %26 = sub i32 %24, 1
  %27 = mul i32 %24, %26
  %28 = urem i32 %27, 2
  %29 = icmp eq i32 %28, 0
  %30 = icmp slt i32 %25, 10
  %31 = or i1 %29, %30
  br i1 %31, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %23, label %32, label %126, !dbg !3437

32:                                               ; preds = %originalBBpart2
  %33 = load i32, i32* @x.69
  %34 = load i32, i32* @y.70
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %32, %originalBB1alteredBB
  %41 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3438
  %42 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %41, i32 0, i32 5, !dbg !3439
  %43 = load i8*, i8** %42, align 8, !dbg !3439
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3440
  %45 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %44, i32 0, i32 4, !dbg !3441
  %46 = load i8*, i8** %45, align 8, !dbg !3441
  %47 = icmp eq i8* %43, %46, !dbg !3442
  %48 = load i32, i32* @x.69
  %49 = load i32, i32* @y.70
  %50 = sub i32 %48, 1
  %51 = mul i32 %48, %50
  %52 = urem i32 %51, 2
  %53 = icmp eq i32 %52, 0
  %54 = icmp slt i32 %49, 10
  %55 = or i1 %53, %54
  br i1 %55, label %originalBBpart24, label %originalBB1alteredBB

originalBBpart24:                                 ; preds = %originalBB1
  br i1 %47, label %56, label %126, !dbg !3443

56:                                               ; preds = %originalBBpart24
  %57 = load i32, i32* @x.69
  %58 = load i32, i32* @y.70
  %59 = sub i32 %57, 1
  %60 = mul i32 %57, %59
  %61 = urem i32 %60, 2
  %62 = icmp eq i32 %61, 0
  %63 = icmp slt i32 %58, 10
  %64 = or i1 %62, %63
  br i1 %64, label %originalBB6, label %originalBB6alteredBB

originalBB6:                                      ; preds = %56, %originalBB6alteredBB
  %65 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3444
  %66 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %65, i32 0, i32 9, !dbg !3445
  %67 = load i8*, i8** %66, align 8, !dbg !3445
  %68 = icmp eq i8* %67, null, !dbg !3446
  %69 = load i32, i32* @x.69
  %70 = load i32, i32* @y.70
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBBpart28, label %originalBB6alteredBB

originalBBpart28:                                 ; preds = %originalBB6
  br i1 %68, label %77, label %126, !dbg !3447

77:                                               ; preds = %originalBBpart28
  call void @llvm.dbg.declare(metadata i64* %16, metadata !3448, metadata !DIExpression()), !dbg !3450
  %78 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3451
  %79 = call i32 @fileno(%struct._IO_FILE* %78) #10, !dbg !3452
  %80 = load i64, i64* %14, align 8, !dbg !3453
  %81 = load i32, i32* %15, align 4, !dbg !3454
  %82 = call i64 @lseek(i32 %79, i64 %80, i32 %81) #10, !dbg !3455
  store i64 %82, i64* %16, align 8, !dbg !3450
  %83 = load i64, i64* %16, align 8, !dbg !3456
  %84 = icmp eq i64 %83, -1, !dbg !3458
  br i1 %84, label %85, label %102, !dbg !3459

85:                                               ; preds = %77
  %86 = load i32, i32* @x.69
  %87 = load i32, i32* @y.70
  %88 = sub i32 %86, 1
  %89 = mul i32 %86, %88
  %90 = urem i32 %89, 2
  %91 = icmp eq i32 %90, 0
  %92 = icmp slt i32 %87, 10
  %93 = or i1 %91, %92
  br i1 %93, label %originalBB10, label %originalBB10alteredBB

originalBB10:                                     ; preds = %85, %originalBB10alteredBB
  store i32 -1, i32* %12, align 4, !dbg !3460
  %94 = load i32, i32* @x.69
  %95 = load i32, i32* @y.70
  %96 = sub i32 %94, 1
  %97 = mul i32 %94, %96
  %98 = urem i32 %97, 2
  %99 = icmp eq i32 %98, 0
  %100 = icmp slt i32 %95, 10
  %101 = or i1 %99, %100
  br i1 %101, label %originalBBpart212, label %originalBB10alteredBB

originalBBpart212:                                ; preds = %originalBB10
  br label %147, !dbg !3460

102:                                              ; preds = %77
  %103 = load i32, i32* @x.69
  %104 = load i32, i32* @y.70
  %105 = sub i32 %103, 1
  %106 = mul i32 %103, %105
  %107 = urem i32 %106, 2
  %108 = icmp eq i32 %107, 0
  %109 = icmp slt i32 %104, 10
  %110 = or i1 %108, %109
  br i1 %110, label %originalBB14, label %originalBB14alteredBB

originalBB14:                                     ; preds = %102, %originalBB14alteredBB
  %111 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3462
  %112 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %111, i32 0, i32 0, !dbg !3463
  %113 = load i32, i32* %112, align 8, !dbg !3464
  %114 = and i32 %113, -17, !dbg !3464
  store i32 %114, i32* %112, align 8, !dbg !3464
  %115 = load i64, i64* %16, align 8, !dbg !3465
  %116 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3466
  %117 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %116, i32 0, i32 21, !dbg !3467
  store i64 %115, i64* %117, align 8, !dbg !3468
  store i32 0, i32* %12, align 4, !dbg !3469
  %118 = load i32, i32* @x.69
  %119 = load i32, i32* @y.70
  %120 = sub i32 %118, 1
  %121 = mul i32 %118, %120
  %122 = urem i32 %121, 2
  %123 = icmp eq i32 %122, 0
  %124 = icmp slt i32 %119, 10
  %125 = or i1 %123, %124
  br i1 %125, label %originalBBpart216, label %originalBB14alteredBB

originalBBpart216:                                ; preds = %originalBB14
  br label %147, !dbg !3469

126:                                              ; preds = %originalBBpart28, %originalBBpart24, %originalBBpart2
  %127 = load i32, i32* @x.69
  %128 = load i32, i32* @y.70
  %129 = sub i32 %127, 1
  %130 = mul i32 %127, %129
  %131 = urem i32 %130, 2
  %132 = icmp eq i32 %131, 0
  %133 = icmp slt i32 %128, 10
  %134 = or i1 %132, %133
  br i1 %134, label %originalBB18, label %originalBB18alteredBB

originalBB18:                                     ; preds = %126, %originalBB18alteredBB
  %135 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3470
  %136 = load i64, i64* %14, align 8, !dbg !3471
  %137 = load i32, i32* %15, align 4, !dbg !3472
  %138 = call i32 @fseeko(%struct._IO_FILE* %135, i64 %136, i32 %137), !dbg !3473
  store i32 %138, i32* %12, align 4, !dbg !3474
  %139 = load i32, i32* @x.69
  %140 = load i32, i32* @y.70
  %141 = sub i32 %139, 1
  %142 = mul i32 %139, %141
  %143 = urem i32 %142, 2
  %144 = icmp eq i32 %143, 0
  %145 = icmp slt i32 %140, 10
  %146 = or i1 %144, %145
  br i1 %146, label %originalBBpart220, label %originalBB18alteredBB

originalBBpart220:                                ; preds = %originalBB18
  br label %147, !dbg !3474

147:                                              ; preds = %originalBBpart220, %originalBBpart216, %originalBBpart212
  %148 = load i32, i32* @x.69
  %149 = load i32, i32* @y.70
  %150 = sub i32 %148, 1
  %151 = mul i32 %148, %150
  %152 = urem i32 %151, 2
  %153 = icmp eq i32 %152, 0
  %154 = icmp slt i32 %149, 10
  %155 = or i1 %153, %154
  br i1 %155, label %originalBB22, label %originalBB22alteredBB

originalBB22:                                     ; preds = %147, %originalBB22alteredBB
  %156 = load i32, i32* %12, align 4, !dbg !3475
  %157 = load i32, i32* @x.69
  %158 = load i32, i32* @y.70
  %159 = sub i32 %157, 1
  %160 = mul i32 %157, %159
  %161 = urem i32 %160, 2
  %162 = icmp eq i32 %161, 0
  %163 = icmp slt i32 %158, 10
  %164 = or i1 %162, %163
  br i1 %164, label %originalBBpart224, label %originalBB22alteredBB

originalBBpart224:                                ; preds = %originalBB22
  ret i32 %156, !dbg !3475

originalBBalteredBB:                              ; preds = %originalBB, %3
  %165 = alloca i32, align 4
  %166 = alloca %struct._IO_FILE*, align 8
  %167 = alloca i64, align 8
  %168 = alloca i32, align 4
  %169 = alloca i64, align 8
  store %struct._IO_FILE* %0, %struct._IO_FILE** %166, align 8
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %166, metadata !3476, metadata !DIExpression()), !dbg !3426
  store i64 %1, i64* %167, align 8
  call void @llvm.dbg.declare(metadata i64* %167, metadata !3515, metadata !DIExpression()), !dbg !3428
  store i32 %2, i32* %168, align 4
  call void @llvm.dbg.declare(metadata i32* %168, metadata !3516, metadata !DIExpression()), !dbg !3430
  %170 = load %struct._IO_FILE*, %struct._IO_FILE** %166, align 8, !dbg !3431
  %171 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %170, i32 0, i32 2, !dbg !3433
  %172 = load i8*, i8** %171, align 8, !dbg !3433
  %173 = load %struct._IO_FILE*, %struct._IO_FILE** %166, align 8, !dbg !3434
  %174 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %173, i32 0, i32 1, !dbg !3435
  %175 = load i8*, i8** %174, align 8, !dbg !3435
  %176 = icmp eq i8* %172, %175, !dbg !3436
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %32
  %177 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3438
  %178 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %177, i32 0, i32 5, !dbg !3439
  %179 = load i8*, i8** %178, align 8, !dbg !3439
  %180 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3440
  %181 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %180, i32 0, i32 4, !dbg !3441
  %182 = load i8*, i8** %181, align 8, !dbg !3441
  %183 = icmp eq i8* %179, %182, !dbg !3442
  br label %originalBB1

originalBB6alteredBB:                             ; preds = %originalBB6, %56
  %184 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3444
  %185 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %184, i32 0, i32 9, !dbg !3445
  %186 = load i8*, i8** %185, align 8, !dbg !3445
  %187 = icmp eq i8* %186, null, !dbg !3446
  br label %originalBB6

originalBB10alteredBB:                            ; preds = %originalBB10, %85
  store i32 -1, i32* %12, align 4, !dbg !3460
  br label %originalBB10

originalBB14alteredBB:                            ; preds = %originalBB14, %102
  %188 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3462
  %189 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %188, i32 0, i32 0, !dbg !3463
  %190 = load i32, i32* %189, align 8, !dbg !3464
  %_ = shl i32 %190, -17
  %191 = and i32 %190, -17, !dbg !3464
  store i32 %191, i32* %189, align 8, !dbg !3464
  %192 = load i64, i64* %16, align 8, !dbg !3465
  %193 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3466
  %194 = getelementptr inbounds %struct._IO_FILE, %struct._IO_FILE* %193, i32 0, i32 21, !dbg !3467
  store i64 %192, i64* %194, align 8, !dbg !3468
  store i32 0, i32* %12, align 4, !dbg !3469
  br label %originalBB14

originalBB18alteredBB:                            ; preds = %originalBB18, %126
  %195 = load %struct._IO_FILE*, %struct._IO_FILE** %13, align 8, !dbg !3470
  %196 = load i64, i64* %14, align 8, !dbg !3471
  %197 = load i32, i32* %15, align 4, !dbg !3472
  %198 = call i32 @fseeko(%struct._IO_FILE* %195, i64 %196, i32 %197), !dbg !3473
  store i32 %198, i32* %12, align 4, !dbg !3474
  br label %originalBB18

originalBB22alteredBB:                            ; preds = %originalBB22, %147
  %199 = load i32, i32* %12, align 4, !dbg !3475
  br label %originalBB22
}

declare dso_local i32 @fseeko(%struct._IO_FILE*, i64, i32) #3

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @c_tolower(i32) #4 !dbg !3517 {
  %2 = load i32, i32* @x.71
  %3 = load i32, i32* @y.72
  %4 = sub i32 %2, 1
  %5 = mul i32 %2, %4
  %6 = urem i32 %5, 2
  %7 = icmp eq i32 %6, 0
  %8 = icmp slt i32 %3, 10
  %9 = or i1 %7, %8
  br i1 %9, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %1, %originalBBalteredBB
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i32 %0, i32* %11, align 4
  call void @llvm.dbg.declare(metadata i32* %11, metadata !3521, metadata !DIExpression()), !dbg !3522
  %12 = load i32, i32* %11, align 4, !dbg !3523
  %13 = load i32, i32* @x.71
  %14 = load i32, i32* @y.72
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  switch i32 %12, label %41 [
    i32 65, label %21
    i32 66, label %21
    i32 67, label %21
    i32 68, label %21
    i32 69, label %21
    i32 70, label %21
    i32 71, label %21
    i32 72, label %21
    i32 73, label %21
    i32 74, label %21
    i32 75, label %21
    i32 76, label %21
    i32 77, label %21
    i32 78, label %21
    i32 79, label %21
    i32 80, label %21
    i32 81, label %21
    i32 82, label %21
    i32 83, label %21
    i32 84, label %21
    i32 85, label %21
    i32 86, label %21
    i32 87, label %21
    i32 88, label %21
    i32 89, label %21
    i32 90, label %21
  ], !dbg !3524

21:                                               ; preds = %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2, %originalBBpart2
  %22 = load i32, i32* @x.71
  %23 = load i32, i32* @y.72
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  %30 = load i32, i32* %11, align 4, !dbg !3525
  %31 = sub nsw i32 %30, 65, !dbg !3527
  %32 = add nsw i32 %31, 97, !dbg !3528
  store i32 %32, i32* %10, align 4, !dbg !3529
  %33 = load i32, i32* @x.71
  %34 = load i32, i32* @y.72
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBBpart215, label %originalBB1alteredBB

originalBBpart215:                                ; preds = %originalBB1
  br label %59, !dbg !3529

41:                                               ; preds = %originalBBpart2
  %42 = load i32, i32* @x.71
  %43 = load i32, i32* @y.72
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBB17, label %originalBB17alteredBB

originalBB17:                                     ; preds = %41, %originalBB17alteredBB
  %50 = load i32, i32* %11, align 4, !dbg !3530
  store i32 %50, i32* %10, align 4, !dbg !3531
  %51 = load i32, i32* @x.71
  %52 = load i32, i32* @y.72
  %53 = sub i32 %51, 1
  %54 = mul i32 %51, %53
  %55 = urem i32 %54, 2
  %56 = icmp eq i32 %55, 0
  %57 = icmp slt i32 %52, 10
  %58 = or i1 %56, %57
  br i1 %58, label %originalBBpart219, label %originalBB17alteredBB

originalBBpart219:                                ; preds = %originalBB17
  br label %59, !dbg !3531

59:                                               ; preds = %originalBBpart219, %originalBBpart215
  %60 = load i32, i32* @x.71
  %61 = load i32, i32* @y.72
  %62 = sub i32 %60, 1
  %63 = mul i32 %60, %62
  %64 = urem i32 %63, 2
  %65 = icmp eq i32 %64, 0
  %66 = icmp slt i32 %61, 10
  %67 = or i1 %65, %66
  br i1 %67, label %originalBB21, label %originalBB21alteredBB

originalBB21:                                     ; preds = %59, %originalBB21alteredBB
  %68 = load i32, i32* %10, align 4, !dbg !3532
  %69 = load i32, i32* @x.71
  %70 = load i32, i32* @y.72
  %71 = sub i32 %69, 1
  %72 = mul i32 %69, %71
  %73 = urem i32 %72, 2
  %74 = icmp eq i32 %73, 0
  %75 = icmp slt i32 %70, 10
  %76 = or i1 %74, %75
  br i1 %76, label %originalBBpart223, label %originalBB21alteredBB

originalBBpart223:                                ; preds = %originalBB21
  ret i32 %68, !dbg !3532

originalBBalteredBB:                              ; preds = %originalBB, %1
  %77 = alloca i32, align 4
  %78 = alloca i32, align 4
  store i32 %0, i32* %78, align 4
  call void @llvm.dbg.declare(metadata i32* %78, metadata !3533, metadata !DIExpression()), !dbg !3522
  %79 = load i32, i32* %78, align 4, !dbg !3523
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  %80 = load i32, i32* %11, align 4, !dbg !3525
  %_ = sub i32 0, %80
  %gen = add i32 %_, 65
  %_2 = sub i32 0, %80
  %gen3 = add i32 %_2, 65
  %_4 = sub i32 %80, 65
  %gen5 = mul i32 %_4, 65
  %_6 = sub i32 %80, 65
  %gen7 = mul i32 %_6, 65
  %_8 = sub i32 0, %80
  %gen9 = add i32 %_8, 65
  %_10 = sub i32 0, %80
  %gen11 = add i32 %_10, 65
  %81 = sub nsw i32 %80, 65, !dbg !3527
  %_12 = sub i32 0, %81
  %gen13 = add i32 %_12, 97
  %82 = add nsw i32 %81, 97, !dbg !3528
  store i32 %82, i32* %10, align 4, !dbg !3529
  br label %originalBB1

originalBB17alteredBB:                            ; preds = %originalBB17, %41
  %83 = load i32, i32* %11, align 4, !dbg !3530
  store i32 %83, i32* %10, align 4, !dbg !3531
  br label %originalBB17

originalBB21alteredBB:                            ; preds = %originalBB21, %59
  %84 = load i32, i32* %10, align 4, !dbg !3532
  br label %originalBB21
}

define private i32 @controle(i8*, i32) {
  %3 = load i32, i32* @x.73
  %4 = load i32, i32* @y.74
  %5 = sub i32 %3, 1
  %6 = mul i32 %3, %5
  %7 = urem i32 %6, 2
  %8 = icmp eq i32 %7, 0
  %9 = icmp slt i32 %4, 10
  %10 = or i1 %8, %9
  br i1 %10, label %originalBB, label %originalBBalteredBB

originalBB:                                       ; preds = %2, %originalBBalteredBB
  %11 = load i32, i32* @inVal0
  %12 = icmp sgt i32 %11, 0
  %13 = load i32, i32* @x.73
  %14 = load i32, i32* @y.74
  %15 = sub i32 %13, 1
  %16 = mul i32 %13, %15
  %17 = urem i32 %16, 2
  %18 = icmp eq i32 %17, 0
  %19 = icmp slt i32 %14, 10
  %20 = or i1 %18, %19
  br i1 %20, label %originalBBpart2, label %originalBBalteredBB

originalBBpart2:                                  ; preds = %originalBB
  br i1 %12, label %41, label %21

21:                                               ; preds = %originalBBpart2
  %22 = load i32, i32* @x.73
  %23 = load i32, i32* @y.74
  %24 = sub i32 %22, 1
  %25 = mul i32 %22, %24
  %26 = urem i32 %25, 2
  %27 = icmp eq i32 %26, 0
  %28 = icmp slt i32 %23, 10
  %29 = or i1 %27, %28
  br i1 %29, label %originalBB1, label %originalBB1alteredBB

originalBB1:                                      ; preds = %21, %originalBB1alteredBB
  call void @srand(i32 %1)
  %30 = call i32 @rand()
  %31 = srem i32 %30, 50000
  %32 = add i32 %31, 2
  %33 = load i32, i32* @x.73
  %34 = load i32, i32* @y.74
  %35 = sub i32 %33, 1
  %36 = mul i32 %33, %35
  %37 = urem i32 %36, 2
  %38 = icmp eq i32 %37, 0
  %39 = icmp slt i32 %34, 10
  %40 = or i1 %38, %39
  br i1 %40, label %originalBBpart214, label %originalBB1alteredBB

originalBBpart214:                                ; preds = %originalBB1
  ret i32 %32

41:                                               ; preds = %originalBBpart2
  %42 = load i32, i32* @x.73
  %43 = load i32, i32* @y.74
  %44 = sub i32 %42, 1
  %45 = mul i32 %42, %44
  %46 = urem i32 %45, 2
  %47 = icmp eq i32 %46, 0
  %48 = icmp slt i32 %43, 10
  %49 = or i1 %47, %48
  br i1 %49, label %originalBB16, label %originalBB16alteredBB

originalBB16:                                     ; preds = %41, %originalBB16alteredBB
  %50 = getelementptr inbounds [3 x i8], [3 x i8]* @.compVal2, i32 0, i32 0
  %51 = call i32 @strcmp(i8* %50, i8* %0)
  %52 = icmp eq i32 %51, 0
  %53 = load i32, i32* @x.73
  %54 = load i32, i32* @y.74
  %55 = sub i32 %53, 1
  %56 = mul i32 %53, %55
  %57 = urem i32 %56, 2
  %58 = icmp eq i32 %57, 0
  %59 = icmp slt i32 %54, 10
  %60 = or i1 %58, %59
  br i1 %60, label %originalBBpart218, label %originalBB16alteredBB

originalBBpart218:                                ; preds = %originalBB16
  br i1 %52, label %61, label %80

61:                                               ; preds = %originalBBpart218
  %62 = icmp eq i32 %1, -1
  br i1 %62, label %63, label %80

63:                                               ; preds = %61
  %64 = load i32, i32* @x.73
  %65 = load i32, i32* @y.74
  %66 = sub i32 %64, 1
  %67 = mul i32 %64, %66
  %68 = urem i32 %67, 2
  %69 = icmp eq i32 %68, 0
  %70 = icmp slt i32 %65, 10
  %71 = or i1 %69, %70
  br i1 %71, label %originalBB20, label %originalBB20alteredBB

originalBB20:                                     ; preds = %63, %originalBB20alteredBB
  %72 = load i32, i32* @x.73
  %73 = load i32, i32* @y.74
  %74 = sub i32 %72, 1
  %75 = mul i32 %72, %74
  %76 = urem i32 %75, 2
  %77 = icmp eq i32 %76, 0
  %78 = icmp slt i32 %73, 10
  %79 = or i1 %77, %78
  br i1 %79, label %originalBBpart222, label %originalBB20alteredBB

originalBBpart222:                                ; preds = %originalBB20
  ret i32 5

80:                                               ; preds = %61, %originalBBpart218
  %81 = load i32, i32* @x.73
  %82 = load i32, i32* @y.74
  %83 = sub i32 %81, 1
  %84 = mul i32 %81, %83
  %85 = urem i32 %84, 2
  %86 = icmp eq i32 %85, 0
  %87 = icmp slt i32 %82, 10
  %88 = or i1 %86, %87
  br i1 %88, label %originalBB24, label %originalBB24alteredBB

originalBB24:                                     ; preds = %80, %originalBB24alteredBB
  %89 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal1, i32 0, i32 0
  %90 = call i32 @strcmp(i8* %89, i8* %0)
  %91 = icmp eq i32 %90, 0
  %92 = load i32, i32* @x.73
  %93 = load i32, i32* @y.74
  %94 = sub i32 %92, 1
  %95 = mul i32 %92, %94
  %96 = urem i32 %95, 2
  %97 = icmp eq i32 %96, 0
  %98 = icmp slt i32 %93, 10
  %99 = or i1 %97, %98
  br i1 %99, label %originalBBpart226, label %originalBB24alteredBB

originalBBpart226:                                ; preds = %originalBB24
  br i1 %91, label %100, label %119

100:                                              ; preds = %originalBBpart226
  %101 = load i32, i32* @x.73
  %102 = load i32, i32* @y.74
  %103 = sub i32 %101, 1
  %104 = mul i32 %101, %103
  %105 = urem i32 %104, 2
  %106 = icmp eq i32 %105, 0
  %107 = icmp slt i32 %102, 10
  %108 = or i1 %106, %107
  br i1 %108, label %originalBB28, label %originalBB28alteredBB

originalBB28:                                     ; preds = %100, %originalBB28alteredBB
  %109 = icmp eq i32 %1, -1
  %110 = load i32, i32* @x.73
  %111 = load i32, i32* @y.74
  %112 = sub i32 %110, 1
  %113 = mul i32 %110, %112
  %114 = urem i32 %113, 2
  %115 = icmp eq i32 %114, 0
  %116 = icmp slt i32 %111, 10
  %117 = or i1 %115, %116
  br i1 %117, label %originalBBpart230, label %originalBB28alteredBB

originalBBpart230:                                ; preds = %originalBB28
  br i1 %109, label %118, label %119

118:                                              ; preds = %originalBBpart230
  ret i32 3

119:                                              ; preds = %originalBBpart230, %originalBBpart226
  %120 = getelementptr inbounds [3 x i8], [3 x i8]* @.compVal0, i32 0, i32 0
  %121 = call i32 @strcmp(i8* %120, i8* %0)
  %122 = icmp eq i32 %121, 0
  br i1 %122, label %123, label %158

123:                                              ; preds = %119
  %124 = load i32, i32* @x.73
  %125 = load i32, i32* @y.74
  %126 = sub i32 %124, 1
  %127 = mul i32 %124, %126
  %128 = urem i32 %127, 2
  %129 = icmp eq i32 %128, 0
  %130 = icmp slt i32 %125, 10
  %131 = or i1 %129, %130
  br i1 %131, label %originalBB32, label %originalBB32alteredBB

originalBB32:                                     ; preds = %123, %originalBB32alteredBB
  %132 = icmp eq i32 %1, -1
  %133 = load i32, i32* @x.73
  %134 = load i32, i32* @y.74
  %135 = sub i32 %133, 1
  %136 = mul i32 %133, %135
  %137 = urem i32 %136, 2
  %138 = icmp eq i32 %137, 0
  %139 = icmp slt i32 %134, 10
  %140 = or i1 %138, %139
  br i1 %140, label %originalBBpart234, label %originalBB32alteredBB

originalBBpart234:                                ; preds = %originalBB32
  br i1 %132, label %141, label %158

141:                                              ; preds = %originalBBpart234
  %142 = load i32, i32* @x.73
  %143 = load i32, i32* @y.74
  %144 = sub i32 %142, 1
  %145 = mul i32 %142, %144
  %146 = urem i32 %145, 2
  %147 = icmp eq i32 %146, 0
  %148 = icmp slt i32 %143, 10
  %149 = or i1 %147, %148
  br i1 %149, label %originalBB36, label %originalBB36alteredBB

originalBB36:                                     ; preds = %141, %originalBB36alteredBB
  %150 = load i32, i32* @x.73
  %151 = load i32, i32* @y.74
  %152 = sub i32 %150, 1
  %153 = mul i32 %150, %152
  %154 = urem i32 %153, 2
  %155 = icmp eq i32 %154, 0
  %156 = icmp slt i32 %151, 10
  %157 = or i1 %155, %156
  br i1 %157, label %originalBBpart238, label %originalBB36alteredBB

originalBBpart238:                                ; preds = %originalBB36
  ret i32 3

158:                                              ; preds = %originalBBpart234, %119
  %159 = getelementptr inbounds [3 x i8], [3 x i8]* @.compVal0, i32 0, i32 0
  %160 = call i32 @strcmp(i8* %159, i8* %0)
  %161 = icmp eq i32 %160, 0
  br i1 %161, label %162, label %181

162:                                              ; preds = %158
  %163 = load i32, i32* @x.73
  %164 = load i32, i32* @y.74
  %165 = sub i32 %163, 1
  %166 = mul i32 %163, %165
  %167 = urem i32 %166, 2
  %168 = icmp eq i32 %167, 0
  %169 = icmp slt i32 %164, 10
  %170 = or i1 %168, %169
  br i1 %170, label %originalBB40, label %originalBB40alteredBB

originalBB40:                                     ; preds = %162, %originalBB40alteredBB
  %171 = icmp eq i32 %1, 0
  %172 = load i32, i32* @x.73
  %173 = load i32, i32* @y.74
  %174 = sub i32 %172, 1
  %175 = mul i32 %172, %174
  %176 = urem i32 %175, 2
  %177 = icmp eq i32 %176, 0
  %178 = icmp slt i32 %173, 10
  %179 = or i1 %177, %178
  br i1 %179, label %originalBBpart242, label %originalBB40alteredBB

originalBBpart242:                                ; preds = %originalBB40
  br i1 %171, label %180, label %181

180:                                              ; preds = %originalBBpart242
  ret i32 5

181:                                              ; preds = %originalBBpart242, %158
  %182 = load i32, i32* @x.73
  %183 = load i32, i32* @y.74
  %184 = sub i32 %182, 1
  %185 = mul i32 %182, %184
  %186 = urem i32 %185, 2
  %187 = icmp eq i32 %186, 0
  %188 = icmp slt i32 %183, 10
  %189 = or i1 %187, %188
  br i1 %189, label %originalBB44, label %originalBB44alteredBB

originalBB44:                                     ; preds = %181, %originalBB44alteredBB
  call void @srand(i32 %1)
  %190 = call i32 @rand()
  %191 = srem i32 %190, 50000
  %192 = add i32 %191, 2
  %193 = load i32, i32* @x.73
  %194 = load i32, i32* @y.74
  %195 = sub i32 %193, 1
  %196 = mul i32 %193, %195
  %197 = urem i32 %196, 2
  %198 = icmp eq i32 %197, 0
  %199 = icmp slt i32 %194, 10
  %200 = or i1 %198, %199
  br i1 %200, label %originalBBpart263, label %originalBB44alteredBB

originalBBpart263:                                ; preds = %originalBB44
  ret i32 %192

originalBBalteredBB:                              ; preds = %originalBB, %2
  %201 = load i32, i32* @inVal0
  %202 = icmp sgt i32 %201, 0
  br label %originalBB

originalBB1alteredBB:                             ; preds = %originalBB1, %21
  call void @srand(i32 %1)
  %203 = call i32 @rand()
  %_ = shl i32 %203, 50000
  %_2 = sub i32 0, %203
  %gen = add i32 %_2, 50000
  %_3 = sub i32 0, %203
  %gen4 = add i32 %_3, 50000
  %204 = srem i32 %203, 50000
  %_5 = sub i32 0, %204
  %gen6 = add i32 %_5, 2
  %_7 = sub i32 0, %204
  %gen8 = add i32 %_7, 2
  %_9 = sub i32 %204, 2
  %gen10 = mul i32 %_9, 2
  %_11 = sub i32 0, %204
  %gen12 = add i32 %_11, 2
  %205 = add i32 %204, 2
  br label %originalBB1

originalBB16alteredBB:                            ; preds = %originalBB16, %41
  %206 = getelementptr inbounds [3 x i8], [3 x i8]* @.compVal2, i32 0, i32 0
  %207 = call i32 @strcmp(i8* %206, i8* %0)
  %208 = icmp eq i32 %207, 0
  br label %originalBB16

originalBB20alteredBB:                            ; preds = %originalBB20, %63
  br label %originalBB20

originalBB24alteredBB:                            ; preds = %originalBB24, %80
  %209 = getelementptr inbounds [4 x i8], [4 x i8]* @.compVal1, i32 0, i32 0
  %210 = call i32 @strcmp(i8* %209, i8* %0)
  %211 = icmp eq i32 %210, 0
  br label %originalBB24

originalBB28alteredBB:                            ; preds = %originalBB28, %100
  %212 = icmp eq i32 %1, -1
  br label %originalBB28

originalBB32alteredBB:                            ; preds = %originalBB32, %123
  %213 = icmp eq i32 %1, -1
  br label %originalBB32

originalBB36alteredBB:                            ; preds = %originalBB36, %141
  br label %originalBB36

originalBB40alteredBB:                            ; preds = %originalBB40, %162
  %214 = icmp eq i32 %1, 0
  br label %originalBB40

originalBB44alteredBB:                            ; preds = %originalBB44, %181
  call void @srand(i32 %1)
  %215 = call i32 @rand()
  %_45 = shl i32 %215, 50000
  %_46 = sub i32 %215, 50000
  %gen47 = mul i32 %_46, 50000
  %_48 = sub i32 %215, 50000
  %gen49 = mul i32 %_48, 50000
  %_50 = shl i32 %215, 50000
  %_51 = shl i32 %215, 50000
  %_52 = sub i32 0, %215
  %gen53 = add i32 %_52, 50000
  %216 = srem i32 %215, 50000
  %_54 = shl i32 %216, 2
  %_55 = sub i32 0, %216
  %gen56 = add i32 %_55, 2
  %_57 = sub i32 %216, 2
  %gen58 = mul i32 %_57, 2
  %_59 = sub i32 %216, 2
  %gen60 = mul i32 %_59, 2
  %_61 = shl i32 %216, 2
  %217 = add i32 %216, 2
  br label %originalBB44
}

declare void @srand(i32)

declare i32 @rand()

attributes #0 = { noinline noreturn nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { argmemonly nounwind }
attributes #7 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #9 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #10 = { nounwind }
attributes #11 = { noinline nounwind optnone readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #12 = { noreturn nounwind }
attributes #13 = { nounwind readonly }
attributes #14 = { nounwind readnone }
attributes #15 = { noreturn }

!llvm.dbg.cu = !{!10, !47, !52, !57, !65, !72, !79, !151, !144, !154, !157, !159, !162, !168, !170, !172, !174, !176, !178, !180, !182}
!llvm.ident = !{!184, !184, !184, !184, !184, !184, !184, !184, !184, !184, !184, !184, !184, !184, !184, !184, !184, !184, !184, !184, !184}
!llvm.module.flags = !{!185, !186, !187, !188, !189}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "unknown", scope: !2, file: !3, line: 262, type: !42, isLocal: true, isDefinition: true)
!2 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 260, type: !4, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !10, retainedNodes: !11)
!3 = !DIFile(filename: "src/uname.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!4 = !DISubroutineType(types: !5)
!5 = !{!6, !6, !7}
!6 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!7 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64)
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9, size: 64)
!9 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!10 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !12, globals: !14, nameTableKind: None)
!11 = !{}
!12 = !{!8, !13}
!13 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!14 = !{!0, !15, !31, !36}
!15 = !DIGlobalVariableExpression(var: !16, expr: !DIExpression())
!16 = distinct !DIGlobalVariable(name: "arch_long_options", scope: !10, file: !3, line: 107, type: !17, isLocal: true, isDefinition: true)
!17 = !DICompositeType(tag: DW_TAG_array_type, baseType: !18, size: 768, elements: !29)
!18 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !19)
!19 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !20, line: 50, size: 256, elements: !21)
!20 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/getopt_ext.h", directory: "")
!21 = !{!22, !25, !26, !28}
!22 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !19, file: !20, line: 52, baseType: !23, size: 64)
!23 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !24, size: 64)
!24 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !9)
!25 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !19, file: !20, line: 55, baseType: !6, size: 32, offset: 64)
!26 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !19, file: !20, line: 56, baseType: !27, size: 64, offset: 128)
!27 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6, size: 64)
!28 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !19, file: !20, line: 57, baseType: !6, size: 32, offset: 192)
!29 = !{!30}
!30 = !DISubrange(count: 3)
!31 = !DIGlobalVariableExpression(var: !32, expr: !DIExpression())
!32 = distinct !DIGlobalVariable(name: "uname_long_options", scope: !10, file: !3, line: 89, type: !33, isLocal: true, isDefinition: true)
!33 = !DICompositeType(tag: DW_TAG_array_type, baseType: !18, size: 3584, elements: !34)
!34 = !{!35}
!35 = !DISubrange(count: 14)
!36 = !DIGlobalVariableExpression(var: !37, expr: !DIExpression())
!37 = distinct !DIGlobalVariable(name: "printed", scope: !38, file: !3, line: 163, type: !41, isLocal: true, isDefinition: true)
!38 = distinct !DISubprogram(name: "print_element", scope: !3, file: !3, line: 161, type: !39, scopeLine: 162, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !10, retainedNodes: !11)
!39 = !DISubroutineType(types: !40)
!40 = !{null, !23}
!41 = !DIBasicType(name: "_Bool", size: 8, encoding: DW_ATE_boolean)
!42 = !DICompositeType(tag: DW_TAG_array_type, baseType: !24, size: 64, elements: !43)
!43 = !{!44}
!44 = !DISubrange(count: 8)
!45 = !DIGlobalVariableExpression(var: !46, expr: !DIExpression())
!46 = distinct !DIGlobalVariable(name: "uname_mode", scope: !47, file: !48, line: 2, type: !6, isLocal: false, isDefinition: true)
!47 = distinct !DICompileUnit(language: DW_LANG_C99, file: !48, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, globals: !49, nameTableKind: None)
!48 = !DIFile(filename: "src/uname-uname.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!49 = !{!45}
!50 = !DIGlobalVariableExpression(var: !51, expr: !DIExpression())
!51 = distinct !DIGlobalVariable(name: "Version", scope: !52, file: !53, line: 2, type: !23, isLocal: false, isDefinition: true)
!52 = distinct !DICompileUnit(language: DW_LANG_C99, file: !53, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, globals: !54, nameTableKind: None)
!53 = !DIFile(filename: "src/version.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!54 = !{!50}
!55 = !DIGlobalVariableExpression(var: !56, expr: !DIExpression())
!56 = distinct !DIGlobalVariable(name: "ignore_EPIPE", scope: !57, file: !62, line: 56, type: !41, isLocal: true, isDefinition: true)
!57 = distinct !DICompileUnit(language: DW_LANG_C99, file: !58, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, globals: !59, nameTableKind: None)
!58 = !DIFile(filename: "./lib/closeout.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!59 = !{!60, !55}
!60 = !DIGlobalVariableExpression(var: !61, expr: !DIExpression())
!61 = distinct !DIGlobalVariable(name: "file_name", scope: !57, file: !62, line: 46, type: !23, isLocal: true, isDefinition: true)
!62 = !DIFile(filename: "lib/closeout.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!63 = !DIGlobalVariableExpression(var: !64, expr: !DIExpression())
!64 = distinct !DIGlobalVariable(name: "exit_failure", scope: !65, file: !68, line: 24, type: !69, isLocal: false, isDefinition: true)
!65 = distinct !DICompileUnit(language: DW_LANG_C99, file: !66, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, globals: !67, nameTableKind: None)
!66 = !DIFile(filename: "./lib/exitfail.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!67 = !{!63}
!68 = !DIFile(filename: "lib/exitfail.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!69 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !6)
!70 = !DIGlobalVariableExpression(var: !71, expr: !DIExpression())
!71 = distinct !DIGlobalVariable(name: "program_name", scope: !72, file: !76, line: 33, type: !23, isLocal: false, isDefinition: true)
!72 = distinct !DICompileUnit(language: DW_LANG_C99, file: !73, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !74, globals: !75, nameTableKind: None)
!73 = !DIFile(filename: "./lib/progname.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!74 = !{!13, !8}
!75 = !{!70}
!76 = !DIFile(filename: "lib/progname.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!77 = !DIGlobalVariableExpression(var: !78, expr: !DIExpression())
!78 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !79, file: !105, line: 116, type: !118, isLocal: true, isDefinition: true)
!79 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !102, nameTableKind: None)
!80 = !DIFile(filename: "./lib/quotearg.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!81 = !{!82}
!82 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "quoting_style", file: !83, line: 32, baseType: !84, size: 32, elements: !85)
!83 = !DIFile(filename: "./lib/quotearg.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!84 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!85 = !{!86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96}
!86 = !DIEnumerator(name: "literal_quoting_style", value: 0, isUnsigned: true)
!87 = !DIEnumerator(name: "shell_quoting_style", value: 1, isUnsigned: true)
!88 = !DIEnumerator(name: "shell_always_quoting_style", value: 2, isUnsigned: true)
!89 = !DIEnumerator(name: "shell_escape_quoting_style", value: 3, isUnsigned: true)
!90 = !DIEnumerator(name: "shell_escape_always_quoting_style", value: 4, isUnsigned: true)
!91 = !DIEnumerator(name: "c_quoting_style", value: 5, isUnsigned: true)
!92 = !DIEnumerator(name: "c_maybe_quoting_style", value: 6, isUnsigned: true)
!93 = !DIEnumerator(name: "escape_quoting_style", value: 7, isUnsigned: true)
!94 = !DIEnumerator(name: "locale_quoting_style", value: 8, isUnsigned: true)
!95 = !DIEnumerator(name: "clocale_quoting_style", value: 9, isUnsigned: true)
!96 = !DIEnumerator(name: "custom_quoting_style", value: 10, isUnsigned: true)
!97 = !{!6, !98, !99}
!98 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!99 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !100, line: 46, baseType: !101)
!100 = !DIFile(filename: "/usr/lib/llvm-9/lib/clang/9.0.1/include/stddef.h", directory: "")
!101 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!102 = !{!103, !110, !116, !77, !126, !131, !138, !140}
!103 = !DIGlobalVariableExpression(var: !104, expr: !DIExpression())
!104 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !79, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!105 = !DIFile(filename: "lib/quotearg.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!106 = !DICompositeType(tag: DW_TAG_array_type, baseType: !107, size: 704, elements: !108)
!107 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !23)
!108 = !{!109}
!109 = !DISubrange(count: 11)
!110 = !DIGlobalVariableExpression(var: !111, expr: !DIExpression())
!111 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !79, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!112 = !DICompositeType(tag: DW_TAG_array_type, baseType: !113, size: 320, elements: !114)
!113 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !82)
!114 = !{!115}
!115 = !DISubrange(count: 10)
!116 = !DIGlobalVariableExpression(var: !117, expr: !DIExpression())
!117 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !79, file: !105, line: 1052, type: !118, isLocal: false, isDefinition: true)
!118 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !119)
!119 = !{!120, !121, !122, !124, !125}
!120 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !118, file: !105, line: 68, baseType: !82, size: 32)
!121 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !118, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!122 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !118, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!123 = !DICompositeType(tag: DW_TAG_array_type, baseType: !84, size: 256, elements: !43)
!124 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !118, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!125 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !118, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!126 = !DIGlobalVariableExpression(var: !127, expr: !DIExpression())
!127 = distinct !DIGlobalVariable(name: "slot0", scope: !79, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!128 = !DICompositeType(tag: DW_TAG_array_type, baseType: !9, size: 2048, elements: !129)
!129 = !{!130}
!130 = !DISubrange(count: 256)
!131 = !DIGlobalVariableExpression(var: !132, expr: !DIExpression())
!132 = distinct !DIGlobalVariable(name: "slotvec", scope: !79, file: !105, line: 845, type: !133, isLocal: true, isDefinition: true)
!133 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !134, size: 64)
!134 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !135)
!135 = !{!136, !137}
!136 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !134, file: !105, line: 836, baseType: !99, size: 64)
!137 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !134, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!138 = !DIGlobalVariableExpression(var: !139, expr: !DIExpression())
!139 = distinct !DIGlobalVariable(name: "nslots", scope: !79, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!140 = !DIGlobalVariableExpression(var: !141, expr: !DIExpression())
!141 = distinct !DIGlobalVariable(name: "slotvec0", scope: !79, file: !105, line: 844, type: !134, isLocal: true, isDefinition: true)
!142 = !DIGlobalVariableExpression(var: !143, expr: !DIExpression())
!143 = distinct !DIGlobalVariable(name: "version_etc_copyright", scope: !144, file: !147, line: 26, type: !148, isLocal: false, isDefinition: true)
!144 = distinct !DICompileUnit(language: DW_LANG_C99, file: !145, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, globals: !146, nameTableKind: None)
!145 = !DIFile(filename: "./lib/version-etc-fsf.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!146 = !{!142}
!147 = !DIFile(filename: "lib/version-etc-fsf.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!148 = !DICompositeType(tag: DW_TAG_array_type, baseType: !24, size: 376, elements: !149)
!149 = !{!150}
!150 = !DISubrange(count: 47)
!151 = distinct !DICompileUnit(language: DW_LANG_C99, file: !152, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!152 = !DIFile(filename: "./lib/version-etc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!153 = !{!13}
!154 = distinct !DICompileUnit(language: DW_LANG_C99, file: !155, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !156, nameTableKind: None)
!155 = !DIFile(filename: "./lib/xmalloc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!156 = !{!99, !8, !13}
!157 = distinct !DICompileUnit(language: DW_LANG_C99, file: !158, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, nameTableKind: None)
!158 = !DIFile(filename: "./lib/xalloc-die.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!159 = distinct !DICompileUnit(language: DW_LANG_C99, file: !160, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !161, nameTableKind: None)
!160 = !DIFile(filename: "./lib/mbrtowc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!161 = !{!99}
!162 = distinct !DICompileUnit(language: DW_LANG_C99, file: !163, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !164, nameTableKind: None)
!163 = !DIFile(filename: "./lib/c-strcasecmp.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!164 = !{!165}
!165 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !166, size: 64)
!166 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !167)
!167 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!168 = distinct !DICompileUnit(language: DW_LANG_C99, file: !169, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, nameTableKind: None)
!169 = !DIFile(filename: "./lib/close-stream.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!170 = distinct !DICompileUnit(language: DW_LANG_C99, file: !171, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, nameTableKind: None)
!171 = !DIFile(filename: "./lib/hard-locale.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!172 = distinct !DICompileUnit(language: DW_LANG_C99, file: !173, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!173 = !DIFile(filename: "./lib/localcharset.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!174 = distinct !DICompileUnit(language: DW_LANG_C99, file: !175, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!175 = !DIFile(filename: "./lib/setlocale_null.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!176 = distinct !DICompileUnit(language: DW_LANG_C99, file: !177, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, nameTableKind: None)
!177 = !DIFile(filename: "./lib/fclose.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!178 = distinct !DICompileUnit(language: DW_LANG_C99, file: !179, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!179 = !DIFile(filename: "./lib/fflush.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!180 = distinct !DICompileUnit(language: DW_LANG_C99, file: !181, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!181 = !DIFile(filename: "./lib/fseeko.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!182 = distinct !DICompileUnit(language: DW_LANG_C99, file: !183, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, nameTableKind: None)
!183 = !DIFile(filename: "./lib/c-ctype.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!184 = !{!"clang version 9.0.1-12 "}
!185 = !{i32 2, !"Dwarf Version", i32 4}
!186 = !{i32 2, !"Debug Info Version", i32 3}
!187 = !{i32 1, !"wchar_size", i32 4}
!188 = !{i32 1, !"ThinLTO", i32 0}
!189 = !{i32 1, !"EnableSplitLTOUnit", i32 0}
!190 = distinct !DISubprogram(name: "usage", scope: !3, file: !3, line: 115, type: !191, scopeLine: 116, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !10, retainedNodes: !11)
!191 = !DISubroutineType(types: !192)
!192 = !{null, !6}
!193 = !DILocalVariable(name: "status", arg: 1, scope: !190, file: !3, line: 115, type: !6)
!194 = !DILocation(line: 115, column: 12, scope: !190)
!195 = !DILocation(line: 117, column: 7, scope: !196)
!196 = distinct !DILexicalBlock(scope: !190, file: !3, line: 117, column: 7)
!197 = !DILocation(line: 117, column: 14, scope: !196)
!198 = !DILocation(line: 117, column: 7, scope: !190)
!199 = !DILocation(line: 118, column: 5, scope: !196)
!200 = !DILocation(line: 118, column: 5, scope: !201)
!201 = distinct !DILexicalBlock(scope: !196, file: !3, line: 118, column: 5)
!202 = !DILocation(line: 121, column: 15, scope: !203)
!203 = distinct !DILexicalBlock(scope: !196, file: !3, line: 120, column: 5)
!204 = !DILocation(line: 121, column: 45, scope: !203)
!205 = !DILocation(line: 121, column: 7, scope: !203)
!206 = !DILocation(line: 123, column: 11, scope: !207)
!207 = distinct !DILexicalBlock(scope: !203, file: !3, line: 123, column: 11)
!208 = !DILocation(line: 123, column: 22, scope: !207)
!209 = !DILocation(line: 123, column: 11, scope: !203)
!210 = !DILocation(line: 125, column: 11, scope: !211)
!211 = distinct !DILexicalBlock(scope: !207, file: !3, line: 124, column: 9)
!212 = !DILocation(line: 134, column: 11, scope: !211)
!213 = !DILocation(line: 141, column: 9, scope: !211)
!214 = !DILocation(line: 144, column: 11, scope: !215)
!215 = distinct !DILexicalBlock(scope: !207, file: !3, line: 143, column: 9)
!216 = !DILocation(line: 150, column: 7, scope: !203)
!217 = !DILocation(line: 151, column: 7, scope: !203)
!218 = !DILocation(line: 152, column: 28, scope: !203)
!219 = !DILocation(line: 152, column: 7, scope: !203)
!220 = !DILocation(line: 154, column: 9, scope: !190)
!221 = !DILocation(line: 154, column: 3, scope: !190)
!222 = !DILocalVariable(name: "status", arg: 1, scope: !223, file: !3, line: 115, type: !6)
!223 = distinct !DISubprogram(name: "usage", scope: !3, file: !3, line: 115, type: !191, scopeLine: 116, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !224, retainedNodes: !11)
!224 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !12, globals: !225, nameTableKind: None)
!225 = !{!226, !229, !239, !242}
!226 = !DIGlobalVariableExpression(var: !227, expr: !DIExpression())
!227 = distinct !DIGlobalVariable(name: "unknown", scope: !228, file: !3, line: 262, type: !42, isLocal: true, isDefinition: true)
!228 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 260, type: !4, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !224, retainedNodes: !11)
!229 = !DIGlobalVariableExpression(var: !230, expr: !DIExpression())
!230 = distinct !DIGlobalVariable(name: "arch_long_options", scope: !224, file: !3, line: 107, type: !231, isLocal: true, isDefinition: true)
!231 = !DICompositeType(tag: DW_TAG_array_type, baseType: !232, size: 768, elements: !29)
!232 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !233)
!233 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !20, line: 50, size: 256, elements: !234)
!234 = !{!235, !236, !237, !238}
!235 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !233, file: !20, line: 52, baseType: !23, size: 64)
!236 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !233, file: !20, line: 55, baseType: !6, size: 32, offset: 64)
!237 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !233, file: !20, line: 56, baseType: !27, size: 64, offset: 128)
!238 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !233, file: !20, line: 57, baseType: !6, size: 32, offset: 192)
!239 = !DIGlobalVariableExpression(var: !240, expr: !DIExpression())
!240 = distinct !DIGlobalVariable(name: "uname_long_options", scope: !224, file: !3, line: 89, type: !241, isLocal: true, isDefinition: true)
!241 = !DICompositeType(tag: DW_TAG_array_type, baseType: !232, size: 3584, elements: !34)
!242 = !DIGlobalVariableExpression(var: !243, expr: !DIExpression())
!243 = distinct !DIGlobalVariable(name: "printed", scope: !244, file: !3, line: 163, type: !41, isLocal: true, isDefinition: true)
!244 = distinct !DISubprogram(name: "print_element", scope: !3, file: !3, line: 161, type: !39, scopeLine: 162, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !224, retainedNodes: !11)
!245 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !246, file: !246, line: 634, type: !39, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !10, retainedNodes: !11)
!246 = !DIFile(filename: "src/system.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!247 = !DILocalVariable(name: "program", arg: 1, scope: !245, file: !246, line: 634, type: !23)
!248 = !DILocation(line: 634, column: 34, scope: !245)
!249 = !DILocalVariable(name: "infomap", scope: !245, file: !246, line: 636, type: !250)
!250 = !DICompositeType(tag: DW_TAG_array_type, baseType: !251, size: 896, elements: !256)
!251 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !252)
!252 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "infomap", scope: !245, file: !246, line: 636, size: 128, elements: !253)
!253 = !{!254, !255}
!254 = !DIDerivedType(tag: DW_TAG_member, name: "program", scope: !252, file: !246, line: 636, baseType: !23, size: 64)
!255 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !252, file: !246, line: 636, baseType: !23, size: 64, offset: 64)
!256 = !{!257}
!257 = !DISubrange(count: 7)
!258 = !DILocation(line: 636, column: 67, scope: !245)
!259 = !DILocalVariable(name: "node", scope: !245, file: !246, line: 646, type: !23)
!260 = !DILocation(line: 646, column: 15, scope: !245)
!261 = !DILocation(line: 646, column: 22, scope: !245)
!262 = !DILocalVariable(name: "map_prog", scope: !245, file: !246, line: 647, type: !263)
!263 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !251, size: 64)
!264 = !DILocation(line: 647, column: 25, scope: !245)
!265 = !DILocation(line: 647, column: 36, scope: !245)
!266 = !DILocation(line: 649, column: 3, scope: !245)
!267 = !DILocation(line: 649, column: 10, scope: !245)
!268 = !DILocation(line: 649, column: 20, scope: !245)
!269 = !DILocation(line: 649, column: 28, scope: !245)
!270 = !DILocation(line: 649, column: 33, scope: !245)
!271 = !DILocation(line: 649, column: 31, scope: !245)
!272 = !DILocation(line: 0, scope: !245)
!273 = !DILocation(line: 650, column: 13, scope: !245)
!274 = distinct !{!274, !266, !273}
!275 = !DILocation(line: 652, column: 7, scope: !276)
!276 = distinct !DILexicalBlock(scope: !245, file: !246, line: 652, column: 7)
!277 = !DILocation(line: 652, column: 17, scope: !276)
!278 = !DILocation(line: 652, column: 7, scope: !245)
!279 = !DILocation(line: 653, column: 12, scope: !276)
!280 = !DILocation(line: 653, column: 22, scope: !276)
!281 = !DILocation(line: 653, column: 10, scope: !276)
!282 = !DILocation(line: 653, column: 5, scope: !276)
!283 = !DILocation(line: 655, column: 11, scope: !245)
!284 = !DILocation(line: 655, column: 3, scope: !245)
!285 = !DILocalVariable(name: "lc_messages", scope: !245, file: !246, line: 659, type: !23)
!286 = !DILocation(line: 659, column: 15, scope: !245)
!287 = !DILocation(line: 659, column: 29, scope: !245)
!288 = !DILocation(line: 660, column: 7, scope: !289)
!289 = distinct !DILexicalBlock(scope: !245, file: !246, line: 660, column: 7)
!290 = !DILocation(line: 660, column: 19, scope: !289)
!291 = !DILocation(line: 660, column: 22, scope: !289)
!292 = !DILocation(line: 660, column: 7, scope: !245)
!293 = !DILocation(line: 666, column: 7, scope: !294)
!294 = distinct !DILexicalBlock(scope: !289, file: !246, line: 661, column: 5)
!295 = !DILocation(line: 668, column: 5, scope: !294)
!296 = !DILocation(line: 669, column: 11, scope: !245)
!297 = !DILocation(line: 670, column: 24, scope: !245)
!298 = !DILocation(line: 669, column: 3, scope: !245)
!299 = !DILocation(line: 671, column: 11, scope: !245)
!300 = !DILocation(line: 672, column: 11, scope: !245)
!301 = !DILocation(line: 672, column: 17, scope: !245)
!302 = !DILocation(line: 672, column: 25, scope: !245)
!303 = !DILocation(line: 672, column: 22, scope: !245)
!304 = !DILocation(line: 671, column: 3, scope: !245)
!305 = !DILocation(line: 673, column: 1, scope: !245)
!306 = !DILocalVariable(name: "lc_messages", scope: !307, file: !246, line: 659, type: !23)
!307 = distinct !DISubprogram(name: "emit_ancillary_info", scope: !246, file: !246, line: 634, type: !39, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !308, retainedNodes: !11)
!308 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !12, globals: !309, nameTableKind: None)
!309 = !{!310, !313, !323, !326}
!310 = !DIGlobalVariableExpression(var: !311, expr: !DIExpression())
!311 = distinct !DIGlobalVariable(name: "unknown", scope: !312, file: !3, line: 262, type: !42, isLocal: true, isDefinition: true)
!312 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 260, type: !4, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !308, retainedNodes: !11)
!313 = !DIGlobalVariableExpression(var: !314, expr: !DIExpression())
!314 = distinct !DIGlobalVariable(name: "arch_long_options", scope: !308, file: !3, line: 107, type: !315, isLocal: true, isDefinition: true)
!315 = !DICompositeType(tag: DW_TAG_array_type, baseType: !316, size: 768, elements: !29)
!316 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !317)
!317 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !20, line: 50, size: 256, elements: !318)
!318 = !{!319, !320, !321, !322}
!319 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !317, file: !20, line: 52, baseType: !23, size: 64)
!320 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !317, file: !20, line: 55, baseType: !6, size: 32, offset: 64)
!321 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !317, file: !20, line: 56, baseType: !27, size: 64, offset: 128)
!322 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !317, file: !20, line: 57, baseType: !6, size: 32, offset: 192)
!323 = !DIGlobalVariableExpression(var: !324, expr: !DIExpression())
!324 = distinct !DIGlobalVariable(name: "uname_long_options", scope: !308, file: !3, line: 89, type: !325, isLocal: true, isDefinition: true)
!325 = !DICompositeType(tag: DW_TAG_array_type, baseType: !316, size: 3584, elements: !34)
!326 = !DIGlobalVariableExpression(var: !327, expr: !DIExpression())
!327 = distinct !DIGlobalVariable(name: "printed", scope: !328, file: !3, line: 163, type: !41, isLocal: true, isDefinition: true)
!328 = distinct !DISubprogram(name: "print_element", scope: !3, file: !3, line: 161, type: !39, scopeLine: 162, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !308, retainedNodes: !11)
!329 = !DILocalVariable(name: "argc", arg: 1, scope: !2, file: !3, line: 260, type: !6)
!330 = !DILocation(line: 260, column: 11, scope: !2)
!331 = !DILocalVariable(name: "argv", arg: 2, scope: !2, file: !3, line: 260, type: !7)
!332 = !DILocation(line: 260, column: 24, scope: !2)
!333 = !DILocalVariable(name: "toprint", scope: !2, file: !3, line: 265, type: !84)
!334 = !DILocation(line: 265, column: 16, scope: !2)
!335 = !DILocation(line: 268, column: 21, scope: !2)
!336 = !DILocation(line: 268, column: 3, scope: !2)
!337 = !DILocation(line: 269, column: 3, scope: !2)
!338 = !DILocation(line: 270, column: 3, scope: !2)
!339 = !DILocation(line: 271, column: 3, scope: !2)
!340 = !DILocation(line: 273, column: 3, scope: !2)
!341 = !DILocation(line: 275, column: 30, scope: !2)
!342 = !DILocation(line: 275, column: 36, scope: !2)
!343 = !DILocation(line: 275, column: 13, scope: !2)
!344 = !DILocation(line: 275, column: 11, scope: !2)
!345 = !DILocation(line: 277, column: 7, scope: !346)
!346 = distinct !DILexicalBlock(scope: !2, file: !3, line: 277, column: 7)
!347 = !DILocation(line: 277, column: 15, scope: !346)
!348 = !DILocation(line: 278, column: 13, scope: !346)
!349 = !DILocation(line: 278, column: 5, scope: !346)
!350 = !DILocation(line: 280, column: 7, scope: !351)
!351 = distinct !DILexicalBlock(scope: !2, file: !3, line: 280, column: 7)
!352 = !DILocation(line: 281, column: 8, scope: !351)
!353 = !DILocation(line: 280, column: 7, scope: !2)
!354 = !DILocalVariable(name: "name", scope: !355, file: !3, line: 284, type: !356)
!355 = distinct !DILexicalBlock(scope: !351, file: !3, line: 283, column: 5)
!356 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "utsname", file: !357, line: 48, size: 3120, elements: !358)
!357 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/sys/utsname.h", directory: "")
!358 = !{!359, !363, !364, !365, !366, !367}
!359 = !DIDerivedType(tag: DW_TAG_member, name: "sysname", scope: !356, file: !357, line: 51, baseType: !360, size: 520)
!360 = !DICompositeType(tag: DW_TAG_array_type, baseType: !9, size: 520, elements: !361)
!361 = !{!362}
!362 = !DISubrange(count: 65)
!363 = !DIDerivedType(tag: DW_TAG_member, name: "nodename", scope: !356, file: !357, line: 54, baseType: !360, size: 520, offset: 520)
!364 = !DIDerivedType(tag: DW_TAG_member, name: "release", scope: !356, file: !357, line: 57, baseType: !360, size: 520, offset: 1040)
!365 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !356, file: !357, line: 59, baseType: !360, size: 520, offset: 1560)
!366 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !356, file: !357, line: 62, baseType: !360, size: 520, offset: 2080)
!367 = !DIDerivedType(tag: DW_TAG_member, name: "domainname", scope: !356, file: !357, line: 67, baseType: !360, size: 520, offset: 2600)
!368 = !DILocation(line: 284, column: 22, scope: !355)
!369 = !DILocation(line: 286, column: 11, scope: !370)
!370 = distinct !DILexicalBlock(scope: !355, file: !3, line: 286, column: 11)
!371 = !DILocation(line: 286, column: 25, scope: !370)
!372 = !DILocation(line: 287, column: 9, scope: !370)
!373 = !DILocation(line: 289, column: 11, scope: !374)
!374 = distinct !DILexicalBlock(scope: !355, file: !3, line: 289, column: 11)
!375 = !DILocation(line: 289, column: 19, scope: !374)
!376 = !DILocation(line: 289, column: 11, scope: !355)
!377 = !DILocation(line: 290, column: 29, scope: !374)
!378 = !DILocation(line: 290, column: 24, scope: !374)
!379 = !DILocation(line: 290, column: 9, scope: !374)
!380 = !DILocation(line: 291, column: 11, scope: !381)
!381 = distinct !DILexicalBlock(scope: !355, file: !3, line: 291, column: 11)
!382 = !DILocation(line: 291, column: 19, scope: !381)
!383 = !DILocation(line: 291, column: 11, scope: !355)
!384 = !DILocation(line: 292, column: 29, scope: !381)
!385 = !DILocation(line: 292, column: 24, scope: !381)
!386 = !DILocation(line: 292, column: 9, scope: !381)
!387 = !DILocation(line: 293, column: 11, scope: !388)
!388 = distinct !DILexicalBlock(scope: !355, file: !3, line: 293, column: 11)
!389 = !DILocation(line: 293, column: 19, scope: !388)
!390 = !DILocation(line: 293, column: 11, scope: !355)
!391 = !DILocation(line: 294, column: 29, scope: !388)
!392 = !DILocation(line: 294, column: 24, scope: !388)
!393 = !DILocation(line: 294, column: 9, scope: !388)
!394 = !DILocation(line: 295, column: 11, scope: !395)
!395 = distinct !DILexicalBlock(scope: !355, file: !3, line: 295, column: 11)
!396 = !DILocation(line: 295, column: 19, scope: !395)
!397 = !DILocation(line: 295, column: 11, scope: !355)
!398 = !DILocation(line: 296, column: 29, scope: !395)
!399 = !DILocation(line: 296, column: 24, scope: !395)
!400 = !DILocation(line: 296, column: 9, scope: !395)
!401 = !DILocation(line: 297, column: 11, scope: !402)
!402 = distinct !DILexicalBlock(scope: !355, file: !3, line: 297, column: 11)
!403 = !DILocation(line: 297, column: 19, scope: !402)
!404 = !DILocation(line: 297, column: 11, scope: !355)
!405 = !DILocation(line: 298, column: 29, scope: !402)
!406 = !DILocation(line: 298, column: 24, scope: !402)
!407 = !DILocation(line: 298, column: 9, scope: !402)
!408 = !DILocation(line: 299, column: 5, scope: !355)
!409 = !DILocation(line: 301, column: 7, scope: !410)
!410 = distinct !DILexicalBlock(scope: !2, file: !3, line: 301, column: 7)
!411 = !DILocation(line: 301, column: 15, scope: !410)
!412 = !DILocation(line: 301, column: 7, scope: !2)
!413 = !DILocalVariable(name: "element", scope: !414, file: !3, line: 303, type: !23)
!414 = distinct !DILexicalBlock(scope: !410, file: !3, line: 302, column: 5)
!415 = !DILocation(line: 303, column: 19, scope: !414)
!416 = !DILocation(line: 341, column: 14, scope: !417)
!417 = distinct !DILexicalBlock(scope: !414, file: !3, line: 341, column: 11)
!418 = !DILocation(line: 341, column: 22, scope: !417)
!419 = !DILocation(line: 341, column: 37, scope: !417)
!420 = !DILocation(line: 341, column: 45, scope: !417)
!421 = !DILocation(line: 341, column: 11, scope: !414)
!422 = !DILocation(line: 342, column: 24, scope: !417)
!423 = !DILocation(line: 342, column: 9, scope: !417)
!424 = !DILocation(line: 343, column: 5, scope: !414)
!425 = !DILocation(line: 345, column: 7, scope: !426)
!426 = distinct !DILexicalBlock(scope: !2, file: !3, line: 345, column: 7)
!427 = !DILocation(line: 345, column: 15, scope: !426)
!428 = !DILocation(line: 345, column: 7, scope: !2)
!429 = !DILocalVariable(name: "element", scope: !430, file: !3, line: 347, type: !23)
!430 = distinct !DILexicalBlock(scope: !426, file: !3, line: 346, column: 5)
!431 = !DILocation(line: 347, column: 19, scope: !430)
!432 = !DILocation(line: 366, column: 14, scope: !433)
!433 = distinct !DILexicalBlock(scope: !430, file: !3, line: 366, column: 11)
!434 = !DILocation(line: 366, column: 22, scope: !433)
!435 = !DILocation(line: 366, column: 37, scope: !433)
!436 = !DILocation(line: 366, column: 45, scope: !433)
!437 = !DILocation(line: 366, column: 11, scope: !430)
!438 = !DILocation(line: 367, column: 24, scope: !433)
!439 = !DILocation(line: 367, column: 9, scope: !433)
!440 = !DILocation(line: 368, column: 5, scope: !430)
!441 = !DILocation(line: 370, column: 7, scope: !442)
!442 = distinct !DILexicalBlock(scope: !2, file: !3, line: 370, column: 7)
!443 = !DILocation(line: 370, column: 15, scope: !442)
!444 = !DILocation(line: 370, column: 7, scope: !2)
!445 = !DILocation(line: 371, column: 5, scope: !442)
!446 = !DILocation(line: 373, column: 3, scope: !2)
!447 = !DILocation(line: 375, column: 3, scope: !2)
!448 = !DILocalVariable(name: "argc", arg: 1, scope: !449, file: !3, line: 260, type: !6)
!449 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 260, type: !4, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !450, retainedNodes: !11)
!450 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !12, globals: !451, nameTableKind: None)
!451 = !{!452, !454, !464, !467}
!452 = !DIGlobalVariableExpression(var: !453, expr: !DIExpression())
!453 = distinct !DIGlobalVariable(name: "unknown", scope: !449, file: !3, line: 262, type: !42, isLocal: true, isDefinition: true)
!454 = !DIGlobalVariableExpression(var: !455, expr: !DIExpression())
!455 = distinct !DIGlobalVariable(name: "arch_long_options", scope: !450, file: !3, line: 107, type: !456, isLocal: true, isDefinition: true)
!456 = !DICompositeType(tag: DW_TAG_array_type, baseType: !457, size: 768, elements: !29)
!457 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !458)
!458 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !20, line: 50, size: 256, elements: !459)
!459 = !{!460, !461, !462, !463}
!460 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !458, file: !20, line: 52, baseType: !23, size: 64)
!461 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !458, file: !20, line: 55, baseType: !6, size: 32, offset: 64)
!462 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !458, file: !20, line: 56, baseType: !27, size: 64, offset: 128)
!463 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !458, file: !20, line: 57, baseType: !6, size: 32, offset: 192)
!464 = !DIGlobalVariableExpression(var: !465, expr: !DIExpression())
!465 = distinct !DIGlobalVariable(name: "uname_long_options", scope: !450, file: !3, line: 89, type: !466, isLocal: true, isDefinition: true)
!466 = !DICompositeType(tag: DW_TAG_array_type, baseType: !457, size: 3584, elements: !34)
!467 = !DIGlobalVariableExpression(var: !468, expr: !DIExpression())
!468 = distinct !DIGlobalVariable(name: "printed", scope: !469, file: !3, line: 163, type: !41, isLocal: true, isDefinition: true)
!469 = distinct !DISubprogram(name: "print_element", scope: !3, file: !3, line: 161, type: !39, scopeLine: 162, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !450, retainedNodes: !11)
!470 = !DILocalVariable(name: "argv", arg: 2, scope: !449, file: !3, line: 260, type: !7)
!471 = !DILocalVariable(name: "toprint", scope: !449, file: !3, line: 265, type: !84)
!472 = distinct !DISubprogram(name: "decode_switches", scope: !3, file: !3, line: 175, type: !4, scopeLine: 176, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !10, retainedNodes: !11)
!473 = !DILocalVariable(name: "argc", arg: 1, scope: !472, file: !3, line: 175, type: !6)
!474 = !DILocation(line: 175, column: 22, scope: !472)
!475 = !DILocalVariable(name: "argv", arg: 2, scope: !472, file: !3, line: 175, type: !7)
!476 = !DILocation(line: 175, column: 35, scope: !472)
!477 = !DILocalVariable(name: "c", scope: !472, file: !3, line: 177, type: !6)
!478 = !DILocation(line: 177, column: 7, scope: !472)
!479 = !DILocalVariable(name: "toprint", scope: !472, file: !3, line: 178, type: !84)
!480 = !DILocation(line: 178, column: 16, scope: !472)
!481 = !DILocation(line: 180, column: 7, scope: !482)
!482 = distinct !DILexicalBlock(scope: !472, file: !3, line: 180, column: 7)
!483 = !DILocation(line: 180, column: 18, scope: !482)
!484 = !DILocation(line: 180, column: 7, scope: !472)
!485 = !DILocation(line: 182, column: 7, scope: !486)
!486 = distinct !DILexicalBlock(scope: !482, file: !3, line: 181, column: 5)
!487 = !DILocation(line: 182, column: 32, scope: !486)
!488 = !DILocation(line: 182, column: 38, scope: !486)
!489 = !DILocation(line: 182, column: 19, scope: !486)
!490 = !DILocation(line: 182, column: 17, scope: !486)
!491 = !DILocation(line: 183, column: 58, scope: !486)
!492 = !DILocation(line: 185, column: 19, scope: !493)
!493 = distinct !DILexicalBlock(scope: !486, file: !3, line: 184, column: 9)
!494 = !DILocation(line: 185, column: 11, scope: !493)
!495 = !DILocation(line: 187, column: 13, scope: !496)
!496 = distinct !DILexicalBlock(scope: !493, file: !3, line: 186, column: 13)
!497 = !DILocation(line: 189, column: 13, scope: !496)
!498 = !DILocation(line: 192, column: 15, scope: !496)
!499 = !DILocation(line: 195, column: 15, scope: !486)
!500 = !DILocation(line: 196, column: 5, scope: !486)
!501 = !DILocation(line: 199, column: 7, scope: !502)
!502 = distinct !DILexicalBlock(scope: !482, file: !3, line: 198, column: 5)
!503 = !DILocation(line: 199, column: 32, scope: !502)
!504 = !DILocation(line: 199, column: 38, scope: !502)
!505 = !DILocation(line: 199, column: 19, scope: !502)
!506 = !DILocation(line: 199, column: 17, scope: !502)
!507 = !DILocation(line: 200, column: 59, scope: !502)
!508 = !DILocation(line: 202, column: 19, scope: !509)
!509 = distinct !DILexicalBlock(scope: !502, file: !3, line: 201, column: 9)
!510 = !DILocation(line: 202, column: 11, scope: !509)
!511 = !DILocation(line: 205, column: 23, scope: !512)
!512 = distinct !DILexicalBlock(scope: !509, file: !3, line: 203, column: 13)
!513 = !DILocation(line: 206, column: 15, scope: !512)
!514 = !DILocation(line: 209, column: 23, scope: !512)
!515 = !DILocation(line: 210, column: 15, scope: !512)
!516 = !DILocation(line: 213, column: 23, scope: !512)
!517 = !DILocation(line: 214, column: 15, scope: !512)
!518 = !DILocation(line: 217, column: 23, scope: !512)
!519 = !DILocation(line: 218, column: 15, scope: !512)
!520 = !DILocation(line: 221, column: 23, scope: !512)
!521 = !DILocation(line: 222, column: 15, scope: !512)
!522 = !DILocation(line: 225, column: 23, scope: !512)
!523 = !DILocation(line: 226, column: 15, scope: !512)
!524 = !DILocation(line: 229, column: 23, scope: !512)
!525 = !DILocation(line: 230, column: 15, scope: !512)
!526 = !DILocation(line: 233, column: 23, scope: !512)
!527 = !DILocation(line: 234, column: 15, scope: !512)
!528 = !DILocation(line: 237, column: 23, scope: !512)
!529 = !DILocation(line: 238, column: 15, scope: !512)
!530 = !DILocation(line: 240, column: 13, scope: !512)
!531 = !DILocation(line: 242, column: 13, scope: !512)
!532 = !DILocation(line: 245, column: 15, scope: !512)
!533 = distinct !{!533, !501, !534}
!534 = !DILocation(line: 247, column: 9, scope: !502)
!535 = !DILocation(line: 250, column: 7, scope: !536)
!536 = distinct !DILexicalBlock(scope: !472, file: !3, line: 250, column: 7)
!537 = !DILocation(line: 250, column: 15, scope: !536)
!538 = !DILocation(line: 250, column: 12, scope: !536)
!539 = !DILocation(line: 250, column: 7, scope: !472)
!540 = !DILocation(line: 252, column: 20, scope: !541)
!541 = distinct !DILexicalBlock(scope: !536, file: !3, line: 251, column: 5)
!542 = !DILocation(line: 252, column: 50, scope: !541)
!543 = !DILocation(line: 252, column: 55, scope: !541)
!544 = !DILocation(line: 252, column: 43, scope: !541)
!545 = !DILocation(line: 252, column: 7, scope: !541)
!546 = !DILocation(line: 253, column: 7, scope: !541)
!547 = !DILocation(line: 256, column: 10, scope: !472)
!548 = !DILocation(line: 256, column: 3, scope: !472)
!549 = !DILocalVariable(name: "argc", arg: 1, scope: !550, file: !3, line: 175, type: !6)
!550 = distinct !DISubprogram(name: "decode_switches", scope: !3, file: !3, line: 175, type: !4, scopeLine: 176, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !551, retainedNodes: !11)
!551 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !12, globals: !552, nameTableKind: None)
!552 = !{!553, !556, !566, !569}
!553 = !DIGlobalVariableExpression(var: !554, expr: !DIExpression())
!554 = distinct !DIGlobalVariable(name: "unknown", scope: !555, file: !3, line: 262, type: !42, isLocal: true, isDefinition: true)
!555 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 260, type: !4, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !551, retainedNodes: !11)
!556 = !DIGlobalVariableExpression(var: !557, expr: !DIExpression())
!557 = distinct !DIGlobalVariable(name: "arch_long_options", scope: !551, file: !3, line: 107, type: !558, isLocal: true, isDefinition: true)
!558 = !DICompositeType(tag: DW_TAG_array_type, baseType: !559, size: 768, elements: !29)
!559 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !560)
!560 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !20, line: 50, size: 256, elements: !561)
!561 = !{!562, !563, !564, !565}
!562 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !560, file: !20, line: 52, baseType: !23, size: 64)
!563 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !560, file: !20, line: 55, baseType: !6, size: 32, offset: 64)
!564 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !560, file: !20, line: 56, baseType: !27, size: 64, offset: 128)
!565 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !560, file: !20, line: 57, baseType: !6, size: 32, offset: 192)
!566 = !DIGlobalVariableExpression(var: !567, expr: !DIExpression())
!567 = distinct !DIGlobalVariable(name: "uname_long_options", scope: !551, file: !3, line: 89, type: !568, isLocal: true, isDefinition: true)
!568 = !DICompositeType(tag: DW_TAG_array_type, baseType: !559, size: 3584, elements: !34)
!569 = !DIGlobalVariableExpression(var: !570, expr: !DIExpression())
!570 = distinct !DIGlobalVariable(name: "printed", scope: !571, file: !3, line: 163, type: !41, isLocal: true, isDefinition: true)
!571 = distinct !DISubprogram(name: "print_element", scope: !3, file: !3, line: 161, type: !39, scopeLine: 162, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !551, retainedNodes: !11)
!572 = !DILocalVariable(name: "argv", arg: 2, scope: !550, file: !3, line: 175, type: !7)
!573 = !DILocalVariable(name: "c", scope: !550, file: !3, line: 177, type: !6)
!574 = !DILocalVariable(name: "toprint", scope: !550, file: !3, line: 178, type: !84)
!575 = !DILocalVariable(name: "element", arg: 1, scope: !38, file: !3, line: 161, type: !23)
!576 = !DILocation(line: 161, column: 28, scope: !38)
!577 = !DILocation(line: 164, column: 7, scope: !578)
!578 = distinct !DILexicalBlock(scope: !38, file: !3, line: 164, column: 7)
!579 = !DILocation(line: 164, column: 7, scope: !38)
!580 = !DILocation(line: 165, column: 5, scope: !578)
!581 = !DILocation(line: 166, column: 11, scope: !38)
!582 = !DILocation(line: 167, column: 3, scope: !38)
!583 = !DILocation(line: 168, column: 1, scope: !38)
!584 = !DILocalVariable(name: "element", arg: 1, scope: !585, file: !3, line: 161, type: !23)
!585 = distinct !DISubprogram(name: "print_element", scope: !3, file: !3, line: 161, type: !39, scopeLine: 162, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !586, retainedNodes: !11)
!586 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !12, globals: !587, nameTableKind: None)
!587 = !{!588, !591, !601, !604}
!588 = !DIGlobalVariableExpression(var: !589, expr: !DIExpression())
!589 = distinct !DIGlobalVariable(name: "unknown", scope: !590, file: !3, line: 262, type: !42, isLocal: true, isDefinition: true)
!590 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 260, type: !4, scopeLine: 261, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !586, retainedNodes: !11)
!591 = !DIGlobalVariableExpression(var: !592, expr: !DIExpression())
!592 = distinct !DIGlobalVariable(name: "arch_long_options", scope: !586, file: !3, line: 107, type: !593, isLocal: true, isDefinition: true)
!593 = !DICompositeType(tag: DW_TAG_array_type, baseType: !594, size: 768, elements: !29)
!594 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !595)
!595 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "option", file: !20, line: 50, size: 256, elements: !596)
!596 = !{!597, !598, !599, !600}
!597 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !595, file: !20, line: 52, baseType: !23, size: 64)
!598 = !DIDerivedType(tag: DW_TAG_member, name: "has_arg", scope: !595, file: !20, line: 55, baseType: !6, size: 32, offset: 64)
!599 = !DIDerivedType(tag: DW_TAG_member, name: "flag", scope: !595, file: !20, line: 56, baseType: !27, size: 64, offset: 128)
!600 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !595, file: !20, line: 57, baseType: !6, size: 32, offset: 192)
!601 = !DIGlobalVariableExpression(var: !602, expr: !DIExpression())
!602 = distinct !DIGlobalVariable(name: "uname_long_options", scope: !586, file: !3, line: 89, type: !603, isLocal: true, isDefinition: true)
!603 = !DICompositeType(tag: DW_TAG_array_type, baseType: !594, size: 3584, elements: !34)
!604 = !DIGlobalVariableExpression(var: !605, expr: !DIExpression())
!605 = distinct !DIGlobalVariable(name: "printed", scope: !585, file: !3, line: 163, type: !41, isLocal: true, isDefinition: true)
!606 = distinct !DISubprogram(name: "close_stdout", scope: !62, file: !62, line: 117, type: !607, scopeLine: 118, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !57, retainedNodes: !11)
!607 = !DISubroutineType(types: !608)
!608 = !{null}
!609 = !DILocation(line: 119, column: 21, scope: !610)
!610 = distinct !DILexicalBlock(scope: !606, file: !62, line: 119, column: 7)
!611 = !DILocation(line: 119, column: 7, scope: !610)
!612 = !DILocation(line: 119, column: 29, scope: !610)
!613 = !DILocation(line: 120, column: 7, scope: !610)
!614 = !DILocation(line: 120, column: 12, scope: !610)
!615 = !DILocation(line: 120, column: 25, scope: !610)
!616 = !DILocation(line: 120, column: 28, scope: !610)
!617 = !DILocation(line: 120, column: 34, scope: !610)
!618 = !DILocation(line: 119, column: 7, scope: !606)
!619 = !DILocalVariable(name: "write_error", scope: !620, file: !62, line: 122, type: !23)
!620 = distinct !DILexicalBlock(scope: !610, file: !62, line: 121, column: 5)
!621 = !DILocation(line: 122, column: 19, scope: !620)
!622 = !DILocation(line: 122, column: 33, scope: !620)
!623 = !DILocation(line: 123, column: 11, scope: !624)
!624 = distinct !DILexicalBlock(scope: !620, file: !62, line: 123, column: 11)
!625 = !DILocation(line: 123, column: 11, scope: !620)
!626 = !DILocation(line: 124, column: 19, scope: !624)
!627 = !DILocation(line: 124, column: 52, scope: !624)
!628 = !DILocation(line: 124, column: 36, scope: !624)
!629 = !DILocation(line: 125, column: 16, scope: !624)
!630 = !DILocation(line: 124, column: 9, scope: !624)
!631 = !DILocation(line: 127, column: 19, scope: !624)
!632 = !DILocation(line: 127, column: 32, scope: !624)
!633 = !DILocation(line: 127, column: 9, scope: !624)
!634 = !DILocation(line: 129, column: 14, scope: !620)
!635 = !DILocation(line: 129, column: 7, scope: !620)
!636 = !DILocation(line: 134, column: 42, scope: !637)
!637 = distinct !DILexicalBlock(scope: !606, file: !62, line: 134, column: 7)
!638 = !DILocation(line: 134, column: 28, scope: !637)
!639 = !DILocation(line: 134, column: 50, scope: !637)
!640 = !DILocation(line: 134, column: 7, scope: !606)
!641 = !DILocation(line: 135, column: 12, scope: !637)
!642 = !DILocation(line: 135, column: 5, scope: !637)
!643 = !DILocation(line: 136, column: 1, scope: !606)
!644 = distinct !DISubprogram(name: "set_program_name", scope: !76, file: !76, line: 39, type: !39, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !72, retainedNodes: !11)
!645 = !DILocalVariable(name: "argv0", arg: 1, scope: !644, file: !76, line: 39, type: !23)
!646 = !DILocation(line: 39, column: 31, scope: !644)
!647 = !DILocalVariable(name: "slash", scope: !644, file: !76, line: 46, type: !23)
!648 = !DILocation(line: 46, column: 15, scope: !644)
!649 = !DILocalVariable(name: "base", scope: !644, file: !76, line: 47, type: !23)
!650 = !DILocation(line: 47, column: 15, scope: !644)
!651 = !DILocation(line: 51, column: 7, scope: !652)
!652 = distinct !DILexicalBlock(scope: !644, file: !76, line: 51, column: 7)
!653 = !DILocation(line: 51, column: 13, scope: !652)
!654 = !DILocation(line: 51, column: 7, scope: !644)
!655 = !DILocation(line: 55, column: 14, scope: !656)
!656 = distinct !DILexicalBlock(scope: !652, file: !76, line: 52, column: 5)
!657 = !DILocation(line: 54, column: 7, scope: !656)
!658 = !DILocation(line: 56, column: 7, scope: !656)
!659 = !DILocation(line: 59, column: 20, scope: !644)
!660 = !DILocation(line: 59, column: 11, scope: !644)
!661 = !DILocation(line: 59, column: 9, scope: !644)
!662 = !DILocation(line: 60, column: 11, scope: !644)
!663 = !DILocation(line: 60, column: 17, scope: !644)
!664 = !DILocation(line: 60, column: 27, scope: !644)
!665 = !DILocation(line: 60, column: 33, scope: !644)
!666 = !DILocation(line: 60, column: 39, scope: !644)
!667 = !DILocation(line: 60, column: 8, scope: !644)
!668 = !DILocation(line: 61, column: 7, scope: !669)
!669 = distinct !DILexicalBlock(scope: !644, file: !76, line: 61, column: 7)
!670 = !DILocation(line: 61, column: 14, scope: !669)
!671 = !DILocation(line: 61, column: 12, scope: !669)
!672 = !DILocation(line: 61, column: 20, scope: !669)
!673 = !DILocation(line: 61, column: 25, scope: !669)
!674 = !DILocation(line: 61, column: 37, scope: !669)
!675 = !DILocation(line: 61, column: 42, scope: !669)
!676 = !DILocation(line: 61, column: 28, scope: !669)
!677 = !DILocation(line: 61, column: 61, scope: !669)
!678 = !DILocation(line: 61, column: 7, scope: !644)
!679 = !DILocation(line: 63, column: 15, scope: !680)
!680 = distinct !DILexicalBlock(scope: !669, file: !76, line: 62, column: 5)
!681 = !DILocation(line: 63, column: 13, scope: !680)
!682 = !DILocation(line: 64, column: 20, scope: !683)
!683 = distinct !DILexicalBlock(scope: !680, file: !76, line: 64, column: 11)
!684 = !DILocation(line: 64, column: 11, scope: !683)
!685 = !DILocation(line: 64, column: 36, scope: !683)
!686 = !DILocation(line: 64, column: 11, scope: !680)
!687 = !DILocation(line: 66, column: 19, scope: !688)
!688 = distinct !DILexicalBlock(scope: !683, file: !76, line: 65, column: 9)
!689 = !DILocation(line: 66, column: 24, scope: !688)
!690 = !DILocation(line: 66, column: 17, scope: !688)
!691 = !DILocation(line: 70, column: 52, scope: !688)
!692 = !DILocation(line: 70, column: 41, scope: !688)
!693 = !DILocation(line: 72, column: 9, scope: !688)
!694 = !DILocation(line: 73, column: 5, scope: !680)
!695 = !DILocation(line: 84, column: 18, scope: !644)
!696 = !DILocation(line: 84, column: 16, scope: !644)
!697 = !DILocation(line: 90, column: 38, scope: !644)
!698 = !DILocation(line: 90, column: 27, scope: !644)
!699 = !DILocation(line: 92, column: 1, scope: !644)
!700 = distinct !DISubprogram(name: "set_char_quoting", scope: !105, file: !105, line: 152, type: !701, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !79, retainedNodes: !11)
!701 = !DISubroutineType(types: !702)
!702 = !{!6, !703, !9, !6}
!703 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !118, size: 64)
!704 = !DILocalVariable(name: "o", arg: 1, scope: !700, file: !105, line: 152, type: !703)
!705 = !DILocation(line: 152, column: 43, scope: !700)
!706 = !DILocalVariable(name: "c", arg: 2, scope: !700, file: !105, line: 152, type: !9)
!707 = !DILocation(line: 152, column: 51, scope: !700)
!708 = !DILocalVariable(name: "i", arg: 3, scope: !700, file: !105, line: 152, type: !6)
!709 = !DILocation(line: 152, column: 58, scope: !700)
!710 = !DILocalVariable(name: "uc", scope: !700, file: !105, line: 154, type: !167)
!711 = !DILocation(line: 154, column: 17, scope: !700)
!712 = !DILocation(line: 154, column: 22, scope: !700)
!713 = !DILocalVariable(name: "p", scope: !700, file: !105, line: 155, type: !714)
!714 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !84, size: 64)
!715 = !DILocation(line: 155, column: 17, scope: !700)
!716 = !DILocation(line: 156, column: 6, scope: !700)
!717 = !DILocation(line: 156, column: 10, scope: !700)
!718 = !DILocation(line: 156, column: 41, scope: !700)
!719 = !DILocation(line: 156, column: 5, scope: !700)
!720 = !DILocation(line: 156, column: 59, scope: !700)
!721 = !DILocation(line: 156, column: 62, scope: !700)
!722 = !DILocation(line: 156, column: 57, scope: !700)
!723 = !DILocalVariable(name: "shift", scope: !700, file: !105, line: 157, type: !6)
!724 = !DILocation(line: 157, column: 7, scope: !700)
!725 = !DILocation(line: 157, column: 15, scope: !700)
!726 = !DILocation(line: 157, column: 18, scope: !700)
!727 = !DILocalVariable(name: "r", scope: !700, file: !105, line: 158, type: !6)
!728 = !DILocation(line: 158, column: 7, scope: !700)
!729 = !DILocation(line: 158, column: 13, scope: !700)
!730 = !DILocation(line: 158, column: 12, scope: !700)
!731 = !DILocation(line: 158, column: 18, scope: !700)
!732 = !DILocation(line: 158, column: 15, scope: !700)
!733 = !DILocation(line: 158, column: 25, scope: !700)
!734 = !DILocation(line: 159, column: 11, scope: !700)
!735 = !DILocation(line: 159, column: 13, scope: !700)
!736 = !DILocation(line: 159, column: 20, scope: !700)
!737 = !DILocation(line: 159, column: 18, scope: !700)
!738 = !DILocation(line: 159, column: 26, scope: !700)
!739 = !DILocation(line: 159, column: 23, scope: !700)
!740 = !DILocation(line: 159, column: 4, scope: !700)
!741 = !DILocation(line: 159, column: 6, scope: !700)
!742 = !DILocation(line: 160, column: 10, scope: !700)
!743 = !DILocation(line: 160, column: 3, scope: !700)
!744 = !DILocalVariable(name: "o", arg: 1, scope: !745, file: !105, line: 152, type: !748)
!745 = distinct !DISubprogram(name: "set_char_quoting", scope: !105, file: !105, line: 152, type: !746, scopeLine: 153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !756, retainedNodes: !11)
!746 = !DISubroutineType(types: !747)
!747 = !{!6, !748, !9, !6}
!748 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !749, size: 64)
!749 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !750)
!750 = !{!751, !752, !753, !754, !755}
!751 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !749, file: !105, line: 68, baseType: !82, size: 32)
!752 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !749, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!753 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !749, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!754 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !749, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!755 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !749, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!756 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !757, nameTableKind: None)
!757 = !{!758, !760, !762, !764, !766, !768, !775, !777}
!758 = !DIGlobalVariableExpression(var: !759, expr: !DIExpression())
!759 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !756, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!760 = !DIGlobalVariableExpression(var: !761, expr: !DIExpression())
!761 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !756, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!762 = !DIGlobalVariableExpression(var: !763, expr: !DIExpression())
!763 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !756, file: !105, line: 1052, type: !749, isLocal: false, isDefinition: true)
!764 = !DIGlobalVariableExpression(var: !765, expr: !DIExpression())
!765 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !756, file: !105, line: 116, type: !749, isLocal: true, isDefinition: true)
!766 = !DIGlobalVariableExpression(var: !767, expr: !DIExpression())
!767 = distinct !DIGlobalVariable(name: "slot0", scope: !756, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!768 = !DIGlobalVariableExpression(var: !769, expr: !DIExpression())
!769 = distinct !DIGlobalVariable(name: "slotvec", scope: !756, file: !105, line: 845, type: !770, isLocal: true, isDefinition: true)
!770 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !771, size: 64)
!771 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !772)
!772 = !{!773, !774}
!773 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !771, file: !105, line: 836, baseType: !99, size: 64)
!774 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !771, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!775 = !DIGlobalVariableExpression(var: !776, expr: !DIExpression())
!776 = distinct !DIGlobalVariable(name: "nslots", scope: !756, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!777 = !DIGlobalVariableExpression(var: !778, expr: !DIExpression())
!778 = distinct !DIGlobalVariable(name: "slotvec0", scope: !756, file: !105, line: 844, type: !771, isLocal: true, isDefinition: true)
!779 = !DILocalVariable(name: "c", arg: 2, scope: !745, file: !105, line: 152, type: !9)
!780 = !DILocalVariable(name: "i", arg: 3, scope: !745, file: !105, line: 152, type: !6)
!781 = !DILocalVariable(name: "uc", scope: !745, file: !105, line: 154, type: !167)
!782 = !DILocalVariable(name: "p", scope: !745, file: !105, line: 155, type: !714)
!783 = distinct !DISubprogram(name: "quotearg_char_mem", scope: !105, file: !105, line: 982, type: !784, scopeLine: 983, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !79, retainedNodes: !11)
!784 = !DISubroutineType(types: !785)
!785 = !{!8, !23, !99, !9}
!786 = !DILocalVariable(name: "arg", arg: 1, scope: !783, file: !105, line: 982, type: !23)
!787 = !DILocation(line: 982, column: 32, scope: !783)
!788 = !DILocalVariable(name: "argsize", arg: 2, scope: !783, file: !105, line: 982, type: !99)
!789 = !DILocation(line: 982, column: 44, scope: !783)
!790 = !DILocalVariable(name: "ch", arg: 3, scope: !783, file: !105, line: 982, type: !9)
!791 = !DILocation(line: 982, column: 58, scope: !783)
!792 = !DILocalVariable(name: "options", scope: !783, file: !105, line: 984, type: !118)
!793 = !DILocation(line: 984, column: 26, scope: !783)
!794 = !DILocation(line: 985, column: 13, scope: !783)
!795 = !DILocation(line: 986, column: 31, scope: !783)
!796 = !DILocation(line: 986, column: 3, scope: !783)
!797 = !DILocation(line: 987, column: 33, scope: !783)
!798 = !DILocation(line: 987, column: 38, scope: !783)
!799 = !DILocation(line: 987, column: 10, scope: !783)
!800 = !DILocation(line: 987, column: 3, scope: !783)
!801 = !DILocalVariable(name: "arg", arg: 1, scope: !802, file: !105, line: 982, type: !23)
!802 = distinct !DISubprogram(name: "quotearg_char_mem", scope: !105, file: !105, line: 982, type: !784, scopeLine: 983, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !803, retainedNodes: !11)
!803 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !804, nameTableKind: None)
!804 = !{!805, !807, !809, !818, !820, !822, !829, !831}
!805 = !DIGlobalVariableExpression(var: !806, expr: !DIExpression())
!806 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !803, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!807 = !DIGlobalVariableExpression(var: !808, expr: !DIExpression())
!808 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !803, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!809 = !DIGlobalVariableExpression(var: !810, expr: !DIExpression())
!810 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !803, file: !105, line: 1052, type: !811, isLocal: false, isDefinition: true)
!811 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !812)
!812 = !{!813, !814, !815, !816, !817}
!813 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !811, file: !105, line: 68, baseType: !82, size: 32)
!814 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !811, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!815 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !811, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!816 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !811, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!817 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !811, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!818 = !DIGlobalVariableExpression(var: !819, expr: !DIExpression())
!819 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !803, file: !105, line: 116, type: !811, isLocal: true, isDefinition: true)
!820 = !DIGlobalVariableExpression(var: !821, expr: !DIExpression())
!821 = distinct !DIGlobalVariable(name: "slot0", scope: !803, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!822 = !DIGlobalVariableExpression(var: !823, expr: !DIExpression())
!823 = distinct !DIGlobalVariable(name: "slotvec", scope: !803, file: !105, line: 845, type: !824, isLocal: true, isDefinition: true)
!824 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !825, size: 64)
!825 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !826)
!826 = !{!827, !828}
!827 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !825, file: !105, line: 836, baseType: !99, size: 64)
!828 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !825, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!829 = !DIGlobalVariableExpression(var: !830, expr: !DIExpression())
!830 = distinct !DIGlobalVariable(name: "nslots", scope: !803, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!831 = !DIGlobalVariableExpression(var: !832, expr: !DIExpression())
!832 = distinct !DIGlobalVariable(name: "slotvec0", scope: !803, file: !105, line: 844, type: !825, isLocal: true, isDefinition: true)
!833 = !DILocalVariable(name: "argsize", arg: 2, scope: !802, file: !105, line: 982, type: !99)
!834 = !DILocalVariable(name: "ch", arg: 3, scope: !802, file: !105, line: 982, type: !9)
!835 = !DILocalVariable(name: "options", scope: !802, file: !105, line: 984, type: !811)
!836 = distinct !DISubprogram(name: "quotearg_n_options", scope: !105, file: !105, line: 877, type: !837, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !79, retainedNodes: !11)
!837 = !DISubroutineType(types: !838)
!838 = !{!8, !6, !23, !99, !839}
!839 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !840, size: 64)
!840 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !118)
!841 = !DILocalVariable(name: "n", arg: 1, scope: !836, file: !105, line: 877, type: !6)
!842 = !DILocation(line: 877, column: 25, scope: !836)
!843 = !DILocalVariable(name: "arg", arg: 2, scope: !836, file: !105, line: 877, type: !23)
!844 = !DILocation(line: 877, column: 40, scope: !836)
!845 = !DILocalVariable(name: "argsize", arg: 3, scope: !836, file: !105, line: 877, type: !99)
!846 = !DILocation(line: 877, column: 52, scope: !836)
!847 = !DILocalVariable(name: "options", arg: 4, scope: !836, file: !105, line: 878, type: !839)
!848 = !DILocation(line: 878, column: 51, scope: !836)
!849 = !DILocalVariable(name: "e", scope: !836, file: !105, line: 880, type: !6)
!850 = !DILocation(line: 880, column: 7, scope: !836)
!851 = !DILocation(line: 880, column: 11, scope: !836)
!852 = !DILocalVariable(name: "sv", scope: !836, file: !105, line: 882, type: !133)
!853 = !DILocation(line: 882, column: 19, scope: !836)
!854 = !DILocation(line: 882, column: 24, scope: !836)
!855 = !DILocation(line: 884, column: 7, scope: !856)
!856 = distinct !DILexicalBlock(scope: !836, file: !105, line: 884, column: 7)
!857 = !DILocation(line: 884, column: 9, scope: !856)
!858 = !DILocation(line: 884, column: 7, scope: !836)
!859 = !DILocation(line: 885, column: 5, scope: !856)
!860 = !DILocation(line: 887, column: 7, scope: !861)
!861 = distinct !DILexicalBlock(scope: !836, file: !105, line: 887, column: 7)
!862 = !DILocation(line: 887, column: 17, scope: !861)
!863 = !DILocation(line: 887, column: 14, scope: !861)
!864 = !DILocation(line: 887, column: 7, scope: !836)
!865 = !DILocalVariable(name: "preallocated", scope: !866, file: !105, line: 889, type: !41)
!866 = distinct !DILexicalBlock(scope: !861, file: !105, line: 888, column: 5)
!867 = !DILocation(line: 889, column: 12, scope: !866)
!868 = !DILocation(line: 889, column: 28, scope: !866)
!869 = !DILocation(line: 889, column: 31, scope: !866)
!870 = !DILocalVariable(name: "nmax", scope: !866, file: !105, line: 890, type: !6)
!871 = !DILocation(line: 890, column: 11, scope: !866)
!872 = !DILocation(line: 892, column: 11, scope: !873)
!873 = distinct !DILexicalBlock(scope: !866, file: !105, line: 892, column: 11)
!874 = !DILocation(line: 892, column: 18, scope: !873)
!875 = !DILocation(line: 892, column: 16, scope: !873)
!876 = !DILocation(line: 892, column: 11, scope: !866)
!877 = !DILocation(line: 893, column: 9, scope: !873)
!878 = !DILocation(line: 895, column: 32, scope: !866)
!879 = !DILocation(line: 895, column: 54, scope: !866)
!880 = !DILocation(line: 895, column: 59, scope: !866)
!881 = !DILocation(line: 895, column: 61, scope: !866)
!882 = !DILocation(line: 895, column: 58, scope: !866)
!883 = !DILocation(line: 895, column: 66, scope: !866)
!884 = !DILocation(line: 895, column: 22, scope: !866)
!885 = !DILocation(line: 895, column: 20, scope: !866)
!886 = !DILocation(line: 895, column: 15, scope: !866)
!887 = !DILocation(line: 896, column: 11, scope: !888)
!888 = distinct !DILexicalBlock(scope: !866, file: !105, line: 896, column: 11)
!889 = !DILocation(line: 896, column: 11, scope: !866)
!890 = !DILocation(line: 897, column: 10, scope: !888)
!891 = !DILocation(line: 897, column: 15, scope: !888)
!892 = !DILocation(line: 897, column: 9, scope: !888)
!893 = !DILocation(line: 898, column: 15, scope: !866)
!894 = !DILocation(line: 898, column: 20, scope: !866)
!895 = !DILocation(line: 898, column: 18, scope: !866)
!896 = !DILocation(line: 898, column: 7, scope: !866)
!897 = !DILocation(line: 898, column: 32, scope: !866)
!898 = !DILocation(line: 898, column: 34, scope: !866)
!899 = !DILocation(line: 898, column: 40, scope: !866)
!900 = !DILocation(line: 898, column: 38, scope: !866)
!901 = !DILocation(line: 898, column: 31, scope: !866)
!902 = !DILocation(line: 898, column: 48, scope: !866)
!903 = !DILocation(line: 899, column: 16, scope: !866)
!904 = !DILocation(line: 899, column: 18, scope: !866)
!905 = !DILocation(line: 899, column: 14, scope: !866)
!906 = !DILocation(line: 900, column: 5, scope: !866)
!907 = !DILocalVariable(name: "size", scope: !908, file: !105, line: 903, type: !99)
!908 = distinct !DILexicalBlock(scope: !836, file: !105, line: 902, column: 3)
!909 = !DILocation(line: 903, column: 12, scope: !908)
!910 = !DILocation(line: 903, column: 19, scope: !908)
!911 = !DILocation(line: 903, column: 22, scope: !908)
!912 = !DILocation(line: 903, column: 25, scope: !908)
!913 = !DILocalVariable(name: "val", scope: !908, file: !105, line: 904, type: !8)
!914 = !DILocation(line: 904, column: 11, scope: !908)
!915 = !DILocation(line: 904, column: 17, scope: !908)
!916 = !DILocation(line: 904, column: 20, scope: !908)
!917 = !DILocation(line: 904, column: 23, scope: !908)
!918 = !DILocalVariable(name: "flags", scope: !908, file: !105, line: 906, type: !6)
!919 = !DILocation(line: 906, column: 9, scope: !908)
!920 = !DILocation(line: 906, column: 17, scope: !908)
!921 = !DILocation(line: 906, column: 26, scope: !908)
!922 = !DILocation(line: 906, column: 32, scope: !908)
!923 = !DILocalVariable(name: "qsize", scope: !908, file: !105, line: 907, type: !99)
!924 = !DILocation(line: 907, column: 12, scope: !908)
!925 = !DILocation(line: 907, column: 46, scope: !908)
!926 = !DILocation(line: 907, column: 51, scope: !908)
!927 = !DILocation(line: 907, column: 57, scope: !908)
!928 = !DILocation(line: 907, column: 62, scope: !908)
!929 = !DILocation(line: 908, column: 46, scope: !908)
!930 = !DILocation(line: 908, column: 55, scope: !908)
!931 = !DILocation(line: 908, column: 62, scope: !908)
!932 = !DILocation(line: 909, column: 46, scope: !908)
!933 = !DILocation(line: 909, column: 55, scope: !908)
!934 = !DILocation(line: 910, column: 46, scope: !908)
!935 = !DILocation(line: 910, column: 55, scope: !908)
!936 = !DILocation(line: 911, column: 46, scope: !908)
!937 = !DILocation(line: 911, column: 55, scope: !908)
!938 = !DILocation(line: 907, column: 20, scope: !908)
!939 = !DILocation(line: 913, column: 9, scope: !940)
!940 = distinct !DILexicalBlock(scope: !908, file: !105, line: 913, column: 9)
!941 = !DILocation(line: 913, column: 17, scope: !940)
!942 = !DILocation(line: 913, column: 14, scope: !940)
!943 = !DILocation(line: 913, column: 9, scope: !908)
!944 = !DILocation(line: 915, column: 29, scope: !945)
!945 = distinct !DILexicalBlock(scope: !940, file: !105, line: 914, column: 7)
!946 = !DILocation(line: 915, column: 35, scope: !945)
!947 = !DILocation(line: 915, column: 27, scope: !945)
!948 = !DILocation(line: 915, column: 9, scope: !945)
!949 = !DILocation(line: 915, column: 12, scope: !945)
!950 = !DILocation(line: 915, column: 15, scope: !945)
!951 = !DILocation(line: 915, column: 20, scope: !945)
!952 = !DILocation(line: 916, column: 13, scope: !953)
!953 = distinct !DILexicalBlock(scope: !945, file: !105, line: 916, column: 13)
!954 = !DILocation(line: 916, column: 17, scope: !953)
!955 = !DILocation(line: 916, column: 13, scope: !945)
!956 = !DILocation(line: 917, column: 17, scope: !953)
!957 = !DILocation(line: 917, column: 11, scope: !953)
!958 = !DILocation(line: 918, column: 39, scope: !945)
!959 = !DILocation(line: 918, column: 27, scope: !945)
!960 = !DILocation(line: 918, column: 25, scope: !945)
!961 = !DILocation(line: 918, column: 9, scope: !945)
!962 = !DILocation(line: 918, column: 12, scope: !945)
!963 = !DILocation(line: 918, column: 15, scope: !945)
!964 = !DILocation(line: 918, column: 19, scope: !945)
!965 = !DILocation(line: 919, column: 35, scope: !945)
!966 = !DILocation(line: 919, column: 40, scope: !945)
!967 = !DILocation(line: 919, column: 46, scope: !945)
!968 = !DILocation(line: 919, column: 51, scope: !945)
!969 = !DILocation(line: 919, column: 60, scope: !945)
!970 = !DILocation(line: 919, column: 69, scope: !945)
!971 = !DILocation(line: 920, column: 35, scope: !945)
!972 = !DILocation(line: 920, column: 42, scope: !945)
!973 = !DILocation(line: 920, column: 51, scope: !945)
!974 = !DILocation(line: 921, column: 35, scope: !945)
!975 = !DILocation(line: 921, column: 44, scope: !945)
!976 = !DILocation(line: 922, column: 35, scope: !945)
!977 = !DILocation(line: 922, column: 44, scope: !945)
!978 = !DILocation(line: 919, column: 9, scope: !945)
!979 = !DILocation(line: 923, column: 7, scope: !945)
!980 = !DILocation(line: 925, column: 13, scope: !908)
!981 = !DILocation(line: 925, column: 5, scope: !908)
!982 = !DILocation(line: 925, column: 11, scope: !908)
!983 = !DILocation(line: 926, column: 12, scope: !908)
!984 = !DILocation(line: 926, column: 5, scope: !908)
!985 = !DILocalVariable(name: "n", arg: 1, scope: !986, file: !105, line: 877, type: !6)
!986 = distinct !DISubprogram(name: "quotearg_n_options", scope: !105, file: !105, line: 877, type: !987, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !998, retainedNodes: !11)
!987 = !DISubroutineType(types: !988)
!988 = !{!8, !6, !23, !99, !989}
!989 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !990, size: 64)
!990 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !991)
!991 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !992)
!992 = !{!993, !994, !995, !996, !997}
!993 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !991, file: !105, line: 68, baseType: !82, size: 32)
!994 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !991, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!995 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !991, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!996 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !991, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!997 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !991, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!998 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !999, nameTableKind: None)
!999 = !{!1000, !1002, !1004, !1006, !1008, !1010, !1017, !1019}
!1000 = !DIGlobalVariableExpression(var: !1001, expr: !DIExpression())
!1001 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !998, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!1002 = !DIGlobalVariableExpression(var: !1003, expr: !DIExpression())
!1003 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !998, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!1004 = !DIGlobalVariableExpression(var: !1005, expr: !DIExpression())
!1005 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !998, file: !105, line: 1052, type: !991, isLocal: false, isDefinition: true)
!1006 = !DIGlobalVariableExpression(var: !1007, expr: !DIExpression())
!1007 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !998, file: !105, line: 116, type: !991, isLocal: true, isDefinition: true)
!1008 = !DIGlobalVariableExpression(var: !1009, expr: !DIExpression())
!1009 = distinct !DIGlobalVariable(name: "slot0", scope: !998, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!1010 = !DIGlobalVariableExpression(var: !1011, expr: !DIExpression())
!1011 = distinct !DIGlobalVariable(name: "slotvec", scope: !998, file: !105, line: 845, type: !1012, isLocal: true, isDefinition: true)
!1012 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1013, size: 64)
!1013 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !1014)
!1014 = !{!1015, !1016}
!1015 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1013, file: !105, line: 836, baseType: !99, size: 64)
!1016 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1013, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!1017 = !DIGlobalVariableExpression(var: !1018, expr: !DIExpression())
!1018 = distinct !DIGlobalVariable(name: "nslots", scope: !998, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!1019 = !DIGlobalVariableExpression(var: !1020, expr: !DIExpression())
!1020 = distinct !DIGlobalVariable(name: "slotvec0", scope: !998, file: !105, line: 844, type: !1013, isLocal: true, isDefinition: true)
!1021 = !DILocalVariable(name: "arg", arg: 2, scope: !986, file: !105, line: 877, type: !23)
!1022 = !DILocalVariable(name: "argsize", arg: 3, scope: !986, file: !105, line: 877, type: !99)
!1023 = !DILocalVariable(name: "options", arg: 4, scope: !986, file: !105, line: 878, type: !989)
!1024 = !DILocalVariable(name: "e", scope: !986, file: !105, line: 880, type: !6)
!1025 = !DILocalVariable(name: "sv", scope: !986, file: !105, line: 882, type: !1012)
!1026 = !DILocalVariable(name: "nmax", scope: !1027, file: !105, line: 890, type: !6)
!1027 = distinct !DILexicalBlock(scope: !1028, file: !105, line: 888, column: 5)
!1028 = distinct !DILexicalBlock(scope: !1029, file: !105, line: 887, column: 7)
!1029 = distinct !DISubprogram(name: "quotearg_n_options", scope: !105, file: !105, line: 877, type: !1030, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1041, retainedNodes: !11)
!1030 = !DISubroutineType(types: !1031)
!1031 = !{!8, !6, !23, !99, !1032}
!1032 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1033, size: 64)
!1033 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1034)
!1034 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !1035)
!1035 = !{!1036, !1037, !1038, !1039, !1040}
!1036 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1034, file: !105, line: 68, baseType: !82, size: 32)
!1037 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1034, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!1038 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1034, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!1039 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1034, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!1040 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1034, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!1041 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !1042, nameTableKind: None)
!1042 = !{!1043, !1045, !1047, !1049, !1051, !1053, !1060, !1062}
!1043 = !DIGlobalVariableExpression(var: !1044, expr: !DIExpression())
!1044 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1041, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!1045 = !DIGlobalVariableExpression(var: !1046, expr: !DIExpression())
!1046 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1041, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!1047 = !DIGlobalVariableExpression(var: !1048, expr: !DIExpression())
!1048 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1041, file: !105, line: 1052, type: !1034, isLocal: false, isDefinition: true)
!1049 = !DIGlobalVariableExpression(var: !1050, expr: !DIExpression())
!1050 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1041, file: !105, line: 116, type: !1034, isLocal: true, isDefinition: true)
!1051 = !DIGlobalVariableExpression(var: !1052, expr: !DIExpression())
!1052 = distinct !DIGlobalVariable(name: "slot0", scope: !1041, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!1053 = !DIGlobalVariableExpression(var: !1054, expr: !DIExpression())
!1054 = distinct !DIGlobalVariable(name: "slotvec", scope: !1041, file: !105, line: 845, type: !1055, isLocal: true, isDefinition: true)
!1055 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1056, size: 64)
!1056 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !1057)
!1057 = !{!1058, !1059}
!1058 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1056, file: !105, line: 836, baseType: !99, size: 64)
!1059 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1056, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!1060 = !DIGlobalVariableExpression(var: !1061, expr: !DIExpression())
!1061 = distinct !DIGlobalVariable(name: "nslots", scope: !1041, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!1062 = !DIGlobalVariableExpression(var: !1063, expr: !DIExpression())
!1063 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1041, file: !105, line: 844, type: !1056, isLocal: true, isDefinition: true)
!1064 = !DILocalVariable(name: "val", scope: !1065, file: !105, line: 904, type: !8)
!1065 = distinct !DILexicalBlock(scope: !1066, file: !105, line: 902, column: 3)
!1066 = distinct !DISubprogram(name: "quotearg_n_options", scope: !105, file: !105, line: 877, type: !1067, scopeLine: 879, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1078, retainedNodes: !11)
!1067 = !DISubroutineType(types: !1068)
!1068 = !{!8, !6, !23, !99, !1069}
!1069 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1070, size: 64)
!1070 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1071)
!1071 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !1072)
!1072 = !{!1073, !1074, !1075, !1076, !1077}
!1073 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1071, file: !105, line: 68, baseType: !82, size: 32)
!1074 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1071, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!1075 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1071, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!1076 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1071, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!1077 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1071, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!1078 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !1079, nameTableKind: None)
!1079 = !{!1080, !1082, !1084, !1086, !1088, !1090, !1097, !1099}
!1080 = !DIGlobalVariableExpression(var: !1081, expr: !DIExpression())
!1081 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1078, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!1082 = !DIGlobalVariableExpression(var: !1083, expr: !DIExpression())
!1083 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1078, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!1084 = !DIGlobalVariableExpression(var: !1085, expr: !DIExpression())
!1085 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1078, file: !105, line: 1052, type: !1071, isLocal: false, isDefinition: true)
!1086 = !DIGlobalVariableExpression(var: !1087, expr: !DIExpression())
!1087 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1078, file: !105, line: 116, type: !1071, isLocal: true, isDefinition: true)
!1088 = !DIGlobalVariableExpression(var: !1089, expr: !DIExpression())
!1089 = distinct !DIGlobalVariable(name: "slot0", scope: !1078, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!1090 = !DIGlobalVariableExpression(var: !1091, expr: !DIExpression())
!1091 = distinct !DIGlobalVariable(name: "slotvec", scope: !1078, file: !105, line: 845, type: !1092, isLocal: true, isDefinition: true)
!1092 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1093, size: 64)
!1093 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !1094)
!1094 = !{!1095, !1096}
!1095 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1093, file: !105, line: 836, baseType: !99, size: 64)
!1096 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1093, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!1097 = !DIGlobalVariableExpression(var: !1098, expr: !DIExpression())
!1098 = distinct !DIGlobalVariable(name: "nslots", scope: !1078, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!1099 = !DIGlobalVariableExpression(var: !1100, expr: !DIExpression())
!1100 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1078, file: !105, line: 844, type: !1093, isLocal: true, isDefinition: true)
!1101 = !DILocalVariable(name: "flags", scope: !1065, file: !105, line: 906, type: !6)
!1102 = !DILocalVariable(name: "qsize", scope: !1065, file: !105, line: 907, type: !99)
!1103 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !105, file: !105, line: 256, type: !1104, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !79, retainedNodes: !11)
!1104 = !DISubroutineType(types: !1105)
!1105 = !{!99, !8, !99, !23, !99, !82, !6, !1106, !23, !23}
!1106 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1107, size: 64)
!1107 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !84)
!1108 = !DILocalVariable(name: "buffer", arg: 1, scope: !1103, file: !105, line: 256, type: !8)
!1109 = !DILocation(line: 256, column: 33, scope: !1103)
!1110 = !DILocalVariable(name: "buffersize", arg: 2, scope: !1103, file: !105, line: 256, type: !99)
!1111 = !DILocation(line: 256, column: 48, scope: !1103)
!1112 = !DILocalVariable(name: "arg", arg: 3, scope: !1103, file: !105, line: 257, type: !23)
!1113 = !DILocation(line: 257, column: 39, scope: !1103)
!1114 = !DILocalVariable(name: "argsize", arg: 4, scope: !1103, file: !105, line: 257, type: !99)
!1115 = !DILocation(line: 257, column: 51, scope: !1103)
!1116 = !DILocalVariable(name: "quoting_style", arg: 5, scope: !1103, file: !105, line: 258, type: !82)
!1117 = !DILocation(line: 258, column: 46, scope: !1103)
!1118 = !DILocalVariable(name: "flags", arg: 6, scope: !1103, file: !105, line: 258, type: !6)
!1119 = !DILocation(line: 258, column: 65, scope: !1103)
!1120 = !DILocalVariable(name: "quote_these_too", arg: 7, scope: !1103, file: !105, line: 259, type: !1106)
!1121 = !DILocation(line: 259, column: 47, scope: !1103)
!1122 = !DILocalVariable(name: "left_quote", arg: 8, scope: !1103, file: !105, line: 260, type: !23)
!1123 = !DILocation(line: 260, column: 39, scope: !1103)
!1124 = !DILocalVariable(name: "right_quote", arg: 9, scope: !1103, file: !105, line: 261, type: !23)
!1125 = !DILocation(line: 261, column: 39, scope: !1103)
!1126 = !DILocalVariable(name: "i", scope: !1103, file: !105, line: 263, type: !99)
!1127 = !DILocation(line: 263, column: 10, scope: !1103)
!1128 = !DILocalVariable(name: "len", scope: !1103, file: !105, line: 264, type: !99)
!1129 = !DILocation(line: 264, column: 10, scope: !1103)
!1130 = !DILocalVariable(name: "orig_buffersize", scope: !1103, file: !105, line: 265, type: !99)
!1131 = !DILocation(line: 265, column: 10, scope: !1103)
!1132 = !DILocalVariable(name: "quote_string", scope: !1103, file: !105, line: 266, type: !23)
!1133 = !DILocation(line: 266, column: 15, scope: !1103)
!1134 = !DILocalVariable(name: "quote_string_len", scope: !1103, file: !105, line: 267, type: !99)
!1135 = !DILocation(line: 267, column: 10, scope: !1103)
!1136 = !DILocalVariable(name: "backslash_escapes", scope: !1103, file: !105, line: 268, type: !41)
!1137 = !DILocation(line: 268, column: 8, scope: !1103)
!1138 = !DILocalVariable(name: "unibyte_locale", scope: !1103, file: !105, line: 269, type: !41)
!1139 = !DILocation(line: 269, column: 8, scope: !1103)
!1140 = !DILocation(line: 269, column: 25, scope: !1103)
!1141 = !DILocation(line: 269, column: 36, scope: !1103)
!1142 = !DILocalVariable(name: "elide_outer_quotes", scope: !1103, file: !105, line: 270, type: !41)
!1143 = !DILocation(line: 270, column: 8, scope: !1103)
!1144 = !DILocation(line: 270, column: 30, scope: !1103)
!1145 = !DILocation(line: 270, column: 36, scope: !1103)
!1146 = !DILocation(line: 270, column: 61, scope: !1103)
!1147 = !DILocalVariable(name: "pending_shell_escape_end", scope: !1103, file: !105, line: 271, type: !41)
!1148 = !DILocation(line: 271, column: 8, scope: !1103)
!1149 = !DILocalVariable(name: "encountered_single_quote", scope: !1103, file: !105, line: 272, type: !41)
!1150 = !DILocation(line: 272, column: 8, scope: !1103)
!1151 = !DILocalVariable(name: "all_c_and_shell_quote_compat", scope: !1103, file: !105, line: 273, type: !41)
!1152 = !DILocation(line: 273, column: 8, scope: !1103)
!1153 = !DILocation(line: 273, column: 3, scope: !1103)
!1154 = !DILabel(scope: !1103, name: "process_input", file: !105, line: 314)
!1155 = !DILocation(line: 314, column: 2, scope: !1103)
!1156 = !DILocation(line: 316, column: 11, scope: !1103)
!1157 = !DILocation(line: 316, column: 3, scope: !1103)
!1158 = !DILocation(line: 319, column: 21, scope: !1159)
!1159 = distinct !DILexicalBlock(scope: !1103, file: !105, line: 317, column: 5)
!1160 = !DILocation(line: 320, column: 26, scope: !1159)
!1161 = !DILocation(line: 321, column: 7, scope: !1159)
!1162 = !DILocation(line: 323, column: 12, scope: !1163)
!1163 = distinct !DILexicalBlock(scope: !1159, file: !105, line: 323, column: 11)
!1164 = !DILocation(line: 323, column: 11, scope: !1159)
!1165 = !DILocation(line: 324, column: 9, scope: !1163)
!1166 = !DILocation(line: 324, column: 9, scope: !1167)
!1167 = distinct !DILexicalBlock(scope: !1168, file: !105, line: 324, column: 9)
!1168 = distinct !DILexicalBlock(scope: !1163, file: !105, line: 324, column: 9)
!1169 = !DILocation(line: 324, column: 9, scope: !1168)
!1170 = !DILocation(line: 325, column: 25, scope: !1159)
!1171 = !DILocation(line: 326, column: 20, scope: !1159)
!1172 = !DILocation(line: 327, column: 24, scope: !1159)
!1173 = !DILocation(line: 328, column: 7, scope: !1159)
!1174 = !DILocation(line: 331, column: 25, scope: !1159)
!1175 = !DILocation(line: 332, column: 26, scope: !1159)
!1176 = !DILocation(line: 333, column: 7, scope: !1159)
!1177 = !DILocation(line: 339, column: 13, scope: !1178)
!1178 = distinct !DILexicalBlock(scope: !1179, file: !105, line: 339, column: 13)
!1179 = distinct !DILexicalBlock(scope: !1159, file: !105, line: 338, column: 7)
!1180 = !DILocation(line: 339, column: 27, scope: !1178)
!1181 = !DILocation(line: 339, column: 13, scope: !1179)
!1182 = !DILocation(line: 362, column: 50, scope: !1183)
!1183 = distinct !DILexicalBlock(scope: !1178, file: !105, line: 340, column: 11)
!1184 = !DILocation(line: 362, column: 26, scope: !1183)
!1185 = !DILocation(line: 362, column: 24, scope: !1183)
!1186 = !DILocation(line: 363, column: 51, scope: !1183)
!1187 = !DILocation(line: 363, column: 27, scope: !1183)
!1188 = !DILocation(line: 363, column: 25, scope: !1183)
!1189 = !DILocation(line: 364, column: 11, scope: !1183)
!1190 = !DILocation(line: 365, column: 14, scope: !1191)
!1191 = distinct !DILexicalBlock(scope: !1179, file: !105, line: 365, column: 13)
!1192 = !DILocation(line: 365, column: 13, scope: !1179)
!1193 = !DILocation(line: 366, column: 31, scope: !1194)
!1194 = distinct !DILexicalBlock(scope: !1191, file: !105, line: 366, column: 11)
!1195 = !DILocation(line: 366, column: 29, scope: !1194)
!1196 = !DILocation(line: 366, column: 16, scope: !1194)
!1197 = !DILocation(line: 366, column: 44, scope: !1198)
!1198 = distinct !DILexicalBlock(scope: !1194, file: !105, line: 366, column: 11)
!1199 = !DILocation(line: 366, column: 43, scope: !1198)
!1200 = !DILocation(line: 366, column: 11, scope: !1194)
!1201 = !DILocation(line: 367, column: 13, scope: !1198)
!1202 = !DILocation(line: 367, column: 13, scope: !1203)
!1203 = distinct !DILexicalBlock(scope: !1204, file: !105, line: 367, column: 13)
!1204 = distinct !DILexicalBlock(scope: !1198, file: !105, line: 367, column: 13)
!1205 = !DILocation(line: 367, column: 13, scope: !1204)
!1206 = !DILocation(line: 366, column: 70, scope: !1198)
!1207 = !DILocation(line: 366, column: 11, scope: !1198)
!1208 = distinct !{!1208, !1200, !1209}
!1209 = !DILocation(line: 367, column: 13, scope: !1194)
!1210 = !DILocation(line: 368, column: 27, scope: !1179)
!1211 = !DILocation(line: 369, column: 24, scope: !1179)
!1212 = !DILocation(line: 369, column: 22, scope: !1179)
!1213 = !DILocation(line: 370, column: 36, scope: !1179)
!1214 = !DILocation(line: 370, column: 28, scope: !1179)
!1215 = !DILocation(line: 370, column: 26, scope: !1179)
!1216 = !DILocation(line: 372, column: 7, scope: !1159)
!1217 = !DILocation(line: 375, column: 25, scope: !1159)
!1218 = !DILocation(line: 376, column: 7, scope: !1159)
!1219 = !DILocation(line: 378, column: 26, scope: !1159)
!1220 = !DILocation(line: 379, column: 7, scope: !1159)
!1221 = !DILocation(line: 381, column: 12, scope: !1222)
!1222 = distinct !DILexicalBlock(scope: !1159, file: !105, line: 381, column: 11)
!1223 = !DILocation(line: 381, column: 11, scope: !1159)
!1224 = !DILocation(line: 382, column: 27, scope: !1222)
!1225 = !DILocation(line: 382, column: 9, scope: !1222)
!1226 = !DILocation(line: 383, column: 7, scope: !1159)
!1227 = !DILocation(line: 385, column: 21, scope: !1159)
!1228 = !DILocation(line: 386, column: 12, scope: !1229)
!1229 = distinct !DILexicalBlock(scope: !1159, file: !105, line: 386, column: 11)
!1230 = !DILocation(line: 386, column: 11, scope: !1159)
!1231 = !DILocation(line: 387, column: 9, scope: !1229)
!1232 = !DILocation(line: 387, column: 9, scope: !1233)
!1233 = distinct !DILexicalBlock(scope: !1234, file: !105, line: 387, column: 9)
!1234 = distinct !DILexicalBlock(scope: !1229, file: !105, line: 387, column: 9)
!1235 = !DILocation(line: 387, column: 9, scope: !1234)
!1236 = !DILocation(line: 388, column: 20, scope: !1159)
!1237 = !DILocation(line: 389, column: 24, scope: !1159)
!1238 = !DILocation(line: 390, column: 7, scope: !1159)
!1239 = !DILocation(line: 393, column: 26, scope: !1159)
!1240 = !DILocation(line: 394, column: 7, scope: !1159)
!1241 = !DILocation(line: 397, column: 7, scope: !1159)
!1242 = !DILocation(line: 400, column: 10, scope: !1243)
!1243 = distinct !DILexicalBlock(scope: !1103, file: !105, line: 400, column: 3)
!1244 = !DILocation(line: 400, column: 8, scope: !1243)
!1245 = !DILocation(line: 400, column: 19, scope: !1246)
!1246 = distinct !DILexicalBlock(scope: !1243, file: !105, line: 400, column: 3)
!1247 = !DILocation(line: 400, column: 27, scope: !1246)
!1248 = !DILocation(line: 400, column: 41, scope: !1246)
!1249 = !DILocation(line: 400, column: 45, scope: !1246)
!1250 = !DILocation(line: 400, column: 48, scope: !1246)
!1251 = !DILocation(line: 400, column: 58, scope: !1246)
!1252 = !DILocation(line: 400, column: 63, scope: !1246)
!1253 = !DILocation(line: 400, column: 60, scope: !1246)
!1254 = !DILocation(line: 400, column: 16, scope: !1246)
!1255 = !DILocation(line: 400, column: 3, scope: !1243)
!1256 = !DILocalVariable(name: "c", scope: !1257, file: !105, line: 402, type: !167)
!1257 = distinct !DILexicalBlock(scope: !1246, file: !105, line: 401, column: 5)
!1258 = !DILocation(line: 402, column: 21, scope: !1257)
!1259 = !DILocalVariable(name: "esc", scope: !1257, file: !105, line: 403, type: !167)
!1260 = !DILocation(line: 403, column: 21, scope: !1257)
!1261 = !DILocalVariable(name: "is_right_quote", scope: !1257, file: !105, line: 404, type: !41)
!1262 = !DILocation(line: 404, column: 12, scope: !1257)
!1263 = !DILocalVariable(name: "escaping", scope: !1257, file: !105, line: 405, type: !41)
!1264 = !DILocation(line: 405, column: 12, scope: !1257)
!1265 = !DILocalVariable(name: "c_and_shell_quote_compat", scope: !1257, file: !105, line: 406, type: !41)
!1266 = !DILocation(line: 406, column: 12, scope: !1257)
!1267 = !DILocation(line: 408, column: 11, scope: !1268)
!1268 = distinct !DILexicalBlock(scope: !1257, file: !105, line: 408, column: 11)
!1269 = !DILocation(line: 409, column: 11, scope: !1268)
!1270 = !DILocation(line: 409, column: 14, scope: !1268)
!1271 = !DILocation(line: 409, column: 28, scope: !1268)
!1272 = !DILocation(line: 410, column: 11, scope: !1268)
!1273 = !DILocation(line: 410, column: 14, scope: !1268)
!1274 = !DILocation(line: 411, column: 11, scope: !1268)
!1275 = !DILocation(line: 411, column: 15, scope: !1268)
!1276 = !DILocation(line: 411, column: 19, scope: !1268)
!1277 = !DILocation(line: 411, column: 17, scope: !1268)
!1278 = !DILocation(line: 412, column: 19, scope: !1268)
!1279 = !DILocation(line: 412, column: 27, scope: !1268)
!1280 = !DILocation(line: 412, column: 39, scope: !1268)
!1281 = !DILocation(line: 412, column: 46, scope: !1268)
!1282 = !DILocation(line: 412, column: 44, scope: !1268)
!1283 = !DILocation(line: 416, column: 40, scope: !1268)
!1284 = !DILocation(line: 416, column: 32, scope: !1268)
!1285 = !DILocation(line: 416, column: 30, scope: !1268)
!1286 = !DILocation(line: 416, column: 48, scope: !1268)
!1287 = !DILocation(line: 412, column: 15, scope: !1268)
!1288 = !DILocation(line: 417, column: 11, scope: !1268)
!1289 = !DILocation(line: 417, column: 22, scope: !1268)
!1290 = !DILocation(line: 417, column: 28, scope: !1268)
!1291 = !DILocation(line: 417, column: 26, scope: !1268)
!1292 = !DILocation(line: 417, column: 31, scope: !1268)
!1293 = !DILocation(line: 417, column: 45, scope: !1268)
!1294 = !DILocation(line: 417, column: 14, scope: !1268)
!1295 = !DILocation(line: 417, column: 63, scope: !1268)
!1296 = !DILocation(line: 408, column: 11, scope: !1257)
!1297 = !DILocation(line: 419, column: 15, scope: !1298)
!1298 = distinct !DILexicalBlock(scope: !1299, file: !105, line: 419, column: 15)
!1299 = distinct !DILexicalBlock(scope: !1268, file: !105, line: 418, column: 9)
!1300 = !DILocation(line: 419, column: 15, scope: !1299)
!1301 = !DILocation(line: 420, column: 13, scope: !1298)
!1302 = !DILocation(line: 421, column: 26, scope: !1299)
!1303 = !DILocation(line: 422, column: 9, scope: !1299)
!1304 = !DILocation(line: 424, column: 11, scope: !1257)
!1305 = !DILocation(line: 424, column: 15, scope: !1257)
!1306 = !DILocation(line: 424, column: 9, scope: !1257)
!1307 = !DILocation(line: 425, column: 15, scope: !1257)
!1308 = !DILocation(line: 425, column: 7, scope: !1257)
!1309 = !DILocation(line: 428, column: 15, scope: !1310)
!1310 = distinct !DILexicalBlock(scope: !1311, file: !105, line: 428, column: 15)
!1311 = distinct !DILexicalBlock(scope: !1257, file: !105, line: 426, column: 9)
!1312 = !DILocation(line: 428, column: 15, scope: !1311)
!1313 = !DILocation(line: 430, column: 15, scope: !1314)
!1314 = distinct !DILexicalBlock(scope: !1310, file: !105, line: 429, column: 13)
!1315 = !DILocation(line: 430, column: 15, scope: !1316)
!1316 = distinct !DILexicalBlock(scope: !1317, file: !105, line: 430, column: 15)
!1317 = distinct !DILexicalBlock(scope: !1314, file: !105, line: 430, column: 15)
!1318 = !DILocation(line: 430, column: 15, scope: !1317)
!1319 = !DILocation(line: 430, column: 15, scope: !1320)
!1320 = distinct !DILexicalBlock(scope: !1317, file: !105, line: 430, column: 15)
!1321 = !DILocation(line: 430, column: 15, scope: !1322)
!1322 = distinct !DILexicalBlock(scope: !1320, file: !105, line: 430, column: 15)
!1323 = !DILocation(line: 430, column: 15, scope: !1324)
!1324 = distinct !DILexicalBlock(scope: !1325, file: !105, line: 430, column: 15)
!1325 = distinct !DILexicalBlock(scope: !1322, file: !105, line: 430, column: 15)
!1326 = !DILocation(line: 430, column: 15, scope: !1325)
!1327 = !DILocation(line: 430, column: 15, scope: !1328)
!1328 = distinct !DILexicalBlock(scope: !1329, file: !105, line: 430, column: 15)
!1329 = distinct !DILexicalBlock(scope: !1322, file: !105, line: 430, column: 15)
!1330 = !DILocation(line: 430, column: 15, scope: !1329)
!1331 = !DILocation(line: 430, column: 15, scope: !1332)
!1332 = distinct !DILexicalBlock(scope: !1333, file: !105, line: 430, column: 15)
!1333 = distinct !DILexicalBlock(scope: !1322, file: !105, line: 430, column: 15)
!1334 = !DILocation(line: 430, column: 15, scope: !1333)
!1335 = !DILocation(line: 430, column: 15, scope: !1336)
!1336 = distinct !DILexicalBlock(scope: !1337, file: !105, line: 430, column: 15)
!1337 = distinct !DILexicalBlock(scope: !1317, file: !105, line: 430, column: 15)
!1338 = !DILocation(line: 430, column: 15, scope: !1337)
!1339 = !DILocation(line: 437, column: 19, scope: !1340)
!1340 = distinct !DILexicalBlock(scope: !1314, file: !105, line: 437, column: 19)
!1341 = !DILocation(line: 437, column: 33, scope: !1340)
!1342 = !DILocation(line: 438, column: 19, scope: !1340)
!1343 = !DILocation(line: 438, column: 22, scope: !1340)
!1344 = !DILocation(line: 438, column: 24, scope: !1340)
!1345 = !DILocation(line: 438, column: 30, scope: !1340)
!1346 = !DILocation(line: 438, column: 28, scope: !1340)
!1347 = !DILocation(line: 438, column: 38, scope: !1340)
!1348 = !DILocation(line: 438, column: 48, scope: !1340)
!1349 = !DILocation(line: 438, column: 52, scope: !1340)
!1350 = !DILocation(line: 438, column: 54, scope: !1340)
!1351 = !DILocation(line: 438, column: 45, scope: !1340)
!1352 = !DILocation(line: 438, column: 59, scope: !1340)
!1353 = !DILocation(line: 438, column: 62, scope: !1340)
!1354 = !DILocation(line: 438, column: 66, scope: !1340)
!1355 = !DILocation(line: 438, column: 68, scope: !1340)
!1356 = !DILocation(line: 438, column: 73, scope: !1340)
!1357 = !DILocation(line: 437, column: 19, scope: !1314)
!1358 = !DILocation(line: 440, column: 19, scope: !1359)
!1359 = distinct !DILexicalBlock(scope: !1340, file: !105, line: 439, column: 17)
!1360 = !DILocation(line: 440, column: 19, scope: !1361)
!1361 = distinct !DILexicalBlock(scope: !1362, file: !105, line: 440, column: 19)
!1362 = distinct !DILexicalBlock(scope: !1359, file: !105, line: 440, column: 19)
!1363 = !DILocation(line: 440, column: 19, scope: !1362)
!1364 = !DILocation(line: 441, column: 19, scope: !1359)
!1365 = !DILocation(line: 441, column: 19, scope: !1366)
!1366 = distinct !DILexicalBlock(scope: !1367, file: !105, line: 441, column: 19)
!1367 = distinct !DILexicalBlock(scope: !1359, file: !105, line: 441, column: 19)
!1368 = !DILocation(line: 441, column: 19, scope: !1367)
!1369 = !DILocation(line: 442, column: 17, scope: !1359)
!1370 = !DILocation(line: 443, column: 17, scope: !1314)
!1371 = !DILocation(line: 448, column: 13, scope: !1314)
!1372 = !DILocation(line: 449, column: 20, scope: !1373)
!1373 = distinct !DILexicalBlock(scope: !1310, file: !105, line: 449, column: 20)
!1374 = !DILocation(line: 449, column: 26, scope: !1373)
!1375 = !DILocation(line: 449, column: 20, scope: !1310)
!1376 = !DILocation(line: 450, column: 13, scope: !1373)
!1377 = !DILocation(line: 451, column: 11, scope: !1311)
!1378 = !DILocation(line: 454, column: 19, scope: !1311)
!1379 = !DILocation(line: 454, column: 11, scope: !1311)
!1380 = !DILocation(line: 457, column: 19, scope: !1381)
!1381 = distinct !DILexicalBlock(scope: !1382, file: !105, line: 457, column: 19)
!1382 = distinct !DILexicalBlock(scope: !1311, file: !105, line: 455, column: 13)
!1383 = !DILocation(line: 457, column: 19, scope: !1382)
!1384 = !DILocation(line: 458, column: 17, scope: !1381)
!1385 = !DILocation(line: 459, column: 15, scope: !1382)
!1386 = !DILocation(line: 462, column: 20, scope: !1387)
!1387 = distinct !DILexicalBlock(scope: !1382, file: !105, line: 462, column: 19)
!1388 = !DILocation(line: 462, column: 26, scope: !1387)
!1389 = !DILocation(line: 463, column: 19, scope: !1387)
!1390 = !DILocation(line: 463, column: 22, scope: !1387)
!1391 = !DILocation(line: 463, column: 24, scope: !1387)
!1392 = !DILocation(line: 463, column: 30, scope: !1387)
!1393 = !DILocation(line: 463, column: 28, scope: !1387)
!1394 = !DILocation(line: 463, column: 38, scope: !1387)
!1395 = !DILocation(line: 463, column: 41, scope: !1387)
!1396 = !DILocation(line: 463, column: 45, scope: !1387)
!1397 = !DILocation(line: 463, column: 47, scope: !1387)
!1398 = !DILocation(line: 463, column: 52, scope: !1387)
!1399 = !DILocation(line: 462, column: 19, scope: !1382)
!1400 = !DILocation(line: 464, column: 25, scope: !1387)
!1401 = !DILocation(line: 464, column: 29, scope: !1387)
!1402 = !DILocation(line: 464, column: 31, scope: !1387)
!1403 = !DILocation(line: 464, column: 17, scope: !1387)
!1404 = !DILocation(line: 471, column: 25, scope: !1405)
!1405 = distinct !DILexicalBlock(scope: !1406, file: !105, line: 471, column: 25)
!1406 = distinct !DILexicalBlock(scope: !1387, file: !105, line: 465, column: 19)
!1407 = !DILocation(line: 471, column: 25, scope: !1406)
!1408 = !DILocation(line: 472, column: 23, scope: !1405)
!1409 = !DILocation(line: 473, column: 25, scope: !1406)
!1410 = !DILocation(line: 473, column: 29, scope: !1406)
!1411 = !DILocation(line: 473, column: 31, scope: !1406)
!1412 = !DILocation(line: 473, column: 23, scope: !1406)
!1413 = !DILocation(line: 474, column: 23, scope: !1406)
!1414 = !DILocation(line: 475, column: 21, scope: !1406)
!1415 = !DILocation(line: 475, column: 21, scope: !1416)
!1416 = distinct !DILexicalBlock(scope: !1417, file: !105, line: 475, column: 21)
!1417 = distinct !DILexicalBlock(scope: !1406, file: !105, line: 475, column: 21)
!1418 = !DILocation(line: 475, column: 21, scope: !1417)
!1419 = !DILocation(line: 476, column: 21, scope: !1406)
!1420 = !DILocation(line: 476, column: 21, scope: !1421)
!1421 = distinct !DILexicalBlock(scope: !1422, file: !105, line: 476, column: 21)
!1422 = distinct !DILexicalBlock(scope: !1406, file: !105, line: 476, column: 21)
!1423 = !DILocation(line: 476, column: 21, scope: !1422)
!1424 = !DILocation(line: 477, column: 21, scope: !1406)
!1425 = !DILocation(line: 477, column: 21, scope: !1426)
!1426 = distinct !DILexicalBlock(scope: !1427, file: !105, line: 477, column: 21)
!1427 = distinct !DILexicalBlock(scope: !1406, file: !105, line: 477, column: 21)
!1428 = !DILocation(line: 477, column: 21, scope: !1427)
!1429 = !DILocation(line: 478, column: 21, scope: !1406)
!1430 = !DILocation(line: 478, column: 21, scope: !1431)
!1431 = distinct !DILexicalBlock(scope: !1432, file: !105, line: 478, column: 21)
!1432 = distinct !DILexicalBlock(scope: !1406, file: !105, line: 478, column: 21)
!1433 = !DILocation(line: 478, column: 21, scope: !1432)
!1434 = !DILocation(line: 479, column: 21, scope: !1406)
!1435 = !DILocation(line: 482, column: 21, scope: !1406)
!1436 = !DILocation(line: 483, column: 19, scope: !1406)
!1437 = !DILocation(line: 484, column: 15, scope: !1382)
!1438 = !DILocation(line: 487, column: 15, scope: !1382)
!1439 = !DILocation(line: 489, column: 11, scope: !1311)
!1440 = !DILocation(line: 491, column: 24, scope: !1311)
!1441 = !DILocation(line: 491, column: 31, scope: !1311)
!1442 = !DILocation(line: 492, column: 24, scope: !1311)
!1443 = !DILocation(line: 492, column: 31, scope: !1311)
!1444 = !DILocation(line: 493, column: 24, scope: !1311)
!1445 = !DILocation(line: 493, column: 31, scope: !1311)
!1446 = !DILocation(line: 494, column: 24, scope: !1311)
!1447 = !DILocation(line: 494, column: 31, scope: !1311)
!1448 = !DILocation(line: 495, column: 24, scope: !1311)
!1449 = !DILocation(line: 495, column: 31, scope: !1311)
!1450 = !DILocation(line: 496, column: 24, scope: !1311)
!1451 = !DILocation(line: 496, column: 31, scope: !1311)
!1452 = !DILocation(line: 497, column: 24, scope: !1311)
!1453 = !DILocation(line: 497, column: 31, scope: !1311)
!1454 = !DILocation(line: 498, column: 26, scope: !1311)
!1455 = !DILocation(line: 498, column: 24, scope: !1311)
!1456 = !DILocation(line: 500, column: 15, scope: !1457)
!1457 = distinct !DILexicalBlock(scope: !1311, file: !105, line: 500, column: 15)
!1458 = !DILocation(line: 500, column: 29, scope: !1457)
!1459 = !DILocation(line: 500, column: 15, scope: !1311)
!1460 = !DILocation(line: 502, column: 19, scope: !1461)
!1461 = distinct !DILexicalBlock(scope: !1462, file: !105, line: 502, column: 19)
!1462 = distinct !DILexicalBlock(scope: !1457, file: !105, line: 501, column: 13)
!1463 = !DILocation(line: 502, column: 19, scope: !1462)
!1464 = !DILocation(line: 503, column: 17, scope: !1461)
!1465 = !DILocation(line: 504, column: 15, scope: !1462)
!1466 = !DILocation(line: 509, column: 15, scope: !1467)
!1467 = distinct !DILexicalBlock(scope: !1311, file: !105, line: 509, column: 15)
!1468 = !DILocation(line: 509, column: 33, scope: !1467)
!1469 = !DILocation(line: 509, column: 36, scope: !1467)
!1470 = !DILocation(line: 509, column: 55, scope: !1467)
!1471 = !DILocation(line: 509, column: 58, scope: !1467)
!1472 = !DILocation(line: 509, column: 15, scope: !1311)
!1473 = !DILocation(line: 510, column: 13, scope: !1467)
!1474 = !DILabel(scope: !1311, name: "c_and_shell_escape", file: !105, line: 512)
!1475 = !DILocation(line: 512, column: 9, scope: !1311)
!1476 = !DILocation(line: 513, column: 15, scope: !1477)
!1477 = distinct !DILexicalBlock(scope: !1311, file: !105, line: 513, column: 15)
!1478 = !DILocation(line: 513, column: 29, scope: !1477)
!1479 = !DILocation(line: 514, column: 15, scope: !1477)
!1480 = !DILocation(line: 514, column: 18, scope: !1477)
!1481 = !DILocation(line: 513, column: 15, scope: !1311)
!1482 = !DILocation(line: 515, column: 13, scope: !1477)
!1483 = !DILabel(scope: !1311, name: "c_escape", file: !105, line: 517)
!1484 = !DILocation(line: 517, column: 9, scope: !1311)
!1485 = !DILocation(line: 518, column: 15, scope: !1486)
!1486 = distinct !DILexicalBlock(scope: !1311, file: !105, line: 518, column: 15)
!1487 = !DILocation(line: 518, column: 15, scope: !1311)
!1488 = !DILocation(line: 520, column: 19, scope: !1489)
!1489 = distinct !DILexicalBlock(scope: !1486, file: !105, line: 519, column: 13)
!1490 = !DILocation(line: 520, column: 17, scope: !1489)
!1491 = !DILocation(line: 521, column: 15, scope: !1489)
!1492 = !DILocation(line: 523, column: 11, scope: !1311)
!1493 = !DILocation(line: 526, column: 18, scope: !1494)
!1494 = distinct !DILexicalBlock(scope: !1311, file: !105, line: 526, column: 15)
!1495 = !DILocation(line: 526, column: 26, scope: !1494)
!1496 = !DILocation(line: 526, column: 15, scope: !1311)
!1497 = !DILocation(line: 526, column: 40, scope: !1494)
!1498 = !DILocation(line: 526, column: 47, scope: !1494)
!1499 = !DILocation(line: 526, column: 57, scope: !1494)
!1500 = !DILocation(line: 526, column: 65, scope: !1494)
!1501 = !DILocation(line: 527, column: 13, scope: !1494)
!1502 = !DILocation(line: 528, column: 11, scope: !1311)
!1503 = !DILocation(line: 530, column: 15, scope: !1504)
!1504 = distinct !DILexicalBlock(scope: !1311, file: !105, line: 530, column: 15)
!1505 = !DILocation(line: 530, column: 17, scope: !1504)
!1506 = !DILocation(line: 530, column: 15, scope: !1311)
!1507 = !DILocation(line: 531, column: 13, scope: !1504)
!1508 = !DILocation(line: 532, column: 11, scope: !1311)
!1509 = !DILocation(line: 534, column: 36, scope: !1311)
!1510 = !DILocation(line: 535, column: 11, scope: !1311)
!1511 = !DILocation(line: 548, column: 15, scope: !1512)
!1512 = distinct !DILexicalBlock(scope: !1311, file: !105, line: 548, column: 15)
!1513 = !DILocation(line: 548, column: 29, scope: !1512)
!1514 = !DILocation(line: 549, column: 15, scope: !1512)
!1515 = !DILocation(line: 549, column: 18, scope: !1512)
!1516 = !DILocation(line: 548, column: 15, scope: !1311)
!1517 = !DILocation(line: 550, column: 13, scope: !1512)
!1518 = !DILocation(line: 551, column: 11, scope: !1311)
!1519 = !DILocation(line: 554, column: 36, scope: !1311)
!1520 = !DILocation(line: 555, column: 36, scope: !1311)
!1521 = !DILocation(line: 556, column: 15, scope: !1522)
!1522 = distinct !DILexicalBlock(scope: !1311, file: !105, line: 556, column: 15)
!1523 = !DILocation(line: 556, column: 29, scope: !1522)
!1524 = !DILocation(line: 556, column: 15, scope: !1311)
!1525 = !DILocation(line: 558, column: 19, scope: !1526)
!1526 = distinct !DILexicalBlock(scope: !1527, file: !105, line: 558, column: 19)
!1527 = distinct !DILexicalBlock(scope: !1522, file: !105, line: 557, column: 13)
!1528 = !DILocation(line: 558, column: 19, scope: !1527)
!1529 = !DILocation(line: 559, column: 17, scope: !1526)
!1530 = !DILocation(line: 561, column: 19, scope: !1531)
!1531 = distinct !DILexicalBlock(scope: !1527, file: !105, line: 561, column: 19)
!1532 = !DILocation(line: 561, column: 30, scope: !1531)
!1533 = !DILocation(line: 561, column: 35, scope: !1531)
!1534 = !DILocation(line: 561, column: 19, scope: !1527)
!1535 = !DILocation(line: 566, column: 37, scope: !1536)
!1536 = distinct !DILexicalBlock(scope: !1531, file: !105, line: 562, column: 17)
!1537 = !DILocation(line: 566, column: 35, scope: !1536)
!1538 = !DILocation(line: 567, column: 30, scope: !1536)
!1539 = !DILocation(line: 568, column: 17, scope: !1536)
!1540 = !DILocation(line: 570, column: 15, scope: !1527)
!1541 = !DILocation(line: 570, column: 15, scope: !1542)
!1542 = distinct !DILexicalBlock(scope: !1543, file: !105, line: 570, column: 15)
!1543 = distinct !DILexicalBlock(scope: !1527, file: !105, line: 570, column: 15)
!1544 = !DILocation(line: 570, column: 15, scope: !1543)
!1545 = !DILocation(line: 571, column: 15, scope: !1527)
!1546 = !DILocation(line: 571, column: 15, scope: !1547)
!1547 = distinct !DILexicalBlock(scope: !1548, file: !105, line: 571, column: 15)
!1548 = distinct !DILexicalBlock(scope: !1527, file: !105, line: 571, column: 15)
!1549 = !DILocation(line: 571, column: 15, scope: !1548)
!1550 = !DILocation(line: 572, column: 15, scope: !1527)
!1551 = !DILocation(line: 572, column: 15, scope: !1552)
!1552 = distinct !DILexicalBlock(scope: !1553, file: !105, line: 572, column: 15)
!1553 = distinct !DILexicalBlock(scope: !1527, file: !105, line: 572, column: 15)
!1554 = !DILocation(line: 572, column: 15, scope: !1553)
!1555 = !DILocation(line: 573, column: 40, scope: !1527)
!1556 = !DILocation(line: 574, column: 13, scope: !1527)
!1557 = !DILocation(line: 575, column: 11, scope: !1311)
!1558 = !DILocation(line: 599, column: 36, scope: !1311)
!1559 = !DILocation(line: 600, column: 11, scope: !1311)
!1560 = !DILocalVariable(name: "m", scope: !1561, file: !105, line: 610, type: !99)
!1561 = distinct !DILexicalBlock(scope: !1311, file: !105, line: 608, column: 11)
!1562 = !DILocation(line: 610, column: 20, scope: !1561)
!1563 = !DILocalVariable(name: "printable", scope: !1561, file: !105, line: 612, type: !41)
!1564 = !DILocation(line: 612, column: 18, scope: !1561)
!1565 = !DILocation(line: 614, column: 17, scope: !1566)
!1566 = distinct !DILexicalBlock(scope: !1561, file: !105, line: 614, column: 17)
!1567 = !DILocation(line: 614, column: 17, scope: !1561)
!1568 = !DILocation(line: 616, column: 19, scope: !1569)
!1569 = distinct !DILexicalBlock(scope: !1566, file: !105, line: 615, column: 15)
!1570 = !DILocation(line: 617, column: 29, scope: !1569)
!1571 = !DILocation(line: 617, column: 41, scope: !1569)
!1572 = !DILocation(line: 617, column: 27, scope: !1569)
!1573 = !DILocation(line: 618, column: 15, scope: !1569)
!1574 = !DILocalVariable(name: "mbstate", scope: !1575, file: !105, line: 621, type: !1576)
!1575 = distinct !DILexicalBlock(scope: !1566, file: !105, line: 620, column: 15)
!1576 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !1577, line: 6, baseType: !1578)
!1577 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/mbstate_t.h", directory: "")
!1578 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !1579, line: 21, baseType: !1580)
!1579 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h", directory: "")
!1580 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1579, line: 13, size: 64, elements: !1581)
!1581 = !{!1582, !1583}
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !1580, file: !1579, line: 15, baseType: !6, size: 32)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !1580, file: !1579, line: 20, baseType: !1584, size: 32, offset: 32)
!1584 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1580, file: !1579, line: 16, size: 32, elements: !1585)
!1585 = !{!1586, !1587}
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !1584, file: !1579, line: 18, baseType: !84, size: 32)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !1584, file: !1579, line: 19, baseType: !1588, size: 32)
!1588 = !DICompositeType(tag: DW_TAG_array_type, baseType: !9, size: 32, elements: !1589)
!1589 = !{!1590}
!1590 = !DISubrange(count: 4)
!1591 = !DILocation(line: 621, column: 27, scope: !1575)
!1592 = !DILocation(line: 622, column: 17, scope: !1575)
!1593 = !DILocation(line: 624, column: 19, scope: !1575)
!1594 = !DILocation(line: 625, column: 27, scope: !1575)
!1595 = !DILocation(line: 626, column: 21, scope: !1596)
!1596 = distinct !DILexicalBlock(scope: !1575, file: !105, line: 626, column: 21)
!1597 = !DILocation(line: 626, column: 29, scope: !1596)
!1598 = !DILocation(line: 626, column: 21, scope: !1575)
!1599 = !DILocation(line: 627, column: 37, scope: !1596)
!1600 = !DILocation(line: 627, column: 29, scope: !1596)
!1601 = !DILocation(line: 627, column: 27, scope: !1596)
!1602 = !DILocation(line: 627, column: 19, scope: !1596)
!1603 = !DILocation(line: 629, column: 17, scope: !1575)
!1604 = !DILocalVariable(name: "w", scope: !1605, file: !105, line: 631, type: !1606)
!1605 = distinct !DILexicalBlock(scope: !1575, file: !105, line: 630, column: 19)
!1606 = !DIDerivedType(tag: DW_TAG_typedef, name: "wchar_t", file: !100, line: 74, baseType: !6)
!1607 = !DILocation(line: 631, column: 29, scope: !1605)
!1608 = !DILocalVariable(name: "bytes", scope: !1605, file: !105, line: 632, type: !99)
!1609 = !DILocation(line: 632, column: 28, scope: !1605)
!1610 = !DILocation(line: 632, column: 50, scope: !1605)
!1611 = !DILocation(line: 632, column: 54, scope: !1605)
!1612 = !DILocation(line: 632, column: 58, scope: !1605)
!1613 = !DILocation(line: 632, column: 56, scope: !1605)
!1614 = !DILocation(line: 633, column: 45, scope: !1605)
!1615 = !DILocation(line: 633, column: 56, scope: !1605)
!1616 = !DILocation(line: 633, column: 60, scope: !1605)
!1617 = !DILocation(line: 633, column: 58, scope: !1605)
!1618 = !DILocation(line: 633, column: 53, scope: !1605)
!1619 = !DILocation(line: 632, column: 36, scope: !1605)
!1620 = !DILocation(line: 634, column: 25, scope: !1621)
!1621 = distinct !DILexicalBlock(scope: !1605, file: !105, line: 634, column: 25)
!1622 = !DILocation(line: 634, column: 31, scope: !1621)
!1623 = !DILocation(line: 634, column: 25, scope: !1605)
!1624 = !DILocation(line: 635, column: 23, scope: !1621)
!1625 = !DILocation(line: 636, column: 30, scope: !1626)
!1626 = distinct !DILexicalBlock(scope: !1621, file: !105, line: 636, column: 30)
!1627 = !DILocation(line: 636, column: 36, scope: !1626)
!1628 = !DILocation(line: 636, column: 30, scope: !1621)
!1629 = !DILocation(line: 638, column: 35, scope: !1630)
!1630 = distinct !DILexicalBlock(scope: !1626, file: !105, line: 637, column: 23)
!1631 = !DILocation(line: 639, column: 25, scope: !1630)
!1632 = !DILocation(line: 641, column: 30, scope: !1633)
!1633 = distinct !DILexicalBlock(scope: !1626, file: !105, line: 641, column: 30)
!1634 = !DILocation(line: 641, column: 36, scope: !1633)
!1635 = !DILocation(line: 641, column: 30, scope: !1626)
!1636 = !DILocation(line: 643, column: 35, scope: !1637)
!1637 = distinct !DILexicalBlock(scope: !1633, file: !105, line: 642, column: 23)
!1638 = !DILocation(line: 644, column: 25, scope: !1637)
!1639 = !DILocation(line: 644, column: 32, scope: !1637)
!1640 = !DILocation(line: 644, column: 36, scope: !1637)
!1641 = !DILocation(line: 644, column: 34, scope: !1637)
!1642 = !DILocation(line: 644, column: 40, scope: !1637)
!1643 = !DILocation(line: 644, column: 38, scope: !1637)
!1644 = !DILocation(line: 644, column: 48, scope: !1637)
!1645 = !DILocation(line: 644, column: 51, scope: !1637)
!1646 = !DILocation(line: 644, column: 55, scope: !1637)
!1647 = !DILocation(line: 644, column: 59, scope: !1637)
!1648 = !DILocation(line: 644, column: 57, scope: !1637)
!1649 = !DILocation(line: 0, scope: !1637)
!1650 = !DILocation(line: 645, column: 28, scope: !1637)
!1651 = distinct !{!1651, !1638, !1650}
!1652 = !DILocation(line: 646, column: 25, scope: !1637)
!1653 = !DILocation(line: 654, column: 44, scope: !1654)
!1654 = distinct !DILexicalBlock(scope: !1655, file: !105, line: 654, column: 29)
!1655 = distinct !DILexicalBlock(scope: !1633, file: !105, line: 649, column: 23)
!1656 = !DILocation(line: 655, column: 29, scope: !1654)
!1657 = !DILocation(line: 655, column: 32, scope: !1654)
!1658 = !DILocation(line: 655, column: 46, scope: !1654)
!1659 = !DILocation(line: 654, column: 29, scope: !1655)
!1660 = !DILocalVariable(name: "j", scope: !1661, file: !105, line: 657, type: !99)
!1661 = distinct !DILexicalBlock(scope: !1654, file: !105, line: 656, column: 27)
!1662 = !DILocation(line: 657, column: 36, scope: !1661)
!1663 = !DILocation(line: 658, column: 36, scope: !1664)
!1664 = distinct !DILexicalBlock(scope: !1661, file: !105, line: 658, column: 29)
!1665 = !DILocation(line: 658, column: 34, scope: !1664)
!1666 = !DILocation(line: 658, column: 41, scope: !1667)
!1667 = distinct !DILexicalBlock(scope: !1664, file: !105, line: 658, column: 29)
!1668 = !DILocation(line: 658, column: 45, scope: !1667)
!1669 = !DILocation(line: 658, column: 43, scope: !1667)
!1670 = !DILocation(line: 658, column: 29, scope: !1664)
!1671 = !DILocation(line: 659, column: 39, scope: !1667)
!1672 = !DILocation(line: 659, column: 43, scope: !1667)
!1673 = !DILocation(line: 659, column: 47, scope: !1667)
!1674 = !DILocation(line: 659, column: 45, scope: !1667)
!1675 = !DILocation(line: 659, column: 51, scope: !1667)
!1676 = !DILocation(line: 659, column: 49, scope: !1667)
!1677 = !DILocation(line: 659, column: 31, scope: !1667)
!1678 = !DILocation(line: 663, column: 35, scope: !1679)
!1679 = distinct !DILexicalBlock(scope: !1667, file: !105, line: 660, column: 33)
!1680 = !DILocation(line: 666, column: 35, scope: !1679)
!1681 = !DILocation(line: 667, column: 33, scope: !1679)
!1682 = !DILocation(line: 658, column: 53, scope: !1667)
!1683 = !DILocation(line: 658, column: 29, scope: !1667)
!1684 = distinct !{!1684, !1670, !1685}
!1685 = !DILocation(line: 667, column: 33, scope: !1664)
!1686 = !DILocation(line: 668, column: 27, scope: !1661)
!1687 = !DILocation(line: 670, column: 41, scope: !1688)
!1688 = distinct !DILexicalBlock(scope: !1655, file: !105, line: 670, column: 29)
!1689 = !DILocation(line: 670, column: 31, scope: !1688)
!1690 = !DILocation(line: 670, column: 29, scope: !1655)
!1691 = !DILocation(line: 671, column: 37, scope: !1688)
!1692 = !DILocation(line: 671, column: 27, scope: !1688)
!1693 = !DILocation(line: 672, column: 30, scope: !1655)
!1694 = !DILocation(line: 672, column: 27, scope: !1655)
!1695 = !DILocation(line: 674, column: 19, scope: !1605)
!1696 = !DILocation(line: 675, column: 26, scope: !1575)
!1697 = !DILocation(line: 675, column: 24, scope: !1575)
!1698 = distinct !{!1698, !1603, !1699}
!1699 = !DILocation(line: 675, column: 44, scope: !1575)
!1700 = !DILocation(line: 678, column: 40, scope: !1561)
!1701 = !DILocation(line: 678, column: 38, scope: !1561)
!1702 = !DILocation(line: 680, column: 21, scope: !1703)
!1703 = distinct !DILexicalBlock(scope: !1561, file: !105, line: 680, column: 17)
!1704 = !DILocation(line: 680, column: 19, scope: !1703)
!1705 = !DILocation(line: 680, column: 23, scope: !1703)
!1706 = !DILocation(line: 680, column: 27, scope: !1703)
!1707 = !DILocation(line: 680, column: 45, scope: !1703)
!1708 = !DILocation(line: 680, column: 50, scope: !1703)
!1709 = !DILocation(line: 680, column: 17, scope: !1561)
!1710 = !DILocalVariable(name: "ilim", scope: !1711, file: !105, line: 684, type: !99)
!1711 = distinct !DILexicalBlock(scope: !1703, file: !105, line: 681, column: 15)
!1712 = !DILocation(line: 684, column: 24, scope: !1711)
!1713 = !DILocation(line: 684, column: 31, scope: !1711)
!1714 = !DILocation(line: 684, column: 35, scope: !1711)
!1715 = !DILocation(line: 684, column: 33, scope: !1711)
!1716 = !DILocation(line: 686, column: 17, scope: !1711)
!1717 = !DILocation(line: 688, column: 25, scope: !1718)
!1718 = distinct !DILexicalBlock(scope: !1719, file: !105, line: 688, column: 25)
!1719 = distinct !DILexicalBlock(scope: !1720, file: !105, line: 687, column: 19)
!1720 = distinct !DILexicalBlock(scope: !1721, file: !105, line: 686, column: 17)
!1721 = distinct !DILexicalBlock(scope: !1711, file: !105, line: 686, column: 17)
!1722 = !DILocation(line: 688, column: 43, scope: !1718)
!1723 = !DILocation(line: 688, column: 48, scope: !1718)
!1724 = !DILocation(line: 688, column: 25, scope: !1719)
!1725 = !DILocation(line: 690, column: 25, scope: !1726)
!1726 = distinct !DILexicalBlock(scope: !1718, file: !105, line: 689, column: 23)
!1727 = !DILocation(line: 690, column: 25, scope: !1728)
!1728 = distinct !DILexicalBlock(scope: !1729, file: !105, line: 690, column: 25)
!1729 = distinct !DILexicalBlock(scope: !1726, file: !105, line: 690, column: 25)
!1730 = !DILocation(line: 690, column: 25, scope: !1729)
!1731 = !DILocation(line: 690, column: 25, scope: !1732)
!1732 = distinct !DILexicalBlock(scope: !1729, file: !105, line: 690, column: 25)
!1733 = !DILocation(line: 690, column: 25, scope: !1734)
!1734 = distinct !DILexicalBlock(scope: !1732, file: !105, line: 690, column: 25)
!1735 = !DILocation(line: 690, column: 25, scope: !1736)
!1736 = distinct !DILexicalBlock(scope: !1737, file: !105, line: 690, column: 25)
!1737 = distinct !DILexicalBlock(scope: !1734, file: !105, line: 690, column: 25)
!1738 = !DILocation(line: 690, column: 25, scope: !1737)
!1739 = !DILocation(line: 690, column: 25, scope: !1740)
!1740 = distinct !DILexicalBlock(scope: !1741, file: !105, line: 690, column: 25)
!1741 = distinct !DILexicalBlock(scope: !1734, file: !105, line: 690, column: 25)
!1742 = !DILocation(line: 690, column: 25, scope: !1741)
!1743 = !DILocation(line: 690, column: 25, scope: !1744)
!1744 = distinct !DILexicalBlock(scope: !1745, file: !105, line: 690, column: 25)
!1745 = distinct !DILexicalBlock(scope: !1734, file: !105, line: 690, column: 25)
!1746 = !DILocation(line: 690, column: 25, scope: !1745)
!1747 = !DILocation(line: 690, column: 25, scope: !1748)
!1748 = distinct !DILexicalBlock(scope: !1749, file: !105, line: 690, column: 25)
!1749 = distinct !DILexicalBlock(scope: !1729, file: !105, line: 690, column: 25)
!1750 = !DILocation(line: 690, column: 25, scope: !1749)
!1751 = !DILocation(line: 691, column: 25, scope: !1726)
!1752 = !DILocation(line: 691, column: 25, scope: !1753)
!1753 = distinct !DILexicalBlock(scope: !1754, file: !105, line: 691, column: 25)
!1754 = distinct !DILexicalBlock(scope: !1726, file: !105, line: 691, column: 25)
!1755 = !DILocation(line: 691, column: 25, scope: !1754)
!1756 = !DILocation(line: 692, column: 25, scope: !1726)
!1757 = !DILocation(line: 692, column: 25, scope: !1758)
!1758 = distinct !DILexicalBlock(scope: !1759, file: !105, line: 692, column: 25)
!1759 = distinct !DILexicalBlock(scope: !1726, file: !105, line: 692, column: 25)
!1760 = !DILocation(line: 692, column: 25, scope: !1759)
!1761 = !DILocation(line: 693, column: 36, scope: !1726)
!1762 = !DILocation(line: 693, column: 38, scope: !1726)
!1763 = !DILocation(line: 693, column: 33, scope: !1726)
!1764 = !DILocation(line: 693, column: 29, scope: !1726)
!1765 = !DILocation(line: 693, column: 27, scope: !1726)
!1766 = !DILocation(line: 694, column: 23, scope: !1726)
!1767 = !DILocation(line: 695, column: 30, scope: !1768)
!1768 = distinct !DILexicalBlock(scope: !1718, file: !105, line: 695, column: 30)
!1769 = !DILocation(line: 695, column: 30, scope: !1718)
!1770 = !DILocation(line: 697, column: 25, scope: !1771)
!1771 = distinct !DILexicalBlock(scope: !1768, file: !105, line: 696, column: 23)
!1772 = !DILocation(line: 697, column: 25, scope: !1773)
!1773 = distinct !DILexicalBlock(scope: !1774, file: !105, line: 697, column: 25)
!1774 = distinct !DILexicalBlock(scope: !1771, file: !105, line: 697, column: 25)
!1775 = !DILocation(line: 697, column: 25, scope: !1774)
!1776 = !DILocation(line: 698, column: 40, scope: !1771)
!1777 = !DILocation(line: 699, column: 23, scope: !1771)
!1778 = !DILocation(line: 700, column: 25, scope: !1779)
!1779 = distinct !DILexicalBlock(scope: !1719, file: !105, line: 700, column: 25)
!1780 = !DILocation(line: 700, column: 33, scope: !1779)
!1781 = !DILocation(line: 700, column: 35, scope: !1779)
!1782 = !DILocation(line: 700, column: 30, scope: !1779)
!1783 = !DILocation(line: 700, column: 25, scope: !1719)
!1784 = !DILocation(line: 701, column: 23, scope: !1779)
!1785 = !DILocation(line: 702, column: 21, scope: !1719)
!1786 = !DILocation(line: 702, column: 21, scope: !1787)
!1787 = distinct !DILexicalBlock(scope: !1788, file: !105, line: 702, column: 21)
!1788 = distinct !DILexicalBlock(scope: !1719, file: !105, line: 702, column: 21)
!1789 = !DILocation(line: 702, column: 21, scope: !1788)
!1790 = !DILocation(line: 702, column: 21, scope: !1791)
!1791 = distinct !DILexicalBlock(scope: !1787, file: !105, line: 702, column: 21)
!1792 = !DILocation(line: 702, column: 21, scope: !1793)
!1793 = distinct !DILexicalBlock(scope: !1794, file: !105, line: 702, column: 21)
!1794 = distinct !DILexicalBlock(scope: !1791, file: !105, line: 702, column: 21)
!1795 = !DILocation(line: 702, column: 21, scope: !1794)
!1796 = !DILocation(line: 702, column: 21, scope: !1797)
!1797 = distinct !DILexicalBlock(scope: !1798, file: !105, line: 702, column: 21)
!1798 = distinct !DILexicalBlock(scope: !1791, file: !105, line: 702, column: 21)
!1799 = !DILocation(line: 702, column: 21, scope: !1798)
!1800 = !DILocation(line: 703, column: 21, scope: !1719)
!1801 = !DILocation(line: 703, column: 21, scope: !1802)
!1802 = distinct !DILexicalBlock(scope: !1803, file: !105, line: 703, column: 21)
!1803 = distinct !DILexicalBlock(scope: !1719, file: !105, line: 703, column: 21)
!1804 = !DILocation(line: 703, column: 21, scope: !1803)
!1805 = !DILocation(line: 704, column: 25, scope: !1719)
!1806 = !DILocation(line: 704, column: 29, scope: !1719)
!1807 = !DILocation(line: 704, column: 23, scope: !1719)
!1808 = !DILocation(line: 686, column: 17, scope: !1720)
!1809 = distinct !{!1809, !1810, !1811}
!1810 = !DILocation(line: 686, column: 17, scope: !1721)
!1811 = !DILocation(line: 705, column: 19, scope: !1721)
!1812 = !DILocation(line: 707, column: 17, scope: !1711)
!1813 = !DILocation(line: 710, column: 9, scope: !1311)
!1814 = !DILocation(line: 712, column: 16, scope: !1815)
!1815 = distinct !DILexicalBlock(scope: !1257, file: !105, line: 712, column: 11)
!1816 = !DILocation(line: 712, column: 34, scope: !1815)
!1817 = !DILocation(line: 712, column: 37, scope: !1815)
!1818 = !DILocation(line: 712, column: 51, scope: !1815)
!1819 = !DILocation(line: 713, column: 15, scope: !1815)
!1820 = !DILocation(line: 713, column: 18, scope: !1815)
!1821 = !DILocation(line: 714, column: 14, scope: !1815)
!1822 = !DILocation(line: 714, column: 17, scope: !1815)
!1823 = !DILocation(line: 715, column: 14, scope: !1815)
!1824 = !DILocation(line: 715, column: 17, scope: !1815)
!1825 = !DILocation(line: 715, column: 33, scope: !1815)
!1826 = !DILocation(line: 715, column: 35, scope: !1815)
!1827 = !DILocation(line: 715, column: 51, scope: !1815)
!1828 = !DILocation(line: 715, column: 53, scope: !1815)
!1829 = !DILocation(line: 715, column: 47, scope: !1815)
!1830 = !DILocation(line: 715, column: 65, scope: !1815)
!1831 = !DILocation(line: 716, column: 11, scope: !1815)
!1832 = !DILocation(line: 716, column: 15, scope: !1815)
!1833 = !DILocation(line: 712, column: 11, scope: !1257)
!1834 = !DILocation(line: 717, column: 9, scope: !1815)
!1835 = !DILabel(scope: !1257, name: "store_escape", file: !105, line: 719)
!1836 = !DILocation(line: 719, column: 5, scope: !1257)
!1837 = !DILocation(line: 720, column: 7, scope: !1257)
!1838 = !DILocation(line: 720, column: 7, scope: !1839)
!1839 = distinct !DILexicalBlock(scope: !1840, file: !105, line: 720, column: 7)
!1840 = distinct !DILexicalBlock(scope: !1257, file: !105, line: 720, column: 7)
!1841 = !DILocation(line: 720, column: 7, scope: !1840)
!1842 = !DILocation(line: 720, column: 7, scope: !1843)
!1843 = distinct !DILexicalBlock(scope: !1840, file: !105, line: 720, column: 7)
!1844 = !DILocation(line: 720, column: 7, scope: !1845)
!1845 = distinct !DILexicalBlock(scope: !1843, file: !105, line: 720, column: 7)
!1846 = !DILocation(line: 720, column: 7, scope: !1847)
!1847 = distinct !DILexicalBlock(scope: !1848, file: !105, line: 720, column: 7)
!1848 = distinct !DILexicalBlock(scope: !1845, file: !105, line: 720, column: 7)
!1849 = !DILocation(line: 720, column: 7, scope: !1848)
!1850 = !DILocation(line: 720, column: 7, scope: !1851)
!1851 = distinct !DILexicalBlock(scope: !1852, file: !105, line: 720, column: 7)
!1852 = distinct !DILexicalBlock(scope: !1845, file: !105, line: 720, column: 7)
!1853 = !DILocation(line: 720, column: 7, scope: !1852)
!1854 = !DILocation(line: 720, column: 7, scope: !1855)
!1855 = distinct !DILexicalBlock(scope: !1856, file: !105, line: 720, column: 7)
!1856 = distinct !DILexicalBlock(scope: !1845, file: !105, line: 720, column: 7)
!1857 = !DILocation(line: 720, column: 7, scope: !1856)
!1858 = !DILocation(line: 720, column: 7, scope: !1859)
!1859 = distinct !DILexicalBlock(scope: !1860, file: !105, line: 720, column: 7)
!1860 = distinct !DILexicalBlock(scope: !1840, file: !105, line: 720, column: 7)
!1861 = !DILocation(line: 720, column: 7, scope: !1860)
!1862 = !DILabel(scope: !1257, name: "store_c", file: !105, line: 722)
!1863 = !DILocation(line: 722, column: 5, scope: !1257)
!1864 = !DILocation(line: 723, column: 7, scope: !1257)
!1865 = !DILocation(line: 723, column: 7, scope: !1866)
!1866 = distinct !DILexicalBlock(scope: !1867, file: !105, line: 723, column: 7)
!1867 = distinct !DILexicalBlock(scope: !1257, file: !105, line: 723, column: 7)
!1868 = !DILocation(line: 723, column: 7, scope: !1867)
!1869 = !DILocation(line: 723, column: 7, scope: !1870)
!1870 = distinct !DILexicalBlock(scope: !1866, file: !105, line: 723, column: 7)
!1871 = !DILocation(line: 723, column: 7, scope: !1872)
!1872 = distinct !DILexicalBlock(scope: !1873, file: !105, line: 723, column: 7)
!1873 = distinct !DILexicalBlock(scope: !1870, file: !105, line: 723, column: 7)
!1874 = !DILocation(line: 723, column: 7, scope: !1873)
!1875 = !DILocation(line: 723, column: 7, scope: !1876)
!1876 = distinct !DILexicalBlock(scope: !1877, file: !105, line: 723, column: 7)
!1877 = distinct !DILexicalBlock(scope: !1870, file: !105, line: 723, column: 7)
!1878 = !DILocation(line: 723, column: 7, scope: !1877)
!1879 = !DILocation(line: 724, column: 7, scope: !1257)
!1880 = !DILocation(line: 724, column: 7, scope: !1881)
!1881 = distinct !DILexicalBlock(scope: !1882, file: !105, line: 724, column: 7)
!1882 = distinct !DILexicalBlock(scope: !1257, file: !105, line: 724, column: 7)
!1883 = !DILocation(line: 724, column: 7, scope: !1882)
!1884 = !DILocation(line: 726, column: 13, scope: !1885)
!1885 = distinct !DILexicalBlock(scope: !1257, file: !105, line: 726, column: 11)
!1886 = !DILocation(line: 726, column: 11, scope: !1257)
!1887 = !DILocation(line: 727, column: 38, scope: !1885)
!1888 = !DILocation(line: 727, column: 9, scope: !1885)
!1889 = !DILocation(line: 728, column: 5, scope: !1257)
!1890 = !DILocation(line: 400, column: 75, scope: !1246)
!1891 = !DILocation(line: 400, column: 3, scope: !1246)
!1892 = distinct !{!1892, !1255, !1893}
!1893 = !DILocation(line: 728, column: 5, scope: !1243)
!1894 = !DILocation(line: 730, column: 7, scope: !1895)
!1895 = distinct !DILexicalBlock(scope: !1103, file: !105, line: 730, column: 7)
!1896 = !DILocation(line: 730, column: 11, scope: !1895)
!1897 = !DILocation(line: 730, column: 16, scope: !1895)
!1898 = !DILocation(line: 730, column: 19, scope: !1895)
!1899 = !DILocation(line: 730, column: 33, scope: !1895)
!1900 = !DILocation(line: 731, column: 7, scope: !1895)
!1901 = !DILocation(line: 731, column: 10, scope: !1895)
!1902 = !DILocation(line: 730, column: 7, scope: !1103)
!1903 = !DILocation(line: 732, column: 5, scope: !1895)
!1904 = !DILocation(line: 738, column: 7, scope: !1905)
!1905 = distinct !DILexicalBlock(scope: !1103, file: !105, line: 738, column: 7)
!1906 = !DILocation(line: 738, column: 21, scope: !1905)
!1907 = !DILocation(line: 738, column: 51, scope: !1905)
!1908 = !DILocation(line: 738, column: 56, scope: !1905)
!1909 = !DILocation(line: 739, column: 7, scope: !1905)
!1910 = !DILocation(line: 739, column: 10, scope: !1905)
!1911 = !DILocation(line: 738, column: 7, scope: !1103)
!1912 = !DILocation(line: 741, column: 11, scope: !1913)
!1913 = distinct !DILexicalBlock(scope: !1914, file: !105, line: 741, column: 11)
!1914 = distinct !DILexicalBlock(scope: !1905, file: !105, line: 740, column: 5)
!1915 = !DILocation(line: 741, column: 11, scope: !1914)
!1916 = !DILocation(line: 742, column: 42, scope: !1913)
!1917 = !DILocation(line: 742, column: 50, scope: !1913)
!1918 = !DILocation(line: 742, column: 67, scope: !1913)
!1919 = !DILocation(line: 742, column: 72, scope: !1913)
!1920 = !DILocation(line: 744, column: 42, scope: !1913)
!1921 = !DILocation(line: 744, column: 49, scope: !1913)
!1922 = !DILocation(line: 745, column: 42, scope: !1913)
!1923 = !DILocation(line: 745, column: 54, scope: !1913)
!1924 = !DILocation(line: 742, column: 16, scope: !1913)
!1925 = !DILocation(line: 742, column: 9, scope: !1913)
!1926 = !DILocation(line: 746, column: 18, scope: !1927)
!1927 = distinct !DILexicalBlock(scope: !1913, file: !105, line: 746, column: 16)
!1928 = !DILocation(line: 746, column: 29, scope: !1927)
!1929 = !DILocation(line: 746, column: 32, scope: !1927)
!1930 = !DILocation(line: 746, column: 16, scope: !1913)
!1931 = !DILocation(line: 749, column: 24, scope: !1932)
!1932 = distinct !DILexicalBlock(scope: !1927, file: !105, line: 747, column: 9)
!1933 = !DILocation(line: 749, column: 22, scope: !1932)
!1934 = !DILocation(line: 750, column: 15, scope: !1932)
!1935 = !DILocation(line: 751, column: 11, scope: !1932)
!1936 = !DILocation(line: 753, column: 5, scope: !1914)
!1937 = !DILocation(line: 755, column: 7, scope: !1938)
!1938 = distinct !DILexicalBlock(scope: !1103, file: !105, line: 755, column: 7)
!1939 = !DILocation(line: 755, column: 20, scope: !1938)
!1940 = !DILocation(line: 755, column: 24, scope: !1938)
!1941 = !DILocation(line: 755, column: 7, scope: !1103)
!1942 = !DILocation(line: 756, column: 5, scope: !1938)
!1943 = !DILocation(line: 756, column: 13, scope: !1944)
!1944 = distinct !DILexicalBlock(scope: !1945, file: !105, line: 756, column: 5)
!1945 = distinct !DILexicalBlock(scope: !1938, file: !105, line: 756, column: 5)
!1946 = !DILocation(line: 756, column: 12, scope: !1944)
!1947 = !DILocation(line: 756, column: 5, scope: !1945)
!1948 = !DILocation(line: 757, column: 7, scope: !1944)
!1949 = !DILocation(line: 757, column: 7, scope: !1950)
!1950 = distinct !DILexicalBlock(scope: !1951, file: !105, line: 757, column: 7)
!1951 = distinct !DILexicalBlock(scope: !1944, file: !105, line: 757, column: 7)
!1952 = !DILocation(line: 757, column: 7, scope: !1951)
!1953 = !DILocation(line: 756, column: 39, scope: !1944)
!1954 = !DILocation(line: 756, column: 5, scope: !1944)
!1955 = distinct !{!1955, !1947, !1956}
!1956 = !DILocation(line: 757, column: 7, scope: !1945)
!1957 = !DILocation(line: 759, column: 7, scope: !1958)
!1958 = distinct !DILexicalBlock(scope: !1103, file: !105, line: 759, column: 7)
!1959 = !DILocation(line: 759, column: 13, scope: !1958)
!1960 = !DILocation(line: 759, column: 11, scope: !1958)
!1961 = !DILocation(line: 759, column: 7, scope: !1103)
!1962 = !DILocation(line: 760, column: 5, scope: !1958)
!1963 = !DILocation(line: 760, column: 12, scope: !1958)
!1964 = !DILocation(line: 760, column: 17, scope: !1958)
!1965 = !DILocation(line: 761, column: 10, scope: !1103)
!1966 = !DILocation(line: 761, column: 3, scope: !1103)
!1967 = !DILabel(scope: !1103, name: "force_outer_quoting_style", file: !105, line: 763)
!1968 = !DILocation(line: 763, column: 2, scope: !1103)
!1969 = !DILocation(line: 766, column: 7, scope: !1970)
!1970 = distinct !DILexicalBlock(scope: !1103, file: !105, line: 766, column: 7)
!1971 = !DILocation(line: 766, column: 21, scope: !1970)
!1972 = !DILocation(line: 766, column: 51, scope: !1970)
!1973 = !DILocation(line: 766, column: 54, scope: !1970)
!1974 = !DILocation(line: 766, column: 7, scope: !1103)
!1975 = !DILocation(line: 767, column: 19, scope: !1970)
!1976 = !DILocation(line: 767, column: 5, scope: !1970)
!1977 = !DILocation(line: 768, column: 36, scope: !1103)
!1978 = !DILocation(line: 768, column: 44, scope: !1103)
!1979 = !DILocation(line: 768, column: 56, scope: !1103)
!1980 = !DILocation(line: 768, column: 61, scope: !1103)
!1981 = !DILocation(line: 769, column: 36, scope: !1103)
!1982 = !DILocation(line: 770, column: 36, scope: !1103)
!1983 = !DILocation(line: 770, column: 42, scope: !1103)
!1984 = !DILocation(line: 771, column: 36, scope: !1103)
!1985 = !DILocation(line: 771, column: 48, scope: !1103)
!1986 = !DILocation(line: 768, column: 10, scope: !1103)
!1987 = !DILocation(line: 768, column: 3, scope: !1103)
!1988 = !DILocation(line: 772, column: 1, scope: !1103)
!1989 = !DILocalVariable(name: "buffer", arg: 1, scope: !1990, file: !105, line: 256, type: !8)
!1990 = distinct !DISubprogram(name: "quotearg_buffer_restyled", scope: !105, file: !105, line: 256, type: !1104, scopeLine: 262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1991, retainedNodes: !11)
!1991 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !1992, nameTableKind: None)
!1992 = !{!1993, !1995, !1997, !2006, !2008, !2010, !2017, !2019}
!1993 = !DIGlobalVariableExpression(var: !1994, expr: !DIExpression())
!1994 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !1991, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!1995 = !DIGlobalVariableExpression(var: !1996, expr: !DIExpression())
!1996 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !1991, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!1997 = !DIGlobalVariableExpression(var: !1998, expr: !DIExpression())
!1998 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !1991, file: !105, line: 1052, type: !1999, isLocal: false, isDefinition: true)
!1999 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !2000)
!2000 = !{!2001, !2002, !2003, !2004, !2005}
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !1999, file: !105, line: 68, baseType: !82, size: 32)
!2002 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1999, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !1999, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !1999, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!2005 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !1999, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!2006 = !DIGlobalVariableExpression(var: !2007, expr: !DIExpression())
!2007 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !1991, file: !105, line: 116, type: !1999, isLocal: true, isDefinition: true)
!2008 = !DIGlobalVariableExpression(var: !2009, expr: !DIExpression())
!2009 = distinct !DIGlobalVariable(name: "slot0", scope: !1991, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!2010 = !DIGlobalVariableExpression(var: !2011, expr: !DIExpression())
!2011 = distinct !DIGlobalVariable(name: "slotvec", scope: !1991, file: !105, line: 845, type: !2012, isLocal: true, isDefinition: true)
!2012 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2013, size: 64)
!2013 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !2014)
!2014 = !{!2015, !2016}
!2015 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2013, file: !105, line: 836, baseType: !99, size: 64)
!2016 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2013, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!2017 = !DIGlobalVariableExpression(var: !2018, expr: !DIExpression())
!2018 = distinct !DIGlobalVariable(name: "nslots", scope: !1991, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!2019 = !DIGlobalVariableExpression(var: !2020, expr: !DIExpression())
!2020 = distinct !DIGlobalVariable(name: "slotvec0", scope: !1991, file: !105, line: 844, type: !2013, isLocal: true, isDefinition: true)
!2021 = !DILocalVariable(name: "buffersize", arg: 2, scope: !1990, file: !105, line: 256, type: !99)
!2022 = !DILocalVariable(name: "arg", arg: 3, scope: !1990, file: !105, line: 257, type: !23)
!2023 = !DILocalVariable(name: "argsize", arg: 4, scope: !1990, file: !105, line: 257, type: !99)
!2024 = !DILocalVariable(name: "quoting_style", arg: 5, scope: !1990, file: !105, line: 258, type: !82)
!2025 = !DILocalVariable(name: "flags", arg: 6, scope: !1990, file: !105, line: 258, type: !6)
!2026 = !DILocalVariable(name: "quote_these_too", arg: 7, scope: !1990, file: !105, line: 259, type: !1106)
!2027 = !DILocalVariable(name: "left_quote", arg: 8, scope: !1990, file: !105, line: 260, type: !23)
!2028 = !DILocalVariable(name: "right_quote", arg: 9, scope: !1990, file: !105, line: 261, type: !23)
!2029 = !DILocalVariable(name: "i", scope: !1990, file: !105, line: 263, type: !99)
!2030 = !DILocalVariable(name: "len", scope: !1990, file: !105, line: 264, type: !99)
!2031 = !DILocalVariable(name: "orig_buffersize", scope: !1990, file: !105, line: 265, type: !99)
!2032 = !DILocalVariable(name: "quote_string", scope: !1990, file: !105, line: 266, type: !23)
!2033 = !DILocalVariable(name: "quote_string_len", scope: !1990, file: !105, line: 267, type: !99)
!2034 = !DILocalVariable(name: "backslash_escapes", scope: !1990, file: !105, line: 268, type: !41)
!2035 = !DILocalVariable(name: "unibyte_locale", scope: !1990, file: !105, line: 269, type: !41)
!2036 = !DILocalVariable(name: "elide_outer_quotes", scope: !1990, file: !105, line: 270, type: !41)
!2037 = !DILocalVariable(name: "pending_shell_escape_end", scope: !1990, file: !105, line: 271, type: !41)
!2038 = !DILocalVariable(name: "encountered_single_quote", scope: !1990, file: !105, line: 272, type: !41)
!2039 = !DILocalVariable(name: "all_c_and_shell_quote_compat", scope: !1990, file: !105, line: 273, type: !41)
!2040 = distinct !DISubprogram(name: "gettext_quote", scope: !105, file: !105, line: 207, type: !2041, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !79, retainedNodes: !11)
!2041 = !DISubroutineType(types: !2042)
!2042 = !{!23, !23, !82}
!2043 = !DILocalVariable(name: "msgid", arg: 1, scope: !2040, file: !105, line: 207, type: !23)
!2044 = !DILocation(line: 207, column: 28, scope: !2040)
!2045 = !DILocalVariable(name: "s", arg: 2, scope: !2040, file: !105, line: 207, type: !82)
!2046 = !DILocation(line: 207, column: 54, scope: !2040)
!2047 = !DILocalVariable(name: "translation", scope: !2040, file: !105, line: 209, type: !23)
!2048 = !DILocation(line: 209, column: 15, scope: !2040)
!2049 = !DILocation(line: 209, column: 29, scope: !2040)
!2050 = !DILocalVariable(name: "locale_code", scope: !2040, file: !105, line: 210, type: !23)
!2051 = !DILocation(line: 210, column: 15, scope: !2040)
!2052 = !DILocation(line: 212, column: 7, scope: !2053)
!2053 = distinct !DILexicalBlock(scope: !2040, file: !105, line: 212, column: 7)
!2054 = !DILocation(line: 212, column: 22, scope: !2053)
!2055 = !DILocation(line: 212, column: 19, scope: !2053)
!2056 = !DILocation(line: 212, column: 7, scope: !2040)
!2057 = !DILocation(line: 213, column: 12, scope: !2053)
!2058 = !DILocation(line: 213, column: 5, scope: !2053)
!2059 = !DILocation(line: 233, column: 17, scope: !2040)
!2060 = !DILocation(line: 233, column: 15, scope: !2040)
!2061 = !DILocation(line: 234, column: 7, scope: !2062)
!2062 = distinct !DILexicalBlock(scope: !2040, file: !105, line: 234, column: 7)
!2063 = !DILocation(line: 234, column: 7, scope: !2040)
!2064 = !DILocation(line: 235, column: 12, scope: !2062)
!2065 = !DILocation(line: 235, column: 21, scope: !2062)
!2066 = !DILocation(line: 235, column: 5, scope: !2062)
!2067 = !DILocation(line: 236, column: 7, scope: !2068)
!2068 = distinct !DILexicalBlock(scope: !2040, file: !105, line: 236, column: 7)
!2069 = !DILocation(line: 236, column: 7, scope: !2040)
!2070 = !DILocation(line: 237, column: 12, scope: !2068)
!2071 = !DILocation(line: 237, column: 21, scope: !2068)
!2072 = !DILocation(line: 237, column: 5, scope: !2068)
!2073 = !DILocation(line: 239, column: 11, scope: !2040)
!2074 = !DILocation(line: 239, column: 13, scope: !2040)
!2075 = !DILocation(line: 239, column: 3, scope: !2040)
!2076 = !DILocation(line: 240, column: 1, scope: !2040)
!2077 = !DILocalVariable(name: "msgid", arg: 1, scope: !2078, file: !105, line: 207, type: !23)
!2078 = distinct !DISubprogram(name: "gettext_quote", scope: !105, file: !105, line: 207, type: !2041, scopeLine: 208, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2079, retainedNodes: !11)
!2079 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !2080, nameTableKind: None)
!2080 = !{!2081, !2083, !2085, !2094, !2096, !2098, !2105, !2107}
!2081 = !DIGlobalVariableExpression(var: !2082, expr: !DIExpression())
!2082 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2079, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!2083 = !DIGlobalVariableExpression(var: !2084, expr: !DIExpression())
!2084 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2079, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!2085 = !DIGlobalVariableExpression(var: !2086, expr: !DIExpression())
!2086 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2079, file: !105, line: 1052, type: !2087, isLocal: false, isDefinition: true)
!2087 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !2088)
!2088 = !{!2089, !2090, !2091, !2092, !2093}
!2089 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2087, file: !105, line: 68, baseType: !82, size: 32)
!2090 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2087, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!2091 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2087, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!2092 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2087, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!2093 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2087, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!2094 = !DIGlobalVariableExpression(var: !2095, expr: !DIExpression())
!2095 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2079, file: !105, line: 116, type: !2087, isLocal: true, isDefinition: true)
!2096 = !DIGlobalVariableExpression(var: !2097, expr: !DIExpression())
!2097 = distinct !DIGlobalVariable(name: "slot0", scope: !2079, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!2098 = !DIGlobalVariableExpression(var: !2099, expr: !DIExpression())
!2099 = distinct !DIGlobalVariable(name: "slotvec", scope: !2079, file: !105, line: 845, type: !2100, isLocal: true, isDefinition: true)
!2100 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2101, size: 64)
!2101 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !2102)
!2102 = !{!2103, !2104}
!2103 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2101, file: !105, line: 836, baseType: !99, size: 64)
!2104 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2101, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!2105 = !DIGlobalVariableExpression(var: !2106, expr: !DIExpression())
!2106 = distinct !DIGlobalVariable(name: "nslots", scope: !2079, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!2107 = !DIGlobalVariableExpression(var: !2108, expr: !DIExpression())
!2108 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2079, file: !105, line: 844, type: !2101, isLocal: true, isDefinition: true)
!2109 = !DILocalVariable(name: "s", arg: 2, scope: !2078, file: !105, line: 207, type: !82)
!2110 = !DILocalVariable(name: "translation", scope: !2078, file: !105, line: 209, type: !23)
!2111 = !DILocalVariable(name: "locale_code", scope: !2078, file: !105, line: 210, type: !23)
!2112 = distinct !DISubprogram(name: "quotearg_char", scope: !105, file: !105, line: 991, type: !2113, scopeLine: 992, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !79, retainedNodes: !11)
!2113 = !DISubroutineType(types: !2114)
!2114 = !{!8, !23, !9}
!2115 = !DILocalVariable(name: "arg", arg: 1, scope: !2112, file: !105, line: 991, type: !23)
!2116 = !DILocation(line: 991, column: 28, scope: !2112)
!2117 = !DILocalVariable(name: "ch", arg: 2, scope: !2112, file: !105, line: 991, type: !9)
!2118 = !DILocation(line: 991, column: 38, scope: !2112)
!2119 = !DILocation(line: 993, column: 29, scope: !2112)
!2120 = !DILocation(line: 993, column: 44, scope: !2112)
!2121 = !DILocation(line: 993, column: 10, scope: !2112)
!2122 = !DILocation(line: 993, column: 3, scope: !2112)
!2123 = distinct !DISubprogram(name: "quotearg_colon", scope: !105, file: !105, line: 997, type: !2124, scopeLine: 998, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !79, retainedNodes: !11)
!2124 = !DISubroutineType(types: !2125)
!2125 = !{!8, !23}
!2126 = !DILocalVariable(name: "arg", arg: 1, scope: !2123, file: !105, line: 997, type: !23)
!2127 = !DILocation(line: 997, column: 29, scope: !2123)
!2128 = !DILocation(line: 999, column: 25, scope: !2123)
!2129 = !DILocation(line: 999, column: 10, scope: !2123)
!2130 = !DILocation(line: 999, column: 3, scope: !2123)
!2131 = distinct !DISubprogram(name: "quote_n_mem", scope: !105, file: !105, line: 1061, type: !2132, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !79, retainedNodes: !11)
!2132 = !DISubroutineType(types: !2133)
!2133 = !{!23, !6, !23, !99}
!2134 = !DILocalVariable(name: "n", arg: 1, scope: !2131, file: !105, line: 1061, type: !6)
!2135 = !DILocation(line: 1061, column: 18, scope: !2131)
!2136 = !DILocalVariable(name: "arg", arg: 2, scope: !2131, file: !105, line: 1061, type: !23)
!2137 = !DILocation(line: 1061, column: 33, scope: !2131)
!2138 = !DILocalVariable(name: "argsize", arg: 3, scope: !2131, file: !105, line: 1061, type: !99)
!2139 = !DILocation(line: 1061, column: 45, scope: !2131)
!2140 = !DILocation(line: 1063, column: 30, scope: !2131)
!2141 = !DILocation(line: 1063, column: 33, scope: !2131)
!2142 = !DILocation(line: 1063, column: 38, scope: !2131)
!2143 = !DILocation(line: 1063, column: 10, scope: !2131)
!2144 = !DILocation(line: 1063, column: 3, scope: !2131)
!2145 = !DILocalVariable(name: "n", arg: 1, scope: !2146, file: !105, line: 1061, type: !6)
!2146 = distinct !DISubprogram(name: "quote_n_mem", scope: !105, file: !105, line: 1061, type: !2132, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2147, retainedNodes: !11)
!2147 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !2148, nameTableKind: None)
!2148 = !{!2149, !2151, !2153, !2162, !2164, !2166, !2173, !2175}
!2149 = !DIGlobalVariableExpression(var: !2150, expr: !DIExpression())
!2150 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2147, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!2151 = !DIGlobalVariableExpression(var: !2152, expr: !DIExpression())
!2152 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2147, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!2153 = !DIGlobalVariableExpression(var: !2154, expr: !DIExpression())
!2154 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2147, file: !105, line: 1052, type: !2155, isLocal: false, isDefinition: true)
!2155 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !2156)
!2156 = !{!2157, !2158, !2159, !2160, !2161}
!2157 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2155, file: !105, line: 68, baseType: !82, size: 32)
!2158 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2155, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!2159 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2155, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!2160 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2155, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!2161 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2155, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!2162 = !DIGlobalVariableExpression(var: !2163, expr: !DIExpression())
!2163 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2147, file: !105, line: 116, type: !2155, isLocal: true, isDefinition: true)
!2164 = !DIGlobalVariableExpression(var: !2165, expr: !DIExpression())
!2165 = distinct !DIGlobalVariable(name: "slot0", scope: !2147, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!2166 = !DIGlobalVariableExpression(var: !2167, expr: !DIExpression())
!2167 = distinct !DIGlobalVariable(name: "slotvec", scope: !2147, file: !105, line: 845, type: !2168, isLocal: true, isDefinition: true)
!2168 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2169, size: 64)
!2169 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !2170)
!2170 = !{!2171, !2172}
!2171 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2169, file: !105, line: 836, baseType: !99, size: 64)
!2172 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2169, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!2173 = !DIGlobalVariableExpression(var: !2174, expr: !DIExpression())
!2174 = distinct !DIGlobalVariable(name: "nslots", scope: !2147, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!2175 = !DIGlobalVariableExpression(var: !2176, expr: !DIExpression())
!2176 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2147, file: !105, line: 844, type: !2169, isLocal: true, isDefinition: true)
!2177 = !DILocalVariable(name: "arg", arg: 2, scope: !2146, file: !105, line: 1061, type: !23)
!2178 = !DILocalVariable(name: "argsize", arg: 3, scope: !2146, file: !105, line: 1061, type: !99)
!2179 = distinct !DISubprogram(name: "quote_n", scope: !105, file: !105, line: 1073, type: !2180, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !79, retainedNodes: !11)
!2180 = !DISubroutineType(types: !2181)
!2181 = !{!23, !6, !23}
!2182 = !DILocalVariable(name: "n", arg: 1, scope: !2179, file: !105, line: 1073, type: !6)
!2183 = !DILocation(line: 1073, column: 14, scope: !2179)
!2184 = !DILocalVariable(name: "arg", arg: 2, scope: !2179, file: !105, line: 1073, type: !23)
!2185 = !DILocation(line: 1073, column: 29, scope: !2179)
!2186 = !DILocation(line: 1075, column: 23, scope: !2179)
!2187 = !DILocation(line: 1075, column: 26, scope: !2179)
!2188 = !DILocation(line: 1075, column: 10, scope: !2179)
!2189 = !DILocation(line: 1075, column: 3, scope: !2179)
!2190 = !DILocalVariable(name: "n", arg: 1, scope: !2191, file: !105, line: 1073, type: !6)
!2191 = distinct !DISubprogram(name: "quote_n", scope: !105, file: !105, line: 1073, type: !2180, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2192, retainedNodes: !11)
!2192 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !2193, nameTableKind: None)
!2193 = !{!2194, !2196, !2198, !2207, !2209, !2211, !2218, !2220}
!2194 = !DIGlobalVariableExpression(var: !2195, expr: !DIExpression())
!2195 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2192, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!2196 = !DIGlobalVariableExpression(var: !2197, expr: !DIExpression())
!2197 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2192, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!2198 = !DIGlobalVariableExpression(var: !2199, expr: !DIExpression())
!2199 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2192, file: !105, line: 1052, type: !2200, isLocal: false, isDefinition: true)
!2200 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !2201)
!2201 = !{!2202, !2203, !2204, !2205, !2206}
!2202 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2200, file: !105, line: 68, baseType: !82, size: 32)
!2203 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2200, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!2204 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2200, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!2205 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2200, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!2206 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2200, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!2207 = !DIGlobalVariableExpression(var: !2208, expr: !DIExpression())
!2208 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2192, file: !105, line: 116, type: !2200, isLocal: true, isDefinition: true)
!2209 = !DIGlobalVariableExpression(var: !2210, expr: !DIExpression())
!2210 = distinct !DIGlobalVariable(name: "slot0", scope: !2192, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!2211 = !DIGlobalVariableExpression(var: !2212, expr: !DIExpression())
!2212 = distinct !DIGlobalVariable(name: "slotvec", scope: !2192, file: !105, line: 845, type: !2213, isLocal: true, isDefinition: true)
!2213 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2214, size: 64)
!2214 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !2215)
!2215 = !{!2216, !2217}
!2216 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2214, file: !105, line: 836, baseType: !99, size: 64)
!2217 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2214, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!2218 = !DIGlobalVariableExpression(var: !2219, expr: !DIExpression())
!2219 = distinct !DIGlobalVariable(name: "nslots", scope: !2192, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!2220 = !DIGlobalVariableExpression(var: !2221, expr: !DIExpression())
!2221 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2192, file: !105, line: 844, type: !2214, isLocal: true, isDefinition: true)
!2222 = !DILocalVariable(name: "arg", arg: 2, scope: !2191, file: !105, line: 1073, type: !23)
!2223 = distinct !DISubprogram(name: "quote", scope: !105, file: !105, line: 1079, type: !2224, scopeLine: 1080, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !79, retainedNodes: !11)
!2224 = !DISubroutineType(types: !2225)
!2225 = !{!23, !23}
!2226 = !DILocalVariable(name: "arg", arg: 1, scope: !2223, file: !105, line: 1079, type: !23)
!2227 = !DILocation(line: 1079, column: 20, scope: !2223)
!2228 = !DILocation(line: 1081, column: 22, scope: !2223)
!2229 = !DILocation(line: 1081, column: 10, scope: !2223)
!2230 = !DILocation(line: 1081, column: 3, scope: !2223)
!2231 = !DILocalVariable(name: "arg", arg: 1, scope: !2232, file: !105, line: 1079, type: !23)
!2232 = distinct !DISubprogram(name: "quote", scope: !105, file: !105, line: 1079, type: !2224, scopeLine: 1080, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2233, retainedNodes: !11)
!2233 = distinct !DICompileUnit(language: DW_LANG_C99, file: !80, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !81, retainedTypes: !97, globals: !2234, nameTableKind: None)
!2234 = !{!2235, !2237, !2239, !2248, !2250, !2252, !2259, !2261}
!2235 = !DIGlobalVariableExpression(var: !2236, expr: !DIExpression())
!2236 = distinct !DIGlobalVariable(name: "quoting_style_args", scope: !2233, file: !105, line: 85, type: !106, isLocal: false, isDefinition: true)
!2237 = !DIGlobalVariableExpression(var: !2238, expr: !DIExpression())
!2238 = distinct !DIGlobalVariable(name: "quoting_style_vals", scope: !2233, file: !105, line: 101, type: !112, isLocal: false, isDefinition: true)
!2239 = !DIGlobalVariableExpression(var: !2240, expr: !DIExpression())
!2240 = distinct !DIGlobalVariable(name: "quote_quoting_options", scope: !2233, file: !105, line: 1052, type: !2241, isLocal: false, isDefinition: true)
!2241 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quoting_options", file: !105, line: 65, size: 448, elements: !2242)
!2242 = !{!2243, !2244, !2245, !2246, !2247}
!2243 = !DIDerivedType(tag: DW_TAG_member, name: "style", scope: !2241, file: !105, line: 68, baseType: !82, size: 32)
!2244 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2241, file: !105, line: 71, baseType: !6, size: 32, offset: 32)
!2245 = !DIDerivedType(tag: DW_TAG_member, name: "quote_these_too", scope: !2241, file: !105, line: 75, baseType: !123, size: 256, offset: 64)
!2246 = !DIDerivedType(tag: DW_TAG_member, name: "left_quote", scope: !2241, file: !105, line: 78, baseType: !23, size: 64, offset: 320)
!2247 = !DIDerivedType(tag: DW_TAG_member, name: "right_quote", scope: !2241, file: !105, line: 81, baseType: !23, size: 64, offset: 384)
!2248 = !DIGlobalVariableExpression(var: !2249, expr: !DIExpression())
!2249 = distinct !DIGlobalVariable(name: "default_quoting_options", scope: !2233, file: !105, line: 116, type: !2241, isLocal: true, isDefinition: true)
!2250 = !DIGlobalVariableExpression(var: !2251, expr: !DIExpression())
!2251 = distinct !DIGlobalVariable(name: "slot0", scope: !2233, file: !105, line: 842, type: !128, isLocal: true, isDefinition: true)
!2252 = !DIGlobalVariableExpression(var: !2253, expr: !DIExpression())
!2253 = distinct !DIGlobalVariable(name: "slotvec", scope: !2233, file: !105, line: 845, type: !2254, isLocal: true, isDefinition: true)
!2254 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2255, size: 64)
!2255 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "slotvec", file: !105, line: 834, size: 128, elements: !2256)
!2256 = !{!2257, !2258}
!2257 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2255, file: !105, line: 836, baseType: !99, size: 64)
!2258 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2255, file: !105, line: 837, baseType: !8, size: 64, offset: 64)
!2259 = !DIGlobalVariableExpression(var: !2260, expr: !DIExpression())
!2260 = distinct !DIGlobalVariable(name: "nslots", scope: !2233, file: !105, line: 843, type: !6, isLocal: true, isDefinition: true)
!2261 = !DIGlobalVariableExpression(var: !2262, expr: !DIExpression())
!2262 = distinct !DIGlobalVariable(name: "slotvec0", scope: !2233, file: !105, line: 844, type: !2255, isLocal: true, isDefinition: true)
!2263 = distinct !DISubprogram(name: "version_etc_arn", scope: !2264, file: !2264, line: 61, type: !2265, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !151, retainedNodes: !11)
!2264 = !DIFile(filename: "lib/version-etc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2265 = !DISubroutineType(types: !2266)
!2266 = !{null, !2267, !23, !23, !23, !2322, !99}
!2267 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2268, size: 64)
!2268 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2269, line: 7, baseType: !2270)
!2269 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!2270 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2271, line: 49, size: 1728, elements: !2272)
!2271 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!2272 = !{!2273, !2274, !2275, !2276, !2277, !2278, !2279, !2280, !2281, !2282, !2283, !2284, !2285, !2288, !2290, !2291, !2292, !2296, !2297, !2299, !2303, !2306, !2308, !2311, !2314, !2315, !2316, !2317, !2318}
!2273 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2270, file: !2271, line: 51, baseType: !6, size: 32)
!2274 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2270, file: !2271, line: 54, baseType: !8, size: 64, offset: 64)
!2275 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2270, file: !2271, line: 55, baseType: !8, size: 64, offset: 128)
!2276 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2270, file: !2271, line: 56, baseType: !8, size: 64, offset: 192)
!2277 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2270, file: !2271, line: 57, baseType: !8, size: 64, offset: 256)
!2278 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2270, file: !2271, line: 58, baseType: !8, size: 64, offset: 320)
!2279 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2270, file: !2271, line: 59, baseType: !8, size: 64, offset: 384)
!2280 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2270, file: !2271, line: 60, baseType: !8, size: 64, offset: 448)
!2281 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2270, file: !2271, line: 61, baseType: !8, size: 64, offset: 512)
!2282 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2270, file: !2271, line: 64, baseType: !8, size: 64, offset: 576)
!2283 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2270, file: !2271, line: 65, baseType: !8, size: 64, offset: 640)
!2284 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2270, file: !2271, line: 66, baseType: !8, size: 64, offset: 704)
!2285 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2270, file: !2271, line: 68, baseType: !2286, size: 64, offset: 768)
!2286 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2287, size: 64)
!2287 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !2271, line: 36, flags: DIFlagFwdDecl)
!2288 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2270, file: !2271, line: 70, baseType: !2289, size: 64, offset: 832)
!2289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2270, size: 64)
!2290 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2270, file: !2271, line: 72, baseType: !6, size: 32, offset: 896)
!2291 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2270, file: !2271, line: 73, baseType: !6, size: 32, offset: 928)
!2292 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2270, file: !2271, line: 74, baseType: !2293, size: 64, offset: 960)
!2293 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !2294, line: 152, baseType: !2295)
!2294 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!2295 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!2296 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2270, file: !2271, line: 77, baseType: !98, size: 16, offset: 1024)
!2297 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2270, file: !2271, line: 78, baseType: !2298, size: 8, offset: 1040)
!2298 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!2299 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2270, file: !2271, line: 79, baseType: !2300, size: 8, offset: 1048)
!2300 = !DICompositeType(tag: DW_TAG_array_type, baseType: !9, size: 8, elements: !2301)
!2301 = !{!2302}
!2302 = !DISubrange(count: 1)
!2303 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2270, file: !2271, line: 81, baseType: !2304, size: 64, offset: 1088)
!2304 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2305, size: 64)
!2305 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !2271, line: 43, baseType: null)
!2306 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2270, file: !2271, line: 89, baseType: !2307, size: 64, offset: 1152)
!2307 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !2294, line: 153, baseType: !2295)
!2308 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2270, file: !2271, line: 91, baseType: !2309, size: 64, offset: 1216)
!2309 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2310, size: 64)
!2310 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !2271, line: 37, flags: DIFlagFwdDecl)
!2311 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2270, file: !2271, line: 92, baseType: !2312, size: 64, offset: 1280)
!2312 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2313, size: 64)
!2313 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !2271, line: 38, flags: DIFlagFwdDecl)
!2314 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2270, file: !2271, line: 93, baseType: !2289, size: 64, offset: 1344)
!2315 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2270, file: !2271, line: 94, baseType: !13, size: 64, offset: 1408)
!2316 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2270, file: !2271, line: 95, baseType: !99, size: 64, offset: 1472)
!2317 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2270, file: !2271, line: 96, baseType: !6, size: 32, offset: 1536)
!2318 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2270, file: !2271, line: 98, baseType: !2319, size: 160, offset: 1568)
!2319 = !DICompositeType(tag: DW_TAG_array_type, baseType: !9, size: 160, elements: !2320)
!2320 = !{!2321}
!2321 = !DISubrange(count: 20)
!2322 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !107, size: 64)
!2323 = !DILocalVariable(name: "stream", arg: 1, scope: !2263, file: !2264, line: 61, type: !2267)
!2324 = !DILocation(line: 61, column: 24, scope: !2263)
!2325 = !DILocalVariable(name: "command_name", arg: 2, scope: !2263, file: !2264, line: 62, type: !23)
!2326 = !DILocation(line: 62, column: 30, scope: !2263)
!2327 = !DILocalVariable(name: "package", arg: 3, scope: !2263, file: !2264, line: 62, type: !23)
!2328 = !DILocation(line: 62, column: 56, scope: !2263)
!2329 = !DILocalVariable(name: "version", arg: 4, scope: !2263, file: !2264, line: 63, type: !23)
!2330 = !DILocation(line: 63, column: 30, scope: !2263)
!2331 = !DILocalVariable(name: "authors", arg: 5, scope: !2263, file: !2264, line: 64, type: !2322)
!2332 = !DILocation(line: 64, column: 39, scope: !2263)
!2333 = !DILocalVariable(name: "n_authors", arg: 6, scope: !2263, file: !2264, line: 64, type: !99)
!2334 = !DILocation(line: 64, column: 55, scope: !2263)
!2335 = !DILocation(line: 66, column: 7, scope: !2336)
!2336 = distinct !DILexicalBlock(scope: !2263, file: !2264, line: 66, column: 7)
!2337 = !DILocation(line: 66, column: 7, scope: !2263)
!2338 = !DILocation(line: 67, column: 14, scope: !2336)
!2339 = !DILocation(line: 67, column: 38, scope: !2336)
!2340 = !DILocation(line: 67, column: 52, scope: !2336)
!2341 = !DILocation(line: 67, column: 61, scope: !2336)
!2342 = !DILocation(line: 67, column: 5, scope: !2336)
!2343 = !DILocation(line: 69, column: 14, scope: !2336)
!2344 = !DILocation(line: 69, column: 33, scope: !2336)
!2345 = !DILocation(line: 69, column: 42, scope: !2336)
!2346 = !DILocation(line: 69, column: 5, scope: !2336)
!2347 = !DILocation(line: 83, column: 12, scope: !2263)
!2348 = !DILocation(line: 83, column: 43, scope: !2263)
!2349 = !DILocation(line: 83, column: 3, scope: !2263)
!2350 = !DILocation(line: 85, column: 3, scope: !2263)
!2351 = !DILocation(line: 88, column: 12, scope: !2263)
!2352 = !DILocation(line: 88, column: 20, scope: !2263)
!2353 = !DILocation(line: 88, column: 3, scope: !2263)
!2354 = !DILocation(line: 95, column: 3, scope: !2263)
!2355 = !DILocation(line: 97, column: 11, scope: !2263)
!2356 = !DILocation(line: 97, column: 3, scope: !2263)
!2357 = !DILocation(line: 102, column: 7, scope: !2358)
!2358 = distinct !DILexicalBlock(scope: !2263, file: !2264, line: 98, column: 5)
!2359 = !DILocation(line: 105, column: 16, scope: !2358)
!2360 = !DILocation(line: 105, column: 24, scope: !2358)
!2361 = !DILocation(line: 105, column: 47, scope: !2358)
!2362 = !DILocation(line: 105, column: 7, scope: !2358)
!2363 = !DILocation(line: 106, column: 7, scope: !2358)
!2364 = !DILocation(line: 109, column: 16, scope: !2358)
!2365 = !DILocation(line: 109, column: 24, scope: !2358)
!2366 = !DILocation(line: 109, column: 54, scope: !2358)
!2367 = !DILocation(line: 109, column: 66, scope: !2358)
!2368 = !DILocation(line: 109, column: 7, scope: !2358)
!2369 = !DILocation(line: 110, column: 7, scope: !2358)
!2370 = !DILocation(line: 113, column: 16, scope: !2358)
!2371 = !DILocation(line: 113, column: 24, scope: !2358)
!2372 = !DILocation(line: 114, column: 16, scope: !2358)
!2373 = !DILocation(line: 114, column: 28, scope: !2358)
!2374 = !DILocation(line: 114, column: 40, scope: !2358)
!2375 = !DILocation(line: 113, column: 7, scope: !2358)
!2376 = !DILocation(line: 115, column: 7, scope: !2358)
!2377 = !DILocation(line: 120, column: 16, scope: !2358)
!2378 = !DILocation(line: 120, column: 24, scope: !2358)
!2379 = !DILocation(line: 121, column: 16, scope: !2358)
!2380 = !DILocation(line: 121, column: 28, scope: !2358)
!2381 = !DILocation(line: 121, column: 40, scope: !2358)
!2382 = !DILocation(line: 121, column: 52, scope: !2358)
!2383 = !DILocation(line: 120, column: 7, scope: !2358)
!2384 = !DILocation(line: 122, column: 7, scope: !2358)
!2385 = !DILocation(line: 127, column: 16, scope: !2358)
!2386 = !DILocation(line: 127, column: 24, scope: !2358)
!2387 = !DILocation(line: 128, column: 16, scope: !2358)
!2388 = !DILocation(line: 128, column: 28, scope: !2358)
!2389 = !DILocation(line: 128, column: 40, scope: !2358)
!2390 = !DILocation(line: 128, column: 52, scope: !2358)
!2391 = !DILocation(line: 128, column: 64, scope: !2358)
!2392 = !DILocation(line: 127, column: 7, scope: !2358)
!2393 = !DILocation(line: 129, column: 7, scope: !2358)
!2394 = !DILocation(line: 134, column: 16, scope: !2358)
!2395 = !DILocation(line: 134, column: 24, scope: !2358)
!2396 = !DILocation(line: 135, column: 16, scope: !2358)
!2397 = !DILocation(line: 135, column: 28, scope: !2358)
!2398 = !DILocation(line: 135, column: 40, scope: !2358)
!2399 = !DILocation(line: 135, column: 52, scope: !2358)
!2400 = !DILocation(line: 135, column: 64, scope: !2358)
!2401 = !DILocation(line: 136, column: 16, scope: !2358)
!2402 = !DILocation(line: 134, column: 7, scope: !2358)
!2403 = !DILocation(line: 137, column: 7, scope: !2358)
!2404 = !DILocation(line: 142, column: 16, scope: !2358)
!2405 = !DILocation(line: 142, column: 24, scope: !2358)
!2406 = !DILocation(line: 143, column: 16, scope: !2358)
!2407 = !DILocation(line: 143, column: 28, scope: !2358)
!2408 = !DILocation(line: 143, column: 40, scope: !2358)
!2409 = !DILocation(line: 143, column: 52, scope: !2358)
!2410 = !DILocation(line: 143, column: 64, scope: !2358)
!2411 = !DILocation(line: 144, column: 16, scope: !2358)
!2412 = !DILocation(line: 144, column: 28, scope: !2358)
!2413 = !DILocation(line: 142, column: 7, scope: !2358)
!2414 = !DILocation(line: 145, column: 7, scope: !2358)
!2415 = !DILocation(line: 150, column: 16, scope: !2358)
!2416 = !DILocation(line: 150, column: 24, scope: !2358)
!2417 = !DILocation(line: 152, column: 17, scope: !2358)
!2418 = !DILocation(line: 152, column: 29, scope: !2358)
!2419 = !DILocation(line: 152, column: 41, scope: !2358)
!2420 = !DILocation(line: 152, column: 53, scope: !2358)
!2421 = !DILocation(line: 152, column: 65, scope: !2358)
!2422 = !DILocation(line: 153, column: 17, scope: !2358)
!2423 = !DILocation(line: 153, column: 29, scope: !2358)
!2424 = !DILocation(line: 153, column: 41, scope: !2358)
!2425 = !DILocation(line: 150, column: 7, scope: !2358)
!2426 = !DILocation(line: 154, column: 7, scope: !2358)
!2427 = !DILocation(line: 159, column: 16, scope: !2358)
!2428 = !DILocation(line: 159, column: 24, scope: !2358)
!2429 = !DILocation(line: 161, column: 16, scope: !2358)
!2430 = !DILocation(line: 161, column: 28, scope: !2358)
!2431 = !DILocation(line: 161, column: 40, scope: !2358)
!2432 = !DILocation(line: 161, column: 52, scope: !2358)
!2433 = !DILocation(line: 161, column: 64, scope: !2358)
!2434 = !DILocation(line: 162, column: 16, scope: !2358)
!2435 = !DILocation(line: 162, column: 28, scope: !2358)
!2436 = !DILocation(line: 162, column: 40, scope: !2358)
!2437 = !DILocation(line: 162, column: 52, scope: !2358)
!2438 = !DILocation(line: 159, column: 7, scope: !2358)
!2439 = !DILocation(line: 163, column: 7, scope: !2358)
!2440 = !DILocation(line: 170, column: 16, scope: !2358)
!2441 = !DILocation(line: 170, column: 24, scope: !2358)
!2442 = !DILocation(line: 172, column: 17, scope: !2358)
!2443 = !DILocation(line: 172, column: 29, scope: !2358)
!2444 = !DILocation(line: 172, column: 41, scope: !2358)
!2445 = !DILocation(line: 172, column: 53, scope: !2358)
!2446 = !DILocation(line: 172, column: 65, scope: !2358)
!2447 = !DILocation(line: 173, column: 17, scope: !2358)
!2448 = !DILocation(line: 173, column: 29, scope: !2358)
!2449 = !DILocation(line: 173, column: 41, scope: !2358)
!2450 = !DILocation(line: 173, column: 53, scope: !2358)
!2451 = !DILocation(line: 170, column: 7, scope: !2358)
!2452 = !DILocation(line: 174, column: 7, scope: !2358)
!2453 = !DILocation(line: 176, column: 1, scope: !2263)
!2454 = distinct !DISubprogram(name: "version_etc_va", scope: !2264, file: !2264, line: 199, type: !2455, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !151, retainedNodes: !11)
!2455 = !DISubroutineType(types: !2456)
!2456 = !{null, !2267, !23, !23, !23, !2457}
!2457 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2458, size: 64)
!2458 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !152, line: 192, size: 192, elements: !2459)
!2459 = !{!2460, !2461, !2462, !2463}
!2460 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !2458, file: !152, line: 192, baseType: !84, size: 32)
!2461 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !2458, file: !152, line: 192, baseType: !84, size: 32, offset: 32)
!2462 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !2458, file: !152, line: 192, baseType: !13, size: 64, offset: 64)
!2463 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !2458, file: !152, line: 192, baseType: !13, size: 64, offset: 128)
!2464 = !DILocalVariable(name: "stream", arg: 1, scope: !2454, file: !2264, line: 199, type: !2267)
!2465 = !DILocation(line: 199, column: 23, scope: !2454)
!2466 = !DILocalVariable(name: "command_name", arg: 2, scope: !2454, file: !2264, line: 200, type: !23)
!2467 = !DILocation(line: 200, column: 29, scope: !2454)
!2468 = !DILocalVariable(name: "package", arg: 3, scope: !2454, file: !2264, line: 200, type: !23)
!2469 = !DILocation(line: 200, column: 55, scope: !2454)
!2470 = !DILocalVariable(name: "version", arg: 4, scope: !2454, file: !2264, line: 201, type: !23)
!2471 = !DILocation(line: 201, column: 29, scope: !2454)
!2472 = !DILocalVariable(name: "authors", arg: 5, scope: !2454, file: !2264, line: 201, type: !2457)
!2473 = !DILocation(line: 201, column: 46, scope: !2454)
!2474 = !DILocalVariable(name: "n_authors", scope: !2454, file: !2264, line: 203, type: !99)
!2475 = !DILocation(line: 203, column: 10, scope: !2454)
!2476 = !DILocalVariable(name: "authtab", scope: !2454, file: !2264, line: 204, type: !2477)
!2477 = !DICompositeType(tag: DW_TAG_array_type, baseType: !23, size: 640, elements: !114)
!2478 = !DILocation(line: 204, column: 15, scope: !2454)
!2479 = !DILocation(line: 206, column: 18, scope: !2480)
!2480 = distinct !DILexicalBlock(scope: !2454, file: !2264, line: 206, column: 3)
!2481 = !DILocation(line: 206, column: 8, scope: !2480)
!2482 = !DILocation(line: 207, column: 8, scope: !2483)
!2483 = distinct !DILexicalBlock(scope: !2480, file: !2264, line: 206, column: 3)
!2484 = !DILocation(line: 207, column: 18, scope: !2483)
!2485 = !DILocation(line: 208, column: 10, scope: !2483)
!2486 = !DILocation(line: 208, column: 35, scope: !2483)
!2487 = !DILocation(line: 208, column: 22, scope: !2483)
!2488 = !DILocation(line: 208, column: 14, scope: !2483)
!2489 = !DILocation(line: 208, column: 33, scope: !2483)
!2490 = !DILocation(line: 208, column: 67, scope: !2483)
!2491 = !DILocation(line: 0, scope: !2483)
!2492 = !DILocation(line: 206, column: 3, scope: !2480)
!2493 = !DILocation(line: 209, column: 17, scope: !2483)
!2494 = !DILocation(line: 206, column: 3, scope: !2483)
!2495 = distinct !{!2495, !2492, !2496}
!2496 = !DILocation(line: 210, column: 5, scope: !2480)
!2497 = !DILocation(line: 211, column: 20, scope: !2454)
!2498 = !DILocation(line: 211, column: 28, scope: !2454)
!2499 = !DILocation(line: 211, column: 42, scope: !2454)
!2500 = !DILocation(line: 211, column: 51, scope: !2454)
!2501 = !DILocation(line: 212, column: 20, scope: !2454)
!2502 = !DILocation(line: 212, column: 29, scope: !2454)
!2503 = !DILocation(line: 211, column: 3, scope: !2454)
!2504 = !DILocation(line: 213, column: 1, scope: !2454)
!2505 = !DILocalVariable(name: "stream", arg: 1, scope: !2506, file: !2264, line: 199, type: !2509)
!2506 = distinct !DISubprogram(name: "version_etc_va", scope: !2264, file: !2264, line: 199, type: !2507, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2550, retainedNodes: !11)
!2507 = !DISubroutineType(types: !2508)
!2508 = !{null, !2509, !23, !23, !23, !2543}
!2509 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2510, size: 64)
!2510 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2269, line: 7, baseType: !2511)
!2511 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2271, line: 49, size: 1728, elements: !2512)
!2512 = !{!2513, !2514, !2515, !2516, !2517, !2518, !2519, !2520, !2521, !2522, !2523, !2524, !2525, !2526, !2528, !2529, !2530, !2531, !2532, !2533, !2534, !2535, !2536, !2537, !2538, !2539, !2540, !2541, !2542}
!2513 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2511, file: !2271, line: 51, baseType: !6, size: 32)
!2514 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2511, file: !2271, line: 54, baseType: !8, size: 64, offset: 64)
!2515 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2511, file: !2271, line: 55, baseType: !8, size: 64, offset: 128)
!2516 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2511, file: !2271, line: 56, baseType: !8, size: 64, offset: 192)
!2517 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2511, file: !2271, line: 57, baseType: !8, size: 64, offset: 256)
!2518 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2511, file: !2271, line: 58, baseType: !8, size: 64, offset: 320)
!2519 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2511, file: !2271, line: 59, baseType: !8, size: 64, offset: 384)
!2520 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2511, file: !2271, line: 60, baseType: !8, size: 64, offset: 448)
!2521 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2511, file: !2271, line: 61, baseType: !8, size: 64, offset: 512)
!2522 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2511, file: !2271, line: 64, baseType: !8, size: 64, offset: 576)
!2523 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2511, file: !2271, line: 65, baseType: !8, size: 64, offset: 640)
!2524 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2511, file: !2271, line: 66, baseType: !8, size: 64, offset: 704)
!2525 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2511, file: !2271, line: 68, baseType: !2286, size: 64, offset: 768)
!2526 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2511, file: !2271, line: 70, baseType: !2527, size: 64, offset: 832)
!2527 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2511, size: 64)
!2528 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2511, file: !2271, line: 72, baseType: !6, size: 32, offset: 896)
!2529 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2511, file: !2271, line: 73, baseType: !6, size: 32, offset: 928)
!2530 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2511, file: !2271, line: 74, baseType: !2293, size: 64, offset: 960)
!2531 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2511, file: !2271, line: 77, baseType: !98, size: 16, offset: 1024)
!2532 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2511, file: !2271, line: 78, baseType: !2298, size: 8, offset: 1040)
!2533 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2511, file: !2271, line: 79, baseType: !2300, size: 8, offset: 1048)
!2534 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2511, file: !2271, line: 81, baseType: !2304, size: 64, offset: 1088)
!2535 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2511, file: !2271, line: 89, baseType: !2307, size: 64, offset: 1152)
!2536 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2511, file: !2271, line: 91, baseType: !2309, size: 64, offset: 1216)
!2537 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2511, file: !2271, line: 92, baseType: !2312, size: 64, offset: 1280)
!2538 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2511, file: !2271, line: 93, baseType: !2527, size: 64, offset: 1344)
!2539 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2511, file: !2271, line: 94, baseType: !13, size: 64, offset: 1408)
!2540 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2511, file: !2271, line: 95, baseType: !99, size: 64, offset: 1472)
!2541 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2511, file: !2271, line: 96, baseType: !6, size: 32, offset: 1536)
!2542 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2511, file: !2271, line: 98, baseType: !2319, size: 160, offset: 1568)
!2543 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2544, size: 64)
!2544 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !152, line: 192, size: 192, elements: !2545)
!2545 = !{!2546, !2547, !2548, !2549}
!2546 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !2544, file: !152, line: 192, baseType: !84, size: 32)
!2547 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !2544, file: !152, line: 192, baseType: !84, size: 32, offset: 32)
!2548 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !2544, file: !152, line: 192, baseType: !13, size: 64, offset: 64)
!2549 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !2544, file: !152, line: 192, baseType: !13, size: 64, offset: 128)
!2550 = distinct !DICompileUnit(language: DW_LANG_C99, file: !152, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!2551 = !DILocalVariable(name: "command_name", arg: 2, scope: !2506, file: !2264, line: 200, type: !23)
!2552 = !DILocalVariable(name: "package", arg: 3, scope: !2506, file: !2264, line: 200, type: !23)
!2553 = !DILocalVariable(name: "version", arg: 4, scope: !2506, file: !2264, line: 201, type: !23)
!2554 = !DILocalVariable(name: "authors", arg: 5, scope: !2506, file: !2264, line: 201, type: !2543)
!2555 = !DILocalVariable(name: "n_authors", scope: !2506, file: !2264, line: 203, type: !99)
!2556 = !DILocalVariable(name: "authtab", scope: !2506, file: !2264, line: 204, type: !2477)
!2557 = distinct !DISubprogram(name: "version_etc", scope: !2264, file: !2264, line: 230, type: !2558, scopeLine: 233, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !151, retainedNodes: !11)
!2558 = !DISubroutineType(types: !2559)
!2559 = !{null, !2267, !23, !23, !23, null}
!2560 = !DILocalVariable(name: "stream", arg: 1, scope: !2557, file: !2264, line: 230, type: !2267)
!2561 = !DILocation(line: 230, column: 20, scope: !2557)
!2562 = !DILocalVariable(name: "command_name", arg: 2, scope: !2557, file: !2264, line: 231, type: !23)
!2563 = !DILocation(line: 231, column: 26, scope: !2557)
!2564 = !DILocalVariable(name: "package", arg: 3, scope: !2557, file: !2264, line: 231, type: !23)
!2565 = !DILocation(line: 231, column: 52, scope: !2557)
!2566 = !DILocalVariable(name: "version", arg: 4, scope: !2557, file: !2264, line: 232, type: !23)
!2567 = !DILocation(line: 232, column: 26, scope: !2557)
!2568 = !DILocalVariable(name: "authors", scope: !2557, file: !2264, line: 234, type: !2569)
!2569 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !2570, line: 52, baseType: !2571)
!2570 = !DIFile(filename: "/usr/include/stdio.h", directory: "")
!2571 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !2572, line: 32, baseType: !2573)
!2572 = !DIFile(filename: "/usr/lib/llvm-9/lib/clang/9.0.1/include/stdarg.h", directory: "")
!2573 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !152, line: 234, baseType: !2574)
!2574 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2458, size: 192, elements: !2301)
!2575 = !DILocation(line: 234, column: 11, scope: !2557)
!2576 = !DILocation(line: 236, column: 3, scope: !2557)
!2577 = !DILocation(line: 237, column: 19, scope: !2557)
!2578 = !DILocation(line: 237, column: 27, scope: !2557)
!2579 = !DILocation(line: 237, column: 41, scope: !2557)
!2580 = !DILocation(line: 237, column: 50, scope: !2557)
!2581 = !DILocation(line: 237, column: 59, scope: !2557)
!2582 = !DILocation(line: 237, column: 3, scope: !2557)
!2583 = !DILocation(line: 238, column: 3, scope: !2557)
!2584 = !DILocation(line: 239, column: 1, scope: !2557)
!2585 = !DILocalVariable(name: "stream", arg: 1, scope: !2586, file: !2264, line: 230, type: !2589)
!2586 = distinct !DISubprogram(name: "version_etc", scope: !2264, file: !2264, line: 230, type: !2587, scopeLine: 233, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2623, retainedNodes: !11)
!2587 = !DISubroutineType(types: !2588)
!2588 = !{null, !2589, !23, !23, !23, null}
!2589 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2590, size: 64)
!2590 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2269, line: 7, baseType: !2591)
!2591 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2271, line: 49, size: 1728, elements: !2592)
!2592 = !{!2593, !2594, !2595, !2596, !2597, !2598, !2599, !2600, !2601, !2602, !2603, !2604, !2605, !2606, !2608, !2609, !2610, !2611, !2612, !2613, !2614, !2615, !2616, !2617, !2618, !2619, !2620, !2621, !2622}
!2593 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2591, file: !2271, line: 51, baseType: !6, size: 32)
!2594 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2591, file: !2271, line: 54, baseType: !8, size: 64, offset: 64)
!2595 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2591, file: !2271, line: 55, baseType: !8, size: 64, offset: 128)
!2596 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2591, file: !2271, line: 56, baseType: !8, size: 64, offset: 192)
!2597 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2591, file: !2271, line: 57, baseType: !8, size: 64, offset: 256)
!2598 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2591, file: !2271, line: 58, baseType: !8, size: 64, offset: 320)
!2599 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2591, file: !2271, line: 59, baseType: !8, size: 64, offset: 384)
!2600 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2591, file: !2271, line: 60, baseType: !8, size: 64, offset: 448)
!2601 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2591, file: !2271, line: 61, baseType: !8, size: 64, offset: 512)
!2602 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2591, file: !2271, line: 64, baseType: !8, size: 64, offset: 576)
!2603 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2591, file: !2271, line: 65, baseType: !8, size: 64, offset: 640)
!2604 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2591, file: !2271, line: 66, baseType: !8, size: 64, offset: 704)
!2605 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2591, file: !2271, line: 68, baseType: !2286, size: 64, offset: 768)
!2606 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2591, file: !2271, line: 70, baseType: !2607, size: 64, offset: 832)
!2607 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2591, size: 64)
!2608 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2591, file: !2271, line: 72, baseType: !6, size: 32, offset: 896)
!2609 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2591, file: !2271, line: 73, baseType: !6, size: 32, offset: 928)
!2610 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2591, file: !2271, line: 74, baseType: !2293, size: 64, offset: 960)
!2611 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2591, file: !2271, line: 77, baseType: !98, size: 16, offset: 1024)
!2612 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2591, file: !2271, line: 78, baseType: !2298, size: 8, offset: 1040)
!2613 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2591, file: !2271, line: 79, baseType: !2300, size: 8, offset: 1048)
!2614 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2591, file: !2271, line: 81, baseType: !2304, size: 64, offset: 1088)
!2615 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2591, file: !2271, line: 89, baseType: !2307, size: 64, offset: 1152)
!2616 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2591, file: !2271, line: 91, baseType: !2309, size: 64, offset: 1216)
!2617 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2591, file: !2271, line: 92, baseType: !2312, size: 64, offset: 1280)
!2618 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2591, file: !2271, line: 93, baseType: !2607, size: 64, offset: 1344)
!2619 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2591, file: !2271, line: 94, baseType: !13, size: 64, offset: 1408)
!2620 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2591, file: !2271, line: 95, baseType: !99, size: 64, offset: 1472)
!2621 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2591, file: !2271, line: 96, baseType: !6, size: 32, offset: 1536)
!2622 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2591, file: !2271, line: 98, baseType: !2319, size: 160, offset: 1568)
!2623 = distinct !DICompileUnit(language: DW_LANG_C99, file: !152, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!2624 = !DILocalVariable(name: "command_name", arg: 2, scope: !2586, file: !2264, line: 231, type: !23)
!2625 = !DILocalVariable(name: "package", arg: 3, scope: !2586, file: !2264, line: 231, type: !23)
!2626 = !DILocalVariable(name: "version", arg: 4, scope: !2586, file: !2264, line: 232, type: !23)
!2627 = !DILocalVariable(name: "authors", scope: !2586, file: !2264, line: 234, type: !2628)
!2628 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !2570, line: 52, baseType: !2629)
!2629 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !2572, line: 32, baseType: !2630)
!2630 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !152, line: 234, baseType: !2631)
!2631 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2632, size: 192, elements: !2301)
!2632 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !152, line: 192, size: 192, elements: !2633)
!2633 = !{!2634, !2635, !2636, !2637}
!2634 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !2632, file: !152, line: 192, baseType: !84, size: 32)
!2635 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !2632, file: !152, line: 192, baseType: !84, size: 32, offset: 32)
!2636 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !2632, file: !152, line: 192, baseType: !13, size: 64, offset: 64)
!2637 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !2632, file: !152, line: 192, baseType: !13, size: 64, offset: 128)
!2638 = distinct !DISubprogram(name: "xmalloc", scope: !2639, file: !2639, line: 39, type: !2640, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !154, retainedNodes: !11)
!2639 = !DIFile(filename: "lib/xmalloc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2640 = !DISubroutineType(types: !2641)
!2641 = !{!13, !99}
!2642 = !DILocalVariable(name: "n", arg: 1, scope: !2638, file: !2639, line: 39, type: !99)
!2643 = !DILocation(line: 39, column: 17, scope: !2638)
!2644 = !DILocalVariable(name: "p", scope: !2638, file: !2639, line: 41, type: !13)
!2645 = !DILocation(line: 41, column: 9, scope: !2638)
!2646 = !DILocation(line: 41, column: 21, scope: !2638)
!2647 = !DILocation(line: 41, column: 13, scope: !2638)
!2648 = !DILocation(line: 42, column: 8, scope: !2649)
!2649 = distinct !DILexicalBlock(scope: !2638, file: !2639, line: 42, column: 7)
!2650 = !DILocation(line: 42, column: 10, scope: !2649)
!2651 = !DILocation(line: 42, column: 13, scope: !2649)
!2652 = !DILocation(line: 42, column: 15, scope: !2649)
!2653 = !DILocation(line: 42, column: 7, scope: !2638)
!2654 = !DILocation(line: 43, column: 5, scope: !2649)
!2655 = !DILocation(line: 44, column: 10, scope: !2638)
!2656 = !DILocation(line: 44, column: 3, scope: !2638)
!2657 = !DILocalVariable(name: "n", arg: 1, scope: !2658, file: !2639, line: 39, type: !99)
!2658 = distinct !DISubprogram(name: "xmalloc", scope: !2639, file: !2639, line: 39, type: !2640, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2659, retainedNodes: !11)
!2659 = distinct !DICompileUnit(language: DW_LANG_C99, file: !155, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !156, nameTableKind: None)
!2660 = !DILocalVariable(name: "p", scope: !2658, file: !2639, line: 41, type: !13)
!2661 = distinct !DISubprogram(name: "xrealloc", scope: !2639, file: !2639, line: 51, type: !2662, scopeLine: 52, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !154, retainedNodes: !11)
!2662 = !DISubroutineType(types: !2663)
!2663 = !{!13, !13, !99}
!2664 = !DILocalVariable(name: "p", arg: 1, scope: !2661, file: !2639, line: 51, type: !13)
!2665 = !DILocation(line: 51, column: 17, scope: !2661)
!2666 = !DILocalVariable(name: "n", arg: 2, scope: !2661, file: !2639, line: 51, type: !99)
!2667 = !DILocation(line: 51, column: 27, scope: !2661)
!2668 = !DILocation(line: 53, column: 8, scope: !2669)
!2669 = distinct !DILexicalBlock(scope: !2661, file: !2639, line: 53, column: 7)
!2670 = !DILocation(line: 53, column: 10, scope: !2669)
!2671 = !DILocation(line: 53, column: 13, scope: !2669)
!2672 = !DILocation(line: 53, column: 7, scope: !2661)
!2673 = !DILocation(line: 57, column: 13, scope: !2674)
!2674 = distinct !DILexicalBlock(scope: !2669, file: !2639, line: 54, column: 5)
!2675 = !DILocation(line: 57, column: 7, scope: !2674)
!2676 = !DILocation(line: 58, column: 7, scope: !2674)
!2677 = !DILocation(line: 61, column: 16, scope: !2661)
!2678 = !DILocation(line: 61, column: 19, scope: !2661)
!2679 = !DILocation(line: 61, column: 7, scope: !2661)
!2680 = !DILocation(line: 61, column: 5, scope: !2661)
!2681 = !DILocation(line: 62, column: 8, scope: !2682)
!2682 = distinct !DILexicalBlock(scope: !2661, file: !2639, line: 62, column: 7)
!2683 = !DILocation(line: 62, column: 10, scope: !2682)
!2684 = !DILocation(line: 62, column: 13, scope: !2682)
!2685 = !DILocation(line: 62, column: 7, scope: !2661)
!2686 = !DILocation(line: 63, column: 5, scope: !2682)
!2687 = !DILocation(line: 64, column: 10, scope: !2661)
!2688 = !DILocation(line: 64, column: 3, scope: !2661)
!2689 = !DILocation(line: 65, column: 1, scope: !2661)
!2690 = !DILocalVariable(name: "p", arg: 1, scope: !2691, file: !2639, line: 51, type: !13)
!2691 = distinct !DISubprogram(name: "xrealloc", scope: !2639, file: !2639, line: 51, type: !2662, scopeLine: 52, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2692, retainedNodes: !11)
!2692 = distinct !DICompileUnit(language: DW_LANG_C99, file: !155, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !156, nameTableKind: None)
!2693 = !DILocalVariable(name: "n", arg: 2, scope: !2691, file: !2639, line: 51, type: !99)
!2694 = distinct !DISubprogram(name: "xcharalloc", scope: !2695, file: !2695, line: 216, type: !2696, scopeLine: 217, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !154, retainedNodes: !11)
!2695 = !DIFile(filename: "./lib/xalloc.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2696 = !DISubroutineType(types: !2697)
!2697 = !{!8, !99}
!2698 = !DILocalVariable(name: "n", arg: 1, scope: !2694, file: !2695, line: 216, type: !99)
!2699 = !DILocation(line: 216, column: 20, scope: !2694)
!2700 = !DILocation(line: 218, column: 10, scope: !2694)
!2701 = !DILocation(line: 218, column: 3, scope: !2694)
!2702 = distinct !DISubprogram(name: "xalloc_die", scope: !2703, file: !2703, line: 32, type: !607, scopeLine: 33, flags: DIFlagPrototyped | DIFlagNoReturn, spFlags: DISPFlagDefinition, unit: !157, retainedNodes: !11)
!2703 = !DIFile(filename: "lib/xalloc-die.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2704 = !DILocation(line: 34, column: 10, scope: !2702)
!2705 = !DILocation(line: 34, column: 33, scope: !2702)
!2706 = !DILocation(line: 34, column: 3, scope: !2702)
!2707 = !DILocation(line: 40, column: 3, scope: !2702)
!2708 = distinct !DISubprogram(name: "rpl_mbrtowc", scope: !2709, file: !2709, line: 86, type: !2710, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !159, retainedNodes: !11)
!2709 = !DIFile(filename: "lib/mbrtowc.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2710 = !DISubroutineType(types: !2711)
!2711 = !{!99, !2712, !23, !99, !2713}
!2712 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1606, size: 64)
!2713 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2714, size: 64)
!2714 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !1577, line: 6, baseType: !2715)
!2715 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !1579, line: 21, baseType: !2716)
!2716 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1579, line: 13, size: 64, elements: !2717)
!2717 = !{!2718, !2719}
!2718 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !2716, file: !1579, line: 15, baseType: !6, size: 32)
!2719 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !2716, file: !1579, line: 20, baseType: !2720, size: 32, offset: 32)
!2720 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2716, file: !1579, line: 16, size: 32, elements: !2721)
!2721 = !{!2722, !2723}
!2722 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !2720, file: !1579, line: 18, baseType: !84, size: 32)
!2723 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !2720, file: !1579, line: 19, baseType: !1588, size: 32)
!2724 = !DILocalVariable(name: "pwc", arg: 1, scope: !2708, file: !2709, line: 86, type: !2712)
!2725 = !DILocation(line: 86, column: 23, scope: !2708)
!2726 = !DILocalVariable(name: "s", arg: 2, scope: !2708, file: !2709, line: 86, type: !23)
!2727 = !DILocation(line: 86, column: 40, scope: !2708)
!2728 = !DILocalVariable(name: "n", arg: 3, scope: !2708, file: !2709, line: 86, type: !99)
!2729 = !DILocation(line: 86, column: 50, scope: !2708)
!2730 = !DILocalVariable(name: "ps", arg: 4, scope: !2708, file: !2709, line: 86, type: !2713)
!2731 = !DILocation(line: 86, column: 64, scope: !2708)
!2732 = !DILocalVariable(name: "ret", scope: !2708, file: !2709, line: 88, type: !99)
!2733 = !DILocation(line: 88, column: 10, scope: !2708)
!2734 = !DILocalVariable(name: "wc", scope: !2708, file: !2709, line: 89, type: !1606)
!2735 = !DILocation(line: 89, column: 11, scope: !2708)
!2736 = !DILocation(line: 105, column: 9, scope: !2737)
!2737 = distinct !DILexicalBlock(scope: !2708, file: !2709, line: 105, column: 7)
!2738 = !DILocation(line: 105, column: 7, scope: !2708)
!2739 = !DILocation(line: 106, column: 9, scope: !2737)
!2740 = !DILocation(line: 106, column: 5, scope: !2737)
!2741 = !DILocation(line: 145, column: 18, scope: !2708)
!2742 = !DILocation(line: 145, column: 23, scope: !2708)
!2743 = !DILocation(line: 145, column: 26, scope: !2708)
!2744 = !DILocation(line: 145, column: 29, scope: !2708)
!2745 = !DILocation(line: 145, column: 9, scope: !2708)
!2746 = !DILocation(line: 145, column: 7, scope: !2708)
!2747 = !DILocation(line: 154, column: 22, scope: !2748)
!2748 = distinct !DILexicalBlock(scope: !2708, file: !2709, line: 154, column: 7)
!2749 = !DILocation(line: 154, column: 19, scope: !2748)
!2750 = !DILocation(line: 154, column: 26, scope: !2748)
!2751 = !DILocation(line: 154, column: 29, scope: !2748)
!2752 = !DILocation(line: 154, column: 31, scope: !2748)
!2753 = !DILocation(line: 154, column: 36, scope: !2748)
!2754 = !DILocation(line: 154, column: 41, scope: !2748)
!2755 = !DILocation(line: 154, column: 7, scope: !2708)
!2756 = !DILocalVariable(name: "uc", scope: !2757, file: !2709, line: 156, type: !167)
!2757 = distinct !DILexicalBlock(scope: !2748, file: !2709, line: 155, column: 5)
!2758 = !DILocation(line: 156, column: 21, scope: !2757)
!2759 = !DILocation(line: 156, column: 27, scope: !2757)
!2760 = !DILocation(line: 156, column: 26, scope: !2757)
!2761 = !DILocation(line: 157, column: 14, scope: !2757)
!2762 = !DILocation(line: 157, column: 8, scope: !2757)
!2763 = !DILocation(line: 157, column: 12, scope: !2757)
!2764 = !DILocation(line: 158, column: 7, scope: !2757)
!2765 = !DILocation(line: 162, column: 10, scope: !2708)
!2766 = !DILocation(line: 162, column: 3, scope: !2708)
!2767 = !DILocation(line: 163, column: 1, scope: !2708)
!2768 = !DILocalVariable(name: "pwc", arg: 1, scope: !2769, file: !2709, line: 86, type: !2712)
!2769 = distinct !DISubprogram(name: "rpl_mbrtowc", scope: !2709, file: !2709, line: 86, type: !2770, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2783, retainedNodes: !11)
!2770 = !DISubroutineType(types: !2771)
!2771 = !{!99, !2712, !23, !99, !2772}
!2772 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2773, size: 64)
!2773 = !DIDerivedType(tag: DW_TAG_typedef, name: "mbstate_t", file: !1577, line: 6, baseType: !2774)
!2774 = !DIDerivedType(tag: DW_TAG_typedef, name: "__mbstate_t", file: !1579, line: 21, baseType: !2775)
!2775 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1579, line: 13, size: 64, elements: !2776)
!2776 = !{!2777, !2778}
!2777 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !2775, file: !1579, line: 15, baseType: !6, size: 32)
!2778 = !DIDerivedType(tag: DW_TAG_member, name: "__value", scope: !2775, file: !1579, line: 20, baseType: !2779, size: 32, offset: 32)
!2779 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2775, file: !1579, line: 16, size: 32, elements: !2780)
!2780 = !{!2781, !2782}
!2781 = !DIDerivedType(tag: DW_TAG_member, name: "__wch", scope: !2779, file: !1579, line: 18, baseType: !84, size: 32)
!2782 = !DIDerivedType(tag: DW_TAG_member, name: "__wchb", scope: !2779, file: !1579, line: 19, baseType: !1588, size: 32)
!2783 = distinct !DICompileUnit(language: DW_LANG_C99, file: !160, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !161, nameTableKind: None)
!2784 = !DILocalVariable(name: "s", arg: 2, scope: !2769, file: !2709, line: 86, type: !23)
!2785 = !DILocalVariable(name: "n", arg: 3, scope: !2769, file: !2709, line: 86, type: !99)
!2786 = !DILocalVariable(name: "ps", arg: 4, scope: !2769, file: !2709, line: 86, type: !2772)
!2787 = !DILocalVariable(name: "ret", scope: !2769, file: !2709, line: 88, type: !99)
!2788 = !DILocalVariable(name: "wc", scope: !2769, file: !2709, line: 89, type: !1606)
!2789 = distinct !DISubprogram(name: "c_strcasecmp", scope: !2790, file: !2790, line: 27, type: !2791, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !162, retainedNodes: !11)
!2790 = !DIFile(filename: "lib/c-strcasecmp.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2791 = !DISubroutineType(types: !2792)
!2792 = !{!6, !23, !23}
!2793 = !DILocalVariable(name: "s1", arg: 1, scope: !2789, file: !2790, line: 27, type: !23)
!2794 = !DILocation(line: 27, column: 27, scope: !2789)
!2795 = !DILocalVariable(name: "s2", arg: 2, scope: !2789, file: !2790, line: 27, type: !23)
!2796 = !DILocation(line: 27, column: 43, scope: !2789)
!2797 = !DILocalVariable(name: "p1", scope: !2789, file: !2790, line: 29, type: !165)
!2798 = !DILocation(line: 29, column: 33, scope: !2789)
!2799 = !DILocation(line: 29, column: 62, scope: !2789)
!2800 = !DILocalVariable(name: "p2", scope: !2789, file: !2790, line: 30, type: !165)
!2801 = !DILocation(line: 30, column: 33, scope: !2789)
!2802 = !DILocation(line: 30, column: 62, scope: !2789)
!2803 = !DILocalVariable(name: "c1", scope: !2789, file: !2790, line: 31, type: !167)
!2804 = !DILocation(line: 31, column: 17, scope: !2789)
!2805 = !DILocalVariable(name: "c2", scope: !2789, file: !2790, line: 31, type: !167)
!2806 = !DILocation(line: 31, column: 21, scope: !2789)
!2807 = !DILocation(line: 33, column: 7, scope: !2808)
!2808 = distinct !DILexicalBlock(scope: !2789, file: !2790, line: 33, column: 7)
!2809 = !DILocation(line: 33, column: 13, scope: !2808)
!2810 = !DILocation(line: 33, column: 10, scope: !2808)
!2811 = !DILocation(line: 33, column: 7, scope: !2789)
!2812 = !DILocation(line: 34, column: 5, scope: !2808)
!2813 = !DILocation(line: 36, column: 3, scope: !2789)
!2814 = !DILocation(line: 38, column: 24, scope: !2815)
!2815 = distinct !DILexicalBlock(scope: !2789, file: !2790, line: 37, column: 5)
!2816 = !DILocation(line: 38, column: 23, scope: !2815)
!2817 = !DILocation(line: 38, column: 12, scope: !2815)
!2818 = !DILocation(line: 38, column: 10, scope: !2815)
!2819 = !DILocation(line: 39, column: 24, scope: !2815)
!2820 = !DILocation(line: 39, column: 23, scope: !2815)
!2821 = !DILocation(line: 39, column: 12, scope: !2815)
!2822 = !DILocation(line: 39, column: 10, scope: !2815)
!2823 = !DILocation(line: 41, column: 11, scope: !2824)
!2824 = distinct !DILexicalBlock(scope: !2815, file: !2790, line: 41, column: 11)
!2825 = !DILocation(line: 41, column: 14, scope: !2824)
!2826 = !DILocation(line: 41, column: 11, scope: !2815)
!2827 = !DILocation(line: 42, column: 9, scope: !2824)
!2828 = !DILocation(line: 44, column: 7, scope: !2815)
!2829 = !DILocation(line: 45, column: 7, scope: !2815)
!2830 = !DILocation(line: 46, column: 5, scope: !2815)
!2831 = !DILocation(line: 47, column: 10, scope: !2789)
!2832 = !DILocation(line: 47, column: 16, scope: !2789)
!2833 = !DILocation(line: 47, column: 13, scope: !2789)
!2834 = distinct !{!2834, !2813, !2835}
!2835 = !DILocation(line: 47, column: 18, scope: !2789)
!2836 = !DILocation(line: 50, column: 12, scope: !2837)
!2837 = distinct !DILexicalBlock(scope: !2789, file: !2790, line: 49, column: 7)
!2838 = !DILocation(line: 50, column: 17, scope: !2837)
!2839 = !DILocation(line: 50, column: 15, scope: !2837)
!2840 = !DILocation(line: 50, column: 5, scope: !2837)
!2841 = !DILocation(line: 56, column: 1, scope: !2789)
!2842 = !DILocalVariable(name: "s1", arg: 1, scope: !2843, file: !2790, line: 27, type: !23)
!2843 = distinct !DISubprogram(name: "c_strcasecmp", scope: !2790, file: !2790, line: 27, type: !2791, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2844, retainedNodes: !11)
!2844 = distinct !DICompileUnit(language: DW_LANG_C99, file: !163, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !164, nameTableKind: None)
!2845 = !DILocalVariable(name: "s2", arg: 2, scope: !2843, file: !2790, line: 27, type: !23)
!2846 = !DILocalVariable(name: "p1", scope: !2843, file: !2790, line: 29, type: !165)
!2847 = !DILocalVariable(name: "p2", scope: !2843, file: !2790, line: 30, type: !165)
!2848 = !DILocalVariable(name: "c1", scope: !2843, file: !2790, line: 31, type: !167)
!2849 = !DILocalVariable(name: "c2", scope: !2843, file: !2790, line: 31, type: !167)
!2850 = distinct !DISubprogram(name: "close_stream", scope: !2851, file: !2851, line: 56, type: !2852, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !168, retainedNodes: !11)
!2851 = !DIFile(filename: "lib/close-stream.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2852 = !DISubroutineType(types: !2853)
!2853 = !{!6, !2854}
!2854 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2855, size: 64)
!2855 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2269, line: 7, baseType: !2856)
!2856 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2271, line: 49, size: 1728, elements: !2857)
!2857 = !{!2858, !2859, !2860, !2861, !2862, !2863, !2864, !2865, !2866, !2867, !2868, !2869, !2870, !2871, !2873, !2874, !2875, !2876, !2877, !2878, !2879, !2880, !2881, !2882, !2883, !2884, !2885, !2886, !2887}
!2858 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2856, file: !2271, line: 51, baseType: !6, size: 32)
!2859 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2856, file: !2271, line: 54, baseType: !8, size: 64, offset: 64)
!2860 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2856, file: !2271, line: 55, baseType: !8, size: 64, offset: 128)
!2861 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2856, file: !2271, line: 56, baseType: !8, size: 64, offset: 192)
!2862 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2856, file: !2271, line: 57, baseType: !8, size: 64, offset: 256)
!2863 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2856, file: !2271, line: 58, baseType: !8, size: 64, offset: 320)
!2864 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2856, file: !2271, line: 59, baseType: !8, size: 64, offset: 384)
!2865 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2856, file: !2271, line: 60, baseType: !8, size: 64, offset: 448)
!2866 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2856, file: !2271, line: 61, baseType: !8, size: 64, offset: 512)
!2867 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2856, file: !2271, line: 64, baseType: !8, size: 64, offset: 576)
!2868 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2856, file: !2271, line: 65, baseType: !8, size: 64, offset: 640)
!2869 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2856, file: !2271, line: 66, baseType: !8, size: 64, offset: 704)
!2870 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2856, file: !2271, line: 68, baseType: !2286, size: 64, offset: 768)
!2871 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2856, file: !2271, line: 70, baseType: !2872, size: 64, offset: 832)
!2872 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2856, size: 64)
!2873 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2856, file: !2271, line: 72, baseType: !6, size: 32, offset: 896)
!2874 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2856, file: !2271, line: 73, baseType: !6, size: 32, offset: 928)
!2875 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2856, file: !2271, line: 74, baseType: !2293, size: 64, offset: 960)
!2876 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2856, file: !2271, line: 77, baseType: !98, size: 16, offset: 1024)
!2877 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2856, file: !2271, line: 78, baseType: !2298, size: 8, offset: 1040)
!2878 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2856, file: !2271, line: 79, baseType: !2300, size: 8, offset: 1048)
!2879 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2856, file: !2271, line: 81, baseType: !2304, size: 64, offset: 1088)
!2880 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2856, file: !2271, line: 89, baseType: !2307, size: 64, offset: 1152)
!2881 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2856, file: !2271, line: 91, baseType: !2309, size: 64, offset: 1216)
!2882 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2856, file: !2271, line: 92, baseType: !2312, size: 64, offset: 1280)
!2883 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2856, file: !2271, line: 93, baseType: !2872, size: 64, offset: 1344)
!2884 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2856, file: !2271, line: 94, baseType: !13, size: 64, offset: 1408)
!2885 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2856, file: !2271, line: 95, baseType: !99, size: 64, offset: 1472)
!2886 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2856, file: !2271, line: 96, baseType: !6, size: 32, offset: 1536)
!2887 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2856, file: !2271, line: 98, baseType: !2319, size: 160, offset: 1568)
!2888 = !DILocalVariable(name: "stream", arg: 1, scope: !2850, file: !2851, line: 56, type: !2854)
!2889 = !DILocation(line: 56, column: 21, scope: !2850)
!2890 = !DILocalVariable(name: "some_pending", scope: !2850, file: !2851, line: 58, type: !2891)
!2891 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !41)
!2892 = !DILocation(line: 58, column: 14, scope: !2850)
!2893 = !DILocation(line: 58, column: 42, scope: !2850)
!2894 = !DILocation(line: 58, column: 30, scope: !2850)
!2895 = !DILocation(line: 58, column: 50, scope: !2850)
!2896 = !DILocalVariable(name: "prev_fail", scope: !2850, file: !2851, line: 59, type: !2891)
!2897 = !DILocation(line: 59, column: 14, scope: !2850)
!2898 = !DILocation(line: 59, column: 27, scope: !2850)
!2899 = !DILocation(line: 59, column: 43, scope: !2850)
!2900 = !DILocalVariable(name: "fclose_fail", scope: !2850, file: !2851, line: 60, type: !2891)
!2901 = !DILocation(line: 60, column: 14, scope: !2850)
!2902 = !DILocation(line: 60, column: 37, scope: !2850)
!2903 = !DILocation(line: 60, column: 29, scope: !2850)
!2904 = !DILocation(line: 60, column: 45, scope: !2850)
!2905 = !DILocation(line: 70, column: 7, scope: !2906)
!2906 = distinct !DILexicalBlock(scope: !2850, file: !2851, line: 70, column: 7)
!2907 = !DILocation(line: 70, column: 17, scope: !2906)
!2908 = !DILocation(line: 70, column: 21, scope: !2906)
!2909 = !DILocation(line: 70, column: 33, scope: !2906)
!2910 = !DILocation(line: 70, column: 37, scope: !2906)
!2911 = !DILocation(line: 70, column: 50, scope: !2906)
!2912 = !DILocation(line: 70, column: 53, scope: !2906)
!2913 = !DILocation(line: 70, column: 59, scope: !2906)
!2914 = !DILocation(line: 70, column: 7, scope: !2850)
!2915 = !DILocation(line: 72, column: 13, scope: !2916)
!2916 = distinct !DILexicalBlock(scope: !2917, file: !2851, line: 72, column: 11)
!2917 = distinct !DILexicalBlock(scope: !2906, file: !2851, line: 71, column: 5)
!2918 = !DILocation(line: 72, column: 11, scope: !2917)
!2919 = !DILocation(line: 73, column: 9, scope: !2916)
!2920 = !DILocation(line: 73, column: 15, scope: !2916)
!2921 = !DILocation(line: 74, column: 7, scope: !2917)
!2922 = !DILocation(line: 77, column: 3, scope: !2850)
!2923 = !DILocation(line: 78, column: 1, scope: !2850)
!2924 = !DILocalVariable(name: "stream", arg: 1, scope: !2925, file: !2851, line: 56, type: !2928)
!2925 = distinct !DISubprogram(name: "close_stream", scope: !2851, file: !2851, line: 56, type: !2926, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2962, retainedNodes: !11)
!2926 = !DISubroutineType(types: !2927)
!2927 = !{!6, !2928}
!2928 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2929, size: 64)
!2929 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2269, line: 7, baseType: !2930)
!2930 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2271, line: 49, size: 1728, elements: !2931)
!2931 = !{!2932, !2933, !2934, !2935, !2936, !2937, !2938, !2939, !2940, !2941, !2942, !2943, !2944, !2945, !2947, !2948, !2949, !2950, !2951, !2952, !2953, !2954, !2955, !2956, !2957, !2958, !2959, !2960, !2961}
!2932 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2930, file: !2271, line: 51, baseType: !6, size: 32)
!2933 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2930, file: !2271, line: 54, baseType: !8, size: 64, offset: 64)
!2934 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2930, file: !2271, line: 55, baseType: !8, size: 64, offset: 128)
!2935 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2930, file: !2271, line: 56, baseType: !8, size: 64, offset: 192)
!2936 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2930, file: !2271, line: 57, baseType: !8, size: 64, offset: 256)
!2937 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2930, file: !2271, line: 58, baseType: !8, size: 64, offset: 320)
!2938 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2930, file: !2271, line: 59, baseType: !8, size: 64, offset: 384)
!2939 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2930, file: !2271, line: 60, baseType: !8, size: 64, offset: 448)
!2940 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2930, file: !2271, line: 61, baseType: !8, size: 64, offset: 512)
!2941 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2930, file: !2271, line: 64, baseType: !8, size: 64, offset: 576)
!2942 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2930, file: !2271, line: 65, baseType: !8, size: 64, offset: 640)
!2943 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2930, file: !2271, line: 66, baseType: !8, size: 64, offset: 704)
!2944 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2930, file: !2271, line: 68, baseType: !2286, size: 64, offset: 768)
!2945 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2930, file: !2271, line: 70, baseType: !2946, size: 64, offset: 832)
!2946 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2930, size: 64)
!2947 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2930, file: !2271, line: 72, baseType: !6, size: 32, offset: 896)
!2948 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2930, file: !2271, line: 73, baseType: !6, size: 32, offset: 928)
!2949 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2930, file: !2271, line: 74, baseType: !2293, size: 64, offset: 960)
!2950 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2930, file: !2271, line: 77, baseType: !98, size: 16, offset: 1024)
!2951 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2930, file: !2271, line: 78, baseType: !2298, size: 8, offset: 1040)
!2952 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2930, file: !2271, line: 79, baseType: !2300, size: 8, offset: 1048)
!2953 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2930, file: !2271, line: 81, baseType: !2304, size: 64, offset: 1088)
!2954 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2930, file: !2271, line: 89, baseType: !2307, size: 64, offset: 1152)
!2955 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2930, file: !2271, line: 91, baseType: !2309, size: 64, offset: 1216)
!2956 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2930, file: !2271, line: 92, baseType: !2312, size: 64, offset: 1280)
!2957 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2930, file: !2271, line: 93, baseType: !2946, size: 64, offset: 1344)
!2958 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2930, file: !2271, line: 94, baseType: !13, size: 64, offset: 1408)
!2959 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2930, file: !2271, line: 95, baseType: !99, size: 64, offset: 1472)
!2960 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2930, file: !2271, line: 96, baseType: !6, size: 32, offset: 1536)
!2961 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2930, file: !2271, line: 98, baseType: !2319, size: 160, offset: 1568)
!2962 = distinct !DICompileUnit(language: DW_LANG_C99, file: !169, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, nameTableKind: None)
!2963 = !DILocalVariable(name: "some_pending", scope: !2925, file: !2851, line: 58, type: !2891)
!2964 = !DILocalVariable(name: "prev_fail", scope: !2925, file: !2851, line: 59, type: !2891)
!2965 = !DILocalVariable(name: "fclose_fail", scope: !2925, file: !2851, line: 60, type: !2891)
!2966 = distinct !DISubprogram(name: "hard_locale", scope: !2967, file: !2967, line: 27, type: !2968, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !170, retainedNodes: !11)
!2967 = !DIFile(filename: "lib/hard-locale.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2968 = !DISubroutineType(types: !2969)
!2969 = !{!41, !6}
!2970 = !DILocalVariable(name: "category", arg: 1, scope: !2966, file: !2967, line: 27, type: !6)
!2971 = !DILocation(line: 27, column: 18, scope: !2966)
!2972 = !DILocalVariable(name: "locale", scope: !2966, file: !2967, line: 29, type: !2973)
!2973 = !DICompositeType(tag: DW_TAG_array_type, baseType: !9, size: 2056, elements: !2974)
!2974 = !{!2975}
!2975 = !DISubrange(count: 257)
!2976 = !DILocation(line: 29, column: 8, scope: !2966)
!2977 = !DILocation(line: 31, column: 25, scope: !2978)
!2978 = distinct !DILexicalBlock(scope: !2966, file: !2967, line: 31, column: 7)
!2979 = !DILocation(line: 31, column: 35, scope: !2978)
!2980 = !DILocation(line: 31, column: 7, scope: !2978)
!2981 = !DILocation(line: 31, column: 7, scope: !2966)
!2982 = !DILocation(line: 32, column: 5, scope: !2978)
!2983 = !DILocation(line: 34, column: 20, scope: !2966)
!2984 = !DILocation(line: 34, column: 12, scope: !2966)
!2985 = !DILocation(line: 34, column: 33, scope: !2966)
!2986 = !DILocation(line: 34, column: 38, scope: !2966)
!2987 = !DILocation(line: 34, column: 49, scope: !2966)
!2988 = !DILocation(line: 34, column: 41, scope: !2966)
!2989 = !DILocation(line: 34, column: 66, scope: !2966)
!2990 = !DILocation(line: 34, column: 10, scope: !2966)
!2991 = !DILocation(line: 34, column: 3, scope: !2966)
!2992 = !DILocation(line: 35, column: 1, scope: !2966)
!2993 = !DILocalVariable(name: "category", arg: 1, scope: !2994, file: !2967, line: 27, type: !6)
!2994 = distinct !DISubprogram(name: "hard_locale", scope: !2967, file: !2967, line: 27, type: !2968, scopeLine: 28, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2995, retainedNodes: !11)
!2995 = distinct !DICompileUnit(language: DW_LANG_C99, file: !171, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, nameTableKind: None)
!2996 = !DILocalVariable(name: "locale", scope: !2994, file: !2967, line: 29, type: !2973)
!2997 = distinct !DISubprogram(name: "locale_charset", scope: !2998, file: !2998, line: 831, type: !2999, scopeLine: 832, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !172, retainedNodes: !11)
!2998 = !DIFile(filename: "lib/localcharset.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!2999 = !DISubroutineType(types: !3000)
!3000 = !{!23}
!3001 = !DILocalVariable(name: "codeset", scope: !2997, file: !2998, line: 833, type: !23)
!3002 = !DILocation(line: 833, column: 15, scope: !2997)
!3003 = !DILocation(line: 847, column: 13, scope: !2997)
!3004 = !DILocation(line: 847, column: 11, scope: !2997)
!3005 = !DILocation(line: 911, column: 7, scope: !3006)
!3006 = distinct !DILexicalBlock(scope: !2997, file: !2998, line: 911, column: 7)
!3007 = !DILocation(line: 911, column: 15, scope: !3006)
!3008 = !DILocation(line: 911, column: 7, scope: !2997)
!3009 = !DILocation(line: 913, column: 13, scope: !3006)
!3010 = !DILocation(line: 913, column: 5, scope: !3006)
!3011 = !DILocation(line: 1070, column: 13, scope: !3012)
!3012 = distinct !DILexicalBlock(scope: !3013, file: !2998, line: 1070, column: 13)
!3013 = distinct !DILexicalBlock(scope: !3014, file: !2998, line: 1060, column: 7)
!3014 = distinct !DILexicalBlock(scope: !2997, file: !2998, line: 1019, column: 3)
!3015 = !DILocation(line: 1070, column: 24, scope: !3012)
!3016 = !DILocation(line: 1070, column: 13, scope: !3013)
!3017 = !DILocation(line: 1071, column: 19, scope: !3012)
!3018 = !DILocation(line: 1071, column: 11, scope: !3012)
!3019 = !DILocation(line: 1158, column: 10, scope: !2997)
!3020 = !DILocation(line: 1158, column: 3, scope: !2997)
!3021 = !DILocalVariable(name: "codeset", scope: !3022, file: !2998, line: 833, type: !23)
!3022 = distinct !DISubprogram(name: "locale_charset", scope: !2998, file: !2998, line: 831, type: !2999, scopeLine: 832, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3023, retainedNodes: !11)
!3023 = distinct !DICompileUnit(language: DW_LANG_C99, file: !173, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!3024 = distinct !DISubprogram(name: "setlocale_null_r", scope: !3025, file: !3025, line: 269, type: !3026, scopeLine: 270, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !174, retainedNodes: !11)
!3025 = !DIFile(filename: "lib/setlocale_null.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3026 = !DISubroutineType(types: !3027)
!3027 = !{!6, !6, !8, !99}
!3028 = !DILocalVariable(name: "category", arg: 1, scope: !3024, file: !3025, line: 269, type: !6)
!3029 = !DILocation(line: 269, column: 23, scope: !3024)
!3030 = !DILocalVariable(name: "buf", arg: 2, scope: !3024, file: !3025, line: 269, type: !8)
!3031 = !DILocation(line: 269, column: 39, scope: !3024)
!3032 = !DILocalVariable(name: "bufsize", arg: 3, scope: !3024, file: !3025, line: 269, type: !99)
!3033 = !DILocation(line: 269, column: 51, scope: !3024)
!3034 = !DILocation(line: 274, column: 35, scope: !3024)
!3035 = !DILocation(line: 274, column: 45, scope: !3024)
!3036 = !DILocation(line: 274, column: 50, scope: !3024)
!3037 = !DILocation(line: 274, column: 10, scope: !3024)
!3038 = !DILocation(line: 274, column: 3, scope: !3024)
!3039 = distinct !DISubprogram(name: "setlocale_null_unlocked", scope: !3025, file: !3025, line: 91, type: !3026, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !174, retainedNodes: !11)
!3040 = !DILocalVariable(name: "category", arg: 1, scope: !3039, file: !3025, line: 91, type: !6)
!3041 = !DILocation(line: 91, column: 30, scope: !3039)
!3042 = !DILocalVariable(name: "buf", arg: 2, scope: !3039, file: !3025, line: 91, type: !8)
!3043 = !DILocation(line: 91, column: 46, scope: !3039)
!3044 = !DILocalVariable(name: "bufsize", arg: 3, scope: !3039, file: !3025, line: 91, type: !99)
!3045 = !DILocation(line: 91, column: 58, scope: !3039)
!3046 = !DILocalVariable(name: "result", scope: !3039, file: !3025, line: 140, type: !23)
!3047 = !DILocation(line: 140, column: 15, scope: !3039)
!3048 = !DILocation(line: 140, column: 51, scope: !3039)
!3049 = !DILocation(line: 140, column: 24, scope: !3039)
!3050 = !DILocation(line: 142, column: 7, scope: !3051)
!3051 = distinct !DILexicalBlock(scope: !3039, file: !3025, line: 142, column: 7)
!3052 = !DILocation(line: 142, column: 14, scope: !3051)
!3053 = !DILocation(line: 142, column: 7, scope: !3039)
!3054 = !DILocation(line: 145, column: 11, scope: !3055)
!3055 = distinct !DILexicalBlock(scope: !3056, file: !3025, line: 145, column: 11)
!3056 = distinct !DILexicalBlock(scope: !3051, file: !3025, line: 143, column: 5)
!3057 = !DILocation(line: 145, column: 19, scope: !3055)
!3058 = !DILocation(line: 145, column: 11, scope: !3056)
!3059 = !DILocation(line: 149, column: 9, scope: !3055)
!3060 = !DILocation(line: 149, column: 16, scope: !3055)
!3061 = !DILocation(line: 150, column: 7, scope: !3056)
!3062 = !DILocalVariable(name: "length", scope: !3063, file: !3025, line: 154, type: !99)
!3063 = distinct !DILexicalBlock(scope: !3051, file: !3025, line: 153, column: 5)
!3064 = !DILocation(line: 154, column: 14, scope: !3063)
!3065 = !DILocation(line: 154, column: 31, scope: !3063)
!3066 = !DILocation(line: 154, column: 23, scope: !3063)
!3067 = !DILocation(line: 155, column: 11, scope: !3068)
!3068 = distinct !DILexicalBlock(scope: !3063, file: !3025, line: 155, column: 11)
!3069 = !DILocation(line: 155, column: 20, scope: !3068)
!3070 = !DILocation(line: 155, column: 18, scope: !3068)
!3071 = !DILocation(line: 155, column: 11, scope: !3063)
!3072 = !DILocation(line: 157, column: 19, scope: !3073)
!3073 = distinct !DILexicalBlock(scope: !3068, file: !3025, line: 156, column: 9)
!3074 = !DILocation(line: 157, column: 24, scope: !3073)
!3075 = !DILocation(line: 157, column: 32, scope: !3073)
!3076 = !DILocation(line: 157, column: 39, scope: !3073)
!3077 = !DILocation(line: 157, column: 11, scope: !3073)
!3078 = !DILocation(line: 158, column: 11, scope: !3073)
!3079 = !DILocation(line: 162, column: 15, scope: !3080)
!3080 = distinct !DILexicalBlock(scope: !3081, file: !3025, line: 162, column: 15)
!3081 = distinct !DILexicalBlock(scope: !3068, file: !3025, line: 161, column: 9)
!3082 = !DILocation(line: 162, column: 23, scope: !3080)
!3083 = !DILocation(line: 162, column: 15, scope: !3081)
!3084 = !DILocation(line: 167, column: 23, scope: !3085)
!3085 = distinct !DILexicalBlock(scope: !3080, file: !3025, line: 163, column: 13)
!3086 = !DILocation(line: 167, column: 28, scope: !3085)
!3087 = !DILocation(line: 167, column: 36, scope: !3085)
!3088 = !DILocation(line: 167, column: 44, scope: !3085)
!3089 = !DILocation(line: 167, column: 15, scope: !3085)
!3090 = !DILocation(line: 168, column: 15, scope: !3085)
!3091 = !DILocation(line: 168, column: 19, scope: !3085)
!3092 = !DILocation(line: 168, column: 27, scope: !3085)
!3093 = !DILocation(line: 168, column: 32, scope: !3085)
!3094 = !DILocation(line: 169, column: 13, scope: !3085)
!3095 = !DILocation(line: 170, column: 11, scope: !3081)
!3096 = !DILocation(line: 174, column: 1, scope: !3039)
!3097 = distinct !DISubprogram(name: "setlocale_null_androidfix", scope: !3025, file: !3025, line: 60, type: !3098, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !174, retainedNodes: !11)
!3098 = !DISubroutineType(types: !3099)
!3099 = !{!23, !6}
!3100 = !DILocalVariable(name: "category", arg: 1, scope: !3097, file: !3025, line: 60, type: !6)
!3101 = !DILocation(line: 60, column: 32, scope: !3097)
!3102 = !DILocalVariable(name: "result", scope: !3097, file: !3025, line: 62, type: !23)
!3103 = !DILocation(line: 62, column: 15, scope: !3097)
!3104 = !DILocation(line: 62, column: 35, scope: !3097)
!3105 = !DILocation(line: 62, column: 24, scope: !3097)
!3106 = !DILocation(line: 87, column: 10, scope: !3097)
!3107 = !DILocation(line: 87, column: 3, scope: !3097)
!3108 = !DILocalVariable(name: "category", arg: 1, scope: !3109, file: !3025, line: 60, type: !6)
!3109 = distinct !DISubprogram(name: "setlocale_null_androidfix", scope: !3025, file: !3025, line: 60, type: !3098, scopeLine: 61, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3110, retainedNodes: !11)
!3110 = distinct !DICompileUnit(language: DW_LANG_C99, file: !175, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!3111 = !DILocalVariable(name: "result", scope: !3109, file: !3025, line: 62, type: !23)
!3112 = distinct !DISubprogram(name: "rpl_fclose", scope: !3113, file: !3113, line: 58, type: !3114, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !176, retainedNodes: !11)
!3113 = !DIFile(filename: "lib/fclose.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3114 = !DISubroutineType(types: !3115)
!3115 = !{!6, !3116}
!3116 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3117, size: 64)
!3117 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2269, line: 7, baseType: !3118)
!3118 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2271, line: 49, size: 1728, elements: !3119)
!3119 = !{!3120, !3121, !3122, !3123, !3124, !3125, !3126, !3127, !3128, !3129, !3130, !3131, !3132, !3133, !3135, !3136, !3137, !3138, !3139, !3140, !3141, !3142, !3143, !3144, !3145, !3146, !3147, !3148, !3149}
!3120 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3118, file: !2271, line: 51, baseType: !6, size: 32)
!3121 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3118, file: !2271, line: 54, baseType: !8, size: 64, offset: 64)
!3122 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3118, file: !2271, line: 55, baseType: !8, size: 64, offset: 128)
!3123 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3118, file: !2271, line: 56, baseType: !8, size: 64, offset: 192)
!3124 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3118, file: !2271, line: 57, baseType: !8, size: 64, offset: 256)
!3125 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3118, file: !2271, line: 58, baseType: !8, size: 64, offset: 320)
!3126 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3118, file: !2271, line: 59, baseType: !8, size: 64, offset: 384)
!3127 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3118, file: !2271, line: 60, baseType: !8, size: 64, offset: 448)
!3128 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3118, file: !2271, line: 61, baseType: !8, size: 64, offset: 512)
!3129 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3118, file: !2271, line: 64, baseType: !8, size: 64, offset: 576)
!3130 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3118, file: !2271, line: 65, baseType: !8, size: 64, offset: 640)
!3131 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3118, file: !2271, line: 66, baseType: !8, size: 64, offset: 704)
!3132 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3118, file: !2271, line: 68, baseType: !2286, size: 64, offset: 768)
!3133 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3118, file: !2271, line: 70, baseType: !3134, size: 64, offset: 832)
!3134 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3118, size: 64)
!3135 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3118, file: !2271, line: 72, baseType: !6, size: 32, offset: 896)
!3136 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3118, file: !2271, line: 73, baseType: !6, size: 32, offset: 928)
!3137 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3118, file: !2271, line: 74, baseType: !2293, size: 64, offset: 960)
!3138 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3118, file: !2271, line: 77, baseType: !98, size: 16, offset: 1024)
!3139 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3118, file: !2271, line: 78, baseType: !2298, size: 8, offset: 1040)
!3140 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3118, file: !2271, line: 79, baseType: !2300, size: 8, offset: 1048)
!3141 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3118, file: !2271, line: 81, baseType: !2304, size: 64, offset: 1088)
!3142 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3118, file: !2271, line: 89, baseType: !2307, size: 64, offset: 1152)
!3143 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3118, file: !2271, line: 91, baseType: !2309, size: 64, offset: 1216)
!3144 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3118, file: !2271, line: 92, baseType: !2312, size: 64, offset: 1280)
!3145 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3118, file: !2271, line: 93, baseType: !3134, size: 64, offset: 1344)
!3146 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3118, file: !2271, line: 94, baseType: !13, size: 64, offset: 1408)
!3147 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3118, file: !2271, line: 95, baseType: !99, size: 64, offset: 1472)
!3148 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3118, file: !2271, line: 96, baseType: !6, size: 32, offset: 1536)
!3149 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3118, file: !2271, line: 98, baseType: !2319, size: 160, offset: 1568)
!3150 = !DILocalVariable(name: "fp", arg: 1, scope: !3112, file: !3113, line: 58, type: !3116)
!3151 = !DILocation(line: 58, column: 19, scope: !3112)
!3152 = !DILocalVariable(name: "saved_errno", scope: !3112, file: !3113, line: 60, type: !6)
!3153 = !DILocation(line: 60, column: 7, scope: !3112)
!3154 = !DILocalVariable(name: "fd", scope: !3112, file: !3113, line: 61, type: !6)
!3155 = !DILocation(line: 61, column: 7, scope: !3112)
!3156 = !DILocalVariable(name: "result", scope: !3112, file: !3113, line: 62, type: !6)
!3157 = !DILocation(line: 62, column: 7, scope: !3112)
!3158 = !DILocation(line: 65, column: 16, scope: !3112)
!3159 = !DILocation(line: 65, column: 8, scope: !3112)
!3160 = !DILocation(line: 65, column: 6, scope: !3112)
!3161 = !DILocation(line: 66, column: 7, scope: !3162)
!3162 = distinct !DILexicalBlock(scope: !3112, file: !3113, line: 66, column: 7)
!3163 = !DILocation(line: 66, column: 10, scope: !3162)
!3164 = !DILocation(line: 66, column: 7, scope: !3112)
!3165 = !DILocation(line: 67, column: 28, scope: !3162)
!3166 = !DILocation(line: 67, column: 12, scope: !3162)
!3167 = !DILocation(line: 67, column: 5, scope: !3162)
!3168 = !DILocation(line: 72, column: 9, scope: !3169)
!3169 = distinct !DILexicalBlock(scope: !3112, file: !3113, line: 72, column: 7)
!3170 = !DILocation(line: 72, column: 23, scope: !3169)
!3171 = !DILocation(line: 72, column: 41, scope: !3169)
!3172 = !DILocation(line: 72, column: 33, scope: !3169)
!3173 = !DILocation(line: 72, column: 26, scope: !3169)
!3174 = !DILocation(line: 72, column: 59, scope: !3169)
!3175 = !DILocation(line: 73, column: 7, scope: !3169)
!3176 = !DILocation(line: 73, column: 18, scope: !3169)
!3177 = !DILocation(line: 73, column: 10, scope: !3169)
!3178 = !DILocation(line: 72, column: 7, scope: !3112)
!3179 = !DILocation(line: 74, column: 19, scope: !3169)
!3180 = !DILocation(line: 74, column: 17, scope: !3169)
!3181 = !DILocation(line: 74, column: 5, scope: !3169)
!3182 = !DILocation(line: 100, column: 28, scope: !3112)
!3183 = !DILocation(line: 100, column: 12, scope: !3112)
!3184 = !DILocation(line: 100, column: 10, scope: !3112)
!3185 = !DILocation(line: 105, column: 7, scope: !3186)
!3186 = distinct !DILexicalBlock(scope: !3112, file: !3113, line: 105, column: 7)
!3187 = !DILocation(line: 105, column: 19, scope: !3186)
!3188 = !DILocation(line: 105, column: 7, scope: !3112)
!3189 = !DILocation(line: 107, column: 15, scope: !3190)
!3190 = distinct !DILexicalBlock(scope: !3186, file: !3113, line: 106, column: 5)
!3191 = !DILocation(line: 107, column: 7, scope: !3190)
!3192 = !DILocation(line: 107, column: 13, scope: !3190)
!3193 = !DILocation(line: 108, column: 14, scope: !3190)
!3194 = !DILocation(line: 109, column: 5, scope: !3190)
!3195 = !DILocation(line: 111, column: 10, scope: !3112)
!3196 = !DILocation(line: 111, column: 3, scope: !3112)
!3197 = !DILocation(line: 112, column: 1, scope: !3112)
!3198 = !DILocalVariable(name: "fp", arg: 1, scope: !3199, file: !3113, line: 58, type: !3202)
!3199 = distinct !DISubprogram(name: "rpl_fclose", scope: !3113, file: !3113, line: 58, type: !3200, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3236, retainedNodes: !11)
!3200 = !DISubroutineType(types: !3201)
!3201 = !{!6, !3202}
!3202 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3203, size: 64)
!3203 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2269, line: 7, baseType: !3204)
!3204 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2271, line: 49, size: 1728, elements: !3205)
!3205 = !{!3206, !3207, !3208, !3209, !3210, !3211, !3212, !3213, !3214, !3215, !3216, !3217, !3218, !3219, !3221, !3222, !3223, !3224, !3225, !3226, !3227, !3228, !3229, !3230, !3231, !3232, !3233, !3234, !3235}
!3206 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3204, file: !2271, line: 51, baseType: !6, size: 32)
!3207 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3204, file: !2271, line: 54, baseType: !8, size: 64, offset: 64)
!3208 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3204, file: !2271, line: 55, baseType: !8, size: 64, offset: 128)
!3209 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3204, file: !2271, line: 56, baseType: !8, size: 64, offset: 192)
!3210 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3204, file: !2271, line: 57, baseType: !8, size: 64, offset: 256)
!3211 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3204, file: !2271, line: 58, baseType: !8, size: 64, offset: 320)
!3212 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3204, file: !2271, line: 59, baseType: !8, size: 64, offset: 384)
!3213 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3204, file: !2271, line: 60, baseType: !8, size: 64, offset: 448)
!3214 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3204, file: !2271, line: 61, baseType: !8, size: 64, offset: 512)
!3215 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3204, file: !2271, line: 64, baseType: !8, size: 64, offset: 576)
!3216 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3204, file: !2271, line: 65, baseType: !8, size: 64, offset: 640)
!3217 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3204, file: !2271, line: 66, baseType: !8, size: 64, offset: 704)
!3218 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3204, file: !2271, line: 68, baseType: !2286, size: 64, offset: 768)
!3219 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3204, file: !2271, line: 70, baseType: !3220, size: 64, offset: 832)
!3220 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3204, size: 64)
!3221 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3204, file: !2271, line: 72, baseType: !6, size: 32, offset: 896)
!3222 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3204, file: !2271, line: 73, baseType: !6, size: 32, offset: 928)
!3223 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3204, file: !2271, line: 74, baseType: !2293, size: 64, offset: 960)
!3224 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3204, file: !2271, line: 77, baseType: !98, size: 16, offset: 1024)
!3225 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3204, file: !2271, line: 78, baseType: !2298, size: 8, offset: 1040)
!3226 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3204, file: !2271, line: 79, baseType: !2300, size: 8, offset: 1048)
!3227 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3204, file: !2271, line: 81, baseType: !2304, size: 64, offset: 1088)
!3228 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3204, file: !2271, line: 89, baseType: !2307, size: 64, offset: 1152)
!3229 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3204, file: !2271, line: 91, baseType: !2309, size: 64, offset: 1216)
!3230 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3204, file: !2271, line: 92, baseType: !2312, size: 64, offset: 1280)
!3231 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3204, file: !2271, line: 93, baseType: !3220, size: 64, offset: 1344)
!3232 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3204, file: !2271, line: 94, baseType: !13, size: 64, offset: 1408)
!3233 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3204, file: !2271, line: 95, baseType: !99, size: 64, offset: 1472)
!3234 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3204, file: !2271, line: 96, baseType: !6, size: 32, offset: 1536)
!3235 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3204, file: !2271, line: 98, baseType: !2319, size: 160, offset: 1568)
!3236 = distinct !DICompileUnit(language: DW_LANG_C99, file: !177, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, nameTableKind: None)
!3237 = !DILocalVariable(name: "saved_errno", scope: !3199, file: !3113, line: 60, type: !6)
!3238 = !DILocalVariable(name: "fd", scope: !3199, file: !3113, line: 61, type: !6)
!3239 = !DILocalVariable(name: "result", scope: !3199, file: !3113, line: 62, type: !6)
!3240 = distinct !DISubprogram(name: "rpl_fflush", scope: !3241, file: !3241, line: 129, type: !3242, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !178, retainedNodes: !11)
!3241 = !DIFile(filename: "lib/fflush.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3242 = !DISubroutineType(types: !3243)
!3243 = !{!6, !3244}
!3244 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3245, size: 64)
!3245 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2269, line: 7, baseType: !3246)
!3246 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2271, line: 49, size: 1728, elements: !3247)
!3247 = !{!3248, !3249, !3250, !3251, !3252, !3253, !3254, !3255, !3256, !3257, !3258, !3259, !3260, !3261, !3263, !3264, !3265, !3266, !3267, !3268, !3269, !3270, !3271, !3272, !3273, !3274, !3275, !3276, !3277}
!3248 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3246, file: !2271, line: 51, baseType: !6, size: 32)
!3249 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3246, file: !2271, line: 54, baseType: !8, size: 64, offset: 64)
!3250 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3246, file: !2271, line: 55, baseType: !8, size: 64, offset: 128)
!3251 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3246, file: !2271, line: 56, baseType: !8, size: 64, offset: 192)
!3252 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3246, file: !2271, line: 57, baseType: !8, size: 64, offset: 256)
!3253 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3246, file: !2271, line: 58, baseType: !8, size: 64, offset: 320)
!3254 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3246, file: !2271, line: 59, baseType: !8, size: 64, offset: 384)
!3255 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3246, file: !2271, line: 60, baseType: !8, size: 64, offset: 448)
!3256 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3246, file: !2271, line: 61, baseType: !8, size: 64, offset: 512)
!3257 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3246, file: !2271, line: 64, baseType: !8, size: 64, offset: 576)
!3258 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3246, file: !2271, line: 65, baseType: !8, size: 64, offset: 640)
!3259 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3246, file: !2271, line: 66, baseType: !8, size: 64, offset: 704)
!3260 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3246, file: !2271, line: 68, baseType: !2286, size: 64, offset: 768)
!3261 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3246, file: !2271, line: 70, baseType: !3262, size: 64, offset: 832)
!3262 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3246, size: 64)
!3263 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3246, file: !2271, line: 72, baseType: !6, size: 32, offset: 896)
!3264 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3246, file: !2271, line: 73, baseType: !6, size: 32, offset: 928)
!3265 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3246, file: !2271, line: 74, baseType: !2293, size: 64, offset: 960)
!3266 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3246, file: !2271, line: 77, baseType: !98, size: 16, offset: 1024)
!3267 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3246, file: !2271, line: 78, baseType: !2298, size: 8, offset: 1040)
!3268 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3246, file: !2271, line: 79, baseType: !2300, size: 8, offset: 1048)
!3269 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3246, file: !2271, line: 81, baseType: !2304, size: 64, offset: 1088)
!3270 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3246, file: !2271, line: 89, baseType: !2307, size: 64, offset: 1152)
!3271 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3246, file: !2271, line: 91, baseType: !2309, size: 64, offset: 1216)
!3272 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3246, file: !2271, line: 92, baseType: !2312, size: 64, offset: 1280)
!3273 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3246, file: !2271, line: 93, baseType: !3262, size: 64, offset: 1344)
!3274 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3246, file: !2271, line: 94, baseType: !13, size: 64, offset: 1408)
!3275 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3246, file: !2271, line: 95, baseType: !99, size: 64, offset: 1472)
!3276 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3246, file: !2271, line: 96, baseType: !6, size: 32, offset: 1536)
!3277 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3246, file: !2271, line: 98, baseType: !2319, size: 160, offset: 1568)
!3278 = !DILocalVariable(name: "stream", arg: 1, scope: !3240, file: !3241, line: 129, type: !3244)
!3279 = !DILocation(line: 129, column: 19, scope: !3240)
!3280 = !DILocation(line: 150, column: 7, scope: !3281)
!3281 = distinct !DILexicalBlock(scope: !3240, file: !3241, line: 150, column: 7)
!3282 = !DILocation(line: 150, column: 14, scope: !3281)
!3283 = !DILocation(line: 150, column: 22, scope: !3281)
!3284 = !DILocation(line: 150, column: 27, scope: !3281)
!3285 = !DILocation(line: 150, column: 7, scope: !3240)
!3286 = !DILocation(line: 151, column: 20, scope: !3281)
!3287 = !DILocation(line: 151, column: 12, scope: !3281)
!3288 = !DILocation(line: 151, column: 5, scope: !3281)
!3289 = !DILocation(line: 156, column: 44, scope: !3240)
!3290 = !DILocation(line: 156, column: 3, scope: !3240)
!3291 = !DILocation(line: 158, column: 18, scope: !3240)
!3292 = !DILocation(line: 158, column: 10, scope: !3240)
!3293 = !DILocation(line: 158, column: 3, scope: !3240)
!3294 = !DILocation(line: 235, column: 1, scope: !3240)
!3295 = !DILocalVariable(name: "stream", arg: 1, scope: !3296, file: !3241, line: 129, type: !3299)
!3296 = distinct !DISubprogram(name: "rpl_fflush", scope: !3241, file: !3241, line: 129, type: !3297, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3333, retainedNodes: !11)
!3297 = !DISubroutineType(types: !3298)
!3298 = !{!6, !3299}
!3299 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3300, size: 64)
!3300 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2269, line: 7, baseType: !3301)
!3301 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2271, line: 49, size: 1728, elements: !3302)
!3302 = !{!3303, !3304, !3305, !3306, !3307, !3308, !3309, !3310, !3311, !3312, !3313, !3314, !3315, !3316, !3318, !3319, !3320, !3321, !3322, !3323, !3324, !3325, !3326, !3327, !3328, !3329, !3330, !3331, !3332}
!3303 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3301, file: !2271, line: 51, baseType: !6, size: 32)
!3304 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3301, file: !2271, line: 54, baseType: !8, size: 64, offset: 64)
!3305 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3301, file: !2271, line: 55, baseType: !8, size: 64, offset: 128)
!3306 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3301, file: !2271, line: 56, baseType: !8, size: 64, offset: 192)
!3307 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3301, file: !2271, line: 57, baseType: !8, size: 64, offset: 256)
!3308 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3301, file: !2271, line: 58, baseType: !8, size: 64, offset: 320)
!3309 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3301, file: !2271, line: 59, baseType: !8, size: 64, offset: 384)
!3310 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3301, file: !2271, line: 60, baseType: !8, size: 64, offset: 448)
!3311 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3301, file: !2271, line: 61, baseType: !8, size: 64, offset: 512)
!3312 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3301, file: !2271, line: 64, baseType: !8, size: 64, offset: 576)
!3313 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3301, file: !2271, line: 65, baseType: !8, size: 64, offset: 640)
!3314 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3301, file: !2271, line: 66, baseType: !8, size: 64, offset: 704)
!3315 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3301, file: !2271, line: 68, baseType: !2286, size: 64, offset: 768)
!3316 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3301, file: !2271, line: 70, baseType: !3317, size: 64, offset: 832)
!3317 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3301, size: 64)
!3318 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3301, file: !2271, line: 72, baseType: !6, size: 32, offset: 896)
!3319 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3301, file: !2271, line: 73, baseType: !6, size: 32, offset: 928)
!3320 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3301, file: !2271, line: 74, baseType: !2293, size: 64, offset: 960)
!3321 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3301, file: !2271, line: 77, baseType: !98, size: 16, offset: 1024)
!3322 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3301, file: !2271, line: 78, baseType: !2298, size: 8, offset: 1040)
!3323 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3301, file: !2271, line: 79, baseType: !2300, size: 8, offset: 1048)
!3324 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3301, file: !2271, line: 81, baseType: !2304, size: 64, offset: 1088)
!3325 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3301, file: !2271, line: 89, baseType: !2307, size: 64, offset: 1152)
!3326 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3301, file: !2271, line: 91, baseType: !2309, size: 64, offset: 1216)
!3327 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3301, file: !2271, line: 92, baseType: !2312, size: 64, offset: 1280)
!3328 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3301, file: !2271, line: 93, baseType: !3317, size: 64, offset: 1344)
!3329 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3301, file: !2271, line: 94, baseType: !13, size: 64, offset: 1408)
!3330 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3301, file: !2271, line: 95, baseType: !99, size: 64, offset: 1472)
!3331 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3301, file: !2271, line: 96, baseType: !6, size: 32, offset: 1536)
!3332 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3301, file: !2271, line: 98, baseType: !2319, size: 160, offset: 1568)
!3333 = distinct !DICompileUnit(language: DW_LANG_C99, file: !179, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!3334 = distinct !DISubprogram(name: "clear_ungetc_buffer_preserving_position", scope: !3241, file: !3241, line: 41, type: !3335, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !178, retainedNodes: !11)
!3335 = !DISubroutineType(types: !3336)
!3336 = !{null, !3244}
!3337 = !DILocalVariable(name: "fp", arg: 1, scope: !3334, file: !3241, line: 41, type: !3244)
!3338 = !DILocation(line: 41, column: 48, scope: !3334)
!3339 = !DILocation(line: 43, column: 7, scope: !3340)
!3340 = distinct !DILexicalBlock(scope: !3334, file: !3241, line: 43, column: 7)
!3341 = !DILocation(line: 43, column: 11, scope: !3340)
!3342 = !DILocation(line: 43, column: 18, scope: !3340)
!3343 = !DILocation(line: 43, column: 7, scope: !3334)
!3344 = !DILocation(line: 45, column: 13, scope: !3340)
!3345 = !DILocation(line: 45, column: 5, scope: !3340)
!3346 = !DILocation(line: 46, column: 1, scope: !3334)
!3347 = !DILocalVariable(name: "fp", arg: 1, scope: !3348, file: !3241, line: 41, type: !3351)
!3348 = distinct !DISubprogram(name: "clear_ungetc_buffer_preserving_position", scope: !3241, file: !3241, line: 41, type: !3349, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3385, retainedNodes: !11)
!3349 = !DISubroutineType(types: !3350)
!3350 = !{null, !3351}
!3351 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3352, size: 64)
!3352 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2269, line: 7, baseType: !3353)
!3353 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2271, line: 49, size: 1728, elements: !3354)
!3354 = !{!3355, !3356, !3357, !3358, !3359, !3360, !3361, !3362, !3363, !3364, !3365, !3366, !3367, !3368, !3370, !3371, !3372, !3373, !3374, !3375, !3376, !3377, !3378, !3379, !3380, !3381, !3382, !3383, !3384}
!3355 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3353, file: !2271, line: 51, baseType: !6, size: 32)
!3356 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3353, file: !2271, line: 54, baseType: !8, size: 64, offset: 64)
!3357 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3353, file: !2271, line: 55, baseType: !8, size: 64, offset: 128)
!3358 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3353, file: !2271, line: 56, baseType: !8, size: 64, offset: 192)
!3359 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3353, file: !2271, line: 57, baseType: !8, size: 64, offset: 256)
!3360 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3353, file: !2271, line: 58, baseType: !8, size: 64, offset: 320)
!3361 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3353, file: !2271, line: 59, baseType: !8, size: 64, offset: 384)
!3362 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3353, file: !2271, line: 60, baseType: !8, size: 64, offset: 448)
!3363 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3353, file: !2271, line: 61, baseType: !8, size: 64, offset: 512)
!3364 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3353, file: !2271, line: 64, baseType: !8, size: 64, offset: 576)
!3365 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3353, file: !2271, line: 65, baseType: !8, size: 64, offset: 640)
!3366 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3353, file: !2271, line: 66, baseType: !8, size: 64, offset: 704)
!3367 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3353, file: !2271, line: 68, baseType: !2286, size: 64, offset: 768)
!3368 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3353, file: !2271, line: 70, baseType: !3369, size: 64, offset: 832)
!3369 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3353, size: 64)
!3370 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3353, file: !2271, line: 72, baseType: !6, size: 32, offset: 896)
!3371 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3353, file: !2271, line: 73, baseType: !6, size: 32, offset: 928)
!3372 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3353, file: !2271, line: 74, baseType: !2293, size: 64, offset: 960)
!3373 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3353, file: !2271, line: 77, baseType: !98, size: 16, offset: 1024)
!3374 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3353, file: !2271, line: 78, baseType: !2298, size: 8, offset: 1040)
!3375 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3353, file: !2271, line: 79, baseType: !2300, size: 8, offset: 1048)
!3376 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3353, file: !2271, line: 81, baseType: !2304, size: 64, offset: 1088)
!3377 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3353, file: !2271, line: 89, baseType: !2307, size: 64, offset: 1152)
!3378 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3353, file: !2271, line: 91, baseType: !2309, size: 64, offset: 1216)
!3379 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3353, file: !2271, line: 92, baseType: !2312, size: 64, offset: 1280)
!3380 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3353, file: !2271, line: 93, baseType: !3369, size: 64, offset: 1344)
!3381 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3353, file: !2271, line: 94, baseType: !13, size: 64, offset: 1408)
!3382 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3353, file: !2271, line: 95, baseType: !99, size: 64, offset: 1472)
!3383 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3353, file: !2271, line: 96, baseType: !6, size: 32, offset: 1536)
!3384 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3353, file: !2271, line: 98, baseType: !2319, size: 160, offset: 1568)
!3385 = distinct !DICompileUnit(language: DW_LANG_C99, file: !179, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!3386 = distinct !DISubprogram(name: "rpl_fseeko", scope: !3387, file: !3387, line: 28, type: !3388, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !180, retainedNodes: !11)
!3387 = !DIFile(filename: "lib/fseeko.c", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3388 = !DISubroutineType(types: !3389)
!3389 = !{!6, !3390, !3424, !6}
!3390 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3391, size: 64)
!3391 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2269, line: 7, baseType: !3392)
!3392 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2271, line: 49, size: 1728, elements: !3393)
!3393 = !{!3394, !3395, !3396, !3397, !3398, !3399, !3400, !3401, !3402, !3403, !3404, !3405, !3406, !3407, !3409, !3410, !3411, !3412, !3413, !3414, !3415, !3416, !3417, !3418, !3419, !3420, !3421, !3422, !3423}
!3394 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3392, file: !2271, line: 51, baseType: !6, size: 32)
!3395 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3392, file: !2271, line: 54, baseType: !8, size: 64, offset: 64)
!3396 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3392, file: !2271, line: 55, baseType: !8, size: 64, offset: 128)
!3397 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3392, file: !2271, line: 56, baseType: !8, size: 64, offset: 192)
!3398 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3392, file: !2271, line: 57, baseType: !8, size: 64, offset: 256)
!3399 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3392, file: !2271, line: 58, baseType: !8, size: 64, offset: 320)
!3400 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3392, file: !2271, line: 59, baseType: !8, size: 64, offset: 384)
!3401 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3392, file: !2271, line: 60, baseType: !8, size: 64, offset: 448)
!3402 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3392, file: !2271, line: 61, baseType: !8, size: 64, offset: 512)
!3403 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3392, file: !2271, line: 64, baseType: !8, size: 64, offset: 576)
!3404 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3392, file: !2271, line: 65, baseType: !8, size: 64, offset: 640)
!3405 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3392, file: !2271, line: 66, baseType: !8, size: 64, offset: 704)
!3406 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3392, file: !2271, line: 68, baseType: !2286, size: 64, offset: 768)
!3407 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3392, file: !2271, line: 70, baseType: !3408, size: 64, offset: 832)
!3408 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3392, size: 64)
!3409 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3392, file: !2271, line: 72, baseType: !6, size: 32, offset: 896)
!3410 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3392, file: !2271, line: 73, baseType: !6, size: 32, offset: 928)
!3411 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3392, file: !2271, line: 74, baseType: !2293, size: 64, offset: 960)
!3412 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3392, file: !2271, line: 77, baseType: !98, size: 16, offset: 1024)
!3413 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3392, file: !2271, line: 78, baseType: !2298, size: 8, offset: 1040)
!3414 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3392, file: !2271, line: 79, baseType: !2300, size: 8, offset: 1048)
!3415 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3392, file: !2271, line: 81, baseType: !2304, size: 64, offset: 1088)
!3416 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3392, file: !2271, line: 89, baseType: !2307, size: 64, offset: 1152)
!3417 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3392, file: !2271, line: 91, baseType: !2309, size: 64, offset: 1216)
!3418 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3392, file: !2271, line: 92, baseType: !2312, size: 64, offset: 1280)
!3419 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3392, file: !2271, line: 93, baseType: !3408, size: 64, offset: 1344)
!3420 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3392, file: !2271, line: 94, baseType: !13, size: 64, offset: 1408)
!3421 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3392, file: !2271, line: 95, baseType: !99, size: 64, offset: 1472)
!3422 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3392, file: !2271, line: 96, baseType: !6, size: 32, offset: 1536)
!3423 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3392, file: !2271, line: 98, baseType: !2319, size: 160, offset: 1568)
!3424 = !DIDerivedType(tag: DW_TAG_typedef, name: "off_t", file: !2570, line: 63, baseType: !2293)
!3425 = !DILocalVariable(name: "fp", arg: 1, scope: !3386, file: !3387, line: 28, type: !3390)
!3426 = !DILocation(line: 28, column: 15, scope: !3386)
!3427 = !DILocalVariable(name: "offset", arg: 2, scope: !3386, file: !3387, line: 28, type: !3424)
!3428 = !DILocation(line: 28, column: 25, scope: !3386)
!3429 = !DILocalVariable(name: "whence", arg: 3, scope: !3386, file: !3387, line: 28, type: !6)
!3430 = !DILocation(line: 28, column: 37, scope: !3386)
!3431 = !DILocation(line: 52, column: 7, scope: !3432)
!3432 = distinct !DILexicalBlock(scope: !3386, file: !3387, line: 52, column: 7)
!3433 = !DILocation(line: 52, column: 11, scope: !3432)
!3434 = !DILocation(line: 52, column: 27, scope: !3432)
!3435 = !DILocation(line: 52, column: 31, scope: !3432)
!3436 = !DILocation(line: 52, column: 24, scope: !3432)
!3437 = !DILocation(line: 53, column: 7, scope: !3432)
!3438 = !DILocation(line: 53, column: 10, scope: !3432)
!3439 = !DILocation(line: 53, column: 14, scope: !3432)
!3440 = !DILocation(line: 53, column: 31, scope: !3432)
!3441 = !DILocation(line: 53, column: 35, scope: !3432)
!3442 = !DILocation(line: 53, column: 28, scope: !3432)
!3443 = !DILocation(line: 54, column: 7, scope: !3432)
!3444 = !DILocation(line: 54, column: 10, scope: !3432)
!3445 = !DILocation(line: 54, column: 14, scope: !3432)
!3446 = !DILocation(line: 54, column: 28, scope: !3432)
!3447 = !DILocation(line: 52, column: 7, scope: !3386)
!3448 = !DILocalVariable(name: "pos", scope: !3449, file: !3387, line: 117, type: !3424)
!3449 = distinct !DILexicalBlock(scope: !3432, file: !3387, line: 113, column: 5)
!3450 = !DILocation(line: 117, column: 13, scope: !3449)
!3451 = !DILocation(line: 117, column: 34, scope: !3449)
!3452 = !DILocation(line: 117, column: 26, scope: !3449)
!3453 = !DILocation(line: 117, column: 39, scope: !3449)
!3454 = !DILocation(line: 117, column: 47, scope: !3449)
!3455 = !DILocation(line: 117, column: 19, scope: !3449)
!3456 = !DILocation(line: 118, column: 11, scope: !3457)
!3457 = distinct !DILexicalBlock(scope: !3449, file: !3387, line: 118, column: 11)
!3458 = !DILocation(line: 118, column: 15, scope: !3457)
!3459 = !DILocation(line: 118, column: 11, scope: !3449)
!3460 = !DILocation(line: 124, column: 11, scope: !3461)
!3461 = distinct !DILexicalBlock(scope: !3457, file: !3387, line: 119, column: 9)
!3462 = !DILocation(line: 129, column: 7, scope: !3449)
!3463 = !DILocation(line: 129, column: 11, scope: !3449)
!3464 = !DILocation(line: 129, column: 18, scope: !3449)
!3465 = !DILocation(line: 130, column: 21, scope: !3449)
!3466 = !DILocation(line: 130, column: 7, scope: !3449)
!3467 = !DILocation(line: 130, column: 11, scope: !3449)
!3468 = !DILocation(line: 130, column: 19, scope: !3449)
!3469 = !DILocation(line: 161, column: 7, scope: !3449)
!3470 = !DILocation(line: 163, column: 18, scope: !3386)
!3471 = !DILocation(line: 163, column: 22, scope: !3386)
!3472 = !DILocation(line: 163, column: 30, scope: !3386)
!3473 = !DILocation(line: 163, column: 10, scope: !3386)
!3474 = !DILocation(line: 163, column: 3, scope: !3386)
!3475 = !DILocation(line: 164, column: 1, scope: !3386)
!3476 = !DILocalVariable(name: "fp", arg: 1, scope: !3477, file: !3387, line: 28, type: !3480)
!3477 = distinct !DISubprogram(name: "rpl_fseeko", scope: !3387, file: !3387, line: 28, type: !3478, scopeLine: 42, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3514, retainedNodes: !11)
!3478 = !DISubroutineType(types: !3479)
!3479 = !{!6, !3480, !3424, !6}
!3480 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3481, size: 64)
!3481 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2269, line: 7, baseType: !3482)
!3482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2271, line: 49, size: 1728, elements: !3483)
!3483 = !{!3484, !3485, !3486, !3487, !3488, !3489, !3490, !3491, !3492, !3493, !3494, !3495, !3496, !3497, !3499, !3500, !3501, !3502, !3503, !3504, !3505, !3506, !3507, !3508, !3509, !3510, !3511, !3512, !3513}
!3484 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !3482, file: !2271, line: 51, baseType: !6, size: 32)
!3485 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !3482, file: !2271, line: 54, baseType: !8, size: 64, offset: 64)
!3486 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !3482, file: !2271, line: 55, baseType: !8, size: 64, offset: 128)
!3487 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !3482, file: !2271, line: 56, baseType: !8, size: 64, offset: 192)
!3488 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !3482, file: !2271, line: 57, baseType: !8, size: 64, offset: 256)
!3489 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !3482, file: !2271, line: 58, baseType: !8, size: 64, offset: 320)
!3490 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !3482, file: !2271, line: 59, baseType: !8, size: 64, offset: 384)
!3491 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !3482, file: !2271, line: 60, baseType: !8, size: 64, offset: 448)
!3492 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !3482, file: !2271, line: 61, baseType: !8, size: 64, offset: 512)
!3493 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !3482, file: !2271, line: 64, baseType: !8, size: 64, offset: 576)
!3494 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !3482, file: !2271, line: 65, baseType: !8, size: 64, offset: 640)
!3495 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !3482, file: !2271, line: 66, baseType: !8, size: 64, offset: 704)
!3496 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !3482, file: !2271, line: 68, baseType: !2286, size: 64, offset: 768)
!3497 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !3482, file: !2271, line: 70, baseType: !3498, size: 64, offset: 832)
!3498 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3482, size: 64)
!3499 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !3482, file: !2271, line: 72, baseType: !6, size: 32, offset: 896)
!3500 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !3482, file: !2271, line: 73, baseType: !6, size: 32, offset: 928)
!3501 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !3482, file: !2271, line: 74, baseType: !2293, size: 64, offset: 960)
!3502 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !3482, file: !2271, line: 77, baseType: !98, size: 16, offset: 1024)
!3503 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !3482, file: !2271, line: 78, baseType: !2298, size: 8, offset: 1040)
!3504 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !3482, file: !2271, line: 79, baseType: !2300, size: 8, offset: 1048)
!3505 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !3482, file: !2271, line: 81, baseType: !2304, size: 64, offset: 1088)
!3506 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !3482, file: !2271, line: 89, baseType: !2307, size: 64, offset: 1152)
!3507 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !3482, file: !2271, line: 91, baseType: !2309, size: 64, offset: 1216)
!3508 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !3482, file: !2271, line: 92, baseType: !2312, size: 64, offset: 1280)
!3509 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !3482, file: !2271, line: 93, baseType: !3498, size: 64, offset: 1344)
!3510 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !3482, file: !2271, line: 94, baseType: !13, size: 64, offset: 1408)
!3511 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !3482, file: !2271, line: 95, baseType: !99, size: 64, offset: 1472)
!3512 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !3482, file: !2271, line: 96, baseType: !6, size: 32, offset: 1536)
!3513 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !3482, file: !2271, line: 98, baseType: !2319, size: 160, offset: 1568)
!3514 = distinct !DICompileUnit(language: DW_LANG_C99, file: !181, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, retainedTypes: !153, nameTableKind: None)
!3515 = !DILocalVariable(name: "offset", arg: 2, scope: !3477, file: !3387, line: 28, type: !3424)
!3516 = !DILocalVariable(name: "whence", arg: 3, scope: !3477, file: !3387, line: 28, type: !6)
!3517 = distinct !DISubprogram(name: "c_tolower", scope: !3518, file: !3518, line: 337, type: !3519, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !182, retainedNodes: !11)
!3518 = !DIFile(filename: "./lib/c-ctype.h", directory: "/home/newton/cfiles/coreutils/coreutils-8.32")
!3519 = !DISubroutineType(types: !3520)
!3520 = !{!6, !6}
!3521 = !DILocalVariable(name: "c", arg: 1, scope: !3517, file: !3518, line: 337, type: !6)
!3522 = !DILocation(line: 337, column: 16, scope: !3517)
!3523 = !DILocation(line: 339, column: 11, scope: !3517)
!3524 = !DILocation(line: 339, column: 3, scope: !3517)
!3525 = !DILocation(line: 342, column: 14, scope: !3526)
!3526 = distinct !DILexicalBlock(scope: !3517, file: !3518, line: 340, column: 5)
!3527 = !DILocation(line: 342, column: 16, scope: !3526)
!3528 = !DILocation(line: 342, column: 22, scope: !3526)
!3529 = !DILocation(line: 342, column: 7, scope: !3526)
!3530 = !DILocation(line: 344, column: 14, scope: !3526)
!3531 = !DILocation(line: 344, column: 7, scope: !3526)
!3532 = !DILocation(line: 346, column: 1, scope: !3517)
!3533 = !DILocalVariable(name: "c", arg: 1, scope: !3534, file: !3518, line: 337, type: !6)
!3534 = distinct !DISubprogram(name: "c_tolower", scope: !3518, file: !3518, line: 337, type: !3519, scopeLine: 338, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3535, retainedNodes: !11)
!3535 = distinct !DICompileUnit(language: DW_LANG_C99, file: !183, producer: "clang version 9.0.1-12 ", isOptimized: true, runtimeVersion: 0, emissionKind: FullDebug, enums: !11, nameTableKind: None)
